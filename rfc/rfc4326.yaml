- contents:
  - "           Unidirectional Lightweight Encapsulation (ULE) for\n   Transmission
    of IP Datagrams over an MPEG-2 Transport Stream (TS)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The MPEG-2 Transport Stream (TS) has been widely accepted not only\n
    \  for providing digital TV services, but also as a subnetwork\n   technology
    for building IP networks.\n   This document describes a Unidirectional Lightweight
    Encapsulation\n   (ULE) mechanism for the transport of IPv4 and IPv6 Datagrams
    and\n   other network protocol packets directly over the ISO MPEG-2 Transport\n
    \  Stream as TS Private Data.  ULE specifies a base encapsulation format\n   and
    supports an extension format that allows it to carry additional\n   header information
    to assist in network/Receiver processing.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Conventions Used in This Document ...............................4\n   3.
    Description of the Method .......................................8\n   4. SNDU
    Format .....................................................9\n      4.1. Destination
    Address Absent (D) Field ......................10\n      4.2. Length Field ..............................................10\n
    \     4.3. End Indicator .............................................10\n      4.4.
    Type Field ................................................10\n           4.4.1.
    Type 1: Next-Header Type Fields ....................11\n           4.4.2. Type
    2: EtherType Compatible Type Fields ...........11\n      4.5. SNDU Destination
    Address Field ............................12\n      4.6. SNDU Trailer CRC ..........................................12\n
    \     4.7. Description of SNDU Formats ...............................13\n           4.7.1.
    End Indicator ......................................14\n           4.7.2. IPv4
    SNDU Encapsulation ............................14\n           4.7.3. IPv6 SNDU
    Encapsulation ............................15\n   5. Extension Headers ..............................................16\n
    \     5.1. Test SNDU .................................................18\n      5.2.
    Bridged Frame SNDU Encapsulation ..........................18\n      5.3. Extension-Padding
    Optional Extension Header ...............21\n   6. Processing at the Encapsulator
    .................................22\n      6.1. SNDU Encapsulation ........................................22\n
    \     6.2. Procedure for Padding and Packing .........................24\n   7.
    Receiver Processing ............................................25\n      7.1.
    Idle State ................................................26\n           7.1.1.
    Idle State Payload Pointer Checking ................26\n      7.2. Processing
    of a Received SNDU .............................26\n           7.2.1. Reassembly
    Payload Pointer Checking ................28\n      7.3. Other Error Conditions
    ....................................28\n   8. Summary ........................................................29\n
    \  9. Acknowledgements ...............................................29\n   10.
    Security Considerations .......................................29\n   11. IANA
    Considerations ...........................................30\n      11.1. IANA
    Guidelines ..........................................30\n   12. References ....................................................31\n
    \     12.1. Normative References .....................................31\n      12.2.
    Informative References ...................................32\n   Appendix A. SNDU
    Packing Examples .................................35\n   Appendix B. SNDU Encapsulation
    ....................................40\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document describes an encapsulation for the transport
    of IP\n   datagrams, or other network-layer packets, over ISO MPEG-2 Transport\n
    \  Streams [ISO-MPEG2, RFC4259].  The encapsulation satisfies the\n   requirement
    for a lightweight encapsulation defined in section 4 of\n   [RFC4259].  The basic
    header provides the required set of protocol\n   fields.  Extension headers may
    also be defined.  This header\n   structure is significantly simpler to parse
    and process [SOOR05] than\n   current alternative methods (e.g., MPE [ETSI-DAT],
    which builds upon\n   the DSM-CC Table Section syntax [ISO-DSMCC]).\n   The encapsulation
    is suited to services based on MPEG-2; for example,\n   the Digital Video Broadcast
    (DVB) architecture, the Advanced\n   Television Systems Committee (ATSC) system
    [ATSC, ATSC-G], and other\n   similar MPEG-2-based transmission systems.  Such
    systems provide\n   unidirectional (simplex) physical and link-layer standards.
    \ Support\n   has been defined for a wide range of physical media (e.g.,\n   Terrestrial
    TV [ETSI-DVBT, ATSC-PSIP-TC], Satellite TV [ETSI-DVBS,\n   ATSC-S], and Cable
    Transmission [ETSI-DVBC, ATSC-PSIP-TC]).\n   Bi-directional (duplex) links may
    also be established using these\n   standards (e.g., DVB defines a range of return
    channel technologies,\n   including the use of two-way satellite links [ETSI-RCS])
    and dial-up\n   modem links [RFC3077].\n   Protocol Data Units (PDUs), such as
    Ethernet Frames, IP datagrams, or\n   other network-layer packets, used for transmission
    over an MPEG-2\n   Transport Multiplex are passed to an Encapsulator.  This formats
    each\n   PDU into a SubNetwork Data Unit (SNDU) by adding an encapsulation\n   header
    and an integrity check trailer.  The SNDU is fragmented into a\n   series of one
    or more MPEG-2 Transport Stream (TS) Packets that are\n   sent over a single TS
    Logical Channel.\n   The MPEG-2 specification [ISO-MPEG2] requires that conformant
    TS\n   Multiplexes provide Program Specific Information (PSI) for each\n   stream
    in the TS Multiplex.  Other MPEG-2-based transmission\n   standards may also define
    Service Information (SI).\n   A format_identifier value has been registered for
    ULE [ULE1].  This\n   32 bit number has a hexadecimal value of 0x554C4531.  Transport\n
    \  Streams that utilise the Programme Map Table (PMT) defined in ISO\n   13818-1
    [ISO-MPEG2] and that use the ULE format defined in this\n   document, SHOULD insert
    a descriptor with this value in the PMT\n   ES_info descriptor loop.  ULE Streams
    may also be identified by the\n   stream_type value of 0x91 [ATSC-REG] in a SI/PSI
    Table [ISO_MPEG2].\n   This information may allow Receivers and Re-multiplexors
    [RFC4259] to\n   locate a specific ULE Stream (i.e., the PID value of the TS Logical\n
    \  Channel that carries a ULE Stream).  The conditions under which this\n   information
    is required and the format in which it is to be provided\n   are beyond the scope
    of this document.  Addressing and mapping issues\n   for ULE over MPEG-2 are also
    described in [IPDVB-AR].\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The capitalized key words \"MUST\",
    \"MUST NOT\", \"REQUIRED\", \"SHALL\",\n   \"SHALL NOT\", \"SHOULD\", \"SHOULD
    NOT\", \"RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to
    be interpreted as described in\n   [RFC2119].\n   Other terms used in this document
    are defined below:\n   Adaptation Field: An optional variable-length extension
    field of the\n   fixed-length TS Packet header, intended to convey clock references\n
    \  and timing and synchronization information as well as stuffing over\n   an
    MPEG-2 Multiplex [ISO-MPEG2].\n   AFC: Adaptation Field Control [ISO-MPEG2].  A
    pair of bits carried in\n   the TS Packet header that signal the presence of the
    Adaptation Field\n   and/or TS Packet payload.\n   ATSC: Advanced Television Systems
    Committee [ATSC].  A framework and\n   a set of associated standards for the transmission
    of video, audio,\n   and data using the ISO MPEG-2 standard.\n   b: bit.  For
    example, one byte consists of 8b.\n   B: Byte.  Groups of bytes are represented
    in Internet byte order.\n   DSM-CC: Digital Storage Media Command and Control
    [ISO-DSMCC].  A\n   format for transmission of data and control information in
    an MPEG-2\n   Private Section, defined by the ISO MPEG-2 standard.\n   DVB: Digital
    Video Broadcast.  A framework and set of associated\n   standards published by
    the European Telecommunications Standards\n   Institute (ETSI) (e.g., [ETSI-DVBC,
    ETSI-DVBS, ETSI-DVBT]) for the\n   transmission of video, audio, and data using
    the ISO MPEG-2 Standard\n   [ISO-MPEG2].\n   Encapsulator: A network device that
    receives PDUs and formats these\n   into Payload Units (known here as SNDUs) for
    output as a stream of TS\n   Packets.\n   End Indicator: A value that indicates
    to the Receiver that there are\n   no further SNDUs present within the current
    TS Packet.\n   LLC: Logical Link Control [ISO-8802-2, IEEE-802.2].  A link-layer\n
    \  protocol defined by the IEEE 802 standard, which follows the Ethernet\n   MAC
    Header.\n   MAC: Medium Access Control [IEEE-802.3].  A link-layer protocol\n
    \  defined by the IEEE 802.3 standard (or by Ethernet v2 [DIX]).\n   MAC Header:
    The link-layer header of the IEEE 802.3 standard\n   [IEEE-802.3] or Ethernet
    v2 [DIX].  It consists of a 6B destination\n   address, 6B source address, and
    2B Type field (see also NPA, LLC).\n   MPE: Multiprotocol Encapsulation [ETSI-DAT,
    ATSC-DAT, ATSC-DATG].  A\n   scheme that encapsulates PDUs, forming a DSM-CC Table
    Section.  Each\n   Section is sent in a series of TS Packets using a single TS
    Logical\n   Channel.\n   MPEG-2: A set of standards specified by the Motion Picture
    Experts\n   Group (MPEG) and standardized by the International Standards\n   Organisation
    (ISO/IEC 13818-1) [ISO-MPEG2], and ITU-T (in H.222\n   [ITU-H222]).\n   Next-Header:
    A Type value indicating an Extension Header.\n   NPA: Network Point of Attachment.
    \ In this document, refers to a\n   6-byte destination address (resembling an
    IEEE MAC address) within\n   the MPEG-2 transmission network that is used to identify
    individual\n   Receivers or groups of Receivers.\n   Packing Threshold: A period
    of time an Encapsulator is willing to\n   defer transmission of a partially filled
    TS-Packet to accumulate more\n   SNDUs, rather than use Padding.  After the Packet
    Threshold period,\n   the Encapsulator uses Padding to send the partially filled
    TS-Packet.\n   Padding: A method that fills the remaining unused bytes in a TS\n
    \  Packet payload using the specific pattern of 0xFF.\n   Payload Unit, PU.  A
    sequence of bytes sent using a TS.  Examples of\n   Payload Units include: an
    MPEG-2 Table Section or a ULE SNDU.\n   PDU: Protocol Data Unit.  Examples of
    a PDU include Ethernet frames,\n   IPv4 or IPv6 datagrams, and other network packets.\n
    \  PES: Packetized Elementary Steam [ISO-MPEG2].  A format of MPEG-2 TS\n   packet
    payload usually used for video or audio information.\n   PID: Packet Identifier
    \ [ISO-MPEG2].  A 13-bit field carried in the\n   header of TS Packets.  This
    is used to identify the TS Logical\n   Channel to which a TS Packet belongs [ISO-MPEG2].
    \ The TS Packets\n   forming the parts of a Table Section, PES, or other Payload
    Unit must\n   all carry the same PID value.  The all-zeros PID 0x0000 as well
    as\n   other PID values are reserved for specific PSI/SI Tables [ISO-MPEG2].\n
    \  The all-ones PID value 0x1FFF indicates a Null TS Packet introduced\n   to
    maintain a constant bit rate of a TS Multiplex.  There is no\n   required relationship
    between the PID values used for TS Logical\n   Channels transmitted using different
    TS Multiplexes.\n   PP: Payload Pointer [ISO-MPEG2].  An optional one-byte pointer
    that\n   directly follows the 4-byte TS Packet header.  It contains the number\n
    \  of bytes that follow the Payload Pointer, up to the start of the\n   first
    Payload Unit (counted from the first byte of the TS Packet\n   payload field,
    and excluding the PP field itself).  The presence of\n   the Payload Pointer is
    indicated by the value of the PUSI bit in the\n   TS Packet header.  The Payload
    Pointer is present in DSM-CC, Table\n   Sections, and ULE.  It is not present
    in TS Logical Channels that use\n   the PES-format.\n   Private Section: A syntactic
    structure constructed in accordance with\n   Table 2-30 of [ISO-MPEG2].  The structure
    may be used to identify\n   private information (i.e., not defined by [ISO-MPEG2])
    relating to\n   one or more elementary streams, or a specific MPEG-2 program,
    or the\n   entire Transport Stream.  Other Standards bodies, e.g., ETSI, ATSC,\n
    \  have defined sets of table structures using the private_section\n   structure.
    \ A Private Section is transmitted as a sequence of TS\n   Packets using a TS
    Logical Channel.  A TS Logical Channel may carry\n   sections from more than one
    set of tables.\n   PSI: Program Specific Information [ISO-MPEG2].  Tables used
    to convey\n   information about the service carried in a TS Multiplex.  The\n
    \  information is carried in one of four specifically identified Table\n   Sections
    defined by MPEG-2 [ISO-MPEG2].  See also SI Table.\n   PU: Payload Unit.\n   PUSI:
    Payload_Unit_Start_Indicator [ISO-MPEG2].  A single-bit flag\n   carried in the
    TS Packet header.  A PUSI value of zero indicates that\n   the TS Packet does
    not carry the start of a new Payload Unit.  A PUSI\n   value of one indicates
    that the TS Packet does carry the start of a\n   new Payload Unit.  In ULE, a
    PUSI bit set to 1 also indicates the\n   presence of a one-byte Payload Pointer
    (PP).\n   Receiver: Equipment that processes the signal from a TS Multiplex and\n
    \  performs filtering and forwarding of encapsulated PDUs to the\n   network-layer
    service (or bridging module when operating at the link\n   layer).\n   SI Table:
    Service Information Table [ISO-MPEG2].  In this document,\n   this term describes
    a table that is defined by another standards body\n   to convey information about
    the services carried in a TS Multiplex.\n   A Table may consist of one or more
    Table Sections; however, all\n   sections of a particular SI Table must be carried
    over a single TS\n   Logical Channel [ISO-MPEG2].\n   SNDU: SubNetwork Data Unit.
    \ An encapsulated PDU sent as an MPEG-2\n   Payload Unit.\n   Table Section: A
    Payload Unit carrying all or part of an SI or PSI\n   Table [ISO-MPEG2].\n   TS:
    Transport Stream [ISO-MPEG2], a method of transmission at the\n   MPEG-2 level
    using TS Packets; it represents layer 2 of the ISO/OSI\n   reference model.  See
    also TS Logical Channel and TS Multiplex.\n   TS Header: The 4-byte header of
    a TS Packet [ISO-MPEG2].  Each 188B\n   TS Packet incorporates a 4B header with
    the following fields (those\n   referenced within this document are marked with
    *):\n        Field Length            Name/Purpose\n         (in bits)\n         8b
    \            Synchronisation pattern equal to 0x47\n        *1b             Transport
    Error Indicator\n        *1b             Payload Unit Start Indicator (PUSI)\n
    \        1b             Transport Priority\n        *13b            Packet IDentifier
    (PID)\n         2b             Transport Scrambling Control\n        *2b             Adaptation
    Field Control (AFC)\n        *4b             Continuity Counter (CC)\n   If the
    PUSI bit is set to a value of 1, there is one\n   additional field following the
    TS packet header:\n        *8b             Payload Pointer (PP)\n   TS Logical
    Channel: Transport Stream Logical Channel.  In this\n   document, this term identifies
    a channel at the MPEG-2 level\n   [ISO-MPEG2].  It exists at level 2 of the ISO/OSI
    reference model.\n   All packets sent over a TS Logical Channel carry the same
    PID value\n   (this value is unique within a specific TS Multiplex).  The term\n
    \  \"Stream\" is defined in MPEG-2 [ISO-MPEG2] to describe the content\n   carried
    by a specific TS Logical Channel (see ULE Stream).  Some PID\n   values are reserved
    (by MPEG-2) for specific signalling.  Other\n   standards (e.g., ATSC, DVB) also
    reserve specific PID values.\n   TS Multiplex: In this document, this term defines
    a set of MPEG-2 TS\n   Logical Channels sent over a single lower-layer connection.
    \ This may\n   be a common physical link (i.e., a transmission at a specified
    symbol\n   rate, FEC setting, and transmission frequency) or an encapsulation\n
    \  provided by another protocol layer (e.g., Ethernet, or RTP over IP).\n   The
    same TS Logical Channel may be repeated over more than one TS\n   Multiplex (possibly
    associated with a different PID value) [RFC4259];\n   for example, to redistribute
    the same multicast content to two\n   terrestrial TV transmission cells.\n   TS
    Packet: A fixed-length 188B unit of data sent over a TS Multiplex\n   [ISO-MPEG2].
    \ Each TS Packet carries a 4B header, plus optional\n   overhead including an
    Adaptation Field, encryption details, and time\n   stamp information to synchronise
    a set of related TS Logical\n   Channels.\n   ULE Stream: An MPEG-2 TS Logical
    Channel that carries only ULE\n   encapsulated PDUs.  ULE Streams may be identified
    by definition of a\n   stream_type in SI/PSI [ISO-MPEG2].\n"
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  Description of the Method\n   PDUs (IP packets, Ethernet frames or packets
    from other network\n   protocols) are encapsulated to form a Subnetwork Data Unit
    (SNDU).\n   The SNDU is transmitted over an MPEG-2 transmission network either
    by\n   being placed in the payload of a single TS Packet, or, if required,\n   by
    being fragmented into a series of TS Packets.  Where there is\n   sufficient space,
    the method permits a single TS Packet to carry more\n   than one SNDU (or part
    thereof), a practice sometimes known as\n   Packing.  All TS Packets comprising
    an SNDU MUST be assigned the same\n   PID, and therefore form a part of the same
    TS Logical Channel.\n   The ULE encapsulation is limited to TS private streams
    only.  The\n   header of each TS Packet carries a one-bit Payload Unit Start\n
    \  Indicator (PUSI) field.  A PUSI field with a value of 1 indicates the\n   start
    of at least one Payload Unit (SNDU) within the TS Packet\n   payload.  The semantics
    of the PUSI bit are defined for PES and PSI\n   packets [ISO-MPEG2]; for private
    data, its use is not defined in the\n   MPEG-2 Standard.  Although ULE uses private
    data, the operation\n   follows that of PSI packets.  Hence, the following PUSI
    values are\n   defined:\n        0: The TS Packet does NOT contain the start of
    an SNDU, but\n        contains the continuation, or end, of an SNDU;\n        1:
    The TS Packet contains the start of an SNDU, and a one byte\n        Payload Pointer
    follows the last byte of the TS Packet header.\n   If a Payload Unit (SNDU) finishes
    before the end of a TS Packet\n   payload, but it is not intended to start another
    Payload Unit, a\n   stuffing procedure (known as Padding) fills the remainder
    of the TS\n   Packet payload with bytes with a value 0xFF [ISO-MPEG2].\n   A Receiver
    processing MPEG-2 Table Sections that receives a value of\n   0xFF in the first
    byte of a Table Section (table_Id) interprets this\n   as Padding/Stuffing and
    silently discards the remainder of the TS\n   Packet payload.  The payload of
    the next TS Packet for the same TS\n   Logical Channel will begin with a Payload
    Pointer of value 0x00,\n   indicating that the next Payload Unit immediately follows
    the TS\n   Packet header.  The ULE protocol resembles this, but differs in the\n
    \  exact procedure (see the following sections).\n   The TS Packet Header also
    carries a two-bit Adaptation Field Control\n   (AFC) value.  This adaptation field
    may extend the TS Packet Header\n   to carry timing and synchronisation information
    and may also be used\n   to include stuffing bytes before a TS Packet payload.
    \ Adaptation\n   Field stuffing is NOT used in this encapsulation method, and
    TS\n   Packets from a ULE Encapsulator MUST be sent with an AFC value of\n   '01'.
    \ For TS Logical Channels supporting ULE, Receivers MUST discard\n   TS Packets
    that carry other AFC values.\n"
  title: 3.  Description of the Method
- contents:
  - "4.  SNDU Format\n   PDUs are encapsulated using ULE to form an SNDU.  (Each SNDU
    is an\n   MPEG-2 Payload Unit.) The encapsulation format to be used for PDUs is\n
    \  illustrated below:\n   < ----------------------------- SNDU -----------------------------
    >\n   +-+-------------------------------------------------------+--------+\n   |D|
    Length | Type | Dest Address* |           PDU         | CRC-32 |\n   +-+-------------------------------------------------------+--------+\n
    \      Figure 1: SNDU Encapsulation (* optional Destination Address)\n   All multi-byte
    values in ULE (including the Length/End Indicator\n   (4.2,4.3), Type (4.4), Destination
    Address (4.5), and Extension\n   Headers (5)) are transmitted in network byte
    order (most significant\n   byte first).  The most significant bit of each byte
    is placed in the\n   left-most position of the 8-bit field.  Appendix A provides\n
    \  informative examples of usage.\n"
  - contents:
    - "4.1.  Destination Address Absent (D) Field\n   The most significant bit of
      the Length field carries the value of the\n   Destination Address Absent Field,
      the D-bit.  A value of 0 indicates\n   the presence of the Destination Address
      Field (see section 4.5).  A\n   value of 1 indicates that a Destination Address
      Field is not present.\n   An End Indicator (4.3) MUST be sent with a D-bit value
      of 1.  Other\n   SNDUs MAY be sent with a D-bit value of 0 or 1.  The default
      method\n   SHOULD use a D-bit value of 0 (see section 4.5).\n"
    title: 4.1.  Destination Address Absent (D) Field
  - contents:
    - "4.2.  Length Field\n   A 15-bit value that indicates the length, in bytes,
      of the SNDU\n   counted from the byte following the Type field of the SNDU base\n
      \  header (figure 9) up to and including the CRC.  This Length includes\n   the
      size of any extension headers that may be present (section 5).\n   Note the
      special case described in section 4.3.\n"
    title: 4.2.  Length Field
  - contents:
    - "4.3.  End Indicator\n   When the first two bytes following an SNDU have the
      value 0xFFFF,\n   this denotes an End Indicator (i.e., all ones length combined
      with a\n   D-bit value of 1).  This indicates to the Receiver that there are
      no\n   further SNDUs present within the current TS Packet (see section 6),\n
      \  and that no Destination Address Field is present.  The value 0xFF has\n   specific
      semantics in MPEG-2 framing, where it is used to indicate\n   the presence of
      Padding.  This use resembles [ISO-DSMCC].\n"
    title: 4.3.  End Indicator
  - contents:
    - "4.4.  Type Field\n   The 16-bit Type field indicates the type of payload carried
      in an\n   SNDU, or the presence of a Next-Header.  The set of values that may\n
      \  be assigned to this field is divided into two parts, similar to the\n   allocations
      for Ethernet.\n   EtherTypes were originally specified by Xerox under the Ethernet
      v2\n   Specification  [DIX].  After specification of IEEE 802.3 [IEEE-802.3,\n
      \  ISO-8802-2], the set of EtherTypes less than 1536 (0x0600) assumed\n   the
      role of a length indicator.  Ethernet receivers use this feature\n   to discriminate
      LLC format frames.  Hence, any IEEE EtherType < 1536\n   indicates an LLC frame,
      and the actual value indicates the length of\n   the LLC frame.\n   There is
      a potential ambiguous case when a Receiver receives a PDU\n   with two Length
      fields:  The Receiver would need to validate the\n   actual length and the Length
      field and ensure that inconsistent\n   values are not propagated by the network.
      \ Specification of two\n   independent Length fields is therefore undesirable.
      \ In the ULE\n   header, this is avoided in the SNDU header by including only
      one\n   length value, but bridging of LLC frames re-introduces this\n   consideration
      (section 5.2).\n   The Ethernet LLC mode of identification is not required in
      ULE, since\n   the SNDU format always carries an explicit Length field, and\n
      \  therefore the procedure in ULE is modified, as below:\n   The first set of
      ULE Type field values comprise the set of values\n   less than 1536 in decimal.
      \ These Type field values are IANA assigned\n   (see section 4.4.1) and indicate
      the Next-Header.\n   The second set of ULE Type field values comprise the set
      of values\n   greater than or equal to 1536 in decimal.  In ULE, this value
      is\n   identical to the corresponding type codes specified by the IEEE/DIX\n
      \  type assignments for Ethernet and recorded in the IANA EtherType\n   registry.\n"
    - contents:
      - "4.4.1.  Type 1: Next-Header Type Fields\n   The first part of the Type space
        corresponds to the values 0 to 1535\n   decimal.  These values may be used
        to identify link-specific\n   protocols and/or to indicate the presence of
        Extension Headers that\n   carry additional optional protocol fields (e.g.,
        a bridging\n   encapsulation).  Use of these values is co-ordinated by an
        IANA\n   registry.  The following types are defined in this document:\n           0x0000:
        Test SNDU (see section 5.1)\n           0x0001: Bridged Frame (see section
        5.2)\n           0x0100: Extension-Padding (see section 5.3)\n   The remaining
        values within the first part of the Type space are\n   reserved for Next-Header
        values allocated by the IANA.\n"
      title: '4.4.1.  Type 1: Next-Header Type Fields'
    - contents:
      - "4.4.2.  Type 2: EtherType Compatible Type Fields\n   The second part of the
        Type space corresponds to the values between\n   0x600 (1536 decimal) and
        0xFFFF.  This set of type assignments\n   follows DIX/IEEE assignments (but
        excludes use of this field as a\n   frame length indicator).  All assignments
        in this space MUST use the\n   values defined for IANA EtherType.  The following
        two Type values are\n   used as examples (taken from the IANA EtherTypes registry):\n
        \          0x0800: IPv4 Payload (see section 4.7.2)\n           0x86DD: IPv6
        Payload (see section 4.7.3)\n"
      title: '4.4.2.  Type 2: EtherType Compatible Type Fields'
    title: 4.4.  Type Field
  - contents:
    - "4.5.  SNDU Destination Address Field\n   The SNDU Destination Address Field
      is optional (see section 4.1).\n   This field MUST be carried (i.e., D=0) for
      IP unicast packets\n   destined to routers that are sent using shared links
      (i.e., where the\n   same link connects multiple Receivers).  A sender MAY omit
      this field\n   (D=1) for an IP unicast packet and/or multicast packets delivered
      to\n   Receivers that are able to utilise a discriminator field (e.g., the\n
      \  IPv4/IPv6 destination address, or a bridged MAC destination address),\n   which,
      in combination with the PID value, could be interpreted as a\n   Link-Level
      address.\n   When the SNDU header indicates the presence of an SNDU Destination\n
      \  Address field (i.e., D=0), a Network Point of Attachment (NPA) field\n   directly
      follows the fourth byte of the SNDU header.  NPA destination\n   addresses are
      6 Byte numbers, normally expressed in hexadecimal, used\n   to identify the
      Receiver(s) in a MPEG-2 transmission network that\n   should process a received
      SNDU.  The value 0x00:00:00:00:00:00 MUST\n   NOT be used as a destination address
      in an SNDU.  The least\n   significant bit of the first byte of the address
      is set to 1 for\n   multicast frames, and the remaining bytes specify the link-layer\n
      \  multicast address.  The specific value 0xFF:FF:FF:FF:FF:FF is the\n   link
      broadcast address, indicating that this SNDU is to be delivered\n   to all Receivers.\n
      \  IPv4 packets carrying an IPv4 subnetwork broadcast address need to be\n   delivered
      to all systems with the same network prefix.  When a SNDU\n   Destination Address
      is present (D=0), the value MUST be set to the\n   NPA link broadcast address
      (0xFF:FF:FF:FF:FF:FF).\n   When the PDU is an IP multicast packet and an SNDU
      Destination\n   Address is present (D=0), the IP group destination address of
      the\n   multicast packet MUST be mapped to the multicast SNDU Destination\n
      \  Address (following the method used to generate a destination MAC\n   address
      in Ethernet).  The method for mapping IPv4 multicast\n   addresses is specified
      in [RFC1112].  The method for mapping IPv6\n   multicast addresses is specified
      in [RFC2464].\n"
    title: 4.5.  SNDU Destination Address Field
  - contents:
    - "4.6.  SNDU Trailer CRC\n   Each SNDU MUST carry a 32-bit CRC field in the last
      four bytes of the\n   SNDU.  This position eases CRC computation by hardware.
      \ The CRC-32\n   polynomial is to be used.  Examples where this polynomial is
      also\n   employed include Ethernet, DSM-CC section syntax [ISO-DSMCC], and\n
      \  AAL5 [ITU-3563].  This is a 32-bit value calculated according to the\n   generator
      polynomial represented 0x104C11DB7 in hexadecimal:\n   x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x^1+x^0.\n
      \  The Encapsulator initialises the CRC-32 accumulator register to the\n   value
      0xFFFF FFFF.  It then accumulates a transmit value for the\n   CRC32 that includes
      all bytes from the start of the SNDU header to\n   the end of the SNDU (excluding
      the 32-bit trailer holding the\n   CRC-32), and places this in the CRC Field.
      \ In ULE, the bytes are\n   processed in order of increasing position within
      the SNDU; the order\n   of processing bits is NOT reversed.  This use resembles,
      but is\n   different from that in SCTP [RFC3309].\n   The Receiver performs
      an integrity check by independently calculating\n   the same CRC value and comparing
      this with the transmitted value in\n   the SNDU trailer.  SNDUs that do not
      have a valid CRC are discarded,\n   causing the Receiver to enter the Idle State.\n
      \  This description may be suited for hardware implementation, but this\n   document
      does not imply any specific implementation.  Software-based\n   table-lookup
      or hardware-assisted software-based implementations are\n   also possible.  Appendix
      B provides an example of an Encapsulated PDU\n   that includes the computed
      CRC-32 value.\n   The primary purpose of this CRC is to protect the SNDU (header
      and\n   payload) from undetected reassembly errors and errors introduced by\n
      \  unexpected software/hardware operation while the SNDU is in transit\n   across
      the MPEG-2 subnetwork and during processing at the\n   Encapsulator and/or the
      Receiver.  It may also detect the presence of\n   uncorrected errors from the
      physical link (however, these may also be\n   detected by other means, e.g.,
      section 7.3).\n"
    title: 4.6.  SNDU Trailer CRC
  - contents:
    - "4.7.  Description of SNDU Formats\n   The format of an SNDU is determined by
      the combination of the\n   Destination Address Absent bit (D) and the SNDU Type
      field.  The\n   simplest encapsulation places a PDU directly into an SNDU payload.\n
      \  Some Type 1 encapsulations may require additional header fields.\n   These
      are inserted in the SNDU following the NPA destination address\n   and directly
      preceding the PDU.\n   The following SNDU Formats are defined here:\n   End
      Indicator: The Receiver should enter the Idle State (4.7.1).\n   IPv4 SNDU:
      The payload is a complete IPv4 datagram (4.7.2).\n   IPv6 SNDU: The payload
      is a complete IPv6 datagram (4.7.3).\n   Test SNDU: The payload will be discarded
      by the Receiver (5.1).\n   Bridged SNDU: The payload carries a bridged MAC frame
      (5.2).\n   Other formats may be defined through relevant assignments in the
      IEEE\n   and IANA registries.\n"
    - contents:
      - "4.7.1.  End Indicator\n   The format of the End Indicator is shown in figure
        2.  This format\n   MUST carry a D-bit value of 1.\n       0                   1
        \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |1|            0x7FFF           |                               |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\n
        \     |                                                               |\n
        \     =   A sequence of zero or more bytes with a value 0xFF filling  =\n
        \     |           the remainder of the TS Packet Payload              |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Figure 2: Format for a ULE End Indicator\n"
      title: 4.7.1.  End Indicator
    - contents:
      - "4.7.2.  IPv4 SNDU Encapsulation\n   IPv4 datagrams are directly transported
        using one of the two standard\n   SNDU structures, in which the PDU is placed
        directly in the SNDU\n   payload.  The two encapsulations are shown in Figures
        3 and 4.  (Note\n   that in this, and the following figures, the IP datagram
        payload is\n   of variable size and is directly followed by the CRC-32).\n
        \      0                   1                   2                   3\n       0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |0|        Length  (15b)        |         Type = 0x0800         |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |            Receiver Destination NPA Address  (6B)             |\n
        \     +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                               |                               |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\n
        \     |                                                               |\n
        \     =                           IPv4 datagram                       =\n
        \     |                                                               |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                             (CRC-32)                          |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Figure 3: SNDU Format for an IPv4 Datagram using L2 filtering (D=0)\n       0
        \                  1                   2                   3\n       0 1 2
        3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |1|        Length  (15b)        |         Type = 0x0800         |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                                                               |\n
        \     =                           IPv4 datagram                       =\n
        \     |                                                               |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                             (CRC-32)                          |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Figure 4: SNDU Format for an IPv4 Datagram using L3 filtering (D=1)\n"
      title: 4.7.2.  IPv4 SNDU Encapsulation
    - contents:
      - "4.7.3.  IPv6 SNDU Encapsulation\n   IPv6 datagrams are directly transported
        using one of the two standard\n   SNDU structures, in which the PDU is placed
        directly in the SNDU\n   payload.  The two encapsulations are shown in Figures
        5 and 6.\n       0                   1                   2                   3\n
        \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |0|        Length  (15b)        |         Type = 0x86DD         |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |            Receiver Destination NPA Address  (6B)             |\n
        \     +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                               |                               |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\n
        \     |                                                               |\n
        \     =                           IPv6 datagram                       =\n
        \     |                                                               |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                             (CRC-32)                          |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Figure 5: SNDU Format for an IPv6 Datagram using L2 filtering (D=0)\n       0
        \                  1                   2                   3\n       0 1 2
        3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |1|        Length  (15b)        |         Type = 0x86DD         |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                                                               |\n
        \     =                           IPv6 datagram                       =\n
        \     |                                                               |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                             (CRC-32)                          |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Figure 6: SNDU Format for an IPv6 Datagram using L3 filtering (D=1)\n"
      title: 4.7.3.  IPv6 SNDU Encapsulation
    title: 4.7.  Description of SNDU Formats
  title: 4.  SNDU Format
- contents:
  - "5.  Extension Headers\n   This section describes an extension format for the
    ULE encapsulation.\n   In ULE, a Type field value less than 1536 decimal indicates
    an\n   Extension Header.  These values are assigned from a separate IANA\n   registry
    defined for ULE.\n   The use of a single Type/Next-Header field simplifies processing
    and\n   eliminates the need to maintain multiple IANA registries.  The cost\n
    \  is that each Extension Header requires at least 2 bytes.  This is\n   justified,
    on the basis of simplified processing and maintaining a\n   simple lightweight
    header for the common case when no extensions are\n   present.\n   A ULE Extension
    Header is identified by a 16-bit value in the Type\n   field.  This field is organised
    as a 5-bit zero prefix, a 3-bit H-LEN\n   field, and an 8-bit H-Type field, as
    follows:\n           0                   1\n           0 1 2 3 4 5 6 7 8 9 0 1
    2 3 4 5\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n          |0 0 0 0 0|H-LEN|
    \   H-Type     |\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Figure 7: Structure
    of ULE Next-Header Field\n   The H-LEN Assignment is described below:\n   0    Indicates
    a Mandatory Extension Header\n   1    Indicates an Optional Extension Header of
    length 2B (Type only)\n   2    Indicates an Optional Extension Header of length
    4B (Type + 2B)\n   3    Indicates an Optional Extension Header of length 6B (Type
    + 4B)\n   4    Indicates an Optional Extension Header of length 8B (Type + 6B)\n
    \  5    Indicates an Optional Extension Header of length 10B (Type + 8B)\n   >=6
    \ The combined H-LEN and H-TYPE values indicate the EtherType\n        of a PDU
    that directly follows this Type field.\n   The H-LEN value indicates the total
    number of bytes in an Optional\n   Extension Header (including the 2B Type field).\n
    \  An H-LEN value of zero indicates a Mandatory Extension Header.  Each\n   Mandatory
    Extension Header has a pre-defined length that is not\n   communicated in the
    H-LEN field.  No additional limit is placed on\n   the maximum length of a Mandatory
    Extension Header.  A Mandatory\n   Extension Header MAY modify the format or encoding
    of the enclosed\n   PDU (e.g., to perform encryption and/or compression).\n   The
    H-Type is a one-byte field that is either one of 256 Mandatory\n   Header Extensions
    or one of 256 Optional Header Extensions.  The set\n   of currently permitted
    values for both types of Extension Headers are\n   defined by an IANA Registry
    (section 15).  Registry values for\n   Optional Extensions are specified in the
    form H=1 (i.e., a decimal\n   number in the range 256-511), but may be used with
    an H-Length value\n   in the range 1-5 (see example in section 5.3).\n   Two examples
    of Extension Headers are the Test SNDU and the use of\n   Extension-Padding.  The
    Test SNDU Mandatory Extension Header results\n   in the entire PDU's being discarded.
    \ The Extension-Padding Optional\n   Extension Header results in the following
    (if any) option header\n   being ignored (i.e., a total of H-LEN 16-bit words).\n
    \  The general format for an SNDU with Extension Headers is:\n   < --------------------------
    \  SNDU   ------------------------- >\n   +---+--------------------------------------------------+--------+\n
    \  |D=0| Length | T1 | NPA Address | H1 | T2 |    PDU     | CRC-32 |\n   +---+--------------------------------------------------+--------+\n
    \  < ULE base header >             <  ext 1  >\n   Figure 8: SNDU Encapsulation
    with one Extension Header (for D=0)\n   Where:\n   D  is the ULE D_bit (in this
    example D=0; however, NPA addresses may\n      also be omitted when using Extension
    Headers).\n   T1 is the base header Type field.  In this case, specifying a\n
    \     Next-Header value.\n   H1 is a set of fields defined for header type T1.
    \ There may be 0\n      or more bytes of information for a specific ULE Extension
    Header.\n   T2 is the Type field of the next header, or an EtherType > 1535 B\n
    \     indicating the type of the PDU being carried.\n   < --------------------------
    \  SNDU   ------------------------- >\n   +---+---------------------------------------------------+--------+\n
    \  |D=1| Length | T1 | H1 | T2 | H2 | T3 |       PDU       | CRC-32 |\n   +---+---------------------------------------------------+--------+\n
    \  < ULE base header >< ext 1  >< ext 2  >\n   Figure 9: SNDU Encapsulation with
    two Extension Headers (D=1)\n   Using this method, several Extension Headers MAY
    be chained in\n   series.  Figure 12 shows an SNDU including two Extension Headers.
    \ In\n   the example, the values of T1 and T2 are both less than 1536 decimal.\n
    \  Each indicates the presence of an Extension Header, rather than a\n   directly
    following PDU.  T3 has a value > 1535 indicating the\n   EtherType of the PDU
    being carried.  Although an SNDU may contain an\n   arbitrary number of consecutive
    Extension Headers, it is not expected\n   that SNDUs will generally carry a large
    number of extensions.\n"
  - contents:
    - "5.1.  Test SNDU\n   A Test SNDU (Figure 10) is a Mandatory Extension Header
      of Type 1.\n   This header must be the final (or only) extension header specified
      in\n   the header chain of an SNDU.  The structure of the Data portion of\n
      \  this SNDU is not defined by this document.  Receivers MAY record\n   reception
      in a log file, but MUST then discard any Test SNDUs.  The\n   D-bit MAY be set
      in a TEST SNDU.\n       0                   1                   2                   3\n
      \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |D|        Length  (15b)        |         Type = 0x0000         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                                                               |\n      =
      \              Data (not forwarded by a Receiver)              =\n      |                                                               |\n
      \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |
      \                            (CRC-32)                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Figure 10: SNDU Format for a Test SNDU\n"
    title: 5.1.  Test SNDU
  - contents:
    - "5.2.  Bridged Frame SNDU Encapsulation\n   A bridged SNDU is a Mandatory Extension
      Header of Type 1.  It MUST be\n   the final (or only) extension header specified
      in the header chain of\n   an SNDU.  The payload includes MAC address and EtherType
      [DIX] or LLC\n   Length [ISO-8802-2] fields together with the contents of a
      bridged\n   MAC frame.  The SNDU has the format shown in Figures 11 and 12.\n
      \  When an NPA address is specified (D=0), Receivers MUST discard all\n   SNDUs
      that carry an NPA destination address that does NOT match their\n   own NPA
      address (or a broadcast/multicast address); the payload of\n   the remaining
      SNDUs are processed by the bridging rules that follow.\n   An SNDU without an
      NPA address (D=1) results in a Receiver performing\n   bridging processing on
      the payload of all received SNDUs.\n   An Encapsulator MAY also use this encapsulation
      format to directly\n   communicate network protocol packets that require the
      LLC\n   encapsulation [IEEE-802.2, ISO-8802-2].  To do this, it constructs an\n
      \  SNDU with a Bridge Extension Header containing the intended\n   destination
      MAC address, the MAC source address of the Encapsulator,\n   and the LLC-Length.
      \ The PDU comprises an LLC header followed by the\n   required payload.  The
      Encapsulator MAY choose to suppress the NPA\n   address (see 4.5).\n       0
      \                  1                   2                   3\n       0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |0|        Length  (15b)        |         Type = 0x0001         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |            Receiver Destination NPA Address  (6B)             |\n      +
      \                              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |                               |
      \                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\n
      \     |                MAC Destination Address  (6B)                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                    MAC Source Address  (6B)                   |\n      +
      \                              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |                               |
      \  EtherType/LLC-Length (2B)   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                                                               |\n      =
      \                (Contents of bridged MAC frame)               =\n      |                                                               |\n
      \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |
      \                            (CRC-32)                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Figure 11: SNDU Format for a Bridged Payload (D=0)\n       0                   1
      \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |1|        Length  (15b)        |         Type = 0x0001         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                   MAC Destination Address  (6B)               |\n      +
      \                              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |                               |
      \                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\n
      \     |                     MAC Source Address  (6B)                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |   EtherType/LLC-Length (2B)   |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              +\n      |                                                               |\n
      \     =                 (Contents of bridged MAC frame)               =\n      |
      \                                                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                             (CRC-32)                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Figure 12: SNDU Format for a Bridged Payload (D=1)\n   The EtherType/LLC-Length
      field of a frame is defined according to\n   IEEE 802.3 [IEEE-802.2] (see section
      5).\n   In this special case, the Mandatory Extension Header format may be\n
      \  interpreted as either an EtherType [DIX] or an LLC Length field,\n   specified
      by IEEE 802 [IEEE-802.3] rather than as a value assigned in\n   the ULE Next-Header
      Registry maintained by the IANA.\n   The MAC addresses in the frame being bridged
      SHOULD be assigned\n   according to the rules specified by the IEEE and denote
      unknown,\n   unicast, broadcast, and multicast link addresses.  These MAC\n
      \  addresses denote the intended recipient in the destination LAN, and\n   therefore
      have a different function from the NPA addresses carried in\n   the SNDU header.\n
      \  A frame Type < 1536 for a bridged frame introduces a LLC Length\n   field.
      \ The Receiver MUST check this length and discard any frame\n   with a length
      greater than permitted by the SNDU payload size.\n   In normal operation, it
      is expected that any padding appended to the\n   Ethernet frame SHOULD be removed
      prior to forwarding.  This requires\n   the sender to be aware of such Ethernet
      padding (e.g., [DIX,\n   IEEE-802.3]).\n   Ethernet frames received at the Encapsulator
      for onward transmission\n   over ULE carry a Local Area Network Frame Check
      sequence (LAN FCS)\n   field (e.g., CRC-32 for Ethernet [DIX, IEEE-802.3]).
      \ The\n   Encapsulator MUST check the LAN-FCS value of all frames received,\n
      \  prior to further processing.  Frames received with an invalid LAN FCS\n   MUST
      be discarded.  After checking, the LAN FCS is then removed\n   (i.e., it is
      NOT forwarded in the bridged SNDU).  As in other ULE\n   frames, the Encapsulator
      appends a CRC-32 to the transmitted SNDU.\n   At the Receiver, an appropriate
      LAN-FCS field will be appended to the\n   bridged frame prior to onward transmission
      on the Ethernet interface.\n   This design is readily implemented using existing
      network interface\n   cards and does not introduce an efficiency cost by\n   calculating/verifying
      two integrity check fields for bridged frames.\n   However, it also introduces
      the possibility that a frame corrupted\n   within the processing performed at
      an Encapsulator and/or Receiver\n   may not be detected by the final recipient(s)
      (i.e., such corruption\n   would not normally result in an invalid LAN FCS).\n"
    title: 5.2.  Bridged Frame SNDU Encapsulation
  - contents:
    - "5.3.  Extension-Padding Optional Extension Header\n   The Extension-Padding
      Optional Extension Header is specified by an\n   IANA-assigned H-Type value
      of 0x100.  As in other Optional\n   Extensions, the total length of the extension
      is indicated by the\n   H-LEN field (specified in 16-bit words).  The extension
      field is\n   formed of a group of one to five 16-bit fields.\n   For this specific
      option, only the last 16-bit word has an assigned\n   value; the sender SHOULD
      set the remaining values to 0x0000.  The\n   last 16-bit field forms the Next-Header
      Type field.  A Receiver MUST\n   interpret the Type field, but MUST ignore any
      other fields of this\n   Extension Header.\n"
    title: 5.3.  Extension-Padding Optional Extension Header
  title: 5.  Extension Headers
- contents:
  - "6.  Processing at the Encapsulator\n   The Encapsulator forms the PDUs queued
    for transmission into SNDUs by\n   adding a header and trailer to each PDU (section
    4).  It then\n   segments the SNDU into a series of TS Packet payloads (Figure
    13).\n   These are transmitted using a single TS Logical Channel over a TS\n   Multiplex.
    \ The TS Multiplex may be processed by a number of MPEG-2\n   (re)multiplexors
    before it is finally delivered to a Receiver\n   [RFC4259].\n                +------+--------------------------------+------+\n
    \               | ULE  |        Protocol Data Unit      | ULE  |\n                |Header|
    \                               |CRC-32|\n                +------+--------------------------------+------+\n
    \              /         /                             \\       \\\n              /
    \        /                               \\       \\\n             /         /
    \                                \\       \\\n   +--------+---------+   +--------+---------+
    \  +--------+---------+\n   |MPEG-2TS| MPEG-2  |...|MPEG-2TS| MPEG-2  |...|MPEG-2TS|
    MPEG-2  |\n   | Header | Payload |   | Header | Payload |   | Header | Payload
    |\n   +--------+---------+   +--------+---------+   +--------+---------+\n   Figure
    13: Encapsulation of an SNDU into a series of TS Packets\n"
  - contents:
    - "6.1.  SNDU Encapsulation\n   When an Encapsulator has not previously sent a
      TS Packet for a\n   specific TS Logical Channel, or after an Idle period, it
      starts to\n   send an SNDU in the first available TS Packet.  This first TS
      Packet\n   generated MUST carry a PUSI value of 1.  It MUST also carry a Payload\n
      \  Pointer value of zero, indicating that the SNDU starts immediately\n   after
      the Payload Pointer in the TS Packet payload.\n   The Encapsulation MUST ensure
      that all TS Packets set the MPEG-2\n   Continuity Counter carried in the TS
      Packet header, according to\n   [ISO-MPEG2].  This value MUST be incremented
      by one (modulo 16) for\n   each successive TS Packet containing a fragment/complete
      SNDU sent\n   using the same TS Logical Channel.\n   An Encapsulator MAY decide
      not to send another SNDU immediately, even\n   if space is available in a partially
      filled TS Packet.  This\n   procedure is known as Padding (Figure 14).  The
      End Indicator informs\n   the Receiver that there are no more SNDUs in this
      TS Packet payload.\n   The End Indicator is followed by zero or more unused
      bytes until the\n   end of the TS Packet payload.  All unused bytes MUST be
      set to the\n   value of 0xFF, following current practice in MPEG-2 [ISO-DSMCC].
      \ The\n   Padding procedure trades decreased efficiency against improved\n   latency.\n
      \                +-/------------+\n                 |  SubNetwork  |\n                 |
      \    DU 1     |\n                 +-/------------+\n                        \\
      \       \\\n                         \\        \\\n                          \\
      \       \\\n                 +--------+--------+--------+----------+\n                 |MPEG-2TS|
      End of | 0xFFFF |  Unused  |\n                 | Header | SNDU 1 |        |
      \ Bytes   |\n                 +--------+--------+--------+----------+\n                   PUSI=0
      \           ULE\n                                     End\n                                     Indicator\n
      \  Figure 14: A TS Packet carrying the end of SNDU 1, followed by an\n              End
      Indicator\n   Alternatively, when more packets are waiting at an Encapsulator,
      and\n   a TS Packet has sufficient space remaining in the payload, the\n   Encapsulator
      can follow a previously encapsulated SNDU with another\n   SNDU using the next
      available byte of the TS Packet payload (see\n   6.2).  This is called Packing
      (Figure 15).\n              +-/----------------+       +----------------/-+\n
      \             |   Subnetwork     |       |   Subnetwork     |\n              |
      \     DU 2        |       |      DU 3        |\n              +-/----------------+
      \      +----------------/-+\n                         \\        \\     /          /\\\n
      \                         \\        \\   /          /  \\\n                           \\
      \       \\ /          /    \\. . .\n          +--------+--------+--------+----------+\n
      \         |MPEG-2TS| Payload| end of | start of |\n          | Header | Pointer|
      SNDU 2 | SNDU 3   |\n          +--------+--------+--------+----------+\n            PUSI=1
      \    |              ^\n                       |              |\n                       +--------------+\n
      \  Figure 15: A TS Packet with the end of SNDU 2, followed by SNDU 3\n"
    title: 6.1.  SNDU Encapsulation
  - contents:
    - "6.2.  Procedure for Padding and Packing\n   Five possible actions may occur
      when an Encapsulator has completed\n   encapsulation of an SNDU:\n   (i) If
      the TS Packet has no remaining space, the Encapsulator\n   transmits this TS
      Packet.  It starts transmission of the next SNDU in\n   a new TS Packet.  (The
      standard rules [ISO-MPEG2] require that the\n   header of this new TS Packet
      carry a PUSI value of 1 followed by a\n   Payload Pointer value of 0x00.)\n
      \  (ii) If the TS Packet carrying the final part of an SNDU has one byte\n   of
      unused payload, the Encapsulator MUST place the value 0xFF in this\n   final
      byte and transmit the TS Packet.  This rule provides a simple\n   mechanism
      to resolve the complex behaviour that may arise when the TS\n   Packet has no
      PUSI set.  To send another SNDU in the current TS\n   Packet would otherwise
      require the addition of a Payload Pointer that\n   would consume the last remaining
      byte of TS Packet payload.  The\n   behaviour follows similar practice for other
      MPEG-2 payload types\n   [ISO-DSMCC].  The Encapsulator MUST start transmission
      of the next\n   SNDU in a new TS Packet.  (The standard rules require the header
      of\n   this new TS Packet to carry a PUSI value of 1 followed by a Payload\n
      \  Pointer value of 0x00.)\n   (iii) If the TS Packet carrying the final part
      of an SNDU has exactly\n   two bytes of unused payload, and the PUSI was NOT
      already set, the\n   Encapsulator MUST place the value 0xFFFF in these final
      two bytes,\n   providing an End Indicator (section 4.3), and transmit the TS
      Packet.\n   This rule prevents fragmentation of the SNDU Length field over two
      TS\n   Packets.  The Encapsulator MUST start transmission of the next SNDU\n
      \  in a new TS Packet.  (The standard rules require the header of this\n   new
      TS Packet to carry a PUSI value of 1 followed by a Payload\n   Pointer value
      of 0x00.)\n   (iv) If the TS Packet has more than two bytes of unused payload,
      the\n   Encapsulator MAY transmit this partially full TS Packet but MUST\n   first
      place the value 0xFF in all remaining unused bytes (i.e.,\n   setting an End
      Indicator followed by Padding).  The Encapsulator MUST\n   then start transmission
      of the next SNDU in a new TS Packet.  (The\n   standard rules [ISO-MPEG2] require
      that the header of this new TS\n   Packet carry a PUSI value of 1 and a Payload
      Pointer value of 0x00.)\n   (v) If at least two bytes are available for SNDU
      data in the TS\n   Packet payload (i.e., three bytes if the PUSI was NOT previously
      set,\n   and two bytes if it was previously set), the Encapsulator MAY\n   encapsulate
      further queued PDUs, by starting the next SNDU in the\n   next available byte
      of the current TS Packet payload.  When the\n   Encapsulator packs further SNDUs
      into a TS Packet where the PUSI has\n   NOT already been set, the PUSI MUST
      be updated (set to 1), and an\n   8-bit Payload Pointer MUST be inserted in
      the first byte directly\n   following the TS Packet header.  (This reduces the
      size of the TS\n   Packet payload field that is available for data by one byte.)
      \ The\n   value of the Payload Pointer MUST be set to the position of the byte\n
      \  following the end of the first SNDU in the TS Packet payload.  If no\n   further
      PDUs are available, an Encapsulator MAY wait for additional\n   PDUs to fill
      the incomplete TS Packet.  The maximum period of time an\n   Encapsulator can
      wait, known as the Packing Threshold, MUST be\n   bounded and SHOULD be configurable
      in the Encapsulator.  If\n   sufficient additional PDUs are NOT received to
      complete the TS Packet\n   within the Packing Threshold, the Encapsulator MUST
      insert an End\n   Indicator (using rule iv).\n   Use of the Packing method (v)
      by an Encapsulator is optional and may\n   be determined on a per-session, per-packet,
      or per-SNDU basis.\n   When an SNDU is less than the size of a TS Packet payload,
      a TS\n   Packet may be formed that carries a PUSI value of one and also an End\n
      \  Indicator (using rule iv).\n"
    title: 6.2.  Procedure for Padding and Packing
  title: 6.  Processing at the Encapsulator
- contents:
  - "7.  Receiver Processing\n   A Receiver tunes to a specific TS Multiplex carrying
    a ULE Stream and\n   sets a receive filter to accept all TS Packets with a specific
    PID.\n   These TS Packets are associated with a specific TS Logical Channel\n
    \  and are reassembled to form a stream of SNDUs.  A single Receiver may\n   be
    able to receive multiple TS Logical Channels, possibly using a\n   range of TS
    Multiplexes.  In each case, reassembly MUST be performed\n   independently for
    each TS Logical Channel.  To perform this\n   reassembly, the Receiver may use
    a buffer to hold the partially\n   assembled SNDU, referred to here as the Current
    SNDU buffer.  Other\n   implementations may choose to use other data structures,
    but MUST\n   provide equivalent operations.\n   Receipt of a TS Packet with a
    PUSI value of 1 indicates that the TS\n   Packet contains the start of a new SNDU.
    \ It also indicates the\n   presence of the Payload Pointer (indicating the number
    of bytes to\n   the start of the first SNDU in the TS-Packet currently being\n
    \  reassembled).  It is illegal to receive a Payload Pointer value\n   greater
    than 181, and this MUST cause the SNDU reassembly to be\n   aborted and the Receiver
    to enter the Idle State.  This event SHOULD\n   be recorded as a payload pointer
    error.\n   A Receiver MUST support the use of both the Packing and Padding\n   method
    for any received SNDU and MUST support reception of SNDUs with\n   or without
    a Destination Address Field (i.e., D=0 and D=1).\n"
  - contents:
    - "7.1.  Idle State\n   After initialisation or errors, or on receipt of an End
      Indicator,\n   the Receiver enters the Idle State.  In this state, the Receiver\n
      \  discards all TS Packets until it discovers the start of a new SNDU,\n   upon
      which it then enters the Reassembly State.  Figure 16 outlines\n   these state
      transitions:\n                                +-------+\n                                |
      START |\n                                +---+---+\n                                    |\n
      \                                  \\/\n                               +----------+\n
      \                             \\|   Idle   |/\n                      +-------/|
      \  State  |\\-------+\n         Insufficient |        +----+-----+        |\n
      \        unused space |             | PUSI set     | MPEG-2 TS Error\n         or
      \          |            \\/              | or\n         End Indicator|        +----------+
      \       | SNDU Error\n                      |        |Reassembly|        |\n
      \                     +--------|  State   |--------+\n                               +----------+\n
      \  Figure 16: Receiver state transitions\n"
    - contents:
      - "7.1.1.  Idle State Payload Pointer Checking\n   A Receiver in the Idle State
        MUST check the PUSI value in the header\n   of all received TS Packets.  A
        PUSI value of 1 indicates the presence\n   of a Payload Pointer.  Following
        a loss of synchronisation, values\n   between 0 and 181 are permitted, in
        which case the Receiver MUST\n   discard the number of bytes indicated by
        the Payload Pointer (counted\n   from the first byte of the TS Packet payload
        field, and excluding the\n   PP field itself), before leaving the Idle State.
        \ It then enters the\n   Reassembly State, and starts reassembly of a new
        SNDU at this point.\n"
      title: 7.1.1.  Idle State Payload Pointer Checking
    title: 7.1.  Idle State
  - contents:
    - "7.2. Processing of a Received SNDU\n   When in the Reassembly State, the Receiver
      reads a 2-byte SNDU Length\n   field from the TS Packet payload.  If the value
      is less than or equal\n   to 4, or equal to 0xFFFF, the Receiver discards the
      Current SNDU and\n   the remaining TS Packet payload and returns to the Idle
      State.\n   Receipt of an invalid Length field is an error event and SHOULD be\n
      \  recorded as an SNDU length error.\n   If the Length of the Current SNDU is
      greater than 4, the Receiver\n   accepts bytes from the TS Packet payload to
      the Current SNDU buffer\n   until either Length bytes in total are received,
      or the end of the TS\n   Packet is reached (see also 7.2.1).  When the Current
      SNDU length\n   equals the value of the Length field, the Receiver MUST calculate
      and\n   verify the CRC value (see 4.6).  SNDUs that contain an invalid CRC\n
      \  value MUST be discarded.  Mismatch of the CRC is an error event and\n   SHOULD
      be recorded as a CRC error.  The underlying physical-layer\n   processing (e.g.,
      forward error correction coding) often results in\n   patterns of errors, rather
      than single bit errors, so the Receiver\n   needs to be robust to arbitrary
      patterns of corruption to the TS\n   Packet and payload, including potential
      corruption of the PUSI, PP,\n   and SNDU Length fields.  Therefore, a Receiver
      SHOULD discard the\n   remaining TS Packet payload (if any) following a CRC
      mismatch and\n   return to the Idle State.\n   When the Destination Address
      is present (D=0), the Receiver accepts\n   SNDUs that match one of a set of
      addresses specified by the Receiver\n   (this includes the NPA address of the
      Receiver, the NPA broadcast\n   address, and any required multicast NPA addresses).
      \ The Receiver\n   MUST silently discard an SNDU with an unmatched address.\n
      \  After receiving a valid SNDU, the Receiver MUST check the Type field\n   (and
      process any Type 1 Extension Headers).  The SNDU payload is then\n   passed
      to the next protocol layer specified.  An SNDU with an unknown\n   Type value
      < 1536 MUST be discarded.  This error event SHOULD be\n   recorded as an SNDU
      type error.\n   The Receiver then starts reassembly of the next SNDU.  This
      MAY\n   directly follow the previously reassembled SNDU within the TS Packet\n
      \  payload.\n   (i) If the Current SNDU finishes at the end of a TS Packet payload,\n
      \  the Receiver MUST enter the Idle State.\n   (ii) If only one byte remains
      unprocessed in the TS Packet payload\n   after completion of the Current SNDU,
      the Receiver MUST discard this\n   final byte of TS Packet payload.  It then
      enters the Idle State.  It\n   MUST NOT record an error when the value of the
      remaining byte is\n   identical to 0xFF.\n   (iii) If two or more bytes of TS
      Packet payload data remain after\n   completion of the Current SNDU, the Receiver
      accepts the next 2 bytes\n   and examines whether this is an End Indicator.
      \ When an End Indicator\n   is received, a Receiver MUST silently discard the
      remainder of the TS\n   Packet payload and transition to the Idle State.  Otherwise,
      this is\n   the start of the next Packed SNDU, and the Receiver continues by\n
      \  processing this SNDU.  (This is provided that the TS Packet has a\n   PUSI
      value of 1, see 7.2.1; otherwise, the Receiver has detected a\n   delimiting
      error and MUST discard all remaining bytes in the TS\n   Packet payload and
      transitions to the Idle State.)\n"
    - contents:
      - "7.2.1.  Reassembly Payload Pointer Checking\n   A Receiver that has partially
        received an SNDU (in the Current SNDU\n   buffer) MUST check the PUSI value
        in the header of all subsequent TS\n   Packets with the same PID (i.e., same
        TS Logical Channel).  If it\n   receives a TS Packet with a PUSI value of
        1, it MUST then verify the\n   Payload Pointer.  If the Payload Pointer does
        NOT equal the number of\n   bytes remaining to complete the Current SNDU (i.e.,
        the difference\n   between the SNDU Length field and the number of reassembled
        bytes),\n   the Receiver has detected a delimiting error.\n   Following a
        delimiting error, the Receiver MUST discard the partially\n   assembled SNDU
        (in the Current SNDU buffer) and SHOULD record a\n   reassembly error.  It
        MUST then re-enter the Idle State.\n"
      title: 7.2.1.  Reassembly Payload Pointer Checking
    title: 7.2. Processing of a Received SNDU
  - contents:
    - "7.3.  Other Error Conditions\n   The Receiver SHOULD check the MPEG-2 Transport
      Error Indicator\n   carried in the TS Packet header [ISO-MPEG2].  This flag
      indicates a\n   transmission error for a TS Logical Channel.  If the flag is
      set to a\n   value of one, a transmission error event SHOULD be recorded.  Any\n
      \  partially received SNDU MUST be discarded.  The Receiver then enters\n   the
      Idle State.\n   The Receiver MUST check the MPEG-2 Continuity Counter carried
      in the\n   TS Packet header [ISO-MPEG2].  If two (or more) successive TS Packets\n
      \  within the same TS Logical Channel carry the same Continuity Counter\n   value,
      the duplicate TS Packets MUST be silently discarded.  If the\n   received value
      is NOT identical to that in the previous TS Packet,\n   and it does NOT increment
      by one for successive TS Packets (modulo\n   16), the Receiver has detected
      a continuity error.  Any partially\n   received SNDU MUST be discarded.  A continuity
      counter error event\n   SHOULD be recorded.  The Receiver then enters the Idle
      State.\n   Note that an MPEG2-2 Transmission network is permitted to carry\n
      \  duplicate TS Packets [ISO-MPEG2], which are normally detected by the\n   MPEG-2
      Continuity Counter.  A Receiver that does not perform the\n   above Continuity
      Counter check would accept duplicate copies of TS\n   Packets to the reassembly
      procedure.  In most cases, the SNDU CRC-32\n   integrity check will result in
      discard of these SNDUs, leading to\n   unexpected PDU loss; however, in some
      cases, duplicate PDUs (fitting\n   into one TS Packet) could pass undetected
      to the next layer protocol.\n"
    title: 7.3.  Other Error Conditions
  title: 7.  Receiver Processing
- contents:
  - "8.  Summary\n   This document defines a Unidirectional Lightweight Encapsulation\n
    \  (ULE) that performs efficient and flexible support for IPv4 and IPv6\n   network
    services over networks built upon the MPEG-2 Transport Stream\n   (TS).  The encapsulation
    is also suited to transport of other\n   protocol packets and bridged Ethernet
    frames.\n   ULE also provides an Extension Header format and defines an\n   associated
    IANA registry for efficient and flexible support of both\n   mandatory and optional
    SNDU headers.  This allows for future\n   extension of the protocol, while providing
    backwards compatibility\n   with existing implementations.  In particular, Optional
    Extension\n   Headers may safely be ignored by Receivers that do not implement\n
    \  them, or choose not to process them.\n"
  title: 8.  Summary
- contents:
  - "9.  Acknowledgements\n   This document is based on a previous document authored
    by: Horst D.\n   Clausen, Bernhard Collini-Nocker, Hilmar Linder, and Gorry Fairhurst.\n
    \  The authors wish to thank the members of the ip-dvb mailing list for\n   their
    input; in particular, the many comments received from Art\n   Allison, Carstsen
    Borman, Patrick Cipiere, Wolgang Fritsche, Hilmar\n   Linder, Alain Ritoux, and
    William Stanislaus.  Alain also provided\n   the original examples of usage.\n"
  title: 9.  Acknowledgements
- contents:
  - "10.  Security Considerations\n   The security considerations for ULE resemble
    those that arise when\n   the existing Multi-Protocol Encapsulation (MPE) is used.
    \ ULE does\n   not add specific new threats that will impact the security of the\n
    \  general Internet.\n   There is a known security issue with un-initialised stuffing
    bytes.\n   In ULE, these bytes are set to 0xFF (normal practice in MPEG-2).\n
    \  There are known integrity issues with the removal of the LAN FCS in a\n   bridged
    networking environment.  The removal for bridged frames\n   exposes the traffic
    to potentially undetected corruption while being\n   processed by the Encapsulator
    and/or Receiver.\n   There is a potential security issue when a Receiver receives
    a PDU\n   with two Length fields:  The Receiver would need to validate the\n   actual
    length and the Length field and ensure that inconsistent\n   values are not propagated
    by the network.  In direct encapsulation of\n   IPv4/IPv6 in ULE, this is avoided
    by including only one SNDU Length\n   Field.  However, this issue still arises
    in bridged LLC frames, and\n   frames with a LLC Length greater than the SNDU
    payload size MUST be\n   discarded, and an SNDU payload length error SHOULD be
    recorded.\n   In the future, a ULE Mandatory Extension Header may be used to define\n
    \  a method to perform link encryption of the SNDU payload.  This is as\n   an
    additional security mechanism to IP-, transport-, or application-\n   layer security,
    not a replacement [RFC4259].  The approach is generic\n   and decouples the encapsulation
    from future security extensions.  The\n   operation provides functions that resemble
    those currently used with\n   the MPE encapsulation.\n   Additional security control
    fields may be provided as part of this\n   link encryption Extension Header, e.g.,
    to associate an SNDU with one\n   of a set of Security Association (SA) parameters.
    \ As a part of the\n   encryption process, it may also be desirable to authenticate
    some or\n   all of the SNDU headers.  The method of encryption and the way in\n
    \  which keys are exchanged is beyond the scope of this specification,\n   as
    are the definition of the SA format and that of the related\n   encryption keys.\n"
  title: 10.  Security Considerations
- contents:
  - "11.  IANA Considerations\n   The IANA has created the ULE Next-Header Type field
    registry as\n   defined in this document.\n   ULE Next-Header registry\n      This
    registry allocates Next-Header values within the range 0-511\n      (decimal).
    \ For each allocated value, it also specifies the set of\n      allowed H-LEN
    values (see section 5).  In combination, these\n      define a set of allowed
    values in the range 0-1535 for the first\n      part of the ULE Type space (see
    section 4.4.1).\n"
  - contents:
    - "11.1.  IANA Guidelines\n   The following contains the IANA guidelines for management
      of the ULE\n   Next-Header registry.  This registry allocates values 0-511 decimal\n
      \  (0x0000-0x01FF, hexadecimal).  It MUST NOT allocate values greater\n   than
      0x01FF (decimal).\n   It subdivides the Next-Header registry in the following
      way:\n   1) 0-255 (decimal) IANA-assigned values, indicating Mandatory\n      Extension
      Headers (or link-dependent Type fields) for ULE,\n      requiring expert review
      leading to prior issue of an IETF RFC.\n      This specification MUST define
      the value and the name associated\n      with the Extension Header, together
      with the procedure for\n      processing the Extension Header.  It MUST also
      define the need for\n      the Mandatory Extension and the intended use.  The
      size of the\n      Extension Header MUST be specified.\n      Assignments have
      been made in this document, and registered by\n      IANA:\n      Type      Name
      \                            Reference\n      0:       Test-SNDU                        Section
      5.1\n      1:       Bridged-SNDU                     Section 5.2\n   2) 256-511
      (decimal) IANA-assigned values, indicating Optional\n      Extension Headers
      for ULE, requiring expert review leading to\n      prior issue of an IETF RFC.
      \ This specification MUST define the\n      value and the name associated with
      the Extension Header, together\n      with the procedure for processing the
      Extension Header.  The entry\n      MUST specify the range of allowable H-LEN
      values that are\n      permitted (in the range 1-5).  It MUST also define the
      need for\n      the Optional Extension and the intended use.\n      Assignments
      have been made in this document, and registered by\n      IANA:\n      Type
      \     Name                    H-LEN   Reference\n      256:      Extension-Padding
      \      1-5     Section 5.3\n"
    title: 11.1.  IANA Guidelines
  title: 11.  IANA Considerations
- contents:
  - '12. References

    '
  - contents:
    - "12.1.  Normative References\n   [ISO-MPEG2]    IS 13818-1, \"Information technology
      -- Generic coding\n                  of moving pictures and associated audio
      information --\n                  Part 1: Systems\", International Standards
      Organisation\n                  (ISO), 2000.\n   [RFC2119]      Bradner, S.,
      \"Key Words for Use in RFCs to Indicate\n                  Requirement Levels\",
      BCP 14, RFC 2119, 1997.\n   [RFC1112]      Deering, S., \"Host extensions for
      IP multicasting\",\n                  STD 5, RFC 1112, August 1989.\n   [RFC2464]
      \     Crawford, M., \"Transmission of IPv6 Packets over\n                  Ethernet
      Networks\", RFC 2464, December 1998.\n   [ULE1]         Registration for format_identifier
      ULE1, SMPTE\n                  Registration Authority, LLC,\n                  http://www.smpte-ra.org/ule1.html.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [IPDVB-AR]     Fairhurst, G. and M-J. Montpetit,
      \"Address Resolution\n                  for IP datagrams over MPEG-2 Networks\",
      Work in\n                  Progress, September 2005.\n   [ATSC]         A/53,
      \"ATSC Digital Television Standard\", Advanced\n                  Television
      Systems Committee (ATSC), Doc. A/53 Rev.C,\n                  2004\n   [ATSC-DAT]
      \    A/90, \"ATSC Data Broadcast Standard\", Advanced\n                  Television
      Systems Committee (ATSC), Doc. A/090, 2000.\n   [ATSC-DATG]    A/91, \"Recommended
      Practice: Implementation Guidelines\n                  for the ATSC Data Broadcast
      Standard\", Advanced\n                  Television Systems Committee (ATSC),
      Doc. A/91, 2001.\n   [ATSC-G]       A/54, \"Guide to the use of the ATSC Digital
      Television\n                  Standard\", Advanced Television Systems Committee\n
      \                 (ATSC), Doc. A/54, 1995.\n   [ATSC-PSIP-TC] A/65B, \"Program
      and System Information Protocol for\n                  Terrestrial Broadcast
      and Cable\", Advanced Television\n                  Systems Committee (ATSC),
      Doc. A/65B, 2003.\n   [ATSC-REG]     ATSC \"Code Point Registry\"\n                  www.atsc.org/standards/Code_Point_Registry.pdf.\n
      \  [ATSC-S]       A/80, \"Modulation and Coding Requirements for Digital\n                  TV
      (DTV) Applications over Satellite\", Advanced\n                  Television
      Systems Committee (ATSC), Doc. A/80, 1999.\n   [DIX]          Digital Equipment
      Corp, Intel Corp, Xerox Corp,\n                  \"Ethernet Local Area Network
      Specification\" Version\n                  2.0, November 1982.\n   [ETSI-DAT]
      \    EN 301 192, \"Specifications for Data Broadcasting\",\n                  European
      Telecommunications Standards Institute\n                  (ETSI), 2004.\n   [ETSI-DVBC]
      \   EN 300 800, \"Digital Video Broadcasting (DVB); DVB\n                  interaction
      channel for Cable TV distribution systems\n                  (CATV)\", European
      Telecommunications Standards\n                  Institute (ETSI), 1998.\n   [ETSI-DVBS]
      \   EN 300 421, \"Digital Video Broadcasting (DVB);\n                  Modulation
      and Coding for DBS satellite systems at\n                  11/12 GHz\", European
      Telecommunications Standards\n                  Institute (ETSI), 1997.\n   [ETSI-DVBT]
      \   EN 300 744, \"Digital Video Broadcasting (DVB); Framing\n                  structure,
      channel coding and modulation for digital\n                  terrestrial television
      (DVB-T)\", European\n                  Telecommunications Standards Institute
      (ETSI), 2004.\n   [ETSI-RCS]     ETSI 301 790, \"Digital Video Broadcasting
      (DVB);\n                  Interaction Channel for Satellite Distribution\n                  Systems\",
      European Telecommunications Standards\n                  Institute (ETSI), 2005.\n
      \  [IEEE-802.2]   IEEE 802.2, \"Local and metropolitan area networks-\n                  Specific
      requirements Part 2: Logical Link Control\",\n                  IEEE Computer
      Society, (also ISO/IEC 8802-2), 1998.\n   [IEEE-802.3]   IEEE 802.3, \"Local
      and metropolitan area networks-\n                  Specific requirements Part
      3: Carrier sense multiple\n                  access with collision detection
      (CSMA/CD) access\n                  method and physical layer specifications\",
      IEEE\n                  Computer Society, (also ISO/IEC 8802-3), 2002.\n   [ISO-DSMCC]
      \   IS 13818-6, \"Information technology -- Generic coding\n                  of
      moving pictures and associated audio information --\n                  Part
      6: Extensions for DSM-CC\", International\n                  Standards Organisation
      (ISO), 1998.\n   [ITU-H222]     H.222.0, \"Information technology - Generic
      coding of\n                  moving pictures and associated audio information:\n
      \                 Systems\", International Telecommunication Union,\n                  (ITU-T),
      1995.\n   [ITU-3563]     I.363.5, \"B-ISDN ATM Adaptation Layer specification:\n
      \                 Type 5 AAL\", International Telecommunication Union,\n                  (ITU-T),
      1996.\n   [ISO-8802-2]   ISO/IEC 8802.2, \"Logical Link Control\", International\n
      \                 Standards Organisation (ISO), 1998.\n   [RFC3077]      Duros,
      E., Dabbous, W., Izumiyama, H., Fujii, N., and\n                  Y. Zhang,
      \"A Link-Layer Tunneling Mechanism for\n                  Unidirectional Links\",
      RFC 3077, March 2001.\n   [RFC3309]      Stone, J., Stewart, R., and D. Otis,
      \"Stream Control\n                  Transmission Protocol (SCTP) Checksum Change\",
      RFC\n                  3309, September 2002.\n   [RFC4259]      Montpetit, M.-J.,
      Fairhurst, G., Clausen, H.,\n                  Collini-Nocker, B., and H. Linder,
      \"A Framework for\n                  Transmission of IP Datagrams over MPEG-2
      Networks\",\n                  RFC 4259, November 2005.\n   [SOOR05]       M.
      Sooriyabandara, G. Fairhurst, A. Ang, B. Collini-\n                  Nocker,
      H. Linder, W. Stering  \"A Lightweight\n                  Encapsulation Protocol
      for IP over MPEG-2 Networks:\n                  Design, Implementation and Analysis\",
      Computer\n                  Networks 48 p5-19, 2005.\n"
    title: 12.2.  Informative References
  title: 12. References
- contents:
  - "Appendix A: SNDU Packing Examples\n   This appendix provides some examples of
    use.  The appendix is\n   informative.  It does not provide a description of the
    protocol.  The\n   examples provide the complete TS Packet sequence for some sample\n
    \  encapsulated IP packets.\n   The specification of the TS Packet header operation
    and field values\n   is provided in [ISO-MPEG2].  The specification of ULE is
    provided in\n   the body of this document.\n   The key below is provided for the
    following examples.\n   HDR    4B TS Packet Header\n   PUSI   Payload Unit Start
    Indicator\n   PP     Payload Pointer\n   ***    TS Packet Payload Pointer (PP)\n
    \  Example A.1: Two 186B PDUs.\n     SNDU A is 200 bytes (including the ULE destination
    NPA address)\n     SNDU B is 200 bytes (including the ULE destination NPA address)\n
    \  The sequence comprises 3 TS Packets:\n                      SNDU\n           PP=0
    \     Length\n   +-----+------+------+------+-   -+------+\n   | HDR | 0x00 |
    0x00 | 0xC4 | ... | A182 |\n   +-----+----*-+-*----+------+-   -+------+\n   PUSI=1
    \    *   *\n              *****\n                                          SNDU\n
    \          PP=17           CRC for A     Length\n   +-----+------+------+-   -+---
    --+------+------+-   -+------+\n   | HDR | 0x11 | A183 | ... | A199 | 0x00 | 0xC4
    | ... | B165 |\n   +-----+----*-+------+-   -+------+-*----+------+-   -+------+\n
    \  PUSI=1     *                       *\n              *************************\n
    \                                End     Stuffing\n                    CRC for
    A Indicator   Bytes\n   +-----+------+-   -+------+----+----+-   -+----+\n   |
    HDR | B166 | ... | B199 |0xFF|0xFF| ... |0xFF|\n   +-----+------+-   -+------+----+----+-
    \  -+----+\n   PUSI=0\n   Example A.2: Usage of last byte in a TS-Packet\n     SNDU
    A is 183 bytes\n     SNDU B is 182 bytes\n     SNDU C is 181 bytes\n     SNDU
    D is 185 bytes\n   The sequence comprises 4 TS Packets:\n                       SNDU\n
    \           PP=0      Length     CRC for A\n    +-----+------+------+------+-
    \  -+------+\n    | HDR | 0x00 | 0x00 | 0xB3 | ... | A182 |\n    +-----+----*-+-*----+------+-
    \  -+------+\n    PUSI=1     *   *\n               *****\n                       SNDU
    \                 Unused\n            PP=0      Length       CRC for B  byte\n
    \   +-----+------+------+------+-   -+------+------+\n    | HDR | 0x00 | 0x00
    | 0xB2 | ... | B181 | 0xFF |\n    +-----+---*--+-*----+------+-   -+------+------+\n
    \   PUSI=1    *    *\n              ******\n                       SNDU                       SNDU\n
    \           PP=0      Length      CRC for C      Length\n    +-----+------+------+------+-
    \  -+------+------+------+\n    | HDR | 0x00 | 0x00 | 0xB1 | ... | C180 | 0x00
    | 0x65 |\n    +-----+---*--+-*----+------+-   -+------+------+------+\n    PUSI=1
    \   *    *\n              ******           Unused\n                                byte\n
    \   +-----+------+-   -+------+------+\n    | HDR | D002 | ... | D184 | 0xFF |\n
    \   +-----+------+-   -+------+------+\n     PUSI=0\n   Example A.3: Large SNDUs\n
    \  SNDU A is 732 bytes\n   SNDU B is 284 bytes\n   The sequence comprises 6 TS
    Packets:\n                       SNDU\n            PP=0      Length\n    +-----+------+------+------+-
    \  -+------+\n    | HDR | 0x00 | 0x02 | 0xD8 | ... | A182 |\n    +-----+---*--+-*----+------+-
    \  -+------+\n    PUSI=1    *    *\n              ******\n    +-----+------+-
    \  -+------+\n    | HDR | A183 | ... | A366 |\n    +-----+------+-   -+------+\n
    \   PUSI=0\n    +-----+------+-   -+------+\n    | HDR | A367 | ... | A550 |\n
    \   +-----+------+-   -+------+\n    PUSI=0\n                                           SNDU\n
    \           PP=181         CRC for A      Length\n    +-----+------+------+-   -+------+------+------+\n
    \   | HDR | 0xB5 | A551 | ... | A731 | 0x01 | 0x18 |\n    +-----+---*--+------+-
    \  -+------+*-----+------+\n    PUSI=1    *                       *\n              *************************\n
    \   +-----+------+-   -+------+\n    | HDR | B002 | ... | B185 |\n    +-----+------+-
    \  -+------+\n    PUSI=0\n                                    End          Stuffing\n
    \                                Indicator        Bytes\n    +-----+------+-   -+------+------+------+-
    \  -+------+\n    | HDR | B186 | ... | B283 | 0xFF | 0xFF | ... | 0xFF |\n    +-----+------+-
    \  -+------+------+------+-   -+------+\n    PUSI=0\n   Example A.4: Illustration
    of SNDU Length field\n     SNDU A is 200 bytes\n     SNDU B is 60 bytes\n     SNDU
    C is 60 bytes\n   The sequence comprises two TS Packets:\n                       SNDU\n
    \           PP=0      Length\n    +-----+------+------+------+-   -+------+\n
    \   | HDR | 0x00 | 0x00 | 0xC4 | ... | A182 |\n    +-----+----*-+-*----+------+-
    \  -+------+\n    PUSI=1     *   *  +      +\n               *****  ++++++++\n
    \                      +\n                       +++++++++++++++++\n                                       +
    \  SNDU\n            PP=17           CRC for A  +  Length\n    +-----+------+------+-
    \  -+------+-+----+------+-\n    | HDR | 0x11 | A183 | ... | A199 | 0x00 | 0x38
    | ...\n    +-----+----*-+------+-   -+------+*-----+------+-\n    PUSI=1     *
    \                     *  +       +\n               ************************  +++++++++\n
    \                                         +\n    +++++++++++++++++++++++++++++++++++++++\n
    \   +\n    +                  SNDU                       End      Stuffing\n    +
    \                Length                   Indicator     bytes\n    +    -+------+------+------+
    \ -+------+------+------+- -+------+\n    + ... | B59  | 0x00 | 0x38 |...| C59
    \ | 0xFF | 0xFF |...| 0xFF |\n    +    -+------+-+----+------+  -+------+-+----+------+-
    -+------+\n    +              +  +      +              +\n    +              +
    \ ++++++++              +\n    +              +   +                    +\n    ++++++++++++++++
    \  ++++++++++++++++++++++\n   *** TS Packet Payload Pointer (PP)\n   +++ ULE Length
    Indicator\n   Example A.5: Three 44B PDUs.\n     SNDU A is 52 bytes (no ULE destination
    NPA address) SNDU B is 52\n     bytes (no ULE destination NPA address) SNDU C
    is 52 bytes (no ULE\n     destination NPA address)\n   The sequence comprises
    1 TS Packet:\n                      SNDU\n           PP=0      Length\n   +-----+------+------+------+-
    \  -+-----+------+------+-   -+-----+-\n   | HDR | 0x00 | 0x80 | 0x30 | ... |
    A51 | 0x80 | 0x30 | ... | B51 | ..\n   +-----+----*-+-*----+------+-   -+-----+------+------+-
    \  -+-----+-\n   PUSI=1     *   *\n              *****\n                                           End
    \       Stuffing\n                                         Indicator     bytes\n
    \               -----+------+-   -+-----+---------+- -+------+\n            ...
    0x80 | 0x30 | ... | C51 |0xFF|0xFF|   | 0xFF |\n                -----+------+-
    \  -+-----+---------+- -+------+\n"
  title: 'Appendix A: SNDU Packing Examples'
- contents:
  - "Appendix B: SNDU Encapsulation\n   An example of ULE encapsulation carrying an
    ICMPv6 packet generated\n   by ping6.\n   ULE SNDU Length  :            63 decimal\n
    \  D-bit value  :                0 (NPA destination address present)\n   ULE Protocol
    Type :           0x86dd (IPv6)\n   Destination ULE NPA Address : 00:01:02:03:04:05\n
    \  ULE CRC32 :                   0x7c171763\n   Source IPv6 :                 2001:DB8:3008:1965::1\n
    \  Destination IPv6 :            2001:DB8:2509:1962::2\n   SNDU contents (including
    CRC-32):\n   0000: 00 3f 86 dd 00 01 02 03 04 05 60 00 00 00 00 0d\n   0016: 3a
    40 20 01 0d b8 30 08 19 65 00 00 00 00 00 00\n   0032: 00 01 20 01 0d b8 25 09
    19 62 00 00 00 00 00 00\n   0048: 00 02 80 00 9d 8c 06 38 00 04 00 00 00 00 00
    7c\n   0064: 17 17 63\n"
  title: 'Appendix B: SNDU Encapsulation'
- contents:
  - "Authors' Addresses\n   Godred Fairhurst\n   Department of Engineering\n   University
    of Aberdeen\n   Aberdeen, AB24 3UE\n   UK\n   EMail: gorry@erg.abdn.ac.uk\n   Web:
    http://www.erg.abdn.ac.uk/users/Gorry\n   Bernhard Collini-Nocker\n   Department
    of Scientific Computing\n   University of Salzburg\n   Jakob Haringer Str. 2\n
    \  5020 Salzburg\n   Austria\n   EMail: bnocker@cosy.sbg.ac.at\n   Web: http://www.scicomp.sbg.ac.at/\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
