- contents:
  - '          Sending Multiple RTP Streams in a Single RTP Session

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This memo expands and clarifies the behavior of Real-time Transport\n
    \  Protocol (RTP) endpoints that use multiple synchronization sources\n   (SSRCs).
    \ This occurs, for example, when an endpoint sends multiple\n   RTP streams in
    a single RTP session.  This memo updates RFC 3550 with\n   regard to handling
    multiple SSRCs per endpoint in RTP sessions, with\n   a particular focus on RTP
    Control Protocol (RTCP) behavior.  It also\n   updates RFC 4585 to change and
    clarify the calculation of the timeout\n   of SSRCs and the inclusion of feedback
    messages.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8108.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \  2. Terminology .....................................................4\n   3.
    Use Cases for Multi-Stream Endpoints ............................4\n      3.1.
    Endpoints with Multiple Capture Devices ....................4\n      3.2. Multiple
    Media Types in a Single RTP Session ...............5\n      3.3. Multiple Stream
    Mixers .....................................5\n      3.4. Multiple SSRCs for a
    Single Media Source ...................5\n   4. Use of RTP by Endpoints That Send
    Multiple Media Streams ........6\n   5. Use of RTCP by Endpoints That Send Multiple
    Media Streams .......6\n      5.1. RTCP Reporting Requirement .................................7\n
    \     5.2. Initial Reporting Interval .................................7\n      5.3.
    Aggregation of Reports into Compound RTCP Packets ..........8\n           5.3.1.
    Maintaining AVG_RTCP_SIZE ...........................9\n           5.3.2. Scheduling
    RTCP when Aggregating Multiple SSRCs ....10\n      5.4. Use of RTP/AVPF or RTP/SAVPF
    Feedback .....................13\n           5.4.1. Choice of SSRC for Feedback
    Packets ................13\n           5.4.2. Scheduling an RTCP Feedback Packet
    .................14\n   6. Adding and Removing SSRCs ......................................15\n
    \     6.1. Adding RTP Streams ........................................16\n      6.2.
    Removing RTP Streams ......................................16\n   7. RTCP Considerations
    for Streams with Disparate Rates ...........17\n      7.1. Timing Out SSRCs ..........................................19\n
    \          7.1.1. Problems with the RTP/AVPF T_rr_interval\n                  Parameter
    ..........................................19\n           7.1.2. Avoiding Premature
    Timeout .........................20\n           7.1.3. Interoperability between
    RTP/AVP and RTP/AVPF ......21\n           7.1.4. Updated SSRC Timeout Rules .........................22\n
    \     7.2. Tuning RTCP Transmissions .................................22\n           7.2.1.
    RTP/AVP and RTP/SAVP ...............................22\n           7.2.2. RTP/AVPF
    and RTP/SAVPF .............................24\n   8. Security Considerations ........................................25\n
    \  9. References .....................................................26\n      9.1.
    Normative References ......................................26\n      9.2. Informative
    References ....................................26\n   Acknowledgments ...................................................29\n
    \  Authors' Addresses ................................................29\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   At the time the Real-Time Transport Protocol (RTP) [RFC3550]
    was\n   originally designed, and for quite some time after, endpoints in RTP\n
    \  sessions typically only transmitted a single media source and, thus,\n   used
    a single RTP stream and synchronization source (SSRC) per RTP\n   session, where
    separate RTP sessions were typically used for each\n   distinct media type.  Recently,
    however, a number of scenarios have\n   emerged in which endpoints wish to send
    multiple RTP streams,\n   distinguished by distinct RTP synchronization source
    (SSRC)\n   identifiers, in a single RTP session.  These are outlined in\n   Section
    3.  Although the initial design of RTP did consider such\n   scenarios, the specification
    was not consistently written with such\n   use cases in mind; thus, the specification
    is somewhat unclear in\n   places.\n   This memo updates [RFC3550] to clarify
    behavior in use cases where\n   endpoints use multiple SSRCs.  It also updates
    [RFC4585] to resolve\n   problems with regard to timeout of inactive SSRCs and
    to clarify\n   behavior around inclusion of feedback messages.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in RFC\n   2119 [RFC2119] and indicate requirement levels for compliant\n   implementations.\n"
  title: 2.  Terminology
- contents:
  - "3.  Use Cases for Multi-Stream Endpoints\n   This section discusses several use
    cases that have motivated the\n   development of endpoints that sends RTP data
    using multiple SSRCs in\n   a single RTP session.\n"
  - contents:
    - "3.1.  Endpoints with Multiple Capture Devices\n   The most straightforward
      motivation for an endpoint to send multiple\n   simultaneous RTP streams in
      a single RTP session is when an endpoint\n   has multiple capture devices and,
      hence, can generate multiple media\n   sources, of the same media type and characteristics.
      \ For example,\n   telepresence systems of the type described by the CLUE Telepresence\n
      \  Framework [CLUE-FRAME] often have multiple cameras or microphones\n   covering
      various areas of a room and, hence, send several RTP streams\n   of each type
      within a single RTP session.\n"
    title: 3.1.  Endpoints with Multiple Capture Devices
  - contents:
    - "3.2.  Multiple Media Types in a Single RTP Session\n   Recent work has updated
      RTP [MULTI-RTP] and Session Description\n   Protocol (SDP) [SDP-BUNDLE] to remove
      the historical assumption in\n   RTP that media sources of different media types
      would always be sent\n   on different RTP sessions.  In this work, a single
      endpoint's audio\n   and video RTP streams (for example) are instead sent in
      a single RTP\n   session to reduce the number of transport-layer flows used.\n"
    title: 3.2.  Multiple Media Types in a Single RTP Session
  - contents:
    - "3.3.  Multiple Stream Mixers\n   There are several RTP topologies that can
      involve a central device\n   that itself generates multiple RTP streams in a
      session.  An example\n   is a mixer providing centralized compositing for a
      multi-capture\n   scenario like that described in Section 3.1.  In this case,
      the\n   centralized node is behaving much like a multi-capturer endpoint,\n
      \  generating several similar and related sources.\n   A more complex example
      is the selective forwarding middlebox,\n   described in Section 3.7 of [RFC7667].
      \ This is a middlebox that\n   receives RTP streams from several endpoints and
      then selectively\n   forwards modified versions of some RTP streams toward the
      other\n   endpoints to which it is connected.  For each connected endpoint,
      a\n   separate media source appears in the session for every other source\n
      \  connected to the middlebox, \"projected\" from the original streams,\n   but
      at any given time many of them can appear to be inactive (and\n   thus are receivers,
      not senders, in RTP).  This sort of device is\n   closer to being an RTP mixer
      than an RTP translator: it terminates\n   RTCP reporting about the mixed streams;
      it can rewrite SSRCs,\n   timestamps, and sequence numbers, as well as the contents
      of the RTP\n   payloads; and it can turn sources on and off at will without\n
      \  appearing to generate packet loss.  Each projected stream will\n   typically
      preserve its original RTCP source description (SDES)\n   information.\n"
    title: 3.3.  Multiple Stream Mixers
  - contents:
    - "3.4.  Multiple SSRCs for a Single Media Source\n   There are also several cases
      where multiple SSRCs can be used to send\n   data from a single media source
      within a single RTP session.  These\n   include, but are not limited to, transport
      robustness tools, such as\n   the RTP retransmission payload format [RFC4588],
      that require one\n   SSRC to be used for the media data and another SSRC for
      the repair\n   data.  Similarly, some layered media encoding schemes, for example,\n
      \  H.264 Scalable Video Coding (SVC) [RFC6190], can be used in a\n   configuration
      where each layer is sent using a different SSRC within\n   a single RTP session.\n"
    title: 3.4.  Multiple SSRCs for a Single Media Source
  title: 3.  Use Cases for Multi-Stream Endpoints
- contents:
  - "4.  Use of RTP by Endpoints That Send Multiple Media Streams\n   RTP is inherently
    a group communication protocol.  Each endpoint in\n   an RTP session will use
    one or more SSRCs, as will some types of RTP-\n   level middlebox.  Accordingly,
    unless restrictions on the number of\n   SSRCs have been signaled, RTP endpoints
    can expect to receive RTP\n   data packets sent using a number of different SSRCs,
    within a single\n   RTP session.  This can occur irrespective of whether the RTP
    session\n   is running over a point-to-point connection or a multicast group,\n
    \  since middleboxes can be used to connect multiple transport\n   connections
    together into a single RTP session (the RTP session is\n   defined by the shared
    SSRC space, not by the transport connections).\n   Furthermore, if RTP mixers
    are used, some SSRCs might only be visible\n   in the contributing source (CSRC)
    list of an RTP packet and in RTCP,\n   and might not appear directly as the SSRC
    of an RTP data packet.\n   Every RTP endpoint will have an allocated share of
    the available\n   session bandwidth, as determined by signaling and congestion
    control.\n   The endpoint needs to keep its total media sending rate within this\n
    \  share.  However, endpoints that send multiple RTP streams do not\n   necessarily
    need to subdivide their share of the available bandwidth\n   independently or
    uniformly to each RTP stream and its SSRCs.  In\n   particular, an endpoint can
    vary the bandwidth allocation to\n   different streams depending on their needs,
    and it can dynamically\n   change the bandwidth allocated to different SSRCs (for
    example, by\n   using a variable-rate codec), provided the total sending rate
    does\n   not exceed its allocated share.  This includes enabling or disabling\n
    \  RTP streams, or their redundancy streams, as more or less bandwidth\n   becomes
    available.\n"
  title: 4.  Use of RTP by Endpoints That Send Multiple Media Streams
- contents:
  - "5.  Use of RTCP by Endpoints That Send Multiple Media Streams\n   RTCP is defined
    in Section 6 of [RFC3550].  The description of the\n   protocol is phrased in
    terms of the behavior of \"participants\" in an\n   RTP session, under the assumption
    that each endpoint is a participant\n   with a single SSRC.  However, for correct
    operation in cases where\n   endpoints have multiple SSRC values, implementations
    MUST treat each\n   SSRC as a separate participant in the RTP session, so that
    an\n   endpoint that has multiple SSRCs counts as multiple participants.\n"
  - contents:
    - "5.1.  RTCP Reporting Requirement\n   An RTP endpoint that has multiple SSRCs
      MUST treat each SSRC as a\n   separate participant in the RTP session.  Each
      SSRC will maintain its\n   own RTCP-related state information and, hence, will
      have its own RTCP\n   reporting interval that determines when it sends RTCP
      reports.  If\n   the mechanism in [MULTI-STREAM-OPT] is not used, then each
      SSRC will\n   send RTCP reports for all other SSRCs, including those co-located
      at\n   the same endpoint.\n   If the endpoint has some SSRCs that are sending
      data and some that\n   are only receivers, then they will receive different
      shares of the\n   RTCP bandwidth and calculate different base RTCP reporting
      intervals.\n   Otherwise, all SSRCs at an endpoint will calculate the same base
      RTCP\n   reporting interval.  The actual reporting intervals for each SSRC are\n
      \  randomized in the usual way, but reports can be aggregated as\n   described
      in Section 5.3.\n"
    title: 5.1.  RTCP Reporting Requirement
  - contents:
    - "5.2.  Initial Reporting Interval\n   When a participant joins a unicast session,
      the following text from\n   Section 6.2 of [RFC3550] is relevant: \"For unicast
      sessions... the\n   delay before sending the initial compound RTCP packet MAY
      be zero.\"\n   The basic assumption is that this also ought to apply in the
      case of\n   multiple SSRCs.  Caution has to be exercised, however, when an\n
      \  endpoint (or middlebox) with a large number of SSRCs joins a unicast\n   session,
      since immediate transmission of many RTCP reports can create\n   a significant
      burst of traffic, leading to transient congestion and\n   packet loss due to
      queue overflows.\n   To ensure that the initial burst of traffic generated by
      an RTP\n   endpoint is no larger than would be generated by a TCP connection,
      an\n   RTP endpoint MUST NOT send more than four compound RTCP packets with\n
      \  zero initial delay when it joins an RTP session, independent of the\n   number
      of SSRCs used by the endpoint.  Each of those initial compound\n   RTCP packets
      MAY include aggregated reports from multiple SSRCs,\n   provided the total compound
      RTCP packet size does not exceed the MTU,\n   and the avg_rtcp_size is maintained
      as in Section 5.3.1.  Aggregating\n   reports from several SSRCs in the initial
      compound RTCP packets\n   allows a substantial number of SSRCs to report immediately.\n
      \  Endpoints SHOULD prioritize reports on SSRCs that are likely to be\n   most
      immediately useful, e.g., for SSRCs that are initially senders.\n   An endpoint
      that needs to report on more SSRCs than will fit into the\n   four compound
      RTCP reports that can be sent immediately MUST send the\n   other reports later,
      following the usual RTCP timing rules including\n   timer reconsideration.  Those
      reports MAY be aggregated as described\n   in Section 5.3.\n      Note: The
      above is chosen to match the TCP maximum initial window\n      of four packets
      [RFC3390], not the larger TCP initial windows for\n      which there is an ongoing
      experiment [RFC6928].  The reason for\n      this is a desire to be conservative,
      since an RTP endpoint will\n      also in many cases start sending RTP data
      packets at the same time\n      as these initial RTCP packets are sent.\n"
    title: 5.2.  Initial Reporting Interval
  - contents:
    - "5.3.  Aggregation of Reports into Compound RTCP Packets\n   As outlined in
      Section 5.1, an endpoint with multiple SSRCs has to\n   treat each SSRC as a
      separate participant when it comes to sending\n   RTCP reports.  This will lead
      to each SSRC sending a compound RTCP\n   packet in each reporting interval.
      \ Since these packets are coming\n   from the same endpoint, it might reasonably
      be expected that they can\n   be aggregated to reduce overheads.  Indeed, Section
      6.1 of [RFC3550]\n   allows RTP translators and mixers to aggregate packets
      in similar\n   circumstances:\n      It is RECOMMENDED that translators and
      mixers combine individual\n      RTCP packets from the multiple sources they
      are forwarding into\n      one compound packet whenever feasible in order to
      amortize the\n      packet overhead (see Section 7).  An example RTCP compound
      packet\n      as might be produced by a mixer is shown in Fig. 1.  If the\n
      \     overall length of a compound packet would exceed the MTU of the\n      network
      path, it SHOULD be segmented into multiple shorter\n      compound packets to
      be transmitted in separate packets of the\n      underlying protocol.  This
      does not impair the RTCP bandwidth\n      estimation because each compound packet
      represents at least one\n      distinct participant.  Note that each of the
      compound packets MUST\n      begin with an SR or RR packet.\n   This allows
      RTP translators and mixers to generate compound RTCP\n   packets that contain
      multiple Sender Report (SR) or Receiver Report\n   (RR) packets from different
      SSRCs, as well as any of the other packet\n   types.  There are no restrictions
      on the order in which the RTCP\n   packets can occur within the compound packet,
      except the regular rule\n   that the compound RTCP packet starts with an SR
      or RR packet.  Due to\n   this rule, correctly implemented RTP endpoints will
      be able to handle\n   compound RTCP packets that contain RTCP packets relating
      to multiple\n   SSRCs.\n   Accordingly, endpoints that use multiple SSRCs can
      aggregate the RTCP\n   packets sent by their different SSRCs into compound RTCP
      packets,\n   provided 1) the resulting compound RTCP packets begin with an SR
      or\n   RR packet, 2) they maintain the average RTCP packet size as described\n
      \  in Section 5.3.1, and 3) they schedule packet transmission and manage\n   aggregation
      as described in Section 5.3.2.\n"
    - contents:
      - "5.3.1.  Maintaining AVG_RTCP_SIZE\n   The RTCP scheduling algorithm in [RFC3550]
        works on a per-SSRC basis.\n   Each SSRC sends a single compound RTCP packet
        in each RTCP reporting\n   interval.  When an endpoint uses multiple SSRCs,
        it is desirable to\n   aggregate the compound RTCP packets sent by its SSRCs,
        reducing the\n   overhead by forming a larger compound RTCP packet.  This
        aggregation\n   can be done as described in Section 5.3.2, provided the average
        RTCP\n   packet size calculation is updated as follows.\n   Participants in
        an RTP session update their estimate of the average\n   RTCP packet size (avg_rtcp_size)
        each time they send or receive an\n   RTCP packet (see Section 6.3.3 of [RFC3550]).
        \ When a compound RTCP\n   packet that contains RTCP packets from several
        SSRCs is sent or\n   received, the avg_rtcp_size estimate for each SSRC that
        is reported\n   upon is updated using div_packet_size rather than the actual
        packet\n   size:\n      avg_rtcp_size = (1/16) * div_packet_size + (15/16)
        * avg_rtcp_size\n   where div_packet_size is packet_size divided by the number
        of SSRCs\n   reporting in that compound packet.  The number of SSRCs reporting
        in\n   a compound packet is determined by counting the number of different\n
        \  SSRCs that are the source of SR or RR RTCP packets within the\n   compound
        RTCP packet.  Non-compound RTCP packets (i.e., RTCP packets\n   that do not
        contain an SR or RR packet [RFC5506]) are considered to\n   report on a single
        SSRC.\n   A participant that doesn't follow the above rule, and instead uses\n
        \  the full RTCP compound packet size to calculate avg_rtcp_size, will\n   derive
        an RTCP reporting interval that is overly large by a factor\n   that is proportional
        to the number of SSRCs aggregated into compound\n   RTCP packets and the size
        of set of SSRCs being aggregated relative\n   to the total number of participants.
        \ This increased RTCP reporting\n   interval can cause premature timeouts
        if it is more than five times\n   the interval chosen by the SSRCs that understand
        compound RTCP that\n   aggregate reports from many SSRCs.  A 1500-octet MTU
        can fit five\n   typical-size reports into a compound RTCP packet, so this
        is a real\n   concern if endpoints aggregate RTCP reports from multiple SSRCs.\n
        \  The issue raised in the previous paragraph is mitigated by the\n   modification
        in timeout behavior specified in Section 7.1.2 of this\n   memo.  This mitigation
        is in place in those cases where the RTCP\n   bandwidth is sufficiently high
        that an endpoint, using avg_rtcp_size\n   calculated without taking into account
        the number of reporting SSRCs,\n   can transmit more frequently than approximately
        every 5 seconds.\n   Note, however, that the non-updated endpoint's RTCP reporting
        is\n   still negatively impacted even if the premature timeouts of its SSRCs\n
        \  are avoided.  If compatibility with non-updated endpoints is a\n   concern,
        the number of reports from different SSRCs aggregated into a\n   single compound
        RTCP packet SHOULD either be limited to two reports\n   or aggregation ought
        not be used at all.  This will limit the\n   non-updated endpoint's RTCP reporting
        interval to be no larger than\n   twice the RTCP reporting interval that would
        be chosen by an endpoint\n   following this specification.\n"
      title: 5.3.1.  Maintaining AVG_RTCP_SIZE
    - contents:
      - "5.3.2.  Scheduling RTCP when Aggregating Multiple SSRCs\n   This section
        revises and extends the behavior defined in Section 6.3\n   of [RFC3550],
        and in Section 3.5.3 of [RFC4585] if the RTP/AVPF\n   profile or the RTP/SAVPF
        profile is used, regarding actions to take\n   when scheduling and sending
        RTCP packets where multiple reporting\n   SSRCs are aggregating their RTCP
        packets into the same compound RTCP\n   packet.  These changes to the RTCP
        scheduling rules are needed to\n   maintain important RTCP timing properties,
        including the inter-packet\n   distribution, and the behavior during flash
        joins and other changes\n   in session membership.\n   The variables tn, tp,
        tc, T, and Td used in the following are defined\n   in Section 6.3 of [RFC3550].
        \ The variables T_rr_interval and\n   T_rr_last are defined in [RFC4585].\n
        \  Each endpoint MUST schedule RTCP transmission independently for each\n
        \  of its SSRCs using the regular calculation of tn for the RTP profile\n
        \  being used.  Each time the timer tn expires for an SSRC, the endpoint\n
        \  MUST perform RTCP timer reconsideration and, if applicable,\n   suppression
        based on T_rr_interval.  If the result indicates that a\n   compound RTCP
        packet is to be sent by that SSRC, and the transmission\n   is not an early
        RTCP packet [RFC4585], then the endpoint SHOULD try\n   to aggregate RTCP
        packets of additional SSRCs that are scheduled in\n   the future into the
        compound RTCP packet before it is sent.  The\n   reason to limit or not aggregate
        due to backwards compatibility\n   reasons is discussed in Section 5.3.1.\n
        \  Aggregation proceeds as follows.  The endpoint selects the SSRC that\n
        \  has the smallest tn value after the current time, tc, and prepares\n   the
        RTCP packets that SSRC would send if its timer tn expired at tc.\n   If those
        RTCP packets will fit into the compound RTCP packet that is\n   being generated,
        taking into account the path MTU and the previously\n   added RTCP packets,
        then they are added to the compound RTCP packet;\n   otherwise, they are discarded.
        \ This process is repeated for each\n   SSRC, in order of increasing tn, until
        the compound RTCP packet is\n   full or all SSRCs have been aggregated.  At
        that point, the compound\n   RTCP packet is sent.\n   When the compound RTCP
        packet is sent, the endpoint MUST update tp,\n   tn, and T_rr_last (if applicable)
        for each SSRC that was included.\n   These variables are updated as follows:\n
        \  a.  For the first SSRC that reported in the compound RTCP packet, set\n
        \      the effective transmission time, tt, of that SSRC to tc.\n   b.  For
        each additional SSRC that reported in the compound RTCP\n       packet, calculate
        the transmission time that SSRC would have had\n       if it had not been
        aggregated into the compound RTCP packet.\n       This is derived by taking
        tn for that SSRC, then performing\n       reconsideration and updating tn
        until tp + T <= tn.  Once this is\n       done, set the effective transmission
        time, tt, for that SSRC to\n       the calculated value of tn.  If the RTP/AVPF
        profile or the RTP/\n       SAVPF profile is being used, then suppression
        based on\n       T_rr_interval MUST NOT be used in this calculation.\n   c.
        \ Calculate average effective transmission time, tt_avg, for the\n       compound
        RTCP packet based on the tt values for all SSRCs sent in\n       the compound
        RTCP packet.  Set tp for each of the SSRCs sent in\n       the compound RTCP
        packet to tt_avg.  If the RTP/AVPF profile or\n       the RTP/SAVPF profile
        is being used, set T_tt_last for each SSRC\n       sent in the compound RTCP
        packet to tt_avg.\n   d.  For each of the SSRCs sent in the compound RTCP
        packet, calculate\n       new tn values based on the updated parameters and
        the usual RTCP\n       timing rules and reschedule the timers.\n   When using
        the RTP/AVPF profile or the RTP/SAVPF profile, the above\n   mechanism only
        attempts to aggregate RTCP packets when the compound\n   RTCP packet to be
        sent is not an early RTCP packet, and hence the\n   algorithm in Section 3.5.3
        of [RFC4585] will control RTCP scheduling.\n   If T_rr_interval == 0, or if
        T_rr_interval != 0 and option 1, 2a, or\n   2b of the algorithm are chosen,
        then the above mechanism updates the\n   necessary variables.  However, if
        the transmission is suppressed per\n   option 2c of the algorithm, then tp
        is updated to tc as aggregation\n   has not taken place.\n   Reverse reconsideration
        MUST be performed following Section 6.3.4 of\n   [RFC3550].  In some cases,
        this can lead to the value of tp after\n   reverse reconsideration being larger
        than tc.  This is not a problem,\n   and has the desired effect of proportionally
        pulling the tp value\n   towards tc (as well as tn) as the reporting interval
        shrinks in\n   direct proportion the reduced group size.\n   The above algorithm
        has been shown in simulations [Sim88] [Sim92] to\n   maintain the inter-RTCP
        packet transmission time distribution for\n   each SSRC and to consume the
        same amount of bandwidth as\n   non-aggregated RTCP packets.  With this algorithm,
        the actual\n   transmission interval for an SSRC triggering an RTCP compound
        packet\n   transmission is following the regular transmission rules.  The
        value\n   tp is set to somewhere in the interval [0, 1.5/1.21828*Td] ahead
        of\n   tc.  The actual value is the average of one instance of tc and the\n
        \  randomized transmission times of the additional SSRCs; thus, the\n   lower
        range of the interval is more probable.  This compensates for\n   the bias
        that is otherwise introduced by picking the shortest tn\n   value out of the
        N SSRCs included in aggregate.\n   The algorithm also handles the cases where
        the number of SSRCs that\n   can be included in an aggregated packet varies.
        \ An SSRC that\n   previously was aggregated and fails to fit in a packet
        still has its\n   own transmission scheduled according to normal rules.  Thus,
        it will\n   trigger a transmission in due time, or the SSRC will be included
        in\n   another aggregate.  The algorithm's behavior under SSRC group size\n
        \  changes is as follows:\n   RTP sessions where the number of SSRCs is growing:
        \ When the group\n      size is growing, Td grows in proportion to the number
        of new SSRCs\n      in the group.  When reconsideration is performed due to
        expiry of\n      the tn timer, that SSRC will reconsider the transmission
        and with\n      a certain probability reschedule the tn timer.  This part
        of the\n      reconsideration algorithm is only impacted by the above algorithm\n
        \     having tp values that were in the future instead of set to the\n      time
        of the actual last transmission at the time of updating tp.\n   RTP sessions
        where the number of SSRCs is shrinking:  When the group\n      shrinks, reverse
        reconsideration moves the tp and tn values\n      towards tc proportionally
        to the number of SSRCs that leave the\n      session compared to the total
        number of participants when they\n      left.  The setting of the tp value
        forward in time related to the\n      tc could be believed to have negative
        effect.  However, the reason\n      for this setting is to compensate for
        bias caused by picking the\n      shortest tn out of the N aggregated.  This
        bias remains over a\n      reduction in the number of SSRCs.  The reverse
        reconsideration\n      compensates the reduction independently of whether
        or not\n      aggregation is being used.  The negative effect that can occur
        on\n      removing an SSRC is that the most favorable tn belonged to the\n
        \     removed SSRC.  The impact of this is limited to delaying the\n      transmission,
        in the worst case, one reporting interval.\n   In conclusion, the investigations
        performed have found no significant\n   negative impact on the scheduling
        algorithm.\n"
      title: 5.3.2.  Scheduling RTCP when Aggregating Multiple SSRCs
    title: 5.3.  Aggregation of Reports into Compound RTCP Packets
  - contents:
    - "5.4.  Use of RTP/AVPF or RTP/SAVPF Feedback\n   This section discusses the
      transmission of RTP/AVPF feedback packets\n   when the transmitting endpoint
      has multiple SSRCs.  The guidelines in\n   this section also apply to endpoints
      using the RTP/SAVPF profile.\n"
    - contents:
      - "5.4.1.  Choice of SSRC for Feedback Packets\n   When an RTP/AVPF endpoint
        has multiple SSRCs, it can choose what SSRC\n   to use as the source for the
        RTCP feedback packets it sends.  Several\n   factors can affect that choice:\n
        \  o  RTCP feedback packets relating to a particular media type SHOULD\n      be
        sent by an SSRC that receives that media type.  For example,\n      when audio
        and video are multiplexed onto a single RTP session,\n      endpoints will
        use their audio SSRC to send feedback on the audio\n      received from other
        participants.\n   o  RTCP feedback packets and RTCP codec control messages
        that are\n      notifications or indications regarding RTP data processed
        by an\n      endpoint MUST be sent from the SSRC used for that RTP data.  This\n
        \     includes notifications that relate to a previously received\n      request
        or command [RFC4585][RFC5104].\n   o  If separate SSRCs are used to send and
        receive media, then the\n      corresponding SSRC SHOULD be used for feedback,
        since they have\n      differing RTCP bandwidth fractions.  This can also
        affect the\n      consideration of whether or not the SSRC can be used in
        immediate\n      mode.\n   o  Some RTCP feedback packet types require consistency
        in the SSRC\n      used.  For example, if a Temporary Maximum Media Stream
        Bit Rate\n      Request (TMMBR) limitation [RFC5104] is set by an SSRC, the
        same\n      SSRC needs to be used to remove the limitation.\n   o  If several
        SSRCs are suitable for sending feedback, it might be\n      desirable to use
        an SSRC that allows the sending of feedback as an\n      early RTCP packet.\n
        \  When an RTCP feedback packet is sent as part of a compound RTCP\n   packet
        that aggregates reports from multiple SSRCs, there is no\n   requirement that
        the compound packet contain an SR or RR packet\n   generated by the sender
        of the RTCP feedback packet.  For reduced-\n   size RTCP packets, aggregation
        of RTCP feedback packets from multiple\n   sources is not limited further
        than Section 4.2.2 of [RFC5506].\n"
      title: 5.4.1.  Choice of SSRC for Feedback Packets
    - contents:
      - "5.4.2.  Scheduling an RTCP Feedback Packet\n   When an SSRC has a need to
        transmit a feedback packet in early mode,\n   it MUST schedule that packet
        following the algorithm in Section 3.5\n   of [RFC4585] modified as follows:\n
        \  o  To determine whether an RTP session is considered to be a point-\n      to-point
        session or a multiparty session, an endpoint MUST count\n      the number
        of distinct RTCP SDES CNAME values used by the SSRCs\n      listed in the
        SSRC field of RTP data packets it receives and in\n      the \"SSRC of sender\"
        field of RTCP SR, RR, RTPFB, or PSFB packets\n      it receives.  An RTP session
        is considered to be a multiparty\n      session if more than one CNAME is
        used by those SSRCs, unless\n      signaling indicates that the session is
        to be handled as point to\n      point or RTCP reporting groups [MULTI-STREAM-OPT]
        are used.  If\n      RTCP reporting groups are used, an RTP session is considered
        to be\n      a point-to-point session if the endpoint receives only a single\n
        \     reporting group and is considered to be a multiparty session if\n      multiple
        reporting groups are received or a combination of\n      reporting groups
        and SSRCs that are not part of a reporting group\n      are received.  Endpoints
        MUST NOT determine whether an RTP session\n      is multiparty or point to
        point based on the type of connection\n      (unicast or multicast) used,
        or on the number of SSRCs received.\n   o  When checking if there is already
        a scheduled compound RTCP packet\n      containing feedback messages (Step
        2 in Section 3.5.2 of\n      [RFC4585]), that check MUST be done considering
        all local SSRCs.\n   o  If an SSRC is not allowed to send an early RTCP packet,
        then the\n      feedback message MAY be queued for transmission as part of
        any\n      early or regular scheduled transmission that can occur within the\n
        \     maximum useful lifetime of the feedback message (T_max_fb_delay).\n
        \     This modifies the behavior in item 4a in Section 3.5.2 of\n      [RFC4585].\n
        \  The first bullet point above specifies a rule to determine if an RTP\n
        \  session is to be considered a point-to-point session or a multiparty\n
        \  session.  This rule is straightforward to implement, but is known to\n
        \  incorrectly classify some sessions as multiparty sessions.  The known\n
        \  problems are as follows:\n   Endpoint with multiple synchronization contexts:
        \ An endpoint that is\n      part of a point-to-point session can have multiple
        synchronization\n      contexts, for example, due to forwarding an external
        media source\n      into an interactive real-time conversation.  In this case,
        the\n      classification will consider the peer as two endpoints, while the\n
        \     actual RTP/RTCP transmission will be under the control of one\n      endpoint.\n
        \  Selective Forwarding Middlebox:  The Selective Forwarding Middlebox\n      (SFM)
        as defined in Section 3.7 of [RFC7667] has control over the\n      transmission
        and configurations between itself and each peer\n      endpoint individually.
        \ It also fully controls the RTCP packets\n      being forwarded between the
        individual legs.  Thus, this type of\n      middlebox can be compared to the
        RTP mixer, which uses its own\n      SSRCs to mix or select the media it forwards,
        that will be\n      classified as a point-to-point RTP session by the above
        rule.\n   In the above cases, it is very reasonable to use RTCP reporting\n
        \  groups [MULTI-STREAM-OPT].  If that extension is used, an endpoint\n   can
        indicate that the multitude of CNAMEs are in fact under a single\n   endpoint
        or middlebox control by using only a single reporting group.\n   The above
        rules will also classify some sessions where the endpoint\n   is connected
        to an RTP mixer as being point to point.  For example,\n   the mixer could
        act as gateway to an RTP session based on Any Source\n   Multicast for the
        discussed endpoint.  However, this will, in most\n   cases, be okay, as the
        RTP mixer provides separation between the two\n   parts of the session.  The
        responsibility falls on the mixer to act\n   accordingly in each domain.\n
        \  Finally, we note that signaling mechanisms could be defined to\n   override
        the rules when they would result in the wrong\n   classification.\n"
      title: 5.4.2.  Scheduling an RTCP Feedback Packet
    title: 5.4.  Use of RTP/AVPF or RTP/SAVPF Feedback
  title: 5.  Use of RTCP by Endpoints That Send Multiple Media Streams
- contents:
  - "6.  Adding and Removing SSRCs\n   The set of SSRCs present in a single RTP session
    can vary over time\n   due to changes in the number of endpoints in the session
    or due to\n   changes in the number or type of RTP streams being sent.\n   Every
    endpoint in an RTP session will have at least one SSRC that it\n   uses for RTCP
    reporting, and for sending media if desired.  It can\n   also have additional
    SSRCs, for sending extra media sources or for\n   additional RTCP reporting.  If
    the set of media sources being sent\n   changes, then the set of SSRCs being sent
    will change.  Changes in\n   the media format or clock rate might also require
    changes in the set\n   of SSRCs used.  An endpoint can also have more SSRCs than
    it has\n   active RTP streams, and send RTCP relating to SSRCs that are not\n
    \  currently sending RTP data packets so that its peers are aware of the\n   SSRCs,
    and have the associated context (e.g., clock synchronization\n   and an SDES CNAME)
    in place to be able to play out media as soon as\n   they becomes active.\n   In
    the following, we describe some considerations around adding and\n   removing
    RTP streams and their associated SSRCs.\n"
  - contents:
    - "6.1.  Adding RTP Streams\n   When an endpoint joins an RTP session, it can
      have zero, one, or more\n   RTP streams it will send, or that it is prepared
      to send.  If it has\n   no RTP stream it plans to send, it still needs an SSRC
      that will be\n   used to send RTCP feedback.  If it will send one or more RTP
      streams,\n   it will need the corresponding number of SSRC values.  The SSRCs
      used\n   by an endpoint are made known to other endpoints in the RTP session\n
      \  by sending RTP and RTCP packets.  SSRCs can also be signaled using\n   non-RTP
      means (e.g., [RFC5576]).  Unless restricted by signaling, an\n   endpoint can,
      at any time, send an additional RTP stream, identified\n   by a new SSRC (this
      might be associated with a signaling event, but\n   that is outside the scope
      of this memo).  This makes the new SSRC\n   visible to the other endpoints in
      the session, since they share the\n   single SSRC space inherent in the definition
      of an RTP session.\n   An endpoint that has never sent an RTP stream will have
      an SSRC that\n   it uses for RTCP reporting.  If that endpoint wants to start
      sending\n   an RTP stream, it is RECOMMENDED that it use its existing SSRC for\n
      \  that stream, since otherwise the participant count in the RTP session\n   will
      be unnecessarily increased, leading to a longer RTCP reporting\n   interval
      and larger RTCP reports due to cross reporting.  If the\n   endpoint wants to
      start sending more than one RTP stream, it will\n   need to generate a new SSRC
      for the second and any subsequent RTP\n   streams.\n   An endpoint that has
      previously stopped sending an RTP stream, and\n   that wants to start sending
      a new RTP stream, cannot generally reuse\n   the existing SSRC, and often needs
      to generate a new SSRC, because an\n   SSRC cannot change media type (e.g.,
      audio to video) or RTP timestamp\n   clock rate [RFC7160] and because the SSRC
      might be associated with a\n   particular semantic by the application (note:
      an RTP stream can pause\n   and restart using the same SSRC, provided RTCP is
      sent for that SSRC\n   during the pause; these rules only apply to new RTP streams
      reusing\n   an existing SSRC).\n"
    title: 6.1.  Adding RTP Streams
  - contents:
    - "6.2.  Removing RTP Streams\n   An SSRC is removed from an RTP session in one
      of two ways.  When an\n   endpoint stops sending RTP and RTCP packets using
      an SSRC, then that\n   SSRC will eventually time out as described in Section
      6.3.5 of\n   [RFC3550].  Alternatively, an SSRC can be explicitly removed from
      use\n   by sending an RTCP BYE packet as described in Section 6.3.7 of\n   [RFC3550].
      \ It is RECOMMENDED that SSRCs be removed from use by\n   sending an RTCP BYE
      packet.  Note that [RFC3550] requires that the\n   RTCP BYE SHOULD be the last
      RTP/RTCP packet sent in the RTP session\n   for an SSRC.  If an endpoint needs
      to restart an RTP stream after\n   sending an RTCP BYE for its SSRC, it needs
      to generate a new SSRC\n   value for that stream.\n   The finality of sending
      RTCP BYE means that endpoints need to\n   consider if the ceasing of transmission
      of an RTP stream is temporary\n   or permanent.  Temporary suspension of media
      transmission using a\n   particular RTP stream (SSRC) needs to maintain that
      SSRC as an active\n   participant, by continuing RTCP transmission for it.  That
      way the\n   media sending can be resumed immediately, knowing that the context
      is\n   in place.  When permanently halting transmission, a participant needs\n
      \  to send an RTCP BYE to allow the other participants to use the RTCP\n   bandwidth
      resources and clean up their state databases.\n   An endpoint that ceases transmission
      of all its RTP streams but\n   remains in the RTP session MUST maintain at least
      one SSRC that is to\n   be used for RTCP reporting and feedback (i.e., it cannot
      send a BYE\n   for all SSRCs, but needs to retain at least one active SSRC).
      \ As\n   some Feedback packets can be bound to media type, there might be a\n
      \  need to maintain one SSRC per media type within an RTP session.  An\n   alternative
      can be to create a new SSRC to use for RTCP reporting and\n   feedback.  However,
      to avoid the perception that an endpoint drops\n   completely out of an RTP
      session, such a new SSRC ought to be\n   established first -- before terminating
      all the existing SSRCs.\n"
    title: 6.2.  Removing RTP Streams
  title: 6.  Adding and Removing SSRCs
- contents:
  - "7.  RTCP Considerations for Streams with Disparate Rates\n   An RTP session has
    a single set of parameters that configure the\n   session bandwidth.  These are
    the RTCP sender and receiver fractions\n   (e.g., the SDP \"b=RR:\" and \"b=RS:\"
    lines [RFC3556]) and the\n   parameters of the RTP/AVPF profile [RFC4585] (e.g.,
    trr-int) if that\n   profile (or its secure extension, RTP/SAVPF [RFC5124]) is
    used.  As a\n   consequence, the base RTCP reporting interval, before randomization,\n
    \  will be the same for every sending SSRC in an RTP session.\n   Similarly, every
    receiving SSRC in an RTP session will have the same\n   base reporting interval,
    although this can differ from the reporting\n   interval chosen by sending SSRCs.
    \ This uniform RTCP reporting\n   interval for all SSRCs can result in RTCP reports
    being sent more\n   often, or too seldom, than is considered desirable for an
    RTP stream.\n   For example, consider a scenario in which an audio flow sending
    at\n   tens of kilobits per second is multiplexed into an RTP session with a\n
    \  multi-megabit high-quality video flow.  If the session bandwidth is\n   configured
    based on the video sending rate, and the default RTCP\n   bandwidth fraction of
    5% of the session bandwidth is used, it is\n   likely that the RTCP bandwidth
    will exceed the audio sending rate.\n   If the reduced minimum RTCP interval described
    in Section 6.2 of\n   [RFC3550] is then used in the session, as appropriate for
    video where\n   rapid feedback on damaged I-frames is wanted, the uniform reporting\n
    \  interval for all senders could mean that audio sources are expected\n   to
    send RTCP packets more often than they send audio data packets.\n   This bandwidth
    mismatch can be reduced by careful tuning of the RTCP\n   parameters, especially
    trr_int when the RTP/AVPF profile is used, but\n   cannot be avoided entirely
    as it is inherent in the design of the\n   RTCP timing rules, and affects all
    RTP sessions that contain flows\n   with greatly mismatched bandwidth.\n   Different
    media rates or desired RTCP behaviors can also occur with\n   SSRCs carrying the
    same media type.  A common case in multiparty\n   conferencing is when a small
    number of video streams are shown in\n   high resolution, while the others are
    shown as low-resolution\n   thumbnails, with the choice of which is shown in high
    resolution\n   being voice-activity controlled.  Here the differences are both
    in\n   actual media rate and in choices for what feedback messages might be\n
    \  needed.  Other examples of differences that can exist are due to the\n   intended
    usage of a media source.  A media source carrying the video\n   of the speaker
    in a conference is different from a document camera.\n   Basic parameters that
    can differ in this case are frame-rate,\n   acceptable end-to-end delay, and the
    Signal-to-Noise Ratio (SNR)\n   fidelity of the image.  These differences affect
    not only the needed\n   bitrates, but also possible transmission behaviors, usable
    repair\n   mechanisms, what feedback messages the control and repair requires,\n
    \  the transmission requirements on those feedback messages, and\n   monitoring
    of the RTP stream delivery.  Other similar scenarios can\n   also exist.\n   Sending
    multiple media types in a single RTP session causes that\n   session to contain
    more SSRCs than if each media type was sent in a\n   separate RTP session.  For
    example, if two participants each send an\n   audio and a video RTP stream in
    a single RTP session, that session\n   will comprise four SSRCs; but if separate
    RTP sessions had been used\n   for audio and video, each of those two RTP sessions
    would comprise\n   only two SSRCs.  Hence, sending multiple RTP streams in an
    RTP\n   session increases the amount of cross reporting between the SSRCs, as\n
    \  each SSRC reports on all other SSRCs in the session.  This increases\n   the
    size of the RTCP reports, causing them to be sent less often than\n   would be
    the case if separate RTP sessions where used for a given\n   RTCP bandwidth.\n
    \  Finally, when an RTP session contains multiple media types, it is\n   important
    to note that the RTCP reception quality reports, feedback\n   messages, and extended
    report blocks used might not be applicable to\n   all media types.  Endpoints
    will need to consider the media type of\n   each SSRC, and only send or process
    reports and feedback that apply\n   to that particular SSRC and its media type.
    \ Signaling solutions\n   might have shortcomings when it comes to indicating
    that a particular\n   set of RTCP reports or feedback messages only apply to a
    particular\n   media type within an RTP session.\n   From an RTCP perspective,
    therefore, it can be seen that there are\n   advantages to using separate RTP
    sessions for each media source,\n   rather than sending multiple media sources
    in a single RTP session.\n   However, these are frequently offset by the need
    to reduce port use,\n   to ease NAT/firewall traversal, achieved by combining
    media sources\n   into a single RTP session.  The following sections consider
    some of\n   the issues with using RTCP in sessions with multiple media sources
    in\n   more detail.\n"
  - contents:
    - "7.1.  Timing Out SSRCs\n   Various issues have been identified with timing
      out SSRC values when\n   sending multiple RTP streams in an RTP session.\n"
    - contents:
      - "7.1.1.  Problems with the RTP/AVPF T_rr_interval Parameter\n   The RTP/AVPF
        profile includes a method to prevent regular RTCP\n   reports from being sent
        too often.  This mechanism is described in\n   Section 3.5.3 of [RFC4585];
        it is controlled by the T_rr_interval\n   parameter.  It works as follows.
        \ When a regular RTCP report is sent,\n   a new random value, T_rr_current_interval,
        is generated, drawn evenly\n   in the range 0.5 to 1.5 times T_rr_interval.
        \ If a regular RTCP\n   packet is to be sent earlier than T_rr_current_interval
        seconds after\n   the previous regular RTCP packet, and there are no feedback
        messages\n   to be sent, then that regular RTCP packet is suppressed and the
        next\n   regular RTCP packet is scheduled.  The T_rr_current_interval is\n
        \  recalculated each time a regular RTCP packet is sent.  The benefit of\n
        \  suppression is that it avoids wasting bandwidth when there is nothing\n
        \  requiring frequent RTCP transmissions, but still allows utilization\n   of
        the configured bandwidth when feedback is needed.\n   Unfortunately, this
        suppression mechanism skews the distribution of\n   the RTCP sending intervals
        compared to the regular RTCP reporting\n   intervals.  The standard RTCP timing
        rules, including reconsideration\n   and the compensation factor, result in
        the intervals between sending\n   RTCP packets having a distribution that
        is skewed towards the upper\n   end of the range [0.5/1.21828, 1.5/1.21828]*Td,
        where Td is the\n   deterministic calculated RTCP reporting interval.  With
        Td = 5 s,\n   this distribution covers the range [2.052 s, 6.156 s].  In\n
        \  comparison, the RTP/AVPF suppression rules act in an interval that is\n
        \  0.5 to 1.5 times T_rr_interval; for T_rr_interval = 5s, this is\n   [2.5
        s, 7.5 s].\n   The effect of this is that the time between consecutive RTCP
        packets\n   when using T_rr_interval suppression can become large.  The maximum\n
        \  time interval between sending one regular RTCP packet and the next,\n   when
        T_rr_interval is being used, occurs when T_rr_current_interval\n   takes its
        maximum value and a regular RTCP packet is suppressed at\n   the end of the
        suppression period, then the next regular RTCP packet\n   is scheduled after
        its largest possible reporting interval.  Taking\n   the worst case of the
        two intervals gives a maximum time between two\n   RTCP reports of 1.5*T_rr_interval
        + 1.5/1.21828*Td.\n   This behavior can be surprising when Td and T_rr_interval
        have the\n   same value.  That is, when T_rr_interval is configured to match
        the\n   regular RTCP reporting interval.  In this case, one might expect that\n
        \  regular RTCP packets are sent according to their usual schedule, but\n
        \  feedback packets can be sent early.  However, the above-mentioned\n   issue
        results in the RTCP packets actually being sent in the range\n   [0.5*Td,
        2.731*Td] with a highly non-uniform distribution, rather\n   than the range
        [0.41*Td, 1.23*Td].  This is perhaps unexpected, but\n   is not a problem
        in itself.  However, when coupled with packet loss,\n   it raises the issue
        of premature timeout.\n"
      title: 7.1.1.  Problems with the RTP/AVPF T_rr_interval Parameter
    - contents:
      - "7.1.2.  Avoiding Premature Timeout\n   In RTP/AVP [RFC3550] the timeout behavior
        is simple; it is 5 times\n   Td, where Td is calculated with a Tmin value
        of 5 seconds.  In other\n   words, if the configured RTCP bandwidth allows
        for an average RTCP\n   reporting interval shorter than 5 seconds, the timeout
        is 25 seconds\n   of no activity from the SSRC (RTP or RTCP); otherwise, the
        timeout is\n   5 average reporting intervals.\n   RTP/AVPF [RFC4585] introduces
        different timeout behaviors depending\n   on the value of T_rr_interval.  When
        T_rr_interval is 0, it uses the\n   same timeout calculation as RTP/AVP.  However,
        when T_rr_interval is\n   non-zero, it replaces Tmin in the timeout calculation,
        most likely to\n   speed up detection of timed out SSRCs.  However, using
        a non-zero\n   T_rr_interval has two consequences for RTP behavior.\n   First,
        due to suppression, the number of RTP and RTCP packets sent by\n   an SSRC
        that is not an active RTP sender can become very low, because\n   of the issue
        discussed in Section 7.1.1.  As the RTCP packet interval\n   can be as long
        as 2.73*Td, during a 5*Td time period, an endpoint\n   might in fact transmit
        only a single RTCP packet.  The long intervals\n   result in fewer RTCP packets,
        to a point where a single RTCP packet\n   loss can sometimes result in timing
        out an SSRC.\n   Second, the RTP/AVPF changes to the timeout rules reduce
        robustness\n   to misconfiguration.  It is common to use RTP/AVPF configured
        such\n   that RTCP packets can be sent frequently to allow rapid feedback;\n
        \  however, this makes timeouts very sensitive to T_rr_interval.  For\n   example,
        if two SSRCs are configured, one with T_rr_interval = 0.1 s\n   and the other
        with T_rr_interval = 0.6 s, then this small difference\n   will result in
        the SSRC with the shorter T_rr_interval timing out the\n   other if it stops
        sending RTP packets, since the other RTCP reporting\n   interval is more than
        five times its own.  When RTP/AVP is used, or\n   RTP/AVPF with T_rr_interval
        = 0, this is a non-issue, as the timeout\n   period will be 25 s, and differences
        between configured RTCP\n   bandwidth can only cause premature timeouts when
        the reporting\n   intervals are greater than 5 s and differ by a factor of
        five.  To\n   limit the scope for such problematic misconfiguration, we define
        an\n   update to the RTP/AVPF timeout rules in Section 7.1.4.\n"
      title: 7.1.2.  Avoiding Premature Timeout
    - contents:
      - "7.1.3.  Interoperability between RTP/AVP and RTP/AVPF\n   If endpoints implementing
        the RTP/AVP and RTP/AVPF profiles (or their\n   secure variants) are combined
        within a single RTP session, and the\n   RTP/AVPF endpoints use a non-zero
        T_rr_interval that is significantly\n   below 5 seconds, there is a risk that
        the RTP/AVPF endpoints will\n   prematurely time out the SSRCs of the RTP/AVP
        endpoints, due to their\n   different RTCP timeout rules.  Conversely, if
        the RTP/AVPF endpoints\n   use a T_rr_interval that is significantly larger
        than 5 seconds,\n   there is a risk that the RTP/AVP endpoints will time out
        the SSRCs of\n   the RTP/AVPF endpoints.\n   Mixing endpoints using two different
        RTP profiles within a single RTP\n   session is NOT RECOMMENDED.  However,
        if mixed RTP profiles are used,\n   and the RTP/AVPF endpoints are not updated
        to follow Section 7.1.4 of\n   this memo, then the RTP/AVPF session SHOULD
        be configured to use\n   T_rr_interval = 4 seconds to avoid premature timeouts.\n
        \  The choice of T_rr_interval = 4 seconds for interoperability might\n   appear
        strange.  Intuitively, this value ought to be 5 seconds, to\n   make both
        the RTP/AVP and RTP/AVPF use the same timeout period.\n   However, the behavior
        outlined in Section 7.1.1 shows that actual\n   RTP/AVPF reporting intervals
        can be longer than expected.  Setting\n   T_rr_interval = 4 seconds gives
        actual RTCP intervals near to those\n   expected by RTP/AVP, ensuring interoperability.\n"
      title: 7.1.3.  Interoperability between RTP/AVP and RTP/AVPF
    - contents:
      - "7.1.4.  Updated SSRC Timeout Rules\n   To ensure interoperability and avoid
        premature timeouts, all SSRCs in\n   an RTP session MUST use the same timeout
        behavior.  However, previous\n   specifications are inconsistent in this regard.
        \ To avoid\n   interoperability issues, this memo updates the timeout rules
        as\n   follows:\n   o  For the RTP/AVP, RTP/SAVP, RTP/AVPF, and RTP/SAVPF
        profiles, the\n      timeout interval SHALL be calculated using a multiplier
        of five\n      times the deterministic RTCP reporting interval.  That is,
        the\n      timeout interval SHALL be 5*Td.\n   o  For the RTP/AVP, RTP/SAVP,
        RTP/AVPF, and RTP/SAVPF profiles,\n      calculation of Td, for the purpose
        of calculating the participant\n      timeout only, SHALL be done using a
        Tmin value of 5 seconds and\n      not the reduced minimal interval, even
        if the reduced minimum\n      interval is used to calculate RTCP packet transmission
        intervals.\n   This changes the behavior for the RTP/AVPF or RTP/SAVPF profiles
        when\n   T_rr_interval != 0.  Specifically, the first paragraph of\n   Section
        3.5.4 of [RFC4585] is updated to use Tmin instead of\n   T_rr_interval in
        the timeout calculation for RTP/AVPF entities.\n"
      title: 7.1.4.  Updated SSRC Timeout Rules
    title: 7.1.  Timing Out SSRCs
  - contents:
    - "7.2.  Tuning RTCP Transmissions\n   This subsection discusses what tuning can
      be done to reduce the\n   downsides of the shared RTCP packet intervals.  First,
      what\n   possibilities exist for the RTP/AVP [RFC3551] profile are listed\n
      \  followed by what additional tools are provided by RTP/AVPF [RFC4585].\n"
    - contents:
      - "7.2.1.  RTP/AVP and RTP/SAVP\n   When using the RTP/AVP or RTP/SAVP profiles,
        the options for tuning\n   the RTCP reporting intervals are limited to the
        RTCP sender and\n   receiver bandwidth, and whether the minimum RTCP interval
        is scaled\n   according to the bandwidth.  As the scheduling algorithm includes\n
        \  both randomization and reconsideration, one cannot simply calculate\n   the
        expected average transmission interval using the formula for Td\n   given
        in Section 6.3.1 of [RFC3550].  However, by considering the\n   inputs to
        that expression, and the randomization and reconsideration\n   rules, we can
        begin to understand the behavior of the RTCP\n   transmission interval.\n
        \  Let's start with some basic observations:\n   a.  Unless the scaled minimum
        RTCP interval is used, Td prior to\n       randomization and reconsideration
        can never be less than Tmin.\n       The default value of Tmin is 5 seconds.\n
        \  b.  If the scaled minimum RTCP interval is used, Td can become as low\n
        \      as 360 divided by RTP Session bandwidth in kilobits per second.\n       In
        SDP, the RTP session bandwidth is signaled using a \"b=AS\"\n       line.
        \ An RTP Session bandwidth of 72 kbps results in Tmin being\n       5 seconds.
        \ An RTP session bandwidth of 360 kbps of course gives\n       a Tmin of 1
        second, and to achieve a Tmin equal to once every\n       frame for a 25 frame-per-second
        video stream requires an RTP\n       session bandwidth of 9 Mbps.  Use of
        the RTP/AVPF or RTP/SAVPF\n       profile allows more frequent RTCP reports
        for the same bandwidth,\n       as discussed below.\n   c.  The value of Td
        scales with the number of SSRCs and the average\n       size of the RTCP reports
        to keep the overall RTCP bandwidth\n       constant.\n   d.  The actual transmission
        interval for a Td value is in the range\n       [0.5*Td/1.21828, 1.5*Td/1.21828],
        and the distribution is skewed,\n       due to reconsideration, with the majority
        of the probability mass\n       being above Td.  This means, for example,
        that for Td = 5 s, the\n       actual transmission interval will be distributed
        in the range\n       [2.052 s, 6.156 s], and tending towards the upper half
        of the\n       interval.  Note that Tmin parameter limits the value of Td
        before\n       randomization and reconsideration are applied, so the actual\n
        \      transmission interval will cover a range extending below Tmin.\n   Given
        the above, we can calculate the number of SSRCs, n, that an RTP\n   session
        with 5% of the session bandwidth assigned to RTCP can support\n   while maintaining
        Td equal to Tmin.  This will tell us how many RTP\n   streams we can report
        on, keeping the RTCP overhead within acceptable\n   bounds.  We make two assumptions
        that simplify the calculation: that\n   all SSRCs are senders, and that they
        all send compound RTCP packets\n   comprising an SR packet with n-1 report
        blocks, followed by an SDES\n   packet containing a 16 octet CNAME value [RFC7022]
        (such RTCP packets\n   will vary in size between 54 and 798 octets depending
        on n, up to the\n   maximum of 31 report blocks that can be included in an
        SR packet).\n   If we put this packet size, and a 5% RTCP bandwidth fraction
        into the\n   RTCP interval calculation in Section 6.3.1 of [RFC3550], and\n
        \  calculate the value of n needed to give Td = Tmin for the scaled\n   minimum
        interval, we find n=9 SSRCs can be supported (irrespective of\n   the interval,
        due to the way the reporting interval scales with the\n   session bandwidth).
        \ We see that to support more SSRCs without\n   changing the scaled minimum
        interval, we need to increase the RTCP\n   bandwidth fraction from 5%; changing
        the session bandwidth to a\n   higher value would reduce the Tmin.  However,
        if using the default 5%\n   allocation of RTCP bandwidth, an increase will
        result in more SSRCs\n   being supported given a fixed Td target.\n   Based
        on the above, when using the RTP/AVP profile or the RTP/SAVP\n   profile,
        the key limitation for rapid RTCP reporting in small unicast\n   sessions
        is going to be the Tmin value.  The RTP session bandwidth\n   configured in
        RTCP has to be sufficiently high to reach the reporting\n   goals the application
        has following the rules for the scaled minimal\n   RTCP interval.\n"
      title: 7.2.1.  RTP/AVP and RTP/SAVP
    - contents:
      - "7.2.2.  RTP/AVPF and RTP/SAVPF\n   When using RTP/AVPF or RTP/SAVPF, we have
        a powerful additional tool\n   for tuning RTCP transmissions: the T_rr_interval
        parameter.  Use of\n   this parameter allows short RTCP reporting intervals;
        alternatively\n   it gives the ability to sent frequent RTCP feedback without
        sending\n   frequent regular RTCP reports.\n   The use of the RTP/AVPF or
        RTP/SAVPF profile with T_rr_interval set\n   to a value greater than zero
        but smaller than Tmin allows more\n   frequent RTCP feedback than the RTP/AVP
        or RTP/SAVP profiles, for a\n   given RTCP bandwidth.  This happens because
        Tmin is set to zero after\n   the transmission of the initial RTCP report,
        causing the reporting\n   interval for later packet to be determined by the
        usual RTCP\n   bandwidth-based calculation, with Tmin=0, and the T_rr_interval.\n
        \  This has the effect that we are no longer restricted by the minimal\n   interval
        (whether the default 5-second minimum or the reduced minimum\n   interval).
        \ Rather, the RTCP bandwidth and the T_rr_interval are the\n   governing factors,
        allowing faster feedback.  Applications that care\n   about rapid regular
        RTCP feedback ought to consider using the RTP/\n   AVPF or RTP/SAVPF profile,
        even if they don't use the feedback\n   features of that profile.\n   The
        use of the RTP/AVPF or RTP/SAVPF profile allows RTCP feedback\n   packets
        to be sent frequently, without also requiring regular RTCP\n   reports to
        be sent frequently, since T_rr_interval limits the rate at\n   which regular
        RTCP packets can be sent, while still permitting RTCP\n   feedback packets
        to be sent.  Applications that can use feedback\n   packets for some RTP streams,
        e.g., video streams, but don't want\n   frequent regular reporting for other
        RTP streams, can configure the\n   T_rr_interval to a value so that the regular
        reporting for both audio\n   and video is at a level that is considered acceptable
        for the audio.\n   They could then use feedback packets, which will include
        RTCP SR/RR\n   packets unless reduced size RTCP feedback packets [RFC5506]
        are used,\n   for the video reporting.  This allows the available RTCP bandwidth
        to\n   be devoted on the feedback that provides the most utility for the\n
        \  application.\n   Using T_rr_interval still requires one to determine suitable
        values\n   for the RTCP bandwidth value.  Indeed, it might make this choice
        even\n   more important, as this is more likely to affect the RTCP behavior\n
        \  and performance than when using the RTP/AVP or RTP/SAVP profile, as\n   there
        are fewer limitations affecting the RTCP transmission.\n   When T_rr_interval
        is non-zero, there are configurations that need to\n   be avoided.  If the
        RTCP bandwidth chosen is such that the Td value\n   is smaller than, but close
        to, T_rr_interval, then the actual regular\n   RTCP packet transmission interval
        can become very large, as discussed\n   in Section 7.1.1.  Therefore, for
        configuration where one intends to\n   have Td smaller than T_rr_interval,
        then Td is RECOMMENDED to be\n   targeted at values less than 1/4th of T_rr_interval,
        which results in\n   the range becoming [0.5*T_rr_interval, 1.81*T_rr_interval].\n
        \  With the RTP/AVPF or RTP/SAVPF profiles, using T_rr_interval = 0 has\n
        \  utility and results in a behavior where the RTCP transmission is only\n
        \  limited by the bandwidth, i.e., no Tmin limitations at all.  This\n   allows
        more frequent regular RTCP reporting than can be achieved\n   using the RTP/AVP
        profile.  Many configurations of RTCP will not\n   consume all the bandwidth
        that they have been configured to use, but\n   this configuration will consume
        what it has been given.  Note that\n   the same behavior will be achieved
        as long as T_rr_interval is\n   smaller than 1/3 of Td as that prevents T_rr_interval
        from affecting\n   the transmission.\n   There exists no method for using
        different regular RTCP reporting\n   intervals depending on the media type
        or individual RTP stream, other\n   than using a separate RTP session for
        each type or stream.\n"
      title: 7.2.2.  RTP/AVPF and RTP/SAVPF
    title: 7.2.  Tuning RTCP Transmissions
  title: 7.  RTCP Considerations for Streams with Disparate Rates
- contents:
  - "8.  Security Considerations\n   When using the secure RTP protocol (RTP/SAVP)
    [RFC3711], or the\n   secure variant of the feedback profile (RTP/SAVPF) [RFC5124],
    the\n   cryptographic context of a compound secure RTCP packet is the SSRC of\n
    \  the sender of the first RTCP (sub-)packet.  This could matter in some\n   cases,
    especially for keying mechanisms such as MIKEY [RFC3830] that\n   allow use of
    per-SSRC keying.\n   Otherwise, the standard security considerations of RTP apply;
    sending\n   multiple RTP streams from a single endpoint in a single RTP session\n
    \  does not appear to have different security consequences than sending\n   the
    same number of RTP streams spread across different RTP sessions.\n"
  title: 8.  Security Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n              Jacobson,
      \"RTP: A Transport Protocol for Real-Time\n              Applications\", STD
      64, RFC 3550, DOI 10.17487/RFC3550,\n              July 2003, <http://www.rfc-editor.org/info/rfc3550>.\n
      \  [RFC3711]  Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.\n              Norrman,
      \"The Secure Real-time Transport Protocol (SRTP)\",\n              RFC 3711,
      DOI 10.17487/RFC3711, March 2004,\n              <http://www.rfc-editor.org/info/rfc3711>.\n
      \  [RFC4585]  Ott, J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,\n              \"Extended
      RTP Profile for Real-time Transport Control\n              Protocol (RTCP)-Based
      Feedback (RTP/AVPF)\", RFC 4585,\n              DOI 10.17487/RFC4585, July 2006,\n
      \             <http://www.rfc-editor.org/info/rfc4585>.\n   [RFC5124]  Ott,
      J. and E. Carrara, \"Extended Secure RTP Profile for\n              Real-time
      Transport Control Protocol (RTCP)-Based Feedback\n              (RTP/SAVPF)\",
      RFC 5124, DOI 10.17487/RFC5124, February\n              2008, <http://www.rfc-editor.org/info/rfc5124>.\n
      \  [RFC5506]  Johansson, I. and M. Westerlund, \"Support for Reduced-Size\n
      \             Real-Time Transport Control Protocol (RTCP): Opportunities\n              and
      Consequences\", RFC 5506, DOI 10.17487/RFC5506, April\n              2009, <http://www.rfc-editor.org/info/rfc5506>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [CLUE-FRAME]\n              Duckworth, M.,
      Ed., Pepperell, A., and S. Wenger,\n              \"Framework for Telepresence
      Multi-Streams\", Work in\n              Progress, draft-ietf-clue-framework-25,
      January 2016.\n   [MULTI-RTP]\n              Westerlund, M., Perkins, C., and
      J. Lennox, \"Sending\n              Multiple Types of Media in a Single RTP
      Session\", Work in\n              Progress, draft-ietf-avtcore-multi-media-rtp-session-13,\n
      \             December 2015.\n   [MULTI-STREAM-OPT]\n              Lennox, J.,
      Westerlund, M., Wu, Q., and C. Perkins,\n              \"Sending Multiple Media
      Streams in a Single RTP Session:\n              Grouping RTCP Reception Statistics
      and Other Feedback\",\n              Work in Progress, draft-ietf-avtcore-rtp-multi-\n
      \             stream-optimisation-12, March 2016.\n   [RFC3390]  Allman, M.,
      Floyd, S., and C. Partridge, \"Increasing TCP's\n              Initial Window\",
      RFC 3390, DOI 10.17487/RFC3390, October\n              2002, <http://www.rfc-editor.org/info/rfc3390>.\n
      \  [RFC3551]  Schulzrinne, H. and S. Casner, \"RTP Profile for Audio and\n              Video
      Conferences with Minimal Control\", STD 65, RFC 3551,\n              DOI 10.17487/RFC3551,
      July 2003,\n              <http://www.rfc-editor.org/info/rfc3551>.\n   [RFC3556]
      \ Casner, S., \"Session Description Protocol (SDP) Bandwidth\n              Modifiers
      for RTP Control Protocol (RTCP) Bandwidth\",\n              RFC 3556, DOI 10.17487/RFC3556,
      July 2003,\n              <http://www.rfc-editor.org/info/rfc3556>.\n   [RFC3830]
      \ Arkko, J., Carrara, E., Lindholm, F., Naslund, M., and K.\n              Norrman,
      \"MIKEY: Multimedia Internet KEYing\", RFC 3830,\n              DOI 10.17487/RFC3830,
      August 2004,\n              <http://www.rfc-editor.org/info/rfc3830>.\n   [RFC4588]
      \ Rey, J., Leon, D., Miyazaki, A., Varsa, V., and R.\n              Hakenberg,
      \"RTP Retransmission Payload Format\", RFC 4588,\n              DOI 10.17487/RFC4588,
      July 2006,\n              <http://www.rfc-editor.org/info/rfc4588>.\n   [RFC5104]
      \ Wenger, S., Chandra, U., Westerlund, M., and B. Burman,\n              \"Codec
      Control Messages in the RTP Audio-Visual Profile\n              with Feedback
      (AVPF)\", RFC 5104, DOI 10.17487/RFC5104,\n              February 2008, <http://www.rfc-editor.org/info/rfc5104>.\n
      \  [RFC5576]  Lennox, J., Ott, J., and T. Schierl, \"Source-Specific\n              Media
      Attributes in the Session Description Protocol\n              (SDP)\", RFC 5576,
      DOI 10.17487/RFC5576, June 2009,\n              <http://www.rfc-editor.org/info/rfc5576>.\n
      \  [RFC6190]  Wenger, S., Wang, Y., Schierl, T., and A. Eleftheriadis,\n              \"RTP
      Payload Format for Scalable Video Coding\", RFC 6190,\n              DOI 10.17487/RFC6190,
      May 2011,\n              <http://www.rfc-editor.org/info/rfc6190>.\n   [RFC6928]
      \ Chu, J., Dukkipati, N., Cheng, Y., and M. Mathis,\n              \"Increasing
      TCP's Initial Window\", RFC 6928,\n              DOI 10.17487/RFC6928, April
      2013,\n              <http://www.rfc-editor.org/info/rfc6928>.\n   [RFC7022]
      \ Begen, A., Perkins, C., Wing, D., and E. Rescorla,\n              \"Guidelines
      for Choosing RTP Control Protocol (RTCP)\n              Canonical Names (CNAMEs)\",
      RFC 7022, DOI 10.17487/RFC7022,\n              September 2013, <http://www.rfc-editor.org/info/rfc7022>.\n
      \  [RFC7160]  Petit-Huguenin, M. and G. Zorn, Ed., \"Support for Multiple\n
      \             Clock Rates in an RTP Session\", RFC 7160,\n              DOI
      10.17487/RFC7160, April 2014,\n              <http://www.rfc-editor.org/info/rfc7160>.\n
      \  [RFC7667]  Westerlund, M. and S. Wenger, \"RTP Topologies\", RFC 7667,\n
      \             DOI 10.17487/RFC7667, November 2015,\n              <http://www.rfc-editor.org/info/rfc7667>.\n
      \  [SDP-BUNDLE]\n              Holmberg, C., Alvestrand, H., and C. Jennings,\n
      \             \"Negotiating Media Multiplexing Using the Session\n              Description
      Protocol (SDP)\", Work in Progress,\n              draft-ietf-mmusic-sdp-bundle-negotiation-36,
      October 2016.\n   [Sim88]    Westerlund, M., \"SIMULATION RESULTS FOR MULTI-STREAM\",\n
      \             IETF 88 Proceedings, November 2013,\n              <https://www.ietf.org/proceedings/88/slides/\n
      \             slides-88-avtcore-0.pdf>.\n   [Sim92]    Westerlund, M., Lennox,
      J., Perkins, C., and Q. Wu,\n              \"Changes in RTP Multi-stream\",
      IETF 92 Proceedings, March\n              2015, <https://www.ietf.org/proceedings/92/slides/\n
      \             slides-92-avtcore-0.pdf>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Acknowledgments\n   The authors like to thank Harald Alvestrand and everyone
    else who has\n   been involved in the development of this document.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Jonathan Lennox\n   Vidyo, Inc.\n   433 Hackensack Avenue\n
    \  Seventh Floor\n   Hackensack, NJ  07601\n   United States of America\n   Email:
    jonathan@vidyo.com\n   Magnus Westerlund\n   Ericsson\n   Farogatan 2\n   SE-164
    80 Kista\n   Sweden\n   Phone: +46 10 714 82 87\n   Email: magnus.westerlund@ericsson.com\n
    \  Qin Wu\n   Huawei\n   101 Software Avenue, Yuhua District\n   Nanjing, Jiangsu
    210012\n   China\n   Email: bill.wu@huawei.com\n   Colin Perkins\n   University
    of Glasgow\n   School of Computing Science\n   Glasgow  G12 8QQ\n   United Kingdom\n
    \  Email: csp@csperkins.org\n"
  title: Authors' Addresses
