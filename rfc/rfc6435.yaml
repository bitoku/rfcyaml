- title: __initial_text__
  contents:
  - '      MPLS Transport Profile Lock Instruct and Loopback Functions

    '
- title: Abstract
  contents:
  - "Abstract\n   Two useful Operations, Administration, and Maintenance (OAM)\n \
    \  functions in a transport network are \"lock\" and \"loopback\".  The lock\n\
    \   function enables an operator to lock a transport path such that it\n   does\
    \ not carry client traffic, but can continue to carry OAM messages\n   and may\
    \ carry test traffic.  The loopback function allows an operator\n   to set a specific\
    \ node on the transport path into loopback mode such\n   that it returns all received\
    \ data.\n   This document specifies the lock function for MPLS networks and\n\
    \   describes how the loopback function operates in MPLS networks.\n   This document\
    \ updates Sections 7.1.1 and 7.1.2 of RFC 6371.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6435.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Two useful Operations, Administration, and Maintenance (OAM)\n\
    \   functions in a transport network are \"lock\" and \"loopback\".  This\n  \
    \ document discusses these functions in the context of MPLS networks.\n   -  The\
    \ lock function enables an operator to lock a transport path\n      such that\
    \ it does not carry client traffic.  As per RFC 5860 [1],\n      lock is an administrative\
    \ state in which it is expected that no\n      client traffic may be carried.\
    \  However, test traffic and OAM\n      messages can still be mapped onto the\
    \ locked transport path.  The\n      lock function may be applied to the Label\
    \ Switched Paths (LSPs),\n      Pseudowires (PWs) (including multi-segment Pseudowires)\
    \ (MS-PWs),\n      and bidirectional MPLS Sections as defined in RFC 5960 [9]).\n\
    \   -  The loopback function allows an operator to set a specific node on\n  \
    \    a transport path into loopback mode such that it returns all\n      received\
    \ data.  Loopback can be applied at a Maintenance Entity\n      Group End Point\
    \ (MEP) or a Maintenance Entity Group Intermediate\n      Point (MIP) on a co-routed\
    \ bidirectional LSP, on a PW, or on a\n      bidirectional MPLS Section.  It can\
    \ also be applied at a MEP on an\n      associated bidirectional LSP.\n      Loopback\
    \ is used to test the integrity of the transport path to\n      and from the node\
    \ that is performing loopback.  It requires that\n      the transport path be\
    \ locked and that a MEP on the transport path\n      send test data that it also\
    \ validates on receipt.\n   This document specifies the lock function for MPLS\
    \ networks and\n   describes how the loopback function operates in MPLS networks.\n"
- title: 1.1.  Updates RFC 6371
  contents:
  - "1.1.  Updates RFC 6371\n   This document updates Sections 7.1.1 and 7.1.2 of\
    \ RFC 6371 [6].\n   The framework in RFC 6371 makes the assumption that the Lock\
    \ Instruct\n   message is used to independently enable locking and requires a\n\
    \   response message.\n   The mechanism defined in this document requires that\
    \ when a lock\n   instruction is sent by management to both ends of the locked\n\
    \   transport path, the Lock Instruct message does not require a\n   response.\n"
- title: 2.  Terminology and Conventions
  contents:
  - '2.  Terminology and Conventions

    '
- title: 2.1.  Conventions Used in This Document
  contents:
  - "2.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [2].\n"
- title: 2.2.  Acronyms and Terms
  contents:
  - "2.2.  Acronyms and Terms\n   ACH: Associated Channel Header\n   LI: Lock Instruct\n\
    \   MEG: Maintenance Entity Group\n   MEP: Maintenance Entity Group End Point\n\
    \   MIP: Maintenance Entity Group Intermediate Point\n   MPLS-TP: MPLS Transport\
    \ Profile\n   NMS: Network Management System\n   TLV: Type Length Value\n   Transport\
    \ path: MPLS-TP LSP or PW\n   TTL: Time To Live\n"
- title: 3.  Lock Function
  contents:
  - "3.  Lock Function\n   Lock is used to request that a MEP take a transport path\
    \ out of\n   service for administrative reasons.  For example, Lock can be used\
    \ to\n   allow some form of maintenance to be done for a transport path.  Lock\n\
    \   is also a prerequisite of the loopback function described in Section\n   4.\
    \  The NMS or a management process initiates a Lock by sending a\n   Lock command\
    \ to a MEP.  The MEP takes the transport path out of\n   service, that is, it\
    \ stops injecting or forwarding traffic onto the\n   transport path.\n   To properly\
    \ lock a transport path (for example, to ensure that a\n   loopback test can be\
    \ performed), both directions of the transport\n   path must be taken out of service;\
    \ therefore, a Lock command is sent\n   to the MEPs at both ends of the path.\
    \  This ensures that no traffic\n   is sent in either direction.  Thus, the lock\
    \ function can be realized\n   entirely using the management plane.\n   However,\
    \ dispatch of messages in the management plane to the two MEPs\n   may present\
    \ coordination challenges.  It is desirable that the lock\n   be achieved in a\
    \ coordinated way within a tight window, and this may\n   be difficult with a\
    \ busy management plane.  In order to provide\n   additional coordination, an\
    \ LI OAM message can also be sent.  A MEP\n   locks a transport path when it receives\
    \ a command from a management\n   process or when it receives an LI message as\
    \ described in Section 6.\n   This document defines an LI message for MPLS OAM.\
    \  The LI message is\n   based on a new ACH Type as well as an existing TLV. \
    \ This is a common\n   mechanism applicable to lock LSPs, PWs, and bidirectional\
    \ MPLS\n   Sections.\n"
- title: 4.  Loopback Function
  contents:
  - "4.  Loopback Function\n   This section provides a description of the loopback\
    \ function within\n   an MPLS network.  This function is achieved through management\n\
    \   commands, so there is no protocol specification necessary.  However,\n   the\
    \ loopback function is dependent on the lock function, so it is\n   appropriate\
    \ to describe it in this document.\n   The loopback function is used to test the\
    \ integrity of a transport\n   path from a MEP up any other node in the same MEG.\
    \  This is achieved\n   by setting the target node into loopback mode, and transmitting\
    \ a\n   pattern of test data from the MEP.  The target node loops all\n   received\
    \ data back toward the originator, and the MEP extracts the\n   test data and\
    \ compares it with what it sent.\n   Loopback is a function that enables a receiving\
    \ MEP or MIP to return\n   traffic to the sending MEP when in the loopback state.\
    \  This state\n   corresponds to the situation where, at a given node, a forwarding\n\
    \   plane loop is configured, and the incoming direction of a transport\n   path\
    \ is cross-connected to the outgoing reverse direction.\n   Therefore, except\
    \ in the case of early TTL expiry, traffic sent by\n   the source will be received\
    \ by that source.\n   Data-plane loopback is an out-of-service function, as required\
    \ in\n   Section 2.2.5 of RFC 5860 [1].  This function loops back all traffic\n\
    \   (including user data and OAM).  The traffic can be originated from\n   one\
    \ internal point at the ingress of a transport path within an\n   interface or\
    \ inserted from an input port of an interface using\n   external test equipment.\
    \  The traffic is looped back unmodified\n   (other than normal per-hop processing\
    \ such as TTL decrement) in the\n   direction of the point of origin by an interface\
    \ at either an\n   intermediate node or a terminating node.\n   It should be noted\
    \ that the data-plane loopback function itself is\n   applied to data-plane loopback\
    \ points residing on different\n   interfaces from MIPs/MEPs.  All traffic (including\
    \ both payload and\n   OAM) received on the looped back interface is sent on the\
    \ reverse\n   direction of the transport path.\n   For data-plane loopback at\
    \ an intermediate point in a transport path,\n   the loopback needs to be configured\
    \ to occur at either the ingress or\n   egress interface.  This is done using\
    \ management.\n   The management plane can be used to configure the loopback function.\n\
    \   The management plane must ensure that the two MEPs are locked before\n   it\
    \ requests setting MEP or MIP in the loopback state.\n   The nature of test data\
    \ and the use of loopback traffic to measure\n   packet loss, delay, and delay\
    \ variation are outside the scope of this\n   document.\n"
- title: 4.1.  Operational Prerequisites
  contents:
  - "4.1.  Operational Prerequisites\n   Obviously, for the loopback function to operate,\
    \ there are several\n   prerequisites:\n   -  There must be a return path, so\
    \ the transport path under test must\n      be bidirectional.\n   -  The node\
    \ in loopback mode must be on both the forward and return\n      paths.  This\
    \ is possible for all MEPs and MIPs on a co-routed\n      bidirectional LSP, on\
    \ a PW, or on a bidirectional MPLS Section,\n      but it is only possible for\
    \ MEPs on associated bidirectional LSPs.\n   -  The transport path cannot deliver\
    \ client data when one of its\n      nodes is in loopback mode, so it is important\
    \ that the transport\n      path be locked before loopback is enabled.\n   - \
    \ Management-plane coordination between the node in loopback mode\n      and the\
    \ MEP sending test data is required.  The MEP must not send\n      test data until\
    \ loopback has been properly configured because this\n      would result in the\
    \ test data continuing toward the destination.\n   -  The TTL of the test packets\
    \ must be set sufficiently large to\n      account for both directions of the\
    \ transport path under test;\n      otherwise, the packets will not be returned\
    \ to the originating\n      MEP.\n   -  OAM messages intended for delivery to\
    \ nodes along the transport\n      path under test can be delivered by correct\
    \ TTL expiry.  However,\n      OAM messages cannot be delivered to points beyond\
    \ the loopback\n      node until the loopback condition is lifted.\n"
- title: 5.  Lock Instruct Message
  contents:
  - '5.  Lock Instruct Message

    '
- title: 5.1.  Message Identification
  contents:
  - "5.1.  Message Identification\n   The Lock Instruct message is carried in the\
    \ Generic ACH described in\n   [4].  It is identified by a new PW ACH Type of\
    \ 0x0026.\n"
- title: 5.2.  LI Message Format
  contents:
  - "5.2.  LI Message Format\n   The format of an LI message is shown below.\n   \
    \ 0                   1                   2                   3\n    0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Vers  | Reserved                              | Refresh Timer |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        MEP Source ID TLV                      |\n   ~  \
    \                                                             ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Figure 1: MPLS Lock Instruct Message Format\n   Version: The Version\
    \ number is currently 1.  (Note: the version\n   number is to be incremented whenever\
    \ a change is made that affects\n   the ability of an implementation to correctly\
    \ parse or process the\n   message.  These changes include any syntactic or semantic\
    \ changes\n   made to any of the fixed fields, or to any Type-Length-Value (TLV)\
    \ or\n   sub- TLV assignment or format that is defined at a certain version\n\
    \   number.  The version number may not need to be changed if an optional\n  \
    \ TLV or sub-TLV is added.)\n   Reserved: The Reserved field MUST be set to zero\
    \ on transmission and\n   SHOULD be ignored on receipt.\n   Refresh Timer: The\
    \ Refresh Timer is the maximum time between\n   successive LI messages specified\
    \ in seconds.  The default value is 1.\n   The value 0 is not permitted.  When\
    \ a lock is applied, a refresh\n   timer is chosen.  This value MUST NOT be changed\
    \ for the duration of\n   that lock.  A node receiving an LI message with a changed\
    \ refresh\n   timer MAY ignore the new value and continue to apply the old value.\n\
    \   MEP Source ID TLV: This is one of the three MEP Source ID TLVs\n   defined\
    \ in [3] and identifies the MEP that originated the LI message.\n"
- title: 6.  Operation of the Lock Function
  contents:
  - '6.  Operation of the Lock Function

    '
- title: 6.1.  Locking a Transport Path
  contents:
  - "6.1.  Locking a Transport Path\n   When a MEP receives a Lock command from an\
    \ NMS or through some other\n   management process, it MUST take the transport\
    \ path out of service.\n   That is, it MUST stop injecting or forwarding traffic\
    \ onto the LSP,\n   PW, or bidirectional Section that has been locked.\n   If\
    \ rapid coordination of lock state is to be achieved (as described\n   in Section\
    \ 3) then as soon as the transport path has been locked, the\n   MEP MUST send\
    \ an LI message targeting the MEP at the other end of the\n   locked transport\
    \ path. In this case, the source MEP MUST set the\n   Refresh Timer value in the\
    \ LI message and MUST retransmit the LI\n   message at the frequency indicated\
    \ by the value set.\n   When locking a transport path, the NMS or management process\
    \ is\n   required to send a Lock command to both ends of the transport path.\n\
    \   Thus, a MEP may receive either the management command or an LI\n   message\
    \ first.  A MEP MUST take the transport path out of service\n   immediately in\
    \ either case, but sends LI messages itself after it has\n   received a management\
    \ Lock command.  Thus, a MEP is locked if either\n   Lock was requested by management\
    \ (and, as a result, the MEP is\n   sending LI messages) or it is receiving LI\
    \ messages from the remote\n   MEP.\n   Note that a MEP that receives an LI message\
    \ MUST identify the correct\n   transport path and validate the message.  The\
    \ label stack on the\n   received message is used to identify the transport path\
    \ to be locked:\n   -  If no matching label binding exists, then there is no\n\
    \      corresponding transport path and the received LI message is in\n      error.\n\
    \   -  If the transport path can be identified, but there is no return\n     \
    \ path (for example, the transport path was unidirectional) then\n      (obviously)\
    \ the receiving MEP cannot apply a lock to the return\n      path.\n   -  If the\
    \ transport path is suitable for locking but the Source MEP-\n      ID identifies\
    \ an unexpected MEP for the MEG to which the receiving\n      MEP belongs, the\
    \ received LI message is in error.\n   When an errored LI message is received,\
    \ the receiving MEP MUST NOT\n   apply a lock.  A MEP receiving errored LI messages\
    \ SHOULD perform\n   local diagnostic actions (such as counting the messages)\
    \ and MAY log\n   the messages.\n   A MEP keeps a transport path locked as long\
    \ as it is either receiving\n   the periodic LI messages or has an in-force Lock\
    \ command from\n   management (see Section 6.2 for an explanation of unlocking\
    \ a MEP).\n   Note that in some scenarios (such as the use of loopback as described\n\
    \   in Section 4), LI messages will not continue to be delivered on a\n   locked\
    \ transport path.  This is why a transport path is considered\n   locked while\
    \ there is an in-force Lock command from a management\n   process regardless of\
    \ whether LI messages are being received.\n"
- title: 6.2.  Unlocking a Transport Path
  contents:
  - "6.2.  Unlocking a Transport Path\n   Unlock is used to request that a MEP bring\
    \ the previously locked\n   transport path back in service.\n   When a MEP receives\
    \ an Unlock command from a management process, it\n   MUST cease sending LI messages.\
    \  However, as described in Section\n   6.1, if the MEP is still receiving LI\
    \ messages, the transport path\n   MUST remain out of service.  Thus, to unlock\
    \ a transport path, the\n   management process has to send an Unlock command to\
    \ the MEPs at both\n   ends.\n   When a MEP has been unlocked and has not received\
    \ an LI message for a\n   multiple of 3.5 times the Refresh Timer on the LI message\
    \ (or has\n   never received an LI message), the MEP unlocks the transport path\
    \ and\n   puts it back into service.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   MPLS-TP is a subset of MPLS and builds upon many\
    \ of the aspects of\n   the security model of MPLS.  MPLS networks make the assumption\
    \ that\n   it is very hard to inject traffic into a network, and it is equally\n\
    \   hard to cause traffic to be directed outside the network.  For more\n   information\
    \ on the generic aspects of MPLS security, see [7].\n   This document describes\
    \ a protocol carried in the G-ACh [4], so it is\n   dependent on the security\
    \ of the G-ACh, itself.  The G-ACh is a\n   generalization of the Pseudowire Associated\
    \ Channel defined in [8].\n   Thus, this document relies heavily on the security\
    \ mechanisms\n   provided for the Associated Channel as described in [4] and [8].\n\
    \   A specific concern for the G-ACh is that is can be used to provide a\n   covert\
    \ channel.  This problem is wider than the scope of this\n   document and does\
    \ not need to be addressed here, but it should be\n   noted that the channel provides\
    \ end-to-end connectivity and SHOULD\n   NOT be policed by transit nodes.  Thus,\
    \ there is no simple way to\n   prevent traffic from being carried in the G-ACh\
    \ between consenting\n   nodes.\n   A good discussion of the data-plane security\
    \ of an associated channel\n   may be found in [5].  That document also describes\
    \ some mitigation\n   techniques.\n   It should be noted that the G-ACh is essentially\
    \ connection-oriented,\n   so injection or modification of control messages specified\
    \ in this\n   document requires the subversion of a transit node.  Such subversion\n\
    \   is generally considered hard in MPLS networks, and impossible to\n   protect\
    \ against at the protocol level.  Management-level techniques\n   are more appropriate.\n"
- title: 8.  IANA Considerations
  contents:
  - '8.  IANA Considerations

    '
- title: 8.1.  Pseudowire Associated Channel Type
  contents:
  - "8.1.  Pseudowire Associated Channel Type\n   LI OAM requires a unique Associated\
    \ Channel Type that has been\n   assigned by IANA in the \"Pseudowire Associated\
    \ Channel Types\"\n   registry.\n   Registry:\n      Value        Description\
    \              TLV Follows  Reference\n      -----------  -----------------------\
    \  -----------  ---------\n      0x0026       LI                       No    \
    \       [RFC6435]\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   The authors would like to thank Loa Andersson, Yoshinori\
    \ Koike,\n   Alessandro D'Alessandro Gerardo, Shahram Davari, Greg Mirsky, Yaacov\n\
    \   Weingarten, Liu Guoman, Matthew Bocci, Adrian Farrel, and Jia He for\n   their\
    \ valuable comments.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [1] Vigoureux, M., Ed., Ward, D., Ed., and M.\
    \ Betts, Ed.,\n       \"Requirements for Operations, Administration, and Maintenance\n\
    \       (OAM) in MPLS Transport Networks\", RFC 5860, May 2010.\n   [2] Bradner,\
    \ S., \"Key words for use in RFCs to Indicate Requirement\n       Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [3] Allan, D., Ed., Swallow, G., Ed., and J. Drake,\
    \ Ed., \"Proactive\n       Connectivity Verification, Continuity Check, and Remote\
    \ Defect\n       Indication for the MPLS Transport Profile\", RFC 6428, November\n\
    \       2011.\n   [4] Bocci, M., Ed., Vigoureux, M., Ed., and S. Bryant, Ed.,\
    \ \"MPLS\n       Generic Associated Channel\", RFC 5586, June 2009.\n   [5] Nadeau,\
    \ T., Ed., and C. Pignataro, Ed., \"Pseudowire Virtual\n       Circuit Connectivity\
    \ Verification (VCCV): A Control Channel for\n       Pseudowires\", RFC 5085,\
    \ December 2007.\n   [6] Busi, I., Ed., and D. Allan, Ed., \"Operations, Administration,\n\
    \       and Maintenance Framework for MPLS-Based Transport Networks\", RFC\n \
    \      6371, September 2011.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [7] Fang, L., Ed., \"Security Framework for\
    \ MPLS and GMPLS Networks\",\n       RFC 5920, July 2010.\n   [8] Bryant, S.,\
    \ Swallow, G., Martini, L., and D. McPherson,\n       \"Pseudowire Emulation Edge-to-Edge\
    \ (PWE3) Control Word for Use\n       over an MPLS PSN\", RFC 4385, February 2006.\n\
    \   [9] Frost, D., Ed., Bryant, S., Ed., and M. Bocci, Ed., \"MPLS\n       Transport\
    \ Profile Data Plane Architecture\", RFC 5960, August\n       2010.\n"
- title: Contributing Authors
  contents:
  - "Contributing Authors\n   George Swallow\n   Cisco Systems, Inc.\n   EMail: swallow@cisco.com\n\
    \   David Ward\n   Juniper Networks.\n   EMail: dward@juniper.net\n   Stewart\
    \ Bryant\n   Cisco Systems, Inc.\n   EMail: stbryant@cisco.com\n   Carlos Pignataro\n\
    \   Cisco Systems, Inc.\n   EMail: cpignata@cisco.com\n   Eric Osborne\n   Cisco\
    \ Systems, Inc.\n   EMail: eosborne@cisco.com\n   Nabil Bitar\n   Verizon.\n \
    \  EMail: nabil.bitar@verizon.com\n   Italo Busi\n   Alcatel-Lucent.\n   EMail:\
    \ italo.busi@alcatel-lucent.com\n   Lieven Levrau\n   Alcatel-Lucent.\n   EMail:\
    \ lieven.levrau@alcatel-lucent.com\n   Laurent Ciavaglia\n   Alcatel-Lucent.\n\
    \   EMail: laurent.ciavaglia@alcatel-lucent.com\n   Bo Wu\n   ZTE Corporation.\n\
    \   EMail: wu.bo@zte.com.cn\n   Jian Yang\n   ZTE Corporation.\n   EMail: yang_jian@zte.com.cn\n"
- title: Editors' Addresses
  contents:
  - "Editors' Addresses\n   Sami Boutros\n   Cisco Systems, Inc.\n   EMail: sboutros@cisco.com\n\
    \   Siva Sivabalan\n   Cisco Systems, Inc.\n   EMail: msiva@cisco.com\n   Rahul\
    \ Aggarwal\n   Arktan, Inc\n   EMail: raggarwa_1@yahoo.com\n   Martin Vigoureux\n\
    \   Alcatel-Lucent.\n   EMail: martin.vigoureux@alcatel-lucent.com\n   Xuehui\
    \ Dai\n   ZTE Corporation.\n   EMail: dai.xuehui@zte.com.cn\n"
