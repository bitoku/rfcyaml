Abstract This document defines a collection of YANG definitions for configuring SNMP engines.
This document defines a YANG [RFC6020] data model for the configuration of SNMP engines.
The configuration model is consistent with the MIB modules defined in [RFC3411], [RFC3412], [RFC3413], [RFC3414], [RFC3415], [RFC3417], [RFC3418], [RFC3419], [RFC3584], [RFC3826], [RFC5591], [RFC5592], and [RFC6353] but takes advantage of YANG's ability to define hierarchical configuration data models.
The configuration data model in particular has been designed for SNMP deployments where SNMP runs in read only mode and the Network Configuration Protocol (NETCONF) is used to configure the SNMP agent.
Nevertheless, the data model allows implementations that support write access both via SNMP and NETCONF in order to interwork with SNMP management applications manipulating SNMP agent configuration using SNMP.
Further details can be found in Section 3.
The YANG data model focuses on configuration.
Operational state objects are not explicitly modeled.
The operational state of an SNMP agent can be accessed either directly via SNMP or, alternatively, via NETCONF using the read only translation of the relevant SNMP MIB modules into YANG modules [RFC6643].
This document also defines a YANG data model for mapping an X.509 certificate to a name.
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
In order to preserve the modularity of SNMP, the YANG configuration data model is organized in a set of YANG submodules, all sharing the same module namespace.
This allows adding configuration support for additional SNMP features while keeping the number of namespaces that have to be dealt with down to a minimum.
Tree Diagrams A simplified graphical representation of the data model is used in this document.
Abbreviations before data node names: "rw" means configuration (read write), and "ro" means state data (read only).
Most YANG nodes are mapped 1 1 to the corresponding MIB object.
The "reference" statement is used to indicate which corresponding MIB object the YANG node is mapped to.
When there is not a simple 1 1 mapping, the "description" statement explains the mapping.
The persistency models in SNMP and NETCONF are quite different.
In NETCONF, the persistency is defined by the datastore, whereas in SNMP, it is defined either explicitly in the data model or on a row  by row basis using the Textual Convention "StorageType".
Thus, in the YANG model defined here, the "StorageType" columns are not present.
For implementation guidelines, see Section 3.
In SNMP, row creation and deletion are controlled using the Textual Convention "RowStatus".
In NETCONF, creation and deletion are handled by the protocol, not in the data model.
Thus, in the YANG model defined here, the "RowStatus" columns are not present.
The submodule "ietf snmp common" defines a set of common typedefs and the top level container "snmp".
All configuration parameters defined in the other submodules are organized under this top level container.
The submodule "ietf snmp engine", which defines configuration parameters that are specific to SNMP engines, has the following structure:  rw snmp  rw engine  rw enabled?
engine id  rw enable authen traps?
The leaf "/snmp/engine/enabled" can be used to enable/disable an SNMP engine.
The list "/snmp/engine/listen" provides configuration of the transport endpoints the engine is listening to.
In this submodule, SNMP over UDP is defined.
The Secure Shell (SSH) Protocol, Transport Layer Security (TLS), and Datagram Transport Layer Security (DTLS) are also supported, defined in "ietf snmp ssh" (Section 2.13) and "ietf snmp tls" (Section 2.12), respectively.
The "transport" choice is expected to be augmented for other transports.
The "/snmp/engine/version" container can be used to enable/disable the different message processing models [RFC3411].
The submodule "ietf snmp target", which defines configuration parameters that correspond to the objects in SNMP TARGET MIB, has the following structure:
An entry in the list "/snmp/target" corresponds to an "snmpTargetAddrEntry".
The "snmpTargetAddrTDomain" and "snmpTargetAddrTAddress" objects are mapped to transport specific YANG nodes.
Each transport is configured as a separate case in the "transport" choice.
In this submodule, SNMP over UDP is defined.
TLS and DTLS are also supported, defined in "ietf snmp tls" (Section 2.12).
The "transport" choice is expected to be augmented for other transports.
An entry in the list "/snmp/target params" corresponds to an "snmpTargetParamsEntry".
This list contains a choice "params", which is augmented by submodules specific to the security model, currently, "ietf snmp community" (Section 2.8), "ietf snmp usm" (Section 2.10), and "ietf snmp tls" (Section 2.12).
The submodule "ietf snmp notification", which defines configuration parameters that correspond to the objects in SNMP NOTIFICATION MIB, has the following structure:  rw snmp
identifier  rw exclude    snmp:wildcard object identifier
This submodule also augments the "target params" list defined in the "ietf snmp target" submodule (Section 2.5) with one leaf:
An entry in the list "/snmp/notify" corresponds to an "snmpNotifyEntry".
An entry in the list "/snmp/notify filter profile" corresponds to an "snmpNotifyFilterProfileEntry".
In the MIB, there is a sparse relationship between "snmpTargetParamsTable" and "snmpNotifyFilterProfileTable".
In the YANG model, this sparse relationship is represented with a leafref leaf "notify filter profile" in the "/snmp/target params" list, which refers to an entry in the "/snmp/notify filter profile" list.
The "snmpNotifyFilterTable" is represented as a list "filter" within the "/snmp/notify filter profile" list.
This submodule defines the feature "notification filter".
A server implements this feature if it supports SNMP notification filtering [RFC3413].
The submodule "ietf snmp proxy", which defines configuration parameters that correspond to the objects in SNMP PROXY MIB, has the following structure:  rw snmp  rw proxy  [name]  rw name
engine id  rw context name?
identifier  rw single target out?
identifier  rw multiple target out?
identifier An entry in the list "/snmp/proxy" corresponds to an "snmpProxyEntry".
This submodule defines the feature "proxy".
A server implements this feature if it can act as an SNMP proxy [RFC3413].
The submodule "ietf snmp community", which defines configuration parameters that correspond to the objects in SNMP COMMUNITY MIB, has the following structure:  rw snmp  rw community  [index]  rw index
context name  rw target tag?
snmp:identifier This submodule also augments the "/snmp/target params/params" choice with nodes for the Community based Security Model used by SNMPv1 and SNMPv2c:
rw target  [name]  rw mms?
An entry in the list "/snmp/community" corresponds to an "snmpCommunityEntry".
When a case "v1" or "v2c" is chosen, it implies an snmpTargetParamsMPModel 0
(SNMPv1) or 1 (SNMPv2), and an snmpTargetParamsSecurityModel 1 (SNMPv1) or 2 (SNMPv2), respectively.
Both cases imply an snmpTargetParamsSecurityLevel of noAuthNoPriv. 2.9.
View Based Access Control Model Configuration
The submodule "ietf snmp vacm", which defines configuration parameters that correspond to the objects in SNMP VIEW BASED ACM MIB, has the following structure:  rw snmp
rw vacm  rw group  [name]
[context security model security level]
identifier  rw exclude    snmp:wildcard object identifier The "vacmSecurityToGroupTable" and "vacmAccessTable" are mapped to a structure of nested lists in the YANG model.
Groups are defined in the list "/snmp/vacm/group", and for each group, there is a sublist "member" that maps to "vacmSecurityToGroupTable" and a sublist "access" that maps to "vacmAccessTable".
MIB views are defined in the list "/snmp/vacm/view", and for each MIB view, there is a leaf list of included subtree families and a leaf  list of excluded subtree families.
This is more compact and thus a more readable representation of the "vacmViewTreeFamilyTable".
User Based Security Model Configuration
This submodule also augments the "/snmp/target params/params" choice with nodes for the SNMP User based Security Model.
rw usm  rw user name
rw security level    security level
In the MIB, there is a single table with local and remote users, indexed by the engine ID and user name.
In the YANG model, there is one list of local users and a nested list of remote users.
In the MIB, there are several objects related to changing the authentication and privacy keys.
These objects are not present in the YANG model.
However, the localized key can be changed.
This implies that if the engine ID is changed, all users keys need to be changed as well.
The submodule "ietf snmp tsm", which defines configuration parameters that correspond to the objects in SNMP TSM MIB, has the following structure:
This submodule also augments the "/snmp/target params/params" choice with nodes for the SNMP Transport Security Model.
rw security level    security level
This submodule defines the feature "tsm".
A server implements this feature if it supports the Transport Security Model (TSM)
Transport Layer Security Transport Model Configuration
The submodule "ietf snmp tls", which defines configuration parameters that correspond to the objects in SNMP TLS TM MIB, has the following structure:  rw snmp ...
The "{common (d)tls transport params}" are:  rw ip?
port number  rw client fingerprint?
tls fingerprint  rw server fingerprint?
tls fingerprint  rw server identity?
This submodule also augments the "/snmp/engine/listen/transport" choice with objects for the D(TLS) transport endpoints:
rw snmp  rw engine ...
This submodule defines the feature "tlstm".
A server implements this feature if it supports the Transport Layer Security (TLS) Transport Model (TLSTM)
Secure Shell Transport Model Configuration
The submodule "ietf snmp ssh", which defines configuration parameters that correspond to the objects in SNMP SSH TM MIB, has the following structure:  rw snmp ...
It also augments the "/snmp/engine/listen/transport" choice with objects for the SSH transport endpoints:
rw snmp  rw engine ...
This submodule defines the feature "sshtm".
A server implements this feature if it supports the Secure Shell Transport Model (SSHTM) [RFC5592].
This section describes some challenges for implementations that support both the YANG models defined in this document and either read write or read only SNMP access to the same data, using the standard MIB modules.
As described in Section 2.2, the persistency models in NETCONF and SNMP are quite different.
This poses a challenge for an implementation to support both NETCONF and SNMP access to the same data, in particular if the data is writable over both protocols.
Specifically, the configuration data may exist in some combination of the three NETCONF configuration datastores, and this data must be mapped to rows in the SNMP tables, in some SNMP contexts, with proper values for the StorageType columns.
This problem is not new; it has been handled in many implementations that support configuration of the SNMP engine over a command line interface (CLI), which normally have a persistency model similar to NETCONF.
Since there is not one solution that works for all cases, this document does not provide a recommended solution.
Instead, some of the challenges involved are described below.
Supporting read only SNMP Access
If a device implements only :writable running, it is trivial to map the contents of "running" to data in the SNMP tables, where all instances of the StorageType columns have the value "nonVolatile".
If a device implements :candidate but not :startup, the implementation may choose to not expose the contents of the "candidate" datastore over SNMP and map the contents of "running" as described above.
As an option, the contents of "candidate" might be accessible in a separate SNMP context.
If a device implements :startup, the handling of StorageType becomes more difficult.
Since the contents of "running" and "startup" might differ, data in "running" cannot automatically be mapped to instances with StorageType "nonVolatile".
If a particular entry exists in "running" but not in "startup", its StorageType should be "volatile".
If a particular entry exists in "startup" but not "running", it should not be mapped to an SNMP instance, at least not in the default SNMP context.
Supporting read write SNMP Access
If the implementation supports read write access to data over SNMP, and specifically creation of table rows, special attention has to be given to the handling of the RowStatus and StorageType columns.
The problem is to determine which table rows to store in the configuration datastores and which configuration datastore is appropriate for each row.
The SNMP tables contain a mix of configured data and operational state, and only rows with an "active" RowStatus column should be stored in a configuration datastore.
If a device implements only :writable running, "active" rows with a "nonVolatile" StorageType column can be stored in "running".
Rows with a "volatile" StorageType column are operational state.
If a device implements :candidate but not :writable running, all configuration changes typically go through the "candidate", even if they are done over SNMP.
An implementation might have to perform some automatic commit of the "candidate" when data is written over SNMP, since there is no explicit "commit" operation in SNMP.
If a device implements :startup, "nonVolatile" rows cannot just be written to "running"; they must also be copied into "startup".
"volatile" rows may be treated as operational state and not copied to any datastore, or they may be copied into "running".
Cooperating SNMP management applications may use spin lock objects (snmpTargetSpinLock [RFC3413], usmUserSpinLock [RFC3414], vacmViewSpinLock [RFC3415]) to coordinate concurrent write requests.
Implementations supporting modifications of MIB objects protected by a spin lock via NETCONF should ensure that the spin lock objects are properly incremented whenever objects are changed via NETCONF.
This allows cooperating SNMP management applications to discover that concurrent modifications are taking place.
Module 'ietf x509 cert to name'
This YANG module imports typedefs from [RFC6991].
file "ietf x509 cert to name.yang" module ietf x509 cert to name { namespace "urn:
yang:ietf x509 cert to name"; prefix x509c2n; import ietf yang types { prefix yang;
} organization "IETF NETMOD (
NETCONF Data Modeling Language) Working Group"; contact
>"; description "This module contains a collection of YANG definitions for extracting a name from an X.509 certificate.
The algorithm used to extract a name from an X.509 certificate was first defined in RFC 6353.
Copyright (c) 2014 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 7407; see the RFC itself for full legal notices."
Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP)"; revision 2014
12 10 { description "Initial revision."
A tls fingerprint value is composed of a 1 octet hashing algorithm identifier followed by the fingerprint value.
The first octet value identifying the hashing algorithm is taken from the IANA 'TLS HashAlgorithm Registry' (RFC 5246).
The remaining octets are filled using the results of the hashing algorithm."; reference "RFC 6353: Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
; } identity specified { base cert to name; description "Directly specifies the name to be used for the certificate.
The value of the leaf 'name' in the cert to name list is used."
Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
The local part of the rfc822Name is passed unaltered, but the host part of the name must be passed in lowercase.
For example, the rfc822Name field FooBar@Example.
COM is mapped to name FooBar@example.com."
Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
This mapping results in a 1:1 correspondence between subjectAltName dNSName values and the name values."
Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
2) for IPv6 addresses, the value is converted into a 32 character, all lowercase hexadecimal string without any colon separators.
This mapping results in a 1:1 correspondence between subjectAltName iPAddress values and the name values."
Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
; } identity san any { base cert to name
The first matching subjectAltName value found in the certificate of the above types MUST be used when deriving the name.
The mapping algorithm specified in the 'Algorithm' column MUST be used to derive the name.
This mapping results in a 1:1 correspondence between subjectAltName values and name values.
The three sub mapping algorithms produced by this combined algorithm cannot produce conflicting results between themselves."; reference "RFC 6353: Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
The usage of CommonNames is deprecated, and users are encouraged to use subjectAltName mapping methods instead.
This mapping results in a 1:1 correspondence between certificate CommonName values and name values."
Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
Modules that use this grouping should describe how the resulting name is used."
; list cert to name { key id; description "This list defines how certificates are mapped to names.
The name is derived by considering each cert to name list entry in order.
The cert to name entry's fingerprint determines whether the list entry is a match: 1)
If the cert to name list entry's fingerprint value matches that of the presented certificate, then consider the list entry a successful match.
If the cert to name list entry's fingerprint value matches that of a locally held copy of a trusted CA certificate, and that CA certificate was part of the CA certificate chain to the presented certificate, then consider the list entry a successful match.
Once a matching cert to name list entry has been found, the map type is used to determine how the name associated with the certificate should be determined.
See the map type leaf's description for details on determining the name value.
If it is impossible to determine a name from the cert to name list entry's data combined with the data presented in the certificate, then additional cert to name list entries MUST be searched to look for another potential match.
Security administrators are encouraged to make use of certificates with subjectAltName fields that can be mapped to names so that a single root CA certificate can allow all child certificates' subjectAltName fields to map directly to a name via a 1:1 transformation."; reference "RFC 6353: Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
leaf id { type uint32; description "The id specifies the order in which the entries in the cert to name list are searched.
Entries with lower numbers are searched first."
Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
tls fingerprint; mandatory true; description "Specifies a value with which the fingerprint of the full certificate presented by the peer is compared.
If the fingerprint of the full certificate presented by the peer does not match the fingerprint configured, then the entry is skipped, and the search for a match continues."
Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
; } mandatory true; description "Specifies the algorithm used to map the certificate presented by the peer to a name.
Mappings that need additional configuration objects should use the 'when' statement to make them conditional based on the map type."
Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
; description "Directly specifies the NETCONF username when the map type is 'specified'.
Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
SNMP TLS TM MIB.snmpTlstmCertToTSNData"; }
Module 'ietf snmp' <CODE BEGINS>
module ietf snmp { namespace "urn:ietf:params:xml:
yang:ietf snmp"; prefix snmp; include ietf snmp common { revision date 2014 12 10; } include ietf snmp engine { revision date 2014 12 10; } include ietf snmp target { revision date 2014 12 10; } include ietf snmp notification { revision date 2014 12 10; } include ietf snmp proxy { revision date 2014 12 10; } include ietf snmp community { revision date 2014 12 10; } include ietf snmp usm { revision date 2014 12 10; } include ietf snmp tsm { revision date 2014 12 10; } include ietf snmp vacm { revision date 2014 12 10; } include ietf snmp tls { revision date 2014 12 10; } include ietf snmp ssh { revision date 2014 12 10; } organization "IETF NETMOD (NETCONF Data Modeling Language) Working Group"; contact
>"; description "This module contains a collection of YANG definitions for configuring SNMP engines.
Copyright (c) 2014 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 7407; see the RFC itself for full legal notices."
Submodule 'ietf snmp common' <CODE BEGINS>
" submodule ietf snmp common { belongs to ietf snmp { prefix snmp; } import ietf yang types { prefix yang; } organization "IETF NETMOD (NETCONF Data Modeling Language) Working Group"; contact
>"; description "This submodule contains a collection of common YANG definitions for configuring SNMP engines.
Copyright (c) 2014 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 7407; see the RFC itself for full legal notices."
/ typedef admin string { type string { length "0..255"
; } description "Represents SnmpAdminString as defined in RFC 3411.
Note that the size of an SnmpAdminString is measured in octets, not characters."
; reference "RFC 3411: An Architecture for Describing Simple Network Management Protocol (SNMP) Management Frameworks.
Identifiers are used to name items in the SNMP configuration datastore."
The context type represents an SNMP context name."
hex string { pattern '([0 9a
; } typedef tag value { type string { length "0..255
Note that the size of an SnmpTagValue is measured in octets, not characters."
; reference "RFC 3413: Simple Network Management Protocol (SNMP) Applications.
Submodule 'ietf snmp engine' <CODE BEGINS>
>"; description "This submodule contains a collection of YANG definitions for configuring SNMP engines.
Copyright (c) 2014 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 7407; see the RFC itself for full legal notices."
If the port is not configured, an engine that acts as a Command Responder uses port 161, and an engine that acts as a Notification Receiver uses port 162.";
The local SNMP engine's administratively assigned unique identifier.
If this leaf is not set, the device automatically calculates an engine ID, as described in RFC 3411.
A server MAY initialize this leaf with the automatically created value."
; reference "RFC 3411: An Architecture for Describing Simple Network Management Protocol (SNMP) Management Frameworks.
; } leaf enable authen traps { type boolean; description "Indicates whether the SNMP entity is permitted to generate authenticationFailure traps.
Submodule 'ietf snmp target' <CODE BEGINS>
file "ietf snmp target.yang" submodule ietf snmp target { belongs to ietf snmp { prefix snmp; } import ietf inet types { prefix inet; } include ietf snmp common; organization "IETF NETMOD (NETCONF Data Modeling Language) Working Group"; contact
>"; description "This submodule contains a collection of YANG definitions for configuring SNMP targets.
Copyright (c) 2014 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 7407; see the RFC itself for full legal notices."
; reference "RFC 3413: Simple Network Management Protocol (SNMP) Applications"; revision 2014 12 10 { description "Initial revision."
snmp { list target { key name; description "List of targets."
; reference "RFC 3413: Simple Network Management Protocol (SNMP) Applications.
SNMP TARGET MIB.snmpTargetAddrTable"; leaf name { type snmp:identifier; description "Identifies the target."; reference "RFC 3413: Simple Network Management Protocol (SNMP) Applications.
The snmpTargetAddrTDomain and snmpTargetAddrTAddress objects are mapped to transport specific YANG nodes.
Each transport is configured as a separate case in this choice.
Submodules providing configuration for additional transports are expected to augment this choice."
; reference "RFC 3413: Simple Network Management Protocol (SNMP) Applications.
; case udp { reference "RFC 3417: Transport Mappings for the Simple Network Management Protocol (SNMP).
RFC 3419: Textual Conventions for Transport Addresses.
TRANSPORT ADDRESS MIB.transportDomainUdpIpv4 TRANSPORT ADDRESS MIB.transportDomainUdpIpv4z TRANSPORT ADDRESS MIB.transportDomainUdpIpv6 TRANSPORT ADDRESS MIB.transportDomainUdpIpv6z"; container udp { leaf ip { type inet:ip address; mandatory true; reference "RFC 3413: Simple Network Management Protocol (SNMP).
; reference "RFC 3413: Simple Network Management Protocol (SNMP).
The value of this leaf must match the value of ../snmp:ip.
If ../snmp:ip contains an IPv4 address, this leaf must be less than or equal to 32.
If it contains an IPv6 address, it must be less than or equal to 128.
Note that the prefix length is currently only used by the Community based Security Model to filter incoming messages.
Furthermore, the prefix length filtering does not cover all possible filters supported by the corresponding MIB object."
; reference "RFC 3584: Coexistence between Version 1, Version 2, and Version 3 of the Internet standard Network Management Framework.
; reference "RFC 3413: Simple Network Management Protocol (SNMP).
Simple Network Management Protocol (SNMP).
Simple Network Management Protocol (SNMP).
Submodule 'ietf snmp notification' <CODE BEGINS>
>"; description "This submodule contains a collection of YANG definitions for configuring SNMP notifications.
Copyright (c) 2014 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 7407; see the RFC itself for full legal notices."
; reference "RFC 3413: Simple Network Management Protocol (SNMP) Applications"; revision 2014 12 10 { description "Initial revision."
Entries in this list are mapped 1 1 to entries in snmpNotifyTable, except that if an entry in snmpNotifyTable has an snmpNotifyTag for which no snmpTargetAddrEntry exists, then the snmpNotifyTable entry is not mapped to an entry in this list."
; reference "RFC 3413: Simple Network Management Protocol (SNMP).
SNMP NOTIFICATION MIB.snmpNotifyTable"; leaf name { type snmp:identifier; description "An arbitrary name for the list entry."; reference "RFC 3413: Simple Network Management Protocol (SNMP).
description "Target tag, selects a set of notification targets.
Implementations MAY restrict the values of this leaf to be one of the available values of /snmp/target/tag in a valid configuration."
; reference "RFC 3413: Simple Network Management Protocol (SNMP).
; reference "RFC 3413: Simple Network Management Protocol (SNMP).
The leaf /snmp/target/notify filter profile is used to associate a filter profile with a target.
If an entry in this list is referred to by one or more /snmp/target/notify filter profile items, each such notify filter profile is represented by one snmpNotifyFilterProfileEntry.
If an entry in this list is not referred to by any /snmp/target/notify filter profile, the entry is not mapped to snmpNotifyFilterProfileTable."
; reference "RFC 3413: Simple Network Management Protocol (SNMP).
SNMP NOTIFICATION MIB.snmpNotifyFilterTable"; leaf name { type snmp:identifier; description "Name of the filter profile."; reference "RFC 3413: Simple Network Management Protocol (SNMP).
Simple Network Management Protocol (SNMP).
snmp/snmp:target params { reference "RFC 3413: Simple Network Management Protocol (SNMP).
; reference "RFC 3413: Simple Network Management Protocol (SNMP).
Submodule 'ietf snmp proxy' <CODE BEGINS>
file "ietf snmp proxy.yang" submodule ietf snmp proxy {
>"; description "This submodule contains a collection of YANG definitions for configuring SNMP proxies.
Copyright (c) 2014 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 7407; see the RFC itself for full legal notices."
; reference "RFC 3413: Simple Network Management Protocol (SNMP) Applications"; revision 2014 12 10 { description "Initial revision."
snmp { if feature snmp:proxy; list proxy { key name; description "List of proxy parameters."; reference "RFC 3413: Simple Network Management Protocol (SNMP).
SNMP PROXY MIB.snmpProxyTable"; leaf name { type snmp:identifier; description "Identifies the proxy parameter entry."; reference "RFC 3413: Simple Network Management Protocol (SNMP).
engine id; mandatory true; reference "RFC 3413: Simple Network Management Protocol (SNMP).
Implementations MAY restrict the values of this leaf to be one of the available values of /snmp/target params/name in a valid configuration."
; reference "RFC 3413: Simple Network Management Protocol (SNMP).
/type   'write'"; type snmp:identifier; description "Implementations
MAY restrict the values of this leaf to be one of the available values of /snmp/target/name in a valid configuration."
; reference "RFC 3413: Simple Network Management Protocol (SNMP).
; reference "RFC 3413: Simple Network Management Protocol (SNMP).
Submodule 'ietf snmp community' <CODE BEGINS>
file "ietf snmp community.yang" submodule ietf snmp community { belongs to ietf snmp { prefix snmp; } import ietf netconf acm { prefix nacm; } include ietf snmp common; include ietf snmp target; include ietf snmp proxy; organization "IETF NETMOD (NETCONF Data Modeling Language) Working Group"; contact
>"; description "This submodule contains a collection of YANG definitions for configuring community based SNMP.
Copyright (c) 2014 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 7407; see the RFC itself for full legal notices."
; reference "RFC 3584: Coexistence between Version 1, Version 2, and Version 3 of the Internet standard Network Management Framework"; revision 2014
12 10 { description "Initial revision."
snmp { list community { key index; description "List of communities."
; reference "RFC 3584: Coexistence between Version 1, Version 2, and Version 3 of the Internet standard Network Management Framework.
SNMP COMMUNITY MIB.snmpCommunityTable"; leaf index { type snmp:identifier; description "Index into the community list."; reference "RFC 3584: Coexistence between Version 1, Version 2, and Version 3 of the Internet standard Network Management Framework.
deny all; description "The community name, specified as either a string or a binary value.
The binary name is used when the community name contains characters that are not legal in a string.
If not set, the value of 'security name' is operationally used as the snmpCommunityName."
; reference "RFC 3584: Coexistence between Version 1, Version 2, and Version 3 of the Internet standard Network Management Framework.
mandatory true; nacm:default deny all; description "The snmpCommunitySecurityName of this entry."; reference "RFC 3584: Coexistence between Version 1, Version 2, and Version 3 of the Internet standard Network Management Framework.
id { if feature snmp:proxy; type snmp:engine id; description "
If not set, the value of the local SNMP engine is operationally used by the device."
; reference "RFC 3584: Coexistence between Version 1, Version 2, and Version 3 of the Internet standard Network Management Framework.
Coexistence between Version 1, Version 2, and Version 3 of the Internet standard Network Management Framework.
Implementations MAY restrict the values of this leaf to be one of the available values of /snmp/target/tag in a valid configuration."
; reference "RFC 3584: Coexistence between Version 1, Version 2, and Version 3 of the Internet standard Network Management Framework.
Submodule 'ietf snmp vacm' <CODE BEGINS>
file "ietf snmp vacm.yang" submodule ietf snmp
>"; description "This submodule contains a collection of YANG definitions for configuring the View based Access Control Model (VACM) of SNMP.
Copyright (c) 2014 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 7407; see the RFC itself for full legal notices."
; reference "RFC 3415: View based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP)"; revision 2014
12 10 { description "Initial revision."
This data model has a different structure than the MIB.
Groups are explicitly defined in this list, and group members are defined in the 'member' list (mapped to vacmSecurityToGroupTable), and access for the group is defined in the 'access' list (mapped to vacmAccessTable).
; reference "RFC 3415: View based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP).
SNMP VIEW BASED ACM MIB.vacmSecurityToGroupTable SNMP VIEW BASED
ACM MIB.vacmAccessTable"; leaf name { type group name; description "
The name of this VACM group."
; reference "RFC 3415: View based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP).
A specific combination of security name and security model MUST NOT be present in more than one group."
; reference "RFC 3415: View based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP).
SNMP VIEW BASED ACM MIB.vacmSecurityToGroupTable"; leaf security name { type snmp:security name; description "The securityName of a group member."
; reference "RFC 3415: View based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP).
; reference "RFC 3415: View based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP).
; reference "RFC 3415: View based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP).
ACM MIB.vacmAccessTable"; leaf context { type snmp:context name; description "The context (prefix) under which the access rights apply."; reference "RFC 3415
: View based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP).
SNMP VIEW BASED ACM MIB.vacmAccessContextPrefix
; reference "RFC 3415: View based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP).
SNMP VIEW BASED ACM MIB.vacmAccessSecurityModel";
} leaf security level { type snmp:security level; description "The minimum security level under which the access rights apply.";
View based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP).
; description "The name of the MIB view of the SNMP context authorizing read access.
If this leaf does not exist in a configuration, it maps to a zero length vacmAccessReadViewName.
Implementations MAY restrict the values of this leaf to be one of the available values of /snmp/vacm/view/name in a valid configuration."
; reference "RFC 3415: View based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP).
The name of the MIB view of the SNMP context authorizing write access.
If this leaf does not exist in a configuration, it maps to a zero length vacmAccessWriteViewName.
Implementations MAY restrict the values of this leaf to be one of the available values of /snmp/vacm/view/name in a valid configuration."
; reference "RFC 3415: View based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP).
If this leaf does not exist in a configuration, it maps to a zero length vacmAccessNotifyViewName.
Implementations MAY restrict the values of this leaf to be one of the available values of /snmp/vacm/view/name in a valid configuration."
; reference "RFC 3415: View based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP).
SNMP VIEW BASED ACM MIB.vacmAccessNotifyViewName"
View based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP).
SNMP VIEW BASED ACM MIB.vacmViewTreeFamilyTable"; leaf name { type view name; description "The name of this VACM MIB view."; reference "RFC 3415:
View based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP).
SNMP VIEW BASED ACM MIB.vacmViewTreeFamilyName"
; } leaf list include { type snmp:wildcard object identifier
; description "A family of subtrees included in this MIB view."; reference "RFC 3415: View based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP).
SNMP VIEW BASED ACM MIB.vacmViewTreeFamilySubtree SNMP VIEW BASED
ACM MIB.vacmViewTreeFamilyMask SNMP VIEW BASED ACM MIB.vacmViewTreeFamilyType"
; } leaf list exclude { type snmp:wildcard object identifier; description "A family of subtrees excluded from this MIB view."; reference "RFC 3415: View based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP).
SNMP VIEW BASED ACM MIB.vacmViewTreeFamilySubtree SNMP VIEW BASED
This YANG submodule imports YANG extensions from [RFC6536].
"ietf snmp usm.yang" submodule ietf snmp usm { belongs to ietf snmp { prefix snmp; } import ietf yang types { prefix yang; } import ietf netconf acm { prefix nacm; } include ietf snmp common; include ietf snmp target; include ietf snmp proxy; organization "IETF NETMOD (NETCONF Data Modeling Language) Working Group"; contact
>"; description "This submodule contains a collection of YANG definitions for configuring the User based Security Model (USM) of SNMP.
Copyright (c) 2014 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 7407; see the RFC itself for full legal notices."
; reference "RFC 3414: User based Security Model (USM) for version 3 of the Simple Network Management Protocol (SNMPv3)"; revision 2014 12 10 { description "Initial revision."
hex string; mandatory true; nacm:default deny all; description "Localized key specified as a list of colon specified hexadecimal octets."
User based Security Model (USM) for version 3 of the Simple Network Management Protocol (SNMPv3).
SNMP USER BASED SM MIB.usmUserTable"; leaf name { type snmp:identifier; reference "RFC 3414: User based Security Model (USM) for version 3 of the Simple Network Management Protocol (SNMPv3).
description "Enables authentication of the user."; choice protocol { mandatory true; reference "RFC 3414: User based Security Model (USM) for version 3 of the Simple Network Management Protocol (SNMPv3).
SNMP USER BASED SM MIB.usmUserAuthProtocol"
; container md5 { uses key;
User based Security Model (USM) for version 3 of the Simple Network Management Protocol (SNMPv3).
SNMP USER BASED SM MIB.usmHMACMD5AuthProtocol"
; } container sha { uses key;
User based Security Model (USM) for version 3 of the Simple Network Management Protocol (SNMPv3).
SNMP USER BASED SM MIB.usmUserPrivProtocol"; container des { uses key; reference "RFC 3414:
User based Security Model (USM) for version 3 of the Simple Network Management Protocol (SNMPv3).
SNMP USER BASED SM MIB.usmDESPrivProtocol"
; } container aes { uses key;
The Advanced Encryption Standard (AES)
Cipher Algorithm in the SNMP User based Security Model.
snmp { container usm { description "Configuration of the User based Security Model."
; container local { uses user list; } list remote { key "engine id"; leaf engine
engine id; reference "RFC 3414: User based Security Model (USM) for version 3 of the Simple Network Management Protocol (SNMPv3).
Simple Network Management Protocol (SNMP).
Submodule 'ietf snmp tsm' <CODE BEGINS>
" submodule ietf snmp tsm { belongs to ietf snmp { prefix snmp; } include ietf snmp common; include ietf snmp target; include ietf snmp proxy; organization "IETF NETMOD (NETCONF Data Modeling Language) Working Group"; contact
>"; description "This submodule contains a collection of YANG definitions for configuring the Transport Security Model (TSM) of SNMP.
Copyright (c) 2014 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 7407; see the RFC itself for full legal notices."
; reference "RFC 5591: Transport Security Model for the Simple Network Management Protocol (SNMP)"; revision 2014 12 10 { description "Initial revision."
A server implements this feature if it supports the Transport Security Model for SNMP."
snmp { if feature tsm; container tsm { description "Configuration of the Transport Security Model."; leaf use prefix { type boolean; default false; reference "RFC 5591:
Transport Security Model for the Simple Network Management Protocol (SNMP).
Simple Network Management Protocol (SNMP).
Submodule 'ietf snmp tls' <CODE BEGINS>
>"; description "This submodule contains a collection of YANG definitions for configuring the Transport Layer Security Transport Model (TLSTM) of SNMP.
Copyright (c) 2014 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 7407; see the RFC itself for full legal notices."
Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP)"; revision 2014
12 10 { description "Initial revision."
cert to name { description
"Defines how certificates are mapped to names.
The resulting name is used as a security name."; refine cert to name/map type { description "Mappings that use the snmpTlstmCertToTSNData column need to augment the cert to name list with additional configuration objects corresponding to the snmpTlstmCertToTSNData value.
Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
snmp/snmp:target/snmp:transport { if feature tlstm; case tls { reference "RFC 6353: Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
snmp/snmp:target/snmp:transport { if feature tlstm; case dtls { reference "RFC 6353:
Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP).
Submodule 'ietf snmp ssh' <CODE BEGINS>
>"; description "This submodule contains a collection of YANG definitions for configuring the Secure Shell Transport Model (SSHTM) of SNMP.
Copyright (c) 2014 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 7407; see the RFC itself for full legal notices."
; reference "RFC 5592: Secure Shell Transport Model for the Simple Network Management Protocol (SNMP)"; revision 2014 12 10 { description "Initial revision."
If the port is not configured, an engine that acts as a Command Responder uses port 5161, and an engine that acts as a Notification Receiver uses port 5162."
snmp/snmp:target/snmp:transport { if feature sshtm; case ssh { reference "RFC 5592: Secure Shell Transport Model for the Simple Network Management Protocol (SNMP).
SNMP SSH TM MIB.snmpSSHDomain"; container ssh { leaf ip { type inet:host; mandatory true; reference "RFC 3413: Simple Network Management Protocol (SNMP).
MIB.snmpTargetAddrTAddress RFC 5592: Secure Shell Transport Model for the Simple Network Management Protocol (SNMP).
MIB.snmpTargetAddrTAddress RFC 5592: Secure Shell Transport Model for the Simple Network Management Protocol (SNMP).
MIB.snmpTargetAddrTAddress RFC 5592: Secure Shell Transport Model for the Simple Network Management Protocol (SNMP).
This document registers two URIs in the "IETF XML Registry" [RFC3688].
Following the format in RFC 3688, the following registrations have been made.
The NETMOD WG of the IETF.
N/A, the requested URI is an XML namespace.
yang:ietf x509 cert to name Registrant Contact
: The NETMOD WG of the IETF.
N/A, the requested URI is an XML namespace.
This document registers the following YANG modules in the "YANG Module Names" registry [RFC6020].
yang:ietf x509 cert to name prefix:
The document registers the following YANG submodules in the "YANG Module Names" registry [RFC6020].
The YANG module and submodules defined in this memo are designed to be accessed via the NETCONF protocol [RFC6241].
The lowest NETCONF layer is the secure transport layer and the mandatory to implement secure transport
The NETCONF access control model [RFC6536] provides the means to restrict access for particular NETCONF users to a pre configured subset of all available NETCONF protocol operations and content.
There are a number of data nodes defined in the YANG module and submodules which are writable/creatable/deletable (i.e., config true, which is the default).
These data nodes may be considered sensitive or vulnerable in some network environments.
Write operations (e.g., edit config) to these data nodes without proper protection can have a negative effect on network operations.
These are the subtrees and data nodes and their sensitivity/vulnerability:
The "/snmp/engine" subtree contains the configuration of general parameters of an SNMP engine such as the endpoints to listen on, the transports and SNMP versions enabled, or the engine's identity.
Write access to this subtree should only be granted to entities configuring general SNMP engine parameters.
The "/snmp/target" subtree contains the configuration of SNMP targets and, in particular, which transports to use and their security parameters.
Write access to this subtree should only be granted to the security administrator and entities configuring SNMP notification forwarding behavior.
The "/snmp/notify" and "/snmp/notify filter profile" subtrees contain the configuration for the SNMP notification forwarding and filtering mechanism.
Write access to these subtrees should only be granted to entities configuring SNMP notification forwarding behavior.
The "/snmp/proxy" subtree contains the configuration for SNMP proxies.
Write access to this subtree should only be granted to entities configuring SNMP proxies.
The "/snmp/community" subtree contains the configuration of the Community based Security Model.
Write access to this subtree should only be granted to the security administrator.
The "/snmp/usm" subtree contains the configuration of the User  based Security Model.
Write access to this subtree should only be granted to the security administrator.
The "/snmp/tsm" subtree contains the configuration of the Transport Layer Security (TLS) Transport Model for SNMP.
Write access to this subtree should only be granted to the security administrator.
The "/snmp/tlstm" subtree contains the configuration of the SNMP transport over (D)TLS and, in particular, the configuration of how certificates are mapped to SNMP security names.
Write access to this subtree should only be granted to the security administrator.
The "/snmp/vacm" subtree contains the configuration of the View  based Access Control Model used by SNMP to authorize access to management information via SNMP.
Write access to this subtree should only be granted to the security administrator.
Some of the readable data nodes in the YANG module and submodules may be considered sensitive or vulnerable in some network environments.
It is thus important to control read access (e.g., via get, get  config, or notification) to these data nodes.
These are the subtrees and data nodes and their sensitivity/vulnerability:
The "/snmp/engine" subtree exposes general information about an SNMP engine such as which version(s) of SNMP are enabled or which transports are enabled.
The "/snmp/target" subtree exposes information about which transports are used to reach certain SNMP targets and which transport specific parameters are used.
The "/snmp/notify" and "/snmp/notify filter profile" subtrees expose information about how notifications are filtered and forwarded to notification targets.
The "/snmp/proxy" subtree exposes information about proxy relationships.
Changes to the SNMP access control rules should be done in an atomic way (through a single edit config or a single commit), or care must be taken that they are done in a sequence that does not temporarily open access to resources.
Implementations supporting SNMP write access must ensure that any SNMP access control rule changes over NETCONF are also atomic to the SNMP instrumentation.
In particular, changes involving an internal delete/create cycle (e.g., to move a user to a different group) must be done with sufficient protections such that even a power fail immediately after the delete does not leave the administrator locked out.
Security administrators need to ensure that NETCONF access control rules and SNMP access control rules implement a consistent security policy.
Specifically, the SNMP access control rules should prevent accidental leakage of sensitive security parameters such as community strings.
See the Security Considerations section of [RFC3584] for further details.
Appendix A.  Example Configurations A.1.
Engine Configuration Example Below is an XML instance document showing a configuration of an SNMP engine listening on UDP port 161 on IPv4 and IPv6 endpoints and accepting SNMPv2c and SNMPv3 messages.
port>161</port> </udp> </listen> <version> <v2c/> <v3/
Community Configuration Example Below is an XML instance document showing a configuration that maps the community name "public" to the security name "community public" on the local engine with the default context name.
The target tag "community public access" filters the access to this community name.
public</text name> <security name>community public</security name
> <target tag>community public access</target tag>
User Based Security Model Configuration Example Below is an XML instance document showing the configuration of a local user "joey" who has no authentication or privacy keys.
For the remote SNMP engine identified by the snmpEngineID '800002b804616263'H, two users are configured.
The user "matt" has a localized SHA authentication key, and the user "russ" has a localized SHA authentication key and
> </local> <remote> <engine id>00:00:00:00:00:00:00:00:00:00:00:02</engine id> <user> <name>matt</name
The 'key' value is split into two lines to conform to the RFC formatting rules.
The 'key' value is split into two lines to conform to the RFC formatting rules.
The 'key' value is split into two lines to conform to the RFC formatting rules.
auth</target params> </target> <target params
> <user name>matt</user name> <security level>auth
> </target params> </snmp> A.4.
Example Below is an XML instance document showing the configuration of a notification generator application (see Appendix A of [RFC3413]).
Note that the USM specific objects are defined in the "ietf snmp usm" submodule.
joe auth</target params> </target> <target> <name
joe auth</target params> </target> <target> <name
bob priv</target params> </target> <target params> <name>joe auth</name
> </target params> <target params
> </target params> <notify> <name
Proxy Configuration Example Below is an XML instance document showing the configuration of a proxy forwarder application.
It proxies SNMPv2c messages from command generators to a file server running an SNMPv1 agent that recognizes two community strings, "private" and "public", with different associated read views.
The file server is represented as two "target" instances, one for each community string.
If the proxy receives an SNMPv2c message with the community string "public" from a device in the "Office Network" or "Home Office Network", it gets tagged as "trusted", and the proxy uses the "private" community string when sending the message to the file server.
Other SNMPv2c messages with the community string "public" get tagged as "non trusted", and the proxy uses the "public" community string for these messages.
There is also a special "backdoor" community string that can be used from any location to get "trusted" access.
The "Office Network" and "Home Office Network" are represented as two "target" instances.
These "target" instances have target params "none", which refers to a non existing target params entry.
yang:ietf snmp"> <target> <name>File Server (private)</name
v1 private</target params> </target> <target> <name
v1 public</target params> </target> <target>
ip>192.0.2.0</ip> <prefix length>24</prefix length> </udp>
ip>203.0.113.0</ip> <prefix length>24</prefix length> </udp
>none</target params> </target> <target params> <name
> </target params> <target params
> </target params> <target params
> <name>v2c public</name> <v2c> <security name
Communities c1, c2, c3, and c4 are used for incoming messages that should be forwarded.
Communities c3 and c5 are used for outgoing messages to the file server.
>office</target tag> </community> <community> <index
not trusted</context> </community> <community> <index
> <community> <index>c5</index> <security name
public</target params in> <single target out>File Server (private)</single target out> </proxy
not trusted</context name> <target params in>v2c
public</target params in> <single target out>File Server (public)</single target out> </proxy> </snmp
If an SNMPv2c Get request with community string "public" is received from an IP address tagged as "office" or "home office", or if the request is received from anywhere else with community string "backdoor", the implied context is "trusted" so proxy entry "p1" matches.
The request is forwarded to the file server as SNMPv1 with community "private" using community table entry "c5" for outbound params lookup.
If an SNMPv2c Get request with community string "public" is received from any other IP address, the implied context is "not trusted" so proxy entry "p2" matches, and the request is forwarded to the file server as SNMPv1 with community "public".
View Based Access Control Model Configuration Example Below is an XML instance document showing the minimum secure VACM configuration (see Appendix A of [RFC3415]).
yang:ietf snmp"> <vacm> <group> <name>initial</name> <member> <security name
>initial</security name> <security model>usm</security model> </member> <access> <context></context>
>restricted</notify view> </access> <access> <context></context> <security model>usm</security model
>internet</notify view> </access> </group> <view> <name>initial</name> <include>1.3.6.1</include
The following XML instance document shows the semi secure VACM configuration (only the view configuration is different).
yang:ietf snmp"> <vacm> <group> <name>initial</name> <member> <security name
>initial</security name> <security model>usm</security model> </member> <access> <context></context>
>restricted</notify view> </access> <access> <context></context> <security model>usm</security model
>internet</notify view> </access> </group> <view> <name>initial</name> <include>1.3.6.1</include
Transport Layer Security Transport Model Configuration Example Below is an XML instance document showing the configuration of the mapping of certificate to security name (see Appendices A.2 and A.3 of [RFC6353]).
yang:ietf x509 cert to name
"> <tlstm> <cert to name>
san any</map type> </cert to name> <cert to name> <id>2</id>
> </cert to name> </tlstm
