Abstract This document describes how to prepare Unicode strings representing user names and passwords for comparison.
The document defines the "SASLprep" profile of the "stringprep" algorithm to be used for both user names and passwords.
This profile is intended to be used by Simple Authentication and Security Layer (SASL) mechanisms (such as PLAIN, CRAM MD5, and DIGEST MD5), as well as other protocols exchanging simple user names and/or passwords.
The use of simple user names and passwords in authentication and authorization is pervasive on the Internet.
To increase the likelihood that user name and password input and comparison work in ways that make sense for typical users throughout the world, this document defines rules for preparing internationalized user names and passwords for comparison.
For simplicity and implementation ease, a single algorithm is defined for both user names and passwords.
The algorithm assumes all strings are comprised of characters from the Unicode [Unicode] character set.
This document defines the "SASLprep" profile of the "stringprep" algorithm [StringPrep].
The profile is designed for use in Simple Authentication and Security Layer ([SASL]) mechanisms, such as [PLAIN], [CRAM MD5], and [DIGEST MD5].
It may be applicable where simple user names and passwords are used.
This profile is not intended for use in preparing identity strings that are not simple user names (e.g., email addresses, domain names, distinguished names), or where identity or password strings that are not character data, or require different handling (e.g., case folding).
This document does not alter the technical specification of any existing protocols.
Any specification that wishes to use the algorithm described in this document needs to explicitly incorporate this document and provide precise details as to where and how this algorithm is used by implementations of that specification.
This section defines the "SASLprep" profile of the "stringprep" algorithm [StringPrep].
This profile is intended for use in preparing strings representing simple user names and passwords.
This profile uses Unicode 3.2 [Unicode].
Character names in this document use the notation for code points and names from the Unicode Standard [Unicode].
For example, the letter "a" may be represented as either <U 0061> or <LATIN SMALL LETTER
In the lists of mappings and the prohibited characters, the "U " is left off to make the lists easier to read.
The comments for character ranges are shown in square brackets (such as "[CONTROL CHARACTERS]") and do not come from the standard.
Note: A glossary of terms used in Unicode can be found in [Glossary].
Information on the Unicode character encoding model can be found in [CharModel].
This profile specifies:  non ASCII space characters [StringPrep, C.1.2] that can be mapped to SPACE (U 0020), and  the "commonly mapped to nothing" characters [StringPrep, B.1] that can be mapped to nothing.
This profile specifies using Unicode normalization form KC, as described in Section 4 of [StringPrep].
This profile specifies the following characters as prohibited input: Non ASCII space characters [StringPrep, C.1.2] ASCII control characters [StringPrep, C.2.1] Non ASCII control characters [StringPrep, C.2.2]
Private Use characters [StringPrep, C.3]
Non character code points [StringPrep, C.4]
Surrogate code points [StringPrep, C.5] Inappropriate for plain text characters [StringPrep, C.6] Inappropriate for canonical representation characters
[StringPrep, C.7] Change display properties or deprecated characters [StringPrep, C.8] Tagging characters [StringPrep, C.9] 2.4.
This profile specifies checking bidirectional strings as described in [StringPrep, Section 6].
This profile specifies the [StringPrep, A.1] table as its list of unassigned code points.
The following table provides examples of how various character data is transformed by the SASLprep string preparation algorithm
This profile is intended to prepare simple user name and password strings for comparison or use in cryptographic functions (e.g., message digests).
The preparation algorithm was specifically designed such that its output is canonical, and it is well formed.
However, due to an anomaly [PR29] in the specification of Unicode normalization, canonical equivalence is not guaranteed for a select few character sequences.
These sequences, however, do not appear in well formed text.
This specification was published despite this known technical problem.
It is expected that this specification will be revised before further progression on the Standards Track (after [Unicode] and/or [StringPrep] specifications have been updated to address this problem).
It is not intended for preparing identity strings that are not simple user names (e.g., distinguished names, domain names), nor is the profile intended for use of simple user names that require different handling (such as case folding).
Protocols (or applications of those protocols) that have application specific identity forms and/or comparison algorithms should use mechanisms specifically designed for these forms and algorithms.
Application of string preparation may have an impact upon the feasibility of brute force and dictionary attacks.
While the number of possible prepared strings is less than the number of possible Unicode strings, the number of usable names and passwords is greater than as if only ASCII was used.
Though SASLprep eliminates some Unicode code point sequences as possible prepared strings, that elimination generally makes the (canonical) output forms practicable and prohibits nonsensical inputs.
User names and passwords should be protected from eavesdropping.
General "stringprep" and Unicode security considerations apply.
Both are discussed in [StringPrep].
This document details the "SASLprep" profile of the [StringPrep] protocol.
This profile has been registered in the stringprep profile registry.
Name of this profile: SASLprep RFC in which the profile is defined:
RFC 4013 Indicator whether or not this is the newest version of the profile: This is the first version of the SASPprep profile.
