- title: __initial_text__
  contents:
  - '                OAuth 2.0 Authorization Server Metadata

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification defines a metadata format that an OAuth 2.0 client\n\
    \   can use to obtain the information needed to interact with an\n   OAuth 2.0\
    \ authorization server, including its endpoint locations and\n   authorization\
    \ server capabilities.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8414.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Requirements Notation and Conventions ......................3\n  \
    \    1.2. Terminology ................................................3\n   2.\
    \ Authorization Server Metadata ...................................4\n      2.1.\
    \ Signed Authorization Server Metadata .......................8\n   3. Obtaining\
    \ Authorization Server Metadata .........................8\n      3.1. Authorization\
    \ Server Metadata Request ......................9\n      3.2. Authorization Server\
    \ Metadata Response ....................10\n      3.3. Authorization Server Metadata\
    \ Validation ..................11\n   4. String Operations ..............................................11\n\
    \   5. Compatibility Notes ............................................11\n  \
    \ 6. Security Considerations ........................................12\n    \
    \  6.1. TLS Requirements ..........................................12\n      6.2.\
    \ Impersonation Attacks .....................................12\n      6.3. Publishing\
    \ Metadata in a Standard Format ..................13\n      6.4. Protected Resources\
    \ .......................................13\n   7. IANA Considerations ............................................14\n\
    \      7.1. OAuth Authorization Server Metadata Registry ..............14\n  \
    \         7.1.1. Registration Template ..............................15\n    \
    \       7.1.2. Initial Registry Contents ..........................16\n      7.2.\
    \ Updated Registration Instructions .........................19\n      7.3. Well-Known\
    \ URI Registry ...................................19\n           7.3.1. Registry\
    \ Contents ..................................19\n   8. References .....................................................20\n\
    \      8.1. Normative References ......................................20\n  \
    \    8.2. Informative References ....................................22\n   Acknowledgements\
    \ ..................................................23\n   Authors' Addresses\
    \ ................................................23\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This specification generalizes the metadata format defined\
    \ by \"OpenID\n   Connect Discovery 1.0\" [OpenID.Discovery] in a way that is\
    \ compatible\n   with OpenID Connect Discovery while being applicable to a wider\
    \ set\n   of OAuth 2.0 use cases.  This is intentionally parallel to the way\n\
    \   that \"OAuth 2.0 Dynamic Client Registration Protocol\" [RFC7591]\n   generalized\
    \ the dynamic client registration mechanisms defined by\n   \"OpenID Connect Dynamic\
    \ Client Registration 1.0\"\n   [OpenID.Registration] in a way that is compatible\
    \ with it.\n   The metadata for an authorization server is retrieved from a well-\n\
    \   known location as a JSON [RFC8259] document, which declares its\n   endpoint\
    \ locations and authorization server capabilities.  This\n   process is described\
    \ in Section 3.\n   This metadata can be communicated either in a self-asserted\
    \ fashion\n   by the server origin via HTTPS or as a set of signed metadata values\n\
    \   represented as claims in a JSON Web Token (JWT) [JWT].  In the JWT\n   case,\
    \ the issuer is vouching for the validity of the data about the\n   authorization\
    \ server.  This is analogous to the role that the\n   Software Statement plays\
    \ in OAuth Dynamic Client Registration\n   [RFC7591].\n   The means by which the\
    \ client chooses an authorization server is out\n   of scope.  In some cases,\
    \ its issuer identifier may be manually\n   configured into the client.  In other\
    \ cases, it may be dynamically\n   discovered, for instance, through the use of\
    \ WebFinger [RFC7033], as\n   described in Section 2 of \"OpenID Connect Discovery\
    \ 1.0\"\n   [OpenID.Discovery].\n"
- title: 1.1.  Requirements Notation and Conventions
  contents:
  - "1.1.  Requirements Notation and Conventions\n   The key words \"MUST\", \"MUST\
    \ NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this\
    \ document are to be interpreted as described in\n   BCP 14 [RFC2119] [RFC8174]\
    \ when, and only when, they appear in all\n   capitals, as shown here.\n   All\
    \ uses of JSON Web Signature (JWS) [JWS] and JSON Web Encryption\n   (JWE) [JWE]\
    \ data structures in this specification utilize the JWS\n   Compact Serialization\
    \ or the JWE Compact Serialization; the JWS JSON\n   Serialization and the JWE\
    \ JSON Serialization are not used.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   This specification uses the terms \"Access Token\", \"\
    Authorization\n   Code\", \"Authorization Endpoint\", \"Authorization Grant\"\
    ,\n   \"Authorization Server\", \"Client\", \"Client Authentication\", \"Client\n\
    \   Identifier\", \"Client Secret\", \"Grant Type\", \"Protected Resource\",\n\
    \   \"Redirection URI\", \"Refresh Token\", \"Resource Owner\", \"Resource\n \
    \  Server\", \"Response Type\", and \"Token Endpoint\" defined by OAuth 2.0\n\
    \   [RFC6749]; the terms \"Claim Name\", \"Claim Value\", and \"JSON Web Token\n\
    \   (JWT)\" defined by JSON Web Token (JWT) [JWT]; and the term \"Response\n \
    \  Mode\" defined by \"OAuth 2.0 Multiple Response Type Encoding\n   Practices\"\
    \ [OAuth.Responses].\n"
- title: 2.  Authorization Server Metadata
  contents:
  - "2.  Authorization Server Metadata\n   Authorization servers can have metadata\
    \ describing their\n   configuration.  The following authorization server metadata\
    \ values\n   are used by this specification and are registered in the IANA \"\
    OAuth\n   Authorization Server Metadata\" registry established in Section 7.1:\n\
    \   issuer\n      REQUIRED.  The authorization server's issuer identifier, which\
    \ is\n      a URL that uses the \"https\" scheme and has no query or fragment\n\
    \      components.  Authorization server metadata is published at a\n      location\
    \ that is \".well-known\" according to RFC 5785 [RFC5785]\n      derived from\
    \ this issuer identifier, as described in Section 3.\n      The issuer identifier\
    \ is used to prevent authorization server mix-\n      up attacks, as described\
    \ in \"OAuth 2.0 Mix-Up Mitigation\"\n      [MIX-UP].\n   authorization_endpoint\n\
    \      URL of the authorization server's authorization endpoint\n      [RFC6749].\
    \  This is REQUIRED unless no grant types are supported\n      that use the authorization\
    \ endpoint.\n   token_endpoint\n      URL of the authorization server's token\
    \ endpoint [RFC6749].  This\n      is REQUIRED unless only the implicit grant\
    \ type is supported.\n   jwks_uri\n      OPTIONAL.  URL of the authorization server's\
    \ JWK Set [JWK]\n      document.  The referenced document contains the signing\
    \ key(s) the\n      client uses to validate signatures from the authorization\
    \ server.\n      This URL MUST use the \"https\" scheme.  The JWK Set MAY also\n\
    \      contain the server's encryption key or keys, which are used by\n      clients\
    \ to encrypt requests to the server.  When both signing and\n      encryption\
    \ keys are made available, a \"use\" (public key use)\n      parameter value is\
    \ REQUIRED for all keys in the referenced JWK Set\n      to indicate each key's\
    \ intended usage.\n   registration_endpoint\n      OPTIONAL.  URL of the authorization\
    \ server's OAuth 2.0 Dynamic\n      Client Registration endpoint [RFC7591].\n\
    \   scopes_supported\n      RECOMMENDED.  JSON array containing a list of the\
    \ OAuth 2.0\n      [RFC6749] \"scope\" values that this authorization server supports.\n\
    \      Servers MAY choose not to advertise some supported scope values\n     \
    \ even when this parameter is used.\n   response_types_supported\n      REQUIRED.\
    \  JSON array containing a list of the OAuth 2.0\n      \"response_type\" values\
    \ that this authorization server supports.\n      The array values used are the\
    \ same as those used with the\n      \"response_types\" parameter defined by \"\
    OAuth 2.0 Dynamic Client\n      Registration Protocol\" [RFC7591].\n   response_modes_supported\n\
    \      OPTIONAL.  JSON array containing a list of the OAuth 2.0\n      \"response_mode\"\
    \ values that this authorization server supports, as\n      specified in \"OAuth\
    \ 2.0 Multiple Response Type Encoding Practices\"\n      [OAuth.Responses].  If\
    \ omitted, the default is \"[\"query\",\n      \"fragment\"]\".  The response\
    \ mode value \"form_post\" is also defined\n      in \"OAuth 2.0 Form Post Response\
    \ Mode\" [OAuth.Post].\n   grant_types_supported\n      OPTIONAL.  JSON array\
    \ containing a list of the OAuth 2.0 grant\n      type values that this authorization\
    \ server supports.  The array\n      values used are the same as those used with\
    \ the \"grant_types\"\n      parameter defined by \"OAuth 2.0 Dynamic Client Registration\n\
    \      Protocol\" [RFC7591].  If omitted, the default value is\n      \"[\"authorization_code\"\
    , \"implicit\"]\".\n   token_endpoint_auth_methods_supported\n      OPTIONAL.\
    \  JSON array containing a list of client authentication\n      methods supported\
    \ by this token endpoint.  Client authentication\n      method values are used\
    \ in the \"token_endpoint_auth_method\"\n      parameter defined in Section 2\
    \ of [RFC7591].  If omitted, the\n      default is \"client_secret_basic\" --\
    \ the HTTP Basic Authentication\n      Scheme specified in Section 2.3.1 of OAuth\
    \ 2.0 [RFC6749].\n   token_endpoint_auth_signing_alg_values_supported\n      OPTIONAL.\
    \  JSON array containing a list of the JWS signing\n      algorithms (\"alg\"\
    \ values) supported by the token endpoint for the\n      signature on the JWT\
    \ [JWT] used to authenticate the client at the\n      token endpoint for the \"\
    private_key_jwt\" and \"client_secret_jwt\"\n      authentication methods.  This\
    \ metadata entry MUST be present if\n      either of these authentication methods\
    \ are specified in the\n      \"token_endpoint_auth_methods_supported\" entry.\
    \  No default\n      algorithms are implied if this entry is omitted.  Servers\
    \ SHOULD\n      support \"RS256\".  The value \"none\" MUST NOT be used.\n   service_documentation\n\
    \      OPTIONAL.  URL of a page containing human-readable information\n      that\
    \ developers might want or need to know when using the\n      authorization server.\
    \  In particular, if the authorization server\n      does not support Dynamic\
    \ Client Registration, then information on\n      how to register clients needs\
    \ to be provided in this\n      documentation.\n   ui_locales_supported\n    \
    \  OPTIONAL.  Languages and scripts supported for the user interface,\n      represented\
    \ as a JSON array of language tag values from BCP 47\n      [RFC5646].  If omitted,\
    \ the set of supported languages and scripts\n      is unspecified.\n   op_policy_uri\n\
    \      OPTIONAL.  URL that the authorization server provides to the\n      person\
    \ registering the client to read about the authorization\n      server's requirements\
    \ on how the client can use the data provided\n      by the authorization server.\
    \  The registration process SHOULD\n      display this URL to the person registering\
    \ the client if it is\n      given.  As described in Section 5, despite the identifier\n\
    \      \"op_policy_uri\" appearing to be OpenID-specific, its usage in this\n\
    \      specification is actually referring to a general OAuth 2.0 feature\n  \
    \    that is not specific to OpenID Connect.\n   op_tos_uri\n      OPTIONAL. \
    \ URL that the authorization server provides to the\n      person registering\
    \ the client to read about the authorization\n      server's terms of service.\
    \  The registration process SHOULD\n      display this URL to the person registering\
    \ the client if it is\n      given.  As described in Section 5, despite the identifier\n\
    \      \"op_tos_uri\", appearing to be OpenID-specific, its usage in this\n  \
    \    specification is actually referring to a general OAuth 2.0 feature\n    \
    \  that is not specific to OpenID Connect.\n   revocation_endpoint\n      OPTIONAL.\
    \  URL of the authorization server's OAuth 2.0 revocation\n      endpoint [RFC7009].\n\
    \   revocation_endpoint_auth_methods_supported\n      OPTIONAL.  JSON array containing\
    \ a list of client authentication\n      methods supported by this revocation\
    \ endpoint.  The valid client\n      authentication method values are those registered\
    \ in the IANA\n      \"OAuth Token Endpoint Authentication Methods\" registry\n\
    \      [IANA.OAuth.Parameters].  If omitted, the default is\n      \"client_secret_basic\"\
    \ -- the HTTP Basic Authentication Scheme\n      specified in Section 2.3.1 of\
    \ OAuth 2.0 [RFC6749].\n   revocation_endpoint_auth_signing_alg_values_supported\n\
    \      OPTIONAL.  JSON array containing a list of the JWS signing\n      algorithms\
    \ (\"alg\" values) supported by the revocation endpoint for\n      the signature\
    \ on the JWT [JWT] used to authenticate the client at\n      the revocation endpoint\
    \ for the \"private_key_jwt\" and\n      \"client_secret_jwt\" authentication\
    \ methods.  This metadata entry\n      MUST be present if either of these authentication\
    \ methods are\n      specified in the \"revocation_endpoint_auth_methods_supported\"\
    \n      entry.  No default algorithms are implied if this entry is\n      omitted.\
    \  The value \"none\" MUST NOT be used.\n   introspection_endpoint\n      OPTIONAL.\
    \  URL of the authorization server's OAuth 2.0\n      introspection endpoint [RFC7662].\n\
    \   introspection_endpoint_auth_methods_supported\n      OPTIONAL.  JSON array\
    \ containing a list of client authentication\n      methods supported by this\
    \ introspection endpoint.  The valid\n      client authentication method values\
    \ are those registered in the\n      IANA \"OAuth Token Endpoint Authentication\
    \ Methods\" registry\n      [IANA.OAuth.Parameters] or those registered in the\
    \ IANA \"OAuth\n      Access Token Types\" registry [IANA.OAuth.Parameters]. \
    \ (These\n      values are and will remain distinct, due to Section 7.2.)  If\n\
    \      omitted, the set of supported authentication methods MUST be\n      determined\
    \ by other means.\n   introspection_endpoint_auth_signing_alg_values_supported\n\
    \      OPTIONAL.  JSON array containing a list of the JWS signing\n      algorithms\
    \ (\"alg\" values) supported by the introspection endpoint\n      for the signature\
    \ on the JWT [JWT] used to authenticate the client\n      at the introspection\
    \ endpoint for the \"private_key_jwt\" and\n      \"client_secret_jwt\" authentication\
    \ methods.  This metadata entry\n      MUST be present if either of these authentication\
    \ methods are\n      specified in the \"introspection_endpoint_auth_methods_supported\"\
    \n      entry.  No default algorithms are implied if this entry is\n      omitted.\
    \  The value \"none\" MUST NOT be used.\n   code_challenge_methods_supported\n\
    \      OPTIONAL.  JSON array containing a list of Proof Key for Code\n      Exchange\
    \ (PKCE) [RFC7636] code challenge methods supported by this\n      authorization\
    \ server.  Code challenge method values are used in\n      the \"code_challenge_method\"\
    \ parameter defined in Section 4.3 of\n      [RFC7636].  The valid code challenge\
    \ method values are those\n      registered in the IANA \"PKCE Code Challenge\
    \ Methods\" registry\n      [IANA.OAuth.Parameters].  If omitted, the authorization\
    \ server\n      does not support PKCE.\n   Additional authorization server metadata\
    \ parameters MAY also be used.\n   Some are defined by other specifications, such\
    \ as OpenID Connect\n   Discovery 1.0 [OpenID.Discovery].\n"
- title: 2.1.  Signed Authorization Server Metadata
  contents:
  - "2.1.  Signed Authorization Server Metadata\n   In addition to JSON elements,\
    \ metadata values MAY also be provided as\n   a \"signed_metadata\" value, which\
    \ is a JSON Web Token (JWT) [JWT] that\n   asserts metadata values about the authorization\
    \ server as a bundle.\n   A set of claims that can be used in signed metadata\
    \ is defined in\n   Section 2.  The signed metadata MUST be digitally signed or\
    \ MACed\n   using JSON Web Signature (JWS) [JWS] and MUST contain an \"iss\"\n\
    \   (issuer) claim denoting the party attesting to the claims in the\n   signed\
    \ metadata.  Consumers of the metadata MAY ignore the signed\n   metadata if they\
    \ do not support this feature.  If the consumer of the\n   metadata supports signed\
    \ metadata, metadata values conveyed in the\n   signed metadata MUST take precedence\
    \ over the corresponding values\n   conveyed using plain JSON elements.\n   Signed\
    \ metadata is included in the authorization server metadata JSON\n   object using\
    \ this OPTIONAL member:\n   signed_metadata\n      A JWT containing metadata values\
    \ about the authorization server as\n      claims.  This is a string value consisting\
    \ of the entire signed\n      JWT.  A \"signed_metadata\" metadata value SHOULD\
    \ NOT appear as a\n      claim in the JWT.\n"
- title: 3.  Obtaining Authorization Server Metadata
  contents:
  - "3.  Obtaining Authorization Server Metadata\n   Authorization servers supporting\
    \ metadata MUST make a JSON document\n   containing metadata as specified in Section\
    \ 2 available at a path\n   formed by inserting a well-known URI string into the\
    \ authorization\n   server's issuer identifier between the host component and\
    \ the path\n   component, if any.  By default, the well-known URI string used\
    \ is\n   \"/.well-known/oauth-authorization-server\".  This path MUST use the\n\
    \   \"https\" scheme.  The syntax and semantics of \".well-known\" are\n   defined\
    \ in RFC 5785 [RFC5785].  The well-known URI suffix used MUST\n   be registered\
    \ in the IANA \"Well-Known URIs\" registry\n   [IANA.well-known].\n   Different\
    \ applications utilizing OAuth authorization servers in\n   application-specific\
    \ ways may define and register different well-\n   known URI suffixes used to\
    \ publish authorization server metadata as\n   used by those applications.  For\
    \ instance, if the example application\n   uses an OAuth authorization server\
    \ in an example-specific way, and\n   there are example-specific metadata values\
    \ that it needs to publish,\n   then it might register and use the \"example-configuration\"\
    \ URI suffix\n   and publish the metadata document at the path formed by inserting\n\
    \   \"/.well-known/example-configuration\" between the host and path\n   components\
    \ of the authorization server's issuer identifier.\n   Alternatively, many such\
    \ applications will use the default well-known\n   URI string \"/.well-known/oauth-authorization-server\"\
    , which is the\n   right choice for general-purpose OAuth authorization servers,\
    \ and not\n   register an application-specific one.\n   An OAuth 2.0 application\
    \ using this specification MUST specify what\n   well-known URI suffix it will\
    \ use for this purpose.  The same\n   authorization server MAY choose to publish\
    \ its metadata at multiple\n   well-known locations derived from its issuer identifier,\
    \ for example,\n   publishing metadata at both \"/.well-known/example-configuration\"\
    \ and\n   \"/.well-known/oauth-authorization-server\".\n   Some OAuth applications\
    \ will choose to use the well-known URI suffix\n   \"openid-configuration\". \
    \ As described in Section 5, despite the\n   identifier \"/.well-known/openid-configuration\"\
    , appearing to be\n   OpenID specific, its usage in this specification is actually\n\
    \   referring to a general OAuth 2.0 feature that is not specific to\n   OpenID\
    \ Connect.\n"
- title: 3.1.  Authorization Server Metadata Request
  contents:
  - "3.1.  Authorization Server Metadata Request\n   An authorization server metadata\
    \ document MUST be queried using an\n   HTTP \"GET\" request at the previously\
    \ specified path.\n   The client would make the following request when the issuer\n\
    \   identifier is \"https://example.com\" and the well-known URI suffix is\n \
    \  \"oauth-authorization-server\" to obtain the metadata, since the issuer\n \
    \  identifier contains no path component:\n     GET /.well-known/oauth-authorization-server\
    \ HTTP/1.1\n     Host: example.com\n   If the issuer identifier value contains\
    \ a path component, any\n   terminating \"/\" MUST be removed before inserting\
    \ \"/.well-known/\" and\n   the well-known URI suffix between the host component\
    \ and the path\n   component.  The client would make the following request when\
    \ the\n   issuer identifier is \"https://example.com/issuer1\" and the well-known\n\
    \   URI suffix is \"oauth-authorization-server\" to obtain the metadata,\n   since\
    \ the issuer identifier contains a path component:\n     GET /.well-known/oauth-authorization-server/issuer1\
    \ HTTP/1.1\n     Host: example.com\n   Using path components enables supporting\
    \ multiple issuers per host.\n   This is required in some multi-tenant hosting\
    \ configurations.  This\n   use of \".well-known\" is for supporting multiple\
    \ issuers per host;\n   unlike its use in RFC 5785 [RFC5785], it does not provide\
    \ general\n   information about the host.\n"
- title: 3.2.  Authorization Server Metadata Response
  contents:
  - "3.2.  Authorization Server Metadata Response\n   The response is a set of claims\
    \ about the authorization server's\n   configuration, including all necessary\
    \ endpoints and public key\n   location information.  A successful response MUST\
    \ use the 200 OK HTTP\n   status code and return a JSON object using the \"application/json\"\
    \n   content type that contains a set of claims as its members that are a\n  \
    \ subset of the metadata values defined in Section 2.  Other claims MAY\n   also\
    \ be returned.\n   Claims that return multiple values are represented as JSON\
    \ arrays.\n   Claims with zero elements MUST be omitted from the response.\n \
    \  An error response uses the applicable HTTP status code value.\n   The following\
    \ is a non-normative example response:\n     HTTP/1.1 200 OK\n     Content-Type:\
    \ application/json\n     {\n      \"issuer\":\n        \"https://server.example.com\"\
    ,\n      \"authorization_endpoint\":\n        \"https://server.example.com/authorize\"\
    ,\n      \"token_endpoint\":\n        \"https://server.example.com/token\",\n\
    \      \"token_endpoint_auth_methods_supported\":\n        [\"client_secret_basic\"\
    , \"private_key_jwt\"],\n      \"token_endpoint_auth_signing_alg_values_supported\"\
    :\n        [\"RS256\", \"ES256\"],\n      \"userinfo_endpoint\":\n        \"https://server.example.com/userinfo\"\
    ,\n      \"jwks_uri\":\n        \"https://server.example.com/jwks.json\",\n  \
    \    \"registration_endpoint\":\n        \"https://server.example.com/register\"\
    ,\n      \"scopes_supported\":\n        [\"openid\", \"profile\", \"email\", \"\
    address\",\n         \"phone\", \"offline_access\"],\n      \"response_types_supported\"\
    :\n        [\"code\", \"code token\"],\n      \"service_documentation\":\n   \
    \     \"http://server.example.com/service_documentation.html\",\n      \"ui_locales_supported\"\
    :\n        [\"en-US\", \"en-GB\", \"en-CA\", \"fr-FR\", \"fr-CA\"]\n     }\n"
- title: 3.3.  Authorization Server Metadata Validation
  contents:
  - "3.3.  Authorization Server Metadata Validation\n   The \"issuer\" value returned\
    \ MUST be identical to the authorization\n   server's issuer identifier value\
    \ into which the well-known URI string\n   was inserted to create the URL used\
    \ to retrieve the metadata.  If\n   these values are not identical, the data contained\
    \ in the response\n   MUST NOT be used.\n"
- title: 4.  String Operations
  contents:
  - "4.  String Operations\n   Processing some OAuth 2.0 messages requires comparing\
    \ values in the\n   messages to known values.  For example, the member names in\
    \ the\n   metadata response might be compared to specific member names such as\n\
    \   \"issuer\".  Comparing Unicode [UNICODE] strings, however, has\n   significant\
    \ security implications.\n   Therefore, comparisons between JSON strings and other\
    \ Unicode strings\n   MUST be performed as specified below:\n   1.  Remove any\
    \ JSON-applied escaping to produce an array of Unicode\n       code points.\n\
    \   2.  Unicode Normalization [USA15] MUST NOT be applied at any point to\n  \
    \     either the JSON string or the string it is to be compared\n       against.\n\
    \   3.  Comparisons between the two strings MUST be performed as a\n       Unicode\
    \ code-point-to-code-point equality comparison.\n   Note that this is the same\
    \ equality comparison procedure described in\n   Section 8.3 of [RFC8259].\n"
- title: 5.  Compatibility Notes
  contents:
  - "5.  Compatibility Notes\n   The identifiers \"/.well-known/openid-configuration\"\
    , \"op_policy_uri\",\n   and \"op_tos_uri\" contain strings referring to the OpenID\
    \ Connect\n   [OpenID.Core] family of specifications that were originally defined\n\
    \   by \"OpenID Connect Discovery 1.0\" [OpenID.Discovery].  Despite the\n   reuse\
    \ of these identifiers that appear to be OpenID specific, their\n   usage in this\
    \ specification is actually referring to general OAuth\n   2.0 features that are\
    \ not specific to OpenID Connect.\n   The algorithm for transforming the issuer\
    \ identifier to an\n   authorization server metadata location defined in Section\
    \ 3 is\n   equivalent to the corresponding transformation defined in Section 4\n\
    \   of \"OpenID Connect Discovery 1.0\" [OpenID.Discovery], provided that\n  \
    \ the issuer identifier contains no path component.  However, they are\n   different\
    \ when there is a path component, because OpenID Connect\n   Discovery 1.0 specifies\
    \ that the well-known URI string is appended to\n   the issuer identifier (e.g.,\n\
    \   \"https://example.com/issuer1/.well-known/openid-configuration\"),\n   whereas\
    \ this specification specifies that the well-known URI string\n   is inserted\
    \ before the path component of the issuer identifier (e.g.,\n   \"https://example.com/.well-known/openid-configuration/issuer1\"\
    ).\n   Going forward, OAuth authorization server metadata locations should\n \
    \  use the transformation defined in this specification.  However, when\n   deployed\
    \ in legacy environments in which the OpenID Connect Discovery\n   1.0 transformation\
    \ is already used, it may be necessary during a\n   transition period to publish\
    \ metadata for issuer identifiers\n   containing a path component at both locations.\
    \  During this\n   transition period, applications should first apply the transformation\n\
    \   defined in this specification and attempt to retrieve the\n   authorization\
    \ server metadata from the resulting location; only if\n   the retrieval from\
    \ that location fails should they fall back to\n   attempting to retrieve it from\
    \ the alternate location obtained using\n   the transformation defined by OpenID\
    \ Connect Discovery 1.0.  This\n   backwards-compatible behavior should only be\
    \ necessary when the well-\n   known URI suffix employed by the application is\
    \ \"openid-\n   configuration\".\n"
- title: 6.  Security Considerations
  contents:
  - '6.  Security Considerations

    '
- title: 6.1.  TLS Requirements
  contents:
  - "6.1.  TLS Requirements\n   Implementations MUST support TLS.  Which version(s)\
    \ ought to be\n   implemented will vary over time and depend on the widespread\n\
    \   deployment and known security vulnerabilities at the time of\n   implementation.\
    \  The authorization server MUST support TLS version\n   1.2 [RFC5246] and MAY\
    \ support additional TLS mechanisms meeting its\n   security requirements.  When\
    \ using TLS, the client MUST perform a\n   TLS/SSL server certificate check, per\
    \ RFC 6125 [RFC6125].\n   Implementation security considerations can be found\
    \ in\n   \"Recommendations for Secure Use of Transport Layer Security (TLS) and\n\
    \   Datagram Transport Layer Security (DTLS)\" [BCP195].\n   To protect against\
    \ information disclosure and tampering,\n   confidentiality protection MUST be\
    \ applied using TLS with a\n   ciphersuite that provides confidentiality and integrity\
    \ protection.\n"
- title: 6.2.  Impersonation Attacks
  contents:
  - "6.2.  Impersonation Attacks\n   TLS certificate checking MUST be performed by\
    \ the client, as\n   described in Section 6.1, when making an authorization server\n\
    \   metadata request.  Checking that the server certificate is valid for\n   the\
    \ issuer identifier URL prevents man-in-middle and DNS-based\n   attacks.  These\
    \ attacks could cause a client to be tricked into using\n   an attacker's keys\
    \ and endpoints, which would enable impersonation of\n   the legitimate authorization\
    \ server.  If an attacker can accomplish\n   this, they can access the resources\
    \ that the affected client has\n   access to using the authorization server that\
    \ they are impersonating.\n   An attacker may also attempt to impersonate an authorization\
    \ server\n   by publishing a metadata document that contains an \"issuer\" claim\n\
    \   using the issuer identifier URL of the authorization server being\n   impersonated,\
    \ but with its own endpoints and signing keys.  This\n   would enable it to impersonate\
    \ that authorization server, if accepted\n   by the client.  To prevent this,\
    \ the client MUST ensure that the\n   issuer identifier URL it is using as the\
    \ prefix for the metadata\n   request exactly matches the value of the \"issuer\"\
    \ metadata value in\n   the authorization server metadata document received by\
    \ the client.\n"
- title: 6.3.  Publishing Metadata in a Standard Format
  contents:
  - "6.3.  Publishing Metadata in a Standard Format\n   Publishing information about\
    \ the authorization server in a standard\n   format makes it easier for both legitimate\
    \ clients and attackers to\n   use the authorization server.  Whether an authorization\
    \ server\n   publishes its metadata in an ad hoc manner or in the standard format\n\
    \   defined by this specification, the same defenses against attacks that\n  \
    \ might be mounted that use this information should be applied.\n"
- title: 6.4.  Protected Resources
  contents:
  - "6.4.  Protected Resources\n   Secure determination of appropriate protected resources\
    \ to use with\n   an authorization server for all use cases is out of scope of\
    \ this\n   specification.  This specification assumes that the client has a\n\
    \   means of determining appropriate protected resources to use with an\n   authorization\
    \ server and that the client is using the correct\n   metadata for each authorization\
    \ server.  Implementers need to be\n   aware that if an inappropriate protected\
    \ resource is used by the\n   client, that an attacker may be able to act as a\
    \ man-in-the-middle\n   proxy to a valid protected resource without it being detected\
    \ by the\n   authorization server or the client.\n   The ways to determine the\
    \ appropriate protected resources to use with\n   an authorization server are,\
    \ in general, application dependent.  For\n   instance, some authorization servers\
    \ are used with a fixed protected\n   resource or set of protected resources,\
    \ the locations of which may be\n   well known or could be published as metadata\
    \ values by the\n   authorization server.  In other cases, the set of resources\
    \ that can\n   be used with an authorization server can be dynamically changed\
    \ by\n   administrative actions.  Many other means of determining appropriate\n\
    \   associations between authorization servers and protected resources\n   are\
    \ also possible.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   The following registration procedure is used for\
    \ the registry\n   established by this specification.\n   Values are registered\
    \ on a Specification Required [RFC8126] basis\n   after a two-week review period\
    \ on the oauth-ext-review@ietf.org\n   mailing list, on the advice of one or more\
    \ Designated Experts.\n   However, to allow for the allocation of values prior\
    \ to publication,\n   the Designated Experts may approve registration once they\
    \ are\n   satisfied that such a specification will be published.\n   Registration\
    \ requests sent to the mailing list for review should use\n   an appropriate subject\
    \ (e.g., \"Request to register OAuth\n   Authorization Server Metadata: example\"\
    ).\n   Within the review period, the Designated Experts will either approve\n\
    \   or deny the registration request, communicating this decision to the\n   review\
    \ list and IANA.  Denials should include an explanation and, if\n   applicable,\
    \ suggestions as to how to make the request successful.\n   Registration requests\
    \ that are undetermined for a period longer than\n   21 days can be brought to\
    \ the IESG's attention (using the\n   iesg@ietf.org mailing list) for resolution.\n\
    \   Criteria that should be applied by the Designated Experts include\n   determining\
    \ whether the proposed registration duplicates existing\n   functionality, determining\
    \ whether it is likely to be of general\n   applicability or whether it is useful\
    \ only for a single application,\n   and whether the registration makes sense.\n\
    \   IANA must only accept registry updates from the Designated Experts\n   and\
    \ should direct all requests for registration to the review mailing\n   list.\n\
    \   It is suggested that multiple Designated Experts be appointed who are\n  \
    \ able to represent the perspectives of different applications using\n   this\
    \ specification, in order to enable broadly-informed review of\n   registration\
    \ decisions.  In cases where a registration decision could\n   be perceived as\
    \ creating a conflict of interest for a particular\n   Designated Expert, that\
    \ Designated Expert should defer to the\n   judgment of the other Designated Experts.\n"
- title: 7.1.  OAuth Authorization Server Metadata Registry
  contents:
  - "7.1.  OAuth Authorization Server Metadata Registry\n   This specification establishes\
    \ the IANA \"OAuth Authorization Server\n   Metadata\" registry for OAuth 2.0\
    \ authorization server metadata names.\n   The registry records the authorization\
    \ server metadata member and a\n   reference to the specification that defines\
    \ it.\n   The Designated Experts must either:\n   (a) require that metadata names\
    \ and values being registered use only\n   printable ASCII characters excluding\
    \ double quote ('\"') and backslash\n   ('\\') (the Unicode characters with code\
    \ points U+0021, U+0023 through\n   U+005B, and U+005D through U+007E), or\n \
    \  (b) if new metadata members or values are defined that use other code\n   points,\
    \ require that their definitions specify the exact sequences of\n   Unicode code\
    \ points used to represent them.  Furthermore, proposed\n   registrations that\
    \ use Unicode code points that can only be\n   represented in JSON strings as\
    \ escaped characters must not be\n   accepted.\n"
- title: 7.1.1.  Registration Template
  contents:
  - "7.1.1.  Registration Template\n   Metadata Name:\n      The name requested (e.g.,\
    \ \"issuer\").  This name is case-sensitive.\n      Names may not match other\
    \ registered names in a case-insensitive\n      manner (one that would cause a\
    \ match if the Unicode toLowerCase()\n      operation were applied to both strings)\
    \ unless the Designated\n      Experts state that there is a compelling reason\
    \ to allow an\n      exception.\n   Metadata Description:\n      Brief description\
    \ of the metadata (e.g., \"Issuer identifier URL\").\n   Change Controller:\n\
    \      For Standards Track RFCs, list the \"IESG\".  For others, give the\n  \
    \    name of the responsible party.  Other details (e.g., postal\n      address,\
    \ email address, home page URI) may also be included.\n   Specification Document(s):\n\
    \      Reference to the document or documents that specify the parameter,\n  \
    \    preferably including URIs that can be used to retrieve copies of\n      the\
    \ documents.  An indication of the relevant sections may also be\n      included\
    \ but is not required.\n"
- title: 7.1.2.  Initial Registry Contents
  contents:
  - "7.1.2.  Initial Registry Contents\n   o  Metadata Name: issuer\n   o  Metadata\
    \ Description: Authorization server's issuer identifier URL\n   o  Change Controller:\
    \ IESG\n   o  Specification Document(s): Section 2 of RFC 8414\n   o  Metadata\
    \ Name: authorization_endpoint\n   o  Metadata Description: URL of the authorization\
    \ server's\n      authorization endpoint\n   o  Change Controller: IESG\n   o\
    \  Specification Document(s): Section 2 of RFC 8414\n   o  Metadata Name: token_endpoint\n\
    \   o  Metadata Description: URL of the authorization server's token\n      endpoint\n\
    \   o  Change Controller: IESG\n   o  Specification Document(s): Section 2 of\
    \ RFC 8414\n   o  Metadata Name: jwks_uri\n   o  Metadata Description: URL of\
    \ the authorization server's JWK Set\n      document\n   o  Change Controller:\
    \ IESG\n   o  Specification Document(s): Section 2 of RFC 8414\n   o  Metadata\
    \ Name: registration_endpoint\n   o  Metadata Description: URL of the authorization\
    \ server's OAuth 2.0\n      Dynamic Client Registration Endpoint\n   o  Change\
    \ Controller: IESG\n   o  Specification Document(s): Section 2 of RFC 8414\n \
    \  o  Metadata Name: scopes_supported\n   o  Metadata Description: JSON array\
    \ containing a list of the OAuth\n      2.0 \"scope\" values that this authorization\
    \ server supports\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 2 of RFC 8414\n   o  Metadata Name: response_types_supported\n   o \
    \ Metadata Description: JSON array containing a list of the OAuth\n      2.0 \"\
    response_type\" values that this authorization server supports\n   o  Change Controller:\
    \ IESG\n   o  Specification Document(s): Section 2 of RFC 8414\n   o  Metadata\
    \ Name: response_modes_supported\n   o  Metadata Description: JSON array containing\
    \ a list of the OAuth\n      2.0 \"response_mode\" values that this authorization\
    \ server supports\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 2 of RFC 8414\n   o  Metadata Name: grant_types_supported\n   o  Metadata\
    \ Description: JSON array containing a list of the OAuth\n      2.0 grant type\
    \ values that this authorization server supports\n   o  Change Controller: IESG\n\
    \   o  Specification Document(s): Section 2 of RFC 8414\n   o  Metadata Name:\
    \ token_endpoint_auth_methods_supported\n   o  Metadata Description: JSON array\
    \ containing a list of client\n      authentication methods supported by this\
    \ token endpoint\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 2 of RFC 8414\n   o  Metadata Name: token_endpoint_auth_signing_alg_values_supported\n\
    \   o  Metadata Description: JSON array containing a list of the JWS\n      signing\
    \ algorithms supported by the token endpoint for the\n      signature on the JWT\
    \ used to authenticate the client at the token\n      endpoint\n   o  Change Controller:\
    \ IESG\n   o  Specification Document(s): Section 2 of RFC 8414\n   o  Metadata\
    \ Name: service_documentation\n   o  Metadata Description: URL of a page containing\
    \ human-readable\n      information that developers might want or need to know\
    \ when using\n      the authorization server\n   o  Change Controller: IESG\n\
    \   o  Specification Document(s): Section 2 of RFC 8414\n   o  Metadata Name:\
    \ ui_locales_supported\n   o  Metadata Description: Languages and scripts supported\
    \ for the user\n      interface, represented as a JSON array of language tag values\
    \ from\n      BCP 47\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 2 of RFC 8414\n   o  Metadata Name: op_policy_uri\n   o  Metadata Description:\
    \ URL that the authorization server provides\n      to the person registering\
    \ the client to read about the\n      authorization server's requirements on how\
    \ the client can use the\n      data provided by the authorization server\n  \
    \ o  Change Controller: IESG\n   o  Specification Document(s): Section 2 of RFC\
    \ 8414\n   o  Metadata Name: op_tos_uri\n   o  Metadata Description: URL that\
    \ the authorization server provides\n      to the person registering the client\
    \ to read about the\n      authorization server's terms of service\n   o  Change\
    \ Controller: IESG\n   o  Specification Document(s): Section 2 of RFC 8414\n \
    \  o  Metadata Name: revocation_endpoint\n   o  Metadata Description: URL of the\
    \ authorization server's OAuth 2.0\n      revocation endpoint\n   o  Change Controller:\
    \ IESG\n   o  Specification Document(s): Section 2 of RFC 8414\n   o  Metadata\
    \ Name: revocation_endpoint_auth_methods_supported\n   o  Metadata Description:\
    \ JSON array containing a list of client\n      authentication methods supported\
    \ by this revocation endpoint\n   o  Change Controller: IESG\n   o  Specification\
    \ Document(s): Section 2 of RFC 8414\n   o  Metadata Name:\n      revocation_endpoint_auth_signing_alg_values_supported\n\
    \   o  Metadata Description: JSON array containing a list of the JWS\n      signing\
    \ algorithms supported by the revocation endpoint for the\n      signature on\
    \ the JWT used to authenticate the client at the\n      revocation endpoint\n\
    \   o  Change Controller: IESG\n   o  Specification Document(s): Section 2 of\
    \ RFC 8414\n   o  Metadata Name: introspection_endpoint\n   o  Metadata Description:\
    \ URL of the authorization server's OAuth 2.0\n      introspection endpoint\n\
    \   o  Change Controller: IESG\n   o  Specification Document(s): Section 2 of\
    \ RFC 8414\n   o  Metadata Name: introspection_endpoint_auth_methods_supported\n\
    \   o  Metadata Description: JSON array containing a list of client\n      authentication\
    \ methods supported by this introspection endpoint\n   o  Change Controller: IESG\n\
    \   o  Specification Document(s): Section 2 of RFC 8414\n   o  Metadata Name:\n\
    \      introspection_endpoint_auth_signing_alg_values_supported\n   o  Metadata\
    \ Description: JSON array containing a list of the JWS\n      signing algorithms\
    \ supported by the introspection endpoint for the\n      signature on the JWT\
    \ used to authenticate the client at the\n      introspection endpoint\n   o \
    \ Change Controller: IESG\n   o  Specification Document(s): Section 2 of RFC 8414\n\
    \   o  Metadata Name: code_challenge_methods_supported\n   o  Metadata Description:\
    \ PKCE code challenge methods supported by\n      this authorization server\n\
    \   o  Change Controller: IESG\n   o  Specification Document(s): Section 2 of\
    \ RFC 8414\n   o  Metadata Name: signed_metadata\n   o  Metadata Description:\
    \ Signed JWT containing metadata values about\n      the authorization server\
    \ as claims\n   o  Change Controller: IESG\n   o  Specification Document(s): Section\
    \ 2.1 of RFC 8414\n"
- title: 7.2.  Updated Registration Instructions
  contents:
  - "7.2.  Updated Registration Instructions\n   This specification adds to the instructions\
    \ for the Designated\n   Experts of the following IANA registries, both of which\
    \ are in the\n   \"OAuth Parameters\" registry [IANA.OAuth.Parameters]:\n   o\
    \  OAuth Access Token Types\n   o  OAuth Token Endpoint Authentication Methods\n\
    \   IANA has added a link to this specification in the Reference sections\n  \
    \ of these registries.\n   For these registries, the Designated Experts must reject\
    \ registration\n   requests in one registry for values already occurring in the\
    \ other\n   registry.  This is necessary because the\n   \"introspection_endpoint_auth_methods_supported\"\
    \ parameter allows for\n   the use of values from either registry.  That way,\
    \ because the values\n   in the two registries will continue to be mutually exclusive,\
    \ no\n   ambiguities will arise.\n"
- title: 7.3.  Well-Known URI Registry
  contents:
  - "7.3.  Well-Known URI Registry\n   This specification registers the well-known\
    \ URI defined in Section 3\n   in the IANA \"Well-Known URIs\" registry [IANA.well-known]\
    \ established\n   by RFC 5785 [RFC5785].\n"
- title: 7.3.1.  Registry Contents
  contents:
  - "7.3.1.  Registry Contents\n   o  URI suffix: oauth-authorization-server\n   o\
    \  Change controller: IESG\n   o  Specification document: Section 3 of RFC 8414\n\
    \   o  Related information: (none)\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [BCP195]   Sheffer, Y., Holz, R., and P. Saint-Andre,\n\
    \              \"Recommendations for Secure Use of Transport Layer\n         \
    \     Security (TLS) and Datagram Transport Layer Security\n              (DTLS)\"\
    , BCP 195, RFC 7525, May 2015,\n              <http://www.rfc-editor.org/info/bcp195>.\n\
    \   [IANA.OAuth.Parameters]\n              IANA, \"OAuth Parameters\",\n     \
    \         <https://www.iana.org/assignments/oauth-parameters>.\n   [JWE]     \
    \ Jones, M. and J. Hildebrand, \"JSON Web Encryption (JWE)\",\n              RFC\
    \ 7516, DOI 10.17487/RFC7516, May 2015,\n              <https://www.rfc-editor.org/info/rfc7516>.\n\
    \   [JWK]      Jones, M., \"JSON Web Key (JWK)\", RFC 7517,\n              DOI\
    \ 10.17487/RFC7517, May 2015,\n              <https://www.rfc-editor.org/info/rfc7517>.\n\
    \   [JWS]      Jones, M., Bradley, J., and N. Sakimura, \"JSON Web\n         \
    \     Signature (JWS)\", RFC 7515, DOI 10.17487/RFC7515, May\n              2015,\
    \ <https://www.rfc-editor.org/info/rfc7515>.\n   [JWT]      Jones, M., Bradley,\
    \ J., and N. Sakimura, \"JSON Web Token\n              (JWT)\", RFC 7519, DOI\
    \ 10.17487/RFC7519, May 2015,\n              <https://www.rfc-editor.org/info/rfc7519>.\n\
    \   [OAuth.Post]\n              Jones, M. and B. Campbell, \"OAuth 2.0 Form Post\
    \ Response\n              Mode\", April 2015, <http://openid.net/specs/\n    \
    \          oauth-v2-form-post-response-mode-1_0.html>.\n   [OAuth.Responses]\n\
    \              de Medeiros, B., Ed., Scurtescu, M., Tarjan, P., and M.\n     \
    \         Jones, \"OAuth 2.0 Multiple Response Type Encoding\n              Practices\"\
    , February 2014, <http://openid.net/specs/\n              oauth-v2-multiple-response-types-1_0.html>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC5246]\
    \  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)\
    \ Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August\
    \ 2008,\n              <https://www.rfc-editor.org/info/rfc5246>.\n   [RFC5646]\
    \  Phillips, A., Ed. and M. Davis, Ed., \"Tags for Identifying\n             \
    \ Languages\", BCP 47, RFC 5646, DOI 10.17487/RFC5646,\n              September\
    \ 2009, <https://www.rfc-editor.org/info/rfc5646>.\n   [RFC5785]  Nottingham,\
    \ M. and E. Hammer-Lahav, \"Defining Well-Known\n              Uniform Resource\
    \ Identifiers (URIs)\", RFC 5785,\n              DOI 10.17487/RFC5785, April 2010,\n\
    \              <https://www.rfc-editor.org/info/rfc5785>.\n   [RFC6125]  Saint-Andre,\
    \ P. and J. Hodges, \"Representation and\n              Verification of Domain-Based\
    \ Application Service Identity\n              within Internet Public Key Infrastructure\
    \ Using X.509\n              (PKIX) Certificates in the Context of Transport Layer\n\
    \              Security (TLS)\", RFC 6125, DOI 10.17487/RFC6125, March\n     \
    \         2011, <https://www.rfc-editor.org/info/rfc6125>.\n   [RFC6749]  Hardt,\
    \ D., Ed., \"The OAuth 2.0 Authorization Framework\",\n              RFC 6749,\
    \ DOI 10.17487/RFC6749, October 2012,\n              <https://www.rfc-editor.org/info/rfc6749>.\n\
    \   [RFC7009]  Lodderstedt, T., Ed., Dronia, S., and M. Scurtescu, \"OAuth\n \
    \             2.0 Token Revocation\", RFC 7009, DOI 10.17487/RFC7009,\n      \
    \        August 2013, <https://www.rfc-editor.org/info/rfc7009>.\n   [RFC7033]\
    \  Jones, P., Salgueiro, G., Jones, M., and J. Smarr,\n              \"WebFinger\"\
    , RFC 7033, DOI 10.17487/RFC7033, September\n              2013, <https://www.rfc-editor.org/info/rfc7033>.\n\
    \   [RFC7591]  Richer, J., Ed., Jones, M., Bradley, J., Machulak, M., and\n  \
    \            P. Hunt, \"OAuth 2.0 Dynamic Client Registration Protocol\",\n  \
    \            RFC 7591, DOI 10.17487/RFC7591, July 2015,\n              <https://www.rfc-editor.org/info/rfc7591>.\n\
    \   [RFC7636]  Sakimura, N., Ed., Bradley, J., and N. Agarwal, \"Proof Key\n \
    \             for Code Exchange by OAuth Public Clients\", RFC 7636,\n       \
    \       DOI 10.17487/RFC7636, September 2015,\n              <https://www.rfc-editor.org/info/rfc7636>.\n\
    \   [RFC7662]  Richer, J., Ed., \"OAuth 2.0 Token Introspection\",\n         \
    \     RFC 7662, DOI 10.17487/RFC7662, October 2015,\n              <https://www.rfc-editor.org/info/rfc7662>.\n\
    \   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n      \
    \        Writing an IANA Considerations Section in RFCs\", BCP 26,\n         \
    \     RFC 8126, DOI 10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8259]  Bray,\
    \ T., Ed., \"The JavaScript Object Notation (JSON) Data\n              Interchange\
    \ Format\", STD 90, RFC 8259,\n              DOI 10.17487/RFC8259, December 2017,\n\
    \              <https://www.rfc-editor.org/info/rfc8259>.\n   [UNICODE]  The Unicode\
    \ Consortium, \"The Unicode Standard\",\n              <http://www.unicode.org/versions/latest/>.\n\
    \   [USA15]    Davis, M., Ed. and K. Whistler, Ed., \"Unicode\n              Normalization\
    \ Forms\", Unicode Standard Annex #15, May\n              2018, <http://www.unicode.org/reports/tr15/>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [IANA.well-known]\n              IANA, \"Well-Known\
    \ URIs\",\n              <https://www.iana.org/assignments/well-known-uris>.\n\
    \   [MIX-UP]   Jones, M., Bradley, J., and N. Sakimura, \"OAuth 2.0 Mix-Up\n \
    \             Mitigation\", Work in Progress, draft-ietf-oauth-mix-up-\n     \
    \         mitigation-01, July 2016.\n   [OpenID.Core]\n              Sakimura,\
    \ N., Bradley, J., Jones, M., de Medeiros, B., and\n              C. Mortimore,\
    \ \"OpenID Connect Core 1.0\", November 2014,\n              <http://openid.net/specs/openid-connect-core-1_0.html>.\n\
    \   [OpenID.Discovery]\n              Sakimura, N., Bradley, J., Jones, M., and\
    \ E. Jay, \"OpenID\n              Connect Discovery 1.0\", November 2014,\n  \
    \            <http://openid.net/specs/\n              openid-connect-discovery-1_0.html>.\n\
    \   [OpenID.Registration]\n              Sakimura, N., Bradley, J., and M. Jones,\
    \ \"OpenID Connect\n              Dynamic Client Registration 1.0\", November\
    \ 2014,\n              <http://openid.net/specs/\n              openid-connect-registration-1_0.html>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This specification is based on the OpenID Connect Discovery\
    \ 1.0\n   specification, which was produced by the OpenID Connect working group\n\
    \   of the OpenID Foundation.  This specification standardizes the de\n   facto\
    \ usage of the metadata format defined by OpenID Connect\n   Discovery to publish\
    \ OAuth authorization server metadata.\n   The authors would like to thank the\
    \ following people for their\n   reviews of this specification: Shwetha Bhandari,\
    \ Ben Campbell, Brian\n   Campbell, Brian Carpenter, William Denniss, Vladimir\
    \ Dzhuvinov,\n   Donald Eastlake, Samuel Erdtman, George Fletcher, Dick Hardt,\
    \ Phil\n   Hunt, Alexey Melnikov, Tony Nadalin, Mark Nottingham, Eric Rescorla,\n\
    \   Justin Richer, Adam Roach, Hannes Tschofenig, and Hans Zandbelt.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Michael B. Jones\n   Microsoft\n   Email: mbj@microsoft.com\n\
    \   URI:   http://self-issued.info/\n   Nat Sakimura\n   Nomura Research Institute,\
    \ Ltd.\n   Email: n-sakimura@nri.co.jp\n   URI:   http://nat.sakimura.org/\n \
    \  John Bradley\n   Yubico\n   Email: RFC8414@ve7jtb.com\n   URI:   http://www.thread-safe.com/\n"
