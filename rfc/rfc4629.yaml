- title: __initial_text__
  contents:
  - '             RTP Payload Format for ITU-T Rec. H.263 Video

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a scheme to packetize an H.263 video stream\n\
    \   for transport using the Real-time Transport Protocol (RTP) with any\n   of\
    \ the underlying protocols that carry RTP.\n   The document also describes the\
    \ syntax and semantics of the Session\n   Description Protocol (SDP) parameters\
    \ needed to support the H.263\n   video codec.\n   The document obsoletes RFC\
    \ 2429 and updates the H263-1998 and\n   H263-2000 media type in RFC 3555.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................3\n  \
    \ 2. New H.263 Features ..............................................3\n   3.\
    \ Usage of RTP ....................................................4\n      3.1.\
    \ RTP Header Usage ...........................................5\n      3.2. Video\
    \ Packet Structure .....................................6\n   4. Design Considerations\
    \ ...........................................7\n   5. H.263+ Payload Header ...........................................9\n\
    \      5.1. General H.263+ Payload Header ..............................9\n  \
    \    5.2. Video Redundancy Coding Header Extension ..................10\n   6.\
    \ Packetization Schemes ..........................................12\n      6.1.\
    \ Picture Segment Packets and Sequence Ending\n           Packets (P=1) .............................................12\n\
    \           6.1.1. Packets that begin with a Picture Start Code .......12\n  \
    \         6.1.2. Packets that begin with GBSC or SSC ................13\n    \
    \       6.1.3. Packets that begin with an EOS or EOSBS Code .......14\n      6.2.\
    \ Encapsulating Follow-on Packet (P=0) ......................15\n   7. Use of\
    \ this Payload Specification ..............................15\n   8. Media Type\
    \ Definition ..........................................17\n      8.1. Media Type\
    \ Registrations ..................................17\n           8.1.1. Registration\
    \ of Media Type video/H263-1998 .........17\n           8.1.2. Registration of\
    \ Media Type video/H263-2000 .........21\n      8.2. SDP Usage .................................................22\n\
    \           8.2.1. Usage with the SDP Offer Answer Model ..............23\n  \
    \ 9. Backward Compatibility to RFC 2429 .............................25\n    \
    \  9.1. New Optional Parameters for SDP ...........................25\n   10.\
    \ IANA Considerations ...........................................25\n   11. Security\
    \ Considerations .......................................25\n   12. Acknowledgments\
    \ ...............................................26\n   13. Changes from Previous\
    \ Versions of the Documents ...............26\n      13.1. Changes from RFC 2429\
    \ ....................................26\n      13.2. Changes from RFC 3555 ....................................26\n\
    \   14. References ....................................................26\n  \
    \    14.1. Normative References .....................................26\n    \
    \  14.2. Informative References ...................................27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies an RTP payload header format applicable\
    \ to\n   the transmission of video streams based on the 1998 and 2000 versions\n\
    \   of International Telecommunication Union-Telecommunication\n   Standardization\
    \ Sector (ITU-T) Recommendation H.263 [H263].  Because\n   the 1998 and 2000 versions\
    \ of H.263 are a superset of the 1996\n   syntax, this format can also be used\
    \ with the 1996 version of H.263\n   and is recommended for this use by new implementations.\
    \  This format\n   replaces the payload format in RFC 2190 [RFC2190], which continues\
    \ to\n   be used by some existing implementations, and can be useful for\n   backward\
    \ compatibility.  New implementations supporting H.263 SHALL\n   use the payload\
    \ format described in this document.  RFC 2190 is moved\n   to historic status\
    \ [RFC4628].\n   The document updates the media type registration that was previously\n\
    \   in RFC 3555 [RFC3555].\n   This document obsoletes RFC 2429 [RFC2429].\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119 [RFC2119] and\n   indicate requirement levels for compliant RTP implementations.\n"
- title: 2.  New H.263 Features
  contents:
  - "2.  New H.263 Features\n   The 1998 version of ITU-T Recommendation H.263 added\
    \ numerous coding\n   options to improve codec performance over the 1996 version.\
    \  In this\n   document, the 1998 version is referred to as H.263+ and the 2000\n\
    \   version as H.263++.\n   Among the new options, the ones with the biggest impact\
    \ on the RTP\n   payload specification and the error resilience of the video content\n\
    \   are the slice structured mode, the independent segment decoding mode,\n  \
    \ the reference picture selection mode, and the scalability mode.  This\n   section\
    \ summarizes the impact of these new coding options on\n   packetization.  Refer\
    \ to [H263] for more information on coding\n   options.\n   The slice structured\
    \ mode was added to H.263+ for three purposes: to\n   provide enhanced error resilience\
    \ capability, to make the bitstream\n   more amenable for use with an underlying\
    \ packet transport such as\n   RTP, and to minimize video delay.  The slice structured\
    \ mode supports\n   fragmentation at macroblock boundaries.\n   With the independent\
    \ segment decoding (ISD) option, a video picture\n   frame is broken into segments\
    \ and encoded in such a way that each\n   segment is independently decodable.\
    \  Utilizing ISD in a lossy network\n   environment helps to prevent the propagation\
    \ of errors from one\n   segment of the picture to others.\n   The reference picture\
    \ selection mode allows the use of an older\n   reference picture rather than\
    \ the one immediately preceding the\n   current picture.  Usually, the last transmitted\
    \ frame is implicitly\n   used as the reference picture for inter-frame prediction.\
    \  If the\n   reference picture selection mode is used, the data stream carries\n\
    \   information on what reference frame should be used, indicated by the\n   temporal\
    \ reference as an ID for that reference frame.  The reference\n   picture selection\
    \ mode may be used with or without a back channel,\n   which provides information\
    \ to the encoder about the internal status\n   of the decoder.  However, no special\
    \ provision is made herein for\n   carrying back channel information.  The Extended\
    \ RTP Profile for RTP\n   Control Protocol (RTCP)-based Feedback [RFC4585] MAY\
    \ be used as a\n   back channel mechanism.\n   H.263+ also includes bitstream\
    \ scalability as an optional coding\n   mode.  Three kinds of scalability are\
    \ defined: temporal, signal-to-\n   noise ratio (SNR), and spatial scalability.\
    \  Temporal scalability is\n   achieved via the disposable nature of bi-directionally\
    \ predicted\n   frames, or B-frames.  (A low-delay form of temporal scalability\
    \ known\n   as P-picture temporal scalability can also be achieved by using the\n\
    \   reference picture selection mode, described in the previous\n   paragraph.)\
    \  SNR scalability permits refinement of encoded video\n   frames, thereby improving\
    \ the quality (or SNR).  Spatial scalability\n   is similar to SNR scalability\
    \ except that the refinement layer is\n   twice the size of the base layer in\
    \ the horizontal dimension,\n   vertical dimension, or both.\n   H.263++ added\
    \ some new functionalities.  Among the new\n   functionalities are support for\
    \ interlace mode, specified in H.263,\n   annex W.6.3.11, and the definition of\
    \ profiles and levels in H.263\n   annex X.\n"
- title: 3.  Usage of RTP
  contents:
  - "3.  Usage of RTP\n   When transmitting H.263+ video streams over the Internet,\
    \ the output\n   of the encoder can be packetized directly.  All the bits resulting\n\
    \   from the bitstream (including the fixed length codes and variable\n   length\
    \ codes) will be included in the packet, the only exception\n   being that when\
    \ the payload of a packet begins with a Picture, GOB,\n   Slice, End of Sequence\
    \ (EOS), or End of Sub-Bit Stream (EOSBS) start\n   code, the first 2 (all-zero)\
    \ bytes of the start code shall be removed\n   and replaced by setting an indicator\
    \ bit in the payload header.\n   For H.263+ bitstreams coded with temporal, spatial,\
    \ or SNR\n   scalability, each layer may be transported to a different network\n\
    \   address.  More specifically, each layer may use a unique IP address\n   and\
    \ port number combination.  The temporal relations between layers\n   shall be\
    \ expressed using the RTP timestamp so that they can be\n   synchronized at the\
    \ receiving ends in multicast or unicast\n   applications.\n   The H.263+ video\
    \ stream will be carried as payload data within RTP\n   packets.  A new H.263+\
    \ payload header is defined in Section 5; it\n   updates the one specified in\
    \ RFC 2190.  This section defines the\n   usage of the RTP fixed header and H.263+\
    \ video packet structure.\n"
- title: 3.1.  RTP Header Usage
  contents:
  - "3.1.  RTP Header Usage\n   Each RTP packet starts with a fixed RTP header.  The\
    \ following fields\n   of the RTP fixed header used for H.263+ video streams are\
    \ further\n   emphasized here.\n   Marker bit (M bit): The Marker bit of the RTP\
    \ header is set to 1 when\n   the current packet carries the end of current frame\
    \ and is 0\n   otherwise.\n   Payload Type (PT): The RTP profile for a particular\
    \ class of\n   applications will assign a payload type for this encoding, or,\
    \ if\n   that is not done, a payload type in the dynamic range shall be chosen\n\
    \   by the sender.\n   Timestamp: The RTP Timestamp encodes the sampling instance\
    \ of the\n   first video frame data contained in the RTP data packet.  The RTP\n\
    \   timestamp shall be the same on successive packets if a video frame\n   occupies\
    \ more than one packet.  In a multilayer scenario, all\n   pictures corresponding\
    \ to the same temporal reference should use the\n   same timestamp.  If temporal\
    \ scalability is used (if B-frames are\n   present), the timestamp may not be\
    \ monotonically increasing in the\n   RTP stream.  If B-frames are transmitted\
    \ on a separate layer and\n   address, they must be synchronized properly with\
    \ the reference\n   frames.  Refer to ITU-T Recommendation H.263 [H263] for information\n\
    \   on required transmission order to a decoder.  For an H.263+ video\n   stream,\
    \ the RTP timestamp is based on a 90 kHz clock, the same as\n   that of the RTP\
    \ payload for H.261 stream [RFC2032].  Since both the\n   H.263+ data and the\
    \ RTP header contain time information, that timing\n   information must run synchronously.\
    \  That is, both the RTP timestamp\n   and the temporal reference (TR in the picture\
    \ header of H.263) should\n   carry the same relative timing information.  Any\
    \ H.263+ picture clock\n   frequency can be expressed as 1800000/(cd*cf) source\
    \ pictures per\n   second, in which cd is an integer from 1 to 127 and cf is either\
    \ 1000\n   or 1001.  Using the 90 kHz clock of the RTP timestamp, the time\n \
    \  increment between each coded H.263+ picture should therefore be an\n   integer\
    \ multiple of (cd*cf)/20.  This will always be an integer for\n   any \"reasonable\"\
    \ picture clock frequency (for example, it is 3003 for\n   30/1.001 Hz NTSC; 3600\
    \ for 25 Hz PAL; 3750 for 24 Hz film; and 1500,\n   1250, or 1200 for the computer\
    \ display update rates of 60, 72, or 75\n   Hz, respectively).  For RTP packetization\
    \ of hypothetical H.263+\n   bitstreams using \"unreasonable\" custom picture\
    \ clock frequencies,\n   mathematical rounding could become necessary for generating\
    \ the RTP\n   timestamps.\n"
- title: 3.2.  Video Packet Structure
  contents:
  - "3.2.  Video Packet Structure\n   A section of an H.263+ compressed bitstream\
    \ is carried as a payload\n   within each RTP packet.  For each RTP packet, the\
    \ RTP header is\n   followed by an H.263+ payload header, which is followed by\
    \ a number\n   of bytes of a standard H.263+ compressed bitstream.  The size of\
    \ the\n   H.263+ payload header is variable, depending on the payload involved,\n\
    \   as detailed in the Section 4.  The layout of the RTP H.263+ video\n   packet\
    \ is shown as\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      :    RTP Header                                                 :\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      :\
    \    H.263+ Payload Header                                      :\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      :    H.263+ Compressed Data Stream                              :\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Any\
    \ H.263+ start codes can be byte aligned by an encoder by using the\n   stuffing\
    \ mechanisms of H.263+.  As specified in H.263+, picture,\n   slice, and EOSBS\
    \ starts codes shall always be byte aligned, and GOB\n   and EOS start codes may\
    \ be byte aligned.  For packetization purposes,\n   GOB start codes should be\
    \ byte aligned; however, since this is not\n   required in H.263+, there may be\
    \ some cases where GOB start codes are\n   not aligned, such as when transmitting\
    \ existing content, or when\n   using H.263 encoders that do not support GOB start\
    \ code alignment.\n   In this case, Follow-on Packets (see Section 5.2) should\
    \ be used for\n   packetization.\n   All H.263+ start codes (Picture, GOB, Slice,\
    \ EOS, and EOSBS) begin\n   with 16 zero-valued bits.  If a start code is byte\
    \ aligned and it\n   occurs at the beginning of a packet, these two bytes shall\
    \ be removed\n   from the H.263+ compressed data stream in the packetization process\n\
    \   and shall instead be represented by setting a bit (the P bit) in the\n   payload\
    \ header.\n"
- title: 4.  Design Considerations
  contents:
  - "4.  Design Considerations\n   The goals of this payload format are to specify\
    \ an efficient way of\n   encapsulating an H.263+ standard compliant bitstream\
    \ and to enhance\n   the resiliency towards packet losses.  Due to the large number\
    \ of\n   different possible coding schemes in H.263+, a copy of the picture\n\
    \   header with configuration information is inserted into the payload\n   header\
    \ when appropriate.  The use of that copy of the picture header\n   along with\
    \ the payload data can allow decoding of a received packet\n   even in cases when\
    \ another packet containing the original picture\n   header becomes lost.\n  \
    \ There are a few assumptions and constraints associated with this\n   H.263+\
    \ payload header design.  The purpose of this section is to\n   point out various\
    \ design issues and also to discuss several coding\n   options provided by H.263+\
    \ that may impact the performance of\n   network-based H.263+ video.\n   o  The\
    \ optional slice structured mode described in Annex K of [H263]\n      enables\
    \ more flexibility for packetization.  Similar to a picture\n      segment that\
    \ begins with a GOB header, the motion vector\n      predictors in a slice are\
    \ restricted to reside within its\n      boundaries.  However, slices provide\
    \ much greater freedom in the\n      selection of the size and shape of the area\
    \ that is represented as\n      a distinct decodable region.  In particular, slices\
    \ can have a\n      size that is dynamically selected to allow the data for each\
    \ slice\n      to fit into a chosen packet size.  Slices can also be chosen to\n\
    \      have a rectangular shape, which is conducive for minimizing the\n     \
    \ impact of errors and packet losses on motion-compensated\n      prediction.\
    \  For these reasons, the use of the slice structured\n      mode is strongly\
    \ recommended for any applications used in\n      environments where significant\
    \ packet loss occurs.\n   o  In non-rectangular slice structured mode, only complete\
    \ slices\n      SHOULD be included in a packet.  In other words, slices should\
    \ not\n      be fragmented across packet boundaries.  The only reasonable need\n\
    \      for a slice to be fragmented across packet boundaries is when the\n   \
    \   encoder that generated the H.263+ data stream could not be\n      influenced\
    \ by an awareness of the packetization process (such as\n      when sending H.263+\
    \ data through a network other than the one to\n      which the encoder is attached,\
    \ as in network gateway\n      implementations).  Optimally, each packet will\
    \ contain only one\n      slice.\n   o  The independent segment decoding (ISD)\
    \ described in Annex R of\n      [H263] prevents any data dependency across slice\
    \ or GOB boundaries\n      in the reference picture.  It can be utilized to improve\n\
    \      resiliency further in high loss conditions.\n   o  If ISD is used in conjunction\
    \ with the slice structure, the\n      rectangular slice submode shall be enabled,\
    \ and the dimensions and\n      quantity of the slices present in a frame shall\
    \ remain the same\n      between each two intra-coded frames (I-frames), as required\
    \ in\n      H.263+.  The individual ISD segments may also be entirely intra\n\
    \      coded from time to time to realize quick error recovery without\n     \
    \ adding the latency time associated with sending complete INTRA-\n      pictures.\n\
    \   o  When the slice structure is not applied, the insertion of a\n      (preferably\
    \ byte-aligned) GOB header can be used to provide resync\n      boundaries in\
    \ the bitstream, as the presence of a GOB header\n      eliminates the dependency\
    \ of motion vector prediction across GOB\n      boundaries.  These resync boundaries\
    \ provide natural locations for\n      packet payload boundaries.\n   o  H.263+\
    \ allows picture headers to be sent in an abbreviated form in\n      order to\
    \ prevent repetition of overhead information that does not\n      change from\
    \ picture to picture.  For resiliency, sending a\n      complete picture header\
    \ for every frame is often advisable.  This\n      means (especially in cases\
    \ with high packet loss probability in\n      which picture header contents are\
    \ not expected to be highly\n      predictable) that the sender may find it advisable\
    \ always to set\n      the subfield UFEP in PLUSPTYPE to '001' in the H.263+ video\n\
    \      bitstream.  (See [H263] for the definition of the UFEP and\n      PLUSPTYPE\
    \ fields).\n   o  In a multi-layer scenario, each layer may be transmitted to\
    \ a\n      different network address.  The configuration of each layer, such\n\
    \      as the enhancement layer number (ELNUM), reference layer number\n     \
    \ (RLNUM), and scalability type should be determined at the start of\n      the\
    \ session and should not change during the course of the\n      session.\n   o\
    \  All start codes can be byte aligned, and picture, slice, and EOSBS\n      start\
    \ codes are always byte aligned.  The boundaries of these\n      syntactical elements\
    \ provide ideal locations for placing packet\n      boundaries.\n   o  We assume\
    \ that a maximum Picture Header size of 504 bits is\n      sufficient.  The syntax\
    \ of H.263+ does not explicitly prohibit\n      larger picture header sizes, but\
    \ the use of such extremely large\n      picture headers is not expected.\n"
- title: 5.  H.263+ Payload Header
  contents:
  - "5.  H.263+ Payload Header\n   For H.263+ video streams, each RTP packet shall\
    \ carry only one H.263+\n   video packet.  The H.263+ payload header shall always\
    \ be present for\n   each H.263+ video packet.  The payload header is of variable\
    \ length.\n   A 16-bit field of the general payload header, defined in 5.1, may\
    \ be\n   followed by an 8 bit field for Video Redundancy Coding (VRC)\n   information,\
    \ and/or by a variable-length extra picture header as\n   indicated by PLEN. \
    \ These optional fields appear in the order given\n   above, when present.\n \
    \  If an extra picture header is included in the payload header, the\n   length\
    \ of the picture header in number of bytes is specified by PLEN.\n   The minimum\
    \ length of the payload header is 16 bits, PLEN equal to 0\n   and no VRC information\
    \ being present.\n   The remainder of this section defines the various components\
    \ of the\n   RTP payload header.  Section 6 defines the various packet types that\n\
    \   are used to carry different types of H.263+ coded data, and Section 7\n  \
    \ summarizes how to distinguish between the various packet types.\n"
- title: 5.1.  General H.263+ Payload Header
  contents:
  - "5.1.  General H.263+ Payload Header\n   The H.263+ payload header is structured\
    \ as follows:\n         0                   1\n         0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        |   RR    |P|V|\
    \   PLEN    |PEBIT|\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   RR: 5 bits\n\
    \      Reserved bits.  It SHALL be zero and MUST be ignored by receivers.\n  \
    \ P: 1 bit\n      Indicates the picture start or a picture segment (GOB/Slice)\
    \ start\n      or a video sequence end (EOS or EOSBS).  Two bytes of zero bits\n\
    \      then have to be prefixed to the payload of such a packet to\n      compose\
    \ a complete picture/GOB/slice/EOS/EOSBS start code.  This\n      bit allows the\
    \ omission of the two first bytes of the start codes,\n      thus improving the\
    \ compression ratio.\n   V: 1 bit\n      Indicates the presence of an 8-bit field\
    \ containing information\n      for Video Redundancy Coding (VRC), which follows\
    \ immediately after\n      the initial 16 bits of the payload header, if present.\
    \  For syntax\n      and semantics of that 8-bit VRC field, see Section 5.2.\n\
    \   PLEN: 6 bits\n      Length, in bytes, of the extra picture header.  If no\
    \ extra\n      picture header is attached, PLEN is 0.  If PLEN>0, the extra\n\
    \      picture header is attached immediately following the rest of the\n    \
    \  payload header.  Note that the length reflects the omission of the\n      first\
    \ two bytes of the picture start code (PSC).  See Section 6.1.\n   PEBIT: 3 bits\n\
    \      Indicates the number of bits that shall be ignored in the last\n      byte\
    \ of the picture header.  If PLEN is not zero, the ignored bits\n      shall be\
    \ the least significant bits of the byte.  If PLEN is zero,\n      then PEBIT\
    \ shall also be zero.\n"
- title: 5.2.  Video Redundancy Coding Header Extension
  contents:
  - "5.2.  Video Redundancy Coding Header Extension\n   Video Redundancy Coding (VRC)\
    \ is an optional mechanism intended to\n   improve error resilience over packet\
    \ networks.  Implementing VRC in\n   H.263+ will require the Reference Picture\
    \ Selection option described\n   in Annex N of [H263].  By having multiple \"\
    threads\" of independently\n   inter-frame predicted pictures, damage to an individual\
    \ frame will\n   cause distortions only within its own thread, leaving the other\n\
    \   threads unaffected.  From time to time, all threads converge to a\n   so-called\
    \ sync frame (an INTRA picture or a non-INTRA picture that is\n   redundantly\
    \ represented within multiple threads); from this sync\n   frame, the independent\
    \ threads are started again.  For more\n   information on codec support for VRC,\
    \ see [Vredun].\n   P-picture temporal scalability is another use of the reference\n\
    \   picture selection mode and can be considered a special case of VRC in\n  \
    \ which only one copy of each sync frame may be sent.  It offers a\n   thread-based\
    \ method of temporal scalability without the increased\n   delay caused by the\
    \ use of B pictures.  In this use, sync frames sent\n   in the first thread of\
    \ pictures are also used for the prediction of a\n   second thread of pictures\
    \ that fall temporally between the sync\n   frames to increase the resulting frame\
    \ rate.  In this use, the\n   pictures in the second thread can be discarded in\
    \ order to obtain a\n   reduction of bit rate or decoding complexity without harming\
    \ the\n   ability to decode later pictures.  A third or more threads, can also\n\
    \   be added, but each thread is predicted only from the sync frames\n   (which\
    \ are sent at least in thread 0) or from frames within the same\n   thread.\n\
    \   While a VRC data stream is (like all H.263+ data) totally self-\n   contained,\
    \ it may be useful for the transport hierarchy\n   implementation to have knowledge\
    \ about the current damage status of\n   each thread.  On the Internet, this status\
    \ can easily be determined\n   by observing the marker bit, the sequence number\
    \ of the RTP header,\n   the thread-id, and a circling \"packet per thread\" number.\
    \  The latter\n   two numbers are coded in the VRC header extension.\n   The format\
    \ of the VRC header extension is as follows:\n         0 1 2 3 4 5 6 7\n     \
    \   +-+-+-+-+-+-+-+-+\n        | TID | Trun  |S|\n        +-+-+-+-+-+-+-+-+\n\
    \   TID: 3 bits\n   Thread ID.  Up to 7 threads are allowed.  Each frame of H.263+\
    \ VRC\n   data will use as reference information only sync frames or frames\n\
    \   within the same thread.  By convention, thread 0 is expected to be\n   the\
    \ \"canonical\" thread, which is the thread from which the sync frame\n   should\
    \ ideally be used.  In the case of corruption or loss of the\n   thread 0 representation,\
    \ a representation of the sync frame with a\n   higher thread number can be used\
    \ by the decoder.  Lower thread\n   numbers are expected to contain representations\
    \ of the sync frames\n   equal to or better than higher thread numbers in the\
    \ absence of data\n   corruption or loss.  See [Vredun] for a detailed discussion\
    \ of VRC.\n   Trun: 4 bits\n   Monotonically increasing (modulo 16) 4-bit number\
    \ counting the packet\n   number within each thread.\n   S: 1 bit\n   A bit that\
    \ indicates that the packet content is for a sync frame.  An\n   encoder using\
    \ VRC may send several representations of the same \"sync\"\n   picture, in order\
    \ to ensure that, regardless of which thread of\n   pictures is corrupted by errors\
    \ or packet losses, the reception of at\n   least one representation of a particular\
    \ picture is ensured (within\n   at least one thread).  The sync picture can then\
    \ be used for the\n   prediction of any thread.  If packet losses have not occurred,\
    \ then\n   the sync frame contents of thread 0 can be used, and those of other\n\
    \   threads can be discarded (and similarly for other threads).  Thread 0\n  \
    \ is considered the \"canonical\" thread, the use of which is preferable\n   to\
    \ all others.  The contents of packets having lower thread numbers\n   shall be\
    \ considered as having a higher processing and delivery\n   priority than those\
    \ with higher thread numbers.  Thus, packets having\n   lower thread numbers for\
    \ a given sync frame shall be delivered first\n   to the decoder under loss-free\
    \ and low-time-jitter conditions, which\n   will result in the discarding of the\
    \ sync contents of the higher-\n   numbered threads as specified in Annex N of\
    \ [H263].\n"
- title: 6.  Packetization Schemes
  contents:
  - '6.  Packetization Schemes

    '
- title: 6.1.  Picture Segment Packets and Sequence Ending Packets (P=1)
  contents:
  - "6.1.  Picture Segment Packets and Sequence Ending Packets (P=1)\n   A picture\
    \ segment packet is defined as a packet that starts at the\n   location of a Picture,\
    \ GOB, or slice start code in the H.263+ data\n   stream.  This corresponds to\
    \ the definition of the start of a video\n   picture segment as defined in H.263+.\
    \  For such packets, P=1 always.\n   An extra picture header can sometimes be\
    \ attached in the payload\n   header of such packets.  Whenever an extra picture\
    \ header is attached\n   as signified by PLEN>0, only the last six bits of its\
    \ picture start\n   code, '100000', are included in the payload header.  A complete\n\
    \   H.263+ picture header with byte-aligned picture start code can be\n   conveniently\
    \ assembled on the receiving end by prepending the sixteen\n   leading '0' bits.\n\
    \   When PLEN>0, the end bit position corresponding to the last byte of\n   the\
    \ picture header data is indicated by PEBIT.  The actual bitstream\n   data shall\
    \ begin on an 8-bit byte boundary following the payload\n   header.\n   A sequence\
    \ ending packet is defined as a packet that starts at the\n   location of an EOS\
    \ or EOSBS code in the H.263+ data stream.  This\n   delineates the end of a sequence\
    \ of H.263+ video data (more H.263+\n   video data may still follow later, however,\
    \ as specified in ITU-T\n   Recommendation H.263).  For such packets, P=1 and\
    \ PLEN=0 always.\n   The optional header extension for VRC may or may not be present\
    \ as\n   indicated by the V bit flag.\n"
- title: 6.1.1.  Packets that begin with a Picture Start Code
  contents:
  - "6.1.1.  Packets that begin with a Picture Start Code\n   Any packet that contains\
    \ the whole or the start of a coded picture\n   shall start at the location of\
    \ the picture start code (PSC) and\n   should normally be encapsulated with no\
    \ extra copy of the picture\n   header.  In other words, normally PLEN=0 in such\
    \ a case.  However, if\n   the coded picture contains an incomplete picture header\
    \ (UFEP =\n   \"000\"), then a representation of the complete (UFEP = \"001\"\
    ) picture\n   header may be attached during packetization in order to provide\n\
    \   greater error resilience.  Thus, for packets that start at the\n   location\
    \ of a picture start code, PLEN shall be zero unless both of\n   the following\
    \ conditions apply:\n   1) The picture header in the H.263+ bitstream payload\
    \ is incomplete\n      (PLUSPTYPE present and UFEP=\"000\").\n   2) The additional\
    \ picture header that is attached is not incomplete\n      (UFEP=\"001\").\n \
    \  A packet that begins at the location of a Picture, GOB, slice, EOS,\n   or\
    \ EOSBS start code shall omit the first two (all zero) bytes from\n   the H.263+\
    \ bitstream and signify their presence by setting P=1 in the\n   payload header.\n\
    \   Here is an example of encapsulating the first packet in a frame\n   (without\
    \ an attached redundant complete picture header):\n      0                   1\
    \                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   RR    |1|V|0|0|0|0|0|0|0|0|0| bitstream data without the    :\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     : first\
    \ two 0 bytes of the PSC\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 6.1.2.  Packets that begin with GBSC or SSC
  contents:
  - "6.1.2.  Packets that begin with GBSC or SSC\n   For a packet that begins at the\
    \ location of a GOB or slice start code\n   (GBSC), PLEN may be zero or nonzero,\
    \ depending on whether a redundant\n   picture header is attached to the packet.\
    \  In environments with very\n   low packet loss rates, or when picture header\
    \ contents are very\n   seldom likely to change (except as can be detected from\
    \ the GOB Frame\n   ID (GFID) syntax of H.263+), a redundant copy of the picture\
    \ header\n   is not required.  However, in less ideal circumstances a redundant\n\
    \   picture header should be attached for enhanced error resilience, and\n   its\
    \ presence is indicated by PLEN>0.\n   Assuming a PLEN of 9 and P=1, below is\
    \ an example of a packet that\n   begins with a byte-aligned GBSC or a Slice Start\
    \ Code (SSC):\n        0                   1                   2             \
    \      3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   RR    |1|V|0 0 1 0 0 1|PEBIT|1 0 0 0 0 0| picture header    :\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   : starting with TR, PTYPE ...                                   |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \ ...                                           | bitstream     :\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       : data starting with GBSC/SSC without its first two 0 bytes\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Notice that only the last six bits of the picture start code,\n   '100000',\
    \ are included in the payload header.  A complete H.263+\n   picture header with\
    \ byte aligned picture start code can be\n   conveniently assembled, if needed,\
    \ on the receiving end by prepending\n   the sixteen leading '0' bits.\n"
- title: 6.1.3.  Packets that begin with an EOS or EOSBS Code
  contents:
  - "6.1.3.  Packets that begin with an EOS or EOSBS Code\n   For a packet that begins\
    \ with an EOS or EOSBS code, PLEN shall be\n   zero, and no Picture, GOB, or Slice\
    \ start codes shall be included\n   within the same packet.  As with other packets\
    \ beginning with start\n   codes, the two all-zero bytes that begin the EOS or\
    \ EOSBS code at the\n   beginning of the packet shall be omitted, and their presence\
    \ shall be\n   indicated by setting the P bit to 1 in the payload header.\n  \
    \ System designers should be aware that some decoders may interpret the\n   loss\
    \ of a packet containing only EOS or EOSBS information as the loss\n   of essential\
    \ video data and may thus respond by not displaying some\n   subsequent video\
    \ information.  Since EOS and EOSBS codes do not\n   actually affect the decoding\
    \ of video pictures, they are somewhat\n   unnecessary to send at all.  Because\
    \ of the danger of\n   misinterpretation of the loss of such a packet (which can\
    \ be detected\n   by the sequence number), encoders are generally to be discouraged\n\
    \   from sending EOS and EOSBS.\n   Below is an example of a packet containing\
    \ an EOS code:\n         0                   1                   2\n         0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        |   RR    |1|V|0|0|0|0|0|0|0|0|0|1|1|1|1|1|1|0|0|\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 6.2.  Encapsulating Follow-on Packet (P=0)
  contents:
  - "6.2.  Encapsulating Follow-on Packet (P=0)\n   A Follow-on Packet contains a\
    \ number of bytes of coded H.263+ data\n   that do not start at a synchronization\
    \ point.  That is, a Follow-on\n   Packet does not start with a Picture, GOB,\
    \ Slice, EOS, or EOSBS\n   header, and it may or may not start at a macroblock\
    \ boundary.  Since\n   Follow-on Packets do not start at synchronization points,\
    \ the data at\n   the beginning of a Follow-on Packet is not independently decodable.\n\
    \   For such packets, P=0 always.  If the preceding packet of a Follow-on\n  \
    \ Packet got lost, the receiver may discard that Follow-on Packet, as\n   well\
    \ as all other following Follow-on Packets.  Better behavior, of\n   course, would\
    \ be for the receiver to scan the interior of the packet\n   payload content to\
    \ determine whether any start codes are found in the\n   interior of the packet\
    \ that can be used as resync points.  The use of\n   an attached copy of a picture\
    \ header for a Follow-on Packet is useful\n   only if the interior of the packet\
    \ or some subsequent Follow-on\n   Packet contains a resync code, such as a GOB\
    \ or slice start code.\n   PLEN>0 is allowed, since it may allow resync in the\
    \ interior of the\n   packet.  The decoder may also be resynchronized at the next\
    \ segment\n   or picture packet.\n   Here is an example of a Follow-on Packet\
    \ (with PLEN=0):\n      0                   1                   2            \
    \       3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n \
    \    |   RR    |0|V|0|0|0|0|0|0|0|0|0| bitstream data\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n"
- title: 7.  Use of this Payload Specification
  contents:
  - "7.  Use of this Payload Specification\n   There is no syntactical difference\
    \ between a picture segment packet\n   and a Follow-on Packet, other than the\
    \ indication P=1 for picture\n   segment or sequence ending packets and P=0 for\
    \ Follow-on Packets.\n   See the following for a summary of the entire packet\
    \ types and ways\n   to distinguish between them.\n   It is possible to distinguish\
    \ between the different packet types by\n   checking the P bit and the first 6\
    \ bits of the payload along with the\n   header information.  The following table\
    \ shows the packet type for\n   permutations of this information (see also the\
    \ picture/GOB/Slice\n   header descriptions in H.263+ for details):\n   -------------+--------------+----------------------+----------------\n\
    \   First 6 bits | P-Bit | PLEN |  Packet              |  Remarks\n   of Payload\
    \   |(payload hdr.)|                      |\n   -------------+--------------+----------------------+----------------\n\
    \   100000       |   1   |  0   |  Picture             | Typical Picture\n   100000\
    \       |   1   | > 0  |  Picture             | Note UFEP\n   1xxxxx       | \
    \  1   |  0   |  GOB/Slice/EOS/EOSBS | See possible GNs\n   1xxxxx       |   1\
    \   | > 0  |  GOB/Slice           | See possible GNs\n   Xxxxxx       |   0  \
    \ |  0   |  Follow-on           |\n   Xxxxxx       |   0   | > 0  |  Follow-on\
    \           | Interior Resync\n   -------------+--------------+----------------------+----------------\n\
    \   The details regarding the possible values of the five bit Group\n   Number\
    \ (GN) field that follows the initial \"1\" bit when the P-bit is\n   \"1\" for\
    \ a GOB, Slice, EOS, or EOSBS packet are found in Section 5.2.3\n   of H.263 [H263].\n\
    \   As defined in this specification, every start of a coded frame (as\n   indicated\
    \ by the presence of a PSC) has to be encapsulated as a\n   picture segment packet.\
    \  If the whole coded picture fits into one\n   packet of reasonable size (which\
    \ is dependent on the connection\n   characteristics), this is the only type of\
    \ packet that may need to be\n   used.  Due to the high compression ratio achieved\
    \ by H.263+, it is\n   often possible to use this mechanism, especially for small\
    \ spatial\n   picture formats such as Quarter Common Intermediate Format (QCIF)\
    \ and\n   typical Internet packet sizes around 1500 bytes.\n   If the complete\
    \ coded frame does not fit into a single packet, two\n   different ways for the\
    \ packetization may be chosen.  In case of very\n   low or zero packet loss probability,\
    \ one or more Follow-on Packets\n   may be used for coding the rest of the picture.\
    \  Doing so leads to\n   minimal coding and packetization overhead, as well as\
    \ to an optimal\n   use of the maximal packet size, but does not provide any added\
    \ error\n   resilience.\n   The alternative is to break the picture into reasonably\
    \ small\n   partitions, called Segments (by using the Slice or GOB mechanism),\n\
    \   that do offer synchronization points.  By doing so and using the\n   Picture\
    \ Segment payload with PLEN>0, decoding of the transmitted\n   packets is possible\
    \ even in cases in which the Picture packet\n   containing the picture header\
    \ was lost (provided any necessary\n   reference picture is available).  Picture\
    \ Segment packets can also be\n   used in conjunction with Follow-on Packets for\
    \ large segment sizes.\n"
- title: 8.  Media Type Definition
  contents:
  - "8.  Media Type Definition\n   This section specifies optional parameters that\
    \ MAY be used to select\n   optional features of the H.263 codec.  The parameters\
    \ are specified\n   here as part of the Media Type registration for the ITU-T\
    \ H.263\n   codec.  A mapping of the parameters into the Session Description\n\
    \   Protocol (SDP) [RFC4566] is also provided for applications that use\n   SDP.\
    \  Multiple parameters SHOULD be expressed as a media type string,\n   in the\
    \ form of a semicolon-separated list of parameter=value pairs.\n"
- title: 8.1.  Media Type Registrations
  contents:
  - "8.1.  Media Type Registrations\n   This section describes the media types and\
    \ names associated with this\n   payload format.  The section updates the previous\
    \ registered version\n   in RFC 3555 [RFC3555].\n"
- title: 8.1.1.  Registration of Media Type video/H263-1998
  contents:
  - "8.1.1.  Registration of Media Type video/H263-1998\n   Type name: video\n   Subtype\
    \ name: H263-1998\n   Required parameters: None\n   Optional parameters:\n   \
    \   SQCIF: Specifies the MPI (Minimum Picture Interval) for SQCIF\n      resolution.\
    \  Permissible values are integer values from 1 to 32,\n      which correspond\
    \ to a maximum frame rate of 30/(1.001 * the\n      specified value) frames per\
    \ second.\n      QCIF: Specifies the MPI (Minimum Picture Interval) for QCIF\n\
    \      resolution.  Permissible values are integer values from 1 to 32,\n    \
    \  which correspond to a maximum frame rate of 30/(1.001 * the\n      specified\
    \ value) frames per second.\n      CIF: Specifies the MPI (Minimum Picture Interval)\
    \ for CIF\n      resolution.  Permissible values are integer values from 1 to\
    \ 32,\n      which correspond to a maximum frame rate of 30/(1.001 * the\n   \
    \   specified value) frames per second.\n      CIF4: Specifies the MPI (Minimum\
    \ Picture Interval) for 4CIF\n      resolution.  Permissible values are integer\
    \ values from 1 to 32,\n      which correspond to a maximum frame rate of 30/(1.001\
    \ * the\n      specified value) frames per second.\n      CIF16: Specifies the\
    \ MPI (Minimum Picture Interval) for 16CIF\n      resolution.  Permissible values\
    \ are integer values from 1 to 32,\n      which correspond to a maximum frame\
    \ rate of 30/(1.001 * the\n      specified value) frames per second.\n      CUSTOM:\
    \ Specifies the MPI (Minimum Picture Interval) for a\n      custom-defined resolution.\
    \  The custom parameter receives three\n      comma-separated values, Xmax, Ymax,\
    \ and MPI.  The Xmax and Ymax\n      parameters describe the number of pixels\
    \ in the X and Y axis and\n      must be evenly divisible by 4.  The permissible\
    \ values for MPI are\n      integer values from 1 to 32, which correspond to a\
    \ maximum frame\n      rate of 30/(1.001 *the specified value).\n      A system\
    \ that declares support of a specific MPI for one of the\n      resolutions SHALL\
    \ also implicitly support a lower resolution with\n      the same MPI.\n     \
    \ A list of optional annexes specifies which annexes of H.263 are\n      supported.\
    \  The optional annexes are defined as part of H263-1998,\n      H263-2000.  H.263\
    \ annex X [H263] defines profiles that group\n      annexes for specific applications.\
    \  A system that supports a\n      specific annex SHALL specify its support using\
    \ the optional\n      parameters.  If no annex is specified, then the stream is\
    \ Baseline\n      H.263.\n      The allowed optional parameters for the annexes\
    \ are \"F\", \"I\", \"J\",\n      \"T\", \"K\", \"N\", and \"P\".\n      \"F\"\
    , \"I\", \"J\", and \"T\" if supported, SHALL have the value \"1\".  If\n    \
    \  not supported, they should not be listed or SHALL have the value\n      \"\
    0\".\n      \"K\" can receive one of four values 1 - 4:\n      1: Slices In Order,\
    \ Non-Rectangular\n      2: Slices In Order, Rectangular\n      3: Slices Not\
    \ Ordered, Non-Rectangular\n      4: Slices Not Ordered, Rectangular\n      \"\
    N\": Reference Picture Selection mode -  Four numeric choices\n      (1 - 4) are\
    \ available, representing the following modes:\n      1: NEITHER:  No back-channel\
    \ data is returned from the decoder to\n         the encoder.\n      2: ACK: \
    \ The decoder returns only acknowledgment messages.\n      3: NACK:  The decoder\
    \ returns only non-acknowledgment messages.\n      4: ACK+NACK:  The decoder returns\
    \ both acknowledgment and non-\n         acknowledgment messages.\n      No special\
    \ provision is made herein for carrying back channel\n      information.  The\
    \ Extended RTP Profile for RTCP-based Feedback\n      [RFC4585] MAY be used as\
    \ a back channel mechanism.\n      \"P\": Reference Picture Resampling, in which\
    \ the following submodes\n      are represented as a number from 1 to 4:\n   \
    \   1: dynamicPictureResizingByFour\n      2: dynamicPictureResizingBySixteenthPel\n\
    \      3: dynamicWarpingHalfPel\n      4: dynamicWarpingSixteenthPel\n      Example:\
    \ P=1,3\n      PAR: Arbitrary Pixel Aspect Ratio.  Defines the width:height ratio\n\
    \      by two colon-separated integers between 0 and 255.  Default ratio\n   \
    \   is 12:11, if not otherwise specified.\n      CPCF: Arbitrary (Custom) Picture\
    \ Clock Frequency: CPCF is a\n      comma-separated list of eight parameters specifying\
    \ a custom\n      picture clock frequency and the MPI (minimum picture interval)\
    \ for\n      the supported picture sizes when using that picture clock\n     \
    \ frequency.  The first two parameters are cd, which is an integer\n      from\
    \ 1 to 127, and cf, which is either 1000 or 1001.  The custom\n      picture clock\
    \ frequency is given by the formula 1800000/(cd*cf)\n      provided in the RTP\
    \ Timestamp semantics in Section 3.1 above (as\n      specified in H.263 section\
    \ 5.1.7).  Following the values of cd and\n      cf, the remaining six parameters\
    \ are SQCIFMPI, QCIFMPI, CIFMPI,\n      CIF4MPI, CIF16MPI, and CUSTOMMPI, which\
    \ each specify an integer\n      MPI (minimum picture interval) for the standard\
    \ picture sizes\n      SQCIF, QCIF, CIF, 4CIF, 16CIF, and CUSTOM, respectively,\
    \ as\n      described above.  The MPI value indicates a maximum frame rate of\n\
    \      1800000/(cd*cf*MPI) frames per second for MPI parameters having a\n   \
    \   value in the range from 1 to 2048, inclusive.  An MPI value of 0\n      specifies\
    \ that the associated picture size is not supported for\n      the custom picture\
    \ clock frequency.  If the CUSTOMMPI parameter is\n      not equal to 0, the CUSTOM\
    \ parameter SHALL also be present (so\n      that the Xmax and Ymax dimensions\
    \ of the custom picture size are\n      defined).\n      BPP: BitsPerPictureMaxKb.\
    \  Maximum number of bits in units of 1024\n      bits allowed to represent a\
    \ single picture.  If this parameter is\n      not present, then the default value,\
    \ based on the maximum\n      supported resolution, is used.  BPP is integer value\
    \ between 0 and\n      65536.\n      HRD: Hypothetical Reference Decoder.  See\
    \ annex B of H.263\n      specification [H263].  This parameter, if supported,\
    \ SHALL have\n      the value \"1\".  If not supported, it should not be listed\
    \ or SHALL\n      have the value \"0\".\n   Encoding considerations:\n      This\
    \ media type is framed and binary; see Section 4.8 in [RFC4288]\n   Security considerations:\
    \ See Section 11 of RFC 4629\n   Interoperability considerations:\n      These\
    \ are receiver options; current implementations will not send\n      any optional\
    \ parameters in their SDP.  They will ignore the\n      optional parameters and\
    \ will encode the H.263 stream without any\n      of the annexes.  Most decoders\
    \ support at least QCIF and CIF fixed\n      resolutions, and they are expected\
    \ to be available almost in every\n      H.263-based video application.\n   Published\
    \ specification: RFC 4629\n   Applications that use this media type:\n      Audio\
    \ and video streaming and conferencing tools.\n      Additional information: None\n\
    \      Person and email address to contact for further information:\n   Roni Even:\
    \ roni.even@polycom.co.il\n      Intended usage: COMMON\n      Restrictions on\
    \ usage:\n      This media type depends on RTP framing and thus is only defined\n\
    \      for transfer via RTP [RFC3550].  Transport within other framing\n     \
    \ protocols is not defined at this time.\n   Author: Roni Even\n   Change controller:\n\
    \      IETF Audio/Video Transport working group, delegated from the IESG.\n"
- title: 8.1.2.  Registration of Media Type video/H263-2000
  contents:
  - "8.1.2.  Registration of Media Type video/H263-2000\n   Type name: video\n   Subtype\
    \ name: H263-2000\n   Required parameters: None\n   Optional parameters:\n   \
    \   The optional parameters of the H263-1998 type MAY be used with\n      this\
    \ media subtype.  Specific optional parameters that may be used\n      with the\
    \ H263-2000 type are as follows:\n      PROFILE:  H.263 profile number, in the\
    \ range 0 through 10,\n      specifying the supported H.263 annexes/subparts based\
    \ on H.263\n      annex X [H263].  The annexes supported in each profile are listed\n\
    \      in table X.1 of H.263 annex X.  If no profile or H.263 annex is\n     \
    \ specified, then the stream is Baseline H.263 (profile 0 of H.263\n      annex\
    \ X).\n      LEVEL:  Level of bitstream operation, in the range 0 through 100,\n\
    \      specifying the level of computational complexity of the decoding\n    \
    \  process.  The level are described in table X.2 of H.263 annex X.\n      According\
    \ to H.263 annex X, support of any level other than level\n      45 implies support\
    \ of all lower levels.  Support of level 45\n      implies support of level 10.\n\
    \      A system that specifies support of a PROFILE MUST specify the\n      supported\
    \ LEVEL.\n      INTERLACE:  Interlaced or 60 fields indicates the support for\n\
    \      interlace display mode, as specified in H.263 annex W.6.3.11.\n      This\
    \ parameter, if supported SHALL have the value \"1\".  If not\n      supported,\
    \ it should not be listed or SHALL have the value \"0\".\n   Encoding considerations:\n\
    \      This media type is framed and binary; see Section 4.8 in [RFC4288]\n  \
    \ Security considerations: See Section 11 of RFC 4629\n   Interoperability considerations:\n\
    \      The optional parameters PROFILE and LEVEL SHALL NOT be used with\n    \
    \  any of the other optional parameters.\n   Published specification: RFC 4629\n\
    \   Applications that use this media type:\n      Audio and video streaming and\
    \ conferencing tools.\n   Additional information: None\n   Person and email address\
    \ to contact for further information :\n      Roni Even: roni.even@polycom.co.il\n\
    \   Intended usage: COMMON\n   Restrictions on usage:\n      This media type depends\
    \ on RTP framing and thus is only defined\n      for transfer via RTP [RFC3550].\
    \  Transport within other framing\n      protocols is not defined at this time.\n\
    \   Author: Roni Even\n   Change controller:\n      IETF Audio/Video Transport\
    \ working group delegated from the IESG.\n"
- title: 8.2.  SDP Usage
  contents:
  - "8.2.  SDP Usage\n   The media types video/H263-1998 and video/H263-2000 are mapped\
    \ to\n   fields in the Session Description Protocol (SDP) as follows:\n   o The\
    \ media name in the \"m=\" line of SDP MUST be video.\n   o The encoding name\
    \ in the \"a=rtpmap\" line of SDP MUST be H263-1998\n     or H263-2000 (the media\
    \ subtype).\n   o The clock rate in the \"a=rtpmap\" line MUST be 90000.\n   o\
    \ The optional parameters, if any, MUST be included in the \"a=fmtp\"\n     line\
    \ of SDP.  These parameters are expressed as a media type\n     string, in the\
    \ form of a semicolon-separated list of\n     parameter=value pairs.  The optional\
    \ parameters PROFILE and LEVEL\n     SHALL NOT be used with any of the other optional\
    \ parameters.\n"
- title: 8.2.1.  Usage with the SDP Offer Answer Model
  contents:
  - "8.2.1.  Usage with the SDP Offer Answer Model\n   For offering H.263 over RTP\
    \ using SDP in an Offer/Answer model\n   [RFC3264], the following considerations\
    \ are necessary.\n   Codec options (F,I,J,K,N,P,T): These options MUST NOT appear\
    \ unless\n   the sender of these SDP parameters is able to decode those options.\n\
    \   These options designate receiver capabilities even when sent in a\n   \"sendonly\"\
    \ offer.\n   Profile: The offer of a SDP profile parameter signals that the\n\
    \   offerer can decode a stream that uses the specified profile.  Each\n   profile\
    \ uses different H.263 annexes, so there is no implied\n   relationship between\
    \ them.  An answerer SHALL NOT change the profile\n   parameter and MUST reject\
    \ the payload type containing an unsupported\n   profile.  A decoder that supports\
    \ a profile SHALL also support H.263\n   baseline profile (profile 0).  An offerer\
    \ is RECOMMENDED to offer all\n   the different profiles it is interested to use\
    \ as individual payload\n   types.  In addition an offerer, sending an offer using\
    \ the PROFILE\n   optional parameter, is RECOMMENDED to offer profile 0, as this\
    \ will\n   enable communication, and in addition allows an answerer to add those\n\
    \   profiles it does support in an answer.\n   LEVEL: The LEVEL parameter in an\
    \ offer indicates the maximum\n   computational complexity supported by the offerer\
    \ in performing\n   decoding for the given PROFILE.  An answerer MAY change the\
    \ value\n   (both up and down) of the LEVEL parameter in its answer to indicate\n\
    \   the highest value it supports.\n   INTERLACE: The parameter MAY be included\
    \ in either offer or answer to\n   indicate that the offerer or answerer respectively\
    \ supports reception\n   of interlaced content.  The inclusion in either offer\
    \ or answer is\n   independent of each other.\n   Picture sizes and MPI: Supported\
    \ picture sizes and their\n   corresponding minimum picture interval (MPI) information\
    \ for H.263\n   can be combined.  All picture sizes can be advertised to the other\n\
    \   party, or only a subset.  The terminal announces only those picture\n   sizes\
    \ (with their MPIs) which it is willing to receive.  For example,\n   MPI=2 means\
    \ that the maximum (decodable) picture rate per second is\n   15/1.001 (approximately\
    \ 14.985).\n   If the receiver does not specify the picture size/MPI optional\n\
    \   parameter, then it SHOULD be ready to receive QCIF resolution with\n   MPI=1.\n\
    \   Parameters offered first are the most preferred picture mode to be\n   received.\n\
    \   Here is an example of the usage of these parameters:\n      CIF=4;QCIF=3;SQCIF=2;CUSTOM=360,240,2\n\
    \   This means that the encoder SHOULD send CIF picture size, which it\n   can\
    \ decode at MPI=4.  If that is not possible, then QCIF with MPI\n   value 3 should\
    \ be sent; if neither are possible, then SQCIF with MPI\n   value=2.  The receiver\
    \ is capable of (but least preferred) decoding\n   custom picture sizes (max 360x240)\
    \ with MPI=2.  Note that most\n   decoders support at least QCIF and CIF fixed\
    \ resolutions, and that\n   they are expected to be available almost in every\
    \ H.263-based video\n   application.\n   Below is an example of H.263 SDP in an\
    \ offer:\n      a=fmtp:xx CIF=4;QCIF=2;F=1;K=1\n   This means that the sender\
    \ of this message can decode an H.263 bit\n   stream with the following options\
    \ and parameters: preferred\n   resolution is CIF (at up to 30/4.004 frames per\
    \ second), but if that\n   is not possible then QCIF size is also supported (at\
    \ up to 30/2.002\n   frames per second).  Advanced Prediction mode (AP) and\n\
    \   slicesInOrder-NonRect options MAY be used.\n   Below is an example of H.263\
    \ SDP in an offer that includes the CPCF\n   parameter.\n      a=fmtp:xx CPCF=36,1000,0,1,1,0,0,2;CUSTOM=640,480,2;CIF=1;QCIF=1\n\
    \   This means that the sender of this message can decode an H.263 bit\n   stream\
    \ with a preferred custom picture size of 640x480 at a maximum\n   frame rate\
    \ of 25 frames per second using a custom picture clock\n   frequency of 50 Hz.\
    \  If that is not possible, then the 640x480\n   picture size is also supported\
    \ at up to 30/2.002 frames per second\n   using the ordinary picture clock frequency\
    \ of 30/1.001 Hz.  If\n   neither of those is possible, then the CIF and QCIF\
    \ picture sizes are\n   also supported at up to 50 frames per second using the\
    \ custom picture\n   clock frequency of 50 Hz or up to 30/1.001 frames per second\
    \ using\n   the ordinary picture clock frequency of 30/1.001 Hz, and CIF is\n\
    \   preferred over QCIF.\n   The following limitation applies for usage of these\
    \ media types when\n   performing offer/answer for sessions using multicast transport.\
    \  An\n   answerer SHALL NOT change any of the parameters in an answer, instead\n\
    \   if the indicated values are not supported the payload type MUST be\n   rejected.\n"
- title: 9.  Backward Compatibility to RFC 2429
  contents:
  - "9.  Backward Compatibility to RFC 2429\n   The current document is a revision\
    \ of RFC 2429 and obsoletes it.\n   This section will address the backward compatibility\
    \ issues.\n"
- title: 9.1.  New Optional Parameters for SDP
  contents:
  - "9.1.  New Optional Parameters for SDP\n   The document adds new optional parameters\
    \ to the H263-1998 and H263-\n   2000 payload type, defined in RFC 3555 [RFC3555].\
    \  Since these are\n   optional parameters we expect that old implementations\
    \ will ignore\n   these parameters, and that new implementations that will receive\
    \ the\n   H263-1998 and H263-2000 payload types with no parameters will behave\n\
    \   as if the other side can accept H.263 at QCIF resolution at a frame\n   rate\
    \ not exceeding 15/1.001 (approximately 14.985) frames per second.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   This document updates the H.263 (1998) and H.263\
    \ (2000) media types,\n   described in RFC 3555 [RFC3555].  The updated media\
    \ type\n   registrations are in Section 8.1.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   RTP packets using the payload format defined\
    \ in this specification\n   are subject to the security considerations discussed\
    \ in the RTP\n   specification [RFC3550] and any appropriate RTP profile (for\
    \ example,\n   [RFC3551]).  This implies that confidentiality of the media streams\n\
    \   is achieved by encryption.  Because the data compression used with\n   this\
    \ payload format is applied end-to-end, encryption may be\n   performed after\
    \ compression, so there is no conflict between the two\n   operations.\n   A potential\
    \ denial-of-service threat exists for data encoding using\n   compression techniques\
    \ that have non-uniform receiver-end\n   computational load.  The attacker can\
    \ inject pathological datagrams\n   into the stream that are complex to decode\
    \ and cause the receiver to\n   be overloaded.  The usage of authentication of\
    \ at least the RTP\n   packet is RECOMMENDED.\n   As with any IP-based protocol,\
    \ in some circumstances a receiver may\n   be overloaded simply by the receipt\
    \ of too many packets, either\n   desired or undesired.  Network-layer authentication\
    \ may be used to\n   discard packets from undesired sources, but the processing\
    \ cost of\n   the authentication itself may be too high.  In a multicast\n   environment,\
    \ pruning of specific sources may be implemented in future\n   versions of IGMP\
    \ [RFC2032] and in multicast routing protocols to\n   allow a receiver to select\
    \ which sources are allowed to reach it.\n   A security review of this payload\
    \ format found no additional\n   considerations beyond those in the RTP specification.\n"
- title: 12.  Acknowledgements
  contents:
  - "12.  Acknowledgements\n   This is to acknowledge the work done by Chad Zhu, Linda\
    \ Cline, Gim\n   Deisher, Tom Gardos, Christian Maciocco, and Donald Newell from\
    \ Intel\n   Corp., who co-authored RFC 2429.\n   We would also like to acknowledge\
    \ the work of Petri Koskelainen from\n   Nokia and Nermeen Ismail from Cisco,\
    \ who helped with composing the\n   text for the new media types.\n"
- title: 13.  Changes from Previous Versions of the Documents
  contents:
  - '13.  Changes from Previous Versions of the Documents

    '
- title: 13.1.  Changes from RFC 2429
  contents:
  - "13.1.  Changes from RFC 2429\n   The changes from the RFC 2429 are:\n   1.  The\
    \ H.263 1998 and 2000 media type are now in the payload\n       specification.\n\
    \   2.  Added optional parameters to the H.263 1998 and 2000 media types.\n  \
    \ 3.  Mandate the usage of RFC 2429 for all H.263.  RFC 2190 payload\n       format\
    \ should be used only to interact with legacy systems.\n"
- title: 13.2.  Changes from RFC 3555
  contents:
  - "13.2.  Changes from RFC 3555\n   This document adds new optional parameters to\
    \ the H263-1998 and\n   H263-2000 payload types.\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [H263]     International Telecommunications Union\
    \ - Telecommunication\n              Standardization Sector, \"Video coding for\
    \ low bit rate\n              communication\", ITU-T Recommendation H.263, January\
    \ 2005.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3550]\
    \  Schulzrinne, H., Casner, S., Frederick, R., and V.\n              Jacobson,\
    \ \"RTP: A Transport Protocol for Real-Time\n              Applications\", STD\
    \ 64, RFC 3550, July 2003.\n   [RFC3551]  Schulzrinne, H. and S. Casner, \"RTP\
    \ Profile for Audio and\n              Video Conferences with Minimal Control\"\
    , STD 65, RFC 3551,\n              July 2003.\n   [RFC3555]  Casner, S. and P.\
    \ Hoschka, \"MIME Type Registration of RTP\n              Payload Formats\", RFC\
    \ 3555, July 2003.\n   [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, \"\
    SDP: Session\n              Description Protocol\", RFC 4566, July 2006.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [RFC2032]  Turletti, T., \"RTP Payload Format\
    \ for H.261 Video\n              Streams\", RFC 2032, October 1996.\n   [RFC2190]\
    \  Zhu, C., \"RTP Payload Format for H.263 Video Streams\", RFC\n            \
    \  2190, September 1997.\n   [RFC2429]  Bormann, C., Cline, L., Deisher, G., Gardos,\
    \ T., Maciocco,\n              C., Newell, D., Ott, J., Sullivan, G., Wenger,\
    \ S., and C.\n              Zhu, \"RTP Payload Format for the 1998 Version of\
    \ ITU-T\n              Rec. H.263 Video (H.263+)\", RFC 2429, October 1998.\n\
    \   [RFC3264]  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n   \
    \           with Session Description Protocol (SDP)\", RFC 3264, June\n      \
    \        2002.\n   [RFC4288]  Freed, N. and J. Klensin, \"Media Type Specifications\
    \ and\n              Registration Procedures\", BCP 13, RFC 4288, December 2005.\n\
    \   [RFC4585]  Ott, J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,\n  \
    \            \"Extended RTP Profile for Real-time Transport Control\n        \
    \      Protocol (RTCP)-Based Feedback (RTP/AVPF)\", RFC 4585, July\n         \
    \     2006.\n   [RFC4628]  Even, R., \"RTP Payload Format for H.263 Moving RFC\
    \ 2190 to\n              Historic Status\", RFC 4628, January 2007.\n   [Vredun]\
    \   Wenger, S., \"Video Redundancy Coding in H.263+\", Proc.\n              Audio-Visual\
    \ Services over Packet Networks, Aberdeen, U.K.\n              9/1997, September\
    \ 1997.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Joerg Ott\n   Helsinki University of Technology\n   Networking\
    \ Laboratory\n   PO Box 3000\n   02015 TKK, Finland\n   EMail: jo@netlab.tkk.fi\n\
    \   Carsten Bormann\n   Universitaet Bremen TZI\n   Postfach 330440\n   D-28334\
    \ Bremen, GERMANY\n   Phone: +49.421.218-7024\n   Fax: +49.421.218-7000\n   EMail:\
    \ cabo@tzi.org\n   Gary Sullivan\n   Microsoft Corp.\n   One Microsoft Way\n \
    \  Redmond, WA 98052\n   USA\n   EMail: garysull@microsoft.com\n   Stephan Wenger\n\
    \   Nokia Research Center\n   P.O. Box 100\n   33721 Tampere\n   Finland\n   EMail:\
    \ stewe@stewe.org\n   Roni Even (editor)\n   Polycom\n   94 Derech Em Hamoshavot\n\
    \   Petach Tikva  49130\n   Israel\n   EMail: roni.even@polycom.co.il\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
