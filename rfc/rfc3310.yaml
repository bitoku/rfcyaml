- title: __initial_text__
  contents:
  - "       Hypertext Transfer Protocol (HTTP) Digest Authentication\n           \
    \   Using Authentication and Key Agreement (AKA)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo specifies an Authentication and Key Agreement (AKA) based\n\
    \   one-time password generation mechanism for Hypertext Transfer\n   Protocol\
    \ (HTTP) Digest access authentication.  The HTTP\n   Authentication Framework\
    \ includes two authentication schemes: Basic\n   and Digest.  Both schemes employ\
    \ a shared secret based mechanism for\n   access authentication.  The AKA mechanism\
    \ performs user\n   authentication and session key distribution in Universal Mobile\n\
    \   Telecommunications System (UMTS) networks.  AKA is a challenge-\n   response\
    \ based mechanism that uses symmetric cryptography.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction and Motivation  . . . . . . . . . . .\
    \ . . . . . .  2\n   1.1 Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   1.2 Conventions  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   2.  AKA Mechanism Overview . . . . . . . . . . . . . . . . .\
    \ . . .  4\n   3.  Specification of Digest AKA  . . . . . . . . . . . . . . .\
    \ . .  5\n   3.1 Algorithm Directive  . . . . . . . . . . . . . . . . . . . .\
    \ .  5\n   3.2 Creating a Challenge . . . . . . . . . . . . . . . . . . . . .\
    \  6\n   3.3 Client Authentication  . . . . . . . . . . . . . . . . . . . .  7\n\
    \   3.4 Synchronization Failure  . . . . . . . . . . . . . . . . . . .  7\n  \
    \ 3.5 Server Authentication  . . . . . . . . . . . . . . . . . . . .  8\n   4.\
    \  Example Digest AKA Operation . . . . . . . . . . . . . . . . .  8\n   5.  Security\
    \ Considerations  . . . . . . . . . . . . . . . . . . . 12\n   5.1 Authentication\
    \ of Clients using Digest AKA . . . . . . . . . . 13\n   5.2 Limited Use of Nonce\
    \ Values  . . . . . . . . . . . . . . . . . 13\n   5.3 Multiple Authentication\
    \ Schemes and Algorithms . . . . . . . . 14\n   5.4 Online Dictionary Attacks\
    \  . . . . . . . . . . . . . . . . . . 14\n   5.5 Session Protection . . . . .\
    \ . . . . . . . . . . . . . . . . . 14\n   5.6 Replay Protection  . . . . . .\
    \ . . . . . . . . . . . . . . . . 15\n   5.7 Improvements to AKA Security . .\
    \ . . . . . . . . . . . . . . . 15\n   6.  IANA Considerations  . . . . . . .\
    \ . . . . . . . . . . . . . . 15\n   6.1 Registration Template  . . . . . . .\
    \ . . . . . . . . . . . . . 16\n       Normative References . . . . . . . . .\
    \ . . . . . . . . . . . . 16\n       Informative References . . . . . . . . .\
    \ . . . . . . . . . . . 16\n   A.  Acknowledgements . . . . . . . . . . . . .\
    \ . . . . . . . . . . 17\n       Authors' Addresses . . . . . . . . . . . . .\
    \ . . . . . . . . . 17\n       Full Copyright Statement . . . . . . . . . . .\
    \ . . . . . . . . 18\n"
- title: 1. Introduction and Motivation
  contents:
  - "1. Introduction and Motivation\n   The Hypertext Transfer Protocol (HTTP) Authentication\
    \ Framework,\n   described in RFC 2617 [2], includes two authentication schemes:\
    \ Basic\n   and Digest.  Both schemes employ a shared secret based mechanism for\n\
    \   access authentication.  The Basic scheme is inherently insecure in\n   that\
    \ it transmits user credentials in plain text.  The Digest scheme\n   improves\
    \ security by hiding user credentials with cryptographic\n   hashes, and additionally\
    \ by providing limited message integrity.\n   The Authentication and Key Agreement\
    \ (AKA) [6] mechanism performs\n   authentication and session key distribution\
    \ in Universal Mobile\n   Telecommunications System (UMTS) networks.  AKA is a\
    \ challenge-\n   response based mechanism that uses symmetric cryptography.  AKA\
    \ is\n   typically run in a UMTS IM Services Identity Module (ISIM), which\n \
    \  resides on a smart card like device that also provides tamper\n   resistant\
    \ storage of shared secrets.\n   This document specifies a mapping of AKA parameters\
    \ onto HTTP Digest\n   authentication.  In essence, this mapping enables the usage\
    \ of AKA as\n   a one-time password generation mechanism for Digest authentication.\n\
    \   As the Session Initiation Protocol (SIP) [3] Authentication Framework\n  \
    \ closely follows the HTTP Authentication Framework, Digest AKA is\n   directly\
    \ applicable to SIP as well as any other embodiment of HTTP\n   Digest.\n"
- title: 1.1 Terminology
  contents:
  - "1.1 Terminology\n   This chapter explains the terminology used in this document.\n\
    \   AKA\n      Authentication and Key Agreement.\n   AuC\n      Authentication\
    \ Center.  The network element in mobile networks\n      that can authorize users\
    \ either in GSM or in UMTS networks.\n   AUTN\n      Authentication Token.  A\
    \ 128 bit value generated by the AuC, which\n      together with the RAND parameter\
    \ authenticates the server to the\n      client.\n   AUTS\n      Authentication\
    \ Token.  A 112 bit value generated by the client\n      upon experiencing an\
    \ SQN synchronization failure.\n   CK\n      Cipher Key.  An AKA session key for\
    \ encryption.\n   IK\n      Integrity Key.  An AKA session key for integrity check.\n\
    \   ISIM\n      IP Multimedia Services Identity Module.\n   PIN\n      Personal\
    \ Identification Number.  Commonly assigned passcodes for\n      use with automatic\
    \ cash machines, smart cards, etc.\n   RAND\n      Random Challenge.  Generated\
    \ by the AuC using the SQN.\n   RES\n      Authentication Response.  Generated\
    \ by the ISIM.\n   SIM\n      Subscriber Identity Module.  GSM counter part for\
    \ ISIM.\n   SQN\n      Sequence Number.  Both AuC and ISIM maintain the value\
    \ of the SQN.\n   UMTS\n      Universal Mobile Telecommunications System.\n  \
    \ XRES\n      Expected Authentication Response.  In a successful authentication\n\
    \      this is equal to RES.\n"
- title: 1.2 Conventions
  contents:
  - "1.2 Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in BCP\
    \ 14, RFC 2119 [1].\n"
- title: 2. AKA Mechanism Overview
  contents:
  - "2. AKA Mechanism Overview\n   This chapter describes the AKA operation in detail:\n\
    \   1. A shared secret K is established beforehand between the ISIM and\n    \
    \  the Authentication Center (AuC).  The secret is stored in the\n      ISIM,\
    \ which resides on a smart card like, tamper resistant device.\n   2. The AuC\
    \ of the home network produces an authentication vector AV,\n      based on the\
    \ shared secret K and a sequence number SQN.  The\n      authentication vector\
    \ contains a random challenge RAND, network\n      authentication token AUTN,\
    \ expected authentication result XRES, a\n      session key for integrity check\
    \ IK, and a session key for\n      encryption CK.\n   3. The authentication vector\
    \ is downloaded to a server.  Optionally,\n      the server can also download\
    \ a batch of AVs, containing more than\n      one authentication vector.\n   4.\
    \ The server creates an authentication request, which contains the\n      random\
    \ challenge RAND, and the network authenticator token AUTN.\n   5. The authentication\
    \ request is delivered to the client.\n   6. Using the shared secret K and the\
    \ sequence number SQN, the client\n      verifies the AUTN with the ISIM.  If\
    \ the verification is\n      successful, the network has been authenticated. \
    \ The client then\n      produces an authentication response RES, using the shared\
    \ secret K\n      and the random challenge RAND.\n   7. The authentication response,\
    \ RES, is delivered to the server.\n   8. The server compares the authentication\
    \ response RES with the\n      expected response, XRES.  If the two match, the\
    \ user has been\n      successfully authenticated, and the session keys, IK and\
    \ CK, can\n      be used for protecting further communications between the client\n\
    \      and the server.\n   When verifying the AUTN, the client may detect that\
    \ the sequence\n   numbers between the client and the server have fallen out of\
    \ sync.\n   In this case, the client produces a synchronization parameter AUTS,\n\
    \   using the shared secret K and the client sequence number SQN.  The\n   AUTS\
    \ parameter is delivered to the network in the authentication\n   response, and\
    \ the authentication can be tried again based on\n   authentication vectors generated\
    \ with the synchronized sequence\n   number.\n   For a specification of the AKA\
    \ mechanism and the generation of the\n   cryptographic parameters AUTN, RES,\
    \ IK, CK, and AUTS, see reference\n   3GPP TS 33.102 [6].\n"
- title: 3. Specification of Digest AKA
  contents:
  - "3. Specification of Digest AKA\n   In general, the Digest AKA operation is identical\
    \ to the Digest\n   operation in RFC 2617 [2].  This chapter specifies the parts\
    \ in which\n   Digest AKA extends the Digest operation.  The notation used in\
    \ the\n   Augmented BNF definitions for the new and modified syntax elements in\n\
    \   this section is as used in SIP [3], and any elements not defined in\n   this\
    \ section are as defined in SIP and the documents to which it\n   refers.\n"
- title: 3.1 Algorithm Directive
  contents:
  - "3.1 Algorithm Directive\n   In order to direct the client into using AKA for\
    \ authentication\n   instead of the standard password system, the RFC 2617 defined\n\
    \   algorithm directive is overloaded in Digest AKA:\n           algorithm   \
    \        =  \"algorithm\" EQUAL ( aka-namespace\n                            \
    \      / algorithm-value )\n           aka-namespace       =  aka-version \"-\"\
    \ algorithm-value\n           aka-version         =  \"AKAv\" 1*DIGIT\n      \
    \     algorithm-value     =  ( \"MD5\" / \"MD5-sess\" / token )\n   algorithm\n\
    \      A string indicating the algorithm used in producing the digest and\n  \
    \    the checksum.  If the directive is not understood, the nonce\n      SHOULD\
    \ be ignored, and another challenge (if one is present)\n      should be used\
    \ instead.  The default aka-version is \"AKAv1\".\n      Further AKA versions\
    \ can be specified, with version numbers\n      assigned by IANA [7].  When the\
    \ algorithm directive is not\n      present, it is assumed to be \"MD5\".  This\
    \ indicates, that AKA is\n      not used to produce the Digest password.\n   \
    \   Example:\n            algorithm=AKAv1-MD5\n      If the entropy of the used\
    \ RES value is limited (e.g., only 32\n      bits), reuse of the same RES value\
    \ in authenticating subsequent\n      requests and responses is NOT RECOMMENDED.\
    \  Such a RES value\n      SHOULD only be used as a one-time password, and algorithms\
    \ such as\n      \"MD5-sess\", which limit the amount of material hashed with\
    \ a\n      single key, by producing a session key for authentication, SHOULD\n\
    \      NOT be used.\n"
- title: 3.2 Creating a Challenge
  contents:
  - "3.2 Creating a Challenge\n   In order to deliver the AKA authentication challenge\
    \ to the client in\n   Digest AKA, the nonce directive defined in RFC 2617 is\
    \ extended:\n           nonce               =  \"nonce\" EQUAL ( aka-nonce\n \
    \                                 / nonce-value )\n           aka-nonce      \
    \     =  LDQUOT aka-nonce-value RDQUOT\n           aka-nonce-value     =  <base64\
    \ encoding of RAND, AUTN, and\n                                   server specific\
    \ data>\n   nonce\n      A parameter, which is populated with the Base64 [4] encoding\
    \ of\n      the concatenation of the AKA authentication challenge RAND, the\n\
    \      AKA AUTN token, and optionally some server specific data, as in\n     \
    \ Figure 1.\n      Example:\n          nonce=\"MzQ0a2xrbGtmbGtsZm9wb2tsc2tqaHJzZXNy9uQyMzMzMzQK=\"\
    \n       0                   1                   2                   3\n     \
    \  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   |                            RAND                               |\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   |                            AUTN                               |\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Server Data...\n      +-+-+-+-+-+-+-+-+-+-+-+\n                    Figure\
    \ 1: Generating the nonce value.\n   If the server receives a client authentication\
    \ containing the \"auts\"\n   parameter defined in Section 3.4, that includes\
    \ a valid AKA AUTS\n   parameter, the server MUST use it to generate a new challenge\
    \ to the\n   client.  Note that when the AUTS is present, the included \"response\"\
    \n   parameter is calculated using an empty password (password of \"\"),\n   instead\
    \ of a RES.\n"
- title: 3.3 Client Authentication
  contents:
  - "3.3 Client Authentication\n   When a client receives a Digest AKA authentication\
    \ challenge, it\n   extracts the RAND and AUTN from the \"nonce\" parameter, and\
    \ assesses\n   the AUTN token provided by the server.  If the client successfully\n\
    \   authenticates the server with the AUTN, and determines that the SQN\n   used\
    \ in generating the challenge is within expected range, the AKA\n   algorithms\
    \ are run with the RAND challenge and shared secret K.\n   The resulting AKA RES\
    \ parameter is treated as a \"password\" when\n   calculating the response directive\
    \ of RFC 2617.\n"
- title: 3.4 Synchronization Failure
  contents:
  - "3.4 Synchronization Failure\n   For indicating an AKA sequence number synchronization\
    \ failure, and to\n   re-synchronize the SQN in the AuC using the AUTS token,\
    \ a new\n   directive is defined for the \"digest-response\" of the \"Authorization\"\
    \n   request header defined in RFC 2617:\n           auts                =  \"\
    auts\" EQUAL auts-param\n           auts-param          =  LDQUOT auts-value RDQUOT\n\
    \           auts-value          =  <base64 encoding of AUTS>\n   auts\n      A\
    \ string carrying a base64 encoded AKA AUTS parameter.  This\n      directive\
    \ is used to re-synchronize the server side SQN.  If the\n      directive is present,\
    \ the client doesn't use any password when\n      calculating its credentials.\
    \  Instead, the client MUST calculate\n      its credentials using an empty password\
    \ (password of \"\").\n      Example:\n            auts=\"CjkyMzRfOiwg5CfkJ2UK=\"\
    \n   Upon receiving the \"auts\" parameter, the server will check the\n   validity\
    \ of the parameter value using the shared secret K.  A valid\n   AUTS parameter\
    \ is used to re-synchronize the SQN in the AuC.  The\n   synchronized SQN is then\
    \ used to generate a fresh authentication\n   vector AV, with which the client\
    \ is then re-challenged.\n"
- title: 3.5 Server Authentication
  contents:
  - "3.5 Server Authentication\n   Even though AKA provides inherent mutual authentication\
    \ with the AKA\n   AUTN token, mutual authentication mechanisms provided by Digest\
    \ may\n   still be useful in order to provide message integrity.\n   In Digest\
    \ AKA, the server uses the AKA XRES parameter as \"password\"\n   when calculating\
    \ the \"response-auth\" of the \"Authentication-Info\"\n   header defined in RFC\
    \ 2617.\n"
- title: 4. Example Digest AKA Operation
  contents:
  - "4. Example Digest AKA Operation\n   Figure 2 below describes a message flow describing\
    \ a Digest AKA\n   process of authenticating a SIP request, namely the SIP REGISTER\n\
    \   request.\n      Client                                                  Server\n\
    \        | 1) REGISTER                                           |\n        |------------------------------------------------------>|\n\
    \        |                                                       |\n        |\
    \                            +-----------------------------+\n        |      \
    \                      | Server runs AKA algorithms, |\n        |            \
    \                | generates RAND and AUTN.    |\n        |                  \
    \          +-----------------------------+\n        |                        \
    \                               |\n        |              2) 401 Unauthorized\
    \                      |\n        |                 WWW-Authenticate: Digest \
    \             |\n        |                                (RAND, AUTN delivered)\
    \ |\n        |<------------------------------------------------------|\n     \
    \   |                                                       |\n    +------------------------------------+\
    \                      |\n    | Client runs AKA algorithms on ISIM,|         \
    \             |\n    | verifies AUTN, derives RES         |                  \
    \    |\n    | and session keys.                  |                      |\n  \
    \  +------------------------------------+                      |\n        |  \
    \                                                     |\n        | 3) REGISTER\
    \                                           |\n        |    Authorization: Digest\
    \ (RES is used)                |\n        |------------------------------------------------------>|\n\
    \        |                                                       |\n        |\
    \                            +------------------------------+\n        |     \
    \                       | Server checks the given RES, |\n        |          \
    \                  | and finds it correct.        |\n        |               \
    \             +------------------------------+\n        |                    \
    \                                   |\n        |               4) 200 OK     \
    \                          |\n        |                  Authentication-Info:\
    \ (XRES is used)  |\n        |<------------------------------------------------------|\n\
    \        |                                                       |\n     Figure\
    \ 2: Message flow representing a successful authentication.\n   1) Initial request\n\
    \      REGISTER sip:home.mobile.biz SIP/2.0\n   2) Response containing a challenge\n\
    \      SIP/2.0 401 Unauthorized\n      WWW-Authenticate: Digest\n            \
    \  realm=\"RoamingUsers@mobile.biz\",\n              nonce=\"CjPk9mRqNuT25eRkajM09uTl9nM09uTl9nMz5OX25PZz==\"\
    ,\n              qop=\"auth,auth-int\",\n              opaque=\"5ccc069c403ebaf9f0171e9517f40e41\"\
    ,\n              algorithm=AKAv1-MD5\n   3) Request containing credentials\n \
    \     REGISTER sip:home.mobile.biz SIP/2.0\n      Authorization: Digest\n    \
    \          username=\"jon.dough@mobile.biz\",\n              realm=\"RoamingUsers@mobile.biz\"\
    ,\n              nonce=\"CjPk9mRqNuT25eRkajM09uTl9nM09uTl9nMz5OX25PZz==\",\n \
    \             uri=\"sip:home.mobile.biz\",\n              qop=auth-int,\n    \
    \          nc=00000001,\n              cnonce=\"0a4f113b\",\n              response=\"\
    6629fae49393a05397450978507c4ef1\",\n              opaque=\"5ccc069c403ebaf9f0171e9517f40e41\"\
    \n   4) Successful response\n      SIP/2.0 200 OK\n      Authentication-Info:\n\
    \              qop=auth-int,\n              rspauth=\"6629fae49393a05397450978507c4ef1\"\
    ,\n              cnonce=\"0a4f113b\",\n              nc=00000001\n   Figure 3\
    \ below describes a message flow describing a Digest AKA\n   authentication process,\
    \ in which there is a synchronization failure.\n      Client                 \
    \                                Server\n        | 1) REGISTER               \
    \                            |\n        |------------------------------------------------------>|\n\
    \        |                                                       |\n        |\
    \                            +-----------------------------+\n        |      \
    \                      | Server runs AKA algorithms, |\n        |            \
    \                | generates RAND and AUTN.    |\n        |                  \
    \          +-----------------------------+\n        |                        \
    \                               |\n        |              2) 401 Unauthorized\
    \                      |\n        |                 WWW-Authenticate: Digest \
    \             |\n        |                                (RAND, AUTN delivered)\
    \ |\n        |<------------------------------------------------------|\n     \
    \   |                                                       |\n    +------------------------------------+\
    \                      |\n    | Client runs AKA algorithms on ISIM,|         \
    \             |\n    | verifies the AUTN, but discovers   |                  \
    \    |\n    | that it contains an invalid        |                      |\n  \
    \  | sequence number. The client then   |                      |\n    | generates\
    \ an AUTS token.           |                      |\n    +------------------------------------+\
    \                      |\n        |                                          \
    \             |\n        | 3) REGISTER                                       \
    \    |\n        |    Authorization: Digest (AUTS is delivered)          |\n  \
    \      |------------------------------------------------------>|\n        |  \
    \                                                     |\n        |           \
    \                       +-----------------------+\n        |                 \
    \                 | Server performs       |\n        |                       \
    \           | re-synchronization    |\n        |                             \
    \     | using AUTS and RAND.  |\n        |                                  +-----------------------+\n\
    \        |                                                       |\n        |\
    \              4) 401 Unauthorized                      |\n        |         \
    \        WWW-Authenticate: Digest              |\n        |                  \
    \              (re-synchronized RAND, |\n        |                           \
    \      AUTN delivered)       |\n        |<------------------------------------------------------|\n\
    \        |                                                       |\n   Figure\
    \ 3: Message flow representing an authentication synchronization\n   failure.\n\
    \   1) Initial request\n      REGISTER sip:home.mobile.biz SIP/2.0\n   2) Response\
    \ containing a challenge\n      SIP/2.0 401 Unauthorized\n      WWW-Authenticate:\
    \ Digest\n            realm=\"RoamingUsers@mobile.biz\",\n            qop=\"auth\"\
    ,\n            nonce=\"CjPk9mRqNuT25eRkajM09uTl9nM09uTl9nMz5OX25PZz==\",\n   \
    \         opaque=\"5ccc069c403ebaf9f0171e9517f40e41\",\n            algorithm=AKAv1-MD5\n\
    \   3) Request containing credentials\n      REGISTER sip:home.mobile.biz SIP/2.0\n\
    \      Authorization: Digest\n            username=\"jon.dough@mobile.biz\",\n\
    \            realm=\"RoamingUsers@mobile.biz\",\n            nonce=\"CjPk9mRqNuT25eRkajM09uTl9nM09uTl9nMz5OX25PZz==\"\
    ,\n            uri=\"sip:home.mobile.biz\",\n            qop=auth,\n         \
    \   nc=00000001,\n            cnonce=\"0a4f113b\",\n            response=\"4429ffe49393c02397450934607c4ef1\"\
    ,\n            opaque=\"5ccc069c403ebaf9f0171e9517f40e41\",\n            auts=\"\
    5PYxMuX2NOT2NeQ=\"\n   4) Response containing a new challenge\n      SIP/2.0 401\
    \ Unauthorized\n      WWW-Authenticate: Digest\n            realm=\"RoamingUsers@mobile.biz\"\
    ,\n            qop=\"auth,auth-int\",\n            nonce=\"9uQzNPbk9jM05Pbl5Pbl5DIz9uTl9uTl9jM0NTHk9uXk==\"\
    ,\n            opaque=\"dcd98b7102dd2f0e8b11d0f600bfb0c093\",\n            algorithm=AKAv1-MD5\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   In general, Digest AKA is vulnerable to the same\
    \ security threats as\n   HTTP authentication [2].  This chapter discusses the\
    \ relevant\n   exceptions.\n"
- title: 5.1 Authentication of Clients using Digest AKA
  contents:
  - "5.1 Authentication of Clients using Digest AKA\n   AKA is typically -- though\
    \ this isn't a theoretical limitation -- run\n   on an ISIM application that usually\
    \ resides in a tamper resistant\n   smart card.  Interfaces to the ISIM exist,\
    \ which enable the host\n   device to request authentication to be performed on\
    \ the card.\n   However, these interfaces do not allow access to the long-term\
    \ secret\n   outside the ISIM, and the authentication can only be performed if\
    \ the\n   device accessing the ISIM has knowledge of a PIN code, shared between\n\
    \   the user and the ISIM.  Such PIN codes are typically obtained from\n   user\
    \ input, and are usually required when the device is powered on.\n   The use of\
    \ tamper resistant cards with secure interfaces implies that\n   Digest AKA is\
    \ typically more secure than regular Digest\n   implementations, as neither possession\
    \ of the host device nor Trojan\n   Horses in the software give access to the\
    \ long term secret.  Where a\n   PIN scheme is used, the user is also authenticated\
    \ when the device is\n   powered on.  However, there may be a difference in the\
    \ resulting\n   security of Digest AKA, compared to traditional Digest\n   implementations,\
    \ depending of course on whether those implementations\n   cache/store passwords\
    \ that are received from the user.\n"
- title: 5.2 Limited Use of Nonce Values
  contents:
  - "5.2 Limited Use of Nonce Values\n   The Digest scheme uses server-specified nonce\
    \ values to seed the\n   generation of the request-digest value.  The server is\
    \ free to\n   construct the nonce in such a way, that it may only be used from\
    \ a\n   particular client, for a particular resource, for a limited period of\n\
    \   time or number of uses, or any other restrictions.  Doing so\n   strengthens\
    \ the protection provided against, for example, replay\n   attacks.\n   Digest\
    \ AKA limits the applicability of a nonce value to a particular\n   ISIM.  Typically,\
    \ the ISIM is accessible only to one client device at\n   a time.  However, the\
    \ nonce values are strong and secure even though\n   limited to a particular ISIM.\
    \  Additionally, this requires that the\n   server is provided with the client\
    \ identity before an authentication\n   challenge can be generated.  If a client\
    \ identity is not available,\n   an additional round trip is needed to acquire\
    \ it.  Such a case is\n   analogous to an AKA synchronization failure.\n   A server\
    \ may allow each nonce value to be used only once by sending a\n   next-nonce\
    \ directive in the Authentication-Info header field of every\n   response.  However,\
    \ this may cause a synchronization failure, and\n   consequently some additional\
    \ round trips in AKA, if the same SQN\n   space is also used for other access\
    \ schemes at the same time.\n"
- title: 5.3 Multiple Authentication Schemes and Algorithms
  contents:
  - "5.3 Multiple Authentication Schemes and Algorithms\n   In HTTP authentication,\
    \ a user agent MUST choose the strongest\n   authentication scheme it understands\
    \ and request credentials from the\n   user, based upon that challenge.\n   In\
    \ general, using passwords generated by Digest AKA with other HTTP\n   authentication\
    \ schemes is not recommended even though the realm\n   values or protection domains\
    \ would coincide.  In these cases, a\n   password should be requested from the\
    \ end-user instead.  Digest AKA\n   passwords MUST NOT be re-used with such HTTP\
    \ authentication schemes,\n   which send the password in clear.  In particular,\
    \ AKA passwords MUST\n   NOT be re-used with HTTP Basic.\n   The same principle\
    \ must be applied within a scheme if several\n   algorithms are supported.  A\
    \ client receiving an HTTP Digest\n   challenge with several available algorithms\
    \ MUST choose the strongest\n   algorithm it understands.  For example, Digest\
    \ with \"AKAv1-MD5\" would\n   be stronger than Digest with \"MD5\".\n"
- title: 5.4 Online Dictionary Attacks
  contents:
  - "5.4 Online Dictionary Attacks\n   Since user-selected passwords are typically\
    \ quite simple, it has been\n   proposed that servers should not accept passwords\
    \ for HTTP Digest,\n   which are in the dictionary [2].  This potential threat\
    \ does not\n   exist in HTTP Digest AKA because the algorithm will use ISIM\n\
    \   originated passwords.  However, the end-user must still be careful\n   with\
    \ PIN codes.  Even though HTTP Digest AKA password requests are\n   never displayed\
    \ to the end-user, she will be authenticated to the\n   ISIM via a PIN code. \
    \ Commonly known initial PIN codes are typically\n   installed to the ISIM during\
    \ manufacturing and if the end-users do\n   not change them, there is a danger\
    \ that an unauthorized user may be\n   able to use the device.  Naturally this\
    \ requires that the\n   unauthorized user has access to the physical device, and\
    \ that the\n   end-user has not changed the initial PIN code.  For this reason,\n\
    \   end-users are strongly encouraged to change their PIN codes when they\n  \
    \ receive an ISIM.\n"
- title: 5.5 Session Protection
  contents:
  - "5.5 Session Protection\n   Digest AKA is able to generate additional session\
    \ keys for integrity\n   (IK) and confidentiality (CK) protection.  Even though\
    \ this document\n   does not specify the use of these additional keys, they may\
    \ be used\n   for creating additional security within HTTP authentication or some\n\
    \   other security mechanism.\n"
- title: 5.6 Replay Protection
  contents:
  - "5.6 Replay Protection\n   AKA allows sequence numbers to be tracked for each\
    \ authentication,\n   with the SQN parameter.  This allows authentications to\
    \ be replay\n   protected even if the RAND parameter happened to be the same for\
    \ two\n   authentication requests.  More importantly, this offers additional\n\
    \   protection for the case where an attacker replays an old\n   authentication\
    \ request sent by the network.  The client will be able\n   to detect that the\
    \ request is old, and refuse authentication.  This\n   proves liveliness of the\
    \ authentication request even in the case\n   where a MitM attacker tries to trick\
    \ the client into providing an\n   authentication response, and then replaces\
    \ parts of the message with\n   something else.  In other words, a client challenged\
    \ by Digest AKA is\n   not vulnerable for chosen plain text attacks.  Finally,\
    \ frequent\n   sequence number errors would reveal an attack where the tamper\n\
    \   resistant card has been cloned and is being used in multiple devices.\n  \
    \ The downside of sequence number tracking is that servers must hold\n   more\
    \ information for each user than just their long-term secret,\n   namely the current\
    \ SQN value.  However, this information is typically\n   not stored in the SIP\
    \ nodes, but in dedicated authentication servers\n   instead.\n"
- title: 5.7 Improvements to AKA Security
  contents:
  - "5.7 Improvements to AKA Security\n   Even though AKA is perceived as a secure\
    \ mechanism, Digest AKA is\n   able to improve it.  More specifically, the AKA\
    \ parameters carried\n   between the client and the server during authentication\
    \ may be\n   protected along with other parts of the message by using Digest AKA.\n\
    \   This is not possible with plain AKA.\n"
- title: 6. IANA Considerations
  contents:
  - "6. IANA Considerations\n   This document specifies an aka-version namespace in\
    \ Section 3.1 which\n   requires a central coordinating body.  The body responsible\
    \ for this\n   coordination is the Internet Assigned Numbers Authority (IANA).\n\
    \   The default aka-version defined in this document is \"AKAv1\".\n   Following\
    \ the policies outlined in [5], versions above 1 are\n   allocated as Expert Review.\n\
    \   Registrations with the IANA MUST include the version number being\n   registered,\
    \ including the \"AKAv\" prefix.  For example, a registration\n   for \"AKAv2\"\
    \ would potentially be a valid one, whereas a registration\n   for \"FOOv2\" or\
    \ \"2\" would not be valid.  Further, the registration\n   MUST include contact\
    \ information for the party responsible for the\n   registration.\n   As this\
    \ document defines the default aka-version, the initial IANA\n   registration\
    \ for aka-version values will contain an entry for\n   \"AKAv1\".\n"
- title: 6.1 Registration Template
  contents:
  - "6.1 Registration Template\n      To: ietf-digest-aka@iana.org\n      Subject:\
    \ Registration of a new AKA version\n      Version identifier:\n          (Must\
    \ contain a valid aka-version value,\n           as described in section 3.1.)\n\
    \      Person & email address to contact for further information:\n          (Must\
    \ contain contact information for the\n           person(s) responsible for the\
    \ registration.)\n"
- title: Normative References
  contents:
  - "Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs to Indicate\
    \ Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [2]  Franks,\
    \ J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,\n        Leach, P., Luotonen,\
    \ A. and L. Stewart, \"HTTP Authentication:\n        Basic and Digest Access Authentication\"\
    , RFC 2617, June 1999.\n   [3]  Rosenberg, J., Schulzrinne, H., Camarillo, G.,\
    \ Johnston, A.,\n        Peterson, J., Sparks, R., Handley, M. and E. Schooler,\
    \ \"SIP:\n        Session Initiation Protocol\", RFC 3261, June 2002.\n   [4]\
    \  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n        Extensions\
    \ (MIME) Part One: Format of Internet Message Bodies\",\n        RFC 2045, November\
    \ 1996.\n"
- title: Informative References
  contents:
  - "Informative References\n   [5]  Narten, T. and H. Alvestrand, \"Guidelines for\
    \ Writing an IANA\n        Considerations Section in RFCs\", BCP 26, RFC 2434,\
    \ October 1998.\n   [6]  3rd Generation Partnership Project, \"Security Architecture\n\
    \        (Release 4)\", TS 33.102, December 2001.\n   [7]  http://www.iana.org,\
    \ \"Assigned Numbers\".\n"
- title: Appendix A. Acknowledgements
  contents:
  - "Appendix A. Acknowledgements\n   The authors would like to thank Sanjoy Sen,\
    \ Jonathan Rosenberg, Pete\n   McCann, Tao Haukka, Ilkka Uusitalo, Henry Haverinen,\
    \ John Loughney,\n   Allison Mankin and Greg Rose.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Aki Niemi\n   Nokia\n   P.O. Box 301\n   NOKIA GROUP,\
    \ FIN  00045\n   Finland\n   Phone: +358 50 389 1644\n   EMail: aki.niemi@nokia.com\n\
    \   Jari Arkko\n   Ericsson\n   Hirsalantie 1\n   Jorvas, FIN  02420\n   Finland\n\
    \   Phone: +358 40 5079256\n   EMail: jari.arkko@ericsson.com\n   Vesa Torvinen\n\
    \   Ericsson\n   Joukahaisenkatu 1\n   Turku, FIN  20520\n   Finland\n   Phone:\
    \ +358 40 7230822\n   EMail: vesa.torvinen@ericsson.fi\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
