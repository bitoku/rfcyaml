- title: __initial_text__
  contents:
  - ' Transport Subsystem for the Simple Network Management Protocol (SNMP)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n   This document may contain\
    \ material from IETF Documents or IETF\n   Contributions published or made publicly\
    \ available before November\n   10, 2008.  The person(s) controlling the copyright\
    \ in some of this\n   material may not have granted the IETF Trust the right to\
    \ allow\n   modifications of such material outside the IETF Standards Process.\n\
    \   Without obtaining an adequate license from the person(s) controlling\n   the\
    \ copyright in such materials, this document may not be modified\n   outside the\
    \ IETF Standards Process, and derivative works of it may\n   not be created outside\
    \ the IETF Standards Process, except to format\n   it for publication as an RFC\
    \ or to translate it into languages other\n   than English.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a Transport Subsystem, extending the Simple\n\
    \   Network Management Protocol (SNMP) architecture defined in RFC 3411.\n   This\
    \ document defines a subsystem to contain Transport Models that is\n   comparable\
    \ to other subsystems in the RFC 3411 architecture.  As work\n   is being done\
    \ to expand the transports to include secure transports,\n   such as the Secure\
    \ Shell (SSH) Protocol and Transport Layer Security\n   (TLS), using a subsystem\
    \ will enable consistent design and modularity\n   of such Transport Models. \
    \ This document identifies and describes\n   some key aspects that need to be\
    \ considered for any Transport Model\n   for SNMP.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  The Internet-Standard Management Framework . . .\
    \ . . . . .  3\n     1.2.  Conventions  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n     1.3.  Where This Extension Fits  . . . . . . . . . . . . .\
    \ . . .  4\n   2.  Motivation . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  5\n   3.  Requirements of a Transport Model  . . . . . . . . . . . . .\
    \ .  7\n     3.1.  Message Security Requirements  . . . . . . . . . . . . . .\
    \  7\n       3.1.1.  Security Protocol Requirements . . . . . . . . . . . .  7\n\
    \     3.2.  SNMP Requirements  . . . . . . . . . . . . . . . . . . . .  8\n  \
    \     3.2.1.  Architectural Modularity Requirements  . . . . . . . .  8\n    \
    \   3.2.2.  Access Control Requirements  . . . . . . . . . . . . . 11\n      \
    \ 3.2.3.  Security Parameter Passing Requirements  . . . . . . . 12\n       3.2.4.\
    \  Separation of Authentication and Authorization . . . . 12\n     3.3.  Session\
    \ Requirements . . . . . . . . . . . . . . . . . . . 13\n       3.3.1.  No SNMP\
    \ Sessions . . . . . . . . . . . . . . . . . . . 13\n       3.3.2.  Session Establishment\
    \ Requirements . . . . . . . . . . 14\n       3.3.3.  Session Maintenance Requirements\
    \ . . . . . . . . . . . 15\n       3.3.4.  Message Security versus Session Security\
    \ . . . . . . . 15\n   4.  Scenario Diagrams and the Transport Subsystem  . .\
    \ . . . . . . 16\n   5.  Cached Information and References  . . . . . . . . .\
    \ . . . . . 17\n     5.1.  securityStateReference . . . . . . . . . . . . . .\
    \ . . . . 17\n     5.2.  tmStateReference . . . . . . . . . . . . . . . . . .\
    \ . . . 17\n       5.2.1.  Transport Information  . . . . . . . . . . . . . .\
    \ . . 18\n       5.2.2.  securityName . . . . . . . . . . . . . . . . . . . .\
    \ . 19\n       5.2.3.  securityLevel  . . . . . . . . . . . . . . . . . . . .\
    \ 20\n       5.2.4.  Session Information  . . . . . . . . . . . . . . . . . 20\n\
    \   6.  Abstract Service Interfaces  . . . . . . . . . . . . . . . . . 21\n  \
    \   6.1.  sendMessage ASI  . . . . . . . . . . . . . . . . . . . . . 21\n    \
    \ 6.2.  Changes to RFC 3411 Outgoing ASIs  . . . . . . . . . . . . 22\n      \
    \ 6.2.1.  Message Processing Subsystem Primitives  . . . . . . . 22\n       6.2.2.\
    \  Security Subsystem Primitives  . . . . . . . . . . . . 23\n     6.3.  The receiveMessage\
    \ ASI . . . . . . . . . . . . . . . . . . 24\n     6.4.  Changes to RFC 3411 Incoming\
    \ ASIs  . . . . . . . . . . . . 25\n       6.4.1.  Message Processing Subsystem\
    \ Primitive . . . . . . . . 25\n       6.4.2.  Security Subsystem Primitive .\
    \ . . . . . . . . . . . . 26\n   7.  Security Considerations  . . . . . . . .\
    \ . . . . . . . . . . . 27\n     7.1.  Coexistence, Security Parameters, and Access\
    \ Control . . . 27\n   8.  IANA Considerations  . . . . . . . . . . . . . . .\
    \ . . . . . . 29\n   9.  Acknowledgments  . . . . . . . . . . . . . . . . . .\
    \ . . . . . 29\n   10. References . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 30\n     10.1. Normative References . . . . . . . . . . . . . . . .\
    \ . . . 30\n     10.2. Informative References . . . . . . . . . . . . . . . .\
    \ . . 30\n   Appendix A.  Why tmStateReference? . . . . . . . . . . . . . . .\
    \ . 32\n     A.1.  Define an Abstract Service Interface . . . . . . . . . . .\
    \ 32\n     A.2.  Using an Encapsulating Header  . . . . . . . . . . . . . . 32\n\
    \     A.3.  Modifying Existing Fields in an SNMP Message . . . . . . . 32\n  \
    \   A.4.  Using a Cache  . . . . . . . . . . . . . . . . . . . . . . 33\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines a Transport Subsystem, extending the\
    \ Simple\n   Network Management Protocol (SNMP) architecture defined in [RFC3411].\n\
    \   This document identifies and describes some key aspects that need to\n   be\
    \ considered for any Transport Model for SNMP.\n"
- title: 1.1.  The Internet-Standard Management Framework
  contents:
  - "1.1.  The Internet-Standard Management Framework\n   For a detailed overview\
    \ of the documents that describe the current\n   Internet-Standard Management\
    \ Framework, please refer to Section 7 of\n   RFC 3410 [RFC3410].\n"
- title: 1.2.  Conventions
  contents:
  - "1.2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119 [RFC2119].\n   Lowercase versions of the keywords should be read as\
    \ in normal\n   English.  They will usually, but not always, be used in a context\n\
    \   that relates to compatibility with the RFC 3411 architecture or the\n   subsystem\
    \ defined here but that might have no impact on on-the-wire\n   compatibility.\
    \  These terms are used as guidance for designers of\n   proposed IETF models\
    \ to make the designs compatible with RFC 3411\n   subsystems and Abstract Service\
    \ Interfaces (ASIs).  Implementers are\n   free to implement differently.  Some\
    \ usages of these lowercase terms\n   are simply normal English usage.\n   For\
    \ consistency with SNMP-related specifications, this document\n   favors terminology\
    \ as defined in STD 62, rather than favoring\n   terminology that is consistent\
    \ with non-SNMP specifications that use\n   different variations of the same terminology.\
    \  This is consistent\n   with the IESG decision to not require the SNMPv3 terminology\
    \ be\n   modified to match the usage of other non-SNMP specifications when\n \
    \  SNMPv3 was advanced to Full Standard.\n   This document discusses an extension\
    \ to the modular RFC 3411\n   architecture; this is not a protocol document. \
    \ An architectural\n   \"MUST\" is a really sharp constraint; to allow for the\
    \ evolution of\n   technology and to not unnecessarily constrain future models,\
    \ often a\n   \"SHOULD\" or a \"should\" is more appropriate than a \"MUST\" in\
    \ an\n   architecture.  Future models MAY express tighter requirements for\n \
    \  their own model-specific processing.\n"
- title: 1.3.  Where This Extension Fits
  contents:
  - "1.3.  Where This Extension Fits\n   It is expected that readers of this document\
    \ will have read RFCs 3410\n   and 3411, and have a general understanding of the\
    \ functionality\n   defined in RFCs 3412-3418.\n   The \"Transport Subsystem\"\
    \ is an additional component for the SNMP\n   Engine depicted in RFC 3411, Section\
    \ 3.1.\n   The following diagram depicts its place in the RFC 3411 architecture.\n\
    \   +-------------------------------------------------------------------+\n  \
    \ |  SNMP entity                                                      |\n   |\
    \                                                                   |\n   |  +-------------------------------------------------------------+\
    \  |\n   |  |  SNMP engine (identified by snmpEngineID)                   |  |\n\
    \   |  |                                                             |  |\n  \
    \ |  |  +------------+                                             |  |\n   |\
    \  |  | Transport  |                                             |  |\n   |  |\
    \  | Subsystem  |                                             |  |\n   |  |  +------------+\
    \                                             |  |\n   |  |                  \
    \                                           |  |\n   |  |  +------------+ +------------+\
    \ +-----------+ +-----------+  |  |\n   |  |  | Dispatcher | | Message    | |\
    \ Security  | | Access    |  |  |\n   |  |  |            | | Processing | | Subsystem\
    \ | | Control   |  |  |\n   |  |  |            | | Subsystem  | |           |\
    \ | Subsystem |  |  |\n   |  |  +------------+ +------------+ +-----------+ +-----------+\
    \  |  |\n   |  +-------------------------------------------------------------+\
    \  |\n   |                                                                   |\n\
    \   |  +-------------------------------------------------------------+  |\n  \
    \ |  |  Application(s)                                             |  |\n   |\
    \  |                                                             |  |\n   |  |\
    \  +-------------+  +--------------+  +--------------+        |  |\n   |  |  |\
    \ Command     |  | Notification |  | Proxy        |        |  |\n   |  |  | Generator\
    \   |  | Receiver     |  | Forwarder    |        |  |\n   |  |  +-------------+\
    \  +--------------+  +--------------+        |  |\n   |  |                   \
    \                                          |  |\n   |  |  +-------------+  +--------------+\
    \  +--------------+        |  |\n   |  |  | Command     |  | Notification |  |\
    \ Other        |        |  |\n   |  |  | Responder   |  | Originator   |  |  \
    \            |        |  |\n   |  |  +-------------+  +--------------+  +--------------+\
    \        |  |\n   |  +-------------------------------------------------------------+\
    \  |\n   |                                                                   |\n\
    \   +-------------------------------------------------------------------+\n  \
    \ The transport mappings defined in RFC 3417 do not provide lower-layer\n   security\
    \ functionality, and thus do not provide transport-specific\n   security parameters.\
    \  This document updates RFC 3411 and RFC 3417 by\n   defining an architectural\
    \ extension and modifying the ASIs that\n   transport mappings (hereafter called\
    \ \"Transport Models\") can use to\n   pass transport-specific security parameters\
    \ to other subsystems,\n   including transport-specific security parameters that\
    \ are translated\n   into the transport-independent securityName and securityLevel\n\
    \   parameters.\n   The Transport Security Model [RFC5591] and the Secure Shell\
    \ Transport\n   Model [RFC5592] utilize the Transport Subsystem.  The Transport\n\
    \   Security Model is an alternative to the existing SNMPv1 Security\n   Model\
    \ [RFC3584], the SNMPv2c Security Model [RFC3584], and the User-\n   based Security\
    \ Model [RFC3414].  The Secure Shell Transport Model is\n   an alternative to\
    \ existing transport mappings as described in\n   [RFC3417].\n"
- title: 2.  Motivation
  contents:
  - "2.  Motivation\n   Just as there are multiple ways to secure one's home or business,\
    \ in\n   a continuum of alternatives, there are multiple ways to secure a\n  \
    \ network management protocol.  Let's consider three general\n   approaches.\n\
    \   In the first approach, an individual could sit on his front porch\n   waiting\
    \ for intruders.  In the second approach, he could hire an\n   employee, schedule\
    \ the employee, position the employee to guard what\n   he wants protected, hire\
    \ a second guard to cover if the first gets\n   sick, and so on.  In the third\
    \ approach, he could hire a security\n   company, tell them what he wants protected,\
    \ and leave the details to\n   them.  Considerations of hiring and training employees,\
    \ positioning\n   and scheduling the guards, arranging for cover, etc., are the\n\
    \   responsibility of the security company.  The individual therefore\n   achieves\
    \ the desired security, with significantly less effort on his\n   part except\
    \ for identifying requirements and verifying the quality of\n   service being\
    \ provided.\n   The User-based Security Model (USM) as defined in [RFC3414] largely\n\
    \   uses the first approach -- it provides its own security.  It utilizes\n  \
    \ existing mechanisms (e.g., SHA), but provides all the coordination.\n   USM\
    \ provides for the authentication of a principal, message\n   encryption, data\
    \ integrity checking, timeliness checking, etc.\n   USM was designed to be independent\
    \ of other existing security\n   infrastructures.  USM therefore uses a separate\
    \ principal and key\n   management infrastructure.  Operators have reported that\
    \ deploying\n   another principal and key management infrastructure in order to\
    \ use\n   SNMPv3 is a deterrent to deploying SNMPv3.  It is possible to use\n\
    \   external mechanisms to handle the distribution of keys for use by\n   USM.\
    \  The more important issue is that operators wanted to leverage\n   existing\
    \ user management infrastructures that were not specific to\n   SNMP.\n   A USM-compliant\
    \ architecture might combine the authentication\n   mechanism with an external\
    \ mechanism, such as RADIUS [RFC2865], to\n   provide the authentication service.\
    \  Similarly, it might be possible\n   to utilize an external protocol to encrypt\
    \ a message, to check\n   timeliness, to check data integrity, etc.  However,\
    \ this corresponds\n   to the second approach -- requiring the coordination of\
    \ a number of\n   differently subcontracted services.  Building solid security\
    \ between\n   the various services is difficult, and there is a significant\n\
    \   potential for gaps in security.\n   An alternative approach might be to utilize\
    \ one or more lower-layer\n   security mechanisms to provide the message-oriented\
    \ security services\n   required.  These would include authentication of the sender,\n\
    \   encryption, timeliness checking, and data integrity checking.  This\n   corresponds\
    \ to the third approach described above.  There are a\n   number of IETF standards\
    \ available or in development to address these\n   problems through security layers\
    \ at the transport layer or\n   application layer, among them are TLS [RFC5246],\
    \ Simple\n   Authentication and Security Layer (SASL) [RFC4422], and SSH [RFC4251]\n\
    \   From an operational perspective, it is highly desirable to use\n   security\
    \ mechanisms that can unify the administrative security\n   management for SNMPv3,\
    \ command line interfaces (CLIs), and other\n   management interfaces.  The use\
    \ of security services provided by\n   lower layers is the approach commonly used\
    \ for the CLI, and is also\n   the approach being proposed for other network management\
    \ protocols,\n   such as syslog [RFC5424] and NETCONF [RFC4741].\n   This document\
    \ defines a Transport Subsystem extension to the RFC 3411\n   architecture that\
    \ is based on the third approach.  This extension\n   specifies how other lower-layer\
    \ protocols with common security\n   infrastructures can be used underneath the\
    \ SNMP protocol and the\n   desired goal of unified administrative security can\
    \ be met.\n   This extension allows security to be provided by an external protocol\n\
    \   connected to the SNMP engine through an SNMP Transport Model\n   [RFC3417].\
    \  Such a Transport Model would then enable the use of\n   existing security mechanisms,\
    \ such as TLS [RFC5246] or SSH [RFC4251],\n   within the RFC 3411 architecture.\n\
    \   There are a number of Internet security protocols and mechanisms that\n  \
    \ are in widespread use.  Many of them try to provide a generic\n   infrastructure\
    \ to be used by many different application-layer\n   protocols.  The motivation\
    \ behind the Transport Subsystem is to\n   leverage these protocols where it seems\
    \ useful.\n   There are a number of challenges to be addressed to map the security\n\
    \   provided by a secure transport into the SNMP architecture so that\n   SNMP\
    \ continues to provide interoperability with existing\n   implementations.  These\
    \ challenges are described in detail in this\n   document.  For some key issues,\
    \ design choices are described that\n   might be made to provide a workable solution\
    \ that meets operational\n   requirements and fits into the SNMP architecture\
    \ defined in\n   [RFC3411].\n"
- title: 3.  Requirements of a Transport Model
  contents:
  - '3.  Requirements of a Transport Model

    '
- title: 3.1.  Message Security Requirements
  contents:
  - "3.1.  Message Security Requirements\n   Transport security protocols SHOULD provide\
    \ protection against the\n   following message-oriented threats:\n   1.  modification\
    \ of information\n   2.  masquerade\n   3.  message stream modification\n   4.\
    \  disclosure\n   These threats are described in Section 1.4 of [RFC3411].  The\n\
    \   security requirements outlined there do not require protection\n   against\
    \ denial of service or traffic analysis; however, transport\n   security protocols\
    \ should not make those threats significantly worse.\n"
- title: 3.1.1.  Security Protocol Requirements
  contents:
  - "3.1.1.  Security Protocol Requirements\n   There are a number of standard protocols\
    \ that could be proposed as\n   possible solutions within the Transport Subsystem.\
    \  Some factors\n   should be considered when selecting a protocol.\n   Using\
    \ a protocol in a manner for which it was not designed has\n   numerous problems.\
    \  The advertised security characteristics of a\n   protocol might depend on it\
    \ being used as designed; when used in\n   other ways, it might not deliver the\
    \ expected security\n   characteristics.  It is recommended that any proposed\
    \ model include a\n   description of the applicability of the Transport Model.\n\
    \   A Transport Model SHOULD NOT require modifications to the underlying\n   protocol.\
    \  Modifying the protocol might change its security\n   characteristics in ways\
    \ that could impact other existing usages.  If\n   a change is necessary, the\
    \ change SHOULD be an extension that has no\n   impact on the existing usages.\
    \  Any Transport Model specification\n   should include a description of potential\
    \ impact on other usages of\n   the protocol.\n   Since multiple Transport Models\
    \ can exist simultaneously within the\n   Transport Subsystem, Transport Models\
    \ MUST be able to coexist with\n   each other.\n"
- title: 3.2.  SNMP Requirements
  contents:
  - '3.2.  SNMP Requirements

    '
- title: 3.2.1.  Architectural Modularity Requirements
  contents:
  - "3.2.1.  Architectural Modularity Requirements\n   SNMP version 3 (SNMPv3) is\
    \ based on a modular architecture (defined\n   in Section 3 of [RFC3411]) to allow\
    \ the evolution of the SNMP\n   protocol standards over time and to minimize the\
    \ side effects between\n   subsystems when changes are made.\n   The RFC 3411\
    \ architecture includes a Message Processing Subsystem for\n   permitting different\
    \ message versions to be handled by a single\n   engine, a Security Subsystem\
    \ for enabling different methods of\n   providing security services, Applications\
    \ to support different types\n   of Application processors, and an Access Control\
    \ Subsystem for\n   allowing multiple approaches to access control.  The RFC 3411\n\
    \   architecture does not include a subsystem for Transport Models,\n   despite\
    \ the fact there are multiple transport mappings already\n   defined for SNMP\
    \ [RFC3417].  This document describes a Transport\n   Subsystem that is compatible\
    \ with the RFC 3411 architecture.  As work\n   is being done to use secure transports\
    \ such as SSH and TLS, using a\n   subsystem will enable consistent design and\
    \ modularity of such\n   Transport Models.\n   The design of this Transport Subsystem\
    \ accepts the goals of the RFC\n   3411 architecture that are defined in Section\
    \ 1.5 of [RFC3411].  This\n   Transport Subsystem uses a modular design that permits\
    \ Transport\n   Models (which might or might not be security-aware) to be \"plugged\n\
    \   into\" the RFC 3411 architecture.  Such Transport Models would be\n   independent\
    \ of other modular SNMP components as much as possible.\n   This design also permits\
    \ Transport Models to be advanced through the\n   standards process independently\
    \ of other Transport Models.\n   The following diagram depicts the SNMPv3 architecture,\
    \ including the\n   new Transport Subsystem defined in this document and a new\
    \ Transport\n   Security Model defined in [RFC5591].\n   +------------------------------+\n\
    \   |    Network                   |\n   +------------------------------+\n  \
    \    ^       ^              ^\n      |       |              |\n      v       v\
    \              v\n   +-------------------------------------------------------------------+\n\
    \   | +--------------------------------------------------+              |\n  \
    \ | |  Transport Subsystem                             |              |\n   |\
    \ | +-----+ +-----+ +-----+ +-----+       +-------+  |              |\n   | |\
    \ | UDP | | TCP | | SSH | | TLS | . . . | other |  |              |\n   | | +-----+\
    \ +-----+ +-----+ +-----+       +-------+  |              |\n   | +--------------------------------------------------+\
    \              |\n   |              ^                                        \
    \            |\n   |              |                                          \
    \          |\n   | Dispatcher   v                                            \
    \        |\n   | +-------------------+ +---------------------+  +----------------+\
    \ |\n   | | Transport         | | Message Processing  |  | Security       | |\n\
    \   | | Dispatch          | | Subsystem           |  | Subsystem      | |\n  \
    \ | |                   | |     +------------+  |  | +------------+ | |\n   |\
    \ |                   | |  +->| v1MP       |<--->| | USM        | | |\n   | |\
    \                   | |  |  +------------+  |  | +------------+ | |\n   | |  \
    \                 | |  |  +------------+  |  | +------------+ | |\n   | |    \
    \               | |  +->| v2cMP      |<--->| | Transport  | | |\n   | | Message\
    \           | |  |  +------------+  |  | | Security   | | |\n   | | Dispatch \
    \   <--------->|  +------------+  |  | | Model      | | |\n   | |            \
    \       | |  +->| v3MP       |<--->| +------------+ | |\n   | |              \
    \     | |  |  +------------+  |  | +------------+ | |\n   | | PDU Dispatch   \
    \   | |  |  +------------+  |  | | Other      | | |\n   | +-------------------+\
    \ |  +->| otherMP    |<--->| | Model(s)   | | |\n   |              ^        |\
    \     +------------+  |  | +------------+ | |\n   |              |        +---------------------+\
    \  +----------------+ |\n   |              v                                 \
    \                   |\n   |      +-------+-------------------------+---------------+\
    \          |\n   |      ^                                 ^               ^  \
    \        |\n   |      |                                 |               |    \
    \      |\n   |      v                                 v               v      \
    \    |\n   | +-------------+   +---------+   +--------------+  +-------------+\
    \ |\n   | |   COMMAND   |   | ACCESS  |   | NOTIFICATION |  |    PROXY    | |\n\
    \   | |  RESPONDER  |<->| CONTROL |<->|  ORIGINATOR  |  |  FORWARDER  | |\n  \
    \ | | Application |   |         |   | Applications |  | Application | |\n   |\
    \ +-------------+   +---------+   +--------------+  +-------------+ |\n   |  \
    \    ^                                 ^                          |\n   |    \
    \  |                                 |                          |\n   |      v\
    \                                 v                          |\n   | +----------------------------------------------+\
    \                  |\n   | |             MIB instrumentation              |  \
    \    SNMP entity |\n   +-------------------------------------------------------------------+\n"
- title: 3.2.1.1.  Changes to the RFC 3411 Architecture
  contents:
  - "3.2.1.1.  Changes to the RFC 3411 Architecture\n   The RFC 3411 architecture\
    \ and the Security Subsystem assume that a\n   Security Model is called by a Message\
    \ Processing Model and will\n   perform multiple security functions within the\
    \ Security Subsystem.  A\n   Transport Model that supports a secure transport\
    \ protocol might\n   perform similar security functions within the Transport Subsystem,\n\
    \   including the translation of transport-security parameters to/from\n   Security-Model-independent\
    \ parameters.\n   To accommodate this, an implementation-specific cache of transport-\n\
    \   specific information will be described (not shown), and the data\n   flows\
    \ on this path will be extended to pass Security-Model-\n   independent values.\
    \  This document amends some of the ASIs defined in\n   RFC 3411; these changes\
    \ are covered in Section 6 of this document.\n   New Security Models might be\
    \ defined that understand how to work with\n   these modified ASIs and the transport-information\
    \ cache.  One such\n   Security Model, the Transport Security Model, is defined\
    \ in\n   [RFC5591].\n"
- title: 3.2.1.2.  Changes to RFC 3411 Processing
  contents:
  - "3.2.1.2.  Changes to RFC 3411 Processing\n   The introduction of secure transports\
    \ affects the responsibilities\n   and order of processing within the RFC 3411\
    \ architecture.  While the\n   steps are the same, they might occur in a different\
    \ order, and might\n   be done by different subsystems.  With the existing RFC\
    \ 3411\n   architecture, security processing starts when the Message Processing\n\
    \   Model decodes portions of the encoded message to extract parameters\n   that\
    \ identify which Security Model MUST handle the security-related\n   tasks.\n\
    \   A secure transport performs those security functions on the message,\n   before\
    \ the message is decoded.  Some of these functions might then be\n   repeated\
    \ by the selected Security Model.\n"
- title: 3.2.1.3.  Passing Information between SNMP Engines
  contents:
  - "3.2.1.3.  Passing Information between SNMP Engines\n   A secure Transport Model\
    \ will establish an authenticated and possibly\n   encrypted tunnel between the\
    \ Transport Models of two SNMP engines.\n   After a transport-layer tunnel is\
    \ established, then SNMP messages can\n   be sent through the tunnel from one\
    \ SNMP engine to the other.  While\n   the Community Security Models [RFC3584]\
    \ and the User-based Security\n   Model establish a security association for each\
    \ SNMP message, newer\n   Transport Models MAY support sending multiple SNMP messages\
    \ through\n   the same tunnel to amortize the costs of establishing a security\n\
    \   association.\n"
- title: 3.2.2.  Access Control Requirements
  contents:
  - "3.2.2.  Access Control Requirements\n   RFC 3411 made some design decisions related\
    \ to the support of an\n   Access Control Subsystem.  These include establishing\
    \ and passing in\n   a model-independent manner the securityModel, securityName,\
    \ and\n   securityLevel parameters, and separating message authentication from\n\
    \   data-access authorization.\n"
- title: 3.2.2.1.  securityName and securityLevel Mapping
  contents:
  - "3.2.2.1.  securityName and securityLevel Mapping\n   SNMP data-access controls\
    \ are expected to work on the basis of who\n   can perform what operations on\
    \ which subsets of data, and based on\n   the security services that will be provided\
    \ to secure the data in\n   transit.  The securityModel and securityLevel parameters\
    \ establish\n   the protections for transit -- whether authentication and privacy\n\
    \   services will be or have been applied to the message.  The\n   securityName\
    \ is a model-independent identifier of the security\n   \"principal\".\n   A Security\
    \ Model plays a role in security that goes beyond protecting\n   the message --\
    \ it provides a mapping between the Security-Model-\n   specific principal for\
    \ an incoming message to a Security-Model\n   independent securityName that can\
    \ be used for subsequent processing,\n   such as for access control.  The securityName\
    \ is mapped from a\n   mechanism-specific identity, and this mapping must be done\
    \ for\n   incoming messages by the Security Model before it passes securityName\n\
    \   to the Message Processing Model via the processIncoming ASI.\n   A Security\
    \ Model is also responsible to specify, via the\n   securityLevel parameter, whether\
    \ incoming messages have been\n   authenticated and encrypted, and to ensure that\
    \ outgoing messages are\n   authenticated and encrypted based on the value of\
    \ securityLevel.\n   A Transport Model MAY provide suggested values for securityName\
    \ and\n   securityLevel.  A Security Model might have multiple sources for\n \
    \  determining the principal and desired security services, and a\n   particular\
    \ Security Model might or might not utilize the values\n   proposed by a Transport\
    \ Model when deciding the value of securityName\n   and securityLevel.\n   Documents\
    \ defining a new transport domain MUST define a prefix that\n   MAY be prepended\
    \ to all securityNames passed by the Security Model.\n   The prefix MUST include\
    \ one to four US-ASCII alpha-numeric\n   characters, not including a \":\" (US-ASCII\
    \ 0x3a) character.  If a\n   prefix is used, a securityName is constructed by\
    \ concatenating the\n   prefix and a \":\" (US-ASCII 0x3a) character, followed\
    \ by a non-empty\n   identity in an snmpAdminString-compatible format.  The prefix\
    \ can be\n   used by SNMP Applications to distinguish \"alice\" authenticated\
    \ by SSH\n   from \"alice\" authenticated by TLS.  Transport domains and their\n\
    \   corresponding prefixes are coordinated via the IANA registry \"SNMP\n   Transport\
    \ Domains\".\n"
- title: 3.2.3.  Security Parameter Passing Requirements
  contents:
  - "3.2.3.  Security Parameter Passing Requirements\n   A Message Processing Model\
    \ might unpack SNMP-specific security\n   parameters from an incoming message\
    \ before calling a specific\n   Security Model to handle the security-related\
    \ processing of the\n   message.  When using a secure Transport Model, some security\n\
    \   parameters might be extracted from the transport layer by the\n   Transport\
    \ Model before the message is passed to the Message\n   Processing Subsystem.\n\
    \   This document describes a cache mechanism (see Section 5) into which\n   the\
    \ Transport Model puts information about the transport and security\n   parameters\
    \ applied to a transport connection or an incoming message;\n   a Security Model\
    \ might extract that information from the cache.  A\n   tmStateReference is passed\
    \ as an extra parameter in the ASIs between\n   the Transport Subsystem and the\
    \ Message Processing and Security\n   Subsystems in order to identify the relevant\
    \ cache.  This approach of\n   passing a model-independent reference is consistent\
    \ with the\n   securityStateReference cache already being passed around in the\
    \ RFC\n   3411 ASIs.\n"
- title: 3.2.4.  Separation of Authentication and Authorization
  contents:
  - "3.2.4.  Separation of Authentication and Authorization\n   The RFC 3411 architecture\
    \ defines a separation of authentication and\n   the authorization to access and/or\
    \ modify MIB data.  A set of model-\n   independent parameters (securityModel,\
    \ securityName, and\n   securityLevel) are passed between the Security Subsystem,\
    \ the\n   Applications, and the Access Control Subsystem.\n   This separation\
    \ was a deliberate decision of the SNMPv3 WG, in order\n   to allow support for\
    \ authentication protocols that do not provide\n   data-access authorization capabilities,\
    \ and in order to support data-\n   access authorization schemes, such as the\
    \ View-based access Control\n   Model (VACM), that do not perform their own authentication.\n\
    \   A Message Processing Model determines which Security Model is used,\n   either\
    \ based on the message version (e.g., SNMPv1 and SNMPv2c) or\n   possibly by a\
    \ value specified in the message (e.g., msgSecurityModel\n   field in SNMPv3).\n\
    \   The Security Model makes the decision which securityName and\n   securityLevel\
    \ values are passed as model-independent parameters to an\n   Application, which\
    \ then passes them via the isAccessAllowed ASI to\n   the Access Control Subsystem.\n\
    \   An Access Control Model performs the mapping from the model-\n   independent\
    \ security parameters to a policy within the Access Control\n   Model that is\
    \ Access-Control-Model-dependent.\n   A Transport Model does not know which Security\
    \ Model will be used for\n   an incoming message, and so cannot know how the securityName\
    \ and\n   securityLevel parameters will be determined.  It can propose an\n  \
    \ authenticated identity (via the tmSecurityName field), but there is\n   no guarantee\
    \ that this value will be used by the Security Model.  For\n   example, non-transport-aware\
    \ Security Models will typically determine\n   the securityName (and securityLevel)\
    \ based on the contents of the\n   SNMP message itself.  Such Security Models\
    \ will simply not know that\n   the tmStateReference cache exists.\n   Further,\
    \ even if the Transport Model can influence the choice of\n   securityName, it\
    \ cannot directly determine the authorization allowed\n   to this identity.  If\
    \ two different Transport Models each\n   authenticate a transport principal that\
    \ are then both mapped to the\n   same securityName, then these two identities\
    \ will typically be\n   afforded exactly the same authorization by the Access\
    \ Control Model.\n   The only way for the Access Control Model to differentiate\
    \ between\n   identities based on the underlying Transport Model would be for\
    \ such\n   transport-authenticated identities to be mapped to distinct\n   securityNames.\
    \  How and if this is done is Security-Model-dependent.\n"
- title: 3.3.  Session Requirements
  contents:
  - "3.3.  Session Requirements\n   Some secure transports have a notion of sessions,\
    \ while other secure\n   transports provide channels or other session-like mechanisms.\n\
    \   Throughout this document, the term \"session\" is used in a broad sense\n\
    \   to cover transport sessions, transport channels, and other transport-\n  \
    \ layer, session-like mechanisms.  Transport-layer sessions that can\n   secure\
    \ multiple SNMP messages within the lifetime of the session are\n   considered\
    \ desirable because the cost of authentication can be\n   amortized over potentially\
    \ many transactions.  How a transport\n   session is actually established, opened,\
    \ closed, or maintained is\n   specific to a particular Transport Model.\n   To\
    \ reduce redundancy, this document describes aspects that are\n   expected to\
    \ be common to all Transport Model sessions.\n"
- title: 3.3.1.  No SNMP Sessions
  contents:
  - "3.3.1.  No SNMP Sessions\n   The architecture defined in [RFC3411] and the Transport\
    \ Subsystem\n   defined in this document do not support SNMP sessions or include\
    \ a\n   session selector in the Abstract Service Interfaces.\n   The Transport\
    \ Subsystem might support transport sessions.  However,\n   the Transport Subsystem\
    \ does not have access to the pduType (i.e.,\n   the SNMP operation type), and\
    \ so cannot select a given transport\n   session for particular types of traffic.\n\
    \   Certain parameters of the Abstract Service Interfaces might be used\n   to\
    \ guide the selection of an appropriate transport session to use for\n   a given\
    \ request by an Application.\n   The transportDomain and transportAddress identify\
    \ the transport\n   connection to a remote network node.  Elements of the transport\n\
    \   address (such as the port number) might be used by an Application to\n   send\
    \ a particular PDU type to a particular transport address.  For\n   example, the\
    \ SNMP-TARGET-MIB and SNMP-NOTIFICATION-MIB [RFC3413] are\n   used to configure\
    \ notification originators with the destination port\n   to which SNMPv2-Trap\
    \ PDUs or Inform PDUs are to be sent, but the\n   Transport Subsystem never looks\
    \ inside the PDU.\n   The securityName identifies which security principal to\
    \ communicate\n   with at that address (e.g., different Network Management System\
    \ (NMS)\n   applications), and the securityLevel might permit selection of\n \
    \  different sets of security properties for different purposes (e.g.,\n   encrypted\
    \ SET vs. non-encrypted GET operations).\n   However, because the handling of\
    \ transport sessions is specific to\n   each Transport Model, some Transport Models\
    \ MAY restrict selecting a\n   particular transport session.  A user application\
    \ might use a unique\n   combination of transportDomain, transportAddress, securityModel,\n\
    \   securityName, and securityLevel to try to force the selection of a\n   given\
    \ transport session.  This usage is NOT RECOMMENDED because it is\n   not guaranteed\
    \ to be interoperable across implementations and across\n   models.\n   Implementations\
    \ SHOULD be able to maintain some reasonable number of\n   concurrent transport\
    \ sessions, and MAY provide non-standard internal\n   mechanisms to select transport\
    \ sessions.\n"
- title: 3.3.2.  Session Establishment Requirements
  contents:
  - "3.3.2.  Session Establishment Requirements\n   SNMP Applications provide the\
    \ transportDomain, transportAddress,\n   securityName, and securityLevel to be\
    \ used to create a new session.\n   If the Transport Model cannot provide at least\
    \ the requested level of\n   security, the Transport Model should discard the\
    \ message and should\n   notify the Dispatcher that establishing a session and\
    \ sending the\n   message failed.  Similarly, if the session cannot be established,\n\
    \   then the message should be discarded and the Dispatcher notified.\n   Transport\
    \ session establishment might require provisioning\n   authentication credentials\
    \ at an engine, either statically or\n   dynamically.  How this is done is dependent\
    \ on the Transport Model\n   and the implementation.\n"
- title: 3.3.3.  Session Maintenance Requirements
  contents:
  - "3.3.3.  Session Maintenance Requirements\n   A Transport Model can tear down\
    \ sessions as needed.  It might be\n   necessary for some implementations to tear\
    \ down sessions as the\n   result of resource constraints, for example.\n   The\
    \ decision to tear down a session is implementation-dependent.  How\n   an implementation\
    \ determines that an operation has completed is\n   implementation-dependent.\
    \  While it is possible to tear down each\n   transport session after processing\
    \ for each message has completed,\n   this is not recommended for performance\
    \ reasons.\n   The elements of procedure describe when cached information can\
    \ be\n   discarded, and the timing of cache cleanup might have security\n   implications,\
    \ but cache memory management is an implementation issue.\n   If a Transport Model\
    \ defines MIB module objects to maintain session\n   state information, then the\
    \ Transport Model MUST define what happens\n   to the objects when a related session\
    \ is torn down, since this will\n   impact the interoperability of the MIB module.\n"
- title: 3.3.4.  Message Security versus Session Security
  contents:
  - "3.3.4.  Message Security versus Session Security\n   A Transport Model session\
    \ is associated with state information that\n   is maintained for its lifetime.\
    \  This state information allows for\n   the application of various security services\
    \ to multiple messages.\n   Cryptographic keys associated with the transport session\
    \ SHOULD be\n   used to provide authentication, integrity checking, and encryption\n\
    \   services, as needed, for data that is communicated during the\n   session.\
    \  The cryptographic protocols used to establish keys for a\n   Transport Model\
    \ session SHOULD ensure that fresh new session keys are\n   generated for each\
    \ session.  This would ensure that a cross-session\n   replay attack would be\
    \ unsuccessful; that is, an attacker could not\n   take a message observed on\
    \ one session and successfully replay it on\n   another session.\n   A good security\
    \ protocol would also protect against replay attacks\n   within a session; that\
    \ is, an attacker could not take a message\n   observed on a session and successfully\
    \ replay it later in the same\n   session.  One approach would be to use sequence\
    \ information within\n   the protocol, allowing the participants to detect if\
    \ messages were\n   replayed or reordered within a session.\n   If a secure transport\
    \ session is closed between the time a request\n   message is received and the\
    \ corresponding response message is sent,\n   then the response message SHOULD\
    \ be discarded, even if a new session\n   has been established.  The SNMPv3 WG\
    \ decided that this should be a\n   \"SHOULD\" architecturally, and it is a Security-Model-specific\n\
    \   decision whether to REQUIRE this.  The architecture does not mandate\n   this\
    \ requirement in order to allow for future Security Models where\n   this might\
    \ make sense; however, not requiring this could lead to\n   added complexity and\
    \ security vulnerabilities, so most Security\n   Models SHOULD require this.\n\
    \   SNMPv3 was designed to support multiple levels of security,\n   selectable\
    \ on a per-message basis by an SNMP Application, because,\n   for example, there\
    \ is not much value in using encryption for a\n   command generator to poll for\
    \ potentially non-sensitive performance\n   data on thousands of interfaces every\
    \ ten minutes; such encryption\n   might add significant overhead to processing\
    \ of the messages.\n   Some Transport Models might support only specific authentication\
    \ and\n   encryption services, such as requiring all messages to be carried\n\
    \   using both authentication and encryption, regardless of the security\n   level\
    \ requested by an SNMP Application.  A Transport Model MAY\n   upgrade the security\
    \ level requested by a transport-aware Security\n   Model, i.e., noAuthNoPriv\
    \ and authNoPriv might be sent over an\n   authenticated and encrypted session.\
    \  A Transport Model MUST NOT\n   downgrade the security level requested by a\
    \ transport-aware Security\n   Model, and SHOULD discard any message where this\
    \ would occur.  This\n   is a SHOULD rather than a MUST only to permit the potential\n\
    \   development of models that can perform error-handling in a manner\n   that\
    \ is less severe than discarding the message.  However, any model\n   that does\
    \ not discard the message in this circumstance should have a\n   clear justification\
    \ for why not discarding will not create a security\n   vulnerability.\n"
- title: 4.  Scenario Diagrams and the Transport Subsystem
  contents:
  - "4.  Scenario Diagrams and the Transport Subsystem\n   Sections 4.6.1 and 4.6.2\
    \ of RFC 3411 provide scenario diagrams to\n   illustrate how an outgoing message\
    \ is created and how an incoming\n   message is processed.  RFC 3411 does not\
    \ define ASIs for the \"Send\n   SNMP Request Message to Network\", \"Receive\
    \ SNMP Response Message from\n   Network\", \"Receive SNMP Message from Network\"\
    \ and \"Send SNMP message\n   to Network\" arrows in these diagrams.\n   This\
    \ document defines two ASIs corresponding to these arrows: a\n   sendMessage ASI\
    \ to send SNMP messages to the network and a\n   receiveMessage ASI to receive\
    \ SNMP messages from the network.  These\n   ASIs are used for all SNMP messages,\
    \ regardless of pduType.\n"
- title: 5.  Cached Information and References
  contents:
  - "5.  Cached Information and References\n   When performing SNMP processing, there\
    \ are two levels of state\n   information that might need to be retained: the\
    \ immediate state\n   linking a request-response pair and a potentially longer-term\
    \ state\n   relating to transport and security.\n   The RFC 3411 architecture\
    \ uses caches to maintain the short-term\n   message state, and uses references\
    \ in the ASIs to pass this\n   information between subsystems.\n   This document\
    \ defines the requirements for a cache to handle\n   additional short-term message\
    \ state and longer-term transport state\n   information, using a tmStateReference\
    \ parameter to pass this\n   information between subsystems.\n   To simplify the\
    \ elements of procedure, the release of state\n   information is not always explicitly\
    \ specified.  As a general rule,\n   if state information is available when a\
    \ message being processed gets\n   discarded, the state related to that message\
    \ should also be\n   discarded.  If state information is available when a relationship\n\
    \   between engines is severed, such as the closing of a transport\n   session,\
    \ the state information for that relationship should also be\n   discarded.\n\
    \   Since the contents of a cache are meaningful only within an\n   implementation,\
    \ and not on-the-wire, the format of the cache is\n   implementation-specific.\n"
- title: 5.1.  securityStateReference
  contents:
  - "5.1.  securityStateReference\n   The securityStateReference parameter is defined\
    \ in RFC 3411.  Its\n   primary purpose is to provide a mapping between a request\
    \ and the\n   corresponding response.  This cache is not accessible to Transport\n\
    \   Models, and an entry is typically only retained for the lifetime of a\n  \
    \ request-response pair of messages.\n"
- title: 5.2.  tmStateReference
  contents:
  - "5.2.  tmStateReference\n   For each transport session, information about the\
    \ transport security\n   is stored in a tmState cache or datastore that is referenced\
    \ by a\n   tmStateReference.  The tmStateReference parameter is used to pass\n\
    \   model-specific and mechanism-specific parameters between the\n   Transport\
    \ Subsystem and transport-aware Security Models.\n   In general, when necessary,\
    \ the tmState is populated by the Security\n   Model for outgoing messages and\
    \ by the Transport Model for incoming\n   messages.  However, in both cases, the\
    \ model populating the tmState\n   might have incomplete information, and the\
    \ missing information might\n   be populated by the other model when the information\
    \ becomes\n   available.\n   The tmState might contain both long-term and short-term\
    \ information.\n   The session information typically remains valid for the duration\
    \ of\n   the transport session, might be used for several messages, and might\n\
    \   be stored in a local configuration datastore.  Some information has a\n  \
    \ shorter lifespan, such as tmSameSecurity and\n   tmRequestedSecurityLevel, which\
    \ are associated with a specific\n   message.\n   Since this cache is only used\
    \ within an implementation, and not on-\n   the-wire, the precise contents and\
    \ format of the cache are\n   implementation-dependent.  For architectural modularity\
    \ between\n   Transport Models and transport-aware Security Models, a fully-defined\n\
    \   tmState MUST conceptually include at least the following fields:\n      tmTransportDomain\n\
    \      tmTransportAddress\n      tmSecurityName\n      tmRequestedSecurityLevel\n\
    \      tmTransportSecurityLevel\n      tmSameSecurity\n      tmSessionID\n   The\
    \ details of these fields are described in the following\n   subsections.\n"
- title: 5.2.1.  Transport Information
  contents:
  - "5.2.1.  Transport Information\n   Information about the source of an incoming\
    \ SNMP message is passed up\n   from the Transport Subsystem as far as the Message\
    \ Processing\n   Subsystem.  However, these parameters are not included in the\n\
    \   processIncomingMsg ASI defined in RFC 3411; hence, this information\n   is\
    \ not directly available to the Security Model.\n   A transport-aware Security\
    \ Model might wish to take account of the\n   transport protocol and originating\
    \ address when authenticating the\n   request and setting up the authorization\
    \ parameters.  It is therefore\n   necessary for the Transport Model to include\
    \ this information in the\n   tmStateReference cache so that it is accessible\
    \ to the Security\n   Model.\n   o  tmTransportDomain: the transport protocol\
    \ (and hence the Transport\n      Model) used to receive the incoming message.\n\
    \   o  tmTransportAddress: the source of the incoming message.\n   The ASIs used\
    \ for processing an outgoing message all include explicit\n   transportDomain\
    \ and transportAddress parameters.  The values within\n   the securityStateReference\
    \ cache might override these parameters for\n   outgoing messages.\n"
- title: 5.2.2.  securityName
  contents:
  - "5.2.2.  securityName\n   There are actually three distinct \"identities\" that\
    \ can be identified\n   during the processing of an SNMP request over a secure\
    \ transport:\n   o  transport principal: the transport-authenticated identity\
    \ on whose\n      behalf the secure transport connection was (or should be)\n\
    \      established.  This value is transport-, mechanism-, and\n      implementation-specific,\
    \ and is only used within a given Transport\n      Model.\n   o  tmSecurityName:\
    \ a human-readable name (in snmpAdminString format)\n      representing this transport\
    \ identity.  This value is transport-\n      and implementation-specific, and\
    \ is only used (directly) by the\n      Transport and Security Models.\n   o \
    \ securityName: a human-readable name (in snmpAdminString format)\n      representing\
    \ the SNMP principal in a model-independent manner.\n      This value is used\
    \ directly by SNMP Applications, the Access\n      Control Subsystem, the Message\
    \ Processing Subsystem, and the\n      Security Subsystem.\n   The transport principal\
    \ might or might not be the same as the\n   tmSecurityName.  Similarly, the tmSecurityName\
    \ might or might not be\n   the same as the securityName as seen by the Application\
    \ and Access\n   Control Subsystems.  In particular, a non-transport-aware Security\n\
    \   Model will ignore tmSecurityName completely when determining the SNMP\n  \
    \ securityName.\n   However, it is important that the mapping between the transport\n\
    \   principal and the SNMP securityName (for transport-aware Security\n   Models)\
    \ is consistent and predictable in order to allow configuration\n   of suitable\
    \ access control and the establishment of transport\n   connections.\n"
- title: 5.2.3.  securityLevel
  contents:
  - "5.2.3.  securityLevel\n   There are two distinct issues relating to security\
    \ level as applied\n   to secure transports.  For clarity, these are handled by\
    \ separate\n   fields in the tmStateReference cache:\n   o  tmTransportSecurityLevel:\
    \ an indication from the Transport Model\n      of the level of security offered\
    \ by this session.  The Security\n      Model can use this to ensure that incoming\
    \ messages were suitably\n      protected before acting on them.\n   o  tmRequestedSecurityLevel:\
    \ an indication from the Security Model of\n      the level of security required\
    \ to be provided by the transport\n      protocol.  The Transport Model can use\
    \ this to ensure that\n      outgoing messages will not be sent over an insufficiently\
    \ secure\n      session.\n"
- title: 5.2.4.  Session Information
  contents:
  - "5.2.4.  Session Information\n   For security reasons, if a secure transport session\
    \ is closed between\n   the time a request message is received and the corresponding\
    \ response\n   message is sent, then the response message SHOULD be discarded,\
    \ even\n   if a new session has been established.  The SNMPv3 WG decided that\n\
    \   this should be a \"SHOULD\" architecturally, and it is a Security-\n   Model-specific\
    \ decision whether to REQUIRE this.\n   o  tmSameSecurity: this flag is used by\
    \ a transport-aware Security\n      Model to indicate whether the Transport Model\
    \ MUST enforce this\n      restriction.\n   o  tmSessionID: in order to verify\
    \ whether the session has changed,\n      the Transport Model must be able to\
    \ compare the session used to\n      receive the original request with the one\
    \ to be used to send the\n      response.  This typically needs some form of session\
    \ identifier.\n      This value is only ever used by the Transport Model, so the\
    \ format\n      and interpretation of this field are model-specific and\n    \
    \  implementation-dependent.\n   When processing an outgoing message, if tmSameSecurity\
    \ is true, then\n   the tmSessionID MUST match the current transport session;\
    \ otherwise,\n   the message MUST be discarded and the Dispatcher notified that\n\
    \   sending the message failed.\n"
- title: 6.  Abstract Service Interfaces
  contents:
  - "6.  Abstract Service Interfaces\n   Abstract service interfaces have been defined\
    \ by RFC 3411 to describe\n   the conceptual data flows between the various subsystems\
    \ within an\n   SNMP entity and to help keep the subsystems independent of each\
    \ other\n   except for the common parameters.\n   This document introduces a couple\
    \ of new ASIs to define the interface\n   between the Transport and Dispatcher\
    \ Subsystems; it also extends some\n   of the ASIs defined in RFC 3411 to include\
    \ transport-related\n   information.\n   This document follows the example of\
    \ RFC 3411 regarding the release\n   of state information and regarding error\
    \ indications.\n   1) The release of state information is not always explicitly\n\
    \   specified in a Transport Model.  As a general rule, if state\n   information\
    \ is available when a message gets discarded, the message-\n   state information\
    \ should also be released, and if state information\n   is available when a session\
    \ is closed, the session-state information\n   should also be released.  Keeping\
    \ sensitive security information\n   longer than necessary might introduce potential\
    \ vulnerabilities to an\n   implementation.\n   2)An error indication in statusInformation\
    \ will typically include the\n   Object Identifier (OID) and value for an incremented\
    \ error counter.\n   This might be accompanied by values for contextEngineID and\n\
    \   contextName for this counter, a value for securityLevel, and the\n   appropriate\
    \ state reference if the information is available at the\n   point where the error\
    \ is detected.\n"
- title: 6.1.  sendMessage ASI
  contents:
  - "6.1.  sendMessage ASI\n   The sendMessage ASI is used to pass a message from\
    \ the Dispatcher to\n   the appropriate Transport Model for sending.  The sendMessageASI\n\
    \   defined in this document replaces the text \"Send SNMP Request Message\n \
    \  to Network\" that appears in the diagram in Section 4.6.1 of RFC 3411\n   and\
    \ the text \"Send SNMP Message to Network\" that appears in Section\n   4.6.2\
    \ of RFC 3411.\n   If present and valid, the tmStateReference refers to a cache\n\
    \   containing Transport-Model-specific parameters for the transport and\n   transport\
    \ security.  How a tmStateReference is determined to be\n   present and valid\
    \ is implementation-dependent.  How the information\n   in the cache is used is\
    \ Transport-Model-dependent and implementation-\n   dependent.\n   This might\
    \ sound underspecified, but a Transport Model might be\n   something like SNMP\
    \ over UDP over IPv6, where no security is\n   provided, so it might have no mechanisms\
    \ for utilizing a\n   tmStateReference cache.\n   statusInformation =\n   sendMessage(\n\
    \   IN   destTransportDomain           -- transport domain to be used\n   IN \
    \  destTransportAddress          -- transport address to be used\n   IN   outgoingMessage\
    \               -- the message to send\n   IN   outgoingMessageLength        \
    \ -- its length\n   IN   tmStateReference              -- reference to transport\
    \ state\n    )\n"
- title: 6.2.  Changes to RFC 3411 Outgoing ASIs
  contents:
  - "6.2.  Changes to RFC 3411 Outgoing ASIs\n   Additional parameters have been added\
    \ to the ASIs defined in RFC 3411\n   that are concerned with communication between\
    \ the Dispatcher and\n   Message Processing Subsystems, and between the Message\
    \ Processing and\n   Security Subsystems.\n"
- title: 6.2.1.  Message Processing Subsystem Primitives
  contents:
  - "6.2.1.  Message Processing Subsystem Primitives\n   A tmStateReference parameter\
    \ has been added as an OUT parameter to\n   the prepareOutgoingMessage and prepareResponseMessage\
    \ ASIs.  This is\n   passed from the Message Processing Subsystem to the Dispatcher,\
    \ and\n   from there to the Transport Subsystem.\n   How or if the Message Processing\
    \ Subsystem modifies or utilizes the\n   contents of the cache is Message-Processing-Model\
    \ specific.\n   statusInformation =          -- success or errorIndication\n \
    \  prepareOutgoingMessage(\n   IN  transportDomain          -- transport domain\
    \ to be used\n   IN  transportAddress         -- transport address to be used\n\
    \   IN  messageProcessingModel   -- typically, SNMP version\n   IN  securityModel\
    \            -- Security Model to use\n   IN  securityName             -- on behalf\
    \ of this principal\n   IN  securityLevel            -- Level of Security requested\n\
    \   IN  contextEngineID          -- data from/at this entity\n   IN  contextName\
    \              -- data from/in this context\n   IN  pduVersion               --\
    \ the version of the PDU\n   IN  PDU                      -- SNMP Protocol Data\
    \ Unit\n   IN  expectResponse           -- TRUE or FALSE\n   IN  sendPduHandle\
    \            -- the handle for matching\n                                   incoming\
    \ responses\n   OUT  destTransportDomain     -- destination transport domain\n\
    \   OUT  destTransportAddress    -- destination transport address\n   OUT  outgoingMessage\
    \         -- the message to send\n   OUT  outgoingMessageLength   -- its length\n\
    \   OUT  tmStateReference        -- (NEW) reference to transport state\n     \
    \          )\n   statusInformation =          -- success or errorIndication\n\
    \   prepareResponseMessage(\n   IN  messageProcessingModel   -- typically, SNMP\
    \ version\n   IN  securityModel            -- Security Model to use\n   IN  securityName\
    \             -- on behalf of this principal\n   IN  securityLevel           \
    \ -- Level of Security requested\n   IN  contextEngineID          -- data from/at\
    \ this entity\n   IN  contextName              -- data from/in this context\n\
    \   IN  pduVersion               -- the version of the PDU\n   IN  PDU       \
    \               -- SNMP Protocol Data Unit\n   IN  maxSizeResponseScopedPDU --\
    \ maximum size able to accept\n   IN  stateReference           -- reference to\
    \ state information\n                                -- as presented with the\
    \ request\n   IN  statusInformation        -- success or errorIndication\n   \
    \                             -- error counter OID/value if error\n   OUT destTransportDomain\
    \      -- destination transport domain\n   OUT destTransportAddress     -- destination\
    \ transport address\n   OUT outgoingMessage          -- the message to send\n\
    \   OUT outgoingMessageLength    -- its length\n   OUT tmStateReference      \
    \   -- (NEW) reference to transport state\n               )\n"
- title: 6.2.2.  Security Subsystem Primitives
  contents:
  - "6.2.2.  Security Subsystem Primitives\n   transportDomain and transportAddress\
    \ parameters have been added as IN\n   parameters to the generateRequestMsg and\
    \ generateResponseMsg ASIs,\n   and a tmStateReference parameter has been added\
    \ as an OUT parameter.\n   The transportDomain and transportAddress parameters\
    \ will have been\n   passed into the Message Processing Subsystem from the Dispatcher\
    \ and\n   are passed on to the Security Subsystem.  The tmStateReference\n   parameter\
    \ will be passed from the Security Subsystem back to the\n   Message Processing\
    \ Subsystem, and on to the Dispatcher and Transport\n   Subsystems.\n   If a cache\
    \ exists for a session identifiable from the\n   tmTransportDomain, tmTransportAddress,\
    \ tmSecurityName, and requested\n   securityLevel, then a transport-aware Security\
    \ Model might create a\n   tmStateReference parameter to this cache and pass that\
    \ as an OUT\n   parameter.\n   statusInformation =\n   generateRequestMsg(\n \
    \    IN   transportDomain         -- (NEW) destination transport domain\n    \
    \ IN   transportAddress        -- (NEW) destination transport address\n     IN\
    \   messageProcessingModel  -- typically, SNMP version\n     IN   globalData \
    \             -- message header, admin data\n     IN   maxMessageSize        \
    \  -- of the sending SNMP entity\n     IN   securityModel           -- for the\
    \ outgoing message\n     IN   securityEngineID        -- authoritative SNMP entity\n\
    \     IN   securityName            -- on behalf of this principal\n     IN   securityLevel\
    \           -- Level of Security requested\n     IN   scopedPDU              \
    \ -- message (plaintext) payload\n     OUT  securityParameters      -- filled\
    \ in by Security Module\n     OUT  wholeMsg                -- complete generated\
    \ message\n     OUT  wholeMsgLength          -- length of generated message\n\
    \     OUT  tmStateReference        -- (NEW) reference to transport state\n   \
    \           )\n   statusInformation =\n   generateResponseMsg(\n     IN   transportDomain\
    \         -- (NEW) destination transport domain\n     IN   transportAddress  \
    \      -- (NEW) destination transport address\n     IN   messageProcessingModel\
    \ -- Message Processing Model\n     IN   globalData             -- msgGlobalData\n\
    \     IN   maxMessageSize         -- from msgMaxSize\n     IN   securityModel\
    \          -- as determined by MPM\n     IN   securityEngineID       -- the value\
    \ of snmpEngineID\n     IN   securityName           -- on behalf of this principal\n\
    \     IN   securityLevel          -- for the outgoing message\n     IN   scopedPDU\
    \              -- as provided by MPM\n     IN   securityStateReference -- as provided\
    \ by MPM\n     OUT  securityParameters     -- filled in by Security Module\n \
    \    OUT  wholeMsg               -- complete generated message\n     OUT  wholeMsgLength\
    \         -- length of generated message\n     OUT  tmStateReference       --\
    \ (NEW) reference to transport state\n              )\n"
- title: 6.3.  The receiveMessage ASI
  contents:
  - "6.3.  The receiveMessage ASI\n   The receiveMessage ASI is used to pass a message\
    \ from the Transport\n   Subsystem to the Dispatcher.  The receiveMessage ASI\
    \ replaces the\n   text \"Receive SNMP Response Message from Network\" that appears\
    \ in the\n   diagram in Section 4.6.1 of RFC 3411 and the text \"Receive SNMP\n\
    \   Message from Network\" from Section 4.6.2 of RFC3411.\n   When a message is\
    \ received on a given transport session, if a cache\n   does not already exist\
    \ for that session, the Transport Model might\n   create one, referenced by tmStateReference.\
    \  The contents of this\n   cache are discussed in Section 5.  How this information\
    \ is determined\n   is implementation- and Transport-Model-specific.\n   \"Might\
    \ create one\" might sound underspecified, but a Transport Model\n   might be\
    \ something like SNMP over UDP over IPv6, where transport\n   security is not\
    \ provided, so it might not create a cache.\n   The Transport Model does not know\
    \ the securityModel for an incoming\n   message; this will be determined by the\
    \ Message Processing Model in a\n   Message-Processing-Model-dependent manner.\n\
    \   statusInformation =\n   receiveMessage(\n   IN   transportDomain         \
    \      -- origin transport domain\n   IN   transportAddress              -- origin\
    \ transport address\n   IN   incomingMessage               -- the message received\n\
    \   IN   incomingMessageLength         -- its length\n   IN   tmStateReference\
    \              -- reference to transport state\n    )\n"
- title: 6.4.  Changes to RFC 3411 Incoming ASIs
  contents:
  - "6.4.  Changes to RFC 3411 Incoming ASIs\n   The tmStateReference parameter has\
    \ also been added to some of the\n   incoming ASIs defined in RFC 3411.  How or\
    \ if a Message Processing\n   Model or Security Model uses tmStateReference is\
    \ message-processing-\n   and Security-Model-specific.\n   This might sound underspecified,\
    \ but a Message Processing Model might\n   have access to all the information\
    \ from the cache and from the\n   message.  The Message Processing Model might\
    \ determine that the USM\n   Security Model is specified in an SNMPv3 message\
    \ header; the USM\n   Security Model has no need of values in the tmStateReference\
    \ cache to\n   authenticate and secure the SNMP message, but an Application might\n\
    \   have specified to use a secure transport such as that provided by the\n  \
    \ SSH Transport Model to send the message to its destination.\n"
- title: 6.4.1.  Message Processing Subsystem Primitive
  contents:
  - "6.4.1.  Message Processing Subsystem Primitive\n   The tmStateReference parameter\
    \ of prepareDataElements is passed from\n   the Dispatcher to the Message Processing\
    \ Subsystem.  How or if the\n   Message Processing Subsystem modifies or utilizes\
    \ the contents of the\n   cache is Message-Processing-Model-specific.\n   result\
    \ =                       -- SUCCESS or errorIndication\n   prepareDataElements(\n\
    \   IN   transportDomain           -- origin transport domain\n   IN   transportAddress\
    \          -- origin transport address\n   IN   wholeMsg                  -- as\
    \ received from the network\n   IN   wholeMsgLength            -- as received\
    \ from the network\n   IN   tmStateReference          -- (NEW) from the Transport\
    \ Model\n   OUT  messageProcessingModel    -- typically, SNMP version\n   OUT\
    \  securityModel             -- Security Model to use\n   OUT  securityName  \
    \            -- on behalf of this principal\n   OUT  securityLevel           \
    \  -- Level of Security requested\n   OUT  contextEngineID           -- data from/at\
    \ this entity\n   OUT  contextName               -- data from/in this context\n\
    \   OUT  pduVersion                -- the version of the PDU\n   OUT  PDU    \
    \                   -- SNMP Protocol Data Unit\n   OUT  pduType              \
    \     -- SNMP PDU type\n   OUT  sendPduHandle             -- handle for matched\
    \ request\n   OUT  maxSizeResponseScopedPDU  -- maximum size sender can accept\n\
    \   OUT  statusInformation         -- success or errorIndication\n           \
    \                       -- error counter OID/value if error\n   OUT  stateReference\
    \            -- reference to state information\n                             \
    \     -- to be used for possible Response\n   )\n"
- title: 6.4.2.  Security Subsystem Primitive
  contents:
  - "6.4.2.  Security Subsystem Primitive\n   The processIncomingMessage ASI passes\
    \ tmStateReference from the\n   Message Processing Subsystem to the Security Subsystem.\n\
    \   If tmStateReference is present and valid, an appropriate Security\n   Model\
    \ might utilize the information in the cache.  How or if the\n   Security Subsystem\
    \ utilizes the information in the cache is Security-\n   Model-specific.\n   statusInformation\
    \ =  -- errorIndication or success\n                            -- error counter\
    \ OID/value if error\n   processIncomingMsg(\n   IN   messageProcessingModel \
    \   -- typically, SNMP version\n   IN   maxMessageSize            -- of the sending\
    \ SNMP entity\n   IN   securityParameters        -- for the received message\n\
    \   IN   securityModel             -- for the received message\n   IN   securityLevel\
    \             -- Level of Security\n   IN   wholeMsg                  -- as received\
    \ on the wire\n   IN   wholeMsgLength            -- length as received on the\
    \ wire\n   IN   tmStateReference          -- (NEW) from the Transport Model\n\
    \   OUT  securityEngineID          -- authoritative SNMP entity\n   OUT  securityName\
    \              -- identification of the principal\n   OUT  scopedPDU,        \
    \        -- message (plaintext) payload\n   OUT  maxSizeResponseScopedPDU  --\
    \ maximum size sender can handle\n   OUT  securityStateReference    -- reference\
    \ to security state\n                                  -- information, needed\
    \ for response\n   )\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document defines an architectural approach\
    \ that permits SNMP to\n   utilize transport-layer security services.  Each proposed\
    \ Transport\n   Model should discuss the security considerations of that Transport\n\
    \   Model.\n   It is considered desirable by some industry segments that SNMP\n\
    \   Transport Models utilize transport-layer security that addresses\n   perfect\
    \ forward secrecy at least for encryption keys.  Perfect\n   forward secrecy guarantees\
    \ that compromise of long-term secret keys\n   does not result in disclosure of\
    \ past session keys.  Each proposed\n   Transport Model should include a discussion\
    \ in its security\n   considerations of whether perfect forward secrecy is appropriate\
    \ for\n   that Transport Model.\n   The denial-of-service characteristics of various\
    \ Transport Models and\n   security protocols will vary and should be evaluated\
    \ when determining\n   the applicability of a Transport Model to a particular\
    \ deployment\n   situation.\n   Since the cache will contain security-related\
    \ parameters,\n   implementers SHOULD store this information (in memory or in\n\
    \   persistent storage) in a manner to protect it from unauthorized\n   disclosure\
    \ and/or modification.\n   Care must be taken to ensure that an SNMP engine is\
    \ sending packets\n   out over a transport using credentials that are legal for\
    \ that engine\n   to use on behalf of that user.  Otherwise, an engine that has\n\
    \   multiple transports open might be \"tricked\" into sending a message\n   through\
    \ the wrong transport.\n   A Security Model might have multiple sources from which\
    \ to define the\n   securityName and securityLevel.  The use of a secure Transport\
    \ Model\n   does not imply that the securityName and securityLevel chosen by the\n\
    \   Security Model represent the transport-authenticated identity or the\n   transport-provided\
    \ security services.  The securityModel,\n   securityName, and securityLevel parameters\
    \ are a related set, and an\n   administrator should understand how the specified\
    \ securityModel\n   selects the corresponding securityName and securityLevel.\n"
- title: 7.1.  Coexistence, Security Parameters, and Access Control
  contents:
  - "7.1.  Coexistence, Security Parameters, and Access Control\n   In the RFC 3411\
    \ architecture, the Message Processing Model makes the\n   decision about which\
    \ Security Model to use.  The architectural change\n   described by this document\
    \ does not alter that.\n   The architecture change described by this document\
    \ does, however,\n   allow SNMP to support two different approaches to security\
    \ --\n   message-driven security and transport-driven security.  With message-\n\
    \   driven security, SNMP provides its own security and passes security\n   parameters\
    \ within the SNMP message; with transport-driven security,\n   SNMP depends on\
    \ an external entity to provide security during\n   transport by \"wrapping\"\
    \ the SNMP message.\n   Using a non-transport-aware Security Model with a secure\
    \ Transport\n   Model is NOT RECOMMENDED for the following reasons.\n   Security\
    \ Models defined before the Transport Security Model (i.e.,\n   SNMPv1, SNMPv2c,\
    \ and USM) do not support transport-based security and\n   only have access to\
    \ the security parameters contained within the SNMP\n   message.  They do not\
    \ know about the security parameters associated\n   with a secure transport. \
    \ As a result, the Access Control Subsystem\n   bases its decisions on the security\
    \ parameters extracted from the\n   SNMP message, not on transport-based security\
    \ parameters.\n   Implications of combining older Security Models with Secure\
    \ Transport\n   Models are known.  The securityName used for access control decisions\n\
    \   is based on the message-driven identity, which might be\n   unauthenticated,\
    \ and not on the transport-driven, authenticated\n   identity:\n   o  An SNMPv1\
    \ message will always be paired with an SNMPv1 Security\n      Model (per RFC\
    \ 3584), regardless of the transport mapping or\n      Transport Model used, and\
    \ access controls will be based on the\n      unauthenticated community name.\n\
    \   o  An SNMPv2c message will always be paired with an SNMPv2c Security\n   \
    \   Model (per RFC 3584), regardless of the transport mapping or\n      Transport\
    \ Model used, and access controls will be based on the\n      unauthenticated\
    \ community name.\n   o  An SNMPv3 message will always be paired with the securityModel\n\
    \      specified in the msgSecurityParameters field of the message (per\n    \
    \  RFC 3412), regardless of the transport mapping or Transport Model\n      used.\
    \  If the SNMPv3 message specifies the User-based Security\n      Model (USM)\
    \ with noAuthNoPriv, then the access controls will be\n      based on the unauthenticated\
    \ USM user.\n   o  For outgoing messages, if a Secure Transport Model is selected\
    \ in\n      combination with a Security Model that does not populate a\n     \
    \ tmStateReference, the Secure Transport Model SHOULD detect the\n      lack of\
    \ a valid tmStateReference and fail.\n   In times of network stress, a Secure\
    \ Transport Model might not work\n   properly if its underlying security mechanisms\
    \ (e.g., Network Time\n   Protocol (NTP) or Authentication, Authorization, and\
    \ Accounting (AAA)\n   protocols or certificate authorities) are not reachable.\
    \  The User-\n   based Security Model was explicitly designed to not depend upon\n\
    \   external network services, and provides its own security services.\n   It\
    \ is RECOMMENDED that operators provision authPriv USM as a fallback\n   mechanism\
    \ to supplement any Security Model or Transport Model that\n   has external dependencies,\
    \ so that secure SNMP communications can\n   continue when the external network\
    \ service is not available.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   IANA has created a new registry in the Simple Network\
    \ Management\n   Protocol (SNMP) Number Spaces.  The new registry is called \"\
    SNMP\n   Transport Domains\".  This registry contains US-ASCII alpha-numeric\n\
    \   strings of one to four characters to identify prefixes for\n   corresponding\
    \ SNMP transport domains.  Each transport domain MUST\n   have an OID assignment\
    \ under snmpDomains [RFC2578].  Values are to be\n   assigned via [RFC5226] \"\
    Specification Required\".\n   The registry has been populated with the following\
    \ initial entries:\n   Registry Name: SNMP Transport Domains\n   Reference: [RFC2578]\
    \ [RFC3417] [RFC5590]\n   Registration Procedures: Specification Required\n  \
    \ Each domain is assigned a MIB-defined OID under snmpDomains\n   Prefix     \
    \   snmpDomains                    Reference\n   -------       -----------------------------\
    \  ---------\n   udp           snmpUDPDomain                  [RFC3417] [RFC5590]\n\
    \   clns          snmpCLNSDomain                 [RFC3417] [RFC5590]\n   cons\
    \          snmpCONSDomain                 [RFC3417] [RFC5590]\n   ddp        \
    \   snmpDDPDomain                  [RFC3417] [RFC5590]\n   ipx           snmpIPXDomain\
    \                  [RFC3417] [RFC5590]\n   prxy          rfc1157Domain       \
    \           [RFC3417] [RFC5590]\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   The Integrated Security for SNMP WG would like to thank\
    \ the following\n   people for their contributions to the process.\n   The authors\
    \ of submitted Security Model proposals: Chris Elliot, Wes\n   Hardaker, David\
    \ Harrington, Keith McCloghrie, Kaushik Narayan, David\n   Perkins, Joseph Salowey,\
    \ and Juergen Schoenwaelder.\n   The members of the Protocol Evaluation Team:\
    \ Uri Blumenthal,\n   Lakshminath Dondeti, Randy Presuhn, and Eric Rescorla.\n\
    \   WG members who performed detailed reviews: Wes Hardaker, Jeffrey\n   Hutzelman,\
    \ Tom Petch, Dave Shield, and Bert Wijnen.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2578]  McCloghrie, K., Ed., Perkins, D., Ed., and J.\n       \
    \       Schoenwaelder, Ed., \"Structure of Management Information\n          \
    \    Version 2 (SMIv2)\", STD 58, RFC 2578, April 1999.\n   [RFC3411]  Harrington,\
    \ D., Presuhn, R., and B. Wijnen, \"An\n              Architecture for Describing\
    \ Simple Network Management\n              Protocol (SNMP) Management Frameworks\"\
    , STD 62, RFC 3411,\n              December 2002.\n   [RFC3412]  Case, J., Harrington,\
    \ D., Presuhn, R., and B. Wijnen,\n              \"Message Processing and Dispatching\
    \ for the Simple Network\n              Management Protocol (SNMP)\", STD 62,\
    \ RFC 3412,\n              December 2002.\n   [RFC3413]  Levi, D., Meyer, P.,\
    \ and B. Stewart, \"Simple Network\n              Management Protocol (SNMP) Applications\"\
    , STD 62,\n              RFC 3413, December 2002.\n   [RFC3414]  Blumenthal, U.\
    \ and B. Wijnen, \"User-based Security Model\n              (USM) for version\
    \ 3 of the Simple Network Management\n              Protocol (SNMPv3)\", STD 62,\
    \ RFC 3414, December 2002.\n   [RFC3417]  Presuhn, R., \"Transport Mappings for\
    \ the Simple Network\n              Management Protocol (SNMP)\", STD 62, RFC\
    \ 3417,\n              December 2002.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RFC2865]  Rigney, C., Willens, S., Rubens,\
    \ A., and W. Simpson,\n              \"Remote Authentication Dial In User Service\
    \ (RADIUS)\",\n              RFC 2865, June 2000.\n   [RFC3410]  Case, J., Mundy,\
    \ R., Partain, D., and B. Stewart,\n              \"Introduction and Applicability\
    \ Statements for Internet-\n              Standard Management Framework\", RFC\
    \ 3410, December 2002.\n   [RFC3584]  Frye, R., Levi, D., Routhier, S., and B.\
    \ Wijnen,\n              \"Coexistence between Version 1, Version 2, and Version\
    \ 3\n              of the Internet-standard Network Management Framework\",\n\
    \              BCP 74, RFC 3584, August 2003.\n   [RFC4251]  Ylonen, T. and C.\
    \ Lonvick, \"The Secure Shell (SSH)\n              Protocol Architecture\", RFC\
    \ 4251, January 2006.\n   [RFC4422]  Melnikov, A. and K. Zeilenga, \"Simple Authentication\
    \ and\n              Security Layer (SASL)\", RFC 4422, June 2006.\n   [RFC4741]\
    \  Enns, R., \"NETCONF Configuration Protocol\", RFC 4741,\n              December\
    \ 2006.\n   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing\
    \ an\n              IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n\
    \              May 2008.\n   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport\
    \ Layer Security\n              (TLS) Protocol Version 1.2\", RFC 5246, August\
    \ 2008.\n   [RFC5424]  Gerhards, R., \"The Syslog Protocol\", RFC 5424, March\
    \ 2009.\n   [RFC5591]  Harrington, D. and W. Hardaker, \"Transport Security Model\n\
    \              for the Simple Network Management Protocol (SNMP)\",\n        \
    \      RFC 5591, June 2009.\n   [RFC5592]  Harrington, D., Salowey, J., and W.\
    \ Hardaker, \"Secure\n              Shell Transport Model for the Simple Network\
    \ Management\n              Protocol (SNMP)\", RFC 5592, June 2009.\n"
- title: Appendix A.  Why tmStateReference?
  contents:
  - "Appendix A.  Why tmStateReference?\n   This appendix considers why a cache-based\
    \ approach was selected for\n   passing parameters.\n   There are four approaches\
    \ that could be used for passing information\n   between the Transport Model and\
    \ a Security Model.\n   1.  One could define an ASI to supplement the existing\
    \ ASIs.\n   2.  One could add a header to encapsulate the SNMP message.\n   3.\
    \  One could utilize fields already defined in the existing SNMPv3\n       message.\n\
    \   4.  One could pass the information in an implementation-specific\n       cache\
    \ or via a MIB module.\n"
- title: A.1.  Define an Abstract Service Interface
  contents:
  - "A.1.  Define an Abstract Service Interface\n   Abstract Service Interfaces (ASIs)\
    \ are defined by a set of primitives\n   that specify the services provided and\
    \ the abstract data elements\n   that are to be passed when the services are invoked.\
    \  Defining\n   additional ASIs to pass the security and transport information\
    \ from\n   the Transport Subsystem to the Security Subsystem has the advantage\n\
    \   of being consistent with existing RFC 3411/3412 practice; it also\n   helps\
    \ to ensure that any Transport Model proposals pass the necessary\n   data and\
    \ do not cause side effects by creating model-specific\n   dependencies between\
    \ itself and models or subsystems other than those\n   that are clearly defined\
    \ by an ASI.\n"
- title: A.2.  Using an Encapsulating Header
  contents:
  - "A.2.  Using an Encapsulating Header\n   A header could encapsulate the SNMP message\
    \ to pass necessary\n   information from the Transport Model to the Dispatcher\
    \ and then to a\n   Message Processing Model.  The message header would be included\
    \ in\n   the wholeMessage ASI parameter and would be removed by a\n   corresponding\
    \ Message Processing Model.  This would imply the (one\n   and only) Message Dispatcher\
    \ would need to be modified to determine\n   which SNMP message version was involved,\
    \ and a new Message Processing\n   Model would need to be developed that knew\
    \ how to extract the header\n   from the message and pass it to the Security Model.\n"
- title: A.3.  Modifying Existing Fields in an SNMP Message
  contents:
  - "A.3.  Modifying Existing Fields in an SNMP Message\n   [RFC3412] defines the\
    \ SNMPv3 message, which contains fields to pass\n   security-related parameters.\
    \  The Transport Subsystem could use these\n   fields in an SNMPv3 message (or\
    \ comparable fields in other message\n   formats) to pass information between\
    \ Transport Models in different\n   SNMP engines and to pass information between\
    \ a Transport Model and a\n   corresponding Message Processing Model.\n   If the\
    \ fields in an incoming SNMPv3 message are changed by the\n   Transport Model\
    \ before passing it to the Security Model, then the\n   Transport Model will need\
    \ to decode the ASN.1 message, modify the\n   fields, and re-encode the message\
    \ in ASN.1 before passing the message\n   on to the Message Dispatcher or to the\
    \ transport layer.  This would\n   require an intimate knowledge of the message\
    \ format and message\n   versions in order for the Transport Model to know which\
    \ fields could\n   be modified.  This would seriously violate the modularity of\
    \ the\n   architecture.\n"
- title: A.4.  Using a Cache
  contents:
  - "A.4.  Using a Cache\n   This document describes a cache into which the Transport\
    \ Model (TM)\n   puts information about the security applied to an incoming message;\
    \ a\n   Security Model can extract that information from the cache.  Given\n \
    \  that there might be multiple TM security caches, a tmStateReference\n   is\
    \ passed as an extra parameter in the ASIs between the Transport\n   Subsystem\
    \ and the Security Subsystem so that the Security Model knows\n   which cache\
    \ of information to consult.\n   This approach does create dependencies between\
    \ a specific Transport\n   Model and a corresponding specific Security Model.\
    \  However, the\n   approach of passing a model-independent reference to a model-\n\
    \   dependent cache is consistent with the securityStateReference already\n  \
    \ being passed around in the RFC 3411 ASIs.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   David Harrington\n   Huawei Technologies (USA)\n   1700\
    \ Alma Dr. Suite 100\n   Plano, TX 75075\n   USA\n   Phone: +1 603 436 8634\n\
    \   EMail: ietfdbh@comcast.net\n   Juergen Schoenwaelder\n   Jacobs University\
    \ Bremen\n   Campus Ring 1\n   28725 Bremen\n   Germany\n   Phone: +49 421 200-3587\n\
    \   EMail: j.schoenwaelder@jacobs-university.de\n"
