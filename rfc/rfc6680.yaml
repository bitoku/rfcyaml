- title: __initial_text__
  contents:
  - "  Generic Security Service Application Programming Interface (GSS-API)\n    \
    \                       Naming Extensions\n"
- title: Abstract
  contents:
  - "Abstract\n   The Generic Security Service Application Programming Interface\n\
    \   (GSS-API) provides a simple naming architecture that supports name-\n   based\
    \ authorization.  This document introduces new APIs that extend\n   the GSS-API\
    \ naming model to support name attribute transfer between\n   GSS-API peers.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6680.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Conventions Used in This Document  . . . . . . . . .\
    \ . . . . .  3\n   3.  Name Attribute Authenticity  . . . . . . . . . . . . .\
    \ . . . .  4\n   4.  Name Attributes/Values as ACL Subjects . . . . . . . . .\
    \ . . .  4\n   5.  Naming Contexts  . . . . . . . . . . . . . . . . . . . . .\
    \ . .  4\n   6.  Representation of Attribute Names  . . . . . . . . . . . . .\
    \ .  6\n   7.  API  . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  7\n     7.1.  SET OF OCTET STRING  . . . . . . . . . . . . . . . . . . .  7\n\
    \     7.2.  Const Types  . . . . . . . . . . . . . . . . . . . . . . .  8\n  \
    \   7.3.  GSS_Display_name_ext() . . . . . . . . . . . . . . . . . .  8\n    \
    \   7.3.1.  C-Bindings . . . . . . . . . . . . . . . . . . . . . .  9\n     7.4.\
    \  GSS_Inquire_name() . . . . . . . . . . . . . . . . . . . .  9\n       7.4.1.\
    \  C-Bindings . . . . . . . . . . . . . . . . . . . . . . 10\n     7.5.  GSS_Get_name_attribute()\
    \ . . . . . . . . . . . . . . . . . 10\n       7.5.1.  C-Bindings . . . . . .\
    \ . . . . . . . . . . . . . . . . 11\n     7.6.  GSS_Set_name_attribute() . .\
    \ . . . . . . . . . . . . . . . 12\n       7.6.1.  C-Bindings . . . . . . . .\
    \ . . . . . . . . . . . . . . 13\n     7.7.  GSS_Delete_name_attribute()  . .\
    \ . . . . . . . . . . . . . 14\n       7.7.1.  C-Bindings . . . . . . . . . .\
    \ . . . . . . . . . . . . 14\n     7.8.  GSS_Export_name_composite()  . . . .\
    \ . . . . . . . . . . . 14\n       7.8.1.  C-Bindings . . . . . . . . . . . .\
    \ . . . . . . . . . . 15\n   8.  IANA Considerations  . . . . . . . . . . . .\
    \ . . . . . . . . . 15\n   9.  Security Considerations  . . . . . . . . . . .\
    \ . . . . . . . . 16\n   10. References . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . 17\n     10.1. Normative References . . . . . . . . . . . . .\
    \ . . . . . . 17\n     10.2. Informative References . . . . . . . . . . . . .\
    \ . . . . . 17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   As described in [RFC4768], the GSS-API's naming architecture\
    \ suffers\n   from certain limitations.  This document attempts to overcome these\n\
    \   limitations.\n   A number of extensions to the GSS-API [RFC2743] and its C-bindings\n\
    \   [RFC2744] are described herein.  The goal is to make information\n   modeled\
    \ as \"name attributes\" available to applications.  Such\n   information MAY,\
    \ for instance, be used by applications to make\n   authorization decisions. \
    \ For example, Kerberos V authorization data\n   elements, both in their raw forms\
    \ as well as mapped to more useful\n   value types, can be made available to GSS-API\
    \ applications through\n   these interfaces.\n   The model is that GSS names have\
    \ attributes.  The attributes of a\n   name may be authenticated (e.g., an X509\
    \ attribute certificate or\n   signed Security Assertion Markup Language (SAML)\
    \ attribute assertion)\n   or may have been set on a GSS name for the purpose\
    \ of locally\n   \"asserting\" the attribute during credential acquisition or\
    \ security\n   context exchange.  Name attributes' values are network\n   representations\
    \ thereof (e.g., the actual value octets of the\n   contents of an X.509 certificate\
    \ extension, for example) and are\n   intended to be useful for constructing portable\
    \ access control\n   facilities.  Applications may often require language- or\
    \ platform-\n   specific data types, rather than network representations of name\n\
    \   attributes, so a function is provided to obtain objects of such types\n  \
    \ associated with names and name attributes.\n   Future updates of this specification\
    \ may involve adding an attribute\n   namespace for attributes that only have\
    \ application-specific\n   semantics.  Note that mechanisms will still need to\
    \ know how to\n   transport such attributes.  The IETF may also wish to add functions\n\
    \   by which to inquire whether a mechanism(s) understands a given\n   attribute\
    \ name or namespace and to list which attributes or attribute\n   namespaces a\
    \ mechanism understands.  Finally, the IETF may want to\n   consider adding a\
    \ function by which to determine the name of the\n   issuer of a name attribute.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Name Attribute Authenticity
  contents:
  - "3.  Name Attribute Authenticity\n   An attribute is \"authenticated\" if and\
    \ only if there is a secure\n   association between the attribute (and its values)\
    \ and the trusted\n   source of the peer credential.  Examples of authenticated\
    \ attributes\n   are (any part of) the signed portion of an X.509 certificate\
    \ or\n   AD-KDCIssued authorization data elements (Section 5.2.6.2 of\n   [RFC4120])\
    \ in Kerberos V Tickets, provided, of course, that the\n   authenticity of the\
    \ respective security associations (e.g.,\n   signatures) has been verified.\n\
    \   Note that the fact that an attribute is authenticated does not imply\n   anything\
    \ about the semantics of the attribute nor that the trusted\n   credential source\
    \ was authorized to assert the attribute.  Such\n   interpretations SHOULD be\
    \ the result of applying local policy to the\n   attribute.\n   An unauthenticated\
    \ attribute is called _asserted_ in what follows.\n   This is not to be confused\
    \ with other uses of the words \"asserted\" or\n   \"assertion\" such as \"SAML\
    \ attribute assertion\", the attributes of\n   which may be authenticated in the\
    \ sense of this document, for\n   instance, if the SAML attribute assertion was\
    \ signed by a key trusted\n   by the peer.\n"
- title: 4.  Name Attributes/Values as ACL Subjects
  contents:
  - "4.  Name Attributes/Values as ACL Subjects\n   To facilitate the development\
    \ of portable applications that make use\n   of name attributes to construct and\
    \ evaluate portable Access Control\n   Lists (ACLs), the GSS-API makes name attribute\
    \ values available in\n   canonical network encodings thereof.\n"
- title: 5.  Naming Contexts
  contents:
  - "5.  Naming Contexts\n   Several factors influence the context in which a name\
    \ attribute is\n   interpreted.  One is the trust context.\n   As discussed previously,\
    \ applications apply local policy to determine\n   whether a particular peer credential\
    \ issuer is trusted to make a\n   given statement.  Different GSS-API mechanisms\
    \ and deployments have\n   different trust models surrounding attributes they\
    \ provide about a\n   name.\n   For example, Kerberos deployments in the enterprise\
    \ typically trust a\n   Key Distribution Center (KDC) to make any statement about\
    \ principals\n   in a realm.  This includes attributes such as group membership.\n\
    \   In contrast, in a federated SAML environment, the identity provider\n   typically\
    \ exists in a different organization than the acceptor.  In\n   this case, the\
    \ set of group memberships or entitlements that the IDP\n   is permitted to make\
    \ needs to be filtered by the policy of the\n   acceptor and federation.\n   So\
    \ even an attribute containing the same information, such as email\n   address,\
    \ would need to be treated differently by the application in\n   the context of\
    \ an enterprise deployment from the context of a\n   federation.\n   Another aspect\
    \ related to trust is the role of the credential issuer\n   in providing the attribute.\
    \  Consider Public Key Cryptography for\n   Initial Authentication in Kerberos\
    \ (PKINIT) [RFC4556].  In this\n   protocol, a public key and associated certificate\
    \ are used to\n   authenticate to a Kerberos KDC.  Consider how attributes related\
    \ to a\n   PKINIT certificate should be made available in GSS-API\n   authentications\
    \ based on the Kerberos ticket.  In some deployments,\n   the certificate may\
    \ be fully trusted; by including the certificate\n   information in the ticket,\
    \ the KDC permits the acceptor to trust the\n   information in the certificate\
    \ just as if the KDC itself had made\n   these statements.  In other deployments,\
    \ the KDC may have authorized\n   a hash of the certificate without evaluating\
    \ the content of the\n   certificate or generally trusting the issuing certification\n\
    \   authority.  In this case, if the certificate were included in the\n   issued\
    \ ticket, the KDC would only be making the statement that the\n   certificate\
    \ was used in the authentication.  This statement would be\n   authenticated but\
    \ would not imply that the KDC asserted that\n   particular attributes of the\
    \ certificate accurately described the\n   initiator.\n   Another aspect of context\
    \ is encoding of the attribute information.\n   An attribute containing an ASCII\
    \ [ANSI.X3-4.1986] or UTF-8 [RFC3629]\n   version of an email address could not\
    \ be interpreted the same as an\n   ASN.1 Distinguished Encoding Rules email address\
    \ in a certificate.\n   All of these contextual aspects of a name attribute affect\
    \ whether\n   two attributes can be treated the same by an application and thus\n\
    \   whether they should be considered the same name attribute.  In the\n   GSS-API\
    \ naming extensions, attributes that have different contexts\n   MUST have different\
    \ names so they can be distinguished by\n   applications.  As an unfortunate consequence\
    \ of this requirement,\n   multiple attribute names will exist for the same basic\
    \ information.\n   That is, there is no single attribute name for the email address\
    \ of\n   an initiator.  Other aspects of how mechanisms describe information\n\
    \   about subjects would already make this true.  For example, some\n   mechanisms\
    \ use OIDs to name attributes; others use URIs.\n   Local implementations or platforms\
    \ are likely to have sufficient\n   policy and information to know when contexts\
    \ can be treated as the\n   same.  For example, the GSS-API implementation may\
    \ know that a\n   particular certification authority can be trusted in the context\
    \ of a\n   PKINIT authentication.  The local implementation may have sufficient\n\
    \   policy to know that a particular credential issuer is trusted to make\n  \
    \ a given statement.  In order to take advantage of this local\n   knowledge within\
    \ the GSS-API implementation, naming extensions\n   support the concept of local\
    \ attributes in addition to standard\n   attributes.  For example, an implementation\
    \ might provide a local\n   attribute for email address.  The implementation would\
    \ specify the\n   encoding and representation of this attribute; mechanism-specific\n\
    \   standards attributes would be re-encoded if necessary to meet this\n   representation.\
    \  Only email addresses in contexts that meet the\n   requirements of local policy\
    \ would be mapped into this local\n   attribute.\n   Such local attributes inherently\
    \ expose a trade-off between\n   interoperability and usability.  Using a local\
    \ attribute in an\n   application requires knowledge of the local implementation.\
    \  However,\n   using a standardized attribute in an application requires more\n\
    \   knowledge of policy and more validation logic in the application.\n   Sharing\
    \ this logic in the local platform provides more consistency\n   across applications\
    \ as well as reduces implementation costs.  Both\n   options are needed.\n"
- title: 6.  Representation of Attribute Names
  contents:
  - "6.  Representation of Attribute Names\n   Different underlying mechanisms (e.g.,\
    \ SAML or X.509 certificates)\n   provide different representations for the names\
    \ of their attributes.\n   In X.509 certificates, most objects are named by object\
    \ identifiers\n   (OIDs).  The type of object (certificate extension, name constraint,\n\
    \   keyPurposeID, etc.) along with the OID is sufficient to identify the\n   attribute.\
    \  By contrast, according to Sections 8.2 and 2.7.3.1 of\n   [OASIS.saml-core-2.0-os],\
    \ the name of an attribute has two parts.\n   The first is a URI describing the\
    \ format of the name.  The second\n   part, whose form depends on the format URI,\
    \ is the actual name.  In\n   other cases, an attribute might represent a certificate\
    \ that plays\n   some particular role in a GSS-API mechanism; such attributes\
    \ might\n   have a simple mechanism-defined name.\n   Attribute names MUST support\
    \ multiple components.  If there is more\n   than one component in an attribute\
    \ name, the more significant\n   components define the semantics of the less significant\
    \ components.\n   Attribute names are represented as OCTET STRING elements in\
    \ the API\n   described below.  These attribute names have syntax and semantics\n\
    \   that are understood by the application and by the lower-layer\n   implementations\
    \ (some of which are described below).\n   If an attribute name contains a space\
    \ (ASCII 0x20), the first space\n   separates the most significant or primary\
    \ component of the name from\n   the remainder.  We may refer to the primary component\
    \ of the\n   attribute name as the attribute name's \"prefix\".  If there is no\n\
    \   space, the primary component is the entire name; otherwise, it\n   defines\
    \ the interpretation of the remainder of the names.\n   If the primary component\
    \ contains a \":\" (ASCII 0x3a), then the\n   primary component is a URI.  Otherwise,\
    \ the attribute is a local\n   attribute and the primary component has meaning\
    \ to the implementation\n   of GSS-API or to the specific configuration of the\
    \ application.\n   Local attribute names with an \"at\" sign (\"@\") in them are\
    \ reserved\n   for future allocation by the IETF.\n   Since attribute names are\
    \ split at the first space into prefix and\n   suffix, there is a potential for\
    \ ambiguity if a mechanism blindly\n   passes through a name attribute whose name\
    \ it does not understand.\n   In order to prevent such ambiguities, the mechanism\
    \ MUST always\n   prefix raw name attributes with a prefix that reflects the context\
    \ of\n   the attribute.\n   Local attribute names under the control of an administrator\
    \ or a\n   sufficiently trusted part of the platform need not have a prefix to\n\
    \   describe context.\n"
- title: 7.  API
  contents:
  - '7.  API

    '
- title: 7.1.  SET OF OCTET STRING
  contents:
  - "7.1.  SET OF OCTET STRING\n   The construct \"SET OF OCTET STRING\" occurs once\
    \ in RFC 2743\n   [RFC2743], where it is used to represent a set of status strings\
    \ in\n   the GSS_Display_status call.  The Global Grid Forum has defined SET\n\
    \   OF OCTET STRING as a buffer set type in GFD.024 [GFD.024], which also\n  \
    \ provides one API for memory management of these structures.  The\n   normative\
    \ reference to GFD.024 [GFD.024] is for the buffer set\n   functions defined in\
    \ Section 2.5 and the associated buffer set C\n   types defined in Section 6 (namely\
    \ gss_buffer_set_desc,\n   gss_buffer_set_t, gss_create_empty_buffer_set,\n  \
    \ gss_add_buffer_set_member, gss_release_buffer_set).  Nothing else\n   from GFD.024\
    \ is required to implement this document.  In particular,\n   that document specifies\
    \ changes to the behavior of existing GSS-API\n   functions in Section 3: implementing\
    \ those changes are not required\n   to implement this document.  Any implementation\
    \ of SET OF OCTET\n   STRING for use by this specification MUST preserve order.\n"
- title: 7.2.  Const Types
  contents:
  - "7.2.  Const Types\n   The C-bindings for the new APIs use some types from [RFC5587]\
    \ to\n   avoid issues with the use of \"const\".  The normative reference to\n\
    \   [RFC5587] is for the C types specified in Figure 1 of Section 3.4.6.\n   Nothing\
    \ else from that document is required to implement this\n   document.\n"
- title: 7.3.  GSS_Display_name_ext()
  contents:
  - "7.3.  GSS_Display_name_ext()\n   Inputs:\n   o  name INTERNAL NAME\n   o  display_as_name_type\
    \ OBJECT IDENTIFIER\n   Outputs:\n   o  major_status INTEGER\n   o  minor_status\
    \ INTEGER\n   o  display_name OCTET STRING -- caller must release with\n     \
    \ GSS_Release_buffer()\n   Return major_status codes:\n   o  GSS_S_COMPLETE indicates\
    \ no error.\n   o  GSS_S_UNAVAILABLE indicates that the given name could not be\n\
    \      displayed using the syntax of the given name type.\n   o  GSS_S_FAILURE\
    \ indicates a general error.\n   This function displays a given name using the\
    \ given name syntax, if\n   possible.  This operation may require mapping Mechanism\
    \ Names (MNs)\n   to generic name syntaxes or generic name syntaxes to mechanism-\n\
    \   specific name syntaxes.  Such mappings may not always be feasible and\n  \
    \ MAY be inexact or lossy; therefore, this function may fail.\n"
- title: 7.3.1.  C-Bindings
  contents:
  - "7.3.1.  C-Bindings\n   The display_name buffer is de-allocated by the caller\
    \ with\n   gss_release_buffer.\n   OM_uint32 gss_display_name_ext(\n     OM_uint32\
    \                     *minor_status,\n     gss_const_name_t              name,\n\
    \     gss_const_OID                 display_as_name_type,\n     gss_buffer_t \
    \                 display_name\n   );\n"
- title: 7.4.  GSS_Inquire_name()
  contents:
  - "7.4.  GSS_Inquire_name()\n   Inputs:\n   o  name INTERNAL NAME\n   Outputs:\n\
    \   o  major_status INTEGER\n   o  minor_status INTEGER\n   o  name_is_MN BOOLEAN\n\
    \   o  mn_mech OBJECT IDENTIFIER\n   o  attrs SET OF OCTET STRING -- the caller\
    \ is responsible for de-\n      allocating memory using GSS_Release_buffer_set\n\
    \   Return major_status codes:\n   o  GSS_S_COMPLETE indicates no error.\n   o\
    \  GSS_S_FAILURE indicates a general error.\n   This function outputs the set\
    \ of attributes of a name.  It also\n   indicates if a given name is an Mechanism\
    \ Name (MN) or not and, if it\n   is, the mechanism of which it's an MN.\n"
- title: 7.4.1.  C-Bindings
  contents:
  - "7.4.1.  C-Bindings\n   OM_uint32 gss_inquire_name(\n     OM_uint32          \
    \           *minor_status,\n     gss_const_name_t              name,\n     int\
    \                           *name_is_MN,\n     gss_OID                       *MN_mech,\n\
    \     gss_buffer_set_t              *attrs\n   );\n   The gss_buffer_set_t is\
    \ used here as the C representation of SET OF\n   OCTET STRING.  This type is\
    \ used to represent a set of attributes and\n   is a NULL-terminated array of\
    \ gss_buffer_t.  The gss_buffer_set_t\n   type and associated API is defined in\
    \ GFD.024 [GFD.024].  The \"attrs\"\n   buffer set is de-allocated by the caller\
    \ using\n   gss_release_buffer_set().\n"
- title: 7.5.  GSS_Get_name_attribute()
  contents:
  - "7.5.  GSS_Get_name_attribute()\n   Inputs:\n   o  name INTERNAL NAME\n   o  attr\
    \ OCTET STRING\n   Outputs:\n   o  major_status INTEGER\n   o  minor_status INTEGER\n\
    \   o  authenticated BOOLEAN -- TRUE if and only if authenticated by the\n   \
    \   trusted peer credential source\n   o  complete BOOLEAN -- TRUE if and only\
    \ if this represents a complete\n      set of values for the name\n   o  values\
    \ SET OF OCTET STRING -- the caller is responsible for de-\n      allocating memory\
    \ using GSS_Release_buffer_set\n   o  display_values SET OF OCTET STRING -- the\
    \ caller is responsible\n      for de-allocating memory using GSS_Release_buffer_set\n\
    \   Return major_status codes:\n   o  GSS_S_COMPLETE indicates no error.\n   o\
    \  GSS_S_UNAVAILABLE indicates that the given attribute OID is not\n      known\
    \ or set.\n   o  GSS_S_FAILURE indicates a general error.\n   This function outputs\
    \ the value(s) associated with a given GSS name\n   object for a given name attribute.\n\
    \   The complete flag denotes that (if TRUE) the set of values represents\n  \
    \ a complete set of values for this name.  The peer being an\n   authoritative\
    \ source of information for this attribute is a\n   sufficient condition for the\
    \ complete flag to be set by the peer.\n   In the federated case, when several\
    \ peers may hold some of the\n   attributes about a name, this flag may be highly\
    \ dangerous and SHOULD\n   NOT be used.\n   NOTE: This function relies on the\
    \ GSS-API notion of \"SET OF\" allowing\n   for order preservation; this has been\
    \ discussed on the KITTEN WG\n   mailing list, and the consensus seems to be that,\
    \ indeed, that was\n   always the intention.  It should be noted, however, that\
    \ the order\n   presented does not always reflect an underlying order of the\n\
    \   mechanism-specific source of the attribute values.\n"
- title: 7.5.1.  C-Bindings
  contents:
  - "7.5.1.  C-Bindings\n   The C-bindings of GSS_Get_name_attribute() require one\
    \ function call\n   per attribute value for multi-valued name attributes.  This\
    \ is done\n   by using a single gss_buffer_t for each value and an input/output\n\
    \   integer parameter to distinguish initial and subsequent calls and to\n   indicate\
    \ when all values have been obtained.\n   The \"more\" input/output parameter\
    \ should point to an integer variable\n   whose value, on first call to gss_get_name_attribute(),\
    \ MUST be -1\n   and whose value upon function call return will be non-zero to\n\
    \   indicate that additional values remain or zero to indicate that no\n   values\
    \ remain.  The caller should not modify this parameter after the\n   initial call.\
    \  The status of the complete and authenticated flags\n   MUST NOT change between\
    \ multiple calls to iterate over values for an\n   attribute.\n   The output buffers\
    \ \"value\" and \"display_value\" are de-allocated by\n   the caller using gss_release_buffer().\n\
    \   OM_uint32 gss_get_name_attribute(\n     OM_uint32                     *minor_status,\n\
    \     gss_const_name_t              name,\n     gss_const_buffer_t           \
    \ attr,\n     int                           *authenticated,\n     int        \
    \                   *complete,\n     gss_buffer_t                  value,\n  \
    \   gss_buffer_t                  display_value,\n     int                   \
    \        *more\n   );\n"
- title: 7.6.  GSS_Set_name_attribute()
  contents:
  - "7.6.  GSS_Set_name_attribute()\n   Inputs:\n   o  name INTERNAL NAME\n   o  complete\
    \ BOOLEAN -- TRUE if and only if this represents a complete\n      set of values\
    \ for the name\n   o  attr OCTET STRING\n   o  values SET OF OCTET STRING\n  \
    \ Outputs:\n   o  major_status INTEGER\n   o  minor_status INTEGER\n   Return\
    \ major_status codes:\n   o  GSS_S_COMPLETE indicates no error.\n   o  GSS_S_UNAVAILABLE\
    \ indicates that the given attribute NAME is not\n      known or could not be\
    \ set.\n   o  GSS_S_FAILURE indicates a general error.\n   When the given NAME\
    \ object is an MN, this function MUST fail (with\n   GSS_S_FAILURE) if the mechanism\
    \ for which the name is an MN does not\n   recognize the attribute name or the\
    \ namespace it belongs to.  This is\n   because name attributes generally have\
    \ some semantics that mechanisms\n   must understand.\n   On the other hand, when\
    \ the given name is not an MN, this function\n   MAY succeed even if none of the\
    \ available mechanisms understand the\n   given attribute, in which subsequent\
    \ credential acquisition attempts\n   (via GSS_Acquire_cred() or GSS_Add_cred())\
    \ with the resulting name\n   MUST fail for mechanisms that do not understand\
    \ any one or more name\n   attributes set with this function.  Applications may\
    \ wish to use a\n   non-MN, then acquire a credential with that name as the desired\
    \ name.\n   The acquired credentials will have elements only for the mechanisms\n\
    \   that can carry the name attributes set on the name.\n   Note that this means\
    \ that all name attributes are locally critical:\n   the mechanism(s) must understand\
    \ them.  The reason for this is that\n   name attributes must necessarily have\
    \ some meaning that the mechanism\n   must understand, even in the case of application-specific\
    \ attributes\n   (in which case the mechanism must know to transport the attribute\
    \ to\n   any peer).  However, there is no provision to ensure that peers\n   understand\
    \ any given name attribute.  Individual name attributes may\n   be critical with\
    \ respect to peers, and the specification of the\n   attribute will have to indicate\
    \ whether the mechanism's protocol or\n   the application is expected to enforce\
    \ criticality.\n   The complete flag denotes that (if TRUE) the set of values\
    \ represents\n   a complete set of values for this name.  The peer being an\n\
    \   authoritative source of information for this attribute is a\n   sufficient\
    \ condition for the complete flag to be set by the peer.\n   In the federated\
    \ case, when several peers may hold some of the\n   attributes about a name, this\
    \ flag may be highly dangerous and SHOULD\n   NOT be used.\n   NOTE: This function\
    \ relies on the GSS-API notion of \"SET OF\" allowing\n   for order preservation;\
    \ this has been discussed on the KITTEN WG\n   mailing list, and the consensus\
    \ seems to be that, indeed, that was\n   always the intention.  It should be noted\
    \ that underlying mechanisms\n   may not respect the given order.\n"
- title: 7.6.1.  C-Bindings
  contents:
  - "7.6.1.  C-Bindings\n   The C-bindings of GSS_Set_name_attribute() requires one\
    \ function call\n   per attribute value for multi-valued name attributes.  Each\
    \ call adds\n   one value.  To replace an attribute's every value, delete the\n\
    \   attribute's values first with GSS_Delete_name_attribute().\n   OM_uint32 gss_set_name_attribute(\n\
    \     OM_uint32                     *minor_status,\n     gss_const_name_t    \
    \          name,\n     int                           complete,\n     gss_const_buffer_t\
    \            attr,\n     gss_const_buffer_t            value\n   );\n"
- title: 7.7.  GSS_Delete_name_attribute()
  contents:
  - "7.7.  GSS_Delete_name_attribute()\n   Inputs:\n   o  name INTERNAL NAME\n   o\
    \  attr OCTET STRING\n   Outputs:\n   o  major_status INTEGER\n   o  minor_status\
    \ INTEGER\n   Return major_status codes:\n   o  GSS_S_COMPLETE indicates no error.\n\
    \   o  GSS_S_UNAVAILABLE indicates that the given attribute NAME is not\n    \
    \  known.\n   o  GSS_S_UNAUTHORIZED indicates that a forbidden delete operation\
    \ was\n      attempted, such as deleting a negative attribute.\n   o  GSS_S_FAILURE\
    \ indicates a general error.\n   Deletion of negative authenticated attributes\
    \ from NAME objects MUST\n   NOT be allowed and must result in a GSS_S_UNAUTHORIZED.\n"
- title: 7.7.1.  C-Bindings
  contents:
  - "7.7.1.  C-Bindings\n   OM_uint32 gss_delete_name_attribute(\n     OM_uint32 \
    \                    *minor_status,\n     gss_const_name_t              name,\n\
    \     gss_const_buffer_t            attr\n   );\n"
- title: 7.8.  GSS_Export_name_composite()
  contents:
  - "7.8.  GSS_Export_name_composite()\n   Inputs:\n   o  name INTERNAL NAME\n   Outputs:\n\
    \   o  major_status INTEGER\n   o  minor_status INTEGER\n   o  exp_composite_name\
    \ OCTET STRING -- the caller is responsible for\n      de-allocating memory using\
    \ GSS_Release_buffer\n   Return major_status codes:\n   o  GSS_S_COMPLETE indicates\
    \ no error.\n   o  GSS_S_FAILURE indicates a general error.\n   This function\
    \ outputs a token that can be imported with\n   GSS_Import_name(), using GSS_C_NT_COMPOSITE_EXPORT\
    \ as the name type\n   and that preserves any name attribute information (including\
    \ the\n   authenticated/complete flags) associated with the input name (which\n\
    \   GSS_Export_name() may well not).  The token format is not specified\n   here\
    \ as this facility is intended for inter-process communication\n   only; however,\
    \ all such tokens MUST start with a two-octet token ID,\n   hex 04 02, in network\
    \ byte order.\n   The OID for GSS_C_NT_COMPOSITE_EXPORT is 1.3.6.1.5.6.6.\n"
- title: 7.8.1.  C-Bindings
  contents:
  - "7.8.1.  C-Bindings\n   The \"exp_composite_name\" buffer is de-allocated by the\
    \ caller with\n   gss_release_buffer.\n   OM_uint32 gss_export_name_composite(\n\
    \     OM_uint32                     *minor_status,\n     gss_const_name_t    \
    \          name,\n     gss_buffer_t                  exp_composite_name\n   );\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   IANA has registered a new name-type OID in \"SMI\
    \ Security for Name\n   System Designators Codes (nametypes)\":\n      6  gss-composite-export\
    \ [RFC6680]\n   (The absolute OID is 1.3.6.1.5.6.6.)\n   This document creates\
    \ a namespace of GSS-API name attributes.\n   Attributes are named by URIs, so\
    \ no single authority is technically\n   needed for allocation.  However, future\
    \ deployment experience may\n   indicate the need for an IANA registry for URIs\
    \ used to reference\n   names specified by IETF standards.  It is expected that\
    \ this will be\n   a registry of URNs, but this document provides no further guidance\
    \ on\n   this registry.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This document extends the GSS-API naming model\
    \ to include support for\n   name attributes.  The intention is that name attributes\
    \ are to be\n   used as a basis for (among other things) authorization decisions\
    \ or\n   personalization for applications relying on GSS-API security\n   contexts.\n\
    \   The security of the application may be critically dependent on the\n   security\
    \ of the attributes.  This document classifies attributes as\n   asserted or authenticated.\
    \  Asserted (non-authenticated) attributes\n   MUST NOT be used if the attribute\
    \ has security implications for the\n   application (e.g., authorization decisions)\
    \ since asserted attributes\n   may easily be controlled by the peer directly.\n\
    \   It is important to understand the meaning of \"authenticated\" in this\n \
    \  setting.  Authenticated does not imply that any semantic of the\n   attribute\
    \ is claimed to be true.  The only implication is that a\n   trusted third party\
    \ has asserted the attribute as opposed to the\n   attribute being asserted by\
    \ the peer itself.  Any additional\n   semantics are always the result of applying\
    \ policy.  For instance, in\n   a given deployment, the mail attribute of the\
    \ subject may be\n   authenticated and sourced from an email system where \"authoritative\"\
    \n   values are kept.  In another situation, users may be allowed to\n   modify\
    \ their mail addresses freely.  In both cases, the \"mail\"\n   attribute may\
    \ be authenticated by virtue of being included in signed\n   SAML attribute assertions\
    \ or by other means authenticated by the\n   underlying mechanism.\n   When the\
    \ underlying security mechanism does not provide a permanent\n   unique identity\
    \ (e.g., anonymous Kerberos), GSS-API naming extensions\n   may be used to provide\
    \ a permanent unique identity attribute.  This\n   may be a globally unique identifier,\
    \ a value unique within the\n   namespace of the attribute issuer, or a \"directed\"\
    \ identifier that is\n   unique per peer acceptor identity.  SAML, to use one\
    \ example\n   technology, offers a number of built-in constructs for this purpose,\n\
    \   such as a <NameID> with a Format of\n   \"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\"\
    .  SAML\n   deployments also typically make use of domain-specific attribute\n\
    \   types that can serve as identifiers.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [GFD.024]  Meder, S., Welch, V., Tuecke, S.,\
    \ and D. Engert, \"GSS-API\n              Extensions\", Global Grid Forum GFD.024,\
    \ June 2004,\n              <http://www.ggf.org/documents/GFD.24.pdf>.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2743]  Linn, J., \"Generic Security\
    \ Service Application Program\n              Interface Version 2, Update 1\",\
    \ RFC 2743, January 2000.\n   [RFC2744]  Wray, J., \"Generic Security Service\
    \ API Version 2 :\n              C-bindings\", RFC 2744, January 2000.\n   [RFC5587]\
    \  Williams, N., \"Extended Generic Security Service Mechanism\n             \
    \ Inquiry APIs\", RFC 5587, July 2009.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [ANSI.X3-4.1986]\n              American National\
    \ Standards Institute, \"Coded Character\n              Set - 7-bit American Standard\
    \ Code for Information\n              Interchange\", ANSI X3.4, 1986.\n   [OASIS.saml-core-2.0-os]\n\
    \              Cantor, S., Kemp, J., Philpott, R., and E. Maler,\n           \
    \   \"Assertions and Protocol for the OASIS Security Assertion\n             \
    \ Markup Language (SAML) V2.0\", OASIS Standard saml-core-\n              2.0-os,\
    \ March 2005.\n   [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of\
    \ ISO\n              10646\", STD 63, RFC 3629, November 2003.\n   [RFC4120] \
    \ Neuman, C., Yu, T., Hartman, S., and K. Raeburn, \"The\n              Kerberos\
    \ Network Authentication Service (V5)\", RFC 4120,\n              July 2005.\n\
    \   [RFC4556]  Zhu, L. and B. Tung, \"Public Key Cryptography for Initial\n  \
    \            Authentication in Kerberos (PKINIT)\", RFC 4556, June 2006.\n   [RFC4768]\
    \  Hartman, S., \"Desired Enhancements to Generic Security\n              Services\
    \ Application Program Interface (GSS-API) Version 3\n              Naming\", RFC\
    \ 4768, December 2006.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Nicolas Williams\n   Cryptonector, LLC\n   EMail: nico@cryptonector.com\n\
    \   Leif Johansson\n   Swedish University Network\n   Thulegatan 11\n   Stockholm\n\
    \   Sweden\n   EMail: leifj@sunet.se\n   URI:   http://www.sunet.se\n   Sam Hartman\n\
    \   Painless Security\n   EMail: hartmans-ietf@mit.edu\n   Simon Josefsson\n \
    \  SJD AB\n   Johan Olof Wallins Vaeg 13\n   171 64 Solna\n   Sweden\n   EMail:\
    \ simon@josefsson.org\n   URI:   http://josefsson.org/\n"
