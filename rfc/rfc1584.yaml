- title: __initial_text__
  contents:
  - '                      Multicast Extensions to OSPF

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n    This document specifies an Internet standards track\
    \ protocol for the\n    Internet community, and requests discussion and suggestions\
    \ for\n    improvements.  Please refer to the current edition of the \"Internet\n\
    \    Official Protocol Standards\" (STD 1) for the standardization state\n   \
    \ and status of this protocol.  Distribution of this memo is\n    unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n    This memo documents enhancements to the OSPF protocol enabling\
    \ the\n    routing of IP multicast datagrams. In this proposal, an IP multicast\n\
    \    packet is routed based both on the packet's source and its multicast\n  \
    \  destination (commonly referred to as source/destination routing). As\n    it\
    \ is routed, the multicast packet follows a shortest path to each\n    multicast\
    \ destination. During packet forwarding, any commonality of\n    paths is exploited;\
    \ when multiple hosts belong to a single multicast\n    group, a multicast packet\
    \ will be replicated only when the paths to\n    the separate hosts diverge.\n\
    \    OSPF, a link-state routing protocol, provides a database describing\n   \
    \ the Autonomous System's topology. A new OSPF link state\n    advertisement is\
    \ added describing the location of multicast\n    destinations. A multicast packet's\
    \ path is then calculated by\n    building a pruned shortest-path tree rooted\
    \ at the packet's IP\n    source. These trees are built on demand, and the results\
    \ of the\n    calculation are cached for use by subsequent packets.\n    The multicast\
    \ extensions are built on top of OSPF Version 2. The\n    extensions have been\
    \ implemented so that a multicast routing\n    capability can be introduced piecemeal\
    \ into an OSPF Version 2\n    routing domain. Some of the OSPF Version 2 routers\
    \ may run the\n    multicast extensions, while others may continue to be restricted\
    \ to\n    the forwarding of regular IP traffic (unicasts).\n    Please send comments\
    \ to mospf@gated.cornell.edu.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n    1       Introduction ...........................................\
    \ 4\n    1.1     Terminology ............................................ 5\n\
    \    1.2     Acknowledgments ........................................ 6\n    2\
    \       Multicast routing in MOSPF ............................. 6\n    2.1  \
    \   Routing characteristics ................................ 6\n    2.2     Sample\
    \ path of a multicast datagram .................... 8\n    2.3     MOSPF forwarding\
    \ mechanism ............................ 10\n    2.3.1   IGMP interface: the local\
    \ group database .............. 10\n    2.3.2   A datagram's shortest-path tree\
    \ ....................... 14\n    2.3.3   Support for Non-broadcast networks ....................\
    \ 16\n    2.3.4   Details concerning forwarding cache entries ........... 16\n\
    \    3       Inter-area multicasting ............................... 18\n    3.1\
    \     Extent of group-membership-LSAs ....................... 19\n    3.2    \
    \ Building inter-area datagram shortest-path trees ...... 22\n    4       Inter-AS\
    \ multicasting ................................. 27\n    4.1     Building inter-AS\
    \ datagram shortest-path trees ........ 28\n    4.2     Stub area behavior ....................................\
    \ 30\n    4.3     Inter-AS multicasting in a core Autonomous System ..... 31\n\
    \    5       Modelling internal group membership ................... 31\n    6\
    \       Additional capabilities ............................... 33\n    6.1  \
    \   Mixing with non-multicast routers ..................... 34\n    6.2     TOS-based\
    \ multicast ................................... 35\n    6.3     Assigning multiple\
    \ IP networks to a physical network .. 36\n    6.4     Networks on Autonomous\
    \ System boundaries .............. 37\n    6.5     Recommended system configuration\
    \ ...................... 38\n    7       Basic implementation requirements .....................\
    \ 40\n    8       Protocol data structures .............................. 40\n\
    \    8.1     Additions to the OSPF area structure .................. 41\n    8.2\
    \     Additions to the OSPF interface structure ............. 42\n    8.3    \
    \ Additions to the OSPF neighbor structure .............. 43\n    8.4     The\
    \ local group database .............................. 43\n    8.5     The forwarding\
    \ cache .................................. 44\n    9       Interaction with the\
    \ IGMP protocol .................... 45\n    9.1     Sending IGMP Host Membership\
    \ Queries .................. 46\n    9.2     Receiving IGMP Host Membership Reports\
    \ ................ 46\n    9.3     Aging local group database entries ....................\
    \ 47\n    9.4     Receiving IGMP Host Membership Queries ................ 47\n\
    \    10      Group-membership-LSAs ................................. 48\n    10.1\
    \    Constructing group-membership-LSAs .................... 49\n    10.2    Flooding\
    \ group-membership-LSAs ........................ 52\n    11      Detailed description\
    \ of multicast datagram forwarding . 52\n    11.1    Associating a MOSPF interface\
    \ with a received datagram  55\n    11.2    Locating the source network ...........................\
    \ 55\n    11.3    Forwarding locally originated multicasts .............. 57\n\
    \    12      Construction of forwarding cache entries .............. 58\n    12.1\
    \    The Vertex data structure ............................. 59\n    12.2    The\
    \ SPF calculation ................................... 60\n    12.2.1  Candidate\
    \ list Initialization: Case SourceIntraArea ... 65\n    12.2.2  Candidate list\
    \ Initialization: Case SourceInterArea1 .. 66\n    12.2.3  Candidate list Initialization:\
    \ Case SourceInterArea2 .. 66\n    12.2.4  Candidate list Initialization: Case\
    \ SourceExternal .... 67\n    12.2.5  Candidate list Initialization: Case SourceStubExternal\
    \  70\n    12.2.6  Processing labelled vertices .......................... 70\n\
    \    12.2.7  Merging datagram shortest-path trees .................. 71\n    12.2.8\
    \  TOS considerations .................................... 72\n    12.2.9  Comparison\
    \ to the unicast SPF calculation ............. 74\n    12.3    Adding local database\
    \ entries to the forwarding cache   75\n    13      Maintaining the forwarding\
    \ cache ...................... 76\n    14      Other additions to the OSPF specification\
    \ ............. 77\n    14.1    The Designated Router .................................\
    \ 77\n    14.2    Sending Hello packets ................................. 78\n\
    \    14.3    The Neighbor state machine ............................ 78\n    14.4\
    \    Receiving Database Description packets ................ 78\n    14.5    Sending\
    \ Database Description packets .................. 79\n    14.6    Originating\
    \ Router-LSAs ............................... 79\n    14.7    Originating Network-LSAs\
    \ .............................. 79\n    14.8    Originating Summary-link-LSAs\
    \ ......................... 80\n    14.9    Originating AS external-link-LSAs\
    \ ..................... 80\n    14.10   Next step in the flooding procedure ...................\
    \ 81\n    14.11   Virtual links ......................................... 81\n\
    \    15      References ............................................ 83\n    \
    \        Footnotes ............................................. 84\n    A   \
    \    Data Formats .......................................... 88\n    A.1     The\
    \ Options field ..................................... 89\n    A.2     Router-LSA\
    \ ............................................ 91\n    A.3     Group-membership-LSA\
    \ .................................. 93\n    B       Configurable Constants ................................\
    \ 95\n    B.1     Global parameters ..................................... 95\n\
    \    B.2     Router interface parameters ........................... 95\n    C\
    \       Sample datagram shortest-path trees ................... 97\n    C.1  \
    \   An intra-area tree .................................... 98\n    C.2     The\
    \ effect of areas .................................. 100\n    C.3     The effect\
    \ of virtual links .......................... 101\n            Security Considerations\
    \ .............................. 102\n            Author's Address .....................................\
    \ 102\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n    This memo documents enhancements to OSPF Version 2 to support\
    \ IP\n    multicast routing. The enhancements have been added in a backward-\n\
    \    compatible fashion; routers running the multicast additions will\n    interoperate\
    \ with non-multicast OSPF routers when forwarding regular\n    (unicast) IP data\
    \ traffic. The protocol resulting from the addition\n    of the multicast enhancements\
    \ to OSPF is herein referred to as the\n    MOSPF protocol.\n    IP multicasting\
    \ is an extension of LAN multicasting to a TCP/IP\n    internet. Multicasting\
    \ support for TCP/IP hosts has been specified\n    in [RFC 1112]. In that document,\
    \ multicast groups are represented by\n    IP class D addresses. Individual TCP/IP\
    \ hosts join (and leave)\n    multicast groups through the Internet Group Management\
    \ Protocol\n    (IGMP, also specified in [RFC 1112]). A host need not be a member\
    \ of\n    a multicast group in order to send datagrams to the group. Multicast\n\
    \    datagrams are to be delivered to each member of the multicast group\n   \
    \ with the same \"best-effort\" delivery accorded regular (unicast) IP\n    data\
    \ traffic.\n    MOSPF provides the ability to forward multicast datagrams from\
    \ one\n    IP network to another (i.e., through internet routers). MOSPF\n   \
    \ forwards a multicast datagram on the basis of both the datagram's\n    source\
    \ and destination (this is sometimes called source/destination\n    routing).\
    \ The OSPF link state database provides a complete\n    description of the Autonomous\
    \ System's topology. By adding a new\n    type of link state advertisement, the\
    \ group-membership-LSA, the\n    location of all multicast group members is pinpointed\
    \ in the\n    database. The path of a multicast datagram can then be calculated\
    \ by\n    building a shortest-path tree rooted at the datagram's source. All\n\
    \    branches not containing multicast members are pruned from the tree.\n   \
    \ These pruned shortest-path trees are initially built when the first\n    datagram\
    \ is received (i.e., on demand).  The results of the shortest\n    path calculation\
    \ are then cached for use by subsequent datagrams\n    having the same source\
    \ and destination.\n    OSPF allows an Autonomous System to be split into areas.\
    \ However,\n    when this is done complete knowledge of the Autonomous System's\n\
    \    topology is lost. When forwarding multicasts between areas, only\n    incomplete\
    \ shortest-path trees can be built. This may lead to some\n    inefficiency in\
    \ routing. An analogous situation exists when the\n    source of the multicast\
    \ datagram lies in another Autonomous System.\n    In both cases (i.e., the source\
    \ of the datagram belongs to a\n    different OSPF area, or to a different Autonomous\
    \ system) the\n    neighborhood immediately surrounding the source is unknown.\
    \ In these\n    cases the source's neighborhood is approximated by OSPF summary\
    \ link\n    advertisements or by OSPF AS external link advertisements\n    respectively.\n\
    \    Routers running MOSPF can be intermixed with non-multicast OSPF\n    routers.\
    \ Both types of routers can interoperate when forwarding\n    regular (unicast)\
    \ IP data traffic. Obviously, the forwarding extent\n    of IP multicasts is limited\
    \ by the number of MOSPF routers present\n    in the Autonomous System (and their\
    \ interconnection, if any). An\n    ability to \"tunnel\" multicast datagrams\
    \ through non-multicast\n    routers is not provided. In MOSPF, just as in the\
    \ base OSPF\n    protocol, datagrams (multicast or unicast) are routed \"as is\"\
    \ --\n    they are not further encapsulated or decapsulated as they transit\n\
    \    the Autonomous System.\n    1.1.  Terminology\n        This memo uses the\
    \ terminology listed in section 1.2 of [OSPF].\n        For this reason, terms\
    \ such as \"Network\", \"Autonomous System\"\n        and \"link state advertisement\"\
    \ are assumed to be understood. In\n        addition, the abbreviation LSA is\
    \ used for \"link state\n        advertisement\". For example, router links advertisements\
    \ are\n        referred to as router-LSAs and the new link state advertisement\n\
    \        describing the location of members of a multicast group is\n        referred\
    \ to as a group-membership-LSA.\n        [RFC 1112] discusses the data-link encapsulation\
    \ of IP multicast\n        datagrams. In contrast to the normal forwarding of\
    \ IP unicast\n        datagrams, on a broadcast network the mapping of an IP multicast\n\
    \        destination to a data-link destination address is not done with\n   \
    \     the ARP protocol. Instead, static mappings have been defined\n        from\
    \ IP multicast destinations to data-link addresses. These\n        mappings are\
    \ dependent on network type; for some networks IP\n        multicasts are algorithmically\
    \ mapped to data-link multicast\n        addresses, for other networks all IP\
    \ multicast destinations are\n        mapped onto the data-link broadcast address.\
    \ This document\n        loosely describes both of these possible mappings as\
    \ data-link\n        multicast.\n        The following terms are also used throughout\
    \ this document:\n        o   Non-multicast router. A router running OSPF Version\
    \ 2, but\n            not the multicast extensions. These routers do not forward\n\
    \            multicast datagrams, but can interoperate with MOSPF routers\n  \
    \          in the forwarding of unicast packets. Routers running the\n       \
    \     MOSPF protocol are referred to herein as either multicast-\n           \
    \ capable routers or MOSPF routers.\n        o   Non-broadcast networks. A network\
    \ supporting the attachment\n            of more than two stations, but not supporting\
    \ the delivery\n            of a single physical datagram to multiple destinations\n\
    \            (i.e., not supporting data-link multicast). [OSPF] describes\n  \
    \          these networks as non-broadcast, multi-access networks. An\n      \
    \      example of a non-broadcast network is an X.25 PDN.\n        o   Transit\
    \ network. A network having two or more OSPF routers\n            attached.  These\
    \ networks can forward data traffic that is\n            neither locally-originated\
    \ nor locally-destined. In OSPF,\n            with the exception of point-to-point\
    \ networks and virtual\n            links, the neighborhood of each transit network\
    \ is described\n            by a network links advertisement (network-LSA).\n\
    \        o   Stub network. A network having only a single OSPF router\n      \
    \      attached. A network belonging to an OSPF system is either a\n         \
    \   transit or a stub network, but never both.\n    1.2.  Acknowledgments\n  \
    \      The multicast extensions to OSPF are based on Link-State\n        Multicast\
    \ Routing algorithm presented in [Deering]. In addition,\n        the [Deering]\
    \ paper contains a section on Hierarchical Multicast\n        Routing (providing\
    \ the ideas for MOSPF's inter-area multicasting\n        scheme) and several Distance\
    \ Vector (also called Bellman-Ford)\n        multicast algorithms. One of these\
    \ Distance Vector multicast\n        algorithms, Truncated Reverse Path Broadcasting,\
    \ has been\n        implemented in the Internet (see [RFC 1075]).\n        The\
    \ MOSPF protocol has been developed by the MOSPF Working Group\n        of the\
    \ Internet Engineering Task Force. Portions of this work\n        have been supported\
    \ by DARPA under NASA contract NAG 2-650.\n"
- title: 2.  Multicast routing in MOSPF
  contents:
  - "2.  Multicast routing in MOSPF\n    This section describes MOSPF's basic multicast\
    \ routing algorithm.\n    The basic algorithm, run inside a single OSPF area,\
    \ covers the case\n    where the source of the multicast datagram is inside the\
    \ area\n    itself. Within the area, the path of the datagram forms a tree\n \
    \   rooted at the datagram source.\n    2.1.  Routing characteristics\n      \
    \  As a multicast datagram is forwarded along its shortest-path\n        tree,\
    \ the datagram is delivered to each member of the\n        destination multicast\
    \ group. In MOSPF, the forwarding of the\n        multicast datagram has the following\
    \ properties:\n        o   The path taken by a multicast datagram depends both\
    \ on the\n            datagram's source and its multicast destination. Called\n\
    \            source/destination routing, this is in contrast to most\n       \
    \     unicast datagram forwarding algorithms (like OSPF) that\n            route\
    \ based solely on destination.\n        o   The path taken between the datagram's\
    \ source and any\n            particular destination group member is the least\
    \ cost path\n            available. Cost is expressed in terms of the OSPF link-state\n\
    \            metric. For example, if the OSPF metric represents delay, a\n   \
    \         minimum delay path is chosen. OSPF metrics are configurable.\n     \
    \       A metric is assigned to each outbound router interface,\n            representing\
    \ the cost of sending a packet on that interface.\n            The cost of a path\
    \ is the sum of its constituent (outbound)\n            router interfaces[1].\n\
    \        o   MOSPF takes advantage of any commonality of least cost paths\n  \
    \          to destination group members. However, when members of the\n      \
    \      multicast group are spread out over multiple networks, the\n          \
    \  multicast datagram must at times be replicated. This\n            replication\
    \ is performed as few times as possible (at the\n            tree branches), taking\
    \ maximum advantage of common path\n            segments.\n        o   For a given\
    \ multicast datagram, all routers calculate an\n            identical shortest-path\
    \ tree. There is a single path between\n            the datagram's source and\
    \ any particular destination group\n            member. This means that, unlike\
    \ OSPF's treatment of regular\n            (unicast) IP data traffic, there is\
    \ no provision for equal-\n            cost multipath.\n        o   On each packet\
    \ hop, MOSPF normally forwards IP multicast\n            datagrams as data-link\
    \ multicasts. There are two exceptions.\n            First, on non-broadcast networks,\
    \ since there are no data-\n            link multicast/broadcast services the\
    \ datagram must be\n            forwarded to specific MOSPF neighbors (see Section\
    \ 2.3.3).\n            Second, a MOSPF router can be configured to forward IP\n\
    \            multicasts on specific networks as data-link unicasts, in\n     \
    \       order to avoid datagram replication in certain anomalous\n           \
    \ situations (see Section 6.4).\n        While MOSPF optimizes the path to any\
    \ given group member, it\n        does not necessarily optimize the use of the\
    \ internetwork as a\n        whole. To do so, instead of calculating source-based\
    \ shortest-\n        path trees, something similar to a minimal spanning tree\n\
    \        (containing only the group members) would need to be calculated.\n  \
    \      This type of minimal spanning tree is called a Steiner tree in\n      \
    \  the literature. For a comparison of shortest-path tree routing\n        to\
    \ routing using Steiner trees, see [Deering2] and [Bharath-\n        Kumar].\n\
    \    2.2.  Sample path of a multicast datagram\n        As an example of multicast\
    \ datagram routing in MOSPF, consider\n        the sample Autonomous System pictured\
    \ in Figure 1. This figure\n        has been taken from the OSPF specification\
    \ (see [OSPF]). The\n        larger rectangles represent routers, the smaller\
    \ rectangles\n        hosts. Oblongs and circles represent multi-access networks[2].\n\
    \        Lines joining routers are point-to-point serial connections. A\n    \
    \    cost has been assigned to each outbound router interface.\n        All routers\
    \ in Figure 1 are assumed to be running MOSPF. A\n        number of hosts have\
    \ been added to the figure. The hosts\n        labelled Ma have joined a particular\
    \ multicast group (call it\n        Group A) via the IGMP protocol.  These hosts\
    \ are located on\n        networks N2, N6 and N11. Similarly, using IGMP the hosts\n\
    \        labelled Mb have joined a separate multicast group B; these\n       \
    \ hosts are located on networks N1, N2 and N3. Note that hosts can\n        join\
    \ multiple multicast groups; it is only for clarity of\n        presentation that\
    \ each host has joined at most one multicast\n        group in this example. \
    \ Also, hosts H2 through H5 have been\n        added to the figure to serve as\
    \ sources for multicast datagrams.\n        Again, the datagrams' sources have\
    \ been made separate from the\n        group members only for clarity of presentation.\n\
    \        To illustrate the forwarding of a multicast datagram, suppose\n     \
    \   that Host H2 (attached to Network N4) sends a multicast datagram\n       \
    \ to multicast group B. This datagram originates as a data-link\n        layer\
    \ multicast on Network N4. Router RT3, being a multicast\n        router, has\
    \ \"opened up\" its interface data-link multicast\n        filters. It therefore\
    \ receives the multicast datagram, and\n        attempts to forward it to the\
    \ members of multicast group B\n        (located on networks N1, N2 and N3). This\
    \ is accomplished by\n        sending a single copy of the datagram onto Network\
    \ N3, again as\n        a data-link multicast[3].  Upon receiving the multicast\
    \ datagram\n        from RT3, routers RT1 and RT2 will then multicast the datagram\n\
    \        on their connected stub networks (N1 and N2 respectively).  Note\n  \
    \      that, since the datagram is sent onto Network N3 as a data-link\n     \
    \   multicast, Router RT4 will also receive a copy. However, it will\n       \
    \ not forward the datagram, since it does not lie on a shortest\n        path\
    \ between the source (Host H2) and any members of multicast\n        group B.\n\
    \        Note that the path of the multicast datagram depends on the\n       \
    \ datagram's source network. If the above multicast datagram was\n        instead\
    \ originated by Host H3, the path taken would be\n        identical, since hosts\
    \ H2 and H3 lie on the same network\n        (Network N4). However, if the datagram\
    \ was originated by Host\n        H4, its path would be different. In this case,\
    \ when Router RT3\n                 +\n                 | 3+---+    +--+  +--+\
    \       N12      N14\n               N1|--|RT1|\\1  |Mb|  |H4|         \\ N13\
    \ /\n                _|  +---+ \\  +--+ /+--+         8\\ |8/8\n             \
    \  | +         \\ _|__/                \\|/\n             +--+   +--+    /   \
    \ \\   1+---+8    8+---+6\n             |Mb|   |Mb|   *  N3  *---|RT4|------|RT5|--------+\n\
    \             +--+  /+--+    \\____/    +---+      +---+        |\n          \
    \        +         /   |                  |7         |\n                  | 3+---+\
    \ /    |                  |          |\n                N2|--|RT2|/1    |1   \
    \              |6         |\n                __|  +---+    +---+8            6+---+\
    \        |\n               |  +           |RT3|--------------|RT6|        |\n\
    \             +--+    +--+     +---+     +--+     +---+        |\n           \
    \  |Ma|    |H3|_      |2     _|H2|     Ia|7         |\n             +--+    +--+\
    \ \\     |     / +--+       |          |\n                           +---------+\
    \             |          |\n                               N4                \
    \  |          |\n                                                   |        \
    \  |\n                                                   |          |\n      \
    \                 N11                         |          |\n                 \
    \  +---------+                     |          |\n                        |   \
    \  \\                    |          |    N12\n                        |3     +--+\
    \                |          |6 2/\n                      +---+    |Ma|       \
    \         |        +---+/\n                      |RT9|    +--+               \
    \ |        |RT7|---N15\n                      +---+                        | \
    \       +---+ 9\n                        |1                   +     |        \
    \  |1\n                       _|__                  |   Ib|5       __|_   +--+\n\
    \                      /    \\      1+----+2   |  3+----+1   /    \\--|Ma|\n \
    \                    *  N9  *------|RT11|----|---|RT10|---*  N6  * +--+\n    \
    \                  \\____/       +----+    |   +----+    \\____/\n           \
    \             |                    |                |\n                      \
    \  |1                   +                |1\n             +--+   10+----+    \
    \            N8              +---+\n             |H1|-----|RT12|             \
    \                   |RT8|\n             +--+SLIP +----+                      \
    \          +---+  +--+\n                        |2                           \
    \         |4  _|H5|\n                        |                               \
    \      |  / +--+\n                   +---------+                            +--------+\n\
    \                       N10                                    N7\n          \
    \          Figure 1: A sample MOSPF configuration\n        receives the datagram,\
    \ RT3 will drop the datagram instead of\n        forwarding it (since RT3 is no\
    \ longer on the shortest path to\n        any member of Group B).\n        Note\
    \ that the path of the multicast datagram also depends on the\n        destination\
    \ multicast group. If Host H2 sends a multicast to\n        Group A, the path\
    \ taken is as follows. The datagram again starts\n        as a multicast on Network\
    \ N4. Router RT3 receives it, and\n        creates two copies. One is sent onto\
    \ Network N3 which is then\n        forwarded onto Network N2 by RT2. The other\
    \ copy is sent to\n        Router RT10 (via RT6), where the datagram is again\
    \ split,\n        eventually to be delivered onto networks N6 and N11. Note that,\n\
    \        although multiple copies of the datagram are produced, the\n        datagram\
    \ itself is not modified (except for its IP TTL) as it is\n        forwarded.\
    \ No encapsulation of the datagram is performed; the\n        destination of the\
    \ datagram is always listed as the multicast\n        group A.\n    2.3.  MOSPF\
    \ forwarding mechanism\n        Each MOSPF router in the path of a multicast datagram\
    \ bases its\n        forwarding decision on the contents of a data cache. This\
    \ cache\n        is called the forwarding cache. There is a separate forwarding\n\
    \        cache entry for each source/destination combination[4].  Each\n     \
    \   cache entry indicates, for multicast datagrams having matching\n        source\
    \ and destination, which neighboring node (i.e., router or\n        network) the\
    \ datagram must be received from (called the upstream\n        node) and which\
    \ interfaces the datagram should then be forwarded\n        out of (called the\
    \ downstream interfaces).\n        A forwarding cache entry is actually built\
    \ from two component\n        pieces.  The first of these components is called\
    \ the local group\n        database. This database, built by the IGMP protocol,\
    \ indicates\n        the group membership of the router's directly attached networks.\n\
    \        The local group database enables the local delivery of multicast\n  \
    \      datagrams. The second component is the datagram's shortest path\n     \
    \   tree. This tree, built on demand, is rooted at a multicast\n        datagram's\
    \ source. The datagram's shortest path tree enables the\n        delivery of multicast\
    \ datagrams to distant (i.e., not directly\n        attached) group members.\n\
    \        2.3.1.  IGMP interface: the local group database\n            The local\
    \ group database keeps track of the group membership\n            of the router's\
    \ directly attached networks. Each entry in\n            the local group database\
    \ is a [group, attached network]\n            pair, which indicates that the attached\
    \ network has one or\n            more IP hosts belonging to the IP multicast\
    \ destination\n            group. This information is then used by the router\
    \ when\n            deciding which directly attached networks to forward a\n \
    \           received IP multicast datagram onto, in order to complete\n      \
    \      delivery of the datagram to (local) group members.\n            The local\
    \ group database is built through the operation of\n            the Internet Group\
    \ Management Protocol (IGMP; see [RFC\n            1112]). When a MOSPF router\
    \ becomes Designated Router on an\n            attached network (call the network\
    \ N1), it starts sending\n            periodic IGMP Host Membership Queries on\
    \ the network. Hosts\n            then respond with IGMP Host Membership Reports,\
    \ one for each\n            multicast group to which they belong. Upon receiving\
    \ a Host\n            Membership Report for a multicast group A, the router\n\
    \            updates its local group database by adding/refreshing the\n     \
    \       entry [Group A, N1]. If at a later time Reports for Group A\n        \
    \    cease to be heard on the network, the entry is then deleted\n           \
    \ from the local group database.\n            It is important to note that on\
    \ any particular network, the\n            sending of IGMP Host Membership Queries\
    \ and the listening to\n            IGMP Host Membership Reports is performed\
    \ solely by the\n            Designated Router. A MOSPF router ignores Host Membership\n\
    \            Reports received on those networks where the router has not\n   \
    \         been elected Designated Router[5].  This means that at most\n      \
    \      one router performs these IGMP functions on any particular\n          \
    \  network, and ensures that the network appears in the local\n            group\
    \ database of at most one router. This prevents\n            multicast datagrams\
    \ from being replicated as they are\n            delivered to local group members.\
    \ As a result, each router\n            in the Autonomous System has a different\
    \ local group\n            database. This is in contrast to the MOSPF link state\n\
    \            database, and the datagram shortest-path trees (see Section\n   \
    \         2.3.2), all of which are identical in each router belonging\n      \
    \      to the Autonomous System.\n            The existence of local group members\
    \ must be communicated to\n            the rest of the routers in the Autonomous\
    \ System. This\n            ensures that a remotely-originated multicast datagram\
    \ will\n            be forwarded to the router for distribution to its local\n\
    \            group members. This communication is accomplished through\n     \
    \       the creation of a group-membership-LSA. Like other link\n            state\
    \ advertisements, the group-membership-LSA is flooded\n            throughout\
    \ the Autonomous System. The router originates a\n            separate group-membership-LSA\
    \ for each multicast group\n            having one or more entries in the router's\
    \ local group\n            database. The router's group-membership-LSA (say for\
    \ Group\n            A) lists those local transit vertices (i.e., the router\n\
    \            itself and/or any directly connected transit networks) that\n   \
    \         should not be pruned from Group A's datagram shortest-path\n       \
    \     trees. The router lists itself in its group-membership-LSA\n           \
    \ for Group A if either 1) one or more of the router's\n            attached stub\
    \ networks contain Group A members or 2) the\n            router itself is a member\
    \ of Group A. The router lists a\n            directly connected transit network\
    \ in the group-membership-\n            LSA for Group A if both 1) the router\
    \ is Designated Router\n            on the network and 2) the network contains\
    \ one or more Group\n            A members.\n            Consider again the example\
    \ pictured in Figure 1. If Router\n            RT3 has been elected Designated\
    \ Router for Network N3, then\n            Table 1: lists the local group database\
    \ for the routers\n            RT1-RT4.\n            In this case, each of the\
    \ routers RT1, RT2 and RT3 will\n            originate a group-membership-LSA\
    \ for Group B. In addition,\n            RT2 will also be originating a group-membership-LSA\
    \ for\n            Group A. RT1 and RT2's group-membership-LSAs will list\n  \
    \          solely the routers themselves (N1 and N2 are stub networks).\n    \
    \        RT3's group-membership-LSA will list the transit Network N3.\n      \
    \      Figure 2 displays the Autonomous System's link state\n            database.\
    \ A router/transit network is labelled with a\n            multicast group if\
    \ (and only if) it has been mentioned in a\n            group-membership-LSA for\
    \ the group When building the\n            shortest-path tree for a particular\
    \ multicast datagram, this\n            labelling enables those branches without\
    \ group members to be\n            pruned from the tree. The process of building\
    \ a multicast\n            datagram's shortest path tree is discussed in Section\
    \ 2.3.2.\n            Note that none of the hosts in Figure 1 belonging to\n \
    \           multicast groups A and B show up explicitly in the link\n        \
    \    state database (see Figure 2).  In fact, looking at the link\n          \
    \  state database you cannot even determine which stub networks\n            \
    \     Router   local group database\n                 _____________________________________\n\
    \                 RT1      [Group B, N1]\n                 RT2      [Group A,\
    \ N2], [Group B, N2]\n                 RT3      [Group B, N3]\n              \
    \   RT4      None\n                 Table 1: Sample local group databases\n  \
    \                              **FROM**\n                 |RT|RT|RT|RT|RT|RT|RT|RT|RT|RT|RT|RT|\n\
    \                 |1 |2 |3 |4 |5 |6 |7 |8 |9 |10|11|12|N3|N6|N8|N9|\n        \
    \      ----- ---------------------------------------------\n              RT1|\
    \  |  |  |  |  |  |  |  |  |  |  |  |0 |  |  |  |\n              RT2|  |  |  |\
    \  |  |  |  |  |  |  |  |  |0 |  |  |  |\n              RT3|  |  |  |  |  |6 |\
    \  |  |  |  |  |  |0 |  |  |  |\n              RT4|  |  |  |  |8 |  |  |  |  |\
    \  |  |  |0 |  |  |  |\n              RT5|  |  |  |8 |  |6 |6 |  |  |  |  |  |\
    \  |  |  |  |\n              RT6|  |  |8 |  |7 |  |  |  |  |5 |  |  |  |  |  |\
    \  |\n              RT7|  |  |  |  |6 |  |  |  |  |  |  |  |  |0 |  |  |\n   \
    \       *   RT8|  |  |  |  |  |  |  |  |  |  |  |  |  |0 |  |  |\n          *\
    \   RT9|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |0 |\n          T  RT10| \
    \ |  |  |  |  |7 |  |  |  |  |  |  |  |0 |0 |  |\n          O  RT11|  |  |  |\
    \  |  |  |  |  |  |  |  |  |  |  |0 |0 |\n          *  RT12|  |  |  |  |  |  |\
    \  |  |  |  |  |  |  |  |  |0 |\n          *    N1|3 |  |  |  |  |  |  |  |  |\
    \  |  |  |  |  |  |  |\n               N2|  |3 |  |  |  |  |  |  |  |  |  |  |\
    \  |  |  |  |\n               N3|1 |1 |1 |1 |  |  |  |  |  |  |  |  |  |  |  |\
    \  |\n               N4|  |  |2 |  |  |  |  |  |  |  |  |  |  |  |  |  |\n   \
    \            N6|  |  |  |  |  |  |1 |1 |  |1 |  |  |  |  |  |  |\n           \
    \    N7|  |  |  |  |  |  |  |4 |  |  |  |  |  |  |  |  |\n               N8| \
    \ |  |  |  |  |  |  |  |  |3 |2 |  |  |  |  |  |\n               N9|  |  |  |\
    \  |  |  |  |  |1 |  |1 |1 |  |  |  |  |\n              N10|  |  |  |  |  |  |\
    \  |  |  |  |  |2 |  |  |  |  |\n              N11|  |  |  |  |  |  |  |  |3 |\
    \  |  |  |  |  |  |  |\n              N12|  |  |  |  |8 |  |2 |  |  |  |  |  |\
    \  |  |  |  |\n              N13|  |  |  |  |8 |  |  |  |  |  |  |  |  |  |  |\
    \  |\n              N14|  |  |  |  |8 |  |  |  |  |  |  |  |  |  |  |  |\n   \
    \           N15|  |  |  |  |  |  |9 |  |  |  |  |  |  |  |  |  |\n           \
    \    H1|  |  |  |  |  |  |  |  |  |  |  |10|  |  |  |  |\n                   \
    \  Figure 2: The MOSPF database.\n                 Networks and routers are represented\
    \ by vertices.\n                 An edge of cost X connects Vertex A to Vertex\
    \ B iff\n                 the intersection of Column A and Row B is marked\n \
    \                with an X. In addition, RT1, RT2 and N3 are labelled\n      \
    \           with multicast group A and RT1, N6 and RT9 are\n                 labelled\
    \ with multicast group B.\n            contain multicast group members. The link\
    \ state database\n            simply indicates those routers/transit networks\
    \ having\n            attached group members. This is all that is necessary for\n\
    \            successful forwarding of multicast datagrams.\n        2.3.2.  A\
    \ datagram's shortest-path tree\n            While the local group database facilitates\
    \ the local\n            delivery of multicast datagrams, the datagram's shortest-\n\
    \            path tree describes the intermediate hops taken by a\n          \
    \  multicast datagram as it travels from its source to the\n            individual\
    \ multicast group members. As mentioned above, the\n            datagram's shortest-path\
    \ tree is a pruned shortest-path tree\n            rooted at the datagram's source.\
    \ Two datagrams having\n            differing [source net, multicast destination]\
    \ pairs may\n            have, and in fact probably will have, different pruned\n\
    \            shortest-path trees.\n            A datagram's shortest path tree\
    \ is built \"on demand\"[6],\n            i.e., when the first multicast datagram\
    \ is received having a\n            particular [source net, multicast destination]\
    \ combination.\n            To build the datagram's shortest-path tree, the following\n\
    \            calculations are performed. First, the datagram's source IP\n   \
    \         network is located in the link state database. Then using\n        \
    \    the router-LSAs and network-LSAs in the link state database,\n          \
    \  a shortest-path tree is built having the source network as\n            root.\
    \ To complete the process, the branches that do not\n            contain routers/transit\
    \ networks that have been labelled\n            with the particular multicast\
    \ destination (via a group-\n            membership-LSA) are pruned from the tree.\n\
    \            As an example of the building of a datagram's shortest path\n   \
    \         tree, again consider the Autonomous System in Figure 1. The\n      \
    \      Autonomous System's link state database is pictured in\n            Figure\
    \ 2. When a router initially receives a multicast\n            datagram sent by\
    \ Host H2 to the multicast group A, the\n            following steps are taken:\
    \ Host H2 is first determined to be\n            on Network N4. Then the shortest\
    \ path tree rooted at net N4\n            is calculated[7], pruning those branches\
    \ that do not contain\n            routers/transit networks that have been labelled\
    \ with the\n            multicast group A. This results in the pruned shortest-path\n\
    \            tree pictured in Figure 3. Note that at this point all the\n    \
    \        leaves of the tree are routers/transit networks labelled\n          \
    \  with multicast group A (routers RT2 and RT9 and transit\n            Network\
    \ N6).\n            In order to forward the multicast datagram, each router must\n\
    \            find its own position in the datagram's shortest path tree.\n   \
    \                                    o RT3 (N4, origin)\n                    \
    \                  / \\\n                                    1/   \\8\n      \
    \                              /     \\\n                           N3 (Mb) o\
    \       o RT6\n                                  /         \\\n              \
    \                  0/           \\7\n                                /       \
    \      \\\n                   RT2 (Ma,Mb) o               o RT10\n           \
    \                                   / \\\n                                   \
    \         3/   \\1\n                                            /     \\\n   \
    \                                     N8 o       o N6 (Ma)\n                 \
    \                         /\n                                        0/\n    \
    \                                    /\n                                  RT11\
    \ o\n                                      /\n                               \
    \     1/\n                                    /\n                            \
    \    N9 o\n                                  /\n                             \
    \   0/\n                                /\n                      RT9 (Ma) o\n\
    \                 Figure 3: Sample datagram's shortest-path tree,\n          \
    \                source N4, destination Group A\n            The router's (call\
    \ it Router RTX) position in the datagram's\n            pruned shortest-path\
    \ tree consists of 1) RTX's parent in the\n            tree (this will be the\
    \ forwarding cache entry's upstream\n            node) and 2) the list of RTX's\
    \ interfaces that lead to\n            downstream routers/transit networks that\
    \ have been labelled\n            with the datagram's destination (these will\
    \ be added to the\n            forwarding cache entry as downstream interfaces).\
    \ Note that\n            after calculating the datagram's shortest path tree,\
    \ a\n            router may find that it is itself not on the tree. This\n   \
    \         would be indicated by a forwarding cache entry having no\n         \
    \   upstream node or an empty list of downstream interfaces.\n            As an\
    \ example of a router describing its position on the\n            datagram's shortest-path\
    \ tree, consider Router RT10 in\n            Figure 3. Router RT10's upstream\
    \ node for the datagram is\n            Router RT6, and there are two downstream\
    \ interfaces: one\n            connecting to Network N6 and the other connecting\
    \ to Network\n            N8.\n        2.3.3.  Support for Non-broadcast networks\n\
    \            When forwarding multicast datagrams over non-broadcast\n        \
    \    networks, the datagram cannot be sent as a link-level\n            multicast\
    \ (since neither link-level multicast nor broadcast\n            are supported\
    \ on these networks), but must instead be\n            forwarded separately to\
    \ specific neighbors. To facilitate\n            this, forwarding cache entries\
    \ can also contain downstream\n            neighbors as well as downstream interfaces.\n\
    \            The IGMP protocol is not defined over non-broadcast\n           \
    \ networks. For this reason, there cannot be group members\n            directly\
    \ attached to non-broadcast networks, nor do non-\n            broadcast networks\
    \ ever appear in local group database\n            entries.\n            As an\
    \ example, suppose that Network N3 in Figure 1 is an\n            X.25 PDN.  Consider\
    \ Router RT3's forwarding cache entry for\n            datagrams having source\
    \ Network N4 and multicast destination\n            Group B. In place of having\
    \ the interface to Network N3\n            appear as the downstream interface\
    \ in the matching\n            forwarding cache entry, the neighboring routers\
    \ RT1 and RT2\n            would instead appear as separate downstream neighbors.\
    \ In\n            addition, in this case there could not be a Group B member\n\
    \            directly attached to Network N3.\n        2.3.4.  Details concerning\
    \ forwarding cache entries\n            Each of the downstream interface/neighbors\
    \ in the cache\n            entry is labelled with a TTL value. This value indicates\
    \ the\n            number of hops a datagram forwarded out of the interface (or\n\
    \            forwarded to the neighbor) would have to travel before\n        \
    \    encountering a router/transit network requesting the\n            multicast\
    \ destination. The reason that a hop count is\n            associated with each\
    \ downstream interface/neighbor is so\n            that IP multicast's expanding\
    \ ring search procedure can be\n            more efficiently implemented. By expanding\
    \ ring search is\n            meant the following. Hosts can restrict the frowarding\n\
    \            extent of the IP multicast datagrams that they send by\n        \
    \    appropriate setting of the TTL value in the datagram's IP\n            header.\
    \  Then, for example, to search for the nearest server\n            the host can\
    \ send multicasts first with TTL set to 1, then\n            2, etc. By attaching\
    \ a hop count to each downstream\n            interface/neighbor in the forwarding\
    \ cache, datagrams will\n            not be forwarded unless they will ultimately\
    \ reach a\n            multicast destination before their TTL expires[8].  This\n\
    \            avoids wasting network bandwidth during an expanding ring\n     \
    \       search.\n            As an example consider Router RT10's forwarding cache\
    \ in\n            Figure 3.  Router RT10's cache entry has two downstream\n  \
    \          interfaces. The first, connecting to Network N6, is labelled\n    \
    \        as having a group member one hop away (Network N6). The\n           \
    \ second, which connects to Network N8, is labelled as having\n            a group\
    \ member two hops away (Router RT9).\n            Both the datagram shortest path\
    \ tree and the local group\n            database may contribute downstream interfaces\
    \ to the\n            forwarding cache entries. As an example, if a router has\
    \ a\n            local group database entry of [Group G, NX], then a\n       \
    \     forwarding cache entry for Group G, regardless of\n            destination,\
    \ will list the router interface to Network NX as\n            a downstream interface.\
    \ Such a downstream interface will\n            always be labelled with a TTL\
    \ of 1.\n            As an example of forwarding cache entries, again consider\n\
    \            the Autonomous System pictured in Figure 1. Suppose Host H2\n   \
    \         sends a multicast datagram to multicast group A. In that\n         \
    \   case, some routers will not even attempt to build a\n            forwarding\
    \ cache entry (e.g, router RT5) because they will\n            never receive the\
    \ multicast datagram in the first place.\n            Other routers will receive\
    \ the multicast datagram (since\n            they are forwarded as link-level\
    \ multicasts), but after\n            building the pruned shortest path tree will\
    \ notice that they\n            themselves are not a part of the tree (routers\
    \ RT1, RT4,\n            RT7, RT8 and RT12). These latter routers will install\
    \ an\n            empty cache entry, indicating that they do not participate\n\
    \            in the forwarding of the multicast datagram. A sample of the\n  \
    \          forwarding cache entries built by the other routers in the\n      \
    \      Autonomous System is pictured in Table 2.\n            A MOSPF router must\
    \ clear its entire forwarding cache when\n            the Autonomous System's\
    \ topology changes, because all the\n            datagram shortest-path trees\
    \ must be rebuilt. Likewise, when\n            the location of a multicast group's\
    \ membership changes\n            (reflected by a change in group-membership-LSAs),\
    \ all cache\n            entries associated with the particular multicast destination\n\
    \            group must be cleared. Other than these two cases,\n            forwarding\
    \ cache entries need not ever be deleted or\n            otherwise modified; in\
    \ particular, the forwarding cache\n            entries do not have to be aged.\
    \ However, forwarding cache\n            entries can be freely deleted after some\
    \ period of\n            inactivity (i.e., garbage collected), if router memory\n\
    \              Router   Upstream     Downstream interfaces\n                 \
    \      node         (interface:hops)\n              ___________________________________________\n\
    \              RT10     Router RT6   (N6:1), (N8:2)\n              RT11     Net\
    \ N8       (N9:1)\n              RT3      Net N4       (N3:1), (RT6:3)\n     \
    \         RT6      Router RT3   (RT10:2)\n              RT2      Net N3      \
    \ (N2:1)\n               Table 2: Sample forwarding cache entries,\n         \
    \        for source N4 and destination Group A.\n            resources are in\
    \ short supply.\n"
- title: 3.  Inter-area multicasting
  contents:
  - "3.  Inter-area multicasting\n    Up to this point this memo has discussed multicast\
    \ forwarding when\n    the entire Autonomous System is a single OSPF area. The\
    \ logic for\n    when the multicast datagram's source and its destination group\n\
    \    members belong to the same OSPF area is the same. This section\n    explains\
    \ the behavior of the MOSPF protocol when the datagram's\n    source and (at least\
    \ some of) its destination group members belong\n    to different OSPF areas.\
    \ This situation is called inter-area\n    multicast.\n    Inter-area multicast\
    \ brings up the following issues, which are\n    resolved in succeeding sections:\n\
    \    o   Are the group-membership-LSAs specific to a single area? And if\n   \
    \     they are, how is group membership information conveyed from one\n      \
    \  area to the next?\n    o   How are the datagram shortest-path trees built in\
    \ the inter-area\n        case, since complete information concerning the topology\
    \ of the\n        datagram source's neighborhood is not available to routers in\n\
    \        other areas?\n    o   In an area border router, multiple datagram shortest-path\
    \ trees\n        are built, one for each attached area. How are these separate\n\
    \        datagram shortest-path trees combined into a single forwarding\n    \
    \    cache entry?\n    It should be noted in the following that the basic protocol\n\
    \    mechanisms in the inter-area case are the same as for the intra-area\n  \
    \  case.  Forwarding of multicasts is still defined by the contents of\n    the\
    \ forwarding cache. The forwarding cache is still built from the\n    same two\
    \ components: the local group database and the datagram\n    shortest-path trees.\
    \ And while the calculation of the datagram\n    shortest-path trees is different\
    \ in the inter-area case (see Section\n    3.2), the local group database is built\
    \ exactly the same as in the\n    intra-area case (i.e., MOSPF's interface with\
    \ IGMP remains unchanged\n    in the presence of areas). Finally, the forwarding\
    \ algorithm\n    described in Section 11 is the same for both the intra-area and\n\
    \    inter-area cases.\n    The following discussion uses the area configuration\
    \ pictured in\n    Figure 4 as an example. This figure, taken from the OSPF\n\
    \    specification, shows an Autonomous System split into three areas\n    (Area\
    \ 1, Area 2 and Area 3). A single backbone area has been\n    configured (everything\
    \ outside of the shading). Since the backbone\n    area must be contiguous, a\
    \ single virtual link has been configured\n    between the area border routers\
    \ RT10 and RT11. Additionally, an area\n    address range has been configured\
    \ in Router RT11 so that Networks\n    N9-N11 and Host H1 will be reported as\
    \ a single route outside of\n    Area 3 (via summary-link-LSAs).\n    3.1.  Extent\
    \ of group-membership-LSAs\n        Group-membership-LSAs are specific to a single\
    \ OSPF area. This\n        means that, just as with OSPF router-LSAs, network-LSAs\
    \ and\n        summary-link-LSAs, a group-membership-LSA is flooded throughout\n\
    \        a single area only[9].  A router attached to multiple areas\n       \
    \ (i.e., an area border router) may end up originating several\n        group-membership-LSAs\
    \ concerning a single multicast destination,\n        one for each attached area.\
    \  However, as we will see below, the\n        contents of these group-membership-LSAs\
    \ will vary depending on\n        their associated areas.\n        Just as in\
    \ OSPF, each MOSPF area has its own link state\n        database. The MOSPF database\
    \ is simply the OSPF link state\n        database enhanced by the group-membership-LSAs.\
    \ Consider again\n        the area configuration pictured in Figure 4. The result\
    \ of\n        adding the group-membership-LSAs to the area databases yields\n\
    \        the databases pictured in Figures 6 and 7.  Figure 6 shows Area\n   \
    \     1's MOSPF database. Figure 7 shows the backbone's MOSPF\n        database.\
    \ Superscripts indicate which transit vertices have been\n        advertised as\
    \ requesting particular multicast destinations. A\n        superscript of \"w\"\
    \ indicates that the router is advertising\n        itself as a wild-card multicast\
    \ receiver (see below). The dashed\n        lines are OSPF summary-link-LSAs or\
    \ AS external-link-LSAs. Note\n        in Figure 7 that Router RT11 has condensed\
    \ its routes to\n        Networks N9-N11 and Host H1 into a single summary-link-LSA.\n\
    \           ..................................\n           .     +           \
    \               .\n           .     | 3+---+    +--+  +--+     . N12      N14\n\
    \           .   N1|--|RT1|\\1  |Mb|  |H4|     .   \\ N13 /\n           .    _|\
    \  +---+ \\  +--+ /+--+     .   8\\ |8/8\n           .   | +         \\ _|__/\
    \          .     \\|/\n           . +--+   +--+    /    \\   1+---+8.   8+---+6\n\
    \           . |Mb|   |Mb|   *  N3  *---|RT4|------|RT5|--------+\n           .\
    \ +--+  /+--+    \\____/    +---+ .    +---+        |\n           .      +   \
    \      /   |           .      |7         |\n           .      | 3+---+ /    |\
    \           .      |          |\n           .    N2|--|RT2|/1    |1          .\
    \      |6         |\n           .    __|  +---+    +---+8        .   6+---+  \
    \      |\n           .   |  +           |RT3|--------------|RT6|        |\n  \
    \         . +--+    +--+     +---+     +--+.    +---+        |\n           . |Ma|\
    \    |H3|_      |2     _|H2|.    Ia|7         |\n           . +--+    +--+ \\\
    \     |     / +--+.      |          |\n           .               +---------+\
    \      .      |          |\n           .Area 1             N4           .    \
    \  |          |\n           ..................................      |        \
    \  |\n           ................................        |          |\n      \
    \     .           N11                .        |          |\n           .     \
    \  +---------+            .        |          |\n           .            |   \
    \  \\           .        |          |    N12\n           .            |3     +--+\
    \       .        |          |6 2/\n           .          +---+    |Ma|       .\
    \        |        +---+/\n           .          |RT9|    +--+       .        |\
    \        |RT7|---N15\n           .          +---+               .......  |   \
    \     +---+ 9\n           .            |1                .. +  ...|..........|1........\n\
    \           .           _|__               .. |   Ib|5       __|_   +--+.\n  \
    \         .          /    \\      1+----+2.. |  3+----+1   /    \\--|Ma|.\n  \
    \         .         *  N9  *------|RT11|----|---|RT10|---*  N6  * +--+.\n    \
    \       .          \\____/       +----+ .. |   +----+    \\____/      .\n    \
    \       .            |            !*******|*****!          |        .\n      \
    \     .            |1           Virtual + Link           |1       .\n        \
    \   . +--+   10+----+              ..N8              +---+      .\n          \
    \ . |H1|-----|RT12|              ..                |RT8|      .\n           .\
    \ +--+SLIP +----+              ..                +---+  +--+.\n           .  \
    \          |2                ..                  |4  _|H5|.\n           .    \
    \        |                 ..                  |  / +--+.\n           .      \
    \ +---------+            ..              +--------+   .\n           .        \
    \   N10          Area 3..Area 2            N7       .\n           .............................................................\n\
    \                    Figure 4: A sample MOSPF area configuration\n        Suppose\
    \ an OSPF router has a local group database entry for\n        [Group Y, Network\
    \ X]. The router then originates a group-\n        membership-LSA for Group Y\
    \ into the area containing Network X.\n        For example, in the area configuration\
    \ pictured in Figure 4,\n        Router RT1 originates a group-membership-LSA\
    \ for Group B. This\n        group-membership-LSA is flooded throughout Area 1,\
    \ and no\n        further. Likewise, assuming that Router RT3 has been elected\n\
    \        Designated Router for Network N3, RT3 originates a group-\n        membership-LSA\
    \ into Area 1 listing the transit Network N3 as\n        having group members.\
    \ Note that in the link state database for\n        Area 1 (Figure 6) both Router\
    \ RT1 and Network N3 have\n        accordingly been labelled with Group B.\n \
    \       In OSPF, the area border routers forward routing information and\n   \
    \     data traffic between areas. In MOSPF. a subset of the area\n        border\
    \ routers, called the inter-area multicast forwarders,\n        forward group\
    \ membership information and multicast datagrams\n        between areas. Whether\
    \ a given OSPF area border router is also a\n        MOSPF inter-area multicast\
    \ forwarder is configuration dependent\n        (see Section B.1). In Figure 4\
    \ we assume that all area border\n        routers are also inter-area multicast\
    \ forwarders.\n        In order to convey group membership information between\
    \ areas,\n        inter-area multicast forwarders \"summarize\" their attached\n\
    \        areas' group membership to the backbone. This is very similar\n     \
    \   functionality to the summary-link-LSAs that are generated in the\n       \
    \ base OSPF protocol.  An inter-area multicast forwarder\n        calculates which\
    \ groups have members in its attached non-\n        backbone areas. Then, for\
    \ each of these groups, the inter-area\n        multicast forwarder injects a\
    \ group-membership-LSA into the\n        backbone area. For example, in Figure\
    \ 4 there are two groups\n        having members in Area 1: Group A and Group\
    \ B. For that reason,\n        both of Area 1's inter-area multicast forwarders\
    \ (Routers RT3\n        and RT4) inject group-membership-LSAs for these two groups\
    \ into\n        the backbone.  As a result both of these routers are labelled\n\
    \                membership    +------------------+   datagrams\n            \
    \        + > > > >>|     Backbone     |< < < < +\n                    ^      \
    \   +------------------+        ^\n                    ^        /         |  \
    \        \\       ^\n                    ^       /          |           \\   \
    \   ^\n               +----^-----+/      +----------+      \\+----^-----+\n  \
    \             |  Area 1  |       |  Area 2  |       |  Area 3  |\n           \
    \    +----------+       +----------+       +----------+\n                    Figure\
    \ 5: Inter-area routing architecture\n        with Groups A and B in the backbone\
    \ link state database (see\n        Figure 7).\n        However, unlike the summarization\
    \ of unicast destinations in the\n        base OSPF protocol, the summarization\
    \ of group membership in\n        MOSPF is asymmetric. While a non-backbone area's\
    \ group\n        membership is summarized to the backbone, this information is\n\
    \        not then readvertised into other non-backbone areas. Nor is the\n   \
    \     backbone's group membership summarized for the non-backbone\n        areas.\
    \ Going back to the example in Figure 4, while the presence\n        of Area 3's\
    \ group (Group A) is advertised to the backbone, this\n        information is\
    \ not then redistributed to Area 1. In other words,\n        routers internal\
    \ to Area 1 have no idea of Area 3's group\n        membership.\n        At this\
    \ point, if no extra functionality was added to MOSPF,\n        multicast traffic\
    \ originating in Area 1 destined for Multicast\n        Group A would never be\
    \ forwarded to those Group A members in\n        Area 3. To accomplish this, the\
    \ notion of wild-card multicast\n        receivers is introduced. A wild-card\
    \ multicast receiver is a\n        router to which all multicast traffic, regardless\
    \ of multicast\n        destination, should be forwarded. A router's wild-card\
    \ multicast\n        reception status is per-area. In non-backbone areas, all\
    \ inter-\n        area multicast forwarders[10] are wild-card multicast receivers.\n\
    \        This ensures that all multicast traffic originating in a non-\n     \
    \   backbone area will be forwarded to its inter-area multicast\n        forwarders,\
    \ and hence to the backbone area. Since the backbone\n        has complete knowledge\
    \ of all areas' group membership, the\n        datagram can then be forwarded\
    \ to all group members. Note that\n        in the backbone itself there is no\
    \ need for wild-card multicast\n        receivers[11].  As an example, note that\
    \ Routers RT3 and RT4 are\n        wild-card multicast receivers in Area 1 (see\
    \ Figure 6), while\n        there are none in the backbone (see Figure 7).\n \
    \       This yields the inter-area routing architecture pictured in\n        Figure\
    \ 5.  All group membership is advertised by the non-\n        backbone areas into\
    \ the backbone. Likewise, all IP multicast\n        traffic arising in the non-backbone\
    \ areas is forwarded to the\n        backbone. Since at this point group membership\
    \ information meets\n        the multicast datagram traffic, delivery of the multicast\n\
    \        datagrams becomes possible.\n    3.2.  Building inter-area datagram shortest-path\
    \ trees\n        When building datagram shortest-path trees in the presence of\n\
    \        areas, it is often the case that the source of the datagram and\n   \
    \     (at least some of) the destination group members are in separate\n     \
    \   areas. Since detailed topological information concerning one\n           \
    \                       **FROM**\n                             |RT|RT|RT|RT|RT|RT|\n\
    \                             |1 |2 |3 |4 |5 |7 |N3|\n                       \
    \   ----- -------------------\n                          RT1|  |  |  |  |  | \
    \ |0 |\n                          RT2|  |  |  |  |  |  |0 |\n                \
    \          RT3|  |  |  |  |  |  |0 |\n                      *   RT4|  |  |  |\
    \  |  |  |0 |\n                      *   RT5|  |  |14|8 |  |  |  |\n         \
    \             T   RT7|  |  |20|14|  |  |  |\n                      O    N1|3 |\
    \  |  |  |  |  |  |\n                      *    N2|  |3 |  |  |  |  |  |\n   \
    \                   *    N3|1 |1 |1 |1 |  |  |  |\n                          \
    \ N4|  |  |2 |  |  |  |  |\n                        Ia,Ib|  |  |15|22|  |  | \
    \ |\n                           N6|  |  |16|15|  |  |  |\n                   \
    \        N7|  |  |20|19|  |  |  |\n                           N8|  |  |18|18|\
    \  |  |  |\n                    N9-N11,H1|  |  |19|16|  |  |  |\n            \
    \              N12|  |  |  |  |8 |2 |  |\n                          N13|  |  |\
    \  |  |8 |  |  |\n                          N14|  |  |  |  |8 |  |  |\n      \
    \                    N15|  |  |  |  |  |9 |  |\n                     Figure 6:\
    \ Area 1's MOSPF database.\n             Networks and routers are represented\
    \ by vertices.\n             An edge of cost X connects Vertex A to Vertex B iff\n\
    \             the intersection of Column A and Row B is marked\n             with\
    \ an X. In addition, RT1, RT2 and N3 are labelled\n             with multicast\
    \ group A, RT1 is labelled with multicast\n             group B, and both RT3\
    \ and RT4 are labelled as\n             wild-card multicast receivers.\n     \
    \                            **FROM**\n                           |RT|RT|RT|RT|RT|RT|RT\n\
    \                           |3 |4 |5 |6 |7 |10|11|\n                        ------------------------\n\
    \                        RT3|  |  |  |6 |  |  |  |\n                        RT4|\
    \  |  |8 |  |  |  |  |\n                        RT5|  |8 |  |6 |6 |  |  |\n  \
    \                      RT6|8 |  |7 |  |  |5 |  |\n                        RT7|\
    \  |  |6 |  |  |  |  |\n                    *  RT10|  |  |  |7 |  |  |2 |\n  \
    \                  *  RT11|  |  |  |  |  |3 |  |\n                    T    N1|4\
    \ |4 |  |  |  |  |  |\n                    O    N2|4 |4 |  |  |  |  |  |\n   \
    \                 *    N3|1 |1 |  |  |  |  |  |\n                    *    N4|2\
    \ |3 |  |  |  |  |  |\n                         Ia|  |  |  |  |  |5 |  |\n   \
    \                      Ib|  |  |  |7 |  |  |  |\n                         N6|\
    \  |  |  |  |1 |1 |3 |\n                         N7|  |  |  |  |5 |5 |7 |\n  \
    \                       N8|  |  |  |  |4 |3 |2 |\n                  N9-N11,H1|\
    \  |  |  |  |  |  |1 |\n                        N12|  |  |8 |  |2 |  |  |\n  \
    \                      N13|  |  |8 |  |  |  |  |\n                        N14|\
    \  |  |8 |  |  |  |  |\n                        N15|  |  |  |  |9 |  |  |\n  \
    \               Figure 7: The backbone's MOSPF database.\n             Networks\
    \ and routers are represented by vertices.\n             An edge of cost X connects\
    \ Vertex A to Vertex B iff\n             the intersection of Column A and Row\
    \ B is marked\n             with an X. In addition, RT3 and RT4 are labelled\n\
    \             with both multicast groups A and B, and RT7, RT10,\n           \
    \  and RT11 are labelled with multicast group A.\n        OSPF area is not distributed\
    \ to other OSPF areas (the flooding\n        of router-LSAs, network-LSAs and\
    \ group-membership-LSAs is\n        restricted to a single OSPF area only), the\
    \ building of complete\n        datagram shortest-path trees is often impossible\
    \ in the inter-\n        area case. To compensate, approximations are made through\
    \ the\n        use of wild-card multicast receivers and OSPF summary-link-LSAs.\n\
    \        When it first receives a datagram for a particular [source net,\n   \
    \     destination group] pair, a router calculates a separate datagram\n     \
    \   shortest-path tree for each of the router's attached areas. Each\n       \
    \ datagram shortest-path tree is built solely from LSAs belonging\n        to\
    \ the particular area's link state database. Suppose that a\n        router is\
    \ calculating a datagram shortest-path tree for Area A.\n        It is useful\
    \ then to separate out two cases.\n        The first case, Case 1: The source\
    \ of the datagram belongs to\n        Area A has already been described in Section\
    \ 2.3.2. However, in\n        the presence of OSPF areas, during tree pruning\
    \ care must be\n        taken so that the branches leading to other areas remain,\
    \ since\n        it is unknown whether there are group members in these (remote)\n\
    \        areas. For this reason, only those branches having no group\n       \
    \ members nor wild-card multicast receivers are pruned when\n        producing\
    \ the datagram shortest-path tree.\n        As an example, suppose in Figure 4\
    \ that Host H2 sends a\n        multicast datagram to destination Group A. Then\
    \ the datagram's\n        shortest-path tree for Area 1, built identically by\
    \ all routers\n        in Area 1 that receive the datagram, is shown in Figure\
    \ 8. Note\n        that both inter-area multicast forwarders (RT3 and RT4) are\
    \ on\n        the datagram's shortest-path tree, ensuring the delivery of the\n\
    \        datagram to the backbone and from there to Areas 2 and 3.\n        o\
    \   Case 2: The source of the datagram belongs to an area other\n            than\
    \ Area A. In this case, when building the datagram\n            shortest-path\
    \ tree for Area A, the immediate neighborhood of\n            the datagram's source\
    \ is unknown. However, there are\n            summary-link-LSAs in the Area A\
    \ link state database\n            indicating the cost of the paths between each\
    \ of Area A's\n            inter-area multicast forwarders and the datagram source.\n\
    \            These summary links are used to approximate the neighborhood\n  \
    \          of the datagram's source; the tree begins with links\n            directly\
    \ connecting the source to each of the inter-area\n            multicast forwarders.\
    \ These links point in the reverse\n                                      o RT3\
    \ (W, origin=N4)\n                                      |\n                  \
    \                   1|\n                                      |\n            \
    \                  N3 (Mb) o\n                                     / \\\n    \
    \                               0/   \\0\n                                   /\
    \     \\\n                      RT2 (Ma,Mb) o       o RT4 (W)\n              \
    \      Figure 8: Datagram's shortest-path tree,\n                      Area 1,\
    \ source N4, destination Group A\n            direction (towards instead of away\
    \ from the datagram source)\n            from the links considered in Case 1 above.\
    \ All additional\n            links added to the tree also point in the reverse\
    \ direction.\n            The final datagram shortest-path tree is then produced\
    \ by,\n            as before, pruning all branches having no group-members nor\n\
    \            wild-card multicast receivers.\n            As an example, suppose\
    \ again that Host H2 in Figure 4 sends\n            a multicast datagram to destination\
    \ Group A. The datagram's\n            shortest-path tree for the backbone is\
    \ shown in Figure 9.\n            The neighborhood around the source (Network\
    \ N4) has been\n            approximated by the summary links advertised by routers\
    \ RT3\n            and RT4. Note that all links in Figure 9's datagram\n     \
    \       shortest-path tree have arrows pointing in the reverse\n            direction,\
    \ towards Network N4 instead of away from it.\n        The reverse costs used\
    \ for the entire tree in Case 2 are forced\n        because summary-link-LSAs\
    \ only specify the cost towards the\n        datagram source. In the presence\
    \ of asymmetric link costs, this\n        may lead to less efficient routes when\
    \ forwarding multicasts\n                                     o N4\n         \
    \                           / \\\n                                  2/   \\3\n\
    \                                  /     \\\n                     RT3 (Ma,Mb)\
    \ o       o RT4 (Ma,Mb)\n                                /         \\\n      \
    \                        6/           \\8\n                              /   \
    \          \\\n                         RT6 o               o RT5\n          \
    \                   |               |\n                            5|        \
    \       |6\n                             |               |\n                 \
    \  RT10 (Ma) o               o RT7 (Ma)\n                             |\n    \
    \                        2|\n                             |\n                \
    \   RT11 (Ma) o\n               Figure 9: Datagram shortest-path tree: Backbone,\n\
    \                  source N4, destination Group A. Note that\n               \
    \   reverse costs (i.e., toward origin) are\n                             used\
    \ throughout.\n        between areas.\n        Those routers attached to multiple\
    \ areas must calculate multiple\n        trees and then merge them into a single\
    \ forwarding cache entry.\n        As shown in Section 2.3.2, when connected to\
    \ a single area the\n        router's position on the datagram shortest-path tree\
    \ determines\n        (in large part) its forwarding cache entry. When attached\
    \ to\n        multiple areas, and hence calculating multiple datagram\n      \
    \  shortest-path trees, each tree contributes to the forwarding\n        cache\
    \ entry's list of downstream interfaces/neighbors. However,\n        only one\
    \ of the areas' datagram shortest-path trees will\n        determine the forwarding\
    \ cache entry's upstream node. When one\n        of the attached areas contains\
    \ the datagram source, that area\n        will determine the upstream node. Otherwise,\
    \ the tiebreaking\n        rules of Section 12.2.7 are invoked.\n        Consider\
    \ again the example of Host H2 in Figure 4 sending a\n        multicast datagram\
    \ to destination Group A. Router RT3 will\n        calculate two datagram shortest-path\
    \ trees, one for Area 1 and\n        one for the backbone.  Since the source of\
    \ the datagram (Host\n        H2) belongs to Area 1, the Area 1 datagram shortest-path\
    \ tree\n        determines RT3's upstream node: Network N4. Router RT3\n     \
    \   calculates two downstream interfaces for the datagram: the\n        interface\
    \ to Network N3 (which comes from Area 1's datagram\n        shortest-path tree)\
    \ and the serial line to Router RT6 (which\n        comes from the backbone's\
    \ datagram shortest-path tree). As for\n        Router RT10, it calculates two\
    \ trees, determining its upstream\n        node from the backbone tree and its\
    \ two downstream interfaces\n        from the Area 2 tree.  Finally, Router RT11\
    \ calculates three\n        trees, determining its upstream node from the Area\
    \ 2 tree and\n        its downstream interface from the Area 3 tree.\n"
- title: 4.  Inter-AS multicasting
  contents:
  - "4.  Inter-AS multicasting\n    This section explains how MOSPF deals with the\
    \ forwarding of\n    multicast datagrams between Autonomous Systems. Certain AS\
    \ boundary\n    routers in a MOSPF system will be configured as inter-AS multicast\n\
    \    forwarders. It is assumed that these routers will also be running an\n  \
    \  inter-AS multicast routing protocol. This specification does not\n    dictate\
    \ the operation of such an inter-AS multicast routing\n    protocol. However,\
    \ the following interactions between MOSPF and the\n    inter-AS routing protocol\
    \ are assumed:\n    (1) MOSPF guarantees that the inter-AS multicast forwarders\
    \ will\n        receive all multicast datagrams; but it is up to each router so\n\
    \        designated to determine whether the datagram should be forwarded\n  \
    \      to other Autonomous Systems. This determination will probably be\n    \
    \    made via the inter-AS routing protocol.\n    (2) MOSPF assumes that the inter-AS\
    \ routing protocol is forwarding\n        multicast datagrams in an RPF (reverse\
    \ path forwarding; see\n        [Deering] for an explanation of this terminology)\
    \ fashion. In\n        other words, it is assumed that a multicast datagram whose\n\
    \        source (call it X) lies outside the MOSPF domain will enter the\n   \
    \     MOSPF domain at those points that are advertising (into OSPF)\n        the\
    \ best routes back to X. MOSPF calculates the path of the\n        datagram through\
    \ the MOSPF domain based on this assumption.\n    MOSPF designates an inter-AS\
    \ multicast forwarder as a wild-card\n    multicast receiver in all of its attached\
    \ areas. As in the inter-\n    area case, this ensures that the routers remain\
    \ on all pruned\n    shortest-path trees and thereby receive all multicast datagrams,\n\
    \    regardless of destination.\n    As an example, suppose that in Figure 1 both\
    \ RT5 and RT7 were\n    configured as inter-AS multicast forwarders. Then the\
    \ link state\n    database would look like the one pictured in Figure 2, with\
    \ the\n    addition of a) wild-card status for RT5 and RT7 (they would appear\n\
    \    with superscripts of \"w\") and b) the external links originated by\n   \
    \ RT5 and RT7 being labelled as multicast-capable[12].\n    As another example,\
    \ consider the area configuration in Figure 4.\n    Again suppose RT5 and RT7\
    \ are configured as inter-AS multicast\n    forwarders. Then in Area 1's link\
    \ state database (Figure 6), the\n    external links originated by RT5 and RT7\
    \ would again be labelled as\n    multicast-capable. However, note that in Area\
    \ 1's database RT5 and\n    RT7 are not labelled as wild-card multicast receivers.\
    \ This is\n    unnecessary; since Area 1's inter-area multicast forwarders (RT3\
    \ and\n    RT4) are wild-cards, all multicast datagrams will be forwarded to\n\
    \    the backbone. And in the backbone's link state database (Figure 7),\n   \
    \ RT5 and RT7 will be labelled as wild-cards.\n    4.1.  Building inter-AS datagram\
    \ shortest-path trees.\n        When multicast datagrams are to be forwarded between\
    \ Autonomous\n        Systems, the datagram shortest-path tree is built as follows.\n\
    \        Remember that the router builds a separate tree for each area to\n  \
    \      which it is attached; these trees are then merged into a single\n     \
    \   forwarding cache entry. Suppose that the router is building the\n        tree\
    \ for Area A. We break up the tree building into three cases.\n        This first\
    \ two cases have already been described earlier in this\n        memo: Case 1\
    \ (the source of the datagram belongs to Area A)\n        having been described\
    \ in Section 2.3.2 and Case 2 (the source of\n        the datagram belongs to\
    \ another OSPF area) having been described\n        in Section 3.2. The only modification\
    \ to these cases is that\n        inter-AS multicast forwarders, as well as group\
    \ members and\n        inter-area multicast forwarders, must remain on the pruned\n\
    \        trees.  The new case is as follows:\n        o   Case 3: The source of\
    \ the datagram belongs to another\n            Autonomous System. The immediate\
    \ neighborhood of the source\n            is then unknown. In this case the multicast-capable\
    \ AS\n            external links are used to approximate the neighborhood of\n\
    \            the source; the tree begins with links directly attaching\n     \
    \       the source to one or more inter-AS multicast forwarders. The\n       \
    \     approximating AS external links point in the reverse\n            direction\
    \ (i.e., towards the source), just as with the\n            approximating summary\
    \ links in Case 2. Also, as in Case 2,\n            all links included in the\
    \ tree must point in the reverse\n            direction. The final datagram shortest-path\
    \ tree is then\n            produced (as always) by pruning those branches having\
    \ no\n            group members nor wild-card multicast receivers.\n         \
    \   As an example, suppose that a host on Network N12 (see\n            Figure\
    \ 4) originates a multicast datagram for Destination\n            Group B. Assume\
    \ that all external costs pictured are OSPF\n            external type 1 metrics.\
    \ Then any routers in Area 1\n            receiving the datagram would build the\
    \ datagram shortest-\n            path tree pictured in Figure 10. Note that all\
    \ links in the\n            tree point in the reverse direction, towards the source.\
    \ The\n            tree indicates that the routers expect the datagram to enter\n\
    \            the Autonomous System at Router RT7, and then to enter the\n    \
    \        area at Router RT4.\n            Note that in those cases where the \"\
    best\" inter-AS multicast\n            forwarder is not directly attached to the\
    \ area, the\n            neighborhood of the source is actually approximated by\
    \ the\n            concatenation of a summary link and a multicast-capable AS\n\
    \            external link. This is in fact the case in Figure 10.\n        In\
    \ Case 3 (datagram source in another AS) the requirement that\n        all tree\
    \ links point in the reverse direction (towards the\n        source) accommodates\
    \ the fact that summary links and AS external\n        links already point in\
    \ the reverse direction. This also leads to\n        the requirement that the\
    \ inter-AS multicast routing protocol\n        operate in a reverse path forwarding\
    \ fashion (see condition 2 of\n        Section 4). Note that Reverse path forwarding\
    \ can lead to sub-\n        optimal routing when costs are configured asymmetrically.\
    \ And it\n        can even lead to non-delivery of multicast datagrams in the\
    \ case\n        of asymmetric reachability.\n        Inter-AS multicast forwarders\
    \ may end up calculating a\n        forwarding cache entry's upstream node as\
    \ being external to the\n        AS. As an example, Router RT7 in Figure 10 will\
    \ end up\n        calculating an external router (via its external link to Network\n\
    \                                     o N12\n                                \
    \     |\n                                    2|\n                            \
    \         |\n                                     o RT7\n                    \
    \                 |\n                                   14|\n                \
    \                     |\n                                     o RT4 (W)\n    \
    \                                 |\n                                    0|\n\
    \                                     |\n                                    \
    \ o N3 (Mb)\n                                    /|\\\n                      \
    \             / | \\\n                                 1/  | 1\\\n           \
    \                      /  1|   \\\n                                /    |    \\\
    \n                      RT1 (Mb) o     |     o RT3 (W)\n                     \
    \                o\n                                RT2 (Ma,Mb)\n            \
    \   Figure 10: Datagram shortest-path tree: Area 1,\n                 source N12,\
    \ destination Group B. Note that\n                  reverse costs (i.e., toward\
    \ origin) are\n                             used throughout.\n        N12) as\
    \ the upstream node for the datagram. This means that RT7\n        must receive\
    \ the datagram from a router in another AS before\n        injecting the datagram\
    \ into the MOSPF system.\n    4.2.  Stub area behavior\n        AS external links\
    \ are not imported into stub areas. Suppose that\n        the source of a particular\
    \ datagram lies outside of the\n        Autonomous System, and that the datagram\
    \ is forwarded into a\n        stub area. In the stub area's datagram shortest-path\
    \ tree the\n        neighborhood of the datagram's source cannot be approximated\
    \ by\n        AS external links. Instead the neighborhood of the source is\n \
    \       approximated by the default summary links (see Section 3.6 of\n      \
    \  [OSPF]) that are originated by the stub area's intra-area\n        multicast\
    \ forwarders.\n        Except for this small change to the construction of a stub\n\
    \        area's datagram shortest-path trees, all other MOSPF algorithms\n   \
    \     (e.g., merging with other areas' datagram shortest-path trees to\n     \
    \   form the forwarding cache) function the same for stub areas as\n        they\
    \ do for non-stub areas.\n    4.3.  Inter-AS multicasting in a core Autonomous\
    \ System\n        It may be the case that the MOSPF routing domain connects\n\
    \        together many different Autonomous Systems, thereby serving as a\n  \
    \      \"core Autonomous System\" (e.g, the old NSFNet backbone). In this\n  \
    \      case, it could very well be that the majority of the MOSPF\n        routers\
    \ are also inter-AS multicast forwarders. Having each\n        inter-AS multicast\
    \ forwarder then declare itself a wild-card\n        multicast receiver could\
    \ very well waste considerable network\n        bandwidth. However, as an alternative\
    \ to declaring themselves\n        wild-card multicast receivers, the inter-AS\
    \ multicast routers\n        could instead explicitly advertise all groups that\
    \ they were\n        interested in forwarding (to other \"client\" Autonomous\
    \ Systems)\n        in group-membership-LSAs. These advertised groups would have\
    \ to\n        be learned through an inter-AS multicast routing protocol (or\n\
    \        possibly even statically configured).\n        This in essence allows\
    \ the clients of the core Autonomous System\n        to advertise their group\
    \ membership into the core. However,\n        since any client MOSPF domains will\
    \ still have their inter-AS\n        multicast forwarders configured as wild-card\
    \ multicast\n        receivers, this advertisement will be asymmetric: the core\
    \ will\n        not advertise its or others' group membership to the clients.\n\
    \        The achieves the same inter-AS multicast routing architecture\n     \
    \   that MOSPF uses for inter-area multicast routing (see Figure 5).\n"
- title: 5.  Modelling internal group membership
  contents:
  - "5.  Modelling internal group membership\n    A MOSPF router may itself contain\
    \ multicast applications. A typical\n    example of this is a UNIX workstation\
    \ that doubles as a multicast\n    router. This section concerns two alternative\
    \ ways of representing\n    the group membership of the MOSPF router's internal\
    \ applications.\n    Both representations have advantages. For maximum flexibility,\
    \ the\n    MOSPF forwarding algorithm (see Section 11) has been specified so\n\
    \    that either representation can be used in a MOSPF router (and in\n    fact,\
    \ both representations can be used at once, depending on the\n    application).\n\
    \    The first representation is based on the paradigm presented in RFC\n    1112.\
    \ In this case, an application joins a multicast group on one or\n    more specific\
    \ physical interfaces. The application then receives a\n    multicast datagram\
    \ if and only if it is received on one of the\n    specified interfaces. If a\
    \ datagram is received on multiple\n    specified interfaces, the application\
    \ receives multiple copies.\n    Figure 11 shows this algorithm as it is implemented\
    \ in (modified)\n    BSD UNIX kernels.  The figure shows the processing of a multicast\n\
    \    datagram, starting with its reception on a particular interface.\n    First\
    \ copies of the datagram are given to those applications that\n    have joined\
    \ on the receiving interface. Then the forwarding decision\n    (pictured as a\
    \ box containing a question mark) is made, and the\n    packet is (possibly) forwarded\
    \ out certain interfaces. If these\n    interfaces are not capable of receiving\
    \ their own multicasts, a copy\n    of the datagram must be internally looped\
    \ back to appropriately\n    joined applications.\n    The advantages to the RFC\
    \ 1112 representation are as follows:\n    o   It is the standard for the way\
    \ an IP host joins multicast\n        groups. It is simplest to use the same membership\
    \ model for\n        hosts and routers; most would consider an IP router to be\
    \ a\n        special case of an IP host anyway.\n    o   It is the way group membership\
    \ has been implemented in BSD UNIX.\n        Existing multicast applications are\
    \ written to join multicast\n        groups on specific interfaces.\n    o   The\
    \ possibility of receiving multiple datagram copies may\n        improve fault\
    \ tolerance. If the datagram is dropped due to an\n                          \
    \  +-------+\n                            |receive|\n                        \
    \    +-------+\n                                |\n                          \
    \      |---> To application\n                                |\n             \
    \         +-------------------+\n                      |forwarding decision|\n\
    \                      +-------------------+\n                               \
    \ |\n                               / \\\n                              /---\\\
    ----> To application\n                             /     \\------> To application\n\
    \                            /       \\\n                           /        \
    \ \\\n                     +--------+  +--------+\n                     |transmit|\
    \  |transmit|\n                     +--------+  +--------+\n              Figure\
    \ 11: RFC 1112 representation of internal\n                          group membership\n\
    \        error on the path to some interface, another interface may still\n  \
    \      receive a copy.\n    o   The ability to specify a particular receiving\
    \ interface may\n        improve the accuracy of IP multicast's expanding ring\
    \ search\n        mechanism (see Section 2.3.4).\n    o   Membership in the non-routable\
    \ multicast groups (224.0.0.1 -\n        224.0.0.255) must be on a per-interface\
    \ basis. An OSPF router\n        always belongs to 224.0.0.5 (AllSPFRouters) on\
    \ its OSPF\n        interfaces, and may belong to 224.0.0.6 (AllDRouters) on one\
    \ or\n        more of its OSPF interfaces.\n    The second representation is MOSPF-specific.\
    \ In this case, an\n    application joins a multicast group on an interface-independent\n\
    \    basis.  In other words, group membership is associated with the\n    router\
    \ as a whole, not separately on each interface. The application\n    then receives\
    \ a copy of a multicast datagram if and only if the\n    datagram would actually\
    \ be forwarded by the MOSPF router. Figure 12\n    shows how this algorithm would\
    \ be implemented. The datagram is\n    received on a particular interface. If\
    \ the datagram is validated for\n    forwarding (i.e., the receiving interface\
    \ connects to the matching\n    forwarding cache entry's upstream node), a copy\
    \ of the datagram is\n    also given to appropriately joined applications. Note\
    \ that this\n    model of group membership is not as general as the RFC 1112 model,\n\
    \    in that it can only be implemented in MOSPF routers and not in\n    arbitrary\
    \ IP hosts.  However, it has the following advantages:\n    o   The application\
    \ does not need to have knowledge of the router\n        interfaces. It does not\
    \ need to know what kind or how many\n        interfaces there are; this will\
    \ be taken care of by the MOSPF\n        protocol itself.\n    o   As long as\
    \ any interface is operational, the application will\n        continue to receive\
    \ multicast datagrams. This happens\n        automatically, without the application\
    \ modifying its group\n        membership.\n    o   The application receives only\
    \ one copy of the datagram. Using\n        the RFC1112 representation, whenever\
    \ an application joins on\n        more than one interface (which must be done\
    \ if the application\n        does not want to rely on a single interface), multiple\
    \ datagram\n        copies will be received during normal operation.\n"
- title: 6.  Additional capabilities
  contents:
  - "6.  Additional capabilities\n    This section describes the MOSPF configuration\
    \ options that allow\n    routers of differing capabilities to be mixed together\
    \ in the same\n                            +-------+\n                       \
    \     |receive|\n                            +-------+\n                     \
    \           |\n                                |\n                           \
    \     |\n                      +-------------------+\n                      |forwarding\
    \ decision|---> to application\n                      +-------------------+\n\
    \                                |\n                               / \\\n    \
    \                          /   \\\n                             /     \\\n   \
    \                         /       \\\n                           /         \\\n\
    \                     +--------+  +--------+\n                     |transmit|\
    \  |transmit|\n                     +--------+  +--------+\n              Figure\
    \ 12: MOSPF-specific representation of internal\n                            \
    \ group membership\n    routing domain. Note that these options handle special\
    \ circumstances\n    that may not be encountered in normal operation. Default\
    \ values for\n    the configuration settings are specified in Appendix B.\n  \
    \  6.1.  Mixing with non-multicast routers\n        MOSPF routers can be mixed\
    \ freely with routers that are running\n        only the base OSPF algorithm (called\
    \ non-multicast routers in\n        the following). This allows MOSPF to be deployed\
    \ in a piecemeal\n        fashion, thereby speeding deployment and allowing\n\
    \        experimentation with multicast routing on a limited scale.\n        When\
    \ a MOSPF router builds a datagram shortest-path tree, it\n        omits all non-multicast\
    \ routers. For example, in Figure 1, if\n        Router RT6 was not a multicast\
    \ router, the datagram shortest-\n        path tree in Figure 3 would be built\
    \ with a more circuitous\n        branch through Router RT5, instead of through\
    \ Router RT6. In\n        addition, non-multicast routers do not participate in\
    \ the\n        flooding of the new group-membership-LSAs. This adheres to the\n\
    \        general principle that a router should not have to handle those\n   \
    \     link state advertisements whose format (or contents) the router\n      \
    \  does not understand.\n        Mixing MOSPF routers with non-multicast routers\
    \ creates a number\n        of potential problems. Certain mixings of MOSPF and\
    \ non-\n        multicast routers can cause multicast datagrams to take\n    \
    \    suboptimal paths, or in other cases can lead to the non-delivery\n      \
    \  of multicast datagrams. In addition, mixing MOSPF routers and\n        non-multicast\
    \ routers can cause the paths of multicast datagrams\n        to diverge radically\
    \ from the path of unicast datagrams. Such\n        divergences can make routing\
    \ problems harder to debug.\n        In particular, the following specific difficulties\
    \ may arise\n        when mixing MOSPF routers with non-multicast routers:\n \
    \       o   Even though there is unicast connectivity to a destination,\n    \
    \        there may not be multicast connectivity. For example, if\n          \
    \  Router RT10 in Figure 1 becomes a non-multicast router, the\n            group\
    \ member connected to Network N11 will no longer be able\n            to receive\
    \ multicasts sourced by Host H2.  But the two hosts\n            will be able\
    \ to exchange unicasts (e.g., ICMP pings).\n        o   When the Designated Router\
    \ for a multi-access network is a\n            non-multicast router, the network\
    \ will not be used for\n            forwarding multicast datagrams. For example,\
    \ if in Figure 1\n            Router RT4 is Designated Router for Network N3,\
    \ and RT4 is\n            non-multicast, Network N3 will not be used to forward\
    \ IP\n            multicasts. This would mean that multicast datagrams\n     \
    \       originated by Hosts H2 and H3 would not be forwarded beyond\n        \
    \    their local network (N4), even though it seems that the\n            needed\
    \ multicast connectivity exists.\n        o   When forwarding multicast datagrams\
    \ between areas, mixing of\n            MOSPF routers and non-multicast routers\
    \ in the source area\n            may cause unexpected loss of multicast connectivity.\
    \ This is\n            because in the inter-area routing of multicast datagrams\
    \ the\n            neighborhood of the datagram's source is approximated by\n\
    \            OSPF summary links, and OSPF summary-link-LSAs do not carry\n   \
    \         indications/guarantees of the summarized path's multicast\n        \
    \    routing capability.\n    6.2.  TOS-based multicast\n        MOSPF allows\
    \ a separate datagram shortest-path tree to be built\n        for each IP Type\
    \ of Service. This means that the path of a\n        multicast datagram can vary\
    \ depending on the datagram's TOS\n        classification, as well as its source\
    \ and destination.\n        For each router interface, OSPF allows a separate\
    \ metric to be\n        configured for each IP TOS. When building the shortest\
    \ path tree\n        for TOS X, the cost of a path is the sum of the component\n\
    \        interfaces' TOS X metrics. Note that OSPF requires that a TOS 0\n   \
    \     metric be specified for each interface. However, as a form of\n        data\
    \ compression, metrics need only be specified for non-zero\n        TOS if they\
    \ are different than the TOS 0 metric.\n        Additionally, OSPF routers can\
    \ be configured to ignore TOS when\n        forwarding packets. Such routers,\
    \ called TOS-incapable, build\n        only the TOS 0 portion of the routing table.\
    \ TOS-incapable\n        routers can be mixed freely with TOS-capable routers\
    \ when\n        forwarding unicast packets. The way this is handled for unicast\n\
    \        packets is that the unicast is forwarded along the TOS 0 route\n    \
    \    whenever the TOS X route does not exist. However, MOSPF must\n        treat\
    \ this situation somewhat differently, since each router\n        must build the\
    \ exact same tree rooted at the datagram's source.\n        Like OSPF, MOSPF allows\
    \ TOS-based routing to be optional. TOS-\n        capable and TOS-incapable multicast\
    \ routers can be mixed freely\n        in the routing domain. TOS-incapable routers\
    \ will only ever\n        build TOS 0 datagram shortest-path trees. TOS-capable\
    \ routers\n        will first build TOS 0 datagram shortest-path trees. If these\n\
    \        trees contain only TOS-capable routers, datagram shortest-path\n    \
    \    trees are then built separately for non-zero TOS values.\n        Otherwise,\
    \ the TOS 0 datagram shortest-path tree is used to\n        forward all traffic,\
    \ regardless of its TOS designation.  Using\n        this logic, all routers in\
    \ essence continue to utilize identical\n        datagram shortest-path trees.\
    \ See Section 12.2.8 for more\n        details.\n    6.3.  Assigning multiple\
    \ IP networks to a physical network\n        Assigning multiple IP networks/subnets\
    \ to a single physical\n        network causes some confusion in MOSPF. This is\
    \ because the\n        underlying OSPF protocol treats these IP networks/subnets\
    \ as\n        entirely separate entities, originating separate network-LSAs\n\
    \        for each and forming separate adjacencies for each, while IGMP\n    \
    \    recognizes only the single underlying physical network. Adding\n        to\
    \ the problem is the fact that when a multicast datagram is\n        received\
    \ from such a multiply-addressed physical wire, there is\n        no good way\
    \ to choose the datagram's upstream node (which must\n        be done in order\
    \ to make the forwarding decision; see Section 11\n        for details). As a\
    \ result, unless this situation is dealt with\n        through configuration,\
    \ unwanted replication of multicast\n        datagrams may occur when they are\
    \ forwarded over multiply-\n        addressed wires.\n        As a remedy, MOSPF\
    \ allows multicast forwarding to be disabled on\n        certain IP networks/subnets.\
    \ When multicast forwarding is\n        disabled on the wire's \"extra\" subnets\
    \ (i.e., all but one), the\n        extra subnets will not appear in datagram\
    \ shortest-path trees,\n        nor will they appear in local group database or\
    \ forwarding cache\n        entries. As a result, the possibility of unwanted\
    \ datagram\n        replication is eliminated. The actual disabling of multicast\n\
    \        forwarding on a subnet is done through setting the\n        IPMulticastForwarding\
    \ parameter to disabled on all router\n        interfaces connecting to the subnet\
    \ (see Section B.2).\n    6.4.  Networks on Autonomous System boundaries\n   \
    \     Another complication can arise on IP networks/subnets that lie\n       \
    \ on the boundary of a MOSPF Autonomous System. Similar to the\n        unicast\
    \ situation where these networks may be running multiple\n        IGPs (Interior\
    \ Gateway Protocols), these networks may also be\n        running multiple multicast\
    \ routing protocols. It may then become\n        impossible for a MOSPF router\
    \ to determine whether a multicast\n        datagram is being forwarded along\
    \ the datagram shortest-path\n        tree, or whether it has been inadvertently\
    \ received from the\n        other Autonomous System. Guessing wrong can lead\
    \ to either\n        unwanted replication or non-delivery of the multicast datagram.\n\
    \        In addition, in order to prevent receiving duplicate multicast\n    \
    \    datagrams, group members on these boundary networks will\n        probably\
    \ want to declare their membership to one Autonomous\n        System and not another.\n\
    \        For example, consider the two Autonomous Systems pictured in\n      \
    \  Figure 13. Network X is on the boundary of both ASes. One\n        possible\
    \ multicast datagram path is shown; the datagram\n        originates in a third\
    \ Autonomous System, and is then delivered\n        to both AS #1 and AS #2 separately.\
    \ The paths through the two\n        Autonomous Systems may end up having certain\
    \ boundary networks\n        as common segments. In Figure 13, Network X is common\
    \ to both\n        paths. In this case, if both Autonomous Systems were running\n\
    \        (separate copies of) MOSPF, the same datagram would appear twice\n  \
    \      on Network X as a data-link multicast. This would cause\n        duplicate\
    \ datagrams to be received by any group members on\n        Network X or downstream\
    \ from Network X.\n        MOSPF has two mechanisms to eliminate this replication\
    \ of\n        multicast datagrams. First, a system administrator can configure\n\
    \        certain networks to forward multicast datagrams as data-link\n      \
    \  unicasts instead of data-link multicasts. This is done by\n        setting\
    \ the IPMulticastForwarding parameter to data-link unicast\n        on those router\
    \ interfaces attaching to the network (see Section\n        B.2). As an example,\
    \ in Figure 13 the routers in AS #2 could be\n        configured so that Router\
    \ C would send the multicast datagram\n        out onto Network X as a data-link\
    \ unicast addressed directly to\n        Router D. Router D would accept this\
    \ data-link unicast, but\n                              <-Datagram path->*\n \
    \                            *                 *\n                           \
    \  *                 *\n                             *            .....*.........\n\
    \                    .........*.....   |   .    *    AS #2\n                 \
    \   AS #1    *    .   |*****+---+\n                            +---+*****|*----|RTC|\n\
    \                            |RTA|----*|*  . +---+\n                         \
    \   +---+ .  *|*  .\n                                  .  *|*  .\n           \
    \                       .  *|*  . +---+\n                            +---+ . \
    \ *|*----|RTD|\n                            |RTB|----*|*****+---+\n          \
    \                  +---+*****|   .....*..........\n                    .........*....\
    \    |        *\n                             *        |        *\n          \
    \                   *    Network X    *\n                             *\n    \
    \                 Figure 13: Networks on AS boundaries\n        would reject any\
    \ data-link multicast forwarded by Router A. This\n        would eliminate replication\
    \ of multicast datagrams downstream\n        from Network X. In addition, if the\
    \ IPMulticastForwarding\n        parameter is set to data-link unicast on Network\
    \ X, group\n        membership will not be monitored on the network. This will\n\
    \        prevent group members attached directly to Network X from\n        receiving\
    \ multiple datagram copies, since group membership on\n        the boundary network\
    \ will be monitored from only one AS (AS #1\n        in our example).\n      \
    \  It should be noted that forwarding IP multicasts as data-link\n        unicasts\
    \ has some disadvantages when three or more MOSPF routers\n        are attached\
    \ to the network. First of all, it is more work for a\n        router to send\
    \ multiple unicasts than a single multicast.\n        Second, the multiple unicasts\
    \ consume more network bandwidth\n        than a single multicast. And last, it\
    \ increases the delay for\n        some group members since multiple unicasts\
    \ also take longer to\n        send than a single multicast.\n    6.5.   Recommended\
    \ system configuration\n        In order to make MOSPF's selection of routes more\
    \ predictable,\n        it is recommended that all routers in any particular OSPF\
    \ area\n        have the same multicast and TOS capabilities.Keeping areas\n \
    \       homogeneous ensures that IP multicast packets will follow\n        relatively\
    \ the same path as IP unicasts. In contrast, while\n        heterogeneous areas\
    \ will function, and will probably be\n        necessary at least during the initial\
    \ introduction of multicast\n        routing, such areas may produce seemingly\
    \ sub-optimal and\n        unexpected routes. For example, see Section 6.1 above\
    \ for a\n        detailed description of the possible pitfalls when mixing\n \
    \       multicast and non-multicast routers.\n        As for the other options\
    \ presented above, to achieve the most\n        predictable results it is recommended\
    \ that a router interface's\n        IPMulticastForwarding parameter be set to\
    \ a value other than\n        data-link multicast only when either a) multiple\
    \ IP networks\n        have been assigned to a single physical wire or b) multiple\n\
    \        multicast routing protocols are running on the attached network.\n"
- title: 7.  Basic implementation requirements
  contents:
  - "7.  Basic implementation requirements\n    An implementation of MOSPF requires\
    \ the following pieces of system\n    support. Note that this support is in addition\
    \ to that required for\n    the base OSPF implementation as outlined in Section\
    \ 4.4 of [OSPF].\n    o   Promiscuous multicast reception. In a multicast router,\
    \ it is\n        necessary to receive all IP multicasts at the data-link level.\n\
    \        On those interfaces where IP multicast datagrams are\n        encapsulated\
    \ by a wide range of data-link multicast destination\n        addresses (e.g,\
    \ ethernet and FDDI), this is most easily\n        accomplished by disabling any\
    \ hardware filtering of multicast\n        destinations (i.e., by \"opening up\"\
    \ the interface's multicast\n        filter).\n    o   Data-link multicast/broadcast\
    \ detection. To avoid unwanted\n        replication of multicast datagrams in\
    \ certain exceptional\n        conditions, it is necessary for the multicast router\
    \ to\n        determine whether a datagram was received as a data-link\n     \
    \   multicast/broadcast or as a data-link unicast, for later use by\n        the\
    \ MOSPF forwarding mechanism.  See Section 6.4 for more\n        details.\n  \
    \  o   An implementation of IGMP. MOSPF uses the Internet Group\n        Management\
    \ Protocol (IGMP, documented in [RFC 1112]) to monitor\n        multicast group\
    \ membership. See Section 9 for details.\n"
- title: 8.  Protocol data structures
  contents:
  - "8.  Protocol data structures\n    The MOSPF protocol is described herein in terms\
    \ of its operation on\n    various protocol data structures. These data structures\
    \ are included\n    for explanatory uses only, and are not intended to constrain\
    \ a MOSPF\n    implementation. Besides the data structures listed below, this\n\
    \    specification will also reference the various data structures (e.g.,\n  \
    \  OSPF interfaces and neighbors) defined in [OSPF].\n    In a MOSPF router, the\
    \ following items are added to the list of\n    global OSPF data structures described\
    \ in Section 5 of [OSPF]:\n    o   Local group database. This database describes\
    \ the group\n        membership on all attached networks for which the router\
    \ is\n        either Designated Router or Backup Designated Router. This in\n\
    \        turn determines the group-membership-LSAs that the router will\n    \
    \    originate, and the local delivery of multicast datagrams (see\n        Sections\
    \ 2.3.1 and 10).\n    o   Forwarding cache. Each entry in the forwarding cache\
    \ describes\n        the path of a multicast datagram having a particular [source\n\
    \        net, multicast destination, TOS] combination. These cache\n        entries\
    \ are calculated when building the datagram shortest-path\n        trees. See\
    \ Sections 2.3.4 and 11 for more details.\n    o   Multicast routing capability.\
    \ Indicates whether the router is\n        running the multicast extensions defined\
    \ in this memo. A router\n        running the multicast extensions must still\
    \ run the base OSPF\n        algorithm as set forth in [OSPF]. Such a router will\
    \ continue to\n        interoperate with non-multicast-capable OSPF routers when\n\
    \        forwarding IP unicast traffic.\n    o   Inter-area multicast forwarder.\
    \ Indicates whether the router\n        will forward IP multicasts from one OSPF\
    \ area to another. Such a\n        router declares itself a wild-card multicast\
    \ receiver in its\n        non-backbone area router-LSAs (see Section 14.6), and\
    \ also\n        summarizes its attached areas' group membership to the backbone\n\
    \        in group-membership-LSAs. When building inter-area datagram\n       \
    \ shortest-path trees, it is these routers that appear immediately\n        adjacent\
    \ to the datagram source at the root of the tree (see\n        Section 3.2). Not\
    \ all multicast-capable area border routers need\n        be configured as inter-area\
    \ multicast forwarders. However,\n        whenever both ends of a virtual link\
    \ are multicast-capable, they\n        must both be configured as inter-area multicast\
    \ forwarders (see\n        Section 14.11).\n    o   Inter-AS multicast forwarder.\
    \ Indicates whether the router will\n        forward IP multicasts between Autonomous\
    \ Systems. Such a router\n        declares itself a wild-card multicast receiver\
    \ in its router-\n        LSAs (see Section 14.6). These routers are also assumed\
    \ to be\n        running some kind of inter-AS multicast protocol. They mark all\n\
    \        external routes that they import into the OSPF domain as to\n       \
    \ whether they provide multicast connectivity (see Section 14.9).\n        When\
    \ building inter-AS multicast datagram trees, it is these\n        routers that\
    \ appear immediately adjacent to the datagram source\n        at the root of the\
    \ tree.\n    8.1.  Additions to the OSPF area structure\n        The OSPF area\
    \ data structure is described in Section 6 of\n        [OSPF]. In a MOSPF router,\
    \ the following item is added to the\n        OSPF area structure:\n        o\
    \   List of group-membership-LSAs. These link state\n            advertisements\
    \ describe the location of the area's multicast\n            group members.  Group-membership-LSAs\
    \ are flooded throughout\n            a single area only. Area border routers\
    \ also summarize their\n            attached areas' membership by originating\
    \ group-membership-\n            LSAs into the backbone area. For more information,\
    \ see\n            Sections 3.1 and 10.\n    8.2.  Additions to the OSPF interface\
    \ structure\n        The OSPF interface structure is described in Section 9 of\n\
    \        [OSPF]. In a MOSPF router, the following items are added to the\n   \
    \     OSPF interface structure. Note that the IPMulticastForwarding\n        parameter\
    \ is really a description of the attached network. As\n        such, it should\
    \ be configured identically on all routers\n        attached to a common network;\
    \ otherwise incorrect routing of\n        multicast datagrams may result[13].\n\
    \        o   IPMulticastForwarding. This configurable parameter indicates\n  \
    \          whether IP multicasts should be forwarded over the attached\n     \
    \       network, and if so, how the forwarding should be done. The\n         \
    \   parameter can assume one of three possible values: disabled,\n           \
    \ data-link multicast and data-link unicast. When set to\n            disabled,\
    \ IP multicast datagrams will not be forwarded out\n            the interface.\
    \ When set to data-link multicast, IP multicast\n            datagrams will be\
    \ forwarded as data-link multicasts. When\n            set to data-link unicast,\
    \ IP multicast datagrams will be\n            forwarded as data-link unicasts.\
    \ The default value for this\n            parameter is data-link multicast. The\
    \ other two settings are\n            for use in the special circumstances described\
    \ in Sections\n            6.3 and 6.4. When set to disabled or to data-link unicast,\n\
    \            IGMP group membership is not monitored on the attached\n        \
    \    network.\n        o   IGMPPollingInterval. When the router is actively monitoring\n\
    \            group membership on the attached network, it periodically\n     \
    \       sends IGMP Host Membership Queries. IGMPPollingInterval is a\n       \
    \     configurable parameter indicating the number of seconds\n            between\
    \ IGMP Host Membership Queries.  The router actively\n            monitors group\
    \ membership on the attached network when both\n            a) the interface's\
    \ IPMulticastForwarding parameter is set to\n            data-link multicast and\
    \ b) the router has been elected\n            Designated Router on the attached\
    \ network. See Section 9 for\n            details.\n        o   IGMPTimeout. This\
    \ configurable parameter indicates the\n            length of time (in seconds)\
    \ that a local group database\n            entry associated with this interface\
    \ will persist without\n            another matching IGMP Host Membership Report\
    \ being received.\n            See Section 9 for details.\n        o   IGMP polling\
    \ timer. The firing of this interval timer causes\n            an IGMP Host Membership\
    \ Query to be sent out the interface.\n            The length of this timer is\
    \ the configurable parameter\n            IGMPPollingInterval. See Section 9 for\
    \ details.\n    8.3.  Additions to the OSPF neighbor structure\n        The OSPF\
    \ neighbor structure is defined in Section 10 of [OSPF].\n        In a MOSPF router,\
    \ the following items are added to the OSPF\n        neighbor structure:\n   \
    \     o   Neighbor Options. This field was already defined in the OSPF\n     \
    \       specification. However, in MOSPF there is a new option which\n       \
    \     indicates the neighbor's multicast capability. This new\n            option\
    \ is learned in the Database Exchange process through\n            reception of\
    \ the neighbor's Database Description packets,\n            and determines whether\
    \ group-membership-LSAs are flooded to\n            the neighbor. See the items\
    \ concerning flooding in Section\n            14 for a more detailed explanation.\n\
    \    8.4.  The local group database\n        The local group database has already\
    \ been introduced in Section\n        2.3.1.  The current section attempts a more\
    \ precise definition.\n        The local group database tracks the group membership\
    \ of the\n        router's directly attached networks. Database entries are\n\
    \        created and maintained by the IGMP protocol. Database entries\n     \
    \   can cause group-membership-LSAs to be originated, which in turn\n        enable\
    \ the pruning of datagram shortest-path trees. The local\n        group database\
    \ also dictates the router's responsibility for the\n        delivery of multicast\
    \ datagrams to directly attached group\n        members.\n        Each entry in\
    \ the local group database has three components: the\n        multicast group,\
    \ the attached network and the entry's age. A\n        database entry is indexed\
    \ by the first two components: multicast\n        group and attached network.\
    \ A database lookup function is\n        assumed to exist, so that given a [multicast\
    \ group, attached\n        network] pair, the matching database entry (if any)\
    \ can be\n        discovered. A database entry for [Group A, Network N1] exists\
    \ if\n        and only if there are Group A members currently located on\n   \
    \     Network N1.\n        The three components of a local group database entry\
    \ are defined\n        as follows:\n        o   MulticastGroup. The multicast\
    \ group whose members are being\n            tracked by this entry. Each multicast\
    \ group is represented\n            as a class D IP address. For the semantics\
    \ of multicast\n            group membership, see [RFC 1112].\n        o   AttachedNetwork.\
    \ Each database entry is concerned with the\n            group members belonging\
    \ to a single attached network. To get\n            a complete picture of the\
    \ local group membership (when for\n            example building a group-membership-LSA),\
    \ it may be\n            necessary to consult multiple database entries, one for\
    \ each\n            attached network. Note that a router is only required to\n\
    \            maintain entries for those attached networks on which the\n     \
    \       router has been elected Designated Router or Backup\n            Designated\
    \ Router (see Section 9).\n        o   Age. Indicates the number of seconds since\
    \ an IGMP Host\n            Membership Report for multicast Group A has been seen\
    \ on\n            Network N1. If the age field hits Network N1's configured\n\
    \            IGMPTimeout value, the local group database entry is removed\n  \
    \          (i.e., the entry has \"aged out\"). See Sections 9.2 and 9.3\n    \
    \        for more information.\n    8.5.  The forwarding cache\n        The forwarding\
    \ cache has already been defined in Section 2.3.\n        The current section\
    \ attempts a more precise definition. Each\n        entry in the forwarding cache\
    \ indicates how a multicast datagram\n        having a particular [source network,\
    \ destination multicast\n        group, IP TOS] will be forwarded. A forwarding\
    \ cache entry is\n        built on demand from the local group database and the\
    \ datagram's\n        shortest-path tree. For more details, consult Sections 2.3.4\
    \ and\n        12.\n        Each entry in the forwarding cache has six components:\
    \ the\n        multicast datagram's source network, the destination multicast\n\
    \        group, the IP TOS, the upstream node, the list of downstream\n      \
    \  interfaces and (possibly) a list of downstream neighbors. A\n        forwarding\
    \ cache entry is indexed by source network, destination\n        multicast group\
    \ and IP TOS. A lookup function is assumed to\n        exist, so that given a\
    \ multicast datagram with a particular [IP\n        source, destination multicast\
    \ group, IP TOS], a matching cache\n        entry (if any) can be found.\n   \
    \     The six components of a forwarding cache entry are defined as\n        follows:\n\
    \        o   Source network. The datagram's source network is described\n    \
    \        by a network/subnet/supernet number and its corresponding\n         \
    \   mask. The source network for a datagram is discovered via a\n            routing\
    \ table/database lookup of the datagram's IP source\n            address, as described\
    \ in Section 11.2.\n        o   Destination multicast group. The destination group\
    \ to which\n            matching datagrams are being forwarded. For the semantics\
    \ of\n            multicast group membership, see [RFC 1112].\n        o   IP\
    \ TOS. The IP Type of Service specified by matching\n            datagrams. Note\
    \ that this means that the path of the\n            multicast datagram depends\
    \ on its TOS classification.\n        o   Upstream node. The attached network/neighboring\
    \ router from\n            which the datagram must be received. If received from\
    \ a\n            different attached network/neighboring router, the matching\n\
    \            datagram is dropped instead of forwarded. This prevents\n       \
    \     unwanted replication of multicast datagrams. It is possible\n          \
    \  that the upstream node is unspecified (i.e., set to NULL).\n            In\
    \ this case, matching datagrams will always be dropped, no\n            matter\
    \ where they are received from. It is also possible\n            that the upstream\
    \ node is specified as the placeholder\n            EXTERNAL. This means that\
    \ the datagram must be received on a\n            non-MOSPF interface in order\
    \ to be forwarded.\n        o   List of downstream interfaces. These are the router\n\
    \            interfaces that the matching datagram should be forwarded\n     \
    \       out of (assuming that the datagram was received from\n            upstream\
    \ node). Each interface is also listed with a TTL\n            value. The TTL\
    \ value is the minimum number of hops necessary\n            to reach the closest\
    \ (in terms of router hops) group member.\n            This allows the router\
    \ to drop datagrams that have no chance\n            of reaching a destination\
    \ group member.\n        o   List of downstream neighbors. When the datagram is\
    \ to be\n            forwarded out a non-broadcast multi-access network, or if\n\
    \            the interface's IPMulticastForwarding parameter is set to\n     \
    \       data-link unicast, the datagram must be forwarded separately\n       \
    \     to each downstream neighbor (see Sections 2.3.3 and 6.4). As\n         \
    \   done for downstream interfaces, each downstream neighbor is\n            specified\
    \ together with the smallest TTL that will actually\n            reach a group\
    \ member.\n"
- title: 9.  Interaction with the IGMP protocol
  contents:
  - "9.  Interaction with the IGMP protocol\n    MOSPF uses the IGMP protocol (see\
    \ [RFC 1112]) to monitor multicast\n    group membership. In short, the Designated\
    \ Router on a network\n    periodically sends IGMP Host Membership Queries (see\
    \ Section 9.1),\n    which in turn elicit IGMP Host Membership Reports from the\
    \ network's\n    multicast group members. These Host Membership Reports are then\n\
    \    recorded in the Designated Router's and Backup Designated Router's\n    local\
    \ group databases (see Section 9.2).\n    9.1.  Sending IGMP Host Membership Queries\n\
    \        Only the network's Designated Router sends Host Membership\n        Queries.\
    \  This minimizes the amount of group membership\n        information on the network,\
    \ both in terms of queries and\n        responses.\n        When a MOSPF router\
    \ becomes Designated Router on a network, it\n        checks to see that the network's\
    \ IPMulticastForwarding parameter\n        is set to data-link multicast (see\
    \ Section B.2). If so, it\n        starts the interface's IGMP polling timer.\
    \ Then, whenever the\n        timer fires (every IGMPPollingInterval seconds),\
    \ the MOSPF\n        router sends a Host Membership Query out the interface. The\n\
    \        destination of the query is the IP address 224.0.0.1. For the\n     \
    \   format of the query, see [RFC 1112].  If/when the MOSPF router\n        ceases\
    \ to be the network's Designated Router, the IGMP polling\n        timer is disabled\
    \ and no more Hosts Membership Queries are sent.\n        Unusual behavior can\
    \ result when multiple IP networks are\n        assigned to a single physical\
    \ network. MOSPF treats each such IP\n        network separately, electing (possibly)\
    \ a different Designated\n        Router for each network.  However, IGMP operates\
    \ on a physical\n        network basis only: when a Host Membership Query is sent,\
    \ all\n        group members on the physical network respond, regardless of\n\
    \        their IP addresses. So unless the IPMulticastForwarding\n        parameter\
    \ is set to a value other than data-link multicast on\n        all but one of\
    \ the physical network's IP networks, excess\n        multicast membership reporting\
    \ will result.\n    9.2.  Receiving IGMP Host Membership Reports\n        Received\
    \ Host Membership Reports are processed by both the\n        network's Designated\
    \ Router and Backup Designated Router. It is\n        the Designated Router's\
    \ responsibility to distribute the\n        network's group membership information\
    \ throughout the routing\n        domain, by originating group-membership-LSAs\
    \ (see Section 10).\n        The Backup Designated Router processes Reports so\
    \ that it too\n        has a complete picture of the network's group membership,\n\
    \        enabling a quick cutover upon Designated Router failure.\n        An\
    \ IGMP Host Membership Report concerns membership in a single\n        IP multicast\
    \ group (call it Group A). The Report is sent to the\n        Group A address\
    \ so that other group members may see the Report\n        and avoid sending duplicates\
    \ (see [RFC 1112] for details). When\n        an IGMP Host Membership Report,\
    \ sent on Network N[14], is\n        received by a MOSPF router, the following\
    \ steps are executed:\n        (1) If the router is neither the Designated Router\
    \ nor the\n            Backup Designated Router on the network, the Report is\n\
    \            discarded and processing stops.\n        (2) If the Report concerns\
    \ a multicast group in the range\n            224.0.0.1 - 224.0.0.255, the Report\
    \ is discarded and\n            processing stops. This range of multicast groups\
    \ are for\n            local use (single hop) only, and datagrams sent to these\n\
    \            destinations are never forwarded by multicast routers.\n        (3)\
    \ Locate the entry for [Group A, Network N] in the local group\n            database.\
    \  If no such entry exists, create one. In any case,\n            set the age\
    \ of the entry to 0. Note that even if multiple\n            hosts attached to\
    \ Network N report membership in the same\n            group, only a single local\
    \ group database entry will be\n            formed. See Section 8.4 for more details\
    \ concerning the\n            local group database.\n        (4) If the router\
    \ is the network's Designated Router, and a\n            local group database\
    \ entry was created in the previous step,\n            it may be necessary to\
    \ originate a new group-membership-LSA.\n            See Section 10 for details.\n\
    \    9.3.  Aging local group database entries\n        Every local database entry\
    \ has an age field. Suppose that there\n        is a database entry for [Group\
    \ A, Network N1]. The age field\n        then indicates the length of time (in\
    \ seconds) since the last\n        Host Membership Report for Group A was received\
    \ on Network N1.\n        If the age of the entry reaches Network N1's configured\n\
    \        IGMPTimeout value (see Section B.2), the entry is considered\n      \
    \  invalid and is removed from the database.\n        Note that when a router,\
    \ after having been either Network N1's\n        Designated Router or Backup Designated\
    \ Router, but now being\n        neither, will (after IGMPTimeout seconds) automatically\
    \ age out\n        all of its local group database entries associated with Network\n\
    \        N1. For this reason, it is not necessary to purge local group\n     \
    \   database entries on OSPF interface state changes.\n    9.4.  Receiving IGMP\
    \ Host Membership Queries\n        If a MOSPF router has internal multicast applications,\
    \ and if\n        the applications have bound themselves to certain interfaces\n\
    \        (using the RFC 1112 representation described in Section 5), then\n  \
    \      the MOSPF router responds to received Host Membership Queries by\n    \
    \    issuing Host Membership Reports. Identical to the operation of\n        any\
    \ IP host supporting multicast applications, the exact\n        procedure for\
    \ issuing these Host Membership Reports is specified\n        in [RFC 1112]. Note\
    \ that in this case, if the router has been\n        elected Designated Router\
    \ on a network, it must receive its own\n        Host Membership Reports and Host\
    \ Membership Queries.\n        If instead all of its applications have joined\
    \ groups in an\n        interface-independent fashion (using the MOSPF-specific\n\
    \        representation described in Section 5), the MOSPF router does\n     \
    \   not respond to Host Membership Queries. Instead, the MOSPF\n        router\
    \ communicates this membership information by originating\n        appropriate\
    \ group-membership-LSAs (see Section 10.1).\n"
- title: 10.  Group-membership-LSAs
  contents:
  - "10.  Group-membership-LSAs\n    Group-membership-LSAs provide the means of distributing\
    \ membership\n    information throughout the MOSPF routing domain. Group-membership-\n\
    \    LSAs are specific to a single OSPF area (see Section 3.1). Each\n    group-membership-LSA\
    \ concerns a single multicast group. Essentially,\n    the group-membership-LSA\
    \ lists those networks which are directly\n    connected to the LSA's originator\
    \ and which contain one or more\n    group members. For more details on how the\
    \ group-membership-LSA\n    augments the OSPF link state database, see Section\
    \ 2.3.1.\n    The creation of group-membership-LSAs is discussed in Section 10.1.\n\
    \    The format of the group-membership-LSA is described in Section A.3.\n   \
    \ A router will originate a group membership-LSA for multicast group A\n    when\
    \ one or more of the following conditions hold:\n    (1) The router is Designated\
    \ Router on a network (call it Network\n        X), the interface to Network X\
    \ has its IPMulticastForwarding\n        parameter set to data-link multicast\
    \ (see Section B.2), and\n        Network X contains one or more members of Group\
    \ A.\n    (2) The router is an inter-area multicast forwarder (see Section\n \
    \       B.1), and one or more of the router's attached non-backbone\n        areas\
    \ contain Group A members. In this case, the router will\n        originate a\
    \ group-membership-LSA for Group A into the backbone.\n        This is the way\
    \ group membership is conveyed between areas (see\n        Section 3.1).\n   \
    \ (3) The router itself has applications that are requesting\n        membership\
    \ in Group A, in an interface-independent fashion (see\n        Section 5).\n\
    \    As for all other types of OSPF link state advertisements (e.g,\n    router-LSAs,\
    \ network-LSAs, etc.), group-membership-LSAs are aged as\n    they are held in\
    \ a router's link state database. To prevent valid\n    advertisements from \"\
    aging out\", a router must refresh its self-\n    originated group-membership-LSAs\
    \ every LSRefreshTime interval, by\n    incrementing their LS sequence numbers\
    \ and reissuing them. In\n    addition, when an event occurs that would alter\
    \ one of the router's\n    self-originated group-membership-LSAs, a new instance\
    \ of the LSA is\n    issued with an updated (i.e., incremented by 1) LS sequence\
    \ number.\n    Note however that a router is not allowed to originate two new\n\
    \    instances of the same advertisement within MinLSInterval seconds.\n    For\
    \ that reason, occasionally advertisement originations will need\n    to be deferred.\
    \ Also, an event may occur that makes it inappropriate\n    for the router to\
    \ continue to originate a particular LSA. In that\n    case, the router flushes\
    \ the advertisement from the routing domain\n    by \"premature aging\". For more\
    \ information concerning the\n    maintenance of LSAs, see Sections 12, 12.4,\
    \ 14 and 14.1 of [OSPF].\n    When one of the following events occurs, it may\
    \ be necessary for a\n    router to (re)issue one or more group-membership-LSAs:\n\
    \    (1) One of the router's interfaces changes state. For example, the\n    \
    \    router may have become Designated Router on a particular\n        network,\
    \ causing the router to start advertising the network's\n        group membership\
    \ to the rest of the MOSPF system in group-\n        membership-LSAs.\n    (2)\
    \ The router receives an IGMP Host Membership Report, causing a\n        new local\
    \ group database entry to be formed (see Section 9.2).\n    (3) One of the router's\
    \ local group database entries \"ages out\",\n        because it is no longer\
    \ being refreshed by received IGMP Host\n        Membership Reports (see Section\
    \ 9.3).\n    (4) The router is an inter-area multicast forwarder, and the group\n\
    \        membership of one of the router's attached non-backbone areas\n     \
    \   changes.  This is detected by the reception of a new, or the\n        flushing\
    \ of an old, group-membership-LSA into/from the non-\n        backbone area's\
    \ link state database.\n    (5) The group membership of one of the router's internal\n\
    \        applications changes.\n    10.1.  Constructing group-membership-LSAs\n\
    \        This section details how to build a group-membership-LSA. The\n     \
    \   format of a group-membership-LSA is described in Section A.3.\n        Each\
    \ group-membership-LSA concerns a single multicast group. The\n        body of\
    \ the advertisement is a list of the local transit nodes\n        (the router\
    \ itself and directly attached transit networks) that\n        contain group members.\
    \ Section 10 listed the conditions\n        requiring the (re)origination of a\
    \ group-membership-LSA. Note\n        that if the router is an area border router,\
    \ it may be necessary\n        to originate a separate group-membership-LSA for\
    \ each attached\n        area.\n        The following defines the contents of\
    \ a group-membership-LSA, as\n        originated by Router X into Area A. It is\
    \ assumed that the\n        group-membership-LSA is to report membership in multicast\
    \ group\n        G:\n        o   The advertisement fields that are not type-specific\
    \ (LS age,\n            LS sequence number, LS checksum and length) are set\n\
    \            according to Section 12.1 of [OSPF].\n        o   The Options field\
    \ of a group-membership-LSA is not processed\n            on receipt. However,\
    \ for consistency, the Option field in\n            these advertisements should\
    \ have its MC-bit set, T-bit\n            clear, and the E-bit should match the\
    \ configuration of Area\n            A (i.e., set if and only if Area A is not\
    \ a stub area). The\n            rest of the Options field is set to 0.\n    \
    \    o   The Link State ID is set to the group whose membership is\n         \
    \   being reported (Group G).\n        o   The Advertising Router is set to the\
    \ OSPF Router ID of the\n            router originating the advertisement (Router\
    \ X).\n        o   The body of the advertisement is a list of local transit\n\
    \            vertices that should be labelled with Group G membership\n      \
    \      (see Section 2.3.1). This list may include the advertising\n          \
    \  router itself, and any of the transit networks that are\n            directly\
    \ attached to said router. The following steps\n            determine which of\
    \ these transit vertices are actually\n            included in the group-membership-LSA.\
    \ Note that any\n            particular vertex should be listed at most once,\
    \ even though\n            the following may indicate multiple reasons for a particular\n\
    \            vertex to be listed. Also note that if no transit vertices\n    \
    \        are listed by the advertisement, the advertisement should\n         \
    \   not be (re)originated; if an instance of the advertisement\n            already\
    \ exists, it should then be flushed from the link\n            state database\
    \ using the premature aging procedure specified\n            in Section 14.1 of\
    \ [OSPF].\n            a.  Consider those entries in the local group database\
    \ that\n                describe Group G membership (see Section 8.4). Consider\n\
    \                each such entry in turn. Each entry references one of\n     \
    \           Router X's attached networks (call it Network N). If\n           \
    \     either Network N does not belong to Area A, or if Router\n             \
    \   X is not Network N's Designated Router[15], Network N\n                should\
    \ not be added to the group-membership-LSA, and the\n                next local\
    \ group database entry should be examined.\n                Otherwise, if N is\
    \ a stub network (e.g., Router X is the\n                only OSPF router attached\
    \ to N), Router X adds itself to\n                the advertisement by adding\
    \ a vertex with Vertex type\n                set to 1 (router) and Vertex ID set\
    \ to Router X's OSPF\n                Router ID. Otherwise, N is a transit network.\
    \ In this\n                case, Network N should be added to the advertisement\
    \ by\n                adding a vertex with Vertex type set to 2 (network) and\n\
    \                Vertex ID set to the IP address of Network N's\n            \
    \    Designated Router (i.e., Router X's IP interface address\n              \
    \  on Network N).\n            b.  If Router X itself has applications requesting\
    \ Group G\n                membership on an interface-independent basis (see\n\
    \                Section 5), it should add itself to the advertisement by\n  \
    \              adding a vertex with Vertex type set to 1 (router) and\n      \
    \          Vertex ID set to Router X's OSPF Router ID.\n            c.  If Router\
    \ X is an inter-area multicast forwarder (see\n                Section 3.1), Area\
    \ A is the backbone area (Area ID\n                0.0.0.0), and at least one\
    \ of Router X's attached non-\n                backbone areas has Group G members\
    \ (indicated by the\n                presence of one or more advertisements in\
    \ the areas'\n                link state databases having Link State ID set to\
    \ Group G\n                and LS age set to a value other than MaxAge[16]), then\n\
    \                Router X should add itself to the advertisement by\n        \
    \        adding a vertex with Vertex type set to 1 (router) and\n            \
    \    Vertex ID set to Router X's OSPF Router ID.\n        Consider as an example\
    \ the network configuration in Figure 4.\n        Suppose that Router RT2 has\
    \ been elected Designated Router for\n        Network N3.  Router RT2 would then\
    \ originate (into Area 1) the\n        following group-membership-LSA for Group\
    \ B:\n          ; RT2's group-membership-LSA for Group B\n          LS age = 0\
    \                     ;always true on origination\n          Options = (E-bit|MC-bit)\n\
    \          LS type = 6                    ;group-membership-LSA\n          Link\
    \ State ID = Group B\n          Advertising Router = RT2's Router ID\n       \
    \          Vertex type = 1         ;RT2 itself (for stub N2)\n               \
    \  Vertex ID = RT2's Router ID\n                 Vertex type = 2         ;Network\
    \ N3 (since RT2 is DR)\n                 Vertex ID = RT2's IP interface address\
    \ on N3\n    10.2.  Flooding group-membership-LSAs\n        When MOSPF routers\
    \ and non-multicast OSPF routers are mixed\n        together in a routing domain,\
    \ the group-membership-LSAs are not\n        flooded to the non-multicast routers[17].\
    \  As a general design\n        principle, optional OSPF advertisements are only\
    \ flooded to\n        those routers that understand them.\n        A MOSPF router\
    \ learns of its neighbor's multicast-capability at\n        the beginning of the\
    \ \"Database Exchange Process\" (see Section\n        10.6 of [OSPF], receiving\
    \ Database Description packets from a\n        neighbor in state Exstart). A neighbor\
    \ is multicast-capable if\n        and only if it sets the MC-bit in the Options\
    \ field of its\n        Database Description packets.  Then, in the next step\
    \ of the\n        Database Exchange process, group-membership-LSAs are included\
    \ in\n        the Database summary list sent to the neighbor (see Sections 7.2\n\
    \        and 10.3 of [OSPF]) if and only if the neighbor is multicast-\n     \
    \   capable.\n        When flooding group-membership-LSAs to adjacent neighbors,\
    \ a\n        MOSPF router looks at the neighbor's multicast-capability.\n    \
    \    Group-membership-LSAs are only flooded to multicast-capable\n        neighbors.\
    \ To be more precise, in Section 13.3 of [OSPF],\n        group-membership-LSAs\
    \ are only placed on the Link state\n        retransmission lists of multicast-capable\
    \ neighbors[18].  Note\n        however that when sending Link State Update packets\
    \ as\n        multicasts, a non-multicast neighbor may (inadvertently) receive\n\
    \        group-membership-LSAs. The non-multicast router will then simply\n  \
    \      discard the LSA (see Section 13 of [OSPF], receiving LSAs having\n    \
    \    unknown LS types).\n"
- title: 11.  Detailed description of multicast datagram forwarding
  contents:
  - "11.  Detailed description of multicast datagram forwarding\n    This section\
    \ describes in detail the way MOSPF forwards a multicast\n    datagram. The forwarding\
    \ process has already been informally\n    presented in Section 2.2. However,\
    \ there are several obscure\n    configuration options (e.g., the IPMulticastForwarding\
    \ interface\n    parameter) that have been presented elsewhere in this document,\n\
    \    which may influence the forwarding process. This section gathers\n    together\
    \ all the influencing factors into a single algorithm.\n    It is assumed in the\
    \ following that the datagram under consideration\n    has actually be received\
    \ on one of the router's interfaces. Locally\n    generated datagrams (i.e., originated\
    \ by one of the router's\n    internal applications) are handled instead by the\
    \ algorithm in\n    Section 11.3.\n    Assume that the datagram's IP destination\
    \ is Group G. The forwarding\n    process then consists of the following steps:\n\
    \    (1) Upon reception of the datagram, the MOSPF router notes the\n        following\
    \ parameters. These parameters are examined in later\n        steps, to determine\
    \ whether the datagram should be forwarded.\n        a.  The receiving MOSPF interface\
    \ associated with the datagram.\n            Based on the receiving physical interface,\
    \ the receiving\n            MOSPF interface is selected by the algorithm in Section\n\
    \            11.1.\n        b.  Whether the datagram was received as a link-level\n\
    \            multicast/broadcast or as a link-level unicast. This\n          \
    \  information is used later in Step 7 to help determine\n            whether\
    \ the datagram should be forwarded.\n    (2) A copy of the datagram should be\
    \ passed to each internal\n        application that has joined Group G on the\
    \ receiving MOSPF\n        interface (see Section 5).\n    (3) If the datagram's\
    \ IP source address matches the receiving MOSPF\n        interface's IP address,\
    \ the datagram should not be forwarded\n        further, and should instead be\
    \ discarded, completing the\n        forwarding process.  This keeps the router's\
    \ own locally\n        originated datagrams from being mistakenly replicated,\
    \ in those\n        cases where the receiving MOSPF interface receives its own\n\
    \        multicast transmissions.\n    (4) If Group G falls into the range 224.0.0.1\
    \ through 224.0.0.255\n        inclusive, the datagram should not be forwarded\
    \ further. This\n        range of addresses has been dedicated for use on a local\
    \ network\n        segment only.\n    (5) Associate a source network (SourceNet)\
    \ with the multicast\n        datagram, as described in Section 11.2. If SourceNet\
    \ cannot be\n        determined (i.e., there is no available unicast route back\
    \ to\n        the datagram source), the datagram should not be forwarded\n   \
    \     further.\n    (6) Look up the forwarding cache entry (see Section 8.5) matching\n\
    \        the datagram's [SourceNet, Group G, TOS] combination. If the\n      \
    \  cache entry does not yet exist, one is built by the calculation\n        in\
    \ Section 12. In order for the datagram to be forwarded, the\n        contents\
    \ of the forwarding cache entry must be further verified\n        against the\
    \ received datagram's characteristics as follows:\n        a.  If the forwarding\
    \ cache entry's upstream node is unspecified\n            (i.e., NULL), then the\
    \ datagram should not be forwarded\n            further.\n        b.  Otherwise,\
    \ suppose that the forwarding cache entry's\n            upstream node is set\
    \ to EXTERNAL. In this case, the datagram\n            is forwarded further if\
    \ and only if the receiving MOSPF\n            interface is set to NULL (i.e.,\
    \ if and only if the datagram\n            was received on a non-MOSPF interface).\n\
    \        c.  Otherwise, if the datagram's receiving MOSPF interface does\n   \
    \         not attach to the forwarding cache entry's upstream node,\n        \
    \    the datagram should not be forwarded further.\n    (7) If the receiving MOSPF\
    \ interface's IPMulticastForwarding\n        parameter is set to data-link unicast,\
    \ the datagram should be\n        forwarded further only if it was received as\
    \ a data-link\n        unicast.\n    (8) At this point the datagram is eligible\
    \ for further forwarding.\n        Before forwarding, the router checks to see\
    \ whether it has any\n        internal applications that have joined Group G on\
    \ an interface-\n        independent basis. If so, a copy of the datagram should\
    \ be\n        passed to each such requesting application process.\n    (9) Examine\
    \ each of the downstream interfaces listed in the\n        forwarding cache entry.\
    \ If the TTL in the datagram is greater\n        than or equal to the TTL specified\
    \ for the downstream interface,\n        a copy of the datagram should be forwarded\
    \ out the downstream\n        interface. Before forwarding the datagram copy,\
    \ the copy's TTL\n        should be decremented by 1. On most interfaces, the\
    \ datagram is\n        forwarded as a data-link multicast/broadcast. The exact\
    \ data-\n        link encapsulation is dependent on the attached network's type:\n\
    \        o   On ethernet and IEEE 802.3 networks, the datagram is\n          \
    \  forwarded as a data-link multicast. The destination data-\n            link\
    \ multicast address is selected as an algorithmic\n            translation of\
    \ the IP multicast destination. See [RFC 1112]\n            for details.\n   \
    \     o   On FDDI networks, the datagram is forwarded as a data-link\n       \
    \     multicast.  The destination data-link multicast address is\n           \
    \ selected as an algorithmic translation of the IP multicast\n            destination.\
    \ See [RFC 1390] for details.\n        o   On SMDS networks, the datagram is forwarded\
    \ using the same\n            SMDS address that is used by IP broadcast datagrams.\
    \ See\n            [RFC 1209] for details.\n        o   On networks that support\
    \ broadcast, but not multicast (e.g.,\n            the Experimental Ethernet),\
    \ the datagram is forwarded as a\n            data-link broadcast. See [RFC 1112]\
    \ for details.\n        o   On point-to-point networks, the datagram is forwarded\
    \ in the\n            same way that unicast datagrams are forwarded. See [RFC\n\
    \            1112] for details.\n    (10)\n        Examine each of the downstream\
    \ neighbors listed in the\n        forwarding cache entry. If the TTL in the datagram\
    \ is greater\n        than or equal to the TTL specified for the downstream neighbor,\n\
    \        a copy of the datagram should be forwarded to the downstream\n      \
    \  neighbor (as a data-link unicast). Before forwarding the\n        datagram\
    \ copy, the copy's TTL should be decremented by 1.\n    ICMP error messages are\
    \ never generated in response to received IP\n    multicasts. In particular, ICMP\
    \ destination unreachables and ICMP\n    TTL expired messages are not generated\
    \ by the above procedure if the\n    router refuses to forward a multicast datagram.\n\
    \    11.1.  Associating a MOSPF interface with a received datagram\n        A\
    \ MOSPF interface must be associated with a received multicast\n        datagram\
    \ before it is forwarded (see Step 1a of Section 11), and\n        with received\
    \ IGMP Host Membership Reports before they are\n        processed (see Section\
    \ 9.2).\n        When there is only a single IP network assigned to the physical\n\
    \        interface that received the datagram, the choice of receiving\n     \
    \   MOSPF interface is clear. When there are multiple logical IP\n        networks\
    \ attached to the receiving physical interface, the\n        receiving MOSPF interface\
    \ is selected as follows. Examine all of\n        the MOSPF interfaces associated\
    \ with the receiving physical\n        interface. Discard those interfaces whose\
    \ IPMulticastForwarding\n        parameter has been set to disabled. The receiving\
    \ MOSPF\n        interface is then the remaining interface having the highest\
    \ IP\n        interface address (or NULL if there are no remaining\n        interfaces)[19].\n\
    \    11.2.  Locating the source network\n        MOSPF forwarding cache entries\
    \ are indexed by the datagram's\n        source IP network/subnet/supernet. For\
    \ this reason, whenever an\n        IP multicast datagram is received, the IP\
    \ network belonging to\n        the datagram's IP source address must be found.\
    \ This is\n        accomplished by the following algorithm:\n        Look up the\
    \ OSPF TOS 0 routing table entry[20] corresponding to\n        the datagram's\
    \ IP source address, as described in Section 11.1\n        of [OSPF].  If this\
    \ routing table entry describes an OSPF\n        intra-area or inter-area route,\
    \ the source network is set to be\n        the network defined by the routing\
    \ table entry's Destination ID\n        and Address Mask (see Section 11 of [OSPF]).\
    \ Otherwise (i.e.,\n        the routing table entry specifies an external route,\
    \ or there is\n        no matching routing table entry), the list of matching\
    \ AS\n        external-link-LSAs is examined. A matching AS external-link-LSA\n\
    \        is one that describes a network which contains the datagram's IP\n  \
    \      source address. The list of matching AS external-link-LSAs is\n       \
    \ pruned in the following steps to determine the source network:\n        (1)\
    \ Those AS external-link-LSAs with MC-bit clear (see Section\n            A.1),\
    \ or with LS age set to MaxAge, or which have been\n            originated by\
    \ unreachable AS boundary routers are discarded.\n        (2) AS external-link-LSAs\
    \ specifying Type 1 external metrics are\n            always preferred over those\
    \ specifying Type 2 external\n            metrics.\n        (3) If there are still\
    \ multiple AS external-link-LSAs remaining,\n            those specifying the\
    \ best matching (i.e., most specific)\n            network are selected. The source\
    \ network is then set to the\n            network/subnet/supernet (possibly even\
    \ the default route)\n            described by the best matching AS external-link-LSAs.\
    \ Note\n            that AS external-link-LSAs specifying a cost of LSInfinity\n\
    \            are eligible for this best match, as long as their MC-bit is\n  \
    \          set.[21]\n        It is possible that two different MOSPF routers may\
    \ calculate\n        the same multicast datagram's source network differently.\
    \ For\n        example, consider the network configuration shown in Figure 4.\n\
    \        When calculating the source network for a datagram whose source\n   \
    \     is Network N10 and destination is Group Ma, Router RT11 would\n        calculate\
    \ the source network as Network N10 itself, while Router\n        RT10 would calculate\
    \ the source network as the aggregate of\n        Networks N9-N11 and Host H1\
    \ (advertised in a single summary-\n        link-LSA by Router RT11). However,\
    \ despite the possibility of\n        routers selecting different source networks,\
    \ all routers will\n        still agree on the datagram's shortest-path tree.\n\
    \        External sources are treated differently in the above\n        calculation\
    \ since it is likely that the Internet will have\n        separate multicast and\
    \ unicast topologies for some time to come.\n        When the multicast and unicast\
    \ topologies do merge, the MC-bit\n        will be set on all AS external-link-LSAs\
    \ and the above use of\n        the LSInfinity metric (to indicate a route that\
    \ is to be used\n        for multicast traffic, but not unicast traffic), will\
    \ no longer\n        be necessary. At that time, the determination of source network\n\
    \        for external sources will revert to the same simple routing\n       \
    \ table lookup that is used for internal sources.\n        As an example of the\
    \ logic for external sources, suppose a\n        multicast datagram is received\
    \ having the IP source address\n        10.1.1.1. Suppose also that the three\
    \ AS external-link-LSAs\n        shown in Table 3 are in the router's OSPF database.\
    \ The OSPF\n        routing table lookup would yield the network 10.1.1.0 with\
    \ a\n        mask of 255.255.255.0, however the above calculation would\n    \
    \    choose a source network of 10.1.0.0 with a mask of 255.255.0.0,\n       \
    \ despite the fact that its matching LSA has a cost of LSInfinity.\n    11.3.\
    \  Forwarding locally originated multicasts\n        This section describes how\
    \ a MOSPF router forwards a multicast\n        datagram that has been originated\
    \ by one of the router's own\n        internal applications. The process begins\
    \ with one of the\n        router's internal applications formatting and addressing\
    \ the\n        datagram. Forwarding the locally originated multicast then\n  \
    \      consists of the following steps:\n        (1) Find the router interface\
    \ whose IP address matches the\n            datagram's source address. Multicast\
    \ the datagram out that\n            interface, according to the Host extensions\
    \ for IP\n            multicasting specified in [RFC 1112].\n        (2) If the\
    \ router interface found in the previous step has been\n            configured\
    \ for MOSPF, and if its IPMulticastForwarding\n            parameter is not equal\
    \ to disabled, then set the receiving\n            MOSPF interface to that interface.\
    \  Otherwise, set the\n            receiving MOSPF interface to NULL.\n      \
    \  (3) Execute the MOSPF forwarding process described in Section\n           \
    \ 11, beginning with its Step 4.\n         Network    Mask            Cost   \
    \              MC-bit\n         ______________________________________________________\n\
    \         10.1.1.0   255.255.255.0   Type 1: 10           clear\n         10.1.0.0\
    \   255.255.0.0     Type 2: LSInfinity   set\n         10.0.0.0   255.0.0.0  \
    \     Type 2: 1            set\n                 Table 3: Sample AS external-link-LSAs\n\
    \        The above algorithm amounts to the router always multicasting\n     \
    \   the datagram out the source interface, and the executing the\n        basic\
    \ forwarding algorithm (in Section 11) as if the datagram\n        had actually\
    \ been received on the source interface. In those\n        cases where the router\
    \ receives its own multicast transmissions,\n        unwanted replication is prevented\
    \ by Step 3 of Section 11. In\n        fact, this specification has purposely\
    \ presented the forwarding\n        algorithm (both for received and for locally\
    \ originated\n        datagrams) so that the correct forwarding actions are taken\n\
    \        independent of whether the router receives its own multicast\n      \
    \  transmissions.\n"
- title: 12.  Construction of forwarding cache entries
  contents:
  - "12.  Construction of forwarding cache entries\n    This section details the building\
    \ of a MOSPF forwarding cache entry.\n    A high level discussion of this construction\
    \ has already been\n    presented in Sections 2.3, 2.3.1, 2.3.2, 3.2, and 4.1.\
    \ Forwarding\n    cache entries are built on demand, when a multicast datagram\
    \ is\n    received and no matching forwarding cache entry is found (see Step 6\n\
    \    of Section 11).  The parameters passed to the forwarding cache entry\n  \
    \  build process are: the datagram's source network (see Section 11.2)\n    and\
    \ its destination group address. These two parameters are called\n    SourceNet\
    \ and Group G in the following algorithm. The main steps in\n    the build process\
    \ are the following:\n    (1) Allocate the forwarding cache entry. Initialize\
    \ its Source\n        network to SourceNet, its Destination multicast group to\
    \ Group G\n        and its IP TOS field to match the multicast datagram's TOS.\n\
    \        Initialize its upstream node and list of downstream interfaces\n    \
    \    to NULL.\n    (2) For each Area A to which the calculating router is attached:\n\
    \        a.  Calculate Area A's datagram shortest-path tree. This\n          \
    \  calculation is described in Section 12.2 below. In many ways\n            it\
    \ is similar to the calculation of OSPF's intra-area\n            routes, described\
    \ in Section 16.1 of [OSPF]. The main\n            differences between the multicast\
    \ datagram shortest-path\n            tree calculation and OSPF's intra-area unicast\
    \ calculation\n            are listed in Section 12.2.9 below. As a product of\
    \ each\n            area's datagram shortest-path tree, the forwarding cache\n\
    \            entry's list of outgoing interfaces is (possibly) updated.\n    \
    \        Area A's datagram shortest-path tree is dependent on the\n          \
    \  datagram's IP TOS. Section 12.2 describes the TOS 0 datagram\n            shortest-path\
    \ tree. The modifications necessary for non-zero\n            TOS values are detailed\
    \ in Section 12.2.8.\n        b.  Possibly set the forwarding cache entry's upstream\
    \ node.\n            Only one of the calculating router's attached areas will\n\
    \            determine the forwarding cache entry's upstream node. This\n    \
    \        area is called the datagram's RootArea. The RootArea is\n           \
    \ initially set to NULL. After completing Area A's datagram\n            shortest-path\
    \ tree, the calculation in Section 12.2.7 will\n            determine whether\
    \ Area A is the datagram's RootArea.\n    (3) Update the forwarding cache entry's\
    \ list of outgoing interfaces,\n        according to the contents of the local\
    \ group database. This\n        ensures multicast delivery to group members residing\
    \ on the\n        calculating router's directly attached networks. This process\
    \ is\n        described in Section 12.3.\n    These main steps are described in\
    \ more detail below. The detailed\n    description begins with an explanation\
    \ of the major data structure\n    used by the datagram shortest-path tree calculation:\
    \ The Vertex data\n    structure.\n    12.1.  The Vertex data structure\n    \
    \    A datagram shortest-path tree is built by the Dijkstra or SPF\n        algorithm.\
    \ The algorithm is stated herein using graph-oriented\n        language: vertices\
    \ and links. Vertices are the area's routers\n        and transit networks, and\
    \ links are the router interfaces and\n        point-to-point lines that connect\
    \ them. Each vertex has the\n        following state information attached to it.\
    \ Basically, this\n        information indicates the current best path from the\
    \ SourceNet\n        to the vertex, and the position of the vertex relative to\
    \ the\n        calculating router. Note that a separate datagram shortest-path\n\
    \        tree is built for each area, and that the vertices described\n      \
    \  below are also specific to a single area (called Area A).\n        o   Vertex\
    \ type. Set to 1 for routers, 2 for transit networks.\n            Note that this\
    \ coding matches the coding for vertices listed\n            in the group-membership-LSA\
    \ (see Section A.3).\n        o   Vertex ID. A 32-bit identifier for the vertex.\
    \ For routers,\n            set to the router's OSPF Router ID. For transit networks,\n\
    \            set the IP address of the network's Designated Router. Note\n   \
    \         that this coding matches the coding for vertices listed in\n       \
    \     the group-membership-LSA (see Section A.3).\n        o   LSA. The link state\
    \ advertisement describing the vertex'\n            immediate neighborhood. Can\
    \ be discovered by performing a\n            database lookup in Area A's link\
    \ state database (see Section\n            12.2 of [OSPF]), with LS type set to\
    \ Vertex type and Link\n            State ID set to Vertex ID.\n        o   Parent.\
    \ In the current best path from SourceNet to the\n            vertex, the router/transit\
    \ network immediately preceding the\n            vertex. Note that the parent\
    \ can change as better and better\n            paths are found, up until the vertex\
    \ is installed on the\n            shortest-path tree.\n        o   IncomingLinkType.\
    \ This parameter is set to the type of link\n            that led to Vertex's\
    \ inclusion on the shortest-path tree.\n            Listed in order of decreasing\
    \ preference[22], the possible\n            types are: ILVirtual (virtual links),\
    \ ILDirect (vertex is\n            directly attached to SourceNet), ILNormal (either\
    \ router-\n            to-router or router-to-network links), ILSummary (OSPF\n\
    \            summary links), ILExternal (OSPF AS external links), or\n       \
    \     ILNone (the vertex is not on the shortest-path tree).\n        o   AssociatedInterface/Neighbor.\
    \ If the current best path from\n            SourceNet to the vertex goes through\
    \ the calculating router,\n            this parameter indicates the calculating\
    \ router's interface\n            (or neighbor) which leads to the vertex.\n \
    \       o   Cost. The cost, in terms of the OSPF link state metric, of\n     \
    \       the current best path from SourceNet to the vertex. Note\n           \
    \ that if the cost of the path is a combination of both\n            external\
    \ type 2 and internal OSPF metrics, that the vertex'\n            cost parameter\
    \ reflects both cost components. Remember that\n            the type 2 cost component\
    \ is always more significant than\n            the type 1 component.\n       \
    \ o   TTL. If the current best path from SourceNet to vertex goes\n          \
    \  through the calculating router, TTL is set to the number of\n            routers\
    \ between the calculating router and the vertex. This\n            includes the\
    \ calculating router, but does not include the\n            vertex itself.\n \
    \   12.2.  The SPF calculation\n        This section details the construction\
    \ of datagram shortest-path\n        trees.  Such a tree describes the path of\
    \ a multicast datagram\n        as it traverses an OSPF area. For a given datagram,\
    \ each router\n        in an OSPF area builds an identical tree. A router connected\
    \ to\n        multiple areas builds a separate datagram shortest-path tree for\n\
    \        each area.\n        The datagram shortest-path tree is built by the Dijkstra\
    \ or SPF\n        algorithm, which is the same algorithm used to discover OSPF's\n\
    \        intra-area unicast routes (see Section 16.1 of [OSPF]). The\n       \
    \ algorithm is stated herein and in [OSPF] using graph-oriented\n        language:\
    \ vertices and links. Vertices are the area's routers\n        and transit networks,\
    \ and links are the router interfaces and\n        point-to-point lines that connect\
    \ them. Basically, the algorithm\n        manipulates two lists of vertices: the\
    \ candidate list and the\n        forming shortest-path tree. The candidate list\
    \ consists of those\n        vertices to which paths have been discovered, but\
    \ for which the\n        optimality of the discovered paths is yet unknown. At\
    \ each cycle\n        of the algorithm, the vertex closest to the tree's root,\
    \ yet\n        still remaining on the candidate list, is moved from the\n    \
    \    candidate list to the shortest-path tree. Then the neighbors of\n       \
    \ the just processed vertex are examined for possible addition\n        to/modification\
    \ of the candidate list. The algorithm terminates\n        when the candidate\
    \ list is empty.\n        The datagram shortest-path tree for Area A is constructed\
    \ in the\n        following steps. The datagram's SourceNet and its destination\n\
    \        group G are inputs to the calculation (see Step 6 of Section\n      \
    \  11). The datagram shortest-path tree also depends on the IP Type\n        of\
    \ service specified in the datagrams' IP Header. However, a\n        discussion\
    \ of TOS is deferred until Section 12.2.8; all\n        calculations and costs\
    \ in the current section concern TOS 0\n        only. Call the router performing\
    \ the calculation Router RTX. At\n        each step (and in the subordinate Sections\
    \ 12.2.1 through\n        12.2.8) LSAs from Area A's link state database are examined.\
    \ In\n        all cases, any LSA having LS age equal to MaxAge is ignored. The\n\
    \        main body of the calculation is in Steps 4 and 5, which are\n       \
    \ repeated until the candidate list becomes empty:\n        (1) Initialize the\
    \ algorithm's data structures. Clear the\n            shortest-path tree.  Initialize\
    \ the state of each vertex in\n            Area A (i.e., the area's routers and\
    \ transit networks) to:\n            Parent set to NULL, IncomingLinkType set\
    \ to ILNone and\n            AssociatedInterface/Neighbor set to NULL.\n     \
    \   (2) Initialize the candidate list. One or more vertices are\n            initially\
    \ placed on the candidate list, depending on the\n            location of SourceNet\
    \ with respect to Area A and Router RTX.\n            This breaks down into the\
    \ following cases (which are named\n            for later reference):\n      \
    \      o   Case SourceIntraArea: SourceNet belongs to Area A. In\n           \
    \     this case, the candidate list is initialized as in\n                Section\
    \ 12.2.1.\n            o   Case SourceInterArea1: SourceNet belongs to an OSPF\
    \ area\n                that is not directly attached to Router RTX. In this\n\
    \                case, the candidate list is initialized as in Section\n     \
    \           12.2.2.\n            o   Case SourceInterArea2: SourceNet does not\
    \ belong to Area\n                A, but it still belongs to an OSPF area that\
    \ is directly\n                attached to Router RTX.  In this case, the candidate\n\
    \                list is initialized as in Section 12.2.3.\n            o   Case\
    \ SourceExternal: SourceNet is external to the OSPF\n                routing domain,\
    \ and Area A is not an OSPF stub area. In\n                this case, the candidate\
    \ list is initialized as in\n                Section 12.2.4.\n            o  \
    \ Case SourceStubExternal: SourceNet is external to the\n                OSPF\
    \ routing domain, and Area A is an OSPF stub area. In\n                this case,\
    \ the candidate list is initialized as in\n                Section 12.2.5.\n \
    \           Two different routers in Area A may select different\n           \
    \ initialization cases above. For example, consider the\n            network configuration\
    \ shown in Figure 4. When calculating\n            the Area 3 datagram shortest-path\
    \ tree for a datagram whose\n            source is Network N7 (e.g., from Host\
    \ H5) and destination is\n            Group Ma, Router RT11 would initialize the\
    \ candidate list\n            using Case SourceInterArea2 while Router RT9 would\
    \ use Case\n            SourceInterArea1. Likewise, if Area 3 were configured\
    \ as an\n            OSPF stub area and the datagram source was the external\n\
    \            Network N12, Router RT11 would use Case SourceStubExternal\n    \
    \        while Router RT9 would use Case SourceInterArea1! However,\n        \
    \    despite the possibility of routers selecting different\n            cases,\
    \ all routers in an area will still initialize the\n            candidate list\
    \ (and in fact, run the rest of the SPF\n            calculation) identically.\n\
    \        (3) If the candidate list is empty, the algorithm terminates.\n     \
    \   (4) Move the closest candidate vertex to the shortest-path tree.\n       \
    \     Select the vertex on the candidate list that is closest to\n           \
    \ SourceNet (i.e., has the smallest Cost value). If there are\n            multiple\
    \ possibilities, select transit networks over\n            routers. If there are\
    \ still multiple possibilities\n            remaining, select the vertex having\
    \ the highest Vertex ID.\n            Call the chosen vertex Vertex V. Remove\
    \ Vertex V from the\n            candidate list, and install it on the shortest-path\
    \ tree.\n            Next, determine whether Vertex V has been labelled with the\n\
    \            Destination multicast Group G. If so, it may cause the\n        \
    \    forwarding cache entry's list of outgoing\n            interfaces/neighbors\
    \ to be updated. See Section 12.2.6 for\n            details.\n        (5) Examine\
    \ Vertex V's neighbors for possible inclusion in the\n            candidate list.\
    \ Consider Vertex V's LSA. Each link in the\n            LSA describes a connection\
    \ to a neighboring router/network.\n            If the link connects to a stub\
    \ network, examine the next\n            link in the LSA. Otherwise, the link\
    \ (Link L) connects to a\n            neighboring transit node. Call this node\
    \ Vertex W. Perform\n            the following steps on Vertex W:\n          \
    \  a.  If W is already on the shortest-path tree, or if W's LSA\n            \
    \    does not contain a link back to vertex V, or if W's LSA\n               \
    \ has LS age of MaxAge, or if W is not multicast-capable\n                (indicated\
    \ by the MC-bit in the LSA's Options field),\n                examine the next\
    \ link in V's LSA.\n            b.  Otherwise determine the cost to associate\
    \ with the link\n                from V to W.  If SourceNet belongs to Area A\
    \ (Case\n                SourceIntraArea in Step 2), use the cost listed for Link\n\
    \                L in V's LSA. Otherwise, use the link's reverse cost:\n     \
    \           Examine W's LSA, and find the cost listed for the link\n         \
    \       connecting back to V. Actually, when V and W are both\n              \
    \  routers, there may be multiple links between them. In\n                this\
    \ case, use the smallest cost listed in W's LSA for\n                any of the\
    \ links connecting back to V and having the\n                same Type (as specified\
    \ in the Router-LSA; must be\n                either: point-to-point connection\
    \ or virtual link) as\n                Link L[23].\n            c.  Calculate\
    \ the cost from SourceNet to W, when using Link\n                L. It is the\
    \ sum of the cost of SourceNet to V (i.e.,\n                V's Cost parameter)\
    \ plus the link cost calculated in\n                Step 5b. Let this sum be Cost\
    \ C. If W is not yet on the\n                candidate list, install W on the\
    \ candidate list,\n                modifying its parameters as specified below\
    \ (Step 5d).\n                Otherwise, W is on the candidate list already. In\
    \ this\n                case, if:\n                o   C is less than W's current\
    \ Cost, update W's\n                    parameters on the candidate list as specified\
    \ below\n                    (Step 5d).\n                o   C is equal to W's\
    \ current Cost, then the following\n                    tiebreakers are invoked.\
    \ The type of Link L is\n                    compared to W's current IncomingLinkType,\
    \ and\n                    whichever link has the preferred type is chosen (the\n\
    \                    preference order of link types is listed in Section\n   \
    \                 12.1's definition of IncomingLinkType). If the link\n      \
    \              types are the same, then a link whose Parent is a\n           \
    \         transit network is preferred over one whose Parent\n               \
    \     is a router. If the links are still equivalent, the\n                  \
    \  link whose Parent has the higher Vertex ID is\n                    chosen.\
    \ Whenever Link L is chosen, W's parameters\n                    are modified\
    \ as below (Step 5d). Whenever the\n                    previously discovered\
    \ link is chosen, the next link\n                    in V's LSA is examined instead.\n\
    \                o   C is greater than W's current Cost, examine the next\n  \
    \                  link in V's LSA.\n            d.  At this point, a better candidate\
    \ path has been found to\n                Vertex W, using Link L. Modify Vertex\
    \ W's parameters\n                accordingly. W's Parent is set to Vertex V.\
    \ W's\n                IncomingLinkType is set to ILVirtual if Link L is a\n \
    \               virtual link, otherwise IncomingLinkType is set to\n         \
    \       ILNormal. W's Cost parameter is set to C. W's TTL and\n              \
    \  AssociatedInterface/Neighbor parameters are set\n                according\
    \ to one of the following cases:\n                o   Vertex V is the calculating\
    \ router itself. In this\n                    case, W's TTL parameter is set to\
    \ 1. If Link L is a\n                    virtual link, W's AssociatedInterface/Neighbor\
    \ is\n                    set to NULL. Otherwise, W's\n                    AssociatedInterface/Neighbor\
    \ is set to the non-\n                    virtual interface connecting the calculating\
    \ router\n                    to W which has the smallest cost value. Note that,\n\
    \                    in the reverse cost (inter-area and inter-AS\n          \
    \          multicast) cases, this may not be the interface\n                 \
    \   corresponding to Link L. However, since W is only\n                    concerned\
    \ with the node it is receiving the datagram\n                    from (the upstream\
    \ node; see Section 11), and not\n                    with the particular interface\
    \ the datagram is\n                    received on, the calculating router is\
    \ free to pick\n                    the sending interface when there are multiple\n\
    \                    connecting links.\n                o   Vertex V is upstream\
    \ of the calculating router\n                    (i.e., V's AssociatedInterface/Neighbor\
    \ is equal to\n                    NULL). In this case, Vertex W's TTL parameter\
    \ is set\n                    to 0, and its AssociatedInterface/Neighbor is set\
    \ to\n                    NULL.\n                o   V is a transit network, and\
    \ is directly downstream\n                    from the calculating router (i.e.,\
    \ V's\n                    AssociatedInterface/Neighbor is non-NULL and V's TTL\n\
    \                    is set to 1). W is then one of the calculating\n        \
    \            router's neighbors. In this case, W's TTL parameter\n           \
    \         is also set to 1. If network V has been configured\n               \
    \     for data-link unicasting (see Section B.2) or if V\n                   \
    \ is a non-broadcast network, W's\n                    AssociatedInterface/Neighbor\
    \ is set to W itself (a\n                    neighbor of the calculating router).\
    \ Otherwise, W's\n                    AssociatedInterface/Neighbor is set to the\n\
    \                    calculating router's interface to Network V.\n          \
    \      o   Vertex V is downstream from the calculating router\n              \
    \      (i.e., V's AssociatedInterface/Neighbor is non-\n                    NULL),\
    \ and either a) V is a router or b) V's TTL\n                    parameter is\
    \ greater than 1. In these cases, W's\n                    AssociatedInterface/Neighbor\
    \ parameter is copied\n                    directly from V.  If V is a router,\
    \ W's TTL\n                    parameter is set to V's TTL parameter incremented\
    \ by\n                    one. If V is a transit network, W's TTL parameter is\n\
    \                    set directly to V's TTL parameter.\n        (6) If the candidate\
    \ list is non-empty, go to Step 4. Otherwise,\n            the algorithm terminates.\n\
    \        After the datagram shortest-path tree for Area A is complete,\n     \
    \   the calculating router (RTX) must decide whether Area A, out of\n        all\
    \ of RTX's attached areas, determines the forwarding cache\n        entry's upstream\
    \ node. This determination is described in\n        Section 12.2.7.\n        Examples\
    \ of the above SPF calculation, with particular emphasis\n        on the tiebreaking\
    \ rules, are given in Appendix C.\n        12.2.1.  Candidate list Initialization:\
    \ Case SourceIntraArea\n            In this case, SourceNet belongs to Area A.\
    \  The candidate\n            list is then initialized as follows. Start with\
    \ the LSA\n            listed as Link State Origin in the matching OSPF routing\n\
    \            table entry.  If this LSA is not multicast-capable (i.e, its\n  \
    \          Options field has the MC-bit clear) the candidate list\n          \
    \  should be set to NULL. Otherwise, the vertex identified by\n            the\
    \ LSA is installed on the candidate list, setting its\n            vertex parameters\
    \ as follows: IncomingLinkType set to\n            ILDirect, Cost set to 0, Parent\
    \ to NULL and\n            AssociatedInterface/Neighbor to NULL.\n           \
    \ As a consequence of this initialization, note that if\n            SourceNet\
    \ is a stub network, then the datagram shortest-path\n            tree will not\
    \ actually be rooted at the datagram source, but\n            will instead be\
    \ rooted at the MOSPF router that attaches the\n            stub network to the\
    \ rest of the MOSPF system. For example,\n            consider the network configuration\
    \ shown in Figure 4. When\n            calculating the Area 2 datagram shortest-path\
    \ tree for a\n            datagram whose source is Network N7 (e.g., from Host\
    \ H5) and\n            destination is Group Ma, Router RT11 (and all other routers\n\
    \            attached to Area 2) will begin with the candidate list set\n    \
    \        to Router RT8. As another example, the datagram shortest-\n         \
    \   path tree pictured in Figure 3 is really rooted at Router\n            RT3\
    \ instead of Network N4.\n        12.2.2.  Candidate list Initialization: Case\
    \ SourceInterArea1\n            In this case, SourceNet belongs to an OSPF area\
    \ that is not\n            directly attached to the calculating router (RTX).\
    \  The\n            candidate list is then initialized as follows. Examine the\n\
    \            Area A summary-link-LSAs advertising SourceNet. For each\n      \
    \      such summary-link-LSA: if both a) the MC-bit is set in the\n          \
    \  LSA's Options field and b) the advertised cost is not equal\n            to\
    \ LSInfinity, then the vertex representing the LSA's\n            advertising\
    \ area border router is added to the candidate\n            list. An added vertex'\
    \ state is initialized as:\n            IncomingLinkType set to ILSummary, Cost\
    \ to whatever is\n            advertised in the LSA, Parent to NULL and\n    \
    \        AssociatedInterface/Neighbor to NULL.\n            For example, consider\
    \ the network configuration shown in\n            Figure 4.  When calculating\
    \ the Area 1 datagram shortest-\n            path tree for a datagram whose source\
    \ is Network N7 (e.g.,\n            from Host H5) and destination is Group Ma,\
    \ Router RT2 would\n            initialize the candidate list to contain the two\
    \ area border\n            routers RT3 (with a cost of 20) and RT4 (with a cost\
    \ of 19).\n            See Figure 6 for more details.\n        12.2.3.  Candidate\
    \ list Initialization: Case SourceInterArea2\n            In this case, SourceNet\
    \ belongs to an OSPF area other than\n            Area A, but one that is still\
    \ directly attached to the\n            calculating router (RTX).  The candidate\
    \ list is then\n            initialized in the following two steps:\n        \
    \    (1) Find the Area A summary-link-LSA that best matches\n                SourceNet,\
    \ excluding those summary-link-LSAs specifying\n                cost LSInfinity\
    \ or having unreachable Advertising\n                Routers[24].  A matching\
    \ summary-link-LSA is one that\n                advertises a range of addresses\
    \ containing SourceNet;\n                the best matching is as usual the most\
    \ specific match.\n                Let SourceRange be the network described by\
    \ the best\n                matching summary-link-LSA.\n            (2) Similar\
    \ to the logic in the SourceInterArea1 case,\n                examine all the\
    \ Area A summary-link-LSAs which advertise\n                SourceRange. For each\
    \ such summary-link-LSA: if both a)\n                the MC-bit is set in the\
    \ LSA's Options field, b) the\n                advertised cost is not equal to\
    \ LSInfinity and c) the\n                Advertising Router is reachable, then\
    \ the vertex\n                representing the LSA's Advertising Router is added\
    \ to\n                the candidate list. An added vertex' state is\n        \
    \        initialized as: IncomingLinkType set to ILSummary, Cost\n           \
    \     to whatever is advertised in the LSA, Parent to NULL and\n             \
    \   AssociatedInterface/Neighbor to NULL.\n            The reason why SourceRange\
    \ is used, instead of simply using\n            SourceNet (as was done in case\
    \ SourceInterArea1), is that\n            routing information may have been collapsed\
    \ at area\n            boundaries. In order for Area A's area border routers and\n\
    \            its internal routers to construct the same Area A datagram\n    \
    \        shortest-path tree, they must both start at SourceRange -\n         \
    \   Area A's internal routers know nothing about SourceNet. Note\n           \
    \ that SourceRange is not discovered simply by looking at the\n            calculating\
    \ router's configured set of area address ranges,\n            in order to avoid\
    \ dependence on the configured area address\n            ranges being synchronized\
    \ across all area border routers.\n            For example, consider the network\
    \ configuration shown in\n            Figure 4.  When calculating the Area 2 datagram\
    \ shortest-\n            path tree for a datagram whose source is Network N11\
    \ and\n            destination is Group Ma, Router RT11 would calculate\n    \
    \        SourceRange to be the collection: Networks N9-N11 and Host\n        \
    \    H1. It would then initialize the candidate list to contain\n            itself\
    \ (RT11) only, with an associated Cost of 1 (since RT11\n            is advertising\
    \ Networks N9-N11 and Host H1 in a summary-\n            link-LSA with a cost\
    \ of 1).\n        12.2.4.  Candidate list Initialization: Case SourceExternal\n\
    \            In this case, SourceNet is external to the OSPF routing\n       \
    \     domain, and Area A is not an OSPF stub area.  The candidate\n          \
    \  list is then initialized as follows. Note that an attempt\n            may\
    \ be made to add a Vertex W to the candidate list when W\n            already\
    \ belongs to the candidate list. When this happens,\n            W's vertex parameters\
    \ are updated if the Cost parameter it\n            would be added with is better[25]\
    \ (closer to SourceNet) than\n            its previous value. When the costs are\
    \ the same, W's\n            parameters are still modified if the IncomingLinkType\
    \ it\n            would be added with is better (see IncomingLinkType's\n    \
    \        definition in Section 12.1) than its previous value.\n            For\
    \ each AS external-link-LSA advertising SourceNet, the\n            following\
    \ steps are performed:\n            o   If the AS external-link-LSA's MC-bit is\
    \ clear or if its\n                advertising router is not reachable, then the\
    \ AS\n                external-link-LSA is not used. AS external-link-LSAs\n \
    \               having their MC-bit set and advertising a cost of\n          \
    \      LSInfinity can be used; these LSAs describe paths that\n              \
    \  can be used for multicast, but not unicast, data traffic\n                (see\
    \ Section 11.2).\n            o   If the AS external-link-LSA's Forwarding address\
    \ field\n                is 0.0.0.0, the following vertices are added to the\n\
    \                candidate list. If the Advertising AS boundary router\n     \
    \           (call it ASBR) belongs to Area A, the vertex\n                representing\
    \ the AS boundary router is added to the\n                candidate list using\
    \ parameters: IncomingLinkType set to\n                ILExternal, Cost to whatever\
    \ is advertised in the LSA,\n                Parent to NULL and AssociatedInterface/Neighbor\
    \ to NULL.\n                Then, regardless of whether ASBR belongs to Area A,\
    \ all\n                Area A area border routers that are advertising\n     \
    \           reachable multicast-capable (MC-bit set) type 4\n                summary-link-LSAs\
    \ for ASBR are added to the candidate\n                list. Each such area border\
    \ router is added with the\n                parameters: IncomingLinkType set to\
    \ ILSummary, Cost to\n                the sum of whatever is advertised in the\
    \ type 4\n                summary-link-LSA plus the value in the original AS\n\
    \                external-link-LSA, Parent to NULL and\n                AssociatedInterface/Neighbor\
    \ to NULL.\n            o   If the AS external-link-LSA's Forwarding address field\n\
    \                is non-zero, the Forwarding address is looked up in the\n   \
    \             OSPF routing table. Then processing breaks into one of\n       \
    \         the following cases:\n                o   The Forwarding address is\
    \ not usable. In this case,\n                    nothing is added to the candidate\
    \ list. The\n                    Forwarding address is not usable if either it\
    \ has no\n                    matching routing table entry, or if the matching\n\
    \                    routing table entry is neither of type intra-area\n     \
    \               nor of type inter-area.\n                o   The Forwarding address\
    \ belongs to Area A[26]: the\n                    Forwarding address' matching\
    \ routing table entry has\n                    Path-type of intra-area and its\
    \ Associated area is\n                    Area A. In this case, the vertex represented\
    \ by the\n                    matching routing table entry's Link State Origin\n\
    \                    field is added to the candidate list (assuming that\n   \
    \                 the vertex is multicast-capable). The vertex is\n          \
    \          added with the parameters: IncomingLinkType set to\n              \
    \      ILExternal, Cost to whatever was advertised in the\n                  \
    \  original AS external-link-LSA, Parent to NULL and\n                    AssociatedInterface/Neighbor\
    \ to NULL.\n                o   The Forwarding address belongs to an area that\
    \ is\n                    not attached to Router RTX[27]: the Forwarding\n   \
    \                 address' matching routing table entry has Path-type\n      \
    \              of inter-area. Call the network represented by the\n          \
    \          matching routing table entry ForwardNet. For each\n               \
    \     reachable multicast-capable summary-link-LSA (in\n                    Area\
    \ A) advertising ForwardNet, add the LSA's\n                    advertising area\
    \ border router to the candidate list\n                    using parameters: IncomingLinkType\
    \ set to ILSummary,\n                    Cost to the sum of whatever is advertised\
    \ in the\n                    summary-link-LSA plus the value in the original\
    \ AS\n                    external-link-LSA, Parent to NULL and\n            \
    \        AssociatedInterface/Neighbor to NULL.\n                o   The Forwarding\
    \ address belongs to another one of\n                    Router RTX's attached\
    \ areas[28]: the Forwarding\n                    address' matching routing table\
    \ entry has Path-type\n                    of intra-area and its associated Area\
    \ is other than\n                    Area A.  Call the network represented by\
    \ the\n                    matching routing table entry ForwardNet. First find\n\
    \                    the Area A summary-link-LSA that best matches\n         \
    \           ForwardNet, excluding those summary-link-LSAs\n                  \
    \  specifying cost LSInfinity or having unreachable\n                    Advertising\
    \ Routers. Let ForwardRange be the network\n                    described by the\
    \ best matching summary-link-LSA.\n                    Then, for each reachable\
    \ multicast-capable summary-\n                    link-LSA (in Area A) advertising\
    \ ForwardRange, add\n                    the LSA's advertising area border router\
    \ to the\n                    candidate list using parameters: IncomingLinkType\n\
    \                    set to ILSummary, Cost to the sum of whatever is\n      \
    \              advertised in the summary-link-LSA plus the value in\n        \
    \            the original AS external-link-LSA, Parent to NULL\n             \
    \       and AssociatedInterface/Neighbor to NULL.\n            The above calculation\
    \ can be restated as follows. Each of\n            Area A's inter-area multicast\
    \ forwarders and inter-AS\n            multicast forwarders are examined. Those\
    \ that have\n            multicast-capable paths to SourceNet (represented as\
    \ either\n            a multicast-capable AS external link or the concatenation\
    \ of\n            a Type 4 summary link and a multicast-capable AS external\n\
    \            link) are added to the candidate list as router vertices.\n     \
    \       (It is possible that, when considering a router that is both\n       \
    \     an inter-area multicast forwarder and an inter-AS multicast\n          \
    \  forwarder, two equal cost paths exist to SourceNet, one an\n            AS\
    \ external link and the other a concatenation of a Type 4\n            summary\
    \ link and an AS external link. In this case, the\n            concatenation of\
    \ the Type 4 summary link and the AS external\n            link is preferred).\
    \ The added vertex' state is set as\n            follows: IncomingLinkType set\
    \ to ILSummary if the path is\n            represented as a concatenation of a\
    \ Type 4 summary link and\n            an AS external link, IncomingLinkType set\
    \ to ILExternal\n            otherwise, Cost set to the cost of the shortest path\
    \ from\n            vertex to SourceNet, Parent set to NULL and\n            AssociatedInterface/Neighbor\
    \ set to NULL.\n            For example, consider the network configuration shown\
    \ in\n            Figure 4.  When calculating the Area 2 datagram shortest-\n\
    \            path tree for a datagram whose source is Network N14 and\n      \
    \      destination is Group Ma, the candidate list would be\n            initialized\
    \ to the two routers RT7 at a cost of 14 and RT10\n            at a cost of 19.\
    \ This assumes that the external costs\n            pictured in Figure 4 are external\
    \ type 1s.\n        12.2.5.  Candidate list Initialization: Case\n           \
    \ SourceStubExternal\n            In this case, SourceNet is external to the OSPF\
    \ routing\n            domain, and Area A is an OSPF stub area.  The candidate\
    \ list\n            is then initialized similarly to case SourceInterArea1. The\n\
    \            Area A summary-link-LSAs advertising DefaultDestination are\n   \
    \         examined. For each such summary-link-LSA having both its\n         \
    \   MC-bit set and its advertised cost not equal to LSInfinity,\n            the\
    \ vertex representing the LSA's advertising area border\n            router is\
    \ added to the candidate list. An added vertex'\n            state is initialized\
    \ as: IncomingLinkType set to ILSummary,\n            Cost to whatever is advertised\
    \ in the LSA, Parent to NULL\n            and AssociatedInterface/Neighbor to\
    \ NULL.\n            The most likely outcome of the above is that all of stub\n\
    \            Area A's inter-area multicast forwarders will be installed\n    \
    \        on the candidate list, with appropriate costs.\n        12.2.6.  Processing\
    \ labelled vertices\n            When encountered during the SPF calculation,\
    \ vertices\n            labelled with the destination multicast group (Group G)\
    \ may\n            cause the forwarding cache entry's list of downstream\n   \
    \         interfaces/neighbors to be modified.  A Vertex V in Area A\n       \
    \     is labelled with Group G if and only if at least one of the\n          \
    \  following holds:\n            (1) V is a router, and its router-LSA indicates\
    \ that it is a\n                wild-card multicast receiver (i.e., bit W in its\n\
    \                router-LSA is set). This may be true when V is an\n         \
    \       inter-area or inter-AS multicast forwarder.\n            (2) V is listed\
    \ in the body of a group membership-LSA. In\n                particular, find\
    \ the originator of Vertex V's LSA; call\n                it Router Y. Then find\
    \ the group-membership-LSA in Area\n                A's link state database which\
    \ has Link State ID = Group\n                G and Advertising Router = Router\
    \ Y (see Section A.3).\n                If this group-membership-LSA exists, and\
    \ if Vertex V is\n                listed in the body of the LSA (see Sections\
    \ 10 and A.3),\n                then Vertex V is labelled with Group G.\n    \
    \        When Vertex V is added to the shortest-path tree in Step 4\n        \
    \    of Section 12.2, and if Vertex V is both downstream from the\n          \
    \  calculating router (i.e., Vertex V's\n            AssociatedInterface/Neighbor\
    \ is non-NULL) and labelled with\n            Group G, then Vertex V's AssociatedInterface/Neighbor\
    \ is\n            added to the forwarding cache entry's list of downstream\n \
    \           interfaces/neighbors. In addition, Vertex V's TTL value is\n     \
    \       attached to the added downstream interface/neighbor. If the\n        \
    \    particular interface/neighbor had already been added to the\n           \
    \ list of downstream interfaces/neighbors, the list is simply\n            modified\
    \ by setting the downstream interface/neighbor's TTL\n            value to the\
    \ minimum of its existing TTL value and Vertex\n            V's TTL value.\n \
    \       12.2.7.  Merging datagram shortest-path trees\n            After the datagram\
    \ shortest-path tree for Area A is\n            complete, the calculating router\
    \ (RTX) must decide whether\n            Area A, out of all of its attached areas,\
    \ determines the\n            forwarding cache entry's upstream node.  This is\
    \ done by\n            examining RTX's position on the Area A datagram shortest-\n\
    \            path tree, which is in turn described by RTX's Area A Vertex\n  \
    \          data structure. If RTX's Vertex parameter IncomingLinkType\n      \
    \      is either ILNone (RTX is not on the tree), ILVirtual or\n            ILSummary,\
    \ then some area other than Area A will determine\n            the upstream node.\
    \ Otherwise, Area A might possibly\n            determine the upstream node (i.e.,\
    \ may be selected the\n            RootArea), depending on the following tiebreakers[29]:\n\
    \            o   If RootArea has not been set, then set RootArea to Area\n   \
    \             A. Otherwise, compare the present RootArea to Area A in\n      \
    \          the following:\n            o   Choose the area that is \"nearest to\
    \ the source\". Nearest\n                to the source depends on each area's\
    \ candidate list\n                initialization case, as it occurs in Step 2\
    \ of Section\n                12.2. The initialization cases, listed in order\
    \ of\n                decreasing preference (or nearest to farthest) are:\n  \
    \              SourceIntraArea, SourceInterArea1, SourceExternal and\n       \
    \         SourceStubExternal. Areas whose candidate list\n                initialization\
    \ falls into case SourceInterArea2 are\n                never used as the RootArea.\
    \ As an example, consider the\n                network configuration shown in\
    \ Figure 4. When\n                calculating the datagram shortest-path tree\
    \ for a\n                datagram whose source is Network N7 (e.g., from Host\
    \ H5)\n                and destination is Group Ma, Router RT11 would set its\n\
    \                RootArea to Area 2 (Case SourceIntraArea) instead of\n      \
    \          Area 3 (Case SourceInterArea2) or the backbone Area 0\n           \
    \     (Case SourceInterArea).\n            o   If there are still two equally\
    \ good areas, and one of\n                them is the backbone, set RootArea to\
    \ the backbone (Area\n                0).\n            o   If there are still\
    \ two equally good areas, set RootArea\n                to the area whose datagram\
    \ shortest-path tree provides\n                the shortest path from SourceNet\
    \ to RTX. This is a\n                comparison of RTX's Vertex parameter Cost\
    \ in the two\n                areas.\n            o   If there are still two equally\
    \ good areas, set RootArea\n                to one with the highest OSPF Area\
    \ ID.\n            If the above has set the RootArea to be Area A, the\n     \
    \       forwarding cache entry's upstream node must be set\n            accordingly.\
    \ This setting depends on the IncomingLinkType in\n            RTX's Area A Vertex\
    \ structure. If IncomingLinkType is equal\n            to ILDirect, the upstream\
    \ node is set to the appropriate\n            directly-connected stub network.\
    \ If equal to ILNormal, the\n            upstream node is set to the Parent field\
    \ in RTX's Area A\n            Vertex structure. If equal to ILExternal, the upstream\
    \ node\n            is set to the placeholder EXTERNAL.\n        12.2.8.  TOS\
    \ considerations\n            The previous sections 12.2 through 12.2.7 described\
    \ the\n            construction of a TOS 0 (default TOS) datagram shortest-path\n\
    \            tree. However, in a TOS-capable router, a separate tree may\n   \
    \         be built for each TOS. If a TOS-capable router receives a\n        \
    \    multicast datagram that specifies a non-zero TOS X, it first\n          \
    \  builds the TOS 0 datagram shortest-path tree.  Then, if all\n            the\
    \ routers on the pruned tree are TOS-capable, a separate\n            TOS X datagram\
    \ shortest-path tree is calculated[30].\n            Otherwise, the TOS 0 tree\
    \ is used for all datagrams,\n            regardless of their specified TOS.\n\
    \            To determine whether there are any TOS-incapable routers on\n   \
    \         the pruned TOS 0 tree, the following additions are made to\n       \
    \     Section 12.2's tree calculation:\n            o   A new piece of state information\
    \ is added to each\n                vertex: TOS-capable path. This indicates whether\
    \ the\n                present path from SourceNet to vertex, as represented on\n\
    \                the datagram shortest-path tree, contains only TOS-\n       \
    \         capable routers.\n            o   The TOS-capable path parameter is\
    \ calculated when the\n                vertex is first added to the candidate\
    \ list and\n                recalculated when/if the vertex' position on the\n\
    \                candidate list is modified (see Section 12.2's Step 2\n     \
    \           and Step 5d). The parameter is set to TRUE if both the\n         \
    \       vertex itself is TOS-capable and the vertex' parent has\n            \
    \    its TOS-capable path parameter set to TRUE; otherwise,\n                TOS-capable\
    \ path is set to FALSE.\n            o   All routers on the TOS 0 datagram shortest-path\
    \ tree are\n                TOS-capable if and only if, whenever a vertex labelled\n\
    \                with Group G is added to the shortest-path tree (Section\n  \
    \              12.2.6), the value of the vertex' TOS-capable path\n          \
    \      parameter is TRUE.\n            The source of the multicast datagram is\
    \ always located using\n            a TOS 0 routing table lookup, regardless of\
    \ the datagram's\n            TOS classification (see Section 11.2). If the calculating\n\
    \            router is not capable of TOS-based routing, it calculates\n     \
    \       only TOS 0 datagram shortest-path trees, and uses them to\n          \
    \  route datagrams independent of TOS value.  Otherwise, when\n            calculating\
    \ the TOS X datagram shortest-path tree, the\n            algorithm in Section\
    \ 12.2 is used, with the modifications\n            listed below.\n          \
    \  o   When calculating RangeNet and ForwardRange in Sections\n              \
    \  12.2.3 and 12.2.4 respectively, only summary-link-LSAs\n                having\
    \ TOS 0 cost of LSInfinity are excluded (no change\n                from the TOS\
    \ 0 case). However, when adding vertices to\n                the candidate list\
    \ in Sections 12.2.2 through 12.2.5,\n                the TOS X cost of the summary\
    \ links and/or AS external\n                links (and not the TOS 0 cost) are\
    \ reflected in the\n                added vertices' Cost parameter.\n        \
    \    o   In Step 5 of Section 12.2, the TOS X cost of Link L (in\n           \
    \     the appropriate direction) is used, not the TOS 0 cost.\n            o \
    \  Non-TOS-routers are not added to the candidate list, and\n                are\
    \ thus excluded from the trees.\n        12.2.9.  Comparison to the unicast SPF\
    \ calculation\n            There are many similarities between the construction\
    \ of a\n            multicast datagram's shortest-path trees in Section 12.2 and\n\
    \            OSPF's intra-area route calculation for unicast traffic\n       \
    \     (Section 16.1 of [OSPF]). Both have been described in terms\n          \
    \  of Dijkstra's algorithm. However, there are some\n            differences.\
    \ The major differences are listed below:\n            o   In the multicast case,\
    \ the datagram SPF calculation is\n                rooted at the datagram's source.\
    \ In the unicast case,\n                each router is the root of its own unicast\
    \ intra-area\n                SPF calculation.\n            o   In the multicast\
    \ case, the datagram shortest-path tree\n                is a true tree; i.e.,\
    \ between any two nodes on the tree\n                there is one path. However,\
    \ due to the provision for\n                equal-cost multipath in [OSPF], the\
    \ unicast SPF\n                calculation may add additional links to the shortest-\n\
    \                path tree.\n            o   In order to avoid unwanted replication\
    \ of multicast\n                datagrams, MOSPF ensures that, for any given datagram,\n\
    \                each router builds the exact same datagram shortest-path\n  \
    \              tree. This forces two differences from the unicast SPF\n      \
    \          calculation. First, it eliminates the possibility of\n            \
    \    equal-cost multipath. Secondly, when the MOSPF system\n                contains\
    \ multiple alternate paths, the algorithm must\n                ensure that each\
    \ MOSPF router deterministically chooses\n                the same alternative.\
    \ For this reason, tie-breaking\n                mechanisms have been specified\
    \ in Steps 2, 4 and 5b of\n                Section 12.2.\n            o   The\
    \ calculation of datagram shortest path trees takes\n                into account\
    \ only those links that connect transit nodes\n                (i.e, router to\
    \ router or router to transit network\n                links). The unicast SPF\
    \ calculation in Section 16.1 of\n                [OSPF] must additionally examine\
    \ links to stub networks,\n                although this is done after all the\
    \ transit links are\n                examined.\n            o   While both the\
    \ multicast and unicast trees select\n                shortest paths on the basis\
    \ of the OSPF metric, the\n                datagram shortest-path trees also keep\
    \ track of the TTL\n                values between the root (datagram source)\
    \ and all\n                destinations (group members). This enables more\n \
    \               efficient implementation of IP multicast's \"expanding\n     \
    \           ring search\" (see Section 2.3.4).\n            o   In the multicast\
    \ case, the algorithm is sometimes forced\n                to use the link state\
    \ cost for the reverse direction\n                (i.e, the cost towards, instead\
    \ of away from, the\n                source). This is because the costs of OSPF\
    \ summary-\n                link-LSAs and AS external-link-LSAs, which sometime\
    \ form\n                the base of the multicast datagram shortest-path trees,\n\
    \                are specified in the reverse direction (from the\n          \
    \      multicast perspective).\n            o   There are potentially many more\
    \ datagram shortest-path\n                trees that need to be calculated (one\
    \ for each source\n                net, destination group and TOS combination),\
    \ than the\n                limited number of unicast SPF trees (one per each\
    \ TOS).\n                This is the main reason that the datagram shortest-path\n\
    \                trees are calculated on demand; it is hoped that this\n     \
    \           will spread the cost of the SPF calculations over\n              \
    \  time[31].\n            o   The way that the two algorithms handle TOS is different.\n\
    \                In the multicast case, if a TOS-incapable node is\n         \
    \       encountered during the calculation of the TOS 0 datagram\n           \
    \     shortest-path tree, the TOS 0 datagram shortest-path\n                tree\
    \ is used instead of trying to build the TOS X tree\n                (see Section\
    \ 12.2.8). In the unicast case, the TOS X\n                tree is always used,\
    \ only falling back on the TOS 0\n                paths when a TOS X path does\
    \ not exist.\n    12.3.  Adding local database entries to the forwarding cache\n\
    \        After the datagram shortest-path trees have been built for each\n   \
    \     attached area, the forwarding cache has an upstream node and a\n       \
    \ list of downstream interfaces. In order to ensure the delivery\n        of the\
    \ multicast datagram to group members on directly attached\n        networks,\
    \ the local group database (Section 8.4) must then be\n        scanned for possible\
    \ addition to the list of downstream\n        interfaces. All local group database\
    \ entries having Group G as\n        MulticastGroup are examined.  Suppose [Group\
    \ G, Network N] is\n        one such entry. If the calculating router (RTX) is\
    \ Network N's\n        Designated Router, then RTX's Network N interface is added\
    \ to\n        the list of outgoing interfaces, with a TTL of 1. If the Network\n\
    \        N interface was already present in the list of outgoing\n        interfaces,\
    \ its TTL is simply set to 1.\n        For example, consider the network configuration\
    \ shown in Figure\n        4 when calculating the forwarding cache entry for a\
    \ datagram\n        whose source is Network N4 (e.g., from Host H2) and destination\n\
    \        is Group Mb. After calculating the datagram shortest-path tree\n    \
    \    for Area 1, Router RT2 would have set it upstream node to\n        Network\
    \ N3 and its list of downstream interfaces to NULL. But\n        then looking\
    \ at its local group database, it would add its\n        Network N2 interface\
    \ with a TTL of 1 to its list of downstream\n        interfaces.\n"
- title: 13.  Maintaining the forwarding cache
  contents:
  - "13.  Maintaining the forwarding cache\n    A MOSPF router may, for resource reasons,\
    \ limit the size of its\n    forwarding cache. At any time cache entries can be\
    \ purged to make\n    room for newer entries, since the purged entries can always\
    \ be\n    rebuilt when necessary. This memo does not specify an algorithm to\n\
    \    select which entries to purge. However, care should be taken to\n    ensure\
    \ that any particular entry is not continually rebuilt and then\n    purged again\
    \ (i.e., thrashing should be avoided).\n    The building of the forwarding cache\
    \ has been previously described\n    in Section 12. There are events that force\
    \ one or more forwarding\n    cache entries to be deleted; these events are described\
    \ below. Note\n    that deleted cache entries will be rebuilt on an as-needed\
    \ basis.\n    o   When the internal topology of the MOSPF system changes, all\n\
    \        forwarding cache entries must be deleted. This is because\n        internal\
    \ topology changes may invalidate the previously\n        calculated datagram\
    \ shortest-path trees. Since the multicast\n        routing calculation depends\
    \ on the result of the unicast routing\n        calculations, the forwarding cache\
    \ should be cleared after the\n        unicast routing table is rebuilt.  Internal\
    \ topology changes are\n        indicated when both a) a new instance of either\
    \ a router-LSA or\n        a network-LSA is received and b) the contents of the\
    \ new\n        advertisement (other than the LS age, LS sequence number and LS\n\
    \        checksum fields) are different from the previous instance. This\n   \
    \     covers routers and links going up or down, routers that change\n       \
    \ from being multicast-incapable to being multicast-capable, etc.\n    o   When\
    \ a Type 3 summary-link-LSA (network summary) changes, those\n        forwarding\
    \ cache entries specifying datagram sources belonging\n        to the range of\
    \ addresses described by the updated summary-\n        link-LSA must be deleted.\
    \ See Sections 12.2.3 and 12.2.5.\n    o   Suppose that the content of an AS external-link-LSA\
    \ changes. If\n        the AS external-link-LSA describes an external network\
    \ N, then\n        all forwarding cache entries specifying an external source\n\
    \        network that is contained in N or that contains N (i.e.,\n        external\
    \ sources that are a subset or a superset of N) must be\n        deleted.\n  \
    \  o   When membership in a multicast group changes, all forwarding\n        cache\
    \ entries for the particular group must be deleted. Group\n        membership\
    \ changes are indicated when either a) the content of a\n        group-membership-LSA\
    \ changes or b) an entry in the local group\n        database (see Section 8.4)\
    \ changes.\n    o   When the cost to an AS boundary router or to a forwarding\n\
    \        address specified by one or more AS external-link-LSAs changes,\n   \
    \     all forwarding cache entries specifying an external network as\n       \
    \ datagram source must be deleted. In this case, potentially all\n        inter-AS\
    \ datagram shortest-path trees have been invalidated. The\n        forwarding\
    \ cache entries should be deleted after the new best\n        cost to the AS boundary\
    \ router/forwarding address has been\n        calculated.\n"
- title: 14.  Other additions to the OSPF specification
  contents:
  - "14.  Other additions to the OSPF specification\n    MOSPF requires some modifications\
    \ to the base OSPF protocol. All\n    these modifications are backward-compatible.\
    \ A router running MOSPF\n    will still interoperate with an OSPF router when\
    \ forwarding unicast\n    traffic. Most of the modifications have been described\
    \ earlier in\n    this document. This section collects together those changes\
    \ which\n    have yet to be mentioned, organizing them by the affected Section\
    \ of\n    [OSPF].\n    14.1.  The Designated Router\n        This functionality\
    \ is described in Section 7.3 of [OSPF]. In\n        OSPF, a network's Designated\
    \ Router has two specialized roles.\n        First, it originates the network's\
    \ network-LSA. Second, it\n        controls the flooding on the network, in that\
    \ all of the routers\n        on the network synchronize with the Designated Router\
    \ (and the\n        Backup Designated Router) only.  For these reasons[32], when\
    \ one\n        or more of the network's routers are running MOSPF, the\n     \
    \   Designated Router should be running MOSPF also.  This can be\n        ensured\
    \ by assigning all non-multicast routers the Router\n        Priority of 0.\n\
    \        In MOSPF, the Designated Router also has the additional\n        responsibility\
    \ of monitoring the network's multicast group\n        membership. This is done\
    \ by periodically sending Host Membership\n        Queries, and receiving Host\
    \ Membership Reports in response (see\n        Section 9). This is yet another\
    \ reason why the Designated Router\n        must be multicast-capable.\n    14.2.\
    \  Sending Hello packets\n        This functionality is described in Section 9.5\
    \ of [OSPF]. A\n        MOSPF router sets the MC-bit in the Options field of its\
    \ Hello\n        packets. This indicates that the router is multicast-capable;\
    \ it\n        does not necessarily indicate the state of the sending\n       \
    \ interface's IPMulticastForwarding parameter (see Section B.2).\n        Setting\
    \ the MC-bit in Hellos is done strictly for informational\n        purposes. Neighbors\
    \ receiving the router's Hello packets do not\n        act on the state of the\
    \ MC-bit. A neighbor's multicast-\n        capability is learned instead during\
    \ the Database Exchange\n        Process (see Section 14.4).\n    14.3.  The Neighbor\
    \ state machine\n        This functionality is described in Section 10.3 of [OSPF].\
    \ When\n        a neighbor enters state Exchange, the neighbor Database summary\n\
    \        list is initialized (see the OSPF neighbor FSM entry for State:\n   \
    \     ExStart and Event: NegotiationDone). This list describes of the\n      \
    \  portion of the router's link state database that needs to be\n        synchronized\
    \ with the neighbor.  Group-membership-LSAs are\n        included in the neighbor\
    \ Database summary list if and only if\n        the neighbor is multicast-capable.\
    \ The neighbor's multicast\n        capability is learned by examining the neighbor's\
    \ Database\n        Description packets (see Section 14.4).\n    14.4.  Receiving\
    \ Database Description packets\n        This functionality is described in Section\
    \ 10.6 of [OSPF]. A\n        neighbor's multicast-capability is learned through\
    \ received\n        Database Description packets. When the Database Description\n\
    \        packet is received that transitions the neighbor from ExStart to\n  \
    \      Exchange, the state of the MC-bit in the packet's Options field\n     \
    \   is examined. The neighbor is multicast-capable if and only if\n        the\
    \ MC-bit is set.\n        The neighbor's multicast capability controls whether\
    \ group-\n        membership-LSAs are summarized to the neighbor during the\n\
    \        Database Exchange process (see Section 14.3), and whether\n        group-membership-LSAs\
    \ are flooded to the neighbor during the\n        flooding process (see Section\
    \ 10.2).\n    14.5.  Sending Database Description packets\n        This functionality\
    \ is described in Section 10.8 of [OSPF]. A\n        MOSPF router sets the MC-bit\
    \ in the Options field of its\n        Database Description packets. This indicates\
    \ to its adjacent\n        neighbors that the router is multicast-capable; it\
    \ does not\n        necessarily indicate the state of the sending interface's\n\
    \        IPMulticastForwarding parameter (see Section B.2).\n        When a router\
    \ goes from being multicast-capable to multicast-\n        incapable, or vice-versa,\
    \ it must indicate this fact to its\n        adjacent neighbors by restarting\
    \ the Database Description\n        process (i.e., rolling back the state of all\
    \ adjacent neighbors\n        to Exstart).\n    14.6.  Originating Router-LSAs\n\
    \        This functionality is described in Section 12.4.1 of [OSPF]. A\n    \
    \    MOSPF router sets the MC-bit in the Options field of its\n        router-LSA.\
    \ This allows the router to be included in datagram\n        shortest-path trees\
    \ (see Step 5a of Section 12.2).\n        In addition, MOSPF has introduced a\
    \ new flag in the router-LSA's\n        rtype field: the W-bit. When the W-bit\
    \ is set, the router is\n        included on all datagram shortest-path trees,\
    \ regardless of\n        multicast group (see Section 12.2.6). Such a router is\
    \ called a\n        wild-card multicast receiver. The router sets the W-bit when\
    \ it\n        wishes to receive all multicast datagrams, regardless of\n     \
    \   destination. This will sometimes be true of inter-area multicast\n       \
    \ forwarders (see Section 3.1), and inter-AS multicast forwarders\n        (see\
    \ Section 4).\n        A router must originate a new instance of its router-LSA\n\
    \        whenever an event occurs that would invalidate the LSA's current\n  \
    \      contents. In particular, if the router's multicast capability or\n    \
    \    its ability to function as either an inter-area or inter-AS\n        multicast\
    \ forwarder changes, its router-LSA must be\n        reoriginated.\n    14.7.\
    \  Originating Network-LSAs\n        This functionality is described in Section\
    \ 12.4.2 of [OSPF]. In\n        OSPF, a transit network's network-LSA is originated\
    \ by the\n        network's Designated Router. The Designated Router sets the\
    \ MC-\n        bit in the Options field of the network-LSA if and only if both\n\
    \        a) the Designated Router is multicast-capable (i.e., running\n      \
    \  MOSPF) and b) the Designated Router's interface's\n        IPMulticastForwarding\
    \ parameter has been set to a value other\n        than disabled (see Section\
    \ B.2). When the network-LSA has the\n        MC-bit set, the network can be included\
    \ in datagram shortest-\n        path trees (see Section 12.2.6).\n        It\
    \ is intended that all routers attached to a common network\n        agree on\
    \ the network's IPMulticastForwarding capability.\n        However, this agreement\
    \ is not enforced. When there are\n        disagreements, incorrect routing of\
    \ multicast datagrams can\n        result.\n    14.8.  Originating Summary-link-LSAs\n\
    \        This functionality is described in Section 12.4.3 of [OSPF].\n      \
    \  Inter-area multicast forwarders always set the MC-bit in the\n        Options\
    \ field of their summary-link-LSAs, regardless of whether\n        the path described\
    \ by the summary-link-LSA is actually\n        multicast-capable. Indeed, it is\
    \ possible that there is no\n        multicast-capable path to the described destination.\
    \ All other\n        area border routers (ones that are not inter-area multicast\n\
    \        forwarders) clear the MC-bit in the Options field of their\n        summary-link-LSAs.\n\
    \        If its MC-bit is clear, the summary-link-LSA will not be used\n     \
    \   when initializing the candidate list in Sections 12.2.2, 12.2.3\n        and\
    \ 12.2.5.\n    14.9.  Originating AS external-link-LSAs\n        This functionality\
    \ is described in Section 12.4.4 of [OSPF].\n        Unlike in summary-link-LSAs,\
    \ an inter-AS multicast forwarder\n        should clear the MC-bit in the Options\
    \ field of one of its AS\n        external-link-LSAs if it is known that there\
    \ is no multicast-\n        capable path from the described destination to the\
    \ router\n        itself. This knowledge may possibly be obtained, for example,\n\
    \        from an inter-AS multicast routing algorithm (see Section 4).\n     \
    \   If the inter-AS multicast forwarder is unsure of whether a\n        multicast-capable\
    \ path exists between the described destination\n        and the router itself,\
    \ the MC-bit should be set in the AS\n        external-link-LSA.  All other AS\
    \ boundary routers (ones that are\n        not inter-AS multicast forwarders)\
    \ clear the MC-bit in the\n        Options field of their AS external-link-LSAs.\n\
    \        If its MC-bit is clear, the AS external-link-LSA will not be\n      \
    \  used when initializing the candidate list in Section 12.2.4.\n        When\
    \ multicast connectivity to an external destination exists,\n        but no unicast\
    \ connectivity, an AS external-link-LSA can be\n        originated having its\
    \ MC-bit set and specifying a cost of\n        LSInfinity. Such an AS external-link-LSA\
    \ will still be used by\n        the multicast routing calculation (see Section\
    \ 12.2.4). As a\n        result, when a MOSPF router wishes to stop advertising\
    \ an AS\n        external destination, it must use the premature aging procedure\n\
    \        specified in Section 14.1 of [OSPF], rather than simply setting\n   \
    \     the AS external-link-LSA's cost to LSInfinity.\n    14.10.  Next step in\
    \ the flooding procedure\n        This functionality is described in Section 13.3\
    \ of [OSPF].\n        Group-membership-LSAs are specific to a OSPF single area,\
    \ and\n        are flooded to multicast-capable routers only. When flooding a\n\
    \        group-membership-LSA, Section 13.3 of the OSPF specification is\n   \
    \     modified as follows: 1) The list of interfaces examined during\n       \
    \ flooding (called the eligible interfaces in Section 13.3 of\n        [OSPF])\
    \ is the set of all interfaces attaching to Area A (the\n        area that the\
    \ group-membership-LSA is received from), just as\n        for router-LSAs, network-LSAs\
    \ and summary-link-LSAs. 2) When\n        examining each interface, a group-membership-LSA\
    \ is added to a\n        neighbor's link state retransmission list if and only\
    \ if both a)\n        Step 1d of [OSPF]'s Section 13.3 is reached for the neighbor\
    \ and\n        b) the neighbor is multicast-capable. The neighbor's multicast\n\
    \        capability is discovered during the Database Exchange process\n     \
    \   (see Section 14.4).\n        Note that, since on broadcast networks Link State\
    \ Update packets\n        are sent initially as multicasts, non-multicast routers\
    \ may\n        receive group-membership-LSAs. However, non-multicast routers\n\
    \        will simply drop the group-membership-LSAs, for reasons of\n        unrecognized\
    \ LS type (see Step 2 of [OSPF]'s Section 13). Link\n        State acknowledgments\
    \ for group-membership-LSAs are not expected\n        from non-multicast routers,\
    \ and group-membership-LSAs will never\n        be retransmitted to non-multicast\
    \ routers, since the LSAs are\n        not added to these routers' link state\
    \ retransmission lists (see\n        above paragraph).\n        For more information\
    \ on flooding group-membership-LSAs, see\n        Section 10.2.\n    14.11.  Virtual\
    \ links\n        This functionality is described in Section 15 of [OSPF]. When\
    \ a\n        MOSPF router (i.e., multicast-capable router) is both an area\n \
    \       border router and an endpoint of a virtual link whose other\n        endpoint\
    \ is also multicast capable, the router must then also be\n        an inter-area\
    \ multicast forwarder. This is necessary to ensure\n        that multicast datagrams\
    \ will flow through the virtual link's\n        transit area, from one endpoint\
    \ to the other. When the\n        backbone's datagram shortest-path tree is constructed\
    \ in Section\n        12.1, it is assumed that virtual links are capable of forwarding\n\
    \        multicast datagrams whenever both endpoints are multicast-\n        capable.\n"
- title: 15.  References
  contents:
  - "15.  References\n    [Bharath-Kumar] Bharath-Kumar, K. and J. Jaffe, \"Routing\
    \ to Multiple\n                    Destinations in Computer Networks\", IEEE\n\
    \                    Transactions on Communications, COM-31[3], March\n      \
    \              1983.\n    [Deering]       Deering, S., \"Multicast Routing in\
    \ Internetworks and\n                    Extended LANs\", SIGCOMM Summer 1988\
    \ Proceedings,\n                    August 1988.\n    [Deering2]      Deering,\
    \ S., \"Multicast Routing in a Datagram\n                    Internetwork\", Stanford\
    \ Technical Report, STAN-CS-\n                    92-1415, Department of Computer\
    \ Science, Stanford\n                    University, December 1991.\n    [OSPF]\
    \          Moy, J., \"OSPF Version 2\", RFC 1583, Proteon, Inc.,\n           \
    \         March 1994.\n    [RFC 1075]      Waitzman, D., Partridge, C., and S.\
    \ Deering,\n                    \"Distance Vector Multicast Routing Protocol\"\
    , RFC\n                    1075, BBN STC, Stanford University, November 1988.\n\
    \    [RFC 1112]      Deering, S., \"Host Extensions for IP Multicasting\",\n \
    \                   STD 5, RFC 1112, Stanford University, May 1988.\n    [RFC\
    \ 1209]      Piscitello, D., and J. Lawrence, \"Transmission of IP\n         \
    \           Datagrams over the SMDS Service\", RFC 1209, Bell\n              \
    \      Communications Research, March 1991.\n    [RFC 1340]      Reynolds, J.\
    \ and J. Postel, \"Assigned Numbers\", STD\n                    2, RFC 1340, USC/Information\
    \ Sciences Institute,\n                    July 1992.\n    [RFC 1390]      Katz,\
    \ D., \"Transmission of IP and ARP over FDDI\n                    Networks\",\
    \ STD 36, RFC 1390, cisco Systems, Inc.,\n                    January 1993.\n"
- title: Footnotes
  contents:
  - "Footnotes\n    [1]Actually, OSPF allows a separate link cost to be configured\
    \ for\n    each TOS. MOSPF then potentially calculates separate paths for each\n\
    \    TOS. For details, see Section 6.2.\n    [2]We also assume in this section\
    \ that the pictured multi-access\n    networks provide data-link multicast/broadcast\
    \ services.\n    [3]Note that if N3 were a non-broadcast network, Router RT3 would\n\
    \    send separate copies of the datagram to routers RT1 and RT2. Since\n    the\
    \ IGMP protocol is not defined on non-broadcast networks, there\n    could in\
    \ this case be no Group B member attached to Network N3.\n    However the multicast\
    \ datagram would still be delivered to the Group\n    B members attached to networks\
    \ N1 and N2.\n    [4]Actually, in MOSPF there is a separate forwarding cache entry\
    \ for\n    each combination of source, destination and TOS. For a discussion of\n\
    \    TOS-based multicast routing, see Section 6.2.\n    [5]The discussion in this\
    \ section omits mention of the Backup\n    Designated Router's role in the IGMP\
    \ protocol. While the Backup\n    Designated Router does not send IGMP Host Membership\
    \ Queries, it\n    does listen to IGMP Host Membership Reports, building \"shadow\"\
    \ local\n    group database entries in the process. These entries do not lead\
    \ to\n    group-membership-LSAs, nor do they influence delivery of multicast\n\
    \    datagrams, but are merely maintained to ease the transition from\n    Backup\
    \ Designated Router to Designated Router, should the Designated\n    Router fail.\
    \ See Sections 2.3.4, 9 and 10 for details.\n    [6]One might imagine building\
    \ all possible datagram shortest-path\n    trees up front. However, this might\
    \ be expensive, both in router CPU\n    time and in router memory. It is hoped\
    \ that building the datagram\n    shortest-path trees on demand and caching the\
    \ results will ease\n    demands on router resources by spreading out the calculations\
    \ over a\n    longer period of time.\n    [7]It is possible that, due to the existence\
    \ of alternate paths,\n    several different shortest-path trees are available.\
    \ MOSPF depends\n    on all routers constructing the exact same shortest path\
    \ tree. For\n    that reason, tie-breaking schemes have been implemented during\
    \ tree\n    construction to ensure that identical trees result. See Section 12\n\
    \    for more details.\n    [8]Note that the expanding ring search yields the\
    \ nearest server in\n    terms of hop count, but not necessarily in terms of the\
    \ OSPF metric.\n    [9]This means that in MOSPF, just as in OSPF, the only kind\
    \ of link\n    state advertisement that can be flooded between areas is the AS\n\
    \    external-link-LSA.\n    [10]A router indicates that it is a wild-card multicast\
    \ receiver by\n    setting the appropriate flag in its router-LSA. See Section\
    \ 14.6 for\n    details.\n    [11]This is not quite true. As we shall see, any\
    \ inter-AS multicast\n    forwarders belonging to the backbone are designated\
    \ as wild-card\n    multicast receivers. See Section 4.\n    [12]It is possible\
    \ that through the operation of an inter-AS\n    multicast routing protocol, Router\
    \ RT7 knows that it does not have\n    multicast connectivity to Network N15 (even\
    \ though it has unicast\n    connectivity). In this case, RT7 would not advertise\
    \ the external\n    link to N15 as being multicast capable.\n    [13]Synchronization\
    \ of the IPMulticastForwarding interface parameter\n    is not enforced by the\
    \ MOSPF protocol, since it is not included in\n    the contents of a MOSPF router's\
    \ Hello packets.\n    [14]Actually, when multiple IP networks have been assigned\
    \ to the\n    same physical network, the first thing that needs to be done is\
    \ to\n    associate an IP network with the received Host Membership Report.\n\
    \    This is done in the same way that a receiving interface is\n    associated\
    \ with a received multicast datagram; see Section 11.1.\n    [15]For this reason\
    \ when a transit network has both MOSPF routers\n    and non-multicast OSPF routers\
    \ attached, care should be taken to\n    ensure that a MOSPF router is elected\
    \ Designated Router. This can be\n    accomplished through proper setting of the\
    \ routers' configured\n    Router Priority.\n    [16]Note that just because these\
    \ advertisements exist in the link\n    state database, it does not mean that\
    \ the Group G members are\n    reachable.  Reachability does not enter into the\
    \ building of the\n    transit vertex list, in order to simplify the calculation.\
    \ This is a\n    trade-off. As a result, some multicast datagrams may be forwarded\n\
    \    further than necessary, when the described Group G members actually\n   \
    \ are unreachable.\n    [17]Since the Designated Router controls flooding on the\
    \ network,\n    this is another reason to ensure that a MOSPF router is elected\
    \ as\n    Designated Router.\n    [18]In other words, group-membership-LSAs will\
    \ never be\n    retransmitted to non-multicast routers.\n    [19]This last step\
    \ will not be necessary if the configuration\n    guidelines presented in Section\
    \ 6.5 are followed.\n    [20]The TOS 0 routing table entry is examined regardless\
    \ of the TOS\n    specified by the multicast datagram.\n    [21]It is assumed\
    \ that a MOSPF router that wants to stop advertising\n    a route to an external\
    \ destination will use the premature aging\n    procedure specified in Section\
    \ 14.1 of [OSPF], rather than setting\n    the AS external-link-LSA's cost to\
    \ LSInfinity.\n    [22]This preference ordering is used in Step 5c of Section\
    \ 12.2.\n    [23]No attempt is made to match the links' two halves. See Step 5d.\n\
    \    [24]However, a summary-link-LSA is eligible for matching even if the\n  \
    \  MC-bit in its Options field is clear.\n    [25]Costs may have both a Type 2\
    \ and a Type 1 component; the Type 2\n    component is always most significant.\n\
    \    [26]This case mirrors the SourceIntraArea candidate list\n    initialization\
    \ in Section 12.2.1.\n    [27]This case mirrors the SourceInterArea1 candidate\
    \ list\n    initialization in Section 12.2.2.\n    [28]This case mirrors the SourceInterArea2\
    \ candidate list\n    initialization in Section 12.2.3.\n    [29]Note that selecting\
    \ the upstream node in this manner enforces\n    the inter-area routing architecture\
    \ outlined in Section 3.1. Namely,\n    the multicast datagram is forwarded from\
    \ the source area, over the\n    backbone and then into the non-backbone areas.\
    \ This is similar to\n    the \"hub and spoke\" architecture for unicast forwarding\
    \ described in\n    Section 3.2 of [OSPF].\n    [30]This procedure seems backwards.\
    \ One would expect that the TOS X\n    datagram tree would be built first. However,\
    \ the SPF calculation\n    must ensure that all routers participating in the forwarding\
    \ of that\n    datagram, both TOS-capable and non-TOS-capable, build the same\
    \ tree.\n    Since it is known that the non-TOS-capable routers will use the TOS\n\
    \    0 tree, the only safe way to use the TOS X tree is when you are\n    guaranteed\
    \ that the non-TOS-capable routers will decline to forward\n    the datagram.\
    \ This guarantee is clearly met when there are only\n    TOS-capable routers on\
    \ the TOS 0 datagram tree.\n    [31]Indeed, there will also be those cases where\
    \ the router, not\n    being on a particular datagram shortest-path tree, will\
    \ never have\n    to calculate the particular tree, since the router will not\
    \ receive\n    the datagram in the first place.\n    [32]Group-membership-LSAs\
    \ are not processed by non-multicast routers\n    (see Section 10.2). Also, if\
    \ the Designated Router was not running\n    the multicast extensions, multicast\
    \ datagrams would not be forwarded\n    over the network because its network-LSA\
    \ would have its MC-bit clear\n    (see Step 5a in Section 12.2).\n"
- title: A. Data Formats
  contents:
  - "A. Data Formats\n    This section documents the format of MOSPF protocol packets\
    \ and link\n    state advertisements (LSAs). All changes and additions made to\
    \ the\n    OSPF Version 2 data formats have been made in a backward-compatible\n\
    \    manner. In other words, multicast routers running MOSPF can\n    interoperate\
    \ with (non-multicast) OSPF Version 2 routers when\n    forwarding regular (unicast)\
    \ IP data traffic.\n    The MOSPF packet formats are the same as for OSPF Version\
    \ 2\n    (described in Appendix A of [OSPF]). One additional option has been\n\
    \    added to the Options field that appears in OSPF Hello packets,\n    Database\
    \ Description packets and all link state advertisements. This\n    new option\
    \ indicates a router's/network's multicast capability, and\n    is documented\
    \ in Section A.1.  The presence of this new option is\n    ignored by all non-multicast\
    \ routers.\n    To support MOSPF, one of OSPF's link state advertisements has\
    \ been\n    modified, and a new link state advertisement has been added. The\n\
    \    format of the router-LSA has been modified (see Section A.2) to\n    include\
    \ a new flag indicating whether the router is a wild-card\n    multicast receiver.\
    \ A new link state advertisement, called the\n    group-membership-LSA, has been\
    \ added to pinpoint multicast group\n    members in the link state database. This\
    \ new advertisement is\n    neither flooded nor processed by non-multicast routers.\
    \ The group-\n    membership-LSA is documented in Section A.3.\n"
- title: A.1 The Options field
  contents:
  - "A.1 The Options field\n    The OSPF Options field is present in OSPF Hello packets,\
    \ Database\n    Description packets and all link state advertisements. The Options\n\
    \    field enables OSPF routers to support (or not support) optional\n    capabilities,\
    \ and to communicate their capability level to other\n    OSPF routers. Through\
    \ this mechanism routers of differing\n    capabilities can be mixed within an\
    \ OSPF routing domain.\n    When used in Hello packets, the Options field allows\
    \ a router to\n    reject a neighbor because of a capability mismatch. Alternatively,\n\
    \    when capabilities are exchanged in Database Description packets a\n    router\
    \ can choose not to forward certain LSA types to a neighbor\n    because of its\
    \ reduced functionality. Lastly, listing capabilities\n    in LSAs allows routers\
    \ to route traffic around reduced functionality\n    routers, by excluding them\
    \ from parts of the routing table\n    calculation.\n    Three capabilities are\
    \ currently defined. For each capability, the\n    effect of the capability's\
    \ appearance (or lack of appearance) in\n    Hello packets, Database Description\
    \ packets and link state\n    advertisements is specified below. For example,\
    \ the\n    ExternalRoutingCapability (below called the E-bit) has meaning only\n\
    \    in OSPF Hello packets.\n                     +---+---+---+---+---+---+---+---+\n\
    \                     | * | * | * | * | * |MC | E | T |\n                    \
    \ +---+---+---+---+---+---+---+-+-+\n                          The OSPF Options\
    \ field\n    o   T-bit. This describes the router's TOS capability. If the T-bit\n\
    \        is reset, then the router supports only a single TOS (TOS 0).\n     \
    \   Such a router is also said to be incapable of TOS-routing. The\n        absence\
    \ of the T-bit in a router links advertisement causes the\n        router to be\
    \ skipped when building a non-zero TOS shortest-path\n        tree. In other words,\
    \ routers incapable of TOS routing will be\n        avoided as much as possible\
    \ when forwarding data traffic\n        requesting a non-zero TOS. The absence\
    \ of the T-bit in a summary\n        link advertisement or an AS external link\
    \ advertisement\n        indicates that the advertisement is describing a TOS\
    \ 0 route\n        only (and not routes for non-zero TOS).\n    o   E-bit. AS\
    \ external link advertisements are not flooded\n        into/through OSPF stub\
    \ areas. The E-bit ensures that all members\n        of a stub area agree on that\
    \ area's configuration. The E-bit is\n        meaningful only in OSPF Hello packets.\
    \ When the E-bit is reset\n        in the Hello packet sent out a particular interface,\
    \ it means\n        that the router will neither send nor receive AS external\
    \ link\n        state advertisements on that interface (in other words, the\n\
    \        interface connects to a stub area). Two routers will not become\n   \
    \     neighbors unless they agree on the state of the E-bit.\n    o   MC-bit.\
    \ The MC-bit describes the multicast capability of the\n        various pieces\
    \ of the OSPF routing domain. When calculating the\n        path of multicast\
    \ datagrams, only those link state\n        advertisements having their MC-bit\
    \ set are used. In addition, a\n        router uses the MC-bit in its Database\
    \ Description packets to\n        tell adjacent neighbors whether the router will\
    \ participate in\n        the flooding of the new group-membership-LSAs.\n"
- title: A.2 Router-LSA
  contents:
  - "A.2 Router-LSA\n    An OSPF router originates a router-LSA into each of its attached\n\
    \    areas. The router-LSA describes the state and cost of the router's\n    interfaces\
    \ to the area. The contents of the router-LSA are described\n    in detail in\
    \ Section A.4.2 of [OSPF]. There are flags in the\n    router-LSA that indicate\
    \ whether the router is either a) an area\n    border router or b) an AS boundary\
    \ router or c) the endpoint of a\n    virtual link. One more flag has been added\
    \ to the router-LSA for\n    MOSPF; it is called bit W below. This flag indicates\
    \ whether the\n    router wishes to receive all multicast datagrams regardless\
    \ of\n    destination (i.e., is a wild-card multicast receiver).\n        0  \
    \                 1                   2                   3\n        0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |            LS age             |     Options   |       1       |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                        Link State ID                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     LS sequence number                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         LS checksum           |             length            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \    rtype      |        0      |            # links            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \ +\n       |                          Link ID                              |\
    \ P\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \ E\n       |                         Link Data                             |\
    \ R\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |     Type      |     # TOS     |        TOS 0 metric           | #\n\
    \     + +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ L\n\
    \     # |      TOS      |        0      |            metric             | I\n\
    \     T +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ N\n\
    \     O |                              ...                              | K\n\
    \     S +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ S\n\
    \     | |      TOS      |        0      |            metric             | |\n\
    \     + +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ +\n\
    \       |                              ...                              |\n  \
    \                              The router LSA\n                     +---+---+---+---+---+---+---+---+\n\
    \                     | * | * | * | * | W | V | E | B |\n                    \
    \ +---+---+---+---+---+---+---+-+-+\n                                The rtype\
    \ field\n    The following defines the flags found in the rtype field. Each flag\n\
    \    classifies the router by function:\n    o   bit B. When set, the router is\
    \ an area border router (B is for\n        border). These routers forward unicast\
    \ data traffic between OSPF\n        areas.\n    o   bit E. When set, the router\
    \ is an AS boundary router (E is for\n        external). These routers forward\
    \ unicast data traffic between\n        Autonomous Systems.\n    o   bit V. When\
    \ set, the router is an endpoint of an active virtual\n        link (V is for\
    \ virtual) which uses the described area as its\n        Transit area.\n    o\
    \   bit W. When set, the router is a wild-card multicast receiver.\n        These\
    \ routers receive all multicast datagrams, regardless of\n        destination.\
    \  Inter-area multicast forwarders and inter-AS\n        multicast forwarders\
    \ are sometimes wild-card multicast receivers\n        (see Sections 3 and 4).\n"
- title: A.3 Group-membership-LSA
  contents:
  - "A.3 Group-membership-LSA\n    Group-membership-LSAs are the Type 6 link state\
    \ advertisements.\n    Group-membership-LSAs are specific to a particular OSPF\
    \ area. They\n    are never flooded beyond their area of origination. A router's\n\
    \    group-membership-LSA for Area A indicates its directly attached\n    networks\
    \ which belong to Area A and contain members of a particular\n    multicast group.\
    \ A router originates a group-membership-LSA for\n    multicast group D when the\
    \ following conditions are met for at least\n    one directly attached network:\
    \ 1) the router has been elected\n    Designated Router for the network and 2)\
    \ at least one host on the\n    network has joined Group D via the IGMP protocol.\n\
    \    A router may also originate a group-membership-LSA for Group D if\n    the\
    \ router itself has internal applications belonging to Group D. In\n    addition,\
    \ area border routers originate group-membership-LSAs into\n    the backbone area\
    \ when there are group members in the router's\n    attached non-backbone areas.\
    \ See Section 10 for more information\n    concerning the origination of group-membership-LSAs.\n\
    \        0                   1                   2                   3\n     \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |            LS age             |     Options   |       6       |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |              Link State ID = Destination Group                |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     LS sequence number                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         LS checksum           |             length            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                        Vertex type                            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                         Vertex ID                             |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                              ...                              |\n      \
    \                     The group-membership-LSA\n    The group-membership-LSA consists\
    \ of the standard 20-byte link state\n    header (see Section A.4.1 of [OSPF])\
    \ followed by a list of transit\n    vertices to label with the multicast destination.\
    \ The\n    advertisement's Link State ID is set to the destination multicast\n\
    \    group address. There is no metric associated with the advertisement.\n  \
    \  Each transit vertex is specified by its Vertex type and Vertex ID\n    (see\
    \ Section 12.1 for an explanation of this terminology):\n    o   Vertex type.\
    \ Set equal to 1 for a router, and 2 for a transit\n        network.  Note that\
    \ the only router that may be included in the\n        list is the Advertising\
    \ Router itself.\n    o   Vertex ID. For router vertices, this field indicates\
    \ the\n        router's OSPF Router ID. For transit network vertices, this\n \
    \       field indicates the IP address of the network's Designated\n        Router.\
    \ Note that the link state advertisement associated with\n        the transit\
    \ vertex is the LSA whose LS type = Vertex type, Link\n        State ID = Vertex\
    \ ID and Advertising Router = the group-\n        membership-LSA's Advertising\
    \ Router.\n"
- title: B. Configurable Constants
  contents:
  - "B. Configurable Constants\n    This section documents the configurable parameters\
    \ used by OSPF's\n    multicast routing extensions. These parameters are in addition\
    \ to\n    the configurable constants used by the base OSPF protocol\n    (documented\
    \ in Appendix C of [OSPF]). An implementation of MOSPF\n    must provide the ability\
    \ to set these parameters, either through\n    network management or some other\
    \ means.\n    B.1 Global parameters\n        The following parameters apply to\
    \ the router as a whole.\n        o   Multicast capability. An indication of whether\
    \ the router is\n            running MOSPF. If the router is running MOSPF, it\
    \ will\n            perform the algorithms as set forth in this specification.\n\
    \            Otherwise, the router is still able to run the basic OSPF\n     \
    \       algorithm (as set forth in [OSPF]), and will be able to\n            interoperate\
    \ with multicast capable routers (see Section\n            6.1) when forwarding\
    \ regular (unicast) IP data traffic.\n        o   Inter-area multicast forwarder.\
    \ This parameter indicates\n            whether the router will forward multicast\
    \ datagrams between\n            OSPF areas. Such a router summarizes group membership\n\
    \            information to the backbone, and acts as a wild-card\n          \
    \  multicast receiver in all its attached non-backbone areas\n            (see\
    \ Section 3.1). Not all multicast-capable area border\n            routers need\
    \ be configured as inter-area multicast\n            forwarders.  However, whenever\
    \ both ends of a virtual link\n            are multicast-capable, they must both\
    \ be configured as\n            inter-area multicast forwarders (see Section 14.11).\
    \ By\n            default, all multicast-capable area border routers are\n   \
    \         configured as inter-area multicast forwarders.\n        o   Inter-AS\
    \ multicast forwarder. This parameter indicates\n            whether the router\
    \ forwards multicast datagrams between\n            Autonomous Systems. Such a\
    \ router acts as a wild-card\n            multicast receiver in all attached areas\
    \ (see Section 4). It\n            is also assumed that an inter-AS multicast\
    \ forwarder runs\n            some kind of inter-AS multicast routing algorithm.\n\
    \    B.2 Router interface parameters\n        The following parameters can be\
    \ configured separately for each\n        of the router's OSPF interfaces. Remember\
    \ that an OSPF interface\n        is the connection between the router and one\
    \ of its attached IP\n        networks.  Note that the IPMulticastForwarding parameter\
    \ is\n        really a description of the attached network. As such, it should\n\
    \        be configured identically on all routers attached to a common\n     \
    \   network; otherwise incorrect routing of multicast datagrams may\n        result.\n\
    \        o   IPMulticastForwarding. This configurable parameter indicates\n  \
    \          whether IP multicasts should be forwarded over the attached\n     \
    \       network, and if so, how the forwarding should be done. The\n         \
    \   parameter can assume one of three possible values: disabled,\n           \
    \ data-link multicast and data-link unicast. When set to\n            disabled,\
    \ IP multicast datagrams will not be forwarded out\n            the interface.\
    \ When set to data-link multicast, IP multicast\n            datagrams will be\
    \ forwarded as data-link multicasts. When\n            set to data-link unicast,\
    \ IP multicast datagrams will be\n            forwarded as data-link unicasts.\
    \ The default value for this\n            parameter is data-link multicast. The\
    \ other two settings are\n            for use in the special circumstances described\
    \ in Sections\n            6.3 and 6.4. When set to disabled or to data-link unicast,\n\
    \            IGMP group membership is not monitored on the attached\n        \
    \    network.\n        o   IGMPPollingInterval. The number of seconds between\
    \ IGMP Host\n            Membership Queries sent out this interface. A multicast-\n\
    \            capable router sends IGMP Host Membership Queries only when\n   \
    \         it has been elected Designated Router for the attached\n           \
    \ network. See [RFC 1112] for a discussion of this parameter's\n            value.\n\
    \        o   IGMP timeout. If no IGMP Host Membership Reports have been\n    \
    \        heard on an attached network for a particular multicast\n           \
    \ group A after this period of time, the entry [Group A,\n            attached\
    \ network] is deleted from the router's local group\n            database. See\
    \ Section 9 for more information.\n"
- title: C. Sample datagram shortest-path trees
  contents:
  - "C. Sample datagram shortest-path trees\n    In MOSPF, all routers must calculate\
    \ exactly the same datagram\n    shortest-path trees. In order to ensure this\
    \ in internetworks having\n    redundant links, a number of tie-breakers were\
    \ defined in the MOSPF\n    routing table calculation (see Steps 4 and 5c of Section\
    \ 12.2, and\n    Sections 12.2.4 and 12.2.7). This section illustrates the use\
    \ of\n    these tie-breakers on a sample topology.\n    Three different examples\
    \ are given. All examples use the same\n    physical topology and the same set\
    \ of OSPF interface costs (see the\n    left side of Figure 14). The source of\
    \ the datagram is always Host\n    H1 on the network at the top of the figure\
    \ (192.9.1.0), and the\n    destination group members are the two hosts labelled\
    \ with Group Ma\n    at the bottom of the figure. The first case shows an example\
    \ of\n    intra-area multicast, while the remaining two cases show the\n    influence\
    \ of OSPF areas on the path of a multicast datagram.\n"
- title: C.1 An intra-area tree
  contents:
  - "C.1 An intra-area tree\n    The datagram shortest-path tree resulting from the\
    \ intra-area case\n    is shown on the right of Figure 14. The root of the tree\
    \ is the\n    source network (192.9.1.0), and the leaves are the two routers (RT4\n\
    \    and RT3) directly attached to the stub networks containing Group Ma\n   \
    \ members.\n    There are equal-cost paths available to both group members. For\
    \ the\n    group member on the left, the path could go either through network\n\
    \    10.1.0.0 or through network 10.2.0.0. By the tie-breaking rules, the\n  \
    \  path through 10.2.0.0 is chosen since it has the larger IP network\n    number\
    \ (see Step 5c of Section 12.2).\n    For the group member on the right, the path\
    \ could go either over\n    Network 10.2.0.0 or over the serial line connecting\
    \ routers RT2 and\n    RT3. The path over Network 10.2.0.0 is chosen after executing\
    \ two\n    tie-breaking rules. First, Network 10.2.0.0 is placed on the\n    shortest-path\
    \ tree before Router RT3 since networks are always\n    chosen over routers (see\
    \ Step 4 of Section 12.2). Then, given a\n                                 +--+\n\
    \                                 |H1|\n                                 +--+\n\
    \                    Net 192.9.1.0  |\n                         +------------------+\n\
    \                            |            |\n        +----------+        |1  \
    \         |1\n        |  Network |     8+---+        +---+            o 192.9.1.0\n\
    \        | 10.1.0.0 |------|RT1|        |RT2|            |\n        +----------+\
    \      +---+        +---+           0|\n             |              |8       \
    \   8|              |\n            8|         +----------+      |8           \
    \  o RT1\n           +---+10     | Network  |  10+---+            |\n        \
    \   |RT4|-------| 10.2.0.0 |----|RT3|           8|\n           +---+       +----------+\
    \    +---+            |\n             |3                          |3         \
    \    o 10.2.0.0\n             |                           |             / \\\n\
    \        +---------+                  +-------+       0/   \\0\n             |\
    \                           |           /     \\\n           +--+            \
    \            +--+         o       o\n           |Ma|                        |Ma|\
    \        RT4      RT3\n           +--+                        +--+\n         \
    \               Figure 14: An intra-area tree\n    choice of either Network 10.2.0.0\
    \ or Router RT2 for RT3's parent on\n    the tree, Net 10.2.0.0 is again preferred\
    \ since it is a network (see\n    Step 5c of Section 12.2)\n"
- title: C.2 The effect of areas
  contents:
  - "C.2 The effect of areas\n    In Figure 15 below, the previous diagram has been\
    \ modified by the\n    inclusion of OSPF areas. The datagram source is now part\
    \ of the OSPF\n    backbone (Area 0), while the rest of the topology is in Area\
    \ 1. In\n    this case, since the datagram source and the group members belong\
    \ to\n    different areas, reverse costs are used when building the tree (see\n\
    \    Step 5b of Section 12.2). This actually eliminates the equal cost\n    paths\
    \ from the diagram, and leads to the Area 1 datagram shortest-\n    path tree\
    \ on the right of Figure 15.\n                                 +--+\n        \
    \                         |H1|\n                                 +--+\n      \
    \              Net 192.9.1.0  |\n                         +------------------+\n\
    \      ..................... |            |\n      . +----------+      . |1  \
    \         |1            192.9.1.0\n      . |  Network |     8+---+        +---+\
    \                o\n      . | 10.1.0.0 |------|RT1|........|RT2|...          \
    \  / \\\n      . +----------+      +---+        +---+  .          1/   \\1\n \
    \     .      |              |8          8|    .          /     \\\n      .   \
    \  8|         +----------+      |8   .         o RT1   o RT2\n      .    +---+10\
    \     | Network  |  10+---+  .         |        \\\n      .    |RT4|-------| 10.2.0.0\
    \ |----|RT3|  .        0|         \\8\n      .    +---+       +----------+   \
    \ +---+  .         |          \\\n      .      |3                          |3\
    \   .         o 10.1.0.0  o\n      .      |                           |    . \
    \        |          RT3\n      . +---------+                  +-------+.     \
    \   8|\n      .      |                           |    .         |\n      .   \
    \ +--+                        +--+   .         o\n      .    |Ma|            \
    \            |Ma|   .        RT4\n      .    +--+     Area 1             +--+\
    \   .\n      .........................................\n                     \
    \   Figure 15: The effect of areas\n"
- title: C.3 The effect of virtual links
  contents:
  - "C.3 The effect of virtual links\n    In Figure 16 below, Network 10.1.0.0 has\
    \ been configured as a\n    separate area (Area 1), while everything else belongs\
    \ to the OSPF\n    backbone (Area 0). In addition, a virtual link has been configured\n\
    \    through Area 1, enhancing the backbone connectivity. In this case,\n    both\
    \ the source and the group members belong to the same area, so\n    forward costs\
    \ are used. However, since virtual links are preferred\n    over regular links\
    \ (see Step 5c of Section 12.2), the backbone\n    datagram shortest-path tree\
    \ uses Network 10.1.0.0 instead of\n    10.2.0.0 on the path to the left group\
    \ member. This leads to the\n    tree on the right of Figure 16.\n           \
    \                      +--+\n                                 |H1|\n         \
    \                        +--+\n                    Net 192.9.1.0  |\n      ................\
    \   +------------------+\n      . +----------+ .     /1            |\n      .\
    \ |  Network |8.    /              |1\n      . | 10.1.0.0 |-+---+            \
    \ +---+            o 192.9.1.0\n      . +----------+*|RT1|             |RT2| \
    \           |\n      .     8|*******+---+             +---+           0|\n   \
    \   .Area1 |*VL    .    \\8            8|              |\n      .....+---+......\
    \ +----------+      |8             o RT1\n           |RT4|10     | Network  |\
    \  10+---+           / \\\n           +---+-------| 10.2.0.0 |----|RT3|      \
    \    /8  \\8\n             |         +----------+    +---+         /     \\\n\
    \             |3                          |3         o 10.1  o 10.2.0.0\n    \
    \         |                           |          |       |\n        +---------+\
    \                  +-------+      |0      |0\n             |                 \
    \          |          |       |\n           +--+                        +--+ \
    \        o       o\n           |Ma|                        |Ma|        RT4   \
    \   RT3\n           +--+                        +--+\n                   Figure\
    \ 16: The effect of virtual links\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n    Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n    John Moy\n    Proteon, Inc.\n    9 Technology Drive\n \
    \   Westborough, MA 01581\n    Phone: (508) 898-2800\n    Email: jmoy@proteon.com\n"
