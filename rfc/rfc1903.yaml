- title: __initial_text__
  contents:
  - "                          Textual Conventions\n                          for\
    \ Version 2 of the\n              Simple Network Management Protocol (SNMPv2)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A management system contains:  several (potentially many)\
    \ nodes, each\n   with a processing entity, termed an agent, which has access\
    \ to\n   management instrumentation; at least one management station; and, a\n\
    \   management protocol, used to convey management information between\n   the\
    \ agents and management stations.  Operations of the protocol are\n   carried\
    \ out under an administrative framework which defines\n   authentication, authorization,\
    \ access control, and privacy policies.\n   Management stations execute management\
    \ applications which monitor and\n   control managed elements.  Managed elements\
    \ are devices such as\n   hosts, routers, terminal servers, etc., which are monitored\
    \ and\n   controlled via access to their management information.\n   Management\
    \ information is viewed as a collection of managed objects,\n   residing in a\
    \ virtual information store, termed the Management\n   Information Base (MIB).\
    \  Collections of related objects are defined\n   in MIB modules.  These modules\
    \ are written using a subset of OSI's\n   Abstract Syntax Notation One (ASN.1)\
    \ [1], termed the Structure of\n   Management Information (SMI) [2].\n   When\
    \ designing a MIB module, it is often useful to define new types\n   similar to\
    \ those defined in the SMI.  In comparison to a type defined\n   in the SMI, each\
    \ of these new types has a different name, a similar\n   syntax, but a more precise\
    \ semantics.  These newly defined types are\n   termed textual conventions, and\
    \ are used for the convenience of\n   humans reading the MIB module.  It is the\
    \ purpose of this document to\n   define the initial set of textual conventions\
    \ available to all MIB\n   modules.\n   Objects defined using a textual convention\
    \ are always encoded by\n   means of the rules that define their primitive type.\
    \  However,\n   textual conventions often have special semantics associated with\n\
    \   them.  As such, an ASN.1 macro, TEXTUAL-CONVENTION, is used to\n   concisely\
    \ convey the syntax and semantics of a textual convention.\n   For all textual\
    \ conventions defined in an information module, the\n   name shall be unique and\
    \ mnemonic, and shall not exceed 64 characters\n   in length.  (However, names\
    \ longer than 32 characters are not\n   recommended.) All names used for the textual\
    \ conventions defined in\n   all \"standard\" information modules shall be unique.\n"
- title: 1.1.  A Note on Terminology
  contents:
  - "1.1.  A Note on Terminology\n   For the purpose of exposition, the original Internet-standard\
    \ Network\n   Management Framework, as described in RFCs 1155 (STD 16), 1157 (STD\n\
    \   15), and 1212 (STD 16), is termed the SNMP version 1 framework\n   (SNMPv1).\
    \  The current framework is termed the SNMP version 2\n   framework (SNMPv2).\n"
- title: 2.  Definitions
  contents:
  - '2.  Definitions

    '
- title: SNMPv2-TC DEFINITIONS ::= BEGIN
  contents:
  - 'SNMPv2-TC DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n    ObjectSyntax, TimeTicks\n        FROM SNMPv2-SMI;\n"
- title: -- definition of textual conventions
  contents:
  - '-- definition of textual conventions

    '
- title: TEXTUAL-CONVENTION MACRO ::=
  contents:
  - 'TEXTUAL-CONVENTION MACRO ::=

    '
- title: BEGIN
  contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  DisplayPart\n               \
    \   \"STATUS\" Status\n                  \"DESCRIPTION\" Text\n              \
    \    ReferPart\n                  \"SYNTAX\" Syntax\n    VALUE NOTATION ::=\n\
    \                  value(VALUE Syntax)\n    DisplayPart ::=\n                \
    \  \"DISPLAY-HINT\" Text\n                | empty\n    Status ::=\n          \
    \        \"current\"\n                | \"deprecated\"\n                | \"obsolete\"\
    \n    ReferPart ::=\n                  \"REFERENCE\" Text\n                | empty\n\
    \    -- uses the NVT ASCII character set\n    Text ::= \"\"\"\" string \"\"\"\"\
    \n    Syntax ::=\n                  type(ObjectSyntax)\n                | \"BITS\"\
    \ \"{\" Kibbles \"}\"\n    Kibbles ::=\n                  Kibble\n           \
    \     | Kibbles \",\" Kibble\n    Kibble ::=\n                  identifier \"\
    (\" nonNegativeNumber \")\"\n"
- title: END
  contents:
  - 'END

    '
- title: DisplayString ::= TEXTUAL-CONVENTION
  contents:
  - "DisplayString ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"255a\"\n    STATUS \
    \      current\n    DESCRIPTION\n            \"Represents textual information\
    \ taken from the NVT ASCII\n            character set, as defined in pages 4,\
    \ 10-11 of RFC 854.\n            To summarize RFC 854, the NVT ASCII repertoire\
    \ specifies:\n              - the use of character codes 0-127 (decimal)\n   \
    \           - the graphics characters (32-126) are interpreted as\n          \
    \      US ASCII\n              - NUL, LF, CR, BEL, BS, HT, VT and FF have the\
    \ special\n                meanings specified in RFC 854\n              - the\
    \ other 25 codes have no standard interpretation\n              - the sequence\
    \ 'CR LF' means newline\n              - the sequence 'CR NUL' means carriage-return\n\
    \              - an 'LF' not preceded by a 'CR' means moving to the\n        \
    \        same column on the next line.\n              - the sequence 'CR x' for\
    \ any x other than LF or NUL is\n                illegal.  (Note that this also\
    \ means that a string may\n                end with either 'CR LF' or 'CR NUL',\
    \ but not with CR.)\n            Any object defined using this syntax may not\
    \ exceed 255\n            characters in length.\"\n    SYNTAX       OCTET STRING\
    \ (SIZE (0..255))\n"
- title: PhysAddress ::= TEXTUAL-CONVENTION
  contents:
  - "PhysAddress ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"1x:\"\n    STATUS    \
    \   current\n    DESCRIPTION\n            \"Represents media- or physical-level\
    \ addresses.\"\n    SYNTAX       OCTET STRING\n"
- title: MacAddress ::= TEXTUAL-CONVENTION
  contents:
  - "MacAddress ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"1x:\"\n    STATUS     \
    \  current\n    DESCRIPTION\n            \"Represents an 802 MAC address represented\
    \ in the\n            `canonical' order defined by IEEE 802.1a, i.e., as if it\n\
    \            were transmitted least significant bit first, even though\n     \
    \       802.5 (in contrast to other 802.x protocols) requires MAC\n          \
    \  addresses to be transmitted most significant bit first.\"\n    SYNTAX     \
    \  OCTET STRING (SIZE (6))\n"
- title: TruthValue ::= TEXTUAL-CONVENTION
  contents:
  - "TruthValue ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n\
    \            \"Represents a boolean value.\"\n    SYNTAX       INTEGER { true(1),\
    \ false(2) }\n"
- title: TestAndIncr ::= TEXTUAL-CONVENTION
  contents:
  - "TestAndIncr ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n\
    \            \"Represents integer-valued information used for atomic\n       \
    \     operations.  When the management protocol is used to specify\n         \
    \   that an object instance having this syntax is to be\n            modified,\
    \ the new value supplied via the management protocol\n            must precisely\
    \ match the value presently held by the\n            instance.  If not, the management\
    \ protocol set operation\n            fails with an error of `inconsistentValue'.\
    \  Otherwise, if\n            the current value is the maximum value of 2^31-1\
    \ (2147483647\n            decimal), then the value held by the instance is wrapped\
    \ to\n            zero; otherwise, the value held by the instance is\n       \
    \     incremented by one.  (Note that regardless of whether the\n            management\
    \ protocol set operation succeeds, the variable-\n            binding in the request\
    \ and response PDUs are identical.)\n            The value of the ACCESS clause\
    \ for objects having this\n            syntax is either `read-write' or `read-create'.\
    \  When an\n            instance of a columnar object having this syntax is created,\n\
    \            any value may be supplied via the management protocol.\n        \
    \    When the network management portion of the system is re-\n            initialized,\
    \ the value of every object instance having this\n            syntax must either\
    \ be incremented from its value prior to\n            the re-initialization, or\
    \ (if the value prior to the re-\n            initialization is unknown) be set\
    \ to a pseudo-randomly\n            generated value.\"\n    SYNTAX       INTEGER\
    \ (0..2147483647)\n"
- title: AutonomousType ::= TEXTUAL-CONVENTION
  contents:
  - "AutonomousType ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n\
    \            \"Represents an independently extensible type identification\n  \
    \          value.  It may, for example, indicate a particular sub-tree\n     \
    \       with further MIB definitions, or define a particular type of\n       \
    \     protocol or hardware.\"\n    SYNTAX       OBJECT IDENTIFIER\n"
- title: InstancePointer ::= TEXTUAL-CONVENTION
  contents:
  - "InstancePointer ::= TEXTUAL-CONVENTION\n    STATUS       obsolete\n    DESCRIPTION\n\
    \            \"A pointer to either a specific instance of a MIB object or\n  \
    \          a conceptual row of a MIB table in the managed device.  In\n      \
    \      the latter case, by convention, it is the name of the\n            particular\
    \ instance of the first accessible columnar object\n            in the conceptual\
    \ row.\n            The two uses of this textual convention are replaced by\n\
    \            VariablePointer and RowPointer, respectively.\"\n    SYNTAX     \
    \  OBJECT IDENTIFIER\n"
- title: VariablePointer ::= TEXTUAL-CONVENTION
  contents:
  - "VariablePointer ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n\
    \            \"A pointer to a specific object instance.  For example,\n      \
    \      sysContact.0 or ifInOctets.3.\"\n    SYNTAX       OBJECT IDENTIFIER\n"
- title: RowPointer ::= TEXTUAL-CONVENTION
  contents:
  - "RowPointer ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n\
    \            \"Represents a pointer to a conceptual row.  The value is the\n \
    \           name of the instance of the first accessible columnar object\n   \
    \         in the conceptual row.\n            For example, ifIndex.3 would point\
    \ to the 3rd row in the\n            ifTable (note that if ifIndex were not-accessible,\
    \ then\n            ifDescr.3 would be used instead).\"\n    SYNTAX       OBJECT\
    \ IDENTIFIER\n"
- title: RowStatus ::= TEXTUAL-CONVENTION
  contents:
  - "RowStatus ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n\
    \            \"The RowStatus textual convention is used to manage the\n      \
    \      creation and deletion of conceptual rows, and is used as the\n        \
    \    value of the SYNTAX clause for the status column of a\n            conceptual\
    \ row (as described in Section 7.7.1 of [2].)\n            The status column has\
    \ six defined values:\n                 - `active', which indicates that the conceptual\
    \ row is\n                 available for use by the managed device;\n        \
    \         - `notInService', which indicates that the conceptual\n            \
    \     row exists in the agent, but is unavailable for use by\n               \
    \  the managed device (see NOTE below);\n                 - `notReady', which\
    \ indicates that the conceptual row\n                 exists in the agent, but\
    \ is missing information\n                 necessary in order to be available\
    \ for use by the\n                 managed device;\n                 - `createAndGo',\
    \ which is supplied by a management\n                 station wishing to create\
    \ a new instance of a\n                 conceptual row and to have its status\
    \ automatically set\n                 to active, making it available for use by\
    \ the managed\n                 device;\n                 - `createAndWait', which\
    \ is supplied by a management\n                 station wishing to create a new\
    \ instance of a\n                 conceptual row (but not make it available for\
    \ use by\n                 the managed device); and,\n                 - `destroy',\
    \ which is supplied by a management station\n                 wishing to delete\
    \ all of the instances associated with\n                 an existing conceptual\
    \ row.\n            Whereas five of the six values (all except `notReady') may\n\
    \            be specified in a management protocol set operation, only\n     \
    \       three values will be returned in response to a management\n          \
    \  protocol retrieval operation:  `notReady', `notInService' or\n            `active'.\
    \  That is, when queried, an existing conceptual row\n            has only three\
    \ states:  it is either available for use by\n            the managed device (the\
    \ status column has value `active');\n            it is not available for use\
    \ by the managed device, though\n            the agent has sufficient information\
    \ to make it so (the\n            status column has value `notInService'); or,\
    \ it is not\n            available for use by the managed device, and an attempt\
    \ to\n            make it so would fail because the agent has insufficient\n \
    \           information (the state column has value `notReady').\n           \
    \                          NOTE WELL\n                 This textual convention\
    \ may be used for a MIB table,\n                 irrespective of whether the values\
    \ of that table's\n                 conceptual rows are able to be modified while\
    \ it is\n                 active, or whether its conceptual rows must be taken\n\
    \                 out of service in order to be modified.  That is, it is\n  \
    \               the responsibility of the DESCRIPTION clause of the\n        \
    \         status column to specify whether the status column must\n          \
    \       not be `active' in order for the value of some other\n               \
    \  column of the same conceptual row to be modified.  If\n                 such\
    \ a specification is made, affected columns may be\n                 changed by\
    \ an SNMP set PDU if the RowStatus would not\n                 be equal to `active'\
    \ either immediately before or after\n                 processing the PDU.  In\
    \ other words, if the PDU also\n                 contained a varbind that would\
    \ change the RowStatus\n                 value, the column in question may be\
    \ changed if the\n                 RowStatus was not equal to `active' as the\
    \ PDU was\n                 received, or if the varbind sets the status to a value\n\
    \                 other than 'active'.\n            Also note that whenever any\
    \ elements of a row exist, the\n            RowStatus column must also exist.\n\
    \            To summarize the effect of having a conceptual row with a\n     \
    \       status column having a SYNTAX clause value of RowStatus,\n           \
    \ consider the following state diagram:\n                                    \
    \     STATE\n              +--------------+-----------+-------------+-------------\n\
    \              |      A       |     B     |      C      |      D\n           \
    \   |              |status col.|status column|\n              |status column |\
    \    is     |      is     |status column\n    ACTION    |does not exist|  notReady\
    \ | notInService|  is active\n"
- title: '--------------+--------------+-----------+-------------+-------------'
  contents:
  - '--------------+--------------+-----------+-------------+-------------

    '
- title: set status    |noError    ->D|inconsist- |inconsistent-|inconsistent-
  contents:
  - 'set status    |noError    ->D|inconsist- |inconsistent-|inconsistent-

    '
- title: column to     |       or     |   entValue|        Value|        Value
  contents:
  - 'column to     |       or     |   entValue|        Value|        Value

    '
- title: createAndGo   |inconsistent- |           |             |
  contents:
  - "createAndGo   |inconsistent- |           |             |\n              |   \
    \      Value|           |             |\n"
- title: '--------------+--------------+-----------+-------------+-------------'
  contents:
  - '--------------+--------------+-----------+-------------+-------------

    '
- title: set status    |noError  see 1|inconsist- |inconsistent-|inconsistent-
  contents:
  - 'set status    |noError  see 1|inconsist- |inconsistent-|inconsistent-

    '
- title: column to     |       or     |   entValue|        Value|        Value
  contents:
  - 'column to     |       or     |   entValue|        Value|        Value

    '
- title: createAndWait |wrongValue    |           |             |
  contents:
  - 'createAndWait |wrongValue    |           |             |

    '
- title: '--------------+--------------+-----------+-------------+-------------'
  contents:
  - '--------------+--------------+-----------+-------------+-------------

    '
- title: set status    |inconsistent- |inconsist- |noError      |noError
  contents:
  - 'set status    |inconsistent- |inconsist- |noError      |noError

    '
- title: column to     |         Value|   entValue|             |
  contents:
  - 'column to     |         Value|   entValue|             |

    '
- title: active        |              |           |             |
  contents:
  - "active        |              |           |             |\n              |   \
    \           |     or    |             |\n              |              |      \
    \     |             |\n              |              |see 2   ->D|          ->D|\
    \          ->D\n"
- title: '--------------+--------------+-----------+-------------+-------------'
  contents:
  - '--------------+--------------+-----------+-------------+-------------

    '
- title: set status    |inconsistent- |inconsist- |noError      |noError   ->C
  contents:
  - 'set status    |inconsistent- |inconsist- |noError      |noError   ->C

    '
- title: column to     |         Value|   entValue|             |
  contents:
  - 'column to     |         Value|   entValue|             |

    '
- title: notInService  |              |           |             |
  contents:
  - "notInService  |              |           |             |\n              |   \
    \           |     or    |             |      or\n              |             \
    \ |           |             |\n              |              |see 3   ->C|    \
    \      ->C|wrongValue\n"
- title: '--------------+--------------+-----------+-------------+-------------'
  contents:
  - '--------------+--------------+-----------+-------------+-------------

    '
- title: set status    |noError       |noError    |noError      |noError
  contents:
  - 'set status    |noError       |noError    |noError      |noError

    '
- title: column to     |              |           |             |
  contents:
  - 'column to     |              |           |             |

    '
- title: destroy       |           ->A|        ->A|          ->A|          ->A
  contents:
  - 'destroy       |           ->A|        ->A|          ->A|          ->A

    '
- title: '--------------+--------------+-----------+-------------+-------------'
  contents:
  - '--------------+--------------+-----------+-------------+-------------

    '
- title: set any other |see 4         |noError    |noError      |see 5
  contents:
  - 'set any other |see 4         |noError    |noError      |see 5

    '
- title: column to some|              |           |             |
  contents:
  - 'column to some|              |           |             |

    '
- title: value         |              |      see 1|          ->C|          ->D
  contents:
  - 'value         |              |      see 1|          ->C|          ->D

    '
- title: '--------------+--------------+-----------+-------------+-------------'
  contents:
  - "--------------+--------------+-----------+-------------+-------------\n     \
    \       (1) goto B or C, depending on information available to the\n         \
    \   agent.\n            (2) if other variable bindings included in the same PDU,\n\
    \            provide values for all columns which are missing but\n          \
    \  required, then return noError and goto D.\n            (3) if other variable\
    \ bindings included in the same PDU,\n            provide values for all columns\
    \ which are missing but\n            required, then return noError and goto C.\n\
    \            (4) at the discretion of the agent, the return value may be\n   \
    \         either:\n                 inconsistentName:  because the agent does\
    \ not choose to\n                 create such an instance when the corresponding\n\
    \                 RowStatus instance does not exist, or\n                 inconsistentValue:\
    \  if the supplied value is\n                 inconsistent with the state of some\
    \ other MIB object's\n                 value, or\n                 noError: because\
    \ the agent chooses to create the\n                 instance.\n            If\
    \ noError is returned, then the instance of the status\n            column must\
    \ also be created, and the new state is B or C,\n            depending on the\
    \ information available to the agent.  If\n            inconsistentName or inconsistentValue\
    \ is returned, the row\n            remains in state A.\n            (5) depending\
    \ on the MIB definition for the column/table,\n            either noError or inconsistentValue\
    \ may be returned.\n            NOTE: Other processing of the set request may\
    \ result in a\n            response other than noError being returned, e.g.,\n\
    \            wrongValue, noCreation, etc.\n                              Conceptual\
    \ Row Creation\n            There are four potential interactions when creating\
    \ a\n            conceptual row:  selecting an instance-identifier which is\n\
    \            not in use; creating the conceptual row; initializing any\n     \
    \       objects for which the agent does not supply a default; and,\n        \
    \    making the conceptual row available for use by the managed\n            device.\n\
    \            Interaction 1: Selecting an Instance-Identifier\n            The\
    \ algorithm used to select an instance-identifier varies\n            for each\
    \ conceptual row.  In some cases, the instance-\n            identifier is semantically\
    \ significant, e.g., the\n            destination address of a route, and a management\
    \ station\n            selects the instance-identifier according to the semantics.\n\
    \            In other cases, the instance-identifier is used solely to\n     \
    \       distinguish conceptual rows, and a management station\n            without\
    \ specific knowledge of the conceptual row might\n            examine the instances\
    \ present in order to determine an\n            unused instance-identifier.  (This\
    \ approach may be used, but\n            it is often highly sub-optimal; however,\
    \ it is also a\n            questionable practice for a naive management station\
    \ to\n            attempt conceptual row creation.)\n            Alternately,\
    \ the MIB module which defines the conceptual row\n            might provide one\
    \ or more objects which provide assistance\n            in determining an unused\
    \ instance-identifier.  For example,\n            if the conceptual row is indexed\
    \ by an integer-value, then\n            an object having an integer-valued SYNTAX\
    \ clause might be\n            defined for such a purpose, allowing a management\
    \ station to\n            issue a management protocol retrieval operation.  In\
    \ order\n            to avoid unnecessary collisions between competing management\n\
    \            stations, `adjacent' retrievals of this object should be\n      \
    \      different.\n            Finally, the management station could select a\
    \ pseudo-random\n            number to use as the index.  In the event that this\
    \ index\n            was already in use and an inconsistentValue was returned\
    \ in\n            response to the management protocol set operation, the\n   \
    \         management station should simply select a new pseudo-random\n      \
    \      number and retry the operation.\n            A MIB designer should choose\
    \ between the two latter\n            algorithms based on the size of the table\
    \ (and therefore the\n            efficiency of each algorithm).  For tables in\
    \ which a large\n            number of entries are expected, it is recommended\
    \ that a MIB\n            object be defined that returns an acceptable index for\n\
    \            creation.  For tables with small numbers of entries, it is\n    \
    \        recommended that the latter pseudo-random index mechanism be\n      \
    \      used.\n            Interaction 2: Creating the Conceptual Row\n       \
    \     Once an unused instance-identifier has been selected, the\n            management\
    \ station determines if it wishes to create and\n            activate the conceptual\
    \ row in one transaction or in a\n            negotiated set of interactions.\n\
    \            Interaction 2a: Creating and Activating the Conceptual Row\n    \
    \        The management station must first determine the column\n            requirements,\
    \ i.e., it must determine those columns for\n            which it must or must\
    \ not provide values.  Depending on the\n            complexity of the table and\
    \ the management station's\n            knowledge of the agent's capabilities,\
    \ this determination\n            can be made locally by the management station.\
    \  Alternately,\n            the management station issues a management protocol\
    \ get\n            operation to examine all columns in the conceptual row that\n\
    \            it wishes to create.  In response, for each column, there\n     \
    \       are three possible outcomes:\n                 - a value is returned,\
    \ indicating that some other\n                 management station has already\
    \ created this conceptual\n                 row.  We return to interaction 1.\n\
    \                 - the exception `noSuchInstance' is returned,\n            \
    \     indicating that the agent implements the object-type\n                 associated\
    \ with this column, and that this column in at\n                 least one conceptual\
    \ row would be accessible in the MIB\n                 view used by the retrieval\
    \ were it to exist. For those\n                 columns to which the agent provides\
    \ read-create access,\n                 the `noSuchInstance' exception tells the\
    \ management\n                 station that it should supply a value for this\
    \ column\n                 when the conceptual row is to be created.\n       \
    \          - the exception `noSuchObject' is returned, indicating\n          \
    \       that the agent does not implement the object-type\n                 associated\
    \ with this column or that there is no\n                 conceptual row for which\
    \ this column would be\n                 accessible in the MIB view used by the\
    \ retrieval.  As\n                 such, the management station can not issue\
    \ any\n                 management protocol set operations to create an\n    \
    \             instance of this column.\n            Once the column requirements\
    \ have been determined, a\n            management protocol set operation is accordingly\
    \ issued.\n            This operation also sets the new instance of the status\n\
    \            column to `createAndGo'.\n            When the agent processes the\
    \ set operation, it verifies that\n            it has sufficient information to\
    \ make the conceptual row\n            available for use by the managed device.\
    \  The information\n            available to the agent is provided by two sources:\
    \  the\n            management protocol set operation which creates the\n    \
    \        conceptual row, and, implementation-specific defaults\n            supplied\
    \ by the agent (note that an agent must provide\n            implementation-specific\
    \ defaults for at least those objects\n            which it implements as read-only).\
    \  If there is sufficient\n            information available, then the conceptual\
    \ row is created, a\n            `noError' response is returned, the status column\
    \ is set to\n            `active', and no further interactions are necessary (i.e.,\n\
    \            interactions 3 and 4 are skipped).  If there is insufficient\n  \
    \          information, then the conceptual row is not created, and the\n    \
    \        set operation fails with an error of `inconsistentValue'.\n         \
    \   On this error, the management station can issue a management\n           \
    \ protocol retrieval operation to determine if this was\n            because it\
    \ failed to specify a value for a required column,\n            or, because the\
    \ selected instance of the status column\n            already existed.  In the\
    \ latter case, we return to\n            interaction 1.  In the former case, the\
    \ management station\n            can re-issue the set operation with the additional\n\
    \            information, or begin interaction 2 again using\n            `createAndWait'\
    \ in order to negotiate creation of the\n            conceptual row.\n       \
    \                              NOTE WELL\n                 Regardless of the method\
    \ used to determine the column\n                 requirements, it is possible\
    \ that the management\n                 station might deem a column necessary\
    \ when, in fact,\n                 the agent will not allow that particular columnar\n\
    \                 instance to be created or written.  In this case, the\n    \
    \             management protocol set operation will fail with an\n          \
    \       error such as `noCreation' or `notWritable'.  In this\n              \
    \   case, the management station decides whether it needs\n                 to\
    \ be able to set a value for that particular columnar\n                 instance.\
    \  If not, the management station re-issues the\n                 management protocol\
    \ set operation, but without setting\n                 a value for that particular\
    \ columnar instance;\n                 otherwise, the management station aborts\
    \ the row\n                 creation algorithm.\n            Interaction 2b: Negotiating\
    \ the Creation of the Conceptual\n            Row\n            The management\
    \ station issues a management protocol set\n            operation which sets the\
    \ desired instance of the status\n            column to `createAndWait'.  If the\
    \ agent is unwilling to\n            process a request of this sort, the set operation\
    \ fails with\n            an error of `wrongValue'.  (As a consequence, such an\
    \ agent\n            must be prepared to accept a single management protocol set\n\
    \            operation, i.e., interaction 2a above, containing all of the\n  \
    \          columns indicated by its column requirements.)  Otherwise,\n      \
    \      the conceptual row is created, a `noError' response is\n            returned,\
    \ and the status column is immediately set to either\n            `notInService'\
    \ or `notReady', depending on whether it has\n            sufficient information\
    \ to make the conceptual row available\n            for use by the managed device.\
    \  If there is sufficient\n            information available, then the status\
    \ column is set to\n            `notInService'; otherwise, if there is insufficient\n\
    \            information, then the status column is set to `notReady'.\n     \
    \       Regardless, we proceed to interaction 3.\n            Interaction 3: Initializing\
    \ non-defaulted Objects\n            The management station must now determine\
    \ the column\n            requirements.  It issues a management protocol get operation\n\
    \            to examine all columns in the created conceptual row.  In\n     \
    \       the response, for each column, there are three possible\n            outcomes:\n\
    \                 - a value is returned, indicating that the agent\n         \
    \        implements the object-type associated with this column\n            \
    \     and had sufficient information to provide a value.  For\n              \
    \   those columns to which the agent provides read-create\n                 access\
    \ (and for which the agent allows their values to\n                 be changed\
    \ after their creation), a value return tells\n                 the management\
    \ station that it may issue additional\n                 management protocol set\
    \ operations, if it desires, in\n                 order to change the value associated\
    \ with this column.\n                 - the exception `noSuchInstance' is returned,\n\
    \                 indicating that the agent implements the object-type\n     \
    \            associated with this column, and that this column in at\n       \
    \          least one conceptual row would be accessible in the MIB\n         \
    \        view used by the retrieval were it to exist. However,\n             \
    \    the agent does not have sufficient information to\n                 provide\
    \ a value, and until a value is provided, the\n                 conceptual row\
    \ may not be made available for use by the\n                 managed device. \
    \ For those columns to which the agent\n                 provides read-create\
    \ access, the `noSuchInstance'\n                 exception tells the management\
    \ station that it must\n                 issue additional management protocol\
    \ set operations, in\n                 order to provide a value associated with\
    \ this column.\n                 - the exception `noSuchObject' is returned, indicating\n\
    \                 that the agent does not implement the object-type\n        \
    \         associated with this column or that there is no\n                 conceptual\
    \ row for which this column would be\n                 accessible in the MIB view\
    \ used by the retrieval.  As\n                 such, the management station can\
    \ not issue any\n                 management protocol set operations to create\
    \ an\n                 instance of this column.\n            If the value associated\
    \ with the status column is\n            `notReady', then the management station\
    \ must first deal with\n            all `noSuchInstance' columns, if any.  Having\
    \ done so, the\n            value of the status column becomes `notInService',\
    \ and we\n            proceed to interaction 4.\n            Interaction 4: Making\
    \ the Conceptual Row Available\n            Once the management station is satisfied\
    \ with the values\n            associated with the columns of the conceptual row,\
    \ it issues\n            a management protocol set operation to set the status\
    \ column\n            to `active'.  If the agent has sufficient information to\n\
    \            make the conceptual row available for use by the managed\n      \
    \      device, the management protocol set operation succeeds (a\n           \
    \ `noError' response is returned).  Otherwise, the management\n            protocol\
    \ set operation fails with an error of\n            `inconsistentValue'.\n   \
    \                                  NOTE WELL\n                 A conceptual row\
    \ having a status column with value\n                 `notInService' or `notReady'\
    \ is unavailable to the\n                 managed device.  As such, it is possible\
    \ for the\n                 managed device to create its own instances during\
    \ the\n                 time between the management protocol set operation\n \
    \                which sets the status column to `createAndWait' and the\n   \
    \              management protocol set operation which sets the status\n     \
    \            column to `active'.  In this case, when the management\n        \
    \         protocol set operation is issued to set the status\n               \
    \  column to `active', the values held in the agent\n                 supersede\
    \ those used by the managed device.\n            If the management station is\
    \ prevented from setting the\n            status column to `active' (e.g., due\
    \ to management station\n            or network failure) the conceptual row will\
    \ be left in the\n            `notInService' or `notReady' state, consuming resources\n\
    \            indefinitely.  The agent must detect conceptual rows that\n     \
    \       have been in either state for an abnormally long period of\n         \
    \   time and remove them.  It is the responsibility of the\n            DESCRIPTION\
    \ clause of the status column to indicate what an\n            abnormally long\
    \ period of time would be.  This period of\n            time should be long enough\
    \ to allow for human response time\n            (including `think time') between\
    \ the creation of the\n            conceptual row and the setting of the status\
    \ to `active'.\n            In the absense of such information in the DESCRIPTION\n\
    \            clause, it is suggested that this period be approximately 5\n   \
    \         minutes in length.  This removal action applies not only to\n      \
    \      newly-created rows, but also to previously active rows which\n        \
    \    are set to, and left in, the notInService state for a\n            prolonged\
    \ period exceeding that which is considered normal\n            for such a conceptual\
    \ row.\n                             Conceptual Row Suspension\n            When\
    \ a conceptual row is `active', the management station\n            may issue\
    \ a management protocol set operation which sets the\n            instance of\
    \ the status column to `notInService'.  If the\n            agent is unwilling\
    \ to do so, the set operation fails with an\n            error of `wrongValue'.\
    \  Otherwise, the conceptual row is\n            taken out of service, and a `noError'\
    \ response is returned.\n            It is the responsibility of the DESCRIPTION\
    \ clause of the\n            status column to indicate under what circumstances\
    \ the\n            status column should be taken out of service (e.g., in order\n\
    \            for the value of some other column of the same conceptual\n     \
    \       row to be modified).\n                              Conceptual Row Deletion\n\
    \            For deletion of conceptual rows, a management protocol set\n    \
    \        operation is issued which sets the instance of the status\n         \
    \   column to `destroy'.  This request may be made regardless of\n           \
    \ the current value of the status column (e.g., it is possible\n            to\
    \ delete conceptual rows which are either `notReady',\n            `notInService'\
    \ or `active'.)  If the operation succeeds,\n            then all instances associated\
    \ with the conceptual row are\n            immediately removed.\"\n    SYNTAX\
    \       INTEGER {\n                     -- the following two values are states:\n\
    \                     -- these values may be read or written\n               \
    \      active(1),\n                     notInService(2),\n                   \
    \  -- the following value is a state:\n                     -- this value may\
    \ be read, but not written\n                     notReady(3),\n              \
    \       -- the following three values are\n                     -- actions: these\
    \ values may be written,\n                     --   but are never read\n     \
    \                createAndGo(4),\n                     createAndWait(5),\n   \
    \                  destroy(6)\n                 }\n"
- title: TimeStamp ::= TEXTUAL-CONVENTION
  contents:
  - "TimeStamp ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n\
    \            \"The value of the sysUpTime object at which a specific\n       \
    \     occurrence happened.  The specific occurrence must be\n            defined\
    \ in the description of any object defined using this\n            type.\"\n \
    \   SYNTAX       TimeTicks\n"
- title: TimeInterval ::= TEXTUAL-CONVENTION
  contents:
  - "TimeInterval ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n\
    \            \"A period of time, measured in units of 0.01 seconds.\"\n    SYNTAX\
    \       INTEGER (0..2147483647)\n"
- title: DateAndTime ::= TEXTUAL-CONVENTION
  contents:
  - "DateAndTime ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"2d-1d-1d,1d:1d:1d.1d,1a1d:1d\"\
    \n    STATUS       current\n    DESCRIPTION\n            \"A date-time specification.\n\
    \            field  octets  contents                  range\n            -----\
    \  ------  --------                  -----\n              1      1-2   year  \
    \                    0..65536\n              2       3    month              \
    \       1..12\n              3       4    day                       1..31\n  \
    \            4       5    hour                      0..23\n              5   \
    \    6    minutes                   0..59\n              6       7    seconds\
    \                   0..60\n                           (use 60 for leap-second)\n\
    \              7       8    deci-seconds              0..9\n              8  \
    \     9    direction from UTC        '+' / '-'\n              9      10    hours\
    \ from UTC            0..11\n             10      11    minutes from UTC     \
    \     0..59\n            For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would\
    \ be\n            displayed as:\n                             1992-5-26,13:30:15.0,-4:0\n\
    \            Note that if only local time is known, then timezone\n          \
    \  information (fields 8-10) is not present.\"\n    SYNTAX       OCTET STRING\
    \ (SIZE (8 | 11))\n"
- title: StorageType ::= TEXTUAL-CONVENTION
  contents:
  - "StorageType ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n\
    \            \"Describes the memory realization of a conceptual row.  A\n    \
    \        row which is volatile(2) is lost upon reboot.  A row which\n        \
    \    is either nonVolatile(3), permanent(4) or readOnly(5), is\n            backed\
    \ up by stable storage.  A row which is permanent(4)\n            can be changed\
    \ but not deleted.  A row which is readOnly(5)\n            cannot be changed\
    \ nor deleted.\n            If the value of an object with this syntax is either\n\
    \            permanent(4) or readOnly(5), it cannot be modified.\n           \
    \ Conversely, if the value is either other(1), volatile(2) or\n            nonVolatile(3),\
    \ it cannot be modified to be permanent(4) or\n            readOnly(5).\n    \
    \        Every usage of this textual convention is required to\n            specify\
    \ the columnar objects which a permanent(4) row must\n            at a minimum\
    \ allow to be writable.\"\n    SYNTAX       INTEGER {\n                     other(1),\
    \       -- eh?\n                     volatile(2),    -- e.g., in RAM\n       \
    \              nonVolatile(3), -- e.g., in NVRAM\n                     permanent(4),\
    \   -- e.g., partially in ROM\n                     readOnly(5)     -- e.g., completely\
    \ in ROM\n                 }\n"
- title: TDomain ::= TEXTUAL-CONVENTION
  contents:
  - "TDomain ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n \
    \         \"Denotes a kind of transport service.\n          Some possible values,\
    \ such as snmpUDPDomain, are defined in\n          'Transport Mappings for Version\
    \ 2 of the Simple Network\n          Management Protocol (SNMPv2)'.\"\n    SYNTAX\
    \       OBJECT IDENTIFIER\n"
- title: TAddress ::= TEXTUAL-CONVENTION
  contents:
  - "TAddress ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n\
    \          \"Denotes a transport service address.\n          For snmpUDPDomain,\
    \ a TAddress is 6 octets long, the initial 4\n          octets containing the\
    \ IP-address in network-byte order and the\n          last 2 containing the UDP\
    \ port in network-byte order.  Consult\n          'Transport Mappings for Version\
    \ 2 of the Simple Network\n          Management Protocol (SNMPv2)' for further\
    \ information on\n          snmpUDPDomain.\"\n    SYNTAX       OCTET STRING (SIZE\
    \ (1..255))\n"
- title: END
  contents:
  - 'END

    '
- title: 3.  Mapping of the TEXTUAL-CONVENTION macro
  contents:
  - "3.  Mapping of the TEXTUAL-CONVENTION macro\n   The TEXTUAL-CONVENTION macro\
    \ is used to convey the syntax and\n   semantics associated with a textual convention.\
    \  It should be noted\n   that the expansion of the TEXTUAL-CONVENTION macro is\
    \ something which\n   conceptually happens during implementation and not during\
    \ run-time.\n   For all descriptors appearing in an information module, the\n\
    \   descriptor shall be unique and mnemonic, and shall not exceed 64\n   characters\
    \ in length.  (However, descriptors longer than 32\n   characters are not recommended.)\
    \  Further, the hyphen is not allowed\n   as a character in the name of any textual\
    \ convention.\n"
- title: 3.1.  Mapping of the DISPLAY-HINT clause
  contents:
  - "3.1.  Mapping of the DISPLAY-HINT clause\n   The DISPLAY-HINT clause, which need\
    \ not be present, gives a hint as\n   to how the value of an instance of an object\
    \ with the syntax defined\n   using this textual convention might be displayed.\
    \  The DISPLAY-HINT\n   clause may be present if and only if the syntax has an\
    \ underlying\n   primitive type of INTEGER or OCTET STRING.  (Note, however, that\
    \ the\n   semantics defined for a particular syntax can cause the use of\n   DISPLAY-HINT\
    \ for that syntax to make no sense, e.g., for Counter32\n   [2].)\n   When the\
    \ syntax has an underlying primitive type of INTEGER, the hint\n   consists of\
    \ an integer-format specification, containing two parts.\n   The first part is\
    \ a single character suggesting a display format,\n   either: 'x' for hexadecimal,\
    \ or 'd' for decimal, or 'o' for octal, or\n   'b' for binary.  The second part\
    \ is always omitted for 'x', 'o' and\n   'b', and need not be present for 'd'.\
    \  If present, the second part\n   starts with a hyphen and is followed by a decimal\
    \ number, which\n   defines the implied decimal point when rendering the value.\
    \  For\n   example:\n     Hundredths ::= TEXTUAL-CONVENTION\n         DISPLAY-HINT\
    \ \"d-2\"\n         ...\n         SYNTAX     INTEGER (0..10000)\n   suggests that\
    \ a Hundredths value of 1234 be rendered as \"12.34\"\n   When the syntax has\
    \ an underlying primitive type of OCTET STRING, the\n   hint consists of one or\
    \ more octet-format specifications.  Each\n   specification consists of five parts,\
    \ with each part using and\n   removing zero or more of the next octets from the\
    \ value and producing\n   the next zero or more characters to be displayed.  The\
    \ octets within\n   the value are processed in order of significance, most significant\n\
    \   first.\n   The five parts of a octet-format specification are:\n"
- title: (1)  the (optional) repeat indicator; if present, this part is a `*',
  contents:
  - "(1)  the (optional) repeat indicator; if present, this part is a `*',\n     and\
    \ indicates that the current octet of the value is to be used as\n     the repeat\
    \ count.  The repeat count is an unsigned integer (which\n     may be zero) which\
    \ specifies how many times the remainder of this\n     octet-format specification\
    \ should be successively applied.  If the\n     repeat indicator is not present,\
    \ the repeat count is one.\n"
- title: '(2)  the octet length: one or more decimal digits specifying the number'
  contents:
  - "(2)  the octet length: one or more decimal digits specifying the number\n   \
    \  of octets of the value to be used and formatted by this octet-\n     specification.\
    \  Note that the octet length can be zero.  If less\n     than this number of\
    \ octets remain in the value, then the lesser\n     number of octets are used.\n"
- title: '(3)  the display format, either:  `x'' for hexadecimal, `d'' for decimal,'
  contents:
  - "(3)  the display format, either:  `x' for hexadecimal, `d' for decimal,\n   \
    \  `o' for octal, or `a' for ascii.  If the octet length part is\n     greater\
    \ than one, and the display format part refers to a numeric\n     format, then\
    \ network-byte ordering (big-endian encoding) is used\n     interpreting the octets\
    \ in the value.\n"
- title: (4)  the (optional) display separator character; if present, this part
  contents:
  - "(4)  the (optional) display separator character; if present, this part\n    \
    \ is a single character which is produced for display after each\n     application\
    \ of this octet-specification; however, this character is\n     not produced for\
    \ display if it would be immediately followed by the\n     display of the repeat\
    \ terminator character for this octet-\n     specification.  This character can\
    \ be any character other than a\n     decimal digit and a `*'.\n"
- title: (5)  the (optional) repeat terminator character, which can be present
  contents:
  - "(5)  the (optional) repeat terminator character, which can be present\n     only\
    \ if the display separator character is present and this octet-\n     specification\
    \ begins with a repeat indicator; if present, this part\n     is a single character\
    \ which is produced after all the zero or more\n     repeated applications (as\
    \ given by the repeat count) of this\n     octet-specification.  This character\
    \ can be any character other\n     than a decimal digit and a `*'.\n   Output\
    \ of a display separator character or a repeat terminator\n   character is suppressed\
    \ if it would occur as the last character of\n   the display.\n   If the octets\
    \ of the value are exhausted before all the octet-format\n   specification have\
    \ been used, then the excess specifications are\n   ignored.  If additional octets\
    \ remain in the value after interpreting\n   all the octet-format specifications,\
    \ then the last octet-format\n   specification is re-interpreted to process the\
    \ additional octets,\n   until no octets remain in the value.\n"
- title: 3.2.  Mapping of the STATUS clause
  contents:
  - "3.2.  Mapping of the STATUS clause\n   The STATUS clause, which must be present,\
    \ indicates whether this\n   definition is current or historic.\n   The values\
    \ \"current\", and \"obsolete\" are self-explanatory.  The\n   \"deprecated\"\
    \ value indicates that the definition is obsolete, but\n   that an implementor\
    \ may wish to support the use of this textual\n   convention to foster interoperability\
    \ with older implementations.\n"
- title: 3.3.  Mapping of the DESCRIPTION clause
  contents:
  - "3.3.  Mapping of the DESCRIPTION clause\n   The DESCRIPTION clause, which must\
    \ be present, contains a textual\n   definition of the textual convention, which\
    \ provides all semantic\n   definitions necessary for implementation, and should\
    \ embody any\n   information which would otherwise be communicated in any ASN.1\n\
    \   commentary annotations associated with the object.\n   Note that, in order\
    \ to conform to the ASN.1 syntax, the entire value\n   of this clause must be\
    \ enclosed in double quotation marks, and\n   therefore cannot itself contain\
    \ double quotation marks, although the\n   value may be multi-line.\n"
- title: 3.4.  Mapping of the REFERENCE clause
  contents:
  - "3.4.  Mapping of the REFERENCE clause\n   The REFERENCE clause, which need not\
    \ be present, contains a textual\n   cross-reference to a related item defined\
    \ in some other published\n   work.\n"
- title: 3.5.  Mapping of the SYNTAX clause
  contents:
  - "3.5.  Mapping of the SYNTAX clause\n   The SYNTAX clause, which must be present,\
    \ defines abstract data\n   structure corresponding to the textual convention.\
    \  The data\n   structure must be one of the alternatives defined in the ObjectSyntax\n\
    \   CHOICE or the BITS construct (see section 7.1 in [2]).\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 5.  Editor's Address
  contents:
  - "5.  Editor's Address\n   Keith McCloghrie\n   Cisco Systems, Inc.\n   170 West\
    \ Tasman Drive\n   San Jose, CA  95134-1706\n   US\n   Phone: +1 408 526 5260\n\
    \   EMail: kzm@cisco.com\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   This document is the result of significant work by the\
    \ four major\n   contributors:\n   Jeffrey D. Case (SNMP Research, case@snmp.com)\n\
    \   Keith McCloghrie (Cisco Systems, kzm@cisco.com)\n   Marshall T. Rose (Dover\
    \ Beach Consulting, mrose@dbc.mtview.ca.us)\n   Steven Waldbusser (International\
    \ Network Services, stevew@uni.ins.com)\n   In addition, the contributions of\
    \ the SNMPv2 Working Group are\n   acknowledged.  In particular, a special thanks\
    \ is extended for the\n   contributions of:\n     Alexander I. Alten (Novell)\n\
    \     Dave Arneson (Cabletron)\n     Uri Blumenthal (IBM)\n     Doug Book (Chipcom)\n\
    \     Kim Curran (Bell-Northern Research)\n     Jim Galvin (Trusted Information\
    \ Systems)\n     Maria Greene (Ascom Timeplex)\n     Iain Hanson (Digital)\n \
    \    Dave Harrington (Cabletron)\n     Nguyen Hien (IBM)\n     Jeff Johnson (Cisco\
    \ Systems)\n     Michael Kornegay (Object Quest)\n     Deirdre Kostick (AT&T Bell\
    \ Labs)\n     David Levi (SNMP Research)\n     Daniel Mahoney (Cabletron)\n  \
    \   Bob Natale (ACE*COMM)\n     Brian O'Keefe (Hewlett Packard)\n     Andrew Pearson\
    \ (SNMP Research)\n     Dave Perkins (Peer Networks)\n     Randy Presuhn (Peer\
    \ Networks)\n     Aleksey Romanov (Quality Quorum)\n     Shawn Routhier (Epilogue)\n\
    \     Jon Saperia (BGS Systems)\n     Bob Stewart (Cisco Systems, bstewart@cisco.com),\
    \ chair\n     Kaj Tesink (Bellcore)\n     Glenn Waters (Bell-Northern Research)\n\
    \     Bert Wijnen (IBM)\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: '[1]  Information processing systems - Open Systems Interconnection -'
  contents:
  - "[1]  Information processing systems - Open Systems Interconnection -\n     Specification\
    \ of Abstract Syntax Notation One (ASN.1),\n     International Organization for\
    \ Standardization.  International\n     Standard 8824, (December, 1987).\n"
- title: '[2]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[2]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Structure of Management Information for Version 2\n     of the Simple Network\
    \ Management Protocol (SNMPv2)\", RFC 1902,\n     January 1996.\n"
