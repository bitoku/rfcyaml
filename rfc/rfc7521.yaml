- title: __initial_text__
  contents:
  - "      Assertion Framework for OAuth 2.0 Client Authentication and\n         \
    \                 Authorization Grants\n"
- title: Abstract
  contents:
  - "Abstract\n   This specification provides a framework for the use of assertions\n\
    \   with OAuth 2.0 in the form of a new client authentication mechanism\n   and\
    \ a new authorization grant type.  Mechanisms are specified for\n   transporting\
    \ assertions during interactions with a token endpoint;\n   general processing\
    \ rules are also specified.\n   The intent of this specification is to provide\
    \ a common framework for\n   OAuth 2.0 to interwork with other identity systems\
    \ using assertions\n   and to provide alternative client authentication mechanisms.\n\
    \   Note that this specification only defines abstract message flows and\n   processing\
    \ rules.  In order to be implementable, companion\n   specifications are necessary\
    \ to provide the corresponding concrete\n   instantiations.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7521.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Notational Conventions ..........................................4\n  \
    \ 3. Framework .......................................................4\n   4.\
    \ Transporting Assertions .........................................7\n      4.1.\
    \ Using Assertions as Authorization Grants ...................7\n           4.1.1.\
    \ Error Responses .....................................8\n      4.2. Using Assertions\
    \ for Client Authentication .................9\n           4.2.1. Error Responses\
    \ ....................................10\n   5. Assertion Content and Processing\
    \ ...............................10\n      5.1. Assertion Metamodel .......................................10\n\
    \      5.2. General Assertion Format and Processing Rules .............12\n  \
    \ 6. Common Scenarios ...............................................12\n    \
    \  6.1. Client Authentication .....................................13\n      6.2.\
    \ Client Acting on Behalf of Itself .........................13\n      6.3. Client\
    \ Acting on Behalf of a User .........................13\n           6.3.1. Client\
    \ Acting on Behalf of an Anonymous User .......14\n   7. Interoperability Considerations\
    \ ................................14\n   8. Security Considerations ........................................15\n\
    \      8.1. Forged Assertion ..........................................15\n  \
    \    8.2. Stolen Assertion ..........................................15\n    \
    \  8.3. Unauthorized Disclosure of Personal Information ...........16\n      8.4.\
    \ Privacy Considerations ....................................17\n   9. IANA Considerations\
    \ ............................................17\n      9.1. \"assertion\" Parameter\
    \ Registration ........................17\n      9.2. \"client_assertion\" Parameter\
    \ Registration .................18\n      9.3. \"client_assertion_type\" Parameter\
    \ Registration ............18\n   10. References ....................................................18\n\
    \      10.1. Normative References .....................................18\n  \
    \    10.2. Informative References ...................................18\n   Acknowledgements\
    \ ..................................................20\n   Authors' Addresses\
    \ ................................................20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   An assertion is a package of information that facilitates\
    \ the sharing\n   of identity and security information across security domains.\n\
    \   Section 3 provides a more detailed description of the concept of an\n   assertion\
    \ for the purpose of this specification.\n   OAuth 2.0 [RFC6749] is an authorization\
    \ framework that enables a\n   third-party application to obtain limited access\
    \ to a protected HTTP\n   resource.  In OAuth, those third-party applications\
    \ are called\n   clients; they access protected resources by presenting an access\n\
    \   token to the HTTP resource.  Access tokens are issued to clients by\n   an\
    \ authorization server with the (sometimes implicit) approval of the\n   resource\
    \ owner.  These access tokens are typically obtained by\n   exchanging an authorization\
    \ grant, which represents the authorization\n   granted by the resource owner\
    \ (or by a privileged administrator).\n   Several authorization grant types are\
    \ defined to support a wide range\n   of client types and user experiences.  OAuth\
    \ also provides an\n   extensibility mechanism for defining additional grant types,\
    \ which\n   can serve as a bridge between OAuth and other protocol frameworks.\n\
    \   This specification provides a general framework for the use of\n   assertions\
    \ as authorization grants with OAuth 2.0.  It also provides\n   a framework for\
    \ assertions to be used for client authentication.  It\n   provides generic mechanisms\
    \ for transporting assertions during\n   interactions with an authorization server's\
    \ token endpoint as well as\n   general rules for the content and processing of\
    \ those assertions.\n   The intent is to provide an alternative client authentication\n\
    \   mechanism (one that doesn't send client secrets) and to facilitate\n   the\
    \ use of OAuth 2.0 in client-server integration scenarios, where\n   the end user\
    \ may not be present.\n   This specification only defines abstract message flows\
    \ and processing\n   rules.  In order to be implementable, companion specifications\
    \ are\n   necessary to provide the corresponding concrete instantiations.  For\n\
    \   instance, \"Security Assertion Markup Language (SAML) 2.0 Profile for\n  \
    \ OAuth 2.0 Client Authentication and Authorization Grants\" [RFC7522]\n   defines\
    \ a concrete instantiation for Security Assertion Markup\n   Language (SAML) 2.0\
    \ Assertions and \"JSON Web Token (JWT) Profile for\n   OAuth 2.0 Client Authentication\
    \ and Authorization Grants\" [RFC7523]\n   defines a concrete instantiation for\
    \ JWTs.\n   Note: The use of assertions for client authentication is orthogonal\n\
    \   to and separable from using assertions as an authorization grant.\n   They\
    \ can be used either in combination or separately.  Client\n   assertion authentication\
    \ is nothing more than an alternative way for\n   a client to authenticate to\
    \ the token endpoint and must be used in\n   conjunction with some grant type\
    \ to form a complete and meaningful\n   protocol request.  Assertion authorization\
    \ grants may be used with or\n   without client authentication or identification.\
    \  Whether or not\n   client authentication is needed in conjunction with an assertion\n\
    \   authorization grant, as well as the supported types of client\n   authentication,\
    \ are policy decisions at the discretion of the\n   authorization server.\n"
- title: 2.  Notational Conventions
  contents:
  - "2.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   Throughout this document, values are quoted to indicate that\
    \ they are\n   to be taken literally.  When using these values in protocol messages,\n\
    \   the quotes must not be used as part of the value.\n"
- title: 3.  Framework
  contents:
  - "3.  Framework\n   An assertion is a package of information that allows identity\
    \ and\n   security information to be shared across security domains.  An\n   assertion\
    \ typically contains information about a subject or\n   principal, information\
    \ about the party that issued the assertion and\n   when was it issued, and the\
    \ conditions under which the assertion is\n   to be considered valid, such as\
    \ when and where it can be used.\n   The entity that creates and signs or integrity-protects\
    \ the assertion\n   is typically known as the \"Issuer\", and the entity that\
    \ consumes the\n   assertion and relies on its information is typically known\
    \ as the\n   \"Relying Party\".  In the context of this document, the authorization\n\
    \   server acts as a relying party.\n   Assertions used in the protocol exchanges\
    \ defined by this\n   specification MUST always be integrity protected using a\
    \ digital\n   signature or Message Authentication Code (MAC) applied by the issuer,\n\
    \   which authenticates the issuer and ensures integrity of the assertion\n  \
    \ content.  In many cases, the assertion is issued by a third party,\n   and it\
    \ must be protected against tampering by the client that\n   presents it.  An\
    \ assertion MAY additionally be encrypted, preventing\n   unauthorized parties\
    \ (such as the client) from inspecting the\n   content.\n   Although this document\
    \ does not define the processes by which the\n   client obtains the assertion\
    \ (prior to sending it to the\n   authorization server), there are two common\
    \ patterns described below.\n   In the first pattern, depicted in Figure 1, the\
    \ client obtains an\n   assertion from a third-party entity capable of issuing,\
    \ renewing,\n   transforming, and validating security tokens.  Typically, such\
    \ an\n   entity is known as a \"security token service\" (STS) or just \"token\n\
    \   service\", and a trust relationship (usually manifested in the\n   exchange\
    \ of some kind of key material) exists between the token\n   service and the relying\
    \ party.  The token service is the assertion\n   issuer; its role is to fulfill\
    \ requests from clients, which present\n   various credentials, and mint assertions\
    \ as requested, fill them with\n   appropriate information, and integrity-protect\
    \ them with a signature\n   or message authentication code.  WS-Trust [OASIS.WS-Trust]\
    \ is one\n   available standard for requesting security tokens (assertions).\n\
    \     Relying\n     Party                     Client                   Token Service\n\
    \       |                          |                         |\n       |     \
    \                     |  1) Request Assertion   |\n       |                  \
    \        |------------------------>|\n       |                          |    \
    \                     |\n       |                          |  2) Assertion   \
    \        |\n       |                          |<------------------------|\n  \
    \     |    3) Assertion          |                         |\n       |<-------------------------|\
    \                         |\n       |                          |             \
    \            |\n       |    4) OK or Failure      |                         |\n\
    \       |------------------------->|                         |\n       |     \
    \                     |                         |\n       |                  \
    \        |                         |\n                Figure 1: Assertion Created\
    \ by Third Party\n   In the second pattern, depicted in Figure 2, the client creates\n\
    \   assertions locally.  To apply the signatures or message\n   authentication\
    \ codes to assertions, it has to obtain key material:\n   either symmetric keys\
    \ or asymmetric key pairs.  The mechanisms for\n   obtaining this key material\
    \ are beyond the scope of this\n   specification.\n   Although assertions are\
    \ usually used to convey identity and security\n   information, self-issued assertions\
    \ can also serve a different\n   purpose.  They can be used to demonstrate knowledge\
    \ of some secret,\n   such as a client secret, without actually communicating\
    \ the secret\n   directly in the transaction.  In that case, additional information\n\
    \   included in the assertion by the client itself will be of limited\n   value\
    \ to the relying party, and for this reason, only a bare minimum\n   of information\
    \ is typically included in such an assertion, such as\n   information about issuing\
    \ and usage conditions.\n     Relying\n     Party                     Client\n\
    \       |                          |\n       |                          | 1) Create\n\
    \       |                          |    Assertion\n       |                  \
    \        |--------------+\n       |                          |              |\n\
    \       |                          | 2) Assertion |\n       |                \
    \          |<-------------+\n       |    3) Assertion          |\n       |<-------------------------|\n\
    \       |                          |\n       |    4) OK or Failure      |\n  \
    \     |------------------------->|\n       |                          |\n    \
    \   |                          |\n                      Figure 2: Self-Issued\
    \ Assertion\n   Deployments need to determine the appropriate variant to use based\
    \ on\n   the required level of security, the trust relationship between the\n\
    \   entities, and other factors.\n   From the perspective of what must be done\
    \ by the entity presenting\n   the assertion, there are two general types of assertions:\n\
    \   1.  Bearer Assertions: Any entity in possession of a bearer assertion\n  \
    \     (the bearer) can use it to get access to the associated resources\n    \
    \   (without demonstrating possession of a cryptographic key).  To\n       prevent\
    \ misuse, bearer assertions need to be protected from\n       disclosure in storage\
    \ and in transport.  Secure communication\n       channels are required between\
    \ all entities to avoid leaking the\n       assertion to unauthorized parties.\n\
    \   2.  Holder-of-Key Assertions: To access the associated resources, the\n  \
    \     entity presenting the assertion must demonstrate possession of\n       additional\
    \ cryptographic material.  The token service thereby\n       binds a key identifier\
    \ to the assertion, and the client has to\n       demonstrate to the relying party\
    \ that it knows the key\n       corresponding to that identifier when presenting\
    \ the assertion.\n   The protocol parameters and processing rules defined in this\
    \ document\n   are intended to support a client presenting a bearer assertion\
    \ to an\n   authorization server.  They are not directly suitable for use with\n\
    \   holder-of-key assertions.  While they could be used as a baseline for\n  \
    \ a holder-of-key assertion system, there would be a need for\n   additional mechanisms\
    \ (to support proof-of-possession of the secret\n   key), and possibly changes\
    \ to the security model (e.g., to relax the\n   requirement for an Audience).\n"
- title: 4.  Transporting Assertions
  contents:
  - "4.  Transporting Assertions\n   This section defines HTTP parameters for transporting\
    \ assertions\n   during interactions with a token endpoint of an OAuth authorization\n\
    \   server.  Because requests to the token endpoint result in the\n   transmission\
    \ of clear-text credentials (in both the HTTP request and\n   response), all requests\
    \ to the token endpoint MUST use Transport\n   Layer Security (TLS), as mandated\
    \ in Section 3.2 of OAuth 2.0\n   [RFC6749].\n"
- title: 4.1.  Using Assertions as Authorization Grants
  contents:
  - "4.1.  Using Assertions as Authorization Grants\n   This section defines the use\
    \ of assertions as authorization grants,\n   based on the definition provided\
    \ in Section 4.5 of OAuth 2.0\n   [RFC6749].  When using assertions as authorization\
    \ grants, the client\n   includes the assertion and related information using\
    \ the following\n   HTTP request parameters:\n   grant_type\n      REQUIRED. \
    \ The format of the assertion as defined by the\n      authorization server. \
    \ The value will be an absolute URI.\n   assertion\n      REQUIRED.  The assertion\
    \ being used as an authorization grant.\n      Specific serialization of the assertion\
    \ is defined by profile\n      documents.\n   scope\n      OPTIONAL.  The requested\
    \ scope as described in Section 3.3 of\n      OAuth 2.0 [RFC6749].  When exchanging\
    \ assertions for access\n      tokens, the authorization for the token has been\
    \ previously\n      granted through some out-of-band mechanism.  As such, the\n\
    \      requested scope MUST be equal to or less than the scope originally\n  \
    \    granted to the authorized accessor.  The authorization server MUST\n    \
    \  limit the scope of the issued access token to be equal to or less\n      than\
    \ the scope originally granted to the authorized accessor.\n   Authentication\
    \ of the client is optional, as described in\n   Section 3.2.1 of OAuth 2.0 [RFC6749],\
    \ and consequently, the\n   \"client_id\" is only needed when a form of client\
    \ authentication that\n   relies on the parameter is used.\n   The following example\
    \ demonstrates an assertion being used as an\n   authorization grant (with extra\
    \ line breaks for display purposes\n   only):\n     POST /token HTTP/1.1\n   \
    \  Host: server.example.com\n     Content-Type: application/x-www-form-urlencoded\n\
    \     grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-bearer&\n  \
    \   assertion=PHNhbWxwOl...[omitted for brevity]...ZT4\n   An assertion used in\
    \ this context is generally a short-lived\n   representation of the authorization\
    \ grant, and authorization servers\n   SHOULD NOT issue access tokens with a lifetime\
    \ that exceeds the\n   validity period of the assertion by a significant period.\
    \  In\n   practice, that will usually mean that refresh tokens are not issued\n\
    \   in response to assertion grant requests, and access tokens will be\n   issued\
    \ with a reasonably short lifetime.  Clients can refresh an\n   expired access\
    \ token by requesting a new one using the same\n   assertion, if it is still valid,\
    \ or with a new assertion.\n   An IETF URN for use as the \"grant_type\" value\
    \ can be requested using\n   the template in [RFC6755].  A URN of the form\n \
    \  urn:ietf:params:oauth:grant-type:* is suggested.\n"
- title: 4.1.1.  Error Responses
  contents:
  - "4.1.1.  Error Responses\n   If an assertion is not valid or has expired, the\
    \ authorization server\n   constructs an error response as defined in OAuth 2.0\
    \ [RFC6749].  The\n   value of the \"error\" parameter MUST be the \"invalid_grant\"\
    \ error\n   code.  The authorization server MAY include additional information\n\
    \   regarding the reasons the assertion was considered invalid using the\n   \"\
    error_description\" or \"error_uri\" parameters.\n   For example:\n     HTTP/1.1\
    \ 400 Bad Request\n     Content-Type: application/json\n     Cache-Control: no-store\n\
    \     {\n       \"error\":\"invalid_grant\",\n       \"error_description\":\"\
    Audience validation failed\"\n     }\n"
- title: 4.2.  Using Assertions for Client Authentication
  contents:
  - "4.2.  Using Assertions for Client Authentication\n   The following section defines\
    \ the use of assertions as client\n   credentials as an extension of Section 2.3\
    \ of OAuth 2.0 [RFC6749].\n   When using assertions as client credentials, the\
    \ client includes the\n   assertion and related information using the following\
    \ HTTP request\n   parameters:\n   client_assertion_type\n      REQUIRED.  The\
    \ format of the assertion as defined by the\n      authorization server.  The\
    \ value will be an absolute URI.\n   client_assertion\n      REQUIRED.  The assertion\
    \ being used to authenticate the client.\n      Specific serialization of the\
    \ assertion is defined by profile\n      documents.\n   client_id\n      OPTIONAL.\
    \  The client identifier as described in Section 2.2 of\n      OAuth 2.0 [RFC6749].\
    \  The \"client_id\" is unnecessary for client\n      assertion authentication\
    \ because the client is identified by the\n      subject of the assertion.  If\
    \ present, the value of the\n      \"client_id\" parameter MUST identify the same\
    \ client as is\n      identified by the client assertion.\n   The following example\
    \ demonstrates a client authenticating using an\n   assertion during an access\
    \ token request, as defined in Section 4.1.3\n   of OAuth 2.0 [RFC6749] (with\
    \ extra line breaks for display purposes\n   only):\n     POST /token HTTP/1.1\n\
    \     Host: server.example.com\n     Content-Type: application/x-www-form-urlencoded\n\
    \     grant_type=authorization_code&\n     code=n0esc3NRze7LTCu7iYzS6a5acc3f0ogp4&\n\
    \     client_assertion_type=urn%3Aietf%3Aparams%3Aoauth\n     %3Aclient-assertion-type%3Asaml2-bearer&\n\
    \     client_assertion=PHNhbW...[omitted for brevity]...ZT\n   Token endpoints\
    \ can differentiate between assertion-based credentials\n   and other client credential\
    \ types by looking for the presence of the\n   \"client_assertion\" and \"client_assertion_type\"\
    \ parameters, which will\n   only be present when using assertions for client\
    \ authentication.\n   An IETF URN for use as the \"client_assertion_type\" value\
    \ may be\n   requested using the template in [RFC6755].  A URN of the form\n \
    \  urn:ietf:params:oauth:client-assertion-type:* is suggested.\n"
- title: 4.2.1.  Error Responses
  contents:
  - "4.2.1.  Error Responses\n   If an assertion is invalid for any reason or if more\
    \ than one client\n   authentication mechanism is used, the authorization server\
    \ constructs\n   an error response as defined in OAuth 2.0 [RFC6749].  The value\
    \ of\n   the \"error\" parameter MUST be the \"invalid_client\" error code.  The\n\
    \   authorization server MAY include additional information regarding the\n  \
    \ reasons the client assertion was considered invalid using the\n   \"error_description\"\
    \ or \"error_uri\" parameters.\n   For example:\n     HTTP/1.1 400 Bad Request\n\
    \     Content-Type: application/json\n     Cache-Control: no-store\n     {\n \
    \      \"error\":\"invalid_client\"\n       \"error_description\":\"assertion\
    \ has expired\"\n     }\n"
- title: 5.  Assertion Content and Processing
  contents:
  - "5.  Assertion Content and Processing\n   This section provides a general content\
    \ and processing model for the\n   use of assertions in OAuth 2.0 [RFC6749].\n"
- title: 5.1.  Assertion Metamodel
  contents:
  - "5.1.  Assertion Metamodel\n   The following are entities and metadata involved\
    \ in the issuance,\n   exchange, and processing of assertions in OAuth 2.0.  These\
    \ are\n   general terms, abstract from any particular assertion format.\n   Mappings\
    \ of these terms into specific representations are provided by\n   profiles of\
    \ this specification.\n   Issuer\n      A unique identifier for the entity that\
    \ issued the assertion.\n      Generally, this is the entity that holds the key\
    \ material used to\n      sign or integrity-protect the assertion.  Examples of\
    \ issuers are\n      OAuth clients (when assertions are self-issued) and third-party\n\
    \      security token services.  If the assertion is self-issued, the\n      Issuer\
    \ value is the client identifier.  If the assertion was\n      issued by a security\
    \ token service (STS), the Issuer should\n      identify the STS in a manner recognized\
    \ by the authorization\n      server.  In the absence of an application profile\
    \ specifying\n      otherwise, compliant applications MUST compare Issuer values\
    \ using\n      the Simple String Comparison method defined in Section 6.2.1 of\n\
    \      RFC 3986 [RFC3986].\n   Subject\n      A unique identifier for the principal\
    \ that is the subject of the\n      assertion.\n      *  When using assertions\
    \ for client authentication, the Subject\n         identifies the client to the\
    \ authorization server using the\n         value of the \"client_id\" of the OAuth\
    \ client.\n      *  When using assertions as an authorization grant, the Subject\n\
    \         identifies an authorized accessor for which the access token is\n  \
    \       being requested (typically, the resource owner or an authorized\n    \
    \     delegate).\n   Audience\n      A value that identifies the party or parties\
    \ intended to process\n      the assertion.  The URL of the token endpoint, as\
    \ defined in\n      Section 3.2 of OAuth 2.0 [RFC6749], can be used to indicate\
    \ that\n      the authorization server is a valid intended audience of the\n \
    \     assertion.  In the absence of an application profile specifying\n      otherwise,\
    \ compliant applications MUST compare the Audience values\n      using the Simple\
    \ String Comparison method defined in Section 6.2.1\n      of RFC 3986 [RFC3986].\n\
    \   Issued At\n      The time at which the assertion was issued.  While the\n\
    \      serialization may differ by assertion format, it is REQUIRED that\n   \
    \   the time be expressed in UTC with no time zone component.\n   Expires At\n\
    \      The time at which the assertion expires.  While the serialization\n   \
    \   may differ by assertion format, it is REQUIRED that the time be\n      expressed\
    \ in UTC with no time zone component.\n   Assertion ID\n      A nonce or unique\
    \ identifier for the assertion.  The Assertion ID\n      may be used by implementations\
    \ requiring message de-duplication\n      for one-time use assertions.  Any entity\
    \ that assigns an\n      identifier MUST ensure that there is negligible probability\
    \ for\n      that entity or any other entity to accidentally assign the same\n\
    \      identifier to a different data object.\n"
- title: 5.2.  General Assertion Format and Processing Rules
  contents:
  - "5.2.  General Assertion Format and Processing Rules\n   The following are general\
    \ format and processing rules for the use of\n   assertions in OAuth:\n   o  The\
    \ assertion MUST contain an Issuer.  The Issuer identifies the\n      entity that\
    \ issued the assertion as recognized by the\n      authorization server.  If an\
    \ assertion is self-issued, the Issuer\n      MUST be the value of the client's\
    \ \"client_id\".\n   o  The assertion MUST contain a Subject.  The Subject typically\n\
    \      identifies an authorized accessor for which the access token is\n     \
    \ being requested (i.e., the resource owner or an authorized\n      delegate)\
    \ but, in some cases, may be a pseudonymous identifier or\n      other value denoting\
    \ an anonymous user.  When the client is acting\n      on behalf of itself, the\
    \ Subject MUST be the value of the client's\n      \"client_id\".\n   o  The assertion\
    \ MUST contain an Audience that identifies the\n      authorization server as\
    \ the intended audience.  The authorization\n      server MUST reject any assertion\
    \ that does not contain its own\n      identity as the intended audience.\n  \
    \ o  The assertion MUST contain an Expires At entity that limits the\n      time\
    \ window during which the assertion can be used.  The\n      authorization server\
    \ MUST reject assertions that have expired\n      (subject to allowable clock\
    \ skew between systems).  Note that the\n      authorization server may reject\
    \ assertions with an Expires At\n      attribute value that is unreasonably far\
    \ in the future.\n   o  The assertion MAY contain an Issued At entity containing\
    \ the UTC\n      time at which the assertion was issued.\n   o  The authorization\
    \ server MUST reject assertions with an invalid\n      signature or MAC.  The\
    \ algorithm used to validate the signature or\n      message authentication code\
    \ and the mechanism for designating the\n      secret used to generate the signature\
    \ or message authentication\n      code over the assertion are beyond the scope\
    \ of this\n      specification.\n"
- title: 6.  Common Scenarios
  contents:
  - "6.  Common Scenarios\n   The following provides additional guidance, beyond the\
    \ format and\n   processing rules defined in Sections 4 and 5, on assertion use\
    \ for a\n   number of common use cases.\n"
- title: 6.1.  Client Authentication
  contents:
  - "6.1.  Client Authentication\n   A client uses an assertion to authenticate to\
    \ the authorization\n   server's token endpoint by using the \"client_assertion_type\"\
    \ and\n   \"client_assertion\" parameters as defined in Section 4.2.  The Subject\n\
    \   of the assertion identifies the client.  If the assertion is self-\n   issued\
    \ by the client, the Issuer of the assertion also identifies the\n   client.\n\
    \   The example in Section 4.2 shows a client authenticating using an\n   assertion\
    \ during an access token request.\n"
- title: 6.2.  Client Acting on Behalf of Itself
  contents:
  - "6.2.  Client Acting on Behalf of Itself\n   When a client is accessing resources\
    \ on behalf of itself, it does so\n   in a manner analogous to the Client Credentials\
    \ Grant defined in\n   Section 4.4 of OAuth 2.0 [RFC6749].  This is a special\
    \ case that\n   combines both the authentication and authorization grant usage\n\
    \   patterns.  In this case, the interactions with the authorization\n   server\
    \ should be treated as using an assertion for Client\n   Authentication according\
    \ to Section 4.2, while using the \"grant_type\"\n   parameter with the value\
    \ \"client_credentials\" to indicate that the\n   client is requesting an access\
    \ token using only its client\n   credentials.\n   The following example demonstrates\
    \ an assertion being used for a\n   client credentials access token request, as\
    \ defined in Section 4.4.2\n   of OAuth 2.0 [RFC6749] (with extra line breaks\
    \ for display purposes\n   only):\n     POST /token HTTP/1.1\n     Host: server.example.com\n\
    \     Content-Type: application/x-www-form-urlencoded\n     grant_type=client_credentials&\n\
    \     client_assertion_type=urn%3Aietf%3Aparams%3Aoauth\n     %3Aclient-assertion-type%3Asaml2-bearer&\n\
    \     client_assertion=PHNhbW...[omitted for brevity]...ZT\n"
- title: 6.3.  Client Acting on Behalf of a User
  contents:
  - "6.3.  Client Acting on Behalf of a User\n   When a client is accessing resources\
    \ on behalf of a user, it does so\n   by using the \"grant_type\" and \"assertion\"\
    \ parameters as defined in\n   Section 4.1.  The Subject identifies an authorized\
    \ accessor for which\n   the access token is being requested (typically, the resource\
    \ owner or\n   an authorized delegate).\n   The example in Section 4.1 shows a\
    \ client making an access token\n   request using an assertion as an authorization\
    \ grant.\n"
- title: 6.3.1.  Client Acting on Behalf of an Anonymous User
  contents:
  - "6.3.1.  Client Acting on Behalf of an Anonymous User\n   When a client is accessing\
    \ resources on behalf of an anonymous user,\n   a mutually agreed-upon Subject\
    \ identifier indicating anonymity is\n   used.  The Subject value might be an\
    \ opaque persistent or transient\n   pseudonymous identifier for the user or be\
    \ an agreed-upon static\n   value indicating an anonymous user (e.g., \"anonymous\"\
    ).  The\n   authorization may be based upon additional criteria, such as\n   additional\
    \ attributes or claims provided in the assertion.  For\n   example, a client might\
    \ present an assertion from a trusted issuer\n   asserting that the bearer is\
    \ over 18 via an included claim.  In this\n   case, no additional information\
    \ about the user's identity is\n   included, yet all the data needed to issue\
    \ an access token is\n   present.\n   More information about anonymity, pseudonymity,\
    \ and privacy\n   considerations in general can be found in [RFC6973].\n"
- title: 7.  Interoperability Considerations
  contents:
  - "7.  Interoperability Considerations\n   This specification defines a framework\
    \ for using assertions with\n   OAuth 2.0.  However, as an abstract framework\
    \ in which the data\n   formats used for representing many values are not defined,\
    \ on its\n   own, this specification is not sufficient to produce interoperable\n\
    \   implementations.\n   Two other specifications that profile this framework\
    \ for specific\n   assertions have been developed: [RFC7522] uses SAML 2.0 Assertions\n\
    \   and [RFC7523] uses JSON Web Tokens (JWTs).  These two instantiations\n   of\
    \ this framework specify additional details about the assertion\n   encoding and\
    \ processing rules for using those kinds of assertions\n   with OAuth 2.0.\n \
    \  However, even when profiled for specific assertion types, agreements\n   between\
    \ system entities regarding identifiers, keys, and endpoints\n   are required\
    \ in order to achieve interoperable deployments.  Specific\n   items that require\
    \ agreement are as follows: values for the Issuer\n   and Audience identifiers,\
    \ supported assertion and client\n   authentication types, the location of the\
    \ token endpoint, the key\n   used to apply and verify the digital signature or\
    \ MAC over the\n   assertion, one-time use restrictions on assertions, maximum\
    \ assertion\n   lifetime allowed, and the specific Subject and attribute requirements\n\
    \   of the assertion.  The exchange of such information is explicitly out\n  \
    \ of the scope of this specification.  Deployments for particular trust\n   frameworks,\
    \ circles of trust, or other uses cases will need to agree\n   among the participants\
    \ on the kinds of values to be used for some\n   abstract fields defined by this\
    \ specification.  In some cases,\n   additional profiles may be created that constrain\
    \ or prescribe these\n   values or specify how they are to be exchanged.  The\
    \ \"OAuth 2.0\n   Dynamic Client Registration Core Protocol\" [OAUTH-DYN-REG]\
    \ is one\n   such profile that enables OAuth Clients to register metadata about\n\
    \   themselves at an authorization server.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This section discusses security considerations\
    \ that apply when using\n   assertions with OAuth 2.0 as described in this document.\
    \  As\n   discussed in Section 3, there are two different ways to obtain\n   assertions:\
    \ either as self-issued or obtained from a third-party\n   token service.  While\
    \ the actual interactions for obtaining an\n   assertion are outside the scope\
    \ of this document, the details are\n   important from a security perspective.\
    \  Section 3 discusses the high-\n   level architectural aspects.  Many of the\
    \ security considerations\n   discussed in this section are applicable to both\
    \ the OAuth exchange\n   as well as the client obtaining the assertion.\n   The\
    \ remainder of this section focuses on the exchanges that concern\n   presenting\
    \ an assertion for client authentication and for the\n   authorization grant.\n"
- title: 8.1.  Forged Assertion
  contents:
  - "8.1.  Forged Assertion\n   Threat:\n      An adversary could forge or alter an\
    \ assertion in order to obtain\n      an access token (in the case of the authorization\
    \ grant) or to\n      impersonate a client (in the case of the client authentication\n\
    \      mechanism).\n   Countermeasures:\n      To avoid this kind of attack, the\
    \ entities must assure that proper\n      mechanisms for protecting the integrity\
    \ of the assertion are\n      employed.  This includes the issuer digitally signing\
    \ the\n      assertion or computing a MAC over the assertion.\n"
- title: 8.2.  Stolen Assertion
  contents:
  - "8.2.  Stolen Assertion\n   Threat:\n      An adversary may be able obtain an\
    \ assertion (e.g., by\n      eavesdropping) and then reuse it (replay it) at a\
    \ later point in\n      time.\n   Countermeasures:\n      The primary mitigation\
    \ for this threat is the use of secure\n      communication channels with server\
    \ authentication for all network\n      exchanges.\n      An assertion may also\
    \ contain several elements to prevent replay\n      attacks.  There is, however,\
    \ a clear trade-off between reusing an\n      assertion for multiple exchanges\
    \ and obtaining and creating new,\n      fresh assertions.\n      Authorization\
    \ servers and resource servers may use a combination\n      of the Assertion ID\
    \ and Issued At/Expires At attributes for replay\n      protection.  Previously\
    \ processed assertions may be rejected based\n      on the Assertion ID.  The\
    \ addition of the validity window relieves\n      the authorization server from\
    \ maintaining an infinite state table\n      of processed Assertion IDs.\n"
- title: 8.3.  Unauthorized Disclosure of Personal Information
  contents:
  - "8.3.  Unauthorized Disclosure of Personal Information\n   Threat:\n      The\
    \ ability for other entities to obtain information about an\n      individual,\
    \ such as authentication information, role in an\n      organization, or other\
    \ authorization-relevant information, raises\n      privacy concerns.\n   Countermeasures:\n\
    \      To address this threat, two cases need to be differentiated:\n      First,\
    \ a third party that did not participate in any of the\n      exchange is prevented\
    \ from eavesdropping on the content of the\n      assertion by employing confidentiality\
    \ protection of the exchange\n      using TLS.  This ensures that an eavesdropper\
    \ on the wire is\n      unable to obtain information.  However, this does not\
    \ prevent\n      legitimate protocol entities from obtaining information that\
    \ they\n      are not allowed to possess from assertions.  Some assertion\n  \
    \    formats allow for the assertion to be encrypted, preventing\n      unauthorized\
    \ parties from inspecting the content.\n      Second, an authorization server\
    \ may obtain an assertion that was\n      created by a third-party token service\
    \ and that token service may\n      have placed attributes into the assertion.\
    \  To mitigate potential\n      privacy problems, prior consent for the release\
    \ of such attribute\n      information from the resource owner should be obtained.\
    \  OAuth\n      itself does not directly provide such capabilities, but this\n\
    \      consent approval may be obtained using other identity management\n    \
    \  protocols or user consent interactions; it may also be obtained in\n      an\
    \ out-of-band fashion.\n      For the cases where a third-party token service\
    \ creates assertions\n      to be used for client authentication, privacy concerns\
    \ are\n      typically lower, since many of these clients are Web servers\n  \
    \    rather than individual devices operated by humans.  If the\n      assertions\
    \ are used for client authentication of devices or\n      software that can be\
    \ closely linked to end users, then privacy\n      protection safeguards need\
    \ to be taken into consideration.\n      Further guidance on privacy friendly\
    \ protocol design can be found\n      in [RFC6973].\n"
- title: 8.4.  Privacy Considerations
  contents:
  - "8.4.  Privacy Considerations\n   An assertion may contain privacy-sensitive information\
    \ and, to\n   prevent disclosure of such information to unintended parties, should\n\
    \   only be transmitted over encrypted channels, such as TLS.  In cases\n   where\
    \ it is desirable to prevent disclosure of certain information to\n   the client,\
    \ the assertion (or portions of it) should be encrypted to\n   the authorization\
    \ server.\n   Deployments should determine the minimum amount of information\n\
    \   necessary to complete the exchange and include only such information\n   in\
    \ the assertion.  In some cases, the Subject identifier can be a\n   value representing\
    \ an anonymous or pseudonymous user, as described in\n   Section 6.3.1.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This section registers three values, as listed in\
    \ the subsections\n   below, in the IANA \"OAuth Parameters\" registry established\
    \ by RFC\n   6749 [RFC6749].\n"
- title: 9.1.  "assertion" Parameter Registration
  contents:
  - "9.1.  \"assertion\" Parameter Registration\n   o  Name: assertion\n   o  Parameter\
    \ Usage Location: token request\n   o  Change Controller: IESG\n   o  Specification\
    \ Document(s): RFC 7521\n"
- title: 9.2.  "client_assertion" Parameter Registration
  contents:
  - "9.2.  \"client_assertion\" Parameter Registration\n   o  Name: client_assertion\n\
    \   o  Parameter Usage Location: token request\n   o  Change Controller: IESG\n\
    \   o  Specification Document(s): RFC 7521\n"
- title: 9.3.  "client_assertion_type" Parameter Registration
  contents:
  - "9.3.  \"client_assertion_type\" Parameter Registration\n   o  Name: client_assertion_type\n\
    \   o  Parameter Usage Location: token request\n   o  Change Controller: IESG\n\
    \   o  Specification Document(s): RFC 7521\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66,\n           \
    \   RFC 3986, DOI 10.17487/RFC3986, January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC6749]  Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\",\n  \
    \            RFC 6749, DOI 10.17487/RFC6749, October 2012,\n              <http://www.rfc-editor.org/info/rfc6749>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [OASIS.WS-Trust]\n              Nadalin, A.,\
    \ Ed., Goodner, M., Ed., Gudgin, M., Ed.,\n              Barbir, A., Ed., and\
    \ H. Granqvist, Ed., \"WS-Trust\",\n              February 2009, <http://docs.oasis-open.org/ws-sx/\n\
    \              ws-trust/v1.4/ws-trust.html>.\n   [OAUTH-DYN-REG]\n           \
    \   Richer, J., Ed., Jones, M., Bradley, J., Machulak, M., and\n             \
    \ P. Hunt, \"OAuth 2.0 Dynamic Client Registration Protocol\",\n             \
    \ Work in Progress, draft-ietf-oauth-dyn-reg-29, May 2015.\n   [RFC6755]  Campbell,\
    \ B. and H. Tschofenig, \"An IETF URN Sub-Namespace\n              for OAuth\"\
    , RFC 6755, DOI 10.17487/RFC6755, October 2012,\n              <http://www.rfc-editor.org/info/rfc6755>.\n\
    \   [RFC6973]  Cooper, A., Tschofenig, H., Aboba, B., Peterson, J.,\n        \
    \      Morris, J., Hansen, M., and R. Smith, \"Privacy\n              Considerations\
    \ for Internet Protocols\", RFC 6973,\n              DOI 10.17487/RFC6973, July\
    \ 2013,\n              <http://www.rfc-editor.org/info/rfc6973>.\n   [RFC7522]\
    \  Campbell, B., Mortimore, C., and M. Jones, \"Security\n              Assertion\
    \ Markup Language (SAML) 2.0 Profile for OAuth 2.0\n              Client Authentication\
    \ and Authorization Grants\", RFC 7522,\n              DOI 10.17487/RFC7522, May\
    \ 2015,\n              <http://www.rfc-editor.org/info/rfc7522>.\n   [RFC7523]\
    \  Jones, M., Campbell, B., and C. Mortimore, \"JSON Web Token\n             \
    \ (JWT) Profile for OAuth 2.0 Client Authentication and\n              Authorization\
    \ Grants\", RFC 7523, DOI 10.17487/RFC7523, May\n              2015, <http://www.rfc-editor.org/info/rfc7523>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors wish to thank the following people who have\
    \ influenced or\n   contributed to this specification: Paul Madsen, Eric Sachs,\
    \ Jian Cai,\n   Tony Nadalin, Hannes Tschofenig, the authors of the OAuth WRAP\n\
    \   specification, and the members of the OAuth working group.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Brian Campbell\n   Ping Identity\n   EMail: brian.d.campbell@gmail.com\n\
    \   Chuck Mortimore\n   Salesforce.com\n   EMail: cmortimore@salesforce.com\n\
    \   Michael B. Jones\n   Microsoft\n   EMail: mbj@microsoft.com\n   URI:   http://self-issued.info/\n\
    \   Yaron Y. Goland\n   Microsoft\n   EMail: yarong@microsoft.com\n"
