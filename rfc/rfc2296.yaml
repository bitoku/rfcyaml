- title: __initial_text__
  contents:
  - '          HTTP Remote Variant Selection Algorithm -- RVSA/1.0

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: ABSTRACT
  contents:
  - "ABSTRACT\n   HTTP allows web site authors to put multiple versions of the same\n\
    \   information under a single URL.  Transparent content negotiation is a\n  \
    \ mechanism for automatically selecting the best version when the URL\n   is accessed.\
    \  A remote variant selection algorithm can be used to\n   speed up the transparent\
    \ negotiation process. This document defines\n   the remote variant selection\
    \ algorithm with the version number 1.0.\n"
- title: TABLE OF CONTENTS
  contents:
  - "TABLE OF CONTENTS\n    4.3 Differences between the local and the remote algorithm..10\n\
    \   5  Security and privacy considerations.......................11\n   6  Acknowledgments...........................................12\n\
    \   7  References................................................12\n   8  Authors'\
    \ Addresses........................................12\n   9  Full Copyright Statement..................................13\n"
- title: 1  Introduction
  contents:
  - "1  Introduction\n   HTTP allows web site authors to put multiple versions (variants)\
    \ of\n   the same information under a single URL.  Transparent content\n   negotiation\
    \ [2] is a mechanism for automatically selecting the best\n   variant when the\
    \ URL is accessed.  A remote variant selection\n   algorithm can be used by a\
    \ HTTP server to choose a best variant on\n   behalf of a negotiating user agent.\
    \  The use of a remote algorithm\n   can speed up the transparent negotiation\
    \ process by eliminating a\n   request-response round trip.\n   This document\
    \ defines the remote variant selection algorithm with the\n   version number 1.0.\
    \  The algorithm computes whether the Accept-\n   headers in the request contain\
    \ sufficient information to allow a\n   choice, and if so, which variant must\
    \ be chosen.\n"
- title: 2  Terminology and notation
  contents:
  - "2  Terminology and notation\n   This specification uses the terminology and notation\
    \ of the HTTP\n   transparent content negotiation specification [2].\n"
- title: 3  The remote variant selection algorithm
  contents:
  - "3  The remote variant selection algorithm\n   This section defines the remote\
    \ variant selection algorithm with the\n   version number 1.0.  To implement this\
    \ definition, a server MAY run\n   any algorithm which gives equal results.\n\
    \     Note: According to [2], servers are always free to return a list\n     response\
    \ instead of running a remote algorithm.  Therefore,\n     whenever a server may\
    \ run a remote algorithm, it may also run a\n     partial implementation of the\
    \ algorithm, provided that the partial\n     implementation always returns List_response\
    \ when it cannot compute\n     the real result.\n"
- title: 3.1 Input
  contents:
  - "3.1 Input\n     The algorithm is always run for a particular request on a\n \
    \    particular transparently negotiable resource.  It takes the\n     following\
    \ information as input.\n    1. The variant list of the resource, as present in\
    \ the Alternates\n       header of the resource.\n    2. (Partial) Information\
    \ about capabilities and preferences of the\n       user agent for this particular\
    \ request, as given in the Accept-\n       headers of the request.\n   If a fallback\
    \ variant description\n       {\"fallback.html\"}\n   is present in the Alternates\
    \ header, the algorithm MUST interpret it\n   as the variant description\n   \
    \    {\"fallback.html\" 0.000001}\n   The extremely low source quality value ensures\
    \ that the fallback\n   variant only gets chosen if all other options are exhausted.\n"
- title: 3.2 Output
  contents:
  - "3.2 Output\n   As its output, the remote variant selection algorithm and will\
    \ yield\n   the appropriate action to be performed.  There are two possibilities:\n\
    \      Choice_response\n        The Accept- headers contain sufficient information\
    \ to make a\n        choice on behalf of the user agent possible, and the best\n\
    \        variant MAY be returned in a choice response.\n      List_response\n\
    \        The Accept- headers do not contain sufficient information to\n      \
    \  make a choice on behalf of the user agent possible.  A list\n        response\
    \ MUST be returned, allowing the user agent to make the\n        choice itself.\n"
- title: 3.3 Computing overall quality values
  contents:
  - "3.3 Computing overall quality values\n   As a first step in the remote variant\
    \ selection algorithm, the\n   overall qualities of the individual variants in\
    \ the list are\n   computed.\n   The overall quality Q of a variant is the value\n\
    \      Q = round5( qs * qt * qc * ql * qf )\n   where round5 is a function which\
    \ rounds a floating point value to 5\n   decimal places after the point, and where\
    \ the factors qs, qt, qc, ql,\n   and qf are determined as follows.\n      qs\
    \ Is the source quality factor in the variant description.\n      qt The media\
    \ type quality factor is 1 if there is no type\n         attribute in the variant\
    \ description, or if there is no Accept\n         header in the request.  Otherwise,\
    \ it is the quality assigned\n         by the Accept header to the media type\
    \ in the type attribute.\n           Note: If a type is matched by none of the\
    \ elements of an\n           Accept header, the Accept header assigns the quality\
    \ factor 0\n           to that type.\n      qc The charset quality factor is 1\
    \ if there is no charset\n         attribute in the variant description, or if\
    \ there is no\n         Accept-Charset header in the request.  Otherwise, the\
    \ charset\n         quality factor is the quality assigned by the Accept-Charset\n\
    \         header to the charset in the charset attribute.\n      ql The language\
    \ quality factor is 1 if there is no language\n         attribute in the variant\
    \ description, or if there is no\n         Accept-Language header in the request.\
    \  Otherwise, the language\n         quality factor is the highest quality factor\
    \ assigned by the\n         Accept-Language header to any one of the languages\
    \ listed in\n         the language attribute.\n      qf The features quality factor\
    \ is 1 if there is no features\n         attribute in the variant description,\
    \ or if there is no\n         Accept-Features header in the request.  Otherwise,\
    \ it is the\n         quality degradation factor for the features attribute, see\n\
    \         section 6.4 of [2].\n   As an example, if a variant list contains the\
    \ variant description\n     {\"paper.html.en\" 0.7 {type text/html} {language\
    \ fr}}\n   and if the request contains the Accept- headers\n     Accept: text/html:q=1.0,\
    \ */*:q=0.8\n     Accept-Language: en;q=1.0, fr;q=0.5\n   the remote variant selection\
    \ algorithm will compute an overall\n   quality for the variant as follows:\n\
    \     {\"paper.html.fr\" 0.7 {type text/html} {language fr}}\n               \
    \        |           |                 |\n                       |           |\
    \                 |\n                       V           V                 V\n\
    \             round5 ( 0.7   *     1.0        *      0.5 ) = 0.35000\n   With\
    \ the above Accept- headers, the complete variant list\n     {\"paper.html.en\"\
    \ 0.9 {type text/html} {language en}},\n     {\"paper.html.fr\" 0.7 {type text/html}\
    \ {language fr}},\n     {\"paper.ps.en\"   1.0 {type application/postscript} {language\
    \ en}}\n   would yield the following computations:\n            round5 ( qs  *\
    \ qt  * qc  * ql  * qf  ) =   Q\n                     ---   ---   ---   ---  \
    \ ---     -------\n      paper.html.en: 0.9 * 1.0 * 1.0 * 1.0 * 1.0   = 0.90000\n\
    \      paper.html.fr: 0.7 * 1.0 * 1.0 * 0.5 * 1.0   = 0.35000\n      paper.ps.en:\
    \   1.0 * 0.8 * 1.0 * 1.0 * 1.0   = 0.80000\n"
- title: 3.4 Definite and speculative quality values
  contents:
  - "3.4 Definite and speculative quality values\n   A computed overall quality value\
    \ can be either definite or\n   speculative.  An overall quality value is definite\
    \ if it was computed\n   without using any wildcard characters '*' in the Accept-\
    \ headers, and\n   without the need to use the absence of a particular Accept-\
    \ header.\n   An overall quality value is speculative otherwise.\n   As an example,\
    \ in the previous section, the quality values of\n   paper.html.en and paper.html.fr\
    \ are definite, and the quality value\n   of paper.ps.en is speculative because\
    \ the type application/postscript\n   was matched to the range */*.\n   Definiteness\
    \ can be defined more formally as follows.  An overall\n   quality value Q is\
    \ definite if the same quality value Q can be\n   computed after the request message\
    \ is changed in the following way:\n       1. If an Accept, Accept-Charset, Accept-Language,\
    \ or\n          Accept-Features header is missing from the request, add this\n\
    \          header with an empty field.\n       2. Delete any media ranges containing\
    \ a wildcard character '*'\n          from the Accept header.  Delete any wildcard\
    \ '*' from the\n          Accept-Charset, Accept-Language, and Accept-Features\
    \ headers.\n   As another example, the overall quality factor for the variant\n\
    \     {\"blah.html\" 1 {language en-gb} {features blebber [x y]}}\n   is 1 and\
    \ definite with the Accept- headers\n     Accept-Language: en-gb, fr\n     Accept-Features:\
    \ blebber, x, !y, *\n   and\n     Accept-Language: en, fr\n     Accept-Features:\
    \ blebber, x, *\n   The overall quality factor is still 1, but speculative, with\
    \ the\n   Accept- headers\n     Accept-language: en-gb, fr\n     Accept-Features:\
    \ blebber, !y, *\n   and\n     Accept-Language: fr, *\n     Accept-Features: blebber,\
    \ x, !y, *\n"
- title: 3.5 Determining the result
  contents:
  - "3.5 Determining the result\n   The best variant, as determined by the remote\
    \ variant selection\n   algorithm, is the one variant with the highest overall\
    \ quality value,\n   or, if there are multiple variants which share the highest\
    \ overall\n   quality, the first variant in the list with this value.\n   The\
    \ end result of the remote variant selection algorithm is\n   Choice_response\
    \ if all of the following conditions are met\n      a. the overall quality value\
    \ of the best variant is greater\n         than 0\n      b. the overall quality\
    \ value of the best variant is a definite\n         quality value\n      c. the\
    \ variant resource is a neighbor of the negotiable\n         resource.  This last\
    \ condition exists to ensure that a\n         security-related restriction on\
    \ the generation of choice\n         responses is met, see sections 10.2 and 14.2\
    \ of [2].\n   In all other cases, the end result is List_response.\n   The requirement\
    \ for definiteness above affects the interpretation of\n   Accept- headers in\
    \ a dramatic way.  For example, it causes the remote\n   algorithm to interpret\
    \ the header\n     Accept: image/gif;q=0.9, */*;q=1.0\n   as\n     `I accept image/gif\
    \ with a quality of 0.9, and assign quality\n     factors up to 1.0 to other media\
    \ types.  If this information is\n     insufficient to make a choice on my behalf,\
    \ do not make a choice\n     but send the list of variants'.\n   Without the requirement,\
    \ the interpretation would have been\n     `I accept image/gif with a quality\
    \ of 0.9, and all other media\n     types with a quality of 1.0'.\n"
- title: 4  Use of the algorithm
  contents:
  - "4  Use of the algorithm\n   This section discusses how user agents can use the\
    \ remote algorithm\n   in an optimal way.  This section is not normative, it is\
    \ included for\n   informational purposes only.\n"
- title: 4.1 Using quality factors to rank preferences
  contents:
  - "4.1 Using quality factors to rank preferences\n   Using quality factors, a user\
    \ agent can not only rank the elements\n   within a particular Accept- header,\
    \ it can also express precedence\n   relations between the different Accept- headers.\
    \  Consider for\n   example the following variant list:\n     {\"paper.english\"\
    \ 1.0 {language en} {charset ISO-8859-1}},\n     {\"paper.greek\"   1.0 {language\
    \ el} {charset ISO-8859-7}}\n   and suppose that the user prefers \"el\" over\
    \ \"en\", while the user\n   agent can render \"ISO-8859-1\" with a higher quality\
    \ than \"ISO-8859-\n   7\".  If the Accept- headers are\n     Accept-Language:\
    \ gr, en;q=0.8\n     Accept-Charset: ISO-8859-1, ISO-8859-7;q=0.6, *\n   then\
    \ the remote variant selection algorithm would choose the English\n   variant,\
    \ because this variant has the least overall quality\n   degradation.  But if\
    \ the Accept- headers are\n     Accept-Language: gr, en;q=0.8\n     Accept-Charset:\
    \ ISO-8859-1, ISO-8859-7;q=0.95, *\n   then the algorithm would choose the Greek\
    \ variant.  In general, the\n   Accept- header with the biggest spread between\
    \ its quality factors\n   gets the highest precedence.  If a user agent allows\
    \ the user to set\n   the quality factors for some headers, while other factors\
    \ are hard-\n   coded, it should use a low spread on the hard-coded factors and\
    \ a\n   high spread on the user-supplied factors, so that the user settings\n\
    \   take precedence over the built-in settings.\n"
- title: 4.2 Construction of short requests
  contents:
  - "4.2 Construction of short requests\n   In a request on a transparently negotiated\
    \ resource, a user agent\n   need not send a very long Accept- header, which lists\
    \ all of its\n   capabilities, to get optimal results.  For example, instead of\n\
    \   sending\n     Accept: image/gif;q=0.9, image/jpeg;q=0.8, image/png;q=1.0,\n\
    \             image/tiff;q=0.5, image/ief;q=0.5, image/x-xbitmap;q=0.8,\n    \
    \         application/plugin1;q=1.0, application/plugin2;q=0.9\n   the user agent\
    \ can send\n     Accept: image/gif;q=0.9, */*;q=1.0\n   It can send this short\
    \ header without running the risk of getting a\n   choice response with, say,\
    \ an inferior image/tiff variant.  For\n   example, with the variant list\n  \
    \   {\"x.gif\" 1.0 {type image/gif}}, {\"x.tiff\" 1.0 {type image/tiff}},\n  \
    \ the remote algorithm will compute a definite overall quality of 0.9\n   for\
    \ x.gif and a speculative overall quality value of 1.0 for x.tiff.\n   As the\
    \ best variant has a speculative quality value, the algorithm\n   will not choose\
    \ x.tiff, but return a list response, after which the\n   selection algorithm\
    \ of the user agent will correctly choose x.gif.\n   The end result is the same\
    \ as if the long Accept- header above had\n   been sent.\n   Thus, user agents\
    \ can vary the length of the Accept- headers to get\n   an optimal tradeoff between\
    \ the speed with which the first request is\n   transmitted, and the chance that\
    \ the remote algorithm has enough\n   information to eliminate a second request.\n"
- title: 4.2.1 Collapsing Accept- header elements
  contents:
  - "4.2.1 Collapsing Accept- header elements\n   This section discusses how a long\
    \ Accept- header which lists all\n   capabilities and preferences can be safely\
    \ made shorter.  The remote\n   variant selection algorithm is designed in such\
    \ a way that it is\n   always safe to shorten an Accept or Accept-Charset header\
    \ by two\n   taking two header elements `A;q=f' and `B;q=g' and replacing them\
    \ by\n   a single element `P;q=m' where P is a wildcard pattern that matches\n\
    \   both A and B, and m is the maximum of f and g.  Some examples are\n      text/html;q=1.0,\
    \ text/plain;q=0.8       -->    text/*;q=1.0\n      image/*;q=0.8, application/*;q=0.7\
    \      -->    */*;q=0.8\n      iso-8859-5;q=1.0, unicode-1-1;q=0.8     -->   \
    \ *;q=1.0\n   Note that every `;q=1.0' above is optional, and can be omitted:\n\
    \      iso-8859-7;q=0.6, *                     -->    *\n   For Accept-Language,\
    \ it is safe to collapse all language ranges\n   with the same primary tag into\
    \ a wildcard:\n      en-us;q=0.9, en-gb;q=0.7, en;q=0.8, da  -->    *;q=0.9, da\n\
    \   It is also safe to collapse a language range into a wildcard, or to\n   replace\
    \ it by a wildcard, if its primary tag appears only once:\n      *;q=0.9, da \
    \                            -->    *\n   Finally, in the Accept-Features header,\
    \ every feature expression\n   can be collapsed into a wildcard, or replaced by\
    \ a wildcard:\n      colordepth!=5, *                        -->    *\n"
- title: 4.2.2 Omitting Accept- headers
  contents:
  - "4.2.2 Omitting Accept- headers\n   According to the HTTP/1.1 specification [1],\
    \ the complete absence of\n   an Accept header from the request is equivalent\
    \ to the presence of\n   `Accept: */*'.  Thus, if the Accept header is collapsed\
    \ to `Accept:\n   */*', a user agent may omit it entirely.  An Accept-Charset,\
    \ Accept-\n   Language, or Accept-Features header which only contains `*' may\
    \ also\n   be omitted.\n"
- title: 4.2.3 Dynamically lengthening requests
  contents:
  - "4.2.3 Dynamically lengthening requests\n   In general, a user agent capable of\
    \ transparent content negotiation\n   can send short requests by default.  Some\
    \ short Accept- headers could\n   be included for the benefit of existing servers\
    \ which use HTTP/1.0\n   style negotiation (see section 4.2 of [2]).  An example\
    \ is\n      GET /paper HTTP/1.1\n      Host: x.org\n      User-Agent: WuxtaWeb/2.4\n\
    \      Negotiate: 1.0\n      Accept-Language: en, *;q=0.9\n   If the Accept- headers\
    \ included in such a default request are not\n   suitable as input to the remote\
    \ variant selection algorithm, the user\n   agent can disable the algorithm by\
    \ sending `Negotiate: trans' instead\n   of `Negotiate: 1.0'.\n   If the user\
    \ agent discovers, though the receipt of a list or choice\n   response, that a\
    \ particular origin server contains transparently\n   negotiated resources, it\
    \ could dynamically lengthen future requests\n   to this server, for example to\n\
    \      GET /paper/chapter1 HTTP/1.1\n      Host: x.org\n      User-Agent: WuxtaWeb/2.4\n\
    \      Negotiate: 1.0\n      Accept: text/html, application/postscript;q=0.8,\
    \ */*\n      Accept-Language: en, fr;q=0.5, *;q=0.9\n      Accept-Features: tables,\
    \ *\n   This will increase the chance that the remote variant selection\n   algorithm\
    \ will have sufficient information to choose on behalf of the\n   user agent,\
    \ thereby optimizing the negotiation process.  A good\n   strategy for dynamic\
    \ extension would be to extend the headers with\n   those media types, languages,\
    \ charsets, and feature tags mentioned in\n   the variant lists of past responses\
    \ from the server.\n"
- title: 4.3 Differences between the local and the remote algorithm
  contents:
  - "4.3 Differences between the local and the remote algorithm\n   A user agent can\
    \ only optimize content negotiation though the use of\n   a remote algorithm if\
    \ its local algorithm will generally make the\n   same choice.  If a user agent\
    \ receives a choice response containing a\n   variant X selected by the remote\
    \ algorithm, while the local algorithm\n   would have selected Y, the user agent\
    \ has two options:\n     1. Retrieve Y in a subsequent request. This is sub-optimal\n\
    \        because it takes time.\n     2. Display X anyway.  This is sub-optimal\
    \ because it makes the\n        end result of the negotiation process dependent\
    \ on factors that\n        can randomly change.  For the next request on the same\
    \ resource,\n        and intermediate proxy cache could return a list response,\
    \ which\n        would cause the local algorithm to choose and retrieve Y instead\n\
    \        of X.  Compared to a stable representation, a representation\n      \
    \  which randomly switches between X and Y (say, the version with\n        and\
    \ without frames) has a very low subjective quality for most\n        users.\n\
    \   As both alternatives above are unattractive, a user agent should try\n   to\
    \ avoid the above situation altogether.  The sections below discuss\n   how this\
    \ can be done.\n"
- title: 4.3.1 Avoiding major differences
  contents:
  - "4.3.1 Avoiding major differences\n   If the user agent enables the remote algorithm\
    \ in this specification,\n   it should generally use a local algorithm which closely\
    \ resembles the\n   remote algorithm.  The algorithm should for example also use\n\
    \   multiplication to combine quality factors.  If the user agent\n   combines\
    \ quality factors by addition, it would be more advantageous\n   to define a new\
    \ remote variant selection algorithm, with a new major\n   version number, for\
    \ use by this agent.\n"
- title: 4.3.2 Working around minor differences
  contents:
  - "4.3.2 Working around minor differences\n   Even if a local algorithm uses multiplication\
    \ to combine quality\n   factors, it could use an extended quality formulae like\n\
    \      Q = round5( qs * qt * qc * ql * qf ) * q_adjust\n   in order to account\
    \ for special interdependencies between dimensions,\n   which are due to limitations\
    \ of the user agent.  For example, if the\n   user agent, for some reason, cannot\
    \ handle the iso-8859-7 charset\n   when rendering text/plain documents, the q_adjust\
    \ factor would be 0\n   when the text/plain - iso-8859-7 combination is present\
    \ in the\n   variant description, and 1 otherwise.\n   By selectively withholding\
    \ information from the remote variant\n   selection algorithm, the user agent\
    \ can ensure that the remote\n   algorithm will never make a choice if the local\
    \ q_adjust is less than\n   1.  For example, to prevent the remote algorithm from\
    \ ever returning\n   a text/plain - iso-8859-7 choice response, the user agent\
    \ should take\n   care to never produce a request which exactly specifies the\
    \ quality\n   factors of both text/plain and iso-8859-7.  The omission of either\n\
    \   factor from a request will cause the overall quality value of any\n   text/plain\
    \ - iso-8859-7 variant to be speculative, and variants with\n   speculative quality\
    \ values can never be returned in a choice\n   response.\n   In general, if the\
    \ local q_adjust does not equal 1 for a particular\n   combination X - Y - Z,\
    \ then a remote choice can be prevented by\n   always omitting at least one of\
    \ the elements of the combination from\n   the Accept- headers, and adding a suitable\
    \ wildcard pattern to match\n   the omitted element, if such a pattern is not\
    \ already present.\n"
- title: 5  Security and privacy considerations
  contents:
  - "5  Security and privacy considerations\n   This specification introduces no security\
    \ and privacy considerations\n   not already covered in [2].  See [2] for a discussion\
    \ of privacy\n   risks connected to the sending of Accept- headers.\n"
- title: 6  Acknowledgments
  contents:
  - "6  Acknowledgments\n   Work on HTTP content negotiation has been done since at\
    \ least 1993.\n   The authors are unable to trace the origin of many of the ideas\n\
    \   incorporated in this document.  Many members of the HTTP working\n   group\
    \ have contributed to the negotiation model in this\n   specification.  The authors\
    \ wish to thank the individuals who have\n   commented on earlier versions of\
    \ this document, including Brian\n   Behlendorf, Daniel DuBois, Ted Hardie, Larry\
    \ Masinter, and Roy T.\n   Fielding.\n"
- title: 7  References
  contents:
  - "7  References\n   [1] Fielding, R., Gettys, J., Mogul, J., Frystyk, H., and\n\
    \       T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC\n   \
    \    2068, January 1997.\n   [2] Holtman, K., and A. Mutz, \"Transparent Content\
    \ Negotiation in\n       HTTP\", RFC 2295, March 1998.\n"
- title: 8  Authors' Addresses
  contents:
  - "8  Authors' Addresses\n   Koen Holtman\n   Technische Universiteit Eindhoven\n\
    \   Postbus 513\n   Kamer HG 6.57\n   5600 MB Eindhoven (The Netherlands)\n  \
    \ EMail: koen@win.tue.nl\n   Andrew H. Mutz\n   Hewlett-Packard Company\n   1501\
    \ Page Mill Road 3U-3\n   Palo Alto CA 94304, USA\n   Fax:   +1 415 857 4691\n\
    \   EMail: mutz@hpl.hp.com\n"
- title: 9  Full Copyright Statement
  contents:
  - "9  Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
