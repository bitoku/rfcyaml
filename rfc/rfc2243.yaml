- contents:
  - '                         OTP Extended Responses

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1997).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document provides a specification for a type of response to
    an\n   OTP [RFC 1938] challenge that carries explicit indication of the\n   response's
    encoding. Codings for the two mandatory OTP data formats\n   using this new type
    of response are presented.\n   This document also provides a specification for
    a response that\n   allows an OTP generator to request that a server re-initialize
    a\n   sequence and change parameters such as the secret pass phrase.\n"
  title: Abstract
- contents:
  - "1. Conventions, Terms, and Notation\n   This document specifies the data formats
    and software behaviors\n   needed to use OTP extended responses. The data formats
    are described\n   three ways: using an ad-hoc UNIX manual page style syntax, using\n
    \  augmented BNF described in sections two and three of RFC 822, and by\n   examples.
    Should there be any conflict between these descriptions,\n   the augmented BNF
    takes precedence. The software behaviors are\n   described in words, and specific
    behavior compliance requirements are\n   itemized using the requirements terminology
    (specifically, the words\n   MUST, SHOULD, and MAY) defined in RFC 2119.\n"
  title: 1. Conventions, Terms, and Notation
- contents:
  - "2. Extended Challenges and Extended Responses\n   This document builds on the
    protocol and terminology specified in RFC\n   1938 and assumes that you have already
    read this document and\n   understand its contents.\n   An extended challenge
    is a single line of printable text terminated\n   by either a new line sequence
    appropriate for the context of its use\n   (e.g., ASCII CR followed by ASCII LF)
    or a whitespace character. It\n   contains a standard OTP challenge, a whitespace
    character, and a list\n   that generators use to determine which extended responses
    are\n   supported by a server.\n   An extended response is a single line of printable
    text terminated by\n   a new line sequence appropriate for the context of its
    use. It\n   contains two or more tokens that are separated with a single colon\n
    \  (':') character. The first token contains a type specifier that\n   indicates
    the format of the rest of the response. The tokens that\n   follow are argument
    data for the OTP extended response. At least one\n   token of data MUST be present.\n"
  - contents:
    - "2.1. Syntax\n   In UNIX manual page like syntax, the general form of an extended\n
      \  challenge could be described as:\n      <standard OTP challenge> ext[,<extension
      set id>[, ...]]\n   And the general form of an extended response could be described
      as:\n      <type-specifier>:<arg1>[:<arg2>[:...]]\n   In augmented BNF syntax,
      the syntax of the general form of an\n   extended challenge and an extended
      response is:\n   extended-challenge = otp-challenge 1*LWSP-char capability-list\n
      \                       (NL / *LWSP-char)\n   otp-challenge     = <a standard
      OTP challenge>\n   capability-list   = \"ext\" *(\",\" extension-set-id)\n   extension-set-id
      \ = *<any CHAR except LWSP, CTLs, or \",\">\n   extended-response = type 1*(\":\"
      argument) NL\n   type              = token\n   argument          = token\n   token
      \            = 1*<any CHAR except \":\" and CTLs>\n   NL                = <new
      line sequence appropriate for the context\n                        in which
      OTP is being used>\n   An example of an extended challenge indicating support
      for OTP\n   extended responses and for a mythical response set \"foo\" is:\n
      \     otp-md5 123 mi1234 ext,foo\n   An example of an extended response using
      a mythical type named \"foo\"\n   is:\n      foo:some data:some more data:12345\n"
    title: 2.1. Syntax
  - contents:
    - "2.2. Requirements\n   A server compliant with this specification:\n      1.
      MUST be able to receive and parse the general form of an\n         extended
      response\n      2. MUST be able to receive, parse, and correctly process all\n
      \        extended responses specified in this document\n      3. MUST process
      the type field in a case-insensitive manner\n      4. MUST reject any authentication
      attempt using an extended\n         response if it does not support that type
      of response\n      5. SHOULD provide an appropriate indication to the generator\n
      \        if the response was rejected because of (4)\n      6. MUST limit the
      length of the input reasonably\n      7. MUST accept otherwise arbitrary amounts
      of whitespace\n         wherever a response allows it\n      8. MUST be able
      to receive and correctly process standard OTP\n         responses\n   A generator
      compliant with this specification:\n      1. MUST be able to generate standard
      OTP responses\n      2. MUST use standard responses unless an extended challenge\n
      \        has been received for the particular server AND seed\n      3. MUST
      generate the type field in lower case\n      4. MUST NOT send a response type
      for which the server has not\n         indicated support through an extended
      challenge\n   Extension set identifiers and extension type identifiers named
      with\n   the prefix \"x-\" are reserved for private use among mutually\n   consenting
      implementations. Implementations that do not recognise a\n   particular \"x-\"
      extension MUST ignore that extension. This means that\n   all \"x-\" extensions
      are likely to be non-interoperable with other\n   extensions. Careful consideration
      should be given to the possibility\n   of a server interacting with with a generator
      implementation which,\n   although it recognizes a given \"x-\" extension, uses
      it for a\n   different purpose. All of the remaining extension namespace is\n
      \  reserved to IANA, which will only officially assign the extension\n   into
      this namespace after the IESG approves of such an assignment.\n   During the
      lifetime of the OTP WG, it is recommended that the IESG\n   consult with the
      OTP WG prior to approving such an assignment.\n"
    title: 2.2. Requirements
  title: 2. Extended Challenges and Extended Responses
- contents:
  - "3. The \"hex\" and \"word\" Responses\n   There exists a very rare case in which
    a standard OTP response could\n   be a valid coding in both the hexadecimal and
    six-word formats. An\n   example of this is the response \"ABE ACE ADA ADD BAD
    A.\"  The\n   solution to this problem mandated by the OTP specification is that\n
    \  compliant servers MUST attempt to parse and verify a standard\n   response
    in both hexadecimal and six-word formats and must consider\n   the authentication
    successful if either succeeds.\n   This problem can be solved easily using extended
    responses. The \"hex\"\n   response and the \"word\" response are two response
    types that encode\n   an OTP in an extended response that explicitly describes
    the\n   encoding. These responses start with a type label of \"hex\" for a\n   hexadecimal
    OTP and \"word\" for a six-word coded OTP. These responses\n   contain one argument
    field that contains a standard OTP response\n   coded in the indicated format.\n"
  - contents:
    - "3.1. Syntax\n   In UNIX manual page like syntax, the format of these responses
      could\n   be described as:\n      hex:<hexadecimal number>\n      word:<six
      dictionary words>\n   In augmented BNF syntax and with the definitions already
      provided,\n   the syntax of these responses is:\n      hex-response  = \"hex:\"
      hex-64bit NL\n      hex-64bit     = 16(hex-char *LWSP-char)\n      hex-char
      \     = (\"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\" /\n                       \"a\"
      / \"b\" / \"c\" / \"d\" / \"e\" / \"f\" /\n                       \"0\" / \"1\"
      / \"2\" / \"3\" / \"4\" / \"5\" /\n                       \"6\" / \"7\" / \"8\"
      / \"9\")\n      word-response = \"word:\" word-64bit NL\n      word-64bit    =
      6(otp-word 1*LWSP-char)\n      otp-word      = <any valid word in the standard
      OTP coding\n                      dictionary>\n   Examples of these responses
      are:\n      hex:8720 33d4 6202 9172\n      word:VAST SAUL TAKE SODA SUCH BOLT\n"
    title: 3.1. Syntax
  - contents:
    - "3.2. Requirements\n   A server compliant with this specification:\n      1.
      MUST process all arguments in a case-insensitive manner\n   A generator compliant
      with this specification:\n      1. SHOULD generate otp-word tokens in upper
      case with single\n         spaces separating them\n      2. SHOULD generate
      hexadecimal numbers using only lower case\n         for letters\n"
    title: 3.2. Requirements
  title: 3. The "hex" and "word" Responses
- contents:
  - "4. The \"init-hex\" and \"init-word\" Responses\n   The OTP specification requires
    that implementations provide a means\n   for a client to re-initialize or change
    its OTP information with a\n   server but does not require any specific protocol
    for doing it.\n   Implementations that support the OTP extended responses described
    in\n   this document MUST support the response with the \"init-hex\" and\n   \"init-word\"
    type specifiers, which provide a standard way for a\n   client to re-initialize
    its OTP information with a server. This\n   response is intended to be used only
    by automated clients. Because of\n   this, the recommended form of this response
    uses the hexadecimal\n   encoding for binary data. It is possible for a user to
    type an \"init-\n   hex\" or \"init-word\" response.\n"
  - contents:
    - "4.1. Syntax\n   In UNIX manual page like syntax, the format of these responses
      could\n   be described as:\n      init-hex:<current-OTP>:<new-params>:<new-OTP>\n
      \     init-word:<current-OTP>:<new-params>:<new-OTP>\n   In augmented BNF syntax
      and with the definitions already provided,\n   the syntax of the \"init-hex\"
      response is:\n   init-hex-response = \"init-hex:\" current-OTP \":\" new-params
      \":\"\n                        new-OTP NL\n   current-OTP     = hex-64bit\n
      \  new-OTP         = hex-64bit\n   new-params      = algorithm SPACE sequence-number
      SPACE seed\n   algorithm       = \"md4\" / \"md5\" / \"sha1\"\n   sequence-number
      = 4*3DIGIT\n   seed            = 16*1(ALPHA / DIGIT)\n   In augmented BNF syntax
      and with the definitions already provided,\n   the syntax of the \"init-word\"
      response is:\n   init-word-response = \"init-word:\" current-OTP \":\" new-params
      \":\"\n                        new-OTP NL\n   current-OTP     = word-64bit\n
      \  new-OTP         = word-64bit\n   new-params      = algorithm SPACE sequence-number
      SPACE seed\n   algorithm       = \"md4\" / \"md5\" / \"sha1\"\n   sequence-number
      = 4*3DIGIT\n   seed            = 16*1(ALPHA / DIGIT)\n   Note that all appropriate
      fields for the \"init-hex\" response MUST be\n   hexadecimally coded and that
      all appropriate fields for the \"init-\n   word\" response MUST be six-word
      coded.\n   Examples of these responses are:\n   init-hex:f6bd 6b33 89b8 7203:md5
      499 ke6118:23d1 b253 5ae0 2b7e\n   init-hex:c9b2 12bb 6425 5a0f:md5 499 ke0986:fd17
      cef1 b4df 093e\n   init-word:MOOD SOFT POP COMB BOLO LIFE:md5 499 ke1235:\n
      \  ARTY WEAR TAD RUG HALO GIVE\n   init-word:END KERN BALM NICK EROS WAVY:md5
      499 ke1235:\n   BABY FAIN OILY NIL TIDY DADE\n   (Note that all of these responses
      are one line. Due to their length,\n   they had to be split into multiple lines
      in order to be included\n   here. These responses MUST NOT span more than one
      line in actual use)\n"
    title: 4.1. Syntax
  - contents:
    - "4.2. Description of Fields\n   The current-OTP field contains the (RFC 1938)
      response to the OTP\n   challenge.  The new-params field contains the parameters
      for the\n   client's new requested challenge and the new-OTP field contains
      a\n   response to that challenge. If the re-initialization is successful, a\n
      \  server MUST store the new OTP in its database as the last successful\n   OTP
      received and the sequence number in the next challenge presented\n   by the
      server MUST be one less than the sequence number specified in\n   the new-params
      field.\n   The new-params field is hashed as a string the same way that a seed\n
      \  or secret pass phrase would be. All other field values are hashed in\n   their
      uncoded binary forms, in network byte order and without any\n   padding.\n"
    title: 4.2. Description of Fields
  - contents:
    - "4.3. Requirements\n   A server compliant with this specification:\n      1.
      SHOULD NOT allow a user to use the same value for their\n         seed and secret
      pass phrase.\n      2. MUST disable all OTP access to any principal whose\n
      \        sequence number would be less than one\n      3. MUST decrement the
      sequence number if a reinitialization\n         response includes a valid current-OTP,
      but the server is\n         unable to successfully process the new-params or
      new-OTP for\n         any reason.\n   A generator compliant with this specification:\n
      \     1. SHOULD NOT allow a user to use the same value for their\n         seed
      and secret pass phrase\n      2. MUST take specific steps to prevent infinite
      loops of\n         re-initialization attempts in case of failure\n      3. SHOULD
      provide the user with some indication that the\n         re-initialization is
      taking place\n      4. SHOULD NOT do a re-initialization without the user's\n
      \        permission, either for that specific instance or as a\n         configuration
      option\n      5. SHOULD NOT retry a failed re-initialization without a user's\n
      \        permission\n      6. SHOULD warn the user if the sequence number falls
      below ten\n      7. MUST refuse to generate OTPs with a sequence number below
      one\n"
    title: 4.3. Requirements
  title: 4. The "init-hex" and "init-word" Responses
- contents:
  - "5. Security Considerations\n   All of the security considerations for the OTP
    system also apply to\n   the OTP system with extended responses.\n   These extended
    responses, like OTP itself, do not protect the user\n   against active attacks.
    The IPsec Authentication Header (RFC-1826)\n   (or another technique with at least
    as much strength as IPsec AH)\n   SHOULD be used to protect against such attacks.\n
    \  The consequences of a successful active attack on the re-\n   initialization
    response may be more severe than simply hijacking a\n   single session. An attacker
    could substitute his own response for\n   that of a legitimate user. The attacker
    may then be able to use the\n   OTP system to authenticate himself as the user
    at will (at least\n   until detected).\n   Failure to implement server requirement
    3 in section 4.3 opens an\n   implementation to an attack based on replay of the
    current-OTP part\n   of the response.\n"
  title: 5. Security Considerations
- contents:
  - "6. Acknowledgments\n   Like RFC 1938, the protocol described in this document
    was created by\n   contributors in the IETF OTP working group. Specific contributions\n
    \  were made by Neil Haller, who provided input on the overall design\n   requirements
    of a re-initialization protocol, Denis Pinkas, who\n   suggested several modifications
    to the originally proposed re-\n   initialization protocol, and Phil Servita,
    who opened the debate with\n   the first real protocol proposal and provided lots
    of specific input\n   on the design of this and earlier protocols. The extensions
    to the\n   OTP challenge were suggested by Chris Newman and John Valdes.\n   Randall
    Atkinson and Ted T'so also contributed their views to\n   discussions about details
    of the protocol extensions in this\n   document.\n"
  - "References\n   [RFC 822]   Crocker, D., \"Standard for the Format of ARPA Internet\n
    \              Text Messages,\" RFC 822, August 1982.\n   [RFC 1825]  Atkinson,
    R., \"Security Architecture for the Internet\n               Protocol,\" RFC 1825,
    August 1995.\n   [RFC 1938]  Haller, N. and C. Metz, \"A One-Time Password System,\"\n
    \              RFC 1938, May 1996.\n   [RFC 2119]  Bradner, S., \"Key words for
    use in RFCs to\n               Indicate Requirement Level,\" RFC 2119,\n               March
    1997.\n"
  - "Author's Address\n   Craig Metz\n   The Inner Net\n   Box 10314-1936\n   Blacksburg,
    VA 24062-0314\n   (DSN) 354-8590\n   cmetz@inner.net\n"
  title: 6. Acknowledgments
- contents:
  - "Appendix: Reference Responses\n   The following responses were generated by a
    development version of\n   the One-Time Passwords in Everything (OPIE) implementation
    of this\n   specification.\n   All of these are responses to the challenge:\n
    \       otp-md5 499 ke1234 ext\n   Note that the re-initialization responses use
    the same secret pass\n   phrase for new and current and a new seed of \"ke1235\".
    Also, these\n   responses have been split for formatting purposes into multiple\n
    \  lines; they MUST NOT be multiple lines in actual use.\n   The secret pass phrase
    for these responses is:\n        This is a test.\n   The OTP standard hexadecimal
    response is:\n        5bf0 75d9 959d 036f\n   The OTP standard six-word response
    is:\n        BOND FOGY DRAB NE RISE MART\n   The OTP extended \"hex\" response
    is:\n        hex:5Bf0 75d9 959d 036f\n   The OTP extended \"word\" response is:\n
    \       word:BOND FOGY DRAB NE RISE MART\n   The OTP extended \"init-hex\" response
    is:\n        init-hex:5bf0 75d9 959d 036f:md5 499 ke1235:3712 dcb4 aa53 16c1\n
    \  The OTP extended \"init-word\" response is:\n        init-word:BOND FOGY DRAB
    NE RISE MART:md5 499 ke1235:  RED HERD\n        NOW BEAN PA BURG\n"
  title: 'Appendix: Reference Responses'
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1997).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
