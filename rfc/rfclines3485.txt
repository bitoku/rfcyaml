Abstract The Session Initiation Protocol (SIP) is a text based protocol for initiating and managing communication sessions.
The protocol can be compressed by using Signaling Compression (SigComp).
Similarly, the Session Description Protocol (SDP) is a text based protocol intended for describing multimedia sessions for the purposes of session announcement, session invitation, and other forms of multimedia session initiation.
This memo defines the SIP/SDP specific static dictionary that SigComp may use in order to achieve higher efficiency.
The dictionary is compression algorithm independent.
Introduction SIP [3] and SDP [24] are text based protocols that use the UTF 8 charset (RFC 2279 [5]).
SIP and SDP were designed for rich bandwidth links.
However, when SIP/SDP is run over narrow bandwidth links, such as radio interfaces or low speed serial links, the session setup time increases substantially, compared to an operation over a rich bandwidth link.
The session setup time can decrease dramatically if the SIP/SDP signaling is compressed.
The signaling compression mechanisms specified in SigComp [1] provide a multiple compression/decompression algorithm framework to compress and decompress text based protocols such as SIP and SDP.
When compression is used in SIP/SDP, the compression achieves its maximum rate once a few message exchanges have taken place.
This is due to the fact that the first message the compressor sends to the decompressor is only partially compressed, as there is not a previous stored state to compress against.
As the goal is to reduce the session setup time as much as possible, it seems sensible to investigate a mechanism to boost the compression rate from the first message.
In this memo we introduce the static dictionary for SIP and SDP.
The dictionary is to be used in conjunction with SIP, SDP and SigComp.
The static SIP/SDP dictionary constitutes a SigComp state that can be referenced in the first SIP message that the compressor sends out.
The static SIP/SDP dictionary is a collection of well known strings that appear in most of the SIP and SDP messages.
The dictionary is not a comprehensive list of reserved words, but it includes many of the strings that appear in SIP and SDP signaling.
The static dictionary is unique and MUST be available in all SigComp implementations for SIP/SDP.
The dictionary is not intended to evolve as SIP or SDP evolve.
It is defined once, and stays as is forever.
This solves the problems of updating, upgrading and finding out the dictionary that is supported at the remote end when several versions of the same dictionary coexist.
Appendix A contains the collection of strings that SIP contributed to the static dictionary.
The appendix includes references to the documents that define those strings.
Appendix B contains the collection of strings that SDP contributed to the static dictionary.
Again, the appendix includes references to the documents that define those strings.
While these appendices are of an informative nature, Section 3 gives the normative binary form of the SIP/SDP dictionary.
This is the dictionary that is included in the SigComp implementation.
This dictionary has been formed from the collection of individual dictionaries given in appendices A and B.
The two input collections are collections of UTF 8 encoded character strings.
In order to facilitate the readability, the appendices describe them in one table for each collection.
In these tables, each row represents an entry.
Each entry contains the string that actually occurs in the dictionary, its priority (see below), its offset from the first octet and its length (both in hexadecimal), and one or more references that elucidate why this string is expected to occur in SIP/SDP messages.
Note: Length in this document always refers to octets.
The columns in the tables are described as follows:
String: represents the UTF 8 string that is inserted into the dictionary.
Note also that the notation [CRLF] represents a Carriage Return character (ASCII code 0x0D) followed by a Line Feed character (ASCII code 0x0A).
Pr: indicates the priority of this string within the dictionary.
Some compression algorithms, such as DEFLATE, offer an increased efficiency when the most commonly used strings are located at the bottom of the dictionary.
To facilitate generating a dictionary that has the most frequently occurring strings further down at the bottom, we have decided to allocate a priority to each string in the dictionary.
Priorities range from 1 until 5.
A low number in the priority column (e.g., 1) indicates that we believe in a high probability of finding the string in SIP or SDP messages.
A high number in the priority column (e.g., 5) indicates lower probability of finding the string in a SIP or SDP message.
This is typically the case for less frequent error codes or optional infrequent tags.
Off: indicates the hexadecimal offset of the entry with respect to the first octet in the dictionary.
Note that several strings in the collections can share space in the dictionary if they exhibit suitable common substrings.
Len: the length of the string (in octets, in hexadecimal).
References: contains one or more references to the specification and the section within the specification where the string is defined.
Note that the strings stored in the dictionary are case sensitive.
the best increase in compression performance is to be expected for messages that use the recommended formatting guidelines for SIP.
Some strings appear followed by an equal sign and some others do not.
This depends on whether the string is part of a parameter name or a parameter value.
In a SIP message, all the SIP headers terminate with a CRLF pair of characters.
As these characters are appended to the end of each SIP header line, right after the header values, and because the header values are typically not part of the static SIP dictionary, we cannot include the terminating CRLF as part of the SIP static dictionary.
Instead, the approach we have taken is to include in each header field entry the CRLF from the previous line that prefixes every header field.
We have represented CRLF by the notation [CRLF].
Therefore, in generating the actual binary dictionary, an entry in the dictionary represented as: "
[CRLF]From: " has been interpreted as an entry whose value is CR, LF, the word From, a colon and a whitespace.
Note that most SIP header field names are included with the full string from CRLF to the colon blank pair.
However, in certain situations, when the likelihood of occurrence is not considered high (as indicated by a priority value of 3 to 5), and when there are common substrings shared by a number of headers, we have added one entry with the common substring and several entries with the non  common substrings remaining.
An example is the "Proxy Authenticate" and "Proxy Authorization" headers.
There are three entries in the dictionary: the common substring "[CRLF]Proxy ", and the non common substrings
"Authenticate: " and "Authorization: ".
This allows the re use of the non common substrings by other entries and may save a number of bytes in the binary form of the dictionary.
Note that this splitting mechanism does not apply with strings that are likely to occur very often (those whose priority is set to 1 or 2).
SIP responses start with a status code (e.g., "302") and a reason phrase (e.g., "Moved Temporarily").
The status code is a normative part, whereas the reason phrase is not normative, it is just a suggested text.
For instance, both "302 Moved Temporarily" and "302 Redirect" are valid beginnings of SIP responses.
In the SIP dictionary we have included two entries per response code, one including only the status code and a space (e.g.
, "302 ") and another one including both the status code and the suggested reason phrase (e.g., "302 Moved Temporarily").
The former can be used when the SIP response changed the suggested reason phrase to another one.
The latter can be used when the suggested reason phrase is part of the response.
In this way, we accommodate both alternatives.
(Note that in the actual dictionary, both strings occupy the same space in the string subset, but have two separate entries in the table subset.)
Binary representation of the SIP/SDP dictionary
This section contains the result of combining the SIP and the SDP dictionaries described in appendices A and B in order to create a single dictionary that is loaded into SigComp as a state.
The binary SigComp dictionary is comprised of two parts, the concatenation of which serves as the state value of the state item: A string subset, which contains all strings in the contributing collections as a substring (roughly ordered such that strings with low priority numbers occur at the end), and a table subset, which contains pairs of length and offset values for all the strings in the contributing collections.
In each of these pairs, the length is stored as a one byte value, and the offset is stored as a two byte value that has had 1024 added to the offset (this allows direct referencing from the stored value if the dictionary state has been loaded at address 1024).
The intention is that all compression algorithms will be able to use the (or part of the) string subset, and some compression methods, notably those that are related to the LZ78 family, will also use the table in order to form an initial set of tokens for that compression method.
The text below therefore gives examples for referencing both the table subset and the string subset of the dictionary state item.
As defined in section 3.3.3 in the Signaling Compression specification [1], a SigComp state is characterized by a certain set of information.
For the static SIP/SDP dictionary, the information in the following Table 1 fully characterizes the state item.
Note that the string subset of the dictionary can be accessed using:
STATE ACCESS (%ps, 6, 0,
the table subset can be accessed using: STATE ACCESS (%ps, 6, 0x0D8C, 0x0558, %sa, 0), where %ps points to UDVM memory containing 0xfbe507dfe5e6 and %sa is the desired destination address in UDVM memory (with UDVM byte copying rules applied).
If only a subset of the dictionary up to a specific priority is desired (e.g., to save UDVM space), the values for the third and forth operand in these STATE ACCESS instructions can be changed to:
The state item consists of the following elements:
5472 616e 7361 6374 696f
204e 6f74 2045 7869 7374
Not Existale 50 0150  3020 5365 7276 6572 2049 6e74 6572
6564 2055 5249 2053 6368
6434 3233 2049 6e74 6572 7661
6765 6e74  rbiddenon urgent 0220
rror Identity420 0240  2042 6164 2045 7874 656e 7369 6f6e 6f72
6573 6f75 7263 650d 0a61
504 S 0280  6572 7665 7220 5469 6d65 2d6f 7574
666f 3a20 4465 6320 3338
Extension Requir 02F0  6564 3430 3520
4d65 7468 6f64 204e 6f74
6564 3438 3720 5265 7175
m application 0340  4175 6720 3531 3320
4d6f 7665 6420 5465 6d70
Retry  03B0  4166 7465 723a 2047
6361 7065 3430 3020 4261 6420 5265
7472 7565 3439 3120 5265 7175
626c 650d 0a4d 494d 452d
6361 6c65  ighbor criticale 04C0
6234 3839 2042 6164 2045
7465 643a 204a 616e 2035 3032 2042
6572 6174 6564  a type:
7970 653a 6d65 6574 696e
2d42 793a 200d 0a49 6e2d 5265 706c 792d
6d65  Agent: ..a frame 05D0  7261 7465
6d65 3a3b 7265 7472 792d 6166  xptime:;retry
6365 733a 2052 4546 4552
7764 733a  port ..a keywds:
m data mode se 0710
d ..a mid:;maddr 0760  3d6f 7061
652c 2057 6564  lg Mon, Tue,
3b74 746c  , Fri, Sat, ;ttl 0790  3d61 7574 733d
6173 3431 3420 5265 7175
7977 6865 7265 7175 6972 6564 3438 3020
6169 6c61 626c 650d 0a61 3d74
7970 653a  ailable..a type: 0820
482e 3333 3230 3220 4163
6e2d 5374 6174 653a 204e
2d52 6f75 7465 3a20 5365
: Feb ..a inacti 0890  7665 5254 502f 5341 5650 2052 5450
0a61 3d74 7970 653a 7465
0a61 3d72 6563  :MESSAGE ..
790d 0a63 3d49 4e20 4950
;user ..b AS CT 0920
6174 696f  align applicatio 0960
6465 7273 7061  n/sdpatheaderspa 0970
7469 636f 6e63 3d34 3833 2054
6f6f  inticonc 483 Too 09A0
7369 6f6e 2049 6e74 6572 7661
all Is Being For 0A50
6765 3265 3138 3320 5365 7373
0a53 6572 7665 723a 2052
6e67 763d 300d 0a6f 3d55
2f41 5650 200d 0a50 7269
6f6e 663a 3b65  false..a conf:;e 0C40
2f54 4350 2034 3038 2052 6571
7465 6e74 2d4c 656e 6774
Apr SCTPRACK IN 0D50  5649 5445
Contact: 200 O 0D70  4b0d 0a46 726f
6d3a 200d 0a43 5365 713a
0db4 050e 3606 0ed6 030d
2b08 107a 100f 4907 0fb8
10af 070d 3409 0f27 0410
1d16 0c43 090c 9209  ..
f405 1030 0407 1e08 071e 050b 9110
6d05 10f2 050c 5805 06a9
10B0  1705 b40d 08c7 1307
10E0  1507 5904 0ba6 040b
0cb1 0e0c 1711 094a 0c0a
1122 040f 1c04 07e6 040e
0b04 0930 0408 e905 05ee 0406
F... Table 1: binary representation of the static SIP/SDP dictionary for SigComp 4.
The security considerations of [1] apply.
This memo does not introduce any known additional security risk.
Appendix A. SIP input strings to the SIP/SDP static dictionary
For reference, this section lists the SIP input strings that were used in generating the dictionary, as well as a priority value, the offset of the string in the generated dictionary, the length of the string, and one or more references into the referenced documents that motivate the presence of this string.
Note that the notation "[CRLF]" stands for a sequence of two bytes with the values 0x0d and 0x0a, respectively.
The priority value is used for determining the position of the string in the dictionary.
Lower priority values (higher priorities) cause the string to occur at a later position in the dictionary, making it more efficient to reference the string in certain compression algorithms.
Hence, lower priority values were assigned to strings more likely to occur.
4 0597 000A [3] 20.2, [3
2 0BCD 000D [3] 20.37 "
1 0CF7 0013 [3] 20.42 "
4 0C30 0005 [6] 3.2.1 "algorithm "
[3] 20.11, [12] 4, [3] 20.11
4 05A1 000A [3] 21.1.4
5 0D6B 0004 [3] 21.2.1
[3] 21.3.4 "305 Use Proxy"
[3] 21.3.5 "380 Alternative Service"
5 0B5D 0004 [3] 21.4.2 "401 Unauthorized"
4 00AA 0021 [3] 21.4.8
0013 [3] 21.4.9 "410 "
[3] 21.4.11 "413 Request Entity Too Large"
[3] 21.4.19 "481 Call/Transaction Does Not Exist"  4 0127 0023
[3] 21.4.26 "488 Not Acceptable Here"
[3] 21.5.3 "502 Bad Gateway"
5 02C5 0004 [3] 21.5.4 "503
[3] 21.5.7 "513 Message Too Large"
Table A.1: SIP input strings for the SIP/SDP dictionary Appendix B. SDP input strings to the SIP/SDP static dictionary
For reference, this section lists the SDP input strings that were used in generating the dictionary, as well as a priority value, the offset of the string in the generated dictionary, the length of the string, and one or more references into the referenced documents that motivate the presence of this string.
Note that the notation "[CRLF]" stands for a sequence of two bytes with the values 0x0d and 0x0a, respectively.
The priority value is used for determining the position of the string in the dictionary.
Lower priority values (higher priorities) cause the string to occur at a later position in the dictionary, making it more efficient to reference the string in certain compression algorithms.
Hence, lower priority values were assigned to strings more likely to occur.
4 0257 000D [28] 2.1
0004 [24] 6 "AS "
4 00F8 0006 [27] 6.1 "rate"
[31] 4 Table B.1: SDP input strings for the SIP/SDP dictionary
