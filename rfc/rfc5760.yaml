- contents:
  - "               RTP Control Protocol (RTCP) Extensions for\n         Single-Source
    Multicast Sessions with Unicast Feedback\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies an extension to the Real-time Transport\n
    \  Control Protocol (RTCP) to use unicast feedback to a multicast\n   sender.
    \ The proposed extension is useful for single-source multicast\n   sessions such
    as Source-Specific Multicast (SSM) communication where\n   the traditional model
    of many-to-many group communication is either\n   not available or not desired.
    \ In addition, it can be applied to any\n   group that might benefit from a sender-controlled
    summarized\n   reporting mechanism.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5760.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Conventions and Acronyms ........................................4\n   3.
    Definitions .....................................................5\n   4. Basic
    Operation .................................................6\n   5. Packet Types
    ...................................................10\n   6. Simple Feedback Model
    ..........................................11\n   7. Distribution Source Feedback
    Summary Model .....................13\n   8. Mixer/Translator Issues ........................................36\n
    \  9. Transmission Interval Calculation ..............................37\n   10.
    SDP Extensions ................................................39\n   11. Security
    Considerations .......................................41\n   12. Backwards Compatibility
    .......................................51\n   13. IANA Considerations ...........................................51\n
    \  14. References ....................................................53\n   Appendix
    A. Examples for Sender-Side Configurations ...............57\n   Appendix B. Distribution
    Report Processing at the Receiver ........60\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Real-time Transport Protocol (RTP) [1] provides a real-time\n
    \  transport mechanism suitable for unicast or multicast communication\n   between
    multimedia applications.  Typical uses of RTP are for real-\n   time or near real-time
    group communication of audio and video data\n   streams.  An important component
    of the RTP protocol is the control\n   channel, defined as the RTP Control Protocol
    (RTCP).  RTCP involves\n   the periodic transmission of control packets between
    group members,\n   enabling group size estimation and the distribution and calculation\n
    \  of session-specific information such as packet loss and round-trip\n   time
    to other hosts.  An additional advantage of providing a control\n   channel for
    a session is that a third-party session monitor can\n   listen to the traffic
    to establish network conditions and to diagnose\n   faults based on receiver locations.\n
    \  RTP was designed to operate in either a unicast or multicast mode.\n   In multicast
    mode, it assumes an Any Source Multicast (ASM) group\n   model, where both one-to-many
    and many-to-many communication are\n   supported via a common group address in
    the range 224.0.0.0 through\n   239.255.255.255.  To enable Internet-wide multicast
    communication,\n   intra-domain routing protocols (those that operate only within
    a\n   single administrative domain, e.g., the Distance Vector Multicast\n   Routing
    Protocol (DVMRP) [16] and Protocol Independent Multicast\n   (PIM) [17][18]) are
    used in combination with inter-domain routing\n   protocols (those that operate
    across administrative domain borders,\n   e.g., Multicast BGP (MBGP) [19] and
    the Multicast Source Discovery\n   Protocol (MSDP) [20]).  Such routing protocols
    enable a host to join\n   a single multicast group address and send data to or
    receive data\n   from all members in the group with no prior knowledge of the\n
    \  membership.  However, there is a great deal of complexity involved at\n   the
    routing level to support such a multicast service in the network.\n   Many-to-many
    communication is not always available or desired by all\n   group applications.
    \ For example, with Source-Specific Multicast\n   (SSM) [8][9] and satellite communication,
    the multicast distribution\n   channel only supports source-to-receiver traffic.
    \ In other cases,\n   such as large ASM groups with a single active data source
    and many\n   passive receivers, it is sub-optimal to create a full routing-level\n
    \  mesh of multicast sources just for the distribution of RTCP control\n   packets.
    \ Thus, an alternative solution is preferable.\n   Although a one-to-many multicast
    topology may simplify routing and\n   may be a closer approximation to the requirements
    of certain RTP\n   applications, unidirectional communication makes it impossible
    for\n   receivers in the group to share RTCP feedback information with other\n
    \  group members.  In this document, we specify a solution to that\n   problem.
    \ We introduce unicast feedback as a new method to distribute\n   RTCP control
    information amongst all session members.  This method is\n   designed to operate
    under any group communication model, ASM or SSM.\n   The RTP data stream protocol
    itself is unaltered.\n   Scenarios under which the unicast feedback method can
    provide benefit\n   include but are not limited to:\n   a) SSM groups with a single
    sender.\n      The proposed extensions allow SSM groups that do not have many-to-\n
    \     many communication capability to receive RTP data streams and to\n      continue
    to participate in the RTP control protocol (RTCP) by\n      using multicast in
    the source-to-receiver direction and unicast to\n      send receiver feedback
    to the source on the standard RTCP port.\n   b) One-to-many broadcast networks.\n
    \     Unicast feedback may also be beneficial to one-to-many broadcast\n      networks,
    such as a satellite network with a terrestrial low-\n      bandwidth return channel
    or a broadband cable link.  Unlike the\n      SSM network, these networks may
    have the ability for a receiver to\n      multicast return data to the group.
    \ However, a unicast feedback\n      mechanism may be preferable for routing simplicity.\n
    \  c) ASM with a single sender.\n      A unicast feedback approach can be used
    by an ASM application with\n      a single sender to reduce the load on the multicast
    routing\n      infrastructure that does not scale as efficiently as unicast\n
    \     routing does.  Because this is no more efficient than a standard\n      multicast
    group RTP communication scenario, it is not expected to\n      replace the traditional
    mechanism.\n   The modifications proposed in this document are intended to\n   supplement
    the existing RTCP feedback mechanisms described in Section\n   6 of [1].\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions and Acronyms\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
    2119 [13].\n   The following acronyms are used throughout this document:\n      ASM
    \ Any Source Multicast\n      SSM  Source-Specific Multicast\n"
  title: 2.  Conventions and Acronyms
- contents:
  - "3.  Definitions\n   Distribution Source:\n      In an SSM context, only one entity
    distributes RTP data and\n      redistributes RTCP information to all receivers.
    \ This entity is\n      called the Distribution Source.  It is also responsible
    for\n      forwarding RTCP feedback to the Media Senders and thus creates a\n
    \     virtual multicast environment in which RTP and RTCP can be\n      applied.\n
    \     Note that heterogeneous networks consisting of ASM multiple-sender\n      groups,
    unicast-only clients, and/or SSM single-sender receiver\n      groups MAY be connected
    via translators or mixers to create a\n      single-source group (see Section
    8 for details).\n   Media Sender:\n      A Media Sender is an entity that originates
    RTP packets for a\n      particular media session.  In RFC 3550, a Media Sender
    is simply\n      called a source.  However, as the RTCP SSM system architecture\n
    \     includes a Distribution Source, to avoid confusion, in this\n      document
    a media source is commonly referred to as a Media Sender.\n      There may often
    be a single Media Sender that is co-located with\n      the Distribution Source.
    \ But although there MUST be only one\n      Distribution Source, there MAY be
    multiple Media Senders on whose\n      behalf the Distribution Source forwards
    RTP and RTCP packets.\n   RTP and RTCP Channels:\n      The data distributed from
    the source to the receivers is referred\n      to as the RTP channel and the control
    information as the RTCP\n      channel.  With standard RTP/RTCP, these channels
    typically share\n      the same multicast address but are differentiated via port
    numbers\n      as specified in [1].  In an SSM context, the RTP channel is\n      multicast
    from the Distribution Source to the receivers.  In\n      contrast, the RTCP or
    feedback channel is actually the collection\n      of unicast channels between
    the receivers and the Distribution\n      Source via the Feedback Target(s).  Thus,
    bidirectional\n      communication is accomplished by using SSM in the direction
    from\n      Distribution Source to the receivers and using the unicast\n      feedback
    channel in the direction from receivers to Distribution\n      Source.  As discussed
    in the next section, the nature of the\n      channels between the Distribution
    Source and the Media Sender(s)\n      may vary.\n   (Unicast RTCP) Feedback Target:\n
    \     The Feedback Target is a logical function to which RTCP unicast\n      feedback
    traffic is addressed.  The functions of the Feedback\n      Target and the Distribution
    Source MAY be co-located or integrated\n      in the same entity.  In this case,
    for a session defined as having\n      a Distribution Source A, on ports n for
    the RTP channel and k for\n      the RTCP channel, the unicast RTCP Feedback Target
    is identified\n      by an IP address of Distribution Source A on port k, unless\n
    \     otherwise stated in the session description.  See Section 10 for\n      details
    on how the address is specified.  The Feedback Target MAY\n      also be implemented
    in one or more entities different from the\n      Distribution Source, and different
    RTP receivers MAY use different\n      Feedback Target instances, e.g., for aggregation
    purposes.  In\n      this case, the Feedback Target instance(s) MUST convey the\n
    \     feedback received from the RTP receivers to the Distribution\n      Source
    using the RTCP mechanisms specified in this document.  If\n      disjoint, the
    Feedback Target instances MAY be organized in\n      arbitrary topological structures:
    in parallel, hierarchical, or\n      chained.  But the Feedback Target instance(s)
    and Distribution\n      Source MUST share, e.g., through configuration, enough
    information\n      to be able to provide coherent RTCP information to the RTP\n
    \     receivers based upon the RTCP feedback collected by the Feedback\n      Target
    instance(s) -- as would be done if both functions were part\n      of the same
    entity.\n      In order for unicast feedback to work, each receiver MUST direct\n
    \     its RTCP reports to a single specific Feedback Target instance.\n   SSRC:\n
    \     Synchronization source as defined in [1].  This 32-bit value\n      uniquely
    identifies each member in a session.\n   Report blocks:\n      Report block is
    the standard terminology for an RTCP reception\n      report.  RTCP [1] encourages
    the stacking of multiple report\n      blocks in Sender Report (SR) and Receiver
    Report (RR) packets.  As\n      a result, a variable-size feedback packet may
    be created by one\n      source that reports on multiple other sources in the
    group.  The\n      summarized reporting scheme builds upon this model through
    the\n      inclusion of multiple summary report blocks in one packet.\n      However,
    stacking of reports from multiple receivers is not\n      permitted in the Simple
    Feedback Model (see Section 6).\n"
  title: 3.  Definitions
- contents:
  - "4.  Basic Operation\n   As indicated by the definitions of the preceding section,
    one or more\n   Media Senders send RTP packets to the Distribution Source.  The\n
    \  Distribution Source relays the RTP packets to the receivers using a\n   source-specific
    multicast arrangement.  In the reverse direction, the\n   receivers transmit RTCP
    packets via unicast to one or more instances\n   of the Feedback Target.  The
    Feedback Target sends either the\n   original RTCP reports (the Simple Feedback
    Model) or summaries of\n   these reports (the Summary Feedback Model) to the Distribution\n
    \  Source.  The Distribution Source in turn relays the RTCP reports\n   and/or
    summaries to the Media Senders.  The Distribution Source also\n   transmits the
    RTCP Sender Reports and Receiver Reports or summaries\n   back to the receivers,
    using source-specific multicast.\n   When the Feedback Target(s) are co-located
    (or integrated) with the\n   Distribution Source, redistribution of original or
    summarized RTCP\n   reports is trivial.  When the Feedback Target(s) are physically\n
    \  and/or topologically distinct from the Distribution Source, each\n   Feedback
    Target either relays the RTCP packets to the Distribution\n   Source or summarizes
    the reports and forwards an RTCP summary report\n   to the Distribution Source.
    \ Coordination between multiple Feedback\n   Targets is beyond the scope of this
    specification.\n   The Distribution Source MUST be able to communicate with all
    group\n   members in order for either mechanism to work.  The general\n   architecture
    is displayed below in Figure 1.  There may be a single\n   Media Sender or multiple
    Media Senders (Media Sender i, 1<=i<=M) on\n   whose behalf the Distribution Source
    disseminates RTP and RTCP\n   packets.  The base case, which is expected to be
    the most common\n   case, is that the Distribution Source is co-located with a
    particular\n   Media Sender.  A basic assumption is that communication is multicast\n
    \  (either SSM or ASM) in the direction of the Distribution Source to\n   the
    receivers (R(j), 1<=j<=N) and unicast in the direction of the\n   receivers to
    the Distribution Source.\n   Communication between Media Sender(s) and the Distribution
    Source may\n   be performed in numerous ways:\n   i.   Unicast only: The Media
    Sender(s) MAY send RTP and RTCP via\n        unicast to the Distribution Source
    and receive RTCP via unicast.\n   ii.  Any Source Multicast (ASM): The Media Sender(s)
    and the\n        Distribution Source MAY be in the same ASM group, and RTP and\n
    \       RTCP packets are exchanged via multicast.\n   iii. Source-Specific Multicast
    (SSM): The Media Sender(s) and the\n        Distribution Source MAY be in an SSM
    group with the source being\n        the Distribution Source.  RTP and RTCP packets
    from the Media\n        Senders are sent via unicast to the Distribution Source,
    while\n        RTCP packets from the Distribution Source are sent via multicast\n
    \       to the Media Senders.\n        Note that this SSM group MAY be identical
    to the SSM group used\n        for RTP/RTCP delivery from the Distribution Source
    to the\n        receivers or it MAY be a different one.\n   Note that Figure 1
    below shows a logical diagram and, therefore, no\n   details about the above options
    for the communication between Media\n   Sender(s), Distribution Source, Feedback
    Target(s), and receivers are\n   provided.\n   Configuration information needs
    to be supplied so that (among other\n   reasons):\n   o  Media Sender(s) know
    the transport address of the Distribution\n      Source or the transport address
    of the (ASM or SSM) multicast\n      group used for the contribution link;\n   o
    \ the Distribution Source knows either the unicast transport\n      address(es)
    or the (ASM or SSM) multicast transport address(es) to\n      reach the Media
    Sender(s);\n   o  receivers know the addresses of their respectively responsible\n
    \     Feedback Targets; and\n   o  the Feedback Targets know the transport address
    of the\n      Distribution Source.\n   The precise setup and configuration of
    the Media Senders and their\n   interaction with the Distribution Source is beyond
    the scope of this\n   document (appropriate Session Description Protocol (SDP)
    descriptions\n   MAY be used for this purpose), which only specifies how the various\n
    \  components interact within an RTP session.  Informative examples for\n   different
    configurations of the Media Sources and the Distribution\n   Source are given
    in Appendix A.\n   Future specifications may be defined to address these aspects.\n
    \                                       Source-specific\n         +--------+       +-----+
    \         Multicast\n         |Media   |       |     |     +---------------->
    R(1)\n         |Sender 1|<----->| D S |     |                    |\n         +--------+
    \      | I O |  +--+                    |\n                          | S U |  |
    \ |                    |\n         +--------+       | T R |  |  +----------->
    R(2)   |\n         |Media   |<----->| R C |->+  +---- :         |    |\n         |Sender
    2|       | I E |  |  +------> R(n-1) |    |\n         +--------+       | B   |
    \ |  |          |    |    |\n             :            | U   |  +--+--> R(n)  |
    \   |    |\n             :            | T +-|          |     |    |    |\n                          |
    I | |<---------+     |    |    |\n         +--------+       | O |F|<---------------+
    \   |    |\n         |Media   |       | N |T|<--------------------+    |\n         |Sender
    M|<----->|   | |<-------------------------+\n         +--------+       +-----+
    \           Unicast\n         FT = Feedback Target\n         Transport from the
    Feedback Target to the Distribution\n         Source is via unicast or multicast
    RTCP if they are not\n         co-located.\n                       Figure 1: System
    Architecture\n   The first method proposed to support unicast RTCP feedback, the\n
    \  'Simple Feedback Model', is a basic reflection mechanism whereby all\n   Receiver
    RTCP packets are unicast to the Feedback Target, which\n   relays them unmodified
    to the Distribution Source.  Subsequently,\n   these packets are forwarded by
    the Distribution Source to all\n   receivers on the multicast RTCP channel.  The
    advantage of using this\n   method is that an existing receiver implementation
    requires little\n   modification in order to use it.  Instead of sending reports
    to a\n   multicast address, a receiver uses a unicast address yet still\n   receives
    forwarded RTCP traffic on the multicast control channel.\n   This method also
    has the advantage of being backwards compatible with\n   standard RTP/RTCP implementations.
    \ The Simple Feedback Model is\n   specified in Section 6.\n   The second method,
    the 'Distribution Source Feedback Summary Model',\n   is a summarized reporting
    scheme that provides savings in bandwidth\n   by consolidating Receiver Reports
    at the Distribution Source,\n   optionally with help from the Feedback Target(s),
    into summary\n   packets that are then distributed to all the receivers.  The\n
    \  Distribution Source Feedback Summary Model is specified in Section 7.\n   The
    advantage of the latter scheme is apparent for large group\n   sessions where
    the basic reflection mechanism outlined above\n   generates a large amount of
    packet forwarding when it replicates all\n   the information to all the receivers.
    \ Clearly, this technique\n   requires that all session members understand the
    new summarized\n   packet format outlined in Section 7.1.  Additionally, the summarized\n
    \  scheme provides an optional mechanism to send distribution\n   information
    or histograms about the feedback data reported by the\n   whole group.  Potential
    uses for the compilation of distribution\n   information are addressed in Section
    7.4.\n   To differentiate between the two reporting methods, a new SDP\n   identifier
    is created and discussed in Section 10.  The reporting\n   method MUST be decided
    prior to the start of the session.  A\n   Distribution Source MUST NOT change
    the method during a session.\n   In a session using SSM, the network SHOULD prevent
    any multicast data\n   from the receiver being distributed further than the first
    hop\n   router.  Additionally, any data heard from a non-unicast-capable\n   receiver
    by other hosts on the same subnet SHOULD be filtered out by\n   the host IP stack
    so that it does not cause problems with respect to\n   the calculation of the
    receiver RTCP bandwidth share.\n"
  title: 4.  Basic Operation
- contents:
  - "5.  Packet Types\n   The RTCP packet types defined in [1], [26], and [15] are:\n
    \  Type       Description                  Payload number\n   -------------------------------------------------------\n
    \  SR         Sender Report                200\n   RR         Receiver Report
    \             201\n   SDES       Source Description           202\n   BYE        Goodbye
    \                     203\n   APP        Application-Defined          204\n   RTPFB
    \     Generic RTP feedback         205\n   PSFB       Payload-specific feedback
    \   206\n   XR         RTCP Extension               207\n   This document defines
    one further RTCP packet format:\n   Type       Description                    Payload
    number\n   ---------------------------------------------------------\n   RSI        Receiver
    Summary Information   209\n   Within the Receiver Summary Information packet,
    there are various\n   types of information that may be reported and encapsulated
    in\n   optional sub-report blocks:\n   Name              Long Name                                 Value\n
    \  ------------------------------------------------------------------\n   IPv4
    Address     IPv4 Feedback Target Address                 0\n   IPv6 Address     IPv6
    Feedback Target Address                 1\n   DNS Name         DNS name indicating
    Feedback Target Address  2\n   Reserved         Reserved for Assignment by Standards
    Action  3\n   Loss             Loss distribution                            4\n
    \  Jitter           Jitter distribution                          5\n   RTT              Round-trip
    time distribution                 6\n   Cumulative loss  Cumulative loss distribution
    \                7\n   Collisions       SSRC collision list                          8\n
    \  Reserved         Reserved for Assignment by Standards Action  9\n   Stats            General
    statistics                          10\n   RTCP BW          RTCP bandwidth indication
    \                  11\n   Group Info       RTCP group and average packet size
    \         12\n   -                Unassigned                            13 - 255\n
    \  As with standard RTP/RTCP, the various reports MAY be combined into a\n   single
    RTCP packet, which SHOULD NOT exceed the path MTU.  Packets\n   continue to be
    sent at a rate that is inversely proportional to the\n   group size in order to
    scale the amount of traffic generated.\n"
  title: 5.  Packet Types
- contents:
  - '6.  Simple Feedback Model

    '
  - contents:
    - "6.1.  Packet Formats\n   The Simple Feedback Model uses the same packet types
      as traditional\n   RTCP feedback described in [1].  Receivers still generate
      Receiver\n   Reports with information on the quality of the stream received
      from\n   the Distribution Source.  The Distribution Source still MUST create\n
      \  Sender Reports that include timestamp information for stream\n   synchronization
      and round-trip time calculation.  Both Media Senders\n   and receivers are required
      to send SDES packets as outlined in [1].\n   The rules for generating BYE and
      APP packets as outlined in [1] also\n   apply.\n"
    title: 6.1.  Packet Formats
  - contents:
    - "6.2.  Distribution Source Behavior\n   For the Simple Feedback Model, the Distribution
      Source MUST provide a\n   basic packet-reflection mechanism.  It is the default
      behavior for\n   any Distribution Source and is the minimum requirement for
      acting as\n   a Distribution Source to a group of receivers using unicast RTCP\n
      \  feedback.\n   The Distribution Source (unicast Feedback Target) MUST listen
      for\n   unicast RTCP data sent to the RTCP port.  All valid unicast RTCP\n   packets
      received on this port MUST be forwarded by the Distribution\n   Source to the
      group on the multicast RTCP channel.  The Distribution\n   Source MUST NOT stack
      report blocks received from different receivers\n   into one packet for retransmission
      to the group.  Every RTCP packet\n   from each receiver MUST be reflected individually.\n
      \  If the Media Sender(s) are not part of the SSM group for RTCP packet\n   reflection,
      the Distribution Source MUST also forward the RTCP\n   packets received from
      the receivers to the Media Sender(s).  If there\n   is more than one Media Sender
      and these Media Senders do not\n   communicate via ASM with the Distribution
      Source and each other, the\n   Distribution Source MUST forward each RTCP packet
      originated by one\n   Media Sender to all other Media Senders.\n   The Distribution
      Source MUST forward RTCP packets originating from\n   the Media Sender(s) to
      the receivers.\n   The reflected or forwarded RTCP traffic SHOULD NOT be counted
      as its\n   own traffic in the transmission interval calculation by the\n   Distribution
      Source.  In other words, the Distribution Source SHOULD\n   NOT consider reflected
      packets as part of its own control data\n   bandwidth allowance.  However, reflected
      packets MUST be processed by\n   the Distribution Source and the average RTCP
      packet size, RTCP\n   transmission rate, and RTCP statistics MUST be calculated.
      \ The\n   algorithm for computing the allowance is explained in Section 9.\n"
    title: 6.2.  Distribution Source Behavior
  - contents:
    - "6.3.  Disjoint Distribution Source and Feedback Target(s)\n   If the Feedback
      Target function is disjoint from the Distribution\n   Source, the Feedback Target(s)
      MUST forward all RTCP packets from the\n   receivers or another Feedback Target
      -- directly or indirectly -- to\n   the Distribution Source.\n"
    title: 6.3.  Disjoint Distribution Source and Feedback Target(s)
  - contents:
    - "6.4.  Receiver Behavior\n   Receivers MUST listen on the RTP channel for data
      and on the RTCP\n   channel for control.  Each receiver MUST calculate its share
      of the\n   control bandwidth R/n, in accordance with the profile in use, so
      that\n   a fraction of the RTCP bandwidth, R, allocated to receivers is\n   divided
      equally between the number of unique receiver SSRCs in the\n   session, n.  R
      may be rtcp_bw * 0.75 or rtcp_bw * 0.5 (depending on\n   the ratio of senders
      to receivers as per [1]) or may be set\n   explicitly by means of an SDP attribute
      [10].  See Section 9 for\n   further information on the calculation of the bandwidth
      allowance.\n   When a receiver is eligible to transmit, it MUST send a unicast\n
      \  Receiver Report packet to the Feedback Target following the rules\n   defined
      in Section 9.\n   When a receiver observes either RTP packets or RTCP Sender
      Reports\n   from a Media Sender with an SSRC that collides with its own chosen\n
      \  SSRC, it MUST change its own SSRC following the procedures of [1].\n   The
      receiver MUST do so immediately after noticing and before sending\n   any (further)
      RTCP feedback messages.\n   If a receiver has out-of-band information available
      about the Media\n   Sender SSRC(s) used in the media session, it MUST NOT use
      the same\n   SSRC for itself.  Even if such out-of-band information is available,\n
      \  a receiver MUST obey the above collision-resolution mechanisms.\n   Further
      mechanisms defined in [1] apply for resolving SSRC collisions\n   between receivers.\n"
    title: 6.4.  Receiver Behavior
  - contents:
    - "6.5.  Media Sender Behavior\n   Media Senders listen on a unicast or multicast
      transport address for\n   RTCP reports sent by the receivers (and forwarded
      by the Distribution\n   Source) or other Media Senders (forwarded by the Distribution
      Source\n   if needed).  Processing and general operation follows [1].\n   A
      Media Sender that observes an SSRC collision with another entity\n   that is
      not also a Media Sender MAY delay its own collision-\n   resolution actions
      as per [1], by 5 * 1.5 * Td, with Td being the\n   deterministic calculated
      reporting interval, for receivers to see\n   whether the conflict still exists.
      \ SSRC collisions with other Media\n   Senders MUST be acted upon immediately.\n
      \     Note: This gives precedence to Media Senders and places the burden\n      of
      collision resolution on the RTP receivers.\n   Sender SSRC information MAY be
      communicated out-of-band, e.g., by\n   means of SDP media descriptions.  Therefore,
      senders SHOULD NOT\n   change their own SSRC aggressively or unnecessarily.\n"
    title: 6.5.  Media Sender Behavior
  title: 6.  Simple Feedback Model
- contents:
  - "7.  Distribution Source Feedback Summary Model\n   In the Distribution Source
    Feedback Summary Model, the Distribution\n   Source is required to summarize the
    information received from all the\n   Receiver Reports generated by the receivers
    and place the information\n   into summary reports.  The Distribution Source Feedback
    Summary Model\n   introduces a new report block format, the Receiver Summary\n
    \  Information (RSI) report, and a number of optional sub-report block\n   formats,
    which are enumerated in Section 7.1.  As described in\n   Section 7.3, individual
    instances of the Feedback Target may provide\n   preliminary summarization to
    reduce the processing load at the\n   Distribution Source.\n   Sub-reports appended
    to the RSI report block provide more detailed\n   information on the overall session
    characteristics reported by all\n   receivers and can also convey important information
    such as the\n   feedback address and reporting bandwidth.  Which sub-reports are\n
    \  mandatory and which ones are optional is defined below.\n   From an RTP perspective,
    the Distribution Source is an RTP receiver,\n   generating its own Receiver Reports
    and sending them to the receiver\n   group and to the Media Senders.  In the Distribution
    Source Feedback\n   Summary Model, an RSI report block MUST be appended to all
    RRs the\n   Distribution Source generates.\n   In addition, the Distribution Source
    MUST forward the RTCP SR reports\n   and SDES packets of Media Senders without
    alteration.  If the\n   Distribution Source is actually a Media Sender, even if
    it is the\n   only session sender, it MUST generate its own Sender Report (SR)\n
    \  packets for its role as a Media Sender and its Receiver Reports in\n   its
    role as the Distribution Source.\n   The Distribution Source MUST use its own
    SSRC value for transmitting\n   summarization information and MUST perform proper
    SSRC collision\n   detection and resolution.\n   The Distribution Source MUST
    send at least one Receiver Summary\n   Information packet for each reporting interval.
    \ The Distribution\n   Source MAY additionally stack sub-report blocks after the
    RSI packet.\n   If it does so, each sub-report block MUST correspond to the RSI\n
    \  packet and constitutes an enhancement to the basic summary\n   information
    required by the receivers to calculate their reporting\n   time interval.  For
    this reason, additional sub-report blocks are not\n   required but recommended.
    \ The compound RTCP packets containing the\n   RSI packet and the optional corresponding
    sub-report blocks MUST be\n   formed according to the rules defined in [1] for
    receiver-issued\n   packets, e.g., they MUST begin with an RR packet, contain
    at least an\n   SDES packet with a CNAME, and MAY contain further RTCP packets
    and\n   SDES items.\n   Every RSI packet MUST contain either a Group and Average
    Packet Size\n   sub-report or an RTCP Bandwidth sub-report for bandwidth indications\n
    \  to the receivers.\n"
  - contents:
    - "7.1.  Packet Formats\n   All numeric values comprising multiple (usually two
      or four) octets\n   MUST be encoded in network byte order.\n"
    - contents:
      - "7.1.1.  RSI: Receiver Summary Information Packet\n   The RSI report block
        has a fixed header size followed by a variable\n   length report:\n   0                   1
        \                  2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
        5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |V=2|P|reserved |   PT=RSI=209  |             length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                           SSRC                                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                       Summarized SSRC                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |              NTP Timestamp (most significant word)            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |              NTP Timestamp (least significant word)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  :                       Sub-report blocks                       :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The RSI packet includes the following fields:\n   Length: 16 bits\n      As
        defined in [1], the length of the RTCP packet in 32-bit words\n      minus
        one, including the header and any padding.\n   SSRC: 32 bits\n      The SSRC
        of the Distribution Source.\n   Summarized SSRC: 32 bits\n      The SSRC (of
        the Media Sender) of which this report contains a\n      summary.\n   Timestamp:
        64 bits\n      Indicates the wallclock time when this report was sent.  Wallclock\n
        \     time (absolute date and time) is represented using the timestamp\n      format
        of the Network Time Protocol (NTP), which is in seconds\n      relative to
        0h UTC on 1 January 1900 [1].  The wallclock time MAY\n      (but need not)
        be NTP-synchronized but it MUST provide a\n      consistent behavior in the
        advancement of time (similar to NTP).\n      The full-resolution NTP timestamp
        is used, which is a 64-bit,\n      unsigned, fixed-point number with the integer
        part in the first 32\n      bits and the fractional part in the last 32 bits.
        \ This format is\n      similar to RTCP Sender Reports (Section 6.4.1 of [1]).
        \ The\n      timestamp value is used to enable detection of duplicate packets,\n
        \     reordering, and to provide a chronological profile of the feedback\n
        \     reports.\n"
      title: '7.1.1.  RSI: Receiver Summary Information Packet'
    - contents:
      - "7.1.2.  Sub-Report Block Types\n   For RSI reports, this document also introduces
        a sub-report block\n   format specific to the RSI packet.  The sub-report
        blocks are\n   appended to the RSI packet using the following generic format.
        \ All\n   sub-report blocks MUST be 32-bit aligned.\n    0 1 2 3 4 5 6 7 8
        9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     SRBT      |    Length     |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        \     SRBT-specific data       +\n   |                                                               |\n
        \  :                                                               :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  SRBT: 8 bits\n      Sub-Report Block Type.  The sub-report block type identifier.
        \ The\n      values for the sub-report block types are defined in Section
        5.\n   Length: 8 bits\n      The length of the sub-report in 32-bit words.\n
        \  SRBT-specific data: <length * 4 - 2> octets\n      This field may contain
        type-specific information based upon the\n      SRBT value.\n"
      title: 7.1.2.  Sub-Report Block Types
    - contents:
      - "7.1.3.  Generic Sub-Report Block Fields\n   For the sub-report blocks that
        convey distributions of values (Loss,\n   Jitter, RTT, Cumulative Loss), a
        flexible 'data bucket'-style report\n   is used.  This format divides the
        data set into variable-size buckets\n   that are interpreted according to
        the guide fields at the head of the\n   report block.\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
        \  |     SRBT      |    Length     |        NDB            |   MF  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                   Minimum Distribution Value                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                   Maximum Distribution Value                  |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
        \  |                      Distribution Buckets                     |\n   |
        \                            ...                               |\n   |                             ...
        \                              |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
        \  The SRBT and length fields are calculated as explained in Section\n   7.1.2.\n
        \  Number of distribution buckets (NDB): 12 bits\n      The number of distribution
        buckets of data.  The size of each\n      bucket can be calculated using the
        formula\n      ((length * 4) - 12) * 8 / NDB number of bits.  The calculation
        is\n      based on the length of the whole sub-report block in octets\n      (length
        * 4) minus the header of 12 octets.  Providing 12 bits for\n      the NDB
        field enables bucket sizes as small as 2 bits for a full-\n      length packet
        of MTU 1500 bytes.  The bucket size in bits must\n      always be divisible
        by 2 to ensure proper byte alignment.  A\n      bucket size of 2 bits is fairly
        restrictive, however, and it is\n      expected that larger bucket sizes will
        be more practical for most\n      distributions.\n   Multiplicative Factor
        (MF): 4 bits\n      2^MF indicates the multiplicative factor to be applied
        to each\n      distribution bucket value.  Possible values of MF are 0 - 15,\n
        \     creating a range of values from MF = 1, 2, 4 ... 32768.  Appendix\n
        \     B gives an example of the use of the multiplicative factor; it is\n
        \     meant to provide more \"bits\" without having them -- the bucket\n      values
        get scaled up by the MF.\n   Length: 8 bits\n      The length field tells
        the receiver the full length of the sub-\n      report block in 32-bit words
        (i.e., length * 4 bytes) and enables\n      the receiver to identify the bucket
        size.  For example, given no\n      MTU restrictions, the data portion of
        a distribution packet may be\n      only as large as 1008 bytes (255 * 4 -
        12), providing up to 4032\n      data buckets of length 2 bits, or 2016 data
        buckets of length 4\n      bits, etc.\n   Minimum distribution value (min):
        32 bits\n      The minimum distribution value, in combination with the maximum\n
        \     distribution value, indicates the range covered by the data bucket\n
        \     values.\n   Maximum distribution value (max): 32 bits\n      The maximum
        distribution value, in combination with the minimum\n      distribution value,
        indicates the range covered by the data bucket\n      values.  The significance
        and range of the distribution values is\n      defined in the individual subsections
        for each distribution type\n      (DT).\n   Distribution buckets: each bucket
        is ((length * 4) - 12) * 8 / NDB\n      bits\n      The size and number of
        buckets is calculated as outlined above\n      based upon the value of NDB
        and the length of the packet.  The\n      values for distribution buckets
        are equally distributed; according\n      to the following formula, distribution
        bucket x (with 0 <= x <\n      NDB) covers the value range:\n      x = 0;
        [min, min + (max - min) / NDB]\n      x > 0; [min + (x) * (max - min) / NDB,\n
        \             min + (x + 1) * (max - min) / NDB]\n   Interpretation of the
        minimum, maximum, and distribution values in\n   the sub-report block is sub-report-specific
        and is addressed\n   individually in the sections below.  The size of the
        sub-report block\n   is variable, as indicated by the packet length field.\n
        \  Note that, for any bucket-based reporting, if the Distribution Source\n
        \  and the Feedback Target(s) are disjoint entities, out-of-band\n   agreement
        on the bucket-reporting granularity is recommended to allow\n   the Distribution
        Source to forward accurate information in these\n   kinds of reports to the
        receivers.\n"
      title: 7.1.3.  Generic Sub-Report Block Fields
    - contents:
      - "7.1.4.  Loss Sub-Report Block\n   The Loss sub-report block allows a receiver
        to determine how its own\n   reception quality relates to the other recipients.
        \ A receiver may\n   use this information, e.g., to drop out of a session
        (instead of\n   sending lots of error repair feedback) if it finds itself
        isolated at\n   the lower end of the reception quality scale.\n   The Loss
        sub-report block indicates the distribution of losses as\n   reported by the
        receivers to the Distribution Source.  Values are\n   expressed as a fixed-point
        number with the binary point at the left\n   edge of the field similar to
        the \"fraction lost\" field in SR and RR\n   packets, as defined in [1].  The
        Loss sub-report block type (SRBT) is\n   4.\n   Valid results for the minimum
        distribution value field are 0 - 254.\n   Similarly, valid results for the
        maximum distribution value field are\n   1 - 255.  The minimum distribution
        value MUST always be less than the\n   maximum.\n   For examples on processing
        summarized loss report sub-blocks, see\n   Appendix B.\n"
      title: 7.1.4.  Loss Sub-Report Block
    - contents:
      - "7.1.5.  Jitter Sub-Report Block\n   A Jitter sub-report block indicates the
        distribution of the estimated\n   statistical variation of the RTP data packet
        inter-arrival time\n   reported by the receivers to the Distribution Source.
        \ This allows\n   receivers both to place their own observed jitter values
        in context\n   with the rest of the group and to approximate dynamic parameters
        for\n   playout buffers.  See [1] for details on the calculation of the\n
        \  values and the relevance of the jitter results.  Jitter values are\n   measured
        in timestamp units with the rate used by the Media Sender\n   and expressed
        as unsigned integers.  The minimum distribution value\n   MUST always be less
        than the maximum.  The Jitter sub-report block\n   type (SRBT) is 5.\n   Since
        timestamp units are payload-type specific, the relevance of a\n   jitter value
        is impacted by any change in the payload type during a\n   session.  Therefore,
        a Distribution Source MUST NOT report jitter\n   distribution values for at
        least 2 reporting intervals after a\n   payload type change occurs.\n"
      title: 7.1.5.  Jitter Sub-Report Block
    - contents:
      - "7.1.6.  Round-Trip Time Sub-Report Block\n   A Round-Trip Time sub-report
        indicates the distribution of round-trip\n   times from the Distribution Source
        to the receivers, providing\n   receivers with a global view of the range
        of values in the group.\n   The Distribution Source is capable of calculating
        the round-trip time\n   to any other member since it forwards all the SR packets
        from the\n   Media Sender(s) to the group.  If the Distribution Source is
        not\n   itself a Media Sender, it can calculate the round-trip time from\n
        \  itself to any of the receivers by maintaining a record of the SR\n   sender
        timestamp and the current time as measured from its own system\n   clock.
        \ The Distribution Source consequently calculates the round-\n   trip time
        from the Receiver Report by identifying the corresponding\n   SR timestamp
        and subtracting the RR advertised holding time as\n   reported by the receiver
        from its own time difference measurement, as\n   calculated by the time the
        RR packet is received and the recorded\n   time the SR was sent.\n   The Distribution
        Source has the option of distributing these round-\n   trip time estimations
        to the whole group, uses of which are described\n   in Section 7.4.  The round-trip
        time is expressed in units of 1/65536\n   seconds and indicates an absolute
        value.  This is calculated by the\n   Distribution Source, based on the Receiver
        Report responses declaring\n   the time difference since an original Sender
        Report and on the\n   holding time at the receiver.  The minimum distribution
        value MUST\n   always be less than the maximum.  The Round-Trip Time sub-report\n
        \  block type (SRBT) is 6.\n      Note that if the Distribution Source and
        the Feedback Target\n      functions are disjoint, it is only possible for
        the Distribution\n      Source to determine RTT if all the Feedback Targets
        forward all\n      RTCP reports from the receivers immediately (i.e., do not
        perform\n      any preliminary summarization) and include at least the RR
        packet.\n"
      title: 7.1.6.  Round-Trip Time Sub-Report Block
    - contents:
      - "7.1.7.  Cumulative Loss Sub-Report Block\n   The cumulative loss field in
        a Receiver Report [1], in contrast to\n   the fraction lost field, is intended
        to provide some historical\n   perspective on the session performance, i.e.,
        the total number of\n   lost packets since the receiver joined the session.
        \ The cumulative\n   loss value provides a longer-term average by summing
        over a larger\n   sample set (typically the whole session).  The Distribution
        Source\n   MAY record the values as reported by the receiver group and report
        a\n   distribution of values.  Values are expressed as a fixed-point number\n
        \  with the binary point at the left edge of the field, in the same\n   manner
        as the Loss sub-report block.  Since the individual Receiver\n   Reports give
        the cumulative number of packets lost but not the\n   cumulative number sent,
        which is required as a denominator to\n   calculate the long-term fraction
        lost, the Distribution Source MUST\n   maintain a record of the cumulative
        number lost and extended highest\n   sequence number received, as reported
        by each receiver at some point\n   in the past.  Ideally, the recorded values
        are from the first report\n   received.  Subsequent calculations are then
        based on (<the new\n   cumulative loss value> - <the recorded value>) / (<new
        extended\n   highest sequence number> - <recorded sequence number>).\n   Valid
        results for the minimum distribution value field are 0 - 254.\n   Similarly,
        valid results for the maximum distribution value field are\n   1 - 255.  The
        minimum distribution value MUST always be less than the\n   maximum.  The
        Cumulative Loss sub-report block type (SRBT) is 7.\n"
      title: 7.1.7.  Cumulative Loss Sub-Report Block
    - contents:
      - "7.1.8.  Feedback Target Address Sub-Report Block\n   The Feedback Target
        Address block provides a dynamic mechanism for\n   the Distribution Source
        to signal an alternative unicast RTCP\n   feedback address to the receivers.
        \ If a block of this type is\n   included, receivers MUST override any static
        SDP address information\n   for the session with the Feedback Target address
        provided in this\n   sub-report block.\n   If a Feedback Target Address sub-report
        block is used, it MUST be\n   included in every RTCP packet originated by
        the Distribution Source\n   to ensure that all receivers understand the information.
        \ In this\n   manner, receiver behavior should remain consistent even in the
        face\n   of packet loss or when there are late session arrivals.\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | SRBT={0,1,2}  |     Length    |             Port              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                                                               |\n   :
        \                           Address                            :\n   |                                                               |\n
        \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   SRBT:
        8 bits\n      The type of sub-report block that corresponds to the type of\n
        \     address is as follows:\n         0: IPv4 address\n         1: IPv6 address\n
        \        2: DNS name\n   Length: 8 bits\n      The length of the sub-report
        block in 32-bit words.  For an IPv4\n      address, this should be 2 (i.e.,
        total length = 4 + 4 = 2 * 4\n      octets).  For an IPv6 address, this should
        be 5.  For a DNS name,\n      the length field indicates the number of 32-bit
        words making up\n      the string plus 1 byte and any additional padding required
        to\n      reach the next word boundary.\n   Port: 2 octets\n      The port
        number to which receivers send feedback reports.  A port\n      number of
        0 is invalid and MUST NOT be used.\n   Address: 4 octets (IPv4), 16 octets
        (IPv6), or n octets (DNS name)\n      The address to which receivers send
        feedback reports.  For IPv4\n      and IPv6, fixed-length address fields are
        used.  A DNS name is an\n      arbitrary-length string that is padded with
        null bytes to the next\n      32-bit boundary.  The string MAY contain Internationalizing
        Domain\n      Names in Applications (IDNA) domain names and MUST be UTF-8\n
        \     encoded [11].\n   A Feedback Target Address block for a certain address
        type (i.e.,\n   with a certain SRBT of 0, 1, or 2) MUST NOT occur more than
        once\n   within a packet.  Numerical Feedback Target Address blocks for IPv4\n
        \  and IPv6 MAY both be present.  If so, the resulting transport\n   addresses
        MUST point to the same logical entity.\n   If a Feedback Target address block
        with an SRBT indicating a DNS name\n   is present, there SHOULD NOT be any
        other numerical Feedback Target\n   Address blocks present.\n   The Feedback
        Target Address presents a significant security risk if\n   accepted from unauthenticated
        RTCP packets.  See Sections 11.3 and\n   11.4 for further discussion.\n"
      title: 7.1.8.  Feedback Target Address Sub-Report Block
    - contents:
      - "7.1.9.  Collision Sub-Report Block\n   The Collision SSRC sub-report provides
        the Distribution Source with a\n   mechanism to report SSRC collisions amongst
        the group.  In the event\n   that a non-unique SSRC is discovered based on
        the tuple [SSRC,\n   CNAME], the collision is reported in this block and the
        affected\n   nodes must reselect their respective SSRC identifiers.\n    0
        \                  1                   2                   3\n    0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     SRBT=8    |    Length     |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                                                               |\n   :
        \                        Collision SSRC                        :\n   |                                                               |\n
        \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Collision
        SSRC: n * 32 bits\n      This field contains a list of SSRCs that are duplicated
        within the\n      group.  Usually this is handled by the hosts upon detection
        of the\n      same SSRC; however, since receivers in an SSM session using
        the\n      Distribution Source Feedback Summary Model no longer have a global\n
        \     view of the session, the collision algorithm is handled by the\n      Distribution
        Source.  SSRCs that collide are listed in the packet.\n      Each Collision
        SSRC is reported only once for each collision\n      detection.  If more Collision
        SSRCs need to be reported than fit\n      into an MTU, the reporting is done
        in a round robin fashion so\n      that all Collision SSRCs have been reported
        once before the second\n      round of reporting starts.  On receipt of the
        packet, receiver(s)\n      MUST detect the collision and select another SSRC,
        if the\n      collision pertains to them.\n   The Collision sub-report block
        type (SRBT) is 8.\n   Collision detection is only possible at the Distribution
        Source.  If\n   the Distribution Source and Feedback Target functions are
        disjoint\n   and collision reporting across RTP receiver SSRCs shall be provided,\n
        \  the Feedback Targets(s) MUST forward the RTCP reports from the RTP\n   receivers,
        including at least the RR and the SDES packets to the\n   Distribution Source.\n
        \  In system settings in which, by explicit configuration or\n   implementation,
        RTP receivers are not going to act as Media Senders\n   in a session (e.g.,
        for various types of television broadcasting),\n   SSRC collision detection
        MAY be omitted for RTP receivers.  In system\n   settings in which an RTP
        receiver MAY become a Media Sender (e.g.,\n   any conversational application),
        SSRC collision detection MUST be\n   provided for RTP receivers.\n      Note:
        The purpose of SSRC collision reporting is to ensure unique\n      identification
        of RTCP entities.  This is of particular relevance\n      for Media Senders
        so that an RTP receiver can properly associate\n      each of the multiple
        incoming media streams (via the Distribution\n      Source) with the correct
        sender.  Collision resolution for Media\n      Senders is not affected by
        the Distribution Source's collision\n      reporting because all SR reports
        are always forwarded among the\n      senders and to all receivers.  Collision
        resolution for RTP\n      receivers is of particular relevance for those receivers
        capable\n      of becoming a Media Sender.  RTP receivers that will, by\n
        \     configuration or implementation choice, not act as a sender in a\n      particular
        RTP session, do not necessarily need to be aware of\n      collisions as long
        as the those entities receiving and processing\n      RTCP feedback messages
        from the receivers are capable of\n      disambiguating the various RTCP receivers
        (e.g., by CNAME).\n      Note also that RTP receivers should be able to deal
        with the\n      changing SSRCs of a Media Sender (like any RTP receiver has
        to\n      do.) and, if possible, be prepared to continuously render a media\n
        \     stream nevertheless.\n"
      title: 7.1.9.  Collision Sub-Report Block
    - contents:
      - "7.1.10.  General Statistics Sub-Report Block\n   The General Statistics sub-report
        block is used if specifying buckets\n   is deemed too complex.  With the General
        Statistics sub-report block,\n   only aggregated values are reported back.
        \ The rules for the\n   generation of these values are provided in point b
        of Section 7.2.1.\n    0                   1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |    SRBT=10    |    Length     |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |      MFL      |                    HCNL                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                    Median inter-arrival jitter                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Median fraction lost (MFL): 8 bits\n      The median fraction lost indicated
        by Receiver Reports forwarded\n      to this Distribution Source, expressed
        as a fixed-point number\n      with the binary point at the left edge of the
        field.  A value of\n      all '1's indicates that the MFL value is not provided.\n
        \  Highest cumulative number of packets lost (HCNL): 24 bits\n      Highest
        'cumulative number of packets lost' value out of the most\n      recent RTCP
        RR packets from any of the receivers.  A value of all\n      '1's indicates
        that the HCNL value is not provided.\n   Median inter-arrival jitter: 32 bits\n
        \     Median 'inter-arrival jitter' value out of the most recent RTCP RR\n
        \     packets from the receiver set.  A value of all '1's indicates that\n
        \     this value is not provided.\n   The General Statistics sub-report block
        type (SRBT) is 10.\n   Note that, in case the Distribution Source and the
        Feedback Target\n   functions are disjoint, it is only possible for the Distribution\n
        \  Source to determine the median of the inter-arrival jitter if all the\n
        \  Feedback Targets forward all RTCP reports from the receivers\n   immediately
        and include at least the RR packet.\n"
      title: 7.1.10.  General Statistics Sub-Report Block
    - contents:
      - "7.1.11.  RTCP Bandwidth Indication Sub-Report Block\n   This sub-report block
        is used to inform the Media Senders and\n   receivers about either the maximum
        RTCP bandwidth that is supposed to\n   be used by each Media Sender or the
        maximum bandwidth allowance to be\n   used by each receiver.  The value is
        applied universally to all Media\n   Senders or all receivers.  Each receiver
        MUST base its RTCP\n   transmission interval calculation on the average size
        of the RTCP\n   packets sent by itself.  Conversely, each Media Sender MUST
        base its\n   RTCP transmission interval calculation on the average size of
        the\n   RTCP packets sent by itself.\n    0                   1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |    SRBT=11    |     Length    |S|R|         Reserved          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                        RTCP Bandwidth                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Sender (S): 1 bit\n      The contained bandwidth value applies to each
        Media Sender.\n   Receivers (R): 1 bit\n      The contained bandwidth value
        applies to each RTP receiver.\n   Reserved: 14 bits\n      MUST be set to
        zero upon transmission and ignored upon reception.\n   RTCP Bandwidth: 32
        bits\n      If the S bit is set to 1, this field indicates the maximum\n      bandwidth
        allocated to each individual Media Sender.  This also\n      informs the receivers
        about the RTCP report frequency to expect\n      from the senders.  This is
        a fixed-point value with the binary\n      point in between the second and
        third bytes.  The value represents\n      the bandwidth allocation per receiver
        in kilobits per second, with\n      values in the range 0 <= BW < 65536.\n
        \     If the R bit is set to 1, this field indicates the maximum\n      bandwidth
        allocated per receiver for sending RTCP data relating to\n      the session.
        \ This is a fixed-point value with the binary point in\n      between the
        second and third bytes.  The value represents the\n      bandwidth allocation
        per receiver in kilobits per second, with\n      values in the range 0 <=
        BW < 65536.  Each receiver MUST use this\n      value for its bandwidth allowance.\n
        \  This report block SHOULD only be used when the Group and Average\n   Packet
        Size sub-report block is NOT included.  The RTCP Bandwidth\n   Indication
        sub-report block type (SRBT) is 11.\n"
      title: 7.1.11.  RTCP Bandwidth Indication Sub-Report Block
    - contents:
      - "7.1.12.  RTCP Group and Average Packet Size Sub-Report Block\n   This sub-report
        block is used to inform the Media Senders and\n   receivers about the size
        of the group (used for calculating feedback\n   bandwidth allocation) and
        the average packet size of the group.  This\n   sub-report MUST always be
        present, appended to every RSI packet,\n   unless an RTCP Bandwidth Indication
        sub-report block is included (in\n   which case it MAY, but need not, be present).\n
        \     Note: The RTCP Bandwidth Indication sub-report block allows the\n      Distribution
        Source to hide the actual group size from the\n      receivers while still
        avoiding feedback implosion.\n    0                   1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |    SRBT=12    |    Length     |     Average Packet Size       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                     Receiver Group Size                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Group size: 32 bits\n      This field provides the Distribution Source's
        view of the number\n      of receivers in a session.  Note that the number
        of Media Senders\n      is not explicitly reported since it can be derived
        by observing\n      the RTCP SR packets forwarded by the Distribution Source.
        \ The\n      group size is calculated according to the rules outlined in [1].\n
        \     When this sub-report block is included, this field MUST always be\n
        \     present.\n   Average RTCP packet size: 16 bits\n      This field provides
        the Distribution Source's view of the average\n      RTCP packet size as locally
        calculated, following the rules\n      defined in [1].  The value is an unsigned
        integer, counting\n      octets.  When this sub-report block is included,
        this field MUST\n      always be present.\n   The Group and Average Packet
        Size sub-report block type (SRBT) is 12.\n"
      title: 7.1.12.  RTCP Group and Average Packet Size Sub-Report Block
    title: 7.1.  Packet Formats
  - contents:
    - "7.2.  Distribution Source Behavior\n   In the Distribution Source Feedback
      Summary Model, the Distribution\n   Source (the unicast Feedback Target) MUST
      listen for unicast RTCP\n   packets sent to the RTCP port.  All RTCP packets
      received on this\n   port MUST be processed by the Distribution Source, as described\n
      \  below.  The processing MUST take place per Media Sender SSRC for\n   which
      Receiver Reports are received.\n   The Distribution Source acts like a regular
      RTCP receiver.  In\n   particular, it receives an RTP stream from each RTP Media
      Sender(s)\n   and MUST calculate the proper reception statistics for these RTP\n
      \  streams.  It MUST transmit the resulting information as report blocks\n   contained
      in each RTCP packet it sends (in an RR packet).\n      Note: This information
      may help to determine the transmission\n      characteristics of the feed path
      from the RTP sender to the\n      Distribution Source (if these are separate
      entities).\n   The Distribution Source is responsible for accepting RTCP packets\n
      \  from the receivers and for interpreting and storing per-receiver\n   information,
      as defined in [1].  The importance of providing these\n   functions is apparent
      when creating the RSI and sub-report block\n   reports since incorrect information
      can have serious implications.\n   Section 11 addresses the security risks in
      detail.\n   As defined in [1], all RTCP reports from the Distribution Source
      MUST\n   start with an RR report, followed by any relevant SDES fields.  Then\n
      \  the Distribution Source MUST append an RSI header and sub-reports\n   containing
      any summarization-specific data.  In addition, either the\n   Group and Average
      Packet Size sub-report or the Receiver RTCP\n   Bandwidth sub-report block MUST
      be appended to the RSI header.\n   A Distribution Source has the option of masking
      the group size by\n   including only an RTCP Bandwidth sub-report.  If both
      sub-reports are\n   included, the receiver is expected to give precedence to
      the\n   information contained in the Receiver RTCP Bandwidth sub-report.\n   The
      Receiver RTCP Bandwidth sub-report block provides the\n   Distribution Source
      with the capability to control the amount of\n   feedback from the receivers,
      and the bandwidth value MAY be increased\n   or decreased based upon the requirements
      of the Distribution Source.\n   Regardless of the value selected by the Distribution
      Source for the\n   Receiver RTCP Bandwidth sub-report block, the Distribution
      Source\n   MUST continue to forward Sender Reports and RSI packets at the rate\n
      \  allowed by the total RTCP bandwidth allocation.  See Section 9 for\n   further
      details about the frequency of reports.\n   A Distribution Source MAY start
      out reporting group size and switch\n   to Receiver RTCP Bandwidth reporting
      later on and vice versa.  If the\n   Distribution Source does so, it SHOULD
      ensure that the\n   correspondingly indicated values for the Receiver RTCP Bandwidth
      sub-\n   report roughly match, i.e., are at least the same order of magnitude.\n
      \  In order to identify SSRC collisions, the Distribution Source is\n   responsible
      for maintaining a record of each SSRC and the\n   corresponding CNAME within
      at least one reporting interval by the\n   group, in order to differentiate
      between clients.  It is RECOMMENDED\n   that an updated list of more than one
      interval be maintained to\n   increase accuracy.  This mechanism should prevent
      the possibility of\n   collisions since the combination of SSRC and CNAME should
      be unique,\n   if the CNAME is generated correctly.  If collisions are not detected,\n
      \  the Distribution Source will have an inaccurate impression of the\n   group
      size.  Since the statistical probability is very low that\n   collisions will
      both occur and be undetectable, this should not be a\n   significant concern.
      \ In particular, the clients would have to\n   randomly select the same SSRC
      and have the same username + IP address\n   (e.g., using private address space
      behind a NAT router).\n"
    - contents:
      - "7.2.1.  Receiver Report Aggregation\n   The Distribution Source is responsible
        for aggregating reception-\n   quality information received in RR packets.
        \ In doing so, the\n   Distribution Source MUST consider the report blocks
        received in every\n   RR packet and MUST NOT consider the report blocks of
        an SR packet.\n      Note: the receivers will get the information contained
        in the SR\n      packets anyway by packet forwarding, so duplication of this\n
        \     information should be avoided.\n   For the optional sub-report blocks,
        the Distribution Source MAY\n   decide which are the most significant feedback
        values to convey and\n   MAY choose not to include any.  The packet format
        provides\n   flexibility in the amount of detail conveyed by the data points.\n
        \  There is a tradeoff between the granularity of the data and the\n   accuracy
        of the data based on the multiplicative factor (MF), the\n   number of buckets,
        and the min and max values.  In order to focus on\n   a particular region
        of a distribution, the Distribution Source can\n   adjust the minimum and
        maximum values and either increase the number\n   of buckets, and possibly
        the factorization, or decrease the number of\n   buckets and provide more
        accurate values.  See Appendix B for\n   detailed examples on how to convey
        a summary of RTCP Receiver Reports\n   as RSI sub-report block information.\n
        \  For each value the Distribution Source decides to include in an RSI\n   packet,
        it MUST adhere to the following measurement rules.\n   a)  If the Distribution
        Source intends to use a sub-report to convey\n       a distribution of values
        (Sections 7.1.3 to 7.1.7), it MUST keep\n       per-receiver state, i.e.,
        remember the last value V reported by\n       the respective receiver.  If
        a new value is reported by a\n       receiver, the existing value MUST be
        replaced by the new one.\n       The value MUST be deleted (along with the
        entire entry) if the\n       receiver is timed out (as per Section 6.3.5 of
        [1]) or has sent a\n       BYE packet (as per Section 6.3.7 of [1]).\n       All
        the values collected in this way MUST be included in the\n       creation
        of the subsequent Distribution sub-report block.\n       The results should
        correspond as closely as possible to the\n       values received during the
        interval since the last report.  The\n       Distribution Source may stack
        as many sub-report blocks as\n       required in order to convey different
        distributions.  If the\n       distribution size exceeds the largest packet
        length (1008 bytes\n       data portion), more packets MAY be stacked with
        additional\n       information (but in total SHOULD NOT exceed the path MTU).\n
        \      All stacked sub-reports MUST be internally consistent, i.e.,\n       generated
        from the same session data.  Overlapping of\n       distributions is therefore
        allowed, and variation in values\n       should only occur as a result of
        data set granularity, with the\n       more accurate bucket sizes taking precedence
        in the event that\n       values differ.  Non-divisible values MUST be rounded
        up or down\n       to the closest bucket value, and the number of data buckets
        must\n       always be an even number, padding where necessary with an\n       additional
        zero bucket value to maintain consistency.\n       Note: This intentionally
        provides persistent full coverage of the\n       entire session membership
        to avoid oscillations due to changing\n       membership samples.\n       Scheduling
        the transmission of summarization reports is left to\n       the discretion
        of the Distribution Source.  However, the\n       Distribution Source MUST
        adhere to the bandwidth limitations for\n       Receiver Reports as defined
        for the respective AV profile in use.\n   b)  If the Distribution Source intends
        to report a short summary\n       using the General Statistics sub-report
        block format, defined in\n       Section 7.1.10, for EACH of the values included
        in the report\n       (MFL, HCNL, average inter-arrival jitter), it MUST keep
        a timer\n       T_summary as well as a sufficient set of variables to calculate\n
        \      the summaries for the last three reporting intervals.  This MAY\n       be
        achieved by keeping per-receiver state (i.e., remember the\n       last value
        V reported by the respective receiver) or by\n       maintaining summary variables
        for each of these intervals.\n       The summary values are included here
        to reflect the current group\n       situation.  By recording the last three
        reporting intervals, the\n       Distribution Source incorporates reports
        from all members while\n       allowing for individual RTCP Receiver Report
        packet losses.  The\n       process of collecting these values also aims to
        avoid resetting\n       any of the values and then having to send out an RSI
        report based\n       upon just a few values collected.  If data is available
        for less\n       than three reporting intervals (as will be the case for the
        first\n       two reports sent), only those values available are considered.\n
        \      The timer T_summary MUST be initialized as T_summary = 1.5 * Td,\n
        \      where Td is the deterministic reporting interval, and MUST be\n       updated
        following timer reconsideration whenever the group size\n       or the average
        RTCP size (\"avg_rtcp_size\") changes.  This choice\n       should allow each
        receiver to report once per interval.\n            Td\n           __^__\n
        \       t0/     \\   t1        t2        t3        t4        t5\n       ---+---------+---------+---------+---------+---------+------->\n
        \         \\____ ____/         :         :         :         :\n          :
        \   V    :         :         :         :         :\n          :T_summary:
        \        :         :         :         :\n          :=1.5 * Td:         :
        \        :         :         :\n          \\______________ ______________/
        \        :         :\n                    :    V    :                   :
        \        :\n                    : 3 * T_summary               :         :\n
        \                   :         :                   :         :\n                    \\______________
        ______________/         :\n                              :    V                        :\n
        \                             : 3 * T_summary               :\n                              :
        \                            :\n                              \\______________
        ______________/\n                                             V\n                                          3
        * T_summary\n                 Figure 2: Overview of Summarization Reporting\n
        \  Figure 2 depicts how the summarization reporting shall be performed.\n
        \  At time t3, the RTCP reports collected from t0 through t3 are\n   included
        in the RSI reporting; at time t4, those from t1 through t4;\n   and so on.
        \ The RSI summary report sent MUST NOT include any RTCP\n   report from more
        than three reporting intervals ago, e.g., the one\n   sent at time t5, must
        not include reports received at the\n   Distribution Source prior to t2.\n"
      title: 7.2.1.  Receiver Report Aggregation
    - contents:
      - "7.2.2.  Handling Other RTCP Packets from RTP Receivers\n   When following
        the Feedback Summary Model, the Distribution Source\n   MAY reflect any other
        RTCP packets of potential relevance to the\n   receivers (such as APP, RTPFB,
        PSFB) to the receiver group.  Also, it\n   MAY decide not to forward other
        RTCP packets not needed by the\n   receivers such as BYE, RR, SDES (because
        the Distribution Source\n   performs collision resolution), group size estimation,
        and RR\n   aggregation.  The Distribution Source MUST NOT forward RR packets
        to\n   the receiver group.\n   If the Distribution Source is able to interpret
        and aggregate\n   information contained in any RTCP packets other than RR,
        it MAY\n   include the aggregated information along with the RSI packet in
        its\n   own compound RTCP packet.\n   Aggregation MAY be a null operation,
        i.e., the Distribution Source\n   MAY simply append one or more RTCP packets
        from receivers to the\n   compound RTCP packet (containing at least RR, SDES,
        and RSI from the\n   Distribution Source).\n      Note: This is likely to
        be useful only for a few cases, e.g., to\n      forward aggregated information
        from RTPFB Generic NACK packets and\n      thereby maintain the damping property
        of [15].\n      Note: This entire processing rule implies that the flow of\n
        \     information contained in non-RR RTCP packets may terminate at the\n
        \     Distribution Source, depending on its capabilities and\n      configuration.\n
        \  The configuration of the RTCP SSM media session (expressed in SDP)\n   MUST
        specify explicitly which processing the Distribution Source will\n   apply
        to which RTCP packets.  See Section 10.1 for details.\n"
      title: 7.2.2.  Handling Other RTCP Packets from RTP Receivers
    - contents:
      - "7.2.3.  Receiver Report Forwarding\n   If the Media Sender(s) are not part
        of the SSM group for RTCP packet\n   reflection, the Distribution Source MUST
        explicitly inform the Media\n   Senders of the receiver group.  To achieve
        this, the Distribution\n   Source has two options: 1) it forwards the RTCP
        RR and SDES packets\n   received from the receivers to the Media Sender(s);
        or 2) if the\n   Media Senders also support the RTCP RSI packet, the Distribution\n
        \  Source sends the RSI packets not just to the receivers but also to\n   the
        Media Senders.\n   If the Distribution Source decides to forward RR and SDES
        packets\n   unchanged, it MAY also forward any other RTCP packets to the senders.\n
        \  If the Distribution Source decides to forward RSI packets to the\n   senders,
        the considerations of Section 7.2.2 apply.\n"
      title: 7.2.3.  Receiver Report Forwarding
    - contents:
      - "7.2.4.  Handling Sender Reports\n   The Distribution Source also receives
        RTCP (including SR) packets\n   from the RTP Media Senders.\n   The Distribution
        Source MUST forward all RTCP packets from the Media\n   Senders to the RTP
        receivers.\n   If there is more than one Media Sender and these Media Senders
        do not\n   communicate via ASM with the Distribution Source and each other,
        the\n   Distribution Source MUST forward each RTCP packet from any one Media\n
        \  Sender to all other Media Senders.\n"
      title: 7.2.4.  Handling Sender Reports
    - contents:
      - "7.2.5.  RTCP Data Rate Calculation\n   As noted above, the Distribution Source
        is a receiver from an RTP\n   perspective.  The Distribution Sources MUST
        calculate its\n   deterministic transmission interval Td as every other receiver;\n
        \  however, it MAY adjust its available data rate depending on the\n   destination
        transport address and its local operation:\n   1. For sending its own RTCP
        reports to the SSM group towards the\n      receivers, the Distribution Source
        MAY use up to the joint share\n      of all receivers as it is forwarding
        summaries on behalf of all of\n      them.  Thus, the Distribution Source
        MAY send its reports up to\n      every Td/R time units, with R being the
        number of receivers.\n   2. For sending its own RTCP reports to the Media
        Senders only (i.e.,\n      if the Media Senders are not part of the SSM group),
        the allocated\n      rate depends on the operation of the Distribution Source:\n
        \     a) If the Distribution Source only sends RSI packets along with\n         its
        own RTCP RR packets, the same rate calculation applies as\n         for #1
        above.\n      b) If the Distribution Source forwards RTCP packets from all
        other\n         receivers to the Media Senders, then it MUST adhere to the
        same\n         bandwidth share for its own transmissions as all other\n         receivers
        and use the calculation as per [1].\n"
      title: 7.2.5.  RTCP Data Rate Calculation
    - contents:
      - "7.2.6.  Collision Resolution\n   A Distribution Source observing RTP packets
        from a Media Sender with\n   an SSRC that collides with its own chosen SSRC
        MUST change its own\n   SSRC following the procedures of [1] and MUST do so
        immediately after\n   noticing.\n   A Distribution Source MAY use out-of-band
        information about the Media\n   Sender SSRC(s) used in the media session when
        available to avoid SSRC\n   collisions with Media Senders.  Nevertheless,
        the Distribution Source\n   MUST monitor Sender Report (SR) packets to detect
        any changes,\n   observe collisions, and then follow the above collision-resolution\n
        \  procedure.\n   For collision resolution between the Distribution Source
        and\n   receivers or the Feedback Target(s) (if a separate entity, as\n   described
        in the next subsection), the Distribution Source and the\n   Feedback Target
        (if separate) operate similar to ordinary receivers.\n"
      title: 7.2.6.  Collision Resolution
    title: 7.2.  Distribution Source Behavior
  - contents:
    - "7.3.  Disjoint Distribution Source and Feedback Target\n   If the Distribution
      Source and the Feedback Target are disjoint, the\n   processing of the Distribution
      Source is limited by the amount of\n   RTCP feedback information made available
      by the Feedback Target.\n   The Feedback Target(s) MAY simply forward all RTCP
      packets incoming\n   from the RTP receivers to the Distribution Source, in which
      case the\n   Distribution Source will have all the necessary information available\n
      \  to perform all the functions described above.\n   The Feedback Target(s)
      MAY also perform aggregation of incoming RTCP\n   packets and send only aggregated
      information to the Distribution\n   Source.  In this case, the Feedback Target(s)
      MUST use correctly\n   formed RTCP packets to communicate with the Distribution
      Source and\n   they MUST operate in concert with the Distribution Source so
      that the\n   Distribution Source and the Feedback Target(s) appear to be operating\n
      \  as a single entity.  The Feedback Target(s) MUST report their\n   observed
      receiver group size to the Distribution Source, either\n   explicitly by means
      of RSI packets or implicitly by forwarding all RR\n   packets.\n      Note:
      For example, for detailed statistics reporting, the\n      Distribution Source
      and the Feedback Target(s) may need to agree\n      on a common reporting granularity
      so that the Distribution Source\n      can aggregate the buckets incoming from
      various Feedback Targets\n      into a coherent report sent to the receivers.\n
      \  The joint behavior of the Distribution Source and Feedback Target(s)\n   MUST
      be reflected in the (SDP-based) media session description as per\n   Section
      7.2.2.\n   If the Feedback Target performs summarization functions, it MUST
      also\n   act as a receiver and choose a unique SSRC for its own reporting\n
      \  towards the Distribution Source.  The collision-resolution\n   considerations
      for receivers apply.\n"
    title: 7.3.  Disjoint Distribution Source and Feedback Target
  - contents:
    - "7.4.  Receiver Behavior\n   An RTP receiver MUST process RSI packets and adapt
      session\n   parameters, such as the RTCP bandwidth, based on the information\n
      \  received.  The receiver no longer has a global view of the session\n   and
      will therefore be unable to receive information from individual\n   receivers
      aside from itself.  However, the information conveyed by\n   the Distribution
      Source can be extremely detailed, providing the\n   receiver with an accurate
      view of the session quality overall,\n   without the processing overhead associated
      with listening to and\n   analyzing all Receiver Reports.\n   The RTP receiver
      MUST process the report blocks contained in any RTP\n   SR and RR packets to
      complete its view of the RTP session.\n   The SSRC collision list MUST be checked
      against the SSRC selected by\n   the receiver to ensure there are no collisions
      as MUST be incoming\n   RTP packets from the Media Senders.  A receiver observing
      RTP packets\n   from a Media Sender with an SSRC that collides with its own
      chosen\n   SSRC MUST change its own SSRC following the procedures of [1].  The\n
      \  receiver MUST do so immediately after noticing and before sending any\n   (further)
      RTCP feedback messages.\n   A Group and Average Packet Size sub-report block
      is most likely to be\n   appended to the RSI header (either a Group Size sub-report
      or an RTCP\n   Bandwidth sub-report MUST be included).  The group size n allows
      a\n   receiver to calculate its share of the RTCP bandwidth, r.  Given R,\n
      \  the total available RTCP bandwidth share for receivers (in the SSM\n   RTP
      session) r = R/(n).  For the group size calculation, the RTP\n   receiver MUST
      NOT include the Distribution Source, i.e., the only RTP\n   receiver sending
      RSI packets.\n   The receiver RTCP bandwidth field MAY override this value.
      \ If the\n   receiver RTCP bandwidth field is present, the receiver MUST use
      this\n   value as its own RTCP reporting bandwidth r.\n   If the RTCP bandwidth
      field was used by the Distribution Source in an\n   RTCP session but this field
      was not included in the last five RTCP\n   RSI reports, the receiver MUST revert
      to calculating its bandwidth\n   share based upon the group size information.\n
      \  If the receiver has not received any RTCP RSI packets from the\n   Distribution
      Source for a period of five times the sender reporting\n   interval, it MUST
      cease transmitting RTCP Receiver Reports until the\n   next RTCP RSI packet
      is received.\n   The receiver can use the summarized data as desired.  This
      data is\n   most useful in providing the receiver with a more global view of
      the\n   conditions experienced by other receivers and enables the client to\n
      \  place itself within the distribution and establish the extent to\n   which
      its reported conditions correspond to the group reports as a\n   whole.  Appendix
      B provides further information and examples of data\n   processing at the receiver.\n
      \  The receiver SHOULD assume that any sub-report blocks in the same\n   packet
      correspond to the same data set received by the Distribution\n   Source during
      the last reporting time interval.  This applies to\n   packets with multiple
      blocks, where each block conveys a different\n   range of values.\n   A receiver
      MUST NOT rely on all of the RTCP packets it sends reaching\n   the Media Senders
      or any other receiver.  While RR statistics will be\n   aggregated, BYE packets
      will be processed, and SSRC collisions will\n   usually be announced, processing
      and/or forwarding of further RTCP\n   packets is up to the discretion of the
      Distribution Source and will\n   be performed as specified in the session description.\n
      \  If a receiver has out-of-band information available about the Media\n   Sender
      SSRC(s) used in the media session, it MUST NOT use the same\n   SSRC for itself.
      \ The receiver MUST be aware that such out-of-band\n   information may be outdated
      (i.e., that the sender SSRC(s) may have\n   changed) and MUST follow the above
      collision-resolution procedure if\n   necessary.\n   A receiver MAY use such
      Media Sender SSRC information when available\n   but MUST beware of potential
      changes to the SSRC (which can only be\n   learned from Sender Report (SR) packets).\n"
    title: 7.4.  Receiver Behavior
  - contents:
    - "7.5.  Media Sender Behavior\n   Media Senders listen on a unicast or multicast
      transport address for\n   RTCP reports sent by the receivers (and forwarded
      by the Distribution\n   Source) or other Media Senders (optionally forwarded
      by the\n   Distribution Source).\n   Unlike in the case of the simple forwarding
      model, Media Senders MUST\n   be able to process RSI packets from the Distribution
      Source to\n   determine the group size and their own RTCP bandwidth share.  Media\n
      \  Senders MUST also be capable of determining the group size (and their\n   corresponding
      RTCP bandwidth share) from listening to (forwarded)\n   RTCP RR and SR packets
      (as mandated in [1]).\n   As long as they send RTP packets, they MUST also send
      RTCP SRs, as\n   defined in [1].\n   A Media Sender that observes an SSRC collision
      with another entity\n   that is not also a Media Sender MAY delay its own collision-\n
      \  resolution actions, as per [1], by 5 * 1.5 * Td, with Td being the\n   deterministic
      calculated reporting interval, for receivers to see\n   whether the conflict
      still exists.  SSRC collisions with other Media\n   Senders MUST be acted upon
      immediately.\n      Note: This gives precedence to Media Senders and places
      the burden\n      of collision resolution on RTP receivers.\n   Sender SSRC
      information MAY be communicated out-of-band, e.g., by\n   means of SDP media
      descriptions.  Therefore, senders SHOULD NOT\n   change their own SSRC eagerly
      or unnecessarily.\n"
    title: 7.5.  Media Sender Behavior
  title: 7.  Distribution Source Feedback Summary Model
- contents:
  - "8.  Mixer/Translator Issues\n   The original RTP specification allows a session
    to use mixers and\n   translators to help connect heterogeneous networks into
    one session.\n   There are a number of issues, however, which are raised by the\n
    \  unicast feedback model proposed in this document.  The term 'mixer'\n   refers
    to devices that provide data stream multiplexing where\n   multiple sources are
    combined into one stream.  Conversely, a\n   translator does not multiplex streams
    but simply acts as a bridge\n   between two distribution mechanisms, e.g., a unicast-to-multicast\n
    \  network translator.  Since the issues raised by this document apply\n   equally
    to either a mixer or translator, the latter are referred to\n   from this point
    onwards as mixer-translator devices.\n   A mixer-translator between distribution
    networks in a session must\n   ensure that all members in the session receive
    all the relevant\n   traffic to enable the usual operation by the clients.  A
    typical use\n   may be to connect an older implementation of an RTP client with
    an\n   SSM distribution network, where the client is not capable of\n   unicasting
    feedback to the source.  In this instance, the mixer-\n   translator must join
    the session on behalf of the client and send and\n   receive traffic from the
    session to the client.  Certain hybrid\n   scenarios may have different requirements.\n"
  - contents:
    - "8.1.  Use of a Mixer-Translator\n   The mixer-translator MUST adhere to the
      SDP description [5] for the\n   single-source session (Section 11) and use the
      feedback mechanism\n   indicated.  Implementers of receivers SHOULD be aware
      that when a\n   mixer-translator is present in the session, more than one Media\n
      \  Sender may be active, since the mixer-translator may be forwarding\n   traffic
      to the SSM receivers either from multiple unicast sources or\n   from an ASM
      session.  Receivers SHOULD still forward unicast RTCP\n   reports in the usual
      manner to their assigned Feedback\n   Target/Distribution Source, which in this
      case -- by assumption --\n   would be the mixer-translator itself.  It is RECOMMENDED
      that the\n   simple packet-reflection mechanism be used under these circumstances,\n
      \  since attempting to coordinate RSI + summarization reporting between\n   more
      than one source may be complicated unless the mixer-translator\n   is capable
      of summarization.\n"
    title: 8.1.  Use of a Mixer-Translator
  - contents:
    - "8.2.  Encryption and Authentication Issues\n   Encryption and security issues
      are discussed in detail in Section 11.\n   A mixer-translator MUST be able to
      follow the same security policy as\n   the client in order to unicast RTCP feedback
      to the source, and it\n   therefore MUST be able to apply the same authentication
      and/or\n   encryption policy required for the session.  Transparent bridging
      and\n   subsequent unicast feedback to the source, where the mixer-translator\n
      \  is not acting as the Distribution Source, is only allowed if the\n   mixer-translator
      can conduct the same source authentication as\n   required by the receivers.
      \ A translator MAY forward unicast packets\n   on behalf of a client but SHOULD
      NOT translate between multicast-to-\n   unicast flows towards the source without
      authenticating the source of\n   the feedback address information.\n"
    title: 8.2.  Encryption and Authentication Issues
  title: 8.  Mixer/Translator Issues
- contents:
  - "9.  Transmission Interval Calculation\n   The Control Traffic Bandwidth referred
    to in [1] is an arbitrary\n   amount that is intended to be supplied by a session-management\n
    \  application (e.g., SDR [21]) or decided based upon the bandwidth of a\n   single
    sender in a session.\n   The RTCP transmission interval calculation either remains
    the same as\n   in the original RTP specification [1] or uses the algorithm in
    [10]\n   when bandwidth modifiers have been specified for the session.\n"
  - contents:
    - "9.1.  Receiver RTCP Transmission\n   If the Distribution Source is operating
      in Simple Feedback Model\n   (which may be indicated in the corresponding session
      description for\n   the media session but which the receiver also notices from
      the\n   absence of RTCP RSI packets), a receiver MUST calculate the number of\n
      \  other members in a session based upon its own SSRC count, derived\n   from
      the forwarded Sender and Receiver Reports it receives.  The\n   receiver MUST
      calculate the average RTCP packet size from all the\n   RTCP packets it receives.\n
      \  If the Distribution Source is operating in Distribution Source\n   Feedback
      Summary Model, the receiver MUST use either the group size\n   field and the
      average RTCP packet size field or the Receiver\n   Bandwidth field from the
      respective sub-report blocks appended to the\n   RSI packet.\n   A receiver
      uses these values as input to the calculation of the\n   deterministic calculated
      interval as per [1] and [10].\n"
    title: 9.1.  Receiver RTCP Transmission
  - contents:
    - "9.2.  Distribution Source RTCP Transmission\n   If operating in Simple Feedback
      Model, the Distribution Source MUST\n   calculate the transmission interval
      for its Receiver Reports and\n   associated RTCP packets, based upon the above
      control traffic\n   bandwidth, and MUST count itself as RTP receiver.  Receiver
      Reports\n   will be forwarded as they arrive without further consideration.
      \ The\n   Distribution Source MAY choose to validate that all or selected\n
      \  receivers roughly adhere to the calculated bandwidth constraints and\n   MAY
      choose to drop excess packets for receivers that do not.  In all\n   cases,
      the average RTCP packet size is determined from the forwarded\n   Media Senders'
      and receivers' RTCP packets and from those originated\n   by the Distribution
      Source.\n   If operating in Distribution Source Feedback Summary Model, the\n
      \  Distribution Source does not share the forward RTCP bandwidth with\n   any
      of the receivers.  Therefore, the Distribution Source SHOULD use\n   the full
      RTCP bandwidth for its Receiver Reports and associated RTCP\n   packets, as
      well as RTCP RSI packets.  In this case, the average RTCP\n   packet size is
      only determined from the RTCP packets originated by\n   the Distribution Source.\n
      \  The Distribution Source uses these values as input to the calculation\n   of
      the deterministic calculated interval as per [1] and [10].\n"
    title: 9.2.  Distribution Source RTCP Transmission
  - contents:
    - "9.3.  Media Senders RTCP Transmission\n   In Simple Feedback Model, the Media
      Senders obtain all RTCP SRs and\n   RRs as they would in an ASM session, except
      that the packets are\n   forwarded by the Distribution Source.  They MUST perform
      their RTCP\n   group size estimate and calculation of the deterministic transmission\n
      \  interval as per [1] and [10].\n   In Distribution Source Feedback Summary
      Model, the Media Senders\n   obtain all RTCP SRs as they would in an ASM session.
      \ They receive\n   either RTCP RR reports as in ASM (in case these packets are
      forwarded\n   by the Distribution Source) or RSI packets containing summaries.
      \ In\n   the former case, they MUST perform their RTCP group size estimate and\n
      \  calculation of the deterministic transmission interval as per [1] and\n   [10].
      \ In the latter case, they MUST combine the information obtained\n   from the
      Sender Reports and the RSI packets to create a complete view\n   of the group
      size and the average RTCP packet size and perform the\n   calculation of the
      deterministic transmission interval, as per [1]\n   and [10], based upon these
      input values.\n"
    title: 9.3.  Media Senders RTCP Transmission
  - contents:
    - "9.4.  Operation in Conjunction with AVPF and SAVPF\n   If the RTP session is
      an AVPF session [15] or an SAVPF session [28]\n   (as opposed to a regular AVP
      [6] session), the receivers MAY modify\n   their RTCP report scheduling, as
      defined in [15].  Use of AVPF or\n   SAVPF does not affect the Distribution
      Source's RTCP transmission or\n   forwarding behavior.\n   It is RECOMMENDED
      that a Distribution Source and possible separate\n   Feedback Target(s) be configured
      to forward AVPF/SAVPF-specific RTCP\n   packets in order to not counteract the
      damping mechanism built into\n   AVPF; optionally, they MAY aggregate the feedback
      information from\n   the receivers as per Section 7.2.2.  If only generic feedback
      packets\n   that are understood by the Distribution Source and that can easily
      be\n   aggregated are in use, the Distribution MAY combine several incoming\n
      \  RTCP feedback packets and forward the aggregate along with its next\n   RTCP
      RR/RSI packet.  In any case, the Distribution Source and\n   Feedback Target(s)
      SHOULD minimize the extra delay when forwarding\n   feedback information, but
      the Distribution Source MUST stay within\n   its RTCP bandwidth constraints.\n
      \  In the event that specific APP packets without a format and\n   summarization
      mechanism understood by the Feedback Target(s) and/or\n   the Distribution Source
      are to be used, it is RECOMMENDED that such\n   packets are forwarded with minimal
      delay.  Otherwise, the capability\n   of the receiver to send timely feedback
      messages is likely to be\n   affected.\n"
    title: 9.4.  Operation in Conjunction with AVPF and SAVPF
  title: 9.  Transmission Interval Calculation
- contents:
  - "10.  SDP Extensions\n   The Session Description Protocol (SDP) [5] is used as
    a means to\n   describe media sessions in terms of their transport addresses,\n
    \  codecs, and other attributes.  Signaling that RTCP feedback will be\n   provided
    via unicast, as specified in this document, requires another\n   session parameter
    in the session description.  Similarly, other SSM\n   RTCP feedback parameters
    need to be provided, such as the\n   summarization model at the sender and the
    target unicast address to\n   which to send feedback information.  This section
    defines the SDP\n   parameters that are needed by the proposed mechanisms in this\n
    \  document (and that have been registered with IANA).\n"
  - contents:
    - "10.1.  SSM RTCP Session Identification\n   A new session-level attribute MUST
      be used to indicate the use of\n   unicast instead of multicast feedback: \"rtcp-unicast\".\n
      \  This attribute uses one parameter to specify the model of operation.\n   An
      optional set of parameters specifies the behavior for RTCP packet\n   types
      (and subtypes).\n   rtcp-unicast:reflection\n      This attribute MUST be used
      to indicate the \"Simple Feedback\"\n      model of operation where packet reflection
      is used by the\n      Distribution Source (without further processing).\n   rtcp-unicast:rsi
      *(SP <processing>:<rtcp-type>])\n      This attribute MUST be used to indicate
      the \"Distribution Source\n      Feedback Summary\" model of operation.  In
      this model, a list or\n      parameters may be used to explicitly specify how
      RTCP packets\n      originated by receivers are handled.  Options for processing
      a\n      given RTCP packet type are:\n      aggr:    The Distribution Source
      has means for aggregating the\n               contents of the RTCP packets and
      will do so.\n      forward: The Distribution Source will forward the RTCP packet\n
      \              unchanged.\n      term:    The Distribution Source will terminate
      the RTCP packet.\n   The default rules applying if no parameters are specified
      are as\n   follows:\n      RR and SDES packets MUST be aggregated and MUST lead
      to RSI\n      packets being generated.  All other RTP packets MUST be terminated\n
      \     at the Distribution Source (or Feedback Target(s)).\n      The SDP description
      needs only to specify deviations from the\n      default rules.  Aggregation
      of RR packets and forwarding of SR\n      packets MUST NOT be changed.\n   The
      token for the new SDP attribute is \"rtcp-unicast\" and the formal\n   SDP ABNF
      syntax for the new attribute value is as follows:\n   att-value  = \"reflection\"\n
      \             / \"rsi\" *(SP rsi-rule)\n   rsi-rule   = processing \":\" rtcp-type\n
      \  processing = \"aggr\" / \"forward\" / \"term\" / token ;keep it extensible\n
      \  rtcp-type  = 3*3DIGIT    ;the RTCP type (192, 193, 202--209)\n"
    title: 10.1.  SSM RTCP Session Identification
  - contents:
    - "10.2.  SSM Source Specification\n   In a Source-Specific Multicast RTCP session,
      the address of the\n   Distribution Source needs to be indicated both for source-specific\n
      \  joins to the multicast group and for addressing unicast RTCP packets\n   on
      the backchannel from receivers to the Distribution Source.\n   This is achieved
      by following the proposal for SDP source filters\n   documented in [4].  According
      to the specification, only the\n   inclusion model (\"a=source-filter:incl\")
      MUST be used for SSM RTCP.\n   There SHOULD be exactly one \"a=source-filter:incl\"
      attribute listing\n   the address of the Distribution Source.  The RTCP port
      MUST be\n   derived from the m= line of the media description.\n   An alternative
      Feedback Target Address and port MAY be supplied using\n   the SDP RTCP attribute
      [7], e.g., a=rtcp:<port> IN IP4 192.0.2.1.\n   This attribute only defines the
      transport address of the Feedback\n   Target and does not affect the SSM group
      specification for media\n   stream reception.\n   Two \"source-filter\" attributes
      MAY be present to indicate an IPv4 and\n   an IPv6 representation of the same
      Distribution Source.\n"
    title: 10.2.  SSM Source Specification
  - contents:
    - "10.3.  RTP Source Identification\n   The SSRC information for the Media Sender(s)
      MAY be communicated\n   explicitly out of band (i.e., outside the RTP session).
      \ One option\n   for doing so is the Session Description Protocol (SDP) [5].
      \ If such\n   an indication is desired, the \"ssrc\" attribute [12] MUST be
      used for\n   this purpose.  As per [12], the \"cname\" Source Attribute MUST
      be\n   present.  Further Source Attributes MAY be specified as needed.\n   If
      used in an SDP session description of an RTCP-SSM session, the\n   ssrc MUST
      contain the SSRC intended to be used by the respective\n   Media Sender and
      the cname MUST equal the CNAME for the Media Sender.\n   If present, the role
      SHOULD indicate the function of the RTP entity\n   identified by this line;
      presently, only the \"media-sender\" role is\n   defined.\n   Example:\n       a=ssrc:314159
      cname:iptv-sender@example.com\n   In the above example, the Media Sender is
      identified to use the SSRC\n   identifier 314159 and the CNAME iptv-sender@example.com.\n"
    title: 10.3.  RTP Source Identification
  title: 10.  SDP Extensions
- contents:
  - "11.  Security Considerations\n   The level of security provided by the current
    RTP/RTCP model MUST NOT\n   be diminished by the introduction of unicast feedback
    to the source.\n   This section identifies the security weaknesses introduced
    by the\n   feedback mechanism, potential threats, and level of protection that\n
    \  MUST be adopted.  Any suggestions on increasing the level of security\n   provided
    to RTP sessions above the current standard are RECOMMENDED\n   but OPTIONAL.  The
    final section outlines some security frameworks\n   that are suitable to conform
    to this specification.\n"
  - contents:
    - "11.1.  Assumptions\n   RTP/RTCP is a protocol that carries real-time multimedia
      traffic, and\n   therefore a main requirement is for any security framework
      to\n   maintain as low overhead as possible.  This includes the overhead of\n
      \  different applications and types of cryptographic operations as well\n   as
      the overhead to deploy or to create security infrastructure for\n   large groups.\n
      \  Although the distribution of session parameters (typically encoded as\n   SDP
      objects) through the Session Announcement Protocol (SAP) [22],\n   email, or
      the web is beyond the scope of this document, it is\n   RECOMMENDED that the
      distribution method employs adequate security\n   measures to ensure the integrity
      and authenticity of the information.\n   Suitable solutions that meet the security
      requirements outlined here\n   are included at the end of this section.\n   In
      practice, the multicast and group distribution mechanism, e.g.,\n   the SSM
      routing tree, is not immune to source IP address spoofing or\n   traffic snooping;
      however, such concerns are not discussed here.  In\n   all the following discussions,
      security weaknesses are addressed from\n   the transport level or above.\n"
    title: 11.1.  Assumptions
  - contents:
    - "11.2.  Security Threats\n   Attacks on media distribution and the feedback
      architecture proposed\n   in this document may take a variety of forms.  A detailed
      outline of\n   the types of attacks follows:\n   a) Denial of Service (DoS)\n
      \     DoS is a major area of concern.  Due to the nature of the\n      communication
      architecture, a DoS can be generated in a number of\n      ways by using the
      unicast feedback channel to the attacker's\n      advantage.\n   b) Packet Forgery\n
      \     Another potential area for attack is packet forgery.  In\n      particular,
      it is essential to protect the integrity of certain\n      influential packets
      since compromise could directly affect the\n      transmission characteristics
      of the whole group.\n   c) Session Replay\n      The potential for session recording
      and subsequent replay is an\n      additional concern.  An attacker may not
      actually need to\n      understand packet content but simply have the ability
      to record\n      the data stream and, at a later time, replay it to any receivers\n
      \     that are listening.\n   d) Eavesdropping on a Session\n      The consequences
      of an attacker eavesdropping on a session already\n      constitutes a security
      weakness; in addition, eavesdropping might\n      facilitate other types of
      attacks and is therefore considered a\n      potential threat.  For example,
      an attacker might be able to use\n      the eavesdropped information to perform
      an intelligent DoS attack.\n"
    title: 11.2.  Security Threats
  - contents:
    - "11.3.  Architectural Contexts\n   To better understand the requirements of
      the solution, the threats\n   outlined above are addressed for each of the three
      communication\n   contexts:\n   a) Source-to-Receiver Communication\n      The
      downstream communication channel, from the source to the\n      receivers, is
      critical to protect since it controls the behavior\n      of the group; it conveys
      the bandwidth allocation for each\n      receiver, and hence the rate at which
      the RTCP traffic is unicast,\n      directly back to the source.  All traffic
      that is distributed over\n      the downstream channel is generated by a single
      source.  Both the\n      RTP data stream and the RTCP control data from the
      source are\n      included in this context, with the RTCP data generated by
      the\n      source being indirectly influenced by the group feedback.\n      The
      downstream channel is vulnerable to the four types of attack\n      outlined
      above.  The denial of service attack is possible but less\n      of a concern
      than the other types.  The worst case effect of DoS\n      would be the transmission
      of large volumes of traffic over the\n      distribution channel, with the potential
      to reach every receiver\n      but only on a one-to-one basis.  Consequently,
      this threat is no\n      more pronounced than the current multicast ASM model.
      \ The real\n      danger of denial of service attacks in this context comes\n
      \     indirectly via compromise of the source RTCP traffic.  If\n      receivers
      are provided with an incorrect group size estimate or\n      bandwidth allowance,
      the return traffic to the source may create a\n      distributed DoS effect
      on the source.  Similarly, an incorrect\n      feedback address -- whether as
      a result of a malicious attack or\n      by mistake, e.g., an IP address configuration
      error (e.g., typing)\n      -- could directly create a denial of service attack
      on another\n      host.\n      An additional concern relating to Denial of service
      attacks would\n      come indirectly through the generation of fake BYE packets,\n
      \     causing the source to adjust the advertised group size.  A\n      Distribution
      Source MUST follow the correct rules for timing out\n      members in a session
      prior to reporting a change in the group\n      size, which allows the authentic
      SSRC sufficient time to continue\n      to report and, consequently, cancel
      the fake BYE report.\n      The danger of packet forgery in the worst case may
      be to\n      maliciously instigate a denial of service attack, e.g., if an\n
      \     attacker were capable of spoofing the source address and injecting\n      incorrect
      packets into the data stream or intercepting the source\n      RTCP traffic
      and modifying the fields.\n      The replay of a session would have the effect
      of recreating the\n      receiver feedback to the source address at a time when
      the source\n      is not expecting additional traffic from a potentially large\n
      \     group.  The consequence of this type of attack may be less\n      effective
      on its own, but in combination with other attacks might\n      be serious.\n
      \     Eavesdropping on the session would provide an attacker with\n      information
      on the characteristics of the source-to-receiver\n      traffic, such as the
      frequency of RTCP traffic.  If RTCP traffic\n      is unencrypted, this might
      also provide valuable information on\n      characteristics such as group size,
      Media Source SSRC(s), and\n      transmission characteristics of the receivers
      back to the source.\n   b) Receiver-to-Distribution-Source Communication\n      The
      second context is the return traffic from the group to the\n      Distribution
      Source.  This traffic should only consist of RTCP\n      packets and should
      include Receiver Reports, SDES information, BYE\n      reports, extended reports
      (XR), feedback messages (RTPFB, PSFB)\n      and possibly application-specific
      packets.  The effects of\n      compromise on a single or subset of receivers
      are not likely to\n      have as great an impact as in context (a); however,
      much of the\n      responsibility for detecting compromise of the source data
      stream\n      relies on the receivers.\n      The effects of compromise of critical
      Distribution Source control\n      information can be seriously amplified in
      the present context.  A\n      large group of receivers may unwittingly generate
      a distributed\n      DoS attack on the Distribution Source in the event that
      the\n      integrity of the source RTCP channel has been compromised and the\n
      \     compromise is not detected by the individual receivers.\n      An attacker
      capable of instigating a packet forgery attack could\n      introduce false
      RTCP traffic and create fake SSRC identifiers.\n      Such attacks might slow
      down the overall control channel data rate\n      since an incorrect perception
      of the group size may be created.\n      Similarly, the creation of fake BYE
      reports by an attacker would\n      cause some group size instability, but should
      not be effective as\n      long as the correct timeout rules are applied by
      the source in\n      removing SSRC entries from its database.\n      A replay
      attack on receiver return data to the source would have\n      the same implications
      as the generation of false SSRC identifiers\n      and RTCP traffic to the source.
      \ Therefore, ensuring authenticity\n      and freshness of the data source is
      important.\n      Eavesdropping in this context potentially provides an attacker\n
      \     with a great deal of potentially personal information about a\n      large
      group of receivers available from SDES packets.  It would\n      also provide
      an attacker with information on group traffic-\n      generation characteristics
      and parameters for calculating\n      individual receiver bandwidth allowances.\n
      \  c) Receiver-to-Feedback-Target Communication\n      The third context is
      the return traffic from the group to the\n      Feedback Target.  It suffers
      from the same threats as the\n      receiver-to-source context, with the difference
      being that now a\n      large group of receivers may unwittingly generate a
      distributed\n      DoS (DDos) attack on the Feedback Target, where it is impossible\n
      \     to discern if the DDoS is deliberate or due merely to a\n      misconfiguration
      of the Feedback Target Address.  While deliberate\n      attacks can be mitigated
      by properly authenticating messages that\n      communicate the Feedback Target
      Address (i.e., the SDP session\n      description and the Feedback Target Address
      sub-report block\n      carried in RTCP), a misconfigured address will originate
      from an\n      authenticated source and hence cannot be prevented using security\n
      \     mechanisms.\n      Furthermore, the Feedback Target is unable to communicate
      its\n      predicament with either the Distribution Source or the session\n
      \     receivers.  From the feedback packets received, the Feedback\n      Target
      cannot tell either which SSM multicast group the feedback\n      belongs to
      or the Distribution Source, making further analysis and\n      suppression difficult.
      \ The Feedback Target may not even support\n      RTCP or listen on the port
      number in question.\n      Note that because the DDoS occurs inside of the RTCP
      session and\n      because the unicast receivers adhere to transmission interval\n
      \     calculations ([1], [10]), the bandwidth misdirected toward the\n      Feedback
      Target in the misconfigured case will be limited to a\n      percentage of the
      session bandwidth, i.e., the Control Traffic\n      Bandwidth established for
      the session.\n"
    title: 11.3.  Architectural Contexts
  - contents:
    - "11.4.  Requirements in Each Context\n   To address these threats, this section
      presents the security\n   requirements for each context.\n   a) The main threat
      in the source-to-receiver context concerns denial\n      of service attacks
      through possible packet forgery.  The forgery\n      may take the form of interception
      and modification of packets from\n      the source, or it may simply inject
      false packets into the\n      distribution channel.  To combat these attacks,
      data integrity and\n      source authenticity MUST be applied to source traffic.
      \ Since the\n      consequences of eavesdropping do not affect the operation
      of the\n      protocol, confidentiality is not a requirement in this context.\n
      \     However, without confidentiality, access to personal and group\n      characteristics
      information would be unrestricted to an external\n      listener.  Therefore,
      confidentiality is RECOMMENDED.\n   b) The threats in the receiver-to-source
      context concern the same\n      kinds of attacks, but are considered less important
      than the\n      downstream traffic compromise.  All the security weaknesses
      are\n      also applicable to the current RTP/RTCP security model, and\n      therefore
      only recommendations towards protection from compromise\n      are made.  Data
      integrity is RECOMMENDED to ensure that\n      interception and modification
      of an individual receiver's RTCP\n      traffic can be detected.  This would
      protect against the false\n      influence of group control information and
      the potentially more\n      serious compromise of future services provided by
      the distribution\n      functionality.  In order to ensure security, data integrity
      and\n      authenticity of receiver traffic is therefore also RECOMMENDED.\n
      \     With respect to data confidentiality, the same situation applies\n      as
      in the first context, and it is RECOMMENDED that precautions be\n      taken
      to protect the privacy of the data.\n   c) The threats to the receiver-to-feedback-target
      context are similar\n      to those in the receiver-to-source context, and thus
      the\n      recommendations to protect against them are similar.\n      However,
      there are a couple situations with broader issues to\n      solve, which are
      beyond the scope of this document.\n      1. An endpoint experiencing DDoS or
      the side effects of a\n         misconfigured RTCP session may not even be a
      participant in the\n         session, i.e., may not be listening on the respective
      port\n         number and may even support RTCP, so it will be unable to react\n
      \        within RTCP.  Determining that there is a problem will be up to\n         network
      administrators and, possibly, anti-malware software\n         that can perform
      correlation across receiver nodes.\n      2. With misconfiguration, unfortunately
      the normally desirable\n         usage of SRTP and SRTCP becomes undesirable.
      \ Because the\n         packet content is encrypted, neither the misconfigured
      Feedback\n         Target nor the network administrator have the ability to\n
      \        determine the root cause of the traffic.\n      In the case where the
      misconfigured Feedback Target happens to be\n      a node participating in the
      session or is an RTCP-enabled node,\n      the Feedback Target Address block
      provides a dynamic mechanism for\n      the Distribution Source to signal an
      alternative unicast RTCP\n      feedback address to the receivers.  As this
      type of packet MUST be\n      included in every RTCP packet originated by the
      Distribution\n      Source, all receivers would be able to obtain the corrected\n
      \     Feedback Target information.  In this manner, receiver behavior\n      should
      remain consistent even in the face of packet loss or when\n      there are late-session
      arrivals.  The only caveat is that the\n      misconfigured Feedback Target
      is largely uninvolved in the repair\n      of this situation and thus relies
      on others for the detection of\n      the problem.\n   An additional security
      consideration, which is not a component of\n   this specification but which
      has a direct influence upon the general\n   security, is the origin of the session-initiation
      data.  This\n   involves the SDP parameters that are communicated to the members\n
      \  prior to the start of the session via channels such as an HTTP\n   server,
      email, SAP, or other means.  It is beyond the scope of this\n   document to
      place any strict requirements on the external\n   communication of such information;
      however, suitably secure SDP\n   communication approaches are outlined in Section
      11.7.\n"
    title: 11.4.  Requirements in Each Context
  - contents:
    - "11.5.  Discussion of Trust Models\n   As identified in the previous sections,
      source authenticity is a\n   fundamental requirement of the protocol.  However,
      it is important to\n   also clarify the model of trust that would be acceptable
      to achieve\n   this requirement.  There are two fundamental models that apply
      in\n   this instance:\n   a) The shared-key model, where all authorized group
      members share the\n      same key and can equally encrypt/decrypt the data.
      \ This method\n      assumes that an out-of-band method is applied to the distribution\n
      \     of the shared group key, ensuring that every key-holder is\n      individually
      authorized to receive the key and, in the event of\n      member departures
      from the group, a re-keying exercise can occur.\n      The advantage of this
      model is that the costly processing\n      associated with one-way key-authentication
      techniques is avoided,\n      as well as the need to execute additional cipher
      operations with\n      alternative key sets on the same data set, e.g., in the
      event that\n      data confidentiality is also applied.  The disadvantage is
      that,\n      for very large groups where the receiver set becomes effectively\n
      \     untrusted, a shared key does not offer much protection.\n   b) The public-key
      authentication model, using cryptosystems such as\n      RSA-based or PGP authentication,
      provides a more secure method of\n      source authentication at the expense
      of generating higher\n      processing overhead.  This is typically not recommended
      for real-\n      time data streams but, in the case of RTCP reports, which are\n
      \     distributed with a minimum interval of 5 seconds, this may be a\n      viable
      option (the processing overhead might still be too great\n      for small, low-powered
      devices and should therefore be considered\n      with caution).  Wherever possible,
      however, the use of public key\n      source authentication is preferable to
      the shared key model\n      identified above.\n   As concerns requirements for
      protocol acceptability, either model is\n   acceptable although it is RECOMMENDED
      that the more secure public-\n   key-based options be applied wherever possible.\n"
    title: 11.5.  Discussion of Trust Models
  - contents:
    - "11.6.  Recommended Security Solutions\n   This section presents some existing
      security mechanisms that are\n   RECOMMENDED to suitably address the requirements
      outlined in Section\n   11.5.  This is only intended as a guideline and it is
      acknowledged\n   that there are other solutions that would also be suitable
      to comply\n   with the specification.\n"
    - contents:
      - "11.6.1.  Secure Distribution of SDP Parameters\n   a) SAP, HTTPS, Email --
        Initial distribution of the SDP parameters\n      for the session SHOULD use
        a secure mechanism such as the SAP\n      authentication framework, which
        allows an authentication\n      certificate to be attached to the session
        announcements.  Other\n      methods might involve HTTPS or signed email content
        from a trusted\n      source.  However, some more commonly used techniques
        for\n      distributing session information and starting media streams are\n
        \     the Real-Time Streaming Protocol (RTSP) [25] and SIP [14].\n   b) RTSP
        -- RTSP provides a client- or server-initiated stream control\n      mechanism
        for real-time multimedia streams.  The session\n      parameters are conveyed
        using SDP syntax and may adopt standard\n      HTTP authentication mechanisms
        in combination with suitable\n      network (e.g., IPsec)- or transport (e.g.,
        Transport Layer\n      Security (TLS))-level security.\n   c) SIP -- A typical
        use of SIP involving a unicast feedback\n      identifier might be a client
        wishing to dynamically join a multi-\n      party call on a multicast address
        using unicast RTCP feedback.\n      The client would be required to authenticate
        the SDP session\n      descriptor information returned by the SIP server.
        \ The\n      recommended method for this, as outlined in the SIP specification\n
        \     [14], is to use an S/MIME message body containing the session\n      parameters
        signed with an acceptable certificate.\n   For the purposes of this profile,
        it is acceptable to use any\n   suitably secure authentication mechanism that
        establishes the\n   identity and integrity of the information provided to
        the client.\n"
      title: 11.6.1.  Secure Distribution of SDP Parameters
    - contents:
      - "11.6.2.  Suitable Security Solutions for RTP Sessions with Unicast\n         Feedback\n
        \  a) SRTP -- SRTP [3] is the recommended Audio/Video Transport (AVT)\n      security
        framework for RTP sessions.  It specifies the general\n      packet formats
        and cipher operations that are used and provides\n      the flexibility to
        select different stream ciphers based on\n      preference/requirements.  It
        can provide confidentiality of the\n      RTP and RTCP packets as well as
        protection against integrity\n      compromise and replay attacks.  It provides
        authentication of the\n      data stream using the shared-key trust model.
        \ Any suitable key-\n      distribution mechanism can be used in parallel
        to the SRTP\n      streams.\n   b) IPSEC -- A more general group security
        profile that might be used\n      is the Group Domain of Interpretation [23],
        which defines the\n      process of applying IPSec mechanisms to multicast
        groups.  This\n      requires the use of the Encapsulating Security Payload
        (ESP) in\n      tunnel mode as the framework and it provides the capability
        to\n      authenticate -- either using a shared key or individually through\n
        \     public-key mechanisms.  It should be noted that using IPSec would\n
        \     break the 'transport-independent' condition of RTP and would\n      therefore
        not be useable for anything other than IP-based\n      communication.\n   c)
        TESLA - Timed Efficient Stream Loss-Tolerant Authentication\n      (TESLA)
        [24] is a scheme that provides a more flexible approach to\n      data authentication
        using time-based key disclosure.  The\n      authentication uses one-way,
        pseudo-random key functions based on\n      key chain hashes that have a short
        period of authenticity based on\n      the key disclosure intervals from the
        source.  As long as the\n      receiver can ensure that the encrypted packet
        is received prior to\n      the key disclosure by the source, which requires
        loose time\n      synchronization between source and receivers, it can prove
        the\n      authenticity of the packet.  The scheme does introduce a delay\n
        \     into the packet distribution/decryption phase due to the key\n      disclosure
        delay; however, the processing overhead is much lower\n      than other standard
        public-key mechanisms and therefore may be\n      more suited to small or
        energy-restricted devices.\n"
      title: 11.6.2.  Suitable Security Solutions for RTP Sessions with Unicast
    - contents:
      - "11.6.3.  Secure Key Distribution Mechanisms\n   a) MIKEY -- Multimedia Internet
        KEYing (MIKEY) [29] is the preferred\n      solution for SRTP sessions providing
        a shared group-key\n      distribution mechanism and intra-session rekeying
        facilities.  If\n      a partly protected communication channel exists, keys
        may also be\n      conveyed using SDP as per [27].\n   b) GSAKMP -- The Group
        Secure Association Key Management Protocol\n      (GSAKMP) is the general
        solution favored for Multicast Secure\n      group-key distribution.  It is
        the recommended key distribution\n      solution for Group Domain of Interpretation
        (GDOI) [RFC3547]\n      sessions.\n"
      title: 11.6.3.  Secure Key Distribution Mechanisms
    title: 11.6.  Recommended Security Solutions
  - contents:
    - "11.7.  Troubleshooting Misconfiguration\n   As noted above, the security mechanisms
      in place will not help in\n   case an authorized source spreads properly authenticated
      and\n   integrity-protected yet incorrect information about the Feedback\n   Target.
      \ In this case, the accidentally communicated Feedback Target\n   will receive
      RTCP packets from a potentially large group of receivers\n   -- the RTCP rate
      fortunately limited by the RTCP timing rules.\n   Yet, the RTCP packets do not
      provide much context information and, if\n   encrypted, do not provide any context,
      making it difficult for the\n   entity running (the network with) the Feedback
      Target to debug and\n   correct this problem, e.g., by tracking down and informing
      the origin\n   of the misconfiguration.\n   One suitable approach may be to
      provide explicit context information\n   in RTCP packets that would allow determining
      the source.  While such\n   an RTCP packet could be defined in this specification,
      it would be of\n   no use when using SRTP/SRTCP and encryption of RTCP reports.\n
      \  Therefore, and because the extensions in this document may not be the\n   only
      case that may face such a problem, it is desirable to find a\n   solution that
      is applicable to RTP at large.  Such mechanisms are for\n   further study in
      the AVT WG.\n"
    title: 11.7.  Troubleshooting Misconfiguration
  title: 11.  Security Considerations
- contents:
  - "12.  Backwards Compatibility\n   The use of unicast feedback to the source should
    not present any\n   serious backwards compatibility issues.  The RTP data streams
    should\n   remain unaffected, as should the RTCP packets from the Media\n   Sender(s)
    that continue to enable inter-stream synchronization in the\n   case of multiple
    streams.  The unicast transmission of RTCP data to a\n   source that does not
    have the ability to redistribute the traffic\n   either by simple reflection or
    through summaries could have serious\n   security implications, as outlined in
    Section 11, but would not\n   actually break the operation of RTP.  For RTP-compliant
    receivers\n   that do not understand the unicast mechanisms, the RTCP traffic
    may\n   still reach the group in the event that an ASM distribution network\n
    \  is used, in which case there may be some duplication of traffic due\n   to
    the reflection channel, but this should be ignored.  It is\n   anticipated, however,
    that typically the distribution network will\n   not enable the receiver to multicast
    RTCP traffic, in which case the\n   data will be lost and the RTCP calculations
    will not include those\n   receivers.  It is RECOMMENDED that any session that
    may involve non-\n   unicast-capable clients should always use the simple packet-\n
    \  reflection mechanism to ensure that the packets received can be\n   understood
    by all clients.\n"
  title: 12.  Backwards Compatibility
- contents:
  - "13.  IANA Considerations\n   The following contact information shall be used
    for all registrations\n   included here:\n     Contact:      Joerg Ott\n                   mail:
    jo@acm.org\n                   tel:  +358-9-470-22460\n   Based on the guidelines
    suggested in [2], a new RTCP packet format\n   has been registered with the RTCP
    Control Packet type (PT) Registry:\n     Name:           RSI\n     Long name:
    \     Receiver Summary Information\n     Value:          209\n     Reference:
    \     This document.\n   This document defines a substructure for RTCP RSI packets.
    \ A new\n   sub-registry has been set up for the sub-report block type (SRBT)\n
    \  values for the RSI packet, with the following registrations created\n   initially:\n
    \     Name:           IPv4 Address\n      Long name:      IPv4 Feedback Target
    Address\n      Value:          0\n      Reference:      This document.\n      Name:
    \          IPv6 Address\n      Long name:      IPv6 Feedback Target Address\n
    \     Value:          1\n      Reference:      This document.\n      Name:           DNS
    Name\n      Long name:      DNS Name indicating Feedback Target Address\n      Value:
    \         2\n      Reference:      This document.\n      Name:           Loss\n
    \     Long name:      Loss distribution\n      Value:          4\n      Reference:
    \     This document.\n      Name:           Jitter\n      Long name:      Jitter
    Distribution\n      Value:          5\n      Reference:      This document.\n
    \     Name:           RTT\n      Long name:      Round-trip time distribution\n
    \     Value:          6\n      Reference:      This document.\n      Name:           Cumulative
    loss\n      Long name:      Cumulative loss distribution\n      Value:          7\n
    \     Reference:      This document.\n      Name:           Collisions\n      Long
    name:      SSRC Collision list\n      Value:          8\n      Reference:      This
    document.\n      Name:           Stats\n      Long name:      General statistics\n
    \     Value:          10\n      Reference:      This document.\n      Name:           RTCP
    BW\n      Long name:      RTCP Bandwidth indication\n      Value:          11\n
    \     Reference:      This document.\n      Name:           Group Info\n      Long
    name:      RTCP Group and Average Packet size\n      Value:          12\n      Reference:
    \     This document.\n      The value 3 shall be reserved as a further way of
    specifying a\n      Feedback Target Address.  The value 3 MUST only be allocated
    for a\n      use defined in an IETF Standards Track document.\n      Further values
    may be registered on a first come, first served\n      basis.  For each new registration,
    it is mandatory that a\n      permanent, stable, and publicly accessible document
    exists that\n      specifies the semantics of the registered parameter as well
    as the\n      syntax and semantics of the associated sub-report block.  The\n
    \     general registration procedures of [5] apply.\n   In the registry for SDP
    parameters, the attribute named \"rtcp-\n   unicast\" has been registered as follows:\n
    \  SDP Attribute (\"att-field\"):\n     Attribute Name:     rtcp-unicast\n     Long
    form:          RTCP Unicast feedback address\n     Type of name:       att-field\n
    \    Type of attribute:  Media level only\n     Subject to charset: No\n     Purpose:
    \           RFC 5760\n     Reference:          RFC 5760\n     Values:             See
    this document.\n"
  title: 13.  IANA Considerations
- contents:
  - '14.  References

    '
  - contents:
    - "14.1.  Normative References\n   [1]  Schulzrinne, H., Casner, S., Frederick,
      R., and V. Jacobson,\n        \"RTP: A Transport Protocol for Real-Time Applications\",
      STD 64,\n        RFC 3550, July 2003.\n   [2]  Narten, T. and H. Alvestrand,
      \"Guidelines for Writing an IANA\n        Considerations Section in RFCs\",
      BCP 26, RFC 5226, May 2008.\n   [3]  Baugher, M., McGrew, D., Naslund, M., Carrara,
      E., and K.\n        Norrman, \"The Secure Real-time Transport Protocol (SRTP)\",
      RFC\n        3711, March 2004.\n   [4]  Quinn, B. and R. Finlayson, \"Session
      Description Protocol (SDP)\n        Source Filters\", RFC 4570, July 2006.\n
      \  [5]  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n        Description
      Protocol\", RFC 4566, July 2006.\n   [6]  Schulzrinne, H. and S. Casner, \"RTP
      Profile for Audio and Video\n        Conferences with Minimal Control\", STD
      65, RFC 3551, July 2003.\n   [7]  Huitema, C., \"Real Time Control Protocol
      (RTCP) attribute in\n        Session Description Protocol (SDP)\", RFC 3605,
      October 2003.\n   [8]  Meyer, D., Rockell, R., and G. Shepherd, \"Source-Specific\n
      \       Protocol Independent Multicast in 232/8\", BCP 120, RFC 4608,\n        August
      2006.\n   [9]  Holbrook, H., Cain, B., and B. Haberman, \"Using Internet Group\n
      \       Management Protocol Version 3 (IGMPv3) and Multicast Listener\n        Discovery
      Protocol Version 2 (MLDv2) for Source-Specific\n        Multicast\", RFC 4604,
      August 2006.\n   [10] Casner, S., \"Session Description Protocol (SDP) Bandwidth\n
      \       Modifiers for RTP Control Protocol (RTCP) Bandwidth\", RFC 3556,\n        July
      2003.\n   [11] Yergeau, F., \"UTF-8, a transformation format of ISO 10646\",
      STD\n        63, RFC 3629, November 2003.\n   [12] Lennox, J., Ott, J., and
      T. Schierl, \"Source-Specific Media\n        Attributes in the Session Description
      Protocol (SDP)\", RFC 5576,\n        June 2009.\n   [13] Bradner, S., \"Key
      words for use in RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC
      2119, March 1997.\n"
    title: 14.1.  Normative References
  - contents:
    - "14.2.  Informative References\n   [14] Rosenberg, J., Schulzrinne, H., Camarillo,
      G., Johnston, A.,\n        Peterson, J., Sparks, R., Handley, M., and E. Schooler,
      \"SIP:\n        Session Initiation Protocol\", RFC 3261, June 2002.\n   [15]
      Ott, J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,\n        \"Extended
      RTP Profile for Real-time Transport Control Protocol\n        (RTCP)-Based Feedback
      (RTP/AVPF)\", RFC 4585, July 2006.\n   [16] Pusateri, T., \"Distance Vector
      Multicast Routing Protocol\", Work\n        in Progress, October 2003.\n   [17]
      Fenner, B., Handley, M., Holbrook, H., and I. Kouvelas,\n        \"Protocol
      Independent Multicast - Sparse Mode (PIM-SM): Protocol\n        Specification
      (Revised)\", RFC 4601, August 2006.\n   [18] Adams, A., Nicholas, J., and W.
      Siadak, \"Protocol Independent\n        Multicast - Dense Mode (PIM-DM): Protocol
      Specification\n        (Revised)\", RFC 3973, January 2005.\n   [19] Bates,
      T., Chandra, R., Katz, D., and Y. Rekhter, \"Multiprotocol\n        Extensions
      for BGP-4\", RFC 4760, January 2007.\n   [20] Fenner, B., Ed., and D. Meyer,
      Ed., \"Multicast Source Discovery\n        Protocol (MSDP)\", RFC 3618, October
      2003.\n   [21] Session Directory Rendez-vous (SDR), developed at University\n
      \       College London by Mark Handley and the Multimedia Research\n        Group,
      http://www-mice.cs.ucl.ac.uk/multimedia/software/sdr/.\n   [22] Handley, M.,
      Perkins, C., and E. Whelan, \"Session Announcement\n        Protocol\", RFC
      2974, October 2000.\n   [23] Baugher, M., Weis, B., Hardjono, T., and H. Harney,
      \"The Group\n        Domain of Interpretation\", RFC 3547, July 2003.\n   [24]
      Perrig, A., Song, D., Canetti, R., Tygar, J., and B. Briscoe,\n        \"Timed
      Efficient Stream Loss-Tolerant Authentication (TESLA):\n        Multicast Source
      Authentication Transform Introduction\", RFC\n        4082, June 2005.\n   [25]
      Schulzrinne, H., Rao, A., and R. Lanphier, \"Real Time Streaming\n        Protocol
      (RTSP)\", RFC 2326, April 1998.\n   [26] Friedman, T., Ed., Caceres, R., Ed.,
      and A. Clark, Ed., \"RTP\n        Control Protocol Extended Reports (RTCP XR)\",
      RFC 3611, November\n        2003.\n   [27] Andreasen, F., Baugher, M., and D.
      Wing, \"Session Description\n        Protocol (SDP) Security Descriptions for
      Media Streams\", RFC\n        4568, July 2006.\n   [28] Ott, J. and E. Carrara,
      \"Extended Secure RTP Profile for Real-\n        time Transport Control Protocol
      (RTCP)-Based Feedback\n        (RTP/SAVPF)\", RFC 5124, February 2008.\n   [29]
      Arkko, J., Carrara, E., Lindholm, F., Naslund, M., and K.\n        Norrman,
      \"MIKEY: Multimedia Internet KEYing\", RFC 3830, August\n        2004.\n"
    title: 14.2.  Informative References
  title: 14.  References
- contents:
  - "Appendix A.  Examples for Sender-Side Configurations\n   This appendix describes
    a few common setups, focusing on the\n   contribution side, i.e., the communications
    between the Media\n   Sender(s) and the Distribution Source.  In all cases, the
    same\n   session description may be used for the distribution side as defined\n
    \  in the main part of this document.  This is because this\n   specification
    defines only the media stream setup between the\n   Distribution Source and the
    receivers.\n"
  - contents:
    - "A.1.  One Media Sender Identical to the Distribution Source\n   In the simplest
      case, the Distribution Source is identical to the\n   Media Sender as depicted
      in Figure 3.  Obviously, no further\n   configuration for the interaction between
      the Media Sender and the\n   Distribution Source is necessary.\n                          Source-specific\n
      \        +--------+          Multicast\n         |        |     +---------------->
      R(1)\n         |M   D S |     |                    |\n         |E   I O |  +--+
      \                   |\n         |D   S U |  |  |                    |\n         |I
      \  T R |  |  +-----------> R(2)   |\n         |A   R C |->+-----  :          |
      \   |\n         |  = I E |  |  +------> R(n-1) |    |\n         |S   B   |  |
      \ |          |    |    |\n         |E   U   |  +--+--> R(n)  |    |    |\n         |N
      \  T   |          |     |    |    |\n         |D   I   |<---------+     |    |
      \   |\n         |E   O   |<---------------+    |    |\n         |R   N   |<--------------------+
      \   |\n         |        |<-------------------------+\n         +--------+            Unicast\n
      \    Figure 3: Media Source == Distribution Source\n"
    title: A.1.  One Media Sender Identical to the Distribution Source
  - contents:
    - "A.2.  One Media Sender\n   In a slightly more complex scenario, the Media Sender
      and the\n   Distribution Source are separate entities running on the same or\n
      \  different machines.  Hence, the Media Sender needs to deliver the\n   media
      stream(s) to the Distribution Source.  This can be done either\n   via unicasting
      the RTP stream, via ASM multicast, or via SSM.  In\n   this case, the Distribution
      Source is responsible for forwarding the\n   RTP packets comprising the media
      stream and the RTCP Sender Reports\n   towards the receivers and conveying feedback
      from the receivers, as\n   well as from itself, to the Media Sender.\n   This
      scenario is depicted in Figure 4.  The communication setup\n   between the Media
      Sender and the Distribution Source may be\n   statically configured or SDP may
      be used in conjunction with some\n   signaling protocol to convey the session
      parameters.  Note that it is\n   a local configuration matter of the Distribution
      Source how to\n   associate a session between the Media Sender and itself (the\n
      \  Contribution session) with the corresponding session between itself\n   and
      the receivers (the Distribution session).\n                                      Source-specific\n
      \                       +-----+          Multicast\n                        |
      \    |     +----------------> R(1)\n                        | D S |     |                    |\n
      \                       | I O |  +--+                    |\n                        |
      S U |  |  |                    |\n        +--------+      | T R |  |  +----------->
      R(2)   |\n        | Media  |<---->| R C |->+-----  :          |    |\n        |
      Sender |      | I E |  |  +------> R(n-1) |    |\n        +--------+      |
      B   |  |  |          |    |    |\n                        | U   |  +--+--> R(n)
      \ |    |    |\n                        | T   |          |     |    |    |\n
      \                       | I   |<---------+     |    |    |\n                        |
      O   |<---------------+    |    |\n                        | N   |<--------------------+
      \   |\n                        |     |<-------------------------+\n                        +-----+
      \           Unicast\n           Contribution               Distribution\n             Session
      \                   Session\n         (unicast or ASM)                 (SSM)\n
      \    Figure 4: One Media Sender Separate from Distribution Source\n"
    title: A.2.  One Media Sender
  - contents:
    - "A.3.  Three Media Senders, Unicast Contribution\n   Similar considerations
      apply if three Media Senders transmit to an\n   SSM multicast group via the
      Distribution Source and individually send\n   their media stream RTP packets
      via unicast to the Distribution\n   Source.\n   In this case, the responsibilities
      of the Distribution Source are a\n   superset to the previous case; the Distribution
      Source also needs to\n   relay media traffic from each Media Sender to the receivers
      and to\n   forward (aggregated) feedback from the receivers to the Media\n   Senders.
      \ In addition, the Distribution Source relays RTCP packets\n   (SRs) from each
      Media Sender to the other two.\n   The configuration of the Media Senders is
      identical to the previous\n   case.  It is just the Distribution Source that
      must be aware that\n   there are multiple senders and then perform the necessary
      relaying.\n   The transport address for the RTP session at the Distribution
      Source\n   may be identical for all Media Senders (which may make correlation\n
      \  easier) or different addresses may be used.\n   This setup is depicted in
      Figure 5.\n                                   Source-specific\n                     +-----+
      \         Multicast\n     +--------+      |     |     +----------------> R(1)\n
      \    | Media  |<---->| D S |     |                    |\n     |Sender 1|      |
      I O |  +--+                    |\n     +--------+      | S U |  |  |                    |\n
      \                    | T R |  |  +-----------> R(2)   |\n     +--------+      |
      R C |->+-----  :          |    |\n     | Media  |<---->| I E |  |  +------>
      R(n-1) |    |\n     |Sender 2|      | B   |  |  |          |    |    |\n     +--------+
      \     | U   |  +--+--> R(n)  |    |    |\n                     | T   |          |
      \    |    |    |\n     +--------+      | I   |<---------+     |    |    |\n
      \    | Media  |<---->| O   |<---------------+    |    |\n     |Sender 3|      |
      N   |<--------------------+    |\n     +--------+      |     |<-------------------------+\n
      \                    +-----+            Unicast\n           Contribution               Distribution\n
      \            Session                    Session\n            (unicast)                    (SSM)\n
      \    Figure 5: Three Media Senders, Unicast Contribution\n"
    title: A.3.  Three Media Senders, Unicast Contribution
  - contents:
    - "A.4.  Three Media Senders, ASM Contribution Group\n   In this final example,
      the individual unicast contribution sessions\n   between the Media Senders and
      the Distribution Source are replaced by\n   a single ASM contribution group
      (i.e., a single common RTP session).\n   Consequently, all Media Senders receive
      each other's traffic by means\n   of IP-layer multicast and the Distribution
      Source no longer needs to\n   perform explicit forwarding between the Media
      Senders.  Of course,\n   the Distribution Source still forwards feedback information
      received\n   from the receivers (optionally as summaries) to the ASM contribution\n
      \  group.\n   The ASM contribution group may be statically configured or the\n
      \  necessary information can be communicated using a standard SDP\n   session
      description for a multicast session.  Again, it is up to the\n   implementation
      of the Distribution Source to properly associate the\n   ASM contribution session
      and the SSM distribution sessions.\n   Figure 6 shows this scenario.\n                    _
      \                  Source-specific\n                   / \\    +-----+          Multicast\n
      \    +--------+   |   |   |     |     +----------------> R(1)\n     | Media
      \ |<->| A |   | D S |     |                    |\n     |Sender 1|   | S |   |
      I O |  +--+                    |\n     +--------+   | M |   | S U |  |  |                    |\n
      \                 |   |   | T R |  |  +-----------> R(2)   |\n     +--------+
      \  | G |   | R C |->+-----  :          |    |\n     | Media  |<->| r |<->| I
      E |  |  +------> R(n-1) |    |\n     |Sender 2|   | o |   | B   |  |  |          |
      \   |    |\n     +--------+   | u |   | U   |  +--+--> R(n)  |    |    |\n                  |
      p |   | T   |          |     |    |    |\n     +--------+   |   |   | I   |<---------+
      \    |    |    |\n     | Media  |<->|   |   | O   |<---------------+    |    |\n
      \    |Sender 3|    \\_/    | N   |<--------------------+    |\n     +--------+
      \          |     |<-------------------------+\n                          +-----+
      \           Unicast\n              Contribution            Distribution\n                Session
      \                 Session\n                 (ASM)                   (SSM)\n
      \          Figure 6: Three Media Senders in ASM Group\n"
    title: A.4.  Three Media Senders, ASM Contribution Group
  title: Appendix A.  Examples for Sender-Side Configurations
- contents:
  - 'Appendix B.  Distribution Report Processing at the Receiver

    '
  - contents:
    - "B.1.  Algorithm\n   Example processing of Loss Distribution Values\n   X values
      represent the loss percentage.\n   Y values represent the number of receivers.\n
      \  Number of x values is the NDB value\n   xrange = Max Distribution Value(MaDV)
      - Min Distribution Value(MnDV)\n   First data point = MnDV,first ydata\n   then\n
      \  For each ydata => xdata += (MnDV + (xrange / NDB))\n"
    title: B.1.  Algorithm
  - contents:
    - "B.2.  Pseudo-Code\n   Packet Variables -> factor,NDB,MnDVL,MaDV\n   Code variables
      -> xrange, ydata[NDB],x,y\n   xrange = MaDV - MnDV\n   x = MnDV;\n   for(i=0;
      i<NDB; i++) {\n        y = (ydata[i] * factor);\n        /*OUTPUT x and y values*/\n
      \       x += (xrange / NDB);\n   }\n"
    title: B.2.  Pseudo-Code
  - contents:
    - "B.3.  Application Uses and Scenarios\n   Providing a distribution function
      in a feedback message has a number\n   of uses for different types of applications.
      \ Although this appendix\n   enumerates potential uses for the distribution
      scheme, it is\n   anticipated that future applications might benefit from it
      in ways\n   not addressed in this document.  Due to the flexible nature of the\n
      \  summarization format, future extensions may easily be added.  Some of\n   the
      scenarios addressed in this section envisage potential uses\n   beyond a simple
      SSM architecture, for example, single-source group\n   topologies where every
      receiver may in fact also be capable of\n   becoming the source.  Another example
      may be multiple SSM topologies,\n   which, when combined, make up a larger distribution
      tree.\n   A distribution of values is useful as input into any algorithm,\n
      \  multicast or otherwise, that could be optimized or tuned as a result\n   of
      having access to the feedback values for all group members.\n   Following is
      a list of example areas that might benefit from\n   distribution information:\n
      \  - The parameterization of a multicast Forward Error Correction (FEC)\n     algorithm.
      \ Given an accurate estimate of the distribution of\n     reported losses, a
      source or other distribution agent that does not\n     have a global view would
      be able to tune the degree of redundancy\n     built into the FEC stream.  The
      distribution might help to identify\n     whether the majority of the group
      is experiencing high levels of\n     loss, or whether in fact the high loss
      reports are only from a\n     small subset of the group.  Similarly, this data
      might enable a\n     receiver to make a more informed decision about whether
      it should\n     leave a group that includes a very high percentage of the worst-\n
      \    case reporters.\n   - The organization of a multicast data stream into
      useful layers for\n     layered coding schemes.  The distribution of packet
      losses and\n     delay would help to identify what percentage of members experience\n
      \    various loss and delay levels, and thus how the data stream\n     bandwidth
      might be partitioned to suit the group conditions.  This\n     would require
      the same algorithm to be used by both senders and\n     receivers in order to
      derive the same results.\n   - The establishment of a suitable feedback threshold.
      \ An application\n     might be interested to generate feedback values when
      above (or\n     below) a particular threshold.  However, determining an appropriate\n
      \    threshold may be difficult when the range and distribution of\n     feedback
      values is not known a priori.  In a very large group,\n     knowing the distribution
      of feedback values would allow a\n     reasonable threshold value to be established,
      and in turn would\n     have the potential to prevent message implosion if many
      group\n     members share the same feedback value.  A typical application might\n
      \    include a sensor network that gauges temperature or some other\n     natural
      phenomenon.  Another example is a network of mobile devices\n     interested
      in tracking signal power to assist with hand-off to a\n     different distribution
      device when power becomes too low.\n   - The tuning of Suppression algorithms.
      \ Having access to the\n     distribution of round-trip times, bandwidth, and
      network loss would\n     allow optimization of wake-up timers and proper adjustment
      of the\n     Suppression interval bounds.  In addition, biased wake-up functions\n
      \    could be created not only to favor the early response from more\n     capable
      group members but also to smooth out responses from\n     subsequent respondents
      and to avoid bursty response traffic.\n   - Leader election among a group of
      processes based on the maximum or\n     minimum of some attribute value.  Knowledge
      of the distribution of\n     values would allow a group of processes to select
      a leader process\n     or processes to act on behalf of the group.  Leader election
      can\n     promote scalability when group sizes become extremely large.\n"
    title: B.3.  Application Uses and Scenarios
  - contents:
    - "B.4.  Distribution Sub-Report Creation at the Source\n   The following example
      demonstrates two different ways to convey loss\n   data using the generic format
      of a Loss sub-report block (Section\n   7.1.4).  The same techniques could also
      be applied to representing\n   other distribution types.\n   1) The first method
      attempts to represent the data in as few bytes as\n      possible.\n   2) The
      second method conveys all values without providing any savings\n      in bandwidth.\n
      \  Data Set\n   X values indicate loss percentage reported; Y values indicate
      the\n   number of receivers reporting that loss percentage.\n      X -  0  |
      \ 1  | 2 |  3   |   4  |  5   |  6   |  7   |  8  |  9\n      Y - 1000| 800
      | 6 | 1800 | 2600 | 3120 | 2300 | 1100 | 200 | 103\n      X - 10 | 11 | 12 |
      13 | 14 | 15 | 16 | 17 | 18 | 19\n      Y - 74 | 21 | 30 | 65 | 60 | 80 |  6
      |  7 |  4 |  5\n      X - 20 | 21 | 22  |  23  |  24  | 25  | 26  | 27  | 28
      \ | 29\n      Y - 2  | 10 | 870 | 2300 | 1162 | 270 | 234 | 211 | 196 | 205\n
      \     X - 30  | 31  | 32  | 33 | 34 | 35 | 36 | 37 | 38 | 39\n      Y - 163
      | 174 | 103 | 94 | 76 | 52 | 68 | 79 | 42 | 4\n   Constant value\n   Due to
      the size of the multiplicative factor field being 4 bits, the\n   maximum multiplicative
      value is 15.\n   The distribution type field of this packet would be value 1
      since it\n   represents loss data.\n   Example: 1st Method\n      Description\n
      \     The minimal method of conveying data, i.e., small amount of bytes\n      used
      to convey the values.\n      Algorithm\n      Attempt to fit the data set into
      a small sub-report size, selected\n      length of 8 octets\n      Can we split
      the range (0 - 39) into 16 4-bit values?  The largest\n      bucket value would,
      in this case, be the bucket for X values 5 -\n      7.5, the sum of which is
      5970.  An MF value of 9 will generate a\n      multiplicative factor of 2^9,
      or 512 -- which, multiplied by the\n      max bucket value, produces a maximum
      real value of 7680.\n      The packet fields will contain the values:\n      Header
      distribution Block\n      Distribution Type:                       1\n      Number
      of Data Buckets:                  16\n      Multiplicative Factor:                   9\n
      \     Packet Length field:                     5 (5 * 4 => 20 bytes)\n      Minimum
      Data Value:                      0\n      Maximum Data Value:                      39\n
      \     Data Bucket values:                      (each value is 16-bits)\n      Results,
      4-bit buckets:\n         X - 0 - 2.5 | 2.5 - 5 | 5 - 7.5 | 7.5 - 10\n        (Y
      -   1803  |   4403  |   5970  |   853 )  ACTUAL\n         Y -    4    |    9
      \   |    12   |    2\n         X - 10 - 12.5 | 12.5 - 15 | 15 - 17.5 | 17.5
      - 20\n        (Y -     110   |    140    |    89.5   |    12.5)  ACTUAL\n         Y
      -      0    |     0     |     0     |      0\n         X - 20 - 22.5 | 22.5
      - 25 | 25 - 27.5 | 27.5 - 30\n        (Y -    447    |    3897   |    609.5
      \ |   506.5)  ACTUAL\n         Y -     1     |     8     |      1    |     1\n
      \        X - 30 - 32.5 | 32.5 - 35 | 35 - 37.5 | 37.5 - 40\n        (Y -   388.5
      \  |    221.5  |   159.5   |    85.5)  ACTUAL\n         Y -    1      |      0
      \   |     0     |     0\n   Example: 2nd Method\n      Description\n      This
      demonstrates the most accurate method for representing the\n      data set.
      \ This method doesn't attempt to optimise any values.\n      Algorithm\n      Identify
      the highest value and select buckets large enough to\n      convey the exact
      values, i.e., no multiplicative factor.\n      The highest value is 3120.  This
      requires 12 bits (closest 2 bit\n      boundary) to represent, therefore it
      will use 60 bytes to\n      represent the entire distribution.  This is within
      the max packet\n      size; therefore, all data will fit within one sub-report
      block.\n      The multiplicative value will be 1.\n      The packet fields will
      contain the values:\n      Header Distribution Block\n      Distribution Type:
      \                       1\n      Number of Data Buckets:                   40\n
      \     Multiplicative Factor:                    0\n      Packet Length field:
      \                     18 (18 * 4 => 72 bytes)\n      Minimum Loss Value:                       0\n
      \     Maximum Loss Value:                       39\n      Bucket values are
      the same as the initial data set.\n      Result\n      Selecting one of the
      three methods outlined above might be done by\n      a congestion parameter
      or by user preference.  The overhead\n      associated with processing the packets
      is likely to differ very\n      little between the techniques.  The savings
      in bandwidth are\n      apparent, however, using 20, 52, and 72 octets respectively.\n
      \     These values would vary more widely for a larger data set with\n      less
      correlation between results.\n"
    title: B.4.  Distribution Sub-Report Creation at the Source
  title: Appendix B.  Distribution Report Processing at the Receiver
- contents:
  - "Acknowledgements\n   The authors would like to thank Magnus Westerlund, Dave
    Oran, Tom\n   Taylor, and Colin Perkins for detailed reviews and valuable comments.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Joerg Ott\n   Aalto University\n   School of Science and
    Technology\n   Department of Communications and Networking\n   PO Box 13000\n
    \  FIN-00076 Aalto\n   EMail: jo@acm.org\n   Julian Chesterfield\n   University
    of Cambridge\n   Computer Laboratory,\n   15 JJ Thompson Avenue\n   Cambridge\n
    \  CB3 0FD\n   UK\n   EMail: julianchesterfield@cantab.net\n   Eve Schooler\n
    \  Intel Research / CTL\n   MS RNB6-61\n   2200 Mission College Blvd.\n   Santa
    Clara, CA, USA 95054-1537\n   EMail: eve_schooler@acm.org\n"
  title: Authors' Addresses
