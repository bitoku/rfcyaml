- title: __initial_text__
  contents:
  - "   NFS Version 2 and Version 3 Security Issues and the NFS Protocol's\n     \
    \              Use of RPCSEC_GSS and Kerberos V5\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memorandum clarifies various security issues involving the\
    \ NFS\n   protocol (Version 2 and Version 3 only) and then describes how the\n\
    \   Version 2 and Version 3 of the NFS protocol use the RPCSEC_GSS\n   security\
    \ flavor protocol and Kerberos V5.  This memorandum is\n   provided so that people\
    \ can write compatible implementations.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 2\n   1.1.  Overview of RPC Security Architecture  . . . . . . .\
    \ . . . . 3\n   2.  Overview of NFS Security . . . . . . . . . . . . . . . . .\
    \ . . 3\n   2.1.  Port Monitoring  . . . . . . . . . . . . . . . . . . . . . .\
    \ 3\n   2.1.1.  MOUNT Protocol . . . . . . . . . . . . . . . . . . . . . . 4\n\
    \   2.2.  RPC Security Flavors . . . . . . . . . . . . . . . . . . . . 4\n   2.2.1.\
    \  AUTH_SYS . . . . . . . . . . . . . . . . . . . . . . . . . 5\n   2.2.2.  AUTH_DH\
    \ and AUTH_KERB4 . . . . . . . . . . . . . . . . . . 5\n   2.2.3.  RPCSEC_GSS\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 5\n   2.3.  Authentication for\
    \ NFS Procedures  . . . . . . . . . . . . . 6\n   2.3.1.  NULL Procedure . . .\
    \ . . . . . . . . . . . . . . . . . . . 6\n   2.3.2.  NFS Procedures Used at Mount\
    \ Time  . . . . . . . . . . . . 6\n   2.4.  Binding Security Flavors to Exports\
    \  . . . . . . . . . . . . 7\n   2.5.  Anonymous Mapping  . . . . . . . . . .\
    \ . . . . . . . . . . . 7\n   2.6.  Host-based Access Control  . . . . . . . .\
    \ . . . . . . . . . 8\n   2.7.  Security Flavor Negotiation  . . . . . . . . .\
    \ . . . . . . . 8\n   2.8.  Registering Flavors  . . . . . . . . . . . . . . .\
    \ . . . . . 9\n   3.  The NFS Protocol's Use of RPCSEC_GSS . . . . . . . . . .\
    \ . .   9\n   3.1.  Server Principal . . . . . . . . . . . . . . . . . . . . .\
    \   9\n   3.2.  Negotiation  . . . . . . . . . . . . . . . . . . . . . . .   9\n\
    \   3.3.  Changing RPCSEC_GSS Parameters . . . . . . . . . . . . . .  10\n   3.4.\
    \  Registering Pseudo Flavors and Mappings  . . . . . . . . .  11\n   4.  The\
    \ NFS Protocol over Kerberos V5  . . . . . . . . . . . . .  11\n   4.1.  Issues\
    \ with Kerberos V5 QOPs . . . . . . . . . . . . . . .  12\n   4.2.  The NFS Protocol\
    \ over Kerberos V5 Pseudo Flavor\n         Registration Entry . . . . . . . .\
    \ . . . . . . . . . . . .  13\n   5.  Security Considerations  . . . . . . . .\
    \ . . . . . . . . . .  14\n   6.  IANA Considerations [RFC2434]  . . . . . . .\
    \ . . . . . . . .  14\n   6.1.  Pseudo Flavor Number . . . . . . . . . . . . .\
    \ . . . . . .  14\n   6.2.  String Name of Pseudo Flavor . . . . . . . . . . .\
    \ . . . .  15\n   6.2.1.  Name Space Size  . . . . . . . . . . . . . . . . . .\
    \ . .  15\n   6.2.2.  Delegation . . . . . . . . . . . . . . . . . . . . . . .\
    \  15\n   6.2.3.  Outside Review . . . . . . . . . . . . . . . . . . . . .  15\n\
    \   6.3.  GSS-API Mechanism OID  . . . . . . . . . . . . . . . . . .  15\n   6.4.\
    \  GSS-API Mechanism Algorithm Values . . . . . . . . . . . .  15\n   6.5.  RPCSEC_GSS\
    \ Security Service  . . . . . . . . . . . . . . .  16\n   References . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . .  16\n   Acknowledgments  . . . .\
    \ . . . . . . . . . . . . . . . . . . . .  17\n   Author's Address . . . . . .\
    \ . . . . . . . . . . . . . . . . . .  18\n   Full Copyright Statement . . . .\
    \ . . . . . . . . . . . . . . . .  19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The NFS protocol provides transparent remote access to shared\
    \ file\n   systems across networks. The NFS protocol is designed to be machine,\n\
    \   operating system, network architecture, and security mechanism, and\n   transport\
    \ protocol independent. This independence is achieved through\n   the use of ONC\
    \ Remote Procedure Call (RPC) primitives built on top of\n   an eXternal Data\
    \ Representation (XDR).  NFS protocol Version 2 is\n   specified in the Network\
    \ File System Protocol Specification\n   [RFC1094]. A description of the initial\
    \ implementation can be found\n   in [Sandberg]. NFS protocol Version 3 is specified\
    \ in the NFS Version\n   3 Protocol Specification [RFC1813]. A description of\
    \ some initial\n   implementations can be found in [Pawlowski].\n   For the remainder\
    \ of this document, whenever it refers to the NFS\n   protocol, it means NFS Version\
    \ 2 and Version 3, unless otherwise\n   stated.\n   The RPC protocol is specified\
    \ in the Remote Procedure Call Protocol\n   Specification Version 2 [RFC1831].\
    \ The XDR protocol is specified in\n   External Data Representation Standard [RFC1832].\n\
    \   A new RPC security flavor, RPCSEC_GSS, has been specified [RFC2203].\n   This\
    \ new flavor allows application protocols built on top of RPC to\n   access security\
    \ mechanisms that adhere to the GSS-API specification\n   [RFC2078].\n   The purpose\
    \ of this document is to clarify NFS security issues and to\n   specify how the\
    \ NFS protocol uses RPCSEC_GSS. This document will also\n   describe how NFS works\
    \ over Kerberos V5, via RPCSEC_GSS.\n   The key words \"MUST\", \"MUST NOT\",\
    \ \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    ,  \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.1.  Overview of RPC Security Architecture
  contents:
  - "1.1.  Overview of RPC Security Architecture\n   The RPC protocol includes a slot\
    \ for security parameters (referred to\n   as an authentication flavor in the\
    \ RPC specification [RFC1831]) on\n   every call.  The contents of the security\
    \ parameters are determined\n   by the type of authentication used by the server\
    \ and client. A server\n   may support several different flavors of authentication\
    \ at once.\n   Some of the better known flavors are summarized as follows:\n \
    \  *    The AUTH_NONE flavor provides null authentication, that is, no\n     \
    \   authentication information is passed.\n   *    The AUTH_SYS flavor provides\
    \ a UNIX-style user identifier, group\n        identifier, and an array of supplemental\
    \ group identifiers with\n        each call.\n   *    The AUTH_DH (sometimes referred\
    \ to as AUTH_DES [RFC1057]) flavor\n        provides DES-encrypted authentication\
    \ parameters based on a\n        network-wide string name, with session keys exchanged\
    \ via the\n        Diffie-Hellman public key scheme.\n   *    The AUTH_KERB4 flavor\
    \ provides DES encrypted authentication\n        parameters based on a network-wide\
    \ string name (the name is a\n        Kerberos Version 4 principal identifier)\
    \ with session keys\n        exchanged via Kerberos Version 4 secret keys.\n \
    \  The NFS protocol is not limited to the above list of security\n   flavors.\n"
- title: 2.  Overview of NFS Security
  contents:
  - '2.  Overview of NFS Security

    '
- title: 2.1.  Port Monitoring
  contents:
  - "2.1.  Port Monitoring\n   Many NFS servers will require that the client send\
    \ its NFS requests\n   from UDP or TCP source ports with values < 1024. The theory\
    \ is that\n   binding to ports < 1024 is a privileged operation on the client,\
    \ and\n   so the client is enforcing file access permissions on its end. The\n\
    \   theory breaks down because:\n   *    On many operating systems, there are\
    \ no constraints on what port\n        what user can bind to.\n   *    Just because\
    \ the client host enforces the privilege on binding\n        to ports < 1024 does\
    \ not necessarily mean that a non-privileged\n        user cannot gain access\
    \ to the port binding privilege. For\n        example with a single-user desk-top\
    \ host running a UNIX\n        operating system, the user may have knowledge of\
    \ the root user\n        password. And even if he does not have that knowledge,\
    \ with\n        physical access to the desk-top machine, root privileges are\n\
    \        trivially acquired.\n   In some rare cases, when the system administrator\
    \ can be certain that\n   the clients are trusted and under control (in particular,\
    \ protected\n   from physical attack), relying of trusted ports MAY be a reliable\n\
    \   form of security.\n   In most cases, the use of privileged ports and port\
    \ monitoring for\n   security is at best an inconvenience to the attacker and\
    \ SHOULD NOT\n   be depended on.\n   To maximize interoperability:\n   *    NFS\
    \ clients SHOULD attempt to bind to ports < 1024. In some\n        cases, if they\
    \ fail to bind (because either the user does not\n        have the privilege to\
    \ do so, or there is no free port < 1024),\n        the NFS client MAY wish to\
    \ attempt the NFS operation over a port\n        >= 1024.\n   *    NFS servers\
    \ that implement port monitoring SHOULD provide a\n        method to turn it off.\n\
    \   *    Whether port monitoring is enabled or not, NFS servers SHOULD\n     \
    \   NOT reject NFS requests to the NULL procedure (procedure number\n        0).\
    \ See subsection 2.3.1, \"NULL procedure\" for a complete\n        explanation.\n"
- title: 2.1.1.  MOUNT Protocol
  contents:
  - "2.1.1.  MOUNT Protocol\n   The port monitoring issues and recommendations apply\
    \ to the MOUNT\n   protocol as well.\n"
- title: 2.2.  RPC Security Flavors
  contents:
  - "2.2.  RPC Security Flavors\n   The NFS server checks permissions by taking the\
    \ credentials from the\n   RPC security information in each remote request. Each\
    \ flavor packages\n   credentials differently.\n"
- title: 2.2.1.  AUTH_SYS
  contents:
  - "2.2.1.  AUTH_SYS\n   Using the AUTH_SYS flavor of authentication, the server\
    \ gets the\n   client's effective user identifier, effective group identifier\
    \ and\n   supplemental group identifiers on each call, and uses them to check\n\
    \   access. Using user identifiers and group identifiers implies that the\n  \
    \ client and server either share the same identifier name space or do\n   local\
    \ user and group identifier mapping.\n   For those sites that do not implement\
    \ a consistent user identifier\n   and group identifier space, NFS implementations\
    \ must agree on the\n   mapping of user and group identifiers between NFS clients\
    \ and\n   servers.\n"
- title: 2.2.2.  AUTH_DH and AUTH_KERB4
  contents:
  - "2.2.2.  AUTH_DH and AUTH_KERB4\n   The AUTH_DH and AUTH_KERB4 styles of security\
    \ are based on a\n   network-wide name. They provide greater security through\
    \ the use of\n   DES encryption and public keys in the case of AUTH_DH, and DES\n\
    \   encryption and Kerberos secret keys (and tickets) in the AUTH_KERB4\n   case.\
    \ Again, the server and client must agree on the identity of a\n   particular\
    \ name on the network, but the name to identity mapping is\n   more operating\
    \ system independent than the user identifier and group\n   identifier mapping\
    \ in AUTH_SYS. Also, because the authentication\n   parameters are encrypted,\
    \ a malicious user must know another user's\n   network password or private key\
    \ to masquerade as that user.\n   Similarly, the server returns a verifier that\
    \ is also encrypted so\n   that masquerading as a server requires knowing a network\
    \ password.\n"
- title: 2.2.3.  RPCSEC_GSS
  contents:
  - "2.2.3.  RPCSEC_GSS\n   The RPCSEC_GSS style of security is based on a security-mechanism-\n\
    \   specific principal name. GSS-API mechanisms provide security through\n   the\
    \ use of cryptography. The cryptographic protections are used in\n   the construction\
    \ of the credential on calls, and in the verifiers on\n   replies. Optionally,\
    \ cryptographic protections will be in the body of\n   the calls and replies.\n\
    \   Note that the discussion of AUTH_NONE, AUTH_SYS, AUTH_DH, AUTH_KERB4,\n  \
    \ and RPCSEC_GSS does not imply that the NFS protocol is limited to\n   using\
    \ those five flavors.\n"
- title: 2.3.  Authentication for NFS Procedures
  contents:
  - '2.3.  Authentication for NFS Procedures

    '
- title: 2.3.1.  NULL Procedure
  contents:
  - "2.3.1.  NULL Procedure\n   The NULL procedure is typically used by NFS clients\
    \ to determine if\n   an NFS server is operating and responding to requests (in\
    \ other\n   words, to \"ping\" the NFS server). Some NFS servers require that\
    \ a\n   client using the NULL procedure:\n   *    send the request from TCP or\
    \ UDP port < 1024.  There does not\n        seem to be any value in this because\
    \ the NULL procedure is of\n        very low overhead and certainly no more overhead\
    \ than the cost\n        of processing a NULL procedure and returning an authentication\n\
    \        error. Moreover, by sending back an authentication error, the\n     \
    \   server has confirmed the information that the client was\n        interested\
    \ in: is the server operating?\n   *    be authenticated with a flavor stronger\
    \ than AUTH_SYS. This is a\n        problem because the RPCSEC_GSS protocol uses\
    \ NULL for control\n        messages.\n   NFS servers SHOULD:\n   *    accept\
    \ the NULL procedure ping over AUTH_NONE and AUTH_SYS, in\n        addition to\
    \ other RPC security flavors, and\n   *    NOT require that the source port be\
    \ < 1024 on a NULL procedure\n        ping.\n"
- title: 2.3.2.  NFS Procedures Used at Mount Time
  contents:
  - "2.3.2.  NFS Procedures Used at Mount Time\n   Certain NFS procedures are used\
    \ at the time the NFS client mounts a\n   file system from the server.  Some NFS\
    \ server implementations will\n   not require authentication for these NFS procedures.\
    \  For NFS\n   protocol Version 2, these procedures are GETATTR and STATFS. For\n\
    \   Version 3, the procedure is FSINFO.\n   The reason for not requiring authentication\
    \ is described as follows.\n   When the NFS client mounts a NFS server's file\
    \ system, the identity\n   of the caller on the client is typically an administrative\
    \ entity (in\n   UNIX operating systems, this is usually the \"root\" user). \
    \ It is\n   often the case that, for unattended operation in concert with an\n\
    \   automounter [Callaghan], the AUTH_DH, AUTH_KERB4, or RPCSEC_GSS\n   credentials\
    \ for the administrative entity associated with an\n   automounter are not available.\
    \ If so, the NFS client will use\n   AUTH_NONE or AUTH_SYS for the initial NFS\
    \ operations used to mount a\n   file system.  While an attacker could exploit\
    \ this implementation\n   artifact, the exposure is limited to gaining the attributes\
    \ of a file\n   or a file system's characteristics. This OPTIONAL trade off favors\n\
    \   the opportunity for improved ease of use.\n"
- title: 2.4.  Binding Security Flavors to Exports
  contents:
  - "2.4.  Binding Security Flavors to Exports\n   NFS servers MAY export file systems\
    \ with specific security flavors\n   bound to the export.  In the event a client\
    \ uses a security flavor\n   that is not the one of the flavors the file system\
    \ was exported with,\n   NFS server implementations MAY:\n   *    reject the request\
    \ with an error (either an NFS error or an RPC\n        level authentication error),\
    \ or\n   *    allow the request, but map the user's credentials to a user\n  \
    \      other than the one the client intended. Typically the user that\n     \
    \   is the result of this mapping is a user with limited access on\n        the\
    \ system, such as user \"nobody\" on UNIX systems.\n   If a client uses AUTH_NONE,\
    \ the server's options are the same as the\n   above, except that AUTH_NONE carries\
    \ with it no user identity. In\n   order to allow the request, on many operating\
    \ systems the server will\n   assign a user identity. Typically this assignment\
    \ will be a user with\n   limited access on the system, such as user \"nobody\"\
    \ on UNIX systems.\n"
- title: 2.5.  Anonymous Mapping
  contents:
  - "2.5.  Anonymous Mapping\n   The following passage is excerpted verbatim from\
    \ RFC 1813, section\n   4.4 \"Permission Issues\" (except that \"may\" has been\
    \ changed to\n   \"MAY\"):\n      In most operating systems, a particular user\
    \ (on UNIX, the uid 0)\n      has access to all files, no matter what permission\
    \ and ownership\n      they have. This superuser permission MAY not be allowed\
    \ on the\n      server, since anyone who can become superuser on their client\n\
    \      could gain access to all remote files. A UNIX server by default\n     \
    \ maps uid 0 to a distinguished value (UID_NOBODY), as well as\n      mapping\
    \ the groups list, before doing its access checking. A\n      server implementation\
    \ MAY provide a mechanism to change this\n      mapping. This works except for\
    \ NFS version 3 protocol root file\n      systems (required for diskless NFS version\
    \ 3 protocol client\n      support), where superuser access cannot be avoided.\
    \  Export\n      options are used, on the server, to restrict the set of clients\n\
    \      allowed superuser access.\n   The issues identified as applying to NFS\
    \ protocol Version 3 in the\n   above passage also apply to Version 2.\n"
- title: 2.6.  Host-based Access Control
  contents:
  - "2.6.  Host-based Access Control\n   In some NFS server implementations, a host-based\
    \ access control\n   method is used whereby file systems can be exported to lists\
    \ of\n   clients.  File systems may also be exported for read-only or read-\n\
    \   write access.  Several of these implementations will check access\n   only\
    \ at mount time, during the request for the file handle via the\n   MOUNT protocol\
    \ handshake.  The lack of authorization checking during\n   subsequent NFS requests\
    \ has the following consequences:\n   *    NFS servers are not able to repudiate\
    \ access to the file system\n        by an NFS client after the client has mounted\
    \ the file system.\n   *    An attacker can circumvent the MOUNT server's access\
    \ control to\n        gain access to a file system that the attacker is not authorized\n\
    \        for. The circumvention is accomplished by either stealing a file\n  \
    \      handle (usually by snooping the network traffic between an\n        legitimate\
    \ client and server) or guessing a file handle.  For\n        this attack to succeed,\
    \ the attacker must still be able\n        impersonate a user's credentials, which\
    \ is simple for AUTH_SYS,\n        but harder for AUTH_DH, AUTH_KERB4, and RPCSEC_GSS.\n\
    \   *    WebNFS clients that use the public file handle lookup [RFC2054]\n   \
    \     will not go through the MOUNT protocol to acquire initial file\n       \
    \ handle of the NFS file system. Enforcing access control via the\n        MOUNT\
    \ protocol is going to be a little use. Granted, some WebNFS\n        server implementations\
    \ cope with this by limiting the use of the\n        public file handle to file\
    \ systems exported to every client on\n        the Internet.\n   Thus, NFS server\
    \ implementations SHOULD check the client's\n   authorization on each NFS request.\n"
- title: 2.7.  Security Flavor Negotiation
  contents:
  - "2.7.  Security Flavor Negotiation\n   Any application protocol that supports\
    \ multiple styles of security\n   will have the issue of negotiating the security\
    \ method to be used.\n   NFS Version 2 had no support for security flavor negotiation.\
    \  It was\n   up to the client to guess, or depend on prior knowledge.  Often\
    \ the\n   prior knowledge would be available in the form of security options\n\
    \   specified in a directory service used for the purpose of\n   automounting.\n\
    \   The MOUNT Version 3 protocol, associated with NFS Version 3, solves\n   the\
    \ problem by having the response to the MNT procedure include a\n   list of flavors\
    \ in the MNT procedure. Note that because some NFS\n   servers will export file\
    \ systems to specific lists of clients, with\n   different access (read-only versus\
    \ read-write), and with different\n   security flavors, it is possible a client\
    \ might get back multiple\n   security flavors in the list returned in the MNT\
    \ response. The use of\n   one flavor instead of another might imply read-only\
    \ instead of read-\n   write access, or perhaps some other degradation of access.\
    \ For this\n   reason, a NFS client SHOULD use the first flavor in the list that\
    \ it\n   supports, on the assumption that the best access is provided by the\n\
    \   first flavor. NFS servers that support the ability to export file\n   systems\
    \ with multiple security flavors SHOULD either present the best\n   accessing\
    \ flavor first to the client, or leave the order under the\n   control of the\
    \ system administrator.\n"
- title: 2.8.  Registering Flavors
  contents:
  - "2.8.  Registering Flavors\n   When one develops a new RPC security flavor, iana@iana.org\
    \ MUST be\n   contacted to get a unique flavor assignment. To simplify NFS client\n\
    \   and server administration, having a simple ASCII string name for the\n   flavor\
    \ is useful. Currently, the following assignments exist:\n      flavor       string\
    \ name\n      AUTH_NONE    none\n      AUTH_SYS     sys\n      AUTH_DH      dh\n\
    \      AUTH_KERB4   krb4\n   A string name for a new flavor SHOULD be assigned.\
    \  String name\n   assignments can be registered by contacting iana@iana.org.\n"
- title: 3.  The NFS Protocol's Use of RPCSEC_GSS
  contents:
  - '3.  The NFS Protocol''s Use of RPCSEC_GSS

    '
- title: 3.1.  Server Principal
  contents:
  - "3.1.  Server Principal\n   When using RPCSEC_GSS, the NFS server MUST identify\
    \ itself in GSS-API\n   via a GSS_C_NT_HOSTBASED_SERVICE name type.\n   GSS_C_NT_HOSTBASED_SERVICE\
    \ names are of the form:\n        service@hostname\n   For NFS, the \"service\"\
    \ element is\n        nfs\n"
- title: 3.2.  Negotiation
  contents:
  - "3.2.  Negotiation\n   RPCSEC_GSS is a single security flavor over which different\
    \ security\n   mechanisms can be multiplexed. Within a mechanism, GSS-API provides\n\
    \   for the support of multiple quality of protections (QOPs), which are\n   pairs\
    \ of cryptographic algorithms. Each algorithm in the QOP consists\n   of an encryption\
    \ algorithm for privacy and a checksum algorithm for\n   integrity.  RPCSEC_GSS\
    \ lets one protect the RPC request/response pair\n   with plain header authentication,\
    \ message integrity, and message\n   privacy.  Thus RPCSEC_GSS effectively supports\
    \ M * Q * 3 different\n   styles of security, where M is the number of mechanisms\
    \ supported, Q\n   is the average number of QOPs supported for each mechanism,\
    \ and 3\n   enumerates authentication, integrity, and privacy.\n   Because RPCSEC_GSS\
    \ encodes many styles of security, just adding\n   RPCSEC_GSS to the list of flavors\
    \ returned in MOUNT Version 3's MNT\n   response is not going to be of much use\
    \ to the NFS client.\n   The solution is the creation of a concept called \"pseudo\
    \ flavors.\"\n   Pseudo flavors are 32 bit integers that are allocated out of\
    \ the same\n   number space as regular RPC security flavors like AUTH_NONE,\n\
    \   AUTH_SYS, AUTH_DH, AUTH_KERB4, and RPCSEC_GSS. The idea is that each\n   pseudo\
    \ flavor will map to a specific triple of security mechanism,\n   quality of protection,\
    \ and service. The service will be one of\n   authentication, integrity, and privacy.\
    \ Note that integrity includes\n   authentication, and privacy includes integrity.\
    \ RPCSEC_GSS uses\n   constants named rpc_gss_svc_none, rpc_gss_svc_integrity,\
    \ and\n   rpc_gss_svc_privacy, for authentication, integrity, and privacy\n  \
    \ respectively.\n   Thus, instead of returning RPCSEC_GSS, a MOUNT Version 3 server\
    \ will\n   instead return one or more pseudo flavors if the NFS server supports\n\
    \   RPCSEC_GSS and if the file system has been exported with one or more\n   <mechanism,\
    \ QOP, service> triples.  See section 4, \"The NFS Protocol\n   over Kerberos\
    \ V5\" for an example of pseudo flavor to triple mapping.\n"
- title: 3.3.  Changing RPCSEC_GSS Parameters
  contents:
  - "3.3.  Changing RPCSEC_GSS Parameters\n   Once an RPCSEC_GSS session or context\
    \ has been set up (via the\n   RPCSEC_GSS_INIT and RPCSEC_GSS_CONTINUE_INIT control\
    \ procedures of\n   RPCSEC_GSS), the NFS server MAY lock the <mechanism, QOP,\
    \ service>\n   triple for the duration of the session.  While RPCSEC_GSS allows\
    \ for\n   the use of different QOPs and services on each message, it would be\n\
    \   expensive for the NFS server to re-consult its table of exported file\n  \
    \ systems to see if the triple was allowed. Moreover, by the time the\n   NFS\
    \ server's dispatch routine was reached, the typical RPC subsystem\n   would already\
    \ have performed the appropriate GSS-API operation,\n   GSS_VerifyMIC() or GSS_Unwrap(),\
    \ if the respective integrity or\n   privacy services were selected. If the file\
    \ system being accessed\n   were not exported with integrity or privacy, or with\
    \ the particular\n   QOP used to perform the integrity or privacy service, then\
    \ it would\n   be possible to execute a denial of service attack, whereby the\n\
    \   objective of the caller is to deny CPU service to legitimate users of\n  \
    \ the NFS server's machine processors.\n   Thus, in general, clients SHOULD NOT\
    \ assume that they will be\n   permitted to alter the <mechanism, QOP, service>\
    \ triple once the data\n   exchange phase of RPCSEC_GSS has started.\n"
- title: 3.4.  Registering Pseudo Flavors and Mappings
  contents:
  - "3.4.  Registering Pseudo Flavors and Mappings\n   Pseudo flavor numbers MUST\
    \ be registered via same method as regular\n   RPC security flavor numbers via\
    \ iana@iana.org.\n   Once the pseudo flavor number has been assigned, registrants\
    \ SHOULD\n   register the mapping with iana@iana.org. The mapping registration\n\
    \   MUST contain:\n   *    the pseudo flavor number, an ASCII string name for\
    \ the flavor\n        (for example \"none\" has been assigned for AUTH_NONE),\
    \ and\n   *    the <mechanism, algorithm(s), service> triple.  As per the GSS-\n\
    \        API specification, the mechanism MUST be identified with a\n        unique\
    \ ISO object identifier (OID). The reason why the second\n        component of\
    \ the triple is not necessarily a QOP value is that\n        GSS-API allows mechanisms\
    \ much latitude in the mapping of the\n        algorithm used in the default quality\
    \ of protection (See\n        subsection 4.1, \"Issues with Kerberos V5 QOPs,\"\
    \ for a detailed\n        discussion). With some mechanisms, the second component\
    \ of the\n        triple will be a QOP. Internally, on the NFS implementation,\
    \ it\n        is expected that the triple would use a QOP for the second\n   \
    \     component.\n   The mapping registration SHOULD also contain:\n   *    A\
    \ reference to an RFC describing how the NFS protocol works\n        over the\
    \ pseudo flavor(s), including the pseudo flavor\n        number(s), string name(s)\
    \ for the flavor(s), and any other\n        issues, including how the registrant\
    \ is interpreting the GSS-API\n        mechanism.\n   *    A reference to the\
    \ GSS-API mechanism used.\n   An example of a complete registration is provided\
    \ in subsection 4.2,\n   \"The NFS Protocol over Kerberos V5 Pseudo Flavor Registration\
    \ Entry.\"\n"
- title: 4.  The NFS Protocol over Kerberos V5
  contents:
  - "4.  The NFS Protocol over Kerberos V5\n   The NFS protocol uses Kerberos V5 security\
    \ using the RPCSEC_GSS\n   security flavor.  The GSS-API security mechanism for\
    \ Kerberos V5 that\n   the NFS/RPCSEC_GSS protocol stack uses is described in\
    \ the Kerberos\n   V5 GSS-API description [RFC1964].\n"
- title: 4.1.  Issues with Kerberos V5 QOPs
  contents:
  - "4.1.  Issues with Kerberos V5 QOPs\n   The Kerberos V5 GSS-API description defines\
    \ three algorithms for\n   integrity:\n   *    DES MAC MD5\n   *    MD2.5\n  \
    \ *    DES-MAC\n   RFC 1964 states that MD2.5 \"may be significantly weaker than\
    \ DES MAC\n   MD5.\" RFC 1964 also states that DES-MAC \"may not be present in\
    \ all\n   implementations.\"\n   Thus the description of operation of NFS clients\
    \ and servers over\n   Kerberos V5 is limited to the DES MAC MD5 integrity algorithm.\n\
    \   NFS clients and servers operating over Kerberos V5 MUST support the\n   DES\
    \ MAC MD5 integrity algorithm. RFC 1964 lists a single algorithm\n   for privacy:\
    \ 56 bit DES.  NFS clients and servers SHOULD support the\n   56 bit DES privacy\
    \ algorithm.\n   GSS-API has the concept of a default QOP of zero which means\n\
    \   different integrity and privacy algorithms to different GSS-API\n   mechanisms.\
    \ In Kerberos V5, the default QOP of zero means to use the\n   56 bit DES algorithm\
    \ (when doing a GSS_Wrap() operation with the\n   conf_req_flag set to 1).\n \
    \  For Kerberos V5, the default QOP of zero means different integrity\n   algorithms\
    \ to different implementations of Kerberos V5.  Furthermore,\n   during the processing\
    \ of a token in GSS_Unwrap(), and\n   GSS_VerifyMIC(), at least one reference\
    \ implementation of the\n   Kerberos V5 GSS-API mechanism [MIT], always returns\
    \ a QOP of zero,\n   regardless of integrity algorithm encoded in the token. \
    \ For such\n   implementations, it means that the caller of GSS_Unwrap() and\n\
    \   GSS_VerifyMIC() cannot know the actual integrity algorithm used.\n   Given\
    \ that each integrity algorithm has a different degree of\n   security, this situation\
    \ may not be acceptable to the user of GSS-\n   API. An implementation of Kerberos\
    \ V5 under GSS-API for use under NFS\n   MUST NOT do this.\n   For the purposes\
    \ of NFS, as a simplification, some Kerberos V5 GSS-\n   API mechanisms MAY map\
    \ QOP 0 to always mean DES MAC MD5 integrity,\n   and when using GSS_VerifyMIC()\
    \ and GSS_Unwrap(), always map the DES\n   MAC MD5 integrity that is specified\
    \ to QOP 0.\n"
- title: 4.2.  The NFS Protocol over Kerberos V5 Pseudo Flavor Registration Entry
  contents:
  - "4.2.  The NFS Protocol over Kerberos V5 Pseudo Flavor Registration Entry\n  \
    \ Here are the pseudo flavor mappings for the NFS protocol using\n   Kerberos\
    \ V5 security:\n columns:\n 1 == number of pseudo flavor\n 2 == name of pseudo\
    \ flavor\n 3 == mechanism's OID\n 4 == mechanism's algorithm(s)\n 5 == RPCSEC_GSS\
    \ service\n 1      2     3                    4              5\n -----------------------------------------------------------------------\n\
    \ 390003 krb5  1.2.840.113554.1.2.2 DES MAC MD5    rpc_gss_svc_none\n 390004 krb5i\
    \ 1.2.840.113554.1.2.2 DES MAC MD5    rpc_gss_svc_integrity\n 390005 krb5p 1.2.840.113554.1.2.2\
    \ DES MAC MD5    rpc_gss_svc_privacy\n                                   for integrity,\n\
    \                                   and 56 bit DES\n                         \
    \          for privacy.\n   An implementation of NFS over RPCSEC_GSS/GSS-API/Kerberos\
    \ V5 that\n   maps the default QOP to DES MAC MD5 (and vice versa), would implement\n\
    \   a mapping of:\n      columns:\n      1 == number of pseudo flavor\n      2\
    \ == name of pseudo flavor\n      3 == mechanism's OID\n      4 == QOP\n     \
    \ 5 == RPCSEC_GSS service\n      1      2     3                     4  5\n   \
    \   -----------------------------------------------------------\n      390003\
    \ krb5  1.2.840.113554.1.2.2  0  rpc_gss_svc_none\n      390004 krb5i 1.2.840.113554.1.2.2\
    \  0  rpc_gss_svc_integrity\n      390005 krb5p 1.2.840.113554.1.2.2  0  rpc_gss_svc_privacy\n\
    \   The reference for the GSS-API mechanism with the above OID is\n   [RFC1964].\n\
    \   The reference for how the NFS protocol MUST work over Kerberos V5 is\n   this\
    \ document.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Version 3 of the MOUNT protocol is used to negotiate\
    \ the security\n   flavor to be used by the NFS Version 3 client. If the NFS client\
    \ uses\n   a weak security flavor like AUTH_SYS to query a Version 3 MOUNT\n \
    \  server, then the following attacks are possible by an attacker in the\n   middle:\n\
    \   *    The attacker in the middle can coax the NFS client into using a\n   \
    \     weaker form of security than what the real NFS server requires.\n      \
    \  However, once the NFS client selects a security flavor when it\n        sends\
    \ a request to real NFS server, if the flavor is\n        unacceptable, the NFS\
    \ client's NFS request will be rejected. So\n        at worst, a denial of service\
    \ attack is possible. In theory, the\n        NFS client could contact the MOUNT\
    \ server using a stronger\n        security flavor, but this would require that\
    \ the client know in\n        advance what security flavors the MOUNT server supports.\n\
    \   *    If the client and server support a common set of security\n        flavors,\
    \ such that the client considers one preferable to the\n        other (for example,\
    \ one might have privacy and other not),\n        unless the client uses a strong\
    \ security flavor in the MOUNT\n        protocol query, an attacker in the middle\
    \ could cause the client\n        to use the weaker form of security.  Again,\
    \ a client could\n        contact the MOUNT server using a stronger form of security.\n"
- title: 6.  IANA Considerations [RFC2434]
  contents:
  - "6.  IANA Considerations [RFC2434]\n   This memorandum describes how NFS Version\
    \ 2 and Version 3 work over\n   RPC's RPCSEC_GSS security flavor. This memorandum\
    \ requires that\n   triples of { GSS-API mechanism OID, GSS-API mechanism algorithm,\n\
    \   RPCSEC_GSS security service } be mapped to a unique RPC security\n   flavor\
    \ number, which is a pseudo flavor that does not appear in an\n   RPC protocol\
    \ header.  This memorandum also encourages that an ASCII\n   string name be registered\
    \ with the triple.\n   Thus there are five different kinds of objects to consider\
    \ guidelines\n   for.\n"
- title: 6.1.  Pseudo Flavor Number
  contents:
  - "6.1.  Pseudo Flavor Number\n   The considerations of assignment, allocation,\
    \ and delegation of\n   pseudo flavor numbers are no different than that the considerations\n\
    \   for RPC security flavors, as both are assigned from the same number\n   space.\
    \  IANA is already responsible for the assigned of RPC security\n   flavors, and\
    \ because this memorandum does not specify the RPC\n   protocol [RFC1831], it\
    \ is beyond the scope of this memorandum to\n   guide IANA in the assignment of\
    \ flavor numbers.\n"
- title: 6.2.  String Name of Pseudo Flavor
  contents:
  - "6.2.  String Name of Pseudo Flavor\n   This memorandum introduces the concept\
    \ of a string name to be\n   associated with the RPC pseudo flavor number, and\
    \ so it is within the\n   scope of this memorandum to provide guidance to IANA.\n"
- title: 6.2.1.  Name Space Size
  contents:
  - "6.2.1.  Name Space Size\n   There are no limits placed on the length of the unique\
    \ string name by\n   this memorandum, so the size of the name space is infinite.\
    \ However,\n   IANA may want to prevent the hoarding or reservation of names.\
    \ The\n   simplest way to do this is by requiring the registrant to provide the\n\
    \   GSS-API mechanism OID, GSS-API quality of protection, the RPCSEC_GSS\n   security\
    \ service, and flavor number, with the request for a flavor\n   name. If the registrant\
    \ does not have a flavor number, then\n   guidelines for flavor number assignments\
    \ will indirectly limit the\n   assignment of flavor names.\n"
- title: 6.2.2.  Delegation
  contents:
  - "6.2.2.  Delegation\n   The simplest way to handle delegation is to delegate portions\
    \ of the\n   RPC security flavor number space with the RPC flavor name space.\
    \ The\n   guidelines for delegation of the flavor name space are thus\n   equivalent\
    \ to guidelines for delegations of the flavor number space.\n"
- title: 6.2.3.  Outside Review
  contents:
  - "6.2.3.  Outside Review\n   Because string names can be trademarks, IANA may want\
    \ to seek legal\n   counsel to review a proposed pseudo flavor name. Other than\
    \ that, no\n   outside review is necessary.\n"
- title: 6.3.  GSS-API Mechanism OID
  contents:
  - "6.3.  GSS-API Mechanism OID\n   This memorandum assumes that the mechanism OID\
    \ associated with the\n   pseudo flavor has already been allocated. OIDs are allocated\
    \ by the\n   International Standards Organization and the International\n   Telecommunication\
    \ Union. Both organizations have delegated assignment\n   authority for subsets\
    \ of the OID number space to other organizations.\n   Presumably, IANA has received\
    \ authority to assign OIDs to GSS-API\n   mechanisms. Because this memorandum\
    \ does not specify the GSS-API\n   protocol (see [RFC2078]) it is beyond the scope\
    \ of this memorandum to\n   guide IANA in the assignment of GSS-API mechanism\
    \ OIDs.\n"
- title: 6.4.  GSS-API Mechanism Algorithm Values
  contents:
  - "6.4.  GSS-API Mechanism Algorithm Values\n   This memorandum assumes that the\
    \ algorithm value for a given GSS-API\n   mechanism has already been allocated.\
    \ Algorithm values are controlled\n   by the owner of the GSS-API mechanism, though\
    \ the owner may delegate\n   assignment of algorithm values to a body such as\
    \ IANA. Because this\n   memorandum does not specify GSS-API mechanisms, such\
    \ as [RFC1964], it\n   is beyond the scope of this memorandum to guide IANA in\
    \ the\n   assignment of a mechanism's algorithm value(s).\n"
- title: 6.5.  RPCSEC_GSS Security Service
  contents:
  - "6.5.  RPCSEC_GSS Security Service\n   There are only three security services\
    \ and they are enumerated and\n   described in [RFC2203]. No guideline to IANA\
    \ is necessary.\n"
- title: References
  contents:
  - "References\n   [RFC1094] Sun Microsystems, Inc., \"NFS: Network File System\n\
    \             Protocol Specification\", RFC 1094, March 1989.\n             http://www.ietf.org/rfc/rfc1094.txt\n\
    \   [Sandberg]\n             Sandberg, R., Goldberg, D., Kleiman, S., Walsh, D.,\
    \ Lyon,\n             B. (1985). \"Design and Implementation of the Sun Network\n\
    \             Filesystem,\"  Proceedings of the 1985 Summer USENIX\n         \
    \    Technical Conference.\n   [RFC1813] Callaghan, B., Pawlowski, B. and P. Staubach,\
    \ \"NFS\n             Version 3 Protocol Specification\", RFC 1813, June 1995.\n\
    \             http://www.ietf.org/rfc/rfc1813.txt\n   [RFC1831] Srinivasan, R.,\
    \ \"RPC: Remote Procedure Call Protocol\n             Specification Version 2\"\
    , RFC 1831, August 1995.\n             http://www.ietf.org/rfc/rfc1831.txt\n \
    \  [RFC1832] Srinivasan, R., \"XDR: External Data Representation\n           \
    \  Standard\", RFC 1832, August 1995.\n             http://www.ietf.org/rfc/rfc1832.txt\n\
    \   [Pawlowski]\n             Pawlowski, B., Juszczak, C., Staubach, P., Smith,\
    \ C.,\n             Lebel, D. and D. Hitz, \"NFS Version 3 Design and\n      \
    \       Implementation\", Proceedings of the USENIX Summer 1994\n            \
    \ Technical Conference.\n   [RFC2203] Eisler, M., Chiu, A. and L. Ling, \"RPCSEC_GSS\
    \ Protocol\n             Specification\", RFC 2203, September 1997.\n        \
    \     http://www.ietf.org/rfc/rfc2203.txt\n   [RFC2078] Linn, J., \"Generic Security\
    \ Service Application\n             Program Interface, Version 2\", RFC 2078,\
    \ January 1997.\n             http://www.ietf.org/rfc/rfc2078.txt\n   [RFC1057]\
    \ Sun Microsystems, Inc., \"RPC: Remote Procedure Call\n             Protocol\
    \ Specification Version 2\", RFC 1057, June 1988.\n             This RFC is being\
    \ referenced for its description of the\n             AUTH_DH (AUTH_DES) RPC security\
    \ flavor.\n             http://www.ietf.org/rfc/rfc1057.txt\n   [RFC2119] Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n             Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n             http://www.ietf.org/rfc/rfc2119.txt\n\
    \   [Callaghan]\n             Callaghan, B., Singh, S. (1993). \"The Autofs Automounter,\"\
    \n             Proceedings of the 1993 Summer USENIX Technical Conference.\n \
    \  [RFC1964] Linn, J., \"The Kerberos Version 5 GSS-API\n             Mechanism\"\
    , RFC 1964, June 1996.\n             http://www.ietf.org/rfc/rfc1964.txt\n   [RFC2054]\
    \ Callaghan, B., \"WebNFS Client Specification\", RFC\n             2054, October\
    \ 1996.\n             http://www.ietf.org/rfc/rfc2054.txt\n   [RFC2434] Narten,\
    \ T. and H. Alvestrand, \"Guidelines for Writing\n             an IANA Considerations\
    \ Section in RFCs\", BCP 26, RFC\n             2434, October 1998.\n         \
    \    http://www.ietf.org/rfc/rfc2434.txt\n   [MIT]     Massachusetts Institute\
    \ of Technology (1998). \"Kerberos:\n             The Network Authentication Protocol.\"\
    \ The Web site for\n             downloading MIT's implementation of Kerberos\
    \ V5, including\n             implementations of RFC 1510 and RFC 1964.\n    \
    \         http://web.mit.edu/kerberos/www/index.html\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The author thanks:\n   *    Brent Callaghan, John Hawkinson,\
    \ Jack Kabat, Lin Ling, Steve\n        Nahm, Joyce Reynolds, and David Robinson\
    \ for their review\n        comments.\n   *    John Linn, for his explanation\
    \ of QOP handling in RFC 1964.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Address comments related to this memorandum to:\n   nfsv4-wg@sunroof.eng.sun.com\n\
    \   Mike Eisler\n   Sun Microsystems, Inc.\n   5565 Wilson Road\n   Colorado Springs,\
    \ CO 80919\n   Phone: 1-719-599-9026\n   EMail: mre@eng.sun.com\n"
- title: 14.  Full Copyright Statement
  contents:
  - "14.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implmentation may be prepared, copied, published\
    \ and\n   distributed, in whole or in part, without restriction of any kind,\n\
    \   provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of eveloping\n   Internet standards in which case\
    \ the procedures for copyrights\n   defined in the Internet Standards process\
    \ must be followed, or as\n   required to translate it into languages other than\
    \ English.\n   The limited permissions granted above are perpetual and will not\
    \ be\n   revoked by the Internet Society or its successors or assigns.\n   This\
    \ document and the information contained herein is provided on an\n   \"AS IS\"\
    \ basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS\
    \ ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY\
    \ THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\
    \ IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
