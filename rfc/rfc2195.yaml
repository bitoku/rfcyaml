- contents:
  - '       IMAP/POP AUTHorize Extension for Simple Challenge/Response

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   While IMAP4 supports a number of strong authentication mechanisms
    as\n   described in RFC 1731, it lacks any mechanism that neither passes\n   cleartext,
    reusable passwords across the network nor requires either\n   a significant security
    infrastructure or that the mail server update\n   a mail-system-wide user authentication
    file on each mail access.\n   This specification provides a simple challenge-response\n
    \  authentication protocol that is suitable for use with IMAP4.  Since\n   it
    utilizes Keyed-MD5 digests and does not require that the secret be\n   stored
    in the clear on the server, it may also constitute an\n   improvement on APOP
    for POP3 use as specified in RFC 1734.\n"
  title: Abstract
- contents:
  - "1. Introduction\n   Existing Proposed Standards specify an AUTHENTICATE mechanism
    for the\n   IMAP4 protocol [IMAP, IMAP-AUTH] and a parallel AUTH mechanism for\n
    \  the POP3 protocol [POP3-AUTH].  The AUTHENTICATE mechanism is\n   intended
    to be extensible; the four methods specified in [IMAP-AUTH]\n   are all fairly
    powerful and require some security infrastructure to\n   support.  The base POP3
    specification [POP3] also contains a\n   lightweight challenge-response mechanism
    called APOP.  APOP is\n   associated with most of the risks associated with such
    protocols: in\n   particular, it requires that both the client and server machines
    have\n   access to the shared secret in cleartext form. CRAM offers a method\n
    \  for avoiding such cleartext storage while retaining the algorithmic\n   simplicity
    of APOP in using only MD5, though in a \"keyed\" method.\n   At present, IMAP
    [IMAP] lacks any facility corresponding to APOP.\n   The only alternative to the
    strong mechanisms identified in [IMAP-\n   AUTH] is a presumably cleartext username
    and password, supported\n   through the LOGIN command in [IMAP].  This document
    describes a\n   simple challenge-response mechanism, similar to APOP and PPP CHAP\n
    \  [PPP], that can be used with IMAP (and, in principle, with POP3).\n   This
    mechanism also has the advantage over some possible alternatives\n   of not requiring
    that the server maintain information about email\n   \"logins\" on a per-login
    basis.  While mechanisms that do require such\n   per-login history records may
    offer enhanced security, protocols such\n   as IMAP, which may have several connections
    between a given client\n   and server open more or less simultaneous, may make
    their\n   implementation particularly challenging.\n"
  title: 1. Introduction
- contents:
  - "2. Challenge-Response Authentication Mechanism (CRAM)\n   The authentication
    type associated with CRAM is \"CRAM-MD5\".\n   The data encoded in the first ready
    response contains an\n   presumptively arbitrary string of random digits, a timestamp,
    and the\n   fully-qualified primary host name of the server.  The syntax of the\n
    \  unencoded form must correspond to that of an RFC 822 'msg-id'\n   [RFC822]
    as described in [POP3].\n   The client makes note of the data and then responds
    with a string\n   consisting of the user name, a space, and a 'digest'.  The latter
    is\n   computed by applying the keyed MD5 algorithm from [KEYED-MD5] where\n   the
    key is a shared secret and the digested text is the timestamp\n   (including angle-brackets).\n
    \  This shared secret is a string known only to the client and server.\n   The
    `digest' parameter itself is a 16-octet value which is sent in\n   hexadecimal
    format, using lower-case ASCII characters.\n   When the server receives this client
    response, it verifies the digest\n   provided.  If the digest is correct, the
    server should consider the\n   client authenticated and respond appropriately.\n
    \  Keyed MD5 is chosen for this application because of the greater\n   security
    imparted to authentication of short messages. In addition,\n   the use of the
    techniques described in [KEYED-MD5] for precomputation\n   of intermediate results
    make it possible to avoid explicit cleartext\n   storage of the shared secret
    on the server system by instead storing\n   the intermediate results which are
    known as \"contexts\".\n   CRAM does not support a protection mechanism.\n   Example:\n
    \  The examples in this document show the use of the CRAM mechanism with\n   the
    IMAP4 AUTHENTICATE command [IMAP-AUTH].  The base64 encoding of\n   the challenges
    and responses is part of the IMAP4 AUTHENTICATE\n   command, not part of the CRAM
    specification itself.\n     S: * OK IMAP4 Server\n     C: A0001 AUTHENTICATE CRAM-MD5\n
    \    S: + PDE4OTYuNjk3MTcwOTUyQHBvc3RvZmZpY2UucmVzdG9uLm1jaS5uZXQ+\n     C: dGltIGI5MTNhNjAyYzdlZGE3YTQ5NWI0ZTZlNzMzNGQzODkw\n
    \    S: A0001 OK CRAM authentication successful\n      In this example, the shared
    secret is the string\n      'tanstaaftanstaaf'.  Hence, the Keyed MD5 digest is
    produced by\n      calculating\n        MD5((tanstaaftanstaaf XOR opad),\n            MD5((tanstaaftanstaaf
    XOR ipad),\n            <1896.697170952@postoffice.reston.mci.net>))\n      where
    ipad and opad are as defined in the keyed-MD5 Work in\n      Progress [KEYED-MD5]
    and the string shown in the challenge is the\n      base64 encoding of <1896.697170952@postoffice.reston.mci.net>.
    The\n      shared secret is null-padded to a length of 64 bytes. If the\n      shared
    secret is longer than 64 bytes, the MD5 digest of the\n      shared secret is
    used as a 16 byte input to the keyed MD5\n      calculation.\n      This produces
    a digest value (in hexadecimal) of\n           b913a602c7eda7a495b4e6e7334d3890\n
    \     The user name is then prepended to it, forming\n           tim b913a602c7eda7a495b4e6e7334d3890\n
    \     Which is then base64 encoded to meet the requirements of the IMAP4\n      AUTHENTICATE
    command (or the similar POP3 AUTH command), yielding\n           dGltIGI5MTNhNjAyYzdlZGE3YTQ5NWI0ZTZlNzMzNGQzODkw\n"
  title: 2. Challenge-Response Authentication Mechanism (CRAM)
- contents:
  - "3. References\n   [CHAP]  Lloyd, B., and W. Simpson, \"PPP Authentication Protocols\",\n
    \      RFC 1334, October 1992.\n   [IMAP] Crispin, M., \"Internet Message Access
    Protocol - Version\n       4rev1\", RFC 2060, University of Washington, December
    1996.\n   [IMAP-AUTH] Myers, J., \"IMAP4 Authentication Mechanisms\",\n       RFC
    1731, Carnegie Mellon, December 1994.\n   [KEYED-MD5] Krawczyk, Bellare, Canetti,
    \"HMAC: Keyed-Hashing for\n       Message Authentication\", RFC 2104, February
    1997.\n   [MD5]  Rivest, R., \"The MD5 Message Digest Algorithm\",\n       RFC
    1321, MIT Laboratory for Computer Science, April 1992.\n   [POP3] Myers, J., and
    M. Rose, \"Post Office Protocol - Version 3\",\n       STD 53, RFC 1939, Carnegie
    Mellon, May 1996.\n   [POP3-AUTH] Myers, J., \"POP3 AUTHentication command\",
    RFC 1734,\n       Carnegie Mellon, December, 1994.\n"
  title: 3. References
- contents:
  - "4. Security Considerations\n   It is conjectured that use of the CRAM authentication
    mechanism\n   provides origin identification and replay protection for a session.\n
    \  Accordingly, a server that implements both a cleartext password\n   command
    and this authentication type should not allow both methods of\n   access for a
    given user.\n   While the saving, on the server, of \"contexts\" (see section
    2) is\n   marginally better than saving the shared secrets in cleartext as is\n
    \  required by CHAP [CHAP] and APOP [POP3], it is not sufficient to\n   protect
    the secrets if the server itself is compromised.\n   Consequently, servers that
    store the secrets or contexts must both be\n   protected to a level appropriate
    to the potential information value\n   in user mailboxes and identities.\n   As
    the length of the shared secret increases, so does the difficulty\n   of deriving
    it.\n   While there are now suggestions in the literature that the use of MD5\n
    \  and keyed MD5 in authentication procedures probably has a limited\n   effective
    lifetime, the technique is now widely deployed and widely\n   understood.  It
    is believed that this general understanding may\n   assist with the rapid replacement,
    by CRAM-MD5, of the current uses\n   of permanent cleartext passwords in IMAP.
    \  This document has been\n   deliberately written to permit easy upgrading to
    use SHA (or whatever\n   alternatives emerge) when they are considered to be widely
    available\n   and adequately safe.\n   Even with the use of CRAM, users are still
    vulnerable to active\n   attacks.  An example of an increasingly common active
    attack is 'TCP\n   Session Hijacking' as described in CERT Advisory CA-95:01 [CERT95].\n
    \  See section 1 above for additional discussion.\n"
  title: 4. Security Considerations
- contents:
  - "5. Acknowledgements\n   This memo borrows ideas and some text liberally from
    [POP3] and\n   [RFC-1731] and thanks are due the authors of those documents.  Ran\n
    \  Atkinson made a number of valuable technical and editorial\n   contributions
    to the document.\n"
  title: 5. Acknowledgements
- contents:
  - "6. Authors' Addresses\n   John C. Klensin\n   MCI Telecommunications\n   800
    Boylston St, 7th floor\n   Boston, MA 02199\n   USA\n   EMail: klensin@mci.net\n
    \  Phone: +1 617 960 1011\n   Randy Catoe\n   MCI Telecommunications\n   2100
    Reston Parkway\n   Reston, VA 22091\n   USA\n   EMail: randy@mci.net\n   Phone:
    +1 703 715 7366\n   Paul Krumviede\n   MCI Telecommunications\n   2100 Reston
    Parkway\n   Reston, VA 22091\n   USA\n   EMail: paul@mci.net\n   Phone: +1 703
    715 7251\n"
  title: 6. Authors' Addresses
