- title: __initial_text__
  contents:
  - '                        Serial Number Arithmetic

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines serial number arithmetic, as used in the Domain\n\
    \   Name System.  The DNS has long relied upon serial number arithmetic,\n   a\
    \ concept which has never really been defined, certainly not in an\n   IETF document,\
    \ though which has been widely understood.  This memo\n   supplies the missing\
    \ definition.  It is intended to update RFC1034\n   and RFC1035.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The serial number field of the SOA resource record is defined\
    \ in\n   RFC1035 as\n   SERIAL   The unsigned 32 bit version number of the original\
    \ copy of\n            the zone.  Zone transfers preserve this value.  This value\n\
    \            wraps and should be compared using sequence space\n            arithmetic.\n\
    \   RFC1034 uses the same terminology when defining secondary server zone\n  \
    \ consistency procedures.\n   Unfortunately the term \"sequence space arithmetic\"\
    \ is not defined in\n   either RFC1034 or RFC1035, nor do any of their references\
    \ provide\n   further information.\n   This phrase seems to have been intending\
    \ to specify arithmetic as\n   used in TCP sequence numbers [RFC793], and defined\
    \ in [IEN-74].\n   Unfortunately, the arithmetic defined in [IEN-74] is not adequate\
    \ for\n   the purposes of the DNS, as no general comparison operator is\n   defined.\n\
    \   To avoid further problems with this simple field, this document\n   defines\
    \ the field and the operations available upon it.  This\n   definition is intended\
    \ merely to clarify the intent of RFC1034 and\n   RFC1035, and is believed to\
    \ generally agree with current\n   implementations.  However, older, superseded,\
    \ implementations are\n   known to have treated the serial number as a simple\
    \ unsigned integer,\n   with no attempt to implement any kind of \"sequence space\
    \ arithmetic\",\n   however that may have been interpreted, and further, ignoring\
    \ the\n   requirement that the value wraps.  Nothing can be done with these\n\
    \   implementations, beyond extermination.\n"
- title: 2. Serial Number Arithmetic
  contents:
  - "2. Serial Number Arithmetic\n   Serial numbers are formed from non-negative integers\
    \ from a finite\n   subset of the range of all integer values.  The lowest integer\
    \ in\n   every subset used for this purpose is zero, the maximum is always one\n\
    \   less than a power of two.\n   When considered as serial numbers however no\
    \ value has any particular\n   significance, there is no minimum or maximum serial\
    \ number, every\n   value has a successor and predecessor.\n   To define a serial\
    \ number to be used in this way, the size of the\n   serial number space must\
    \ be given.  This value, called \"SERIAL_BITS\",\n   gives the power of two which\
    \ results in one larger than the largest\n   integer corresponding to a serial\
    \ number value.  This also specifies\n   the number of bits required to hold every\
    \ possible value of a serial\n   number of the defined type.  The operations permitted\
    \ upon serial\n   numbers are defined in the following section.\n"
- title: 3. Operations upon the serial number
  contents:
  - "3. Operations upon the serial number\n   Only two operations are defined upon\
    \ serial numbers, addition of a\n   positive integer of limited range, and comparison\
    \ with another serial\n   number.\n"
- title: 3.1. Addition
  contents:
  - "3.1. Addition\n   Serial numbers may be incremented by the addition of a positive\n\
    \   integer n, where n is taken from the range of integers\n   [0 .. (2^(SERIAL_BITS\
    \ - 1) - 1)].  For a sequence number s, the\n   result of such an addition, s',\
    \ is defined as\n                   s' = (s + n) modulo (2 ^ SERIAL_BITS)\n  \
    \ where the addition and modulus operations here act upon values that\n   are\
    \ non-negative values of unbounded size in the usual ways of\n   integer arithmetic.\n\
    \   Addition of a value outside the range\n   [0 .. (2^(SERIAL_BITS - 1) - 1)]\
    \ is undefined.\n"
- title: 3.2. Comparison
  contents:
  - "3.2. Comparison\n   Any two serial numbers, s1 and s2, may be compared.  The\
    \ definition\n   of the result of this comparison is as follows.\n   For the purposes\
    \ of this definition, consider two integers, i1 and\n   i2, from the unbounded\
    \ set of non-negative integers, such that i1 and\n   s1 have the same numeric\
    \ value, as do i2 and s2.  Arithmetic and\n   comparisons applied to i1 and i2\
    \ use ordinary unbounded integer\n   arithmetic.\n   Then, s1 is said to be equal\
    \ to s2 if and only if i1 is equal to i2,\n   in all other cases, s1 is not equal\
    \ to s2.\n   s1 is said to be less than s2 if, and only if, s1 is not equal to\
    \ s2,\n   and\n        (i1 < i2 and i2 - i1 < 2^(SERIAL_BITS - 1)) or\n      \
    \  (i1 > i2 and i1 - i2 > 2^(SERIAL_BITS - 1))\n   s1 is said to be greater than\
    \ s2 if, and only if, s1 is not equal to\n   s2, and\n        (i1 < i2 and i2\
    \ - i1 > 2^(SERIAL_BITS - 1)) or\n        (i1 > i2 and i1 - i2 < 2^(SERIAL_BITS\
    \ - 1))\n   Note that there are some pairs of values s1 and s2 for which s1 is\n\
    \   not equal to s2, but for which s1 is neither greater than, nor less\n   than,\
    \ s2.  An attempt to use these ordering operators on such pairs\n   of values\
    \ produces an undefined result.\n   The reason for this is that those pairs of\
    \ values are such that any\n   simple definition that were to define s1 to be\
    \ less than s2 where\n   (s1, s2) is such a pair, would also usually cause s2\
    \ to be less than\n   s1, when the pair is (s2, s1).  This would mean that the\
    \ particular\n   order selected for a test could cause the result to differ, leading\n\
    \   to unpredictable implementations.\n   While it would be possible to define\
    \ the test in such a way that the\n   inequality would not have this surprising\
    \ property, while being\n   defined for all pairs of values, such a definition\
    \ would be\n   unnecessarily burdensome to implement, and difficult to understand,\n\
    \   and would still allow cases where\n        s1 < s2 and (s1 + 1) > (s2 + 1)\n\
    \   which is just as non-intuitive.\n   Thus the problem case is left undefined,\
    \ implementations are free to\n   return either result, or to flag an error, and\
    \ users must take care\n   not to depend on any particular outcome.  Usually this\
    \ will mean\n   avoiding allowing those particular pairs of numbers to co-exist.\n\
    \   The relationships greater than or equal to, and less than or equal\n   to,\
    \ follow in the natural way from the above definitions.\n"
- title: 4. Corollaries
  contents:
  - "4. Corollaries\n   These definitions give rise to some results of note.\n"
- title: 4.1. Corollary 1
  contents:
  - "4.1. Corollary 1\n   For any sequence number s and any integer n such that addition\
    \ of n\n   to s is well defined, (s + n) >= s.  Further (s + n) == s only when\n\
    \   n == 0, in all other defined cases, (s + n) > s.\n"
- title: 4.2. Corollary 2
  contents:
  - "4.2. Corollary 2\n   If s' is the result of adding the non-zero integer n to\
    \ the sequence\n   number s, and m is another integer from the range defined as\
    \ able to\n   be added to a sequence number, and s\" is the result of adding m\
    \ to\n   s', then it is undefined whether s\" is greater than, or less than s,\n\
    \   though it is known that s\" is not equal to s.\n"
- title: 4.3. Corollary 3
  contents:
  - "4.3. Corollary 3\n   If s\" from the previous corollary is further incremented,\
    \ then there\n   is no longer any known relationship between the result and s.\n"
- title: 4.4. Corollary 4
  contents:
  - "4.4. Corollary 4\n   If in corollary 2 the value (n + m) is such that addition\
    \ of the sum\n   to sequence number s would produce a defined result, then corollary\
    \ 1\n   applies, and s\" is known to be greater than s.\n"
- title: 5. Examples
  contents:
  - '5. Examples

    '
- title: 5.1. A trivial example
  contents:
  - "5.1. A trivial example\n   The simplest meaningful serial number space has SERIAL_BITS\
    \ == 2.  In\n   this space, the integers that make up the serial number space\
    \ are 0,\n   1, 2, and 3.  That is, 3 == 2^SERIAL_BITS - 1.\n   In this space,\
    \ the largest integer that it is meaningful to add to a\n   sequence number is\
    \ 2^(SERIAL_BITS - 1) - 1, or 1.\n   Then, as defined 0+1 == 1, 1+1 == 2, 2+1\
    \ == 3, and 3+1 == 0.\n   Further, 1 > 0, 2 > 1, 3 > 2, and 0 > 3.  It is undefined\
    \ whether\n   2 > 0 or 0 > 2, and whether 1 > 3 or 3 > 1.\n"
- title: 5.2. A slightly larger example
  contents:
  - "5.2. A slightly larger example\n   Consider the case where SERIAL_BITS == 8.\
    \  In this space the integers\n   that make up the serial number space are 0,\
    \ 1, 2, ... 254, 255.\n   255 == 2^SERIAL_BITS - 1.\n   In this space, the largest\
    \ integer that it is meaningful to add to a\n   sequence number is 2^(SERIAL_BITS\
    \ - 1) - 1, or 127.\n   Addition is as expected in this space, for example: 255+1\
    \ == 0,\n   100+100 == 200, and 200+100 == 44.\n   Comparison is more interesting,\
    \ 1 > 0, 44 > 0, 100 > 0, 100 > 44,\n   200 > 100, 255 > 200, 0 > 255, 100 > 255,\
    \ 0 > 200, and 44 > 200.\n   Note that 100+100 > 100, but that (100+100)+100 <\
    \ 100.  Incrementing\n   a serial number can cause it to become \"smaller\". \
    \ Of course,\n   incrementing by a smaller number will allow many more increments\
    \ to\n   be made before this occurs.  However this is always something to be\n\
    \   aware of, it can cause surprising errors, or be useful as it is the\n   only\
    \ defined way to actually cause a serial number to decrease.\n   The pairs of\
    \ values 0 and 128, 1 and 129, 2 and 130, etc, to 127 and\n   255 are not equal,\
    \ but in each pair, neither number is defined as\n   being greater than, or less\
    \ than, the other.\n   It could be defined (arbitrarily) that 128 > 0, 129 > 1,\n\
    \   130 > 2, ..., 255 > 127, by changing the comparison operator\n   definitions,\
    \ as mentioned above.  However note that that would cause\n   255 > 127, while\
    \ (255 + 1) < (127 + 1), as 0 < 128.  Such a\n   definition, apart from being\
    \ arbitrary, would also be more costly to\n   implement.\n"
- title: 6. Citation
  contents:
  - "6. Citation\n   As this defined arithmetic may be useful for purposes other than\
    \ for\n   the DNS serial number, it may be referenced as Serial Number\n   Arithmetic\
    \ from RFC1982.  Any such reference shall be taken as\n   implying that the rules\
    \ of sections 2 to 5 of this document apply to\n   the stated values.\n"
- title: 7. The DNS SOA serial number
  contents:
  - "7. The DNS SOA serial number\n   The serial number in the DNS SOA Resource Record\
    \ is a Serial Number\n   as defined above, with SERIAL_BITS being 32.  That is,\
    \ the serial\n   number is a non negative integer with values taken from the range\n\
    \   [0 .. 4294967295].  That is, a 32 bit unsigned integer.\n   The maximum defined\
    \ increment is 2147483647 (2^31 - 1).\n   Care should be taken that the serial\
    \ number not be incremented, in\n   one or more steps, by more than this maximum\
    \ within the period given\n   by the value of SOA.expire.  Doing so may leave\
    \ some secondary\n   servers with out of date copies of the zone, but with a serial\
    \ number\n   \"greater\" than that of the primary server.  Of course, special\n\
    \   circumstances may require this rule be set aside, for example, when\n   the\
    \ serial number needs to be set lower for some reason.  If this\n   must be done,\
    \ then take special care to verify that ALL servers have\n   correctly succeeded\
    \ in following the primary server's serial number\n   changes, at each step.\n\
    \   Note that each, and every, increment to the serial number must be\n   treated\
    \ as the start of a new sequence of increments for this\n   purpose, as well as\
    \ being the continuation of all previous sequences\n   started within the period\
    \ specified by SOA.expire.\n   Caution should also be exercised before causing\
    \ the serial number to\n   be set to the value zero.  While this value is not\
    \ in any way special\n   in serial number arithmetic, or to the DNS SOA serial\
    \ number, many\n   DNS implementations have incorrectly treated zero as a special\
    \ case,\n   with special properties, and unusual behaviour may be expected if\n\
    \   zero is used as a DNS SOA serial number.\n"
- title: 8. Document Updates
  contents:
  - "8. Document Updates\n   RFC1034 and RFC1035 are to be treated as if the references\
    \ to\n   \"sequence space arithmetic\" therein are replaced by references to\n\
    \   serial number arithmetic, as defined in this document.\n"
- title: 9. Security Considerations
  contents:
  - "9. Security Considerations\n   This document does not consider security.\n  \
    \ It is not believed that anything in this document adds to any\n   security issues\
    \ that may exist with the DNS, nor does it do anything\n   to lessen them.\n"
- title: References
  contents:
  - "References\n   [RFC1034]   Domain Names - Concepts and Facilities,\n        \
    \       P. Mockapetris, STD 13, ISI, November 1987.\n   [RFC1035]   Domain Names\
    \ - Implementation and Specification\n               P. Mockapetris, STD 13, ISI,\
    \ November 1987\n   [RFC793]    Transmission Control protocol\n              \
    \ Information Sciences Institute, STD 7, USC, September 1981\n   [IEN-74]    Sequence\
    \ Number Arithmetic\n               William W. Plummer, BB&N Inc, September 1978\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to Rob Austein for suggesting clarification of the\
    \ undefined\n   comparison operators, and to Michael Patton for attempting to\
    \ locate\n   another reference for this procedure.  Thanks also to members of\
    \ the\n   IETF DNSIND working group of 1995-6, in particular, Paul Mockapetris.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Robert Elz                     Randy Bush\n   Computer\
    \ Science               RGnet, Inc.\n   University of Melbourne        10361 NE\
    \ Sasquatch Lane\n   Parkville, Vic,  3052          Bainbridge Island, Washington,\
    \  98110\n   Australia.                     United States.\n   EMail: kre@munnari.OZ.AU\
    \       EMail: randy@psg.com\n"
