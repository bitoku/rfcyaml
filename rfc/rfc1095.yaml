- title: __initial_text__
  contents:
  - "  The Common Management Information Services and Protocol over TCP/IP\n     \
    \                   Table of Contents\n"
- title: 1. Status of this Memo ............................................    3
  contents:
  - '1. Status of this Memo ............................................    3

    '
- title: 2. Introduction ...................................................    4
  contents:
  - '2. Introduction ...................................................    4

    '
- title: 'Part I: Concepts and Models .......................................    7'
  contents:
  - 'Part I: Concepts and Models .......................................    7

    '
- title: 3. The OSI Management Framework ...................................    7
  contents:
  - '3. The OSI Management Framework ...................................    7

    '
- title: 3.1. Architectural Overview .......................................    7
  contents:
  - '3.1. Architectural Overview .......................................    7

    '
- title: 3.2. Management Models ............................................    8
  contents:
  - '3.2. Management Models ............................................    8

    '
- title: 3.2.1. The Organizational Model ...................................    8
  contents:
  - '3.2.1. The Organizational Model ...................................    8

    '
- title: 3.2.2. The Functional Model .......................................    8
  contents:
  - '3.2.2. The Functional Model .......................................    8

    '
- title: 3.2.3. The Information Model ......................................    9
  contents:
  - '3.2.3. The Information Model ......................................    9

    '
- title: 3.3. ISO Application Protocols ....................................    9
  contents:
  - '3.3. ISO Application Protocols ....................................    9

    '
- title: 3.3.1. ACSE .......................................................   10
  contents:
  - '3.3.1. ACSE .......................................................   10

    '
- title: 3.3.2. ROSE .......................................................   10
  contents:
  - '3.3.2. ROSE .......................................................   10

    '
- title: 3.3.3. CMISE ......................................................   10
  contents:
  - '3.3.3. CMISE ......................................................   10

    '
- title: 3.3.3.1. Management Association Services ..........................   11
  contents:
  - '3.3.3.1. Management Association Services ..........................   11

    '
- title: 3.3.3.2. Management Notification Services .........................   12
  contents:
  - '3.3.3.2. Management Notification Services .........................   12

    '
- title: 3.3.3.3. Management Operation Services ............................   12
  contents:
  - '3.3.3.3. Management Operation Services ............................   12

    '
- title: 4. The CMOT Architecture ..........................................   13
  contents:
  - '4. The CMOT Architecture ..........................................   13

    '
- title: 4.1. Management Models ............................................   13
  contents:
  - '4.1. Management Models ............................................   13

    '
- title: 4.1.1. The Organizational Model ...................................   13
  contents:
  - '4.1.1. The Organizational Model ...................................   13

    '
- title: 4.1.2. The Functional Model .......................................   14
  contents:
  - '4.1.2. The Functional Model .......................................   14

    '
- title: 4.1.3. The Information Model ......................................   14
  contents:
  - '4.1.3. The Information Model ......................................   14

    '
- title: 4.2. Protocol Architecture ........................................   14
  contents:
  - '4.2. Protocol Architecture ........................................   14

    '
- title: 4.2.1 The Lightweight Presentation Layer ..........................   15
  contents:
  - '4.2.1 The Lightweight Presentation Layer ..........................   15

    '
- title: 4.2.2 The Quality of Transport Service ............................   16
  contents:
  - '4.2.2 The Quality of Transport Service ............................   16

    '
- title: 4.3. Proxy Management .............................................   17
  contents:
  - '4.3. Proxy Management .............................................   17

    '
- title: 4.4. Directory Service ............................................   18
  contents:
  - '4.4. Directory Service ............................................   18

    '
- title: 5. Management Information .........................................   18
  contents:
  - '5. Management Information .........................................   18

    '
- title: 5.1. The Structure of Management Information ......................   19
  contents:
  - '5.1. The Structure of Management Information ......................   19

    '
- title: 5.1.1. The ISO SMI ................................................   19
  contents:
  - '5.1.1. The ISO SMI ................................................   19

    '
- title: 5.1.1.1. Managed Objects and Attributes ...........................   19
  contents:
  - '5.1.1.1. Managed Objects and Attributes ...........................   19

    '
- title: 5.1.1.2. Management Information Hierarchies .......................   20
  contents:
  - '5.1.1.2. Management Information Hierarchies .......................   20

    '
- title: 5.1.1.2.1 The Registration Hierarchy ..............................   20
  contents:
  - '5.1.1.2.1 The Registration Hierarchy ..............................   20

    '
- title: 5.1.1.2.2. The Containment Hierarchy ..............................   20
  contents:
  - '5.1.1.2.2. The Containment Hierarchy ..............................   20

    '
- title: 5.1.1.2.3. The Inheritance Hierarchy ..............................   22
  contents:
  - '5.1.1.2.3. The Inheritance Hierarchy ..............................   22

    '
- title: 5.1.2. The Internet SMI ...........................................   22
  contents:
  - '5.1.2. The Internet SMI ...........................................   22

    '
- title: 5.2. The Management Information Base ..............................   23
  contents:
  - '5.2. The Management Information Base ..............................   23

    '
- title: 5.3. An Interpretation of the Internet SMI ........................   24
  contents:
  - '5.3. An Interpretation of the Internet SMI ........................   24

    '
- title: 5.3.1. Object Class and Attributes ................................   25
  contents:
  - '5.3.1. Object Class and Attributes ................................   25

    '
- title: 5.3.1.1. Object Class .............................................   25
  contents:
  - '5.3.1.1. Object Class .............................................   25

    '
- title: 5.3.1.2. Attribute Identifier .....................................   26
  contents:
  - '5.3.1.2. Attribute Identifier .....................................   26

    '
- title: 5.3.2. Management Information Hierarchies .........................   26
  contents:
  - '5.3.2. Management Information Hierarchies .........................   26

    '
- title: 5.3.2.1. The Registration Hierarchy ...............................   26
  contents:
  - '5.3.2.1. The Registration Hierarchy ...............................   26

    '
- title: 5.3.2.2. The Containment Hierarchy ................................   26
  contents:
  - '5.3.2.2. The Containment Hierarchy ................................   26

    '
- title: 5.3.2.3. The Inheritance Hierarchy ................................   28
  contents:
  - '5.3.2.3. The Inheritance Hierarchy ................................   28

    '
- title: 5.4. Scoping, Filtering, and Synchronization ......................   28
  contents:
  - '5.4. Scoping, Filtering, and Synchronization ......................   28

    '
- title: 5.4.1. Scoping ....................................................   28
  contents:
  - '5.4.1. Scoping ....................................................   28

    '
- title: 5.4.2. Filtering ..................................................   29
  contents:
  - '5.4.2. Filtering ..................................................   29

    '
- title: 5.4.3. Synchronization ............................................   29
  contents:
  - '5.4.3. Synchronization ............................................   29

    '
- title: 5.4.4. Linked Replies .............................................   29
  contents:
  - '5.4.4. Linked Replies .............................................   29

    '
- title: 5.5. Accessing Tables .............................................   29
  contents:
  - '5.5. Accessing Tables .............................................   29

    '
- title: 5.5.1. Accessing Whole Tables .....................................   30
  contents:
  - '5.5.1. Accessing Whole Tables .....................................   30

    '
- title: 5.5.2. Accessing Table Entries ....................................   30
  contents:
  - '5.5.2. Accessing Table Entries ....................................   30

    '
- title: 'Part II: Protocol Agreements ......................................   32'
  contents:
  - 'Part II: Protocol Agreements ......................................   32

    '
- title: 6. CMOT Protocol Overview .........................................   32
  contents:
  - '6. CMOT Protocol Overview .........................................   32

    '
- title: 6.1. The CMOT Protocol Suite ......................................   32
  contents:
  - '6.1. The CMOT Protocol Suite ......................................   32

    '
- title: 6.2. Conformance Requirements .....................................   33
  contents:
  - '6.2. Conformance Requirements .....................................   33

    '
- title: 6.3. Abstract Syntax Notation .....................................   33
  contents:
  - '6.3. Abstract Syntax Notation .....................................   33

    '
- title: 7. Common Management Information Service Element ..................   34
  contents:
  - '7. Common Management Information Service Element ..................   34

    '
- title: 7.1. CMIS Services ................................................   34
  contents:
  - '7.1. CMIS Services ................................................   34

    '
- title: 7.1.1. CMIS Services Overview .....................................   34
  contents:
  - '7.1.1. CMIS Services Overview .....................................   34

    '
- title: 7.1.2. Functional Units ...........................................   34
  contents:
  - '7.1.2. Functional Units ...........................................   34

    '
- title: 7.1.3. Functional Unit Groups .....................................   36
  contents:
  - '7.1.3. Functional Unit Groups .....................................   36

    '
- title: 7.1.4. M-INITIALISE Parameters ....................................   37
  contents:
  - '7.1.4. M-INITIALISE Parameters ....................................   37

    '
- title: 7.1.4.1. Functional Units .........................................   37
  contents:
  - '7.1.4.1. Functional Units .........................................   37

    '
- title: 7.1.4.2. User Information .........................................   39
  contents:
  - '7.1.4.2. User Information .........................................   39

    '
- title: 7.1.4.3. Access Control ...........................................   39
  contents:
  - '7.1.4.3. Access Control ...........................................   39

    '
- title: 7.2. Supporting Services ..........................................   39
  contents:
  - '7.2. Supporting Services ..........................................   39

    '
- title: 7.3. CMIP Agreements ..............................................   39
  contents:
  - '7.3. CMIP Agreements ..............................................   39

    '
- title: 7.3.1. Invoke Identifier ..........................................   39
  contents:
  - '7.3.1. Invoke Identifier ..........................................   39

    '
- title: 7.3.2. Object Class ...............................................   40
  contents:
  - '7.3.2. Object Class ...............................................   40

    '
- title: 7.3.3. Object Instance ............................................   40
  contents:
  - '7.3.3. Object Instance ............................................   40

    '
- title: 7.3.4. Access Control .............................................   41
  contents:
  - '7.3.4. Access Control .............................................   41

    '
- title: 7.3.5. Synchronization ............................................   41
  contents:
  - '7.3.5. Synchronization ............................................   41

    '
- title: 7.3.6. Scope ......................................................   41
  contents:
  - '7.3.6. Scope ......................................................   41

    '
- title: 7.3.7. Filter .....................................................   41
  contents:
  - '7.3.7. Filter .....................................................   41

    '
- title: 7.3.8. Attribute Identifier .......................................   42
  contents:
  - '7.3.8. Attribute Identifier .......................................   42

    '
- title: 7.3.9. Event Type Identifier ......................................   42
  contents:
  - '7.3.9. Event Type Identifier ......................................   42

    '
- title: 7.3.10. Action Type Identifier ....................................   42
  contents:
  - '7.3.10. Action Type Identifier ....................................   42

    '
- title: 7.3.11. Time Fields ...............................................   43
  contents:
  - '7.3.11. Time Fields ...............................................   43

    '
- title: 7.3.12. Response PDUs .............................................   43
  contents:
  - '7.3.12. Response PDUs .............................................   43

    '
- title: 7.3.13. Error PDUs ................................................   43
  contents:
  - '7.3.13. Error PDUs ................................................   43

    '
- title: 8. Association Control Service Element ............................   43
  contents:
  - '8. Association Control Service Element ............................   43

    '
- title: 8.1. ACSE Services ................................................   44
  contents:
  - '8.1. ACSE Services ................................................   44

    '
- title: 8.2. Supporting Services ..........................................   44
  contents:
  - '8.2. Supporting Services ..........................................   44

    '
- title: 8.3. ACSE Protocol ................................................   45
  contents:
  - '8.3. ACSE Protocol ................................................   45

    '
- title: 8.3.1. Application Context Name ...................................   45
  contents:
  - '8.3.1. Application Context Name ...................................   45

    '
- title: 8.3.2. User Information ...........................................   45
  contents:
  - '8.3.2. User Information ...........................................   45

    '
- title: 8.3.3. Presentation Service Parameters ............................   46
  contents:
  - '8.3.3. Presentation Service Parameters ............................   46

    '
- title: 9. Remote Operations Service Element ..............................   46
  contents:
  - '9. Remote Operations Service Element ..............................   46

    '
- title: 9.1. ROSE Services ................................................   46
  contents:
  - '9.1. ROSE Services ................................................   46

    '
- title: 9.2. Supporting Services ..........................................   47
  contents:
  - '9.2. Supporting Services ..........................................   47

    '
- title: 9.3. ROSE Protocol ................................................   47
  contents:
  - '9.3. ROSE Protocol ................................................   47

    '
- title: 9.3.1. Operation Class ............................................   47
  contents:
  - '9.3.1. Operation Class ............................................   47

    '
- title: 9.3.2. Priority ...................................................   48
  contents:
  - '9.3.2. Priority ...................................................   48

    '
- title: 10. Lightweight Presentation ......................................   48
  contents:
  - '10. Lightweight Presentation ......................................   48

    '
- title: 10.1. Lightweight Presentation Services ...........................   48
  contents:
  - '10.1. Lightweight Presentation Services ...........................   48

    '
- title: 10.2. Supporting Services .........................................   48
  contents:
  - '10.2. Supporting Services .........................................   48

    '
- title: 10.3. Lightweight Presentation Protocol ...........................   49
  contents:
  - '10.3. Lightweight Presentation Protocol ...........................   49

    '
- title: 11. Acknowledgements ..............................................   49
  contents:
  - '11. Acknowledgements ..............................................   49

    '
- title: 12. References ....................................................   49
  contents:
  - '12. References ....................................................   49

    '
- title: Appendix A - The CMOT Group .......................................   52
  contents:
  - 'Appendix A - The CMOT Group .......................................   52

    '
- title: Appendix B - Management Information Summary .......................   53
  contents:
  - 'Appendix B - Management Information Summary .......................   53

    '
- title: Appendix C - Sample Protocol Exchanges ............................   60
  contents:
  - 'Appendix C - Sample Protocol Exchanges ............................   60

    '
- title: 1.  Status of this Memo
  contents:
  - "1.  Status of this Memo\n   This memo defines a network management architecture\
    \ that uses the\n   International Organization for Standardization's (ISO) Common\n\
    \   Management Information Services/Common Management Information\n   Protocol\
    \ (CMIS/CMIP) in a TCP/IP environment.  This architecture\n   provides a means\
    \ by which control and monitoring information can be\n   exchanged between a manager\
    \ and a remote network element.  In\n   particular, this memo defines the means\
    \ for implementing the Draft\n   International Standard (DIS) version of CMIS/CMIP\
    \ on top of Internet\n   transport protocols for the purpose of carrying management\n\
    \   information defined in the Internet-standard management information\n   base.\
    \  DIS CMIS/CMIP is suitable for deployment in TCP/IP networks\n   while CMIS/CMIP\
    \ moves toward becoming an International Standard.\n   Together with the relevant\
    \ ISO standards and the companion RFCs that\n   describe the initial structure\
    \ of management information and\n   management information base, these documents\
    \ provide the basis for a\n   comprehensive architecture and system for managing\
    \ TCP/IP-based\n   internets, and in particular the Internet.\n   The Internet\
    \ Activities Board (IAB) has designated two different\n   network management protocols\
    \ with the same status of \"Draft Standard\"\n   and \"Recommended\".\n   The\
    \ two protocols are the Common Management Information Services and\n   Protocol\
    \ over TCP/IP (CMOT) (this memo) and the Simple Network\n   Management Protocol\
    \ (SNMP) [4].\n   The IAB intends each of these two protocols to receive the attention\n\
    \   of implementers and experimenters.  The IAB seeks reports of\n   experience\
    \ with these two protocols from system builders and users.\n   By this action,\
    \ the IAB recommends that all IP and TCP\n   implementations be network manageable\
    \ (e.g., implement the Internet\n   MIB [3], and that implementations that are\
    \ network manageable are\n   expected to adopt and implement at least one of these\
    \ two Internet\n   Draft Standards.\n   Distribution of this memo is unlimited.\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   As reported in RFC 1052, \"IAB Recommendations for the Development\
    \ of\n   Internet Network Management Standards\" [1], the Internet Activities\n\
    \   Board (IAB) has directed the Internet Engineering Task Force (IETF)\n   to\
    \ coordinate the work of three working groups in the area of network\n   management.\
    \ First, the MIB working group was charged with the\n   specification and definition\
    \ of elements to be included in the\n   Management Information Base (MIB).  Second,\
    \ the SNMP working group\n   was charged with defining the modifications to the\
    \ Simple Network\n   Management Protocol (SNMP) necessary to accommodate the short-term\n\
    \   needs of the network vendor and operations communities.  Third, the\n   Netman\
    \ working group was directed to meet the longer-term needs of\n   the Internet\
    \ community by developing a network management system\n   based on ISO CMIS/CMIP.\
    \  Both the Netman working group and the SNMP\n   working group were directed\
    \ to align their work with the output of\n   the MIB working group in order to\
    \ ensure compatibility of management\n   information between the short-term and\
    \ long-term approaches to the\n   management of TCP/IP-based internets.  This\
    \ will enable a smooth\n   transition from the short-term protocol (SNMP) to the\
    \ long-term\n   protocol (CMIP).\n   The MIB working group has produced two memos.\
    \  RFC 1065 [2] defines\n   the Structure of Management Information (SMI) that\
    \ is necessary for\n   naming and defining managed objects in the MIB.  RFC 1066\
    \ [3] defines\n   the list of managed objects contained in the initial TCP/IP\
    \ MIB.  The\n   SNMP working group has produced a memo [4] giving the protocol\n\
    \   specification for SNMP and providing the SNMP protocol-specific\n   interpretation\
    \ of the Internet-standard MIB defined in RFC 1066.\n   This memo is the output\
    \ of the Netman working group.  As directed by\n   the IAB in RFC 1052, it addresses\
    \ the need for a long-term network\n   management system based on ISO CMIS/CMIP.\
    \  The network management\n   approach of using ISO protocols in a TCP/IP environment\
    \ to manage\n   TCP/IP networks can be described as \"CMIP Over TCP/IP\" (CMOT).\
    \  This\n   memo specifies the CMOT architecture and the protocol agreements\n\
    \   necessary to implement CMIP and accompanying ISO protocols over the\n   TCP\
    \ and UDP transport protocols.  In addition, this memo provides an\n   interpretation\
    \ of RFC 1066 that makes it possible to use CMIP to\n   convey management information\
    \ defined in the Internet-standard MIB.\n   There is widespread vendor support\
    \ for the CMOT approach to network\n   management.  This is amply shown by the\
    \ Netman demonstration of\n   prototype CMOT implementations at the Interop '88\
    \ TCP/IP\n   Interoperability Conference.  The demonstration also showed the\n\
    \   feasibility and power of the CMIS/CMIP framework for multivendor\n   network\
    \ management.  Now that CMIS/CMIP has been voted a Draft\n   International Standard\
    \ (DIS), many vendors feel that the ISO standard\n   has become a stable basis\
    \ for product development.  The clear need to\n   standardize this development\
    \ has led to the present profile of CMIP.\n   It is expected that this profile\
    \ will not change while the ISO\n   standard moves from DIS status to International\
    \ Standard (IS) status.\n   If, however, the standard does change unexpectedly,\
    \ the Netman\n   working group will review such changes for appropriate action.\n\
    \   Another rationale for the CMOT approach is that it will facilitate\n   the\
    \ early use of ISO network management standards in large\n   operational networks.\
    \  This will make it possible for the Internet\n   community to make valuable\
    \ recommendations to ISO in the language of\n   OSI management based on actual\
    \ experience with the use and\n   implementation of these standards.  There is\
    \ continuing network\n   management standards development work in ISO where such\
    \ contributions\n   would be valuable.\n   The CMOT architecture is based on the\
    \ Open Systems Interconnection\n   (OSI) management framework and models developed\
    \ by ISO.  This memo\n   contains a set of protocol agreements for implementing\
    \ a network\n   management system based on this architecture. The protocol agreement\n\
    \   sections of this memo must be read in conjunction with ISO and\n   Internet\
    \ documents defining specific protocol standards.  Documents\n   defining the\
    \ following ISO standards are required for the\n   implementor: Abstract Syntax\
    \ Notation One (ASN.1) [5, 6], Association\n   Control (ACSE) [7, 8], Remote Operations\
    \ (ROSE) [9, 10], Common\n   Management Information Services (CMIS) [11], and\
    \ Common Management\n   Information Protocol (CMIP) [12].  RFC 1085 [13] is required\
    \ for the\n   specification of a lightweight presentation layer protocol used\
    \ in\n   this profile.  In addition, RFC 1065 [2] and RFC 1066 [3] are\n   required\
    \ for a definition of the initial SMI and MIB to be used with\n   the CMOT management\
    \ system.\n   This memo is divided into two main parts.  The first part presents\n\
    \   concepts and models; the second part contains the protocol agreements\n  \
    \ necessary for implementation of the CMOT network management system.\n   The\
    \ first part of the memo is divided into three sections: section 3\n   contains\
    \ tutorial information on the OSI management framework;\n   section 4 defines\
    \ the basic CMOT approach; and section 5 discusses\n   the area of management\
    \ information and specifies how the abstract\n   management information defined\
    \ in the Internet-standard SMI and MIB\n   map into CMIP.  The second part of\
    \ this memo is divided into sections\n   for each of the protocols for which implementors'\
    \ agreements are\n   needed: CMISE, ACSE, ROSE, and the lightweight presentation\
    \ protocol.\n   The protocol profile defined in this part draws on the technical\
    \ work\n   of the OSI Network Management Forum [14] and the Network Management\n\
    \   Special Interest Group (NMSIG) of the National Institute of Standards\n  \
    \ and Technology (NIST) (formerly the National Bureau of Standards).\n   Wherever\
    \ possible, an attempt has been made to remain consistent with\n   the protocol\
    \ agreements reached by these groups.\n                        Part I: Concepts\
    \ and Models\n"
- title: 3.  The OSI Management Framework
  contents:
  - "3.  The OSI Management Framework\n   The OSI management framework [15] presents\
    \ the basic concepts and\n   models required for developing network management\
    \ standards.  OSI\n   management provides the ability to monitor and control network\n\
    \   resources, which are represented as \"managed objects.\" The following\n \
    \  elements are essential for the description of a network management\n   architecture\
    \ and the standardization of a network management system:\n   a model or set of\
    \ models for understanding management; a common\n   structure of management information\
    \ for registering, identifying, and\n   defining managed objects; detailed specifications\
    \ of the managed\n   objects; and a set of services and related protocols for\
    \ performing\n   remote management operations.\n"
- title: 3.1.  Architectural Overview
  contents:
  - "3.1.  Architectural Overview\n   The basic concepts underlying OSI network management\
    \ are quite simple\n   [16].  There reside application processes called \"managers\"\
    \ on\n   managing systems (or management stations).  There reside application\n\
    \   processes called \"agents\" on managed systems (or network elements\n   being\
    \ managed).  Network management occurs when managers and agents\n   conspire (via\
    \ protocols and a shared conceptual schema) to exchange\n   monitoring and control\
    \ information useful to the management of a\n   network and its components.  The\
    \ terms \"manager\" and \"agent\" are also\n   used in a loose and popular sense\
    \ to refer to the managing and\n   managed system, respectively.\n   The shared\
    \ conceptual schema mentioned above is a priori knowledge\n   about \"managed\
    \ objects\" concerning which information is exchanged.\n   Managed objects are\
    \ system and networking resources (e.g., a modem, a\n   protocol entity, an IP\
    \ routing table, a TCP connection) that are\n   subject to management. Management\
    \ activities are effected through the\n   manipulation of managed objects in the\
    \ managed systems.  Using the\n   management services and protocol, the manager\
    \ can direct the agent to\n   perform an operation on a managed object for which\
    \ it is responsible.\n   Such operations might be to return certain values associated\
    \ with a\n   managed object (read a variable), to change certain values associated\n\
    \   with a managed object (set a variable), or perform an action (such as\n  \
    \ self-test) on the managed object.  In addition, the agent may also\n   forward\
    \ notifications generated asynchronously by managed objects to\n   the manager\
    \ (events or traps).\n   The terms \"manager\" and \"agent\" are used to denote\
    \ the asymmetric\n   relationship between management application processes in\
    \ which the\n   manager plays the superior role and the agent plays the subordinate.\n\
    \   However, the specification of the management protocol (CMIP) defines\n   a\
    \ peer protocol relationship that makes no assumptions concerning\n   which end\
    \ opens or closes a connection, or the direction of\n   management data transfer.\
    \  The protocol mechanisms provided are fully\n   symmetric between the manager\
    \ and the agent; CMIS operations can\n   originate at either the manager or agent,\
    \ as far as the protocol is\n   concerned.  This allows the possibility of symmetric\
    \ as well as\n   asymmetric relationships between management processes.  Most\
    \ devices\n   will contain management applications that can only assume the agent\n\
    \   role.  Applications on managing systems, however, may well be able to\n  \
    \ play both roles at the same time.  This makes possible \"manager to\n   manager\"\
    \ communication and the ability of one manager to manage\n   another.\n"
- title: 3.2.  Management Models
  contents:
  - "3.2.  Management Models\n   Network management may be modeled in different ways.\
    \  Three models\n   are typically used to describe OSI management [17, 18].  An\n\
    \   organizational model describes ways in which management can be\n   administratively\
    \ distributed.  The functional model describes the\n   management functions and\
    \ their relationships.  The information model\n   provides guidelines for describing\
    \ managed objects and their\n   associated management information.\n"
- title: 3.2.1.  The Organizational Model
  contents:
  - "3.2.1.  The Organizational Model\n   The organizational model introduces the\
    \ concept of a management\n   \"domain.\" A domain is an administrative partition\
    \ of a network or\n   internet for the purpose of network management.  Domains\
    \ may be\n   useful for reasons of scale, security, or administrative autonomy.\n\
    \   Each domain may have one or more managers monitoring and controlling\n   agents\
    \ in that domain.  In addition, both managers and agents may\n   belong to more\
    \ than one management domain.  Domains allow the\n   construction of both strict\
    \ hierarchical and fully cooperative and\n   distributed network management systems.\n"
- title: 3.2.2.  The Functional Model
  contents:
  - "3.2.2.  The Functional Model\n   The OSI Management Framework [15] defines five\
    \ facilities or\n   functional areas to meet specific management needs. This has\
    \ proved\n   to be a helpful way of partitioning the network management problem\n\
    \   from an application point of view.  These facilities have come to be\n   known\
    \ as the Specific Management Functional Areas (SMFAs): fault\n   management, configuration\
    \ management, performance management,\n   accounting management, and security\
    \ management.  Fault management\n   provides the ability to detect, isolate, and\
    \ correct network\n   problems.  Configuration management enables network managers\
    \ to\n   change the configuration of remote network elements.  Performance\n \
    \  management provides the facilities to monitor and evaluate the\n   performance\
    \ of the network.  Accounting management makes it possible\n   to charge users\
    \ for network resources used and to limit the use of\n   those resources.  Finally,\
    \ security management is concerned with\n   managing access control, authentication,\
    \ encryption, key management,\n   and so on.\n"
- title: 3.2.3.  The Information Model
  contents:
  - "3.2.3.  The Information Model\n   The OSI Management Framework considers all\
    \ information relevant to\n   network management to reside in a Management Information\
    \ Base (MIB),\n   which is a \"conceptual repository of management information.\"\
    \n   Information within a system that can be referenced by the management\n  \
    \ protocol (CMIP) is considered to be part of the MIB.  Conventions for\n   describing\
    \ and uniquely identifying the MIB information allow\n   specific MIB information\
    \ to be referenced and operated on by the\n   management protocol.  These conventions\
    \ are called the Structure of\n   Management Information (SMI).  The information\
    \ model is described\n   more fully in section 5.\n"
- title: 3.3.  ISO Application Protocols
  contents:
  - "3.3.  ISO Application Protocols\n   The following ISO application services and\
    \ protocols are necessary\n   for doing network management using the OSI framework:\
    \ ACSE, ROSE, and\n   CMIS/CMIP.  All three of these protocols are defined using\
    \ ASN.1 [5].\n   The ASN.1 modules defining each of these protocols are found\
    \ in the\n   relevant standards documents.  The encoding rules for ASN.1 [6]\n\
    \   provide a machine-independent network representation for data.\n   A brief\
    \ overview of the terminology associated with the OSI\n   application layer structure\
    \ is presented here.  A complete treatment\n   of the subject can be found in\
    \ the OSI Application Layer Structure\n   document [22].\n   In the OSI environment,\
    \ communication between \"application processes\"\n   is modeled by communication\
    \ between application entities.  An\n   \"application entity\" represents the\
    \ communication functions of an\n   application process.  There may be multiple\
    \ sets of OSI communication\n   functions in an application process, so a single\
    \ application process\n   may be represented by multiple application entities.\
    \  However, each\n   application entity represents a single application process.\
    \  An\n   application entity contains a set of communication capabilities\n  \
    \ called \"application service elements.\" An application service element\n  \
    \ is a coherent set of integrated functions.  These application service\n   elements\
    \ may be used independently or in combination.  Examples of\n   application service\
    \ elements are X.400, FTAM, ACSE, ROSE, and CMISE.\n   When communication is required\
    \ between two application entities, one\n   or more \"application associations\"\
    \ are established between them.\n   Such an association can be viewed as a connection\
    \ at the level of the\n   application layer.  An \"application context\" defines\
    \ the set of\n   application service elements which may be invoked by the user\
    \ of an\n   application association.  The application context may prescribe one\n\
    \   or more application service elements.\n   Generally, an \"application layer\
    \ protocol\" is realized by the use of\n   the functionality of a number of application\
    \ service elements.  This\n   functionality is provided by the specification of\
    \ a set of\n   application protocol data units (APDUs) and the procedures governing\n\
    \   their use.  In general, the operation of an application layer\n   protocol\
    \ may require the combination of APDUs from different\n   application service\
    \ elements.  The application entity makes direct\n   use of presentation context\
    \ identifiers for the specification and\n   identification of APDUs.\n"
- title: 3.3.1.  ACSE
  contents:
  - "3.3.1.  ACSE\n   The Association Control Service Element (ACSE) is used to establish\n\
    \   and release associations between application entities. Before any\n   management\
    \ operations can be performed using CMIP, it is necessary\n   for the two application\
    \ entities involved to form an association.\n   Either the manager or the agent\
    \ can initiate association\n   establishment.  ACSE allows the manager and agent\
    \ to exchange\n   application entity titles for the purpose of identification\
    \ and\n   application context names to establish an application context. As\n\
    \   stated above, an application context defines what service elements\n   (for\
    \ instance, ROSE and CMISE) may be used over the association.\n   After the association\
    \ is established, ACSE is not used again until\n   the association is released\
    \ by the manager or agent.\n"
- title: 3.3.2.  ROSE
  contents:
  - "3.3.2.  ROSE\n   The Remote Operation Service Element (ROSE) is the ISO equivalent\
    \ of\n   remote procedure call.  ROSE allows the invocation of an operation to\n\
    \   be performed on a remote system.  The Remote Operation protocol\n   contains\
    \ an invoke identifier for correlating requests and responses,\n   an operation\
    \ code, and an argument field for parameters specific to\n   the operation.  ROSE\
    \ can only be invoked once an application\n   association has been established.\
    \  CMIP uses the transaction-oriented\n   services provided by ROSE for all its\
    \ requests and responses.  CMIP\n   also uses the error response facilities provided\
    \ by ROSE.\n"
- title: 3.3.3.  CMISE
  contents:
  - "3.3.3.  CMISE\n   The Common Management Information Service Element (CMISE) is\
    \ the\n   service element that provides the basic management services.  The\n\
    \   CMISE is a user of both ROSE and ACSE.  The CMISE provides both\n   confirmed\
    \ and unconfirmed services for reporting events and\n   retrieving and manipulating\
    \ management data. These services are used\n   by manager and agent application\
    \ entities to exchange management\n   information.  Table 1 provides a list of\
    \ the CMISE services.  In\n   addition, the CMISE also provides the ability to\
    \ issue a series of\n   (multiple) linked replies in response to a single request.\n\
    \           +-----------------+-------------------------+\n           |    Service\
    \      |     Type                |\n           +-----------------+-------------------------+\n\
    \           |  M-INITIALISE   | confirmed               |\n           |  M-TERMINATE\
    \    | confirmed               |\n           |  M-ABORT        | non-confirmed\
    \           |\n           |  M-EVENT-REPORT | confirmed/non-confirmed |\n    \
    \       |  M-GET          | confirmed               |\n           |  M-SET   \
    \       | confirmed/non-confirmed |\n           |  M-ACTION       | confirmed/non-confirmed\
    \ |\n           |  M-CREATE       | confirmed               |\n           |  M-DELETE\
    \       | confirmed               |\n           +-----------------+-------------------------+\n\
    \                Table 1.  CMISE Service Summary\n   CMIS services can be divided\
    \ into two main classes: management\n   association services and information transfer\
    \ services.  Furthermore,\n   there are two types of information transfer services:\
    \ management\n   notification services and management operation services.  In\
    \ addition\n   to the other CMIS services, the CMISE provides facilities that\
    \ enable\n   multiple responses to confirmed operations to be linked to the\n\
    \   operation by the use of a linked identification parameter.\n"
- title: 3.3.3.1.  Management Association Services
  contents:
  - "3.3.3.1.  Management Association Services\n   CMIS provides services for the\
    \ establishment and release of\n   application associations.  These services control\
    \ the establishment\n   and normal and abnormal release of a management association.\
    \ These\n   services are simply pass-throughs to ACSE.\n   The M-INITIALISE service\
    \ is invoked by a CMISE-service-user to\n   establish an association with a remote\
    \ CMISE-service-user for the\n   purpose of exchanging management information.\
    \ A reply is expected.\n   (A CMISE-service-user is that part of an application\
    \ process that\n   makes use of the CMISE.)\n   The M-TERMINATE service is invoked\
    \ by a CMISE-service-user to release\n   an association with a remote CMISE-service-user\
    \ in an orderly manner.\n   A reply is expected.\n   The M-ABORT service is invoked\
    \ by a CMISE-service-user or a CMISE-\n   service-provider to release an association\
    \ with a remote CMISE-\n   service-user in an abrupt manner.\n"
- title: 3.3.3.2.  Management Notification Services
  contents:
  - "3.3.3.2.  Management Notification Services\n   The definition of notification\
    \ and the consequent behavior of the\n   communicating entities is dependent upon\
    \ the specification of the\n   managed object which generated the notification\
    \ and is outside the\n   scope of CMIS.  CMIS provides the following service to\
    \ convey\n   management information applicable to notifications.\n   The M-EVENT-REPORT\
    \ service is invoked by a CMISE-service-user to\n   report an event about a managed\
    \ object to a remote CMISE-service-\n   user.  The service may be requested in\
    \ a confirmed or a non-confirmed\n   mode.  In the confirmed mode, a reply is\
    \ expected.\n"
- title: 3.3.3.3.  Management Operation Services
  contents:
  - "3.3.3.3.  Management Operation Services\n   The definition of the operation and\
    \ the consequent behavior of the\n   communicating entities is dependent upon\
    \ the specification of the\n   managed object at which the operation is directed\
    \ and is outside the\n   scope of CMIS.  However, certain operations are used\
    \ frequently\n   within the scope of management and CMIS provides the following\n\
    \   definitions of the common services that may be used to convey\n   management\
    \ information applicable to the operations.\n   The M-GET service is invoked by\
    \ a CMISE-service-user to request the\n   retrieval of management information\
    \ from a remote CMISE-service-user.\n   The service may only be requested in a\
    \ confirmed mode.  A reply is\n   expected.\n   The M-SET service is invoked by\
    \ a CMISE-service-user to request the\n   modification of management information\
    \ by a remote CMISE-service-\n   user.  The service may be requested in a confirmed\
    \ or a non-confirmed\n   mode.  In the confirmed mode, a reply is expected.\n\
    \   The M-ACTION service is invoked by a CMISE-service-user to request a\n   remote\
    \ CMISE-service-user to perform an action.  The service may be\n   requested in\
    \ a confirmed or a non-confirmed mode.  In the confirmed\n    mode, a reply is\
    \ expected.\n   The M-CREATE service is invoked by a CMISE-service-user to request\
    \ a\n   remote CMISE-service-user to create another instance of a managed\n  \
    \ object.  The service may only be requested in a confirmed mode.  A\n   reply\
    \ is expected.\n   The M-DELETE service is invoked by a CMISE-service-user to\
    \ request a\n   remote CMISE-service-user to delete an instance of a managed object.\n\
    \   The service may only be requested in a confirmed mode.  A reply is\n   expected.\n"
- title: 4.  The CMOT Architecture
  contents:
  - "4.  The CMOT Architecture\n   The CMOT (CMIP Over TCP/IP) architecture is based\
    \ on the OSI\n   management framework [15] and the models, services, and protocols\n\
    \   developed by ISO for network management.  The CMOT architecture\n   demonstrates\
    \ how the OSI management framework can be applied to a\n   TCP/IP environment\
    \ and used to manage objects in a TCP/IP network.\n   The use of ISO protocols\
    \ for the management of widely deployed TCP/IP\n   networks will facilitate the\
    \ ultimate migration from TCP/IP to ISO\n   protocols.  The concept of proxy management\
    \ is introduced as a useful\n   extension to the architecture.  Proxy management\
    \ provides the ability\n   to manage network elements that either are not addressable\
    \ by means\n   of an Internet address or use a network management protocol other\n\
    \   than CMIP.\n   The CMOT architecture specifies all the essential components\
    \ of a\n   network management architecture.  The OSI management framework and\n\
    \   models are used as the foundation for network management.  A\n   protocol-dependent\
    \ interpretation of the Internet SMI [2] is used for\n   defining management information.\
    \  The Internet MIB [3] provides an\n   initial list of managed objects.  Finally,\
    \ a means is defined for\n   using ISO management services and protocols on top\
    \ of TCP/IP\n   transport protocols.  Management applications themselves are not\n\
    \   included within the scope of the CMOT architecture.  What is\n   currently\
    \ standardized in this architecture is the minimum required\n   for building an\
    \ interoperable multivendor network management system.\n   Applications are explicitly\
    \ left as a competitive issue for network\n   developers and providers.\n"
- title: 4.1.  Management Models
  contents:
  - "4.1.  Management Models\n   The following sections indicate how the CMOT architecture\
    \ applies the\n   OSI managements models and point out any limitations the CMOT\n\
    \   architecture has as it is currently defined in this memo.\n"
- title: 4.1.1.  The Organizational Model
  contents:
  - "4.1.1.  The Organizational Model\n   It is beyond the scope of this memo to define\
    \ the relations and\n   interactions between different management domains.  The\
    \ current CMOT\n   architecture concerns itself only with the operations and\n\
    \   characteristics of a single domain of management.  The extension of\n   the\
    \ mechanisms defined here to include multiple domains is left for\n   further\
    \ study.\n"
- title: 4.1.2.  The Functional Model
  contents:
  - "4.1.2.  The Functional Model\n   The CMOT architecture provides the foundation\
    \ for carrying out\n   management in the five functional areas (fault, configuration,\n\
    \   performance, accounting, and security), but does not address\n   specifically\
    \ how any of these types of management are accomplished.\n   It is anticipated\
    \ that most functional requirements can be satisfied\n   by CMIS.  The greatest\
    \ impact of the functional requirements in the\n   various areas will likely be\
    \ on the definition of managed objects.\n"
- title: 4.1.3.  The Information Model
  contents:
  - "4.1.3.  The Information Model\n   There are two different SMI specifications\
    \ that are important to the\n   CMOT architecture. The first is the SMI currently\
    \ being defined by\n   ISO [19].  This SMI is important to the CMOT approach because\
    \ the ISO\n   management protocol CMIP has been designed with the ISO model of\n\
    \   management information in mind.  The second SMI of importance is the\n   that\
    \ defined by the IETF MIB working group for use in defining the\n   Internet MIB\
    \ [3].  This Internet SMI, which is loosely based on a\n   simplified version\
    \ of the ISO SMI, is important because the managed\n   objects defined for TCP/IP\
    \ networks to be used by CMOT are defined in\n   terms of it.  Thus, in order\
    \ to make the CMOT architecture complete,\n   it will be necessary to show how\
    \ the Internet SMI maps into CMIP in\n   such a way as to enable it to convey\
    \ the management information\n   defined in the Internet MIB.  This is done in\
    \ the section devoted to\n   management information (section 5).\n"
- title: 4.2.  Protocol Architecture
  contents:
  - "4.2.  Protocol Architecture\n   The objective of the CMOT protocol architecture\
    \ is to map the OSI\n   management protocol architecture into the TCP/IP environment.\
    \  The\n   model presented here follows the OSI model at the application layer,\n\
    \   while using Internet protocols at the transport layer.  The ISO\n   application\
    \ protocols used for network management are ACSE, ROSE, and\n   CMIP.  Instead\
    \ of implementing these protocols on top of the ISO\n   presentation, session,\
    \ and transport layer protocols, the protocol\n   data units (PDUs) for ACSE,\
    \ ROSE, and CMIP are carried using the\n   Internet transport protocols UDP [20]\
    \ and TCP [21].  This is made\n   possible by means of the lightweight presentation\
    \ protocol defined in\n   RFC 1085 [13] that maps ROSE and ACSE onto TCP/UDP/IP.\
    \  The use of\n   Internet transport protocols is transparent to network management\n\
    \   applications, since they are presented with real ISO services.\n"
- title: 4.2.1.  The Lightweight Presentation Layer
  contents:
  - "4.2.1.  The Lightweight Presentation Layer\n   Given that it is desired to put\
    \ ISO application protocols on top of\n   TCP/IP, how is this best accomplished?\
    \  It is necessary somehow to\n   fill the \"gap\" between the ISO protocols (ACSE\
    \ and ROSE) and the\n   Internet protocols (UDP and TCP).  Two basic approaches\
    \ were\n   considered.\n   One possible approach [23] is to extend the ISO portion\
    \ of the\n   protocol stack down to the transport layer.  The ISO Transport\n\
    \   Protocol Class 0 (TP 0) then uses TCP instead of an ISO network\n   protocol.\
    \  Effectively, this treats TCP as a reliable network\n   connection analogous\
    \ to X.25.  This approach allows us to operate\n   \"standard\" ISO applications\
    \ over TCP regardless of their service\n   requirements, since all ISO services\
    \ are provided.  In this case,\n   network management is just another such application.\
    \  The major\n   drawback with this approach is that full ISO presentation, session,\n\
    \   and transport layers are expensive to implement (both in terms of\n   processing\
    \ time and memory).\n   Another approach is presented in RFC 1085.  Since the\
    \ service\n   elements required for network management (ACSE, ROSE, CMISE) do\
    \ not\n   require the use of full ISO presentation layer services, it is\n   possible\
    \ to define a \"streamlined\" presentation layer that provides\n   only the services\
    \ required.  This lightweight presentation protocol\n   (LPP) allows the use of\
    \ ISO presentation services over both TCP and\n   UDP.  This approach eliminates\
    \ the necessity of implementing ISO\n   presentation, session, and transport protocols\
    \ for the sake of doing\n   ISO network management in a TCP/IP environment.  This\
    \ minimal\n   approach is justified because this non-ISO presentation protocol\
    \ used\n   is very small and very simple.  Thus, the LPP defined in RFC 1085\n\
    \   provides a compact and easy to implement solution to the problem.\n   The\
    \ resulting CMOT protocol stack is shown in Figure 1.\n                   Manager\
    \                              Agent\n           +-----------------------+   \
    \        +-----------------------+\n           |                       |     \
    \      |                       |\n           | +----+ +----+ +-----+ | <------->\
    \ | +----+ +----+ +-----+ |\n           | |ACSE| |ROSE| |CMISE| |    CMIP   |\
    \ |ACSE| |ROSE| |CMISE| |\n           | +----+ +----+ +-----+ |           | +----+\
    \ +----+ +-----+ |\n           |                       |           |         \
    \              |\n           +-----------------------+           +-----------------------+\n\
    \           |         LPP           |           |         LPP           |\n  \
    \         +-----------------------+           +-----------------------+\n    \
    \       |   TCP    |    UDP     |           |   TCP    |   UDP      |\n      \
    \     +-----------------------+           +-----------------------+\n        \
    \   |         IP            |           |         IP            |\n          \
    \ +-----------------------+           +-----------------------+\n           |\
    \         Link          |           |         Link          |\n           +-----------------------+\
    \           +-----------------------+\n                      |               \
    \                    |\n                      |                              \
    \     |\n                      |                                   |\n       \
    \    =========================================================\n             \
    \                     Network\n           =========================================================\n\
    \                     Figure 1.  The CMOT Protocol Architecture\n   It is important\
    \ to note that the presentation services provided by\n   the LPP are \"real\"\
    \ (but minimal) ISO presentation services [24].\n   This provides a clear migration\
    \ path to \"full ISO\" in the future.\n   Such a migration would be accomplished\
    \ by substituting ISO protocols\n   for the Internet protocols TCP, UDP, and IP\
    \ [25], and replacing the\n   LPP with ISO presentation and session protocols.\
    \  No changes will be\n   required in the ISO application layer protocols.  For\
    \ this reason,\n   investments in application development will be well preserved.\n"
- title: 4.2.2.  The Quality of Transport Service
  contents:
  - "4.2.2.  The Quality of Transport Service\n   The quality of transport service\
    \ needed for network management\n   applications is an issue that has caused much\
    \ controversy, yet it has\n   never been resolved.  There are two basic approaches:\
    \ datagram-\n   oriented and connection-oriented.  There are advantages and\n\
    \   disadvantages to both of these two approaches. While the datagram-\n   oriented\
    \ approach is simple, requires minimal code space, and can\n   operate under conditions\
    \ where connections may not be possible, the\n   connection-oriented approach\
    \ offers data reliability and provides\n   guaranteed and consistent service to\
    \ the driving application.\n   This memo does not take sides on this issue.  Rather\
    \ it passes such\n   resolution to the network management applications, which\
    \ are\n   ultimately the point where the requirements from the underlying\n  \
    \ service need to be determined.  As such, the CMOT protocol\n   architecture\
    \ provides both services.  The presentation layer service\n   allows the application\
    \ to select either high or low quality service\n   for the underlying transport.\
    \  Depending on this choice, the LPP will\n   use either UDP (low quality) or\
    \ TCP (high quality) to establish the\n   application association and carry the\
    \ application data.  It is\n   important, however, for the application to be aware\
    \ of the quality of\n   service that it is using: low quality means low quality!\
    \  The use of\n   an unreliable transport like UDP necessarily puts more burden\
    \ on the\n   application.\n"
- title: 4.3.  Proxy Management
  contents:
  - "4.3.  Proxy Management\n   Proxy is a term that originated in the legal community\
    \ to indicate an\n   entity empowered to perform actions on behalf of another.\
    \  In our\n   context, a proxy is a manager empowered to perform actions on behalf\n\
    \   of another manager.  This may be necessary because the manager cannot\n  \
    \ communicate directly with the managed devices either for security or\n   other\
    \ administrative reasons or because of incompatible communication\n   mechanisms\
    \ or protocols.  In either case, the proxy assumes the agent\n   role with respect\
    \ to the requesting manager and the manager role with\n   respect to the managed\
    \ device.\n   Some network elements, such as modems or bridges, may not be able\
    \ to\n   support CMIP and all the associated protocols.  In addition, such\n \
    \  devices may not have Internet addresses.  Such devices are called\n   \"limited\
    \ systems\".  It may be possible to manage these devices using\n   proprietary\
    \ mechanisms or other standard protocols (such as the IEEE\n   802.1 management\
    \ protocol for managing bridges).  In cases where it\n   is desirable to integrate\
    \ the management of such devices with the\n   overall CMOT management of an internet,\
    \ it is necessary to use proxy\n   management.  Some network elements that are\
    \ not \"limited systems\" as\n   described above may still benefit from the use\
    \ of proxy management.\n   If the management protocol supported by such a system\
    \ is proprietary\n   or some standard protocol other than CMIP (such as SNMP),\
    \ then CMOT\n   proxy management can be used to integrate the management of such\n\
    \   systems.\n   A proxy operates in the following manner.  When a CMOT manager\
    \ wants\n   to send a request to a managed device that it cannot communicate with\n\
    \   directly, it routes the request to the proxy.  The proxy maps the\n   CMIP\
    \ request into the information schema understood by the managed\n   device and\
    \ sends the appropriate request to the managed device using\n   the native management\
    \ protocol of the device.  When the proxy\n   receives the response from the managed\
    \ device, it uses CMIP to return\n   the information to the manager that made\
    \ the original request.\n   The use of proxy management can be largely transparent\
    \ to the\n   requesting manager, which appears to be exchanging information\n\
    \   directly with the selected device.  The only thing that is known to\n   the\
    \ manager is that additional \"instance\" information is required to\n   select\
    \ a particular device managed by the proxy.  Each proxy may\n   support many managed\
    \ devices, using the \"instance\" information to\n   multiplex CMIP requests and\
    \ responses among them.  The mapping\n   between a specific instance and an actual\
    \ managed device is a local\n   matter.  (The use of the CMIP Object Instance\
    \ field to select a\n   particular system to manage by proxy is explained below\
    \ in section\n   5.3.2.2.)\n   A proxy may also serve as an \"intermediate manager\"\
    \ in another less\n   transparent sense.  The proxy manager may be requested to\
    \ calculate\n   summary statistics on information gathered from many different\n\
    \   managed systems (e.g., the average number of PDUs transmitted or the\n   distribution\
    \ of PDUs transmitted over time).  The proxy may be\n   requested to log events\
    \ transmitted by the managed systems under its\n   control and to send to the\
    \ requesting manager only those events of\n   specific types.  When this use of\
    \ proxy management is made, the\n   conceptual schema for managed objects known\
    \ to both the requesting\n   manager and proxy must include definitions of these\
    \ aggregate managed\n   objects (i.e., objects that do not belong to any one managed\
    \ system).\n   How the aggregate statistics would be calculated and logging\n\
    \   performed based on information from the different devices managed by\n   the\
    \ proxy would be part of the definition of these aggregate managed\n   objects.\n"
- title: 4.4.  Directory Service
  contents:
  - "4.4.  Directory Service\n   RFC 1085 specifies the use of a minimal (or \"stub\"\
    ) directory\n   service.  It specifies how the service name for an OSI application\n\
    \   entity is converted into an \"application entity title.\" The\n   application\
    \ entity title is then mapped into a presentation address.\n   The form of a service\
    \ name, an application entity title, and a\n   presentation address can be found\
    \ in RFC 1085.\n"
- title: 5.  Management Information
  contents:
  - "5.  Management Information\n   The description of management information has\
    \ two aspects.  First, a\n   structure of management information (SMI) defines\
    \ the logical\n   structure of management information and how it is identified\
    \ and\n   described.  Second, the management information base (MIB), which is\n\
    \   specified using the SMI, defines the actual objects to be managed.\n   The\
    \ purpose of this section is to show how CMIP is used in the CMOT\n   architecture\
    \ to convey information defined in the Internet MIB.\n"
- title: 5.1.  The Structure of Management Information
  contents:
  - "5.1.  The Structure of Management Information\n   The SMI supplies the model\
    \ for understanding management information,\n   as well as templates and ASN.1\
    \ macros that can be used for defining\n   actual management information.  The\
    \ following sections discuss the\n   ISO SMI, the Internet SMI, and a way of interpreting\
    \ the Internet SMI\n   in terms of the ISO SMI so that CMIP can be used to carry\
    \ management\n   information defined in terms of the Internet SMI.\n"
- title: 5.1.1.  The ISO SMI
  contents:
  - "5.1.1.  The ISO SMI\n   The ISO SMI [19] is based on the abstraction of a \"\
    managed object\"\n   and the various kinds of relationships objects can be involved\
    \ in.\n   The following discussion does not purport to be a complete and\n   accurate\
    \ description of the latest ISO SMI work.  It is intended to\n   be a clear presentation\
    \ of the basic ISO SMI concepts essential for\n   understanding the CMIP-specific\
    \ interpretation of the Internet SMI\n   presented in section 5.3.\n"
- title: 5.1.1.1.  Managed Objects and Attributes
  contents:
  - "5.1.1.1.  Managed Objects and Attributes\n   Management Information is modeled\
    \ using object-oriented techniques.\n   All \"things\" in the network that are\
    \ to be managed are represented in\n   terms of managed objects.  A \"managed\
    \ object\" is an abstraction (or\n   logical view) for the purposes of network\
    \ management of a\n   \"manageable\" physical or logical resource of the network.\
    \  In this\n   context, \"manageable\" means that a particular resource can be\
    \ managed\n   by using CMIP.  Examples of managed objects are protocol entities,\n\
    \   modems, and connections.\n   Each managed object belongs to a particular object\
    \ class.  An \"object\n   class\" represents a collection of managed objects with\
    \ the same, or\n   similar, properties.  A particular managed object existing\
    \ in a\n   particular network is defined as an \"object instance\" of the object\n\
    \   class to which it belongs.  Thus, an object instance represents an\n   actual\
    \ realization of an object class (i.e., a managed object of a\n   particular class\
    \ bound to specific values).  An example of an object\n   class is \"transport\
    \ connection.\" In an actual network, there are a\n   number of managed objects\
    \ (specific transport connections) that are\n   instances of this class.  In summary,\
    \ a managed object type, which is\n   called an \"object class,\" is the collection\
    \ of all actual and\n   potential instances of that type.\n   Managed objects\
    \ are fully defined by specifying the \"attributes\" or\n   properties the object\
    \ has, the CMIS operations that can be performed\n   on the object (e.g., M-SET,\
    \ M-CREATE) and any constraints on those\n   operations, specific actions (e.g.,\
    \ self-test) that can be performed\n   on the object, events that the object can\
    \ generate, and information\n   about various relationships the object may be\
    \ involved in.  All of\n   this information relevant to a managed object is typically\
    \ provided\n   by filling in an object template.\n   Managed objects contain properties\
    \ that are referred to as\n   attributes.  Attributes are atomic items of information\
    \ that can only\n   be manipulated as a whole.  An example of an attribute is\
    \ a counter\n   providing a specific piece of information, such as the number\
    \ of\n   packets retransmitted.\n   Each object class and attribute is assigned\
    \ a unique identifier (an\n   ASN.1 OBJECT IDENTIFIER) for purposes of naming\
    \ by a registration\n   authority.\n"
- title: 5.1.1.2.  Management Information Hierarchies
  contents:
  - "5.1.1.2.  Management Information Hierarchies\n   Managed objects participate\
    \ in relationships with each other.  There\n   are two relationships that are\
    \ of particular importance for\n   management information: the containment relationship\
    \ and the\n   inheritance relationship.  These relationships can be used to\n\
    \   construct hierarchies of managed objects.  In addition, there is\n   another\
    \ hierarchy defined by the registration process for registering\n   identifiers\
    \ for object classes and attributes.\n"
- title: 5.1.1.2.1.  The Registration Hierarchy
  contents:
  - "5.1.1.2.1.  The Registration Hierarchy\n   The registration hierarchy is determined\
    \ by the ASN.1 registration\n   tree [5] for assigning OBJECT IDENTIFIERs.  An\
    \ OBJECT IDENTIFIER is\n   an administratively assigned name composed of a series\
    \ of integers\n   traversing a path from the root of the ASN.1 registration tree\
    \ to the\n   node or leaf to be identified.  For example, the sequence of integers\n\
    \   { iso(1) standard(0) ips-osi-mips(9596) cmip(2) } (1.0.9596.2) can be\n  \
    \ used to uniquely identify the CMIP standard.  Each node of this tree\n   has\
    \ an associated registration authority that determines how numbers\n   in the\
    \ subtree defined by that node are allocated.  In the context of\n   management,\
    \ these OBJECT IDENTIFIERs are used for identifying object\n   classes and attributes.\
    \  The registration hierarchy is not based on\n   any particular relationship\
    \ between managed objects or between\n   managed objects and their attributes.\
    \  It is independent of both the\n   inheritance and containment relationships\
    \ described below.  Its\n   purpose is simply to generate universally unique identifiers.\n"
- title: 5.1.1.2.2.  The Containment Hierarchy
  contents:
  - "5.1.1.2.2.  The Containment Hierarchy\n   The containment hierarchy is constructed\
    \ by applying the relationship\n   \"is contained in\" to objects and attributes.\
    \  Objects of one class\n   may contain objects of the same or different class.\
    \  Objects may also\n   contain attributes.  Attributes cannot contain objects\
    \ or other\n   attributes.  For example, objects of the class \"transport entity\"\
    \ may\n   contain objects of the class \"transport connection\"; an object of\
    \ the\n   class \"management domain\" may contain objects of the class \"node.\"\
    \ An\n   object class that contains another object class is called the\n   \"\
    superior\" object class; an object class that is contained in another\n   object\
    \ class is called the \"subordinate\" object class.  The\n   containment relationships\
    \ that an object may participate in are part\n   of the definition of the object\
    \ class to which that managed object\n   belongs.  All object classes (except\
    \ the topmost) must have at least\n   one possible superior in the containment\
    \ tree.  The definition of a\n   class may permit it to have more than one such\
    \ superior.  However,\n   individual instances of such a class are nevertheless\
    \ contained in\n   only one instance of a possible containing class.\n   The containment\
    \ hierarchy is important because it can be used for\n   identifying instances\
    \ of a managed object.  For example, assume there\n   is an object class \"domain\"\
    \ that contains an object class \"node\" that\n   contains an object class \"\
    transport entity\" that contains an object\n   class \"transport connection.\"\
    \ A particular instance of a transport\n   connection can be identified by the\
    \ concatenation of \"instance\n   information\" for each object class in the containment\
    \ path: {\n   domain=\"organization,\" node=\"herakles,\" transport entity=tp4,\n\
    \   transport connection=<TSAP-AddressA, TSAP-AddressB> }.\n   What constitutes\
    \ appropriate \"instance information\" for each object\n   class is part of the\
    \ definition of that object class and is known as\n   the \"distinguished attribute(s).\"\
    \ A distinguished attribute is\n   composed of an OBJECT IDENTIFIER naming the\
    \ attribute and the value\n   of the attribute.  For each object class, the distinguished\n\
    \   attributes that differentiate instances of that class are\n   collectively\
    \ called the \"relative distinguished name.\" A sequence of\n   relative distinguished\
    \ names (one for each class in the containment\n   path) is the \"distinguished\
    \ name\" of a managed object.  The example\n   given above represents the distinguished\
    \ name of a transport\n   connection.  The containment hierarchy is sometimes\
    \ referred to as\n   the \"naming tree\", because it is used to \"name\" a particular\
    \ instance\n   of a managed object.\n   The containment relationship also defines\
    \ an existence dependency\n   among its components; an object or attribute can\
    \ \"exist\" only if the\n   containing object also \"exists.\" Deletion of an\
    \ object may result in\n   deletion of all objects and attributes contained within\
    \ it.\n   Alternately, depending on the definition of the managed object,\n  \
    \ deletion may be refused until all contained managed objects have been\n   deleted.\n"
- title: 5.1.1.2.3.  The Inheritance Hierarchy
  contents:
  - "5.1.1.2.3.  The Inheritance Hierarchy\n   The inheritance hierarchy is constructed\
    \ by applying the relationship\n   \"inherits properties of\" to object classes.\
    \  An object class may\n   inherit properties of another object class; refinement\
    \ is obtained by\n   adding additional properties.  In this relationship, the\
    \ parent class\n   is called the \"superclass\" and the inheriting class the \"\
    subclass.\"\n   For example, the class \"layer entity\" may be a superclass of\
    \ \"network\n   entity,\" which in turn is a superclass of \"X.25 network entity.\"\
    \n   Attributes defined for \"network entity\" (e.g., the number of packets\n\
    \   sent) are automatically defined for \"X.25 network entity\" without\n   having\
    \ to explicitly include them in the definition for the class\n   \"X.25 network\
    \ entity.\" Thus, inheritance serves as a shorthand for\n   defining object classes\
    \ using object-oriented methodology.  Each\n   class (except the topmost) has\
    \ at least one superclass, but may have\n   zero, one, or many subclasses.  Subclasses\
    \ may in turn have further\n   subclasses, to any degree.  A special object called\
    \ \"top\" is the\n   ultimate superclass.  It has no properties of its own.\n\
    \   The inheritance hierarchy has no relevance to the naming of object\n   instances.\
    \  It is useful only insofar as it leads to a manageable and\n   extensible technique\
    \ for the definition of object classes.\n"
- title: 5.1.2.  The Internet SMI
  contents:
  - "5.1.2.  The Internet SMI\n   The Internet SMI [2] is designed to be a protocol-independent\
    \ SMI\n   that can be used with both SNMP and CMIP.  For this reason, it is\n\
    \   necessary for any management protocol that uses this SMI to show how\n   it\
    \ is to be interpreted in a protocol-specific manner.  This is done\n   for CMIP\
    \ in this memo.\n   The Internet SMI indicates both how to identify managed objects\
    \ and\n   how to define them.  The Internet SMI defines a registration subtree\n\
    \   rooted at { iso(1) org(3) dod(6) internet(1) } for the sake of\n   registering\
    \ OBJECT IDENTIFIERs to be used for uniquely identifying\n   managed objects.\
    \  The current Internet SMI specifies the format for\n   defining objects in terms\
    \ of an \"object type\" template and an\n   associated OBJECT-TYPE ASN.1 macro.\
    \  An object type definition\n   contains five fields: a textual name, along with\
    \ its corresponding\n   OBJECT IDENTIFIER; an ASN.1 syntax; a definition of the\
    \ semantics of\n   the object type; an access (read-only, read-write, write-only,\
    \ or\n   not-accessible); and a status (mandatory, optional, or obsolete).\n \
    \  The current Internet SMI does not provide any mechanism for defining\n   actions\
    \ or events associated with a managed object.\n   In describing management information,\
    \ the current Internet SMI does\n   not use the notions of \"object class\" and\
    \ \"attribute\" found in the\n   ISO SMI.  Only the concepts of \"object type\"\
    \ and \"object instance\"\n   are used.  The Internet SMI shows how to define\
    \ object types; it\n   leaves the specification of object instances as a protocol-specific\n\
    \   matter.  The current Internet structure of management information is\n   simpler\
    \ and less rich than the corresponding ISO structure. The ISO\n   SMI makes a\
    \ distinction between simple \"attributes,\" which can be\n   viewed as \"leaf\
    \ objects\" that are the lowest elements of the\n   containment hierarchy, and\
    \ composite \"managed objects\" that belong to\n   an \"object class\" and have\
    \ a structure associated with them (that is,\n   can contain attributes).  The\
    \ Internet SMI does not draw this\n   distinction; both simple and composite \"\
    objects\" are defined as\n   \"object types.\" What structure is associated with\
    \ objects in the\n   Internet SMI is defined through the deliberate attempt to\
    \ structure\n   the lower part of the Internet registration tree according to\n\
    \   containment principles.  (Objects that are considered \"attributes\" of\n\
    \   other containing objects are defined directly below them in the\n   object\
    \ registration tree.) This results in a certain lack of\n   flexibility, since\
    \ the registration hierarchy is implicitly used to\n   define the containment\
    \ hierarchy.  This means that the Internet SMI\n   does not contain a mechanism\
    \ for defining containment relationships\n   that do not happen to coincide with\
    \ the registration hierarchy.  In\n   interpreting the Internet SMI for use with\
    \ CMIP, it is necessary to\n   overcome this limitation.\n"
- title: 5.2.  The Management Information Base
  contents:
  - "5.2.  The Management Information Base\n   The Management Information Base (MIB)\
    \ is a \"conceptual repository of\n   management information.\" It is an abstract\
    \ view of all the objects in\n   the network that can be managed.  Note that the\
    \ MIB is conceptual in\n   that it does not carry any implications whatsoever\
    \ about the physical\n   storage (main memory, files, databases, etc.) of management\n\
    \   information.  The SMI provides the guidelines for defining objects\n   contained\
    \ in the MIB.\n   The CMOT approach will use the Internet MIB based on the Internet\
    \ SMI\n   described above.  The first version of the Internet MIB, which is the\n\
    \   product of the IETF MIB working group, is defined in RFC 1066 [3].\n   It\
    \ contains objects divided into eight groups: system, interfaces,\n   address\
    \ translation, IP, ICMP, TCP, UDP, and EGP.  In addition, the\n   Internet SMI\
    \ provides for future versions of the Internet MIB and a\n   means for otherwise\
    \ extending the MIB through the registration of\n   managed objects under \"private\"\
    \ and \"experimental\" branches of the\n   object registration tree.  Appendix\
    \ B provides a protocol-specific\n   interpretation of the first version of the\
    \ TCP/IP MIB defined in [3]\n   so that it can be used with CMOT.  This interpretation\
    \ is based on a\n   straightforward mapping of the current Internet SMI to the\
    \ ISO SMI\n   (section 5.3).\n   The initial version of the Internet MIB concentrates\
    \ on defining\n   objects associated with various Internet protocols.  It is expected\n\
    \   that future versions of the Internet MIB and various extensions will\n   provide\
    \ a much richer set of objects to manage, including management\n   information\
    \ about a variety of network devices and systems.  Thus, an\n   expanded MIB will\
    \ allow wide-ranging and powerful management using\n   the CMOT approach.\n"
- title: 5.3.  An Interpretation of the Internet SMI
  contents:
  - "5.3.  An Interpretation of the Internet SMI\n   In order to use CMIP to convey\
    \ information defined in terms of the\n   Internet SMI, it is necessary to show\
    \ how object instances are\n   specified and to provide the necessary structure\
    \ for differentiating\n   object class and attributes.  These objectives are both\
    \ met by\n   separating the containment hierarchy used for naming objects from\
    \ the\n   registration hierarchy and by imposing an \"object class\" structure\
    \ on\n   the Internet SMI.  Using the technique of imposing an object class\n\
    \   structure does not replace or redefine the object definitions in the\n   Internet\
    \ MIB; it merely provides a necessary gloss or commentary on a\n   MIB defined\
    \ in terms of the Internet SMI.  For example, Appendix B\n   references the \"\
    object type\" definitions found in [3], but imposes\n   additional structure on\
    \ them.\n   This object class definition derives from a simplified version of\
    \ the\n   OBJECT-CLASS macro defined in the ISO SMI [19].  The more complex\n\
    \   definition is not needed for present purposes.  (The object class\n   definition\
    \ presented here could be extended in the future to show\n   what actions and\
    \ events are associated with a managed object.) The\n   object class definition\
    \ has the following fields:\n   OBJECT CLASS:\n   ------------\n      A textual\
    \ name, termed the OBJECT CLASS DESCRIPTOR, for the object\n      class, along\
    \ with its corresponding OBJECT IDENTIFIER.\n   Definition:\n      A textual description\
    \ of the object class.\n   Subclass Of:\n      The OBJECT CLASS DESCRIPTOR of\
    \ the object class that is the\n      superclass of this object class. This field\
    \ is used for indicating\n      the inheritance relationship.\n   Superiors:\n\
    \      A list of OBJECT CLASS DESCRIPTORs of the possible superior object\n  \
    \    classes of this object class. This field is used for indicating\n      the\
    \ containment relationship.\n   Names:\n      A list of OBJECT DESCRIPTORs identifying\
    \ the OBJECT TYPES that are\n      the distinguished attributes of this object\
    \ class. (The OBJECT-\n      TYPE macro is defined in RFC 1065). Attributes listed\
    \ here will\n      normally be present in the Attribute field of the object class\n\
    \      definition.  This field is used for indicating what attributes\n      must\
    \ be present in the relative distinguished name that indicates\n      an instance\
    \ of this object class.\n   Attributes:\n      A list of OBJECT DESCRIPTORs identifying\
    \ the OBJECT TYPES that are\n      attributes of this object class. (The OBJECT-TYPE\
    \ macro is defined\n      in RFC 1065). This field is used for indicating the\
    \ attributes\n      that are contained in this object class.\n      This object\
    \ class definition satisfies our objectives for\n      interpreting the Internet\
    \ SMI for use by CMIP.  The Attributes\n      field shows what attributes are\
    \ contained in this object class;\n      this makes the necessary distinction\
    \ between object classes and\n      attributes required by CMIP.  Instead of referencing\
    \ an\n      \"attribute\" def inition (as is done in the ISO SMI), the\n     \
    \ Attributes field references the \"object type\" definition found in\n      RFC\
    \ 1065 and used to define the Internet-standard MIB in RFC 1066.\n      The name,\
    \ syntax, and access information required for attributes\n      is contained in\
    \ the \"object type\" definition.  Two things are\n      required for specifying\
    \ an instance of a managed object: a\n      containment relationship determining\
    \ a sequence of object classes\n      and a means for specifying the distinguished\
    \ attributes for an\n      object class.  The Superiors field makes the containment\n\
    \      relationship explicit; it is no longer merely a function of the\n     \
    \ registration tree.  The Names field makes it possible to indicate\n      the\
    \ distinguished attributes for an object class required for\n      giving instance\
    \ information.  Thus, the object class definition\n      makes it possible to\
    \ specify an object instance using CMIP.\n"
- title: 5.3.1.  Object Class and Attributes
  contents:
  - "5.3.1.  Object Class and Attributes\n   The mapping of management information\
    \ to the CMIS parameters Managed\n   Object Class and Attribute Identifier List\
    \ now becomes apparent.\n"
- title: 5.3.1.1.  Object Class
  contents:
  - "5.3.1.1.  Object Class\n   The CMIS Managed Object Class parameter is the OBJECT\
    \ IDENTIFIER\n   assigned to the particular object class.  For example, the Managed\n\
    \   Object Class for the object class \"ip\" (as defined in Appendix B) is\n \
    \       { mib 4 } = 1.3.6.1.2.1.4.\n"
- title: 5.3.1.2.  Attribute Identifier
  contents:
  - "5.3.1.2.  Attribute Identifier\n   The CMIS Attribute Identifier List parameter\
    \ is a list of Attribute\n   Identifiers.  An Attribute Identifier can be either\
    \ global or local.\n   If it is global, then it is the OBJECT IDENTIFIER assigned\
    \ to the\n   attribute (i.e., \"object type\") that is being indicated.  For\n\
    \   example, the global Attribute Identifier for the attribute\n   \"ipForwarding\"\
    \ (as defined in [3]) is\n        { ip 1 } = 1.3.6.1.2.1.4.1.\n   If the Attribute\
    \ Identifier is local, it is an integer that is the\n   last component in the\
    \ OBJECT IDENTIFIER identifying the object.  For\n   ipForwarding, the local Attribute\
    \ Identifier is 1.  In the case where\n   the local identifier is used, the leading\
    \ components of the OBJECT\n   IDENTIFIER for the attribute must be the OBJECT\
    \ IDENTIFIER of the\n   containing object class.  This is true for the interpreted\
    \ Internet\n   MIB defined in Appendix B, but may not be true generally.  The\
    \ local\n   identifier is intended to be interpreted relative to the Managed\n\
    \   Object Class field of the CMIP PDU.  When a local Attribute\n   Identifier\
    \ is encountered in a CMIP PDU, the global form of the\n   identifier is formed\
    \ by prepending the OBJECT IDENTIFIER in the\n   Managed Object Class field to\
    \ the local identifier.  This is valid\n   only when scoping is not used (i.e.,\
    \ scoping is \"baseObject\").  If\n   scoping is used, then the global form of\
    \ the Attribute Identifier\n   must be used instead of the local form.\n"
- title: 5.3.2.  Management Information Hierarchies
  contents:
  - "5.3.2.  Management Information Hierarchies\n   The following sections show how\
    \ the three management information\n   hierarchies are to be understood for the\
    \ interpreted Internet SMI.\n"
- title: 5.3.2.1.  The Registration Hierarchy
  contents:
  - "5.3.2.1.  The Registration Hierarchy\n   The registration hierarchy is the global\
    \ object registration tree\n   described in [2].  It is used merely for assigning\
    \ identifiers for\n   object classes and attributes (i.e., \"object types\" in\
    \ RFC 1065).\n"
- title: 5.3.2.2.  The Containment Hierarchy
  contents:
  - "5.3.2.2.  The Containment Hierarchy\n   As described above, the containment hierarchy\
    \ is used to specify an\n   object instance.  The Names field of the object class\
    \ definition\n   contains the distinguished attributes for the object class. \
    \ The\n   OBJECT IDENTIFIER naming the \"attribute\" together with its value is\n\
    \   called an attribute value assertion.  A set of attribute value\n   assertions\
    \ (one for each distinguished attribute) is the relative\n   distinguished name\
    \ associated with that object class.  The sequence\n   of relative distinguished\
    \ names for each of the object classes in the\n   containment hierarchy to which\
    \ a managed object belongs is the\n   distinguished name of the object.  An object\
    \ instance is fully\n   specified by a distinguished name.\n   Let us take a concrete\
    \ example from Appendix B.  How would we\n   represent an instance of an entry\
    \ in the IP routing table?  We begin\n   by examining the object class in question\
    \ (ipRouteEntry) and use the\n   Superiors field to find the superior class in\
    \ the containment\n   hierarchy (ipRoutingTable).  This process continues until\
    \ we\n   construct the following containment path of object classes: system,\n\
    \   ip, ipRoutingTable, ipRouteEntry.  Now for each of these object\n   classes,\
    \ we inspect the Names field to find the distinguished\n   attribute for that\
    \ object class.  If no Names field is present (as is\n   the case for \"ip\" and\
    \ \"ipRoutingTable\"), then no instance information\n   is required at that level.\
    \  Both \"system\" and \"ipRouteEntry\" have\n   Name fields to show what information\
    \ is expected at that level.  With\n   this information, we can construct the\
    \ following distinguished name\n   specifying an instance of an IP routing table\
    \ entry:\n                  baseManagedObjectInstance {\n                    \
    \ distinguishedName {\n                        relativeDistinguishedName {   \
    \ -- system\n                           attributeValueAssertion {\n          \
    \                    attributeType { cmotSystemID }\n                        \
    \      attributeValue \"gateway1.acme.com\"\n                           }\n  \
    \                      },\n                        relativeDistinguishedName {\
    \    -- ipRouteEntry\n                           attributeValueAssertion {\n \
    \                             attributeType { ipRouteDest }\n                \
    \              attributeValue 10.0.0.51\n                           }\n      \
    \                  }\n                     }\n                  }\n   If the system\
    \ instance information is not present, then it is assumed\n   to be the system\
    \ with which the management association is established\n   (i.e., the system receiving\
    \ the request).\n   Note that the object instance tree can contain components\
    \ of the\n   distinguished name that are outside the managed system (node).  This\n\
    \   enables referencing of objects across management domains (there could\n  \
    \ be an object class \"domain\") and across a collection of nodes.  In a\n   network\
    \ where several intermediate managers may be involved in a\n   request, each intermediate\
    \ manager can use the \"system\" portion of\n   the name to determine where to\
    \ send a request or result.  This\n   technique of naming treats each intermediate\
    \ managing system as a\n   proxy manager.  The proxy manager resolves the address\
    \ of the next\n   node in the chain and may use a different protocol to transfer\
    \ the\n   request or result.  Thus, the \"system\" instance information can be\n\
    \   used to name devices being managed by proxy.\n"
- title: 5.3.2.3.  The Inheritance Hierarchy
  contents:
  - "5.3.2.3.  The Inheritance Hierarchy\n   The Internet SMI does not use the inheritance\
    \ relationship. The\n   \"Subclass Of\" field is present in the object class definition\
    \ to show\n   how the inheritance relationship would be represented and to allow\n\
    \   for future extensibility.  It is not used for any of the object\n   classes\
    \ defined in Appendix B.\n"
- title: 5.4.  Scoping, Filtering, and Synchronization
  contents:
  - "5.4.  Scoping, Filtering, and Synchronization\n   Within some services, CMIS\
    \ provides additional capabilities that are\n   related to the SMI.  These are\
    \ the scoping, filtering,\n   synchronization, and linked-reply facilities.  The\
    \ presence of these\n   facilities are indicated by the Multiple Object Selection\
    \ Functional\n   Unit defined in CMIS [11].\n   These facilities provide the manager\
    \ with the ability to operate on a\n   collection of managed objects, rather than\
    \ a single object.  The\n   selection of multiple objects occurs in two phases:\
    \ scoping and\n   filtering.  Scoping is used to identify the managed objects\
    \ to which\n   a filter is to be applied.  Then filtering is used to select a\
    \ subset\n   of managed objects that satisfy certain conditions.  If scoping is\n\
    \   not used, only the \"base\" managed object indicated by the CMIS\n   Managed\
    \ Object Class parameter is implied.  An example of the use of\n   scoping and\
    \ filtering for selecting a particular managed object (a\n   table entry) is given\
    \ in one of the sample protocol exchanges found\n   in Appendix C.\n"
- title: 5.4.1.  Scoping
  contents:
  - "5.4.1.  Scoping\n   Scoping is meant to be understood in terms of the containment\n\
    \   hierarchy.  A position at a certain level of the containment tree is\n   defined\
    \ by the CMIS Managed Object Class parameter.  The CMIS Scope\n   parameter is\
    \ then interpreted relative to this \"base\" managed object\n   (defined by both\
    \ object class and object instance).  The Scope\n   parameter can be used to select\
    \ the base object alone, all managed\n   objects in the entire subtree (of the\
    \ containment tree) below the\n   base object, or all managed objects in the \"\
    n\"th level (n = 1, 2,\n   3,...) below the base object.\n"
- title: 5.4.2.  Filtering
  contents:
  - "5.4.2.  Filtering\n   Within the objects selected as a result of the scope parameter,\
    \ it is\n   possible to further refine the selection of managed objects through\n\
    \   the use of filtering.  Filtering provides the ability to select a\n   subset\
    \ of these objects based on conditions applied to attributes\n   (e.g., IP routing\
    \ table entries with the \"ipRouteAge > 100\") and\n   logical operations (and,\
    \ or, not).\n"
- title: 5.4.3.  Synchronization
  contents:
  - "5.4.3.  Synchronization\n   When multiple managed objects have been selected\
    \ using scoping and\n   filtering, the question of synchronization across object\
    \ instances\n   (such as multiple IP routing table entries) arises.  The two possible\n\
    \   choices are \"best effort\" and \"atomic.\" If \"best effort\"\n   synchronization\
    \ is selected, the failure to apply an operation (e.g.,\n   M-SET) to one instance\
    \ of an object does not affect the effort to\n   apply this operation to other\
    \ instances of the object.  If \"atomic\"\n   synchronization is selected, then\
    \ the operation is either performed\n   on all object instances selected or none.\
    \  The default\n   synchronization is best effort.\n"
- title: 5.4.4.  Linked Replies
  contents:
  - "5.4.4.  Linked Replies\n   If the reply to a single request for a set of managed\
    \ objects results\n   in more than one managed object being returned, all of these\
    \ managed\n   objects cannot be returned together in a single CMIP response PDU.\n\
    \   The reason for this is that the structure of the CMIP response PDU\n   only\
    \ has a single field for containing object instance information.\n   Since each\
    \ managed object has its own instance information, each\n   managed object must\
    \ be returned in a separate CMIP PDU.  In such a\n   case, the CMIP Linked Reply\
    \ PDU is used.  The Linked Reply PDU\n   provides a means of associating each\
    \ of the multiple replies with the\n   original request that generated them. \
    \ Thus, a single CMIP Get\n   Request PDU that uses scoping and filtering would\
    \ result in zero or\n   more CMIP Linked Reply PDUs being returned before a final\
    \ CMIP Get\n   Result PDU.\n   A linked reply can also be used to segment a CMIP\
    \ response pertaining\n   to a single managed object.  This would only be necessary\
    \ if UDP is\n   being used as the underlying transport and it is not possible\
    \ to\n   return all the information requested about the managed object in a\n\
    \   single response PDU subject to the size limitations described in\n   section\
    \ 10.2.\n"
- title: 5.5.  Accessing Tables
  contents:
  - "5.5.  Accessing Tables\n   This section explains how to use the interpreted Internet\
    \ SMI and MIB\n   to access tables.\n"
- title: 5.5.1.  Accessing Whole Tables
  contents:
  - "5.5.1.  Accessing Whole Tables\n   A whole table is accessed by specifying the\
    \ object class of the\n   table, indicating a scoping level of one, and not providing\
    \ an\n   attribute identifier list. The CMIS standard [11] specifies that if\n\
    \   the attribute identifier parameter is not present, then all attribute\n  \
    \ identifiers are assumed.  The following CMIS parameters would be used\n   to\
    \ return the entire TCP connection table:\n        Object Class: { tcpConnTable\
    \ }\n        Object Instance: \"empty\" (unless proxy management is used)\n  \
    \      Scope: oneLevel(1)\n        Filter: not present\n        Attribute Identifier\
    \ List: not present\n   By scoping one level below \"tcpConnTable,\" all managed\
    \ objects of the\n   class \"tcpConnEntry\" are selected.  (The object class \"\
    tcpConnEntry\"\n   is the only object class one level below the object class\n\
    \   \"tcpConnTable\" in the containment hierarchy.) The absence of an\n   attribute\
    \ identifier list signals that all attributes of the managed\n   object are to\
    \ be returned (i.e., all fields of the TCP connection\n   table entry).\n   In\
    \ reply to this request, each entry of the table will be returned in\n   a separate\
    \ CMIP PDU (either a Linked Reply PDU or a Get Result PDU).\n   Each reply CMIP\
    \ PDU will specify the Object Class \"tcpConnEntry\" and\n   the appropriate Object\
    \ Instance information for that entry, as well\n   as an Attribute List giving\
    \ the values of each of the fields of the\n   table entry.\n"
- title: 5.5.2.  Accessing Table Entries
  contents:
  - "5.5.2.  Accessing Table Entries\n   An entire table entry is accessed by specifying\
    \ the object class of\n   the table entry, providing a distinguished name specifying\
    \ the\n   instance of the table entry, and not providing an attribute\n   identifier\
    \ list. As seen above, the absence of the attribute\n   identifier list parameter\
    \ indicates that all attributes are assumed.\n   The absence of a scope parameter\
    \ indicates that the base managed\n   object class is intended.  The following\
    \ CMIS parameters would be\n   used to return the entire IP routing table entry\
    \ for which the field\n   \"ipRouteDest\" has the value 10.0.0.51:\n        Object\
    \ Class: { ipRouteEntry }\n        Object Instance: { ipRouteDest, 10.0.0.51 }\n\
    \        Scope: not present\n        Filter: not present\n        Attribute Identifier\
    \ List: not present\n   The result is returned in a single CMIP Get Result PDU\
    \ with an\n   attribute list consisting of all of the attributes (i.e., fields)\
    \ of\n   the table entry and their corresponding values.\n   If the object class\
    \ field refers to a table entry and no instance\n   information is provided to\
    \ select a particular entry, then a\n   \"noSuchObjectInstance\" CMIP error should\
    \ be returned.\n                       Part II: Protocol Agreements\n"
- title: 6.  CMOT Protocol Overview
  contents:
  - "6.  CMOT Protocol Overview\n   This part of the document is a specification of\
    \ the protocols of the\n   CMOT architecture. Contained herein are the agreements\
    \ required to\n   implement interoperable network management systems using these\n\
    \   protocols.  The protocol suite defined by these implementors'\n   agreements\
    \ will facilitate communication between equipment of\n   different vendors, suppliers,\
    \ and networks.  This will allow the\n   emergence of powerful multivendor network\
    \ management based on ISO\n   models and protocols.\n   The choice of a set of\
    \ protocol standards together with further\n   agreements needed to implement\
    \ those standards is commonly referred\n   to as a \"profile.\" The selection\
    \ policy for the CMOT profile is to\n   use existing standards from the international\
    \ standards community\n   (ISO and CCITT) and the Internet community.  Existing\
    \ ISO standards\n   and draft standards in the area of OSI network management\
    \ form the\n   basis of this CMOT profile.  Other ISO application layer standards\n\
    \   (ROSE and ACSE) are used to support the ISO management protocol\n   (CMIP).\
    \  To ensure interoperability, certain choices and restrictions\n   are made here\
    \ concerning various options and parameters provided by\n   these standards. \
    \  Internet standards are used to provide the\n   underlying network transport.\
    \  These agreements provide a precise\n   statement of the implementation choices\
    \ made for implementing ISO\n   network management standards in TCP/IP-based internets.\n\
    \   In addition to the Netman working group, there are at least two other\n  \
    \ bodies actively engaged in defining profiles for interoperable OSI\n   network\
    \ management: the National Institute of Science and Technology\n   (NIST) Network\
    \ Management Special Interest Group (NMSIG) and the OSI\n   Network Management\
    \ Forum.  Both of these groups are similar to the\n   Netman working group in\
    \ that they are each defining profiles for\n   using ISO standards for network\
    \ management.  Both differ in that they\n   are specifying the use of underlying\
    \ ISO protocols, while the Netman\n   working group is concerned with using OSI\
    \ management in TCP/IP\n   networks.  In the interest of greater future compatibility,\
    \ the\n   Netman working group has attempted to make the CMOT profile conform\n\
    \   as closely as possible to the ongoing work of these two bodies.\n"
- title: 6.1.  The CMOT Protocol Suite
  contents:
  - "6.1.  The CMOT Protocol Suite\n   The following seven protocols compose the CMOT\
    \ protocol suite: ISO\n   ACSE, ISO DIS ROSE, ISO DIS CMIP, the lightweight presentation\n\
    \   protocol (LPP), UDP, TCP, and IP.  The relation of these protocols to\n  \
    \ each other is briefly summarized in Figure 2.\n                 +----------------------------------------------+\n\
    \                 |       Management Application Processes       |\n         \
    \        +----------------------------------------------+\n                  \
    \           +-------------------+\n                             |       CMISE\
    \       |\n                             | ISO DIS 9595/9596 |\n              \
    \               +-------------------+\n                 +------------------+ \
    \      +--------------------+\n                 |        ACSE      |       | \
    \       ROSE        |\n                 | ISO IS 8649/8650 |       | ISO DIS 9072-1/2\
    \   |\n                 +------------------+       +--------------------+\n  \
    \               +-----------------------------------------------+\n          \
    \       |     Lightweight Presentation Protocol (LPP)   |\n                 |\
    \                   RFC 1085                    |\n                 +-----------------------------------------------+\n\
    \                 +------------------+       +--------------------+\n        \
    \         |       TCP        |       |        UDP         |\n                \
    \ |     RFC 793      |       |      RFC 768       |\n                 +------------------+\
    \       +--------------------+\n                 +-----------------------------------------------+\n\
    \                 |                     IP                        |\n        \
    \         |                   RFC 791                     |\n                \
    \ +-----------------------------------------------+\n                      Figure\
    \ 2.  The CMOT Protocol Suite\n"
- title: 6.2.  Conformance Requirements
  contents:
  - "6.2.  Conformance Requirements\n   A CMOT-conformant system must implement the\
    \ following protocols:\n   ACSE, ROSE, CMIP, LPP, and IP.  A conformant system\
    \ must support the\n   use of the LPP over either UDP or TCP.  The use of the\
    \ LPP over both\n   UDP and TCP on the same system may be supported.  A conformant\
    \ system\n   need not support all CMIS operations.  A conformant system must,\n\
    \   however, support at least one of the functional unit groups\n   (indicating\
    \ a set of supported services) defined in section 7.1.3.\n   The service and protocol\
    \ selections are described in greater detail\n   in the following sections.\n"
- title: 6.3.  Abstract Syntax Notation
  contents:
  - "6.3.  Abstract Syntax Notation\n   The abstract syntax notation for all of the\
    \ application service\n   elements of the CMOT protocol suite is Abstract Syntax\
    \ Notation One\n   (ASN.1) [5].  The LPP is also defined using ASN.1.  The basic\n\
    \   encoding rules used for ASN.1 are specified in [6].  Both definite-\n   length\
    \ and indefinite-length encodings are expressly permitted.\n"
- title: 7.  Common Management Information Service Element
  contents:
  - "7.  Common Management Information Service Element\n   The Common Management Information\
    \ Service Element (CMISE) is\n   specified in two ISO documents.  The service\
    \ definition for the\n   Common Management Information Service (CMIS) is given\
    \ in ISO DIS\n   9595-2 [11].  The protocol specification for the Common Management\n\
    \   Information Protocol (CMIP) is found in ISO DIS 9596-2 [12].\n"
- title: 7.1.  CMIS Services
  contents:
  - '7.1.  CMIS Services

    '
- title: 7.1.1.  CMIS Services Overview
  contents:
  - "7.1.1.  CMIS Services Overview\n   All of the CMIS services listed in Table 1\
    \ are allowed with the CMOT\n   approach: M-INITIALISE, M-TERMINATE, M-ABORT,\
    \ M-EVENT-REPORT, M-GET,\n   M-SET, M-ACTION, M-CREATE, and M-DELETE.  The specific\
    \ services\n   supported by a system will be determined by the functional unit\
    \ group\n   or groups to which a system belongs.\n"
- title: 7.1.2.  Functional Units
  contents:
  - "7.1.2.  Functional Units\n   The CMIS services supported are designated in terms\
    \ of functional\n   units [11].  Each functional unit corresponds to the invoker\
    \ or\n   performer aspect of a particular service.  (The terms \"invoker\" and\n\
    \   \"performer\" are taken from ROSE and refer to the caller of and\n   responder\
    \ to a remote operation, respectively.) The \"stand alone\"\n   functional units\
    \ associated with each of the management services are\n   given in Table 2 as\
    \ functional units 0-17.  The number following the\n   name of each functional\
    \ unit in the table is defined by CMIP [12] to\n   identify that particular functional\
    \ unit.  The functional units are\n   used by the CMISE-service-user at the time\
    \ of association\n   establishment to indicate which services it is willing to\
    \ support.\n   +---------------------------------+------------------------+------+\n\
    \   | Functional Unit                 | Service Primitives     | Mode |\n   +---------------------------------+------------------------+------+\n\
    \   | conf. event report invoker(0)   | M-EVENT-REPORT Req/Conf| C    |\n   |\
    \ conf. event report performer(1) | M-EVENT-REPORT Ind/Rsp | C    |\n   | event\
    \ report invoker(2)         | M-EVENT-REPORT Req     | U    |\n   | event report\
    \ performer(3)       | M-EVENT-REPORT Ind     | U    |\n   | confirmed get invoker(4)\
    \        | M-GET Req/Conf         | N/A  |\n   | confirmed get performer(5)  \
    \    | M-GET Ind/Rsp          | N/A  |\n   | confirmed set invoker(6)        |\
    \ M-SET Req/Conf         | C    |\n   | confirmed set performer(7)      | M-SET\
    \ Ind/Rsp          | C    |\n   | set invoker(8)                  | M-SET Req\
    \              | U    |\n   | set performer(9)                | M-SET Ind    \
    \          | U    |\n   | confirmed action invoker(10)    | M-ACTION Req/Conf\
    \      | C    |\n   | confirmed action performer(11)  | M-ACTION Ind/Rsp     \
    \  | C    |\n   | action invoker(12)              | M-ACTION Req           | U\
    \    |\n   | action performer(13)            | M-ACTION Ind           | U    |\n\
    \   | confirmed create invoker(14)    | M-CREATE Req/Conf      | N/A  |\n   |\
    \ confirmed create performer(15)  | M-CREATE Ind/Rsp       | N/A  |\n   | confirmed\
    \ delete invoker(16)    | M-DELETE Req/Conf      | N/A  |\n   | confirmed delete\
    \ performer(17)  | M-DELETE Ind/Rsp       | N/A  |\n   | multiple reply(18)  \
    \            | Linked Identification  | N/A  |\n   | multiple object selection(19)\
    \   | Scope, Filter, Sync.   | N/A  |\n   | extended service(20)            |\
    \ Extended Presentation  | N/A  |\n   +---------------------------------+------------------------+------+\n\
    \    C = confirmed, U = non-confirmed, N/A = not applicable\n                \
    \          Table 2.  Functional Units\n   In addition to the stand alone functional\
    \ units, there are three\n   additional functional units.  If any of these additional\
    \ functional\n   units are selected, then at least one of the stand alone functional\n\
    \   units must be selected.  The multiple reply functional unit makes\n   available\
    \ the use of the linked identification parameter in the\n   selected stand alone\
    \ functional units.  This makes possible the use\n   of linked reply (multiple\
    \ CMIP PDU responses to a single request).\n   The multiple object selection functional\
    \ unit makes available the use\n   of the scope, filter, and synchronization parameters\
    \ in the selected\n   stand alone functional units.  If the multiple object selection\n\
    \   functional unit is selected, then the multiple reply functional unit\n   must\
    \ also be selected.  The extended services functional unit makes\n   available\
    \ presentation layer services in addition to the P-DATA\n   service.  Selecting\
    \ this functional unit has no effect in the context\n   of CMOT, since the lightweight\
    \ presentation layer provides only\n   minimal ISO presentation services.\n"
- title: 7.1.3.  Functional Unit Groups
  contents:
  - "7.1.3.  Functional Unit Groups\n   In order to assist in the reduction of code\
    \ size and complexity for\n   different types of devices, a number of \"functional\
    \ unit groups\" have\n   been defined.  Each of these groups indicates a set of\
    \ services\n   defined for either a manager or an agent.  The \"negotiation\"\n\
    \   concerning which functional unit groups are supported is done by\n   means\
    \ of the Functional Units parameter of the M-INITIALISE service\n   (see section\
    \ 7.1.4.1).  There are five functional unit groups for\n   managers: Event Monitor,\
    \ Monitoring Manager, Simple Manager,\n   Controlling Manager, and Full Manager.\
    \  Each functional unit group is\n   a superset of the preceding group.  There\
    \ are five functional unit\n   groups for agents: Event Sender, Monitored Agent,\
    \ Simple Agent,\n   Controlled Agent, and Full Agent.  Again, each functional\
    \ unit group\n   is a superset of the preceding group.  The operations supported\
    \ for\n   each functional unit group are summarized in Table 3.\n   +--------------------+------+-----+-----+-------+------+-----+------+\n\
    \   |                    |Event | Get | Set |Create/|Action|Mult.|Mult. |\n  \
    \ |Functional Unit     |Report|     |     |Delete |      |Reply|Object|\n   |Groups\
    \              |      |     |     |       |      |     |Select|\n   +--------------------+------+-----+-----+-------+------+-----+------+\n\
    \   | 1. Event Monitor   | U    | no  | no  | no    | no   | no  | no   |\n  \
    \ | 2. Event Sender    | U    | no  | no  | no    | no   | no  | no   |\n   |\
    \ 3. Monitoring Mgr. | U    | yes | no  | no    | no   | no  | no   |\n   | 4.\
    \ Monitored Agent | U    | yes | no  | no    | no   | no  | no   |\n   | 5. Simple\
    \ Manager  | U    | yes | C   | no    | no   | yes | no*  |\n   | 6. Simple Agent\
    \    | U    | yes | C   | no    | no   | yes | no*  |\n   | 7. Controlling Mgr.|\
    \ U    | yes | U/C | yes   | no   | yes | yes  |\n   | 8. Controlled Agent| U\
    \    | yes | U/C | yes   | no   | yes | yes  |\n   | 9. Full Manager    | U/C\
    \  | yes | U/C | yes   | U/C  | yes | yes  |\n   |10. Full Agent      | U/C  |\
    \ yes | U/C | yes   | U/C  | yes | yes  |\n   +--------------------+------+-----+-----+-------+------+-----+------+\n\
    \    C = confirmed, U = non-confirmed\n    * Simple Managers and Agents must support\
    \ \"oneLevel\" scoping for all\n      and only those cases where it is required\
    \ to access a whole table\n      and may support synchronization other than \"\
    best effort\"; no support\n      for filtering is required.\n                \
    \       Table 3.  Functional Unit Groups\n   A conformant system must support\
    \ at least one of these functional\n   unit groups.  A system may support both\
    \ a manager group and an agent\n   group.  A system only needs to implement the\
    \ services and service\n   primitives required for the groups that it supports.\
    \  In addition, a\n   system may support services that are not required by any\
    \ group that\n   it supports.\n"
- title: 7.1.4.  M-INITIALISE Parameters
  contents:
  - "7.1.4.  M-INITIALISE Parameters\n   The M-INITIALISE service is provided by the\
    \ ACSE A-ASSOCIATE service.\n   The parameters for the M-INITIALISE service are\
    \ defined in [11] and\n   summarized in Table 4.\n                 +-------------------+-----------+-----------+\n\
    \                 | Parameter Name    | Req/Ind   | Rsp/Conf  |\n            \
    \     +-------------------+-----------+-----------+\n                 | Functional\
    \ Units  | Mandatory | Mandatory |\n                 | User Information  | Optional\
    \  | Optional  |\n                 | Access Control    | Optional  | Optional\
    \  |\n                 +-------------------+-----------+-----------+\n       \
    \                Table 4. M-INITIALISE Parameters\n   Notice that the further\
    \ agreement has been made that the Functional\n   Units parameter is mandatory\
    \ at all times.  The M-INITIALISE\n   parameters are conveyed as ACSE user information\
    \ in the ACSE request\n   PDU.\n"
- title: 7.1.4.1.  Functional Units
  contents:
  - "7.1.4.1.  Functional Units\n   The exchange of functional units between the initiating\
    \ CMISE-\n   service-user and the responding CMISE-service-user is required. \
    \ This\n   allows the CMIS-service-users to inform each other which functional\n\
    \   units are supported.  CMIP [12] defines a 21-bit BIT STRING to\n   communicate\
    \ which functional units are supported.  A functional unit\n   is supported if\
    \ the corresponding bit in this bit string is one.  The\n   correspondence between\
    \ functional units and functional unit groups is\n   given in Table 5.  The left\
    \ column gives the functional unit\n   corresponding to a particular bit position.\
    \ The numbers along the top\n   of the table indicate the functional unit group\
    \ (the numbers of the\n   functional unit groups are given in Table 3).  The various\
    \ columns\n   indicate the value of each bit for a particular functional unit\n\
    \   group.\n"
- title: +------------------------------+---+---+---+---+---+---+---+---+---+---+
  contents:
  - '+------------------------------+---+---+---+---+---+---+---+---+---+---+

    '
- title: '|Functional Unit               | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10|'
  contents:
  - '|Functional Unit               | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10|

    '
- title: +------------------------------+---+---+---+---+---+---+---+---+---+---+
  contents:
  - '+------------------------------+---+---+---+---+---+---+---+---+---+---+

    '
- title: '|conf. event report invoker(0) | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |'
  contents:
  - '|conf. event report invoker(0) | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |

    '
- title: '|conf. event report perf.(1)   | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 |'
  contents:
  - '|conf. event report perf.(1)   | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 |

    '
- title: '|event report invoker(2)       | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 1 |'
  contents:
  - '|event report invoker(2)       | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 1 |

    '
- title: '|event report performer(3)     | 1 | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 1 | 0 |'
  contents:
  - '|event report performer(3)     | 1 | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 1 | 0 |

    '
- title: '|confirmed get invoker(4)      | 0 | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 1 | 0 |'
  contents:
  - '|confirmed get invoker(4)      | 0 | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 1 | 0 |

    '
- title: '|confirmed get performer(5)    | 0 | 0 | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 1 |'
  contents:
  - '|confirmed get performer(5)    | 0 | 0 | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 1 |

    '
- title: '|confirmed set invoker(6)      | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 | 1 | 0 |'
  contents:
  - '|confirmed set invoker(6)      | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 | 1 | 0 |

    '
- title: '|confirmed set performer(7)    | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 | 1 |'
  contents:
  - '|confirmed set performer(7)    | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 | 1 |

    '
- title: '|set invoker(8)                | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 |'
  contents:
  - '|set invoker(8)                | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 |

    '
- title: '|set performer(9)              | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 |'
  contents:
  - '|set performer(9)              | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 |

    '
- title: '|confirmed action invoker(10)  | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 |'
  contents:
  - '|confirmed action invoker(10)  | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 |

    '
- title: '|confirmed action performer(11)| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |'
  contents:
  - '|confirmed action performer(11)| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |

    '
- title: '|action invoker(12)            | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 |'
  contents:
  - '|action invoker(12)            | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 |

    '
- title: '|action performer(13)          | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |'
  contents:
  - '|action performer(13)          | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |

    '
- title: '|confirmed create invoker(14)  | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 |'
  contents:
  - '|confirmed create invoker(14)  | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 |

    '
- title: '|confirmed create performer(15)| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 |'
  contents:
  - '|confirmed create performer(15)| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 |

    '
- title: '|confirmed delete invoker(16)  | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 |'
  contents:
  - '|confirmed delete invoker(16)  | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 |

    '
- title: '|confirmed delete performer(17)| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 |'
  contents:
  - '|confirmed delete performer(17)| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 |

    '
- title: '|multiple reply(18)            | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 1 |'
  contents:
  - '|multiple reply(18)            | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 1 |

    '
- title: '|multiple object selection(19) | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 1 |'
  contents:
  - '|multiple object selection(19) | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 1 |

    '
- title: '|extended service(20)          | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |'
  contents:
  - '|extended service(20)          | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |

    '
- title: +------------------------------+---+---+---+---+---+---+---+---+---+---+
  contents:
  - '+------------------------------+---+---+---+---+---+---+---+---+---+---+

    '
- title: '|                              | M | A | M | A | M | A | M | A | M | A |'
  contents:
  - '|                              | M | A | M | A | M | A | M | A | M | A |

    '
- title: +------------------------------+---+---+---+---+---+---+---+---+---+---+
  contents:
  - "+------------------------------+---+---+---+---+---+---+---+---+---+---+\n  \
    \      1 = supported, 0 = not supported, M = manager, A = agent\n            \
    \         Table 5.  Functional Unit Group Values\n   The \"negotiation\" using\
    \ functional units proceeds as follows.  The\n   initiating CMISE-service-user\
    \ (manager or agent) sends the functional\n   units representing the functional\
    \ unit group to which it belongs.\n   The responding CMISE-service-user sends\
    \ the functional units\n   representing the functional unit group to which it\
    \ belongs.  (If an\n   application process belongs to both a manager and an agent\
    \ functional\n   unit group, then both functional unit groups are indicated using\
    \ the\n   same functional unit bit string.) If the functional unit groups\n  \
    \ supported by the two application entities do not allow meaningful\n   communication,\
    \ then either entity may refuse the association.\n   Meaningful communication\
    \ is defined as the ability of the entity to\n   invoke or perform at least one\
    \ CMIS operation supported by the other\n   entity (i.e., some \"complementary\"\
    \ set of functional units exists).\n   After an association has been established,\
    \ a system must provide the\n   proper response for functional units that it has\
    \ indicated it can\n   support and should gracefully refuse other requests in\
    \ accordance\n   with the protocol.\n"
- title: 7.1.4.2.  User Information
  contents:
  - "7.1.4.2.  User Information\n   The User Information parameter is optional.  No\
    \ entity is required to\n   send this parameter, but all entities are expected\
    \ to tolerate\n   receipt of it.\n   One possible use of the User Information\
    \ parameter is to convey\n   information describing MIB extensions supported by\
    \ the manager or\n   agent.  This can be viewed as a further way of refining the\n\
    \   application context.  The mechanism for doing this is not defined at\n   this\
    \ time.\n"
- title: 7.1.4.3.  Access Control
  contents:
  - "7.1.4.3.  Access Control\n   The CMIS M-INITIALISE Access Control parameter is\
    \ optional.  Access\n   control is supported on a per association basis using\
    \ ACSE.  It is\n   recommended (but not required) that the access control parameter\
    \ be\n   used for each A-ASSOCIATE request (via M-INITIALISE).\n   Access control\
    \ is also possible on a per request basis with the CMIS\n   Access Control parameter.\
    \ This parameter might be used to implement\n   security similar to the community\
    \ access rights mechanism provided by\n   SNMP [4].  It is expected that the Access\
    \ Control parameter will be\n   used to implement the standard TCP/IP authentication\
    \ mechanism once\n   this has been defined.\n"
- title: 7.2.  Supporting Services
  contents:
  - "7.2.  Supporting Services\n   The M-INITIALISE, M-TERMINATE, and M-ABORT services\
    \ assume the use of\n   ACSE.  The following ACSE services are required: A-ASSOCIATE,\
    \ A-\n   RELEASE, A-ABORT, and A-P-ABORT.  The rest of the CMIP protocol uses\n\
    \   the RO-INVOKE, RO-RESULT, RO-ERROR, and RO-REJECT services of ROSE.\n"
- title: 7.3.  CMIP Agreements
  contents:
  - "7.3.  CMIP Agreements\n   The following sections contain specific CMIP agreements\
    \ in addition\n   to those specified in the CMIP standard [12].\n"
- title: 7.3.1.  Invoke Identifier
  contents:
  - "7.3.1.  Invoke Identifier\n   It is required that there be a unique invoke identifier\
    \ (present in\n   the ROSE PDU) for successive invocations on the same association.\n\
    \   The invoke identifier is provided by the invoking CMISE-service-user.\n  \
    \ Invoke identifiers should increase monotonically during the lifetime\n   of\
    \ an association.  Semantically, the invoke identifier is a Counter\n   as defined\
    \ in [2].  Unique identifiers will allow the detection of\n   lost and duplicate\
    \ requests.\n"
- title: 7.3.2.  Object Class
  contents:
  - "7.3.2.  Object Class\n   The object class field of all CMIP PDUs shall be limited\
    \ to the\n   \"globalForm\" choice:\n           ObjectClass ::=\n            \
    \    CHOICE {\n                     globalForm    [0] IMPLICIT OBJECT IDENTIFIER\n\
    \                }\n"
- title: 7.3.3.  Object Instance
  contents:
  - "7.3.3.  Object Instance\n   The object instance field of all CMIP PDUs is limited\
    \ to the\n   \"distinguishedName\" choice:\n           ObjectInstance ::=\n  \
    \              CHOICE {\n                     distinguishedName  [2] IMPLICIT\
    \ DistinguishedName\n                }\n   The definition for DistinguishedName\
    \ is imported from CCITT X.500 and\n   ISO DIS 9594-2 [26]:\n   DistinguishedName\
    \ ::= RDNSequence\n   RDNSequence ::= SEQUENCE OF RelativeDistinguishedName\n\
    \   RelativeDistinguishedName ::= SET OF AttributeValueAssertion\n   The definition\
    \ for AttributeValueAssertion is contained in CMIP [12]:\n   AttributeValueAssertion\
    \ ::= SEQUENCE { AttributeId, AttributeValue }\n   AttributeId ::=\n        CHOICE\
    \ {\n              globalId   [0] IMPLICIT OBJECT IDENTIFIER\n              localId\
    \    [1] IMPLICIT INTEGER\n        }\n   AttributeValue ::= ANY DEFINED BY attributeId\n\
    \   Those attributes to be used as the distinguished attributes of a\n   managed\
    \ object are defined at the time of registration of the object\n   class and are\
    \ identified in the NAMES clause of the OBJECT-CLASS\n   macro.\n   When there\
    \ is no instance information to convey about a managed\n   object, then the following\
    \ \"empty\" object instance shall be used: The\n   \"distinguishedName\" choice\
    \ of ObjectInstance shall be an RDNSequence\n   consisting of a SEQUENCE of one\
    \ RelativeDistinguishedName. That\n   RelativeDistinguishedName shall be an empty\
    \ SET of\n   AttributeValueAssertions.\n"
- title: 7.3.4.  Access Control
  contents:
  - "7.3.4.  Access Control\n   The access control parameter is optional.  The receipt\
    \ of this\n   parameter must be tolerated (i.e., gracefully accepted), but a\n\
    \   receiving entity is free to ignore this information.  The Access\n   Control\
    \ field is defined in [12] as EXTERNAL.  Until a more\n   sophisticated access\
    \ control mechanism is defined, simple\n   authentication can be accomplished\
    \ by using an unencrypted password\n   in the access control field.  The definition\
    \ of this EXTERNAL is the\n   same as that for the ACSE Access Control field (section\
    \ 8.3.2).\n"
- title: 7.3.5.  Synchronization
  contents:
  - "7.3.5.  Synchronization\n   Support for \"best effort\" synchronization is required.\
    \  Atomic\n   synchronization may also be supported, but is not required.\n"
- title: 7.3.6.  Scope
  contents:
  - "7.3.6.  Scope\n   Scoping is supported if the multiple object selection functional\
    \ unit\n   is selected.  If scoping is supported, all values of the scope field\n\
    \   shall be supported.\n"
- title: 7.3.7.  Filter
  contents:
  - "7.3.7.  Filter\n   Filtering is supported if the multiple object selection functional\n\
    \   unit is selected.  If filtering is supported, it is not required that\n  \
    \ all features of filtering be supported.  The following are the\n   minimal filtering\
    \ requirements for any system that supports\n   filtering.  In the CMIP field\
    \ CMISFilter, at least two instances of\n   the binary operators (\"and,\" \"\
    or\") must be supported.  Support for\n   additional instances of these operators\
    \ is not required.  Double\n   \"not\" need not be supported.  In FilterItem,\
    \ the arithmetic\n   operations (\"equality\", \"greaterOrEqual,\" \"lessOrEqual\"\
    ) must be\n   supported.  The \"present\" choice of FilterItem must also be\n\
    \   supported.  It is not required to support string operations (namely,\n   the\
    \ \"substrings\" choice of the FilterItem type).  Thus, the minimal\n   requirements\
    \ for filtering yield this restricted definition of\n   FilterItem:\n        \
    \      FilterItem ::=\n                   CHOICE {\n                        equality\
    \       [0] AttributeValueAssertion,\n                        greaterOrEqual [2]\
    \ AttributeValueAssertion,\n                        lessOrEqual    [3] AttributeValueAssertion,\n\
    \                        present        [4] AttributeID\n                   }\n"
- title: 7.3.8.  Attribute Identifier
  contents:
  - "7.3.8.  Attribute Identifier\n   Both choices for the CMIP AttributeId field\
    \ are allowed:\n              AttributeId ::=\n                   CHOICE {\n \
    \                       globalId  [0] IMPLICIT OBJECT IDENTIFIER,\n          \
    \              localId   [1] IMPLICIT INTEGER\n                   }\n   The \"\
    globalId\" form of AttributeId is required if scoping is used\n   (i.e., the value\
    \ of the scope field is other than \"baseObject\").\n"
- title: 7.3.9.  Event Type Identifier
  contents:
  - "7.3.9.  Event Type Identifier\n   Both choices for the CMIP EventTypeId field\
    \ are allowed:\n              EventTypeId ::=\n                   CHOICE {\n \
    \                       globalId  [6] IMPLICIT OBJECT IDENTIFIER,\n          \
    \              localId   [7] IMPLICIT INTEGER\n                   }\n"
- title: 7.3.10.  Action Type Identifier
  contents:
  - "7.3.10.  Action Type Identifier\n   Both choices for the CMIP ActionTypeId field\
    \ are allowed:\n              ActionTypeId ::=\n                   CHOICE {\n\
    \                        globalId  [2] IMPLICIT OBJECT IDENTIFIER,\n         \
    \               localId   [3] IMPLICIT INTEGER\n                   }\n   The \"\
    globalId\" form of ActionTypeId is required if scoping is used\n   (i.e., the\
    \ value of the scope field is other than \"baseObject\").\n"
- title: 7.3.11.  Time Fields
  contents:
  - "7.3.11.  Time Fields\n   The \"eventTime\" field of the m-EventReport Invoke\
    \ PDU and the m-\n   EventConfirmedReport Invoke PDU must be present.\n   The\
    \ \"currentTime\" field of the following PDUs must be present: the\n   m-EventReport\
    \ Confirmed Result PDU, the m-Get Result PDU, the m-Set\n   Result PDU, the m-Action\
    \ Confirmed Result PDU, the m-Create Result\n   PDU, the m-Delete Result PDU,\
    \ the GetListError Error PDU, and the\n   SetListError Error PDU.\n   All CMIP\
    \ time fields shall use the ASN.1 GeneralizedTime type defined\n   in [5] with\
    \ 1 millisecond granularity.\n   If the system generating the PDU does not have\
    \ the current time, yet\n   does have the time since last boot, then GeneralizedTime\
    \ can be used\n   to encode this information.  The time since last boot will be\
    \ added\n   to the base time \"0001 Jan 1 00:00:00.00\" using the Gregorian\n\
    \   calendar algorithm.  (In the Gregorian calendar, all years have 365\n   days\
    \ except those divisible by 4 and not by 400, which have 366.) The\n   use of\
    \ the year 1 as the base year will prevent any confusion with\n   current time.\n\
    \   If no meaningful time is available, then the year 0 shall be used in\n   GeneralizedTime\
    \ to indicate this fact.\n"
- title: 7.3.12.  Response PDUs
  contents:
  - "7.3.12.  Response PDUs\n   Both the \"managedObjectClass\" and \"managedObjectInstance\"\
    \ fields must\n   be present in the following CMIP response PDUs: the m-EventReport\n\
    \   Confirmed Result PDU, the m-Get Result PDU, the m-Set Result PDU, the\n  \
    \ m-Action Confirmed Result PDU, the m-Create Result PDU, the m-Delete\n   Result\
    \ PDU, the GetListError Error PDU, and the SetListError Error\n   PDU.  The \"\
    managedObjectInstance\" field must be present in the\n   ProcessingFailure Error\
    \ PDU.  The \"managedObjectClass\" field must be\n   present in the NoSuchArgument\
    \ Error PDU.\n"
- title: 7.3.13.  Error PDUs
  contents:
  - "7.3.13.  Error PDUs\n   The \"globalId\" form of AttributeId is required for\
    \ the\n   NoSuchAttributeId Error PDU and the InvalidAttributeValue Error PDU.\n"
- title: 8.  Association Control Service Element
  contents:
  - "8.  Association Control Service Element\n   The Association Control Service Element\
    \ (ACSE), which is necessary\n   for establishing and releasing application associations,\
    \ is defined\n   in [7] and [8].\n"
- title: 8.1.  ACSE Services
  contents:
  - "8.1.  ACSE Services\n   The ACSE service description is detailed in ISO 8649\
    \ [7].  All of the\n   defined ACSE services are mandatory:\n       o  A-ASSOCIATE:\
    \ This confirmed service is used to initiate an\n          application association\
    \ between application entities.\n       o  A-RELEASE: This confirmed service is\
    \ used to release an\n          application association between application entities\
    \ without\n          loss of information.\n       o  A-ABORT: This unconfirmed\
    \ service causes the abnormal release\n          of an association with a possible\
    \ loss of information.\n       o  A-P-ABORT: This provider-initiated service indicates\
    \ the\n          abnormal release of an application association by the\n     \
    \     underlying presentation service with a possible loss of\n          information.\n\
    \   Mappings of the ACSE services to presentation services and ACSE APDUs\n  \
    \ are shown in Table 6, along with a section reference to ISO 8649 [7].\n    \
    \  +-------------+------------+----------------------+-------------+\n      |\
    \    ACSE     |  ISO 8649  |        Related       |  Associated |\n      |   Service\
    \   |  Reference | Presentation Service |    APDUs    |\n      +-------------+------------+----------------------+-------------+\n\
    \      | A-ASSOCIATE |     9.1    |       P-CONNECT      | AARQ, AARE  |\n   \
    \   | A-RELEASE   |     9.2    |       P-RELEASE      | RLRQ, RLRE  |\n      |\
    \ A-ABORT     |     9.3    |       P-U-ABORT      | ABRT        |\n      | A-P-ABORT\
    \   |     9.4    |       P-P-ABORT      | (none)      |\n      +-------------+------------+----------------------+-------------+\n\
    \                     Table 6.  Mapping of ACSE Services\n"
- title: 8.2.  Supporting Services
  contents:
  - "8.2.  Supporting Services\n   ACSE will make use of the following ISO presentation\
    \ layer services:\n   P-CONNECT, P-RELEASE, P-U-ABORT, and P-P-ABORT.  These presentation\n\
    \   services will be provided by the LPP [13].\n"
- title: 8.3.  ACSE Protocol
  contents:
  - "8.3.  ACSE Protocol\n   The ACSE protocol specification is found in ISO 8650\
    \ [8]. All five\n   ACSE APDUs specified in the standard are mandatory.\n"
- title: 8.3.1.  Application Context Name
  contents:
  - "8.3.1.  Application Context Name\n   The Application Context Name takes the form\
    \ of an OBJECT IDENTIFIER.\n   The value of this OBJECT IDENTIFIER includes both\
    \ the version of CMOT\n   being used for this association and the version number\
    \ of the highest\n   version of the Internet-standard MIB supported by the manager\
    \ or\n    agent.  The application context name has the following generic form:\n\
    \                 { iso(1) org(3) dod(6) internet(1) mgmt(2) mib(n)\n        \
    \           cmot(9) cmotVersion(1) version-number(v) }\n                 where\
    \ n = highest MIB version supported and\n                       v = version of\
    \ CMOT supported\n   For the version of CMOT defined in these agreements, \"version-number\"\
    \n   has the value of one (1). This version of CMOT implies the versions\n   of\
    \ the ISO protocols specified in this memo (see Figure 2).\n"
- title: 8.3.2.  User Information
  contents:
  - "8.3.2.  User Information\n   The following CMIS M-INITIALISE parameters are all\
    \ mapped onto the\n   ACSE User Information parameter: Functional Units, User\
    \ Information,\n   and Access Control.  (See section 7.1.4 for more information\
    \ on the\n   CMIS M-INITIALISE parameters.) ACSE User Information is defined in\n\
    \   ISO 8650 as follows:\n              Association-information ::= SEQUENCE OF\
    \ EXTERNAL\n   The ASN.1 defined type EXTERNAL, which is defined in section 35\
    \ of\n   ISO 8824 [5], requires both an OBJECT IDENTIFIER for identification\n\
    \   and an associated ASN.1 encoding.\n   The OBJECT IDENTIFIER and syntax associated\
    \ with the ACSE Functional\n   Units EXTERNAL definition are found in [12]. The\
    \ OBJECT IDENTIFIER is\n   defined as { iso(1) standard(0) ips-osi-mips(9596)\
    \ cmip(2) version(1)\n   acse(0) functional-units(0) } and the syntax is a BIT\
    \ STRING.\n   The EXTERNAL definition for User Information is left unspecified\
    \ at\n   this time; it will be defined in a future memo.\n   If some form of access\
    \ control is required, a simple unencrypted\n   password can be used.  The EXTERNAL\
    \ for this simple access control\n   will use the OBJECT IDENTIFIER { cmotAcseAccessControl\
    \ } (Appendix A)\n   and the syntax OCTET STRING. A more sophisticated authentication\n\
    \   mechanism will be defined with another EXTERNAL definition in a\n   future\
    \ memo.\n"
- title: 8.3.3.  Presentation Service Parameters
  contents:
  - "8.3.3.  Presentation Service Parameters\n   The values and defaults of parameters\
    \ to the ACSE primitives that are\n   given to the presentation service are specified\
    \ in RFC 1085 [13].\n   For the Presentation Context Definition List parameter\
    \ to the P-\n   CONNECT service [13, p. 10], the value of the Abstract Syntax\
    \ Name\n   associated with the Presentation Context Identifier of value one (1)\n\
    \   shall be identical to the OBJECT IDENTIFIER used for the Application\n   Context\
    \ Name (section 8.3.1).\n   The Quality of Service parameter shall have the value\
    \ of either\n   \"tcp-based\" or \"udp-based.\"\n"
- title: 9.  Remote Operations Service Element
  contents:
  - "9.  Remote Operations Service Element\n   The Remote Operations Service Element\
    \ (ROSE), which provides the\n   ability to invoke remote operations, is specified\
    \ in ISO 9072-1 [9]\n   and 9072-2 [10].  ROSE can only be used once an association\
    \ has been\n   established between two application entities.  ROSE is used to\n\
    \   support CMISE; it is not intended to be used directly by management\n   application\
    \ processes.\n"
- title: 9.1.   ROSE Services
  contents:
  - "9.1.   ROSE Services\n   The ROSE service definition is detailed in ISO 9072-1\
    \ [9].  All of\n   the defined ROSE services are mandatory:\n       o  RO-INVOKE:\
    \ This unconfirmed service is used by an invoking\n          ROSE-user to cause\
    \ the invocation of an operation to be\n          performed by an invoked ROSE-user.\n\
    \       o  RO-RESULT: This unconfirmed service is used by an invoked\n       \
    \   ROSE-user to reply to a previous RO-INVOKE indication in the\n          case\
    \ of a successfully performed operation.\n       o  RO-ERROR: This unconfirmed\
    \ service is used by an invoked\n          ROSE-user to reply to a previous RO-INVOKE\
    \ indication in the\n          case of an unsuccessfully performed operation.\n\
    \       o  RO-REJECT-U: This unconfirmed service is used by a ROSE-user\n    \
    \      to reject a request (RO-INVOKE indication) of the other\n          ROSE-user\
    \ if it has detected a problem.  It may also be used\n          by a ROSE-user\
    \ to (optionally) reject a reply (RO-RESULT\n          indication, RO-ERROR indication)\
    \ from the other ROSE-user.\n       o  RO-REJECT-P: This provider-initiated service\
    \ is used to advise\n          a ROSE-user of a problem detected by the ROSE-provider.\n\
    \   Mappings of ROSE services to ISO presentation services and ROSE APDUs\n  \
    \ are shown in Table 7, along with a section reference to ISO 9072-1\n   [9].\n\
    \      +-------------+------------+----------------------+-------------+\n   \
    \   |    ROSE     | ISO 9072-1 |        Related       |  Associated |\n      |\
    \   Service   | Reference  | Presentation Service |    APDUs    |\n      +-------------+------------+----------------------+-------------+\n\
    \      | RO-INVOKE   |    10.1    |        P-DATA        |    ROIV     |\n   \
    \   | RO-RESULT   |    10.2    |        P-DATA        |    RORS     |\n      |\
    \ RO-ERROR    |    10.3    |        P-DATA        |    ROER     |\n      | RO-REJECT-U\
    \ |    10.4    |        P-DATA        |    RORJ     |\n      | RO-REJECT-P | \
    \   10.5    |        P-DATA        |    RORJ     |\n      +-------------+------------+----------------------+-------------+\n\
    \   Table 7.  Mapping of ROSE Services\n"
- title: 9.2.  Supporting Services
  contents:
  - "9.2.  Supporting Services\n   ROSE will only make use of the presentation layer\
    \ service P-DATA.\n   This service is provided by the LPP.  The following restrictions\
    \ are\n   a consequence of the use of the LPP: First, mappings to the Reliable\n\
    \   Transfer Service Element (RTSE) are not possible, since no RTSE is\n   present.\
    \  Second, no data token is used with the presentation\n   services.\n"
- title: 9.3.  ROSE Protocol
  contents:
  - "9.3.  ROSE Protocol\n   The protocol specification for ROSE shall follow ISO\
    \ 9072-2 [10].\n   All four APDUs specified in the standard are mandatory.  In\
    \ addition,\n   the ability to support the correct origination and reception of\
    \ the\n   linked-id protocol element is required if the multiple reply\n   functional\
    \ unit has been selected (section 7.1.2).\n"
- title: 9.3.1.  Operation Class
  contents:
  - "9.3.1.  Operation Class\n   Since no turn management is required by ROSE, the\
    \ Operation Class\n   parameter may be ignored.\n"
- title: 9.3.2.  Priority
  contents:
  - "9.3.2.  Priority\n   ROSE will deliver each APDU in a \"first in, first out\"\
    \ manner.  Since\n   no turn management is required by ROSE, the Priority parameter\
    \ may be\n   ignored.\n"
- title: 10.  Lightweight Presentation
  contents:
  - "10.  Lightweight Presentation\n   The specification for the lightweight presentation\
    \ protocol (LPP) is\n   contained in RFC 1085, \"ISO Presentation Services on\
    \ top of TCP/IP-\n   based internets\" [13].  The services defined in that memo\
    \ are the\n   minimal set of ISO presentation services required to support ACSE\
    \ and\n   ROSE.  The protocol specified to provide these services is a\n   replacement\
    \ for the ISO presentation protocol.\n"
- title: 10.1.  Lightweight Presentation Services
  contents:
  - "10.1.  Lightweight Presentation Services\n   All of the ISO presentation services\
    \ provided by the LPP are\n   mandatory: P-CONNECT, P-RELEASE, P-U-ABORT, P-P-ABORT,\
    \ and P-DATA.\n"
- title: 10.2.  Supporting Services
  contents:
  - "10.2.  Supporting Services\n   Depending on the quality of service indicated\
    \ in the P-CONNECT\n   request, the LPP will use either UDP (low quality) or TCP\
    \ (high\n   quality) as the underlying transport protocol.  UDP provides an\n\
    \   unreliable datagram service, while TCP provides a reliable\n   connection-oriented\
    \ transport service.\n   Practically speaking, there are two ways to discover\
    \ whether a remote\n   system supports the LPP over UDP or TCP.  The first is\
    \ to use some\n   undefined form of directory service. This might be nothing more\
    \ than\n   a local table.  The second way is simply to attempt to establish an\n\
    \   association with the remote application entity using the desired\n   quality\
    \ of service.  If the transport for that service is unavailable\n   on the remote\
    \ system, then the local presentation-service-provided\n   will issue a negative\
    \ P-CONNECT.CONFIRMATION primitive.  This will be\n   interpreted by ACSE as a\
    \ failure to establish an association with the\n   desired quality of service.\n\
    \   The following well-known UDP and TCP port numbers are defined:\n         \
    \    cmot manager     163/tcp\n             cmot manager     163/udp\n       \
    \      cmot agent       164/tcp\n             cmot agent       164/udp\n   When\
    \ UDP is used, an implementation need not accept a lightweight\n   presentation\
    \ PDU whose length exceeds 484.  The purpose of this\n   restriction is to ensure\
    \ that CMIP requests and responses can be\n   transmitted in a single unfragmented\
    \ IP datagram.\n"
- title: 10.3.  Lightweight Presentation Protocol
  contents:
  - "10.3.  Lightweight Presentation Protocol\n   No further agreements are needed\
    \ for the lightweight presentation\n   protocol defined in RFC 1085.\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   This RFC is the work of many people.  The following\
    \ members of the\n   IETF Netman working group and other interested individuals\
    \ made\n   important contributions:\n             Amatzia Ben-Artzi, 3Com\n  \
    \           Asheem Chandna, AT&T Bell Laboratories\n             Ken Chapman,\
    \ Digital Equipment Corporation\n             Anthony Chung, Sytek\n         \
    \    George Cohn, Ungermann-Bass\n             Gabriele Cressman, Sun Microsystems\n\
    \             Pranati Kapadia, Hewlett-Packard\n             Lee LaBarre, The\
    \ MITRE Corporation (chair)\n             Dave Mackie, 3Com\n             Keith\
    \ McCloghrie, The Wollongong Group\n             Jim Robertson, 3Com\n       \
    \      Milt Roselinsky, CMC\n             Marshall Rose, The Wollongong Group\n\
    \             John Scott, Data General\n             Lou Steinberg, IBM\n"
- title: 12.  References
  contents:
  - "12.  References\n     [1]  Cerf, V., \"IAB Recommendations for the Development\
    \ of Internet\n          Network Management Standards\", RFC 1052, April 1988.\n\
    \     [2]  Rose, M., and K. McCloghrie, \"Structure and Identification of\n  \
    \        Management Information for TCP/IP-based internets\", RFC 1065,\n    \
    \      August 1988.\n     [3]  McCloghrie, K., and M. Rose, \"Management Information\
    \ Base for\n          Network Management of TCP/IP-based internets\", RFC 1066,\n\
    \          August 1988.\n     [4]  Case, J., M. Fedor, M. Schoffstall, and J.\
    \ Davin, \"A Simple\n          Network Management Protocol (SNMP)\", RFC 1098,\
    \ (Obsoletes\n          RFC 1067), April 1989.\n     [5]  ISO 8824: \"Information\
    \ processing systems - Open Systems\n          Interconnection, Specification\
    \ of Abstract Syntax Notation One\n          (ASN.1)\", Geneva, March 1988.\n\
    \     [6]  ISO 8825: \"Information processing systems - Open Systems\n       \
    \   Interconnection, Specification of Basic Encoding Rules for\n          Abstract\
    \ Notation One (ASN.1)\", Geneva, March 1988.\n     [7]  ISO 8649: \"Information\
    \ processing systems - Open Systems\n          Interconnection, Service Definition\
    \ for Association Control\n          Service Element\".\n     [8]  ISO 8650: \"\
    Information processing systems - Open Systems\n          Interconnection, Protocol\
    \ Specification for Association\n          Control Service Element\".\n     [9]\
    \  CCITT Recommendation X.219, Working Document for ISO 9072-1:\n          \"\
    Information processing systems - Text Communication, Remote\n          Operations:\
    \ Model, Notation and Service Definition\",\n          Gloucester, November 1987.\n\
    \     [10]  CCITT Recommendation X.229, Working Document for ISO 9072-2:\n   \
    \        \"Information processing systems - Text Communication, Remote\n     \
    \      Operations: Protocol Specification\", Gloucester,\n           November\
    \ 1987.\n     [11]  ISO DIS 9595-2: \"Information processing systems - Open\n\
    \           Systems Interconnection, Management Information Service\n        \
    \   Definition - Part 2: Common Management Information\n           Service\",\
    \ 22 December 1988.\n     [12]  ISO DIS 9596-2: \"Information Processing Systems\
    \ - Open\n           Systems Interconnection, Management Information Protocol\n\
    \           Specification - Part 2: Common Management Information\n          \
    \ Protocol\", 22 December 1988.\n     [13]  Rose, M., \"ISO Presentation Services\
    \ on top of TCP/IP-based\n           internets\", RFC 1085, December 1988.\n \
    \    [14]  OSI Network Management Forum, \"Forum Interoperable Interface\n   \
    \        Protocols\", September 1988.\n     [15]  ISO DIS 7498-4: \"Information\
    \ processing systems - Open\n           Systems Interconnection, Basic Reference\
    \ Model - Part 4:\n           OSI Management Framework\".\n     [16]  ISO/IEC\
    \ JTC1/SC21/WG4 N571: \"Information processing systems -\n           Open Systems\
    \ Interconnection, Systems Management: Overview\",\n           London, July 1988.\n\
    \     [17]  Klerer, S. Mark, \"The OSI Management Architecture: An\n         \
    \  Overview\", IEEE Network Magazine, March 1988.\n     [18]  Ben-Artzi, A., \"\
    Network Management for TCP/IP Networks: An\n           Overview\", Internet Engineering\
    \ Task Force working note,\n           April 1988.\n     [19]  ISO/IEC JTC1/SC21/WG4\
    \ N3324: \"Information processing\n           systems - Open Systems Interconnection,\
    \ Management\n           Information Services - Structure of Management\n    \
    \       Information - Part I: Management Information Model\",\n           Sydney,\
    \ December 1988.\n     [20]  Postel, J., \"User Datagram Protocol\", RFC 768,\
    \ August 1980.\n     [21]  Postel, J., \"Transmission Control Protocol\", RFC\
    \ 793,\n           September 1981.\n     [22]  ISO DP 9534: \"Information processing\
    \ systems - Open Systems\n           Interconnection, Application Layer Structure\"\
    , 10 March 1987.\n     [23]  Rose, M., \"ISO Transport Services on top of the\
    \ TCP\",\n           RFC 1006, May 1987.\n     [24]  ISO 8822: \"Information processing\
    \ systems - Open Systems\n           Interconnection, Connection Oriented Presentation\
    \ Service\n           Definition\", June 1987.\n     [25]  Postel, J., \"Internet\
    \ Protocol\", RFC 791, September 1981.\n     [26]  CCITT Draft Recommendation\
    \ X.500, ISO DIS 9594/1-8: \"The\n           Directory\", Geneva, March 1988.\n"
- title: Appendix A - The CMOT Group
  contents:
  - "Appendix A - The CMOT Group\n   CMOT DEFINITIONS ::= BEGIN\n   IMPORTS OBJECT-TYPE\
    \ FROM RFC1065-SMI;\n   IMPORTS mib FROM RFC1066-MIB;\n     cmot  OBJECT IDENTIFIER\
    \ ::= { mib 9 }\n     -- The following assignments are made for the purpose of\n\
    \     -- identification within CMOT and do not refer to MIB objects.\n     cmotVersion\
    \              OBJECT IDENTIFIER ::= { cmot 1 }\n     cmotAcseInfo           \
    \  OBJECT IDENTIFIER ::= { cmot 2 }\n     cmotAcseAccessControl    OBJECT IDENTIFIER\
    \ ::= { cmotAcseInfo 1 }\n     -- The following definition is made for use in\
    \ referencing a\n     -- managed system (for the purpose of proxy management)\
    \ in the\n     -- CMIP Object Instance field. It does not represent a MIB\n  \
    \   -- object.\n     cmotSystemID OBJECT-TYPE\n             SYNTAX  CmotSystemID\n\
    \             ACCESS  not-accessible\n             STATUS  optional\n        \
    \     ::= { cmot 3 }\n     CmotSystemID ::= CHOICE {\n             arbitrary \
    \    [0] IMPLICIT OCTET STRING,\n             proxyIndex    [1] IMPLICIT INTEGER,\n\
    \             inetAddr      [2] IMPLICIT IpAddress,\n             domainName \
    \   [3] IMPLICIT OCTET STRING,\n             mac802Addr    [4] IMPLICIT OCTET\
    \ STRING,\n             x121Addr      [5] IMPLICIT OCTET STRING,\n           \
    \  nsap          [6] IMPLICIT OCTET STRING,\n             netbiosName   [7] IMPLICIT\
    \ OCTET STRING,\n             snaName       [8] IMPLICIT OCTET STRING,\n     \
    \        adminId       [9] IMPLICIT OBJECT IDENTIFIER\n     }\n      -- All addresses\
    \ should be conveyed in network-byte order.\n   END\n"
- title: Appendix B - Management Information Summary
  contents:
  - "Appendix B - Management Information Summary\n   RFC1066-MIB-INTERPRETATION\n\
    \          { iso org(3) dod(6) internet(1) mgmt(2) 1 }\n              DEFINITIONS\
    \ ::= BEGIN\n              IMPORTS mgmt, OBJECT-TYPE FROM RFC1065-SMI;\n     \
    \           mib        OBJECT IDENTIFIER ::= { mgmt 1 }\n                system\
    \     OBJECT IDENTIFIER ::= { mib 1 }\n                interfaces OBJECT IDENTIFIER\
    \ ::= { mib 2 }\n                at         OBJECT IDENTIFIER ::= { mib 3 }\n\
    \                ip         OBJECT IDENTIFIER ::= { mib 4 }\n                icmp\
    \       OBJECT IDENTIFIER ::= { mib 5 }\n                tcp        OBJECT IDENTIFIER\
    \ ::= { mib 6 }\n                udp        OBJECT IDENTIFIER ::= { mib 7 }\n\
    \                egp        OBJECT IDENTIFIER ::= { mib 8 }\n         -- definition\
    \ of object class\n         OBJECT-CLASS MACRO  ::=\n         BEGIN\n        \
    \   TYPE NOTATION  ::= SubClassOf Superiors Names Attributes\n           VALUE\
    \ NOTATION ::= value(VALUE OBJECT IDENTIFIER)\n           SubClassOf     ::= \"\
    SUBCLASS OF\" value(OBJECT-CLASS)\n                                          \
    \  | empty\n           Superiors      ::= \"SUPERIORS\" \"{\" SuperiorList \"\
    }\"\n                                            | empty\n           Names   \
    \       ::= \"NAMES\" \"{\" AttributeList \"}\"\n                            \
    \                | empty\n           Attributes     ::= \"CONTAINS\" \"{\" AttributeList\
    \ \"}\"\n                                            | empty\n           SuperiorList\
    \   ::= Superior | Superior \",\" SuperiorList\n           Superior       ::=\
    \ value(OBJECT-CLASS)\n           AttributeList  ::= Attribute | Attribute \"\
    ,\" AttributeList\n           Attribute      ::= value(OBJECT-TYPE)\n        \
    \ END\n         -- the System group\n         system OBJECT-CLASS\n          \
    \       NAMES  { cmotSystemID }   -- Appendix A\n                 CONTAINS  {\n\
    \                         sysDescr,\n                         sysObjectID,\n \
    \                        sysUpTime\n                 }\n                 ::= {\
    \ mib 1 }\n         -- the Interfaces group\n         interfaces OBJECT-CLASS\n\
    \                 SUPERIORS  { system }\n                 CONTAINS  { ifNumber\
    \ }\n                 ::= { mib 2 }\n         ifTable OBJECT-CLASS\n         \
    \        SUPERIORS  { interfaces }\n                 ::= { interfaces 2 }\n  \
    \       ifEntry OBJECT-CLASS\n                 SUPERIORS  { ifTable }\n      \
    \           NAMES { ifIndex }\n                 CONTAINS  {\n                \
    \         ifIndex,\n                         ifDescr,\n                      \
    \   ifType,\n                         ifMtu,\n                         ifSpeed,\n\
    \                         ifPhysAddress,\n                         ifAdminStatus,\n\
    \                         ifOperStatus,\n                         ifLastChange,\n\
    \                         ifInOctets,\n                         ifInUcastPkts,\n\
    \                         ifInNUcastPkts,\n                         ifInDiscards,\n\
    \                         ifInErrors,\n                         ifInUnknownProtos,\n\
    \                         ifOutOctets,\n                         ifOutUcastPkts,\n\
    \                         ifOutNUcastPkts,\n                         ifOutDiscards,\n\
    \                         ifOutErrors,\n                         ifOutQLen\n \
    \                }\n                 ::= { ifTable 1 }\n         -- the Address\
    \ Translation group\n         at OBJECT-CLASS\n                 SUPERIORS  { system\
    \ }\n                 ::= { mib 3 }\n         atTable OBJECT-CLASS\n         \
    \        SUPERIORS  { at }\n                 ::= { at 1 }\n         atEntry OBJECT-CLASS\n\
    \                 SUPERIORS  { atTable }\n                 NAMES  {\n        \
    \                 atIfIndex,\n                         atNetAddress\n        \
    \         }\n                 CONTAINS  {\n                         atIfIndex,\n\
    \                         atPhysAddress,\n                         atNetAddress\n\
    \                 }\n                 ::= { atTable 1 }\n         -- the IP group\n\
    \         ip OBJECT-CLASS\n                 SUPERIORS  { system }\n          \
    \       CONTAINS  {\n                         ipForwarding,\n                \
    \         ipDefaultTTL,\n                         ipInReceives,\n            \
    \             ipInHdrErrors,\n                         ipInAddrErrors,\n     \
    \                    ipForwDatagrams,\n                         ipInUnknownProtos,\n\
    \                         ipInDiscards,\n                         ipInDelivers,\n\
    \                         ipOutRequests,\n                         ipOutDiscards,\n\
    \                         ipOutNoRoutes,\n                         ipReasmTimeout,\n\
    \                         ipReasmReqds,\n                         ipReasmOKs,\n\
    \                         ipReasmFails,\n                         ipFragOKs,\n\
    \                         ipFragFails,\n                         ipFragCreates\n\
    \                 }\n                 ::= { mib 4 }\n         -- the IP Interface\
    \ table\n         ipAddrTable OBJECT-CLASS\n                 SUPERIORS  { ip }\n\
    \                 ::= { ip 20 }\n         ipAddrEntry OBJECT-CLASS\n         \
    \        SUPERIORS  { ipAddrTable }\n                 NAMES  { ipAdEntAddr }\n\
    \                 CONTAINS  {\n                         ipAdEntAddr,\n       \
    \                  ipAdEntIfIndex,\n                         ipAdEntNetMask,\n\
    \                         ipAdEntBcastAddr\n                 }\n             \
    \    ::= { ipAddrTable 1 }\n         -- the IP Routing table\n         ipRoutingTable\
    \ OBJECT-CLASS\n                 SUPERIORS  { ip }\n                 ::= { ip\
    \ 21 }\n         ipRouteEntry OBJECT-CLASS\n                 SUPERIORS  { ipRoutingTable\
    \ }\n                 NAMES  { ipRouteDest }\n                 CONTAINS  {\n \
    \                        ipRouteDest,\n                         ipRouteIfIndex,\n\
    \                         ipRouteMetric1,\n                         ipRouteMetric2,\n\
    \                         ipRouteMetric3,\n                         ipRouteMetric4,\n\
    \                         ipRouteNextHop,\n                         ipRouteType,\n\
    \                         ipRouteProto,\n                         ipRouteAge\n\
    \                 }\n                 ::= { ipRoutingTable 1 }\n         -- the\
    \ ICMP group\n         icmp OBJECT-CLASS\n                 SUPERIORS  { system\
    \ }\n                 CONTAINS  {\n                         icmpInMsgs,\n    \
    \                     icmpInErrors,\n                         icmpInDestUnreachs,\n\
    \                         icmpInTimeExcds,\n                         icmpInParmProbs,\n\
    \                         icmpInSrcQuenchs,\n                         icmpInRedirects,\n\
    \                         icmpInEchos,\n                         icmpInEchoReps,\n\
    \                         icmpInTimestamps,\n                         icmpInTimestampReps,\n\
    \                         icmpInAddrMasks,\n                         icmpInAddrMaskReps,\n\
    \                         icmpOutMsgs,\n                         icmpOutErrors,\n\
    \                         icmpOutDestUnreachs,\n                         icmpOutTimeExcds,\n\
    \                         icmpOutParmProbs,\n                         icmpOutSrcQuenchs,\n\
    \                         icmpOutRedirects,\n                         icmpOutEchos,\n\
    \                         icmpOutEchoReps,\n                         icmpOutTimestamps,\n\
    \                         icmpOutTimestampReps,\n                         icmpOutAddrMasks,\n\
    \                         icmpOutAddrMaskReps\n                 }\n          \
    \       ::= { mib 5 }\n         -- the TCP group\n         tcp OBJECT-CLASS\n\
    \                 SUPERIORS  { system }\n                 CONTAINS  {\n      \
    \                   tcpRtoAlgorithm,\n                         tcpRtoMin,\n  \
    \                       tcpRtoMax,\n                         tcpMaxConn,\n   \
    \                      tcpActiveOpens,\n                         tcpPassiveOpens,\n\
    \                         tcpAttemptFails,\n                         tcpEstabResets,\n\
    \                         tcpCurrEstab,\n                         tcpInSegs,\n\
    \                         tcpOutSegs,\n                         tcpRetransSegs\n\
    \                 }\n                 ::= { mib 6 }\n         -- the TCP connections\
    \ table\n         tcpConnTable OBJECT-CLASS\n                 SUPERIORS  { tcp\
    \ }\n                 ::= { tcp 13 }\n         tcpConnEntry OBJECT-CLASS\n   \
    \              SUPERIORS  { tcpConnTable }\n                 NAMES  {\n      \
    \                   tcpConnLocalAddress,\n                         tcpConnLocalPort,\n\
    \                         tcpConnRemAddress,\n                         tcpConnRemPort\n\
    \                 }\n                 CONTAINS  {\n                         tcpConnState,\n\
    \                         tcpConnLocalAddress,\n                         tcpConnLocalPort,\n\
    \                         tcpConnRemAddress,\n                         tcpConnRemPort\n\
    \                 }\n                 ::= { tcpConnTable 1 }\n         -- the\
    \ UDP group\n        udp OBJECT-CLASS\n                 SUPERIORS  { system }\n\
    \                 CONTAINS  {\n                         udpInDatagrams,\n    \
    \                     udpNoPorts,\n                         udpInErrors,\n   \
    \                      udpOutDatagrams\n                 }\n                 ::=\
    \ { mib 7 }\n         -- the EGP group\n          egp OBJECT-CLASS\n         \
    \        SUPERIORS  { system }\n                 CONTAINS  {\n               \
    \          egpInMsgs,\n                         egpInErrors,\n               \
    \          egpOutMsgs,\n                         egpOutErrors\n              \
    \   }\n                 ::= { mib 8 }\n          -- the EGP Neighbor table\n \
    \         egpNeighTable OBJECT-CLASS\n                 SUPERIORS  { egp }\n  \
    \               ::= { egp 5 }\n         egpNeighEntry OBJECT-CLASS\n         \
    \        SUPERIORS  { egpNeighTable }\n                 NAMES  { egpNeighAddr\
    \ }\n                 CONTAINS  {\n                         egpNeighState,\n \
    \                        egpNeighAddr\n                 }\n                 ::=\
    \ { egpNeighTable 1 }\n         END\n"
- title: Appendix C - Sample Protocol Exchanges
  contents:
  - "Appendix C - Sample Protocol Exchanges\n   The following are sample protocol\
    \ exchanges between a manager and an\n   agent.  The manager establishes an association\
    \ with the agent,\n   requests the number of IP address and header errors, requests\
    \ the\n   type of route corresponding to the destination address 10.0.0.51,\n\
    \   requests the TCP connection with the well-known port for FTP, and\n   then\
    \ releases the association.  All of these samples show the\n   lightweight presentation\
    \ protocol being used over TCP.\n   --\n   -- the manager sends an ACSE association\
    \ request carried in a\n   -- presentation connect request PDU\n   --\n   {\n\
    \      connectRequest {                             -- LPP\n         version version-1,\n\
    \         reference {\n            callingSSUserReference \"sri-nic.arpa\",\n\
    \            commonReference \"880821222531Z\"\n         },\n         asn 1.3.6.1.2.1.9.1.1,\n\
    \         user-data {                               -- ACSE\n            protocol-version\
    \ version1,\n            application-context-name 1.3.6.1.2.1.9.1.1,\n       \
    \     user-information {\n               functionalUnits {\n                 \
    \ direct-reference 1.0.9596.2.1.0.0,\n                  encoding {\n         \
    \            single-ASN1-type '010110101010101010110B'\n                     \
    \                                    -- Full Manager\n                  }\n  \
    \             }\n            }\n         }\n      }\n   }\n   --\n   -- the agent\
    \ sends an ACSE association response carried in a\n   -- presentation connect\
    \ response PDU\n   --\n   {\n      connectResponse {                         \
    \  -- LPP\n         user-data {\n            user-information {              \
    \      -- ACSE\n               functionalUnits {\n                  direct-reference\
    \ 1.0.9596.2.1.0.0,\n                  encoding {\n                     single-ASN1-type\
    \ '101001010101010101110B'\n                                                 \
    \          -- Full Agent\n                  }\n               }\n            }\n\
    \         }\n      }\n   }\n   --\n   -- the manager sends a get request to read\
    \ the values of\n   -- ipInHdrErrors and ipInAddrErrors\n   --\n   {\n      userData\
    \ {                                   -- LPP\n         ro-Invoke {           \
    \                    -- ROSE\n            invokeID 10,\n            operation-value\
    \ m-Get(3),\n            argument {                             -- CMIP\n    \
    \           baseManagedObjectClass {\n                  globalForm ip { 1.3.6.1.2.1.4\
    \ }\n               },\n               baseManagedObjectInstance {\n         \
    \         distinguishedName {\n                     relativeDistinguishedName\
    \ {}\n                  }\n               },\n               attributeIdList {\n\
    \                  attributeId {\n                     localID 4             \
    \        -- ipInHdrErrors\n                  },\n                  attributeId\
    \ {\n                     localID 5                     -- ipInAddrErrors\n  \
    \                }\n               }\n            }\n         }\n      }\n   }\n\
    \   --\n   -- the agent replies with a get response indicating that\n   -- ipInHdrErrors\
    \ = 0 and ipInAddrErrors = 2\n   --\n   {\n      userData {                  \
    \                 -- LPP\n         ro-Result {                               --\
    \ ROSE\n            invokeID 10,\n            {\n               operation-value\
    \ m-Get(3),\n               argument {                          -- CMIP\n    \
    \              baseManagedObjectClass {\n                     globalForm ip {\
    \ 1.3.6.1.2.1.4 }\n                  },\n                  baseManagedObjectInstance\
    \ {\n                     distinguishedName {\n                        relativeDistinguishedName\
    \ {}\n                     }\n                  },\n                  currentTime\
    \ \"19880821222541.300000Z\",\n                  attributeList {\n           \
    \          attribute {\n                        attributeId {\n              \
    \             localID 4               -- ipInHdrErrors\n                     \
    \   },\n                        attributeValue 0\n                     },\n  \
    \                   attribute {\n                        attributeId {\n     \
    \                      localID 5               -- ipInAddrErrors\n           \
    \             },\n                        attributeValue 2\n                 \
    \    }\n                  }\n               }\n            }\n         }\n   \
    \   }\n   }\n   --\n   -- the manager sends a get request to discover the ipRouteType\
    \ for\n   -- the IP routing entry with ipRouteDest = 10.0.0.51\n   --\n   {\n\
    \      userData {                                   -- LPP\n         ro-Invoke\
    \ {                               -- ROSE\n            invokeID 11,\n        \
    \    operation-value m-Get (3),\n            argument {                      \
    \       -- CMIP\n               baseManagedObjectClass {\n                  globalForm\
    \ ipRouteEntry { 1.3.6.1.2.1.4.21.1 }\n               },\n               baseManagedObjectInstance\
    \ {\n                  distinguishedName {\n                     relativeDistinguishedName\
    \ {\n                        attributeValueAssertion {\n                     \
    \      attributeType ipRouteDest\n                                        { 1.3.6.1.2.1.4.21.1.1\
    \ },\n                           attributeValue 10.0.0.51\n                  \
    \      }\n                     }\n                  }\n               },\n   \
    \            attributeIdList {\n                  attributeId {\n            \
    \         localID 8                     -- ipRouteType\n                  }\n\
    \               }\n            }\n         }\n      }\n   }\n   --\n   -- the\
    \ agent replies with a get response indicating the appropriate\n   -- route type\n\
    \   --\n   {\n      userData {                                   -- LPP\n    \
    \     ro-Result {                               -- ROSE\n            invokeID\
    \ 11,\n            {\n               operation-value m-Get(3),\n             \
    \  argument {                          -- CMIP\n                  baseManagedObjectClass\
    \ {\n                     globalForm ipRouteEntry { 1.3.6.1.2.1.4.21.1 }\n   \
    \               },\n                  baseManagedObjectInstance {\n          \
    \           distinguishedName {\n                        relativeDistinguishedName\
    \ {\n                           attributeValueAssertion {\n                  \
    \            attributeType ipRouteDest\n                                     \
    \      { 1.3.6.1.2.1.4.21.1.1 },\n                              attributeValue\
    \ 10.0.0.51\n                           }\n                        }\n       \
    \              }\n                  },\n                  currentTime \"19880821222613.780000Z\"\
    ,\n                  attributeList {\n                     attribute {\n     \
    \                   attributeId {\n                           localID 8      \
    \         -- ipRouteType\n                        },\n                       \
    \ attributeValue \"direct\"\n                     }\n                  }\n   \
    \            }\n            }\n         }\n      }\n   }\n   --\n   -- the manager\
    \ sends a get request to read the TCP connection with\n   -- the well-known port\
    \ for FTP.\n   --\n   {\n      userData {                                   --\
    \ LPP\n         ro-Invoke {                               -- ROSE\n          \
    \  invokeID 12,\n            operation-value m-Get(3),\n            argument {\
    \                             -- CMIP\n               baseManagedObjectClass {\n\
    \                  globalForm tcpConnTable { 1.3.6.1.2.1.6.13 }\n            \
    \   },\n               baseManagedObjectInstance {\n                  distinguishedName\
    \ {\n                     relativeDistinguishedName { }\n                  }\n\
    \               },\n               scope oneLevel(1),\n               filter {\n\
    \                  item {\n                     equality {\n                 \
    \       attributeType tcpConnLocalPort\n                              { 1.3.6.1.2.1.6.13.1.3\
    \ }\n                        attributeValue 21           -- ftp\n            \
    \         }\n                  }\n               }\n               attributeIdList\
    \ { } -- an empty list means all attributes\n            }\n         }\n     \
    \ }\n   }\n   --\n   -- the agent replies with a get response providing the desired\
    \ TCP\n   -- connection information. If more than one TCP connection had\n   --\
    \ satisfied the filter condition, a series of one or more linked\n   -- reply\
    \ PDUs would have been returned before the final get response.\n   --\n   {\n\
    \      userData {                                   -- LPP\n         ro-Result\
    \ {                               -- ROSE\n            invokeID 12,\n        \
    \    {\n               operation-value m-Get(3),\n               argument {  \
    \                        -- CMIP\n                  baseManagedObjectClass {\n\
    \                     globalForm tcpConnEntry { 1.3.6.1.2.1.6.13.1 }\n       \
    \           },\n                  baseManagedObjectInstance {\n              \
    \       distinguishedName {\n                        relativeDistinguishedName\
    \ {\n                           attributeValueAssertion {\n                  \
    \            attributeType  { tcpConnLocalAddress },\n                       \
    \       attributeValue 128.10.0.34\n                           },\n          \
    \                 attributeValueAssertion {\n                              attributeType\
    \  { tcpConnLocalPort },\n                              attributeValue 21\n  \
    \                         },\n                           attributeValueAssertion\
    \ {\n                              attributeType  { tcpConnRemAddress },\n   \
    \                           attributeValue 0.0.0.0\n                         \
    \  },\n                           attributeValueAssertion {\n                \
    \              attributeType  { tcpConnRemPort },\n                          \
    \    attributeValue 0\n                           },\n                       \
    \ }\n                     }\n                  },\n                  currentTime\
    \ \"19880821222541.300000Z\",\n                  attributeList {\n           \
    \          attribute {\n                        attributeId {\n              \
    \             localId 1              -- tcpConnState\n                       \
    \ },\n                        attributeValue LISTEN\n                     },\n\
    \                     attribute {\n                        attributeId {\n   \
    \                        localId 2              -- tcpConnLocalAddress\n     \
    \                   },\n                        attributeValue 128.10.0.34\n \
    \                    },\n                     attribute {\n                  \
    \      attributeId {\n                           localId 3              -- tcpConnLocalPort\n\
    \                        },\n                        attributeValue 21\n     \
    \                },\n                     attribute {\n                      \
    \  attributeId {\n                           localId 4              -- tcpConnRemAddress\n\
    \                        },\n                        attributeValue 0.0.0.0\n\
    \                     },\n                     attribute {\n                 \
    \       attributeId {\n                           localId 5              -- tcpConnRemPort\n\
    \                        },\n                        attributeValue 0\n      \
    \               }\n                  }\n               }\n            }\n    \
    \     }\n      }\n   }\n   --\n   -- the manager sends a presentation release\
    \ request\n   --\n   {\n      releaseRequest {                             --\
    \ LPP\n         user-data {                               -- ACSE\n          \
    \  reason normal\n         }\n      }\n   }\n   --\n   -- the agent sends a presentation\
    \ release response\n   --\n   {\n      releaseResponse {                     \
    \       -- LPP\n         user-data {                               -- ACSE\n \
    \           reason normal\n         }\n      }\n   }\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Unnikrishnan S. Warrier\n   Unisys Corporation\n   2400\
    \ Colorado  MS #42-13\n   Santa Monica, CA 90406\n   Phone: (213) 453-5196\n \
    \  Email: unni@cs.ucla.edu\n   Larry Besaw\n   Hewlett-Packard\n   3404 East Harmony\
    \ Road\n   Fort Collins, CO 80525\n   Phone: (303) 229-6022\n   Email: lmb%hpcndaw@hplabs.hp.com\n"
