- contents:
  - "  A Set of Simple Authentication and Security Layer (SASL) Mechanisms\n                               for
    OAuth\n"
  title: __initial_text__
- contents:
  - "Abstract\n   OAuth enables a third-party application to obtain limited access
    to a\n   protected resource, either on behalf of a resource owner by\n   orchestrating
    an approval interaction or by allowing the third-party\n   application to obtain
    access on its own behalf.\n   This document defines how an application client
    uses credentials\n   obtained via OAuth over the Simple Authentication and Security
    Layer\n   (SASL) to access a protected resource at a resource server.  Thereby,\n
    \  it enables schemes defined within the OAuth framework for non-HTTP-\n   based
    application protocols.\n   Clients typically store the user's long-term credential.
    \ This does,\n   however, lead to significant security vulnerabilities, for example,\n
    \  when such a credential leaks.  A significant benefit of OAuth for\n   usage
    in those clients is that the password is replaced by a shared\n   secret with
    higher entropy, i.e., the token.  Tokens typically\n   provide limited access
    rights and can be managed and revoked\n   separately from the user's long-term
    password.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7628.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    . . .   5\n   3.  OAuth SASL Mechanism Specifications . . . . . . . . . . . .
    .   6\n     3.1.  Initial Client Response . . . . . . . . . . . . . . . . .   7\n
    \      3.1.1.  Reserved Key/Values . . . . . . . . . . . . . . . . .   8\n     3.2.
    \ Server's Response . . . . . . . . . . . . . . . . . . . .   8\n       3.2.1.
    \ OAuth Identifiers in the SASL Context . . . . . . . .   9\n       3.2.2.  Server
    Response to Failed Authentication  . . . . . .   9\n       3.2.3.  Completing
    an Error Message Sequence  . . . . . . . .  10\n     3.3.  OAuth Access Token
    Types using Keyed Message Digests  . .  11\n   4.  Examples  . . . . . . . . .
    . . . . . . . . . . . . . . . . .  12\n     4.1.  Successful Bearer Token Exchange
    \ . . . . . . . . . . . .  12\n     4.2.  Successful OAuth 1.0a Token Exchange
    \ . . . . . . . . . .  13\n     4.3.  Failed Exchange . . . . . . . . . . . .
    . . . . . . . . .  14\n     4.4.  SMTP Example of a Failed Negotiation  . . .
    . . . . . . .  15\n   5.  Security Considerations . . . . . . . . . . . . . .
    . . . . .  16\n   6.  Internationalization Considerations . . . . . . . . . .
    . . .  17\n   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . .
    .  18\n     7.1.  SASL Registration . . . . . . . . . . . . . . . . . . . .  18\n
    \  8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  19\n     8.1.
    \ Normative References  . . . . . . . . . . . . . . . . . .  19\n     8.2.  Informative
    References  . . . . . . . . . . . . . . . . .  20\n   Acknowledgements  . . .
    . . . . . . . . . . . . . . . . . . . . .  21\n   Authors' Addresses  . . . .
    . . . . . . . . . . . . . . . . . . .  21\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   OAuth 1.0a [RFC5849] and OAuth 2.0 [RFC6749] are protocol
    frameworks\n   that enable a third-party application to obtain limited access
    to a\n   protected resource, either by orchestrating an approval interaction\n
    \  on behalf of a resource owner or by allowing the third-party\n   application
    to obtain access on its own behalf.\n   The core OAuth 2.0 specification [RFC6749]
    specifies the interaction\n   between the OAuth client and the authorization server;
    it does not\n   define the interaction between the OAuth client and the resource\n
    \  server for the access to a protected resource using an access token.\n   Instead,
    the OAuth client to resource server interaction is described\n   in separate specifications,
    such as the bearer token specification\n   [RFC6750].  OAuth 1.0a includes the
    protocol specification for the\n   communication between the OAuth client and
    the resource server in\n   [RFC5849].\n   The main use cases for OAuth 1.0a and
    OAuth 2.0 have so far focused\n   on an HTTP-based [RFC7230] environment only.
    \ This document\n   integrates OAuth 1.0a and OAuth 2.0 into non-HTTP-based applications\n
    \  using the integration into the Simple Authentication and Security\n   Layer
    (SASL) [RFC4422].  Hence, this document takes advantage of the\n   OAuth protocol
    and its deployment base to provide a way to use SASL\n   to gain access to resources
    when using non-HTTP-based protocols, such\n   as the Internet Message Access Protocol
    (IMAP) [RFC3501] and the\n   Simple Mail Transfer Protocol (SMTP) [RFC5321].  This
    document gives\n   examples of use in IMAP and SMTP.\n   To illustrate the impact
    of integrating this specification into an\n   OAuth-enabled application environment,
    Figure 1 shows the abstract\n   message flow of OAuth 2.0 [RFC6749].  As indicated
    in the figure,\n   this document impacts the exchange of messages (E) and (F)
    since SASL\n   is used for interaction between the client and the resource server\n
    \  instead of HTTP.\n                                                              ----+\n
    \  +--------+                                  +---------------+  |\n   |        |--(A)--
    Authorization Request --->|   Resource    |  |\n   |        |                                  |
    \   Owner      |  |Plain\n   |        |<-(B)------ Access Grant ---------|               |
    \ |OAuth\n   |        |                                  +---------------+  |2.0\n
    \  |        |                                                     |\n   |        |
    \        Client Credentials &     +---------------+  |\n   |        |--(C)------
    Access Grant -------->| Authorization |  |\n   | Client |                                  |
    \   Server     |  |\n   |        |<-(D)------ Access Token ---------|               |
    \ |\n   |        |      (w/ Optional Refresh Token) +---------------+  |\n   |
    \       |                                                 ----+\n   |        |
    \                                                ----+\n   |        |                                  +---------------+
    \ |\n   |        |                                  |               |  |OAuth\n
    \  |        |--(E)------ Access Token -------->|   Resource    |  |over\n   |
    \       |                                  |    Server     |  |SASL\n   |        |<-(F)----
    Protected Resource -----|               |  |\n   |        |                                  |
    \              |  |\n   +--------+                                  +---------------+
    \ |\n                                                              ----+\n                     Figure
    1: OAuth 2.0 Protocol Flow\n   SASL is a framework for providing authentication
    and data security\n   services in connection-oriented protocols via replaceable\n
    \  authentication mechanisms.  It provides a structured interface\n   between
    protocols and mechanisms.  The resulting framework allows new\n   protocols to
    reuse existing authentication mechanisms and allows old\n   protocols to make
    use of new authentication mechanisms.  The\n   framework also provides a protocol
    for securing subsequent exchanges\n   within a data security layer.\n   When OAuth
    is integrated into SASL, the high-level steps are as\n   follows:\n   (A)  The
    client requests authorization from the resource owner.  The\n        authorization
    request can be made directly to the resource owner\n        (as shown) or indirectly
    via the authorization server as an\n        intermediary.\n   (B)  The client
    receives an authorization grant, which is a\n        credential representing the
    resource owner's authorization,\n        expressed using one of the grant types
    defined in [RFC6749] or\n        [RFC5849] or using an extension grant type.  The
    authorization\n        grant type depends on the method used by the client to
    request\n        authorization and the types supported by the authorization\n
    \       server.\n   (C)  The client requests an access token by authenticating
    with the\n        authorization server and presenting the authorization grant.\n
    \  (D)  The authorization server authenticates the client and validates\n        the
    authorization grant, and if valid, it issues an access\n        token.\n   (E)
    \ The client requests the protected resource from the resource\n        server
    and authenticates it by presenting the access token.\n   (F)  The resource server
    validates the access token, and if valid, it\n        indicates a successful authentication.\n
    \  Again, steps (E) and (F) are not defined in [RFC6749] (but are\n   described
    in, for example, [RFC6750] for the OAuth bearer token\n   instead) and are the
    main functionality specified within this\n   document.  Consequently, the message
    exchange shown in Figure 1 is\n   the result of this specification.  The client
    will generally need to\n   determine the authentication endpoints (and perhaps
    the service\n   endpoints) before the OAuth 2.0 protocol exchange messages in
    steps\n   (A)-(D) are executed.  The discovery of the resource owner,\n   authorization
    server endpoints, and client registration are outside\n   the scope of this specification.
    \ The client must discover the\n   authorization endpoints using a discovery mechanism
    such as OpenID\n   Connect Discovery (OIDCD) [OpenID.Discovery] or WebFinger using
    host-\n   meta [RFC7033].  Once credentials are obtained, the client proceeds\n
    \  to steps (E) and (F) defined in this specification.  Authorization\n   endpoints
    MAY require client registration, and generic clients SHOULD\n   support the Dynamic
    Client Registration protocol [RFC7591].\n   OAuth 1.0a follows a similar model
    but uses a different terminology\n   and does not separate the resource server
    from the authorization\n   server.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in\n   [RFC2119].\n   The reader is assumed to be familiar with the terms used
    in the OAuth\n   2.0 specification [RFC6749] and SASL [RFC4422].\n   In examples,
    \"C:\" and \"S:\" indicate lines sent by the client and\n   server, respectively.
    \ Line breaks have been inserted for\n   readability.\n   Note that the IMAP SASL
    specification requires base64 encoding, as\n   specified in Section 4 of [RFC4648].\n"
  title: 2.  Terminology
- contents:
  - "3.  OAuth SASL Mechanism Specifications\n   SASL is used as an authentication
    framework in a variety of\n   application-layer protocols.  This document defines
    the following\n   SASL mechanisms for usage with OAuth:\n      OAUTHBEARER:  OAuth
    2.0 bearer tokens, as described in [RFC6750].\n         RFC 6750 uses Transport
    Layer Security (TLS) [RFC5246] to\n         secure the protocol interaction between
    the client and the\n         resource server.\n      OAUTH10A:  OAuth 1.0a Message
    Authentication Code (MAC) tokens\n         (using the HMAC-SHA1 keyed message
    digest), as described in\n         Section 3.4.2 of [RFC5849].\n   New extensions
    may be defined to add additional OAuth Access Token\n   Types.  Such a new SASL
    OAuth mechanism can be added by registering\n   the new name(s) with IANA in the
    SASL Mechanisms registry and citing\n   this specification for the further definition.\n
    \  SASL mechanisms using this document as their definition do not\n   provide
    a data security layer; that is, they cannot provide integrity\n   or confidentiality
    protection for application messages after the\n   initial authentication.  If
    such protection is needed, TLS or some\n   similar solution should be used.  Additionally,
    for the two\n   mechanisms specified in this document, TLS MUST be used for\n
    \  OAUTHBEARER to protect the bearer token; for OAUTH10A, the use of TLS\n   is
    RECOMMENDED.\n   These mechanisms are client initiated and in lockstep, with the\n
    \  server always replying to a client message.  In the case where the\n   client
    has and correctly uses a valid token, the flow is:\n   1.  Client sends a valid
    and correct initial client response.\n   2.  Server responds with a successful
    authentication.\n   In the case where authentication fails, the server sends an
    error\n   result; the client MUST then send an additional message to the server\n
    \  in order to allow the server to finish the exchange.  Some protocols\n   and
    common SASL implementations do not support both sending a SASL\n   message and
    finalizing a SASL negotiation.  The additional client\n   message in the error
    case deals with this problem.  This exchange is:\n   1.  Client sends an invalid
    initial client response.\n   2.  Server responds with an error message.\n   3.
    \ Client sends a dummy client response.\n   4.  Server fails the authentication.\n"
  - contents:
    - "3.1.  Initial Client Response\n   Client responses are a GS2 [RFC5801] header
      followed by zero or more\n   key/value pairs, or it may be empty.  The gs2-header
      rule is defined\n   here as a placeholder for compatibility with GS2 if a GS2
      mechanism\n   is formally defined, but this document does not define one.  The
      key/\n   value pairs take the place of the corresponding HTTP headers and\n
      \  values to convey the information necessary to complete an OAuth-style\n   HTTP
      authorization.  Unknown key/value pairs MUST be ignored by the\n   server.  The
      ABNF [RFC5234] syntax is:\n     kvsep          = %x01\n     key            =
      1*(ALPHA)\n     value          = *(VCHAR / SP / HTAB / CR / LF )\n     kvpair
      \        = key \"=\" value kvsep\n   ;;gs2-header     = See RFC 5801\n     client-resp
      \   = (gs2-header kvsep *kvpair kvsep) / kvsep\n   The GS2 header MAY include
      the username associated with the resource\n   being accessed, the \"authzid\".
      \ It is worth noting that application\n   protocols are allowed to require an
      authzid, as are specific server\n   implementations.\n   The client response
      consisting of only a single kvsep is used only\n   when authentication fails
      and is only valid in that context.  If sent\n   as the first message from the
      client, the server MAY simply fail the\n   authentication without returning
      discovery information since there is\n   no user or server name indication.\n
      \  The following keys and corresponding values are defined in the client\n   response:\n
      \     auth (REQUIRED):  The payload that would be in the HTTP\n         Authorization
      header if this OAuth exchange was being carried\n         out over HTTP.\n      host:
      \ Contains the hostname to which the client connected.  In an\n         HTTP
      context, this is the value of the HTTP Host header.\n      port:  Contains the
      destination port that the client connected to,\n         represented as a decimal
      positive integer string without\n         leading zeros.\n   For OAuth token
      types such as OAuth 1.0a that use keyed message\n   digests, the client MUST
      send host and port number key/values, and\n   the server MUST fail an authorization
      request requiring keyed message\n   digests that are not accompanied by host
      and port values.  In OAuth\n   1.0a, for example, the so-called \"signature
      base string calculation\"\n   includes the reconstructed HTTP URL.\n"
    - contents:
      - "3.1.1.  Reserved Key/Values\n   In these mechanisms, values for path, query
        string and post body are\n   assigned default values.  OAuth authorization
        schemes MAY define\n   usage of these in the SASL context and extend this
        specification.\n   For OAuth Access Token Types that include a keyed message
        digest of\n   the request, the default values MUST be used unless explicit
        values\n   are provided in the client response.  The following key values
        are\n   reserved for future use:\n      mthd (RESERVED):  HTTP method; the
        default value is \"POST\".\n      path (RESERVED):  HTTP path data; the default
        value is \"/\".\n      post (RESERVED):  HTTP post data; the default value
        is the empty\n         string (\"\").\n      qs (RESERVED):  The HTTP query
        string; the default value is the\n         empty string (\"\").\n"
      title: 3.1.1.  Reserved Key/Values
    title: 3.1.  Initial Client Response
  - contents:
    - "3.2.  Server's Response\n   The server validates the response according to
      the specification for\n   the OAuth Access Token Types used.  If the OAuth Access
      Token Type\n   utilizes a keyed message digest of the request parameters, then
      the\n   client must provide a client response that satisfies the data\n   requirements
      for the scheme in use.\n   The server fully validates the client response before
      generating a\n   server response; this will necessarily include the validation
      steps\n   listed in the specification for the OAuth Access Token Type used.\n
      \  However, additional validation steps may be needed, depending on the\n   particular
      application protocol making use of SASL.  In particular,\n   values included
      as kvpairs in the client response (such as host and\n   port) that correspond
      to values known to the application server by\n   some other mechanism (such
      as an application protocol data unit or\n   preconfigured values) MUST be validated
      to match between the initial\n   client response and the other source(s) of
      such information.  As a\n   concrete example, when SASL is used over IMAP to
      an IMAP server for a\n   single domain, the hostname can be available via configuration;
      this\n   hostname must be validated to match the value sent in the 'host'\n
      \  kvpair.\n   The server responds to a successfully verified client message
      by\n   completing the SASL negotiation.  The authenticated identity reported\n
      \  by the SASL mechanism is the identity securely established for the\n   client
      with the OAuth credential.  The application, not the SASL\n   mechanism, based
      on local access policy determines whether the\n   identity reported by the mechanism
      is allowed access to the requested\n   resource.  Note that the semantics of
      the authzid are specified by\n   the SASL framework [RFC4422].\n"
    - contents:
      - "3.2.1.  OAuth Identifiers in the SASL Context\n   In the OAuth framework,
        the client may be authenticated by the\n   authorization server, and the resource
        owner is authenticated to the\n   authorization server.  OAuth access tokens
        may contain information\n   about the authentication of the resource owner
        and about the client\n   and may therefore make this information accessible
        to the resource\n   server.\n   If both identifiers are needed by an application
        the developer will\n   need to provide a way to communicate that from the
        SASL mechanism\n   back to the application.\n"
      title: 3.2.1.  OAuth Identifiers in the SASL Context
    - contents:
      - "3.2.2.  Server Response to Failed Authentication\n   For a failed authentication,
        the server returns an error result in\n   JSON [RFC7159] format and fails
        the authentication.  The error result\n   consists of the following values:\n
        \     status (REQUIRED):  The authorization error code.  Valid error\n         codes
        are defined in the IANA \"OAuth Extensions Error Registry\"\n         as specified
        in the OAuth 2.0 core specification.\n      scope (OPTIONAL):  An OAuth scope
        that is valid to access the\n         service.  This may be omitted, which
        implies that unscoped\n         tokens are required.  If a scope is specified,
        then a single\n         scope is preferred.  At the time this document was
        written,\n         there are several implementations that do not properly
        support\n         space-separated lists of scopes, so the use of a space-\n
        \        separated list of scopes is NOT RECOMMENDED.\n      openid-configuration
        (OPTIONAL):  The URL for a document following\n         the OpenID Provider
        Configuration Information schema as\n         described in OIDCD [OpenID.Discovery],
        Section 3 that is\n         appropriate for the user.  As specified in OIDCD,
        this will\n         have the \"https\" URL scheme.  This document MUST have
        all\n         OAuth-related data elements populated.  The server MAY return\n
        \        different URLs for users in different domains, and the client\n         SHOULD
        NOT cache a single returned value and assume it applies\n         for all
        users/domains that the server supports.  The returned\n         discovery
        document SHOULD have all data elements required by\n         the OpenID Connect
        Discovery specification populated.  In\n         addition, the discovery document
        SHOULD contain the\n         'registration_endpoint' element to identify the
        endpoint to be\n         used with the Dynamic Client Registration protocol
        [RFC7591] to\n         obtain the minimum number of parameters necessary for
        the OAuth\n         protocol exchange to function.  Another comparable discovery
        or\n         client registration mechanism MAY be used if available.\n         The
        use of the 'offline_access' scope, as defined in\n         [OpenID.Core],
        is RECOMMENDED to give clients the capability to\n         explicitly request
        a refresh token.\n   If the resource server provides a scope, then the client
        MUST always\n   request scoped tokens from the token endpoint.  If the resource\n
        \  server does not return a scope, the client SHOULD presume an unscoped\n
        \  token is required to access the resource.\n   Since clients may interact
        with a number of application servers, such\n   as email servers and Extensible
        Messaging and Presence Protocol\n   (XMPP) [RFC6120] servers, they need to
        have a way to determine\n   whether dynamic client registration has been performed
        already and\n   whether an already available refresh token can be reused to
        obtain an\n   access token for the desired resource server.  This specification\n
        \  RECOMMENDS that a client uses the information in the 'iss' element\n   defined
        in OpenID Connect Core [OpenID.Core] to make this\n   determination.\n"
      title: 3.2.2.  Server Response to Failed Authentication
    - contents:
      - "3.2.3.  Completing an Error Message Sequence\n   Section 3.6 of SASL [RFC4422]
        explicitly prohibits additional\n   information in an unsuccessful authentication
        outcome.  Therefore,\n   the error message is sent in a normal message.  The
        client MUST then\n   send either an additional client response consisting
        of a single %x01\n   (control A) character to the server in order to allow
        the server to\n   finish the exchange or a SASL abort message as generally
        defined in\n   Section 3.5 of SASL [RFC4422].  A specific example of an abort\n
        \  message is the \"BAD\" response to an AUTHENTICATE in IMAP [RFC3501],\n
        \  Section 6.2.2.\n"
      title: 3.2.3.  Completing an Error Message Sequence
    title: 3.2.  Server's Response
  - contents:
    - "3.3.  OAuth Access Token Types using Keyed Message Digests\n   OAuth Access
      Token Types may use keyed message digests, and the\n   client and the resource
      server may need to perform a cryptographic\n   computation for integrity protection
      and data origin authentication.\n   OAuth is designed for access to resources
      identified by URIs.  SASL\n   is designed for user authentication and has no
      facility for more\n   fine-grained access control.  In this specification, we
      require or\n   define default values for the data elements from an HTTP request
      that\n   allows the signature base string to be constructed properly.  The\n
      \  default HTTP path is \"/\", and the default post body is empty.  These\n
      \  atoms are defined as extension points so that no changes are needed\n   if
      there is a revision of SASL that supports more specific resource\n   authorization,
      e.g., IMAP access to a specific folder or FTP access\n   limited to a specific
      directory.\n   Using the example in the OAuth 1.0a specification as a starting\n
      \  point, below is the authorization request in OAuth 1.0a style (with\n   %x01
      shown as ^A and line breaks added for readability), assuming it\n   is on an
      IMAP server running on port 143:\n   n,a=user@example.com,^A\n   host=example.com^A\n
      \  port=143^A\n   auth=OAuth realm=\"Example\",\n              oauth_consumer_key=\"9djdj82h48djs9d2\",\n
      \             oauth_token=\"kkk9d7dh3k39sjv7\",\n              oauth_signature_method=\"HMAC-SHA1\",\n
      \             oauth_timestamp=\"137131201\",\n              oauth_nonce=\"7d8f3e4a\",\n
      \             oauth_signature=\"Tm90IGEgcmVhbCBzaWduYXR1cmU\"^A^A\n   The signature
      base string would be constructed per the OAuth 1.0a\n   specification [RFC5849]
      with the following things noted:\n   o  The method value is defaulted to POST.\n
      \  o  The scheme defaults to be \"http\", and any port number other than\n      80
      is included.\n   o  The path defaults to \"/\".\n   o  The query string defaults
      to \"\".\n   In this example, the signature base string with line breaks added
      for\n   readability would be:\n   POST&http%3A%2F%2Fexample.com:143%2F&oauth_consumer_key%3D9djdj82h4\n
      \  8djs9d2%26oauth_nonce%3D7d8f3e4a%26oauth_signature_method%3DHMAC-SH\n   A1%26oauth_timestamp%3D137131201%26oauth_token%3Dkkk9d7dh3k39sjv7\n"
    title: 3.3.  OAuth Access Token Types using Keyed Message Digests
  title: 3.  OAuth SASL Mechanism Specifications
- contents:
  - "4.  Examples\n   These examples illustrate exchanges between IMAP and SMTP clients
    and\n   servers.  All IMAP examples use SASL-IR [RFC4959] and send payload in\n
    \  the initial client response.  The bearer token examples assume\n   encrypted
    transport; if the underlying connection is not already TLS,\n   then STARTTLS
    MUST be used as TLS is required in the bearer token\n   specification.\n   Note
    to implementers: The SASL OAuth method names are case\n   insensitive.  One example
    uses \"Bearer\" but that could as easily be\n   \"bearer\", \"BEARER\", or \"BeArEr\".\n"
  - contents:
    - "4.1.  Successful Bearer Token Exchange\n   This example shows a successful
      OAuth 2.0 bearer token exchange in\n   IMAP.  Note that line breaks are inserted
      for readability.\n   [Initial connection and TLS establishment...]\n   S: *
      OK IMAP4rev1 Server Ready\n   C: t0 CAPABILITY\n   S: * CAPABILITY IMAP4rev1
      AUTH=OAUTHBEARER SASL-IR\n   S: t0 OK Completed\n   C: t1 AUTHENTICATE OAUTHBEARER
      bixhPXVzZXJAZXhhbXBsZS5jb20sAWhv\n         c3Q9c2VydmVyLmV4YW1wbGUuY29tAXBvcnQ9MTQzAWF1dGg9QmVhcmVyI\n
      \        HZGOWRmdDRxbVRjMk52YjNSbGNrQmhiSFJoZG1semRHRXVZMjl0Q2c9PQ\n         EB\n
      \  S: t1 OK SASL authentication succeeded\n   As required by IMAP [RFC3501],
      the payloads are base64 encoded.  The\n   decoded initial client response (with
      %x01 represented as ^A and long\n   lines wrapped for readability) is:\n   n,a=user@example.com,^Ahost=server.example.com^Aport=143^A\n
      \  auth=Bearer vF9dft4qmTc2Nvb3RlckBhbHRhdmlzdGEuY29tCg==^A^A\n   The same credential
      used in an SMTP exchange is shown below.  Again,\n   this example assumes that
      TLS is already established per the bearer\n   token specification requirements.\n
      \  [connection begins]\n   S: 220 mx.example.com ESMTP 12sm2095603fks.9\n   C:
      EHLO sender.example.com\n   S: 250-mx.example.com at your service,[172.31.135.47]\n
      \  S: 250-SIZE 35651584\n   S: 250-8BITMIME\n   S: 250-AUTH LOGIN PLAIN OAUTHBEARER\n
      \  S: 250-ENHANCEDSTATUSCODES\n   S: 250-STARTTLS\n   S: 250 PIPELINING\n   [Negotiate
      TLS...]\n   C: t1 AUTH OAUTHBEARER bixhPXVzZXJAZXhhbXBsZS5jb20sAWhvc3Q9c2Vy\n
      \        dmVyLmV4YW1wbGUuY29tAXBvcnQ9NTg3AWF1dGg9QmVhcmVyIHZGOWRmd\n         DRxbVRjMk52YjNSbGNrQmhiSFJoZG1semRHRXVZMjl0Q2c9PQEB\n
      \  S: 235 Authentication successful.\n   [connection continues...]\n   The decoded
      initial client response is:\n   n,a=user@example.com,^Ahost=server.example.com^Aport=587^A\n
      \  auth=Bearer vF9dft4qmTc2Nvb3RlckBhbHRhdmlzdGEuY29tCg==^A^A\n"
    title: 4.1.  Successful Bearer Token Exchange
  - contents:
    - "4.2.  Successful OAuth 1.0a Token Exchange\n   This IMAP example shows a successful
      OAuth 1.0a token exchange.  Note\n   that line breaks are inserted for readability.
      \ This example assumes\n   that TLS is already established.  Signature computation
      is discussed\n   in Section 3.3.\n   S: * OK IMAP4rev1 Server Ready\n   C: t0
      CAPABILITY\n   S: * CAPABILITY IMAP4rev1 AUTH=OAUTHBEARER AUTH=OAUTH10A SASL-IR\n
      \  S: t0 OK Completed\n   C: t1 AUTHENTICATE OAUTH10A bixhPXVzZXJAZXhhbXBsZS5jb20sAWhvc3Q9ZXhhb\n
      \        XBsZS5jb20BcG9ydD0xNDMBYXV0aD1PQXV0aCByZWFsbT0iRXhhbXBsZSIsb2F1\n         dGhfY29uc3VtZXJfa2V5PSI5ZGpkajgyaDQ4ZGpzOWQyIixvYXV0aF90b2tlbj0\n
      \        ia2trOWQ3ZGgzazM5c2p2NyIsb2F1dGhfc2lnbmF0dXJlX21ldGhvZD0iSE1BQy\n         1TSEExIixvYXV0aF90aW1lc3RhbXA9IjEzNzEzMTIwMSIsb2F1dGhfbm9uY2U9I\n
      \        jdkOGYzZTRhIixvYXV0aF9zaWduYXR1cmU9IlRtOTBJR0VnY21WaGJDQnphV2R1\n         WVhSMWNtVSUzRCIBAQ==\n
      \  S: t1 OK SASL authentication succeeded\n   As required by IMAP [RFC3501],
      the payloads are base64 encoded.  The\n   decoded initial client response (with
      %x01 represented as ^A and\n   lines wrapped for readability) is:\n   n,a=user@example.com,^A\n
      \  host=example.com^A\n   port=143^A\n   auth=OAuth realm=\"Example\",\n              oauth_consumer_key=\"9djdj82h48djs9d2\",\n
      \             oauth_token=\"kkk9d7dh3k39sjv7\",\n              oauth_signature_method=\"HMAC-SHA1\",\n
      \             oauth_timestamp=\"137131201\",\n              oauth_nonce=\"7d8f3e4a\",\n
      \             oauth_signature=\"SSdtIGEgbGl0dGxlIHRlYSBwb3Qu\"^A^A\n"
    title: 4.2.  Successful OAuth 1.0a Token Exchange
  - contents:
    - "4.3.  Failed Exchange\n   This IMAP example shows a failed exchange because
      of the empty\n   Authorization header, which is how a client can query for the
      needed\n   scope.  Note that line breaks are inserted for readability.\n   S:
      * OK IMAP4rev1 Server Ready\n   C: t0 CAPABILITY\n   S: * CAPABILITY IMAP4rev1
      AUTH=OAUTHBEARER SASL-IR\n   S: t0 OK Completed\n   C: t1 AUTHENTICATE OAUTHBEARER
      bixhPXVzZXJAZXhhbXBsZS5jb20sAW\n         hvc3Q9c2VydmVyLmV4YW1wbGUuY29tAXBvcnQ9MTQzAWF1dGg9AQE=\n
      \  S: + eyJzdGF0dXMiOiJpbnZhbGlkX3Rva2VuIiwic2NvcGUiOiJleGFtcGxl\n        X3Njb3BlIiwib3BlbmlkLWNvbmZpZ3VyYXRpb24iOiJodHRwczovL2V4\n
      \       YW1wbGUuY29tLy53ZWxsLWtub3duL29wZW5pZC1jb25maWd1cmF0aW9u\n        In0=\n
      \  C: AQ==\n   S: t1 NO SASL authentication failed\n   The decoded initial client
      response is:\n   n,a=user@example.com,^Ahost=server.example.com^A\n   port=143^Aauth=^A^A\n
      \  The decoded server error response is:\n  {\n  \"status\":\"invalid_token\",\n
      \ \"scope\":\"example_scope\",\n  \"openid-configuration\":\"https://example.com/.well-known/openid-config\"\n
      \ }\n   The client responds with the required dummy response; \"AQ==\" is the\n
      \  base64 encoding of the ASCII value 0x01.  The same exchange using the\n   IMAP-specific
      method of canceling an AUTHENTICATE command sends \"*\"\n   and is shown below.\n
      \  S: * OK IMAP4rev1 Server Ready\n   C: t0 CAPABILITY\n   S: * CAPABILITY IMAP4rev1
      AUTH=OAUTHBEARER SASL-IR IMAP4rev1\n   S: t0 OK Completed\n   C: t1 AUTHENTICATE
      OAUTHBEARER bixhPXVzZXJAZXhhbXBsZS5jb20sAW\n        hvc3Q9c2VydmVyLmV4YW1wbGUuY29tAXBvcnQ9MTQzAWF1dGg9AQE=\n
      \  S: + eyJzdGF0dXMiOiJpbnZhbGlkX3Rva2VuIiwic2NvcGUiOiJleGFtcGxl\n        X3Njb3BlIiwib3BlbmlkLWNvbmZpZ3VyYXRpb24iOiJodHRwczovL2V4\n
      \       YW1wbGUuY29tLy53ZWxsLWtub3duL29wZW5pZC1jb25maWd1cmF0aW9u\n        In0=\n
      \  C: *\n   S: t1 NO SASL authentication failed\n"
    title: 4.3.  Failed Exchange
  - contents:
    - "4.4.  SMTP Example of a Failed Negotiation\n   This example shows an authorization
      failure in an SMTP exchange.  TLS\n   negotiation is not shown, but as noted
      above, it is required for the\n   use of bearer tokens.\n"
    - '[connection begins]

      '
    - 'S: 220 mx.example.com ESMTP 12sm2095603fks.9

      '
    - 'C: EHLO sender.example.com

      '
    - 'S: 250-mx.example.com at your service,[172.31.135.47]

      '
    - 'S: 250-SIZE 35651584

      '
    - 'S: 250-8BITMIME

      '
    - 'S: 250-AUTH LOGIN PLAIN OAUTHBEARER

      '
    - 'S: 250-ENHANCEDSTATUSCODES

      '
    - 'S: 250 PIPELINING

      '
    - '[Negotiate TLS...]

      '
    - "C: AUTH OAUTHBEARER bix1c2VyPXNvbWV1c2VyQGV4YW1wbGUuY29tLAFhdXRoPUJlYXJl\n
      \      ciB2RjlkZnQ0cW1UYzJOdmIzUmxja0JoZEhSaGRtbHpkR0V1WTI5dENnPT0BAQ==\n"
    - "S: 334 eyJzdGF0dXMiOiJpbnZhbGlkX3Rva2VuIiwic2NoZW1lcyI6ImJlYXJlciBtYWMiL\n
      \      CJzY29wZSI6Imh0dHBzOi8vbWFpbC5leGFtcGxlLmNvbS8ifQ==\n"
    - 'C: AQ==

      '
    - 'S: 535-5.7.1 Username and Password not accepted. Learn more at

      '
    - 'S: 535 5.7.1 http://support.example.com/mail/oauth

      '
    - "[connection continues...]\n   The initial client response is:\n   n,user=someuser@example.com,^A\n
      \  auth=Bearer vF9dft4qmTc2Nvb3RlckBhdHRhdmlzdGEuY29tCg==^A^A\n   The server
      returned an error message in the 334 SASL message; the\n   client responds with
      the required dummy response, and the server\n   finalizes the negotiation.\n
      \  {\n       \"status\":\"invalid_token\",\n       \"schemes\":\"bearer mac\",\n
      \      \"scope\":\"https://mail.example.com/\"\n   }\n"
    title: 4.4.  SMTP Example of a Failed Negotiation
  title: 4.  Examples
- contents:
  - "5.  Security Considerations\n   OAuth 1.0a and OAuth 2.0 allow for a variety
    of deployment scenarios,\n   and the security properties of these profiles vary.
    \ As shown in\n   Figure 1, this specification is aimed to be integrated into
    a larger\n   OAuth deployment.  Application developers therefore need to\n   understand
    their security requirements based on a threat assessment\n   before selecting
    a specific SASL OAuth mechanism.  For OAuth 2.0, a\n   detailed security document
    [RFC6819] provides guidance to select\n   those OAuth 2.0 components that help
    to mitigate threats for a given\n   deployment.  For OAuth 1.0a, Section 4 of
    [RFC5849] provides guidance\n   specific to OAuth 1.0a.\n   This document specifies
    two SASL Mechanisms for OAuth and each comes\n   with different security properties.\n
    \  OAUTHBEARER:  This mechanism borrows from OAuth 2.0 bearer tokens\n      [RFC6750].
    \ It relies on the application using TLS to protect the\n      OAuth 2.0 bearer
    token exchange; without TLS usage at the\n      application layer, this method
    is completely insecure.\n      Consequently, TLS MUST be provided by the application
    when\n      choosing this authentication mechanism.\n   OAUTH10A:  This mechanism
    reuses OAuth 1.0a MAC tokens (using the\n      HMAC-SHA1 keyed message digest),
    as described in Section 3.4.2 of\n      [RFC5849].  To compute the keyed message
    digest in the same way as\n      in RFC 5839, this specification conveys additional
    parameters\n      between the client and the server.  This SASL mechanism only\n
    \     supports client authentication.  If server-side authentication is\n      desirable,
    then it must be provided by the application underneath\n      the SASL layer.
    \ The use of TLS is strongly RECOMMENDED.\n   Additionally, the following aspects
    are worth pointing out:\n   An access token is not equivalent to the user's long
    term password.\n      Care has to be taken when these OAuth credentials are used
    for\n      actions like changing passwords (as it is possible with some\n      protocols,
    e.g., XMPP [RFC6120]).  The resource server should\n      ensure that actions
    taken in the authenticated channel are\n      appropriate to the strength of the
    presented credential.\n   Lifetime of the application sessions.\n      It is possible
    that SASL will be used to authenticate a\n      connection, and the life of that
    connection may outlast the life\n      of the access token used to establish it.
    \ This is a common\n      problem in application protocols where connections are
    long lived\n      and not a problem with this mechanism, per se.  Resource servers\n
    \     may unilaterally disconnect clients in accordance with the\n      application
    protocol.\n   Access tokens have a lifetime.\n      Reducing the lifetime of an
    access token provides security\n      benefits, and OAuth 2.0 introduces refresh
    tokens to obtain new\n      access tokens on the fly without any need for human
    interaction.\n      Additionally, a previously obtained access token might be
    revoked\n      or rendered invalid at any time.  The client MAY request a new\n
    \     access token for each connection to a resource server, but it\n      SHOULD
    cache and reuse valid credentials.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  Internationalization Considerations\n   The identifier asserted by the OAuth
    authorization server about the\n   resource owner inside the access token may
    be displayed to a human.\n   For example, when SASL is used in the context of
    IMAP, the client may\n   assert the resource owner's email address to the IMAP
    server for\n   usage in an email-based application.  The identifier may therefore\n
    \  contain internationalized characters, and an application needs to\n   ensure
    that the mapping between the identifier provided by OAuth is\n   suitable for
    use with the application-layer protocol SASL is\n   incorporated into.  An example
    of a SASL-compatible container is the\n   JSON Web Token (JWT) [RFC7519], which
    provides a standardized format\n   for exchanging authorization and identity information
    that supports\n   internationalized characters.\n"
  title: 6.  Internationalization Considerations
- contents:
  - '7.  IANA Considerations

    '
  - contents:
    - "7.1.  SASL Registration\n   The IANA has registered the following entry in
      the SASL Mechanisms\n   registry:\n      SASL mechanism name: OAUTHBEARER\n
      \     Security Considerations: See this document\n      Published Specification:
      See this document\n      For further information: Contact the authors of this
      document.\n      Intended usage: COMMON\n      Owner/Change controller: the
      IESG\n      Note: None\n   The IANA has registered the following entry in the
      SASL Mechanisms\n   registry:\n      SASL mechanism name: OAUTH10A\n      Security
      Considerations: See this document\n      Published Specification: See this document\n
      \     For further information: Contact the authors of this document.\n      Intended
      usage: COMMON\n      Owner/Change controller: the IESG\n      Note: None\n"
    title: 7.1.  SASL Registration
  title: 7.  IANA Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [OpenID.Core]\n              Sakimura, N., Bradley,
      J., Jones, M., de Medeiros, B., and\n              C. Mortimore, \"OpenID Connect
      Core 1.0\", November 2014,\n              <http://openid.net/specs/openid-connect-core-1_0.html>.\n
      \  [OpenID.Discovery]\n              Sakimura, N., Bradley, J., Jones, M., and
      E. Jay, \"OpenID\n              Connect Discovery 1.0\", November 2014,\n              <http://openid.net/specs/\n
      \             openid-connect-discovery-1_0.html>.\n   [RFC2119]  Bradner, S.,
      \"Key words for use in RFCs to Indicate\n              Requirement Levels\",
      BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC4422]  Melnikov, A., Ed. and K. Zeilenga, Ed., \"Simple\n              Authentication
      and Security Layer (SASL)\", RFC 4422,\n              DOI 10.17487/RFC4422,
      June 2006,\n              <http://www.rfc-editor.org/info/rfc4422>.\n   [RFC4648]
      \ Josefsson, S., \"The Base16, Base32, and Base64 Data\n              Encodings\",
      RFC 4648, DOI 10.17487/RFC4648, October 2006,\n              <http://www.rfc-editor.org/info/rfc4648>.\n
      \  [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n
      \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,
      January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5246]
      \ Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5801]
      \ Josefsson, S. and N. Williams, \"Using Generic Security\n              Service
      Application Program Interface (GSS-API) Mechanisms\n              in Simple
      Authentication and Security Layer (SASL): The\n              GS2 Mechanism Family\",
      RFC 5801, DOI 10.17487/RFC5801,\n              July 2010, <http://www.rfc-editor.org/info/rfc5801>.\n
      \  [RFC5849]  Hammer-Lahav, E., Ed., \"The OAuth 1.0 Protocol\", RFC 5849,\n
      \             DOI 10.17487/RFC5849, April 2010,\n              <http://www.rfc-editor.org/info/rfc5849>.\n
      \  [RFC6749]  Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\",\n              RFC
      6749, DOI 10.17487/RFC6749, October 2012,\n              <http://www.rfc-editor.org/info/rfc6749>.\n
      \  [RFC6750]  Jones, M. and D. Hardt, \"The OAuth 2.0 Authorization\n              Framework:
      Bearer Token Usage\", RFC 6750,\n              DOI 10.17487/RFC6750, October
      2012,\n              <http://www.rfc-editor.org/info/rfc6750>.\n   [RFC7159]
      \ Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n              Interchange
      Format\", RFC 7159, DOI 10.17487/RFC7159, March\n              2014, <http://www.rfc-editor.org/info/rfc7159>.\n
      \  [RFC7591]  Richer, J., Ed., Jones, M., Bradley, J., Machulak, M., and\n              P.
      Hunt, \"OAuth 2.0 Dynamic Client Registration Protocol\",\n              RFC
      7591, DOI 10.17487/RFC7591, July 2015,\n              <http://www.rfc-editor.org/info/rfc7591>.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [RFC3501]  Crispin, M., \"INTERNET MESSAGE
      ACCESS PROTOCOL - VERSION\n              4rev1\", RFC 3501, DOI 10.17487/RFC3501,
      March 2003,\n              <http://www.rfc-editor.org/info/rfc3501>.\n   [RFC4959]
      \ Siemborski, R. and A. Gulbrandsen, \"IMAP Extension for\n              Simple
      Authentication and Security Layer (SASL) Initial\n              Client Response\",
      RFC 4959, DOI 10.17487/RFC4959,\n              September 2007, <http://www.rfc-editor.org/info/rfc4959>.\n
      \  [RFC5321]  Klensin, J., \"Simple Mail Transfer Protocol\", RFC 5321,\n              DOI
      10.17487/RFC5321, October 2008,\n              <http://www.rfc-editor.org/info/rfc5321>.\n
      \  [RFC6120]  Saint-Andre, P., \"Extensible Messaging and Presence\n              Protocol
      (XMPP): Core\", RFC 6120, DOI 10.17487/RFC6120,\n              March 2011, <http://www.rfc-editor.org/info/rfc6120>.\n
      \  [RFC6819]  Lodderstedt, T., Ed., McGloin, M., and P. Hunt, \"OAuth 2.0\n
      \             Threat Model and Security Considerations\", RFC 6819,\n              DOI
      10.17487/RFC6819, January 2013,\n              <http://www.rfc-editor.org/info/rfc6819>.\n
      \  [RFC7033]  Jones, P., Salgueiro, G., Jones, M., and J. Smarr,\n              \"WebFinger\",
      RFC 7033, DOI 10.17487/RFC7033, September\n              2013, <http://www.rfc-editor.org/info/rfc7033>.\n
      \  [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n
      \             Protocol (HTTP/1.1): Message Syntax and Routing\",\n              RFC
      7230, DOI 10.17487/RFC7230, June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n
      \  [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token\n              (JWT)\",
      RFC 7519, DOI 10.17487/RFC7519, May 2015,\n              <http://www.rfc-editor.org/info/rfc7519>.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Acknowledgements\n   The authors would like to thank the members of the KITTEN
    working\n   group and in addition and specifically: Simon Josefson, Torsten\n
    \  Lodderstadt, Ryan Troll, Alexey Melnikov, Jeffrey Hutzelman, Nico\n   Williams,
    Matt Miller, and Benjamin Kaduk.\n   This document was produced under the chairmanship
    of Alexey Melnikov,\n   Tom Yu, Shawn Emery, Josh Howlett, Sam Hartman, Matthew
    Miller, and\n   Benjamin Kaduk.  The supervising Area Director was Stephen Farrell.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   William Mills\n   Microsoft\n   Email: wmills_92105@yahoo.com\n
    \  Tim Showalter\n   Email: tjs@psaux.com\n   Hannes Tschofenig\n   ARM Ltd.\n
    \  110 Fulbourn Rd\n   Cambridge  CB1 9NJ\n   United Kingdom\n   Email: Hannes.tschofenig@gmx.net\n
    \  URI:   http://www.tschofenig.priv.at\n"
  title: Authors' Addresses
