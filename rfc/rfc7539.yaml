- title: __initial_text__
  contents:
  - ''
- title: Internet Research Task Force (IRTF)                               Y. Nir
  contents:
  - "Internet Research Task Force (IRTF)                               Y. Nir\n  \
    \              ChaCha20 and Poly1305 for IETF Protocols\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines the ChaCha20 stream cipher as well as the\
    \ use\n   of the Poly1305 authenticator, both as stand-alone algorithms and as\n\
    \   a \"combined mode\", or Authenticated Encryption with Associated Data\n  \
    \ (AEAD) algorithm.\n   This document does not introduce any new crypto, but is\
    \ meant to\n   serve as a stable reference and an implementation guide.  It is\
    \ a\n   product of the Crypto Forum Research Group (CFRG).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Research Task Force\n   (IRTF).  The IRTF publishes the results\
    \ of Internet-related research\n   and development activities.  These results\
    \ might not be suitable for\n   deployment.  This RFC represents the consensus\
    \ of the Crypto Forum\n   Research Group of the Internet Research Task Force (IRTF).\
    \  Documents\n   approved for publication by the IRSG are not a candidate for\
    \ any\n   level of Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7539.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Conventions Used in This Document ..........................4\n  \
    \ 2. The Algorithms ..................................................4\n    \
    \  2.1. The ChaCha Quarter Round ...................................4\n      \
    \     2.1.1. Test Vector for the ChaCha Quarter Round ............5\n      2.2.\
    \ A Quarter Round on the ChaCha State ........................5\n           2.2.1.\
    \ Test Vector for the Quarter Round on the\n                  ChaCha State ........................................6\n\
    \      2.3. The ChaCha20 Block Function ................................6\n  \
    \         2.3.1. The ChaCha20 Block Function in Pseudocode ...........8\n    \
    \       2.3.2. Test Vector for the ChaCha20 Block Function .........9\n      2.4.\
    \ The ChaCha20 Encryption Algorithm .........................10\n           2.4.1.\
    \ The ChaCha20 Encryption Algorithm in Pseudocode ....11\n           2.4.2. Example\
    \ and Test Vector for the ChaCha20 Cipher ....11\n      2.5. The Poly1305 Algorithm\
    \ ....................................13\n           2.5.1. The Poly1305 Algorithms\
    \ in Pseudocode ..............15\n           2.5.2. Poly1305 Example and Test\
    \ Vector ...................15\n      2.6. Generating the Poly1305 Key Using ChaCha20\
    \ ................17\n           2.6.1. Poly1305 Key Generation in Pseudocode\
    \ ..............18\n           2.6.2. Poly1305 Key Generation Test Vector ................18\n\
    \      2.7. A Pseudorandom Function for Crypto Suites based on\n           ChaCha/Poly1305\
    \ ...........................................18\n      2.8. AEAD Construction\
    \ .........................................19\n           2.8.1. Pseudocode for\
    \ the AEAD Construction ...............21\n           2.8.2. Example and Test\
    \ Vector for\n                  AEAD_CHACHA20_POLY1305 .............................22\n\
    \   3. Implementation Advice ..........................................24\n  \
    \ 4. Security Considerations ........................................24\n   5.\
    \ IANA Considerations ............................................26\n   6. References\
    \ .....................................................26\n      6.1. Normative\
    \ References ......................................26\n      6.2. Informative\
    \ References ....................................26\n   Appendix A. Additional\
    \ Test Vectors ...............................29\n     A.1. The ChaCha20 Block\
    \ Functions ...............................29\n     A.2. ChaCha20 Encryption ........................................32\n\
    \     A.3. Poly1305 Message Authentication Code .......................34\n  \
    \   A.4. Poly1305 Key Generation Using ChaCha20 .....................40\n    \
    \ A.5. ChaCha20-Poly1305 AEAD Decryption ..........................41\n   Appendix\
    \ B. Performance Measurements of ChaCha20 ..................44\n   Acknowledgements\
    \ ..................................................45\n   Authors' Addresses\
    \ ................................................45\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Advanced Encryption Standard (AES -- [FIPS-197]) has\
    \ become the\n   gold standard in encryption.  Its efficient design, widespread\n\
    \   implementation, and hardware support allow for high performance in\n   many\
    \ areas.  On most modern platforms, AES is anywhere from four to\n   ten times\
    \ as fast as the previous most-used cipher, Triple Data\n   Encryption Standard\
    \ (3DES -- [SP800-67]), which makes it not only the\n   best choice, but the only\
    \ practical choice.\n   There are several problems with this.  If future advances\
    \ in\n   cryptanalysis reveal a weakness in AES, users will be in an\n   unenviable\
    \ position.  With the only other widely supported cipher\n   being the much slower\
    \ 3DES, it is not feasible to reconfigure\n   deployments to use 3DES.  [Standby-Cipher]\
    \ describes this issue and\n   the need for a standby cipher in greater detail.\
    \  Another problem is\n   that while AES is very fast on dedicated hardware, its\
    \ performance on\n   platforms that lack such hardware is considerably lower.\
    \  Yet another\n   problem is that many AES implementations are vulnerable to\
    \ cache-\n   collision timing attacks ([Cache-Collisions]).\n   This document\
    \ provides a definition and implementation guide for\n   three algorithms:\n \
    \  1.  The ChaCha20 cipher.  This is a high-speed cipher first described\n   \
    \    in [ChaCha].  It is considerably faster than AES in software-only\n     \
    \  implementations, making it around three times as fast on\n       platforms\
    \ that lack specialized AES hardware.  See Appendix B for\n       some hard numbers.\
    \  ChaCha20 is also not sensitive to timing\n       attacks (see the security\
    \ considerations in Section 4).  This\n       algorithm is described in Section\
    \ 2.4\n   2.  The Poly1305 authenticator.  This is a high-speed message\n    \
    \   authentication code.  Implementation is also straightforward and\n       easy\
    \ to get right.  The algorithm is described in Section 2.5.\n   3.  The CHACHA20-POLY1305\
    \ Authenticated Encryption with Associated\n       Data (AEAD) construction, described\
    \ in Section 2.8.\n   This document does not introduce these new algorithms for\
    \ the first\n   time.  They have been defined in scientific papers by\n   D. J.\
    \ Bernstein, which are referenced by this document.  The purpose\n   of this document\
    \ is to serve as a stable reference for IETF documents\n   making use of these\
    \ algorithms.\n   These algorithms have undergone rigorous analysis.  Several\
    \ papers\n   discuss the security of Salsa and ChaCha ([LatinDances],\n   [LatinDances2],\
    \ [Zhenqing2012]).\n   This document represents the consensus of the Crypto Forum\
    \ Research\n   Group (CFRG).\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   The description of the ChaCha algorithm will at various time\
    \ refer to\n   the ChaCha state as a \"vector\" or as a \"matrix\".  This follows\
    \ the\n   use of these terms in Professor Bernstein's paper.  The matrix\n   notation\
    \ is more visually convenient and gives a better notion as to\n   why some rounds\
    \ are called \"column rounds\" while others are called\n   \"diagonal rounds\"\
    .  Here's a diagram of how the matrices relate to\n   vectors (using the C language\
    \ convention of zero being the index\n   origin).\n      0   1   2   3\n     \
    \ 4   5   6   7\n      8   9  10  11\n     12  13  14  15\n   The elements in\
    \ this vector or matrix are 32-bit unsigned integers.\n   The algorithm name is\
    \ \"ChaCha\".  \"ChaCha20\" is a specific instance\n   where 20 \"rounds\" (or\
    \ 80 quarter rounds -- see Section 2.1) are used.\n   Other variations are defined,\
    \ with 8 or 12 rounds, but in this\n   document we only describe the 20-round\
    \ ChaCha, so the names \"ChaCha\"\n   and \"ChaCha20\" will be used interchangeably.\n"
- title: 2.  The Algorithms
  contents:
  - "2.  The Algorithms\n   The subsections below describe the algorithms used and\
    \ the AEAD\n   construction.\n"
- title: 2.1.  The ChaCha Quarter Round
  contents:
  - "2.1.  The ChaCha Quarter Round\n   The basic operation of the ChaCha algorithm\
    \ is the quarter round.  It\n   operates on four 32-bit unsigned integers, denoted\
    \ a, b, c, and d.\n   The operation is as follows (in C-like notation):\n   1.\
    \  a += b; d ^= a; d <<<= 16;\n   2.  c += d; b ^= c; b <<<= 12;\n   3.  a +=\
    \ b; d ^= a; d <<<= 8;\n   4.  c += d; b ^= c; b <<<= 7;\n   Where \"+\" denotes\
    \ integer addition modulo 2^32, \"^\" denotes a bitwise\n   Exclusive OR (XOR),\
    \ and \"<<< n\" denotes an n-bit left rotation\n   (towards the high bits).\n\
    \   For example, let's see the add, XOR, and roll operations from the\n   fourth\
    \ line with sample numbers:\n   o  a = 0x11111111\n   o  b = 0x01020304\n   o\
    \  c = 0x77777777\n   o  d = 0x01234567\n   o  c = c + d = 0x77777777 + 0x01234567\
    \ = 0x789abcde\n   o  b = b ^ c = 0x01020304 ^ 0x789abcde = 0x7998bfda\n   o \
    \ b = b <<< 7 = 0x7998bfda <<< 7 = 0xcc5fed3c\n"
- title: 2.1.1.  Test Vector for the ChaCha Quarter Round
  contents:
  - "2.1.1.  Test Vector for the ChaCha Quarter Round\n   For a test vector, we will\
    \ use the same numbers as in the example,\n   adding something random for c.\n\
    \   o  a = 0x11111111\n   o  b = 0x01020304\n   o  c = 0x9b8d6f43\n   o  d = 0x01234567\n\
    \   After running a Quarter Round on these four numbers, we get these:\n   o \
    \ a = 0xea2a92f4\n   o  b = 0xcb1cf8ce\n   o  c = 0x4581472e\n   o  d = 0x5881c4bb\n"
- title: 2.2.  A Quarter Round on the ChaCha State
  contents:
  - "2.2.  A Quarter Round on the ChaCha State\n   The ChaCha state does not have\
    \ four integer numbers: it has 16.  So\n   the quarter-round operation works on\
    \ only four of them -- hence the\n   name.  Each quarter round operates on four\
    \ predetermined numbers in\n   the ChaCha state.  We will denote by QUARTERROUND(x,y,z,w)\
    \ a quarter-\n   round operation on the numbers at indices x, y, z, and w of the\n\
    \   ChaCha state when viewed as a vector.  For example, if we apply\n   QUARTERROUND(1,5,9,13)\
    \ to a state, this means running the quarter-\n   round operation on the elements\
    \ marked with an asterisk, while\n   leaving the others alone:\n      0  *a  \
    \ 2   3\n      4  *b   6   7\n      8  *c  10  11\n     12  *d  14  15\n   Note\
    \ that this run of quarter round is part of what is called a\n   \"column round\"\
    .\n"
- title: 2.2.1.  Test Vector for the Quarter Round on the ChaCha State
  contents:
  - "2.2.1.  Test Vector for the Quarter Round on the ChaCha State\n   For a test\
    \ vector, we will use a ChaCha state that was generated\n   randomly:\n   Sample\
    \ ChaCha State\n       879531e0  c5ecf37d  516461b1  c9a62f8a\n       44c20ef3\
    \  3390af7f  d9fc690b  2a5f714c\n       53372767  b00a5631  974c541a  359e9963\n\
    \       5c971061  3d631689  2098d9d6  91dbd320\n   We will apply the QUARTERROUND(2,7,8,13)\
    \ operation to this state.\n   For obvious reasons, this one is part of what is\
    \ called a \"diagonal\n   round\":\n   After applying QUARTERROUND(2,7,8,13)\n\
    \       879531e0  c5ecf37d *bdb886dc  c9a62f8a\n       44c20ef3  3390af7f  d9fc690b\
    \ *cfacafd2\n      *e46bea80  b00a5631  974c541a  359e9963\n       5c971061 *ccc07c79\
    \  2098d9d6  91dbd320\n   Note that only the numbers in positions 2, 7, 8, and\
    \ 13 changed.\n"
- title: 2.3.  The ChaCha20 Block Function
  contents:
  - "2.3.  The ChaCha20 Block Function\n   The ChaCha block function transforms a\
    \ ChaCha state by running\n   multiple quarter rounds.\n   The inputs to ChaCha20\
    \ are:\n   o  A 256-bit key, treated as a concatenation of eight 32-bit little-\n\
    \      endian integers.\n   o  A 96-bit nonce, treated as a concatenation of three\
    \ 32-bit little-\n      endian integers.\n   o  A 32-bit block count parameter,\
    \ treated as a 32-bit little-endian\n      integer.\n   The output is 64 random-looking\
    \ bytes.\n   The ChaCha algorithm described here uses a 256-bit key.  The original\n\
    \   algorithm also specified 128-bit keys and 8- and 12-round variants,\n   but\
    \ these are out of scope for this document.  In this section, we\n   describe\
    \ the ChaCha block function.\n   Note also that the original ChaCha had a 64-bit\
    \ nonce and 64-bit\n   block count.  We have modified this here to be more consistent\
    \ with\n   recommendations in Section 3.2 of [RFC5116].  This limits the use of\n\
    \   a single (key,nonce) combination to 2^32 blocks, or 256 GB, but that\n   is\
    \ enough for most uses.  In cases where a single key is used by\n   multiple senders,\
    \ it is important to make sure that they don't use\n   the same nonces.  This\
    \ can be assured by partitioning the nonce space\n   so that the first 32 bits\
    \ are unique per sender, while the other 64\n   bits come from a counter.\n  \
    \ The ChaCha20 state is initialized as follows:\n   o  The first four words (0-3)\
    \ are constants: 0x61707865, 0x3320646e,\n      0x79622d32, 0x6b206574.\n   o\
    \  The next eight words (4-11) are taken from the 256-bit key by\n      reading\
    \ the bytes in little-endian order, in 4-byte chunks.\n   o  Word 12 is a block\
    \ counter.  Since each block is 64-byte, a 32-bit\n      word is enough for 256\
    \ gigabytes of data.\n   o  Words 13-15 are a nonce, which should not be repeated\
    \ for the same\n      key.  The 13th word is the first 32 bits of the input nonce\
    \ taken\n      as a little-endian integer, while the 15th word is the last 32\n\
    \      bits.\n       cccccccc  cccccccc  cccccccc  cccccccc\n       kkkkkkkk \
    \ kkkkkkkk  kkkkkkkk  kkkkkkkk\n       kkkkkkkk  kkkkkkkk  kkkkkkkk  kkkkkkkk\n\
    \       bbbbbbbb  nnnnnnnn  nnnnnnnn  nnnnnnnn\n   c=constant k=key b=blockcount\
    \ n=nonce\n   ChaCha20 runs 20 rounds, alternating between \"column rounds\" and\n\
    \   \"diagonal rounds\".  Each round consists of four quarter-rounds, and\n  \
    \ they are run as follows.  Quarter rounds 1-4 are part of a \"column\"\n   round,\
    \ while 5-8 are part of a \"diagonal\" round:\n   1.  QUARTERROUND ( 0, 4, 8,12)\n\
    \   2.  QUARTERROUND ( 1, 5, 9,13)\n   3.  QUARTERROUND ( 2, 6,10,14)\n   4. \
    \ QUARTERROUND ( 3, 7,11,15)\n   5.  QUARTERROUND ( 0, 5,10,15)\n   6.  QUARTERROUND\
    \ ( 1, 6,11,12)\n   7.  QUARTERROUND ( 2, 7, 8,13)\n   8.  QUARTERROUND ( 3, 4,\
    \ 9,14)\n   At the end of 20 rounds (or 10 iterations of the above list), we add\n\
    \   the original input words to the output words, and serialize the\n   result\
    \ by sequencing the words one-by-one in little-endian order.\n   Note: \"addition\"\
    \ in the above paragraph is done modulo 2^32.  In some\n   machine languages,\
    \ this is called carryless addition on a 32-bit\n   word.\n"
- title: 2.3.1.  The ChaCha20 Block Function in Pseudocode
  contents:
  - "2.3.1.  The ChaCha20 Block Function in Pseudocode\n   Note: This section and\
    \ a few others contain pseudocode for the\n   algorithm explained in a previous\
    \ section.  Every effort was made for\n   the pseudocode to accurately reflect\
    \ the algorithm as described in\n   the preceding section.  If a conflict is still\
    \ present, the textual\n   explanation and the test vectors are normative.\n \
    \     inner_block (state):\n         Qround(state, 0, 4, 8,12)\n         Qround(state,\
    \ 1, 5, 9,13)\n         Qround(state, 2, 6,10,14)\n         Qround(state, 3, 7,11,15)\n\
    \         Qround(state, 0, 5,10,15)\n         Qround(state, 1, 6,11,12)\n    \
    \     Qround(state, 2, 7, 8,13)\n         Qround(state, 3, 4, 9,14)\n        \
    \ end\n      chacha20_block(key, counter, nonce):\n         state = constants\
    \ | key | counter | nonce\n         working_state = state\n         for i=1 upto\
    \ 10\n            inner_block(working_state)\n            end\n         state\
    \ += working_state\n         return serialize(state)\n         end\n"
- title: 2.3.2.  Test Vector for the ChaCha20 Block Function
  contents:
  - "2.3.2.  Test Vector for the ChaCha20 Block Function\n   For a test vector, we\
    \ will use the following inputs to the ChaCha20\n   block function:\n   o  Key\
    \ = 00:01:02:03:04:05:06:07:08:09:0a:0b:0c:0d:0e:0f:10:11:12:13:\n      14:15:16:17:18:19:1a:1b:1c:1d:1e:1f.\
    \  The key is a sequence of\n      octets with no particular structure before\
    \ we copy it into the\n      ChaCha state.\n   o  Nonce = (00:00:00:09:00:00:00:4a:00:00:00:00)\n\
    \   o  Block Count = 1.\n   After setting up the ChaCha state, it looks like this:\n\
    \   ChaCha state with the key setup.\n       61707865  3320646e  79622d32  6b206574\n\
    \       03020100  07060504  0b0a0908  0f0e0d0c\n       13121110  17161514  1b1a1918\
    \  1f1e1d1c\n       00000001  09000000  4a000000  00000000\n   After running 20\
    \ rounds (10 column rounds interleaved with 10\n   \"diagonal rounds\"), the ChaCha\
    \ state looks like this:\n   ChaCha state after 20 rounds\n       837778ab  e238d763\
    \  a67ae21e  5950bb2f\n       c4f2d0c7  fc62bb2f  8fa018fc  3f5ec7b7\n       335271c2\
    \  f29489f3  eabda8fc  82e46ebd\n       d19c12b4  b04e16de  9e83d0cb  4e3c50a2\n\
    \   Finally, we add the original state to the result (simple vector or\n   matrix\
    \ addition), giving this:\n   ChaCha state at the end of the ChaCha20 operation\n\
    \       e4e7f110  15593bd1  1fdd0f50  c47120a3\n       c7f4d1c7  0368c033  9aaa2204\
    \  4e6cd4c3\n       466482d2  09aa9f07  05d7c214  a2028bd9\n       d19c12b5  b94e16de\
    \  e883d0cb  4e3c50a2\n   After we serialize the state, we get this:\n  Serialized\
    \ Block:\n  000  10 f1 e7 e4 d1 3b 59 15 50 0f dd 1f a3 20 71 c4  .....;Y.P....\
    \ q.\n  016  c7 d1 f4 c7 33 c0 68 03 04 22 aa 9a c3 d4 6c 4e  ....3.h..\"....lN\n\
    \  032  d2 82 64 46 07 9f aa 09 14 c2 d7 05 d9 8b 02 a2  ..dF............\n  048\
    \  b5 12 9c d1 de 16 4e b9 cb d0 83 e8 a2 50 3c 4e  ......N......P<N\n"
- title: 2.4.  The ChaCha20 Encryption Algorithm
  contents:
  - "2.4.  The ChaCha20 Encryption Algorithm\n   ChaCha20 is a stream cipher designed\
    \ by D. J. Bernstein.  It is a\n   refinement of the Salsa20 algorithm, and it\
    \ uses a 256-bit key.\n   ChaCha20 successively calls the ChaCha20 block function,\
    \ with the\n   same key and nonce, and with successively increasing block counter\n\
    \   parameters.  ChaCha20 then serializes the resulting state by writing\n   the\
    \ numbers in little-endian order, creating a keystream block.\n   Concatenating\
    \ the keystream blocks from the successive blocks forms a\n   keystream.  The\
    \ ChaCha20 function then performs an XOR of this\n   keystream with the plaintext.\
    \  Alternatively, each keystream block\n   can be XORed with a plaintext block\
    \ before proceeding to create the\n   next block, saving some memory.  There is\
    \ no requirement for the\n   plaintext to be an integral multiple of 512 bits.\
    \  If there is extra\n   keystream from the last block, it is discarded.  Specific\
    \ protocols\n   MAY require that the plaintext and ciphertext have certain length.\n\
    \   Such protocols need to specify how the plaintext is padded and how\n   much\
    \ padding it receives.\n   The inputs to ChaCha20 are:\n   o  A 256-bit key\n\
    \   o  A 32-bit initial counter.  This can be set to any number, but will\n  \
    \    usually be zero or one.  It makes sense to use one if we use the\n      zero\
    \ block for something else, such as generating a one-time\n      authenticator\
    \ key as part of an AEAD algorithm.\n   o  A 96-bit nonce.  In some protocols,\
    \ this is known as the\n      Initialization Vector.\n   o  An arbitrary-length\
    \ plaintext\n   The output is an encrypted message, or \"ciphertext\", of the\
    \ same\n   length.\n   Decryption is done in the same way.  The ChaCha20 block\
    \ function is\n   used to expand the key into a keystream, which is XORed with\
    \ the\n   ciphertext giving back the plaintext.\n"
- title: 2.4.1.  The ChaCha20 Encryption Algorithm in Pseudocode
  contents:
  - "2.4.1.  The ChaCha20 Encryption Algorithm in Pseudocode\n     chacha20_encrypt(key,\
    \ counter, nonce, plaintext):\n        for j = 0 upto floor(len(plaintext)/64)-1\n\
    \           key_stream = chacha20_block(key, counter+j, nonce)\n           block\
    \ = plaintext[(j*64)..(j*64+63)]\n           encrypted_message +=  block ^ key_stream\n\
    \           end\n        if ((len(plaintext) % 64) != 0)\n           j = floor(len(plaintext)/64)\n\
    \           key_stream = chacha20_block(key, counter+j, nonce)\n           block\
    \ = plaintext[(j*64)..len(plaintext)-1]\n           encrypted_message += (block^key_stream)[0..len(plaintext)%64]\n\
    \           end\n        return encrypted_message\n        end\n"
- title: 2.4.2.  Example and Test Vector for the ChaCha20 Cipher
  contents:
  - "2.4.2.  Example and Test Vector for the ChaCha20 Cipher\n   For a test vector,\
    \ we will use the following inputs to the ChaCha20\n   block function:\n   o \
    \ Key = 00:01:02:03:04:05:06:07:08:09:0a:0b:0c:0d:0e:0f:10:11:12:13:\n      14:15:16:17:18:19:1a:1b:1c:1d:1e:1f.\n\
    \   o  Nonce = (00:00:00:00:00:00:00:4a:00:00:00:00).\n   o  Initial Counter =\
    \ 1.\n   We use the following for the plaintext.  It was chosen to be long\n \
    \  enough to require more than one block, but not so long that it would\n   make\
    \ this example cumbersome (so, less than 3 blocks):\n  Plaintext Sunscreen:\n\
    \  000  4c 61 64 69 65 73 20 61 6e 64 20 47 65 6e 74 6c  Ladies and Gentl\n  016\
    \  65 6d 65 6e 20 6f 66 20 74 68 65 20 63 6c 61 73  emen of the clas\n  032  73\
    \ 20 6f 66 20 27 39 39 3a 20 49 66 20 49 20 63  s of '99: If I c\n  048  6f 75\
    \ 6c 64 20 6f 66 66 65 72 20 79 6f 75 20 6f  ould offer you o\n  064  6e 6c 79\
    \ 20 6f 6e 65 20 74 69 70 20 66 6f 72 20  nly one tip for\n  080  74 68 65 20\
    \ 66 75 74 75 72 65 2c 20 73 75 6e 73  the future, suns\n  096  63 72 65 65 6e\
    \ 20 77 6f 75 6c 64 20 62 65 20 69  creen would be i\n  112  74 2e           \
    \                                 t.\n   The following figure shows four ChaCha\
    \ state matrices:\n   1.  First block as it is set up.\n   2.  Second block as\
    \ it is set up.  Note that these blocks are only\n       two bits apart -- only\
    \ the counter in position 12 is different.\n   3.  Third block is the first block\
    \ after the ChaCha20 block\n       operation.\n   4.  Final block is the second\
    \ block after the ChaCha20 block\n       operation was applied.\n   After that,\
    \ we show the keystream.\n   First block setup:\n       61707865  3320646e  79622d32\
    \  6b206574\n       03020100  07060504  0b0a0908  0f0e0d0c\n       13121110  17161514\
    \  1b1a1918  1f1e1d1c\n       00000001  00000000  4a000000  00000000\n   Second\
    \ block setup:\n       61707865  3320646e  79622d32  6b206574\n       03020100\
    \  07060504  0b0a0908  0f0e0d0c\n       13121110  17161514  1b1a1918  1f1e1d1c\n\
    \       00000002  00000000  4a000000  00000000\n   First block after block operation:\n\
    \       f3514f22  e1d91b40  6f27de2f  ed1d63b8\n       821f138c  e2062c3d  ecca4f7e\
    \  78cff39e\n       a30a3b8a  920a6072  cd7479b5  34932bed\n       40ba4c79  cd343ec6\
    \  4c2c21ea  b7417df0\n   Second block after block operation:\n       9f74a669\
    \  410f633f  28feca22  7ec44dec\n       6d34d426  738cb970  3ac5e9f3  45590cc4\n\
    \       da6e8b39  892c831a  cdea67c1  2b7e1d90\n       037463f3  a11a2073  e8bcfb88\
    \  edc49139\n   Keystream:\n   22:4f:51:f3:40:1b:d9:e1:2f:de:27:6f:b8:63:1d:ed:8c:13:1f:82:3d:2c:06\n\
    \   e2:7e:4f:ca:ec:9e:f3:cf:78:8a:3b:0a:a3:72:60:0a:92:b5:79:74:cd:ed:2b\n   93:34:79:4c:ba:40:c6:3e:34:cd:ea:21:2c:4c:f0:7d:41:b7:69:a6:74:9f:3f\n\
    \   63:0f:41:22:ca:fe:28:ec:4d:c4:7e:26:d4:34:6d:70:b9:8c:73:f3:e9:c5:3a\n   c4:0c:59:45:39:8b:6e:da:1a:83:2c:89:c1:67:ea:cd:90:1d:7e:2b:f3:63\n\
    \   Finally, we XOR the keystream with the plaintext, yielding the\n   ciphertext:\n\
    \  Ciphertext Sunscreen:\n  000  6e 2e 35 9a 25 68 f9 80 41 ba 07 28 dd 0d 69\
    \ 81  n.5.%h..A..(..i.\n  016  e9 7e 7a ec 1d 43 60 c2 0a 27 af cc fd 9f ae 0b\
    \  .~z..C`..'......\n  032  f9 1b 65 c5 52 47 33 ab 8f 59 3d ab cd 62 b3 57  ..e.RG3..Y=..b.W\n\
    \  048  16 39 d6 24 e6 51 52 ab 8f 53 0c 35 9f 08 61 d8  .9.$.QR..S.5..a.\n  064\
    \  07 ca 0d bf 50 0d 6a 61 56 a3 8e 08 8a 22 b6 5e  ....P.jaV....\".^\n  080 \
    \ 52 bc 51 4d 16 cc f8 06 81 8c e9 1a b7 79 37 36  R.QM.........y76\n  096  5a\
    \ f9 0b bf 74 a3 5b e6 b4 0b 8e ed f2 78 5e 42  Z...t.[......x^B\n  112  87 4d\
    \                                            .M\n"
- title: 2.5.  The Poly1305 Algorithm
  contents:
  - "2.5.  The Poly1305 Algorithm\n   Poly1305 is a one-time authenticator designed\
    \ by D. J. Bernstein.\n   Poly1305 takes a 32-byte one-time key and a message\
    \ and produces a\n   16-byte tag.  This tag is used to authenticate the message.\n\
    \   The original article ([Poly1305]) is titled \"The Poly1305-AES\n   message-authentication\
    \ code\", and the MAC function there requires a\n   128-bit AES key, a 128-bit\
    \ \"additional key\", and a 128-bit (non-\n   secret) nonce.  AES is used there\
    \ for encrypting the nonce, so as to\n   get a unique (and secret) 128-bit string,\
    \ but as the paper states,\n   \"There is nothing special about AES here.  One\
    \ can replace AES with\n   an arbitrary keyed function from an arbitrary set of\
    \ nonces to\n   16-byte strings.\"\n   Regardless of how the key is generated,\
    \ the key is partitioned into\n   two parts, called \"r\" and \"s\".  The pair\
    \ (r,s) should be unique, and\n   MUST be unpredictable for each invocation (that\
    \ is why it was\n   originally obtained by encrypting a nonce), while \"r\" MAY\
    \ be\n   constant, but needs to be modified as follows before being used: (\"\
    r\"\n   is treated as a 16-octet little-endian number):\n   o  r[3], r[7], r[11],\
    \ and r[15] are required to have their top four\n      bits clear (be smaller\
    \ than 16)\n   o  r[4], r[8], and r[12] are required to have their bottom two\
    \ bits\n      clear (be divisible by 4)\n   The following sample code clamps \"\
    r\" to be appropriate:\n   /*\n   Adapted from poly1305aes_test_clamp.c version\
    \ 20050207\n   D. J. Bernstein\n   Public domain.\n   */\n   #include \"poly1305aes_test.h\"\
    \n   void poly1305aes_test_clamp(unsigned char r[16])\n   {\n     r[3] &= 15;\n\
    \     r[7] &= 15;\n     r[11] &= 15;\n     r[15] &= 15;\n     r[4] &= 252;\n \
    \    r[8] &= 252;\n     r[12] &= 252;\n   }\n   The \"s\" should be unpredictable,\
    \ but it is perfectly acceptable to\n   generate both \"r\" and \"s\" uniquely\
    \ each time.  Because each of them\n   is 128 bits, pseudorandomly generating\
    \ them (see Section 2.6) is also\n   acceptable.\n   The inputs to Poly1305 are:\n\
    \   o  A 256-bit one-time key\n   o  An arbitrary length message\n   The output\
    \ is a 128-bit tag.\n   First, the \"r\" value should be clamped.\n   Next, set\
    \ the constant prime \"P\" be 2^130-5:\n   3fffffffffffffffffffffffffffffffb.\
    \  Also set a variable \"accumulator\"\n   to zero.\n   Next, divide the message\
    \ into 16-byte blocks.  The last one might be\n   shorter:\n   o  Read the block\
    \ as a little-endian number.\n   o  Add one bit beyond the number of octets. \
    \ For a 16-byte block,\n      this is equivalent to adding 2^128 to the number.\
    \  For the shorter\n      block, it can be 2^120, 2^112, or any power of two that\
    \ is evenly\n      divisible by 8, all the way down to 2^8.\n   o  If the block\
    \ is not 17 bytes long (the last block), pad it with\n      zeros.  This is meaningless\
    \ if you are treating the blocks as\n      numbers.\n   o  Add this number to\
    \ the accumulator.\n   o  Multiply by \"r\".\n   o  Set the accumulator to the\
    \ result modulo p.  To summarize: Acc =\n      ((Acc+block)*r) % p.\n   Finally,\
    \ the value of the secret key \"s\" is added to the accumulator,\n   and the 128\
    \ least significant bits are serialized in little-endian\n   order to form the\
    \ tag.\n"
- title: 2.5.1.  The Poly1305 Algorithms in Pseudocode
  contents:
  - "2.5.1.  The Poly1305 Algorithms in Pseudocode\n      clamp(r): r &= 0x0ffffffc0ffffffc0ffffffc0fffffff\n\
    \      poly1305_mac(msg, key):\n         r = (le_bytes_to_num(key[0..15])\n  \
    \       clamp(r)\n         s = le_num(key[16..31])\n         accumulator = 0\n\
    \         p = (1<<130)-5\n         for i=1 upto ceil(msg length in bytes / 16)\n\
    \            n = le_bytes_to_num(msg[((i-1)*16)..(i*16)] | [0x01])\n         \
    \   a += n\n            a = (r * a) % p\n            end\n         a += s\n  \
    \       return num_to_16_le_bytes(a)\n         end\n"
- title: 2.5.2.  Poly1305 Example and Test Vector
  contents:
  - "2.5.2.  Poly1305 Example and Test Vector\n   For our example, we will dispense\
    \ with generating the one-time key\n   using AES, and assume that we got the following\
    \ keying material:\n   o  Key Material: 85:d6:be:78:57:55:6d:33:7f:44:52:fe:42:d5:06:a8:01:0\n\
    \      3:80:8a:fb:0d:b2:fd:4a:bf:f6:af:41:49:f5:1b\n   o  s as an octet string:\n\
    \      01:03:80:8a:fb:0d:b2:fd:4a:bf:f6:af:41:49:f5:1b\n   o  s as a 128-bit number:\
    \ 1bf54941aff6bf4afdb20dfb8a800301\n   o  r before clamping: 85:d6:be:78:57:55:6d:33:7f:44:52:fe:42:d5:06:a8\n\
    \   o  Clamped r as a number: 806d5400e52447c036d555408bed685\n   For our message,\
    \ we'll use a short text:\n  Message to be Authenticated:\n  000  43 72 79 70\
    \ 74 6f 67 72 61 70 68 69 63 20 46 6f  Cryptographic Fo\n  016  72 75 6d 20 52\
    \ 65 73 65 61 72 63 68 20 47 72 6f  rum Research Gro\n  032  75 70           \
    \                                 up\n   Since Poly1305 works in 16-byte chunks,\
    \ the 34-byte message divides\n   into three blocks.  In the following calculation,\
    \ \"Acc\" denotes the\n   accumulator and \"Block\" the current block:\n   Block\
    \ #1\n   Acc = 00\n   Block = 6f4620636968706172676f7470797243\n   Block with\
    \ 0x01 byte = 016f4620636968706172676f7470797243\n   Acc + block = 016f4620636968706172676f7470797243\n\
    \   (Acc+Block) * r =\n        b83fe991ca66800489155dcd69e8426ba2779453994ac90ed284034da565ecf\n\
    \   Acc = ((Acc+Block)*r) % P = 2c88c77849d64ae9147ddeb88e69c83fc\n   Block #2\n\
    \   Acc = 2c88c77849d64ae9147ddeb88e69c83fc\n   Block = 6f7247206863726165736552206d7572\n\
    \   Block with 0x01 byte = 016f7247206863726165736552206d7572\n   Acc + block\
    \ = 437febea505c820f2ad5150db0709f96e\n   (Acc+Block) * r =\n        21dcc992d0c659ba4036f65bb7f88562ae59b32c2b3b8f7efc8b00f78e548a26\n\
    \   Acc = ((Acc+Block)*r) % P = 2d8adaf23b0337fa7cccfb4ea344b30de\n   Last Block\n\
    \   Acc = 2d8adaf23b0337fa7cccfb4ea344b30de\n   Block = 7075\n   Block with 0x01\
    \ byte = 017075\n   Acc + block = 2d8adaf23b0337fa7cccfb4ea344ca153\n   (Acc +\
    \ Block) * r =\n        16d8e08a0f3fe1de4fe4a15486aca7a270a29f1e6c849221e4a6798b8e45321f\n\
    \   ((Acc + Block) * r) % P = 28d31b7caff946c77c8844335369d03a7\n   Adding s,\
    \ we get this number, and serialize if to get the tag:\n   Acc + s = 2a927010caf8b2bc2c6365130c11d06a8\n\
    \   Tag: a8:06:1d:c1:30:51:36:c6:c2:2b:8b:af:0c:01:27:a9\n"
- title: 2.6.  Generating the Poly1305 Key Using ChaCha20
  contents:
  - "2.6.  Generating the Poly1305 Key Using ChaCha20\n   As said in Section 2.5,\
    \ it is acceptable to generate the one-time\n   Poly1305 pseudorandomly.  This\
    \ section defines such a method.\n   To generate such a key pair (r,s), we will\
    \ use the ChaCha20 block\n   function described in Section 2.3.  This assumes\
    \ that we have a\n   256-bit session key for the Message Authentication Code (MAC)\n\
    \   function, such as SK_ai and SK_ar in Internet Key Exchange Protocol\n   version\
    \ 2 (IKEv2) ([RFC7296]), the integrity key in the Encapsulating\n   Security Payload\
    \ (ESP) and Authentication Header (AH), or the\n   client_write_MAC_key and server_write_MAC_key\
    \ in TLS.  Any document\n   that specifies the use of Poly1305 as a MAC algorithm\
    \ for some\n   protocol must specify that 256 bits are allocated for the integrity\n\
    \   key.  Note that in the AEAD construction defined in Section 2.8, the\n   same\
    \ key is used for encryption and key generation, so the use of\n   SK_a* or *_write_MAC_key\
    \ is only for stand-alone Poly1305.\n   The method is to call the block function\
    \ with the following\n   parameters:\n   o  The 256-bit session integrity key\
    \ is used as the ChaCha20 key.\n   o  The block counter is set to zero.\n   o\
    \  The protocol will specify a 96-bit or 64-bit nonce.  This MUST be\n      unique\
    \ per invocation with the same key, so it MUST NOT be\n      randomly generated.\
    \  A counter is a good way to implement this,\n      but other methods, such as\
    \ a Linear Feedback Shift Register (LFSR)\n      are also acceptable.  ChaCha20\
    \ as specified here requires a 96-bit\n      nonce.  So if the provided nonce\
    \ is only 64-bit, then the first 32\n      bits of the nonce will be set to a\
    \ constant number.  This will\n      usually be zero, but for protocols with multiple\
    \ senders it may be\n      different for each sender, but should be the same for\
    \ all\n      invocations of the function with the same key by a particular\n \
    \     sender.\n   After running the block function, we have a 512-bit state. \
    \ We take\n   the first 256 bits or the serialized state, and use those as the\
    \ one-\n   time Poly1305 key: the first 128 bits are clamped and form \"r\", while\n\
    \   the next 128 bits become \"s\".  The other 256 bits are discarded.\n   Note\
    \ that while many protocols have provisions for a nonce for\n   encryption algorithms\
    \ (often called Initialization Vectors, or IVs),\n   they usually don't have such\
    \ a provision for the MAC function.  In\n   that case, the per-invocation nonce\
    \ will have to come from somewhere\n   else, such as a message counter.\n"
- title: 2.6.1.  Poly1305 Key Generation in Pseudocode
  contents:
  - "2.6.1.  Poly1305 Key Generation in Pseudocode\n      poly1305_key_gen(key,nonce):\n\
    \         counter = 0\n         block = chacha20_block(key,counter,nonce)\n  \
    \       return block[0..31]\n         end\n"
- title: 2.6.2.  Poly1305 Key Generation Test Vector
  contents:
  - "2.6.2.  Poly1305 Key Generation Test Vector\n   For this example, we'll set:\n\
    \  Key:\n  000  80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f  ................\n\
    \  016  90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f  ................\n  \
    \ Nonce:\n   000  00 00 00 00 00 01 02 03 04 05 06 07              ............\n\
    \   The ChaCha state setup with key, nonce, and block counter zero:\n        \
    \ 61707865  3320646e  79622d32  6b206574\n         83828180  87868584  8b8a8988\
    \  8f8e8d8c\n         93929190  97969594  9b9a9998  9f9e9d9c\n         00000000\
    \  00000000  03020100  07060504\n   The ChaCha state after 20 rounds:\n      \
    \   8ba0d58a  cc815f90  27405081  7194b24a\n         37b633a8  a50dfde3  e2b8db08\
    \  46a6d1fd\n         7da03782  9183a233  148ad271  b46773d1\n         3cc1875a\
    \  8607def1  ca5c3086  7085eb87\n  Output bytes:\n  000  8a d5 a0 8b 90 5f 81\
    \ cc 81 50 40 27 4a b2 94 71  ....._...P@'J..q\n  016  a8 33 b6 37 e3 fd 0d a5\
    \ 08 db b8 e2 fd d1 a6 46  .3.7...........F\n   And that output is also the 32-byte\
    \ one-time key used for Poly1305.\n"
- title: 2.7.  A Pseudorandom Function for Crypto Suites based on ChaCha/Poly1305
  contents:
  - "2.7.  A Pseudorandom Function for Crypto Suites based on ChaCha/Poly1305\n  \
    \ Some protocols, such as IKEv2 ([RFC7296]), require a Pseudorandom\n   Function\
    \ (PRF), mostly for key derivation.  In the IKEv2 definition,\n   a PRF is a function\
    \ that accepts a variable-length key and a\n   variable-length input, and returns\
    \ a fixed-length output.  Most\n   commonly, Hashed MAC (HMAC) constructions are\
    \ used for this purpose,\n   and often the same function is used for both message\
    \ authentication\n   and PRF.\n   Poly1305 is not a suitable choice for a PRF.\
    \  Poly1305 prohibits\n   using the same key twice, whereas the PRF in IKEv2 is\
    \ used multiple\n   times with the same key.  Additionally, unlike HMAC, Poly1305\
    \ is\n   biased, so using it for key derivation would reduce the security of\n\
    \   the symmetric encryption.\n   Chacha20 could be used as a key-derivation function,\
    \ by generating an\n   arbitrarily long keystream.  However, that is not what\
    \ protocols such\n   as IKEv2 require.\n   For this reason, this document does\
    \ not specify a PRF and recommends\n   that crypto suites use some other PRF such\
    \ as PRF_HMAC_SHA2_256 (see\n   Section 2.1.2 of [RFC4868]).\n"
- title: 2.8.  AEAD Construction
  contents:
  - "2.8.  AEAD Construction\n   AEAD_CHACHA20_POLY1305 is an authenticated encryption\
    \ with additional\n   data algorithm.  The inputs to AEAD_CHACHA20_POLY1305 are:\n\
    \   o  A 256-bit key\n   o  A 96-bit nonce -- different for each invocation with\
    \ the same key\n   o  An arbitrary length plaintext\n   o  Arbitrary length additional\
    \ authenticated data (AAD)\n   Some protocols may have unique per-invocation inputs\
    \ that are not 96\n   bits in length.  For example, IPsec may specify a 64-bit\
    \ nonce.  In\n   such a case, it is up to the protocol document to define how\
    \ to\n   transform the protocol nonce into a 96-bit nonce, for example, by\n \
    \  concatenating a constant value.\n   The ChaCha20 and Poly1305 primitives are\
    \ combined into an AEAD that\n   takes a 256-bit key and 96-bit nonce as follows:\n\
    \   o  First, a Poly1305 one-time key is generated from the 256-bit key\n    \
    \  and nonce using the procedure described in Section 2.6.\n   o  Next, the ChaCha20\
    \ encryption function is called to encrypt the\n      plaintext, using the same\
    \ key and nonce, and with the initial\n      counter set to 1.\n   o  Finally,\
    \ the Poly1305 function is called with the Poly1305 key\n      calculated above,\
    \ and a message constructed as a concatenation of\n      the following:\n    \
    \  *  The AAD\n      *  padding1 -- the padding is up to 15 zero bytes, and it\
    \ brings\n         the total length so far to an integral multiple of 16.  If\
    \ the\n         length of the AAD was already an integral multiple of 16 bytes,\n\
    \         this field is zero-length.\n      *  The ciphertext\n      *  padding2\
    \ -- the padding is up to 15 zero bytes, and it brings\n         the total length\
    \ so far to an integral multiple of 16.  If the\n         length of the ciphertext\
    \ was already an integral multiple of 16\n         bytes, this field is zero-length.\n\
    \      *  The length of the additional data in octets (as a 64-bit\n         little-endian\
    \ integer).\n      *  The length of the ciphertext in octets (as a 64-bit little-\n\
    \         endian integer).\n   The output from the AEAD is twofold:\n   o  A ciphertext\
    \ of the same length as the plaintext.\n   o  A 128-bit tag, which is the output\
    \ of the Poly1305 function.\n   Decryption is similar with the following differences:\n\
    \   o  The roles of ciphertext and plaintext are reversed, so the\n      ChaCha20\
    \ encryption function is applied to the ciphertext,\n      producing the plaintext.\n\
    \   o  The Poly1305 function is still run on the AAD and the ciphertext,\n   \
    \   not the plaintext.\n   o  The calculated tag is bitwise compared to the received\
    \ tag.  The\n      message is authenticated if and only if the tags match.\n \
    \  A few notes about this design:\n   1.  The amount of encrypted data possible\
    \ in a single invocation is\n       2^32-1 blocks of 64 bytes each, because of\
    \ the size of the block\n       counter field in the ChaCha20 block function.\
    \  This gives a total\n       of 247,877,906,880 bytes, or nearly 256 GB.  This\
    \ should be\n       enough for traffic protocols such as IPsec and TLS, but may\
    \ be\n       too small for file and/or disk encryption.  For such uses, we can\n\
    \       return to the original design, reduce the nonce to 64 bits, and\n    \
    \   use the integer at position 13 as the top 32 bits of a 64-bit\n       block\
    \ counter, increasing the total message size to over a\n       million petabytes\
    \ (1,180,591,620,717,411,303,360 bytes to be\n       exact).\n   2.  Despite the\
    \ previous item, the ciphertext length field in the\n       construction of the\
    \ buffer on which Poly1305 runs limits the\n       ciphertext (and hence, the\
    \ plaintext) size to 2^64 bytes, or\n       sixteen thousand petabytes (18,446,744,073,709,551,616\
    \ bytes to\n       be exact).\n   The AEAD construction in this section is a novel\
    \ composition of\n   ChaCha20 and Poly1305.  A security analysis of this composition\
    \ is\n   given in [Procter].\n   Here is a list of the parameters for this construction\
    \ as defined in\n   Section 4 of RFC 5116:\n   o  K_LEN (key length) is 32 octets.\n\
    \   o  P_MAX (maximum size of the plaintext) is 247,877,906,880 bytes, or\n  \
    \    nearly 256 GB.\n   o  A_MAX (maximum size of the associated data) is set\
    \ to 2^64-1\n      octets by the length field for associated data.\n   o  N_MIN\
    \ = N_MAX = 12 octets.\n   o  C_MAX = P_MAX + tag length = 247,877,906,896 octets.\n\
    \   Distinct AAD inputs (as described in Section 3.3 of RFC 5116) shall\n   be\
    \ concatenated into a single input to AEAD_CHACHA20_POLY1305.  It is\n   up to\
    \ the application to create a structure in the AAD input if it is\n   needed.\n"
- title: 2.8.1.  Pseudocode for the AEAD Construction
  contents:
  - "2.8.1.  Pseudocode for the AEAD Construction\n      pad16(x):\n         if (len(x)\
    \ % 16)==0\n            then return NULL\n            else return copies(0, 16-(len(x)%16))\n\
    \         end\n      chacha20_aead_encrypt(aad, key, iv, constant, plaintext):\n\
    \         nonce = constant | iv\n         otk = poly1305_key_gen(key, nonce)\n\
    \         ciphertext = chacha20_encrypt(key, 1, nonce, plaintext)\n         mac_data\
    \ = aad | pad16(aad)\n         mac_data |= ciphertext | pad16(ciphertext)\n  \
    \       mac_data |= num_to_4_le_bytes(aad.length)\n         mac_data |= num_to_4_le_bytes(ciphertext.length)\n\
    \         tag = poly1305_mac(mac_data, otk)\n         return (ciphertext, tag)\n"
- title: 2.8.2.  Example and Test Vector for AEAD_CHACHA20_POLY1305
  contents:
  - "2.8.2.  Example and Test Vector for AEAD_CHACHA20_POLY1305\n   For a test vector,\
    \ we will use the following inputs to the\n   AEAD_CHACHA20_POLY1305 function:\n\
    \  Plaintext:\n  000  4c 61 64 69 65 73 20 61 6e 64 20 47 65 6e 74 6c  Ladies\
    \ and Gentl\n  016  65 6d 65 6e 20 6f 66 20 74 68 65 20 63 6c 61 73  emen of the\
    \ clas\n  032  73 20 6f 66 20 27 39 39 3a 20 49 66 20 49 20 63  s of '99: If I\
    \ c\n  048  6f 75 6c 64 20 6f 66 66 65 72 20 79 6f 75 20 6f  ould offer you o\n\
    \  064  6e 6c 79 20 6f 6e 65 20 74 69 70 20 66 6f 72 20  nly one tip for\n  080\
    \  74 68 65 20 66 75 74 75 72 65 2c 20 73 75 6e 73  the future, suns\n  096  63\
    \ 72 65 65 6e 20 77 6f 75 6c 64 20 62 65 20 69  creen would be i\n  112  74 2e\
    \                                            t.\n   AAD:\n   000  50 51 52 53\
    \ c0 c1 c2 c3 c4 c5 c6 c7              PQRS........\n  Key:\n  000  80 81 82 83\
    \ 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f  ................\n  016  90 91 92 93 94\
    \ 95 96 97 98 99 9a 9b 9c 9d 9e 9f  ................\n   IV:\n   000  40 41 42\
    \ 43 44 45 46 47                          @ABCDEFG\n   32-bit fixed-common part:\n\
    \   000  07 00 00 00                                      ....\n   Setup for generating\
    \ Poly1305 one-time key (sender id=7):\n       61707865  3320646e  79622d32  6b206574\n\
    \       83828180  87868584  8b8a8988  8f8e8d8c\n       93929190  97969594  9b9a9998\
    \  9f9e9d9c\n       00000000  00000007  43424140  47464544\n   After generating\
    \ Poly1305 one-time key:\n       252bac7b  af47b42d  557ab609  8455e9a4\n    \
    \   73d6e10a  ebd97510  7875932a  ff53d53e\n       decc7ea2  b44ddbad  e49c17d1\
    \  d8430bc9\n       8c94b7bc  8b7d4b4b  3927f67d  1669a432\n  Poly1305 Key:\n\
    \  000  7b ac 2b 25 2d b4 47 af 09 b6 7a 55 a4 e9 55 84  {.+%-.G...zU..U.\n  016\
    \  0a e1 d6 73 10 75 d9 eb 2a 93 75 78 3e d5 53 ff  ...s.u..*.ux>.S.\n  Poly1305\
    \ r =  455e9a4057ab6080f47b42c052bac7b\n  Poly1305 s = ff53d53e7875932aebd9751073d6e10a\n\
    \   keystream bytes:\n   9f:7b:e9:5d:01:fd:40:ba:15:e2:8f:fb:36:81:0a:ae:\n  \
    \ c1:c0:88:3f:09:01:6e:de:dd:8a:d0:87:55:82:03:a5:\n   4e:9e:cb:38:ac:8e:5e:2b:b8:da:b2:0f:fa:db:52:e8:\n\
    \   75:04:b2:6e:be:69:6d:4f:60:a4:85:cf:11:b8:1b:59:\n   fc:b1:c4:5f:42:19:ee:ac:ec:6a:de:c3:4e:66:69:78:\n\
    \   8e:db:41:c4:9c:a3:01:e1:27:e0:ac:ab:3b:44:b9:cf:\n   5c:86:bb:95:e0:6b:0d:f2:90:1a:b6:45:e4:ab:e6:22:\n\
    \   15:38\n  Ciphertext:\n  000  d3 1a 8d 34 64 8e 60 db 7b 86 af bc 53 ef 7e\
    \ c2  ...4d.`.{...S.~.\n  016  a4 ad ed 51 29 6e 08 fe a9 e2 b5 a7 36 ee 62 d6\
    \  ...Q)n......6.b.\n  032  3d be a4 5e 8c a9 67 12 82 fa fb 69 da 92 72 8b  =..^..g....i..r.\n\
    \  048  1a 71 de 0a 9e 06 0b 29 05 d6 a5 b6 7e cd 3b 36  .q.....)....~.;6\n  064\
    \  92 dd bd 7f 2d 77 8b 8c 98 03 ae e3 28 09 1b 58  ....-w......(..X\n  080  fa\
    \ b3 24 e4 fa d6 75 94 55 85 80 8b 48 31 d7 bc  ..$...u.U...H1..\n  096  3f f4\
    \ de f0 8e 4b 7a 9d e5 76 d2 65 86 ce c6 4b  ?....Kz..v.e...K\n  112  61 16  \
    \                                          a.\n  AEAD Construction for Poly1305:\n\
    \  000  50 51 52 53 c0 c1 c2 c3 c4 c5 c6 c7 00 00 00 00  PQRS............\n  016\
    \  d3 1a 8d 34 64 8e 60 db 7b 86 af bc 53 ef 7e c2  ...4d.`.{...S.~.\n  032  a4\
    \ ad ed 51 29 6e 08 fe a9 e2 b5 a7 36 ee 62 d6  ...Q)n......6.b.\n  048  3d be\
    \ a4 5e 8c a9 67 12 82 fa fb 69 da 92 72 8b  =..^..g....i..r.\n  064  1a 71 de\
    \ 0a 9e 06 0b 29 05 d6 a5 b6 7e cd 3b 36  .q.....)....~.;6\n  080  92 dd bd 7f\
    \ 2d 77 8b 8c 98 03 ae e3 28 09 1b 58  ....-w......(..X\n  096  fa b3 24 e4 fa\
    \ d6 75 94 55 85 80 8b 48 31 d7 bc  ..$...u.U...H1..\n  112  3f f4 de f0 8e 4b\
    \ 7a 9d e5 76 d2 65 86 ce c6 4b  ?....Kz..v.e...K\n  128  61 16 00 00 00 00 00\
    \ 00 00 00 00 00 00 00 00 00  a...............\n  144  0c 00 00 00 00 00 00 00\
    \ 72 00 00 00 00 00 00 00  ........r.......\n   Note the four zero bytes in line\
    \ 000 and the 14 zero bytes in line\n   128\n   Tag:\n   1a:e1:0b:59:4f:09:e2:6a:7e:90:2e:cb:d0:60:06:91\n"
- title: 3.  Implementation Advice
  contents:
  - "3.  Implementation Advice\n   Each block of ChaCha20 involves 16 move operations\
    \ and one increment\n   operation for loading the state, 80 each of XOR, addition\
    \ and Roll\n   operations for the rounds, 16 more add operations and 16 XOR\n\
    \   operations for protecting the plaintext.  Section 2.3 describes the\n   ChaCha\
    \ block function as \"adding the original input words\".  This\n   implies that\
    \ before starting the rounds on the ChaCha state, we copy\n   it aside, only to\
    \ add it in later.  This is correct, but we can save\n   a few operations if we\
    \ instead copy the state and do the work on the\n   copy.  This way, for the next\
    \ block you don't need to recreate the\n   state, but only to increment the block\
    \ counter.  This saves\n   approximately 5.5% of the cycles.\n   It is not recommended\
    \ to use a generic big number library such as the\n   one in OpenSSL for the arithmetic\
    \ operations in Poly1305.  Such\n   libraries use dynamic allocation to be able\
    \ to handle an integer of\n   any size, but that flexibility comes at the expense\
    \ of performance as\n   well as side-channel security.  More efficient implementations\
    \ that\n   run in constant time are available, one of them in D. J. Bernstein's\n\
    \   own library, NaCl ([NaCl]).  A constant-time but not optimal approach\n  \
    \ would be to naively implement the arithmetic operations for 288-bit\n   integers,\
    \ because even a naive implementation will not exceed 2^288\n   in the multiplication\
    \ of (acc+block) and r.  An efficient constant-\n   time implementation can be\
    \ found in the public domain library\n   poly1305-donna ([Poly1305_Donna]).\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   The ChaCha20 cipher is designed to provide 256-bit\
    \ security.\n   The Poly1305 authenticator is designed to ensure that forged messages\n\
    \   are rejected with a probability of 1-(n/(2^102)) for a 16n-byte\n   message,\
    \ even after sending 2^64 legitimate messages, so it is\n   SUF-CMA (strong unforgeability\
    \ against chosen-message attacks) in the\n   terminology of [AE].\n   Proving\
    \ the security of either of these is beyond the scope of this\n   document.  Such\
    \ proofs are available in the referenced academic\n   papers ([ChaCha], [Poly1305],\
    \ [LatinDances], [LatinDances2], and\n   [Zhenqing2012]).\n   The most important\
    \ security consideration in implementing this\n   document is the uniqueness of\
    \ the nonce used in ChaCha20.  Counters\n   and LFSRs are both acceptable ways\
    \ of generating unique nonces, as is\n   encrypting a counter using a 64-bit cipher\
    \ such as DES.  Note that it\n   is not acceptable to use a truncation of a counter\
    \ encrypted with a\n   128-bit or 256-bit cipher, because such a truncation may\
    \ repeat after\n   a short time.\n   Consequences of repeating a nonce: If a nonce\
    \ is repeated, then both\n   the one-time Poly1305 key and the keystream are identical\
    \ between the\n   messages.  This reveals the XOR of the plaintexts, because the\
    \ XOR of\n   the plaintexts is equal to the XOR of the ciphertexts.\n   The Poly1305\
    \ key MUST be unpredictable to an attacker.  Randomly\n   generating the key would\
    \ fulfill this requirement, except that\n   Poly1305 is often used in communications\
    \ protocols, so the receiver\n   should know the key.  Pseudorandom number generation\
    \ such as by\n   encrypting a counter is acceptable.  Using ChaCha with a secret\
    \ key\n   and a nonce is also acceptable.\n   The algorithms presented here were\
    \ designed to be easy to implement\n   in constant time to avoid side-channel\
    \ vulnerabilities.  The\n   operations used in ChaCha20 are all additions, XORs,\
    \ and fixed\n   rotations.  All of these can and should be implemented in constant\n\
    \   time.  Access to offsets into the ChaCha state and the number of\n   operations\
    \ do not depend on any property of the key, eliminating the\n   chance of information\
    \ about the key leaking through the timing of\n   cache misses.\n   For Poly1305,\
    \ the operations are addition, multiplication. and\n   modulus, all on numbers\
    \ with greater than 128 bits.  This can be done\n   in constant time, but a naive\
    \ implementation (such as using some\n   generic big number library) will not\
    \ be constant time.  For example,\n   if the multiplication is performed as a\
    \ separate operation from the\n   modulus, the result will sometimes be under\
    \ 2^256 and sometimes be\n   above 2^256.  Implementers should be careful about\
    \ timing side-\n   channels for Poly1305 by using the appropriate implementation\
    \ of\n   these operations.\n   Validating the authenticity of a message involves\
    \ a bitwise\n   comparison of the calculated tag with the received tag.  In most\
    \ use\n   cases, nonces and AAD contents are not \"used up\" until a valid\n \
    \  message is received.  This allows an attacker to send multiple\n   identical\
    \ messages with different tags until one passes the tag\n   comparison.  This\
    \ is hard if the attacker has to try all 2^128\n   possible tags one by one. \
    \ However, if the timing of the tag\n   comparison operation reveals how long\
    \ a prefix of the calculated and\n   received tags is identical, the number of\
    \ messages can be reduced\n   significantly.  For this reason, with online protocols,\n\
    \   implementation MUST use a constant-time comparison function rather\n   than\
    \ relying on optimized but insecure library functions such as the\n   C language's\
    \ memcmp().\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   IANA has assigned an entry in the \"Authenticated\
    \ Encryption with\n   Associated Data (AEAD) Parameters\" registry with 29 as\
    \ the Numeric\n   ID, \"AEAD_CHACHA20_POLY1305\" as the name, and this document\
    \ as\n   reference.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [ChaCha]   Bernstein, D., \"ChaCha, a variant\
    \ of Salsa20\", January\n              2008, <http://cr.yp.to/chacha/chacha-20080128.pdf>.\n\
    \   [Poly1305] Bernstein, D., \"The Poly1305-AES message-authentication\n    \
    \          code\", March 2005,\n              <http://cr.yp.to/mac/poly1305-20050329.pdf>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [AE]       Bellare, M. and C. Namprempre, \"\
    Authenticated Encryption:\n              Relations among notions and analysis\
    \ of the generic\n              composition paradigm\", September 2008,\n    \
    \          <http://dl.acm.org/citation.cfm?id=1410269>.\n   [Cache-Collisions]\n\
    \              Bonneau, J. and I. Mironov, \"Cache-Collision Timing\n        \
    \      Attacks Against AES\", 2006,\n              <http://research.microsoft.com/pubs/64024/aes-timing.pdf>.\n\
    \   [FIPS-197] National Institute of Standards and Technology, \"Advanced\n  \
    \            Encryption Standard (AES)\", FIPS PUB 197, November 2001,\n     \
    \         <http://csrc.nist.gov/publications/fips/fips197/\n              fips-197.pdf>.\n\
    \   [LatinDances]\n              Aumasson, J., Fischer, S., Khazaei, S., Meier,\
    \ W., and C.\n              Rechberger, \"New Features of Latin Dances: Analysis\
    \ of\n              Salsa, ChaCha, and Rumba\", December 2007,\n             \
    \ <http://cr.yp.to/rumba20/newfeatures-20071218.pdf>.\n   [LatinDances2]\n   \
    \           Ishiguro, T., Kiyomoto, S., and Y. Miyake, \"Modified\n          \
    \    version of 'Latin Dances Revisited: New Analytic Results\n              of\
    \ Salsa20 and ChaCha'\", February 2012,\n              <https://eprint.iacr.org/2012/065.pdf>.\n\
    \   [NaCl]     Bernstein, D., Lange, T., and P. Schwabe, \"NaCl:\n           \
    \   Networking and Cryptography library\", July 2012,\n              <http://nacl.cr.yp.to>.\n\
    \   [Poly1305_Donna]\n              Floodyberry, A., \"poly1305-donna\", February\
    \ 2014,\n              <https://github.com/floodyberry/poly1305-donna>.\n   [Procter]\
    \  Procter, G., \"A Security Analysis of the Composition of\n              ChaCha20\
    \ and Poly1305\", August 2014,\n              <http://eprint.iacr.org/2014/613.pdf>.\n\
    \   [RFC4868]  Kelly, S. and S. Frankel, \"Using HMAC-SHA-256, HMAC-SHA-\n   \
    \           384, and HMAC-SHA-512 with IPsec\", RFC 4868,\n              DOI 10.17487/RFC4868,\
    \ May 2007,\n              <http://www.rfc-editor.org/info/rfc4868>.\n   [RFC5116]\
    \  McGrew, D., \"An Interface and Algorithms for Authenticated\n             \
    \ Encryption\", RFC 5116, DOI 10.17487/RFC5116, January 2008,\n              <http://www.rfc-editor.org/info/rfc5116>.\n\
    \   [RFC7296]  Kaufman, C., Hoffman, P., Nir, Y., Eronen, P., and T.\n       \
    \       Kivinen, \"Internet Key Exchange Protocol Version 2\n              (IKEv2)\"\
    , STD 79, RFC 7296, DOI 10.17487/RFC7296, October\n              2014, <http://www.rfc-editor.org/info/rfc7296>.\n\
    \   [SP800-67] National Institute of Standards and Technology,\n             \
    \ \"Recommendation for the Triple Data Encryption Algorithm\n              (TDEA)\
    \ Block Cipher\", NIST 800-67, January 2012,\n              <http://csrc.nist.gov/publications/nistpubs/800-67-Rev1/\n\
    \              SP-800-67-Rev1.pdf>.\n   [Standby-Cipher]\n              McGrew,\
    \ D., Grieco, A., and Y. Sheffer, \"Selection of\n              Future Cryptographic\
    \ Standards\", Work in Progress,\n              draft-mcgrew-standby-cipher-00,\
    \ January 2013.\n   [Zhenqing2012]\n              Zhenqing, S., Bin, Z., Dengguo,\
    \ F., and W. Wenling,\n              \"Improved Key Recovery Attacks on Reduced-Round\
    \ Salsa20\n              and ChaCha*\", 2012.\n"
- title: Appendix A.  Additional Test Vectors
  contents:
  - "Appendix A.  Additional Test Vectors\n   The subsections of this appendix contain\
    \ more test vectors for the\n   algorithms in the sub-sections of Section 2.\n"
- title: A.1.  The ChaCha20 Block Functions
  contents:
  - "A.1.  The ChaCha20 Block Functions\n  Test Vector #1:\n  ==============\n  Key:\n\
    \  000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  016\
    \  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  Nonce:\n\
    \  000  00 00 00 00 00 00 00 00 00 00 00 00              ............\n  Block\
    \ Counter = 0\n    ChaCha state at the end\n        ade0b876  903df1a0  e56a5d40\
    \  28bd8653\n        b819d2bd  1aed8da0  ccef36a8  c70d778b\n        7c5941da\
    \  8d485751  3fe02477  374ad8b8\n        f4b8436a  1ca11815  69b687c3  8665eeb2\n\
    \  Keystream:\n  000  76 b8 e0 ad a0 f1 3d 90 40 5d 6a e5 53 86 bd 28  v.....=.@]j.S..(\n\
    \  016  bd d2 19 b8 a0 8d ed 1a a8 36 ef cc 8b 77 0d c7  .........6...w..\n  032\
    \  da 41 59 7c 51 57 48 8d 77 24 e0 3f b8 d8 4a 37  .AY|QWH.w$.?..J7\n  048  6a\
    \ 43 b8 f4 15 18 a1 1c c3 87 b6 69 b2 ee 65 86  jC.........i..e.\n  Test Vector\
    \ #2:\n  ==============\n  Key:\n  000  00 00 00 00 00 00 00 00 00 00 00 00 00\
    \ 00 00 00  ................\n  016  00 00 00 00 00 00 00 00 00 00 00 00 00 00\
    \ 00 00  ................\n  Nonce:\n  000  00 00 00 00 00 00 00 00 00 00 00 00\
    \              ............\n  Block Counter = 1\n    ChaCha state at the end\n\
    \        bee7079f  7a385155  7c97ba98  0d082d73\n        a0290fcb  6965e348  3e53c612\
    \  ed7aee32\n        7621b729  434ee69c  b03371d5  d539d874\n        281fed31\
    \  45fb0a51  1f0ae1ac  6f4d794b\n  Keystream:\n  000  9f 07 e7 be 55 51 38 7a\
    \ 98 ba 97 7c 73 2d 08 0d  ....UQ8z...|s-..\n  016  cb 0f 29 a0 48 e3 65 69 12\
    \ c6 53 3e 32 ee 7a ed  ..).H.ei..S>2.z.\n  032  29 b7 21 76 9c e6 4e 43 d5 71\
    \ 33 b0 74 d8 39 d5  ).!v..NC.q3.t.9.\n  048  31 ed 1f 28 51 0a fb 45 ac e1 0a\
    \ 1f 4b 79 4d 6f  1..(Q..E....KyMo\n  Test Vector #3:\n  ==============\n  Key:\n\
    \  000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  016\
    \  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................\n  Nonce:\n\
    \  000  00 00 00 00 00 00 00 00 00 00 00 00              ............\n  Block\
    \ Counter = 1\n    ChaCha state at the end\n        2452eb3a  9249f8ec  8d829d9b\
    \  ddd4ceb1\n        e8252083  60818b01  f38422b8  5aaa49c9\n        bb00ca8e\
    \  da3ba7b4  c4b592d1  fdf2732f\n        4436274e  2561b3c8  ebdd4aa6  a0136c00\n\
    \  Keystream:\n  000  3a eb 52 24 ec f8 49 92 9b 9d 82 8d b1 ce d4 dd  :.R$..I.........\n\
    \  016  83 20 25 e8 01 8b 81 60 b8 22 84 f3 c9 49 aa 5a  . %....`.\"...I.Z\n \
    \ 032  8e ca 00 bb b4 a7 3b da d1 92 b5 c4 2f 73 f2 fd  ......;...../s..\n  048\
    \  4e 27 36 44 c8 b3 61 25 a6 4a dd eb 00 6c 13 a0  N'6D..a%.J...l..\n  Test Vector\
    \ #4:\n  ==============\n  Key:\n  000  00 ff 00 00 00 00 00 00 00 00 00 00 00\
    \ 00 00 00  ................\n  016  00 00 00 00 00 00 00 00 00 00 00 00 00 00\
    \ 00 00  ................\n  Nonce:\n  000  00 00 00 00 00 00 00 00 00 00 00 00\
    \              ............\n  Block Counter = 2\n    ChaCha state at the end\n\
    \        fb4dd572  4bc42ef1  df922636  327f1394\n        a78dea8f  5e269039  a1bebbc1\
    \  caf09aae\n        a25ab213  48a6b46c  1b9d9bcb  092c5be6\n        546ca624\
    \  1bec45d5  87f47473  96f0992e\n  Keystream:\n  000  72 d5 4d fb f1 2e c4 4b\
    \ 36 26 92 df 94 13 7f 32  r.M....K6&.....2\n  016  8f ea 8d a7 39 90 26 5e c1\
    \ bb be a1 ae 9a f0 ca  ....9.&^........\n  032  13 b2 5a a2 6c b4 a6 48 cb 9b\
    \ 9d 1b e6 5b 2c 09  ..Z.l..H.....[,.\n  048  24 a6 6c 54 d5 45 ec 1b 73 74 f4\
    \ 87 2e 99 f0 96  $.lT.E..st......\n  Test Vector #5:\n  ==============\n  Key:\n\
    \  000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  016\
    \  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  Nonce:\n\
    \  000  00 00 00 00 00 00 00 00 00 00 00 02              ............\n  Block\
    \ Counter = 0\n    ChaCha state at the end\n        374dc6c2  3736d58c  b904e24a\
    \  cd3f93ef\n        88228b1a  96a4dfb3  5b76ab72  c727ee54\n        0e0e978a\
    \  f3145c95  1b748ea8  f786c297\n        99c28f5f  628314e8  398a19fa  6ded1b53\n\
    \  Keystream:\n  000  c2 c6 4d 37 8c d5 36 37 4a e2 04 b9 ef 93 3f cd  ..M7..67J.....?.\n\
    \  016  1a 8b 22 88 b3 df a4 96 72 ab 76 5b 54 ee 27 c7  ..\".....r.v[T.'.\n \
    \ 032  8a 97 0e 0e 95 5c 14 f3 a8 8e 74 1b 97 c2 86 f7  .....\\....t.....\n  048\
    \  5f 8f c2 99 e8 14 83 62 fa 19 8a 39 53 1b ed 6d  _......b...9S..m\n"
- title: A.2.  ChaCha20 Encryption
  contents:
  - "A.2.  ChaCha20 Encryption\n  Test Vector #1:\n  ==============\n  Key:\n  000\
    \  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  016  00\
    \ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  Nonce:\n \
    \ 000  00 00 00 00 00 00 00 00 00 00 00 00              ............\n  Initial\
    \ Block Counter = 0\n  Plaintext:\n  000  00 00 00 00 00 00 00 00 00 00 00 00\
    \ 00 00 00 00  ................\n  016  00 00 00 00 00 00 00 00 00 00 00 00 00\
    \ 00 00 00  ................\n  032  00 00 00 00 00 00 00 00 00 00 00 00 00 00\
    \ 00 00  ................\n  048  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\
    \ 00  ................\n  Ciphertext:\n  000  76 b8 e0 ad a0 f1 3d 90 40 5d 6a\
    \ e5 53 86 bd 28  v.....=.@]j.S..(\n  016  bd d2 19 b8 a0 8d ed 1a a8 36 ef cc\
    \ 8b 77 0d c7  .........6...w..\n  032  da 41 59 7c 51 57 48 8d 77 24 e0 3f b8\
    \ d8 4a 37  .AY|QWH.w$.?..J7\n  048  6a 43 b8 f4 15 18 a1 1c c3 87 b6 69 b2 ee\
    \ 65 86  jC.........i..e.\n  Test Vector #2:\n  ==============\n  Key:\n  000\
    \  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  016  00\
    \ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................\n  Nonce:\n \
    \ 000  00 00 00 00 00 00 00 00 00 00 00 02              ............\n  Initial\
    \ Block Counter = 1\n  Plaintext:\n  000  41 6e 79 20 73 75 62 6d 69 73 73 69\
    \ 6f 6e 20 74  Any submission t\n  016  6f 20 74 68 65 20 49 45 54 46 20 69 6e\
    \ 74 65 6e  o the IETF inten\n  032  64 65 64 20 62 79 20 74 68 65 20 43 6f 6e\
    \ 74 72  ded by the Contr\n  048  69 62 75 74 6f 72 20 66 6f 72 20 70 75 62 6c\
    \ 69  ibutor for publi\n  064  63 61 74 69 6f 6e 20 61 73 20 61 6c 6c 20 6f 72\
    \  cation as all or\n  080  20 70 61 72 74 20 6f 66 20 61 6e 20 49 45 54 46  \
    \ part of an IETF\n  096  20 49 6e 74 65 72 6e 65 74 2d 44 72 61 66 74 20   Internet-Draft\n\
    \  112  6f 72 20 52 46 43 20 61 6e 64 20 61 6e 79 20 73  or RFC and any s\n  128\
    \  74 61 74 65 6d 65 6e 74 20 6d 61 64 65 20 77 69  tatement made wi\n  144  74\
    \ 68 69 6e 20 74 68 65 20 63 6f 6e 74 65 78 74  thin the context\n  160  20 6f\
    \ 66 20 61 6e 20 49 45 54 46 20 61 63 74 69   of an IETF acti\n  176  76 69 74\
    \ 79 20 69 73 20 63 6f 6e 73 69 64 65 72  vity is consider\n  192  65 64 20 61\
    \ 6e 20 22 49 45 54 46 20 43 6f 6e 74  ed an \"IETF Cont\n  208  72 69 62 75 74\
    \ 69 6f 6e 22 2e 20 53 75 63 68 20  ribution\". Such\n  224  73 74 61 74 65 6d\
    \ 65 6e 74 73 20 69 6e 63 6c 75  statements inclu\n  240  64 65 20 6f 72 61 6c\
    \ 20 73 74 61 74 65 6d 65 6e  de oral statemen\n  256  74 73 20 69 6e 20 49 45\
    \ 54 46 20 73 65 73 73 69  ts in IETF sessi\n  272  6f 6e 73 2c 20 61 73 20 77\
    \ 65 6c 6c 20 61 73 20  ons, as well as\n  288  77 72 69 74 74 65 6e 20 61 6e\
    \ 64 20 65 6c 65 63  written and elec\n  304  74 72 6f 6e 69 63 20 63 6f 6d 6d\
    \ 75 6e 69 63 61  tronic communica\n  320  74 69 6f 6e 73 20 6d 61 64 65 20 61\
    \ 74 20 61 6e  tions made at an\n  336  79 20 74 69 6d 65 20 6f 72 20 70 6c 61\
    \ 63 65 2c  y time or place,\n  352  20 77 68 69 63 68 20 61 72 65 20 61 64 64\
    \ 72 65   which are addre\n  368  73 73 65 64 20 74 6f                       \
    \      ssed to\n  Ciphertext:\n  000  a3 fb f0 7d f3 fa 2f de 4f 37 6c a2 3e 82\
    \ 73 70  ...}../.O7l.>.sp\n  016  41 60 5d 9f 4f 4f 57 bd 8c ff 2c 1d 4b 79 55\
    \ ec  A`].OOW...,.KyU.\n  032  2a 97 94 8b d3 72 29 15 c8 f3 d3 37 f7 d3 70 05\
    \  *....r)....7..p.\n  048  0e 9e 96 d6 47 b7 c3 9f 56 e0 31 ca 5e b6 25 0d  ....G...V.1.^.%.\n\
    \  064  40 42 e0 27 85 ec ec fa 4b 4b b5 e8 ea d0 44 0e  @B.'....KK....D.\n  080\
    \  20 b6 e8 db 09 d8 81 a7 c6 13 2f 42 0e 52 79 50   ........./B.RyP\n  096  42\
    \ bd fa 77 73 d8 a9 05 14 47 b3 29 1c e1 41 1c  B..ws....G.)..A.\n  112  68 04\
    \ 65 55 2a a6 c4 05 b7 76 4d 5e 87 be a8 5a  h.eU*....vM^...Z\n  128  d0 0f 84\
    \ 49 ed 8f 72 d0 d6 62 ab 05 26 91 ca 66  ...I..r..b..&..f\n  144  42 4b c8 6d\
    \ 2d f8 0e a4 1f 43 ab f9 37 d3 25 9d  BK.m-....C..7.%.\n  160  c4 b2 d0 df b4\
    \ 8a 6c 91 39 dd d7 f7 69 66 e9 28  ......l.9...if.(\n  176  e6 35 55 3b a7 6c\
    \ 5c 87 9d 7b 35 d4 9e b2 e6 2b  .5U;.l\\..{5....+\n  192  08 71 cd ac 63 89 39\
    \ e2 5e 8a 1e 0e f9 d5 28 0f  .q..c.9.^.....(.\n  208  a8 ca 32 8b 35 1c 3c 76\
    \ 59 89 cb cf 3d aa 8b 6c  ..2.5.<vY...=..l\n  224  cc 3a af 9f 39 79 c9 2b 37\
    \ 20 fc 88 dc 95 ed 84  .:..9y.+7 ......\n  240  a1 be 05 9c 64 99 b9 fd a2 36\
    \ e7 e8 18 b0 4b 0b  ....d....6....K.\n  256  c3 9c 1e 87 6b 19 3b fe 55 69 75\
    \ 3f 88 12 8c c0  ....k.;.Uiu?....\n  272  8a aa 9b 63 d1 a1 6f 80 ef 25 54 d7\
    \ 18 9c 41 1f  ...c..o..%T...A.\n  288  58 69 ca 52 c5 b8 3f a3 6f f2 16 b9 c1\
    \ d3 00 62  Xi.R..?.o......b\n  304  be bc fd 2d c5 bc e0 91 19 34 fd a7 9a 86\
    \ f6 e6  ...-.....4......\n  320  98 ce d7 59 c3 ff 9b 64 77 33 8f 3d a4 f9 cd\
    \ 85  ...Y...dw3.=....\n  336  14 ea 99 82 cc af b3 41 b2 38 4d d9 02 f3 d1 ab\
    \  .......A.8M.....\n  352  7a c6 1d d2 9c 6f 21 ba 5b 86 2f 37 30 e3 7c fd  z....o!.[./70.|.\n\
    \  368  c4 fd 80 6c 22 f2 21                             ...l\".!\n  Test Vector\
    \ #3:\n  ==============\n  Key:\n  000  1c 92 40 a5 eb 55 d3 8a f3 33 88 86 04\
    \ f6 b5 f0  ..@..U...3......\n  016  47 39 17 c1 40 2b 80 09 9d ca 5c bc 20 70\
    \ 75 c0  G9..@+....\\. pu.\n  Nonce:\n  000  00 00 00 00 00 00 00 00 00 00 00\
    \ 02              ............\n  Initial Block Counter = 42\n  Plaintext:\n \
    \ 000  27 54 77 61 73 20 62 72 69 6c 6c 69 67 2c 20 61  'Twas brillig, a\n  016\
    \  6e 64 20 74 68 65 20 73 6c 69 74 68 79 20 74 6f  nd the slithy to\n  032  76\
    \ 65 73 0a 44 69 64 20 67 79 72 65 20 61 6e 64  ves.Did gyre and\n  048  20 67\
    \ 69 6d 62 6c 65 20 69 6e 20 74 68 65 20 77   gimble in the w\n  064  61 62 65\
    \ 3a 0a 41 6c 6c 20 6d 69 6d 73 79 20 77  abe:.All mimsy w\n  080  65 72 65 20\
    \ 74 68 65 20 62 6f 72 6f 67 6f 76 65  ere the borogove\n  096  73 2c 0a 41 6e\
    \ 64 20 74 68 65 20 6d 6f 6d 65 20  s,.And the mome\n  112  72 61 74 68 73 20\
    \ 6f 75 74 67 72 61 62 65 2e     raths outgrabe.\n  Ciphertext:\n  000  62 e6\
    \ 34 7f 95 ed 87 a4 5f fa e7 42 6f 27 a1 df  b.4....._..Bo'..\n  016  5f b6 91\
    \ 10 04 4c 0d 73 11 8e ff a9 5b 01 e5 cf  _....L.s....[...\n  032  16 6d 3d f2\
    \ d7 21 ca f9 b2 1e 5f b1 4c 61 68 71  .m=..!...._.Lahq\n  048  fd 84 c5 4f 9d\
    \ 65 b2 83 19 6c 7f e4 f6 05 53 eb  ...O.e...l....S.\n  064  f3 9c 64 02 c4 22\
    \ 34 e3 2a 35 6b 3e 76 43 12 a6  ..d..\"4.*5k>vC..\n  080  1a 55 32 05 57 16 ea\
    \ d6 96 25 68 f8 7d 3f 3f 77  .U2.W....%h.}??w\n  096  04 c6 a8 d1 bc d1 bf 4d\
    \ 50 d6 15 4b 6d a7 31 b1  .......MP..Km.1.\n  112  87 b5 8d fd 72 8a fa 36 75\
    \ 7a 79 7a c1 88 d1     ....r..6uzyz...\n"
- title: A.3.  Poly1305 Message Authentication Code
  contents:
  - "A.3.  Poly1305 Message Authentication Code\n   Notice how, in test vector #2,\
    \ r is equal to zero.  The part of the\n   Poly1305 algorithm where the accumulator\
    \ is multiplied by r means\n   that with r equal zero, the tag will be equal to\
    \ s regardless of the\n   content of the text.  Fortunately, all the proposed\
    \ methods of\n   generating r are such that getting this particular weak key is\
    \ very\n   unlikely.\n  Test Vector #1:\n  ==============\n  One-time Poly1305\
    \ Key:\n  000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n\
    \  016  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  Text\
    \ to MAC:\n  000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n\
    \  016  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  032\
    \  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  048  00\
    \ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  Tag:\n  000\
    \  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  Test Vector\
    \ #2:\n  ==============\n  One-time Poly1305 Key:\n  000  00 00 00 00 00 00 00\
    \ 00 00 00 00 00 00 00 00 00  ................\n  016  36 e5 f6 b5 c5 e0 60 70\
    \ f0 ef ca 96 22 7a 86 3e  6.....`p....\"z.>\n  Text to MAC:\n  000  41 6e 79\
    \ 20 73 75 62 6d 69 73 73 69 6f 6e 20 74  Any submission t\n  016  6f 20 74 68\
    \ 65 20 49 45 54 46 20 69 6e 74 65 6e  o the IETF inten\n  032  64 65 64 20 62\
    \ 79 20 74 68 65 20 43 6f 6e 74 72  ded by the Contr\n  048  69 62 75 74 6f 72\
    \ 20 66 6f 72 20 70 75 62 6c 69  ibutor for publi\n  064  63 61 74 69 6f 6e 20\
    \ 61 73 20 61 6c 6c 20 6f 72  cation as all or\n  080  20 70 61 72 74 20 6f 66\
    \ 20 61 6e 20 49 45 54 46   part of an IETF\n  096  20 49 6e 74 65 72 6e 65 74\
    \ 2d 44 72 61 66 74 20   Internet-Draft\n  112  6f 72 20 52 46 43 20 61 6e 64\
    \ 20 61 6e 79 20 73  or RFC and any s\n  128  74 61 74 65 6d 65 6e 74 20 6d 61\
    \ 64 65 20 77 69  tatement made wi\n  144  74 68 69 6e 20 74 68 65 20 63 6f 6e\
    \ 74 65 78 74  thin the context\n  160  20 6f 66 20 61 6e 20 49 45 54 46 20 61\
    \ 63 74 69   of an IETF acti\n  176  76 69 74 79 20 69 73 20 63 6f 6e 73 69 64\
    \ 65 72  vity is consider\n  192  65 64 20 61 6e 20 22 49 45 54 46 20 43 6f 6e\
    \ 74  ed an \"IETF Cont\n  208  72 69 62 75 74 69 6f 6e 22 2e 20 53 75 63 68 20\
    \  ribution\". Such\n  224  73 74 61 74 65 6d 65 6e 74 73 20 69 6e 63 6c 75  statements\
    \ inclu\n  240  64 65 20 6f 72 61 6c 20 73 74 61 74 65 6d 65 6e  de oral statemen\n\
    \  256  74 73 20 69 6e 20 49 45 54 46 20 73 65 73 73 69  ts in IETF sessi\n  272\
    \  6f 6e 73 2c 20 61 73 20 77 65 6c 6c 20 61 73 20  ons, as well as\n  288  77\
    \ 72 69 74 74 65 6e 20 61 6e 64 20 65 6c 65 63  written and elec\n  304  74 72\
    \ 6f 6e 69 63 20 63 6f 6d 6d 75 6e 69 63 61  tronic communica\n  320  74 69 6f\
    \ 6e 73 20 6d 61 64 65 20 61 74 20 61 6e  tions made at an\n  336  79 20 74 69\
    \ 6d 65 20 6f 72 20 70 6c 61 63 65 2c  y time or place,\n  352  20 77 68 69 63\
    \ 68 20 61 72 65 20 61 64 64 72 65   which are addre\n  368  73 73 65 64 20 74\
    \ 6f                             ssed to\n  Tag:\n  000  36 e5 f6 b5 c5 e0 60\
    \ 70 f0 ef ca 96 22 7a 86 3e  6.....`p....\"z.>\n  Test Vector #3:\n  ==============\n\
    \  One-time Poly1305 Key:\n  000  36 e5 f6 b5 c5 e0 60 70 f0 ef ca 96 22 7a 86\
    \ 3e  6.....`p....\"z.>\n  016  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\
    \  ................\n  Text to MAC:\n  000  41 6e 79 20 73 75 62 6d 69 73 73 69\
    \ 6f 6e 20 74  Any submission t\n  016  6f 20 74 68 65 20 49 45 54 46 20 69 6e\
    \ 74 65 6e  o the IETF inten\n  032  64 65 64 20 62 79 20 74 68 65 20 43 6f 6e\
    \ 74 72  ded by the Contr\n  048  69 62 75 74 6f 72 20 66 6f 72 20 70 75 62 6c\
    \ 69  ibutor for publi\n  064  63 61 74 69 6f 6e 20 61 73 20 61 6c 6c 20 6f 72\
    \  cation as all or\n  080  20 70 61 72 74 20 6f 66 20 61 6e 20 49 45 54 46  \
    \ part of an IETF\n  096  20 49 6e 74 65 72 6e 65 74 2d 44 72 61 66 74 20   Internet-Draft\n\
    \  112  6f 72 20 52 46 43 20 61 6e 64 20 61 6e 79 20 73  or RFC and any s\n  128\
    \  74 61 74 65 6d 65 6e 74 20 6d 61 64 65 20 77 69  tatement made wi\n  144  74\
    \ 68 69 6e 20 74 68 65 20 63 6f 6e 74 65 78 74  thin the context\n  160  20 6f\
    \ 66 20 61 6e 20 49 45 54 46 20 61 63 74 69   of an IETF acti\n  176  76 69 74\
    \ 79 20 69 73 20 63 6f 6e 73 69 64 65 72  vity is consider\n  192  65 64 20 61\
    \ 6e 20 22 49 45 54 46 20 43 6f 6e 74  ed an \"IETF Cont\n  208  72 69 62 75 74\
    \ 69 6f 6e 22 2e 20 53 75 63 68 20  ribution\". Such\n  224  73 74 61 74 65 6d\
    \ 65 6e 74 73 20 69 6e 63 6c 75  statements inclu\n  240  64 65 20 6f 72 61 6c\
    \ 20 73 74 61 74 65 6d 65 6e  de oral statemen\n  256  74 73 20 69 6e 20 49 45\
    \ 54 46 20 73 65 73 73 69  ts in IETF sessi\n  272  6f 6e 73 2c 20 61 73 20 77\
    \ 65 6c 6c 20 61 73 20  ons, as well as\n  288  77 72 69 74 74 65 6e 20 61 6e\
    \ 64 20 65 6c 65 63  written and elec\n  304  74 72 6f 6e 69 63 20 63 6f 6d 6d\
    \ 75 6e 69 63 61  tronic communica\n  320  74 69 6f 6e 73 20 6d 61 64 65 20 61\
    \ 74 20 61 6e  tions made at an\n  336  79 20 74 69 6d 65 20 6f 72 20 70 6c 61\
    \ 63 65 2c  y time or place,\n  352  20 77 68 69 63 68 20 61 72 65 20 61 64 64\
    \ 72 65   which are addre\n  368  73 73 65 64 20 74 6f                       \
    \      ssed to\n  Tag:\n  000  f3 47 7e 7c d9 54 17 af 89 a6 b8 79 4c 31 0c f0\
    \  .G~|.T.....yL1..\n  Test Vector #4:\n  ==============\n  One-time Poly1305\
    \ Key:\n  000  1c 92 40 a5 eb 55 d3 8a f3 33 88 86 04 f6 b5 f0  ..@..U...3......\n\
    \  016  47 39 17 c1 40 2b 80 09 9d ca 5c bc 20 70 75 c0  G9..@+....\\. pu.\n \
    \ Text to MAC:\n  000  27 54 77 61 73 20 62 72 69 6c 6c 69 67 2c 20 61  'Twas\
    \ brillig, a\n  016  6e 64 20 74 68 65 20 73 6c 69 74 68 79 20 74 6f  nd the slithy\
    \ to\n  032  76 65 73 0a 44 69 64 20 67 79 72 65 20 61 6e 64  ves.Did gyre and\n\
    \  048  20 67 69 6d 62 6c 65 20 69 6e 20 74 68 65 20 77   gimble in the w\n  064\
    \  61 62 65 3a 0a 41 6c 6c 20 6d 69 6d 73 79 20 77  abe:.All mimsy w\n  080  65\
    \ 72 65 20 74 68 65 20 62 6f 72 6f 67 6f 76 65  ere the borogove\n  096  73 2c\
    \ 0a 41 6e 64 20 74 68 65 20 6d 6f 6d 65 20  s,.And the mome\n  112  72 61 74\
    \ 68 73 20 6f 75 74 67 72 61 62 65 2e     raths outgrabe.\n  Tag:\n  000  45 41\
    \ 66 9a 7e aa ee 61 e7 08 dc 7c bc c5 eb 62  EAf.~..a...|...b\n   Test Vector\
    \ #5: If one uses 130-bit partial reduction, does the code\n   handle the case\
    \ where partially reduced final result is not fully\n   reduced?\n   R:\n   02\
    \ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n   S:\n   00 00 00 00 00 00 00\
    \ 00 00 00 00 00 00 00 00 00\n   data:\n   FF FF FF FF FF FF FF FF FF FF FF FF\
    \ FF FF FF FF\n   tag:\n   03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n \
    \  Test Vector #6: What happens if addition of s overflows modulo 2^128?\n   R:\n\
    \   02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n   S:\n   FF FF FF FF FF\
    \ FF FF FF FF FF FF FF FF FF FF FF\n   data:\n   02 00 00 00 00 00 00 00 00 00\
    \ 00 00 00 00 00 00\n   tag:\n   03 00 00 00 00 00 00 00 00 00 00 00 00 00 00\
    \ 00\n   Test Vector #7: What happens if data limb is all ones and there is\n\
    \   carry from lower limb?\n   R:\n   01 00 00 00 00 00 00 00 00 00 00 00 00 00\
    \ 00 00\n   S:\n   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n   data:\n\
    \   FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF\n   F0 FF FF FF FF FF FF FF\
    \ FF FF FF FF FF FF FF FF\n   11 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n\
    \   tag:\n   05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n   Test Vector #8:\
    \ What happens if final result from polynomial part is\n   exactly 2^130-5?\n\
    \   R:\n   01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n   S:\n   00 00 00\
    \ 00 00 00 00 00 00 00 00 00 00 00 00 00\n   data:\n   FF FF FF FF FF FF FF FF\
    \ FF FF FF FF FF FF FF FF\n   FB FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE\n\
    \   01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\n   tag:\n   00 00 00 00 00\
    \ 00 00 00 00 00 00 00 00 00 00 00\n   Test Vector #9: What happens if final result\
    \ from polynomial part is\n   exactly 2^130-6?\n   R:\n   02 00 00 00 00 00 00\
    \ 00 00 00 00 00 00 00 00 00\n   S:\n   00 00 00 00 00 00 00 00 00 00 00 00 00\
    \ 00 00 00\n   data:\n   FD FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF\n   tag:\n\
    \   FA FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF\n   Test Vector #10: What\
    \ happens if 5*H+L-type reduction produces\n   131-bit intermediate result?\n\
    \   R:\n   01 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00\n   S:\n   00 00 00\
    \ 00 00 00 00 00 00 00 00 00 00 00 00 00\n   data:\n   E3 35 94 D7 50 5E 43 B9\
    \ 00 00 00 00 00 00 00 00\n   33 94 D7 50 5E 43 79 CD 01 00 00 00 00 00 00 00\n\
    \   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n   01 00 00 00 00 00 00 00\
    \ 00 00 00 00 00 00 00 00\n   tag:\n   14 00 00 00 00 00 00 00 55 00 00 00 00\
    \ 00 00 00\n   Test Vector #11: What happens if 5*H+L-type reduction produces\n\
    \   131-bit final result?\n   R:\n   01 00 00 00 00 00 00 00 04 00 00 00 00 00\
    \ 00 00\n   S:\n   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n   data:\n\
    \   E3 35 94 D7 50 5E 43 B9 00 00 00 00 00 00 00 00\n   33 94 D7 50 5E 43 79 CD\
    \ 01 00 00 00 00 00 00 00\n   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n\
    \   tag:\n   13 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n"
- title: A.4.  Poly1305 Key Generation Using ChaCha20
  contents:
  - "A.4.  Poly1305 Key Generation Using ChaCha20\n  Test Vector #1:\n  ==============\n\
    \  The key:\n  000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n\
    \  016  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  The\
    \ nonce:\n  000  00 00 00 00 00 00 00 00 00 00 00 00              ............\n\
    \  Poly1305 one-time key:\n  000  76 b8 e0 ad a0 f1 3d 90 40 5d 6a e5 53 86 bd\
    \ 28  v.....=.@]j.S..(\n  016  bd d2 19 b8 a0 8d ed 1a a8 36 ef cc 8b 77 0d c7\
    \  .........6...w..\n  Test Vector #2:\n  ==============\n  The key:\n  000  00\
    \ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  016  00 00\
    \ 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................\n  The nonce:\n\
    \  000  00 00 00 00 00 00 00 00 00 00 00 02              ............\n  Poly1305\
    \ one-time key:\n  000  ec fa 25 4f 84 5f 64 74 73 d3 cb 14 0d a9 e8 76  ..%O._dts......v\n\
    \  016  06 cb 33 06 6c 44 7b 87 bc 26 66 dd e3 fb b7 39  ..3.lD{..&f....9\n  Test\
    \ Vector #3:\n  ==============\n  The key:\n  000  1c 92 40 a5 eb 55 d3 8a f3\
    \ 33 88 86 04 f6 b5 f0  ..@..U...3......\n  016  47 39 17 c1 40 2b 80 09 9d ca\
    \ 5c bc 20 70 75 c0  G9..@+....\\. pu.\n  The nonce:\n  000  00 00 00 00 00 00\
    \ 00 00 00 00 00 02              ............\n  Poly1305 one-time key:\n  000\
    \  96 5e 3b c6 f9 ec 7e d9 56 08 08 f4 d2 29 f9 4b  .^;...~.V....).K\n  016  13\
    \ 7f f2 75 ca 9b 3f cb dd 59 de aa d2 33 10 ae  ...u..?..Y...3..\n"
- title: A.5.  ChaCha20-Poly1305 AEAD Decryption
  contents:
  - "A.5.  ChaCha20-Poly1305 AEAD Decryption\n   Below we see decrypting a message.\
    \  We receive a ciphertext, a nonce,\n   and a tag.  We know the key.  We will\
    \ check the tag and then\n   (assuming that it validates) decrypt the ciphertext.\
    \  In this\n   particular protocol, we'll assume that there is no padding of the\n\
    \   plaintext.\n  The key:\n  000  1c 92 40 a5 eb 55 d3 8a f3 33 88 86 04 f6 b5\
    \ f0  ..@..U...3......\n  016  47 39 17 c1 40 2b 80 09 9d ca 5c bc 20 70 75 c0\
    \  G9..@+....\\. pu.\n  Ciphertext:\n  000  64 a0 86 15 75 86 1a f4 60 f0 62 c7\
    \ 9b e6 43 bd  d...u...`.b...C.\n  016  5e 80 5c fd 34 5c f3 89 f1 08 67 0a c7\
    \ 6c 8c b2  ^.\\.4\\....g..l..\n  032  4c 6c fc 18 75 5d 43 ee a0 9e e9 4e 38\
    \ 2d 26 b0  Ll..u]C....N8-&.\n  048  bd b7 b7 3c 32 1b 01 00 d4 f0 3b 7f 35 58\
    \ 94 cf  ...<2.....;.5X..\n  064  33 2f 83 0e 71 0b 97 ce 98 c8 a8 4a bd 0b 94\
    \ 81  3/..q......J....\n  080  14 ad 17 6e 00 8d 33 bd 60 f9 82 b1 ff 37 c8 55\
    \  ...n..3.`....7.U\n  096  97 97 a0 6e f4 f0 ef 61 c1 86 32 4e 2b 35 06 38  ...n...a..2N+5.8\n\
    \  112  36 06 90 7b 6a 7c 02 b0 f9 f6 15 7b 53 c8 67 e4  6..{j|.....{S.g.\n  128\
    \  b9 16 6c 76 7b 80 4d 46 a5 9b 52 16 cd e7 a4 e9  ..lv{.MF..R.....\n  144  90\
    \ 40 c5 a4 04 33 22 5e e2 82 a1 b0 a0 6c 52 3e  .@...3\"^.....lR>\n  160  af 45\
    \ 34 d7 f8 3f a1 15 5b 00 47 71 8c bc 54 6a  .E4..?..[.Gq..Tj\n  176  0d 07 2b\
    \ 04 b3 56 4e ea 1b 42 22 73 f5 48 27 1a  ..+..VN..B\"s.H'.\n  192  0b b2 31 60\
    \ 53 fa 76 99 19 55 eb d6 31 59 43 4e  ..1`S.v..U..1YCN\n  208  ce bb 4e 46 6d\
    \ ae 5a 10 73 a6 72 76 27 09 7a 10  ..NFm.Z.s.rv'.z.\n  224  49 e6 17 d9 1d 36\
    \ 10 94 fa 68 f0 ff 77 98 71 30  I....6...h..w.q0\n  240  30 5b ea ba 2e da 04\
    \ df 99 7b 71 4d 6c 6f 2c 29  0[.......{qMlo,)\n  256  a6 ad 5c b4 02 2b 02 70\
    \ 9b                       ..\\..+.p.\n  The nonce:\n  000  00 00 00 00 01 02\
    \ 03 04 05 06 07 08              ............\n  The AAD:\n  000  f3 33 88 86\
    \ 00 00 00 00 00 00 4e 91              .3........N.\n  Received Tag:\n  000  ee\
    \ ad 9d 67 89 0c bb 22 39 23 36 fe a1 85 1f 38  ...g...\"9#6....8\n   First, we\
    \ calculate the one-time Poly1305 key\n  @@@  ChaCha state with key setup\n  \
    \      61707865  3320646e  79622d32  6b206574\n        a540921c  8ad355eb  868833f3\
    \  f0b5f604\n        c1173947  09802b40  bc5cca9d  c0757020\n        00000000\
    \  00000000  04030201  08070605\n  @@@  ChaCha state after 20 rounds\n       \
    \ a94af0bd  89dee45c  b64bb195  afec8fa1\n        508f4726  63f554c0  1ea2c0db\
    \  aa721526\n        11b1e514  a0bacc0f  828a6015  d7825481\n        e8a4a850\
    \  d9dcbbd6  4c2de33a  f8ccd912\n  @@@ out bytes:\n  bd:f0:4a:a9:5c:e4:de:89:95:b1:4b:b6:a1:8f:ec:af:\n\
    \  26:47:8f:50:c0:54:f5:63:db:c0:a2:1e:26:15:72:aa\n  Poly1305 one-time key:\n\
    \  000  bd f0 4a a9 5c e4 de 89 95 b1 4b b6 a1 8f ec af  ..J.\\.....K.....\n \
    \ 016  26 47 8f 50 c0 54 f5 63 db c0 a2 1e 26 15 72 aa  &G.P.T.c....&.r.\n   Next,\
    \ we construct the AEAD buffer\n  Poly1305 Input:\n  000  f3 33 88 86 00 00 00\
    \ 00 00 00 4e 91 00 00 00 00  .3........N.....\n  016  64 a0 86 15 75 86 1a f4\
    \ 60 f0 62 c7 9b e6 43 bd  d...u...`.b...C.\n  032  5e 80 5c fd 34 5c f3 89 f1\
    \ 08 67 0a c7 6c 8c b2  ^.\\.4\\....g..l..\n  048  4c 6c fc 18 75 5d 43 ee a0\
    \ 9e e9 4e 38 2d 26 b0  Ll..u]C....N8-&.\n  064  bd b7 b7 3c 32 1b 01 00 d4 f0\
    \ 3b 7f 35 58 94 cf  ...<2.....;.5X..\n  080  33 2f 83 0e 71 0b 97 ce 98 c8 a8\
    \ 4a bd 0b 94 81  3/..q......J....\n  096  14 ad 17 6e 00 8d 33 bd 60 f9 82 b1\
    \ ff 37 c8 55  ...n..3.`....7.U\n  112  97 97 a0 6e f4 f0 ef 61 c1 86 32 4e 2b\
    \ 35 06 38  ...n...a..2N+5.8\n  128  36 06 90 7b 6a 7c 02 b0 f9 f6 15 7b 53 c8\
    \ 67 e4  6..{j|.....{S.g.\n  144  b9 16 6c 76 7b 80 4d 46 a5 9b 52 16 cd e7 a4\
    \ e9  ..lv{.MF..R.....\n  160  90 40 c5 a4 04 33 22 5e e2 82 a1 b0 a0 6c 52 3e\
    \  .@...3\"^.....lR>\n  176  af 45 34 d7 f8 3f a1 15 5b 00 47 71 8c bc 54 6a \
    \ .E4..?..[.Gq..Tj\n  192  0d 07 2b 04 b3 56 4e ea 1b 42 22 73 f5 48 27 1a  ..+..VN..B\"\
    s.H'.\n  208  0b b2 31 60 53 fa 76 99 19 55 eb d6 31 59 43 4e  ..1`S.v..U..1YCN\n\
    \  224  ce bb 4e 46 6d ae 5a 10 73 a6 72 76 27 09 7a 10  ..NFm.Z.s.rv'.z.\n  240\
    \  49 e6 17 d9 1d 36 10 94 fa 68 f0 ff 77 98 71 30  I....6...h..w.q0\n  256  30\
    \ 5b ea ba 2e da 04 df 99 7b 71 4d 6c 6f 2c 29  0[.......{qMlo,)\n  272  a6 ad\
    \ 5c b4 02 2b 02 70 9b 00 00 00 00 00 00 00  ..\\..+.p........\n  288  0c 00 00\
    \ 00 00 00 00 00 09 01 00 00 00 00 00 00  ................\n   We calculate the\
    \ Poly1305 tag and find that it matches\n  Calculated Tag:\n  000  ee ad 9d 67\
    \ 89 0c bb 22 39 23 36 fe a1 85 1f 38  ...g...\"9#6....8\n   Finally, we decrypt\
    \ the ciphertext\n  Plaintext::\n  000  49 6e 74 65 72 6e 65 74 2d 44 72 61 66\
    \ 74 73 20  Internet-Drafts\n  016  61 72 65 20 64 72 61 66 74 20 64 6f 63 75\
    \ 6d 65  are draft docume\n  032  6e 74 73 20 76 61 6c 69 64 20 66 6f 72 20 61\
    \ 20  nts valid for a\n  048  6d 61 78 69 6d 75 6d 20 6f 66 20 73 69 78 20 6d\
    \  maximum of six m\n  064  6f 6e 74 68 73 20 61 6e 64 20 6d 61 79 20 62 65  onths\
    \ and may be\n  080  20 75 70 64 61 74 65 64 2c 20 72 65 70 6c 61 63   updated,\
    \ replac\n  096  65 64 2c 20 6f 72 20 6f 62 73 6f 6c 65 74 65 64  ed, or obsoleted\n\
    \  112  20 62 79 20 6f 74 68 65 72 20 64 6f 63 75 6d 65   by other docume\n  128\
    \  6e 74 73 20 61 74 20 61 6e 79 20 74 69 6d 65 2e  nts at any time.\n  144  20\
    \ 49 74 20 69 73 20 69 6e 61 70 70 72 6f 70 72   It is inappropr\n  160  69 61\
    \ 74 65 20 74 6f 20 75 73 65 20 49 6e 74 65  iate to use Inte\n  176  72 6e 65\
    \ 74 2d 44 72 61 66 74 73 20 61 73 20 72  rnet-Drafts as r\n  192  65 66 65 72\
    \ 65 6e 63 65 20 6d 61 74 65 72 69 61  eference materia\n  208  6c 20 6f 72 20\
    \ 74 6f 20 63 69 74 65 20 74 68 65  l or to cite the\n  224  6d 20 6f 74 68 65\
    \ 72 20 74 68 61 6e 20 61 73 20  m other than as\n  240  2f e2 80 9c 77 6f 72\
    \ 6b 20 69 6e 20 70 72 6f 67  /...work in prog\n  256  72 65 73 73 2e 2f e2 80\
    \ 9d                       ress./...\n"
- title: Appendix B.  Performance Measurements of ChaCha20
  contents:
  - "Appendix B.  Performance Measurements of ChaCha20\n   The following measurements\
    \ were made by Adam Langley for a blog post\n   published on February 27th, 2014.\
    \  The original blog post was\n   available at the time of this writing at\n \
    \  <https://www.imperialviolet.org/2014/02/27/tlssymmetriccrypto.html>.\n    \
    \ +----------------------------+-------------+-------------------+\n     | Chip\
    \                       | AES-128-GCM | ChaCha20-Poly1305 |\n     +----------------------------+-------------+-------------------+\n\
    \     | OMAP 4460                  |  24.1 MB/s  |     75.3 MB/s     |\n     |\
    \ Snapdragon S4 Pro          |  41.5 MB/s  |     130.9 MB/s    |\n     | Sandy\
    \ Bridge Xeon (AES-NI) |   900 MB/s  |      500 MB/s     |\n     +----------------------------+-------------+-------------------+\n\
    \                         Table 1: Speed Comparison\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   ChaCha20 and Poly1305 were invented by Daniel J. Bernstein.\
    \  The AEAD\n   construction and the method of creating the one-time Poly1305\
    \ key\n   were invented by Adam Langley.\n   Thanks to Robert Ransom, Watson Ladd,\
    \ Stefan Buhler, Dan Harkins, and\n   Kenny Paterson for their helpful comments\
    \ and explanations.  Thanks\n   to Niels Moller for suggesting the more efficient\
    \ AEAD construction\n   in this document.  Special thanks to Ilari Liusvaara for\
    \ providing\n   extra test vectors, helpful comments, and for being the first\
    \ to\n   attempt an implementation from this document.  Thanks to Sean\n   Parkinson\
    \ for suggesting improvements to the examples and the\n   pseudocode.  Thanks\
    \ to David Ireland for pointing out a bug in the\n   pseudocode, and to Stephen\
    \ Farrell and Alyssa Rowan for pointing out\n   missing advise in the security\
    \ considerations.\n   Special thanks goes to Gordon Procter for performing a security\n\
    \   analysis of the composition and publishing [Procter].\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Yoav Nir\n   Check Point Software Technologies, Ltd.\n\
    \   5 Hasolelim St.\n   Tel Aviv  6789735\n   Israel\n   EMail: ynir.ietf@gmail.com\n\
    \   Adam Langley\n   Google, Inc.\n   EMail: agl@google.com\n"
