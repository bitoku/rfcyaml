- contents:
  - '                   Rapid Synchronisation of RTP Flows

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This memo outlines how RTP sessions are synchronised, and discusses\n
    \  how rapidly such synchronisation can occur.  We show that most RTP\n   sessions
    can be synchronised immediately, but that the use of video\n   switching multipoint
    conference units (MCUs) or large source-specific\n   multicast (SSM) groups can
    greatly increase the synchronisation\n   delay.  This increase in delay can be
    unacceptable to some\n   applications that use layered and/or multi-description
    codecs.\n   This memo introduces three mechanisms to reduce the synchronisation\n
    \  delay for such sessions.  First, it updates the RTP Control Protocol\n   (RTCP)
    timing rules to reduce the initial synchronisation delay for\n   SSM sessions.
    \ Second, a new feedback packet is defined for use with\n   the extended RTP profile
    for RTCP-based feedback (RTP/AVPF), allowing\n   video switching MCUs to rapidly
    request resynchronisation.  Finally,\n   new RTP header extensions are defined
    to allow rapid synchronisation\n   of late joiners, and guarantee correct timestamp-based
    decoding order\n   recovery for layered codecs in the presence of clock skew.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6051.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Synchronisation of RTP Flows ....................................4\n      2.1.
    Initial Synchronisation Delay ..............................5\n           2.1.1.
    Unicast Sessions ....................................5\n           2.1.2. Source-Specific
    Multicast (SSM) Sessions ............6\n           2.1.3. Any-Source Multicast
    (ASM) Sessions .................7\n           2.1.4. Discussion ..........................................8\n
    \     2.2. Synchronisation for Late Joiners ...........................9\n   3.
    Reducing RTP Synchronisation Delays ............................10\n      3.1.
    Reduced Initial RTCP Interval for SSM Senders .............10\n      3.2. Rapid
    Resynchronisation Request ...........................10\n      3.3. In-Band Delivery
    of Synchronisation Metadata ..............11\n   4. Application to Decoding Order
    Recovery in Layered Codecs .......14\n      4.1. In-Band Synchronisation for Decoding
    Order Recovery .......14\n      4.2. Timestamp-Based Decoding Order Recovery ...................15\n
    \     4.3. Example ...................................................16\n   5.
    Security Considerations ........................................18\n   6. IANA
    Considerations ............................................19\n   7. Acknowledgements
    ...............................................19\n   8. References .....................................................20\n
    \     8.1. Normative References ......................................20\n      8.2.
    Informative References ....................................20\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   When using RTP to deliver multimedia content it's often
    necessary to\n   synchronise playout of audio and video components of a presentation.\n
    \  This is achieved using information contained in RTP Control Protocol\n   (RTCP)
    sender report (SR) packets [RFC3550].  These are sent\n   periodically, and the
    components of a multimedia session cannot be\n   synchronised until sufficient
    RTCP SR packets have been received for\n   each RTP flow to allow the receiver
    to establish mappings between the\n   media clock used for each RTP flow, and
    the common (NTP-format)\n   reference clock used to establish synchronisation.\n
    \  Recently, concern has been expressed that this synchronisation delay\n   is
    problematic for some applications, for example those using layered\n   or multi-description
    video coding.  This memo reviews the operations\n   of RTP synchronisation, and
    describes the synchronisation delay that\n   can be expected.  Three backwards
    compatible extensions to the basic\n   RTP synchronisation mechanism are proposed:\n
    \  o  The RTCP transmission timing rules are relaxed for source-specific\n      multicast
    (SSM) senders, to reduce the initial synchronisation\n      latency for large
    SSM groups.  See Section 3.1.\n   o  An enhancement to the extended RTP profile
    for RTCP-based feedback\n      (RTP/AVPF) [RFC4585] is defined to allow receivers
    to request\n      additional RTCP SR packets, providing the metadata needed to\n
    \     synchronise RTP flows.  This can reduce the synchronisation delay\n      when
    joining sessions with large RTCP reporting intervals, in the\n      presence of
    packet loss, or when video switching MCUs are\n      employed.  See Section 3.2.\n
    \  o  Two RTP header extensions are defined, to deliver synchronisation\n      metadata
    in-band with RTP data packets.  These extensions provide\n      synchronisation
    metadata that is aligned with RTP data packets,\n      and so eliminate the need
    to estimate clock skew between flows\n      before synchronisation.  They can
    also reduce the need to receive\n      RTCP SR packets before flows can be synchronised,
    although it does\n      not eliminate the need for RTCP.  See Section 3.3.\n   The
    immediate use-case for these extensions is to reduce the delay\n   due to synchronisation
    when joining a layered video session (e.g., an\n   H.264/SVC (Scalable Video Coding)
    session in Non-Interleaved\n   Timestamp-based (NI-T) mode [AVT-RTP-SVC]).  The
    extensions are not\n   specific to layered coding, however, and can be used in
    any\n   environment when synchronisation latency is an issue.\n   The key words
    \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",
    \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document
    are to be interpreted as described in RFC 2119 [RFC2119].\n"
  title: 1.  Introduction
- contents:
  - "2.  Synchronisation of RTP Flows\n   RTP flows are synchronised by receivers
    based on information that is\n   contained in RTCP SR packets generated by senders
    (specifically, the\n   NTP-format timestamp and the RTP timestamp).  Synchronisation\n
    \  requires that a common reference clock MUST be used to generate the\n   NTP-format
    timestamps in a set of flows that are to be synchronised\n   (i.e., when synchronising
    several RTP flows, the RTP timestamps for\n   each flow are derived from separate,
    and media specific, clocks, but\n   the NTP-format timestamps in the RTCP SR packets
    of all flows to be\n   synchronised MUST be sampled from the same clock).  To
    achieve faster\n   and more accurate synchronisation, it is further RECOMMENDED
    that\n   senders and receivers use a synchronised common NTP-format reference\n
    \  clock with common properties, especially timebase, where possible\n   (recognising
    that this is often not possible when RTP is used outside\n   of controlled environments);
    the means by which that common reference\n   clock and its properties are signalled
    and distributed is outside the\n   scope of this memo.\n   For multimedia sessions,
    each type of media (e.g., audio or video) is\n   sent in a separate RTP session,
    and the receiver associates RTP flows\n   to be synchronised by means of the canonical
    end-point identifier\n   (CNAME) item included in the RTCP Source Description
    (SDES) packets\n   generated by the sender or signalled out of band [RFC5576].
    \ For\n   layered media, different layers can be sent in different RTP\n   sessions,
    or using different synchronisation source (SSRC) values\n   within a single RTP
    session; in both cases, the CNAME is used to\n   identify flows to be synchronised.
    \ To ensure synchronisation, an RTP\n   sender MUST therefore send periodic compound
    RTCP packets following\n   Section 6 of RFC 3550 [RFC3550].\n   The timing of
    these periodic compound RTCP packets will depend on the\n   number of members
    in each RTP session, the fraction of those that are\n   sending data, the session
    bandwidth, the configured RTCP bandwidth\n   fraction, and whether the session
    is multicast or unicast (see\n   RFC 3550, Section 6.2 for details).  In summary,
    RTCP control traffic\n   is allocated a small fraction, generally 5%, of the session\n
    \  bandwidth, and of that fraction, one quarter is allocated to active\n   RTP
    senders, while receivers use the remaining three quarters (these\n   fractions
    can be configured via the Session Description Protocol\n   (SDP) [RFC3556]).  Each
    member of an RTP session derives an RTCP\n   reporting interval based on these
    fractions, whether the session is\n   multicast or unicast, the number of members
    it has observed, and\n   whether it is actively sending data or not.  It then
    sends a compound\n   RTCP packet on average once per reporting interval (the actual
    packet\n   transmission time is randomised in the range [0.5 ... 1.5] times the\n
    \  reporting interval to avoid synchronisation of reports).\n   A minimum reporting
    interval of 5 seconds is RECOMMENDED, except that\n   the delay before sending
    the initial report \"MAY be set to half the\n   minimum interval to allow quicker
    notification that the new\n   participant is present\" [RFC3550].  Also, for unicast
    sessions, \"the\n   delay before sending the initial compound RTCP packet MAY
    be zero\"\n   [RFC3550].  In addition, for unicast sessions, and for active senders\n
    \  in a multicast session, the fixed minimum reporting interval MAY be\n   scaled
    to \"360 divided by the session bandwidth in kilobits/second.\n   This minimum
    is smaller than 5 seconds for bandwidths greater than\n   72 kb/s\" [RFC3550].\n"
  - contents:
    - "2.1.  Initial Synchronisation Delay\n   A multimedia session comprises a set
      of concurrent RTP sessions among\n   a common group of participants, using one
      RTP session for each media\n   type.  For example, a videoconference (which
      is a multimedia session)\n   might contain an audio RTP session and a video
      RTP session.  To allow\n   a receiver to synchronise the components of a multimedia
      session, a\n   compound RTCP packet containing an RTCP SR packet and an RTCP
      SDES\n   packet with a CNAME item MUST be sent to each of the RTP sessions in\n
      \  the multimedia session by each sender.  A receiver cannot synchronise\n   playout
      across the multimedia session until such RTCP packets have\n   been received
      on all of the component RTP sessions.  If there is no\n   packet loss, this
      gives an expected initial synchronisation delay\n   equal to the average time
      taken to receive the first RTCP packet in\n   the RTP session with the longest
      RTCP reporting interval.  This will\n   vary between unicast and multicast RTP
      sessions.\n   The initial synchronisation delay for layered sessions is similar
      to\n   that for multimedia sessions.  The layers cannot be synchronised\n   until
      the RTCP SR and CNAME information has been received for each\n   layer in the
      session.\n"
    - contents:
      - "2.1.1.  Unicast Sessions\n   For unicast multimedia or layered sessions,
        senders SHOULD transmit\n   an initial compound RTCP packet (containing an
        RTCP SR packet and an\n   RTCP SDES packet with a CNAME item) immediately
        on joining each RTP\n   session in the multimedia session.  The individual
        RTP sessions are\n   considered to be joined once any in-band signalling for
        NAT traversal\n   (e.g., [RFC5245]) and/or security keying (e.g., [RFC5764],
        [ZRTP])\n   has concluded, and the media path is open.  This implies that
        the\n   initial RTCP packet is sent in parallel with the first data packet\n
        \  following the guidance in RFC 3550 that \"the delay before sending the\n
        \  initial compound RTCP packet MAY be zero\" and, in the absence of any\n
        \  packet loss, flows can be synchronised immediately.\n   It is expected
        that NAT pinholes, firewall holes, quality-of-service,\n   and media security
        keys will have been negotiated as part of the\n   signalling, whether in-band
        or out-of-band, before the first RTCP\n   packet is sent.  This should ensure
        that any middleboxes are ready to\n   accept traffic, and reduce the likelihood
        that the initial RTCP\n   packet will be lost.\n"
      title: 2.1.1.  Unicast Sessions
    - contents:
      - "2.1.2.  Source-Specific Multicast (SSM) Sessions\n   For multicast sessions,
        the delay before sending the initial RTCP\n   packet, and hence the synchronisation
        delay, varies with the session\n   bandwidth and the number of members in
        the session.  For a multicast\n   multimedia or layered session, the average
        synchronisation delay will\n   depend on the slowest of the component RTP
        sessions; this will\n   generally be the session with the lowest bandwidth
        (assuming all the\n   RTP sessions have the same number of members).\n   When
        sending to a multicast group, the reduced minimum RTCP reporting\n   interval
        of 360 seconds divided by the session bandwidth in kilobits\n   per second
        [RFC3550] should be used when synchronisation latency is\n   likely to be
        an issue.  Also, as usual, the reporting interval is\n   halved for the first
        RTCP packet.  Depending on the session bandwidth\n   and the number of members,
        this gives the average synchronisation\n   delays shown in Figure 1.\n        Session|
        Number of receivers:\n      Bandwidth|  2     3     4     5     10   100   1000
        \ 10000\n             --+------------------------------------------------\n
        \        8 kbps| 2.73  4.10  5.47  5.47  5.47  5.47  5.47  5.47\n        16
        kbps| 2.50  2.50  2.73  2.73  2.73  2.73  2.73  2.73\n        32 kbps| 2.50
        \ 2.50  2.50  2.50  2.50  2.50  2.50  2.50\n        64 kbps| 2.50  2.50  2.50
        \ 2.50  2.50  2.50  2.50  2.50\n       128 kbps| 1.41  1.41  1.41  1.41  1.41
        \ 1.41  1.41  1.41\n       256 kbps| 0.70  0.70  0.70  0.70  0.70  0.70  0.70
        \ 0.70\n       512 kbps| 0.35  0.35  0.35  0.35  0.35  0.35  0.35  0.35\n
        \        1 Mbps| 0.18  0.18  0.18  0.18  0.18  0.18  0.18  0.18\n         2
        Mbps| 0.09  0.09  0.09  0.09  0.09  0.09  0.09  0.09\n         4 Mbps| 0.04
        \ 0.04  0.04  0.04  0.04  0.04  0.04  0.04\n        Figure 1: Average Initial
        Synchronisation Delay in Seconds\n                     for an RTP Session
        with 1 Sender\n   These numbers assume a source-specific multicast channel
        with a\n   single active sender, assuming an average RTCP packet size of\n
        \  70 octets.  These intervals are sufficient for lip-synchronisation\n   without
        excessive delay, but might be viewed as having too much\n   latency for synchronising
        parts of a layered video stream.\n   The RTCP interval is randomised in the
        usual manner, so the minimum\n   synchronisation delay will be half these
        intervals, and the maximum\n   delay will be 1.5 times these intervals.  Note
        also that these RTCP\n   intervals are calculated assuming perfect knowledge
        of the number of\n   members in the session.\n"
      title: 2.1.2.  Source-Specific Multicast (SSM) Sessions
    - contents:
      - "2.1.3.  Any-Source Multicast (ASM) Sessions\n   For ASM sessions, the fraction
        of members that are senders plays an\n   important role, and causes more variation
        in average RTCP reporting\n   interval.  This is illustrated in Figure 2 and
        Figure 3, which show\n   the RTCP reporting interval for the same session
        bandwidths and\n   receiver populations as the SSM session described in Figure
        1, but\n   for sessions with 2 and 10 senders, respectively.  It can be seen\n
        \  that the initial synchronisation delay scales with the number of\n   senders
        (this is to ensure that the total RTCP traffic from all group\n   members
        does not grow without bound) and can be significantly larger\n   than for
        source-specific groups.  Despite this, the initial\n   synchronisation time
        remains acceptable for lip-synchronisation in\n   typical small-to-medium
        sized group video conferencing scenarios.\n   Note that multi-sender groups
        implemented using multi-unicast with a\n   central RTP translator (Topo-Translator
        in the terminology of\n   [RFC5117]) or mixer (Topo-Mixer), or some forms
        of video switching\n   MCU (Topo-Video-switch-MCU) distribute RTCP packets
        to all members of\n   the group, and so scale in the same way as an ASM group
        with regards\n   to initial synchronisation latency.\n        Session| Number
        of receivers:\n      Bandwidth|  2     3     4     5     10   100   1000  10000\n
        \            --+------------------------------------------------\n         8
        kbps| 2.73  4.10  5.47  6.84 10.94 10.94 10.94 10.94\n        16 kbps| 2.50
        \ 2.50  2.73  3.42  5.47  5.47  5.47  5.47\n        32 kbps| 2.50  2.50  2.50
        \ 2.50  2.73  2.73  2.73  2.73\n        64 kbps| 2.50  2.50  2.50  2.50  2.50
        \ 2.50  2.50  2.50\n       128 kbps| 1.41  1.41  1.41  1.41  1.41  1.41  1.41
        \ 1.41\n       256 kbps| 0.70  0.70  0.70  0.70  0.70  0.70  0.70  0.70\n
        \      512 kbps| 0.35  0.35  0.35  0.35  0.35  0.35  0.35  0.35\n         1
        Mbps| 0.18  0.18  0.18  0.18  0.18  0.18  0.18  0.18\n         2 Mbps| 0.09
        \ 0.09  0.09  0.09  0.09  0.09  0.09  0.09\n         4 Mbps| 0.04  0.04  0.04
        \ 0.04  0.04  0.04  0.04  0.04\n        Figure 2: Average Initial Synchronisation
        Delay in Seconds\n                     for an RTP Session with 2 Senders\n
        \       Session| Number of receivers:\n      Bandwidth|  2     3     4     5
        \    10   100   1000  10000\n             --+------------------------------------------------\n
        \        8 kbps| 2.73  4.10  5.47  6.84 13.67 54.69 54.69 54.69\n        16
        kbps| 2.50  2.50  2.73  3.42  6.84 27.34 27.34 27.34\n        32 kbps| 2.50
        \ 2.50  2.50  2.50  3.42 13.67 13.67 13.67\n        64 kbps| 2.50  2.50  2.50
        \ 2.50  2.50  6.84  6.84  6.84\n       128 kbps| 1.41  1.41  1.41  1.41  1.41
        \ 3.42  3.42  3.42\n       256 kbps| 0.70  0.70  0.70  0.70  0.70  1.71  1.71
        \ 1.71\n       512 kbps| 0.35  0.35  0.35  0.35  0.35  0.85  0.85  0.85\n
        \        1 Mbps| 0.18  0.18  0.18  0.18  0.18  0.43  0.43  0.43\n         2
        Mbps| 0.09  0.09  0.09  0.09  0.09  0.21  0.21  0.21\n         4 Mbps| 0.04
        \ 0.04  0.04  0.04  0.04  0.11  0.11  0.11\n        Figure 3: Average Initial
        Synchronisation Delay in Seconds\n                    for an RTP Session with
        10 Senders\n"
      title: 2.1.3.  Any-Source Multicast (ASM) Sessions
    - contents:
      - "2.1.4.  Discussion\n   For unicast sessions, the existing RTCP SR-based mechanism
        allows for\n   immediate synchronisation, provided the initial RTCP packet
        is not\n   lost.\n   For SSM sessions, the initial synchronisation delay is
        sufficient for\n   lip-synchronisation, but may be larger than desired for
        some layered\n   codecs.  The rationale for not sending immediate RTCP packets
        for\n   multicast groups is to avoid implosion of requests when large numbers\n
        \  of members simultaneously join the group (\"flash crowd\").  This is\n
        \  not an issue for SSM senders, since there can be at most one sender,\n
        \  so it is desirable to allow SSM senders to send an immediate RTCP SR\n
        \  on joining a session (as is currently allowed for unicast sessions,\n   which
        also don't suffer from the implosion problem).  SSM receivers\n   using unicast
        feedback would not be allowed to send immediate RTCP.\n   For ASM sessions,
        implosion of responses is a concern, so no change\n   is proposed to the RTCP
        timing rules.\n   In all cases, it is possible that the initial RTCP SR packet
        is lost.\n   In this case, the receiver will not be able to synchronise the
        media\n   until the reporting interval has passed, and the next RTCP SR packet\n
        \  is sent.  This is undesirable.  Section 3.2 defines a new RTP/AVPF\n   transport
        layer feedback message to request that an RTCP SR be\n   generated, allowing
        rapid resynchronisation in the case of packet\n   loss.\n"
      title: 2.1.4.  Discussion
    title: 2.1.  Initial Synchronisation Delay
  - contents:
    - "2.2.  Synchronisation for Late Joiners\n   Synchronisation between RTP sessions
      is potentially slower for late\n   joiners than for participants present at
      the start of the session.\n   The reasons for this are three-fold:\n   1. Many
      of the optimisations that allow rapid transmission of RTCP SR\n      packets
      apply only at the start of a session.  This implies that a\n      new participant
      may have to wait a complete RTCP reporting\n      interval for each session
      before receiving the necessary data to\n      synchronise media streams.  This
      might potentially take several\n      seconds, depending on the configured session
      bandwidth and the\n      number of participants.\n   2. Additional synchronisation
      delay comes from the nature of the RTCP\n      timing rules.  Packets are generated
      on average once per reporting\n      interval, but with the exact transmission
      times being randomised\n      +/- 50% to avoid synchronisation of reports.  This
      is important to\n      avoid network congestion in multicast sessions, but does
      mean that\n      the timing of RTCP sender reports for different RTP sessions
      isn't\n      synchronised.  Accordingly, a receiver must estimate the skew on\n
      \     the NTP-format clock in order to align RTP timestamps across\n      sessions.
      \ This estimation is an essential part of an RTP\n      synchronisation implementation,
      and can be done with high accuracy\n      given sufficient reports.  Collecting
      sufficient RTCP SR data to\n      perform this estimation, however, may require
      reception of several\n      RTCP reports, further increasing the synchronisation
      delay.\n   3. Many media codecs have the notion of periodic access points, such\n
      \     that a newly joined receiver often cannot start decoding a media\n      stream
      until the packets corresponding to the access point have\n      been received.
      \ These access points may be sent less often than\n      RTCP SR packets, and
      so may be the limiting factor in starting\n      synchronised media playout
      for late joiners.  The RTP extension\n      for unicast-based rapid acquisition
      of multicast RTP sessions\n      [AVT-ACQUISITION-RTP] may be used to reduce
      the time taken to\n      receive the access points in some scenarios.\n   These
      delays are likely an issue for tuning in to an ongoing\n   multicast RTP session,
      or for video switching MCUs.\n"
    title: 2.2.  Synchronisation for Late Joiners
  title: 2.  Synchronisation of RTP Flows
- contents:
  - "3.  Reducing RTP Synchronisation Delays\n   Three backwards compatible RTP extensions
    are defined to reduce the\n   possible synchronisation delay: a reduced initial
    RTCP interval for\n   SSM senders, a rapid resynchronisation request message,
    and RTP\n   header extensions that can convey synchronisation metadata in-band.\n"
  - contents:
    - "3.1.  Reduced Initial RTCP Interval for SSM Senders\n   In SSM sessions where
      the initial synchronisation delay is important,\n   the RTP sender MAY set the
      delay before sending the initial compound\n   RTCP packet to zero, and send
      its first RTCP packet immediately upon\n   joining the SSM session.  This is
      purely a local change to the sender\n   that can be implemented as a configurable
      option.  RTP receivers in\n   an SSM session, sending unicast RTCP feedback,
      MUST NOT send RTCP\n   packets with zero initial delay; the timing rules defined
      in\n   [RFC5760] apply unchanged to receivers.\n"
    title: 3.1.  Reduced Initial RTCP Interval for SSM Senders
  - contents:
    - "3.2.  Rapid Resynchronisation Request\n   The general format of an RTP/AVPF
      transport layer feedback message is\n   shown in Figure 4 (see [RFC4585] for
      details).\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |V=2|P|   FMT   | PT=RTPFB=205  |          length               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                  SSRC of packet sender                        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                  SSRC of media source                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    :            Feedback Control Information (FCI)                 :\n     :
      \                                                              :\n            Figure
      4: RTP/AVPF Transport Layer Feedback Message\n   One new feedback message type,
      RTCP-SR-REQ, is defined with FMT = 5.\n   The Feedback Control Information (FCI)
      part of the feedback message\n   MUST be empty.  The SSRC of the packet sender
      indicates the member\n   that is unable to synchronise media streams, while
      the SSRC of the\n   media source indicates the sender of the media it is unable
      to\n   synchronise.  The length MUST equal 2.\n   If the RTP/AVPF profile [RFC4585]
      is in use, this feedback message\n   MAY be sent by a receiver to indicate that
      it's unable to synchronise\n   some media streams, and desires that the media
      source transmit an\n   RTCP SR packet as soon as possible (within the constraints
      of the\n   RTCP timing rules for early feedback).  When it receives such an\n
      \  indication, a media source that understands the RTCP-SR-REQ packet\n   SHOULD
      generate an RTCP SR packet as soon as possible while complying\n   with the
      RTCP early feedback rules.  If the use of non-compound RTCP\n   [RFC5506] was
      previously negotiated, both the feedback request and\n   the RTCP SR response
      may be sent as non-compound RTCP packets.  The\n   RTCP-SR-REQ packet MAY be
      repeated once per RTCP reporting interval\n   if no RTCP SR packet is forthcoming.
      \ The media source may ignore\n   RTCP-SR-REQ packets if its regular schedule
      for transmission of\n   synchronisation metadata can be expected to allow the
      receiver to\n   synchronise the media streams within a reasonable time frame.\n
      \  When using SSM sessions with unicast feedback, it is possible that\n   the
      feedback target and media source are not co-located.  If a\n   feedback target
      receives an RTCP-SR-REQ feedback message in such a\n   case, the request should
      be forwarded to the media source.  The\n   mechanism to be used for forwarding
      such requests is not defined\n   here.\n   If the feedback target provides a
      network management interface, it\n   might be useful to provide a log of which
      receivers send RTCP-SR-REQ\n   feedback packets and which do not, since those
      that do not will see\n   slower stream synchronisation.\n"
    title: 3.2.  Rapid Resynchronisation Request
  - contents:
    - "3.3.  In-Band Delivery of Synchronisation Metadata\n   The RTP header extension
      mechanism defined in [RFC5285] can be\n   adapted to carry an OPTIONAL NTP-format
      timestamp in RTP data\n   packets.  If such a timestamp is included, it MUST
      correspond to the\n   same time instant as the RTP timestamp in the packet's
      header, and\n   MUST be derived from the same clock used to generate the NTP-format\n
      \  timestamps included in RTCP SR packets.  Provided it has knowledge of\n   the
      SSRC to CNAME mapping, either from prior receipt of an RTCP CNAME\n   packet
      or via out-of-band signalling [RFC5576], the receiver can use\n   the information
      provided as input to the synchronisation algorithm,\n   in exactly the same
      way as if an additional RTCP SR packet had been\n   received for the flow.\n
      \  Two variants are defined for this header extension.  The first\n   variant
      extends the RTP header with a 64-bit NTP-format timestamp as\n   defined in
      [RFC5905].  The second variant carries the lower 24-bit\n   part of the Seconds
      of a NTP-format timestamp and the 32 bits of the\n   Fraction of a NTP-format
      timestamp.  The formats of the two variants\n   are shown in Figure 5 and Figure
      6.\n      0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |V=2|P|1|  CC   |M|     PT      |       sequence number         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+R\n
      \    |                           timestamp                           |T\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+P\n
      \    |           synchronisation source (SSRC) identifier            |\n     +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
      \    |       0xBE    |    0xDE       |           length=3            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+E\n
      \    |  ID-A | L=7   |   NTP timestamp format - Seconds (bit 0-23)   |x\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+t\n
      \    |NTP Sec.(24-31)|   NTP timestamp format - Fraction (bit 0-23)  |n\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |NTP Frc.(24-31)|    0 (pad)    |    0 (pad)    |    0 (pad)    |\n     +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
      \    |                         payload data                          |\n     |
      \                            ....                              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           Figure 5: Variant A/64-Bit NTP RTP Header Extension\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |V=2|P|1|  CC   |M|     PT      |       sequence number         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+R\n
      \    |                           timestamp                           |T\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+P\n
      \    |           synchronisation source (SSRC) identifier            |\n     +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
      \    |       0xBE    |    0xDE       |           length=2            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+E\n
      \    |  ID-B | L=6   |  NTP timestamp format - Seconds (bit 8-31)    |x\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+t\n
      \    |           NTP timestamp format - Fraction (bit 0-31)          |n\n     +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
      \    |                         payload data                          |\n     |
      \                            ....                              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           Figure 6: Variant B/56-Bit NTP RTP Header Extension\n   An NTP-format
      timestamp MAY be included in any RTP packets the sender\n   chooses, but it
      is RECOMMENDED when performing timestamp-based\n   decoding order recovery for
      layered codecs transported in multiple\n   RTP flows, as further specified in
      Section 4.1.  This header\n   extension SHOULD be also sent in the RTP packets
      corresponding to a\n   video random access point, and in the associated audio
      packets, to\n   allow rapid synchronisation for late joiners in multimedia sessions,\n
      \  and in video switching scenarios.\n      Note: The inclusion of an RTP header
      extension will reduce the\n      efficiency of RTP header compression, if it
      is used.  Furthermore,\n      middleboxes that do not understand the header
      extensions may\n      remove them or may not update the content according to
      this memo.\n   In all cases, irrespective of whether in-band NTP-format timestamps\n
      \  are included or not, regular RTCP SR packets MUST be sent to provide\n   backwards
      compatibility with receivers that synchronise RTP flows\n   according to [RFC3550],
      and robustness in the face of middleboxes\n   (RTP translators) that might strip
      RTP header extensions.  If the\n   Variant B/56-bit NTP RTP header extension
      is used, RTCP sender\n   reports MUST be used to derive the upper 8 bits of
      the Seconds for\n   the NTP-format timestamp.\n   When SDP is used, the use
      of the RTP header extensions defined above\n   MUST be indicated as specified
      in [RFC5285].  Therefore, the\n   following URIs MUST be used:\n   o  The URI
      used for signalling the use of Variant A/64-bit NTP RTP\n      header extension
      in SDP is \"urn:ietf:params:rtp-hdrext:ntp-64\".\n   o  The URI used for signalling
      the use of Variant B/56-bit NTP RTP\n      header extension in SDP is \"urn:ietf:params:rtp-hdrext:ntp-56\".\n
      \  The use of these RTP header extensions can greatly improve the user\n   experience
      in IPTV channel surfing and in some interactive video\n   conferencing scenarios.
      \ Network management tools that attempt to\n   monitor the user experience may
      wish to log which sessions signal and\n   use these extensions.\n"
    title: 3.3.  In-Band Delivery of Synchronisation Metadata
  title: 3.  Reducing RTP Synchronisation Delays
- contents:
  - "4.  Application to Decoding Order Recovery in Layered Codecs\n   Packets in RTP
    flows are often predictively coded, with a receiver\n   having to arrange the
    packets into a particular order before it can\n   decode the media data.  Depending
    on the payload format, the decoding\n   order might be explicitly specified as
    a field in the RTP payload\n   header, or the receiver might decode the packets
    in order of their\n   RTP timestamps.  If a layered encoding is used, where the
    media data\n   is split across several RTP flows, then it is often necessary to\n
    \  exactly synchronise the RTP flows comprising the different layers\n   before
    layers other than the base layer can be decoded.  Examples of\n   such layered
    encodings are H.264 SVC in NI-T mode [AVT-RTP-SVC] and\n   MPEG surround multi-channel
    audio [RFC5691].  As described in\n   Section 2, such synchronisation is possible
    in RTP, but can be\n   difficult to perform rapidly.  Below, we describe how the
    extensions\n   defined in Section 3.3 can be used to synchronise layered flows,
    and\n   provide a common timestamp-based decoding order.\n"
  - contents:
    - "4.1.  In-Band Synchronisation for Decoding Order Recovery\n   When a layered,
      multi-description, or multi-view codec is used, with\n   the different components
      of the media being transferred on separate\n   RTP flows, the RTP sender SHOULD
      use periodic synchronous in-band\n   delivery of synchronisation metadata to
      allow receivers to rapidly\n   and accurately synchronise the separate components
      of the layered\n   media flow.  There are three parts to this:\n   o  The sender
      must negotiate the use of the RTP header extensions\n      described in Section
      3.3, and must periodically and synchronously\n      insert such header extensions
      into all the RTP flows forming the\n      separate components of the layered,
      multi-description, or multi-\n      view flow.\n   o  Synchronous insertion
      requires that the sender insert these RTP\n      header extensions into packets
      corresponding to exactly the same\n      sampling instant in all the flows.
      \ Since the header extensions\n      for each flow are inserted at exactly the
      same sampling instant,\n      they will have identical NTP-format timestamps,
      hence allowing\n      receivers to exactly align the RTP timestamps for the
      component\n      flows.  This may require the insertion of extra data packets
      into\n      some of the component RTP flows, if some component flows contain\n
      \     packets for sampling instants that do not exist in other flows\n      (for
      example, a layered video codec, where the layers have\n      differing frame
      rates).\n   o  The frequency with which the sender inserts the header extensions\n
      \     will directly correspond to the synchronisation latency, with more\n      frequent
      insertion leading to higher per-flow overheads, but lower\n      synchronisation
      latency.  It is RECOMMENDED that the sender insert\n      the header extensions
      synchronously into all component RTP flows\n      at least once per random access
      point of the media, but they MAY\n      be inserted more often.\n   The sender
      MUST continue to send periodic RTCP reports including SR\n   packets, and MUST
      ensure the RTP timestamp to NTP-format timestamp\n   mapping in the RTCP SR
      packets is consistent with that used in the\n   RTP header extensions.  Receivers
      should use both the information\n   contained in RTCP SR packets and the in-band
      mapping of RTP and NTP-\n   format timestamps as input to the synchronisation
      process, but it is\n   RECOMMENDED that receivers sanity check the mappings
      received and\n   discard outliers, to provide robustness against invalid data
      (one\n   might think it more likely that the RTCP SR mappings are invalid,\n
      \  since they are sent at irregular times and subject to skew, but the\n   presence
      of broken RTP translators could also corrupt the timestamps\n   in the RTP header
      extension; receivers need to cope with both types\n   of failure).\n"
    title: 4.1.  In-Band Synchronisation for Decoding Order Recovery
  - contents:
    - "4.2.  Timestamp-Based Decoding Order Recovery\n   Once a receiver has synchronised
      the components of a layered, multi-\n   description, or multi-view flow using
      the RTP header extensions as\n   described in Section 4.1, it may then derive
      a decoding order based\n   on the synchronised timestamps as follows (or it
      may use information\n   in the RTP payload header to derive the decoding order,
      if present\n   and desired).\n   There may be explicit dependencies between
      the component flows of a\n   layered, multi-description, or multi-view flow.
      \ For example, it is\n   common for layered flows to be arranged in a hierarchy,
      where flows\n   from \"higher\" layers cannot be decoded until the corresponding
      data\n   in \"lower\" layer flows has been received and decoded.  If such a\n
      \  decoding hierarchy exists, it MUST be signalled out of band, for\n   example
      using [RFC5583] when SDP signalling is used.\n   Each component RTP flow MUST
      contain packets corresponding to all the\n   sampling instants of the RTP flows
      on which it depends.  If such\n   packets are not naturally present in the RTP
      flow, the sender MUST\n   generate additional packets as necessary in order
      to satisfy this\n   rule.  The format of these packets depends on the payload
      format\n   used.  For H.264 SVC, the Empty Network Abstraction Layer (NAL) unit\n
      \  packet [AVT-RTP-SVC] should be used.  Flows may also include packets\n   corresponding
      to additional sampling instants that are not present in\n   the flows on which
      they depend.\n   The receiver should decode the packets in all the component
      RTP flows\n   as follows:\n   o  For each RTP packet in each flow, use the mapping
      contained in the\n      RTP header extensions and RTCP SR packets to derive
      the NTP-format\n      timestamp corresponding to its RTP timestamp.\n   o  Group
      together RTP data packets from all component flows that have\n      identical
      calculated NTP-format timestamps.\n   o  Processing groups in order of ascending
      NTP-format timestamps,\n      decode the RTP packets in each group according
      to the signalled\n      RTP flow decoding hierarchy.  That is, pass the RTP
      packet data\n      from the flow on which all other flows depend to the decoder\n
      \     first, then that from the next dependent flow, and so on.  The\n      decoding
      order of the RTP flow hierarchy may be indicated by\n      mechanisms defined
      in [RFC5583] or by some other means.\n   Note that the decoding order will not
      necessarily match the packet\n   transmission order.  The receiver will need
      to buffer packets for a\n   codec-dependent amount of time in order for all
      necessary packets to\n   arrive to allow decoding.\n"
    title: 4.2.  Timestamp-Based Decoding Order Recovery
  - contents:
    - "4.3.  Example\n   The example shown in Figure 7 refers to three RTP flows A,
      B, and C,\n   containing a layered, a multi-view, or a multi-description media\n
      \  stream.  In the example, the dependency signalling as defined in\n   [RFC5583]
      indicates that flow A is the lowest RTP flow.  Flow B is\n   the next higher
      RTP flow and depends on A.  Flow C is the highest of\n   the three RTP flows
      and depends on both A and B.  A media coding\n   structure is used that results
      in video access units (i.e., coded\n   video frames) present in higher flows
      but not present in all lower\n   flows.  Flow A has the lowest frame rate.  Flows
      B and C have the\n   same frame rate, which is higher than that of Flow A.  The
      figure\n   shows the full video access units with their corresponding RTP\n
      \  timestamps \"(x)\".  The video access units are already re-ordered\n   according
      to their RTP sequence number order.  The figure indicates\n   the received video
      access unit part in decoding order within each RTP\n   flow, as well as the
      associated NTP media timestamps (\"TS[..]\").  As\n   shown in the figure, these
      timestamps may be derived using the\n   NTP-format timestamp provided in the
      RTCP sender reports as indicated\n   by the timestamp in \"{x}\", or derived
      directly from the NTP timestamp\n   contained in the RTP header extensions as
      indicated by the timestamp\n   in \"<x>\".  Note that the timestamps are not
      in increasing order\n   since, in this example, the decoding order is different
      from the\n   output/presentation order.\n   The decoding order recovery process
      first advances to the video\n   access unit parts associated with the first
      available synchronous\n   insertion of the NTP timestamp into RTP header extensions
      at NTP\n   media timestamp TS=[8].  The receiver starts in the highest RTP\n
      \  flow C and removes/ignores all preceding video access unit parts (in\n   decoding
      order) to video access unit parts with TS=[8] in each of the\n   de-jittering
      buffers of RTP flows A, B, and C.  Then, starting from\n   flow C, the first
      media timestamp available in decoding order\n   (TS=[8]) is selected, and video
      access unit parts starting from RTP\n   flow A, and flows B and C are placed
      in order of the RTP flow\n   dependency as indicated by mechanisms defined in
      [RFC5583] (in the\n   example for TS[8]: first flow B and then flow C into the
      video access\n   unit AU(TS[8]) associated with NTP media timestamp TS=[8]).
      \ Then the\n   next media timestamp TS=[6] (RTP timestamp=(4)) in order of\n
      \  appearance in the highest RTP flow C is processed, and the process\n   described
      above is repeated.  Note that there may be video access\n   units with no video
      access unit parts present, e.g., in the lowest\n   RTP flow A (see, e.g., TS=[5]).
      \ The decoding order recovery process\n   could also be started after an RTP
      sender report containing the\n   mapping between the RTP timestamp and the NTP-format
      timestamp\n   (indicated as timestamps \"(x){y}\") has been received, assuming
      that\n   there is no clock skew in the source used for the NTP-format\n   timestamp
      generation.\n   C:-(0)----(2)----(7)<8>--(5)----(4)----(6)-----(11)----(9){10}-\n
      \     |      |      |       |      |      |       |       |\n   B:-(3)----(5)---(10)<8>--(8)----(7)----(9){7}--(14)----(12)----\n
      \                   |       |                     |       |\n   A:---------------(3)<8>--(1)-------------------(7){12}-(5)-----\n
      \  ---------------------------------------decoding/transmission order->\n   TS:[1]
      \   [3]    [8]=<8> [6]    [5]    [7]    [12]    [10]\n   Key:\n   A, B, C                -
      RTP flows\n   Integer values in \"()\" - video access unit with its RTP timestamp
      as\n                            indicated in its RTP packet.\n   \"|\"                    -
      indicates the corresponding parts of the\n                            same video
      access unit AU(TS[..]) in the\n                            RTP flows.\n   Integer
      values in \"[]\" - NTP media timestamp TS, sampling time\n                            as
      derived from the NTP timestamp\n                            associated with
      the video access unit\n                            AU(TS[..]), consisting of
      video access unit\n                            parts in the flows above.\n   Integer
      values in \"<>\" - NTP media timestamp TS as directly\n                            taken
      from the NTP RTP header extensions.\n   Integer values in \"{}\" - NTP media
      timestamp TS as provided in the\n                            RTCP sender reports.\n
      \                Figure 7: Example of a Layered RTP Stream\n"
    title: 4.3.  Example
  title: 4.  Application to Decoding Order Recovery in Layered Codecs
- contents:
  - "5.  Security Considerations\n   The security considerations of the RTP specification
    [RFC3550], the\n   extended RTP profile for RTCP-based feedback [RFC4585], and
    the\n   general mechanism for RTP header extensions [RFC5285] apply.\n   The RTP
    header extensions defined in Section 3.3 include an NTP-\n   format timestamp.
    \ When an RTP session using this header extension is\n   protected by the Secure
    RTP (SRTP) framework [RFC3711], that header\n   extension is not part of the encrypted
    portion of the RTP data\n   packets or RTCP control packets; however, these NTP-format
    timestamps\n   are encrypted when using SRTP without this header extension.  This
    is\n   a minor information leak, but one that is not believed to be\n   significant.
    \ The inclusion of this header extension will also reduce\n   the efficiency of
    RTP header compression, if it is used.\n   Furthermore, middleboxes that do not
    understand the header extensions\n   may remove them or may not update the content
    according to this memo.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   The IANA has registered one new value in the table
    of FMT Values for\n   RTPFB Payload Types [RFC4585] as follows:\n      Name:          RTCP-SR-REQ\n
    \     Long name:     RTCP Rapid Resynchronisation Request\n      Value:         5\n
    \     Reference:     RFC 6051\n   The IANA has also registered two new RTP Compact
    Header Extensions\n   [RFC5285], according to the following:\n      Extension
    URI: urn:ietf:params:rtp-hdrext:ntp-64\n      Description:   Synchronisation metadata:
    64-bit timestamp format\n      Contact:       Thomas Schierl <ts@thomas-schierl.de>\n
    \                    IETF Audio/Video Transport Working Group\n      Reference:
    \    RFC 6051\n      Extension URI: urn:ietf:params:rtp-hdrext:ntp-56\n      Description:
    \  Synchronisation metadata: 56-bit timestamp format\n      Contact:       Thomas
    Schierl <ts@thomas-schierl.de>\n                     IETF Audio/Video Transport
    Working Group\n      Reference:     RFC 6051\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Acknowledgements\n   This memo has benefited from discussions with numerous
    members of the\n   IETF AVT working group, including Jonathan Lennox, Magnus Westerlund,\n
    \  Randell Jesup, Gerard Babonneau, Ingemar Johansson, Ali C. Begen,\n   Ye-Kui
    Wang, Roni Even, Michael Dolan, Art Allison, and Stefan\n   Doehla.  The RTP header
    extension format of Variant A in Section 3.3\n   was suggested by Dave Singer,
    matching a similar mechanism specified\n   by the Internet Streaming Media Alliance
    (ISMA).\n"
  title: 7.  Acknowledgements
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use
      in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC3550]   Schulzrinne, H., Casner, S., Frederick, R., and
      V.\n               Jacobson, \"RTP: A Transport Protocol for Real-Time\n               Applications\",
      STD 64, RFC 3550, July 2003.\n   [RFC4585]   Ott, J., Wenger, S., Sato, N.,
      Burmeister, C., and J.\n               Rey, \"Extended RTP Profile for Real-time
      Transport\n               Control Protocol (RTCP)-Based Feedback (RTP/AVPF)\",\n
      \              RFC 4585, July 2006.\n   [RFC5285]   Singer, D. and H. Desineni,
      \"A General Mechanism for RTP\n               Header Extensions\", RFC 5285,
      July 2008.\n   [RFC5506]   Johansson, I. and M. Westerlund, \"Support for\n
      \              Reduced-Size Real-Time Transport Control Protocol (RTCP):\n               Opportunities
      and Consequences\", RFC 5506, April 2009.\n   [RFC5583]   Schierl, T. and S.
      Wenger, \"Signaling Media Decoding\n               Dependency in the Session
      Description Protocol (SDP)\",\n               RFC 5583, July 2009.\n   [RFC5760]
      \  Ott, J., Chesterfield, J., and E. Schooler, \"RTP Control\n               Protocol
      (RTCP) Extensions for Single-Source Multicast\n               Sessions with
      Unicast Feedback\", RFC 5760, February 2010.\n   [RFC5905]   Mills, D., Martin,
      J., Burbank, J., and W. Kasch,\n               \"Network Time Protocol Version
      4: Protocol and Algorithms\n               Specification\", RFC 5905, June 2010.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [AVT-ACQUISITION-RTP]\n               VerSteeg,
      B., Begen, A., VanCaenegem, T., and Z. Vax,\n               \"Unicast-Based
      Rapid Acquisition of Multicast RTP\n               Sessions\", Work in Progress,
      October 2010.\n   [AVT-RTP-SVC]\n               Wenger, S., Wang, Y., Schierl,
      T., and A. Eleftheriadis,\n               \"RTP Payload Format for SVC Video
      Coding\", Work\n               in Progress, October 2010.\n   [RFC3556]   Casner,
      S., \"Session Description Protocol (SDP) Bandwidth\n               Modifiers
      for RTP Control Protocol (RTCP) Bandwidth\",\n               RFC 3556, July
      2003.\n   [RFC3711]   Baugher, M., McGrew, D., Naslund, M., Carrara, E., and
      K.\n               Norrman, \"The Secure Real-time Transport Protocol\n               (SRTP)\",
      RFC 3711, March 2004.\n   [RFC5117]   Westerlund, M. and S. Wenger, \"RTP Topologies\",
      RFC 5117,\n               January 2008.\n   [RFC5245]   Rosenberg, J., \"Interactive
      Connectivity Establishment\n               (ICE): A Protocol for Network Address
      Translator (NAT)\n               Traversal for Offer/Answer Protocols\", RFC
      5245,\n               April 2010.\n   [RFC5576]   Lennox, J., Ott, J., and T.
      Schierl, \"Source-Specific\n               Media Attributes in the Session Description
      Protocol\n               (SDP)\", RFC 5576, June 2009.\n   [RFC5691]   de Bont,
      F., Doehla, S., Schmidt, M., and R.\n               Sperschneider, \"RTP Payload
      Format for Elementary Streams\n               with MPEG Surround Multi-Channel
      Audio\", RFC 5691,\n               October 2009.\n   [RFC5764]   McGrew, D.
      and E. Rescorla, \"Datagram Transport Layer\n               Security (DTLS)
      Extension to Establish Keys for the\n               Secure Real-time Transport
      Protocol (SRTP)\", RFC 5764,\n               May 2010.\n   [ZRTP]      Zimmermann,
      P., Johnston, A., Ed., and J. Callas, \"ZRTP:\n               Media Path Key
      Agreement for Unicast Secure RTP\", Work\n               in Progress, June 2010.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Authors' Addresses\n   Colin Perkins\n   University of Glasgow\n   School of
    Computing Science\n   Glasgow  G12 8QQ\n   UK\n   EMail: csp@csperkins.org\n   Thomas
    Schierl\n   Fraunhofer HHI\n   Einsteinufer 37\n   D-10587 Berlin\n   Germany\n
    \  Phone: +49-30-31002-227\n   EMail: ts@thomas-schierl.de\n"
  title: Authors' Addresses
