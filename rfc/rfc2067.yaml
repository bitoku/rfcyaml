- title: __initial_text__
  contents:
  - '                             IP over HIPPI

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   ANSI Standard X3.218-1993 (HIPPI-LE[3]) defines the encapsulation\
    \ of\n   IEEE 802.2 LLC PDUs and, by implication, IP on HIPPI.  ANSI X3.222-\n\
    \   1993 (HIPPI-SC[4]) describes the operation of HIPPI physical\n   switches.\
    \  The ANSI committee responsible for these standards chose\n   to leave HIPPI\
    \ networking issues largely outside the scope of their\n   standards; this document\
    \ describes the use of HIPPI switches as IP\n   local area networks.\n   This\
    \ memo is a revision of RFC 1374, \"IP and ARP on HIPPI\", and is\n   intended\
    \ to replace it in the Standards Track.  RFC 1374 has been a\n   Proposed Standard\
    \ since November, 1992, with at least 10\n   implementations of IP encapsulation\
    \ and HIPPI switch discipline.  No\n   major changes to it are required.  However,\
    \ the ARP part of RFC 1374\n   has not had sufficient implementation experience\
    \ to be advanced to\n   Draft Standard.  The present document contains all of\
    \ RFC 1374 except\n   for the description ARP, which has been moved into a separate\n\
    \   document.\n"
- title: TABLE OF CONTENTS
  contents:
  - "TABLE OF CONTENTS\n   1  Introduction.............................................\
    \  2\n   2  Scope....................................................  3\n   \
    \   2.1   Changes from RFC 1374..............................  3\n      2.2  \
    \ Terminology........................................  4\n   3  Definitions..............................................\
    \  4\n   4  Equipment................................................  5\n   5\
    \  Protocol ................................................  7\n      5.1   Packet\
    \ Format......................................  7\n      5.2   48 bit Universal\
    \ LAN MAC addresses................. 11\n      5.3   I-Field Format.....................................\
    \ 12\n      5.4   Rules For Connections.............................. 13\n   \
    \   5.5   MTU................................................ 15\n   6  Camp-on\
    \ ................................................. 16\n   7  Path MTU Discovery.......................................\
    \ 17\n   8  Channel Data Rate Discovery.............................. 17\n   9\
    \  Performance.............................................. 18\n   10 Sharing\
    \ the Switch....................................... 20\n   11 References...............................................\
    \ 21\n   12 Security Considerations.................................. 21\n   13\
    \ Author's Address......................................... 21\n   14 Appendix\
    \ A -- HIPPI Basics............................... 22\n   15 Appendix B -- How\
    \ to Build a Practical HIPPI LAN......... 27\n"
- title: 1  Introduction
  contents:
  - "1  Introduction\n   The ANSI High-Performance Parallel Interface (HIPPI) is a\
    \ simplex\n   data channel.  Configured in pairs, HIPPI can send and receive data\n\
    \   simultaneously at nearly 800 megabits per second.  (HIPPI has an\n   equally\
    \ applicable 1600 megabit/second option.) Between 1987 and\n   1991, the ANSI\
    \ X3T9.3 HIPPI working group drafted four documents that\n   bear on the use of\
    \ HIPPI as a network interface.  They cover the\n   physical and electrical specification\
    \ (HIPPI-PH [1]), the framing of\n   a stream of bytes (HIPPI-FP [2]), encapsulation\
    \ of IEEE 802.2 LLC\n   (HIPPI-LE [3]), and the behavior of a standard physical\
    \ layer switch\n   (HIPPI-SC [4]).  HIPPI-LE also implies the encapsulation of\
    \ Internet\n   Protocol[5].  The reader should be familiar with the ANSI HIPPI\n\
    \   documents, copies of which are archived at the site \"ftp.network.com\"\n\
    \   in the directory \"hippi\", and may be obtained via anonymous FTP.\n   HIPPI\
    \ switches can be used to connect a variety of computers and\n   peripheral equipment\
    \ for many purposes, but the working group stopped\n   short of describing their\
    \ use as Local Area Networks.  This memo\n   takes up where the working group\
    \ left off, using the guiding\n   principle that except for length and hardware\
    \ header, Internet\n   datagrams sent on HIPPI should be identical to the same\
    \ datagrams\n   sent on a conventional network, and that any datagram sent on\
    \ a\n   conventional 802 network[6] should be valid on HIPPI.\n"
- title: 2  Scope
  contents:
  - "2  Scope\n   This memo describes the HIPPI interface between a host and a\n \
    \  crosspoint switch that complies with the HIPPI-SC draft standard.\n   Issues\
    \ that have no impact on host implementations are outside the\n   scope of this\
    \ memo.  Host implementations that comply with this memo\n   are believed to be\
    \ interoperable on a network composed of a single\n   HIPPI-SC switch.  They are\
    \ also interoperable on a simple point-to-\n   point, two-way HIPPI connection\
    \ with no switch between them.  They\n   may be interoperable on more complex\
    \ networks as well, depending on\n   the internals of the switches and how they\
    \ are interconnected;\n   however, these details are implementation dependent\
    \ and outside the\n   scope of this memo.\n   Within the scope of this memo are:\n\
    \      1.  Packet format and header contents, including HIPPI-FP, HIPPI-\n   \
    \   LE, IEEE 802.2 LLC[7] and SNAP.\n      2.  I-Field contents\n      3.  Rules\
    \ for the use of connections.\n   Outside of the scope are\n      1.  Address\
    \ Resolution (ARP)\n      2.  Network configuration and management\n      3. \
    \ Host internal optimizations\n      4.  The interface between a host and an outboard\
    \ protocol\n      processor.\n"
- title: 2.1  Changes from RFC 1374
  contents:
  - "2.1  Changes from RFC 1374\n   RFC 1374 described the use of ARP on HIPPI, but\
    \ because of\n   insufficient implementation experience, the description of ARP\
    \ has\n   been separated from IP encapsulation and moved to an Informational\n\
    \   memo.  It may be returned to the standards track in the future if\n   interest\
    \ and implementations warrant it.\n   RFC 1374's specification of IP over HIPPI\
    \ has been changed in this\n   document.  Certain packet format options, permitted\
    \ in RFC 1374, are\n   no longer allowed:\n           1.  Optional short burst\
    \ first;\n           2.  D1 fill bytes;\n           3.  Nonzero D2 offset.\n \
    \  That is, the header format is no longer variable and is required to\n   be\
    \ that which is recommended by RFC 1374.\n   With these changes, it is possible\
    \ to send packets which conform to\n   the ANSI standards but not to this memo.\
    \  Because there are no RFC\n   1374 implementations in use that used these options,\
    \ we believe that\n   all existing RFC 1374 implementations are compliant with\
    \ the\n   requirements of this memo, and there should be no interoperability\n\
    \   problems associated with these changes.\n"
- title: 2.2  Terminology
  contents:
  - "2.2  Terminology\n   In this document the use of the word SHALL in capital letters\n\
    \   indicates mandatory points of compliance.\n"
- title: 3  Definitions
  contents:
  - "3  Definitions\n   Conventional\n      Used with respect to networks, this refers\
    \ to Ethernet, FDDI and\n      802 LAN types, as distinct from HIPPI-SC LANs.\n\
    \   Destination\n      The HIPPI implementation that receives data from a HIPPI\
    \ Source.\n   Node\n      An entity consisting of one HIPPI Source/Destination\
    \ pair that is\n      connected by parallel or serial HIPPI to a HIPPI-SC switch\
    \ and\n      that transmits and receives IP datagrams.  A node may be an\n   \
    \   Internet host, bridge, router or gateway.  This memo uses the term\n     \
    \ node in place of the usual \"host\" to indicate that a host might be\n     \
    \ connected to the HIPPI LAN not directly, but through an external\n      adaptor\
    \ that does some of the protocol processing for the host.\n   Serial HIPPI\n \
    \     An implementation of HIPPI in serial fashion on coaxial cable or\n     \
    \ optical fiber, informally standardized by implementor's agreement\n      in\
    \ the Spring of 1991.\n   Switch Address\n      A value used as the address of\
    \ a node on a HIPPI-SC network.  It\n      is transmitted in the I-field.  HIPPI-SC\
    \ switches may map Switch\n      Addresses to physical port numbers.\n   Source\n\
    \      The HIPPI implementation that generates data to send to a HIPPI\n     \
    \ Destination.\n   Universal LAN Address (ULA)\n      A 48 bit globally unique\
    \ address, administered by the IEEE,\n      assigned to each node on an Ethernet,\
    \ FDDI, 802 network or HIPPI-\n      SC LAN.\n"
- title: 4  Equipment
  contents:
  - "4  Equipment\n   A HIPPI network can be composed of nodes with HIPPI interfaces,\
    \ HIPPI\n   cables or serial links, HIPPI-SC switches, gateways to other\n   networks.\n\
    \   Each HIPPI interconnection between a node and a switch SHALL consist\n   of\
    \ a pair of HIPPI links, one in each direction.\n   If a link between a node and\
    \ the switch is capable of the 1600\n   Megabit/second data rate option (i.e.\
    \ Cable B installed for 64 bit\n   wide operation) in either direction, the node's\
    \ HIPPI-PH\n   implementation SHALL also be capable of 32 bit operation (Cable\
    \ B\n   data suppressed) and SHALL be able to select or deselect the 1600Mb/s\n\
    \   data rate option at the establishment of each new connection.\n   The following\
    \ figure shows a sample HIPPI switch configuration.\n                        \
    \                              +-----+\n                                     \
    \                 | H 4 |\n      |                                           \
    \    +--+--+\n      |                   +----+    +----+    +----+     |\n   \
    \   |                   | H1 |    | H2 |    | H3 |   +-++\n      |   +--+    \
    \        +-++-+    +-++-+    +-++-+   |PP|\n      +---+H5|              ||   \
    \     ||        ||     ++++\n      |   +--+              ||        ||        ||\
    \      ||\n      |                 +---++--------++--------++------++----+\n \
    \     |                 |                                     |\n      |   +----+\
    \        |              HIPPI-SC               |\n      +---+ G1 +--------+  \
    \                                   |\n      |   |    +--------+             \
    \  Switch                |\n      |   +----+        |                        \
    \             |\n      |                 +---++--------++--------++------++----+\n\
    \      |   +--+              ||        ||        ||      ||\n      +---+H6|  \
    \            ||                         ++++\n      |   +--+            +-++-+\
    \                       |PP|\n      |                   |    |               \
    \        +-++\n      |                   | G2 |                         |\n  \
    \    |                   |    |                      +--+--+\n      |        \
    \           +--+-+                      | H 7 |\n      |                     \
    \ |                        +-----+\n                             |\n         \
    \  -----+------------+-------+-----------+-------------+------\n             \
    \   |                    |           |             |\n                |      \
    \              |           |             |\n             +--+--+             \
    \ +--+--+     +--+--+       +--+--+\n             | H 8 |              | H 9 |\
    \     | H10 |       | H11 |\n             +-----+              +-----+     +-----+\
    \       +-----+\n      Legend:  ---+---+---+--  =  802 network, Ethernet or FDDI\n\
    \                           ||  =  Paired HIPPI link\n                       \
    \     H  =  Host computer\n                           PP  =  Outboard Protocol\
    \ Processor\n                            G  =  Gateway\n                     \
    \  A possible HIPPI configuration\n   A single HIPPI-SC switch has a \"non-blocking\"\
    \ characteristic, which\n   means there is always a path available from any Source\
    \ to any\n   Destination.  If the network consists of more than one switch, the\n\
    \   path from a Source to a Destination may include a HIPPI link between\n   switches.\
    \  If this link is used by more than one Source/Destination\n   pair, a \"blocking\"\
    \ network is created: one Source may be blocked from\n   access to a Destination\
    \ because another Source is using the link it\n   shares.  Strategies for establishing\
    \ connections may be more\n   complicated on blocking networks than on non-blocking\
    \ ones.\n   This memo does not take blocking issues into account, assuming that\n\
    \   the HIPPI LAN consists of one HIPPI-SC switch or, if the network is\n   more\
    \ complex than that, it presents no additional problems that a\n   node must be\
    \ aware of.\n"
- title: 5  Protocol
  contents:
  - '5  Protocol

    '
- title: 5.1  Packet Format
  contents:
  - "5.1  Packet Format\n   The HIPPI packet format for Internet datagrams SHALL conform\
    \ to the\n   HIPPI-FP and HIPPI-LE draft standards, with further restrictions\
    \ as\n   imposed by this memo.  Because this memo is more restrictive than the\n\
    \   ANSI standards, it is possible to send encapsulated IP datagrams that\n  \
    \ conform to the ANSI standards, but are illegal according to this\n   memo. \
    \ Destinations may either accept or ignore such datagrams.\n   To summarize the\
    \ additional restrictions on ANSI standards found\n   here:\n           Any short\
    \ burst must be the last burst of the packet.\n           Leading short bursts\
    \ are not permitted.\n           Nonzero values for the HIPPI-FP D2_Offset field\
    \ are not\n           permitted.\n           The D1_AreaSize SHALL be 3 (64-bit\
    \ words).  No D1 Fill is\n           permitted.\n   Note: Although this document\
    \ is for IP over HIPPI, the encapsulation\n   described below accommodates ARP\
    \ as well.\n   The HIPPI-FP D1_Area SHALL contain the HIPPI-LE header.  The HIPPI-FP\n\
    \   D2_Area, when present, SHALL contain one IEEE 802.2 Type 1 LLC\n   Unnumbered\
    \ Information (UI) PDU.  Support of IEEE 802.2 XID, TEST and\n   Type 2 PDUs is\
    \ not required on HIPPI, and Destinations that receive\n   these PDUs may either\
    \ ignore them or respond correctly according to\n   IEEE 802.2 requirements.\n\
    \   The length of a HIPPI packet, including trailing fill, SHALL be a\n   multiple\
    \ of eight bytes as required by HIPPI-LE.\n   +----------+-----------+---------------------+-----------\
    \   ------+\n   |          |           |                     |              0\
    \ - 7 |\n   | HIPPI-FP | HIPPI-LE  | IEEE 802.2 LLC/SNAP | IP . . .     bytes\
    \ |\n   |(8 bytes) |(24 bytes) |      (8 bytes)      |               fill |\n\
    \   +----------+-----------+---------------------+-----------   ------+\n    \
    \                      HIPPI Packet Structure\n        ULP-id (8 bits) SHALL contain\
    \ 4.\n        D1_Data_Set_Present (1 bit) SHALL be set.\n        Start_D2_on_Burst_Boundary\
    \ (1 bit) SHALL be zero.\n        Reserved (11 bits) SHALL contain zero.\n   \
    \     D1_Area_Size (8 bits) SHALL be sent as 3.\n        D2_Offset (3 bits) SHALL\
    \ be zero.\n        D2_Size (32 bits) Shall contain the number of bytes in the\n\
    \        IEEE 802.2 LLC Type 1 PDU, or zero if no PDU is present.  It\n      \
    \  SHALL NOT exceed 65,288.  This value includes the IEEE 802.2\n        LLC/SNAP\
    \ header and the IP datagram.  It does not include\n        trailing fill bytes.\
    \  (See \"MTU\", below.)\n"
- title: HIPPI-LE Header
  contents:
  - "HIPPI-LE Header\n   FC (3 bits) SHALL contain zero unless otherwise defined by\
    \ local\n   administration.\n   Double_Wide (1 bit) SHALL contain one if the Destination\
    \ associated\n   with the sending Source supports 64 bit HIPPI operation.  Otherwise\n\
    \   it SHALL contain zero.\n   Message_Type (4 bits) contains a code identifying\
    \ the type of HIPPI-\n   LE PDU.  Defined values are:\n              0  Data PDU\n\
    \              1  Address Resolution Request PDU (AR_Request)\n              2\
    \  Address Resolution Response PDU (AR_Response)\n              3  Self Address\
    \ Resolution Request PDU (AR_S_Request)\n              4  Self Address Resolution\
    \ Response PDU (AR_S_Response)\n   Destination_Switch_Address is a 24-bit field\
    \ containing the\n   Switch Address of the Destination if known, otherwise zero.\n\
    \   If the address comprises less than 24 bits, it SHALL be right\n   justified\
    \ (occupying the least significant bits) in the\n   field.\n   Destination_Address_Type\
    \ (4 bits) and Source_Address_Type (4\n   bits) contain codes identifying the\
    \ type of addresses in the\n   Destination_Switch_Address and Source_Switch_Address\
    \ fields\n   respectively.  Defined values (binary) are:\n                 0 \
    \ Unspecified\n                 1  HIPPI-SC Source Route (24 bits)\n         \
    \        2  HIPPI-SC Address (12 bits)\n   Source_Switch_Address is a 24-bit field\
    \ containing the Switch\n   Address of the Source.  If the address comprises less\
    \ than 24\n   bits, it SHALL be right justified (occupying the least\n   significant\
    \ bits) in the field.\n   Reserved (16 bits) SHALL contain zero.\n   Destination_IEEE_Address\
    \ (48 bits) SHALL contain the 48 bit\n   Universal LAN MAC Address of the Destination\
    \ if known,\n   otherwise zero.\n   LE_Locally_Administered (16 bits) SHALL contain\
    \ zero UNLESS\n   otherwise defined by local administration.\n   Source_IEEE_Address\
    \ (48 bits) SHALL contain the 48 bit\n   Universal LAN MAC Address of the Source\
    \ if known, otherwise\n   zero.\n"
- title: IEEE 802.2 LLC
  contents:
  - "IEEE 802.2 LLC\n   The IEEE 802.2 LLC Header SHALL begin in the first byte of\
    \ the\n   HIPPI-FP D2_Area.\n   SSAP (8 bits) SHALL contain 170 ('AA'h).\n   DSAP\
    \ (8 bits) SHALL contain 170 ('AA'h).\n   CTL (8 bits) SHALL contain 3 (Unnumbered\
    \ Information).\n"
- title: SNAP
  contents:
  - "SNAP\n   Organization Code (24 bits) SHALL be zero.\n   EtherType (16 bits) SHALL\
    \ be set as defined in Assigned Numbers [8]:\n   IP = 2048 ('0800'h), ARP = 2054\
    \ ('0806'h), RARP = 32,821 ('8035'h).\n      31    28        23  21          15\
    \        10     7         2   0\n      +-----+---------+-+-+-----------+---------+-----+---------+-----+\n\
    \    0 |      04       |1|0|       Reserved      |      03       |  0  |\n   \
    \   +---------------+-+-+---------------------+---------------+-----+\n    1 |\
    \                             (n+8)                             |\n      +-----+-+-------+-----------------------------------------------+\n\
    \    2 |[LA] |W|M_Type |          Destination_Switch_Address           |\n   \
    \   +-----+-+-------+-----------------------------------------------+\n    3 |\
    \ D_A_T | S_A_T |             Source_Switch_Address             |\n      +-------+-------+---------------+-------------------------------+\n\
    \    4 |            Reserved           |  [Destination_IEEE_Address]   |\n   \
    \   +-------------------------------+                               |\n    5 |\
    \                                                               |\n      +-------------------------------+-------------------------------+\n\
    \    6 |             [LA]              |     [Source_IEEE_Address]     |\n   \
    \   +-------------------------------+                               |\n    7 |\
    \                                                               |\n      +---------------+---------------+---------------+---------------+\n\
    \    8 |       AA      |      AA       |       03      |       00      |\n   \
    \   +---------------+---------------+---------------+---------------+\n    9 |\
    \       00      |      00       |         [EtherType]           |\n      +---------------+---------------+---------------+---------------+\n\
    \   10 |Message byte 0 |Message byte 1 |Message byte 2 | . . .         |\n   \
    \   +---------------+---------------+---------------+---            |\n      |\
    \                            .  .  .\n                                       \
    \                               |\n      |        -------+---------------+---------------+---------------+\n\
    \      |         . . . |  byte (n-2)   |  byte (n-1)   |     FILL      |\n   \
    \   +---------------+---------------+---------------+---------------+\n   N-1|\
    \      FILL     |     FILL      |     FILL      |     FILL      |\n      +---------------+---------------+---------------+---------------+\n\
    \                            HIPPI Packet Format\n              Words 0-1:  HIPPI-FP\
    \ Header\n              Words 2-7:  D1 Area (HIPPI-LE Header)\n              Words\
    \ 8-9:  D2 Area (IEEE 802.2 LLC/SNAP)\n              Words 10-(N-1):  D2 Area\
    \ (IP message)\n              (n) is the number of bytes in the IP message.\n\
    \              [LA] fields are zero unless used otherwise locally.\n         \
    \     Abbreviations:  \"W\"      = Double_Wide field;\n                      \
    \        \"M_Type\" = Message_Type field;\n                              \"D_A_T\"\
    \  = Destination_Address_Type;\n                              \"S_A_T\"  = Source_Address_Type;\n\
    \              [FILL] bytes complete the HIPPI packet to an even\n           \
    \   number of 32 bit words.  The number of fill bytes\n              is not counted\
    \ in the data length.\n"
- title: IEEE 802.2 Data
  contents:
  - "IEEE 802.2 Data\n   The IEEE 802.2 Data SHALL begin in the byte following the\
    \ EtherType\n   field.  Fill bytes SHALL be used following the Data as necessary\
    \ to\n   make the number of bytes in the packet a multiple of 8.  In\n   accordance\
    \ with HIPPI-FP, the amount of this fill is not included in\n   the D2_Size value\
    \ in the HIPPI- FP Header.\n   The order of the bytes in the data stream is from\
    \ higher numbered to\n   lower numbered data signal (left to right) within the\
    \ HIPPI word, as\n   specified in HIPPI-FP Clause 7, \"Word and byte formats.\"\
    \  With the\n   1600 megabit/second data rate option (64 bit) bits 32 through\
    \ 63 are\n   on Cable B, so that the four bytes on Cable B come logically before\n\
    \   those on Cable A.  Within each byte, the most significant bit is the\n   highest\
    \ numbered signal.\n"
- title: 5.2  48 bit Universal LAN MAC Addresses
  contents:
  - "5.2  48 bit Universal LAN MAC Addresses\n   IEEE Standard 802.1A specifies the\
    \ Universal LAN MAC Address.  The\n   globally unique part of the 48 bit space\
    \ is administered by the IEEE.\n   Each node on a HIPPI-SC LAN should be assigned\
    \ a ULA.  Multiple ULAs\n   may be used if a node contains more than one IEEE\
    \ 802.2 LLC protocol\n   entity.\n   The format of the address within its 48 bit\
    \ HIPPI-LE fields follows\n   IEEE 802.1A canonical bit order and HIPPI-FP bit\
    \ and byte order:\n     31              23              15               7   \
    \           0\n     +-------------------------------+---------------+---------------+\n\
    \     |      (not used for ULA)       |ULA byte 0 |L|G|  ULA byte  1  |\n    \
    \ +---------------+---------------+---------------+---------------+\n     |  ULA\
    \ byte  2  |  ULA byte  3  |  ULA byte  4  |  ULA byte  5  |\n     +---------------+---------------+---------------+---------------+\n\
    \                     Universal LAN MAC Address Format\n        L (U/L bit) =\
    \ 1 for Locally administered addresses, 0 for\n        Universal.\n        G (I/G\
    \ bit) = 1 for Group addresses, 0 for Individual.\n   The use of ULAs is optional,\
    \ but encouraged.  Although ULAs are not\n   used by HIPPI-SC switches, they may\
    \ be helpful for HIPPI Switch\n   Address resolution, and for distinguishing between\
    \ multiple logical\n   entities that may exist within one node.  They may also\
    \ be used by\n   gateway devices that replace HIPPI hardware headers with the\
    \ MAC\n   headers of other LANs.  Carrying the ULAs in the HIPPI header may\n\
    \   simplify these devices, and it may also help if HIPPI is used as an\n   interface\
    \ to some future HIPPI based LAN that uses ULAs for\n   addressing.\n"
- title: 5.3  I-Field format
  contents:
  - "5.3  I-Field format\n   fi The I-field bits, as defined in HIPPI-SC, SHALL be\
    \ set as follows:\n         Locally Administered (bit 31) SHALL be zero.\n   \
    \      Reserved (bits 30, 29) should be zero.  Destinations SHALL\n         accept\
    \ any value for these bits.\n         Double wide (bit 28) SHALL be set when Source\
    \ Cable B is\n         connected and the Source wants a 64 bit connection.  It\
    \ SHALL\n         be zero otherwise.\n         Direction (bit 27) should be sent\
    \ as zero, however\n         Destinations SHALL accept either zero or one and\
    \ interpret\n         the Routing Control field accordingly, per HIPPI-SC.\n \
    \        Path Selection (bits 26, 25) SHALL be 00, 01, or 11 (binary)\n      \
    \   at the Source's option.  00 (source route mode) indicates\n         that the\
    \ I-field bits 23-00 contain a 24 bit source route; 01\n         or 11 (logical\
    \ address mode) indicate that bits 23-00 contain\n         12 bit Source and Destination\
    \ Addresses.  The value 11 is\n         meaningful when more than one route exists\
    \ from a Source to a\n         Destination; it allows the switch to choose the\
    \ route.  Use\n         of 01 forces the switch always to use the same route for\
    \ the\n         same Source/Destination pair.\n         Camp-on (bit 24) may be\
    \ 1 or 0; however, a Source SHALL NOT\n         make consecutive requests without\
    \ Camp-on to the same\n         Destination while the requests are being rejected.\
    \  The\n         purpose of this restriction is to prevent a node from\n     \
    \    circumventing the fair share arbitration mechanism of the\n         switch\
    \ by repeating requests at a very high rate.\n         If logical address mode\
    \ is used:\n            Source Address (bits 23-12) is not used.\n           \
    \ Destination Address (bits 11-0) SHALL contain the Switch\n            Address\
    \ of the Destination.\n        If source route mode is used:\n            Routing\
    \ control (bits 23-00) SHALL contain the route to\n            the Destination.\n"
- title: 5.4  Rules For Connections
  contents:
  - "5.4  Rules For Connections\n   The following rules for connection management\
    \ by Source and\n   Destination are intended to insure frequent, fair share access\
    \ to\n   Destinations for which multiple Sources are contending.  If possible,\n\
    \   nodes should transfer data at full HIPPI speeds and hold connections\n   no\
    \ longer than necessary.\n   A source may hold a connection for as long as it\
    \ takes to send 68\n   HIPPI bursts at what ever speed the two connected nodes\
    \ can achieve\n   together.  The number of packets sent in one connection is not\n\
    \   limited, except that the number of bursts over all the packets should\n  \
    \ not exceed 68.  This is not a recommendation to send as many packets\n   as\
    \ possible per connection; one packet per connection is acceptable.\n   The purpose\
    \ of this limit is to give each Source an fair share of a\n   common Destination's\
    \ bandwidth.  Without a limit, if there is a\n   Destination that is constantly\
    \ in demand by multiple Sources, the\n   Source that sends the most data per connection\
    \ wins the greatest\n   share of bandwidth.\n   The limit of 68 bursts is not\
    \ absolute.  An implementation may check\n   the burst count after transmission\
    \ of a packet and end the connection\n   if it is greater than or equal to some\
    \ threshold.  If this is done,\n   the threshold should be less than 68 depending\
    \ on the typical packet\n   size, to ensure that the 68 burst limit is not normally\
    \ exceeded.\n   For instance, a Source sending 64K packets would send two per\n\
    \   connection (130 bursts) if it checked for 68 at the end of each\n   packet.\
    \  In this situation the Source is required to check for a\n   value small enough\
    \ that it will not send a second packet in the same\n   connection.\n   Destinations\
    \ SHALL accept all packets that arrive during a\n   connection, and may discard\
    \ those that exceed its buffering capacity.\n   A Destination SHALL NOT abort\
    \ a connection (deassert CONNECT) simply\n   because too many bursts were received;\
    \ however a Destination may\n   abort a connection whose duration has exceeded\
    \ a time period of the\n   Destination's choosing, as long as the Source is allowed\
    \ ample time\n   to transmit its quota of bursts.\n   The rules admonish the node\
    \ to do certain things as fast as it can,\n   however there is no absolute measure\
    \ of compliance.  Nodes that\n   cannot transfer data at full HIPPI speeds can\
    \ still interoperate but\n   the faster the implementation, the better the performance\
    \ of the\n   network will be.\n   Assuming that bursts flow at the maximum rate,\
    \ the most important\n   factor in network throughput is the connection switching\
    \ time,\n   measured from the deassertion of REQUEST by the Source at the end\
    \ of\n   one connection to its first assertion of BURST after the\n   establishment\
    \ of the new connection.\n   Implementations should keep this time as short as\
    \ possible.  For a\n   guideline, assuming parallel HIPPI and a single HIPPI-SC\
    \ switch, ten\n   microseconds permits nearly full HIPPI throughput with full-sized\n\
    \   packets, and at 60 microseconds the available throughput is reduced\n   by\
    \ about 10%.  (See \"Performance\", below.)\n   All HIPPI electrical signaling\
    \ SHALL comply with HIPPI-PH.  In every\n   case, the following rules go beyond\
    \ what HIPPI-PH requires.\n   Rules for the Source\n   1.  Do not assert REQUEST\
    \ until a packet is ready to send.\n   2.  Transmit bursts as quickly as READYs\
    \ permit.  Except for\n       the required HIPPI Source Wait states, there should\
    \ be no\n       delay in the assertion of BURST whenever the Source's READY\n\
    \       counter is nonzero.\n   3.  Make a best effort to ensure that connection\
    \ durations do\n       not exceed 68 bursts.\n   4.  Deassert REQUEST immediately\
    \ when no packet is available\n       for immediate transmission or the last packet\
    \ of the\n       connection has been sent.\n   Rules for the Destination\n   1.\
    \   Reject all connections if unable to receive packets.\n        This frees the\
    \ requesting Source to connect to other\n        Destinations with a minimum of\
    \ delay.  Inability to receive\n        packets is not a transient condition,\
    \ but is the state of the\n        Destination when its network interface is not\
    \ initialized.\n   2.  A HIPPI node should be prepared to efficiently accept\n\
    \       connections and process incoming data packets.  While this\n       may\
    \ be best achieved by not asserting connect unless 68\n       bursts worth of\
    \ buffers is available, it may be possible to\n       meet this requirement with\
    \ fewer buffers.  This may be due to\n       a priori agreement between nodes\
    \ on packet sizes, the speed\n       of the interface to move buffers, or other\
    \ implementation\n       dependent considerations.\n   3.  Accept a connection\
    \ immediately when buffers are\n       available.  The Destination should never\
    \ delay the acceptance\n       of a connection unnecessarily.\n   4.  Once initialized,\
    \ a Destination may reject connection\n       requests only for one of the following\
    \ reasons:\n     1.  The I-field was received with incorrect parity.\n     2.\
    \  The I-field contents are invalid, e.g. the \"W\" bit set when the\n       \
    \  Destination does not support the 1600 megabit data rate option,\n         the\
    \ \"Locally Administered\" bit is set, the Source is not\n         permitted to\
    \ send to this Destination, etc.\n     Transient conditions within the Destination,\
    \ such as temporary\n     buffer shortages, must never cause rejected connections.\n\
    \   5.  Ignore aborted connection sequences.  Sources may time\n       out and\
    \ abandon attempts to connect; therefore aborted\n       connection sequences\
    \ are normal events.\n"
- title: 5.5  MTU
  contents:
  - "5.5  MTU\n   Maximum Transmission Unit (MTU) is defined as the length of the\
    \ IP\n   packet, including IP header, but not including any overhead below IP.\n\
    \   Conventional LANs have MTU sizes determined by physical layer\n   specification.\
    \  MTUs may be required simply because the chosen medium\n   won't work with larger\
    \ packets, or they may serve to limit the amount\n   of time a node must wait\
    \ for an opportunity to send a packet.\n   HIPPI has no inherent limit on packet\
    \ size.  The HIPPI-FP header\n   contains a 32 bit D2_Size field that, while it\
    \ may limit packets to\n   about 4 gigabytes, imposes no practical limit for networking\n\
    \   purposes.  Even so, a HIPPI-SC switch used as a LAN needs an MTU so\n   that\
    \ Destination buffer sizes can be determined.\n   The MTU for HIPPI-SC LANs is\
    \ 65280 bytes.\n   This value was selected because it allows the IP packet to\
    \ fit in one\n   64K byte buffer with up to 256 bytes of overhead.  The overhead\
    \ is 40\n   bytes at the present time; there are 216 bytes of room for expansion.\n\
    \         HIPPI-FP Header                  8 bytes\n         HIPPI-LE Header \
    \                24 bytes\n         IEEE 802.2 LLC/SNAP Headers      8 bytes\n\
    \         Maximum IP packet size (MTU) 65280 bytes\n                         \
    \             ------------\n                           Total      65320 bytes\
    \ (64K - 216)\n"
- title: 6  Camp-on
  contents:
  - "6  Camp-on\n   When several Sources contend for a single Destination, the Camp-on\n\
    \   feature allows the HIPPI-SC switch to arbitrate and ensure that all\n   Sources\
    \ have fair access.  (HIPPI-SC does not specify the method of\n   arbitration.)\
    \  Without Camp-on, the contending Sources would simply\n   have to retry the\
    \ connection repeatedly until it was accepted, and\n   the fastest Source would\
    \ usually win.  To guarantee fair share\n   arbitration, Sources are prohibited\
    \ from making repeated requests to\n   the same Destination without Camp-on in\
    \ such a way as to defeat the\n   arbitration.\n   There is another important\
    \ reason to use Camp-on: when a connection\n   without Camp-on is rejected, the\
    \ Source cannot determine whether the\n   rejection came from the requested Destination\
    \ or from the switch.\n   The Source also cannot tell the reason for the rejection,\
    \ which could\n   be either that the Destination was off line or not cabled, or\
    \ the I-\n   field was erroneous or had incorrect parity.  Sources should not\n\
    \   treat a rejection of a request without Camp-on as an error.  Camp-on\n   prevents\
    \ rejection due to the temporary busy case; with one\n   exception, rejection\
    \ of a Camp-on request indicates an error\n   condition, and an error event can\
    \ be recorded.  The exception occurs\n   when a 64 bit connection is attempted\
    \ to a Destination that does not\n   have Cable B connected, resulting in a reject.\
    \  This case is covered\n   in \"Channel Data Rate Discovery\", below.\n"
- title: 7  Path MTU Discovery
  contents:
  - "7  Path MTU Discovery\n   RFC 1191 [9] describes the method of determining MTU\
    \ restrictions on\n   an arbitrary network path between two hosts.  HIPPI nodes\
    \ may use\n   this method without modification to discover restrictions on paths\n\
    \   between HIPPI-SC LANs and other networks.  Gateways between HIPPI-SC\n   LANs\
    \ and other types of networks should implement RFC 1191.\n"
- title: 8  Channel Data Rate Discovery
  contents:
  - "8  Channel Data Rate Discovery\n   HIPPI exists in two data rate options (800\
    \ megabit/second and 1600\n   megabit/second).  The higher data rate is achieved\
    \ by making the\n   HIPPI 64 bits parallel instead of 32, using an extra cable\
    \ containing\n   32 additional data bits and four parity bits.  HIPPI-SC switches\
    \ can\n   be designed to attach to both.  Source and Destination HIPPI\n   implementations\
    \ can be designed to operate at either rate, selectable\n   at the time a connection\
    \ is established.  The \"W\" bit (bit 28) of the\n   I-field controls the width\
    \ of the connection through the switch.\n   Sources with both cables A and B attached\
    \ to the switch may set the\n   \"W\" bit to request a 1600 megabit/second connection.\
    \  If the\n   requested destination also has both cables attached, the switch\
    \ can\n   connect Source to Destination on both cables.  If the requested\n  \
    \ Destination has only Cable A, the switch rejects the request.\n   Sixty-four\
    \ bit Sources can connect to 32 bit Destinations by\n   requesting with the \"\
    W\" bit clear and not using Cable B.  Sixty-four\n   bit Destinations must examine\
    \ the \"W\" bit in the received I-field and\n   use or ignore Cable B accordingly.\
    \  Note that both INTERCONNECT\n   signals stay active while a 64 bit HIPPI is\
    \ used in 32 bit mode.\n   The following table summarizes the possible combinations,\
    \ the\n   switch's action for each, and the width of the resulting connection.\n\
    \                                     Destination\n                      +-------------------+-------------------+\n\
    \                      |        32         |        64         |\n           +----+-----+-------------------+-------------------+\n\
    \           |    | W=0 |     Accept 32     |     Accept 32     |\n           |\
    \ 32 +-----+-------------------+-------------------+\n           |    | W=1 |\
    \        N/A        |        N/A        |\n   Source  +----+-----+-------------------+-------------------+\n\
    \           |    | W=0 |     Accept 32     |     Accept 32     |\n           |\
    \ 64 +-----+-------------------+-------------------+\n           |    | W=1 |\
    \      Reject       |     Accept 64     |\n           +----+-----+-------------------+-------------------+\n"
- title: HIPPI Connection Combinations
  contents:
  - "HIPPI Connection Combinations\n   If the path between a 64 bit Source and a 64\
    \ bit Destination includes\n   more than one switch, and the route between switches\
    \ uses a link that\n   is only 32 bits wide, the switch rejects 64 bit connection\
    \ requests\n   as if the Destination did not have 64 bit capability.\n   In a\
    \ mixed LAN of 32 bit and 64 bit HIPPIs, a 64 bit Source needs to\n   know the\
    \ data rates available at each Destination and on the path to\n   it.  This can\
    \ be known a priori by manual configuration, or it can be\n   discovered dynamically.\
    \  The only reliable method of discovery is\n   simply to attempt a 64 bit connection\
    \ with Camp-on.  As long as 64\n   bit connections succeed, the Source knows the\
    \ Destination and path\n   are double width.  If a 64 bit connection is rejected,\
    \ the Source\n   tries to connect for 32 bits.  If the 32 bit connection succeeds,\
    \ the\n   Source assumes that the Destination or path is not capable of double\n\
    \   width operation, and uses only 32 bit requests after that.  If the 32\n  \
    \ bit request is rejected, the Source assumes that the Destination or\n   path\
    \ is down and makes no determination of its capability.\n   The Double_Wide bit\
    \ in the HIPPI-LE header, if nonzero, gives the\n   node that receives it a hint\
    \ that the 64 bit connection attempt may\n   be worthwhile when sending on the\
    \ return path.\n   Note that Camp-on must be used at least in the 64 bit attempt,\n\
    \   because it removes some ambiguity from the meaning of rejects.  If\n   the\
    \ request is made with the \"W\" bit and no Camp-on, a reject could\n   mean either\
    \ that the Destination has no Cable B or that it is simply\n   busy, and no conclusion\
    \ can be drawn as to its status for 64 bit\n   connections.\n"
- title: 9  Performance
  contents:
  - "9  Performance\n   The HIPPI connection rules are designed to permit best utilization\
    \ of\n   the available HIPPI throughput under the constraint that each\n   Destination\
    \ must be made available frequently to receive packets from\n   different Sources.\
    \  This discipline asks both Sources and\n   Destinations to minimize connection\
    \ setup overhead to deliver high\n   performance.  Low connection setup times\
    \ are easily achieved by\n   hardware implementations, but overhead may be too\
    \ high if software is\n   required to execute between the initial request of a\
    \ connection and\n   the beginning of data transfer.  Hardware implementations\
    \ in which\n   connection setup and data transfer proceed from a single software\n\
    \   action are very desirable.\n   HIPPI connections are controlled by HIPPI Sources;\
    \ a Destination,\n   being unable to initiate a disconnect without the possibility\
    \ of data\n   loss, is a slave to the Source once it has accepted a connection.\n\
    \   Optimizations of connection strategy are therefore the province of\n   the\
    \ HIPPI Source, and several optimizations are permitted.\n   If the rate of available\
    \ message traffic is less than the available\n   HIPPI throughput and Destinations\
    \ are seldom busy when a connection\n   is requested, connection optimizations\
    \ do not pay off and the\n   simplest strategy of waiting indefinitely for each\
    \ connection to be\n   made and sending messages strictly in the order queued\
    \ cannot be\n   improved upon.  However if some nodes are slow, or network\n \
    \  applications can send or receive messages at a higher aggregate rate\n   than\
    \ the available HIPPI bandwidth, Sources may frequently encounter\n   a busy Destination.\
    \  In these cases, certain host output queuing\n   strategies may enhance channel\
    \ utilization.  Sources may maintain\n   separate output queues for different\
    \ HIPPI Destinations, and abandon\n   one Destination in favor of another if a\
    \ connection attempt without\n   Camp-on is rejected or a connection request with\
    \ Camp-on is not\n   accepted within a predetermined interval.  Such a strategy\
    \ results in\n   aborted connection sequences (defined in HIPPI-PH:  REQUEST is\n\
    \   deasserted before any data is sent).  Destinations must treat these\n   as\
    \ normal events, perhaps counting them but otherwise ignoring them.\n   Two components\
    \ of connection setup time are out of the control of\n   both Source and Destination.\
    \  One is the time required for the switch\n   to connect Source to Destination,\
    \ currently less than four\n   microseconds in the largest commercially available\
    \ (32 port) switch.\n   The second component is the round trip propagation time\
    \ of the\n   REQUEST and CONNECT signals, negligible on a standard 25 meter copper\n\
    \   HIPPI cable, but contributing a total of about 10 microseconds per\n   kilometer\
    \ on fiber optic links.  HIPPI-SC LANs spanning more than a\n   few kilometers\
    \ will have reduced throughput.  Limited span networks\n   with buffered gateways\
    \ or bridges between them may perform better\n   than long serial HIPPI links.\n\
    \   A Source is required to drop its connection after the transmission of\n  \
    \ 68 HIPPI bursts.  This number was chosen to allow the transmission of\n   one\
    \ maximum sized packet or a reasonable number of smaller sized\n   packets.  The\
    \ following table lists some possibilities, with\n   calculated maximum burst\
    \ and throughput rates in millions (10**6) of\n   bytes per second:\n        \
    \             Maximum HIPPI Throughput Rates\n        Number  Number  Hold  Burst\
    \  ------Max throughput MB/sec-------\n   User   of      of    Time  Rate    Connection\
    \ Setup Overhead (usec)\n   Data Packets Bursts (usec) MB/sec  10    30    60\
    \    90   120   150\n   ---- ------- ------ ------ ------ ----  ----  ----  ----\
    \  ----  ----\n   63K     1      64    654    98.7  97.2  94.4  90.4  86.8  83.4\
    \  80.3\n   32K     2      66    665    98.6  97.1  94.3  90.4  86.8  83.5  80.4\n\
    \   16K     4      68    667    98.3  96.8  94.1  90.2  86.6  83.3  80.2\n   \
    \ 8K     7      63    587    97.8  96.1  93.0  88.7  84.8  81.2  77.8\n    4K\
    \    13      65    551    96.7  95.0  91.7  87.2  83.1  79.4  76.0\n    2K   \
    \ 22      66    476    94.6  92.7  89.0  84.0  79.6  75.6  72.0\n    1K    34\
    \      68    384    90.8  88.5  84.2  78.5  73.5  75.8  65.3\n   These calculations\
    \ are based 259 40 ns clock periods to transmit a\n   full burst and 23 clock\
    \ periods for a short burst.  (HIPPI-PH\n   specifies three clock periods of overhead\
    \ per burst.) A packet of \"n\"\n   kilobytes of user data consists of \"n\" full\
    \ bursts and one short\n   burst equal in length to the number of bytes in the\
    \ HIPPI, LLC, IP\n   and TCP headers.  \"Hold Time\" is the minimum connection\
    \ duration\n   needed to send the packets.  \"Burst Rate\" is the effective transfer\n\
    \   rate for the duration of the connection, not counting connection\n   switching\
    \ time.  Throughput rates are in megabytes/second, accounting\n   for connection\
    \ switching times of 10, 30, 60, 90, 120 and 150\n   microseconds.  These calculations\
    \ ignore any limit on the rate at\n   which a Source or Destination can process\
    \ small packets; such limits\n   may further reduce the available throughput if\
    \ small packets are\n   used.\n"
- title: 10 Sharing the Switch
  contents:
  - "10 Sharing the Switch\n   Network interconnection is only one potential application\
    \ of HIPPI\n   and HIPPI-SC switches.  While network applications need very frequent\n\
    \   transient connections, other applications may favor longer term or\n   even\
    \ permanent connections between Source and Destination.  Since the\n   switch\
    \ can serve each Source or Destination with hardware paths\n   totally separate\
    \ from every other, it is quite feasible to use the\n   same switch to support\
    \ LAN interconnects and computer/peripheral\n   applications simultaneously.\n\
    \   Switch sharing is no problem when unlike applications do not share a\n   HIPPI\
    \ cable on any path.  However if a host must use a single input\n   or output\
    \ cable for network as well as other kinds of traffic, or if\n   a link between\
    \ switches must be shared, care must be taken to ensure\n   that all applications\
    \ are compatible with the connection discipline\n   described in this memo.  Applications\
    \ that hold connections too long\n   on links shared with network traffic may\
    \ cause loss of network\n   packets or serious degradation of network service.\n"
- title: 11 References
  contents:
  - "11 References\n   [1]  ANSI X3.183-1991, High-Performance Parallel Interface\
    \ -\n        Mechanical, Electrical and Signalling Protocol Specification\n  \
    \      (HIPPI-PH).\n   [2]  ANSI X3.210-1992, High-Performance Parallel Interface\
    \ - Framing\n        Protocol (HIPPI-FP).\n   [3]  ANSI X3.218-1993, High-Performance\
    \ Parallel Interface -\n        Encapsulation of IEEE 802.2 (IEEE Std 802.2) Logical\
    \ Link\n        Control Protocol Data Units (802.2 Link Encapsulation) (HIPPI-\n\
    \        LE).\n   [4]  ANSI X3.222-1993, High-Performance Parallel Interface -\
    \ Physical\n        Switch Control (HIPPI-SC).\n   [5]  Postel, J., \"Internet\
    \ Protocol\", STD 5, RFC 791, USC/Information\n        Sciences Institute, September\
    \ 1981.\n   [6]  IEEE, \"IEEE Standards for Local Area Networks: Logical Link\n\
    \        Control\", IEEE, New York, New York, 1985.\n   [7]  IEEE, \"IEEE Standards\
    \ for Local Area Networks: Logical Link\n        Control\", IEEE, New York, New\
    \ York, 1985.\n   [8]  Reynolds, J.K., and Postel, J., \"Assigned Numbers\", STD\
    \ 2, RFC\n        1340, USC/Information Sciences Institute, July 1992.\n   [9]\
    \  Mogul, J.C., and Deering, S.E., \"Path MTU discovery\", RFC 1191,\n       \
    \ Stanford University, November, 1990.\n"
- title: 12 Security Considerations
  contents:
  - "12 Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 13 Author's Address
  contents:
  - "13 Author's Address\n   John K. Renwick\n   NetStar, Inc.\n   10250 Valley View\
    \ Road\n   Minneapolis, MN USA 55344\n   Phone: (612) 996-6847\n   EMail: jkr@NetStar.com\n\
    \   Mailing List: hippi-ext@think.com\n"
- title: 14 Appendix A -- HIPPI Basics
  contents:
  - "14 Appendix A -- HIPPI Basics\n   This section is included as an aid to readers\
    \ who are not completely\n   familiar with the HIPPI standards.\n   HIPPI-PH describes\
    \ a parallel copper data channel between a Source\n   and a Destination.  HIPPI\
    \ transmits data in one direction only, so\n   that two sets are required for\
    \ bidirectional flow.  The following\n   figure shows a simple point-to-point\
    \ link between two computer\n   systems:\n   +----------+                    \
    \                    +----------+\n   |          |                           \
    \             |          |\n   |          +--------+                      +--------+\
    \          |\n   |          | HIPPI  |        Cable         | HIPPI  |       \
    \   |\n   |          |        +--------------------->|        |          |\n \
    \  |          | Source |                      | Dest.  |          |\n   |  System\
    \  +--------+                      +--------+  System  |\n   |    X     +--------+\
    \                      +--------+    Y     |\n   |          | HIPPI  |       \
    \ Cable         | HIPPI  |          |\n   |          |        |<---------------------+\
    \        |          |\n   |          | Dest.  |                      | Source\
    \ |          |\n   |          +--------+                      +--------+     \
    \     |\n   |          |                                        |          |\n\
    \   +----------+                                        +----------+\n"
- title: A Simple HIPPI Duplex Link
  contents:
  - "A Simple HIPPI Duplex Link\n   Parallel copper cables may be up to 25 meters\
    \ in length.\n   In this document, all HIPPI connections are assumed to be paired\n\
    \   HIPPI channels.\n   HIPPI-PH has a single optional feature: it can use a single\
    \ cable in\n   each direction for a 32 bit parallel channel with a maximum data\
    \ rate\n   of 800 megabit/second, or two cables for 64 bits and 1600\n   megabit/second.\
    \  Cable A carries bits 0-31 and is used in both modes;\n   Cable B carries bits\
    \ 32-63 and is use only with the 1600\n   megabit/second data rate option.\n"
- title: HIPPI Signal Hierarchy
  contents:
  - "HIPPI Signal Hierarchy\n   HIPPI has the following hardware signals:\n      Source\
    \ to Destination\n         INTERCONNECT A\n         INTERCONNECT B (64 bit only)\n\
    \         CLOCK (25 MHz)\n         REQUEST\n         PACKET\n         BURST\n\
    \         DATA (32 or 64 signals)\n         PARITY (4 or 8 signals)\n      Destination\
    \ to Source\n         INTERCONNECT A\n         INTERCONNECT B (64 bit only)\n\
    \         CONNECT\n         READY\n   The INTERCONNECT lines carry DC voltages\
    \ that indicate that the cable\n   is connected and that the remote interface\
    \ has power.  INTERCONNECT\n   is not used for signaling.\n   The CLOCK signal\
    \ is a continuous 25 MHz (40 ns period) square wave.\n   All Source-to-Destination\
    \ signals are synchronized to the clock.\n   The REQUEST and CONNECT lines are\
    \ used to establish logical\n   connections.  A connection is always initiated\
    \ by a Source as it\n   asserts REQUEST.  At the same time it puts 32 bits of\
    \ data on DATA\n   lines 0-31, called the I-field.  The Destination samples the\
    \ DATA\n   lines and can complete a connection by asserting CONNECT.  Packets\n\
    \   can be transmitted only while both REQUEST and CONNECT are asserted.\n   A\
    \ Destination can also reject a connection by asserting CONNECT for\n   only a\
    \ short interval between 4 and 16 HIPPI clock periods (160-640\n   nanoseconds).\
    \  The Source knows a connection has been accepted when\n   CONNECT is asserted\
    \ for more than 16 clocks or it receives a READY\n   pulse.\n   Either Source\
    \ or Destination can terminate a connection by\n   deasserting REQUEST or CONNECT,\
    \ respectively.  Normally connections\n   are terminated by the Source after its\
    \ last Packet has been sent.  A\n   Destination cannot terminate a connection\
    \ without potential loss of\n   data.\n                  +------+-------------------------+------+\n\
    \                  | Idle |        Connected        | Idle | . . .\n         \
    \         +------+-------------------------+------+\n                        /\
    \                           \\\n                       /                     \
    \        \\\n                      /                               \\\n      \
    \               /                                 \\\n                    /  \
    \                                 \\\n                   +-------+ +-------+ +-------+\
    \ +-------+\n                   |I-field| |Packet | |Packet | |Packet |\n    \
    \               +-------+ +-------+ +-------+ +-------+\n                    \
    \        /         \\\n                           /           \\\n           \
    \               /             \\\n                         /               \\\n\
    \                        /                 \\\n                       /      \
    \             \\\n                      /                     \\\n           \
    \          +-----+ +-----+   +-----+\n                     |Burst| |Burst|...|Burst|\n\
    \                     +-----+ +-----+   +-----+\n                    HIPPI Logical\
    \ Framing Hierarchy\n   The Source asserts PACKET for the duration of a Packet\
    \ transmission,\n   deasserting it to indicate the end of a Packet.  A sequence\
    \ of Bursts\n   comprise a Packet.  To send a burst, a Source asserts the BURST\n\
    \   signal for 256 clock periods, during which it places 256 words of\n   data\
    \ on the DATA lines.  The first or last Burst of a Packet may be\n   less than\
    \ 256 clock periods, allowing the transmission of any\n   integral number of 32\
    \ or 64 bit words in a Packet.\n   The READY signal is a pulse four or more clock\
    \ periods long.  Each\n   pulse signals the Source that the Destination can receive\
    \ one Burst.\n   The Destination need not wait for a burst before sending another\n\
    \   READY if it has burst buffers available; up to 63 unanswered READYs\n   may\
    \ be sent, allowing HIPPI to operate at full speed over distances\n   of many\
    \ kilometers.  If a Source must wait for flow control, it\n   inserts idle periods\
    \ between Bursts.\n                +------------------------------------------------+\n\
    \      REQUEST---+                                                +----\n    \
    \                  +--------------------------------------------+\n      CONNECT---------+\
    \                                            +--\n                         +---------------------------------------+\n\
    \      PACKET-------------+                                       +----\n    \
    \                   +-+   +-+   +-+   +-+   +-+   +-+   +-+   +-+\n      READY------------+\
    \ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +--\n                         +-------+\
    \ +-------+ +-------+ +-----+\n      BURST--------------+       +-+       +-+\
    \       +-+     +--------\n      DATA------I-field----DATA------DATA------DATA-----DATA----------\n\
    \                      HIPPI Signal Timing Diagram\n"
- title: Serial HIPPI
  contents:
  - "Serial HIPPI\n   There is no ANSI standard for HIPPI other than the parallel\
    \ copper\n   cable version.  However an implementors' agreement exists, specifying\n\
    \   a serial protocol to extend HIPPI signals on optical fiber or coaxial\n  \
    \ copper cable.  Serial links may be used interchangeably with parallel\n   links\
    \ to overcome HIPPI distance limitations; they are transparent to\n   the Source\
    \ and Destination, except for the possibility of longer\n   propagation delays.\n"
- title: I-Field and Switch Control
  contents:
  - "I-Field and Switch Control\n   The REQUEST, CONNECT and I-field features of HIPPI-PH\
    \ were designed\n   for the control of switches as described in HIPPI-SC.  A switch\
    \ is a\n   hub with a number of input and output HIPPI ports.  HIPPI Sources are\n\
    \   cabled to switch input ports, and switch output ports are cabled to\n   HIPPI\
    \ Destinations.  When a HIPPI Source requests a connection, the\n   switch interprets\
    \ the I-field to select an output port and\n   electrically connects the HIPPI\
    \ Source to the HIPPI Destination on\n   that port.  Once connected, the switch\
    \ does not interact with the\n   HIPPIs in any way until REQUEST or CONNECT is\
    \ deasserted, at which\n   time it breaks the physical connection and deasserts\
    \ its output\n   signals to both sides.  Some existing switch implementations\
    \ can\n   switch connections in less than one microsecond.  There is the\n   potential\
    \ for as many simultaneous connections, each transferring\n   data at HIPPI speeds,\
    \ as there are input or output ports on the\n   switch.  A switch offers much\
    \ greater total throughput capacity than\n   broadcast or ring media.\n      31\
    \    28  26    23                      11                     0\n      +-+---+-+-+---+-+-----------------------+-----------------------+\n\
    \      |L|   |W|D|PS |C|    Source Address     |  Destination Address  |\n   \
    \   +-+---+-+-+---+-+-----------------------+-----------------------+\n      \
    \            HIPPI-SC I-field Format (Logical Address Mode)\n           L  = Locally\
    \ defined (1 => entire I-field is locally defined)\n           W  = Width (1 =>\
    \ 64 bit connection)\n           D  = Direction (1 => swap Source and Destination\
    \ Address)\n           PS = Path Selection (01 => Logical Address Mode)\n    \
    \       C  = Camp-on (1 => wait until Destination is free)\n   HIPPI-SC defines\
    \ I-field formats for two different addressing modes.\n   The first, called Source\
    \ Routing, encodes a string of port numbers in\n   the lower 24 bits.  This string\
    \ specifies a route over a number of\n   switches.  A Destination's address may\
    \ differ from one Source to\n   another if multiple switches are used.\n   The\
    \ second format, called Logical Address Mode, defines two 12 bit\n   fields, Source\
    \ Address and Destination Address.  A Destination's 12\n   bit Switch Address\
    \ is the same for all Sources.  Switches commonly\n   have address lookup tables\
    \ to map 12 bit logical addresses to\n   physical ports.  This mode is used for\
    \ networking.\n"
- title: 'Control fields in the I-field are:'
  contents:
  - "Control fields in the I-field are:\n   L  The \"Locally Defined\" bit, when set,\
    \ indicates that the I-field\n      is not in the standard format.  The meaning\
    \ of bits 30-0 are\n      locally defined.\n   W  The Width bit, when set, requests\
    \ a 64 bit connection through\n      the switch.  It is meaningless if Cable B\
    \ is not installed at\n      the Source.  If W is set and either the Source or\
    \ the requested\n      Destination has no Cable B to the switch, the switch rejects\n\
    \      the connection.  Otherwise the switch connects both Cable A and\n     \
    \ Cable B if W is set, or Cable A only if W is clear.  This\n      feature is\
    \ useful if both Source and Destination\n      implementations can selectively\
    \ disable or enable Cable B on\n      each new connection.\n   D  The Direction\
    \ bit, when set, reverses the sense of the Source\n      Address and Destination\
    \ Address fields.  In other words, D=1\n      means that the Source Address is\
    \ in bits 0-11 and the\n      Destination Address is in bits 12-23.  This bit\
    \ was defined to\n      give devices a simple way to route return messages.  It\
    \ is not\n      useful for LAN operations.\n   PS The Path Selection field determines\
    \ whether the I-field\n      contains Source Route or Address information, and\
    \ in Logical\n      Address mode, whether the switch may select from multiple\n\
    \      possible routes to the destination.  The value \"01\" selects\n      Logical\
    \ Address mode and fixed routes.\n   C  The Camp-on bit requests the switch not\
    \ to reject the\n      connection if the selected Destination is busy (connected\
    \ to\n      another Source) but wait and make the connection when the\n      Destination\
    \ is free.\n"
- title: 15 Appendix B -- How to Build a Practical HIPPI LAN
  contents:
  - "15 Appendix B -- How to Build a Practical HIPPI LAN\n   \"IP on HIPPI\" describes\
    \ the network host's view of a HIPPI local area\n   network without providing\
    \ much information on the architecture of the\n   network itself.  Here we describe\
    \ a network constructed from\n   available HIPPI components, having the following\
    \ characteristics:\n   1.  A tree structure with a central HIPPI-SC compliant\
    \ hub and\n   optional satellite switches\n   2.  Each satellite is connected\
    \ to the hub by just one bidirectional\n   HIPPI link.\n   3.  Serial HIPPI or\
    \ transparent fiber optic HIPPI extender devices\n   may be used in any link.\n\
    \   4.  Some satellites may be a particular switch product which is not\n   HIPPI-SC\
    \ compliant.\n   5.  Host systems are attached either directly to the hub or to\n\
    \   satellites, by single bidirectional links in which both HIPPI cables\n   go\
    \ to the same numbered switch port.\n"
- title: Switch Address Management
  contents:
  - "Switch Address Management\n   Switch addresses use a flat address space.  The\
    \ 12-bit address is\n   subdivided into 6 bits of switch number and 6 bits of\
    \ port number.\n   11                       5                     0\n      +-----------------------+-----------------------+\n\
    \      |     Switch Number     |      Port Number      |\n      +-----------------------+-----------------------+\n"
- title: Logical Address Construction
  contents:
  - "Logical Address Construction\n   Switches may be numbered arbitrarily.  A given\
    \ host's address\n   consists of the number of the switch it is directly attached\
    \ to and\n   the physical port number on that switch to which its input channel\
    \ is\n   attached.\n   In the singly-connected tree structure, there is exactly\
    \ one path\n   between any pair of hosts.  Since each satellite must be connected\n\
    \   directly to the hub, the maximum length of this path is three hops,\n   and\
    \ the minimum length is one.  Each HIPPI-SC compliant switch is\n   programmed\
    \ to map each of the host switch addresses to the\n   appropriate output port:\
    \ either the port to which the host is\n   directly attached or a port that is\
    \ linked to another switch in the\n   path to it.\n"
- title: Special Treatment of Nonstandard Switches
  contents:
  - "Special Treatment of Nonstandard Switches\n   There is one commercially available\
    \ switch that was designed\n   before the drafting of HIPPI-SC and is not fully\
    \ compliant.  It is\n   in common use, so it is worth making some special provisions\
    \ to\n   allow its use in a HIPPI LAN.  This switch supports only the\n   Source\
    \ Route mode of addressing with a four bit right shift that\n   can be disabled\
    \ by a hardware switch on each input port.\n   Addresses cannot be mapped.  The\
    \ switch does not support the \"W\",\n   \"D\", or \"PS\" fields of the I-field;\
    \ it ignores their contents.\n   Use of this switch as a satellite will require\
    \ a slight deviation\n   from normal I-field usage by the hosts that are directly\
    \ attached\n   to it.  Hosts attached to standard switches are not affected.\n\
    \   For a destination connected to a non compliant satellite, the\n   satellite\
    \ uses only the least significant four bits of the I-field\n   as the address.\
    \  Since the address contains the destination's\n   physical port number in the\
    \ least significant bits, its port will\n   be selected.  Nonstandard switches\
    \ should be set to disable I-\n   field shifting at the input from the hub, so\
    \ that the destination\n   host will see its correct switch address in the I-field\
    \ when\n   performing self-address discovery.  I-field shifting must be\n   enabled\
    \ on the satellite for each input port to which a host is\n   attached.\n   Hosts\
    \ attached to nonstandard satellites must deviate from the\n   normal I-field\
    \ usage when connecting to hosts on another switch.\n   It is suggested that all\
    \ host implementations have this capability\n   as long as the nonstandard switches\
    \ remain in use.  The host must\n   know, by some manual configuration method,\
    \ that it is connected to\n   a nonstandard switch, and it must have its \"link\
    \ port\" number;\n   that is, the number of the port on the satellite that is\
    \ connected\n   to the hub.\n   The normal I-field format for a 32-bit connection,\
    \ per the\n   document, is this:\n   31        26    23                      11\
    \                     0\n   +---------+---+-+-----------------------+-----------------------+\n\
    \   |0 0 0 0 0|x 1|C|        Unused         |  Destination Address  |\n   +---------+---+-+-----------------------+-----------------------+\n\
    \   The special I-field format is:\n   31        26  24                15    \
    \                 4 3     0\n   +---------+---+-+---------------+-----------------------+-------+\n\
    \   |0 0 0 0 0|x 1|C|    Unused     |  Destination Address  | Link  |\n   +---------+---+-+---------------+-----------------------+-------+\n\
    \   This I-field is altered by shifting the lower 24 bits left by four\n   and\
    \ adding the link port number.  Camp-on is optional, and the PS\n   field is set\
    \ to 01 or 11 (the host's option) as if the switch\n   supported logical address\
    \ mode.  All other I-field bits are set to\n   zero.  When the host requests a\
    \ connection with this I-field, the\n   switch selects a connection through the\
    \ link port to the hub, and\n   shifts the lower 24 bits of the I-field right\
    \ by four bits.  The link\n   port number is discarded and the I-field passed\
    \ through to the hub is\n   a proper HIPPI-SC I-field selecting logical address\
    \ mode.\n   A host on a nonstandard satellite may use the special I-field format\n\
    \   for all connection requests.  If connecting to another host on the\n   same\
    \ satellite, this will cause the connection to take an\n   unnecessarily long\
    \ path through the hub and back.  If an optimization\n   is desired, the host\
    \ can be given additional information to allow it\n   to use the standard I-field\
    \ format when connecting to another host on\n   the same switch.  This information\
    \ could consist of a list of the\n   other hosts on the same switch, or the details\
    \ of address formation,\n   along with the switch number of the local satellite,\
    \ which would\n   allow the host to analyze the switch address to determine whether\
    \ or\n   not the destination is on the local switch.  This optimization is\n \
    \  fairly complicated and may not always be worthwhile.\n"
