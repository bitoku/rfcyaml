- title: __initial_text__
  contents:
  - "                     Definitions of Managed Objects\n             for IEEE 802.3\
    \ Medium Attachment Units (MAUs)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" for the standardization state and status\n   of this protocol.\
    \  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a portion of the Management Information Base\n\
    \   (MIB) for use with network management protocols in TCP/IP-based\n   internets.\
    \  In particular, it defines objects for managing IEEE 802.3\n   Medium Attachment\
    \ Units (MAUs).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   5. Acknowledgments .......................................\
    \   21\n   6. References ............................................   23\n \
    \  7. Security Considerations ...............................   24\n   8. Authors'\
    \ Addresses ....................................   25\n"
- title: 1.  The Network Management Framework
  contents:
  - "1.  The Network Management Framework\n   The Internet-standard Network Management\
    \ Framework consists of three\n   components.  They are:\n      STD 16, RFC 1155\
    \ [1] which defines the SMI, the mechanisms used\n      for describing and naming\
    \ objects for the purpose of management.\n      STD 16, RFC 1212 [7] defines a\
    \ more concise description mechanism,\n      which is wholly consistent with the\
    \ SMI.\n      STD 17, RFC 1213 [4] which defines MIB-II, the core set of managed\n\
    \      objects for the Internet suite of protocols.\n      STD 15, RFC 1157 [3]\
    \ which defines the SNMP, the protocol used for\n      network access to managed\
    \ objects.\n   The Framework permits new objects to be defined for the purpose\
    \ of\n   experimentation and evaluation.\n"
- title: 2.  Object Definitions
  contents:
  - "2.  Object Definitions\n   Managed objects are accessed via a virtual information\
    \ store, termed\n   the Management Information Base or MIB.  Objects in the MIB\
    \ are\n   defined using the subset of Abstract Syntax Notation One (ASN.1)\n \
    \  defined in the SMI.  In particular, each object object type is named\n   by\
    \ an OBJECT IDENTIFIER, an administratively assigned name.  The\n   object type\
    \ together with an object instance serves to uniquely\n   identify a specific\
    \ instantiation of the object.  For human\n   convenience, we often use a textual\
    \ string, termed the descriptor, to\n   refer to the object type.\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   Instances of the object types defined in this document represent\n\
    \   attributes of an IEEE 802.3 MAU.  Several types of MAUs are defined\n   in\
    \ the IEEE 802.3/ISO 8802-3 CSMA/CD standard [9].\n   These MAUs may be connected\
    \ to IEEE 802.3 repeaters or to 802.3\n   (Ethernet-like) interfaces.  For convenience\
    \ this document refers to\n   these devices as \"repeater MAUs\" and \"interface\
    \ MAUs.\"\n   The definitions presented here are based on Draft 5 of Section 20\
    \ of\n   IEEE P802.3p, \"Layer Management for 10 Mb/s Medium Attachment Units\n\
    \   (MAUs), Section 20\" [10] dated 11 July 1992.\n"
- title: 3.1.  Terminology
  contents:
  - "3.1.  Terminology\n   Refer to Section 3.1.2 of [13] for simple definitions of\
    \ the terms\n   \"repeater,\" \"port,\" and \"MAU\" as used in the context of\
    \ this\n   document.  For a more complete and precise definition of these terms,\n\
    \   refer to Section 9 of [9].\n"
- title: 3.2.  Structure of MIB
  contents:
  - "3.2.  Structure of MIB\n   Objects in this MIB are arranged into MIB groups.\
    \  Each MIB group is\n   organized as a set of related objects.\n"
- title: 3.2.1.  The Repeater MAU Basic Group Definitions
  contents:
  - "3.2.1.  The Repeater MAU Basic Group Definitions\n   This group contains all\
    \ repeater MAU-related configuration, status,\n   and control objects.  Implementation\
    \ of the dot3RpMauBasicGroup is\n   mandatory for MAUs attached to repeaters.\n"
- title: 3.2.2.  The Interface MAU Basic Group Definitions
  contents:
  - "3.2.2.  The Interface MAU Basic Group Definitions\n   This group contains all\
    \ interface MAU-related configuration, status,\n   and control objects.  Implementation\
    \ of the dot3IfMauBasicGroup is\n   mandatory for MAUs attached to interfaces.\n"
- title: 3.2.3.  The Broadband MAU Basic Group Definitions
  contents:
  - "3.2.3.  The Broadband MAU Basic Group Definitions\n   This group contains all\
    \ broadband-specific MAU-related configuration\n   objects.  Implementation of\
    \ the dot3BroadMauBasicGroup is mandatory\n   for 10BROAD36 MAUs, and is not appropriate\
    \ for other types of MAUs.\n"
- title: 3.3.  Relationship to Other MIBs
  contents:
  - "3.3.  Relationship to Other MIBs\n   It is assumed that an agent implementing\
    \ this MIB will also implement\n   (at least) the 'system' group defined in MIB-II\
    \ [4].  The following\n   sections identify other MIBs that such an agent should\
    \ implement.\n"
- title: 3.3.1.  Relationship to the 'system' group
  contents:
  - "3.3.1.  Relationship to the 'system' group\n   In MIB-II, the 'system' group\
    \ is defined as being mandatory for all\n   systems such that each managed entity\
    \ contains one instance of each\n   object in the 'system' group.  Thus, those\
    \ objects apply to the\n   entity even if the entity's sole functionality is management\
    \ of a\n   MAU.\n"
- title: 3.3.2.  Relationship to the 'interfaces' group
  contents:
  - "3.3.2.  Relationship to the 'interfaces' group\n   The sections of this document\
    \ that define interface MAU-related\n   objects specify an extension to the 'interfaces'\
    \ group of MIB-II [4].\n   An agent implementing these interface-MAU related objects\
    \ must also\n   implement the 'interfaces' group of MIB-II.  The value of the\
    \ same as\n   the value of 'ifIndex' used to instantiate the interface to which\
    \ the\n   given MAU is connected.\n   It is expected that an agent implementing\
    \ the interface-MAU related\n   objects in this MIB will also implement the Ethernet-like\
    \ Interfaces\n   MIB [11].\n   (Note that repeater ports are not represented as\
    \ interfaces in the\n   sense of MIB-II's 'interfaces' group.  See section 3.4.2\
    \ of the\n   repeater MIB [12] for more details.)\n"
- title: 3.3.3.  Relationship to the 802.3 Repeater MIB
  contents:
  - "3.3.3.  Relationship to the 802.3 Repeater MIB\n   The section of this document\
    \ that defines repeater MAU-related\n   objects specifies an extension to the\
    \ 802.3 Repeater MIB defined in\n   [13].  An agent implementing these repeater-MAU\
    \ related objects must\n   also implement the 802.3 Repeater MIB.\n   The values\
    \ of 'rpMauGroupIndex' and 'rpMauPortIndex' used to\n   instantiate a repeater\
    \ MAU variable shall be the same as the values\n   of 'rptrPortGroupIndex' and\
    \ 'rptrPortIndex' used to instantiate the\n   port to which the given MAU is connected.\n"
- title: 3.4.  Management of Internal MAUs
  contents:
  - "3.4.  Management of Internal MAUs\n   In some situations, a MAU can be \"internal\"\
    \ -- i.e., its\n   functionality is implemented entirely within a device.  For\
    \ example,\n   a managed repeater may contain an internal repeater- MAU and/or\
    \ an\n   internal interface-MAU through which management communications\n   originating\
    \ on one of the repeater's external ports pass in order to\n   reach the management\
    \ agent associated with the repeater.  Such\n   internal MAUs may or may not be\
    \ managed.  If they are managed,\n   objects describing their attributes should\
    \ appear in the appropriate\n   MIB group -- dot3RpMauBasicGroup for internal\
    \ repeater-MAUs and\n   dot3IfMauBasicGroup for internal interface-MAUs.\n"
- title: 4.  Definitions
  contents:
  - "4.  Definitions\n        MAU-MIB DEFINITIONS ::= BEGIN\n        IMPORTS\n   \
    \         Counter                             FROM RFC1155-SMI\n            OBJECT-TYPE\
    \                         FROM RFC-1212\n            TRAP-TYPE               \
    \            FROM RFC-1215;\n        snmpDot3MauMgt OBJECT IDENTIFIER ::= { mib-2\
    \ 26 }\n        --                      References\n        --\n        -- The\
    \ following references are used throughout this MIB:\n        --\n        -- [RFC\
    \ 1213]\n        --    refers to McCloghrie, K., and M. Rose, Editors,\n     \
    \   --    Management Information Base for Network Management\n        --    of\
    \ TCP/IP-based internets: MIB-II, STD 17, RFC 1213,\n        --    Hughes LAN\
    \ Systems, Performance Systems International,\n        --    March 1991.\n   \
    \     --\n        -- [RFC 1368]\n        --    refers to McMaster, D.,  and K.\
    \ McCloghrie, Editors,\n        --    Definitions of Managed Objects for IEEE\
    \ 802.3 Repeater\n        --    Devices, RFC 1368, SynOptics Communications, Hughes\n\
    \        --    LAN Systems, October 1992.\n        --\n        -- [IEEE 802.3\
    \ MAU Mgt]\n        --    refers to IEEE P802.3p, 'Layer Management for 10 Mb/s\n\
    \        --    Medium Access Unit (MAUs), Section 20,' Draft Supplement\n    \
    \    --    to ANSI/IEEE 802.3, Draft 5, 11 July 1992.\n        --            \
    \          MIB Groups\n        --\n        --   The dot3RpMauBasicGroup is mandatory\
    \ for MAUs attached to\n        --     repeaters.\n        --   The dot3IfMauBasicGroup\
    \ is mandatory for MAUs attached to\n        --     DTEs (interfaces).\n     \
    \   --   The dot3BroadMauBasicGroup is mandatory for broadband MAUs\n        --\
    \     attached to DTEs.\n        dot3RpMauBasicGroup\n            OBJECT IDENTIFIER\
    \ ::= { snmpDot3MauMgt 1 }\n        dot3IfMauBasicGroup\n            OBJECT IDENTIFIER\
    \ ::= { snmpDot3MauMgt 2 }\n        dot3BroadMauBasicGroup\n            OBJECT\
    \ IDENTIFIER ::= { snmpDot3MauMgt 3 }\n        -- object identifiers for MAU types\n\
    \        --  (see rpMauType and ifMauType for usage)\n        dot3MauType\n  \
    \          OBJECT IDENTIFIER ::= { snmpDot3MauMgt 4 }\n        dot3MauTypeAUI\
    \        -- no internal MAU, view from AUI\n            OBJECT IDENTIFIER ::=\
    \ { dot3MauType 1 }\n        dot3MauType10Base5    -- thick coax MAU (per 802.3\
    \ section 8)\n            OBJECT IDENTIFIER ::= { dot3MauType 2 }\n        dot3MauTypeFoirl\
    \      -- FOIRL MAU (per 802.3 section 9.9)\n            OBJECT IDENTIFIER ::=\
    \ { dot3MauType 3 }\n        dot3MauType10Base2    -- thin coax MAU (per 802.3\
    \ section 10)\n            OBJECT IDENTIFIER ::= { dot3MauType 4 }\n        dot3MauType10BaseT\
    \    -- UTP MAU (per 802.3 section 14)\n            OBJECT IDENTIFIER ::= { dot3MauType\
    \ 5 }\n        dot3MauType10BaseFP   -- passive fiber MAU (per 802.3 section 16)\n\
    \            OBJECT IDENTIFIER ::= { dot3MauType 6 }\n        dot3MauType10BaseFB\
    \   -- sync fiber MAU (per 802.3 section 17)\n            OBJECT IDENTIFIER ::=\
    \ { dot3MauType 7 }\n        dot3MauType10BaseFL   -- async fiber MAU (per 802.3\
    \ section 18)\n            OBJECT IDENTIFIER ::= { dot3MauType 8 }\n        dot3MauType10Broad36\
    \  -- broadband DTE MAU (per 802.3 section 11)\n            -- note that 10BROAD36\
    \ MAUs can be attached to interfaces but\n            -- not to repeaters\n  \
    \          OBJECT IDENTIFIER ::= { dot3MauType 9 }\n        --\n        --   \
    \                 The Repeater MAU Basic Group\n        --\n        -- Implementation\
    \ of the Repeater MAU Basic Group is mandatory\n        -- for MAUs attached to\
    \ repeaters.\n        --\n        -- The Basic Repeater MAU Table\n        --\n\
    \        rpMauTable OBJECT-TYPE\n            SYNTAX    SEQUENCE OF RpMauEntry\n\
    \            ACCESS    not-accessible\n            STATUS    mandatory\n     \
    \       DESCRIPTION\n                    \"Table of descriptive and status information\
    \ about\n                    the MAU(s) attached to the ports of a repeater.\"\
    \n            ::= { dot3RpMauBasicGroup 1 }\n        rpMauEntry OBJECT-TYPE\n\
    \            SYNTAX    RpMauEntry\n            ACCESS    not-accessible\n    \
    \        STATUS    mandatory\n            DESCRIPTION\n                    \"\
    An entry in the table, containing information\n                    about a single\
    \ MAU.\"\n            INDEX    { rpMauGroupIndex, rpMauPortIndex, rpMauIndex }\n\
    \            ::= { rpMauTable 1 }\n        RpMauEntry ::=\n            SEQUENCE\
    \ {\n                rpMauGroupIndex\n                    INTEGER,\n         \
    \       rpMauPortIndex\n                    INTEGER,\n                rpMauIndex\n\
    \                    INTEGER,\n                rpMauType\n                   \
    \ OBJECT IDENTIFIER,\n                rpMauStatus\n                    INTEGER,\n\
    \                rpMauMediaAvailable\n                    INTEGER,\n         \
    \       rpMauMediaAvailableStateExits\n                    Counter,\n        \
    \        rpMauJabberState\n                    INTEGER,\n                rpMauJabberingStateEnters\n\
    \                    Counter\n            }\n        rpMauGroupIndex OBJECT-TYPE\n\
    \            SYNTAX    INTEGER (1..1024)\n            ACCESS    read-only\n  \
    \          STATUS    mandatory\n            DESCRIPTION\n                    \"\
    This variable uniquely identifies the repeater\n                    group containing\
    \ the port to which the MAU\n                    described by this entry is connected.\"\
    \n            REFERENCE\n                    \"Reference RFC1368, rptrGroupIndex.\"\
    \n            ::= { rpMauEntry 1 }\n        rpMauPortIndex OBJECT-TYPE\n     \
    \       SYNTAX    INTEGER (1..1024)\n            ACCESS    read-only\n       \
    \     STATUS    mandatory\n            DESCRIPTION\n                    \"This\
    \ variable uniquely identifies the repeater\n                    port within group\
    \ rpMauGroupIndex to which the MAU\n                    described by this entry\
    \ is connected.\"\n            REFERENCE\n                    \"Reference RFC\
    \ 1368, rptrPortIndex.\"\n            ::= { rpMauEntry 2 }\n        rpMauIndex\
    \ OBJECT-TYPE\n            SYNTAX    INTEGER (1..9)\n            ACCESS    read-only\n\
    \            STATUS    mandatory\n            DESCRIPTION\n                  \
    \  \"This variable uniquely identifies the MAU\n                    connected\
    \ to port rpMauPortIndex within group\n                    rpMauGroupIndex that\
    \ is described by this entry.\"\n            REFERENCE\n                    \"\
    Reference IEEE 802.3 MAU Mgt, 20.2.3.2, aMAUID.\"\n            ::= { rpMauEntry\
    \ 3 }\n        rpMauType OBJECT-TYPE\n            SYNTAX    OBJECT IDENTIFIER\n\
    \            ACCESS    read-only\n            STATUS    mandatory\n          \
    \  DESCRIPTION\n                    \"This object identifies the 10 Mb/s baseband\
    \ MAU\n                    type.  An initial set of MAU types are defined\n  \
    \                  above.  The assignment of OBJECT IDENTIFIERs to\n         \
    \           new types of MAUs is managed by the IANA.  If the\n              \
    \      MAU type is unknown, the object identifier\n                        unknownMauType\
    \ OBJECT IDENTIFIER ::= { 0 0 }\n                    is returned.  Note that unknownMauType\
    \ is a\n                    syntactically valid object identifier, and any\n \
    \                   conformant implementation of ASN.1 and the BER\n         \
    \           must be able to generate and recognize this\n                    value.\"\
    \n            REFERENCE\n                    \"Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n\
    \                    aMAUType.\"\n            ::= { rpMauEntry 4 }\n        rpMauStatus\
    \ OBJECT-TYPE\n            SYNTAX    INTEGER {\n                          other(1),\n\
    \                          unknown(2),\n                          operational(3),\n\
    \                          standby(4),\n                          shutdown(5),\n\
    \                          reset(6)\n                      }\n            ACCESS\
    \    read-write\n            STATUS    mandatory\n            DESCRIPTION\n  \
    \                  \"The current state of the MAU.  This object may be\n     \
    \               implemented as a read-only object by those agents\n          \
    \          and MAUs that do not implement software control of\n              \
    \      the MAU state.  Some agents may not support\n                    setting\
    \ the value of this object to some of the\n                    enumerated values.\n\
    \                    The value other(1) is returned if the MAU is in a\n     \
    \               state other than one of the states 2 through 6.\n            \
    \        The value unknown(2) is returned when the MAU's\n                   \
    \ true state is unknown; for example, when it is\n                    being initialized.\n\
    \                    A MAU in the operational(3) state is fully\n            \
    \        functional, operates, and passes signals to its\n                   \
    \ attached DTE or repeater port in accordance to its\n                    specification.\n\
    \                    A MAU in standby(4) state forces DI and CI and the\n    \
    \                media transmitter to idle.  Standby(4) mode only\n          \
    \          applies to link type MAUs.  The state of\n                    rpMauMediaAvailable\
    \ is unaffected.\n                    A MAU in shutdown(5) state assumes the same\n\
    \                    condition on DI, CI, and the media transmitter as\n     \
    \               though it were powered down.  The MAU may return\n           \
    \         other(1) value for the mauJabber and\n                    rpMauMediaAvailable\
    \ objects when it is in this\n                    state.  For an AUI, this state\
    \ will remove power\n                    from the AUI.\n                    Setting\
    \ this variable to the value reset(6) resets\n                    the MAU in the\
    \ same manner as a power-off, power-\n                    on cycle of at least\
    \ one-half second would.  The\n                    agent is not required to return\
    \ the value reset\n                    (6).\n                    Setting this\
    \ variable to the value operational(3),\n                    standby(4), or shutdown(5)\
    \ causes the MAU to\n                    assume the respective state except that\
    \ setting a\n                    mixing-type MAU or an AUI to standby(4) will\
    \ cause\n                    the MAU to enter the shutdown state.\"\n        \
    \        REFERENCE\n                    \"Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n\
    \                    aMAUAdminState, and 20.2.3.3, acMAUAdminControl\n       \
    \             and acResetMAUAction.\"\n            ::= { rpMauEntry 5 }\n    \
    \    rpMauMediaAvailable OBJECT-TYPE\n            SYNTAX    INTEGER {\n      \
    \                    other(1),\n                          unknown(2),\n      \
    \                    available(3),\n                          notAvailable(4),\n\
    \                          remoteFault(5),\n                          invalidSignal(6)\n\
    \                      }\n            ACCESS    read-only\n            STATUS\
    \    mandatory\n            DESCRIPTION\n                    \"If the MAU is a\
    \ link or fiber type (FOIRL,\n                    10BASE-T, 10BASE-F) then this\
    \ is equivalent to the\n                    link test fail state/low light function.\
    \  For an\n                    AUI or a coax (including broadband) MAU this\n\
    \                    indicates whether or not loopback is detected on\n      \
    \              the DI circuit.  The value of this attribute\n                \
    \    persists between packets for MAU types AUI,\n                    10BASE5,\
    \ 10BASE2, 10BROAD36, and 10BASE-FP.\n                    The value other(1) is\
    \ returned if the\n                    mediaAvailable state is not one of 2 through\
    \ 6.\n                    The value unknown(2) is returned when the MAU's\n  \
    \                  true state is unknown; for example, when it is\n          \
    \          being initialized.  At power-up or following a\n                  \
    \  reset, the value of this attribute will be unknown\n                    for\
    \ AUI, coax, and 10BASE-FP MAUs.  For these MAUs\n                    loopback\
    \ will be tested on each transmission\n                    during which no collision\
    \ is detected.  If DI is\n                    receiving input when DO returns\
    \ to IDL after a\n                    transmission and there has been no collision\n\
    \                    during the transmission then loopback will be\n         \
    \           detected.  The value of this attribute will only\n               \
    \     change during non-collided transmissions for AUI,\n                    coax,\
    \ and 10BASE-FP MAUs.\n                    The value available(3) indicates that\
    \ the link,\n                    light, or loopback is normal.  The value\n  \
    \                  notAvailable(4) indicates link loss, low light, or\n      \
    \              no loopback.\n                    The value remoteFault(5) indicates\
    \ that a fault\n                    has been detected at the remote end of the\
    \ link.\n                    The value invalidSignal(6) indicates that an\n  \
    \                  invalid signal has been received from the other\n         \
    \           end of the link.  Both remoteFault(5) and\n                    invalidSignal(6)\
    \ apply only to MAUs of type\n                    10BASE-FB.\"\n            REFERENCE\n\
    \                    \"Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n             \
    \       aMediaAvailable.\"\n            ::= { rpMauEntry 6 }\n        rpMauMediaAvailableStateExits\
    \ OBJECT-TYPE\n            SYNTAX    Counter\n            ACCESS    read-only\n\
    \            STATUS    mandatory\n            DESCRIPTION\n                  \
    \  \"A count of the number of times that\n                    rpMauMediaAvailable\
    \ for this MAU instance leaves\n                    the state available(3).\"\n\
    \            REFERENCE\n                    \"Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n\
    \                    lostMediaCount.\"\n            ::= { rpMauEntry 7 }\n   \
    \     rpMauJabberState OBJECT-TYPE\n            SYNTAX    INTEGER {\n        \
    \                  other(1),\n                          unknown(2),\n        \
    \                  noJabber(3),\n                          jabbering(4)\n    \
    \                  }\n            ACCESS    read-only\n            STATUS    mandatory\n\
    \            DESCRIPTION\n                    \"The value other(1) is returned\
    \ if the jabber\n                    state is not 2, 3, or 4.  The agent must\
    \ always\n                    return other(1) for MAU type dot3MauTypeAUI.\n \
    \                   The value unknown(2) is returned when the MAU's\n        \
    \            true state is unknown; for example, when it is\n                \
    \    being initialized.\n                    If the MAU is not jabbering the agent\
    \ returns\n                    noJabber(3).  This is the 'normal' state.\n   \
    \                 If the MAU is in jabber state the agent returns\n          \
    \          the jabbering(4) value.\"\n            REFERENCE\n                \
    \    \"Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    aJabber.jabberFlag.\"\
    \n            ::= { rpMauEntry 8 }\n        rpMauJabberingStateEnters OBJECT-TYPE\n\
    \            SYNTAX    Counter\n            ACCESS    read-only\n            STATUS\
    \    mandatory\n            DESCRIPTION\n                    \"A count of the\
    \ number of times that\n                    rpMauJabberState for this MAU instance\
    \ enters the\n                    state jabbering(4).  For a MAU of type\n   \
    \                 dot3MauTypeAUI, this counter will always indicate\n        \
    \            zero.\"\n            REFERENCE\n                    \"Reference IEEE\
    \ 802.3 MAU Mgt, 20.2.3.2,\n                    aJabber.jabberCounter.\"\n   \
    \         ::= { rpMauEntry 9 }\n        --\n        --                    The\
    \ Interface MAU Basic Group\n        --\n        -- Implementation of the Interface\
    \ MAU Basic Group is mandatory\n        -- for MAUs attached to DTEs (interfaces).\n\
    \        --\n        -- The Basic Interface MAU Table\n        --\n        ifMauTable\
    \ OBJECT-TYPE\n            SYNTAX    SEQUENCE OF IfMauEntry\n            ACCESS\
    \    not-accessible\n            STATUS    mandatory\n            DESCRIPTION\n\
    \                    \"Table of descriptive and status information about\n   \
    \                 the MAU(s) attached to an interface.\"\n            ::= { dot3IfMauBasicGroup\
    \ 1 }\n        ifMauEntry OBJECT-TYPE\n            SYNTAX    IfMauEntry\n    \
    \        ACCESS    not-accessible\n            STATUS    mandatory\n         \
    \   DESCRIPTION\n                    \"An entry in the table, containing information\n\
    \                    about a single MAU.\"\n            INDEX    { ifMauIfIndex,\
    \ ifMauIndex }\n            ::= { ifMauTable 1 }\n        IfMauEntry ::=\n   \
    \         SEQUENCE {\n                ifMauIfIndex\n                    INTEGER,\n\
    \                ifMauIndex\n                    INTEGER,\n                ifMauType\n\
    \                    OBJECT IDENTIFIER,\n                ifMauStatus\n       \
    \             INTEGER,\n                ifMauMediaAvailable\n                \
    \    INTEGER,\n                ifMauMediaAvailableStateExits\n               \
    \     Counter,\n                ifMauJabberState\n                    INTEGER,\n\
    \                ifMauJabberingStateEnters\n                    Counter\n    \
    \        }\n        ifMauIfIndex OBJECT-TYPE\n            SYNTAX    INTEGER\n\
    \            ACCESS    read-only\n            STATUS    mandatory\n          \
    \  DESCRIPTION\n                    \"This variable uniquely identifies the interface\n\
    \                    to which the MAU described by this entry is\n           \
    \         connected.\"\n            REFERENCE\n                    \"Reference\
    \ RFC 1213, ifIndex.\"\n            ::= { ifMauEntry 1 }\n        ifMauIndex OBJECT-TYPE\n\
    \            SYNTAX    INTEGER (1..9)\n            ACCESS    read-only\n     \
    \       STATUS    mandatory\n            DESCRIPTION\n                    \"This\
    \ variable uniquely identifies the MAU\n                    connected to interface\
    \ ifMauIfIndex that is\n                    described by this entry.\"\n     \
    \       REFERENCE\n                    \"Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\
    \ aMAUID.\"\n            ::= { ifMauEntry 2 }\n        ifMauType OBJECT-TYPE\n\
    \            SYNTAX    OBJECT IDENTIFIER\n            ACCESS    read-only\n  \
    \          STATUS    mandatory\n            DESCRIPTION\n                    \"\
    This object identifies the 10 Mb/s baseband or\n                    broadband\
    \ MAU type.  An initial set of MAU types\n                    are defined above.\
    \  The assignment of OBJECT\n                    IDENTIFIERs to new types of MAUs\
    \ is managed by the\n                    IANA.  If the MAU type is unknown, the\
    \ object\n                    identifier\n                        unknownMauType\
    \ OBJECT IDENTIFIER ::= { 0 0 }\n                    is returned.  Note that unknownMauType\
    \ is a\n                    syntactically valid object identifier, and any\n \
    \                   conformant implementation of ASN.1 and the BER\n         \
    \           must be able to generate and recognize this\n                    value.\"\
    \n            REFERENCE\n                    \"Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n\
    \                    aMAUType.\"\n            ::= { ifMauEntry 3 }\n        ifMauStatus\
    \ OBJECT-TYPE\n            SYNTAX    INTEGER {\n                          other(1),\n\
    \                          unknown(2),\n                          operational(3),\n\
    \                          standby(4),\n                          shutdown(5),\n\
    \                          reset(6)\n                      }\n            ACCESS\
    \    read-write\n            STATUS    mandatory\n            DESCRIPTION\n  \
    \                  \"The current state of the MAU.  This object may be\n     \
    \               implemented as a read-only object by those agents\n          \
    \          and MAUs that do not implement software control of\n              \
    \      the MAU state.  Some agents may not support\n                    setting\
    \ the value of this object to some of the\n                    enumerated values.\n\
    \                    The value other(1) is returned if the MAU is in a\n     \
    \               state other than one of the states 2 through 6.\n            \
    \        The value unknown(2) is returned when the MAU's\n                   \
    \ true state is unknown; for example, when it is\n                    being initialized.\n\
    \                    A MAU in the operational(3) state is fully\n            \
    \        functional, operates, and passes signals to its\n                   \
    \ attached DTE or repeater port in accordance to its\n                    specification.\n\
    \                    A MAU in standby(4) state forces DI and CI and the\n    \
    \                media transmitter to idle.  Standby(4) mode only\n          \
    \          applies to link type MAUs.  The state of\n                    ifMauMediaAvailable\
    \ is unaffected.\n                    A MAU in shutdown(5) state assumes the same\n\
    \                    condition on DI, CI, and the media transmitter as\n     \
    \               though it were powered down.  The MAU may return\n           \
    \         other(1) value for the mauJabber and\n                    ifMauMediaAvailable\
    \ objects when it is in this\n                    state.  For an AUI, this state\
    \ will remove power\n                    from the AUI.\n                    Setting\
    \ this variable to the value reset(6) resets\n                    the MAU in the\
    \ same manner as a power-off, power-\n                    on cycle of at least\
    \ one-half second would.  The\n                    agent is not required to return\
    \ the value reset\n                    (6).\n                    Setting this\
    \ variable to the value operational(3),\n                    standby(4), or shutdown(5)\
    \ causes the MAU to\n                    assume the respective state except that\
    \ setting a\n                    mixing-type MAU or an AUI to standby(4) will\
    \ cause\n                    the MAU to enter the shutdown state.\"\n        \
    \        REFERENCE\n                    \"Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n\
    \                    aMAUAdminState, and 20.2.3.3, acMAUAdminControl\n       \
    \             and acResetMAUAction.\"\n            ::= { ifMauEntry 4 }\n    \
    \    ifMauMediaAvailable OBJECT-TYPE\n            SYNTAX    INTEGER {\n      \
    \                    other(1),\n                          unknown(2),\n      \
    \                    available(3),\n                          notAvailable(4),\n\
    \                          remoteFault(5),\n                          invalidSignal(6)\n\
    \                      }\n            ACCESS    read-only\n            STATUS\
    \    mandatory\n            DESCRIPTION\n                    \"If the MAU is a\
    \ link or fiber type (FOIRL,\n                    10BASE-T, 10BASE-F) then this\
    \ is equivalent to the\n                    link test fail state/low light function.\
    \  For an\n                    AUI or a coax (including broadband) MAU this\n\
    \                    indicates whether or not loopback is detected on\n      \
    \              the DI circuit.  The value of this attribute\n                \
    \    persists between packets for MAU types AUI,\n                    10BASE5,\
    \ 10BASE2, 10BROAD36, and 10BASE-FP.\n                    The value other(1) is\
    \ returned if the\n                    mediaAvailable state is not one of 2 through\
    \ 6.\n                    The value unknown(2) is returned when the MAU's\n  \
    \                  true state is unknown; for example, when it is\n          \
    \          being initialized.  At power-up or following a\n                  \
    \  reset, the value of this attribute will be unknown\n                    for\
    \ AUI, coax, and 10BASE-FP MAUs.  For these MAUs\n                    loopback\
    \ will be tested on each transmission\n                    during which no collision\
    \ is detected.  If DI is\n                    receiving input when DO returns\
    \ to IDL after a\n                    transmission and there has been no collision\n\
    \                    during the transmission then loopback will be\n         \
    \           detected.  The value of this attribute will only\n               \
    \     change during non-collided transmissions for AUI,\n                    coax,\
    \ and 10BASE-FP MAUs.\n                    The value available(3) indicates that\
    \ the link,\n                    light, or loopback is normal.  The value\n  \
    \                  notAvailable(4) indicates link loss, low light, or\n      \
    \              no loopback.\n                    The value remoteFault(5) indicates\
    \ that a fault\n                    has been detected at the remote end of the\
    \ link.\n                    The value invalidSignal(6) indicates that an\n  \
    \                  invalid signal has been received from the other\n         \
    \           end of the link.  Both remoteFault(5) and\n                    invalidSignal(6)\
    \ apply only to MAUs of type\n                    10BASE-FB.\"\n            REFERENCE\n\
    \                    \"Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n             \
    \       aMediaAvailable.\"\n            ::= { ifMauEntry 5 }\n        ifMauMediaAvailableStateExits\
    \ OBJECT-TYPE\n            SYNTAX    Counter\n            ACCESS    read-only\n\
    \            STATUS    mandatory\n            DESCRIPTION\n                  \
    \  \"A count of the number of times that\n                    ifMauMediaAvailable\
    \ for this MAU instance leaves\n                    the state available(3).\"\n\
    \            REFERENCE\n                    \"Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n\
    \                    lostMediaCount.\"\n            ::= { ifMauEntry 6 }\n   \
    \     ifMauJabberState OBJECT-TYPE\n            SYNTAX    INTEGER {\n        \
    \                  other(1),\n                          unknown(2),\n        \
    \                  noJabber(3),\n                          jabbering(4)\n    \
    \                  }\n            ACCESS    read-only\n            STATUS    mandatory\n\
    \            DESCRIPTION\n                    \"The value other(1) is returned\
    \ if the jabber\n                    state is not 2, 3, or 4.  The agent must\
    \ always\n                    return other(1) for MAU type dot3MauTypeAUI.\n \
    \                   The value unknown(2) is returned when the MAU's\n        \
    \            true state is unknown; for example, when it is\n                \
    \    being initialized.\n                    If the MAU is not jabbering the agent\
    \ returns\n                    noJabber(3).  This is the 'normal' state.\n   \
    \                 If the MAU is in jabber state the agent returns\n          \
    \          the jabbering(4) value.\"\n            REFERENCE\n                \
    \    \"Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    aJabber.jabberFlag.\"\
    \n            ::= { ifMauEntry 7 }\n        ifMauJabberingStateEnters OBJECT-TYPE\n\
    \            SYNTAX    Counter\n            ACCESS    read-only\n            STATUS\
    \    mandatory\n            DESCRIPTION\n                    \"A count of the\
    \ number of times that\n                    ifMauJabberState for this MAU instance\
    \ enters the\n                    state jabbering(4).  For a MAU of type\n   \
    \                 dot3MauTypeAUI, this counter will always indicate\n        \
    \            zero.\"\n            REFERENCE\n                    \"Reference IEEE\
    \ 802.3 MAU Mgt, 20.2.3.2,\n                    aJabber.jabberCounter.\"\n   \
    \         ::= { ifMauEntry 8 }\n        --\n        --                    The\
    \ Broadband MAU Basic Group\n        --\n        -- Implementation of the Broadband\
    \ MAU Basic Group is mandatory\n        -- for broadband MAUs attached to DTEs.\n\
    \        --\n        -- The Basic Broadband MAU Table\n        --\n        broadMauBasicTable\
    \ OBJECT-TYPE\n            SYNTAX    SEQUENCE OF BroadMauBasicEntry\n        \
    \    ACCESS    not-accessible\n            STATUS    mandatory\n            DESCRIPTION\n\
    \                    \"Table of descriptive and status information about\n   \
    \                 the broadband MAUs connected to interfaces.\"\n            ::=\
    \ { dot3BroadMauBasicGroup 1 }\n        broadMauBasicEntry OBJECT-TYPE\n     \
    \       SYNTAX    BroadMauBasicEntry\n            ACCESS    not-accessible\n \
    \           STATUS    mandatory\n            DESCRIPTION\n                   \
    \ \"An entry in the table, containing information\n                    about a\
    \ single broadband MAU.\"\n            INDEX    { broadMauIfIndex, broadMauIndex\
    \ }\n            ::= { broadMauBasicTable 1 }\n        BroadMauBasicEntry ::=\n\
    \            SEQUENCE {\n                broadMauIfIndex\n                   \
    \ INTEGER,\n                broadMauIndex\n                    INTEGER,\n    \
    \            broadMauXmtRcvSplitType\n                    INTEGER,\n         \
    \       broadMauXmtCarrierFreq\n                    INTEGER,\n               \
    \ broadMauTranslationFreq\n                    INTEGER\n            }\n      \
    \  broadMauIfIndex OBJECT-TYPE\n            SYNTAX    INTEGER\n            ACCESS\
    \    read-only\n            STATUS    mandatory\n            DESCRIPTION\n   \
    \                 \"This variable uniquely identifies the interface\n        \
    \            to which the MAU described by this entry is\n                   \
    \ connected.\"\n            REFERENCE\n                    \"Reference RFC 1213,\
    \ ifIndex.\"\n            ::= { broadMauBasicEntry 1 }\n        broadMauIndex\
    \ OBJECT-TYPE\n            SYNTAX    INTEGER (1..9)\n            ACCESS    read-only\n\
    \            STATUS    mandatory\n            DESCRIPTION\n                  \
    \  \"This variable uniquely identifies the MAU\n                    connected\
    \ to interface broadMauIfIndex that is\n                    described by this\
    \ entry.\"\n            REFERENCE\n                    \"Reference IEEE 802.3\
    \ MAU Mgt, 20.2.3.2, aMAUID.\"\n            ::= { broadMauBasicEntry 2 }\n   \
    \     broadMauXmtRcvSplitType OBJECT-TYPE\n            SYNTAX    INTEGER {\n \
    \                         other(1),\n                          single(2),\n  \
    \                        dual(3)\n                      }\n            ACCESS\
    \    read-only\n            STATUS    mandatory\n            DESCRIPTION\n   \
    \                 \"This object indicates the type of frequency\n            \
    \        multiplexing/cabling system used to separate the\n                  \
    \  transmit and receive paths for the 10BROAD36 MAU.\n                    The\
    \ value other(1) is returned if the split type\n                    is not either\
    \ single or dual.\n                    The value single(2) indicates a single\
    \ cable\n                    system.  The value dual(3) indicates a dual cable\n\
    \                    system, offset normally zero.\"\n            REFERENCE\n\
    \                    \"Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n             \
    \       aBbMAUXmitRcvSplitType.\"\n            ::= { broadMauBasicEntry 3 }\n\
    \        broadMauXmtCarrierFreq OBJECT-TYPE\n            SYNTAX    INTEGER\n \
    \           ACCESS    read-only\n            STATUS    mandatory\n           \
    \ DESCRIPTION\n                    \"This variable indicates the transmit carrier\n\
    \                    frequency of the 10BROAD36 MAU in MHz/4; that is,\n     \
    \               in units of 250 kHz.\"\n            REFERENCE\n              \
    \      \"Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    aBroadbandFrequencies.xmitCarrierFrequency.\"\
    \n            ::= { broadMauBasicEntry 4 }\n        broadMauTranslationFreq OBJECT-TYPE\n\
    \            SYNTAX    INTEGER\n            ACCESS    read-only\n            STATUS\
    \    mandatory\n            DESCRIPTION\n                    \"This variable indicates\
    \ the translation offset\n                    frequency of the 10BROAD36 MAU in\
    \ MHz/4; that is,\n                    in units of 250 kHz.\"\n            REFERENCE\n\
    \                    \"Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n             \
    \       aBroadbandFrequencies.translationFrequency.\"\n            ::= { broadMauBasicEntry\
    \ 5 }\n        -- Traps for use by 802.3 MAUs\n        -- Traps are defined using\
    \ the conventions in RFC 1215 [8].\n        rpMauJabberTrap TRAP-TYPE\n      \
    \      ENTERPRISE  snmpDot3MauMgt\n            VARIABLES   { rpMauJabberState\
    \ }\n            DESCRIPTION\n                    \"This trap is sent whenever\
    \ a managed repeater MAU\n                    enters the jabber state.\n     \
    \               The agent must throttle the generation of\n                  \
    \  consecutive rpMauJabberTraps so that there is at\n                    least\
    \ a five-second gap between them.\"\n            REFERENCE\n                 \
    \   \"Reference IEEE 802.3 MAU Mgt, 20.2.3.4,\n                    nJabberNotification.\"\
    \n            ::= 1\n        ifMauJabberTrap TRAP-TYPE\n            ENTERPRISE\
    \  snmpDot3MauMgt\n            VARIABLES   { ifMauJabberState }\n            DESCRIPTION\n\
    \                    \"This trap is sent whenever a managed interface\n      \
    \              MAU enters the jabber state.\n                    The agent must\
    \ throttle the generation of\n                    consecutive ifMauJabberTraps\
    \ so that there is at\n                    least a five-second gap between them.\"\
    \n            REFERENCE\n                    \"Reference IEEE 802.3 MAU Mgt, 20.2.3.4,\n\
    \                    nJabberNotification.\"\n            ::= 2\n        END\n"
- title: 5.  Acknowledgments
  contents:
  - "5.  Acknowledgments\n   This document is the work of the IETF Hub MIB Working\
    \ Group.  It is\n   based on a proposal written by Geoff Thompson and modified\
    \ by the\n   IEEE 802.3 Repeater Management Task Force.  Paul Woodruff provided\n\
    \   valuable corrections and suggestions for improvement.\n   Members of the IETF\
    \ Hub MIB Working Group included:\n             Karl Auerbach            karl@eng.sun.com\n\
    \             Jim Barnes               barnes@xylogics.com\n             Steve\
    \ Bostock            steveb@novell.com\n             David Bridgham          \
    \ dab@asylum.sf.ca.us\n             Jack Brown               jbrown@huahuca-emh8.army.mil\n\
    \             Howard Brown             brown@ctron.com\n             Lida Canin\
    \               lida@apple.com\n             Jeffrey Case             case@cs.utk.edu\n\
    \             Carson Cheung            carson@bnr.com.ca\n             James Codespote\
    \          jpcodes@tycho.ncsc.mil\n             John Cook                cook@chipcom.com\n\
    \             Dave Cullerot            cullerot@ctron.com\n             James\
    \ Davin              jrd@ptt.lcs.mit.edu\n             Gary Ellis            \
    \   garye@hpspd.spd.hp.com\n             David Engel              david@cds.com\n\
    \             Mike Erlinger            mike@mti.com\n             Jeff Erwin\n\
    \             Bill Fardy               fardy@ctron.com\n             Jeff Fried\
    \               jmf@relay.proteon.com\n             Bob Friesenhahn          pdrusa!bob@uunet.uu.net\n\
    \             Shawn Gallagher          gallagher@quiver.enet.dec.com\n       \
    \      Mike Grieves             mgrieves@chipcom.com\n             Walter Guilarte\
    \          70026.1715@compuserve.com\n             Phillip Hasse            phasse@honchuca-emh8.army.mil\n\
    \             Mark Hoerth              mark_hoerth@hp0400.desk.hp.com\n      \
    \       Greg Hollingsworth       gregh@mailer.jhuapl.edu\n             Ron Jacoby\
    \               rj@sgi.com\n             Mike Janson              mjanson@mot.com\n\
    \             Ken Jones                konkord!ksj@uunet.uu.net\n            \
    \ Satish Joshi             sjoshi@synoptics.com\n             Frank Kastenholz\
    \         kasten@europa.clearpoint.com\n             Manu Kaycee             \
    \ kaycee@trlian.enet.dec.com\n             Mark Kepke               mak@cnd.hp.com\n\
    \             Mark Kerestes            att!alux2!hawk@uunet.uu.net\n         \
    \    Kenneth Key              key@cs.utk.edu\n             Yoav Kluger       \
    \       ykluger@fibhaifa.com\n             Cheryl Krupczak          cheryl@cc.gatech.edu\n\
    \             Ron Lau                  rlau@synoptics.com\n             Chao-Yu\
    \ Liang            cliang@synoptics.com\n             Dave Lindemulder       \
    \  da@mtung.att.com\n             Richie McBride           rm@bix.co.uk\n    \
    \         Keith McCloghrie         kzm@hls.com\n             Evan McGinnis   \
    \         bem@3com.com\n             Donna McMaster           mcmaster@synoptics.com\n\
    \             David Minnich            dwm@fibercom.com\n             Lynn Monsanto\
    \            monsanto@sun.com\n             Miriam Nihart            miriam@decwet.zso.dec.com\n\
    \             Niels Ole Brunsgaard     nob@dowtyns.dk\n             Edison Paw\
    \               esp@3com.com\n             David Perkins            dperkins@synoptics.com\n\
    \             Jason Perreault          perreaul@interlan.interlan.com\n      \
    \       John Pickens             jrp@3com.com\n             Jim Reinstedler  \
    \        jimr@sceng.ub.com\n             Anil Rijsinghani         anil@levers.enet.dec.com\n\
    \             Sam Roberts              sroberts@farallon.com\n             Dan\
    \ Romascanu            dan@lannet.com\n             Marshall Rose            mrose@dbc.mtview.ca.us\n\
    \             Rick Royston             rick@lsumus.sncc.lsu.edu\n            \
    \ Michael Sabo             sabo@dockmaster.ncsc.mil\n             Jonathan Saperia\
    \         saperia@tcpjon.enet.dec.com\n             Mark Schaefer            schaefer@davidsys.com\n\
    \             Anil Singhal             nsinghal@hawk.ulowell.edu\n           \
    \  Timon Sloane             peernet!timon@uunet.uu.net\n             Bob Stewart\
    \              rlstewart@eng.xyplex.com\n             Emil Sturniolo         \
    \  emil@dss.com\n             Bruce Taber              taber@interlan.com\n  \
    \           Iris Tal                 437-3580@mcimail.com\n             Mark Therieau\
    \            markt@python.eng.microcom.com\n             Geoff Thompson      \
    \     thompson@synoptics.com\n             Dean Throop              throop@dg-rtp.dg.com\n\
    \             Steven Waldbusser        waldbusser@andrew.cmu.edu\n           \
    \  Timothy Walden           tmwalden@saturn.sys.acc.com\n             Philip Wang\
    \              watadn!phil@uunet.uu.net\n             Drew Wansley           \
    \  dwansley@secola.columbia.ncr.com\n             David Ward               dward@chipcom.com\n\
    \             Steve Wong               wong@took.enet.dec.com\n             Paul\
    \ Woodruff            paul-woodruff@3com.com\n             Brian Wyld        \
    \       brianw@spider.co.uk\n             June-Kang Yang           natadm!yang@uunet.uu.net\n\
    \             Henry Yip                natadm!henry@uunet.uu.net\n           \
    \  John Ziegler             ziegler@artel.com\n             Joseph Zur       \
    \        zur@fibhaifa.com\n"
- title: 6.  References
  contents:
  - "6.  References\n   [1]  Rose, M., and K. McCloghrie, \"Structure and Identification\
    \ of\n        Management Information for TCP/IP-based internets\", STD 16, RFC\n\
    \        1155, Performance Systems International, Hughes LAN Systems, May\n  \
    \      1990.\n   [2]  McCloghrie, K., and M. Rose, \"Management Information Base\
    \ for\n        Network Management of TCP/IP-based internets\", RFC 1156, Hughes\n\
    \        LAN Systems, Performance Systems International, May 1990.\n   [3]  Case,\
    \ J., Fedor M., Schoffstall, M., and J. Davin, \"Simple\n        Network Management\
    \ Protocol\", STD 15, RFC 1157, SNMP Research,\n        Performance Systems International,\
    \ Performance Systems\n        International, MIT Laboratory for Computer Science,\
    \ May 1990.\n   [4]  McCloghrie, K., and M. Rose, Editors, \"Management Information\n\
    \        Base for Network Management of TCP/IP-based internets: MIB-II\",\n  \
    \      STD 17, RFC 1213, Hughes LAN Systems, Performance Systems\n        International,\
    \ March 1991.\n   [5]  Information processing systems - Open Systems Interconnection\
    \ -\n        Specification of Abstract Syntax Notation One (ASN.1),\n        International\
    \ Organization for Standardization, International\n        Standard 8824, December\
    \ 1987.\n   [6]  Information processing systems - Open Systems Interconnection\
    \ -\n        Specification of Basic Encoding Rules for Abstract Notation One\n\
    \        (ASN.1), International Organization for Standardization,\n        International\
    \ Standard 8825, December 1987.\n   [7]  Rose, M., and K. McCloghrie, Editors,\
    \ \"Concise MIB Definitions\",\n        STD 16, RFC 1212, Performance Systems\
    \ International, Hughes LAN\n        Systems, March 1991.\n   [8]  Rose, M., Editor,\
    \ \"A Convention for Defining Traps for use with\n        the SNMP\", RFC 1215,\
    \ Performance Systems International, March\n        1991.\n   [9]  IEEE 802.3/ISO\
    \ 8802-3 Information processing systems - Local\n        area networks - Part\
    \ 3:  Carrier sense multiple access with\n        collision detection (CSMA/CD)\
    \ access method and physical layer\n        specifications, 2nd edition, September\
    \ 21, 1990.\n   [10] IEEE P802.3p, \"Layer Management for 10 Mb/s Medium Access\
    \ Unit\n        (MAUs), Section 20\", Draft Supplement to ANSI/IEEE 802.3, Draft\n\
    \        5, July 11, 1992.\n   [11] Kastenholz, F., \"Definitions of Managed Objects\
    \ for the\n        Ethernet-like Interface Types\", RFC 1398, FTP Software, Inc.,\n\
    \        January 1993.\n   [12] McMaster, D., and K. McCloghrie, Editors, \"Definitions\
    \ of\n        Managed Objects for IEEE 802.3 Repeater Devices\", RFC 1368,\n \
    \       SynOptics Communications, Hughes LAN Systems, October 1992.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 8.  Authors' Addresses
  contents:
  - "8.  Authors' Addresses\n   Donna McMaster\n   SynOptics Communications, Inc.\n\
    \   4401 Great America Parkway\n   P.O. Box 58185\n   Santa Clara, CA 95052-8185\n\
    \   Phone: (408) 764-1206\n   EMail: mcmaster@synoptics.com\n   Keith McCloghrie\n\
    \   Hughes LAN Systems, Inc.\n   1225 Charleston Road\n   Mountain View, CA 94043\n\
    \   Phone: (415) 966-7934\n   EMail: kzm@hls.com\n   Sam Roberts\n   Farallon\
    \ Computing, Inc.\n   2470 Mariner Square Loop\n   Alameda, CA 94501-1010\n  \
    \ Phone: (510) 814-5215\n   EMail: sroberts@farallon.com\n"
