- contents:
  - '                       OAuth 2.0 Token Revocation

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document proposes an additional endpoint for OAuth authorization\n
    \  servers, which allows clients to notify the authorization server that\n   a
    previously obtained refresh or access token is no longer needed.\n   This allows
    the authorization server to clean up security\n   credentials.  A revocation request
    will invalidate the actual token\n   and, if applicable, other tokens based on
    the same authorization\n   grant.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7009.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n     1.1.  Requirements Language . . . . . . . . . . . . . . .
    . . .   3\n   2.  Token Revocation  . . . . . . . . . . . . . . . . . . . . .
    .   3\n     2.1.  Revocation Request  . . . . . . . . . . . . . . . . . . .   4\n
    \    2.2.  Revocation Response . . . . . . . . . . . . . . . . . . .   5\n       2.2.1.
    \ Error Response  . . . . . . . . . . . . . . . . . . .   6\n     2.3.  Cross-Origin
    Support  . . . . . . . . . . . . . . . . . .   6\n   3.  Implementation Note .
    . . . . . . . . . . . . . . . . . . . .   7\n   4.  IANA Considerations . . .
    . . . . . . . . . . . . . . . . . .   8\n     4.1.  OAuth Extensions Error Registration
    . . . . . . . . . . .   8\n       4.1.1.  The \"unsupported_token_type\" Error
    Value  . . . . . .   8\n       4.1.2.  OAuth Token Type Hints Registry . . . .
    . . . . . . .   8\n         4.1.2.1.  Registration Template . . . . . . . . .
    . . . . .   9\n         4.1.2.2.  Initial Registry Contents . . . . . . . . .
    . . .   9\n   5.  Security Considerations . . . . . . . . . . . . . . . . . .
    .   9\n   6.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  10\n
    \  7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  10\n     7.1.
    \ Normative References  . . . . . . . . . . . . . . . . . .  10\n     7.2.  Informative
    References  . . . . . . . . . . . . . . . . .  11\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The OAuth 2.0 core specification [RFC6749] defines several
    ways for a\n   client to obtain refresh and access tokens.  This specification\n
    \  supplements the core specification with a mechanism to revoke both\n   types
    of tokens.  A token is a string representing an authorization\n   grant issued
    by the resource owner to the client.  A revocation\n   request will invalidate
    the actual token and, if applicable, other\n   tokens based on the same authorization
    grant and the authorization\n   grant itself.\n   From an end-user's perspective,
    OAuth is often used to log into a\n   certain site or application.  This revocation
    mechanism allows a\n   client to invalidate its tokens if the end-user logs out,
    changes\n   identity, or uninstalls the respective application.  Notifying the\n
    \  authorization server that the token is no longer needed allows the\n   authorization
    server to clean up data associated with that token\n   (e.g., session data) and
    the underlying authorization grant.  This\n   behavior prevents a situation in
    which there is still a valid\n   authorization grant for a particular client of
    which the end-user is\n   not aware.  This way, token revocation prevents abuse
    of abandoned\n   tokens and facilitates a better end-user experience since invalidated\n
    \  authorization grants will no longer turn up in a list of\n   authorization
    grants the authorization server might present to the\n   end-user.\n"
  - contents:
    - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      RFC 2119 [RFC2119].\n"
    title: 1.1.  Requirements Language
  title: 1.  Introduction
- contents:
  - "2.  Token Revocation\n   Implementations MUST support the revocation of refresh
    tokens and\n   SHOULD support the revocation of access tokens (see Implementation\n
    \  Note).\n   The client requests the revocation of a particular token by making
    an\n   HTTP POST request to the token revocation endpoint URL.  This URL\n   MUST
    conform to the rules given in [RFC6749], Section 3.1.  Clients\n   MUST verify
    that the URL is an HTTPS URL.\n   The means to obtain the location of the revocation
    endpoint is out of\n   the scope of this specification.  For example, the client
    developer\n   may consult the server's documentation or automatic discovery may
    be\n   used.  As this endpoint is handling security credentials, the\n   endpoint
    location needs to be obtained from a trustworthy source.\n   Since requests to
    the token revocation endpoint result in the\n   transmission of plaintext credentials
    in the HTTP request, URLs for\n   token revocation endpoints MUST be HTTPS URLs.
    \ The authorization\n   server MUST use Transport Layer Security (TLS) [RFC5246]
    in a version\n   compliant with [RFC6749], Section 1.6.  Implementations MAY also\n
    \  support additional transport-layer security mechanisms that meet\n   their
    security requirements.\n   If the host of the token revocation endpoint can also
    be reached over\n   HTTP, then the server SHOULD also offer a revocation service
    at the\n   corresponding HTTP URI, but it MUST NOT publish this URI as a token\n
    \  revocation endpoint.  This ensures that tokens accidentally sent over\n   HTTP
    will be revoked.\n"
  - contents:
    - "2.1.  Revocation Request\n   The client constructs the request by including
      the following\n   parameters using the \"application/x-www-form-urlencoded\"
      format in\n   the HTTP request entity-body:\n   token   REQUIRED.  The token
      that the client wants to get revoked.\n   token_type_hint  OPTIONAL.  A hint
      about the type of the token\n           submitted for revocation.  Clients MAY
      pass this parameter in\n           order to help the authorization server to
      optimize the token\n           lookup.  If the server is unable to locate the
      token using\n           the given hint, it MUST extend its search across all
      of its\n           supported token types.  An authorization server MAY ignore\n
      \          this parameter, particularly if it is able to detect the\n           token
      type automatically.  This specification defines two\n           such values:\n
      \          * access_token: An access token as defined in [RFC6749],\n             Section
      1.4\n           * refresh_token: A refresh token as defined in [RFC6749],\n
      \            Section 1.5\n           Specific implementations, profiles, and
      extensions of this\n           specification MAY define other values for this
      parameter\n           using the registry defined in Section 4.1.2.\n   The client
      also includes its authentication credentials as described\n   in Section 2.3.
      of [RFC6749].\n   For example, a client may request the revocation of a refresh
      token\n   with the following request:\n     POST /revoke HTTP/1.1\n     Host:
      server.example.com\n     Content-Type: application/x-www-form-urlencoded\n     Authorization:
      Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\n     token=45ghiukldjahdnhzdauz&token_type_hint=refresh_token\n
      \  The authorization server first validates the client credentials (in\n   case
      of a confidential client) and then verifies whether the token\n   was issued
      to the client making the revocation request.  If this\n   validation fails,
      the request is refused and the client is informed\n   of the error by the authorization
      server as described below.\n   In the next step, the authorization server invalidates
      the token.\n   The invalidation takes place immediately, and the token cannot
      be\n   used again after the revocation.  In practice, there could be a\n   propagation
      delay, for example, in which some servers know about the\n   invalidation while
      others do not.  Implementations should minimize\n   that window, and clients
      must not try to use the token after receipt\n   of an HTTP 200 response from
      the server.\n   Depending on the authorization server's revocation policy, the\n
      \  revocation of a particular token may cause the revocation of related\n   tokens
      and the underlying authorization grant.  If the particular\n   token is a refresh
      token and the authorization server supports the\n   revocation of access tokens,
      then the authorization server SHOULD\n   also invalidate all access tokens based
      on the same authorization\n   grant (see Implementation Note).  If the token
      passed to the request\n   is an access token, the server MAY revoke the respective
      refresh\n   token as well.\n   Note: A client compliant with [RFC6749] must
      be prepared to handle\n   unexpected token invalidation at any time.  Independent
      of the\n   revocation mechanism specified in this document, resource owners
      may\n   revoke authorization grants, or the authorization server may\n   invalidate
      tokens in order to mitigate security threats.  Thus,\n   having different server
      policies with respect to cascading the\n   revocation of tokens should not pose
      interoperability problems.\n"
    title: 2.1.  Revocation Request
  - contents:
    - "2.2.  Revocation Response\n   The authorization server responds with HTTP status
      code 200 if the\n   token has been revoked successfully or if the client submitted
      an\n   invalid token.\n   Note: invalid tokens do not cause an error response
      since the client\n   cannot handle such an error in a reasonable way.  Moreover,
      the\n   purpose of the revocation request, invalidating the particular token,\n
      \  is already achieved.\n   The content of the response body is ignored by the
      client as all\n   necessary information is conveyed in the response code.\n
      \  An invalid token type hint value is ignored by the authorization\n   server
      and does not influence the revocation response.\n"
    - contents:
      - "2.2.1.  Error Response\n   The error presentation conforms to the definition
        in Section 5.2 of\n   [RFC6749].  The following additional error code is defined
        for the\n   token revocation endpoint:\n   unsupported_token_type:  The authorization
        server does not support\n           the revocation of the presented token
        type.  That is, the\n           client tried to revoke an access token on
        a server not\n           supporting this feature.\n   If the server responds
        with HTTP status code 503, the client must\n   assume the token still exists
        and may retry after a reasonable delay.\n   The server may include a \"Retry-After\"
        header in the response to\n   indicate how long the service is expected to
        be unavailable to the\n   requesting client.\n"
      title: 2.2.1.  Error Response
    title: 2.2.  Revocation Response
  - contents:
    - "2.3.  Cross-Origin Support\n   The revocation endpoint MAY support Cross-Origin
      Resource Sharing\n   (CORS) [W3C.WD-cors-20120403] if it is aimed at use in
      combination\n   with user-agent-based applications.\n   In addition, for interoperability
      with legacy user-agents, it MAY\n   also offer JSONP (Remote JSON - JSONP) [jsonp]
      by allowing GET\n   requests with an additional parameter:\n   callback  OPTIONAL.
      \ The qualified name of a JavaScript function.\n   For example, a client may
      request the revocation of an access token\n   with the following request (line
      breaks are for display purposes\n   only):\n     https://example.com/revoke?token=agabcdefddddafdd&\n
      \    callback=package.myCallback\n   Successful response:\n     package.myCallback();\n
      \  Error response:\n     package.myCallback({\"error\":\"unsupported_token_type\"});\n
      \  Clients should be aware that when relying on JSONP, a malicious\n   revocation
      endpoint may attempt to inject malicious code into the\n   client.\n"
    title: 2.3.  Cross-Origin Support
  title: 2.  Token Revocation
- contents:
  - "3.  Implementation Note\n   OAuth 2.0 allows deployment flexibility with respect
    to the style of\n   access tokens.  The access tokens may be self-contained so
    that a\n   resource server needs no further interaction with an authorization\n
    \  server issuing these tokens to perform an authorization decision of\n   the
    client requesting access to a protected resource.  A system\n   design may, however,
    instead use access tokens that are handles\n   referring to authorization data
    stored at the authorization server.\n   This consequently requires a resource
    server to issue a request to\n   the respective authorization server to retrieve
    the content of the\n   access token every time a client presents an access token.\n
    \  While these are not the only options, they illustrate the\n   implications
    for revocation.  In the latter case, the authorization\n   server is able to revoke
    an access token previously issued to a\n   client when the resource server relays
    a received access token.  In\n   the former case, some (currently non-standardized)
    backend\n   interaction between the authorization server and the resource server\n
    \  may be used when immediate access token revocation is desired.\n   Another
    design alternative is to issue short-lived access tokens,\n   which can be refreshed
    at any time using the corresponding refresh\n   tokens.  This allows the authorization
    server to impose a limit on\n   the time revoked when access tokens are in use.\n
    \  Which approach of token revocation is chosen will depend on the\n   overall
    system design and on the application service provider's risk\n   analysis.  The
    cost of revocation in terms of required state and\n   communication overhead is
    ultimately the result of the desired\n   security properties.\n"
  title: 3.  Implementation Note
- contents:
  - "4.  IANA Considerations\n   This specification registers an error value in the
    \"OAuth Extensions\n   Error Registry\" and establishes the \"OAuth Token Type
    Hints\"\n   registry.\n"
  - contents:
    - "4.1.  OAuth Extensions Error Registration\n   This specification registers
      the following error value in the \"OAuth\n   Extensions Error Registry\" defined
      in [RFC6749].\n"
    - contents:
      - "4.1.1.  The \"unsupported_token_type\" Error Value\n   Error name:  unsupported_token_type\n
        \  Error Usage Location:  Revocation endpoint error response\n   Related Protocol
        Extension:  Token Revocation Endpoint\n   Change controller:  IETF\n   Specification
        document(s):  [RFC7009]\n"
      title: 4.1.1.  The "unsupported_token_type" Error Value
    - contents:
      - "4.1.2.  OAuth Token Type Hints Registry\n   This specification establishes
        the \"OAuth Token Type Hints\" registry.\n   Possible values of the parameter
        \"token_type_hint\" (see Section 2.1)\n   are registered with a Specification
        Required ([RFC5226]) after a two-\n   week review period on the oauth-ext-review@ietf.org
        mailing list, on\n   the advice of one or more Designated Experts.  However,
        to allow for\n   the allocation of values prior to publication, the Designated\n
        \  Expert(s) may approve registration once they are satisfied that such\n
        \  a specification will be published.  Registration requests must be\n   sent
        to the oauth-ext-review@ietf.org mailing list for review and\n   comment,
        with an appropriate subject (e.g., \"Request for parameter:\n   example\").
        \ Within the review period, the Designated Expert(s) will\n   either approve
        or deny the registration request, communicating this\n   decision to the review
        list and IANA.  Denials should include an\n   explanation and, if applicable,
        suggestions as to how to make the\n   request successful.  IANA must only
        accept registry updates from the\n   Designated Expert(s) and should direct
        all requests for registration\n   to the review mailing list.\n"
      - contents:
        - "4.1.2.1.  Registration Template\n   Hint Value:  The additional value,
          which can be used to indicate a\n      certain token type to the authorization
          server.\n   Change controller:  For Standards Track RFCs, state \"IETF\".
          \ For\n      others, give the name of the responsible party.  Other details\n
          \     (e.g., postal address, email address, and home page URI) may also\n
          \     be included.\n   Specification document(s):  Reference to the document(s)
          that\n      specifies the type, preferably including a URI that can be used
          to\n      retrieve a copy of the document(s).  An indication of the relevant\n
          \     sections may also be included but is not required.\n"
        title: 4.1.2.1.  Registration Template
      - contents:
        - "4.1.2.2.  Initial Registry Contents\n   The OAuth Token Type Hint registry's
          initial contents are as follows.\n             +---------------+-------------------+-----------+\n
          \            |   Hint Value  | Change Controller | Reference |\n             +---------------+-------------------+-----------+\n
          \            |  access_token |        IETF       | [RFC7009] |\n             |
          refresh_token |        IETF       | [RFC7009] |\n             +---------------+-------------------+-----------+\n
          \        Table 1: OAuth Token Type Hints initial registry contents\n"
        title: 4.1.2.2.  Initial Registry Contents
      title: 4.1.2.  OAuth Token Type Hints Registry
    title: 4.1.  OAuth Extensions Error Registration
  title: 4.  IANA Considerations
- contents:
  - "5.  Security Considerations\n   If the authorization server does not support
    access token revocation,\n   access tokens will not be immediately invalidated
    when the\n   corresponding refresh token is revoked.  Deployments must take this\n
    \  into account when conducting their security risk analysis.\n   Cleaning up
    tokens using revocation contributes to overall security\n   and privacy since
    it reduces the likelihood for abuse of abandoned\n   tokens.  This specification
    in general does not intend to provide\n   countermeasures against token theft
    and abuse.  For a discussion of\n   respective threats and countermeasures, consult
    the security\n   considerations given in Section 10 of the OAuth core specification\n
    \  [RFC6749] and the OAuth threat model document [RFC6819].\n   Malicious clients
    could attempt to use the new endpoint to launch\n   denial-of-service attacks
    on the authorization server.  Appropriate\n   countermeasures, which should be
    in place for the token endpoint as\n   well, MUST be applied to the revocation
    endpoint (see [RFC6819],\n   Section 4.4.1.11).  Specifically, invalid token type
    hints may\n   misguide the authorization server and cause additional database\n
    \  lookups.  Care MUST be taken to prevent malicious clients from\n   exploiting
    this feature to launch denial-of-service attacks.\n   A malicious client may attempt
    to guess valid tokens on this endpoint\n   by making revocation requests against
    potential token strings.\n   According to this specification, a client's request
    must contain a\n   valid client_id, in the case of a public client, or valid client\n
    \  credentials, in the case of a confidential client.  The token being\n   revoked
    must also belong to the requesting client.  If an attacker is\n   able to successfully
    guess a public client's client_id and one of\n   their tokens, or a private client's
    credentials and one of their\n   tokens, they could do much worse damage by using
    the token elsewhere\n   than by revoking it.  If they chose to revoke the token,
    the\n   legitimate client will lose its authorization grant and will need to\n
    \  prompt the user again.  No further damage is done and the guessed\n   token
    is now worthless.\n   Since the revocation endpoint is handling security credentials,\n
    \  clients need to obtain its location from a trustworthy source only.\n   Otherwise,
    an attacker could capture valid security tokens by\n   utilizing a counterfeit
    revocation endpoint.  Moreover, in order to\n   detect counterfeit revocation
    endpoints, clients MUST authenticate\n   the revocation endpoint (certificate
    validation, etc.).\n"
  title: 5.  Security Considerations
- contents:
  - "6.  Acknowledgements\n   We would like to thank Peter Mauritius, Amanda Anganes,
    Mark Wubben,\n   Hannes Tschofenig, Michiel de Jong, Doug Foiles, Paul Madsen,
    George\n   Fletcher, Sebastian Ebling, Christian Stuebner, Brian Campbell, Igor\n
    \  Faynberg, Lukas Rosenstock, and Justin Richer for their valuable\n   feedback.\n"
  title: 6.  Acknowledgements
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing
      an\n              IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n
      \             May 2008.\n   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport
      Layer Security\n              (TLS) Protocol Version 1.2\", RFC 5246, August
      2008.\n   [RFC6749]  Hardt, D., \"The OAuth 2.0 Authorization Framework\",\n
      \             RFC 6749, October 2012.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC6819]  Lodderstedt, T., McGloin, M., and
      P. Hunt, \"OAuth 2.0\n              Threat Model and Security Considerations\",
      RFC 6819,\n              January 2013.\n   [W3C.WD-cors-20120403]\n              Kesteren,
      A., \"Cross-Origin Resource Sharing\", World Wide\n              Web Consortium
      LastCall WD-cors-20120403, April 2012,\n              <http://www.w3.org/TR/2012/WD-cors-20120403>.\n
      \  [jsonp]    Ippolito, B., \"Remote JSON - JSONP\", December 2005,\n              <http://bob.pythonmac.org/archives/2005/12/05/\n
      \             remote-json-jsonp>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Authors' Addresses\n   Torsten Lodderstedt (editor)\n   Deutsche Telekom AG\n
    \  EMail: torsten@lodderstedt.net\n   Stefanie Dronia\n   EMail: sdronia@gmx.de\n
    \  Marius Scurtescu\n   Google\n   EMail: mscurtescu@google.com\n"
  title: Authors' Addresses
