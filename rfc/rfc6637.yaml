- title: __initial_text__
  contents:
  - '              Elliptic Curve Cryptography (ECC) in OpenPGP

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines an Elliptic Curve Cryptography extension to\
    \ the\n   OpenPGP public key format and specifies three Elliptic Curves that\n\
    \   enjoy broad support by other standards, including standards published\n  \
    \ by the US National Institute of Standards and Technology.  The\n   document\
    \ specifies the conventions for interoperability between\n   compliant OpenPGP\
    \ implementations that make use of this extension and\n   these Elliptic Curves.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6637.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Conventions used in This Document ...............................3\n  \
    \ 3. Elliptic Curve Cryptography .....................................3\n   4.\
    \ Supported ECC Curves ............................................3\n   5. Supported\
    \ Public Key Algorithms .................................4\n   6. Conversion Primitives\
    \ ...........................................4\n   7. Key Derivation Function\
    \ .........................................5\n   8. EC DH Algorithm (ECDH) ..........................................5\n\
    \   9. Encoding of Public and Private Keys .............................8\n  \
    \ 10. Message Encoding with Public Keys ..............................9\n   11.\
    \ ECC Curve OID .................................................10\n   12. Compatibility\
    \ Profiles ........................................10\n      12.1. OpenPGP ECC\
    \ Profile ......................................10\n      12.2. Suite-B Profile\
    \ ..........................................11\n           12.2.1. Security Strength\
    \ at 192 Bits .....................11\n           12.2.2. Security Strength at\
    \ 128 Bits .....................11\n   13. Security Considerations .......................................12\n\
    \   14. IANA Considerations ...........................................14\n  \
    \ 15. References ....................................................14\n    \
    \  15.1. Normative References .....................................14\n      15.2.\
    \ Informative References ...................................15\n   16. Contributors\
    \ ..................................................15\n   17. Acknowledgment\
    \ ................................................15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The OpenPGP protocol [RFC4880] supports RSA and DSA (Digital\n\
    \   Signature Algorithm) public key formats.  This document defines the\n   extension\
    \ to incorporate support for public keys that are based on\n   Elliptic Curve\
    \ Cryptography (ECC).\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].  Any\n   implementation that adheres to the format and methods\
    \ specified in\n   this document is called a compliant application.  Compliant\n\
    \   applications are a subset of the broader set of OpenPGP applications\n   described\
    \ in [RFC4880].  Any [RFC2119] keyword within this document\n   applies to compliant\
    \ applications only.\n"
- title: 3.  Elliptic Curve Cryptography
  contents:
  - "3.  Elliptic Curve Cryptography\n   This document establishes the minimum set\
    \ of Elliptic Curve\n   Cryptography (ECC) public key parameters and cryptographic\
    \ methods\n   that will likely satisfy the widest range of platforms and\n   applications\
    \ and facilitate interoperability.  It adds a more\n   efficient method for applications\
    \ to balance the overall level of\n   security with any AES algorithm specified\
    \ in [RFC4880] than by simply\n   increasing the size of RSA keys.  This document\
    \ defines a path to\n   expand ECC support in the future.\n   The National Security\
    \ Agency (NSA) of the United States specifies ECC\n   for use in its [SuiteB]\
    \ set of algorithms.  This document includes\n   algorithms required by Suite\
    \ B that are not present in [RFC4880].\n   [KOBLITZ] provides a thorough introduction\
    \ to ECC.\n"
- title: 4.  Supported ECC Curves
  contents:
  - "4.  Supported ECC Curves\n   This document references three named prime field\
    \ curves, defined in\n   [FIPS-186-3] as \"Curve P-256\", \"Curve P-384\", and\
    \ \"Curve P-521\".\n   The named curves are referenced as a sequence of bytes\
    \ in this\n   document, called throughout, curve OID.  Section 11 describes in\n\
    \   detail how this sequence of bytes is formed.\n"
- title: 5.  Supported Public Key Algorithms
  contents:
  - "5.  Supported Public Key Algorithms\n   The supported public key algorithms are\
    \ the Elliptic Curve Digital\n   Signature Algorithm (ECDSA) [FIPS-186-3] and\
    \ the Elliptic Curve\n   Diffie-Hellman (ECDH).  A compatible specification of\
    \ ECDSA is given\n   in [RFC6090] as \"KT-I Signatures\" and in [SEC1]; ECDH is\
    \ defined in\n   Section 8 of this document.\n   The following public key algorithm\
    \ IDs are added to expand Section\n   9.1 of [RFC4880], \"Public-Key Algorithms\"\
    :\n          ID        Description of Algorithm\n          --        --------------------------\n\
    \          18        ECDH public key algorithm\n          19        ECDSA public\
    \ key algorithm\n   Compliant applications MUST support ECDSA and ECDH.\n"
- title: 6.  Conversion Primitives
  contents:
  - "6.  Conversion Primitives\n   This document only defines the uncompressed point\
    \ format.  The point\n   is encoded in the Multiprecision Integer (MPI) format\
    \ [RFC4880].  The\n   content of the MPI is the following:\n      B = 04 || x\
    \ || y\n   where x and y are coordinates of the point P = (x, y), each encoded\n\
    \   in the big-endian format and zero-padded to the adjusted underlying\n   field\
    \ size.  The adjusted underlying field size is the underlying\n   field size that\
    \ is rounded up to the nearest 8-bit boundary.\n   Therefore, the exact size of\
    \ the MPI payload is 515 bits for \"Curve\n   P-256\", 771 for \"Curve P-384\"\
    , and 1059 for \"Curve P-521\".\n   Even though the zero point, also called the\
    \ point at infinity, may\n   occur as a result of arithmetic operations on points\
    \ of an elliptic\n   curve, it SHALL NOT appear in data structures defined in\
    \ this\n   document.\n   This encoding is compatible with the definition given\
    \ in [SEC1].\n   If other conversion methods are defined in the future, a compliant\n\
    \   application MUST NOT use a new format when in doubt that any\n   recipient\
    \ can support it.  Consider, for example, that while both the\n   public key and\
    \ the per-recipient ECDH data structure, respectively\n   defined in Sections\
    \ 9 and 10, contain an encoded point field, the\n   format changes to the field\
    \ in Section 10 only affect a given\n   recipient of a given message.\n"
- title: 7.  Key Derivation Function
  contents:
  - "7.  Key Derivation Function\n   A key derivation function (KDF) is necessary\
    \ to implement the EC\n   encryption.  The Concatenation Key Derivation Function\
    \ (Approved\n   Alternative 1) [NIST-SP800-56A] with the KDF hash function that\
    \ is\n   SHA2-256 [FIPS-180-3] or stronger is REQUIRED.  See Section 12 for\n\
    \   the details regarding the choice of the hash function.\n   For convenience,\
    \ the synopsis of the encoding method is given below\n   with significant simplifications\
    \ attributable to the restricted\n   choice of hash functions in this document.\
    \  However, [NIST-SP800-56A]\n   is the normative source of the definition.\n\
    \          //   Implements KDF( X, oBits, Param );\n          //   Input: point\
    \ X = (x,y)\n          //   oBits - the desired size of output\n          // \
    \  hBits - the size of output of hash function Hash\n          //   Param - octets\
    \ representing the parameters\n          //   Assumes that oBits <= hBits\n  \
    \       // Convert the point X to the octet string, see section 6:\n         //\
    \   ZB' = 04 || x || y\n         // and extract the x portion from ZB'\n     \
    \    ZB = x;\n         MB = Hash ( 00 || 00 || 00 || 01 || ZB || Param );\n  \
    \       return oBits leftmost bits of MB.\n   Note that ZB in the KDF description\
    \ above is the compact\n   representation of X, defined in Section 4.2 of [RFC6090].\n"
- title: 8.  EC DH Algorithm (ECDH)
  contents:
  - "8.  EC DH Algorithm (ECDH)\n   The method is a combination of an ECC Diffie-Hellman\
    \ method to\n   establish a shared secret, a key derivation method to process\
    \ the\n   shared secret into a derived key, and a key wrapping method that uses\n\
    \   the derived key to protect a session key used to encrypt a message.\n   The\
    \ One-Pass Diffie-Hellman method C(1, 1, ECC CDH) [NIST-SP800-56A]\n   MUST be\
    \ implemented with the following restrictions: the ECC CDH\n   primitive employed\
    \ by this method is modified to always assume the\n   cofactor as 1, the KDF specified\
    \ in Section 7 is used, and the KDF\n   parameters specified below are used.\n\
    \   The KDF parameters are encoded as a concatenation of the following 5\n   variable-length\
    \ and fixed-length fields, compatible with the\n   definition of the OtherInfo\
    \ bitstring [NIST-SP800-56A]:\n   o  a variable-length field containing a curve\
    \ OID, formatted as\n      follows:\n         -  a one-octet size of the following\
    \ field\n         - the octets representing a curve OID, defined in Section 11\n\
    \   o  a one-octet public key algorithm ID defined in Section 5\n   o  a variable-length\
    \ field containing KDF parameters, identical to\n      the corresponding field\
    \ in the ECDH public key, formatted as\n      follows:\n         -  a one-octet\
    \ size of the following fields; values 0 and 0xff\n            are reserved for\
    \ future extensions\n         -  a one-octet value 01, reserved for future extensions\n\
    \         -  a one-octet hash function ID used with the KDF\n         -  a one-octet\
    \ algorithm ID for the symmetric algorithm used to\n            wrap the symmetric\
    \ key for message encryption; see Section 8\n            for details\n   o  20\
    \ octets representing the UTF-8 encoding of the string\n      \"Anonymous Sender\
    \    \", which is the octet sequence\n      41 6E 6F 6E 79 6D 6F 75 73 20 53 65\
    \ 6E 64 65 72 20 20 20 20\n   o  20 octets representing a recipient encryption\
    \ subkey or a master\n      key fingerprint, identifying the key material that\
    \ is needed for\n      the decryption\n   The size of the KDF parameters sequence,\
    \ defined above, is either 54\n   or 51 for the three curves defined in this document.\n\
    \   The key wrapping method is described in [RFC3394].  KDF produces a\n   symmetric\
    \ key that is used as a key-encryption key (KEK) as specified\n   in [RFC3394].\
    \  Refer to Section 13 for the details regarding the\n   choice of the KEK algorithm,\
    \ which SHOULD be one of three AES\n   algorithms.  Key wrapping and unwrapping\
    \ is performed with the\n   default initial value of [RFC3394].\n   The input\
    \ to the key wrapping method is the value \"m\" derived from\n   the session key,\
    \ as described in Section 5.1 of [RFC4880], \"Public-\n   Key Encrypted Session\
    \ Key Packets (Tag 1)\", except that the PKCS #1.5\n   (Public-Key Cryptography\
    \ Standards version 1.5) padding step is\n   omitted.  The result is padded using\
    \ the method described in [PKCS5]\n   to the 8-byte granularity.  For example,\
    \ the following AES-256\n   session key, in which 32 octets are denoted from k0\
    \ to k31, is\n   composed to form the following 40 octet sequence:\n       09\
    \ k0 k1 ... k31 c0 c1 05 05 05 05 05\n   The octets c0 and c1 above denote the\
    \ checksum.  This encoding allows\n   the sender to obfuscate the size of the\
    \ symmetric encryption key used\n   to encrypt the data.  For example, assuming\
    \ that an AES algorithm is\n   used for the session key, the sender MAY use 21,\
    \ 13, and 5 bytes of\n   padding for AES-128, AES-192, and AES-256, respectively,\
    \ to provide\n   the same number of octets, 40 total, as an input to the key wrapping\n\
    \   method.\n   The output of the method consists of two fields.  The first field\
    \ is\n   the MPI containing the ephemeral key used to establish the shared\n \
    \  secret.  The second field is composed of the following two fields:\n   o  a\
    \ one-octet encoding the size in octets of the result of the key\n      wrapping\
    \ method; the value 255 is reserved for future extensions\n   o  up to 254 octets\
    \ representing the result of the key wrapping\n      method, applied to the 8-byte\
    \ padded session key, as described\n      above\n   Note that for session key\
    \ sizes 128, 192, and 256 bits, the size of\n   the result of the key wrapping\
    \ method is, respectively, 32, 40, and\n   48 octets, unless the size obfuscation\
    \ is used.\n   For convenience, the synopsis of the encoding method is given below;\n\
    \   however, this section, [NIST-SP800-56A], and [RFC3394] are the\n   normative\
    \ sources of the definition.\n         Obtain the authenticated recipient public\
    \ key R\n         Generate an ephemeral key pair {v, V=vG}\n         Compute the\
    \ shared point S = vR;\n         m = symm_alg_ID || session key || checksum ||\
    \ pkcs5_padding;\n         curve_OID_len = (byte)len(curve_OID);\n         Param\
    \ = curve_OID_len || curve_OID || public_key_alg_ID || 03\n         || 01 || KDF_hash_ID\
    \ || KEK_alg_ID for AESKeyWrap || \"Anonymous\n         Sender    \" || recipient_fingerprint;\n\
    \         Z_len = the key size for the KEK_alg_ID used with AESKeyWrap\n     \
    \    Compute Z = KDF( S, Z_len, Param );\n         Compute C = AESKeyWrap( Z,\
    \ m ) as per [RFC3394]\n         VB = convert point V to the octet string\n  \
    \       Output (MPI(VB) || len(C) || C).\n   The decryption is the inverse of\
    \ the method given.  Note that the\n   recipient obtains the shared secret by\
    \ calculating\n       S = rV = rvG, where (r,R) is the recipient's key pair.\n\
    \   Consistent with Section 5.13 of [RFC4880], \"Sym. Encrypted Integrity\n  \
    \ Protected Data Packet (Tag 18)\", a Modification Detection Code (MDC)\n   MUST\
    \ be used anytime the symmetric key is protected by ECDH.\n"
- title: 9. Encoding of Public and Private Keys
  contents:
  - "9. Encoding of Public and Private Keys\n   The following algorithm-specific packets\
    \ are added to Section 5.5.2\n   of [RFC4880], \"Public-Key Packet Formats\",\
    \ to support ECDH and ECDSA.\n   This algorithm-specific portion is:\n   Algorithm-Specific\
    \ Fields for ECDSA keys:\n      o  a variable-length field containing a curve\
    \ OID, formatted\n         as follows:\n         -  a one-octet size of the following\
    \ field; values 0 and\n            0xFF are reserved for future extensions\n \
    \        -  octets representing a curve OID, defined in Section 11\n      o  MPI\
    \ of an EC point representing a public key\n     Algorithm-Specific Fields for\
    \ ECDH keys:\n      o  a variable-length field containing a curve OID, formatted\n\
    \         as follows:\n         -  a one-octet size of the following field; values\
    \ 0 and\n            0xFF are reserved for future extensions\n         -  the\
    \ octets representing a curve OID, defined in\n            Section 11\n      \
    \   -  MPI of an EC point representing a public key\n      o  a variable-length\
    \ field containing KDF parameters,\n         formatted as follows:\n         -\
    \  a one-octet size of the following fields; values 0 and\n            0xff are\
    \ reserved for future extensions\n         -  a one-octet value 01, reserved for\
    \ future extensions\n         -  a one-octet hash function ID used with a KDF\n\
    \         -  a one-octet algorithm ID for the symmetric algorithm\n          \
    \  used to wrap the symmetric key used for the message\n            encryption;\
    \ see Section 8 for details\n   Observe that an ECDH public key is composed of\
    \ the same sequence of\n   fields that define an ECDSA key, plus the KDF parameters\
    \ field.\n   The following algorithm-specific packets are added to Section 5.5.3.\n\
    \   of [RFC4880], \"Secret-Key Packet Formats\", to support ECDH and ECDSA.\n\
    \     Algorithm-Specific Fields for ECDH or ECDSA secret keys:\n      o  an MPI\
    \ of an integer representing the secret key, which is a\n         scalar of the\
    \ public EC point\n"
- title: 10.  Message Encoding with Public Keys
  contents:
  - "10.  Message Encoding with Public Keys\n   Section 5.2.2 of [RFC4880], \"Version\
    \ 3 Signature Packet Format\"\n   defines signature formats.  No changes in the\
    \ format are needed for\n   ECDSA.\n   Section 5.1 of [RFC4880], \"Public-Key\
    \ Encrypted Session Key Packets\n   (Tag 1)\" is extended to support ECDH.  The\
    \ following two fields are\n   the result of applying the KDF, as described in\
    \ Section 8.\n   Algorithm-Specific Fields for ECDH:\n      o an MPI of an EC\
    \ point representing an ephemeral public key\n      o a one-octet size, followed\
    \ by a symmetric key encoded using the\n         method described in Section 8\n"
- title: 11.  ECC Curve OID
  contents:
  - "11.  ECC Curve OID\n   The parameter curve OID is an array of octets that define\
    \ a named\n   curve.  The table below specifies the exact sequence of bytes for\n\
    \   each named curve referenced in this document:\n   ASN.1 Object          OID\
    \ Curve OID bytes in         Curve name in\n   Identifier            len hexadecimal\
    \                [FIPS-186-3]\n                             representation\n \
    \  1.2.840.10045.3.1.7    8   2A 86 48 CE 3D 03 01 07   NIST curve P-256\n   1.3.132.0.34\
    \           5   2B 81 04 00 22            NIST curve P-384\n   1.3.132.0.35  \
    \         5   2B 81 04 00 23            NIST curve P-521\n   The sequence of octets\
    \ in the third column is the result of applying\n   the Distinguished Encoding\
    \ Rules (DER) to the ASN.1 Object Identifier\n   with subsequent truncation. \
    \ The truncation removes the two fields of\n   encoded Object Identifier.  The\
    \ first omitted field is one octet\n   representing the Object Identifier tag,\
    \ and the second omitted field\n   is the length of the Object Identifier body.\
    \  For example, the\n   complete ASN.1 DER encoding for the NIST P-256 curve OID\
    \ is \"06 08 2A\n   86 48 CE 3D 03 01 07\", from which the first entry in the\
    \ table above\n   is constructed by omitting the first two octets.  Only the truncated\n\
    \   sequence of octets is the valid representation of a curve OID.\n"
- title: 12.  Compatibility Profiles
  contents:
  - '12.  Compatibility Profiles

    '
- title: 12.1.  OpenPGP ECC Profile
  contents:
  - "12.1.  OpenPGP ECC Profile\n   A compliant application MUST implement NIST curve\
    \ P-256, MAY\n   implement NIST curve P-384, and SHOULD implement NIST curve P-521,\
    \ as\n   defined in Section 11.  A compliant application MUST implement\n   SHA2-256\
    \ and SHOULD implement SHA2-384 and SHA2-512.  A compliant\n   application MUST\
    \ implement AES-128 and SHOULD implement AES-256.\n   A compliant application\
    \ SHOULD follow Section 13 regarding the choice\n   of the following algorithms\
    \ for each curve:\n   o  the KDF hash algorithm\n   o  the KEK algorithm\n   o\
    \  the message digest algorithm and the hash algorithm used in the\n      key\
    \ certifications\n   o  the symmetric algorithm used for message encryption.\n\
    \   It is recommended that the chosen symmetric algorithm for message\n   encryption\
    \ be no less secure than the KEK algorithm.\n"
- title: 12.2.  Suite-B Profile
  contents:
  - "12.2.  Suite-B Profile\n   A subset of algorithms allowed by this document can\
    \ be used to\n   achieve [SuiteB] compatibility.  The references to [SuiteB] in\
    \ this\n   document are informative.  This document is primarily concerned with\n\
    \   format specification, leaving additional security restrictions\n   unspecified,\
    \ such as matching the assigned security level of\n   information to authorized\
    \ recipients or interoperability concerns\n   arising from fewer allowed algorithms\
    \ in [SuiteB] than allowed by\n   [RFC4880].\n"
- title: 12.2.1.  Security Strength at 192 Bits
  contents:
  - "12.2.1.  Security Strength at 192 Bits\n   To achieve the security strength of\
    \ 192 bits, [SuiteB] requires NIST\n   curve P-384, AES-256, and SHA2-384.  The\
    \ symmetric algorithm\n   restriction means that the algorithm of KEK used for\
    \ key wrapping in\n   Section 8 and an [RFC4880] session key used for message\
    \ encryption\n   must be AES-256.  The hash algorithm restriction means that the\
    \ hash\n   algorithms of KDF and the [RFC4880] message digest calculation must\n\
    \   be SHA-384.\n"
- title: 12.2.2.  Security Strength at 128 Bits
  contents:
  - "12.2.2.  Security Strength at 128 Bits\n   The set of algorithms in Section 12.2.1\
    \ is extended to allow NIST\n   curve P-256, AES-128, and SHA2-256.\n"
- title: 13.  Security Considerations
  contents:
  - "13.  Security Considerations\n   Refer to [FIPS-186-3], B.4.1, for the method\
    \ to generate a uniformly\n   distributed ECC private key.\n   The curves proposed\
    \ in this document correspond to the symmetric key\n   sizes 128 bits, 192 bits,\
    \ and 256 bits, as described in the table\n   below.  This allows a compliant\
    \ application to offer balanced public\n   key security, which is compatible with\
    \ the symmetric key strength for\n   each AES algorithm allowed by [RFC4880].\n\
    \   The following table defines the hash and the symmetric encryption\n   algorithm\
    \ that SHOULD be used with a given curve for ECDSA or ECDH.\n   A stronger hash\
    \ algorithm or a symmetric key algorithm MAY be used\n   for a given ECC curve.\
    \  However, note that the increase in the\n   strength of the hash algorithm or\
    \ the symmetric key algorithm may not\n   increase the overall security offered\
    \ by the given ECC key.\n   Curve name         ECC        RSA         Hash size\
    \   Symmetric\n                      strength   strength,               key size\n\
    \                                 informative\n   NIST curve P-256   256     \
    \   3072        256         128\n   NIST curve P-384   384        7680       \
    \ 384         192\n   NIST curve P-521   521        15360       512         256\n\
    \   Requirement levels indicated elsewhere in this document lead to the\n   following\
    \ combinations of algorithms in the OpenPGP profile: MUST\n   implement NIST curve\
    \ P-256 / SHA2-256 / AES-128, SHOULD implement\n   NIST curve P-521 / SHA2-512\
    \ / AES-256, MAY implement NIST curve P-384\n   / SHA2-384 / AES-256, among other\
    \ allowed combinations.\n   Consistent with the table above, the following table\
    \ defines the KDF\n   hash algorithm and the AES KEK encryption algorithm that\
    \ SHOULD be\n   used with a given curve for ECDH.  A stronger KDF hash algorithm\
    \ or\n   AES KEK algorithm MAY be used for a given ECC curve.\n   Curve name \
    \         Recommended KDF      Recommended KEK\n                       hash algorithm\
    \       encryption algorithm\n   NIST curve P-256    SHA2-256             AES-128\n\
    \   NIST curve P-384    SHA2-384             AES-192\n   NIST curve P-521    SHA2-512\
    \             AES-256\n   This document explicitly discourages the use of algorithms\
    \ other than\n   AES as a KEK algorithm because backward compatibility of the\
    \ ECDH\n   format is not a concern.  The KEK algorithm is only used within the\n\
    \   scope of a Public-Key Encrypted Session Key Packet, which represents\n   an\
    \ ECDH key recipient of a message.  Compare this with the algorithm\n   used for\
    \ the session key of the message, which MAY be different from\n   a KEK algorithm.\n\
    \   Compliant applications SHOULD implement, advertise through key\n   preferences,\
    \ and use in compliance with [RFC4880], the strongest\n   algorithms specified\
    \ in this document.\n   Note that the [RFC4880] symmetric algorithm preference\
    \ list may make\n   it impossible to use the balanced strength of symmetric key\n\
    \   algorithms for a corresponding public key.  For example, the presence\n  \
    \ of the symmetric key algorithm IDs and their order in the key\n   preference\
    \ list affects the algorithm choices available to the\n   encoding side, which\
    \ in turn may make the adherence to the table\n   above infeasible.  Therefore,\
    \ compliance with this specification is a\n   concern throughout the life of the\
    \ key, starting immediately after\n   the key generation when the key preferences\
    \ are first added to a key.\n   It is generally advisable to position a symmetric\
    \ algorithm ID of\n   strength matching the public key at the head of the key\
    \ preference\n   list.\n   Encryption to multiple recipients often results in\
    \ an unordered\n   intersection subset.  For example, if the first recipient's\
    \ set is\n   {A, B} and the second's is {B, A}, the intersection is an unordered\n\
    \   set of two algorithms, A and B.  In this case, a compliant\n   application\
    \ SHOULD choose the stronger encryption algorithm.\n   Resource constraints, such\
    \ as limited computational power, is a\n   likely reason why an application might\
    \ prefer to use the weakest\n   algorithm.  On the other side of the spectrum\
    \ are applications that\n   can implement every algorithm defined in this document.\
    \  Most\n   applications are expected to fall into either of two categories. \
    \ A\n   compliant application in the second, or strongest, category SHOULD\n \
    \  prefer AES-256 to AES-192.\n   SHA-1 MUST NOT be used with the ECDSA or the\
    \ KDF in the ECDH method.\n   MDC MUST be used when a symmetric encryption key\
    \ is protected by\n   ECDH.  None of the ECC methods described in this document\
    \ are allowed\n   with deprecated V3 keys.  A compliant application MUST only\
    \ use\n   iterated and salted S2K to protect private keys, as defined in\n   Section\
    \ 3.7.1.3 of [RFC4880], \"Iterated and Salted S2K\".\n   Side channel attacks\
    \ are a concern when a compliant application's use\n   of the OpenPGP format can\
    \ be modeled by a decryption or signing\n   oracle model, for example, when an\
    \ application is a network service\n   performing decryption to unauthenticated\
    \ remote users.  ECC scalar\n   multiplication operations used in ECDSA and ECDH\
    \ are vulnerable to\n   side channel attacks.  Countermeasures can often be taken\
    \ at the\n   higher protocol level, such as limiting the number of allowed\n \
    \  failures or time-blinding of the operations associated with each\n   network\
    \ interface.  Mitigations at the scalar multiplication level\n   seek to eliminate\
    \ any measurable distinction between the ECC point\n   addition and doubling operations.\n"
- title: 14.  IANA Considerations
  contents:
  - "14.  IANA Considerations\n   Per this document, IANA has assigned an algorithm\
    \ number from the\n   \"Public Key Algorithms\" range (or the \"name space\" in\
    \ the terminology\n   of [RFC5226]) of the \"Pretty Good Privacy (PGP)\" registry,\
    \ created by\n   [RFC4880].  Two ID numbers have been assigned, as defined in\
    \ Section\n   5.  The first one, value 19, is already designated for ECDSA and\
    \ is\n   currently unused, while the other one, value 18, is new.\n"
- title: 15.  References
  contents:
  - '15.  References

    '
- title: 15.1.  Normative References
  contents:
  - "15.1.  Normative References\n   [RFC2119]        Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n                    Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [RFC4880]        Callas, J., Donnerhacke, L., Finney,\
    \ H., Shaw, D.,\n                    and R. Thayer, \"OpenPGP Message Format\"\
    , RFC 4880,\n                    November 2007.\n   [SuiteB]         National\
    \ Security Agency, \"NSA Suite B\n                    Cryptography\", March 11,\
    \ 2010,\n                    http://www.nsa.gov/ia/programs/suiteb_cryptography/.\n\
    \   [FIPS-186-3]     National Institute of Standards and Technology, U.S.\n  \
    \                  Department of Commerce, \"Digital Signature\n             \
    \       Standard\", FIPS 186-3, June 2009.\n   [NIST-SP800-56A] Barker, E., Johnson,\
    \ D., and M. Smid,\n                    \"Recommendation for Pair-Wise Key Establishment\n\
    \                    Schemes Using Discrete Logarithm Cryptography\", NIST\n \
    \                   Special Publication 800-56A Revision 1, March 2007.\n   [FIPS-180-3]\
    \     National Institute of Standards and Technology, U.S.\n                 \
    \   Department of Commerce, \"Secure Hash Standard\n                    (SHS)\"\
    , FIPS 180-3, October 2008.\n   [RFC3394]        Schaad, J. and R. Housley, \"\
    Advanced Encryption\n                    Standard (AES) Key Wrap Algorithm\",\
    \ RFC 3394,\n                    September 2002.\n   [PKCS5]          RSA Laboratories,\
    \ \"PKCS #5 v2.0: Password-Based\n                    Cryptography Standard\"\
    , March 25, 1999.\n   [RFC5226]        Narten, T. and H. Alvestrand, \"Guidelines\
    \ for\n                    Writing an IANA Considerations Section in RFCs\", BCP\n\
    \                    26, RFC 5226, May 2008.\n"
- title: 15.2.  Informative References
  contents:
  - "15.2.  Informative References\n   [KOBLITZ]        N. Koblitz, \"A course in\
    \ number theory and\n                    cryptography\", Chapter VI. Elliptic\
    \ Curves, ISBN:\n                    0-387-96576-9, Springer-Verlag, 1987\n  \
    \ [RFC6090]        McGrew, D., Igoe, K., and M. Salter, \"Fundamental\n      \
    \              Elliptic Curve Cryptography Algorithms\", RFC 6090,\n         \
    \           February 2011.\n   [SEC1]           Standards for Efficient Cryptography\
    \ Group, \"SEC 1:\n                    Elliptic Curve Cryptography\", September\
    \ 2000.\n"
- title: 16.  Contributors
  contents:
  - "16.  Contributors\n   Hal Finney provided important criticism on compliance with\n\
    \   [NIST-SP800-56A] and [SuiteB], and pointed out a few other mistakes.\n"
- title: 17.  Acknowledgment
  contents:
  - "17.  Acknowledgment\n   The author would like to acknowledge the help of many\
    \ individuals who\n   kindly voiced their opinions on the IETF OpenPGP Working\
    \ Group\n   mailing list, in particular, the help of Jon Callas, David Crick,\
    \ Ian\n   G, Werner Koch, and Marko Kreen.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Andrey Jivsov\n   Symantec Corporation\n   EMail: Andrey_Jivsov@symantec.com\n"
