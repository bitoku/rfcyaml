- title: __initial_text__
  contents:
  - '              The Use of AES-192 and AES-256 in Secure RTP

    '
- title: Abstract
  contents:
  - "Abstract\n   This memo describes the use of the Advanced Encryption Standard\
    \ (AES)\n   with 192- and 256-bit keys within the Secure RTP (SRTP) protocol.\
    \  It\n   details counter mode encryption for SRTP and Secure Realtime\n   Transport\
    \ Control Protocol (SRTCP) and a new SRTP Key Derivation\n   Function (KDF) for\
    \ AES-192 and AES-256.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6188.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Conventions Used in This Document ..........................3\n  \
    \ 2. AES-192 and AES-256 Encryption ..................................3\n   3.\
    \ The AES_192_CM_PRF and AES_256_CM_PRF Key Derivation Functions ..4\n      3.1.\
    \ Usage Requirements .........................................5\n   4. Crypto\
    \ Suites ...................................................6\n   5. IANA Considerations\
    \ .............................................9\n   6. Security Considerations\
    \ .........................................9\n   7. Test Cases .....................................................10\n\
    \      7.1. AES-256-CM Test Cases .....................................10\n  \
    \    7.2. AES_256_CM_PRF Test Cases .................................11\n    \
    \  7.3. AES-192-CM Test Cases .....................................13\n      7.4.\
    \ AES_192_CM_PRF Test Cases .................................13\n   8. Acknowledgements\
    \ ...............................................15\n   9. References .....................................................15\n\
    \      9.1. Normative References ......................................15\n  \
    \    9.2. Informative References ....................................15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo describes the use of the Advanced Encryption Standard\
    \ (AES)\n   [FIPS197] with 192- and 256-bit keys within the Secure RTP (SRTP)\n\
    \   protocol [RFC3711].  Below, those block ciphers are referred to as\n   AES-192\
    \ and AES-256, respectively, and the use of AES with a 128-bit\n   key is referred\
    \ to as AES-128.  This document describes counter mode\n   encryption for SRTP\
    \ and SRTCP and appropriate SRTP key derivation\n   functions for AES-192 and\
    \ AES-256.  It also defines new crypto suites\n   that use these new functions.\n\
    \   While AES-128 is widely regarded as more than adequately secure, some\n  \
    \ users may be motivated to adopt AES-192 or AES-256 due to a perceived\n   need\
    \ to pursue a highly conservative security strategy.  For\n   instance, the Suite\
    \ B profile requires AES-256 for the protection of\n   TOP SECRET information\
    \ [suiteB].  (Note that while the AES-192 and\n   AES-256 encryption methods defined\
    \ in this document use Suite B\n   algorithms, the crypto suites in this document\
    \ use the HMAC-SHA-1\n   algorithm, which is not included in Suite B.) See Section\
    \ 6 for more\n   discussion of security issues.\n   The crypto functions described\
    \ in this document are an addition to,\n   and not a replacement for, the crypto\
    \ functions defined in [RFC3711].\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  AES-192 and AES-256 Encryption
  contents:
  - "2.  AES-192 and AES-256 Encryption\n   Section 4.1.1 of [RFC3711] defines AES\
    \ counter mode encryption, which\n   it refers to as AES_CM.  This definition\
    \ applies to all of the AES\n   key sizes.  In this note, AES-192 counter mode\
    \ and AES-256 counter\n   mode and are denoted as AES_192_CM and AES_256_CM, respectively.\
    \  In\n   both of these ciphers, the plaintext inputs to the block cipher are\n\
    \   formed as in AES_CM, and the block cipher outputs are processed as in\n  \
    \ AES_CM.  The only difference in the processing is that AES_192_CM\n   uses AES-192,\
    \ and AES_256_CM uses AES-256.  Both AES_192_CM and\n   AES_256_CM use a 112-bit\
    \ salt as an input, as does AES_CM.\n   For the convenience of the reader, the\
    \ structure of the counter\n   blocks in SRTP counter mode encryption is illustrated\
    \ in Figure 1,\n   using the terminology from Section 4.1.1 of [RFC3711].  In\
    \ this\n   diagram, the symbol (+) denotes the bitwise exclusive-or operation,\n\
    \   and the AES encrypt operation uses AES-128, AES-192, or AES-256 for\n   AES_CM,\
    \ AES_192_CM, and AES_256_CM, respectively.  The field labeled\n   b_c contains\
    \ a block counter, the value of which increments once for\n   each invocation\
    \ of the \"AES Encrypt\" function.  The SSRC field is\n   part of the RTP header\
    \ [RFC3550].\n        one octet\n         <-->\n          0  1  2  3  4  5  6\
    \  7  8  9  10 11 12 13 14 15\n         +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \         |00|00|00|00|   SSRC    |   packet index  | b_c |---+\n         +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\
    \   |\n                                                             |\n      \
    \   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+   v\n         |        \
    \          salt (k_s)             |00|00|->(+)\n         +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\
    \   |\n                                                             |\n      \
    \                                                       v\n                  \
    \                                    +-------------+\n                       \
    \       encryption key (k_e) -> | AES encrypt |\n                            \
    \                          +-------------+\n                                 \
    \                            |\n         +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\
    \   |\n         |                keystream block                |<--+\n      \
    \   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n                      \
    \  Figure 1: AES Counter Mode\n"
- title: 3.  The AES_192_CM_PRF and AES_256_CM_PRF Key Derivation Functions
  contents:
  - "3.  The AES_192_CM_PRF and AES_256_CM_PRF Key Derivation Functions\n   Section\
    \ 4.3.3 of [RFC3711] defines an AES counter mode key derivation\n   function,\
    \ which it refers to as AES_CM PRF (and sometimes as AES-CM\n   PRF).  (That specification\
    \ uses the term PRF, or pseudo-random\n   function, interchangeably with the phrase\
    \ \"key derivation function\".)\n   This key derivation function can be used with\
    \ any AES key size.  In\n   this note, the AES-192 counter mode PRF and AES-256\
    \ counter mode PRF\n   are denoted as AES_192_CM_PRF and AES_256_CM_PRF, respectively.\
    \  In\n   both of these PRFs, the plaintext inputs to the block cipher are\n \
    \  formed as in the AES_CM PRF, and the block cipher outputs are\n   processed\
    \ as in the AES_CM PRF.  The only difference in the\n   processing is that AES_192_CM_PRF\
    \ uses AES-192, and AES_256_CM_PRF\n   uses AES-256.  Both AES_192_CM_PRF and\
    \ AES_256_CM_PRF use a 112-bit\n   salt as an input, as does the AES_CM PRF.\n\
    \   For the convenience of the reader, the structure of the counter\n   blocks\
    \ in SRTP counter mode key derivation is illustrated in\n   Figure 2, using the\
    \ terminology from Section 4.3.3 of [RFC3711].  In\n   this diagram, the symbol\
    \ (+) denotes the bitwise exclusive-or\n   operation, and the \"AES Encrypt\"\
    \ operation uses AES-128, AES-192, or\n   AES-256 for the AES_CM PRF, AES_192_CM_PRF,\
    \ and AES_256_CM_PRF,\n   respectively.  The field \"LB\" contains the 8-bit constant\
    \ \"label\",\n   which is provided as an input to the key derivation function\
    \ (and\n   which is distinct for each type of key generated by that function).\n\
    \   The field labeled b_c contains a block counter, the value of which\n   increments\
    \ once for each invocation of the \"AES Encrypt\" function.\n   The DIV operation\
    \ is defined in Section 4.3.1 of [RFC3711] as\n   follows.  Let \"a DIV t\" denote\
    \ integer division of a by t, rounded\n   down, and with the convention that \"\
    a DIV 0 = 0\" for all a.  We also\n   make the convention of treating \"a DIV\
    \ t\" as a bit string of the same\n   length as a, and thus \"a DIV t\" will,\
    \ in general, have leading zeros.\n        one octet\n         <-->\n        \
    \  0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15\n         +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \         |00|00|00|00|00|00|00|LB| index DIV kdr   | b_c |---+\n         +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\
    \   |\n                                                             |\n      \
    \   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+   v\n         |        \
    \       master salt               |00|00|->(+)\n         +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\
    \   |\n                                                             |\n      \
    \                                                       v\n                  \
    \                                    +-------------+\n                       \
    \                 master key -> | AES encrypt |\n                            \
    \                          +-------------+\n                                 \
    \                            |\n         +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\
    \   |\n         |                   output block                |<--+\n      \
    \   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n          Figure 2: The\
    \ AES Counter Mode Key Derivation Function\n"
- title: 3.1.  Usage Requirements
  contents:
  - "3.1.  Usage Requirements\n   When AES_192_CM is used for encryption, AES_192_CM_PRF\
    \ SHOULD be used\n   as the key derivation function, and AES_128_CM_PRF MUST NOT\
    \ be used\n   as the key derivation function.\n   When AES_256_CM is used for\
    \ encryption, AES_256_CM_PRF SHOULD be used\n   as the key derivation function.\
    \  Both AES_128_CM_PRF and\n   AES_192_CM_PRF MUST NOT be used as the key derivation\
    \ function.\n   AES_256_CM_PRF MAY be used as the key derivation function when\
    \ AES_CM\n   is used for encryption, and when AES_192_CM is used for encryption.\n\
    \   AES_192_CM_PRF MAY be used as the key derivation function when AES_CM\n  \
    \ is used for encryption.\n      Rationale: it is essential that the cryptographic\
    \ strength of the\n      key derivation meets or exceeds that of the encryption\
    \ method.  It\n      is natural to use the same function for both encryption and\
    \ key\n      derivation.  However, it is not required to do so because it is\n\
    \      desirable to allow these ciphers to be used with alternative key\n    \
    \  derivation functions that may be defined in the future.\n"
- title: 4.  Crypto Suites
  contents:
  - "4.  Crypto Suites\n   This section defines SRTP crypto suites that use the ciphers\
    \ and key\n   derivation functions defined in this document.  The parameters in\n\
    \   these crypto suites are described in Section 8.2 of [RFC3711].  These\n  \
    \ suites are registered with IANA for use with the SDP Security\n   Descriptions\
    \ attributes (Section 10.3.2.1 of [RFC4568]).  Other SRTP\n   key management methods\
    \ that use the crypto functions defined in this\n   document are encouraged to\
    \ also use these crypto suite definitions.\n      Rationale: the crypto suites\
    \ use the same authentication function\n      that is mandatory to implement in\
    \ SRTP, HMAC-SHA1 with a 160-bit\n      key.  HMAC-SHA1 would accept larger key\
    \ sizes, but when it is used\n      with keys larger than 160 bits, it does not\
    \ provide resistance to\n      cryptanalysis greater than that security level,\
    \ because it has\n      only 160 bits of internal state.  By retaining 160-bit\n\
    \      authentication keys, the crypto suites in this note have more\n      compatibility\
    \ with existing crypto suites and implementations of\n      them.\n   +------------------------------+------------------------------------+\n\
    \   | Parameter                    | Value                              |\n  \
    \ +------------------------------+------------------------------------+\n   |\
    \ Master key length            | 192 bits                           |\n   | Master\
    \ salt length           | 112 bits                           |\n   | Key Derivation\
    \ Function      | AES_192_CM_PRF (Section 3)         |\n   | Default key lifetime\
    \         | 2^31 packets                       |\n   | Cipher (for SRTP and SRTCP)\
    \  | AES_192_CM (Section 2)             |\n   | SRTP authentication function |\
    \ HMAC-SHA1 (Section 4.2.1 of        |\n   |                              | [RFC3711])\
    \                         |\n   | SRTP authentication key      | 160 bits    \
    \                       |\n   | length                       |               \
    \                     |\n   | SRTP authentication tag      | 80 bits         \
    \                   |\n   | length                       |                   \
    \                 |\n   | SRTCP authentication         | HMAC-SHA1 (Section 4.2.1\
    \ of        |\n   | function                     | [RFC3711])                \
    \         |\n   | SRTCP authentication key     | 160 bits                    \
    \       |\n   | length                       |                               \
    \     |\n   | SRTCP authentication tag     | 80 bits                         \
    \   |\n   | length                       |                                   \
    \ |\n   +------------------------------+------------------------------------+\n\
    \             Table 1: The AES_192_CM_HMAC_SHA1_80 Crypto Suite\n   +------------------------------+------------------------------------+\n\
    \   | Parameter                    | Value                              |\n  \
    \ +------------------------------+------------------------------------+\n   |\
    \ Master key length            | 192 bits                           |\n   | Master\
    \ salt length           | 112 bits                           |\n   | Key Derivation\
    \ Function      | AES_192_CM_PRF (Section 3)         |\n   | Default key lifetime\
    \         | 2^31 packets                       |\n   | Cipher (for SRTP and SRTCP)\
    \  | AES_192_CM (Section 2)             |\n   | SRTP authentication function |\
    \ HMAC-SHA1 (Section 4.2.1 of        |\n   |                              | [RFC3711])\
    \                         |\n   | SRTP authentication key      | 160 bits    \
    \                       |\n   | length                       |               \
    \                     |\n   | SRTP authentication tag      | 32 bits         \
    \                   |\n   | length                       |                   \
    \                 |\n   | SRTCP authentication         | HMAC-SHA1 (Section 4.2.1\
    \ of        |\n   | function                     | [RFC3711])                \
    \         |\n   | SRTCP authentication key     | 160 bits                    \
    \       |\n   | length                       |                               \
    \     |\n   | SRTCP authentication tag     | 80 bits                         \
    \   |\n   | length                       |                                   \
    \ |\n   +------------------------------+------------------------------------+\n\
    \             Table 2: The AES_192_CM_HMAC_SHA1_32 Crypto Suite\n   +------------------------------+------------------------------------+\n\
    \   | Parameter                    | Value                              |\n  \
    \ +------------------------------+------------------------------------+\n   |\
    \ Master key length            | 256 bits                           |\n   | Master\
    \ salt length           | 112 bits                           |\n   | Key Derivation\
    \ Function      | AES_256_CM_PRF (Section 3)         |\n   | Default key lifetime\
    \         | 2^31 packets                       |\n   | Cipher (for SRTP and SRTCP)\
    \  | AES_256_CM (Section 2)             |\n   | SRTP authentication function |\
    \ HMAC-SHA1 (Section 4.2.1 of        |\n   |                              | [RFC3711])\
    \                         |\n   | SRTP authentication key      | 160 bits    \
    \                       |\n   | length                       |               \
    \                     |\n   | SRTP authentication tag      | 80 bits         \
    \                   |\n   | length                       |                   \
    \                 |\n   | SRTCP authentication         | HMAC-SHA1 (Section 4.2.1\
    \ of        |\n   | function                     | [RFC3711])                \
    \         |\n   | SRTCP authentication key     | 160 bits                    \
    \       |\n   | length                       |                               \
    \     |\n   | SRTCP authentication tag     | 80 bits                         \
    \   |\n   | length                       |                                   \
    \ |\n   +------------------------------+------------------------------------+\n\
    \             Table 3: The AES_256_CM_HMAC_SHA1_80 Crypto Suite\n   +------------------------------+------------------------------------+\n\
    \   | Parameter                    | Value                              |\n  \
    \ +------------------------------+------------------------------------+\n   |\
    \ Master key length            | 256 bits                           |\n   | Master\
    \ salt length           | 112 bits                           |\n   | Key Derivation\
    \ Function      | AES_256_CM_PRF (Section 3)         |\n   | Default key lifetime\
    \         | 2^31 packets                       |\n   | Cipher (for SRTP and SRTCP)\
    \  | AES_256_CM (Section 2)             |\n   | SRTP authentication function |\
    \ HMAC-SHA1 (Section 4.2.1 of        |\n   |                              | [RFC3711])\
    \                         |\n   | SRTP authentication key      | 160 bits    \
    \                       |\n   | length                       |               \
    \                     |\n   | SRTP authentication tag      | 32 bits         \
    \                   |\n   | length                       |                   \
    \                 |\n   | SRTCP authentication         | HMAC-SHA1 (Section 4.2.1\
    \ of        |\n   | function                     | [RFC3711])                \
    \         |\n   | SRTCP authentication key     | 160 bits                    \
    \       |\n   | length                       |                               \
    \     |\n   | SRTCP authentication tag     | 80 bits                         \
    \   |\n   | length                       |                                   \
    \ |\n   +------------------------------+------------------------------------+\n\
    \             Table 4: The AES_256_CM_HMAC_SHA1_32 Crypto Suite\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   IANA has assigned the following parameters in the\
    \ Session Description\n   Protocol (SDP) Security Descriptions registry.\n   \
    \               +-------------------------+-----------+\n                  | Crypto\
    \ Suite Name       | Reference |\n                  +-------------------------+-----------+\n\
    \                  | AES_192_CM_HMAC_SHA1_80 | [RFC6188] |\n                 \
    \ | AES_192_CM_HMAC_SHA1_32 | [RFC6188] |\n                  | AES_256_CM_HMAC_SHA1_80\
    \ | [RFC6188] |\n                  | AES_256_CM_HMAC_SHA1_32 | [RFC6188] |\n \
    \                 +-------------------------+-----------+\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   AES-128 provides a level of security that is\
    \ widely regarded as being\n   more than sufficient for providing confidentiality.\
    \  It is believed\n   that the economic cost of breaking AES-128 is significantly\
    \ higher\n   than the cost of more direct approaches to violating system security,\n\
    \   e.g., theft, bribery, wiretapping, and other forms of malfeasance.\n   Future\
    \ advances in state-of-the art cryptanalysis could eliminate\n   this confidence\
    \ in AES-128, and motivate the use of AES-192 or AES-\n   256.  AES-192 is regarded\
    \ as being secure even against some\n   adversaries for which breaking AES-128\
    \ may be feasible.  Similarly,\n   AES-256 is regarded as being secure even against\
    \ some adversaries for\n   which it may be feasible to break AES-192.  The availability\
    \ of the\n   larger key size versions of AES provides a fallback plan in case\
    \ of\n   unanticipated cryptanalytic results.\n   It is conjectured that AES-256\
    \ provides adequate security even\n   against adversaries that possess the ability\
    \ to construct a quantum\n   computer that works on 256 or more quantum bits.\
    \  No such computer is\n   known to exist; its feasibility is an area of active\
    \ speculation and\n   research.\n   Despite the apparent sufficiency of AES-128,\
    \ some users are\n   interested in the larger AES key sizes.  For some applications,\
    \ the\n   40% increase in computational cost for AES-256 over AES-128 is a\n \
    \  worthwhile bargain when traded for the security advantages outlined\n   above.\
    \  These applications include those with a perceived need for\n   very high security,\
    \ e.g., due to a desire for very long-term\n   confidentiality.\n   AES-256 (as\
    \ it is used in this note) provides the highest level of\n   security, and it\
    \ SHOULD be used whenever the highest possible\n   security is desired.  AES-192\
    \ provides a middle ground between the\n   128-bit and 256-bit versions of AES,\
    \ and it MAY be used when security\n   higher than that of AES-128 is desired.\
    \  In this note, AES-192 and\n   AES-256 are used with keys that are generated\
    \ via a strong pseudo-\n   random source, and thus the related-key attacks that\
    \ have been\n   described in the theoretical literature are not applicable.\n\
    \   As with any cipher, the conjectured security level of AES may change\n   over\
    \ time.  The considerations in this section reflect the best\n   knowledge available\
    \ at the time of publication of this document.\n   It is desirable that AES_192_CM\
    \ and AES_192_CM_PRF be used with an\n   authentication function that uses a 192-bit\
    \ key, and that AES_256_CM\n   and AES_256_CM_PRF be used with an authentication\
    \ function that uses\n   a 256-bit key.  However, this desire is not regarded\
    \ as security\n   critical.  Cryptographic authentication is resilient against\
    \ future\n   advances in cryptanalysis, since the opportunity for a forgery attack\n\
    \   against a session closes when that session closes.  For this reason,\n   this\
    \ note defines new ciphers, but not new authentication functions.\n"
- title: 7.  Test Cases
  contents:
  - "7.  Test Cases\n   The test cases in this section are based on Appendix B of\
    \ [RFC3711].\n"
- title: 7.1.  AES-256-CM Test Cases
  contents:
  - "7.1.  AES-256-CM Test Cases\n    Keystream segment length: 1044512 octets (65282\
    \ AES blocks)\n    Session Key:      57f82fe3613fd170a85ec93c40b1f092\n      \
    \                2ec4cb0dc025b58272147cc438944a98\n    Rollover Counter: 00000000\n\
    \    Sequence Number:  0000\n    SSRC:             00000000\n    Session Salt:\
    \     f0f1f2f3f4f5f6f7f8f9fafbfcfd0000 (already shifted)\n    Offset:        \
    \   f0f1f2f3f4f5f6f7f8f9fafbfcfd0000\n    Counter                            Keystream\n\
    \    f0f1f2f3f4f5f6f7f8f9fafbfcfd0000   92bdd28a93c3f52511c677d08b5515a4\n   \
    \ f0f1f2f3f4f5f6f7f8f9fafbfcfd0001   9da71b2378a854f67050756ded165bac\n    f0f1f2f3f4f5f6f7f8f9fafbfcfd0002\
    \   63c4868b7096d88421b563b8c94c9a31\n    ...                                ...\n\
    \    f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff   cea518c90fd91ced9cbb18c078a54711\n   \
    \ f0f1f2f3f4f5f6f7f8f9fafbfcfdff00   3dbc4814f4da5f00a08772b63c6a046d\n    f0f1f2f3f4f5f6f7f8f9fafbfcfdff01\
    \   6eb246913062a16891433e97dd01a57f\n"
- title: 7.2.  AES_256_CM_PRF Test Cases
  contents:
  - "7.2.  AES_256_CM_PRF Test Cases\n   This section provides test data for the AES_256_CM_PRF\
    \ key derivation\n   function, which uses AES-256 in counter mode.  In the following,\
    \ we\n   walk through the initial key derivation for the AES-256 counter mode\n\
    \   cipher, which requires a 32-octet session encryption key and a 14-\n   octet\
    \ session salt, and the HMAC-SHA1 authentication function, which\n   requires\
    \ a 20-octet session authentication key.  These values are\n   called the cipher\
    \ key, the cipher salt, and the auth key in the\n   following.  Since this is\
    \ the initial key derivation and the key\n   derivation rate is equal to zero,\
    \ the value of (index DIV\n   key_derivation_rate) is zero (actually, a six-octet\
    \ string of zeros).\n   In the following, we shorten key_derivation_rate to kdr.\n\
    \   The inputs to the key derivation function are the 32-octet master key\n  \
    \ and the 14-octet master salt:\n         master key:  f0f04914b513f2763a1b1fa130f10e29\n\
    \                      98f6f6e43e4309d1e622a0e332b9f1b6\n         master salt:\
    \ 3b04803de51ee7c96423ab5b78d2\n   We first show how the cipher key is generated.\
    \  The input block for\n   AES-256-CM is generated by exclusive-oring the master\
    \ salt with the\n   concatenation of the encryption key label 0x00 with (index\
    \ DIV kdr),\n   then padding on the right with two null octets (which implements\
    \ the\n   multiply-by-2^16 operation, see Section 4.3.3 of RFC 3711).  The\n \
    \  resulting value is then AES-256-CM-encrypted using the master key to\n   get\
    \ the cipher key.\n      index DIV kdr:                 000000000000\n      label:\
    \                       00\n      master salt:   3b04803de51ee7c96423ab5b78d2\n\
    \      -----------------------------------------------\n      xor:           3b04803de51ee7c96423ab5b78d2\
    \     (x, PRF input)\n      x*2^16:        3b04803de51ee7c96423ab5b78d20000 (AES-256-CM\
    \ input)\n      x*2^16 + 1:    3b04803de51ee7c96423ab5b78d20001 (2nd AES input)\n\
    \      cipher key:    5ba1064e30ec51613cad926c5a28ef73 (1st AES output)\n    \
    \                 1ec7fb397f70a960653caf06554cd8c4 (2nd AES output)\n   Next,\
    \ we show how the cipher salt is generated.  The input block for\n   AES-256-CM\
    \ is generated by exclusive-oring the master salt with the\n   concatenation of\
    \ the encryption salt label.  That value is padded and\n   encrypted as above.\n\
    \      index DIV kdr:                 000000000000\n      label:             \
    \          02\n      master salt:   3b04803de51ee7c96423ab5b78d2\n      ----------------------------------------------\n\
    \      xor:           3b04803de51ee7cb6423ab5b78d2     (x, PRF input)\n      x*2^16:\
    \        3b04803de51ee7cb6423ab5b78d20000 (AES-256-CM input)\n               \
    \      fa31791685ca444a9e07c6c64e93ae6b (AES-256 ouptut)\n      cipher salt: \
    \  fa31791685ca444a9e07c6c64e93\n   We now show how the auth key is generated.\
    \  The input block for AES-\n   256-CM is generated as above, but using the authentication\
    \ key label.\n       index DIV kdr:                   000000000000\n       label:\
    \                         01\n       master salt:     3b04803de51ee7c96423ab5b78d2\n\
    \       -----------------------------------------------\n       xor:         \
    \    3b04803de51ee7c86423ab5b78d2     (x, PRF input)\n       x*2^16:         \
    \ 3b04803de51ee7c86423ab5b78d20000 (AES-256-CM in)\n    Below, the AES-256 output\
    \ blocks that form the auth key are shown\n    on the left, while the corresponding\
    \ AES-256 input blocks are shown\n    on the right.  Note that the final AES-256\
    \ output is truncated to a\n    4-byte length.  The final auth key is shown below.\n\
    \    auth key blocks                    AES-256 input blocks\n    fd9c32d39ed5fbb5a9dc96b30818454d\
    \   3b04803de51ee7c86423ab5b78d20000\n    1313dc05                           3b04803de51ee7c86423ab5b78d20001\n\
    \    auth key: fd9c32d39ed5fbb5a9dc96b30818454d1313dc05\n"
- title: 7.3.  AES-192-CM Test Cases
  contents:
  - "7.3.  AES-192-CM Test Cases\n    Keystream segment length: 1044512 octets (65282\
    \ AES blocks)\n    Session Key:      eab234764e517b2d3d160d587d8c8621\n      \
    \                9740f65f99b6bcf7\n    Rollover Counter: 00000000\n    Sequence\
    \ Number:  0000\n    SSRC:             00000000\n    Session Salt:     f0f1f2f3f4f5f6f7f8f9fafbfcfd0000\
    \ (already shifted)\n    Offset:           f0f1f2f3f4f5f6f7f8f9fafbfcfd0000\n\
    \    Counter                            Keystream\n    f0f1f2f3f4f5f6f7f8f9fafbfcfd0000\
    \   35096cba4610028dc1b57503804ce37c\n    f0f1f2f3f4f5f6f7f8f9fafbfcfd0001   5de986291dcce161d5165ec4568f5c9a\n\
    \    f0f1f2f3f4f5f6f7f8f9fafbfcfd0002   474a40c77894bc17180202272a4c264d\n   \
    \ ...                                ...\n    f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\
    \   d108d1a31a00bad6367ec23eb044b415\n    f0f1f2f3f4f5f6f7f8f9fafbfcfdff00   c8f57129fdeb970b59f917b257662d4c\n\
    \    f0f1f2f3f4f5f6f7f8f9fafbfcfdff01   a5dab625811034e8cebdfeb6dc158dd3\n"
- title: 7.4.  AES_192_CM_PRF Test Cases
  contents:
  - "7.4.  AES_192_CM_PRF Test Cases\n   This section provides test data for the AES_192_CM_PRF\
    \ key derivation\n   function, which uses AES-192 in counter mode.  In the following,\
    \ we\n   walk through the initial key derivation for the AES-192 counter mode\n\
    \   cipher, which requires a 24-octet session encryption key and a 14-\n   octet\
    \ session salt, and the HMAC-SHA1 authentication function, which\n   requires\
    \ a 20-octet session authentication key.  These values are\n   called the cipher\
    \ key, the cipher salt, and the auth key in the\n   following.  Since this is\
    \ the initial key derivation and the key\n   derivation rate is equal to zero,\
    \ the value of (index DIV\n   key_derivation_rate) is zero (actually, a six-octet\
    \ string of zeros).\n   In the following, we shorten key_derivation_rate to kdr.\n\
    \   The inputs to the key derivation function are the 24-octet master key\n  \
    \ and the 14-octet master salt:\n         master key:  73edc66c4fa15776fb57f9505c171365\n\
    \                      50ffda71f3e8e5f1\n         master salt: c8522f3acd4ce86d5add78edbb11\n\
    \   We first show how the cipher key is generated.  The input block for\n   AES-192-CM\
    \ is generated by exclusive-oring the master salt with the\n   concatenation of\
    \ the encryption key label 0x00 with (index DIV kdr),\n   then padding on the\
    \ right with two null octets (which implements the\n   multiply-by-2^16 operation,\
    \ see Section 4.3.3 of RFC 3711).  The\n   resulting value is then AES-192-CM\
    \ encrypted using the master key to\n   get the cipher key.\n      index DIV kdr:\
    \                 000000000000\n      label:                       00\n      master\
    \ salt:   c8522f3acd4ce86d5add78edbb11\n      -----------------------------------------------\n\
    \      xor:           c8522f3acd4ce86d5add78edbb11     (x, PRF input)\n      x*2^16:\
    \        c8522f3acd4ce86d5add78edbb110000 (AES-192-CM input)\n      x*2^16 + 1:\
    \    c8522f3acd4ce86d5add78edbb110001 (2nd AES input)\n      cipher key:    31874736a8f1143870c26e4857d8a5b2\
    \ (1st AES output)\n                     c4a354407faadabb                 (2nd\
    \ AES output)\n   Next, we show how the cipher salt is generated.  The input block\
    \ for\n   AES-192-CM is generated by exclusive-oring the master salt with the\n\
    \   concatenation of the encryption salt label.  That value is padded and\n  \
    \ encrypted as above.\n      index DIV kdr:                 000000000000\n   \
    \   label:                       02\n      master salt:   c8522f3acd4ce86d5add78edbb11\n\
    \      ----------------------------------------------\n      xor:           c8522f3acd4ce86f5add78edbb11\
    \     (x, PRF input)\n      x*2^16:        c8522f3acd4ce86f5add78edbb110000 (AES-192-CM\
    \ input)\n                     2372b82d639b6d8503a47adc0a6c2590 (AES-192 ouptut)\n\
    \      cipher salt:   2372b82d639b6d8503a47adc0a6c\n   We now show how the auth\
    \ key is generated.  The input block for AES-\n   192-CM is generated as above,\
    \ but using the authentication key label.\n       index DIV kdr:             \
    \      000000000000\n       label:                         01\n       master salt:\
    \     c8522f3acd4ce86d5add78edbb11\n       -----------------------------------------------\n\
    \       xor:             c8522f3acd4ce86c5add78edbb11     (x, PRF input)\n   \
    \    x*2^16:          c8522f3acd4ce86c5add78edbb110000 (AES-192-CM in)\n    Below,\
    \ the AES-192 output blocks that form the auth key are shown\n    on the left,\
    \ while the corresponding AES-192 input blocks are shown\n    on the right.  Note\
    \ that the final AES-192 output is truncated to a\n    four-byte length.  The\
    \ final auth key is shown below.\n    auth key blocks                    AES-192\
    \ input blocks\n    355b10973cd95b9eacf4061c7e1a7151   c8522f3acd4ce86c5add78edbb110000\n\
    \    e7cfbfcb                           c8522f3acd4ce86c5add78edbb110001\n   \
    \ auth key: 355b10973cd95b9eacf4061c7e1a7151e7cfbfcb\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   Thanks are due to John Mattsson for verifying the test\
    \ cases in the\n   document and providing comments, to Bob Bell for feedback and\n\
    \   encouragement, and to Richard Barnes and Hilarie Orman for\n   constructive\
    \ review.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [FIPS197]  \"The Advanced Encryption Standard\
    \ (AES)\", FIPS-197 Federal\n              Information Processing Standard.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3550]  Schulzrinne,\
    \ H., Casner, S., Frederick, R., and V.\n              Jacobson, \"RTP: A Transport\
    \ Protocol for Real-Time\n              Applications\", STD 64, RFC 3550, July\
    \ 2003.\n   [RFC3711]  Baugher, M., McGrew, D., Naslund, M., Carrara, E., and\
    \ K.\n              Norrman, \"The Secure Real-time Transport Protocol (SRTP)\"\
    ,\n              RFC 3711, March 2004.\n   [RFC4568]  Andreasen, F., Baugher,\
    \ M., and D. Wing, \"Session\n              Description Protocol (SDP) Security\
    \ Descriptions for Media\n              Streams\", RFC 4568, July 2006.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [suiteB]   \"Suite B Cryptography\", http://www.nsa.gov/ia/programs/\n\
    \              suiteb_cryptography/index.shtml.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   David A. McGrew\n   Cisco Systems, Inc.\n   510 McCarthy\
    \ Blvd.\n   Milpitas, CA  95035\n   US\n   Phone: (408) 525 8651\n   EMail: mcgrew@cisco.com\n\
    \   URI:   http://www.mindspring.com/~dmcgrew/dam.htm\n"
