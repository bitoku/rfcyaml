- contents:
  - '              Extended ICMP to Support Multi-Part Messages

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document redefines selected ICMP messages to support multi-part\n
    \  operation.  A multi-part ICMP message carries all of the information\n   that
    ICMP messages carried previously, as well as additional\n   information that applications
    may require.\n   Multi-part messages are supported by an ICMP extension structure.\n
    \  The extension structure is situated at the end of the ICMP message.\n   It
    includes an extension header followed by one or more extension\n   objects.  Each
    extension object contains an object header and object\n   payload.  All object
    headers share a common format.\n   This document further redefines the above mentioned
    ICMP messages by\n   specifying a length attribute.  All of the currently defined
    ICMP\n   messages to which an extension structure can be appended include an\n
    \  \"original datagram\" field.  The \"original datagram\" field contains\n   the
    initial octets of the datagram that elicited the ICMP error\n   message.  Although
    the original datagram field is of variable length,\n   the ICMP message does not
    include a field that specifies its length.\n   Therefore, in order to facilitate
    message parsing, this document\n   allocates eight previously reserved bits to
    reflect the length of the\n   \"original datagram\" field.\n   The proposed modifications
    change the requirements for ICMP\n   compliance.  The impact of these changes
    on compliant implementations\n   is discussed, and new requirements for future
    implementations are\n   presented.\n   This memo updates RFC 792 and RFC 4443.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Conventions Used in This Document ...............................4\n   3.
    Summary of Changes to ICMP ......................................4\n   4. ICMP
    Extensibility ..............................................4\n      4.1. ICMPv4
    Destination Unreachable .............................7\n      4.2. ICMPv4 Time
    Exceeded .......................................8\n      4.3. ICMPv4 Parameter
    Problem ...................................8\n      4.4. ICMPv6 Destination Unreachable
    .............................9\n      4.5. ICMPv6 Time Exceeded .......................................9\n
    \     4.6. ICMP Messages That Can Be Extended ........................10\n   5.
    Backwards Compatibility ........................................10\n      5.1.
    Classic Application Receives ICMP Message with\n           Extensions ................................................12\n
    \     5.2. Non-Compliant Application Receives ICMP Message\n           with No
    Extensions ........................................12\n      5.3. Non-Compliant
    Application Receives ICMP Message\n           with Compliant Extensions .................................13\n
    \     5.4. Compliant Application Receives ICMP Message with\n           No Extensions
    .............................................14\n      5.5. Compliant Application
    Receives ICMP Message with\n           Non-Compliant Extensions ..................................14\n
    \  6. Interaction with Network Address Translation ...................14\n   7.
    The ICMP Extension Structure ...................................15\n   8. ICMP
    Extension Objects .........................................16\n   9. Security
    Considerations ........................................16\n   10. IANA Considerations
    ...........................................17\n   11. Acknowledgments ...............................................17\n
    \  12. References ....................................................17\n      12.1.
    Normative References .....................................17\n      12.2. Informative
    References ...................................17\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document redefines selected ICMPv4 [RFC0792] and ICMPv6\n
    \  [RFC4443] messages to include an extension structure and a length\n   attribute.
    \ The extension structure supports multi-part ICMP\n   operation.  Protocol designers
    can make an ICMP message carry\n   additional information by encoding that information
    in the extension\n   structure.\n   This document also addresses a fundamental
    problem in ICMP\n   extensibility.  All of the ICMP messages addressed by this
    memo\n   include an \"original datagram\" field.  The \"original datagram\" field\n
    \  contains the initial octets of the datagram that elicited the ICMP\n   error
    message.  Although the \"original datagram\" field is of variable\n   length,
    the ICMP message does not include a field that specifies its\n   length.\n   Application
    software infers the length of the \"original datagram\"\n   field from the total
    length of the ICMP message.  If an extension\n   structure were appended to the
    message without adding a length\n   attribute for the \"original datagram\" field,
    the message would become\n   unparsable.  Specifically, application software would
    not be able to\n   determine where the \"original datagram\" field ends and where
    the\n   extension structure begins.  Therefore, this document proposes a\n   length
    attribute as well as an extension structure that is appended\n   to the ICMP message.\n
    \  The current memo also addresses backwards compatibility with existing\n   ICMP
    implementations that either do not implement the extensions\n   defined herein
    or implement them without adding the required length\n   attributes.  In particular,
    this document addresses backwards\n   compatibility with certain, widely deployed,
    MPLS-aware ICMPv4\n   implementations that send the extensions defined herein
    without\n   adding the required length attribute.\n   The current memo does not
    define any ICMP extension objects.  It\n   defines only the extension header and
    a common header that all\n   extension objects share.  [UNNUMBERED], [ROUTING-INST],
    and\n   [MPLS-ICMP] provide sample applications of the ICMP Extension Object.\n
    \  The above mentioned memos share a common characteristic.  They all\n   append
    information to the ICMP Time Expired message for consumption\n   by TRACEROUTE.
    \ In this case, as in many others, appending\n   information to the existing ICMP
    Time Expired Message is preferable\n   to defining a new message and emitting
    two messages whenever a packet\n   is dropped due to TTL expiration.\n"
  title: 1.  Introduction
- contents:
  - "2.   Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in [RFC2119].\n"
  title: 2.   Conventions Used in This Document
- contents:
  - "3.  Summary of Changes to ICMP\n   The following is a summary of changes to ICMP
    that are introduced by\n   this memo:\n      An ICMP Extension Structure MAY be
    appended to ICMPv4 Destination\n      Unreachable, Time Exceeded, and Parameter
    Problem messages.\n      An ICMP Extension Structure MAY be appended to ICMPv6
    Destination\n      Unreachable, and Time Exceeded messages.\n      The above mentioned
    messages include an \"original datagram\" field,\n      and the message formats
    are updated to specify a length attribute\n      for the \"original datagram\"
    field.\n      When the ICMP Extension Structure is appended to an ICMP message\n
    \     and that ICMP message contains an \"original datagram\" field, the\n      \"original
    datagram\" field MUST contain at least 128 octets.\n      When the ICMP Extension
    Structure is appended to an ICMPv4 message\n      and that ICMPv4 message contains
    an \"original datagram\" field, the\n      \"original datagram\" field MUST be
    zero padded to the nearest\n      32-bit boundary.\n      When the ICMP Extension
    Structure is appended to an ICMPv6 message\n      and that ICMPv6 message contains
    an \"original datagram\" field, the\n      \"original datagram\" field MUST be
    zero padded to the nearest\n      64-bit boundary.\n      ICMP messages defined
    in the future SHOULD indicate whether or not\n      they support the extension
    mechanism defined in this\n      specification.  It is recommended that all new
    messages support\n      extensions.\n"
  title: 3.  Summary of Changes to ICMP
- contents:
  - "4.  ICMP Extensibility\n   RFC 792 defines the following ICMPv4 message types:\n
    \     - Destination Unreachable\n      - Time Exceeded\n      - Parameter Problem\n
    \     - Source Quench\n      - Redirect\n      - Echo Request/Reply\n      - Timestamp/Timestamp
    Reply\n      - Information Request/Information Reply\n   [RFC1191] reserves bits
    for the \"Next-Hop MTU\" field in the\n   Destination Unreachable message.\n   RFC
    4443 defines the following ICMPv6 message types:\n      - Destination Unreachable\n
    \     - Packet Too Big\n      - Time Exceeded\n      - Parameter Problem\n      -
    Echo Request/Reply\n   Many ICMP messages are extensible as currently defined.
    \ Protocol\n   designers can extend ICMP messages by simply appending fields or
    data\n   structures to them.\n   However, the following ICMP messages are not
    extensible as currently\n   defined:\n      - ICMPv4 Destination Unreachable (type
    = 3)\n      - ICMPv4 Time Exceeded (type = 11)\n      - ICMPv4 Parameter Problem
    (type = 12)\n      - ICMPv6 Destination Unreachable (type = 1)\n      - ICMPv6
    Packet Too Big (type = 2)\n      - ICMPv6 Time Exceeded (type = 3)\n      - ICMPv6
    Parameter Problem (type = 4)\n   These messages contain an \"original datagram\"
    field which represents\n   the leading octets of the datagram to which the ICMP
    message is a\n   response.  RFC 792 defines the \"original datagram\" field for
    ICMPv4\n   messages.  In RFC 792, the \"original datagram\" field includes the
    IP\n   header plus the next eight octets of the original datagram.\n   [RFC1812]
    extends the \"original datagram\" field to contain as many\n   octets as possible
    without causing the ICMP message to exceed the\n   minimum IPv4 reassembly buffer
    size (i.e., 576 octets).  RFC 4443\n   defines the \"original datagram\" field
    for ICMPv6 messages.  In RFC\n   4443, the \"original datagram\" field always
    contained as many octets\n   as possible without causing the ICMP message to exceed
    the minimum\n   IPv6 MTU (i.e., 1280 octets).\n   Unfortunately, the \"original
    datagram\" field lacks a length\n   attribute.  Application software infers the
    length of this field from\n   the total length of the ICMP message.  If an extension
    structure were\n   appended to the message without adding a length attribute for
    the\n   \"original datagram\" field, the message would become unparsable.\n   Specifically,
    application software would not be able to determine\n   where the \"original datagram\"
    field ends and where the extension\n   structure begins.\n   In order to solve
    this problem, this memo introduces an 8-bit length\n   attribute to the following
    ICMPv4 messages.\n      - Destination Unreachable (type = 3)\n      - Time Exceeded
    (type = 11)\n      - Parameter Problem (type = 12)\n   It also introduces an 8-bit
    length attribute to the following ICMPv6\n   messages.\n      - Destination Unreachable
    (type = 1)\n      - Time Exceeded (type = 3)\n   The length attribute MUST be
    specified when the ICMP Extension\n   Structure is appended to the above mentioned
    ICMP messages.\n   The length attribute represents the length of the \"original
    datagram\"\n   field.  Space for the length attribute is claimed from reserved\n
    \  octets, whose value was previously required to be zero.\n   For ICMPv4 messages,
    the length attribute represents 32-bit words.\n   When the length attribute is
    specified, the \"original datagram\" field\n   MUST be zero padded to the nearest
    32-bit boundary.  Because the\n   sixth octet of each of the impacted ICMPv4 messages
    was reserved for\n   future use, this octet was selected as the location of the
    length\n   attribute in ICMPv4.\n   For ICMPv6 messages, the length attribute
    represents 64-bit words.\n   When the length attribute is specified, the \"original
    datagram\" field\n   MUST be zero padded to the nearest 64-bit boundary.  Because
    the\n   fifth octet of each of the impacted ICMPv6 messages was reserved for\n
    \  future use, this octet was selected as the location of the length\n   attribute
    in ICMPv6.\n   In order to achieve backwards compatibility, when the ICMP Extension\n
    \  Structure is appended to an ICMP message and that ICMP message\n   contains
    an \"original datagram\" field, the \"original datagram\" field\n   MUST contain
    at least 128 octets.  If the original datagram did not\n   contain 128 octets,
    the \"original datagram\" field MUST be zero padded\n   to 128 octets.  (See Section
    5.1 for rationale.)\n   The following sub-sections depict length attribute as
    it has been\n   introduced to selected ICMP messages.\n"
  - contents:
    - "4.1.  ICMPv4 Destination Unreachable\n   Figure 1 depicts the ICMPv4 Destination
      Unreachable Message.\n       0                   1                   2                   3\n
      \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     Type      |     Code      |          Checksum             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     unused    |    Length     |         Next-Hop MTU*         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |      Internet Header + leading octets of original datagram    |\n      |
      \                                                              |\n      |                           //
      \                                 |\n      |                                                               |\n
      \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                 Figure
      1: ICMPv4 Destination Unreachable\n   The syntax and semantics of all fields
      are unchanged from RFC 792.\n   However, a length attribute is added to the
      second word.  The length\n   attribute represents length of the padded \"original
      datagram\" field,\n   measured in 32-bit words.\n   * The Next-Hop MTU field
      is not required in all cases.  It is\n     depicted only to demonstrate that
      those bits are not available for\n     assignment in this memo.\n"
    title: 4.1.  ICMPv4 Destination Unreachable
  - contents:
    - "4.2.  ICMPv4 Time Exceeded\n   Figure 2 depicts the ICMPv4 Time Exceeded Message.\n
      \      0                   1                   2                   3\n       0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     Type      |     Code      |          Checksum             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     unused    |    Length     |          unused               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |      Internet Header + leading octets of original datagram    |\n      |
      \                                                              |\n      |                           //
      \                                 |\n      |                                                               |\n
      \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                      Figure
      2: ICMPv4 Time Exceeded\n   The syntax and semantics of all fields are unchanged
      from RFC 792,\n   except for a length attribute which is added to the second
      word.  The\n   length attribute represents length of the padded \"original datagram\"\n
      \  field, measured in 32-bit words.\n"
    title: 4.2.  ICMPv4 Time Exceeded
  - contents:
    - "4.3.  ICMPv4 Parameter Problem\n   Figure 3 depicts the ICMPv4 Parameter Problem
      Message.\n       0                   1                   2                   3\n
      \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     Type      |     Code      |          Checksum             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |    Pointer    |    Length     |          unused               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |      Internet Header + leading octets of original datagram    |\n      |
      \                                                              |\n      |                           //
      \                                 |\n      |                                                               |\n
      \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                    Figure
      3: ICMPv4 Parameter Problem\n   The syntax and semantics of all fields are unchanged
      from RFC 792,\n   except for a length attribute which is added to the second
      word.  The\n   length attribute represents length of the padded \"original datagram\"\n
      \  field, measured in 32-bit words.\n"
    title: 4.3.  ICMPv4 Parameter Problem
  - contents:
    - "4.4.  ICMPv6 Destination Unreachable\n   Figure 4 depicts the ICMPv6 Destination
      Unreachable Message.\n          0                   1                   2                   3\n
      \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     Type      |     Code      |          Checksum             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |    Length     |                  Unused                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                    As much of invoking packet                 |\n      +
      \               as possible without the ICMPv6 packet          +\n      |                exceeding
      the minimum IPv6 MTU [RFC4443]       |\n                 Figure 4: ICMPv6 Destination
      Unreachable\n   The syntax and semantics of all fields are unchanged from RFC
      4443.\n   However, a length attribute is added to the second word.  The length\n
      \  attribute represents length of the padded \"original datagram\" field,\n
      \  measured in 64-bit words.\n"
    title: 4.4.  ICMPv6 Destination Unreachable
  - contents:
    - "4.5.  ICMPv6 Time Exceeded\n   Figure 5 depicts the ICMPv6 Time Exceeded Message.\n
      \          0                   1                   2                   3\n       0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     Type      |     Code      |          Checksum             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |    Length     |                 Unused                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                    As much of invoking packet                 |\n      +
      \               as possible without the ICMPv6 packet          +\n      |                exceeding
      the minimum IPv6 MTU [RFC4443]       |\n                      Figure 5: ICMPv6
      Time Exceeded\n   The syntax and semantics of all fields are unchanged from
      RFC 4443,\n   except for a length attribute which is added to the second word.
      \ The\n   length attribute represents length of the padded \"original datagram\"\n
      \  field, measured in 64-bit words.\n"
    title: 4.5.  ICMPv6 Time Exceeded
  - contents:
    - "4.6.  ICMP Messages That Can Be Extended\n   The ICMP Extension Structure MAY
      be appended to messages of the\n   following types:\n      - ICMPv4 Destination
      Unreachable\n      - ICMPv4 Time Exceeded\n      - ICMPv4 Parameter Problem\n
      \     - ICMPv6 Destination Unreachable\n      - ICMPv6 Time Exceeded\n   The
      ICMP Extension Structure MUST NOT be appended to any of the other\n   ICMP messages
      mentioned in Section 4.  Extensions were not defined\n   for the ICMPv6 \"Packet
      Too Big\" and \"Parameter Problem\" messages\n   because these messages lack
      space for a length attribute.\n"
    title: 4.6.  ICMP Messages That Can Be Extended
  title: 4.  ICMP Extensibility
- contents:
  - "5.  Backwards Compatibility\n   ICMP messages can be categorized as follows:\n
    \     - Messages that do not include any ICMP extensions\n      - Messages that
    include non-compliant ICMP extensions\n      - Messages that includes compliant
    ICMP extensions\n   Any ICMP implementation can send a message that does not include\n
    \  extensions.  ICMP implementations produced prior to 1999 are not\n   known
    to send ICMP extensions.\n   Some ICMP implementations, produced between 1999
    and the time of this\n   publication, may send a non-compliant version of ICMP
    extensions\n   described in this memo.  Specifically, these implementations may\n
    \  append the ICMP Extension Structure to the Time Exceeded and\n   Destination
    Unreachable messages.  When they do this, they send\n   exactly 128 octets representing
    the original datagram, zero padding\n   if required.  They also calculate checksums
    as described in this\n   document.  However, they do not specify a length attribute
    to be\n   associated with the \"original datagram\" field.\n   It is assumed that
    ICMP implementations produced in the future will\n   send ICMP extensions that
    are compliant with this specification.\n   Likewise, applications that consume
    ICMP messages can be categorized\n   as follows:\n      - Classic applications\n
    \     - Non-compliant applications\n      - Compliant applications\n   Classic
    applications do not parse extensions defined in this memo.\n   They are insensitive
    to the length attribute that is associated with\n   the \"original datagram\"
    field.\n   Non-compliant implementations parse the extensions defined in this\n
    \  memo, but only in conjunction with the Time Expired and Destination\n   Unreachable
    messages.  They require the \"original datagram\" field to\n   contain exactly
    128 octets and are insensitive to the length\n   attribute that is associated
    with the \"original datagram\" field.\n   Non-compliant applications were produced
    between 1999 and the time of\n   publication of this memo.\n   Compliant applications
    comply fully with the specifications of this\n   document.\n   In order to demonstrate
    backwards compatibility, Table 1 describes\n   how members of each application
    category would parse each category of\n   ICMP message.\n   +----------------+----------------+----------------+----------------+\n
    \  |                |  No Extensions |  Non-compliant |    Compliant   |\n   |
    \               |                |   Extensions   |   Extensions   |\n   +----------------+----------------+----------------+----------------+\n
    \  | Classic        |        -       |   Section 5.1  |   Section 5.1  |\n   |
    Application    |                |                |                |\n   |                |
    \               |                |                |\n   | Non-compliant  |   Section
    5.2  |        -       |   Section 5.3  |\n   | Application    |                |
    \               |                |\n   |                |                |                |
    \               |\n   | Compliant      |   Section 5.4  |   Section 5.5  |        -
    \      |\n   | Application    |                |                |                |\n
    \  +----------------+----------------+----------------+----------------+\n                                  Table
    1\n   In the table above, cells that contain a dash represent the nominal\n   case
    and require no explanation.  In the following sections, we\n   assume that the
    ICMP message type is \"Time Exceeded\".\n"
  - contents:
    - "5.1.  Classic Application Receives ICMP Message with Extensions\n   When a
      classic application receives an ICMP message that includes\n   extensions, it
      will incorrectly interpret those extensions as being\n   part of the \"original
      datagram\" field.  Fortunately, the extensions\n   are guaranteed to begin at
      least 128 octets beyond the beginning of\n   the \"original datagram\" field.
      \ So, only those ICMP applications that\n   process the 129th octet of the \"original
      datagram\" field will be\n   adversely effected.  To date, only two applications
      falling into this\n   category have been identified, and the degree to which
      they are\n   effected is minimal.\n   Some TCP stacks, when they receive an
      ICMP message, verify the\n   checksum in the original datagram field [ATTACKS].
      \ If the checksum\n   is incorrect, the TCP stack discards the ICMP message
      for security\n   reasons.  If the trailing octets of the original datagram field
      are\n   overwritten by ICMP extensions, the TCP stack will discard an ICMP\n
      \  message that it would not otherwise have discarded.  The impact of\n   this
      issue is considered to be minimal because many ICMP messages are\n   discarded
      for other reasons (e.g., ICMP filtering, network\n   congestion, checksum was
      incorrect because original datagram field\n   was truncated.)\n   Another theoretically
      possible, but highly improbably scenario occurs\n   when ICMP extensions overwrite
      the portion of the original datagram\n   field that represents the TCP header,
      causing the TCP stack to\n   operate upon the wrong TCP connection.  This scenario
      is highly\n   unlikely because it occurs only when the TCP header appears at
      or\n   beyond the 128th octet of the original datagram field and then only\n
      \  when the extensions approximate a valid TCP header.\n"
    title: 5.1.  Classic Application Receives ICMP Message with Extensions
  - contents:
    - "5.2.  Non-Compliant Application Receives ICMP Message with No Extensions\n
      \  When a non-compliant ICMPv4 application receives a message that\n   contains
      no extensions, the application examines the total length of\n   the ICMPv4 message.
      \ If the total ICMPv4 message length is less than\n   the length of its IP header
      plus 144 octets, the application\n   correctly determines that the message does
      not contain any\n   extensions.\n   The 144-octet sum is derived from 8 octets
      for the first two words of\n   the ICMPv4 Time Exceeded message, 128 octets
      for the \"original\n   datagram\" field, 4 octets for the ICMP Extension Header,
      and 4 octets\n   for a single ICMP Object header.  All of these octets would
      be\n   required if extensions were present.\n   If the ICMPv4 payload contains
      144 octets or more, the application\n   must examine the 137th octet to determine
      whether it represents a\n   valid ICMPv4 Extension Header.  In order to represent
      a valid\n   Extension Header, it must contain a valid version number and\n   checksum.
      \ If it does not contain a valid version number and\n   checksum, the application
      correctly determines that the message does\n   not contain any extensions.\n
      \  Non-compliant applications assume that the ICMPv4 Extension Structure\n   begins
      on the 137th octet of the Time Exceeded message, after a\n   128-octet field
      representing the padded \"original datagram\" message.\n   It is possible that
      a non-compliant application will parse an ICMPv4\n   message incorrectly under
      the following conditions:\n      - the message does not contain extensions\n
      \     - the original datagram field contains 144 octets or more\n      - selected
      octets of the original datagram field represent the\n        correct values
      for an extension header version number and\n        checksum\n   Although this
      is possible, it is very unlikely.\n   A similar analysis can be performed for
      ICMPv6.  However, the numeric\n   constants would change as appropriate.\n"
    title: 5.2.  Non-Compliant Application Receives ICMP Message with No Extensions
  - contents:
    - "5.3.  Non-Compliant Application Receives ICMP Message with Compliant\n      Extensions\n
      \  When a non-compliant application receives a message that contains\n   compliant
      ICMP extensions, it will parse those extensions correctly\n   only if the \"original
      datagram\" field contains exactly 128 octets.\n   This is because non-compliant
      applications are insensitive to the\n   length attribute that is associated
      with the \"original datagram\"\n   field.  (They assume its value to be 128.)\n
      \  Provided that the entire ICMP message does not exceed the minimum\n   reassembly
      buffer size (576 octets for ICMPv4 or 1280 octets for\n   ICMPv6), there is
      no upper limit upon the length of the \"original\n   datagram\" field.  However,
      each implementation will decide how many\n   octets to include.  Those wishing
      to be backward compatible with non-\n   compliant TRACEROUTE implementations
      will include exactly 128 octets.\n   Those not requiring compatibility with
      non-compliant TRACEROUTE\n   applications may include more octets.\n"
    title: 5.3.  Non-Compliant Application Receives ICMP Message with Compliant
  - contents:
    - "5.4.  Compliant Application Receives ICMP Message with No Extensions\n   When
      a compliant application receives an ICMP message, it examines\n   the length
      attribute that is associated with the \"original datagram\"\n   field.  If the
      length attribute is zero, the compliant application\n   MUST determine that
      the message contains no extensions.\n"
    title: 5.4.  Compliant Application Receives ICMP Message with No Extensions
  - contents:
    - "5.5.  Compliant Application Receives ICMP Message with Non-Compliant\n      Extensions\n
      \  When a compliant application receives an ICMP message, it examines\n   the
      length attribute that is associated with the \"original datagram\"\n   field.
      \ If the length attribute is zero, the compliant application\n   MUST determine
      that the message contains no extensions.  In this\n   case, that determination
      is technically correct, but not backwards\n   compatible with the non-compliant
      implementation that originated the\n   ICMP message.\n   So, to ease transition
      yet encourage compliant implementation,\n   compliant TRACEROUTE implementations
      MUST include a non-default\n   operation mode to also interpret non-compliant
      responses.\n   Specifically, when a TRACEROUTE application operating in non-\n
      \  compliant mode receives a sufficiently long ICMP message that does\n   not
      specify a length attribute, it will parse for a valid extension\n   header at
      a fixed location, assuming a 128-octet \"original datagram\"\n   field.  If
      the application detects a valid version and checksum, it\n   will treat the
      octets that follow as an extension structure.\n"
    title: 5.5.  Compliant Application Receives ICMP Message with Non-Compliant
  title: 5.  Backwards Compatibility
- contents:
  - "6.  Interaction with Network Address Translation\n   The ICMP extensions defined
    in this memo do not interfere with\n   Network Address Translation.  [RFC3022]
    permits traditional NAT\n   devices to modify selected fields within ICMP messages.
    \ These fields\n   include the \"original datagram\" field mentioned above.  However,
    if a\n   NAT device modifies the \"original datagram\" field, it should modify\n
    \  only the leading octets of that field, which represent the outermost\n   IP
    header.  Because the outermost IP header is guaranteed to be\n   contained by
    the first 128 octets of the \"original datagram\" field,\n   ICMP extensions and
    NAT will not interfere with one another.\n   It is conceivable that a NAT implementation
    might overstep the\n   restrictions of RFC 3022 and overwrite the length attribute
    specified\n   by this memo.  If a NAT implementation were to overwrite the length\n
    \  attribute with zeros, the resulting packet will be indistinguishable\n   from
    a packet that was generated by a non-compliant ICMP\n   implementation.  See Section
    5.5 for packet details and a discussion\n   of backwards compatibility.\n"
  title: 6.  Interaction with Network Address Translation
- contents:
  - "7.  The ICMP Extension Structure\n   This memo proposes an optional ICMP Extension
    Structure that can be\n   appended to the ICMP messages referenced in Section
    4.6 of this\n   document.\n   The Extension Structure contains exactly one Extension
    Header\n   followed by one or more objects.  Having received an ICMP message\n
    \  with extensions, application software MAY process selected objects\n   while
    ignoring others.  The presence of an unrecognized object does\n   not imply that
    an ICMP message is malformed.\n   As stated above, the total length of the ICMP
    message, including\n   extensions, MUST NOT exceed the minimum reassembly buffer
    size.\n   Figure 6 depicts the ICMP Extension Header.\n       0                   1
    \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |Version|      (Reserved)       |           Checksum            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                     Figure 6: ICMP Extension Header\n   The fields of the ICMP
    Extension Header are as follows:\n   Version: 4 bits\n      ICMP extension version
    number.  This is version 2.\n   Reserved: 12 bits\n      Must be set to 0.\n   Checksum:
    16 bits\n      The one's complement of the one's complement sum of the data\n
    \     structure, with the checksum field replaced by zero for the\n      purpose
    of computing the checksum.  An all-zero value means that\n      no checksum was
    transmitted.  See Section 5.2 for a description of\n      how this field is used.\n"
  title: 7.  The ICMP Extension Structure
- contents:
  - "8.  ICMP Extension Objects\n   Each extension object contains one or more 32-bit
    words, representing\n   an object header and payload.  All object headers share
    a common\n   format.  Figure 7 depicts the object header and payload.\n       0
    \                  1                   2                   3\n       0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |             Length            |   Class-Num   |   C-Type      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                                                               |\n      |
    \                  // (Object payload) //                      |\n      |                                                               |\n
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                    Figure
    7: Object Header and Payload\n   An object header has the following fields:\n
    \  Length: 16 bits\n      Length of the object, measured in octets, including
    the object\n      header and object payload.\n   Class-Num: 8 bits\n      Identifies
    object class.\n   C-Type: 8 bits\n      Identifies object sub-type.\n"
  title: 8.  ICMP Extension Objects
- contents:
  - "9.  Security Considerations\n   Upon receipt of an ICMP message, application
    software must check it\n   for syntactic correctness.  The extension checksum
    must be verified.\n   Improperly specified length attributes and other syntax
    problems may\n   result in buffer overruns.\n   This memo does not define the
    conditions under which a router sends\n   an ICMP message.  Therefore, it does
    not expose routers to any new\n   denial-of-service attacks.  Routers may need
    to limit the rate at\n   which ICMP messages are sent.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  IANA Considerations\n   The ICMP Extension Object header contains two 8-bit
    fields: The\n   Class-Num identifies the object class, and the C-Type identifies
    the\n   class sub-type.  Sub-type values are defined relative to a specific\n
    \  object class value, and are defined per class.\n   IANA has established a registry
    of ICMP extension objects classes and\n   class sub-types.  There are no values
    assigned within this document\n   to maintain.  Object classes 0xF7 - 0xFF are
    reserved for private\n   use.  Object class values are assignable on a first-come-first-serve\n
    \  basis.  The policy for assigning sub-type values should be defined in\n   the
    document defining new class values.\n"
  title: 10.  IANA Considerations
- contents:
  - "11.  Acknowledgments\n   Thanks to Pekka Nikander, Mark Doll, Fernando Gont,
    Joe Touch,\n   Christian Voiqt, and Sharon Chrisholm for their comments regarding\n
    \  this document.\n"
  title: 11.  Acknowledgments
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [RFC0792]      Postel, J., \"Internet Control
      Message Protocol\", STD\n                  5, RFC 792, September 1981.\n   [RFC1191]
      \     Mogul, J. and S. Deering, \"Path MTU discovery\", RFC\n                  1191,
      November 1990.\n   [RFC1812]      Baker, F., \"Requirements for IP Version 4
      Routers\",\n                  RFC 1812, June 1995.\n   [RFC2119]      Bradner,
      S., \"Key words for use in RFCs to Indicate\n                  Requirement Levels\",
      BCP 14, RFC 2119, March 1997.\n   [RFC4443]      Conta, A., Deering, S., and
      M. Gupta, Ed., \"Internet\n                  Control Message Protocol (ICMPv6)
      for the Internet\n                  Protocol Version 6 (IPv6) Specification\",
      RFC 4443,\n                  March 2006.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [UNNUMBERED]   Atlas, A., Bonica, R., Rivers,
      JR., Shen, N., and E.\n                  Chen, \"ICMP Extensions for Unnumbered
      Interfaces\",\n                  Work in Progress, March 2007.\n   [MPLS-ICMP]
      \   Bonica, R., Gan, D., Tappan, D., and C. Pignataro,\n                  \"ICMP
      Extensions for MultiProtocol Label Switching\",\n                  Work in Progress,
      January 2007.\n   [ATTACKS]      Gont, F., \"ICMP attacks against TCP\", Work
      in\n                  Progress, October 2006.\n   [ROUTING-INST] Shen, N. and
      E. Chen, \"ICMP Extensions for Routing\n                  Instances\",  Work
      in Progress, November 2006.\n   [RFC3022]      Srisuresh, P. and K. Egevang,
      \"Traditional IP Network\n                  Address Translator (Traditional
      NAT)\", RFC 3022,\n                  January 2001.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Authors' Addresses\n   Ronald P. Bonica\n   Juniper Networks\n   2251 Corporate
    Park Drive\n   Herndon, VA  20171\n   US\n   EMail: rbonica@juniper.net\n   Der-Hwa
    Gan\n   Consultant\n   EMail: derhwagan@yahoo.com\n   Daniel C. Tappan\n   Consultant\n
    \  EMail: Dan.Tappan@gmail.com\n   Carlos Pignataro\n   Cisco Systems, Inc.\n
    \  7025 Kit Creek Road\n   Research Triangle Park, NC  27709\n   US\n   EMail:
    cpignata@cisco.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
