- title: __initial_text__
  contents:
  - '             Internet Web Replication and Caching Taxonomy

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo specifies standard terminology and the taxonomy of web\n\
    \   replication and caching infrastructure as deployed today.  It\n   introduces\
    \ standard concepts, and protocols used today within this\n   application domain.\
    \  Currently deployed solutions employing these\n   technologies are presented\
    \ to establish a standard taxonomy.  Known\n   problems with caching proxies are\
    \ covered in the document titled\n   \"Known HTTP Proxy/Caching Problems\", and\
    \ are not part of this\n   document.  This document presents open protocols and\
    \ points to\n   published material for each protocol.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.      Introduction . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.      Terminology  . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   2.1     Base Terms . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   2.2     First order derivative terms . . . . . . . . . . . .\
    \ . . .  6\n   2.3     Second order derivatives . . . . . . . . . . . . . . .\
    \ . .  7\n   2.4     Topological terms  . . . . . . . . . . . . . . . . . . .\
    \ .  7\n   2.5     Automatic use of proxies . . . . . . . . . . . . . . . . .\
    \  8\n   3.      Distributed System Relationships . . . . . . . . . . . . .  9\n\
    \   3.1     Replication Relationships  . . . . . . . . . . . . . . . .  9\n  \
    \ 3.1.1   Client to Replica  . . . . . . . . . . . . . . . . . . . .  9\n   3.1.2\
    \   Inter-Replica  . . . . . . . . . . . . . . . . . . . . . .  9\n   3.2    \
    \ Proxy Relationships  . . . . . . . . . . . . . . . . . . . 10\n   3.2.1   Client\
    \ to Non-Interception Proxy . . . . . . . . . . . . . 10\n   3.2.2   Client to\
    \ Surrogate to Origin Server . . . . . . . . . . . 10\n   3.2.3   Inter-Proxy\
    \  . . . . . . . . . . . . . . . . . . . . . . . 11\n   3.2.3.1 (Caching) Proxy\
    \ Meshes . . . . . . . . . . . . . . . . . . 11\n   3.2.3.2 (Caching) Proxy Arrays\
    \ . . . . . . . . . . . . . . . . . . 12\n   3.2.4   Network Element to Caching\
    \ Proxy . . . . . . . . . . . . . 12\n   4.      Replica Selection  . . . . .\
    \ . . . . . . . . . . . . . . . 13\n   4.1     Navigation Hyperlinks  . . . .\
    \ . . . . . . . . . . . . . . 13\n   4.2     Replica HTTP Redirection . . . .\
    \ . . . . . . . . . . . . . 14\n   4.3     DNS Redirection  . . . . . . . . .\
    \ . . . . . . . . . . . . 14\n   5.      Inter-Replica Communication  . . . .\
    \ . . . . . . . . . . . 15\n   5.1     Batch Driven Replication . . . . . . .\
    \ . . . . . . . . . . 15\n   5.2     Demand Driven Replication  . . . . . . .\
    \ . . . . . . . . . 16\n   5.3     Synchronized Replication . . . . . . . . .\
    \ . . . . . . . . 16\n   6.      User Agent to Proxy Configuration  . . . . .\
    \ . . . . . . . 17\n   6.1     Manual Proxy Configuration . . . . . . . . . .\
    \ . . . . . . 17\n   6.2     Proxy Auto Configuration (PAC) . . . . . . . . .\
    \ . . . . . 17\n   6.3     Cache Array Routing Protocol (CARP) v1.0 . . . . .\
    \ . . . . 18\n   6.4     Web Proxy Auto-Discovery Protocol (WPAD) . . . . . .\
    \ . . . 18\n   7.      Inter-Proxy Communication  . . . . . . . . . . . . . .\
    \ . . 19\n   7.1     Loosely coupled Inter-Proxy Communication  . . . . . . .\
    \ . 19\n   7.1.1   Internet Cache Protocol (ICP)  . . . . . . . . . . . . . .\
    \ 19\n   7.1.2   Hyper Text Caching Protocol  . . . . . . . . . . . . . . . 20\n\
    \   7.1.3   Cache Digest . . . . . . . . . . . . . . . . . . . . . . . 21\n  \
    \ 7.1.4   Cache Pre-filling  . . . . . . . . . . . . . . . . . . . . 22\n   7.2\
    \     Tightly Coupled Inter-Cache Communication  . . . . . . . . 22\n   7.2.1\
    \   Cache Array Routing Protocol (CARP) v1.0 . . . . . . . . . 22\n   8.     \
    \ Network Element Communication  . . . . . . . . . . . . . . 23\n   8.1     Web\
    \ Cache Control Protocol (WCCP)  . . . . . . . . . . . . 23\n   8.2     Network\
    \ Element Control Protocol (NECP)  . . . . . . . . . 24\n   8.3     SOCKS  . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 25\n   9.      Security Considerations\
    \  . . . . . . . . . . . . . . . . . 25\n   9.1     Authentication . . . . . .\
    \ . . . . . . . . . . . . . . . . 26\n   9.1.1   Man in the middle attacks  .\
    \ . . . . . . . . . . . . . . . 26\n   9.1.2   Trusted third party  . . . . .\
    \ . . . . . . . . . . . . . . 26\n   9.1.3   Authentication based on IP number\
    \  . . . . . . . . . . . . 26\n   9.2     Privacy  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . 26\n   9.2.1   Trusted third party  . . . . . . . . .\
    \ . . . . . . . . . . 26\n   9.2.2   Logs and legal implications  . . . . . .\
    \ . . . . . . . . . 27\n   9.3     Service security . . . . . . . . . . . . .\
    \ . . . . . . . . 27\n   9.3.1   Denial of service  . . . . . . . . . . . . .\
    \ . . . . . . . 27\n   9.3.2   Replay attack  . . . . . . . . . . . . . . . .\
    \ . . . . . . 27\n   9.3.3   Stupid configuration of proxies  . . . . . . . .\
    \ . . . . . 28\n   9.3.4   Copyrighted transient copies . . . . . . . . . . .\
    \ . . . . 28\n   9.3.5   Application level access . . . . . . . . . . . . . .\
    \ . . . 28\n   10.     Acknowledgements . . . . . . . . . . . . . . . . . . .\
    \ . . 28\n           References . . . . . . . . . . . . . . . . . . . . . . .\
    \ . 28\n           Authors' Addresses . . . . . . . . . . . . . . . . . . . .\
    \ 31\n           Full Copyright Statement . . . . . . . . . . . . . . . . . 32\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Since its introduction in 1990, the World-Wide Web has evolved\
    \ from a\n   simple client server model into a complex distributed architecture.\n\
    \   This evolution has been driven largely due to the scaling problems\n   associated\
    \ with exponential growth.  Distinct paradigms and solutions\n   have emerged\
    \ to satisfy specific requirements.  Two core\n   infrastructure components being\
    \ employed to meet the demands of this\n   growth are replication and caching.\
    \  In many cases, there is a need\n   for web caches and replicated services to\
    \ be able to coexist.\n   This memo specifies standard terminology and the taxonomy\
    \ of web\n   replication and caching infrastructure deployed in the Internet\n\
    \   today.  The principal goal of this document is to establish a common\n   understanding\
    \ and reference point of this application domain.\n   It is also expected that\
    \ this document will be used in the creation\n   of a standard architectural framework\
    \ for efficient, reliable, and\n   predictable service in a web which includes\
    \ both replicas and caches.\n   Some of the protocols which this memo examines\
    \ are specified only by\n   company technical white papers or work in progress\
    \ documents.  Such\n   references are included to demonstrate the existence of\
    \ such\n   protocols, their experimental deployment in the Internet today, or\
    \ to\n   aid the reader in their understanding of this technology area.\n   There\
    \ are many protocols, both open and proprietary, employed in web\n   replication\
    \ and caching today.  A majority of the open protocols\n   include DNS [8], Cache\
    \ Digests [21][10], CARP [14], HTTP [1], ICP\n   [2], PAC [12], SOCKS [7], WPAD\
    \ [13], and WCCP [18][19].  These\n   protocols, and their use within the caching\
    \ and replication\n   environments, are discussed below.\n"
- title: 2. Terminology
  contents:
  - "2. Terminology\n   The following terminology provides definitions of common terms\
    \ used\n   within the web replication and caching community.  Base terms are\n\
    \   taken, where possible, from the HTTP/1.1 specification [1] and are\n   included\
    \ here for reference.  First- and second-order derivatives are\n   constructed\
    \ from these base terms to help define the relationships\n   that exist within\
    \ this area.\n   Terms that are in common usage and which are contrary to definitions\n\
    \   in RFC 2616 and this document are highlighted.\n"
- title: 2.1 Base Terms
  contents:
  - "2.1 Base Terms\n   The majority of these terms are taken as-is from RFC 2616\
    \ [1], and\n   are included here for reference.\n   client (taken from [1])\n\
    \      A program that establishes connections for the purpose of sending\n   \
    \   requests.\n   server (taken from [1])\n      An application program that accepts\
    \ connections in order to\n      service requests by sending back responses. \
    \ Any given program may\n      be capable of being both a client and a server;\
    \ our use of these\n      terms refers only to the role being performed by the\
    \ program for a\n      particular connection, rather than to the program's capabilities\n\
    \      in general.  Likewise, any server may act as an origin server,\n      proxy,\
    \ gateway, or tunnel, switching behavior based on the nature\n      of each request.\n\
    \   proxy (taken from [1])\n      An intermediary program which acts as both a\
    \ server and a client\n      for the purpose of making requests on behalf of other\
    \ clients.\n      Requests are serviced internally or by passing them on, with\n\
    \      possible translation, to other servers.  A proxy MUST implement\n     \
    \ both the client and server requirements of this specification.  A\n      \"\
    transparent proxy\" is a proxy that does not modify the request or\n      response\
    \ beyond what is required for proxy authentication and\n      identification.\
    \  A \"non-transparent proxy\" is a proxy that\n      modifies the request or\
    \ response in order to provide some added\n      service to the user agent, such\
    \ as group annotation services,\n      media type transformation, protocol reduction,\
    \ or anonymity\n      filtering.  Except where either transparent or non-transparent\n\
    \      behavior is explicitly stated, the HTTP proxy requirements apply\n    \
    \  to both types of proxies.\n   Note: The term \"transparent proxy\" refers to\
    \ a semantically\n   transparent proxy as described in [1], not what is commonly\n\
    \   understood within the caching community.  We recommend that the term\n   \"\
    transparent proxy\" is always prefixed to avoid confusion (e.g.,\n   \"network\
    \ transparent proxy\").  However, see definition of\n   \"interception proxy\"\
    \ below.\n   The above condition requiring implementation of both the server and\n\
    \   client requirements of HTTP/1.1 is only appropriate for a non-network\n  \
    \ transparent proxy.\n   cache (taken from [1])\n      A program's local store\
    \ of response messages and the subsystem\n      that controls its message storage,\
    \ retrieval, and deletion.  A\n      cache stores cacheable responses in order\
    \ to reduce the response\n      time and network bandwidth consumption on future,\
    \ equivalent\n      requests.  Any client or server may include a cache, though\
    \ a\n      cache cannot be used by a server that is acting as a tunnel.\n   Note:\
    \ The term \"cache\" used alone often is meant as \"caching proxy\".\n   Note:\
    \ There are additional motivations for caching, for example\n   reducing server\
    \ load (as a further means to reduce response time).\n   cacheable (taken from\
    \ [1])\n      A response is cacheable if a cache is allowed to store a copy of\n\
    \      the response message for use in answering subsequent requests.\n      The\
    \ rules for determining the cacheability of HTTP responses are\n      defined\
    \ in section 13.  Even if a resource is cacheable, there may\n      be additional\
    \ constraints on whether a cache can use the cached\n      copy for a particular\
    \ request.\n   gateway (taken from [1])\n      A server which acts as an intermediary\
    \ for some other server.\n      Unlike a proxy, a gateway receives requests as\
    \ if it were the\n      origin server for the requested resource; the requesting\
    \ client\n      may not be aware that it is communicating with a gateway.\n  \
    \ tunnel (taken from [1])\n      An intermediary program which is acting as a\
    \ blind relay between\n      two connections.  Once active, a tunnel is not considered\
    \ a party\n      to the HTTP communication, though the tunnel may have been\n\
    \      initiated by an HTTP request.  The tunnel ceases to exist when\n      both\
    \ ends of the relayed connections are closed.\n   replication\n      \"Creating\
    \ and maintaining a duplicate copy of a database or file\n      system on a different\
    \ computer, typically a server.\"  - Free\n      Online Dictionary of Computing\
    \ (FOLDOC)\n   inbound/outbound (taken from [1])\n      Inbound and outbound refer\
    \ to the request and response paths for\n      messages: \"inbound\" means \"\
    traveling toward the origin server\",\n      and \"outbound\" means \"traveling\
    \ toward the user agent\".\n   network element\n      A network device that introduces\
    \ multiple paths between source and\n      destination, transparent to HTTP.\n"
- title: 2.2 First order derivative terms
  contents:
  - "2.2 First order derivative terms\n   The following terms are constructed taking\
    \ the above base terms as\n   foundation.\n   origin server (taken from [1])\n\
    \      The server on which a given resource resides or is to be created.\n   user\
    \ agent (taken from [1])\n      The client which initiates a request.  These are\
    \ often browsers,\n      editors, spiders (web-traversing robots), or other end\
    \ user tools.\n   caching proxy\n      A proxy with a cache, acting as a server\
    \ to clients, and a client\n      to servers.\n      Caching proxies are often\
    \ referred to as \"proxy caches\" or simply\n      \"caches\".  The term \"proxy\"\
    \ is also frequently misused when\n      referring to caching proxies.\n   surrogate\n\
    \      A gateway co-located with an origin server, or at a different\n      point\
    \ in the network, delegated the authority to operate on behalf\n      of, and\
    \ typically working in close co-operation with, one or more\n      origin servers.\
    \  Responses are typically delivered from an\n      internal cache.\n      Surrogates\
    \ may derive cache entries from the origin server or from\n      another of the\
    \ origin server's delegates.  In some cases a\n      surrogate may tunnel such\
    \ requests.\n      Where close co-operation between origin servers and surrogates\n\
    \      exists, this enables modifications of some protocol requirements,\n   \
    \   including the Cache-Control directives in [1].  Such modifications\n     \
    \ have yet to be fully specified.\n      Devices commonly known as \"reverse proxies\"\
    \ and \"(origin) server\n      accelerators\" are both more properly defined as\
    \ surrogates.\n   reverse proxy\n      See \"surrogate\".\n   server accelerator\n\
    \      See \"surrogate\".\n"
- title: 2.3 Second order derivatives
  contents:
  - "2.3 Second order derivatives\n   The following terms further build on first order\
    \ derivatives:\n   master origin server\n      An origin server on which the definitive\
    \ version of a resource\n      resides.\n   replica origin server\n      An origin\
    \ server holding a replica of a resource, but which may\n      act as an authoritative\
    \ reference for client requests.\n   content consumer\n      The user or system\
    \ that initiates inbound requests, through use of\n      a user agent.\n   browser\n\
    \      A special instance of a user agent that acts as a content\n      presentation\
    \ device for content consumers.\n"
- title: 2.4 Topological terms
  contents:
  - "2.4 Topological terms\n   The following definitions are added to describe caching\
    \ device\n   topology:\n   user agent cache\n      The cache within the user agent\
    \ program.\n   local caching proxy\n      The caching proxy to which a user agent\
    \ connects.\n   intermediate caching proxy\n      Seen from the content consumer's\
    \ view, all caches participating in\n      the caching mesh that are not the user\
    \ agent's local caching\n      proxy.\n   cache server\n      A server to requests\
    \ made by local and intermediate caching\n      proxies, but which does not act\
    \ as a proxy.\n   cache array\n      A cluster of caching proxies, acting logically\
    \ as one service and\n      partitioning the resource name space across the array.\
    \  Also known\n      as \"diffused array\" or \"cache cluster\".\n   caching mesh\n\
    \      a loosely coupled set of co-operating proxy- and (optionally)\n      caching-servers,\
    \ or clusters, acting independently but sharing\n      cacheable content between\
    \ themselves using inter-cache\n      communication protocols.\n"
- title: 2.5 Automatic use of proxies
  contents:
  - "2.5 Automatic use of proxies\n   Network administrators may wish to force or\
    \ facilitate the use of\n   proxies by clients, enabling such configuration within\
    \ the network\n   itself or within automatic systems in user agents, such that\
    \ the\n   content consumer need not be aware of any such configuration issues.\n\
    \   The terms that describe such configurations are given below.\n   automatic\
    \ user-agent proxy configuration\n      The technique of discovering the availability\
    \ of one or more\n      proxies and the automated configuration of the user agent\
    \ to use\n      them.  The use of a proxy is transparent to the content consumer\n\
    \      but not to the user agent.  The term \"automatic proxy\n      configuration\"\
    \ is also used in this sense.\n   traffic interception\n      The process of using\
    \ a network element to examine network traffic\n      to determine whether it\
    \ should be redirected.\n   traffic redirection\n      Redirection of client requests\
    \ from a network element performing\n      traffic interception to a proxy.  Used\
    \ to deploy (caching) proxies\n      without the need to manually reconfigure\
    \ individual user agents,\n      or to force the use of a proxy where such use\
    \ would not otherwise\n      occur.\n   interception proxy (a.k.a. \"transparent\
    \ proxy\", \"transparent cache\")\n      The term \"transparent proxy\" has been\
    \ used within the caching\n      community to describe proxies used with zero\
    \ configuration within\n      the user agent.  Such use is somewhat transparent\
    \ to user agents.\n      Due to discrepancies with [1] (see definition of \"proxy\"\
    \ above),\n      and objections to the use of the word \"transparent\", we introduce\n\
    \      the term \"interception proxy\" to describe proxies that receive\n    \
    \  redirected traffic flows from network elements performing traffic\n      interception.\n\
    \      Interception proxies receive inbound traffic flows through the\n      process\
    \ of traffic redirection.  (Such proxies are deployed by\n      network administrators\
    \ to facilitate or require the use of\n      appropriate services offered by the\
    \ proxy).  Problems associated\n      with the deployment of interception proxies\
    \ are described in the\n      document \"Known HTTP Proxy/Caching Problems\" [23].\
    \  The use of\n      interception proxies requires zero configuration of the user\
    \ agent\n      which act as though communicating directly with an origin server.\n"
- title: 3. Distributed System Relationships
  contents:
  - "3. Distributed System Relationships\n   This section identifies the relationships\
    \ that exist in a distributed\n   replication and caching environment.  Having\
    \ defined these\n   relationships, later sections describe the communication protocols\n\
    \   used in each relationship.\n"
- title: 3.1 Replication Relationships
  contents:
  - "3.1 Replication Relationships\n   The following sections describe relationships\
    \ between clients and\n   replicas and between replicas themselves.\n"
- title: 3.1.1 Client to Replica
  contents:
  - "3.1.1 Client to Replica\n   A client may communicate with one or more replica\
    \ origin servers, as\n   well as with master origin servers.  (In the absence\
    \ of replica\n   servers the client interacts directly with the origin server\
    \ as is\n   the normal case.)\n      ------------------     -----------------\
    \     ------------------\n      | Replica Origin |     | Master Origin |     |\
    \ Replica Origin |\n      |     Server     |     |    Server     |     |     Server\
    \     |\n      ------------------     -----------------     ------------------\n\
    \               \\                    |                      /\n             \
    \   \\                   |                     /\n                 -----------------------------------------\n\
    \                                    |                 Client to\n           \
    \                  -----------------        Replica Server\n                 \
    \            |     Client    |\n                             -----------------\n\
    \   Protocols used to enable the client to use one of the replicas can be\n  \
    \ found in Section 4.\n"
- title: 3.1.2 Inter-Replica
  contents:
  - "3.1.2 Inter-Replica\n   This is the relationship between master origin server(s)\
    \ and replica\n   origin servers, to replicate data sets that are accessed by\
    \ clients\n   in the relationship shown in Section 3.1.1.\n      ------------------\
    \     -----------------     ------------------\n      | Replica Origin |-----|\
    \ Master Origin |-----| Replica Origin |\n      |     Server     |     |    Server\
    \     |     |     Server     |\n      ------------------     -----------------\
    \     ------------------\n   Protocols used in this relationship can be found\
    \ in Section 5.\n"
- title: 3.2 Proxy Relationships
  contents:
  - "3.2 Proxy Relationships\n   There are a variety of ways in which (caching) proxies\
    \ and cache\n   servers communicate with each other, and with user agents.\n"
- title: 3.2.1 Client to Non-Interception Proxy
  contents:
  - "3.2.1 Client to Non-Interception Proxy\n   A client may communicate with zero\
    \ or more proxies for some or all\n   requests.  Where the result of communication\
    \ results in no proxy\n   being used, the relationship is between client and (replica)\
    \ origin\n   server (see Section 3.1.1).\n      -----------------     -----------------\
    \     -----------------\n      |     Local     |     |     Local     |     | \
    \    Local     |\n      |     Proxy     |     |     Proxy     |     |     Proxy\
    \     |\n      -----------------     -----------------     -----------------\n\
    \               \\                    |                      /\n             \
    \   \\                   |                     /\n                 -----------------------------------------\n\
    \                                    |\n                             -----------------\n\
    \                             |     Client    |\n                            \
    \ -----------------\n   In addition, a user agent may interact with an additional\
    \ server -\n   operated on behalf of a proxy for the purpose of automatic user\
    \ agent\n   proxy configuration.\n   Schemes and protocols used in these relationships\
    \ can be found in\n   Section 6.\n"
- title: 3.2.2 Client to Surrogate to Origin Server
  contents:
  - "3.2.2 Client to Surrogate to Origin Server\n   A client may communicate with\
    \ zero or more surrogates for requests\n   intended for one or more origin servers.\
    \  Where a surrogate is not\n   used, the client communicates directly with an\
    \ origin server.  Where\n   a surrogate is used the client communicates as if\
    \ with an origin\n   server.  The surrogate fulfills the request from its internal\
    \ cache,\n   or acts as a gateway or tunnel to the origin server.\n          \
    \  --------------  --------------   --------------\n            |   Origin   |\
    \  |   Origin   |   |   Origin   |\n            |   Server   |  |   Server   |\
    \   |   Server   |\n            --------------  --------------   --------------\n\
    \                          \\        |        /\n                           \\\
    \       |       /\n                           -----------------\n            \
    \               |   Surrogate   |\n                           |              \
    \ |\n                           -----------------\n                          \
    \         |\n                                   |\n                          \
    \   ------------\n                             |  Client  |\n                \
    \             ------------\n"
- title: 3.2.3 Inter-Proxy
  contents:
  - "3.2.3 Inter-Proxy\n   Inter-Proxy relationships exist as meshes (loosely coupled)\
    \ and\n   clusters (tightly coupled).\n"
- title: 3.2.3.1 (Caching) Proxy Meshes
  contents:
  - "3.2.3.1 (Caching) Proxy Meshes\n   Within a loosely coupled mesh of (caching)\
    \ proxies, communication can\n   happen at the same level between peers, and with\
    \ one or more parents.\n                        ---------------------  ---------------------\n\
    \             -----------|    Intermediate   |  |    Intermediate   |\n      \
    \       |          | Caching Proxy (D) |  | Caching Proxy (E) |\n            \
    \ |(peer)    ---------------------  ---------------------\n       --------------\
    \             | (parent)       / (parent)\n       |   Cache    |             |\
    \         ------/\n       | Server (C) |             |        /\n       --------------\
    \             |       /\n      (peer) |            -----------------       ---------------------\n\
    \             -------------| Local Caching |-------|    Intermediate   |\n   \
    \                       |   Proxy (A)   | (peer)| Caching Proxy (B) |\n      \
    \                    -----------------       ---------------------\n         \
    \                         |\n                                  |\n           \
    \                   ----------\n                              | Client |\n   \
    \                           ----------\n   Client included for illustration purposes\
    \ only\n   An inbound request may be routed to one of a number of intermediate\n\
    \   (caching) proxies based on a determination of whether that parent is\n   better\
    \ suited to resolving the request.\n   For example, in the above figure, Cache\
    \ Server C and Intermediate\n   Caching Proxy B are peers of the Local Caching\
    \ Proxy A, and may only\n   be used when the resource requested by A already exists\
    \ on either B\n   or C.  Intermediate Caching Proxies D & E are parents of A,\
    \ and it is\n   A's choice of which to use to resolve a particular request.\n\
    \   The relationship between A & B only makes sense in a caching\n   environment,\
    \ while the relationships between A & D and A & E are also\n   appropriate where\
    \ D or E are non-caching proxies.\n   Protocols used in these relationships can\
    \ be found in Section 7.1.\n"
- title: 3.2.3.2 (Caching) Proxy Arrays
  contents:
  - "3.2.3.2 (Caching) Proxy Arrays\n   Where a user agent may have a relationship\
    \ with a proxy, it is\n   possible that it may instead have a relationship with\
    \ an array of\n   proxies arranged in a tightly coupled mesh.\n              \
    \                ----------------------\n                         ----------------------\
    \    |\n                     ---------------------    |    |\n               \
    \      |  (Caching) Proxy  |    |-----\n                     |      Array    \
    \    |----- ^ ^\n                     --------------------- ^ ^  | |\n       \
    \                  ^            ^    | |--- |\n                         |    \
    \        |-----      |\n                         --------------------------\n\
    \   Protocols used in this relationship can be found in Section 7.2.\n"
- title: 3.2.4 Network Element to Caching Proxy
  contents:
  - "3.2.4 Network Element to Caching Proxy\n   A network element performing traffic\
    \ interception may choose to\n   redirect requests from a client to a specific\
    \ proxy within an array.\n   (It may also choose not to redirect the traffic,\
    \ in which case the\n   relationship is between client and (replica) origin server,\
    \ see\n   Section 3.1.1.)\n      -----------------     -----------------     -----------------\n\
    \      | Caching Proxy |     | Caching Proxy |     | Caching Proxy |\n      |\
    \     Array     |     |     Array     |     |     Array     |\n      -----------------\
    \     -----------------     -----------------\n                \\            \
    \       |                     /\n                 -----------------------------------------\n\
    \                                    |\n                              --------------\n\
    \                              |  Network   |\n                              |\
    \  Element   |\n                              --------------\n               \
    \                     |\n                                   ///\n            \
    \                        |\n                               ------------\n    \
    \                           |  Client  |\n                               ------------\n\
    \   The interception proxy may be directly in-line of the flow of traffic\n  \
    \ - in which case the intercepting network element and interception\n   proxy\
    \ form parts of the same hardware system - or may be out-of-path,\n   requiring\
    \ the intercepting network element to redirect traffic to\n   another network\
    \ segment.  In this latter case, communication\n   protocols enable the intercepting\
    \ network element to stop and start\n   redirecting traffic when the interception\
    \ proxy becomes\n   (un)available.  Details of these protocols can be found in\
    \ Section 8.\n"
- title: 4. Replica Selection
  contents:
  - "4. Replica Selection\n   This section describes the schemes and protocols used\
    \ in the\n   cooperation and communication between client and replica origin web\n\
    \   servers.  The ideal situation is to discover an optimal replica\n   origin\
    \ server for clients to communicate with.  Optimality is a\n   policy based decision,\
    \ often based upon proximity, but may be based\n   on other criteria such as load.\n"
- title: 4.1 Navigation Hyperlinks
  contents:
  - "4.1 Navigation Hyperlinks\n   Best known reference:\n      This memo.\n   Description:\n\
    \      The simplest of client to replica communication mechanisms.  This\n   \
    \   utilizes hyperlink URIs embedded in web pages that point to the\n      individual\
    \ replica origin servers.  The content consumer manually\n      selects the link\
    \ of the replica origin server they wish to use.\n   Security:\n      Relies on\
    \ the protocol security associated with the appropriate\n      URI scheme.\n \
    \  Deployment:\n      Probably the most commonly deployed client to replica\n\
    \      communication mechanism.  Ubiquitous interoperability with humans.\n  \
    \ Submitter:\n      Document editors.\n"
- title: 4.2 Replica HTTP Redirection
  contents:
  - "4.2 Replica HTTP Redirection\n   Best known reference:\n      This memo.\n  \
    \ Description:\n      A simple and commonly used mechanism to connect clients\
    \ with\n      replica origin servers is to use HTTP redirection.  Clients are\n\
    \      redirected to an optimal replica origin server via the use of the\n   \
    \   HTTP [1] protocol response codes, e.g., 302 \"Found\", or 307\n      \"Temporary\
    \ Redirect\".  A client establishes HTTP communication\n      with one of the\
    \ replica origin servers.  The initially contacted\n      replica origin server\
    \ can then either choose to accept the service\n      or redirect the client again.\
    \  Refer to section 10.3 in HTTP/1.1\n      [1] for information on HTTP response\
    \ codes.\n   Security:\n      Relies entirely upon HTTP security.\n   Deployment:\n\
    \      Observed at a number of large web sites.  Extent of usage in the\n    \
    \  Internet is unknown.\n   Submitter:\n      Document editors.\n"
- title: 4.3 DNS Redirection
  contents:
  - "4.3 DNS Redirection\n   Best known references:\n      *  RFC 1794 DNS Support\
    \ for Load Balancing Proximity [8]\n      *  This memo\n   Description:\n    \
    \  The Domain Name Service (DNS) provides a more sophisticated client\n      to\
    \ replica communication mechanism.  This is accomplished by DNS\n      servers\
    \ that sort resolved IP addresses based upon quality of\n      service policies.\
    \  When a client resolves the name of an origin\n      server, the enhanced DNS\
    \ server sorts the available IP addresses\n      of the replica origin servers\
    \ starting with the most optimal\n      replica and ending with the least optimal\
    \ replica.\n   Security:\n      Relies entirely upon DNS security, and other protocols\
    \ that may be\n      used in determining the sort order.\n   Deployment:\n   \
    \   Observed at a number of large web sites and large ISP web hosted\n      services.\
    \  Extent of usage in the Internet is unknown, but is\n      believed to be increasing.\n\
    \   Submitter:\n      Document editors.\n"
- title: 5. Inter-Replica Communication
  contents:
  - "5. Inter-Replica Communication\n   This section describes the cooperation and\
    \ communication between\n   master- and replica- origin servers.  Used in replicating\
    \ data sets\n   between origin servers.\n"
- title: 5.1 Batch Driven Replication
  contents:
  - "5.1 Batch Driven Replication\n   Best known reference:\n      This memo.\n  \
    \ Description:\n      The replica origin server to be updated initiates communication\n\
    \      with a master origin server.  The communication is established at\n   \
    \   intervals based upon queued transactions which are scheduled for\n      deferred\
    \ processing.  The scheduling mechanism policies vary, but\n      generally are\
    \ re-occurring at a specified time.  Once\n      communication is established,\
    \ data sets are copied to the\n      initiating replica origin server.\n   Security:\n\
    \      Relies upon the protocol being used to transfer the data set.  FTP\n  \
    \    [4] and RDIST are the most common protocols observed.\n   Deployment:\n \
    \     Very common for synchronization of mirror sites in the Internet.\n   Submitter:\n\
    \      Document editors.\n"
- title: 5.2 Demand Driven Replication
  contents:
  - "5.2 Demand Driven Replication\n   Best known reference:\n      This memo.\n \
    \  Description:\n      Replica origin servers acquire content as needed due to\
    \ client\n      demand.  When a client requests a resource that is not in the\
    \ data\n      set of the replica origin server/surrogate, an attempt is made to\n\
    \      resolve the request by acquiring the resource from the master\n      origin\
    \ server, returning it to the requesting client.\n   Security:\n      Relies upon\
    \ the protocol being used to transfer the resources. FTP\n      [4], Gopher [5],\
    \ HTTP [1] and ICP [2] are the most common\n      protocols observed.\n   Deployment:\n\
    \      Observed at several large web sites.  Extent of usage in the\n      Internet\
    \ is unknown.\n   Submitter:\n      Document editors.\n"
- title: 5.3 Synchronized Replication
  contents:
  - "5.3 Synchronized Replication\n   Best known reference:\n      This memo.\n  \
    \ Description:\n      Replicated origin servers cooperate using synchronized strategies\n\
    \      and specialized replica protocols to keep the replica data sets\n     \
    \ coherent.  Synchronization strategies range from tightly coherent\n      (a\
    \ few minutes) to loosely coherent (a few or more hours). Updates\n      occur\
    \ between replicas based upon the synchronization time\n      constraints of the\
    \ coherency model employed and are generally in\n      the form of deltas only.\n\
    \   Security:\n      All of the known protocols utilize strong cryptographic key\n\
    \      exchange methods, which are either based upon the Kerberos shared\n   \
    \   secret model or the public/private key RSA model.\n   Deployment:\n      Observed\
    \ at a few sites, primarily at university campuses.\n   Submitter:\n      Document\
    \ editors.\n   Note:\n      The editors are aware of at least two open source\
    \ protocols - AFS\n      and CODA - as well as the proprietary NRS protocol from\
    \ Novell.\n"
- title: 6. User Agent to Proxy Configuration
  contents:
  - "6. User Agent to Proxy Configuration\n   This section describes the configuration,\
    \ cooperation and\n   communication between user agents and proxies.\n"
- title: 6.1 Manual Proxy Configuration
  contents:
  - "6.1 Manual Proxy Configuration\n   Best known reference:\n      This memo.\n\
    \   Description:\n      Each user must configure her user agent by supplying information\n\
    \      pertaining to proxied protocols and local policies.\n   Security:\n   \
    \   The potential for doing wrong is high; each user individually sets\n     \
    \ preferences.\n   Deployment:\n      Widely deployed, used in all current browsers.\
    \  Most browsers also\n      support additional options.\n   Submitter:\n    \
    \  Document editors.\n"
- title: 6.2 Proxy Auto Configuration (PAC)
  contents:
  - "6.2 Proxy Auto Configuration (PAC)\n   Best known reference:\n      \"Navigator\
    \ Proxy Auto-Config File Format\" [12]\n   Description:\n      A JavaScript script\
    \ retrieved from a web server is executed for\n      each URL accessed to determine\
    \ the appropriate proxy (if any) to\n      be used to access the resource.  User\
    \ agents must be configured to\n      request this script upon startup.  There\
    \ is no bootstrap\n      mechanism, manual configuration is necessary.\n     \
    \ Despite manual configuration, the process of proxy configuration\n      is simplified\
    \ by centralizing it within a script at a single\n      location.\n   Security:\n\
    \      Common policy per organization possible but still requires initial\n  \
    \    manual configuration.  PAC is better than \"manual proxy\n      configuration\"\
    \ since PAC administrators may update the proxy\n      configuration without further\
    \ user intervention.\n      Interoperability of PAC files is not high, since different\n\
    \      browsers have slightly different interpretations of the same\n      script,\
    \ possibly leading to undesired effects.\n   Deployment:\n      Implemented in\
    \ Netscape Navigator and Microsoft Internet Explorer.\n   Submitter:\n      Document\
    \ editors.\n"
- title: 6.3 Cache Array Routing Protocol (CARP) v1.0
  contents:
  - "6.3 Cache Array Routing Protocol (CARP) v1.0\n   Best known references:\n   \
    \   *  \"Cache Array Routing Protocol\" [14] (work in progress)\n      *  \"Cache\
    \ Array Routing Protocol (CARP) v1.0 Specifications\" [15]\n      *  \"Cache Array\
    \ Routing Protocol and Microsoft Proxy Server 2.0\"\n         [16]\n   Description:\n\
    \      User agents may use CARP directly as a hash function based proxy\n    \
    \  selection mechanism.  They need to be configured with the location\n      of\
    \ the cluster information.\n   Security:\n      Security considerations are not\
    \ covered in the specification works\n      in progress.\n   Deployment:\n   \
    \   Implemented in Microsoft Proxy Server, Squid.  Implemented in user\n     \
    \ agents via PAC scripts.\n   Submitter:\n      Document editors.\n"
- title: 6.4 Web Proxy Auto-Discovery Protocol (WPAD)
  contents:
  - "6.4 Web Proxy Auto-Discovery Protocol (WPAD)\n   Best known reference:\n    \
    \  \"The Web Proxy Auto-Discovery Protocol\" [13] (work in progress)\n   Description:\n\
    \      WPAD uses a collection of pre-existing Internet resource discovery\n  \
    \    mechanisms to perform web proxy auto-discovery.\n      The only goal of WPAD\
    \ is to locate the PAC URL [12].  WPAD does\n      not specify which proxies will\
    \ be used.  WPAD supplies the PAC\n      URL, and the PAC script then operates\
    \ as defined above to choose\n      proxies per resource request.\n      The WPAD\
    \ protocol specifies the following:\n      *  how to use each mechanism for the\
    \ specific purpose of web proxy\n         auto-discovery\n      *  the order in\
    \ which the mechanisms should be performed\n      *  the minimal set of mechanisms\
    \ which must be attempted by a WPAD\n         compliant user agent\n      The\
    \ resource discovery mechanisms utilized by WPAD are as follows:\n      *  Dynamic\
    \ Host Configuration Protocol DHCP\n      *  Service Location Protocol SLP\n \
    \     *  \"Well Known Aliases\" using DNS A records\n      *  DNS SRV records\n\
    \      *  \"service: URLs\" in DNS TXT records\n   Security:\n      Relies upon\
    \ DNS and HTTP security.\n   Deployment:\n      Implemented in some user agents\
    \ and caching proxy servers.  More\n      than two independent implementations.\n\
    \   Submitter:\n      Josh Cohen\n"
- title: 7. Inter-Proxy Communication
  contents:
  - '7. Inter-Proxy Communication

    '
- title: 7.1 Loosely coupled Inter-Proxy Communication
  contents:
  - "7.1 Loosely coupled Inter-Proxy Communication\n   This section describes the\
    \ cooperation and communication between\n   caching proxies.\n"
- title: 7.1.1 Internet Cache Protocol (ICP)
  contents:
  - "7.1.1 Internet Cache Protocol (ICP)\n   Best known reference:\n      RFC 2186\
    \  Internet Cache Protocol (ICP), version 2 [2]\n   Description:\n      ICP is\
    \ used by proxies to query other (caching) proxies about web\n      resources,\
    \ to see if the requested resource is present on the\n      other system.\n  \
    \    ICP uses UDP.  Since UDP is an uncorrected network transport\n      protocol,\
    \ an estimate of network congestion and availability may\n      be calculated\
    \ by ICP loss.  This rudimentary loss measurement\n      provides, together with\
    \ round trip times, a load balancing method\n      for caches.\n   Security:\n\
    \      See RFC 2187 [3]\n      ICP does not convey information about HTTP headers\
    \ associated with\n      resources.  HTTP headers may include access control and\
    \ cache\n      directives.  Since proxies ask for the availability of resources,\n\
    \      and subsequently retrieve them using HTTP, false cache hits may\n     \
    \ occur (object present in cache, but not accessible to a sibling is\n      one\
    \ example).\n      ICP suffers from all the security problems of UDP.\n   Deployment:\n\
    \      Widely deployed.  Most current caching proxy implementations\n      support\
    \ ICP in some form.\n   Submitter:\n      Document editors.\n   See also:\n  \
    \    \"Internet Cache Protocol Extension\" [17] (work in progress)\n"
- title: 7.1.2 Hyper Text Caching Protocol
  contents:
  - "7.1.2 Hyper Text Caching Protocol\n   Best known reference:\n      RFC 2756 Hyper\
    \ Text  Caching Protocol (HTCP/0.0) [9]\n   Description:\n      HTCP is a protocol\
    \ for discovering HTTP caching proxies and cached\n      data, managing sets of\
    \ HTTP caching proxies, and monitoring cache\n      activity.\n      HTCP requests\
    \ include HTTP header material, while ICPv2 does not,\n      enabling HTCP replies\
    \ to more accurately describe the behaviour\n      that would occur as a result\
    \ of a subsequent HTTP request for the\n      same resource.\n   Security:\n \
    \     Optionally uses HMAC-MD5 [11] shared secret authentication.\n      Protocol\
    \ is subject to attack if authentication is not used.\n   Deployment:\n      HTCP\
    \ is implemented in Squid and the \"Web Gateway Interceptor\".\n   Submitter:\n\
    \      Document editors.\n"
- title: 7.1.3 Cache Digest
  contents:
  - "7.1.3 Cache Digest\n      Best known references:\n      *  \"Cache Digest Specification\
    \ - version 5\" [21]\n      *  \"Summary Cache: A Scalable Wide-Area Web Cache\
    \ Sharing\n         Protocol\" [10] (see note)\n   Description:\n      Cache Digests\
    \ are a response to the problems of latency and\n      congestion associated with\
    \ previous inter-cache communication\n      mechanisms such as the Internet Cache\
    \ Protocol (ICP) [2] and the\n      Hyper Text Cache Protocol [9].  Unlike these\
    \ protocols, Cache\n      Digests support peering between caching proxies and\
    \ cache servers\n      without a request-response exchange taking place for each\
    \ inbound\n      request.  Instead, a summary of the contents in cache (the Digest)\n\
    \      is fetched by other systems that peer with it.  Using Cache\n      Digests\
    \ it is possible to determine with a relatively high degree\n      of accuracy\
    \ whether a given resource is cached by a particular\n      system.\n      Cache\
    \ Digests are both an exchange protocol and a data format.\n      Security:\n\
    \      If the contents of a Digest are sensitive, they should be\n      protected.\
    \  Any methods which would normally be applied to secure\n      an HTTP connection\
    \ can be applied to Cache Digests.\n      A 'Trojan horse' attack is currently\
    \ possible in a mesh: System A\n      A can build a fake peer Digest for system\
    \ B and serve it to B's\n      peers if requested.  This way A can direct traffic\
    \ toward/from B.\n      The impact of this problem is minimized by the 'pull'\
    \ model of\n      transferring Cache Digests from one system to another.\n   \
    \   Cache Digests provide knowledge about peer cache content on a URL\n      level.\
    \  Hence, they do not dictate a particular level of policy\n      management and\
    \ can be used to implement various policies on any\n      level (user, organization,\
    \ etc.).\n   Deployment:\n      Cache Digests are supported in Squid.\n      Cache\
    \ Meshes: NLANR Mesh; TF-CACHE Mesh (European Academic\n      networks\n   Submitter:\n\
    \      Alex Rousskov for [21], Pei Cao for [10].\n   Note: The technology of Summary\
    \ Cache [10] is patent pending by the\n   University of Wisconsin-Madison.\n"
- title: 7.1.4 Cache Pre-filling
  contents:
  - "7.1.4 Cache Pre-filling\n   Best known reference:\n      \"Pre-filling a cache\
    \ - A satellite overview\" [20] (work in\n      progress)\n   Description:\n \
    \     Cache pre-filling is a push-caching implementation.  It is\n      particularly\
    \ well adapted to IP-multicast networks because it\n      allows preselected resources\
    \ to be simultaneously inserted into\n      caches within the targeted multicast\
    \ group.  Different\n      implementations of cache pre-filling already exist,\
    \ especially in\n      satellite contexts.  However, there is still no standard\
    \ for this\n      kind of push-caching and vendors propose solutions either based\
    \ on\n      dedicated equipment or public domain caches extended with a pre-\n\
    \      filling module.\n   Security:\n      Relies on the inter-cache protocols\
    \ being employed.\n   Deployment:\n      Observed in two commercial content distribution\
    \ service providers.\n   Submitter:\n      Ivan Lovric\n"
- title: 7.2 Tightly Coupled Inter-Cache Communication
  contents:
  - '7.2 Tightly Coupled Inter-Cache Communication

    '
- title: 7.2.1 Cache Array Routing Protocol (CARP) v1.0
  contents:
  - "7.2.1 Cache Array Routing Protocol (CARP) v1.0\n   Also see Section 6.3\n   Best\
    \ known references:\n      *  \"Cache Array Routing Protocol\" [14] (work in progress)\n\
    \      *  \"Cache Array Routing Protocol (CARP) v1.0 Specifications\" [15]\n \
    \     *  \"Cache Array Routing Protocol and Microsoft Proxy Server 2.0\"\n   \
    \      [16]\n   Description:\n      CARP is a hashing function for dividing URL-space\
    \ among a cluster\n      of proxies.  Included in CARP is the definition of a\
    \ Proxy Array\n      Membership Table, and ways to download this information.\n\
    \      A user agent which implements CARP v1.0 can allocate and\n      intelligently\
    \ route requests for the URLs to any member of the\n      Proxy Array.  Due to\
    \ the resulting sorting of requests through\n      these proxies, duplication\
    \ of cache contents is eliminated and\n      global cache hit rates may be improved.\n\
    \   Security:\n      Security considerations are not covered in the specification\
    \ works\n      in progress.\n   Deployment:\n      Implemented in caching proxy\
    \ servers.  More than two independent\n      implementations.\n   Submitter:\n\
    \      Document editors.\n"
- title: 8. Network Element Communication
  contents:
  - "8. Network Element Communication\n   This section describes the cooperation and\
    \ communication between\n   proxies and network elements.  Examples of such network\
    \ elements\n   include routers and switches.  Generally used for deploying\n \
    \  interception proxies and/or diffused arrays.\n"
- title: 8.1 Web Cache Control Protocol (WCCP)
  contents:
  - "8.1 Web Cache Control Protocol (WCCP)\n   Best known references:\n      \"Web\
    \ Cache Control Protocol\" [18][19] (work in progress)\n      Note: The name used\
    \ for this protocol varies, sometimes referred\n      to as the \"Web Cache Coordination\
    \ Protocol\", but frequently just\n      \"WCCP\" to avoid confusion\n   Description:\n\
    \      WCCP V1 runs between a router functioning as a redirecting network\n  \
    \    element and out-of-path interception proxies.  The protocol allows\n    \
    \  one or more proxies to register with a single router to receive\n      redirected\
    \ traffic.  It also allows one of the proxies, the\n      designated proxy, to\
    \ dictate to the router how redirected traffic\n      is distributed across the\
    \ array.\n      WCCP V2 additionally runs between multiple routers and the\n \
    \     proxies.\n   Security:\n      WCCP V1 has no security features.\n      WCCP\
    \ V2 provides optional authentication of protocol packets.\n   Deployment:\n \
    \     Network elements: WCCP is deployed on a wide range of Cisco\n      routers.\n\
    \      Caching proxies: WCCP is deployed on a number of vendors' caching\n   \
    \   proxies.\n   Submitter:\n      David Forster\n      Document editors.\n"
- title: 8.2 Network Element Control Protocol (NECP)
  contents:
  - "8.2 Network Element Control Protocol (NECP)\n   Best known reference:\n     \
    \ \"NECP: The Network Element Control Protocol\" [22] (work in\n      progress)\n\
    \   Description:\n      NECP provides methods for network elements to learn about\
    \ server\n      capabilities, availability, and hints as to which flows can and\n\
    \      cannot be serviced.  This allows network elements to perform load\n   \
    \   balancing across a farm of servers, redirection to interception\n      proxies,\
    \ and cut-through of flows that cannot be served by the\n      farm.\n   Security:\n\
    \      Optionally uses HMAC-SHA-1 [11] shared secret authentication along\n  \
    \    with complex sequence numbers to provide moderately strong\n      security.\
    \  Protocol is subject to attack if authentication is not\n      used.\n   Deployment:\n\
    \      Unknown at present; several network element and caching proxy\n      vendors\
    \ have expressed intent to implement the protocol.\n   Submitter:\n      Gary\
    \ Tomlinson\n"
- title: 8.3 SOCKS
  contents:
  - "8.3 SOCKS\n   Best known reference:\n      RFC 1928 SOCKS Protocol Version 5\
    \ [7]\n   Description:\n      SOCKS is primarily used as a caching proxy to firewall\
    \ protocol.\n      Although firewalls don't conform to the narrowly defined network\n\
    \      element definition above, they are a integral part of the network\n   \
    \   infrastructure.  When used in conjunction with a firewall, SOCKS\n      provides\
    \ a authenticated tunnel between the caching proxy and the\n      firewall.\n\
    \   Security:\n      An extensive framework provides for multiple authentication\n\
    \      methods.  Currently, SSL, CHAP, DES, 3DES are known to be\n      available.\n\
    \   Deployment:\n      SOCKS is widely deployed in the Internet.\n   Submitter:\n\
    \      Document editors.\n"
- title: 9. Security Considerations
  contents:
  - "9. Security Considerations\n   This document provides a taxonomy for web caching\
    \ and replication.\n   Recommended practice, architecture and protocols are not\
    \ described in\n   detail.\n   By definition, replication and caching involve\
    \ the copying of\n   resources.  There are legal implications of making and keeping\n\
    \   transient or permanent copies; these are not covered here.\n   Information\
    \ on security of each protocol referred to by this memo is\n   provided in the\
    \ preceding sections, and in their accompanying\n   documentation.  HTTP security\
    \ is discussed in section 15 of RFC 2616\n   [1], the HTTP/1.1 specification,\
    \ and to a lesser extent in RFC 1945\n   [6], the HTTP/1.0 specification.  RFC\
    \ 2616 contains security\n   considerations for HTTP proxies.\n   Caching proxies\
    \ have the same security issues as other application\n   level proxies.  Application\
    \ level proxies are not covered in these\n   security considerations.  IP number\
    \ based authentication is\n   problematic when a proxy is involved in the communications.\
    \  Details\n   are not discussed here.\n"
- title: 9.1 Authentication
  contents:
  - "9.1 Authentication\n   Requests for web resources, and responses to such requests,\
    \ may be\n   directed to replicas and/or may flow through intermediate proxies.\n\
    \   The integrity of communication needs to be preserved to ensure\n   protection\
    \ from both loss of access and from unintended change.\n"
- title: 9.1.1 Man in the middle attacks
  contents:
  - "9.1.1 Man in the middle attacks\n   HTTP proxies are men-in-the-middle, the perfect\
    \ place for a man-in-\n   the-middle-attack.  A discussion of this is found in\
    \ section 15 of\n   RFC 2616 [1].\n"
- title: 9.1.2 Trusted third party
  contents:
  - "9.1.2 Trusted third party\n   A proxy must either be trusted to act on behalf\
    \ of the origin server\n   and/or client, or it must act as a tunnel.  When presenting\
    \ cached\n   objects to clients, the clients need to trust the caching proxy to\n\
    \   act on behalf on the origin server.\n   A replica may get accreditation from\
    \ the origin server.\n"
- title: 9.1.3 Authentication based on IP number
  contents:
  - "9.1.3 Authentication based on IP number\n   Authentication based on the client's\
    \ IP number is problematic when\n   connecting through a proxy, since the authenticating\
    \ device only has\n   access to the proxy's IP number.  One (problematic) solution\
    \ to this\n   is for the proxy to spoof the client's IP number for inbound\n \
    \  requests.\n   Authentication based on IP number assumes that the end-to-end\n\
    \   properties of the Internet are preserved.  This is typically not the\n   case\
    \ for environments containing interception proxies.\n"
- title: 9.2 Privacy
  contents:
  - '9.2 Privacy

    '
- title: 9.2.1 Trusted third party
  contents:
  - "9.2.1 Trusted third party\n   When using a replication service, one must trust\
    \ both the replica\n   origin server and the replica selection system.\n   Redirection\
    \ of traffic - either by automated replica selection\n   methods, or within proxies\
    \ - may introduce third parties the end user\n   and/or origin server must to\
    \ trust.  In the case of interception\n   proxies, such third parties are often\
    \ unknown to both end points of\n   the communication.  Unknown third parties\
    \ may have security\n   implications.\n   Both proxies and replica selection services\
    \ may have access to\n   aggregated access information.  A proxy typically knows\
    \ about\n   accesses by each client using it, information that is more sensitive\n\
    \   than the information held by a single origin server.\n"
- title: 9.2.2 Logs and legal implications
  contents:
  - "9.2.2 Logs and legal implications\n   Logs from proxies should be kept secure,\
    \ since they provide\n   information about users and their patterns of behaviour.\
    \  A proxy's\n   log is even more sensitive than a web server log, as every request\n\
    \   from the user population goes through the proxy.  Logs from replica\n   origin\
    \ servers may need to be amalgamated to get aggregated\n   statistics from a service,\
    \ and transporting logs across borders may\n   have legal implications.  Log handling\
    \ is restricted by law in some\n   countries.\n   Requirements for object security\
    \ and privacy are the same in a web\n   replication and caching system as it is\
    \ in the Internet at large. The\n   only reliable solution is strong cryptography.\
    \  End-to-end encryption\n   frequently makes resources uncacheable, as in the\
    \ case of SSL\n   encrypted web sessions.\n"
- title: 9.3 Service security
  contents:
  - '9.3 Service security

    '
- title: 9.3.1 Denial of service
  contents:
  - "9.3.1 Denial of service\n   Any redirection of traffic is susceptible to denial\
    \ of service\n   attacks at the redirect point, and both proxies and replica selection\n\
    \   services may redirect traffic.\n   By attacking a proxy, access to all servers\
    \ may be denied for a large\n   set of clients.\n   It has been argued that introduction\
    \ of an interception proxy is a\n   denial of service attack, since the end-to-end\
    \ nature of the Internet\n   is destroyed without the content consumer's knowledge.\n"
- title: 9.3.2 Replay attack
  contents:
  - "9.3.2 Replay attack\n   A caching proxy is by definition a replay attack.\n"
- title: 9.3.3 Stupid configuration of proxies
  contents:
  - "9.3.3 Stupid configuration of proxies\n   It is quite easy to have a stupid configuration\
    \ which will harm\n   service for content consumers.  This is the most common\
    \ security\n   problem with proxies.\n"
- title: 9.3.4 Copyrighted transient copies
  contents:
  - "9.3.4 Copyrighted transient copies\n   The legislative forces of the world are\
    \ considering the question of\n   transient copies, like those kept in replication\
    \ and caching system,\n   being legal.  The legal implications of replication\
    \ and caching are\n   subject to local law.\n   Caching proxies need to preserve\
    \ the protocol output, including\n   headers.  Replication services need to preserve\
    \ the source of the\n   objects.\n"
- title: 9.3.5 Application level access
  contents:
  - "9.3.5 Application level access\n   Caching proxies are application level components\
    \ in the traffic flow\n   path, and may give intruders access to information that\
    \ was\n   previously only available at the network level in a proxy-free world.\n\
    \   Some network level equipment may have required physical access to get\n  \
    \ sensitive information.  Introduction of application level components\n   may\
    \ require additional system security.\n"
- title: 10. Acknowledgements
  contents:
  - "10. Acknowledgements\n   The editors would like to thank the following for their\
    \ assistance:\n   David Forster, Alex Rousskov, Josh Cohen, John Martin, John\
    \ Dilley,\n   Ivan Lovric, Joe Touch, Henrik Nordstrom, Patrick McManus, Duane\n\
    \   Wessels, Wojtek Sylwestrzak, Ted Hardie, Misha Rabinovich, Larry\n   Masinter,\
    \ Keith Moore, Roy Fielding, Patrik Faltstrom, Hilarie Orman,\n   Mark Nottingham\
    \ and Oskar Batuner.\n"
- title: References
  contents:
  - "References\n   [1]   Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter,\
    \ L.,\n         Leach, P. and T. Berners-Lee, \"Hypertext Transfer Protocol --\n\
    \         HTTP/1.1\", RFC 2616, June 1999.\n   [2]   Wessels, D. and K. Claffy,\
    \ \"Internet Cache Protocol (ICP),\n         Version 2\", RFC 2186, September\
    \ 1997.\n   [3]   Wessels, D. and K. Claffy, \"Application of Internet Cache\n\
    \         Protocol (ICP), Version 2\", RFC 2187, September 1997.\n   [4]   Postel,\
    \ J. and J. Reynolds, \"File Transfer Protocol (FTP)\", STD\n         9, RFC 959,\
    \ October 1985.\n   [5]   Anklesaria, F., McCahill, M., Lindner, P., Johnson,\
    \ D., Torrey,\n         D. and B. Alberti, \"The Internet Gopher Protocol\", RFC\
    \ 1436,\n         March 1993.\n   [6]   Berners-Lee, T., Fielding, R. and H. Frystyk,\
    \ \"Hypertext\n         Transfer Protocol -- HTTP/1.0\", RFC 1945, May 1996.\n\
    \   [7]   Leech, M., Ganis, M., Lee, Y., Kuris, R., Koblas, D. and L.\n      \
    \   Jones, \"SOCKS Protocol Version 5\", RFC 1928, March 1996.\n   [8]   Brisco,\
    \ T., \"DNS Support for Load Balancing\", RFC 1794, April\n         1995.\n  \
    \ [9]   Vixie, P. and D. Wessels, \"Hyper Text Caching Protocol\n         (HTCP/0.0)\"\
    , RFC 2756, January 2000.\n   [10]  Fan, L., Cao, P., Almeida, J. and A. Broder,\
    \ \"Summary Cache: A\n         Scalable Wide-Area Web Cache Sharing Protocol\"\
    , Proceedings of\n         ACM SIGCOMM'98 pp. 254-265, September 1998.\n   [11]\
    \  Krawczyk, H., Bellare, M. and R. Canetti, \"HMAC: Keyed-Hashing\n         for\
    \ Message Authentication\", RFC 2104, February 1997.\n   [12]  Netscape, Inc.,\
    \ \"Navigator Proxy Auto-Config File Format\",\n         March 1996,\n       \
    \  <URL:http://www.netscape.com/eng/mozilla/2.0/relnotes/demo/proxy-\n       \
    \  live.html>.\n   [13]  Gauthier, P., Cohen, J., Dunsmuir, M. and C. Perkins,\
    \ \"The Web\n         Proxy Auto-Discovery Protocol\", Work in Progress.\n   [14]\
    \  Valloppillil, V. and K. Ross, \"Cache Array Routing Protocol\",\n         Work\
    \ in Progress.\n   [15]  Microsoft Corporation, \"Cache Array Routing Protocol\
    \ (CARP)\n         v1.0 Specifications, Technical Whitepaper\", August 1999,\n\
    \         <URL:http://www.microsoft.com/Proxy/Guide/carpspec.asp>.\n   [16]  Microsoft\
    \ Corporation, \"Cache Array Routing Protocol and\n         Microsoft Proxy Server\
    \ 2.0, Technical White Paper\", August\n         1998,\n         <URL:http://www.microsoft.com/proxy/documents/CarpWP.exe>.\n\
    \   [17]  Lovric, I., \"Internet Cache Protocol Extension\", Work in\n       \
    \  Progress.\n   [18]  Cieslak, M. and D. Forster, \"Cisco Web Cache Coordination\n\
    \         Protocol V1.0\", Work in Progress.\n   [19]  Cieslak, M., Forster, D.,\
    \ Tiwana, G. and R. Wilson, \"Cisco Web\n         Cache Coordination Protocol\
    \ V2.0\", Work in Progress.\n   [20]  Goutard, C., Lovric, I. and E. Maschio-Esposito,\
    \ \"Pre-filling a\n         cache - A satellite overview\", Work in Progress.\n\
    \   [21]  Hamilton, M., Rousskov, A. and D. Wessels, \"Cache Digest\n        \
    \ specification - version 5\", December 1998,\n         <URL:http://www.squid-cache.org/CacheDigest/cache-digest-\n\
    \         v5.txt>.\n   [22]  Cerpa, A., Elson, J., Beheshti, H., Chankhunthod,\
    \ A., Danzig,\n         P., Jalan, R., Neerdaels, C., Shroeder, T. and G. Tomlinson,\n\
    \         \"NECP: The Network Element Control Protocol\", Work in Progress.\n\
    \   [23]  Cooper, I. and J. Dilley, \"Known HTTP Proxy/Caching Problems\",\n \
    \        Work in Progress.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ian Cooper\n   Equinix, Inc.\n   2450 Bayshore Parkway\n\
    \   Mountain View, CA  94043\n   USA\n   Phone: +1 650 316 6065\n   EMail: icooper@equinix.com\n\
    \   Ingrid Melve\n   UNINETT\n   Tempeveien 22\n   Trondheim  N-7465\n   Norway\n\
    \   Phone: +47 73 55 79 07\n   EMail: Ingrid.Melve@uninett.no\n   Gary Tomlinson\n\
    \   CacheFlow Inc.\n   12034 134th Ct. NE, Suite 201\n   Redmond, WA  98052\n\
    \   USA\n   Phone: +1 425 820 3009\n   EMail: gary.tomlinson@cacheflow.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
