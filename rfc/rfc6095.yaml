- title: __initial_text__
  contents:
  - '               Extending YANG with Language Abstractions

    '
- title: Abstract
  contents:
  - "Abstract\n   YANG -- the Network Configuration Protocol (NETCONF) Data Modeling\n\
    \   Language -- supports modeling of a tree of data elements that\n   represent\
    \ the configuration and runtime status of a particular\n   network element managed\
    \ via NETCONF.  This memo suggests enhancing\n   YANG with supplementary modeling\
    \ features and language abstractions\n   with the aim to improve the model extensibility\
    \ and reuse.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6095.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Key Words  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n     1.2.  Motivation . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n     1.3.  Modeling Improvements with Language Abstractions . .\
    \ . . .  5\n     1.4.  Design Approach  . . . . . . . . . . . . . . . . . . .\
    \ . .  6\n     1.5.  Modeling Resource Models with YANG . . . . . . . . . . .\
    \ .  6\n       1.5.1.  Example of a Physical Network Resource Model . . . . .\
    \  6\n       1.5.2.  Modeling Entity MIB Entries as Physical Resources  . . 12\n\
    \   2.  Complex Types  . . . . . . . . . . . . . . . . . . . . . . . . 15\n  \
    \   2.1.  Definition . . . . . . . . . . . . . . . . . . . . . . . . 15\n    \
    \ 2.2.  complex-type Extension Statement . . . . . . . . . . . . . 15\n     2.3.\
    \  instance Extension Statement . . . . . . . . . . . . . . . 17\n     2.4.  instance-list\
    \ Extension Statement  . . . . . . . . . . . . 18\n     2.5.  extends Extension\
    \ Statement  . . . . . . . . . . . . . . . 19\n     2.6.  abstract Extension Statement\
    \ . . . . . . . . . . . . . . . 19\n     2.7.  XML Encoding Rules . . . . . .\
    \ . . . . . . . . . . . . . . 20\n     2.8.  Type Encoding Rules  . . . . . .\
    \ . . . . . . . . . . . . . 20\n     2.9.  Extension and Feature Definition Module\
    \  . . . . . . . . . 21\n     2.10. Example Model for Complex Types  . . . . .\
    \ . . . . . . . . 24\n     2.11. NETCONF Payload Example  . . . . . . . . . .\
    \ . . . . . . . 25\n     2.12. Update Rules for Modules Using Complex Types .\
    \ . . . . . . 26\n     2.13. Using Complex Types  . . . . . . . . . . . . . .\
    \ . . . . . 26\n       2.13.1. Overriding Complex Type Data Nodes . . . . . .\
    \ . . . . 26\n       2.13.2. Augmenting Complex Types . . . . . . . . . . . .\
    \ . . . 27\n       2.13.3. Controlling the Use of Complex Types . . . . . . .\
    \ . . 28\n   3.  Typed Instance Identifier  . . . . . . . . . . . . . . . . .\
    \ . 29\n     3.1.  Definition . . . . . . . . . . . . . . . . . . . . . . . .\
    \ 29\n     3.2.  instance-type Extension Statement  . . . . . . . . . . . . 29\n\
    \     3.3.  Typed Instance Identifier Example  . . . . . . . . . . . . 30\n  \
    \ 4.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 31\n   5.\
    \  Security Considerations  . . . . . . . . . . . . . . . . . . . 31\n   6.  Acknowledgements\
    \ . . . . . . . . . . . . . . . . . . . . . . . 32\n   7.  References . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 32\n     7.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . . . 32\n     7.2.  Informative References\
    \ . . . . . . . . . . . . . . . . . . 32\n   Appendix A.  YANG Modules for Physical\
    \ Network Resource Model\n                and Hardware Entities Model . . . .\
    \ . . . . . . . . . 34\n   Appendix B.  Example YANG Module for the IPFIX/PSAMP\
    \ Model . . . . 40\n     B.1.  Modeling Improvements for the IPFIX/PSAMP Model\
    \ with\n           Complex Types and Typed Instance Identifiers . . . . . . .\
    \ 40\n     B.2.  IPFIX/PSAMP Model with Complex Types and Typed\n           Instance\
    \ Identifiers . . . . . . . . . . . . . . . . . . . 41\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   YANG -- the NETCONF Data Modeling Language [RFC6020] --\
    \ supports\n   modeling of a tree of data elements that represent the configuration\n\
    \   and runtime status of a particular network element managed via\n   NETCONF.\
    \  This document defines extensions for the modeling language\n   YANG as new\
    \ language statements, which introduce language\n   abstractions to improve the\
    \ model extensibility and reuse.  The\n   document reports from modeling experience\
    \ in the telecommunication\n   industry and gives model examples from an actual\
    \ network management\n   system to highlight the value of proposed language extensions,\n\
    \   especially class inheritance and recursiveness.  The language\n   extensions\
    \ defined in this document have been implemented with two\n   open source tools.\
    \  These tools have been used to validate the model\n   examples through the document.\
    \  If this experimental specification\n   results in successful usage, it is possible\
    \ that the language\n   extensions defined herein could be updated to incorporate\n\
    \   implementation and deployment experience, then pursued on the\n   Standards\
    \ Track, possibly as part of a future version of YANG.\n"
- title: 1.1.  Key Words
  contents:
  - "1.1.  Key Words\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in BCP\n   14, [RFC2119].\n"
- title: 1.2.  Motivation
  contents:
  - "1.2.  Motivation\n   Following are non-exhaustive motivation examples highlighting\
    \ usage\n   scenarios for language abstractions.\n   o  Many systems today have\
    \ a Management Information Base (MIB) that\n      in effect is organized as a\
    \ tree build of recursively nested\n      container nodes.  For example, the physical\
    \ resources in the\n      ENTITY-MIB conceptually form a containment tree.  The\
    \ index\n      entPhysicalContainedIn points to the containing entity in a flat\n\
    \      list.  The ability to represent nested, recursive data structures\n   \
    \   of arbitrary depth would enable the representation of the primary\n      containment\
    \ hierarchy of physical entities as a node tree in the\n      server MIB and in\
    \ the NETCONF payload.\n   o  A manager scanning the network in order to update\
    \ the state of an\n      inventory management system might be only interested\
    \ in data\n      structures that represent a specific type of hardware.  Such\
    \ a\n      manager would then look for entities that are of this specific\n  \
    \    type, including those that are an extension or specialization of\n      this\
    \ type.  To support this use case, it is helpful to bear the\n      corresponding\
    \ type information within the data structures, which\n      describe the network\
    \ element hardware.\n   o  A system that is managing network elements is concerned,\
    \ e.g.,\n      with managed objects of type \"plug-in modules\" that have a name,\
    \ a\n      version, and an activation state.  In this context, it is useful\n\
    \      to define the \"plug-in module\" as a concept that is supposed to be\n\
    \      further detailed and extended by additional concrete model\n      elements.\
    \  In order to realize such a system, it is worthwhile to\n      model abstract\
    \ entities, which enable reuse and ease concrete\n      refinements of that abstract\
    \ entity in a second step.\n   o  As particular network elements have specific\
    \ types of components\n      that need to be managed (OS images, plug-in modules,\
    \ equipment,\n      etc.), it should be possible to define concrete types, which\n\
    \      describe the managed object precisely.  By using type-safe\n      extensions\
    \ of basic concepts, a system in the manager role can\n      safely and explicitly\
    \ determine that e.g., the \"equipment\" is\n      actually of type \"network\
    \ card\".\n   o  Currently, different SDOs are working on the harmonization of\n\
    \      their management information models.  Often, a model mapping or\n     \
    \ transformation between systems becomes necessary.  The\n      harmonization\
    \ of the models is done e.g., by mapping of the two\n      models on the object\
    \ level or integrating an object hierarchy into\n      an existing information\
    \ model.  On the one hand, extending YANG\n      with language abstractions can\
    \ simplify the adoption of IETF\n      resource models by other SDOs and facilitate\
    \ the alignment with\n      other SDOs' resource models (e.g., TM Forum SID [SID_V8]).\
    \  On the\n      other hand, the proposed YANG extensions can enable the\n   \
    \   utilization of the YANG modeling language in other SDOs, which\n      usually\
    \ model complex management systems in a top-down manner and\n      use high-level\
    \ language features frequently.\n   This memo specifies additional modeling features\
    \ for the YANG\n   language in the area of structured model abstractions, typed\n\
    \   references, as well as recursive data structures, and it discusses\n   how\
    \ these new features can improve the modeling capabilities of YANG.\n   Section\
    \ 1.5.1 contains a physical resource model that deals with some\n   of the modeling\
    \ challenges illustrated above.  Section 1.5.2 gives an\n   example that uses\
    \ the base classes defined in the physical resource\n   model and derives a model\
    \ for physical entities defined in the Entity\n   MIB.\n"
- title: 1.3.  Modeling Improvements with Language Abstractions
  contents:
  - "1.3.  Modeling Improvements with Language Abstractions\n   As an enhancement\
    \ to YANG 1.0, complex types and typed instance\n   identifiers provide different\
    \ technical improvements on the modeling\n   level:\n   o  In case the model of\
    \ a system that should be managed with NETCONF\n      makes use of inheritance,\
    \ complex types enable an almost one-to-\n      one mapping between the classes\
    \ in the original model and the YANG\n      module.\n   o  Typed instance identifiers\
    \ allow representing associations between\n      the concepts in a type-safe way\
    \ to prevent type errors caused by\n      referring to data nodes of incompatible\
    \ types.  This avoids\n      referring to a particular location in the MIB.  Referring\
    \ to a\n      particular location in the MIB is not mandated by the domain\n \
    \     model.\n   o  Complex types allow defining complete, self-contained type\n\
    \      definitions.  It is not necessary to explicitly add a key\n      statement\
    \ to lists, which use a grouping that defines the data\n      nodes.\n   o  Complex\
    \ types simplify concept refinement by extending a base\n      complex type and\
    \ make it superfluous to represent concept\n      refinements with workarounds\
    \ such as huge choice-statements with\n      complex branches.\n   o  Abstract\
    \ complex types ensure correct usage of abstract concepts\n      by enforcing\
    \ the refinement of a common set of properties before\n      instantiation.\n\
    \   o  Complex types allow defining recursive structures.  This enables\n    \
    \  representing complex structures of arbitrary depth by nesting\n      instances\
    \ of basic complex types that may contain themselves.\n   o  Complex types avoid\
    \ introducing metadata types (e.g., type code\n      enumerations) and metadata\
    \ leafs (e.g., leafs containing a type\n      code) to indicate which concrete\
    \ type of object is actually\n      represented by a generic container in the\
    \ MIB.  This also avoids\n      explicitly ruling out illegal use of subtype-specific\
    \ properties\n      in generic containers.\n   o  Complex type instances include\
    \ the type information in the NETCONF\n      payload.  This allows determining\
    \ the actual type of an instance\n      during the NETCONF payload parsing and\
    \ avoids the use in the model\n      of additional leafs, which provide the type\
    \ information as\n      content.\n   o  Complex types may be declared explicitly\
    \ as optional features,\n      which is not possible when the actual type of an\
    \ entity\n      represented by a generic container is indicated with a type code\n\
    \      enumeration.\n   Appendix B, \"Example YANG Module for the IPFIX/PSAMP\
    \ Model\", lists\n   technical improvements for modeling with complex types and\
    \ typed\n   instance identifiers and exemplifies the usage of the proposed YANG\n\
    \   extensions based on the IP Flow Information Export (IPFIX) / Packet\n   Sampling\
    \ (PSAMP) configuration model in [IPFIXCONF].\n"
- title: 1.4.  Design Approach
  contents:
  - "1.4.  Design Approach\n   The proposed additional features for YANG in this memo\
    \ are designed\n   to reuse existing YANG statements whenever possible.  Additional\n\
    \   semantics is expressed by an extension that is supposed to be used as\n  \
    \ a substatement of an existing statement.\n   The proposed features don't change\
    \ the semantics of models that is\n   valid with respect to the YANG specification\
    \ [RFC6020].\n"
- title: 1.5.  Modeling Resource Models with YANG
  contents:
  - '1.5.  Modeling Resource Models with YANG

    '
- title: 1.5.1.  Example of a Physical Network Resource Model
  contents:
  - "1.5.1.  Example of a Physical Network Resource Model\n   The diagram below depicts\
    \ a portion of an information model for\n   manageable network resources used\
    \ in an actual network management\n   system.\n   Note: The referenced model (UDM,\
    \ Unified Data Model) is based on key\n   resource modeling concepts from [SID_V8]\
    \ and is compliant with\n   selected parts of SID Resource Abstract Business Entities\
    \ domain\n   [UDM].\n   The class diagram in Figure 1 and the corresponding YANG\
    \ module\n   excerpt focus on basic resource (\"Resource\" and the distinction\n\
    \   between logical and physical resources) and hardware abstractions\n   (\"\
    Hardware\", \"Equipment\", and \"EquipmentHolder\").  Class attributes\n   were\
    \ omitted to achieve decent readability.\n"
- title: +--------+
  contents:
  - '+--------+

    '
- title: '|Resource|'
  contents:
  - '|Resource|

    '
- title: +--------+
  contents:
  - "+--------+\n /\\   /\\\n --   --\n |    |\n |  +---------------+\n |  |LogicalResource|\n\
    \ |  +---------------+\n |\n | +--------+\n | |Physical|      +-----------+\n\
    \ '-|Resource|<|-+-|PhysicalLink|\n   +---- ---+   | +------------+\n        \
    \        |     |0..* physicalLink\n                |     |                   \
    \                    equipment\n                |     |                      \
    \                 Holder\n                |     |                            \
    \           0..*\n                |     |                                    \
    \   +-------+\n                |     |0..* hardware                          |\
    \       |\n                | +--------+     +---------------+     +---------+\
    \    |\n                '-|Hardware|<|-+-|ManagedHardware|<|-+-|Equipment|<>--+\n\
    \                  +--------+   | +---------------+   | | Holder  |0..1\n    \
    \                  <>       |                     | +---------+\n            \
    \      0..1|        |                     |   <>\n                      |    \
    \    |                     |   |0..* equipment\n                      |      \
    \  |                     |   |     Holder\n                      |        |  \
    \                   |   |\n                      |        |                  \
    \   |   |0..* equipment\n                      |        |                    \
    \ |   |\n                      |        |                     |   |    equipment\n\
    \                      |        |                     |   |    0..*\n        \
    \              |        |                     |   |    +-------+\n           \
    \           |        |                     |   |    |       |\n              \
    \        |        |                     | +---------+    |\n                 \
    \     |        |                     '-|Equipment|<>--+\n                    \
    \  |        |                       +---------+0..1\n                      | \
    \       |                    compositeEquipment\n                      |     \
    \   |\n                      |        | +-----------------+\n                \
    \      |        '-|PhysicalConnector|----+0..* source\n                      '----------+-----------------+\
    \    |     Physical\n           physicalConnector 0..*           |           |\
    \     Connector\n                                            |           |\n \
    \                                           +-----------+\n                  \
    \                          0..* targetPhysicalConnector\n                 Figure\
    \ 1: Physical Network Resource Model\n   Since this model is an abstraction of\
    \ network-element-specific MIB\n   topologies, modeling it with YANG creates some\
    \ challenges.  Some of\n   these challenges and how they can be addressed with\
    \ complex types are\n   explained below:\n   o  Modeling of abstract concepts:\
    \ Classes like \"Resource\" represent\n      concepts that primarily serve as\
    \ a base class for derived classes.\n      With complex types, such an abstract\
    \ concept could be represented\n      by an abstract complex type (see \"complex-type\
    \ extension\n      statement\" and \"abstract extension statement\").\n   o  Class\
    \ Inheritance: Information models for complex management\n      domains often\
    \ use class inheritance to create specialized classes\n      like \"PhysicalConnector\"\
    \ from a more generic base class (here,\n      \"Hardware\"), which itself might\
    \ inherit from another base class\n      (\"PhysicalResource\"), etc.  Complex\
    \ types allow creating enhanced\n      versions of an existing (abstract or concrete)\
    \ base type via an\n      extension (see \"extends extension statement\").\n \
    \  o  Recursive containment: In order to specify containment\n      hierarchies,\
    \ models frequently contain different aggregation\n      associations, in which\
    \ the target (contained element) is either\n      the containing class itself\
    \ or a base class of the containing\n      class.  In the model above, the recursive\
    \ containment of\n      \"EquipmentHolder\" is an example of such a relationship\
    \ (see the\n      description for the \"complex-type EquipmentHolder\" in the\
    \ example\n      model \"udmcore\" below).\n   o  Complex types support such a\
    \ containment by using a complex type\n      (or one of its ancestor types) as\
    \ the type of an instance or\n      instance list that is part of its definition\
    \ (see \"instance(-list)\n      extension statement\").\n   o  Reference relationships:\
    \ A key requirement on large models for\n      network domains with many related\
    \ managed objects is the ability\n      to define inter-class associations that\
    \ represent essential\n      relationships between instances of such a class.\
    \  For example, the\n      relationship between \"PhysicalLink\" and \"Hardware\"\
    \ tells which\n      physical link is connecting which hardware resources.  It\
    \ is\n      important to notice that this kind of relationship does not\n    \
    \  mandate any particular location of the two connected hardware\n      instances\
    \ in any MIB module.  Such containment-agnostic\n      relationships can be represented\
    \ by a typed instance identifier\n      that embodies one direction of such an\
    \ association (see Section 3,\n      \"Typed Instance Identifier\").\n   The YANG\
    \ module excerpt below shows how the challenges listed above\n   can be addressed\
    \ by the Complex Types extension (module import prefix\n   \"ct:\").  The complete\
    \ YANG module for the physical resource model in\n   Figure 1 can be found in\
    \ Appendix A, \"YANG Modules for Physical\n   Network Resource Model and Hardware\
    \ Entities Model\".\n   Note: The YANG extensions proposed in this document have\
    \ been\n   implemented as the open source tools \"Pyang Extension for Complex\n\
    \   Types\" [Pyang-ct], [Pyang], and \"Libsmi Extension for Complex Types\"\n\
    \   [Libsmi].  All model examples in the document have been validated\n   with\
    \ the tools Pyang-ct and Libsmi.\n"
- title: <CODE BEGINS>
  contents:
  - '<CODE BEGINS>

    '
- title: module udmcore {
  contents:
  - "module udmcore {\n   namespace \"http://example.com/udmcore\";\n   prefix \"\
    udm\";\n   import ietf-complex-types {prefix \"ct\"; }\n        // Basic complex\
    \ types...\n   ct:complex-type PhysicalResource {\n      ct:extends Resource;\n\
    \        ct:abstract true;\n        // ...\n        leaf serialNumber {\n    \
    \     type string;\n         description \"'Manufacturer-allocated part number'\
    \ as\n           defined in SID, e.g., the part number of a fiber link\n     \
    \      cable.\";\n      }\n   }\n   ct:complex-type Hardware {\n      ct:extends\
    \ PhysicalResource;\n        ct:abstract true;\n        // ...\n       leaf-list\
    \ physicalLink {\n          type instance-identifier {ct:instance-type PhysicalLink;}\n\
    \       }\n       ct:instance-list containedHardware {\n       ct:instance-type\
    \ Hardware;\n"
- title: '}'
  contents:
  - "}\n       ct:instance-list physicalConnector {\n       ct:instance-type PhysicalConnector;\n"
- title: '}'
  contents:
  - "}\n   }\n   ct:complex-type PhysicalLink {\n       ct:extends PhysicalResource;\n\
    \       // ...\n       leaf-list hardware {\n          type instance-identifier\
    \ {ct:instance-type Hardware;}\n       }\n   }\n   ct:complex-type ManagedHardware\
    \ {\n      ct:extends Hardware;\n        ct:abstract true;\n        // ...\n \
    \  }\n   ct:complex-type PhysicalConnector {\n      ct:extends Hardware;\n   \
    \     leaf location {type string;}\n        // ...\n      leaf-list sourcePhysicalConnector\
    \ {\n         type instance-identifier {ct:instance-type PhysicalConnector;}\n\
    \      }\n      leaf-list targetPhysicalConnector {\n         type instance-identifier\
    \ {ct:instance-type PhysicalConnector;}\n      }\n   }\n   ct:complex-type Equipment\
    \ {\n      ct:extends ManagedHardware;\n        // ...\n      ct:instance-list\
    \ equipment {\n    ct:instance-type Equipment;\n"
- title: '}'
  contents:
  - "}\n   }\n   ct:complex-type EquipmentHolder {\n      ct:extends ManagedHardware;\n\
    \      description \"In the SID V8 definition, this is a class based on\n    \
    \    the M.3100 specification.  A base class that represents physical\n      \
    \  objects that are both manageable as well as able to host,\n        hold, or\
    \ contain other physical objects.  Examples of physical\n        objects that\
    \ can be represented by instances of this object\n        class are Racks, Chassis,\
    \ Cards, and Slots.\n        A piece of equipment with the primary purpose of\
    \ containing\n        other equipment.\";\n        leaf vendorName {type string;}\n\
    \        // ...\n      ct:instance-list equipment {\n       ct:instance-type Equipment;\n\
    \        }\n      ct:instance-list equipmentHolder {\n       ct:instance-type\
    \ EquipmentHolder;\n       }\n   }\n   // ...\n"
- title: '}'
  contents:
  - '}

    '
- title: <CODE ENDS>
  contents:
  - '<CODE ENDS>

    '
- title: 1.5.2.  Modeling Entity MIB Entries as Physical Resources
  contents:
  - "1.5.2.  Modeling Entity MIB Entries as Physical Resources\n   The physical resource\
    \ module described above can now be used to model\n   physical entities as defined\
    \ in the Entity MIB [RFC4133].  For each\n   physical entity class listed in the\
    \ \"PhysicalClass\" enumeration, a\n   complex type is defined.  Each of these\
    \ complex types extends the\n   most specific complex type already available in\
    \ the physical resource\n   module.  For example, the type \"HWModule\" extends\
    \ the complex type\n   \"Equipment\" as a hardware module.  Physical entity properties\
    \ that\n   should be included in a physical entity complex type are combined in\n\
    \   a grouping, which is then used in each complex type definition of an\n   entity.\n\
    \   This approach has following benefits:\n   o  The definition of the complex\
    \ types for hardware entities becomes\n      compact as many of the features can\
    \ be reused from the basic\n      complex type definition.\n   o  Physical entities\
    \ are modeled in a consistent manner as predefined\n      concepts are extended.\n\
    \   o  Entity-MIB-specific attributes as well as vendor-specific\n      attributes\
    \ can be added without having to define separate\n      extension data nodes.\n\
    \                            Module udmcore  :  Module hardware-entities\n   \
    \                                         :\n                                equipment\
    \   :\n                                Holder      :\n                       \
    \         0..*        :\n                                +-------+   :\n     \
    \                           |       |   :\n   +---------------+     +---------+\
    \    |   :\n   |ManagedHardware|<|-+-|Equipment|<>--+   :\n   +---------------+\
    \   | | Holder  |0..1    :     +-------+\n                       | |         |<|---------+--|Chassis|\n\
    \                       | +---------+        :  |  +-------+\n               \
    \        |   <>               :  |\n                       |   |0..* equipment\
    \  :  |  +---------+\n                       |   |     Holder     :  '--|Container|\n\
    \                       |   |                :     +---------+\n             \
    \          |   |0..* equipment  :\n                       |   |              \
    \  :\n                       |   |    equipment   :\n                       |\
    \   |    0..*        :\n                       |   |    +-------+   :\n      \
    \                 |   |    |       |   :\n                       | +---------+\
    \    |   :\n                       '-|Equipment|<>--+   :     +--------+\n   \
    \                      |         |<|---------+--|HWModule|\n                 \
    \        +---------+        :  |  +--------+\n                      compositeEquipment\
    \    :  |\n                                            :  |  +---------+\n   \
    \                                         :  |--|Backplane|\n                \
    \                            :     +---------+\n                     Figure 2:\
    \ Hardware Entities Model\n   Below is an excerpt of the corresponding YANG module\
    \ using complex\n   types to model hardware entities.  The complete YANG module\
    \ for the\n   Hardware Entities model in Figure 2 can be found in Appendix A,\
    \ \"YANG\n   Modules for Physical Network Resource Model and Hardware Entities\n\
    \   Model\".\n"
- title: <CODE BEGINS>
  contents:
  - '<CODE BEGINS>

    '
- title: module hardware-entities {
  contents:
  - "module hardware-entities {\n   namespace \"http://example.com/hardware-entities\"\
    ;\n   prefix \"hwe\";\n   import ietf-yang-types {prefix \"yt\";}\n   import ietf-complex-types\
    \ {prefix \"ct\";}\n   import udmcore {prefix \"uc\";}\n   grouping PhysicalEntityProperties\
    \ {\n      // ...\n      leaf mfgDate {type yang:date-and-time; }\n      leaf-list\
    \ uris {type string; }\n   }\n   // Physical entities representing equipment\n\
    \   ct:complex-type HWModule {\n      ct:extends uc:Equipment;\n      description\
    \ \"Complex type representing module entries\n                   (entPhysicalClass\
    \ = module(9)) in entPhysicalTable\";\n      uses PhysicalEntityProperties;\n\
    \   }\n   // ...\n   // Physical entities representing equipment holders\n   ct:complex-type\
    \ Chassis {\n      ct:extends uc:EquipmentHolder;\n      description \"Complex\
    \ type representing chassis entries\n                   (entPhysicalClass = chassis(3))\
    \ in entPhysicalTable\";\n      uses PhysicalEntityProperties;\n   }\n   // ...\n"
- title: '}'
  contents:
  - '}

    '
- title: <CODE ENDS>
  contents:
  - '<CODE ENDS>

    '
- title: 2.  Complex Types
  contents:
  - '2.  Complex Types

    '
- title: 2.1.  Definition
  contents:
  - "2.1.  Definition\n   YANG type concept is currently restricted to simple types,\
    \ e.g.,\n   restrictions of primitive types, enumerations, or union of simple\n\
    \   types.\n   Complex types are types with a rich internal structure, which may\
    \ be\n   composed of substatements defined in Table 1 (e.g., lists, leafs,\n \
    \  containers, choices).  A new complex type may extend an existing\n   complex\
    \ type.  This allows providing type-safe extensions to existing\n   YANG models\
    \ as instances of the new type.\n   Complex types have the following characteristics:\n\
    \   o  Introduction of new types, as a named, formal description of a\n      concrete\
    \ manageable resource as well as abstract concepts.\n   o  Types can be extended,\
    \ i.e., new types can be defined by\n      specializing existing types and adding\
    \ new features.  Instances of\n      such an extended type can be used wherever\
    \ instances of the base\n      type may appear.\n   o  The type information is\
    \ made part of the NETCONF payload in case a\n      derived type substitutes a\
    \ base type.  This enables easy and\n      efficient consumption of payload elements\
    \ representing complex\n      type instances.\n"
- title: 2.2.  complex-type Extension Statement
  contents:
  - "2.2.  complex-type Extension Statement\n   The extension statement \"complex-type\"\
    \ is introduced; it accepts an\n   arbitrary number of statements that define\
    \ node trees, among other\n   common YANG statements (\"YANG Statements\", Section\
    \ 7 of [RFC6020]).\n                    +------------------+-------------+\n \
    \                   |   substatement   | cardinality |\n                    +------------------+-------------+\n\
    \                    |     abstract     |     0..1    |\n                    |\
    \      anyxml      |     0..n    |\n                    |      choice      | \
    \    0..n    |\n                    |     container    |     0..n    |\n     \
    \               |    description   |     0..1    |\n                    |    ct:instance\
    \   |     0..n    |\n                    | ct:instance-list |     0..n    |\n\
    \                    |    ct:extends    |     0..1    |\n                    |\
    \     grouping     |     0..n    |\n                    |    if-feature    | \
    \    0..n    |\n                    |        key       |     0..1    |\n     \
    \               |       leaf       |     0..n    |\n                    |    \
    \ leaf-list    |     0..n    |\n                    |       list       |     0..n\
    \    |\n                    |       must       |     0..n    |\n             \
    \       |    ordered-by    |     0..n    |\n                    |     reference\
    \    |     0..1    |\n                    |      refine      |     0..n    |\n\
    \                    |      status      |     0..1    |\n                    |\
    \      typedef     |     0..n    |\n                    |       uses       | \
    \    0..n    |\n                    +------------------+-------------+\n     \
    \              Table 1: complex-type's Substatements\n   Complex type definitions\
    \ may appear at every place where a grouping\n   may be defined.  That includes\
    \ the module, submodule, rpc, input,\n   output, notification, container, and\
    \ list statements.\n   Complex type names populate a distinct namespace.  As with\
    \ YANG\n   groupings, it is possible to define a complex type and a data node\n\
    \   (e.g., leaf, list, instance statements) with the same name in the\n   same\
    \ scope.  All complex type names defined within a parent node or\n   at the top\
    \ level of the module or its submodules share the same type\n   identifier namespace.\
    \  This namespace is scoped to the parent node or\n   module.\n   A complex type\
    \ MAY have an instance key.  An instance key is either\n   defined with the \"\
    key\" statement as part of the complex type or is\n   inherited from the base\
    \ complex type.  It is not allowed to define an\n   additional key if the base\
    \ complex type or one of its ancestors\n   already defines a key.\n   Complex\
    \ type definitions do not create nodes in the schema tree.\n"
- title: 2.3.  instance Extension Statement
  contents:
  - "2.3.  instance Extension Statement\n   The \"instance\" extension statement is\
    \ used to instantiate a complex\n   type by creating a subtree in the management\
    \ information node tree.\n   The instance statement takes one argument that is\
    \ the identifier of\n   the complex type instance.  It is followed by a block\
    \ of\n   substatements.\n   The type of the instance is specified with the mandatory\
    \ \"ct:\n   instance-type\" substatement.  The type of an instance MUST be a\n\
    \   complex type.  Common YANG statements may be used as substatements of\n  \
    \ the \"instance\" statement.  An instance is optional by default.  To\n   make\
    \ an instance mandatory, \"mandatory true\" has to be applied as a\n   substatement.\n\
    \                    +------------------+-------------+\n                    |\
    \   substatement   | cardinality |\n                    +------------------+-------------+\n\
    \                    |    description   |     0..1    |\n                    |\
    \      config      |     0..1    |\n                    | ct:instance-type | \
    \     1      |\n                    |    if-feature    |     0..n    |\n     \
    \               |     mandatory    |     0..1    |\n                    |    \
    \   must       |     0..n    |\n                    |     reference    |     0..1\
    \    |\n                    |      status      |     0..1    |\n             \
    \       |       when       |     0..1    |\n                    |      anyxml\
    \      |     0..n    |\n                    |      choice      |     0..n    |\n\
    \                    |     container    |     0..n    |\n                    |\
    \    ct:instance   |     0..n    |\n                    | ct:instance-list | \
    \    0..n    |\n                    |       leaf       |     0..n    |\n     \
    \               |     leaf-list    |     0..n    |\n                    |    \
    \   list       |     0..n    |\n                    +------------------+-------------+\n\
    \                     Table 2: instance's Substatements\n   The \"instance\" and\
    \ \"instance-list\" extension statements (see\n   Section 2.4, \"instance-list\
    \ Extension Statement\") are similar to the\n   existing \"leaf\" and \"leaf-list\"\
    \ statements, with the exception that\n   the content is composed of subordinate\
    \ elements according to the\n   instantiated complex type.\n   It is also possible\
    \ to add additional data nodes by using the\n   corresponding leaf, leaf-list,\
    \ list, and choice-statements, etc., as\n   substatements of the instance declaration.\
    \  This is an in-place\n   augmentation of the used complex type confined to a\
    \ complex type\n   instantiation (see also Section 2.13, \"Using Complex Types\"\
    , for\n   details on augmenting complex types).\n"
- title: 2.4.  instance-list Extension Statement
  contents:
  - "2.4.  instance-list Extension Statement\n   The \"instance-list\" extension statement\
    \ is used to instantiate a\n   complex type by defining a sequence of subtrees\
    \ in the management\n   information node tree.  In addition, the \"instance-list\"\
    \ statement\n   takes one argument that is the identifier of the complex type\n\
    \   instances.  It is followed by a block of substatements.\n   The type of the\
    \ instance is specified with the mandatory \"ct:\n   instance-type\" substatement.\
    \  In addition, it can be defined how\n   often an instance may appear in the\
    \ schema tree by using the \"min-\n   elements\" and \"max-elements\" substatements.\
    \  Common YANG statements\n   may be used as substatements of the \"instance-list\"\
    \ statement.\n   In analogy to the \"instance\" statement, YANG substatements\
    \ like\n   \"list\", \"choice\", \"leaf\", etc., MAY be used to augment the \"\
    instance-\n   list\" elements at the root level with additional data nodes.\n\
    \                    +------------------+-------------+\n                    |\
    \   substatementc  | cardinality |\n                    +------------------+-------------+\n\
    \                    |    description   |     0..1    |\n                    |\
    \      config      |     0..1    |\n                    | ct:instance-type | \
    \     1      |\n                    |    if-feature    |     0..n    |\n     \
    \               |   max-elements   |     0..1    |\n                    |   min-elements\
    \   |     0..1    |\n                    |       must       |     0..n    |\n\
    \                    |    ordered-by    |     0..1    |\n                    |\
    \     reference    |     0..1    |\n                    |      status      | \
    \    0..1    |\n                    |       when       |     0..1    |\n     \
    \               |      anyxml      |     0..n    |\n                    |    \
    \  choice      |     0..n    |\n                    |     container    |     0..n\
    \    |\n                    |    ct:instance   |     0..n    |\n             \
    \       | ct:instance-list |     0..n    |\n                    |       leaf \
    \      |     0..n    |\n                    |     leaf-list    |     0..n    |\n\
    \                    |       list       |     0..n    |\n                    +------------------+-------------+\n\
    \                  Table 3: instance-list's Substatements\n   In case the instance\
    \ list represents configuration data, the used\n   complex type of an instance\
    \ MUST have an instance key.\n   Instances as well as instance lists may appear\
    \ as arguments of the\n   \"deviate\" statement.\n"
- title: 2.5.  extends Extension Statement
  contents:
  - "2.5.  extends Extension Statement\n   A complex type MAY extend exactly one existing\
    \ base complex type by\n   using the \"extends\" extension statement.  The keyword\
    \ \"extends\" MAY\n   occur as a substatement of the \"complex-type\" extension\
    \ statement.\n   The argument of the \"complex-type\" extension statement refers\
    \ to the\n   base complex type via its name.  In case a complex type represents\n\
    \   configuration data (the default), it MUST have a key; otherwise, it\n   MAY\
    \ have a key.  A key is either defined with the \"key\" statement as\n   part\
    \ of the complex type or is inherited from the base complex type.\n          \
    \            +--------------+-------------+\n                      | substatement\
    \ | cardinality |\n                      +--------------+-------------+\n    \
    \                  |  description |     0..1    |\n                      |   reference\
    \  |     0..1    |\n                      |    status    |     0..1    |\n   \
    \                   +--------------+-------------+\n                      Table\
    \ 4: extends' Substatements\n"
- title: 2.6.  abstract Extension Statement
  contents:
  - "2.6.  abstract Extension Statement\n   Complex types may be declared to be abstract\
    \ by using the \"abstract\"\n   extension statement.  An abstract complex type\
    \ cannot be\n   instantiated, meaning it cannot appear as the most specific type\
    \ of\n   an instance in the NETCONF payload.  In case an abstract type extends\n\
    \   a base type, the base complex type MUST be also abstract.  By\n   default,\
    \ complex types are not abstract.\n   The abstract complex type serves only as\
    \ a base type for derived\n   concrete complex types and cannot be used as a type\
    \ for an instance\n   in the NETCONF payload.\n   The \"abstract\" extension statement\
    \ takes a single string argument,\n   which is either \"true\" or \"false\". \
    \ In case a \"complex-type\"\n   statement does not contain an \"abstract\" statement\
    \ as a substatement,\n   the default is \"false\".  The \"abstract\" statement\
    \ does not support\n   any substatements.\n"
- title: 2.7.  XML Encoding Rules
  contents:
  - "2.7.  XML Encoding Rules\n   An \"instance\" node is encoded as an XML element,\
    \ where an \"instance-\n   list\" node is encoded as a series of XML elements.\
    \  The corresponding\n   XML element names are the \"instance\" and \"instance-list\"\
    \ identifiers,\n   respectively, and they use the same XML namespace as the module.\n\
    \   Instance child nodes are encoded as subelements of the instance XML\n   element.\
    \  Subelements representing child nodes defined in the same\n   complex type may\
    \ appear in any order.  However, child nodes of an\n   extending complex type\
    \ follow the child nodes of the extended complex\n   type.  As such, the XML encoding\
    \ of lists is similar to the encoding\n   of containers and lists in YANG.\n \
    \  Instance key nodes are encoded as subelements of the instance XML\n   element.\
    \  Instance key nodes must appear in the same order as they\n   are defined within\
    \ the \"key\" statement of the corresponding complex\n   type definition and precede\
    \ all other nodes defined in the same\n   complex type.  That is, if key nodes\
    \ are defined in an extending\n   complex type, XML elements representing key\
    \ data precede all other\n   XML elements representing child nodes.  On the other\
    \ hand, XML\n   elements representing key data follow the XML elements representing\n\
    \   data nodes of the base type.\n   The type of the actual complex type instance\
    \ is encoded in a type\n   element, which is put in front of all instance child\
    \ elements,\n   including key nodes, as described in Section 2.8 (\"Type Encoding\n\
    \   Rules\").\n   The proposed XML encoding rules conform to the YANG XML encoding\n\
    \   rules in [RFC6020].  Compared to YANG, enabling key definitions in\n   derived\
    \ hierarchies is a new feature introduced with the complex\n   types extension.\
    \  As a new language feature, complex types also\n   introduce a new payload entry\
    \ for the instance type identifier.\n   Based on our implementation experience,\
    \ the proposed XML encoding\n   rules support consistent mapping of YANG models\
    \ with complex types to\n   an XML schema using XML complex types.\n"
- title: 2.8.  Type Encoding Rules
  contents:
  - "2.8.  Type Encoding Rules\n   In order to encode the type of an instance in the\
    \ NETCONF payload,\n   XML elements named \"type\" belonging to the XML namespace\n\
    \   \"urn:ietf:params:xml:ns:yang:ietf-complex-type-instance\" are added to\n\
    \   the serialized form of instance and instance-list nodes in the\n   payload.\
    \  The suggested namespace prefix is \"cti\".  The \"cti:type\"\n   XML elements\
    \ are inserted before the serialized form of all members\n   that have been declared\
    \ in the corresponding complex type definition.\n   The \"cti:type\" element is\
    \ inserted for each type in the extension\n   chain to the actual type of the\
    \ instance (most specific last).  Each\n   type name includes its corresponding\
    \ namespace.\n   The type of a complex type instance MUST be encoded in the reply\
    \ to\n   NETCONF <get> and <get-config> operations, and in the payload of a\n\
    \   NETCONF <edit-config> operation if the operation is \"create\" or\n   \"replace\"\
    .  The type of the instance MUST also be specified in case\n   <copy-config> is\
    \ used to export a configuration to a resource\n   addressed with an URI.  The\
    \ type of the instance has to be specified\n   in user-defined remote procedure\
    \ calls (RPCs).\n   The type of the instance MAY be specified in case the operation\
    \ is\n   \"merge\" (either because this is explicitly specified or no operation\n\
    \   attribute is provided).\n   In case the node already exists in the target\
    \ configuration and the\n   type attribute (type of a complex type instance) is\
    \ specified but\n   differs from the data in the target, an <rpc-error> element\
    \ is\n   returned with an <error-app-tag> value of \"wrong-complex-type\".  In\n\
    \   case no such element is present in the target configuration but the\n   type\
    \ attribute is missing in the configuration data, an <rpc-error>\n   element is\
    \ returned with an <error-tag> value of \"missing-attribute\".\n   The type MUST\
    \ NOT be specified in case the operation is \"delete\".\n"
- title: 2.9.  Extension and Feature Definition Module
  contents:
  - "2.9.  Extension and Feature Definition Module\n   The module below contains all\
    \ YANG extension definitions for complex\n   types and typed instance identifiers.\
    \  In addition, a \"complex-type\"\n   feature is defined, which may be used to\
    \ provide conditional or\n   alternative modeling, depending on the support status\
    \ of complex\n   types in a NETCONF server.  A NETCONF server that supports the\n\
    \   modeling features for complex types and the XML encoding for complex\n   types\
    \ as defined in this document MUST advertise this as a feature.\n   This is done\
    \ by including the feature name \"complex-types\" in the\n   feature parameter\
    \ list as part of the NETCONF <hello> message as\n   described in Section 5.6.4\
    \ in [RFC6020].\n <CODE BEGINS> file \"ietf-complex-types@2011-03-15.yang\"\n\
    \ module ietf-complex-types {\n    namespace \"urn:ietf:params:xml:ns:yang:ietf-complex-types\"\
    ;\n    prefix \"ct\";\n    organization\n      \"NETMOD WG\";\n    contact\n \
    \     \"Editor:  Bernd Linowski\n                <bernd.linowski.ext@nsn.com>\n\
    \       Editor:  Mehmet Ersue\n                <mehmet.ersue@nsn.com>\n      \
    \ Editor:  Siarhei Kuryla\n                <s.kuryla@gmail.com>\";\n    description\n\
    \       \"YANG extensions for complex types and typed instance\n       identifiers.\n\
    \       Copyright (c) 2011 IETF Trust and the persons identified as\n       authors\
    \ of the code.  All rights reserved.\n       Redistribution and use in source\
    \ and binary forms, with or\n       without modification, is permitted pursuant\
    \ to, and subject\n       to the license terms contained in, the Simplified BSD\
    \ License\n       set forth in Section 4.c of the IETF Trust's Legal Provisions\n\
    \       Relating to IETF Documents\n       (http://trustee.ietf.org/license-info).\n\
    \       This version of this YANG module is part of RFC 6095; see\n       the\
    \ RFC itself for full legal notices.\";\n        revision 2011-03-15 {\n     \
    \       description \"Initial revision.\";\n        }\n         extension complex-type\
    \ {\n             description \"Defines a complex-type.\";\n             reference\
    \ \"Section 2.2, complex-type Extension Statement\";\n             argument type-identifier\
    \ {\n                 yin-element true;\n             }\n         }\n        \
    \ extension extends {\n             description \"Defines the base type of a complex-type.\"\
    ;\n             reference \"Section 2.5, extends Extension Statement\";\n    \
    \         argument base-type-identifier {\n                 yin-element true;\n\
    \             }\n         }\n         extension abstract {\n             description\
    \ \"Makes the complex-type abstract.\";\n             reference \"Section 2.6,\
    \ abstract Extension Statement\";\n             argument status;\n         }\n\
    \         extension instance {\n             description \"Declares an instance\
    \ of the given\n                  complex type.\";\n             reference \"\
    Section 2.3, instance Extension Statement\";\n             argument ct-instance-identifier\
    \ {\n                 yin-element true;\n             }\n         }\n        \
    \ extension instance-list {\n             description \"Declares a list of instances\
    \ of the given\n                  complex type\";\n             reference \"Section\
    \ 2.4, instance-list Extension Statement\";\n             argument ct-instance-identifier\
    \ {\n                 yin-element true;\n             }\n         }\n        \
    \ extension instance-type {\n             description \"Tells to which type instance\
    \ the instance\n                          identifier refers.\";\n            \
    \ reference \"Section 3.2, instance-type Extension Statement\";\n            \
    \ argument target-type-identifier {\n                 yin-element true;\n    \
    \         }\n         }\n         feature complex-types {\n             description\
    \ \"Indicates that the server supports\n                          complex types\
    \ and instance identifiers.\";\n         }\n    }\n <CODE ENDS>\n"
- title: 2.10.  Example Model for Complex Types
  contents:
  - "2.10.  Example Model for Complex Types\n   The example model below shows how\
    \ complex types can be used to\n   represent physical equipment in a vendor-independent,\
    \ abstract way.\n   It reuses the complex types defined in the physical resource\
    \ model in\n   Section 1.5.1.\n   <CODE BEGINS>\n   module hw {\n      namespace\
    \ \"http://example.com/hw\";\n      prefix \"hw\";\n      import ietf-complex-types\
    \ {prefix \"ct\"; }\n      import udmcore {prefix \"uc\"; }\n      // Holder types\n\
    \      ct:complex-type Slot {\n              ct:extends uc:EquipmentHolder;\n\
    \              leaf slotNumber { type uint16; config false; }\n              \
    \  // ...\n      }\n      ct:complex-type Chassis {\n              ct:extends\
    \ uc:EquipmentHolder;\n              leaf numberOfChassisSlots { type uint32;\
    \ config false; }\n                // ..\n      }\n      // Equipment types\n\
    \      ct:complex-type Card {\n              ct:extends uc:Equipment;\n      \
    \        leaf position { type uint32; mandatory true; }\n                leaf\
    \ slotsRequired {type unit32; }\n      }\n      // Root Element\n       ct:instance\
    \ hardware { type uc:ManagedHardware; }\n   } // hw module\n   <CODE ENDS>\n"
- title: 2.11.  NETCONF Payload Example
  contents:
  - "2.11.  NETCONF Payload Example\n   Following example shows the payload of a reply\
    \ to a NETCONF <get>\n   command.  The actual type of managed hardware instances\
    \ is indicated\n   with the \"cti:type\" elements as required by the type encoding\
    \ rules.\n   The containment hierarchy in the NETCONF XML payload reflects the\n\
    \   containment hierarchy of hardware instances.  This makes filtering\n   based\
    \ on the containment hierarchy possible without having to deal\n   with values\
    \ of leafs of type leafref that represent the tree\n   structure in a flattened\
    \ hierarchy.\n <hardware>\n     <cti:type>uc:BasicObject</cti:type>\n     <distinguishedName>/R-T31/CH-2</distinguishedName>\n\
    \     <globalId>6278279001</globalId>\n     <cti:type>uc:Resource</cti:type>\n\
    \     <cti:type>uc:PhysicalResource</cti:type>\n     <otherIdentifier>Rack R322-1</otherIdentifier>\n\
    \     <serialNumber>R-US-3276279a</serialNumber>\n     <cti:type>uc:Hardware</cti:type>\n\
    \     <cti:type>uc:ManagedHardware</cti:type>\n     <cti:type>hw:EquipmentHolder</cti:type>\n\
    \     <equipmentHolder>\n         <cti:type>uc:BasicObject</cti:type>\n      \
    \   <distinguishedName>/R-T31/CH-2/SL-1</distinguishedName>\n         <globalId>548872003</globalId>\n\
    \         <cti:type>uc:Resource</cti:type>\n         <cti:type>uc:PhysicalResource</cti:type>\n\
    \         <otherIdentifier>CU-Slot</otherIdentifier>\n         <serialNumber>T-K4733890x45</serialNumber>\n\
    \         <cti:type>uc:Hardware</cti:type>\n         <cti:type>uc:ManagedHardware</cti:type>\n\
    \         <cti:type>uc:EquipmentHolder</cti:type>\n         <equipment>\n    \
    \         <cti:type>uc:BasicObject</cti:type>\n             <distinguishedName>/R-T31/CH-2/SL-1/C-3</distinguishedName>\n\
    \             <globalId>89772001</globalId>\n             <cti:type>uc:Resource</cti:type>\n\
    \             <cti:type>uc:PhysicalResource</cti:type>\n             <otherIdentifier>ATM-45252</otherIdentifier>\n\
    \             <serialNumber>A-778911-b</serialNumber>\n             <cti:type>uc:Hardware</cti:type>\n\
    \             <cti:type>uc:ManagedHardware</cti:type>\n             <cti:type>uc:Equipment</cti:type>\n\
    \             <installed>true</installed>\n             <version>A2</version>\n\
    \             <redundancy>1</redundancy>\n             <cti:type>hw:Card</cti:type>\n\
    \             <usedSlots>1</usedSlots>\n         </equipment>\n         <cti:type>hw:Slot</cti:type>\n\
    \         <slotNumber>1</slotNumber>\n     </equipmentHolder>\n     <cti:type>hw:Chassis</cti:type>\n\
    \     <numberOfChassisSlots>6</numberOfChassisSlots>\n     // ...\n </hardware>\n"
- title: 2.12.  Update Rules for Modules Using Complex Types
  contents:
  - "2.12.  Update Rules for Modules Using Complex Types\n   In addition to the module\
    \ update rules specified in Section 10 in\n   [RFC6020], modules that define complex\
    \ types, instances of complex\n   types, and typed instance identifiers must obey\
    \ following rules:\n   o  New complex types MAY be added.\n   o  A new complex\
    \ type MAY extend an existing complex type.\n   o  New data definition statements\
    \ MAY be added to a complex type only\n      if:\n      *  they are not mandatory\
    \ or\n      *  they are not conditionally dependent on a new feature (i.e.,\n\
    \         they do not have an \"if-feature\" statement that refers to a new\n\
    \         feature).\n   o  The type referred to by the instance-type statement\
    \ may be changed\n      to a type that derives from the original type only if\
    \ the original\n      type does not represent configuration data.\n"
- title: 2.13.  Using Complex Types
  contents:
  - "2.13.  Using Complex Types\n   All data nodes defined inside a complex type reside\
    \ in the complex\n   type namespace, which is their parent node namespace.\n"
- title: 2.13.1.  Overriding Complex Type Data Nodes
  contents:
  - "2.13.1.  Overriding Complex Type Data Nodes\n   It is not allowed to override\
    \ a data node inherited from a base type.\n   That is, it is an error if a type\
    \ \"base\" with a leaf named \"foo\" is\n   extended by another complex type (\"\
    derived\") with a leaf named \"foo\"\n   in the same module.  In case they are\
    \ derived in different modules,\n   there are two distinct \"foo\" nodes that\
    \ are mapped to the XML\n   namespaces of the module, where the complex types\
    \ are specified.\n   A complex type that extends a basic complex type may use\
    \ the \"refine\"\n   statement in order to improve an inherited data node.  The\
    \ target\n   node identifier must be qualified by the module prefix to indicate\n\
    \   clearly which inherited node is refined.\n   The following refinements can\
    \ be done:\n   o  A leaf or choice node may have a default value, or a new default\n\
    \      value if it already had one.\n   o  Any node may have a different \"description\"\
    \ or \"reference\" string.\n   o  A leaf, anyxml, or choice node may have a \"\
    mandatory true\"\n      statement.  However, it is not allowed to change from\
    \ \"mandatory\n      true\" to \"mandatory false\".\n   o  A leaf, leaf-list,\
    \ list, container, or anyxml node may have\n      additional \"must\" expressions.\n\
    \   o  A list, leaf-list, instance, or instance-list node may have a\n      \"\
    min-elements\" statement, if the base type does not have one or\n      does not\
    \ have one with a value that is greater than the minimum\n      value of the base\
    \ type.\n   o  A list, leaf-list, instance, or instance-list node may have a\n\
    \      \"max-elements\" statement, if the base type does not have one or\n   \
    \   does not have one with a value that is smaller than the maximum\n      value\
    \ of the base type.\n   It is not allowed to refine complex-type nodes inside\
    \ \"instance\" or\n   \"instance-list\" statements.\n"
- title: 2.13.2.  Augmenting Complex Types
  contents:
  - "2.13.2.  Augmenting Complex Types\n   Augmenting complex types is only allowed\
    \ if a complex type is\n   instantiated in an \"instance\" or \"instance-list\"\
    \ statement.  This\n   confines the effect of the augmentation to the location\
    \ in the schema\n   tree where the augmentation is done.  The argument of the\
    \ \"augment\"\n   statement MUST be in the descendant form (as defined by the\
    \ rule\n   \"descendant-schema-nodeid\" in Section 12 in [RFC6020]).\n      ct:complex-type\
    \ Chassis {\n              ct:extends EquipmentHolder;\n              container\
    \ chassisInfo {\n                     config false;\n                     leaf\
    \ numberOfSlots { type uint16; }\n                     leaf occupiedSlots { type\
    \ uint16; }\n                     leaf height {type unit16;}\n               \
    \      leaf width {type unit16;}\n                }\n      }\n      ct:instance-list\
    \ chassis {\n              type Chassis;\n              augment \"chassisInfo\"\
    \ {\n                     leaf modelId { type string; }\n              }\n   \
    \   }\n   When augmenting a complex type, only the \"container\", \"leaf\", \"\
    list\",\n   \"leaf-list\", \"choice\", \"instance\", \"instance-list\", and \"\
    if-feature\"\n   statements may be used within the \"augment\" statement.  The\
    \ nodes\n   added by the augmentation MUST NOT be mandatory nodes.  One or many\n\
    \   \"augment\" statements may not cause the creation of multiple nodes\n   with\
    \ the same name from the same namespace in the target node.\n   To achieve less-complex\
    \ modeling, this document proposes the\n   augmentation of complex type instances\
    \ without recursion.\n"
- title: 2.13.3.  Controlling the Use of Complex Types
  contents:
  - "2.13.3.  Controlling the Use of Complex Types\n   A server might not want to\
    \ support all complex types defined in a\n   supported module.  This issue can\
    \ be addressed with YANG features as\n   follows:\n   o  Features are defined\
    \ that are used inside complex type definitions\n      (by using \"if-feature\"\
    \ as a substatement) to make them optional.\n      In this case, such complex\
    \ types may only be instantiated if the\n      feature is supported (advertised\
    \ as a capability in the NETCONF\n      <hello> message).\n   o  The \"deviation\"\
    \ statement may be applied to node trees, which are\n      created by \"instance\"\
    \ and \"instance-list\" statements.  In this\n      case, only the substatement\
    \ \"deviate not-supported\" is allowed.\n   o  It is not allowed to apply the\
    \ \"deviation\" statement to node tree\n      elements that may occur because\
    \ of the recursive use of a complex\n      type.  Other forms of deviations (\"\
    deviate add\", \"deviate\n      replace\", \"deviate delete\") are NOT supported\
    \ inside node trees\n      spanned by \"instance\" or \"instance-list\".\n   As\
    \ complex type definitions do not contribute by themselves to the\n   data node\
    \ tree, data node declarations inside complex types cannot be\n   the target of\
    \ deviations.\n   In the example below, client applications are informed that\
    \ the leaf\n   \"occupiedSlots\" is not supported in the top-level chassis.  However,\n\
    \   if a chassis contains another chassis, the contained chassis may\n   support\
    \ the leaf that reports the number of occupied slots.\n     deviation \"/chassis/chassisSpec/occupiedSlots\"\
    \ {\n        deviate not-supported;\n     }\n"
- title: 3.  Typed Instance Identifier
  contents:
  - '3.  Typed Instance Identifier

    '
- title: 3.1.  Definition
  contents:
  - "3.1.  Definition\n   Typed instance identifier relationships are an addition\
    \ to the\n   relationship types already defined in YANG, where the leafref\n \
    \  relationship is location dependent, and the instance-identifier does\n   not\
    \ specify to which type of instances the identifier points.\n   A typed instance\
    \ identifier represents a reference to an instance of\n   a complex type without\
    \ being restricted to a particular location in\n   the containment tree.  This\
    \ is done by using the extension statement\n   \"instance-type\" as a substatement\
    \ of the existing \"type instance\n   identifier\" statement.\n   Typed instance\
    \ identifiers allow referring to instances of complex\n   types that may be located\
    \ anywhere in the schema tree.  The \"type\"\n   statement plays the role of a\
    \ restriction that must be fulfilled by\n   the target node, which is referred\
    \ to with the instance identifier.\n   The target node MUST be of a particular\
    \ complex type, either the type\n   itself or any type that extends this complex\
    \ type.\n"
- title: 3.2.  instance-type Extension Statement
  contents:
  - "3.2.  instance-type Extension Statement\n   The \"instance-type\" extension statement\
    \ specifies the complex type of\n   the instance to which the instance-identifier\
    \ refers.  The referred\n   instance may also instantiate any complex type that\
    \ extends the\n   specified complex type.\n   The instance complex type is identified\
    \ by the single name argument.\n   The referred complex type MUST have a key.\
    \  This extension statement\n   MUST be used as a substatement of the \"type instance-identifier\"\
    \n   statement.  The \"instance-type\" extension statement does not support\n\
    \   any substatements.\n"
- title: 3.3.  Typed Instance Identifier Example
  contents:
  - "3.3.  Typed Instance Identifier Example\n   In the example below, a physical\
    \ link connects an arbitrary number of\n   physical ports.  Here, typed instance\
    \ identifiers are used to denote\n   which \"PhysicalPort\" instances (anywhere\
    \ in the data tree) are\n   connected by a \"PhysicalLink\".\n        // Extended\
    \ version of type Card\n        ct:complex-type Card {\n           ct:extends\
    \ Equipment;\n           leaf usedSlot { type uint16; mandatory true; }\n    \
    \       ct:instance-list port {\n               type PhysicalPort;\n         \
    \  }\n        }\n        ct:complex-type PhysicalPort {\n           ct:extends\
    \ ManagedHardware;\n           leaf portNumber { type int32; mandatory true; }\n\
    \        }\n        ct:complex-type PhysicalLink {\n           ct:extends ManagedHardware;\n\
    \           leaf media { type string; }\n           leaf-list connectedPort {\n\
    \              type instance-identifier {\n                ct:instance-type PhysicalPort;\n\
    \              }\n              min-elements 2;\n           }\n        }\n   Below\
    \ is the XML encoding of an element named \"link\" of type\n   \"PhysicalLink\"\
    :\n       <link>\n           <objectId>FTCL-771</objectId>\n           <media>Fiber</media>\n\
    \           <connectedPort>/hw:hardware[objectId='R-11']\n             /hw:equipment[objectId='AT22']/hw:port[objectId='P12']\n\
    \           </connectedPort>\n           <connectedPort>/hw:hardware[objectId='R-42]\n\
    \             /hw:equipment[objectId='AT30']/hw:port[objectId='P3']\n        \
    \   </connectedPort>\n           <serialNumber>F-7786828</serialNumber>\n    \
    \       <commonName>FibCon 7</commonName>\n       </link>\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   This document registers two URIs in the IETF XML\
    \ registry.  IANA\n   registered the following URIs, according to [RFC3688]:\n\
    \   URI: urn:ietf:params:xml:ns:yang:ietf-complex-types\n   URI: urn:ietf:params:xml:ns:yang:ietf-complex-type-instance\n\
    \   Registrant Contact:\n   Bernd Linowski (bernd.linowski.ext@nsn.com)\n   Mehmet\
    \ Ersue (mehmet.ersue@nsn.com)\n   Siarhei Kuryla (s.kuryla@gmail.com)\n   XML:\
    \ N/A, the requested URIs are XML namespaces.\n   This document registers one\
    \ module name in the \"YANG Module Names\"\n   registry, defined in [RFC6020].\n\
    \      name: ietf-complex-types\n      namespace: urn:ietf:params:xml:ns:yang:ietf-complex-types\n\
    \      prefix: ct\n      RFC: 6095\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The YANG module \"complex-types\" in this memo\
    \ defines YANG extensions\n   for complex types and typed instance identifiers\
    \ as new language\n   statements.\n   Complex types and typed instance identifiers\
    \ themselves do not have\n   any security impact on the Internet.\n   The security\
    \ considerations described throughout [RFC6020] apply here\n   as well.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   The authors would like to thank to Martin Bjorklund,\
    \ Balazs Lengyel,\n   Gerhard Muenz, Dan Romascanu, Juergen Schoenwaelder, and\
    \ Martin\n   Storch for their valuable review and comments on different versions\n\
    \   of the document.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n\
    \              January 2004.\n   [RFC6020]  Bjorklund, M., \"YANG - A Data Modeling\
    \ Language for the\n              Network Configuration Protocol (NETCONF)\",\
    \ RFC 6020,\n              October 2010.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [IPFIXCONF]\n              Muenz, G., Claise,\
    \ B., and P. Aitken, \"Configuration Data\n              Model for IPFIX and PSAMP\"\
    , Work in Progress, March 2011.\n   [Libsmi]   Kuryla, S., \"Libsmi Extension\
    \ for Complex Types\",\n              April 2010, <http://www.ibr.cs.tu-bs.de/svn/libsmi>.\n\
    \   [Pyang]    Bjorklund, M., \"An extensible YANG validator and converter\n \
    \             in python\", October 2010,\n              <http://code.google.com/p/pyang/>.\n\
    \   [Pyang-ct]\n              Kuryla, S., \"Complex type extension for an extensible\
    \ YANG\n              validator and converter in python\", April 2010,\n     \
    \         <http://code.google.com/p/pyang-ct/>.\n   [RFC4133]  Bierman, A. and\
    \ K. McCloghrie, \"Entity MIB (Version 3)\",\n              RFC 4133, August 2005.\n\
    \   [SID_V8]   TeleManagement Forum, \"GB922, Information Framework (SID)\n  \
    \            Solution Suite, Release 8.0\", July 2008, <http://\n            \
    \  www.tmforum.org/DocumentsInformation/\n              GB922InformationFramework/35499/article.html>.\n\
    \   [UDM]      NSN, \"Unified Data Model SID Compliance Statement\",\n       \
    \       May 2010, <http://www.tmforum.org/InformationFramework/\n            \
    \  NokiaSiemensNetworks/8815/home.html>.\n"
- title: Appendix A.  YANG Modules for Physical Network Resource Model and
  contents:
  - "Appendix A.  YANG Modules for Physical Network Resource Model and\n         \
    \    Hardware Entities Model\n   YANG module for the 'Physical Network Resource\
    \ Model':\n   <CODE BEGINS>\n   module udmcore {\n      namespace \"http://example.com/udmcore\"\
    ;\n      prefix \"udm\";\n      import ietf-yang-types {prefix \"yang\";}\n  \
    \    import ietf-complex-types {prefix \"ct\";}\n      ct:complex-type BasicObject\
    \ {\n         ct:abstract true;\n         key \"distinguishedName\";\n       \
    \    leaf globalId {type int64;}\n           leaf distinguishedName {type string;\
    \ mandatory true;}\n      }\n      ct:complex-type ManagedObject {\n         ct:extends\
    \ BasicObject;\n         ct:abstract true;\n         leaf instance {type string;}\n\
    \         leaf objectState {type int32;}\n         leaf release {type string;}\n\
    \      }\n      ct:complex-type Resource {\n               ct:extends ManagedObject;\n\
    \               ct:abstract true;\n         leaf usageState {type int16;}\n  \
    \       leaf managementMethodSupported {type string;}\n         leaf managementMethodCurrent\
    \ {type string;}\n         leaf managementInfo {type string;}\n         leaf managementDomain\
    \ {type string;}\n         leaf version {type string;}\n         leaf entityIdentification\
    \ {type string;}\n         leaf description {type string;}\n         leaf rootEntityType\
    \ {type string;}\n      }\n      ct:complex-type LogicalResource {\n         ct:extends\
    \ Resource;\n         ct:abstract true;\n         leaf lrStatus {type int32;}\n\
    \         leaf serviceState {type int32;}\n         leaf isOperational {type boolean;}\n\
    \      }\n      ct:complex-type PhysicalResource {\n         ct:extends Resource;\n\
    \         ct:abstract true;\n         leaf manufactureDate {type string;}\n  \
    \       leaf otherIdentifier {type string;}\n         leaf powerState {type int32;}\n\
    \         leaf serialNumber {type string;}\n         leaf versionNumber {type\
    \ string;}\n      }\n      ct:complex-type Hardware {\n         ct:extends PhysicalResource;\n\
    \         ct:abstract true;\n         leaf width {type string;}\n         leaf\
    \ height {type string;}\n         leaf depth {type string;}\n         leaf measurementUnits\
    \ {type int32;}\n         leaf weight {type string;}\n         leaf weightUnits\
    \ {type int32;}\n         leaf-list physicalLink {\n            type instance-identifier\
    \ {\n               ct:instance-type PhysicalLink;\n            }\n         }\n\
    \         ct:instance-list containedHardware {\n            ct:instance-type Hardware;\n\
    \         }\n         ct:instance-list physicalConnector {\n            ct:instance-type\
    \ PhysicalConnector;\n         }\n      }\n      ct:complex-type PhysicalLink\
    \ {\n         ct:extends PhysicalResource;\n         leaf isWireless {type boolean;}\n\
    \         leaf currentLength {type string;}\n         leaf maximumLength {type\
    \ string;}\n         leaf mediaType {type int32;}\n         leaf-list hardware\
    \ {\n            type instance-identifier {\n               ct:instance-type Hardware;\n\
    \            }\n         }\n      }\n      ct:complex-type ManagedHardware {\n\
    \         ct:extends Hardware;\n         leaf additionalinfo {type string;}\n\
    \         leaf physicalAlarmReportingEnabled {type boolean;}\n         leaf pyhsicalAlarmStatus\
    \ {type int32;}\n         leaf coolingRequirements {type string;}\n         leaf\
    \ hardwarePurpose {type string;}\n         leaf isPhysicalContainer {type boolean;}\n\
    \      }\n      ct:complex-type AuxiliaryComponent {\n         ct:extends ManagedHardware;\n\
    \         ct:abstract true;\n      }\n      ct:complex-type PhysicalPort {\n \
    \        ct:extends ManagedHardware;\n         leaf portNumber {type int32;}\n\
    \         leaf duplexMode {type int32;}\n         leaf ifType {type int32;}\n\
    \         leaf vendorPortName {type string;}\n      }\n      ct:complex-type PhysicalConnector\
    \ {\n         ct:extends Hardware;\n         leaf location {type string;}\n  \
    \       leaf cableType {type int32;}\n         leaf gender {type int32;}\n   \
    \      leaf inUse {type boolean;}\n         leaf pinDescription {type string;}\n\
    \         leaf typeOfConnector {type int32;}\n         leaf-list sourcePhysicalConnector\
    \ {\n            type instance-identifier {\n               ct:instance-type PhysicalConnector;\n\
    \            }\n         }\n         leaf-list targetPhysicalConnector {\n   \
    \         type instance-identifier {\n               ct:instance-type PhysicalConnector;\n\
    \            }\n         }\n      }\n      ct:complex-type Equipment {\n     \
    \    ct:extends ManagedHardware;\n         leaf installStatus {type int32;}\n\
    \         leaf expectedEquipmentType {type string;}\n         leaf installedEquipmentType\
    \ {type string;}\n         leaf installedVersion {type string;}\n         leaf\
    \ redundancy {type int32;}\n         leaf vendorName {type string;}\n        \
    \ leaf dateOfLastService {type yang:date-and-time;}\n         leaf interchangeability\
    \ {type string;}\n         leaf identificationCode {type string;}\n         ct:instance-list\
    \ equipment {\n            ct:instance-type Equipment;\n         }\n      }\n\
    \      ct:complex-type EquipmentHolder {\n         ct:extends ManagedHardware;\n\
    \         leaf vendorName {type string;}\n         leaf locationName {type string;}\n\
    \         leaf dateOfLastService {type yang:date-and-time;}\n         leaf partNumber\
    \ {type string;}\n         leaf availabilityStatus {type int16;}\n         leaf\
    \ nameFromPlanningSystem {type string;}\n         leaf modelNumber {type string;}\n\
    \         leaf acceptableEquipmentList {type string;}\n         leaf isSolitaryHolder\
    \ {type boolean;}\n         leaf holderStatus {type int16;}\n         leaf interchangeability\
    \ {type string;}\n         leaf equipmentHolderSpecificType {type string; }\n\
    \         leaf position {type string;}\n         leaf atomicCompositeType {type\
    \ int16;}\n         leaf uniquePhysical {type boolean;}\n         leaf physicalDescription\
    \ {type string;}\n         leaf serviceApproach {type string;}\n         leaf\
    \ mountingOptions {type int32;}\n         leaf cableManagementStrategy {type string;}\n\
    \         leaf isSecureHolder {type boolean;}\n         ct:instance-list equipment\
    \ {\n            ct:instance-type Equipment;\n               }\n         ct:instance-list\
    \ equipmentHolder {\n            ct:instance-type EquipmentHolder;\n         }\n\
    \      }\n      // ... other resource complex types ...\n   }\n   <CODE ENDS>\n\
    \   YANG module for the 'Hardware Entities Model':\n   <CODE BEGINS>\n   module\
    \ hardware-entities {\n      namespace \"http://example.com/:hardware-entities\"\
    ;\n      prefix \"hwe\";\n      import ietf-yang-types {prefix \"yang\";}\n  \
    \    import ietf-complex-types {prefix \"ct\";}\n      import udmcore {prefix\
    \ \"uc\";}\n      grouping PhysicalEntityProperties {\n         leaf hardwareRev\
    \ {type string; }\n         leaf firmwareRev {type string; }\n         leaf softwareRev\
    \ {type string; }\n         leaf serialNum {type string; }\n         leaf mfgName\
    \ {type string; }\n         leaf modelName {type string; }\n         leaf alias\
    \ {type string; }\n         leaf ssetID{type string; }\n         leaf isFRU {type\
    \ boolean; }\n         leaf mfgDate {type yang:date-and-time; }\n         leaf-list\
    \ uris {type string; }\n      }\n      // Physical entities representing equipment\n\
    \      ct:complex-type Module {\n         ct:extends uc:Equipment;\n         description\
    \ \"Complex type representing module entries\n            (entPhysicalClass =\
    \ module(9)) in entPhysicalTable\";\n         uses PhysicalEntityProperties;\n\
    \      }\n      ct:complex-type Backplane {\n         ct:extends uc:Equipment;\n\
    \         description \"Complex type representing backplane entries\n        \
    \    (entPhysicalClass = backplane(4)) in entPhysicalTable\";\n         uses PhysicalEntityProperties;\n\
    \      }\n      // Physical entities representing auxiliary hardware components\n\
    \      ct:complex-type PowerSupply {\n         ct:extends uc:AuxiliaryComponent;\n\
    \         description \"Complex type representing power supply entries\n     \
    \       (entPhysicalClass = powerSupply(6)) in entPhysicalTable\";\n         uses\
    \ PhysicalEntityProperties;\n      }\n      ct:complex-type Fan {\n         ct:extends\
    \ uc:AuxiliaryComponent;\n         description \"Complex type representing fan\
    \ entries\n            (entPhysicalClass = fan(7)) in entPhysicalTable\";\n  \
    \       uses PhysicalEntityProperties;\n      }\n      ct:complex-type Sensor\
    \ {\n         ct:extends uc:AuxiliaryComponent;\n         description \"Complex\
    \ type representing sensor entries\n            (entPhysicalClass = sensor(8))\
    \ in entPhysicalTable\";\n         uses PhysicalEntityProperties;\n      }\n \
    \     // Physical entities representing equipment holders\n      ct:complex-type\
    \ Chassis {\n         ct:extends uc:EquipmentHolder;\n         description \"\
    Complex type representing chassis entries\n            (entPhysicalClass = chassis(3))\
    \ in entPhysicalTable\";\n         uses PhysicalEntityProperties;\n      }\n \
    \     ct:complex-type Container {\n         ct:extends uc:EquipmentHolder;\n \
    \        description \"Complex type representing container entries\n         \
    \   (entPhysicalClass = container(5)) in entPhysicalTable\";\n         uses PhysicalEntityProperties;\n\
    \      }\n      ct:complex-type Stack {\n         ct:extends uc:EquipmentHolder;\n\
    \         description \"Complex type representing stack entries\n            (entPhysicalClass\
    \ = stack(11)) in entPhysicalTable\";\n         uses PhysicalEntityProperties;\n\
    \      }\n      // Other kinds of physical entities\n      ct:complex-type Port\
    \ {\n         ct:extends uc:PhysicalPort;\n         description \"Complex type\
    \ representing port entries\n            (entPhysicalClass = port(10)) in entPhysicalTable\"\
    ;\n         uses PhysicalEntityProperties;\n      }\n      ct:complex-type CPU\
    \ {\n         ct:extends uc:Hardware;\n         description \"Complex type representing\
    \ cpu entries\n            (entPhysicalClass = cpu(12)) in entPhysicalTable\"\
    ;\n         uses PhysicalEntityProperties;\n      }\n   }\n   <CODE ENDS>\n"
- title: Appendix B.  Example YANG Module for the IPFIX/PSAMP Model
  contents:
  - 'Appendix B.  Example YANG Module for the IPFIX/PSAMP Model

    '
- title: B.1.  Modeling Improvements for the IPFIX/PSAMP Model with Complex Types
  contents:
  - "B.1.  Modeling Improvements for the IPFIX/PSAMP Model with Complex Types\n  \
    \    and Typed Instance Identifiers\n   The module below is a variation of the\
    \ IPFIX/PSAMP configuration\n   model, which uses complex types and typed instance\
    \ identifiers to\n   model the concept outlined in [IPFIXCONF].\n   When looking\
    \ at the YANG module with complex types and typed instance\n   identifiers, various\
    \ technical improvements on the modeling level\n   become apparent.\n   o  There\
    \ is almost a one-to-one mapping between the domain concepts\n      introduced\
    \ in IPFIX and the complex types in the YANG module.\n   o  All associations between\
    \ the concepts (besides containment) are\n      represented with typed identifiers.\
    \  That avoids having to refer\n      to a particular location in the tree.  Referring\
    \ to a particular\n      in the tree is not mandated by the original model.\n\
    \   o  It is superfluous to represent concept refinement (class\n      inheritance\
    \ in the original model) with containment in the form of\n      quite big choice-statements\
    \ with complex branches.  Instead,\n      concept refinement is realized by complex\
    \ types extending a base\n      complex type.\n   o  It is unnecessary to introduce\
    \ metadata identities and leafs\n      (e.g., \"identity cacheMode\" and \"leaf\
    \ cacheMode\" in \"grouping\n      cacheParameters\") that just serve the purpose\
    \ of indicating which\n      concrete subtype of a generic type (modeled as grouping,\
    \ which\n      contains the union of all features of all subtypes) is actually\n\
    \      represented in the MIB.\n   o  Ruling out illegal use of subtype-specific\
    \ properties (e.g., \"leaf\n      maxFlows\") by using \"when\" statements that\
    \ refer to a subtype\n      discriminator is not necessary (e.g., when \"../cacheMode\
    \ !=\n      'immediate'\").\n   o  Defining properties like the configuration\
    \ status wherever a so\n      called \"parameter grouping\" is used is not necessary.\
    \  Instead,\n      those definitions can be put inside the complex type definition\n\
    \      itself.\n   o  Separating the declaration of the key from the related data\
    \ nodes\n      definitions in a grouping (see use of \"grouping\n      selectorParameters\"\
    ) can be avoided.\n   o  Complex types may be declared as optional features. \
    \ If the type\n      is indicated with an identity (e.g., \"identity immediate\"\
    ), this\n      is not possible, since \"if-feature\" is not allowed as a\n   \
    \   substatement of \"identity\".\n"
- title: B.2.  IPFIX/PSAMP Model with Complex Types and Typed Instance
  contents:
  - "B.2.  IPFIX/PSAMP Model with Complex Types and Typed Instance\n      Identifiers\n"
- title: <CODE BEGINS>
  contents:
  - '<CODE BEGINS>

    '
- title: module ct-ipfix-psamp-example {
  contents:
  - "module ct-ipfix-psamp-example {\n     namespace \"http://example.com/ns/ct-ipfix-psamp-example\"\
    ;\n     prefix ipfix;\n     import ietf-yang-types { prefix yang; }\n     import\
    \ ietf-inet-types { prefix inet; }\n     import ietf-complex-types {prefix \"\
    ct\"; }\n     description \"Example IPFIX/PSAMP Configuration Data Model\n   \
    \    with complex types and typed instance identifiers\";\n     revision 2011-03-15\
    \ {\n        description \"The YANG Module ('YANG Module of the IPFIX/PSAMP\n\
    \          Configuration Data Model') in [IPFIXCONF] modeled with\n          complex\
    \ types and typed instance identifiers.\n          Disclaimer: This example model\
    \ illustrates the use of the\n          language extensions defined in this document\
    \ and does not\n          claim to be an exact reproduction of the original YANG\n\
    \          model referred above. The original description texts have\n       \
    \   been shortened to increase the readability of the model\n          example.\"\
    ;\n    }\n     /*****************************************************************\n\
    \     * Features\n     *****************************************************************/\n\
    \     feature exporter {\n       description \"If supported, the Monitoring Device\
    \ can be used as\n         an Exporter.  Exporting Processes can be configured.\"\
    ;\n     }\n     feature collector {\n       description \"If supported, the Monitoring\
    \ Device can be used as\n         a Collector.  Collecting Processes can be configured.\"\
    ;\n     }\n     feature meter {\n       description \"If supported, Observation\
    \ Points, Selection\n         Processes, and Caches can be configured.\";\n  \
    \   }\n     feature psampSampCountBased {\n       description \"If supported,\
    \ the Monitoring Device supports\n         count-based Sampling...\";\n     }\n\
    \     feature psampSampTimeBased {\n       description \"If supported, the Monitoring\
    \ Device supports\n         time-based Sampling...\";\n     }\n     feature psampSampRandOutOfN\
    \ {\n       description \"If supported, the Monitoring Device supports\n     \
    \    random n-out-of-N Sampling...\";\n     }\n     feature psampSampUniProb {\n\
    \       description \"If supported, the Monitoring Device supports\n         uniform\
    \ probabilistic Sampling...\";\n     }\n     feature psampFilterMatch {\n    \
    \   description \"If supported, the Monitoring Device supports\n         property\
    \ match Filtering...\";\n     }\n     feature psampFilterHash {\n       description\
    \ \"If supported, the Monitoring Device supports\n         hash-based Filtering...\"\
    ;\n     }\n     feature cacheModeImmediate {\n       description \"If supported,\
    \ the Monitoring Device supports\n         Cache Mode 'immediate'.\";\n     }\n\
    \     feature cacheModeTimeout {\n       description \"If supported, the Monitoring\
    \ Device supports\n         Cache Mode 'timeout'.\";\n     }\n     feature cacheModeNatural\
    \ {\n       description \"If supported, the Monitoring Device supports\n     \
    \    Cache Mode 'natural'.\";\n     }\n     feature cacheModePermanent {\n   \
    \    description \"If supported, the Monitoring Device supports\n         Cache\
    \ Mode 'permanent'.\";\n     }\n     feature udpTransport {\n       description\
    \ \"If supported, the Monitoring Device supports UDP\n         as transport protocol.\"\
    ;\n     }\n     feature tcpTransport {\n       description \"If supported, the\
    \ Monitoring Device supports TCP\n         as transport protocol.\";\n     }\n\
    \     feature fileReader {\n       description \"If supported, the Monitoring\
    \ Device supports the\n         configuration of Collecting Processes as File\
    \ Readers.\";\n     }\n     feature fileWriter {\n       description \"If supported,\
    \ the Monitoring Device supports the\n         configuration of Exporting Processes\
    \ as File Writers.\";\n     }\n     /*****************************************************************\n\
    \     * Identities\n     *****************************************************************/\n\
    \     /*** Hash function identities ***/\n     identity hashFunction {\n     \
    \  description \"Base identity for all hash functions...\";\n     }\n     identity\
    \ BOB {\n       base \"hashFunction\";\n       description \"BOB hash function\"\
    ;\n       reference \"RFC 5475, Section 6.2.4.1.\";\n     }\n     identity IPSX\
    \ {\n       base \"hashFunction\";\n       description \"IPSX hash function\"\
    ;\n       reference \"RFC 5475, Section 6.2.4.1.\";\n     }\n     identity CRC\
    \ {\n       base \"hashFunction\";\n       description \"CRC hash function\";\n\
    \       reference \"RFC 5475, Section 6.2.4.1.\";\n     }\n     /*** Export mode\
    \ identities ***/\n     identity exportMode {\n       description \"Base identity\
    \ for different usages of export\n         destinations configured for an Exporting\
    \ Process...\";\n     }\n     identity parallel {\n       base \"exportMode\"\
    ;\n       description \"Parallel export of Data Records to all\n         destinations\
    \ configured for the Exporting Process.\";\n     }\n     identity loadBalancing\
    \ {\n       base \"exportMode\";\n       description \"Load-balancing between\
    \ the different\n         destinations...\";\n     }\n     identity fallback {\n\
    \       base \"exportMode\";\n       description \"Export to the primary destination...\"\
    ;\n     }\n     /*** Options type identities ***/\n     identity optionsType {\n\
    \       description \"Base identity for report types exported\n          with\
    \ options...\";\n     }\n     identity meteringStatistics {\n       base \"optionsType\"\
    ;\n       description \"Metering Process Statistics.\";\n       reference \"RFC\
    \ 5101, Section 4.1.\";\n     }\n     identity meteringReliability {\n       base\
    \ \"optionsType\";\n       description \"Metering Process Reliability Statistics.\"\
    ;\n       reference \"RFC 5101, Section 4.2.\";\n     }\n     identity exportingReliability\
    \ {\n       base \"optionsType\";\n       description \"Exporting Process Reliability\n\
    \         Statistics.\";\n       reference \"RFC 5101, Section 4.3.\";\n     }\n\
    \     identity flowKeys {\n       base \"optionsType\";\n       description \"\
    Flow Keys.\";\n       reference \"RFC 5101, Section 4.4.\";\n     }\n     identity\
    \ selectionSequence {\n       base \"optionsType\";\n       description \"Selection\
    \ Sequence and Selector Reports.\";\n       reference \"RFC 5476, Sections 6.5.1\
    \ and 6.5.2.\";\n     }\n     identity selectionStatistics {\n       base \"optionsType\"\
    ;\n       description \"Selection Sequence Statistics Report.\";\n       reference\
    \ \"RFC 5476, Sections 6.5.3.\";\n     }\n     identity accuracy {\n       base\
    \ \"optionsType\";\n       description \"Accuracy Report.\";\n       reference\
    \ \"RFC 5476, Section 6.5.4.\";\n     }\n     identity reducingRedundancy {\n\
    \       base \"optionsType\";\n       description \"Enables the utilization of\
    \ Options Templates to\n         reduce redundancy in the exported Data Records.\"\
    ;\n       reference \"RFC 5473.\";\n     }\n     identity extendedTypeInformation\
    \ {\n       base \"optionsType\";\n       description \"Export of extended type\
    \ information for\n         enterprise-specific Information Elements used in the\n\
    \         exported Templates.\";\n       reference \"RFC 5610.\";\n     }\n  \
    \   /*****************************************************************\n     *\
    \ Type definitions\n     *****************************************************************/\n\
    \     typedef nameType {\n       type string {\n         length \"1..max\";\n\
    \         pattern \"\\S(.*\\S)?\";\n       }\n       description \"Type for 'name'\
    \ leafs...\";\n     }\n     typedef direction {\n       type enumeration {\n \
    \        enum ingress {\n           description \"This value is used for monitoring\
    \ incoming\n             packets.\";\n         }\n         enum egress {\n   \
    \        description \"This value is used for monitoring outgoing\n          \
    \   packets.\";\n         }\n         enum both {\n           description \"This\
    \ value is used for monitoring incoming and\n             outgoing packets.\"\
    ;\n         }\n       }\n       description \"Direction of packets going through\
    \ an interface or\n         linecard.\";\n     }\n     typedef transportSessionStatus\
    \ {\n       type enumeration {\n         enum inactive {\n           description\
    \ \"This value MUST be used for...\";\n         }\n         enum active {\n  \
    \         description \"This value MUST be used for...\";\n         }\n      \
    \   enum unknown {\n           description \"This value MUST be used if the status...\"\
    ;\n         }\n       }\n       description \"Status of a Transport Session.\"\
    ;\n       reference \"RFC 5815, Section 8 (ipfixTransportSessionStatus).\";\n\
    \     }\n     /*****************************************************************\n\
    \     * Complex types\n     *****************************************************************/\n\
    \     ct:complex-type ObservationPoint {\n       description \"Observation Point\"\
    ;\n       key name;\n       leaf name {\n         type nameType;\n         description\
    \ \"Key of an observation point.\";\n       }\n       leaf observationPointId\
    \ {\n         type uint32;\n         config false;\n         description \"Observation\
    \ Point ID...\";\n         reference \"RFC 5102, Section 5.1.10.\";\n       }\n\
    \       leaf observationDomainId {\n         type uint32;\n         mandatory\
    \ true;\n         description \"The Observation Domain ID associates...\";\n \
    \        reference \"RFC 5101.\";\n       }\n       choice OPLocation {\n    \
    \     mandatory true;\n         description \"Location of the Observation Point.\"\
    ;\n         leaf ifIndex {\n           type uint32;\n           description \"\
    Index of an interface...\";\n           reference \"RFC 2863.\";\n         }\n\
    \         leaf ifName {\n           type string;\n           description \"Name\
    \ of an interface...\";\n           reference \"RFC 2863.\";\n         }\n   \
    \      leaf entPhysicalIndex {\n           type uint32;\n           description\
    \ \"Index of a linecard...\";\n           reference \"RFC 4133.\";\n         }\n\
    \         leaf entPhysicalName {\n           type string;\n           description\
    \ \"Name of a linecard...\";\n           reference \"RFC 4133.\";\n         }\n\
    \       }\n       leaf direction {\n         type direction;\n         default\
    \ both;\n         description \"Direction of packets....\";\n       }\n      \
    \ leaf-list selectionProcess {\n         type instance-identifier { ct:instance-type\
    \ SelectionProcess; }\n         description \"Selection Processes in this list\
    \ process packets\n           in parallel.\";\n       }\n     }\n     ct:complex-type\
    \ Selector {\n       ct:abstract true;\n       description \"Abstract selector\"\
    ;\n       key name;\n       leaf name {\n           type nameType;\n         \
    \  description \"Key of a selector\";\n       }\n       leaf packetsObserved {\n\
    \         type yang:counter64;\n         config false;\n         description \"\
    The number of packets observed ...\";\n         reference \"RFC 5815, Section\
    \ 8\n           (ipfixSelectionProcessStatsPacketsObserved).\";\n       }\n  \
    \     leaf packetsDropped {\n         type yang:counter64;\n         config false;\n\
    \         description \"The total number of packets discarded ...\";\n       \
    \  reference \"RFC 5815, Section 8\n           (ipfixSelectionProcessStatsPacketsDropped).\"\
    ;\n       }\n       leaf selectorDiscontinuityTime {\n         type yang:date-and-time;\n\
    \         config false;\n         description \"Timestamp of the most recent occasion\
    \ at which\n           one or more of the Selector counters suffered a\n     \
    \      discontinuity...\";\n         reference \"RFC 5815, Section 8\n       \
    \    (ipfixSelectionProcessStatsDiscontinuityTime).\";\n       }\n     }\n   \
    \  ct:complex-type SelectAllSelector {\n       ct:extends Selector;\n       description\
    \ \"Method that selects all packets.\";\n     }\n     ct:complex-type SampCountBasedSelector\
    \ {\n           if-feature psampSampCountBased;\n           ct:extends Selector;\n\
    \           description \"Selector applying systematic count-based\n         \
    \    packet sampling to the packet stream.\";\n           reference \"RFC 5475,\
    \ Section 5.1;\n             RFC 5476, Section 6.5.2.1.\";\n           leaf packetInterval\
    \ {\n             type uint32;\n             units packets;\n             mandatory\
    \ true;\n             description \"The number of packets that are consecutively\n\
    \               sampled between gaps of length packetSpace.\n               This\
    \ parameter corresponds to the Information Element\n               samplingPacketInterval.\"\
    ;\n             reference \"RFC 5477, Section 8.2.2.\";\n           }\n      \
    \     leaf packetSpace {\n             type uint32;\n             units packets;\n\
    \             mandatory true;\n             description \"The number of unsampled\
    \ packets between two\n               sampling intervals.\n               This\
    \ parameter corresponds to the Information Element\n               samplingPacketSpace.\"\
    ;\n             reference \"RFC 5477, Section 8.2.3.\";\n           }\n     }\n\
    \     ct:complex-type SampTimeBasedSelector {\n           if-feature psampSampTimeBased;\n\
    \           ct:extends Selector;\n           description \"Selector applying systematic\
    \ time-based\n             packet sampling to the packet stream.\";\n        \
    \   reference \"RFC 5475, Section 5.1;\n             RFC 5476, Section 6.5.2.2.\"\
    ;\n           leaf timeInterval {\n             type uint32;\n             units\
    \ microseconds;\n             mandatory true;\n             description \"The\
    \ time interval in microseconds during\n               which all arriving packets\
    \ are sampled between gaps\n               of length timeSpace.\n            \
    \   This parameter corresponds to the Information Element\n               samplingTimeInterval.\"\
    ;\n             reference \"RFC 5477, Section 8.2.4.\";\n           }\n      \
    \     leaf timeSpace {\n             type uint32;\n             units microseconds;\n\
    \             mandatory true;\n             description \"The time interval in\
    \ microseconds during\n               which no packets are sampled between two\
    \ sampling\n               intervals specified by timeInterval.\n            \
    \   This parameter corresponds to the Information Element\n               samplingTimeInterval.\"\
    ;\n             reference \"RFC 5477, Section 8.2.5.\";\n           }\n     }\n\
    \     ct:complex-type SampRandOutOfNSelector {\n           if-feature psampSampRandOutOfN;\n\
    \           ct:extends Selector;\n           description \"This container contains\
    \ the configuration\n             parameters of a Selector applying n-out-of-N\
    \ packet\n             sampling to the packet stream.\";\n           reference\
    \ \"RFC 5475, Section 5.2.1;\n             RFC 5476, Section 6.5.2.3.\";\n   \
    \        leaf size {\n             type uint32;\n             units packets;\n\
    \             mandatory true;\n             description \"The number of elements\
    \ taken from the parent\n               population.\n               This parameter\
    \ corresponds to the Information Element\n               samplingSize.\";\n  \
    \           reference \"RFC 5477, Section 8.2.6.\";\n           }\n          \
    \ leaf population {\n             type uint32;\n             units packets;\n\
    \             mandatory true;\n             description \"The number of elements\
    \ in the parent\n               population.\n               This parameter corresponds\
    \ to the Information Element\n               samplingPopulation.\";\n        \
    \     reference \"RFC 5477, Section 8.2.7.\";\n           }\n     }\n     ct:complex-type\
    \ SampUniProbSelector {\n           if-feature psampSampUniProb;\n           ct:extends\
    \ Selector;\n           description \"Selector applying uniform probabilistic\n\
    \             packet sampling (with equal probability per packet) to the\n   \
    \          packet stream.\";\n           reference \"RFC 5475, Section 5.2.2.1;\n\
    \             RFC 5476, Section 6.5.2.4.\";\n           leaf probability {\n \
    \            type decimal64 {\n               fraction-digits 18;\n          \
    \     range \"0..1\";\n             }\n             mandatory true;\n        \
    \     description \"Probability that a packet is sampled,\n               expressed\
    \ as a value between 0 and 1.  The probability\n               is equal for every\
    \ packet.\n               This parameter corresponds to the Information Element\n\
    \               samplingProbability.\";\n             reference \"RFC 5477, Section\
    \ 8.2.8.\";\n           }\n     }\n     ct:complex-type FilterMatchSelector {\n\
    \           if-feature psampFilterMatch;\n           ct:extends Selector;\n  \
    \         description \"This container contains the configuration\n          \
    \   parameters of a Selector applying property match filtering\n             to\
    \ the packet stream.\";\n           reference \"RFC 5475, Section 6.1;\n     \
    \        RFC 5476, Section 6.5.2.5.\";\n           choice nameOrId {\n       \
    \      mandatory true;\n             description \"The field to be matched is\
    \ specified by\n               either the name or the ID of the Information\n\
    \               Element.\";\n             leaf ieName {\n               type string;\n\
    \               description \"Name of the Information Element.\";\n          \
    \   }\n             leaf ieId {\n               type uint16 {\n              \
    \   range \"1..32767\" {\n                   description \"Valid range of Information\
    \ Element\n                       identifiers.\";\n                   reference\
    \ \"RFC 5102, Section 4.\";\n                 }\n               }\n          \
    \     description \"ID of the Information Element.\";\n             }\n      \
    \     }\n           leaf ieEnterpriseNumber {\n             type uint32;\n   \
    \          description \"If present, ... \";\n           }\n           leaf value\
    \ {\n             type string;\n             mandatory true;\n             description\
    \ \"Matching value of the Information Element.\";\n           }\n     }\n    \
    \ ct:complex-type FilterHashSelector {\n           if-feature psampFilterHash;\n\
    \           ct:extends Selector;\n           description \"This container contains\
    \ the configuration\n             parameters of a Selector applying hash-based\
    \ filtering\n             to the packet stream.\";\n           reference \"RFC\
    \ 5475, Section 6.2;\n             RFC 5476, Section 6.5.2.6.\";\n           leaf\
    \ hashFunction {\n             type identityref {\n               base \"hashFunction\"\
    ;\n             }\n             default BOB;\n             description \"Hash\
    \ function to be applied.  According to\n               RFC 5475, Section 6.2.4.1,\
    \ BOB hash function must be\n               used in order to be compliant with\
    \ PSAMP.\";\n           }\n           leaf ipPayloadOffset {\n             type\
    \ uint64;\n             units octets;\n             default 0;\n             description\
    \ \"IP payload offset ... \";\n             reference \"RFC 5477, Section 8.3.2.\"\
    ;\n           }\n           leaf ipPayloadSize {\n             type uint64;\n\
    \             units octets;\n             default 8;\n             description\
    \ \"Number of IP payload bytes ... \";\n             reference \"RFC 5477, Section\
    \ 8.3.3.\";\n           }\n           leaf digestOutput {\n             type boolean;\n\
    \             default false;\n             description \"If true, the output ...\
    \ \";\n             reference \"RFC 5477, Section 8.3.8.\";\n           }\n  \
    \         leaf initializerValue {\n             type uint64;\n             description\
    \ \"Initializer value to the hash function.\n               If not configured\
    \ by the user, the Monitoring Device\n               arbitrarily chooses an initializer\
    \ value.\";\n             reference \"RFC 5477, Section 8.3.9.\";\n          \
    \ }\n           list selectedRange {\n             key name;\n             min-elements\
    \ 1;\n             description \"List of hash function return ranges for\n   \
    \            which packets are selected.\";\n             leaf name {\n      \
    \         type nameType;\n               description \"Key of this list.\";\n\
    \             }\n             leaf min {\n               type uint64;\n      \
    \         description \"Beginning of the hash function's selected\n          \
    \       range.\n                 This parameter corresponds to the Information\
    \ Element\n                 hashSelectedRangeMin.\";\n               reference\
    \ \"RFC 5477, Section 8.3.6.\";\n             }\n             leaf max {\n   \
    \            type uint64;\n               description \"End of the hash function's\
    \ selected range.\n                 This parameter corresponds to the Information\
    \ Element\n                 hashSelectedRangeMax.\";\n               reference\
    \ \"RFC 5477, Section 8.3.7.\";\n             }\n           }\n     }\n     ct:complex-type\
    \ Cache {\n       ct:abstract true;\n       description \"Cache of a Monitoring\
    \ Device.\";\n       key name;\n       leaf name {\n         type nameType;\n\
    \         description \"Key of a cache\";\n       }\n       leaf-list exportingProcess\
    \ {\n         type leafref { path \"/ipfix/exportingProcess/name\"; }\n      \
    \   description \"Records are exported by all Exporting Processes\n          \
    \ in the list.\";\n       }\n       description \"Configuration and state parameters\
    \ of a Cache.\";\n       container cacheLayout {\n         description \"Cache\
    \ Layout.\";\n         list cacheField {\n           key name;\n           min-elements\
    \ 1;\n           description \"List of fields in the Cache Layout.\";\n      \
    \     leaf name {\n             type nameType;\n             description \"Key\
    \ of this list.\";\n           }\n           choice nameOrId {\n             mandatory\
    \ true;\n             description \"Name or ID of the Information Element.\";\n\
    \             reference \"RFC 5102.\";\n             leaf ieName {\n         \
    \      type string;\n               description \"Name of the Information Element.\"\
    ;\n             }\n             leaf ieId {\n               type uint16 {\n  \
    \               range \"1..32767\" {\n                   description \"Valid range\
    \ of Information Element\n                       identifiers.\";\n           \
    \        reference \"RFC 5102, Section 4.\";\n                 }\n           \
    \    }\n               description \"ID of the Information Element.\";\n     \
    \        }\n           }\n           leaf ieLength {\n             type uint16;\n\
    \             units octets;\n             description \"Length of the field ...\
    \ \";\n             reference \"RFC 5101, Section 6.2; RFC 5102.\";\n        \
    \   }\n           leaf ieEnterpriseNumber {\n             type uint32;\n     \
    \        description \"If present, the Information Element is\n              \
    \ enterprise-specific. ... \";\n             reference \"RFC 5101; RFC 5102.\"\
    ;\n           }\n           leaf isFlowKey {\n             when \"(../../../cacheMode\
    \ != 'immediate')\n               and\n               ((count(../ieEnterpriseNumber)\
    \ = 0)\n               or\n               (../ieEnterpriseNumber != 29305))\"\
    \ {\n               description \"This parameter is not available\n          \
    \       for Reverse Information Elements (which have\n                 enterprise\
    \ number 29305) or if the Cache Mode\n                 is 'immediate'.\";\n  \
    \           }\n             type empty;\n             description \"If present,\
    \ this is a flow key.\";\n           }\n         }\n       }\n       leaf dataRecords\
    \ {\n         type yang:counter64;\n         units \"Data Records\";\n       \
    \  config false;\n         description \"The number of Data Records generated\
    \ ... \";\n         reference \"RFC 5815, Section 8\n           (ipfixMeteringProcessCacheDataRecords).\"\
    ;\n       }\n       leaf cacheDiscontinuityTime {\n         type yang:date-and-time;\n\
    \         config false;\n         description \"Timestamp of the ... \";\n   \
    \      reference \"RFC 5815, Section 8\n           (ipfixMeteringProcessCacheDiscontinuityTime).\"\
    ;\n       }\n     }\n     ct:complex-type ImmediateCache {\n       if-feature\
    \ cacheModeImmediate;\n       ct:extends Cache;\n     }\n     ct:complex-type\
    \ NonImmediateCache {\n       ct:abstract true;\n       ct:extends Cache;\n  \
    \     leaf maxFlows {\n         type uint32;\n         units flows;\n        \
    \ description \"This parameter configures the maximum number of\n           Flows\
    \ in the Cache ... \";\n       }\n       leaf activeFlows {\n         type yang:gauge32;\n\
    \         units flows;\n         config false;\n         description \"The number\
    \ of Flows currently active in this\n           Cache.\";\n         reference\
    \ \"RFC 5815, Section 8\n           (ipfixMeteringProcessCacheActiveFlows).\"\
    ;\n       }\n       leaf unusedCacheEntries {\n         type yang:gauge32;\n \
    \        units flows;\n         config false;\n         description \"The number\
    \ of unused Cache entries in this\n           Cache.\";\n         reference \"\
    RFC 5815, Section 8\n           (ipfixMeteringProcessCacheUnusedCacheEntries).\"\
    ;\n       }\n    }\n    ct:complex-type NonPermanentCache {\n      ct:abstract\
    \ true;\n      ct:extends NonImmediateCache;\n      leaf activeTimeout {\n   \
    \     type uint32;\n        units milliseconds;\n        description \"This parameter\
    \ configures the time in\n          milliseconds after which ... \";\n      }\n\
    \      leaf inactiveTimeout {\n        type uint32;\n        units milliseconds;\n\
    \        description \"This parameter configures the time in\n          milliseconds\
    \ after which ... \";\n      }\n    }\n    ct:complex-type NaturalCache {\n  \
    \    if-feature cacheModeNatural;\n      ct:extends NonPermanentCache;\n    }\n\
    \    ct:complex-type TimeoutCache {\n      if-feature cacheModeTimeout;\n    \
    \  ct:extends NonPermanentCache;\n    }\n    ct:complex-type PermanentCache {\n\
    \      if-feature cacheModePermanent;\n      ct:extends NonImmediateCache;\n \
    \     leaf exportInterval {\n        type uint32;\n        units milliseconds;\n\
    \        description \"This parameter configures the interval for\n          periodical\
    \ export of Flow Records in milliseconds.\n          If not configured by the\
    \ user, the Monitoring Device sets\n          this parameter.\";\n       }\n \
    \   }\n    ct:complex-type ExportDestination {\n      ct:abstract true;\n    \
    \  description \"Abstract export destination.\";\n      key name;\n      leaf\
    \ name {\n        type nameType;\n        description \"Key of an export destination.\"\
    ;\n      }\n    }\n    ct:complex-type IpDestination {\n      ct:abstract true;\n\
    \      ct:extends ExportDestination;\n      description \"IP export destination.\"\
    ;\n      leaf ipfixVersion {\n         type uint16;\n         default 10;\n  \
    \       description \"IPFIX version number.\";\n       }\n       leaf destinationPort\
    \ {\n         type inet:port-number;\n         description \"If not configured\
    \ by the user, the Monitoring\n           Device uses the default port number\
    \ for IPFIX, which is\n           4739 without Transport Layer Security, and 4740\
    \ if Transport\n           Layer Security is activated.\";\n       }\n       choice\
    \ indexOrName {\n         description \"Index or name of the interface ... \"\
    ;\n         reference \"RFC 2863.\";\n         leaf ifIndex {\n           type\
    \ uint32;\n           description \"Index of an interface as stored in the ifTable\n\
    \             of IF-MIB.\";\n           reference \"RFC 2863.\";\n         }\n\
    \         leaf ifName {\n           type string;\n           description \"Name\
    \ of an interface as stored in the ifTable\n             of IF-MIB.\";\n     \
    \      reference \"RFC 2863.\";\n         }\n       }\n       leaf sendBufferSize\
    \ {\n         type uint32;\n         units bytes;\n         description \"Size\
    \ of the socket send buffer.\n           If not configured by the user, this parameter\
    \ is set by\n           the Monitoring Device.\";\n       }\n       leaf rateLimit\
    \ {\n         type uint32;\n         units \"bytes per second\";\n         description\
    \ \"Maximum number of bytes per second ... \";\n         reference \"RFC 5476,\
    \ Section 6.3\";\n       }\n       container transportLayerSecurity {\n      \
    \   presence \"If transportLayerSecurity is present, DTLS is\n           enabled\
    \ if the transport protocol is SCTP or UDP, and TLS\n           is enabled if\
    \ the transport protocol is TCP.\";\n         description \"Transport Layer Security\
    \ configuration.\";\n         uses transportLayerSecurityParameters;\n       }\n\
    \       container transportSession {\n         config false;\n         description\
    \ \"State parameters of the Transport Session\n           directed to the given\
    \ destination.\";\n         uses transportSessionParameters;\n       }\n    }\n\
    \     ct:complex-type SctpExporter {\n       ct:extends IpDestination;\n     \
    \  description \"SCTP exporter.\";\n       leaf-list sourceIPAddress {\n     \
    \    type inet:ip-address;\n         description \"List of source IP addresses\
    \ used ... \";\n         reference \"RFC 4960, Section 6.4\n           (Multi-Homed\
    \ SCTP Endpoints).\";\n       }\n       leaf-list destinationIPAddress {\n   \
    \      type inet:ip-address;\n         min-elements 1;\n         description \"\
    One or multiple IP addresses ... \";\n         reference \"RFC 4960, Section 6.4\n\
    \           (Multi-Homed SCTP Endpoints).\";\n       }\n       leaf timedReliability\
    \ {\n         type uint32;\n         units milliseconds;\n         default 0;\n\
    \         description \"Lifetime in milliseconds ... \";\n         reference \"\
    RFC 3758; RFC 4960.\";\n       }\n     }\n     ct:complex-type UdpExporter {\n\
    \       ct:extends IpDestination;\n       if-feature udpTransport;\n       description\
    \ \"UDP parameters.\";\n       leaf sourceIPAddress {\n         type inet:ip-address;\n\
    \         description \"Source IP address used by the Exporting\n            Process\
    \ ...\";\n       }\n       leaf destinationIPAddress {\n         type inet:ip-address;\n\
    \         mandatory true;\n         description \"IP address of the Collection\
    \ Process to which\n           IPFIX Messages are sent.\";\n       }\n       leaf\
    \ maxPacketSize {\n         type uint16;\n         units octets;\n         description\
    \ \"This parameter specifies the maximum size of\n           IP packets ... \"\
    ;\n       }\n       leaf templateRefreshTimeout {\n         type uint32;\n   \
    \      units seconds;\n         default 600;\n         description \"Sets time\
    \ after which Templates are resent in the\n           UDP Transport Session. ...\
    \ \";\n         reference \"RFC 5101, Section 10.3.6; RFC 5815, Section 8\n  \
    \         (ipfixTransportSessionTemplateRefreshTimeout).\";\n       }\n      \
    \ leaf optionsTemplateRefreshTimeout {\n         type uint32;\n         units\
    \ seconds;\n         default 600;\n         description \"Sets time after which\
    \ Options Templates are\n           resent in the UDP Transport Session. ... \"\
    ;\n         reference \"RFC 5101, Section 10.3.6; RFC 5815, Section 8\n      \
    \     (ipfixTransportSessionOptionsTemplateRefreshTimeout).\";\n       }\n   \
    \    leaf templateRefreshPacket {\n         type uint32;\n         units \"IPFIX\
    \ Messages\";\n         description \"Sets number of IPFIX Messages after which\n\
    \           Templates are resent in the UDP Transport Session. ... \";\n     \
    \    reference \"RFC 5101, Section 10.3.6; RFC 5815, Section 8\n           (ipfixTransportSessionTemplateRefreshPacket).\"\
    ;\n       }\n       leaf optionsTemplateRefreshPacket {\n         type uint32;\n\
    \         units \"IPFIX Messages\";\n         description \"Sets number of IPFIX\
    \ Messages after which\n           Options Templates are resent in the UDP Transport\
    \ Session\n           protocol. ... \";\n         reference \"RFC 5101, Section\
    \ 10.3.6; RFC 5815, Section 8\n           (ipfixTransportSessionOptionsTemplateRefreshPacket).\"\
    ;\n       }\n    }\n     ct:complex-type TcpExporter {\n       ct:extends IpDestination;\n\
    \       if-feature tcpTransport;\n       description \"TCP exporter\";\n     \
    \  leaf sourceIPAddress {\n         type inet:ip-address;\n         description\
    \ \"Source IP address used by the Exporting\n           Process...\";\n      \
    \ }\n       leaf destinationIPAddress {\n         type inet:ip-address;\n    \
    \     mandatory true;\n         description \"IP address of the Collection Process\
    \ to which\n           IPFIX Messages are sent.\";\n       }\n     }\n     ct:complex-type\
    \ FileWriter {\n       ct:extends ExportDestination;\n       if-feature fileWriter;\n\
    \       description \"File Writer.\";\n       leaf ipfixVersion {\n         type\
    \ uint16;\n         default 10;\n         description \"IPFIX version number.\"\
    ;\n       }\n       leaf file {\n         type inet:uri;\n         mandatory true;\n\
    \         description \"URI specifying the location of the file.\";\n       }\n\
    \       leaf bytes {\n         type yang:counter64;\n         units octets;\n\
    \         config false;\n         description \"The number of bytes written by\
    \ the File\n           Writer...\";\n       }\n       leaf messages {\n      \
    \   type yang:counter64;\n         units \"IPFIX Messages\";\n         config\
    \ false;\n         description \"The number of IPFIX Messages written by the File\n\
    \           Writer. ... \";\n       }\n       leaf discardedMessages {\n     \
    \    type yang:counter64;\n         units \"IPFIX Messages\";\n         config\
    \ false;\n         description \"The number of IPFIX Messages that could not be\n\
    \           written by the File Writer ... \";\n       }\n       leaf records\
    \ {\n         type yang:counter64;\n         units \"Data Records\";\n       \
    \  config false;\n         description \"The number of Data Records written by\
    \ the File\n           Writer. ... \";\n       }\n       leaf templates {\n  \
    \       type yang:counter32;\n         units \"Templates\";\n         config false;\n\
    \         description \"The number of Template Records (excluding\n          \
    \ Options Template Records) written by the File Writer.\n           ... \";\n\
    \       }\n       leaf optionsTemplates {\n         type yang:counter32;\n   \
    \      units \"Options Templates\";\n         config false;\n         description\
    \ \"The number of Options Template Records written\n           by the File Writer.\
    \ ... \";\n       }\n       leaf fileWriterDiscontinuityTime {\n         type\
    \ yang:date-and-time;\n         config false;\n         description \"Timestamp\
    \ of the most recent occasion at which\n           one or more File Writer counters\
    \ suffered a discontinuity.\n           ... \";\n       }\n       list template\
    \ {\n         config false;\n         description \"This list contains the Templates\
    \ and Options\n           Templates that have been written by the File Reader.\
    \ ... \";\n         uses templateParameters;\n       }\n     }\n     ct:complex-type\
    \ ExportingProcess {\n       if-feature exporter;\n       description \"Exporting\
    \ Process of the Monitoring Device.\";\n       key name;\n       leaf name {\n\
    \         type nameType;\n         description \"Key of this list.\";\n      \
    \ }\n       leaf exportMode {\n         type identityref {\n           base \"\
    exportMode\";\n         }\n         default parallel;\n         description \"\
    This parameter determines to which configured\n           destination(s) the incoming\
    \ Data Records are exported.\";\n       }\n       ct:instance-list destination\
    \ {\n         ct:instance-type ExportDestination;\n         min-elements 1;\n\
    \         description \"Export destinations.\";\n       }\n       list options\
    \ {\n         key name;\n         description \"List of options reported by the\
    \ Exporting\n           Process.\";\n         leaf name {\n           type nameType;\n\
    \           description \"Key of this list.\";\n         }\n         leaf optionsType\
    \ {\n           type identityref {\n             base \"optionsType\";\n     \
    \      }\n           mandatory true;\n           description \"Type of the exported\
    \ options data.\";\n         }\n         leaf optionsTimeout {\n           type\
    \ uint32;\n           units milliseconds;\n           description \"Time interval\
    \ for periodic export of the options\n             data. ... \";\n         }\n\
    \       }\n     }\n     ct:complex-type CollectingProcess {\n       description\
    \ \"A Collecting Process.\";\n       key name;\n       leaf name {\n         type\
    \ nameType;\n         description \"Key of a collecing process.\";\n       }\n\
    \       ct:instance-list sctpCollector {\n         ct:instance-type SctpCollector;\n\
    \         description \"List of SCTP receivers (sockets) on which the\n      \
    \     Collecting Process receives IPFIX Messages.\";\n       }\n       ct:instance-list\
    \ udpCollector {\n         if-feature udpTransport;\n         ct:instance-type\
    \ UdpCollector;\n         description \"List of UDP receivers (sockets) on which\
    \ the\n           Collecting Process receives IPFIX Messages.\";\n       }\n \
    \      ct:instance-list tcpCollector {\n         if-feature tcpTransport;\n  \
    \       ct:instance-type TcpCollector;\n         description \"List of TCP receivers\
    \ (sockets) on which the\n           Collecting Process receives IPFIX Messages.\"\
    ;\n       }\n       ct:instance-list fileReader {\n         if-feature fileReader;\n\
    \         ct:instance-type FileReader;\n         description \"List of File Readers\
    \ from which the Collecting\n           Process reads IPFIX Messages.\";\n   \
    \    }\n       leaf-list exportingProcess {\n         type instance-identifier\
    \ { ct:instance-type ExportingProcess; }\n         description \"Export of received\
    \ records without any\n           modifications.  Records are processed by all\
    \ Exporting\n           Processes in the list.\";\n       }\n     }\n     ct:complex-type\
    \ Collector {\n         ct:abstract true;\n         description \"Abstract collector.\"\
    ;\n         key name;\n         leaf name {\n           type nameType;\n     \
    \      description \"Key of collectors\";\n         }\n     }\n     ct:complex-type\
    \ IpCollector {\n       ct:abstract true;\n       ct:extends Collector;\n    \
    \   description \"Collector for IP transport protocols.\";\n       leaf localPort\
    \ {\n         type inet:port-number;\n         description \"If not configured,\
    \ the Monitoring Device uses the\n           default port number for IPFIX, which\
    \ is 4739 without\n           Transport Layer Security, and 4740 if Transport\
    \ Layer\n           Security is activated.\";\n       }\n       container transportLayerSecurity\
    \ {\n         presence \"If transportLayerSecurity is present, DTLS is enabled\n\
    \           if the transport protocol is SCTP or UDP, and TLS is enabled\n   \
    \        if the transport protocol is TCP.\";\n         description \"Transport\
    \ Layer Security configuration.\";\n         uses transportLayerSecurityParameters;\n\
    \       }\n       list transportSession {\n         config false;\n         description\
    \ \"This list contains the currently established\n           Transport Sessions\
    \ terminating at the given socket.\";\n         uses transportSessionParameters;\n\
    \       }\n     }\n     ct:complex-type SctpCollector {\n       ct:extends IpCollector;\n\
    \       description \"Collector listening on an SCTP socket\";\n       leaf-list\
    \ localIPAddress {\n         type inet:ip-address;\n         description \"List\
    \ of local IP addresses ... \";\n         reference \"RFC 4960, Section 6.4\n\
    \           (Multi-Homed SCTP Endpoints).\";\n       }\n     }\n     ct:complex-type\
    \ UdpCollector {\n       ct:extends IpCollector;\n       description \"Parameters\
    \ of a listening UDP socket at a\n         Collecting Process.\";\n       leaf-list\
    \ localIPAddress {\n         type inet:ip-address;\n         description \"List\
    \ of local IP addresses on which the Collecting\n           Process listens for\
    \ IPFIX Messages.\";\n       }\n       leaf templateLifeTime {\n         type\
    \ uint32;\n         units seconds;\n         default 1800;\n         description\
    \ \"Sets the lifetime of Templates for all UDP\n           Transport Sessions\
    \ ... \";\n         reference \"RFC 5101, Section 10.3.7; RFC 5815, Section 8\n\
    \           (ipfixTransportSessionTemplateRefreshTimeout).\";\n       }\n    \
    \   leaf optionsTemplateLifeTime {\n         type uint32;\n         units seconds;\n\
    \         default 1800;\n         description \"Sets the lifetime of Options Templates\
    \ for all\n           UDP Transport Sessions terminating at this UDP socket.\n\
    \           ... \";\n         reference \"RFC 5101, Section 10.3.7; RFC 5815,\
    \ Section 8\n           (ipfixTransportSessionOptionsTemplateRefreshTimeout).\"\
    ;\n       }\n       leaf templateLifePacket {\n         type uint32;\n       \
    \  units \"IPFIX Messages\";\n         description \"If this parameter is configured,\
    \ Templates\n           defined in a UDP Transport Session become invalid if ...\"\
    ;\n         reference \"RFC 5101, Section 10.3.7; RFC 5815, Section 8\n      \
    \     (ipfixTransportSessionTemplateRefreshPacket).\";\n       }\n       leaf\
    \ optionsTemplateLifePacket {\n         type uint32;\n         units \"IPFIX Messages\"\
    ;\n         description \"If this parameter is configured, Options\n         \
    \  Templates defined in a UDP Transport Session become\n           invalid if\
    \ ...\";\n         reference \"RFC 5101, Section 10.3.7; RFC 5815, Section 8\n\
    \           (ipfixTransportSessionOptionsTemplateRefreshPacket).\";\n       }\n\
    \     }\n     ct:complex-type TcpCollector {\n       ct:extends IpCollector;\n\
    \       description \"Collector listening on a TCP socket.\";\n       leaf-list\
    \ localIPAddress {\n         type inet:ip-address;\n         description \"List\
    \ of local IP addresses on which the Collecting\n           Process listens for\
    \ IPFIX Messages.\";\n       }\n     }\n     ct:complex-type FileReader {\n  \
    \     ct:extends Collector;\n       description \"File Reading collector.\";\n\
    \       leaf file {\n         type inet:uri;\n         mandatory true;\n     \
    \    description \"URI specifying the location of the file.\";\n       }\n   \
    \    leaf bytes {\n         type yang:counter64;\n         units octets;\n   \
    \      config false;\n         description \"The number of bytes read by the File\
    \ Reader.\n           ... \";\n       }\n       leaf messages {\n         type\
    \ yang:counter64;\n         units \"IPFIX Messages\";\n         config false;\n\
    \         description \"The number of IPFIX Messages read by the File\n      \
    \     Reader. ... \";\n       }\n       leaf records {\n         type yang:counter64;\n\
    \         units \"Data Records\";\n         config false;\n         description\
    \ \"The number of Data Records read by the File\n           Reader. ... \";\n\
    \       }\n       leaf templates {\n         type yang:counter32;\n         units\
    \ \"Templates\";\n         config false;\n         description \"The number of\
    \ Template Records (excluding\n           Options Template Records) read by the\
    \ File Reader. ...\";\n       }\n       leaf optionsTemplates {\n         type\
    \ yang:counter32;\n         units \"Options Templates\";\n         config false;\n\
    \         description \"The number of Options Template Records read by\n     \
    \      the File Reader. ... \";\n       }\n       leaf fileReaderDiscontinuityTime\
    \ {\n         type yang:date-and-time;\n         config false;\n         description\
    \ \"Timestamp of the most recent occasion ... \";\n       }\n       list template\
    \ {\n         config false;\n         description \"This list contains the Templates\
    \ and Options\n           Templates that have been read by the File Reader.\n\
    \           Withdrawn or invalidated (Options) Templates MUST be removed\n   \
    \        from this list.\";\n         uses templateParameters;\n       }\n   \
    \  }\n     ct:complex-type SelectionProcess {\n         description \"Selection\
    \ Process\";\n         key name;\n         leaf name {\n           type nameType;\n\
    \           description \"Key of a selection process.\";\n         }\n       \
    \  ct:instance-list selector {\n           ct:instance-type Selector;\n      \
    \     min-elements 1;\n           ordered-by user;\n           description \"\
    List of Selectors that define the action of the\n             Selection Process\
    \ on a single packet.  The Selectors are\n             serially invoked in the\
    \ same order as they appear in this\n             list.\";\n         }\n     \
    \    list selectionSequence {\n           config false;\n           description\
    \ \"This list contains the Selection Sequence IDs\n             which are assigned\
    \ by the Monitoring Device ... \";\n           reference \"RFC 5476.\";\n    \
    \       leaf observationDomainId {\n             type uint32;\n             description\
    \ \"Observation Domain ID for which the\n               Selection Sequence ID\
    \ is assigned.\";\n           }\n           leaf selectionSequenceId {\n     \
    \        type uint64;\n             description \"Selection Sequence ID used in\
    \ the Selection\n               Sequence (Statistics) Report Interpretation.\"\
    ;\n           }\n         }\n         leaf cache {\n           type instance-identifier\
    \ { ct:instance-type Cache; }\n           description \"Cache which receives the\
    \ output of the\n             Selection Process.\";\n         }\n       }\n  \
    \   /*****************************************************************\n     *\
    \ Groupings\n     *****************************************************************/\n\
    \     grouping transportLayerSecurityParameters {\n       description \"Transport\
    \ layer security parameters.\";\n       leaf-list localCertificationAuthorityDN\
    \ {\n         type string;\n         description \"Distinguished names of certification\
    \ authorities\n           whose certificates may be used to identify the local\n\
    \           endpoint.\";\n       }\n       leaf-list localSubjectDN {\n      \
    \   type string;\n         description \"Distinguished names that may be used\
    \ in the\n           certificates to identify the local endpoint.\";\n       }\n\
    \       leaf-list localSubjectFQDN {\n         type inet:domain-name;\n      \
    \   description \"Fully qualified domain names that may be used to\n         \
    \  in the certificates to identify the local endpoint.\";\n       }\n       leaf-list\
    \ remoteCertificationAuthorityDN {\n         type string;\n         description\
    \ \"Distinguished names of certification authorities\n           whose certificates\
    \ are accepted to authorize remote\n           endpoints.\";\n       }\n     \
    \  leaf-list remoteSubjectDN {\n         type string;\n         description \"\
    Distinguished names that are accepted in\n           certificates to authorize\
    \ remote endpoints.\";\n       }\n       leaf-list remoteSubjectFQDN {\n     \
    \    type inet:domain-name;\n         description \"Fully qualified domain names\
    \ that are accepted in\n           certificates to authorize remote endpoints.\"\
    ;\n       }\n     }\n     grouping templateParameters {\n       description \"\
    State parameters of a Template used by an Exporting\n         Process or received\
    \ by a Collecting Process ... \";\n       reference \"RFC 5101; RFC 5815, Section\
    \ 8 (ipfixTemplateEntry,\n         ipfixTemplateDefinitionEntry, ipfixTemplateStatsEntry)\"\
    ;\n       leaf observationDomainId {\n         type uint32;\n         description\
    \ \"The ID of the Observation Domain for which this\n           Template is defined.\"\
    ;\n         reference \"RFC 5815, Section 8\n           (ipfixTemplateObservationDomainId).\"\
    ;\n       }\n       leaf templateId {\n         type uint16 {\n           range\
    \ \"256..65535\" {\n             description \"Valid range of Template Ids.\"\
    ;\n             reference \"RFC 5101\";\n           }\n         }\n         description\
    \ \"This number indicates the Template Id in the IPFIX\n           message.\"\
    ;\n         reference \"RFC 5815, Section 8 (ipfixTemplateId).\";\n       }\n\
    \       leaf setId {\n         type uint16;\n         description \"This number\
    \ indicates the Set Id of the Template.\n           ... \";\n         reference\
    \ \"RFC 5815, Section 8 (ipfixTemplateSetId).\";\n       }\n       leaf accessTime\
    \ {\n         type yang:date-and-time;\n         description \"Used for Exporting\
    \ Processes, ... \";\n         reference \"RFC 5815, Section 8 (ipfixTemplateAccessTime).\"\
    ;\n       }\n       leaf templateDataRecords {\n         type yang:counter64;\n\
    \         description \"The number of transmitted or received Data\n         \
    \  Records ... \";\n         reference \"RFC 5815, Section 8 (ipfixTemplateDataRecords).\"\
    ;\n       }\n       leaf templateDiscontinuityTime {\n         type yang:date-and-time;\n\
    \         description \"Timestamp of the most recent occasion at which\n     \
    \      the counter templateDataRecords suffered a discontinuity.\n           ...\
    \ \";\n         reference \"RFC 5815, Section 8\n           (ipfixTemplateDiscontinuityTime).\"\
    ;\n       }\n       list field {\n         description \"This list contains the\
    \ (Options) Template\n           fields of which the (Options) Template is defined.\n\
    \           ... \";\n         leaf ieId {\n           type uint16 {\n        \
    \     range \"1..32767\" {\n               description \"Valid range of Information\
    \ Element\n                   identifiers.\";\n               reference \"RFC\
    \ 5102, Section 4.\";\n             }\n           }\n           description \"\
    This parameter indicates the Information\n             Element Id of the field.\"\
    ;\n           reference \"RFC 5815, Section 8 (ipfixTemplateDefinitionIeId);\n\
    \             RFC 5102.\";\n         }\n         leaf ieLength {\n           type\
    \ uint16;\n           units octets;\n           description \"This parameter indicates\
    \ the length of the\n             Information Element of the field.\";\n     \
    \      reference \"RFC 5815, Section 8\n             (ipfixTemplateDefinitionIeLength);\
    \ RFC 5102.\";\n         }\n         leaf ieEnterpriseNumber {\n           type\
    \ uint32;\n           description \"This parameter indicates the IANA enterprise\n\
    \             number of the authority ... \";\n           reference \"RFC 5815,\
    \ Section 8\n             (ipfixTemplateDefinitionEnterpriseNumber).\";\n    \
    \     }\n         leaf isFlowKey {\n           when \"../../setId = 2\" {\n  \
    \           description \"This parameter is available for non-Options\n      \
    \         Templates (Set Id is 2).\";\n           }\n           type empty;\n\
    \           description \"If present, this is a Flow Key field.\";\n         \
    \  reference \"RFC 5815, Section 8\n             (ipfixTemplateDefinitionFlags).\"\
    ;\n         }\n         leaf isScope {\n           when \"../../setId = 3\" {\n\
    \             description \"This parameter is available for Options\n        \
    \       Templates (Set Id is 3).\";\n           }\n           type empty;\n  \
    \         description \"If present, this is a scope field.\";\n           reference\
    \ \"RFC 5815, Section 8\n             (ipfixTemplateDefinitionFlags).\";\n   \
    \      }\n       }\n     }\n     grouping transportSessionParameters {\n     \
    \  description \"State parameters of a Transport Session ... \";\n       reference\
    \ \"RFC 5101; RFC 5815, Section 8\n         (ipfixTransportSessionEntry,\n   \
    \       ipfixTransportSessionStatsEntry)\";\n       leaf ipfixVersion {\n    \
    \     type uint16;\n         description \"Used for Exporting Processes, this\
    \ parameter\n           contains the version number of the IPFIX protocol ...\
    \ \";\n         reference \"RFC 5815, Section 8\n           (ipfixTransportSessionIpfixVersion).\"\
    ;\n       }\n       leaf sourceAddress {\n         type inet:ip-address;\n   \
    \      description \"The source address of the Exporter of the\n           IPFIX\
    \ Transport Session... \";\n         reference \"RFC 5815, Section 8\n       \
    \    (ipfixTransportSessionSourceAddressType,\n           ipfixTransportSessionSourceAddress).\"\
    ;\n       }\n       leaf destinationAddress {\n         type inet:ip-address;\n\
    \         description \"The destination address of the Collector of\n        \
    \   the IPFIX Transport Session... \";\n         reference \"RFC 5815, Section\
    \ 8\n           (ipfixTransportSessionDestinationAddressType,\n           ipfixTransportSessionDestinationAddress).\"\
    ;\n       }\n       leaf sourcePort {\n         type inet:port-number;\n     \
    \    description \"The transport protocol port number of the\n           Exporter\
    \ of the IPFIX Transport Session.\";\n         reference \"RFC 5815, Section 8\n\
    \           (ipfixTransportSessionSourcePort).\";\n       }\n       leaf destinationPort\
    \ {\n         type inet:port-number;\n         description \"The transport protocol\
    \ port number of the\n           Collector of the IPFIX Transport Session... \"\
    ;\n         reference \"RFC 5815, Section 8\n           (ipfixTransportSessionDestinationPort).\"\
    ;\n       }\n       leaf sctpAssocId {\n         type uint32;\n         description\
    \ \"The association id used for the SCTP session\n           between the Exporter\
    \ and the Collector ... \";\n         reference \"RFC 5815, Section 8\n      \
    \     (ipfixTransportSessionSctpAssocId),\n           RFC 3871\";\n       }\n\
    \       leaf status {\n         type transportSessionStatus;\n         description\
    \ \"Status of the Transport Session.\";\n         reference \"RFC 5815, Section\
    \ 8 (ipfixTransportSessionStatus).\";\n       }\n       leaf rate {\n        \
    \ type yang:gauge32;\n         units \"bytes per second\";\n         description\
    \ \"The number of bytes per second transmitted by the\n           Exporting Process\
    \ or received by the Collecting Process.\n           This parameter is updated\
    \ every second.\";\n         reference \"RFC 5815, Section 8 (ipfixTransportSessionRate).\"\
    ;\n       }\n       leaf bytes {\n         type yang:counter64;\n         units\
    \ bytes;\n         description \"The number of bytes transmitted by the\n    \
    \       Exporting Process or received by the Collecting\n           Process ...\
    \ \";\n         reference \"RFC 5815, Section 8 (ipfixTransportSessionBytes).\"\
    ;\n       }\n       leaf messages {\n         type yang:counter64;\n         units\
    \ \"IPFIX Messages\";\n         description \"The number of messages transmitted\
    \ by the\n           Exporting Process or received by the Collecting Process...\
    \ \";\n         reference \"RFC 5815, Section 8\n           (ipfixTransportSessionMessages).\"\
    ;\n       }\n       leaf discardedMessages {\n         type yang:counter64;\n\
    \         units \"IPFIX Messages\";\n         description \"Used for Exporting\
    \ Processes, this parameter\n           indicates the number of messages that\
    \ could not be\n           sent ...\";\n         reference \"RFC 5815, Section\
    \ 8\n           (ipfixTransportSessionDiscardedMessages).\";\n       }\n     \
    \  leaf records {\n         type yang:counter64;\n         units \"Data Records\"\
    ;\n         description \"The number of Data Records transmitted ... \";\n   \
    \      reference \"RFC 5815, Section 8\n           (ipfixTransportSessionRecords).\"\
    ;\n       }\n       leaf templates {\n         type yang:counter32;\n        \
    \ units \"Templates\";\n         description \"The number of Templates transmitted\
    \ by the\n           Exporting Process or received by the Collecting Process.\n\
    \           ... \";\n         reference \"RFC 5815, Section 8\n           (ipfixTransportSessionTemplates).\"\
    ;\n       }\n       leaf optionsTemplates {\n         type yang:counter32;\n \
    \        units \"Options Templates\";\n         description \"The number of Option\
    \ Templates transmitted by the\n           Exporting Process or received by the\
    \ Collecting Process...\";\n         reference \"RFC 5815, Section 8\n       \
    \    (ipfixTransportSessionOptionsTemplates).\";\n       }\n       leaf transportSessionStartTime\
    \ {\n         type yang:date-and-time;\n         description \"Timestamp of the\
    \ start of the given Transport\n           Session... \";\n       }\n       leaf\
    \ transportSessionDiscontinuityTime {\n         type yang:date-and-time;\n   \
    \      description \"Timestamp of the most recent occasion at which\n        \
    \   one or more of the Transport Session counters suffered a\n           discontinuity...\
    \ \";\n         reference \"RFC 5815, Section 8\n           (ipfixTransportSessionDiscontinuityTime).\"\
    ;\n       }\n       list template {\n         description \"This list contains\
    \ the Templates and Options\n           Templates that are transmitted by the\
    \ Exporting Process\n           or received by the Collecting Process.\n     \
    \      Withdrawn or invalidated (Options) Templates MUST be removed\n        \
    \   from this list.\";\n         uses templateParameters;\n       }\n     }\n\
    \     /*****************************************************************\n   \
    \  * Main container\n     *****************************************************************/\n\
    \     container ipfix {\n       description \"Top-level node of the IPFIX/PSAMP\
    \ configuration\n         data model.\";\n       ct:instance-list collectingProcess\
    \ {\n         if-feature collector;\n         ct:instance-type CollectingProcess;\n\
    \       }\n       ct:instance-list observationPoint {\n         if-feature meter;\n\
    \         ct:instance-type ObservationPoint;\n       }\n       ct:instance-list\
    \ selectionProcess {\n         if-feature meter;\n         ct:instance-type SelectionProcess;\n\
    \       }\n       ct:instance-list cache {\n         if-feature meter;\n     \
    \    description \"Cache of the Monitoring Device.\";\n         ct:instance-type\
    \ Cache;\n       }\n       ct:instance-list exportingProcess {\n         if-feature\
    \ exporter;\n         description \"Exporting Process of the Monitoring Device.\"\
    ;\n         ct:instance-type ExportingProcess;\n       }\n     }\n"
- title: '}'
  contents:
  - '}

    '
- title: <CODE ENDS>
  contents:
  - '<CODE ENDS>

    '
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Bernd Linowski\n   TCS/Nokia Siemens Networks\n   Heltorfer\
    \ Strasse 1\n   Duesseldorf  40472\n   Germany\n   EMail: bernd.linowski.ext@nsn.com\n\
    \   Mehmet Ersue\n   Nokia Siemens Networks\n   St.-Martin-Strasse 76\n   Munich\
    \  81541\n   Germany\n   EMail: mehmet.ersue@nsn.com\n   Siarhei Kuryla\n   360\
    \ Treasury Systems\n   Grueneburgweg 16-18\n   Frankfurt am Main  60322\n   Germany\n\
    \   EMail: s.kuryla@gmail.com\n"
