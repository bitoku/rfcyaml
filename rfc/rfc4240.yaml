- title: __initial_text__
  contents:
  - '                 Basic Network Media Services with SIP

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   In SIP-based networks, there is a need to provide basic network\
    \ media\n   services.  Such services include network announcements, user\n   interaction,\
    \ and conferencing services.  These services are basic\n   building blocks, from\
    \ which one can construct interesting\n   applications.  In order to have interoperability\
    \ between servers\n   offering these building blocks (also known as Media Servers)\
    \ and\n   application developers, one needs to be able to locate and invoke\n\
    \   such services in a well defined manner.\n   This document describes a mechanism\
    \ for providing an interoperable\n   interface between Application Servers, which\
    \ provide application\n   services to SIP-based networks, and Media Servers, which\
    \ provide the\n   basic media processing building blocks.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Overview ........................................................2\n\
    \      1.1. Conventions Used in This Document ..........................3\n  \
    \ 2. Mechanism .......................................................3\n   3.\
    \ Announcement Service ............................................5\n      3.1.\
    \ Operation ..................................................8\n      3.2. Protocol\
    \ Diagram ...........................................9\n      3.3. Formal Syntax\
    \ ..............................................9\n   4. Prompt and Collect Service\
    \ .....................................11\n      4.1. Formal Syntax for Prompt\
    \ and Collect Service ..............12\n   5. Conference Service .............................................13\n\
    \      5.1. Protocol Diagram ..........................................14\n  \
    \    5.2. Formal Syntax .............................................16\n   6.\
    \ IANA Considerations ............................................17\n   7. The\
    \ User Part ..................................................17\n   8. Security\
    \ Considerations ........................................20\n   9. Contributors\
    \ ...................................................20\n   10. Acknowledgements\
    \ ..............................................20\n   11. References ....................................................21\n\
    \      11.1. Normative References .....................................21\n  \
    \    11.2. Informative References ...................................22\n"
- title: 1.  Overview
  contents:
  - "1.  Overview\n   In SIP-based media networks (RFC 3261 [10]), there is a need\
    \ to\n   provide basic network media services.  Such services include playing\n\
    \   announcements, initiating a media mixing session (conference), and\n   prompting\
    \ and collecting information with a user.\n   These services are basic in nature,\
    \ are few in number, and\n   fundamentally have not changed in 25 years of enhanced\
    \ telephony\n   services.  Moreover, given their elemental nature, one would not\n\
    \   expect them to change in the future.\n   Multifunction media servers provide\
    \ network media services to clients\n   using server protocols such as SIP, often\
    \ in conjunction with markup\n   languages such as VoiceXML [20] and MSCML [21].\
    \  This document\n   describes how to identify to a multifunction media server\
    \ what sort\n   of session the client is requesting, without modifying the SIP\n\
    \   protocol.\n   It is critically important to note that the mechanism described\
    \ here\n   in no way modifies the SIP protocol, the meaning, or definition of\
    \ a\n   SIP Request URI, or does it put any restrictions, in any way, on\n   devices\
    \ that do not implement this convention.\n   Announcements are media played to\
    \ the user.  Announcements can be\n   static media files, media files generated\
    \ in real-time, media streams\n   generated in real-time, multimedia objects,\
    \ or combinations of the\n   above.\n   Media mixing is the act of mixing different\
    \ RTP streams, as described\n   in RFC 3550 [13].  Note that the service described\
    \ here suffices for\n   simple mixing of media for a basic conferencing service.\
    \  This\n   service does not address enhanced conferencing services, such as\n\
    \   floor control, gain control, muting, subconferences, etc.  MSCML [21]\n  \
    \ addresses enhanced conferencing.  However, that is beyond the scope\n   of this\
    \ document.  Interested readers should read conferencing-\n   framework [22] for\
    \ details on the IETF SIP conferencing framework.\n   Prompt and collect is where\
    \ the server prompts the user for some\n   information, as in an announcement,\
    \ and then collects the user's\n   response.  This can be a one-step interaction,\
    \ for example by playing\n   an announcement, \"Please enter your pass code\"\
    , followed by\n   collecting a string of digits.  It can also be a more complex\n\
    \   interaction, specified, for example, by VoiceXML [20] or MSCML [21].\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   RFC 2119 [6] the interpretations\
    \ for the key words \"MUST\", \"MUST\n   NOT\", \"REQUIRED\", \"SHALL\", \"SHALL\
    \ NOT\", \"SHOULD\", \"SHOULD NOT\",\n   \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"\
    \ found in this document.\n"
- title: 2.  Mechanism
  contents:
  - "2.  Mechanism\n   In the context of SIP control of media servers, we take advantage\
    \ of\n   the fact that the standard SIP URI has a user part.  Multifunction\n\
    \   media servers do not have users.  Thus we use the user address, or\n   the\
    \ left-hand-side of the URI, as a service indicator.\n   The use of the user part\
    \ of the SIP Request URI has a number of\n   useful properties:\n   o  There is\
    \ no change to core SIP.\n   o  Only devices that choose to conform to this standard\
    \ have to\n      implement it.\n   o  This document only applies to multifunction\
    \ SIP-controlled media\n      servers.\n   o  This document has no impact on non-multifunction\
    \ SIP-controlled\n      media servers.\n   o  The mechanism described in this\
    \ document has absolutely no impact\n      on SIP devices other than media servers.\n\
    \   The last bullet point is crucial.  In particular, the user part\n   convention\
    \ described here places absolutely no restrictions on any\n   SIP user agent,\
    \ proxy, back-to-back user agent (B2BUA), or any future\n   device.  The user\
    \ parts defined here only apply to multifunction\n   media servers that chose\
    \ to implement the convention.  With the\n   exception of a conforming media server,\
    \ these user names and\n   conventions have no impact on the user part namespace.\
    \  They do not\n   restrict the use of these user names at devices other than\
    \ a\n   multifunction media server.\n   Note that the set of services is small,\
    \ well defined, and well\n   contained.  The section The User Part (Section 7)\
    \ discusses the\n   issues with using a fixed set of user-space names.\n   For\
    \ per-service security, the media server SHOULD use the security\n   protocols\
    \ described in RFC 3261 [10].\n   The media server MAY issue 401 challenges for\
    \ authentication.  The\n   media server SHOULD support the sips: scheme for the\
    \ announcement\n   service.  The media server MUST support the sips: scheme for\
    \ the\n   dialog and conference services.  The level of authentication to\n  \
    \ require for each service is a matter of local policy.\n   The media server,\
    \ upon receiving an INVITE, notes the service\n   indicator.  Depending on the\
    \ service indicator, the media server will\n   either honor the request or return\
    \ a failure response code.\n   The service indicator is the concatenation of the\
    \ service name and an\n   optional service instance identifier, separated by an\
    \ equal sign.\n   Per RFC 3261 [10], the service indicator is case insensitive.\
    \  The\n   service name MUST be from the set alphanumeric characters plus dash\n\
    \   (US-ASCII %2C).  The service name MUST NOT include an equal sign\n   (US-ASCII\
    \ %3D).\n   The service name MAY have long- and short-forms, as SIP does for\n\
    \   headers.\n   A given service indicator MAY have an associated set of parameters.\n\
    \   Such parameters MUST follow the convention set out for SIP URI\n   parameters.\
    \  That is, a semi-colon separated list of keyword=value\n   pairs.\n   Certain\
    \ services may have an association with a unique service\n   instance on the media\
    \ server.  For example, a given media server can\n   host multiple, separate conference\
    \ sessions.  To identify unique\n   service instances, a unique identifier modifies\
    \ the service name.\n   The unique identifier MUST meet the rules for a legal\
    \ user part of a\n   SIP URI.  An equal sign, US-ASCII %3D, MUST separate the\
    \ service\n   indicator from the unique identifier.\n   Note that since the service\
    \ indicator is case insensitive, the\n   service instance identifier is also case\
    \ insensitive.\n   The requesting client issues a SIP INVITE to the media server,\n\
    \   specifying the requested service and any appropriate parameters.\n   If the\
    \ media server can perform the requested service, it does so,\n   following the\
    \ processing steps described in the service definition\n   document.\n   If the\
    \ media server cannot perform the requested service or does not\n   recognize\
    \ the service indicator, it MUST respond with the response\n   code 488 NOT ACCEPTABLE\
    \ HERE.  This is appropriate, as 488 refers to\n   a problem with the user part\
    \ of the URI.  Moreover, 606 is not\n   appropriate, as some other media server\
    \ may be able to satisfy the\n   request.  RFC 3261 [10] describes the 488 and\
    \ 606 response codes.\n   Some services require a unique identifier.  Most services\n\
    \   automatically create a service instance upon the first INVITE with\n   the\
    \ given identifier.  However, if a service requires an existing\n   service instance,\
    \ and no such service instance exists on the media\n   server, the media server\
    \ MUST respond with the response code 404 NOT\n   FOUND.  This is appropriate\
    \ as the service itself exists on the media\n   server, but the particular service\
    \ instance does not.  It is as if\n   the user was not home.\n"
- title: 3.  Announcement Service
  contents:
  - "3.  Announcement Service\n   A network announcement is the delivery of a multimedia\
    \ resource, such\n   as a prompt file, to a terminal device.  Note the multimedia\
    \ resource\n   may be any multimedia object that the media server supports.  This\n\
    \   service can play a single object with multiple streams, such as a\n   video\
    \ and audio prompt.  However, this service cannot play multiple\n   objects on\
    \ the same SIP dialog.\n   There are two types of network announcements.  The\
    \ differentiating\n   characteristic between the two types is whether the network\
    \ fully\n   sets up the SIP dialog before playing the announcement.  The analog\n\
    \   in the Public Switched Telephone Network (PSTN) is whether answer\n   supervision\
    \ is supplied (i.e., does the announcement server answer\n   the call prior to\
    \ delivering the announcement?).\n   Playing an announcement after call setup\
    \ is straightforward.  First,\n   the requesting device issues an INVITE to the\
    \ media server requesting\n   the announcement service.  The media server negotiates\
    \ the SDP and\n   responds with a 200 OK.  After receiving the ACK from the requesting\n\
    \   device, the media server plays the requested object and issues a BYE\n   to\
    \ the requesting device.\n   If the media server supports announcements, but it\
    \ cannot find the\n   referenced URI, it MUST respond with the 404 response code\
    \ and SHOULD\n   send the reason phrase \"Announcement content not found\".\n\
    \   If the media server receives an INVITE for the announcement service\n   without\
    \ a \"play=\" parameter, it MUST respond with the response code\n   400 and SHOULD\
    \ send the reason phrase \"Mandatory play parameter\n   missing\".\n   If there\
    \ is an error retrieving the announcement, the media server\n   MUST respond with\
    \ a 400 response code and SHOULD send the reason\n   phrase \"Announcement content\
    \ could not be retrieved\".  In addition\n   the media  server SHOULD include\
    \ a Warning header with appropriate\n   explanatory text explaining what failed.\n\
    \   The Request URI fully describes the announcement service through the\n   use\
    \ of the user part of the address and additional URI parameters.\n   The user\
    \ portion of the address, \"annc\", specifies the announcement\n   service on\
    \ the media server.  The service has several associated URI\n   parameters that\
    \ control the content and delivery of the announcement.\n   These parameters are\
    \ described below:\n   play\n      Specifies the resource or announcement sequence\
    \ to be played.\n   repeat\n      Specifies how many times the media server should\
    \ repeat the\n      announcement or sequence named by the \"play=\" parameter.\
    \  The\n      value \"forever\" means the repeat should be effectively unbounded.\n\
    \      In this case, it is RECOMMENDED the media server implements some\n    \
    \  local policy, such as limiting what \"forever\" means, to ensure\n      errant\
    \ clients do not create a denial of service attack.\n   delay\n      Specifies\
    \ a delay interval between announcement repetitions.  The\n      delay is measured\
    \ in milliseconds.\n   duration\n      Specifies the maximum duration of the announcement.\
    \  The media\n      server will discontinue the announcement and end the call\
    \ if the\n      maximum duration has been reached.  The duration is measured in\n\
    \      milliseconds.\n   locale\n      Specifies the language and optionally country\
    \ variant of the\n      announcement sequence named in the \"play=\" parameter.\
    \  RFC 3066\n      [9] specifies the locale tag.  The locale tag is usually a\
    \ two- or\n      three-letter code per ISO 639-1 [11].  The country variant is\
    \ also\n      often a two-letter code per ISO 3166-1 [12].  These elements are\n\
    \      concatenated with a single under bar (%x5F) character, such as\n      \"\
    en_CA\".  If only the language is specified, such as locale=en,\n      the choice\
    \ of country variant is an implementation matter.\n      Implementations SHOULD\
    \ provide the best possible match between the\n      requested locale and the\
    \ available languages in the event the\n      media server cannot honor the locale\
    \ request precisely.  For\n      example, if the request has locale=ca_FR, but\
    \ the media server\n      only has fr_FR available, the media server should use\
    \ the fr_FR\n      variant.  Implementations SHOULD provide a default locale to\
    \ use\n      if no language variants are available.\n   param[n]\n      Provides\
    \ a mechanism for passing values that are to be substituted\n      into an announcement\
    \ sequence.  Up to 9 parameters (\"param1=\"\n      through \"param9=\") may be\
    \ specified.  The mechanics of\n      announcement sequences are beyond the scope\
    \ of this document.\n   extension\n      Provides a mechanism for extending the\
    \ parameter set.  If the\n      media server receives an extension it does not\
    \ understand, it MUST\n      silently ignore the extension parameter and value.\n\
    \   The \"play=\" parameter is mandatory and MUST be present.  All other\n   parameters\
    \ are OPTIONAL.\n   NOTE: Some encodings are not self-describing.  Thus, the\n\
    \   implementation relies on filename extension conventions for\n   determining\
    \ the media type.\n   Note that RFC 3261 [10] implies that proxies are supposed\
    \ to pass\n   parameters through unchanged.  However, be aware that non-conforming\n\
    \   proxies may strip Request-URI parameters.  That said, given the\n   likely\
    \ scenarios for the mechanisms presented in this document, this\n   should not\
    \ be an issue.  Most likely, the proxy inserting the\n   parameters is the last\
    \ proxy before the media server.  If the service\n   provider deploys a proxy\
    \ for load balancing or service location\n   purposes, the service provider should\
    \ ensure that its choice of proxy\n   preserves parameters.\n   The form of the\
    \ SIP Request URI for announcements is as follows.\n   Note that the backslash,\
    \ CRLF, and spacing before the \"play=\" in the\n   example is for readability\
    \ purposes only.\n   sip:annc@ms2.example.net; \\\n       play=http://audio.example.net/allcircuitsbusy.g711\n\
    \   sip:annc@ms2.example.net; \\\n       play=file://fileserver.example.net//geminii/yourHoroscope.wav\n"
- title: 3.1.  Operation
  contents:
  - "3.1.  Operation\n   The scenarios below assume there is a SIP Proxy, application\
    \ server,\n   or media gateway controller between the caller and the media server.\n\
    \   However, the announcement service works as described below even if\n   the\
    \ caller invokes the service directly.  We chose to discuss the\n   proxy case,\
    \ as it will be the most common case.\n   The caller issues an INVITE to the serving\
    \ SIP Proxy.  The SIP Proxy\n   determines what audio prompt to play to the caller.\
    \  The proxy\n   responds to the caller with 100 TRYING.\n   It is important to\
    \ note that the mechanism described here in no way\n   modifies the behavior of\
    \ SIP [10].  In particular, this convention\n   does not modify SDP negotiation\
    \ [18].\n   The proxy issues an INVITE to the media server, requesting the\n \
    \  appropriate prompt to play coded in the play= parameter.  The media\n   server\
    \ responds with 200 OK.  The proxy relays the 200 OK to the\n   caller.  The caller\
    \ then issues an ACK.  The proxy then relays the\n   ACK to the media server.\n\
    \   With the call established, the media server plays the requested\n   prompt.\
    \  When the media server completes the play of the prompt, it\n   issues a BYE\
    \ to the proxy.  The proxy then issues a BYE to the\n   caller.\n"
- title: 3.2.  Protocol Diagram
  contents:
  - "3.2.  Protocol Diagram\n   Caller                   Proxy                 Media\
    \ Server\n     |   INVITE               |                        |\n     |----------------------->|\
    \   INVITE               |\n     |   100 TRYING           |----------------------->|\n\
    \     |<-----------------------|   200 OK               |\n     |   200 OK   \
    \            |<-----------------------|\n     |<-----------------------|     \
    \                   |\n     |   ACK                  |                       \
    \ |\n     |----------------------->|   ACK                  |\n     |        \
    \                |----------------------->|\n     |                        | \
    \                       |\n     |              Play Announcement (RTP)       \
    \     |\n     |<================================================|\n     |    \
    \                    |                        |\n     |                      \
    \  |   BYE                  |\n     |   BYE                  |<-----------------------|\n\
    \     |<-----------------------|                        |\n     |   200 OK   \
    \            |                        |\n     |----------------------->|    200\
    \ OK              |\n     |                        |----------------------->|\n\
    \     |                        |                        |\n"
- title: 3.3.  Formal Syntax
  contents:
  - "3.3.  Formal Syntax\n   The following syntax specification uses the augmented\
    \ Backus-Naur\n   Form (BNF) as described in RFC 4234 [7].\n   ANNC-URL      \
    \  = sip-ind annc-ind \"@\" hostport\n                       annc-parameters uri-parameters\n\
    \   sip-ind         = \"sip:\" / \"sips:\"\n   annc-ind        = \"annc\"\n  \
    \ annc-parameters = \";\" play-param [ \";\" content-param ]\n               \
    \                     [ \";\" delay-param]\n                                 \
    \   [ \";\" duration-param ]\n                                    [ \";\" repeat-param\
    \ ]\n                                    [ \";\" locale-param ]\n            \
    \                        [ \";\" variable-params ]\n                         \
    \           [ \";\" extension-params ]\n   play-param      = \"play=\" prompt-url\n\
    \   content-param   = \"content-type=\" MIME-type\n   delay-param     = \"delay=\"\
    \ delay-value\n   delay-value     = 1*DIGIT\n   duration-param  = \"duration=\"\
    \ duration-value\n   duration-value  = 1*DIGIT\n   repeat-param    = \"repeat=\"\
    \ repeat-value\n   repeat-value    = 1*DIGIT / \"forever\"\n   locale-param  \
    \  = \"locale=\" token\n                        ; per RFC 3066, usually\n    \
    \                    ; ISO639-1_ISO3166-1\n                        ; e.g., en,\
    \ en_US, en_UK, etc.\n   variable-params = param-name \"=\" variable-value\n \
    \  param-name      = \"param\" DIGIT ; e.g., \"param1\"\n   variable-value  =\
    \ 1*(ALPHA / DIGIT)\n   extension-params = extension-param [ \";\" extension-params\
    \ ]\n   extension-param  = token \"=\" token\n   \"uri-parameters\" is the SIP\
    \ Request-URI parameter list as described\n   in RFC 3261 [10].  All parameters\
    \ of the Request URI are part of the\n   URI matching algorithm.\n   The MIME-type\
    \ is the MIME [1] [2] [3] [4] [5] content type for the\n   announcement, such\
    \ as audio/basic, audio/G729, audio/mpeg,\n   video/mpeg, and so on.\n   A number\
    \ of MIME registrations, which could be used here, have\n   parameters, for instance,\
    \ video/DV.  To accommodate this, and retain\n   compatibility with the SIP URI\
    \ structure, the MIME-type parameter\n   separator (semicolon, %3b) and value\
    \ separator (equal, %d3) MUST be\n   escaped.  For example:\n   sip:annc@ms.example.net;\
    \ \\\n       play=file://fs.example.net//clips/my-intro.dvi; \\\n       content-type=video/mpeg%3bencode%d3314M-25/625-50\n\
    \   The locale-value consists of a tag as specified in RFC 3066 [9].\n   The definition\
    \ of hostport is as specified by RFC 3261 [10].\n   The syntax of prompt-url consists\
    \ of a URL scheme as specified by RFC\n   3986 [8] or a special token indicating\
    \ a provisioned announcement\n   sequence.  For example, the URL scheme MAY include\
    \ any of the\n   following.\n   o  http/https\n   o  ftp\n   o  file (referencing\
    \ a local or NFS (RFC 3530 [16]) object)\n   o  nfs (RFC 2224 [14])\n   If a provisioned\
    \ announcement sequence is to be played, the value of\n   prompt-url will have\
    \ the following form:\n   prompt-url      = \"/provisioned/\" announcement-id\n\
    \   announcement-id = 1*(ALPHA / DIGIT)\n   Note that the scheme \"/provisioned/\"\
    \ was chosen because of a\n   hesitation to register a \"provisioned:\" URI scheme.\n\
    \   This document is strictly focused on the SIP interface for the\n   announcement\
    \ service and, as such, does not detail how announcement\n   sequences are provisioned\
    \ or defined.\n   Note that the media type of the object the prompt-url refers\
    \ to can\n   be most anything, including audio file formats, text file formats,\
    \ or\n   URI lists.  See the Prompt and Collect Service (Section 4) section\n\
    \   for more on this topic.\n"
- title: 4.  Prompt and Collect Service
  contents:
  - "4.  Prompt and Collect Service\n   This service is also known as a voice dialog.\
    \  It establishes an\n   aural dialog with the user.\n   The dialog service follows\
    \ the model of the announcement service.\n   However, the service indicator is\
    \ \"dialog\".  The dialog service takes\n   a parameter, voicexml=, indicating\
    \ the URI of the VoiceXML script to\n   execute.\n   sip:dialog@mediaserver.example.net;\
    \ \\\n       voicexml=http://vxmlserver.example.net/cgi-bin/script.vxml\n   A\
    \ Media Server MAY accept additional SIP request URI parameters and\n   deliver\
    \ them to the VoiceXML interpreter session as session\n   variables.\n   Although\
    \ not good VoiceXML programming practice, VoiceXML scripts\n   might contain sensitive\
    \ information, such as a user's pass code in a\n   DTMF grammar.  Thus, the media\
    \ server MUST support the https scheme\n   for the voicexml parameter for secure\
    \ fetching of scripts.  Likewise,\n   dynamic grammars often do have user-identifying\
    \ information.  As\n   such, the VoiceXML browser implementation on the media\
    \ server MUST\n   support https fetching of grammars and subsequent documents.\n\
    \   Returned information often is sensitive.  For example, the\n   information\
    \ could be financial information or instructions.  Thus,\n   the media server\
    \ MUST support https posting of results.\n"
- title: 4.1.  Formal Syntax for Prompt and Collect Service
  contents:
  - "4.1.  Formal Syntax for Prompt and Collect Service\n   The following syntax specification\
    \ uses the augmented Backus-Naur\n   Form (BNF) as described in RFC 4234 [7].\n\
    \   DIALOG-URL        = sip-ind dialog-ind \"@\" hostport\n                  \
    \        dialog-parameters\n   sip-ind           = \"sip:\" / \"sips:\"\n   dialog-ind\
    \        = \"dialog\"\n   dialog-parameters = \";\" dialog-param [ vxml-parameters\
    \ ]\n                                        [ uri-parameters ]\n   dialog-param\
    \      = \"voicexml=\" vxml-url\n   vxml-parameters   = vxml-param [ vxml-parameters\
    \ ]\n   vxml-param        = \";\" vxml-keyword \"=\" vxml-value\n   vxml-keyword\
    \      = token\n   vxml-value        = token\n   The vxml-url is the URI of the\
    \ VoiceXML script.  If present, other\n   parameters get passed to the VoiceXML\
    \ interpreter session with the\n   assigned vxml-keyword vxml-value pairs.  Note\
    \ that all vxml-keywords\n   MUST have values.\n   If there is a vxml-keyword\
    \ without a corresponding vxml-value, the\n   media server MUST reject the request\
    \ with a 400 BAD REQUEST response\n   code.  In addition, the media server MUST\
    \ state \"Missing VXML Value\"\n   in the reason phrase.\n   The media server\
    \ presents the parameters as environment variables in\n   the connection object.\
    \  Specifically, the parameter appears in the\n   connection.sip tree.\n   If\
    \ the Media Server does not support the passing of keyword-value\n   pairs to\
    \ the VoiceXML interpreter session, it MUST ignore the\n   parameters.\n   \"\
    uri-parameters\" is the SIP Request-URI parameter list as described\n   in RFC\
    \ 3261 [10].  All parameters in the parameter list, whether they\n   come from\
    \ uri-parameters or from vxml-keyworks, are part of the URI\n   matching algorithm.\n"
- title: 5.  Conference Service
  contents:
  - "5.  Conference Service\n   One identifies mixing sessions through their SIP request\
    \ URIs.  To\n   create a mixing session, one sends an INVITE to a request URI\
    \ that\n   represents the session.  If the URI does not already exist on the\n\
    \   media server and the requested resources are available, the media\n   server\
    \ creates a new mixing session.  If there is an existing URI for\n   the session,\
    \ then the media server interprets it as a request for the\n   new session to\
    \ join the existing session.  The form of the SIP\n   request URI for conferencing\
    \ is:\n   sip:conf=uniqueIdentifier@mediaserver.example.net\n   The left-hand\
    \ side of the request URI is actually the username of the\n   request in the request\
    \ URI and the To header.  The host portion of\n   the URI identifies a particular\
    \ media server.  The \"conf\" user name\n   conveys to the media server that this\
    \ is a request for the mixing\n   service.  The uniqueIdentifier can be any value\
    \ that is compliant\n   with the SIP URI specification.  It is the responsibility\
    \ of the\n   conference control application to ensure the identifier is unique\n\
    \   within the scope of any potential conflict.\n   In the terminology of the\
    \ conferencing framework [22], this URI\n   convention tells the media server\
    \ that the application server is\n   requesting it to act as a Focus.  The conf-id\
    \ value identifies the\n   particular focus instance.\n   As a focus in the conferencing\
    \ framework, the media server MUST\n   support the \";isfocus\" parameter in the\
    \ Request URI.  Note, however,\n   that the presence or absence of the \";isfocus\"\
    \ parameter has no\n   protocol impact at the media server.\n   It is worth noting\
    \ that the conference URI shared between the\n   application and media servers\
    \ provides enhanced security, as the SIP\n   control interface does not have to\
    \ be exposed to participants.  It\n   also allows the assignment of a specific\
    \ media server to be delayed\n   as long as possible, thereby simplifying resource\
    \ management.\n   One can add additional legs to the conference by INVITEing them\
    \ to\n   the above-mentioned request URI.  Per the matching rules of RFC 3261\n\
    \   [10], the conf-id parameter is part of the matching string.\n   Conversely,\
    \ one can remove legs by issuing a BYE in the corresponding\n   dialog.  The mixing\
    \ session, and thus the conference-specific request\n   URI, remains active so\
    \ long as there is at least one SIP dialog\n   associated with the given request\
    \ URI.\n   If the Request-URI has \"conf\" as the user part, but does not have\
    \ a\n   conf-id parameter, the media server MUST respond with a 404 NOT\n   FOUND.\n\
    \      NOTE: The media server could create a unique conference instance\n    \
    \  and return the conf-id string to the User Agent Clinet (UAC) if\n      there\
    \ is no conf-id present.  However, such an operation may have\n      other operational\
    \ issues, such as permissions and billing.  Thus\n      an application server\
    \ or proxy is a better place to do such an\n      operation.  Moreover, such action\
    \ would make the media server into\n      a Conference Factory in the terminology\
    \ of conference-framework\n      [22].  That is not the appropriate behavior for\
    \ a media server.\n   Since some conference use cases, such as business conferencing,\
    \ have\n   billing implications, the media server SHOULD authenticate the\n  \
    \ application server or proxy.  At a minimum, the media server MUST\n   implement\
    \ sips:.\n"
- title: 5.1.  Protocol Diagram
  contents:
  - "5.1.  Protocol Diagram\n   This diagram shows the establishment of a three-way\
    \ conference.  This\n   section is informative.  It is only one method of establishing\
    \ a\n   conference.  This example shows a simple back-to-back user agent.\n  \
    \ The conference-framework [22] describes additional parameters and\n   behaviors\
    \ of the Application Server.  For example, the first INVITE\n   from P1 to the\
    \ Application Server would include the \";isfocus\"\n   parameter; the Application\
    \ Server would act as a Conference Factory;\n   and so on.  However, none of that\
    \ protocol machinery has an impact on\n   the operation of the Application Server\
    \ to Media Server interface,\n   which is the focus of this protocol document.\n\
    \    P1       P2        P3         Application Server     Media Server\n     |\
    \       |        |                  |                   |\n     |  INVITE sip:public-conf@as.example.net\
    \                |\n     |---------------------------------->|               \
    \    |\n     |       |        |   INVITE sip:conf=123@ms.example.net |\n     |\
    \       |        |                  |------------------>|\n     |       |    \
    \    |                  | 200 OK            |\n     |  200 OK        |       \
    \           |<------------------|\n     |<----------------------------------|\
    \                   |\n     |  ACK  |        |                  |            \
    \       |\n     |---------------------------------->| ACK               |\n  \
    \   |       |        |                  |------------------>|\n     |       |\
    \        | RTP w/ P1        |                   |\n     |<=====================================================>|\n\
    \     |       |        |                  |                   |\n     |  INVITE\
    \ sip:public-conf@as.example.net                |\n     |       |-------------------------->|\
    \                   |\n     |       |        |   INVITE sip:conf=123@ms.example.net\
    \ |\n     |       |        |                  |------------------>|\n     |  \
    \     |        |                  | 200 OK            |\n     |       | 200 OK\
    \ |                  |<------------------|\n     |       |<--------------------------|\
    \                   |\n     |       |  ACK   |                  |            \
    \       |\n     |       |-------------------------->| ACK               |\n  \
    \   |       |        |                  |------------------>|\n     |       |\
    \        |                  |                   |\n     |       |        | RTP\
    \ w/ P1+P2-P2  |                   |\n     |       |<=============================================>|\n\
    \     |       |        | RTP w/ P1+P2-P1  |                   |\n     |<=====================================================>|\n\
    \     |       |        |                  |                   |\n     |  INVITE\
    \ sip:public-conf@as.example.net                |\n     |       |        |----------------->|\
    \                   |\n     |       |        |   INVITE sip:conf=123@ms.example.net\
    \ |\n     |       |        |                  |------------------>|\n     |  \
    \     |        |                  | 200 OK            |\n     |       |      \
    \  | 200 OK           |<------------------|\n     |       |        |<-----------------|\
    \                   |\n     |       |        |  ACK             |            \
    \       |\n     |       |        |----------------->| ACK               |\n  \
    \   |       |        |                  |------------------>|\n     |       |\
    \        |                  |                   |\n     |       |        | RTP\
    \ w/ P1+P2+P3-P3                   |\n     |       |        |<====================================>|\n\
    \     |       |        | RTP w/ P1+P2+P3-P2                   |\n     |      \
    \ |<=============================================>|\n     |       |        | RTP\
    \ w/ P1+P2+P3-P1                   |\n     |<=====================================================>|\n\
    \     |       |        |                  |                   |\n     |      \
    \ |        |                  |                   |\n   Using the terminology\
    \ of conference-framework [22], the Application\n   Server is the Conference Factory,\
    \ and the Media Server is the\n   Conference Focus.\n   Note that the above call\
    \ flow does not show any 100 TRYING messages\n   that would typically flow from\
    \ the Application Server to the UACs;\n   nor does it show the ACKs from the UACs\
    \ to the Application Server or\n   from the Application Server to the Media Server.\n\
    \   Each leg can drop out either under the supervision of the UAC, by the\n  \
    \ UAC sending a BYE, or under the supervision of the Application\n   Server, by\
    \ the Application Server issuing a BYE.  In either case, the\n   Application Server\
    \ will either issue a BYE on behalf of the UAC or\n   issue it directly to the\
    \ Media Server, corresponding to the\n   respective disconnect case.\n   It is\
    \ left as a trivial exercise to the reader for how the\n   Application Server\
    \ can mute legs, create side conferences, and so\n   forth.\n   Note that the\
    \ Application Server is a server to the participants\n   (UACs).  However, the\
    \ Application Server is a client for mixing\n   services to the Media Server.\n"
- title: 5.2.  Formal Syntax
  contents:
  - "5.2.  Formal Syntax\n   The following syntax specification uses the augmented\
    \ Backus-Naur\n   Form (BNF) as described in RFC 4234 [7].\n   CONF-URL      \
    \  = sip-ind conf-ind \"=\" instance-id \"@\" hostport\n                     [\
    \ uri-parameters ]\n   sip-ind         = \"sip:\" / \"sips:\"\n   conf-ind   \
    \     = \"conf\"\n   instance-id     = token\n   \"uri-parameters\" is the SIP\
    \ Request-URI parameter list as described\n   in RFC 3261 [10].  All parameters\
    \ in the parameter list are part of\n   the URI matching algorithm.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   The IANA has registered the following parameters\
    \ in the SIP/SIPS URI\n   Parameters registry, following the specification required\
    \ policy of\n   RFC 3969 [19]:\n   Parameter Name    Predefined Values    Reference\n\
    \   --------------    -----------------    ---------\n   play                \
    \      no           RFC 4240\n   repeat                    no           RFC 4240\n\
    \   delay                     no           RFC 4240\n   duration             \
    \     no           RFC 4240\n   locale                    no           RFC 4240\n\
    \   param[n]                  no           RFC 4240\n   extension            \
    \     no           RFC 4240\n"
- title: 7.  The User Part
  contents:
  - "7.  The User Part\n   There has been considerable discussion about the wisdom\
    \ of using\n   fixed user parts in a request URI.  The most common objection is\
    \ that\n   the user part should be opaque and a local matter.  The other\n   objection\
    \ is that using a fixed user part removes those specified\n   user addresses from\
    \ the user address space.\n   We address the latter issue first.  The common example\
    \ is the\n   Postmaster address defined by RFC 2821 [15].  The objection is that\n\
    \   by using the Postmaster token for something special, one removes that\n  \
    \ token for anyone.  Thus, the Postmaster General of the United States,\n   for\
    \ example, cannot have the mail address Postmaster@usps.gov.\n   However, one\
    \ may debate whether this is a significant limitation.\n   This document explicitly\
    \ addresses this issue.  The user names\n   described in the text (namely annc,\
    \ ivr, dialog, and conf) are\n   available for whatever local use a given SIP\
    \ user agent or proxy\n   wishes for them.  What this document does is give special\
    \ meaning for\n   these user names at media servers that implement this specification.\n\
    \   If a media server chooses not to implement this specification,\n   nothing\
    \ breaks.  If a user wishes to use one of the user names\n   described in this\
    \ document at their SIP user agent, nothing breaks\n   and their user agent will\
    \ work as expected.\n   The key point is, one cannot confuse the namespace at\
    \ a Media Server\n   with the namespace for an organization.  For example, let\
    \ us take the\n   case where a network offers services for \"Ann Charles\".  She\
    \ likes to\n   use the name \"annc\", and thus she would like to use\n   \"sip:annc@example.net\"\
    .  We offer there is ABSOLUTELY NO NAME\n   COLLISION WHATSOEVER.  Why is this\
    \ so?  This is so because\n   sip:annc@example.net will resolve to the specific\
    \ user at a specific\n   device for Ann.  As an example, example.net's SIP Proxy\
    \ Server\n   resolves sip:annc@example.net to annc@anns-phone.example.net.\n \
    \  Conversely, one directs requests for the media service annc directly\n   to\
    \ the Media Server, e.g., sip:annc@ms21.ap.example.net.  Moreover,\n   by definition,\
    \ requests for Ann Charles, or anything other than the\n   announcement service,\
    \ will NEVER be directly sent to the Media\n   Server.  If that were not true,\
    \ no phone in the world could use the\n   user part \"eburger\", as eburger is\
    \ a reserved user part in the\n   Brooktrout domain.  Clearly, this is not the\
    \ case.\n   If one wishes to make their media server accessible to the global\n\
    \   Internet, but retain one of the Media Server-specific user names in\n   the\
    \ domain, a SIP Proxy can easily translate whatever opaque name one\n   chooses\
    \ to the Media Server-specific user name.  For example, if a\n   domain wishes\
    \ to offer services for the above mentioned Ann Charles\n   at sip:annc@example.com,\
    \ they can offer the announcement service at\n   sip:my-special-announcement-service@example.com.\
    \  The former address,\n   sip:annc@example.com, would resolve to the actual device\
    \ where annc\n   resides.  The latter would resolve to the media server announcement\n\
    \   server address, sip:annc@mediaserver.example.com, as an example.\n   Note\
    \ that this convention makes it easier to provision this service.\n   With a fixed\
    \ mapping at the multifunction media server, there are\n   less provisioning data\
    \ elements to get wrong.\n   Here is another way of looking at this issue.  Unix\
    \ reserves the\n   special user \"root\".  Just about all Unix machines have a\
    \ user root,\n   who has an address \"root@a-specific-machine.example.com\", where\n\
    \   \"a-specific-machine\" is the fully-qualified domain name (FQDN) of a\n  \
    \ particular instance of a machine.  There are very well-defined\n   semantics\
    \ for the \"root\" user.\n   Even though most every Unix machine has a \"root\"\
    \ user, often there is\n   no mapping for a \"root\" user in a domain, such as\
    \ \"root@example.com\".\n   Conversely, there is no restriction on creating an\
    \ MX record for\n   \"root@example.com\".  That choice is fully up to the administrative\n\
    \   authority for the domain.\n   The \"users\" proposed by this document, \"\
    annc\", \"conf\", and \"dialog\"\n   are all users at a Media Server, just as\
    \ the \"root\", \"bin\", and\n   \"nobody\" users are \"users\" at a Unix host.\n\
    \   After much discussion, with input from the W3C URI work group, we\n   considered\
    \ obfuscating the user name by prepending \"__sip-\" to the\n   user name.  However,\
    \ as explained above, this obfuscation is not\n   necessary.  There is a fundamental\
    \ difference between a user name at\n   a device and a user name at an MX record\
    \ (SMTP) or Address-of-Record\n   (SIP).  Again, there is no possibility that\
    \ the name on the device\n   may \"leak out\" into the SIP routing network.\n\
    \   The most important thing to note about this convention is that the\n   left-hand\
    \ side of the request URI is opaque to the network.  The only\n   network elements\
    \ that need to know about the convention are the Media\n   Server and client.\
    \  Even proxies doing mapping resolution, as in the\n   example above for public\
    \ announcement services, do not need to be\n   aware of the convention.  The convention\
    \ is purely a matter of\n   provisioning.\n   Some have proposed that such naming\
    \ be a pure matter of local\n   convention.  For example, the thesis of the informational\
    \ RFC RFC\n   3087 [17] is that you can address services using a request URI.\n\
    \   However, some have taken the examples in the document to an extreme.\n   Namely,\
    \ that the only way to address services is via arbitrary,\n   opaque, long user\
    \ parts.  Clearly, it is possible to provision the\n   service names, rather than\
    \ fixed names.  While this can work in a\n   closed network, where the Application\
    \ Servers and Media Servers are\n   in the same administrative domain, this does\
    \ not work across domains,\n   such as in the Internet.  This is because the client\
    \ of the media\n   service has to know the local name for each service / domain\
    \ pair.\n   This is particularly onerous for situations where there is an ad hoc\n\
    \   relationship between the application and the media service.  Without\n   a\
    \ well-known relationship between service and service address, how\n   would the\
    \ client locate the service?\n   One very important result of using the user part\
    \ as the service\n   descriptor is that we can use all of the standard SIP machinery,\n\
    \   without modification.  For example, Media Servers with different\n   capabilities\
    \ can SIP Register their capabilities as users.  For\n   example, a VoiceXML-only\
    \ device will register the \"dialog\" user,\n   while a multi-purpose Media Server\
    \ will register all of the users.\n   Note that this is why the URI to play is\
    \ a parameter.  Doing\n   otherwise would overburden a normal SIP proxy or redirect\
    \ server.\n   Conversely, having the conference ID be part of the user part gives\n\
    \   an indication that requests get routed similarly (as opposed to\n   requiring\
    \ a Globally Routable User Agent URI (GRUU), which would\n   restrict routing\
    \ to the same device).\n   Likewise, this scheme lets us leverage the standard\
    \ SIP proxy\n   behavior of using an intelligent redirect server or proxy server\
    \ to\n   provide high-available services.  For example, two Media Servers can\n\
    \   register with a SIP redirect server for the annc user.  If one of the\n  \
    \ Media Servers fails, the registration will expire and all requests\n   for the\
    \ announcement service (\"calls to the annc user\") will get sent\n   to the surviving\
    \ Media Server.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Exposing network services with well-known addresses\
    \ may not be\n   desirable.  The Media Server SHOULD authenticate and authorize\n\
    \   requesting endpoints per local policy.\n   Some interactions in this document\
    \ result in the transfer of\n   confidential information.  Moreover, many of the\
    \ interactions require\n   integrity protection.  Thus, the Media Server MUST\
    \ implement the\n   sips: scheme.  In addition, application developers are RECOMMENDED\
    \ to\n   use the security services offered by the Media Server to ensure the\n\
    \   integrity and confidentiality of their user's data, as appropriate.\n   Untrusted\
    \ network elements could use the convention described here\n   for providing information\
    \ services.  Many extant billing arrangements\n   are for completed calls.  Successful\
    \ call completion occurs with a\n   2xx result code.  This can be an issue for\
    \ the early media\n   announcement service.  This is one of the reasons why the\
    \ early media\n   announcement service is deprecated.\n   Services such as repeating\
    \ an announcement forever create the\n   possibility for denial of service attacks.\
    \  The media server SHOULD\n   have local policies to deal with this, such as\
    \ time-limiting how long\n   \"forever\" is, analyzing where multiple requests\
    \ come from,\n   implementing white-lists for such a service, and so on.\n"
- title: 9.  Contributors
  contents:
  - "9.  Contributors\n   Jeff Van Dyke and Andy Spitzer of SnowShore did just about\
    \ all of the\n   work developing netann, in conjunction with many application\n\
    \   developers, media server manufacturers, and service providers, some\n   of\
    \ whom are listed in the Acknowledgements section.  All I did was do\n   the theory\
    \ and write it up.  That also means all of the mistakes are\n   mine, as well.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   We would like to thank Kevin Summers and Ravindra Kabre\
    \ of Sonus\n   Networks for their constructive comments, as well as Jonathan\n\
    \   Rosenberg of Dynamicsoft and Tim Melanchuk of Convedia for their\n   encouragement.\
    \  In addition, the discussion at the Las Vegas Interim\n   Workgroup Meeting\
    \ in 2002 was invaluable for clearing up the issues\n   surrounding the left-hand-side\
    \ of the request URI.  Christer Holmberg\n   helped tune the language of the multimedia\
    \ announcement service.\n   Orit Levin from Radvision gave a close read on the\
    \ most recent\n   version of the document.  Pete Danielsen from Lucent has consistently\n\
    \   provided excellent reviews of the many different versions of this\n   document.\n\
    \   Pascal Jalet provided the theoretical underpinning and David Rio\n   provided\
    \ the experimental evidence for why the conference identifier\n   belongs in the\
    \ user part of the request-URI.\n   I am particularly indebted to Alan Johnston\
    \ for his review of this\n   document and ensuring its conformance with the SIP\
    \ conference control\n   work in the IETF.\n   Mary Barnes, as usual, found the\
    \ holes and showed how to fix them.\n   The authors would like to give a special\
    \ thanks to Walter O'Connor\n   for doing much of the initial implementation.\n\
    \   Note that at the time of this writing, there are 7 known independent\n   server\
    \ implementations that are interoperable with 23 known client\n   implementations.\
    \  Our apologies if we did not count your\n   implementation.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [1]   Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n         Extensions (MIME) Part One: Format of Internet Message\
    \ Bodies\",\n         RFC 2045, November 1996.\n   [2]   Freed, N. and N. Borenstein,\
    \ \"Multipurpose Internet Mail\n         Extensions (MIME) Part Two: Media Types\"\
    , RFC 2046,\n         November 1996.\n   [3]   Moore, K., \"MIME (Multipurpose\
    \ Internet Mail Extensions) Part\n         Three: Message Header Extensions for\
    \ Non-ASCII Text\", RFC 2047,\n         November 1996.\n   [4]   Freed, N., Klensin,\
    \ J., and J. Postel, \"Multipurpose Internet\n         Mail Extensions (MIME)\
    \ Part Four: Registration Procedures\",\n         BCP 13, RFC 2048, November 1996.\n\
    \   [5]   Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n        \
    \ Extensions (MIME) Part Five: Conformance Criteria and\n         Examples\",\
    \ RFC 2049, November 1996.\n   [6]   Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [7]   Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n         Specifications:\
    \ ABNF\", RFC 4234, October 2005.\n   [8]   Berners-Lee, T., Fielding, R., and\
    \ L. Masinter, \"Uniform\n         Resource Identifier (URI): Generic Syntax\"\
    , STD 66, RFC 3986,\n         January 2005.\n   [9]   Alvestrand, H., \"Tags for\
    \ the Identification of Languages\",\n         BCP 47, RFC 3066, January 2001.\n\
    \   [10]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n     \
    \    Peterson, J., Sparks, R., Handley, M., and E. Schooler, \"SIP:\n        \
    \ Session Initiation Protocol\", RFC 3261, June 2002.\n   [11]  International\
    \ Organization for Standardization, \"Codes for the\n         representation of\
    \ names of languages -- Part 1: Alpha-2 code\",\n         ISO Standard 639-1,\
    \ July 2002.\n   [12]  International Organization for Standardization, \"Codes\
    \ for the\n         representation of names of countries and their subdivisions\
    \ --\n         Part 1: Country codes\", ISO Standard 3166-1, October 1997.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [13]  Schulzrinne, H., Casner, S., Frederick,\
    \ R., and V. Jacobson,\n         \"RTP: A Transport Protocol for Real-Time Applications\"\
    , STD 64,\n         RFC 3550, July 2003.\n   [14]  Callaghan, B., \"NFS URL Scheme\"\
    , RFC 2224, October 1997.\n   [15]  Klensin, J., \"Simple Mail Transfer Protocol\"\
    , RFC 2821,\n         April 2001.\n   [16]  Shepler, S., Callaghan, B., Robinson,\
    \ D., Thurlow, R., Beame,\n         C., Eisler, M., and D. Noveck, \"Network File\
    \ System (NFS)\n         version 4 Protocol\", RFC 3530, April 2003.\n   [17]\
    \  Campbell, B. and R. Sparks, \"Control of Service Context using\n         SIP\
    \ Request-URI\", RFC 3087, April 2001.\n   [18]  Rosenberg, J. and H. Schulzrinne,\
    \ \"An Offer/Answer Model with\n         Session Description Protocol (SDP)\"\
    , RFC 3264, June 2002.\n   [19]  Camarillo, G., \"The Internet Assigned Number\
    \ Authority (IANA)\n         Uniform Resource Identifier (URI) Parameter Registry\
    \ for the\n         Session Initiation Protocol (SIP)\", BCP 99, RFC 3969,\n \
    \        December 2004.\n   [20]  Burnett, D., Hunt, A., McGlashan, S., Porter,\
    \ B., Lucas, B.,\n         Ferrans, J., Rehor, K., Carter, J., Danielsen, P.,\
    \ and S.\n         Tryphonas, \"Voice Extensible Markup Language (VoiceXML) Version\n\
    \         2.0\", W3C REC REC-voicexml20-20040316, March 2004.\n   [21]  Van Dyke,\
    \ J., Burger, E., Ed., and A. Spitzer, \"Media Server\n         Control Markup\
    \ Language (MSCML) and Protocol\", Work in\n         Progress, December 2004.\n\
    \   [22]  Rosenberg, J., \"A Framework for Conferencing with the Session\n   \
    \      Initiation Protocol\", Work in Progress, October 2004.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Eric Burger\n   Brooktrout Technology, Inc.\n   18 Keewaydin\
    \ Dr.\n   Salem, NH  03079\n   USA\n   EMail: eburger@brooktrout.com\n   Jeff\
    \ Van Dyke\n   Brooktrout Technology, Inc.\n   18 Keewaydin Dr.\n   Salem, NH\
    \  03079\n   USA\n   EMail: jvandyke@brooktrout.com\n   Andy Spitzer\n   Brooktrout\
    \ Technology, Inc.\n   18 Keewaydin Dr.\n   Salem, NH  03079\n   USA\n   EMail:\
    \ woof@brooktrout.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
