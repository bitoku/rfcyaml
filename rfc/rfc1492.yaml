- title: __initial_text__
  contents:
  - '          An Access Control Protocol, Sometimes Called TACACS

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard.  Distribution of this memo is\n\
    \   unlimited.\n"
- title: Background
  contents:
  - "Background\n   There used to be a network called ARPANET.  This network consisted\
    \ of\n   end nodes (hosts), routing nodes (IMPs) and links.  There were (at\n\
    \   least) two types of IMPs: those that connected dedicated lines only\n   and\
    \ those that could accept dial up lines.  The latter were called\n   \"TIPs.\"\
    \n   People being what they were, there was a desire to control who could\n  \
    \ use the dial up lines.  Someone invented a protocol, called \"TACACS\"\n   (Terminal\
    \ Access Controller Access Control System?), which allowed a\n   TIP to accept\
    \ a username and password and send a query to a TACACS\n   authentication server,\
    \ sometimes called a TACACS daemon or simply\n   TACACSD.  This server was normally\
    \ a program running on a host. The\n   host would determine whether to accept\
    \ or deny the request and sent a\n   response back.  The TIP would then allow\
    \ access or not, based upon\n   the response.\n   While TIPs are -- shall we say?\
    \ -- no longer a major presence on the\n   Internet, terminal servers are.  Cisco\
    \ Systems terminal servers\n   implement an extended version of this TACACS protocol.\
    \  Thus, the\n   access control decision is delegated to a host.  In this way,\
    \ the\n   process of making the decision is \"opened up\" and the algorithms and\n\
    \   data used to make the decision are under the complete control of\n   whoever\
    \ is running the TACACS daemon.  For example, \"anyone with a\n   first name of\
    \ Joe can only login after 10:00 PM Mon-Fri, unless his\n   last name is Smith\
    \ or there is a Susan already logged in.\"\n   The extensions to the protocol\
    \ provide for more types of\n   authentication requests and more types of response\
    \ codes than were in\n   the original specification.\n   The original TACACS protocol\
    \ specification does exist.  However, due\n   to copyright issues, I was not able\
    \ to obtain a copy of this document\n   and this lack of access is the main reason\
    \ for the writing of this\n   document.  This version of the specification was\
    \ developed with the\n   assistance of Cisco Systems, who has an implementation\
    \ of the TACACS\n   protocol that is believed to be compatible with the original\n\
    \   specification.  To be precise, the Cisco Systems implementation\n   supports\
    \ both the simple (non-extended) and extended versions.  It is\n   the simple\
    \ version that would be compatible with the original.\n   Please keep in mind\
    \ that this is an informational RFC and does not\n   specify a standard, and that\
    \ more information may be uncovered in the\n   future (i.e., the original specification\
    \ may become available) that\n   could cause parts of this document to be known\
    \ to be incorrect.\n   This RFC documents the extended TACACS protocol use by\
    \ the Cisco\n   Systems terminal servers.  This same protocol is used by the\n\
    \   University of Minnesota's distributed authentication system.\n"
- title: 1. Protocol Semantics
  contents:
  - "1. Protocol Semantics\n   This section will describe the requests and responses.\
    \  The following\n   two sections will describe two different ways of encoding\
    \ the\n   protocol.\n   A request/response pair is the basic unit of interaction.\
    \  In this\n   pair, the client sends a request and the server replies with a\n\
    \   response.  All requests must be acknowledged with a response.  This\n   requirement\
    \ implies that all requests can be denied, although it is\n   probably futile\
    \ to attempt to deny a \"logout\" request.\n"
- title: 1.1 Connections
  contents:
  - "1.1 Connections\n   In some cases, a string of request/response pairs forms a\
    \ larger\n   unit, called a \"connection.\"\n   There are three types of connections:\n\
    \   1) Authenticate only, no connection:\n           client:  sends an AUTH packet\n\
    \           server:  responds with a REPLY\n   2) Login connection:\n        \
    \   client:  sends a LOGIN packet\n           server:  responds with a REPLY\n\
    \           repeat zero or more times:\n                   client:  sends a CONNECT\
    \ packet\n                   server:  responds with a REPLY\n           client:\
    \  sends a LOGOUT packet\n           server:  responds with a REPLY\n   3) SLIP\
    \ connection:\n           client:  sends a LOGIN packet\n           server:  responds\
    \ with a REPLY\n           repeat zero or more times:\n                   client:\
    \  sends a CONNECT packet\n                   server:  responds with a REPLY\n\
    \           client:  sends a SLIPADDR packet\n           server:  responds with\
    \ a REPLY\n           repeat zero or more times:\n                   client: \
    \ sends a CONNECT packet\n                   server:  responds with a REPLY\n\
    \           client:  sends a SLIPON packet\n           server:  responds with\
    \ a REPLY\n           client:  sends a LOGOUT packet (immediate)\n           server:\
    \  responds with a REPLY\n           client:  sends a SLIPOFF packet\n       \
    \    server:  responds with a REPLY\n"
- title: 1.2 Requests
  contents:
  - "1.2 Requests\n   This section lists the requests supported by the protocol. \
    \ The\n   responses are described in the later encodings sections.\n   AUTH(username,\
    \ password, line, style)\n      This request asks for an authentication.  The\
    \ parameters are:\n              - the username\n              - the password\n\
    \              - an indication of which line the request is for, and\n       \
    \       - a style of authentication\n      The username is a string that identifies\
    \ the user.  In principle,\n      it can be of any length and contain any characters.\
    \  In practice,\n      it should be no longer than 128 characters and should contain\
    \ only\n      the ASCII characters \"!\" (33 decimal) through \"~\" (126 decimal),\n\
    \      inclusive.\n      The password is a string that is used to authenticate\
    \ the user\n      identified by the username.  In principle, it can be of any\
    \ length\n      and contain any characters.  In practice, it should be no longer\n\
    \      than 128 characters and should contain only the ASCII characters\n    \
    \  \"!\" (33 decimal) through \"~\" (126 decimal), inclusive.\n      The line\
    \ is a non-negative decimal integer.  If the client\n      supports multiple physical\
    \ access channels, this value identifies\n      the particular channel.  By convention,\
    \ lines are numbered\n      starting from one, although this should be taken with\
    \ a grain of\n      salt.  For example, Cisco Systems' implementation uses zero\
    \ to\n      designate the console port, then continues with one for the \"main\"\
    \n      serial lines. Clients that support only one channel should use\n     \
    \ line zero.\n      The authentication style is a possibly empty string.  It\n\
    \      identifies the particular style of authentication to be performed.\n  \
    \    Its syntax and semantics are local.\n      Example:\n              AUTH(\"\
    fin@unet.umn.edu\", \"fake-password\", 0, \"staff\")\n      This specifies a username\
    \ of \"fin@unet.umn.edu\" (which happens to\n      be my e-mail address), a password,\
    \ an indication that no line is\n      associated with this request, and a style\
    \ of \"staff\".  The\n      semantics for this style might be that I am required\
    \ to be a staff\n      member (in addition, of course, to supplying a valid username\
    \ and\n      password).  The server would presumably consult an external\n   \
    \   database to verify the staff status.\n      As a local option, the implementation\
    \ may choose to encode the\n      style information by using alternate port numbers.\
    \  E.g. port 4001\n      would mean style 1, 4002 would be style 2, etc.\n   \
    \   Note that the AUTH request type cannot be sent using the UDP\n      encoding.\n\
    \   LOGIN(username, password, line) returns (result1, result2, result3)\n    \
    \  This request asks for an authentication and signals that -- if the\n      authentication\
    \ succeeds -- a login connection is starting.  The\n      parameters are:\n  \
    \    - the username\n      - the password\n      - an indication of which line\
    \ the request is for\n      The meanings of the input fields are the same as the\
    \ AUTH request.\n      If the request is successful, this request returns three\
    \ result\n      values in addition to the success status.  The result values are\n\
    \      non-negative integers.  Their interpretation is local.  For\n      example,\
    \ Cisco Systems terminal servers interpret result3 to be\n      the identifier\
    \ of a local access list to use for additional\n      validation.\n   CONNECT(username,\
    \ password, line, destinationIP, destinationPort)\n   returns (result1, result2,\
    \ result3)\n      This request can only be issued when the username and line specify\n\
    \      an already-existing connection.  As such, no authentication is\n      required\
    \ and the password will in general be the empty string. It\n      asks, in the\
    \ context of that connection, whether a TCP connection\n      can be opened to\
    \ the specified destination IP address and port.\n      The return values are\
    \ as for LOGIN.\n   SUPERUSER(username, password, line)\n      This request can\
    \ only be issued when the username and line specify\n      an already-existing\
    \ connection.  As such, no authentication is\n      required and the password\
    \ will in general be the empty string.  It\n      asks, in the context of that\
    \ connection, whether the user can go\n      into \"super-user\" or \"enable\"\
    \ mode on the terminal server.\n      As an example of the flexibility inherint\
    \ in this whole scheme,\n      the TACACSD supplied by Cisco Systems ignores the\
    \ username part\n      and instead checks wether the password matches that of\
    \ the special\n      user \"$enable$\".\n   LOGOUT(username, password, line, reason)\n\
    \      This request can only be issued when the username and line specify\n  \
    \    an already-existing connection.  As such, no authentication is\n      required\
    \ and the password will in general be the empty string.  It\n      indicates that\
    \ the connection should be terminated (but see\n      SLIPON).  It must be acknowledged,\
    \ but the success/fail status of\n      the acknowledgment is irrelevant.  The\
    \ reason value indicates why\n      the connection is terminating.  A null reason\
    \ value is supplied\n      when the connection is going into SLIP mode.\n   SLIPON(username,\
    \ password, line, SLIPaddress) returns (result1,\n   result2, result3)\n     \
    \ This request can only be issued when the username and line specify\n      an\
    \ already-existing connection.  As such, no authentication is\n      required\
    \ and the password will in general be the empty string.  It\n      asks, in the\
    \ context of that connection, whether the specified\n      SLIPaddress can be\
    \ used for the remote end of the connection.\n      If the server replies with\
    \ a success, the client can proceed to a\n      SLIPON request.  (It need not\
    \ do so right away, however.)\n      Note that semantics of \"username\" can get\
    \ hairy.  For example, the\n      Cisco Systems implementation encodes information\
    \ in this way:\n      - If the user just requested the default address be assigned,\
    \ this\n      field holds the username in lower case.\n      - If the user requested\
    \ a specific IP address or host name for the\n      SLIP connection, this field\
    \ contains the requested host name in\n      UPPER case.\n      If the server\
    \ replies with a success, the client will immediately\n      send a LOGOUT request.\
    \  However, the connection will remain\n      established until a SLIPOFF request\
    \ is sent.  No other\n      authentication requests will be sent for that connection.\n\
    \      SLIPaddress specifies the IP address used by the remote host.  If\n   \
    \   a SLIPADDR request has been made, it will be that address.\n      Otherwise,\
    \ it will be the default address assigned by the client\n      (e.g., Cisco terminal\
    \ server).\n      The return values are as for LOGIN.\n   SLIPOFF(username, password,\
    \ line, reason)\n      This request can only be issued when the username and line\
    \ specify\n      an already-existing connection that is in \"SLIP\" mode.  As\
    \ such,\n      no authentication is required and the password will in general\
    \ be\n      the empty string.  It indicates that the connection should be\n  \
    \    terminated.  It must be acknowledged, but the success/fail status\n     \
    \ of the acknowledgment is irrelevant.  The reason value indicates\n      why\
    \ the connection is terminating.\n"
- title: '2.0 UDP Encoding: TACACS'
  contents:
  - "2.0 UDP Encoding: TACACS\n   This section describes the UDP encoding of the requests\
    \ that have\n   just been described.  It also describes the responses.  This UDP\n\
    \   encoding forms the basis of the historical TACACS protocol.\n   This protocol\
    \ uses port 49.  This assignment continues to be\n   confirmed by the IANA in\
    \ the Assigned Numbers RFCs.  (I can't say\n   that it was assigned by the IANA\
    \ as the assignment preceded the\n   organization.)\n   The basic packet format\
    \ is shown here.  All multi-bytes values are in\n   network byte order.  Unless\
    \ otherwise specified, all values given are\n   in decimal.  Unused fields should\
    \ be set to zero, but the recipient\n   should not depend on that setting.\n \
    \  As was mentioned earlier, there are both simple and extended forms,\n   of\
    \ which the simple form is a proper subset of the extended form.  A\n   server\
    \ should support both.  I will describe both forms in parallel.\n   Simple Form\n\
    \   The fields are:\n      offset       length  field\n      0    1       version\n\
    \      1    1       type\n      2    2       nonce value\n      4    1       username\
    \ length (to server) / response (to client)\n      5    1       password length\
    \ (to server) / reason (to client)\n   in the usual packet layout format:\n  \
    \  0                   1                   2                   3\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :    Version    :     Type      :             Nonce             :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   : User len/Resp : PW len/Reason :            data...            :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Extended Form\n   The fields are:\n           offset  length  field\n    \
    \       0       1       version\n           1       1       type\n           2\
    \       2       nonce value\n           4       1       username length\n    \
    \       5       1       password length\n           6       1       response\n\
    \           7       1       reason\n           8       4       result1\n     \
    \      12      4       destination host, IP address\n           16      2    \
    \   destination port\n           18      2       line\n           20      4  \
    \     result2\n           24      2       result3\n           26      varies \
    \ data: username + password\n   in the usual packet layout format:\n    0    \
    \               1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :    Version    :     Type      :             Nonce             :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :   User len    : Password len  :   Response    :    Reason     :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                           Result 1                            :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                      Destination Address                      :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :           Dest Port           :             Line              :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                           Result 2                            :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :           Result 3            :            data...            :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 2.1 Fields
  contents:
  - "2.1 Fields\n   The VERSION field specifies the version number.  It must be zero\
    \ for\n   simple or 128 (80 hexadecimal) for extended.\n   The TYPE field encodes\
    \ the request type.  Values are:\n           LOGIN           1\n           RESPONSE\
    \        2       (server to client only)\n           CHANGE          3\n     \
    \      FOLLOW          4\n           CONNECT         5\n           SUPERUSER \
    \      6\n           LOGOUT          7\n           RELOAD          8\n       \
    \    SLIPON          9\n           SLIPOFF         10\n           SLIPADDR   \
    \     11\n   Other values below 128 are reserved for future use.  Values from\
    \ 128\n   to 255 are reserved for local use.\n   Note that the semantics of the\
    \ CHANGE, FOLLOW, RELOAD requests have\n   not been determined.\n   The NONCE\
    \ field is set by the client to an arbitrary value.  Its\n   purpose is to allow\
    \ clients that may have multiple outstanding\n   requests to determine which request\
    \ a response is for. The server\n   must copy this value to the reply unaltered.\n\
    \   The USERNAME LENGTH field is set by the client to the length of the\n   username\
    \ in characters.  Legal values are 0 to 255, inclusive. The\n   server must copy\
    \ this value to the reply unaltered.\n   The PASSWORD LENGTH is set by the client\
    \ to the length of the\n   password in characters. Legal values are 0 to 255,\
    \ inclusive. The\n   server must copy this value to the reply unaltered.\n   The\
    \ RESPONSE field should be set by the client to zero.  The server\n   sets the\
    \ value to one of:\n           value   meaning\n           1       accepted\n\
    \           2       rejected\n   Other values below 128 are reserved for future\
    \ use.  Values from 128\n   to 255 are reserved for local use.\n   The REASON\
    \ field should be set by the client to zero, except for\n   LOGOUT and SLIPOFF\
    \ requests, which may use values of 4, 5, or 6.  The\n   server sets the value\
    \ to one of:\n           value   meaning         notes\n           0       none\
    \            used for ACCEPTED or if the server\n                            \
    \       is ornery\n           1       expiring\n           2       password\n\
    \           3       denied\n           4       quit            user quit normally\n\
    \           5       idle            idle timeout\n           6       drop    \
    \        carrier dropped\n           7       bad             too many bad passwords\n\
    \   The values from 4 to 6 will only be used for reasons for LOGOUT or\n   SLIPOFF\
    \ requests: they will not be returned by the server.  Other\n   values below 128\
    \ are reserved for future use.  Values from 128 to 255\n   are reserved for local\
    \ use.\n   The RESULT1 field should be set by the client to zero.  For LOGIN or\n\
    \   CONNECT requests, it is set by the server as specified in the request\n  \
    \ description.  For all other requests, it should be set by the server\n   to\
    \ zero.\n   The DESTINATION HOST field is set by the client.  On CONNECT, SLIPON,\n\
    \   and SLIPOFF requests it specifies an IP address.  It should be set to\n  \
    \ zero on all other requests.  For SLIPON and SLIPOFF request, this\n   value\
    \ should be the IP address assigned to the line.  For CONNECT\n   requests, this\
    \ value is the IP address of the host that the user is\n   attempting to connect\
    \ to.  The server copies this value to the reply.\n   The DESTINATION PORT field\
    \ is set by the client.  On CONNECT requests\n   it specifies the port number\
    \ that the user is attempting to connect\n   to.  It should be set to zero on\
    \ all other requests. The server\n   copies this value to the reply.\n   The LINE\
    \ field is set by the client to the line number that the\n   request is for. \
    \ The server copies this value to the reply.\n   The RESULT2 field should be set\
    \ by the client to zero.  For LOGIN or\n   CONNECT requests, it is set by the\
    \ server as specified in the request\n   description.  For all other requests,\
    \ it should be set by the server\n   to zero.\n   The RESULT3 field should be\
    \ set by the client to zero.  For LOGIN or\n   CONNECT requests, it is set by\
    \ the server as specified in the request\n   description.  For all other requests,\
    \ it should be set by the server\n   to zero.\n   The DATA field contains just\
    \ the text of the username and password,\n   with no separator characters (you\
    \ use username length and password\n   length to sort them out).  The server does\
    \ not copy the values to the\n   reply. (However, the server does copy the username\
    \ length and\n   password length fields to the reply.) The username data may be\
    \ in\n   upper case: comparisons should be case-insensitive.\n"
- title: 2.2 What a Client Does
  contents:
  - "2.2 What a Client Does\n   The client must format and send a UDP request to port\
    \ 49.  It\n   constructs the request by following these steps:\n           - set\
    \ the version to 128\n           - set the type to that of the request\n     \
    \      - set the nonce to a unique value that is different from all\n        \
    \     outstanding requests\n           - set the username length\n           -\
    \ set the password length\n           - set the response to zero\n           -\
    \ set the reason to zero (except for LOGOUT and SLIPOFF)\n           - set the\
    \ result1 to zero\n           - if CONNECT, SLIPON, or SLIPOFF, set the destination\
    \ address\n             to the IP address, otherwise set it to zero\n        \
    \   - if CONNECT, set the destination port to the port, otherwise\n          \
    \   set it to zero\n           - set the line\n           - set the result2 to\
    \ zero\n           - set the result3 to zero\n           - copy the username to\
    \ the location just after result3\n           - copy the password to the location\
    \ just after the end of the\n             username\n   Send the request.  Wait\
    \ for a reasonable (and hopefully configurable)\n   period of time.  If no response\
    \ has been received, retry a reasonable\n   (and hopefully configurable) number\
    \ of times.  Reasonable default\n   wait times are 5 seconds and retries are 2.\n\
    \   If a response has been received, use the nonce value (and as many\n   other\
    \ fields as you like) to match it to an outstanding request.  If\n   there is\
    \ no matching outstanding request, take appropriate (and\n   hopefully configurable)\
    \ action such as discarding and/or logging the\n   packet.\n   If the response\
    \ matches an outstanding request, examine the response\n   and reason codes and\
    \ take whatever action you deem correct.  For\n   responses to LOGIN and CONNECT\
    \ requests, also incorporate the\n   result1, result2, and result3 values as you\
    \ deem correct.\n"
- title: 2.3 What a Server Does
  contents:
  - "2.3 What a Server Does\n   Upon receipt of a UDP format request, the server examines\
    \ the data in\n   the request packet and determines its response.  It constructs\
    \ the\n   reply by following these steps:\n           - set the version to 128\n\
    \           - set the type to RESPONSE (2)\n           - copy the nonce value\n\
    \           - copy the username length value\n           - copy the password length\
    \ value\n           - set the response value to the desired response\n       \
    \    - set the reason value to the desired reason\n           - if LOGIN or CONNECT,\
    \ set the result1 else zero the result1\n           - copy the destination host\
    \ value\n           - copy the destination port value\n           - copy the line\
    \ value\n           - if LOGIN or CONNECT, set the result2 else zero the result2\n\
    \           - if LOGIN or CONNECT, set the result3 else zero the result3\n   \
    \        - do NOT copy the username or password data\n   (As always, be liberal\
    \ in what you expect and conservative in what\n   you send.) Send the response.\
    \  Do not attempt to retry, as you have\n   no basis for determining whether a\
    \ retry is required.  Any retries\n   are up to the client.  This, of course,\
    \ implies that requests are\n   idempotent.  They aren't, of course, so the retries\
    \ must be\n   considered when trying to assemble requests into connections.\n"
- title: 3.0 TCP Encoding
  contents:
  - "3.0 TCP Encoding\n   This section describes the TCP encoding of the requests\
    \ and\n   responses.  This encoding is not compatible with the historical\n  \
    \ TACACS protocol.  However, it is somewhat more \"modern\" in that it\n   has\
    \ been updated to provide for current feature needs.\n   This protocol does not\
    \ use a reserved port.  Instead, it must be\n   possible to configure the ports\
    \ used by both the the client and\n   server.\n   The basic request format is\
    \ shown here.  The request consists of four\n   lines of ASCII text.  All numeric\
    \ values are expressed in ASCII as\n   decimal integers.\n           <version>\
    \ <type> <parameters>\n           <username>\n           <password>\n        \
    \   <line>\n   Each line in the example corresponds to one line of text.  That\
    \ is,\n   the lines are separated with <CR>/<LF> (13/10 decimal) pairs.  In no\n\
    \   event may \"bare\" <CR> or <LF> characters appear within a field.  In\n  \
    \ addition, <NUL> (0 decimal) characters may not be sent.\n   The <version> and\
    \ <type> fields are separated with one or more\n   <SPACE> (32 decimal) or <TAB>\
    \ (9 decimal) characters.\n   The <parameters> field is optional.  If present,\
    \ it is separated from\n   the <type> field and internal parameters separated\
    \ from each other by\n   or more <SPACE> or <TAB> characters.  Any trailing <SPACE>\
    \ or <TAB>\n   characters present on this line should be ignored by the server:\
    \ they\n   should not be taken to imply a trailing empty field.\n   In theory\
    \ there are no line length limits.  In practice, lines should\n   not exceed 255\
    \ characters (counting the <CR> and <LF>) and probably\n   should be 80 characters\
    \ or less.\n"
- title: 3.1 Fields
  contents:
  - "3.1 Fields\n   The VERSION field specifies the version number.  It must be 1.\
    \  Other\n   values below 128 are reserved for future use.  Values from 128 to\
    \ 255\n   are reserved for local use.\n   The TYPE field encodes the request type.\
    \  Values are:\n           AUTH\n           LOGIN\n           CONNECT\n      \
    \     SUPERUSER\n           LOGOUT\n           SLIPON\n           SLIPOFF\n  \
    \ I.e., the keyword simply encodes itself.  It must be in upper case.\n   Keywords\
    \ that begin with the letter \"X\" are reserved for local use.\n   The USERNAME\
    \ field contains the text of the username.  Leading and\n   trailing <SPACE> or\
    \ <TAB> characters are considered significant.  The\n   username data may be in\
    \ upper case: comparisons should be case-\n   insensitive.\n   The PASSWORD field\
    \ contains the text of the password.  Leading and\n   trailing <SPACE> or <TAB>\
    \ characters are considered significant.\n   The LINE field is set by the client\
    \ to the line number that the\n   request is for.\n"
- title: 3.2 Responses
  contents:
  - "3.2 Responses\n   Appendix E of STD 10, RFC 821 describes the general theory\
    \ of reply\n   codes.  The this protocol follows the format described in that\n\
    \   document.  In a nutshell, replies are of the form:\n           <number> <text>\n\
    \   Where <number> is a three-digit decimal value and <text> is an\n   arbitrary\
    \ text string, presumably containing only printing text\n   characters (<SP> (32\
    \ decimal) through \"~\" (126 decimal)).  At least\n   one <SP> (32 decimal) character\
    \ separates the number from the text.\n   A <CR>/<LF> sequence follows the text.\n\
    \   The three digit codes completely determine the response.  The text\n   should\
    \ be considered an explanatory comment for human understanding.\n   However, even\
    \ without knowing all values, the first digit can be used\n   to determine the\
    \ overall nature of the response.  The encodings are:\n           1       Positive\
    \ Preliminary: the request is acceptable,\n                   but no action will\
    \ be taken until an additional\n                   request is made (not used in\
    \ this version of the\n                   protocol)\n           2       Positive\
    \ Completion\n           3       Positive Intermediate: the request is acceptable\n\
    \                   so far, but has not been completely transferred\n        \
    \           (not used in this version of the protocol)\n           4       Transient\
    \ Negative: the request is not acceptable\n                   for now.  It is\
    \ acceptable to retry, as another\n                   instance may have a different\
    \ result.\n           5       Permanent Negative: the request is not acceptable\n\
    \   The text portion is optional (i.e., may be the empty string) and it\n   describes\
    \ the meaning of the message in human readable form.\n   While different server\
    \ implementations will result in different\n   messages, the following are suggested:\n\
    \           201 accepted: # # #\n           202 accepted, password is expiring:\
    \ # # #\n           401 no response; retry\n           501 invalid format\n  \
    \         502 access denied\n   The \": # # #\" in the first two messages is the\
    \ suggested way of\n   returning the three result codes for LOGIN and CONNECT\
    \ requests.\n"
- title: 3.3 What a Client Does
  contents:
  - "3.3 What a Client Does\n   The client opens a TCP connection to the locally-configured\
    \ address\n   and port.  It sends the request by sending:\n           - the character\
    \ \"1\"\n           - one or more <SPACE> or <TAB> characters\n           - the\
    \ request type as an ASCII string\n           - if an AUTH, send one or more <SPACE>\
    \ or <TAB> characters\n             and the authentication style\n           -\
    \ if a CONNECT, SLIPON, or SLIPOFF, send one or more <SPACE>\n             or\
    \ <TAB> characters and the IP address in dotted decimal\n             notation\n\
    \           - if a CONNECT, send one or more <SPACE> or <TAB> characters\n   \
    \          and the port number in decimal\n           - a <CR>/<LF>\n        \
    \   - the username (or hostname for SLIPADDR)\n           - a <CR>/<LF>\n    \
    \       - the password\n           - a <CR>/<LF>\n           - the line\n    \
    \       - a <CR>/<LF>\n   Then read one line from the connection and close the\
    \ connection.\n   This encoding lets TCP take care of waiting, retries, and matching\
    \ up\n   requests and responses.\n   Examine the response line and take whatever\
    \ action you deem correct.\n"
- title: 3.4 What the Server Does
  contents:
  - "3.4 What the Server Does\n   The server waits on the locally-specified port for\
    \ requests.  When\n   one is made, it reads four lines of input.\n   It examines\
    \ the first line for a valid version number and request.\n   It also records any\
    \ optional parameters.\n   It uses the username, password, and line number along\
    \ with any other\n   information it deems fit to determine its response.\n   It\
    \ then sends exactly one line of response, terminated by a\n   <CR>/<LF>, and\
    \ closes the connection.\n"
- title: 4.0 Pros and Cons
  contents:
  - "4.0 Pros and Cons\n   Advantages to using the UDP format:\n           - lower\
    \ overhead\n           - compatible with historical standard\n           - some\
    \ existing equipment supports it\n   Advantages to using the TCP format:\n   \
    \        - easier to implement, especially on machines with no or\n          \
    \   poor UDP support\n           - simpler, cleaner syntax\n           - potentially\
    \ wider range of error codes, and support for\n             temporary and negotiated\
    \ authentication sequences\n"
- title: 5.0 Security Notes
  contents:
  - "5.0 Security Notes\n   While the protocol itself has been described, there are\
    \ a number of\n   other considerations worth mentioning.\n   First, the protocol\
    \ carries the username and password in clear text\n   in either a single UDP packet\
    \ or a TCP stream.  As such, if an\n   attacker is capable of monitoring that\
    \ data, the attacker could\n   capture username/password pairs.  Implementations\
    \ can take several\n   steps to minimize this danger:\n   - Use point-to-point\
    \ links where possible.\n   - Physically secure the transmission medium.\n   -\
    \ If packets must traverse multiple network segments, use a secure\n   routing\
    \ subsystem.  This implies:\n           - Tight control over router configurations.\n\
    \           - Tight control over routing protocols.\n           - Avoid use of\
    \ bridges, as they can be silently fooled into\n             duplicating packets.\n\
    \   Second, this protocol potentially opens up a new way of probing\n   usernames\
    \ and passwords.  Thus, implementations may wish to have\n   servers:\n      \
    \     - limit responses to a controlled list of clients,\n           - throttle\
    \ the rate of responding to requests,\n           - log all failures (and possibly\
    \ successes, too).\n   Third, this protocol essentially allows clients to offload\n\
    \   accept/reject decisions to servers.  While an obvious implementation\n   would\
    \ simply use the server's native login mechanism to make the\n   determination,\
    \ there is no reason to limit implementations to that\n   mechanism. Servers could:\n\
    \           - use alternate lists of accounts (e.g., password files),\n      \
    \     - use alternate mechanisms for accessing the accounts (e.g.,\n         \
    \    a database, NIS),\n           - use alternate algorithms (e.g., SecureID\
    \ cards),\n           - translate the request to another protocol and use that\n\
    \             protocol to make the determination (e.g., Kerberos).\n   Fourth,\
    \ the use of a \"fanout\" server (described in the next section)\n   allows for:\n\
    \           - centralized logging of usage for attack analysis\n           - centralized\
    \ policy:\n                   - ability to block selected specific users\n   \
    \                - ability to block selected user names (e.g., don't\n       \
    \              allow \"root\" or \"guest\")\n                   - ability to block\
    \ poor passwords (e.g., none or weak)\n"
- title: 6.0 Case Study
  contents:
  - "6.0 Case Study\n   This section presents the basic steps used by the implementation\
    \ at\n   the University of Minnesota.  Two examples will be used.  The first\n\
    \   is a basic terminal login.  The second is a database access\n   verification.\n\
    \   Usernames are in one of three forms:\n           First.M.Last-#@umn.edu\n\
    \           First.M.Last-#\n           user@host\n   A name in the first form\
    \ is converted to one in the second.\n   A name in the second form is looked up\
    \ in the University-wide\n   directory system.  If found, the associated electronic\
    \ mail address\n   is treated as if the third form was entered.\n   The third\
    \ form specifics the name of a computer whose manager has\n   agreed to perform\
    \ validations and the name of an account on that\n   computer.\n   The system\
    \ that we use allows for many requesting clients (typically\n   modem pools).\
    \  Further, each client can support multiple distinct\n   pools of users.  For\
    \ example, lines 1-20 could be general access, but\n   lines 21-25 could be 800-numbers\
    \ with a restricted set of valid\n   users.  The system supports this distinction\
    \ by specifying which\n   validation computers are legal for each modem pool.\n"
- title: 6.1 Terminal Login
  contents:
  - "6.1 Terminal Login\n   On the Cisco Terminal Server:\n   - accept a connection\n\
    \   - request a username and password\n   - pack the request into a UDP TACACS\
    \ packet and send to the central\n     fanout\n   Central Fanout:\n   - accept\
    \ a request\n   - if the request is not in a valid format, return \"nope\"\n \
    \  - log the request\n   - if the source IP address is not in a list of valid\
    \ clients,\n     status = \"nope\"\n   - else if the username contains invalid\
    \ characters, status = \"nope\"\n   - else\n           if the username is of the\
    \ form First.M.Last-#@umn.edu,\n                   convert to First.M.Last-#\n\
    \           if the username is of the form First.M.Last-#,\n                 \
    \  look up the name in the directory\n                   if the name is not found,\
    \ status = \"nope\"\n                   otherwise, use the e-mail address as the\
    \ username\n           if the user is on a special \"blocked\" list, status =\
    \ \"nope\"\n                   and send mail warning that access to a blocked\n\
    \                   account was attempted\n           split the username into\
    \ user and host parts\n           if the host is not on a list of known servers,\n\
    \                   status = \"nope\"\n           else if the host is not allowed\
    \ to validate this type of\n                   request for this pool, status =\
    \ \"nope\"\n           now format a request for validation of the user and send\
    \ it\n           to the specified host\n           if no response, status = \"\
    nope\"\n           otherwise set the status to the returned status\n   - log what\
    \ response is going to be returned\n   - return the response\n   Validation Host:\n\
    \   This machine can run a \"stripped down\" version of the central fanout.\n\
    \   It need perform no special validation or logging, with one exception.\n  \
    \ - accept a request\n   - if the request is not in a valid format, return \"\
    nope\"\n   - if the request is not from the central fanout, return \"nope\"\n\
    \   - figure the return status\n   - return the response\n"
- title: 6.2 Database Access Verification
  contents:
  - "6.2 Database Access Verification\n   In this example, assume that a database\
    \ is only to be accessed by\n   faculty and staff.\n   Mainframe:\n   - the user\
    \ is on the mainframe and makes a request\n   - the program requests username\
    \ and password\n   - the program packs the request into a UDP TACACS packet and\
    \ send to\n     the central fanout\n   Central Fanout:\n   - accept a request\n\
    \   - if the request is not in a valid format, return \"nope\"\n   - log the request\n\
    \   - if the source IP address is not in a list of valid clients,\n     status\
    \ = \"nope\"\n   - else if the username contains invalid characters, status =\
    \ \"nope\"\n   - else\n           if the username is of the form First.M.Last-#@umn.edu,\n\
    \                   convert to First.M.Last-#\n           if the username is of\
    \ the form First.M.Last-#,\n                   look up the name in the directory\n\
    \                   if the name is not found, status = \"nope\"\n            \
    \       otherwise, use the e-mail address as the username\n                  \
    \    and obtain the staff status from the directory\n           if the user is\
    \ on a special \"blocked\" list, status = \"nope\"\n                   and send\
    \ mail warning that access to a blocked\n                   account was attempted\n\
    \           split the username into user and host parts\n           if the host\
    \ is not on a list of known servers,\n                   status = \"nope\"\n \
    \          else if the host is not allowed to validate this type of\n        \
    \           request for this pool, status = \"nope\"\n           now format a\
    \ request for validation of the user and send it\n           to the specified\
    \ host\n           if no response or status is \"nope\", status = \"nope\"\n \
    \          else if the user originally gave a user@host mail address,\n      \
    \             do a directory lookup and obtain the staff status\n           set\
    \ the status to the staff status\n   - log what response is going to be returned\n\
    \   - return the response\n   Note that the validation host is unchanged.\n"
- title: References
  contents:
  - "References\n   [RFC821] Postel, J. \"Simple Mail Transfer Protocol\", STD 10,\
    \ RFC 821,\n   USC/Information Sciences Institute, August 1982.\n   [RFC1340]\
    \ Reynolds, J. and J. Postel, \"Assigned Numbers,\" STD 2, RFC\n   1340, USC/Information\
    \ Sciences Institute, July 1992.\n   Anderson, Brian; Ruth, Greg; Ditmars, Peter;\
    \ Eisner, Sharon;\n   Delsignore, John (1985) TAC Access Control System Protocols,\
    \ Second\n   Edition: August 16 1985. BBN Tech Memo CC-0045.\n   Cisco Systems,\
    \ Inc. (September 1992) Communications Server\n   Configuration and Reference.\
    \  Menlo Park, California.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are the main topic of this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Craig A. Finseth\n   Networking Services\n   Computer and\
    \ Information Services\n   University of Minnesota\n   130 Lind Hall\n   207 Church\
    \ St SE\n   Minneapolis MN 55455-0134\n   Phone: +1 612 624 3375\n   Fax:   +1\
    \ 612 626 1002\n   EMail: Craig.A.Finseth-1@umn.edu, or\n          fin@unet.umn.edu\n"
