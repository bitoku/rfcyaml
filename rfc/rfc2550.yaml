- title: __initial_text__
  contents:
  - '                            Y10K and Beyond

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   As we approach the end of the millennium, much attention has been\n\
    \   paid to the so-called \"Y2K\" problem.  Nearly everyone now regrets the\n\
    \   short-sightedness of the programmers of yore who wrote programs\n   designed\
    \ to fail in the year 2000.  Unfortunately, the current fixes\n   for Y2K lead\
    \ inevitably to a crisis in the year 10,000 when the\n   programs are again designed\
    \ to fail.\n   This specification provides a solution to the \"Y10K\" problem\
    \ which\n   has also been called the \"YAK\" problem (hex) and the \"YXK\" problem\n\
    \   (Roman numerals).\n"
- title: 1. Introduction, Discussion, and Related Work
  contents:
  - "1. Introduction, Discussion, and Related Work\n   Many programs and standards\
    \ contain, manipulate and maintain dates.\n   Comparing and sorting dates is a\
    \ common activity.  Many different\n   formats and standards for dates have been\
    \ developed and all have been\n   found wanting.\n   Early date formats reserved\
    \ only two digits to represent the year\n   portion of a date.  Programs that\
    \ use this format make mistakes when\n   dealing with dates after the year 2000.\
    \  This is the so-called Y2K\n   problem.\n   The most common fix for the Y2K\
    \ problem has been to switch to 4-digit\n   years.  This fix covers roughly the\
    \ next 8,000 years (until the year\n   9999) by which time, everyone seems convinced\
    \ that all current\n   programs will have been retired.  This is exactly the faulty\
    \ logic\n   and lazy programming practice that led to the current Y2K problem!\n\
    \   Programmers and designers always assume that their code will\n   eventually\
    \ disappear, but history suggests that code and programs are\n   often used well\
    \ past their intended circumstances.\n   The 4-digit year leads directly to programs\
    \ that will fail in the\n   year 10,000.  This proposal addresses the Y10K problem\
    \ in a general\n   way that covers the full range of date and time format issues.\n"
- title: 1.1 Current approaches
  contents:
  - "1.1 Current approaches\n   A large number of approaches exist for formatting\
    \ dates and times.\n   All of them have limitations.  The 2-digit year runs into\
    \ trouble\n   next year.  The 4-digit year hits the wall in the year 10,000. \
    \ A\n   16-bit year runs out in the year 65,536.  A 32-bit counter for the\n \
    \  number of seconds since 1970 [UNIX] wraps in 2038.  A 32-bit counter\n   for\
    \ the number of milli-seconds since booting crashes a Windows (TM)\n   PC in 49.7\
    \ days [Microsoft].\n   In this specification, we focus on the Y10K problems since\
    \ they are\n   most common and a large number of existing standards and protocols\n\
    \   are susceptible to them (section 7).  These standards, and new\n   proposals\
    \ on their way, will lead to a serious world-wide problem\n   unless efforts are\
    \ made now to correct the computing, government, and\n   business communities.\n\
    \   Already, a small cottage industry is popping up to deal with the Y10K\n  \
    \ problem [YUCK].  We encourage these efforts and, in the coming years,\n   this\
    \ effort can only grow in size and importance.\n"
- title: 1.2 A Fixed Format Y10K Fix
  contents:
  - "1.2 A Fixed Format Y10K Fix\n   At the time of this writing, only one proposal\
    \ [Wilborne] directly\n   deals with the Y10K problem.  In that proposal, dates\
    \ are represented\n   as decimal numbers with the dates compared numerically.\
    \  The proposed\n   format is simply YYYYYMMDD - i.e. 5-digit years.\n   To allow\
    \ numerical comparison of dates, this representation requires\n   a completely\
    \ fixed representation for the date.  There can be no\n   optional fields, the\
    \ date resolution is limited to the granularity of\n   one day, and this solution\
    \ fails in the year 100,000 (Y100K).\n"
- title: 1.2.2 Limitations of Numerical Comparison
  contents:
  - "1.2.2 Limitations of Numerical Comparison\n   While sufficient for the specific\
    \ Y10K problem, this solution is\n   limited.  Even if extended for 6-digit years,\
    \ it fails on 32-bit\n   systems (and future 32-bit system emulators) after the\
    \ date\n   represented by the number 2147481231 (December 31, 214748) leading\
    \ to\n   a Y214749 problem.  Similarly, 64-bit and 128-bit systems also will\n\
    \   fail, although somewhat later (after December 31, 922,337,203,685,477\n  \
    \ and December 31, 17,014,118,346,046,923,173,168,730,371,588,410\n   respectively).\n"
- title: 1.2.3 Granularity Issues
  contents:
  - "1.2.3 Granularity Issues\n   The granularity problems of a fixed format date\
    \ can be improved by\n   extending the date format to include greater precision\
    \ in the date.\n   However, since numerical comparison of dates requires a fixed\n\
    \   representation date, an extended format can not provide sufficient\n   resolution\
    \ for all foreseeable needs.\n   For instance, if the precision were extended\
    \ to the femto-second\n   range the date format would become YYYYYMMDDHHMMSSmmmuuunnnpppfff\n\
    \   (year, month, day, hour, minute, second, milli-second, micro-second,\n   nano-second,\
    \ pico-second, and femto-second).  The additional 21\n   digits of this format\
    \ limit the set of representable dates.  Compared\n   to 1.2.2, the 32-bit and\
    \ 64-bit forms of the date are instantly\n   exceeded, while the 128-bit version\
    \ would be viable - expiring on\n   December 31, 17,014,118,346,046.\n"
- title: 1.2.3.1 Extrapolation of Future Granularity Issues
  contents:
  - "1.2.3.1 Extrapolation of Future Granularity Issues\n   However, a simple extrapolation\
    \ of Moore's law shows that even\n   femto-second resolution will soon be inadequate.\
    \  Projecting current\n   CPU clock speeds forward, a femto-second clock speed\
    \ will be achieved\n   in only 30 years.  And, by the year 10,000 the projected\
    \ clock speed\n   of the Intel Pentium MMDCLXVI (TM) will be approximately 10\
    \ ** (-\n   1609) seconds.\n   This discussion clearly shows that any fixed-format,\
    \ integer\n   representation of a date is likely to be insufficiently precise\
    \ for\n   future uses.\n"
- title: 1.2.3.2 Floating Point Is No Solution
  contents:
  - "1.2.3.2 Floating Point Is No Solution\n   The temptation to use floating point\
    \ numbers to represent dates\n   should be avoided.  Like the longer fixed-format,\
    \ integer\n   representations of the date, floating point representations merely\n\
    \   delay the inevitable time when their range is exceeded.  In addition,\n  \
    \ the well known problems of real numbers - rounding, de-normalization,\n   non-uniform\
    \ distribution, etc. - just add to the problems of dealing\n   with dates.\n"
- title: 2 Structure of Y10K Solution
  contents:
  - "2 Structure of Y10K Solution\n   Any Y10K solution should have the following\
    \ characteristics.\n"
- title: 2.1 Compatibility
  contents:
  - "2.1 Compatibility\n   The format must be compatible with existing 4-digit date\
    \ formats.\n   Y2K compliant programs and standards must continue to work with\
    \ Y10K\n   dates before the year 10,000.  Y10K compliant programs can gradually\n\
    \   be developed over time and coexist with non-Y10K compliant programs.\n"
- title: 2.2 Simplicity and Efficiency
  contents:
  - "2.2 Simplicity and Efficiency\n   Y10K dates must allow dates after 10,000 to\
    \ be easily identified.\n   Within a program, there must be a simple procedure\
    \ for recognizing\n   the Y10K dates and distinguishing them from legacy dates.\n"
- title: 2.3 Lexical Sorting
  contents:
  - "2.3 Lexical Sorting\n   Y10K dates must be sortable lexically based on their\
    \ ASCII\n   representation.  The dates must not require specialized libraries\
    \ or\n   procedures.\n"
- title: 2.4 Future Extensibility
  contents:
  - "2.4 Future Extensibility\n   Y10K dates must support arbitrary precision dates,\
    \ and should support\n   dates extending arbitrarily far into the future and past.\
    \  Y10K dates\n   from different eras and with different precisions must be directly\n\
    \   comparable and sortable.\n"
- title: 2.4.1 Environmental Considerations
  contents:
  - "2.4.1 Environmental Considerations\n   The known universe has a finite past and\
    \ future.  The current age of\n   the universe is estimated in [Zebu] as between\
    \ 10 ** 10 and 2 * 10 **\n   10 years.  The death of the universe is estimated\
    \ in [Nigel] to occur\n   in 10 ** 11 - years and in [Drake] as occurring either\
    \ in 10 ** 12\n   years for a closed universe (the big crunch) or 10 ** 14 years\
    \ for an\n   open universe (the heat death of the universe).\n   In any case,\
    \ the prevailing belief is that the life of the universe\n   (and thus the range\
    \ of possible dates) is finite.\n"
- title: 2.4.2 Transcending Environmental Considerations
  contents:
  - "2.4.2 Transcending Environmental Considerations\n   However, we might get lucky.\
    \  So, Y10K dates are able to represent\n   any possible time without any limits\
    \ to their range either in the\n   past or future.\n   Y10K compliant programs\
    \ MAY choose to limit the range of dates they\n   support to those consistent\
    \ with the expected life of the universe.\n   Y10K compliant systems MUST accept\
    \ Y10K dates from 10 ** 12 years in\n   the past to 10 ** 20 years into the future.\
    \  Y10K compliant systems\n   SHOULD accept dates for at least 10 ** 29 years\
    \ in the past and\n   future.\n"
- title: 3 Syntax Overview
  contents:
  - "3 Syntax Overview\n   The syntax of Y10K dates consists of simple, printable\
    \ ASCII\n   characters.  The syntax and the characters are chosen to support a\n\
    \   simple lexical sort order for dates represented in Y10K format.  All\n   Y10K\
    \ dates MUST conform to these rules.\n   Every Y10K date MUST begin with a Y10K\
    \ year.  Following the year,\n   there MAY be an arbitrary sequence of digits.\
    \  The digits are\n   interpreted as MMDDHHMMSSmmmuuunnnpppfff...  (month, day,\
    \ hour,\n   minute, second, milli-second, micro-second, nano-second pico-second,\n\
    \   femto-second, etc. - moving left to right in the date, digits always\n   decrease\
    \ in significance).\n   All dates and times MUST be relative to International\
    \ Atomic Time\n   (TAI) [NRAO].\n   When comparing dates, a date precedes every\
    \ other date for which it\n   is a prefix.  So, the date \"19990401000000\" precedes\
    \ the date\n   \"19990401000000000\".  In particular, dates with the format YYYYMMDD\n\
    \   are interpreted to represent the exact instant that the day begins\n   and\
    \ precede any other date contained in that day.\n"
- title: 3.1 Years 1 - 9999
  contents:
  - "3.1 Years 1 - 9999\n   The current 4-digit year syntax covers all years from\
    \ 1000 - 9999.\n   These years are represented as 4 decimal digits.  Leading 0's\
    \ MUST be\n   added to the years before 1000 to bring the year to 4 digits.  Files\n\
    \   containing legacy pre-Y1K [Mike] dates will have to be converted.\n"
- title: 3.2 Years 10,000 through 99,999
  contents:
  - "3.2 Years 10,000 through 99,999\n   Four digits are not sufficient to represent\
    \ dates beyond the year\n   9999.  So, all years from 10,000 - 99,999 are represented\
    \ by 5 digits\n   preceded by the letter 'A'.  So, 10,000 becomes \"A10000\" and\
    \ 99,999\n   becomes \"A99999\".  Since 'A' follows '9' in the ASCII ordering,\
    \ all\n   dates with 5-digit years will follow all dates with 4-digit years\n\
    \   (for example, \"A10000\" will sort after \"9999\").  This gives us the\n \
    \  sort and comparison behaviour we want.\n"
- title: 3.3 Years 100,000 up to 10 ** 30
  contents:
  - "3.3 Years 100,000 up to 10 ** 30\n   By a simple generalization of 3.2, 6-digit\
    \ years are preceded by the\n   letter 'B', 7-digit years by 'C', etc.  Using\
    \ just the 26 upper-case\n   ASCII characters, we can cover all years up to 10**30\
    \ (the last year\n   representable is \"Z999999999999999999999999999999\").  Again,\
    \ since\n   the ASCII characters are sorted alphabetically, all dates sort\n \
    \  appropriately.\n"
- title: 3.4 Years 10 ** 30 and beyond (Y10**30)
  contents:
  - "3.4 Years 10 ** 30 and beyond (Y10**30)\n   As discussed in 2.4.1, the end of\
    \ the universe is predicted to occur\n   well before the year 10 ** 30.  However,\
    \ if there is one single\n   lesson to be learned from the current Y2K problems,\
    \ it is that\n   specifications and conventions have a way of out living their\n\
    \   expected environment.  Therefore we feel it is imperative to\n   completely\
    \ solve the date representation problem once and for all.\n"
- title: 3.4.1 Naive Approach for Y10**30 Problem
  contents:
  - "3.4.1 Naive Approach for Y10**30 Problem\n   The naive solution is to prepend\
    \ a single '^' (caret) - caret sorts\n   after all letters in the ASCII order)\
    \ before all years from 10 ** 30\n   to 10 ** 56.  Thus the year \"Z999999999999999999999999999999\"\
    \ is\n   followed by the year \"^A1000000000000000000000000000000\".  Similarly,\n\
    \   all years from 10 ** 56 to 10 ** 82 get one more caret.  So, the year\n  \
    \ \"^Z99999999999999999999999999999999999999999999999999999999\" is\n   followed\
    \ by the year\n   \"^^A100000000000000000000000000000000000000000000000000000000\"\
    .  This\n   scheme can be extended indefinitely by prepending one addition caret\n\
    \   for each additional factor of 10 ** 26 in the range of the year.\n   In this\
    \ approach, the number of digits in a date that are used to\n   represent the\
    \ year is simply:\n      26 * <number of '^'> + ASCII(<prefix letter>) - ASCII('A')\
    \ + 5\n   Note: this algorithm is provided for informational purposes only and\n\
    \   to show the path leading to the true solution.  Y10K dates MUST NOT\n   use\
    \ this format.  They MUST use the format in the next section.\n"
- title: 3.4.2 Space Efficient Approach for Y10**30 Problem
  contents:
  - "3.4.2 Space Efficient Approach for Y10**30 Problem\n   The solution in 3.4.1\
    \ is not a space efficient format for giving the\n   number of digits in the year.\
    \  The length of the prefix grows\n   linearly in the length of the year (which,\
    \ itself, grows\n   logarithmically over time).  Therefore, Y10K format dates\
    \ use an\n   improved, more compact encoding of the number of digits in the year.\n"
- title: 3.4.2.1 Years 10 ** 30 to 10 ** 56
  contents:
  - "3.4.2.1 Years 10 ** 30 to 10 ** 56\n   As in 3.4.1, a single '^' and letter precede\
    \ the year.\n"
- title: 3.4.2.2 Years 10 ** 56 to 10 ** 732
  contents:
  - "3.4.2.2 Years 10 ** 56 to 10 ** 732\n   The year is preceded by two carets (\"\
    ^^\") and two letters.  The\n   letters create a two digit, base 26 number which\
    \ is the number of\n   digits in the year minus 57.  So, the year\n   \"^Z99999999999999999999999999999999999999999999999999999999\"\
    \ is\n   followed by the year\n   \"^^AA100000000000000000000000000000000000000000000000000000000\"\
    .  The\n   last representable year with two carets is the year (10 ** 732) - 1\n\
    \   and is \"^^ZZ999..999\" (i.e. two carets and two Z's, followed by 732\n  \
    \ consecutive 9's).\n   The formula for the number of digits in the year is, based\
    \ on the two\n   digit prefix is:\n    26 * (ASCII(<prefix letter1>) - ASCII('A'))\
    \ +\n          ASCII(<prefix letter2>) - ASCII('A') + 57\n"
- title: 3.4.2.3 Years 10 ** 732 to 10 ** 18308
  contents:
  - "3.4.2.3 Years 10 ** 732 to 10 ** 18308\n   The next block of years has the number\
    \ of digits given by three\n   carets (\"^^^\") followed by three letters forming\
    \ a three-digit, base\n   26 number.  The number of digits in the year is given\
    \ by the formula:\n    676 * (ASCII(<prefix letter1>) - ASCII('A')) +\n     26\
    \ * (ASCII(<prefix letter2>) - ASCII('A')) +\n           ASCII(<prefix letter3>)\
    \ - ASCII('A') + 733\n"
- title: 3.4.2.4 General Format for Y10K Dates
  contents:
  - "3.4.2.4 General Format for Y10K Dates\n   In general, if there is at least one\
    \ letter in a Y10K year, the\n   number of the digits in the year portion of the\
    \ date is given by the\n   formula:\n       base26(fib(n) letters) + y10k(n)\n\
    \   Where \"n\" is the number of leading carets and the fig, base26 and\n   y10k\
    \ functions are defined with the following recurrence relations:\n      fib(n)\
    \ is the standard Fibonacci sequence with:\n      fib(0) = 1\n      fib(1) = 1\n\
    \      fib(n+2) = fib(n) + fib(n+1)\n      base26(m letters) is the base 26 number\
    \ represented by m letters\n      A-Z:\n      base26(letter) =  ASCII(<letter>)\
    \ - ASCII('A')\n      base26(string letter) = 26 * base26(string) + base26(letter)\n\
    \      y10k(n) is the necessary fudge factor to align the sequences\n      properly:\n\
    \      y10k(0) = 5\n      y10k(n+1) = 26 ** fib(n) + y10k(n)\n   If the year does\
    \ not have at least one letter in the year, then the\n   number of digits in the\
    \ year is:\n       4\n   This year format is space-efficient.  The length of the\
    \ prefix giving\n   number of digits in the year only grows logarithmically with\
    \ the\n   number of digits in the year.  And, the number of carets preceding\n\
    \   the prefix only grows logarithmically with the number of digits in\n   the\
    \ prefix.\n"
- title: 3.5 B.C.E. (Before Common Era) Years
  contents:
  - "3.5 B.C.E. (Before Common Era) Years\n   Now that have a format for all of the\
    \ years in the future, we'll take\n   on the \"negative\" years.  A negative year\
    \ is represented in \"Y10K-\n   complement\" form.  A Y10K-complement year is\
    \ computed as follows:\n    1) Calculate the non-negative Y10K year string as\
    \ in 3.4.2.4.\n    2) Replace all letters by their base 26 complement.  I.E. A\
    \ -> Z, B\n       -> Y, ... Z -> A.\n    3) Replace all digits in the year portion\
    \ of the date by their base\n       10 complement.  I.E. 0 -> 9, 1 -> 8, ... 9\
    \ -> 0.\n    4) Replace carets by exclamation points ('!').\n    5) Four-digit\
    \ years are pre-pended with a slash ('/')\n    6) Years that don't now begin with\
    \ an exclamation point or slash are\n       pre-pended with a star ('*').  (This\
    \ rule covers the negative 5-\n       31 digit years).\n   For example, the year\
    \ 1 BCE is represented by \"/9998\".  The\n   conversion is accomplished by applying\
    \ rules:\n    1) Calculate the non-negative Y10K year (\"1\" -> \"0001\")\n  \
    \  2) Complement the digits (\"0001\" -> \"9998\")\n    3) Four-digit numbers\
    \ get a leading slash.\n   The earliest four-digit BCE year (9999 BCE) becomes\
    \ \"/0000\" and the\n   year before that (10000 BCE) becomes \"*Z89999\".  The\
    \ earliest 5-digit\n   BCE year (99999 BCE) is \"*Z00000\".  And the year before\
    \ that (100000\n   BCE) is \"*Y899999\".  And so on.\n   These rules give the\
    \ desired sort order for BCE dates.  For example,\n   the following dates get\
    \ translated and sorted as:\n     Jun 6, 200 BCE            /97990606\n     199\
    \ BCE                   /9800\n     Jan 1, 199 BCE            /98000101\n"
- title: 3.6 Restrictions on Y10K Dates
  contents:
  - "3.6 Restrictions on Y10K Dates\n   There are no restrictions on legal values\
    \ for Y10K dates.  Y10K\n   compliant programs MUST accept any syntactically legal\
    \ Y10K date as a\n   valid date.  A '0' can be appended to the end of any Y10K\
    \ date,\n   yielding an equivalent date that sorts immediately after the original\n\
    \   date and represents the instant after the original date.\n   The following\
    \ are all valid representations (in sorted order) of the\n   first instant of\
    \ A10000:\n     A1\n     A10000\n     A1000001\n     A100000101000000\n     A1000001010000000000000000000000\n\
    \   Similarly, the following are all valid Y10K dates (in sorted order)\n   for\
    \ the time after the last instant of the A99999 and before the\n   first instant\
    \ of B100000:\n     A999991231250000\n     A999991232\n     A999992\n     A9999999999\n\
    \     A99999999990000000000000\n"
- title: 4 ABNF
  contents:
  - "4 ABNF\n   The following ABNF [Crocker] gives the formal syntax for Y10K years.\n\
    \   The initial characters definitions are given in their lexical\n   collation\
    \ (ASCII) order.\n   exclamation = '!'\n   star        = '*'\n   slash       =\
    \ '/'\n   digit       =  0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\n   letter    \
    \  =  A | B | C | D | E | F | G | H | I | J | K | L | M |\n                  \
    \ N | O | P | Q | R | S | T | U | V | W | X | Y | Z\n   caret       = '^'\n  \
    \ year     = [*(caret | exclamation) | star | slash ] [ *letter ]\n          \
    \   *digit\n   month    = 2digit\n   day      = 2digit\n   hour     = 2digit\n\
    \   minute   = 2digit\n   second   = 2digit\n   fraction = *digit\n   date   \
    \  = year [ month [ day [ hour [ minute [ second [ fraction\n             ]]]]]]\n"
- title: 5 Open Issues
  contents:
  - "5 Open Issues\n   There are a number date comparison problems that are beyond\
    \ the scope\n   of this specification.\n   1) Dates from different calendar systems\
    \ can not be directly\n      compared.  For instance, dates from the Aztec, Bhuddist,\
    \ Jewish,\n      Muslim, and Hittite calendars must be converted to a common\n\
    \      calendar before comparisons are possible.\n   2) Future re-numberings of\
    \ years are not covered.  If, and when, a\n      new \"Year 0\" occurs and comes\
    \ into general use, old dates will\n      have to be adjusted.\n   3) Continued\
    \ existence of Earth-centric time periods (year, day,\n      etc.) are problematical\
    \ past the up-coming destruction of the\n      solar system (5-10 billion years\
    \ or so).  The use of atomic-time\n      helps some since leap seconds are no\
    \ longer an issue.\n   4) Future standards and methods of synchronization for\
    \ inter-\n      planetary and inter-galactic time have not been agreed to.\n \
    \  5) Survivability of dates past the end of the universe is uncertain.\n"
- title: 6 Affected Standards
  contents:
  - "6 Affected Standards\n   A number of standards currently and RFCs use 4-digit\
    \ years and are\n   affected by this proposal:\n     rfc2459: Internet X.509 Public\
    \ Key Infrastructure\n              Certificate and CRL Profile\n     rfc2326:\
    \ Real Time Streaming Protocol (RTSP)\n     rfc2311: ODETTE File Transfer Protocol\n\
    \     rfc2280: Routing Policy Specification Language (RPSL)\n     rfc2259: Simple\
    \ Nomenclator Query Protocol (SNQP)\n     rfc2244: ACAP -- Application Configuration\
    \ Access Protocol\n     rfc2167: Referral Whois (RWhois) Protocol V1.5\n     rfc2065:\
    \ Domain Name System Security Extensions\n     rfc2060: Internet Message Access\
    \ Protocol - Version 4rev1\n     rfc1922: Chinese Character Encoding for Internet\
    \ Messages\n     rfc1912: Common DNS Operational and Configuration Errors\n  \
    \   rfc1903: Textual Conventions for Version 2 of the\n              Simple Network\
    \ Management Protocol (SNMPv2)\n     rfc1521: MIME (Multipurpose Internet Mail\
    \ Extensions) Part One:\n     rfc1123: Requirements for Internet hosts - application\
    \ and support\n   The following standards internally represent years as 16-bit\
    \ numbers\n   (0..65536) and are affected by this proposal:\n     rfc2021: Remote\
    \ Network Monitoring Management Information Base\n              Version 2 using\
    \ SMIv2\n     rfc1514: Host Resources MIB\n   The following ISO standard is affected:\n\
    \     ISO8601: International Date Format\n"
- title: 8 Security Considerations
  contents:
  - "8 Security Considerations\n   Y10K dates will improve the security of all programs\
    \ where they are\n   used.  Many errors in programs have been tracked to overflow\
    \ while\n   parsing illegal input.  Programs allocating fixed size storage for\n\
    \   dates will exhibit errors when presented with larger dates.  These\n   errors\
    \ can be exploited by wily hackers to compromise the security of\n   systems running\
    \ these programs.  Since Y10K dates are arbitrary\n   length strings, there is\
    \ no way to make them overflow.\n   In addition, positive Y10K dates are easy\
    \ to compare and less error-\n   prone for humans.  It is easier to compare the\
    \ three projected end of\n   the universe dates - \"H100000000000\", \"I1000000000000\"\
    \ and\n   \"K100000000000000\" - by looking at the leading letter than by\n  \
    \ counting the 0's.  This will reduce inadvertent errors by people.\n   This advantage\
    \ will become more noticeable when large dates are more\n   common.\n   Unfortunately,\
    \ negative Y10K dates are a bit more difficult to\n   decipher.  However, by comparing\
    \ the current age of the universe to\n   its projected end, it is obvious that\
    \ there will be many more\n   positive dates than negative dates.  And, while\
    \ the number of\n   negative dates for human history is currently greater than\
    \ the number\n   of positive dates, the number of negative dates is fixed and\
    \ the\n   number of positive dates is unbounded.\n"
- title: 9 Conclusion
  contents:
  - "9 Conclusion\n   It is not too early to aggressively pursue solutions for the\
    \ Y10K\n   problem.  This specification presents a simple, elegant, and\n   efficient\
    \ solution to this problem.\n"
- title: 10 References
  contents:
  - "10 References\n   [Crocker]   Crocker, D. and P. Overell, \"Augmented BNF for\
    \ Syntax\n               Specifications: ABNF\", RFC 2234, November 1997.\n  \
    \ [Drake]     Review for the Drake Equation\n               http://www.umsl.edu/~bwilking/assign/drake.html\n\
    \   [Microsoft] SNMP SysUpTime Counter Resets After 49.7 Days\n              \
    \ http://support.microsoft.com/support/kb/articles/Q169/\n               8/47.asp\n\
    \   [Mike]      Y1K http://lonestar.texas.net/~mdlvas/y1k.htm\n   [Nigel]    \
    \ Nigel's (en)lighening tour of Thermodynamics for\n               Economists\
    \ ;-) http://www.santafe.edu/~nigel/thermo-\n               primer.html\n   [NRAO]\
    \      Astronomical Times\n               http://sadira.gb.nrao.edu/~rfisher/Ephemerides/times.html\n\
    \   [RFC]       Here are all the online RFCs. Note: this is a LONG menu.\n   \
    \            http://info.internet.isi.edu/1s/in-notes/rfc/files\n   [UNIX]   \
    \   Year 2000 Issues http://www.rdrop.com/users/caf/y2k.html\n   [Wilborne]  PktCDateLig\n\
    \               http://www3.gamewood.net/mew3/pilot/pocketc/pktcdate/\n      \
    \         index.html\n   [YUCK]      Y10K Unlimited Consulting Knowledgebase\n\
    \               http://www.loyd.net/y10k/index.html\n   [Zebu]      The Search\
    \ for H0\n               http://zebu.uoregon.edu/1997/ph410/l6.html\n"
- title: 11 Authors' Addresses
  contents:
  - "11 Authors' Addresses\n   Steve Glassman\n   Compaq Systems Research Center\n\
    \   130 Lytton Avenue\n   Palo Alto, CA 94301 USA\n   Phone: +1 650-853-2166\n\
    \   EMail: steveg@pa.dec.com\n   Mark Manasse\n   Compaq Systems Research Center\n\
    \   130 Lytton Avenue\n   Palo Alto, CA 94301 USA\n   Phone: +1 650-853-2221\n\
    \   EMail: msm@pa.dec.com\n   Jeff Mogul\n   Compaq Western Resarch Lab\n   250\
    \ University Avenue\n   Palo Alto, CA 94301 USA\n   Phone: +1 650-617-3300\n \
    \  EMail: mogul@pa.dec.com\n"
- title: 12.  Full Copyright Statement
  contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
