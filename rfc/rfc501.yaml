- title: __initial_text__
  contents:
  - "                    Un-Muddling \"Free File Transfer\"\n   As the ARPA Network\
    \ begin to mature, we find ourselves addressing\n   issues and concepts deliberately\
    \ put off and left untouched at\n   earlier stages of Network development.  Among\
    \ the issues now coming\n   to the fore are access control, user authentication,\
    \ and accounting.\n   These issues arise immediately out of efforts to develop\
    \ uniform\n   methods for providing limited \"free\" access to the File Transfer\n\
    \   Servers of the host systems, to meet user needs for mail transmission\n  \
    \ and similar services.\n   Several proposals have been made, described by such\
    \ phrases as\n   \"login-less mail\", \"'free' accounts\", \"free file transfer\"\
    , etc.\n   These proposals inevitably have imbedded in them some particular\n\
    \   notion of how such things as access control and user authentication\n   are\
    \ accomplished and these proposals, which knowingly or unknowingly\n   make presumptions\
    \ about the implementation of such mechanisms,\n   inevitably meet with strong\
    \ criticism from implementors whose\n   systems' mechanisms are quite different.\n\
    \   In RFC 467, Bob Bressler proposes ways of helping out users who wish\n   to\
    \ transfer files to or from \"systems which have some flavor of\n   security,\
    \ but on which the user has no access privileges\".\n   Unfortunately, beginning\
    \ with the first paragraph of the RFC, the\n   notions of access controls on files\
    \ (examples of protection\n   mechanisms), and control of access to the system\
    \ (user\n   authentication) are thoroughly muddled.  In addition, he makes\n \
    \  sweeping assumptions about the nature and use of accounting\n   mechanisms\
    \ and accounts at server sites.  RFC 487 also has buried\n   deep within it assumptions\
    \ about the nature of the access control and\n   user authentication aspects of\
    \ File Transfer Server implementations.\n   What's needed at this juncture, of\
    \ course, is a lucid discussion of\n   the general concepts involved in protection\
    \ mechanisms, and file\n   system access controls in particular.  Well, you won't\
    \ find that in\n   the remainder of this RFC.  What you will find is perhaps enough\
    \ of a\n   discussion to un-muddle that which RFC 487 has muddled; the rest will\n\
    \   have to come down the pike at a later time.\n   In many systems, mechanisms\
    \ which control access to the system,\n   mechanism which control access to files,\
    \ and accounting mechanisms\n   all mesh at the moment at which a prospective\
    \ user of the system is\n   authenticated: the system has checked his user-name,\
    \ password,\n   account, or whatever, and decided that he is, indeed, a valid\
    \ user of\n   the system.  This user, who would like to have some information\n\
    \   processing performed on his behalf, is termed a principal in \"privacy\n \
    \  and protection\" parlance.  Some number of processes are initially set\n  \
    \ up for this principal, and some (presumably unforgeable) principal\n   identifier\
    \ is associated with the process(es), so that their requests\n   for access to\
    \ files and other system resources may be properly\n   validated.  In addition,\
    \ the identify of the account to be charged\n   for the resources consumed by\
    \ these processes is associated with the\n   processes at this time [1], although\
    \ on some systems, a process may\n   change its account identifier at any time.\n\
    \   The first question is: Whose principal identifier does a File\n   Transfer\
    \ Server process use? There are at least two possibilities: 1)\n   the File Transfer\
    \ Server can run as a \"system daemon\" process, with\n   (usually) a highly privileged\
    \ principal identifier.  When acting on\n   behalf of a user, it must, itself,\
    \ interpretively evaluate that\n   user's access to a desired file.  Also, it\
    \ must be able to charge\n   that user's account for the resources it uses.  2)\
    \ A File Transfer\n   Server process can be given the user's own principal identifier.\n\
    \   With this implementation, validation of the user's access to files is\n  \
    \ performed automatically by the usual file system mechanisms.\n   Paragraph four\
    \ of RFC 487 clearly presumes implementation 1): \"If a\n   user connects to an\
    \ FTP server and makes a file request without\n   supplying a user name-password,\
    \ the server should then examine the\n   file access parameters ...\" Systems\
    \ truly concerned about protection\n   may prefer implementation 2), and for good\
    \ reason -- it follows the\n   \"principle of least privilege\", which states\
    \ that a process should\n   execute with as little access privilege as it requires\
    \ to perform its\n   tasks properly.  Running a File Transfer Server process with\
    \ a user's\n   principal identifier rather than with that of a system daemon leaves\n\
    \   the system far less susceptible to damage caused by incorrect actions\n  \
    \ of the File Transfer Server. [2]\n   The next question is: Whom do you charge\
    \ for file transfers? Bressler\n   tries to set down some guidelines for determining\
    \ who to charge for\n   \"non-logged-in\" (read: \"free\") file transfer usage:\
    \ \"Clearly, storing\n   a file in a user's directory can be charged to that user.\"\
    \ How is the\n   word \"storing\" used here? Surely, \"that user\" can be billed\
    \ for the\n   disk or other storage medium charges incurred by that file which\
    \ is\n   now taking up space, but is it legitimate to charge \"that user\" for\n\
    \   the I/O and/or CPU resources used by someone else to transfer a file\n   over\
    \ the Network, and place it into that user's directory? For\n   example, should\
    \ the recipient of Network mail be charged for the\n   resources consumed by someone\
    \ else in sending it? (Would you care to\n   pay the postage for all the junk\
    \ mail that arrives in your home (U.S.\n   Mail) mailbox?).\n   Over the telephone,\
    \ Bob explained to me that he desired a mechanism\n   which would, for example,\
    \ enable me, at his request, to transfer a\n   file from my system to his directory\
    \ on his system, without requiring\n   that I know his password.  All well and\
    \ good.  In this situation, it\n   would make sense to charge Bressler's account\
    \ for this file transfer.\n   But how does an un-authenticated user tell a server\
    \ \"Charge this to\n   Bressler's account because he says it's OK\"? Pitfalls\
    \ abound.  The\n   file Transfer Server process needs to be able to charge an\
    \ arbitrary\n   user's account; this again presupposes implementation 1) of the\
    \ File\n   Transfer Server described above (or else any user process in the\n\
    \   system would have the capability of charging any user's account; this\n  \
    \ seems undesirable).  A more reasonable approach would be to charge\n   that\
    \ instance of the File Transfer Server process to a general\n   \"Network services\"\
    \ account.  Mechanisms for accomplishing this are\n   presented in RFC 491. [3]\n\
    \   RFC 487 matter-of-factly suggests that retrieval of files in \"system\"\n\
    \   directories should be charged to \"overhead\".  Here too, some broad\n   assumptions\
    \ are made about the nature of accounting mechanisms and\n   accounts at server\
    \ sites.  In addition, an undesirable loss of\n   generality is imposed upon the\
    \ File Transfer Server: It is now\n   required to have the capability of distinguishing\
    \ the pathnames of\n   \"system\" files from those of \"user\" files.  In a number\
    \ of systems,\n   there is no syntactic distinction between the two, and the same\n\
    \   general mechanisms can be used to manipulate both kinds of files (if\n   a\
    \ distinction between them can be made at all).  The addition of code\n   to the\
    \ File Transfer Server which examines the pathname given for\n   each request,\
    \ to determine which sort it is, seems to be antithetical\n   to the goals of\
    \ uniformity and generality that many of today's\n   systems have achieved.\n\
    \   The statement that a Network user's file transfer activity can be\n   charged\
    \ to a system-wide \"overhead\" account contains two assumptions:\n   Such an\
    \ account cannot be presumed to exist on all systems;\n   furthermore, if it does\
    \ exist, in some cases it just isn't the right\n   account to charge.  Certainly,\
    \ a good case can be made that the cost\n   of fostering inter-user communication\
    \ within the ARPA Network\n   community (which is what \"free\" file transfer\
    \ amounts to) should be\n   borne by ARPA, meaning that such activity should be\
    \ charged to ARPA-\n   funded accounts.  If a host system's operation is entirely\
    \ funded by\n   ARPA (or if its management doesn't care who pays for this activity),\n\
    \   then it makes sense to charge \"free\" file transfer activity to a\n   \"\
    system overhead\" account.  On the other hand, that isn't the correct\n   course\
    \ of action for a host system whose operation is not funded by\n   ARPA, for charging\
    \ \"free\" file transfers to \"system overhead\" would\n   result in passing the\
    \ cost along to local customers who may have no\n   interest at all in the ARPA\
    \ Network.\n   Lastly, Bressler suggests that for file retrieval, CPU charges\
    \ \"may\n   be sufficiently small to not cause a major problem\".  To believe\
    \ this\n   is naivete.  It may appear to be true for a system which doesn't\n\
    \   charge the user for time spent executing supervisor code, or I/O\n   routines,\
    \ where Network software overhead doesn't show up in the\n   user's bill.  In\
    \ this case, Network software overhead must contribute\n   to \"general system\
    \ overhead\", the cost of which must be borne by all\n   users.  I don't think\
    \ many people in the Network community would\n   consider the actual (as opposed\
    \ to charged) CPU time spent\n   transferring a file to be negligible.  Certainly,\
    \ if a system is a\n   very popular or busy one from a Network standpoint, the\
    \ cumulative\n   CPU time spent on \"free\" file transfers, viewed at the end\
    \ of an\n   accounting period (a week? a month? a year?) will not be negligible!\n\
    \   In this RFC, I've picked apart Bob Bressler's RFC 487, mostly because\n  \
    \ of its confusion of several distinct (although related) issues, and\n   the\
    \ implementation assumptions it contains which conflict with (or\n   badly bend\
    \ out of shape) mechanisms and design philosophies existing\n   on other systems\
    \ (in particular, the system I am most familiar with,\n   Multics) [4].  The applicability\
    \ of the discussions in this RFC, I\n   think goes beyond that: We've got to acknowledge\
    \ that it's difficult\n   to propose Network-wide mechanisms for providing desirable\
    \ services\n   without building in assumptions about how they are to be implemented.\n\
    \   We're at a point where we're asking for fairly sophisticated\n   services,\
    \ and proposing correspondingly sophisticated mechanisms.\n   It's time to begin\
    \ talking about how various systems accomplish such\n   things as user authentication,\
    \ access control, and so on, so that we\n   can all gain a clearer understanding\
    \ of such issues, and be able to\n   propose mechanisms with fewer implementation\
    \ assumptions built into\n   them.\n   END NOTES:\n   [1] On some systems, there\
    \ is a one-to-one correspondence between\n   principals and accounts.\n   [2]\
    \ It should be noted that systems which choose implementation 2)\n   may require\
    \ a user authentication sequence (USER, PASS, and possibly\n   ACCT commands)\
    \ before permitting any file transfers, as explicitly\n   stated on page 17 of\
    \ RFC 354 (NIC 10596), and page 20 of RFC 4554\n   (NIC 14333).  This authentication\
    \ sequence would be required to\n   ascertain the principal identifier to be associated\
    \ with the newly-\n   spawned File Transfer Server process; the process is not\
    \ allowed to\n   proceed until its principal identifier has been established.\n\
    \   [3] Note that there are at least two scenarios for accomplishing the\n   transfer\
    \ Bressler desires: Either I \"push\" the file, using my \"User\n   FTP\" and\
    \ his system's \"FTP Server\", or he \"pulls\" the file, using his\n   \"User\
    \ FTP\" and my system's \"FTP Server\".  Bob chose the first\n   scenario; it\
    \ can be argued that, since it is Bob who wanted the file\n   transferred, the\
    \ second scenario is the more appropriate one.  A\n   forthcoming RFC by Mike\
    \ Padlipsky expands on these points, as well as\n   an entirely different alternative.\n\
    \   [4] Padlipsky keeps insisting that I've also shown the superiority of\n  \
    \ implementation 2) of the File Transfer Server (described above), but\n   I resist\
    \ that conclusion.  Those interested may want to look at his\n   Unified User-Level\
    \ Protocol specification, which is based on a\n   similar premise.\n       [ This\
    \ RFC was put into machine readable form for entry ]\n              [ into the\
    \ online RFC archives by Via Genie]\n"
