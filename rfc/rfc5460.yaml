- title: __initial_text__
  contents:
  - '                         DHCPv6 Bulk Leasequery

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Dynamic Host Configuration Protocol for IPv6 (DHCPv6) has been\n\
    \   extended with a Leasequery capability that allows a client to request\n  \
    \ information about DHCPv6 bindings.  That mechanism is limited to\n   queries\
    \ for individual bindings.  In some situations individual\n   binding queries\
    \ may not be efficient, or even possible.  This\n   document expands on the Leasequery\
    \ protocol, adding new query types\n   and allowing for bulk transfer of DHCPv6\
    \ binding data via TCP.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Protocol Overview  . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   4.  Interaction between UDP Leasequery and Bulk Leasequery .\
    \ . . .  5\n   5.  Message and Option Definitions . . . . . . . . . . . . . .\
    \ . .  6\n     5.1.  Message Framing for TCP  . . . . . . . . . . . . . . . .\
    \ .  6\n     5.2.  Messages . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  6\n       5.2.1.  LEASEQUERY-DATA  . . . . . . . . . . . . . . . . . . .  7\n\
    \       5.2.2.  LEASEQUERY-DONE  . . . . . . . . . . . . . . . . . . .  7\n  \
    \   5.3.  Query Types  . . . . . . . . . . . . . . . . . . . . . . .  7\n    \
    \   5.3.1.  QUERY_BY_RELAY_ID  . . . . . . . . . . . . . . . . . .  7\n      \
    \ 5.3.2.  QUERY_BY_LINK_ADDRESS  . . . . . . . . . . . . . . . .  8\n       5.3.3.\
    \  QUERY_BY_REMOTE_ID . . . . . . . . . . . . . . . . . .  8\n     5.4.  Options\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  8\n       5.4.1.  Relay-ID\
    \ Option  . . . . . . . . . . . . . . . . . . .  8\n     5.5.  Status Codes .\
    \ . . . . . . . . . . . . . . . . . . . . . .  9\n     5.6.  Connection and Transmission\
    \ Parameters . . . . . . . . . .  9\n   6.  Requestor Behavior . . . . . . . .\
    \ . . . . . . . . . . . . . . 10\n     6.1.  Connecting . . . . . . . . . . .\
    \ . . . . . . . . . . . . . 10\n     6.2.  Forming Queries  . . . . . . . . .\
    \ . . . . . . . . . . . . 10\n     6.3.  Processing Replies . . . . . . . . .\
    \ . . . . . . . . . . . 10\n       6.3.1.  Reply Completion . . . . . . . . .\
    \ . . . . . . . . . . 11\n     6.4.  Querying Multiple Servers  . . . . . . .\
    \ . . . . . . . . . 11\n     6.5.  Multiple Queries to a Single Server  . . .\
    \ . . . . . . . . 12\n       6.5.1.  Example  . . . . . . . . . . . . . . . .\
    \ . . . . . . . 12\n     6.6.  Closing Connections  . . . . . . . . . . . . .\
    \ . . . . . . 13\n   7.  Server Behavior  . . . . . . . . . . . . . . . . . .\
    \ . . . . . 13\n     7.1.  Accepting Connections  . . . . . . . . . . . . . .\
    \ . . . . 13\n     7.2.  Forming Replies  . . . . . . . . . . . . . . . . . .\
    \ . . . 14\n     7.3.  Multiple or Parallel Queries . . . . . . . . . . . . .\
    \ . . 15\n     7.4.  Closing Connections  . . . . . . . . . . . . . . . . . .\
    \ . 15\n   8.  Security Considerations  . . . . . . . . . . . . . . . . . . .\
    \ 16\n   9.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 16\n\
    \   10. Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 17\n  \
    \ 11. References . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n    \
    \ 11.1. Normative References . . . . . . . . . . . . . . . . . . . 17\n     11.2.\
    \ Informative References . . . . . . . . . . . . . . . . . . 17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The DHCPv6 [RFC3315] protocol specifies a mechanism for\
    \ the\n   assignment of IPv6 address and configuration information to IPv6\n \
    \  nodes.  IPv6 Prefix Delegation (PD) for DHCPv6 [RFC3633] specifies a\n   mechanism\
    \ for DHCPv6 delegation of IPv6 prefixes and related data.\n   DHCPv6 servers\
    \ maintain authoritative information including binding\n   information for delegated\
    \ IPv6 prefixes.\n   The client of a PD binding is typically a router, which then\n\
    \   advertises the delegated prefix to locally-connected hosts.  The\n   delegated\
    \ IPv6 prefix must be routeable in order to be useful.  The\n   actual DHCPv6\
    \ PD client may not be permitted to inject routes into\n   the delegating network.\
    \  In service-provider (SP) networks, for\n   example, an edge router typically\
    \ acts as a DHCPv6 relay agent, and\n   this edge router often has the responsibility\
    \ to maintain routes\n   within the service-provider network for clients' PD bindings.\n\
    \   A DHCPv6 relay with this responsibility requires a means to recover\n   binding\
    \ information from the authoritative DHCPv6 server(s) in the\n   event of replacement\
    \ or reboot, in order to restore routeability to\n   delegated prefixes.  The\
    \ relay may be a network device without\n   adequate local storage to maintain\
    \ the necessary binding-to-route\n   data.  A DHCPv6 Leasequery protocol [RFC5007]\
    \ has been developed that\n   allows queries for individual bindings from the\
    \ authoritative DHCPv6\n   server(s).  The individual query mechanism is only\
    \ useable when the\n   target binding is known to the requestor, such as upon\
    \ receipt of\n   traffic.  In the case of DHCPv6 Prefix Delegation, the PD binding\n\
    \   data may need to be known before any traffic arrives from the client\n   router.\
    \  The DHCPv6 relay router may not be able to form individual\n   queries in such\
    \ cases.\n   This document extends the DHCPv6 Leasequery protocol to add support\n\
    \   for queries that address these requirements.  At the SP edge there\n   may\
    \ be many thousands of delegated prefixes per relay, so we specify\n   the use\
    \ of TCP [RFC4614] for efficiency of data transfer.  We specify\n   a new DHCPv6\
    \ option, the Relay Identifier option, to support\n   efficient recovery of all\
    \ data associated with a specific relay\n   agent; we also add a query-type for\
    \ this purpose.  We add query-types\n   by network segment and by Remote-ID option\
    \ value, to assist a relay\n   that needs to recover a subset of its clients'\
    \ bindings.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n\
    \   DHCPv6 terminology is defined in [RFC3315].  DHCPv6 Leasequery\n   terminology\
    \ is defined in [RFC5007].\n"
- title: 3.  Protocol Overview
  contents:
  - "3.  Protocol Overview\n   The Bulk Leasequery mechanism is modeled on the existing\
    \ individual\n   Leasequery protocol in [RFC5007]; most differences arise from\
    \ the use\n   of TCP.  A Bulk Leasequery client opens a TCP connection to a DHCPv6\n\
    \   server, using the DHCPv6 port 547.  Note that this implies that the\n   Leasequery\
    \ client has server IP address(es) available via\n   configuration or some other\
    \ means, and that it has unicast IP\n   reachability to the server.  No relaying\
    \ for bulk leasequery is\n   specified.\n   After establishing a connection, the\
    \ client sends a LEASEQUERY\n   message containing a query-type and data about\
    \ bindings it is\n   interested in.  The server uses the query-type and the data\
    \ to\n   identify any relevant bindings.  In order to support some query-\n  \
    \ types, servers may have to maintain additional data structures or be\n   able\
    \ to locate bindings based on specific option data.  The server\n   replies with\
    \ a LEASEQUERY-REPLY message, indicating the success or\n   failure of the query.\
    \  If the query was successful, the server\n   includes the first client's binding\
    \ data in the LEASEQUERY-REPLY\n   message also.  If more than one client's bindings\
    \ are being returned,\n   the server then transmits the additional client bindings\
    \ in a series\n   of LEASEQUERY-DATA messages.  If the server has sent at least\
    \ one\n   client's bindings, it sends a LEASEQUERY-DONE message when it has\n\
    \   finished sending its replies.  The client may reuse the connection to\n  \
    \ send additional queries.  Each end of the TCP connection can be\n   closed after\
    \ all data has been sent.\n   This specification includes a new DHCPv6 option,\
    \ the Relay-ID option.\n   The option contains a DUID (DHCP Unique Identifier)\
    \ identifying a\n   DHCPv6 relay agent.  Relay agents can include this option\
    \ in Relay-\n   Forward messages they send.  Servers can retain the Relay-ID and\n\
    \   associate it with bindings made on behalf of the relay's clients.  A\n   relay\
    \ can then recover binding information about downstream clients\n   by using the\
    \ Relay-ID in a LEASEQUERY message.  The Relay-ID option\n   is defined in Section\
    \ 5.4.1.\n   Bulk Leasequery supports the queries by IPv6 address and by Client\n\
    \   DUID as specified in [RFC5007].  The Bulk Leasequery protocol also\n   adds\
    \ several new queries.  The new queries introduced here cannot be\n   used effectively\
    \ with the UDP Leasequery protocol.  Requestors MUST\n   NOT send these new query-types\
    \ in [RFC5007] query messages.\n   Query by Relay Identifier -  This query asks\
    \ a server for the\n      bindings associated with a specific relay; the relay\
    \ is identified\n      by a DUID carried in a Relay-ID option.\n   Query by Link\
    \ Address -  This query asks a server for the bindings on\n      a particular\
    \ network segment; the link is specified in the query's\n      link-address field.\n\
    \   Query by Remote ID -  This query asks a server for the bindings\n      associated\
    \ with a Relay Agent Remote-ID option [RFC4649] value.\n"
- title: 4.  Interaction between UDP Leasequery and Bulk Leasequery
  contents:
  - "4.  Interaction between UDP Leasequery and Bulk Leasequery\n   Bulk Leasequery\
    \ can be seen as an extension of the existing UDP\n   Leasequery protocol [RFC5007].\
    \  This section tries to clarify the\n   relationship between the two protocols.\n\
    \   The query-types introduced in the UDP Leasequery protocol can be used\n  \
    \ in the Bulk Leasequery protocol.  One change in behavior is\n   introduced when\
    \ Bulk Leasequery is used.  [RFC5007], in sections\n   4.1.2.5 and 4.3.3, specifies\
    \ the use of a Client Link option in\n   LEASEQUERY-REPLY messages in cases where\
    \ multiple bindings were\n   found.  When Bulk Leasequery is used, this mechanism\
    \ is not\n   necessary: a server returning multiple bindings simply does so\n\
    \   directly as specified in this document.  The Client Link option MUST\n   NOT\
    \ appear in Bulk Leasequery replies.\n   Only LEASEQUERY, LEASEQUERY-REPLY, LEASEQUERY-DATA,\
    \ and LEASEQUERY-\n   DONE messages are allowed over the Bulk Leasequery connection.\
    \  No\n   other DHCPv6 messages are supported.  The Bulk Leasequery connection\n\
    \   is not an alternative DHCPv6 communication option for clients seeking\n  \
    \ DHCPv6 service.\n   The new queries introduced in this specification cannot\
    \ be used with\n   the UDP Leasequery protocol.  Servers that implement this\n\
    \   specification and also permit UDP queries MUST NOT accept Bulk\n   Leasequery\
    \ query-types in UDP Leasequery messages.  Such servers MUST\n   respond with\
    \ an error status code of NotAllowed [RFC5007].\n   Implementors should note that\
    \ the TCP message framing defined in\n   Section 5.1 is not compatible with the\
    \ UDP message format.  If a TCP-\n   framed request is sent as a UDP message,\
    \ it may not be valid, because\n   protocol fields will be offset by the message-size\
    \ prefix.\n"
- title: 5.  Message and Option Definitions
  contents:
  - '5.  Message and Option Definitions

    '
- title: 5.1.  Message Framing for TCP
  contents:
  - "5.1.  Message Framing for TCP\n   The use of TCP for the Bulk Leasequery protocol\
    \ permits one or more\n   DHCPv6 messages to be sent at a time.  The receiver\
    \ needs to be able\n   to determine how large each message is.  Two octets containing\
    \ the\n   message size in network byte order are prepended to each DHCPv6\n  \
    \ message sent on a Bulk Leasequery TCP connection.  The two message-\n   size\
    \ octets 'frame' each DHCPv6 message.\n   DHCPv6 message framed for TCP:\n   \
    \    0                   1                   2                   3\n       0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         message-size          |    msg-type   |               :\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      :\
    \   transaction-id              |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n      |                                   \
    \                            .\n      .                            options   \
    \                         .\n      .                           (variable)    \
    \                      .\n      |                                            \
    \                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       message-size    the number of octets in the message that\n           \
    \            follows, as a 16-bit integer in network\n                       byte\
    \ order.\n   All other fields are as specified in DHCPv6 [RFC3315].\n"
- title: 5.2.  Messages
  contents:
  - "5.2.  Messages\n   The LEASEQUERY and LEASEQUERY-REPLY messages are defined in\n\
    \   [RFC5007].  In a Bulk Leasequery exchange, a single LEASEQUERY-REPLY\n   message\
    \ is used to indicate the success or failure of a query, and to\n   carry data\
    \ that do not change in the context of a single query and\n   answer, such as\
    \ the Server-ID and Client-ID options.  If a query is\n   successful, only a single\
    \ LEASEQUERY-REPLY message MUST appear.  If\n   the server is returning binding\
    \ data, the LEASEQUERY-REPLY also\n   contains the first client's binding data\
    \ in an OPTION_CLIENT_DATA\n   option.\n"
- title: 5.2.1.  LEASEQUERY-DATA
  contents:
  - "5.2.1.  LEASEQUERY-DATA\n   The LEASEQUERY-DATA message carries data about a\
    \ single DHCPv6\n   client's leases and/or PD bindings on a single link.  The\
    \ purpose of\n   the message is to reduce redundant data when there are multiple\n\
    \   bindings to be sent.  The LEASEQUERY-DATA message MUST be preceded by\n  \
    \ a LEASEQUERY-REPLY message.  The LEASEQUERY-REPLY carries the query's\n   status,\
    \ the Leasequery's Client-ID and Server-ID options, and the\n   first client's\
    \ binding data if the query was successful.\n   LEASEQUERY-DATA MUST ONLY be sent\
    \ in response to a successful\n   LEASEQUERY, and only if more than one client's\
    \ data is to be sent.\n   The LEASEQUERY-DATA message's transaction-id field MUST\
    \ match the\n   transaction-id of the LEASEQUERY request message.  The Server-ID,\n\
    \   Client-ID, and OPTION_STATUS_CODE options SHOULD NOT be included:\n   that\
    \ data should be constant for any one Bulk Leasequery reply, and\n   should have\
    \ been conveyed in the LEASEQUERY-REPLY message.\n"
- title: 5.2.2.  LEASEQUERY-DONE
  contents:
  - "5.2.2.  LEASEQUERY-DONE\n   The LEASEQUERY-DONE message indicates the end of\
    \ a group of related\n   Leasequery replies.  The LEASEQUERY-DONE message's transaction-id\n\
    \   field MUST match the transaction-id of the LEASEQUERY request\n   message.\
    \  The presence of the message itself signals the end of a\n   stream of reply\
    \ messages.  A single LEASEQUERY-DONE MUST BE sent\n   after all replies (a successful\
    \ LEASEQUERY-REPLY and zero or more\n   LEASEQUERY-DATA messages) to a successful\
    \ Bulk Leasequery request\n   that returned at least one binding.\n   A server\
    \ may encounter an error condition after it has sent the\n   initial LEASEQUERY-REPLY.\
    \  In that case, it SHOULD attempt to send a\n   LEASEQUERY-DONE with an OPTION_STATUS_CODE\
    \ option indicating the\n   error condition to the requestor.  Other DHCPv6 options\
    \ SHOULD NOT be\n   included in the LEASEQUERY-DONE message.\n"
- title: 5.3.  Query Types
  contents:
  - "5.3.  Query Types\n   The OPTION_LQ_QUERY option is defined in [RFC5007].  We\
    \ introduce the\n   following new query-types: QUERY_BY_RELAY_ID, QUERY_BY_LINK_ADDRESS,\n\
    \   and QUERY_BY_REMOTE_ID.  These queries are designed to assist relay\n   agents\
    \ in recovering binding data in circumstances where some or all\n   of the relay's\
    \ binding data has been lost.\n"
- title: 5.3.1.  QUERY_BY_RELAY_ID
  contents:
  - "5.3.1.  QUERY_BY_RELAY_ID\n   This query asks the server to return bindings associated\
    \ with the\n   specified relay DUID.\n   QUERY_BY_RELAY_ID -   The query-options\
    \ MUST contain an\n      OPTION_RELAY_ID option.  If the link-address field is\
    \ 0::0, the\n      query asks for all bindings associated with the specified relay\n\
    \      DUID.  If the link-address is specified, the query asks for\n      bindings\
    \ on that link.\n"
- title: 5.3.2.  QUERY_BY_LINK_ADDRESS
  contents:
  - "5.3.2.  QUERY_BY_LINK_ADDRESS\n   The QUERY_BY_LINK_ADDRESS asks the server to\
    \ return bindings on a\n   network segment identified by a link-address value\
    \ from a relay's\n   Relay-Forward message.\n   QUERY_BY_LINK_ADDRESS -   The\
    \ query's link-address contains an\n      address a relay may have used in the\
    \ link-address of a Relay-\n      Forward message.  The Server attempts to locate\
    \ bindings on the\n      same network segment as the link-address.\n"
- title: 5.3.3.  QUERY_BY_REMOTE_ID
  contents:
  - "5.3.3.  QUERY_BY_REMOTE_ID\n   The QUERY_BY_REMOTE_ID asks the server to return\
    \ bindings associated\n   with a Remote-ID option value from a relay's Relay-Forward\
    \ message.\n   The query-options MUST include a Relay Agent Remote-ID option\n\
    \   [RFC4649].\n   In order to support this query, a server needs to record the\
    \ most-\n   recent Remote-ID option value seen in a Relay-Forward message along\n\
    \   with its other binding data.\n   QUERY_BY_REMOTE_ID -   The query-options\
    \ MUST include a Relay Agent\n      Remote-ID option [RFC4649].  If the Server\
    \ has recorded Remote-ID\n      values with its bindings, it uses the option's\
    \ value to identify\n      bindings to return.\n"
- title: 5.4.  Options
  contents:
  - '5.4.  Options

    '
- title: 5.4.1.  Relay-ID Option
  contents:
  - "5.4.1.  Relay-ID Option\n   The Relay-ID option carries a DUID [RFC3315].  A\
    \ relay agent MAY\n   include the option in Relay-Forward messages it sends. \
    \ Obviously, it\n   will not be possible for a server to respond to QUERY_BY_RELAY_ID\n\
    \   queries unless the relay agent has included this option.  A relay\n   SHOULD\
    \ be able to generate a DUID for this purpose, and capture the\n   result in stable\
    \ storage.  A relay SHOULD also allow the DUID value\n   to be configurable: doing\
    \ so allows an administrator to replace a\n   relay agent while retaining the\
    \ association between the relay and\n   existing DHCPv6 bindings.\n   A DHCPv6\
    \ server MAY associate Relay-ID options from Relay-Forward\n   messages it processes\
    \ with prefix delegations and/or lease bindings\n   that result.  Doing so allows\
    \ it to respond to QUERY_BY_RELAY_ID\n   Leasequeries.\n   The format of the Relay-ID\
    \ option is shown below:\n       0                   1                   2   \
    \                3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |       OPTION_RELAY_ID         |          option-len           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      .\
    \                                                               .\n      .   \
    \                           DUID                             .\n      .      \
    \                  (variable length)                      .\n      .         \
    \                                                      .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      option-code   OPTION_RELAY_ID.\n      option-len    Length of DUID in octets.\n\
    \      DUID          The DUID for the relay agent.\n"
- title: 5.5.  Status Codes
  contents:
  - "5.5.  Status Codes\n   QueryTerminated - Indicates that the server is unable\
    \ to perform a\n   query or has prematurely terminated the query for some reason\
    \ (which\n   should be communicated in the text of the message).  This may be\n\
    \   because the server is short of resources or is being shut down.  The\n   requestor\
    \ may retry the query at a later time.  The requestor should\n   wait at least\
    \ a short interval before retrying.  Note that while a\n   server may simply prematurely\
    \ close its end of the connection, it is\n   preferable for the server to send\
    \ a LEASEQUERY-REPLY or LEASEQUERY-\n   DONE with this status-code to notify the\
    \ requestor of the condition.\n"
- title: 5.6.  Connection and Transmission Parameters
  contents:
  - "5.6.  Connection and Transmission Parameters\n   DHCPv6 servers that support\
    \ Bulk Leasequery SHOULD listen for\n   incoming TCP connections on the DHCPv6\
    \ server port 547.\n   Implementations MAY offer to make the incoming port configurable,\
    \ but\n   port 547 MUST be the default.  Client implementations SHOULD make TCP\n\
    \   connections to port 547, and MAY offer to make the destination server\n  \
    \ port configurable.\n   This section presents a table of values used to control\
    \ Bulk\n   Leasequery behavior, including recommended defaults.  Implementations\n\
    \   MAY make these values configurable.  However, configuring too-small\n   timeout\
    \ values may lead to harmful behavior both to this application\n   as well as\
    \ to other traffic in the network.  As a result, timeout\n   values smaller than\
    \ the default values are NOT RECOMMENDED.\n   Parameter             Default  \
    \ Description\n   -------------------------------------------\n   BULK_LQ_DATA_TIMEOUT\
    \  300 s     Bulk Leasequery data timeout\n   BULK_LQ_MAX_CONNS     10       \
    \ Max Bulk Leasequery TCP connections\n"
- title: 6.  Requestor Behavior
  contents:
  - '6.  Requestor Behavior

    '
- title: 6.1.  Connecting
  contents:
  - "6.1.  Connecting\n   A requestor attempts to establish a TCP connection to a\
    \ DHCPv6 server\n   in order to initiate a Leasequery exchange.  If the attempt\
    \ fails,\n   the requestor MAY retry.\n"
- title: 6.2.  Forming Queries
  contents:
  - "6.2.  Forming Queries\n   After a connection is established, the requestor constructs\
    \ a\n   Leasequery message, as specified in [RFC5007].  The query may have\n \
    \  any of the defined query-types, and includes the options and data\n   required\
    \ by the query-type chosen.  The requestor sends the message\n   size then sends\
    \ the actual DHCPv6 message, as described in\n   Section 5.1.\n   If the TCP connection\
    \ becomes blocked or stops being writeable while\n   the requestor is sending\
    \ its query, the requestor SHOULD be prepared\n   to terminate the connection\
    \ after BULK_LQ_DATA_TIMEOUT.  We make this\n   recommendation to allow requestors\
    \ to control the period of time they\n   are willing to wait before abandoning\
    \ a connection, independent of\n   notifications from the TCP implementations\
    \ they may be using.\n"
- title: 6.3.  Processing Replies
  contents:
  - "6.3.  Processing Replies\n   The requestor attempts to read a LEASEQUERY-REPLY\
    \ message from the\n   TCP connection.  If the TCP connection stops delivering\
    \ reply data\n   (if the connection stops being readable), the requestor SHOULD\
    \ be\n   prepared to terminate the connection after BULK_LQ_DATA_TIMEOUT, and\n\
    \   MAY begin retry-processing if configured to do so.\n   The requestor examines\
    \ the LEASEQUERY-REPLY message, and determines\n   how to proceed.  Message validation\
    \ rules are specified in DHCPv6\n   Leasequery [RFC5007].  If the reply contains\
    \ an error status code\n   (carried in an OPTION_STATUS_CODE option), the requestor\
    \ follows the\n   recommendations in [RFC5007].  A successful reply that does\
    \ not\n   include an OPTION_CLIENT_DATA option indicates that the target server\n\
    \   had no bindings matching the query.\n   Note: The Leasequery protocol uses\
    \ the OPTION_CLIENT_LINK option as\n   an indicator that multiple bindings were\
    \ present in response to a\n   single query.  For Bulk Leasequery, the OPTION_CLIENT_LINK\
    \ option is\n   not used, and MUST NOT be present in replies.\n   A successful\
    \ LEASEQUERY-REPLY that is returning binding data includes\n   an OPTION_CLIENT_DATA\
    \ option and possibly additional options.  If\n   there are additional bindings\
    \ to be returned, they will be carried in\n   LEASEQUERY-DATA messages.  Each\
    \ LEASEQUERY-DATA message contains an\n   OPTION_CLIENT_DATA option, and possibly\
    \ other options.  A LEASEQUERY-\n   DATA message that does not contain an OPTION_CLIENT_DATA\
    \ MUST be\n   discarded.\n   A single bulk query can result in a large number\
    \ of replies.  For\n   example, a single relay agent might be responsible for\
    \ routes for\n   thousands of clients' delegated prefixes.  The requestor MUST\
    \ be\n   prepared to receive more than one LEASEQUERY-DATA with transaction-\n\
    \   ids matching a single LEASEQUERY message.\n   The LEASEQUERY-DONE message\
    \ ends a successful Bulk Leasequery request\n   that returned at least one binding.\
    \  A LEASEQUERY-REPLY without any\n   bindings MUST NOT be followed by a LEASEQUERY-DONE\
    \ message for the\n   same transaction-id.  After receiving LEASEQUERY-DONE from\
    \ a server,\n   the requestor MAY close the TCP connection to that server.  If\
    \ the\n   transaction-id in the LEASEQUERY-DONE does not match an outstanding\n\
    \   LEASEQUERY message, the client MUST close the TCP connection.\n"
- title: 6.3.1.  Reply Completion
  contents:
  - "6.3.1.  Reply Completion\n   The reply to a Bulk Leasequery request is complete\
    \ (i.e., no further\n   messages for that request transaction-id will be received)\
    \ when one\n   of these conditions is met:\n   1.  if the LEASEQUERY-REPLY message\
    \ had no OPTION_CLIENT_DATA option,\n       when the LEASEQUERY-REPLY is received,\n\
    \   2.  else if the LEASEQUERY-REPLY did have an OPTION_CLIENT_DATA, when\n  \
    \     the corresponding LEASEQUERY-DONE message is received,\n   3.  else when\
    \ the connection is closed.\n"
- title: 6.4.  Querying Multiple Servers
  contents:
  - "6.4.  Querying Multiple Servers\n   A Bulk Leasequery client MAY be configured\
    \ to attempt to connect to\n   and query from multiple DHCPv6 servers in parallel.\
    \  The DHCPv6\n   Leasequery specification [RFC5007] includes a discussion about\n\
    \   reconciling binding data received from multiple DHCPv6 servers.\n"
- title: 6.5.  Multiple Queries to a Single Server
  contents:
  - "6.5.  Multiple Queries to a Single Server\n   Bulk Leasequery clients may need\
    \ to make multiple queries in order to\n   recover binding information.  A requestor\
    \ MAY use a single connection\n   to issue multiple queries.  Each query MUST\
    \ have a unique\n   transaction-id.  A server MAY process more than one query\
    \ at a time.\n   A server that is willing to do so MAY interleave replies to the\n\
    \   multiple queries within the stream of reply messages it sends.\n   Clients\
    \ need to be aware that replies for multiple queries may be\n   interleaved within\
    \ the stream of reply messages.  Clients that are\n   not able to process interleaved\
    \ replies (based on transaction-id)\n   MUST NOT send more than one query at a\
    \ time.  Requestors should be\n   aware that servers are not required to process\
    \ queries in parallel,\n   and that servers are likely to limit the rate at which\
    \ they process\n   queries from any one requestor.\n"
- title: 6.5.1.  Example
  contents:
  - "6.5.1.  Example\n   This example illustrates what a series of queries and responses\
    \ might\n   look like.  This is only an example -- there is no requirement that\n\
    \   this sequence must be followed, or that clients or servers must\n   support\
    \ parallel queries.\n   In the example session, the client sends four queries\
    \ after\n   establishing a connection; \"xid\" denotes a transaction-id in the\n\
    \   diagram.  Query 1 results in a failure; query 2 succeeds and the\n   stream\
    \ of replies concludes before the client issues any new query.\n   Query 3 and\
    \ query 4 overlap, and the server interleaves its replies\n   to those two queries.\n\
    \        Client                        Server\n        ------                \
    \        ------\n        LEASEQUERY xid 1 ----->\n                         <-----\
    \       LEASEQUERY-REPLY xid 1 (w/error)\n        LEASEQUERY xid 2 ----->\n  \
    \                       <-----       LEASEQUERY-REPLY xid 2\n                \
    \         <-----       LEASEQUERY-DATA xid 2\n                         <-----\
    \       LEASEQUERY-DATA xid 2\n                         <-----       LEASEQUERY-DONE\
    \ xid 2\n        LEASEQUERY xid 3 ----->\n        LEASEQUERY xid 4 ----->\n  \
    \                       <-----       LEASEQUERY-REPLY xid 4\n                \
    \         <-----       LEASEQUERY-DATA xid 4\n                         <-----\
    \       LEASEQUERY-REPLY xid 3\n                         <-----       LEASEQUERY-DATA\
    \ xid 4\n                         <-----       LEASEQUERY-DATA xid 3\n       \
    \                  <-----       LEASEQUERY-DONE xid 3\n                      \
    \   <-----       LEASEQUERY-DATA xid 4\n                         <-----      \
    \ LEASEQUERY-DONE xid 4\n"
- title: 6.6.  Closing Connections
  contents:
  - "6.6.  Closing Connections\n   The requestor MAY close its end of the TCP connection\
    \ after sending a\n   LEASEQUERY message to the server.  The requestor MAY choose\
    \ to retain\n   the connection if it intends to issue additional queries.  Note\
    \ that\n   this client behavior does not guarantee that the connection will be\n\
    \   available for additional queries: the server might decide to close\n   the\
    \ connection based on its own configuration.\n"
- title: 7.  Server Behavior
  contents:
  - '7.  Server Behavior

    '
- title: 7.1.  Accepting Connections
  contents:
  - "7.1.  Accepting Connections\n   Servers that implement DHCPv6 Bulk Leasequery\
    \ listen for incoming TCP\n   connections.  Port numbers are discussed in Section\
    \ 5.6.  Servers\n   MUST be able to limit the number of currently accepted and\
    \ active\n   connections.  The value BULK_LQ_MAX_CONNS MUST be the default;\n\
    \   implementations MAY permit the value to be configurable.\n   Servers MAY restrict\
    \ Bulk Leasequery connections and LEASEQUERY\n   messages to certain clients.\
    \  Connections that are not from permitted\n   clients SHOULD BE closed immediately,\
    \ to avoid server connection\n   resource exhaustion.  Servers MAY restrict some\
    \ clients to certain\n   query types.  Servers MAY reply to queries that are not\
    \ permitted\n   with the NotAllowed status code [RFC5007], and/or close the\n\
    \   connection.\n   If the TCP connection becomes blocked while the server is\
    \ accepting a\n   connection or reading a query, it SHOULD be prepared to terminate\
    \ the\n   connection after BULK_LQ_DATA_TIMEOUT.  We make this recommendation\n\
    \   to allow Servers to control the period of time they are willing to\n   wait\
    \ before abandoning an inactive connection, independent of the TCP\n   implementations\
    \ they may be using.\n"
- title: 7.2.  Forming Replies
  contents:
  - "7.2.  Forming Replies\n   The DHCPv6 Leasequery [RFC5007] specification describes\
    \ the initial\n   construction of LEASEQUERY-REPLY messages and the processing\
    \ of\n   QUERY_BY_ADDRESS and QUERY_BY_CLIENTID.  Use of the LEASEQUERY-REPLY\n\
    \   and LEASEQUERY-DATA messages to carry multiple bindings is described\n   in\
    \ Section 5.2.  Message transmission and framing for TCP is\n   described in Section\
    \ 5.1.  If the connection becomes blocked while\n   the server is attempting to\
    \ send reply messages, the server SHOULD be\n   prepared to terminate the TCP\
    \ connection after BULK_LQ_DATA_TIMEOUT.\n   If the server encounters an error\
    \ during initial query processing,\n   before any reply has been sent, it SHOULD\
    \ send a LEASEQUERY-REPLY\n   containing an error code in an OPTION_STATUS_CODE\
    \ option.  This\n   signals to the requestor that no data will be returned.  If\
    \ the\n   server encounters an error while processing a query that has already\n\
    \   resulted in one or more reply messages, the server SHOULD send a\n   LEASEQUERY-DONE\
    \ message with an error status.  The server SHOULD\n   close its end of the connection\
    \ as an indication that it was not able\n   to complete query processing.\n  \
    \ If the server does not find any bindings satisfying a query, it\n   SHOULD send\
    \ a LEASEQUERY-REPLY without an OPTION_STATUS_CODE option\n   and without any\
    \ OPTION_CLIENT_DATA option.  Otherwise, the server\n   sends each binding's data\
    \ in a reply message.  The first reply\n   message is a LEASEQUERY-REPLY.  The\
    \ binding data is carried in an\n   OPTION_CLIENT_DATA option, as specified in\
    \ [RFC5007] and extended\n   below.  The server returns subsequent bindings in\
    \ LEASEQUERY-DATA\n   messages, which can avoid redundant data (such as the requestor's\n\
    \   Client-ID).\n   For QUERY_BY_RELAY_ID, the server locates each binding associated\n\
    \   with the query's Relay-ID option value.  In order to give a\n   meaningful\
    \ reply to a QUERY_BY_RELAY_ID, the server has to be able to\n   maintain this\
    \ association in its DHCPv6 binding data.  If the query's\n   link-address is\
    \ not set to 0::0, the server only returns bindings on\n   links that could contain\
    \ that address.  If the link-address is not\n   0::0 and the server cannot find\
    \ any matching links, the server SHOULD\n   return the NotConfigured status in\
    \ a LEASEQUERY-REPLY.\n   For QUERY_BY_LINK_ADDRESS, the server locates each binding\
    \ associated\n   with the link identified by the query's link-address value.\n\
    \   For QUERY_BY_REMOTE_ID, the server locates each binding associated\n   with\
    \ the query's Relay Remote-ID option value.  In order to be able\n   to give meaningful\
    \ replies to this query, the server has to be able\n   to maintain this association\
    \ in its binding database.  If the query\n   message's link-address is not set\
    \ to 0::0, the server only returns\n   bindings on links that could contain that\
    \ address.  If the link-\n   address is not 0::0 and the server cannot find any\
    \ matching links,\n   the server SHOULD return the NotConfigured status in a LEASEQUERY-\n\
    \   REPLY.\n   The server sends the LEASEQUERY-DONE message as specified in\n\
    \   Section 5.2.\n"
- title: 7.3.  Multiple or Parallel Queries
  contents:
  - "7.3.  Multiple or Parallel Queries\n   As discussed in Section 6.5, requestors\
    \ may want to leverage an\n   existing connection if they need to make multiple\
    \ queries.  Servers\n   MAY support reading and processing multiple queries from\
    \ a single\n   connection.  A server MUST NOT read more query messages from a\n\
    \   connection than it is prepared to process simultaneously.\n   This MAY be\
    \ a feature that is administratively controlled.  Servers\n   that are able to\
    \ process queries in parallel SHOULD offer\n   configuration that limits the number\
    \ of simultaneous queries\n   permitted from any one requestor, in order to control\
    \ resource use if\n   there are multiple requestors seeking service.\n"
- title: 7.4.  Closing Connections
  contents:
  - "7.4.  Closing Connections\n   The server MAY close its end of the TCP connection\
    \ after sending its\n   last message (a LEASEQUERY-REPLY or a LEASEQUERY-DONE)\
    \ in response to\n   a query.  Alternatively, the server MAY retain the connection\
    \ and\n   wait for additional queries from the client.  The server SHOULD be\n\
    \   prepared to limit the number of connections it maintains, and SHOULD\n   be\
    \ prepared to close idle connections to enforce the limit.\n   The server MUST\
    \ close its end of the TCP connection if it encounters\n   an error sending data\
    \ on the connection.  The server MUST close its\n   end of the TCP connection\
    \ if it finds that it has to abort an in-\n   process request.  A server aborting\
    \ an in-process request MAY attempt\n   to notify its clients by using the QueryTerminated\
    \ (Section 5.5)\n   status code.  If the server detects that the client end has\
    \ been\n   closed, the server MUST close its end of the connection after it has\n\
    \   finished processing any outstanding requests from the client.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The \"Security Considerations\" section of [RFC3315]\
    \ details the\n   general threats to DHCPv6.  The DHCPv6 Leasequery specification\n\
    \   [RFC5007] describes recommendations for the Leasequery protocol,\n   especially\
    \ with regard to relayed LEASEQUERY messages, mitigation of\n   packet-flooding\
    \ denial-of-service (DoS) attacks, restriction to\n   trusted clients, and use\
    \ of IPsec [RFC4301].\n   The use of TCP introduces some additional concerns.\
    \  Attacks that\n   attempt to exhaust the DHCPv6 server's available TCP connection\n\
    \   resources, such as SYN flooding attacks, can compromise the ability\n   of\
    \ legitimate clients to receive service.  Malicious clients who\n   succeed in\
    \ establishing connections, but who then send invalid\n   queries, partial queries,\
    \ or no queries at all also can exhaust a\n   server's pool of available connections.\
    \  We recommend that servers\n   offer configuration to limit the sources of incoming\
    \ connections,\n   that they limit the number of accepted connections and the\
    \ number of\n   in-process queries from any one connection, and that they limit\
    \ the\n   period of time during which an idle connection will be left open.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   IANA has assigned a new value in the registry of\
    \ DHCPv6 Option Codes:\n      53 OPTION_RELAY_ID\n   IANA has assigned a new value\
    \ in the registry of DHCPv6 Status Codes:\n      11 QueryTerminated\n   IANA has\
    \ assigned the following values in the registry of DHCPv6\n   Message types:\n\
    \      16 LEASEQUERY-DONE\n      17 LEASEQUERY-DATA\n   IANA has assigned the\
    \ following values in the registry of query-types\n   for the DHCPv6 OPTION_LQ_QUERY\
    \ option:\n      3 QUERY_BY_RELAY_ID\n      4 QUERY_BY_LINK_ADDRESS\n      5 QUERY_BY_REMOTE_ID\n\
    \   The above-mentioned registries are available from\n   http://www.iana.org.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   Many of the ideas in this document were originally proposed\
    \ by Kim\n   Kinnear, Richard Johnson, Hemant Singh, Ole Troan, and Bernie Volz.\n\
    \   Further suggestions and improvements were made by participants in the\n  \
    \ DHC working group, including John Brzozowski, Marcus Goller, Alfred\n   Hoenes,\
    \ Ted Lemon, Bud Millwood, and Thomas Narten.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3315]  Droms, R., Bound, J., Volz, B., Lemon, T., Perkins, C.,\n\
    \              and M. Carney, \"Dynamic Host Configuration Protocol for\n    \
    \          IPv6 (DHCPv6)\", RFC 3315, July 2003.\n   [RFC3633]  Troan, O. and\
    \ R. Droms, \"IPv6 Prefix Options for Dynamic\n              Host Configuration\
    \ Protocol (DHCP) version 6\", RFC 3633,\n              December 2003.\n   [RFC4649]\
    \  Volz, B., \"Dynamic Host Configuration Protocol for IPv6\n              (DHCPv6)\
    \ Relay Agent Remote-ID Option\", RFC 4649,\n              August 2006.\n   [RFC5007]\
    \  Brzozowski, J., Kinnear, K., Volz, B., and S. Zeng,\n              \"DHCPv6\
    \ Leasequery\", RFC 5007, September 2007.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC4301]  Kent, S. and K. Seo, \"Security\
    \ Architecture for the\n              Internet Protocol\", RFC 4301, December\
    \ 2005.\n   [RFC4614]  Duke, M., Braden, R., Eddy, W., and E. Blanton, \"A Roadmap\n\
    \              for Transmission Control Protocol (TCP) Specification\n       \
    \       Documents\", RFC 4614, September 2006.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Mark Stapp\n   Cisco Systems, Inc.\n   1414 Massachusetts\
    \ Ave.\n   Boxborough, MA  01719\n   USA\n   Phone: +1 978 936 0000\n   EMail:\
    \ mjs@cisco.com\n"
