- title: __initial_text__
  contents:
  - "           Privacy Enhancement for Internet Electronic Mail:\n        Part I:\
    \ Message Encryption and Authentication Procedures\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for\
    \ the Internet\n   community, and requests discussion and suggestions for improvements.\n\
    \   Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document is the outgrowth of a series of meetings of\
    \ the Privacy\n   and Security Research Group (PSRG) of the IRTF and the PEM Working\n\
    \   Group of the IETF.  I would like to thank the members of the PSRG and\n  \
    \ the IETF PEM WG, as well as all participants in discussions on the\n   \"pem-dev@tis.com\"\
    \ mailing list, for their contributions to this\n   document.\n"
- title: 1.  Executive Summary
  contents:
  - "1.  Executive Summary\n   This document defines message encryption and authentication\n\
    \   procedures, in order to provide privacy-enhanced mail (PEM) services\n   for\
    \ electronic mail transfer in the Internet.  It is intended to\n   become one\
    \ member of a related set of four RFCs.  The procedures\n   defined in the current\
    \ document are intended to be compatible with a\n   wide range of key management\
    \ approaches, including both symmetric\n   (secret-key) and asymmetric (public-key)\
    \ approaches for encryption of\n   data encrypting keys.  Use of symmetric cryptography\
    \ for message text\n   encryption and/or integrity check computation is anticipated.\
    \ RFC\n   1422 specifies supporting key management mechanisms based on the use\n\
    \   of public-key certificates.  RFC 1423 specifies algorithms, modes,\n   and\
    \ associated identifiers relevant to the current RFC and to RFC\n   1422.  RFC\
    \ 1424 provides details of paper and electronic formats and\n   procedures for\
    \ the key management infrastructure being established in\n   support of these\
    \ services.\n   Privacy enhancement services (confidentiality, authentication,\n\
    \   message integrity assurance, and non-repudiation of origin) are\n   offered\
    \ through the use of end-to-end cryptography between originator\n   and recipient\
    \ processes at or above the User Agent level.  No special\n   processing requirements\
    \ are imposed on the Message Transfer System at\n   endpoints or at intermediate\
    \ relay sites.  This approach allows\n   privacy enhancement facilities to be\
    \ incorporated selectively on a\n   site-by-site or user-by-user basis without\
    \ impact on other Internet\n   entities.  Interoperability among heterogeneous\
    \ components and mail\n   transport facilities is supported.\n   The current specification's\
    \ scope is confined to PEM processing\n   procedures for the RFC-822 textual mail\
    \ environment, and defines the\n   Content-Domain indicator value \"RFC822\" to\
    \ signify this usage.\n   Follow-on work in integration of PEM capabilities with\
    \ other\n   messaging environments (e.g., MIME) is anticipated and will be\n \
    \  addressed in separate and/or successor documents, at which point\n   additional\
    \ Content-Domain indicator values will be defined.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   For descriptive purposes, this RFC uses some terms defined\
    \ in the OSI\n   X.400 Message Handling System Model per the CCITT Recommendations.\n\
    \   This section replicates a portion of (1984) X.400's Section 2.2.1,\n   \"\
    Description of the MHS Model: Overview\" in order to make the\n   terminology\
    \ clear to readers who may not be familiar with the OSI MHS\n   Model.\n   In\
    \ the [MHS] model, a user is a person or a computer application.  A\n   user is\
    \ referred to as either an originator (when sending a message)\n   or a recipient\
    \ (when receiving one).  MH Service elements define the\n   set of message types\
    \ and the capabilities that enable an originator\n   to transfer messages of those\
    \ types to one or more recipients.\n   An originator prepares messages with the\
    \ assistance of his or her\n   User Agent (UA).  A UA is an application process\
    \ that interacts with\n   the Message Transfer System (MTS) to submit messages.\
    \  The MTS\n   delivers to one or more recipient UAs the messages submitted to\
    \ it.\n   Functions performed solely by the UA and not standardized as part of\n\
    \   the MH Service elements are called local UA functions.\n   The MTS is composed\
    \ of a number of Message Transfer Agents (MTAs).\n   Operating together, the MTAs\
    \ relay messages and deliver them to the\n   intended recipient UAs, which then\
    \ make the messages available to the\n   intended recipients.\n   The collection\
    \ of UAs and MTAs is called the Message Handling System\n   (MHS).  The MHS and\
    \ all of its users are collectively referred to as\n   the Message Handling Environment.\n"
- title: 3.  Services, Constraints, and Implications
  contents:
  - "3.  Services, Constraints, and Implications\n   This RFC defines mechanisms to\
    \ enhance privacy for electronic mail\n   transferred in the Internet. The facilities\
    \ discussed in this RFC\n   provide privacy enhancement services on an end-to-end\
    \ basis between\n   originator and recipient processes residing at the UA level\
    \ or above.\n   No privacy enhancements are offered for message fields which are\n\
    \   added or transformed by intermediate relay points between PEM\n   processing\
    \ components.\n   If an originator elects to perform PEM processing on an outbound\n\
    \   message, all PEM-provided security services are applied to the PEM\n   message's\
    \ body in its entirety; selective application to portions of\n   a PEM message\
    \ is not supported. Authentication, integrity, and (when\n   asymmetric key management\
    \ is employed) non-repudiation of origin\n   services are applied to all PEM messages;\
    \ confidentiality services\n   are optionally selectable.\n   In keeping with\
    \ the Internet's heterogeneous constituencies and usage\n   modes, the measures\
    \ defined here are applicable to a broad range of\n   Internet hosts and usage\
    \ paradigms.  In particular, it is worth\n   noting the following attributes:\n\
    \        1.  The mechanisms defined in this RFC are not restricted to a\n    \
    \        particular host or operating system, but rather allow\n            interoperability\
    \ among a broad range of systems.  All\n            privacy enhancements are implemented\
    \ at the application\n            layer, and are not dependent on any privacy\
    \ features at\n            lower protocol layers.\n        2.  The defined mechanisms\
    \ are compatible with non-enhanced\n            Internet components.  Privacy\
    \ enhancements are implemented\n            in an end-to-end fashion which does\
    \ not impact mail\n            processing by intermediate relay hosts which do\
    \ not\n            incorporate privacy enhancement facilities.  It is\n      \
    \      necessary, however, for a message's originator to be\n            cognizant\
    \ of whether a message's intended recipient\n            implements privacy enhancements,\
    \ in order that encoding and\n            possible encryption will not be performed\
    \ on a message whose\n            destination is not equipped to perform corresponding\
    \ inverse\n            transformations.  (Section 4.6.1.1.3 of this RFC describes\
    \ a\n            PEM message type (\"MIC-CLEAR\") which represents a signed,\n\
    \            unencrypted PEM message in a form readable without PEM\n        \
    \    processing capabilities yet validatable by PEM-equipped\n            recipients.)\n\
    \        3.  The defined mechanisms are compatible with a range of mail\n    \
    \        transport facilities (MTAs).  Within the Internet,\n            electronic\
    \ mail transport is effected by a variety of SMTP\n            [2] implementations.\
    \  Certain sites, accessible via SMTP,\n            forward mail into other mail\
    \ processing environments (e.g.,\n            USENET, CSNET, BITNET).  The privacy\
    \ enhancements must be\n            able to operate across the SMTP realm; it\
    \ is desirable that\n            they also be compatible with protection of electronic\
    \ mail\n            sent between the SMTP environment and other connected\n  \
    \          environments.\n        4.  The defined mechanisms are compatible with\
    \ a broad range of\n            electronic mail user agents (UAs).  A large variety\
    \ of\n            electronic mail user agent programs, with a corresponding\n\
    \            broad range of user interface paradigms, is used in the\n       \
    \     Internet.  In order that electronic mail privacy\n            enhancements\
    \ be available to the broadest possible user\n            community, selected\
    \ mechanisms should be usable with the\n            widest possible variety of\
    \ existing UA programs.  For\n            purposes of pilot implementation, it\
    \ is desirable that\n            privacy enhancement processing be incorporable\
    \ into a\n            separate program, applicable to a range of UAs, rather than\n\
    \            requiring internal modifications to each UA with which PEM\n    \
    \        services are to be provided.\n        5.  The defined mechanisms allow\
    \ electronic mail privacy\n            enhancement processing to be performed\
    \ on personal computers\n            (PCs) separate from the systems on which\
    \ UA functions are\n            implemented.  Given the expanding use of PCs and\
    \ the limited\n            degree of trust which can be placed in UA implementations\
    \ on\n            many multi-user systems, this attribute can allow many users\n\
    \            to process PEM with a higher assurance level than a strictly\n  \
    \          UA-integrated approach would allow.\n        6.  The defined mechanisms\
    \ support privacy protection of\n            electronic mail addressed to mailing\
    \ lists (distribution\n            lists, in ISO parlance).\n        7.  The mechanisms\
    \ defined within this RFC are compatible with a\n            variety of supporting\
    \ key management approaches, including\n            (but not limited to) manual\
    \ pre-distribution, centralized\n            key distribution based on symmetric\
    \ cryptography, and the\n            use of public-key certificates per RFC 1422.\
    \  Different\n            key management mechanisms may be used for different\n\
    \            recipients of a multicast message.  For two PEM\n            implementations\
    \ to interoperate, they must share a common\n            key management mechanism;\
    \ support for the mechanism defined\n            in RFC 1422 is strongly encouraged.\n\
    \   In order to achieve applicability to the broadest possible range of\n   Internet\
    \ hosts and mail systems, and to facilitate pilot\n   implementation and testing\
    \ without the need for prior and pervasive\n   modifications throughout the Internet,\
    \ the following design\n   principles were applied in selecting the set of features\
    \ specified in\n   this RFC:\n        1.  This RFC's measures are restricted to\
    \ implementation at\n            endpoints and are amenable to integration with\
    \ existing\n            Internet mail protocols at the user agent (UA) level or\n\
    \            above, rather than necessitating modifications to existing\n    \
    \        mail protocols or integration into the message transport\n          \
    \  system (e.g., SMTP servers).\n        2.  The set of supported measures enhances\
    \ rather than restricts\n            user capabilities.  Trusted implementations,\
    \ incorporating\n            integrity features protecting software from subversion\
    \ by\n            local users, cannot be assumed in general.  No mechanisms\n\
    \            are assumed to prevent users from sending, at their\n           \
    \ discretion, messages to which no PEM processing has been\n            applied.\
    \ In the absence of such features, it appears more\n            feasible to provide\
    \ facilities which enhance user services\n            (e.g., by protecting and\
    \ authenticating inter-user traffic)\n            than to enforce restrictions\
    \ (e.g., inter-user access\n            control) on user actions.\n        3.\
    \  The set of supported measures focuses on a set of functional\n            capabilities\
    \ selected to provide significant and tangible\n            benefits to a broad\
    \ user community.  By concentrating on the\n            most critical set of services,\
    \ we aim to maximize the added\n            privacy value that can be provided\
    \ with a modest level of\n            implementation effort.\n   Based on these\
    \ principles, the following facilities are provided:\n        1.  disclosure protection,\n\
    \        2.  originator authenticity,\n        3.  message integrity measures,\
    \ and\n        4.  (if asymmetric key management is used) non-repudiation of\n\
    \            origin,\n   but the following privacy-relevant concerns are not addressed:\n\
    \        1.  access control,\n        2.  traffic flow confidentiality,\n    \
    \    3.  address list accuracy,\n        4.  routing control,\n        5.  issues\
    \ relating to the casual serial reuse of PCs by\n            multiple users,\n\
    \        6.  assurance of message receipt and non-deniability of receipt,\n  \
    \      7.  automatic association of acknowledgments with the messages\n      \
    \      to which they refer, and\n        8.  message duplicate detection, replay\
    \ prevention, or other\n            stream-oriented services\n"
- title: 4.  Processing of Messages
  contents:
  - '4.  Processing of Messages

    '
- title: 4.1  Message Processing Overview
  contents:
  - "4.1  Message Processing Overview\n   This subsection provides a high-level overview\
    \ of the components and\n   processing steps involved in electronic mail privacy\
    \ enhancement\n   processing.  Subsequent subsections will define the procedures\
    \ in\n   more detail.\n"
- title: 4.1.1  Types of Keys
  contents:
  - "4.1.1  Types of Keys\n   A two-level keying hierarchy is used to support PEM\
    \ transmission:\n        1.  Data Encrypting Keys (DEKs) are used for encryption\
    \ of\n            message text and (with certain choices among a set of\n    \
    \        alternative algorithms) for computation of message integrity\n      \
    \      check (MIC) quantities.  In the asymmetric key management\n           \
    \ environment, DEKs are also used to encrypt the signed\n            representations\
    \ of MICs in PEM messages to which\n            confidentiality has been applied.\
    \ DEKs are generated\n            individually for each transmitted message; no\n\
    \            predistribution of DEKs is needed to support PEM\n            transmission.\n\
    \        2.  Interchange Keys (IKs) are used to encrypt DEKs for\n           \
    \ transmission within messages.  Ordinarily, the same IK will\n            be\
    \ used for all messages sent from a given originator to a\n            given recipient\
    \ over a period of time.  Each transmitted\n            message includes a representation\
    \ of the DEK(s) used for\n            message encryption and/or MIC computation,\
    \ encrypted under\n            an individual IK per named recipient.  The representation\
    \ is\n            associated with Originator-ID and Recipient-ID fields\n    \
    \        (defined in different forms so as to distinguish symmetric\n        \
    \    from asymmetric cases), which allow each individual\n            recipient\
    \ to identify the IK used to encrypt DEKs and/or\n            MICs for that recipient's\
    \ use.  Given an appropriate IK, a\n            recipient can decrypt the corresponding\
    \ transmitted DEK\n            representation, yielding the DEK required for message\
    \ text\n            decryption and/or MIC validation.  The definition of an IK\n\
    \            differs depending on whether symmetric or asymmetric\n          \
    \  cryptography is used for DEK encryption:\n                 2a. When symmetric\
    \ cryptography is used for DEK\n                     encryption, an IK is a single\
    \ symmetric key shared\n                     between an originator and a recipient.\
    \  In this\n                     case, the same IK is used to encrypt MICs as\
    \ well\n                     as DEKs for transmission.  Version/expiration\n \
    \                    information and IA identification associated with\n     \
    \                the originator and with the recipient must be\n             \
    \        concatenated in order to fully qualify a symmetric\n                \
    \     IK.\n                 2b. When asymmetric cryptography is used, the IK\n\
    \                     component used for DEK encryption is the public\n      \
    \               component [8] of the recipient.  The IK component\n          \
    \           used for MIC encryption is the private component of\n            \
    \         the originator, and therefore only one encrypted\n                 \
    \    MIC representation need be included per message,\n                     rather\
    \ than one per recipient.  Each of these IK\n                     components can\
    \ be fully qualified in a Recipient-ID\n                     or Originator-ID\
    \ field, respectively.\n                     Alternatively, an originator's IK\
    \ component may be\n                     determined from a certificate carried\
    \ in an\n                     \"Originator-Certificate:\" field.\n"
- title: 4.1.2  Processing Procedures
  contents:
  - "4.1.2  Processing Procedures\n   When PEM processing is to be performed on an\
    \ outgoing message, a DEK\n   is generated [1] for use in message encryption and\
    \ (if a chosen MIC\n   algorithm requires a key) a variant of the DEK is formed\
    \ for use in\n   MIC computation.  DEK generation can be omitted for the case\
    \ of a\n   message where confidentiality is not to be applied, unless a chosen\n\
    \   MIC computation algorithm requires a DEK.  Other parameters (e.g.,\n   Initialization\
    \ Vectors (IVs)) as required by selected encryption\n   algorithms are also generated.\n\
    \   One or more Originator-ID and/or \"Originator-Certificate:\" fields are\n\
    \   included in a PEM message's encapsulated header to provide recipients\n  \
    \ with an identification component for the IK(s) used for message\n   processing.\
    \  All of a message's Originator-ID and/or \"Originator-\n   Certificate:\" fields\
    \ are assumed to correspond to the same principal;\n   the facility for inclusion\
    \ of multiple such fields accomodates the\n   prospect that different keys, algorithms,\
    \ and/or certification paths\n   may be required for processing by different recipients.\
    \  When a\n   message includes recipients for which asymmetric key management\
    \ is\n   employed as well as recipients for which symmetric key management is\n\
    \   employed, a separate Originator-ID or \"Originator-Certificate:\" field\n\
    \   precedes each set of recipients.\n   In the symmetric case, per-recipient\
    \ IK components are applied for\n   each individually named recipient in preparation\
    \ of ENCRYPTED, MIC-\n   ONLY, and MIC-CLEAR messages. A corresponding \"Recipient-ID-\n\
    \   Symmetric:\" field, interpreted in the context of the most recent\n   preceding\
    \ \"Originator-ID-Symmetric:\" field, serves to identify each\n   IK.  In the\
    \ asymmetric case, per-recipient IK components are applied\n   only for ENCRYPTED\
    \ messages, are independent of originator-oriented\n   header elements, and are\
    \ identified by \"Recipient-ID-Asymmetric:\"\n   fields.  Each Recipient-ID field\
    \ is followed by a \"Key-Info:\" field,\n   which transfers the message's DEK\
    \ encrypted under the IK appropriate\n   for the specified recipient.\n   When\
    \ symmetric key management is used for a given recipient, the\n   \"Key-Info:\"\
    \ field following the corresponding \"Recipient-ID-\n   Symmetric:\" field also\
    \ transfers the message's computed MIC,\n   encrypted under the recipient's IK.\
    \ When asymmetric key management is\n   used, a \"MIC-Info:\" field associated\
    \ with an \"Originator-ID-\n   Asymmetric:\" or \"Originator-Certificate:\" field\
    \ carries the message's\n   MIC, asymmetrically signed using the private component\
    \ of the\n   originator.  If the PEM message is of type ENCRYPTED (as defined\
    \ in\n   Section 4.6.1.1.1 of this RFC), the asymmetrically signed MIC is\n  \
    \ symmetrically encrypted using the same DEK, algorithm, encryption\n   mode and\
    \ other cryptographic parameters as used to encrypt the\n   message text, prior\
    \ to inclusion in the \"MIC-Info:\" field.\n"
- title: 4.1.2.1  Processing Steps
  contents:
  - "4.1.2.1  Processing Steps\n   A four-phase transformation procedure is employed\
    \ in order to\n   represent encrypted message text in a universally transmissible\
    \ form\n   and to enable messages encrypted on one type of host computer to be\n\
    \   decrypted on a different type of host computer.  A plaintext message\n   is\
    \ accepted in local form, using the host's native character set and\n   line representation.\
    \  The local form is converted to a canonical\n   message text representation,\
    \ defined as equivalent to the inter-SMTP\n   representation of message text.\
    \  This canonical representation forms\n   the input to the MIC computation step\
    \ (applicable to ENCRYPTED, MIC-\n   ONLY, and MIC-CLEAR messages) and the encryption\
    \ process (applicable\n   to ENCRYPTED messages only).\n   For ENCRYPTED PEM messages,\
    \ the canonical representation is padded as\n   required by the encryption algorithm,\
    \ and this padded canonical\n   representation is encrypted. The encrypted text\
    \ (for an ENCRYPTED\n   message) or the unpadded canonical form (for a MIC-ONLY\
    \ message) is\n   then encoded into a printable form.  The printable form is composed\n\
    \   of a restricted character set which is chosen to be universally\n   representable\
    \ across sites, and which will not be disrupted by\n   processing within and between\
    \ MTS entities. MIC-CLEAR PEM messages\n   omit the printable encoding step.\n\
    \   The output of the previous processing steps is combined with a set of\n  \
    \ header fields carrying cryptographic control information.  The\n   resulting\
    \ PEM message is passed to the electronic mail system to be\n   included within\
    \ the text portion of a transmitted message. There is\n   no requirement that\
    \ a PEM message comprise the entirety of an MTS\n   message's text portion; this\
    \ allows PEM-protected information to be\n   accompanied by (unprotected) annotations.\
    \  It is also permissible for\n   multiple PEM messages (and associated unprotected\
    \ text, outside the\n   PEM message boundaries) to be represented within the encapsulated\n\
    \   text of a higher-level PEM message. PEM message signatures are\n   forwardable\
    \ when asymmetric key management is employed; an authorized\n   recipient of a\
    \ PEM message with confidentiality applied can reduce\n   that message to a signed\
    \ but unencrypted form for forwarding purposes\n   or can re-encrypt that message\
    \ for subsequent transmission.\n   When a PEM message is received, the cryptographic\
    \ control fields\n   within its encapsulated header provide the information required\
    \ for\n   each authorized recipient to perform MIC validation and decryption of\n\
    \   the received message text.  For ENCRYPTED and MIC-ONLY messages, the\n   printable\
    \ encoding is converted to a bitstring.  Encrypted portions\n   of the transmitted\
    \ message are decrypted.  The MIC is validated.\n   Then, the recipient PEM process\
    \ converts the canonical representation\n   to its appropriate local form.\n"
- title: 4.1.2.2  Error Cases
  contents:
  - "4.1.2.2  Error Cases\n   A variety of error cases may occur and be detected in\
    \ the course of\n   processing a received PEM message. The specific actions to\
    \ be taken\n   in response to such conditions are local matters, varying as\n\
    \   functions of user preferences and the type of user interface provided\n  \
    \ by a particular PEM implementation, but certain general\n   recommendations\
    \ are appropriate. Syntactically invalid PEM messages\n   should be flagged as\
    \ such, preferably with collection of diagnostic\n   information to support debugging\
    \ of incompatibilities or other\n   failures.  RFC 1422 defines specific error\
    \ processing requirements\n   relevant to the certificate-based key management\
    \ mechanisms defined\n   therein.\n   Syntactically valid PEM messages which yield\
    \ MIC failures raise\n   special concern, as they may result from attempted attacks\
    \ or forged\n   messages.  As such, it is unsuitable to display their contents\
    \ to\n   recipient users without first indicating the fact that the contents'\n\
    \   authenticity and integrity cannot be guaranteed and then receiving\n   positive\
    \ user confirmation of such a warning.  MIC-CLEAR messages\n   (discussed in Section\
    \ 4.6.1.1.3 of this RFC) raise special concerns,\n   as MIC failures on such messages\
    \ may occur for a broader range of\n   benign causes than are applicable to other\
    \ PEM message types.\n"
- title: 4.2  Encryption Algorithms, Modes, and Parameters
  contents:
  - "4.2  Encryption Algorithms, Modes, and Parameters\n   For use in conjunction\
    \ with this RFC, RFC 1423 defines the\n   appropriate algorithms, modes, and associated\
    \ identifiers to be used\n   for encryption of message text with DEKs.\n   The\
    \ mechanisms defined in this RFC incorporate facilities for\n   transmission of\
    \ cryptographic parameters (e.g., pseudorandom\n   Initializing Vectors (IVs))\
    \ with PEM messages to which the\n   confidentiality service is applied, when\
    \ required by symmetric\n   message encryption algorithms and modes specified\
    \ in RFC 1423.\n   Certain operations require encryption of DEKs, MICs, and digital\n\
    \   signatures under an IK for purposes of transmission.  A header\n   facility\
    \ indicates the mode in which the IK is used for encryption.\n   RFC 1423 specifies\
    \ encryption algorithm and mode identifiers and\n   minimum essential support\
    \ requirements for key encryption processing.\n   RFC 1422 specifies asymmetric,\
    \ certificate-based key management\n   procedures based on CCITT Recommendation\
    \ X.509 to support the message\n   processing procedures defined in this document.\
    \ Support for the key\n   management approach defined in RFC 1422 is strongly\
    \ recommended.  The\n   message processing procedures can also be used with symmetric\
    \ key\n   management, given prior distribution of suitable symmetric IKs, but\n\
    \   no current RFCs specify key distribution procedures for such IKs.\n"
- title: 4.3  Privacy Enhancement Message Transformations
  contents:
  - '4.3  Privacy Enhancement Message Transformations

    '
- title: 4.3.1  Constraints
  contents:
  - "4.3.1  Constraints\n   An electronic mail encryption mechanism must be compatible\
    \ with the\n   transparency constraints of its underlying electronic mail\n  \
    \ facilities.  These constraints are generally established based on\n   expected\
    \ user requirements and on the characteristics of anticipated\n   endpoint and\
    \ transport facilities.  An encryption mechanism must also\n   be compatible with\
    \ the local conventions of the computer systems\n   which it interconnects.  Our\
    \ approach uses a canonicalization step to\n   abstract out local conventions\
    \ and a subsequent encoding step to\n   conform to the characteristics of the\
    \ underlying mail transport\n   medium (SMTP).  The encoding conforms to SMTP\
    \ constraints.  Section\n   4.5 of RFC 821 [2] details SMTP's transparency constraints.\n\
    \   To prepare a message for SMTP transmission, the following\n   requirements\
    \ must be met:\n        1.  All characters must be members of the 7-bit ASCII\
    \ character\n            set.\n        2.  Text lines, delimited by the character\
    \ pair <CR><LF>, must\n            be no more than 1000 characters long.\n   \
    \     3.  Since the string <CR><LF>.<CR><LF> indicates the end of a\n        \
    \    message, it must not occur in text prior to the end of a\n            message.\n\
    \   Although SMTP specifies a standard representation for line delimiters\n  \
    \ (ASCII <CR><LF>), numerous systems in the Internet use a different\n   native\
    \ representation to delimit lines.  For example, the <CR><LF>\n   sequences delimiting\
    \ lines in mail inbound to UNIX systems are\n   transformed to single <LF>s as\
    \ mail is written into local mailbox\n   files.  Lines in mail incoming to record-oriented\
    \ systems (such as\n   VAX VMS) may be converted to appropriate records by the\
    \ destination\n   SMTP server [3].  As a result, if the encryption process generated\n\
    \   <CR>s or <LF>s, those characters might not be accessible to a\n   recipient\
    \ UA program at a destination which uses different line\n   delimiting conventions.\
    \  It is also possible that conversion between\n   tabs and spaces may be performed\
    \ in the course of mapping between\n   inter-SMTP and local format; this is a\
    \ matter of local option.  If\n   such transformations changed the form of transmitted\
    \ ciphertext,\n   decryption would fail to regenerate the transmitted plaintext,\
    \ and a\n   transmitted MIC would fail to compare with that computed at the\n\
    \   destination.\n   The conversion performed by an SMTP server at a system with\
    \ EBCDIC as\n   a native character set has even more severe impact, since the\n\
    \   conversion from EBCDIC into ASCII is an information-losing\n   transformation.\
    \  In principle, the transformation function mapping\n   between inter-SMTP canonical\
    \ ASCII message representation and local\n   format could be moved from the SMTP\
    \ server up to the UA, given a\n   means to direct that the SMTP server should\
    \ no longer perform that\n   transformation.  This approach has a major disadvantage:\
    \ internal\n   file (e.g., mailbox) formats would be incompatible with the native\n\
    \   forms used on the systems where they reside.  Further, it would\n   require\
    \ modification to SMTP servers, as mail would be passed to SMTP\n   in a different\
    \ representation than it is passed at present.\n"
- title: 4.3.2  Approach
  contents:
  - "4.3.2  Approach\n   Our approach to supporting PEM across an environment in which\n\
    \   intermediate conversions may occur defines an encoding for mail which\n  \
    \ is uniformly representable across the set of PEM UAs regardless of\n   their\
    \ systems' native character sets.  This encoded form is used (for\n   specified\
    \ PEM message types) to represent mail text in transit from\n   originator to\
    \ recipient, but the encoding is not applied to enclosing\n   MTS headers or to\
    \ encapsulated headers inserted to carry control\n   information between PEM UAs.\
    \  The encoding's characteristics are such\n   that the transformations anticipated\
    \ between originator and recipient\n   UAs will not prevent an encoded message\
    \ from being decoded properly\n   at its destination.\n   Four transformation\
    \ steps, described in the following four\n   subsections, apply to outbound PEM\
    \ message processing:\n"
- title: '4.3.2.1  Step 1: Local Form'
  contents:
  - "4.3.2.1  Step 1: Local Form\n   This step is applicable to PEM message types\
    \ ENCRYPTED, MIC-ONLY, and\n   MIC-CLEAR.  The message text is created in the\
    \ system's native\n   character set, with lines delimited in accordance with local\n\
    \   convention.\n"
- title: '4.3.2.2  Step 2: Canonical Form'
  contents:
  - "4.3.2.2  Step 2: Canonical Form\n   This step is applicable to PEM message types\
    \ ENCRYPTED, MIC-ONLY, and\n   MIC-CLEAR.  The message text is converted to a\
    \ universal canonical\n   form, similar to the inter-SMTP representation [4] as\
    \ defined in RFC\n   821 [2] and RFC 822 [5]. The procedures performed in order\
    \ to\n   accomplish this conversion are dependent on the characteristics of\n\
    \   the local form and so are not specified in this RFC.\n   PEM canonicalization\
    \ assures that the message text is represented\n   with the ASCII character set\
    \ and \"<CR><LF>\" line delimiters, but does\n   not perform the dot-stuffing\
    \ transformation discussed in RFC 821,\n   Section 4.5.2.  Since a message is\
    \ converted to a standard character\n   set and representation before encryption,\
    \ a transferred PEM message\n   can be decrypted and its MIC can be validated\
    \ at any type of\n   destination host computer.  Decryption and MIC validation\
    \ is\n   performed before any conversions which may be necessary to transform\n\
    \   the message into a destination-specific local form.\n"
- title: '4.3.2.3  Step 3: Authentication and Encryption'
  contents:
  - "4.3.2.3  Step 3: Authentication and Encryption\n   Authentication processing\
    \ is applicable to PEM message types\n   ENCRYPTED, MIC-ONLY, and MIC-CLEAR. \
    \ The canonical form is input to\n   the selected MIC computation algorithm in\
    \ order to compute an\n   integrity check quantity for the message.  No padding\
    \ is added to the\n   canonical form before submission to the MIC computation\
    \ algorithm,\n   although certain MIC algorithms will apply their own padding\
    \ in the\n   course of computing a MIC.\n   Encryption processing is applicable\
    \ only to PEM message type\n   ENCRYPTED.  RFC 1423 defines the padding technique\
    \ used to support\n   encryption of the canonically-encoded message text.\n"
- title: '4.3.2.4  Step 4: Printable Encoding'
  contents:
  - "4.3.2.4  Step 4: Printable Encoding\n   This printable encoding step is applicable\
    \ to PEM message types\n   ENCRYPTED and MIC-ONLY.  The same processing is also\
    \ employed in\n   representation of certain specifically identified PEM encapsulated\n\
    \   header field quantities as cited in Section 4.6.  Proceeding from\n   left\
    \ to right, the bit string resulting from step 3 is encoded into\n   characters\
    \ which are universally representable at all sites, though\n   not necessarily\
    \ with the same bit patterns (e.g., although the\n   character \"E\" is represented\
    \ in an ASCII-based system as hexadecimal\n   45 and as hexadecimal C5 in an EBCDIC-based\
    \ system, the local\n   significance of the two representations is equivalent).\n\
    \   A 64-character subset of International Alphabet IA5 is used, enabling\n  \
    \ 6 bits to be represented per printable character.  (The proposed\n   subset\
    \ of characters is represented identically in IA5 and ASCII.)\n   The character\
    \ \"=\" signifies a special processing function used for\n   padding within the\
    \ printable encoding procedure.\n   To represent the encapsulated text of a PEM\
    \ message, the encoding\n   function's output is delimited into text lines (using\
    \ local\n   conventions), with each line except the last containing exactly 64\n\
    \   printable characters and the final line containing 64 or fewer\n   printable\
    \ characters.  (This line length is easily printable and is\n   guaranteed to\
    \ satisfy SMTP's 1000-character transmitted line length\n   limit.) This folding\
    \ requirement does not apply when the encoding\n   procedure is used to represent\
    \ PEM header field quantities; Section\n   4.6 discusses folding of PEM encapsulated\
    \ header fields.\n   The encoding process represents 24-bit groups of input bits\
    \ as output\n   strings of 4 encoded characters. Proceeding from left to right\
    \ across\n   a 24-bit input group extracted from the output of step 3, each 6-bit\n\
    \   group is used as an index into an array of 64 printable characters.\n   The\
    \ character referenced by the index is placed in the output string.\n   These\
    \ characters, identified in Table 1, are selected so as to be\n   universally\
    \ representable, and the set excludes characters with\n   particular significance\
    \ to SMTP (e.g., \".\", \"<CR>\", \"<LF>\").\n   Special processing is performed\
    \ if fewer than 24 bits are available\n   in an input group at the end of a message.\
    \  A full encoding quantum\n   is always completed at the end of a message.  When\
    \ fewer than 24\n   input bits are available in an input group, zero bits are\
    \ added (on\n   the right) to form an integral number of 6-bit groups.  Output\n\
    \   character positions which are not required to represent actual input\n   data\
    \ are set to the character \"=\".  Since all canonically encoded\n   output is\
    \ an integral number of octets, only the following cases can\n   arise: (1) the\
    \ final quantum of encoding input is an integral\n   multiple of 24 bits; here,\
    \ the final unit of encoded output will be\n   an integral multiple of 4 characters\
    \ with no \"=\" padding, (2) the\n   final quantum of encoding input is exactly\
    \ 8 bits; here, the final\n   unit of encoded output will be two characters followed\
    \ by two \"=\"\n   padding characters, or (3) the final quantum of encoding input\
    \ is\n   exactly 16 bits; here, the final unit of encoded output will be three\n\
    \   characters followed by one \"=\" padding character.\n   Value Encoding  Value\
    \ Encoding  Value Encoding  Value Encoding\n       0 A            17 R       \
    \     34 i            51 z\n       1 B            18 S            35 j       \
    \     52 0\n       2 C            19 T            36 k            53 1\n     \
    \  3 D            20 U            37 l            54 2\n       4 E           \
    \ 21 V            38 m            55 3\n       5 F            22 W           \
    \ 39 n            56 4\n       6 G            23 X            40 o           \
    \ 57 5\n       7 H            24 Y            41 p            58 6\n       8 I\
    \            25 Z            42 q            59 7\n       9 J            26 a\
    \            43 r            60 8\n      10 K            27 b            44 s\
    \            61 9\n      11 L            28 c            45 t            62 +\n\
    \      12 M            29 d            46 u            63 /\n      13 N      \
    \      30 e            47 v\n      14 O            31 f            48 w      \
    \   (pad) =\n      15 P            32 g            49 x\n      16 Q          \
    \  33 h            50 y\n                  Printable Encoding Characters\n   \
    \                          Table 1\n"
- title: 4.3.2.5  Summary of Transformations
  contents:
  - "4.3.2.5  Summary of Transformations\n   In summary, the outbound message is subjected\
    \ to the following\n   composition of transformations (or, for some PEM message\
    \ types, a\n   subset thereof):\n         Transmit_Form = Encode(Encrypt(Canonicalize(Local_Form)))\n\
    \   The inverse transformations are performed, in reverse order, to\n   process\
    \ inbound PEM messages:\n       Local_Form = DeCanonicalize(Decipher(Decode(Transmit_Form)))\n\
    \   Note that the local form and the functions to transform messages to\n   and\
    \ from canonical form may vary between the originator and recipient\n   systems\
    \ without loss of information.\n"
- title: 4.4  Encapsulation Mechanism
  contents:
  - "4.4  Encapsulation Mechanism\n   The encapsulation techniques defined in RFC-934\
    \ [6] are adopted for\n   encapsulation of PEM messages within separate enclosing\
    \ MTS messages\n   carrying associated MTS headers. This approach offers a number\
    \ of\n   advantages relative to a flat approach in which certain fields within\n\
    \   a single header are encrypted and/or carry cryptographic control\n   information.\
    \  As far as the MTS is concerned, the entirety of a PEM\n   message will reside\
    \ in an MTS message's text portion, not the MTS\n   message's header portion.\
    \ Encapsulation provides generality and\n   segregates fields with user-to-user\
    \ significance from those\n   transformed in transit.  All fields inserted in\
    \ the course of\n   encryption/authentication processing are placed in the encapsulated\n\
    \   header.  This facilitates compatibility with mail handling programs\n   which\
    \ accept only text, not header fields, from input files or from\n   other programs.\n\
    \   The encapsulation techniques defined in RFC-934 are consistent with\n   existing\
    \ Internet mail forwarding and bursting mechanisms.  These\n   techniques are\
    \ designed so that they may be used in a nested manner.\n   The encapsulation\
    \ techniques may be used to encapsulate one or more\n   PEM messages for forwarding\
    \ to a third party, possibly in conjunction\n   with interspersed (non-PEM) text\
    \ which serves to annotate the PEM\n   messages.\n   Two encapsulation boundaries\
    \ (EB's) are defined for delimiting\n   encapsulated PEM messages and for distinguishing\
    \ encapsulated PEM\n   messages from interspersed (non-PEM) text.  The pre-EB\
    \ is the string\n   \"-----BEGIN PRIVACY-ENHANCED MESSAGE-----\", indicating that\
    \ an\n   encapsulated PEM message follows.  The post-EB is either (1) another\n\
    \   pre-EB indicating that another encapsulated PEM message follows, or\n   (2)\
    \ the string \"-----END PRIVACY-ENHANCED MESSAGE-----\" indicating\n   that any\
    \ text that immediately follows is non-PEM text.  A special\n   point must be\
    \ noted for the case of MIC-CLEAR messages, the text\n   portions of which may\
    \ contain lines which begin with the \"-\"\n   character and which are therefore\
    \ subject to special processing per\n   RFC-934 forwarding procedures.  When the\
    \ string \"- \" must be\n   prepended to such a line in the course of a forwarding\
    \ operation in\n   order to distinguish that line from an encapsulation boundary,\
    \ MIC\n   computation is to be performed prior to prepending the \"- \" string.\n\
    \   Figure 1 depicts the encapsulation of a single PEM message.\n   This RFC places\
    \ no a priori limits on the depth to which such\n   encapsulation may be nested\
    \ nor on the number of PEM messages which\n   may be grouped in this fashion at\
    \ a single nesting level for\n   forwarding.  A implementation compliant with\
    \ this RFC must not\n   preclude a user from submitting or receiving PEM messages\
    \ which\n   exploit this encapsulation capability.  However, no specific\n   requirements\
    \ are levied upon implementations with regard to how this\n   capability is made\
    \ available to the user.  Thus, for example, a\n   compliant PEM implementation\
    \ is not required to automatically detect\n   and process encapsulated PEM messages.\n\
    \   In using this encapsulation facility, it is important to note that it\n  \
    \ is inappropriate to forward directly to a third party a message that\n   is\
    \ ENCRYPTED because recipients of such a message would not have\n   access to\
    \ the DEK required to decrypt the message.  Instead, the user\n   forwarding the\
    \ message must transform the ENCRYPTED message into a\n   MIC-ONLY or MIC-CLEAR\
    \ form prior to forwarding.  Thus, in order to\n   comply with this RFC, a PEM\
    \ implementation must provide a facility to\n   enable a user to perform this\
    \ transformation, while preserving the\n   MIC associated with the original message.\n\
    \   If a user wishes PEM-provided confidentiality protection for\n   transmitted\
    \ information, such information must occur in the\n   encapsulated text of an\
    \ ENCRYPTED PEM message, not in the enclosing\n   MTS header or PEM encapsulated\
    \ header. If a user wishes to avoid\n   Encapsulated Message\n       Pre-Encapsulation\
    \ Boundary (Pre-EB)\n           -----BEGIN PRIVACY-ENHANCED MESSAGE-----\n   \
    \    Encapsulated Header Portion\n           (Contains encryption control fields\
    \ inserted in plaintext.\n           Examples include \"DEK-Info:\" and \"Key-Info:\"\
    .\n           Note that, although these control fields have line-oriented\n  \
    \         representations similar to RFC 822 header fields, the set\n        \
    \   of fields valid in this context is disjoint from those used\n           in\
    \ RFC 822 processing.)\n       Blank Line\n           (Separates Encapsulated\
    \ Header from subsequent\n           Encapsulated Text Portion)\n       Encapsulated\
    \ Text Portion\n           (Contains message data encoded as specified in Section\
    \ 4.3.)\n       Post-Encapsulation Boundary (Post-EB)\n           -----END PRIVACY-ENHANCED\
    \ MESSAGE-----\n                   Encapsulated Message Format\n             \
    \               Figure 1\n   disclosing the actual subject of a message to unintended\
    \ parties, it\n   is suggested that the enclosing MTS header contain a \"Subject:\"\
    \ field\n   indicating that \"Encrypted Mail Follows\".\n   If an integrity-protected\
    \ representation of information which occurs\n   within an enclosing header (not\
    \ necessarily in the same format as\n   that in which it occurs within that header)\
    \ is desired, that data can\n   be included within the encapsulated text portion\
    \ in addition to its\n   inclusion in the enclosing MTS header.  For example,\
    \ an originator\n   wishing to provide recipients with a protected indication\
    \ of a\n   message's position in a series of messages could include within the\n\
    \   encapsulated text a copy of a timestamp or message counter value\n   possessing\
    \ end-to-end significance and extracted from an enclosing\n   MTS header field.\
    \  (Note: mailbox specifiers as entered by end users\n   incorporate local conventions\
    \ and are subject to modification at\n   intermediaries, so inclusion of such\
    \ specifiers within encapsulated\n   text should not be regarded as a suitable\
    \ alternative to the\n   authentication semantics defined in RFC 1422 and based\
    \ on X.500\n   Distinguished Names.) The set of header information (if any) included\n\
    \   within the encapsulated text of messages is a local matter, and this\n   RFC\
    \ does not specify formatting conventions to distinguish replicated\n   header\
    \ fields from other encapsulated text.\n"
- title: 4.5  Mail for Mailing Lists
  contents:
  - "4.5  Mail for Mailing Lists\n   When mail is addressed to mailing lists, two\
    \ different methods of\n   processing can be applicable: the IK-per-list method\
    \ and the IK-per-\n   recipient method.  Hybrid approaches are also possible,\
    \ as in the\n   case of IK-per-list protection of a message on its path from an\n\
    \   originator to a PEM-equipped mailing list exploder, followed by IK-\n   per-recipient\
    \ protection from the exploder to individual list\n   recipients.\n   If a message's\
    \ originator is equipped to expand a destination mailing\n   list into its individual\
    \ constituents and elects to do so (IK-per-\n   recipient), the message's DEK\
    \ (and, in the symmetric key management\n   case, MIC) will be encrypted under\
    \ each per-recipient IK and all such\n   encrypted representations will be incorporated\
    \ into the transmitted\n   message.  Note that per-recipient encryption is required\
    \ only for the\n   relatively small DEK and MIC quantities carried in the \"Key-Info:\"\
    \n   field, not for the message text which is, in general, much larger.\n   Although\
    \ more IKs are involved in processing under the IK-per-\n   recipient method,\
    \ the pairwise IKs can be individually revoked and\n   possession of one IK does\
    \ not enable a successful masquerade of\n   another user on the list.\n   If a\
    \ message's originator addresses a message to a list name or\n   alias, use of\
    \ an IK associated with that name or alias as a entity\n   (IK-per-list), rather\
    \ than resolution of the name or alias to its\n   constituent destinations, is\
    \ implied. Such an IK must, therefore, be\n   available to all list members. Unfortunately,\
    \ it implies an\n   undesirable level of exposure for the shared IK, and makes\
    \ its\n   revocation difficult.  Moreover, use of the IK-per-list method allows\n\
    \   any holder of the list's IK to masquerade as another originator to\n   the\
    \ list for authentication purposes.\n   Pure IK-per-list key management in the\
    \ asymmetric case (with a common\n   private key shared among multiple list members)\
    \ is particularly\n   disadvantageous in the asymmetric environment, as it fails\
    \ to\n   preserve the forwardable authentication and non-repudiation\n   characteristics\
    \ which are provided for other messages in this\n   environment.  Use of a hybrid\
    \ approach with a PEM-capable exploder is\n   therefore particularly recommended\
    \ for protection of mailing list\n   traffic when asymmetric key management is\
    \ used; such an exploder\n   would reduce (per discussion in Section 4.4 of this\
    \ RFC) incoming\n   ENCRYPTED messages to MIC-ONLY or MIC-CLEAR form before forwarding\n\
    \   them (perhaps re-encrypted under individual, per-recipient keys) to\n   list\
    \ members.\n"
- title: 4.6  Summary of Encapsulated Header Fields
  contents:
  - "4.6  Summary of Encapsulated Header Fields\n   This section defines the syntax\
    \ and semantics of the encapsulated\n   header fields to be added to messages\
    \ in the course of privacy\n   enhancement processing.\n   The fields are presented\
    \ in three groups.  Normally, the groups will\n   appear in encapsulated headers\
    \ in the order in which they are shown,\n   though not all fields in each group\
    \ will appear in all messages.  The\n   following figures show the appearance\
    \ of small example encapsulated\n   messages.  Figure 2 assumes the use of symmetric\
    \ cryptography for key\n   management.  Figure 3 illustrates an example encapsulated\
    \ ENCRYPTED\n   message in which asymmetric key management is used.\n   -----BEGIN\
    \ PRIVACY-ENHANCED MESSAGE-----\n   Proc-Type: 4,ENCRYPTED\n   Content-Domain:\
    \ RFC822\n   DEK-Info: DES-CBC,F8143EDE5960C597\n   Originator-ID-Symmetric: linn@zendia.enet.dec.com,,\n\
    \   Recipient-ID-Symmetric: linn@zendia.enet.dec.com,ptf-kmc,3\n   Key-Info: DES-ECB,RSA-MD2,9FD3AAD2F2691B9A,\n\
    \             B70665BB9BF7CBCDA60195DB94F727D3\n   Recipient-ID-Symmetric: pem-dev@tis.com,ptf-kmc,4\n\
    \   Key-Info: DES-ECB,RSA-MD2,161A3F75DC82EF26,\n             E2EF532C65CBCFF79F83A2658132DB47\n\
    \   LLrHB0eJzyhP+/fSStdW8okeEnv47jxe7SJ/iN72ohNcUk2jHEUSoH1nvNSIWL9M\n   8tEjmF/zxB+bATMtPjCUWbz8Lr9wloXIkjHUlBLpvXR0UrUzYbkNpk0agV2IzUpk\n\
    \   J6UiRRGcDSvzrsoK+oNvqu6z7Xs5Xfz5rDqUcMlK1Z6720dcBWGGsDLpTpSCnpot\n   dXd/H5LMDWnonNvPCwQUHt==\n\
    \   -----END PRIVACY-ENHANCED MESSAGE-----\n          Example Encapsulated Message\
    \ (Symmetric Case)\n                            Figure 2\n   Figure 4 illustrates\
    \ an example encapsulated MIC-ONLY message in\n   which asymmetric key management\
    \ is used; since no per-recipient keys\n   are involved in preparation of asymmetric-case\
    \ MIC-ONLY messages,\n   this example should be processable for test purposes\
    \ by arbitrary PEM\n   implementations.\n   Fully-qualified domain names (FQDNs)\
    \ for hosts, appearing in the\n   mailbox names found in entity identifier subfields\
    \ of \"Originator-\n   ID-Symmetric:\" and \"Recipient-ID-Symmetric:\" fields,\
    \ are processed in\n   a case-insensitive fashion.  Unless specified to the contrary,\
    \ other\n   field arguments (including the user name components of mailbox names)\n\
    \   are to be processed in a case-sensitive fashion.\n   In most cases, numeric\
    \ quantities are represented in header fields as\n   contiguous strings of hexadecimal\
    \ digits, where each digit is\n   represented by a character from the ranges \"\
    0\"-\"9\" or upper case\n   \"A\"-\"F\".  Since public-key certificates and quantities\
    \ encrypted\n   -----BEGIN PRIVACY-ENHANCED MESSAGE-----\n   Proc-Type: 4,ENCRYPTED\n\
    \   Content-Domain: RFC822\n   DEK-Info: DES-CBC,BFF968AA74691AC1\n   Originator-Certificate:\n\
    \    MIIBlTCCAScCAWUwDQYJKoZIhvcNAQECBQAwUTELMAkGA1UEBhMCVVMxIDAeBgNV\n    BAoTF1JTQSBEYXRhIFNlY3VyaXR5LCBJbmMuMQ8wDQYDVQQLEwZCZXRhIDExDzAN\n\
    \    BgNVBAsTBk5PVEFSWTAeFw05MTA5MDQxODM4MTdaFw05MzA5MDMxODM4MTZaMEUx\n    CzAJBgNVBAYTAlVTMSAwHgYDVQQKExdSU0EgRGF0YSBTZWN1cml0eSwgSW5jLjEU\n\
    \    MBIGA1UEAxMLVGVzdCBVc2VyIDEwWTAKBgRVCAEBAgICAANLADBIAkEAwHZHl7i+\n    yJcqDtjJCowzTdBJrdAiLAnSC+CnnjOJELyuQiBgkGrgIh3j8/x0fM+YrsyF1u3F\n\
    \    LZPVtzlndhYFJQIDAQABMA0GCSqGSIb3DQEBAgUAA1kACKr0PqphJYw1j+YPtcIq\n    iWlFPuN5jJ79Khfg7ASFxskYkEMjRNZV/HZDZQEhtVaU7Jxfzs2wfX5byMp2X3U/\n\
    \    5XUXGx7qusDgHQGs7Jk9W8CW1fuSWUgN4w==\n   Key-Info: RSA,\n    I3rRIGXUGWAF8js5wCzRTkdhO34PTHdRZY9Tuvm03M+NM7fx6qc5udixps2Lng0+\n\
    \    wGrtiUm/ovtKdinz6ZQ/aQ==\n   Issuer-Certificate:\n    MIIB3DCCAUgCAQowDQYJKoZIhvcNAQECBQAwTzELMAkGA1UEBhMCVVMxIDAeBgNV\n\
    \    BAoTF1JTQSBEYXRhIFNlY3VyaXR5LCBJbmMuMQ8wDQYDVQQLEwZCZXRhIDExDTAL\n    BgNVBAsTBFRMQ0EwHhcNOTEwOTAxMDgwMDAwWhcNOTIwOTAxMDc1OTU5WjBRMQsw\n\
    \    CQYDVQQGEwJVUzEgMB4GA1UEChMXUlNBIERhdGEgU2VjdXJpdHksIEluYy4xDzAN\n    BgNVBAsTBkJldGEgMTEPMA0GA1UECxMGTk9UQVJZMHAwCgYEVQgBAQICArwDYgAw\n\
    \    XwJYCsnp6lQCxYykNlODwutF/jMJ3kL+3PjYyHOwk+/9rLg6X65B/LD4bJHtO5XW\n    cqAz/7R7XhjYCm0PcqbdzoACZtIlETrKrcJiDYoP+DkZ8k1gCk7hQHpbIwIDAQAB\n\
    \    MA0GCSqGSIb3DQEBAgUAA38AAICPv4f9Gx/tY4+p+4DB7MV+tKZnvBoy8zgoMGOx\n    dD2jMZ/3HsyWKWgSF0eH/AJB3qr9zosG47pyMnTf3aSy2nBO7CMxpUWRBcXUpE+x\n\
    \    EREZd9++32ofGBIXaialnOgVUn0OzSYgugiQ077nJLDUj0hQehCizEs5wUJ35a5h\n   MIC-Info:\
    \ RSA-MD5,RSA,\n    UdFJR8u/TIGhfH65ieewe2lOW4tooa3vZCvVNGBZirf/7nrgzWDABz8w9NsXSexv\n\
    \    AjRFbHoNPzBuxwmOAFeA0HJszL4yBvhG\n   Recipient-ID-Asymmetric:\n    MFExCzAJBgNVBAYTAlVTMSAwHgYDVQQKExdSU0EgRGF0YSBTZWN1cml0eSwgSW5j\n\
    \    LjEPMA0GA1UECxMGQmV0YSAxMQ8wDQYDVQQLEwZOT1RBUlk=,\n    66\n   Key-Info: RSA,\n\
    \    O6BS1ww9CTyHPtS3bMLD+L0hejdvX6Qv1HK2ds2sQPEaXhX8EhvVphHYTjwekdWv\n    7x0Z3Jx2vTAhOYHMcqqCjA==\n\
    \   qeWlj/YJ2Uf5ng9yznPbtD0mYloSwIuV9FRYx+gzY+8iXd/NQrXHfi6/MhPfPF3d\n   jIqCJAxvld2xgqQimUzoS1a4r7kQQ5c/Iua4LqKeq3ciFzEv/MbZhA==\n\
    \   -----END PRIVACY-ENHANCED MESSAGE-----\n    Example Encapsulated ENCRYPTED\
    \ Message (Asymmetric Case)\n                            Figure 3\n   using asymmetric\
    \ algorithms are large in size, use of a more space-\n   efficient encoding technique\
    \ is appropriate for such quantities, and\n   the encoding mechanism defined in\
    \ Section 4.3.2.4 of this RFC,\n   representing 6 bits per printed character,\
    \ is adopted for this\n   purpose.\n   Encapsulated headers of PEM messages are\
    \ folded using whitespace per\n   RFC 822 header folding conventions; no PEM-specific\
    \ conventions are\n   defined for encapsulated header folding.  The example shown\
    \ in Figure\n   4 shows (in its \"MIC-Info:\" field) an asymmetrically encrypted\n\
    \   quantity in its printably encoded representation, illustrating the\n   use\
    \ of RFC 822 folding.\n   In contrast to the encapsulated header representations\
    \ defined in RFC\n   1113 and its precursors, the field identifiers adopted in\
    \ this RFC do\n   not begin with the prefix \"X-\" (for example, the field previously\n\
    \   denoted \"X-Key-Info:\" is now denoted \"Key-Info:\") and such prefixes\n\
    \   are not to be emitted by implementations conformant to this RFC.  To\n   simplify\
    \ transition and interoperability with earlier\n   implementations, it is suggested\
    \ that implementations based on this\n   RFC accept incoming encapsulated header\
    \ fields carrying the \"X-\"\n   prefix and act on such fields as if the \"X-\"\
    \ were not present.\n   -----BEGIN PRIVACY-ENHANCED MESSAGE-----\n   Proc-Type:\
    \ 4,MIC-ONLY\n   Content-Domain: RFC822\n   Originator-Certificate:\n    MIIBlTCCAScCAWUwDQYJKoZIhvcNAQECBQAwUTELMAkGA1UEBhMCVVMxIDAeBgNV\n\
    \    BAoTF1JTQSBEYXRhIFNlY3VyaXR5LCBJbmMuMQ8wDQYDVQQLEwZCZXRhIDExDzAN\n    BgNVBAsTBk5PVEFSWTAeFw05MTA5MDQxODM4MTdaFw05MzA5MDMxODM4MTZaMEUx\n\
    \    CzAJBgNVBAYTAlVTMSAwHgYDVQQKExdSU0EgRGF0YSBTZWN1cml0eSwgSW5jLjEU\n    MBIGA1UEAxMLVGVzdCBVc2VyIDEwWTAKBgRVCAEBAgICAANLADBIAkEAwHZHl7i+\n\
    \    yJcqDtjJCowzTdBJrdAiLAnSC+CnnjOJELyuQiBgkGrgIh3j8/x0fM+YrsyF1u3F\n    LZPVtzlndhYFJQIDAQABMA0GCSqGSIb3DQEBAgUAA1kACKr0PqphJYw1j+YPtcIq\n\
    \    iWlFPuN5jJ79Khfg7ASFxskYkEMjRNZV/HZDZQEhtVaU7Jxfzs2wfX5byMp2X3U/\n    5XUXGx7qusDgHQGs7Jk9W8CW1fuSWUgN4w==\n\
    \   Issuer-Certificate:\n    MIIB3DCCAUgCAQowDQYJKoZIhvcNAQECBQAwTzELMAkGA1UEBhMCVVMxIDAeBgNV\n\
    \    BAoTF1JTQSBEYXRhIFNlY3VyaXR5LCBJbmMuMQ8wDQYDVQQLEwZCZXRhIDExDTAL\n    BgNVBAsTBFRMQ0EwHhcNOTEwOTAxMDgwMDAwWhcNOTIwOTAxMDc1OTU5WjBRMQsw\n\
    \    CQYDVQQGEwJVUzEgMB4GA1UEChMXUlNBIERhdGEgU2VjdXJpdHksIEluYy4xDzAN\n    BgNVBAsTBkJldGEgMTEPMA0GA1UECxMGTk9UQVJZMHAwCgYEVQgBAQICArwDYgAw\n\
    \    XwJYCsnp6lQCxYykNlODwutF/jMJ3kL+3PjYyHOwk+/9rLg6X65B/LD4bJHtO5XW\n    cqAz/7R7XhjYCm0PcqbdzoACZtIlETrKrcJiDYoP+DkZ8k1gCk7hQHpbIwIDAQAB\n\
    \    MA0GCSqGSIb3DQEBAgUAA38AAICPv4f9Gx/tY4+p+4DB7MV+tKZnvBoy8zgoMGOx\n    dD2jMZ/3HsyWKWgSF0eH/AJB3qr9zosG47pyMnTf3aSy2nBO7CMxpUWRBcXUpE+x\n\
    \    EREZd9++32ofGBIXaialnOgVUn0OzSYgugiQ077nJLDUj0hQehCizEs5wUJ35a5h\n   MIC-Info:\
    \ RSA-MD5,RSA,\n    jV2OfH+nnXHU8bnL8kPAad/mSQlTDZlbVuxvZAOVRZ5q5+Ejl5bQvqNeqOUNQjr6\n\
    \    EtE7K2QDeVMCyXsdJlA8fA==\n   LSBBIG1lc3NhZ2UgZm9yIHVzZSBpbiB0ZXN0aW5nLg0KLSBGb2xsb3dpbmcgaXMg\n\
    \   YSBibGFuayBsaW5lOg0KDQpUaGlzIGlzIHRoZSBlbmQuDQo=\n   -----END PRIVACY-ENHANCED\
    \ MESSAGE-----\n     Example Encapsulated MIC-ONLY Message (Asymmetric Case)\n\
    \                            Figure 4\n"
- title: 4.6.1  Per-Message Encapsulated Header Fields
  contents:
  - "4.6.1  Per-Message Encapsulated Header Fields\n   This group of encapsulated\
    \ header fields contains fields which occur\n   no more than once in a PEM message,\
    \ generally preceding all other\n   encapsulated header fields.\n"
- title: 4.6.1.1  Proc-Type Field
  contents:
  - "4.6.1.1  Proc-Type Field\n   The \"Proc-Type:\" encapsulated header field, required\
    \ for all PEM\n   messages, identifies the type of processing performed on the\n\
    \   transmitted message.  Only one \"Proc-Type:\" field occurs in a\n   message;\
    \ the \"Proc-Type:\" field must be the first encapsulated header\n   field in\
    \ the message.\n   The \"Proc-Type:\" field has two subfields, separated by a\
    \ comma.  The\n   first subfield is a decimal number which is used to distinguish\
    \ among\n   incompatible encapsulated header field interpretations which may\n\
    \   arise as changes are made to this standard.  Messages processed\n   according\
    \ to this RFC will carry the subfield value \"4\" to\n   distinguish them from\
    \ messages processed in accordance with prior PEM\n   RFCs.  The second subfield\
    \ assumes one of a set of string values,\n   defined in the following subsections.\n"
- title: 4.6.1.1.1  ENCRYPTED
  contents:
  - "4.6.1.1.1  ENCRYPTED\n   The \"ENCRYPTED\" specifier signifies that confidentiality,\n\
    \   authentication, integrity, and (given use of asymmetric key\n   management)\
    \ non-repudiation of origin security services have been\n   applied to a PEM message's\
    \ encapsulated text.  ENCRYPTED messages\n   require a \"DEK-Info:\" field and\
    \ individual Recipient-ID and \"Key-\n   Info:\" fields for all message recipients.\n"
- title: 4.6.1.1.2  MIC-ONLY
  contents:
  - "4.6.1.1.2  MIC-ONLY\n   The \"MIC-ONLY\" specifier signifies that all of the\
    \ security services\n   specified for ENCRYPTED messages, with the exception of\n\
    \   confidentiality, have been applied to a PEM message's encapsulated\n   text.\
    \ MIC-ONLY messages are encoded (per Section 4.3.2.4 of this RFC)\n   to protect\
    \ their encapsulated text against modifications at message\n   transfer or relay\
    \ points.\n   Specification of MIC-ONLY, when applied in conjunction with certain\n\
    \   combinations of key management and MIC algorithm options, permits\n   certain\
    \ fields which are superfluous in the absence of encryption to\n   be omitted\
    \ from the encapsulated header.  In particular, when a\n   keyless MIC computation\
    \ is employed for recipients for whom\n   asymmetric cryptography is used, \"\
    Recipient-ID-Asymmetric:\" and\n   \"Key-Info:\" fields can be omitted.  The \"\
    DEK-Info:\" field can be\n   omitted for all \"MIC-ONLY\" messages.\n"
- title: 4.6.1.1.3  MIC-CLEAR
  contents:
  - "4.6.1.1.3  MIC-CLEAR\n   The \"MIC-CLEAR\" specifier represents a PEM message\
    \ with the same\n   security service selection as for a MIC-ONLY message.  The\
    \ set of\n   encapsulated header fields required in a MIC-CLEAR message is the\n\
    \   same as that required for a MIC-ONLY message.\n   MIC-CLEAR message processing\
    \ omits the encoding step defined in\n   Section 4.3.2.4 of this RFC to protect\
    \ a message's encapsulated text\n   against modifications within the MTS.  As\
    \ a result, a MIC-CLEAR\n   message's text can be read by recipients lacking access\
    \ to PEM\n   software, even though such recipients cannot validate the message's\n\
    \   signature. The canonical encoding discussed in Section 4.3.2.2 is\n   performed,\
    \ so interoperation among sites with different native\n   character sets and line\
    \ representations is not precluded so long as\n   those native formats are unambiguously\
    \ translatable to and from the\n   canonical form.  (Such interoperability is\
    \ feasible only for those\n   characters which are included in the canonical representation\
    \ set.)\n   Omission of the printable encoding step implies that MIC-CLEAR\n \
    \  message MICs will be validatable only in environments where the MTS\n   does\
    \ not modify messages in transit, or where the modifications\n   performed can\
    \ be determined and inverted before MIC validation\n   processing.  Failed MIC\
    \ validation on a MIC-CLEAR message does not,\n   therefore, necessarily signify\
    \ a security-relevant event; as a\n   result, it is recommended that PEM implementations\
    \ reflect to their\n   users (in a suitable local fashion) the type of PEM message\
    \ being\n   processed when reporting a MIC validation failure.\n   A case of particular\
    \ relevance arises for inbound SMTP processing on\n   systems which delimit text\
    \ lines with local native representations\n   other than the SMTP-conventional\
    \ <CR><LF>.  When mail is delivered to\n   a UA on such a system and presented\
    \ for PEM processing, the <CR><LF>\n   has already been translated to local form.\
    \  In order to validate a\n   MIC-CLEAR message's MIC in this situation, the PEM\
    \ module must\n   recanonicalize the incoming message in order to determine the\
    \ inter-\n   SMTP representation of the canonically encoded message (as defined\
    \ in\n   Section 4.3.2.2 of this RFC), and must compute the reference MIC\n  \
    \ based on that representation.\n"
- title: 4.6.1.1.4  CRL
  contents:
  - "4.6.1.1.4  CRL\n   The \"CRL\" specifier indicates a special PEM message type,\
    \ used to\n   transfer one or more Certificate Revocation Lists.  The format of\
    \ PEM\n   CRLs is defined in RFC 1422.  No user data or encapsulated text\n  \
    \ accompanies an encapsulated header specifying the CRL message type; a\n   correctly-formed\
    \ CRL message's PEM header is immediately followed by\n   its terminating message\
    \ boundary line, with no blank line\n   intervening.\n   Only three types of fields\
    \ are valid in the encapsulated header\n   comprising a CRL message.  The \"CRL:\"\
    \ field carries a printable\n   representation of a CRL, encoded using the procedures\
    \ defined in\n   Section 4.3.2.4 of this RFC. \"CRL:\" fields may (as an option)\
    \ be\n   followed by no more than one \"Originator-Certificate:\" field and any\n\
    \   number of \"Issuer-Certificate:\" fields. The \"Originator-Certificate:\"\n\
    \   and \"Issuer-Certificate:\" fields refer to the most recently previous\n \
    \  \"CRL:\" field, and provide certificates useful in validating the\n   signature\
    \ included in the CRL.  \"Originator-Certificate:\" and\n   \"Issuer-Certificate:\"\
    \ fields' contents are the same for CRL messages\n   as they are for other PEM\
    \ message types.\n"
- title: 4.6.1.2  Content-Domain Field
  contents:
  - "4.6.1.2  Content-Domain Field\n   The \"Content-Domain:\" encapsulated header\
    \ field describes the type of\n   content which is represented within a PEM message's\
    \ encapsulated\n   text.  It carries one string argument, whose value is defined\
    \ as\n   \"RFC822\" to indicate processing of RFC-822 mail as defined in this\n\
    \   specification.  It is anticipated that additional \"Content-Domain:\"\n  \
    \ values will be defined subsequently, in additional or successor\n   documents\
    \ to this specification. Only one \"Content-Domain:\" field\n   occurs in a PEM\
    \ message; this field is the PEM message's second\n   encapsulated header field,\
    \ immediately following the \"Proc-Type:\"\n   field.\n"
- title: 4.6.1.3  DEK-Info Field
  contents:
  - "4.6.1.3  DEK-Info Field\n   The \"DEK-Info:\" encapsulated header field identifies\
    \ the message text\n   encryption algorithm and mode, and also carries any cryptographic\n\
    \   parameters (e.g., IVs) used for message encryption.  No more than one\n  \
    \ \"DEK-Info:\" field occurs in a message; the field is required for all\n   messages\
    \ specified as \"ENCRYPTED\" in the \"Proc-Type:\" field.\n   The \"DEK-Info:\"\
    \ field carries either one argument or two arguments\n   separated by a comma.\
    \  The first argument identifies the algorithm\n   and mode used for message text\
    \ encryption.  The second argument, if\n   present, carries any cryptographic\
    \ parameters required by the\n   algorithm and mode identified in the first argument.\
    \  Appropriate\n   message encryption algorithms, modes and identifiers and\n\
    \   corresponding cryptographic parameters and formats are defined in RFC\n  \
    \ 1423.\n"
- title: 4.6.2  Encapsulated Header Fields Normally Per-Message
  contents:
  - "4.6.2  Encapsulated Header Fields Normally Per-Message\n   This group of encapsulated\
    \ header fields contains fields which\n   ordinarily occur no more than once per\
    \ message.  Depending on the key\n   management option(s) employed, some of these\
    \ fields may be absent\n   from some messages.\n"
- title: 4.6.2.1  Originator-ID Fields
  contents:
  - "4.6.2.1  Originator-ID Fields\n   Originator-ID encapsulated header fields identify\
    \ a message's\n   originator and provide the originator's IK identification component.\n\
    \   Two varieties of Originator-ID fields are defined, the \"Originator-\n   ID-Asymmetric:\"\
    \ and \"Originator-ID-Symmetric:\" field.  An\n   \"Originator-ID-Symmetric:\"\
    \ header field is required for all PEM\n   messages employing symmetric key management.\
    \  The analogous\n   \"Originator-ID-Asymmetric:\" field, for the asymmetric key\
    \ management\n   case, is used only when no corresponding \"Originator-Certificate:\"\
    \n   field is included.\n   Most commonly, only one Originator-ID or \"Originator-Certificate:\"\
    \n   field will occur within a message. For the symmetric case, the IK\n   identification\
    \ component carried in an \"Originator-ID-Symmetric:\"\n   field applies to processing\
    \ of all subsequent \"Recipient-ID-\n   Symmetric:\" fields until another \"Originator-ID-Symmetric:\"\
    \ field\n   occurs.  It is illegal for a \"Recipient-ID-Symmetric:\" field to\
    \ occur\n   before a corresponding \"Originator-ID-Symmetric:\" field has been\n\
    \   provided.  For the asymmetric case, processing of \"Recipient-ID-\n   Asymmetric:\"\
    \ fields is logically independent of preceding\n   \"Originator-ID-Asymmetric:\"\
    \ and \"Originator-Certificate:\" fields.\n   Multiple Originator-ID and/or \"\
    Originator-Certificate:\" fields may\n   occur in a message when different originator-oriented\
    \ IK components\n   must be used by a message's originator in order to prepare\
    \ a message\n   so as to be suitable for processing by different recipients. In\n\
    \   particular, multiple such fields will occur when both symmetric and\n   asymmetric\
    \ cryptography are applied to a single message in order to\n   process the message\
    \ for different recipients.\n   Originator-ID subfields are delimited by the comma\
    \ character (\",\"),\n   optionally followed by whitespace.  Section 5.2, Interchange\
    \ Keys,\n   discusses the semantics of these subfields and specifies the alphabet\n\
    \   from which they are chosen.\n"
- title: 4.6.2.1.1  Originator-ID-Asymmetric Field
  contents:
  - "4.6.2.1.1  Originator-ID-Asymmetric Field\n   The \"Originator-ID-Asymmetric:\"\
    \ field contains an Issuing Authority\n   subfield, and then a Version/Expiration\
    \ subfield.  This field is used\n   only when the information it carries is not\
    \ available from an\n   included \"Originator-Certificate:\" field.\n"
- title: 4.6.2.1.2  Originator-ID-Symmetric Field
  contents:
  - "4.6.2.1.2  Originator-ID-Symmetric Field\n   The \"Originator-ID-Symmetric:\"\
    \ field contains an Entity Identifier\n   subfield, followed by an (optional)\
    \ Issuing Authority subfield, and\n   then an (optional) Version/Expiration subfield.\
    \  Optional\n   \"Originator-ID-Symmetric:\" subfields may be omitted only if\
    \ rendered\n   redundant by information carried in subsequent \"Recipient-ID-\n\
    \   Symmetric:\" fields, and will normally be omitted in such cases.\n"
- title: 4.6.2.2  Originator-Certificate Field
  contents:
  - "4.6.2.2  Originator-Certificate Field\n   The \"Originator-Certificate:\" encapsulated\
    \ header field is used only\n   when asymmetric key management is employed for\
    \ one or more of a\n   message's recipients.  To facilitate processing by recipients\
    \ (at\n   least in advance of general directory server availability), inclusion\n\
    \   of this field in all messages is strongly recommended.  The field\n   transfers\
    \ an originator's certificate as a numeric quantity,\n   comprised of the certificate's\
    \ DER encoding, represented in the\n   header field with the encoding mechanism\
    \ defined in Section 4.3.2.4\n   of this RFC.  The semantics of a certificate\
    \ are discussed in RFC\n   1422.\n"
- title: 4.6.2.3  MIC-Info Field
  contents:
  - "4.6.2.3  MIC-Info Field\n   The \"MIC-Info:\" encapsulated header field, used\
    \ only when asymmetric\n   key management is employed for at least one recipient\
    \ of a message,\n   carries three arguments, separated by commas.  The first argument\n\
    \   identifies the algorithm under which the accompanying MIC is\n   computed.\
    \  The second argument identifies the algorithm under which\n   the accompanying\
    \ MIC is signed.  The third argument represents a MIC\n   signed with an originator's\
    \ private key.\n   For the case of ENCRYPTED PEM messages, the signed MIC is,\
    \ in turn,\n   symmetrically encrypted using the same DEK, algorithm, mode and\n\
    \   cryptographic parameters as are used to encrypt the message's\n   encapsulated\
    \ text.  This measure prevents unauthorized recipients\n   from determining whether\
    \ an intercepted message corresponds to a\n   predetermined plaintext value.\n\
    \   Appropriate MIC algorithms and identifiers, signature algorithms and\n   identifiers,\
    \ and signed MIC formats are defined in RFC 1423.\n   A \"MIC-Info:\" field will\
    \ occur after a sequence of fields beginning\n   with a \"Originator-ID-Asymmetric:\"\
    \ or \"Originator-Certificate:\" field\n   and followed by any associated \"Issuer-Certificate:\"\
    \ fields.  A\n   \"MIC-Info:\" field applies to all subsequent recipients for\
    \ whom\n   asymmetric key management is used, until and unless overridden by a\n\
    \   subsequent \"Originator-ID-Asymmetric:\" or \"Originator-Certificate:\"\n\
    \   and corresponding \"MIC-Info:\".\n"
- title: 4.6.3  Encapsulated Header Fields with Variable Occurrences
  contents:
  - "4.6.3  Encapsulated Header Fields with Variable Occurrences\n   This group of\
    \ encapsulated header fields contains fields which will\n   normally occur variable\
    \ numbers of times within a message, with\n   numbers of occurrences ranging from\
    \ zero to non-zero values which are\n   independent of the number of recipients.\n"
- title: 4.6.3.1  Issuer-Certificate Field
  contents:
  - "4.6.3.1  Issuer-Certificate Field\n   The \"Issuer-Certificate:\" encapsulated\
    \ header field is meaningful\n   only when asymmetric key management is used for\
    \ at least one of a\n   message's recipients.  A typical \"Issuer-Certificate:\"\
    \ field would\n   contain the certificate containing the public component used\
    \ to sign\n   the certificate carried in the message's \"Originator-Certificate:\"\
    \n   field, for recipients' use in chaining through that certificate's\n   certification\
    \ path.  Other \"Issuer-Certificate:\" fields, typically\n   representing higher\
    \ points in a certification path, also may be\n   included by an originator. \
    \ It is recommended that the \"Issuer-\n   Certificate:\" fields be included in\
    \ an order corresponding to\n   successive points in a certification path leading\
    \ from the originator\n   to a common point shared with the message's recipients\
    \ (i.e., the\n   Internet Certification Authority (ICA), unless a lower Policy\n\
    \   Certification Authority (PCA) or CA is common to all recipients.)\n   More\
    \ information on certification paths can be found in RFC 1422.\n   The certificate\
    \ is represented in the same manner as defined for the\n   \"Originator-Certificate:\"\
    \ field (transporting an encoded\n   representation of the certificate in X.509\
    \ [7] DER form), and any\n   \"Issuer-Certificate:\" fields will ordinarily follow\
    \ the \"Originator-\n   Certificate:\" field directly.  Use of the \"Issuer-Certificate:\"\
    \ field\n   is optional even when asymmetric key management is employed, although\n\
    \   its incorporation is strongly recommended in the absence of alternate\n  \
    \ directory server facilities from which recipients can access issuers'\n   certificates.\n"
- title: 4.6.4  Per-Recipient Encapsulated Header Fields
  contents:
  - "4.6.4  Per-Recipient Encapsulated Header Fields\n   The encapsulated header fields\
    \ in this group appear for each of an\n   \"ENCRYPTED\" message's named recipients.\
    \  For \"MIC-ONLY\" and \"MIC-\n   CLEAR\" messages, these fields are omitted\
    \ for recipients for whom\n   asymmetric key management is employed in conjunction\
    \ with a keyless\n   MIC algorithm but the fields appear for recipients for whom\
    \ symmetric\n   key management or a keyed MIC algorithm is employed.\n"
- title: 4.6.4.1  Recipient-ID Fields
  contents:
  - "4.6.4.1  Recipient-ID Fields\n   A Recipient-ID encapsulated header field identifies\
    \ a recipient and\n   provides the recipient's IK identification component.  One\n\
    \   Recipient-ID field is included for each of a message's named\n   recipients.\
    \ Section 5.2, Interchange Keys, discusses the semantics of\n   the subfields\
    \ and specifies the alphabet from which they are chosen.\n   Recipient-ID subfields\
    \ are delimited by the comma character (\",\"),\n   optionally followed by whitespace.\n\
    \   For the symmetric case, all \"Recipient-ID-Symmetric:\" fields are\n   interpreted\
    \ in the context of the most recent preceding \"Originator-\n   ID-Symmetric:\"\
    \ field.  It is illegal for a \"Recipient-ID-Symmetric:\"\n   field to occur in\
    \ a header before the occurrence of a corresponding\n   \"Originator-ID-Symmetric:\"\
    \ field.  For the asymmetric case,\n   \"Recipient-ID-Asymmetric:\" fields are\
    \ logically independent of a\n   message's \"Originator-ID-Asymmetric:\" and \"\
    Originator-Certificate:\"\n   fields.  \"Recipient-ID-Asymmetric:\" fields, and\
    \ their associated\n   \"Key-Info:\" fields, are included following a header's\
    \ originator-\n   oriented fields.\n"
- title: 4.6.4.1.1  Recipient-ID-Asymmetric Field
  contents:
  - "4.6.4.1.1  Recipient-ID-Asymmetric Field\n   The \"Recipient-ID-Asymmetric:\"\
    \ field contains, in order, an Issuing\n   Authority subfield and a Version/Expiration\
    \ subfield.\n"
- title: 4.6.4.1.2  Recipient-ID-Symmetric Field
  contents:
  - "4.6.4.1.2  Recipient-ID-Symmetric Field\n   The \"Recipient-ID-Symmetric:\" field\
    \ contains, in order, an Entity\n   Identifier subfield, an (optional) Issuing\
    \ Authority subfield, and an\n   (optional) Version/Expiration subfield.\n"
- title: 4.6.4.2  Key-Info Field
  contents:
  - "4.6.4.2  Key-Info Field\n   One \"Key-Info:\" field is included for each of a\
    \ message's named\n   recipients.  In addition, it is recommended that PEM implementations\n\
    \   support (as a locally-selectable option) the ability to include a\n   \"Key-Info:\"\
    \ field corresponding to a PEM message's originator,\n   following an Originator-ID\
    \ or \"Originator-Certificate:\" field and\n   before any associated Recipient-ID\
    \ fields, but inclusion of such a\n   field is not a requirement for conformance\
    \ with this RFC.\n   Each \"Key-Info:\" field is interpreted in the context of\
    \ the most\n   recent preceding Originator-ID, \"Originator-Certificate:\", or\n\
    \   Recipient-ID field; normally, a \"Key-Info:\" field will immediately\n   follow\
    \ its associated predecessor field. The \"Key-Info:\" field's\n   argument(s)\
    \ differ depending on whether symmetric or asymmetric key\n   management is used\
    \ for a particular recipient.\n"
- title: 4.6.4.2.1  Symmetric Key Management
  contents:
  - "4.6.4.2.1  Symmetric Key Management\n   When symmetric key management is employed\
    \ for a given recipient, the\n   \"Key-Info:\" encapsulated header field transfers\
    \ four items, separated\n   by commas: an IK Use Indicator, a MIC Algorithm Indicator,\
    \ a DEK and\n   a MIC.  The IK Use Indicator identifies the algorithm and mode\
    \ in\n   which the identified IK was used for DEK and MIC encryption for a\n \
    \  particular recipient.  The MIC Algorithm Indicator identifies the MIC\n   computation\
    \ algorithm used for a particular recipient.  The DEK and\n   MIC are symmetrically\
    \ encrypted under the IK identified by a\n   preceding \"Recipient-ID-Symmetric:\"\
    \ field and/or prior \"Originator-\n   ID-Symmetric:\" field.\n   Appropriate\
    \ symmetric encryption algorithms, modes and identifiers,\n   MIC computation\
    \ algorithms and identifiers, and encrypted DEK and MIC\n   formats are defined\
    \ in RFC 1423.\n"
- title: 4.6.4.2.2  Asymmetric Key Management
  contents:
  - "4.6.4.2.2  Asymmetric Key Management\n   When asymmetric key management is employed\
    \ for a given recipient, the\n   \"Key-Info:\" field transfers two quantities,\
    \ separated by a comma.\n   The first argument is an IK Use Indicator identifying\
    \ the algorithm\n   and mode in which the DEK is asymmetrically encrypted.  The\
    \ second\n   argument is a DEK, asymmetrically encrypted under the recipient's\n\
    \   public component.\n   Appropriate asymmetric encryption algorithms and identifiers,\
    \ and\n   encrypted DEK formats are defined in RFC 1423.\n"
- title: 5.  Key Management
  contents:
  - "5.  Key Management\n   Several cryptographic constructs are involved in supporting\
    \ the PEM\n   message processing procedure.  A set of fundamental elements is\n\
    \   assumed.  Data Encrypting Keys (DEKs) are used to encrypt message\n   text\
    \ and (for some MIC computation algorithms) in the message\n   integrity check\
    \ (MIC) computation process.  Interchange Keys (IKs)\n   are used to encrypt DEKs\
    \ and MICs for transmission with messages.  In\n   a certificate-based asymmetric\
    \ key management architecture,\n   certificates are used as a means to provide\
    \ entities' public\n   components and other information in a fashion which is\
    \ securely bound\n   by a central authority.  The remainder of this section provides\
    \ more\n   information about these constructs.\n"
- title: 5.1  Data Encrypting Keys (DEKs)
  contents:
  - "5.1  Data Encrypting Keys (DEKs)\n   Data Encrypting Keys (DEKs) are used for\
    \ encryption of message text\n   and (with some MIC computation algorithms) for\
    \ computation of message\n   integrity check quantities (MICs).  In the asymmetric\
    \ key management\n   case, they are also used for encrypting signed MICs in ENCRYPTED\
    \ PEM\n   messages.  It is strongly recommended that DEKs be generated and used\n\
    \   on a one-time, per-message, basis.  A transmitted message will\n   incorporate\
    \ a representation of the DEK encrypted under an\n   appropriate interchange key\
    \ (IK) for each of the named recipients.\n   DEK generation can be performed either\
    \ centrally by key distribution\n   centers (KDCs) or  by endpoint systems.  Dedicated\
    \ KDC systems may be\n   able to  implement stronger algorithms for random DEK\
    \ generation than\n   can be supported in endpoint systems.  On the other hand,\n\
    \   decentralization allows endpoints to be relatively self-sufficient,\n   reducing\
    \ the level of trust which must be placed in components other\n   than those of\
    \ a message's originator and recipient.  Moreover,\n   decentralized DEK generation\
    \ at endpoints reduces the frequency with\n   which originators must make real-time\
    \ queries of (potentially unique)\n   servers in order to send mail, enhancing\
    \ communications availability.\n   When symmetric key management is used, one\
    \ advantage of centralized\n   KDC-based generation is that DEKs can be returned\
    \ to endpoints\n   already encrypted under the IKs of message recipients rather\
    \ than\n   providing the IKs to the originators.  This reduces IK exposure and\n\
    \   simplifies endpoint key management requirements.  This approach has\n   less\
    \ value if asymmetric cryptography is used for key management,\n   since per-recipient\
    \ public IK components are assumed to be generally\n   available and per-originator\
    \ private IK components need not\n   necessarily be shared with a KDC.\n"
- title: 5.2  Interchange Keys (IKs)
  contents:
  - "5.2  Interchange Keys (IKs)\n   Interchange Key (IK) components are used to encrypt\
    \ DEKs and MICs.\n   In general, IK granularity is at the pairwise per-user level\
    \ except\n   for mail sent to address lists comprising multiple users.  In order\n\
    \   for two principals to engage in a useful exchange of PEM using\n   conventional\
    \ cryptography, they must first possess common IK\n   components (when symmetric\
    \ key management is used) or complementary\n   IK components (when asymmetric\
    \ key management is used).  When\n   symmetric cryptography is used, the IK consists\
    \ of a single\n   component, used to encrypt both DEKs and MICs.  When asymmetric\n\
    \   cryptography is used, a recipient's public component is used as an IK\n  \
    \ to encrypt DEKs (a transformation invertible only by a recipient\n   possessing\
    \ the corresponding private component), and the originator's\n   private component\
    \ is used to encrypt MICs (a transformation\n   invertible by all recipients,\
    \ since the originator's certificate\n   provides all recipients with the public\
    \ component required to perform\n   MIC validation.\n   This RFC does not prescribe\
    \ the means by which interchange keys are\n   made available to appropriate parties;\
    \ such means may be centralized\n   (e.g., via key management servers) or decentralized\
    \ (e.g., via\n   pairwise agreement and direct distribution among users).  In\
    \ any\n   case, any given IK component is associated with a responsible Issuing\n\
    \   Authority (IA).  When certificate-based asymmetric key management, as\n  \
    \ discussed in RFC [1422, is employed, the IA function is performed by\n   a Certification\
    \ Authority (CA).\n   When an IA generates and distributes an IK component, associated\n\
    \   control information is provided to direct how it is to be used.  In\n   order\
    \ to select the appropriate IK(s) to use in message encryption,\n   an originator\
    \ must retain a correspondence between IK components and\n   the recipients with\
    \ which they are associated.  Expiration date\n   information must also be retained,\
    \ in order that cached entries may\n   be invalidated and replaced as appropriate.\n\
    \   Since a message may be sent with multiple IK components identified,\n   corresponding\
    \ to multiple intended recipients, each recipient's UA\n   must be able to determine\
    \ that recipient's intended IK component.\n   Moreover, if no corresponding IK\
    \ component is available in the\n   recipient's database when a message arrives,\
    \ the recipient must be\n   able to identify the required IK component and identify\
    \ that IK\n   component's associated IA.  Note that different IKs may be used\
    \ for\n   different messages between a pair of communicants.  Consider, for\n\
    \   example, one message sent from A to B and another message sent (using\n  \
    \ the IK-per-list method) from A to a mailing list of which B is a\n   member.\
    \  The first message would use IK components associated\n   individually with\
    \ A and B, but the second would use an IK component\n   shared among list members.\n\
    \   When a PEM message is transmitted, an indication of the IK components\n  \
    \ used for DEK and MIC encryption must be included.  To this end,\n   Originator-ID\
    \ and Recipient-ID encapsulated header fields provide\n   (some or all of) the\
    \ following data:\n        1.  Identification of the relevant Issuing Authority\
    \ (IA\n            subfield)\n        2.  Identification of an entity with which\
    \ a particular IK\n            component is associated (Entity Identifier or EI\
    \ subfield)\n        3.  Version/Expiration subfield\n   In the asymmetric case,\
    \ all necessary information associated with an\n   originator can be acquired\
    \ by processing the certificate carried in\n   an \"Originator-Certificate:\"\
    \ field; to avoid redundancy in this case,\n   no \"Originator-ID-Asymmetric:\"\
    \ field is included if a corresponding\n   \"Originator-Certificate:\" appears.\n\
    \   The comma character (\",\") is used to delimit the subfields within an\n \
    \  Originator-ID or Recipient-ID.  The IA, EI, and version/expiration\n   subfields\
    \ are generated from a restricted character set, as\n   prescribed by the following\
    \ BNF (using notation as defined in RFC\n   822, Sections 2 and 3.3):\n   IKsubfld\
    \       :=       1*ia-char\n   ia-char        :=       DIGIT / ALPHA / \"'\" /\
    \ \"+\" / \"(\" / \")\" /\n                           \".\" / \"/\" / \"=\" /\
    \ \"?\" / \"-\" / \"@\" /\n                           \"%\" / \"!\" / '\"' / \"\
    _\" / \"<\" / \">\"\n   An example Recipient-ID field for the symmetric case is\
    \ as follows:\n   Recipient-ID-Symmetric: linn@zendia.enet.dec.com,ptf-kmc,2\n\
    \   This example field indicates that IA \"ptf-kmc\" has issued an IK\n   component\
    \ for use on messages sent  to \"linn@zendia.enet.dec.com\",\n   and that the\
    \ IA has provided the number 2 as a version indicator for\n   that IK component.\n\
    \   An example Recipient-ID field for the asymmetric case is as follows:\n   Recipient-ID-Asymmetric:\n\
    \    MFExCzAJBgNVBAYTAlVTMSAwHgYDVQQKExdSU0EgRGF0YSBTZWN1cml0eSwgSW5j\n    LjEPMA0GA1UECxMGQmV0YSAxMQ8wDQYDVQQLEwZOT1RBUlk=,66\n\
    \   This example field includes the printably encoded BER representation\n   of\
    \ a certificate's issuer distinguished name, along with the\n   certificate serial\
    \ number 66 as assigned by that issuer.\n"
- title: 5.2.1  Subfield Definitions
  contents:
  - "5.2.1  Subfield Definitions\n   The following subsections define the subfields\
    \ of Originator-ID and\n   Recipient-ID fields.\n"
- title: 5.2.1.1  Entity Identifier Subfield
  contents:
  - "5.2.1.1  Entity Identifier Subfield\n   An entity identifier (used only for \"\
    Originator-ID-Symmetric:\" and\n   \"Recipient-ID-Symmetric:\" fields) is constructed\
    \ as an IKsubfld.\n   More restrictively, an entity identifier subfield assumes\
    \ the\n   following form:\n                      <user>@<domain-qualified-host>\n\
    \   In order to support universal interoperability, it is necessary to\n   assume\
    \ a universal form for the naming information.  For the case of\n   installations\
    \ which transform local host names before transmission\n   into the broader Internet,\
    \ it is strongly recommended that the host\n   name as presented to the Internet\
    \ be employed.\n"
- title: 5.2.1.2  Issuing Authority Subfield
  contents:
  - "5.2.1.2  Issuing Authority Subfield\n   An IA identifier subfield is constructed\
    \ as an IKsubfld.  This RFC\n   does not define this subfield's contents for the\
    \ symmetric key\n   management case. Any prospective IAs which are to issue symmetric\n\
    \   keys for use in conjunction with this RFC must coordinate assignment\n   of\
    \ IA identifiers in a manner (centralized or hierarchic) which\n   assures uniqueness.\n\
    \   For the asymmetric key management case, the IA identifier subfield\n   will\
    \ be formed from the ASN.1 BER representation of the distinguished\n   name of\
    \ the issuing organization or organizational unit.  The\n   distinguished encoding\
    \ rules specified in Clause 8.7 of\n   Recommendation X.509 (\"X.509 DER\") are\
    \ to be employed in generating\n   this representation.  The encoded binary result\
    \ will be represented\n   for inclusion in a transmitted header using the procedure\
    \ defined in\n   Section 4.3.2.4 of this RFC.\n"
- title: 5.2.1.3  Version/Expiration Subfield
  contents:
  - "5.2.1.3  Version/Expiration Subfield\n   A version/expiration subfield is constructed\
    \ as an IKsubfld.  For the\n   symmetric key management case, the version/expiration\
    \ subfield format\n   is permitted to vary among different IAs, but must satisfy\
    \ certain\n   functional constraints.  An IA's version/expiration subfields must\
    \ be\n   sufficient to distinguish among the set of IK components issued by\n\
    \   that IA for a given identified entity.  Use of a monotonically\n   increasing\
    \ number is sufficient to distinguish among the IK\n   components provided for\
    \ an entity by an IA; use of a timestamp\n   additionally allows an expiration\
    \ time or date to be prescribed for\n   an IK component.\n   For the asymmetric\
    \ key management case, the version/expiration\n   subfield's value is the hexadecimal\
    \ serial number of the certificate\n   being used in conjunction with the originator\
    \ or recipient specified\n   in the \"Originator-ID-Asymmetric:\" or \"Recipient-ID-Asymmetric:\"\
    \n   field in which the subfield occurs.\n"
- title: 5.2.2  IK Cryptoperiod Issues
  contents:
  - "5.2.2  IK Cryptoperiod Issues\n   An IK component's cryptoperiod is dictated\
    \ in part by a tradeoff\n   between key management overhead and revocation responsiveness.\
    \  It\n   would be undesirable to delete an IK component permanently before\n\
    \   receipt of a message encrypted using that IK component, as this would\n  \
    \ render the message permanently undecipherable.  Access to an expired\n   IK\
    \ component would be needed, for example, to process mail received\n   by a user\
    \ (or system) which had been inactive for an extended period\n   of time.  In\
    \ order to enable very old IK components to be deleted, a\n   message's recipient\
    \ desiring encrypted local long term storage should\n   transform the DEK used\
    \ for message text encryption via re-encryption\n   under a locally maintained\
    \ IK, rather than relying on IA maintenance\n   of old IK components for indefinite\
    \ periods.\n"
- title: 6.  User Naming
  contents:
  - "6.  User Naming\n   Unique naming of electronic mail users, as is needed in order\
    \ to\n   select corresponding keys correctly, is an important topic and one\n\
    \   which has received (and continues to receive) significant study.  For\n  \
    \ the symmetric case, IK components are identified in PEM headers\n   through\
    \ use of mailbox specifiers in traditional Internet-wide form\n   (\"user@domain-qualified-host\"\
    ). Successful operation in this mode\n   relies on users (or their PEM implementations)\
    \ being able to\n   determine the universal-form names corresponding to PEM originators\n\
    \   and recipients.  If a PEM implementation operates in an environment\n   where\
    \ addresses in a local form differing from the universal form are\n   used, translations\
    \ must be performed in order to map between the\n   universal form and that local\
    \ representation.\n   The use of user identifiers unrelated to the hosts on which\
    \ the\n   users' mailboxes reside offers generality and value.  X.500\n   distinguished\
    \ names, as employed in the certificates of the\n   recommended key management\
    \ infrastructure defined in RFC 1422,\n   provide a basis for such user identification.\
    \ As directory services\n   become more pervasive, they will offer originators\
    \ a means to search\n   for desired recipients which is based on a broader set\
    \ of attributes\n   than mailbox specifiers alone. Future work is anticipated\
    \ in\n   integration with directory services, particularly the mechanisms and\n\
    \   naming schema of the Internet OSI directory pilot activity.\n"
- title: 7.  Example User Interface and Implementation
  contents:
  - "7.  Example User Interface and Implementation\n   In order to place the mechanisms\
    \ and approaches discussed in this RFC\n   into context, this section presents\
    \ an overview of a hypothetical\n   prototype implementation.   This implementation\
    \ is a standalone\n   program   which is invoked by a user, and   lies above the\
    \ existing\n   UA sublayer.  In the UNIX system, and possibly in other environments\n\
    \   as well,  such a program can be invoked as a \"filter\" within an\n   electronic\
    \ mail UA or a  text editor, simplifying the sequence of\n   operations which\
    \ must be performed by  the user. This form of\n   integration offers the  advantage\
    \ that the program can be used in\n   conjunction with a range of UA  programs,\
    \ rather than being\n   compatible only with a particular UA.\n   When a user\
    \ wishes to apply privacy enhancements to an outgoing\n   message, the user prepares\
    \ the message's text and invokes the\n   standalone program, which in turn generates\
    \ output suitable for\n   transmission via the UA.  When a user receives a PEM\
    \ message, the UA\n   delivers the message in encrypted form, suitable for decryption\
    \ and\n   associated processing by the standalone program.\n   In this prototype\
    \ implementation, a cache of IK components is\n   maintained in a local file,\
    \ with entries managed manually based on\n   information provided by originators\
    \ and recipients.  For the\n   asymmetric key management case, certificates are\
    \ acquired for a\n   user's PEM correspondents; in advance and/or in addition\
    \ to retrieval\n   of certificates from directories, they can be extracted from\
    \ the\n   \"Originator-Certificate:\" fields of received PEM messages.\n   The\
    \ IK/certificate cache is, effectively, a simple database indexed\n   by mailbox\
    \ names.  IK components are selected for transmitted\n   messages based on the\
    \ originator's identity and on recipient names,\n   and corresponding Originator-ID,\
    \ \"Originator-Certificate:\", and\n   Recipient-ID fields are placed into the\
    \ message's encapsulated\n   header.  When a message is received, these fields\
    \ are used as a basis\n   for a lookup in the database, yielding the appropriate\
    \ IK component\n   entries.  DEKs and cryptographic parameters (e.g., IVs) are\
    \ generated\n   dynamically within the program.\n   Options and destination addresses\
    \ are selected by command line\n   arguments to the standalone program.  The function\
    \ of specifying\n   destination addresses to the privacy enhancement program is\
    \ logically\n   distinct from the function of specifying the corresponding addresses\n\
    \   to the UA for use by the MTS.  This separation results from the fact\n   that,\
    \ in many cases, the local form of an address as specified to a\n   UA differs\
    \ from the Internet global form as used in \"Originator-ID-\n   Symmetric:\" and\
    \ \"Recipient-ID-Symmetric:\" fields.\n"
- title: 8.  Minimum Essential Requirements
  contents:
  - "8.  Minimum Essential Requirements\n   This section summarizes particular capabilities\
    \ which an\n   implementation must provide for full conformance with this RFC.\n\
    \   RFC 1422 specifies asymmetric, certificate-based key management\n   procedures\
    \ to support the message processing procedures defined in\n   this document; PEM\
    \ implementation support for these key management\n   procedures is strongly encouraged.\
    \  Implementations supporting these\n   procedures must also be equipped to display\
    \ the names of originator\n   and recipient PEM users in the X.500 DN form as\
    \ authenticated by the\n   procedures of RFC 1422.\n   The message processing\
    \ procedures defined here can also be used with\n   symmetric key management techniques,\
    \ though no RFCs analogous to RFC\n   1422 are currently available to provide\
    \ correspondingly detailed\n   description of suitable symmetric key management\
    \ procedures.   A\n   complete PEM implementation must support at least one of\
    \ these\n   asymmetric and/or symmetric key management modes.\n   A full implementation\
    \ of PEM is expected to be able to send and\n   receive ENCRYPTED, MIC-ONLY, and\
    \ MIC-CLEAR messages, and to receive\n   CRL messages.  Some level of support\
    \ for generating and processing\n   nested and annotated PEM messages (for forwarding\
    \ purposes) is to be\n   provided, and an implementation should be able to reduce\
    \ ENCRYPTED\n   messages to MIC-ONLY or MIC-CLEAR for forwarding. Fully-conformant\n\
    \   implementations must be able to emit Certificate and Issuer-\n   Certificate\
    \ fields, and to include a Key-Info field corresponding to\n   the originator,\
    \ but users or configurers of PEM implementations may\n   be allowed the option\
    \ of deactivating those features.\n"
- title: 9.  Descriptive Grammar
  contents:
  - "9.  Descriptive Grammar\n   This section provides a grammar describing the construction\
    \ of a PEM\n   message.\n   ; PEM BNF representation, using RFC 822 notation.\n\
    \   ; imports field meta-syntax (field, field-name, field-body,\n   ; field-body-contents)\
    \ from RFC-822, sec. 3.2\n   ; imports DIGIT, ALPHA, CRLF, text from RFC-822\n\
    \   ; Note: algorithm and mode specifiers are officially defined\n   ; in RFC\
    \ 1423\n   <pemmsg> ::= <preeb>\n                <pemhdr>\n                [CRLF\
    \ <pemtext>]   ; absent for CRL message\n                <posteb>\n   <preeb>\
    \ ::= \"-----BEGIN PRIVACY-ENHANCED MESSAGE-----\" CRLF\n   <posteb> ::= \"-----END\
    \ PRIVACY-ENHANCED MESSAGE-----\" CRLF / <preeb>\n   <pemtext> ::= <encbinbody>\
    \      ; for ENCRYPTED or MIC-ONLY messages\n               / *(<text> CRLF) \
    \   ; for MIC-CLEAR\n   <pemhdr> ::= <normalhdr> / <crlhdr>\n   <normalhdr> ::=\
    \  <proctype>\n               <contentdomain>\n               [<dekinfo>]    \
    \     ; needed if ENCRYPTED\n               (1*(<origflds> *<recipflds>)) ; symmetric\
    \ case --\n                            ; recipflds included for all proc types\n\
    \               / ((1*<origflds>) *(<recipflds>)) ; asymmetric case --\n     \
    \                       ; recipflds included for ENCRYPTED proc type\n   <crlhdr>\
    \ ::= <proctype>\n               1*(<crl> [<cert>] *(<issuercert>))\n   <asymmorig>\
    \ ::= <origid-asymm> / <cert>\n   <origflds> ::= <asymmorig> [<keyinfo>] *(<issuercert>)\n\
    \                  <micinfo>                        ; asymmetric\n           \
    \       / <origid-symm> [<keyinfo>]      ; symmetric\n   <recipflds> ::= <recipid>\
    \ <keyinfo>\n   ; definitions for PEM header fields\n   <proctype> ::= \"Proc-Type\"\
    \ \":\" \"4\" \",\" <pemtypes> CRLF\n   <contentdomain> ::= \"Content-Domain\"\
    \ \":\" <contentdescrip> CRLF\n   <dekinfo> ::= \"DEK-Info\" \":\" <dekalgid>\
    \ [ \",\" <dekparameters> ] CRLF\n   <symmid> ::= <IKsubfld> \",\" [<IKsubfld>]\
    \ \",\" [<IKsubfld>]\n   <asymmid> ::= <IKsubfld> \",\" <IKsubfld>\n   <origid-asymm>\
    \ ::= \"Originator-ID-Asymmetric\" \":\" <asymmid> CRLF\n   <origid-symm> ::=\
    \ \"Originator-ID-Symmetric\" \":\" <symmid> CRLF\n   <recipid> ::= <recipid-asymm>\
    \ / <recipid-symm>\n   <recipid-asymm> ::= \"Recipient-ID-Asymmetric\" \":\" <asymmid>\
    \ CRLF\n   <recipid-symm> ::= \"Recipient-ID-Symmetric\" \":\" <symmid> CRLF\n\
    \   <cert> ::= \"Originator-Certificate\" \":\" <encbin> CRLF\n   <issuercert>\
    \ ::= \"Issuer-Certificate\" \":\" <encbin> CRLF\n   <micinfo> ::= \"MIC-Info\"\
    \ \":\" <micalgid> \",\" <ikalgid> \",\"\n                  <asymsignmic> CRLF\n\
    \   <keyinfo> ::= \"Key-Info\" \":\" <ikalgid> \",\" <micalgid> \",\"\n      \
    \           <symencdek> \",\" <symencmic> CRLF     ; symmetric case\n        \
    \         / \"Key-Info\" \":\" <ikalgid> \",\" <asymencdek>\n                \
    \ CRLF                                ; asymmetric case\n   <crl> ::= \"CRL\"\
    \ \":\" <encbin> CRLF\n   <pemtypes> ::= \"ENCRYPTED\" / \"MIC-ONLY\" / \"MIC-CLEAR\"\
    \ / \"CRL\"\n   <encbinchar> ::= ALPHA / DIGIT / \"+\" / \"/\" / \"=\"\n   <encbingrp>\
    \ ::= 4*4<encbinchar>\n   <encbin> ::= 1*<encbingrp>\n   <encbinbody> ::= *(16*16<encbingrp>\
    \ CRLF) [1*16<encbingrp> CRLF]\n   <IKsubfld> ::= 1*<ia-char>\n   ; Note: \",\"\
    \ removed from <ia-char> set so that Orig-ID and Recip-ID\n   ; fields can be\
    \ delimited with commas (not colons) like all other\n   ; fields\n   <ia-char>\
    \ ::=  DIGIT / ALPHA / \"'\" / \"+\" / \"(\" / \")\" /\n                  \".\"\
    \ / \"/\" / \"=\" / \"?\" / \"-\" / \"@\" /\n                  \"%\" / \"!\" /\
    \ '\"' / \"_\" / \"<\" / \">\"\n   <hexchar> ::= DIGIT / \"A\" / \"B\" / \"C\"\
    \ / \"D\" / \"E\" / \"F\"\n                                                  \
    \    ; no lower case\n   ; This specification defines one value (\"RFC822\") for\n\
    \   ; <contentdescrip>: other values may be defined in future in\n   ; separate\
    \ or successor documents\n   ;\n   <contentdescrip> ::= \"RFC822\"\n   ; The following\
    \ items are defined in RFC 1423\n   ;  <dekalgid>\n   ;  <dekparameters>\n   ;\
    \  <micalgid>\n   ;  <ikalgid>\n   ;  <asymsignmic>\n   ;  <symencdek>\n   ; \
    \ <symencmic>\n   ;  <asymencdek>\n"
- title: 'NOTES:'
  contents:
  - "NOTES:\n     [1]  Key generation for MIC computation and message text encryption\n\
    \          may either be performed by the sending host or by a\n          centralized\
    \ server.  This RFC does not constrain this design\n          alternative.  Section\
    \ 5.1 identifies possible advantages of a\n          centralized server approach\
    \ if symmetric key management is\n          employed.\n     [2]  Postel, J., \"\
    Simple Mail Transfer Protocol\", STD 10,\n          RFC 821, August 1982.\n  \
    \   [3]  This transformation should occur only at an SMTP endpoint, not\n    \
    \      at an intervening relay, but may take place at a gateway\n          system\
    \ linking the SMTP realm with other environments.\n     [4]  Use of a canonicalization\
    \ procedure similar to that of SMTP\n          was selected because its functions\
    \ are widely used and\n          implemented within the Internet mail community,\
    \ not for\n          purposes of SMTP interoperability with this intermediate\n\
    \          result.\n     [5]  Crocker, D., \"Standard for the Format of ARPA Internet\
    \ Text\n          Messages\", STD 11, RFC 822, August 1982.\n     [6]  Rose, M.\
    \ T. and Stefferud, E. A., \"Proposed Standard for\n          Message Encapsulation\"\
    , RFC 934, January 1985.\n     [7]  CCITT Recommendation X.509 (1988), \"The Directory\
    \ -\n          Authentication Framework\".\n     [8]  Throughout this RFC we have\
    \ adopted the terms \"private\n          component\" and \"public component\"\
    \ to refer to the quantities\n          which are, respectively, kept secret and\
    \ made publicly\n          available in asymmetric cryptosystems.  This convention\
    \ is\n          adopted to avoid possible confusion arising from use of the\n\
    \          term \"secret key\" to refer to either the former quantity or to\n\
    \          a key in a symmetric cryptosystem.\n"
- title: Patent Statement
  contents:
  - "Patent Statement\n   This version of Privacy Enhanced Mail (PEM) relies on the\
    \ use of\n   patented public key encryption technology for authentication and\n\
    \   encryption.  The Internet Standards Process as defined in RFC 1310\n   requires\
    \ a written statement from the Patent holder that a license\n   will be made available\
    \ to applicants under reasonable terms and\n   conditions prior to approving a\
    \ specification as a Proposed, Draft or\n   Internet Standard.\n   The Massachusetts\
    \ Institute of Technology and the Board of Trustees\n   of the Leland Stanford\
    \ Junior University have granted Public Key\n   Partners (PKP) exclusive sub-licensing\
    \ rights to the following\n   patents issued in the United States, and all of\
    \ their corresponding\n   foreign patents:\n      Cryptographic Apparatus and\
    \ Method\n      (\"Diffie-Hellman\")............................... No. 4,200,770\n\
    \      Public Key Cryptographic Apparatus\n      and Method (\"Hellman-Merkle\"\
    ).................... No. 4,218,582\n      Cryptographic Communications System\
    \ and\n      Method (\"RSA\")................................... No. 4,405,829\n\
    \      Exponential Cryptographic Apparatus\n      and Method (\"Hellman-Pohlig\"\
    ).................... No. 4,424,414\n   These patents are stated by PKP to cover\
    \ all known methods of\n   practicing the art of Public Key encryption, including\
    \ the variations\n   collectively known as El Gamal.\n   Public Key Partners has\
    \ provided written assurance to the Internet\n   Society that parties will be\
    \ able to obtain, under reasonable,\n   nondiscriminatory terms, the right to\
    \ use the technology covered by\n   these patents.  This assurance is documented\
    \ in RFC 1170 titled\n   \"Public Key Standards and Licenses\".  A copy of the\
    \ written assurance\n   dated April 20, 1990, may be obtained from the Internet\
    \ Assigned\n   Number Authority (IANA).\n   The Internet Society, Internet Architecture\
    \ Board, Internet\n   Engineering Steering Group and the Corporation for National\
    \ Research\n   Initiatives take no position on the validity or scope of the patents\n\
    \   and patent applications, nor on the appropriateness of the terms of\n   the\
    \ assurance.  The Internet Society and other groups mentioned above\n   have not\
    \ made any determination as to any other intellectual property\n   rights which\
    \ may apply to the practice of this standard. Any further\n   consideration of\
    \ these matters is the user's own responsibility.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   This entire document is about security.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   John Linn\n   EMail: 104-8456@mcimail.com\n"
