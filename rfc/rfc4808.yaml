- title: __initial_text__
  contents:
  - '                   Key Change Strategies for TCP-MD5

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   The TCP-MD5 option is most commonly used to secure BGP sessions\n\
    \   between routers.  However, changing the long-term key is difficult,\n   since\
    \ the change needs to be synchronized between different\n   organizations.  We\
    \ describe single-ended strategies that will permit\n   (mostly) unsynchronized\
    \ key changes.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The TCP-MD5 option [RFC2385] is most commonly used to secure\
    \ BGP\n   sessions between routers.  However, changing the long-term key is\n\
    \   difficult, since the change needs to be synchronized between\n   different\
    \ organizations.  Worse yet, if the keys are out of sync, it\n   may break the\
    \ connection between the two routers, rendering repair\n   attempts difficult.\n\
    \   The proper solution involves some sort of key management protocol.\n   Apart\
    \ from the complexity of such things, RFC 2385 was not written\n   with key changes\
    \ in mind.  In particular, there is no KeyID field in\n   the option, which means\
    \ that even a key management protocol would run\n   into the same problem.\n \
    \  Fortunately, a heuristic permits key change despite this protocol\n   deficiency.\
    \  The change can be installed unilaterally at one end of a\n   connection; it\
    \ is fully compatible with the existing protocol.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n"
- title: 2.  The Algorithm
  contents:
  - "2.  The Algorithm\n   Separate algorithms are necessary for transmission and\
    \ reception.\n   Reception is easier; we explain it first.\n"
- title: 2.1.  Reception
  contents:
  - "2.1.  Reception\n   A receiver has a list of valid keys.  Each key has a (conceptual)\n\
    \   timestamp associated with it.  When a segment arrives, each key is\n   tried\
    \ in turn.  The segment is discarded if and only if it cannot be\n   validated\
    \ by any key in the list.\n   In principle, there is no need to test keys in any\
    \ particular order.\n   For performance reasons, though, a simple most-recently-used\
    \ (MRU)\n   strategy -- try the last valid key first -- should work well.  More\n\
    \   complex mechanisms, such as examining the TCP sequence number of an\n   arriving\
    \ segment to see whether it fits in a hole, are almost\n   certainly unnecessary.\
    \  On the other hand, validating that a received\n   segment is putatively legal,\
    \ by checking its sequence number against\n   the advertised window, can help\
    \ avoid denial of service attacks.\n   The newest key that has successfully validated\
    \ a segment is marked as\n   the \"preferred\" key; see below.\n   Implicit in\
    \ this scheme is the assumption that older keys will\n   eventually be unneeded\
    \ and can be removed.  Accordingly,\n   implementations SHOULD provide an indication\
    \ of when a key was last\n   used successfully.\n"
- title: 2.2.  Transmission
  contents:
  - "2.2.  Transmission\n   Transmission is more complex, because the sender does\
    \ not know which\n   keys can be accepted at the far end.  Accordingly, the conservative\n\
    \   strategy is to delay using any new keys for a considerable amount of\n   time,\
    \ probably measured in days.  This time interval is the amount of\n   asynchronicity\
    \ the parties wish to permit; it is agreed upon out of\n   band and configured\
    \ manually.\n   Some automation is possible, however.  If a key has been used\n\
    \   successfully to validate an incoming segment, clearly the other side\n   knows\
    \ it.  Accordingly, any key marked as \"preferred\" by the\n   receiving part\
    \ of a stack SHOULD be used for transmissions.\n   A sophisticated implementation\
    \ could try alternate keys if the TCP\n   retransmission counter gets too high.\
    \  (This is analogous to dead\n   gateway detection.)  In particular, if a key\
    \ change has just been\n   attempted but such segments are not acknowledged, it\
    \ is reasonable to\n   fall back to the previous key and issue an alert of some\
    \ sort.\n   Similarly, an implementation with a new but unused key could\n   occasionally\
    \ try to use it, much in the way that TCP implementations\n   probe closed windows.\
    \  Doing this avoids the \"silent host\" problem\n   discussed in Section 3.1.\
    \  This should be done at a moderately slow\n   rate.\n   Note that there is an\
    \ ambiguity when an acknowledgment is received\n   for a segment transmitted with\
    \ two different keys.  The TCP Timestamp\n   option [RFC1323] can be used for\
    \ disambiguation.\n"
- title: 3.  Operations
  contents:
  - '3.  Operations

    '
- title: 3.1.  Single-Ended Operations
  contents:
  - "3.1.  Single-Ended Operations\n   Suppose only one end of the connection has\
    \ this algorithm\n   implemented.  The new key is provisioned on that system,\
    \ with a start\n   time far in the future -- sufficiently far, in fact, that it\
    \ will not\n   be used spontaneously.  After the key is ready, the other end is\n\
    \   notified, out-of-band, that a key change can commence.\n   At some point,\
    \ the other end is upgraded.  Because it does not have\n   multiple keys available,\
    \ it will start using the new key immediately\n   for its transmission, and will\
    \ drop all segments that use the old\n   key.  As soon as it tries to transmit,\
    \ the upgraded side will\n   designate the new key as preferred, and will use\
    \ it for all of its\n   transmissions.  Note specifically that this will include\n\
    \   retransmissions of any segments rejected because they used the old\n   key.\n\
    \   There is a problem if the unchanged machine is a \"silent host\" -- a\n  \
    \ host that has nothing to say, and hence does not transmit.  The best\n   way\
    \ to avoid this is for an upgraded machine to try a variety of keys\n   in the\
    \ event of repeated unacknowledged packets, and to probe for new\n   unused keys\
    \ during silent periods, as discussed in Section 2.2.\n   Alternatively, application-level\
    \ KeepAlive messages may be used to\n   ensure that neither end of the connection\
    \ is completely silent.  See,\n   for example, Section 4.4 of [RFC4271] or Section\
    \ 3.5.4 of [RFC3036].\n"
- title: 3.2.  Double-Ended Operations
  contents:
  - "3.2.  Double-Ended Operations\n   Double-ended operations are similar, save that\
    \ both sides deploy the\n   new key at about the same time.  One should be configured\
    \ to start\n   using the new key at a point where it is reasonably certain that\
    \ the\n   other side would have it installed, too.  Assuming that has in fact\n\
    \   happened, the new key will be marked \"preferred\" on both sides.\n"
- title: 3.3.  Monitoring
  contents:
  - "3.3.  Monitoring\n   As noted, implementations should monitor when a key was\
    \ last used for\n   transmission or reception.  Any monitoring mechanism can be\
    \ used;\n   most likely, it will be one or both of a MIB object or objects and\n\
    \   the vendor's usual command-line mechanism for displaying data of this\n  \
    \ type.  Regardless, the network operations center should keep track of\n   this.\
    \  When a new key has been used successfully for both\n   transmission and reception\
    \ for a reasonable amount of time -- the\n   exact value isn't crucial, but it\
    \ should probably be longer than\n   twice the maximum segment lifetime -- the\
    \ old key can be marked for\n   deletion.  There is an implicit assumption here\
    \ that there will not\n   be substantial overlap in the usage period of such keys;\
    \ monitoring\n   systems should look for any such anomalies, of course.\n"
- title: 4.  Moving Forward
  contents:
  - "4.  Moving Forward\n   As implied in Section 1, this is an interim strategy,\
    \ intended to\n   make TCP-MD5 operationally usable today.  We do not suggest\
    \ or\n   recommend it as a long-term solution.  In this section, we make some\n\
    \   suggestions about the design of a future TCP authentication option.\n   The\
    \ first and most obvious change is to replace keyed MD5 with a\n   stronger MAC\
    \ [RFC4278].  Today, HMAC-SHA1 [RFC4634] is the preferred\n   choice, though others\
    \ such as UMAC [RFC4418] should be considered as\n   well.\n   A new authentication\
    \ option should contain some form of a Key ID\n   field.  Such an option would\
    \ permit unambiguous identification of\n   which key was used to create the MAC\
    \ for a given segment, sparing the\n   receiver the need to engage in the sort\
    \ of heuristics described here.\n   A Key ID is useful with both manual and automatic\
    \ key management.\n   (Note carefully that we do not prescribe any particular\
    \ Key ID\n   mechanism here.  Rather, we are stating a requirement: there must\
    \ be\n   a simple, low-cost way to select a particular key, and it must be\n \
    \  possible to rekey without tearing down long-lived connections.)\n   Finally,\
    \ an automated key management mechanism should be defined.\n   The general reasoning\
    \ for that is set forth in [RFC4107]; specific\n   issues pertaining to BGP and\
    \ TCP are given in [RFC3562].\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   In theory, accepting multiple keys simultaneously\
    \ makes life easier\n   for an attacker.  In practice, if the recommendations\
    \ in [RFC3562]\n   are followed, this should not be a problem.\n   New keys must\
    \ be communicated securely.  Specifically, new key\n   messages must be kept confidential\
    \ and must be properly\n   authenticated.\n   Having multiple keys makes CPU denial-of-service\
    \ attacks easier.\n   This suggests that keeping the overlap period reasonably\
    \ short is a\n   good idea.  In addition, the Generalized TTL Security Mechanism\n\
    \   [RFC3682], if applicable to the local topology, can help.  Note that\n   most\
    \ of the time, only one key will exist; virtually all of the\n   remaining time\
    \ there will be only two keys in existence.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   There are no IANA actions required.  The TCP-MD5\
    \ option number is\n   defined in [RFC2385], and is currently listed by IANA.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   I'd like to thank Ron Bonica, Randy Bush, Ross Callon,\
    \ Rob Evans,\n   Eric Rescorla, and Sam Weiler for their comments and inspiration.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC1323]  Jacobson, V., Braden, B., and D. Borman,\
    \ \"TCP Extensions\n              for High Performance\", RFC 1323, May 1992.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2385]  Heffernan,\
    \ A., \"Protection of BGP Sessions via the TCP MD5\n              Signature Option\"\
    , RFC 2385, August 1998.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC3036]  Andersson, L., Doolan, P., Feldman,\
    \ N., Fredette, A., and\n              B. Thomas, \"LDP Specification\", RFC 3036,\
    \ January 2001.\n   [RFC3562]  Leech, M., \"Key Management Considerations for\
    \ the TCP MD5\n              Signature Option\", RFC 3562, July 2003.\n   [RFC3682]\
    \  Gill, V., Heasley, J., and D. Meyer, \"The Generalized TTL\n              Security\
    \ Mechanism (GTSM)\", RFC 3682, February 2004.\n   [RFC4107]  Bellovin, S. and\
    \ R. Housley, \"Guidelines for Cryptographic\n              Key Management\",\
    \ BCP 107, RFC 4107, June 2005.\n   [RFC4271]  Rekhter, Y., Li, T., and S. Hares,\
    \ \"A Border Gateway\n              Protocol 4 (BGP-4)\", RFC 4271, January 2006.\n\
    \   [RFC4278]  Bellovin, S. and A. Zinin, \"Standards Maturity Variance\n    \
    \          Regarding the TCP MD5 Signature Option (RFC 2385) and the\n       \
    \       BGP-4 Specification\", RFC 4278, January 2006.\n   [RFC4418]  Krovetz,\
    \ T., \"UMAC: Message Authentication Code using\n              Universal Hashing\"\
    , RFC 4418, March 2006.\n   [RFC4634]  Eastlake, D. and T. Hansen, \"US Secure\
    \ Hash Algorithms\n              (SHA and HMAC-SHA)\", RFC 4634, August 2006.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Steven M. Bellovin\n   Columbia University\n   1214 Amsterdam\
    \ Avenue\n   MC 0401\n   New York, NY  10027\n   US\n   Phone: +1 212 939 7149\n\
    \   EMail: bellovin@acm.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
