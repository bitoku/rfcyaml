- title: __initial_text__
  contents:
  - "       Problem Statement and Requirements for Increased Accuracy\n          \
    \ in Explicit Congestion Notification (ECN) Feedback\n"
- title: Abstract
  contents:
  - "Abstract\n   Explicit Congestion Notification (ECN) is a mechanism where network\n\
    \   nodes can mark IP packets, instead of dropping them, to indicate\n   congestion\
    \ to the endpoints.  An ECN-capable receiver will feed this\n   information back\
    \ to the sender.  ECN is specified for TCP in such a\n   way that it can only\
    \ feed back one congestion signal per Round-Trip\n   Time (RTT).  In contrast,\
    \ ECN for other transport protocols, such as\n   RTP/UDP and SCTP, is specified\
    \ with more accurate ECN feedback.\n   Recent new TCP mechanisms (like Congestion\
    \ Exposure (ConEx) or Data\n   Center TCP (DCTCP)) need more accurate ECN feedback\
    \ in the case where\n   more than one marking is received in one RTT.  This document\n\
    \   specifies requirements for an update to the TCP protocol to provide\n   more\
    \ accurate ECN feedback.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7560.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Terminology . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   2.  Recap of Classic ECN and ECN Nonce in IP/TCP  . . . . .\
    \ . . .   5\n   3.  Use Cases . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   6\n   4.  Requirements  . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   8\n   5.  Design Approaches . . . . . . . . . . . . . . . . . . . . . .\
    \  11\n     5.1.  Redefinition of ECN/NS Header Bits  . . . . . . . . . . .  11\n\
    \     5.2.  Using Other Header Bits . . . . . . . . . . . . . . . . .  13\n  \
    \   5.3.  Using a TCP Option  . . . . . . . . . . . . . . . . . . .  13\n   6.\
    \  Security Considerations . . . . . . . . . . . . . . . . . . .  14\n   7.  References\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  14\n     7.1.  Normative\
    \ References  . . . . . . . . . . . . . . . . . .  14\n     7.2.  Informative\
    \ References  . . . . . . . . . . . . . . . . .  14\n   Appendix A.  Ambiguity\
    \ of the More Accurate ECN Feedback in DCTCP  16\n   Acknowledgements  . . . .\
    \ . . . . . . . . . . . . . . . . . . . .  17\n   Authors' Addresses  . . . .\
    \ . . . . . . . . . . . . . . . . . . .  17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Explicit Congestion Notification (ECN) [RFC3168] is a mechanism\
    \ where\n   network nodes can mark IP packets instead of dropping them to\n  \
    \ indicate congestion to the endpoints.  An ECN-capable receiver will\n   feed\
    \ this information back to the sender.  ECN is specified for TCP\n   in such a\
    \ way that only one feedback signal can be transmitted per\n   Round-Trip Time\
    \ (RTT).  This is sufficient for preexisting TCP\n   congestion control mechanisms\
    \ that perform only one reduction in\n   sending rate per RTT, independent of\
    \ the number of ECN congestion\n   marks.  But recently proposed or deployed mechanisms\
    \ like Congestion\n   Exposure (ConEx) [RFC6789] or Data Center TCP (DCTCP) [DCTCP]\
    \ need\n   more accurate ECN feedback than 'classic ECN' [RFC3168] to work\n \
    \  correctly in the case where more than one marking is received in any\n   one\
    \ RTT.\n   For an in-depth discussion of the application benefits of using ECN\n\
    \   (including with sufficiently granular feedback), see [ECN-BENEFITS].\n   ECN\
    \ is also defined for transport protocols beside TCP.  ECN feedback\n   as defined\
    \ for RTP/UDP [RFC6679] provides a very detailed level of\n   information, delivering\
    \ individual counters for all four ECN\n   codepoints as well as lost and duplicate\
    \ segments, but at the cost of\n   high signalling overhead.  ECN feedback for\
    \ SCTP has been proposed in\n   [SCTP-ECN].  This delivers a counter for the number\
    \ of ECN-capable\n   packets that were marked due to congestion (since the last\
    \ sender-\n   side window reduction), but it comes at the cost of increased\n\
    \   overhead.\n   Today, implementations of DCTCP already exist that alter TCP's\
    \ ECN\n   feedback protocol in proprietary ways (DCTCP was released in\n   Microsoft\
    \ Windows 8, and implementations exist for Linux and\n   FreeBSD).  However, the\
    \ changes DCTCP makes to TCP omit capability\n   negotiation, relying instead\
    \ on uniform configuration across all\n   hosts and network devices with ECN capability.\
    \  A primary motivation\n   for this document is to intervene before each proprietary\n\
    \   implementation invents its own non-interoperable handshake, which\n   could\
    \ lead to _de facto_ consumption of the few flags or codepoints\n   that remain\
    \ available for standardizing capability negotiation.\n   This document lists\
    \ requirements for a robust and interoperable TCP/\n   ECN feedback protocol that\
    \ is more accurate than classic ECN\n   [RFC3168] and that all implementations\
    \ of new TCP extensions, like\n   ConEx and/or DCTCP, can use.  While a new feedback\
    \ scheme should\n   still deliver as much information as classic ECN, this document\
    \ also\n   clarifies what has to be taken into consideration in addition.  Thus,\n\
    \   the listed requirements should be addressed in the specification of a\n  \
    \ more accurate ECN feedback scheme.  A few solutions have already been\n   proposed.\
    \  Section 5 demonstrates how to use the requirements to\n   compare them, by\
    \ briefly sketching their high-level design choices\n   and discussing the benefits\
    \ and drawbacks of each.\n   The scope of these requirements is not limited to\
    \ any specific\n   environment and is intended for general deployment over public\
    \ and\n   private IP networks.  Candidate solutions should try to adhere to all\n\
    \   these requirements, but, where this is not possible, they should\n   justify\
    \ the deviation.  The ordering of the requirements listed in\n   this document\
    \ is not to be taken as an order of importance, because\n   each requirement might\
    \ have different weight in different deployment\n   scenarios.\n   These requirements\
    \ are only concerned with the type and quality of\n   the ECN feedback signal.\
    \  The requirements do not stipulate how a TCP\n   sender might react to the improved\
    \ ECN signal.  The requirements also\n   do not imply that any modifications to\
    \ TCP senders or receivers are\n   obligatory.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   We use the following terminology from [RFC3168] and [RFC3540]:\n\
    \   The ECN field in the IP header:\n      Not-ECT: the not ECN-Capable Transport\
    \ codepoint,\n      CE:      the Congestion Experienced codepoint,\n      ECT(0):\
    \  the first ECN-Capable Transport codepoint, and\n      ECT(1):  the second ECN-Capable\
    \ Transport codepoint.\n   The ECN flags in the TCP header:\n      CWR:     the\
    \ Congestion Window Reduced flag,\n      ECE:     the ECN-Echo flag, and\n   \
    \   NS:      ECN Nonce Sum.\n   In this document, the ECN feedback scheme as specified\
    \ in [RFC3168]\n   is called 'classic ECN' and any new proposal is called a 'more\n\
    \   accurate ECN feedback' scheme.  A 'congestion mark' is defined as an\n   IP\
    \ packet where the CE codepoint is set.  A 'congestion episode'\n   refers to\
    \ one or more congestion marks that belong to the same\n   overload situation\
    \ in the network (usually during one RTT).  A TCP\n   segment with the acknowledgement\
    \ flag set is simply called an ACK.\n"
- title: 2.  Recap of Classic ECN and ECN Nonce in IP/TCP
  contents:
  - "2.  Recap of Classic ECN and ECN Nonce in IP/TCP\n   ECN requires two bits in\
    \ the IP header.  The ECN capability of a\n   packet is indicated when either\
    \ one of the two bits is set.  A\n   network node can set both bits simultaneously\
    \ when it experiences\n   congestion.  This leads to the four codepoints (Not-ECT,\
    \ ECT(0),\n   ECT(1), and CE) as listed above.\n   In the TCP header, the first\
    \ two bits in byte 14 are defined as ECN\n   feedback for each half-connection.\
    \  A TCP receiver signals the\n   reception of a congestion mark using the ECN-Echo\
    \ (ECE) flag in the\n   TCP header.  For reliability, the receiver continues to\
    \ set the ECE\n   flag on every ACK.  To enable the TCP receiver to determine\
    \ when to\n   stop setting the ECE flag, the sender sets the CWR flag upon\n \
    \  reception of an ECE feedback signal.  This always leads to a full RTT\n   of\
    \ ACKs with ECE set.  Thus, the receiver cannot signal back any\n   additional\
    \ CE markings arriving within the same RTT.\n   The ECN Nonce [RFC3540] is an\
    \ experimental addition to ECN that the\n   TCP sender can use to protect itself\
    \ against accidental or malicious\n   concealment of CE-marked or dropped packets.\
    \  This addition defines\n   the last bit of byte 13 in the TCP header as the\
    \ Nonce Sum (NS) flag.\n   The receiver maintains a nonce sum that counts the\
    \ occurrence of\n   ECT(1) packets and signals the least significant bit of this\
    \ sum on\n   the NS flag.  There are no known deployments of a TCP stack that\n\
    \   makes use of the ECN Nonce extension.\n       0   1   2   3   4   5   6  \
    \ 7   8   9  10  11  12  13  14  15\n     +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \     |               |           | N | C | E | U | A | P | R | S | F |\n    \
    \ | Header Length | Reserved  | S | W | C | R | C | S | S | Y | I |\n     |  \
    \             |           |   | R | E | G | K | H | T | N | N |\n     +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \     Figure 1: The (Post-ECN Nonce) Definition of the TCP Header Flags\n   An\
    \ alternative for a sender to assure feedback integrity has been\n   proposed\
    \ where the sender itself occasionally inserts a CE mark or\n   reorders packets,\
    \ and checks that the receiver feeds these back\n   faithfully [TEST-RCV].  This\
    \ alternative consumes no header bits or\n   codepoints, and it releases the ECT(1)\
    \ codepoint in the IP header and\n   the NS flag in the TCP header for other uses.\n"
- title: 3.  Use Cases
  contents:
  - "3.  Use Cases\n   The following two examples serve to show where existing mechanisms\n\
    \   would already benefit from more accurate ECN feedback information.\n   However,\
    \ as it is hard to predict the future, once a more accurate\n   ECN feedback mechanism\
    \ that adheres to the requirements stated in\n   this document is widely deployed,\
    \ it's very likely that additional\n   uses will be found.  The examples listed\
    \ below are in no particular\n   order.\n   ConEx is an experimental approach\
    \ that allows a sender to relay\n   congestion feedback provided by the receiver\
    \ into the network along\n   the forward data path.  ConEx information can be\
    \ used for traffic\n   management to limit traffic proportionate to the actual\
    \ congestion\n   being caused, rather than limiting traffic based on rate or volume\n\
    \   [RFC6789].  A ConEx sender uses selective acknowledgements (SACK)\n   [RFC2018]\
    \ for accurate feedback of loss signals, but until now TCP\n   has offered no\
    \ equivalent accurate feedback for ECN.\n   DCTCP offers very low and predictable\
    \ queuing delay.  DCTCP changes\n   the reaction to congestion of a TCP sender\
    \ and additionally requires\n   switches/routers to have ECN enabled and configured\
    \ with a low step\n   threshold and no signal smoothing, so it is currently only\
    \ used in\n   private networks, e.g., internal to data centers.  DCTCP was released\n\
    \   in Microsoft Windows 8, and implementations exist for Linux and\n   FreeBSD.\
    \  To retrieve sufficient congestion information, the\n   different DCTCP implementations\
    \ use a proprietary ECN feedback\n   protocol, but they omit capability negotiation.\
    \  Moreover, the\n   feedback protocol proposed in [DCTCP] only works if there\
    \ are no\n   losses at all, and otherwise it gets very confused (see Appendix\
    \ A).\n   Therefore, if a generic, more accurate ECN feedback scheme were\n  \
    \ available, it would solve two problems for DCTCP: i) the need for a\n   consistent\
    \ variant of DCTCP to be deployed network-wide and ii) the\n   inability to cope\
    \ with ACK loss.\n   Classic ECN-TCP would not benefit from more accurate ECN\
    \ feedback,\n   but it would not suffer either.  The same signal that is currently\n\
    \   conveyed with ECN following the specification given in [RFC3168]\n   would\
    \ be available.\n   The following scenarios should briefly show where accurate\
    \ ECN\n   feedback is needed or adds value:\n   A sender with standardized TCP\
    \ congestion control that supports\n   ConEx:\n      In this case, the ConEx mechanism\
    \ uses the extra information per\n      RTT to re-echo the precise congestion\
    \ information, but the\n      congestion control algorithm still ignores multiple\
    \ marks per RTT\n      [RFC5681].\n   A sender using DCTCP congestion control\
    \ without ConEx:\n      The congestion control algorithm uses the extra info per\
    \ RTT to\n      perform its decrease depending on the number of congestion marks.\n\
    \   A sender using DCTCP congestion control and supporting ConEx:\n      Both\
    \ the congestion control algorithm and ConEx use the more\n      accurate ECN\
    \ feedback mechanism.\n   As-yet-unspecified sender mechanisms:\n      The above\
    \ are two examples of more general interest in sender\n      mechanisms that respond\
    \ to the extent of congestion feedback, not\n      just its existence.  It will\
    \ greatly simplify incremental\n      deployment if the sender can unilaterally\
    \ deploy new behaviours\n      and rely on the presence of generic receivers that\
    \ have already\n      implemented more accurate feedback.\n   A TCP sender using\
    \ congestion control as specified in RFC 5681\n   without ConEx:\n      No accurate\
    \ feedback is necessary here.  The congestion control\n      algorithm still reacts\
    \ to only one signal per RTT.  But, it is\n      best to feed back all the information\
    \ the receiver gets, whether\n      or not the sender uses it -- at least as long\
    \ as overhead is low\n      or zero.\n   Using CE for checking integrity:\n  \
    \    If a more accurate ECN feedback scheme feeds all occurrences of CE\n    \
    \  marks back, a sender could perform integrity checking by\n      occasionally\
    \ injecting CE marks itself.  Specifically, a sender\n      can send packets that\
    \ it randomly marks with CE (at low\n      frequency), then check if feedback\
    \ is received for these packets.\n      The congestion notification feedback for\
    \ these self-injected\n      markings would not require a congestion control reaction\n\
    \      [TEST-RCV].\n"
- title: 4.  Requirements
  contents:
  - "4.  Requirements\n   The requirements of the accurate ECN feedback protocol are\
    \ to have\n   fairly accurate (not necessarily perfect), timely, and protected\n\
    \   signalling.  This leads to the following requirements, which should\n   be\
    \ discussed for any proposed more accurate ECN feedback scheme:\n   Resilience\n\
    \      The ECN feedback signal is carried within the ACK.  Pure TCP ACKs\n   \
    \   can get lost without recovery (not just due to congestion but also\n     \
    \ due to deliberate ACK thinning).  Moreover, delayed ACKs are\n      commonly\
    \ used with TCP.  Typically, an ACK is triggered after two\n      data segments\
    \ (or more, e.g., due to receive segment coalescing,\n      ACK compression, ACK\
    \ congestion control [RFC5690], or other\n      phenomena; see [RFC3449]).  In\
    \ a high-congestion situation where\n      most of the packets are marked with\
    \ CE, an accurate feedback\n      mechanism should still be able to signal sufficient\
    \ congestion\n      information.  Thus, the accurate ECN feedback extension has\
    \ to\n      take delayed ACKs and ACK loss into account.  Also, a more\n     \
    \ accurate feedback protocol should still provide more accurate\n      feedback\
    \ than classic ECN when delayed ACKs cover more than two\n      segments, or when\
    \ a thin stream disables Nagle's algorithm\n      [RFC896].  Finally, the feedback\
    \ mechanism should not be impacted\n      by reordering of ACKs, even when the\
    \ ACKed sequence number does\n      not increase.\n   Timeliness\n      A CE mark\
    \ can be induced by the sending host, or more commonly a\n      network node on\
    \ the transmission path, and is then echoed by the\n      receiver in the TCP\
    \ ACK.  Thus, when this information arrives at\n      the sender, it is naturally\
    \ already about one RTT old.  With a\n      sufficient ACK rate, a further delay\
    \ of a small number of packets\n      can be tolerated.  However, this information\
    \ will become stale\n      with large delays, given the dynamic nature of networks.\
    \  TCP\n      congestion control (which itself partly introduces these dynamics)\n\
    \      operates on a time scale of one RTT.  Thus, to be timely,\n      congestion\
    \ feedback information should be delivered within about\n      one RTT.\n   Integrity\n\
    \      The integrity of the feedback in a more accurate ECN feedback\n      scheme\
    \ should be assured, at least as well as the ECN Nonce.\n      Alternatively,\
    \ it should at least be possible to give strong\n      incentives for the receiver\
    \ and network nodes to cooperate\n      honestly.\n      Given there are known\
    \ problems with ECN Nonce deployment, this\n      document only requires that\
    \ the integrity of the more accurate ECN\n      feedback can be assured; it does\
    \ not require that the ECN Nonce\n      mechanism is employed to achieve this.\
    \  Indeed, if integrity could\n      be provided in another manner, a more accurate\
    \ ECN feedback\n      protocol might repurpose the nonce sum (NS) flag in the\
    \ TCP\n      header.\n      If the more accurate ECN feedback scheme provides\
    \ sufficient\n      information, the integrity check could be performed by, e.g.,\n\
    \      deterministically setting the CE in the sender and monitoring the\n   \
    \   respective feedback (similar to ECT(1) and the ECN Nonce sum).\n      Whether\
    \ a sender should enforce when it detects wrong feedback\n      information, and\
    \ what kind of enforcement it should apply, are\n      policy issues that need\
    \ not be specified as part of the more\n      accurate ECN feedback signal scheme\
    \ itself, but rather when\n      specifying an update to core TCP mechanisms like\
    \ congestion\n      control that make use of the more accurate ECN signal.\n \
    \  Accuracy\n      Classic ECN feeds back one congestion notification per RTT;\
    \ this\n      is sufficient for classic TCP congestion control, which reduces\n\
    \      the sending rate at most once per RTT.  Thus, the more accurate\n     \
    \ ECN feedback scheme should ensure that, if a congestion episode\n      occurs,\
    \ at least one congestion notification is echoed and\n      received per RTT as\
    \ classic ECN would do.  Of course, the goal of\n      a more accurate ECN extension\
    \ is to reconstruct the number of CE\n      markings more accurately.  In the\
    \ best case, the new scheme should\n      even allow reconstruction of the exact\
    \ number of payload bytes\n      that a CE-marked packet was carrying.  However,\
    \ it is accepted\n      that it may be too complex for a sender to get the exact\
    \ number of\n      congestion markings or marked bytes in all situations.  Ideally,\n\
    \      the feedback scheme should preserve the order in which any (of the\n  \
    \    four) ECN signals were received.  And, ideally, it would even be\n      possible\
    \ for the sender to determine which of the packets covered\n      by one delayed\
    \ ACK were congestion marked, e.g., if the flow\n      consists of packets of\
    \ different sizes, or to allow for future\n      protocols where the order of\
    \ the markings may be important.\n      In the best case, a sender that sees more\
    \ accurate ECN feedback\n      information would be able to reconstruct the occurrence\
    \ of any of\n      the four codepoints (Not-ECT, CE, ECT(0), ECT(1)).  However,\n\
    \      assuming the sender marks all data packets as ECN-capable and uses\n  \
    \    a default setting of ECT(0) (as with [RFC3168]), solely feeding\n      back\
    \ the occurrence of CE and ECT(1) might be sufficient.  Because\n      the sender\
    \ can keep account of the transmitted segments with any\n      of the three ECN\
    \ codepoints, conveying any two of these back to\n      the sender is sufficient\
    \ for it to reconstruct the third as\n      observed by the receiver.  Thus, a\
    \ more accurate ECN feedback\n      scheme should at least provide information\
    \ on two of these\n      signals, e.g., CE and ECT(1).\n      If a more accurate\
    \ ECN scheme can reliably deliver feedback in\n      most but not all circumstances,\
    \ ideally the scheme should at least\n      not introduce bias.  In other words,\
    \ undetected loss of some ACKs\n      should be as likely to increase as decrease\
    \ the sender's estimate\n      of the probability of ECN marking.\n   Complexity\n\
    \      Implementation should be as simple as possible, and only a minimum\n  \
    \    of additional state information should be needed.  This will\n      enable\
    \ more accurate ECN feedback to be used as the default\n      feedback mechanism,\
    \ even if only one ECN feedback signal per RTT\n      is needed.\n   Overhead\n\
    \      A more accurate ECN feedback signal should limit the additional\n     \
    \ network load, because ECN feedback is ultimately not critical\n      information\
    \ (in the worst case, loss will still be available as a\n      congestion signal\
    \ of last resort).  As feedback information has to\n      be provided frequently\
    \ and in a timely fashion, potentially all or\n      a large fraction of TCP acknowledgements\
    \ might carry this\n      information.  Ideally, no additional segments should\
    \ be exchanged\n      compared to a TCP session as specified in RFC 3168, and\
    \ the\n      overhead in each segment should be minimized.\n   Backward and forward\
    \ compatibility\n      Given more accurate ECN feedback will involve a change\
    \ to the TCP\n      protocol, it should be negotiated between the two TCP endpoints.\n\
    \      If either end does not support the more accurate feedback, they\n     \
    \ should both be able to fall back to classic ECN feedback.\n      A more accurate\
    \ ECN feedback extension should aim to traverse most\n      middleboxes, including\
    \ firewalls and Network Address Translators\n      (NATs).  Further, a feedback\
    \ mechanism should provide a method to\n      fall back to classic ECN signalling\
    \ if the new signal is\n      suppressed by certain middleboxes.\n      In order\
    \ to avoid a fork in the TCP protocol specifications, if\n      experiments with\
    \ the new ECN feedback protocol are successful, the\n      intention is to eventually\
    \ update RFC 3168 for any TCP/ECN sender,\n      not just for ConEx or DCTCP senders.\
    \  Then, future senders will be\n      able to unilaterally deploy new behaviours\
    \ that exploit the\n      existence of more accurate ECN feedback in receivers\
    \ (forward\n      compatibility).  Conversely, even if another sender only needs\
    \ one\n      ECN feedback signal per RTT, it should be able to use more\n    \
    \  accurate ECN feedback and simply ignore the excess information.\n   Furthermore,\
    \ the receiver should not make assumptions about the\n   mechanism that was used\
    \ to set the markings nor about any\n   interpretation or reaction to the congestion\
    \ signal.  The receiver\n   only needs to faithfully reflect congestion information\
    \ back to the\n   sender.\n"
- title: 5.  Design Approaches
  contents:
  - "5.  Design Approaches\n   This section introduces some possible design approaches\
    \ for TCP ECN\n   feedback.  The purpose of this section is to give examples of\
    \ how\n   trade-offs might be needed between the requirements, as input to\n \
    \  future IETF work to specify a protocol.  The order is not\n   significant,\
    \ and there is no intention to endorse any particular\n   approach.\n   All approaches\
    \ presented below (and proposed so far) are able to\n   provide accurate ECN feedback\
    \ information as long as no ACK loss\n   occurs and the congestion rate is reasonable.\
    \  In the case of a high\n   ACK loss rate or very high congestion (CE-marking)\
    \ rate, the proposed\n   schemes have different resilience characteristics depending\
    \ on the\n   number of bits used for the encoding.  While classic ECN provides\n\
    \   reliable (but inaccurate) feedback of a maximum of one congestion\n   signal\
    \ per RTT, the proposed schemes do not implement an explicit\n   acknowledgement\
    \ mechanism for the feedback (as, e.g., the ECE/CWR\n   exchange of [RFC3168]).\n"
- title: 5.1.  Redefinition of ECN/NS Header Bits
  contents:
  - "5.1.  Redefinition of ECN/NS Header Bits\n   Schemes in this category can additionally\
    \ use the NS bit for\n   capability negotiation during the TCP handshake exchange.\
    \  Thus a\n   more accurate ECN could be negotiated without changing the classic\n\
    \   ECN negotiation and thus being backwards compatible.\n   Schemes in this category\
    \ can simply redefine the ECN header flags,\n   ECE and CWR, to encode the occurrence\
    \ of a CE marking at the\n   receiver.  This approach provides very limited resilience\
    \ against\n   loss of ACK, particularly pure ACKs (no payload and therefore\n\
    \   delivered unreliably).\n   A couple of schemes have been proposed so far:\n\
    \   o  A naive 1-bit scheme that sends one ECE for each CE received could\n  \
    \    use CWR to increase robustness against ACK loss by introducing\n      redundant\
    \ information on the next ACK, but this is still\n      vulnerable to ACK loss.\n\
    \   o  The scheme defined for DCTCP [DCTCP], which toggles the ECE\n      feedback\
    \ on an immediate ACK whenever the CE marking changes, and\n      otherwise feeds\
    \ back delayed ACKs with the ECE value unchanged.\n      Appendix A demonstrates\
    \ that this scheme is still ambiguous to the\n      sender if the ACKs are pure\
    \ ACKs, and if some may have been lost.\n   Alternatively, the receiver uses the\
    \ three ECN/NS header flags, ECE,\n   CWR, and NS, to represent a counter that\
    \ signals the accumulated\n   number of CE markings it has received.  Resilience\
    \ against loss is\n   better than the flag-based schemes but may not suffice in\
    \ the\n   presence of extended ACK loss that otherwise would not affect the TCP\n\
    \   sender's performance.\n   A number of coding schemes have been proposed so\
    \ far in this\n   category:\n   o  A 3-bit counter scheme continuously feeds back\
    \ the three least\n      significant bits of a CE counter;\n   o  A scheme that\
    \ defines a standardized lookup table to map the eight\n      codepoints onto\
    \ either a CE counter or an ECT(1) counter.\n   These proposed schemes provide\
    \ accumulated information on CE marking\n   feedback, similar to the number of\
    \ acknowledged bytes in the TCP\n   header.  Due to the limited number of bits,\
    \ the ECN feedback\n   information will wrap much more often than the acknowledgement\
    \ field.\n   Thus, feedback information could be lost due to a relatively small\n\
    \   sequence of pure-ACK losses.  Resilience could be increased by\n   introducing\
    \ redundancy, e.g., send each counter increase two or more\n   times.  Of course,\
    \ any of these additional mechanisms will increase\n   the complexity.  If the\
    \ congestion rate is greater than the ACK rate\n   (multiplied by the number of\
    \ congestion marks that can be signaled\n   per ACK), the congestion information\
    \ cannot correctly be fed back.\n   Covering the worst case (where every packet\
    \ is CE marked) can\n   potentially be realized by dynamically adapting the ACK\
    \ rate and\n   redundancy.  This again increases complexity and perhaps the\n\
    \   signalling overhead as well.  Schemes that do not repurpose the ECN\n   NS\
    \ bit could still support the ECN Nonce.\n"
- title: 5.2.  Using Other Header Bits
  contents:
  - "5.2.  Using Other Header Bits\n   As seen in Figure 1, there are currently three\
    \ unused flags in the\n   TCP header.  The proposed 3-bit counter or codepoint\
    \ schemes could be\n   extended by one or more bits to add higher resilience against\
    \ ACK\n   loss.  The relative gain would be exponentially higher resilience\n\
    \   against ACK loss, while the respective drawbacks would remain\n   identical.\n\
    \   Alternatively, a new method could standardize the use of the bits in\n   the\
    \ Urgent Pointer field (see [RFC6093]) to signal more bits of its\n   congestion\
    \ signal counter, but only whenever the Urgent Flag is not\n   set.  As this is\
    \ often the case, resilience could be increased\n   without additional header\
    \ overhead.\n   Any proposal to use such bits would need to check the likelihood\
    \ that\n   some middleboxes might discard or 'normalize' the currently unused\n\
    \   flag bits or a non-zero Urgent Pointer when the Urgent Flag is\n   cleared.\
    \  If during experimentation certain bits have been proven to\n   be usable, the\
    \ assignment of any of these bits would then require an\n   IETF standards action.\n"
- title: 5.3.  Using a TCP Option
  contents:
  - "5.3.  Using a TCP Option\n   Alternatively, a new TCP option could be introduced,\
    \ to help maintain\n   the accuracy and integrity of ECN feedback between receiver\
    \ and\n   sender.  Such an option could provide higher resilience and even more\n\
    \   information, e.g., as much as is provided by a proposal for SCTP that\n  \
    \ counts the number of CE marked packet [SCTP-ECN] since the last CWR\n   was\
    \ observed, or by ECN for RTP/UDP [RFC6679].  The latter explicitly\n   provides\
    \ the total number of packets during a connection where the IP\n   ECN field is\
    \ set to ECT(0), ECT(1), CE, or Not-ECT, as well as the\n   number of lost packets.\
    \  However, deploying new TCP options has its\n   own challenges.  Moreover, to\
    \ actually achieve high resilience, this\n   option would need to be carried by\
    \ most or all ACKs as the receiver\n   cannot know if and when ACKs may be dropped.\
    \  Thus, this approach\n   would introduce considerable signalling overhead even\
    \ though ECN\n   feedback is not extremely critical information (in the worst\
    \ case,\n   loss will still be available to provide a strong congestion feedback\n\
    \   signal).  Nevertheless, such a TCP option could be used in addition\n   to\
    \ a more accurate ECN feedback scheme in the TCP header or in\n   addition to\
    \ classic ECN, only when needed and when space is\n   available.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   ECN feedback information must only be used if\
    \ the other information\n   contained in a received TCP segment indicates that\
    \ the congestion was\n   genuinely part of the flow and not spoofed.  That is,\
    \ the normal TCP\n   acceptance techniques have to be used to verify that the\
    \ segment is\n   part of the flow before returning any contained ECN information,\
    \ and,\n   similarly, ECN feedback is only accepted on valid ACKs.\n   Given ECN\
    \ feedback is used as input for congestion control, the\n   respective algorithm\
    \ would not react appropriately if ECN feedback\n   were lost and the resilience\
    \ mechanism to recover it was inadequate.\n   This resilience requirement is articulated\
    \ in Section 4.  However, it\n   should be noted that ECN feedback is not the\
    \ last resort against\n   congestion collapse, because if there is insufficient\
    \ response to\n   ECN, loss will ensue, and TCP will still react appropriately\
    \ to loss.\n   A receiver could suppress ECN feedback information leading to its\n\
    \   connections consuming excess sender or network resources.  This\n   problem\
    \ is similar to that seen with the classic ECN feedback scheme\n   and should\
    \ be addressed by integrity checking as required in\n   Section 4.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC3168]  Ramakrishnan, K., Floyd, S., and D.\
    \ Black, \"The Addition\n              of Explicit Congestion Notification (ECN)\
    \ to IP\",\n              RFC 3168, DOI 10.17487/RFC3168, September 2001,\n  \
    \            <http://www.rfc-editor.org/info/rfc3168>.\n   [RFC3540]  Spring,\
    \ N., Wetherall, D., and D. Ely, \"Robust Explicit\n              Congestion Notification\
    \ (ECN) Signaling with Nonces\",\n              RFC 3540, DOI 10.17487/RFC3540,\
    \ June 2003,\n              <http://www.rfc-editor.org/info/rfc3540>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [DCTCP]    Bensley, S., Eggert, L., and D. Thaler,\
    \ \"Microsoft's\n              Datacenter TCP (DCTCP): TCP Congestion Control\
    \ for\n              Datacenters\", Work in Progress,\n              draft-bensley-tcpm-dctcp-05,\
    \ July 2015.\n   [ECN-BENEFITS]\n              Fairhurst, G. and M. Welzl, \"\
    The Benefits of using\n              Explicit Congestion Notification (ECN)\"\
    , Work in Progress\n              draft-ietf-aqm-ecn-benefits-06, July 2015.\n\
    \   [RFC896]   Nagle, J., \"Congestion Control in IP/TCP Internetworks\",\n  \
    \            RFC 896, DOI 10.17487/RFC0896, January 1984,\n              <http://www.rfc-editor.org/info/rfc896>.\n\
    \   [RFC2018]  Mathis, M., Mahdavi, J., Floyd, S., and A. Romanow, \"TCP\n   \
    \           Selective Acknowledgment Options\", RFC 2018,\n              DOI 10.17487/RFC2018,\
    \ October 1996,\n              <http://www.rfc-editor.org/info/rfc2018>.\n   [RFC3449]\
    \  Balakrishnan, H., Padmanabhan, V., Fairhurst, G., and M.\n              Sooriyabandara,\
    \ \"TCP Performance Implications of Network\n              Path Asymmetry\", BCP\
    \ 69, RFC 3449, DOI 10.17487/RFC3449,\n              December 2002, <http://www.rfc-editor.org/info/rfc3449>.\n\
    \   [RFC5681]  Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion\n    \
    \          Control\", RFC 5681, DOI 10.17487/RFC5681, September 2009,\n      \
    \        <http://www.rfc-editor.org/info/rfc5681>.\n   [RFC5690]  Floyd, S., Arcia,\
    \ A., Ros, D., and J. Iyengar, \"Adding\n              Acknowledgement Congestion\
    \ Control to TCP\", RFC 5690,\n              DOI 10.17487/RFC5690, February 2010,\n\
    \              <http://www.rfc-editor.org/info/rfc5690>.\n   [RFC6093]  Gont,\
    \ F. and A. Yourtchenko, \"On the Implementation of the\n              TCP Urgent\
    \ Mechanism\", RFC 6093, DOI 10.17487/RFC6093,\n              January 2011, <http://www.rfc-editor.org/info/rfc6093>.\n\
    \   [RFC6679]  Westerlund, M., Johansson, I., Perkins, C., O'Hanlon, P.,\n   \
    \           and K. Carlberg, \"Explicit Congestion Notification (ECN)\n      \
    \        for RTP over UDP\", RFC 6679, DOI 10.17487/RFC6679, August\n        \
    \      2012, <http://www.rfc-editor.org/info/rfc6679>.\n   [RFC6789]  Briscoe,\
    \ B., Ed., Woundy, R., Ed., and A. Cooper, Ed.,\n              \"Congestion Exposure\
    \ (ConEx) Concepts and Use Cases\",\n              RFC 6789, DOI 10.17487/RFC6789,\
    \ December 2012,\n              <http://www.rfc-editor.org/info/rfc6789>.\n  \
    \ [SCTP-ECN] Stewart, R., Tuexen, M., and X. Dong, \"ECN for Stream\n        \
    \      Control Transmission Protocol (SCTP)\", Work in Progress,\n           \
    \   draft-stewart-tsvwg-sctpecn-05, January 2014.\n   [TEST-RCV] Moncaster, T.,\
    \ Briscoe, B., and A. Jacquet, \"A TCP Test to\n              Allow Senders to\
    \ Identify Receiver Non-Compliance\", Work\n              in Progress, draft-moncaster-tcpm-rcv-cheat-03,\
    \ July 2014.\n"
- title: Appendix A.  Ambiguity of the More Accurate ECN Feedback in DCTCP
  contents:
  - "Appendix A.  Ambiguity of the More Accurate ECN Feedback in DCTCP\n   As defined\
    \ in [DCTCP], a DCTCP receiver feeds back ECE=0 on delayed\n   ACKs as long as\
    \ CE remains 0, and also immediately sends an ACK with\n   ECE=0 when CE transitions\
    \ to 1.  Similarly, it continually feeds back\n   ECE=1 on delayed ACKs while\
    \ CE remains 1 and immediately feeds back\n   ECE=1 when CE transitions to 0.\
    \  A sender can unambiguously decode\n   this scheme if there is never any ACK\
    \ loss, and the sender assumes\n   there will never be any ACK loss.\n   The following\
    \ two examples show that the feedback sequence becomes\n   highly ambiguous to\
    \ the sender if either of these conditions is\n   broken.  Below, '0' represents\
    \ ECE=0, '1' represents ECE=1, and '.'\n   represents a gap of one segment between\
    \ delayed ACKs.  Now imagine\n   that the sender receives the following sequence\
    \ of feedback on three\n   pure ACKs:\n      0.0.0\n   When the receiver sent\
    \ this sequence, it could have been any of the\n   following four sequences:\n\
    \   a.  0.0.0 (0 x CE)\n   b.  010.0 (1 x CE)\n   c.  0.010 (1 x CE)\n   d.  01010\
    \ (2 x CE)\n   where any of the 1s represent a possible pure ACK carrying ECE\n\
    \   feedback that could have been lost.  If the sender guesses (a), it\n   might\
    \ be correct, or it might miss 1 or 2 congestion marks over 5\n   packets.  Therefore,\
    \ when confronted with this simple sequence (that\n   is not contrived), a sender\
    \ can guess that congestion might have been\n   0%, 20%, or 40%, but it doesn't\
    \ know which.\n   Sequences with a longer gap (e.g., 0...0.0) become far more\n\
    \   ambiguous.  It helps a little if the sender knows the distance the\n   receiver\
    \ uses between delayed ACKs, and it helps a lot if the\n   distance is 1, i.e.,\
    \ no delayed ACKs.  However, even without delayed\n   ACKs there will still be\
    \ ambiguity whenever there are pure ACK\n   losses.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to Gorry Fairhurst for his review and for ideas on\
    \ CE-based\n   integrity checking and to Mohammad Alizadeh for suggesting the\
    \ need\n   to avoid bias.\n   Bob Briscoe was partly funded by the European Community\
    \ under its\n   Seventh Framework Programme through the Reducing Internet Transport\n\
    \   Latency (RITE) project (ICT-317700) and through the Trilogy 2 project\n  \
    \ (ICT-317756).  The views expressed here are solely those of the\n   authors,\
    \ in the context of the mentioned funding projects.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mirja Kuehlewind (editor)\n   ETH Zurich\n   Gloriastrasse\
    \ 35\n   Zurich  8092\n   Switzerland\n   Email: mirja.kuehlewind@tik.ee.ethz.ch\n\
    \   Richard Scheffenegger\n   NetApp, Inc.\n   Am Euro Platz 2\n   Vienna  1120\n\
    \   Austria\n   Phone: +43 1 3676811 3146\n   Email: rs@netapp.com\n   Bob Briscoe\n\
    \   BT\n   B54/77, Adastral Park\n   Martlesham Heath\n   Ipswich  IP5 3RE\n \
    \  United Kingdom\n   Phone: +44 1473 645196\n   Email: ietf@bobbriscoe.net\n\
    \   URI:   http://bobbriscoe.net/\n"
