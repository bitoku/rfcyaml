- title: __initial_text__
  contents:
  - '                 The Secure HyperText Transfer Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes a syntax for securing messages sent using the\n\
    \   Hypertext Transfer Protocol (HTTP), which forms the basis for the\n   World\
    \ Wide Web. Secure HTTP (S-HTTP) provides independently\n   applicable security\
    \ services for transaction confidentiality,\n   authenticity/integrity and non-repudiability\
    \ of origin.\n   The protocol emphasizes maximum flexibility in choice of key\n\
    \   management mechanisms, security policies and cryptographic algorithms\n  \
    \ by supporting option negotiation between parties for each\n   transaction.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   2.6.1. Content-Privacy-Domain: CMS ...............................13\n\
    \   2.6.2. Content-Privacy-Domain: MOSS ..............................14\n   2.6.3.\
    \ Permitted HTTP headers ....................................14\n   2.6.3.2. Host\
    \ ....................................................15\n   2.6.3.3. Connection\
    \ ..............................................15\n   3. Cryptographic Parameters\
    \ ......................................15\n   3.1. Options Headers .............................................15\n\
    \   3.2. Negotiation Options .........................................16\n   3.2.1.\
    \ Negotiation Overview ......................................16\n   3.2.2. Negotiation\
    \ Option Format .................................16\n   3.2.3. Parametrization\
    \ for Variable-length Key Ciphers ...........18\n   3.2.4. Negotiation Syntax\
    \ ........................................18\n   3.3. Non-Negotiation Headers\
    \ .....................................23\n   3.3.1. Encryption-Identity .......................................23\n\
    \   3.3.2. Certificate-Info ..........................................23\n   3.3.3.\
    \ Key-Assign ................................................24\n   3.3.4. Nonces\
    \ ....................................................25\n   3.4. Grouping Headers\
    \ With SHTTP-Cryptopts .......................26\n   3.4.1. SHTTP-Cryptopts ...........................................26\n\
    \   4. New Header Lines for HTTP .....................................26\n   4.1.\
    \ Security-Scheme .............................................26\n   5. (Retriable)\
    \ Server Status Error Reports .......................27\n   5.1. Retry for Option\
    \ (Re)Negotiation ............................27\n   5.2. Specific Retry Behavior\
    \ .....................................28\n   5.3. Limitations On Automatic Retries\
    \ ............................29\n   6. Other Issues ..................................................30\n\
    \   6.1. Compatibility of Servers with Old Clients ...................30\n   6.2.\
    \ URL Protocol Type ...........................................30\n   6.3. Browser\
    \ Presentation ........................................31\n   7. Implementation\
    \ Notes ..........................................32\n   7.1. Preenhanced Data\
    \ ............................................32\n   7.2. Note:Proxy Interaction\
    \ ......................................34\n   7.2.1. Client-Proxy Authentication\
    \ ...............................34\n   8. Implementation Recommendations and\
    \ Requirements ...............34\n   9. Protocol Syntax Summary .......................................35\n\
    \   10. An Extended Example ..........................................36\n   Appendix:\
    \ A Review of CMS ........................................40\n   Bibliography\
    \ and References ......................................41\n   Security Considerations\
    \ ..........................................43\n   Authors' Addresses ...............................................44\n\
    \   Full Copyright Statement..........................................45\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The World Wide Web (WWW) is a distributed hypermedia system\
    \ which has\n   gained widespread acceptance among Internet users.  Although WWW\n\
    \   browsers support other, preexisting Internet application protocols,\n   the\
    \ native and primary protocol used between WWW clients and servers\n   is the\
    \ HyperText Transfer Protocol (HTTP) [RFC-2616].  The ease of\n   use of the Web\
    \ has prompted its widespread employment as a\n   client/server architecture for\
    \ many applications.  Many such\n   applications require the client and server\
    \ to be able to authenticate\n   each other and exchange sensitive information\
    \ confidentially. The\n   original HTTP specification had only modest support\
    \ for the\n   cryptographic mechanisms appropriate for such transactions.\n  \
    \ Secure HTTP (S-HTTP) provides secure communication mechanisms between\n   an\
    \ HTTP client-server pair in order to enable spontaneous commercial\n   transactions\
    \ for a wide range of applications.  Our design intent is\n   to provide a flexible\
    \ protocol that supports multiple orthogonal\n   operation modes, key management\
    \ mechanisms, trust models,\n   cryptographic algorithms and encapsulation formats\
    \ through option\n   negotiation between parties for each transaction.\n"
- title: 1.1.  Summary of Features
  contents:
  - "1.1.  Summary of Features\n   Secure HTTP is a secure message-oriented communications\
    \ protocol\n   designed for use in conjunction with HTTP. It is designed to coexist\n\
    \   with HTTP's messaging model and to be easily integrated with HTTP\n   applications.\n\
    \   Secure HTTP provides a variety of security mechanisms to HTTP clients\n  \
    \ and servers, providing the security service options appropriate to\n   the wide\
    \ range of potential end uses possible for the World-Wide Web.\n   The protocol\
    \ provides symmetric capabilities to both client and\n   server (in that equal\
    \ treatment is given to both requests and\n   replies, as well as for the preferences\
    \ of both parties) while\n   preserving the transaction model and implementation\
    \ characteristics\n   of HTTP.\n   Several cryptographic message format standards\
    \ may be incorporated\n   into S-HTTP clients and servers, particularly, but in\
    \ principle not\n   limited to, [CMS] and [MOSS]. S-HTTP supports interoperation\
    \ among a\n   variety of implementations, and is compatible with HTTP.  S-HTTP\n\
    \   aware clients can communicate with S-HTTP oblivious servers and\n   vice-versa,\
    \ although such transactions obviously would not use S-HTTP\n   security features.\n\
    \   S-HTTP does not require client-side public key certificates (or\n   public\
    \ keys), as it supports symmetric key-only operation modes.\n   This is significant\
    \ because it means that spontaneous private\n   transactions can occur without\
    \ requiring individual users to have\n   an established public key.  While S-HTTP\
    \ is able to take advantage\n   of ubiquitous certification infrastructures, its\
    \ deployment does\n   not require it.\n   S-HTTP supports end-to-end secure transactions,\
    \ in contrast with the\n   original HTTP authorization mechanisms which require\
    \ the client to\n   attempt access and be denied before the security mechanism\
    \ is\n   employed.  Clients may be \"primed\" to initiate a secure transaction\n\
    \   (typically using information supplied in message headers); this may\n   be\
    \ used to support encryption of fill-out forms, for example. With\n   S-HTTP,\
    \ no sensitive data need ever be sent over the network in the\n   clear.\n   S-HTTP\
    \ provides full flexibility of cryptographic algorithms, modes\n   and parameters.\
    \ Option negotiation is used to allow clients and\n   servers to agree on transaction\
    \ modes (e.g., should the request be\n   signed or encrypted or both -- similarly\
    \ for the reply?);\n   cryptographic algorithms (RSA vs. DSA for signing, DES\
    \ vs.\n   RC2 for encrypting, etc.); and certificate selection\n   (please sign\
    \ with your \"Block-buster Video certificate\").\n   S-HTTP attempts to avoid\
    \ presuming a particular trust model, although\n   its designers admit to a conscious\
    \ effort to facilitate\n   multiply-rooted hierarchical trust, and anticipate\
    \ that principals may\n   have many public key certificates.\n   S-HTTP differs\
    \ from Digest-Authentication, described in [RFC-2617] in\n   that it provides\
    \ support for public key cryptography and consequently\n   digital signature capability,\
    \ as well as providing confidentiality.\n"
- title: 1.2.  Changes
  contents:
  - "1.2.  Changes\n   This document describes S-HTTP/1.4. It differs from the previous\n\
    \   memo in that it differs from the previous memo in its support of\n   the Cryptographic\
    \ Message Syntax (CMS) [CMS], a successor to PKCS-7;\n   and hence now supports\
    \ the Diffie-Hellman and the (NIST) Digital\n   Signature Standard cryptosystems.\
    \ CMS used in RSA mode is bits on the\n   wire compatible with PKCS-7.\n"
- title: 1.3.  Processing Model
  contents:
  - '1.3.  Processing Model

    '
- title: 1.3.1.  Message Preparation
  contents:
  - "1.3.1.  Message Preparation\n   The creation of an S-HTTP message can be thought\
    \ of as a a function\n   with three inputs:\n      1. The cleartext message. This\
    \ is either an HTTP message\n      or some other data object. Note that since\
    \ the cleartext message\n      is carried transparently, headers and all, any\
    \ version of HTTP\n      can be carried within an S-HTTP wrapper.\n      2. The\
    \ receiver's cryptographic preferences and keying material.\n      This is either\
    \ explicitly specified by the receiver or subject\n      to some default set of\
    \ preferences.\n      3. The sender's cryptographic preferences and keying material.\n\
    \      This input to the function can be thought of as implicit\n      since it\
    \ exists only in the memory of the sender.\n   In order to create an S-HTTP message,\
    \ then, the sender integrates the\n   sender's preferences with the receiver's\
    \ preferences. The result of\n   this is a list of cryptographic enhancements\
    \ to be applied and keying\n   material to be used to apply them. This may require\
    \ some user\n   intervention. For instance, there might be multiple keys available\
    \ to\n   sign the message. (See Section 3.2.4.9.3 for more on this topic.)\n \
    \  Using this data, the sender applies the enhancements to the message\n   clear-text\
    \ to create the S-HTTP message.\n   The processing steps required to transform\
    \ the cleartext message into\n   the S-HTTP message are described in Sections\
    \ 2 and 3. The processing\n   steps required to merge the sender's and receiver's\
    \ preferences are\n   described in Sections 3.2.\n"
- title: 1.3.2.  Message Recovery
  contents:
  - "1.3.2.  Message Recovery\n   The recovery of an S-HTTP message can be thought\
    \ of as a function of\n   four distinct inputs:\n      1. The S-HTTP message.\n\
    \      2. The receiver's stated cryptographic preferences and keying\n      material.\
    \ The receiver has the opportunity to remember what\n      cryptographic preferences\
    \ it provided in order for this\n      document to be dereferenced.\n      3.\
    \ The receiver's current cryptographic preferences and\n      keying material.\n\
    \      4. The sender's previously stated cryptographic options.\n      The sender\
    \ may have stated that he would perform certain\n      cryptographic operations\
    \ in this message. (Again, see\n      sections 4 and 5 for details on how to do\
    \ this.)\n   In order to recover an S-HTTP message, the receiver needs to read\
    \ the\n   headers to discover which cryptographic transformations were\n   performed\
    \ on the message, then remove the transformations using some\n   combination of\
    \ the sender's and receiver's keying material, while\n   taking note of which\
    \ enhancements were applied.\n   The receiver may also choose to verify that the\
    \ applied enhancements\n   match both the enhancements that the sender said he\
    \ would apply\n   (input 4 above) and that the receiver requested (input 2 above)\
    \ as\n   well as the current preferences to see if the S-HTTP message was\n  \
    \ appropriately transformed. This process may require interaction with\n   the\
    \ user to verify that the enhancements are acceptable to the user.\n   (See Section\
    \ 6.4 for more on this topic.)\n"
- title: 1.4.  Modes of Operation
  contents:
  - "1.4.  Modes of Operation\n   Message protection may be provided on three orthogonal\
    \ axes:\n   signature, authentication, and encryption. Any message may be signed,\n\
    \   authenticated, encrypted, or any combination of these (including no\n   protection).\n\
    \   Multiple key management mechanisms are supported, including\n   password-style\
    \ manually shared secrets and public-key key exchange.\n   In particular, provision\
    \ has been made for prearranged (in an earlier\n   transaction or out of band)\
    \ symmetric session keys in order to send\n   confidential messages to those who\
    \ have no public key pair.\n   Additionally, a challenge-response (\"nonce\")\
    \ mechanism is provided to\n   allow parties to assure themselves of transaction\
    \ freshness.\n"
- title: 1.4.1.  Signature
  contents:
  - "1.4.1.  Signature\n   If the digital signature enhancement is applied, an appropriate\n\
    \   certificate may either be attached to the message (possibly along\n   with\
    \ a certificate chain) or the sender may expect the recipient to\n   obtain the\
    \ required certificate (chain) independently.\n"
- title: 1.4.2.  Key Exchange and Encryption
  contents:
  - "1.4.2.  Key Exchange and Encryption\n   In support of bulk encryption, S-HTTP\
    \ defines two key transfer\n   mechanisms, one using public-key enveloped key\
    \ exchange and another\n   with externally arranged keys.\n   In the former case,\
    \ the symmetric-key cryptosystem parameter is\n   passed encrypted under the receiver's\
    \ public key.\n   In the latter mode, we encrypt the content using a prearranged\n\
    \   session key, with key identification information specified on one of\n   the\
    \ header lines.\n"
- title: 1.4.3.  Message Integrity and Sender Authentication
  contents:
  - "1.4.3.  Message Integrity and Sender Authentication\n   Secure HTTP provides\
    \ a means to verify message integrity and sender\n   authenticity for a message\
    \ via the computation of a Message\n   Authentication Code (MAC), computed as\
    \ a keyed hash over the document\n   using a shared secret -- which could potentially\
    \ have been arranged\n   in a number of ways, e.g.: manual arrangement or 'inband'\
    \ key\n   management.  This technique requires neither the use of public key\n\
    \   cryptography nor encryption.\n   This mechanism is also useful for cases where\
    \ it is appropriate to\n   allow parties to identify each other reliably in a\
    \ transaction\n   without providing (third-party) non-repudiability for the\n\
    \   transactions themselves. The provision of this mechanism is motivated\n  \
    \ by our bias that the action of \"signing\" a transaction should be\n   explicit\
    \ and conscious for the user, whereas many authentication\n   needs (i.e., access\
    \ control) can be met with a lighter-weight\n   mechanism that retains the scalability\
    \ advantages of public-key\n   cryptography for key exchange.\n"
- title: 1.4.4.  Freshness
  contents:
  - "1.4.4.  Freshness\n   The protocol provides a simple challenge-response mechanism,\
    \ allowing\n   both parties to insure the freshness of transmissions. Additionally,\n\
    \   the integrity protection provided to HTTP headers permits\n   implementations\
    \ to consider the Date: header allowable in HTTP\n   messages as a freshness indicator,\
    \ where appropriate (although this\n   requires implementations to make allowances\
    \ for maximum clock skew\n   between parties, which we choose not to specify).\n"
- title: 1.5.  Implementation Options
  contents:
  - "1.5.  Implementation Options\n   In order to encourage widespread adoption of\
    \ secure documents for the\n   World-Wide Web in the face of the broad scope of\
    \ application\n   requirements, variability of user sophistication, and disparate\n\
    \   implementation constraints, Secure HTTP deliberately caters to a\n   variety\
    \ of implementation options.  See Section 8 for implementation\n   recommendations\
    \ and requirements.\n"
- title: 2.  Message Format
  contents:
  - "2.  Message Format\n   Syntactically, Secure HTTP messages are the same as HTTP,\
    \ consisting\n   of a request or status line followed by headers and a body. However,\n\
    \   the range of headers is different and the bodies are typically\n   cryptographically\
    \ enhanced.\n"
- title: 2.1.  Notational Conventions
  contents:
  - "2.1.  Notational Conventions\n   This document uses the augmented BNF from HTTP\
    \ [RFC-2616]. You should\n   refer to that document for a description of the syntax.\n"
- title: 2.2.  Request Line
  contents:
  - "2.2.  Request Line\n   In order to differentiate S-HTTP messages from HTTP messages\
    \ and\n   allow for special processing, the request line should use the special\n\
    \   Secure\" method and use the protocol designator \"Secure-HTTP/1.4\".\n   Consequently,\
    \ Secure-HTTP and HTTP processing can be intermixed on\n   the same TCP port,\
    \ e.g. port 80.  In order to prevent leakage of\n   potentially sensitive information\
    \ Request-URI should be \"*\". For\n   example:\n           Secure * Secure-HTTP/1.4\n\
    \   When communicating via a proxy, the Request-URI should be consist of\n   the\
    \ AbsoluteURI. Typically, the rel path section should be replaced\n   by \"*\"\
    \ to minimize the information passed to in the clear.  (e.g.\n   http://www.terisa.com/*);\
    \ proxies should remove the appropriate\n   amount of this information to minimize\
    \ the threat of traffic\n   analysis.  See Section 7.2.2.1 for a situation where\
    \ providing more\n   information is appropriate.\n"
- title: 2.3.  The Status Line
  contents:
  - "2.3.  The Status Line\n   S-HTTP responses should use the protocol designator\
    \ \"Secure-\n   HTTP/1.4\".  For example:\n           Secure-HTTP/1.4 200 OK\n\
    \   Note that the status in the Secure HTTP response line does not\n   indicate\
    \ anything about the success or failure of the unwrapped HTTP\n   request. Servers\
    \ should always use 200 OK provided that the Secure\n   HTTP processing is successful.\
    \ This prevents analysis of success or\n   failure for any request, which the\
    \ correct recipient can determine\n   from the encapsulated data. All case variations\
    \ should be accepted.\n"
- title: 2.4.  Secure HTTP Header Lines
  contents:
  - "2.4.  Secure HTTP Header Lines\n   The header lines described in this section\
    \ go in the header of a\n   Secure HTTP message. All except 'Content-Type' and\
    \ 'Content-Privacy-\n   Domain' are optional. The message body shall be separated\
    \ from the\n   header block by two successive CRLFs.\n   All data and fields in\
    \ header lines should be treated as case\n   insensitive unless otherwise specified.\
    \ Linear whitespace [RFC-822]\n   should be used only as a token separator unless\
    \ otherwise quoted.\n   Long header lines may be line folded in the style of [RFC-822].\n\
    \   This document refers to the header block following the S-HTTP\n   request/response\
    \ line and preceding the successive CRLFs collectively\n   as \"S-HTTP headers\"\
    .\n"
- title: 2.4.1.  Content-Privacy-Domain
  contents:
  - "2.4.1.  Content-Privacy-Domain\n   The two values defined by this document are\
    \ 'MOSS' and 'CMS'.  CMS\n   refers to the privacy enhancement specified in section\
    \ 2.6.1. MOSS\n   refers to the format defined in [RFC-1847] and [RFC-1848].\n"
- title: 2.4.2.  Content-Type for CMS
  contents:
  - "2.4.2.  Content-Type for CMS\n   Under normal conditions, the terminal encapsulated\
    \ content (after all\n   privacy enhancements have been removed) would be an HTTP\
    \ message. In\n   this case, there shall be a Content-Type line reading:\n   \
    \        Content-Type: message/http\n   The message/http content type is defined\
    \ in RFC-2616.\n   If the inner message is an S-HTTP message, then the content\
    \ type\n   shall be 'application/s-http'. (See Appendix for the definition of\n\
    \   this.)\n   It is intended that these types be registered with IANA as MIME\n\
    \   content types.\n   The terminal content may be of some other type provided\
    \ that the type\n   is properly indicated by the use of an appropriate Content-Type\n\
    \   header line. In this case, the header fields for the encapsulation of\n  \
    \ the terminal content apply to the terminal content (the 'final\n   headers').\
    \ But in any case, final headers should themselves always be\n   S-HTTP encapsulated,\
    \ so that the applicable S-HTTP/HTTP headers are\n   never passed unenhanced.\n\
    \   S-HTTP encapsulation of non-HTTP data is a useful mechanism for\n   passing\
    \ pre-enhanced data (especially presigned data) without\n   requiring that the\
    \ HTTP headers themselves be pre-enhanced.\n"
- title: 2.4.3.  Content-Type for MOSS
  contents:
  - "2.4.3.  Content-Type for MOSS\n   The Content-Type for MOSS shall be an acceptable\
    \ MIME content type\n   describing the cryptographic processing applied. (e.g.\n\
    \   multipart/signed). The content type of the inner content is described\n  \
    \ in the content type line corresponding to that inner content, and for\n   HTTP\
    \ messages shall be 'message/http'.\n"
- title: 2.4.4.  Prearranged-Key-Info
  contents:
  - "2.4.4.  Prearranged-Key-Info\n   This header line is intended to convey information\
    \ about a key which\n   has been arranged outside of the internal cryptographic\
    \ format. One\n   use of this is to permit in-band communication of session keys\
    \ for\n   return encryption in the case where one of the parties does not have\n\
    \   a key pair. However, this should also be useful in the event that the\n  \
    \ parties choose to use some other mechanism, for instance, a one-time\n   key\
    \ list.\n   This specification defines two methods for exchanging named keys,\n\
    \   Inband, Outband. Inband indicates that the session key was exchanged\n   previously,\
    \ using a Key-Assign header of the corresponding method.\n   Outband arrangements\
    \ imply that agents have external access to key\n   materials corresponding to\
    \ a given name, presumably via database\n   access or perhaps supplied immediately\
    \ by a user from keyboard input.\n   The syntax for the header line is:\n    \
    \ Prearranged-Key-Info =\n      \"Prearranged-Key-Info\" \":\" Hdr-Cipher \",\"\
    \ CoveredDEK \",\" CoverKey-ID\n     CoverKey-ID = method \":\" key-name\n   \
    \  CoveredDEK = *HEX\n     method = \"inband\" |  \"outband\"\n   While chaining\
    \ ciphers require an Initialization Vector (IV) [FIPS-\n   81] to start off the\
    \ chaining, that information is not carried by\n   this field. Rather, it should\
    \ be passed internal to the cryptographic\n   format being used. Likewise, the\
    \ bulk cipher used is specified in\n   this fashion.\n   <Hdr-Cipher> should be\
    \ the name of the block cipher used to encrypt\n   the session key (see section\
    \ 3.2.4.7)\n   <CoveredDEK> is the protected Data Encryption Key (a.k.a. transaction\n\
    \   key) under which the encapsulated message was encrypted. It should be\n  \
    \ appropriately (randomly) generated by the sending agent, then\n   encrypted\
    \ under the cover of the negotiated key (a.k.a. session key)\n   using the indicated\
    \ header cipher, and then converted into hex.\n   In order to avoid name collisions,\
    \ cover key namespaces must be\n   maintained separately by host and port.\n \
    \  Note that some Content-Privacy-Domains, notably likely future\n   revisions\
    \ of MOSS and CMS may have support for symmetric key\n   management.\n   The Prearranged-Key-Info\
    \ field need not be used in such\n   circumstances.  Rather, the native syntax\
    \ is preferred. Keys\n   exchanged with Key-Assign, however, may be used in this\
    \ situation.\n"
- title: 2.4.5.  MAC-Info
  contents:
  - "2.4.5.  MAC-Info\n   This header is used to supply a Message Authenticity Check,\
    \ providing\n   both message authentication and integrity, computed from the message\n\
    \   text, the time (optional -- to prevent replay attack), and a shared\n   secret\
    \ between client and server. The MAC should be computed over the\n   encapsulated\
    \ content of the S-HTTP message.  S-HTTP/1.1 defined that\n   MACs should be computed\
    \ using the following algorithm ('||' means\n   concatenation):\n        MAC =\
    \ hex(H(Message||[<time>]||<shared key>))\n   The time should be represented as\
    \ an unsigned 32 bit quantity\n   representing seconds since 00:00:00 GMT January\
    \ 1, 1970 (the UNIX\n   epoch), in network byte order. The shared key format is\
    \ a local\n   matter.\n   Recent research [VANO95] has demonstrated some weaknesses\
    \ in this\n   approach, and this memo introduces a new construction, derived from\n\
    \   [RFC-2104]. In the name of backwards compatibility, we retain the\n   previous\
    \ constructions with the same names as before. However, we\n   also introduce\
    \ a new series of names (See Section 3.2.4.8 for the\n   names) that obey a different\
    \ (hopefully stronger) construction. (^\n   means bitwise XOR)\n   HMAC = hex(H(K'\
    \ ^ pad2 || H(K' ^ pad1 ||[<time>]|| Message)))\n   pad1 = the byte 0x36 repeated\
    \ enough times to fill out a\n                hash input block. (I.e. 64 times\
    \ for both MD5 and SHA-1)\n   pad2 = the byte 0x5c repeated enough times to fill\
    \ out a\n                hash input block.\n   K' = H(<shared key>)\n   The original\
    \ HMAC construction is for the use of a key with length\n   equal to the length\
    \ of the hash output. Although it is considered\n   safe to use a key of a different\
    \ length (Note that strength cannot be\n   increased past the length of the hash\
    \ function itself, but can be\n   reduced by using a shorter key.) [KRAW96b] we\
    \ hash the original key\n   to permit the use of shared keys (e.g. passphrases)\
    \ longer than the\n   length of the hash. It is noteworthy (though obvious) that\
    \ this\n   technique does not increase the strength of short keys.\n   The format\
    \ of the MAC-Info line is:\n   MAC-Info =\n   \"MAC-Info\" \":\"  [hex-time],\n\
    \   hash-alg, hex-hash-data, key-spec\n   hex-time = <unsigned seconds since Unix\
    \ epoch represented as HEX>\n   hash-alg = <hash algorithms from section 3.2.4.8>\n\
    \   hex-hash-data = <computation as described above represented as HEX>\n   Key-Spec\
    \ = \"null\" | \"dek\" | Key-ID\n   Key-Ids can refer either to keys bound using\
    \ the Key-Assign header\n   line or those bound in the same fashion as the Outband\
    \ method\n   described later. The use of a 'Null' key-spec implies that a zero\n\
    \   length key was used, and therefore that the MAC merely represents a\n   hash\
    \ of the message text and (optionally) the time.  The special\n   key-spec 'DEK'\
    \ refers to the Data Exchange Key used to encrypt the\n   following message body\
    \ (it is an error to use the DEK key-spec in\n   situations where the following\
    \ message body is unencrypted).\n   If the time is omitted from the MAC-Info line,\
    \ it should simply not\n   be included in the hash.\n   Note that this header\
    \ line can be used to provide a more advanced\n   equivalent of the original HTTP\
    \ Basic authentication mode in that the\n   user can be asked to provide a username\
    \ and password. However, the\n   password remains private and message integrity\
    \ can be assured.\n   Moreover, this can be accomplished without encryption of\
    \ any kind.\n   In addition, MAC-Info permits fast message integrity verification\
    \ (at\n   the loss of non-repudiability) for messages, provided that the\n   participants\
    \ share a key (possibly passed using Key-Assign in a\n   previous message).\n\
    \   Note that some Content-Privacy-Domains, notably likely future\n   revisions\
    \ of MOSS and CMS may have support for symmetric integrity\n   protection The\
    \ MAC-Info field need not be used in such circumstances.\n   Rather, the native\
    \ syntax is preferred. Keys exchanged with Key-\n   Assign, however, may be used\
    \ in this situation.\n"
- title: 2.5.  Content
  contents:
  - "2.5.  Content\n   The content of the message is largely dependent upon the values\
    \ of\n   the Content-Privacy-Domain and Content-Transfer-Encoding fields.\n  \
    \ For a CMS message, with '8BIT' Content-Transfer-Encoding, the content\n   should\
    \ simply be the CMS message itself.\n   If the Content-Privacy-Domain is MOSS,\
    \ the content should consist of\n   a MOSS Security Multipart as described in\
    \ RFC1847.\n   It is expected that once the privacy enhancements have been removed,\n\
    \   the resulting (possibly protected) contents will be a normal HTTP\n   request.\
    \ Alternately, the content may be another Secure-HTTP message,\n   in which case\
    \ privacy enhancements should be unwrapped until clear\n   content is obtained\
    \ or privacy enhancements can no longer be removed.\n   (This permits embedding\
    \ of enhancements, such as sequential Signed\n   and Enveloped enhancements.)\
    \ Provided that all enhancements can be\n   removed, the final de-enhanced content\
    \ should be a valid HTTP request\n   (or response) unless otherwise specified\
    \ by the Content-Type line.\n   Note that this recursive encapsulation of messages\
    \ potentially\n   permits security enhancements to be applied (or removed) for\
    \ the\n   benefit of intermediaries who may be a party to the transaction\n  \
    \ between a client and server (e.g., a proxy requiring client\n   authentication).\
    \  How such intermediaries should indicate such\n   processing is described in\
    \ Section 7.2.1.\n"
- title: 2.6.  Encapsulation Format Options
  contents:
  - '2.6.  Encapsulation Format Options

    '
- title: '2.6.1.  Content-Privacy-Domain: CMS'
  contents:
  - "2.6.1.  Content-Privacy-Domain: CMS\n   Content-Privacy-Domain 'CMS' follows\
    \ the form of the CMS standard\n   (see Appendix).\n   Message protection may\
    \ proceed on two orthogonal axes: signature and\n   encryption. Any message may\
    \ be either signed, encrypted, both, or\n   neither. Note that the 'auth' protection\
    \ mode of S-HTTP is provided\n   independently of CMS coding via the MAC-Info\
    \ header of section 2.3.6\n   since CMS does not support a 'KeyDigestedData' type,\
    \ although it does\n   support a 'DigestedData' type.\n"
- title: 2.6.1.1.  Signature
  contents:
  - "2.6.1.1.  Signature\n   This enhancement uses the 'SignedData' type of CMS. \
    \ When digital\n   signatures are used, an appropriate certificate may either\
    \ be\n   attached to the message (possibly along with a certificate chain) as\n\
    \   specified in CMS or the sender may expect the recipient to obtain its\n  \
    \ certificate (and/or chain) independently.  Note that an explicitly\n   allowed\
    \ instance of this is a certificate signed with the private\n   component corresponding\
    \ to the public component being attested to.\n   This shall be referred to as\
    \ a self-signed certificate. What, if any,\n   weight to give to such a certificate\
    \ is a purely local matter.  In\n   either case, a purely signed message is precisely\
    \ CMS compliant.\n"
- title: 2.6.1.2.  Encryption
  contents:
  - '2.6.1.2.  Encryption

    '
- title: 2.6.1.2.1.  Encryption -- normal, public key
  contents:
  - "2.6.1.2.1.  Encryption -- normal, public key\n   This enhancement is performed\
    \ precisely as enveloping (using either '\n   EnvelopedData' types) under CMS.\
    \ A message encrypted in this fashion,\n   signed or otherwise, is CMS compliant.\
    \ To have a message which is\n   both signed and encrypted, one simply creates\
    \ the CMS SignedData\n   production and encapsulates it in EnvelopedData as described\
    \ in CMS.\n"
- title: 2.6.1.2.2.  Encryption -- prearranged key
  contents:
  - "2.6.1.2.2.  Encryption -- prearranged key\n   This uses the 'EncryptedData' type\
    \ of CMS. In this mode, we encrypt\n   the content using a DEK encrypted under\
    \ cover of a prearranged\n   session key (how this key may be exchanged is discussed\
    \ later), with\n   key identification information specified on one of the header\
    \ lines.\n   The IV is in the EncryptedContentInfo type of the EncryptedData\n\
    \   element.  To have a message which is both signed and encrypted, one\n   simply\
    \ creates the CMS SignedData production and encapsulates it in\n   EncryptedData\
    \ as described in CMS.\n"
- title: '2.6.2.  Content-Privacy-Domain: MOSS'
  contents:
  - "2.6.2.  Content-Privacy-Domain: MOSS\n   The body of the message should be a\
    \ MIME compliant message with\n   content type that matches the Content-Type line\
    \ in the S-HTTP\n   headers.  Encrypted messages should use multipart/encrypted.\
    \ Signed\n   messages should use multipart/signed. However, since multipart/signed\n\
    \   does not convey keying material, is is acceptable to use\n   multipart/mixed\
    \ where the first part is application/mosskey-data and\n   the second part is\
    \ multipart/mixed in order to convey certificates\n   for use in verifying the\
    \ signature.\n   Implementation Note: When both encryption and signature are applied\n\
    \   by the same agent, signature should in general be applied before\n   encryption.\n"
- title: 2.6.3.  Permitted HTTP headers
  contents:
  - '2.6.3.  Permitted HTTP headers

    '
- title: 2.6.3.1.  Overview
  contents:
  - "2.6.3.1.  Overview\n   In general, HTTP [RFC-2616] headers should appear in the\
    \ inner\n   content (i.e. the message/http) of an S-HTTP message but should not\n\
    \   appear in the S-HTTP message wrapper for security reasons. However,\n   certain\
    \ headers need to be visible to agents which do not have access\n   to the encapsulated\
    \ data. These headers may appear in the S-HTTP\n   headers as well.\n   Please\
    \ note that although brief descriptions of the general purposes\n   of these headers\
    \ are provided for clarity, the definitive reference\n   is [RFC-2616].\n"
- title: 2.6.3.2.  Host
  contents:
  - "2.6.3.2.  Host\n   The host header specificies the internet host and port number\
    \ of the\n   resource being requested. This header should be used to disambiguate\n\
    \   among multiple potential security contexts within which this message\n   could\
    \ be interpreted. Note that the unwrapped HTTP message will have\n   it's own\
    \ Host field (assuming it's an HTTP/1.1 message). If these\n   fields do not match,\
    \ the server should respond with a 400 status\n   code.\n"
- title: 2.6.3.3.  Connection
  contents:
  - "2.6.3.3.  Connection\n   The Connection field has precisely the same semantics\
    \ in S-HTTP\n   headers as it does in HTTP headers. This permits persistent\n\
    \   connections to be used with S-HTTP.\n"
- title: 3.  Cryptographic Parameters
  contents:
  - '3.  Cryptographic Parameters

    '
- title: 3.1.  Options Headers
  contents:
  - "3.1.  Options Headers\n   As described in Section 1.3.2, every S-HTTP request\
    \ is (at least\n   conceptually) preconditioned by the negotiation options provided\
    \ by\n   the potential receiver. The two primary locations for these options\n\
    \   are\n           1. In the headers of an HTTP Request/Response.\n         \
    \  2. In the HTML which contains the anchor being dereferenced.\n   There are\
    \ two kinds of cryptographic options which may be provided:\n   Negotiation options,\
    \ as discussed in Section 3.2 convey a potential\n   message recipient's cryptographic\
    \ preferences. Keying options, as\n   discussed in Section 3.3 provide keying\
    \ material (or pointers to\n   keying material) which may be of use to the sender\
    \ when enhancing a\n   message.\n   Binding cryptographic options to anchors using\
    \ HTML extensions is the\n   topic of the companion document [SHTML] and will\
    \ not be treated here.\n"
- title: 3.2.  Negotiation Options
  contents:
  - '3.2.  Negotiation Options

    '
- title: 3.2.1.  Negotiation Overview
  contents:
  - "3.2.1.  Negotiation Overview\n   Both parties are able to express their requirements\
    \ and preferences\n   regarding what cryptographic enhancements they will permit/require\n\
    \   the other party to provide. The appropriate option choices depend on\n   implementation\
    \ capabilities and the requirements of particular\n   applications.\n   A negotiation\
    \ header is a sequence of specifications each conforming\n   to a four-part schema\
    \ detailing:\n        Property -- the option being negotiated, such as bulk encryption\n\
    \        algorithm.\n        Value -- the value being discussed for the property,\
    \ such as\n        DES-CBC\n        Direction -- the direction which is to be\
    \ affected, namely:\n        during reception or origination (from the perspective\
    \ of the\n        originator).\n        Strength -- strength of preference, namely:\
    \ required, optional,\n        refused\n   As an example, the header line:\n \
    \          SHTTP-Symmetric-Content-Algorithms: recv-optional=DES-CBC,RC2\n   could\
    \ be thought to say: \"You are free to use DES-CBC or RC2 for bulk\n   encryption\
    \ for encrypting messages to me.\"\n   We define new headers (to be used in the\
    \ encapsulated HTTP header,\n   not in the S-HTTP header) to permit negotiation\
    \ of these matters.\n"
- title: 3.2.2.  Negotiation Option Format
  contents:
  - "3.2.2.  Negotiation Option Format\n   The general format for negotiation options\
    \ is:\n           Option = Field \":\" Key-val \";\" *(Key-val)\n           Key-val\
    \ = Key \"=\" Value *(\",\" Value)\n           Key = Mode\"-\"Action         \
    \    ; This is represented as one\n                                          \
    \ ; token without whitespace\n           Mode = \"orig\" | \"recv\"\n        \
    \   Action = \"optional\" | \"required\" | \"refused\"\n   The <Mode> value indicates\
    \ whether this <Key-val> refers to what the\n   agent's actions are upon sending\
    \ privacy enhanced messages as opposed\n   to upon receiving them. For any given\
    \ mode-action pair, the\n   interpretation to be placed on the enhancements (<Value>s)\
    \ listed is:\n        'recv-optional:' The agent will process the enhancement\
    \ if the\n        other party uses it, but will also gladly process messages\n\
    \        without the enhancement.\n        'recv-required:' The agent will not\
    \ process messages without\n        this enhancement.\n        'recv-refused:'\
    \ The agent will not process messages with this\n        enhancement.\n      \
    \  'orig-optional:' When encountering an agent which refuses this\n        enhancement,\
    \ the agent will not provide it, and when\n        encountering an agent which\
    \ requires it, this agent will provide\n        it.\n        'orig-required:'\
    \ The agent will always generate the enhancement.\n        'orig-refused:' The\
    \ agent will never generate the enhancement.\n   The behavior of agents which\
    \ discover that they are communicating\n   with an incompatible agent is at the\
    \ discretion of the agents. It is\n   inappropriate to blindly persist in a behavior\
    \ that is known to be\n   unacceptable to the other party. Plausible responses\
    \ include simply\n   terminating the connection, or, in the case of a server response,\n\
    \   returning 'Not implemented 501'.\n   Optional values are considered to be\
    \ listed in decreasing order of\n   preference. Agents are free to choose any\
    \ member of the intersection\n   of the optional lists (or none) however.\n  \
    \ If any <Key-Val> is left undefined, it should be assumed to be set to\n   the\
    \ default. Any key which is specified by an agent shall override\n   any appearance\
    \ of that key in any <Key-Val> in the default for that\n   field.\n"
- title: 3.2.3.  Parametrization for Variable-length Key Ciphers
  contents:
  - "3.2.3.  Parametrization for Variable-length Key Ciphers\n   For ciphers with\
    \ variable key lengths, values may be parametrized\n   using the syntax <cipher>'['<length>']'\n\
    \   For example, 'RSA[1024]' represents a 1024 bit key for RSA. Ranges\n   may\
    \ be represented as\n           <cipher>'['<bound1>'-'<bound2>']'\n   For purposes\
    \ of preferences, this notation should be treated as if it\n   read (assuming\
    \ x and y are integers)\n           <cipher>[x], <cipher>[x+1],...<cipher>[y]\
    \ (if x<y)\n   and\n           <cipher>[x], <cipher>[x-1],...<cipher>[y] (if x>y)\n\
    \   The special value 'inf' may be used to denote infinite length.\n   Using simply\
    \ <cipher> for such a cipher shall be read as the maximum\n   range possible with\
    \ the given cipher.\n"
- title: 3.2.4.  Negotiation Syntax
  contents:
  - '3.2.4.  Negotiation Syntax

    '
- title: 3.2.4.1.  SHTTP-Privacy-Domains
  contents:
  - "3.2.4.1.  SHTTP-Privacy-Domains\n   This header refers to the Content-Privacy-Domain\
    \ type of section\n   2.3.1. Acceptable values are as listed there. For instance,\n\
    \                   SHTTP-Privacy-Domains: orig-required=cms;\n              \
    \                            recv-optional=cms,MOSS\n   would indicate that the\
    \ agent always generates CMS compliant\n   messages, but can read CMS or MOSS\
    \ (or, unenhanced messages).\n"
- title: 3.2.4.2.  SHTTP-Certificate-Types
  contents:
  - "3.2.4.2.  SHTTP-Certificate-Types\n   This indicates what sort of Public Key\
    \ certificates the agent will\n   accept. Currently defined values are 'X.509'\
    \ and 'X.509v3'.\n"
- title: 3.2.4.3.  SHTTP-Key-Exchange-Algorithms
  contents:
  - "3.2.4.3.  SHTTP-Key-Exchange-Algorithms\n   This header indicates which algorithms\
    \ may be used for key exchange.\n   Defined values are 'DH', 'RSA', 'Outband'\
    \ and 'Inband'. DH refers to\n   Diffie-Hellman X9.42 style enveloping. [DH] RSA\
    \ refers to RSA\n   enveloping. Outband refers to some sort of external key agreement.\n\
    \   Inband refers to section 3.3.3.1.\n   The expected common configuration of\
    \ clients having no certificates\n   and servers having certificates would look\
    \ like this (in a message\n   sent by the server):\n           SHTTP-Key-Exchange-Algorithms:\
    \ orig-optional=Inband, DH;\n                                         recv-required=DH\n"
- title: 3.2.4.4.  SHTTP-Signature-Algorithms
  contents:
  - "3.2.4.4.  SHTTP-Signature-Algorithms\n   This header indicates what Digital Signature\
    \ algorithms may be used.\n   Defined values are 'RSA' [PKCS-1] and 'NIST-DSS'\
    \ [FIPS-186] Since\n   NIST-DSS and RSA use variable length moduli the parametrization\n\
    \   syntax of section 3.2.3 should be used.  Note that a key length\n   specification\
    \ may interact with the acceptability of a given\n   certificate, since keys (and\
    \ their lengths) are specified in public-\n   key certificates.\n"
- title: 3.2.4.5.  SHTTP-Message-Digest-Algorithms
  contents:
  - "3.2.4.5.  SHTTP-Message-Digest-Algorithms\n   This indicates what message digest\
    \ algorithms may be used.\n   Previously defined values are 'RSA-MD2' [RFC-1319],\
    \ 'RSA-MD5' [RFC-\n   1321], 'NIST-SHS' [FIPS-180].\n"
- title: 3.2.4.6.  SHTTP-Symmetric-Content-Algorithms
  contents:
  - "3.2.4.6.  SHTTP-Symmetric-Content-Algorithms\n   This header specifies the symmetric-key\
    \ bulk cipher used to encrypt\n   message content.  Defined values are:\n   DES-CBC\
    \ -- DES in Cipher Block Chaining (CBC) mode [FIPS-81]\n   DES-EDE-CBC -- 2 Key\
    \ 3DES using Encrypt-Decrypt-Encrypt in outer\n                  CBC mode\n  \
    \ DES-EDE3-CBC -- 3 Key 3DES using Encrypt-Decrypt-Encrypt in outer\n        \
    \           CBC mode\n   DESX-CBC -- RSA's DESX in CBC mode\n   IDEA-CBC -- IDEA\
    \ in CBC mode\n   RC2-CBC -- RSA's RC2 in CBC mode\n   CDMF-CBC -- IBM's CDMF\
    \ (weakened key DES) [JOHN93] in CBC mode\n   Since RC2 keys are variable length,\
    \ the syntax of section 3.2.3\n   should be used.\n"
- title: 3.2.4.7.  SHTTP-Symmetric-Header-Algorithms
  contents:
  - "3.2.4.7.  SHTTP-Symmetric-Header-Algorithms\n   This header specifies the symmetric-key\
    \ cipher used to encrypt\n   message headers.\n   DES-ECB -- DES in Electronic\
    \ Codebook (ECB) mode [FIPS-81]\n   DES-EDE-ECB -- 2 Key 3DES using Encrypt-Decrypt-Encrypt\
    \ in ECB mode\n   DES-EDE3-ECB -- 3 Key 3DES using Encrypt-Decrypt-Encrypt in\
    \ ECB mode\n   DESX-ECB -- RSA's DESX in ECB mode\n   IDEA-ECB -- IDEA\n   RC2-ECB\
    \ -- RSA's RC2 in ECB mode\n   CDMF-ECB -- IBM's CDMF in ECB mode\n   Since RC2\
    \ is variable length, the syntax of section 3.2.3 should be\n   used.\n"
- title: 3.2.4.8.  SHTTP-MAC-Algorithms
  contents:
  - "3.2.4.8.  SHTTP-MAC-Algorithms\n   This header indicates what algorithms are\
    \ acceptable for use in\n   providing a symmetric key MAC. 'RSA-MD2', 'RSA-MD5'\
    \ and 'NIST-SHS'\n   persist from S-HTTP/1.1 using the old MAC construction. The\
    \ tokens '\n   RSA-MD2-HMAC', 'RSA-MD5-HMAC' and 'NIST-SHS-HMAC' indicate the\
    \ new\n   HMAC construction of 2.3.6 with the MD2, MD5, and SHA-1 algorithms\n\
    \   respectively.\n"
- title: 3.2.4.9.  SHTTP-Privacy-Enhancements
  contents:
  - "3.2.4.9.  SHTTP-Privacy-Enhancements\n   This header indicates security enhancements\
    \ to apply.  Possible\n   values are 'sign', 'encrypt' and 'auth' indicating whether\
    \ messages\n   are signed, encrypted, or authenticated (i.e., provided with a\
    \ MAC),\n   respectively.\n"
- title: 3.2.4.10.  Your-Key-Pattern
  contents:
  - "3.2.4.10.  Your-Key-Pattern\n   This is a generalized pattern match syntax to\
    \ describe identifiers\n   for a large number of types of keying material. The\
    \ general syntax\n   is:\n        Your-Key-Pattern =\n                \"Your-Key-Pattern\"\
    \ \":\" key-use \",\" pattern-info\n        key-use = \"cover-key\" | \"auth-key\"\
    \ | \"signing-key\"\n"
- title: 3.2.4.10.1.  Cover Key Patterns
  contents:
  - "3.2.4.10.1.  Cover Key Patterns\n   This header specifies desired values for\
    \ key names used for\n   encryption of transaction keys using the Prearranged-Key-Info\
    \ syntax\n   of section 2.3.5.  The pattern-info syntax consists of a series of\n\
    \   comma separated regular expressions. Commas should be escaped with\n   backslashes\
    \ if they appear in the regexps. The first pattern should\n   be assumed to be\
    \ the most preferred.\n"
- title: 3.2.4.10.2.  Auth key patterns
  contents:
  - "3.2.4.10.2.  Auth key patterns\n   Auth-key patterns specify name forms desired\
    \ for use for MAC\n   authenticators.  The pattern-info syntax consists of a series\
    \ of\n   comma separated regular expressions. Commas should be escaped with\n\
    \   backslashes if they appear in the regexps. The first pattern should\n   be\
    \ assumed to be the most preferred.\n"
- title: 3.2.4.10.3.  Signing Key Pattern
  contents:
  - "3.2.4.10.3.  Signing Key Pattern\n   This parameter describes a pattern or patterns\
    \ for what keys are\n   acceptable for signing for the digital signature enhancement.\
    \  The\n   pattern-info syntax for signing-key is:\n           pattern-info =\
    \ name-domain \",\" pattern-data\n   The only currently defined name-domain is\
    \ 'DN-1779'.  This parameter\n   specifies desired values for fields of Distinguished\
    \ Names.  DNs are\n   considered to be represented as specified in RFC1779, the\
    \ order of\n   fields and whitespace between fields is not significant.\n   All\
    \ RFC1779 values should use ',' as a separator rather than ';',\n   since ';'\
    \ is used as a statement separator in S-HTTP.\n   Pattern-data is a modified RFC1779\
    \ string, with regular expressions\n   permitted as field values.  Pattern match\
    \ is performed field-wise,\n   unspecified fields match any value (and therefore\
    \ leaving the DN-\n   Pattern entirely unspecified allows for any DN). Certificate\
    \ chains\n   may be matched as well (to allow for certificates without name\n\
    \   subordination). DN chains are considered to be ordered left-to-right\n   with\
    \ the issuer of a given certificate on its immediate right,\n   although issuers\
    \ need not be specified. A trailing '.' indicates that\n   the sequence of DNs\
    \ is absolute. I.e. that the one furthest to the\n   right is a root.\n   The\
    \ syntax for the pattern values is,\n        Value = DN-spec *(\",\" Dn-spec)[\"\
    .\"]\n        Dn-spec = \"/\" *(Field-spec) \"/\"\n        Field-spec := Attr\
    \ = \"Pattern\"\n        Attr = \"CN\" | \"L\" | \"ST\" | \"O\" |\n          \
    \         \"OU\" | \"C\" | <or as appropriate>\n        Pattern = <POSIX 1003.2\
    \ regular expressions>\n   For example, to request that the other agent sign with\
    \ a key\n   certified by the RSA Persona CA (which uses name subordination) one\n\
    \   could use the expression below.  Note the use of RFC1779 quoting to\n   protect\
    \ the comma (an RFC1779 field separator) and the POSIX 1003.2\n   quoting to protect\
    \ the dot (a regular expression metacharacter).\n      Your-Key-Pattern: signing-key,\
    \ DN-1779,\n                   /OU=Persona Certificate, O=\"RSA Data Security,\n\
    \   Inc\\.\"/\n"
- title: 3.2.4.11.  Example
  contents:
  - "3.2.4.11.  Example\n   A representative header block for a server follows.\n\
    \        SHTTP-Privacy-Domains: recv-optional=MOSS, CMS;\n              orig-required=CMS\n\
    \        SHTTP-Certificate-Types: recv-optional=X.509;\n              orig-required=X.509\n\
    \        SHTTP-Key-Exchange-Algorithms: recv-required=DH;\n              orig-optional=Inband,DH\n\
    \        SHTTP-Signature-Algorithms: orig-required=NIST-DSS;\n              recv-required=NIST-DSS\n\
    \        SHTTP-Privacy-Enhancements: orig-required=sign;\n              orig-optional=encrypt\n"
- title: 3.2.4.12.  Defaults
  contents:
  - "3.2.4.12.  Defaults\n   Explicit negotiation parameters take precedence over\
    \ default values.\n   For a given negotiation option type, defaults for a given\
    \ mode-action\n   pair (such as 'orig-required') are implicitly merged unless\n\
    \   explicitly overridden.\n   The default values (these may be negotiated downward\
    \ or upward) are:\n        SHTTP-Privacy-Domains: orig-optional=CMS;\n       \
    \                        recv-optional=CMS\n        SHTTP-Certificate-Types: orig-optional=X.509;\n\
    \                                 recv-optional=X.509\n        SHTTP-Key-Exchange-Algorithms:\
    \ orig-optional=DH,Inband,Outband;\n                                       recv-optional=DH,Inband,Outband\n\
    \        SHTTP-Signature-Algorithms: orig-optional=NIST-DSS;\n               \
    \                     recv-optional=NIST-DSS\n        SHTTP-Message-Digest-Algorithms:\
    \ orig-optional=RSA-MD5;\n                                         recv-optional=RSA-MD5\n\
    \        SHTTP-Symmetric-Content-Algorithms: orig-optional=DES-CBC;\n        \
    \                                    recv-optional=DES-CBC\n        SHTTP-Symmetric-Header-Algorithms:\
    \ orig-optional=DES-ECB;\n                                           recv-optional=DES-ECB\n\
    \        SHTTP-Privacy-Enhancements: orig-optional=sign,encrypt, auth;\n     \
    \                                       recv-required=encrypt;\n             \
    \                               recv-optional=sign, auth\n"
- title: 3.3.  Non-Negotiation Headers
  contents:
  - "3.3.  Non-Negotiation Headers\n   There are a number of options that are used\
    \ to communicate or\n   identify the potential recipient's keying material.\n"
- title: 3.3.1.  Encryption-Identity
  contents:
  - "3.3.1.  Encryption-Identity\n   This header identifies a potential principal\
    \ for whom the message\n   described by these options could be encrypted; Note\
    \ that this\n   explicitly permits return encryption under (say) public key without\n\
    \   the other agent signing first (or under a different key than that of\n   the\
    \ signature). The syntax of the Encryption-Identity line is:\n           Encryption-Identity\
    \ =\n                   \"Encryption Identity\" \":\" name-class,key-sel,name-arg\n\
    \           name-class = \"DN-1779\" | MOSS name forms\n   The name-class is an\
    \ ASCII string representing the domain within\n   which the name is to be interpreted,\
    \ in the spirit of MOSS. In\n   addition to the MOSS name forms of RFC1848, we\
    \ add the DN-1779 name\n   form to represent a more convenient form of distinguished\
    \ name.\n"
- title: 3.3.1.1.  DN-1779 Name Class
  contents:
  - "3.3.1.1.  DN-1779 Name Class\n   The argument is an RFC-1779 encoded DN.\n"
- title: 3.3.2.  Certificate-Info
  contents:
  - "3.3.2.  Certificate-Info\n   In order to permit public key operations on DNs\
    \ specified by\n   Encryption-Identity headers without explicit certificate fetches\
    \ by\n   the receiver, the sender may include certification information in the\n\
    \   Certificate-Info option. The format of this option is:\n           Certificate-Info:\
    \ <Cert-Fmt>','<Cert-Group>\n   <Cert-Fmt> should be the type of <Cert-Group>\
    \ being presented.\n   Defined values are 'PEM' and 'CMS'. CMS certificate groups\
    \ are\n   provided as a base-64 encoded CMS SignedData message containing\n  \
    \ sequences of certificates with or without the SignerInfo field. A PEM\n   format\
    \ certificate group is a list of comma-separated base64-encoded\n   PEM certificates.\n\
    \   Multiple Certificate-Info lines may be defined.\n"
- title: 3.3.3.  Key-Assign
  contents:
  - "3.3.3.  Key-Assign\n   This option serves to indicate that the agent wishes to\
    \ bind a key to\n   a symbolic name for (presumably) later reference.\n   The\
    \ general syntax of the key-assign header is:\n        Key-Assign =\n        \
    \        \"Key-Assign\" \":\" Method \",\" Key-Name \",\"\n                Lifetime\
    \ \",\" Ciphers \";\" Method-args\n        Key-name = string\n        Lifetime\
    \ = \"this\" | \"reply\" | \"\"\n        Method =\"inband\"\n        Ciphers =\
    \ \"null\" | Cipher+\n        Cipher\" = <Header cipher from section 3.2.4.7>\n\
    \        kv = \"4\" | \"5\"\n   Key-Name is the symbolic name to which this key\
    \ is to be bound.\n   Ciphers is a list of ciphers for which this key is potentially\n\
    \   applicable (see the list of header ciphers in section 3.2.4.7). The\n   keyword\
    \ 'null' should be used to indicate that it is inappropriate\n   for use with\
    \ ANY cipher. This is potentially useful for exchanging\n   keys for MAC computation.\n\
    \   Lifetime is a representation of the longest period of time during\n   which\
    \ the recipient of this message can expect the sender to accept\n   that key.\
    \ 'this' indicates that it is likely to be valid only for\n   reading this transmission.\
    \ 'reply' indicates that it is useful for a\n   reply to this message.  If a Key-Assign\
    \ with the reply lifetime\n   appears in a CRYPTOPTS block, it indicates that\
    \ it is good for at\n   least one (but perhaps only one) dereference of this anchor.\
    \  An\n   unspecified lifetime implies that this key may be reused for an\n  \
    \ indefinite number of transactions.\n   Method should be one of a number of key\
    \ exchange methods.  The only\n   currently defined value is 'inband' referring\
    \ to Inband keys (i.e.,\n   direct assignment).\n   This header line may appear\
    \ either in an unencapsulated header or in\n   an encapsulated message, though\
    \ when an uncovered key is being\n   directly assigned, it may only appear in\
    \ an encrypted encapsulated\n   content. Assigning to a key that already exists\
    \ causes that key to be\n   overwritten.\n   Keys defined by this header are referred\
    \ to elsewhere in this\n   specification as Key-IDs, which have the syntax:\n\
    \        Key-ID = method \":\" key-name\n"
- title: 3.3.3.1.  Inband Key Assignment
  contents:
  - "3.3.3.1.  Inband Key Assignment\n   This refers to the direct assignment of an\
    \ uncovered key to a\n   symbolic name. Method-args should be just the desired\
    \ session key\n   encoded in hexidecimal as in:\n        Key-Assign: inband,akey,reply,DES-ECB;0123456789abcdef\n\
    \   Short keys should be derived from long keys by reading bits from left\n  \
    \ to right.\n   Note that inband key assignment is especially important in order\
    \ to\n   permit confidential spontaneous communication between agents where\n\
    \   one (but not both) of the agents have key pairs.  However, this\n   mechanism\
    \ is also useful to permit key changes without public key\n   computations. The\
    \ key information is carried in this header line must\n   be in the inner secured\
    \ HTTP request, therefore use in unencrypted\n   messages is not permitted.\n"
- title: 3.3.4.  Nonces
  contents:
  - "3.3.4.  Nonces\n   Nonces are opaque, transient, session-oriented identifiers\
    \ which may\n   be used to provide demonstrations of freshness. Nonce values are\
    \ a\n   local matter, although they are might well be simply random numbers\n\
    \   generated by the originator. The value is supplied simply to be\n   returned\
    \ by the recipient.\n"
- title: 3.3.4.1.  Nonce
  contents:
  - "3.3.4.1.  Nonce\n   This header is used by an originator to specify what value\
    \ is to be\n   returned in the reply. The field may be any value. Multiple nonces\n\
    \   may be supplied, each to be echoed independently.\n   The Nonce should be\
    \ returned in a Nonce-Echo header line. See section\n   4.1.1.\n"
- title: 3.4.  Grouping Headers With SHTTP-Cryptopts
  contents:
  - "3.4.  Grouping Headers With SHTTP-Cryptopts\n   In order for servers to bind\
    \ a group of headers to an HTML anchor, it\n   is possible to combine a number\
    \ of headers on a single S-HTTP\n   Cryptopts header line. The names of the anchors\
    \ to which these\n   headers apply is indicated with a 'scope' parameter.\n"
- title: 3.4.1.  SHTTP-Cryptopts
  contents:
  - "3.4.1.  SHTTP-Cryptopts\n   This option provides a set of cryptopts and a list\
    \ of references to\n   which it applies. (For HTML, these references would be\
    \ named using\n   the NAME tag). The names are provided in the scope attribute\
    \ as a\n   comma separated list and separated from the next header line by a\n\
    \   semicolon. The format for the SHTTP-Cryptopts line is:\n"
- title: SHTTP-Cryptopts =
  contents:
  - "SHTTP-Cryptopts =\n                   \"SHTTP-Cryptopts\" \":\" scope \";\" cryptopt-list\n"
- title: scope = "scope="<tag-spec>    ; This is all one token without whitespace
  contents:
  - 'scope = "scope="<tag-spec>    ; This is all one token without whitespace

    '
- title: tag-spec = tag *("," tag) | ""
  contents:
  - 'tag-spec = tag *("," tag) | ""

    '
- title: cryptopt-list = cryptopt *(";" cryptopt)
  contents:
  - 'cryptopt-list = cryptopt *(";" cryptopt)

    '
- title: cryptopt = <S-HTTP cryptopt lines described below>
  contents:
  - 'cryptopt = <S-HTTP cryptopt lines described below>

    '
- title: tag = <value used in HTML anchor NAME attribute>
  contents:
  - "tag = <value used in HTML anchor NAME attribute>\n      For example:\n"
- title: 'SHTTP-Cryptopts: scope=tag1,tag2;'
  contents:
  - "SHTTP-Cryptopts: scope=tag1,tag2;\n                   SHTTP-Privacy-Domains:\n\
    \                   orig-required=cms; recv-optional=cms,MOSS\n   If a message\
    \ contains both S-HTTP negotiation headers and headers\n   grouped on SHTTP-Cryptopts\
    \ line(s), the other headers shall be taken\n   to apply to all anchors not bound\
    \ on the SHTTP-Cryptopts line(s).\n   Note that this is an all-or-nothing proposition.\
    \ That is, if a\n   SHTTP-Cryptopts header binds options to a reference, then\
    \ none of\n   these global options apply, even if some of the options headers\
    \ do\n   not appear in the bound options. Rather, the S-HTTP defaults found in\n\
    \   Section 3.2.4.11 apply.\n"
- title: 4.  New Header Lines for HTTP
  contents:
  - "4.  New Header Lines for HTTP\n   Two non-negotiation header lines for HTTP are\
    \ defined here.\n"
- title: 4.1.  Security-Scheme
  contents:
  - "4.1.  Security-Scheme\n   All S-HTTP compliant agents must generate the Security-Scheme\
    \ header\n   in the headers of all HTTP messages they generate. This header\n\
    \   permits other agents to detect that they are communicating with an\n   S-HTTP\
    \ compliant agent and generate the appropriate cryptographic\n   options headers.\n\
    \   For implementations compliant with this specification, the value must\n  \
    \ be 'S-HTTP/1.4'.\n"
- title: 4.1.1.  Nonce-Echo
  contents:
  - "4.1.1.  Nonce-Echo\n   The header is used to return the value provided in a previously\n\
    \   received Nonce: field. This has to go in the encapsulated headers so\n   that\
    \ it an be cryptographically protected.\n"
- title: 5.  (Retriable) Server Status Error Reports
  contents:
  - "5.  (Retriable) Server Status Error Reports\n   We describe here the special\
    \ processing appropriate for client\n   retries in the face of servers returning\
    \ an error status.\n"
- title: 5.1.  Retry for Option (Re)Negotiation
  contents:
  - "5.1.  Retry for Option (Re)Negotiation\n   A server may respond to a client request\
    \ with an error code that\n   indicates that the request has not completely failed\
    \ but rather that\n   the client may possibly achieve satisfaction through another\
    \ request.\n   HTTP already has this concept with the 3XX redirection codes.\n\
    \   In the case of S-HTTP, it is conceivable (and indeed likely) that the\n  \
    \ server expects the client to retry his request using another set of\n   cryptographic\
    \ options. E.g., the document which contains the anchor\n   that the client is\
    \ dereferencing is old and did not require digital\n   signature for the request\
    \ in question, but the server now has a\n   policy requiring signature for dereferencing\
    \ this URL. These options\n   should be carried in the header of the encapsulated\
    \ HTTP message,\n   precisely as client options are carried.\n   The general idea\
    \ is that the client will perform the retry in the\n   manner indicated by the\
    \ combination of the original request and the\n   precise nature of the error\
    \ and the cryptographic enhancements\n   depending on the options carried in the\
    \ server response.\n   The guiding principle in client response to these errors\
    \ should be to\n   provide the user with the same sort of informed choice with\
    \ regard to\n   dereference of these anchors as with normal anchor dereference.\
    \ For\n   instance, in the case above, it would be inappropriate for the client\n\
    \   to sign the request without requesting permission for the action.\n"
- title: 5.2.  Specific Retry Behavior
  contents:
  - '5.2.  Specific Retry Behavior

    '
- title: 5.2.1.  Unauthorized 401, PaymentRequired 402
  contents:
  - "5.2.1.  Unauthorized 401, PaymentRequired 402\n   The HTTP errors 'Unauthorized\
    \ 401', 'PaymentRequired 402' represent\n   failures of HTTP style authentication\
    \ and payment schemes. While S-\n   HTTP has no explicit support for these mechanisms,\
    \ they can be\n   performed under S-HTTP while taking advantage of the privacy\
    \ services\n   offered by S-HTTP. (There are other errors for S-HTTP specific\n\
    \   authentication errors.)\n"
- title: 5.2.2.  420 SecurityRetry
  contents:
  - "5.2.2.  420 SecurityRetry\n   This server status reply is provided so that the\
    \ server may inform\n   the client that although the current request is rejected,\
    \ a retried\n   request with different cryptographic enhancements is worth\n \
    \  attempting. This header shall also be used in the case where an HTTP\n   request\
    \ has been made but an S-HTTP request should have been made.\n   Obviously, this\
    \ serves no useful purpose other than signalling an\n   error if the original\
    \ request should have been encrypted, but in\n   other situations (e.g. access\
    \ control) may be useful.\n"
- title: 5.2.2.1.  SecurityRetries for S-HTTP Requests
  contents:
  - "5.2.2.1.  SecurityRetries for S-HTTP Requests\n   In the case of a request that\
    \ was made as an SHTTP request, it\n   indicates that for some reason the cryptographic\
    \ enhancements applied\n   to the request were unsatisfactory and that the request\
    \ should be\n   repeated with the options found in the response header.  Note\
    \ that\n   this can be used as a way to force a new public key negotiation if\n\
    \   the session key in use has expired or to supply a unique nonce for\n   the\
    \ purposes of ensuring request freshness.\n"
- title: 5.2.2.2.  SecurityRetries for HTTP Requests
  contents:
  - "5.2.2.2.  SecurityRetries for HTTP Requests\n   If the 420 code is returned in\
    \ response to an HTTP request, it\n   indicates that the request should be retried\
    \ using S-HTTP and the\n   cryptographic options indicated in the response header.\n"
- title: 5.2.3.  421 BogusHeader
  contents:
  - "5.2.3.  421 BogusHeader\n   This error code indicates that something about the\
    \ S-HTTP request was\n   bad. The error code is to be followed by an appropriate\
    \ explanation,\n   e.g.:\n           421 BogusHeader Content-Privacy-Domain must\
    \ be specified\n"
- title: 5.2.4.  422 SHTTP Proxy Authentication Required
  contents:
  - "5.2.4.  422 SHTTP Proxy Authentication Required\n   This response is analagous\
    \ to the 420 response except that the\n   options in the message refer to enhancements\
    \ that the client must\n   perform in order to satisfy the proxy.\n"
- title: 5.2.5.  320 SHTTP Not Modifed
  contents:
  - "5.2.5.  320 SHTTP Not Modifed\n   This response code is specifically for use\
    \ with proxy-server\n   interaction where the proxy has placed the If-Modified-Since\
    \ header\n   in the S-HTTP headers of its request. This response indicates that\n\
    \   the following S-HTTP message contains sufficient keying material for\n   the\
    \ proxy to forward the cached document for the new requestor.\n   In general,\
    \ this takes the form of an S-HTTP message where the actual\n   enhanced content\
    \ is missing, but all the headers and keying material\n   are retained. (I.e.\
    \ the optional content section of the CMS message\n   has been removed.) So, if\
    \ the original response was encrypted, the\n   response contains the original\
    \ DEK re-covered for the new recipient.\n   (Notice that the server performs the\
    \ same processing as it would have\n   in the server side caching case of 7.1\
    \ except that the message body\n   is elided.)\n"
- title: 5.2.6.  Redirection 3XX
  contents:
  - "5.2.6.  Redirection 3XX\n   These headers are again internal to HTTP, but may\
    \ contain S-HTTP\n   negotiation options of significance to S-HTTP. The request\
    \ should be\n   redirected in the sense of HTTP, with appropriate cryptographic\n\
    \   precautions being observed.\n"
- title: 5.3.  Limitations On Automatic Retries
  contents:
  - "5.3.  Limitations On Automatic Retries\n   Permitting automatic client retry\
    \ in response to this sort of server\n   response permits several forms of attack.\
    \  Consider for the moment\n   the simple credit card case:\n       The user views\
    \ a document which requires his credit card.  The\n       user verifies that the\
    \ DN of the intended recipient is acceptable\n       and that the request will\
    \ be encrypted and dereferences the\n       anchor.  The attacker intercepts the\
    \ server's reply and responds\n       with a message encrypted under the client's\
    \ public key containing\n       the Moved 301 header. If the client were to automatically\
    \ perform\n       this redirect it would allow compromise of the user's credit\n\
    \       card.\n"
- title: 5.3.1.  Automatic Encryption Retry
  contents:
  - "5.3.1.  Automatic Encryption Retry\n   This shows one possible danger of automatic\
    \ retries -- potential\n   compromise of encrypted information. While it is impossible\
    \ to\n   consider all possible cases, clients should never automatically\n   reencrypt\
    \ data unless the server requesting the retry proves that he\n   already has the\
    \ data. So, situations in which it would be acceptable\n   to reencrypt would\
    \ be if:\n       1. The retry response was returned encrypted under an inband\
    \ key\n       freshly generated for the original request.\n       2. The retry\
    \ response was signed by the intended recipient of the\n       original request.\n\
    \       3. The original request used an outband key and the response is\n    \
    \   encrypted under that key.\n   This is not an exhaustive list, however the\
    \ browser author would be\n   well advised to consider carefully before implementing\
    \ automatic\n   reencryption in other cases. Note that an appropriate behavior\
    \ in\n   cases where automatic reencryption is not appropriate is to query the\n\
    \   user for permission.\n"
- title: 5.3.2.  Automatic Signature Retry
  contents:
  - "5.3.2.  Automatic Signature Retry\n   Since we discourage automatic (without\
    \ user confirmation) signing in\n   even the usual case, and given the dangers\
    \ described above, it is\n   prohibited to automatically retry signature enchancement.\n"
- title: 5.3.3.  Automatic MAC Authentication Retry
  contents:
  - "5.3.3.  Automatic MAC Authentication Retry\n   Assuming that all the other conditions\
    \ are followed, it is\n   permissible to automatically retry MAC authentication.\n"
- title: 6.  Other Issues
  contents:
  - '6.  Other Issues

    '
- title: 6.1.  Compatibility of Servers with Old Clients
  contents:
  - "6.1.  Compatibility of Servers with Old Clients\n   Servers which receive requests\
    \ in the clear which should be secured\n   should return 'SecurityRetry 420' with\
    \ header lines set to indicate\n   the required privacy enhancements.\n"
- title: 6.2.  URL Protocol Type
  contents:
  - "6.2.  URL Protocol Type\n   We define a new URL protocol designator, 'shttp'.\
    \ Use of this\n   designator as part of an anchor URL implies that the target\
    \ server is\n   S-HTTP capable, and that a dereference of this URL should undergo\
    \ S-\n   HTTP processing.\n   Note that S-HTTP oblivious agents should not be\
    \ willing to\n   dereference a URL with an unknown protocol specifier, and hence\n\
    \   sensitive data will not be accidentally sent in the clear by users of\n  \
    \ non-secure clients.\n"
- title: 6.3.  Browser Presentation
  contents:
  - '6.3.  Browser Presentation

    '
- title: 6.3.1.  Transaction Security Status
  contents:
  - "6.3.1.  Transaction Security Status\n   While preparing a secure message, the\
    \ browser should provide a visual\n   indication of the security of the transaction,\
    \ as well as an\n   indication of the party who will be able to read the message.\
    \ While\n   reading a signed and/or enveloped message, the browser should\n  \
    \ indicate this and (if applicable) the identity of the signer. Self-\n   signed\
    \ certificates should be clearly differentiated from those\n   validated by a\
    \ certification hierarchy.\n"
- title: 6.3.2.  Failure Reporting
  contents:
  - "6.3.2.  Failure Reporting\n   Failure to authenticate or decrypt an S-HTTP message\
    \ should be\n   presented differently from a failure to retrieve the document.\n\
    \   Compliant clients may at their option display unverifiable documents\n   but\
    \ must clearly indicate that they were unverifiable in a way\n   clearly distinct\
    \ from the manner in which they display documents\n   which possessed no digital\
    \ signatures or documents with verifiable\n   signatures.\n"
- title: 6.3.3.  Certificate Management
  contents:
  - "6.3.3.  Certificate Management\n   Clients shall provide a method for determining\
    \ that HTTP requests are\n   to be signed and for determining which (assuming\
    \ there are many)\n   certificate is to be used for signature. It is suggested\
    \ that users\n   be presented with some sort of selection list from which they\
    \ may\n   choose a default. No signing should be performed without some sort of\n\
    \   explicit user interface action, though such action may take the form\n   of\
    \ a persistent setting via a user preferences mechanism (although\n   this is\
    \ discouraged.)\n"
- title: 6.3.4.  Anchor Dereference
  contents:
  - "6.3.4.  Anchor Dereference\n   Clients shall provide a method to display the\
    \ DN and certificate\n   chain associated with a given anchor to be dereferenced\
    \ so that users\n   may determine for whom their data is being encrypted.  This\
    \ should be\n   distinct from the method for displaying who has signed the document\n\
    \   containing the anchor since these are orthogonal pieces of encryption\n  \
    \ information.\n"
- title: 7.  Implementation Notes
  contents:
  - '7.  Implementation Notes

    '
- title: 7.1.  Preenhanced Data
  contents:
  - "7.1.  Preenhanced Data\n   While S-HTTP has always supported preenhanced documents,\
    \ in previous\n   versions it was never made clear how to actually implement them.\n\
    \   This section describes two methods for doing so: preenhancing the\n   HTTP\
    \ request/response and preenhancing the underlying data.\n"
- title: 7.1.1.  Motivation
  contents:
  - "7.1.1.  Motivation\n   The two primary motivations for preenhanced documents\
    \ are security\n   and performance. These advantages primarily accrue to signing\
    \ but may\n   also under special circumstances apply to confidentiality or\n \
    \  repudiable (MAC-based) authentication.\n   Consider the case of a server which\
    \ repeatedly serves the same\n   content to multiple clients. One such example\
    \ would be a server which\n   serves catalogs or price lists. Clearly, customers\
    \ would like to be\n   able to verify that these are actual prices. However, since\
    \ the\n   prices are typically the same to all comers, confidentiality is not\n\
    \   an issue. (Note: see Section 7.1.5 below for how to deal with this\n   case\
    \ as well).\n   Consequently, the server might wish to sign the document once\
    \ and\n   simply send the cached signed document out when a client makes a new\n\
    \   request, avoiding the overhead of a private key operation each time.\n   Note\
    \ that conceivably, the signed document might have been generated\n   by a third\
    \ party and placed in the server's cache. The server might\n   not even have the\
    \ signing key! This illustrates the security benefit\n   of presigning: Untrusted\
    \ servers can serve authenticated data without\n   risk even if the server is\
    \ compromised.\n"
- title: 7.1.2.  Presigned Requests/Responses
  contents:
  - "7.1.2.  Presigned Requests/Responses\n   The obvious implementation is simply\
    \ to take a single\n   request/response, cache it, and send it out in situations\
    \ where a new\n   message would otherwise be generated.\n"
- title: 7.1.3.  Presigned Documents
  contents:
  - "7.1.3.  Presigned Documents\n   It is also possible using S-HTTP to sign the\
    \ underlying data and send\n   it as an S-HTTP messsage. In order to do this,\
    \ one would take the\n   signed document (a CMS or MOSS message) and attach both\
    \ S-HTTP\n   headers (e.g. the S-HTTP request/response line, the Content-Privacy-\n\
    \   Domain) and the necessary HTTP headers (including a Content-Type that\n  \
    \ reflects the inner content).\n           SECURE * Secure-HTTP/1.4\n        \
    \   Content-Type: text/html\n           Content-Privacy-Domain: CMS\n        \
    \   Random signed message here...\n   This message itself cannot be sent, but\
    \ needs to be recursively\n   encapsulated, as described in the next section.\n"
- title: 7.1.4.  Recursive Encapsulation
  contents:
  - "7.1.4.  Recursive Encapsulation\n   As required by Section 7.3, the result above\
    \ needs to be itself\n   encapsulated to protect the HTTP headers. the obvious\
    \ case [and the\n   one illustrated here] is when confidentiality is required,\
    \ but the\n   auth enhancement or even the null transform might be applied instead.\n\
    \   That is, the message shown above can be used as the inner content of\n   a\
    \ new S-HTTP message, like so:\n           SECURE * Secure-HTTP/1.4\n        \
    \   Content-Type: application/s-http\n           Content-Privacy-Domain: CMS\n\
    \           Encrypted version of the message above...\n   To unfold this, the\
    \ receiver would decode the outer S-HTTP message,\n   reenter the (S-)HTTP parsing\
    \ loop to process the new message, see\n   that that too was S-HTTP, decode that,\
    \ and recover the inner content.\n   Note that this approach can also be used\
    \ to provide freshness of\n   server activity (though not of the document itself)\
    \ while still\n   providing nonrepudiation of the document data if a NONCE is\
    \ included\n   in the request.\n"
- title: 7.1.5.  Preencrypted Messages
  contents:
  - "7.1.5.  Preencrypted Messages\n   Although preenhancement works best with signature,\
    \ it can also be\n   used with encryption under certain conditions. Consider the\
    \ situation\n   where the same confidential document is to be sent out repeatedly.\n\
    \   The time spent to encrypt can be saved by caching the ciphertext and\n   simply\
    \ generating a new key exchange block for each recipient. [Note\n   that this\
    \ is logically equivalent to a multi- recipient message as\n   defined in both\
    \ MOSS and CMS and so care must be taken to use proper\n   PKCS-1 padding if RSA\
    \ is being used since otherwise, one may be open\n   to a low encryption exponent\
    \ attack [HAST96].\n"
- title: 7.2.  Proxy Interaction
  contents:
  - "7.2.  Proxy Interaction\n   The use of S-HTTP presents implementation issues\
    \ to the use of HTTP\n   proxies. While simply having the proxy blindly forward\
    \ responses is\n   straightforward, it would be preferable if S-HTTP aware proxies\
    \ were\n   still able to cache responses in at least some circumstances. In\n\
    \   addition, S-HTTP services should be usable to protect client-proxy\n   authentication.\
    \ This section describes how to achieve those goals\n   using the mechanisms described\
    \ above.\n"
- title: 7.2.1.  Client-Proxy Authentication
  contents:
  - "7.2.1.  Client-Proxy Authentication\n   When an S-HTTP aware proxy receives a\
    \ request (HTTP or S-HTTP) that\n   (by whatever access control rules it uses)\
    \ it requires to be S-HTTP\n   authenticated (and if it isn't already so), it\
    \ should return the 422\n   response code (5.7.4).\n   When the client receives\
    \ the 422 response code, it should read the\n   cryptographic options that the\
    \ proxy sent and determine whether or\n   not it is willing to apply that enhancement\
    \ to the message. If the\n   client is willing to meet these requirements, it\
    \ should recursively\n   encapsulate the request it previously sent using the\
    \ appropriate\n   options.  (Note that since the enhancement is recursively applied,\n\
    \   even clients which are unwilling to send requests to servers in the\n   clear\
    \ may be willing to send the already encrypted message to the\n   proxy without\
    \ further encryption.) (See Section 7.1 for another\n   example of a recursively\
    \ encapsulated message)\n   When the proxy receives such a message, it should\
    \ strip the outer\n   encapsulation to recover the message which should be sent\
    \ to the\n   server.\n"
- title: 8.  Implementation Recommendations and Requirements
  contents:
  - "8.  Implementation Recommendations and Requirements\n   All S-HTTP agents must\
    \ support the MD5 message digest and MAC\n   authentication. As of S-HTTP/1.4,\
    \ all agents must also support the\n   RSA-MD5-HMAC construction.\n   All S-HTTP\
    \ agents must support Outband, Inband, and DH key exchange.\n   All agents must\
    \ support encryption using DES-CBC.\n   Agents must support signature generation\
    \ and verification using\n   NIST-DSS.\n"
- title: 9.  Protocol Syntax Summary
  contents:
  - "9.  Protocol Syntax Summary\n   We present below a summary of the main syntactic\
    \ features of S-\n   HTTP/1.4, excluding message encapsulation proper.\n"
- title: 9.1.  S-HTTP (Unencapsulated) Headers
  contents:
  - "9.1.  S-HTTP (Unencapsulated) Headers\n   Content-Privacy-Domain: ('CMS' | 'MOSS')\n\
    \   Prearranged-Key-Info: <Hdr-Cipher>,<Key>,<Key-ID>\n   Content-Type: 'message/http'\n\
    \   MAC-Info: [hex(timeofday)',']<hash-alg>','hex(<hash-data>)','\n          \
    \ <key-spec>\n"
- title: 9.2.  HTTP (Encapsulated) Non-negotiation Options
  contents:
  - "9.2.  HTTP (Encapsulated) Non-negotiation Options\n   Key-Assign: <Method>','<Key-Name>','<Lifetime>','\n\
    \           <Ciphers>';'<Method-args>\n   Encryption-Identity: <name-class>','<key-sel>','<name-args>\n\
    \   Certificate-Info: <Cert-Fmt>','<Cert-Group>\n   Nonce: <string>\n   Nonce-Echo:\
    \ <string>\n"
- title: 9.3.  Encapsulated Negotiation Options
  contents:
  - "9.3.  Encapsulated Negotiation Options\n   SHTTP-Cryptopts: <scope>';'<string>(,<string>)*\n\
    \   SHTTP-Privacy-Domains: ('CMS' | 'MOSS')\n   SHTTP-Certificate-Types: ('X.509')\n\
    \   SHTTP-Key-Exchange-Algorithms: ('DH', 'RSA' | 'Inband' | 'Outband')\n   SHTTP-Signature-Algorithms:\
    \ ('RSA' | 'NIST-DSS')\n   SHTTP-Message-Digest-Algorithms:  ('RSA-MD2' | 'RSA-MD5'\
    \ | 'NIST-SHS'\n           'RSA-MD2-HMAC', 'RSA-MD5-HMAC', 'NIST-SHS-HMAC')\n\
    \   SHTTP-Symmetric-Content-Algorithms: ('DES-CBC' | 'DES-EDE-CBC' |\n       \
    \    'DES-EDE3-CBC' | 'DESX-CBC' | 'CDMF-CBC' | 'IDEA-CBC' |\n           'RC2-CBC'\
    \ )\n   SHTTP-Symmetric-Header-Algorithms: ('DES-ECB' | 'DES-EDE-ECB' |\n    \
    \       'DES-EDE3-EBC' | 'DESX-ECB' | 'CDMF-ECB' | 'IDEA-ECB' |\n           'RC2-ECB')\n\
    \   SHTTP-Privacy-Enhancements: ('sign' | 'encrypt' | 'auth')\n   Your-Key-Pattern:\
    \ <key-use>','<pattern-info>\n"
- title: 9.4.  HTTP Methods
  contents:
  - "9.4.  HTTP Methods\n   Secure * Secure-HTTP/1.4\n"
- title: 9.5.  Server Status Reports
  contents:
  - "9.5.  Server Status Reports\n   Secure-HTTP/1.4 200 OK\n   SecurityRetry 420\n\
    \   BogusHeader 421 <reason>\n"
- title: 10.  An Extended Example
  contents:
  - "10.  An Extended Example\n   We provide here a contrived example of a series\
    \ of S-HTTP requests\n   and replies. Rows of equal signs are used to set off\
    \ the narrative\n   from sample message traces. Note that the actual encrypted\
    \ or signed\n   message bodies would normally be binary garbage. In an attempt\
    \ to\n   preserve readability while still using (mostly) genuine messages, the\n\
    \   bodies of the requests have been base64 encoded. To regenerate actual\n  \
    \ S-HTTP messages, it is necessary to remove the base64 encoding from\n   the\
    \ message body.\n"
- title: 10.1.  A request using RSA key exchange with Inband key reply
  contents:
  - "10.1.  A request using RSA key exchange with Inband key reply\n   Alice, using\
    \ an S-HTTP-capable client, begins by making an HTTP\n   request which yields\
    \ the following response page:\n   ============================================================\n\
    \   200 OK HTTP/1.0\n   Server-Name: Navaho-0.1.3.3alpha\n   Certificate-Info:\
    \ CMS,MIAGCSqGSIb3DQEHAqCAMIACAQExADCABgkqh\n           kiG9w0BBwEAAKCAM\n   \
    \        IIBrTCCAUkCAgC2MA0GCSqGSIb3DQEBAgUAME0xCzAJBgNVBAYTAlVTMSAwH\n      \
    \     gYDVQQKExdSU0EgRGF0YSBTZWN1cml0eSwgSW5jLjEcMBoGA1UECxMTUGVyc\n         \
    \  29uYSBDZXJ0aWZpY2F0ZTAeFw05NDA0MDkwMDUwMzdaFw05NDA4MDIxODM4N\n           TdaMGcxCzAJBgNVBAYTAlVTMSAwHgYDVQQKExdSU0EgRGF0YSBTZWN1cml0e\n\
    \           SwgSW5jLjEcMBoGA1UECxMTUGVyc29uYSBDZXJ0aWZpY2F0ZTEYMBYGA1UEA\n   \
    \        xMPU2V0ZWMgQXN0cm9ub215MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAMy8Q\n      \
    \     cW7RMrB4sTdQ8Nmb2DFmJmkWn+el+NdeamIDElX/qw9mIQu4xNj1FfepfJNx\n         \
    \  zPvA0OtMKhy6+bkrlyMEU8CAwEAATANBgkqhkiG9w0BAQIFAANPAAYn7jDgi\n           rhiIL4wnP8nGzUisGSpsFsF4/7z2P2wqne6Qk8Cg/Dstu3RyaN78vAMGP8d8\n\
    \           2H5+Ndfhi2mRp4YHiGHz0HlK6VbPfnyvS2wdjCCAccwggFRAgUCQAAAFDANB\n   \
    \        gkqhkiG9w0BAQIFADBfMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXUlNBIERhd\n      \
    \     GEgU2VjdXJpdHksIEluYy4xLjAsBgNVBAsTJUxvdyBBc3N1cmFuY2UgQ2Vyd\n         \
    \  GlmaWNhdGlvbiBBdXRob3JpdHkwHhcNOTQwMTA3MDAwMDAwWhcNOTYwMTA3M\n           jM1OTU5WjBNMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXUlNBIERhdGEgU2Vjd\n\
    \           XJpdHksIEluYy4xHDAaBgNVBAsTE1BlcnNvbmEgQ2VydGlmaWNhdGUwaTANB\n   \
    \        gkqhkiG9w0BAQEFAANYADBVAk4GqghQDa9Xi/2zAdYEqJVIcYhlLN1FpI9tX\n      \
    \     Q1m6zZ39PYXK8Uhoj0Es7kWRv8hC04vqkOKwndWbzVtvoHQOmP8nOkkuBi+A\n         \
    \  QvgFoRcgOUCAwEAATANBgkqhkiG9w0BAQIFAANhAD/5Uo7xDdp49oZm9GoNc\n           PhZcW1e+nojLvHXWAU/CBkwfcR+FSf4hQ5eFu1AjYv6Wqf430Xe9Et5+jgnM\n\
    \           Tiq4LnwgTdA8xQX4elJz9QzQobkE3XVOjVAtCFcmiin80RB8AAAMYAAAAAAA\n   \
    \        AAAAA==\n   Encryption-Identity: DN-1779, null, CN=Setec Astronomy, OU=Persona\n\
    \           Certificate,O=\"RSA Data Security, Inc.\", C=US;\n   SHTTP-Privacy-Enhancements:\
    \ recv-required=encrypt\n   <A name=tag1 HREF=\"shttp://www.setec.com/secret\"\
    >\n   Don't read this. </A>\n   ============================================================\n\
    \   An appropriate HTTP request to dereference this URL would be:\n   ============================================================\n\
    \   GET /secret HTTP/1.0\n   Security-Scheme: S-HTTP/1.4\n   User-Agent: Web-O-Vision\
    \ 1.2beta\n   Accept: *.*\n   Key-Assign: Inband,1,reply,des-ecb;7878787878787878\n\
    \   ============================================================\n   The added\
    \ Key-Assign line that would not have been in an ordinary\n   HTTP request permits\
    \ Bob (the server) to encrypt his reply to Alice,\n   even though Alice does not\
    \ have a public key, since they would share\n   a key after the request is received\
    \ by Bob.  This request has the\n   following S-HTTP encapsulation:\n   ============================================================\n\
    \   Secure * Secure-HTTP/1.4\n   Content-Type: message/http\n   Content-Privacy-Domain:\
    \ CMS\n   MIAGCSqGSIb3DQEHA6CAMIACAQAxgDCBqQIBADBTME0xCzAJBgNVBAYTAlVTMSAw\n \
    \  HgYDVQQKExdSU0EgRGF0YSBTZWN1cml0eSwgSW5jLjEcMBoGA1UECxMTUGVyc29u\n   YSBDZXJ0aWZpY2F0ZQICALYwDQYJKoZIhvcNAQEBBQAEQCU/R+YCJSUsV6XLilHG\n\
    \   cNVzwqKcWzmT/rZ+duOv8Ggb7oO/d8H3xUVGQ2LsX4kYGq2szwj8Q6eWhsmhf4oz\n   lvMAADCABgkqhkiG9w0BBwEwEQYFKw4DAgcECFif7BadXlw3oIAEgZBNcMexKe16\n\
    \   +mNxx8YQPukBCL0bWqS86lvws/AgRkKPELmysBi5lco8MBCsWK/fCyrnxIRHs1oK\n   BXBVlsAhKkkusk1kCf/GbXSAphdSgG+d6LxrNZwHbBFOX6A2hYS63Iczd5bOVDDW\n\
    \   Op2gcgUtMJq6k2LFrs4L7HHqRPPlqNJ6j5mFP4xkzOCNIQynpD1rV6EECMIk/T7k\n   1JLSAAAAAAAAAAAAAA==\n\
    \   ============================================================\n   The data\
    \ between the delimiters is a CMS message, RSA enveloped for\n   Setec Astronomy.\n\
    \   Bob decrypts the request, finds the document in question, and is\n   ready\
    \ to serve it back to Alice.\n   An appropriate HTTP server response would be:\n\
    \   ============================================================\n   HTTP/1.0\
    \ 200 OK\n   Security-Scheme: S-HTTP/1.4\n   Content-Type: text/html\n   Congratulations,\
    \ you've won.\n   <A href=\"/prize.html\"\n    CRYPTOPTS=\"Key-Assign: Inband,alice1,reply,des-ecb;020406080a0c0e0f;\n\
    \    SHTTP-Privacy-Enhancements: recv-required=auth\">Click here to\n   claim\
    \ your prize</A>\n   ============================================================\n\
    \   This HTTP response, encapsulated as an S-HTTP message becomes:\n   ============================================================\n\
    \   Secure * Secure-HTTP/1.4\n   Content-Type: message/http\n   Prearranged-Key-Info:\
    \ des-ecb,697fa820df8a6e53,inband:1\n   Content-Privacy-Domain: CMS\n   MIAGCSqGSIb3DQEHBqCAMIACAQAwgAYJKoZIhvcNAQcBMBEGBSsOAwIHBAifqtdy\n\
    \   x6uIMYCCARgvFzJtOZBn773DtmXlx037ck3giqnV0WC0QAx5f+fesAiGaxMqWcir\n   r9XvT0nT0LgSQ/8tiLCDBEKdyCNgdcJAduy3D0r2sb5sNTT0TyL9uydG3w55vTnW\n\
    \   aPbCPCWLudArI1UHDZbnoJICrVehxG/sYX069M8v6VO8PsJS7//hh1yM+0nekzQ5\n   l1p0j7uWKu4W0csrlGqhLvEJanj6dQAGSTNCOoH3jzEXGQXntgesk8poFPfHdtj0\n\
    \   5RH4MuJRajDmoEjlrNcnGl/BdHAd2JaCo6uZWGcnGAgVJ/TVfSVSwN5nlCK87tXl\n   nL7DJwaPRYwxb3mnPKNq7ATiJPf5u162MbwxrddmiE7e3sST7naSN+GS0ateY5X7\n\
    \   AAAAAAAAAAA=\n   ============================================================\n\
    \   The data between the delimiters is a CMS message encrypted under a\n   randomly-chosen\
    \ DEK which can be recovered by computing:\n           DES-DECRYPT(inband:1,697fa820df8a6e53)\n\
    \   where 'inband:1' is the key exchanged in the Key-Assign line in the\n   original\
    \ request.\n"
- title: 10.2.  A request using the auth enhancement
  contents:
  - "10.2.  A request using the auth enhancement\n   There is a link on the HTML page\
    \ that was just returned, which Alice\n   dereferences, creating the HTTP message:\n"
- title: ============================================================
  contents:
  - '============================================================

    '
- title: GET /prize.html HTTP/1.0
  contents:
  - 'GET /prize.html HTTP/1.0

    '
- title: 'Security-Scheme: S-HTTP/1.4'
  contents:
  - 'Security-Scheme: S-HTTP/1.4

    '
- title: 'User-Agent: Web-O-Vision 1.1beta'
  contents:
  - 'User-Agent: Web-O-Vision 1.1beta

    '
- title: 'Accept: *.*'
  contents:
  - 'Accept: *.*

    '
- title: ============================================================
  contents:
  - '============================================================

    '
- title: 'Which, when encapsulated as an S-HTTP message, becomes:'
  contents:
  - 'Which, when encapsulated as an S-HTTP message, becomes:

    '
- title: ============================================================
  contents:
  - '============================================================

    '
- title: Secure * Secure-HTTP/1.4
  contents:
  - 'Secure * Secure-HTTP/1.4

    '
- title: 'Content-Type: message/http'
  contents:
  - 'Content-Type: message/http

    '
- title: MAC-Info:31ff8122,rsa-md5,b3ca4575b841b5fc7553e69b0896c416,inband:alice1
  contents:
  - 'MAC-Info:31ff8122,rsa-md5,b3ca4575b841b5fc7553e69b0896c416,inband:alice1

    '
- title: 'Content-Privacy-Domain: CMS'
  contents:
  - 'Content-Privacy-Domain: CMS

    '
- title: MIAGCSqGSIb3DQEHAaCABGNHRVQgL3ByaXplLmh0bWwgSFRUUC8xLjAKU2VjdXJp
  contents:
  - 'MIAGCSqGSIb3DQEHAaCABGNHRVQgL3ByaXplLmh0bWwgSFRUUC8xLjAKU2VjdXJp

    '
- title: dHktU2NoZW1lOiBTLUhUVFAvMS4xClVzZXItQWdlbnQ6IFdlYi1PLVZpc2lvbiAx
  contents:
  - 'dHktU2NoZW1lOiBTLUhUVFAvMS4xClVzZXItQWdlbnQ6IFdlYi1PLVZpc2lvbiAx

    '
- title: LjFiZXRhCkFjY2VwdDogKi4qCgoAAAAA
  contents:
  - 'LjFiZXRhCkFjY2VwdDogKi4qCgoAAAAA

    '
- title: ============================================================
  contents:
  - "============================================================\n   The data between\
    \ the delimiters is a CMS 'Data' representation of the\n   request.\n"
- title: 'Appendix: A Review of CMS'
  contents:
  - "Appendix: A Review of CMS\n   CMS (\"Cryptographic Message Syntax Standard\"\
    ) is a cryptographic\n   message encapsulation format, similar to PEM, based on\
    \ RSA's PKCS-7\n   cryptographic messaging syntax.\n   CMS is only one of two\
    \ encapsulation formats supported by S-HTTP, but\n   it is to be preferred since\
    \ it permits the least restricted set of\n   negotiable options, and permits binary\
    \ encoding.  In the interest of\n   making this specification more self-contained,\
    \ we summarize CMS here.\n   CMS is defined in terms of OSI's Abstract Syntax\
    \ Notation (ASN.1,\n   defined in X.208), and is concretely represented using\
    \ ASN.1's Basic\n   Encoding Rules (BER, defined in X.209).  A CMS message is\
    \ a sequence\n   of typed content parts. There are six content types, recursively\n\
    \   composable:\n           Data -- Some bytes, with no enhancement.\n       \
    \    SignedData -- A content part, with zero or more signature\n           blocks,\
    \ and associated keying materials. Keying materials\n           can be transported\
    \ via the degenerate case of no signature\n           blocks and no data.\n  \
    \         EnvelopedData -- One or more (per recipient) key exchange\n        \
    \   blocks and an encrypted content part.\n           DigestedData -- A content\
    \ part with a single digest block.\n           EncryptedData -- An encrypted content\
    \ part, with key\n           materials externally provided.\n   Here we will dispense\
    \ with convention for the sake of ASN.1-impaired\n   readers, and present a syntax\
    \ for CMS in informal BNF (with much\n   gloss).  In the actual encoding, most\
    \ productions have explicit tag\n   and length fields.\n   Message = *Content\n\
    \   Content = Data | SignedData | EnvelopedData |\n                   DigestedData\
    \ | EncryptedData\n   Data = Bytes\n   SignedData = *DigestAlg Content *Certificates\n\
    \                    *CRLs SignerInfo*\n   EnvelopedData = *RecipientInfo BulkCryptAlg\n\
    \                   Encrypted(Content)\n   DigestedData = DigestAlg Content DigestBytes\n\
    \   EncryptedData = BulkCryptAlg Encrypted(Bytes)\n   SignerInfo = CertID ...\
    \ Encrypted(DigestBytes) ...\n   RecipientInfo = CertID KeyCryptAlg Encrypted(DEK)\n"
- title: 'Appendix: Internet Media Type message/s-http'
  contents:
  - "Appendix: Internet Media Type message/s-http\n   In addition to defining the\
    \ S-HTTP/1.4 protocol, this document serves\n   as the specification for the Internet\
    \ media type \"message/s-http\".\n   The following is to be registered with IANA.\n\
    \           Media Type name:        message\n           Media subtype name:  \
    \   s-http\n           Required parameters:    none\n           Optional parameters:\
    \    version, msgtype\n             version: The S-HTTP version number of the\
    \ enclosed message\n             (e.g. \"1.4\"). If not present, the version can\
    \ be\n                   determined from the first line of the body.\n       \
    \      msgtype: The message type -- \"request\" or \"response\".\n           \
    \        If not present, the type can be determined from the\n               \
    \    first line of the body.\n             Encoding considerations: only \"7bit\"\
    , \"8bit\", or \"binary\"\n                   are permitted.\n             Security\
    \ considerations: this is a security protocol.\n"
- title: Bibliography and References
  contents:
  - "Bibliography and References\n   [BELL96]    Bellare, M., Canetti, R., Krawczyk,\
    \ H., \"Keying Hash\n               Functions for Message Authentication\", Preprint.\n\
    \   [FIPS-46-1] Federal Information Processing Standards Publication\n       \
    \        (FIPS PUB) 46-1, Data Encryption Standard, Reaffirmed\n             \
    \  1988 January 22 (supersedes FIPS PUB 46, 1977 January\n               15).\n\
    \   [FIPS-81]   Federal Information Processing Standards Publication\n       \
    \        (FIPS PUB) 81, DES Modes of Operation, 1980 December 2.\n   [FIPS-180]\
    \  Federal Information Processing Standards Publication\n               (FIPS\
    \ PUB) 180-1, \"Secure Hash Standard\", 1995 April 17.\n   [FIPS-186]  Federal\
    \ Information Processing Standards Publication\n               (FIPS PUB) 186,\
    \ Digital Signature Standard, 1994 May 19.\n   [HAST86]    Hastad, J., \"On Using\
    \ RSA With Low Exponents in a Public\n               Key Network,\" Advances in\
    \ Cryptology-CRYPTO 95\n               Proceedings, Springer-Verlag, 1986.\n \
    \  [JOHN93]    Johnson, D.B., Matyas, S.M., Le, A.V., Wilkins, J.D.,\n       \
    \        \"Design of the Commercial Data Masking Facility Data\n             \
    \  Privacy Algorithm,\" Proceedings 1st ACM Conference on\n               Computer\
    \ & Communications Security, November 1993,\n               Fairfax, VA., pp.\
    \ 93-96.\n   [KRAW96b]   Krawczyk, H. personal communication.\n   [LAI92]    \
    \ Lai, X. \"On the Design and Security of Block Ciphers,\"\n               ETH\
    \ Series in Information Processing, v. 1, Konstanz:\n               Hartung-Gorre\
    \ Verlag, 1992.\n   [PKCS-6]    RSA Data Security, Inc. \"Extended Certificate\
    \ Syntax\n               Standard\", PKCS-6, Nov 1, 1993.\n   [CMS]       Housley,\
    \ R., \"Cryptographic Message Syntax\", RFC 2630,\n               June 1999.\n\
    \   [RFC-822]   Crocker, D., \"Standard For The Format Of ARPA Internet\n    \
    \           Text Messages\", STD 11, RFC 822, August 1982.\n   [RFC-1319]  Kaliski,\
    \ B., \"The MD2 Message-Digest Algorithm\", RFC\n               1319, April 1992.\n\
    \   [RFC-1321]  Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC 1321,\n\
    \               April 1992.\n   [RFC-1421]  Linn, J., \"Privacy Enhancement for\
    \ Internet Electronic\n               Mail:  Part I: Message Encryption and Authentication\n\
    \               Procedures\", RFC 1421, February 1993.\n   [RFC-1422]  Kent, S.,\
    \ \"Privacy Enhancement for Internet Electronic\n               Mail:  Part II:\
    \ Certificate-Based Key Management\", RFC\n               1422, February 1993.\n\
    \   [RFC-1779]  Kille, S., \"A String Representation of Distinguished\n      \
    \         Names\", RFC 1779, March 1995.\n   [RFC-2045]  Freed, N. and N. Borenstein,\
    \ \"Multipurpose Internet Mail\n               Extensions (MIME) Part One: Format\
    \ of Internet Message\n               Bodies\", RFC 2045, September 1993.\n  \
    \ [RFC-1738]  T. Berners-Lee, \"Uniform Resource Locators (URLs)\", RFC\n    \
    \           1738, December 1994.\n   [RFC-1847]  Galvin, J., Murphy, S., Crocker,\
    \ S., and N. Freed,\n               \"Security Muliparts for MIME: Multipart/Signed\
    \ and\n               Multipart/Encrypted\", RFC 1847, October 1995.\n   [RFC-1848]\
    \  Crocker, S., Freed, N., Galvin, J., and S. Murphy, \"MIME\n               Object\
    \ Security Services\", RFC 1848, October 1995.\n   [RFC-1864]  Myers, J.  and\
    \ M. Rose, \"The Content-MD5 Header Field\",\n               RFC 1864, October\
    \ 1995.\n   [RFC-2616] Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n   \
    \            Masinter, L., Leach, P. and T. Berners-Lee, \"Hypertext\n       \
    \        Transfer Protocol -- HTTP/1.1\" RFC 2616, June 1999.\n   [RFC-2617] \
    \ Franks, J., Hallam-Baker, P., Hostetler, J., Leach, P.,\n               Luotonen,\
    \ A. and L. Stewart, \"HTTP Authentication: Basic\n               and Digest Access\
    \ Authentication\", RFC 2617, June 1999.\n   [RFC-2104]  Krawczyk, H., Bellare,\
    \ M. and R.  Canetti, \"HMAC: Keyed-\n               Hashing for Message Authentication\"\
    , RFC 2104, February\n               1997.\n   [SHTML]     Rescorla, E. and A.\
    \ Schiffman, \"Security Extensions For\n               HTML\", RFC 2659, August\
    \ 1999.\n   [VANO95]    B. Prennel and P. van Oorschot, \"On the security of two\n\
    \               MAC algorithms\", to appear Eurocrypt'96.\n   [X509]      CCITT\
    \ Recommendation X.509 (1988), \"The Directory -\n               Authentication\
    \ Framework\".\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   This entire document is about security.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Eric Rescorla\n   RTFM, Inc.\n   30 Newell Road, #16\n\
    \   East Palo Alto, CA 94303\n   Phone: (650) 328-8631\n   EMail: ekr@rtfm.com\n\
    \   Allan M. Schiffman\n   SPYRUS/Terisa\n   5303 Betsy Ross Drive\n   Santa Clara,\
    \ CA 95054\n   Phone: (408) 327-1901\n   EMail: ams@terisa.com\n"
- title: 15.  Full Copyright Statement
  contents:
  - "15.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
