- title: __initial_text__
  contents:
  - "                   Comments on the RCTE TELNET Option\n   RFC 560 describes a\
    \ Remote Controlled Transmission and Echoing TELNET\n   option.  Its authors provide\
    \ a framework wherein a serving host may\n   control two aspects of TELNET communication\
    \ over the (simplex) user-\n   to-server path.\n      Commands are introduced\
    \ which govern\n         1. when (and which) characters shall be echoed by the\
    \ user, and\n         2. when (and which) characters shall be transmitted by the\n\
    \            user.\n      Motivation for the option was based on two considerations:\n\
    \         1. the latency between striking and printing of a character\n      \
    \      which is to be echoed by a remote server is disconcerting to\n        \
    \    the human typist, and\n         2. character-at-a-time transmission introduces\
    \ processing\n            inefficiencies (for IMPS, for servers, for users) and\n\
    \            decreases effective channel thruputs over the net.\n   The author\
    \ feels that the RCTE description is in error (or at least\n   unclear [1]) in\
    \ its treatment of when characters are to be\n   transmitted.  However, discussion\
    \ of the subject in the RCTE\n   specification is incomplete, so it is difficult\
    \ to point to a\n   statement which is \"wrong.\"  Rather, the present objections\
    \ are based\n   on inferences drawn from the sample TENEX interaction\n   Perhaps\
    \ there is some misunderstanding of the original issues to\n   which RCTE now\
    \ addresses itself.\n   Original Motivation for Remote Controlled Echoing (RCE)\n\
    \   RFC 357 (An Echoing Strategy for Satellite Links)  introduced a need\n   for\
    \ RCE for users who are separated from a service host by a\n   satellite link.\
    \  The motivation was to lessen human frustration and\n   confusion;  no consideration\
    \ was given to resulting processing\n   inefficiencies or channel thruputs.\n\
    \   (In the remainder of this RFC,  we consider character transmission\n   apart\
    \ from echoing considerations.)\n   It was recognized that the human's best interests\
    \ could be served if\n   user-to-server transmission were performed on a character-by-\n\
    \   character basis,  (the implicit assumption being that this insured\n   the\
    \ most rapid server response possible).  This scheme allowed for\n   the classic\
    \ overlap of (network) I/O and computation,  and was thus\n   efficient as far\
    \ as the (human) user was concerned.\n   Concessions were made in the transmission\
    \ strategy when it was\n   accepted that the serving process could not in fact\
    \ do any\n   significant processing until a completed command was available.\n\
    \   Ideally then, users should be able to buffer characters until they\n   have\
    \ a completed command and then fire off the entire command in a\n   single \"\
    packet,\"  with the resultant savings in channel usage and a\n   greater per-packet\
    \ data efficiency.  The characters which delimited\n   commands were called wakeup\
    \ characters, in 357,  for their effect on\n   the serving process.  RCTE calls\
    \ them transmission characters for the\n   effect they have at the User TELNET.\n\
    \   The key here is that it is quite possible for a human,  separated by\n   a\
    \ satellite link from his remote host,  to type several completed\n   commands\
    \ - and to therefore initiate several packet transmissions-\n   all the while\
    \ awaiting the server's response to his first command.\n   Again we see the overlap\
    \ of I/O and computation,  and again we\n   achieve maximum efficiency from the\
    \ human's viewpoint.\n   The problem,  however,  is that wakeup (transmission)\
    \ character sets\n   change.  And there will always be a finite amount of time\
    \ [the one-\n   way transmission time] during which the set definitions will differ\n\
    \   between server and user.  This says that during such times the user\n   will\
    \ be sending off packets which do not contain completed commands,\n   (or contain\
    \ more than a single completed command),  or he will be\n   buffering characters\
    \ beyond the end of a completed command.  (A\n   fourth alternative is that he\
    \ may actually still be doing the right\n   thing by chance).  Buffering beyond\
    \ the end of a command is the only\n   case which lessens processing efficiency\
    \ for the human,  however.\n"
- title: Dissatisfaction With RCTE
  contents:
  - "Dissatisfaction With RCTE\n   Here is the author's complaint:  RCTE [at least\
    \ the sample\n   interaction which allowed transmission (by default) only at break\n\
    \   characters] would have the TELNET user wait until he knows exactly\n   the\
    \ wakeup (transmission) character set being used by the server !\n   Ideal channel\
    \ utilization might be achieved,  since no \"unnecessary\"\n   packets are sent\
    \ (and, strangely, no extra characters are allowed in\n   the current packet)\
    \ but the overlap of I/O and computation has been\n   eliminated,  and the human\
    \ has an extra round-trip time added to the\n   server's processing time.  This\
    \ is wrong.\n"
- title: An Alternative Implementation
  contents:
  - "An Alternative Implementation\n   Unless a round-trip time penalty is to be paid\
    \ by the human at every\n   break interaction,  the user TELNET must transmit\
    \ characters based on\n   the transmission character set in effect at the moment\
    \ the characters\n   are typed.  And unless the step-by-step interaction developed\
    \ in the\n   RCTE TENEX example was not a true representation of the relative\n\
    \   temporal occurances of events,  RCTE did not do this.\n      The sample TENEX\
    \ interaction showed the user typing\n   (T:) LOGIN ARPA <cr>\n      while the\
    \ break set included <space>  and <cr>.  The only\n      transmission characters\
    \ in effect were the break characters - by\n      default.  The RCTE example showed\
    \ that the LOGIN <space> phrase\n      was,  properly,  a completed command; \
    \ it was transmitted.  But\n      while the alternative transmission strategy\
    \ of the current RFC\n      would \"recognize\" the ARPA <cr> phrase as a second\
    \ completed\n      command,  and thus initiate a second transmission,  RCTE withholds\n\
    \      judgment until the server respecifies the transmission classes.\n     \
    \ Response for the user suffers.\n      One might also ask what transmission strategy\
    \ was to be undertaken\n      when two users were,  say,  linked thru a TENEX.\
    \  Transmission\n      should obviously be at every character.  RCTE would send\
    \ the first\n      single character packet and then wait to be sure that a single\n\
    \      character did in fact delimit the next command also.  It would\n      wait\
    \ a long time it would seem,  since no break interaction would\n      occur until\
    \ the end of the line (<cr>).  The user would be echoing\n      like a champ,\
    \  but no characters would be transmitted for the\n      linked party's inspection.\n\
    \      If we adopt the convention that transmission decisions should be\n    \
    \  based on the transmission set [and by default,  the break set]  in\n      effect\
    \ at the time the character is typed,  then the sample\n      interaction might\
    \  in fact look like this:\n   P:  TENEX  1.31.18,   TENEX EXEC  1.50.2  <cr>\
    \ <lf>@\n   T:  LOGIN <space>\n   P:  LOGIN <space> } >>>>>> NOTE: Typing and\
    \ printing occurs simul-\n   U:  LOGIN <space>                taneously up to\
    \ the <space> at\n                                    which point the human \"\
    types-ahead.\"\n   T:               ARPA <cr>\n   U:  ARPA <cr>             <<key:\
    \ the user transmits a second packet.\n   S:  <space> <IAC> <SB> <RCTE> <0>\n\
    \   P:  <space> AR\n   S: <cr> <lf> (PASSWORD): <IAC> <SB> <RCTE> <7>\n      \
    \        [the server sends while text is printing]\n   P:            PA <cr> <lf>\
    \ (PASSWORD):\n   T: WASHINGTON <space>\n   U:  WASHINGTON <space>\n   T:    \
    \                100\n   S:  <space> <IAC> <SB> <RCTE> <3>\n   P:  <space> 100\n\
    \   T:                             0          [Again printing is\n           \
    \                                   simultaneous to typing]\n   P:           \
    \      0\n   T:                              <cr>\n   P:                  <cr>\n\
    \   U:  1000 <cr>\n   S:  <cr> <lf> JOB ...\n   The interaction will not necessarily\
    \ be the same each time.  It\n   depends on the typing speed of the user and response\
    \ time of the\n   server.  For this example,  both channel utilization and performance\n\
    \   for the human are perfect,  since the transmission set [even though\n   it\
    \ was only the default break set]  did not change.\n"
- title: Unsolicited Output
  contents:
  - "Unsolicited Output\n   The question of unsolicited output arise again.  The treatment\
    \ in 560\n   was simplified over that of 357 only because of the RCTE transmission\n\
    \   strategy.  No output could possibly be returning for a command which\n   hasn't\
    \ been sent yet (!),  so the message must be \"SYSTEM GOING\n   DOWN.\"\n   RFC\
    \ 357 outlines when unsolicited output can be recognized and when\n   it should\
    \ be printed,  in line with the alternate transmission scheme\n   proposed.  The\
    \ requirement that such system alerts be terminated by\n   RCTE commands is of\
    \ course the proper way to handle such interrupts;\n   this clarification of the\
    \ unsatisfactory solution in 357 is\n   appreciated.\n"
- title: TIP Buffering
  contents:
  - "TIP Buffering\n   RCTE as defined cannot allow a user to transmit when his buffer\
    \ is\n   full, else he might send a break character. [presumably the buffer\n\
    \   fills because we are waiting for break (transmission)  redefinition].\n  \
    \ The response to the command delimited by the break character could\n   return\
    \ before the characters, of the command were \"echoed.\"  RCTE\n   would thus\
    \ demand that it be printed first,  and the listing would be\n   out of order.\n\
    \   The alternative transmission strategy eliminates this problem since\n   transmission\
    \ of a full buffer is no worse than guessing incorrectly\n   that the last character\
    \ in the buffer is a transmission character.\n"
- title: A further suggestion
  contents:
  - "A further suggestion\n   All server-to-user echoing could be eliminated if control\
    \ bytes were\n   sent to indicate which break sets should be echoed and which\n\
    \   shouldn't.\n"
- title: Endnotes
  contents:
  - "Endnotes\n   [1] for example:  statement 2E2F does not properly distinguish\n\
    \   between the \"occurrence\" of a break character and the \"occurrence\" of\n\
    \   a Transmission character.  The present RFC shows that they are\n   fundamentally\
    \ different.\n"
