- title: __initial_text__
  contents:
  - '       Integrated Services in the Presence of Compressible Flows

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   An Integrated Services (int-serv) router performs admission control\n\
    \   and resource allocation based on the information contained in a TSpec\n  \
    \ (among other things).  As currently defined, TSpecs convey\n   information about\
    \ the data rate (using a token bucket) and range of\n   packet sizes of the flow\
    \ in question.  However, the TSpec may not be\n   an accurate representation of\
    \ the resources needed to support the\n   reservation if the router is able to\
    \ compress the data at the link\n   level.  This specification describes an extension\
    \ to the TSpec which\n   enables a sender of potentially compressible data to\
    \ provide hints to\n   int-serv routers about the compressibility they may obtain.\
    \  Routers\n   which support appropriate compression take advantage of the hint\
    \ in\n   their admission control decisions and resource allocation procedures;\n\
    \   other routers ignore the hint.  An initial application of this\n   approach\
    \ is to notify routers performing real-time transport protocol\n   (RTP) header\
    \ compression that they may allocate fewer resources to\n   RTP flows.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1      Introduction  ...........................................\
    \  2\n   2      Addition of a Hint to the Sender TSpec  .................  3\n\
    \   3      Admission Control and Resource Allocation  ..............  4\n   4\
    \      Object Format  ..........................................  8\n   4.1  \
    \  Hint Numbering  .........................................  9\n   5      Backward\
    \ Compatibility  ................................. 10\n   6      Security Considerations\
    \  ................................ 10\n   7      IANA Considerations  ....................................\
    \ 11\n   8      Acknowledgments  ........................................ 11\n\
    \   9      References  ............................................. 11\n   10\
    \     Authors' Addresses  ..................................... 12\n   11    \
    \ Full Copyright Statement ................................ 13\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   In an Integrated Services network, RSVP [RFC 2205] may be\
    \ used as a\n   signalling protocol by which end nodes and network elements exchange\n\
    \   information about resource requirements, resource availability, and\n   the\
    \ establishment and removal of resource reservations.  The\n   Integrated Services\
    \ architecture currently defines two services,\n   Controlled-Load [RFC 2211]\
    \ and Guaranteed [RFC 2212].  When\n   establishing a reservation using either\
    \ service, RSVP requires a\n   variety of information to be provided by the sender(s)\
    \ and\n   receiver(s) for a particular reservation which is used for the\n   purposes\
    \ of admission control and allocation of resources to the\n   reservation.  Some\
    \ of this information is provided by the receiver in\n   a FLOWSPEC object; some\
    \ is provided by the sender in a SENDER_TSPEC\n   object [RFC 2210].\n   A situation\
    \ that is not handled well by the current specs arises when\n   a router that\
    \ is making an admission control decision is able to\n   perform some sort of\
    \ compression on the flow for which a reservation\n   is requested.  For example,\
    \ suppose a router is able to perform\n   IP/UDP/RTP header compression on one\
    \ of its interfaces [RFC 2508].\n   The bandwidth needed to accommodate a compressible\
    \ flow on that\n   interface would be less than the amount contained in the\n\
    \   SENDER_TSPEC.  Thus the router might erroneously reject a reservation\n  \
    \ that could in fact have been accommodated.  At the same time, the\n   sender\
    \ is not at liberty to reduce its TSpec to account for the\n   compression of\
    \ the data, since it does not know if the routers along\n   the path are in fact\
    \ able to perform compression.  Furthermore, it is\n   probable that only a subset\
    \ of the routers on the path (e.g., those\n   connected to low-speed serial links)\
    \ will perform compression.\n   This specification describes a mechanism by which\
    \ the sender can\n   provide a hint to network elements regarding the compressibility\
    \ of\n   the data stream that it will generate.  Network elements may use this\n\
    \   hint as an additional piece of data when making admission control and\n  \
    \ resource allocation decisions.\n   This specification is restricted to the case\
    \ where compression is\n   performed only on a link-by-link basis, as with header\
    \ compression.\n   Other cases (e.g., transcoding, audio silence detection) which\
    \ would\n   affect the bandwidth consumed at all downstream nodes are for further\n\
    \   study.  In these latter cases, it would be necessary to modify a\n   sender\
    \ TSpec as it is passed through a compressing node.  In the\n   approach presented\
    \ here, the sender TSpec that appears on the wire is\n   never modified, just\
    \ as specified in [RFC 2210].\n"
- title: 2. Addition of a Hint to the Sender TSpec
  contents:
  - "2. Addition of a Hint to the Sender TSpec\n   The appropriate place for a `compressibility\
    \ hint' is the Sender\n   TSpec.  The reasons for this choice are:\n      -  The\
    \ sender is the party who knows best what the data will look\n         like.\n\
    \      -  Unlike the Adspec, the Sender TSpec is not modified in transit\n   \
    \   -  From the perspective of RSVP, the Sender TSpec is  a set of\n         opaque\
    \ parameters that are passed to `traffic control'\n         (admission control\
    \ and resource allocation); the\n         compressibility hint is just such a\
    \ parameter.\n   An alternative to putting this information in the TSpec would\
    \ be to\n   use an additional object in the RSVP PATH message.  While this could\n\
    \   be made to work for RSVP, it does not address the issue of how to get\n  \
    \ the same information to an intserv router when mechanisms other than\n   RSVP\
    \ are used to reserve resources.  It would also imply a change to\n   RSVP message\
    \ processing just for the purposes of getting more\n   information to entities\
    \ that are logically not part of RSVP\n   (admission control and resource allocation).\
    \ The inclusion of the\n   information in the TSpec seems preferable and more\
    \ consistent with\n   the Integrated Services architecture.\n   The contents of\
    \ the hint are likely to vary depending on the exact\n   scenario.  The hint needs\
    \ to tell the routers that receive it:\n      -  the type of compression that\
    \ is possible on this flow (e.g.\n         IP/UDP/RTP);\n      -  enough information\
    \ to enable a router to determine the likely\n         compression ratio that\
    \ may be achieved.\n   In a simple case such as IP/UDP/RTP header compression,\
    \ it may be\n   sufficient to tell the routers nothing more than the fact that\n\
    \   IP/UDP/RTP data is being sent. Knowing this fact, the maximum packet\n   size\
    \ of the flow (from the TSpec), and the local conditions at the\n   router, may\
    \ be sufficient to allow the router to determine the\n   reduction in bandwidth\
    \ that compression will allow.  In other cases,\n   it may be helpful or necessary\
    \ for the sender to include additional\n   quantitative information to assist\
    \ in the calculation of the\n   compression ratio.  To handle these cases, additional\
    \ parameters\n   containing various amounts of information may be added to the\
    \ sender\n   TSpec.  Details of the encoding of these parameters, following the\n\
    \   approach originally described in [RFC 2210] are described below.\n"
- title: 3. Admission Control and Resource Allocation
  contents:
  - "3. Admission Control and Resource Allocation\n   Integrated Services routers\
    \ make admission control and resource\n   allocation decisions based on, among\
    \ other things, information in the\n   sender TSpec.  If a router receives a sender\
    \ TSpec which contains a\n   compressibility hint, it may use the hint to calculate\
    \ a `compressed\n   TSpec' which can be used as input to the admission control\
    \ and\n   resource allocation processes in place of the TSpec provided by the\n\
    \   sender.  To make this concrete, consider the following simple\n   example.\
    \  A router receives a reservation request for controlled load\n   service where:\n\
    \      -  The Sender TSpec and Receiver TSpec contain identical token\n      \
    \   bucket parameters;\n      -  The rate parameter in the token bucket (r) is\
    \ 48 kbps;\n      -  The token bucket depth (b) is 120 bytes;\n      -  The maximum\
    \ packet size (M) in the TSpecs is 120 bytes;\n      -  The minimum policed unit\
    \ (m) is 64 bytes;\n      -  The Sender TSpec contains a compressibility hint\
    \ indicating\n         that the data is IP/UDP/RTP;\n      -  The compressibility\
    \ hint includes a compression factor of 70%,\n         meaning that IP/UDP/RTP\
    \ header compression will cause a\n         reduction in bandwidth consumed at\
    \ the link level by a factor\n         of 0.7 (the result of compressing 40 bytes\
    \ of IP/UDP/RTP header\n         to 4 bytes on a 120 byte packet)\n      -  The\
    \ interface on which the reservation is to be installed is\n         able to perform\
    \ IP/UDP/RTP header compression.\n   The router may thus conclude that it can\
    \ scale down the token bucket\n   parameters r and b by a factor of 0.7, i.e.,\
    \ to 33.6 kbps and 84\n   bytes respectively.  M may be scaled down by the same\
    \ factor (to 84\n   bytes), but a different calculation should be used for m.\
    \  If the\n   sender actually sends a packet of size m, its header may be\n  \
    \ compressed from 40 bytes to 4, thus reducing the packet to 28 bytes;\n   this\
    \ value should be used for m.\n   Note that if the source always sends packets\
    \ of the same size and\n   IP/UDP/RTP always works perfectly, the compression\
    \ factor is not\n   strictly needed.  The router can independently determine that\
    \ it can\n   compress the 40 bytes of IP/UDP/RTP header to 4 bytes (with high\n\
    \   probability).  To determine the worst-case (smallest) gain provided\n   by\
    \ compression, it can assume that the sender always sends maximum\n   sized packets\
    \ at 48 kbps, i.e., a 120 byte packet every 20\n   milliseconds.  The router can\
    \ conclude that these packets would be\n   compressed to 84 bytes, yielding a\
    \ token bucket rate of 33.6 kbps and\n   a token bucket depth of 84 bytes as before.\
    \  If the sender is willing\n   to allow an independent calculation of compression\
    \ gain by the\n   router, the explicit compression factor may be omitted from\
    \ the\n   TSpec.  Details of the TSpec encoding are provided below.\n   To generalize\
    \ the above discussion, assume that the Sender TSpec\n   consists of values (r,\
    \ b, p, M, m), that the explicit compression\n   factor provided by the sender\
    \ is f percent, and that the number of\n   bytes saved by compression is N, independent\
    \ of packet size.  The\n   parameters in the compressed TSpec would be:\n    \
    \ r' = r * f/100\n     b' = b * f/100\n     p' = p\n     M' = M-N\n     m' = m-N\n\
    \   The calculations for r' and b' reflect that fact that f is expressed\n   as\
    \ a percentage and must therefore be divided by 100.  The\n   calculations for\
    \ M' and m' hold only in the case where the\n   compression algorithm reduces\
    \ packets by a certain number of bytes\n   independent of content or length of\
    \ the packet, as is true for header\n   compression.  Other compression algorithms\
    \ may not have this\n   property.  In determining the value of N, the router may\
    \ need to make\n   worst case assumptions about the number of bytes that may be\
    \ removed\n   by compression, which depends on such factors as the presence of\
    \ UDP\n   checksums and the linearity of RTP timestamps.\n   All these adjusted\
    \ values are used in the compressed TSpec.  The\n   router's admission control\
    \ and resource allocation algorithms should\n   behave as if the sender TSpec\
    \ contained those values.  [RFC 2205]\n   provides a set of rules by which sender\
    \ and receiver TSpecs are\n   combined to calculate a single `effective' TSpec\
    \ that is passed to\n   admission control.  When a reservation covering multiple\
    \ senders is\n   to be installed, it is necessary to reduce each sender TSpec\
    \ by its\n   appropriate compression factor. The set of sender TSpecs that apply\n\
    \   to a single reservation on an interface are added together to form\n   the\
    \ effective sender TSpec, which is passed to traffic control.  The\n   effective\
    \ receiver TSpec need not be modified; traffic control takes\n   the greatest\
    \ lower bound of these two TSpecs when making its\n   admission control and resource\
    \ allocation decisions.\n   The handling of the receiver RSpec depends on whether\
    \ controlled load\n   or guaranteed service is used.  In the case of controlled\
    \ load, no\n   additional processing of RSpec is needed.  However, a guaranteed\n\
    \   service RSpec contains a rate term R which does need to be adjusted\n   downwards\
    \ to account for compression.  To determine how R should be\n   adjusted, we note\
    \ that the receiver has chosen R to meet a certain\n   delay goal, and that the\
    \ terms in the delay equation that depend on R\n   are b/R and C/R (when the peak\
    \ rate is large).  The burstsize b in\n   this case is the sum of the burstsizes\
    \ of all the senders for this\n   reservation, and each of these numbers has been\
    \ scaled down by the\n   appropriate compression factor.  Thus, R should be scaled\
    \ down using\n   an average compression factor\n      f_avg = (b1*f1 + b2*f2 +\
    \ ... + bn*fn)/(b1 + b2 + ... bn)\n   where bk is the burstsize of sender k and\
    \ fk is the corresponding\n   compression factor for this sender.  Note that f_avg,\
    \ like the\n   individual fi's, is a percentage.  Note also that this results\
    \ in a\n   compression factor of f in the case where all senders use the same\n\
    \   compression factor f.\n   To prevent an increase in delay caused by the C/R\
    \ term when the\n   reduced value of R is used for the reservation, it is necessary\
    \ for\n   this hop to `inflate' its value of C by dividing it by (f_avg/100).\n\
    \   This will cause the contribution to delay made by this hop's C term\n   to\
    \ be what the receiver would expect when it chooses its value of R.\n   There\
    \ are certain risks in adjusting the resource requirements\n   downwards for the\
    \ purposes of admission control and resource\n   allocation.  Most compression\
    \ algorithms are not completely\n   deterministic, and thus there is a risk that\
    \ a flow will turn out to\n   be less compressible than had been assumed by admission\
    \ control.\n   This risk is reduced by the use of the explicit compression factor\n\
    \   provided by the sender, and may be minimized if the router makes\n   worst\
    \ case assumptions about the amount of compression that may be\n   achieved. \
    \ This is somewhat analogous to the tradeoff between making\n   worst case assumptions\
    \ when performing admission control or making\n   more optimistic assumptions,\
    \ as in the case of measurement-based\n   admission control.  If a flow turns\
    \ out to be less compressible that\n   had been assumed when performing admission\
    \ control, any extra traffic\n   will need to be policed according to normal intserv\
    \ rules.  For\n   example, if the router assumed that the 48 kbps stream above\
    \ could be\n   compressed to 33.6 kbps and it was ultimately possible to compress\
    \ it\n   to 35 kbps, the extra 1.4 kbps would be treated as excess.  The exact\n\
    \   treatment of such excess is service dependent.\n   A similar scenario may\
    \ arise if  a sender claims that data for a\n   certain session is compressible\
    \ when in fact it is not, or overstates\n   the extent of its compressibility.\
    \  This might cause the flow to be\n   erroneously admitted, and would cause insufficient\
    \ resources to be\n   allocated to it.  To prevent such behavior from adversely\
    \ affecting\n   other reserved flows, any flow that sends a compressibility hint\n\
    \   should be policed (in any router that has made use of the hint for\n   its\
    \ admission control) on the assumption that it is indeed\n   compressible, i.e.,\
    \ using the compressed TSpec.  That is, if the flow\n   is found to be less compressible\
    \ than advertised, the extra traffic\n   that must be forwarded  by the router\
    \ above the compressed TSpec will\n   be policed according to intserv rules appropriate\
    \ for the service.\n   Note that services that use the maximum datagram size M\
    \ for policing\n   purposes (e.g. guaranteed service [RFC 2210]) should continue\
    \ to use\n   the uncompressed value of M to allow for the possibility that some\n\
    \   packets may not be successfully compressed.\n   Note that RSVP does not generally\
    \ require flows to be policed at\n   every hop.  To quote [RFC 2205]:\n      Some\
    \ QoS services may require traffic policing at some or all of\n      (1) the edge\
    \ of the network, (2) a merging point for data from\n      multiple senders, and/or\
    \ (3) a branch point where traffic flow\n      from upstream may be greater than\
    \ the downstream reservation being\n      requested.  RSVP knows where such points\
    \ occur and must so\n      indicate to the traffic control mechanism.\n   For\
    \ the purposes of policing, a router which makes use of the\n   compressibility\
    \ hint in a sender TSpec should behave as if it is at\n   the edge of the network,\
    \ because it is in a position to receive\n   traffic from a sender that, while\
    \ it passed through policing at the\n   real network edge, may still need to be\
    \ policed if the amount of data\n   sent exceeds the amount described by the compressed\
    \ TSpec.\n"
- title: 4. Object Format
  contents:
  - "4. Object Format\n   The compressibility hint may be included in the sender TSpec\
    \ using\n   the encoding rules of Appendix A in [RFC 2210].  The complete sender\n\
    \   TSpec is as follows:\n        31           24 23           16 15         \
    \   8 7             0\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   1   | 0 (a) |    reserved           |            10 (b)             |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   2\
    \   |    1  (c)     |0| reserved    |             9 (d)             |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   3   |\
    \   127 (e)     |    0 (f)      |             5 (g)             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   4   |  Token Bucket Rate [r] (32-bit IEEE floating point number)    |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   5\
    \   |  Token Bucket Size [b] (32-bit IEEE floating point number)    |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   6   |\
    \  Peak Data Rate [p] (32-bit IEEE floating point number)       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   7   |  Minimum Policed Unit [m] (32-bit integer)                    |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   8\
    \   |  Maximum Packet Size [M]  (32-bit integer)                    |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   9   |\
    \   126 (h)     |    0 (i)      |             2 (j)             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   10  |     Hint (assigned number)                                    |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   11\
    \  |  Compression factor [f] (32-bit integer)                      |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        (a) - Message format version number (0)\n        (b) - Overall length\
    \ (10 words not including header)\n        (c) - Service header, service number\
    \ 1 (default/global\n              information)\n        (d) - Length of service\
    \ 1 data, 9 words not including header\n        (e) - Parameter ID, parameter\
    \ 127 (Token_Bucket_TSpec)\n        (f) - Parameter 127 flags (none set)\n   \
    \     (g) - Parameter 127 length, 5 words not including header\n        (h) -\
    \ Parameter ID, parameter 126 (Compression_Hint)\n        (i) - Parameter 126\
    \ flags (none set)\n        (j) - Parameter 126 length, 2 words not including\
    \ header\n   The difference between this TSpec and the one described in [RFC 2210]\n\
    \   is that the overall length contained in the first word is increased\n   by\
    \ 3, as is the length of the `service 1 data', and the original\n   TSpec parameters\
    \ are followed by a new parameter, the compressibility\n   hint.  This parameter\
    \ contains the standard parameter header, and an\n   assigned number indicating\
    \ the type of compression that is possible\n   on this data.  Different values\
    \ of the hint would imply different\n   compression algorithms may be applied\
    \ to the data.  Details of the\n   numbering scheme for hints appear below.\n\
    \   Following the hint value is the compression factor f, expressed as a\n   32\
    \ bit integer representing the factor as a percentage value.  The\n   valid range\
    \ for this factor is (0,100].  A sender that does not know\n   what value to use\
    \ here or wishes to leave the compression factor\n   calculation to the routers'\
    \ discretion may use the reserved value 0\n   to indicate this fact.  Zero is\
    \ reserved because it is not possible\n   to compress a data stream to zero bits\
    \ per second.  The value 100\n   indicates that no compression is expected on\
    \ this stream.\n   In some cases, additional quantitative information about the\
    \ traffic\n   may be required to enable a router to determine the amount of\n\
    \   compression possible.  In this case, a different encoding of the\n   parameter\
    \ would be required.\n   In some cases it may be desirable to include more than\
    \ one hint in a\n   Tspec (e.g., because more than one compression scheme could\
    \ be\n   applied to the data.)  In this case, multiple instances of parameter\n\
    \   126 may appear in the Tspec and the overall length of the Tspec and\n   the\
    \ length of the Service 1 data would be increased accordingly.\n   Note that the\
    \ Compression_Hint is, like the Token_Bucket_Tspec, not\n   specific to a single\
    \ service, and thus has a parameter value less\n   than 128.  It is also included\
    \ as part of the default/global\n   information (service number 1).\n"
- title: 4.1. Hint Numbering
  contents:
  - "4.1. Hint Numbering\n   Hints are represented by a 32 bit field, with the high\
    \ order 16 bits\n   being the IP-compression-protocol number as defined in [RFC\
    \ 1332] and\n   [RFC 2509].  The low order 16 bits are a sub-option for the cases\n\
    \   where the IP-compression-protocol number alone is not sufficient for\n   int-serv\
    \ purposes.  The following hint values are required at the\n   time of writing:\n\
    \      -  hint = 0x002d0000: IP/TCP data that may be compressed according\n  \
    \       to [RFC 1144]\n      -  hint = 0x00610000: IP data that may be compressed\
    \ according to\n         [RFC 2507]\n      -  hint = 0x00610100:  IP/UDP/RTP data\
    \ that may be compressed\n         according to [RFC 2508]\n"
- title: 5. Backward Compatibility
  contents:
  - "5. Backward Compatibility\n   It is desirable that an intserv router which receives\
    \ this new TSpec\n   format and does not understand the compressibility hint should\n\
    \   silently ignore the hint rather than rejecting the entire TSpec (or\n   the\
    \ message containing it) as malformed.  While [RFC 2210] clearly\n   specifies\
    \ the format of TSpecs in a way that they can be parsed even\n   when they contain\
    \ unknown parameters, it does not specify what action\n   should be taken when\
    \ unknown objects are received.  Thus it is quite\n   possible that some RSVP\
    \ implementations will discard PATH messages\n   containing a TSpec with the compressibility\
    \ hint.  In such a case,\n   the router should send a PathErr message to the sending\
    \ host.  The\n   message should indicate a malformed TSpec (Error code 21, Sub-code\n\
    \   04).  The host may conclude that the hint caused the problem and send\n  \
    \ a new PATH without the hint.\n   For the purposes of this specification, it\
    \ would be preferable if\n   unknown TSpec parameters could be silently ignored.\
    \  In the case\n   where a parameter is silently ignored, the node should behave\
    \ as if\n   that parameter were not present, but leave the unknown parameter\n\
    \   intact in the object that it forwards.  This should be the default\n   for\
    \ unknown parameters of the type described in [RFC 2210].\n   It is possible that\
    \ some future modifications to [RFC 2210] will\n   require unknown parameter types\
    \ to cause an error response.  This\n   situation is analogous to RSVP's handling\
    \ of unknown objects, which\n   allows for three different response to an unknown\
    \ object, based on\n   the highest two bits of the Class-Num.  One way to handle\
    \ this would\n   be to divide the parameter space further than already done in\
    \ [RFC\n   2216].  For example, parameter numbers of the form x1xxxxxx could be\n\
    \   silently ignored if unrecognized, while parameter numbers of the form\n  \
    \ x0xxxxxx could cause an error response if unrecognized.  (The meaning\n   of\
    \ the highest order bit is already fixed by [RFC 2216].)  A third\n   possibility\
    \ exists, which is to remove the unrecognized parameter\n   before forwarding,\
    \ but this does not seem to be useful.\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   The extensions defined in this document pose essentially\
    \ the same\n   security risks as those of [RFC 2210].  The risk that a sender\
    \ will\n   falsely declare his data to be compressible is equivalent to the\n\
    \   sender providing an insufficiently large TSpec and is dealt with in\n   the\
    \ same way.\n"
- title: 7. IANA Considerations
  contents:
  - "7. IANA Considerations\n   This specification relies on IANA-assigned numbers\
    \ for the\n   compression scheme hint.  Where possible the existing numbering\n\
    \   scheme for compression algorithm identification in PPP has been used,\n  \
    \ but it may in the future be necessary for IANA to assign hint numbers\n   purely\
    \ for the purposes of int-serv.\n"
- title: 8. Acknowledgments
  contents:
  - "8. Acknowledgments\n   Carsten Borman and Mike DiBiasio provided much helpful\
    \ feedback on\n   this document.\n"
- title: 9. References
  contents:
  - "9. References\n   [RFC 1144]  Jacobson, V., \"Compressing TCP/IP Headers for\
    \ Low-Speed\n               Serial Links\", RFC 1144, February 1990.\n   [RFC\
    \ 1332]  McGregor, G., \"The PPP Internet Protocol Control Protocol\n        \
    \       (IPCP)\", RFC 1332, May 1992.\n   [RFC 2205]  Braden, R., Zhang, L., Berson,\
    \ S., Herzog, S. and S.\n               Jamin, \"Resource ReSerVation Protocol\
    \ (RSVP) -- Version 1\n               Functional Specification\", RFC 2205, September\
    \ 1997.\n   [RFC 2210]  Wroclawski, J., \"The Use of RSVP with IETF Integrated\n\
    \               Services\", RFC 2210, September 1997.\n   [RFC 2211]  Wroclawski,\
    \ J., \"Specification of the Controlled-Load\n               Network Element Service\"\
    , RFC 2211, September 1997.\n   [RFC 2212]  Shenker, S., Partridge, C. and R.\
    \ Guerin, \"Specification\n               of Guaranteed Quality of Service\",\
    \ RFC 2212, September\n               1997.\n   [RFC 2216]  Shenker, S. and J.\
    \ Wroclawski, \"Network Element Service\n               Specification Template\"\
    , RFC 2216, September 1997.\n   [RFC 2507]  Degermark, M., Nordgren, B. and S.\
    \ Pink,\"Header\n               Compression for IP\", RFC 2507, February 1999.\n\
    \   [RFC 2508]  Casner, S. and V. Jacobson, \"Compressing IP/UDP/RTP\n       \
    \        Headers for Low-Speed Serial Links\", RFC 2508, February\n          \
    \     1999.\n   [RFC 2509]  Engan, M., Casner, S. and C. Bormann, \"IP Header\n\
    \               Compression over PPP\", RFC 2509, February 1999.\n"
- title: 10. Authors' Addresses
  contents:
  - "10. Authors' Addresses\n   Bruce Davie\n   Cisco Systems, Inc.\n   250 Apollo\
    \ Drive\n   Chelmsford, MA, 01824\n   EMail: bsd@cisco.com\n   Carol Iturralde\n\
    \   Cisco Systems, Inc.\n   250 Apollo Drive\n   Chelmsford, MA, 01824\n   EMail:\
    \ cei@cisco.com\n   Dave Oran\n   Cisco Systems, Inc.\n   170 Tasman Drive\n \
    \  San Jose, CA, 95134\n   EMail: oran@cisco.com\n   Stephen L. Casner\n   Packet\
    \ Design\n   66 Willow Place\n   Menlo Park, CA 94025\n   EMail: casner@acm.org\n\
    \   John Wroclawski\n   MIT Laboratory for Computer Science\n   545 Technology\
    \ Sq.\n   Cambridge, MA  02139\n   EMail: jtw@lcs.mit.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
