- title: __initial_text__
  contents:
  - '              Multiprotocol Interconnect over Frame Relay

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for\
    \ the Internet\n   community, and requests discussion and suggestions for improvements.\n\
    \   Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes an encapsulation method for carrying network\n\
    \   interconnect traffic over a Frame Relay backbone.  It covers aspects\n   of\
    \ both Bridging and Routing.  Additionally, it describes a simple\n   fragmentation\
    \ procedure for carrying large frames over a frame relay\n   network with a smaller\
    \ MTU.\n   Systems with the ability to transfer both the encapsulation method\n\
    \   described in this document, and others must have a priori knowledge\n   of\
    \ which virtual circuits will carry which encapsulation method and\n   this encapsulation\
    \ must only be used over virtual circuits that have\n   been explicitly configured\
    \ for its use.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Comments and contributions from many sources, especially\
    \ those from\n   Ray Samora of Proteon, Ken Rehbehn of Netrix Corporation, Fred\
    \ Baker\n   and Charles Carvalho of Advanced Computer Communications and Mostafa\n\
    \   Sherif of AT&T have been incorporated into this document. Special\n   thanks\
    \ to Dory Leifer of University of Michigan for his contributions\n   to the resolution\
    \ of fragmentation issues and Floyd Backes from DEC\n   and Laura Bridge from\
    \ Timeplex for their contributions to the\n   bridging descriptions. This document\
    \ could not have been completed\n   without the expertise of the IP over Large\
    \ Public Data Networks\n   working group of the IETF.\n"
- title: 1.  Conventions and Acronyms
  contents:
  - "1.  Conventions and Acronyms\n   The following language conventions are used\
    \ in the items of\n   specification in this document:\n      o Must, Shall or\
    \ Mandatory -- the item is an absolute\n        requirement of the specification.\n\
    \      o Should or Recommended -- the item should generally be\n        followed\
    \ for all but exceptional circumstances.\n      o May or Optional -- the item\
    \ is truly optional and may be\n        followed or ignored according to the needs\
    \ of the\n        implementor.\n   All drawings in this document are drawn with\
    \ the left-most bit as the\n   high order bit for transmission.  For example,\
    \ the dawings might be\n   labeled as:\n              0   1   2   3   4   5  \
    \ 6   7 bits\n              +---+---+---+---+---+---+---+\n              +---------------------------+\n\
    \              |    flag (7E hexadecimal)  |\n              +---------------------------+\n\
    \              |       Q.922 Address*      |\n              +--              \
    \         --+\n              |                           |\n              +---------------------------+\n\
    \              :                           :\n              :                \
    \           :\n              +---------------------------+\n   Drawings that would\
    \ be too large to fit onto one page if each octet\n   were presented on a single\
    \ line are drawn with two octets per line.\n   These are also drawn with the left-most\
    \ bit as the high order bit for\n   transmission.  There will be a \"+\" to distinguish\
    \ between octets as\n   in the following example.\n        |---   octet one  \
    \   ---|---   octet two  ---|\n        0  1  2  3  4  5  6  7  0  1  2  3  4 \
    \ 5  6  7\n        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n        +--------------------------------------------+\n\
    \        | Organizationally Unique                    |\n        +--         \
    \            +--------------------+\n        | Identifier            | Protocol\
    \           |\n        +-----------------------+--------------------+\n      \
    \  | Identifier            |\n        +-----------------------+\n   The following\
    \ are common acronyms used throughout this document.\n      BECN - Backward Explicit\
    \ Congestion Notification\n      BPDU - Bridge Protocol Data Unit\n      C/R \
    \ - Command/Response bit\n      DCE  - Data Communication Equipment\n      DE\
    \   - Discard Eligibility bit\n      DTE  - Data Terminal Equipment\n      FECN\
    \ - Forward Explicit Congestion Notification\n      PDU  - Protocol Data Unit\n\
    \      PTT  - Postal Telephone & Telegraph\n      SNAP - Subnetwork Access Protocol\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   The following discussion applies to those devices which\
    \ serve as end\n   stations (DTEs) on a public or private Frame Relay network\
    \ (for\n   example, provided by a common carrier or PTT.  It will not discuss\n\
    \   the behavior of those stations that are considered a part of the\n   Frame\
    \ Relay network (DCEs) other than to explain situations in which\n   the DTE must\
    \ react.\n   The Frame Relay network provides a number of virtual circuits that\n\
    \   form the basis for connections between stations attached to the same\n   Frame\
    \ Relay network.  The resulting set of interconnected devices\n   forms a private\
    \ Frame Relay group which may be either fully\n   interconnected with a complete\
    \ \"mesh\" of virtual circuits, or only\n   partially interconnected.  In either\
    \ case, each virtual circuit is\n   uniquely identified at each Frame Relay interface\
    \ by a Data Link\n   Connection Identifier (DLCI).  In most circumstances, DLCIs\
    \ have\n   strictly local significance at each Frame Relay interface.\n   The\
    \ specifications in this document are intended to apply to both\n   switched and\
    \ permanent virtual circuits.\n"
- title: 3.  Frame Format
  contents:
  - "3.  Frame Format\n   All protocols must encapsulate their packets within a Q.922\
    \ Annex A\n   frame [1,2].  Additionally, frames shall contain information\n \
    \  necessary to identify the protocol carried within the protocol data\n   unit\
    \ (PDU), thus allowing the receiver to properly process the\n   incoming packet.\
    \  The format shall be as follows:\n                  +---------------------------+\n\
    \                  |    flag (7E hexadecimal)  |\n                  +---------------------------+\n\
    \                  |       Q.922 Address*      |\n                  +--      \
    \                 --+\n                  |                           |\n     \
    \             +---------------------------+\n                  | Control (UI =\
    \ 0x03)       |\n                  +---------------------------+\n           \
    \       | Optional Pad      (0x00)  |\n                  +---------------------------+\n\
    \                  | NLPID                     |\n                  +---------------------------+\n\
    \                  |             .             |\n                  |        \
    \     .             |\n                  |             .             |\n     \
    \             |           Data            |\n                  |             .\
    \             |\n                  |             .             |\n           \
    \       +---------------------------+\n                  |   Frame Check Sequence\
    \    |\n                  +--           .           --+\n                  | \
    \      (two octets)        |\n                  +---------------------------+\n\
    \                  |   flag (7E hexadecimal)   |\n                  +---------------------------+\n\
    \           * Q.922 addresses, as presently defined, are two octets and\n    \
    \         contain a 10-bit DLCI.  In some networks Q.922 addresses\n         \
    \    may optionally be increased to three or four octets.\n   The control field\
    \ is the Q.922 control field.  The UI (0x03) value is\n   used unless it is negotiated\
    \ otherwise.  The use of XID (0xAF or\n   0xBF) is permitted and is discussed\
    \ later.\n   The pad field is used to align the remainder of the frame to a two\n\
    \   octet boundary. There may be zero or one pad octet within the pad\n   field\
    \ and, if present, must have a value of zero.\n   The Network Level Protocol ID\
    \ (NLPID) field is administered by ISO\n   and CCITT.  It contains values for\
    \ many different protocols including\n   IP, CLNP and IEEE Subnetwork Access Protocol\
    \ (SNAP)[10]. This field\n   tells the receiver what encapsulation or what protocol\
    \ follows.\n   Values for this field are defined in ISO/IEC TR 9577 [3]. A NLPID\n\
    \   value of 0x00 is defined within ISO/IEC TR 9577 as the Null Network\n   Layer\
    \ or Inactive Set.  Since it cannot be distinguished from a pad\n   field, and\
    \ because it has no significance within the context of this\n   encapsulation\
    \ scheme, a NLPID value of 0x00 is invalid under the\n   Frame Relay encapsulation.\
    \ The Appendix contains a list of some of\n   the more commonly used NLPID values.\n\
    \   There is no commonly implemented minimum maximum frame size for Frame\n  \
    \ Relay.  A network must, however, support at least a 262 octet\n   maximum. \
    \ Generally, the maximum will be greater than or equal to\n   1600 octets, but\
    \ each Frame Relay provider will specify an\n   appropriate value for its network.\
    \  A Frame Relay DTE, therefore,\n   must allow the maximum acceptable frame size\
    \ to be configurable.\n   The minimum frame size allowed for Frame Relay is five\
    \ octets between\n   the opening and closing flags assuming a two octet Q.922\
    \ address\n   field.  This minimum increases to six octets for three octet Q.922\n\
    \   address and seven octets for the four octet Q.922 address format.\n"
- title: 4.  Interconnect Issues
  contents:
  - "4.  Interconnect Issues\n   There are two basic types of data packets that travel\
    \ within the\n   Frame Relay network: routed packets and bridged packets.  These\n\
    \   packets have distinct formats and therefore, must contain an\n   indicator\
    \ that the destination may use to correctly interpret the\n   contents of the\
    \ frame.  This indicator is embedded within the NLPID\n   and SNAP header information.\n\
    \   For those protocols that do not have a NLPID already assigned, it is\n   necessary\
    \ to provide a mechanism to allow easy protocol\n   identification.  There is\
    \ a NLPID value defined indicating the\n   presence of a SNAP header.\n   A SNAP\
    \ header is of the form:\n            +--------------------------------------------+\n\
    \            | Organizationally Unique                    |\n            +-- \
    \                    +--------------------+\n            | Identifier        \
    \    | Protocol           |\n            +-----------------------+--------------------+\n\
    \            | Identifier            |\n            +-----------------------+\n\
    \   All stations must be able to accept and properly interpret both the\n   NLPID\
    \ encapsulation and the SNAP header encapsulation for a routed\n   packet.\n \
    \  The three-octet Organizationally Unique Identifier (OUI) identifies\n   an\
    \ organization which administers the meaning of the Protocol\n   Identifier (PID)\
    \ which follows.  Together they identify a distinct\n   protocol.  Note that OUI\
    \ 0x00-00-00 specifies that the following PID\n   is an Ethertype.\n"
- title: 4.1.  Routed Frames
  contents:
  - "4.1.  Routed Frames\n   Some protocols will have an assigned NLPID, but because\
    \ the NLPID\n   numbering space is so limited, not all protocols have specific\
    \ NLPID\n   values assigned to them. When packets of such protocols are routed\n\
    \   over Frame Relay networks, they are sent using the NLPID 0x80 (which\n   indicates\
    \ a SNAP follows) followed by SNAP.  If the protocol has an\n   Ethertype assigned,\
    \ the OUI is 0x00-00-00 (which indicates an\n   Ethertype follows), and PID is\
    \ the Ethertype of the protocol in use.\n   There will be one pad octet to align\
    \ the protocol data on a two octet\n   boundary as shown below.\n            \
    \          Format of Routed Frames\n                          with Ethertypes\n\
    \                  +-------------------------------+\n                  |    \
    \    Q.922 Address          |\n                  +---------------+---------------+\n\
    \                  |Control  0x03  | pad     0x00  |\n                  +---------------+---------------+\n\
    \                  | NLPID   0x80  | OUI     0x00  |\n                  +---------------+\
    \             --+\n                  | OUI  0x00-00                  |\n     \
    \             +-------------------------------+\n                  |         \
    \  Ethertype           |\n                  +-------------------------------+\n\
    \                  |         Protocol Data         |\n                  +-------------------------------+\n\
    \                  | FCS                           |\n                  +-------------------------------+\n\
    \   In the few cases when a protocol has an assigned NLPID (see\n   appendix),\
    \ 48 bits can be saved using the format below:\n                   Format of Routed\
    \ NLPID Protocol\n                  +-------------------------------+\n      \
    \            |        Q.922 Address          |\n                  +---------------+---------------+\n\
    \                  |Control  0x03  |     NLPID     |\n                  +---------------+---------------+\n\
    \                  |         Protocol Data         |\n                  +-------------------------------+\n\
    \                  | FCS                           |\n                  +-------------------------------+\n\
    \   The NLPID encapsulation does not require a pad octet for alignment,\n   so\
    \ none is permitted.\n   In the case of ISO protocols, the NLPID is considered\
    \ to be the first\n   octet of the protocol data.  It is unnecessary to repeat\
    \ the NLPID in\n   this case.  The single octet serves both as the demultiplexing\
    \ value\n   and as part of the protocol data (refer to \"Other Protocols over\n\
    \   Frame Relay for more details). Other protocols, such as IP, have a\n   NLPID\
    \ defined (0xCC), but it is not part of the protocol itself.\n               \
    \     Format of Routed IP Datagram\n                  +-------------------------------+\n\
    \                  |        Q.922 Address          |\n                  +---------------+---------------+\n\
    \                  |Control  0x03  |  NLPID  0xCC  |\n                  +---------------+---------------+\n\
    \                  |          IP Datagram          |\n                  +-------------------------------+\n\
    \                  | FCS                           |\n                  +-------------------------------+\n"
- title: 4.2.  Bridged Frames
  contents:
  - '4.2.  Bridged Frames

    '
- title: The second type of Frame Relay traffic is bridged packets. These
  contents:
  - 'The second type of Frame Relay traffic is bridged packets. These

    '
- title: packets are encapsulated using the NLPID value of 0x80 indicating
  contents:
  - 'packets are encapsulated using the NLPID value of 0x80 indicating

    '
- title: SNAP.  As with other SNAP encapsulated protocols, there will be one
  contents:
  - 'SNAP.  As with other SNAP encapsulated protocols, there will be one

    '
- title: pad octet to align the data portion of the encapsulated frame.  The
  contents:
  - 'pad octet to align the data portion of the encapsulated frame.  The

    '
- title: SNAP header which follows the NLPID identifies the format of the
  contents:
  - 'SNAP header which follows the NLPID identifies the format of the

    '
- title: bridged packet.  The OUI value used for this encapsulation is the
  contents:
  - 'bridged packet.  The OUI value used for this encapsulation is the

    '
- title: 802.1 organization code 0x00-80-C2.  The PID portion of the SNAP
  contents:
  - '802.1 organization code 0x00-80-C2.  The PID portion of the SNAP

    '
- title: header (the two bytes immediately following the OUI) specifies the
  contents:
  - 'header (the two bytes immediately following the OUI) specifies the

    '
- title: form of the MAC header, which immediately follows the SNAP header.
  contents:
  - 'form of the MAC header, which immediately follows the SNAP header.

    '
- title: Additionally, the PID indicates whether the original FCS is preserved
  contents:
  - 'Additionally, the PID indicates whether the original FCS is preserved

    '
- title: within the bridged frame.
  contents:
  - 'within the bridged frame.

    '
- title: The 802.1 organization has reserved the following values to be used
  contents:
  - 'The 802.1 organization has reserved the following values to be used

    '
- title: 'with Frame Relay:'
  contents:
  - "with Frame Relay:\n           PID Values for OUI 0x00-80-C2\n        with preserved\
    \ FCS   w/o preserved FCS    Media\n        ------------------   -----------------\
    \    ----------------\n        0x00-01              0x00-07              802.3/Ethernet\n\
    \        0x00-02              0x00-08              802.4\n        0x00-03    \
    \          0x00-09              802.5\n        0x00-04              0x00-0A  \
    \            FDDI\n                             0x00-0B              802.6\n \
    \     In addition, the PID value 0x00-0E, when used with OUI 0x00-80-C2,\n   \
    \   identifies bridged protocol data units (BPDUs) as defined by\n      802.1(d)\
    \ or 802.1(g) [12].\n   A packet bridged over Frame Relay will, therefore, have\
    \ one of the\n   following formats:\n                   Format of Bridged Ethernet/802.3\
    \ Frame\n                  +-------------------------------+\n               \
    \   |        Q.922 Address          |\n                  +---------------+---------------+\n\
    \                  |Control  0x03  | pad     0x00  |\n                  +---------------+---------------+\n\
    \                  | NLPID   0x80  | OUI     0x00  |\n                  +---------------+\
    \             --+\n                  | OUI  0x80-C2                  |\n     \
    \             +-------------------------------+\n                  | PID 0x00-01\
    \ or 0x00-07        |\n                  +-------------------------------+\n \
    \                 | MAC destination address       |\n                  :     \
    \                          :\n                  |                            \
    \   |\n                  +-------------------------------+\n                 \
    \ | (remainder of MAC frame)      |\n                  +-------------------------------+\n\
    \                  | LAN FCS (if PID is 0x00-01)   |\n                  +-------------------------------+\n\
    \                  | FCS                           |\n                  +-------------------------------+\n\
    \                   Format of Bridged 802.4 Frame\n                  +-------------------------------+\n\
    \                  |        Q.922 Address          |\n                  +---------------+---------------+\n\
    \                  |Control  0x03  | pad     0x00  |\n                  +---------------+---------------+\n\
    \                  | NLPID   0x80  | OUI     0x00  |\n                  +---------------+\
    \             --+\n                  | OUI  0x80-C2                  |\n     \
    \             +-------------------------------+\n                  | PID 0x00-02\
    \ or 0x00-08        |\n                  +---------------+---------------+\n \
    \                 |  pad  0x00    | Frame Control |\n                  +---------------+---------------+\n\
    \                  | MAC destination address       |\n                  :    \
    \                           :\n                  |                           \
    \    |\n                  +-------------------------------+\n                \
    \  | (remainder of MAC frame)      |\n                  +-------------------------------+\n\
    \                  | LAN FCS (if PID is 0x00-02)   |\n                  +-------------------------------+\n\
    \                  | FCS                           |\n                  +-------------------------------+\n\
    \                   Format of Bridged 802.5 Frame\n                  +-------------------------------+\n\
    \                  |        Q.922 Address          |\n                  +---------------+---------------+\n\
    \                  |Control  0x03  | pad     0x00  |\n                  +---------------+---------------+\n\
    \                  | NLPID   0x80  | OUI     0x00  |\n                  +---------------+\
    \             --+\n                  | OUI  0x80-C2                  |\n     \
    \             +-------------------------------+\n                  | PID    0x00-03\
    \ or 0x00-09     |\n                  +---------------+---------------+\n    \
    \              | pad    0x00   | Frame Control |\n                  +---------------+---------------+\n\
    \                  | MAC destination address       |\n                  :    \
    \                           :\n                  |                           \
    \    |\n                  +-------------------------------+\n                \
    \  | (remainder of MAC frame)      |\n                  +-------------------------------+\n\
    \                  | LAN FCS (if PID is 0x00-03)   |\n                  |    \
    \                           |\n                  +-------------------------------+\n\
    \                  | FCS                           |\n                  +-------------------------------+\n\
    \                    Format of Bridged FDDI Frame\n                  +-------------------------------+\n\
    \                  |        Q.922 Address          |\n                  +---------------+---------------+\n\
    \                  |Control  0x03  | pad     0x00  |\n                  +---------------+---------------+\n\
    \                  | NLPID   0x80  | OUI     0x00  |\n                  +---------------+\
    \             --+\n                  | OUI  0x80-C2                  |\n     \
    \             +-------------------------------+\n                  | PID 0x00-04\
    \ or 0x00-0A        |\n                  +---------------+---------------+\n \
    \                 | pad     0x00  | Frame Control |\n                  +---------------+---------------+\n\
    \                  | MAC destination address       |\n                  :    \
    \                           :\n                  |                           \
    \    |\n                  +-------------------------------+\n                \
    \  | (remainder of MAC frame)      |\n                  +-------------------------------+\n\
    \                  | LAN FCS (if PID is 0x00-04)   |\n                  |    \
    \                           |\n                  +-------------------------------+\n\
    \                  | FCS                           |\n                  +-------------------------------+\n\
    \                    Format of Bridged 802.6 Frame\n                  +-------------------------------+\n\
    \                  |        Q.922 Address          |\n                  +---------------+---------------+\n\
    \                  | Control 0x03  | pad     0x00  |\n                  +---------------+---------------+\n\
    \                  | NLPID   0x80  | OUI     0x00  |\n                  +---------------+\
    \             --+\n                  | OUI  0x80-C2                  |\n     \
    \             +-------------------------------+\n                  |         PID\
    \  0x00-0B          |\n                  +---------------+---------------+ -------\n\
    \                  |   Reserved    |     BEtag     |  Common\n               \
    \   +---------------+---------------+  PDU\n                  |            BAsize\
    \             |  Header\n                  +-------------------------------+ -------\n\
    \                  | MAC destination address       |\n                  :    \
    \                           :\n                  |                           \
    \    |\n                  +-------------------------------+\n                \
    \  | (remainder of MAC frame)      |\n                  +-------------------------------+\n\
    \                  |                               |\n                  +-   \
    \ Common PDU Trailer       -+\n                  |                           \
    \    |\n                  +-------------------------------+\n                \
    \  | FCS                           |\n                  +-------------------------------+\n\
    \   Note that in bridge 802.6 PDUs, there is only one choice for the PID\n   value,\
    \ since the presence of a CRC-32 is indicated by the CIB bit in\n   the header\
    \ of the MAC frame.\n   The Common Protocol Data Unit (CPDU) Header and Trailer\
    \ are conveyed\n   to allow pipelining at the egress bridge to an 802.6 subnetwork.\n\
    \   Specifically, the CPDU Header contains the BAsize field, which\n   contains\
    \ the length of the PDU.  If this field is not available to\n   the egress 802.6\
    \ bridge, then that bridge cannot begin to transmit\n   the segmented PDU until\
    \ it has received the entire PDU, calculated\n   the length, and inserted the\
    \ length into the BAsize field.  If the\n   field is available, the egress 802.6\
    \ bridge can extract the length\n   from the BAsize field of the Common PDU Header,\
    \ insert it into the\n   corresponding field of the first segment, and immediately\
    \ transmit\n   the segment onto the 802.6 subnetwork.  Thus, the bridge can begin\n\
    \   transmitting the 802.6 PDU before it has received the complete PDU.\n   One\
    \ should note that the Common PDU Header and Trailer of the\n   encapsulated frame\
    \ should not be simply copied to the outgoing 802.6\n   subnetwork because the\
    \ encapsulated BEtag value may conflict with the\n   previous BEtag value transmitted\
    \ by that bridge.\n                   Format of BPDU Frame\n                 \
    \ +-------------------------------+\n                  |         Q.922 Address\
    \         |\n                  +-------------------------------+\n           \
    \       |        Control   0x03         |\n                  +-------------------------------+\n\
    \                  |          PAD    0x00          |\n                  +-------------------------------+\n\
    \                  |          NLPID  0x80          |\n                  +-------------------------------+\n\
    \                  |        OUI 0x00-80-C2         |\n                  +-------------------------------+\n\
    \                  |         PID 0x00-0E           |\n                  +-------------------------------+\n\
    \                  |                               |\n                  |    \
    \  BPDU as defined by       |\n                  |     802.1(d) or 802.1(g)[12]\
    \  |\n                  |                               |\n                  +-------------------------------+\n"
- title: 4.  Data Link Layer Parameter Negotiation
  contents:
  - "4.  Data Link Layer Parameter Negotiation\n   Frame Relay stations may choose\
    \ to support the Exchange\n   Identification (XID) specified in Appendix III of\
    \ Q.922 [1].  This\n   XID exchange allows the following parameters to be negotiated\
    \ at the\n   initialization of a Frame Relay circuit: maximum frame size N201,\n\
    \   retransmission timer T200, and the maximum number of outstanding\n   Information\
    \ (I) frames K.\n   A station may indicate its unwillingness to support acknowledged\
    \ mode\n   multiple frame operation by specifying a value of zero for the\n  \
    \ maximum window size, K.\n   If this exchange is not used, these values must\
    \ be statically\n   configured by mutual agreement of Data Link Connection (DLC)\n\
    \   endpoints, or must be defaulted to the values specified in Section\n   5.9\
    \ of Q.922:\n                       N201: 260 octets\n                       \
    \   K:  3 for a 16 Kbps link,\n                              7 for a 64 Kbps link,\n\
    \                             32 for a 384 Kbps link,\n                      \
    \       40 for a 1.536 Mbps or above link\n                      T200: 1.5 seconds\
    \ [see Q.922 for further details]\n   If a station supporting XID receives an\
    \ XID frame, it shall respond\n   with an XID response.  In processing an XID,\
    \ if the remote maximum\n   frame size is smaller than the local maximum, the\
    \ local system shall\n   reduce the maximum size it uses over this DLC to the\
    \ remotely\n   specified value.  Note that this shall be done before generating\
    \ a\n   response XID.\n   The following diagram describes the use of XID to specify\
    \ non-use of\n   acknowledged mode multiple frame operation.\n               Non-use\
    \ of Acknowledged Mode Multiple Frame Operation\n                      +---------------+\n\
    \                      |    Address    |     (2,3 or 4 octets)\n             \
    \         |               |\n                      +---------------+\n       \
    \               | Control 0xAF  |\n                      +---------------+\n \
    \                     | format  0x82  |\n                      +---------------+\n\
    \                      | Group ID 0x80 |\n                      +---------------+\n\
    \                      | Group Length  |     (2 octets)\n                    \
    \  |    0x00-0E    |\n                      +---------------+\n              \
    \        |      0x05     |     PI = Frame Size (transmit)\n                  \
    \    +---------------+\n                      |      0x02     |     PL = 2\n \
    \                     +---------------+\n                      |    Maximum  \
    \  |     (2 octets)\n                      |   Frame Size  |\n               \
    \       +---------------+\n                      |      0x06     |     PI = Frame\
    \ Size (receive)\n                      +---------------+\n                  \
    \    |      0x02     |     PL = 2\n                      +---------------+\n \
    \                     |    Maximum    |     (2 octets)\n                     \
    \ |   Frame Size  |\n                      +---------------+\n               \
    \       |      0x07     |     PI = Window Size\n                      +---------------+\n\
    \                      |      0x01     |     PL = 1\n                      +---------------+\n\
    \                      |      0x00     |\n                      +---------------+\n\
    \                      |      0x09     |     PI = Retransmission Timer\n     \
    \                 +---------------+\n                      |      0x01     | \
    \    PL = 1\n                      +---------------+\n                      |\
    \      0x00     |\n                      +---------------+\n                 \
    \     |      FCS      |     (2 octets)\n                      |              \
    \ |\n                      +---------------+\n"
- title: 6.  Fragmentation Issues
  contents:
  - "6.  Fragmentation Issues\n   Fragmentation allows the exchange of packets that\
    \ are greater than\n   the maximum frame size supported by the underlying network.\
    \  In the\n   case of Frame Relay, the network may support a maximum frame size\
    \ as\n   small as 262 octets.  Because of this small maximum size, it is\n   recommended,\
    \ but not required, to support fragmentation and\n   reassembly.\n   Unlike IP\
    \ fragmentation procedures, the scope of Frame Relay\n   fragmentation procedure\
    \ is limited to the boundary (or DTEs) of the\n   Frame Relay network.\n   The\
    \ general format of fragmented packets is the same as any other\n   encapsulated\
    \ protocol.  The most significant difference being that\n   the fragmented packet\
    \ will contain the encapsulation header.  That\n   is, a packet is first encapsulated\
    \ (with the exception of the address\n   and control fields) as defined above.\
    \ Large packets are then broken\n   up into frames appropriate for the given Frame\
    \ Relay network and are\n   encapsulated using the Frame Relay fragmentation format.\
    \  In this\n   way, a station receiving fragments may reassemble them and then\
    \ put\n   the reassembled packet through the same processing path as a packet\n\
    \   that had not been fragmented.\n   Within Frame Relay fragments are encapsulated\
    \ using the SNAP format\n   with an OUI of 0x00-80-C2 and a PID of 0x00-0D.  Individual\
    \ fragments\n   will, therefore, have the following format:\n                \
    \   +---------------+---------------+\n                   |         Q.922 Address\
    \         |\n                   +---------------+---------------+\n          \
    \         | Control 0x03  | pad     0x00  |\n                   +---------------+---------------+\n\
    \                   | NLPID   0x80  | OUI     0x00  |\n                   +---------------+---------------+\n\
    \                   | OUI                  0x80-C2  |\n                   +---------------+---------------+\n\
    \                   | PID                  0x00-0D  |\n                   +---------------+---------------+\n\
    \                   |        sequence number        |\n                   +-+-------+-----+---------------+\n\
    \                   |F| RSVD  |offset               |\n                   +-+-------+-----+---------------+\n\
    \                   |    fragment data              |\n                   |  \
    \             .               |\n                   |               .        \
    \       |\n                   |               .               |\n            \
    \       +---------------+---------------+\n                   |              FCS\
    \              |\n                   +---------------+---------------+\n   The\
    \ sequence field is a two octet identifier that is incremented\n   every time\
    \ a new complete message is fragmented.  It allows detection\n   of lost frames\
    \ and is set to a random value at initialization.\n   The reserved field is 4\
    \ bits long and is not currently defined.  It\n   must be set to 0.\n   The final\
    \ bit is a one bit field set to 1 on the last fragment and\n   set to 0 for all\
    \ other fragments.\n   The offset field is an 11 bit value representing the logical\
    \ offset\n   of this fragment in bytes divided by 32. The first fragment must\
    \ have\n   an offset of zero.\n   The following figure shows how a large IP datagram\
    \ is fragmented over\n   Frame Relay.  In this example, the complete datagram\
    \ is fragmented\n   into two Frame Relay frames.\n                           Frame\
    \ Relay Fragmentation Example\n                                              +-----------+-----------+\n\
    \                                              |     Q.922 Address     |\n   \
    \                                           +-----------+-----------+\n      \
    \                                        | Ctrl 0x03 | pad  0x00 |\n         \
    \                                     +-----------+-----------+\n            \
    \                                  |NLPID 0x80 | OUI 0x00  |\n               \
    \                               +-----------+-----------+\n                  \
    \                            | OUI          0x80-C2  |\n            +-----------+-----------+\
    \         +-----------+-----------+\n            |ctrl 0x03  |NLPID 0xCC |   \
    \      | PID          0x00-0D  |\n            +-----------+-----------+      \
    \   +-----------+-----------+\n            |                       |         |\
    \ sequence number   n   |\n            |                       |         +-+------+--+-----------+\n\
    \            |                       |         |0| RSVD |offset (0)    |\n   \
    \         |                       |         +-+------+--+-----------+\n      \
    \      |                       |         | ctrl 0x03 |NLPID 0xCC |\n         \
    \   |                       |         +-----------+-----------+\n            |\
    \                       |         |   first m bytes of    |\n            |  large\
    \ IP datagram    |   ...   |     IP datagram       |\n            |          \
    \             |         |                       |\n            |             \
    \          |         +-----------+-----------+\n            |                \
    \       |         |          FCS          |\n            |                   \
    \    |         +-----------+-----------+\n            |                      \
    \ |\n            |                       |         +-----------+-----------+\n\
    \            |                       |         |     Q.922 Address     |\n   \
    \         |                       |         +-----------+-----------+\n      \
    \      |                       |         | Ctrl 0x03 | pad  0x00 |\n         \
    \   +-----------+-----------+         +-----------+-----------+\n            \
    \                                  |NLPID 0x80 | OUI 0x00  |\n               \
    \                               +-----------+-----------+\n                  \
    \                            | OUI          0x80-C2  |\n                     \
    \                         +-----------+-----------+\n                        \
    \                      | PID          0x00-0D  |\n                           \
    \                   +-----------+-----------+\n                              \
    \                | sequence number   n   |\n                                 \
    \             +-+------+--+-----------+\n                                    \
    \          |1| RSVD |offset (m/32) |\n                                       \
    \       +-+------+--+-----------+\n                                          \
    \    |    remainder of IP    |\n                                             \
    \ |        datagram       |\n                                              +-----------+-----------+\n\
    \                                              |          FCS          |\n   \
    \                                           +-----------+-----------+\n   Fragments\
    \ must be sent in order starting with a zero offset and\n   ending with the final\
    \ fragment.  These fragments must not be\n   interrupted with other packets or\
    \ information intended for the same\n   DLC. An end station must be able to re-assemble\
    \ up to 2K octets and\n   is suggested to support up to 8K octet re-assembly.\
    \  If at any time\n   during this re-assembly process, a fragment is corrupted\
    \ or a\n   fragment is missing, the entire message is dropped.  The upper layer\n\
    \   protocol is responsible for any retransmission in this case.  Note\n   that\
    \ there is no reassembly timer, nor is one needed.  This is\n   because the Frame\
    \ Relay service is required to deliver frames in\n   order.\n   This fragmentation\
    \ algorithm is not intended to reliably handle all\n   possible failure conditions.\
    \  As with IP fragmentation, there is a\n   small possibility of reassembly error\
    \ and delivery of an erroneous\n   packet.  Inclusion of a higher layer checksum\
    \ greatly reduces this\n   risk.\n"
- title: 7.  Address Resolution
  contents:
  - "7.  Address Resolution\n   There are situations in which a Frame Relay station\
    \ may wish to\n   dynamically resolve a protocol address.  Address resolution\
    \ may be\n   accomplished using the standard Address Resolution Protocol (ARP)\
    \ [6]\n   encapsulated within a SNAP encoded Frame Relay packet as follows:\n\
    \           +-----------------------+-----------------------+\n           | Q.922\
    \ Address                                 |\n           +-----------------------+-----------------------+\n\
    \           | Control (UI)  0x03    |     pad     0x00      |\n           +-----------------------+-----------------------+\n\
    \           |  NLPID = 0x80         |                       |  SNAP Header\n \
    \          +-----------------------+  OUI = 0x00-00-00     +  Indicating\n   \
    \        |                                               |  ARP\n           +-----------------------+-----------------------+\n\
    \           |  PID = 0x0806                                 |\n           +-----------------------+-----------------------+\n\
    \           |                   ARP packet                  |\n           |  \
    \                     .                       |\n           |                \
    \       .                       |\n           |                       .      \
    \                 |\n           +-----------------------+-----------------------+\n\
    \     Where the ARP packet has the following format and values:\n         Data:\n\
    \           ar$hrd   16 bits     Hardware type\n           ar$pro   16 bits  \
    \   Protocol type\n           ar$hln    8 bits     Octet length of hardware address\
    \ (n)\n           ar$pln    8 bits     Octet length of protocol address (m)\n\
    \           ar$op    16 bits     Operation code (request or reply)\n         \
    \  ar$sha   noctets     source hardware address\n           ar$spa   moctets \
    \    source protocol address\n           ar$tha   noctets     target hardware\
    \ address\n           ar$tpa   moctets     target protocol address\n         \
    \  ar$hrd - assigned to Frame Relay is 15 decimal\n                     (0x000F)\
    \ [7].\n           ar$pro - see assigned numbers for protocol ID number for\n\
    \                    the protocol using ARP. (IP is 0x0800).\n           ar$hln\
    \ - length in bytes of the address field (2, 3, or 4)\n           ar$pln - protocol\
    \ address length is dependent on the\n                    protocol (ar$pro) (for\
    \ IP ar$pln is 4).\n           ar$op -  1 for request and 2 for reply.\n     \
    \      ar$sha - Q.922 source hardware address, with C/R, FECN,\n             \
    \       BECN, and DE set to zero.\n           ar$tha - Q.922 target hardware address,\
    \ with C/R, FECN,\n                    BECN, and DE set to zero.\n   Because DLCIs\
    \ within most Frame Relay networks have only local\n   significance, an end station\
    \ will not have a specific DLCI assigned\n   to itself.  Therefore, such a station\
    \ does not have an address to put\n   into the ARP request or reply.  Fortunately,\
    \ the Frame Relay network\n   does provide a method for obtaining the correct\
    \ DLCIs. The solution\n   proposed for the locally addressed Frame Relay network\
    \ below will\n   work equally well for a network where DLCIs have global significance.\n\
    \   The DLCI carried within the Frame Relay header is modified as it\n   traverses\
    \ the network.  When the packet arrives at its destination,\n   the DLCI has been\
    \ set to the value that, from the standpoint of the\n   receiving station, corresponds\
    \ to the sending station.  For example,\n   in figure 1 below, if station A were\
    \ to send a message to station B,\n   it would place DLCI 50 in the Frame Relay\
    \ header.  When station B\n   received this message, however, the DLCI would have\
    \ been modified by\n   the network and would appear to B as DLCI 70.\n       \
    \                           ~~~~~~~~~~~~~~~\n                                \
    \ (                )\n               +-----+          (                  )   \
    \          +-----+\n               |     |-50------(--------------------)---------70-|\
    \     |\n               |  A  |        (                      )           |  B\
    \  |\n               |     |-60-----(---------+            )           |     |\n\
    \               +-----+         (        |           )            +-----+\n  \
    \                              (       |          )\n                        \
    \         (      |         )  <---Frame Relay\n                              \
    \    ~~~~~~~~~~~~~~~~         network\n                                      \
    \  80\n                                        |\n                           \
    \          +-----+\n                                     |     |\n           \
    \                          |  C  |\n                                     |   \
    \  |\n                                     +-----+\n                         \
    \       Figure 1\n      Lines between stations represent data link connections\
    \ (DLCs).\n      The numbers indicate the local DLCI associated with each\n  \
    \    connection.\n              DLCI to Q.922 Address Table for Figure 1\n   \
    \           DLCI (decimal)  Q.922 address (hex)\n                   50       \
    \       0x0C21\n                   60              0x0CC1\n                  \
    \ 70              0x1061\n                   80              0x1401\n      If\
    \ you know about frame relay, you should understand the\n      correlation between\
    \ DLCI and Q.922 address.  For the uninitiated,\n      the translation between\
    \ DLCI and Q.922 address is based on a two\n      byte address length using the\
    \ Q.922 encoding format.  The format\n      is:\n                8   7   6   5\
    \   4   3    2   1\n              +------------------------+---+--+\n        \
    \      |  DLCI (high order)     |c/r|ea|\n              +--------------+----+----+---+--+\n\
    \              | DLCI (lower) |FECN|BECN|DE |EA|\n              +--------------+----+----+---+--+\n\
    \      For ARP and its variants, the FECN, BECN, C/R and DE bits are\n      assumed\
    \ to be 0.\n   When an ARP message reaches a destination, all hardware addresses\n\
    \   will be invalid.  The address found in the frame header will,\n   however,\
    \ be correct. Though it does violate the purity of layering,\n   Frame Relay may\
    \ use the address in the header as the sender hardware\n   address.  It should\
    \ also be noted that the target hardware address,\n   in both ARP request and\
    \ reply, will also be invalid.  This should not\n   cause problems since ARP does\
    \ not rely on these fields and in fact,\n   an implementation may zero fill or\
    \ ignore the target hardware address\n   field entirely.\n   As an example of\
    \ how this address replacement scheme may work, refer\n   to figure 1.  If station\
    \ A (protocol address pA) wished to resolve\n   the address of station B (protocol\
    \ address pB), it would format an\n   ARP request with the following values:\n\
    \              ARP request from A\n                ar$op     1 (request)\n   \
    \             ar$sha    unknown\n                ar$spa    pA\n              \
    \  ar$tha    undefined\n                ar$tpa    pB\n   Because station A will\
    \ not have a source address associated with it,\n   the source hardware address\
    \ field is not valid.  Therefore, when the\n   ARP packet is received, it must\
    \ extract the correct address from the\n   Frame Relay header and place it in\
    \ the source hardware address field.\n   This way, the ARP request from A will\
    \ become:\n              ARP request from A as modified by B\n               \
    \ ar$op     1 (request)\n                ar$sha    0x1061 (DLCI 70) from Frame\
    \ Relay header\n                ar$spa    pA\n                ar$tha    undefined\n\
    \                ar$tpa    pB\n   Station B's ARP will then be able to store station\
    \ A's protocol\n   address and Q.922 address association correctly.  Next, station\
    \ B\n   will form a reply message.  Many implementations simply place the\n  \
    \ source addresses from the ARP request into the target addresses and\n   then\
    \ fills in the source addresses with its addresses.  In this case,\n   the ARP\
    \ response would be:\n              ARP response from B\n                ar$op\
    \     2 (response)\n                ar$sha    unknown\n                ar$spa\
    \    pB\n                ar$tha    0x1061 (DLCI 70)\n                ar$tpa  \
    \  pA\n   Again, the source hardware address is unknown and when the request is\n\
    \   received, station A will extract the address from the Frame Relay\n   header\
    \ and place it in the source hardware address field.  Therefore,\n   the response\
    \ will become:\n              ARP response from B as modified by A\n         \
    \       ar$op     2 (response)\n                ar$sha    0x0C21 (DLCI 50)\n \
    \               ar$spa    pB\n                ar$tha    0x1061 (DLCI 70)\n   \
    \             ar$tpa    pA\n   Station A will now correctly recognize station\
    \ B having protocol\n   address pB associated with Q.922 address 0x0C21 (DLCI\
    \ 50).\n   Reverse ARP (RARP) [8] will work in exactly the same way.  Still\n\
    \   using figure 1, if we assume station C is an address server, the\n   following\
    \ RARP exchanges will occur:\n          RARP request from A             RARP request\
    \ as modified by C\n             ar$op  3 (RARP request)         ar$op  3  (RARP\
    \ request)\n             ar$sha unknown                  ar$sha 0x1401 (DLCI 80)\n\
    \             ar$spa undefined                ar$spa undefined\n             ar$tha\
    \ 0x0CC1 (DLCI 60)         ar$tha 0x0CC1 (DLCI 60)\n             ar$tpa pC   \
    \                    ar$tpa pC\n   Station C will then look up the protocol address\
    \ corresponding to\n   Q.922 address 0x1401 (DLCI 80) and send the RARP response.\n\
    \         RARP response from C            RARP response as modified by A\n   \
    \              ar$op  4  (RARP response)       ar$op  4 (RARP response)\n    \
    \             ar$sha unknown                  ar$sha 0x0CC1 (DLCI 60)\n      \
    \           ar$spa pC                       ar$spa pC\n                 ar$tha\
    \ 0x1401 (DLCI 80)         ar$tha 0x1401 (DLCI 80)\n                 ar$tpa pA\
    \                       ar$tpa pA\n   This means that the Frame Relay interface\
    \ must only intervene in the\n   processing of incoming packets.\n   In the absence\
    \ of suitable multicast, ARP may still be implemented.\n   To do this, the end\
    \ station simply sends a copy of the ARP request\n   through each relevant DLC,\
    \ thereby simulating a broadcast.\n   The use of multicast addresses in a Frame\
    \ Relay environment is\n   presently under study by Frame Relay providers.  At\
    \ such time that\n   the issues surrounding multicasting are resolved, multicast\n\
    \   addressing may become useful in sending ARP requests and other\n   \"broadcast\"\
    \ messages.\n   Because of the inefficiencies of broadcasting in a Frame Relay\n\
    \   environment, a new address resolution variation was developed.  It is\n  \
    \ called Inverse ARP [11] and describes a method for resolving a\n   protocol\
    \ address when the hardware address is already known.  In\n   Frame Relay's case,\
    \ the known hardware address is the DLCI.  Using\n   Inverse ARP for Frame Relay\
    \ follows the same pattern as ARP and RARP\n   use.  That is the source hardware\
    \ address is inserted at the\n   receiving station.\n   In our example, station\
    \ A may use Inverse ARP to discover the\n   protocol address of the station associated\
    \ with its DLCI 50.  The\n   Inverse ARP request would be as follows:\n      \
    \        InARP Request from A (DLCI 50)\n              ar$op   8       (InARP\
    \ request)\n              ar$sha  unknown\n              ar$spa  pA\n        \
    \      ar$tha  0x0C21  (DLCI 50)\n              ar$tpa  unknown\n   When Station\
    \ B receives this packet, it will modify the source\n   hardware address with\
    \ the Q.922 address from the Frame Relay header.\n   This way, the InARP request\
    \ from A will become:\n              ar$op   8       (InARP request)\n       \
    \       ar$sha  0x1061\n              ar$spa  pA\n              ar$tha  0x0C21\n\
    \              ar$tpa  unknown.\n   Station B will format an Inverse ARP response\
    \ and send it to station\n   A as it would for any ARP message.\n"
- title: 8.  IP over Frame Relay
  contents:
  - "8.  IP over Frame Relay\n   Internet Protocol [9] (IP) datagrams sent over a\
    \ Frame Relay network\n   conform to the encapsulation described previously. \
    \ Within this\n   context, IP could be encapsulated in two different ways.\n \
    \          1.  NLPID value indicating IP\n           +-----------------------+-----------------------+\n\
    \           | Q.922 Address                                 |\n           +-----------------------+-----------------------+\n\
    \           | Control (UI)  0x03    | NLPID = 0xCC          |\n           +-----------------------+-----------------------+\n\
    \           | IP Packet             .                       |\n           |  \
    \                     .                       |\n           |                \
    \       .                       |\n           +-----------------------+-----------------------+\n\
    \           2.  NLPID value indicating SNAP\n           +-----------------------+-----------------------+\n\
    \           | Q.922 Address                                 |\n           +-----------------------+-----------------------+\n\
    \           | Control (UI)  0x03    |     pad     0x00      |\n           +-----------------------+-----------------------+\n\
    \           |  NLPID = 0x80         |                       |  SNAP Header\n \
    \          +-----------------------+  OUI = 0x00-00-00     +  Indicating\n   \
    \        |                                               |  IP\n           +-----------------------+-----------------------+\n\
    \           |  PID = 0x0800                                 |\n           +-----------------------+-----------------------+\n\
    \           |                   IP packet                   |\n           |  \
    \                     .                       |\n           |                \
    \       .                       |\n           |                       .      \
    \                 |\n           +-----------------------+-----------------------+\n\
    \   Although both of these encapsulations are supported under the given\n   definitions,\
    \ it is advantageous to select only one method as the\n   appropriate mechanism\
    \ for encapsulating IP data.  Therefore, IP data\n   shall be encapsulated using\
    \ the NLPID value of 0xCC indicating IP as\n   shown in option 1 above.  This\
    \ (option 1) is more efficient in\n   transmission (48 fewer bits), and is consistent\
    \ with the\n   encapsulation of IP in X.25.\n"
- title: 9.  Other Protocols over Frame Relay
  contents:
  - "9.  Other Protocols over Frame Relay\n   As with IP encapsulation, there are\
    \ alternate ways to transmit\n   various protocols within the scope of this definition.\
    \  To eliminate\n   the conflicts, the SNAP encapsulation is only used if no NLPID\
    \ value\n   is defined for the given protocol.\n   As an example of how this works,\
    \ ISO CLNP has a NLPID defined (0x81).\n   Therefore, the NLPID field will indicate\
    \ ISO CLNP and the data packet\n   will follow immediately.  The frame would be\
    \ as follows:\n                  +---------------------------------------------+\n\
    \                  |               Q.922 Address                 |\n         \
    \         +----------------------+----------------------+\n                  |\
    \ Control     (0x03)   | NLPID  - 0x81 (CLNP) |\n                  +----------------------+----------------------+\n\
    \                  | remainder of CLNP packet                    |\n         \
    \         |                   .                         |\n                  |\
    \                   .                         |\n                  +---------------------------------------------+\n\
    \   In this example, the NLPID is used to identify the data packet as\n   CLNP.\
    \  It is also considered part of the CLNP packet and as such, the\n   NLPID should\
    \ not be removed before being sent to the upper layers for\n   processing.  The\
    \ NLPID is not duplicated.\n   Other protocols, such as IPX, do not have a NLPID\
    \ value defined.  As\n   mentioned above, IPX would be encapsulated using the\
    \ SNAP header.  In\n   this case, the frame would be as follows:\n           \
    \       +---------------------------------------------+\n                  | \
    \              Q.922 Address                 |\n                  +----------------------+----------------------+\n\
    \                  | Control       0x03   | pad  0x00            |\n         \
    \         +----------------------+----------------------+\n                  |\
    \ NLPID  - 0x80 (SNAP) | OUI - 0x00 00 00     |\n                  +----------------------+\
    \                      |\n                  |                                \
    \             |\n                  +---------------------------------------------+\n\
    \                  | PID = 0x8137                                |\n         \
    \         +---------------------------------------------+\n                  |\
    \   IPX packet                                |\n                  |         \
    \          .                         |\n                  |                  \
    \ .                         |\n                  +---------------------------------------------+\n"
- title: 10.  Bridging Model for Frame Relay
  contents:
  - "10.  Bridging Model for Frame Relay\n   The model for bridging in a Frame Relay\
    \ network is identical to the\n   model for remote bridging as described in IEEE\
    \ P802.1g \"Remote MAC\n   Bridging\" [13] and supports the concept of \"Virtual\
    \ Ports\". Remote\n   bridges with LAN ports receive and transmit MAC frames to\
    \ and from\n   the LANS to which they are attached. They may also receive and\n\
    \   transmit MAC frames through virtual ports to and from other remote\n   bridges.\
    \  A virtual port may represent an abstraction of a remote\n   bridge's point\
    \ of access to one, two or more other remote bridges.\n   Remote Bridges are statically\
    \ configured as members of a remote\n   bridge group by management. All members\
    \ of a remote bridge group are\n   connected by one or more virtual ports. The\
    \ set of remote MAC bridges\n   in a remote bridge group provides actual or *potential*\
    \ MAC layer\n   interconnection between a set of LANs and other remote bridge\
    \ groups\n   to which the remote bridges attach.\n   In a Frame Relay network\
    \ there must be a full mesh of Frame Relay VCs\n   between bridges of a remote\
    \ bridge group.  If the frame relay network\n   is not a full mesh, then the bridge\
    \ network must be divided into\n   multiple remote bridge groups.\n   The frame\
    \ relay VCs that interconnect the bridges of a remote bridge\n   group may be\
    \ combined or used individually to form one or more\n   virtual bridge ports.\
    \  This gives flexibility to treat the Frame\n   Relay interface either as a single\
    \ virtual bridge port, with all VCs\n   in a group, or as a collection of bridge\
    \ ports (individual or grouped\n   VCs).\n   When a single virtual bridge port\
    \ provides the interconnectivity for\n   all bridges of a given remote bridge\
    \ group (i.e. all VCs are combined\n   into a single virtual port), the standard\
    \ Spanning Tree Algorithm may\n   be used to determine the state of the virtual\
    \ port.  When more than\n   one virtual port is configured within a given remote\
    \ bridge group\n   then an \"extended\" Spanning Tree Algorithm is required. \
    \ Such an\n   extended algorithm is defined in IEEE 802.1g [13].  The operation\
    \ of\n   this algorithm is such that a virtual port is only put into backup if\n\
    \   there is a loop in the network external to the remote bridge group.\n   The\
    \ simplest bridge configuration for a Frame Relay network is the\n   LAN view\
    \ where all VCs are combined into a single virtual port.\n   Frames, such as BPDUs,\
    \  which would be broadcast on a LAN, must be\n   flooded to each VC (or multicast\
    \ if the service is developed for\n   Frame Relay services). Flooding is performed\
    \ by sending the packet to\n   each relevant DLC associated with the Frame Relay\
    \ interface. The VCs\n   in this environment are generally invisible to the bridge.\
    \  That is,\n   the bridge sends a flooded frame to the frame relay interface\
    \ and\n   does not \"see\" that the frame is being forwarded to each VC\n   individually.\
    \  If all participating bridges are fully connected (full\n   mesh) the standard\
    \ Spanning Tree Algorithm will suffice in this\n   configuration.\n   Typically\
    \ LAN bridges learn which interface a particular end station\n   may be reached\
    \ on by associating a MAC address with a bridge port.\n   In a Frame Relay network\
    \ configured for the LAN-like single bridge\n   port (or any set of VCs grouped\
    \ together to form a single bridge\n   port), however, the bridge must not only\
    \ associated a MAC address\n   with a bridge port, but it must also associate\
    \ it with a connection\n   identifier.  For Frame Relay networks, this connection\
    \ identifier is\n   a DLCI.  It is unreasonable and perhaps impossible to require\
    \ bridges\n   to statically configure an association of every possible destination\n\
    \   MAC address with a DLC.  Therefore, Frame Relay LAN-modeled bridges\n   must\
    \ provide a mechanism to allow the Frame Relay bridge port to\n   dynamically\
    \ learn the associations.  To accomplish this dynamic\n   learning, a bridged\
    \ packet shall conform to the encapsulation\n   described within section 7.  In\
    \ this way, the receiving Frame Relay\n   interface will know to look into the\
    \ bridged packet to gather the\n   appropriate information.\n   A second Frame\
    \ Relay bridging approach, the point-to-point view,\n   treats each Frame Relay\
    \ VC as a separate bridge port.  Flooding and\n   forwarding packets are significantly\
    \ less complicated using the\n   point-to-point approach because each bridge port\
    \ has only one\n   destination.  There is no need to perform artificial flooding\
    \ or to\n   associate DLCIs with destination MAC addresses.  Depending upon the\n\
    \   interconnection of the VCs, an extended Spanning Tree algorithm may\n   be\
    \ required to permit all virtual ports to remain active as long as\n   there are\
    \ no true loops in the topology external to the remote bridge\n   group.\n   It\
    \ is also possible to combine the LAN view and the point-to-point\n   view on\
    \ a single Frame Relay interface.  To do this, certain VCs are\n   combined to\
    \ form a single virtual bridge port while other VCs are\n   independent bridge\
    \ ports.\n   The following drawing illustrates the different possible bridging\n\
    \   configurations.  The dashed lines between boxes represent virtual\n   circuits.\n\
    \                                                 +-------+\n                \
    \              -------------------|   B   |\n                             /  \
    \          -------|       |\n                            /            /      \
    \ +-------+\n                           /             |\n                 +-------+/\
    \              \\       +-------+\n                 |   A   |                -------|\
    \   C   |\n                 |       |-----------------------|       |\n      \
    \           +-------+\\                      +-------+\n                     \
    \      \\\n                            \\                    +-------+\n     \
    \                        \\                   |   D   |\n                    \
    \          -------------------|       |\n                                    \
    \             +-------+\n   Since there is less than a full mesh of VCs between\
    \ the bridges in\n   this example, the network must be divided into more than\
    \ one remote\n   bridge group.  A reasonable configuration is to have bridges\
    \ A, B,\n   and C in one group, and have bridges A and D in a second.\n   Configuration\
    \ of the first bridge group combines the VCs\n   interconnection the three bridges\
    \ (A, B, and C) into a single virtual\n   port.  This is an example of the LAN\
    \ view configuration.  The second\n   group would also be a single virtual port\
    \ which simply connects\n   bridges A and D.  In this configuration the standard\
    \ Spanning Tree\n   Algorithm is sufficient to detect loops.\n   An alternative\
    \ configuration has three individual virtual ports in\n   the first group corresponding\
    \ to the VCs interconnecting bridges A, B\n   and C.  Since the application of\
    \ the standard Spanning Tree Algorithm\n   to this configuration would detect\
    \ a loop in the topology, an\n   extended Spanning Tree Algorithm would have to\
    \ be used in order for\n   all virtual ports to be kept active.  Note that the\
    \ second group\n   would still consist of a single virtual port and the standard\n\
    \   Spanning Tree Algorithm could be used in this group.\n   Using the same drawing,\
    \ one could construct a remote bridge scenario\n   with three bridge groups. \
    \ This would be an example of the point-to-\n   point case.  Here, the VC connecting\
    \ A and B, the VC connecting A and\n   C, and the VC connecting A and D are all\
    \ bridge groups with a single\n   virtual port.\n"
- title: 11.  Appendix A
  contents:
  - "11.  Appendix A\n        List of Commonly Used NLPIDs\n           0x00    Null\
    \ Network Layer or Inactive Set\n                   (not used with Frame Relay)\n\
    \           0x80    SNAP\n           0x81    ISO CLNP\n           0x82    ISO\
    \ ESIS\n           0x83    ISO ISIS\n           0xCC    Internet IP\n        List\
    \ of PIDs of OUI 00-80-C2\n           with preserved FCS   w/o preserved FCS \
    \   Media\n           ------------------   -----------------    --------------\n\
    \           0x00-01              0x00-07              802.3/Ethernet\n       \
    \    0x00-02              0x00-08              802.4\n           0x00-03     \
    \         0x00-09              802.5\n           0x00-04              0x00-0A\
    \              FDDI\n                                0x00-0B              802.6\n\
    \                                0x00-0D              Fragments\n            \
    \                    0x00-0E              BPDUs as defined by\n              \
    \                                         802.1(d) or\n                      \
    \                                 802.1(g)[12].\n"
- title: 12.  Appendix B - Connection Oriented procedures.
  contents:
  - "12.  Appendix B - Connection Oriented procedures.\n   This appendix contains\
    \ additional information and instructions for\n   using CCITT Q.933 and other\
    \ CCITT standards for encapsulating data\n   over frame relay.  The information\
    \ contained here is similar (and in\n   some cases identical) to that found in\
    \ Annex F to ANSI T1.617 written\n   by Rao Cherukuri of IBM.  The authoritative\
    \ source for this\n   information is in Annex F and is repeated here only for\
    \ convenience.\n   The Network Level Protocol ID (NLPID) field is administered\
    \ by ISO\n   and CCITT.  It contains values for many different protocols including\n\
    \   IP, CLNP (ISO 8473) CCITT Q.933, and ISO 8208.  A figure summarizing\n   a\
    \ generic encapsulation technique over frame relay networks follows.\n   The scheme's\
    \ flexibility consists in the identification of multiple\n   alternative to identify\
    \ different protocols used either by\n       - end-to-end systems or\n       -\
    \ LAN to LAN bride and routers or\n       - a combination of the above.\n    \
    \ over frame relay networks.\n                              Q.922 control\n  \
    \                                 |\n                                   |\n  \
    \            --------------------------------------------\n              |   \
    \                                       |\n             UI                   \
    \                    I Frame\n              |                                \
    \          |\n        ---------------------------------         --------------\n\
    \        | 0x08    | 0x81      |0xCC     | 0x80    |..01....    |..10....\n  \
    \      |         |           |         |         |            |\n       Q.933\
    \     CLNP        IP        SNAP     ISO 8208    ISO 8208\n        |         \
    \                      |       Modulo 8    Modulo 128\n        |             \
    \                  |\n        --------------------           OUI\n        |  \
    \                |            |\n       L2 ID              L3 ID      -------\n\
    \        |               User         |     |\n        |               specified\
    \    |     |\n        |               0x70        802.3 802.6\n        |\n   \
    \     -------------------\n        |0x51 |0x4E |     |0x4C\n        |     |  \
    \   |     |\n       7776  Q.922 Others 802.2\n   For those protocols which do\
    \ not have a NLPID assigned or do not have\n   a SNAP encapsulation, the NLPID\
    \ value of 0x08, indicating CCITT\n   Recommendation Q.933 should be used.  The\
    \ four octets following the\n   NLPID include both layer 2 and layer 3 protocol\
    \ identification.  The\n   code points for most protocols are currently defined\
    \ in ANSI T1.617\n   low layer compatibility information element.  There is also\
    \ an escape\n   for defining non-standard protocols.\n                      Format\
    \ of Other Protocols\n                          using Q.933 NLPID\n          \
    \        +-------------------------------+\n                  |        Q.922 Address\
    \          |\n                  +---------------+---------------+\n          \
    \        |Control  0x03  | NLPID   0x08  |\n                  +---------------+---------------+\n\
    \                  |          L2 Protocol ID       |\n                  | octet\
    \ 1       |  octet 2      |\n                  +-------------------------------+\n\
    \                  |          L3 Protocol ID       |\n                  | octet\
    \ 2       |  octet 2      |\n                  +-------------------------------+\n\
    \                  |         Protocol Data         |\n                  +-------------------------------+\n\
    \                  | FCS                           |\n                  +-------------------------------+\n\
    \                      ISO 8802/2 with user specified\n                      \
    \        layer 3\n                  +-------------------------------+\n      \
    \            |        Q.922 Address          |\n                  +---------------+---------------+\n\
    \                  |Control  0x03  | NLPID   0x08  |\n                  +---------------+---------------+\n\
    \                  | 802/2   0x4C  |      0x80     |\n                  +-------------------------------+\n\
    \                  |User Spec. 0x70|     Note 1    |\n                  +-------------------------------+\n\
    \                  |  DSAP         |     SSAP      |\n                  +-------------------------------+\n\
    \                  | Control  (Note 2)             |\n                  +-------------------------------+\n\
    \                  |      Remainder of PDU         |\n                  +-------------------------------+\n\
    \                  | FCS                           |\n                  +-------------------------------+\n\
    \                 Note 1: Indicates the code point for user specified\n      \
    \                   layer 3 protocol.\n                 Note 2: Control field\
    \ is two octets for I-format and\n                         S-format frames (see\
    \ 88002/2)\n   Encapsulations using I frame (layer 2)\n   The Q.922 I frame is\
    \ for supporting layer 3 protocols which require\n   acknowledged data link layer\
    \ (e.g., ISO 8208).  The C/R bit (T1.618\n   address) will be used for command\
    \ and response indications.\n                      Format of ISO 8208 frame\n\
    \                              Modulo 8\n                  +-------------------------------+\n\
    \                  |        Q.922 Address          |\n                  +---------------+---------------+\n\
    \                  | ....Control I frame           |\n                  +---------------+---------------+\n\
    \                  | 8208 packet (modulo 8) Note 3 |\n                  |    \
    \                           |\n                  +-------------------------------+\n\
    \                  | FCS                           |\n                  +-------------------------------+\n\
    \                 Note 3: First octet of 8208 packet also identifies the\n   \
    \                      NLPID which is \"..01....\".\n                      Format\
    \ of ISO 8208 frame\n                              Modulo 128\n              \
    \    +-------------------------------+\n                  |        Q.922 Address\
    \          |\n                  +---------------+---------------+\n          \
    \        | ....Control I frame           |\n                  +---------------+---------------+\n\
    \                  | 8208 packet (modulo 128)      |\n                  |    \
    \      Note 4               |\n                  +-------------------------------+\n\
    \                  | FCS                           |\n                  +-------------------------------+\n\
    \                 Note 4: First octet of 8208 packet also identifies the\n   \
    \                      NLPID which is \"..10....\".\n"
- title: 13.  References
  contents:
  - "13.  References\n   [1] International Telegraph and Telephone Consultative Committee,\n\
    \       \"ISDN Data Link Layer Specification for Frame Mode Bearer\n       Services\"\
    , CCITT Recommendation Q.922, 19 April 1991.\n   [2] American National Standard\
    \ For Telecommunications - Integrated\n       Services Digital Network - Core\
    \ Aspects of Frame Protocol for Use\n       with Frame Relay Bearer Service, ANSI\
    \ T1.618-1991, 18 June 1991.\n   [3] Information technology - Telecommunications\
    \ and Information\n       Exchange between systems - Protocol Identification in\
    \ the Network\n       Layer, ISO/IEC  TR 9577: 1990 (E)  1990-10-15.\n   [4] Baker,\
    \ F., Editor, \"Point to Point Protocol Extensions for\n       Bridging\", RFC\
    \ 1220, ACC, April 1991.\n   [5] International Standard, Information Processing\
    \ Systems - Local\n       Area Networks - Logical Link Control, ISO 8802-2: 1989\
    \ (E), IEEE\n       Std 802.2-1989, 1989-12-31.\n   [6] Plummer, D., \"An Ethernet\
    \ Address Resolution Protocol - or -\n       Converting Network Protocol Addresses\
    \ to 48.bit Ethernet Address\n       for Transmission on Ethernet Hardware\",\
    \ STD 37, RFC 826, MIT,\n       November 1982.\n   [7] Reynolds, J. and J. Postel,\
    \ \"Assigned Numbers\", STD 2, RFC 1340,\n       USC/Information Sciences Institute,\
    \ July 1992.\n   [8] Finlayson, R., Mann, R., Mogul, J., and M. Theimer, \"A Reverse\n\
    \       Address Resolution Protocol\", STD 38, RFC 903, Stanford\n       University,\
    \ June 1984.\n   [9] Postel, J. and Reynolds, J., \"A Standard for the Transmission\
    \ of\n       IP Datagrams over IEEE 802 Networks\", RFC 1042, USC/Information\n\
    \       Sciences Institute, February 1988.\n  [10] IEEE, \"IEEE Standard for Local\
    \ and Metropolitan Area Networks:\n       Overview and architecture\", IEEE Standards\
    \ 802-1990.\n  [11] Bradley, T., and C. Brown, \"Inverse Address Resolution Protocol\"\
    ,\n       RFC 1293, Wellfleet Communications, Inc., January 1992.\n  [12] IEEE,\
    \ \"IEEE Standard for Local and Metropolitan Networks: Media\n       Access Control\
    \ (MAC) Bridges\", IEEE Standard 802.1D-1990.\n  [13] PROJECT 802 - LOCAL AND\
    \ METROPOLITAN AREA NETWORKS, Draft\n       Standard 802.1G: Remote MAC Bridging,\
    \ Draft 6, October 12, 1992.\n"
- title: 14.  Security Considerations
  contents:
  - "14.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 15.  Authors' Addresses
  contents:
  - "15.  Authors' Addresses\n   Terry Bradley\n   Wellfleet Communications, Inc.\n\
    \   15 Crosby Drive\n   Bedford, MA  01730\n   Phone:  (617) 280-2401\n   Email:\
    \  tbradley@wellfleet.com\n   Caralyn Brown\n   Wellfleet Communications, Inc.\n\
    \   15 Crosby Drive\n   Bedford, MA  01730\n   Phone:  (617) 280-2335\n   Email:\
    \  cbrown@wellfleet.com\n   Andrew G. Malis\n   Ascom Timeplex, Inc.\n   Advanced\
    \ Products Business Unit\n   289 Great Road   Suite 205\n   Acton, MA  01720\n\
    \   Phone:  (508) 266-4500\n   Email: malis_a@timeplex.com\n"
