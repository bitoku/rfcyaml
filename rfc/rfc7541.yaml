- title: __initial_text__
  contents:
  - '                  HPACK: Header Compression for HTTP/2

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification defines HPACK, a compression format for\n   efficiently\
    \ representing HTTP header fields, to be used in HTTP/2.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7541.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Overview ...................................................4\n  \
    \    1.2. Conventions ................................................5\n    \
    \  1.3. Terminology ................................................5\n   2. Compression\
    \ Process Overview ....................................6\n      2.1. Header List\
    \ Ordering .......................................6\n      2.2. Encoding and Decoding\
    \ Contexts .............................6\n      2.3. Indexing Tables ............................................6\n\
    \           2.3.1. Static Table ........................................6\n  \
    \         2.3.2. Dynamic Table .......................................6\n    \
    \       2.3.3. Index Address Space .................................7\n      2.4.\
    \ Header Field Representation ................................8\n   3. Header\
    \ Block Decoding ...........................................8\n      3.1. Header\
    \ Block Processing ....................................8\n      3.2. Header Field\
    \ Representation Processing .....................9\n   4. Dynamic Table Management\
    \ ........................................9\n      4.1. Calculating Table Size\
    \ ....................................10\n      4.2. Maximum Table Size ........................................10\n\
    \      4.3. Entry Eviction When Dynamic Table Size Changes ............11\n  \
    \    4.4. Entry Eviction When Adding New Entries ....................11\n   5.\
    \ Primitive Type Representations .................................11\n      5.1.\
    \ Integer Representation ....................................11\n      5.2. String\
    \ Literal Representation .............................13\n   6. Binary Format\
    \ ..................................................14\n      6.1. Indexed Header\
    \ Field Representation .......................14\n      6.2. Literal Header Field\
    \ Representation .......................15\n           6.2.1. Literal Header Field\
    \ with Incremental Indexing .....15\n           6.2.2. Literal Header Field without\
    \ Indexing ..............16\n           6.2.3. Literal Header Field Never Indexed\
    \ .................17\n      6.3. Dynamic Table Size Update .................................18\n\
    \   7. Security Considerations ........................................19\n  \
    \    7.1. Probing Dynamic Table State ...............................19\n    \
    \       7.1.1. Applicability to HPACK and HTTP ....................20\n      \
    \     7.1.2. Mitigation .........................................20\n        \
    \   7.1.3. Never-Indexed Literals .............................21\n      7.2.\
    \ Static Huffman Encoding ...................................22\n      7.3. Memory\
    \ Consumption ........................................22\n      7.4. Implementation\
    \ Limits .....................................23\n   8. References .....................................................23\n\
    \      8.1. Normative References ......................................23\n  \
    \    8.2. Informative References ....................................24\n   Appendix\
    \ A. Static Table Definition ...............................25\n   Appendix B.\
    \ Huffman Code ..........................................27\n   Appendix C. Examples\
    \ ..............................................33\n     C.1. Integer Representation\
    \ Examples ............................33\n       C.1.1. Example 1: Encoding 10\
    \ Using a 5-Bit Prefix ............33\n       C.1.2. Example 2: Encoding 1337\
    \ Using a 5-Bit Prefix ..........33\n       C.1.3. Example 3: Encoding 42 Starting\
    \ at an Octet Boundary ...34\n     C.2. Header Field Representation Examples .......................34\n\
    \       C.2.1. Literal Header Field with Indexing .....................34\n  \
    \     C.2.2. Literal Header Field without Indexing ..................35\n    \
    \   C.2.3. Literal Header Field Never Indexed .....................36\n      \
    \ C.2.4. Indexed Header Field ...................................37\n     C.3.\
    \ Request Examples without Huffman Coding ....................37\n       C.3.1.\
    \ First Request ..........................................37\n       C.3.2. Second\
    \ Request .........................................38\n       C.3.3. Third Request\
    \ ..........................................39\n     C.4. Request Examples with\
    \ Huffman Coding .......................41\n       C.4.1. First Request ..........................................41\n\
    \       C.4.2. Second Request .........................................42\n  \
    \     C.4.3. Third Request ..........................................43\n    \
    \ C.5. Response Examples without Huffman Coding ...................45\n      \
    \ C.5.1. First Response .........................................45\n       C.5.2.\
    \ Second Response ........................................46\n       C.5.3. Third\
    \ Response .........................................47\n     C.6. Response Examples\
    \ with Huffman Coding ......................49\n       C.6.1. First Response .........................................49\n\
    \       C.6.2. Second Response ........................................51\n  \
    \     C.6.3. Third Response .........................................52\n   Acknowledgments\
    \ ...................................................55\n   Authors' Addresses\
    \ ................................................55\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In HTTP/1.1 (see [RFC7230]), header fields are not compressed.\
    \  As\n   web pages have grown to require dozens to hundreds of requests, the\n\
    \   redundant header fields in these requests unnecessarily consume\n   bandwidth,\
    \ measurably increasing latency.\n   SPDY [SPDY] initially addressed this redundancy\
    \ by compressing header\n   fields using the DEFLATE [DEFLATE] format, which proved\
    \ very\n   effective at efficiently representing the redundant header fields.\n\
    \   However, that approach exposed a security risk as demonstrated by the\n  \
    \ CRIME (Compression Ratio Info-leak Made Easy) attack (see [CRIME]).\n   This\
    \ specification defines HPACK, a new compressor that eliminates\n   redundant\
    \ header fields, limits vulnerability to known security\n   attacks, and has a\
    \ bounded memory requirement for use in constrained\n   environments.  Potential\
    \ security concerns for HPACK are described in\n   Section 7.\n   The HPACK format\
    \ is intentionally simple and inflexible.  Both\n   characteristics reduce the\
    \ risk of interoperability or security\n   issues due to implementation error.\
    \  No extensibility mechanisms are\n   defined; changes to the format are only\
    \ possible by defining a\n   complete replacement.\n"
- title: 1.1.  Overview
  contents:
  - "1.1.  Overview\n   The format defined in this specification treats a list of\
    \ header\n   fields as an ordered collection of name-value pairs that can include\n\
    \   duplicate pairs.  Names and values are considered to be opaque\n   sequences\
    \ of octets, and the order of header fields is preserved\n   after being compressed\
    \ and decompressed.\n   Encoding is informed by header field tables that map header\
    \ fields to\n   indexed values.  These header field tables can be incrementally\n\
    \   updated as new header fields are encoded or decoded.\n   In the encoded form,\
    \ a header field is represented either literally\n   or as a reference to a header\
    \ field in one of the header field\n   tables.  Therefore, a list of header fields\
    \ can be encoded using a\n   mixture of references and literal values.\n   Literal\
    \ values are either encoded directly or use a static Huffman\n   code.\n   The\
    \ encoder is responsible for deciding which header fields to insert\n   as new\
    \ entries in the header field tables.  The decoder executes the\n   modifications\
    \ to the header field tables prescribed by the encoder,\n   reconstructing the\
    \ list of header fields in the process.  This\n   enables decoders to remain simple\
    \ and interoperate with a wide\n   variety of encoders.\n   Examples illustrating\
    \ the use of these different mechanisms to\n   represent header fields are available\
    \ in Appendix C.\n"
- title: 1.2.  Conventions
  contents:
  - "1.2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119 [RFC2119].\n   All numeric values are in network byte order.  Values\
    \ are unsigned\n   unless otherwise indicated.  Literal values are provided in\
    \ decimal\n   or hexadecimal as appropriate.\n"
- title: 1.3.  Terminology
  contents:
  - "1.3.  Terminology\n   This specification uses the following terms:\n   Header\
    \ Field:  A name-value pair.  Both the name and value are\n      treated as opaque\
    \ sequences of octets.\n   Dynamic Table:  The dynamic table (see Section 2.3.2)\
    \ is a table that\n      associates stored header fields with index values.  This\
    \ table is\n      dynamic and specific to an encoding or decoding context.\n \
    \  Static Table:  The static table (see Section 2.3.1) is a table that\n     \
    \ statically associates header fields that occur frequently with\n      index\
    \ values.  This table is ordered, read-only, always\n      accessible, and it\
    \ may be shared amongst all encoding or decoding\n      contexts.\n   Header List:\
    \  A header list is an ordered collection of header fields\n      that are encoded\
    \ jointly and can contain duplicate header fields.\n      A complete list of header\
    \ fields contained in an HTTP/2 header\n      block is a header list.\n   Header\
    \ Field Representation:  A header field can be represented in\n      encoded form\
    \ either as a literal or as an index (see Section 2.4).\n   Header Block:  An\
    \ ordered list of header field representations,\n      which, when decoded, yields\
    \ a complete header list.\n"
- title: 2.  Compression Process Overview
  contents:
  - "2.  Compression Process Overview\n   This specification does not describe a specific\
    \ algorithm for an\n   encoder.  Instead, it defines precisely how a decoder is\
    \ expected to\n   operate, allowing encoders to produce any encoding that this\n\
    \   definition permits.\n"
- title: 2.1.  Header List Ordering
  contents:
  - "2.1.  Header List Ordering\n   HPACK preserves the ordering of header fields\
    \ inside the header list.\n   An encoder MUST order header field representations\
    \ in the header\n   block according to their ordering in the original header list.\
    \  A\n   decoder MUST order header fields in the decoded header list according\n\
    \   to their ordering in the header block.\n"
- title: 2.2.  Encoding and Decoding Contexts
  contents:
  - "2.2.  Encoding and Decoding Contexts\n   To decompress header blocks, a decoder\
    \ only needs to maintain a\n   dynamic table (see Section 2.3.2) as a decoding\
    \ context.  No other\n   dynamic state is needed.\n   When used for bidirectional\
    \ communication, such as in HTTP, the\n   encoding and decoding dynamic tables\
    \ maintained by an endpoint are\n   completely independent, i.e., the request\
    \ and response dynamic tables\n   are separate.\n"
- title: 2.3.  Indexing Tables
  contents:
  - "2.3.  Indexing Tables\n   HPACK uses two tables for associating header fields\
    \ to indexes.  The\n   static table (see Section 2.3.1) is predefined and contains\
    \ common\n   header fields (most of them with an empty value).  The dynamic table\n\
    \   (see Section 2.3.2) is dynamic and can be used by the encoder to\n   index\
    \ header fields repeated in the encoded header lists.\n   These two tables are\
    \ combined into a single address space for\n   defining index values (see Section\
    \ 2.3.3).\n"
- title: 2.3.1.  Static Table
  contents:
  - "2.3.1.  Static Table\n   The static table consists of a predefined static list\
    \ of header\n   fields.  Its entries are defined in Appendix A.\n"
- title: 2.3.2.  Dynamic Table
  contents:
  - "2.3.2.  Dynamic Table\n   The dynamic table consists of a list of header fields\
    \ maintained in\n   first-in, first-out order.  The first and newest entry in\
    \ a dynamic\n   table is at the lowest index, and the oldest entry of a dynamic\
    \ table\n   is at the highest index.\n   The dynamic table is initially empty.\
    \  Entries are added as each\n   header block is decompressed.\n   The dynamic\
    \ table can contain duplicate entries (i.e., entries with\n   the same name and\
    \ same value).  Therefore, duplicate entries MUST NOT\n   be treated as an error\
    \ by a decoder.\n   The encoder decides how to update the dynamic table and as\
    \ such can\n   control how much memory is used by the dynamic table.  To limit\
    \ the\n   memory requirements of the decoder, the dynamic table size is\n   strictly\
    \ bounded (see Section 4.2).\n   The decoder updates the dynamic table during\
    \ the processing of a list\n   of header field representations (see Section 3.2).\n"
- title: 2.3.3.  Index Address Space
  contents:
  - "2.3.3.  Index Address Space\n   The static table and the dynamic table are combined\
    \ into a single\n   index address space.\n   Indices between 1 and the length\
    \ of the static table (inclusive)\n   refer to elements in the static table (see\
    \ Section 2.3.1).\n   Indices strictly greater than the length of the static table\
    \ refer to\n   elements in the dynamic table (see Section 2.3.2).  The length\
    \ of the\n   static table is subtracted to find the index into the dynamic table.\n\
    \   Indices strictly greater than the sum of the lengths of both tables\n   MUST\
    \ be treated as a decoding error.\n   For a static table size of s and a dynamic\
    \ table size of k, the\n   following diagram shows the entire valid index address\
    \ space.\n           <----------  Index Address Space ---------->\n          \
    \ <-- Static  Table -->  <-- Dynamic Table -->\n           +---+-----------+---+\
    \  +---+-----------+---+\n           | 1 |    ...    | s |  |s+1|    ...    |s+k|\n\
    \           +---+-----------+---+  +---+-----------+---+\n                   \
    \               ^                   |\n                                  |   \
    \                V\n                           Insertion Point      Dropping Point\n\
    \                       Figure 1: Index Address Space\n"
- title: 2.4.  Header Field Representation
  contents:
  - "2.4.  Header Field Representation\n   An encoded header field can be represented\
    \ either as an index or as a\n   literal.\n   An indexed representation defines\
    \ a header field as a reference to an\n   entry in either the static table or\
    \ the dynamic table (see\n   Section 6.1).\n   A literal representation defines\
    \ a header field by specifying its\n   name and value.  The header field name\
    \ can be represented literally\n   or as a reference to an entry in either the\
    \ static table or the\n   dynamic table.  The header field value is represented\
    \ literally.\n   Three different literal representations are defined:\n   o  A\
    \ literal representation that adds the header field as a new entry\n      at the\
    \ beginning of the dynamic table (see Section 6.2.1).\n   o  A literal representation\
    \ that does not add the header field to the\n      dynamic table (see Section\
    \ 6.2.2).\n   o  A literal representation that does not add the header field to\
    \ the\n      dynamic table, with the additional stipulation that this header\n\
    \      field always use a literal representation, in particular when re-\n   \
    \   encoded by an intermediary (see Section 6.2.3).  This\n      representation\
    \ is intended for protecting header field values that\n      are not to be put\
    \ at risk by compressing them (see Section 7.1.3\n      for more details).\n \
    \  The selection of one of these literal representations can be guided\n   by\
    \ security considerations, in order to protect sensitive header\n   field values\
    \ (see Section 7.1).\n   The literal representation of a header field name or\
    \ of a header\n   field value can encode the sequence of octets either directly\
    \ or\n   using a static Huffman code (see Section 5.2).\n"
- title: 3.  Header Block Decoding
  contents:
  - '3.  Header Block Decoding

    '
- title: 3.1.  Header Block Processing
  contents:
  - "3.1.  Header Block Processing\n   A decoder processes a header block sequentially\
    \ to reconstruct the\n   original header list.\n   A header block is the concatenation\
    \ of header field representations.\n   The different possible header field representations\
    \ are described in\n   Section 6.\n   Once a header field is decoded and added\
    \ to the reconstructed header\n   list, the header field cannot be removed.  A\
    \ header field added to\n   the header list can be safely passed to the application.\n\
    \   By passing the resulting header fields to the application, a decoder\n   can\
    \ be implemented with minimal transitory memory commitment in\n   addition to\
    \ the memory required for the dynamic table.\n"
- title: 3.2.  Header Field Representation Processing
  contents:
  - "3.2.  Header Field Representation Processing\n   The processing of a header block\
    \ to obtain a header list is defined\n   in this section.  To ensure that the\
    \ decoding will successfully\n   produce a header list, a decoder MUST obey the\
    \ following rules.\n   All the header field representations contained in a header\
    \ block are\n   processed in the order in which they appear, as specified below.\n\
    \   Details on the formatting of the various header field representations\n  \
    \ and some additional processing instructions are found in Section 6.\n   An _indexed\
    \ representation_ entails the following actions:\n   o  The header field corresponding\
    \ to the referenced entry in either\n      the static table or dynamic table is\
    \ appended to the decoded\n      header list.\n   A _literal representation_ that\
    \ is _not added_ to the dynamic table\n   entails the following action:\n   o\
    \  The header field is appended to the decoded header list.\n   A _literal representation_\
    \ that is _added_ to the dynamic table\n   entails the following actions:\n  \
    \ o  The header field is appended to the decoded header list.\n   o  The header\
    \ field is inserted at the beginning of the dynamic\n      table.  This insertion\
    \ could result in the eviction of previous\n      entries in the dynamic table\
    \ (see Section 4.4).\n"
- title: 4.  Dynamic Table Management
  contents:
  - "4.  Dynamic Table Management\n   To limit the memory requirements on the decoder\
    \ side, the dynamic\n   table is constrained in size.\n"
- title: 4.1.  Calculating Table Size
  contents:
  - "4.1.  Calculating Table Size\n   The size of the dynamic table is the sum of\
    \ the size of its entries.\n   The size of an entry is the sum of its name's length\
    \ in octets (as\n   defined in Section 5.2), its value's length in octets, and\
    \ 32.\n   The size of an entry is calculated using the length of its name and\n\
    \   value without any Huffman encoding applied.\n      Note: The additional 32\
    \ octets account for an estimated overhead\n      associated with an entry.  For\
    \ example, an entry structure using\n      two 64-bit pointers to reference the\
    \ name and the value of the\n      entry and two 64-bit integers for counting\
    \ the number of\n      references to the name and value would have 32 octets of\
    \ overhead.\n"
- title: 4.2.  Maximum Table Size
  contents:
  - "4.2.  Maximum Table Size\n   Protocols that use HPACK determine the maximum size\
    \ that the encoder\n   is permitted to use for the dynamic table.  In HTTP/2,\
    \ this value is\n   determined by the SETTINGS_HEADER_TABLE_SIZE setting (see\n\
    \   Section 6.5.2 of [HTTP2]).\n   An encoder can choose to use less capacity\
    \ than this maximum size\n   (see Section 6.3), but the chosen size MUST stay\
    \ lower than or equal\n   to the maximum set by the protocol.\n   A change in\
    \ the maximum size of the dynamic table is signaled via a\n   dynamic table size\
    \ update (see Section 6.3).  This dynamic table size\n   update MUST occur at\
    \ the beginning of the first header block\n   following the change to the dynamic\
    \ table size.  In HTTP/2, this\n   follows a settings acknowledgment (see Section\
    \ 6.5.3 of [HTTP2]).\n   Multiple updates to the maximum table size can occur\
    \ between the\n   transmission of two header blocks.  In the case that this size\
    \ is\n   changed more than once in this interval, the smallest maximum table\n\
    \   size that occurs in that interval MUST be signaled in a dynamic table\n  \
    \ size update.  The final maximum size is always signaled, resulting in\n   at\
    \ most two dynamic table size updates.  This ensures that the\n   decoder is able\
    \ to perform eviction based on reductions in dynamic\n   table size (see Section\
    \ 4.3).\n   This mechanism can be used to completely clear entries from the\n\
    \   dynamic table by setting a maximum size of 0, which can subsequently\n   be\
    \ restored.\n"
- title: 4.3.  Entry Eviction When Dynamic Table Size Changes
  contents:
  - "4.3.  Entry Eviction When Dynamic Table Size Changes\n   Whenever the maximum\
    \ size for the dynamic table is reduced, entries\n   are evicted from the end\
    \ of the dynamic table until the size of the\n   dynamic table is less than or\
    \ equal to the maximum size.\n"
- title: 4.4.  Entry Eviction When Adding New Entries
  contents:
  - "4.4.  Entry Eviction When Adding New Entries\n   Before a new entry is added\
    \ to the dynamic table, entries are evicted\n   from the end of the dynamic table\
    \ until the size of the dynamic table\n   is less than or equal to (maximum size\
    \ - new entry size) or until the\n   table is empty.\n   If the size of the new\
    \ entry is less than or equal to the maximum\n   size, that entry is added to\
    \ the table.  It is not an error to\n   attempt to add an entry that is larger\
    \ than the maximum size; an\n   attempt to add an entry larger than the maximum\
    \ size causes the table\n   to be emptied of all existing entries and results\
    \ in an empty table.\n   A new entry can reference the name of an entry in the\
    \ dynamic table\n   that will be evicted when adding this new entry into the dynamic\n\
    \   table.  Implementations are cautioned to avoid deleting the\n   referenced\
    \ name if the referenced entry is evicted from the dynamic\n   table prior to\
    \ inserting the new entry.\n"
- title: 5.  Primitive Type Representations
  contents:
  - "5.  Primitive Type Representations\n   HPACK encoding uses two primitive types:\
    \ unsigned variable-length\n   integers and strings of octets.\n"
- title: 5.1.  Integer Representation
  contents:
  - "5.1.  Integer Representation\n   Integers are used to represent name indexes,\
    \ header field indexes, or\n   string lengths.  An integer representation can\
    \ start anywhere within\n   an octet.  To allow for optimized processing, an integer\n\
    \   representation always finishes at the end of an octet.\n   An integer is represented\
    \ in two parts: a prefix that fills the\n   current octet and an optional list\
    \ of octets that are used if the\n   integer value does not fit within the prefix.\
    \  The number of bits of\n   the prefix (called N) is a parameter of the integer\
    \ representation.\n   If the integer value is small enough, i.e., strictly less\
    \ than 2^N-1,\n   it is encoded within the N-bit prefix.\n     0   1   2   3 \
    \  4   5   6   7\n   +---+---+---+---+---+---+---+---+\n   | ? | ? | ? |     \
    \  Value       |\n   +---+---+---+-------------------+\n    Figure 2: Integer\
    \ Value Encoded within the Prefix (Shown for N = 5)\n   Otherwise, all the bits\
    \ of the prefix are set to 1, and the value,\n   decreased by 2^N-1, is encoded\
    \ using a list of one or more octets.\n   The most significant bit of each octet\
    \ is used as a continuation\n   flag: its value is set to 1 except for the last\
    \ octet in the list.\n   The remaining bits of the octets are used to encode the\
    \ decreased\n   value.\n     0   1   2   3   4   5   6   7\n   +---+---+---+---+---+---+---+---+\n\
    \   | ? | ? | ? | 1   1   1   1   1 |\n   +---+---+---+-------------------+\n\
    \   | 1 |    Value-(2^N-1) LSB      |\n   +---+---------------------------+\n\
    \                  ...\n   +---+---------------------------+\n   | 0 |    Value-(2^N-1)\
    \ MSB      |\n   +---+---------------------------+\n    Figure 3: Integer Value\
    \ Encoded after the Prefix (Shown for N = 5)\n   Decoding the integer value from\
    \ the list of octets starts by\n   reversing the order of the octets in the list.\
    \  Then, for each octet,\n   its most significant bit is removed.  The remaining\
    \ bits of the\n   octets are concatenated, and the resulting value is increased\
    \ by\n   2^N-1 to obtain the integer value.\n   The prefix size, N, is always\
    \ between 1 and 8 bits.  An integer\n   starting at an octet boundary will have\
    \ an 8-bit prefix.\n   Pseudocode to represent an integer I is as follows:\n \
    \  if I < 2^N - 1, encode I on N bits\n   else\n       encode (2^N - 1) on N bits\n\
    \       I = I - (2^N - 1)\n       while I >= 128\n            encode (I % 128\
    \ + 128) on 8 bits\n            I = I / 128\n       encode I on 8 bits\n   Pseudocode\
    \ to decode an integer I is as follows:\n   decode I from the next N bits\n  \
    \ if I < 2^N - 1, return I\n   else\n       M = 0\n       repeat\n           B\
    \ = next octet\n           I = I + (B & 127) * 2^M\n           M = M + 7\n   \
    \    while B & 128 == 128\n       return I\n   Examples illustrating the encoding\
    \ of integers are available in\n   Appendix C.1.\n   This integer representation\
    \ allows for values of indefinite size.  It\n   is also possible for an encoder\
    \ to send a large number of zero\n   values, which can waste octets and could\
    \ be used to overflow integer\n   values.  Integer encodings that exceed implementation\
    \ limits -- in\n   value or octet length -- MUST be treated as decoding errors.\n\
    \   Different limits can be set for each of the different uses of\n   integers,\
    \ based on implementation constraints.\n"
- title: 5.2.  String Literal Representation
  contents:
  - "5.2.  String Literal Representation\n   Header field names and header field values\
    \ can be represented as\n   string literals.  A string literal is encoded as a\
    \ sequence of\n   octets, either by directly encoding the string literal's octets\
    \ or by\n   using a Huffman code (see [HUFFMAN]).\n     0   1   2   3   4   5\
    \   6   7\n   +---+---+---+---+---+---+---+---+\n   | H |    String Length (7+)\
    \     |\n   +---+---------------------------+\n   |  String Data (Length octets)\
    \  |\n   +-------------------------------+\n                  Figure 4: String\
    \ Literal Representation\n   A string literal representation contains the following\
    \ fields:\n   H: A one-bit flag, H, indicating whether or not the octets of the\n\
    \      string are Huffman encoded.\n   String Length:  The number of octets used\
    \ to encode the string\n      literal, encoded as an integer with a 7-bit prefix\
    \ (see\n      Section 5.1).\n   String Data:  The encoded data of the string literal.\
    \  If H is '0',\n      then the encoded data is the raw octets of the string literal.\
    \  If\n      H is '1', then the encoded data is the Huffman encoding of the\n\
    \      string literal.\n   String literals that use Huffman encoding are encoded\
    \ with the\n   Huffman code defined in Appendix B (see examples for requests in\n\
    \   Appendix C.4 and for responses in Appendix C.6).  The encoded data is\n  \
    \ the bitwise concatenation of the codes corresponding to each octet of\n   the\
    \ string literal.\n   As the Huffman-encoded data doesn't always end at an octet\
    \ boundary,\n   some padding is inserted after it, up to the next octet boundary.\
    \  To\n   prevent this padding from being misinterpreted as part of the string\n\
    \   literal, the most significant bits of the code corresponding to the\n   EOS\
    \ (end-of-string) symbol are used.\n   Upon decoding, an incomplete code at the\
    \ end of the encoded data is\n   to be considered as padding and discarded.  A\
    \ padding strictly longer\n   than 7 bits MUST be treated as a decoding error.\
    \  A padding not\n   corresponding to the most significant bits of the code for\
    \ the EOS\n   symbol MUST be treated as a decoding error.  A Huffman-encoded string\n\
    \   literal containing the EOS symbol MUST be treated as a decoding\n   error.\n"
- title: 6.  Binary Format
  contents:
  - "6.  Binary Format\n   This section describes the detailed format of each of the\
    \ different\n   header field representations and the dynamic table size update\n\
    \   instruction.\n"
- title: 6.1.  Indexed Header Field Representation
  contents:
  - "6.1.  Indexed Header Field Representation\n   An indexed header field representation\
    \ identifies an entry in either\n   the static table or the dynamic table (see\
    \ Section 2.3).\n   An indexed header field representation causes a header field\
    \ to be\n   added to the decoded header list, as described in Section 3.2.\n \
    \    0   1   2   3   4   5   6   7\n   +---+---+---+---+---+---+---+---+\n   |\
    \ 1 |        Index (7+)         |\n   +---+---------------------------+\n    \
    \                  Figure 5: Indexed Header Field\n   An indexed header field\
    \ starts with the '1' 1-bit pattern, followed\n   by the index of the matching\
    \ header field, represented as an integer\n   with a 7-bit prefix (see Section\
    \ 5.1).\n   The index value of 0 is not used.  It MUST be treated as a decoding\n\
    \   error if found in an indexed header field representation.\n"
- title: 6.2.  Literal Header Field Representation
  contents:
  - "6.2.  Literal Header Field Representation\n   A literal header field representation\
    \ contains a literal header field\n   value.  Header field names are provided\
    \ either as a literal or by\n   reference to an existing table entry, either from\
    \ the static table or\n   the dynamic table (see Section 2.3).\n   This specification\
    \ defines three forms of literal header field\n   representations: with indexing,\
    \ without indexing, and never indexed.\n"
- title: 6.2.1.  Literal Header Field with Incremental Indexing
  contents:
  - "6.2.1.  Literal Header Field with Incremental Indexing\n   A literal header field\
    \ with incremental indexing representation\n   results in appending a header field\
    \ to the decoded header list and\n   inserting it as a new entry into the dynamic\
    \ table.\n     0   1   2   3   4   5   6   7\n   +---+---+---+---+---+---+---+---+\n\
    \   | 0 | 1 |      Index (6+)       |\n   +---+---+-----------------------+\n\
    \   | H |     Value Length (7+)     |\n   +---+---------------------------+\n\
    \   | Value String (Length octets)  |\n   +-------------------------------+\n\
    \    Figure 6: Literal Header Field with Incremental Indexing -- Indexed\n   \
    \                                Name\n     0   1   2   3   4   5   6   7\n  \
    \ +---+---+---+---+---+---+---+---+\n   | 0 | 1 |           0           |\n  \
    \ +---+---+-----------------------+\n   | H |     Name Length (7+)      |\n  \
    \ +---+---------------------------+\n   |  Name String (Length octets)  |\n  \
    \ +---+---------------------------+\n   | H |     Value Length (7+)     |\n  \
    \ +---+---------------------------+\n   | Value String (Length octets)  |\n  \
    \ +-------------------------------+\n   Figure 7: Literal Header Field with Incremental\
    \ Indexing -- New Name\n   A literal header field with incremental indexing representation\n\
    \   starts with the '01' 2-bit pattern.\n   If the header field name matches the\
    \ header field name of an entry\n   stored in the static table or the dynamic\
    \ table, the header field\n   name can be represented using the index of that\
    \ entry.  In this case,\n   the index of the entry is represented as an integer\
    \ with a 6-bit\n   prefix (see Section 5.1).  This value is always non-zero.\n\
    \   Otherwise, the header field name is represented as a string literal\n   (see\
    \ Section 5.2).  A value 0 is used in place of the 6-bit index,\n   followed by\
    \ the header field name.\n   Either form of header field name representation is\
    \ followed by the\n   header field value represented as a string literal (see\
    \ Section 5.2).\n"
- title: 6.2.2.  Literal Header Field without Indexing
  contents:
  - "6.2.2.  Literal Header Field without Indexing\n   A literal header field without\
    \ indexing representation results in\n   appending a header field to the decoded\
    \ header list without altering\n   the dynamic table.\n     0   1   2   3   4\
    \   5   6   7\n   +---+---+---+---+---+---+---+---+\n   | 0 | 0 | 0 | 0 |  Index\
    \ (4+)   |\n   +---+---+-----------------------+\n   | H |     Value Length (7+)\
    \     |\n   +---+---------------------------+\n   | Value String (Length octets)\
    \  |\n   +-------------------------------+\n      Figure 8: Literal Header Field\
    \ without Indexing -- Indexed Name\n     0   1   2   3   4   5   6   7\n   +---+---+---+---+---+---+---+---+\n\
    \   | 0 | 0 | 0 | 0 |       0       |\n   +---+---+-----------------------+\n\
    \   | H |     Name Length (7+)      |\n   +---+---------------------------+\n\
    \   |  Name String (Length octets)  |\n   +---+---------------------------+\n\
    \   | H |     Value Length (7+)     |\n   +---+---------------------------+\n\
    \   | Value String (Length octets)  |\n   +-------------------------------+\n\
    \        Figure 9: Literal Header Field without Indexing -- New Name\n   A literal\
    \ header field without indexing representation starts with\n   the '0000' 4-bit\
    \ pattern.\n   If the header field name matches the header field name of an entry\n\
    \   stored in the static table or the dynamic table, the header field\n   name\
    \ can be represented using the index of that entry.  In this case,\n   the index\
    \ of the entry is represented as an integer with a 4-bit\n   prefix (see Section\
    \ 5.1).  This value is always non-zero.\n   Otherwise, the header field name is\
    \ represented as a string literal\n   (see Section 5.2).  A value 0 is used in\
    \ place of the 4-bit index,\n   followed by the header field name.\n   Either\
    \ form of header field name representation is followed by the\n   header field\
    \ value represented as a string literal (see Section 5.2).\n"
- title: 6.2.3.  Literal Header Field Never Indexed
  contents:
  - "6.2.3.  Literal Header Field Never Indexed\n   A literal header field never-indexed\
    \ representation results in\n   appending a header field to the decoded header\
    \ list without altering\n   the dynamic table.  Intermediaries MUST use the same\
    \ representation\n   for encoding this header field.\n     0   1   2   3   4 \
    \  5   6   7\n   +---+---+---+---+---+---+---+---+\n   | 0 | 0 | 0 | 1 |  Index\
    \ (4+)   |\n   +---+---+-----------------------+\n   | H |     Value Length (7+)\
    \     |\n   +---+---------------------------+\n   | Value String (Length octets)\
    \  |\n   +-------------------------------+\n       Figure 10: Literal Header Field\
    \ Never Indexed -- Indexed Name\n     0   1   2   3   4   5   6   7\n   +---+---+---+---+---+---+---+---+\n\
    \   | 0 | 0 | 0 | 1 |       0       |\n   +---+---+-----------------------+\n\
    \   | H |     Name Length (7+)      |\n   +---+---------------------------+\n\
    \   |  Name String (Length octets)  |\n   +---+---------------------------+\n\
    \   | H |     Value Length (7+)     |\n   +---+---------------------------+\n\
    \   | Value String (Length octets)  |\n   +-------------------------------+\n\
    \         Figure 11: Literal Header Field Never Indexed -- New Name\n   A literal\
    \ header field never-indexed representation starts with the\n   '0001' 4-bit pattern.\n\
    \   When a header field is represented as a literal header field never\n   indexed,\
    \ it MUST always be encoded with this specific literal\n   representation.  In\
    \ particular, when a peer sends a header field that\n   it received represented\
    \ as a literal header field never indexed, it\n   MUST use the same representation\
    \ to forward this header field.\n   This representation is intended for protecting\
    \ header field values\n   that are not to be put at risk by compressing them (see\
    \ Section 7.1\n   for more details).\n   The encoding of the representation is\
    \ identical to the literal header\n   field without indexing (see Section 6.2.2).\n"
- title: 6.3.  Dynamic Table Size Update
  contents:
  - "6.3.  Dynamic Table Size Update\n   A dynamic table size update signals a change\
    \ to the size of the\n   dynamic table.\n     0   1   2   3   4   5   6   7\n\
    \   +---+---+---+---+---+---+---+---+\n   | 0 | 0 | 1 |   Max size (5+)   |\n\
    \   +---+---------------------------+\n               Figure 12: Maximum Dynamic\
    \ Table Size Change\n   A dynamic table size update starts with the '001' 3-bit\
    \ pattern,\n   followed by the new maximum size, represented as an integer with\
    \ a\n   5-bit prefix (see Section 5.1).\n   The new maximum size MUST be lower\
    \ than or equal to the limit\n   determined by the protocol using HPACK.  A value\
    \ that exceeds this\n   limit MUST be treated as a decoding error.  In HTTP/2,\
    \ this limit is\n   the last value of the SETTINGS_HEADER_TABLE_SIZE parameter\
    \ (see\n   Section 6.5.2 of [HTTP2]) received from the decoder and acknowledged\n\
    \   by the encoder (see Section 6.5.3 of [HTTP2]).\n   Reducing the maximum size\
    \ of the dynamic table can cause entries to\n   be evicted (see Section 4.3).\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This section describes potential areas of security\
    \ concern with\n   HPACK:\n   o  Use of compression as a length-based oracle for\
    \ verifying guesses\n      about secrets that are compressed into a shared compression\n\
    \      context.\n   o  Denial of service resulting from exhausting processing\
    \ or memory\n      capacity at a decoder.\n"
- title: 7.1.  Probing Dynamic Table State
  contents:
  - "7.1.  Probing Dynamic Table State\n   HPACK reduces the length of header field\
    \ encodings by exploiting the\n   redundancy inherent in protocols like HTTP.\
    \  The ultimate goal of\n   this is to reduce the amount of data that is required\
    \ to send HTTP\n   requests or responses.\n   The compression context used to\
    \ encode header fields can be probed by\n   an attacker who can both define header\
    \ fields to be encoded and\n   transmitted and observe the length of those fields\
    \ once they are\n   encoded.  When an attacker can do both, they can adaptively\
    \ modify\n   requests in order to confirm guesses about the dynamic table state.\n\
    \   If a guess is compressed into a shorter length, the attacker can\n   observe\
    \ the encoded length and infer that the guess was correct.\n   This is possible\
    \ even over the Transport Layer Security (TLS)\n   protocol (see [TLS12]), because\
    \ while TLS provides confidentiality\n   protection for content, it only provides\
    \ a limited amount of\n   protection for the length of that content.\n      Note:\
    \ Padding schemes only provide limited protection against an\n      attacker with\
    \ these capabilities, potentially only forcing an\n      increased number of guesses\
    \ to learn the length associated with a\n      given guess.  Padding schemes also\
    \ work directly against\n      compression by increasing the number of bits that\
    \ are transmitted.\n   Attacks like CRIME [CRIME] demonstrated the existence of\
    \ these\n   general attacker capabilities.  The specific attack exploited the\n\
    \   fact that DEFLATE [DEFLATE] removes redundancy based on prefix\n   matching.\
    \  This permitted the attacker to confirm guesses a character\n   at a time, reducing\
    \ an exponential-time attack into a linear-time\n   attack.\n"
- title: 7.1.1.  Applicability to HPACK and HTTP
  contents:
  - "7.1.1.  Applicability to HPACK and HTTP\n   HPACK mitigates but does not completely\
    \ prevent attacks modeled on\n   CRIME [CRIME] by forcing a guess to match an\
    \ entire header field\n   value rather than individual characters.  Attackers\
    \ can only learn\n   whether a guess is correct or not, so they are reduced to\
    \ brute-force\n   guesses for the header field values.\n   The viability of recovering\
    \ specific header field values therefore\n   depends on the entropy of values.\
    \  As a result, values with high\n   entropy are unlikely to be recovered successfully.\
    \  However, values\n   with low entropy remain vulnerable.\n   Attacks of this\
    \ nature are possible any time that two mutually\n   distrustful entities control\
    \ requests or responses that are placed\n   onto a single HTTP/2 connection. \
    \ If the shared HPACK compressor\n   permits one entity to add entries to the\
    \ dynamic table and the other\n   to access those entries, then the state of the\
    \ table can be learned.\n   Having requests or responses from mutually distrustful\
    \ entities\n   occurs when an intermediary either:\n   o  sends requests from\
    \ multiple clients on a single connection toward\n      an origin server, or\n\
    \   o  takes responses from multiple origin servers and places them on a\n   \
    \   shared connection toward a client.\n   Web browsers also need to assume that\
    \ requests made on the same\n   connection by different web origins [ORIGIN] are\
    \ made by mutually\n   distrustful entities.\n"
- title: 7.1.2.  Mitigation
  contents:
  - "7.1.2.  Mitigation\n   Users of HTTP that require confidentiality for header\
    \ fields can use\n   values with entropy sufficient to make guessing infeasible.\
    \  However,\n   this is impractical as a general solution because it forces all\
    \ users\n   of HTTP to take steps to mitigate attacks.  It would impose new\n\
    \   constraints on how HTTP is used.\n   Rather than impose constraints on users\
    \ of HTTP, an implementation of\n   HPACK can instead constrain how compression\
    \ is applied in order to\n   limit the potential for dynamic table probing.\n\
    \   An ideal solution segregates access to the dynamic table based on the\n  \
    \ entity that is constructing header fields.  Header field values that\n   are\
    \ added to the table are attributed to an entity, and only the\n   entity that\
    \ created a particular value can extract that value.\n   To improve compression\
    \ performance of this option, certain entries\n   might be tagged as being public.\
    \  For example, a web browser might\n   make the values of the Accept-Encoding\
    \ header field available in all\n   requests.\n   An encoder without good knowledge\
    \ of the provenance of header fields\n   might instead introduce a penalty for\
    \ a header field with many\n   different values, such that a large number of attempts\
    \ to guess a\n   header field value results in the header field no longer being\n\
    \   compared to the dynamic table entries in future messages, effectively\n  \
    \ preventing further guesses.\n      Note: Simply removing entries corresponding\
    \ to the header field\n      from the dynamic table can be ineffectual if the\
    \ attacker has a\n      reliable way of causing values to be reinstalled.  For\
    \ example, a\n      request to load an image in a web browser typically includes\
    \ the\n      Cookie header field (a potentially highly valued target for this\n\
    \      sort of attack), and web sites can easily force an image to be\n      loaded,\
    \ thereby refreshing the entry in the dynamic table.\n   This response might be\
    \ made inversely proportional to the length of\n   the header field value.  Marking\
    \ a header field as not using the\n   dynamic table anymore might occur for shorter\
    \ values more quickly or\n   with higher probability than for longer values.\n"
- title: 7.1.3.  Never-Indexed Literals
  contents:
  - "7.1.3.  Never-Indexed Literals\n   Implementations can also choose to protect\
    \ sensitive header fields by\n   not compressing them and instead encoding their\
    \ value as literals.\n   Refusing to generate an indexed representation for a\
    \ header field is\n   only effective if compression is avoided on all hops.  The\
    \ never-\n   indexed literal (see Section 6.2.3) can be used to signal to\n  \
    \ intermediaries that a particular value was intentionally sent as a\n   literal.\n\
    \   An intermediary MUST NOT re-encode a value that uses the never-\n   indexed\
    \ literal representation with another representation that would\n   index it.\
    \  If HPACK is used for re-encoding, the never-indexed\n   literal representation\
    \ MUST be used.\n   The choice to use a never-indexed literal representation for\
    \ a header\n   field depends on several factors.  Since HPACK doesn't protect\n\
    \   against guessing an entire header field value, short or low-entropy\n   values\
    \ are more readily recovered by an adversary.  Therefore, an\n   encoder might\
    \ choose not to index values with low entropy.\n   An encoder might also choose\
    \ not to index values for header fields\n   that are considered to be highly valuable\
    \ or sensitive to recovery,\n   such as the Cookie or Authorization header fields.\n\
    \   On the contrary, an encoder might prefer indexing values for header\n   fields\
    \ that have little or no value if they were exposed.  For\n   instance, a User-Agent\
    \ header field does not commonly vary between\n   requests and is sent to any\
    \ server.  In that case, confirmation that\n   a particular User-Agent value has\
    \ been used provides little value.\n   Note that these criteria for deciding to\
    \ use a never-indexed literal\n   representation will evolve over time as new\
    \ attacks are discovered.\n"
- title: 7.2.  Static Huffman Encoding
  contents:
  - "7.2.  Static Huffman Encoding\n   There is no currently known attack against\
    \ a static Huffman encoding.\n   A study has shown that using a static Huffman\
    \ encoding table created\n   an information leakage; however, this same study\
    \ concluded that an\n   attacker could not take advantage of this information\
    \ leakage to\n   recover any meaningful amount of information (see [PETAL]).\n"
- title: 7.3.  Memory Consumption
  contents:
  - "7.3.  Memory Consumption\n   An attacker can try to cause an endpoint to exhaust\
    \ its memory.\n   HPACK is designed to limit both the peak and state amounts of\
    \ memory\n   allocated by an endpoint.\n   The amount of memory used by the compressor\
    \ is limited by the\n   protocol using HPACK through the definition of the maximum\
    \ size of\n   the dynamic table.  In HTTP/2, this value is controlled by the\n\
    \   decoder through the setting parameter SETTINGS_HEADER_TABLE_SIZE (see\n  \
    \ Section 6.5.2 of [HTTP2]).  This limit takes into account both the\n   size\
    \ of the data stored in the dynamic table, plus a small allowance\n   for overhead.\n\
    \   A decoder can limit the amount of state memory used by setting an\n   appropriate\
    \ value for the maximum size of the dynamic table.  In\n   HTTP/2, this is realized\
    \ by setting an appropriate value for the\n   SETTINGS_HEADER_TABLE_SIZE parameter.\
    \  An encoder can limit the\n   amount of state memory it uses by signaling a\
    \ lower dynamic table\n   size than the decoder allows (see Section 6.3).\n  \
    \ The amount of temporary memory consumed by an encoder or decoder can\n   be\
    \ limited by processing header fields sequentially.  An\n   implementation does\
    \ not need to retain a complete list of header\n   fields.  Note, however, that\
    \ it might be necessary for an application\n   to retain a complete header list\
    \ for other reasons; even though HPACK\n   does not force this to occur, application\
    \ constraints might make this\n   necessary.\n"
- title: 7.4.  Implementation Limits
  contents:
  - "7.4.  Implementation Limits\n   An implementation of HPACK needs to ensure that\
    \ large values for\n   integers, long encoding for integers, or long string literals\
    \ do not\n   create security weaknesses.\n   An implementation has to set a limit\
    \ for the values it accepts for\n   integers, as well as for the encoded length\
    \ (see Section 5.1).  In\n   the same way, it has to set a limit to the length\
    \ it accepts for\n   string literals (see Section 5.2).\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [HTTP2]     Belshe, M., Peon, R., and M. Thomson,\
    \ Ed., \"Hypertext\n               Transfer Protocol Version 2 (HTTP/2)\", RFC\
    \ 7540,\n               DOI 10.17487/RFC7540, May 2015,\n               <http://www.rfc-editor.org/info/rfc7540>.\n\
    \   [RFC2119]   Bradner, S., \"Key words for use in RFCs to Indicate\n       \
    \        Requirement Levels\", BCP 14, RFC 2119,\n               DOI 10.17487/RFC2119,\
    \ March 1997,\n               <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC7230]\
    \   Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext\n               Transfer\
    \ Protocol (HTTP/1.1): Message Syntax and\n               Routing\", RFC 7230,\
    \ DOI 10.17487/RFC7230, June 2014,\n               <http://www.rfc-editor.org/info/rfc7230>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [CANONICAL] Schwartz, E. and B. Kallick, \"\
    Generating a canonical\n               prefix encoding\", Communications of the\
    \ ACM, Volume 7\n               Issue 3, pp. 166-169, March 1964, <https://dl.acm.org/\n\
    \               citation.cfm?id=363991>.\n   [CRIME]     Wikipedia, \"CRIME\"\
    , May 2015, <http://en.wikipedia.org/w/\n               index.php?title=CRIME&oldid=660948120>.\n\
    \   [DEFLATE]   Deutsch, P., \"DEFLATE Compressed Data Format\n              \
    \ Specification version 1.3\", RFC 1951,\n               DOI 10.17487/RFC1951,\
    \ May 1996,\n               <http://www.rfc-editor.org/info/rfc1951>.\n   [HUFFMAN]\
    \   Huffman, D., \"A Method for the Construction of Minimum-\n               Redundancy\
    \ Codes\", Proceedings of the Institute of Radio\n               Engineers, Volume\
    \ 40, Number 9, pp. 1098-1101, September\n               1952, <http://ieeexplore.ieee.org/xpl/\n\
    \               articleDetails.jsp?arnumber=4051119>.\n   [ORIGIN]    Barth, A.,\
    \ \"The Web Origin Concept\", RFC 6454,\n               DOI 10.17487/RFC6454,\
    \ December 2011,\n               <http://www.rfc-editor.org/info/rfc6454>.\n \
    \  [PETAL]     Tan, J. and J. Nahata, \"PETAL: Preset Encoding\n             \
    \  Table Information Leakage\", April 2013,\n               <http://www.pdl.cmu.edu/PDL-FTP/associated/\n\
    \               CMU-PDL-13-106.pdf>.\n   [SPDY]      Belshe, M. and R. Peon, \"\
    SPDY Protocol\", Work in\n               Progress, draft-mbelshe-httpbis-spdy-00,\
    \ February 2012.\n   [TLS12]     Dierks, T. and E. Rescorla, \"The Transport Layer\
    \ Security\n               (TLS) Protocol Version 1.2\", RFC 5246,\n         \
    \      DOI 10.17487/RFC5246, August 2008,\n               <http://www.rfc-editor.org/info/rfc5246>.\n"
- title: Appendix A.  Static Table Definition
  contents:
  - "Appendix A.  Static Table Definition\n   The static table (see Section 2.3.1)\
    \ consists in a predefined and\n   unchangeable list of header fields.\n   The\
    \ static table was created from the most frequent header fields\n   used by popular\
    \ web sites, with the addition of HTTP/2-specific\n   pseudo-header fields (see\
    \ Section 8.1.2.1 of [HTTP2]).  For header\n   fields with a few frequent values,\
    \ an entry was added for each of\n   these frequent values.  For other header\
    \ fields, an entry was added\n   with an empty value.\n   Table 1 lists the predefined\
    \ header fields that make up the static\n   table and gives the index of each\
    \ entry.\n          +-------+-----------------------------+---------------+\n\
    \          | Index | Header Name                 | Header Value  |\n         \
    \ +-------+-----------------------------+---------------+\n          | 1     |\
    \ :authority                  |               |\n          | 2     | :method \
    \                    | GET           |\n          | 3     | :method          \
    \           | POST          |\n          | 4     | :path                     \
    \  | /             |\n          | 5     | :path                       | /index.html\
    \   |\n          | 6     | :scheme                     | http          |\n   \
    \       | 7     | :scheme                     | https         |\n          | 8\
    \     | :status                     | 200           |\n          | 9     | :status\
    \                     | 204           |\n          | 10    | :status         \
    \            | 206           |\n          | 11    | :status                  \
    \   | 304           |\n          | 12    | :status                     | 400 \
    \          |\n          | 13    | :status                     | 404          \
    \ |\n          | 14    | :status                     | 500           |\n     \
    \     | 15    | accept-charset              |               |\n          | 16\
    \    | accept-encoding             | gzip, deflate |\n          | 17    | accept-language\
    \             |               |\n          | 18    | accept-ranges           \
    \    |               |\n          | 19    | accept                      |    \
    \           |\n          | 20    | access-control-allow-origin |             \
    \  |\n          | 21    | age                         |               |\n    \
    \      | 22    | allow                       |               |\n          | 23\
    \    | authorization               |               |\n          | 24    | cache-control\
    \               |               |\n          | 25    | content-disposition   \
    \      |               |\n          | 26    | content-encoding            |  \
    \             |\n          | 27    | content-language            |           \
    \    |\n          | 28    | content-length              |               |\n  \
    \        | 29    | content-location            |               |\n          |\
    \ 30    | content-range               |               |\n          | 31    | content-type\
    \                |               |\n          | 32    | cookie               \
    \       |               |\n          | 33    | date                        | \
    \              |\n          | 34    | etag                        |          \
    \     |\n          | 35    | expect                      |               |\n \
    \         | 36    | expires                     |               |\n          |\
    \ 37    | from                        |               |\n          | 38    | host\
    \                        |               |\n          | 39    | if-match     \
    \               |               |\n          | 40    | if-modified-since     \
    \      |               |\n          | 41    | if-none-match               |  \
    \             |\n          | 42    | if-range                    |           \
    \    |\n          | 43    | if-unmodified-since         |               |\n  \
    \        | 44    | last-modified               |               |\n          |\
    \ 45    | link                        |               |\n          | 46    | location\
    \                    |               |\n          | 47    | max-forwards     \
    \           |               |\n          | 48    | proxy-authenticate        \
    \  |               |\n          | 49    | proxy-authorization         |      \
    \         |\n          | 50    | range                       |               |\n\
    \          | 51    | referer                     |               |\n         \
    \ | 52    | refresh                     |               |\n          | 53    |\
    \ retry-after                 |               |\n          | 54    | server  \
    \                    |               |\n          | 55    | set-cookie       \
    \           |               |\n          | 56    | strict-transport-security \
    \  |               |\n          | 57    | transfer-encoding           |      \
    \         |\n          | 58    | user-agent                  |               |\n\
    \          | 59    | vary                        |               |\n         \
    \ | 60    | via                         |               |\n          | 61    |\
    \ www-authenticate            |               |\n          +-------+-----------------------------+---------------+\n\
    \                       Table 1: Static Table Entries\n"
- title: Appendix B.  Huffman Code
  contents:
  - "Appendix B.  Huffman Code\n   The following Huffman code is used when encoding\
    \ string literals with\n   a Huffman coding (see Section 5.2).\n   This Huffman\
    \ code was generated from statistics obtained on a large\n   sample of HTTP headers.\
    \  It is a canonical Huffman code (see\n   [CANONICAL]) with some tweaking to\
    \ ensure that no symbol has a unique\n   code length.\n   Each row in the table\
    \ defines the code used to represent a symbol:\n   sym:  The symbol to be represented.\
    \  It is the decimal value of an\n      octet, possibly prepended with its ASCII\
    \ representation.  A\n      specific symbol, \"EOS\", is used to indicate the\
    \ end of a string\n      literal.\n   code as bits:  The Huffman code for the\
    \ symbol represented as a\n      base-2 integer, aligned on the most significant\
    \ bit (MSB).\n   code as hex:  The Huffman code for the symbol, represented as\
    \ a\n      hexadecimal integer, aligned on the least significant bit (LSB).\n\
    \   len:  The number of bits for the code representing the symbol.\n   As an example,\
    \ the code for the symbol 47 (corresponding to the ASCII\n   character \"/\")\
    \ consists in the 6 bits \"0\", \"1\", \"1\", \"0\", \"0\", \"0\".\n   This corresponds\
    \ to the value 0x18 (in hexadecimal) encoded in 6\n   bits.\n                \
    \                                        code\n                          code\
    \ as bits                 as hex   len\n        sym              aligned to MSB\
    \                aligned   in\n                                              \
    \         to LSB   bits\n       (  0)  |11111111|11000                       \
    \      1ff8  [13]\n       (  1)  |11111111|11111111|1011000                7fffd8\
    \  [23]\n       (  2)  |11111111|11111111|11111110|0010         fffffe2  [28]\n\
    \       (  3)  |11111111|11111111|11111110|0011         fffffe3  [28]\n      \
    \ (  4)  |11111111|11111111|11111110|0100         fffffe4  [28]\n       (  5)\
    \  |11111111|11111111|11111110|0101         fffffe5  [28]\n       (  6)  |11111111|11111111|11111110|0110\
    \         fffffe6  [28]\n       (  7)  |11111111|11111111|11111110|0111      \
    \   fffffe7  [28]\n       (  8)  |11111111|11111111|11111110|1000         fffffe8\
    \  [28]\n       (  9)  |11111111|11111111|11101010               ffffea  [24]\n\
    \       ( 10)  |11111111|11111111|11111111|111100      3ffffffc  [30]\n      \
    \ ( 11)  |11111111|11111111|11111110|1001         fffffe9  [28]\n       ( 12)\
    \  |11111111|11111111|11111110|1010         fffffea  [28]\n       ( 13)  |11111111|11111111|11111111|111101\
    \      3ffffffd  [30]\n       ( 14)  |11111111|11111111|11111110|1011        \
    \ fffffeb  [28]\n       ( 15)  |11111111|11111111|11111110|1100         fffffec\
    \  [28]\n       ( 16)  |11111111|11111111|11111110|1101         fffffed  [28]\n\
    \       ( 17)  |11111111|11111111|11111110|1110         fffffee  [28]\n      \
    \ ( 18)  |11111111|11111111|11111110|1111         fffffef  [28]\n       ( 19)\
    \  |11111111|11111111|11111111|0000         ffffff0  [28]\n       ( 20)  |11111111|11111111|11111111|0001\
    \         ffffff1  [28]\n       ( 21)  |11111111|11111111|11111111|0010      \
    \   ffffff2  [28]\n       ( 22)  |11111111|11111111|11111111|111110      3ffffffe\
    \  [30]\n       ( 23)  |11111111|11111111|11111111|0011         ffffff3  [28]\n\
    \       ( 24)  |11111111|11111111|11111111|0100         ffffff4  [28]\n      \
    \ ( 25)  |11111111|11111111|11111111|0101         ffffff5  [28]\n       ( 26)\
    \  |11111111|11111111|11111111|0110         ffffff6  [28]\n       ( 27)  |11111111|11111111|11111111|0111\
    \         ffffff7  [28]\n       ( 28)  |11111111|11111111|11111111|1000      \
    \   ffffff8  [28]\n       ( 29)  |11111111|11111111|11111111|1001         ffffff9\
    \  [28]\n       ( 30)  |11111111|11111111|11111111|1010         ffffffa  [28]\n\
    \       ( 31)  |11111111|11111111|11111111|1011         ffffffb  [28]\n   ' '\
    \ ( 32)  |010100                                       14  [ 6]\n   '!' ( 33)\
    \  |11111110|00                                 3f8  [10]\n   '\"' ( 34)  |11111110|01\
    \                                 3f9  [10]\n   '#' ( 35)  |11111111|1010    \
    \                           ffa  [12]\n   '$' ( 36)  |11111111|11001         \
    \                    1ff9  [13]\n   '%' ( 37)  |010101                       \
    \                15  [ 6]\n   '&' ( 38)  |11111000                           \
    \          f8  [ 8]\n   ''' ( 39)  |11111111|010                             \
    \   7fa  [11]\n   '(' ( 40)  |11111110|10                                 3fa\
    \  [10]\n   ')' ( 41)  |11111110|11                                 3fb  [10]\n\
    \   '*' ( 42)  |11111001                                     f9  [ 8]\n   '+'\
    \ ( 43)  |11111111|011                                7fb  [11]\n   ',' ( 44)\
    \  |11111010                                     fa  [ 8]\n   '-' ( 45)  |010110\
    \                                       16  [ 6]\n   '.' ( 46)  |010111      \
    \                                 17  [ 6]\n   '/' ( 47)  |011000            \
    \                           18  [ 6]\n   '0' ( 48)  |00000                   \
    \                      0  [ 5]\n   '1' ( 49)  |00001                         \
    \                1  [ 5]\n   '2' ( 50)  |00010                               \
    \          2  [ 5]\n   '3' ( 51)  |011001                                    \
    \   19  [ 6]\n   '4' ( 52)  |011010                                       1a \
    \ [ 6]\n   '5' ( 53)  |011011                                       1b  [ 6]\n\
    \   '6' ( 54)  |011100                                       1c  [ 6]\n   '7'\
    \ ( 55)  |011101                                       1d  [ 6]\n   '8' ( 56)\
    \  |011110                                       1e  [ 6]\n   '9' ( 57)  |011111\
    \                                       1f  [ 6]\n   ':' ( 58)  |1011100     \
    \                                 5c  [ 7]\n   ';' ( 59)  |11111011          \
    \                           fb  [ 8]\n   '<' ( 60)  |11111111|1111100        \
    \                   7ffc  [15]\n   '=' ( 61)  |100000                        \
    \               20  [ 6]\n   '>' ( 62)  |11111111|1011                       \
    \        ffb  [12]\n   '?' ( 63)  |11111111|00                               \
    \  3fc  [10]\n   '@' ( 64)  |11111111|11010                             1ffa \
    \ [13]\n   'A' ( 65)  |100001                                       21  [ 6]\n\
    \   'B' ( 66)  |1011101                                      5d  [ 7]\n   'C'\
    \ ( 67)  |1011110                                      5e  [ 7]\n   'D' ( 68)\
    \  |1011111                                      5f  [ 7]\n   'E' ( 69)  |1100000\
    \                                      60  [ 7]\n   'F' ( 70)  |1100001      \
    \                                61  [ 7]\n   'G' ( 71)  |1100010            \
    \                          62  [ 7]\n   'H' ( 72)  |1100011                  \
    \                    63  [ 7]\n   'I' ( 73)  |1100100                        \
    \              64  [ 7]\n   'J' ( 74)  |1100101                              \
    \        65  [ 7]\n   'K' ( 75)  |1100110                                    \
    \  66  [ 7]\n   'L' ( 76)  |1100111                                      67  [\
    \ 7]\n   'M' ( 77)  |1101000                                      68  [ 7]\n \
    \  'N' ( 78)  |1101001                                      69  [ 7]\n   'O' (\
    \ 79)  |1101010                                      6a  [ 7]\n   'P' ( 80)  |1101011\
    \                                      6b  [ 7]\n   'Q' ( 81)  |1101100      \
    \                                6c  [ 7]\n   'R' ( 82)  |1101101            \
    \                          6d  [ 7]\n   'S' ( 83)  |1101110                  \
    \                    6e  [ 7]\n   'T' ( 84)  |1101111                        \
    \              6f  [ 7]\n   'U' ( 85)  |1110000                              \
    \        70  [ 7]\n   'V' ( 86)  |1110001                                    \
    \  71  [ 7]\n   'W' ( 87)  |1110010                                      72  [\
    \ 7]\n   'X' ( 88)  |11111100                                     fc  [ 8]\n \
    \  'Y' ( 89)  |1110011                                      73  [ 7]\n   'Z' (\
    \ 90)  |11111101                                     fd  [ 8]\n   '[' ( 91)  |11111111|11011\
    \                             1ffb  [13]\n   '\\' ( 92)  |11111111|11111110|000\
    \                     7fff0  [19]\n   ']' ( 93)  |11111111|11100             \
    \                1ffc  [13]\n   '^' ( 94)  |11111111|111100                  \
    \          3ffc  [14]\n   '_' ( 95)  |100010                                 \
    \      22  [ 6]\n   '`' ( 96)  |11111111|1111101                           7ffd\
    \  [15]\n   'a' ( 97)  |00011                                         3  [ 5]\n\
    \   'b' ( 98)  |100011                                       23  [ 6]\n   'c'\
    \ ( 99)  |00100                                         4  [ 5]\n   'd' (100)\
    \  |100100                                       24  [ 6]\n   'e' (101)  |00101\
    \                                         5  [ 5]\n   'f' (102)  |100101     \
    \                                  25  [ 6]\n   'g' (103)  |100110           \
    \                            26  [ 6]\n   'h' (104)  |100111                 \
    \                      27  [ 6]\n   'i' (105)  |00110                        \
    \                 6  [ 5]\n   'j' (106)  |1110100                            \
    \          74  [ 7]\n   'k' (107)  |1110101                                  \
    \    75  [ 7]\n   'l' (108)  |101000                                       28\
    \  [ 6]\n   'm' (109)  |101001                                       29  [ 6]\n\
    \   'n' (110)  |101010                                       2a  [ 6]\n   'o'\
    \ (111)  |00111                                         7  [ 5]\n   'p' (112)\
    \  |101011                                       2b  [ 6]\n   'q' (113)  |1110110\
    \                                      76  [ 7]\n   'r' (114)  |101100       \
    \                                2c  [ 6]\n   's' (115)  |01000              \
    \                           8  [ 5]\n   't' (116)  |01001                    \
    \                     9  [ 5]\n   'u' (117)  |101101                         \
    \              2d  [ 6]\n   'v' (118)  |1110111                              \
    \        77  [ 7]\n   'w' (119)  |1111000                                    \
    \  78  [ 7]\n   'x' (120)  |1111001                                      79  [\
    \ 7]\n   'y' (121)  |1111010                                      7a  [ 7]\n \
    \  'z' (122)  |1111011                                      7b  [ 7]\n   '{' (123)\
    \  |11111111|1111110                           7ffe  [15]\n   '|' (124)  |11111111|100\
    \                                7fc  [11]\n   '}' (125)  |11111111|111101   \
    \                         3ffd  [14]\n   '~' (126)  |11111111|11101          \
    \                   1ffd  [13]\n       (127)  |11111111|11111111|11111111|1100\
    \         ffffffc  [28]\n       (128)  |11111111|11111110|0110               \
    \     fffe6  [20]\n       (129)  |11111111|11111111|010010                 3fffd2\
    \  [22]\n       (130)  |11111111|11111110|0111                    fffe7  [20]\n\
    \       (131)  |11111111|11111110|1000                    fffe8  [20]\n      \
    \ (132)  |11111111|11111111|010011                 3fffd3  [22]\n       (133)\
    \  |11111111|11111111|010100                 3fffd4  [22]\n       (134)  |11111111|11111111|010101\
    \                 3fffd5  [22]\n       (135)  |11111111|11111111|1011001     \
    \           7fffd9  [23]\n       (136)  |11111111|11111111|010110            \
    \     3fffd6  [22]\n       (137)  |11111111|11111111|1011010                7fffda\
    \  [23]\n       (138)  |11111111|11111111|1011011                7fffdb  [23]\n\
    \       (139)  |11111111|11111111|1011100                7fffdc  [23]\n      \
    \ (140)  |11111111|11111111|1011101                7fffdd  [23]\n       (141)\
    \  |11111111|11111111|1011110                7fffde  [23]\n       (142)  |11111111|11111111|11101011\
    \               ffffeb  [24]\n       (143)  |11111111|11111111|1011111       \
    \         7fffdf  [23]\n       (144)  |11111111|11111111|11101100            \
    \   ffffec  [24]\n       (145)  |11111111|11111111|11101101               ffffed\
    \  [24]\n       (146)  |11111111|11111111|010111                 3fffd7  [22]\n\
    \       (147)  |11111111|11111111|1100000                7fffe0  [23]\n      \
    \ (148)  |11111111|11111111|11101110               ffffee  [24]\n       (149)\
    \  |11111111|11111111|1100001                7fffe1  [23]\n       (150)  |11111111|11111111|1100010\
    \                7fffe2  [23]\n       (151)  |11111111|11111111|1100011      \
    \          7fffe3  [23]\n       (152)  |11111111|11111111|1100100            \
    \    7fffe4  [23]\n       (153)  |11111111|11111110|11100                  1fffdc\
    \  [21]\n       (154)  |11111111|11111111|011000                 3fffd8  [22]\n\
    \       (155)  |11111111|11111111|1100101                7fffe5  [23]\n      \
    \ (156)  |11111111|11111111|011001                 3fffd9  [22]\n       (157)\
    \  |11111111|11111111|1100110                7fffe6  [23]\n       (158)  |11111111|11111111|1100111\
    \                7fffe7  [23]\n       (159)  |11111111|11111111|11101111     \
    \          ffffef  [24]\n       (160)  |11111111|11111111|011010             \
    \    3fffda  [22]\n       (161)  |11111111|11111110|11101                  1fffdd\
    \  [21]\n       (162)  |11111111|11111110|1001                    fffe9  [20]\n\
    \       (163)  |11111111|11111111|011011                 3fffdb  [22]\n      \
    \ (164)  |11111111|11111111|011100                 3fffdc  [22]\n       (165)\
    \  |11111111|11111111|1101000                7fffe8  [23]\n       (166)  |11111111|11111111|1101001\
    \                7fffe9  [23]\n       (167)  |11111111|11111110|11110        \
    \          1fffde  [21]\n       (168)  |11111111|11111111|1101010            \
    \    7fffea  [23]\n       (169)  |11111111|11111111|011101                 3fffdd\
    \  [22]\n       (170)  |11111111|11111111|011110                 3fffde  [22]\n\
    \       (171)  |11111111|11111111|11110000               fffff0  [24]\n      \
    \ (172)  |11111111|11111110|11111                  1fffdf  [21]\n       (173)\
    \  |11111111|11111111|011111                 3fffdf  [22]\n       (174)  |11111111|11111111|1101011\
    \                7fffeb  [23]\n       (175)  |11111111|11111111|1101100      \
    \          7fffec  [23]\n       (176)  |11111111|11111111|00000              \
    \    1fffe0  [21]\n       (177)  |11111111|11111111|00001                  1fffe1\
    \  [21]\n       (178)  |11111111|11111111|100000                 3fffe0  [22]\n\
    \       (179)  |11111111|11111111|00010                  1fffe2  [21]\n      \
    \ (180)  |11111111|11111111|1101101                7fffed  [23]\n       (181)\
    \  |11111111|11111111|100001                 3fffe1  [22]\n       (182)  |11111111|11111111|1101110\
    \                7fffee  [23]\n       (183)  |11111111|11111111|1101111      \
    \          7fffef  [23]\n       (184)  |11111111|11111110|1010               \
    \     fffea  [20]\n       (185)  |11111111|11111111|100010                 3fffe2\
    \  [22]\n       (186)  |11111111|11111111|100011                 3fffe3  [22]\n\
    \       (187)  |11111111|11111111|100100                 3fffe4  [22]\n      \
    \ (188)  |11111111|11111111|1110000                7ffff0  [23]\n       (189)\
    \  |11111111|11111111|100101                 3fffe5  [22]\n       (190)  |11111111|11111111|100110\
    \                 3fffe6  [22]\n       (191)  |11111111|11111111|1110001     \
    \           7ffff1  [23]\n       (192)  |11111111|11111111|11111000|00       \
    \    3ffffe0  [26]\n       (193)  |11111111|11111111|11111000|01           3ffffe1\
    \  [26]\n       (194)  |11111111|11111110|1011                    fffeb  [20]\n\
    \       (195)  |11111111|11111110|001                     7fff1  [19]\n      \
    \ (196)  |11111111|11111111|100111                 3fffe7  [22]\n       (197)\
    \  |11111111|11111111|1110010                7ffff2  [23]\n       (198)  |11111111|11111111|101000\
    \                 3fffe8  [22]\n       (199)  |11111111|11111111|11110110|0  \
    \          1ffffec  [25]\n       (200)  |11111111|11111111|11111000|10       \
    \    3ffffe2  [26]\n       (201)  |11111111|11111111|11111000|11           3ffffe3\
    \  [26]\n       (202)  |11111111|11111111|11111001|00           3ffffe4  [26]\n\
    \       (203)  |11111111|11111111|11111011|110          7ffffde  [27]\n      \
    \ (204)  |11111111|11111111|11111011|111          7ffffdf  [27]\n       (205)\
    \  |11111111|11111111|11111001|01           3ffffe5  [26]\n       (206)  |11111111|11111111|11110001\
    \               fffff1  [24]\n       (207)  |11111111|11111111|11110110|1    \
    \        1ffffed  [25]\n       (208)  |11111111|11111110|010                 \
    \    7fff2  [19]\n       (209)  |11111111|11111111|00011                  1fffe3\
    \  [21]\n       (210)  |11111111|11111111|11111001|10           3ffffe6  [26]\n\
    \       (211)  |11111111|11111111|11111100|000          7ffffe0  [27]\n      \
    \ (212)  |11111111|11111111|11111100|001          7ffffe1  [27]\n       (213)\
    \  |11111111|11111111|11111001|11           3ffffe7  [26]\n       (214)  |11111111|11111111|11111100|010\
    \          7ffffe2  [27]\n       (215)  |11111111|11111111|11110010          \
    \     fffff2  [24]\n       (216)  |11111111|11111111|00100                  1fffe4\
    \  [21]\n       (217)  |11111111|11111111|00101                  1fffe5  [21]\n\
    \       (218)  |11111111|11111111|11111010|00           3ffffe8  [26]\n      \
    \ (219)  |11111111|11111111|11111010|01           3ffffe9  [26]\n       (220)\
    \  |11111111|11111111|11111111|1101         ffffffd  [28]\n       (221)  |11111111|11111111|11111100|011\
    \          7ffffe3  [27]\n       (222)  |11111111|11111111|11111100|100      \
    \    7ffffe4  [27]\n       (223)  |11111111|11111111|11111100|101          7ffffe5\
    \  [27]\n       (224)  |11111111|11111110|1100                    fffec  [20]\n\
    \       (225)  |11111111|11111111|11110011               fffff3  [24]\n      \
    \ (226)  |11111111|11111110|1101                    fffed  [20]\n       (227)\
    \  |11111111|11111111|00110                  1fffe6  [21]\n       (228)  |11111111|11111111|101001\
    \                 3fffe9  [22]\n       (229)  |11111111|11111111|00111       \
    \           1fffe7  [21]\n       (230)  |11111111|11111111|01000             \
    \     1fffe8  [21]\n       (231)  |11111111|11111111|1110011                7ffff3\
    \  [23]\n       (232)  |11111111|11111111|101010                 3fffea  [22]\n\
    \       (233)  |11111111|11111111|101011                 3fffeb  [22]\n      \
    \ (234)  |11111111|11111111|11110111|0            1ffffee  [25]\n       (235)\
    \  |11111111|11111111|11110111|1            1ffffef  [25]\n       (236)  |11111111|11111111|11110100\
    \               fffff4  [24]\n       (237)  |11111111|11111111|11110101      \
    \         fffff5  [24]\n       (238)  |11111111|11111111|11111010|10         \
    \  3ffffea  [26]\n       (239)  |11111111|11111111|1110100                7ffff4\
    \  [23]\n       (240)  |11111111|11111111|11111010|11           3ffffeb  [26]\n\
    \       (241)  |11111111|11111111|11111100|110          7ffffe6  [27]\n      \
    \ (242)  |11111111|11111111|11111011|00           3ffffec  [26]\n       (243)\
    \  |11111111|11111111|11111011|01           3ffffed  [26]\n       (244)  |11111111|11111111|11111100|111\
    \          7ffffe7  [27]\n       (245)  |11111111|11111111|11111101|000      \
    \    7ffffe8  [27]\n       (246)  |11111111|11111111|11111101|001          7ffffe9\
    \  [27]\n       (247)  |11111111|11111111|11111101|010          7ffffea  [27]\n\
    \       (248)  |11111111|11111111|11111101|011          7ffffeb  [27]\n      \
    \ (249)  |11111111|11111111|11111111|1110         ffffffe  [28]\n       (250)\
    \  |11111111|11111111|11111101|100          7ffffec  [27]\n       (251)  |11111111|11111111|11111101|101\
    \          7ffffed  [27]\n       (252)  |11111111|11111111|11111101|110      \
    \    7ffffee  [27]\n       (253)  |11111111|11111111|11111101|111          7ffffef\
    \  [27]\n       (254)  |11111111|11111111|11111110|000          7fffff0  [27]\n\
    \       (255)  |11111111|11111111|11111011|10           3ffffee  [26]\n   EOS\
    \ (256)  |11111111|11111111|11111111|111111      3fffffff  [30]\n"
- title: Appendix C.  Examples
  contents:
  - "Appendix C.  Examples\n   This appendix contains examples covering integer encoding,\
    \ header\n   field representation, and the encoding of whole lists of header\n\
    \   fields for both requests and responses, with and without Huffman\n   coding.\n"
- title: C.1.  Integer Representation Examples
  contents:
  - "C.1.  Integer Representation Examples\n   This section shows the representation\
    \ of integer values in detail\n   (see Section 5.1).\n"
- title: 'C.1.1.  Example 1: Encoding 10 Using a 5-Bit Prefix'
  contents:
  - "C.1.1.  Example 1: Encoding 10 Using a 5-Bit Prefix\n   The value 10 is to be\
    \ encoded with a 5-bit prefix.\n   o  10 is less than 31 (2^5 - 1) and is represented\
    \ using the 5-bit\n      prefix.\n     0   1   2   3   4   5   6   7\n   +---+---+---+---+---+---+---+---+\n\
    \   | X | X | X | 0 | 1 | 0 | 1 | 0 |   10 stored on 5 bits\n   +---+---+---+---+---+---+---+---+\n"
- title: 'C.1.2.  Example 2: Encoding 1337 Using a 5-Bit Prefix'
  contents:
  - "C.1.2.  Example 2: Encoding 1337 Using a 5-Bit Prefix\n   The value I=1337 is\
    \ to be encoded with a 5-bit prefix.\n      1337 is greater than 31 (2^5 - 1).\n\
    \         The 5-bit prefix is filled with its max value (31).\n      I = 1337\
    \ - (2^5 - 1) = 1306.\n         I (1306) is greater than or equal to 128, so the\
    \ while loop\n         body executes:\n            I % 128 == 26\n           \
    \ 26 + 128 == 154\n            154 is encoded in 8 bits as: 10011010\n       \
    \     I is set to 10 (1306 / 128 == 10)\n            I is no longer greater than\
    \ or equal to 128, so the while\n            loop terminates.\n         I, now\
    \ 10, is encoded in 8 bits as: 00001010.\n      The process ends.\n     0   1\
    \   2   3   4   5   6   7\n   +---+---+---+---+---+---+---+---+\n   | X | X |\
    \ X | 1 | 1 | 1 | 1 | 1 |  Prefix = 31, I = 1306\n   | 1 | 0 | 0 | 1 | 1 | 0 |\
    \ 1 | 0 |  1306>=128, encode(154), I=1306/128\n   | 0 | 0 | 0 | 0 | 1 | 0 | 1\
    \ | 0 |  10<128, encode(10), done\n   +---+---+---+---+---+---+---+---+\n"
- title: 'C.1.3.  Example 3: Encoding 42 Starting at an Octet Boundary'
  contents:
  - "C.1.3.  Example 3: Encoding 42 Starting at an Octet Boundary\n   The value 42\
    \ is to be encoded starting at an octet boundary.  This\n   implies that a 8-bit\
    \ prefix is used.\n   o  42 is less than 255 (2^8 - 1) and is represented using\
    \ the 8-bit\n      prefix.\n     0   1   2   3   4   5   6   7\n   +---+---+---+---+---+---+---+---+\n\
    \   | 0 | 0 | 1 | 0 | 1 | 0 | 1 | 0 |   42 stored on 8 bits\n   +---+---+---+---+---+---+---+---+\n"
- title: C.2.  Header Field Representation Examples
  contents:
  - "C.2.  Header Field Representation Examples\n   This section shows several independent\
    \ representation examples.\n"
- title: C.2.1.  Literal Header Field with Indexing
  contents:
  - "C.2.1.  Literal Header Field with Indexing\n   The header field representation\
    \ uses a literal name and a literal\n   value.  The header field is added to the\
    \ dynamic table.\n   Header list to encode:\n   custom-key: custom-header\n  \
    \ Hex dump of encoded data:\n   400a 6375 7374 6f6d 2d6b 6579 0d63 7573 | @.custom-key.cus\n\
    \   746f 6d2d 6865 6164 6572                | tom-header\n   Decoding process:\n\
    \   40                                      | == Literal indexed ==\n   0a   \
    \                                   |   Literal name (len = 10)\n   6375 7374\
    \ 6f6d 2d6b 6579                | custom-key\n   0d                          \
    \            |   Literal value (len = 13)\n   6375 7374 6f6d 2d68 6561 6465 72\
    \        | custom-header\n                                           | -> custom-key:\n\
    \                                           |   custom-header\n   Dynamic Table\
    \ (after decoding):\n   [  1] (s =  55) custom-key: custom-header\n         Table\
    \ size:  55\n   Decoded header list:\n   custom-key: custom-header\n"
- title: C.2.2.  Literal Header Field without Indexing
  contents:
  - "C.2.2.  Literal Header Field without Indexing\n   The header field representation\
    \ uses an indexed name and a literal\n   value.  The header field is not added\
    \ to the dynamic table.\n   Header list to encode:\n   :path: /sample/path\n \
    \  Hex dump of encoded data:\n   040c 2f73 616d 706c 652f 7061 7468      | ../sample/path\n\
    \   Decoding process:\n   04                                      | == Literal\
    \ not indexed ==\n                                           |   Indexed name\
    \ (idx = 4)\n                                           |     :path\n   0c   \
    \                                   |   Literal value (len = 12)\n   2f73 616d\
    \ 706c 652f 7061 7468           | /sample/path\n                             \
    \              | -> :path: /sample/path\n   Dynamic table (after decoding): empty.\n\
    \   Decoded header list:\n   :path: /sample/path\n"
- title: C.2.3.  Literal Header Field Never Indexed
  contents:
  - "C.2.3.  Literal Header Field Never Indexed\n   The header field representation\
    \ uses a literal name and a literal\n   value.  The header field is not added\
    \ to the dynamic table and must\n   use the same representation if re-encoded\
    \ by an intermediary.\n   Header list to encode:\n   password: secret\n   Hex\
    \ dump of encoded data:\n   1008 7061 7373 776f 7264 0673 6563 7265 | ..password.secre\n\
    \   74                                      | t\n   Decoding process:\n   10 \
    \                                     | == Literal never indexed ==\n   08   \
    \                                   |   Literal name (len = 8)\n   7061 7373 776f\
    \ 7264                     | password\n   06                                 \
    \     |   Literal value (len = 6)\n   7365 6372 6574                         \
    \ | secret\n                                           | -> password: secret\n\
    \   Dynamic table (after decoding): empty.\n   Decoded header list:\n   password:\
    \ secret\n"
- title: C.2.4.  Indexed Header Field
  contents:
  - "C.2.4.  Indexed Header Field\n   The header field representation uses an indexed\
    \ header field from the\n   static table.\n   Header list to encode:\n   :method:\
    \ GET\n   Hex dump of encoded data:\n   82                                   \
    \   | .\n   Decoding process:\n   82                                      | ==\
    \ Indexed - Add ==\n                                           |   idx = 2\n \
    \                                          | -> :method: GET\n   Dynamic table\
    \ (after decoding): empty.\n   Decoded header list:\n   :method: GET\n"
- title: C.3.  Request Examples without Huffman Coding
  contents:
  - "C.3.  Request Examples without Huffman Coding\n   This section shows several\
    \ consecutive header lists, corresponding to\n   HTTP requests, on the same connection.\n"
- title: C.3.1.  First Request
  contents:
  - "C.3.1.  First Request\n   Header list to encode:\n   :method: GET\n   :scheme:\
    \ http\n   :path: /\n   :authority: www.example.com\n   Hex dump of encoded data:\n\
    \   8286 8441 0f77 7777 2e65 7861 6d70 6c65 | ...A.www.example\n   2e63 6f6d \
    \                              | .com\n   Decoding process:\n   82           \
    \                           | == Indexed - Add ==\n                          \
    \                 |   idx = 2\n                                           | ->\
    \ :method: GET\n   86                                      | == Indexed - Add\
    \ ==\n                                           |   idx = 6\n               \
    \                            | -> :scheme: http\n   84                       \
    \               | == Indexed - Add ==\n                                      \
    \     |   idx = 4\n                                           | -> :path: /\n\
    \   41                                      | == Literal indexed ==\n        \
    \                                   |   Indexed name (idx = 1)\n             \
    \                              |     :authority\n   0f                       \
    \               |   Literal value (len = 15)\n   7777 772e 6578 616d 706c 652e\
    \ 636f 6d   | www.example.com\n                                           | ->\
    \ :authority:\n                                           |   www.example.com\n\
    \   Dynamic Table (after decoding):\n   [  1] (s =  57) :authority: www.example.com\n\
    \         Table size:  57\n   Decoded header list:\n   :method: GET\n   :scheme:\
    \ http\n   :path: /\n   :authority: www.example.com\n"
- title: C.3.2.  Second Request
  contents:
  - "C.3.2.  Second Request\n   Header list to encode:\n   :method: GET\n   :scheme:\
    \ http\n   :path: /\n   :authority: www.example.com\n   cache-control: no-cache\n\
    \   Hex dump of encoded data:\n   8286 84be 5808 6e6f 2d63 6163 6865      | ....X.no-cache\n\
    \   Decoding process:\n   82                                      | == Indexed\
    \ - Add ==\n                                           |   idx = 2\n         \
    \                                  | -> :method: GET\n   86                  \
    \                    | == Indexed - Add ==\n                                 \
    \          |   idx = 6\n                                           | -> :scheme:\
    \ http\n   84                                      | == Indexed - Add ==\n   \
    \                                        |   idx = 4\n                       \
    \                    | -> :path: /\n   be                                    \
    \  | == Indexed - Add ==\n                                           |   idx =\
    \ 62\n                                           | -> :authority:\n          \
    \                                 |   www.example.com\n   58                 \
    \                     | == Literal indexed ==\n                              \
    \             |   Indexed name (idx = 24)\n                                  \
    \         |     cache-control\n   08                                      |  \
    \ Literal value (len = 8)\n   6e6f 2d63 6163 6865                     | no-cache\n\
    \                                           | -> cache-control: no-cache\n   Dynamic\
    \ Table (after decoding):\n   [  1] (s =  53) cache-control: no-cache\n   [  2]\
    \ (s =  57) :authority: www.example.com\n         Table size: 110\n   Decoded\
    \ header list:\n   :method: GET\n   :scheme: http\n   :path: /\n   :authority:\
    \ www.example.com\n   cache-control: no-cache\n"
- title: C.3.3.  Third Request
  contents:
  - "C.3.3.  Third Request\n   Header list to encode:\n   :method: GET\n   :scheme:\
    \ https\n   :path: /index.html\n   :authority: www.example.com\n   custom-key:\
    \ custom-value\n   Hex dump of encoded data:\n   8287 85bf 400a 6375 7374 6f6d\
    \ 2d6b 6579 | ....@.custom-key\n   0c63 7573 746f 6d2d 7661 6c75 65        | .custom-value\n\
    \   Decoding process:\n   82                                      | == Indexed\
    \ - Add ==\n                                           |   idx = 2\n         \
    \                                  | -> :method: GET\n   87                  \
    \                    | == Indexed - Add ==\n                                 \
    \          |   idx = 7\n                                           | -> :scheme:\
    \ https\n   85                                      | == Indexed - Add ==\n  \
    \                                         |   idx = 5\n                      \
    \                     | -> :path: /index.html\n   bf                         \
    \             | == Indexed - Add ==\n                                        \
    \   |   idx = 63\n                                           | -> :authority:\n\
    \                                           |   www.example.com\n   40       \
    \                               | == Literal indexed ==\n   0a               \
    \                       |   Literal name (len = 10)\n   6375 7374 6f6d 2d6b 6579\
    \                | custom-key\n   0c                                      |  \
    \ Literal value (len = 12)\n   6375 7374 6f6d 2d76 616c 7565           | custom-value\n\
    \                                           | -> custom-key:\n               \
    \                            |   custom-value\n   Dynamic Table (after decoding):\n\
    \   [  1] (s =  54) custom-key: custom-value\n   [  2] (s =  53) cache-control:\
    \ no-cache\n   [  3] (s =  57) :authority: www.example.com\n         Table size:\
    \ 164\n   Decoded header list:\n   :method: GET\n   :scheme: https\n   :path:\
    \ /index.html\n   :authority: www.example.com\n   custom-key: custom-value\n"
- title: C.4.  Request Examples with Huffman Coding
  contents:
  - "C.4.  Request Examples with Huffman Coding\n   This section shows the same examples\
    \ as the previous section but uses\n   Huffman encoding for the literal values.\n"
- title: C.4.1.  First Request
  contents:
  - "C.4.1.  First Request\n   Header list to encode:\n   :method: GET\n   :scheme:\
    \ http\n   :path: /\n   :authority: www.example.com\n   Hex dump of encoded data:\n\
    \   8286 8441 8cf1 e3c2 e5f2 3a6b a0ab 90f4 | ...A......:k....\n   ff        \
    \                              | .\n   Decoding process:\n   82              \
    \                        | == Indexed - Add ==\n                             \
    \              |   idx = 2\n                                           | -> :method:\
    \ GET\n   86                                      | == Indexed - Add ==\n    \
    \                                       |   idx = 6\n                        \
    \                   | -> :scheme: http\n   84                                \
    \      | == Indexed - Add ==\n                                           |   idx\
    \ = 4\n                                           | -> :path: /\n   41       \
    \                               | == Literal indexed ==\n                    \
    \                       |   Indexed name (idx = 1)\n                         \
    \                  |     :authority\n   8c                                   \
    \   |   Literal value (len = 12)\n                                           |\
    \     Huffman encoded:\n   f1e3 c2e5 f23a 6ba0 ab90 f4ff           | .....:k.....\n\
    \                                           |     Decoded:\n                 \
    \                          | www.example.com\n                               \
    \            | -> :authority:\n                                           |  \
    \ www.example.com\n   Dynamic Table (after decoding):\n   [  1] (s =  57) :authority:\
    \ www.example.com\n         Table size:  57\n   Decoded header list:\n   :method:\
    \ GET\n   :scheme: http\n   :path: /\n   :authority: www.example.com\n"
- title: C.4.2.  Second Request
  contents:
  - "C.4.2.  Second Request\n   Header list to encode:\n   :method: GET\n   :scheme:\
    \ http\n   :path: /\n   :authority: www.example.com\n   cache-control: no-cache\n\
    \   Hex dump of encoded data:\n   8286 84be 5886 a8eb 1064 9cbf           | ....X....d..\n\
    \   Decoding process:\n   82                                      | == Indexed\
    \ - Add ==\n                                           |   idx = 2\n         \
    \                                  | -> :method: GET\n   86                  \
    \                    | == Indexed - Add ==\n                                 \
    \          |   idx = 6\n                                           | -> :scheme:\
    \ http\n   84                                      | == Indexed - Add ==\n   \
    \                                        |   idx = 4\n                       \
    \                    | -> :path: /\n   be                                    \
    \  | == Indexed - Add ==\n                                           |   idx =\
    \ 62\n                                           | -> :authority:\n          \
    \                                 |   www.example.com\n   58                 \
    \                     | == Literal indexed ==\n                              \
    \             |   Indexed name (idx = 24)\n                                  \
    \         |     cache-control\n   86                                      |  \
    \ Literal value (len = 6)\n                                           |     Huffman\
    \ encoded:\n   a8eb 1064 9cbf                          | ...d..\n            \
    \                               |     Decoded:\n                             \
    \              | no-cache\n                                           | -> cache-control:\
    \ no-cache\n   Dynamic Table (after decoding):\n   [  1] (s =  53) cache-control:\
    \ no-cache\n   [  2] (s =  57) :authority: www.example.com\n         Table size:\
    \ 110\n   Decoded header list:\n   :method: GET\n   :scheme: http\n   :path: /\n\
    \   :authority: www.example.com\n   cache-control: no-cache\n"
- title: C.4.3.  Third Request
  contents:
  - "C.4.3.  Third Request\n   Header list to encode:\n   :method: GET\n   :scheme:\
    \ https\n   :path: /index.html\n   :authority: www.example.com\n   custom-key:\
    \ custom-value\n   Hex dump of encoded data:\n   8287 85bf 4088 25a8 49e9 5ba9\
    \ 7d7f 8925 | ....@.%.I.[.}..%\n   a849 e95b b8e8 b4bf                     | .I.[....\n\
    \   Decoding process:\n   82                                      | == Indexed\
    \ - Add ==\n                                           |   idx = 2\n         \
    \                                  | -> :method: GET\n   87                  \
    \                    | == Indexed - Add ==\n                                 \
    \          |   idx = 7\n                                           | -> :scheme:\
    \ https\n   85                                      | == Indexed - Add ==\n  \
    \                                         |   idx = 5\n                      \
    \                     | -> :path: /index.html\n   bf                         \
    \             | == Indexed - Add ==\n                                        \
    \   |   idx = 63\n                                           | -> :authority:\n\
    \                                           |   www.example.com\n   40       \
    \                               | == Literal indexed ==\n   88               \
    \                       |   Literal name (len = 8)\n                         \
    \                  |     Huffman encoded:\n   25a8 49e9 5ba9 7d7f            \
    \         | %.I.[.}.\n                                           |     Decoded:\n\
    \                                           | custom-key\n   89              \
    \                        |   Literal value (len = 9)\n                       \
    \                    |     Huffman encoded:\n   25a8 49e9 5bb8 e8b4 bf       \
    \           | %.I.[....\n                                           |     Decoded:\n\
    \                                           | custom-value\n                 \
    \                          | -> custom-key:\n                                \
    \           |   custom-value\n   Dynamic Table (after decoding):\n   [  1] (s\
    \ =  54) custom-key: custom-value\n   [  2] (s =  53) cache-control: no-cache\n\
    \   [  3] (s =  57) :authority: www.example.com\n         Table size: 164\n  \
    \ Decoded header list:\n   :method: GET\n   :scheme: https\n   :path: /index.html\n\
    \   :authority: www.example.com\n   custom-key: custom-value\n"
- title: C.5.  Response Examples without Huffman Coding
  contents:
  - "C.5.  Response Examples without Huffman Coding\n   This section shows several\
    \ consecutive header lists, corresponding to\n   HTTP responses, on the same connection.\
    \  The HTTP/2 setting parameter\n   SETTINGS_HEADER_TABLE_SIZE is set to the value\
    \ of 256 octets, causing\n   some evictions to occur.\n"
- title: C.5.1.  First Response
  contents:
  - "C.5.1.  First Response\n   Header list to encode:\n   :status: 302\n   cache-control:\
    \ private\n   date: Mon, 21 Oct 2013 20:13:21 GMT\n   location: https://www.example.com\n\
    \   Hex dump of encoded data:\n   4803 3330 3258 0770 7269 7661 7465 611d | H.302X.privatea.\n\
    \   4d6f 6e2c 2032 3120 4f63 7420 3230 3133 | Mon, 21 Oct 2013\n   2032 303a 3133\
    \ 3a32 3120 474d 546e 1768 |  20:13:21 GMTn.h\n   7474 7073 3a2f 2f77 7777 2e65\
    \ 7861 6d70 | ttps://www.examp\n   6c65 2e63 6f6d                          | le.com\n\
    \   Decoding process:\n   48                                      | == Literal\
    \ indexed ==\n                                           |   Indexed name (idx\
    \ = 8)\n                                           |     :status\n   03      \
    \                                |   Literal value (len = 3)\n   3330 32     \
    \                            | 302\n                                         \
    \  | -> :status: 302\n   58                                      | == Literal\
    \ indexed ==\n                                           |   Indexed name (idx\
    \ = 24)\n                                           |     cache-control\n   07\
    \                                      |   Literal value (len = 7)\n   7072 6976\
    \ 6174 65                       | private\n                                  \
    \         | -> cache-control: private\n   61                                 \
    \     | == Literal indexed ==\n                                           |  \
    \ Indexed name (idx = 33)\n                                           |     date\n\
    \   1d                                      |   Literal value (len = 29)\n   4d6f\
    \ 6e2c 2032 3120 4f63 7420 3230 3133 | Mon, 21 Oct 2013\n   2032 303a 3133 3a32\
    \ 3120 474d 54        |  20:13:21 GMT\n                                      \
    \     | -> date: Mon, 21 Oct 2013\n                                          \
    \ |   20:13:21 GMT\n   6e                                      | == Literal indexed\
    \ ==\n                                           |   Indexed name (idx = 46)\n\
    \                                           |     location\n   17            \
    \                          |   Literal value (len = 23)\n   6874 7470 733a 2f2f\
    \ 7777 772e 6578 616d | https://www.exam\n   706c 652e 636f 6d               \
    \        | ple.com\n                                           | -> location:\n\
    \                                           |   https://www.example.com\n   Dynamic\
    \ Table (after decoding):\n   [  1] (s =  63) location: https://www.example.com\n\
    \   [  2] (s =  65) date: Mon, 21 Oct 2013 20:13:21 GMT\n   [  3] (s =  52) cache-control:\
    \ private\n   [  4] (s =  42) :status: 302\n         Table size: 222\n   Decoded\
    \ header list:\n   :status: 302\n   cache-control: private\n   date: Mon, 21 Oct\
    \ 2013 20:13:21 GMT\n   location: https://www.example.com\n"
- title: C.5.2.  Second Response
  contents:
  - "C.5.2.  Second Response\n   The (\":status\", \"302\") header field is evicted\
    \ from the dynamic table\n   to free space to allow adding the (\":status\", \"\
    307\") header field.\n   Header list to encode:\n   :status: 307\n   cache-control:\
    \ private\n   date: Mon, 21 Oct 2013 20:13:21 GMT\n   location: https://www.example.com\n\
    \   Hex dump of encoded data:\n   4803 3330 37c1 c0bf                     | H.307...\n\
    \   Decoding process:\n   48                                      | == Literal\
    \ indexed ==\n                                           |   Indexed name (idx\
    \ = 8)\n                                           |     :status\n   03      \
    \                                |   Literal value (len = 3)\n   3330 37     \
    \                            | 307\n                                         \
    \  | - evict: :status: 302\n                                           | -> :status:\
    \ 307\n   c1                                      | == Indexed - Add ==\n    \
    \                                       |   idx = 65\n                       \
    \                    | -> cache-control: private\n   c0                      \
    \                | == Indexed - Add ==\n                                     \
    \      |   idx = 64\n                                           | -> date: Mon,\
    \ 21 Oct 2013\n                                           |   20:13:21 GMT\n \
    \  bf                                      | == Indexed - Add ==\n           \
    \                                |   idx = 63\n                              \
    \             | -> location:\n                                           |   https://www.example.com\n\
    \   Dynamic Table (after decoding):\n   [  1] (s =  42) :status: 307\n   [  2]\
    \ (s =  63) location: https://www.example.com\n   [  3] (s =  65) date: Mon, 21\
    \ Oct 2013 20:13:21 GMT\n   [  4] (s =  52) cache-control: private\n         Table\
    \ size: 222\n   Decoded header list:\n   :status: 307\n   cache-control: private\n\
    \   date: Mon, 21 Oct 2013 20:13:21 GMT\n   location: https://www.example.com\n"
- title: C.5.3.  Third Response
  contents:
  - "C.5.3.  Third Response\n   Several header fields are evicted from the dynamic\
    \ table during the\n   processing of this header list.\n   Header list to encode:\n\
    \   :status: 200\n   cache-control: private\n   date: Mon, 21 Oct 2013 20:13:22\
    \ GMT\n   location: https://www.example.com\n   content-encoding: gzip\n   set-cookie:\
    \ foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1\n   Hex dump of encoded\
    \ data:\n   88c1 611d 4d6f 6e2c 2032 3120 4f63 7420 | ..a.Mon, 21 Oct\n   3230\
    \ 3133 2032 303a 3133 3a32 3220 474d | 2013 20:13:22 GM\n   54c0 5a04 677a 6970\
    \ 7738 666f 6f3d 4153 | T.Z.gzipw8foo=AS\n   444a 4b48 514b 425a 584f 5157 454f\
    \ 5049 | DJKHQKBZXOQWEOPI\n   5541 5851 5745 4f49 553b 206d 6178 2d61 | UAXQWEOIU;\
    \ max-a\n   6765 3d33 3630 303b 2076 6572 7369 6f6e | ge=3600; version\n   3d31\
    \                                    | =1\n   Decoding process:\n   88       \
    \                               | == Indexed - Add ==\n                      \
    \                     |   idx = 8\n                                          \
    \ | -> :status: 200\n   c1                                      | == Indexed -\
    \ Add ==\n                                           |   idx = 65\n          \
    \                                 | -> cache-control: private\n   61         \
    \                             | == Literal indexed ==\n                      \
    \                     |   Indexed name (idx = 33)\n                          \
    \                 |     date\n   1d                                      |   Literal\
    \ value (len = 29)\n   4d6f 6e2c 2032 3120 4f63 7420 3230 3133 | Mon, 21 Oct 2013\n\
    \   2032 303a 3133 3a32 3220 474d 54        |  20:13:22 GMT\n                \
    \                           | - evict: cache-control:\n                      \
    \                     |   private\n                                          \
    \ | -> date: Mon, 21 Oct 2013\n                                           |  \
    \ 20:13:22 GMT\n   c0                                      | == Indexed - Add\
    \ ==\n                                           |   idx = 64\n              \
    \                             | -> location:\n                               \
    \            |   https://www.example.com\n   5a                              \
    \        | == Literal indexed ==\n                                           |\
    \   Indexed name (idx = 26)\n                                           |    \
    \ content-encoding\n   04                                      |   Literal value\
    \ (len = 4)\n   677a 6970                               | gzip\n             \
    \                              | - evict: date: Mon, 21 Oct\n                \
    \                           |    2013 20:13:21 GMT\n                         \
    \                  | -> content-encoding: gzip\n   77                        \
    \              | == Literal indexed ==\n                                     \
    \      |   Indexed name (idx = 55)\n                                         \
    \  |     set-cookie\n   38                                      |   Literal value\
    \ (len = 56)\n   666f 6f3d 4153 444a 4b48 514b 425a 584f | foo=ASDJKHQKBZXO\n\
    \   5157 454f 5049 5541 5851 5745 4f49 553b | QWEOPIUAXQWEOIU;\n   206d 6178 2d61\
    \ 6765 3d33 3630 303b 2076 |  max-age=3600; v\n   6572 7369 6f6e 3d31        \
    \             | ersion=1\n                                           | - evict:\
    \ location:\n                                           |   https://www.example.com\n\
    \                                           | - evict: :status: 307\n        \
    \                                   | -> set-cookie: foo=ASDJKHQ\n           \
    \                                |   KBZXOQWEOPIUAXQWEOIU; ma\n              \
    \                             |   x-age=3600; version=1\n   Dynamic Table (after\
    \ decoding):\n   [  1] (s =  98) set-cookie: foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU;\n\
    \                    max-age=3600; version=1\n   [  2] (s =  52) content-encoding:\
    \ gzip\n   [  3] (s =  65) date: Mon, 21 Oct 2013 20:13:22 GMT\n         Table\
    \ size: 215\n   Decoded header list:\n   :status: 200\n   cache-control: private\n\
    \   date: Mon, 21 Oct 2013 20:13:22 GMT\n   location: https://www.example.com\n\
    \   content-encoding: gzip\n   set-cookie: foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600;\
    \ version=1\n"
- title: C.6.  Response Examples with Huffman Coding
  contents:
  - "C.6.  Response Examples with Huffman Coding\n   This section shows the same examples\
    \ as the previous section but uses\n   Huffman encoding for the literal values.\
    \  The HTTP/2 setting\n   parameter SETTINGS_HEADER_TABLE_SIZE is set to the value\
    \ of 256\n   octets, causing some evictions to occur.  The eviction mechanism\
    \ uses\n   the length of the decoded literal values, so the same evictions occur\n\
    \   as in the previous section.\n"
- title: C.6.1.  First Response
  contents:
  - "C.6.1.  First Response\n   Header list to encode:\n   :status: 302\n   cache-control:\
    \ private\n   date: Mon, 21 Oct 2013 20:13:21 GMT\n   location: https://www.example.com\n\
    \   Hex dump of encoded data:\n   4882 6402 5885 aec3 771a 4b61 96d0 7abe | H.d.X...w.Ka..z.\n\
    \   9410 54d4 44a8 2005 9504 0b81 66e0 82a6 | ..T.D. .....f...\n   2d1b ff6e 919d\
    \ 29ad 1718 63c7 8f0b 97c8 | -..n..)...c.....\n   e9ae 82ae 43d3             \
    \             | ....C.\n   Decoding process:\n   48                          \
    \            | == Literal indexed ==\n                                       \
    \    |   Indexed name (idx = 8)\n                                           |\
    \     :status\n   82                                      |   Literal value (len\
    \ = 2)\n                                           |     Huffman encoded:\n  \
    \ 6402                                    | d.\n                             \
    \              |     Decoded:\n                                           | 302\n\
    \                                           | -> :status: 302\n   58         \
    \                             | == Literal indexed ==\n                      \
    \                     |   Indexed name (idx = 24)\n                          \
    \                 |     cache-control\n   85                                 \
    \     |   Literal value (len = 5)\n                                          \
    \ |     Huffman encoded:\n   aec3 771a 4b                            | ..w.K\n\
    \                                           |     Decoded:\n                 \
    \                          | private\n                                       \
    \    | -> cache-control: private\n   61                                      |\
    \ == Literal indexed ==\n                                           |   Indexed\
    \ name (idx = 33)\n                                           |     date\n   96\
    \                                      |   Literal value (len = 22)\n        \
    \                                   |     Huffman encoded:\n   d07a be94 1054\
    \ d444 a820 0595 040b 8166 | .z...T.D. .....f\n   e082 a62d 1bff             \
    \             | ...-..\n                                           |     Decoded:\n\
    \                                           | Mon, 21 Oct 2013 20:13:21\n    \
    \                                       | GMT\n                              \
    \             | -> date: Mon, 21 Oct 2013\n                                  \
    \         |   20:13:21 GMT\n   6e                                      | == Literal\
    \ indexed ==\n                                           |   Indexed name (idx\
    \ = 46)\n                                           |     location\n   91    \
    \                                  |   Literal value (len = 17)\n            \
    \                               |     Huffman encoded:\n   9d29 ad17 1863 c78f\
    \ 0b97 c8e9 ae82 ae43 | .)...c.........C\n   d3                              \
    \        | .\n                                           |     Decoded:\n    \
    \                                       | https://www.example.com\n          \
    \                                 | -> location:\n                           \
    \                |   https://www.example.com\n   Dynamic Table (after decoding):\n\
    \   [  1] (s =  63) location: https://www.example.com\n   [  2] (s =  65) date:\
    \ Mon, 21 Oct 2013 20:13:21 GMT\n   [  3] (s =  52) cache-control: private\n \
    \  [  4] (s =  42) :status: 302\n         Table size: 222\n   Decoded header list:\n\
    \   :status: 302\n   cache-control: private\n   date: Mon, 21 Oct 2013 20:13:21\
    \ GMT\n   location: https://www.example.com\n"
- title: C.6.2.  Second Response
  contents:
  - "C.6.2.  Second Response\n   The (\":status\", \"302\") header field is evicted\
    \ from the dynamic table\n   to free space to allow adding the (\":status\", \"\
    307\") header field.\n   Header list to encode:\n   :status: 307\n   cache-control:\
    \ private\n   date: Mon, 21 Oct 2013 20:13:21 GMT\n   location: https://www.example.com\n\
    \   Hex dump of encoded data:\n   4883 640e ffc1 c0bf                     | H.d.....\n\
    \   Decoding process:\n   48                                      | == Literal\
    \ indexed ==\n                                           |   Indexed name (idx\
    \ = 8)\n                                           |     :status\n   83      \
    \                                |   Literal value (len = 3)\n               \
    \                            |     Huffman encoded:\n   640e ff              \
    \                   | d..\n                                           |     Decoded:\n\
    \                                           | 307\n                          \
    \                 | - evict: :status: 302\n                                  \
    \         | -> :status: 307\n   c1                                      | == Indexed\
    \ - Add ==\n                                           |   idx = 65\n        \
    \                                   | -> cache-control: private\n   c0       \
    \                               | == Indexed - Add ==\n                      \
    \                     |   idx = 64\n                                         \
    \  | -> date: Mon, 21 Oct 2013\n                                           | \
    \  20:13:21 GMT\n   bf                                      | == Indexed - Add\
    \ ==\n                                           |   idx = 63\n              \
    \                             | -> location:\n                               \
    \            |   https://www.example.com\n   Dynamic Table (after decoding):\n\
    \   [  1] (s =  42) :status: 307\n   [  2] (s =  63) location: https://www.example.com\n\
    \   [  3] (s =  65) date: Mon, 21 Oct 2013 20:13:21 GMT\n   [  4] (s =  52) cache-control:\
    \ private\n         Table size: 222\n   Decoded header list:\n   :status: 307\n\
    \   cache-control: private\n   date: Mon, 21 Oct 2013 20:13:21 GMT\n   location:\
    \ https://www.example.com\n"
- title: C.6.3.  Third Response
  contents:
  - "C.6.3.  Third Response\n   Several header fields are evicted from the dynamic\
    \ table during the\n   processing of this header list.\n   Header list to encode:\n\
    \   :status: 200\n   cache-control: private\n   date: Mon, 21 Oct 2013 20:13:22\
    \ GMT\n   location: https://www.example.com\n   content-encoding: gzip\n   set-cookie:\
    \ foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1\n   Hex dump of encoded\
    \ data:\n   88c1 6196 d07a be94 1054 d444 a820 0595 | ..a..z...T.D. ..\n   040b\
    \ 8166 e084 a62d 1bff c05a 839b d9ab | ...f...-...Z....\n   77ad 94e7 821d d7f2\
    \ e6c7 b335 dfdf cd5b | w..........5...[\n   3960 d5af 2708 7f36 72c1 ab27 0fb5\
    \ 291f | 9`..'..6r..'..).\n   9587 3160 65c0 03ed 4ee5 b106 3d50 07   | ..1`e...N...=P.\n\
    \   Decoding process:\n   88                                      | == Indexed\
    \ - Add ==\n                                           |   idx = 8\n         \
    \                                  | -> :status: 200\n   c1                  \
    \                    | == Indexed - Add ==\n                                 \
    \          |   idx = 65\n                                           | -> cache-control:\
    \ private\n   61                                      | == Literal indexed ==\n\
    \                                           |   Indexed name (idx = 33)\n    \
    \                                       |     date\n   96                    \
    \                  |   Literal value (len = 22)\n                            \
    \               |     Huffman encoded:\n   d07a be94 1054 d444 a820 0595 040b\
    \ 8166 | .z...T.D. .....f\n   e084 a62d 1bff                          | ...-..\n\
    \                                           |     Decoded:\n                 \
    \                          | Mon, 21 Oct 2013 20:13:22\n                     \
    \                      | GMT\n                                           | - evict:\
    \ cache-control:\n                                           |   private\n   \
    \                                        | -> date: Mon, 21 Oct 2013\n       \
    \                                    |   20:13:22 GMT\n   c0                 \
    \                     | == Indexed - Add ==\n                                \
    \           |   idx = 64\n                                           | -> location:\n\
    \                                           |   https://www.example.com\n   5a\
    \                                      | == Literal indexed ==\n             \
    \                              |   Indexed name (idx = 26)\n                 \
    \                          |     content-encoding\n   83                     \
    \                 |   Literal value (len = 3)\n                              \
    \             |     Huffman encoded:\n   9bd9 ab                             \
    \    | ...\n                                           |     Decoded:\n      \
    \                                     | gzip\n                               \
    \            | - evict: date: Mon, 21 Oct\n                                  \
    \         |    2013 20:13:21 GMT\n                                           |\
    \ -> content-encoding: gzip\n   77                                      | == Literal\
    \ indexed ==\n                                           |   Indexed name (idx\
    \ = 55)\n                                           |     set-cookie\n   ad  \
    \                                    |   Literal value (len = 45)\n          \
    \                                 |     Huffman encoded:\n   94e7 821d d7f2 e6c7\
    \ b335 dfdf cd5b 3960 | .........5...[9`\n   d5af 2708 7f36 72c1 ab27 0fb5 291f\
    \ 9587 | ..'..6r..'..)...\n   3160 65c0 03ed 4ee5 b106 3d50 07        | 1`e...N...=P.\n\
    \                                           |     Decoded:\n                 \
    \                          | foo=ASDJKHQKBZXOQWEOPIUAXQ\n                    \
    \                       | WEOIU; max-age=3600; versi\n                       \
    \                    | on=1\n                                           | - evict:\
    \ location:\n                                           |   https://www.example.com\n\
    \                                           | - evict: :status: 307\n        \
    \                                   | -> set-cookie: foo=ASDJKHQ\n           \
    \                                |   KBZXOQWEOPIUAXQWEOIU; ma\n              \
    \                             |   x-age=3600; version=1\n   Dynamic Table (after\
    \ decoding):\n   [  1] (s =  98) set-cookie: foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU;\n\
    \                    max-age=3600; version=1\n   [  2] (s =  52) content-encoding:\
    \ gzip\n   [  3] (s =  65) date: Mon, 21 Oct 2013 20:13:22 GMT\n         Table\
    \ size: 215\n   Decoded header list:\n   :status: 200\n   cache-control: private\n\
    \   date: Mon, 21 Oct 2013 20:13:22 GMT\n   location: https://www.example.com\n\
    \   content-encoding: gzip\n   set-cookie: foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600;\
    \ version=1\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This specification includes substantial input from the following\n\
    \   individuals:\n   o  Mike Bishop, Jeff Pinner, Julian Reschke, and Martin Thomson\n\
    \      (substantial editorial contributions).\n   o  Johnny Graettinger (Huffman\
    \ code statistics).\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Roberto Peon\n   Google, Inc\n   EMail: fenix@google.com\n\
    \   Herve Ruellan\n   Canon CRF\n   EMail: herve.ruellan@crf.canon.fr\n"
