- title: __initial_text__
  contents:
  - '                DNS Name Server Identifier (NSID) Option

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   With the increased use of DNS anycast, load balancing, and other\n\
    \   mechanisms allowing more than one DNS name server to share a single\n   IP\
    \ address, it is sometimes difficult to tell which of a pool of name\n   servers\
    \ has answered a particular query.  While existing ad-hoc\n   mechanisms allow\
    \ an operator to send follow-up queries when it is\n   necessary to debug such\
    \ a configuration, the only completely reliable\n   way to obtain the identity\
    \ of the name server that responded is to\n   have the name server include this\
    \ information in the response itself.\n   This note defines a protocol extension\
    \ to support this functionality.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n     1.1.  Reserved Words . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   2.  Protocol . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n     2.1.  Resolver Behavior  . . . . . . . . . . . . . . . . .\
    \ . . .  3\n     2.2.  Name Server Behavior . . . . . . . . . . . . . . . . .\
    \ . .  3\n     2.3.  The NSID Option  . . . . . . . . . . . . . . . . . . . .\
    \ .  4\n     2.4.  Presentation Format  . . . . . . . . . . . . . . . . . . .\
    \  4\n   3.  Discussion . . . . . . . . . . . . . . . . . . . . . . . . . .  4\n\
    \     3.1.  The NSID Payload . . . . . . . . . . . . . . . . . . . . .  4\n  \
    \   3.2.  NSID Is Not Transitive . . . . . . . . . . . . . . . . . .  7\n    \
    \ 3.3.  User Interface Issues  . . . . . . . . . . . . . . . . . .  7\n     3.4.\
    \  Truncation . . . . . . . . . . . . . . . . . . . . . . . .  8\n   4.  IANA\
    \ Considerations  . . . . . . . . . . . . . . . . . . . . .  8\n   5.  Security\
    \ Considerations  . . . . . . . . . . . . . . . . . . .  9\n   6.  Acknowledgements\
    \ . . . . . . . . . . . . . . . . . . . . . . .  9\n   7.  References . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . .  9\n     7.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . . .  9\n     7.2.  Informative References\
    \ . . . . . . . . . . . . . . . . . . 10\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   With the increased use of DNS anycast, load balancing, and\
    \ other\n   mechanisms allowing more than one DNS name server to share a single\n\
    \   IP address, it is sometimes difficult to tell which of a pool of name\n  \
    \ servers has answered a particular query.\n   Existing ad-hoc mechanisms allow\
    \ an operator to send follow-up\n   queries when it is necessary to debug such\
    \ a configuration, but there\n   are situations in which this is not a totally\
    \ satisfactory solution,\n   since anycast routing may have changed, or the server\
    \ pool in\n   question may be behind some kind of extremely dynamic load balancing\n\
    \   hardware.  Thus, while these ad-hoc mechanisms are certainly better\n   than\
    \ nothing (and have the advantage of already being deployed), a\n   better solution\
    \ seems desirable.\n   Given that a DNS query is an idempotent operation with\
    \ no retained\n   state, it would appear that the only completely reliable way\
    \ to\n   obtain the identity of the name server that responded to a particular\n\
    \   query is to have that name server include identifying information in\n   the\
    \ response itself.  This note defines a protocol enhancement to\n   achieve this.\n"
- title: 1.1.  Reserved Words
  contents:
  - "1.1.  Reserved Words\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",\
    \ \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Protocol
  contents:
  - "2.  Protocol\n   This note uses an EDNS [RFC2671] option to signal the resolver's\n\
    \   desire for information identifying the name server and to hold the\n   name\
    \ server's response, if any.\n"
- title: 2.1.  Resolver Behavior
  contents:
  - "2.1.  Resolver Behavior\n   A resolver signals its desire for information identifying\
    \ a name\n   server by sending an empty NSID option (Section 2.3) in an EDNS OPT\n\
    \   pseudo-RR in the query message.\n   The resolver MUST NOT include any NSID\
    \ payload data in the query\n   message.\n   The semantics of an NSID request\
    \ are not transitive.  That is: the\n   presence of an NSID option in a query\
    \ is a request that the name\n   server which receives the query identify itself.\
    \  If the name server\n   side of a recursive name server receives an NSID request,\
    \ the client\n   is asking the recursive name server to identify itself; if the\n\
    \   resolver side of the recursive name server wishes to receive\n   identifying\
    \ information, it is free to add NSID requests in its own\n   queries, but that\
    \ is a separate matter.\n"
- title: 2.2.  Name Server Behavior
  contents:
  - "2.2.  Name Server Behavior\n   A name server that understands the NSID option\
    \ and chooses to honor a\n   particular NSID request responds by including identifying\
    \ information\n   in a NSID option (Section 2.3) in an EDNS OPT pseudo-RR in the\n\
    \   response message.\n   The name server MUST ignore any NSID payload data that\
    \ might be\n   present in the query message.\n   The NSID option is not transitive.\
    \  A name server MUST NOT send an\n   NSID option back to a resolver which did\
    \ not request it.  In\n   particular, while a recursive name server may choose\
    \ to add an NSID\n   option when sending a query, this has no effect on the presence\
    \ or\n   absence of the NSID option in the recursive name server's response to\n\
    \   the original client.\n   As stated in Section 2.1, this mechanism is not restricted\
    \ to\n   authoritative name servers; the semantics are intended to be equally\n\
    \   applicable to recursive name servers.\n"
- title: 2.3.  The NSID Option
  contents:
  - "2.3.  The NSID Option\n   The OPTION-CODE for the NSID option is 3.\n   The OPTION-DATA\
    \ for the NSID option is an opaque byte string, the\n   semantics of which are\
    \ deliberately left outside the protocol.  See\n   Section 3.1 for discussion.\n"
- title: 2.4.  Presentation Format
  contents:
  - "2.4.  Presentation Format\n   User interfaces MUST read and write the contents\
    \ of the NSID option\n   as a sequence of hexadecimal digits, two digits per payload\
    \ octet.\n   The NSID payload is binary data.  Any comparison between NSID\n \
    \  payloads MUST be a comparison of the raw binary data.  Copy\n   operations\
    \ MUST NOT assume that the raw NSID payload is null-\n   terminated.  Any resemblance\
    \ between raw NSID payload data and any\n   form of text is purely a convenience,\
    \ and does not change the\n   underlying nature of the payload data.\n   See Section\
    \ 3.3 for discussion.\n"
- title: 3.  Discussion
  contents:
  - "3.  Discussion\n   This section discusses certain aspects of the protocol and\
    \ explains\n   considerations that led to the chosen design.\n"
- title: 3.1.  The NSID Payload
  contents:
  - "3.1.  The NSID Payload\n   The syntax and semantics of the content of the NSID\
    \ option are\n   deliberately left outside the scope of this specification.\n\
    \   Choosing the NSID content is a prerogative of the server\n   administrator.\
    \  The server administrator might choose to encode the\n   NSID content in such\
    \ a way that the server operator (or clients\n   authorized by the server operator)\
    \ can decode the NSID content to\n   obtain more information than other clients\
    \ can.  Alternatively, the\n   server operator might choose unencoded NSID content\
    \ that is equally\n   meaningful to any client.\n   This section describes some\
    \ of the kinds of data that server\n   administrators might choose to provide\
    \ as the content of the NSID\n   option, and explains the reasoning behind specifying\
    \ a simple opaque\n   byte string in Section 2.3.\n   There are several possibilities\
    \ for the payload of the NSID option:\n   o  It could be the \"real\" name of\
    \ the specific name server within the\n      name server pool.\n   o  It could\
    \ be the \"real\" IP address (IPv4 or IPv6) of the name\n      server within the\
    \ name server pool.\n   o  It could be some sort of pseudo-random number generated\
    \ in a\n      predictable fashion somehow using the server's IP address or name\n\
    \      as a seed value.\n   o  It could be some sort of probabilistically unique\
    \ identifier\n      initially derived from some sort of random number generator\
    \ then\n      preserved across reboots of the name server.\n   o  It could be\
    \ some sort of dynamically generated identifier so that\n      only the name server\
    \ operator could tell whether or not any two\n      queries had been answered\
    \ by the same server.\n   o  It could be a blob of signed data, with a corresponding\
    \ key which\n      might (or might not) be available via DNS lookups.\n   o  It\
    \ could be a blob of encrypted data, the key for which could be\n      restricted\
    \ to parties with a need to know (in the opinion of the\n      server operator).\n\
    \   o  It could be an arbitrary string of octets chosen at the discretion\n  \
    \    of the name server operator.\n   Each of these options has advantages and\
    \ disadvantages:\n   o  Using the \"real\" name is simple, but the name server\
    \ may not have\n      a \"real\" name.\n   o  Using the \"real\" address is also\
    \ simple, and the name server\n      almost certainly does have at least one non-anycast\
    \ IP address for\n      maintenance operations, but the operator of the name server\
    \ may\n      not be willing to divulge its non-anycast address.\n   o  Given that\
    \ one common reason for using anycast DNS techniques is\n      an attempt to harden\
    \ a critical name server against denial of\n      service attacks, some name server\
    \ operators are likely to want an\n      identifier other than the \"real\" name\
    \ or \"real\" address of the\n      name server instance.\n   o  Using a hash\
    \ or pseudo-random number can provide a fixed length\n      value that the resolver\
    \ can use to tell two name servers apart\n      without necessarily being able\
    \ to tell where either one of them\n      \"really\" is, but makes debugging more\
    \ difficult if one happens to\n      be in a friendly open environment.  Furthermore,\
    \ hashing might not\n      add much value, since a hash based on an IPv4 address\
    \ still only\n      involves a 32-bit search space, and DNS names used for servers\n\
    \      that operators might have to debug at 4am tend not to be very\n      random.\n\
    \   o  Probabilistically unique identifiers have properties similar to\n     \
    \ hashed identifiers, but (given a sufficiently good random number\n      generator)\
    \ are immune to the search space issues.  However, the\n      strength of this\
    \ approach is also its weakness: there is no\n      algorithmic transformation\
    \ by which even the server operator can\n      associate name server instances\
    \ with identifiers while debugging,\n      which might be annoying.  This approach\
    \ also requires the name\n      server instance to preserve the probabilistically\
    \ unique\n      identifier across reboots, but this does not appear to be a\n\
    \      serious restriction, since authoritative nameservers almost always\n  \
    \    have some form of non-volatile storage.  In the rare case of a\n      name\
    \ server that does not have any way to store such an\n      identifier, nothing\
    \ terrible will happen if the name server\n      generates a new identifier every\
    \ time it reboots.\n   o  Using an arbitrary octet string gives name server operators\
    \ yet\n      another setting to configure, or mis-configure, or forget to\n  \
    \    configure.  Having all the nodes in an anycast name server\n      constellation\
    \ identify themselves as \"My Name Server\" would not be\n      particularly useful.\n\
    \   o  A signed blob is not particularly useful as an NSID payload unless\n  \
    \    the signed data is dynamic and includes some kind of replay\n      protection,\
    \ such as a timestamp or some kind of data identifying\n      the requestor. \
    \ Signed blobs that meet these criteria could\n      conceivably be useful in\
    \ some situations but would require\n      detailed security analysis beyond the\
    \ scope of this document.\n   o  A static encrypted blob would not be particularly\
    \ useful, as it\n      would be subject to replay attacks and would, in effect,\
    \ just be a\n      random number to any party that does not possess the decryption\n\
    \      key.  Dynamic encrypted blobs could conceivably be useful in some\n   \
    \   situations but, as with signed blobs, dynamic encrypted blobs\n      would\
    \ require detailed security analysis beyond the scope of this\n      document.\n\
    \   Given all of the issues listed above, there does not appear to be a\n   single\
    \ solution that will meet all needs.  Section 2.3 therefore\n   defines the NSID\
    \ payload to be an opaque byte string and leaves the\n   choice of payload up\
    \ to the implementor and name server operator.\n   The following guidelines may\
    \ be useful to implementors and server\n   operators:\n   o  Operators for whom\
    \ divulging the unicast address is an issue could\n      use the raw binary representation\
    \ of a probabilistically unique\n      random number.  This should probably be\
    \ the default implementation\n      behavior.\n   o  Operators for whom divulging\
    \ the unicast address is not an issue\n      could just use the raw binary representation\
    \ of a unicast address\n      for simplicity.  This should only be done via an\
    \ explicit\n      configuration choice by the operator.\n   o  Operators who really\
    \ need or want the ability to set the NSID\n      payload to an arbitrary value\
    \ could do so, but this should only be\n      done via an explicit configuration\
    \ choice by the operator.\n   This approach appears to provide enough information\
    \ for useful\n   debugging without unintentionally leaking the maintenance addresses\n\
    \   of anycast name servers to nogoodniks, while also allowing name\n   server\
    \ operators who do not find such leakage threatening to provide\n   more information\
    \ at their own discretion.\n"
- title: 3.2.  NSID Is Not Transitive
  contents:
  - "3.2.  NSID Is Not Transitive\n   As specified in Section 2.1 and Section 2.2,\
    \ the NSID option is not\n   transitive.  This is strictly a hop-by-hop mechanism.\n\
    \   Most of the discussion of name server identification to date has\n   focused\
    \ on identifying authoritative name servers, since the best\n   known cases of\
    \ anycast name servers are a subset of the name servers\n   for the root zone.\
    \  However, given that anycast DNS techniques are\n   also applicable to recursive\
    \ name servers, the mechanism may also be\n   useful with recursive name servers.\
    \  The hop-by-hop semantics support\n   this.\n   While there might be some utility\
    \ in having a transitive variant of\n   this mechanism (so that, for example,\
    \ a stub resolver could ask a\n   recursive server to tell it which authoritative\
    \ name server provided\n   a particular answer to the recursive name server),\
    \ the semantics of\n   such a variant would be more complicated, and are left\
    \ for future\n   work.\n"
- title: 3.3.  User Interface Issues
  contents:
  - "3.3.  User Interface Issues\n   Given the range of possible payload contents\
    \ described in\n   Section 3.1, it is not possible to define a single presentation\n\
    \   format for the NSID payload that is efficient, convenient,\n   unambiguous,\
    \ and aesthetically pleasing.  In particular, while it is\n   tempting to use\
    \ a presentation format that uses some form of textual\n   strings, attempting\
    \ to support this would significantly complicate\n   what's intended to be a very\
    \ simple debugging mechanism.\n   In some cases the content of the NSID payload\
    \ may be binary data\n   meaningful only to the name server operator, and may\
    \ not be\n   meaningful to the user or application, but the user or application\n\
    \   must be able to capture the entire content anyway in order for it to\n   be\
    \ useful.  Thus, the presentation format must support arbitrary\n   binary data.\n\
    \   In cases where the name server operator derives the NSID payload from\n  \
    \ textual data, a textual form such as US-ASCII or UTF-8 strings might\n   at\
    \ first glance seem easier for a user to deal with.  There are,\n   however, a\
    \ number of complex issues involving internationalized text\n   which, if fully\
    \ addressed here, would require a set of rules\n   significantly longer than the\
    \ rest of this specification.  See\n   [RFC2277] for an overview of some of these\
    \ issues.\n   It is much more important for the NSID payload data to be passed\n\
    \   unambiguously from server administrator to user and back again than\n   it\
    \ is for the payload data to be pretty while in transit.  In\n   particular, it's\
    \ critical that it be straightforward for a user to\n   cut and paste an exact\
    \ copy of the NSID payload output by a debugging\n   tool into other formats such\
    \ as email messages or web forms without\n   distortion.  Hexadecimal strings,\
    \ while ugly, are also robust.\n"
- title: 3.4.  Truncation
  contents:
  - "3.4.  Truncation\n   In some cases, adding the NSID option to a response message\
    \ may\n   trigger message truncation.  This specification does not change the\n\
    \   rules for DNS message truncation in any way, but implementors will\n   need\
    \ to pay attention to this issue.\n   Including the NSID option in a response\
    \ is always optional, so this\n   specification never requires name servers to\
    \ truncate response\n   messages.\n   By definition, a resolver that requests\
    \ NSID responses also supports\n   EDNS, so a resolver that requests NSID responses\
    \ can also use the\n   \"sender's UDP payload size\" field of the OPT pseudo-RR\
    \ to signal a\n   receive buffer size large enough to make truncation unlikely.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   IANA has allocated EDNS option code 3 for the NSID\
    \ option\n   (Section 2.3).\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document describes a channel signaling mechanism\
    \ intended\n   primarily for debugging.  Channel signaling mechanisms are outside\n\
    \   the scope of DNSSEC, per se.  Applications that require integrity\n   protection\
    \ for the data being signaled will need to use a channel\n   security mechanism\
    \ such as TSIG [RFC2845].\n   Section 3.1 discusses a number of different kinds\
    \ of information that\n   a name server operator might choose to provide as the\
    \ value of the\n   NSID option.  Some of these kinds of information are security\n\
    \   sensitive in some environments.  This specification deliberately\n   leaves\
    \ the syntax and semantics of the NSID option content up to the\n   implementation\
    \ and the name server operator.\n   Two of the possible kinds of payload data\
    \ discussed in Section 3.1\n   involve a digital signature and encryption, respectively.\
    \  While this\n   specification discusses some of the pitfalls that might lurk\
    \ for\n   careless users of these kinds of payload data, full analysis of the\n\
    \   issues that would be involved in these kinds of payload data would\n   require\
    \ knowledge of the content to be signed or encrypted,\n   algorithms to be used,\
    \ and so forth, which is beyond the scope of\n   this document.  Implementors\
    \ should seek competent advice before\n   attempting to use these kinds of NSID\
    \ payloads.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   Thanks to: Joe Abley, Harald Alvestrand, Dean Anderson,\
    \ Mark Andrews,\n   Roy Arends, Steve Bellovin, Alex Bligh, Randy Bush, David\
    \ Conrad,\n   John Dickinson, Alfred Hoenes, Johan Ihren, Daniel Karrenberg, Peter\n\
    \   Koch, William Leibzon, Ed Lewis, Thomas Narten, Mike Patton, Geoffrey\n  \
    \ Sisson, Andrew Sullivan, Mike StJohns, Tom Taylor, Paul Vixie, Sam\n   Weiler,\
    \ and Suzanne Woolf, none of whom are responsible for what the\n   author did\
    \ with their comments and suggestions.  Apologies to anyone\n   inadvertently\
    \ omitted from the above list.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", RFC 2119, BCP 14, March\
    \ 1997.\n   [RFC2671]  Vixie, P., \"Extension Mechanisms for DNS (EDNS0)\",\n\
    \              RFC 2671, August 1999.\n   [RFC2845]  Vixie, P., Gudmundsson, O.,\
    \ Eastlake 3rd, D., and B.\n              Wellington, \"Secret Key Transaction\
    \ Authentication for DNS\n              (TSIG)\", RFC 2845, May 2000.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC2277]  Alvestrand, H., \"IETF Policy on\
    \ Character Sets and\n              Languages\", RFC 2277, BCP 18, January 1998.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Rob Austein\n   ISC\n   950 Charter Street\n   Redwood City,\
    \ CA  94063\n   USA\n   EMail: sra@isc.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
