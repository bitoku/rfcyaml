- contents:
  - '                     OAuth 2.0 Token Introspection

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This specification defines a method for a protected resource to
    query\n   an OAuth 2.0 authorization server to determine the active state of an\n
    \  OAuth 2.0 token and to determine meta-information about this token.\n   OAuth
    2.0 deployments can use this method to convey information about\n   the authorization
    context of the token from the authorization server\n   to the protected resource.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7662.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n     1.1.  Notational Conventions  . . . . . . . . . . . . . .
    . . .   3\n     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    .   3\n   2.  Introspection Endpoint  . . . . . . . . . . . . . . . . . . .   3\n
    \    2.1.  Introspection Request . . . . . . . . . . . . . . . . . .   4\n     2.2.
    \ Introspection Response  . . . . . . . . . . . . . . . . .   6\n     2.3.  Error
    Response  . . . . . . . . . . . . . . . . . . . . .   8\n   3.  IANA Considerations
    . . . . . . . . . . . . . . . . . . . . .   9\n     3.1.  OAuth Token Introspection
    Response Registry . . . . . . .   9\n       3.1.1.  Registration Template . .
    . . . . . . . . . . . . . .  10\n       3.1.2.  Initial Registry Contents . .
    . . . . . . . . . . . .  10\n   4.  Security Considerations . . . . . . . . .
    . . . . . . . . . .  12\n   5.  Privacy Considerations  . . . . . . . . . . .
    . . . . . . . .  14\n   6.  References  . . . . . . . . . . . . . . . . . . .
    . . . . . .  15\n     6.1.  Normative References  . . . . . . . . . . . . . .
    . . . .  15\n     6.2.  Informative References  . . . . . . . . . . . . . . .
    . .  16\n   Appendix A.  Use with Proof-of-Possession Tokens  . . . . . . . .
    \ 17\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  17\n
    \  Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  17\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   In OAuth 2.0 [RFC6749], the contents of tokens are opaque
    to clients.\n   This means that the client does not need to know anything about
    the\n   content or structure of the token itself, if there is any.  However,\n
    \  there is still a large amount of metadata that may be attached to a\n   token,
    such as its current validity, approved scopes, and information\n   about the context
    in which the token was issued.  These pieces of\n   information are often vital
    to protected resources making\n   authorization decisions based on the tokens
    being presented.  Since\n   OAuth 2.0 does not define a protocol for the resource
    server to learn\n   meta-information about a token that it has received from an\n
    \  authorization server, several different approaches have been\n   developed
    to bridge this gap.  These include using structured token\n   formats such as
    JWT [RFC7519] or proprietary inter-service\n   communication mechanisms (such
    as shared databases and protected\n   enterprise service buses) that convey token
    information.\n   This specification defines a protocol that allows authorized\n
    \  protected resources to query the authorization server to determine\n   the
    set of metadata for a given token that was presented to them by\n   an OAuth 2.0
    client.  This metadata includes whether or not the token\n   is currently active
    (or if it has expired or otherwise been revoked),\n   what rights of access the
    token carries (usually conveyed through\n   OAuth 2.0 scopes), and the authorization
    context in which the token\n   was granted (including who authorized the token
    and which client it\n   was issued to).  Token introspection allows a protected
    resource to\n   query this information regardless of whether or not it is carried
    in\n   the token itself, allowing this method to be used along with or\n   independently
    of structured token values.  Additionally, a protected\n   resource can use the
    mechanism described in this specification to\n   introspect the token in a particular
    authorization decision context\n   and ascertain the relevant metadata about the
    token to make this\n   authorization decision appropriately.\n"
  - contents:
    - "1.1.  Notational Conventions\n   The key words 'MUST', 'MUST NOT', 'REQUIRED',
      'SHALL', 'SHALL NOT',\n   'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
      'MAY', and\n   'OPTIONAL' in this document are to be interpreted as described
      in\n   [RFC2119].\n   Unless otherwise noted, all the protocol parameter names
      and values\n   are case sensitive.\n"
    title: 1.1.  Notational Conventions
  - contents:
    - "1.2.  Terminology\n   This section defines the terminology used by this specification.\n
      \  This section is a normative portion of this specification, imposing\n   requirements
      upon implementations.\n   This specification uses the terms \"access token\",
      \"authorization\n   endpoint\", \"authorization grant\", \"authorization server\",
      \"client\",\n   \"client identifier\", \"protected resource\", \"refresh token\",
      \"resource\n   owner\", \"resource server\", and \"token endpoint\" defined
      by OAuth 2.0\n   [RFC6749], and the terms \"claim names\" and \"claim values\"
      defined by\n   JSON Web Token (JWT) [RFC7519].\n   This specification defines
      the following terms:\n   Token Introspection\n      The act of inquiring about
      the current state of an OAuth 2.0 token\n      through use of the network protocol
      defined in this document.\n   Introspection Endpoint\n      The OAuth 2.0 endpoint
      through which the token introspection\n      operation is accomplished.\n"
    title: 1.2.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Introspection Endpoint\n   The introspection endpoint is an OAuth 2.0 endpoint
    that takes a\n   parameter representing an OAuth 2.0 token and returns a JSON\n
    \  [RFC7159] document representing the meta information surrounding the\n   token,
    including whether this token is currently active.  The\n   definition of an active
    token is dependent upon the authorization\n   server, but this is commonly a token
    that has been issued by this\n   authorization server, is not expired, has not
    been revoked, and is\n   valid for use at the protected resource making the introspection\n
    \  call.\n   The introspection endpoint MUST be protected by a transport-layer\n
    \  security mechanism as described in Section 4.  The means by which the\n   protected
    resource discovers the location of the introspection\n   endpoint are outside
    the scope of this specification.\n"
  - contents:
    - "2.1.  Introspection Request\n   The protected resource calls the introspection
      endpoint using an HTTP\n   POST [RFC7231] request with parameters sent as\n
      \  \"application/x-www-form-urlencoded\" data as defined in\n   [W3C.REC-html5-20141028].
      \ The protected resource sends a parameter\n   representing the token along
      with optional parameters representing\n   additional context that is known by
      the protected resource to aid the\n   authorization server in its response.\n
      \  token\n      REQUIRED.  The string value of the token.  For access tokens,
      this\n      is the \"access_token\" value returned from the token endpoint\n
      \     defined in OAuth 2.0 [RFC6749], Section 5.1.  For refresh tokens,\n      this
      is the \"refresh_token\" value returned from the token endpoint\n      as defined
      in OAuth 2.0 [RFC6749], Section 5.1.  Other token types\n      are outside the
      scope of this specification.\n   token_type_hint\n      OPTIONAL.  A hint about
      the type of the token submitted for\n      introspection.  The protected resource
      MAY pass this parameter to\n      help the authorization server optimize the
      token lookup.  If the\n      server is unable to locate the token using the
      given hint, it MUST\n      extend its search across all of its supported token
      types.  An\n      authorization server MAY ignore this parameter, particularly
      if it\n      is able to detect the token type automatically.  Values for this\n
      \     field are defined in the \"OAuth Token Type Hints\" registry defined\n
      \     in OAuth Token Revocation [RFC7009].\n   The introspection endpoint MAY
      accept other OPTIONAL parameters to\n   provide further context to the query.
      \ For instance, an authorization\n   server may desire to know the IP address
      of the client accessing the\n   protected resource to determine if the correct
      client is likely to be\n   presenting the token.  The definition of this or
      any other parameters\n   are outside the scope of this specification, to be
      defined by service\n   documentation or extensions to this specification.  If
      the\n   authorization server is unable to determine the state of the token\n
      \  without additional information, it SHOULD return an introspection\n   response
      indicating the token is not active as described in\n   Section 2.2.\n   To prevent
      token scanning attacks, the endpoint MUST also require\n   some form of authorization
      to access this endpoint, such as client\n   authentication as described in OAuth
      2.0 [RFC6749] or a separate\n   OAuth 2.0 access token such as the bearer token
      described in OAuth\n   2.0 Bearer Token Usage [RFC6750].  The methods of managing
      and\n   validating these authentication credentials are out of scope of this\n
      \  specification.\n   For example, the following shows a protected resource
      calling the\n   token introspection endpoint to query about an OAuth 2.0 bearer\n
      \  token.  The protected resource is using a separate OAuth 2.0 bearer\n   token
      to authorize this call.\n   The following is a non-normative example request:\n
      \    POST /introspect HTTP/1.1\n     Host: server.example.com\n     Accept:
      application/json\n     Content-Type: application/x-www-form-urlencoded\n     Authorization:
      Bearer 23410913-abewfq.123483\n     token=2YotnFZFEjr1zCsicMWpAA\n   In this
      example, the protected resource uses a client identifier and\n   client secret
      to authenticate itself to the introspection endpoint.\n   The protected resource
      also sends a token type hint indicating that\n   it is inquiring about an access
      token.\n   The following is a non-normative example request:\n     POST /introspect
      HTTP/1.1\n     Host: server.example.com\n     Accept: application/json\n     Content-Type:
      application/x-www-form-urlencoded\n     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\n
      \    token=mF_9.B5f-4.1JqM&token_type_hint=access_token\n"
    title: 2.1.  Introspection Request
  - contents:
    - "2.2.  Introspection Response\n   The server responds with a JSON object [RFC7159]
      in \"application/\n   json\" format with the following top-level members.\n
      \  active\n      REQUIRED.  Boolean indicator of whether or not the presented
      token\n      is currently active.  The specifics of a token's \"active\" state\n
      \     will vary depending on the implementation of the authorization\n      server
      and the information it keeps about its tokens, but a \"true\"\n      value return
      for the \"active\" property will generally indicate\n      that a given token
      has been issued by this authorization server,\n      has not been revoked by
      the resource owner, and is within its\n      given time window of validity (e.g.,
      after its issuance time and\n      before its expiration time).  See Section
      4 for information on\n      implementation of such checks.\n   scope\n      OPTIONAL.
      \ A JSON string containing a space-separated list of\n      scopes associated
      with this token, in the format described in\n      Section 3.3 of OAuth 2.0
      [RFC6749].\n   client_id\n      OPTIONAL.  Client identifier for the OAuth 2.0
      client that\n      requested this token.\n   username\n      OPTIONAL.  Human-readable
      identifier for the resource owner who\n      authorized this token.\n   token_type\n
      \     OPTIONAL.  Type of the token as defined in Section 5.1 of OAuth\n      2.0
      [RFC6749].\n   exp\n      OPTIONAL.  Integer timestamp, measured in the number
      of seconds\n      since January 1 1970 UTC, indicating when this token will
      expire,\n      as defined in JWT [RFC7519].\n   iat\n      OPTIONAL.  Integer
      timestamp, measured in the number of seconds\n      since January 1 1970 UTC,
      indicating when this token was\n      originally issued, as defined in JWT [RFC7519].\n
      \  nbf\n      OPTIONAL.  Integer timestamp, measured in the number of seconds\n
      \     since January 1 1970 UTC, indicating when this token is not to be\n      used
      before, as defined in JWT [RFC7519].\n   sub\n      OPTIONAL.  Subject of the
      token, as defined in JWT [RFC7519].\n      Usually a machine-readable identifier
      of the resource owner who\n      authorized this token.\n   aud\n      OPTIONAL.
      \ Service-specific string identifier or list of string\n      identifiers representing
      the intended audience for this token, as\n      defined in JWT [RFC7519].\n
      \  iss\n      OPTIONAL.  String representing the issuer of this token, as\n
      \     defined in JWT [RFC7519].\n   jti\n      OPTIONAL.  String identifier
      for the token, as defined in JWT\n      [RFC7519].\n   Specific implementations
      MAY extend this structure with their own\n   service-specific response names
      as top-level members of this JSON\n   object.  Response names intended to be
      used across domains MUST be\n   registered in the \"OAuth Token Introspection
      Response\" registry\n   defined in Section 3.1.\n   The authorization server
      MAY respond differently to different\n   protected resources making the same
      request.  For instance, an\n   authorization server MAY limit which scopes from
      a given token are\n   returned for each protected resource to prevent a protected
      resource\n   from learning more about the larger network than is necessary for
      its\n   operation.\n   The response MAY be cached by the protected resource
      to improve\n   performance and reduce load on the introspection endpoint, but
      at the\n   cost of liveness of the information used by the protected resource
      to\n   make authorization decisions.  See Section 4 for more information\n   regarding
      the trade off when the response is cached.\n   For example, the following response
      contains a set of information\n   about an active token:\n   The following is
      a non-normative example response:\n     HTTP/1.1 200 OK\n     Content-Type:
      application/json\n     {\n      \"active\": true,\n      \"client_id\": \"l238j323ds-23ij4\",\n
      \     \"username\": \"jdoe\",\n      \"scope\": \"read write dolphin\",\n      \"sub\":
      \"Z5O3upPC88QrAjx00dis\",\n      \"aud\": \"https://protected.example.net/resource\",\n
      \     \"iss\": \"https://server.example.com/\",\n      \"exp\": 1419356238,\n
      \     \"iat\": 1419350238,\n      \"extension_field\": \"twenty-seven\"\n     }\n
      \  If the introspection call is properly authorized but the token is not\n   active,
      does not exist on this server, or the protected resource is\n   not allowed
      to introspect this particular token, then the\n   authorization server MUST
      return an introspection response with the\n   \"active\" field set to \"false\".
      \ Note that to avoid disclosing too\n   much of the authorization server's state
      to a third party, the\n   authorization server SHOULD NOT include any additional
      information\n   about an inactive token, including why the token is inactive.\n
      \  The following is a non-normative example response for a token that\n   has
      been revoked or is otherwise invalid:\n     HTTP/1.1 200 OK\n     Content-Type:
      application/json\n     {\n      \"active\": false\n     }\n"
    title: 2.2.  Introspection Response
  - contents:
    - "2.3.  Error Response\n   If the protected resource uses OAuth 2.0 client credentials
      to\n   authenticate to the introspection endpoint and its credentials are\n
      \  invalid, the authorization server responds with an HTTP 401\n   (Unauthorized)
      as described in Section 5.2 of OAuth 2.0 [RFC6749].\n   If the protected resource
      uses an OAuth 2.0 bearer token to authorize\n   its call to the introspection
      endpoint and the token used for\n   authorization does not contain sufficient
      privileges or is otherwise\n   invalid for this request, the authorization server
      responds with an\n   HTTP 401 code as described in Section 3 of OAuth 2.0 Bearer
      Token\n   Usage [RFC6750].\n   Note that a properly formed and authorized query
      for an inactive or\n   otherwise invalid token (or a token the protected resource
      is not\n   allowed to know about) is not considered an error response by this\n
      \  specification.  In these cases, the authorization server MUST instead\n   respond
      with an introspection response with the \"active\" field set to\n   \"false\"
      as described in Section 2.2.\n"
    title: 2.3.  Error Response
  title: 2.  Introspection Endpoint
- contents:
  - '3.  IANA Considerations

    '
  - contents:
    - "3.1.  OAuth Token Introspection Response Registry\n   This specification establishes
      the \"OAuth Token Introspection\n   Response\" registry.\n   OAuth registration
      client metadata names and descriptions are\n   registered by Specification Required
      [RFC5226] after a two-week\n   review period on the oauth-ext-review@ietf.org
      mailing list, on the\n   advice of one or more Designated Experts.  However,
      to allow for the\n   allocation of names prior to publication, the Designated
      Expert(s)\n   may approve registration once they are satisfied that such a\n
      \  specification will be published.\n   Registration requests sent to the mailing
      list for review should use\n   an appropriate subject (e.g., \"Request to register
      OAuth Token\n   Introspection Response name: example\").\n   Within the review
      period, the Designated Expert(s) will either\n   approve or deny the registration
      request, communicating this decision\n   to the review list and IANA.  Denials
      should include an explanation\n   and, if applicable, suggestions as to how
      to make the request\n   successful.\n   IANA must only accept registry updates
      from the Designated Expert(s)\n   and should direct all requests for registration
      to the review mailing\n   list.\n"
    - contents:
      - "3.1.1.  Registration Template\n   Name:\n      The name requested (e.g.,
        \"example\").  This name is case\n      sensitive.  Names that match other
        registered names in a case\n      insensitive manner SHOULD NOT be accepted.
        \ Names that match\n      claims registered in the \"JSON Web Token Claims\"
        registry\n      established by [RFC7519] SHOULD have comparable definitions
        and\n      semantics.\n   Description:\n      Brief description of the metadata
        value (e.g., \"Example\n      description\").\n   Change controller:\n      For
        Standards Track RFCs, state \"IESG\".  For other documents, give\n      the
        name of the responsible party.  Other details (e.g., postal\n      address,
        email address, home page URI) may also be included.\n   Specification document(s):\n
        \     Reference to the document(s) that specify the token endpoint\n      authorization
        method, preferably including a URI that can be used\n      to retrieve a copy
        of the document(s).  An indication of the\n      relevant sections may also
        be included but is not required.\n"
      title: 3.1.1.  Registration Template
    - contents:
      - "3.1.2.  Initial Registry Contents\n   The initial contents of the \"OAuth
        Token Introspection Response\"\n   registry are as follows:\n   o  Name: \"active\"\n
        \  o  Description: Token active status\n   o  Change Controller: IESG\n   o
        \ Specification Document(s): Section 2.2 of RFC 7662 (this\n      document).\n
        \  o  Name: \"username\"\n   o  Description: User identifier of the resource
        owner\n   o  Change Controller: IESG\n   o  Specification Document(s): Section
        2.2 of RFC 7662 (this\n      document).\n   o  Name: \"client_id\"\n   o  Description:
        Client identifier of the client\n   o  Change Controller: IESG\n   o  Specification
        Document(s): Section 2.2 of RFC 7662 (this\n      document).\n   o  Name:
        \"scope\"\n   o  Description: Authorized scopes of the token\n   o  Change
        Controller: IESG\n   o  Specification Document(s): Section 2.2 of RFC 7662
        (this\n      document).\n   o  Name: \"token_type\"\n   o  Description: Type
        of the token\n   o  Change Controller: IESG\n   o  Specification Document(s):
        Section 2.2 of RFC 7662 (this\n      document).\n   o  Name: \"exp\"\n   o
        \ Description: Expiration timestamp of the token\n   o  Change Controller:
        IESG\n   o  Specification Document(s): Section 2.2 of RFC 7662 (this\n      document).\n
        \  o  Name: \"iat\"\n   o  Description: Issuance timestamp of the token\n
        \  o  Change Controller: IESG\n   o  Specification Document(s): Section 2.2
        of RFC 7662 (this\n      document).\n   o  Name: \"nbf\"\n   o  Description:
        Timestamp before which the token is not valid\n   o  Change Controller: IESG\n
        \  o  Specification Document(s): Section 2.2 of RFC 7662 (this\n      document).\n
        \  o  Name: \"sub\"\n   o  Description: Subject of the token\n   o  Change
        Controller: IESG\n   o  Specification Document(s): Section 2.2 of RFC 7662
        (this\n      document).\n   o  Name: \"aud\"\n   o  Description: Audience
        of the token\n   o  Change Controller: IESG\n   o  Specification Document(s):
        Section 2.2 of RFC 7662 (this\n      document).\n   o  Name: \"iss\"\n   o
        \ Description: Issuer of the token\n   o  Change Controller: IESG\n   o  Specification
        Document(s): Section 2.2 of RFC 7662 (this\n      document).\n   o  Name:
        \"jti\"\n   o  Description: Unique identifier of the token\n   o  Change Controller:
        IESG\n   o  Specification Document(s): Section 2.2 of RFC 7662 (this\n      document).\n"
      title: 3.1.2.  Initial Registry Contents
    title: 3.1.  OAuth Token Introspection Response Registry
  title: 3.  IANA Considerations
- contents:
  - "4.  Security Considerations\n   Since there are many different and valid ways
    to implement an OAuth\n   2.0 system, there are consequently many ways for an
    authorization\n   server to determine whether or not a token is currently \"active\".\n
    \  However, since resource servers using token introspection rely on the\n   authorization
    server to determine the state of a token, the\n   authorization server MUST perform
    all applicable checks against a\n   token's state.  For instance, these tests
    include the following:\n   o  If the token can expire, the authorization server
    MUST determine\n      whether or not the token has expired.\n   o  If the token
    can be issued before it is able to be used, the\n      authorization server MUST
    determine whether or not a token's valid\n      period has started yet.\n   o
    \ If the token can be revoked after it was issued, the authorization\n      server
    MUST determine whether or not such a revocation has taken\n      place.\n   o
    \ If the token has been signed, the authorization server MUST\n      validate
    the signature.\n   o  If the token can be used only at certain resource servers,
    the\n      authorization server MUST determine whether or not the token can\n
    \     be used at the resource server making the introspection call.\n   If an
    authorization server fails to perform any applicable check, the\n   resource server
    could make an erroneous security decision based on\n   that response.  Note that
    not all of these checks will be applicable\n   to all OAuth 2.0 deployments and
    it is up to the authorization server\n   to determine which of these checks (and
    any other checks) apply.\n   If left unprotected and un-throttled, the introspection
    endpoint\n   could present a means for an attacker to poll a series of possible\n
    \  token values, fishing for a valid token.  To prevent this, the\n   authorization
    server MUST require authentication of protected\n   resources that need to access
    the introspection endpoint and SHOULD\n   require protected resources to be specifically
    authorized to call the\n   introspection endpoint.  The specifics of such authentication\n
    \  credentials are out of scope of this specification, but commonly\n   these
    credentials could take the form of any valid client\n   authentication mechanism
    used with the token endpoint, an OAuth 2.0\n   access token, or other HTTP authorization
    or authentication\n   mechanism.  A single piece of software acting as both a
    client and a\n   protected resource MAY reuse the same credentials between the
    token\n   endpoint and the introspection endpoint, though doing so potentially\n
    \  conflates the activities of the client and protected resource\n   portions
    of the software and the authorization server MAY require\n   separate credentials
    for each mode.\n   Since the introspection endpoint takes in OAuth 2.0 tokens
    as\n   parameters and responds with information used to make authorization\n   decisions,
    the server MUST support Transport Layer Security (TLS) 1.2\n   [RFC5246] and MAY
    support additional transport-layer mechanisms\n   meeting its security requirements.
    \ When using TLS, the client or\n   protected resource MUST perform a TLS/SSL
    server certificate check,\n   as specified in [RFC6125].  Implementation security
    considerations\n   can be found in Recommendations for Secure Use of TLS and DTLS\n
    \  [BCP195].\n   To prevent the values of access tokens from leaking into server-side\n
    \  logs via query parameters, an authorization server offering token\n   introspection
    MAY disallow the use of HTTP GET on the introspection\n   endpoint and instead
    require the HTTP POST method to be used at the\n   introspection endpoint.\n   To
    avoid disclosing the internal state of the authorization server,\n   an introspection
    response for an inactive token SHOULD NOT contain\n   any additional claims beyond
    the required \"active\" claim (with its\n   value set to \"false\").\n   Since
    a protected resource MAY cache the response of the\n   introspection endpoint,
    designers of an OAuth 2.0 system using this\n   protocol MUST consider the performance
    and security trade-offs\n   inherent in caching security information such as this.
    \ A less\n   aggressive cache with a short timeout will provide the protected\n
    \  resource with more up-to-date information (due to it needing to query\n   the
    introspection endpoint more often) at the cost of increased\n   network traffic
    and load on the introspection endpoint.  A more\n   aggressive cache with a longer
    duration will minimize network traffic\n   and load on the introspection endpoint,
    but at the risk of stale\n   information about the token.  For example, the token
    may be revoked\n   while the protected resource is relying on the value of the
    cached\n   response to make authorization decisions.  This creates a window\n
    \  during which a revoked token could be used at the protected resource.\n   Consequently,
    an acceptable cache validity duration needs to be\n   carefully considered given
    the concerns and sensitivities of the\n   protected resource being accessed and
    the likelihood of a token being\n   revoked or invalidated in the interim period.
    \ Highly sensitive\n   environments can opt to disable caching entirely on the
    protected\n   resource to eliminate the risk of stale cached information entirely,\n
    \  again at the cost of increased network traffic and server load.  If\n   the
    response contains the \"exp\" parameter (expiration), the response\n   MUST NOT
    be cached beyond the time indicated therein.\n   An authorization server offering
    token introspection must be able to\n   understand the token values being presented
    to it during this call.\n   The exact means by which this happens is an implementation
    detail and\n   is outside the scope of this specification.  For unstructured tokens,\n
    \  this could take the form of a simple server-side database query\n   against
    a data store containing the context information for the\n   token.  For structured
    tokens, this could take the form of the server\n   parsing the token, validating
    its signature or other protection\n   mechanisms, and returning the information
    contained in the token back\n   to the protected resource (allowing the protected
    resource to be\n   unaware of the token's contents, much like the client).  Note
    that\n   for tokens carrying encrypted information that is needed during the\n
    \  introspection process, the authorization server must be able to\n   decrypt
    and validate the token to access this information.  Also note\n   that in cases
    where the authorization server stores no information\n   about the token and has
    no means of accessing information about the\n   token by parsing the token itself,
    it cannot likely offer an\n   introspection service.\n"
  title: 4.  Security Considerations
- contents:
  - "5.  Privacy Considerations\n   The introspection response may contain privacy-sensitive
    information\n   such as user identifiers for resource owners.  When this is the
    case,\n   measures MUST be taken to prevent disclosure of this information to\n
    \  unintended parties.  One method is to transmit user identifiers as\n   opaque
    service-specific strings, potentially returning different\n   identifiers to each
    protected resource.\n   If the protected resource sends additional information
    about the\n   client's request to the authorization server (such as the client's
    IP\n   address) using an extension of this specification, such information\n   could
    have additional privacy considerations that the extension\n   should detail.  However,
    the nature and implications of such\n   extensions are outside the scope of this
    specification.\n   Omitting privacy-sensitive information from an introspection
    response\n   is the simplest way of minimizing privacy issues.\n"
  title: 5.  Privacy Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226,
      May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC5246]
      \ Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC6125]
      \ Saint-Andre, P. and J. Hodges, \"Representation and\n              Verification
      of Domain-Based Application Service Identity\n              within Internet
      Public Key Infrastructure Using X.509\n              (PKIX) Certificates in
      the Context of Transport Layer\n              Security (TLS)\", RFC 6125, DOI
      10.17487/RFC6125, March\n              2011, <http://www.rfc-editor.org/info/rfc6125>.\n
      \  [RFC6749]  Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\",\n              RFC
      6749, DOI 10.17487/RFC6749, October 2012,\n              <http://www.rfc-editor.org/info/rfc6749>.\n
      \  [RFC6750]  Jones, M. and D. Hardt, \"The OAuth 2.0 Authorization\n              Framework:
      Bearer Token Usage\", RFC 6750,\n              DOI 10.17487/RFC6750, October
      2012,\n              <http://www.rfc-editor.org/info/rfc6750>.\n   [RFC7009]
      \ Lodderstedt, T., Ed., Dronia, S., and M. Scurtescu, \"OAuth\n              2.0
      Token Revocation\", RFC 7009, DOI 10.17487/RFC7009,\n              August 2013,
      <http://www.rfc-editor.org/info/rfc7009>.\n   [RFC7159]  Bray, T., Ed., \"The
      JavaScript Object Notation (JSON) Data\n              Interchange Format\",
      RFC 7159, DOI 10.17487/RFC7159, March\n              2014, <http://www.rfc-editor.org/info/rfc7159>.\n
      \  [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n
      \             Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n              DOI
      10.17487/RFC7231, June 2014,\n              <http://www.rfc-editor.org/info/rfc7231>.\n
      \  [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token\n              (JWT)\",
      RFC 7519, DOI 10.17487/RFC7519, May 2015,\n              <http://www.rfc-editor.org/info/rfc7519>.\n
      \  [W3C.REC-html5-20141028]\n              Hickson, I., Berjon, R., Faulkner,
      S., Leithead, T.,\n              Navara, E., 0'Connor, E., and S. Pfeiffer,
      \"HTML5\", World\n              Wide Web Consortium Recommendation\n              REC-html5-20141028,
      October 2014,\n              <http://www.w3.org/TR/2014/REC-html5-20141028>.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [BCP195]   Sheffer, Y., Holz, R., and P. Saint-Andre,\n
      \             \"Recommendations for Secure Use of Transport Layer\n              Security
      (TLS) and Datagram Transport Layer Security\n              (DTLS)\", BCP 195,
      RFC 7525, May 2015,\n              <http://www.rfc-editor.org/info/bcp195>.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Appendix A.  Use with Proof-of-Possession Tokens\n   With bearer tokens such
    as those defined by OAuth 2.0 Bearer Token\n   Usage [RFC6750], the protected
    resource will have in its possession\n   the entire secret portion of the token
    for submission to the\n   introspection service.  However, for proof-of-possession
    style\n   tokens, the protected resource will have only a token identifier used\n
    \  during the request, along with the cryptographic signature on the\n   request.
    \ To validate the signature on the request, the protected\n   resource could be
    able to submit the token identifier to the\n   authorization server's introspection
    endpoint to obtain the necessary\n   key information needed for that token.  The
    details of this usage are\n   outside the scope of this specification and will
    be defined in an\n   extension to this specification in concert with the definition
    of\n   proof-of-possession tokens.\n"
  title: Appendix A.  Use with Proof-of-Possession Tokens
- contents:
  - "Acknowledgements\n   Thanks to the OAuth Working Group and the User Managed Access
    Working\n   Group for feedback and review of this document, and to the various\n
    \  implementors of both the client and server components of this\n   specification.
    \ In particular, the author would like to thank Amanda\n   Anganes, John Bradley,
    Thomas Broyer, Brian Campbell, George\n   Fletcher, Paul Freemantle, Thomas Hardjono,
    Eve Maler, Josh Mandel,\n   Steve Moore, Mike Schwartz, Prabath Siriwardena, Sarah
    Squire, and\n   Hannes Tschofennig.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Justin Richer (editor)\n   Email: ietf@justin.richer.org\n"
  title: Author's Address
