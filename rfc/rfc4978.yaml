- title: __initial_text__
  contents:
  - '                      The IMAP COMPRESS Extension

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The COMPRESS extension allows an IMAP connection to be effectively\n\
    \   and efficiently compressed.\n   Table of Contents\n   1. Introduction and\
    \ Overview .......................................2\n   2. Conventions Used in\
    \ This Document ...............................2\n   3. The COMPRESS Command ............................................3\n\
    \   4. Compression Efficiency ..........................................4\n  \
    \ 5. Formal Syntax ...................................................6\n   6.\
    \ Security Considerations .........................................6\n   7. IANA\
    \ Considerations .............................................6\n   8. Acknowledgements\
    \ ................................................7\n   9. References ......................................................7\n\
    \      9.1. Normative References .......................................7\n  \
    \    9.2. Informative References .....................................7\n"
- title: 1.  Introduction and Overview
  contents:
  - "1.  Introduction and Overview\n   A server which supports the COMPRESS extension\
    \ indicates this with\n   one or more capability names consisting of \"COMPRESS=\"\
    \ followed by a\n   supported compression algorithm name as described in this\
    \ document.\n   The goal of COMPRESS is to reduce the bandwidth usage of IMAP.\n\
    \   Compared to PPP compression (see [RFC1962]) and modem-based\n   compression\
    \ (see [MNP] and [V42BIS]), COMPRESS offers much better\n   compression efficiency.\
    \  COMPRESS can be used together with Transport\n   Security Layer (TLS) [RFC4346],\
    \ Simple Authentication and Security\n   layer (SASL) encryption, Virtual Private\
    \ Networks (VPNs), etc.\n   Compared to TLS compression [RFC3749], COMPRESS has\
    \ the following\n   (dis)advantages:\n   - COMPRESS can be implemented easily\
    \ both by IMAP servers and\n     clients.\n   - IMAP COMPRESS benefits from an\
    \ intimate knowledge of the IMAP\n     protocol's state machine, allowing for\
    \ dynamic and aggressive\n     optimization of the underlying compression algorithm's\
    \ parameters.\n   - When the TLS layer implements compression, any protocol using\
    \ that\n     layer can transparently benefit from that compression (e.g., SMTP\n\
    \     and IMAP).  COMPRESS is specific to IMAP.\n   In order to increase interoperation,\
    \ it is desirable to have as few\n   different compression algorithms as possible,\
    \ so this document\n   specifies only one.  The DEFLATE algorithm (defined in\
    \ [RFC1951]) is\n   standard, widely available and fairly efficient, so it is\
    \ the only\n   algorithm defined by this document.\n   In order to increase interoperation,\
    \ IMAP servers that advertise this\n   extension SHOULD also advertise the TLS\
    \ DEFLATE compression mechanism\n   as defined in [RFC3749].  IMAP clients MAY\
    \ use either COMPRESS or TLS\n   compression, however, if the client and server\
    \ support both, it is\n   RECOMMENDED that the client choose TLS compression.\n\
    \   The extension adds one new command (COMPRESS) and no new responses.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   Formal syntax is defined by [RFC4234] as modified by [RFC3501].\n\
    \   In the examples, \"C:\" and \"S:\" indicate lines sent by the client and\n\
    \   server respectively. \"[...]\" denotes elision.\n"
- title: 3.  The COMPRESS Command
  contents:
  - "3.  The COMPRESS Command\n   Arguments: Name of compression mechanism: \"DEFLATE\"\
    .\n   Responses: None\n   Result: OK The server will compress its responses and\
    \ expects the\n              client to compress its commands.\n           NO Compression\
    \ is already active via another layer.\n          BAD Command unknown, invalid\
    \ or unknown argument, or COMPRESS\n              already active.\n   The COMPRESS\
    \ command instructs the server to use the named\n   compression mechanism (\"\
    DEFLATE\" is the only one defined) for all\n   commands and/or responses after\
    \ COMPRESS.\n   The client MUST NOT send any further commands until it has seen\
    \ the\n   result of COMPRESS.  If the response was OK, the client MUST compress\n\
    \   starting with the first command after COMPRESS.  If the server\n   response\
    \ was BAD or NO, the client MUST NOT turn on compression.\n   If the server responds\
    \ NO because it knows that the same mechanism is\n   active already (e.g., because\
    \ TLS has negotiated the same mechanism),\n   it MUST send COMPRESSIONACTIVE as\
    \ resp-text-code (see [RFC3501],\n   Section 7.1), and the resp-text SHOULD say\
    \ which layer compresses.\n   If the server issues an OK response, the server\
    \ MUST compress\n   starting immediately after the CRLF which ends the tagged\
    \ OK\n   response.  (Responses issued by the server before the OK response\n \
    \  will, of course, still be uncompressed.)  If the server issues a BAD\n   or\
    \ NO response, the server MUST NOT turn on compression.\n   For DEFLATE (as for\
    \ many other compression mechanisms), the\n   compressor can trade speed against\
    \ quality.  When decompressing there\n   isn't much of a tradeoff.  Consequently,\
    \ the client and server are\n   both free to pick the best reasonable rate of\
    \ compression for the\n   data they send.\n   When COMPRESS is combined with TLS\
    \ (see [RFC4346]) or SASL (see\n   [RFC4422]) security layers, the sending order\
    \ of the three extensions\n   MUST be first COMPRESS, then SASL, and finally TLS.\
    \  That is, before\n   data is transmitted it is first compressed.  Second, if\
    \ a SASL\n   security layer has been negotiated, the compressed data is then\n\
    \   signed and/or encrypted accordingly.  Third, if a TLS security layer\n   has\
    \ been negotiated, the data from the previous step is signed and/or\n   encrypted\
    \ accordingly.  When receiving data, the processing order\n   MUST be reversed.\
    \  This ensures that before sending, data is\n   compressed before it is encrypted,\
    \ independent of the order in which\n   the client issues COMPRESS, AUTHENTICATE,\
    \ and STARTTLS.\n   The following example illustrates how commands and responses\
    \ are\n   compressed during a simple login sequence:\n        S: * OK [CAPABILITY\
    \ IMAP4REV1 STARTTLS COMPRESS=DEFLATE]\n        C: a starttls\n        S: a OK\
    \ TLS active\n            From this point on, everything is encrypted.\n     \
    \   C: b login arnt tnra\n        S: b OK Logged in as arnt\n        C: c compress\
    \ deflate\n        S: d OK DEFLATE active\n            From this point on, everything\
    \ is compressed before being\n            encrypted.\n   The following example\
    \ demonstrates how a server may refuse to\n   compress twice:\n        S: * OK\
    \ [CAPABILITY IMAP4REV1 STARTTLS COMPRESS=DEFLATE]\n        [...]\n        C:\
    \ c compress deflate\n        S: c NO [COMPRESSIONACTIVE] DEFLATE active via TLS\n"
- title: 4.  Compression Efficiency
  contents:
  - "4.  Compression Efficiency\n   This section is informative, not normative.\n\
    \   IMAP poses some unusual problems for a compression layer.\n   Upstream is\
    \ fairly simple.  Most IMAP clients send the same few\n   commands again and again,\
    \ so any compression algorithm that can\n   exploit repetition works efficiently.\
    \  The APPEND command is an\n   exception; clients that send many APPEND commands\
    \ may want to\n   surround large literals with flushes in the same way as is\n\
    \   recommended for servers later in this section.\n   Downstream has the unusual\
    \ property that several kinds of data are\n   sent, confusing all dictionary-based\
    \ compression algorithms.\n   One type is IMAP responses.  These are highly compressible;\
    \ zlib\n   using its least CPU-intensive setting compresses typical responses\
    \ to\n   25-40% of their original size.\n   Another type is email headers.  These\
    \ are equally compressible, and\n   benefit from using the same dictionary as\
    \ the IMAP responses.\n   A third type is email body text.  Text is usually fairly\
    \ short and\n   includes much ASCII, so the same compression dictionary will do\
    \ a\n   good job here, too.  When multiple messages in the same thread are\n \
    \  read at the same time, quoted lines etc. can often be compressed\n   almost\
    \ to zero.\n   Finally, attachments (non-text email bodies) are transmitted, either\n\
    \   in binary form or encoded with base-64.\n   When attachments are retrieved\
    \ in binary form, DEFLATE may be able to\n   compress them, but the format of\
    \ the attachment is usually not IMAP-\n   like, so the dictionary built while\
    \ compressing IMAP does not help.\n   The compressor has to adapt its dictionary\
    \ from IMAP to the\n   attachment's format, and then back.  A few file formats\
    \ aren't\n   compressible at all using deflate, e.g., .gz, .zip, and .jpg files.\n\
    \   When attachments are retrieved in base-64 form, the same problems\n   apply,\
    \ but the base-64 encoding adds another problem.  8-bit\n   compression algorithms\
    \ such as deflate work well on 8-bit file\n   formats, however base-64 turns a\
    \ file into something resembling 6-bit\n   bytes, hiding most of the 8-bit file\
    \ format from the compressor.\n   When using the zlib library (see [RFC1951]),\
    \ the functions\n   deflateInit2(), deflate(), inflateInit2(), and inflate() suffice\
    \ to\n   implement this extension.  The windowBits value must be in the range\n\
    \   -8 to -15, or else deflateInit2() uses the wrong format.\n   deflateParams()\
    \ can be used to improve compression rate and resource\n   use.  The Z_FULL_FLUSH\
    \ argument to deflate() can be used to clear the\n   dictionary (the receiving\
    \ peer does not need to do anything).\n   A client can improve downstream compression\
    \ by implementing BINARY\n   (defined in [RFC3516]) and using FETCH BINARY instead\
    \ of FETCH BODY.\n   In the author's experience, the improvement ranges from 5%\
    \ to 40%\n   depending on the attachment being downloaded.\n   A server can improve\
    \ downstream compression if it hints to the\n   compressor that the data type\
    \ is about to change strongly, e.g., by\n   sending a Z_FULL_FLUSH at the start\
    \ and end of large non-text\n   literals (before and after '*CHAR8' in the definition\
    \ of literal in\n   RFC 3501, page 86).  Small literals are best left alone. \
    \ A possible\n   boundary is 5k.\n   A server can improve the CPU efficiency both\
    \ of the server and the\n   client if it adjusts the compression level (e.g.,\
    \ using the\n   deflateParams() function in zlib) at these points, to avoid trying\
    \ to\n   compress incompressible attachments.  A very simple strategy is to\n\
    \   change the level to 0 at the start of a literal provided the first\n   two\
    \ bytes are either 0x1F 0x8B (as in deflate-compressed files) or\n   0xFF 0xD8\
    \ (JPEG), and to keep it at 1-5 the rest of the time.  More\n   complex strategies\
    \ are possible.\n"
- title: 5.  Formal Syntax
  contents:
  - "5.  Formal Syntax\n   The following syntax specification uses the Augmented Backus-Naur\n\
    \   Form (ABNF) notation as specified in [RFC4234].  This syntax augments\n  \
    \ the grammar specified in [RFC3501].  [RFC4234] defines SP and\n   [RFC3501]\
    \ defines command-auth, capability, and resp-text-code.\n   Except as noted otherwise,\
    \ all alphabetic characters are case-\n   insensitive.  The use of upper or lower\
    \ case characters to define\n   token strings is for editorial clarity only. \
    \ Implementations MUST\n   accept these strings in a case-insensitive fashion.\n\
    \       command-auth =/ compress\n       compress    = \"COMPRESS\" SP algorithm\n\
    \       capability  =/ \"COMPRESS=\" algorithm\n                     ;; multiple\
    \ COMPRESS capabilities allowed\n       algorithm   = \"DEFLATE\"\n       resp-text-code\
    \ =/ \"COMPRESSIONACTIVE\"\n   Note that due the syntax of capability names, future\
    \ algorithm names\n   must be atoms.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   As for TLS compression [RFC3749].\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   The IANA has added COMPRESS=DEFLATE to the list of\
    \ IMAP capabilities.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   Eric Burger, Dave Cridland, Tony Finch, Ned Freed, Philip\
    \ Guenther,\n   Randall Gellens, Tony Hansen, Cullen Jennings, Stephane Maes,\
    \ Alexey\n   Melnikov, Lyndon Nerenberg, and Zoltan Ordogh have all helped with\n\
    \   this document.\n   The author would also like to thank various people in the\
    \ rooms at\n   meetings, whose help is real, but not reflected in the author's\n\
    \   mailbox.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC1951]  Deutsch, P., \"DEFLATE Compressed Data\
    \ Format Specification\n              version 1.3\", RFC 1951, May 1996.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3501]  Crispin, M., \"INTERNET\
    \ MESSAGE ACCESS PROTOCOL - VERSION\n              4rev1\", RFC 3501, March 2003.\n\
    \   [RFC4234]  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n      \
    \        Specifications: ABNF\", RFC 4234, October 2005.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC1962]  Rand, D., \"The PPP Compression Control\
    \ Protocol (CCP)\",\n              RFC 1962, June 1996.\n   [RFC3516]  Nerenberg,\
    \ L., \"IMAP4 Binary Content Extension\", RFC 3516,\n              April 2003.\n\
    \   [RFC3749]  Hollenbeck, S., \"Transport Layer Security Protocol\n         \
    \     Compression Methods\", RFC 3749, May 2004.\n   [RFC4346]  Dierks, T. and\
    \ E. Rescorla, \"The Transport Layer Security\n              (TLS) Protocol Version\
    \ 1.1\", RFC 4346, April 2006.\n   [RFC4422]  Melnikov, A. and  K. Zeilenga, \"\
    Simple Authentication and\n              Security Layer (SASL)\", RFC 4422, June\
    \ 2006.\n   [V42BIS]   ITU, \"V.42bis: Data compression procedures for data\n\
    \              circuit-terminating equipment (DCE) using error correction\n  \
    \            procedures\", http://www.itu.int/rec/T-REC-V.42bis, January\n   \
    \           1990.\n   [MNP]      Gilbert Held, \"The Complete Modem Reference\"\
    , Second\n              Edition, Wiley Professional Computing, ISBN 0-471-00852-4,\n\
    \              May 1994.\n"
- title: Author's Address
  contents:
  - "Author's Address\n    Arnt Gulbrandsen\n    Oryx Mail Systems GmbH\n    Schweppermannstr.\
    \ 8\n    D-81671 Muenchen\n    Germany\n    Fax: +49 89 4502 9758\n    EMail:\
    \ arnt@oryx.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
