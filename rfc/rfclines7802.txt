Abstract This document defines the Pseudo Random Function (PRF) for the Kerberos V mechanism for the Generic Security Service Application Program Interface (GSS API), based on the PRF defined for the Kerberos V cryptographic framework, for keying application protocols given an established Kerberos V GSS API security context.
This document obsoletes RFC 4402 and reclassifies that document as Historic.
RFC 4402 starts the PRF  counter at 1; however, a number of implementations start the counter at 0.
As a result, the original specification would not be interoperable with existing implementations.
This document specifies the Kerberos V GSS API mechanism's [RFC4121] pseudo random function corresponding to [RFC4401].
The function is a "PRF " style construction.
For more information, see [RFC4401], [RFC2743], [RFC2744], and [RFC4121].
This document obsoletes RFC 4402 and reclassifies that document as Historic.
RFC 4402 starts the PRF  counter at 1; however, a number of implementations start the counter at 0.
As a result, the original specification would not be interoperable with existing implementations.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
Kerberos V GSS Mechanism PRF
The GSS API PRF [RFC4401] function for the Kerberos V mechanism [RFC4121] shall be the output of a PRF  function based on the encryption type's PRF function keyed with the negotiated session key of the security context corresponding to the 'prf key' input parameter of GSS Pseudo
This PRF  MUST be keyed with the key indicated by the 'prf key' input parameter as follows:
GSS C PRF KEY FULL   use the sub session key asserted by the acceptor (if any exists), or the sub session asserted by the initiator (if any exists), or the Ticket's session key.
KEY PARTIAL   use the sub session key asserted by the initiator (if any exists) or the Ticket's session key.
The PRF  function is a simple counter based extension of the Kerberos V pseudo random function [RFC3961] for the encryption type of the security context's keys: PRF (K, L, S)
truncates the input octet string S to length L, and pseudo random()
is the Kerberos V pseudo  random function [RFC3961].
The maximum output size of the Kerberos V mechanism's GSS API PRF then is, necessarily, 2^32 times the output size of the pseudo
random() function for the encryption type of the given key.
When the input size is longer than 2^14 octets as per [RFC4401] and exceeds an implementation's resources, then the mechanism MUST return GSS S FAILURE and GSS KRB5 S KG
TOO LONG as the minor status code.
This document has no IANA considerations currently.
If and when a relevant IANA registry of GSS API symbols and constants is created, then the GSS KRB5 S KG INPUT TOO LONG minor status code should be added to such a registry.
Security Considerations Kerberos V encryption types' PRF functions use a key derived from contexts' session keys and should preserve the forward security properties of the mechanisms' key exchanges.
Legacy Kerberos V encryption types may be weak, particularly the single DES encryption types.
See also [RFC4401] for generic security considerations of GSS Pseudo random().
See also [RFC3961] for generic security considerations of the Kerberos V cryptographic framework.
Use of Ticket session keys, rather than sub session keys, when initiators and acceptors fail to assert sub session keys, is dangerous as ticket reuse can lead to key reuse; therefore, initiators should assert sub session keys always, and acceptors should assert sub session keys at least when initiators fail to do so.
The computational cost of computing this PRF  may vary depending on the Kerberos V encryption types being used, but generally the computation of this PRF  gets more expensive as the input and output octet string lengths grow (note that the use of a counter in the PRF  construction allows for parallelization).
Appendix A.  Test Vectors Here are some test vectors from the MIT implementation provided by Greg Hudson.
Test cases used include input string lengths of 0 and 61 bytes, and an output length of 44 bytes.
61 bytes of input is just enough to produce a partial second MD5 or SHA1 hash block with the four byte counter prefix.
44 bytes of output requires two full and one partial RFC 3961 PRF output for all existing enctypes.
All keys were randomly generated.
rc4 hmac Key: 3BB3AE288C12B3B9D06B208A4151B3B6 Input: (empty string)
aes128 cts hmac sha1 96
Key: 6C742096EB896230312B73972FA28B5D Input: (empty string)
aes128 cts hmac sha1 96
aes256 cts hmac sha1 96
aes256 cts hmac sha1 96
Key: 866E0466A178279A32AC0BDA92B72AEB Input: (empty string)
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz123456789 Output: 1DEE2FF126CA563A2A2326B9DD3F0095013257414C83 FAD4398901013D55F367C82681186B7B2FE62F746BA4 Enctype:
