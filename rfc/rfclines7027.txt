Abstract This document specifies the use of several Elliptic Curve Cryptography (ECC)
Brainpool curves for authentication and key exchange in the Transport Layer Security (TLS) protocol.
Introduction [RFC5639] specifies a new set of elliptic curve groups over finite prime fields for use in cryptographic applications.
These groups, denoted as ECC Brainpool curves, were generated in a verifiably pseudo random way and comply with the security requirements of relevant standards from ISO [ISO1] [ISO2], ANSI [ANSI1], NIST [FIPS], and SecG [SEC2].
[RFC4492] defines the usage of elliptic curves for authentication and key agreement in TLS 1.0 and TLS 1.1; these mechanisms may also be used with TLS 1.2 [RFC5246].
While the ASN.1 object identifiers defined in [RFC5639] already allow usage of the ECC Brainpool curves for TLS (client or server)
authentication through reference in X.509 certificates according to [RFC3279] and [RFC5480], their negotiation for key exchange according to [RFC4492] requires the definition and assignment of additional NamedCurve IDs.
This document specifies such values for three curves from [RFC5639].
According to [RFC4492], the name space NamedCurve is used for the negotiation of elliptic curve groups for key exchange during a handshake starting a new TLS session.
This document adds new NamedCurve types to three elliptic curves defined in [RFC5639] as follows: enum { brainpoolP256r1(26), brainpoolP384r1(27), brainpoolP512r1(28)
} NamedCurve; These curves are suitable for use with Datagram TLS [RFC6347].
Test vectors for a Diffie Hellman key exchange using these elliptic curves are provided in Appendix A. 3.
IANA Considerations IANA has assigned numbers for the ECC Brainpool curves listed in Section 2 in the "EC Named Curve"
[IANA TLS] registry of the "Transport Layer Security (TLS) Parameters" registry as follows:
The security considerations of [RFC5246] apply to the ECC Brainpool curves described in this document.
The confidentiality, authenticity, and integrity of the TLS communication is limited by the weakest cryptographic primitive applied.
In order to achieve a maximum security level when using one of the elliptic curves from Table 1 for authentication and/or key exchange in TLS, the key derivation function; the algorithms and key lengths of symmetric encryption; and message authentication (as well as the algorithm, bit length, and hash function used for signature generation) should be chosen according to the recommendations of [NIST800 57] and [RFC5639].
Furthermore, the private Diffie Hellman keys should be selected with the same bit length as the order of the group generated by the base point G and with approximately maximum entropy.
Implementations of elliptic curve cryptography for TLS may be susceptible to side channel attacks.
Particular care should be taken for implementations that internally transform curve points to points on the corresponding "twisted curve", using the map (x',y')
(x Z^2, y Z^3) with the coefficient Z specified for that curve in [RFC5639], in order to take advantage of an efficient arithmetic based on the twisted curve's special parameters (A    3).
Although the twisted curve itself offers the same level of security as the corresponding random curve (through mathematical equivalence), an arithmetic based on small curve parameters may be harder to protect against side  channel attacks.
General guidance on resistance of elliptic curve cryptography implementations against side channel attacks is given in [BSI1] and [HMV].
This section provides some test vectors for example
Diffie Hellman key exchanges using each of the curves defined in Table 1.
The following notation is used in the subsequent sections:
A: the secret key of party A x qA: the x coordinate of the public key of party A y qA:
the y coordinate of the public key of party
A d B: the secret key of party B x qB: the x coordinate of the public key of party B y qB:
the y coordinate of the public key of party B x Z: the x coordinate of the shared secret that results from completion of the Diffie Hellman computation, i.e., the hex representation of the pre master secret
the y coordinate of the shared secret that results from completion of the Diffie Hellman computation
The field elements x qA, y qA
, x qB, y qB,
x Z, and y Z are represented as hexadecimal values using the FieldElement to  OctetString conversion method specified in [SEC1].
256 Bit Curve Curve brainpoolP256r1 dA
384 Bit Curve Curve brainpoolP384r1 dA
512 Bit Curve Curve brainpoolP512r1 dA
