Abstract This document specifies a Transport Layer Security (TLS) extension for the negotiation of Token Binding protocol version and key parameters.
Negotiation of Token Binding in TLS 1.3 and later versions is beyond the scope of this document.
In order to use the Token Binding protocol [RFC8471], the client and server need to agree on the Token Binding protocol version and the parameters (signature algorithm and length) of the Token Binding key.
This document specifies a new TLS [RFC5246] extension to accomplish this negotiation without introducing additional network round trips in TLS 1.2 and earlier versions.
[TOKENBIND TLS13] addresses Token Binding in TLS 1.3.
The negotiation of the Token Binding protocol and key parameters in combination with TLS 1.3 and later versions is beyond the scope of this document.
This document deals with TLS 1.2 and therefore refers to RFC 5246 (which has been obsoleted by RFC 8446).
[TOKENBIND TLS13] addresses Token Binding in TLS 1.3).
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
Token Binding Negotiation ClientHello Extension
The client uses the "token binding" TLS extension to indicate the highest supported Token Binding protocol version and key parameters.
enum { token binding(24), (65535)
} ExtensionType; The "extension data" field of this extension contains a "TokenBindingParameters" value.
uint8 minor; } TB ProtocolVersion; enum { rsa2048 pkcs1.5(0), rsa2048 pss(1), ecdsap256(2), (255) } TokenBindingKeyParameters; struct { TB ProtocolVersion token binding version; TokenBindingKeyParameters key parameters list<1
> } TokenBindingParameters; "token binding version" indicates the version of the Token Binding protocol the client wishes to use during this connection.
If the client supports multiple Token Binding protocol versions, it SHOULD indicate the latest supported version (the one with the highest TB ProtocolVersion.major and TB ProtocolVersion.minor) in TokenBindingParameters.token binding version.
For example, if the client supports versions {1, 0} and {0, 13} of the Token Binding protocol, it SHOULD indicate version {1, 0}.
Please note that the server MAY select any lower protocol version; see Section 3 ("Token Binding Negotiation ServerHello Extension") for more details.
If the client does not support the Token Binding protocol version selected by the server, then the connection proceeds without Token Binding.
[RFC8471] describes version {1, 0} of the protocol.
Please note that the representation of the Token Binding protocol version using two octets ("major" and "minor") is for human convenience only and carries no protocol significance. "
key parameters list" contains the list of identifiers of the Token Binding key parameters supported by the client, in descending order of preference.
[RFC8471] establishes an IANA registry for Token Binding key parameters identifiers.
Token Binding Negotiation ServerHello Extension
The server uses the "token binding" TLS extension to indicate support for the Token Binding protocol and to select the protocol version and key parameters.
The server that supports Token Binding and receives a ClientHello message containing the "token binding" extension will include the "token binding" extension in the ServerHello if all of the following conditions are satisfied: 1.
The server supports the Token Binding protocol version offered by the client, or a lower version.
The server finds acceptable Token Binding key parameters in the client's list.
The server is also negotiating the extended master secret [RFC7627] and renegotiation indication [RFC5746]
This requirement applies when TLS 1.2 or an older TLS version is used (see Section 6 ("Security Considerations") for more details).
The server will ignore any key parameters that it does not recognize.
The "extension data" field of the "token binding" extension is structured the same as described above for the client "extension data".
"token binding version" contains the lower of:  the Token Binding protocol version offered by the client in the "token binding" extension, and  the highest Token Binding protocol version supported by the server.
"key parameters list" contains exactly one Token Binding key parameters identifier selected by the server from the client's list.
4.  Negotiating Token Binding Protocol Version and Key Parameters
It is expected that a server will have a list of Token Binding key parameters identifiers that it supports, in preference order.
The server MUST only select an identifier that the client offered.
The server SHOULD select the most highly preferred key parameters identifier it supports, which is also advertised by the client.
In the event that the server supports none of the key parameters that the client advertises, then the server MUST NOT include the "token binding" extension in the ServerHello.
The client receiving the "token binding" extension MUST terminate the handshake with a fatal "unsupported extension" alert if any of the following conditions are true: 1.
The client did not include the "token binding" extension in the ClientHello.
"token binding version" is higher than the Token Binding protocol version advertised by the client.
"key parameters list" includes more than one Token Binding key parameters identifier.
"key parameters list" includes an identifier that was not advertised by the client.
TLS 1.2 or an older TLS version is used, but the extended master secret [RFC7627] and TLS renegotiation indication
[RFC5746] extensions are not negotiated (see Section 6 ("Security Considerations") for more details).
If the "token binding" extension is included in the ServerHello and the client supports the Token Binding protocol version selected by the server, it means that the version and key parameters have been negotiated between the client and the server and SHALL be definitive for the TLS connection.
TLS 1.2 and earlier versions support renegotiation, which allows the client and server to renegotiate the Token Binding protocol version and key parameters on the same connection.
The client MUST use the negotiated key parameters in the "provided token binding" as described in [RFC8471].
If the client does not support the Token Binding protocol version selected by the server, then the connection proceeds without Token Binding.
There is no requirement for the client to support any Token Binding versions other than the one advertised in the client's "token binding" extension.
Client and server applications can choose to handle failure to negotiate Token Binding in a variety of ways: continue using the connection as usual, shorten the lifetime of tokens issued during this connection, require stronger authentication, terminate the connection, etc.
The Token Binding protocol version and key parameters are negotiated for each TLS connection, which means that the client and server include their "token binding" extensions in both the full TLS handshake that establishes a new TLS session and the subsequent abbreviated TLS handshakes that resume the TLS session.
This document updates the "TLS ExtensionType Values" registry.
The registration for the "token binding" TLS extension is as follows:
Yes Reference: This document This document uses the "Token Binding Key Parameters" registry created by [RFC8471].
This document creates no new registrations in the registry.
The Token Binding protocol version and key parameters are negotiated via the "token binding" extension within the TLS handshake.
TLS detects handshake message modification by active attackers; therefore, it is not possible for an attacker to remove or modify the "token binding" extension without breaking the TLS handshake.
The signature algorithm and key length used in the Token Binding of type "provided token binding
" MUST match the parameters negotiated via the "token binding" extension.
Triple Handshake Vulnerability in TLS 1.2 and Older TLS Versions
The Token Binding protocol relies on the TLS exporters [RFC5705] to associate a TLS connection with a Token Binding.
The triple handshake attack [TRIPLE HS] is a known vulnerability in TLS 1.2 and older TLS versions; it allows an attacker to synchronize keying material between TLS connections.
The attacker can then successfully replay bound tokens.
For this reason, the Token Binding protocol MUST NOT be negotiated with these TLS versions, unless the extended master secret [RFC7627] and renegotiation indication
TLS extensions have also been negotiated.
