- title: __initial_text__
  contents:
  - "      Internet Small Computer System Interface (iSCSI) Extensions\n        for\
    \ the Remote Direct Memory Access (RDMA) Specification\n"
- title: Abstract
  contents:
  - "Abstract\n   Internet Small Computer System Interface (iSCSI) Extensions for\n\
    \   Remote Direct Memory Access (RDMA) provides the RDMA data transfer\n   capability\
    \ to iSCSI by layering iSCSI on top of an RDMA-Capable\n   Protocol.  An RDMA-Capable\
    \ Protocol provides RDMA Read and Write\n   services, which enable data to be\
    \ transferred directly into SCSI I/O\n   Buffers without intermediate data copies.\
    \  This document describes\n   the extensions to the iSCSI protocol to support\
    \ RDMA services as\n   provided by an RDMA-Capable Protocol.\n   This document\
    \ obsoletes RFC 5046.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7145.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................5\n\
    \      1.1. Motivation .................................................5\n  \
    \    1.2. iSCSI/iSER Layering ........................................6\n    \
    \  1.3. Architectural Goals ........................................7\n      1.4.\
    \ Protocol Overview ..........................................7\n      1.5. RDMA\
    \ Services and iSER .....................................9\n           1.5.1.\
    \ STag ................................................9\n           1.5.2. Send\
    \ ...............................................10\n           1.5.3. RDMA Write\
    \ .........................................11\n           1.5.4. RDMA Read ..........................................11\n\
    \      1.6. SCSI Read Overview ........................................11\n  \
    \    1.7. SCSI Write Overview .......................................12\n   2.\
    \ Definitions and Acronyms .......................................12\n      2.1.\
    \ Definitions ...............................................12\n      2.2. Acronyms\
    \ ..................................................18\n      2.3. Conventions\
    \ ...............................................20\n   3. Upper-Layer Interface\
    \ Requirements .............................20\n      3.1. Operational Primitives\
    \ offered by iSER ....................21\n           3.1.1. Send_Control .......................................21\n\
    \           3.1.2. Put_Data ...........................................21\n  \
    \         3.1.3. Get_Data ...........................................22\n    \
    \       3.1.4. Allocate_Connection_Resources ......................22\n      \
    \     3.1.5. Deallocate_Connection_Resources ....................23\n        \
    \   3.1.6. Enable_Datamover ...................................23\n          \
    \ 3.1.7. Connection_Terminate ...............................23\n           3.1.8.\
    \ Notice_Key_Values ..................................24\n           3.1.9. Deallocate_Task_Resources\
    \ ..........................24\n      3.2. Operational Primitives Used by iSER\
    \ .......................24\n           3.2.1. Control_Notify .....................................25\n\
    \           3.2.2. Data_Completion_Notify .............................25\n  \
    \         3.2.3. Data_ACK_Notify ....................................25\n    \
    \       3.2.4. Connection_Terminate_Notify ........................26\n      3.3.\
    \ iSCSI Protocol Usage Requirements .........................26\n   4. Lower-Layer\
    \ Interface Requirements .............................27\n      4.1. Interactions\
    \ with the RCaP Layer ..........................27\n      4.2. Interactions with\
    \ the Transport Layer .....................28\n   5. Connection Setup and Termination\
    \ ...............................28\n      5.1. iSCSI/iSER Connection Setup ...............................28\n\
    \           5.1.1. Initiator Behavior .................................30\n  \
    \         5.1.2. Target Behavior ....................................31\n    \
    \       5.1.3. iSER Hello Exchange ................................33\n      5.2.\
    \ iSCSI/iSER Connection Termination .........................36\n           5.2.1.\
    \ Normal Connection Termination at the Initiator .....36\n           5.2.2. Normal\
    \ Connection Termination at the Target ........36\n           5.2.3. Termination\
    \ without Logout Request/Response PDUs ...37\n   6. Login/Text Operational Keys\
    \ ....................................38\n      6.1. HeaderDigest and DataDigest\
    \ ...............................38\n      6.2. MaxRecvDataSegmentLength ..................................38\n\
    \      6.3. RDMAExtensions ............................................39\n  \
    \    6.4. TargetRecvDataSegmentLength ...............................40\n    \
    \  6.5. InitiatorRecvDataSegmentLength ............................41\n      6.6.\
    \ OFMarker and IFMarker .....................................41\n      6.7. MaxOutstandingUnexpectedPDUs\
    \ ..............................41\n      6.8. MaxAHSLength ..............................................42\n\
    \      6.9. TaggedBufferForSolicitedDataOnly ..........................43\n  \
    \    6.10. iSERHelloRequired ........................................43\n   7.\
    \ iSCSI PDU Considerations .......................................44\n      7.1.\
    \ iSCSI Data-Type PDU .......................................44\n      7.2. iSCSI\
    \ Control-Type PDU ....................................45\n      7.3. iSCSI PDUs\
    \ ................................................45\n           7.3.1. SCSI Command\
    \ .......................................45\n           7.3.2. SCSI Response ......................................47\n\
    \           7.3.3. Task Management Function Request/Response ..........49\n  \
    \         7.3.4. SCSI Data-out ......................................50\n    \
    \       7.3.5. SCSI Data-in .......................................51\n      \
    \     7.3.6. Ready To Transfer (R2T) ............................53\n        \
    \   7.3.7. Asynchronous Message ...............................55\n          \
    \ 7.3.8. Text Request and Text Response .....................55\n           7.3.9.\
    \ Login Request and Login Response ...................55\n           7.3.10. Logout\
    \ Request and Logout Response ................56\n           7.3.11. SNACK Request\
    \ .....................................56\n           7.3.12. Reject ............................................56\n\
    \           7.3.13. NOP-Out and NOP-In ................................57\n  \
    \ 8. Flow Control and STag Management ...............................57\n    \
    \  8.1. Flow Control for RDMA Send Messages .......................57\n      \
    \     8.1.1. Flow Control for Control-Type PDUs from the\n                  Initiator\
    \ ..........................................58\n           8.1.2. Flow Control\
    \ for Control-Type PDUs from the\n                  Target .............................................60\n\
    \      8.2. Flow Control for RDMA Read Resources ......................61\n  \
    \    8.3. STag Management ...........................................62\n    \
    \       8.3.1. Allocation of STags ................................62\n      \
    \     8.3.2. Invalidation of STags ..............................62\n   9. iSER\
    \ Control and Data Transfer .................................64\n      9.1. iSER\
    \ Header Format ........................................64\n      9.2. iSER Header\
    \ Format for iSCSI Control-Type PDU .............65\n      9.3. iSER Header Format\
    \ for iSER Hello Message .................67\n      9.4. iSER Header Format for\
    \ iSER HelloReply Message ............68\n      9.5. SCSI Data Transfer Operations\
    \ .............................69\n           9.5.1. SCSI Write Operation ...............................69\n\
    \           9.5.2. SCSI Read Operation ................................70\n  \
    \         9.5.3. Bidirectional Operation ............................70\n   10.\
    \ iSER Error Handling and Recovery ..............................71\n      10.1.\
    \ Error Handling ...........................................71\n           10.1.1.\
    \ Errors in the Transport Layer .....................71\n           10.1.2. Errors\
    \ in the RCaP Layer ..........................72\n           10.1.3. Errors in\
    \ the iSER Layer ..........................73\n           10.1.4. Errors in the\
    \ iSCSI Layer .........................75\n      10.2. Error Recovery ...........................................76\n\
    \           10.2.1. PDU Recovery ......................................77\n  \
    \         10.2.2. Connection Recovery ...............................77\n   11.\
    \ Security Considerations .......................................78\n   12. IANA\
    \ Considerations ...........................................79\n   13. References\
    \ ....................................................79\n      13.1. Normative\
    \ References .....................................79\n      13.2. Informative\
    \ References ...................................80\n   Appendix A. Summary of\
    \ Changes from RFC 5046 ......................81\n   Appendix B. Message Format\
    \ for iSER ...............................83\n   B.1. iWARP Message Format for\
    \ iSER Hello Message ..................83\n   B.2. iWARP Message Format for iSER\
    \ HelloReply Message .............84\n   B.3. iSER Header Format for SCSI Read\
    \ Command PDU .................85\n   B.4. iSER Header Format for SCSI Write Command\
    \ PDU ................86\n   B.5. iSER Header Format for SCSI Response PDU .....................87\n\
    \   Appendix C. Architectural discussion of iSER over InfiniBand ......88\n  \
    \ C.1. Host Side of iSCSI and iSER Connections in InfiniBand ........88\n   C.2.\
    \ Storage Side of iSCSI and iSER Mixed Network Environment .....89\n   C.3. Discovery\
    \ Processes for an InfiniBand Host ...................89\n   C.4. IBTA Connection\
    \ Specifications ...............................90\n   Appendix D. Acknowledgments\
    \ .......................................90\n"
- title: Table of Figures
  contents:
  - "Table of Figures\n   Figure 1. Example of iSCSI/iSER Layering in Full Feature\
    \ Phase .....6\n   Figure 2. iSER Header Format ......................................64\n\
    \   Figure 3. iSER Header Format for iSCSI Control-Type PDU ...........65\n  \
    \ Figure 4. iSER Header Format for iSER Hello Message ...............67\n   Figure\
    \ 5. iSER Header Format for iSER HelloReply Message ..........68\n   Figure 6.\
    \ SendSE Message Containing an iSER Hello Message .........83\n   Figure 7. SendSE\
    \ Message Containing an iSER HelloReply Message ....84\n   Figure 8. iSER Header\
    \ Format for SCSI Read Command PDU ............85\n   Figure 9. iSER Header Format\
    \ for SCSI Write Command PDU ...........86\n   Figure 10. iSER Header Format for\
    \ SCSI Response PDU ...............87\n   Figure 11. iSCSI and iSER on IB ...................................88\n\
    \   Figure 12. Storage Controller with TCP, iWARP, and IB Connections .89\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Motivation
  contents:
  - "1.1.  Motivation\n   The iSCSI protocol ([iSCSI]) is a mapping of the SCSI Architecture\n\
    \   Model (see [SAM5] and [iSCSI-SAM]) over the TCP protocol.  SCSI\n   commands\
    \ are carried by iSCSI requests, and SCSI responses and status\n   are carried\
    \ by iSCSI responses.  Other iSCSI protocol exchanges and\n   SCSI Data are also\
    \ transported in iSCSI PDUs.\n   Out-of-order TCP segments in the Traditional\
    \ iSCSI model have to be\n   stored and reassembled before the iSCSI protocol\
    \ layer within an end\n   node can place the data in the iSCSI buffers.  This\
    \ reassembly is\n   required because not every TCP segment is likely to contain\
    \ an iSCSI\n   header to enable its placement and TCP itself does not have a built-\n\
    \   in mechanism for signaling ULP (Upper Level Protocol) message\n   boundaries\
    \ to aid placement of out-of-order segments.  This TCP\n   reassembly at high\
    \ network speeds is quite counterproductive for the\n   following reasons: wasted\
    \ memory bandwidth in data copying, need for\n   reassembly memory, wasted CPU\
    \ cycles in data copying, and the general\n   store-and-forward latency from an\
    \ application perspective.\n   The generic term RDMA-Capable Protocol (RCaP) is\
    \ used to refer to\n   protocol stacks that provide the Remote Direct Memory Access\
    \ (RDMA)\n   functionality, such as iWARP and InfiniBand.\n   With the availability\
    \ of RDMA-Capable Controllers within a host\n   system, it is appropriate for\
    \ iSCSI to be able to exploit the direct\n   data placement function of the RDMA-Capable\
    \ Controller like other\n   applications.\n   iSCSI Extensions for RDMA (iSER)\
    \ is designed precisely to take\n   advantage of generic RDMA technologies --\
    \ iSER's goal is to permit\n   iSCSI to employ direct data placement and RDMA\
    \ capabilities using a\n   generic RDMA-Capable Controller.  In summary, the iSCSI/iSER\
    \ protocol\n   stack is designed to enable scaling to high speeds by relying on\
    \ a\n   generic data placement process and RDMA technologies and products\n  \
    \ that enable direct data placement of both in-order and out-of-order\n   data.\n\
    \   This document describes iSER as a protocol extension to iSCSI, both\n   for\
    \ convenience of description and also because it is true in a very\n   strict\
    \ protocol sense.  However, it is to be noted that iSER is in\n   reality extending\
    \ the connectivity of the iSCSI protocol defined in\n   [iSCSI], and the name\
    \ \"iSER\" reflects this reality.\n   When the iSCSI protocol as defined in [iSCSI]\
    \ (i.e., without the iSER\n   enhancements) is intended in the rest of the document,\
    \ the term\n   \"Traditional iSCSI\" is used to make the intention clear.\n  \
    \ This document obsoletes RFC 5046.  See Appendix A for the list of\n   changes\
    \ from RFC 5046.\n"
- title: 1.2.  iSCSI/iSER Layering
  contents:
  - "1.2.  iSCSI/iSER Layering\n   iSCSI Extensions for RDMA (iSER) is layered between\
    \ the iSCSI layer\n   and the RCaP layer.\n         +--------------------------------------------------------+\n\
    \         |                        SCSI                            |\n       \
    \  +--------------------------------------------------------+\n         |    \
    \                    iSCSI                           |\n   DI -> +--------------------------------------------------------+\n\
    \         |                         iSER                           |\n       \
    \  +-------+--------------------------+---------------------+\n         | RDMAP\
    \ |                          |                     |\n         +-------+     \
    \ InfiniBand          |                     |\n         |  DDP  |       Reliable\
    \           |       Other         |\n         +-------+       Connected      \
    \    |        RDMA         |\n         |  MPA  |       Transport          |  \
    \     Capable       |\n         +-------+        Service           |       Protocol\
    \      |\n         |  TCP  |                          |                     |\n\
    \         +-------+--------------------------+---------------------+\n       \
    \  |  IP   | InfiniBand Network Layer | Other Network Layer |\n         +-------+--------------------------+---------------------+\n\
    \    Figure 1: Example of iSCSI/iSER Layering in Full Feature Phase\n   Figure\
    \ 1 shows an example of the relationship between SCSI, iSCSI,\n   iSER, and the\
    \ different RCaP layers.  For TCP, the RCaP is iWARP.\n   For InfiniBand, the\
    \ RCaP is the Reliable Connected Transport Service.\n   Note that the iSCSI layer\
    \ as described here supports the RDMA\n   Extensions as used in iSER.\n"
- title: 1.3.  Architectural Goals
  contents:
  - "1.3.  Architectural Goals\n   This section summarizes the architectural goals\
    \ that guided the\n   design of iSER.\n   1.  Provide an RDMA data transfer model\
    \ for iSCSI that enables direct\n       in-order or out-of-order data placement\
    \ of SCSI data into pre-\n       allocated SCSI buffers while maintaining in-order\
    \ data delivery.\n   2.  Do not require any major changes to the SCSI Architecture\
    \ Model\n       [SAM5] and SCSI command set standards.\n   3.  Utilize the existing\
    \ iSCSI infrastructure (sometimes referred to\n       as \"iSCSI ecosystem\")\
    \ including but not limited to MIB,\n       bootstrapping, negotiation, naming\
    \ and discovery, and security.\n   4.  Enable a session to operate in the Traditional\
    \ iSCSI data\n       transfer mode if iSER is not supported by either the initiator\
    \ or\n       the target.  (Do not require iSCSI Full Feature Phase\n       interoperability\
    \ between an end node operating in Traditional\n       iSCSI mode and an end node\
    \ operating in iSER-assisted mode.)\n   5.  Allow initiator and target implementations\
    \ to utilize generic\n       RDMA-Capable Controllers such as RNICs or to implement\
    \ iSCSI and\n       iSER in software.  (Do not require iSCSI- or iSER-specific\n\
    \       assists in the RCaP implementation or RDMA-Capable Controller.)\n   6.\
    \  Implement a lightweight Datamover protocol for iSCSI with minimal\n       state\
    \ maintenance.\n"
- title: 1.4.  Protocol Overview
  contents:
  - "1.4.  Protocol Overview\n   Consistent with the architectural goals stated in\
    \ Section 1.3, the\n   iSER protocol does not require changes in the iSCSI ecosystem\
    \ or any\n   related SCSI specifications.  The iSER protocol defines the mapping\n\
    \   of iSCSI PDUs to RCaP Messages in such a way that it is entirely\n   feasible\
    \ to realize iSCSI/iSER implementations that are based on\n   generic RDMA-Capable\
    \ Controllers.  The iSER protocol layer requires\n   minimal state maintenance\
    \ to assist a connection during the iSCSI\n   Full Feature Phase, besides being\
    \ oblivious to the notion of an iSCSI\n   session.  The crucial protocol aspects\
    \ of iSER may be summarized as\n   follows:\n   1.  iSER-assisted mode is negotiated\
    \ during the iSCSI login in the\n       leading connection for each session, and\
    \ an entire iSCSI session\n       can only operate in one mode (i.e., a connection\
    \ in a session\n       cannot operate in iSER-assisted mode if a different connection\
    \ of\n       the same session is already in Full Feature Phase in the\n      \
    \ Traditional iSCSI mode).\n   2.  Once in iSER-assisted mode, all iSCSI interactions\
    \ on that\n       connection use RCaP Messages.\n   3.  A Send Message is used\
    \ for carrying an iSCSI control-type PDU\n       preceded by an iSER header. \
    \ See Section 7.2 for more details on\n       iSCSI control-type PDUs.\n   4.\
    \  RDMA Write, RDMA Read Request, and RDMA Read Response Messages\n       are\
    \ used for carrying control and all data information associated\n       with the\
    \ iSCSI data-type PDUs (i.e., SCSI Data-In PDUs and R2T\n       PDUs).  iSER does\
    \ not use SCSI Data-Out PDUs for solicited data,\n       and SCSI Data-Out PDUs\
    \ for unsolicited data are not treated as\n       iSCSI data-type PDUs by iSER\
    \ because RDMA is not used.  See\n       Section 7.1 for more details on iSCSI\
    \ data-type PDUs.\n   5.  The target drives all data transfer (with the exception\
    \ of iSCSI\n       unsolicited data) for SCSI writes and SCSI reads, by issuing\
    \ RDMA\n       Read Requests and RDMA Writes, respectively.\n   6.  RCaP is responsible\
    \ for ensuring data integrity.  (For example,\n       iWARP includes a CRC-enhanced\
    \ framing layer called MPA on top of\n       TCP; and for InfiniBand, the CRCs\
    \ are included in the Reliable\n       Connection mode).  For this reason, iSCSI\
    \ header and data digests\n       are negotiated to \"None\" for iSCSI/iSER sessions.\n\
    \   7.  The iSCSI error recovery hierarchy defined in [iSCSI] is fully\n     \
    \  supported by iSER.  (However, see Section 7.3.11 on the handling\n       of\
    \ SNACK Request PDUs.)\n   8.  iSER requires no changes to iSCSI security and\
    \ text mode\n       negotiation mechanisms.\n   Note that Traditional iSCSI implementations\
    \ may have to be adapted to\n   employ iSER.  It is expected that the adaptation\
    \ when required is\n   likely to be centered around the upper-layer interface\
    \ requirements\n   of iSER (Section 3).\n"
- title: 1.5.  RDMA Services and iSER
  contents:
  - "1.5.  RDMA Services and iSER\n   iSER is designed to work with software and/or\
    \ hardware protocol\n   stacks providing the protocol services defined in RCaP\
    \ documents such\n   as [RDMAP], [IB], etc.  The following subsections describe\
    \ the key\n   protocol elements of RCaP services on which iSER relies.\n"
- title: 1.5.1.  STag
  contents:
  - "1.5.1.  STag\n   An STag is the identifier of an I/O Buffer unique to an RDMA-Capable\n\
    \   Controller that the iSER layer Advertises to the remote iSCSI/iSER\n   node\
    \ in order to complete a SCSI I/O.\n   In iSER, Advertisement is the act of informing\
    \ the target by the\n   initiator that an I/O Buffer is available at the initiator\
    \ for RDMA\n   Read or RDMA Write access by the target.  The initiator Advertises\n\
    \   the I/O Buffer by including the STag and the Base Offset in the\n   header\
    \ of an iSER Message containing the SCSI Command PDU to the\n   target.  The buffer\
    \ length is as specified in the SCSI Command PDU.\n   The iSER layer at the initiator\
    \ Advertises the STag and the Base\n   Offset for the I/O Buffer of each SCSI\
    \ I/O to the iSER layer at the\n   target in the iSER header of a Send Message\
    \ containing the SCSI\n   Command PDU, unless the I/O can be completely satisfied\
    \ by\n   unsolicited data alone.  The SendSE Message should be used if\n   supported\
    \ by the RCaP layer (e.g., iWARP).\n   The iSER layer at the target provides the\
    \ STag for the I/O Buffer\n   that is the Data Sink of an RDMA Read Operation\
    \ (Section 1.5.4) to\n   the RCaP layer on the initiator node -- i.e., this is\
    \ completely\n   transparent to the iSER layer at the initiator.\n   The iSER\
    \ layer at the initiator SHOULD invalidate the Advertised STag\n   upon a normal\
    \ completion of the associated task.  The Send with\n   Invalidate Message, if\
    \ supported by the RCaP layer (e.g., iWARP), can\n   be used for automatic invalidation\
    \ when it is used to carry the SCSI\n   Response PDU.  There are two exceptions\
    \ to this automatic\n   invalidation -- bidirectional commands and abnormal completion\
    \ of a\n   command.  The iSER layer at the initiator SHOULD explicitly\n   invalidate\
    \ the STag in these two cases.  That iSER layer MUST check\n   that STag invalidation\
    \ has occurred whenever receipt of a Send with\n   Invalidate message is the expected\
    \ means of causing an STag to be\n   invalidated, and it MUST perform the STag\
    \ invalidation if the STag\n   has not already been invalidated (e.g., because\
    \ a Send Message was\n   used instead of Send with Invalidate).\n   If the Advertised\
    \ STag is not invalidated as recommended in the\n   foregoing paragraph (e.g.,\
    \ in order to cache the STag for future\n   reuse), the I/O Buffer remains exposed\
    \ to the network for access by\n   the RCaP.  Such an I/O Buffer is capable of\
    \ being read or written by\n   the RCaP outside the scope of the iSCSI operation\
    \ for which it was\n   originally established; this fact has both robustness and\
    \ security\n   considerations.  The robustness considerations are that the system\n\
    \   containing the iSER initiator may react poorly to an unexpected\n   modification\
    \ of its memory.  For the security considerations, see\n   Section 11.\n"
- title: 1.5.2.  Send
  contents:
  - "1.5.2.  Send\n   Send is the RDMA Operation that is not addressed to an Advertised\n\
    \   buffer and uses Untagged buffers as the message is received.\n   The iSER\
    \ layer at the initiator uses the Send Operation to transmit\n   any iSCSI control-type\
    \ PDU to the target.  As an example, the\n   initiator uses Send Operations to\
    \ transfer iSER Messages containing\n   SCSI Command PDUs to the iSER layer at\
    \ the target.\n   An iSER layer at the target uses the Send Operation to transmit\
    \ any\n   iSCSI control-type PDU to the initiator.  As an example, the target\n\
    \   uses Send Operations to transfer iSER Messages containing SCSI\n   Response\
    \ PDUs to the iSER layer at the initiator.\n   For interoperability, iSER implementations\
    \ SHOULD accept and\n   correctly process SendSE and SendInvSE messages.  However,\
    \ SendSE and\n   SendInvSE messages are to be regarded as optimizations or\n \
    \  enhancements to the basic Send Message, and their support may vary by\n   RCaP\
    \ protocol and specific implementation.  In general, these\n   messages SHOULD\
    \ NOT be used, unless the RCaP requires support for\n   them in all implementations.\
    \  If these messages are used, the\n   implementation SHOULD be capable of reverting\
    \ to use of Send in order\n   to work with a receiver that does not support these\
    \ messages.\n   Attempted use of these messages with a peer that does not support\n\
    \   them may result in a fatal error that closes the RCaP connection.\n   For\
    \ example, these messages SHOULD NOT be used with the InfiniBand\n   RCaP because\
    \ InfiniBand does not require support for them in all\n   cases.  New iSER implementations\
    \ SHOULD use Send (and not SendSE or\n   SendInvSE) unless there are compelling\
    \ reasons for doing otherwise.\n   Similarly, iSER implementations SHOULD NOT\
    \ rely on events triggered\n   by SendSE and SendInvSE, as these messages may\
    \ not be used.\n"
- title: 1.5.3.  RDMA Write
  contents:
  - "1.5.3.  RDMA Write\n   RDMA Write is the RDMA Operation that is used to place\
    \ data into an\n   Advertised buffer at the Data Sink.  The Data Source addresses\
    \ the\n   Message using an STag and a Tagged Offset that are valid on the Data\n\
    \   Sink.\n   The iSER layer at the target uses the RDMA Write Operation to\n\
    \   transfer the contents of a local I/O Buffer to an Advertised I/O\n   Buffer\
    \ at the initiator.  The iSER layer at the target uses the RDMA\n   Write to transfer\
    \ the whole data or part of the data required to\n   complete a SCSI Read command.\n\
    \   The iSER layer at the initiator does not employ RDMA Writes.\n"
- title: 1.5.4.  RDMA Read
  contents:
  - "1.5.4.  RDMA Read\n   RDMA Read is the RDMA Operation that is used to retrieve\
    \ data from an\n   Advertised buffer at the Data Source.  The sender of the RDMA\
    \ Read\n   Request addresses the Message using an STag and a Tagged Offset that\n\
    \   are valid on the Data Source in addition to providing a valid local\n   STag\
    \ and Tagged Offset that identify the Data Sink.\n   The iSER layer at the target\
    \ uses the RDMA Read Operation to transfer\n   the contents of an Advertised I/O\
    \ Buffer at the initiator to a local\n   I/O Buffer at the target.  The iSER layer\
    \ at the target uses the RDMA\n   Read to fetch whole or part of the data required\
    \ to complete a SCSI\n   Write Command.\n   The iSER layer at the initiator does\
    \ not employ RDMA Reads.\n"
- title: 1.6.  SCSI Read Overview
  contents:
  - "1.6.  SCSI Read Overview\n   The iSER layer at the initiator receives the SCSI\
    \ Command PDU from\n   the iSCSI layer.  The iSER layer at the initiator generates\
    \ an STag\n   for the I/O Buffer of the SCSI Read and Advertises the buffer by\n\
    \   including the STag and the Base Offset as part of the iSER header for\n  \
    \ the PDU.  The iSER Message is transferred to the target using a Send\n   Message.\
    \  The SendSE Message should be used if supported by the RCaP\n   layer (e.g.,\
    \ iWARP).\n   The iSER layer at the target uses one or more RDMA Writes to transfer\n\
    \   the data required to complete the SCSI Read.\n   The iSER layer at the target\
    \ uses a Send Message to transfer the SCSI\n   Response PDU back to the iSER layer\
    \ at the initiator.  The iSER layer\n   at the initiator invalidates the STag\
    \ and notifies the iSCSI layer of\n   the availability of the SCSI Response PDU.\
    \  The Send with Invalidate\n   Message, if supported by the RCaP layer (e.g.,\
    \ iWARP), can be used\n   for automatic invalidation of the STag.\n"
- title: 1.7.  SCSI Write Overview
  contents:
  - "1.7.  SCSI Write Overview\n   The iSER layer at the initiator receives the SCSI\
    \ Command PDU from\n   the iSCSI layer.  If solicited data transfer is involved,\
    \ the iSER\n   layer at the initiator generates an STag for the I/O Buffer of\
    \ the\n   SCSI Write and Advertises the buffer by including the STag and the\n\
    \   Base Offset as part of the iSER header for the PDU.  The iSER Message\n  \
    \ is transferred to the target using a Send Message.  The SendSE\n   Message should\
    \ be used if supported by the RCaP layer (e.g., iWARP).\n   The iSER layer at\
    \ the initiator may optionally send one or more non-\n   immediate unsolicited\
    \ data PDUs to the target using Send Messages.\n   If solicited data transfer\
    \ is involved, the iSER layer at the target\n   uses one or more RDMA Reads to\
    \ transfer the data required to complete\n   the SCSI Write.\n   The iSER layer\
    \ at the target uses a Send Message to transfer the SCSI\n   Response PDU back\
    \ to the iSER layer at the initiator.  The iSER layer\n   at the initiator invalidates\
    \ the STag and notifies the iSCSI layer of\n   the availability of the SCSI Response\
    \ PDU.  The Send with Invalidate\n   Message, if supported by the RCaP layer (e.g.,\
    \ iWARP), can be used\n   for automatic invalidation of the STag.\n"
- title: 2.  Definitions and Acronyms
  contents:
  - '2.  Definitions and Acronyms

    '
- title: 2.1.  Definitions
  contents:
  - "2.1.  Definitions\n   Advertisement (Advertised, Advertise, Advertisements, Advertises)\
    \ --\n      The act of informing a remote iSER (iSCSI Extensions for RDMA)\n \
    \     layer that a local node's buffer is available to it.  A node makes\n   \
    \   a buffer available for incoming RDMA Read Request Message or\n      incoming\
    \ RDMA Write Message access by informing the remote iSER\n      layer of the Tagged\
    \ Buffer identifiers (STag, Base Offset, and\n      buffer length).  Note that\
    \ this Advertisement of Tagged Buffer\n      information is the responsibility\
    \ of the iSER layer on either end\n      and is not defined by the RDMA-Capable\
    \ Protocol.  A typical method\n      would be for the iSER layer to embed the\
    \ Tagged Buffer's STag,\n      Base Offset, and buffer length in a message destined\
    \ for the\n      remote iSER layer.\n   Base Offset - A value when added to the\
    \ Buffer Offset forms the\n      Tagged Offset.\n   Completion (Completed, Complete,\
    \ Completes) - Completion is defined\n      as the process by which the RDMA-Capable\
    \ Protocol layer informs\n      the iSER layer that a particular RDMA Operation\
    \ has performed all\n      functions specified for the RDMA Operation.\n   Connection\
    \ - A connection is a logical bidirectional communication\n      channel between\
    \ the initiator and the target, e.g., a TCP\n      connection.  Communication\
    \ between the initiator and the target\n      occurs over one or more connections.\
    \  The connections carry\n      control messages, SCSI commands, parameters, and\
    \ data within iSCSI\n      Protocol Data Units (iSCSI PDUs).\n   Connection Handle\
    \ - An information element that identifies the\n      particular iSCSI connection\
    \ and is unique for a given iSCSI layer\n      and the underlying iSER layer.\
    \  Every invocation of an Operational\n      Primitive is qualified with the Connection\
    \ Handle.\n   Data Sink - The peer receiving a data payload.  Note that the Data\n\
    \      Sink can be required to both send and receive RCaP (RDMA-Capable\n    \
    \  Protocol) Messages to transfer a data payload.\n   Data Source - The peer sending\
    \ a data payload.  Note that the Data\n      Source can be required to both send\
    \ and receive RCaP Messages to\n      transfer a data payload.\n   Datamover Interface\
    \ (DI) - The interface between the iSCSI layer and\n      the Datamover Layer\
    \ as described in [DA].\n   Datamover Layer - A layer that is directly below the\
    \ iSCSI layer and\n      above the underlying transport layers.  This layer exposes\
    \ and\n      uses a set of transport-independent Operational Primitives for the\n\
    \      communication between the iSCSI layer and itself.  The Datamover\n    \
    \  layer, operating in conjunction with the transport layers, moves\n      the\
    \ control and data information on the iSCSI connection.  In this\n      specification,\
    \ the iSER layer is the Datamover layer.\n   Datamover Protocol - A Datamover\
    \ protocol is the wire protocol that\n      is defined to realize the Datamover-layer\
    \ functionality.  In this\n      specification, the iSER protocol is the Datamover\
    \ protocol.\n   Inbound RDMA Read Queue Depth (IRD) - The maximum number of incoming\n\
    \      outstanding RDMA Read Requests that the RDMA-Capable Controller\n     \
    \ can handle on a particular RCaP Stream at the Data Source.  For\n      some\
    \ RDMA-Capable Protocol layers, the term \"IRD\" may be known by\n      a different\
    \ name.  For example, for InfiniBand, the equivalent to\n      IRD is the Responder\
    \ Resources.\n   I/O Buffer - A buffer that is used in a SCSI Read or Write operation\n\
    \      so SCSI data may be sent from or received into that buffer.\n   iSCSI -\
    \ The iSCSI protocol as defined in [iSCSI] is a mapping of the\n      SCSI Architecture\
    \ Model of SAM-5 over TCP.\n   iSCSI control-type PDU - Any iSCSI PDU that is\
    \ not an iSCSI data-\n      type PDU and also not a SCSI Data-Out PDU carrying\
    \ solicited data\n      is defined as an iSCSI control-type PDU.  Specifically,\
    \ it is to\n      be noted that SCSI Data-Out PDUs for unsolicited data are defined\n\
    \      as iSCSI control-type PDUs.\n   iSCSI data-type PDU - An iSCSI data-type\
    \ PDU is defined as an iSCSI\n      PDU that causes data transfer via RDMA operations\
    \ at the iSER\n      layer, transparent to the remote iSCSI layer, to take place\n\
    \      between the peer iSCSI nodes on a Full Feature Phase iSCSI\n      connection.\
    \  An iSCSI data-type PDU, when requested for\n      transmission by the sender\
    \ iSCSI layer, results in the associated\n      data transfer without the participation\
    \ of the remote iSCSI layer,\n      i.e., the PDU itself is not delivered as-is\
    \ to the remote iSCSI\n      layer.  The following iSCSI PDUs constitute the set\
    \ of iSCSI data-\n      type PDUs -- SCSI Data-In PDU and R2T PDU.\n   iSCSI Layer\
    \ - A layer in the protocol stack implementation within an\n      end node that\
    \ implements the iSCSI protocol and interfaces with\n      the iSER layer via\
    \ the Datamover Interface.\n   iSCSI PDU (iSCSI Protocol Data Unit) - The iSCSI\
    \ layer at the\n      initiator and the iSCSI layer at the target divide their\n\
    \      communications into messages.  The term \"iSCSI Protocol Data Unit\"\n\
    \      (iSCSI PDU) is used for these messages.\n   iSCSI/iSER Connection - An\
    \ iSER-assisted iSCSI connection.  An iSCSI\n      connection that is not iSER\
    \ assisted always maps onto a TCP\n      connection at the transport level.  But\
    \ an iSER-assisted iSCSI\n      connection may not have an underlying TCP connection.\
    \  For some\n      RCaP implementations (e.g., iWARP), an iSER-assisted iSCSI\n\
    \      connection has an underlying TCP connection.  For other RCaP\n      implementations\
    \ (e.g., InfiniBand), there is no underlying TCP\n      connection.  (In the specific\
    \ example of InfiniBand [IB], an iSER-\n      assisted iSCSI connection is directly\
    \ mapped onto the InfiniBand\n      Reliable Connection-based (RC) channel.)\n\
    \   iSCSI/iSER Session - An iSER-assisted iSCSI session.  All connections\n  \
    \    of an iSCSI/iSER session are iSCSI/iSER connections.\n   iSER - iSCSI Extensions\
    \ for RDMA, the protocol defined in this\n      document.\n   iSER-assisted -\
    \ A term generally used to describe the operation of\n      iSCSI when the iSER\
    \ functionality is also enabled below the iSCSI\n      layer for the specific\
    \ iSCSI/iSER connection in question.\n   iSER-IRD - This variable represents the\
    \ maximum number of incoming\n      outstanding RDMA Read Requests that the iSER\
    \ layer at the\n      initiator grants on a particular RCaP Stream.\n   iSER-ORD\
    \ - This variable represents the maximum number of outstanding\n      RDMA Read\
    \ Requests that the iSER layer can initiate on a\n      particular RCaP Stream.\
    \  This variable is maintained only by the\n      iSER layer at the target.\n\
    \   iSER Layer - The layer that implements the iSCSI Extensions for RDMA\n   \
    \   (iSER) protocol.\n   iWARP - A suite of wire protocols comprising of [RDMAP],\
    \ [DDP], and\n      [MPA] when layered above [TCP].  [RDMAP] and [DDP] may be\
    \ layered\n      above SCTP or other transport protocols.\n   Local Mapping -\
    \ A task state record maintained by the iSER layer that\n      associates the\
    \ Initiator Task Tag to the Local STag(s).  The\n      specifics of the record\
    \ structure are implementation dependent.\n   Local Peer - The implementation\
    \ of the RDMA-Capable Protocol on the\n      local end of the connection.  Used\
    \ to refer to the local entity\n      when describing protocol exchanges or other\
    \ interactions between\n      two nodes.\n   Node - A computing device attached\
    \ to one or more links of a network.\n      A node in this context does not refer\
    \ to a specific application or\n      protocol instantiation running on the computer.\
    \  A node may\n      consist of one or more RDMA-Capable Controllers installed\
    \ in a\n      host computer.\n   Operational Primitive - An Operational Primitive\
    \ is an abstract\n      functional interface procedure that requests another layer\
    \ to\n      perform a specific action on the requestor's behalf or notifies\n\
    \      the other layer of some event.  The Datamover Interface between an\n  \
    \    iSCSI layer and a Datamover layer within an iSCSI end node uses a\n     \
    \ set of Operational Primitives to define the functional interface\n      between\
    \ the two layers.  Note that not every invocation of an\n      Operational Primitive\
    \ may elicit a response from the requested\n      layer.  A full discussion of\
    \ the Operational Primitive types and\n      request-response semantics available\
    \ to iSCSI and iSER can be\n      found in [DA].\n   Outbound RDMA Read Queue\
    \ Depth (ORD) - The maximum number of\n      outstanding RDMA Read Requests that\
    \ the RDMA-Capable Controller\n      can initiate on a particular RCaP Stream\
    \ at the Data Sink.  For\n      some RDMA-Capable Protocol layer, the term \"\
    ORD\" may be known by a\n      different name.  For example, for InfiniBand, the\
    \ equivalent to\n      ORD is the Initiator Depth.\n   Phase Collapse - Refers\
    \ to the optimization in iSCSI where the SCSI\n      status is transferred along\
    \ with the final SCSI Data-In PDU from a\n      target.  See Section 4.2 in [iSCSI].\n\
    \   RCaP Message - One or more packets of the network layer that\n      constitute\
    \ a single RDMA operation or a part of an RDMA Read\n      Operation of the RDMA-Capable\
    \ Protocol.  For iWARP, an RCaP\n      Message is known as an RDMAP Message.\n\
    \   RCaP Stream - A single bidirectional association between the peer\n      RDMA-Capable\
    \ Protocol layers on two nodes over a single transport-\n      level stream. \
    \ For iWARP, an RCaP Stream is known as an RDMAP\n      Stream, and the association\
    \ is created following a successful\n      Login Phase during which iSER support\
    \ is negotiated.\n   RDMA-Capable Protocol (RCaP) - The protocol or protocol suite\
    \ that\n      provides a reliable RDMA transport functionality, e.g., iWARP,\n\
    \      InfiniBand, etc.\n   RDMA-Capable Controller - A network I/O adapter or\
    \ embedded\n      controller with RDMA functionality.  For example, for iWARP,\
    \ this\n      could be an RNIC, and for InfiniBand, this could be a HCA (Host\n\
    \      Channel Adapter) or TCA (Target Channel Adapter).\n   RDMA-enabled Network\
    \ Interface Controller (RNIC) - A network I/O\n      adapter or embedded controller\
    \ with iWARP functionality.\n   RDMA Operation - A sequence of RCaP Messages,\
    \ including control\n      messages, to transfer data from a Data Source to a\
    \ Data Sink.  The\n      following RDMA Operations are defined -- RDMA Write Operation,\n\
    \      RDMA Read Operation, and Send Operation.\n   RDMA Protocol (RDMAP) - A\
    \ wire protocol that supports RDMA Operations\n      to transfer ULP data between\
    \ a Local Peer and the Remote Peer as\n      described in [RDMAP].\n   RDMA Read\
    \ Operation - An RDMA Operation used by the Data Sink to\n      transfer the contents\
    \ of a Data Source buffer from the Remote Peer\n      to a Data Sink buffer at\
    \ the Local Peer.  An RDMA Read operation\n      consists of a single RDMA Read\
    \ Request Message and a single RDMA\n      Read Response Message.\n   RDMA Read\
    \ Request - An RCaP Message used by the Data Sink to request\n      the Data Source\
    \ to transfer the contents of a buffer.  The RDMA\n      Read Request Message\
    \ describes both the Data Source and the Data\n      Sink buffers.\n   RDMA Read\
    \ Response - An RCaP Message used by the Data Source to\n      transfer the contents\
    \ of a buffer to the Data Sink, in response to\n      an RDMA Read Request.  The\
    \ RDMA Read Response Message only\n      describes the Data Sink buffer.\n   RDMA\
    \ Write Operation - An RDMA Operation used by the Data Source to\n      transfer\
    \ the contents of a Data Source buffer from the Local Peer\n      to a Data Sink\
    \ buffer at the Remote Peer.  The RDMA Write Message\n      only describes the\
    \ Data Sink buffer.\n   Remote Direct Memory Access (RDMA) - A method of accessing\
    \ memory on\n      a remote system in which the local system specifies the remote\n\
    \      location of the data to be transferred.  Employing an RDMA-\n      Capable\
    \ Controller in the remote system allows the access to take\n      place without\
    \ interrupting the processing of the CPU(s) on the\n      system.\n   Remote Mapping\
    \ - A task state record maintained by the iSER layer\n      that associates the\
    \ Initiator Task Tag to the Advertised STag(s)\n      and the Base Offset(s).\
    \  The specifics of the record structure are\n      implementation dependent.\n\
    \   Remote Peer - The implementation of the RDMA-Capable Protocol on the\n   \
    \   opposite end of the connection.  Used to refer to the remote\n      entity\
    \ when describing protocol exchanges or other interactions\n      between two\
    \ nodes.\n   SCSI Layer - This layer builds/receives SCSI CDBs (Command Descriptor\n\
    \      Blocks) and sends/receives them with the remaining command execute\n  \
    \    [SAM5] parameters to/from the iSCSI layer.\n   Send - An RDMA Operation that\
    \ transfers the content of a buffer from\n      the Local Peer to an untagged\
    \ buffer at the Remote Peer.\n   SendInvSE Message - A Send with Solicited Event\
    \ and Invalidate\n      Message.\n   SendSE Message - A Send with Solicited Event\
    \ Message.\n   Sequence Number (SN) - DataSN for a SCSI Data-In PDU and R2TSN\
    \ for an\n      R2T PDU.  The semantics for both types of sequence numbers are\
    \ as\n      defined in [iSCSI].\n   Session, iSCSI Session - The group of connections\
    \ that link an\n      initiator SCSI port with a target SCSI port form an iSCSI\
    \ session\n      (equivalent to a SCSI Initiator-Target (I-T) nexus).  Connections\n\
    \      can be added to and removed from a session even while the I-T\n      nexus\
    \ is intact.  Across all connections within a session, an\n      initiator sees\
    \ one and the same target.\n   Steering Tag (STag) - An identifier of a Tagged\
    \ Buffer on a node\n      (Local or Remote) as defined in [RDMAP] and [DDP]. \
    \ For other\n      RDMA-Capable Protocols, the Steering Tag may be known by different\n\
    \      names but will be referred to herein as STags.  For example, for\n    \
    \  InfiniBand, a Remote STag is known as an R-Key, and a Local STag\n      is\
    \ known as an L-Key, and both will be considered STags.\n   Tagged Buffer - A\
    \ buffer that is explicitly Advertised to the iSER\n      layer at the remote\
    \ node through the exchange of an STag, Base\n      Offset, and length.\n   Tagged\
    \ Offset - The offset within a Tagged Buffer.\n   Traditional iSCSI - Refers to\
    \ the iSCSI protocol as defined in\n      [iSCSI] (i.e., without the iSER enhancements).\n\
    \   Untagged Buffer - A buffer that is not explicitly Advertised to the\n    \
    \  iSER layer at the remode node.\n"
- title: 2.2.  Acronyms
  contents:
  - "2.2.  Acronyms\n   Acronym        Definition\n   --------------------------------------------------------------\n\
    \   AHS            Additional Header Segment\n   BHS            Basic Header Segment\n\
    \   CO             Connection Only\n   CRC            Cyclic Redundancy Check\n\
    \   DDP            Direct Data Placement Protocol\n   DI             Datamover\
    \ Interface\n   HCA            Host Channel Adapter\n   IANA           Internet\
    \ Assigned Numbers Authority\n   IB             InfiniBand\n   IETF          \
    \ Internet Engineering Task Force\n   I/O            Input - Output\n   IO   \
    \          Initialize Only\n   IP             Internet Protocol\n   IPoIB    \
    \      IP over InfiniBand\n   IPsec          Internet Protocol Security\n   iSER\
    \           iSCSI Extensions for RDMA\n   ITT            Initiator Task Tag\n\
    \   LO             Leading Only\n   MPA            Marker PDU Aligned Framing\
    \ for TCP\n   NOP            No Operation\n   NSG            Next Stage (during\
    \ the iSCSI Login Phase)\n   PDU            Protocol Data Unit\n   R2T       \
    \     Ready To Transfer\n   R2TSN          Ready To Transfer Sequence Number\n\
    \   RCaP           RDMA-Capable Protocol\n   RDMA           Remote Direct Memory\
    \ Access\n   RDMAP          Remote Direct Memory Access Protocol\n   RFC     \
    \       Request For Comments\n   RNIC           RDMA-enabled Network Interface\
    \ Controller\n   SAM5           SCSI Architecture Model - 5\n   SCSI         \
    \  Small Computer System Interface\n   SNACK          Selective Negative Acknowledgment\
    \ - also\n                  Sequence Number Acknowledgement for data\n   STag\
    \           Steering Tag\n   SW             Session Wide\n   TCA            Target\
    \ Channel Adapter\n   TCP            Transmission Control Protocol\n   TMF   \
    \         Task Management Function\n   TTT            Target Transfer Tag\n  \
    \ ULP            Upper Level Protocol\n"
- title: 2.3.  Conventions
  contents:
  - "2.3.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n"
- title: 3.  Upper-Layer Interface Requirements
  contents:
  - "3.  Upper-Layer Interface Requirements\n   This section discusses the upper-layer\
    \ interface requirements in the\n   form of an abstract model of the required\
    \ interactions between the\n   iSCSI layer and the iSER layer.  The abstract model\
    \ used here is\n   derived from the architectural model described in [DA].  [DA]\
    \ also\n   provides a functional overview of the interactions between the iSCSI\n\
    \   layer and the Datamover layer as intended by the Datamover\n   Architecture.\n\
    \   The interface requirements are specified by Operational Primitives.\n   An\
    \ Operational Primitive is an abstract functional interface\n   procedure between\
    \ the iSCSI layer and the iSER layer that requests\n   one layer to perform a\
    \ specific action on behalf of the other layer\n   or notifies the other layer\
    \ of some event.  Whenever an Operational\n   Primitive in invoked, the Connection_Handle\
    \ qualifier is used to\n   identify a particular iSCSI connection.  For some Operational\n\
    \   Primitives, a Data_Descriptor is used to identify the iSCSI/SCSI data\n  \
    \ buffer associated with the requested or completed operation.\n   The abstract\
    \ model and the Operational Primitives defined in this\n   section facilitate\
    \ the description of the iSER protocol.  In the rest\n   of the iSER specification,\
    \ the compliance statements related to the\n   use of these Operational Primitives\
    \ are only for the purpose of the\n   required interactions between the iSCSI\
    \ layer and the iSER layer.\n   Note that the compliance statements related to\
    \ the Operational\n   Primitives in the rest of this specification only mandate\
    \ functional\n   equivalence on implementations, but do not put any requirements\
    \ on\n   the implementation specifics of the interface between the iSCSI layer\n\
    \   and the iSER layer.\n   Each Operational Primitive is invoked with a set of\
    \ qualifiers which\n   specify the information context for performing the specific\
    \ action\n   being requested of the Operational Primitive.  While the qualifiers\n\
    \   are required, the method of realizing the qualifiers (e.g., by\n   passing\
    \ synchronously with invocation, or by retrieving from task\n   context, or by\
    \ retrieving from shared memory, etc.) is implementation\n   dependent.\n"
- title: 3.1.  Operational Primitives offered by iSER
  contents:
  - "3.1.  Operational Primitives offered by iSER\n   The iSER protocol layer MUST\
    \ support the following Operational\n   Primitives to be used by the iSCSI protocol\
    \ layer.\n"
- title: 3.1.1.  Send_Control
  contents:
  - "3.1.1.  Send_Control\n      Input qualifiers:  Connection_Handle, BHS and AHS\
    \ (if any) of the\n      iSCSI PDU, PDU-specific qualifiers\n      Return results:\
    \  Not specified\n   This is used by the iSCSI layers at the initiator and the\
    \ target to\n   request the outbound transfer of an iSCSI control-type PDU (see\n\
    \   Section 7.2).  Qualifiers that only apply for a particular control-\n   type\
    \ PDU are known as PDU-specific qualifiers, e.g.,\n   ImmediateDataSize for a\
    \ SCSI Write command.  For details on PDU-\n   specific qualifiers, see Section\
    \ 7.3.  The iSCSI layer can only\n   invoke the Send_Control Operational Primitive\
    \ when the connection is\n   in iSER-assisted mode.\n"
- title: 3.1.2.  Put_Data
  contents:
  - "3.1.2.  Put_Data\n      Input qualifiers:  Connection_Handle, content of a SCSI\
    \ Data-In\n      PDU header, Data_Descriptor, Notify_Enable\n      Return results:\
    \  Not specified\n   This is used by the iSCSI layer at the target to request\
    \ the outbound\n   transfer of data for a SCSI Data-In PDU from the buffer identified\
    \ by\n   the Data_Descriptor qualifier.  The iSCSI layer can only invoke the\n\
    \   Put_Data Operational Primitive when the connection is in iSER-\n   assisted\
    \ mode.\n   The Notify_Enable qualifier is used to indicate to the iSER layer\n\
    \   whether or not it should generate an eventual local completion\n   notification\
    \ to the iSCSI layer.  See Section 3.2.2 on\n   Data_Completion_Notify for details.\n"
- title: 3.1.3.  Get_Data
  contents:
  - "3.1.3.  Get_Data\n      Input qualifiers:  Connection_Handle, content of an R2T\
    \ PDU,\n      Data_Descriptor, Notify_Enable\n      Return results:  Not specified\n\
    \   This is used by the iSCSI layer at the target to request the inbound\n   transfer\
    \ of solicited data requested by an R2T PDU into the buffer\n   identified by\
    \ the Data_Descriptor qualifier.  The iSCSI layer can\n   only invoke the Get_Data\
    \ Operational Primitive when the connection is\n   in iSER-assisted mode.\n  \
    \ The Notify_Enable qualifier is used to indicate to the iSER layer\n   whether\
    \ or not it should generate the eventual local completion\n   notification to\
    \ the iSCSI layer.  See Section 3.2.2 on\n   Data_Completion_Notify for details.\n"
- title: 3.1.4.  Allocate_Connection_Resources
  contents:
  - "3.1.4.  Allocate_Connection_Resources\n      Input qualifiers:  Connection_Handle,\
    \ Resource_Descriptor\n      (optional)\n      Return results:  Status\n   This\
    \ is used by the iSCSI layers at the initiator and the target to\n   request the\
    \ allocation of all connection resources necessary to\n   support RCaP for an\
    \ operational iSCSI/iSER connection.  The iSCSI\n   layer may optionally specify\
    \ the implementation-specific resource\n   requirements for the iSCSI connection\
    \ using the Resource_Descriptor\n   qualifier.\n   A return result of Status=success\
    \ means the invocation succeeded, and\n   a return result of Status=failure means\
    \ that the invocation failed.\n   If the invocation is for a Connection_Handle\
    \ for which an earlier\n   invocation succeeded, the request will be ignored by\
    \ the iSER layer\n   and the result of Status=success will be returned.  Only\
    \ one\n   Allocate_Connection_Resources Operational Primitive invocation can be\n\
    \   outstanding for a given Connection_Handle at any time.\n"
- title: 3.1.5.  Deallocate_Connection_Resources
  contents:
  - "3.1.5.  Deallocate_Connection_Resources\n      Input qualifiers:  Connection_Handle\n\
    \      Return results:  Not specified\n   This is used by the iSCSI layers at\
    \ the initiator and the target to\n   request the deallocation of all connection\
    \ resources that were\n   allocated earlier as a result of a successful invocation\
    \ of the\n   Allocate_Connection_Resources Operational Primitive.\n"
- title: 3.1.6.  Enable_Datamover
  contents:
  - "3.1.6.  Enable_Datamover\n      Input qualifiers:  Connection_Handle,\n     \
    \ Transport_Connection_Descriptor, Final Login_Response_PDU\n      (optional)\n\
    \      Return results:  Not specified\n   This is used by the iSCSI layers at\
    \ the initiator and the target to\n   request that iSER-assisted mode be used\
    \ for the connection.  The\n   Transport_Connection_Descriptor qualifier is used\
    \ to identify the\n   specific connection associated with the Connection_Handle.\
    \  The iSCSI\n   layer can only invoke the Enable_Datamover Operational Primitive\
    \ when\n   there was a corresponding prior resource allocation.\n   The Final_Login_Response_PDU\
    \ input qualifier is applicable only for a\n   target and contains the final Login\
    \ Response PDU that concludes the\n   iSCSI Login Phase.\n"
- title: 3.1.7.  Connection_Terminate
  contents:
  - "3.1.7.  Connection_Terminate\n      Input qualifiers:  Connection_Handle\n  \
    \    Return results:  Not specified\n   This is used by the iSCSI layers at the\
    \ initiator and the target to\n   request that a specified iSCSI/iSER connection\
    \ be terminated and all\n   associated connection and task resources be freed.\
    \  When this\n   Operational Primitive invocation returns to the iSCSI layer,\
    \ the\n   iSCSI layer may assume full ownership of all iSCSI-level resources,\n\
    \   e.g., I/O Buffers, associated with the connection.\n"
- title: 3.1.8.  Notice_Key_Values
  contents:
  - "3.1.8.  Notice_Key_Values\n      Input qualifiers:  Connection_Handle, number\
    \ of keys, list of Key-\n      Value pairs\n      Return results:  Not specified\n\
    \   This is used by the iSCSI layers at the initiator and the target to\n   request\
    \ the iSER layer to take note of the specified Key-Value pairs\n   that were negotiated\
    \ by the iSCSI peers for the connection.\n"
- title: 3.1.9.  Deallocate_Task_Resources
  contents:
  - "3.1.9.  Deallocate_Task_Resources\n      Input qualifiers:  Connection_Handle,\
    \ ITT\n      Return results:  Not specified\n   This is used by the iSCSI layers\
    \ at the initiator and the target to\n   request the deallocation of all RCaP-specific\
    \ resources allocated by\n   the iSER layer for the task identified by the ITT\
    \ qualifier.  The\n   iSER layer may require a certain number of RCaP-specific\
    \ resources\n   associated with the ITT for each new iSCSI task.  In the normal\n\
    \   course of execution, these task-level resources in the iSER layer are\n  \
    \ assumed to be transparently allocated on each task initiation and\n   deallocated\
    \ on the conclusion of each task as appropriate.  In\n   exception scenarios where\
    \ the task does not conclude with a SCSI\n   Response PDU, the iSER layer needs\
    \ to be notified of the individual\n   task terminations to aid its task-level\
    \ resource management.  This\n   Operational Primitive is used for this purpose\
    \ and is not needed when\n   a SCSI Response PDU normally concludes a task.  Note\
    \ that RCaP-\n   specific task resources are deallocated by the iSER layer when\
    \ a SCSI\n   Response PDU normally concludes a task, even if the SCSI status was\n\
    \   not success.\n"
- title: 3.2.  Operational Primitives Used by iSER
  contents:
  - "3.2.  Operational Primitives Used by iSER\n   The iSER layer MUST use the following\
    \ Operational Primitives offered\n   by the iSCSI protocol layer when the connection\
    \ is in iSER-assisted\n   mode.\n"
- title: 3.2.1.  Control_Notify
  contents:
  - "3.2.1.  Control_Notify\n      Input qualifiers:  Connection_Handle, an iSCSI\
    \ control-type PDU\n      Return results:  Not specified\n   This is used by the\
    \ iSER layers at the initiator and the target to\n   notify the iSCSI layer of\
    \ the availability of an inbound iSCSI\n   control-type PDU.  A PDU is described\
    \ as \"available\" to the iSCSI\n   layer when the iSER layer notifies the iSCSI\
    \ layer of the reception\n   of that inbound PDU, along with an implementation-specific\
    \ indication\n   as to where the received PDU is.\n"
- title: 3.2.2.  Data_Completion_Notify
  contents:
  - "3.2.2.  Data_Completion_Notify\n      Input qualifiers:  Connection_Handle, ITT,\
    \ SN\n      Return results:  Not specified\n   This is used by the iSER layer\
    \ to notify the iSCSI layer of the\n   completion of the outbound data transfer\
    \ that was requested by the\n   iSCSI layer only if the invocation of the Put_Data\
    \ Operational\n   Primitive (see Section 3.1.2) was qualified with Notify_Enable\
    \ set.\n   SN refers to the DataSN associated with the SCSI Data-In PDU.\n   This\
    \ is used by the iSER layer to notify the iSCSI layer of the\n   completion of\
    \ the inbound data transfer that was requested by the\n   iSCSI layer only if\
    \ the invocation of the Get_Data Operational\n   Primitive (see Section 3.1.3)\
    \ was qualified with Notify_Enable set.\n   SN refers to the R2TSN associated\
    \ with the R2T PDU.\n"
- title: 3.2.3.  Data_ACK_Notify
  contents:
  - "3.2.3.  Data_ACK_Notify\n      Input qualifier:  Connection_Handle, ITT, DataSN\n\
    \      Return results:  Not specified\n   This is used by the iSER layer at the\
    \ target to notify the iSCSI\n   layer of the arrival of the data acknowledgement\
    \ (as defined in\n   [iSCSI]) requested earlier by the iSCSI layer for the outbound\
    \ data\n   transfer via an invocation of the Put_Data Operational Primitive\n\
    \   where the A-bit in the SCSI Data-In PDU is set to one.  See Section\n   7.3.5.\
    \  DataSN refers to the expected DataSN of the next SCSI Data-In\n   PDU that\
    \ immediately follows the SCSI Data-In PDU with the A-bit set\n   to which this\
    \ notification corresponds, with semantics as defined in\n   [iSCSI].\n"
- title: 3.2.4.  Connection_Terminate_Notify
  contents:
  - "3.2.4.  Connection_Terminate_Notify\n      Input qualifiers:  Connection_Handle\n\
    \      Return results:  Not specified\n   This is used by the iSER layers at the\
    \ initiator and the target to\n   notify the iSCSI layer of the unsolicited termination\
    \ or failure of\n   an iSCSI/iSER connection.  The iSER layer MUST deallocate\
    \ the\n   connection and task resources associated with the terminated\n   connection\
    \ before the invocation of this Operational Primitive.  Note\n   that the Connection_Terminate_Notify\
    \ Operational Primitive is not\n   invoked when the termination of the connection\
    \ was earlier requested\n   by the local iSCSI layer.\n"
- title: 3.3.  iSCSI Protocol Usage Requirements
  contents:
  - "3.3.  iSCSI Protocol Usage Requirements\n   To operate in iSER-assisted mode,\
    \ the iSCSI layers at both the\n   initiator and the target MUST negotiate the\
    \ RDMAExtensions key (see\n   Section 6.3) to \"Yes\" on the leading connection.\
    \  If the\n   RDMAExtensions key is not negotiated to \"Yes\", then iSER-assisted\n\
    \   mode MUST NOT be used.  If the RDMAExtensons key is negotiated to\n   \"Yes\"\
    , but the invocation of the Allocate_Connection_Resources\n   Operational Primitive\
    \ to the iSER layer fails, the iSCSI layer MUST\n   fail the iSCSI Login process\
    \ or terminate the connection as\n   appropriate.  See Section 10.1.3.1 for details.\n\
    \   If the RDMAExtensions key is negotiated to \"Yes\", the iSCSI layer\n   MUST\
    \ satisfy the following protocol usage requirements from the iSER\n   protocol:\n\
    \   1.  The iSCSI layer at the initiator MUST set ExpDataSN to zero in\n     \
    \  Task Management Function Requests for Task Allegiance\n       Reassignment\
    \ for read/bidirectional commands, so as to cause the\n       target to send all\
    \ unacknowledged read data.\n   2.  The iSCSI layer at the target MUST always\
    \ return the SCSI status\n       in a separate SCSI Response PDU for read commands,\
    \ i.e., there\n       MUST NOT be a \"phase collapse\" in concluding a SCSI Read\
    \ Command.\n   3.  The iSCSI layers at both the initiator and the target MUST\n\
    \       support the keys as defined in Section 6 on Login/Text\n       Operational\
    \ Keys.  If used as specified, these keys MUST NOT be\n       answered with NotUnderstood,\
    \ and the semantics as defined MUST be\n       followed for each iSER-assisted\
    \ connection.\n   4.  The iSCSI layer at the initiator MUST NOT issue SNACKs for\
    \ PDUs.\n"
- title: 4.  Lower-Layer Interface Requirements
  contents:
  - '4.  Lower-Layer Interface Requirements

    '
- title: 4.1.  Interactions with the RCaP Layer
  contents:
  - "4.1.  Interactions with the RCaP Layer\n   The iSER protocol layer is layered\
    \ on top of an RCaP layer (see\n   Figure 1) and the following are the key features\
    \ that are assumed to\n   be supported by any RCaP layer:\n   *  The RCaP layer\
    \ supports all basic RDMA operations, including the\n      RDMA Write Operation,\
    \ RDMA Read Operation, and Send Operation.\n   *  The RCaP layer provides reliable,\
    \ in-order message delivery and\n      direct data placement.\n   *  When the\
    \ iSER layer initiates an RDMA Read Operation following an\n      RDMA Write Operation\
    \ on one RCaP Stream, the RDMA Read Response\n      Message processing on the\
    \ remote node will be started only after\n      the preceding RDMA Write Message\
    \ payload is placed in the memory\n      of the remote node.\n   *  The RCaP layer\
    \ encapsulates a single iSER Message into a single\n      RCaP Message on the\
    \ Data Source side.  The RCaP layer decapsulates\n      the iSER Message before\
    \ delivering it to the iSER layer on the\n      Data Sink side.\n   *  For an\
    \ RCaP layer that supports the Send with Invalidate Message\n      (e.g., iWARP),\
    \ when the iSER layer provides the STag to be\n      remotely invalidated to the\
    \ RCaP layer for a Send with Invalidate\n      Message, the RCaP layer uses this\
    \ STag as the STag to be\n      invalidated in the Send with Invalidate Message.\n\
    \   *  The RCaP layer uses the STag and Tagged Offset provided by the\n      iSER\
    \ layer for the RDMA Write and RDMA Read Request Messages.\n   *  When the RCaP\
    \ layer delivers the content of an RDMA Send Message\n      to the iSER layer,\
    \ the RCaP layer provides the length of the RDMA\n      Send Message.  This ensures\
    \ that the iSER layer does not have to\n      carry a length field in the iSER\
    \ header.\n   *  When the RCaP layer delivers the Send Message to the iSER layer,\n\
    \      it notifies the iSER layer with the mechanism provided on that\n      interface.\n\
    \   *  For an RCaP layer that supports the Send with Invalidate Message\n    \
    \  (e.g., iWARP), when the RCaP layer delivers a Send with Invalidate\n      Message\
    \ to the iSER layer, it passes the value of the STag that\n      was invalidated.\n\
    \   *  The RCaP layer propagates all status and error indications to the\n   \
    \   iSER layer.\n   *  For a transport layer that operates in byte stream mode\
    \ such as\n      TCP, the RCaP implementation supports the enabling of the RDMA\n\
    \      mode after connection establishment and the exchange of Login\n      parameters\
    \ in byte stream mode.  For a transport layer that\n      provides message delivery\
    \ capability such as [IB], the RCaP\n      implementation supports the direct\
    \ use of the messaging capability\n      by the iSCSI layer for the Login Phase\
    \ after connection\n      establishment and before enabling iSER-assisted mode.\
    \  (In the\n      specific example of InfiniBand [IB], the iSCSI layer uses IB\n\
    \      messages to transfer iSCSI PDUs for the Login Phase after\n      connection\
    \ establishment and before enabling iSER-assisted mode.)\n   *  Whenever the iSER\
    \ layer terminates the RCaP Stream, the RCaP layer\n      terminates the associated\
    \ connection.\n"
- title: 4.2.  Interactions with the Transport Layer
  contents:
  - "4.2.  Interactions with the Transport Layer\n   After the iSER connection is\
    \ established, the RCaP layer and the\n   underlying transport layer are responsible\
    \ for maintaining the\n   connection and reporting to the iSER layer any connection\
    \ failures.\n"
- title: 5.  Connection Setup and Termination
  contents:
  - '5.  Connection Setup and Termination

    '
- title: 5.1.  iSCSI/iSER Connection Setup
  contents:
  - "5.1.  iSCSI/iSER Connection Setup\n   During connection setup, the iSCSI layer\
    \ at the initiator is\n   responsible for establishing a connection with the target.\
    \  After the\n   connection is established, the iSCSI layers at the initiator\
    \ and the\n   target enter the Login Phase using the same rules as outlined in\n\
    \   [iSCSI].  The connection transitions into the iSCSI Full Feature\n   Phase\
    \ in iSER-assisted mode following a successful login negotiation\n   between the\
    \ initiator and the target in which iSER-assisted mode is\n   negotiated and the\
    \ connection resources necessary to support RCaP\n   have been allocated at both\
    \ the initiator and the target.  The same\n   connection MUST be used for both\
    \ the iSCSI Login Phase and the\n   subsequent iSER-assisted Full Feature Phase.\n\
    \   For a transport layer that operates in byte stream mode such as TCP,\n   the\
    \ RCaP implementation supports the enabling of the RDMA mode after\n   connection\
    \ establishment and the exchange of Login parameters in byte\n   stream mode.\
    \  For a transport layer that provides message delivery\n   capability such as\
    \ [IB], the RCaP implementation supports the use of\n   the messaging capability\
    \ by the iSCSI layer directly for the Login\n   Phase after connection establishment\
    \ before enabling iSER-assisted\n   mode.\n   iSER-assisted mode MUST NOT be enabled\
    \ unless it is negotiated on the\n   leading connection during the LoginOperationalNegotiation\
    \ stage of\n   the iSCSI Login Phase.  iSER-assisted mode is negotiated using\
    \ the\n   RDMAExtensions=<boolean-value> key.  Both the initiator and the\n  \
    \ target MUST exchange the RDMAExtensions key with the value set to\n   \"Yes\"\
    \ to enable iSER-assisted mode.  If both the initiator and the\n   target fail\
    \ to negotiate the RDMAExtensions key set to \"Yes\", then\n   the connection\
    \ MUST continue with the login semantics as defined in\n   [iSCSI].  If the RDMAExtensions\
    \ key is not negotiated to Yes, then\n   for some RCaP implementation (such as\
    \ [IB]), the existing connection\n   may need to be torn down and a new connection\
    \ may need to be\n   established in TCP-capable mode.  (For InfiniBand, this will\
    \ require\n   a connection like [IPoIB].)\n   iSER-assisted mode is defined for\
    \ a Normal session only, and the\n   RDMAExtensions key MUST NOT be negotiated\
    \ for a Discovery session.\n   Discovery sessions are always conducted using the\
    \ transport layer as\n   described in [iSCSI].\n   An iSER-enabled node is not\
    \ required to initiate the RDMAExtensions\n   key exchange if its preference is\
    \ for the Traditional iSCSI mode.\n   The RDMAExtensions key, if offered, MUST\
    \ be sent in the first\n   available Login Response or Login Request PDU in the\n\
    \   LoginOperationalNegotiation stage.  This is due to the fact that the\n   value\
    \ of some Login parameters might depend on whether or not iSER-\n   assisted mode\
    \ is enabled.\n   iSER-assisted mode is a session-wide attribute.  If both the\n\
    \   initiator and the target negotiated RDMAExtensions=\"Yes\" on the\n   leading\
    \ connection of a session, then all subsequent connections of\n   the same session\
    \ MUST enable iSER-assisted mode without having to\n   exchange RDMAExtensions\
    \ keys during the iSCSI Login Phase.\n   Conversely, if both the initiator and\
    \ the target failed to negotiate\n   RDMAExtensions to \"Yes\" on the leading\
    \ connection of a session, then\n   the RDMAExtensions key MUST NOT be negotiated\
    \ further on any\n   additional subsequent connection of the session.\n   When\
    \ the RDMAExtensions key is negotiated to \"Yes\", the HeaderDigest\n   and the\
    \ DataDigest keys MUST be negotiated to \"None\" on all\n   iSCSI/iSER connections\
    \ participating in that iSCSI session.  This is\n   because, for an iSCSI/iSER\
    \ connection, RCaP is responsible for\n   providing error detection that is at\
    \ least as good as a 32-bit CRC\n   for all iSER Messages.  Furthermore, all SCSI\
    \ Read data are sent\n   using RDMA Write Messages instead of the SCSI Data-In\
    \ PDUs, and all\n   solicited SCSI Write data are sent using RDMA Read Response\
    \ Messages\n   instead of the SCSI Data-Out PDUs.  HeaderDigest and DataDigest\
    \ that\n   apply to iSCSI PDUs would not be appropriate for RDMA Read and RDMA\n\
    \   Write operations used with iSER.\n"
- title: 5.1.1.  Initiator Behavior
  contents:
  - "5.1.1.  Initiator Behavior\n   If the outcome of the iSCSI negotiation is to\
    \ enable iSER-assisted\n   mode, then on the initiator side, prior to sending\
    \ the Login Request\n   with the T (Transit) bit set to one and the NSG (Next\
    \ Stage) field\n   set to FullFeaturePhase, the iSCSI layer SHOULD request the\
    \ iSER\n   layer to allocate the connection resources necessary to support RCaP\n\
    \   by invoking the Allocate_Connection_Resources Operational Primitive.\n   The\
    \ connection resources required are defined by the implementation\n   and are\
    \ outside the scope of this specification.  The iSCSI layer may\n   invoke the\
    \ Notice_Key_Values Operational Primitive before invoking\n   the Allocate_Connection_Resources\
    \ Operational Primitive to request\n   the iSER layer to take note of the negotiated\
    \ values of the iSCSI\n   keys for the connection.  The specific keys to be passed\
    \ in as input\n   qualifiers are implementation dependent.  These may include,\
    \ but are\n   not limited to, MaxOutstandingR2T and ErrorRecoveryLevel.\n   Among\
    \ the connection resources allocated at the initiator is the\n   Inbound RDMA\
    \ Read Queue Depth (IRD).  As described in Section 9.5.1,\n   R2Ts are transformed\
    \ by the target into RDMA Read operations.  IRD\n   limits the maximum number\
    \ of simultaneously incoming outstanding RDMA\n   Read Requests per an RCaP Stream\
    \ from the target to the initiator.\n   The required value of IRD is outside the\
    \ scope of the iSER\n   specification.  The iSER layer at the initiator MUST set\
    \ IRD to 1 or\n   higher if R2Ts are to be used in the connection.  However, the\
    \ iSER\n   layer at the initiator MAY set IRD to zero based on implementation\n\
    \   configuration; setting IRD to zero indicates that no R2Ts will be\n   used\
    \ on that connection.  Initially, the iSER-IRD value at the\n   initiator SHOULD\
    \ be set to the IRD value at the initiator and MUST\n   NOT be more than the IRD\
    \ value.\n   On the other hand, the Outbound RDMA Read Queue Depth (ORD) MAY be\n\
    \   set to zero since the iSER layer at the initiator does not issue RDMA\n  \
    \ Read Requests to the target.\n   Failure to allocate the requested connection\
    \ resources locally\n   results in a login failure, and its handling is described\
    \ in Section\n   10.1.3.1.\n   The iSER layer MUST return a success status to\
    \ the iSCSI layer in\n   response to the Allocate_Connection_Resources Operational\
    \ Primitive.\n   After the target returns the Login Response with the T bit set\
    \ to one\n   and the NSG field set to FullFeaturePhase, and a Status-Class of\
    \ 0x00\n   (Success), the iSCSI layer MUST invoke the Enable_Datamover\n   Operational\
    \ Primitive with the following qualifiers.  (See Section\n   10.1.4.6 for the\
    \ case when the Status-Class is not Success.)\n      a. Connection_Handle that\
    \ identifies the iSCSI connection.\n      b. Transport_Connection_Descriptor that\
    \ identifies the specific\n         transport connection associated with the Connection_Handle.\n\
    \   The iSER layer MUST send the iSER Hello Message as the first iSER\n   Message\
    \ only if iSERHelloRequired is negotiated to \"Yes\".  See\n   Section 5.1.3 on\
    \ iSER Hello Exchange.\n   If the iSCSI layer on the initiator side allocates\
    \ the connection\n   resources to support RCaP only after it receives the final\
    \ Login\n   Response PDU from the target, then it may not be able to handle the\n\
    \   number of unexpected iSCSI control-type PDUs (as declared by the\n   MaxOutstandingUnexpectedPDUs\
    \ key from the initiator) that can be sent\n   by the target before the buffer\
    \ resources are allocated at the\n   initiator side.  In this case, the iSERHelloRequired\
    \ key SHOULD be\n   negotiated to \"Yes\" so that the initiator can allocate the\
    \ connection\n   resources before sending the iSER Hello Message.  See Section\
    \ 5.1.3\n   for more details.\n"
- title: 5.1.2.  Target Behavior
  contents:
  - "5.1.2.  Target Behavior\n   If the outcome of the iSCSI negotiation is to enable\
    \ iSER-assisted\n   mode, then on the target side, prior to sending the Login\
    \ Response\n   with the T (Transit) bit set to one and the NSG (Next Stage) field\n\
    \   set to FullFeaturePhase, the iSCSI layer MUST request the iSER layer\n   to\
    \ allocate the resources necessary to support RCaP by invoking the\n   Allocate_Connection_Resources\
    \ Operational Primitive.  The connection\n   resources required are defined by\
    \ implementation and are outside the\n   scope of this specification.  Optionally,\
    \ the iSCSI layer may invoke\n   the Notice_Key_Values Operational Primitive before\
    \ invoking the\n   Allocate_Connection_Resources Operational Primitive to request\
    \ the\n   iSER layer to take note of the negotiated values of the iSCSI keys\n\
    \   for the connection.  The specific keys to be passed in as input\n   qualifiers\
    \ are implementation dependent.  These may include, but not\n   limited to, MaxOutstandingR2T\
    \ and ErrorRecoveryLevel.\n   Premature allocation of RCaP connection resources\
    \ can expose an iSER\n   target to a resource exhaustion attack on those resources\
    \ via\n   multiple iSER connections that progress only to the point at which\n\
    \   the implementation allocates the RCaP connection resources.  The\n   countermeasure\
    \ for this attack is initiator authentication; the iSCSI\n   layer MUST NOT request\
    \ the iSER layer to allocate the connection\n   resources necessary to support\
    \ RCaP until the iSCSI layer is\n   sufficiently far along in the iSCSI Login\
    \ Phase that it is reasonably\n   certain that the peer side is not an attacker.\
    \  In particular, if the\n   Login Phase includes a SecurityNegotiation stage,\
    \ the iSCSI layer\n   MUST defer the connection resource allocation (i.e., invoking\
    \ the\n   Allocate_Connection_Resources Operational Primitive) to the\n   LoginOperationalNegotiation\
    \ stage ([iSCSI]) so that the resource\n   allocation occurs after the authentication\
    \ phase is completed.\n   Among the connection resources allocated at the target\
    \ is the\n   Outbound RDMA Read Queue Depth (ORD).  As described in Section 9.5.1,\n\
    \   R2Ts are transformed by the target into RDMA Read operations.  The\n   ORD\
    \ limits the maximum number of simultaneously outstanding RDMA Read\n   Requests\
    \ per RCaP Stream from the target to the initiator.\n   Initially, the iSER-ORD\
    \ value at the target SHOULD be set to the ORD\n   value at the target.\n   On\
    \ the other hand, the IRD at the target MAY be set to zero since the\n   iSER\
    \ layer at the target does not expect RDMA Read Requests to be\n   issued by the\
    \ initiator.\n   Failure to allocate the requested connection resources locally\n\
    \   results in a login failure, and its handling is described in Section\n   10.1.3.1.\n\
    \   If the iSER layer at the target is successful in allocating the\n   connection\
    \ resources necessary to support RCaP, the following events\n   MUST occur in\
    \ the specified sequence:\n   1. The iSER layer MUST return a success status to\
    \ the iSCSI layer in\n      response to the Allocate_Connection_Resources Operational\n\
    \      Primitive.\n   2. The iSCSI layer MUST invoke the Enable_Datamover Operational\n\
    \      Primitive with the following qualifiers:\n      a. Connection_Handle that\
    \ identifies the iSCSI connection.\n      b. Transport_Connection_Descriptor that\
    \ identifies the specific\n         transport connection associated with the Connection_Handle.\n\
    \      c. The final transport-layer (e.g., TCP) message containing the\n     \
    \    Login Response with the T bit set to one and the NSG field set\n        \
    \ to FullFeaturePhase.\n   3. The iSER layer MUST send the final Login Response\
    \ PDU in the\n      native transport mode to conclude the iSCSI Login Phase. \
    \ If the\n      underlying transport is TCP, then the iSER layer MUST send the\n\
    \      final Login Response PDU in byte stream mode.\n   4. After receiving the\
    \ iSER Hello Message from the initiator, the\n      iSER layer MUST respond with\
    \ the iSER HelloReply Message to be\n      sent as the first iSER Message if iSERHelloRequired\
    \ is negotiated\n      to \"Yes\".  If the iSER layer receives an iSER Hello Message\
    \ when\n      iSERHelloRequired is negotiated to \"No\", then this MUST be treated\n\
    \      as an iSER protocol error.  See Section 5.1.3 on iSER Hello\n      Exchange\
    \ for more details.\n   Note: In the above sequence, the operations as described\
    \ in items 3\n   and 4 MUST be performed atomically for iWARP connections.  Failure\
    \ to\n   do this may result in race conditions.\n"
- title: 5.1.3.  iSER Hello Exchange
  contents:
  - "5.1.3.  iSER Hello Exchange\n   If iSERHelloRequired is negotiated to \"Yes\"\
    , the first iSER Message\n   sent by the iSER layer at the initiator to the target\
    \ MUST be the\n   iSER Hello Message.  The iSER Hello Message is used by the iSER\
    \ layer\n   at the initiator to declare iSER parameters to the target.  See\n\
    \   Section 9.3 on iSER Header Format for iSER Hello Message.\n   Conversely,\
    \ if iSERHelloRequired is negotiated to \"No\", then the iSER\n   layer at the\
    \ initiator MUST NOT send an iSER Hello Message.\n   In response to the iSER Hello\
    \ Message, the iSER layer at the target\n   MUST return the iSER HelloReply Message\
    \ as the first iSER Message\n   sent by the target if iSERHelloRequired is negotiated\
    \ to \"Yes\".  The\n   iSER HelloReply Message is used by the iSER layer at the\
    \ target to\n   declare iSER parameters to the initiator.  See Section 9.4 on\
    \ iSER\n   Header Format for iSER HelloReply Message.  If the iSER layer\n   receives\
    \ an iSER Hello Message when iSERHelloRequired is negotiated\n   to \"No\", then\
    \ this MUST be treated as an iSER protocol error.  See\n   Section 10.1.3.4 on\
    \ iSER Protocol Errors on for more details.\n   In the iSER Hello Message, the\
    \ iSER layer at the initiator declares\n   the iSER-IRD value to the target.\n\
    \   Upon receiving the iSER Hello Message, the iSER layer at the target\n   MUST\
    \ set the iSER-ORD value to the minimum of the iSER-ORD value at\n   the target\
    \ and the iSER-IRD value declared by the initiator.  In\n   order to free up the\
    \ unused resources, the iSER layer at the target\n   MAY adjust (lower) its ORD\
    \ value to match the iSER-ORD value if the\n   iSER-ORD value is smaller than\
    \ the ORD value at the target.\n   In the iSER HelloReply Message, the iSER layer\
    \ at the target declares\n   the iSER-ORD value to the initiator.\n   Upon receiving\
    \ the iSER HelloReply Message, the iSER layer at the\n   initiator MAY adjust\
    \ (lower) its IRD value to match the iSER-ORD\n   value in order to free up the\
    \ unused resources, if the iSER-ORD value\n   declared by the target is smaller\
    \ than the iSER-IRD value declared by\n   the initiator.\n   It is an iSER-level\
    \ negotiation failure if the iSER parameters\n   declared in the iSER Hello Message\
    \ by the initiator are unacceptable\n   to the target.  This includes the following:\n\
    \   *  The initiator-declared iSER-IRD value is greater than 0, and the\n    \
    \  target-declared iSER-ORD value is 0.\n   *  The initiator-supported and the\
    \ target-supported iSER protocol\n      versions do not overlap.\n   See Section\
    \ 10.1.3.2 on the handling of the error situation.\n   An initiator that conforms\
    \ to [RFC5046] allocates connection\n   resources before sending the Login Request\
    \ with the T (Transit) bit\n   set to one and the NSG (Next Stage) field set to\
    \ FullFeaturePhase.\n   (For brevity, this is referred to as \"early\" connection\
    \ allocation.)\n   The current iSER specification relaxes this requirement to\
    \ allow an\n   initiator to allocate connection resources after it receives the\n\
    \   final Login Response PDU from the target.  (For brevity, this is\n   referred\
    \ to as \"late\" connection allocation.)  An initiator that\n   employs \"late\"\
    \ connection allocation may encounter problems (e.g.,\n   RCaP connection closure)\
    \ with a target that sends unexpected iSCSI\n   PDUs immediately upon transitioning\
    \ to Full Feature Phase, as allowed\n   by the negotiated value of the MaxOutstandingUnexpectedPDUs\
    \ key.  The\n   only way to prevent this situation in full generality is to use\
    \ iSER\n   Hello Messages, as they enable the initiator to allocate its\n   connection\
    \ resources before sending its iSER Hello Message.  The\n   iSERHelloRequired\
    \ key is used by the initiator to determine if it is\n   dealing with a target\
    \ that supports the iSER Hello exchanges.\n   Fortunately, known iSER target implementations\
    \ do not take full\n   advantage of the number of allowed unexpected PDUs immediately\
    \ upon\n   transitioning into Full Feature Phase, thus enabling an initiator\n\
    \   workaround that involves a smaller quantity of connection resources\n   prior\
    \ to Full Feature Phase, as explained further below.\n   In the following summary,\
    \ where \"late\" connection allocation is\n   practiced, an initiator that follows\
    \ [RFC5046] is referred to as an\n   \"old\" initiator; otherwise, it is referred\
    \ to as a \"new\" initiator.\n   Similarly, a target that does not support the\
    \ iSERHelloRequired key\n   (and responds with \"NotUnderstood\" when negotiating\
    \ the\n   iSERHelloRequired key) is referred to as an \"old\" target; otherwise,\n\
    \   it is referred to as a \"new\" target.  Note that an \"old\" target can\n\
    \   still support the iSER Hello exchanges, but this fact is not known by\n  \
    \ the initiator.  A \"new\" target can also respond with \"No\" when\n   negotiating\
    \ the iSERHelloRequired key.  In this case, its behavior\n   with respect to \"\
    late\" connection allocation is similar to an \"old\"\n   target.\n   A \"new\"\
    \ initiator will work fine with a \"new\" target.\n   For an \"old\" initiator\
    \ and an \"old\" target, the failure by the\n   initiator to handle the number\
    \ of unexpected iSCSI control-type PDUs\n   that are sent by the target before\
    \ the buffer resources are allocated\n   at the initiator can result in the failure\
    \ of the iSER session caused\n   by closure of the underlying RCaP connection.\
    \  For the \"old\" target,\n   there is a known implementation that sends one\
    \ unexpected iSCSI\n   control-type PDU after sending the final Login Response\
    \ and then\n   waits awhile before sending the next one.  This tends to alleviate\n\
    \   somewhat the buffer allocation problem at the initiator.\n   For a \"new\"\
    \ initiator and an \"old\" target, the failure by the\n   initiator to handle\
    \ the number of unexpected iSCSI control-type PDUs\n   that are sent by the target\
    \ before the buffer resources are allocated\n   at the initiator can result in\
    \ the failure of the iSER session caused\n   by closure of the underlying RCaP\
    \ connection.  A \"new\" initiator MAY\n   choose to terminate the connection;\
    \ otherwise, it SHOULD do one of\n   the following:\n   1. Allocate the connection\
    \ resources before sending the final Login\n      Request PDU.\n   2. Allocate\
    \ one or more buffers for receiving unexpected control-type\n      PDUs from the\
    \ target before sending the final Login Request PDU.\n      This reduces the possibility\
    \ of the unexpected control-type PDUs\n      causing the RCaP connection to close\
    \ before the connection\n      resources have been allocated.\n   For an \"old\"\
    \ initiator and a \"new\" target, if the iSERHelloRequired\n   key is not negotiated,\
    \ a \"new\" target MUST still respond with the\n   iSER HelloReply Message when\
    \ it receives the iSER Hello Message.  If\n   the iSERHelloRequired key is negotiated\
    \ to \"No\" or \"NotUnderstood\", a\n   \"new\" target MAY choose to terminate\
    \ the connection; otherwise, it\n   SHOULD delay sending any unexpected control-type\
    \ PDUs until one of\n   the following events has occurred:\n   1. A PDU is received\
    \ from the initiator after it sends the final\n      Login Response PDU.\n   2.\
    \ A system-configurable timeout period (say, one second) has\n      expired.\n"
- title: 5.2.  iSCSI/iSER Connection Termination
  contents:
  - '5.2.  iSCSI/iSER Connection Termination

    '
- title: 5.2.1.  Normal Connection Termination at the Initiator
  contents:
  - "5.2.1.  Normal Connection Termination at the Initiator\n   The iSCSI layer at\
    \ the initiator terminates an iSCSI/iSER connection\n   normally by invoking the\
    \ Send_Control Operational Primitive qualified\n   with the Logout Request PDU.\
    \  The iSER layer at the initiator MUST\n   use a Send Message to send the Logout\
    \ Request PDU to the target.  The\n   SendSE Message should be used if supported\
    \ by the RCaP layer (e.g.,\n   iWARP).  After the iSER layer at the initiator\
    \ receives the Send\n   Message containing the Logout Response PDU from the target,\
    \ it MUST\n   notify the iSCSI layer by invoking the Control_Notify Operational\n\
    \   Primitive qualified with the Logout Response PDU.\n   After the iSCSI logout\
    \ process is complete, the iSCSI layer at the\n   target is responsible for closing\
    \ the iSCSI/iSER connection as\n   described in Section 5.2.2.  After the RCaP\
    \ layer at the initiator\n   reports that the connection has been closed, the\
    \ iSER layer at the\n   initiator MUST deallocate all connection and task resources\
    \ (if any)\n   associated with the connection, and invalidate the Local Mappings\
    \ (if\n   any) before notifying the iSCSI layer by invoking the\n   Connection_Terminate_Notify\
    \ Operational Primitive.\n"
- title: 5.2.2.  Normal Connection Termination at the Target
  contents:
  - "5.2.2.  Normal Connection Termination at the Target\n   Upon receiving the Send\
    \ Message containing the Logout Request PDU,\n   the iSER layer at the target\
    \ MUST notify the iSCSI layer at the\n   target by invoking the Control_Notify\
    \ Operational Primitive qualified\n   with the Logout Request PDU.  The iSCSI\
    \ layer completes the logout\n   process by invoking the Send_Control Operational\
    \ Primitive qualified\n   with the Logout Response PDU.  The iSER layer at the\
    \ target MUST use\n   a Send Message to send the Logout Response PDU to the initiator.\
    \  The\n   SendSE Message should be used if supported by the RCaP layer (e.g.,\n\
    \   iWARP).  After the iSCSI logout process is complete, the iSCSI layer\n   at\
    \ the target MUST request the iSER layer at the target to terminate\n   the RCaP\
    \ Stream by invoking the Connection_Terminate Operational\n   Primitive.\n   As\
    \ part of the termination process, the RCaP layer MUST close the\n   connection.\
    \  When the RCaP layer notifies the iSER layer after the\n   RCaP Stream and the\
    \ associated connection are terminated, the iSER\n   layer MUST deallocate all\
    \ connection and task resources (if any)\n   associated with the connection, and\
    \ invalidate the Local and Remote\n   Mappings (if any).\n"
- title: 5.2.3.  Termination without Logout Request/Response PDUs
  contents:
  - '5.2.3.  Termination without Logout Request/Response PDUs

    '
- title: 5.2.3.1.  Connection Termination Initiated by the iSCSI layer
  contents:
  - "5.2.3.1.  Connection Termination Initiated by the iSCSI layer\n   The Connection_Terminate\
    \ Operational Primitive MAY be invoked by the\n   iSCSI layer to request the iSER\
    \ layer to terminate the RCaP Stream\n   without having previously exchanged the\
    \ Logout Request and Logout\n   Response PDUs between the two iSCSI/iSER nodes.\
    \  As part of the\n   termination process, the RCaP layer will close the connection.\
    \  When\n   the RCaP layer notifies the iSER layer after the RCaP Stream and the\n\
    \   associated connection are terminated, the iSER layer MUST perform the\n  \
    \ following actions.\n   If the Connection_Terminate Operational Primitive is\
    \ invoked by the\n   iSCSI layer at the target, then the iSER layer at the target\
    \ MUST\n   deallocate all connection and task resources (if any) associated with\n\
    \   the connection, and invalidate the Local and Remote Mappings (if\n   any).\n\
    \   If the Connection_Terminate Operational Primitive is invoked by the\n   iSCSI\
    \ layer at the initiator, then the iSER layer at the initiator\n   MUST deallocate\
    \ all connection and task resources (if any) associated\n   with the connection,\
    \ and invalidate the Local Mappings (if any).\n"
- title: 5.2.3.2.  Connection Termination Notification to the iSCSI layer
  contents:
  - "5.2.3.2.  Connection Termination Notification to the iSCSI layer\n   If the iSCSI/iSER\
    \ connection is terminated without the invocation of\n   Connection_Terminate\
    \ from the iSCSI layer, the iSER layer MUST notify\n   the iSCSI layer that the\
    \ iSCSI/iSER connection has been terminated by\n   invoking the Connection_Terminate_Notify\
    \ Operational Primitive.\n   Prior to invoking Connection_Terminate_Notify, the\
    \ iSER layer at the\n   target MUST deallocate all connection and task resources\
    \ (if any)\n   associated with the connection, and invalidate the Local and Remote\n\
    \   Mappings (if any).\n   Prior to invoking Connection_Terminate_Notify, the\
    \ iSER layer at the\n   initiator MUST deallocate all connection and task resources\
    \ (if any)\n   associated with the connection, and invalidate the Local Mappings\
    \ (if\n   any).\n   If the remote iSCSI/iSER node initiated the closing of the\
    \ connection\n   (e.g., by sending a TCP FIN or TCP RST), the iSER layer MUST\
    \ notify\n   the iSCSI layer after the RCaP layer reports that the connection\
    \ is\n   closed by invoking the Connection_Terminate_Notify Operational\n   Primitive.\n\
    \   Another example of a connection termination without a preceding\n   logout\
    \ is when the iSCSI layer at the initiator does an implicit\n   logout (connection\
    \ reinstatement).\n"
- title: 6.  Login/Text Operational Keys
  contents:
  - "6.  Login/Text Operational Keys\n   Certain iSCSI login/text operational keys\
    \ have restricted usage in\n   iSER, and additional keys are used to support the\
    \ iSER protocol\n   functionality.  All other keys defined in [iSCSI] and not\
    \ discussed\n   in this section may be used on iSCSI/iSER connections with the\
    \ same\n   semantics.\n"
- title: 6.1.  HeaderDigest and DataDigest
  contents:
  - "6.1.  HeaderDigest and DataDigest\n   Irrelevant when: RDMAExtensions=Yes\n \
    \  Negotiations resulting in RDMAExtensions=Yes for a session imply\n   HeaderDigest=None\
    \ and DataDigest=None for all connections in that\n   session and override the\
    \ settings, whether default or configured.\n"
- title: 6.2.  MaxRecvDataSegmentLength
  contents:
  - "6.2.  MaxRecvDataSegmentLength\n   For an iSCSI connection belonging to a session\
    \ in which\n   RDMAExtensions=Yes was negotiated on the leading connection of\
    \ the\n   session, MaxRecvDataSegmentLength need not be declared in the Login\n\
    \   Phase, and MUST be ignored if it is declared.  Instead,\n   InitiatorRecvDataSegmentLength\
    \ (as described in Section 6.5) and\n   TargetRecvDataSegmentLength (as described\
    \ in Section 6.4) keys are\n   negotiated.  The values of the local and remote\n\
    \   MaxRecvDataSegmentLength are derived from the\n   InitiatorRecvDataSegmentLength\
    \ and TargetRecvDataSegmentLength keys.\n   In the Full Feature Phase, the initiator\
    \ MUST consider the value of\n   its local MaxRecvDataSegmentLength (that it would\
    \ have declared to\n   the target) as having the value of InitiatorRecvDataSegmentLength,\n\
    \   and the value of the remote MaxRecvDataSegmentLength (that would have\n  \
    \ been declared by the target) as having the value of\n   TargetRecvDataSegmentLength.\
    \  Similarly, the target MUST consider the\n   value of its local MaxRecvDataSegmentLength\
    \ (that it would have\n   declared to the initiator) as having the value of\n\
    \   TargetRecvDataSegmentLength, and the value of the remote\n   MaxRecvDataSegmentLength\
    \ (that would have been declared by the\n   initiator) as having the value of\
    \ InitiatorRecvDataSegmentLength.\n   Note that RFC 3720 requires that when a\
    \ target receives a NOP-Out\n   request with a valid Initiator Task Tag, it responds\
    \ with a NOP-In\n   with the same Initiator Task Tag that was provided in the\
    \ NOP-Out\n   request.  Furthermore, it returns the first MaxRecvDataSegmentLength\n\
    \   bytes of the initiator-provided Ping Data.  Since there is no\n   MaxRecvDataSegmentLength\
    \ common to the initiator and the target in\n   iSER, the length of the data sent\
    \ with the NOP-Out request MUST NOT\n   exceed InitiatorMaxRecvDataSegmentLength.\n\
    \   The MaxRecvDataSegmentLength key is applicable only for iSCSI\n   control-type\
    \ PDUs.\n"
- title: 6.3.  RDMAExtensions
  contents:
  - "6.3.  RDMAExtensions\n   Use: LO (leading only)\n   Senders: Initiator and Target\n\
    \   Scope: SW (session-wide)\n   RDMAExtensions=<boolean-value>\n   Irrelevant\
    \ when: SessionType=Discovery\n   Default is No\n   Result function is AND\n \
    \  This key is used by the initiator and the target to negotiate the\n   support\
    \ for iSER-assisted mode.  To enable the use of iSER-assisted\n   mode, both the\
    \ initiator and the target MUST exchange\n   RDMAExtensions=Yes.  iSER-assisted\
    \ mode MUST NOT be used if either\n   the initiator or the target offers RDMAExtensions=No.\n\
    \   An iSER-enabled node is not required to initiate the RDMAExtensions\n   key\
    \ exchange if it prefers to operate in the Traditional iSCSI mode.\n   However,\
    \ if the RDMAExtensions key is to be negotiated, an initiator\n   MUST offer the\
    \ key in the first Login Request PDU in the\n   LoginOperationalNegotiation stage\
    \ of the leading connection, and a\n   target MUST offer the key in the first\
    \ Login Response PDU with which\n   it is allowed to do so (i.e., the first Login\
    \ Response PDU issued\n   after the first Login Request PDU with the C bit set\
    \ to zero) in the\n   LoginOperationalNegotiation stage of the leading connection.\
    \  In\n   response to the offered key=value pair of RDMAExtensions=yes, an\n \
    \  initiator MUST respond in the next Login Request PDU with which it is\n   allowed\
    \ to do so, and a target MUST respond in the next Login\n   Response PDU with\
    \ which it is allowed to do so.\n   Negotiating the RDMAExtensions key first enables\
    \ a node to negotiate\n   the optimal value for other keys.  Certain iSCSI keys\
    \ such as\n   MaxBurstLength, MaxOutstandingR2T, ErrorRecoveryLevel, InitialR2T,\n\
    \   ImmediateData, etc., may be negotiated differently depending on\n   whether\
    \ the connection is in Traditional iSCSI mode or iSER-assisted\n   mode.\n"
- title: 6.4.  TargetRecvDataSegmentLength
  contents:
  - "6.4.  TargetRecvDataSegmentLength\n   Use: IO (Initialize only)\n   Senders:\
    \ Initiator and Target\n   Scope: CO (connection-only)\n   Irrelevant when: RDMAExtensions=No\n\
    \   TargetRecvDataSegmentLength=<numerical-value-512-to-(2**24-1)>\n   Default\
    \ is 8192 bytes\n   Result function is minimum\n   This key is relevant only for\
    \ the iSCSI connection of an iSCSI\n   session if RDMAExtensions=Yes was negotiated\
    \ on the leading\n   connection of the session.  It is used by the initiator and\
    \ the\n   target to negotiate the maximum size of the data segment that an\n \
    \  initiator may send to the target in an iSCSI control-type PDU in the\n   Full\
    \ Feature Phase.  For SCSI Command PDUs and SCSI Data-Out PDUs\n   containing\
    \ non-immediate unsolicited data to be sent by the\n   initiator, the initiator\
    \ MUST send all non-Final PDUs with a data\n   segment size of exactly TargetRecvDataSegmentLength\
    \ whenever the PDUs\n   constitute a data sequence whose size is larger than\n\
    \   TargetRecvDataSegmentLength.\n"
- title: 6.5.  InitiatorRecvDataSegmentLength
  contents:
  - "6.5.  InitiatorRecvDataSegmentLength\n   Use: IO (Initialize only)\n   Senders:\
    \ Initiator and Target\n   Scope: CO (connection-only)\n   Irrelevant when: RDMAExtensions=No\n\
    \   InitiatorRecvDataSegmentLength=<numerical-value-512-to-(2**24-1)>\n   Default\
    \ is 8192 bytes\n   Result function is minimum\n   This key is relevant only for\
    \ the iSCSI connection of an iSCSI\n   session if RDMAExtensions=Yes was negotiated\
    \ on the leading\n   connection of the session.  It is used by the initiator and\
    \ the\n   target to negotiate the maximum size of the data segment that a\n  \
    \ target may send to the initiator in an iSCSI control-type PDU in the\n   Full\
    \ Feature Phase.\n"
- title: 6.6.  OFMarker and IFMarker
  contents:
  - "6.6.  OFMarker and IFMarker\n   Irrelevant when: RDMAExtensions=Yes\n   Negotiations\
    \ resulting in RDMAExtensions=Yes for a session imply\n   OFMarker=No and IFMarker=No\
    \ for all connections in that session and\n   override the settings, whether default\
    \ or configured.\n"
- title: 6.7.  MaxOutstandingUnexpectedPDUs
  contents:
  - "6.7.  MaxOutstandingUnexpectedPDUs\n   Use: LO (leading only), Declarative\n\
    \   Senders: Initiator and Target\n   Scope: SW (session-wide)\n   Irrelevant\
    \ when: RDMAExtensions=No\n   MaxOutstandingUnexpectedPDUs=\n      <numerical-value-from-2-to-(2**32-1)\
    \ | 0>\n   Default is 0\n   This key is used by the initiator and the target to\
    \ declare the\n   maximum number of outstanding \"unexpected\" iSCSI control-type\
    \ PDUs\n   that it can receive in the Full Feature Phase.  It is intended to\n\
    \   allow the receiving side to determine the amount of buffer resources\n   needed\
    \ beyond the normal flow control mechanism available in iSCSI.\n   An initiator\
    \ or target should select a value such that it would not\n   impose an unnecessary\
    \ constraint on the iSCSI layer under normal\n   circumstances.  The value of\
    \ 0 is defined to indicate that the\n   declarer has no limit on the maximum number\
    \ of outstanding\n   \"unexpected\" iSCSI control-type PDUs that it can receive.\
    \  See\n   Sections 8.1.1 and 8.1.2 for the usage of this key.  Note that iSER\n\
    \   Hello and HelloReply Messages are not iSCSI control-type PDUs and are\n  \
    \ not affected by this key.\n   For interoperability with implementations based\
    \ on [RFC5046], this\n   key SHOULD be negotiated because the default value of\
    \ 0 in [RFC5046]\n   is problematic for most implementations as it does not impose\
    \ a bound\n   on resources consumable by unexpected PDUs.\n"
- title: 6.8.  MaxAHSLength
  contents:
  - "6.8.  MaxAHSLength\n   Use: LO (leading only), Declarative\n   Senders: Initiator\
    \ and Target\n   Scope: SW (session-wide)\n   Irrelevant when: RDMAExtensions=No\n\
    \   MaxAHSLength=<numerical-value-from-2-to-(2**32-1) | 0>\n   Default is 256\n\
    \   This key is used by the initiator and target to declare the maximum\n   size\
    \ of AHS in an iSCSI control-type PDU that it can receive in the\n   Full Feature\
    \ Phase.  It is intended to allow the receiving side to\n   determine the amount\
    \ of resources needed for receive buffering.  An\n   initiator or target should\
    \ select a value such that it would not\n   impose an unnecessary constraint on\
    \ the iSCSI layer under normal\n   circumstances.  The value of 0 is defined to\
    \ indicate that the\n   declarer has no limit on the maximum size of AHS in iSCSI\
    \ control-\n   type PDUs that it can receive.\n   For interoperability with implementations\
    \ based on [RFC5046], an\n   initiator or target MAY terminate the connection\
    \ if it anticipates\n   MaxAHSLength to be greater than 256 and the key is not\
    \ understood by\n   its peer.\n"
- title: 6.9.  TaggedBufferForSolicitedDataOnly
  contents:
  - "6.9.  TaggedBufferForSolicitedDataOnly\n   Use: LO (leading only), Declarative\n\
    \   Senders: Initiator\n   Scope: SW (session-wide)\n   RDMAExtensions=<boolean-value>\n\
    \   Irrelevant when: RDMAExtensions=No\n   Default is No\n   This key is used\
    \ by the initiator to declare to the target the usage\n   of the Write Base Offset\
    \ in the iSER header of an iSCSI control-type\n   PDU.  When set to No, the Base\
    \ Offset is associated with an I/O\n   buffer that contains all the write data,\
    \ including both unsolicited\n   and solicited data.  When set to Yes, the Base\
    \ Offset is associated\n   with an I/O buffer that only contains solicited data.\n"
- title: 6.10.  iSERHelloRequired
  contents:
  - "6.10.  iSERHelloRequired\n   Use: LO (leading only), Declarative\n   Senders:\
    \ Initiator\n   Scope: SW (session-wide)\n   RDMAExtensions=<boolean-value>\n\
    \   Irrelevant when: RDMAExtensions=No\n   Default is No\n   This key is relevant\
    \ only for the iSCSI connection of an iSCSI\n   session if RDMAExtensions=Yes\
    \ was negotiated on the leading\n   connection of the session.  It is used by\
    \ the initiator to declare to\n   the target whether the iSER Hello Exchange is\
    \ required.  When set to\n   Yes, the iSER layers MUST perform the iSER Hello\
    \ Exchange as\n   described in Section 5.1.3.  When set to No, the iSER layers\
    \ MUST NOT\n   perform the iSER Hello Exchange.\n"
- title: 7.  iSCSI PDU Considerations
  contents:
  - "7.  iSCSI PDU Considerations\n   When a connection is in the iSER-assisted mode,\
    \ two types of message\n   transfers are allowed between the iSCSI layer (at the\
    \ initiator) and\n   the iSCSI layer (at the target).  These are known as the\
    \ iSCSI data-\n   type PDUs and the iSCSI control-type PDUs, and these terms are\n\
    \   described in the following sections.\n"
- title: 7.1.  iSCSI Data-Type PDU
  contents:
  - "7.1.  iSCSI Data-Type PDU\n   An iSCSI data-type PDU is defined as an iSCSI PDU\
    \ that causes data\n   transfer, transparent to the remote iSCSI layer, to take\
    \ place\n   between the peer iSCSI nodes in the Full Feature Phase of an\n   iSCSI/iSER\
    \ connection.  An iSCSI data-type PDU, when requested for\n   transmission by\
    \ the iSCSI layer in the sending node, results in the\n   data's transfer without\
    \ the participation of the iSCSI layers at the\n   sending and the receiving nodes.\
    \  This is due to the fact that the\n   PDU itself is not delivered as-is to the\
    \ iSCSI layer in the receiving\n   node.  Instead, the data transfer operations\
    \ are transformed into the\n   appropriate RDMA operations, which are handled\
    \ by the RDMA-Capable\n   Controller.  The set of iSCSI data-type PDUs consists\
    \ of SCSI Data-In\n   PDUs and R2T PDUs.\n   If the invocation of the Operational\
    \ Primitive by the iSCSI layer to\n   request the iSER layer to process an iSCSI\
    \ data-type PDU is qualified\n   with Notify_Enable set, then upon completing\
    \ the RDMA operation, the\n   iSER layer at the target MUST notify the iSCSI layer\
    \ at the target by\n   invoking the Data_Completion_Notify Operational Primitive\
    \ qualified\n   with the ITT and SN.  There is no data completion notification\
    \ at the\n   initiator since the RDMA operations are completely handled by the\n\
    \   RDMA-Capable Controller at the initiator and the iSER layer at the\n   initiator\
    \ is not involved with the data transfer associated with\n   iSCSI data-type PDUs.\n\
    \   If the invocation of the Operational Primitive by the iSCSI layer to\n   request\
    \ the iSER layer to process an iSCSI data-type PDU is qualified\n   with Notify_Enable\
    \ cleared, then upon completing the RDMA operation,\n   the iSER layer at the\
    \ target MUST NOT notify the iSCSI layer at the\n   target and MUST NOT invoke\
    \ the Data_Completion_Notify Operational\n   Primitive.\n   If an operation associated\
    \ with an iSCSI data-type PDU fails for any\n   reason, the contents of the Data\
    \ Sink buffers associated with the\n   operation are considered indeterminate.\n"
- title: 7.2.  iSCSI Control-Type PDU
  contents:
  - "7.2.  iSCSI Control-Type PDU\n   Any iSCSI PDU that is not an iSCSI data-type\
    \ PDU and also not a SCSI\n   Data-Out PDU carrying solicited data is defined\
    \ as an iSCSI control-\n   type PDU.  The iSCSI layer invokes the Send_Control\
    \ Operational\n   Primitive to request the iSER layer to process an iSCSI control-type\n\
    \   PDU.  iSCSI control-type PDUs are transferred using Send Messages of\n   RCaP.\
    \  Specifically, it is to be noted that SCSI Data-Out PDUs\n   carrying unsolicited\
    \ data are defined as iSCSI control-type PDUs.\n   See Section 7.3.4 on the treatment\
    \ of SCSI Data-Out PDUs.\n   When the iSER layer receives an iSCSI control-type\
    \ PDU, it MUST\n   notify the iSCSI layer by invoking the Control_Notify Operational\n\
    \   Primitive qualified with the iSCSI control-type PDU.\n"
- title: 7.3.  iSCSI PDUs
  contents:
  - "7.3.  iSCSI PDUs\n   This section describes the handling of each of the iSCSI\
    \ PDU types by\n   the iSER layer.  The iSCSI layer requests the iSER layer to\
    \ process\n   the iSCSI PDU by invoking the appropriate Operational Primitive.\
    \  A\n   Connection_Handle MUST qualify each of these invocations.  In\n   addition,\
    \ the BHS and the optional AHS of the iSCSI PDU as defined in\n   [iSCSI] MUST\
    \ qualify each of the invocations.  The qualifying\n   Connection_Handle, the\
    \ BHS, and the AHS are not explicitly listed in\n   the subsequent sections.\n"
- title: 7.3.1.  SCSI Command
  contents:
  - "7.3.1.  SCSI Command\n      Type:  control-type PDU\n      PDU-specific qualifiers\
    \ (for SCSI Write or bidirectional command):\n      ImmediateDataSize, UnsolicitedDataSize,\
    \ DataDescriptorOut\n      PDU-specific qualifiers (for SCSI Read or bidirectional\
    \ command):\n      DataDescriptorIn\n   The iSER layer at the initiator MUST send\
    \ the SCSI command in a Send\n   Message to the target.  The SendSE Message should\
    \ be used if\n   supported by the RCaP layer (e.g., iWARP).\n   For a SCSI Write\
    \ or bidirectional command, the iSCSI layer at the\n   initiator MUST invoke the\
    \ Send_Control Operational Primitive as\n   follows:\n   *  If there is immediate\
    \ data to be transferred for the SCSI write or\n      bidirectional command, the\
    \ qualifier ImmediateDataSize MUST be\n      used to define the number of bytes\
    \ of immediate unsolicited data\n      to be sent with the write or bidirectional\
    \ command, and the\n      qualifier DataDescriptorOut MUST be used to define the\
    \ initiator's\n      I/O Buffer containing the SCSI Write data.\n   *  If there\
    \ is unsolicited data to be transferred for the SCSI Write\n      or bidirectional\
    \ command, the qualifier UnsolicitedDataSize MUST\n      be used to define the\
    \ number of bytes of immediate and non-\n      immediate unsolicited data for\
    \ the command.  The iSCSI layer will\n      issue one or more SCSI Data-Out PDUs\
    \ for the non-immediate\n      unsolicited data.  See Section 7.3.4 on SCSI Data-Out.\n\
    \   *  If there is solicited data to be transferred for the SCSI Write or\n  \
    \    bidirectional command, as indicated when the Expected Data\n      Transfer\
    \ Length in the SCSI Command PDU exceeds the value of\n      UnsolicitedDataSize,\
    \ the iSER layer at the initiator MUST do the\n      following:\n      a. It MUST\
    \ allocate a Write STag for the I/O Buffer defined by the\n         qualifier\
    \ DataDescriptorOut.  DataDescriptorOut describes the\n         I/O buffer starting\
    \ with the immediate unsolicited data (if\n         any), followed by the non-immediate\
    \ unsolicited data (if any)\n         and solicited data.  When TaggedBufferForSolicitedDataOnly\
    \ is\n         negotiated to No, the Base Offset is associated with this I/O\n\
    \         Buffer.  When TaggedBufferForSolicitedDataOnly is negotiated to\n  \
    \       Yes, the Base Offset is associated with an I/O Buffer that\n         contains\
    \ only solicited data.\n      b. It MUST establish a Local Mapping that associates\
    \ the Initiator\n         Task Tag (ITT) to the Write STag.\n      c. It MUST\
    \ Advertise the Write STag and the Base Offset to the\n         target by sending\
    \ them in the iSER header of the iSER Message\n         (the payload of the Send\
    \ Message of RCaP) containing the SCSI\n         Write or bidirectional command\
    \ PDU.  The SendSE Message should\n         be used if supported by the RCaP layer\
    \ (e.g., iWARP).  See\n         Section 9.2 on iSER Header Format for iSCSI Control-Type\
    \ PDU.\n   For a SCSI Read or bidirectional command, the iSCSI layer at the\n\
    \   initiator MUST invoke the Send_Control Operational Primitive\n   qualified\
    \ with DataDescriptorIn, which defines the initiator's I/O\n   Buffer for receiving\
    \ the SCSI Read data.  The iSER layer at the\n   initiator MUST do the following:\n\
    \      a. It MUST allocate a Read STag for the I/O Buffer and note the\n     \
    \    Base Offset for this I/O Buffer.\n      b. It MUST establish a Local Mapping\
    \ that associates the Initiator\n         Task Tag (ITT) to the Read STag.\n \
    \     c. It MUST Advertise the Read STag and the Base Offset to the\n        \
    \ target by sending them in the iSER header of the iSER Message\n         (the\
    \ payload of the Send Message of RCaP) containing the SCSI\n         Read or bidirectional\
    \ command PDU.  The SendSE Message should\n         be used if supported by the\
    \ RCaP layer (e.g., iWARP).  See\n         Section 9.2 on iSER Header Format for\
    \ iSCSI Control-Type PDU.\n   If the amount of unsolicited data to be transferred\
    \ in a SCSI Command\n   exceeds TargetRecvDataSegmentLength, then the iSCSI layer\
    \ at the\n   initiator MUST segment the data into multiple iSCSI control-type\n\
    \   PDUs, with the data segment length in all generated PDUs (except the\n   last\
    \ one) having exactly the size TargetRecvDataSegmentLength.  The\n   data segment\
    \ length of the last iSCSI control-type PDU carrying the\n   unsolicited data\
    \ can be up to TargetRecvDataSegmentLength.\n   When the iSER layer at the target\
    \ receives the SCSI Command, it MUST\n   establish a Remote Mapping that associates\
    \ the ITT to the Base\n   Offset(s) and the Advertised STag(s) in the iSER header.\
    \  The Write\n   STag is used by the iSER layer at the target in handling the\
    \ data\n   transfer associated with the R2T PDU(s) as described in Section\n \
    \  7.3.6.  The Read STag is used in handling the SCSI Data-In PDU(s)\n   from\
    \ the iSCSI layer at the target as described in Section 7.3.5.\n"
- title: 7.3.2.  SCSI Response
  contents:
  - "7.3.2.  SCSI Response\n      Type:  control-type PDU\n      PDU-specific qualifiers:\
    \  DataDescriptorStatus\n   The iSCSI layer at the target MUST invoke the Send_Control\n\
    \   Operational Primitive qualified with DataDescriptorStatus, which\n   defines\
    \ the buffer containing the sense and response information.\n   The iSCSI layer\
    \ at the target MUST always return the SCSI status for\n   a SCSI command in a\
    \ separate SCSI Response PDU.  \"Phase collapse\" for\n   transferring SCSI status\
    \ in a SCSI Data-In PDU MUST NOT be used. The\n   iSER layer at the target sends\
    \ the SCSI Response PDU according to the\n   following rules:\n   *  If no STags\
    \ were Advertised by the initiator in the iSER Message\n      containing the SCSI\
    \ command PDU, then the iSER layer at the target\n      MUST send a Send Message\
    \ containing the SCSI Response PDU.  The\n      SendSE Message should be used\
    \ if supported by the RCaP layer\n      (e.g., iWARP).\n   *  If the initiator\
    \ Advertised a Read STag in the iSER Message\n      containing the SCSI Command\
    \ PDU, then the iSER layer at the target\n      MUST send a Send Message containing\
    \ the SCSI Response PDU.  The\n      header of the Send Message MUST carry the\
    \ Read STag to be\n      invalidated at the initiator.  The Send with Invalidate\
    \ Message,\n      if supported by the RCaP layer (e.g., iWARP), can be used for\
    \ the\n      automatic invalidation of the STag.\n   *  If the initiator Advertised\
    \ only the Write STag in the iSER\n      Message containing the SCSI command PDU,\
    \ then the iSER layer at\n      the target MUST send a Send Message containing\
    \ the SCSI Response\n      PDU.  The header of the Send Message MUST carry the\
    \ Write STag to\n      be invalidated at the initiator.  The Send with Invalidate\n\
    \      Message, if supported by the RCaP layer (e.g., iWARP), can be used\n  \
    \    for the automatic invalidation of the STag.\n   When the iSCSI layer at the\
    \ target invokes the Send_Control\n   Operational Primitive to send the SCSI Response\
    \ PDU, the iSER layer\n   at the target MUST invalidate the Remote Mapping before\
    \ transferring\n   the SCSI Response PDU to the initiator.\n   Upon receiving\
    \ a Send Message containing the SCSI Response PDU from\n   the target, the iSER\
    \ layer at the initiator MUST invalidate the\n   STag(s) specified in the header.\
    \  (If a Send with Invalidate Message\n   is supported by the RCaP layer (e.g.,\
    \ iWARP) and is used to carry the\n   SCSI Response PDU, the RCaP layer at the\
    \ initiator will invalidate\n   the STag.  The iSER layer at the initiator MUST\
    \ ensure that the\n   correct STag is invalidated.  If both the Read and the Write\
    \ STags\n   were Advertised earlier by the initiator, then the iSER layer at the\n\
    \   initiator MUST explicitly invalidate the Write STag upon receiving\n   the\
    \ Send with Invalidate Message because the header of the Send with\n   Invalidate\
    \ Message can only carry one STag (in this case, the Read\n   STag) to be invalidated.)\n\
    \   The iSER layer at the initiator MUST ensure the invalidation of the\n   STag(s)\
    \ used in a command before notifying the iSCSI layer at the\n   initiator by invoking\
    \ the Control_Notify Operational Primitive\n   qualified with the SCSI Response.\
    \  This precludes the possibility of\n   using the STag(s) after the completion\
    \ of the command; such use would\n   cause data corruption.\n   When the iSER\
    \ layer at the initiator receives a Send Message\n   containing the SCSI Response\
    \ PDU, it SHOULD invalidate the Local\n   Mapping.  The iSER layer MUST ensure\
    \ that all local STag(s)\n   associated with the ITT are invalidated before notifying\
    \ the iSCSI\n   layer of the SCSI Response PDU by invoking the Control_Notify\n\
    \   Operational Primitive qualified with the SCSI Response PDU.\n"
- title: 7.3.3.  Task Management Function Request/Response
  contents:
  - "7.3.3.  Task Management Function Request/Response\n      Type:  control-type\
    \ PDU\n      PDU-specific qualifiers (for TMF Request):  DataDescriptorOut,\n\
    \      DataDescriptorIn\n   The iSER layer MUST use a Send Message to send the\
    \ Task Management\n   Function Request/Response PDU.  The SendSE Message should\
    \ be used if\n   supported by the RCaP layer (e.g., iWARP).\n   For the Task Management\
    \ Function Request with the TASK REASSIGN\n   function, the iSER layer at the\
    \ initiator MUST do the following:\n   *  It MUST use the ITT as specified in\
    \ the Referenced Task Tag from\n      the Task Management Function Request PDU\
    \ to locate the existing\n      STags (if any) in the Local Mappings.\n   *  It\
    \ MUST invalidate the existing STags (if any) and the Local\n      Mappings.\n\
    \   *  It MUST allocate a Read STag for the I/O Buffer and note the Base\n   \
    \   Offset associated with the I/O Buffer as defined by the qualifier\n      DataDescriptorIn\
    \ if the Send_Control Operational Primitive\n      invocation is qualified with\
    \ DataDescriptorIn.\n   *  It MUST allocate a Write STag for the I/O Buffer and\
    \ note the Base\n      Offset associated with the I/O Buffer as defined by the\
    \ qualifier\n      DataDescriptorOut if the Send_Control Operational Primitive\n\
    \      invocation is qualified with DataDescriptorOut.\n   *  If STags are allocated,\
    \ it MUST establish new Local Mapping(s)\n      that associate the ITT to the\
    \ allocated STag(s).\n   *  It MUST Advertise the STags and the Base Offsets,\
    \ if allocated, to\n      the target in the iSER header of the Send Message carrying\
    \ the\n      iSCSI PDU, as described in Section 9.2.  The SendSE Message should\n\
    \      be used if supported by the RCaP layer (e.g., iWARP).\n   For the Task\
    \ Management Function Request with the TASK REASSIGN\n   function for a SCSI Read\
    \ or bidirectional command, the iSCSI layer at\n   the initiator MUST set ExpDataSN\
    \ to zero since the data transfer and\n   acknowledgements happen transparently\
    \ to the iSCSI layer at the\n   initiator.  This provides the flexibility to the\
    \ iSCSI layer at the\n   target to request transmission of only the unacknowledged\
    \ data as\n   specified in [iSCSI].\n   When the iSER layer at the target receives\
    \ the Task Management\n   Function Request with the TASK REASSIGN function, it\
    \ MUST do the\n   following:\n   *  It MUST use the ITT as specified in the Referenced\
    \ Task Tag from\n      the Task Management Function Request PDU to locate the\
    \ Local and\n      Remote Mappings (if any).\n   *  It MUST invalidate the local\
    \ STags (if any) associated with the\n      ITT.\n   *  It MUST replace the Base\
    \ Offset(s) and the Advertised STag(s) in\n      the Remote Mapping with the Base\
    \ Offset(s) and the Advertised\n      STag(s) in the iSER header.  The Write STag\
    \ is used in the\n      handling of the R2T PDU(s) from the iSCSI layer at the\
    \ target as\n      described in Section 7.3.6.  The Read STag is used in the handling\n\
    \      of the SCSI Data-In PDU(s) from the iSCSI layer at the target as\n    \
    \  described in Section 7.3.5.\n"
- title: 7.3.4.  SCSI Data-Out
  contents:
  - "7.3.4.  SCSI Data-Out\n      Type:  control-type PDU\n      PDU-specific qualifiers:\
    \  DataDescriptorOut\n   The iSCSI layer at the initiator MUST invoke the Send_Control\n\
    \   Operational Primitive qualified with DataDescriptorOut, which defines\n  \
    \ the initiator's I/O Buffer containing unsolicited SCSI Write data.\n   If the\
    \ amount of unsolicited data to be transferred as SCSI Data-Out\n   exceeds TargetRecvDataSegmentLength,\
    \ then the iSCSI layer at the\n   initiator MUST segment the data into multiple\
    \ iSCSI control-type\n   PDUs, where the DataSegmentLength has the value of\n\
    \   TargetRecvDataSegmentLength in all generated PDUs except the last\n   one.\
    \  The DataSegmentLength of the last iSCSI control-type PDU\n   carrying the unsolicited\
    \ data can be up to\n   TargetRecvDataSegmentLength.  The iSCSI layer at the target\
    \ MUST\n   perform the reassembly function for the unsolicited data.\n   For unsolicited\
    \ data, the iSER layer at the initiator MUST use a Send\n   Message to send the\
    \ SCSI Data-Out PDU.  If the F bit is set to 1, the\n   SendSE Message should\
    \ be used if supported by the RCaP layer (e.g.,\n   iWARP).\n   Note that for\
    \ solicited data, the SCSI Data-Out PDUs are not used\n   since R2T PDUs are not\
    \ delivered to the iSCSI layer at the initiator;\n   instead, R2T PDUs are transformed\
    \ by the iSER layer at the target\n   into RDMA Read operations.  (See Section\
    \ 7.3.6.)\n"
- title: 7.3.5.  SCSI Data-In
  contents:
  - "7.3.5.  SCSI Data-In\n      Type:  data-type PDU\n      PDU-specific qualifiers:\
    \  DataDescriptorIn\n   When the iSCSI layer at the target is ready to return\
    \ the SCSI Read\n   data to the initiator, it MUST invoke the Put_Data Operational\n\
    \   Primitive qualified with DataDescriptorIn, which defines the SCSI\n   Data-In\
    \ buffer.  See Section 7.1 on the general requirement on the\n   handling of iSCSI\
    \ data-type PDUs.  SCSI Data-In PDU(s) are used in\n   SCSI Read data transfer\
    \ as described in Section 9.5.2.\n   The iSER layer at the target MUST do the\
    \ following for each\n   invocation of the Put_Data Operational Primitive:\n \
    \  1. It MUST use the ITT in the SCSI Data-In PDU to locate the remote\n     \
    \ Read STag and the Base Offset in the Remote Mapping.  The Remote\n      Mapping\
    \ was established earlier by the iSER layer at the target\n      when the SCSI\
    \ Read Command was received from the initiator.\n   2. It MUST generate and send\
    \ an RDMA Write Message containing the\n      read data to the initiator.\n  \
    \    a. It MUST use the remote Read STag as the Data Sink STag of the\n      \
    \   RDMA Write Message.\n      b. It MUST add the Buffer Offset from the SCSI\
    \ Data-In PDU to the\n         Base Offset from the Remote Mapping as the Data\
    \ Sink Tagged\n         Offset of the RDMA Write Message.\n      c. It MUST use\
    \ DataSegmentLength from the SCSI Data-In PDU to\n         determine the amount\
    \ of data to be sent in the RDMA Write\n         Message.\n   3. It MUST associate\
    \ the DataSN and ITT from the SCSI Data-In PDU\n      with the RDMA Write operation.\
    \  If the Put_Data Operational\n      Primitive invocation was qualified with\
    \ Notify_Enable set, then\n      when the iSER layer at the target receives a\
    \ completion from the\n      RCaP layer for the RDMA Write Message, the iSER layer\
    \ at the\n      target MUST notify the iSCSI layer by invoking the\n      Data_Completion_Notify\
    \ Operational Primitive qualified with the\n      DataSN and ITT.  Conversely,\
    \ if the Put_Data Operational Primitive\n      invocation was qualified with Notify_Enable\
    \ cleared, then the iSER\n      layer at the target MUST NOT notify the iSCSI\
    \ layer on completion\n      and MUST NOT invoke the Data_Completion_Notify Operational\n\
    \      Primitive.\n   When the A-bit is set to one in the SCSI Data-In PDU, the\
    \ iSER layer\n   at the target MUST notify the iSCSI layer at the target when\
    \ the data\n   transfer is complete at the initiator.  To perform this additional\n\
    \   function, the iSER layer at the target can take advantage of the\n   operational\
    \ ErrorRecoveryLevel if previously disclosed by the iSCSI\n   layer via an earlier\
    \ invocation of the Notice_Key_Values Operational\n   Primitive.  There are two\
    \ approaches that can be taken:\n   1. If the iSER layer at the target knows that\
    \ the operational\n      ErrorRecoveryLevel is 2, or if the iSER layer at the\
    \ target does\n      not know the operational ErrorRecoveryLevel, then the iSER\
    \ layer\n      at the target MUST issue a zero-length RDMA Read Request Message\n\
    \      following the RDMA Write Message.  When the iSER layer at the\n      target\
    \ receives a completion for the RDMA Read Request Message\n      from the RCaP\
    \ layer, implying that the RDMA-Capable Controller at\n      the initiator has\
    \ completed processing the RDMA Write Message due\n      to the completion ordering\
    \ semantics of RCaP, the iSER layer at\n      the target MUST notify the iSCSI\
    \ layer at the target by invoking\n      the Data_ACK_Notify Operational Primitive\
    \ qualified with ITT and\n      DataSN (see Section 3.2.3).\n   2. If the iSER\
    \ layer at the target knows that the operational\n      ErrorRecoveryLevel is\
    \ 1, then the iSER layer at the target MUST do\n      one of the following:\n\
    \      a. It MUST notify the iSCSI layer at the target by invoking the\n     \
    \    Data_ACK_Notify Operational Primitive qualified with ITT and\n         DataSN\
    \ (see Section 3.2.3) when it receives the local\n         completion from the\
    \ RCaP layer for the RDMA Write Message.\n         This is allowed since digest\
    \ errors do not occur in iSER (see\n         Section 10.1.4.2) and a CRC error\
    \ will cause the connection to\n         be terminated and the task to be terminated\
    \ anyway.  The local\n         RDMA Write completion from the RCaP layer guarantees\
    \ that the\n         RCaP layer will not access the I/O Buffer again to transfer\
    \ the\n         data associated with that RDMA Write operation.\n      b. Alternatively,\
    \ it MUST use the same procedure for handling the\n         data transfer completion\
    \ at the initiator as for\n         ErrorRecoveryLevel 2.\n   It should be noted\
    \ that the iSCSI layer at the target cannot set the\n   A-bit to 1 if the ErrorRecoveryLevel=0.\n\
    \   SCSI status MUST always be returned in a separate SCSI Response PDU.\n   The\
    \ S bit in the SCSI Data-In PDU MUST always be set to zero.  There\n   MUST NOT\
    \ be a \"phase collapse\" in the SCSI Data-In PDU.\n   Since the RDMA Write Message\
    \ only transfers the data portion of the\n   SCSI Data-In PDU but not the control\
    \ information in the header, such\n   as ExpCmdSN, if timely updates of such information\
    \ are crucial, the\n   iSCSI layer at the initiator MAY issue NOP-Out PDUs to\
    \ request the\n   iSCSI layer at the target to respond with the information using\n\
    \   NOP-In PDUs.\n"
- title: 7.3.6.  Ready To Transfer (R2T)
  contents:
  - "7.3.6.  Ready To Transfer (R2T)\n      Type:  data-type PDU\n      PDU-specific\
    \ qualifiers:  DataDescriptorOut\n   In order to send an R2T PDU, the iSCSI layer\
    \ at the target MUST\n   invoke the Get_Data Operational Primitive qualified with\n\
    \   DataDescriptorOut, which defines the I/O Buffer for receiving the\n   SCSI\
    \ Write data from the initiator.  See Section 7.1 on the general\n   requirements\
    \ on the handling of iSCSI data-type PDUs.\n   The iSER layer at the target MUST\
    \ do the following for each\n   invocation of the Get_Data Operational Primitive:\n\
    \   1. It MUST ensure a valid local STag for the I/O Buffer and a valid\n    \
    \  Local Mapping.  This may involve allocating a valid local STag and\n      establishing\
    \ a Local Mapping.\n   2. It MUST use the ITT in the R2T to locate the remote\
    \ Write STag and\n      the Base Offset in the Remote Mapping.  The Remote Mapping\
    \ was\n      established earlier by the iSER layer at the target when the iSER\n\
    \      Message containing the Advertised Write STag, the Base Offset, and\n  \
    \    the SCSI Command PDU for a SCSI Write or bidirectional command was\n    \
    \  received from the initiator.\n   3. If the iSER-ORD value at the target is\
    \ set to zero, the iSER layer\n      at the target MUST terminate the connection\
    \ and free up the\n      resources associated with the connection (as described\
    \ in Section\n      5.2.3) if it received the R2T PDU from the iSCSI layer at\
    \ the\n      target.  Upon termination of the connection, the iSER layer at the\n\
    \      target MUST notify the iSCSI layer at the target by invoking the\n    \
    \  Connection_Terminate_Notify Operational Primitive.\n   4. If the iSER-ORD value\
    \ at the target is set to greater than 0, the\n      iSER layer at the target\
    \ MUST transform the R2T PDU into an RDMA\n      Read Request Message.  While\
    \ transforming the R2T PDU, the iSER\n      layer at the target MUST ensure that\
    \ the number of outstanding\n      RDMA Read Request Messages does not exceed\
    \ the iSER-ORD value.  To\n      transform the R2T PDU, the iSER layer at the\
    \ target:\n      a. MUST derive the local STag and local Tagged Offset from the\n\
    \         DataDescriptorOut that qualified the Get_Data invocation.\n      b.\
    \ MUST use the local STag as the Data Sink STag of the RDMA Read\n         Request\
    \ Message.\n      c. MUST use the local Tagged Offset as the Data Sink Tagged\
    \ Offset\n         of the RDMA Read Request Message.\n      d. MUST use the Desired\
    \ Data Transfer Length from the R2T PDU as\n         the RDMA Read Message Size\
    \ of the RDMA Read Request Message.\n      e. MUST use the remote Write STag as\
    \ the Data Source STag of the\n         RDMA Read Request Message.\n      f. MUST\
    \ add the Buffer Offset from the R2T PDU to the Base Offset\n         from the\
    \ Remote Mapping as the Data Source Tagged Offset of the\n         RDMA Read Request\
    \ Message.\n   5. It MUST associate the R2TSN and ITT from the R2T PDU with the\
    \ RDMA\n      Read operation.  If the Get_Data Operational Primitive invocation\n\
    \      was qualified with Notify_Enable set, then when the iSER layer at\n   \
    \   the target receives a completion from the RCaP layer for the RDMA\n      Read\
    \ operation, the iSER layer at the target MUST notify the iSCSI\n      layer by\
    \ invoking the Data_Completion_Notify Operational Primitive\n      qualified with\
    \ the R2TSN and ITT.  Conversely, if the Get_Data\n      Operational Primitive\
    \ invocation was qualified with Notify_Enable\n      cleared, then the iSER layer\
    \ at the target MUST NOT notify the\n      iSCSI layer on completion and MUST\
    \ NOT invoke the\n      Data_Completion_Notify Operational Primitive.\n   When\
    \ the RCaP layer at the initiator receives a valid RDMA Read\n   Request Message,\
    \ it will return an RDMA Read Response Message\n   containing the solicited write\
    \ data to the target.  When the RCaP\n   layer at the target receives the RDMA\
    \ Read Response Message from the\n   initiator, it will place the solicited data\
    \ in the I/O Buffer\n   referenced by the Data Sink STag in the RDMA Read Response\
    \ Message.\n   Since the RDMA Read Request Message from the target does not transfer\n\
    \   the control information in the R2T PDU such as ExpCmdSN, if timely\n   updates\
    \ of such information are crucial, the iSCSI layer at the\n   initiator MAY issue\
    \ NOP-Out PDUs to request the iSCSI layer at the\n   target to respond with the\
    \ information using NOP-In PDUs.\n   Similarly, since the RDMA Read Response Message\
    \ from the initiator\n   only transfers the data but not the control information\
    \ normally\n   found in the SCSI Data-Out PDU, such as ExpStatSN, if timely updates\n\
    \   of such information are crucial, the iSCSI layer at the target MAY\n   issue\
    \ NOP-In PDUs to request the iSCSI layer at the initiator to\n   respond with\
    \ the information using NOP-Out PDUs.\n"
- title: 7.3.7.  Asynchronous Message
  contents:
  - "7.3.7.  Asynchronous Message\n      Type:  control-type PDU\n      PDU-specific\
    \ qualifiers:  DataDescriptorSense\n   The iSCSI layer MUST invoke the Send_Control\
    \ Operational Primitive\n   qualified with DataDescriptorSense, which defines\
    \ the buffer\n   containing the sense and iSCSI event information.  The iSER layer\n\
    \   MUST use a Send Message to send the Asynchronous Message PDU.  The\n   SendSE\
    \ Message should be used if supported by the RCaP layer (e.g.,\n   iWARP).\n"
- title: 7.3.8.  Text Request and Text Response
  contents:
  - "7.3.8.  Text Request and Text Response\n      Type:  control-type PDU\n     \
    \ PDU-specific qualifiers:  DataDescriptorTextOut (for Text\n      Request), DataDescriptorIn\
    \ (for Text Response)\n   The iSCSI layer MUST invoke the Send_Control Operational\
    \ Primitive\n   qualified with DataDescriptorTextOut (or DataDescriptorIn), which\n\
    \   defines the Text Request (or Text Response) buffer.  The iSER layer\n   MUST\
    \ use Send Messages to send the Text Request (or Text Response\n   PDUs).  The\
    \ SendSE Message should be used if supported by the RCaP\n   layer (e.g., iWARP).\n"
- title: 7.3.9.  Login Request and Login Response
  contents:
  - "7.3.9.  Login Request and Login Response\n   During the login negotiation, the\
    \ iSCSI layer interacts with the\n   transport layer directly, and the iSER layer\
    \ is not involved.  See\n   Section 5.1 on iSCSI/iSER Connection Setup.  If the\
    \ underlying\n   transport is TCP, the Login Request PDUs and the Login Response\
    \ PDUs\n   are exchanged when the connection between the initiator and the\n \
    \  target is still in the byte stream mode.\n   The iSCSI layer MUST NOT send\
    \ a Login Request (or a Login Response)\n   PDU during the Full Feature Phase.\
    \  A Login Request (or a Login\n   Response) PDU, if used, MUST be treated as\
    \ an iSCSI protocol error.\n   The iSER layer MAY reject such a PDU from the iSCSI\
    \ layer with an\n   appropriate error code.  If a Login Request PDU is received\
    \ by the\n   iSCSI layer at the target, it MUST respond with a Reject PDU with\
    \ a\n   reason code of \"protocol error\".\n"
- title: 7.3.10.  Logout Request and Logout Response
  contents:
  - "7.3.10.  Logout Request and Logout Response\n      Type:  control-type PDU\n\
    \      PDU-specific qualifiers:  None\n   The iSER layer MUST use a Send Message\
    \ to send the Logout Request or\n   Logout Response PDU.  The SendSE Message should\
    \ be used if supported\n   by the RCaP layer (e.g., iWARP).  Sections 5.2.1 and\
    \ 5.2.2 describe\n   the handling of the Logout Request and the Logout Response\
    \ at the\n   initiator and the target and the interactions between the initiator\n\
    \   and the target to terminate a connection.\n"
- title: 7.3.11.  SNACK Request
  contents:
  - "7.3.11.  SNACK Request\n   Since HeaderDigest and DataDigest must be negotiated\
    \ to \"None\", there\n   are no digest errors when the connection is in iSER-assisted\
    \ mode.\n   Also, since RCaP delivers all messages in the order they were sent,\n\
    \   there are no sequence errors when the connection is in iSER-assisted\n   mode.\
    \  Therefore, the iSCSI layer MUST NOT send SNACK Request PDUs.\n   A SNACK Request\
    \ PDU, if used, MUST be treated as an iSCSI protocol\n   error.  The iSER layer\
    \ MAY reject such a PDU from the iSCSI layer\n   with an appropriate error code.\
    \  If a SNACK Request PDU is received\n   by the iSCSI layer at the target, it\
    \ MUST respond with a Reject PDU\n   with a reason code of \"protocol error\"\
    .\n"
- title: 7.3.12.  Reject
  contents:
  - "7.3.12.  Reject\n      Type:  control-type PDU\n      PDU-specific qualifiers:\
    \  DataDescriptorReject\n   The iSCSI layer MUST invoke the Send_Control Operational\
    \ Primitive\n   qualified with DataDescriptorReject, which defines the Reject\
    \ buffer.\n   The iSER layer MUST use a Send Message to send the Reject PDU. \
    \ The\n   SendSE Message should be used if supported by the RCaP layer (e.g.,\n\
    \   iWARP).\n"
- title: 7.3.13.  NOP-Out and NOP-In
  contents:
  - "7.3.13.  NOP-Out and NOP-In\n      Type:  control-type PDU\n      PDU-specific\
    \ qualifiers:  DataDescriptorNOPOut (for NOP-Out),\n      DataDescriptorNOPIn\
    \ (for NOP-In)\n   The iSCSI layer MUST invoke the Send_Control Operational Primitive\n\
    \   qualified with DataDescriptorNOPOut (or DataDescriptorNOPIn), which\n   defines\
    \ the Ping (or Return Ping) data buffer.  The iSER layer MUST\n   use Send Messages\
    \ to send the NOP-Out (or NOP-In) PDU.  The SendSE\n   Message should be used\
    \ if supported by the RCaP layer (e.g., iWARP).\n"
- title: 8.  Flow Control and STag Management
  contents:
  - '8.  Flow Control and STag Management

    '
- title: 8.1.  Flow Control for RDMA Send Messages
  contents:
  - "8.1.  Flow Control for RDMA Send Messages\n   Send Messages in RCaP are used\
    \ by the iSER layer to transfer iSCSI\n   control-type PDUs.  Each Send Message\
    \ in RCaP consumes an Untagged\n   Buffer at the Data Sink.  However, neither\
    \ the RCaP layer nor the\n   iSER layer provides an explicit flow control mechanism\
    \ for the Send\n   Messages.  Therefore, the iSER layer SHOULD provision enough\
    \ Untagged\n   buffers for handling incoming Send Messages to prevent buffer\n\
    \   exhaustion at the RCaP layer.  If buffer exhaustion occurs, it may\n   result\
    \ in the termination of the connection.\n   An implementation may choose to satisfy\
    \ the buffer requirement by\n   using a common buffer pool shared across multiple\
    \ connections, with\n   usage limits on a per-connection basis and usage limits\
    \ on the buffer\n   pool itself.  In such an implementation, exceeding the buffer\
    \ usage\n   limit for a connection or the buffer pool itself may trigger\n   interventions\
    \ from the iSER layer to replenish the buffer pool and/or\n   to isolate the connection\
    \ causing the problem.\n   iSER also provides the MaxOutstandingUnexpectedPDUs\
    \ key to be used by\n   the initiator and the target to declare the maximum number\
    \ of\n   outstanding \"unexpected\" control-type PDUs that it can receive.  It\n\
    \   is intended to allow the receiving side to determine the amount of\n   buffer\
    \ resources needed beyond the normal flow control mechanism\n   available in iSCSI.\n\
    \   The buffer resources required at both the initiator and the target as\n  \
    \ a result of control-type PDUs sent by the initiator are described in\n   Section\
    \ 8.1.1.  The buffer resources required at both the initiator\n   and target as\
    \ a result of control-type PDUs sent by the target are\n   described in Section\
    \ 8.1.2.\n"
- title: 8.1.1.  Flow Control for Control-Type PDUs from the Initiator
  contents:
  - "8.1.1.  Flow Control for Control-Type PDUs from the Initiator\n   The control-type\
    \ PDUs that can be sent by an initiator to a target\n   can be grouped into the\
    \ following categories:\n   1. Regulated:  Control-type PDUs in this category\
    \ are regulated by\n      the iSCSI CmdSN window mechanism, and the immediate\
    \ flag is not\n      set.\n   2. Unregulated but Expected:  Control-type PDUs\
    \ in this category are\n      not regulated by the iSCSI CmdSN window mechanism\
    \ but are expected\n      by the target.\n   3. Unregulated and Unexpected:  Control-type\
    \ PDUs in this category\n      are not regulated by the iSCSI CmdSN window mechanism\
    \ and are\n      \"unexpected\" by the target.\n"
- title: 8.1.1.1.  Control-Type PDUs from the Initiator in the Regulated Category
  contents:
  - "8.1.1.1.  Control-Type PDUs from the Initiator in the Regulated Category\n  \
    \ Control-type PDUs that can be sent by the initiator in this category\n   are\
    \ regulated by the iSCSI CmdSN window mechanism, and the immediate\n   flag is\
    \ not set.\n   The queuing capacity required of the iSCSI layer at the target\
    \ is\n   described in Section 4.2.2.1 of [iSCSI].  For each of the control-\n\
    \   type PDUs that can be sent by the initiator in this category, the\n   initiator\
    \ MUST provision for the buffer resources required for the\n   corresponding control-type\
    \ PDU sent as a response from the target.\n   The following is a list of the PDUs\
    \ that can be sent by the initiator\n   and the PDUs that are sent by the target\
    \ in response:\n      a. When an initiator sends a SCSI Command PDU, it expects\
    \ a SCSI\n         Response PDU from the target.\n      b. When the initiator\
    \ sends a Task Management Function Request\n         PDU, it expects a Task Management\
    \ Function Response PDU from\n         the target.\n      c. When the initiator\
    \ sends a Text Request PDU, it expects a Text\n         Response PDU from the\
    \ target.\n      d. When the initiator sends a Logout Request PDU, it expects\
    \ a\n         Logout Response PDU from the target.\n      e. When the initiator\
    \ sends a NOP-Out PDU as a ping request with\n         ITT != 0xffffffff and TTT\
    \ = 0xffffffff, it expects a NOP-In PDU\n         from the target with the same\
    \ ITT and TTT as in the ping\n         request.\n   The response from the target\
    \ for any of the PDUs enumerated here may\n   alternatively be in the form of\
    \ a Reject PDU sent before the task is\n   active, as described in Section 7.3\
    \ of [iSCSI].\n"
- title: 8.1.1.2.  Control-Type PDUs from the Initiator in the Unregulated but
  contents:
  - "8.1.1.2.  Control-Type PDUs from the Initiator in the Unregulated but\n     \
    \     Expected Category\n   For the control-type PDUs in the Unregulated but Expected\
    \ category,\n   the amount of buffering resources required at the target can be\n\
    \   predetermined.  The following is a list of the PDUs in this category:\n  \
    \    a. SCSI Data-Out PDUs are used by the initiator to send\n         unsolicited\
    \ data.  The amount of buffer resources required by\n         the target can be\
    \ determined using FirstBurstLength.  Note that\n         SCSI Data-Out PDUs are\
    \ not used for solicited data since the\n         R2T PDU, which is used for solicitation,\
    \ is transformed into\n         RDMA Read operations by the iSER layer at the\
    \ target.  See\n         Section 7.3.4.\n      b. A NOP-Out PDU with TTT != 0xffffffff\
    \ is sent as a ping response\n         by the initiator to the NOP-In PDU sent\
    \ as a ping request by\n         the target.\n"
- title: 8.1.1.3.  Control-Type PDUs from the Initiator in the Unregulated and
  contents:
  - "8.1.1.3.  Control-Type PDUs from the Initiator in the Unregulated and\n     \
    \     Unexpected Category\n   PDUs in the Unregulated and Unexpected category\
    \ are PDUs with the\n   immediate flag set.  The number of PDUs that are in this\
    \ category and\n   can be sent by an initiator is controlled by the value of\n\
    \   MaxOutstandingUnexpectedPDUs declared by the target.  (See Section\n   6.7.)\
    \  After a PDU in this category is sent by the initiator, it is\n   outstanding\
    \ until it is retired.  At any time, the number of\n   outstanding unexpected\
    \ PDUs MUST NOT exceed the value of\n   MaxOutstandingUnexpectedPDUs declared\
    \ by the target.\n   The target uses the value of MaxOutstandingUnexpectedPDUs\
    \ that it\n   declared to determine the amount of buffer resources required for\n\
    \   control-type PDUs in this category that can be sent by an initiator.\n   For\
    \ the initiator, for each of the control-type PDUs that can be sent\n   in this\
    \ category, the initiator MUST provision for the buffer\n   resources if required\
    \ for the corresponding control-type PDU that can\n   be sent as a response from\
    \ the target.\n   An outstanding PDU in this category is retired as follows. \
    \ If the\n   CmdSN of the PDU sent by the initiator in this category is x, the\
    \ PDU\n   is outstanding until the initiator sends a non-immediate control-type\n\
    \   PDU on the same connection with CmdSN = y (where y is at least x) and\n  \
    \ the target responds with a control-type PDU on any connection where\n   ExpCmdSN\
    \ is at least y+1.\n   When the number of outstanding unexpected control-type\
    \ PDUs equals\n   MaxOutstandingUnexpectedPDUs, the iSCSI layer at the initiator\
    \ MUST\n   NOT generate any unexpected PDUs, which otherwise it would have\n \
    \  generated, even if the unexpected PDU is intended for immediate\n   delivery.\n"
- title: 8.1.2.  Flow Control for Control-Type PDUs from the Target
  contents:
  - "8.1.2.  Flow Control for Control-Type PDUs from the Target\n   Control-type PDUs\
    \ that can be sent by a target and are expected by\n   the initiator are listed\
    \ in the Regulated category.  (See Section\n   8.1.1.1.)\n   For the control-type\
    \ PDUs that can be sent by a target and are\n   unexpected by the initiator, the\
    \ number is controlled by\n   MaxOutstandingUnexpectedPDUs declared by the initiator.\
    \  (See Section\n   6.7.)  After a PDU in this category is sent by a target, it\
    \ is\n   outstanding until it is retired.  At any time, the number of\n   outstanding\
    \ unexpected PDUs MUST NOT exceed the value of\n   MaxOutstandingUnexpectedPDUs\
    \ declared by the initiator.  The\n   initiator uses the value of MaxOutstandingUnexpectedPDUs\
    \ that it\n   declared to determine the amount of buffer resources required for\n\
    \   control-type PDUs in this category that can be sent by a target.  The\n  \
    \ following is a list of the PDUs in this category and the conditions\n   for\
    \ retiring the outstanding PDU:\n      a. For an Asynchronous Message PDU with\
    \ StatSN = x, the PDU is\n         outstanding until the initiator sends a control-type\
    \ PDU with\n         ExpStatSN set to at least x+1.\n      b. For a Reject PDU\
    \ with StatSN = x, which is sent after a task is\n         active, the PDU is\
    \ outstanding until the initiator sends a\n         control-type PDU with ExpStatSN\
    \ set to at least x+1.\n      c. For a NOP-In PDU with ITT = 0xffffffff and StatSN\
    \ = x, the PDU\n         is outstanding until the initiator responds with a control-type\n\
    \         PDU on the same connection where ExpStatSN is at least x+1.\n      \
    \   But if the NOP-In PDU is sent as a ping request with\n         TTT != 0xffffffff,\
    \ the PDU can also be retired when the\n         initiator sends a NOP-Out PDU\
    \ with the same ITT and TTT as in\n         the ping request.  Note that when\
    \ a target sends a NOP-In PDU\n         as a ping request, it must provision a\
    \ buffer for the NOP-Out\n         PDU sent as a ping response from the initiator.\n\
    \   When the number of outstanding unexpected control-type PDUs equals\n   MaxOutstandingUnexpectedPDUs,\
    \ the iSCSI layer at the target MUST NOT\n   generate any unexpected PDUs, which\
    \ otherwise it would have\n   generated, even if its intent is to indicate an\
    \ iSCSI error condition\n   (e.g., Asynchronous Message, Reject).  Task timeouts,\
    \ as in the\n   initiator's waiting for a command completion or other connection\
    \ and\n   session-level exceptions, will ensure that correct operational\n   behavior\
    \ will result in these cases despite not generating the PDU.\n   This rule overrides\
    \ any other requirements elsewhere that require\n   that a Reject PDU MUST be\
    \ sent.\n   (Implementation note:  SCSI task timeout and recovery can be a\n \
    \  lengthy process and hence SHOULD be avoided by proper provisioning of\n   resources.)\n\
    \   (Implementation note:  To ensure that the initiator has a means to\n   inform\
    \ the target that outstanding PDUs have been retired, the target\n   should reserve\
    \ the last unexpected control-type PDU allowable by the\n   value of MaxOutstandingUnexpectedPDUs\
    \ declared by the initiator for\n   sending a NOP-In ping request with TTT !=\
    \ 0xffffffff to allow the\n   initiator to return the NOP-Out ping response with\
    \ the current\n   ExpStatSN.)\n"
- title: 8.2.  Flow Control for RDMA Read Resources
  contents:
  - "8.2.  Flow Control for RDMA Read Resources\n   If iSERHelloRequired is negotiated\
    \ to \"Yes\", then the total number of\n   RDMA Read operations that can be active\
    \ simultaneously on an\n   iSCSI/iSER connection depends on the amount of resources\
    \ allocated as\n   declared in the iSER Hello exchange described in Section 5.1.3.\n\
    \   Exceeding the number of RDMA Read operations allowed on a connection\n   will\
    \ result in the connection being terminated by the RCaP layer.\n   The iSER layer\
    \ at the target maintains the iSER-ORD to keep track of\n   the maximum number\
    \ of RDMA Read Requests that can be issued by the\n   iSER layer on a particular\
    \ RCaP Stream.\n   During connection setup (see Section 5.1), iSER-IRD is known\
    \ at the\n   initiator and iSER-ORD is known at the target after the iSER layers\n\
    \   at the initiator and the target have respectively allocated the\n   connection\
    \ resources necessary to support RCaP, as directed by the\n   Allocate_Connection_Resources\
    \ Operational Primitive from the iSCSI\n   layer before the end of the iSCSI Login\
    \ Phase.  In the Full Feature\n   Phase, if iSERHelloRequired is negotiated to\
    \ \"Yes\", then the first\n   message sent by the initiator is the iSER Hello\
    \ Message (see Section\n   9.3), which contains the value of iSER-IRD.  In response\
    \ to the iSER\n   Hello Message, the target sends the iSER HelloReply Message\
    \ (see\n   Section 9.4), which contains the value of iSER-ORD.  The iSER layer\n\
    \   at both the initiator and the target MAY adjust (lower) the resources\n  \
    \ associated with iSER-IRD and iSER-ORD, respectively, to match the\n   iSER-ORD\
    \ value declared in the HelloReply Message.  The iSER layer at\n   the target\
    \ MUST control the flow of the RDMA Read Request Messages so\n   that it does\
    \ not exceed the iSER-ORD value at the target.\n   If iSERHelloRequired is negotiated\
    \ to \"No\", then the maximum number\n   of RDMA Read operations that can be active\
    \ is negotiated via other\n   means outside the scope of this document.  For example,\
    \ in\n   InfiniBand, iSER connection setup uses InfiniBand Connection Manager\n\
    \   (CM) Management Datagrams (MADs), with additional iSER information\n   exchanged\
    \ in the private data.\n"
- title: 8.3.  STag Management
  contents:
  - "8.3.  STag Management\n   An STag is an identifier of a Tagged Buffer used in\
    \ an RDMA\n   operation.  If the STags are exposed on the wire by being Advertised\n\
    \   in the iSER header or declared in the header of an RCaP Message, then\n  \
    \ the allocation and the subsequent invalidation of the STags are as\n   specified\
    \ in this document.\n"
- title: 8.3.1.  Allocation of STags
  contents:
  - "8.3.1.  Allocation of STags\n   When the iSCSI layer at the initiator invokes\
    \ the Send_Control\n   Operational Primitive to request the iSER layer at the\
    \ initiator to\n   process a SCSI Command, zero, one, or two STags may be allocated\
    \ by\n   the iSER layer.  See Section 7.3.1 for details.  The number of STags\n\
    \   allocated depends on whether the command is unidirectional or\n   bidirectional\
    \ and whether or not solicited write data transfer is\n   involved.\n   When the\
    \ iSCSI layer at the initiator invokes the Send_Control\n   Operational Primitive\
    \ to request the iSER layer at the initiator to\n   process a Task Management\
    \ Function Request with the TASK REASSIGN\n   function, besides allocating zero,\
    \ one, or two STags, the iSER layer\n   MUST invalidate the existing STags (if\
    \ any) associated with the ITT.\n   See Section 7.3.3 for details.\n   The iSER\
    \ layer at the target allocates a local Data Sink STag when\n   the iSCSI layer\
    \ at the target invokes the Get_Data Operational\n   Primitive to request the\
    \ iSER layer to process an R2T PDU.  See\n   Section 7.3.6 for details.\n"
- title: 8.3.2.  Invalidation of STags
  contents:
  - "8.3.2.  Invalidation of STags\n   The invalidation of the STags at the initiator\
    \ at the completion of a\n   unidirectional or bidirectional command when the\
    \ associated SCSI\n   Response PDU is sent by the target is described in Section\
    \ 7.3.2.\n   When a unidirectional or bidirectional command concludes without\
    \ the\n   associated SCSI Response PDU being sent by the target, the iSCSI\n \
    \  layer at the initiator MUST request the iSER layer at the initiator\n   to\
    \ invalidate the STags by invoking the Deallocate_Task_Resources\n   Operational\
    \ Primitive qualified with ITT.  In response, the iSER\n   layer at the initiator\
    \ MUST locate the STags (if any) in the Local\n   Mapping.  The iSER layer at\
    \ the initiator MUST invalidate the STags\n   (if any) and the Local Mapping.\n\
    \   For an RDMA Read operation used to realize a SCSI Write data\n   transfer,\
    \ the iSER layer at the target SHOULD invalidate the Data\n   Sink STag at the\
    \ conclusion of the RDMA Read operation referencing\n   the Data Sink STag (to\
    \ permit the immediate reuse of buffer\n   resources).\n   For an RDMA Write operation\
    \ used to realize a SCSI Read data\n   transfer, the Data Source STag at the target\
    \ is not declared to the\n   initiator and is not exposed on the wire.  Invalidation\
    \ of the STag\n   is thus not specified.\n   When a unidirectional or bidirectional\
    \ command concludes without the\n   associated SCSI Response PDU being sent by\
    \ the target, the iSCSI\n   layer at the target MUST request the iSER layer at\
    \ the target to\n   invalidate the STags by invoking the Deallocate_Task_Resources\n\
    \   Operational Primitive qualified with ITT.  In response, the iSER\n   layer\
    \ at the target MUST locate the local STags (if any) in the Local\n   Mapping.\
    \  The iSER layer at the target MUST invalidate the local\n   STags (if any) and\
    \ the Local Mapping.\n"
- title: 9.  iSER Control and Data Transfer
  contents:
  - "9.  iSER Control and Data Transfer\n   For iSCSI data-type PDUs (see Section\
    \ 7.1), the iSER layer uses RDMA\n   Read and RDMA Write operations to transfer\
    \ the solicited data.  For\n   iSCSI control-type PDUs (see Section 7.2), the\
    \ iSER layer uses Send\n   Messages of RCaP.\n"
- title: 9.1.  iSER Header Format
  contents:
  - "9.1.  iSER Header Format\n   An iSER header MUST be present in every Send Message\
    \ of RCaP.  The\n   iSER header is located in the first 28 bytes of the message\
    \ payload\n   of the Send Message of RCaP, as shown in Figure 2.\n    0      \
    \             1                   2                   3\n    0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Opcode|                  Opcode Specific Fields               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Opcode Specific Fields (32 bits)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                  Opcode Specific Fields (64 bits)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Opcode Specific Fields (32 bits)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                  Opcode Specific Fields (64 bits)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 2: iSER Header Format\n   Opcode - Operation Code:\
    \ 4 bits\n         The Opcode field identifies the type of iSER Messages:\n  \
    \            0001b = iSCSI control-type PDU\n              0010b = iSER Hello\
    \ Message\n              0011b = iSER HelloReply Message\n              All other\
    \ Opcodes are unassigned.\n"
- title: 9.2.  iSER Header Format for iSCSI Control-Type PDU
  contents:
  - "9.2.  iSER Header Format for iSCSI Control-Type PDU\n   The iSER layer uses Send\
    \ Messages of RCaP to transfer iSCSI control-\n   type PDUs (see Section 7.2).\
    \  The message payload of each of the Send\n   Messages of RCaP used for transferring\
    \ an iSER Message contains an\n   iSER Header followed by an iSCSI control-type\
    \ PDU.\n   The iSER header in a Send Message of RCaP carrying an iSCSI control-\n\
    \   type PDU MUST have the format as described in Figure 3.\n    0           \
    \        1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       |W|R|                                                   |\n   | 0001b\
    \ |S|S|                  Reserved                         |\n   |       |V|V|\
    \                                                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                            Write STag                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                       Write Base Offset                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             Read STag                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                       Read Base Offset                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       Figure 3: iSER Header Format for iSCSI Control-Type PDU\n   WSV - Write\
    \ STag Valid flag: 1 bit\n      This flag indicates the validity of the Write\
    \ STag field and the\n      Write Base Offset field of the iSER Header.  If set\
    \ to one, the\n      Write STag field and the Write Base Offset field in this\
    \ iSER\n      Header are valid.  If set to zero, the Write STag field and the\n\
    \      Write Base Offset field in this iSER Header MUST be ignored at the\n  \
    \    receiver.  The Write STag Valid flag is set to one when there is\n      solicited\
    \ data to be transferred for a SCSI Write or bidirectional\n      command, or\
    \ when there are non-immediate unsolicited and solicited\n      data to be transferred\
    \ for the referenced task specified in a Task\n      Management Function Request\
    \ with the TASK REASSIGN function.\n   RSV - Read STag Valid flag: 1 bit\n   \
    \   This flag indicates the validity of the Read STag field and the\n      Read\
    \ Base Offset field of the iSER Header.  If set to one, the\n      Read STag field\
    \ and the Read Base Offset field in this iSER Header\n      are valid.  If set\
    \ to zero, the Read STag field and the Read Base\n      Offset field in this iSER\
    \ Header MUST be ignored at the receiver.\n      The Read STag Valid flag is set\
    \ to one for a SCSI Read or\n      bidirectional command, or a Task Management\
    \ Function Request with\n      the TASK REASSIGN function.\n   Write STag - Write\
    \ Steering Tag: 32 bits\n      This field contains the Write STag when the Write\
    \ STag Valid flag\n      is set to one.  For a SCSI Write or bidirectional command,\
    \ the\n      Write STag is used to Advertise the initiator's I/O Buffer\n    \
    \  containing the solicited data.  For a Task Management Function\n      Request\
    \ with the TASK REASSIGN function, the Write STag is used to\n      Advertise\
    \ the initiator's I/O Buffer containing the non-immediate\n      unsolicited data\
    \ and solicited data.  This Write STag is used as\n      the Data Source STag\
    \ in the resultant RDMA Read operation(s).\n      When the Write STag Valid flag\
    \ is set to zero, this field MUST be\n      set to zero and ignored on receive.\n\
    \   Write Base Offset: 64 bits\n      This field contains the Base Offset associated\
    \ with the I/O Buffer\n      for the SCSI Write command when the Write STag Valid\
    \ flag is set\n      to one.  When the Write STag Valid flag is set to zero, this\
    \ field\n      MUST be set to zero and ignored on receive.\n   Read STag - Read\
    \ Steering Tag: 32 bits\n      This field contains the Read STag when the Read\
    \ STag Valid flag is\n      set to one.  The Read STag is used to Advertise the\
    \ initiator's\n      Read I/O Buffer of a SCSI Read or bidirectional command,\
    \ or a Task\n      Management Function Request with the TASK REASSIGN function.\
    \  This\n      Read STag is used as the Data Sink STag in the resultant RDMA\n\
    \      Write operation(s).  When the Read STag Valid flag is zero, this\n    \
    \  field MUST be set to zero and ignored on receive.\n   Read Base Offset: 64\
    \ bits\n      This field contains the Base Offset associated with the I/O Buffer\n\
    \      for the SCSI Read command when the Read STag Valid flag is set to\n   \
    \   one.  When the Read STag Valid flag is set to zero, this field\n      MUST\
    \ be set to zero and ignored on receive.\n   Reserved:\n      Reserved fields\
    \ MUST be set to zero on transmit and MUST be\n      ignored on receive.\n"
- title: 9.3.  iSER Header Format for iSER Hello Message
  contents:
  - "9.3.  iSER Header Format for iSER Hello Message\n   An iSER Hello Message MUST\
    \ only contain the iSER header, which MUST\n   have the format as described in\
    \ Figure 4.  If iSERHelloRequired is\n   negotiated to \"Yes\", then iSER Hello\
    \ Message is the first iSER\n   Message sent on the RCaP Stream from the iSER\
    \ layer at the initiator\n   to the iSER layer at the target.\n       0      \
    \             1                   2                   3\n       0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |       |       |       |       |                               |\n   \
    \   | 0010b | Rsvd  | MaxVer| MinVer|           iSER-IRD            |\n      |\
    \       |       |       |       |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           Reserved                            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      |   \
    \                        Reserved                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           Reserved                            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      |   \
    \                        Reserved                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Figure 4: iSER Header Format for iSER Hello Message\n   MaxVer -\
    \ Maximum Version: 4 bits\n      This field specifies the maximum version of the\
    \ iSER protocol\n      supported.  It MUST be set to 10 to indicate the version\
    \ of the\n      specification described in this document.\n   MinVer - Minimum\
    \ Version: 4 bits\n      This field specifies the minimum version of the iSER\
    \ protocol\n      supported.  It MUST be set to 10 to indicate the version of\
    \ the\n      specification described in this document.\n   iSER-IRD: 16 bits\n\
    \      This field contains the value of the iSER-IRD at the initiator.\n   Reserved\
    \ (Rsvd):\n      Reserved fields MUST be set to zero on transmit and MUST be\n\
    \      ignored on receive.\n"
- title: 9.4.  iSER Header Format for iSER HelloReply Message
  contents:
  - "9.4.  iSER Header Format for iSER HelloReply Message\n   An iSER HelloReply Message\
    \ MUST only contain the iSER header, which\n   MUST have the format as described\
    \ in Figure 5.  If iSERHelloRequired\n   is negotiated to \"Yes\", then the iSER\
    \ HelloReply Message is the first\n   iSER Message sent on the RCaP Stream from\
    \ the iSER layer at the\n   target to the iSER layer at the initiator.\n    0\
    \                   1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       |     |R|       |       |                               |\n   | 0011b\
    \ |Rsvd |E| MaxVer| CurVer|           iSER-ORD            |\n   |       |    \
    \ |J|       |       |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Reserved                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                         Reserved                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Reserved                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                         Reserved                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       Figure 5: iSER Header Format for iSER HelloReply Message\n   REJ - Reject\
    \ flag: 1 bit\n      This flag indicates whether the target is rejecting this\n\
    \      connection.  If set to one, the target is rejecting the\n      connection.\n\
    \   MaxVer - Maximum Version: 4 bits\n      This field specifies the maximum version\
    \ of the iSER protocol\n      supported.  It MUST be set to 10 to indicate the\
    \ version of the\n      specification described in this document.\n   CurVer -\
    \ Current Version: 4 bits\n      This field specifies the current version of the\
    \ iSER protocol\n      supported.  It MUST be set to 10 to indicate the version\
    \ of the\n      specification described in this document.\n   iSER-ORD: 16 bits\n\
    \      This field contains the value of the iSER-ORD at the target.\n   Reserved\
    \ (Rsvd):\n      Reserved fields MUST be set to zero on transmit and MUST be\n\
    \      ignored on receive.\n"
- title: 9.5.  SCSI Data Transfer Operations
  contents:
  - "9.5.  SCSI Data Transfer Operations\n   The iSER layer at the initiator and the\
    \ iSER layer at the target\n   handle each SCSI Write, SCSI Read, and bidirectional\
    \ operation as\n   described below.\n"
- title: 9.5.1.  SCSI Write Operation
  contents:
  - "9.5.1.  SCSI Write Operation\n   The iSCSI layer at the initiator MUST invoke\
    \ the Send_Control\n   Operational Primitive to request the iSER layer at the\
    \ initiator to\n   send the SCSI Write Command.  The iSER layer at the initiator\
    \ MUST\n   request the RCaP layer to transmit a Send Message with the message\n\
    \   payload consisting of the iSER header followed by the SCSI Command\n   PDU\
    \ and immediate data (if any).  The SendSE Message should be used\n   if supported\
    \ by the RCaP layer (e.g., iWARP).  If there is solicited\n   data, the iSER layer\
    \ MUST Advertise the Write STag and the Base\n   Offset in the iSER header of\
    \ the Send Message, as described in\n   Section 9.2.  Upon receiving the Send\
    \ Message, the iSER layer at the\n   target MUST notify the iSCSI layer at the\
    \ target by invoking the\n   Control_Notify Operational Primitive qualified with\
    \ the SCSI Command\n   PDU.  See Section 7.3.1 for details on the handling of\
    \ the SCSI Write\n   Command.\n   For the non-immediate unsolicited data, the\
    \ iSCSI layer at the\n   initiator MUST invoke a Send_Control Operational Primitive\
    \ qualified\n   with the SCSI Data-Out PDU.  Upon receiving each Send Message\n\
    \   containing the non-immediate unsolicited data, the iSER layer at the\n   target\
    \ MUST notify the iSCSI layer at the target by invoking the\n   Control_Notify\
    \ Operational Primitive qualified with the SCSI Data-Out\n   PDU.  See Section\
    \ 7.3.4 for details on the handling of the SCSI Data-\n   Out PDU.\n   For the\
    \ solicited data, when the iSCSI layer at the target has an I/O\n   Buffer available,\
    \ it MUST invoke the Get_Data Operational Primitive\n   qualified with the R2T\
    \ PDU.  See Section 7.3.6 for details on the\n   handling of the R2T PDU.\n  \
    \ When the data transfer associated with this SCSI Write operation is\n   complete,\
    \ the iSCSI layer at the target MUST invoke the Send_Control\n   Operational Primitive\
    \ when it is ready to send the SCSI Response PDU.\n   Upon receiving a Send Message\
    \ containing the SCSI Response PDU, the\n   iSER layer at the initiator MUST notify\
    \ the iSCSI layer at the\n   initiator by invoking the Control_Notify Operational\
    \ Primitive\n   qualified with the SCSI Response PDU.  See Section 7.3.2 for details\n\
    \   on the handling of the SCSI Response PDU.\n"
- title: 9.5.2.  SCSI Read Operation
  contents:
  - "9.5.2.  SCSI Read Operation\n   The iSCSI layer at the initiator MUST invoke\
    \ the Send_Control\n   Operational Primitive to request the iSER layer at the\
    \ initiator to\n   send the SCSI Read Command.  The iSER layer at the initiator\
    \ MUST\n   request the RCaP layer to transmit a Send Message with the message\n\
    \   payload consisting of the iSER header followed by the SCSI Command\n   PDU.\
    \  The SendSE Message should be used if supported by the RCaP\n   layer (e.g.,\
    \ iWARP).  The iSER layer at the initiator MUST Advertise\n   the Read STag and\
    \ the Base Offset in the iSER header of the Send\n   Message, as described in\
    \ Section 9.2.  Upon receiving the Send\n   Message, the iSER layer at the target\
    \ MUST notify the iSCSI layer at\n   the target by invoking the Control_Notify\
    \ Operational Primitive\n   qualified with the SCSI Command PDU.  See Section\
    \ 7.3.1 for details\n   on the handling of the SCSI Read Command.\n   When the\
    \ requested SCSI data is available in the I/O Buffer, the\n   iSCSI layer at the\
    \ target MUST invoke the Put_Data Operational\n   Primitive qualified with the\
    \ SCSI Data-In PDU.  See Section 7.3.5 for\n   details on the handling of the\
    \ SCSI Data-In PDU.\n   When the data transfer associated with this SCSI Read\
    \ operation is\n   complete, the iSCSI layer at the target MUST invoke the Send_Control\n\
    \   Operational Primitive when it is ready to send the SCSI Response PDU.\n  \
    \ The SendInvSE Message should be used if supported by the RCaP layer\n   (e.g.,\
    \ iWARP).  Upon receiving the Send Message containing the SCSI\n   Response PDU,\
    \ the iSER layer at the initiator MUST notify the iSCSI\n   layer at the initiator\
    \ by invoking the Control_Notify Operational\n   Primitive qualified with the\
    \ SCSI Response PDU.  See Section 7.3.2\n   for details on the handling of the\
    \ SCSI Response PDU.\n"
- title: 9.5.3.  Bidirectional Operation
  contents:
  - "9.5.3.  Bidirectional Operation\n   The initiator and the target handle the SCSI\
    \ Write and the SCSI Read\n   portions of this bidirectional operation the same\
    \ as described in\n   Sections 9.5.1 and 9.5.2, respectively.\n"
- title: 10.  iSER Error Handling and Recovery
  contents:
  - "10.  iSER Error Handling and Recovery\n   RCaP provides the iSER layer with reliable\
    \ in-order delivery.\n   Therefore, the error management needs of an iSER-assisted\
    \ connection\n   are somewhat different than those of a Traditional iSCSI connection.\n"
- title: 10.1.  Error Handling
  contents:
  - "10.1.  Error Handling\n   iSER error handling is described in the following sections,\n\
    \   classified loosely based on the sources of errors:\n   1. Those originating\
    \ at the transport layer (e.g., TCP).\n   2. Those originating at the RCaP layer.\n\
    \   3. Those originating at the iSER layer.\n   4. Those originating at the iSCSI\
    \ layer.\n"
- title: 10.1.1.  Errors in the Transport Layer
  contents:
  - "10.1.1.  Errors in the Transport Layer\n   If the transport layer is TCP, then\
    \ TCP packets with detected errors\n   are silently dropped by the TCP layer and\
    \ result in retransmission at\n   the TCP layer.  This has no impact on the iSER\
    \ layer.  However,\n   connection loss (e.g., link failure) and unexpected termination\n\
    \   (e.g., TCP graceful or abnormal close without the iSCSI Logout\n   exchanges)\
    \ at the transport layer will cause the iSCSI/iSER\n   connection to be terminated\
    \ as well.\n"
- title: 10.1.1.1.  Failure in the Transport Layer Before RCaP Mode is Enabled
  contents:
  - "10.1.1.1.  Failure in the Transport Layer Before RCaP Mode is Enabled\n   If\
    \ the connection is lost or terminated before the iSCSI layer\n   invokes the\
    \ Allocate_Connection_Resources Operational Primitive, the\n   login process is\
    \ terminated and no further action is required.\n   If the connection is lost\
    \ or terminated after the iSCSI layer has\n   invoked the Allocate_Connection_Resources\
    \ Operational Primitive, then\n   the iSCSI layer MUST request the iSER layer\
    \ to deallocate all\n   connection resources by invoking the Deallocate_Connection_Resources\n\
    \   Operational Primitive.\n"
- title: 10.1.1.2.  Failure in the Transport Layer After RCaP Mode is Enabled
  contents:
  - "10.1.1.2.  Failure in the Transport Layer After RCaP Mode is Enabled\n   If the\
    \ connection is lost or terminated after the iSCSI layer has\n   invoked the Enable_Datamover\
    \ Operational Primitive, the iSER layer\n   MUST notify the iSCSI layer of the\
    \ connection loss by invoking the\n   Connection_Terminate_Notify Operational\
    \ Primitive.  Prior to invoking\n   the Connection_Terminate_Notify Operational\
    \ Primitive, the iSER layer\n   MUST perform the actions described in Section\
    \ 5.2.3.2.\n"
- title: 10.1.2.  Errors in the RCaP Layer
  contents:
  - "10.1.2.  Errors in the RCaP Layer\n   The RCaP layer does not have error recovery\
    \ operations built in.  If\n   errors are detected at the RCaP layer, the RCaP\
    \ layer will terminate\n   the RCaP Stream and the associated connection.\n"
- title: 10.1.2.1.  Errors Detected in the Local RCaP Layer
  contents:
  - "10.1.2.1.  Errors Detected in the Local RCaP Layer\n   If an error is encountered\
    \ at the local RCaP layer, the RCaP layer\n   MAY send a Send Message to the Remote\
    \ Peer to report the error if\n   possible.  (For iWARP, see [RDMAP] for the list\
    \ of errors where a\n   Terminate Message is sent.)  The RCaP layer is responsible\
    \ for\n   terminating the connection.  After the RCaP layer notifies the iSER\n\
    \   layer that the connection is terminated, the iSER layer MUST notify\n   the\
    \ iSCSI layer by invoking the Connection_Terminate_Notify\n   Operational Primitive.\
    \  Prior to invoking the\n   Connection_Terminate_Notify Operational Primitive,\
    \ the iSER layer\n   MUST perform the actions described in Section 5.2.3.2.\n"
- title: 10.1.2.2.  Errors Detected in the RCaP Layer at the Remote Peer
  contents:
  - "10.1.2.2.  Errors Detected in the RCaP Layer at the Remote Peer\n   If an error\
    \ is encountered at the RCaP layer at the Remote Peer, the\n   RCaP layer at the\
    \ Remote Peer may send a Send Message to report the\n   error if possible.  If\
    \ it is unable to send a Send Message, the\n   connection is terminated.  This\
    \ is treated the same as a failure in\n   the transport layer after RDMA is enabled,\
    \ as described in Section\n   10.1.1.2.\n   If an error is encountered at the\
    \ RCaP layer at the Remote Peer and\n   it is able to send a Send Message, the\
    \ RCaP layer at the Remote Peer\n   is responsible for terminating the connection.\
    \  After the local RCaP\n   layer notifies the iSER layer that the connection\
    \ is terminated, the\n   iSER layer MUST notify the iSCSI layer by invoking the\n\
    \   Connection_Terminate_Notify Operational Primitive.  Prior to invoking\n  \
    \ the Connection_Terminate_Notify Operational Primitive, the iSER layer\n   MUST\
    \ perform the actions described in Section 5.2.3.2.\n"
- title: 10.1.3.  Errors in the iSER Layer
  contents:
  - "10.1.3.  Errors in the iSER Layer\n   The error handling due to errors at the\
    \ iSER layer is described in\n   the following sections.\n"
- title: 10.1.3.1.  Insufficient Connection Resources to Support RCaP at
  contents:
  - "10.1.3.1.  Insufficient Connection Resources to Support RCaP at\n           Connection\
    \ Setup\n   After the iSCSI layer at the initiator invokes the\n   Allocate_Connection_Resources\
    \ Operational Primitive during the iSCSI\n   login negotiation phase, if the iSER\
    \ layer at the initiator fails to\n   allocate the connection resources necessary\
    \ to support RCaP, it MUST\n   return a status of failure to the iSCSI layer at\
    \ the initiator.  The\n   iSCSI layer at the initiator MUST terminate the connection\
    \ as\n   described in Section 5.2.3.1.\n   After the iSCSI layer at the target\
    \ invokes the\n   Allocate_Connection_Resources Operational Primitive during the\
    \ iSCSI\n   login negotiation phase, if the iSER layer at the target fails to\n\
    \   allocate the connection resources necessary to support RCaP, it MUST\n   return\
    \ a status of failure to the iSCSI layer at the target.  The\n   iSCSI layer at\
    \ the target MUST send a Login Response with a Status-\n   Class of 0x03 (Target\
    \ Error), and a Status-Code of 0x02 (Out of\n   Resources).  The iSCSI layers\
    \ at the initiator and the target MUST\n   terminate the connection as described\
    \ in Section 5.2.3.1.\n"
- title: 10.1.3.2.  iSER Negotiation Failures
  contents:
  - "10.1.3.2.  iSER Negotiation Failures\n   If iSERHelloRequired is negotiated to\
    \ \"Yes\" and the RCaP or iSER\n   related parameters declared by the initiator\
    \ in the iSER Hello\n   Message are unacceptable to the iSER layer at the target,\
    \ the iSER\n   layer at the target MUST set the Reject (REJ) flag, as described\
    \ in\n   Section 9.4, in the iSER HelloReply Message.  The following are the\n\
    \   cases when the iSER layer MUST set the REJ flag to 1 in the\n   HelloReply\
    \ Message:\n   *  The initiator-declared iSER-IRD value is greater than 0, and\
    \ the\n      target-declared iSER-ORD value is 0.\n   *  The initiator-supported\
    \ and the target-supported iSER protocol\n      versions do not overlap.\n   After\
    \ requesting the RCaP layer to send the iSER HelloReply Message,\n   the handling\
    \ of the error situation is the same as that for iSER\n   format errors as described\
    \ in Section 10.1.3.3.\n"
- title: 10.1.3.3.  iSER Format Errors
  contents:
  - "10.1.3.3.  iSER Format Errors\n   The following types of errors in an iSER header\
    \ are considered format\n   errors:\n   *  Illegal contents of any iSER header\
    \ field\n   *  Inconsistent field contents in an iSER header\n   *  Length error\
    \ for an iSER Hello or HelloReply Message (see Sections\n      9.3 and 9.4)\n\
    \   When a format error is detected, the following events MUST occur in\n   the\
    \ specified sequence:\n   1. The iSER layer MUST request the RCaP layer to terminate\
    \ the RCaP\n      Stream.  The RCaP layer MUST terminate the associated connection.\n\
    \   2.  The iSER layer MUST notify the iSCSI layer of the connection\n      termination\
    \ by invoking the Connection_Terminate_Notify\n      Operational Primitive.  Prior\
    \ to invoking the\n      Connection_Terminate_Notify Operational Primitive, the\
    \ iSER layer\n      MUST perform the actions described in Section 5.2.3.2.\n"
- title: 10.1.3.4.  iSER Protocol Errors
  contents:
  - "10.1.3.4.  iSER Protocol Errors\n   If iSERHelloRequired is negotiated to \"\
    Yes\", then the first iSER\n   Message sent by the iSER layer at the initiator\
    \ MUST be the iSER\n   Hello Message (see Section 9.3).  In this case the first\
    \ iSER Message\n   sent by the iSER layer at the target MUST be the iSER HelloReply\n\
    \   Message (see Section 9.4).  Failure to send the iSER Hello or\n   HelloReply\
    \ Message, as indicated by the wrong Opcode in the iSER\n   header, is a protocol\
    \ error.  Conversely, if the iSER Hello Message\n   is sent by the iSER layer\
    \ at the initiator when iSERHelloRequired is\n   negotiated to \"No\", the iSER\
    \ layer at the target MAY treat this as a\n   protocol error or respond with an\
    \ iSER HelloReply Message.  The\n   handling of iSER protocol errors is the same\
    \ as that for iSER format\n   errors as described in Section 10.1.3.3.\n   If\
    \ the sending side of an iSER-enabled connection acts in a manner\n   not permitted\
    \ by the negotiated or declared login/text operational\n   key values as described\
    \ in Section 6, this is a protocol error and\n   the receiving side MAY handle\
    \ this the same as for iSER format errors\n   as described in Section 10.1.3.3.\n"
- title: 10.1.4.  Errors in the iSCSI Layer
  contents:
  - "10.1.4.  Errors in the iSCSI Layer\n   The error handling due to errors at the\
    \ iSCSI layer is described in\n   the following sections.  For error recovery,\
    \ see Section 10.2.\n"
- title: 10.1.4.1.  iSCSI Format Errors
  contents:
  - "10.1.4.1.  iSCSI Format Errors\n   When an iSCSI format error is detected, the\
    \ iSCSI layer MUST request\n   the iSER layer to terminate the RCaP Stream by\
    \ invoking the\n   Connection_Terminate Operational Primitive.  For more details\
    \ on\n   connection termination, see Section 5.2.3.1.\n"
- title: 10.1.4.2.  iSCSI Digest Errors
  contents:
  - "10.1.4.2.  iSCSI Digest Errors\n   In the iSER-assisted mode, the iSCSI layer\
    \ will not see any digest\n   error because both the HeaderDigest and the DataDigest\
    \ keys are\n   negotiated to \"None\".\n"
- title: 10.1.4.3.  iSCSI Sequence Errors
  contents:
  - "10.1.4.3.  iSCSI Sequence Errors\n   For Traditional iSCSI, sequence errors are\
    \ caused by dropped PDUs due\n   to header or data digest errors.  Since digests\
    \ are not used in iSER-\n   assisted mode and the RCaP layer will deliver all\
    \ messages in the\n   order they were sent, sequence errors will not occur in\
    \ iSER-assisted\n   mode.\n"
- title: 10.1.4.4.  iSCSI Protocol Error
  contents:
  - "10.1.4.4.  iSCSI Protocol Error\n   When the iSCSI layer handles certain protocol\
    \ errors by dropping the\n   connection, the error handling is the same as that\
    \ for iSCSI format\n   errors as described in Section 10.1.4.1.\n   When the iSCSI\
    \ layer uses the iSCSI Reject PDU and response codes to\n   handle certain other\
    \ protocol errors, no special handling at the iSER\n   layer is required.\n"
- title: 10.1.4.5.  SCSI Timeouts and Session Errors
  contents:
  - "10.1.4.5.  SCSI Timeouts and Session Errors\n   This is handled at the iSCSI\
    \ layer, and no special handling at the\n   iSER layer is required.\n"
- title: 10.1.4.6.  iSCSI Negotiation Failures
  contents:
  - "10.1.4.6.  iSCSI Negotiation Failures\n   For negotiation failures that happen\
    \ during the Login Phase at the\n   initiator after the iSCSI layer has invoked\
    \ the\n   Allocate_Connection_Resources Operational Primitive and before the\n\
    \   Enable_Datamover Operational Primitive has been invoked, the iSCSI\n   layer\
    \ MUST request the iSER layer to deallocate all connection\n   resources by invoking\
    \ the Deallocate_Connection_Resources Operational\n   Primitive.  The iSCSI layer\
    \ at the initiator MUST terminate the\n   connection.\n   For negotiation failures\
    \ during the Login Phase at the target, the\n   iSCSI layer can use a Login Response\
    \ with a Status-Class other than 0\n   (success) to terminate the Login Phase.\
    \  If the iSCSI layer has\n   invoked the Allocate_Connection_Resources Operational\
    \ Primitive and\n   has not yet invoked the Enable_Datamover Operational Primitive,\
    \ the\n   iSCSI layer at the target MUST request the iSER layer at the target\n\
    \   to deallocate all connection resources by invoking the\n   Deallocate_Connection_Resources\
    \ Operational Primitive.  The iSCSI\n   layer at both the initiator and the target\
    \ MUST terminate the\n   connection.\n   During the iSCSI Login Phase, if the\
    \ iSCSI layer at the initiator\n   receives a Login Response from the target with\
    \ a Status-Class other\n   than 0 (Success) after the iSCSI layer at the initiator\
    \ has invoked\n   the Allocate_Connection_Resources Operational Primitive, the\
    \ iSCSI\n   layer MUST request the iSER layer to deallocate all connection\n \
    \  resources by invoking the Deallocate_Connection_Resources Operational\n   Primitive.\
    \  The iSCSI layer MUST terminate the connection in this\n   case.\n   For negotiation\
    \ failures during the Full Feature Phase, the error\n   handling is left to the\
    \ iSCSI layer and no special handling at the\n   iSER layer is required.\n"
- title: 10.2.  Error Recovery
  contents:
  - "10.2.  Error Recovery\n   Error recovery requirements of iSCSI/iSER are the same\
    \ as that of\n   Traditional iSCSI.  All three ErrorRecoveryLevels as defined\
    \ in\n   [iSCSI] are supported in iSCSI/iSER.\n   *  For ErrorRecoveryLevel 0,\
    \ session recovery is handled by iSCSI and\n      no special handling by the iSER\
    \ layer is required.\n   *  For ErrorRecoveryLevel 1, see Section 10.2.1 on PDU\
    \ Recovery.\n   *  For ErrorRecoveryLevel 2, see Section 10.2.2 on Connection\n\
    \      Recovery.\n   The iSCSI layer may invoke the Notice_Key_Values Operational\n\
    \   Primitive during connection setup to request the iSER layer to take\n   note\
    \ of the value of the operational ErrorRecoveryLevel, as described\n   in Sections\
    \ 5.1.1 and 5.1.2.\n"
- title: 10.2.1.  PDU Recovery
  contents:
  - "10.2.1.  PDU Recovery\n   As described in Sections 10.1.4.2 and 10.1.4.3, digest\
    \ and sequence\n   errors will not occur in the iSER-assisted mode.  If the RCaP\
    \ layer\n   detects an error, it will close the iSCSI/iSER connection, as\n  \
    \ described in Section 10.1.2.  Therefore, PDU recovery is not useful\n   in the\
    \ iSER-assisted mode.\n   The iSCSI layer at the initiator SHOULD disable iSCSI\
    \ timeout-driven\n   PDU retransmissions.\n"
- title: 10.2.2.  Connection Recovery
  contents:
  - "10.2.2.  Connection Recovery\n   The iSCSI layer at the initiator MAY reassign\
    \ connection allegiance\n   for non-immediate commands that are still in progress\
    \ and are\n   associated with the failed connection by using a Task Management\n\
    \   Function Request with the TASK REASSIGN function.  See Section 7.3.3\n   for\
    \ more details.\n   When the iSCSI layer at the initiator does a task reassignment\
    \ for a\n   SCSI Write command, it MUST qualify the Send_Control Operational\n\
    \   Primitive invocation with DataDescriptorOut, which defines the I/O\n   Buffer\
    \ for both the non-immediate unsolicited data and the solicited\n   data.  This\
    \ allows the iSCSI layer at the target to use recovery R2Ts\n   to request data\
    \ originally sent as unsolicited and solicited from the\n   initiator.\n   When\
    \ the iSCSI layer at the target accepts a reassignment request for\n   a SCSI\
    \ Read command, it MUST request the iSER layer to process SCSI\n   Data-In for\
    \ all unacknowledged data by invoking the Put_Data\n   Operational Primitive.\
    \  See Section 7.3.5 on the handling of SCSI\n   Data-In.\n   When the iSCSI layer\
    \ at the target accepts a reassignment request for\n   a SCSI Write command, it\
    \ MUST request the iSER layer to process a\n   recovery R2T for any non-immediate\
    \ unsolicited data and any solicited\n   data sequences that have not been received\
    \ by invoking the Get_Data\n   Operational Primitive.  See Section 7.3.6 on the\
    \ handling of Ready To\n   Transfer (R2T).\n   The iSCSI layer at the target MUST\
    \ NOT issue recovery R2Ts on an\n   iSCSI/iSER connection for a task for which\
    \ the connection allegiance\n   was never reassigned.  The iSER layer at the target\
    \ MAY reject such a\n   recovery R2T received via the Get_Data Operational Primitive\n\
    \   invocation from the iSCSI layer at the target, with an appropriate\n   error\
    \ code.\n   The iSER layer at the target will process the requests invoked by\
    \ the\n   Put_Data and Get_Data Operational Primitives for a reassigned task in\n\
    \   the same way as for the original commands.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   When iSER is layered on top of an RCaP layer\
    \ and provides the RDMA\n   extensions to the iSCSI protocol, the security considerations\
    \ of iSER\n   are the same as that of the underlying RCaP layer.  For iWARP, this\n\
    \   is described in [RDMAP] and [RDDPSEC], plus the updates to both of\n   those\
    \ RFCs that are contained in [IPSEC-IPS].\n   Since iSER-assisted iSCSI protocol\
    \ is still functionally iSCSI from a\n   security considerations perspective,\
    \ all of the iSCSI security\n   requirements as described in [iSCSI] apply.  If\
    \ iSER is layered on\n   top of a non-IP-based RCaP layer, all the security protocol\n\
    \   mechanisms applicable to that RCaP layer are also applicable to an\n   iSCSI/iSER\
    \ connection.  If iSER is layered on top of a non-IP\n   protocol, the IPsec mechanism\
    \ as specified in [iSCSI] MUST be\n   implemented at any point where the iSER\
    \ protocol enters the IP\n   network (e.g., via gateways), and the non-IP protocol\
    \ SHOULD\n   implement (optional to use) a packet-by-packet security protocol\n\
    \   equal in strength to the IPsec mechanism specified by [iSCSI].\n   In order\
    \ to protect target RCaP connection resources from possible\n   resource exhaustion\
    \ attacks, allocation of such resources for a new\n   connection MUST be delayed\
    \ until it is reasonably certain that the\n   new connection is not part of a\
    \ resource exhaustion attack (e.g.,\n   until after the SecurityNegotiation stage\
    \ of Login); see Section\n   5.1.2.\n   A valid STag exposes I/O Buffer resources\
    \ to the network for access\n   via the RCaP.  The security measures for the RCAP\
    \ and iSER described\n   in the above paragraphs can be used to protect data in\
    \ an I/O buffer\n   from undesired disclosure or modification, and these measures\
    \ are of\n   heightened importance for implementations that retain (e.g., cache)\n\
    \   STags for use in multiple tasks (e.g., iSCSI I/O operations) because\n   the\
    \ resources are exposed to the network for a longer period of time.\n   A complementary\
    \ means of controlling I/O Buffer resource exposure is\n   invalidation of the\
    \ STag after completion of the associated task, as\n   specified in Section 1.5.1.\
    \  The use of Send with Invalidate messages\n   (which cause remote STag invalidation)\
    \ is OPTIONAL, therefore the\n   iSER layer MUST NOT rely on use of a Send with\
    \ Invalidate by its\n   Remote Peer to cause local STag invalidation.  If an STag\
    \ is expected\n   to be invalid after completion of a task, the iSER layer MUST\
    \ check\n   the STag and invalidate it if it is still valid.\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   IANA has added the following entries to the \"iSCSI\
    \ Login/Text Keys\"\n   registry:\n      MaxAHSLength, RFC 7145\n      TaggedBufferForSolicitedDataOnly,\
    \ RFC 7145\n      iSERHelloRequired, RFC 7145\n   IANA has updated the following\
    \ entries in the \"iSCSI Login/Text Keys\"\n   registry to reference this RFC.\n\
    \      InitiatorRecvDataSegmentLength\n      MaxOutstandingUnexpectedPDUs\n  \
    \    RDMAExtensions\n      TargetRecvDataSegmentLength\n   IANA has also changed\
    \ the reference to RFC 5046 for the \"iSCSI\n   Login/Text Keys\" registry to\
    \ refer to this RFC.\n   IANA has updated the registrations of the iSER Opcodes\
    \ 1-3 in the\n   \"iSER Opcodes\" registry to reference this RFC.  IANA has also\
    \ changed\n   the reference to RFC 5046 for the \"iSER Opcodes\" registry to refer\
    \ to\n   this RFC.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC5046]   Ko, M., Chadalapaka, M., Hufferd,\
    \ J., Elzur, U., Shah,\n               H., and P. Thaler, \"Internet Small Computer\
    \ System\n               Interface (iSCSI) Extensions for Remote Direct Memory\n\
    \               Access (RDMA)\", RFC 5046, October 2007.\n   [iSCSI]     Chadalapaka,\
    \ M., Satran, J., Meth, K., and D. Black,\n               \"Internet Small Computer\
    \ System Interface (iSCSI)\n               Protocol (Consolidated)\", RFC 7143,\
    \ April 2014.\n   [RDMAP]     Recio, R., Metzler, B., Culley, P., Hilland, J.,\
    \ and D.\n               Garcia, \"A Remote Direct Memory Access Protocol\n  \
    \             Specification\", RFC 5040, October 2007.\n   [DDP]       Shah, H.,\
    \ Pinkerton, J., Recio, R., and P. Culley,\n               \"Direct Data Placement\
    \ over Reliable Transports\", RFC\n               5041, October 2007.\n   [MPA]\
    \       Culley, P., Elzur, U., Recio, R., Bailey, S., and J.\n               Carrier,\
    \ \"Marker PDU Aligned Framing for TCP\n               Specification\", RFC 5044,\
    \ October 2007.\n   [RDDPSEC]   Pinkerton, J. and E. Deleganes, \"Direct Data\
    \ Placement\n               Protocol (DDP) / Remote Direct Memory Access Protocol\n\
    \               (RDMAP) Security\", RFC 5042, October 2007.\n   [TCP]       Postel,\
    \ J., \"Transmission Control Protocol\", STD 7, RFC\n               793, September\
    \ 1981.\n   [RFC2119]   Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \               Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [IPSEC-IPS]\
    \ Black, D. and P. Koning, \"Securing Block Storage\n               Protocols\
    \ over IP: RFC 3723 Requirements Update for IPsec\n               v3\", RFC 7146,\
    \ April 2014.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [SAM5]      INCITS Technical Committee T10,\
    \ \"SCSI Architecture Model\n               - 5 (SAM-5)\", T10/BSR INCITS 515\
    \ rev 04, Committee Draft.\n   [iSCSI-SAM] Knight, F. and M. Chadalapaka, \"Internet\
    \ Small Computer\n               System Interface (iSCSI) SCSI Features Update\"\
    , RFC 7144,\n               April 2014.\n   [DA]        Chadalapaka, M., Hufferd,\
    \ J., Satran, J., and H. Shah,\n               \"DA: Datamover Architecture for\
    \ the Internet Small\n               Computer System Interface (iSCSI)\", RFC\
    \ 5047, October\n               2007.\n   [IB]        InfiniBand Architecture\
    \ Specification Volume 1 Release\n               1.2, October 2004\n   [IPoIB]\
    \     Chu, J. and V. Kashyap, \"Transmission of IP over\n               InfiniBand\
    \ (IPoIB)\", RFC 4391, April 2006.\n"
- title: Appendix A.  Summary of Changes from RFC 5046
  contents:
  - "Appendix A.  Summary of Changes from RFC 5046\n   All changes are backward compatible\
    \ with RFC 5046 except for item #8,\n   which reflects all known implementations\
    \ of iSER, each of which has\n   implemented this change, despite its absence\
    \ in RFC 5046.  As a\n   result, a hypothetical implementation based on RFC 5046\
    \ will not\n   interoperate with an implementation based on this version of the\n\
    \   specification.\n   1.  Removed the requirement that a connection be opened\
    \ in \"normal\"\n       TCP mode and transitioned to zero-copy mode.  This allows\
    \ the\n       specification to conform to existing implementations for both\n\
    \       InfiniBand and iWARP.  Changes were made in Sections 1, 3.1.6,\n     \
    \  4.2, 5.1, 5.1.1, 5.1.2, 5.1.3, 10.1.3.4, and 11.\n   2.  Added a clause in\
    \ Section 6.2 to clarify that\n       MaxRecvDataSegmentLength must be ignored\
    \ if it is declared in the\n       Login Phase.\n   3.  Added a clause in Section\
    \ 6.2 to clarify that the initiator must\n       not send more than InitiatorMaxRecvDataSegmentLength\
    \ worth of\n       data when a NOP-Out request is sent with a valid Initiator\
    \ Task\n       Tag.  Since InitiatorMaxRecvDataSegmentLength can be smaller than\n\
    \       TargetMaxRecvDataSegmentLength, returning the original data in\n     \
    \  the NOP-Out request in this situation can overflow the receive\n       buffer\
    \ unless the length of the data sent with the NOP-Out\n       request is less\
    \ than InitiatorMaxRecvDataSegmentLength.\n   4.  Added a SHOULD negotiate recommendation\
    \ for\n       MaxOutstandingUnexpectedPDUs in Section 6.7.\n   5.  Added MaxAHSLength\
    \ key in Section 6.8 to set a limit on the AHS\n       Length.  This is useful\
    \ when posting receive buffers in knowing\n       what the maximum possible message\
    \ length is in a PDU that\n       contains AHS.\n   6.  Added TaggedBufferForSolicitedDataOnly\
    \ key in Section 6.9 to\n       indicate how the memory region will be used. \
    \ An initiator can\n       treat the memory regions intended for unsolicited and\
    \ solicited\n       data differently and can use different registration modes.\
    \  In\n       contrast, RFC 5046 treats the memory occupied by the data as a\n\
    \       contiguous (or virtually contiguous, by means of scatter-gather\n    \
    \   mechanisms) and homogenous region.  Adding a new key will allow\n       different\
    \ memory models to be accommodated.  Changes were also\n       made in Section\
    \ 7.3.1.\n   7.  Added iSERHelloRequired key in Section 6.10 to allow an initiator\n\
    \       to allocate connection resources after the login process by\n       requiring\
    \ the use of the iSER Hello messages before sending iSCSI\n       PDUs.  The default\
    \ is \"No\" since iSER Hello messages have not\n       been implemented and are\
    \ not in use.  Changes were made in\n       Sections 5.1.1, 5.1.2, 5.1.3, 8.2,\
    \ 9.3, 9.4, 10.1.3.2, and\n       10.1.3.4.\n   8.  Added two 64-bit fields in\
    \ iSER header in Section 9.2 for the\n       Read Base Offset and the Write Base\
    \ Offset to accommodate a non-\n       zero Base Offset.  This allows one implementation\
    \ such as the\n       Open Fabrics Enterprise Distribution (OFED) stack to be\
    \ used in\n       both the InfiniBand and the iWARP environment.\n       Changes\
    \ were made in the definitions of Base Offset,\n       Advertisement, and Tagged\
    \ Buffer.  Changes were also made in\n       Sections 1.5.1, 1.6, 1.7, 7.3.1,\
    \ 7.3.3, 7.3.5, 7.3.6, 9.1, 9.3,\n       9.4, 9.5.1, and 9.5.2.  This change is\
    \ not backward compatible\n       with RFC 5046, but it was part of all known\
    \ implementations of\n       iSER at the time this document was developed.\n \
    \  9.  Remove iWARP-specific behavior.  Changes were made in the\n       definitions\
    \ of RDMA Operation and Send Message Type.\n       Clarifications were added in\
    \ Section 1.5.2 on the use of SendSE\n       and SendInvSE.  These clarifications\
    \ reflect a removal of the\n       requirements in RFC 5046 for the use of these\
    \ messages, as\n       implementations have not followed RFC 5046 in this area.\
    \  Changes\n       affecting Send with Invalidate were made in Sections 1.5.1,\
    \ 1.6,\n       1.7, 4.1, and 7.3.2.  Changes affecting Terminate were made in\n\
    \       Sections 10.1.2.1 and 10.1.2.2.  Changes were made in Appendix B\n   \
    \    to remove iWARP headers.\n   10. Removed denial-of-service descriptions for\
    \ the initiator in\n       Section 5.1.1 since they are applicable for the target\
    \ only.\n   11. Clarified in Section 1.5.1 that STag invalidation is the\n   \
    \    initiator's responsibility for security reasons, and the\n       initiator\
    \ cannot rely on the target using an Invalidate version\n       of Send.  Added\
    \ text in Section 11 on Stag invalidation.\n"
- title: Appendix B.  Message Format for iSER
  contents:
  - "Appendix B.  Message Format for iSER\n   This section is for information only\
    \ and is NOT part of the standard.\n"
- title: B.1.  iWARP Message Format for iSER Hello Message
  contents:
  - "B.1.  iWARP Message Format for iSER Hello Message\n   The following figure depicts\
    \ an iSER Hello Message encapsulated in an\n   iWARP SendSE Message.\n    0  \
    \                 1                   2                   3\n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         MPA Header            |  DDP Control  | RDMA Control  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Reserved                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       (Send) Queue Number                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 (Send) Message Sequence Number                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      (Send) Message Offset                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0010b | Zeros | 0001b | 0001b |           iSER-IRD            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           All Zeros                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                         All Zeros                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           All Zeros                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                         All Zeros                           |\n   |        \
    \                   MPA CRC                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     Figure 6: SendSE Message Containing an iSER Hello Message\n"
- title: B.2.  iWARP Message Format for iSER HelloReply Message
  contents:
  - "B.2.  iWARP Message Format for iSER HelloReply Message\n   The following figure\
    \ depicts an iSER HelloReply Message encapsulated\n   in an iWARP SendSE Message.\
    \  The Reject (REJ) flag is set to zero.\n    0                   1          \
    \         2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         MPA Header            |  DDP Control  | RDMA Control  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Reserved                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       (Send) Queue Number                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 (Send) Message Sequence Number                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      (Send) Message Offset                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0011b |Zeros|0| 0001b | 0001b |           iSER-ORD            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           All Zeros                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                         All Zeros                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           All Zeros                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                         All Zeros                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           MPA CRC                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     Figure 7: SendSE Message Containing an iSER HelloReply Message\n"
- title: B.3.  iSER Header Format for SCSI Read Command PDU
  contents:
  - "B.3.  iSER Header Format for SCSI Read Command PDU\n   The following figure depicts\
    \ a SCSI Read Command PDU embedded in an\n   iSER Message.  For this particular\
    \ example, in the iSER header, the\n   Write STag Valid flag is set to zero, the\
    \ Read STag Valid flag is set\n   to one, the Write STag field is set to all zeros,\
    \ the Write Base\n   Offset field is set to all zeros, the Read STag field contains\
    \ a\n   valid Read STag, and the Read Base Offset field contains a valid Base\n\
    \   Offset for the Read Tagged Buffer.\n    0                   1            \
    \       2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0001b |0|1|                  All zeros                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         All Zeros                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                       All Zeros                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Read STag                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                     Read Base Offset                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       SCSI Read Command PDU                   |\n   // \
    \                                                            //\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        Figure 8: iSER Header Format for SCSI Read Command PDU\n"
- title: B.4.  iSER Header Format for SCSI Write Command PDU
  contents:
  - "B.4.  iSER Header Format for SCSI Write Command PDU\n   The following figure\
    \ depicts a SCSI Write Command PDU embedded in an\n   iSER Message.  For this\
    \ particular example, in the iSER header, the\n   Write STag Valid flag is set\
    \ to one, the Read STag Valid flag is set\n   to zero, the Write STag field contains\
    \ a valid Write STag, the Write\n   Base Offset field contains a valid Base Offset\
    \ for the Write Tagged\n   Buffer, the Read STag field is set to all zeros since\
    \ it is not used,\n   and the Read Base Offset field is set to all zeros.\n  \
    \  0                   1                   2                   3\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0001b |1|0|                  All zeros                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Write STag                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                    Write Base Offset                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         All Zeros                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                       All Zeros                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       SCSI Write Command PDU                  |\n   // \
    \                                                            //\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       Figure 9: iSER Header Format for SCSI Write Command PDU\n"
- title: B.5.  iSER Header Format for SCSI Response PDU
  contents:
  - "B.5.  iSER Header Format for SCSI Response PDU\n   The following figure depicts\
    \ a SCSI Response PDU embedded in an iSER\n   Message:\n    0                \
    \   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0001b |0|0|                  All Zeros                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           All Zeros                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                         All Zeros                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           All Zeros                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                         All Zeros                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       SCSI Response PDU                       |\n   // \
    \                                                            //\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           Figure 10: iSER Header Format for SCSI Response PDU\n"
- title: Appendix C.  Architectural Discussion of iSER over InfiniBand
  contents:
  - "Appendix C.  Architectural Discussion of iSER over InfiniBand\n   This section\
    \ explains how an InfiniBand network (with Gateways) would\n   be structured.\
    \  It is informational only and is intended to provide\n   insight on how iSER\
    \ is used in an InfiniBand environment.\n"
- title: C.1.  Host Side of iSCSI and iSER Connections in InfiniBand
  contents:
  - "C.1.  Host Side of iSCSI and iSER Connections in InfiniBand\n   Figure 11 defines\
    \ the topologies in which iSCSI and iSER will be able\n   to operate on an InfiniBand\
    \ Network.\n   +---------+ +---------+ +---------+ +---------+ +--- -----+\n \
    \  |  Host   | |  Host   | |   Host  | |   Host  | |   Host  |\n   |         |\
    \ |         | |         | |         | |         |\n   +---+-+---+ +---+-+---+\
    \ +---+-+---+ +---+-+---+ +---+-+---+\n   |HCA| |HCA| |HCA| |HCA| |HCA| |HCA|\
    \ |HCA| |HCA| |HCA| |HCA|\n   +-v-+ +-v-+ +-v-+ +-v-+ +-v-+ +-v-+ +-v-+ +-v-+\
    \ +-v-+ +-v-+\n     |----+------|-----+-----|-----+-----|-----+-----|-----+--->\
    \ To IB\n   IB|        IB |        IB |        IB |        IB |    SubNet2 SWTCH\n\
    \   +-v-----------v-----------v-----------v-----------v---------+\n   |      \
    \            InfiniBand Switch for Subnet1            |\n   +---+-----+--------+-----+--------+-----+------------v------+\n\
    \       | TCA |        | TCA |        | TCA |            |\n       +-----+   \
    \     +-----+        +-----+            | IB\n      /  IB   \\      /  IB   \\\
    \      /       \\     +--+--v--+--+\n     |  iSER   |    |  iSER   |    |  IPoIB\
    \  |    |  | TCA |  |\n     | Gateway |    | Gateway |    | Gateway |    |  +-----+\
    \  |\n     |   to    |    |   to    |    |   to    |    | Storage   |\n     |\
    \  iSCSI  |    |  iSER   |    |   IP    |    | Controller|\n     |   TCP   | \
    \   |  iWARP  |    |Ethernet |    +-----+-----+\n     +---v-----|    +---v-----|\
    \    +----v----+\n         | EN           | EN            | EN\n         +--------------+---------------+---->\
    \ to IP based storage\n           Ethernet links that carry iSCSI or iWARP\n \
    \               Figure 11: iSCSI and iSER on IB\n   In Figure 11, the Host systems\
    \ are connected via the InfiniBand Host\n   Channel Adapters (HCAs) to the InfiniBand\
    \ links.  With the use of IB\n   switch(es), the InfiniBand links connect the\
    \ HCA to InfiniBand Target\n   Channel Adapters (TCAs) located in gateways or\
    \ Storage Controllers.\n   An iSER-capable IB-IP Gateway converts the iSER Messages\
    \ encapsulated\n   in IB protocols to either standard iSCSI, or iSER Messages\
    \ for iWARP.\n   An [IPoIB] Gateway converts the InfiniBand [IPoIB] protocol to\
    \ IP\n   protocol, and in the iSCSI case, permits iSCSI to be operated on an\n\
    \   IB Network between the Hosts and the [IPoIB] Gateway.\n"
- title: C.2.  Storage Side of iSCSI and iSER Mixed Network Environment
  contents:
  - "C.2.  Storage Side of iSCSI and iSER Mixed Network Environment\n   Figure 12\
    \ shows a storage controller that has three different portal\n   groups: one supporting\
    \ only iSCSI (TPG-4), one supporting iSER/iWARP\n   or iSCSI (TPG-2), and one\
    \ supporting iSER/IB (TPG-1).  Here, \"TPG\"\n   stands for \"Target Portal Group\"\
    .\n                  |                |                |\n                  |\
    \                |                |\n            +--+--v--+----------+--v--+----------+--v--+--+\n\
    \            |  | IB  |          |iWARP|          | EN  |  |\n            |  |\
    \     |          | TCP |          | NIC |  |\n            |  |(TCA)|         \
    \ | RNIC|          |     |  |\n            |  +-----|          +-----+       \
    \   +-----+  |\n            |   TPG-1            TPG-2            TPG-4   |\n\
    \            |  9.1.3.3          9.1.2.4          9.1.2.6  |\n            |  \
    \                                           |\n            |                 \
    \ Storage Controller         |\n            |                                \
    \             |\n            +---------------------------------------------+\n\
    \   Figure 12: Storage Controller with TCP, iWARP, and IB Connections\n   The\
    \ normal iSCSI portal group advertising processes (via the Service\n   Location\
    \ Protocol (SLP), Internet Storage Name Service (iSNS), or\n   SendTargets) are\
    \ available to a Storage Controller.\n"
- title: C.3.  Discovery Processes for an InfiniBand Host
  contents:
  - "C.3.  Discovery Processes for an InfiniBand Host\n   An InfiniBand Host system\
    \ can gather portal group IP addresses from\n   SLP, iSNS, or the SendTargets\
    \ discovery processes by using TCP/IP via\n   [IPoIB].  After obtaining one or\
    \ more remote portal IP addresses, the\n   Initiator uses the standard IP mechanisms\
    \ to resolve the IP address\n   to a local outgoing interface and the destination\
    \ hardware address\n   (Ethernet MAC or InfiniBand Global Identifier (GID) of\
    \ the target or\n   a gateway leading to the target).  If the resolved interface\
    \ is an\n   [IPoIB] network interface, then the target portal can be reached\n\
    \   through an InfiniBand fabric.  In this case, the Initiator can\n   establish\
    \ an iSCSI/TCP or iSCSI/iSER session with the Target over\n   that InfiniBand\
    \ interface, using the hardware address (InfiniBand\n   GID) obtained through\
    \ the standard Address Resolution Protocol (ARP)\n   processes.\n   If more than\
    \ one IP address is obtained through the discovery\n   process, the Initiator\
    \ should select a Target IP address that is on\n   the same IP subnet as the Initiator,\
    \ if one exists.  This will avoid\n   a potential overhead of going through a\
    \ gateway when a direct path\n   exists.\n   In addition, a user can configure\
    \ manual static IP route entries if a\n   particular path to the target is preferred.\n"
- title: C.4.  IBTA Connection Specifications
  contents:
  - "C.4.  IBTA Connection Specifications\n   It is outside the scope of this document,\
    \ but it is expected that the\n   InfiniBand Trade Association (IBTA) has or will\
    \ define:\n   *  The iSER ServiceID\n   *  A means for permitting a Host to establish\
    \ a connection with a\n      peer InfiniBand end-node, and that peer indicating\
    \ when that end-\n      node supports iSER, so the Host would be able to fall\
    \ back to\n      iSCSI/TCP over [IPoIB].\n   *  A means for permitting the Host\
    \ to establish connections with IB\n      iSER connections on storage controllers\
    \ or IB iSER-connected\n      Gateways in preference to IPoIB-connected Gateways/Bridges\
    \ or\n      connections to Target Storage Controllers that also accept iSCSI\n\
    \      via [IPoIB].\n   *  A means for combining the IB ServiceID for iSER and\
    \ the IP port\n      number such that the IB Host can use normal IB connection\n\
    \      processes, yet ensure that the iSER target peer can actually\n      connect\
    \ to the required IP port number.\n"
- title: Appendix D.  Acknowledgments
  contents:
  - "Appendix D.  Acknowledgments\n   The authors acknowledge the following individuals\
    \ for identifying\n   implementation issues and/or suggesting resolutions to the\
    \ issues\n   clarified in this document: Robert Russell, Arne Redlich, David\n\
    \   Black, Mallikarjun Chadalapaka, Tom Talpey, Felix Marti, Robert\n   Sharp,\
    \ Caitlin Bestler, Hemal Shah, Spencer Dawkins, Pete Resnick,\n   Ted Lemon, Pete\
    \ McCann, and Steve Kent.  Credit also goes to the\n   authors of the original\
    \ iSER Specification [RFC5046], including\n   Michael Ko, Mallikarjun Chadalapaka,\
    \ John Hufferd, Uri Elzur, Hemal\n   Shah, and Patricia Thaler.  This document\
    \ benefited from all of their\n   contributions.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Michael Ko\n   EMail: mkosjc@gmail.com\n   Alexander Nezhinsky\n\
    \   Mellanox Technologies\n   13 Zarchin St.\n   Raanana 43662\n   Israel\n  \
    \ Phone: +972-74-712-9000\n   EMail: alexandern@mellanox.com, nezhinsky@gmail.com\n"
