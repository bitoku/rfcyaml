- title: __initial_text__
  contents:
  - "   Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.2\n      \
    \                   Message Specification\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines Secure/Multipurpose Internet Mail Extensions\n\
    \   (S/MIME) version 3.2.  S/MIME provides a consistent way to send and\n   receive\
    \ secure MIME data.  Digital signatures provide authentication,\n   message integrity,\
    \ and non-repudiation with proof of origin.\n   Encryption provides data confidentiality.\
    \  Compression can be used to\n   reduce data size.  This document obsoletes RFC\
    \ 3851.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by\n   the Internet Engineering\
    \ Steering Group (IESG).  Further\n   information on Internet Standards is available\
    \ in Section 2 of\n   RFC 5741.\n   Information about the current status of this\
    \ document, any\n   errata, and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5751.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Specification Overview .....................................4\n  \
    \    1.2. Definitions ................................................5\n    \
    \  1.3. Conventions Used in This Document ..........................6\n      1.4.\
    \ Compatibility with Prior Practice of S/MIME ................7\n      1.5. Changes\
    \ from S/MIME v3 to S/MIME v3.1 ......................7\n      1.6. Changes since\
    \ S/MIME v3.1 ..................................7\n   2. CMS Options .....................................................9\n\
    \      2.1. DigestAlgorithmIdentifier ..................................9\n  \
    \    2.2. SignatureAlgorithmIdentifier ...............................9\n    \
    \  2.3. KeyEncryptionAlgorithmIdentifier ..........................10\n      2.4.\
    \ General Syntax ............................................11\n      2.5. Attributes\
    \ and the SignerInfo Type ........................12\n      2.6. SignerIdentifier\
    \ SignerInfo Type ..........................16\n      2.7. ContentEncryptionAlgorithmIdentifier\
    \ ......................16\n   3. Creating S/MIME Messages .......................................18\n\
    \      3.1. Preparing the MIME Entity for Signing, Enveloping,\n           or\
    \ Compressing ............................................19\n      3.2. The application/pkcs7-mime\
    \ Media Type .....................23\n      3.3. Creating an Enveloped-Only Message\
    \ ........................25\n      3.4. Creating a Signed-Only Message ............................26\n\
    \      3.5. Creating a Compressed-Only Message ........................30\n  \
    \    3.6. Multiple Operations .......................................30\n    \
    \  3.7. Creating a Certificate Management Message .................31\n      3.8.\
    \ Registration Requests .....................................32\n      3.9. Identifying\
    \ an S/MIME Message .............................32\n   4. Certificate Processing\
    \ .........................................32\n      4.1. Key Pair Generation\
    \ .......................................33\n      4.2. Signature Generation ......................................33\n\
    \      4.3. Signature Verification ....................................34\n  \
    \    4.4. Encryption ................................................34\n    \
    \  4.5. Decryption ................................................34\n   5. IANA\
    \ Considerations ............................................34\n      5.1. Media\
    \ Type for application/pkcs7-mime .....................34\n      5.2. Media Type\
    \ for application/pkcs7-signature ................35\n   6. Security Considerations\
    \ ........................................36\n   7. References .....................................................38\n\
    \      7.1. Reference Conventions .....................................38\n  \
    \    7.2. Normative References ......................................39\n    \
    \  7.3. Informative References ....................................41\n   Appendix\
    \ A. ASN.1 Module ..........................................43\n   Appendix B.\
    \ Moving S/MIME v2 Message Specification to Historic\n               Status ................................................45\n\
    \   Appendix C. Acknowledgments .......................................45\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   S/MIME (Secure/Multipurpose Internet Mail Extensions) provides\
    \ a\n   consistent way to send and receive secure MIME data.  Based on the\n \
    \  popular Internet MIME standard, S/MIME provides the following\n   cryptographic\
    \ security services for electronic messaging\n   applications:  authentication,\
    \ message integrity and non-repudiation\n   of origin (using digital signatures),\
    \ and data confidentiality (using\n   encryption).  As a supplementary service,\
    \ S/MIME provides for message\n   compression.\n   S/MIME can be used by traditional\
    \ mail user agents (MUAs) to add\n   cryptographic security services to mail that\
    \ is sent, and to\n   interpret cryptographic security services in mail that is\
    \ received.\n   However, S/MIME is not restricted to mail; it can be used with\
    \ any\n   transport mechanism that transports MIME data, such as HTTP or SIP.\n\
    \   As such, S/MIME takes advantage of the object-based features of MIME\n   and\
    \ allows secure messages to be exchanged in mixed-transport\n   systems.\n   Further,\
    \ S/MIME can be used in automated message transfer agents that\n   use cryptographic\
    \ security services that do not require any human\n   intervention, such as the\
    \ signing of software-generated documents and\n   the encryption of FAX messages\
    \ sent over the Internet.\n"
- title: 1.1.  Specification Overview
  contents:
  - "1.1.  Specification Overview\n   This document describes a protocol for adding\
    \ cryptographic signature\n   and encryption services to MIME data.  The MIME\
    \ standard [MIME-SPEC]\n   provides a general structure for the content of Internet\
    \ messages and\n   allows extensions for new content-type-based applications.\n\
    \   This specification defines how to create a MIME body part that has\n   been\
    \ cryptographically enhanced according to the Cryptographic\n   Message Syntax\
    \ (CMS) RFC 5652 [CMS], which is derived from PKCS #7\n   [PKCS-7].  This specification\
    \ also defines the application/pkcs7-mime\n   media type that can be used to transport\
    \ those body parts.\n   This document also discusses how to use the multipart/signed\
    \ media\n   type defined in [MIME-SECURE] to transport S/MIME signed messages.\n\
    \   multipart/signed is used in conjunction with the application/pkcs7-\n   signature\
    \ media type, which is used to transport a detached S/MIME\n   signature.\n  \
    \ In order to create S/MIME messages, an S/MIME agent MUST follow the\n   specifications\
    \ in this document, as well as the specifications listed\n   in the Cryptographic\
    \ Message Syntax document [CMS], [CMSALG],\n   [RSAPSS], [RSAOAEP], and [CMS-SHA2].\n\
    \   Throughout this specification, there are requirements and\n   recommendations\
    \ made for how receiving agents handle incoming\n   messages.  There are separate\
    \ requirements and recommendations for\n   how sending agents create outgoing\
    \ messages.  In general, the best\n   strategy is to \"be liberal in what you\
    \ receive and conservative in\n   what you send\".  Most of the requirements are\
    \ placed on the handling\n   of incoming messages, while the recommendations are\
    \ mostly on the\n   creation of outgoing messages.\n   The separation for requirements\
    \ on receiving agents and sending\n   agents also derives from the likelihood\
    \ that there will be S/MIME\n   systems that involve software other than traditional\
    \ Internet mail\n   clients.  S/MIME can be used with any system that transports\
    \ MIME\n   data.  An automated process that sends an encrypted message might not\n\
    \   be able to receive an encrypted message at all, for example.  Thus,\n   the\
    \ requirements and recommendations for the two types of agents are\n   listed\
    \ separately when appropriate.\n"
- title: 1.2.  Definitions
  contents:
  - "1.2.  Definitions\n   For the purposes of this specification, the following definitions\n\
    \   apply.\n   ASN.1:             Abstract Syntax Notation One, as defined in\
    \ ITU-T\n                      Recommendation X.680 [X.680].\n   BER:        \
    \       Basic Encoding Rules for ASN.1, as defined in ITU-\n                 \
    \     T Recommendation X.690 [X.690].\n   Certificate:       A type that binds\
    \ an entity's name to a public key\n                      with a digital signature.\n\
    \   DER:               Distinguished Encoding Rules for ASN.1, as defined\n  \
    \                    in ITU-T Recommendation X.690 [X.690].\n   7-bit data:  \
    \      Text data with lines less than 998 characters\n                      long,\
    \ where none of the characters have the 8th\n                      bit set, and\
    \ there are no NULL characters.  <CR>\n                      and <LF> occur only\
    \ as part of a <CR><LF> end-of-\n                      line delimiter.\n   8-bit\
    \ data:        Text data with lines less than 998 characters, and\n          \
    \            where none of the characters are NULL characters.\n             \
    \         <CR> and <LF> occur only as part of a <CR><LF>\n                   \
    \   end-of-line delimiter.\n   Binary data:       Arbitrary data.\n   Transfer\
    \ encoding: A reversible transformation made on data so 8-bit\n              \
    \        or binary data can be sent via a channel that only\n                \
    \      transmits 7-bit data.\n   Receiving agent:   Software that interprets and\
    \ processes S/MIME CMS\n                      objects, MIME body parts that contain\
    \ CMS content\n                      types, or both.\n   Sending agent:     Software\
    \ that creates S/MIME CMS content types,\n                      MIME body parts\
    \ that contain CMS content types, or\n                      both.\n   S/MIME agent:\
    \      User software that is a receiving agent, a sending\n                  \
    \    agent, or both.\n"
- title: 1.3.  Conventions Used in This Document
  contents:
  - "1.3.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [MUSTSHOULD].\n   We define some additional terms here:\n   SHOULD+   This\
    \ term means the same as SHOULD.  However, the authors\n             expect that\
    \ a requirement marked as SHOULD+ will be\n             promoted at some future\
    \ time to be a MUST.\n   SHOULD-   This term means the same as SHOULD.  However,\
    \ the authors\n             expect that a requirement marked as SHOULD- will be\
    \ demoted\n             to a MAY in a future version of this document.\n   MUST-\
    \     This term means the same as MUST.  However, the authors\n             expect\
    \ that this requirement will no longer be a MUST in a\n             future document.\
    \  Although its status will be determined at\n             a later time, it is\
    \ reasonable to expect that if a future\n             revision of a document alters\
    \ the status of a MUST-\n             requirement, it will remain at least a SHOULD\
    \ or a SHOULD-.\n"
- title: 1.4.  Compatibility with Prior Practice of S/MIME
  contents:
  - "1.4.  Compatibility with Prior Practice of S/MIME\n   S/MIME version 3.2 agents\
    \ ought to attempt to have the greatest\n   interoperability possible with agents\
    \ for prior versions of S/MIME.\n   S/MIME version 2 is described in RFC 2311\
    \ through RFC 2315 inclusive\n   [SMIMEv2], S/MIME version 3 is described in RFC\
    \ 2630 through RFC 2634\n   inclusive and RFC 5035 [SMIMEv3], and S/MIME version\
    \ 3.1 is described\n   in RFC 3850, RFC 3851, RFC 3852, RFC 2634, and RFC 5035\
    \ [SMIMEv3.1].\n   RFC 2311 also has historical information about the development\
    \ of\n   S/MIME.\n"
- title: 1.5.  Changes from S/MIME v3 to S/MIME v3.1
  contents:
  - "1.5.  Changes from S/MIME v3 to S/MIME v3.1\n   The RSA public key algorithm\
    \ was changed to a MUST implement key\n   wrapping algorithm, and the Diffie-Hellman\
    \ (DH) algorithm changed to\n   a SHOULD implement.\n   The AES symmetric encryption\
    \ algorithm has been included as a SHOULD\n   implement.\n   The RSA public key\
    \ algorithm was changed to a MUST implement\n   signature algorithm.\n   Ambiguous\
    \ language about the use of \"empty\" SignedData messages to\n   transmit certificates\
    \ was clarified to reflect that transmission of\n   Certificate Revocation Lists\
    \ is also allowed.\n   The use of binary encoding for some MIME entities is now\
    \ explicitly\n   discussed.\n   Header protection through the use of the message/rfc822\
    \ media type\n   has been added.\n   Use of the CompressedData CMS type is allowed,\
    \ along with required\n   media type and file extension additions.\n"
- title: 1.6.  Changes since S/MIME v3.1
  contents:
  - "1.6.  Changes since S/MIME v3.1\n   Editorial changes, e.g., replaced \"MIME\
    \ type\" with \"media type\",\n   content-type with Content-Type.\n   Moved \"\
    Conventions Used in This Document\" to Section 1.3.  Added\n   definitions for\
    \ SHOULD+, SHOULD-, and MUST-.\n   Section 1.1 and Appendix A: Added references\
    \ to RFCs for RSASSA-PSS,\n   RSAES-OAEP, and SHA2 CMS algorithms.  Added CMS\
    \ Multiple Signers\n   Clarification to CMS reference.\n   Section 1.2: Updated\
    \ references to ASN.1 to X.680 and BER and DER to\n   X.690.\n   Section 1.4:\
    \ Added references to S/MIME MSG 3.1 RFCs.\n   Section 2.1 (digest algorithm):\
    \ SHA-256 added as MUST, SHA-1 and MD5\n   made SHOULD-.\n   Section 2.2 (signature\
    \ algorithms): RSA with SHA-256 added as MUST,\n   and DSA with SHA-256 added\
    \ as SHOULD+, RSA with SHA-1, DSA with\n   SHA-1, and RSA with MD5 changed to\
    \ SHOULD-, and RSASSA-PSS with\n   SHA-256 added as SHOULD+.  Also added note\
    \ about what S/MIME v3.1\n   clients support.\n   Section 2.3 (key encryption):\
    \ DH changed to SHOULD-, and RSAES-OAEP\n   added as SHOULD+.  Elaborated requirements\
    \ for key wrap algorithm.\n   Section 2.5.1: Added requirement that receiving\
    \ agents MUST support\n   both GeneralizedTime and UTCTime.\n   Section 2.5.2:\
    \ Replaced reference \"sha1WithRSAEncryption\" with\n   \"sha256WithRSAEncryption\"\
    , \"DES-3EDE-CBC\" with \"AES-128 CBC\", and\n   deleted the RC5 example.\n  \
    \ Section 2.5.2.1: Deleted entire section (discussed deprecated RC2).\n   Section\
    \ 2.7, 2.7.1, Appendix A: references to RC2/40 removed.\n   Section 2.7 (content\
    \ encryption): AES-128 CBC added as MUST, AES-192\n   and AES-256 CBC SHOULD+,\
    \ tripleDES now SHOULD-.\n   Section 2.7.1: Updated pointers from 2.7.2.1 through\
    \ 2.7.2.4 to\n   2.7.1.1 to 2.7.1.2.\n   Section 3.1.1: Removed text about MIME\
    \ character sets.\n   Section 3.2.2 and 3.6: Replaced \"encrypted\" with \"enveloped\"\
    .  Update\n   OID example to use AES-128 CBC oid.\n   Section 3.4.3.2: Replace\
    \ micalg parameter for SHA-1 with sha-1.\n   Section 4: Updated reference to CERT\
    \ v3.2.\n   Section 4.1: Updated RSA and DSA key size discussion.  Moved last\n\
    \   four sentences to security considerations.  Updated reference to\n   randomness\
    \ requirements for security.\n   Section 5: Added IANA registration templates\
    \ to update media type\n   registry to point to this document as opposed to RFC\
    \ 2311.\n   Section 6: Updated security considerations.\n   Section 7: Moved references\
    \ from Appendix B to this section.  Updated\n   references.  Added informational\
    \ references to SMIMEv2, SMIMEv3, and\n   SMIMEv3.1.\n   Appendix B: Added Appendix\
    \ B to move S/MIME v2 to Historic status.\n"
- title: 2.  CMS Options
  contents:
  - "2.  CMS Options\n   CMS allows for a wide variety of options in content, attributes,\
    \ and\n   algorithm support.  This section puts forth a number of support\n  \
    \ requirements and recommendations in order to achieve a base level of\n   interoperability\
    \ among all S/MIME implementations.  [CMSALG] and\n   [CMS-SHA2] provides additional\
    \ details regarding the use of the\n   cryptographic algorithms.  [ESS] provides\
    \ additional details\n   regarding the use of additional attributes.\n"
- title: 2.1.  DigestAlgorithmIdentifier
  contents:
  - "2.1.  DigestAlgorithmIdentifier\n   Sending and receiving agents MUST support\
    \ SHA-256 [CMS-SHA2] and\n   SHOULD- support SHA-1 [CMSALG].  Receiving agents\
    \ SHOULD- support MD5\n   [CMSALG] for the purpose of providing backward compatibility\
    \ with\n   MD5-digested S/MIME v2 SignedData objects.\n"
- title: 2.2.  SignatureAlgorithmIdentifier
  contents:
  - "2.2.  SignatureAlgorithmIdentifier\n   Receiving agents:\n      - MUST support\
    \ RSA with SHA-256.\n      - SHOULD+ support DSA with SHA-256.\n      - SHOULD+\
    \ support RSASSA-PSS with SHA-256.\n      - SHOULD- support RSA with SHA-1.\n\
    \      - SHOULD- support DSA with SHA-1.\n      - SHOULD- support RSA with MD5.\n\
    \   Sending agents:\n      - MUST support RSA with SHA-256.\n      - SHOULD+ support\
    \ DSA with SHA-256.\n      - SHOULD+ support RSASSA-PSS with SHA-256.\n      -\
    \ SHOULD- support RSA with SHA-1 or DSA with SHA-1.\n      - SHOULD- support RSA\
    \ with MD5.\n   See Section 4.1 for information on key size and algorithm references.\n\
    \   Note that S/MIME v3.1 clients support verifying id-dsa-with-sha1 and\n   rsaEncryption\
    \ and might not implement sha256withRSAEncryption.  Note\n   that S/MIME v3 clients\
    \ might only implement signing or signature\n   verification using id-dsa-with-sha1,\
    \ and might also use id-dsa as an\n   AlgorithmIdentifier in this field.  Receiving\
    \ clients SHOULD\n   recognize id-dsa as equivalent to id-dsa-with-sha1, and sending\n\
    \   clients MUST use id-dsa-with-sha1 if using that algorithm.  Also note\n  \
    \ that S/MIME v2 clients are only required to verify digital signatures\n   using\
    \ the rsaEncryption algorithm with SHA-1 or MD5, and might not\n   implement id-dsa-with-sha1\
    \ or id-dsa at all.\n"
- title: 2.3.  KeyEncryptionAlgorithmIdentifier
  contents:
  - "2.3.  KeyEncryptionAlgorithmIdentifier\n   Receiving and sending agents:\n  \
    \    - MUST support RSA Encryption, as specified in [CMSALG].\n      - SHOULD+\
    \ support RSAES-OAEP, as specified in [RSAOAEP].\n      - SHOULD- support DH ephemeral-static\
    \ mode, as specified in\n        [CMSALG] and [SP800-57].\n   When DH ephemeral-static\
    \ is used, a key wrap algorithm is also\n   specified in the KeyEncryptionAlgorithmIdentifier\
    \ [CMS].  The\n   underlying encryption functions for the key wrap and content\n\
    \   encryption algorithm ([CMSALG] and [CMSAES]) and the key sizes for\n   the\
    \ two algorithms MUST be the same (e.g., AES-128 key wrap algorithm\n   with AES-128\
    \ content encryption algorithm).  As AES-128 CBC is the\n   mandatory-to-implement\
    \ content encryption algorithm, the AES-128 key\n   wrap algorithm MUST also be\
    \ supported when DH ephemeral-static is\n   used.\n   Note that S/MIME v3.1 clients\
    \ might only implement key encryption and\n   decryption using the rsaEncryption\
    \ algorithm.  Note that S/MIME v3\n   clients might only implement key encryption\
    \ and decryption using the\n   Diffie-Hellman algorithm.  Also note that S/MIME\
    \ v2 clients are only\n   capable of decrypting content-encryption keys using\
    \ the rsaEncryption\n   algorithm.\n"
- title: 2.4.  General Syntax
  contents:
  - "2.4.  General Syntax\n   There are several CMS content types.  Of these, only\
    \ the Data,\n   SignedData, EnvelopedData, and CompressedData content types are\n\
    \   currently used for S/MIME.\n"
- title: 2.4.1.  Data Content Type
  contents:
  - "2.4.1.  Data Content Type\n   Sending agents MUST use the id-data content type\
    \ identifier to\n   identify the \"inner\" MIME message content.  For example,\
    \ when\n   applying a digital signature to MIME data, the CMS SignedData\n   encapContentInfo\
    \ eContentType MUST include the id-data object\n   identifier and the media type\
    \ MUST be stored in the SignedData\n   encapContentInfo eContent OCTET STRING\
    \ (unless the sending agent is\n   using multipart/signed, in which case the eContent\
    \ is absent, per\n   Section 3.4.3 of this document).  As another example, when\
    \ applying\n   encryption to MIME data, the CMS EnvelopedData encryptedContentInfo\n\
    \   contentType MUST include the id-data object identifier and the\n   encrypted\
    \ MIME content MUST be stored in the EnvelopedData\n   encryptedContentInfo encryptedContent\
    \ OCTET STRING.\n"
- title: 2.4.2.  SignedData Content Type
  contents:
  - "2.4.2.  SignedData Content Type\n   Sending agents MUST use the SignedData content\
    \ type to apply a\n   digital signature to a message or, in a degenerate case\
    \ where there\n   is no signature information, to convey certificates.  Applying\
    \ a\n   signature to a message provides authentication, message integrity,\n \
    \  and non-repudiation of origin.\n"
- title: 2.4.3.  EnvelopedData Content Type
  contents:
  - "2.4.3.  EnvelopedData Content Type\n   This content type is used to apply data\
    \ confidentiality to a message.\n   A sender needs to have access to a public\
    \ key for each intended\n   message recipient to use this service.\n"
- title: 2.4.4.  CompressedData Content Type
  contents:
  - "2.4.4.  CompressedData Content Type\n   This content type is used to apply data\
    \ compression to a message.\n   This content type does not provide authentication,\
    \ message integrity,\n   non-repudiation, or data confidentiality, and is only\
    \ used to reduce\n   the message's size.\n   See Section 3.6 for further guidance\
    \ on the use of this type in\n   conjunction with other CMS types.\n"
- title: 2.5.  Attributes and the SignerInfo Type
  contents:
  - "2.5.  Attributes and the SignerInfo Type\n   The SignerInfo type allows the inclusion\
    \ of unsigned and signed\n   attributes along with a signature.\n   Receiving\
    \ agents MUST be able to handle zero or one instance of each\n   of the signed\
    \ attributes listed here.  Sending agents SHOULD generate\n   one instance of\
    \ each of the following signed attributes in each\n   S/MIME message:\n      -\
    \ Signing Time (section (Section 2.5.1 in this document)\n      - SMIME Capabilities\
    \ (section (Section 2.5.2 in this document)\n      - Encryption Key Preference\
    \ (section (Section 2.5.3 in this\n        document)\n      - Message Digest (section\
    \ (Section 11.2 in [CMS])\n      - Content Type (section (Section 11.1 in [CMS])\n\
    \   Further, receiving agents SHOULD be able to handle zero or one\n   instance\
    \ of the signingCertificate and signingCertificatev2 signed\n   attributes, as\
    \ defined in Section 5 of RFC 2634 [ESS] and Section 3\n   of RFC 5035 [ESS].\n\
    \   Sending agents SHOULD generate one instance of the signingCertificate\n  \
    \ or signingCertificatev2 signed attribute in each SignerInfo\n   structure.\n\
    \   Additional attributes and values for these attributes might be\n   defined\
    \ in the future.  Receiving agents SHOULD handle attributes or\n   values that\
    \ they do not recognize in a graceful manner.\n   Interactive sending agents that\
    \ include signed attributes that are\n   not listed here SHOULD display those\
    \ attributes to the user, so that\n   the user is aware of all of the data being\
    \ signed.\n"
- title: 2.5.1.  Signing Time Attribute
  contents:
  - "2.5.1.  Signing Time Attribute\n   The signing-time attribute is used to convey\
    \ the time that a message\n   was signed.  The time of signing will most likely\
    \ be created by a\n   message originator and therefore is only as trustworthy\
    \ as the\n   originator.\n   Sending agents MUST encode signing time through the\
    \ year 2049 as\n   UTCTime; signing times in 2050 or later MUST be encoded as\n\
    \   GeneralizedTime.  When the UTCTime CHOICE is used, S/MIME agents MUST\n  \
    \ interpret the year field (YY) as follows:\n      If YY is greater than or equal\
    \ to 50, the year is interpreted as\n      19YY; if YY is less than 50, the year\
    \ is interpreted as 20YY.\n   Receiving agents MUST be able to process signing-time\
    \ attributes that\n   are encoded in either UTCTime or GeneralizedTime.\n"
- title: 2.5.2.  SMIME Capabilities Attribute
  contents:
  - "2.5.2.  SMIME Capabilities Attribute\n   The SMIMECapabilities attribute includes\
    \ signature algorithms (such\n   as \"sha256WithRSAEncryption\"), symmetric algorithms\
    \ (such as \"AES-128\n   CBC\"), and key encipherment algorithms (such as \"rsaEncryption\"\
    ).\n   There are also several identifiers that indicate support for other\n  \
    \ optional features such as binary encoding and compression.  The\n   SMIMECapabilities\
    \ were designed to be flexible and extensible so\n   that, in the future, a means\
    \ of identifying other capabilities and\n   preferences such as certificates can\
    \ be added in a way that will not\n   cause current clients to break.\n   If present,\
    \ the SMIMECapabilities attribute MUST be a\n   SignedAttribute; it MUST NOT be\
    \ an UnsignedAttribute.  CMS defines\n   SignedAttributes as a SET OF Attribute.\
    \  The SignedAttributes in a\n   signerInfo MUST NOT include multiple instances\
    \ of the\n   SMIMECapabilities attribute.  CMS defines the ASN.1 syntax for\n\
    \   Attribute to include attrValues SET OF AttributeValue.  A\n   SMIMECapabilities\
    \ attribute MUST only include a single instance of\n   AttributeValue.  There\
    \ MUST NOT be zero or multiple instances of\n   AttributeValue present in the\
    \ attrValues SET OF AttributeValue.\n   The semantics of the SMIMECapabilities\
    \ attribute specify a partial\n   list as to what the client announcing the SMIMECapabilities\
    \ can\n   support.  A client does not have to list every capability it\n   supports,\
    \ and need not list all its capabilities so that the\n   capabilities list doesn't\
    \ get too long.  In an SMIMECapabilities\n   attribute, the object identifiers\
    \ (OIDs) are listed in order of their\n   preference, but SHOULD be separated\
    \ logically along the lines of\n   their categories (signature algorithms, symmetric\
    \ algorithms, key\n   encipherment algorithms, etc.).\n   The structure of the\
    \ SMIMECapabilities attribute is to facilitate\n   simple table lookups and binary\
    \ comparisons in order to determine\n   matches.  For instance, the DER-encoding\
    \ for the SMIMECapability for\n   AES-128 CBC MUST be identically encoded regardless\
    \ of the\n   implementation.  Because of the requirement for identical encoding,\n\
    \   individuals documenting algorithms to be used in the\n   SMIMECapabilities\
    \ attribute SHOULD explicitly document the correct\n   byte sequence for the common\
    \ cases.\n   For any capability, the associated parameters for the OID MUST\n\
    \   specify all of the parameters necessary to differentiate between two\n   instances\
    \ of the same algorithm.\n   The OIDs that correspond to algorithms SHOULD use\
    \ the same OID as the\n   actual algorithm, except in the case where the algorithm\
    \ usage is\n   ambiguous from the OID.  For instance, in an earlier specification,\n\
    \   rsaEncryption was ambiguous because it could refer to either a\n   signature\
    \ algorithm or a key encipherment algorithm.  In the event\n   that an OID is\
    \ ambiguous, it needs to be arbitrated by the maintainer\n   of the registered\
    \ SMIMECapabilities list as to which type of\n   algorithm will use the OID, and\
    \ a new OID MUST be allocated under the\n   smimeCapabilities OID to satisfy the\
    \ other use of the OID.\n   The registered SMIMECapabilities list specifies the\
    \ parameters for\n   OIDs that need them, most notably key lengths in the case\
    \ of\n   variable-length symmetric ciphers.  In the event that there are no\n\
    \   differentiating parameters for a particular OID, the parameters MUST\n   be\
    \ omitted, and MUST NOT be encoded as NULL.  Additional values for\n   the SMIMECapabilities\
    \ attribute might be defined in the future.\n   Receiving agents MUST handle a\
    \ SMIMECapabilities object that has\n   values that it does not recognize in a\
    \ graceful manner.\n   Section 2.7.1 explains a strategy for caching capabilities.\n"
- title: 2.5.3.  Encryption Key Preference Attribute
  contents:
  - "2.5.3.  Encryption Key Preference Attribute\n   The encryption key preference\
    \ attribute allows the signer to\n   unambiguously describe which of the signer's\
    \ certificates has the\n   signer's preferred encryption key.  This attribute\
    \ is designed to\n   enhance behavior for interoperating with those clients that\
    \ use\n   separate keys for encryption and signing.  This attribute is used to\n\
    \   convey to anyone viewing the attribute which of the listed\n   certificates\
    \ is appropriate for encrypting a session key for future\n   encrypted messages.\n\
    \   If present, the SMIMEEncryptionKeyPreference attribute MUST be a\n   SignedAttribute;\
    \ it MUST NOT be an UnsignedAttribute.  CMS defines\n   SignedAttributes as a\
    \ SET OF Attribute.  The SignedAttributes in a\n   signerInfo MUST NOT include\
    \ multiple instances of the\n   SMIMEEncryptionKeyPreference attribute.  CMS defines\
    \ the ASN.1 syntax\n   for Attribute to include attrValues SET OF AttributeValue.\
    \  A\n   SMIMEEncryptionKeyPreference attribute MUST only include a single\n \
    \  instance of AttributeValue.  There MUST NOT be zero or multiple\n   instances\
    \ of AttributeValue present in the attrValues SET OF\n   AttributeValue.\n   The\
    \ sending agent SHOULD include the referenced certificate in the\n   set of certificates\
    \ included in the signed message if this attribute\n   is used.  The certificate\
    \ MAY be omitted if it has been previously\n   made available to the receiving\
    \ agent.  Sending agents SHOULD use\n   this attribute if the commonly used or\
    \ preferred encryption\n   certificate is not the same as the certificate used\
    \ to sign the\n   message.\n   Receiving agents SHOULD store the preference data\
    \ if the signature on\n   the message is valid and the signing time is greater\
    \ than the\n   currently stored value.  (As with the SMIMECapabilities, the clock\n\
    \   skew SHOULD be checked and the data not used if the skew is too\n   great.)\
    \  Receiving agents SHOULD respect the sender's encryption key\n   preference\
    \ attribute if possible.  This, however, represents only a\n   preference and\
    \ the receiving agent can use any certificate in\n   replying to the sender that\
    \ is valid.\n   Section 2.7.1 explains a strategy for caching preference data.\n"
- title: 2.5.3.1.  Selection of Recipient Key Management Certificate
  contents:
  - "2.5.3.1.  Selection of Recipient Key Management Certificate\n   In order to determine\
    \ the key management certificate to be used when\n   sending a future CMS EnvelopedData\
    \ message for a particular\n   recipient, the following steps SHOULD be followed:\n\
    \   - If an SMIMEEncryptionKeyPreference attribute is found in a\n     SignedData\
    \ object received from the desired recipient, this\n     identifies the X.509\
    \ certificate that SHOULD be used as the X.509\n     key management certificate\
    \ for the recipient.\n   - If an SMIMEEncryptionKeyPreference attribute is not\
    \ found in a\n     SignedData object received from the desired recipient, the\
    \ set of\n     X.509 certificates SHOULD be searched for a X.509 certificate with\n\
    \     the same subject name as the signer of a X.509 certificate that can\n  \
    \   be used for key management.\n   - Or use some other method of determining\
    \ the user's key management\n     key.  If a X.509 key management certificate\
    \ is not found, then\n     encryption cannot be done with the signer of the message.\
    \  If\n     multiple X.509 key management certificates are found, the S/MIME\n\
    \     agent can make an arbitrary choice between them.\n"
- title: 2.6.  SignerIdentifier SignerInfo Type
  contents:
  - "2.6.  SignerIdentifier SignerInfo Type\n   S/MIME v3.2 implementations MUST support\
    \ both issuerAndSerialNumber\n   and subjectKeyIdentifier.  Messages that use\
    \ the subjectKeyIdentifier\n   choice cannot be read by S/MIME v2 clients.\n \
    \  It is important to understand that some certificates use a value for\n   subjectKeyIdentifier\
    \ that is not suitable for uniquely identifying a\n   certificate.  Implementations\
    \ MUST be prepared for multiple\n   certificates for potentially different entities\
    \ to have the same\n   value for subjectKeyIdentifier, and MUST be prepared to\
    \ try each\n   matching certificate during signature verification before indicating\n\
    \   an error condition.\n"
- title: 2.7.  ContentEncryptionAlgorithmIdentifier
  contents:
  - "2.7.  ContentEncryptionAlgorithmIdentifier\n   Sending and receiving agents:\n\
    \      - MUST support encryption and decryption with AES-128 CBC\n        [CMSAES].\n\
    \      - SHOULD+ support encryption and decryption with AES-192 CBC and\n    \
    \    AES-256 CBC [CMSAES].\n      - SHOULD- support encryption and decryption\
    \ with DES EDE3 CBC,\n        hereinafter called \"tripleDES\" [CMSALG].\n"
- title: 2.7.1.  Deciding Which Encryption Method to Use
  contents:
  - "2.7.1.  Deciding Which Encryption Method to Use\n   When a sending agent creates\
    \ an encrypted message, it has to decide\n   which type of encryption to use.\
    \  The decision process involves using\n   information garnered from the capabilities\
    \ lists included in messages\n   received from the recipient, as well as out-of-band\
    \ information such\n   as private agreements, user preferences, legal restrictions,\
    \ and so\n   on.\n   Section 2.5.2 defines a method by which a sending agent can\n\
    \   optionally announce, among other things, its decrypting capabilities\n   in\
    \ its order of preference.  The following method for processing and\n   remembering\
    \ the encryption capabilities attribute in incoming signed\n   messages SHOULD\
    \ be used.\n      - If the receiving agent has not yet created a list of\n   \
    \     capabilities for the sender's public key, then, after verifying\n      \
    \  the signature on the incoming message and checking the\n        timestamp,\
    \ the receiving agent SHOULD create a new list\n        containing at least the\
    \ signing time and the symmetric\n        capabilities.\n      - If such a list\
    \ already exists, the receiving agent SHOULD verify\n        that the signing\
    \ time in the incoming message is greater than\n        the signing time stored\
    \ in the list and that the signature is\n        valid.  If so, the receiving\
    \ agent SHOULD update both the\n        signing time and capabilities in the list.\
    \  Values of the\n        signing time that lie far in the future (that is, a\
    \ greater\n        discrepancy than any reasonable clock skew), or a capabilities\n\
    \        list in messages whose signature could not be verified, MUST NOT\n  \
    \      be accepted.\n   The list of capabilities SHOULD be stored for future use\
    \ in creating\n   messages.\n   Before sending a message, the sending agent MUST\
    \ decide whether it is\n   willing to use weak encryption for the particular data\
    \ in the\n   message.  If the sending agent decides that weak encryption is\n\
    \   unacceptable for this data, then the sending agent MUST NOT use a\n   weak\
    \ algorithm.  The decision to use or not use weak encryption\n   overrides any\
    \ other decision in this section about which encryption\n   algorithm to use.\n\
    \   Sections 2.7.1.1 through 2.7.1.2 describe the decisions a sending\n   agent\
    \ SHOULD use in deciding which type of encryption will be applied\n   to a message.\
    \  These rules are ordered, so the sending agent SHOULD\n   make its decision\
    \ in the order given.\n"
- title: '2.7.1.1.  Rule 1: Known Capabilities'
  contents:
  - "2.7.1.1.  Rule 1: Known Capabilities\n   If the sending agent has received a\
    \ set of capabilities from the\n   recipient for the message the agent is about\
    \ to encrypt, then the\n   sending agent SHOULD use that information by selecting\
    \ the first\n   capability in the list (that is, the capability most preferred\
    \ by the\n   intended recipient) that the sending agent knows how to encrypt.\
    \  The\n   sending agent SHOULD use one of the capabilities in the list if the\n\
    \   agent reasonably expects the recipient to be able to decrypt the\n   message.\n"
- title: '2.7.1.2.  Rule 2: Unknown Capabilities, Unknown Version of S/MIME'
  contents:
  - "2.7.1.2.  Rule 2: Unknown Capabilities, Unknown Version of S/MIME\n   If the\
    \ following two conditions are met:\n      - the sending agent has no knowledge\
    \ of the encryption\n        capabilities of the recipient, and\n      - the sending\
    \ agent has no knowledge of the version of S/MIME of\n        the recipient,\n\
    \   then the sending agent SHOULD use AES-128 because it is a stronger\n   algorithm\
    \ and is required by S/MIME v3.2.  If the sending agent\n   chooses not to use\
    \ AES-128 in this step, it SHOULD use tripleDES.\n"
- title: 2.7.2.  Choosing Weak Encryption
  contents:
  - "2.7.2.  Choosing Weak Encryption\n   All algorithms that use 40-bit keys are\
    \ considered by many to be weak\n   encryption.  A sending agent that is controlled\
    \ by a human SHOULD\n   allow a human sender to determine the risks of sending\
    \ data using a\n   weak encryption algorithm before sending the data, and possibly\
    \ allow\n   the human to use a stronger encryption method such as tripleDES or\n\
    \   AES.\n"
- title: 2.7.3.  Multiple Recipients
  contents:
  - "2.7.3.  Multiple Recipients\n   If a sending agent is composing an encrypted\
    \ message to a group of\n   recipients where the encryption capabilities of some\
    \ of the\n   recipients do not overlap, the sending agent is forced to send more\n\
    \   than one message.  Please note that if the sending agent chooses to\n   send\
    \ a message encrypted with a strong algorithm, and then send the\n   same message\
    \ encrypted with a weak algorithm, someone watching the\n   communications channel\
    \ could learn the contents of the strongly\n   encrypted message simply by decrypting\
    \ the weakly encrypted message.\n"
- title: 3.  Creating S/MIME Messages
  contents:
  - "3.  Creating S/MIME Messages\n   This section describes the S/MIME message formats\
    \ and how they are\n   created.  S/MIME messages are a combination of MIME bodies\
    \ and CMS\n   content types.  Several media types as well as several CMS content\n\
    \   types are used.  The data to be secured is always a canonical MIME\n   entity.\
    \  The MIME entity and other data, such as certificates and\n   algorithm identifiers,\
    \ are given to CMS processing facilities that\n   produce a CMS object.  Finally,\
    \ the CMS object is wrapped in MIME.\n   The Enhanced Security Services for S/MIME\
    \ [ESS] document provides\n   descriptions of how nested, secured S/MIME messages\
    \ are formatted.\n   ESS provides a description of how a triple-wrapped S/MIME\
    \ message is\n   formatted using multipart/signed and application/pkcs7-mime for\
    \ the\n   signatures.\n   S/MIME provides one format for enveloped-only data,\
    \ several formats\n   for signed-only data, and several formats for signed and\
    \ enveloped\n   data.  Several formats are required to accommodate several\n \
    \  environments, in particular for signed messages.  The criteria for\n   choosing\
    \ among these formats are also described.\n   The reader of this section is expected\
    \ to understand MIME as\n   described in [MIME-SPEC] and [MIME-SECURE].\n"
- title: 3.1.  Preparing the MIME Entity for Signing, Enveloping, or Compressing
  contents:
  - "3.1.  Preparing the MIME Entity for Signing, Enveloping, or Compressing\n   S/MIME\
    \ is used to secure MIME entities.  A MIME entity can be a sub-\n   part, sub-parts\
    \ of a message, or the whole message with all its sub-\n   parts.  A MIME entity\
    \ that is the whole message includes only the\n   MIME message headers and MIME\
    \ body, and does not include the RFC-822\n   header.  Note that S/MIME can also\
    \ be used to secure MIME entities\n   used in applications other than Internet\
    \ mail.  If protection of the\n   RFC-822 header is required, the use of the message/rfc822\
    \ media type\n   is explained later in this section.\n   The MIME entity that\
    \ is secured and described in this section can be\n   thought of as the \"inside\"\
    \ MIME entity.  That is, it is the\n   \"innermost\" object in what is possibly\
    \ a larger MIME message.\n   Processing \"outside\" MIME entities into CMS content\
    \ types is\n   described in Sections 3.2, 3.4, and elsewhere.\n   The procedure\
    \ for preparing a MIME entity is given in [MIME-SPEC].\n   The same procedure\
    \ is used here with some additional restrictions\n   when signing.  The description\
    \ of the procedures from [MIME-SPEC] is\n   repeated here, but it is suggested\
    \ that the reader refer to that\n   document for the exact procedure.  This section\
    \ also describes\n   additional requirements.\n   A single procedure is used for\
    \ creating MIME entities that are to\n   have any combination of signing, enveloping,\
    \ and compressing applied.\n   Some additional steps are recommended to defend\
    \ against known\n   corruptions that can occur during mail transport that are\
    \ of\n   particular importance for clear-signing using the multipart/signed\n\
    \   format.  It is recommended that these additional steps be performed\n   on\
    \ enveloped messages, or signed and enveloped messages, so that the\n   message\
    \ can be forwarded to any environment without modification.\n   These steps are\
    \ descriptive rather than prescriptive.  The\n   implementer is free to use any\
    \ procedure as long as the result is the\n   same.\n   Step 1.  The MIME entity\
    \ is prepared according to the local\n            conventions.\n   Step 2.  The\
    \ leaf parts of the MIME entity are converted to canonical\n            form.\n\
    \   Step 3.  Appropriate transfer encoding is applied to the leaves of\n     \
    \       the MIME entity.\n   When an S/MIME message is received, the security\
    \ services on the\n   message are processed, and the result is the MIME entity.\
    \  That MIME\n   entity is typically passed to a MIME-capable user agent where\
    \ it is\n   further decoded and presented to the user or receiving application.\n\
    \   In order to protect outer, non-content-related message header fields\n   (for\
    \ instance, the \"Subject\", \"To\", \"From\", and \"Cc\" fields), the\n   sending\
    \ client MAY wrap a full MIME message in a message/rfc822\n   wrapper in order\
    \ to apply S/MIME security services to these header\n   fields.  It is up to the\
    \ receiving client to decide how to present\n   this \"inner\" header along with\
    \ the unprotected \"outer\" header.\n   When an S/MIME message is received, if\
    \ the top-level protected MIME\n   entity has a Content-Type of message/rfc822,\
    \ it can be assumed that\n   the intent was to provide header protection.  This\
    \ entity SHOULD be\n   presented as the top-level message, taking into account\
    \ header\n   merging issues as previously discussed.\n"
- title: 3.1.1.  Canonicalization
  contents:
  - "3.1.1.  Canonicalization\n   Each MIME entity MUST be converted to a canonical\
    \ form that is\n   uniquely and unambiguously representable in the environment\
    \ where the\n   signature is created and the environment where the signature will\
    \ be\n   verified.  MIME entities MUST be canonicalized for enveloping and\n \
    \  compressing as well as signing.\n   The exact details of canonicalization depend\
    \ on the actual media type\n   and subtype of an entity, and are not described\
    \ here.  Instead, the\n   standard for the particular media type SHOULD be consulted.\
    \  For\n   example, canonicalization of type text/plain is different from\n  \
    \ canonicalization of audio/basic.  Other than text types, most types\n   have\
    \ only one representation regardless of computing platform or\n   environment\
    \ that can be considered their canonical representation.\n   In general, canonicalization\
    \ will be performed by the non-security\n   part of the sending agent rather than\
    \ the S/MIME implementation.\n   The most common and important canonicalization\
    \ is for text, which is\n   often represented differently in different environments.\
    \  MIME\n   entities of major type \"text\" MUST have both their line endings\
    \ and\n   character set canonicalized.  The line ending MUST be the pair of\n\
    \   characters <CR><LF>, and the charset SHOULD be a registered charset\n   [CHARSETS].\
    \  The details of the canonicalization are specified in\n   [MIME-SPEC].\n   Note\
    \ that some charsets such as ISO-2022 have multiple\n   representations for the\
    \ same characters.  When preparing such text\n   for signing, the canonical representation\
    \ specified for the charset\n   MUST be used.\n"
- title: 3.1.2.  Transfer Encoding
  contents:
  - "3.1.2.  Transfer Encoding\n   When generating any of the secured MIME entities\
    \ below, except the\n   signing using the multipart/signed format, no transfer\
    \ encoding is\n   required at all.  S/MIME implementations MUST be able to deal\
    \ with\n   binary MIME objects.  If no Content-Transfer-Encoding header field\
    \ is\n   present, the transfer encoding is presumed to be 7BIT.\n   S/MIME implementations\
    \ SHOULD however use transfer encoding described\n   in Section 3.1.3 for all\
    \ MIME entities they secure.  The reason for\n   securing only 7-bit MIME entities,\
    \ even for enveloped data that are\n   not exposed to the transport, is that it\
    \ allows the MIME entity to be\n   handled in any environment without changing\
    \ it.  For example, a\n   trusted gateway might remove the envelope, but not the\
    \ signature, of\n   a message, and then forward the signed message on to the end\n\
    \   recipient so that they can verify the signatures directly.  If the\n   transport\
    \ internal to the site is not 8-bit clean, such as on a wide-\n   area network\
    \ with a single mail gateway, verifying the signature will\n   not be possible\
    \ unless the original MIME entity was only 7-bit data.\n   S/MIME implementations\
    \ that \"know\" that all intended recipients are\n   capable of handling inner\
    \ (all but the outermost) binary MIME objects\n   SHOULD use binary encoding as\
    \ opposed to a 7-bit-safe transfer\n   encoding for the inner entities.  The use\
    \ of a 7-bit-safe encoding\n   (such as base64) would unnecessarily expand the\
    \ message size.\n   Implementations MAY \"know\" that recipient implementations\
    \ are capable\n   of handling inner binary MIME entities either by interpreting\
    \ the id-\n   cap-preferBinaryInside SMIMECapabilities attribute, by prior\n \
    \  agreement, or by other means.\n   If one or more intended recipients are unable\
    \ to handle inner binary\n   MIME objects, or if this capability is unknown for\
    \ any of the\n   intended recipients, S/MIME implementations SHOULD use transfer\n\
    \   encoding described in Section 3.1.3 for all MIME entities they\n   secure.\n"
- title: 3.1.3.  Transfer Encoding for Signing Using multipart/signed
  contents:
  - "3.1.3.  Transfer Encoding for Signing Using multipart/signed\n   If a multipart/signed\
    \ entity is ever to be transmitted over the\n   standard Internet SMTP infrastructure\
    \ or other transport that is\n   constrained to 7-bit text, it MUST have transfer\
    \ encoding applied so\n   that it is represented as 7-bit text.  MIME entities\
    \ that are 7-bit\n   data already need no transfer encoding.  Entities such as\
    \ 8-bit text\n   and binary data can be encoded with quoted-printable or base-64\n\
    \   transfer encoding.\n   The primary reason for the 7-bit requirement is that\
    \ the Internet\n   mail transport infrastructure cannot guarantee transport of\
    \ 8-bit or\n   binary data.  Even though many segments of the transport\n   infrastructure\
    \ now handle 8-bit and even binary data, it is sometimes\n   not possible to know\
    \ whether the transport path is 8-bit clean.  If a\n   mail message with 8-bit\
    \ data were to encounter a message transfer\n   agent that cannot transmit 8-bit\
    \ or binary data, the agent has three\n   options, none of which are acceptable\
    \ for a clear-signed message:\n    - The agent could change the transfer encoding;\
    \ this would\n      invalidate the signature.\n    - The agent could transmit\
    \ the data anyway, which would most likely\n      result in the 8th bit being\
    \ corrupted; this too would invalidate\n      the signature.\n    - The agent\
    \ could return the message to the sender.\n   [MIME-SECURE] prohibits an agent\
    \ from changing the transfer encoding\n   of the first part of a multipart/signed\
    \ message.  If a compliant\n   agent that cannot transmit 8-bit or binary data\
    \ encounters a\n   multipart/signed message with 8-bit or binary data in the first\
    \ part,\n   it would have to return the message to the sender as undeliverable.\n"
- title: 3.1.4.  Sample Canonical MIME Entity
  contents:
  - "3.1.4.  Sample Canonical MIME Entity\n   This example shows a multipart/mixed\
    \ message with full transfer\n   encoding.  This message contains a text part\
    \ and an attachment.  The\n   sample message text includes characters that are\
    \ not US-ASCII and\n   thus need to be transfer encoded.  Though not shown here,\
    \ the end of\n   each line is <CR><LF>.  The line ending of the MIME headers,\
    \ the\n   text, and the transfer encoded parts, all MUST be <CR><LF>.\n   Note\
    \ that this example is not of an S/MIME message.\n      Content-Type: multipart/mixed;\
    \ boundary=bar\n      --bar\n      Content-Type: text/plain; charset=iso-8859-1\n\
    \      Content-Transfer-Encoding: quoted-printable\n      =A1Hola Michael!\n \
    \     How do you like the new S/MIME specification?\n      It's generally a good\
    \ idea to encode lines that begin with\n      From=20because some mail transport\
    \ agents will insert a greater-\n      than (>) sign, thus invalidating the signature.\n\
    \      Also, in some cases it might be desirable to encode any =20\n      trailing\
    \ whitespace that occurs on lines in order to ensure =20\n      that the message\
    \ signature is not invalidated when passing =20\n      a gateway that modifies\
    \ such whitespace (like BITNET). =20\n      --bar\n      Content-Type: image/jpeg\n\
    \      Content-Transfer-Encoding: base64\n      iQCVAwUBMJrRF2N9oWBghPDJAQE9UQQAtl7LuRVndBjrk4EqYBIb3h5QXIX/LC//\n\
    \      jJV5bNvkZIGPIcEmI5iFd9boEgvpirHtIREEqLQRkYNoBActFBZmh9GC3C041WGq\n    \
    \  uMbrbxc+nIs1TIKlA08rVi9ig/2Yh7LFrK5Ein57U/W72vgSxLhe/zhdfolT9Brn\n      HOxEa44b+EI=\n\
    \      --bar--\n"
- title: 3.2.  The application/pkcs7-mime Media Type
  contents:
  - "3.2.  The application/pkcs7-mime Media Type\n   The application/pkcs7-mime media\
    \ type is used to carry CMS content\n   types including EnvelopedData, SignedData,\
    \ and CompressedData.  The\n   details of constructing these entities are described\
    \ in subsequent\n   sections.  This section describes the general characteristics\
    \ of the\n   application/pkcs7-mime media type.\n   The carried CMS object always\
    \ contains a MIME entity that is prepared\n   as described in Section 3.1 if the\
    \ eContentType is id-data.  Other\n   contents MAY be carried when the eContentType\
    \ contains different\n   values.  See [ESS] for an example of this with signed\
    \ receipts.\n   Since CMS content types are binary data, in most cases base-64\n\
    \   transfer encoding is appropriate, in particular, when used with SMTP\n   transport.\
    \  The transfer encoding used depends on the transport\n   through which the object\
    \ is to be sent, and is not a characteristic\n   of the media type.\n   Note that\
    \ this discussion refers to the transfer encoding of the CMS\n   object or \"\
    outside\" MIME entity.  It is completely distinct from, and\n   unrelated to,\
    \ the transfer encoding of the MIME entity secured by the\n   CMS object, the\
    \ \"inside\" object, which is described in Section 3.1.\n   Because there are\
    \ several types of application/pkcs7-mime objects, a\n   sending agent SHOULD\
    \ do as much as possible to help a receiving agent\n   know about the contents\
    \ of the object without forcing the receiving\n   agent to decode the ASN.1 for\
    \ the object.  The Content-Type header\n   field of all application/pkcs7-mime\
    \ objects SHOULD include the\n   optional \"smime-type\" parameter, as described\
    \ in the following\n   sections.\n"
- title: 3.2.1.  The name and filename Parameters
  contents:
  - "3.2.1.  The name and filename Parameters\n   For the application/pkcs7-mime,\
    \ sending agents SHOULD emit the\n   optional \"name\" parameter to the Content-Type\
    \ field for compatibility\n   with older systems.  Sending agents SHOULD also\
    \ emit the optional\n   Content-Disposition field [CONTDISP] with the \"filename\"\
    \ parameter.\n   If a sending agent emits the above parameters, the value of the\n\
    \   parameters SHOULD be a file name with the appropriate extension:\n   Media\
    \ Type                                            File Extension\n     application/pkcs7-mime\
    \ (SignedData, EnvelopedData)      .p7m\n     application/pkcs7-mime (degenerate\
    \ SignedData           .p7c\n        certificate management message)\n     application/pkcs7-mime\
    \ (CompressedData)                 .p7z\n     application/pkcs7-signature (SignedData)\
    \                .p7s\n   In addition, the file name SHOULD be limited to eight\
    \ characters\n   followed by a three-letter extension.  The eight-character filename\n\
    \   base can be any distinct name; the use of the filename base \"smime\"\n  \
    \ SHOULD be used to indicate that the MIME entity is associated with\n   S/MIME.\n\
    \   Including a file name serves two purposes.  It facilitates easier use\n  \
    \ of S/MIME objects as files on disk.  It also can convey type\n   information\
    \ across gateways.  When a MIME entity of type\n   application/pkcs7-mime (for\
    \ example) arrives at a gateway that has no\n   special knowledge of S/MIME, it\
    \ will default the entity's media type\n   to application/octet-stream and treat\
    \ it as a generic attachment,\n   thus losing the type information.  However,\
    \ the suggested filename\n   for an attachment is often carried across a gateway.\
    \  This often\n   allows the receiving systems to determine the appropriate application\n\
    \   to hand the attachment off to, in this case, a stand-alone S/MIME\n   processing\
    \ application.  Note that this mechanism is provided as a\n   convenience for\
    \ implementations in certain environments.  A proper\n   S/MIME implementation\
    \ MUST use the media types and MUST NOT rely on\n   the file extensions.\n"
- title: 3.2.2.  The smime-type Parameter
  contents:
  - "3.2.2.  The smime-type Parameter\n   The application/pkcs7-mime content type\
    \ defines the optional \"smime-\n   type\" parameter.  The intent of this parameter\
    \ is to convey details\n   about the security applied (signed or enveloped) along\
    \ with\n   information about the contained content.  This specification defines\n\
    \   the following smime-types.\n      Name                   CMS Type        \
    \        Inner Content\n      enveloped-data         EnvelopedData           id-data\n\
    \      signed-data            SignedData              id-data\n      certs-only\
    \             SignedData              none\n      compressed-data        CompressedData\
    \          id-data\n   In order for consistency to be obtained with future specifications,\n\
    \   the following guidelines SHOULD be followed when assigning a new\n   smime-type\
    \ parameter.\n      1. If both signing and encryption can be applied to the content,\n\
    \         then two values for smime-type SHOULD be assigned \"signed-*\"\n   \
    \      and \"enveloped-*\".  If one operation can be assigned, then this\n   \
    \      can be omitted.  Thus, since \"certs-only\" can only be signed,\n     \
    \    \"signed-\" is omitted.\n      2. A common string for a content OID SHOULD\
    \ be assigned.  We use\n         \"data\" for the id-data content OID when MIME\
    \ is the inner\n         content.\n      3. If no common string is assigned, then\
    \ the common string of\n         \"OID.<oid>\" is recommended (for example,\n\
    \         \"OID.2.16.840.1.101.3.4.1.2\" would be AES-128 CBC).\n   It is explicitly\
    \ intended that this field be a suitable hint for mail\n   client applications\
    \ to indicate whether a message is \"signed\" or\n   \"enveloped\" without having\
    \ to tunnel into the CMS payload.\n"
- title: 3.3.  Creating an Enveloped-Only Message
  contents:
  - "3.3.  Creating an Enveloped-Only Message\n   This section describes the format\
    \ for enveloping a MIME entity\n   without signing it.  It is important to note\
    \ that sending enveloped\n   but not signed messages does not provide for data\
    \ integrity.  It is\n   possible to replace ciphertext in such a way that the\
    \ processed\n   message will still be valid, but the meaning can be altered.\n\
    \   Step 1.  The MIME entity to be enveloped is prepared according to\n      \
    \      Section 3.1.\n   Step 2.  The MIME entity and other required data is processed\
    \ into a\n            CMS object of type EnvelopedData.  In addition to encrypting\n\
    \            a copy of the content-encryption key for each recipient, a\n    \
    \        copy of the content-encryption key SHOULD be encrypted for\n        \
    \    the originator and included in the EnvelopedData (see [CMS],\n          \
    \  Section 6).\n   Step 3.  The EnvelopedData object is wrapped in a CMS ContentInfo\n\
    \            object.\n   Step 4.  The ContentInfo object is inserted into an\n\
    \            application/pkcs7-mime MIME entity.\n   The smime-type parameter\
    \ for enveloped-only messages is \"enveloped-\n   data\".  The file extension\
    \ for this type of message is \".p7m\".\n   A sample message would be:\n     \
    \ Content-Type: application/pkcs7-mime; smime-type=enveloped-data;\n         \
    \  name=smime.p7m\n      Content-Transfer-Encoding: base64\n      Content-Disposition:\
    \ attachment; filename=smime.p7m\n      rfvbnj756tbBghyHhHUujhJhjH77n8HHGT9HG4VQpfyF467GhIGfHfYT6\n\
    \      7n8HHGghyHhHUujhJh4VQpfyF467GhIGfHfYGTrfvbnjT6jH7756tbB9H\n      f8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4\n\
    \      0GhIGfHfQbnj756YT64V\n"
- title: 3.4.  Creating a Signed-Only Message
  contents:
  - "3.4.  Creating a Signed-Only Message\n   There are two formats for signed messages\
    \ defined for S/MIME:\n      - application/pkcs7-mime with SignedData.\n     \
    \ - multipart/signed.\n   In general, the multipart/signed form is preferred for\
    \ sending, and\n   receiving agents MUST be able to handle both.\n"
- title: 3.4.1.  Choosing a Format for Signed-Only Messages
  contents:
  - "3.4.1.  Choosing a Format for Signed-Only Messages\n   There are no hard-and-fast\
    \ rules as to when a particular signed-only\n   format is chosen.  It depends\
    \ on the capabilities of all the\n   receivers and the relative importance of\
    \ receivers with S/MIME\n   facilities being able to verify the signature versus\
    \ the importance\n   of receivers without S/MIME software being able to view the\
    \ message.\n   Messages signed using the multipart/signed format can always be\n\
    \   viewed by the receiver whether or not they have S/MIME software.\n   They\
    \ can also be viewed whether they are using a MIME-native user\n   agent or they\
    \ have messages translated by a gateway.  In this\n   context, \"be viewed\" means\
    \ the ability to process the message\n   essentially as if it were not a signed\
    \ message, including any other\n   MIME structure the message might have.\n  \
    \ Messages signed using the SignedData format cannot be viewed by a\n   recipient\
    \ unless they have S/MIME facilities.  However, the\n   SignedData format protects\
    \ the message content from being changed by\n   benign intermediate agents.  Such\
    \ agents might do line wrapping or\n   content-transfer encoding changes that\
    \ would break the signature.\n"
- title: 3.4.2.  Signing Using application/pkcs7-mime with SignedData
  contents:
  - "3.4.2.  Signing Using application/pkcs7-mime with SignedData\n   This signing\
    \ format uses the application/pkcs7-mime media type.  The\n   steps to create\
    \ this format are:\n   Step 1.  The MIME entity is prepared according to Section\
    \ 3.1.\n   Step 2.  The MIME entity and other required data are processed into\
    \ a\n            CMS object of type SignedData.\n   Step 3.  The SignedData object\
    \ is wrapped in a CMS ContentInfo\n            object.\n   Step 4.  The ContentInfo\
    \ object is inserted into an\n            application/pkcs7-mime MIME entity.\n\
    \   The smime-type parameter for messages using application/pkcs7-mime\n   with\
    \ SignedData is \"signed-data\".  The file extension for this type\n   of message\
    \ is \".p7m\".\n   A sample message would be:\n      Content-Type: application/pkcs7-mime;\
    \ smime-type=signed-data;\n           name=smime.p7m\n      Content-Transfer-Encoding:\
    \ base64\n      Content-Disposition: attachment; filename=smime.p7m\n      567GhIGfHfYT6ghyHhHUujpfyF4f8HHGTrfvhJhjH776tbB9HG4VQbnj7\n\
    \      77n8HHGT9HG4VQpfyF467GhIGfHfYT6rfvbnj756tbBghyHhHUujhJhjH\n      HUujhJh4VQpfyF467GhIGfHfYGTrfvbnjT6jH7756tbB9H7n8HHGghyHh\n\
    \      6YT64V0GhIGfHfQbnj75\n"
- title: 3.4.3.  Signing Using the multipart/signed Format
  contents:
  - "3.4.3.  Signing Using the multipart/signed Format\n   This format is a clear-signing\
    \ format.  Recipients without any S/MIME\n   or CMS processing facilities are\
    \ able to view the message.  It makes\n   use of the multipart/signed media type\
    \ described in [MIME-SECURE].\n   The multipart/signed media type has two parts.\
    \  The first part\n   contains the MIME entity that is signed; the second part\
    \ contains the\n   \"detached signature\" CMS SignedData object in which the\n\
    \   encapContentInfo eContent field is absent.\n"
- title: 3.4.3.1.  The application/pkcs7-signature Media Type
  contents:
  - "3.4.3.1.  The application/pkcs7-signature Media Type\n   This media type always\
    \ contains a CMS ContentInfo containing a single\n   CMS object of type SignedData.\
    \  The SignedData encapContentInfo\n   eContent field MUST be absent.  The signerInfos\
    \ field contains the\n   signatures for the MIME entity.\n   The file extension\
    \ for signed-only messages using application/pkcs7-\n   signature is \".p7s\"\
    .\n"
- title: 3.4.3.2.  Creating a multipart/signed Message
  contents:
  - "3.4.3.2.  Creating a multipart/signed Message\n   Step 1.  The MIME entity to\
    \ be signed is prepared according to\n            Section 3.1, taking special\
    \ care for clear-signing.\n   Step 2.  The MIME entity is presented to CMS processing\
    \ in order to\n            obtain an object of type SignedData in which the\n\
    \            encapContentInfo eContent field is absent.\n   Step 3.  The MIME\
    \ entity is inserted into the first part of a\n            multipart/signed message\
    \ with no processing other than that\n            described in Section 3.1.\n\
    \   Step 4.  Transfer encoding is applied to the \"detached signature\" CMS\n\
    \            SignedData object, and it is inserted into a MIME entity of\n   \
    \         type application/pkcs7-signature.\n   Step 5.  The MIME entity of the\
    \ application/pkcs7-signature is\n            inserted into the second part of\
    \ the multipart/signed\n            entity.\n   The multipart/signed Content-Type\
    \ has two required parameters: the\n   protocol parameter and the micalg parameter.\n\
    \   The protocol parameter MUST be \"application/pkcs7-signature\".  Note\n  \
    \ that quotation marks are required around the protocol parameter\n   because\
    \ MIME requires that the \"/\" character in the parameter value\n   MUST be quoted.\n\
    \   The micalg parameter allows for one-pass processing when the\n   signature\
    \ is being verified.  The value of the micalg parameter is\n   dependent on the\
    \ message digest algorithm(s) used in the calculation\n   of the Message Integrity\
    \ Check.  If multiple message digest\n   algorithms are used, they MUST be separated\
    \ by commas per [MIME-\n   SECURE].  The values to be placed in the micalg parameter\
    \ SHOULD be\n   from the following:\n      Algorithm   Value Used\n      MD5 \
    \        md5\n      SHA-1       sha-1\n      SHA-224     sha-224\n      SHA-256\
    \     sha-256\n      SHA-384     sha-384\n      SHA-512     sha-512\n      Any\
    \ other   (defined separately in algorithm profile or \"unknown\"\n          \
    \         if not defined)\n   (Historical note: some early implementations of\
    \ S/MIME emitted and\n   expected \"rsa-md5\", \"rsa-sha1\", and \"sha1\" for\
    \ the micalg parameter.)\n   Receiving agents SHOULD be able to recover gracefully\
    \ from a micalg\n   parameter value that they do not recognize.  Future names\
    \ for this\n   parameter will be consistent with the IANA \"Hash Function Textual\n\
    \   Names\" registry.\n"
- title: 3.4.3.3.  Sample multipart/signed Message
  contents:
  - "3.4.3.3.  Sample multipart/signed Message\n       Content-Type: multipart/signed;\n\
    \          protocol=\"application/pkcs7-signature\";\n          micalg=sha1; boundary=boundary42\n\
    \       --boundary42\n       Content-Type: text/plain\n       This is a clear-signed\
    \ message.\n       --boundary42\n       Content-Type: application/pkcs7-signature;\
    \ name=smime.p7s\n       Content-Transfer-Encoding: base64\n       Content-Disposition:\
    \ attachment; filename=smime.p7s\n       ghyHhHUujhJhjH77n8HHGTrfvbnj756tbB9HG4VQpfyF467GhIGfHfYT6\n\
    \       4VQpfyF467GhIGfHfYT6jH77n8HHGghyHhHUujhJh756tbB9HGTrfvbnj\n       n8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4\n\
    \       7GhIGfHfYT64VQbnj756\n      --boundary42--\n   The content that is digested\
    \ (the first part of the multipart/signed)\n   consists of the bytes:\n   43 6f\
    \ 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74 65 78 74 2f 70 6c 61 69\n   6e 0d 0a\
    \ 0d 0a 54 68 69 73 20 69 73 20 61 20 63 6c 65 61 72 2d 73 69\n   67 6e 65 64\
    \ 20 6d 65 73 73 61 67 65 2e 0d 0a\n"
- title: 3.5.  Creating a Compressed-Only Message
  contents:
  - "3.5.  Creating a Compressed-Only Message\n   This section describes the format\
    \ for compressing a MIME entity.\n   Please note that versions of S/MIME prior\
    \ to version 3.1 did not\n   specify any use of CompressedData, and will not recognize\
    \ it.  The\n   use of a capability to indicate the ability to receive CompressedData\n\
    \   is described in [CMSCOMPR] and is the preferred method for\n   compatibility.\n\
    \   Step 1.  The MIME entity to be compressed is prepared according to\n     \
    \       Section 3.1.\n   Step 2.  The MIME entity and other required data are\
    \ processed into a\n            CMS object of type CompressedData.\n   Step 3.\
    \  The CompressedData object is wrapped in a CMS ContentInfo\n            object.\n\
    \   Step 4.  The ContentInfo object is inserted into an\n            application/pkcs7-mime\
    \ MIME entity.\n   The smime-type parameter for compressed-only messages is \"\
    compressed-\n   data\".  The file extension for this type of message is \".p7z\"\
    .\n   A sample message would be:\n   Content-Type: application/pkcs7-mime; smime-type=compressed-data;\n\
    \      name=smime.p7z\n   Content-Transfer-Encoding: base64\n   Content-Disposition:\
    \ attachment; filename=smime.p7z\n   rfvbnj756tbBghyHhHUujhJhjH77n8HHGT9HG4VQpfyF467GhIGfHfYT6\n\
    \   7n8HHGghyHhHUujhJh4VQpfyF467GhIGfHfYGTrfvbnjT6jH7756tbB9H\n   f8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4\n\
    \   0GhIGfHfQbnj756YT64V\n"
- title: 3.6.  Multiple Operations
  contents:
  - "3.6.  Multiple Operations\n   The signed-only, enveloped-only, and compressed-only\
    \ MIME formats can\n   be nested.  This works because these formats are all MIME\
    \ entities\n   that encapsulate other MIME entities.\n   An S/MIME implementation\
    \ MUST be able to receive and process\n   arbitrarily nested S/MIME within reasonable\
    \ resource limits of the\n   recipient computer.\n   It is possible to apply any\
    \ of the signing, encrypting, and\n   compressing operations in any order.  It\
    \ is up to the implementer and\n   the user to choose.  When signing first, the\
    \ signatories are then\n   securely obscured by the enveloping.  When enveloping\
    \ first the\n   signatories are exposed, but it is possible to verify signatures\n\
    \   without removing the enveloping.  This can be useful in an\n   environment\
    \ where automatic signature verification is desired, as no\n   private key material\
    \ is required to verify a signature.\n   There are security ramifications to choosing\
    \ whether to sign first or\n   encrypt first.  A recipient of a message that is\
    \ encrypted and then\n   signed can validate that the encrypted block was unaltered,\
    \ but\n   cannot determine any relationship between the signer and the\n   unencrypted\
    \ contents of the message.  A recipient of a message that\n   is signed then encrypted\
    \ can assume that the signed message itself\n   has not been altered, but that\
    \ a careful attacker could have changed\n   the unauthenticated portions of the\
    \ encrypted message.\n   When using compression, keep the following guidelines\
    \ in mind:\n      - Compression of binary encoded encrypted data is discouraged,\n\
    \        since it will not yield significant compression.  Base64\n        encrypted\
    \ data could very well benefit, however.\n      - If a lossy compression algorithm\
    \ is used with signing, you will\n        need to compress first, then sign.\n"
- title: 3.7.  Creating a Certificate Management Message
  contents:
  - "3.7.  Creating a Certificate Management Message\n   The certificate management\
    \ message or MIME entity is used to\n   transport certificates and/or Certificate\
    \ Revocation Lists, such as\n   in response to a registration request.\n   Step\
    \ 1.  The certificates and/or Certificate Revocation Lists are\n            made\
    \ available to the CMS generating process that creates a\n            CMS object\
    \ of type SignedData.  The SignedData\n            encapContentInfo eContent field\
    \ MUST be absent and\n            signerInfos field MUST be empty.\n   Step 2.\
    \  The SignedData object is wrapped in a CMS ContentInfo\n            object.\n\
    \   Step 3.  The ContentInfo object is enclosed in an\n            application/pkcs7-mime\
    \ MIME entity.\n   The smime-type parameter for a certificate management message\
    \ is\n   \"certs-only\".  The file extension for this type of message is \".p7c\"\
    .\n"
- title: 3.8.  Registration Requests
  contents:
  - "3.8.  Registration Requests\n   A sending agent that signs messages MUST have\
    \ a certificate for the\n   signature so that a receiving agent can verify the\
    \ signature.  There\n   are many ways of getting certificates, such as through\
    \ an exchange\n   with a certification authority, through a hardware token or\
    \ diskette,\n   and so on.\n   S/MIME v2 [SMIMEv2] specified a method for \"registering\"\
    \ public keys\n   with certificate authorities using an application/pkcs10 body\
    \ part.\n   Since that time, the IETF PKIX Working Group has developed other\n\
    \   methods for requesting certificates.  However, S/MIME v3.2 does not\n   require\
    \ a particular certificate request mechanism.\n"
- title: 3.9.  Identifying an S/MIME Message
  contents:
  - "3.9.  Identifying an S/MIME Message\n   Because S/MIME takes into account interoperation\
    \ in non-MIME\n   environments, several different mechanisms are employed to carry\
    \ the\n   type information, and it becomes a bit difficult to identify S/MIME\n\
    \   messages.  The following table lists criteria for determining whether\n  \
    \ or not a message is an S/MIME message.  A message is considered an\n   S/MIME\
    \ message if it matches any of the criteria listed below.\n   The file suffix\
    \ in the table below comes from the \"name\" parameter in\n   the Content-Type\
    \ header field, or the \"filename\" parameter on the\n   Content-Disposition header\
    \ field.  These parameters that give the\n   file suffix are not listed below\
    \ as part of the parameter section.\n   Media type:  application/pkcs7-mime\n\
    \   parameters:  any\n   file suffix: any\n   Media type:  multipart/signed\n\
    \   parameters:  protocol=\"application/pkcs7-signature\"\n   file suffix: any\n\
    \   Media type:  application/octet-stream\n   parameters:  any\n   file suffix:\
    \ p7m, p7s, p7c, p7z\n"
- title: 4.  Certificate Processing
  contents:
  - "4.  Certificate Processing\n   A receiving agent MUST provide some certificate\
    \ retrieval mechanism\n   in order to gain access to certificates for recipients\
    \ of digital\n   envelopes.  This specification does not cover how S/MIME agents\n\
    \   handle certificates, only what they do after a certificate has been\n   validated\
    \ or rejected.  S/MIME certificate issues are covered in\n   [CERT32].\n   At\
    \ a minimum, for initial S/MIME deployment, a user agent could\n   automatically\
    \ generate a message to an intended recipient requesting\n   that recipient's\
    \ certificate in a signed return message.  Receiving\n   and sending agents SHOULD\
    \ also provide a mechanism to allow a user to\n   \"store and protect\" certificates\
    \ for correspondents in such a way so\n   as to guarantee their later retrieval.\n"
- title: 4.1.  Key Pair Generation
  contents:
  - "4.1.  Key Pair Generation\n   All generated key pairs MUST be generated from\
    \ a good source of non-\n   deterministic random input [RANDOM] and the private\
    \ key MUST be\n   protected in a secure fashion.\n   An S/MIME user agent MUST\
    \ NOT generate asymmetric keys less than 512\n   bits for use with the RSA or\
    \ DSA signature algorithms.\n   For 512-bit RSA with SHA-1 see [CMSALG] and [FIPS186-2]\
    \ without\n   Change Notice 1, for 512-bit RSA with SHA-256 see [CMS-SHA2] and\n\
    \   [FIPS186-2] without Change Notice 1, and for 1024-bit through\n   2048-bit\
    \ RSA with SHA-256 see [CMS-SHA2] and [FIPS186-2] with Change\n   Notice 1.  The\
    \ first reference provides the signature algorithm's\n   object identifier, and\
    \ the second provides the signature algorithm's\n   definition.\n   For 512-bit\
    \ DSA with SHA-1 see [CMSALG] and [FIPS186-2] without\n   Change Notice 1, for\
    \ 512-bit DSA with SHA-256 see [CMS-SHA2] and\n   [FIPS186-2] without Change Notice\
    \ 1, for 1024-bit DSA with SHA-1 see\n   [CMSALG] and [FIPS186-2] with Change\
    \ Notice 1, for 1024-bit and above\n   DSA with SHA-256 see [CMS-SHA2] and [FIPS186-3].\
    \  The first reference\n   provides the signature algorithm's object identifier\
    \ and the second\n   provides the signature algorithm's definition.\n   For RSASSA-PSS\
    \ with SHA-256, see [RSAPSS].  For 1024-bit DH, see\n   [CMSALG].  For 1024-bit\
    \ and larger DH, see [SP800-56A]; regardless,\n   use the KDF, which is from X9.42,\
    \ specified in [CMSALG].  For RSAES-\n   OAEP, see [RSAOAEP].\n"
- title: 4.2.  Signature Generation
  contents:
  - "4.2.  Signature Generation\n   The following are the requirements for an S/MIME\
    \ agent generated RSA,\n   RSASSA-PSS, and DSA signatures:\n           key size\
    \ <= 1023 : SHOULD NOT (see Security Considerations)\n   1024 <= key size <= 2048\
    \ : SHOULD     (see Security Considerations)\n   2048 <  key size         : MAY\
    \        (see Security Considerations)\n"
- title: 4.3.  Signature Verification
  contents:
  - "4.3.  Signature Verification\n   The following are the requirements for S/MIME\
    \ receiving agents during\n   signature verification of RSA, RSASSA-PSS, and DSA\
    \ signatures:\n           key size <= 1023 : MAY        (see Security Considerations)\n\
    \   1024 <= key size <= 2048 : MUST       (see Security Considerations)\n   2048\
    \ <  key size         : MAY        (see Security Considerations)\n"
- title: 4.4.  Encryption
  contents:
  - "4.4.  Encryption\n   The following are the requirements for an S/MIME agent when\n\
    \   establishing keys for content encryption using the RSA, RSA-OAEP, and\n  \
    \ DH algorithms:\n           key size <= 1023 : SHOULD NOT (see Security Considerations)\n\
    \   1024 <= key size <= 2048 : SHOULD     (see Security Considerations)\n   2048\
    \ <  key size         : MAY        (see Security Considerations)\n"
- title: 4.5.  Decryption
  contents:
  - "4.5.  Decryption\n   The following are the requirements for an S/MIME agent when\n\
    \   establishing keys for content decryption using the RSA, RSAES-OAEP,\n   and\
    \ DH algorithms:\n           key size <= 1023 : MAY        (see Security Considerations)\n\
    \   1024 <= key size <= 2048 : MUST       (see Security Considerations)\n   2048\
    \ <  key size         : MAY        (see Security Considerations)\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   The following information updates the media type\
    \ registration for\n   application/pkcs7-mime and application/pkcs7-signature\
    \ to refer to\n   this document as opposed to RFC 2311.\n   Note that other documents\
    \ can define additional MIME media types for\n   S/MIME.\n"
- title: 5.1.  Media Type for application/pkcs7-mime
  contents:
  - "5.1.  Media Type for application/pkcs7-mime\n   Type name: application\n   Subtype\
    \ Name: pkcs7-mime\n   Required Parameters: NONE\n   Optional Parameters: smime-type/signed-data\n\
    \                        smime-type/enveloped-data\n                        smime-type/compressed-data\n\
    \                        smime-type/certs-only\n                        name\n\
    \   Encoding Considerations: See Section 3 of this document\n   Security Considerations:\
    \ See Section 6 of this document\n   Interoperability Considerations: See Sections\
    \ 1-6 of this document\n   Published Specification: RFC 2311, RFC 2633, and this\
    \ document\n   Applications that use this media type: Security applications\n\
    \   Additional information: NONE\n   Person & email to contact for further information:\n\
    \      S/MIME working group chairs smime-chairs@tools.ietf.org\n   Intended usage:\
    \ COMMON\n   Restrictions on usage: NONE\n   Author: Sean Turner\n   Change Controller:\
    \ S/MIME working group delegated from the IESG\n"
- title: 5.2.  Media Type for application/pkcs7-signature
  contents:
  - "5.2.  Media Type for application/pkcs7-signature\n   Type name: application\n\
    \   Subtype Name: pkcs7-signature\n   Required Parameters: NONE\n   Optional Parameters:\
    \ NONE\n   Encoding Considerations: See Section 3 of this document\n   Security\
    \ Considerations: See Section 6 of this document\n   Interoperability Considerations:\
    \ See Sections 1-6 of this document\n   Published Specification: RFC 2311, RFC\
    \ 2633, and this document\n   Applications that use this media type: Security\
    \ applications\n   Additional information: NONE\n   Person & email to contact\
    \ for further information:\n      S/MIME working group chairs smime-chairs@tools.ietf.org\n\
    \   Intended usage: COMMON\n   Restrictions on usage: NONE\n   Author: Sean Turner\n\
    \   Change Controller: S/MIME working group delegated from the IESG\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Cryptographic algorithms will be broken or weakened\
    \ over time.\n   Implementers and users need to check that the cryptographic\n\
    \   algorithms listed in this document continue to provide the expected\n   level\
    \ of security.  The IETF from time to time may issue documents\n   dealing with\
    \ the current state of the art.  For example:\n      - The Million Message Attack\
    \ described in RFC 3218 [MMA].\n      - The Diffie-Hellman \"small-subgroup\"\
    \ attacks described in RFC\n        2785 [DHSUB].\n      - The attacks against\
    \ hash algorithms described in RFC 4270 [HASH-\n        ATTACK].\n   This specification\
    \ uses Public-Key Cryptography technologies.  It is\n   assumed that the private\
    \ key is protected to ensure that it is not\n   accessed or altered by unauthorized\
    \ parties.\n   It is impossible for most people or software to estimate the value\
    \ of\n   a message's content.  Further, it is impossible for most people or\n\
    \   software to estimate the actual cost of recovering an encrypted\n   message\
    \ content that is encrypted with a key of a particular size.\n   Further, it is\
    \ quite difficult to determine the cost of a failed\n   decryption if a recipient\
    \ cannot process a message's content.  Thus,\n   choosing between different key\
    \ sizes (or choosing whether to just use\n   plaintext) is also impossible for\
    \ most people or software.  However,\n   decisions based on these criteria are\
    \ made all the time, and\n   therefore this specification gives a framework for\
    \ using those\n   estimates in choosing algorithms.\n   The choice of 2048 bits\
    \ as the RSA asymmetric key size in this\n   specification is based on the desire\
    \ to provide at least 100 bits of\n   security.  The key sizes that must be supported\
    \ to conform to this\n   specification seem appropriate for the Internet based\
    \ on [STRENGTH].\n   Of course, there are environments, such as financial and\
    \ medical\n   systems, that may select different key sizes.  For this reason,\
    \ an\n   implementation MAY support key sizes beyond those recommended in this\n\
    \   specification.\n   Receiving agents that validate signatures and sending agents\
    \ that\n   encrypt messages need to be cautious of cryptographic processing\n\
    \   usage when validating signatures and encrypting messages using keys\n   larger\
    \ than those mandated in this specification.  An attacker could\n   send certificates\
    \ with keys that would result in excessive\n   cryptographic processing, for example,\
    \ keys larger than those\n   mandated in this specification, which could swamp\
    \ the processing\n   element.  Agents that use such keys without first validating\
    \ the\n   certificate to a trust anchor are advised to have some sort of\n   cryptographic\
    \ resource management system to prevent such attacks.\n   Using weak cryptography\
    \ in S/MIME offers little actual security over\n   sending plaintext.  However,\
    \ other features of S/MIME, such as the\n   specification of AES and the ability\
    \ to announce stronger\n   cryptographic capabilities to parties with whom you\
    \ communicate,\n   allow senders to create messages that use strong encryption.\
    \  Using\n   weak cryptography is never recommended unless the only alternative\
    \ is\n   no cryptography.\n   RSA and DSA keys of less than 1024 bits are now\
    \ considered by many\n   experts to be cryptographically insecure (due to advances\
    \ in\n   computing power), and should no longer be used to protect messages.\n\
    \   Such keys were previously considered secure, so processing previously\n  \
    \ received signed and encrypted mail will often result in the use of\n   weak\
    \ keys.  Implementations that wish to support previous versions of\n   S/MIME\
    \ or process old messages need to consider the security risks\n   that result\
    \ from smaller key sizes (e.g., spoofed messages) versus\n   the costs of denial\
    \ of service.  If an implementation supports\n   verification of digital signatures\
    \ generated with RSA and DSA keys of\n   less than 1024 bits, it MUST warn the\
    \ user.  Implementers should\n   consider providing different warnings for newly\
    \ received messages and\n   previously stored messages.  Server implementations\
    \ (e.g., secure\n   mail list servers) where user warnings are not appropriate\
    \ SHOULD\n   reject messages with weak signatures.\n   Implementers SHOULD be\
    \ aware that multiple active key pairs can be\n   associated with a single individual.\
    \  For example, one key pair can\n   be used to support confidentiality, while\
    \ a different key pair can be\n   used for digital signatures.\n   If a sending\
    \ agent is sending the same message using different\n   strengths of cryptography,\
    \ an attacker watching the communications\n   channel might be able to determine\
    \ the contents of the strongly\n   encrypted message by decrypting the weakly\
    \ encrypted version.  In\n   other words, a sender SHOULD NOT send a copy of a\
    \ message using\n   weaker cryptography than they would use for the original of\
    \ the\n   message.\n   Modification of the ciphertext can go undetected if authentication\
    \ is\n   not also used, which is the case when sending EnvelopedData without\n\
    \   wrapping it in SignedData or enclosing SignedData within it.\n   If an implementation\
    \ is concerned about compliance with National\n   Institute of Standards and Technology\
    \ (NIST) key size\n   recommendations, then see [SP800-57].\n   If messaging environments\
    \ make use of the fact that a message is\n   signed to change the behavior of\
    \ message processing (examples would\n   be running rules or UI display hints),\
    \ without first verifying that\n   the message is actually signed and knowing\
    \ the state of the\n   signature, this can lead to incorrect handling of the message.\n\
    \   Visual indicators on messages may need to have the signature\n   validation\
    \ code checked periodically if the indicator is supposed to\n   give information\
    \ on the current status of a message.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Reference Conventions
  contents:
  - "7.1.  Reference Conventions\n   [CMS] refers to [RFC5652].\n   [ESS] refers to\
    \ [RFC2634] and [RFC5035].\n   [MIME] refers to [RFC2045], [RFC2046],  [RFC2047],\
    \ [RFC2049],\n   [RFC4288], and [RFC4289].\n   [SMIMEv2] refers to [RFC2311],\
    \ [RFC2312], [RFC2313], [RFC2314], and\n   [RFC2315].\n   [SMIMEv3] refers to\
    \ [RFC2630], [RFC2631], [RFC2632], [RFC2633],\n   [RFC2634], and [RFC5035].\n\
    \   [SMIMv3.1] refers to [RFC2634], [RFC3850], [RFC3851], [RFC3852], and\n   [RFC5035].\n"
- title: 7.2.  Normative References
  contents:
  - "7.2.  Normative References\n   [CERT32]      Ramsdell, B. and S. Turner, \"Secure/Multipurpose\n\
    \                 Internet Mail Extensions (S/MIME) Version 3.2\n            \
    \     Certificate Handling\", RFC 5750, January 2010.\n   [CHARSETS]    Character\
    \ sets assigned by IANA.  See\n                 http://www.iana.org/assignments/character-sets.\n\
    \   [CMSAES]      Schaad, J., \"Use of the Advanced Encryption Standard\n    \
    \             (AES) Encryption Algorithm in Cryptographic Message\n          \
    \       Syntax (CMS)\", RFC 3565, July 2003.\n   [CMSALG]      Housley, R., \"\
    Cryptographic Message Syntax (CMS)\n                 Algorithms\", RFC 3370, August\
    \ 2002.\n   [CMSCOMPR]    Gutmann, P., \"Compressed Data Content Type for\n  \
    \               Cryptographic Message Syntax (CMS)\", RFC 3274, June\n       \
    \          2002.\n   [CMS-SHA2]    Turner, S., \"Using SHA2 Algorithms with Cryptographic\n\
    \                 Message Syntax\", RFC 5754, January 2010.\n   [CONTDISP]   \
    \ Troost, R., Dorner, S., and K. Moore, Ed.,\n                 \"Communicating\
    \ Presentation Information in Internet\n                 Messages: The Content-Disposition\
    \ Header Field\", RFC\n                 2183, August 1997.\n   [FIPS186-2]   National\
    \ Institute of Standards and Technology (NIST),\n                 \"Digital Signature\
    \ Standard (DSS)\", FIPS Publication\n                 186-2, January 2000. [With\
    \ Change Notice 1].\n   [FIPS186-3]   National Institute of Standards and Technology\
    \ (NIST),\n                 FIPS Publication 186-3: Digital Signature Standard,\n\
    \                 June 2009.\n   [MIME-SECURE] Galvin, J., Murphy, S., Crocker,\
    \ S., and N. Freed,\n                 \"Security Multiparts for MIME: Multipart/Signed\
    \ and\n                 Multipart/Encrypted\", RFC 1847, October 1995.\n   [MUSTSHOULD]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n                 Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RANDOM]      Eastlake, D., 3rd,\
    \ Schiller, J., and S. Crocker,\n                 \"Randomness Requirements for\
    \ Security\", BCP 106, RFC\n                 4086, June 2005.\n   [RFC2045]  \
    \   Freed, N. and N. Borenstein, \"Multipurpose Internet\n                 Mail\
    \ Extensions (MIME) Part One: Format of Internet\n                 Message Bodies\"\
    , RFC 2045, November 1996.\n   [RFC2046]     Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet\n                 Mail Extensions (MIME) Part Two: Media Types\", RFC\n\
    \                 2046, November 1996.\n   [RFC2047]     Moore, K., \"MIME (Multipurpose\
    \ Internet Mail\n                 Extensions) Part Three: Message Header Extensions\
    \ for\n                 Non-ASCII Text\", RFC 2047, November 1996.\n   [RFC2049]\
    \     Freed, N. and N. Borenstein, \"Multipurpose Internet\n                 Mail\
    \ Extensions (MIME) Part Five: Conformance Criteria\n                 and Examples\"\
    , RFC 2049, November 1996.\n   [RFC2634]     Hoffman, P. Ed., \"Enhanced Security\
    \ Services for\n                 S/MIME\", RFC 2634, June 1999.\n   [RFC4288]\
    \     Freed, N. and J. Klensin, \"Media Type Specifications\n                \
    \ and Registration Procedures\", BCP 13, RFC 4288,\n                 December\
    \ 2005.\n   [RFC4289]     Freed, N. and J. Klensin, \"Multipurpose Internet Mail\n\
    \                 Extensions (MIME) Part Four: Registration Procedures\",\n  \
    \               BCP 13, RFC 4289, December 2005.\n   [RFC5035]     Schaad, J.,\
    \ \"Enhanced Security Services (ESS) Update:\n                 Adding CertID Algorithm\
    \ Agility\", RFC 5035, August\n                 2007.\n   [RFC5652]     Housley,\
    \ R., \"Cryptographic Message Syntax (CMS)\", RFC\n                 5652, September\
    \ 2009.\n   [RSAOAEP]     Housley, R. \"Use of the RSAES-OAEP Key Transport\n\
    \                 Algorithm in the Cryptographic Message Syntax (CMS)\",\n   \
    \              RFC 3560, July 2003.\n   [RSAPSS]      Schaad, J., \"Use of the\
    \ RSASSA-PSS Signature Algorithm\n                 in Cryptographic Message Syntax\
    \ (CMS)\", RFC 4056, June\n                 2005.\n   [SP800-56A]   National Institute\
    \ of Standards and Technology (NIST),\n                 Special Publication 800-56A:\
    \ Recommendation Pair-Wise\n                 Key Establishment Schemes Using Discrete\
    \ Logarithm\n                 Cryptography (Revised), March 2007.\n   [X.680]\
    \       ITU-T Recommendation X.680 (2002) | ISO/IEC\n                 8824-1:2002.\
    \ Information Technology - Abstract Syntax\n                 Notation One (ASN.1):\
    \  Specification of basic notation.\n   [X.690]       ITU-T Recommendation X.690\
    \ (2002) | ISO/IEC\n                 8825-1:2002.  Information Technology - ASN.1\
    \ encoding\n                 rules: Specification of Basic Encoding Rules (BER),\n\
    \                 Canonical Encoding Rules (CER) and Distinguished\n         \
    \        Encoding Rules (DER).\n"
- title: 7.3.  Informative References
  contents:
  - "7.3.  Informative References\n   [DHSUB]       Zuccherato, R., \"Methods for\
    \ Avoiding the \"Small-\n                 Subgroup\" Attacks on the Diffie-Hellman\
    \ Key Agreement\n                 Method for S/MIME\", RFC 2785, March 2000.\n\
    \   [HASH-ATTACK] Hoffman, P. and B. Schneier, \"Attacks on Cryptographic\n  \
    \               Hashes in Internet Protocols\", RFC 4270, November 2005.\n   [MMA]\
    \         Rescorla, E., \"Preventing the Million Message Attack on\n         \
    \        Cryptographic Message Syntax\", RFC 3218, January 2002.\n   [PKCS-7]\
    \      Kaliski, B., \"PKCS #7: Cryptographic Message Syntax\n                \
    \ Version 1.5\", RFC 2315, March 1998.\n   [RFC2311]     Dusse, S., Hoffman, P.,\
    \ Ramsdell, B., Lundblade, L.,\n                 and L. Repka, \"S/MIME Version\
    \ 2 Message Specification\",\n                 RFC 2311, March 1998.\n   [RFC2312]\
    \     Dusse, S., Hoffman, P., Ramsdell, B., and J.\n                 Weinstein,\
    \ \"S/MIME Version 2 Certificate Handling\", RFC\n                 2312, March\
    \ 1998.\n   [RFC2313]     Kaliski, B., \"PKCS #1: RSA Encryption Version 1.5\"\
    , RFC\n                 2313, March 1998.\n   [RFC2314]     Kaliski, B., \"PKCS\
    \ #10: Certification Request Syntax\n                 Version 1.5\", RFC 2314,\
    \ March 1998.\n   [RFC2315]     Kaliski, B., \"PKCS #7: Certification Message\
    \ Syntax\n                 Version 1.5\", RFC 2315, March 1998.\n   [RFC2630]\
    \     Housley, R., \"Cryptographic Message Syntax\", RFC 2630,\n             \
    \    June 1999.\n   [RFC2631]     Rescorla, E., \"Diffie-Hellman Key Agreement\
    \ Method\",\n                 RFC 2631, June 1999.\n   [RFC2632]     Ramsdell,\
    \ B., Ed., \"S/MIME Version 3 Certificate\n                 Handling\", RFC 2632,\
    \ June 1999.\n   [RFC2633]     Ramsdell, B., Ed., \"S/MIME Version 3 Message\n\
    \                 Specification\", RFC 2633, June 1999.\n   [RFC3850]     Ramsdell,\
    \ B., Ed., \"Secure/Multipurpose Internet Mail\n                 Extensions (S/MIME)\
    \ Version 3.1 Certificate Handling\",\n                 RFC 3850, July 2004.\n\
    \   [RFC3851]     Ramsdell, B., Ed., \"Secure/Multipurpose Internet Mail\n   \
    \              Extensions (S/MIME) Version 3.1 Message Specification\",\n    \
    \             RFC 3851, July 2004.\n   [RFC3852]     Housley, R., \"Cryptographic\
    \ Message Syntax (CMS)\", RFC\n                 3852, July 2004.\n   [SP800-57]\
    \    National Institute of Standards and Technology (NIST),\n                \
    \ Special Publication 800-57: Recommendation for Key\n                 Management,\
    \ August 2005.\n   [STRENGTH]    Orman, H., and P. Hoffman, \"Determining Strengths\
    \ For\n                 Public Keys Used For Exchanging Symmetric Keys\", BCP\n\
    \                 86, RFC 3766, April 2004.\n"
- title: Appendix A.  ASN.1 Module
  contents:
  - "Appendix A.  ASN.1 Module\n   Note: The ASN.1 module contained herein is unchanged\
    \ from RFC 3851\n   [SMIMEv3.1] with the exception of a change to the prefersBinaryInside\n\
    \   ASN.1 comment.  This module uses the 1988 version of ASN.1.\n   SecureMimeMessageV3dot1\n\
    \     { iso(1) member-body(2) us(840) rsadsi(113549)\n            pkcs(1) pkcs-9(9)\
    \ smime(16) modules(0) msg-v3dot1(21) }\n   DEFINITIONS IMPLICIT TAGS ::=\n  \
    \ BEGIN\n   IMPORTS\n   -- Cryptographic Message Syntax [CMS]\n      SubjectKeyIdentifier,\
    \ IssuerAndSerialNumber,\n      RecipientKeyIdentifier\n          FROM  CryptographicMessageSyntax\n\
    \                { iso(1) member-body(2) us(840) rsadsi(113549)\n            \
    \      pkcs(1) pkcs-9(9) smime(16) modules(0) cms-2001(14) };\n   --  id-aa is\
    \ the arc with all new authenticated and unauthenticated\n   --  attributes produced\
    \ by the S/MIME Working Group\n   id-aa OBJECT IDENTIFIER ::= {iso(1) member-body(2)\
    \ usa(840)\n           rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) attributes(2)}\n\
    \   -- S/MIME Capabilities provides a method of broadcasting the\n   -- symmetric\
    \ capabilities understood.  Algorithms SHOULD be ordered\n   -- by preference\
    \ and grouped by type\n   smimeCapabilities OBJECT IDENTIFIER ::= {iso(1) member-body(2)\n\
    \           us(840) rsadsi(113549) pkcs(1) pkcs-9(9) 15}\n   SMIMECapability ::=\
    \ SEQUENCE {\n      capabilityID OBJECT IDENTIFIER,\n      parameters ANY DEFINED\
    \ BY capabilityID OPTIONAL }\n   SMIMECapabilities ::= SEQUENCE OF SMIMECapability\n\
    \   -- Encryption Key Preference provides a method of broadcasting the\n   --\
    \ preferred encryption certificate.\n   id-aa-encrypKeyPref OBJECT IDENTIFIER\
    \ ::= {id-aa 11}\n   SMIMEEncryptionKeyPreference ::= CHOICE {\n      issuerAndSerialNumber\
    \   [0] IssuerAndSerialNumber,\n      receipentKeyId          [1] RecipientKeyIdentifier,\n\
    \      subjectAltKeyIdentifier [2] SubjectKeyIdentifier\n   }\n   -- receipentKeyId\
    \ is spelt incorrectly, but kept for historical\n   -- reasons.\n   id-smime OBJECT\
    \ IDENTIFIER ::= { iso(1) member-body(2) us(840)\n           rsadsi(113549) pkcs(1)\
    \ pkcs9(9) 16 }\n   id-cap  OBJECT IDENTIFIER ::= { id-smime 11 }\n   -- The preferBinaryInside\
    \ OID indicates an ability to receive\n   -- messages with binary encoding inside\
    \ the CMS wrapper.\n   -- The preferBinaryInside attribute's value field is ABSENT.\n\
    \   id-cap-preferBinaryInside  OBJECT IDENTIFIER ::= { id-cap 1 }\n   --  The\
    \ following list OIDs to be used with S/MIME V3\n   -- Signature Algorithms Not\
    \ Found in [CMSALG], [CMS-SHA2], [RSAPSS],\n   -- and [RSAOAEP]\n   --\n   --\
    \ md2WithRSAEncryption OBJECT IDENTIFIER ::=\n   --    {iso(1) member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1) pkcs-1(1)\n   --     2}\n   --\n   -- Other Signed\
    \ Attributes\n   --\n   -- signingTime OBJECT IDENTIFIER ::=\n   --    {iso(1)\
    \ member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n   --     5}\n   --\
    \    See [CMS] for a description of how to encode the attribute\n   --    value.\n\
    \   SMIMECapabilitiesParametersForRC2CBC ::= INTEGER\n   --        (RC2 Key Length\
    \ (number of bits))\n   END\n"
- title: Appendix B.  Moving S/MIME v2 Message Specification to Historic Status
  contents:
  - "Appendix B.  Moving S/MIME v2 Message Specification to Historic Status\n   The\
    \ S/MIME v3 [SMIMEv3], v3.1 [SMIMEv3.1], and v3.2 (this document)\n   are backwards\
    \ compatible with the S/MIME v2 Message Specification\n   [SMIMEv2], with the\
    \ exception of the algorithms (dropped RC2/40\n   requirement and added DSA and\
    \ RSASSA-PSS requirements).  Therefore,\n   it is recommended that RFC 2311 [SMIMEv2]\
    \ be moved to Historic\n   status.\n"
- title: Appendix C.  Acknowledgments
  contents:
  - "Appendix C.  Acknowledgments\n   Many thanks go out to the other authors of the\
    \ S/MIME version 2\n   Message Specification RFC: Steve Dusse, Paul Hoffman, Laurence\n\
    \   Lundblade, and Lisa Repka.  Without v2, there wouldn't be a v3, v3.1,\n  \
    \ or v3.2.\n   A number of the members of the S/MIME Working Group have also worked\n\
    \   very hard and contributed to this document.  Any list of people is\n   doomed\
    \ to omission, and for that I apologize.  In alphabetical order,\n   the following\
    \ people stand out in my mind because they made direct\n   contributions to this\
    \ document:\n   Tony Capel, Piers Chivers, Dave Crocker, Bill Flanigan, Peter\n\
    \   Gutmann, Alfred Hoenes, Paul Hoffman, Russ Housley, William Ottaway,\n   John\
    \ Pawling, and Jim Schaad.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Blake Ramsdell\n   Brute Squad Labs, Inc.\n   EMail: blaker@gmail.com\n\
    \   Sean Turner\n   IECA, Inc.\n   3057 Nutley Street, Suite 106\n   Fairfax,\
    \ VA 22031\n   USA\n   EMail: turners@ieca.com\n"
