- title: __initial_text__
  contents:
  - '        Multicast Listener Discovery Version 2 (MLDv2) for IPv6

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document updates RFC 2710, and it specifies Version 2 of the\n\
    \   Multicast Listener Discovery Protocol (MLDv2).  MLD is used by an\n   IPv6\
    \ router to discover the presence of multicast listeners on\n   directly attached\
    \ links, and to discover which multicast addresses\n   are of interest to those\
    \ neighboring nodes.  MLDv2 is designed to be\n   interoperable with MLDv1.  MLDv2\
    \ adds the ability for a node to\n   report interest in listening to packets with\
    \ a particular multicast\n   address only from specific source addresses or from\
    \ all sources\n   except for specific source addresses.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction. . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Protocol Overview . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  The Service Interface for Requesting IP Multicast Reception\
    \ .   9\n   4.  Multicast Listening State Maintained by Nodes . . . . . . . .\
    \  11\n   5.  Message Formats . . . . . . . . . . . . . . . . . . . . . . .  13\n\
    \   6.  Protocol Description for Multicast Address Listeners. . . . .  27\n  \
    \ 7.  Protocol Description for Multicast Routers. . . . . . . . . .  34\n   8.\
    \  Interoperation with MLDv1 . . . . . . . . . . . . . . . . . .  48\n   9.  List\
    \ of Timers, Counters, and their Default Values. . . . . .  51\n   10. Security\
    \ Considerations . . . . . . . . . . . . . . . . . . .  55\n   11. IANA Considerations\
    \ . . . . . . . . . . . . . . . . . . . . .  56\n   12. References. . . . . .\
    \ . . . . . . . . . . . . . . . . . . . .  56\n   13. Acknowledgments . . . .\
    \ . . . . . . . . . . . . . . . . . . .  57\n   Appendix A. Design Rationale.\
    \ . . . . . . . . . . . . . . . . . .  58\n   Appendix B. Summary of Changes from\
    \ MLDv1 . . . . . . . . . . . .  59\n   Editors' Contact Information. . . . .\
    \ . . . . . . . . . . . . . .  61\n   Authors' Addresses. . . . . . . . . . .\
    \ . . . . . . . . . . . . .  61\n   Full Copyright Statement. . . . . . . . .\
    \ . . . . . . . . . . . .  62\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Multicast Listener Discovery Protocol (MLD) is used\
    \ by IPv6\n   routers to discover the presence of multicast listeners (i.e., nodes\n\
    \   that wish to receive multicast packets) on their directly attached\n   links,\
    \ and to discover specifically which multicast addresses are of\n   interest to\
    \ those neighboring nodes.  Note that a multicast router\n   may itself be a listener\
    \ of one or more multicast addresses; in this\n   case it performs both the \"\
    multicast router part\" and the \"multicast\n   address listener part\" of the\
    \ protocol, to collect the multicast\n   listener information needed by its multicast\
    \ routing protocol on the\n   one hand, and to inform itself and other neighboring\
    \ multicast\n   routers of its listening state on the other hand.\n   This document\
    \ specifies Version 2 of MLD.  The previous version of\n   MLD is specified in\
    \ [RFC2710].  In this document we will refer to it\n   as MLDv1.  MLDv2 is a translation\
    \ of the IGMPv3 protocol [RFC3376]\n   for IPv6 semantics.\n   The MLDv2 protocol,\
    \ when compared to MLDv1, adds support for \"source\n   filtering\", i.e., the\
    \ ability for a node to report interest in\n   listening to packets *only* from\
    \ specific source addresses, as\n   required to support Source-Specific Multicast\
    \ [RFC3569], or from *all\n   but* specific source addresses, sent to a particular\
    \ multicast\n   address.  MLDv2 is designed to be interoperable with MLDv1.\n\
    \   The capitalized key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    ,\n   \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\n\
    \   \"OPTIONAL\" in this document are to be interpreted as described in\n   [RFC2119].\
    \  Due to the lack of italics, emphasis is indicated herein\n   by bracketing\
    \ a word or phrase in \"*\" characters.  Furthermore,\n   square brackets are\
    \ used to denote the value of the enclosed\n   variable, as opposed to the variable\
    \ itself, written without\n   brackets.\n"
- title: 2.  Protocol Overview
  contents:
  - "2.  Protocol Overview\n   This section gives a brief description of the protocol\
    \ operation. The\n   following sections present the protocol details.\n   MLD\
    \ is an asymmetric protocol; it specifies separate behaviors for\n   multicast\
    \ address listeners (i.e., hosts or routers that listen to\n   multicast packets)\
    \ and multicast routers.  The purpose of MLD is to\n   enable each multicast router\
    \ to learn, for each of its directly\n   attached links, which multicast addresses\
    \ and which sources have\n   interested listeners on that link.  The information\
    \ gathered by MLD\n   is provided to whichever multicast routing protocol is used\
    \ by the\n   router, in order to ensure that multicast packets are delivered to\n\
    \   all links where there are listeners interested in such packets.\n   Multicast\
    \ routers only need to know that *at least one* node on an\n   attached link is\
    \ listening to packets for a particular multicast\n   address, from a particular\
    \ source; a multicast router is not required\n   to *individually* keep track\
    \ of the interests of each neighboring\n   node.  (Nevertheless, see Appendix\
    \ A2 item 1 for discussion.)\n   A multicast router performs the *router part*\
    \ of the MLDv2 protocol\n   (described in details in section 7) on each of its\
    \ directly attached\n   links.  If a multicast router has more than one interface\
    \ connected\n   to the same link, it only needs to operate the protocol on one\
    \ of\n   those interfaces.  The router behavior depends on whether there are\n\
    \   several multicast routers on the same subnet, or not.  If that is the\n  \
    \ case, a querier election mechanism (described in section 7.6.2) is\n   used\
    \ to elect a single multicast router to be in Querier state.  This\n   router\
    \ is called the Querier.  All multicast routers on the subnet\n   listen to the\
    \ messages sent by multicast address listeners, and\n   maintain the same multicast\
    \ listening information state, so that they\n   can take over the querier role,\
    \ should the present Querier fail.\n   Nevertheless, only the Querier sends periodical\
    \ or triggered query\n   messages on the subnet, as described in section 7.1.\n\
    \   A multicast address listener performs the *listener part* of the\n   MLDv2\
    \ protocol (described in details in section 6) on all interfaces\n   on which\
    \ multicast reception is supported, even if more than one of\n   those interfaces\
    \ are connected to the same link.\n"
- title: 2.1.  Building Multicast Listening State on Multicast Address Listeners
  contents:
  - "2.1.  Building Multicast Listening State on Multicast Address Listeners\n   Upper-layer\
    \ protocols and applications that run on a multicast\n   address listener node\
    \ use specific service interface calls (described\n   in section 3) to ask the\
    \ IP layer to enable or disable reception of\n   packets sent to specific multicast\
    \ addresses.  The node keeps\n   Multicast Address Listening state for each socket\
    \ on which the\n   service interface calls have been invoked (section 4.1).  In\
    \ addition\n   to this per-socket multicast listening state, a node must also\n\
    \   maintain or compute multicast listening state for each of its\n   interfaces\
    \ (section 4.2).  Conceptually, that state consists of a set\n   of records, with\
    \ each record containing an IPv6 multicast address, a\n   filter mode, and a source\
    \ list.  The filter mode may be either\n   INCLUDE or EXCLUDE.  In INCLUDE mode,\
    \ reception of packets sent to\n   the specified multicast address is enabled\
    \ *only* from the source\n   addresses listed in the source list.  In EXCLUDE\
    \ mode, reception of\n   packets sent to the given multicast address is enabled\
    \ from all\n   source addresses *except* those listed in the source list.\n  \
    \ At most one record per multicast address exists for a given\n   interface. \
    \ This per-interface state is derived from the per-socket\n   state, but may differ\
    \ from it when different sockets have differing\n   filter modes and/or source\
    \ lists for the same multicast address and\n   interface.  After a multicast packet\
    \ has been accepted from an\n   interface by the IP layer, its subsequent delivery\
    \ to the application\n   connected to a particular socket depends on the multicast\
    \ listening\n   state of that socket (and possibly also on other conditions, such\
    \ as\n   what transport-layer port the socket is bound to).  Note that MLDv2\n\
    \   messages are not subject to source filtering and must always be\n   processed\
    \ by hosts and routers.\n"
- title: 2.2.  Exchanging Messages between the Querier and the Listening Nodes
  contents:
  - "2.2.  Exchanging Messages between the Querier and the Listening Nodes\n   There\
    \ are three types of MLDv2 query messages: General Queries,\n   Multicast Address\
    \ Specific Queries, and Multicast Address and Source\n   Specific Queries.  The\
    \ Querier periodically sends General Queries, to\n   learn multicast address listener\
    \ information from an attached link.\n   These queries are used to build and refresh\
    \ the Multicast Address\n   Listener state inside all multicast routers on the\
    \ link.\n   Nodes respond to these queries by reporting their per-interface\n\
    \   Multicast Address Listening state, through Current State Report\n   messages\
    \ sent to a specific multicast address all MLDv2 routers on\n   the link listen\
    \ to.  On the other hand, if the listening state of a\n   node changes, the node\
    \ immediately reports these changes through a\n   State Change Report message.\
    \  The State Change Report contains either\n   Filter Mode Change records, Source\
    \ List Change records, or records of\n   both types.  A detailed description of\
    \ the report messages is\n   presented in section 5.2.12.\n   Both router and\
    \ listener state changes are mainly triggered by the\n   expiration of a specific\
    \ timer, or the reception of an MLD message\n   (listener state change can be\
    \ also triggered by the invocation of a\n   service interface call).  Therefore,\
    \ to enhance protocol robustness,\n   in spite of the possible unreliability of\
    \ message exchanges, messages\n   are retransmitted several times.  Furthermore,\
    \ timers are set so as\n   to take into account the possible message losses, and\
    \ to wait for\n   retransmissions.\n   Periodical General Queries and Current\
    \ State Reports do not apply\n   this rule, in order not to overload the link;\
    \ it is assumed that in\n   general these messages do not generate state changes,\
    \ their main\n   purpose being to refresh existing state.  Thus, even if one such\n\
    \   message is lost, the corresponding state will be refreshed during the\n  \
    \ next reporting period.\n   As opposed to Current State Reports, State Change\
    \ Reports are\n   retransmitted several times, in order to avoid them being missed\
    \ by\n   one or more multicast routers.  The number of retransmissions depends\n\
    \   on the so-called Robustness Variable.  This variable allows tuning\n   the\
    \ protocol according to the expected packet loss on a link.  If a\n   link is\
    \ expected to be lossy (e.g., a wireless connection), the value\n   of the Robustness\
    \ Variable may be increased.  MLD is robust to\n   [Robustness Variable]-1 packet\
    \ losses.  This document recommends a\n   default value of 2 for the Robustness\
    \ Variable (see section 9.1).\n   If more changes to the same per-interface state\
    \ entry occur before\n   all the retransmissions of the State Change Report for\
    \ the first\n   change have been completed, each additional change triggers the\n\
    \   immediate transmission of a new State Change Report.  Section 6.1\n   shows\
    \ how the content of this new report is computed. Retransmissions\n   of the new\
    \ State Change Report will be scheduled as well, in order to\n   ensure that each\
    \ instance of state change is transmitted at least\n   [Robustness Variable] times.\n\
    \   If a node on a link expresses, through a State Change Report, its\n   desire\
    \ to no longer listen to a particular multicast address (or\n   source),  the\
    \ Querier must query for other listeners of the multicast\n   address (or source)\
    \ before deleting the multicast address (or source)\n   from its Multicast Address\
    \ Listener state and stopping the\n   corresponding traffic.  Thus, the Querier\
    \ sends a Multicast Address\n   Specific Query to verify whether there are nodes\
    \ still listening to a\n   specified multicast address or not.  Similarly, the\
    \ Querier sends a\n   Multicast Address and Source Specific Query to verify whether,\
    \ for a\n   specified multicast address, there are nodes still listening to a\n\
    \   specific set of sources, or not.  Section 5.1.13 describes each query\n  \
    \ in more detail.\n   Both Multicast Address Specific Queries and Multicast Address\
    \ and\n   Source Specific Queries are only sent in response to State Change\n\
    \   Reports, never in response to Current State Reports.  This\n   distinction\
    \ between the two types of reports is needed to avoid the\n   router treating\
    \ all Multicast Listener Reports as potential changes\n   in state.  By doing\
    \ so, the fast leave mechanism of MLDv2, described\n   in more detail in section\
    \ 2.2, might not be effective if a State\n   Change Report is lost, and only the\
    \ following Current State Report is\n   received by the router.  Nevertheless,\
    \ it avoids an increased\n   processing at the router and it reduces the MLD traffic\
    \ on the link.\n   More details on the necessity of distinguishing between the\
    \ two\n   report types can be found in Appendix A1.\n   Nodes respond to the above\
    \ queries through Current State Reports,\n   that contain their per-interface\
    \ Multicast Address Listening state\n   only for the multicast addresses (or sources)\
    \ being queried.\n   As stated earlier, in order to ensure protocol robustness,\
    \ all the\n   queries, except the periodical General Queries, are retransmitted\n\
    \   several times within a given time interval.  The number of\n   retransmissions\
    \ depends on the Robustness Variable.  If, while\n   scheduling new queries, there\
    \ are pending queries to be retransmitted\n   for the same multicast address,\
    \ the new queries and the pending\n   queries have to be merged.  In addition,\
    \ host reports received for a\n   multicast address with pending queries may affect\
    \ the contents of\n   those queries.  The process of building and maintaining\
    \ the state of\n   pending queries is presented in section 7.6.3.\n   Protocol\
    \ robustness is also enhanced through the use of the S flag\n   (Suppress Router-Side\
    \ Processing).  As described above, when a\n   Multicast Address Specific or a\
    \ Multicast Address and Source Specific\n   Query is sent by the Querier, a number\
    \ of retransmissions of the\n   query are scheduled.  In the original (first)\
    \ query the S flag is\n   clear.  When the Querier sends this query, it lowers\
    \ the timers for\n   the concerned multicast address (or source) to a given value;\n\
    \   similarly, any non-querier multicast router that receives the query\n   lowers\
    \ its timers in the same way.  Nevertheless, while waiting for\n   the next scheduled\
    \ queries to be sent, the Querier may receive a\n   report that updates the timers.\
    \  The scheduled queries still have to\n   be sent, in order to ensure that a\
    \ non-querier router keeps its state\n   synchronized with the current Querier\
    \ (the non-querier router might\n   have missed the first query).  Nevertheless,\
    \ the timers should not be\n   lowered again, as a valid answer was already received.\
    \  Therefore, in\n   subsequent queries the Querier sets the S flag.\n"
- title: 2.3.  Building Multicast Address Listener State on Multicast Routers
  contents:
  - "2.3.  Building Multicast Address Listener State on Multicast Routers\n   Multicast\
    \ routers that implement MLDv2 (whether they are in Querier\n   state or not)\
    \ keep state per multicast address per attached link.\n   This multicast address\
    \ listener state consists of a Filter Mode, a\n   Filter Timer, and a Source List,\
    \ with a timer associated to each\n   source from the list.  The Filter Mode is\
    \ used to summarize the total\n   listening state of a multicast address to a\
    \ minimum set, such that\n   all nodes' listening states are respected.  The Filter\
    \ Mode may\n   change in response to the reception of particular types of report\n\
    \   messages, or when certain timer conditions occur.\n   A router is in INCLUDE\
    \ mode for a specific multicast address on a\n   given interface if all the listeners\
    \ on the link interested in that\n   address are in INCLUDE mode.  The router\
    \ state is represented through\n   the notation INCLUDE (A), where A is a list\
    \ of sources, called the\n   \"Include List\".  The Include List is the set of\
    \ sources that one or\n   more listeners on the link have requested to receive.\
    \  All the\n   sources from the Include List will be forwarded by the router.\
    \  Any\n   other source that is not in the Include List will be blocked by the\n\
    \   router.\n   A source can be added to the current Include List if a listener\
    \ in\n   INCLUDE mode sends a Current State or a State Change Report that\n  \
    \ includes that source.  Each source from the Include List is\n   associated with\
    \ a source timer that is updated whenever a listener in\n   INCLUDE mode sends\
    \ a report that confirms its interest in that\n   specific source.  If the timer\
    \ of a source from the Include List\n   expires, the source is deleted from the\
    \ Include List.\n   Besides this \"soft leave\" mechanism, there is also a \"\
    fast leave\"\n   scheme in MLDv2; it is also based on the use of source timers.\
    \  When\n   a node in INCLUDE mode expresses its desire to stop listening to a\n\
    \   specific source, all the multicast routers on the link lower their\n   timers\
    \ for that source to a given value.  The Querier then sends a\n   Multicast Address\
    \ and Source Specific Query, to verify whether there\n   are other listeners for\
    \ that source on the link, or not.  If a report\n   that includes this source\
    \ is received before the timer expiration,\n   all the multicast routers on the\
    \ link update the source timer.  If\n   not, the source is deleted from the Include\
    \ List.  The handling of\n   the Include List, according to the received reports,\
    \ is detailed in\n   Tables 7.4.1 and 7.4.2.\n   A router is in EXCLUDE mode for\
    \ a specific multicast address on a\n   given interface if there is at least one\
    \ listener in EXCLUDE mode for\n   that address on the link.  When the first report\
    \ is received from\n   such a listener, the router sets the Filter Timer that\
    \ corresponds to\n   that address.  This timer is reset each time an EXCLUDE mode\
    \ listener\n   confirms its listening state through a Current State Report.  The\n\
    \   timer is also updated when a listener, formerly in INCLUDE mode,\n   announces\
    \ its filter mode change through a State Change Report\n   message.  If the Filter\
    \ Timer expires, it means that there are no\n   more listeners in EXCLUDE mode\
    \ on the link.  In this case, the router\n   switches back to INCLUDE mode for\
    \ that multicast address.\n   When the router is in EXCLUDE mode, the router state\
    \ is represented\n   by the notation EXCLUDE (X,Y), where X is called the \"Requested\
    \ List\"\n   and Y is called the \"Exclude List\".  All sources, except those\
    \ from\n   the Exclude List, will be forwarded by the router.  The Requested\n\
    \   List has no effect on forwarding.  Nevertheless, the router has to\n   maintain\
    \ the Requested List for two reasons:\n   o  To keep track of sources that listeners\
    \ in INCLUDE mode listen to.\n      This is necessary to assure a seamless transition\
    \ of the router to\n      INCLUDE mode, when there is no listener in EXCLUDE mode\
    \ left.\n      This transition should not interrupt the flow of traffic to\n \
    \     listeners in INCLUDE mode for that multicast address.  Therefore,\n    \
    \  at the time of the transition, the Requested List should contain\n      the\
    \ set of sources that nodes in INCLUDE mode have explicitly\n      requested.\n\
    \      When the router switches to INCLUDE mode, the sources in the\n      Requested\
    \ List are moved to the Include List, and the Exclude List\n      is deleted.\
    \  Before switching, the Requested List can contain an\n      inexact guess of\
    \ the sources listeners in INCLUDE mode listen to -\n      might be too large\
    \ or too small.  These inexactitudes are due to\n      the fact that the Requested\
    \ List is also used for fast blocking\n      purposes, as described below.  If\
    \ such a fast blocking is\n      required, some sources may be deleted from the\
    \ Requested List (as\n      shown in Tables 7.4.1 and 7.4.2) in order to reduce\
    \ router state.\n      Nevertheless, in each such case the Filter Timer is updated\
    \ as\n      well.  Therefore, listeners in INCLUDE mode will have enough time,\n\
    \      before an eventual switching, to reconfirm their interest in the\n    \
    \  eliminated source(s), and rebuild the Requested List accordingly.\n      The\
    \ protocol ensures that when a switch to INCLUDE mode occurs,\n      the Requested\
    \ List will be accurate.  Details about the transition\n      of the router to\
    \ INCLUDE mode are presented in Appendix A3.\n   o  To allow the fast blocking\
    \ of previously unblocked sources.  If\n      the router receives a report that\
    \ contains such a request, the\n      concerned sources are added to the Requested\
    \ List.  Their timers\n      are set to a given small value, and a Multicast Address\
    \ and Source\n      Specific Query is sent by the Querier, to check whether there\
    \ are\n      nodes on the link still interested in those sources, or not.  If\n\
    \      no node announces its interest in receiving those specific source,\n  \
    \    the timers of those sources expire.  Then, the sources are moved\n      from\
    \ the Requested List to the Exclude List.  From then on, the\n      sources will\
    \ be blocked by the router.\n   The handling of the EXCLUDE mode router state,\
    \ according to the\n   received reports, is detailed in Tables 7.4.1 and 7.4.2.\n\
    \   Both the MLDv2 router and listener behaviors described in this\n   document\
    \ were defined to ensure backward interoperability with MLDv1\n   hosts and routers.\
    \  Interoperability issues are detailed in section\n   8.\n"
- title: 3.  The Service Interface for Requesting IP Multicast Reception
  contents:
  - "3.  The Service Interface for Requesting IP Multicast Reception\n   Within an\
    \ IP system, there is (at least conceptually) a service\n   interface used by\
    \ upper-layer protocols or application programs to\n   ask the IP layer to enable\
    \ or disable reception of packets sent to\n   specific IP multicast addresses.\
    \  In order to take full advantage of\n   the capabilities of MLDv2, a node's\
    \ IP service interface must support\n   the following operation:\n      IPv6MulticastListen\
    \ ( socket, interface, IPv6 multicast address,\n      filter mode, source list\
    \ )\n      where:\n   o  \"socket\" is an implementation-specific parameter used\
    \ to\n      distinguish among different requesting entities (e.g., programs,\n\
    \      processes) within the node; the socket parameter of BSD Unix\n      system\
    \ calls is a specific example.\n   o  \"interface\" is a local identifier of the\
    \ network interface on\n      which reception of the specified multicast address\
    \ is to be\n      enabled or disabled.  Interfaces may be physical (e.g., an\n\
    \      Ethernet interface) or virtual (e.g., the endpoint of a Frame\n      Relay\
    \ virtual circuit or an IP-in-IP \"tunnel\").  An implementation\n      may allow\
    \ a special \"unspecified\" value to be passed as the\n      interface parameter,\
    \ in which case the request would apply to the\n      \"primary\" or \"default\"\
    \ interface of the node (perhaps established\n      by system configuration).\
    \  If reception of the same multicast\n      address is desired on more than one\
    \ interface, IPv6MulticastListen\n      is invoked separately for each desired\
    \ interface.\n   o  \"IPv6 multicast address\" is the multicast address to which\
    \ the\n      request pertains.  If reception of more than one multicast address\n\
    \      on a given interface is desired, IPv6MulticastListen is invoked\n     \
    \ separately for each desired address.\n   o  \"filter mode\" may be either INCLUDE\
    \ or EXCLUDE.  In INCLUDE mode,\n      reception of packets sent to the specified\
    \ multicast address is\n      requested *only* from the source addresses listed\
    \ in the source\n      list parameter.  In EXCLUDE mode, reception of packets\
    \ sent to the\n      given multicast address is requested from all source addresses\n\
    \      *except* those listed in the source list parameter.\n   o  \"source list\"\
    \ is an unordered list of zero or more unicast\n      addresses from which multicast\
    \ reception is desired or not\n      desired, depending on the filter mode.  An\
    \ implementation MAY\n      impose a limit on the size of source lists.  When\
    \ an operation\n      causes the source list size limit to be exceeded, the service\n\
    \      interface SHOULD return an error.\n   For a given combination of socket,\
    \ interface, and IPv6 multicast\n   address, only a single filter mode and source\
    \ list can be in effect\n   at any one time.  Nevertheless, either the filter\
    \ mode or the source\n   list, or both, may be changed by subsequent IPv6MulticastListen\n\
    \   requests that specify the same socket, interface, and IPv6 multicast\n   address.\
    \  Each subsequent request completely replaces any earlier\n   request for the\
    \ given socket, interface, and multicast address.\n   The MLDv1 protocol did not\
    \ support source filters, and had a simpler\n   service interface; it consisted\
    \ of Start Listening and Stop Listening\n   operations to enable and disable listening\
    \ to a given multicast\n   address (from *all* sources) on a given interface.\
    \  The equivalent\n   operations in the new service interface are as follows:\n\
    \   The Start Listening operation is equivalent to:\n      IPv6MulticastListen\
    \ ( socket, interface, IPv6 multicast address,\n                            EXCLUDE,\
    \ {} )\n   and the Stop Listening operation is equivalent to:\n      IPv6MulticastListen\
    \ ( socket, interface, IPv6 multicast address,\n                            INCLUDE,\
    \ {} )\n   where {} is an empty source list.\n   An example of an API that provides\
    \ the capabilities outlined in this\n   service interface is given in [RFC3678].\n"
- title: 4.  Multicast Listening State Maintained by Nodes
  contents:
  - '4.  Multicast Listening State Maintained by Nodes

    '
- title: 4.1.  Per-Socket State
  contents:
  - "4.1.  Per-Socket State\n   For each socket on which IPv6MulticastListen has been\
    \ invoked, the\n   node records the desired multicast listening state for that\
    \ socket.\n   That state conceptually consists of a set of records of the form:\n\
    \   (interface, IPv6 multicast address, filter mode, source list)\n   The per-socket\
    \ state evolves in response to each invocation of\n   IPv6MulticastListen on the\
    \ socket, as follows:\n   o  If the requested filter mode is INCLUDE *and* the\
    \ requested source\n      list is empty, then the entry that corresponds to the\
    \ requested\n      interface and multicast address is deleted, if present.  If\
    \ no\n      such entry is present, the request has no effect.\n   o  If the requested\
    \ filter mode is EXCLUDE *or* the requested source\n      list is non-empty, then\
    \ the entry that corresponds to the\n      requested interface and multicast address,\
    \ if present, is changed\n      to contain the requested filter mode and source\
    \ list.  If no such\n      entry is present, a new entry is created, using the\
    \ parameters\n      specified in the request.\n"
- title: 4.2.  Per-Interface State
  contents:
  - "4.2.  Per-Interface State\n   In addition to the per-socket multicast listening\
    \ state, a node must\n   also maintain or compute multicast listening state for\
    \ each of its\n   interfaces.  That state conceptually consists of a set of records\
    \ of\n   the form:\n      (IPv6 multicast address, filter mode, source list)\n\
    \   At most one record per multicast address exists for a given\n   interface.\
    \  This per-interface state is derived from the per-socket\n   state, but may\
    \ differ from it when different sockets have differing\n   filter modes and/or\
    \ source lists for the same multicast address and\n   interface.  For example,\
    \ suppose one application or process invokes\n   the following operation on socket\
    \ s1:\n      IPv6MulticastListen ( s1, i, m, INCLUDE, {a, b, c} )\n   requesting\
    \ reception on interface i of packets sent to multicast\n   address m, *only*\
    \ if they come from the sources a, b, or c.  Suppose\n   another application or\
    \ process invokes the following operation on\n   socket s2:\n      IPv6MulticastListen\
    \ ( s2, i, m, INCLUDE, {b, c, d} )\n   requesting reception on the same interface\
    \ i of packets sent to the\n   same multicast address m, *only* if they come from\
    \ sources b, c, or\n   d.  In order to satisfy the reception requirements of both\
    \ sockets,\n   it is necessary for interface i to receive packets sent to m from\
    \ any\n   one of the sources a, b, c, or d.  Thus, in this example, the\n   listening\
    \ state of interface i for multicast address m has filter\n   mode INCLUDE and\
    \ source list {a, b, c, d}.\n   After a multicast packet has been accepted from\
    \ an interface by the\n   IP layer, its subsequent delivery to the application\
    \ or process that\n   listens on a particular socket depends on the multicast\
    \ listening\n   state of that socket (and possibly also on other conditions, such\
    \ as\n   what transport-layer port the socket is bound to).  So, in the above\n\
    \   example, if a packet arrives on interface i, destined to multicast\n   address\
    \ m, with source address a, it may be delivered on socket s1\n   but not on socket\
    \ s2.  Note that MLDv2 messages are not subject to\n   source filtering and must\
    \ always be processed by hosts and routers.\n   Requiring the filtering of packets\
    \ based upon a socket's multicast\n   reception state is a new feature of this\
    \ service interface.  The\n   previous service interface described no filtering\
    \ based upon\n   multicast listening state; rather, a Start Listening operation\
    \ on a\n   socket simply caused the node to start to listen to a multicast\n \
    \  address on the given interface; packets sent to that multicast\n   address\
    \ could be delivered to all sockets, whether they had started\n   to listen or\
    \ not.\n   The general rules for deriving the per-interface state from the per-\n\
    \   socket state are as follows:  for each distinct (interface, IPv6\n   multicast\
    \ address) pair that appears in any per-socket state, a per-\n   interface record\
    \ is created for that multicast address on that\n   interface.  Considering all\
    \ socket records that contain the same\n   (interface, IPv6 multicast address)\
    \ pair,\n   o  if *any* such record has a filter mode of EXCLUDE, then the filter\n\
    \      mode of the interface record is EXCLUDE, and the source list of\n     \
    \ the interface record is the intersection of the source lists of\n      all socket\
    \ records in EXCLUDE mode, minus those source addresses\n      that appear in\
    \ any socket record in INCLUDE mode.  For example, if\n      the socket records\
    \ for multicast address m on interface i are:\n         from socket s1:  ( i,\
    \ m, EXCLUDE, {a, b, c, d} )\n         from socket s2:  ( i, m, EXCLUDE, {b, c,\
    \ d, e} )\n         from socket s3:  ( i, m, INCLUDE, {d, e, f} )\n      then\
    \ the corresponding interface record on interface i is:\n         ( m, EXCLUDE,\
    \ {b, c} )\n      If a fourth socket is added, such as:\n         From socket\
    \ s4:  ( i, m, EXCLUDE, {} )\n      then the interface record becomes:\n     \
    \    ( m, EXCLUDE, {} )\n   o  if *all* such records have a filter mode of INCLUDE,\
    \ then the\n      filter mode of the interface record is INCLUDE, and the source\n\
    \      list of the interface record is the union of the source lists of\n    \
    \  all the socket records.  For example, if the socket records for\n      multicast\
    \ address m on interface i are:\n         from socket s1:  ( i, m, INCLUDE, {a,\
    \ b, c} )\n         from socket s2:  ( i, m, INCLUDE, {b, c, d} )\n         from\
    \ socket s3:  ( i, m, INCLUDE, {e, f} )\n      then the corresponding interface\
    \ record on interface i is:\n         ( m, INCLUDE, {a, b, c, d, e, f} )\n   An\
    \ implementation MUST NOT use an EXCLUDE interface record for a\n   multicast\
    \ address if all sockets for this multicast address are in\n   INCLUDE state.\
    \  If system resource limits are reached when a per-\n   interface state source\
    \ list is calculated, an error MUST be returned\n   to the application which requested\
    \ the operation.\n   The above rules for deriving the per-interface state are\n\
    \   (re)evaluated whenever an IPv6MulticastListen invocation modifies the\n  \
    \ per-socket state by adding, deleting, or modifying a per-socket state\n   record.\
    \  Note that a change of the per-socket state does not\n   necessarily result\
    \ in a change of the per-interface state.\n"
- title: 5.  Message Formats
  contents:
  - "5.  Message Formats\n   MLDv2 is a sub-protocol of ICMPv6, that is, MLDv2 message\
    \ types are a\n   subset of ICMPv6 messages, and MLDv2 messages are identified\
    \ in IPv6\n   packets by a preceding Next Header value of 58.  All MLDv2 messages\n\
    \   described in this document MUST be sent with a link-local IPv6 Source\n  \
    \ Address, an IPv6 Hop Limit of 1, and an IPv6 Router Alert option\n   [RFC2711]\
    \ in a Hop-by-Hop Options header.  (The Router Alert option\n   is necessary to\
    \ cause routers to examine MLDv2 messages sent to IPv6\n   multicast addresses\
    \ in which the routers themselves have no\n   interest.)  MLDv2 Reports can be\
    \ sent with the source address set to\n   the unspecified address [RFC3513], if\
    \ a valid link-local IPv6 source\n   address has not been acquired yet for the\
    \ sending interface.  (See\n   section 5.2.13. for details.)\n   There are two\
    \ MLD message types of concern to the MLDv2 protocol\n   described in this document:\n\
    \   o  Multicast Listener Query (Type = decimal 130)\n   o  Version 2 Multicast\
    \ Listener Report (Type = decimal 143).  See\n      section 11 for IANA considerations.\n\
    \   To assure the interoperability with nodes that implement MLDv1 (see\n   section\
    \ 8), an implementation of MLDv2 must also support the\n   following two message\
    \ types:\n   o  Version 1 Multicast Listener Report (Type = decimal 131) [RFC2710]\n\
    \   o  Version 1 Multicast Listener Done (Type = decimal 132) [RFC2710]\n   Unrecognized\
    \ message types MUST be silently ignored.  Other message\n   types may be used\
    \ by newer versions or extensions of MLD, by\n   multicast routing protocols,\
    \ or for other uses.\n   In this document, unless otherwise qualified, the capitalized\
    \ words\n   \"Query\" and \"Report\" refer to MLD Multicast Listener Queries and\
    \ MLD\n   Version 2 Multicast Listener Reports, respectively.\n"
- title: 5.1.  Multicast Listener Query Message
  contents:
  - "5.1.  Multicast Listener Query Message\n   Multicast Listener Queries are sent\
    \ by multicast routers in Querier\n   State to query the multicast listening state\
    \ of neighboring\n   interfaces.  Queries have the following format:\n     0 \
    \                  1                   2                   3\n     0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Type = 130   |      Code     |           Checksum            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |    Maximum Response Code      |           Reserved            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    *\
    \                                                               *\n    |     \
    \                                                          |\n    *          \
    \             Multicast Address                       *\n    |               \
    \                                                |\n    *                    \
    \                                           *\n    |                         \
    \                                      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | Resv  |S| QRV |     QQIC      |     Number of Sources (N)     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    *\
    \                                                               *\n    |     \
    \                                                          |\n    *          \
    \             Source Address [1]                      *\n    |               \
    \                                                |\n    *                    \
    \                                           *\n    |                         \
    \                                      |\n    +-                             \
    \                                -+\n    |                                   \
    \                            |\n    *                                        \
    \                       *\n    |                                             \
    \                  |\n    *                       Source Address [2]         \
    \             *\n    |                                                       \
    \        |\n    *                                                            \
    \   *\n    |                                                               |\n\
    \    +-                              .                              -+\n    .\
    \                               .                               .\n    .     \
    \                          .                               .\n    +-         \
    \                                                    -+\n    |               \
    \                                                |\n    *                    \
    \                                           *\n    |                         \
    \                                      |\n    *                       Source Address\
    \ [N]                      *\n    |                                          \
    \                     |\n    *                                               \
    \                *\n    |                                                    \
    \           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 5.1.1.  Code
  contents:
  - "5.1.1.  Code\n   Initialized to zero by the sender; ignored by receivers.\n"
- title: 5.1.2.  Checksum
  contents:
  - "5.1.2.  Checksum\n   The standard ICMPv6 checksum; it covers the entire MLDv2\
    \ message,\n   plus a \"pseudo-header\" of IPv6 header fields [RFC2463].  For\n\
    \   computing the checksum, the Checksum field is set to zero.  When a\n   packet\
    \ is received, the checksum MUST be verified before processing\n   it.\n"
- title: 5.1.3.  Maximum Response Code
  contents:
  - "5.1.3.  Maximum Response Code\n   The Maximum Response Code field specifies the\
    \ maximum time allowed\n   before sending a responding Report.  The actual time\
    \ allowed, called\n   the Maximum Response Delay, is represented in units of milliseconds,\n\
    \   and is derived from the Maximum Response Code as follows:\n   If Maximum Response\
    \ Code < 32768,\n      Maximum Response Delay = Maximum Response Code\n   If Maximum\
    \ Response Code >=32768, Maximum Response Code represents a\n   floating-point\
    \ value as follows:\n       0 1 2 3 4 5 6 7 8 9 A B C D E F\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |1| exp |          mant         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Maximum Response Delay = (mant | 0x1000) << (exp+3)\n   Small values of Maximum\
    \ Response Delay allow MLDv2 routers to tune\n   the \"leave latency\" (the time\
    \ between the moment the last node on a\n   link ceases to listen to a specific\
    \ multicast address and the moment\n   the routing protocol is notified that there\
    \ are no more listeners for\n   that address).  Larger values, especially in the\
    \ exponential range,\n   allow the tuning of the burstiness of MLD traffic on\
    \ a link.\n"
- title: 5.1.4.  Reserved
  contents:
  - "5.1.4.  Reserved\n   Initialized to zero by the sender; ignored by receivers.\n"
- title: 5.1.5.  Multicast Address
  contents:
  - "5.1.5.  Multicast Address\n   For a General Query, the Multicast Address field\
    \ is set to zero.  For\n   a Multicast Address Specific Query or Multicast Address\
    \ and Source\n   Specific Query, it is set to the multicast address being queried\
    \ (see\n   section 5.1.10, below).\n"
- title: 5.1.7.  S Flag (Suppress Router-Side Processing)
  contents:
  - "5.1.7.  S Flag (Suppress Router-Side Processing)\n   When set to one, the S Flag\
    \ indicates to any receiving multicast\n   routers that they have to suppress\
    \ the normal timer updates they\n   perform upon hearing a Query.  Nevertheless,\
    \ it does not suppress the\n   querier election or the normal \"host-side\" processing\
    \ of a Query that\n   a router may be required to perform as a consequence of\
    \ itself being\n   a multicast listener.\n"
- title: 5.1.8.  QRV (Querier's Robustness Variable)
  contents:
  - "5.1.8.  QRV (Querier's Robustness Variable)\n   If non-zero, the QRV field contains\
    \ the [Robustness Variable] value\n   used by the Querier.  If the Querier's [Robustness\
    \ Variable] exceeds\n   7 (the maximum value of the QRV field), the QRV field\
    \ is set to zero.\n   Routers adopt the QRV value from the most recently received\
    \ Query as\n   their own [Robustness Variable] value, unless that most recently\n\
    \   received QRV was zero, in which case they use the default [Robustness\n  \
    \ Variable] value specified in section 9.1, or a statically configured\n   value.\n"
- title: 5.1.9.  QQIC (Querier's Query Interval Code)
  contents:
  - "5.1.9.  QQIC (Querier's Query Interval Code)\n   The Querier's Query Interval\
    \ Code field specifies the [Query\n   Interval] used by the Querier.  The actual\
    \ interval, called the\n   Querier's Query Interval (QQI), is represented in units\
    \ of seconds,\n   and is derived from the Querier's Query Interval Code as follows:\n\
    \   If QQIC < 128, QQI = QQIC\n   If QQIC >= 128, QQIC represents a floating-point\
    \ value as follows:\n       0 1 2 3 4 5 6 7\n      +-+-+-+-+-+-+-+-+\n      |1|\
    \ exp | mant  |\n      +-+-+-+-+-+-+-+-+\n   QQI = (mant | 0x10) << (exp + 3)\n\
    \   Multicast routers that are not the current Querier adopt the QQI\n   value\
    \ from the most recently received Query as their own [Query\n   Interval] value,\
    \ unless that most recently received QQI was zero, in\n   which case the receiving\
    \ routers use the default [Query Interval]\n   value specified in section 9.2.\n"
- title: 5.1.10.  Number of Sources (N)
  contents:
  - "5.1.10.  Number of Sources (N)\n   The Number of Sources (N) field specifies\
    \ how many source addresses\n   are present in the Query.  This number is zero\
    \ in a General Query or\n   a Multicast Address Specific Query, and non-zero in\
    \ a Multicast\n   Address and Source Specific Query.  This number is limited by\
    \ the MTU\n   of the link over which the Query is transmitted.  For example, on\
    \ an\n   Ethernet link with an MTU of 1500 octets, the IPv6 header (40 octets)\n\
    \   together with the Hop-By-Hop Extension Header (8 octets) that\n   includes\
    \ the Router Alert option consume 48 octets; the MLD fields up\n   to the Number\
    \ of Sources (N) field consume 28 octets; thus, there are\n   1424 octets left\
    \ for source addresses, which limits the number of\n   source addresses to 89\
    \ (1424/16).\n"
- title: 5.1.11.  Source Address [i]
  contents:
  - "5.1.11.  Source Address [i]\n   The Source Address [i] fields are a vector of\
    \ n unicast addresses,\n   where n is the value in the Number of Sources (N) field.\n"
- title: 5.1.12.  Additional Data
  contents:
  - "5.1.12.  Additional Data\n   If the Payload Length field in the IPv6 header of\
    \ a received Query\n   indicates that there are additional octets of data present,\
    \ beyond\n   the fields described here, MLDv2 implementations MUST include those\n\
    \   octets in the computation to verify the received MLD Checksum, but\n   MUST\
    \ otherwise ignore those additional octets.  When sending a Query,\n   an MLDv2\
    \ implementation MUST NOT include additional octets beyond the\n   fields described\
    \ above.\n"
- title: 5.1.13.  Query Variants
  contents:
  - "5.1.13.  Query Variants\n   There are three variants of the Query message:\n\
    \   o  A \"General Query\" is sent by the Querier to learn which multicast\n \
    \     addresses have listeners on an attached link.  In a General Query,\n   \
    \   both the Multicast Address field and the Number of Sources (N)\n      field\
    \ are zero.\n   o  A \"Multicast Address Specific Query\" is sent by the Querier\
    \ to\n      learn if a particular multicast address has any listeners on an\n\
    \      attached link.  In a Multicast Address Specific Query, the\n      Multicast\
    \ Address field contains the multicast address of\n      interest, while the Number\
    \ of Sources (N) field is set to zero.\n   o  A \"Multicast Address and Source\
    \ Specific Query\" is sent by the\n      Querier to learn if any of the sources\
    \ from the specified list for\n      the particular multicast address has any\
    \ listeners on an attached\n      link or not.  In a Multicast Address and Source\
    \ Specific Query the\n      Multicast Address field contains the multicast address\
    \ of\n      interest, while the Source Address [i] field(s) contain(s) the\n \
    \     source address(es) of interest.\n"
- title: 5.1.14.  Source Addresses for Queries
  contents:
  - "5.1.14.  Source Addresses for Queries\n   All MLDv2 Queries MUST be sent with\
    \ a valid IPv6 link-local source\n   address.  If a node (router or host) receives\
    \ a Query message with\n   the IPv6 Source Address set to the unspecified address\
    \ (::), or any\n   other address that is not a valid IPv6 link-local address,\
    \ it MUST\n   silently discard the message and SHOULD log a warning.\n"
- title: 5.1.15.  Destination Addresses for Queries
  contents:
  - "5.1.15.  Destination Addresses for Queries\n   In MLDv2, General Queries are\
    \ sent to the link-scope all-nodes\n   multicast address (FF02::1).  Multicast\
    \ Address Specific and\n   Multicast Address and Source Specific Queries are sent\
    \ with an IP\n   destination address equal to the multicast address of interest.\n\
    \   *However*, a node MUST accept and process any Query whose IP\n   Destination\
    \ Address field contains *any* of the addresses (unicast or\n   multicast) assigned\
    \ to the interface on which the Query arrives. This\n   might be useful, e.g.,\
    \ for debugging purposes.\n"
- title: 5.2.  Version 2 Multicast Listener Report Message
  contents:
  - "5.2.  Version 2 Multicast Listener Report Message\n   Version 2 Multicast Listener\
    \ Reports are sent by IP nodes to report\n   (to neighboring routers) the current\
    \ multicast listening state, or\n   changes in the multicast listening state,\
    \ of their interfaces.\n   Reports have the following format:\n     0        \
    \           1                   2                   3\n     0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Type = 143   |    Reserved   |           Checksum            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |           Reserved            |Nr of Mcast Address Records (M)|\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    .\
    \                                                               .\n    .     \
    \             Multicast Address Record [1]                 .\n    .          \
    \                                                     .\n    |               \
    \                                                |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    .\
    \                                                               .\n    .     \
    \             Multicast Address Record [2]                 .\n    .          \
    \                                                     .\n    |               \
    \                                                |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                               .                               |\n    .\
    \                               .                               .\n    |     \
    \                          .                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    .\
    \                                                               .\n    .     \
    \             Multicast Address Record [M]                 .\n    .          \
    \                                                     .\n    |               \
    \                                                |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Each Multicast Address Record has the following internal format:\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Record Type  |  Aux Data Len |     Number of Sources (N)     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    *\
    \                                                               *\n    |     \
    \                                                          |\n    *          \
    \             Multicast Address                       *\n    |               \
    \                                                |\n    *                    \
    \                                           *\n    |                         \
    \                                      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    *\
    \                                                               *\n    |     \
    \                                                          |\n    *          \
    \             Source Address [1]                      *\n    |               \
    \                                                |\n    *                    \
    \                                           *\n    |                         \
    \                                      |\n    +-                             \
    \                                -+\n    |                                   \
    \                            |\n    *                                        \
    \                       *\n    |                                             \
    \                  |\n    *                       Source Address [2]         \
    \             *\n    |                                                       \
    \        |\n    *                                                            \
    \   *\n    |                                                               |\n\
    \    +-                                                             -+\n    .\
    \                               .                               .\n    .     \
    \                          .                               .\n    .          \
    \                     .                               .\n    +-              \
    \                                               -+\n    |                    \
    \                                           |\n    *                         \
    \                                      *\n    |                              \
    \                                 |\n    *                       Source Address\
    \ [N]                      *\n    |                                          \
    \                     |\n    *                                               \
    \                *\n    |                                                    \
    \           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    .\
    \                                                               .\n    .     \
    \                    Auxiliary Data                        .\n    .          \
    \                                                     .\n    |               \
    \                                                |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 5.2.1.  Reserved
  contents:
  - "5.2.1.  Reserved\n   The Reserved fields are set to zero on transmission, and\
    \ ignored on\n   reception.\n"
- title: 5.2.2.  Checksum
  contents:
  - "5.2.2.  Checksum\n   The standard ICMPv6 checksum; it covers the entire MLDv2\
    \ message,\n   plus a \"pseudo-header\" of IPv6 header fields [RFC2460, RFC2463].\
    \  In\n   order to compute the checksum, the Checksum field is set to zero.\n\
    \   When a packet is received, the checksum MUST be verified before\n   processing\
    \ it.\n"
- title: 5.2.3.  Nr of Mcast Address Records (M)
  contents:
  - "5.2.3.  Nr of Mcast Address Records (M)\n   The Nr of Mcast Address Records (M)\
    \ field specifies how many\n   Multicast Address Records are present in this Report.\n"
- title: 5.2.4.  Multicast Address Record
  contents:
  - "5.2.4.  Multicast Address Record\n   Each Multicast Address Record is a block\
    \ of fields that contain\n   information on the sender listening to a single multicast\
    \ address on\n   the interface from which the Report is sent.\n"
- title: 5.2.5.  Record Type
  contents:
  - "5.2.5.  Record Type\n   It specifies the type of the Multicast Address Record.\
    \  See section\n   5.2.12 for a detailed description of the different possible\
    \ Record\n   Types.\n"
- title: 5.2.6.  Aux Data Len
  contents:
  - "5.2.6.  Aux Data Len\n   The Aux Data Len field contains the length of the Auxiliary\
    \ Data\n   Field in this Multicast Address Record, in units of 32-bit words. \
    \ It\n   may contain zero, to indicate the absence of any auxiliary data.\n"
- title: 5.2.7.  Number of Sources (N)
  contents:
  - "5.2.7.  Number of Sources (N)\n   The Number of Sources (N) field specifies how\
    \ many source addresses\n   are present in this Multicast Address Record.\n"
- title: 5.2.8.  Multicast Address
  contents:
  - "5.2.8.  Multicast Address\n   The Multicast Address field contains the multicast\
    \ address to which\n   this Multicast Address Record pertains.\n"
- title: 5.2.9.  Source Address [i]
  contents:
  - "5.2.9.  Source Address [i]\n   The Source Address [i] fields are a vector of\
    \ n unicast addresses,\n   where n is the value in this record's Number of Sources\
    \ (N) field.\n"
- title: 5.2.10.  Auxiliary Data
  contents:
  - "5.2.10.  Auxiliary Data\n   The Auxiliary Data field, if present, contains additional\
    \ information\n   that pertain to this Multicast Address Record.  The protocol\n\
    \   specified in this document, MLDv2, does not define any auxiliary\n   data.\
    \  Therefore, implementations of MLDv2 MUST NOT include any\n   auxiliary data\
    \ (i.e., MUST set the Aux Data Len field to zero) in any\n   transmitted Multicast\
    \ Address Record, and MUST ignore any such data\n   present in any received Multicast\
    \ Address Record.  The semantics and\n   the internal encoding of the Auxiliary\
    \ Data field are to be defined\n   by any future version or extension of MLD that\
    \ uses this field.\n"
- title: 5.2.11.  Additional Data
  contents:
  - "5.2.11.  Additional Data\n   If the Payload Length field in the IPv6 header of\
    \ a received Report\n   indicates that there are additional octets of data present,\
    \ beyond\n   the last Multicast Address Record, MLDv2 implementations MUST include\n\
    \   those octets in the computation to verify the received MLD Checksum,\n   but\
    \ MUST otherwise ignore those additional octets.  When sending a\n   Report, an\
    \ MLDv2 implementation MUST NOT include additional octets\n   beyond the last\
    \ Multicast Address Record.\n"
- title: 5.2.12.  Multicast Address Record Types
  contents:
  - "5.2.12.  Multicast Address Record Types\n   There are a number of different types\
    \ of Multicast Address Records\n   that may be included in a Report message:\n\
    \   o  A \"Current State Record\" is sent by a node in response to a Query\n \
    \     received on an interface.  It reports the current listening state\n    \
    \  of that interface, with respect to a single multicast address.\n      The Record\
    \ Type of a Current State Record may be one of the\n      following two values:\n\
    \      Value  Name and Meaning\n      -----  ----------------\n        1    MODE_IS_INCLUDE\
    \ - indicates that the interface has a filter\n             mode of INCLUDE for\
    \ the specified multicast address.  The\n             Source Address [i] fields\
    \ in this Multicast Address Record\n             contain the interface's source\
    \ list for the specified\n             multicast address.  A MODE_IS_INCLUDE Record\
    \ is never sent\n             with an empty source list.\n        2    MODE_IS_EXCLUDE\
    \ - indicates that the interface has a filter\n             mode of EXCLUDE for\
    \ the specified multicast address.  The\n             Source Address [i] fields\
    \ in this Multicast Address Record\n             contain the interface's source\
    \ list for the specified\n             multicast address, if it is non-empty.\n\
    \   o  A \"Filter Mode Change Record\" is sent by a node whenever a local\n  \
    \    invocation of IPv6MulticastListen causes a change of the filter\n      mode\
    \ (i.e., a change from INCLUDE to EXCLUDE, or from EXCLUDE to\n      INCLUDE)\
    \ of the interface-level state entry for a particular\n      multicast address,\
    \ whether the source list changes at the same\n      time or not.  The Record\
    \ is included in a Report sent from the\n      interface on which the change occurred.\
    \  The Record Type of a\n      Filter Mode Change Record may be one of the following\
    \ two values:\n      3    CHANGE_TO_INCLUDE_MODE - indicates that the interface\
    \ has\n           changed to INCLUDE filter mode for the specified multicast\n\
    \           address.  The Source Address [i] fields in this Multicast\n      \
    \     Address Record contain the interface's new source list for\n           the\
    \ specified multicast address, if it is non-empty.\n      4    CHANGE_TO_EXCLUDE_MODE\
    \ - indicates that the interface has\n           changed to EXCLUDE filter mode\
    \ for the specified multicast\n           address.  The Source Address [i] fields\
    \ in this Multicast\n           Address Record contain the interface's new source\
    \ list for\n           the specified multicast address, if it is non-empty.\n\
    \   o  A \"Source List Change Record\" is sent by a node whenever a local\n  \
    \    invocation of IPv6MulticastListen causes a change of source list\n      that\
    \ is *not* coincident with a change of filter mode, of the\n      interface-level\
    \ state entry for a particular multicast address.\n      The Record is included\
    \ in a Report sent from the interface on\n      which the change occurred.  The\
    \ Record Type of a Source List\n      Change Record may be one of the following\
    \ two values:\n      5    ALLOW_NEW_SOURCES - indicates that the Source Address\
    \ [i]\n           fields in this Multicast Address Record contain a list of\n\
    \           the additional sources that the node wishes to listen to,\n      \
    \     for packets sent to the specified multicast address.  If\n           the\
    \ change was to an INCLUDE source list, these are the\n           addresses that\
    \ were added to the list; if the change was to\n           an EXCLUDE source list,\
    \ these are the addresses that were\n           deleted from the list.\n     \
    \ 6    BLOCK_OLD_SOURCES - indicates that the Source Address [i]\n           fields\
    \ in this Multicast Address Record contain a list of\n           the sources that\
    \ the node no longer wishes to listen to,\n           for packets sent to the\
    \ specified multicast address.  If the\n           change was to an INCLUDE source\
    \ list, these are the\n           addresses that were deleted from the list; if\
    \ the change\n           was to an EXCLUDE source list, these are the addresses\
    \ that\n           were added to the list.\n   If a change of source list results\
    \ in both allowing new sources and\n   blocking old sources, then two Multicast\
    \ Address Records are sent for\n   the same multicast address, one of type ALLOW_NEW_SOURCES\
    \ and one of\n   type BLOCK_OLD_SOURCES.\n   We use the term \"State Change Record\"\
    \ to refer to either a Filter\n   Mode Change Record or a Source List Change Record.\n\
    \   Multicast Address Records with an unrecognized Record Type value MUST\n  \
    \ be silently ignored, with the rest of the report being processed.\n   In the\
    \ rest of this document, we use the following notation to\n   describe the contents\
    \ of a Multicast Address Record that pertains to\n   a particular multicast address:\n\
    \      IS_IN ( x )  -  Type MODE_IS_INCLUDE, source addresses x\n      IS_EX (\
    \ x )  -  Type MODE_IS_EXCLUDE, source addresses x\n      TO_IN ( x )  -  Type\
    \ CHANGE_TO_INCLUDE_MODE, source addresses x\n      TO_EX ( x )  -  Type CHANGE_TO_EXCLUDE_MODE,\
    \ source addresses x\n      ALLOW ( x )  -  Type ALLOW_NEW_SOURCES, source addresses\
    \ x\n      BLOCK ( x )  -  Type BLOCK_OLD_SOURCES, source addresses x\n      where\
    \ x is either:\n   o  a capital letter (e.g., \"A\") to represent the set of source\n\
    \      addresses,\n      or\n   o  a set expression (e.g., \"A+B\"), where \"\
    A+B\" means the union of\n      sets A and B,  \"A*B\" means the intersection\
    \ of sets A and B, and\n      \"A-B\" means the removal of all elements of set\
    \ B from set A.\n"
- title: 5.2.13.  Source Addresses for Reports
  contents:
  - "5.2.13.  Source Addresses for Reports\n   An MLDv2 Report MUST be sent with a\
    \ valid IPv6 link-local source\n   address, or the unspecified address (::), if\
    \ the sending interface\n   has not acquired a valid link-local address yet. \
    \ Sending reports\n   with the unspecified address is allowed to support the use\
    \ of IP\n   multicast in the Neighbor Discovery Protocol [RFC2461].  For\n   stateless\
    \ autoconfiguration, as defined in [RFC2462], a node is\n   required to join several\
    \ IPv6 multicast groups, in order to perform\n   Duplicate Address Detection (DAD).\
    \  Prior to DAD, the only address\n   the reporting node has for the sending interface\
    \ is a tentative one,\n   which cannot be used for communication.  Thus, the unspecified\n\
    \   address must be used.\n   On the other hand, routers MUST silently discard\
    \ a message that is\n   not sent with a valid link-local address, without taking\
    \ any action\n   on the contents of the packet.  Thus, a Report is discarded if\
    \ the\n   router cannot identify the source address of the packet as belonging\n\
    \   to a link connected to the interface on which the packet was\n   received.\
    \  A Report sent with the unspecified address is also\n   discarded by the router.\
    \  This enhances security, as unidentified\n   reporting nodes cannot influence\
    \ the state of the MLDv2 router(s).\n   Nevertheless, the reporting node has modified\
    \ its listening state for\n   multicast addresses that are contained in the Multicast\
    \ Address\n   Records of the Report message.  From now on, it will treat packets\n\
    \   sent to those multicast addresses according to this new listening\n   state.\
    \  Once a valid link-local address is available, a node SHOULD\n   generate new\
    \ MLDv2 Report messages for all multicast addresses joined\n   on the interface.\n"
- title: 5.2.14.  Destination Addresses for Reports
  contents:
  - "5.2.14.  Destination Addresses for Reports\n   Version 2 Multicast Listener Reports\
    \ are sent with an IP destination\n   address of FF02:0:0:0:0:0:0:16, to which\
    \ all MLDv2-capable multicast\n   routers listen (see section 11 for IANA considerations\
    \ related to\n   this special destination address).  A node that operates in version\
    \ 1\n   compatibility mode (see details in section 8) sends version 1 Reports\n\
    \   to the multicast address specified in the Multicast Address field of\n   the\
    \ Report.  In addition, a node MUST accept and process any version\n   1 Report\
    \ whose IP Destination Address field contains *any* of the\n   IPv6 addresses\
    \ (unicast or multicast) assigned to the interface on\n   which the Report arrives.\
    \  This might be useful, e.g., for debugging\n   purposes.\n"
- title: 5.2.15.  Multicast Listener Report Size
  contents:
  - "5.2.15.  Multicast Listener Report Size\n   If the set of Multicast Address Records\
    \ required in a Report does not\n   fit within the size limit of a single Report\
    \ message (as determined\n   by the MTU of the link on which it will be sent),\
    \ the Multicast\n   Address Records are sent in as many Report messages as needed\
    \ to\n   report the entire set.\n   If a single Multicast Address Record contains\
    \ so many source\n   addresses that it does not fit within the size limit of a\
    \ single\n   Report message, then:\n   o  if its Type is not IS_EX or TO_EX, it\
    \ is split into multiple\n      Multicast Address Records; each such record contains\
    \ a different\n      subset of the source addresses, and is sent in a separate\
    \ Report.\n   o  if its Type is IS_EX or TO_EX, a single Multicast Address Record\n\
    \      is sent, with as many source addresses as can fit; the remaining\n    \
    \  source addresses are not reported.  Although the choice of which\n      sources\
    \ to report is arbitrary, it is preferable to report the\n      same set of sources\
    \ in each subsequent report, rather than\n      reporting different sources each\
    \ time.\n"
- title: 6.  Protocol Description for Multicast Address Listeners
  contents:
  - "6.  Protocol Description for Multicast Address Listeners\n   MLD is an asymmetric\
    \ protocol, as it specifies separate behaviors for\n   multicast address listeners\
    \ -- that is, hosts or routers that listen\n   to multicast packets -- and multicast\
    \ routers.  This section\n   describes the part of MLDv2 that applies to all multicast\
    \ address\n   listeners.  (Note that a multicast router that is also a multicast\n\
    \   address listener performs both parts of MLDv2; it receives and it\n   responds\
    \ to its own MLD messages, as well as to those of its\n   neighbors.)  The multicast\
    \ router part of MLDv2 is described in\n   section 7.\n   A node performs the\
    \ protocol described in this section over all\n   interfaces on which multicast\
    \ reception is supported, even if more\n   than one of those interfaces are connected\
    \ to the same link.\n   For interoperability with multicast routers that run the\
    \ MLDv1\n   protocol, nodes maintain a Host Compatibility Mode variable for each\n\
    \   interface on which multicast reception is supported.  This section\n   describes\
    \ the behavior of multicast address listener nodes on\n   interfaces for which\
    \ Host Compatibility Mode = MLDv2.  The algorithm\n   for determining Host Compatibility\
    \ Mode, and the behavior if its\n   value is set to MLDv1, are described in section\
    \ 8.\n   The link-scope all-nodes multicast address, (FF02::1), is handled as\n\
    \   a special case.  On all nodes -- that is all hosts and routers,\n   including\
    \ multicast routers -- listening to packets destined to the\n   all-nodes multicast\
    \ address, from all sources, is permanently enabled\n   on all interfaces on which\
    \ multicast listening is supported.  No MLD\n   messages are ever sent regarding\
    \ neither the link-scope all-nodes\n   multicast address, nor any multicast address\
    \ of scope 0 (reserved) or\n   1 (node-local).\n   There are three types of events\
    \ that trigger MLDv2 protocol actions\n   on an interface:\n   o  a change of\
    \ the per-interface listening state, caused by a local\n      invocation of IPv6MulticastListen;\n\
    \   o  the firing of a specific timer;\n   o  the reception of a Query.\n   (Received\
    \ MLD messages of types other than Query are silently\n   ignored, except as required\
    \ for interoperation with nodes that\n   implement MLDv1.)\n   The following subsections\
    \ describe the actions to be taken for each\n   case.  Timer and counter names\
    \ appear in square brackets.  Default\n   values for those timers and counters\
    \ are specified in section 9.\n"
- title: 6.1.  Action on Change of Per-Interface State
  contents:
  - "6.1.  Action on Change of Per-Interface State\n   An invocation of IPv6MulticastListen\
    \ may cause the multicast\n   listening state of an interface to change, according\
    \ to the rules in\n   section 4.2.  Each such change affects the per-interface\
    \ entry for a\n   single multicast address.\n   A change of per-interface state\
    \ causes the node to immediately\n   transmit a State Change Report from that\
    \ interface.  The type and\n   contents of the Multicast Address Record(s) in\
    \ that Report are\n   determined by comparing the filter mode and source list\
    \ for the\n   affected multicast address before and after the change, according\
    \ to\n   the table below.  If no per-interface state existed for that\n   multicast\
    \ address before the change (i.e., the change consisted of\n   creating a new\
    \ per-interface record), or if no state exists after the\n   change (i.e., the\
    \ change consisted of deleting a per-interface\n   record), then the \"non-existent\"\
    \ state is considered to have an\n   INCLUDE filter mode and an empty source list.\n\
    \   Old State         New State         State Change Record Sent\n   ---------\
    \         ---------         ------------------------\n   INCLUDE (A)       INCLUDE\
    \ (B)       ALLOW (B-A), BLOCK (A-B)\n   EXCLUDE (A)       EXCLUDE (B)       ALLOW\
    \ (A-B), BLOCK (B-A)\n   INCLUDE (A)       EXCLUDE (B)       TO_EX (B)\n   EXCLUDE\
    \ (A)       INCLUDE (B)       TO_IN (B)\n   If the computed source list for either\
    \ an ALLOW or a BLOCK State\n   Change Record is empty, that record is omitted\
    \ from the Report.\n   To cover the possibility of the State Change Report being\
    \ missed by\n   one or more multicast routers, [Robustness Variable] - 1\n   retransmissions\
    \ are scheduled, through a Retransmission Timer, at\n   intervals chosen at random\
    \ from the range (0, [Unsolicited Report\n   Interval]).\n   If more changes to\
    \ the same per-interface state entry occur before\n   all the retransmissions\
    \ of the State Change Report for the first\n   change have been completed, each\
    \ such additional change triggers the\n   immediate transmission of a new State\
    \ Change Report.\n   The contents of the new Report are calculated as follows:\n\
    \   o  As for the first Report, the per-interface state for the affected\n   \
    \   multicast address before and after the latest change is compared.\n   o  The\
    \ records that express the difference are built according to the\n      table\
    \ above.  Nevertheless, these records are not transmitted in a\n      separate\
    \ message, but they are instead merged with the contents of\n      the pending\
    \ report, to create the new State Change Report.  The\n      rules for calculating\
    \ this merged report are described below.\n   The transmission of the merged State\
    \ Change Report terminates\n   retransmissions of the earlier State Change Reports\
    \ for the same\n   multicast address, and becomes the first of [Robustness Variable]\n\
    \   transmissions of the new State Change Reports.  These transmissions\n   are\
    \ necessary in order to ensure that each instance of state change\n   is transmitted\
    \ at least [Robustness Variable] times.\n   Each time a source is included in\
    \ the difference report calculated\n   above, retransmission state for that source\
    \ needs to be maintained\n   until [Robustness Variable] State Change Reports\
    \ have been sent by\n   the node.  This is done in order to ensure that a series\
    \ of\n   successive state changes do not break the protocol robustness.\n   Sources\
    \ in retransmission state can be kept in a per multicast\n   address Retransmission\
    \ List, with a Source Retransmission Counter\n   associated to each source in\
    \ the list.  When a source is included in\n   the list, its counter is set to\
    \ [Robustness Variable].  Each time a\n   State Change Report is sent the counter\
    \ is decreased by one unit.\n   When the counter reaches zero, the source is deleted\
    \ from the\n   Retransmission List for that multicast address.\n   If the per-interface\
    \ listening change that triggers the new report is\n   a filter mode change, then\
    \ the next [Robustness Variable] State\n   Change Reports will include a Filter\
    \ Mode Change Record.  This\n   applies even if any number of source list changes\
    \ occur in that\n   period.  The node has to maintain retransmission state for\
    \ the\n   multicast address until the [Robustness Variable] State Change\n   Reports\
    \ have been sent. This can be done through a per multicast\n   address Filter\
    \ Mode Retransmission Counter.  When the filter mode\n   changes, the counter\
    \ is set to [Robustness Variable].  Each time a\n   State Change Report is sent\
    \ the counter is decreased by one unit.\n   When the counter reaches zero, i.e.,\
    \ [Robustness Variable] State\n   Change Reports with Filter Mode Change Records\
    \ have been transmitted\n   after the last filter mode change, and if source list\
    \ changes have\n   resulted in additional reports being scheduled, then the next\
    \ State\n   Change Report will include Source List Change Records.\n   Each time\
    \ a per-interface listening state change triggers the\n   Immediate transmission\
    \ of a new State Change Report, its contents are\n   determined as follows.  If\
    \ the report should contain a Filter Mode\n   Change Record, i.e., the Filter\
    \ Mode Retransmission Counter for that\n   multicast address has a value higher\
    \ than zero, then, if the current\n   filter mode of the interface is INCLUDE,\
    \ a TO_IN record is included\n   in the report; otherwise a TO_EX record is included.\
    \  If instead the\n   report should contain Source List Change Records, i.e.,\
    \ the Filter\n   Mode Retransmission Counter for that multicast address is zero,\
    \ an\n   ALLOW and a BLOCK record is included.  The contents of these records\n\
    \   are built according to the table below.\n   Record   Sources included\n  \
    \ ------   ----------------\n   TO_IN    All in the current per-interface state\
    \ that must be\n            forwarded\n   TO_EX    All in the current per-interface\
    \ state that must be\n            blocked\n   ALLOW    All with retransmission\
    \ state (i.e., all sources from the\n            Retransmission List) that must\
    \ be forwarded\n   BLOCK    All with retransmission state that must be blocked\n\
    \   If the computed source list for either an ALLOW or a BLOCK record is\n   empty,\
    \ that record is omitted from the State Change Report.\n   Note:  When the first\
    \ State Change Report is sent, the non-existent\n   pending report to merge with\
    \ can be treated as a Source Change Report\n   with empty ALLOW and BLOCK records\
    \ (no sources have retransmission\n   state).\n   The building of a scheduled\
    \ State Change Report, triggered by the\n   firing of a Retransmission Timer,\
    \ instead of a per-interface\n   listening state change, is described in section\
    \ 6.3.\n"
- title: 6.2.  Action on Reception of a Query
  contents:
  - "6.2.  Action on Reception of a Query\n   Upon reception of an MLD message that\
    \ contains a Query, the node\n   checks if the source address of the message is\
    \ a valid link-local\n   address, if the Hop Limit is set to 1, and if the Router\
    \ Alert option\n   is present in the Hop-By-Hop Options header of the IPv6 packet.\
    \  If\n   any of these checks fails, the packet is dropped.\n   If the validity\
    \ of the MLD message is verified, the node starts to\n   process the Query.  Instead\
    \ of responding immediately, the node\n   delays its response by a random amount\
    \ of time, bounded by the\n   Maximum Response Delay value derived from the Maximum\
    \ Response Code\n   in the received Query message.  A node may receive a variety\
    \ of\n   Queries on different interfaces and of different kinds (e.g., General\n\
    \   Queries, Multicast Address Specific Queries, and Multicast Address\n   and\
    \ Source Specific Queries), each of which may require its own\n   delayed response.\n\
    \   Before scheduling a response to a Query, the node must first consider\n  \
    \ previously scheduled pending responses and, in many cases, schedule a\n   combined\
    \ response.  Therefore, for each of its interfaces on which it\n   operates the\
    \ listener part of the MLDv2 protocol, the node must be\n   able to maintain the\
    \ following state:\n   o  an Interface Timer for scheduling responses to General\
    \ Queries;\n   o  a Multicast Address Timer for scheduling responses to Multicast\n\
    \      Address (and Source) Specific Queries, for each multicast address\n   \
    \   the node has to report on;\n   o  a per-multicast-address list of sources\
    \ to be reported in response\n      to a Multicast Address and Source Specific\
    \ Query.\n   When a new valid General Query arrives on an interface, the node\n\
    \   checks whether it has any per-interface listening state record to\n   report\
    \ on, or not.  Similarly, when a new valid Multicast Address\n   (and Source)\
    \ Specific Query arrives on an interface, the node checks\n   whether it has a\
    \ per-interface listening state record that\n   corresponds to the queried multicast\
    \ address (and source), or not. If\n   it does, a delay for a response is randomly\
    \ selected in the range (0,\n   [Maximum Response Delay]), where Maximum Response\
    \ Delay is derived\n   from the Maximum Response Code inserted in the received\
    \ Query\n   message.  The following rules are then used to determine if a Report\n\
    \   needs to be scheduled or not, and the type of Report to schedule.\n   (The\
    \ rules are considered in order and only the first matching rule\n   is applied.)\n\
    \   1. If there is a pending response to a previous General Query\n      scheduled\
    \ sooner than the selected delay, no additional response\n      needs to be scheduled.\n\
    \   2. If the received Query is a General Query, the Interface Timer is\n    \
    \  used to schedule a response to the General Query after the\n      selected\
    \ delay.  Any previously pending response to a General\n      Query is canceled.\n\
    \   3. If the received Query is a Multicast Address Specific Query or a\n    \
    \  Multicast Address and Source Specific Query and there is no\n      pending\
    \ response to a previous Query for this multicast address,\n      then the Multicast\
    \ Address Timer is used to schedule a report.  If\n      the received Query is\
    \ a Multicast Address and Source Specific\n      Query, the list of queried sources\
    \ is recorded to be used when\n      generating a response.\n   4. If there is\
    \ already a pending response to a previous Query\n      scheduled for this multicast\
    \ address, and either the new Query is\n      a Multicast Address Specific Query\
    \ or the recorded source list\n      associated with the multicast address is\
    \ empty, then the multicast\n      address source list is cleared and a single\
    \ response is scheduled,\n      using the Multicast Address Timer.  The new response\
    \ is scheduled\n      to be sent at the earliest of the remaining time for the\
    \ pending\n      report and the selected delay.\n   5. If the received Query is\
    \ a Multicast Address and Source Specific\n      Query and there is a pending\
    \ response for this multicast address\n      with a non-empty source list, then\
    \ the multicast address source\n      list is augmented to contain the list of\
    \ sources in the new Query,\n      and a single response is scheduled using the\
    \ Multicast Address\n      Timer.  The new response is scheduled to be sent at\
    \ the earliest\n      of the remaining time for the pending report and the selected\n\
    \      delay.\n"
- title: 6.3.  Action on Timer Expiration
  contents:
  - "6.3.  Action on Timer Expiration\n   There are several timers that, upon expiration,\
    \ trigger protocol\n   actions on an MLDv2 Multicast Address Listener node.  All\
    \ these\n   actions are related to pending reports scheduled by the node.\n  \
    \ 1. If the expired timer is the Interface Timer (i.e., there is a\n      pending\
    \ response to a General Query), then one Current State\n      Record is sent for\
    \ each multicast address for which the specified\n      interface has listening\
    \ state, as described in section 4.2.  The\n      Current State Record carries\
    \ the multicast address and its\n      associated filter mode (MODE_IS_INCLUDE\
    \ or MODE_IS_EXCLUDE) and\n      Source list.  Multiple Current State Records\
    \ are packed into\n      individual Report messages, to the extent possible.\n\
    \      This naive algorithm may result in bursts of packets when a node\n    \
    \  listens to a large number of multicast addresses.  Instead of\n      using\
    \ a single Interface Timer, implementations are recommended to\n      spread transmission\
    \ of such Report messages over the interval (0,\n      [Maximum Response Delay]).\
    \  Note that any such implementation MUST\n      avoid the \"ack-implosion\" problem,\
    \ i.e., MUST NOT send a Report\n      immediately upon reception of a General\
    \ Query.\n   2. If the expired timer is a Multicast Address Timer and the list\
    \ of\n      recorded sources for that multicast address is empty (i.e., there\n\
    \      is a pending response to a Multicast Address Specific Query), then\n  \
    \    if, and only if, the interface has listening state for that\n      multicast\
    \ address, a single Current State Record is sent for that\n      address.  The\
    \ Current State Record carries the multicast address\n      and its associated\
    \ filter mode (MODE_IS_INCLUDE or\n      MODE_IS_EXCLUDE) and source list, if\
    \ any.\n   3. If the expired timer is a Multicast Address Timer and the list of\n\
    \      recorded sources for that multicast address is non-empty (i.e.,\n     \
    \ there is a pending response to a Multicast Address and Source\n      Specific\
    \ Query), then if, and only if, the interface has listening\n      state for that\
    \ multicast address, the contents of the\n      corresponding Current State Record\
    \ are determined from the per-\n      interface state and the pending response\
    \ record, as specified in\n      the following table:\n                      \
    \       set of sources in the\n      per-interface state  pending response record\
    \  Current State Record\n      -------------------  -----------------------  --------------------\n\
    \       INCLUDE (A)                   B                IS_IN (A*B)\n       EXCLUDE\
    \ (A)                   B                IS_IN (B-A)\n   If the resulting Current\
    \ State Record has an empty set of source\n   addresses, then no response is sent.\
    \  After the required Report\n   messages have been generated, the source lists\
    \ associated with any\n   reported multicast addresses are cleared.\n   4. If\
    \ the expired timer is a Retransmission Timer for a multicast\n      address (i.e.,\
    \ there is a pending State Change Report for that\n      multicast address), the\
    \ contents of the report are determined as\n      follows.  If the report should\
    \ contain a Filter Mode Change\n      Record, i.e., the Filter Mode Retransmission\
    \ Counter for that\n      multicast address has a value higher than zero, then,\
    \ if the\n      current filter mode of the interface is INCLUDE, a TO_IN record\
    \ is\n      included in the report; otherwise a TO_EX record is included.  In\n\
    \      both cases, the Filter Mode Retransmission Counter for that\n      multicast\
    \ address is decremented by one unit after the\n      transmission of the report.\n\
    \      If instead the report should contain Source List Change Records,\n    \
    \  i.e., the Filter Mode Retransmission Counter for that multicast\n      address\
    \ is zero, an ALLOW and a BLOCK record is included.  The\n      contents of these\
    \ records are built according to the table below:\n      Record   Sources included\n\
    \      ------   ----------------\n      TO_IN    All in the current per-interface\
    \ state that must be\n               forwarded\n      TO_EX    All in the current\
    \ per-interface state that must be\n               blocked\n      ALLOW    All\
    \ with retransmission state (i.e., all sources from the\n               Retransmission\
    \ List) that must be forwarded.  For each\n               included source, its\
    \ Source Retransmission Counter is\n               decreased with one unit after\
    \ the transmission of the\n               report.  If the counter reaches zero,\
    \ the source is\n               deleted from the Retransmission List for that\
    \ multicast\n               address.\n      BLOCK    All with retransmission state\
    \ (i.e., all sources from the\n               Retransmission List) that must be\
    \ blocked.  For each\n               included source, its Source Retransmission\
    \ Counter is\n               decreased with one unit after the transmission of\
    \ the\n               report.  If the counter reaches zero, the source is\n  \
    \             deleted from the Retransmission List for that multicast\n      \
    \         address.\n      If the computed source list for either an ALLOW or a\
    \ BLOCK record\n      is empty, that record is omitted from the State Change Report.\n"
- title: 7.  Description of the Protocol for Multicast Routers
  contents:
  - "7.  Description of the Protocol for Multicast Routers\n   The purpose of MLD\
    \ is to enable each multicast router to learn, for\n   each of its directly attached\
    \ links, which multicast addresses have\n   listeners on that link.  MLD version\
    \ 2 adds the capability for a\n   multicast router to also learn which *sources*\
    \ have listeners among\n   the neighboring nodes, for packets sent to any particular\
    \ multicast\n   address.  The information gathered by MLD is provided to whichever\n\
    \   multicast routing protocol is used by the router, in order to ensure\n   that\
    \ multicast packets are delivered to all links where there are\n   interested\
    \ listeners.\n   This section describes the part of MLDv2 that is performed by\n\
    \   multicast routers.  Multicast routers may themselves become multicast\n  \
    \ address listeners, and therefore also perform the multicast listener\n   part\
    \ of MLDv2, described in section 6.\n   A multicast router performs the protocol\
    \ described in this section\n   over each of its directly attached links.  If\
    \ a multicast router has\n   more than one interface to the same link, it only\
    \ needs to operate\n   this protocol over one of those interfaces.\n   For each\
    \ interface over which the router operates the MLD protocol,\n   the router must\
    \ configure that interface to listen to all link-layer\n   multicast addresses\
    \ that can be generated by IPv6 multicasts.  For\n   example, an Ethernet-attached\
    \ router must set its Ethernet address\n   reception filter to accept all Ethernet\
    \ multicast addresses that\n   start with the hexadecimal value 3333 [RFC2464];\
    \ in the case of an\n   Ethernet interface that does not support the filtering\
    \ of such a\n   multicast address range, it must be configured to accept ALL Ethernet\n\
    \   multicast addresses, in order to meet the requirements of MLD.\n   On each\
    \ interface over which this protocol is being run, the router\n   MUST enable\
    \ reception of the link-scope \"all MLDv2-capable routers\"\n   multicast address\
    \ from all sources, and MUST perform the multicast\n   address listener part of\
    \ MLDv2 for that address on that interface.\n   Multicast routers only need to\
    \ know that *at least one* node on an\n   attached link listens to packets for\
    \ a particular multicast address\n   from a particular source; a multicast router\
    \ is not required to\n   *individually* keep track of the interests of each neighboring\
    \ node.\n   (Nevertheless, see Appendix A2 item 1 for discussion.)\n   MLDv2 is\
    \ backward compatible with the MLDv1 protocol.  For a detailed\n   description\
    \ of compatibility issues see section 8.\n"
- title: 7.1.  Conditions for MLD Queries
  contents:
  - "7.1.  Conditions for MLD Queries\n   The behavior of a router that implements\
    \ the MLDv2 protocol depends\n   on whether there are several multicast routers\
    \ on the same subnet, or\n   not.  If it is the case, a querier election mechanism\
    \ (described in\n   section 7.6.2) is used to elect a single multicast router\
    \ to be in\n   Querier state.  All the multicast routers on the subnet listen\
    \ to the\n   messages sent by multicast address listeners, and maintain the same\n\
    \   multicast listening information state, so that they can quickly and\n   correctly\
    \ take over the querier functionality, should the present\n   Querier fail.  Nevertheless,\
    \ it is only the Querier that sends\n   periodical or triggered query messages\
    \ on the subnet.\n   The Querier periodically sends General Queries to request\
    \ Multicast\n   Address Listener information from an attached link.  These queries\n\
    \   are used to build and refresh the Multicast Address Listener state of\n  \
    \ routers on attached links.\n   Nodes respond to these queries by reporting their\
    \ Multicast Address\n   Listening state (and set of sources they listen to) with\
    \ Current\n   State Multicast Address Records in MLDv2 Multicast Listener Reports.\n\
    \   As a listener of a multicast address, a node may express interest in\n   listening\
    \ or not listening to traffic from particular sources.  As\n   the desired listening\
    \ state of a node changes, it reports these\n   changes using Filter Mode Change\
    \ Records or Source List Change\n   Records.  These records indicate an explicit\
    \ state change in a\n   multicast address at a node in either the Multicast Address\
    \ Record's\n   source list or its filter mode.  When Multicast Address Listening\
    \ is\n   terminated at a node or traffic from a particular source is no longer\n\
    \   desired, the Querier must query for other listeners of the multicast\n   address\
    \ or of the source before deleting the multicast address (or\n   source) from\
    \ its Multicast Address Listener state and pruning its\n   traffic.\n   To enable\
    \ all nodes on a link to respond to changes in multicast\n   address listening,\
    \ the Querier sends specific queries.  A Multicast\n   Address Specific Query\
    \ is sent to verify that there are no nodes that\n   listen to the specified multicast\
    \ address or to \"rebuild\" the\n   listening state for a particular multicast\
    \ address.  Multicast\n   Address Specific Queries are sent when the Querier receives\
    \ a State\n   Change Record indicating that a node ceases to listen to a multicast\n\
    \   address.  They are also sent in order to enable a fast transition of\n   a\
    \ router from EXCLUDE to INCLUDE mode, in case a received State\n   Change Record\
    \ motivates this action.\n   A Multicast Address and Source Specific Query is\
    \ used to verify that\n   there are no nodes on a link which listen to traffic\
    \ from a specific\n   set of sources.  Multicast Address and Source Specific Queries\
    \ list\n   sources for a particular multicast address which have been requested\n\
    \   to no longer be forwarded.  This query is sent by the Querier in\n   order\
    \ to learn if any node listens to packets sent to the specified\n   multicast\
    \ address, from the specified source addresses.  Multicast\n   Address and Source\
    \ Specific Queries are only sent in response to\n   State Change Records and never\
    \ in response to Current State Records.\n   Section 5.1.13 describes each query\
    \ in more detail.\n"
- title: 7.2.  MLD State Maintained by Multicast Routers
  contents:
  - "7.2.  MLD State Maintained by Multicast Routers\n   Multicast routers that implement\
    \ the MLDv2 protocol keep state per\n   multicast address per attached link. \
    \ This multicast address state\n   consists of a filter mode, a list of sources,\
    \ and various timers. For\n   each attached link on which MLD runs, a multicast\
    \ router records the\n   listening state for that link.  That state conceptually\
    \ consists of a\n   set of records of the form:\n      (IPv6 multicast address,\
    \ Filter Timer,\n       Router Filter Mode, (source records) )\n   Each source\
    \ record is of the form:\n      (IPv6 source address, source timer)\n   If all\
    \ sources for a multicast address are listened to, an empty\n   source record\
    \ list is kept with the Router Filter Mode set to\n   EXCLUDE.  This means that\
    \ nodes on this link want all sources for\n   this multicast address to be forwarded.\
    \  This is the MLDv2 equivalent\n   of an MLDv1 listening state.\n"
- title: 7.2.1.  Definition of Router Filter Mode
  contents:
  - "7.2.1.  Definition of Router Filter Mode\n   To reduce internal state, MLDv2\
    \ routers keep a filter mode per\n   multicast address per attached link.  This\
    \ filter mode is used to\n   summarize the total listening state of a multicast\
    \ address to a\n   minimum set such that all nodes' listening states are respected.\
    \  The\n   filter mode may change in response to the reception of particular\n\
    \   types of Multicast Address Records or when certain timer conditions\n   occur.\
    \  In the following sections, we use the term \"Router Filter\n   Mode\" to refer\
    \ to the filter mode of a particular multicast address\n   within a router.  Section\
    \ 7.4 describes the changes of the Router\n   Filter Mode per Multicast Address\
    \ Record received.\n   A router is in INCLUDE mode for a specific multicast address\
    \ on a\n   given interface if all the listeners on the link interested in that\n\
    \   address are in INCLUDE mode.  The router state is represented through\n  \
    \ the notation INCLUDE (A), where A is called the \"Include List\".  The\n   Include\
    \ List is the set of sources that one or more listeners on the\n   link have requested\
    \ to receive.  All the sources from the Include\n   List will be forwarded by\
    \ the router.  Any other source that is not\n   in the Include List will be blocked\
    \ by the router.\n   A router is in EXCLUDE mode for a specific multicast address\
    \ on a\n   given interface if there is at least one listener in EXCLUDE mode\n\
    \   interested in that address on the link.  Conceptually, when a\n   Multicast\
    \ Address Record is received, the Router Filter Mode for that\n   multicast address\
    \ is updated to cover all the requested sources using\n   the least amount of\
    \ state.  As a rule, once a Multicast Address\n   Record with a filter mode of\
    \ EXCLUDE is received, the Router Filter\n   Mode for that multicast address will\
    \ be set to EXCLUDE. Nevertheless,\n   if all nodes with a multicast address record\
    \ having filter mode set\n   to EXCLUDE cease reporting, it is desirable for the\
    \ Router Filter\n   Mode for that multicast address to transition back to INCLUDE\
    \ mode.\n   This transition occurs when the Filter Timer expires, and is\n   explained\
    \ in detail in section 7.5.\n   When the router is in EXCLUDE mode, the router\
    \ state is represented\n   through the notation EXCLUDE (X,Y), where X is called\
    \ the \"Requested\n   List\" and Y is called the \"Exclude List\".  All sources,\
    \ except those\n   from the Exclude List, will be forwarded by the router.  The\n\
    \   Requested List has no effect on forwarding.  Nevertheless, it has to\n   be\
    \ maintained for several reasons, as explained in section 7.2.3.\n   The exact\
    \ handling of both the INCLUDE and EXCLUDE mode router state,\n   according to\
    \ the received reports, is presented in details in Tables\n   7.4.1 and 7.4.2.\n"
- title: 7.2.2.  Definition of Filter Timers
  contents:
  - "7.2.2.  Definition of Filter Timers\n   The Filter Timer is only used when the\
    \ router is in EXCLUDE mode for\n   a specific multicast address, and it represents\
    \ the time for the\n   Router Filter Mode of the multicast address to expire and\
    \ switch to\n   INCLUDE mode.  A Filter Timer is a decrementing timer with a lower\n\
    \   bound of zero.  One Filter Timer exists per multicast address record.\n  \
    \ Filter Timers are updated according to the types of Multicast Address\n   Records\
    \ received.\n   If a Filter Timer expires, with the Router Filter Mode for that\n\
    \   multicast address being EXCLUDE, it means that there are no more\n   listeners\
    \ in EXCLUDE mode on the attached link.  At this point, the\n   router transitions\
    \ to INCLUDE filter mode.  Section 7.5 describes the\n   actions taken when a\
    \ Filter Timer expires while in EXCLUDE mode.\n   The following table summarizes\
    \ the role of the Filter Timer.  Section\n   7.4 describes the details of setting\
    \ the Filter Timer per type of\n   Multicast Address Record received.\n     Router\
    \               Filter\n   Filter Mode          Timer Value          Actions/Comments\n\
    \   -----------       -----------------       ----------------\n     INCLUDE \
    \            Not Used            All listeners in\n                          \
    \                   INCLUDE mode.\n     EXCLUDE             Timer > 0        \
    \   At least one listener\n                                             in EXCLUDE\
    \ mode.\n     EXCLUDE             Timer == 0          No more listeners in\n \
    \                                            EXCLUDE mode for the\n          \
    \                                   multicast address.\n                     \
    \                        If the Requested List\n                             \
    \                is empty, delete\n                                          \
    \   Multicast Address\n                                             Record.  If\
    \ not, switch\n                                             to INCLUDE filter\
    \ mode;\n                                             the sources in the\n   \
    \                                          Requested List are\n              \
    \                               moved to the Include\n                       \
    \                      List, and the Exclude\n                               \
    \              List is deleted.\n"
- title: 7.2.3.  Definition of Source Timers
  contents:
  - "7.2.3.  Definition of Source Timers\n   A Source Timer is a decrementing timer\
    \ with a lower bound of zero.\n   One Source Timer is kept per source record.\
    \  Source timers are\n   updated according to the type and filter mode of the\
    \ Multicast\n   Address Record received.  Section 7.4 describes the setting of\
    \ source\n   timers per type of Multicast Address Records received.\n   In the\
    \ following, abbreviations are used for several variables (all\n   of which are\
    \ described in detail in section 9).  The variable MALI\n   stands for the Multicast\
    \ Address Listening Interval, which is the\n   time in which multicast address\
    \ listening state will time out.  The\n   variable LLQT is the Last Listener Query\
    \ Time, which is the total\n   time the router should wait for a report, after\
    \ the Querier has sent\n   the first query.  During this time, the Querier should\
    \ send [Last\n   Member Query Count]-1 retransmissions of the query.  LLQT represents\n\
    \   the \"leave latency\", or the difference between the transmission of a\n \
    \  listener state change and the modification of the information passed\n   to\
    \ the routing protocol.\n   If the router is in INCLUDE filter mode, a source\
    \ can be added to the\n   current Include List if a listener in INCLUDE mode sends\
    \ a Current\n   State or a State Change Report which includes that source.  Each\n\
    \   source from the Include List is associated with a source timer that\n   is\
    \ updated whenever a listener in INCLUDE mode sends a report that\n   confirms\
    \ its interest in that specific source.  If the timer of a\n   source from the\
    \ Include List expires, the source is deleted from the\n   Include List.  If there\
    \ are no more source records left, the\n   multicast address record is deleted\
    \ from the router.\n   Besides this \"soft leave\" mechanism, there is also a\
    \ \"fast leave\"\n   scheme in MLDv2; it is also based on the use of source timers.\
    \  When\n   a node in INCLUDE mode expresses its desire to stop listening to a\n\
    \   specific source, all the multicast routers on the link lower their\n   timer\
    \ for that source to a small interval of LLQT milliseconds.  The\n   Querier then\
    \ sends then a Multicast Address and Source Specific\n   Query, to verify whether\
    \ there are other listeners for that source on\n   the link, or not.  If a corresponding\
    \ report is received before the\n   timer expires, all the multicast routers on\
    \ the link update their\n   source timer.  If not, the source is deleted from\
    \ the Include List.\n   The handling of the Include List, according to the received\
    \ reports,\n   is detailed in Tables 7.4.1 and 7.4.2.\n   Source timers are treated\
    \ differently when the Router Filter Mode for\n   a multicast address is EXCLUDE.\
    \  For sources from the Requested List\n   the source timers have running values;\
    \ these sources are forwarded by\n   the router.  For sources from the Exclude\
    \ List the source timers are\n   set to zero; these sources are blocked by the\
    \ router.  If the timer\n   of a source from the Requested List expires, the source\
    \ is moved to\n   the Exclude List.  The router informs then the routing protocol\
    \ that\n   there is no longer a listener on the link interested in traffic from\n\
    \   this source.\n   The router has to maintain the Requested List for two reasons:\n\
    \   o  To keep track of sources that listeners in INCLUDE mode listen to.\n  \
    \    This is necessary in order to assure a seamless transition of the\n     \
    \ router to INCLUDE mode, when there will be no listener in EXCLUDE\n      mode\
    \ left.  This transition should not interrupt the flow of\n      traffic to the\
    \ listeners in INCLUDE mode still interested in that\n      multicast address.\
    \  Therefore, at the moment of the transition,\n      the Requested List should\
    \ represent the set of sources that nodes\n      in INCLUDE mode have explicitly\
    \ requested.\n      When the router switches to INCLUDE mode, the sources in the\n\
    \      Requested List are moved to the Include List, and the Exclude List\n  \
    \    is deleted.  Before the switch, the Requested List can contain an\n     \
    \ inexact guess at the sources that listeners in INCLUDE mode listen\n      to\
    \ - might be too large or too small.  These inexactitudes are due\n      to the\
    \ fact that the Requested List is also used for fast blocking\n      purposes,\
    \ as described below.  If such a fast blocking is\n      required, some sources\
    \ may be deleted from the Requested List (as\n      shown in Tables 7.4.1 and\
    \ 7.4.2) in order to reduce router state.\n      Nevertheless, in each such case\
    \ the Filter Timer is updated as\n      well.  Therefore, listeners in INCLUDE\
    \ mode will have enough time,\n      before an eventual switching, to reconfirm\
    \ their interest in the\n      eliminated source(s), and rebuild the Requested\
    \ List accordingly.\n      The protocol ensures that when a switch to INCLUDE\
    \ mode occurs,\n      the Requested List will be accurate.  Details about the\
    \ transition\n      of the router to INCLUDE mode are presented in Appendix A3.\n\
    \   o  To allow a fast blocking of previously unblocked sources.  If the\n   \
    \   router receives a report that contains such a request, the\n      concerned\
    \ sources are added to the Requested List.  Their timers\n      are set to a small\
    \ interval of LLQT milliseconds, and a Multicast\n      Address and Source Specific\
    \ Query is sent by the Querier, to check\n      whether there are nodes on the\
    \ link still interested in those\n      sources, or not.  If no node confirms\
    \ its interest in receiving a\n      specific source, the timer of that source\
    \ expires.  Then, the\n      source is moved from the Requested List to the Exclude\
    \ List.  From\n      then on, the source will be blocked by the router.\n   The\
    \ handling of the EXCLUDE mode router state, according to the\n   received reports,\
    \ is detailed in Tables 7.4.1 and 7.4.2.\n   When the Router Filter Mode for a\
    \ multicast address is EXCLUDE,\n   source records are only deleted when the Filter\
    \ Timer expires, or\n   when newly received Multicast Address Records modify the\
    \ source\n   record list of the router.\n"
- title: 7.3.  MLDv2 Source Specific Forwarding Rules
  contents:
  - "7.3.  MLDv2 Source Specific Forwarding Rules\n   When a multicast router receives\
    \ a datagram from a source destined to\n   a particular multicast address, a decision\
    \ has to be made whether to\n   forward the datagram on an attached link or not.\
    \  The multicast\n   routing protocol in use is in charge of this decision, and\
    \ should use\n   the MLDv2 information to ensure that all sources/multicast addresses\n\
    \   that have listeners on a link are forwarded to that link.  MLDv2\n   information\
    \ does not override multicast routing information; for\n   example, if the MLDv2\
    \ filter mode for a multicast address is EXCLUDE,\n   a router may still forward\
    \ packets for excluded sources to a transit\n   link.\n   To summarize, the following\
    \ table describes the forwarding\n   suggestions made by MLDv2 to the routing\
    \ protocol for traffic\n   originating from a source destined to a multicast address.\
    \  It also\n   summarizes the actions taken upon the expiration of a source timer\n\
    \   based on the Router Filter Mode of the multicast address.\n     Router\n \
    \  Filter Mode      Source Timer Value           Action\n   -----------      ------------------\
    \           ------\n    INCLUDE            TIMER > 0         Suggest to forward\
    \ traffic\n                                         from source\n    INCLUDE \
    \           TIMER == 0        Suggest to stop forwarding\n                   \
    \                      traffic from source and\n                             \
    \            remove source record.  If\n                                     \
    \    there are no more source\n                                         records,\
    \ delete multicast\n                                         address record\n\
    \    EXCLUDE            TIMER > 0         Suggest to forward traffic\n       \
    \                                  from source\n    EXCLUDE            TIMER ==\
    \ 0        Suggest to not forward\n                                         traffic\
    \ from source.  Move\n                                         the source from\
    \ the\n                                         Requested List to the\n      \
    \                                   Exclude List (DO NOT remove\n            \
    \                             source record)\n    EXCLUDE         No Source Element\
    \    Suggest to forward traffic\n                                         from\
    \ all sources\n"
- title: 7.4.  Action on Reception of Reports
  contents:
  - "7.4.  Action on Reception of Reports\n   Upon reception of an MLD message that\
    \ contains a Report, the router\n   checks if the source address of the message\
    \ is a valid link-local\n   address, if the Hop Limit is set to 1, and if the\
    \ Router Alert option\n   is present in the Hop-By-Hop Options header of the IPv6\
    \ packet.  If\n   any of these checks fails, the packet is dropped.  If the validity\
    \ of\n   the MLD message is verified, the router starts to process the Report.\n"
- title: 7.4.1.  Reception of Current State Records
  contents:
  - "7.4.1.  Reception of Current State Records\n   When receiving Current State Records,\
    \ a router updates both its\n   Filter Timer and its source timers.  In some circumstances,\
    \ the\n   reception of a type of multicast address record will cause the Router\n\
    \   Filter Mode for that multicast address to change.  The table below\n   describes\
    \ the actions, with respect to state and timers, that occur\n   to a router's\
    \ state upon reception of Current State Records.\n   If the router is in INCLUDE\
    \ filter mode for a multicast address, we\n   will use the notation INCLUDE (A),\
    \ where A denotes the associated\n   Include List.  If the router is in EXCLUDE\
    \ filter mode for a\n   multicast address, we will use the notation EXCLUDE (X,Y),\
    \ where X\n   and Y denote the associated Requested List and Exclude List\n  \
    \ respectively.\n   Within the \"Actions\" section of the router state tables,\
    \ we use the\n   notation '(A)=J', which means that the set A of source records\
    \ should\n   have their source timers set to value J.  'Delete (A)' means that\
    \ the\n   set A of source records should be deleted.  'Filter Timer = J' means\n\
    \   that the Filter Timer for the multicast address should be set to\n   value\
    \ J.\n   Router State   Report Received  New Router State   Actions\n   ------------\
    \   ---------------  ----------------   -------\n   INCLUDE (A)       IS_IN (B)\
    \     INCLUDE (A+B)      (B)=MALI\n   INCLUDE (A)       IS_EX (B)     EXCLUDE\
    \ (A*B, B-A) (B-A)=0\n                                                      Delete\
    \ (A-B)\n                                                      Filter Timer=MALI\n\
    \   EXCLUDE (X,Y)     IS_IN (A)     EXCLUDE (X+A, Y-A) (A)=MALI\n   EXCLUDE (X,Y)\
    \     IS_EX (A)     EXCLUDE (A-Y, Y*A) (A-X-Y)=MALI\n                        \
    \                              Delete (X-A)\n                                \
    \                      Delete (Y-A)\n                                        \
    \              Filter Timer=MALI\n"
- title: 7.4.2.  Reception of Filter Mode Change and Source List Change Records
  contents:
  - "7.4.2.  Reception of Filter Mode Change and Source List Change Records\n   When\
    \ a change in the global state of a multicast address occurs in a\n   node, the\
    \ node sends either a Source List Change Record or a Filter\n   Mode Change Record\
    \ for that multicast address.  As with Current State\n   Records, routers must\
    \ act upon these records and possibly change\n   their own state to reflect the\
    \ new listening state of the link.\n   The Querier must query sources or multicast\
    \ addresses that are\n   requested to be no longer forwarded.  When a router queries\
    \ or\n   receives a query for a specific set of sources, it lowers its source\n\
    \   timers for those sources to a small interval of Last Listener Query\n   Time\
    \ milliseconds.  If multicast address records are received in\n   response to\
    \ the queries which express interest in listening the\n   queried sources, the\
    \ corresponding timers are updated.\n   Multicast Address Specific queries can\
    \ also be used in order to\n   enable a fast transition of a router from EXCLUDE\
    \ to INCLUDE mode, in\n   case a received Multicast Address Record motivates this\
    \ action.  The\n   Filter Timer for that multicast address is lowered to a small\n\
    \   interval of Last Listener Query Time milliseconds.  If any multicast\n   address\
    \ records that express EXCLUDE mode interest in the multicast\n   address are\
    \ received within this interval, the Filter Timer is\n   updated and the suggestion\
    \ to the routing protocol to forward the\n   multicast address stands without\
    \ any interruption.  If not, the\n   router will switch to INCLUDE filter mode\
    \ for that multicast address.\n   During the query period (i.e., Last Listener\
    \ Query Time milliseconds)\n   the MLD component in the router continues to suggest\
    \ to the routing\n   protocol to forward traffic from the multicast addresses\
    \ or sources\n   that are queried.  It is not until after Last Listener Query\
    \ Time\n   milliseconds without receiving a record that expresses interest in\n\
    \   the queried multicast address or sources that the router may prune\n   the\
    \ multicast address or sources from the link.\n   The following table describes\
    \ the changes in multicast address state\n   and the action(s) taken when receiving\
    \ either Filter Mode Change or\n   Source List Change Records.  This table also\
    \ describes the queries\n   which are sent by the Querier when a particular report\
    \ is received.\n   We use the following notation for describing the queries that\
    \ are\n   sent.  We use the notation 'Q(MA)' to describe a Multicast Address\n\
    \   Specific Query to the MA multicast address.  We use the notation\n   'Q(MA,A)'\
    \ to describe a Multicast Address and Source Specific Query\n   to the MA multicast\
    \ address with source list A.  If source list A is\n   null as a result of the\
    \ action (e.g. A*B), then no query is sent as a\n   result of the operation.\n\
    \   In order to maintain protocol robustness, queries defined in the\n   Actions\
    \ column of the table below need to be transmitted [Last\n   Listener Query Count]\
    \ times, once every [Last Listener Query\n   Interval] period.\n   If while scheduling\
    \ new queries, there are already pending queries to\n   be retransmitted for the\
    \ same multicast address, the new and pending\n   queries have to be merged. \
    \ In addition, received host reports for a\n   multicast address with pending\
    \ queries may affect the contents of\n   those queries.  Section 7.6.3. describes\
    \ the process of building and\n   maintaining the state of pending queries.\n\
    \   Router State  Report Received  New Router State     Actions\n   ------------\
    \  ---------------  ----------------     -------\n   INCLUDE (A)     ALLOW (B)\
    \      INCLUDE (A+B)        (B)=MALI\n   INCLUDE (A)     BLOCK (B)      INCLUDE\
    \ (A)          Send Q(MA,A*B)\n   INCLUDE (A)     TO_EX (B)      EXCLUDE (A*B,B-A)\
    \    (B-A)=0\n                                                       Delete (A-B)\n\
    \                                                       Send Q(MA,A*B)\n     \
    \                                                  Filter Timer=MALI\n   INCLUDE\
    \ (A)     TO_IN (B)      INCLUDE (A+B)        (B)=MALI\n                     \
    \                                  Send Q(MA,A-B)\n   EXCLUDE (X,Y)   ALLOW (A)\
    \      EXCLUDE (X+A,Y-A)    (A)=MALI\n   EXCLUDE (X,Y)   BLOCK (A)      EXCLUDE\
    \ (X+(A-Y),Y)  (A-X-Y) =\n                                                   \
    \         Filter Timer\n                                                     \
    \  Send Q(MA,A-Y)\n   EXCLUDE (X,Y)   TO_EX (A)      EXCLUDE (A-Y,Y*A)    (A-X-Y)\
    \ =\n                                                            Filter Timer\n\
    \                                                       Delete (X-A)\n       \
    \                                                Delete (Y-A)\n              \
    \                                         Send Q(MA,A-Y)\n                   \
    \                                    Filter Timer=MALI\n   EXCLUDE (X,Y)   TO_IN\
    \ (A)      EXCLUDE (X+A,Y-A)    (A)=MALI\n                                   \
    \                    Send Q(MA,X-A)\n                                        \
    \               Send Q(MA)\n"
- title: 7.5.  Switching Router Filter Modes
  contents:
  - "7.5.  Switching Router Filter Modes\n   The Filter Timer is used as a mechanism\
    \ for transitioning the Router\n   Filter Mode from EXCLUDE to INCLUDE.\n   When\
    \ a Filter Timer expires with a Router Filter Mode of EXCLUDE, a\n   router assumes\
    \ that there are no nodes with a *filter mode* of\n   EXCLUDE present on the attached\
    \ link.  Thus, the router transitions\n   to INCLUDE filter mode for the multicast\
    \ address.\n   A router uses the sources from the Requested List as its state\
    \ for\n   the switch to a filter mode of INCLUDE.  Sources from the Requested\n\
    \   List are moved in the Include List, while sources from the Exclude\n   List\
    \ are deleted.  For example, if a router's state for a multicast\n   address is\
    \ EXCLUDE(X,Y) and the Filter Timer expires for that\n   multicast address, the\
    \ router switches to filter mode of INCLUDE with\n   state INCLUDE(X).  If at\
    \ the moment of the switch the Requested List\n   (X) is empty, the multicast\
    \ address record is deleted from the\n   router.\n"
- title: 7.6.  Action on Reception of Queries
  contents:
  - "7.6.  Action on Reception of Queries\n   Upon reception of an MLD message that\
    \ contains a Query, the router\n   checks if the source address of the message\
    \ is a valid link-local\n   address, if the Hop Limit is set to 1, and if the\
    \ Router Alert option\n   is present in the Hop-By-Hop Options header of the IPv6\
    \ packet.  If\n   any of these checks fails, the packet is dropped.\n   If the\
    \ validity of the MLD message is verified, the router starts to\n   process the\
    \ Query.\n"
- title: 7.6.1.  Timer Updates
  contents:
  - "7.6.1.  Timer Updates\n   MLDv2 uses the Suppress Router-Side Processing flag\
    \ to ensure\n   robustness, as explained in section 2.1.  When a router sends\
    \ or\n   receives a query with a clear Suppress Router-Side Processing flag,\n\
    \   it must update its timers to reflect the correct timeout values for\n   the\
    \ multicast address or sources being queried.  The following table\n   describes\
    \ the timer actions when sending or receiving a Multicast\n   Address Specific\
    \ or Multicast Address and Source Specific Query with\n   the Suppress Router-Side\
    \ Processing flag not set.\n   Query       Action\n   -----       ------\n   Q(MA,A)\
    \     Source Timers for sources in A are lowered to LLQT\n   Q(MA)       Filter\
    \ Timer is lowered to LLQT\n   When a router sends or receives a query with the\
    \ Suppress Router-Side\n   Processing flag set, it will not update its timers.\n"
- title: 7.6.2.  Querier Election
  contents:
  - "7.6.2.  Querier Election\n   MLDv2 elects a single router per subnet to be in\
    \ Querier state; all\n   the other routers on the subnet should be in Non-Querier\
    \ state. MLDv2\n   uses the same querier election mechanism as MLDv1, namely the\
    \ IPv6\n   address.  When a router starts operating on a subnet, by default it\n\
    \   considers itself as being the Querier.  Thus, it sends several\n   General\
    \ Queries separated by a small time interval (see sections 9.6\n   and 9.7 for\
    \ details).\n   When a router receives a query with a lower IPv6 address than\
    \ its\n   own, it sets the Other Querier Present timer to Other Querier Present\n\
    \   Timeout; if it was previously in Querier state, it switches to Non-\n   Querier\
    \ state and ceases to send queries on the link.  After the\n   Other Querier Present\
    \ timer expires, it should re-enter the Querier\n   state and begin sending General\
    \ Queries.\n   All MLDv2 queries MUST be sent with the FE80::/64 link-local source\n\
    \   address prefix.  Therefore, for the purpose of MLDv2 querier\n   election,\
    \ an IPv6 address A is considered to be lower than an IPv6\n   address B if the\
    \ interface ID represented by the last 64 bits of\n   address A, in big-endian\
    \ bit order, is lower than the interface ID\n   represented by the last 64 bits\
    \ of address B.\n"
- title: 7.6.3.  Building and Sending Specific Queries
  contents:
  - '7.6.3.  Building and Sending Specific Queries

    '
- title: 7.6.3.1.  Building and Sending Multicast Address Specific Queries
  contents:
  - "7.6.3.1.  Building and Sending Multicast Address Specific Queries\n   When a\
    \ table action \"Send Q(MA)\" is encountered, the Filter Timer\n   must be lowered\
    \ to LLQT.  The Querier must then immediately send a\n   Multicast Address Specific\
    \ query as well as schedule [Last Listener\n   Query Count - 1] query retransmissions\
    \ to be sent every [Last\n   Listener Query Interval], over [Last Listener Query\
    \ Time].\n   When transmitting a Multicast Address Specific Query, if the Filter\n\
    \   Timer is larger than LLQT, the \"Suppress Router-Side Processing\" bit\n \
    \  is set in the query message.\n"
- title: 7.6.3.2.  Building and Sending Multicast Address and Source Specific
  contents:
  - "7.6.3.2.  Building and Sending Multicast Address and Source Specific\n      \
    \    Queries\n   When a table action \"Send Q(MA,X)\" is encountered by the Querier\
    \ in\n   the table in section 7.4.2, the following actions must be performed\n\
    \   for each of the sources in X that send to multicast address MA, with\n   source\
    \ timer larger than LLQT:\n   o  Lower source timer to LLQT;\n   o  Add the sources\
    \ to the Retransmission List;\n   o  Set the Source Retransmission Counter for\
    \ each source to [Last\n      Listener Query Count].\n   The Querier must then\
    \ immediately send a Multicast Address and Source\n   Specific Query as well as\
    \ schedule [Last Listener Query Count -1]\n   query retransmissions to be sent\
    \ every [Last Listener Query\n   Interval], over [Last Listener Query Time]. \
    \ The contents of these\n   queries are calculated as follows.\n   When building\
    \ a Multicast Address and Source Specific Query for a\n   multicast address MA,\
    \ two separate query messages are sent for the\n   multicast address.  The first\
    \ one has the \"Suppress Router-Side\n   Processing\" bit set and contains all\
    \ the sources with retransmission\n   state (i.e., sources from the Retransmission\
    \ List of that multicast\n   address), and timers greater than LLQT.  The second\
    \ has the \"Suppress\n   Router-Side Processing\" bit clear and contains all the\
    \ sources with\n   retransmission state and timers lower or equal to LLQT.  If\
    \ either of\n   the two calculated messages does not contain any sources, then\
    \ its\n   transmission is suppressed.\n   Note: If a Multicast Address Specific\
    \ query is scheduled to be\n   transmitted at the same time as a Multicast Address\
    \ and Source\n   specific query for the same multicast address, then transmission\
    \ of\n   the Multicast Address and Source Specific message with the \"Suppress\n\
    \   Router-Side Processing\" bit set may be suppressed.\n"
- title: 8.  Interoperation with MLDv1
  contents:
  - "8.  Interoperation with MLDv1\n   MLD version 2 hosts and routers interoperate\
    \ with hosts and routers\n   that have not yet been upgraded to MLDv2.  This compatibility\
    \ is\n   maintained by hosts and routers taking appropriate actions depending\n\
    \   on the versions of MLD operating on hosts and routers within a\n   network.\n"
- title: 8.1.  Query Version Distinctions
  contents:
  - "8.1.  Query Version Distinctions\n   The MLD version of a Multicast Listener\
    \ Query message is determined\n   as follows:\n   MLDv1 Query: length = 24 octets\n\
    \   MLDv2 Query: length >= 28 octets\n   Query messages that do not match any\
    \ of the above conditions (e.g., a\n   Query of length 26 octets) MUST be silently\
    \ ignored.\n"
- title: 8.2.  Multicast Address Listener Behavior
  contents:
  - '8.2.  Multicast Address Listener Behavior

    '
- title: 8.2.1.  In the Presence of MLDv1 Routers
  contents:
  - "8.2.1.  In the Presence of MLDv1 Routers\n   In order to be compatible with MLDv1\
    \ routers, MLDv2 hosts MUST\n   operate in version 1 compatibility mode.  MLDv2\
    \ hosts MUST keep state\n   per local interface regarding the compatibility mode\
    \ of each attached\n   link.  A host's compatibility mode is determined from the\
    \ Host\n   Compatibility Mode variable which can be in one of the two states:\n\
    \   MLDv1 or MLDv2.\n   The Host Compatibility Mode of an interface is set to\
    \ MLDv1 whenever\n   an MLDv1 Multicast Address Listener Query is received on\
    \ that\n   interface.  At the same time, the Older Version Querier Present timer\n\
    \   for the interface is set to Older Version Querier Present Timeout\n   seconds.\
    \  The timer is re-set whenever a new MLDv1 Query is received\n   on that interface.\
    \  If the Older Version Querier Present timer\n   expires, the host switches back\
    \ to Host Compatibility Mode of MLDv2.\n   When Host Compatibility Mode is MLDv2,\
    \ a host acts using the MLDv2\n   protocol on that interface.  When Host Compatibility\
    \ Mode is MLDv1, a\n   host acts in MLDv1 compatibility mode, using only the MLDv1\
    \ protocol,\n   on that interface.\n   An MLDv1 Querier will send General Queries\
    \ with the Maximum Response\n   Code set to the desired Maximum Response Delay,\
    \ i.e., the full range\n   of this field is linear and the exponential algorithm\
    \ described in\n   section 5.1.3. is not used.\n   Whenever a host changes its\
    \ compatibility mode, it cancels all its\n   pending responses and retransmission\
    \ timers.\n"
- title: 8.2.2.  In the Presence of MLDv1 Multicast Address Listeners
  contents:
  - "8.2.2.  In the Presence of MLDv1 Multicast Address Listeners\n   An MLDv2 host\
    \ may be placed on a link where there are MLDv1 hosts.  A\n   host MAY allow its\
    \ MLDv2 Multicast Listener Report to be suppressed\n   by a Version 1 Multicast\
    \ Listener Report.\n"
- title: 8.3.  Multicast Router Behavior
  contents:
  - '8.3.  Multicast Router Behavior

    '
- title: 8.3.1.  In the Presence of MLDv1 Routers
  contents:
  - "8.3.1.  In the Presence of MLDv1 Routers\n   MLDv2 routers may be placed on a\
    \ network where there is at least one\n   MLDv1 router.  The following requirements\
    \ apply:\n   o  If an MLDv1 router is present on the link, the Querier MUST use\n\
    \      the lowest version of MLD present on the network.  This must be\n     \
    \ administratively assured.  Routers that desire to be compatible\n      with\
    \ MLDv1 MUST have a configuration option to act in MLDv1 mode;\n      if an MLDv1\
    \ router is present on the link, the system\n      administrator must explicitly\
    \ configure all MLDv2 routers to act\n      in MLDv1 mode. When in MLDv1 mode,\
    \ the Querier MUST send periodic\n      General Queries truncated at the Multicast\
    \ Address field (i.e., 24\n      bytes long), and SHOULD also warn about receiving\
    \ an MLDv2 Query\n      (such warnings must be rate-limited).  The Querier MUST\
    \ also fill\n      in the Maximum Response Delay in the Maximum Response Code\
    \ field,\n      i.e., the exponential algorithm described in section 5.1.3. is\
    \ not\n      used.\n   o  If a router is not explicitly configured to use MLDv1\
    \ and receives\n      an MLDv1 General Query, it SHOULD log a warning.  These\
    \ warnings\n      MUST be rate-limited.\n"
- title: 8.3.2.  In the Presence of MLDv1 Multicast Address Listeners
  contents:
  - "8.3.2.  In the Presence of MLDv1 Multicast Address Listeners\n   MLDv2 routers\
    \ may be placed on a network where there are hosts that\n   have not yet been\
    \ upgraded to MLDv2.  In order to be compatible with\n   MLDv1 hosts, MLDv2 routers\
    \ MUST operate in version 1 compatibility\n   mode.  MLDv2 routers keep a compatibility\
    \ mode per multicast address\n   record.  The compatibility mode of a multicast\
    \ address is determined\n   from the Multicast Address Compatibility Mode variable,\
    \ which can be\n   in one of the two following states: MLDv1 or MLDv2.\n   The\
    \ Multicast Address Compatibility Mode of a multicast address\n   record is set\
    \ to MLDv1 whenever an MLDv1 Multicast Listener Report is\n   received for that\
    \ multicast address.  At the same time, the Older\n   Version Host Present timer\
    \ for the multicast address is set to Older\n   Version Host Present Timeout seconds.\
    \  The timer is re-set whenever a\n   new MLDv1 Report is received for that multicast\
    \ address.  If the\n   Older Version Host Present timer expires, the router switches\
    \ back to\n   Multicast Address Compatibility Mode of MLDv2 for that multicast\n\
    \   address.\n   Note that when a router switches back to MLDv2 Multicast Address\n\
    \   Compatibility Mode for a multicast address, it takes some time to\n   regain\
    \ source-specific state information.  Source-specific\n   information will be\
    \ learned during the next General Query, but\n   sources that should be blocked\
    \ will not be blocked until [Multicast\n   Address Listening Interval] after that.\n\
    \   When Multicast Address Compatibility Mode is MLDv2, a router acts\n   using\
    \ the MLDv2 protocol for that multicast address.  When Multicast\n   Address Compatibility\
    \ Mode is MLDv1, a router internally translates\n   the following MLDv1 messages\
    \ for that multicast address to their\n   MLDv2 equivalents:\n   MLDv1 Message\
    \                 MLDv2 Equivalent\n   -------------                 ----------------\n\
    \      Report                        IS_EX( {} )\n      Done                 \
    \         TO_IN( {} )\n   MLDv2 BLOCK messages are ignored, as are source-lists\
    \ in TO_EX()\n   messages (i.e., any TO_EX() message is treated as TO_EX( {} )).\
    \  On\n   the other hand, the Querier continues to send MLDv2 queries,\n   regardless\
    \ of its Multicast Address Compatibility Mode.\n"
- title: 9.  List of Timers, Counters, and their Default Values
  contents:
  - "9.  List of Timers, Counters, and their Default Values\n   Most of these timers\
    \ are configurable.  If non-default settings are\n   used, they MUST be consistent\
    \ among all nodes on a single link.  Note\n   that parentheses are used to group\
    \ expressions to make the algebra\n   clear.\n"
- title: 9.1.  Robustness Variable
  contents:
  - "9.1.  Robustness Variable\n   The Robustness Variable allows tuning for the expected\
    \ packet loss on\n   a link.  If a link is expected to be lossy, the value of\
    \ the\n   Robustness Variable may be increased.  MLD is robust to [Robustness\n\
    \   Variable] - 1 packet losses.  The value of the Robustness Variable\n   MUST\
    \ NOT be zero, and SHOULD NOT be one.  Default value: 2.\n"
- title: 9.2.  Query Interval
  contents:
  - "9.2.  Query Interval\n   The Query Interval variable denotes the interval between\
    \ General\n   Queries sent by the Querier.  Default value: 125 seconds.\n   By\
    \ varying the [Query Interval], an administrator may tune the number\n   of MLD\
    \ messages on the link; larger values cause MLD Queries to be\n   sent less often.\n"
- title: 9.3.  Query Response Interval
  contents:
  - "9.3.  Query Response Interval\n   The Maximum Response Delay used to calculate\
    \ the Maximum Response\n   Code inserted into the periodic General Queries.  Default\
    \ value:\n   10000 (10 seconds)\n   By varying the [Query Response Interval],\
    \ an administrator may tune\n   the burstiness of MLD messages on the link; larger\
    \ values make the\n   traffic less bursty, as host responses are spread out over\
    \ a larger\n   interval.  The number of seconds represented by the [Query Response\n\
    \   Interval] must be less than the [Query Interval].\n"
- title: 9.4.  Multicast Address Listening Interval
  contents:
  - "9.4.  Multicast Address Listening Interval\n   The Multicast Address Listening\
    \ Interval (MALI) is the amount of time\n   that must pass before a multicast\
    \ router decides there are no more\n   listeners of a multicast address or a particular\
    \ source on a link.\n   This value MUST be ([Robustness Variable] times [Query\
    \ Interval])\n   plus [Query Response Interval].\n"
- title: 9.5.  Other Querier Present Timeout
  contents:
  - "9.5.  Other Querier Present Timeout\n   The Other Querier Present Timeout is\
    \ the length of time that must\n   pass before a multicast router decides that\
    \ there is no longer\n   another multicast router which should be the Querier.\
    \  This value\n   MUST be ([Robustness Variable] times ([Query Interval]) plus\
    \ (one\n   half of [Query Response Interval]).\n"
- title: 9.6.  Startup Query Interval
  contents:
  - "9.6.  Startup Query Interval\n   The Startup Query Interval is the interval between\
    \ General Queries\n   sent by a Querier on startup.  Default value: 1/4 the [Query\n\
    \   Interval].\n"
- title: 9.7.  Startup Query Count
  contents:
  - "9.7.  Startup Query Count\n   The Startup Query Count is the number of Queries\
    \ sent out on startup,\n   separated by the Startup Query Interval.  Default value:\
    \ [Robustness\n   Variable].\n"
- title: 9.8.  Last Listener Query Interval
  contents:
  - "9.8.  Last Listener Query Interval\n   The Last Listener Query Interval is the\
    \ Maximum Response Delay used\n   to calculate the Maximum Response Code inserted\
    \ into Multicast\n   Address Specific Queries sent in response to Version 1 Multicast\n\
    \   Listener Done messages.  It is also the Maximum Response Delay used\n   to\
    \ calculate the Maximum Response Code inserted into Multicast\n   Address and\
    \ Source Specific Query messages.  Default value: 1000 (1\n   second).\n   Note\
    \ that for values of LLQI greater than 32.768 seconds, a limited\n   set of values\
    \ can be represented, corresponding to sequential values\n   of Maximum Response\
    \ Code.  When converting a configured time to a\n   Maximum Response Code value,\
    \ it is recommended to use the exact value\n   if possible, or the next lower\
    \ value if the requested value is not\n   exactly representable.\n   This value\
    \ may be tuned to modify the \"leave latency\" of the link.  A\n   reduced value\
    \ results in reduced time to detect the departure of the\n   last listener for\
    \ a multicast address or source.\n"
- title: 9.9.  Last Listener Query Count
  contents:
  - "9.9.  Last Listener Query Count\n   The Last Listener Query Count is the number\
    \ of Multicast Address\n   Specific Queries sent before the router assumes there\
    \ are no local\n   listeners.  The Last Listener Query Count is also the number\
    \ of\n   Multicast Address and Source Specific Queries sent before the router\n\
    \   assumes there are no listeners for a particular source.  Default\n   value:\
    \ [Robustness Variable].\n"
- title: 9.10.  Last Listener Query Time
  contents:
  - "9.10.  Last Listener Query Time\n   The Last Listener Query Time is the time\
    \ value represented by the\n   Last Listener Query Interval, multiplied by [Last\
    \ Listener Query\n   Count].  It is not a tunable value, but may be tuned by changing\
    \ its\n   components.\n"
- title: 9.11.  Unsolicited Report Interval
  contents:
  - "9.11.  Unsolicited Report Interval\n   The Unsolicited Report Interval is the\
    \ time between repetitions of a\n   node's initial report of interest in a multicast\
    \ address.  Default\n   value: 1 second.\n"
- title: 9.12.  Older Version Querier Present Timeout
  contents:
  - "9.12.  Older Version Querier Present Timeout\n   The Older Version Querier Present\
    \ Timeout is the time-out for\n   transitioning a host back to MLDv2 Host Compatibility\
    \ Mode.  When an\n   MLDv1 query is received, MLDv2 hosts set their Older Version\
    \ Querier\n   Present Timer to [Older Version Querier Present Timeout].\n   This\
    \ value MUST be ([Robustness Variable] times (the [Query Interval]\n   in the\
    \ last Query received)) plus ([Query Response Interval]).\n"
- title: 9.13.  Older Version Host Present Timeout
  contents:
  - "9.13.  Older Version Host Present Timeout\n   The Older Version Host Present\
    \ Timeout is the time-out for\n   transitioning a router back to MLDv2 Multicast\
    \ Address Compatibility\n   Mode for a specific multicast address.  When an MLDv1\
    \ report is\n   received for that multicast address, routers set their Older Version\n\
    \   Host Present Timer to [Older Version Host Present Timeout].\n   This value\
    \ MUST be ([Robustness Variable] times [Query Interval])\n   plus ([Query Response\
    \ Interval]).\n"
- title: 9.14.  Configuring timers
  contents:
  - "9.14.  Configuring timers\n   This section is meant to provide advice to network\
    \ administrators on\n   how to tune these settings to their network.  Ambitious\
    \ router\n   implementations might tune these settings dynamically based upon\n\
    \   changing characteristics of the network.\n"
- title: 9.14.1.  Robustness Variable
  contents:
  - "9.14.1.  Robustness Variable\n   The Robustness Variable tunes MLD to expected\
    \ losses on a link.\n   MLDv2 is robust to [Robustness Variable] - 1 packet losses,\
    \ e.g., if\n   the Robustness Variable is set to the default value of 2, MLDv2\
    \ is\n   robust to a single packet loss but may operate imperfectly if more\n\
    \   losses occur.  On lossy links, the value of the Robustness Variable\n   should\
    \ be increased to allow for the expected level of packet loss.\n   However, increasing\
    \ the value of the Robustness Variable increases\n   the leave latency of the\
    \ link (the time between when the last\n   listener stops listening to a source\
    \ or multicast address and when\n   the traffic stops flowing).\n"
- title: 9.14.2.  Query Interval
  contents:
  - "9.14.2.  Query Interval\n   The overall level of periodic MLD traffic is inversely\
    \ proportional\n   to the Query Interval.  A longer Query Interval results in\
    \ a lower\n   overall level of MLD traffic.  The value of the Query Interval MUST\n\
    \   be equal to or greater than the Maximum Response Delay used to\n   calculate\
    \ the Maximum Response Code inserted in General Query\n   messages.\n"
- title: 9.14.3.  Maximum Response Delay
  contents:
  - "9.14.3.  Maximum Response Delay\n   The burstiness of MLD traffic is inversely\
    \ proportional to the\n   Maximum Response Delay.  A longer Maximum Response Delay\
    \ will spread\n   Report messages over a longer interval.  However, a longer Maximum\n\
    \   Response Delay in Multicast Address Specific and Multicast Address\n   And\
    \ Source Specific Queries extends the leave latency (the time\n   between when\
    \ the last listener stops listening to a source or\n   multicast address and when\
    \ the traffic stops flowing.)  The expected\n   rate of Report messages can be\
    \ calculated by dividing the expected\n   number of Reporters by the Maximum Response\
    \ Delay.  The Maximum\n   Response Delay may be dynamically calculated per Query\
    \ by using the\n   expected number of Reporters for that Query as follows:\n \
    \  Query Type                         Expected number of Reporters\n   ----------\
    \                         ----------------------------\n   General Query     \
    \                 All nodes on link\n   Multicast Address Specific Query   All\
    \ nodes on the link that had\n                                      expressed\
    \ interest in the\n                                      multicast address\n \
    \  Multicast Address and Source       All nodes on the link that had\n    Specific\
    \ Query                    expressed interest in the source\n                \
    \                      and multicast address\n   A router is not required to calculate\
    \ these populations or tune the\n   Maximum Response Delay dynamically; these\
    \ are simply guidelines.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   We consider the ramifications of a forged message\
    \ of each type.  Note\n   that before processing an MLD message, nodes verify\
    \ if the source\n   address of the message is a valid link-local address (or the\n\
    \   unspecified address), if the Hop Limit is set to 1, and if the Router\n  \
    \ Alert option is present in the Hop-By-Hop Options header of the IPv6\n   packet.\
    \  If any of these checks fails, the packet is dropped.  This\n   defends the\
    \ MLDv2 nodes from acting on forged MLD messages originated\n   off-link.  Therefore,\
    \ in the following we discuss only the effects of\n   on-link forgery.\n"
- title: 10.1.  Query Message
  contents:
  - "10.1.  Query Message\n   A forged Query message from a machine with a lower IPv6\
    \ address than\n   the current Querier will cause Querier duties to be assigned\
    \ to the\n   forger.  If the forger then sends no more Query messages, other\n\
    \   routers' Other Querier Present timer will time out and one will\n   resume\
    \ the role of Querier.  During this time, if the forger ignores\n   Multicast\
    \ Listener Done Messages, traffic might flow to multicast\n   addresses with no\
    \ listeners for up to [Multicast Address Listener\n   Interval].\n   A forged\
    \ Version 1 Query message will put MLDv2 listeners on that\n   link in MLDv1 Host\
    \ Compatibility Mode.  This scenario can be avoided\n   by providing MLDv2 hosts\
    \ with a configuration option to ignore\n   Version 1 messages completely.\n \
    \  A DoS attack on a node could be staged through forged Multicast\n   Address\
    \ and Source Specific Queries.  The attacker can find out about\n   the listening\
    \ state of a specific node with a general query.  After\n   that it could send\
    \ a large number of Multicast Address and Source\n   Specific Queries, each with\
    \ a large source list and/or long Maximum\n   Response Delay.  The node will have\
    \ to store and maintain the sources\n   specified in all of those queries for\
    \ as long as it takes to send the\n   delayed response.  This would consume both\
    \ memory and CPU cycles in\n   order to augment the recorded sources with the\
    \ source lists included\n   in the successive queries.\n   To protect against\
    \ such a DoS attack, a node stack implementation\n   could restrict the number\
    \ of Multicast Address and Source Specific\n   Queries per multicast address within\
    \ this interval, and/or record\n   only a limited number of sources.\n"
- title: 10.2.  Current State Report messages
  contents:
  - "10.2.  Current State Report messages\n   A forged Report message may cause multicast\
    \ routers to think there\n   are listeners of a multicast address on a link when\
    \ there are not.\n   Nevertheless, since listening to a multicast address on a\
    \ host is\n   generally an unprivileged operation, a local user may trivially\
    \ gain\n   the same result without forging any messages.\n   A forged Version\
    \ 1 Report Message may put a router into MLDv1\n   Multicast Address Compatibility\
    \ Mode for a particular multicast\n   address, meaning that the router will ignore\
    \ MLDv2 source specific\n   state messages.  This can cause traffic to flow from\
    \ unwanted sources\n   for up to [Multicast Address Listener Interval].  This\
    \ can be solved\n   by providing routers with a configuration switch to ignore\
    \ Version 1\n   messages completely.  This breaks automatic compatibility with\n\
    \   Version 1 hosts, so it should only be used in situations where source\n  \
    \ filtering is critical.\n"
- title: 10.3.  State Change Report messages
  contents:
  - "10.3.  State Change Report messages\n   A forged State Change Report message\
    \ will cause the Querier to send\n   out Multicast Address Specific or Multicast\
    \ Address and Source\n   Specific Queries for the multicast address in question.\
    \  This causes\n   extra processing on each router and on each listener of the\
    \ multicast\n   address, but cannot cause loss of desired traffic.\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   IANA has assigned the IPv6 link-local multicast\
    \ address\n   FF02:0:0:0:0:0:0:16, called \"all MLDv2-capable routers\", as described\n\
    \   in section 5.2.14.  Version 2 Multicast Listener Reports will be sent\n  \
    \ to this special address.\n   In addition, IANA has assigned the ICMPv6 message\
    \ type value of 143\n   for Version 2 Multicast Listener Report messages, as specified\
    \ in\n   section 4.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2119]    Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2460]    Deering, S. and R. Hinden, \"Internet Protocol,\
    \ Version 6\n                (IPv6) Specification\", RFC 2460, December 1998.\n\
    \   [RFC2463]    Conta, A. and S. Deering, \"Internet Control Message\n      \
    \          Protocol (ICMPv6) for the Internet Protocol Version 6\n           \
    \     (IPv6) Specification\", RFC 2463, December 1998.\n   [RFC2464]    Crawford,\
    \ M., \"Transmission of IPv6 Packets over\n                Ethernet Networks\"\
    , RFC 2464, December 1998.\n   [RFC2710]    Deering, S., Fenner, W. and B. Haberman,\
    \ \"Multicast\n                Listener Discovery (MLD) for IPv6\", RFC 2710,\
    \ October\n                1999.\n   [RFC2711]    Partridge, C. and A. Jackson,\
    \ \"IPv6 Router Alert\n                Option,\" RFC 2711, October 1999.\n   [RFC3513]\
    \    Hinden, R. and S. Deering, \"Internet Protocol Version 6\n              \
    \  (IPv6) Addressing Architecture, RFC 3513, April 2003.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [RFC2461]    Narten, T., Nordmark, E. and W.\
    \ Simpson, \"Neighbor\n                Discovery for IP Version 6 (IPv6)\", RFC\
    \ 2461, December\n                1998.\n   [RFC2462]    Thomson, S. and T. Narten,\
    \ \"IPv6 Stateless Address\n                Autoconfiguration\", RFC 2462, December\
    \ 1998.\n   [RFC3376]    Cain, B., Deering, S., Kouvelas, I., Fenner, B. and A.\n\
    \                Thyagarajan, \"Internet Group Management Protocol,\n        \
    \        Version 3\", RFC 3376, October 2002.\n   [RFC3569]    Bhattacharyya,\
    \ S., Ed., \"An Overview of Source- Specific\n                Multicast (SSM)\"\
    , RFC 3569, July 2003.\n   [RFC3678]    Thaler, D., Fenner, B. and B. Quinn, \"\
    Socket Interface\n                Extensions for Multicast Source Filters\", RFC\
    \ 3678,\n                January 2004.\n"
- title: 13.  Acknowledgments
  contents:
  - "13.  Acknowledgments\n   We would like to thank Hitoshi Asaeda, Randy Bush, Francis\
    \ Dupont,\n   Ted Hardie, Russ Housley, Konstantin Kabassanov, Erik Nordmark,\n\
    \   Shinsuke Suzuki, Margaret Wasserman, Bert Wijnen, and Remi Zara for\n   their\
    \ valuable comments and suggestions on this document.\n"
- title: APPENDIX A.  Design Rationale
  contents:
  - 'APPENDIX A.  Design Rationale

    '
- title: A.1.  The Need for State Change Messages
  contents:
  - "A.1.  The Need for State Change Messages\n   MLDv2 specifies two types of Multicast\
    \ Listener Reports: Current\n   State and State Change.  This section describes\
    \ the rationale for the\n   need for both these types of Reports.\n   Routers\
    \ need to distinguish Multicast Listener Reports that were sent\n   in response\
    \ to Queries from those that were sent as a result of a\n   change in the per-interface\
    \ state.  Multicast Listener Reports that\n   are sent in response to Multicast\
    \ Address Listener Queries are used\n   mainly to refresh the existing state at\
    \ the router; they typically do\n   not cause transitions in state at the router.\
    \  Multicast Listener\n   Reports that are sent in response to changes in the\
    \ per-interface\n   state require the router to take some action in response to\
    \ the\n   received report (see Section 7.4.).\n   The inability to distinguish\
    \ between the two types of reports would\n   force a router to treat all Multicast\
    \ Listener Reports as potential\n   changes in state and could result in increased\
    \ processing at the\n   router as well as an increase in MLD traffic on the link.\n"
- title: A.2.  Host Suppression
  contents:
  - "A.2.  Host Suppression\n   In MLDv1, a host would not send a pending multicast\
    \ listener report\n   if a similar report was sent by another listener on the\
    \ link.  In\n   MLDv2, the suppression of multicast listener reports has been\n\
    \   removed.  The following points explain this decision.\n   1. Routers may want\
    \ to track per-host multicast listener status on an\n      interface.  This would\
    \ allow routers to implement fast leaves\n      (e.g., for layered multicast congestion\
    \ control schemes), as well\n      as track listener status for possible security\
    \ or accounting\n      purposes.  The present specification does not require routers\
    \ to\n      implement per-host tracking.  Nevertheless, the lack of host\n   \
    \   suppression in MLDv2 makes possible to implement either\n      proprietary\
    \ or future standard behavior of multicast routers that\n      would support per-host\
    \ tracking, while being fully interoperable\n      with MLDv2 listeners and routers\
    \ that implement the exact behavior\n      described in this specification.\n\
    \   2. Multicast Listener Report suppression does not work well on\n      bridged\
    \ LANs.  Many bridges and Layer2/Layer3 switches that\n      implement MLD snooping\
    \ do not forward MLD messages across LAN\n      segments in order to prevent multicast\
    \ listener report\n      suppression.\n   3. By eliminating multicast listener\
    \ report suppression, hosts have\n      fewer messages to process; this leads\
    \ to a simpler state machine\n      implementation.\n   4. In MLDv2, a single\
    \ multicast listener report now bundles multiple\n      multicast address records\
    \ to decrease the number of packets sent.\n      In comparison, the previous version\
    \ of MLD required that each\n      multicast address be reported in a separate\
    \ message.\n"
- title: A.3.  Switching router filter modes from EXCLUDE to INCLUDE
  contents:
  - "A.3.  Switching router filter modes from EXCLUDE to INCLUDE\n   If on a link\
    \ there are nodes in both EXCLUDE and INCLUDE modes for a\n   single multicast\
    \ address, the router must be in EXCLUDE mode as well\n   (see section 7.2.1).\
    \  In EXCLUDE mode, a router forwards traffic from\n   all sources except those\
    \ in the Exclude List.  If all nodes in\n   EXCLUDE mode cease to exist or to\
    \ listen, it would be desirable for\n   the router to switch back to INCLUDE mode\
    \ seamlessly, without\n   interrupting the flow of traffic to existing listeners.\n\
    \   One of the ways to accomplish this is for routers to keep track of\n   all\
    \ sources that nodes that are in INCLUDE mode listen to, even\n   though the router\
    \ itself is in EXCLUDE mode.  If the Filter Timer for\n   a multicast address\
    \ expires, it implies that there are no nodes in\n   EXCLUDE mode on the link\
    \ (otherwise a multicast listener report from\n   that node would have refreshed\
    \ the Filter Timer).  The router can\n   then switch to INCLUDE mode seamlessly;\
    \ sources from the Requested\n   List are moved to the Include List, while sources\
    \ from the Exclude\n   List are deleted.\n"
- title: APPENDIX B.  Summary of Changes from MLDv1
  contents:
  - "APPENDIX B.  Summary of Changes from MLDv1\n   The following is a summary of\
    \ changes from MLDv1, specified in RFC\n   2710.\n   o  MLDv2 introduces source\
    \ filtering.\n   o  The IP service interface of MLDv2 nodes is modified accordingly.\n\
    \      It enables the specification of a filter mode and a source list.\n   o\
    \  An MLDv2 node keeps per-socket and per-interface multicast\n      listening\
    \ states that include a filter mode and a source list for\n      each multicast\
    \ address.  This enables packet filtering based on a\n      socket's multicast\
    \ reception state.\n   o  MLDv2 state kept on routers includes a filter mode and\
    \ a list of\n      sources and source timers for each multicast address that has\n\
    \      listeners on the link.  MLDv1 routers kept only the list of\n      multicast\
    \ addresses.\n   o  Queries include additional fields (section 5.1).\n   o  The\
    \ S flag (Suppress Router-Side Processing) is included in\n      queries in order\
    \ to fix robustness issues.\n   o  The Querier's Robustness Variable and Query\
    \ Interval Code are\n      included in Queries in order to synchronize all MLDv2\
    \ routers\n      connected to the same link.\n   o  A new Query type (Multicast\
    \ Address and Source Specific Query) is\n      introduced.\n   o  The Maximum\
    \ Response Delay is not directly included in the Query\n      anymore.  Instead,\
    \ an exponential algorithm is used to calculate\n      its value, based on the\
    \ Maximum Response Code included in the\n      Query.  The maximum value is increased\
    \ from 65535 milliseconds to\n      about 140 minutes.\n   o  Reports include\
    \ Multicast Address Records.  Information on the\n      listening state for several\
    \ different multicast addresses can be\n      included in the same Report message.\n\
    \   o  Reports are sent to the \"all MLDv2-capable multicast routers\"\n     \
    \ address, instead of the multicast address the host listens to, as\n      in\
    \ MLDv1.  This facilitates the operation of layer-2 snooping\n      switches.\n\
    \   o  There is no \"host suppression\", as in MLDv1.  All nodes send\n      Report\
    \ messages.\n   o  Unsolicited Reports, announcing changes in receiver listening\n\
    \      state, are sent [Robustness Variable] times.  RFC 2710 is less\n      explicit.\n\
    \   o  There are no Done messages.\n   o  Interoperability with MLDv1 systems\
    \ is achieved by MLDv2 state\n      operations.\n   o  In order to ensure interoperability,\
    \ hosts maintain a Host\n      Compatibility Mode variable and an Older Version\
    \ Querier Present\n      timer per interface.  Routers maintain a Multicast Address\n\
    \      Compatibility Mode variable and an Older Version Host Present\n      timer\
    \ per multicast address.\n"
- title: Editors' Contact Information
  contents:
  - "Editors' Contact Information\n   Rolland Vida\n   LIP6, Universite Pierre et\
    \ Marie Curie\n   8, rue du Capitaine Scott\n   75015 Paris, France\n   Phone:\
    \ +33-1.44.27.30.58\n   EMail: Rolland.Vida@lip6.fr\n   Luis Henrique Maciel Kosmalski\
    \ Costa\n   LIP6, Universite Pierre et Marie Curie\n   8, rue du Capitaine Scott\n\
    \   75015 Paris, France\n   Phone: +33-1.44.27.30.58\n   EMail: Luis.Costa@lip6.fr\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   This document was written by:\n   Rolland Vida, LIP6\n\
    \   EMail: Rolland.Vida@lip6.fr\n   Luis Henrique Maciel Kosmalski Costa, LIP6\n\
    \   EMail: Luis.Costa@lip6.fr\n   Serge Fdida, LIP6\n   EMail: Serge.Fdida@lip6.fr\n\
    \   Steve Deering, Cisco Systems, Inc.\n   EMail: deering@cisco.com\n   Bill Fenner,\
    \ AT&T Labs - Research\n   EMail: fenner@research.att.com\n   Isidor Kouvelas,\
    \ Cisco Systems, Inc.\n   EMail: kouvelas@cisco.com\n   Brian Haberman, Caspian\
    \ Networks\n   EMail: brian@innovationslab.net\n   This document is the translation\
    \ of [RFC3376] for IPv6 semantics.  It\n   was elaborated based on the translation\
    \ of (RFC 2236) into [RFC2710].\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This\
    \ document is subject\n   to the rights, licenses and restrictions contained in\
    \ BCP 78, and\n   except as set forth therein, the authors retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
