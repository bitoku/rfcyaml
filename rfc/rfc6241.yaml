- title: __initial_text__
  contents:
  - '                Network Configuration Protocol (NETCONF)

    '
- title: Abstract
  contents:
  - "Abstract\n   The Network Configuration Protocol (NETCONF) defined in this document\n\
    \   provides mechanisms to install, manipulate, and delete the\n   configuration\
    \ of network devices.  It uses an Extensible Markup\n   Language (XML)-based data\
    \ encoding for the configuration data as well\n   as the protocol messages.  The\
    \ NETCONF protocol operations are\n   realized as remote procedure calls (RPCs).\
    \  This document obsoletes\n   RFC 4741.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6241.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   6\n     1.1.  Terminology . . . . . . . . . . . . . . . . . . .\
    \ . . . .   7\n     1.2.  Protocol Overview . . . . . . . . . . . . . . . . .\
    \ . . .   8\n     1.3.  Capabilities  . . . . . . . . . . . . . . . . . . . .\
    \ . .  10\n     1.4.  Separation of Configuration and State Data  . . . . . .\
    \ .  10\n   2.  Transport Protocol Requirements . . . . . . . . . . . . . . .\
    \  11\n     2.1.  Connection-Oriented Operation . . . . . . . . . . . . . .  11\n\
    \     2.2.  Authentication, Integrity, and Confidentiality  . . . . .  12\n  \
    \   2.3.  Mandatory Transport Protocol  . . . . . . . . . . . . . .  12\n   3.\
    \  XML Considerations  . . . . . . . . . . . . . . . . . . . . .  13\n     3.1.\
    \  Namespace . . . . . . . . . . . . . . . . . . . . . . . .  13\n     3.2.  Document\
    \ Type Declarations  . . . . . . . . . . . . . . .  13\n   4.  RPC Model . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . .  13\n     4.1.  <rpc> Element\
    \ . . . . . . . . . . . . . . . . . . . . . .  13\n     4.2.  <rpc-reply> Element\
    \ . . . . . . . . . . . . . . . . . . .  15\n     4.3.  <rpc-error> Element .\
    \ . . . . . . . . . . . . . . . . . .  16\n     4.4.  <ok> Element  . . . . .\
    \ . . . . . . . . . . . . . . . . .  19\n     4.5.  Pipelining  . . . . . . .\
    \ . . . . . . . . . . . . . . . .  19\n   5.  Configuration Model . . . . . .\
    \ . . . . . . . . . . . . . . .  19\n     5.1.  Configuration Datastores  . .\
    \ . . . . . . . . . . . . . .  19\n     5.2.  Data Modeling . . . . . . . . .\
    \ . . . . . . . . . . . . .  20\n   6.  Subtree Filtering . . . . . . . . . .\
    \ . . . . . . . . . . . .  20\n     6.1.  Overview  . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  20\n     6.2.  Subtree Filter Components . . . . . .\
    \ . . . . . . . . . .  21\n       6.2.1.  Namespace Selection . . . . . . . .\
    \ . . . . . . . . .  21\n       6.2.2.  Attribute Match Expressions . . . . .\
    \ . . . . . . . .  22\n       6.2.3.  Containment Nodes . . . . . . . . . . .\
    \ . . . . . . .  23\n       6.2.4.  Selection Nodes . . . . . . . . . . . . .\
    \ . . . . . .  23\n       6.2.5.  Content Match Nodes . . . . . . . . . . . .\
    \ . . . . .  24\n     6.3.  Subtree Filter Processing . . . . . . . . . . . .\
    \ . . . .  25\n     6.4.  Subtree Filtering Examples  . . . . . . . . . . . .\
    \ . . .  26\n       6.4.1.  No Filter . . . . . . . . . . . . . . . . . . . .\
    \ . .  26\n       6.4.2.  Empty Filter  . . . . . . . . . . . . . . . . . . .\
    \ .  26\n       6.4.3.  Select the Entire <users> Subtree . . . . . . . . . .\
    \  27\n       6.4.4.  Select All <name> Elements within the <users>\n        \
    \       Subtree . . . . . . . . . . . . . . . . . . . . . . .  29\n       6.4.5.\
    \  One Specific <user> Entry . . . . . . . . . . . . . .  30\n       6.4.6.  Specific\
    \ Elements from a Specific <user> Entry  . . .  31\n       6.4.7.  Multiple Subtrees\
    \ . . . . . . . . . . . . . . . . . .  32\n       6.4.8.  Elements with Attribute\
    \ Naming  . . . . . . . . . . .  33\n   7.  Protocol Operations . . . . . . .\
    \ . . . . . . . . . . . . . .  35\n     7.1.  <get-config>  . . . . . . . . .\
    \ . . . . . . . . . . . . .  35\n     7.2.  <edit-config> . . . . . . . . . .\
    \ . . . . . . . . . . . .  37\n     7.3.  <copy-config> . . . . . . . . . . .\
    \ . . . . . . . . . . .  43\n     7.4.  <delete-config> . . . . . . . . . . .\
    \ . . . . . . . . . .  44\n     7.5.  <lock>  . . . . . . . . . . . . . . . .\
    \ . . . . . . . . .  44\n     7.6.  <unlock>  . . . . . . . . . . . . . . . .\
    \ . . . . . . . .  47\n     7.7.  <get> . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  48\n     7.8.  <close-session> . . . . . . . . . . . . . . .\
    \ . . . . . .  49\n     7.9.  <kill-session>  . . . . . . . . . . . . . . . .\
    \ . . . . .  50\n   8.  Capabilities  . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  51\n     8.1.  Capabilities Exchange . . . . . . . . . . . . . . .\
    \ . . .  51\n     8.2.  Writable-Running Capability . . . . . . . . . . . . .\
    \ . .  53\n       8.2.1.  Description . . . . . . . . . . . . . . . . . . . .\
    \ .  53\n       8.2.2.  Dependencies  . . . . . . . . . . . . . . . . . . . .\
    \  53\n       8.2.3.  Capability Identifier . . . . . . . . . . . . . . . .  53\n\
    \       8.2.4.  New Operations  . . . . . . . . . . . . . . . . . . .  53\n  \
    \     8.2.5.  Modifications to Existing Operations  . . . . . . . .  53\n    \
    \ 8.3.  Candidate Configuration Capability  . . . . . . . . . . .  53\n      \
    \ 8.3.1.  Description . . . . . . . . . . . . . . . . . . . . .  53\n       8.3.2.\
    \  Dependencies  . . . . . . . . . . . . . . . . . . . .  54\n       8.3.3.  Capability\
    \ Identifier . . . . . . . . . . . . . . . .  54\n       8.3.4.  New Operations\
    \  . . . . . . . . . . . . . . . . . . .  54\n       8.3.5.  Modifications to\
    \ Existing Operations  . . . . . . . .  56\n     8.4.  Confirmed Commit Capability\
    \ . . . . . . . . . . . . . . .  57\n       8.4.1.  Description . . . . . . .\
    \ . . . . . . . . . . . . . .  57\n       8.4.2.  Dependencies  . . . . . . .\
    \ . . . . . . . . . . . . .  58\n       8.4.3.  Capability Identifier . . . .\
    \ . . . . . . . . . . . .  58\n       8.4.4.  New Operations  . . . . . . . .\
    \ . . . . . . . . . . .  59\n       8.4.5.  Modifications to Existing Operations\
    \  . . . . . . . .  60\n     8.5.  Rollback-on-Error Capability  . . . . . . .\
    \ . . . . . . .  61\n       8.5.1.  Description . . . . . . . . . . . . . . .\
    \ . . . . . .  61\n       8.5.2.  Dependencies  . . . . . . . . . . . . . . .\
    \ . . . . .  62\n       8.5.3.  Capability Identifier . . . . . . . . . . . .\
    \ . . . .  62\n       8.5.4.  New Operations  . . . . . . . . . . . . . . . .\
    \ . . .  62\n       8.5.5.  Modifications to Existing Operations  . . . . . .\
    \ . .  62\n     8.6.  Validate Capability . . . . . . . . . . . . . . . . . .\
    \ .  63\n       8.6.1.  Description . . . . . . . . . . . . . . . . . . . . .\
    \  63\n       8.6.2.  Dependencies  . . . . . . . . . . . . . . . . . . . .  63\n\
    \       8.6.3.  Capability Identifier . . . . . . . . . . . . . . . .  63\n  \
    \     8.6.4.  New Operations  . . . . . . . . . . . . . . . . . . .  63\n    \
    \   8.6.5.  Modifications to Existing Operations  . . . . . . . .  64\n     8.7.\
    \  Distinct Startup Capability . . . . . . . . . . . . . . .  64\n       8.7.1.\
    \  Description . . . . . . . . . . . . . . . . . . . . .  64\n       8.7.2.  Dependencies\
    \  . . . . . . . . . . . . . . . . . . . .  65\n       8.7.3.  Capability Identifier\
    \ . . . . . . . . . . . . . . . .  65\n       8.7.4.  New Operations  . . . .\
    \ . . . . . . . . . . . . . . .  65\n       8.7.5.  Modifications to Existing\
    \ Operations  . . . . . . . .  65\n     8.8.  URL Capability  . . . . . . . .\
    \ . . . . . . . . . . . . .  66\n       8.8.1.  Description . . . . . . . . .\
    \ . . . . . . . . . . . .  66\n       8.8.2.  Dependencies  . . . . . . . . .\
    \ . . . . . . . . . . .  66\n       8.8.3.  Capability Identifier . . . . . .\
    \ . . . . . . . . . .  66\n       8.8.4.  New Operations  . . . . . . . . . .\
    \ . . . . . . . . .  66\n       8.8.5.  Modifications to Existing Operations \
    \ . . . . . . . .  66\n     8.9.  XPath Capability  . . . . . . . . . . . . .\
    \ . . . . . . .  67\n       8.9.1.  Description . . . . . . . . . . . . . . .\
    \ . . . . . .  67\n       8.9.2.  Dependencies  . . . . . . . . . . . . . . .\
    \ . . . . .  68\n       8.9.3.  Capability Identifier . . . . . . . . . . . .\
    \ . . . .  68\n       8.9.4.  New Operations  . . . . . . . . . . . . . . . .\
    \ . . .  68\n       8.9.5.  Modifications to Existing Operations  . . . . . .\
    \ . .  68\n   9.  Security Considerations . . . . . . . . . . . . . . . . . .\
    \ .  69\n   10. IANA Considerations . . . . . . . . . . . . . . . . . . . . .\
    \  71\n     10.1. NETCONF XML Namespace . . . . . . . . . . . . . . . . . .  71\n\
    \     10.2. NETCONF XML Schema  . . . . . . . . . . . . . . . . . . .  71\n  \
    \   10.3. NETCONF YANG Module . . . . . . . . . . . . . . . . . . .  72\n    \
    \ 10.4. NETCONF Capability URNs . . . . . . . . . . . . . . . . .  72\n   11.\
    \ Contributors  . . . . . . . . . . . . . . . . . . . . . . . .  73\n   12. Acknowledgements\
    \  . . . . . . . . . . . . . . . . . . . . . .  73\n   13. References  . . . .\
    \ . . . . . . . . . . . . . . . . . . . . .  74\n     13.1. Normative References\
    \  . . . . . . . . . . . . . . . . . .  74\n     13.2. Informative References\
    \  . . . . . . . . . . . . . . . . .  75\n   Appendix A.  NETCONF Error List .\
    \ . . . . . . . . . . . . . . . .  76\n   Appendix B.  XML Schema for NETCONF\
    \ Messages Layer  . . . . . . .  80\n   Appendix C.  YANG Module for NETCONF Protocol\
    \ Operations  . . . .  85\n   Appendix D.  Capability Template  . . . . . . .\
    \ . . . . . . . . . 105\n     D.1.  capability-name (template)  . . . . . . .\
    \ . . . . . . . . 105\n       D.1.1.  Overview  . . . . . . . . . . . . . . .\
    \ . . . . . . . 105\n       D.1.2.  Dependencies  . . . . . . . . . . . . . .\
    \ . . . . . . 105\n       D.1.3.  Capability Identifier . . . . . . . . . . .\
    \ . . . . . 105\n       D.1.4.  New Operations  . . . . . . . . . . . . . . .\
    \ . . . . 105\n       D.1.5.  Modifications to Existing Operations  . . . . .\
    \ . . . 105\n       D.1.6.  Interactions with Other Capabilities  . . . . . .\
    \ . . 105\n   Appendix E.  Configuring Multiple Devices with NETCONF  . . . .\
    \ . 106\n     E.1.  Operations on Individual Devices  . . . . . . . . . . . .\
    \ 106\n       E.1.1.  Acquiring the Configuration Lock  . . . . . . . . . . 106\n\
    \       E.1.2.  Checkpointing the Running Configuration . . . . . . . 107\n  \
    \     E.1.3.  Loading and Validating the Incoming Configuration . . 108\n    \
    \   E.1.4.  Changing the Running Configuration  . . . . . . . . . 108\n      \
    \ E.1.5.  Testing the New Configuration . . . . . . . . . . . . 109\n       E.1.6.\
    \  Making the Change Permanent . . . . . . . . . . . . . 109\n       E.1.7.  Releasing\
    \ the Configuration Lock  . . . . . . . . . . 110\n     E.2.  Operations on Multiple\
    \ Devices  . . . . . . . . . . . . . 111\n   Appendix F.  Changes from RFC 4741\
    \  . . . . . . . . . . . . . . . 112\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The NETCONF protocol defines a simple mechanism through\
    \ which a\n   network device can be managed, configuration data information can\
    \ be\n   retrieved, and new configuration data can be uploaded and\n   manipulated.\
    \  The protocol allows the device to expose a full, formal\n   application programming\
    \ interface (API).  Applications can use this\n   straightforward API to send\
    \ and receive full and partial\n   configuration data sets.\n   The NETCONF protocol\
    \ uses a remote procedure call (RPC) paradigm.  A\n   client encodes an RPC in\
    \ XML [W3C.REC-xml-20001006] and sends it to a\n   server using a secure, connection-oriented\
    \ session.  The server\n   responds with a reply encoded in XML.  The contents\
    \ of both the\n   request and the response are fully described in XML DTDs or\
    \ XML\n   schemas, or both, allowing both parties to recognize the syntax\n  \
    \ constraints imposed on the exchange.\n   A key aspect of NETCONF is that it\
    \ allows the functionality of the\n   management protocol to closely mirror the\
    \ native functionality of the\n   device.  This reduces implementation costs and\
    \ allows timely access\n   to new features.  In addition, applications can access\
    \ both the\n   syntactic and semantic content of the device's native user interface.\n\
    \   NETCONF allows a client to discover the set of protocol extensions\n   supported\
    \ by a server.  These \"capabilities\" permit the client to\n   adjust its behavior\
    \ to take advantage of the features exposed by the\n   device.  The capability\
    \ definitions can be easily extended in a\n   noncentralized manner.  Standard\
    \ and non-standard capabilities can be\n   defined with semantic and syntactic\
    \ rigor.  Capabilities are\n   discussed in Section 8.\n   The NETCONF protocol\
    \ is a building block in a system of automated\n   configuration.  XML is the\
    \ lingua franca of interchange, providing a\n   flexible but fully specified encoding\
    \ mechanism for hierarchical\n   content.  NETCONF can be used in concert with\
    \ XML-based\n   transformation technologies, such as XSLT [W3C.REC-xslt-19991116],\
    \ to\n   provide a system for automated generation of full and partial\n   configurations.\
    \  The system can query one or more databases for data\n   about networking topologies,\
    \ links, policies, customers, and\n   services.  This data can be transformed\
    \ using one or more XSLT\n   scripts from a task-oriented, vendor-independent\
    \ data schema into a\n   form that is specific to the vendor, product, operating\
    \ system, and\n   software release.  The resulting data can be passed to the device\n\
    \   using the NETCONF protocol.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   o  candidate configuration datastore: A configuration datastore\
    \ that\n      can be manipulated without impacting the device's current\n    \
    \  configuration and that can be committed to the running\n      configuration\
    \ datastore.  Not all devices support a candidate\n      configuration datastore.\n\
    \   o  capability: A functionality that supplements the base NETCONF\n      specification.\n\
    \   o  client: Invokes protocol operations on a server.  In addition, a\n    \
    \  client can subscribe to receive notifications from a server.\n   o  configuration\
    \ data: The set of writable data that is required to\n      transform a system\
    \ from its initial default state into its current\n      state.\n   o  datastore:\
    \ A conceptual place to store and access information.  A\n      datastore might\
    \ be implemented, for example, using files, a\n      database, flash memory locations,\
    \ or combinations thereof.\n   o  configuration datastore: The datastore holding\
    \ the complete set of\n      configuration data that is required to get a device\
    \ from its\n      initial default state into a desired operational state.\n  \
    \ o  message: A protocol element sent over a session.  Messages are\n      well-formed\
    \ XML documents.\n   o  notification: A server-initiated message indicating that\
    \ a certain\n      event has been recognized by the server.\n   o  protocol operation:\
    \ A specific remote procedure call, as used\n      within the NETCONF protocol.\n\
    \   o  remote procedure call (RPC): Realized by exchanging <rpc> and\n      <rpc-reply>\
    \ messages.\n   o  running configuration datastore: A configuration datastore\
    \ holding\n      the complete configuration currently active on the device.  The\n\
    \      running configuration datastore always exists.\n   o  server: Executes\
    \ protocol operations invoked by a client.  In\n      addition, a server can send\
    \ notifications to a client.\n   o  session: Client and server exchange messages\
    \ using a secure,\n      connection-oriented session.\n   o  startup configuration\
    \ datastore: The configuration datastore\n      holding the configuration loaded\
    \ by the device when it boots.\n      Only present on devices that separate the\
    \ startup configuration\n      datastore from the running configuration datastore.\n\
    \   o  state data: The additional data on a system that is not\n      configuration\
    \ data such as read-only status information and\n      collected statistics.\n\
    \   o  user: The authenticated identity of the client.  The authenticated\n  \
    \    identity of a client is commonly referred to as the NETCONF\n      username.\n"
- title: 1.2.  Protocol Overview
  contents:
  - "1.2.  Protocol Overview\n   NETCONF uses a simple RPC-based mechanism to facilitate\
    \ communication\n   between a client and a server.  The client can be a script\
    \ or\n   application typically running as part of a network manager.  The\n  \
    \ server is typically a network device.  The terms \"device\" and\n   \"server\"\
    \ are used interchangeably in this document, as are \"client\"\n   and \"application\"\
    .\n   A NETCONF session is the logical connection between a network\n   administrator\
    \ or network configuration application and a network\n   device.  A device MUST\
    \ support at least one NETCONF session and\n   SHOULD support multiple sessions.\
    \  Global configuration attributes\n   can be changed during any authorized session,\
    \ and the effects are\n   visible in all sessions.  Session-specific attributes\
    \ affect only the\n   session in which they are changed.\n   NETCONF can be conceptually\
    \ partitioned into four layers as shown in\n   Figure 1.\n            Layer  \
    \               Example\n       +-------------+      +-----------------+     \
    \ +----------------+\n   (4) |   Content   |      |  Configuration  |      | \
    \ Notification  |\n       |             |      |      data       |      |    \
    \  data      |\n       +-------------+      +-----------------+      +----------------+\n\
    \              |                       |                      |\n       +-------------+\
    \      +-----------------+              |\n   (3) | Operations  |      |  <edit-config>\
    \  |              |\n       |             |      |                 |         \
    \     |\n       +-------------+      +-----------------+              |\n    \
    \          |                       |                      |\n       +-------------+\
    \      +-----------------+      +----------------+\n   (2) |  Messages   |   \
    \   |     <rpc>,      |      | <notification> |\n       |             |      |\
    \   <rpc-reply>   |      |                |\n       +-------------+      +-----------------+\
    \      +----------------+\n              |                       |           \
    \           |\n       +-------------+      +-----------------------------------------+\n\
    \   (1) |   Secure    |      |  SSH, TLS, BEEP/TLS, SOAP/HTTP/TLS, ... |\n   \
    \    |  Transport  |      |                                         |\n      \
    \ +-------------+      +-----------------------------------------+\n         \
    \            Figure 1: NETCONF Protocol Layers\n   (1)  The Secure Transport layer\
    \ provides a communication path between\n        the client and server.  NETCONF\
    \ can be layered over any\n        transport protocol that provides a set of basic\
    \ requirements.\n        Section 2 discusses these requirements.\n   (2)  The\
    \ Messages layer provides a simple, transport-independent\n        framing mechanism\
    \ for encoding RPCs and notifications.\n        Section 4 documents the RPC messages,\
    \ and [RFC5717] documents\n        notifications.\n   (3)  The Operations layer\
    \ defines a set of base protocol operations\n        invoked as RPC methods with\
    \ XML-encoded parameters.  Section 7\n        details the list of base protocol\
    \ operations.\n   (4)  The Content layer is outside the scope of this document.\
    \  It is\n        expected that separate efforts to standardize NETCONF data\n\
    \        models will be undertaken.\n   The YANG data modeling language [RFC6020]\
    \ has been developed for\n   specifying NETCONF data models and protocol operations,\
    \ covering the\n   Operations and the Content layers of Figure 1.\n"
- title: 1.3.  Capabilities
  contents:
  - "1.3.  Capabilities\n   A NETCONF capability is a set of functionality that supplements\
    \ the\n   base NETCONF specification.  The capability is identified by a\n   uniform\
    \ resource identifier (URI) [RFC3986].\n   Capabilities augment the base operations\
    \ of the device, describing\n   both additional operations and the content allowed\
    \ inside operations.\n   The client can discover the server's capabilities and\
    \ use any\n   additional operations, parameters, and content defined by those\n\
    \   capabilities.\n   The capability definition might name one or more dependent\n\
    \   capabilities.  To support a capability, the server MUST support any\n   capabilities\
    \ upon which it depends.\n   Section 8 defines the capabilities exchange that\
    \ allows the client to\n   discover the server's capabilities.  Section 8 also\
    \ lists the set of\n   capabilities defined in this document.\n   Additional capabilities\
    \ can be defined at any time in external\n   documents, allowing the set of capabilities\
    \ to expand over time.\n   Standards bodies can define standardized capabilities,\
    \ and\n   implementations can define proprietary ones.  A capability URI MUST\n\
    \   sufficiently distinguish the naming authority to avoid naming\n   collisions.\n"
- title: 1.4.  Separation of Configuration and State Data
  contents:
  - "1.4.  Separation of Configuration and State Data\n   The information that can\
    \ be retrieved from a running system is\n   separated into two classes, configuration\
    \ data and state data.\n   Configuration data is the set of writable data that\
    \ is required to\n   transform a system from its initial default state into its\
    \ current\n   state.  State data is the additional data on a system that is not\n\
    \   configuration data such as read-only status information and collected\n  \
    \ statistics.  When a device is performing configuration operations, a\n   number\
    \ of problems would arise if state data were included:\n   o  Comparisons of configuration\
    \ data sets would be dominated by\n      irrelevant entries such as different\
    \ statistics.\n   o  Incoming data could contain nonsensical requests, such as\
    \ attempts\n      to write read-only data.\n   o  The data sets would be large.\n\
    \   o  Archived data could contain values for read-only data items,\n      complicating\
    \ the processing required to restore archived data.\n   To account for these issues,\
    \ the NETCONF protocol recognizes the\n   difference between configuration data\
    \ and state data and provides\n   operations for each.  The <get-config> operation\
    \ retrieves\n   configuration data only, while the <get> operation retrieves\n\
    \   configuration and state data.\n   Note that the NETCONF protocol is focused\
    \ on the information required\n   to get the device into its desired running state.\
    \  The inclusion of\n   other important, persistent data is implementation specific.\
    \  For\n   example, user files and databases are not treated as configuration\n\
    \   data by the NETCONF protocol.\n   For example, if a local database of user\
    \ authentication data is\n   stored on the device, it is an implementation-dependent\
    \ matter\n   whether it is included in configuration data.\n"
- title: 2.  Transport Protocol Requirements
  contents:
  - "2.  Transport Protocol Requirements\n   NETCONF uses an RPC-based communication\
    \ paradigm.  A client sends a\n   series of one or more RPC request messages,\
    \ which cause the server to\n   respond with a corresponding series of RPC reply\
    \ messages.\n   The NETCONF protocol can be layered on any transport protocol\
    \ that\n   provides the required set of functionality.  It is not bound to any\n\
    \   particular transport protocol, but allows a mapping to define how it\n   can\
    \ be implemented over any specific protocol.\n   The transport protocol MUST provide\
    \ a mechanism to indicate the\n   session type (client or server) to the NETCONF\
    \ protocol layer.\n   This section details the characteristics that NETCONF requires\
    \ from\n   the underlying transport protocol.\n"
- title: 2.1.  Connection-Oriented Operation
  contents:
  - "2.1.  Connection-Oriented Operation\n   NETCONF is connection-oriented, requiring\
    \ a persistent connection\n   between peers.  This connection MUST provide reliable,\
    \ sequenced data\n   delivery.  NETCONF connections are long-lived, persisting\
    \ between\n   protocol operations.\n   In addition, resources requested from the\
    \ server for a particular\n   connection MUST be automatically released when the\
    \ connection closes,\n   making failure recovery simpler and more robust.  For\
    \ example, when a\n   lock is acquired by a client, the lock persists until either\
    \ it is\n   explicitly released or the server determines that the connection has\n\
    \   been terminated.  If a connection is terminated while the client\n   holds\
    \ a lock, the server can perform any appropriate recovery.  The\n   <lock> operation\
    \ is further discussed in Section 7.5.\n"
- title: 2.2.  Authentication, Integrity, and Confidentiality
  contents:
  - "2.2.  Authentication, Integrity, and Confidentiality\n   NETCONF connections\
    \ MUST provide authentication, data integrity,\n   confidentiality, and replay\
    \ protection.  NETCONF depends on the\n   transport protocol for this capability.\
    \  A NETCONF peer assumes that\n   appropriate levels of security and confidentiality\
    \ are provided\n   independently of this document.  For example, connections could\
    \ be\n   encrypted using Transport Layer Security (TLS) [RFC5246] or Secure\n\
    \   Shell (SSH) [RFC4251], depending on the underlying protocol.\n   NETCONF connections\
    \ MUST be authenticated.  The transport protocol is\n   responsible for authentication\
    \ of the server to the client and\n   authentication of the client to the server.\
    \  A NETCONF peer assumes\n   that the connection's authentication information\
    \ has been validated\n   by the underlying transport protocol using sufficiently\
    \ trustworthy\n   mechanisms and that the peer's identity has been sufficiently\
    \ proven.\n   One goal of NETCONF is to provide a programmatic interface to the\n\
    \   device that closely follows the functionality of the device's native\n   interface.\
    \  Therefore, it is expected that the underlying protocol\n   uses existing authentication\
    \ mechanisms available on the device.  For\n   example, a NETCONF server on a\
    \ device that supports RADIUS [RFC2865]\n   might allow the use of RADIUS to authenticate\
    \ NETCONF sessions.\n   The authentication process MUST result in an authenticated\
    \ client\n   identity whose permissions are known to the server.  The\n   authenticated\
    \ identity of a client is commonly referred to as the\n   NETCONF username.  The\
    \ username is a string of characters that match\n   the \"Char\" production from\
    \ Section 2.2 of [W3C.REC-xml-20001006].\n   The algorithm used to derive the\
    \ username is transport protocol\n   specific and in addition specific to the\
    \ authentication mechanism\n   used by the transport protocol.  The transport\
    \ protocol MUST provide\n   a username to be used by the other NETCONF layers.\n\
    \   The access permissions of a given client, identified by its NETCONF\n   username,\
    \ are part of the configuration of the NETCONF server.  These\n   permissions\
    \ MUST be enforced during the remainder of the NETCONF\n   session.  The details\
    \ of how access control is configured is outside\n   the scope of this document.\n"
- title: 2.3.  Mandatory Transport Protocol
  contents:
  - "2.3.  Mandatory Transport Protocol\n   A NETCONF implementation MUST support\
    \ the SSH transport protocol\n   mapping [RFC6242].\n"
- title: 3.  XML Considerations
  contents:
  - "3.  XML Considerations\n   XML serves as the encoding format for NETCONF, allowing\
    \ complex\n   hierarchical data to be expressed in a text format that can be read,\n\
    \   saved, and manipulated with both traditional text tools and tools\n   specific\
    \ to XML.\n   All NETCONF messages MUST be well-formed XML, encoded in UTF-8\n\
    \   [RFC3629].  If a peer receives an <rpc> message that is not well-\n   formed\
    \ XML or not encoded in UTF-8, it SHOULD reply with a\n   \"malformed-message\"\
    \ error.  If a reply cannot be sent for any reason,\n   the server MUST terminate\
    \ the session.\n   A NETCONF message MAY begin with an XML declaration (see Section\
    \ 2.8\n   of [W3C.REC-xml-20001006]).\n   This section discusses a small number\
    \ of XML-related considerations\n   pertaining to NETCONF.\n"
- title: 3.1.  Namespace
  contents:
  - "3.1.  Namespace\n   All NETCONF protocol elements are defined in the following\
    \ namespace:\n      urn:ietf:params:xml:ns:netconf:base:1.0\n   NETCONF capability\
    \ names MUST be URIs [RFC3986].  NETCONF\n   capabilities are discussed in Section\
    \ 8.\n"
- title: 3.2.  Document Type Declarations
  contents:
  - "3.2.  Document Type Declarations\n   Document type declarations (see Section\
    \ 2.8 of\n   [W3C.REC-xml-20001006]) MUST NOT appear in NETCONF content.\n"
- title: 4.  RPC Model
  contents:
  - "4.  RPC Model\n   The NETCONF protocol uses an RPC-based communication model.\
    \  NETCONF\n   peers use <rpc> and <rpc-reply> elements to provide transport-\n\
    \   protocol-independent framing of NETCONF requests and responses.\n   The syntax\
    \ and XML encoding of the Messages-layer RPCs are formally\n   defined in the\
    \ XML schema in Appendix B.\n"
- title: 4.1.  <rpc> Element
  contents:
  - "4.1.  <rpc> Element\n   The <rpc> element is used to enclose a NETCONF request\
    \ sent from the\n   client to the server.\n   The <rpc> element has a mandatory\
    \ attribute \"message-id\", which is a\n   string chosen by the sender of the\
    \ RPC that will commonly encode a\n   monotonically increasing integer.  The receiver\
    \ of the RPC does not\n   decode or interpret this string but simply saves it\
    \ to be used as a\n   \"message-id\" attribute in any resulting <rpc-reply> message.\
    \  The\n   sender MUST ensure that the \"message-id\" value is normalized\n  \
    \ according to the XML attribute value normalization rules defined in\n   [W3C.REC-xml-20001006]\
    \ if the sender wants the string to be returned\n   unmodified.  For example:\n\
    \       <rpc message-id=\"101\"\n            xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n         <some-method>\n           <!-- method parameters here... -->\n   \
    \      </some-method>\n       </rpc>\n   If additional attributes are present\
    \ in an <rpc> element, a NETCONF\n   peer MUST return them unmodified in the <rpc-reply>\
    \ element.  This\n   includes any \"xmlns\" attributes.\n   The name and parameters\
    \ of an RPC are encoded as the contents of the\n   <rpc> element.  The name of\
    \ the RPC is an element directly inside the\n   <rpc> element, and any parameters\
    \ are encoded inside this element.\n   The following example invokes a method\
    \ called <my-own-method>, which\n   has two parameters, <my-first-parameter>,\
    \ with a value of \"14\", and\n   <another-parameter>, with a value of \"fred\"\
    :\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <my-own-method xmlns=\"http://example.net/me/my-own/1.0\">\n       \
    \  <my-first-parameter>14</my-first-parameter>\n         <another-parameter>fred</another-parameter>\n\
    \       </my-own-method>\n     </rpc>\n   The following example invokes a <rock-the-house>\
    \ method with a\n   <zip-code> parameter of \"27606-0100\":\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <rock-the-house\
    \ xmlns=\"http://example.net/rock/1.0\">\n         <zip-code>27606-0100</zip-code>\n\
    \       </rock-the-house>\n     </rpc>\n   The following example invokes the NETCONF\
    \ <get> method with no\n   parameters:\n     <rpc message-id=\"101\"\n       \
    \   xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <get/>\n     </rpc>\n"
- title: 4.2.  <rpc-reply> Element
  contents:
  - "4.2.  <rpc-reply> Element\n   The <rpc-reply> message is sent in response to\
    \ an <rpc> message.\n   The <rpc-reply> element has a mandatory attribute \"message-id\"\
    , which\n   is equal to the \"message-id\" attribute of the <rpc> for which this\
    \ is\n   a response.\n   A NETCONF server MUST also return any additional attributes\
    \ included\n   in the <rpc> element unmodified in the <rpc-reply> element.\n \
    \  The response data is encoded as one or more child elements to the\n   <rpc-reply>\
    \ element.\n   For example:\n   The following <rpc> element invokes the NETCONF\
    \ <get> method and\n   includes an additional attribute called \"user-id\".  Note\
    \ that the\n   \"user-id\" attribute is not in the NETCONF namespace.  The returned\n\
    \   <rpc-reply> element returns the \"user-id\" attribute, as well as the\n  \
    \ requested content.\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    \n          xmlns:ex=\"http://example.net/content/1.0\"\n          ex:user-id=\"\
    fred\">\n       <get/>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n    \
    \      xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\n          xmlns:ex=\"\
    http://example.net/content/1.0\"\n          ex:user-id=\"fred\">\n       <data>\n\
    \         <!-- contents here... -->\n       </data>\n     </rpc-reply>\n"
- title: 4.3.  <rpc-error> Element
  contents:
  - "4.3.  <rpc-error> Element\n   The <rpc-error> element is sent in <rpc-reply>\
    \ messages if an error\n   occurs during the processing of an <rpc> request.\n\
    \   If a server encounters multiple errors during the processing of an\n   <rpc>\
    \ request, the <rpc-reply> MAY contain multiple <rpc-error>\n   elements.  However,\
    \ a server is not required to detect or report more\n   than one <rpc-error> element,\
    \ if a request contains multiple errors.\n   A server is not required to check\
    \ for particular error conditions in\n   a specific sequence.  A server MUST return\
    \ an <rpc-error> element if\n   any error conditions occur during processing.\n\
    \   A server MUST NOT return application-level- or data-model-specific\n   error\
    \ information in an <rpc-error> element for which the client does\n   not have\
    \ sufficient access rights.\n   The <rpc-error> element includes the following\
    \ information:\n   error-type:  Defines the conceptual layer that the error occurred.\n\
    \      Enumeration.  One of:\n      *  transport (layer: Secure Transport)\n \
    \     *  rpc (layer: Messages)\n      *  protocol (layer: Operations)\n      *\
    \  application (layer: Content)\n   error-tag:  Contains a string identifying\
    \ the error condition.  See\n      Appendix A for allowed values.\n   error-severity:\
    \  Contains a string identifying the error severity, as\n      determined by the\
    \ device.  One of:\n      *  error\n      *  warning\n      Note that there are\
    \ no <error-tag> values defined in this document\n      that utilize the \"warning\"\
    \ enumeration.  This is reserved for\n      future use.\n   error-app-tag:  Contains\
    \ a string identifying the data-model-specific\n      or implementation-specific\
    \ error condition, if one exists.  This\n      element will not be present if\
    \ no appropriate application error-\n      tag can be associated with a particular\
    \ error condition.  If a\n      data-model-specific and an implementation-specific\
    \ error-app-tag\n      both exist, then the data-model-specific value MUST be\
    \ used by the\n      server.\n   error-path:  Contains the absolute XPath [W3C.REC-xpath-19991116]\n\
    \      expression identifying the element path to the node that is\n      associated\
    \ with the error being reported in a particular\n      <rpc-error> element.  This\
    \ element will not be present if no\n      appropriate payload element or datastore\
    \ node can be associated\n      with a particular error condition.\n      The\
    \ XPath expression is interpreted in the following context:\n      *  The set\
    \ of namespace declarations are those in scope on the\n         <rpc-error> element.\n\
    \      *  The set of variable bindings is empty.\n      *  The function library\
    \ is the core function library.\n      The context node depends on the node associated\
    \ with the error\n      being reported:\n      *  If a payload element can be\
    \ associated with the error, the\n         context node is the rpc request's document\
    \ node (i.e., the\n         <rpc> element).\n      *  Otherwise, the context node\
    \ is the root of all data models,\n         i.e., the node that has the top-level\
    \ nodes from all data\n         models as children.\n   error-message:  Contains\
    \ a string suitable for human display that\n      describes the error condition.\
    \  This element will not be present\n      if no appropriate message is provided\
    \ for a particular error\n      condition.  This element SHOULD include an \"\
    xml:lang\" attribute as\n      defined in [W3C.REC-xml-20001006] and discussed\
    \ in [RFC3470].\n   error-info:  Contains protocol- or data-model-specific error\
    \ content.\n      This element will not be present if no such error content is\n\
    \      provided for a particular error condition.  The list in Appendix A\n  \
    \    defines any mandatory error-info content for each error.  After\n      any\
    \ protocol-mandated content, a data model definition MAY mandate\n      that certain\
    \ application-layer error information be included in\n      the error-info container.\
    \  An implementation MAY include\n      additional elements to provide extended\
    \ and/or implementation-\n      specific debugging information.\n   Appendix A\
    \ enumerates the standard NETCONF errors.\n   Example:  An error is returned if\
    \ an <rpc> element is received\n      without a \"message-id\" attribute.  Note\
    \ that only in this case is\n      it acceptable for the NETCONF peer to omit\
    \ the \"message-id\"\n      attribute in the <rpc-reply> element.\n     <rpc xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <get-config>\n         <source>\n\
    \           <running/>\n         </source>\n       </get-config>\n     </rpc>\n\
    \     <rpc-reply xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <rpc-error>\n\
    \         <error-type>rpc</error-type>\n         <error-tag>missing-attribute</error-tag>\n\
    \         <error-severity>error</error-severity>\n         <error-info>\n    \
    \       <bad-attribute>message-id</bad-attribute>\n           <bad-element>rpc</bad-element>\n\
    \         </error-info>\n       </rpc-error>\n     </rpc-reply>\n   The following\
    \ <rpc-reply> illustrates the case of returning multiple\n   <rpc-error> elements.\n\
    \   Note that the data models used in the examples in this section use\n   the\
    \ <name> element to distinguish between multiple instances of the\n   <interface>\
    \ element.\n     <rpc-reply message-id=\"101\"\n       xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    \n       xmlns:xc=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <rpc-error>\n\
    \         <error-type>application</error-type>\n         <error-tag>invalid-value</error-tag>\n\
    \         <error-severity>error</error-severity>\n         <error-path xmlns:t=\"\
    http://example.com/schema/1.2/config\">\n           /t:top/t:interface[t:name=\"\
    Ethernet0/0\"]/t:mtu\n         </error-path>\n         <error-message xml:lang=\"\
    en\">\n           MTU value 25000 is not within range 256..9192\n         </error-message>\n\
    \       </rpc-error>\n       <rpc-error>\n         <error-type>application</error-type>\n\
    \         <error-tag>invalid-value</error-tag>\n         <error-severity>error</error-severity>\n\
    \         <error-path xmlns:t=\"http://example.com/schema/1.2/config\">\n    \
    \       /t:top/t:interface[t:name=\"Ethernet1/0\"]/t:address/t:name\n        \
    \ </error-path>\n         <error-message xml:lang=\"en\">\n           Invalid\
    \ IP address for interface Ethernet1/0\n         </error-message>\n       </rpc-error>\n\
    \     </rpc-reply>\n"
- title: 4.4.  <ok> Element
  contents:
  - "4.4.  <ok> Element\n   The <ok> element is sent in <rpc-reply> messages if no\
    \ errors or\n   warnings occurred during the processing of an <rpc> request, and\
    \ no\n   data was returned from the operation.  For example:\n     <rpc-reply\
    \ message-id=\"101\"\n                xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n"
- title: 4.5.  Pipelining
  contents:
  - "4.5.  Pipelining\n   NETCONF <rpc> requests MUST be processed serially by the\
    \ managed\n   device.  Additional <rpc> requests MAY be sent before previous ones\n\
    \   have been completed.  The managed device MUST send responses only in\n   the\
    \ order the requests were received.\n"
- title: 5.  Configuration Model
  contents:
  - "5.  Configuration Model\n   NETCONF provides an initial set of operations and\
    \ a number of\n   capabilities that can be used to extend the base.  NETCONF peers\n\
    \   exchange device capabilities when the session is initiated as\n   described\
    \ in Section 8.1.\n"
- title: 5.1.  Configuration Datastores
  contents:
  - "5.1.  Configuration Datastores\n   NETCONF defines the existence of one or more\
    \ configuration datastores\n   and allows configuration operations on them.  A\
    \ configuration\n   datastore is defined as the complete set of configuration\
    \ data that\n   is required to get a device from its initial default state into\
    \ a\n   desired operational state.  The configuration datastore does not\n   include\
    \ state data or executive commands.\n   The running configuration datastore holds\
    \ the complete configuration\n   currently active on the network device.  Only\
    \ one configuration\n   datastore of this type exists on the device, and it is\
    \ always\n   present.  NETCONF protocol operations refer to this datastore using\n\
    \   the <running> element.\n   Only the <running> configuration datastore is present\
    \ in the base\n   model.  Additional configuration datastores MAY be defined by\n\
    \   capabilities.  Such configuration datastores are available only on\n   devices\
    \ that advertise the capabilities.\n   The capabilities in Sections 8.3 and 8.7\
    \ define the <candidate> and\n   <startup> configuration datastores, respectively.\n"
- title: 5.2.  Data Modeling
  contents:
  - "5.2.  Data Modeling\n   Data modeling and content issues are outside the scope\
    \ of the NETCONF\n   protocol.  An assumption is made that the device's data model\
    \ is\n   well-known to the application and that both parties are aware of\n  \
    \ issues such as the layout, containment, keying, lookup, replacement,\n   and\
    \ management of the data, as well as any other constraints imposed\n   by the\
    \ data model.\n   NETCONF carries configuration data inside the <config> element\
    \ that\n   is specific to the device's data model.  The protocol treats the\n\
    \   contents of that element as opaque data.  The device uses\n   capabilities\
    \ to announce the set of data models that the device\n   implements.  The capability\
    \ definition details the operation and\n   constraints imposed by data model.\n\
    \   Devices and managers can support multiple data models, including both\n  \
    \ standard and proprietary data models.\n"
- title: 6.  Subtree Filtering
  contents:
  - '6.  Subtree Filtering

    '
- title: 6.1.  Overview
  contents:
  - "6.1.  Overview\n   XML subtree filtering is a mechanism that allows an application\
    \ to\n   select particular XML subtrees to include in the <rpc-reply> for a\n\
    \   <get> or <get-config> operation.  A small set of filters for\n   inclusion,\
    \ simple content exact-match, and selection is provided,\n   which allows some\
    \ useful, but also very limited, selection\n   mechanisms.  The server does not\
    \ need to utilize any data-model-\n   specific semantics during processing, allowing\
    \ for simple and\n   centralized implementation strategies.\n   Conceptually,\
    \ a subtree filter is comprised of zero or more element\n   subtrees, which represent\
    \ the filter selection criteria.  At each\n   containment level within a subtree,\
    \ the set of sibling nodes is\n   logically processed by the server to determine\
    \ if its subtree and\n   path of elements to the root are included in the filter\
    \ output.\n   Each node specified in a subtree filter represents an inclusive\n\
    \   filter.  Only associated nodes in underlying data model(s) within the\n  \
    \ specified datastore on the server are selected by the filter.  A node\n   is\
    \ selected if it matches the selection criteria and hierarchy of\n   elements\
    \ given in the filter data, except that the filter absolute\n   path name is adjusted\
    \ to start from the layer below <filter>.\n   Response messages contain only the\
    \ subtrees selected by the filter.\n   Any selection criteria that were present\
    \ in the request, within a\n   particular selected subtree, are also included\
    \ in the response.  Note\n   that some elements expressed in the filter as leaf\
    \ nodes will be\n   expanded (i.e., subtrees included) in the filter output. \
    \ Specific\n   data instances are not duplicated in the response in the event\
    \ that\n   the request contains multiple filter subtree expressions that select\n\
    \   the same data.\n"
- title: 6.2.  Subtree Filter Components
  contents:
  - "6.2.  Subtree Filter Components\n   A subtree filter is comprised of XML elements\
    \ and their XML\n   attributes.  There are five types of components that can be\
    \ present\n   in a subtree filter:\n   o  Namespace Selection\n   o  Attribute\
    \ Match Expressions\n   o  Containment Nodes\n   o  Selection Nodes\n   o  Content\
    \ Match Nodes\n"
- title: 6.2.1.  Namespace Selection
  contents:
  - "6.2.1.  Namespace Selection\n   A namespace is considered to match (for filter\
    \ purposes) if the XML\n   namespace associated with a particular node within\
    \ the <filter>\n   element is the same as in the underlying data model.  Note\
    \ that\n   namespace selection cannot be used by itself.  At least one element\n\
    \   MUST be specified in the filter if any elements are to be included in\n  \
    \ the filter output.\n   An XML namespace wildcard mechanism is defined for subtree\
    \ filtering.\n   If an element within the <filter> element is not qualified by\
    \ a\n   namespace (e.g., xmlns=\"\"), then the server MUST evaluate all the XML\n\
    \   namespaces it supports, when processing that subtree filter node.\n   This\
    \ wildcard mechanism is not applicable to XML attributes.\n   Note that prefix\
    \ values for qualified namespaces are not relevant\n   when comparing filter elements\
    \ to elements in the underlying data\n   model.\n   Example:\n     <filter type=\"\
    subtree\">\n       <top xmlns=\"http://example.com/schema/1.2/config\"/>\n   \
    \  </filter>\n   In this example, the <top> element is a selection node, and only\
    \ this\n   node in the \"http://example.com/schema/1.2/config\" namespace and\
    \ any\n   child nodes (from the underlying data model) will be included in the\n\
    \   filter output.\n"
- title: 6.2.2.  Attribute Match Expressions
  contents:
  - "6.2.2.  Attribute Match Expressions\n   An attribute that appears in a subtree\
    \ filter is part of an\n   \"attribute match expression\".  Any number of (unqualified\
    \ or\n   qualified) XML attributes MAY be present in any type of filter node.\n\
    \   In addition to the selection criteria normally applicable to that\n   node,\
    \ the selected data MUST have matching values for every attribute\n   specified\
    \ in the node.  If an element is not defined to include a\n   specified attribute,\
    \ then it is not selected in the filter output.\n   Example:\n     <filter type=\"\
    subtree\">\n       <t:top xmlns:t=\"http://example.com/schema/1.2/config\">\n\
    \         <t:interfaces>\n           <t:interface t:ifName=\"eth0\"/>\n      \
    \   </t:interfaces>\n       </t:top>\n     </filter>\n   In this example, the\
    \ <top> and <interfaces> elements are containment\n   nodes, the <interface> element\
    \ is a selection node, and \"ifName\" is\n   an attribute match expression.  Only\
    \ \"interface\" nodes in the\n   \"http://example.com/schema/1.2/config\" namespace\
    \ that have an\n   \"ifName\" attribute with the value \"eth0\" and occur within\n\
    \   \"interfaces\" nodes within \"top\" nodes will be included in the filter\n\
    \   output.\n"
- title: 6.2.3.  Containment Nodes
  contents:
  - "6.2.3.  Containment Nodes\n   Nodes that contain child elements within a subtree\
    \ filter are called\n   \"containment nodes\".  Each child element can be any\
    \ type of node,\n   including another containment node.  For each containment\
    \ node\n   specified in a subtree filter, all data model instances that exactly\n\
    \   match the specified namespaces, element hierarchy, and any attribute\n   match\
    \ expressions are included in the filter output.\n   Example:\n     <filter type=\"\
    subtree\">\n       <top xmlns=\"http://example.com/schema/1.2/config\">\n    \
    \     <users/>\n       </top>\n     </filter>\n   In this example, the <top> element\
    \ is a containment node.\n"
- title: 6.2.4.  Selection Nodes
  contents:
  - "6.2.4.  Selection Nodes\n   An empty leaf node within a filter is called a \"\
    selection node\", and\n   it represents an \"explicit selection\" filter on the\
    \ underlying data\n   model.  Presence of any selection nodes within a set of\
    \ sibling nodes\n   will cause the filter to select the specified subtree(s) and\
    \ suppress\n   automatic selection of the entire set of sibling nodes in the\n\
    \   underlying data model.  For filtering purposes, an empty leaf node\n   can\
    \ be declared either with an empty tag (e.g., <foo/>) or with\n   explicit start\
    \ and end tags (e.g., <foo> </foo>).  Any whitespace\n   characters are ignored\
    \ in this form.\n   Example:\n     <filter type=\"subtree\">\n       <top xmlns=\"\
    http://example.com/schema/1.2/config\">\n         <users/>\n       </top>\n  \
    \   </filter>\n   In this example, the <top> element is a containment node, and\
    \ the\n   <users> element is a selection node.  Only \"users\" nodes in the\n\
    \   \"http://example.com/schema/1.2/config\" namespace that occur within a\n \
    \  <top> element that is the root of the configuration datastore will be\n   included\
    \ in the filter output.\n"
- title: 6.2.5.  Content Match Nodes
  contents:
  - "6.2.5.  Content Match Nodes\n   A leaf node that contains simple content is called\
    \ a \"content match\n   node\".  It is used to select some or all of its sibling\
    \ nodes for\n   filter output, and it represents an exact-match filter on the\
    \ leaf\n   node element content.  The following constraints apply to content\n\
    \   match nodes:\n   o  A content match node MUST NOT contain nested elements.\n\
    \   o  Multiple content match nodes (i.e., sibling nodes) are logically\n    \
    \  combined in an \"AND\" expression.\n   o  Filtering of mixed content is not\
    \ supported.\n   o  Filtering of list content is not supported.\n   o  Filtering\
    \ of whitespace-only content is not supported.\n   o  A content match node MUST\
    \ contain non-whitespace characters.  An\n      empty element (e.g., <foo></foo>)\
    \ will be interpreted as a\n      selection node (e.g., <foo/>).\n   o  Leading\
    \ and trailing whitespace characters are ignored, but any\n      whitespace characters\
    \ within a block of text characters are not\n      ignored or modified.\n   If\
    \ all specified sibling content match nodes in a subtree filter\n   expression\
    \ are \"true\", then the filter output nodes are selected in\n   the following\
    \ manner:\n   o  Each content match node in the sibling set is included in the\n\
    \      filter output.\n   o  If any containment nodes are present in the sibling\
    \ set, then they\n      are processed further and included if any nested filter\
    \ criteria\n      are also met.\n   o  If any selection nodes are present in the\
    \ sibling set, then all of\n      them are included in the filter output.\n  \
    \ o  If any sibling nodes of the selection node are instance identifier\n    \
    \  components for a conceptual data structure (e.g., list key leaf),\n      then\
    \ they MAY also be included in the filter output.\n   o  Otherwise (i.e., there\
    \ are no selection or containment nodes in\n      the filter sibling set), all\
    \ the nodes defined at this level in\n      the underlying data model (and their\
    \ subtrees, if any) are\n      returned in the filter output.\n   If any of the\
    \ sibling content match node tests are \"false\", then no\n   further filter processing\
    \ is performed on that sibling set, and none\n   of the sibling subtrees are selected\
    \ by the filter, including the\n   content match node(s).\n   Example:\n     <filter\
    \ type=\"subtree\">\n       <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n         <users>\n           <user>\n             <name>fred</name>\n     \
    \      </user>\n         </users>\n       </top>\n     </filter>\n   In this example,\
    \ the <users> and <user> nodes are both containment\n   nodes, and <name> is a\
    \ content match node.  Since no sibling nodes of\n   <name> are specified (and\
    \ therefore no containment or selection\n   nodes), all of the sibling nodes of\
    \ <name> are returned in the filter\n   output.  Only \"user\" nodes in the\n\
    \   \"http://example.com/schema/1.2/config\" namespace that match the\n   element\
    \ hierarchy and for which the <name> element is equal to \"fred\"\n   will be\
    \ included in the filter output.\n"
- title: 6.3.  Subtree Filter Processing
  contents:
  - "6.3.  Subtree Filter Processing\n   The filter output (the set of selected nodes)\
    \ is initially empty.\n   Each subtree filter can contain one or more data model\
    \ fragments,\n   which represent portions of the data model that will be selected\n\
    \   (with all child nodes) in the filter output.\n   Each subtree data fragment\
    \ is compared by the server to the internal\n   data models supported by the server.\
    \  If the entire subtree data-\n   fragment filter (starting from the root to\
    \ the innermost element\n   specified in the filter) exactly matches a corresponding\
    \ portion of\n   the supported data model, then that node and all its children\
    \ are\n   included in the result data.\n   The server processes all nodes with\
    \ the same parent node (sibling\n   set) together, starting from the root to the\
    \ leaf nodes.  The root\n   elements in the filter are considered in the same\
    \ sibling set\n   (assuming they are in the same namespace), even though they\
    \ do not\n   have a common parent.\n   For each sibling set, the server determines\
    \ which nodes are included\n   (or potentially included) in the filter output,\
    \ and which sibling\n   subtrees are excluded (pruned) from the filter output.\
    \  The server\n   first determines which types of nodes are present in the sibling\
    \ set\n   and processes the nodes according to the rules for their type.  If\n\
    \   any nodes in the sibling set are selected, then the process is\n   recursively\
    \ applied to the sibling sets of each selected node.  The\n   algorithm continues\
    \ until all sibling sets in all subtrees specified\n   in the filter have been\
    \ processed.\n"
- title: 6.4.  Subtree Filtering Examples
  contents:
  - '6.4.  Subtree Filtering Examples

    '
- title: 6.4.1.  No Filter
  contents:
  - "6.4.1.  No Filter\n   Leaving out the filter on the <get> operation returns the\
    \ entire data\n   model.\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get/>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <data>\n         <!-- ... entire\
    \ set of data returned ... -->\n       </data>\n     </rpc-reply>\n"
- title: 6.4.2.  Empty Filter
  contents:
  - "6.4.2.  Empty Filter\n   An empty filter will select nothing because no content\
    \ match or\n   selection nodes are present.  This is not an error.  The <filter>\n\
    \   element's \"type\" attribute used in these examples is discussed\n   further\
    \ in Section 7.1.\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get>\n         <filter type=\"subtree\">\n         </filter>\n    \
    \   </get>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <data>\n       </data>\n  \
    \   </rpc-reply>\n"
- title: 6.4.3.  Select the Entire <users> Subtree
  contents:
  - "6.4.3.  Select the Entire <users> Subtree\n   The filter in this example contains\
    \ one selection node (<users>), so\n   just that subtree is selected by the filter.\
    \  This example represents\n   the fully populated <users> data model in most\
    \ of the filter examples\n   that follow.  In a real data model, the <company-info>\
    \ would not\n   likely be returned with the list of users for a particular host\
    \ or\n   network.\n   NOTE: The filtering and configuration examples used in this\
    \ document\n   appear in the namespace \"http://example.com/schema/1.2/config\"\
    .  The\n   root element of this namespace is <top>.  The <top> element and its\n\
    \   descendents represent an example configuration data model only.\n     <rpc\
    \ message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get-config>\n         <source>\n           <running/>\n         </source>\n\
    \         <filter type=\"subtree\">\n           <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n             <users/>\n           </top>\n         </filter>\n       </get-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <data>\n         <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n           <users>\n             <user>\n               <name>root</name>\n\
    \               <type>superuser</type>\n               <full-name>Charlie Root</full-name>\n\
    \               <company-info>\n                 <dept>1</dept>\n            \
    \     <id>1</id>\n               </company-info>\n             </user>\n     \
    \        <user>\n               <name>fred</name>\n               <type>admin</type>\n\
    \               <full-name>Fred Flintstone</full-name>\n               <company-info>\n\
    \                 <dept>2</dept>\n                 <id>2</id>\n              \
    \ </company-info>\n             </user>\n             <user>\n               <name>barney</name>\n\
    \               <type>admin</type>\n               <full-name>Barney Rubble</full-name>\n\
    \               <company-info>\n                 <dept>2</dept>\n            \
    \     <id>3</id>\n               </company-info>\n             </user>\n     \
    \      </users>\n         </top>\n       </data>\n     </rpc-reply>\n   The following\
    \ filter request would have produced the same result, but\n   only because the\
    \ container <users> defines one child element\n   (<user>).\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <get-config>\n\
    \         <source>\n           <running/>\n         </source>\n         <filter\
    \ type=\"subtree\">\n           <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n             <users>\n               <user/>\n             </users>\n     \
    \      </top>\n         </filter>\n       </get-config>\n     </rpc>\n"
- title: 6.4.4.  Select All <name> Elements within the <users> Subtree
  contents:
  - "6.4.4.  Select All <name> Elements within the <users> Subtree\n   This filter\
    \ contains two containment nodes (<users>, <user>) and one\n   selection node\
    \ (<name>).  All instances of the <name> element in the\n   same sibling set are\
    \ selected in the filter output.  The client might\n   need to know that <name>\
    \ is used as an instance identifier in this\n   particular data structure, but\
    \ the server does not need to know that\n   meta-data in order to process the\
    \ request.\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get-config>\n         <source>\n           <running/>\n         </source>\n\
    \         <filter type=\"subtree\">\n           <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n             <users>\n               <user>\n                 <name/>\n   \
    \            </user>\n             </users>\n           </top>\n         </filter>\n\
    \       </get-config>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n     \
    \     xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <data>\n    \
    \     <top xmlns=\"http://example.com/schema/1.2/config\">\n           <users>\n\
    \             <user>\n               <name>root</name>\n             </user>\n\
    \             <user>\n               <name>fred</name>\n             </user>\n\
    \             <user>\n               <name>barney</name>\n             </user>\n\
    \           </users>\n         </top>\n       </data>\n     </rpc-reply>\n"
- title: 6.4.5.  One Specific <user> Entry
  contents:
  - "6.4.5.  One Specific <user> Entry\n   This filter contains two containment nodes\
    \ (<users>, <user>) and one\n   content match node (<name>).  All instances of\
    \ the sibling set\n   containing <name> for which the value of <name> equals \"\
    fred\" are\n   selected in the filter output.\n     <rpc message-id=\"101\"\n\
    \          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <get-config>\n\
    \         <source>\n           <running/>\n         </source>\n         <filter\
    \ type=\"subtree\">\n           <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n             <users>\n               <user>\n                 <name>fred</name>\n\
    \               </user>\n             </users>\n           </top>\n         </filter>\n\
    \       </get-config>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n     \
    \     xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <data>\n    \
    \     <top xmlns=\"http://example.com/schema/1.2/config\">\n           <users>\n\
    \             <user>\n               <name>fred</name>\n               <type>admin</type>\n\
    \               <full-name>Fred Flintstone</full-name>\n               <company-info>\n\
    \                 <dept>2</dept>\n                 <id>2</id>\n              \
    \ </company-info>\n             </user>\n           </users>\n         </top>\n\
    \       </data>\n     </rpc-reply>\n"
- title: 6.4.6.  Specific Elements from a Specific <user> Entry
  contents:
  - "6.4.6.  Specific Elements from a Specific <user> Entry\n   This filter contains\
    \ two containment nodes (<users>, <user>), one\n   content match node (<name>),\
    \ and two selection nodes (<type>,\n   <full-name>).  All instances of the <type>\
    \ and <full-name> elements\n   in the same sibling set containing <name> for which\
    \ the value of\n   <name> equals \"fred\" are selected in the filter output. \
    \ The\n   <company-info> element is not included because the sibling set\n   contains\
    \ selection nodes.\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get-config>\n         <source>\n           <running/>\n         </source>\n\
    \         <filter type=\"subtree\">\n           <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n             <users>\n               <user>\n                 <name>fred</name>\n\
    \                 <type/>\n                 <full-name/>\n               </user>\n\
    \             </users>\n           </top>\n         </filter>\n       </get-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <data>\n         <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n           <users>\n             <user>\n               <name>fred</name>\n\
    \               <type>admin</type>\n               <full-name>Fred Flintstone</full-name>\n\
    \             </user>\n           </users>\n         </top>\n       </data>\n\
    \     </rpc-reply>\n"
- title: 6.4.7.  Multiple Subtrees
  contents:
  - "6.4.7.  Multiple Subtrees\n   This filter contains three subtrees (name=root,\
    \ fred, barney).\n   The \"root\" subtree filter contains two containment nodes\
    \ (<users>,\n   <user>), one content match node (<name>), and one selection node\n\
    \   (<company-info>).  The subtree selection criteria are met, and just\n   the\
    \ company-info subtree for \"root\" is selected in the filter output.\n   The\
    \ \"fred\" subtree filter contains three containment nodes (<users>,\n   <user>,\
    \ <company-info>), one content match node (<name>), and one\n   selection node\
    \ (<id>).  The subtree selection criteria are met, and\n   just the <id> element\
    \ within the company-info subtree for \"fred\" is\n   selected in the filter output.\n\
    \   The \"barney\" subtree filter contains three containment nodes\n   (<users>,\
    \ <user>, <company-info>), two content match nodes (<name>,\n   <type>), and one\
    \ selection node (<dept>).  The subtree selection\n   criteria are not met because\
    \ user \"barney\" is not a \"superuser\", and\n   the entire subtree for \"barney\"\
    \ (including its parent <user> entry)\n   is excluded from the filter output.\n\
    \     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get-config>\n         <source>\n           <running/>\n         </source>\n\
    \         <filter type=\"subtree\">\n           <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n             <users>\n               <user>\n                 <name>root</name>\n\
    \                 <company-info/>\n               </user>\n               <user>\n\
    \                 <name>fred</name>\n                 <company-info>\n       \
    \            <id/>\n                 </company-info>\n               </user>\n\
    \               <user>\n                 <name>barney</name>\n               \
    \  <type>superuser</type>\n                 <company-info>\n                 \
    \  <dept/>\n                 </company-info>\n               </user>\n       \
    \      </users>\n           </top>\n         </filter>\n       </get-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n                xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <data>\n         <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n           <users>\n             <user>\n               <name>root</name>\n\
    \               <company-info>\n                 <dept>1</dept>\n            \
    \     <id>1</id>\n               </company-info>\n             </user>\n     \
    \        <user>\n               <name>fred</name>\n               <company-info>\n\
    \                 <id>2</id>\n               </company-info>\n             </user>\n\
    \           </users>\n         </top>\n       </data>\n     </rpc-reply>\n"
- title: 6.4.8.  Elements with Attribute Naming
  contents:
  - "6.4.8.  Elements with Attribute Naming\n   In this example, the filter contains\
    \ one containment node\n   (<interfaces>), one attribute match expression (\"\
    ifName\"), and one\n   selection node (<interface>).  All instances of the <interface>\n\
    \   subtree that have an \"ifName\" attribute equal to \"eth0\" are selected\n\
    \   in the filter output.  The filter data elements and attributes are\n   qualified\
    \ because the \"ifName\" attribute will not be considered part\n   of the \"schema/1.2\"\
    \ namespace if it is unqualified.\n     <rpc message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <get>\n         <filter type=\"\
    subtree\">\n           <t:top xmlns:t=\"http://example.com/schema/1.2/stats\"\
    >\n             <t:interfaces>\n               <t:interface t:ifName=\"eth0\"\
    />\n             </t:interfaces>\n           </t:top>\n         </filter>\n  \
    \     </get>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <data>\n         <t:top xmlns:t=\"\
    http://example.com/schema/1.2/stats\">\n           <t:interfaces>\n          \
    \   <t:interface t:ifName=\"eth0\">\n               <t:ifInOctets>45621</t:ifInOctets>\n\
    \               <t:ifOutOctets>774344</t:ifOutOctets>\n             </t:interface>\n\
    \           </t:interfaces>\n         </t:top>\n       </data>\n     </rpc-reply>\n\
    \   If \"ifName\" were a child node instead of an attribute, then the\n   following\
    \ request would produce similar results.\n     <rpc message-id=\"101\"\n     \
    \     xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <get>\n     \
    \    <filter type=\"subtree\">\n           <top xmlns=\"http://example.com/schema/1.2/stats\"\
    >\n             <interfaces>\n               <interface>\n                 <ifName>eth0</ifName>\n\
    \               </interface>\n             </interfaces>\n           </top>\n\
    \         </filter>\n       </get>\n     </rpc>\n"
- title: 7.  Protocol Operations
  contents:
  - "7.  Protocol Operations\n   The NETCONF protocol provides a small set of low-level\
    \ operations to\n   manage device configurations and retrieve device state information.\n\
    \   The base protocol provides operations to retrieve, configure, copy,\n   and\
    \ delete configuration datastores.  Additional operations are\n   provided, based\
    \ on the capabilities advertised by the device.\n   The base protocol includes\
    \ the following protocol operations:\n   o  get\n   o  get-config\n   o  edit-config\n\
    \   o  copy-config\n   o  delete-config\n   o  lock\n   o  unlock\n   o  close-session\n\
    \   o  kill-session\n   A protocol operation can fail for various reasons, including\n\
    \   \"operation not supported\".  An initiator SHOULD NOT assume that any\n  \
    \ operation will always succeed.  The return values in any RPC reply\n   SHOULD\
    \ be checked for error responses.\n   The syntax and XML encoding of the protocol\
    \ operations are formally\n   defined in the YANG module in Appendix C.  The following\
    \ sections\n   describe the semantics of each protocol operation.\n"
- title: 7.1.  <get-config>
  contents:
  - "7.1.  <get-config>\n   Description:  Retrieve all or part of a specified configuration\n\
    \      datastore.\n   Parameters:\n      source:  Name of the configuration datastore\
    \ being queried, such\n         as <running/>.\n      filter:  This parameter\
    \ identifies the portions of the device\n         configuration datastore to retrieve.\
    \  If this parameter is not\n         present, the entire configuration is returned.\n\
    \         The <filter> element MAY optionally contain a \"type\" attribute.\n\
    \         This attribute indicates the type of filtering syntax used\n       \
    \  within the <filter> element.  The default filtering mechanism\n         in\
    \ NETCONF is referred to as subtree filtering and is described\n         in Section\
    \ 6.  The value \"subtree\" explicitly identifies this\n         type of filtering.\n\
    \         If the NETCONF peer supports the :xpath capability\n         (Section\
    \ 8.9), the value \"xpath\" MAY be used to indicate that\n         the \"select\"\
    \ attribute on the <filter> element contains an\n         XPath expression.\n\
    \   Positive Response:  If the device can satisfy the request, the server\n  \
    \    sends an <rpc-reply> element containing a <data> element with the\n     \
    \ results of the query.\n   Negative Response:  An <rpc-error> element is included\
    \ in the\n      <rpc-reply> if the request cannot be completed for any reason.\n\
    \   Example:  To retrieve the entire <users> subtree:\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <get-config>\n\
    \         <source>\n           <running/>\n         </source>\n         <filter\
    \ type=\"subtree\">\n           <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n             <users/>\n           </top>\n         </filter>\n       </get-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <data>\n         <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n           <users>\n             <user>\n               <name>root</name>\n\
    \               <type>superuser</type>\n               <full-name>Charlie Root</full-name>\n\
    \               <company-info>\n                 <dept>1</dept>\n            \
    \     <id>1</id>\n               </company-info>\n             </user>\n     \
    \        <!-- additional <user> elements appear here... -->\n           </users>\n\
    \         </top>\n       </data>\n     </rpc-reply>\n      Section 6 contains\
    \ additional examples of subtree filtering.\n"
- title: 7.2.  <edit-config>
  contents:
  - "7.2.  <edit-config>\n   Description:\n      The <edit-config> operation loads\
    \ all or part of a specified\n      configuration to the specified target configuration\
    \ datastore.\n      This operation allows the new configuration to be expressed\
    \ in\n      several ways, such as using a local file, a remote file, or\n    \
    \  inline.  If the target configuration datastore does not exist, it\n      will\
    \ be created.\n      If a NETCONF peer supports the :url capability (Section 8.8),\
    \ the\n      <url> element can appear instead of the <config> parameter.\n   \
    \   The device analyzes the source and target configurations and\n      performs\
    \ the requested changes.  The target configuration is not\n      necessarily replaced,\
    \ as with the <copy-config> message.  Instead,\n      the target configuration\
    \ is changed in accordance with the\n      source's data and requested operations.\n\
    \      If the <edit-config> operation contains multiple sub-operations\n     \
    \ that apply to the same conceptual node in the underlying data\n      model,\
    \ then the result of the operation is undefined (i.e.,\n      outside the scope\
    \ of the NETCONF protocol).\n   Attributes:\n      operation:  Elements in the\
    \ <config> subtree MAY contain an\n         \"operation\" attribute, which belongs\
    \ to the NETCONF namespace\n         defined in Section 3.1.  The attribute identifies\
    \ the point in\n         the configuration to perform the operation and MAY appear\
    \ on\n         multiple elements throughout the <config> subtree.\n         If\
    \ the \"operation\" attribute is not specified, the\n         configuration is\
    \ merged into the configuration datastore.\n         The \"operation\" attribute\
    \ has one of the following values:\n         merge:  The configuration data identified\
    \ by the element\n            containing this attribute is merged with the configuration\n\
    \            at the corresponding level in the configuration datastore\n     \
    \       identified by the <target> parameter.  This is the default\n         \
    \   behavior.\n         replace:  The configuration data identified by the element\n\
    \            containing this attribute replaces any related configuration\n  \
    \          in the configuration datastore identified by the <target>\n       \
    \     parameter.  If no such configuration data exists in the\n            configuration\
    \ datastore, it is created.  Unlike a\n            <copy-config> operation, which\
    \ replaces the entire target\n            configuration, only the configuration\
    \ actually present in\n            the <config> parameter is affected.\n     \
    \    create:  The configuration data identified by the element\n            containing\
    \ this attribute is added to the configuration if\n            and only if the\
    \ configuration data does not already exist in\n            the configuration\
    \ datastore.  If the configuration data\n            exists, an <rpc-error> element\
    \ is returned with an\n            <error-tag> value of \"data-exists\".\n   \
    \      delete:  The configuration data identified by the element\n           \
    \ containing this attribute is deleted from the configuration\n            if\
    \ and only if the configuration data currently exists in\n            the configuration\
    \ datastore.  If the configuration data does\n            not exist, an <rpc-error>\
    \ element is returned with an\n            <error-tag> value of \"data-missing\"\
    .\n         remove:  The configuration data identified by the element\n      \
    \      containing this attribute is deleted from the configuration\n         \
    \   if the configuration data currently exists in the\n            configuration\
    \ datastore.  If the configuration data does not\n            exist, the \"remove\"\
    \ operation is silently ignored by the\n            server.\n   Parameters:\n\
    \      target:  Name of the configuration datastore being edited, such as\n  \
    \       <running/> or <candidate/>.\n      default-operation:  Selects the default\
    \ operation (as described in\n         the \"operation\" attribute) for this <edit-config>\
    \ request.  The\n         default value for the <default-operation> parameter\
    \ is \"merge\".\n         The <default-operation> parameter is optional, but if\
    \ provided,\n         it has one of the following values:\n         merge:  The\
    \ configuration data in the <config> parameter is\n            merged with the\
    \ configuration at the corresponding level in\n            the target datastore.\
    \  This is the default behavior.\n         replace:  The configuration data in\
    \ the <config> parameter\n            completely replaces the configuration in\
    \ the target\n            datastore.  This is useful for loading previously saved\n\
    \            configuration data.\n         none:  The target datastore is unaffected\
    \ by the configuration\n            in the <config> parameter, unless and until\
    \ the incoming\n            configuration data uses the \"operation\" attribute\
    \ to request\n            a different operation.  If the configuration in the\
    \ <config>\n            parameter contains data for which there is not a\n   \
    \         corresponding level in the target datastore, an <rpc-error>\n      \
    \      is returned with an <error-tag> value of data-missing.\n            Using\
    \ \"none\" allows operations like \"delete\" to avoid\n            unintentionally\
    \ creating the parent hierarchy of the element\n            to be deleted.\n \
    \     test-option:  The <test-option> element MAY be specified only if\n     \
    \    the device advertises the :validate:1.1 capability\n         (Section 8.6).\n\
    \         The <test-option> element has one of the following values:\n       \
    \  test-then-set:  Perform a validation test before attempting to\n          \
    \  set.  If validation errors occur, do not perform the\n            <edit-config>\
    \ operation.  This is the default test-option.\n         set:  Perform a set without\
    \ a validation test first.\n         test-only:  Perform only the validation test,\
    \ without\n            attempting to set.\n      error-option:  The <error-option>\
    \ element has one of the following\n         values:\n         stop-on-error:\
    \  Abort the <edit-config> operation on first\n            error.  This is the\
    \ default error-option.\n         continue-on-error:  Continue to process configuration\
    \ data on\n            error; error is recorded, and negative response is generated\n\
    \            if any errors occur.\n         rollback-on-error:  If an error condition\
    \ occurs such that an\n            error severity <rpc-error> element is generated,\
    \ the server\n            will stop processing the <edit-config> operation and\
    \ restore\n            the specified configuration to its complete state at the\n\
    \            start of this <edit-config> operation.  This option requires\n  \
    \          the server to support the :rollback-on-error capability\n         \
    \   described in Section 8.5.\n      config:  A hierarchy of configuration data\
    \ as defined by one of\n         the device's data models.  The contents MUST\
    \ be placed in an\n         appropriate namespace, to allow the device to detect\
    \ the\n         appropriate data model, and the contents MUST follow the\n   \
    \      constraints of that data model, as defined by its capability\n        \
    \ definition.  Capabilities are discussed in Section 8.\n   Positive Response:\
    \  If the device was able to satisfy the request, an\n      <rpc-reply> is sent\
    \ containing an <ok> element.\n   Negative Response:  An <rpc-error> response\
    \ is sent if the request\n      cannot be completed for any reason.\n   Example:\
    \  The <edit-config> examples in this section utilize a simple\n      data model,\
    \ in which multiple instances of the <interface> element\n      can be present,\
    \ and an instance is distinguished by the <name>\n      element within each <interface>\
    \ element.\n      Set the MTU to 1500 on an interface named \"Ethernet0/0\" in\
    \ the\n      running configuration:\n     <rpc message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <edit-config>\n         <target>\n\
    \           <running/>\n         </target>\n         <config>\n           <top\
    \ xmlns=\"http://example.com/schema/1.2/config\">\n             <interface>\n\
    \               <name>Ethernet0/0</name>\n               <mtu>1500</mtu>\n   \
    \          </interface>\n           </top>\n         </config>\n       </edit-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n   Add an interface named \"Ethernet0/0\"\
    \ to the running configuration,\n   replacing any previous interface with that\
    \ name:\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <edit-config>\n         <target>\n           <running/>\n         </target>\n\
    \         <config xmlns:xc=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n    \
    \       <top xmlns=\"http://example.com/schema/1.2/config\">\n             <interface\
    \ xc:operation=\"replace\">\n               <name>Ethernet0/0</name>\n       \
    \        <mtu>1500</mtu>\n               <address>\n                 <name>192.0.2.4</name>\n\
    \                 <prefix-length>24</prefix-length>\n               </address>\n\
    \             </interface>\n           </top>\n         </config>\n       </edit-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n   Delete the configuration for an interface\
    \ named \"Ethernet0/0\" from\n   the running configuration:\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <edit-config>\n\
    \         <target>\n           <running/>\n         </target>\n         <default-operation>none</default-operation>\n\
    \         <config xmlns:xc=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n    \
    \       <top xmlns=\"http://example.com/schema/1.2/config\">\n             <interface\
    \ xc:operation=\"delete\">\n               <name>Ethernet0/0</name>\n        \
    \     </interface>\n           </top>\n         </config>\n       </edit-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n   Delete interface 192.0.2.4 from an OSPF\
    \ area (other interfaces\n   configured in the same area are unaffected):\n  \
    \   <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <edit-config>\n         <target>\n           <running/>\n         </target>\n\
    \         <default-operation>none</default-operation>\n         <config xmlns:xc=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n           <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n             <protocols>\n               <ospf>\n                 <area>\n\
    \                   <name>0.0.0.0</name>\n                   <interfaces>\n  \
    \                   <interface xc:operation=\"delete\">\n                    \
    \   <name>192.0.2.4</name>\n                     </interface>\n              \
    \     </interfaces>\n                 </area>\n               </ospf>\n      \
    \       </protocols>\n           </top>\n         </config>\n       </edit-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n"
- title: 7.3.  <copy-config>
  contents:
  - "7.3.  <copy-config>\n   Description:  Create or replace an entire configuration\
    \ datastore\n      with the contents of another complete configuration datastore.\
    \  If\n      the target datastore exists, it is overwritten.  Otherwise, a new\n\
    \      one is created, if allowed.\n      If a NETCONF peer supports the :url\
    \ capability (Section 8.8), the\n      <url> element can appear as the <source>\
    \ or <target> parameter.\n      Even if it advertises the :writable-running capability,\
    \ a device\n      MAY choose not to support the <running/> configuration datastore\n\
    \      as the <target> parameter of a <copy-config> operation.  A device\n   \
    \   MAY choose not to support remote-to-remote copy operations, where\n      both\
    \ the <source> and <target> parameters use the <url> element.\n      If the <source>\
    \ and <target> parameters identify the same URL or\n      configuration datastore,\
    \ an error MUST be returned with an error-\n      tag containing \"invalid-value\"\
    .\n   Parameters:\n      target:  Name of the configuration datastore to use as\
    \ the\n         destination of the <copy-config> operation.\n      source:  Name\
    \ of the configuration datastore to use as the source\n         of the <copy-config>\
    \ operation, or the <config> element\n         containing the complete configuration\
    \ to copy.\n   Positive Response:  If the device was able to satisfy the request,\
    \ an\n      <rpc-reply> is sent that includes an <ok> element.\n   Negative Response:\
    \  An <rpc-error> element is included within the\n      <rpc-reply> if the request\
    \ cannot be completed for any reason.\n   Example:\n     <rpc message-id=\"101\"\
    \n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <copy-config>\n\
    \         <target>\n           <running/>\n         </target>\n         <source>\n\
    \           <url>https://user:password@example.com/cfg/new.txt</url>\n       \
    \  </source>\n       </copy-config>\n     </rpc>\n     <rpc-reply message-id=\"\
    101\"\n         xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <ok/>\n\
    \     </rpc-reply>\n"
- title: 7.4.  <delete-config>
  contents:
  - "7.4.  <delete-config>\n   Description:  Delete a configuration datastore.  The\
    \ <running>\n      configuration datastore cannot be deleted.\n      If a NETCONF\
    \ peer supports the :url capability (Section 8.8), the\n      <url> element can\
    \ appear as the <target> parameter.\n   Parameters:\n      target:  Name of the\
    \ configuration datastore to delete.\n   Positive Response:  If the device was\
    \ able to satisfy the request, an\n      <rpc-reply> is sent that includes an\
    \ <ok> element.\n   Negative Response:  An <rpc-error> element is included within\
    \ the\n      <rpc-reply> if the request cannot be completed for any reason.\n\
    \   Example:\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <delete-config>\n         <target>\n           <startup/>\n        \
    \ </target>\n       </delete-config>\n     </rpc>\n      <rpc-reply message-id=\"\
    101\"\n           xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <ok/>\n\
    \     </rpc-reply>\n"
- title: 7.5.  <lock>
  contents:
  - "7.5.  <lock>\n   Description:  The <lock> operation allows the client to lock\
    \ the\n      entire configuration datastore system of a device.  Such locks are\n\
    \      intended to be short-lived and allow a client to make a change\n      without\
    \ fear of interaction with other NETCONF clients, non-\n      NETCONF clients\
    \ (e.g., SNMP and command line interface (CLI)\n      scripts), and human users.\n\
    \      An attempt to lock the configuration datastore MUST fail if an\n      existing\
    \ session or other entity holds a lock on any portion of\n      the lock target.\n\
    \      When the lock is acquired, the server MUST prevent any changes to\n   \
    \   the locked resource other than those requested by this session.\n      SNMP\
    \ and CLI requests to modify the resource MUST fail with an\n      appropriate\
    \ error.\n      The duration of the lock is defined as beginning when the lock\
    \ is\n      acquired and lasting until either the lock is released or the\n  \
    \    NETCONF session closes.  The session closure can be explicitly\n      performed\
    \ by the client, or implicitly performed by the server\n      based on criteria\
    \ such as failure of the underlying transport,\n      simple inactivity timeout,\
    \ or detection of abusive behavior on the\n      part of the client.  These criteria\
    \ are dependent on the\n      implementation and the underlying transport.\n \
    \     The <lock> operation takes a mandatory parameter, <target>.  The\n     \
    \ <target> parameter names the configuration datastore that will be\n      locked.\
    \  When a lock is active, using the <edit-config> operation\n      on the locked\
    \ configuration datastore and using the locked\n      configuration as a target\
    \ of the <copy-config> operation will be\n      disallowed by any other NETCONF\
    \ session.  Additionally, the system\n      will ensure that these locked configuration\
    \ resources will not be\n      modified by other non-NETCONF management operations\
    \ such as SNMP\n      and CLI.  The <kill-session> operation can be used to force\
    \ the\n      release of a lock owned by another NETCONF session.  It is beyond\n\
    \      the scope of this document to define how to break locks held by\n     \
    \ other entities.\n      A lock MUST NOT be granted if any of the following conditions\
    \ is\n      true:\n      *  A lock is already held by any NETCONF session or another\n\
    \         entity.\n      *  The target configuration is <candidate>, it has already\
    \ been\n         modified, and these changes have not been committed or rolled\n\
    \         back.\n      *  The target configuration is <running>, and another NETCONF\n\
    \         session has an ongoing confirmed commit (Section 8.4).\n      The server\
    \ MUST respond with either an <ok> element or an\n      <rpc-error>.\n      A\
    \ lock will be released by the system if the session holding the\n      lock is\
    \ terminated for any reason.\n   Parameters:\n      target:  Name of the configuration\
    \ datastore to lock.\n   Positive Response:  If the device was able to satisfy\
    \ the request, an\n      <rpc-reply> is sent that contains an <ok> element.\n\
    \   Negative Response:  An <rpc-error> element is included in the\n      <rpc-reply>\
    \ if the request cannot be completed for any reason.\n      If the lock is already\
    \ held, the <error-tag> element will be\n      \"lock-denied\" and the <error-info>\
    \ element will include the\n      <session-id> of the lock owner.  If the lock\
    \ is held by a non-\n      NETCONF entity, a <session-id> of 0 (zero) is included.\
    \  Note that\n      any other entity performing a lock on even a partial piece\
    \ of a\n      target will prevent a NETCONF lock (which is global) from being\n\
    \      obtained on that target.\n   Example:  The following example shows a successful\
    \ acquisition of a\n      lock.\n     <rpc message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <lock>\n         <target>\n\
    \           <running/>\n         </target>\n       </lock>\n     </rpc>\n    \
    \ <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/> <!-- lock succeeded -->\n     </rpc-reply>\n   Example:  The following\
    \ example shows a failed attempt to acquire a\n      lock when the lock is already\
    \ in use.\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <lock>\n         <target>\n           <running/>\n         </target>\n\
    \       </lock>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <rpc-error> <!-- lock failed\
    \ -->\n         <error-type>protocol</error-type>\n         <error-tag>lock-denied</error-tag>\n\
    \         <error-severity>error</error-severity>\n         <error-message>\n \
    \          Lock failed, lock is already held\n         </error-message>\n    \
    \     <error-info>\n           <session-id>454</session-id>\n           <!-- lock\
    \ is held by NETCONF session 454 -->\n         </error-info>\n       </rpc-error>\n\
    \     </rpc-reply>\n"
- title: 7.6.  <unlock>
  contents:
  - "7.6.  <unlock>\n   Description:  The <unlock> operation is used to release a\n\
    \      configuration lock, previously obtained with the <lock> operation.\n  \
    \    An <unlock> operation will not succeed if either of the following\n     \
    \ conditions is true:\n      *  The specified lock is not currently active.\n\
    \      *  The session issuing the <unlock> operation is not the same\n       \
    \  session that obtained the lock.\n      The server MUST respond with either\
    \ an <ok> element or an\n      <rpc-error>.\n   Parameters:\n      target:  Name\
    \ of the configuration datastore to unlock.\n         A NETCONF client is not\
    \ permitted to unlock a configuration\n         datastore that it did not lock.\n\
    \   Positive Response:  If the device was able to satisfy the request, an\n  \
    \    <rpc-reply> is sent that contains an <ok> element.\n   Negative Response:\
    \  An <rpc-error> element is included in the\n      <rpc-reply> if the request\
    \ cannot be completed for any reason.\n   Example:\n     <rpc message-id=\"101\"\
    \n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <unlock>\n\
    \         <target>\n          <running/>\n         </target>\n       </unlock>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n"
- title: 7.7.  <get>
  contents:
  - "7.7.  <get>\n   Description:  Retrieve running configuration and device state\n\
    \      information.\n   Parameters:\n      filter:  This parameter specifies the\
    \ portion of the system\n         configuration and state data to retrieve.  If\
    \ this parameter is\n         not present, all the device configuration and state\
    \ information\n         is returned.\n         The <filter> element MAY optionally\
    \ contain a \"type\" attribute.\n         This attribute indicates the type of\
    \ filtering syntax used\n         within the <filter> element.  The default filtering\
    \ mechanism\n         in NETCONF is referred to as subtree filtering and is described\n\
    \         in Section 6.  The value \"subtree\" explicitly identifies this\n  \
    \       type of filtering.\n         If the NETCONF peer supports the :xpath capability\n\
    \         (Section 8.9), the value \"xpath\" MAY be used to indicate that\n  \
    \       the \"select\" attribute of the <filter> element contains an\n       \
    \  XPath expression.\n   Positive Response:  If the device was able to satisfy\
    \ the request, an\n      <rpc-reply> is sent.  The <data> section contains the\
    \ appropriate\n      subset.\n   Negative Response:  An <rpc-error> element is\
    \ included in the\n      <rpc-reply> if the request cannot be completed for any\
    \ reason.\n   Example:\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get>\n         <filter type=\"subtree\">\n           <top xmlns=\"\
    http://example.com/schema/1.2/stats\">\n             <interfaces>\n          \
    \     <interface>\n                 <ifName>eth0</ifName>\n               </interface>\n\
    \             </interfaces>\n           </top>\n         </filter>\n       </get>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <data>\n         <top xmlns=\"http://example.com/schema/1.2/stats\"\
    >\n           <interfaces>\n             <interface>\n               <ifName>eth0</ifName>\n\
    \               <ifInOctets>45621</ifInOctets>\n               <ifOutOctets>774344</ifOutOctets>\n\
    \             </interface>\n           </interfaces>\n         </top>\n      \
    \ </data>\n     </rpc-reply>\n"
- title: 7.8.  <close-session>
  contents:
  - "7.8.  <close-session>\n   Description:  Request graceful termination of a NETCONF\
    \ session.\n      When a NETCONF server receives a <close-session> request, it\
    \ will\n      gracefully close the session.  The server will release any locks\n\
    \      and resources associated with the session and gracefully close any\n  \
    \    associated connections.  Any NETCONF requests received after a\n      <close-session>\
    \ request will be ignored.\n   Positive Response:  If the device was able to satisfy\
    \ the request, an\n      <rpc-reply> is sent that includes an <ok> element.\n\
    \   Negative Response:  An <rpc-error> element is included in the\n      <rpc-reply>\
    \ if the request cannot be completed for any reason.\n   Example:\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <close-session/>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n"
- title: 7.9.  <kill-session>
  contents:
  - "7.9.  <kill-session>\n   Description:  Force the termination of a NETCONF session.\n\
    \      When a NETCONF entity receives a <kill-session> request for an\n      open\
    \ session, it will abort any operations currently in process,\n      release any\
    \ locks and resources associated with the session, and\n      close any associated\
    \ connections.\n      If a NETCONF server receives a <kill-session> request while\n\
    \      processing a confirmed commit (Section 8.4), it MUST restore the\n    \
    \  configuration to its state before the confirmed commit was issued.\n      Otherwise,\
    \ the <kill-session> operation does not roll back\n      configuration or other\
    \ device state modifications made by the\n      entity holding the lock.\n   Parameters:\n\
    \      session-id:  Session identifier of the NETCONF session to be\n        \
    \ terminated.  If this value is equal to the current session ID,\n         an\
    \ \"invalid-value\" error is returned.\n   Positive Response:  If the device was\
    \ able to satisfy the request, an\n      <rpc-reply> is sent that includes an\
    \ <ok> element.\n   Negative Response:  An <rpc-error> element is included in\
    \ the\n      <rpc-reply> if the request cannot be completed for any reason.\n\
    \   Example:\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <kill-session>\n         <session-id>4</session-id>\n       </kill-session>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n"
- title: 8.  Capabilities
  contents:
  - "8.  Capabilities\n   This section defines a set of capabilities that a client\
    \ or a server\n   MAY implement.  Each peer advertises its capabilities by sending\
    \ them\n   during an initial capabilities exchange.  Each peer needs to\n   understand\
    \ only those capabilities that it might use and MUST ignore\n   any capability\
    \ received from the other peer that it does not require\n   or does not understand.\n\
    \   Additional capabilities can be defined using the template in\n   Appendix\
    \ D.  Future capability definitions can be published as\n   standards by standards\
    \ bodies or published as proprietary extensions.\n   A NETCONF capability is identified\
    \ with a URI.  The base capabilities\n   are defined using URNs following the\
    \ method described in RFC 3553\n   [RFC3553].  Capabilities defined in this document\
    \ have the following\n   format:\n      urn:ietf:params:netconf:capability:{name}:1.x\n\
    \   where {name} is the name of the capability.  Capabilities are often\n   referenced\
    \ in discussions and email using the shorthand :{name}, or\n   :{name}:{version}\
    \ if the capability exists in multiple versions.  For\n   example, the foo capability\
    \ would have the formal name\n   \"urn:ietf:params:netconf:capability:foo:1.0\"\
    \ and be called \":foo\".\n   The shorthand form MUST NOT be used inside the protocol.\n"
- title: 8.1.  Capabilities Exchange
  contents:
  - "8.1.  Capabilities Exchange\n   Capabilities are advertised in messages sent\
    \ by each peer during\n   session establishment.  When the NETCONF session is\
    \ opened, each peer\n   (both client and server) MUST send a <hello> element containing\
    \ a\n   list of that peer's capabilities.  Each peer MUST send at least the\n\
    \   base NETCONF capability, \"urn:ietf:params:netconf:base:1.1\".  A peer\n \
    \  MAY include capabilities for previous NETCONF versions, to indicate\n   that\
    \ it supports multiple protocol versions.\n   Both NETCONF peers MUST verify that\
    \ the other peer has advertised a\n   common protocol version.  When comparing\
    \ protocol version capability\n   URIs, only the base part is used, in the event\
    \ any parameters are\n   encoded at the end of the URI string.  If no protocol\
    \ version\n   capability in common is found, the NETCONF peer MUST NOT continue\
    \ the\n   session.  If more than one protocol version URI in common is present,\n\
    \   then the highest numbered (most recent) protocol version MUST be used\n  \
    \ by both peers.\n   A server sending the <hello> element MUST include a <session-id>\n\
    \   element containing the session ID for this NETCONF session.  A client\n  \
    \ sending the <hello> element MUST NOT include a <session-id> element.\n   A server\
    \ receiving a <hello> message with a <session-id> element MUST\n   terminate the\
    \ NETCONF session.  Similarly, a client that does not\n   receive a <session-id>\
    \ element in the server's <hello> message MUST\n   terminate the NETCONF session\
    \ (without first sending a\n   <close-session>).\n   In the following example,\
    \ a server advertises the base NETCONF\n   capability, one NETCONF capability\
    \ defined in the base NETCONF\n   document, and one implementation-specific capability.\n\
    \   <hello xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n     <capabilities>\n\
    \       <capability>\n         urn:ietf:params:netconf:base:1.1\n       </capability>\n\
    \       <capability>\n         urn:ietf:params:netconf:capability:startup:1.0\n\
    \       </capability>\n       <capability>\n         http://example.net/router/2.3/myfeature\n\
    \       </capability>\n     </capabilities>\n     <session-id>4</session-id>\n\
    \   </hello>\n   Each peer sends its <hello> element simultaneously as soon as\
    \ the\n   connection is open.  A peer MUST NOT wait to receive the capability\n\
    \   set from the other side before sending its own set.\n"
- title: 8.2.  Writable-Running Capability
  contents:
  - '8.2.  Writable-Running Capability

    '
- title: 8.2.1.  Description
  contents:
  - "8.2.1.  Description\n   The :writable-running capability indicates that the device\
    \ supports\n   direct writes to the <running> configuration datastore.  In other\n\
    \   words, the device supports <edit-config> and <copy-config> operations\n  \
    \ where the <running> configuration is the target.\n"
- title: 8.2.2.  Dependencies
  contents:
  - "8.2.2.  Dependencies\n   None.\n"
- title: 8.2.3.  Capability Identifier
  contents:
  - "8.2.3.  Capability Identifier\n   The :writable-running capability is identified\
    \ by the following\n   capability string:\n      urn:ietf:params:netconf:capability:writable-running:1.0\n"
- title: 8.2.4.  New Operations
  contents:
  - "8.2.4.  New Operations\n   None.\n"
- title: 8.2.5.  Modifications to Existing Operations
  contents:
  - '8.2.5.  Modifications to Existing Operations

    '
- title: 8.2.5.1.  <edit-config>
  contents:
  - "8.2.5.1.  <edit-config>\n   The :writable-running capability modifies the <edit-config>\
    \ operation\n   to accept the <running> element as a <target>.\n"
- title: 8.2.5.2.  <copy-config>
  contents:
  - "8.2.5.2.  <copy-config>\n   The :writable-running capability modifies the <copy-config>\
    \ operation\n   to accept the <running> element as a <target>.\n"
- title: 8.3.  Candidate Configuration Capability
  contents:
  - '8.3.  Candidate Configuration Capability

    '
- title: 8.3.1.  Description
  contents:
  - "8.3.1.  Description\n   The candidate configuration capability, :candidate, indicates\
    \ that\n   the device supports a candidate configuration datastore, which is\n\
    \   used to hold configuration data that can be manipulated without\n   impacting\
    \ the device's current configuration.  The candidate\n   configuration is a full\
    \ configuration data set that serves as a work\n   place for creating and manipulating\
    \ configuration data.  Additions,\n   deletions, and changes can be made to this\
    \ data to construct the\n   desired configuration data.  A <commit> operation\
    \ MAY be performed at\n   any time that causes the device's running configuration\
    \ to be set to\n   the value of the candidate configuration.\n   The <commit>\
    \ operation effectively sets the running configuration to\n   the current contents\
    \ of the candidate configuration.  While it could\n   be modeled as a simple copy,\
    \ it is done as a distinct operation for a\n   number of reasons.  In keeping\
    \ high-level concepts as first-class\n   operations, we allow developers to see\
    \ more clearly both what the\n   client is requesting and what the server must\
    \ perform.  This keeps\n   the intentions more obvious, the special cases less\
    \ complex, and the\n   interactions between operations more straightforward. \
    \ For example,\n   the :confirmed-commit:1.1 capability (Section 8.4) would make\
    \ no\n   sense as a \"copy confirmed\" operation.\n   The candidate configuration\
    \ can be shared among multiple sessions.\n   Unless a client has specific information\
    \ that the candidate\n   configuration is not shared, it MUST assume that other\
    \ sessions are\n   able to modify the candidate configuration at the same time.\
    \  It is\n   therefore prudent for a client to lock the candidate configuration\n\
    \   before modifying it.\n   The client can discard any uncommitted changes to\
    \ the candidate\n   configuration by executing the <discard-changes> operation.\
    \  This\n   operation reverts the contents of the candidate configuration to the\n\
    \   contents of the running configuration.\n"
- title: 8.3.2.  Dependencies
  contents:
  - "8.3.2.  Dependencies\n   None.\n"
- title: 8.3.3.  Capability Identifier
  contents:
  - "8.3.3.  Capability Identifier\n   The :candidate capability is identified by\
    \ the following capability\n   string:\n      urn:ietf:params:netconf:capability:candidate:1.0\n"
- title: 8.3.4.  New Operations
  contents:
  - '8.3.4.  New Operations

    '
- title: 8.3.4.1.  <commit>
  contents:
  - "8.3.4.1.  <commit>\n   Description:\n         When the candidate configuration's\
    \ content is complete, the\n         configuration data can be committed, publishing\
    \ the data set to\n         the rest of the device and requesting the device to\
    \ conform to\n         the behavior described in the new configuration.\n    \
    \     To commit the candidate configuration as the device's new\n         current\
    \ configuration, use the <commit> operation.\n         The <commit> operation\
    \ instructs the device to implement the\n         configuration data contained\
    \ in the candidate configuration.\n         If the device is unable to commit\
    \ all of the changes in the\n         candidate configuration datastore, then\
    \ the running\n         configuration MUST remain unchanged.  If the device does\n\
    \         succeed in committing, the running configuration MUST be\n         updated\
    \ with the contents of the candidate configuration.\n         If the running or\
    \ candidate configuration is currently locked\n         by a different session,\
    \ the <commit> operation MUST fail with\n         an <error-tag> value of \"in-use\"\
    .\n         If the system does not have the :candidate capability, the\n     \
    \    <commit> operation is not available.\n   Positive Response:\n         If\
    \ the device was able to satisfy the request, an <rpc-reply>\n         is sent\
    \ that contains an <ok> element.\n   Negative Response:\n         An <rpc-error>\
    \ element is included in the <rpc-reply> if the\n         request cannot be completed\
    \ for any reason.\n   Example:\n     <rpc message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <commit/>\n     </rpc>\n  \
    \   <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n"
- title: 8.3.4.2.  <discard-changes>
  contents:
  - "8.3.4.2.  <discard-changes>\n   If the client decides that the candidate configuration\
    \ is not to be\n   committed, the <discard-changes> operation can be used to revert\
    \ the\n   candidate configuration to the current running configuration.\n    \
    \ <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <discard-changes/>\n     </rpc>\n   This operation discards any uncommitted\
    \ changes by resetting the\n   candidate configuration with the content of the\
    \ running\n   configuration.\n"
- title: 8.3.5.  Modifications to Existing Operations
  contents:
  - '8.3.5.  Modifications to Existing Operations

    '
- title: 8.3.5.1.  <get-config>, <edit-config>, <copy-config>, and <validate>
  contents:
  - "8.3.5.1.  <get-config>, <edit-config>, <copy-config>, and <validate>\n   The\
    \ candidate configuration can be used as a source or target of any\n   <get-config>,\
    \ <edit-config>, <copy-config>, or <validate> operation\n   as a <source> or <target>\
    \ parameter.  The <candidate> element is used\n   to indicate the candidate configuration:\n\
    \     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get-config>\n         <source>\n           <candidate/>\n         </source>\n\
    \       </get-config>\n     </rpc>\n"
- title: 8.3.5.2.  <lock> and <unlock>
  contents:
  - "8.3.5.2.  <lock> and <unlock>\n   The candidate configuration can be locked using\
    \ the <lock> operation\n   with the <candidate> element as the <target> parameter:\n\
    \     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <lock>\n         <target>\n           <candidate/>\n         </target>\n\
    \       </lock>\n     </rpc>\n   Similarly, the candidate configuration is unlocked\
    \ using the\n   <candidate> element as the <target> parameter:\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <unlock>\n\
    \         <target>\n           <candidate/>\n         </target>\n       </unlock>\n\
    \     </rpc>\n   When a client fails with outstanding changes to the candidate\n\
    \   configuration, recovery can be difficult.  To facilitate easy\n   recovery,\
    \ any outstanding changes are discarded when the lock is\n   released, whether\
    \ explicitly with the <unlock> operation or\n   implicitly from session failure.\n"
- title: 8.4.  Confirmed Commit Capability
  contents:
  - '8.4.  Confirmed Commit Capability

    '
- title: 8.4.1.  Description
  contents:
  - "8.4.1.  Description\n   The :confirmed-commit:1.1 capability indicates that the\
    \ server will\n   support the <cancel-commit> operation and the <confirmed>,\n\
    \   <confirm-timeout>, <persist>, and <persist-id> parameters for the\n   <commit>\
    \ operation.  See Section 8.3 for further details on the\n   <commit> operation.\n\
    \   A confirmed <commit> operation MUST be reverted if a confirming\n   commit\
    \ is not issued within the timeout period (by default 600\n   seconds = 10 minutes).\
    \  The confirming commit is a <commit> operation\n   without the <confirmed> parameter.\
    \  The timeout period can be\n   adjusted with the <confirm-timeout> parameter.\
    \  If a follow-up\n   confirmed <commit> operation is issued before the timer\
    \ expires, the\n   timer is reset to the new value (600 seconds by default). \
    \ Both the\n   confirming commit and a follow-up confirmed <commit> operation\
    \ MAY\n   introduce additional changes to the configuration.\n   If the <persist>\
    \ element is not given in the confirmed commit\n   operation, any follow-up commit\
    \ and the confirming commit MUST be\n   issued on the same session that issued\
    \ the confirmed commit.  If the\n   <persist> element is given in the confirmed\
    \ <commit> operation, a\n   follow-up commit and the confirming commit can be\
    \ given on any\n   session, and they MUST include a <persist-id> element with\
    \ a value\n   equal to the given value of the <persist> element.\n   If the server\
    \ also advertises the :startup capability, a\n   <copy-config> from running to\
    \ startup is also necessary to save the\n   changes to startup.\n   If the session\
    \ issuing the confirmed commit is terminated for any\n   reason before the confirm\
    \ timeout expires, the server MUST restore\n   the configuration to its state\
    \ before the confirmed commit was\n   issued, unless the confirmed commit also\
    \ included a <persist>\n   element.\n   If the device reboots for any reason before\
    \ the confirm timeout\n   expires, the server MUST restore the configuration to\
    \ its state\n   before the confirmed commit was issued.\n   If a confirming commit\
    \ is not issued, the device will revert its\n   configuration to the state prior\
    \ to the issuance of the confirmed\n   commit.  To cancel a confirmed commit and\
    \ revert changes without\n   waiting for the confirm timeout to expire, the client\
    \ can explicitly\n   restore the configuration to its state before the confirmed\
    \ commit\n   was issued, by using the <cancel-commit> operation.\n   For shared\
    \ configurations, this feature can cause other configuration\n   changes (for\
    \ example, via other NETCONF sessions) to be inadvertently\n   altered or removed,\
    \ unless the configuration locking feature is used\n   (in other words, the lock\
    \ is obtained before the <edit-config>\n   operation is started).  Therefore,\
    \ it is strongly suggested that in\n   order to use this feature with shared configuration\
    \ datastores,\n   configuration locking SHOULD also be used.\n   Version 1.0 of\
    \ this capability was defined in [RFC4741].  Version 1.1\n   is defined in this\
    \ document, and extends version 1.0 by adding a new\n   operation, <cancel-commit>,\
    \ and two new optional parameters,\n   <persist> and <persist-id>.  For backwards\
    \ compatibility with old\n   clients, servers conforming to this specification\
    \ MAY advertise\n   version 1.0 in addition to version 1.1.\n"
- title: 8.4.2.  Dependencies
  contents:
  - "8.4.2.  Dependencies\n   The :confirmed-commit:1.1 capability is only relevant\
    \ if the\n   :candidate capability is also supported.\n"
- title: 8.4.3.  Capability Identifier
  contents:
  - "8.4.3.  Capability Identifier\n   The :confirmed-commit:1.1 capability is identified\
    \ by the following\n   capability string:\n      urn:ietf:params:netconf:capability:confirmed-commit:1.1\n"
- title: 8.4.4.  New Operations
  contents:
  - '8.4.4.  New Operations

    '
- title: 8.4.4.1.  <cancel-commit>
  contents:
  - "8.4.4.1.  <cancel-commit>\n   Description:\n         Cancels an ongoing confirmed\
    \ commit.  If the <persist-id>\n         parameter is not given, the <cancel-commit>\
    \ operation MUST be\n         issued on the same session that issued the confirmed\
    \ commit.\n   Parameters:\n      persist-id:\n            Cancels a persistent\
    \ confirmed commit.  The value MUST be\n            equal to the value given in\
    \ the <persist> parameter to the\n            <commit> operation.  If the value\
    \ does not match, the\n            operation fails with an \"invalid-value\" error.\n\
    \   Positive Response:\n         If the device was able to satisfy the request,\
    \ an <rpc-reply>\n         is sent that contains an <ok> element.\n   Negative\
    \ Response:\n         An <rpc-error> element is included in the <rpc-reply> if\
    \ the\n         request cannot be completed for any reason.\n   Example:\n   \
    \  <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <commit>\n         <confirmed/>\n       </commit>\n     </rpc>\n   \
    \  <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n     <rpc message-id=\"102\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <cancel-commit/>\n     </rpc>\n\
    \     <rpc-reply message-id=\"102\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n"
- title: 8.4.5.  Modifications to Existing Operations
  contents:
  - '8.4.5.  Modifications to Existing Operations

    '
- title: 8.4.5.1.  <commit>
  contents:
  - "8.4.5.1.  <commit>\n   The :confirmed-commit:1.1 capability allows 4 additional\
    \ parameters\n   to the <commit> operation.\n   Parameters:\n      confirmed:\n\
    \            Perform a confirmed <commit> operation.\n      confirm-timeout:\n\
    \            Timeout period for confirmed commit, in seconds.  If\n          \
    \  unspecified, the confirm timeout defaults to 600 seconds.\n      persist:\n\
    \            Make the confirmed commit survive a session termination, and\n  \
    \          set a token on the ongoing confirmed commit.\n      persist-id:\n \
    \           Used to issue a follow-up confirmed commit or a confirming\n     \
    \       commit from any session, with the token from the previous\n          \
    \  <commit> operation.\n   Example:\n     <rpc message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <commit>\n         <confirmed/>\n\
    \         <confirm-timeout>120</confirm-timeout>\n       </commit>\n     </rpc>\n\
    \     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n   Example:\n     <!-- start a persistent\
    \ confirmed-commit -->\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <commit>\n         <confirmed/>\n         <persist>IQ,d4668</persist>\n\
    \       </commit>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n         \
    \ xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <ok/>\n     </rpc-reply>\n\
    \     <!-- confirm the persistent confirmed-commit,\n          possibly from another\
    \ session -->\n     <rpc message-id=\"102\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <commit>\n         <persist-id>IQ,d4668</persist-id>\n       </commit>\n\
    \     </rpc>\n     <rpc-reply message-id=\"102\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n"
- title: 8.5.  Rollback-on-Error Capability
  contents:
  - '8.5.  Rollback-on-Error Capability

    '
- title: 8.5.1.  Description
  contents:
  - "8.5.1.  Description\n   This capability indicates that the server will support\
    \ the\n   \"rollback-on-error\" value in the <error-option> parameter to the\n\
    \   <edit-config> operation.\n   For shared configurations, this feature can cause\
    \ other configuration\n   changes (for example, via other NETCONF sessions) to\
    \ be inadvertently\n   altered or removed, unless the configuration locking feature\
    \ is used\n   (in other words, the lock is obtained before the <edit-config>\n\
    \   operation is started).  Therefore, it is strongly suggested that in\n   order\
    \ to use this feature with shared configuration datastores,\n   configuration\
    \ locking also be used.\n"
- title: 8.5.2.  Dependencies
  contents:
  - "8.5.2.  Dependencies\n   None.\n"
- title: 8.5.3.  Capability Identifier
  contents:
  - "8.5.3.  Capability Identifier\n   The :rollback-on-error capability is identified\
    \ by the following\n   capability string:\n      urn:ietf:params:netconf:capability:rollback-on-error:1.0\n"
- title: 8.5.4.  New Operations
  contents:
  - "8.5.4.  New Operations\n   None.\n"
- title: 8.5.5.  Modifications to Existing Operations
  contents:
  - '8.5.5.  Modifications to Existing Operations

    '
- title: 8.5.5.1.  <edit-config>
  contents:
  - "8.5.5.1.  <edit-config>\n   The :rollback-on-error capability allows the \"rollback-on-error\"\
    \n   value to the <error-option> parameter on the <edit-config> operation.\n \
    \    <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <edit-config>\n         <target>\n           <running/>\n         </target>\n\
    \         <error-option>rollback-on-error</error-option>\n         <config>\n\
    \           <top xmlns=\"http://example.com/schema/1.2/config\">\n           \
    \  <interface>\n               <name>Ethernet0/0</name>\n               <mtu>100000</mtu>\n\
    \             </interface>\n           </top>\n         </config>\n       </edit-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n"
- title: 8.6.  Validate Capability
  contents:
  - '8.6.  Validate Capability

    '
- title: 8.6.1.  Description
  contents:
  - "8.6.1.  Description\n   Validation consists of checking a complete configuration\
    \ for\n   syntactical and semantic errors before applying the configuration to\n\
    \   the device.\n   If this capability is advertised, the device supports the\
    \ <validate>\n   protocol operation and checks at least for syntax errors.  In\n\
    \   addition, this capability supports the <test-option> parameter to the\n  \
    \ <edit-config> operation and, when it is provided, checks at least for\n   syntax\
    \ errors.\n   Version 1.0 of this capability was defined in [RFC4741].  Version\
    \ 1.1\n   is defined in this document, and extends version 1.0 by adding a new\n\
    \   value, \"test-only\", to the <test-option> parameter of the\n   <edit-config>\
    \ operation.  For backwards compatibility with old\n   clients, servers conforming\
    \ to this specification MAY advertise\n   version 1.0 in addition to version 1.1.\n"
- title: 8.6.2.  Dependencies
  contents:
  - "8.6.2.  Dependencies\n   None.\n"
- title: 8.6.3.  Capability Identifier
  contents:
  - "8.6.3.  Capability Identifier\n   The :validate:1.1 capability is identified\
    \ by the following\n   capability string:\n      urn:ietf:params:netconf:capability:validate:1.1\n"
- title: 8.6.4.  New Operations
  contents:
  - '8.6.4.  New Operations

    '
- title: 8.6.4.1.  <validate>
  contents:
  - "8.6.4.1.  <validate>\n   Description:\n         This protocol operation validates\
    \ the contents of the specified\n         configuration.\n   Parameters:\n   \
    \   source:\n            Name of the configuration datastore to validate, such\
    \ as\n            <candidate>, or the <config> element containing the complete\n\
    \            configuration to validate.\n   Positive Response:\n         If the\
    \ device was able to satisfy the request, an <rpc-reply>\n         is sent that\
    \ contains an <ok> element.\n   Negative Response:\n         An <rpc-error> element\
    \ is included in the <rpc-reply> if the\n         request cannot be completed\
    \ for any reason.\n         A <validate> operation can fail for a number of reasons,\
    \ such\n         as syntax errors, missing parameters, references to undefined\n\
    \         configuration data, or any other violations of rules\n         established\
    \ by the underlying data model.\n   Example:\n     <rpc message-id=\"101\"\n \
    \         xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <validate>\n\
    \         <source>\n           <candidate/>\n         </source>\n       </validate>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n"
- title: 8.6.5.  Modifications to Existing Operations
  contents:
  - '8.6.5.  Modifications to Existing Operations

    '
- title: 8.6.5.1.  <edit-config>
  contents:
  - "8.6.5.1.  <edit-config>\n   The :validate:1.1 capability modifies the <edit-config>\
    \ operation to\n   accept the <test-option> parameter.\n"
- title: 8.7.  Distinct Startup Capability
  contents:
  - '8.7.  Distinct Startup Capability

    '
- title: 8.7.1.  Description
  contents:
  - "8.7.1.  Description\n   The device supports separate running and startup configuration\n\
    \   datastores.  The startup configuration is loaded by the device when\n   it\
    \ boots.  Operations that affect the running configuration will not\n   be automatically\
    \ copied to the startup configuration.  An explicit\n   <copy-config> operation\
    \ from the <running> to the <startup> is used\n   to update the startup configuration\
    \ to the current contents of the\n   running configuration.  NETCONF protocol\
    \ operations refer to the\n   startup datastore using the <startup> element.\n"
- title: 8.7.2.  Dependencies
  contents:
  - "8.7.2.  Dependencies\n   None.\n"
- title: 8.7.3.  Capability Identifier
  contents:
  - "8.7.3.  Capability Identifier\n   The :startup capability is identified by the\
    \ following capability\n   string:\n      urn:ietf:params:netconf:capability:startup:1.0\n"
- title: 8.7.4.  New Operations
  contents:
  - "8.7.4.  New Operations\n   None.\n"
- title: 8.7.5.  Modifications to Existing Operations
  contents:
  - '8.7.5.  Modifications to Existing Operations

    '
- title: 8.7.5.1.  General
  contents:
  - "8.7.5.1.  General\n   The :startup capability adds the <startup/> configuration\
    \ datastore\n   to arguments of several NETCONF operations.  The server MUST support\n\
    \   the following additional values:\n   +--------------------+--------------------------+-------------------+\n\
    \   | Operation          | Parameters               | Notes             |\n  \
    \ +--------------------+--------------------------+-------------------+\n   |\
    \ <get-config>       | <source>                 |                   |\n   |  \
    \                  |                          |                   |\n   | <copy-config>\
    \      | <source> <target>        |                   |\n   |                \
    \    |                          |                   |\n   | <lock>           \
    \  | <target>                 |                   |\n   |                    |\
    \                          |                   |\n   | <unlock>           | <target>\
    \                 |                   |\n   |                    |           \
    \               |                   |\n   | <validate>         | <source>    \
    \             | If :validate:1.1  |\n   |                    |               \
    \           | is advertised     |\n   |                    |                 \
    \         |                   |\n   | <delete-config>    | <target>          \
    \       | Resets the device |\n   |                    |                     \
    \     | to its factory    |\n   |                    |                       \
    \   | defaults          |\n   +--------------------+--------------------------+-------------------+\n\
    \   To save the startup configuration, use the <copy-config> operation to\n  \
    \ copy the <running> configuration datastore to the <startup>\n   configuration\
    \ datastore.\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <copy-config>\n         <target>\n           <startup/>\n         </target>\n\
    \         <source>\n           <running/>\n         </source>\n       </copy-config>\n\
    \     </rpc>\n"
- title: 8.8.  URL Capability
  contents:
  - '8.8.  URL Capability

    '
- title: 8.8.1.  Description
  contents:
  - "8.8.1.  Description\n   The NETCONF peer has the ability to accept the <url>\
    \ element in\n   <source> and <target> parameters.  The capability is further\n\
    \   identified by URL arguments indicating the URL schemes supported.\n"
- title: 8.8.2.  Dependencies
  contents:
  - "8.8.2.  Dependencies\n   None.\n"
- title: 8.8.3.  Capability Identifier
  contents:
  - "8.8.3.  Capability Identifier\n   The :url capability is identified by the following\
    \ capability string:\n      urn:ietf:params:netconf:capability:url:1.0?scheme={name,...}\n\
    \   The :url capability URI MUST contain a \"scheme\" argument assigned a\n  \
    \ comma-separated list of scheme names indicating which schemes the\n   NETCONF\
    \ peer supports.  For example:\n      urn:ietf:params:netconf:capability:url:1.0?scheme=http,ftp,file\n"
- title: 8.8.4.  New Operations
  contents:
  - "8.8.4.  New Operations\n   None.\n"
- title: 8.8.5.  Modifications to Existing Operations
  contents:
  - '8.8.5.  Modifications to Existing Operations

    '
- title: 8.8.5.1.  <edit-config>
  contents:
  - "8.8.5.1.  <edit-config>\n   The :url capability modifies the <edit-config> operation\
    \ to accept\n   the <url> element as an alternative to the <config> parameter.\n\
    \   The file that the url refers to contains the configuration data\n   hierarchy\
    \ to be modified, encoded in XML under the element <config>\n   in the \"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    \ namespace.\n"
- title: 8.8.5.2.  <copy-config>
  contents:
  - "8.8.5.2.  <copy-config>\n   The :url capability modifies the <copy-config> operation\
    \ to accept\n   the <url> element as the value of the <source> and the <target>\n\
    \   parameters.\n   The file that the url refers to contains the complete datastore,\n\
    \   encoded in XML under the element <config> in the\n   \"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    \ namespace.\n"
- title: 8.8.5.3.  <delete-config>
  contents:
  - "8.8.5.3.  <delete-config>\n   The :url capability modifies the <delete-config>\
    \ operation to accept\n   the <url> element as the value of the <target> parameters.\n"
- title: 8.8.5.4.  <validate>
  contents:
  - "8.8.5.4.  <validate>\n   The :url capability modifies the <validate> operation\
    \ to accept the\n   <url> element as the value of the <source> parameter.\n"
- title: 8.9.  XPath Capability
  contents:
  - '8.9.  XPath Capability

    '
- title: 8.9.1.  Description
  contents:
  - "8.9.1.  Description\n   The XPath capability indicates that the NETCONF peer\
    \ supports the use\n   of XPath expressions in the <filter> element.  XPath is\
    \ described in\n   [W3C.REC-xpath-19991116].\n   The data model used in the XPath\
    \ expression is the same as that used\n   in XPath 1.0 [W3C.REC-xpath-19991116],\
    \ with the same extension for\n   root node children as used by XSLT 1.0 ([W3C.REC-xslt-19991116],\n\
    \   Section 3.1).  Specifically, it means that the root node MAY have any\n  \
    \ number of element nodes as its children.\n   The XPath expression is evaluated\
    \ in the following context:\n   o  The set of namespace declarations are those\
    \ in scope on the\n      <filter> element.\n   o  The set of variable bindings\
    \ is defined by the data model.  If no\n      such variable bindings are defined,\
    \ the set is empty.\n   o  The function library is the core function library,\
    \ plus any\n      functions defined by the data model.\n   o  The context node\
    \ is the root node.\n   The XPath expression MUST return a node set.  If it does\
    \ not return a\n   node set, the operation fails with an \"invalid-value\" error.\n\
    \   The response message contains the subtrees selected by the filter\n   expression.\
    \  For each such subtree, the path from the data model root\n   node down to the\
    \ subtree, including any elements or attributes\n   necessary to uniquely identify\
    \ the subtree, are included in the\n   response message.  Specific data instances\
    \ are not duplicated in the\n   response.\n"
- title: 8.9.2.  Dependencies
  contents:
  - "8.9.2.  Dependencies\n   None.\n"
- title: 8.9.3.  Capability Identifier
  contents:
  - "8.9.3.  Capability Identifier\n   The :xpath capability is identified by the\
    \ following capability\n   string:\n      urn:ietf:params:netconf:capability:xpath:1.0\n"
- title: 8.9.4.  New Operations
  contents:
  - "8.9.4.  New Operations\n   None.\n"
- title: 8.9.5.  Modifications to Existing Operations
  contents:
  - '8.9.5.  Modifications to Existing Operations

    '
- title: 8.9.5.1.  <get-config> and <get>
  contents:
  - "8.9.5.1.  <get-config> and <get>\n   The :xpath capability modifies the <get>\
    \ and <get-config> operations\n   to accept the value \"xpath\" in the \"type\"\
    \ attribute of the <filter>\n   element.  When the \"type\" attribute is set to\
    \ \"xpath\", a \"select\"\n   attribute MUST be present on the <filter> element.\
    \  The \"select\"\n   attribute will be treated as an XPath expression and used\
    \ to filter\n   the returned data.  The <filter> element itself MUST be empty\
    \ in this\n   case.\n   The XPath result for the select expression MUST be a node-set.\
    \  Each\n   node in the node-set MUST correspond to a node in the underlying data\n\
    \   model.  In order to properly identify each node, the following\n   encoding\
    \ rules are defined:\n   o  All ancestor nodes of the result node MUST be encoded\
    \ first, so\n      the <data> element returned in the reply contains only fully\n\
    \      specified subtrees, according to the underlying data model.\n   o  If any\
    \ sibling or ancestor nodes of the result node are needed to\n      identify a\
    \ particular instance within a conceptual data structure,\n      then these nodes\
    \ MUST also be encoded in the response.\n   For example:\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <get-config>\n\
    \         <source>\n           <running/>\n         </source>\n         <!-- get\
    \ the user named fred -->\n         <filter xmlns:t=\"http://example.com/schema/1.2/config\"\
    \n                 type=\"xpath\"\n                 select=\"/t:top/t:users/t:user[t:name='fred']\"\
    />\n        </get-config>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n \
    \               xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <data>\n\
    \         <top xmlns=\"http://example.com/schema/1.2/config\">\n           <users>\n\
    \             <user>\n               <name>fred</name>\n               <company-info>\n\
    \                 <id>2</id>\n               </company-info>\n             </user>\n\
    \           </users>\n         </top>\n       </data>\n     </rpc-reply>\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This section provides security considerations\
    \ for the base NETCONF\n   message layer and the base operations of the NETCONF\
    \ protocol.\n   Security considerations for the NETCONF transports are provided\
    \ in\n   the transport documents, and security considerations for the content\n\
    \   manipulated by NETCONF can be found in the documents defining data\n   models.\n\
    \   This document does not specify an authorization scheme, as such a\n   scheme\
    \ will likely be tied to a meta-data model or a data model.\n   Implementors SHOULD\
    \ provide a comprehensive authorization scheme with\n   NETCONF.\n   Authorization\
    \ of individual users via the NETCONF server may or may\n   not map 1:1 to other\
    \ interfaces.  First, the data models might be\n   incompatible.  Second, it could\
    \ be desirable to authorize based on\n   mechanisms available in the Secure Transport\
    \ layer (e.g., SSH, Blocks\n   Extensible Exchange Protocol (BEEP), etc.).\n \
    \  In addition, operations on configurations could have unintended\n   consequences\
    \ if those operations are also not guarded by the global\n   lock on the files\
    \ or objects being operated upon.  For instance, if\n   the running configuration\
    \ is not locked, a partially complete access\n   list could be committed from\
    \ the candidate configuration unbeknownst\n   to the owner of the lock of the\
    \ candidate configuration, leading to\n   either an insecure or inaccessible device.\n\
    \   Configuration information is by its very nature sensitive.  Its\n   transmission\
    \ in the clear and without integrity checking leaves\n   devices open to classic\
    \ eavesdropping and false data injection\n   attacks.  Configuration information\
    \ often contains passwords, user\n   names, service descriptions, and topological\
    \ information, all of\n   which are sensitive.  Because of this, this protocol\
    \ SHOULD be\n   implemented carefully with adequate attention to all manner of\
    \ attack\n   one might expect to experience with other management interfaces.\n\
    \   The protocol, therefore, MUST minimally support options for both\n   confidentiality\
    \ and authentication.  It is anticipated that the\n   underlying protocol (SSH,\
    \ BEEP, etc.) will provide for both\n   confidentiality and authentication, as\
    \ is required.  It is further\n   expected that the identity of each end of a\
    \ NETCONF session will be\n   available to the other in order to determine authorization\
    \ for any\n   given request.  One could also easily envision additional\n   information,\
    \ such as transport and encryption methods, being made\n   available for purposes\
    \ of authorization.  NETCONF itself provides no\n   means to re-authenticate,\
    \ much less authenticate.  All such actions\n   occur at lower layers.\n   Different\
    \ environments may well allow different rights prior to and\n   then after authentication.\
    \  Thus, an authorization model is not\n   specified in this document.  When an\
    \ operation is not properly\n   authorized, a simple \"access denied\" is sufficient.\
    \  Note that\n   authorization information can be exchanged in the form of\n \
    \  configuration information, which is all the more reason to ensure the\n   security\
    \ of the connection.\n   That having been said, it is important to recognize that\
    \ some\n   operations are clearly more sensitive by nature than others.  For\n\
    \   instance, <copy-config> to the startup or running configurations is\n   clearly\
    \ not a normal provisioning operation, whereas <edit-config>\n   is.  Such global\
    \ operations MUST disallow the changing of information\n   that an individual\
    \ does not have authorization to perform.  For\n   example, if user A is not allowed\
    \ to configure an IP address on an\n   interface but user B has configured an\
    \ IP address on an interface in\n   the <candidate> configuration, user A MUST\
    \ NOT be allowed to commit\n   the <candidate> configuration.\n   Similarly, just\
    \ because someone says \"go write a configuration\n   through the URL capability\
    \ at a particular place\", this does not mean\n   that an element will do it without\
    \ proper authorization.\n   The <lock> operation will demonstrate that NETCONF\
    \ is intended for\n   use by systems that have at least some trust of the administrator.\n\
    \   As specified in this document, it is possible to lock portions of a\n   configuration\
    \ that a principal might not otherwise have access to.\n   After all, the entire\
    \ configuration is locked.  To mitigate this\n   problem, there are two approaches.\
    \  It is possible to kill another\n   NETCONF session programmatically from within\
    \ NETCONF if one knows the\n   session identifier of the offending session.  The\
    \ other possible way\n   to break a lock is to provide a function within the device's\
    \ native\n   user interface.  These two mechanisms suffer from a race condition\n\
    \   that could be ameliorated by removing the offending user from an\n   Authentication,\
    \ Authorization, and Accounting (AAA) server.  However,\n   such a solution is\
    \ not useful in all deployment scenarios, such as\n   those where SSH public/private\
    \ key pairs are used.\n"
- title: 10.  IANA Considerations
  contents:
  - '10.  IANA Considerations

    '
- title: 10.1.  NETCONF XML Namespace
  contents:
  - "10.1.  NETCONF XML Namespace\n   This document registers a URI for the NETCONF\
    \ XML namespace in the\n   IETF XML registry [RFC3688].\n   IANA has updated the\
    \ following URI to reference this document.\n   URI: urn:ietf:params:xml:ns:netconf:base:1.0\n\
    \   Registrant Contact: The IESG.\n   XML: N/A, the requested URI is an XML namespace.\n"
- title: 10.2.  NETCONF XML Schema
  contents:
  - "10.2.  NETCONF XML Schema\n   This document registers a URI for the NETCONF XML\
    \ schema in the IETF\n   XML registry [RFC3688].\n   IANA has updated the following\
    \ URI to reference this document.\n   URI: urn:ietf:params:xml:schema:netconf\n\
    \   Registrant Contact: The IESG.\n   XML: Appendix B of this document.\n"
- title: 10.3.  NETCONF YANG Module
  contents:
  - "10.3.  NETCONF YANG Module\n   This document registers a YANG module in the YANG\
    \ Module Names\n   registry [RFC6020].\n     name:        ietf-netconf\n     namespace:\
    \   urn:ietf:params:xml:ns:netconf:base:1.0\n     prefix:      nc\n     reference:\
    \   RFC 6241\n"
- title: 10.4.  NETCONF Capability URNs
  contents:
  - "10.4.  NETCONF Capability URNs\n   IANA has created and now maintains a registry\
    \ \"Network Configuration\n   Protocol (NETCONF) Capability URNs\" that allocates\
    \ NETCONF capability\n   identifiers.  Additions to the registry require IETF\
    \ Standards\n   Action.\n   IANA has updated the allocations of the following\
    \ capabilities to\n   reference this document.\n      Index\n         Capability\
    \ Identifier\n      ------------------------\n      :writable-running\n      \
    \   urn:ietf:params:netconf:capability:writable-running:1.0\n      :candidate\n\
    \         urn:ietf:params:netconf:capability:candidate:1.0\n      :rollback-on-error\n\
    \         urn:ietf:params:netconf:capability:rollback-on-error:1.0\n      :startup\n\
    \         urn:ietf:params:netconf:capability:startup:1.0\n      :url\n       \
    \  urn:ietf:params:netconf:capability:url:1.0\n      :xpath\n         urn:ietf:params:netconf:capability:xpath:1.0\n\
    \   IANA has added the following capabilities to the registry:\n      Index\n\
    \         Capability Identifier\n      ------------------------\n      :base:1.1\n\
    \         urn:ietf:params:netconf:base:1.1\n      :confirmed-commit:1.1\n    \
    \     urn:ietf:params:netconf:capability:confirmed-commit:1.1\n      :validate:1.1\n\
    \         urn:ietf:params:netconf:capability:validate:1.1\n"
- title: 11.  Contributors
  contents:
  - "11.  Contributors\n   In addition to the editors, this document was written by:\n\
    \      Ken Crozier, Cisco Systems\n      Ted Goddard, IceSoft\n      Eliot Lear,\
    \ Cisco Systems\n      Phil Shafer, Juniper Networks\n      Steve Waldbusser\n\
    \      Margaret Wasserman, Painless Security, LLC\n"
- title: 12.  Acknowledgements
  contents:
  - "12.  Acknowledgements\n   The authors would like to acknowledge the members of\
    \ the NETCONF\n   working group.  In particular, we would like to thank Wes Hardaker\n\
    \   for his persistence and patience in assisting us with security\n   considerations.\
    \  We would also like to thank Randy Presuhn, Sharon\n   Chisholm, Glenn Waters,\
    \ David Perkins, Weijing Chen, Simon Leinen,\n   Keith Allen, Dave Harrington,\
    \ Ladislav Lhotka, Tom Petch, and Kent\n   Watsen for all of their valuable advice.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3553]  Mealling, M., Masinter, L., Hardie, T., and G. Klyne, \"\
    An\n              IETF URN Sub-namespace for Registered Protocol\n           \
    \   Parameters\", BCP 73, RFC 3553, June 2003.\n   [RFC3629]  Yergeau, F., \"\
    UTF-8, a transformation format of ISO\n              10646\", STD 63, RFC 3629,\
    \ November 2003.\n   [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81,\
    \ RFC 3688,\n              January 2004.\n   [RFC3986]  Berners-Lee, T., Fielding,\
    \ R., and L. Masinter, \"Uniform\n              Resource Identifier (URI): Generic\
    \ Syntax\", STD 66,\n              RFC 3986, January 2005.\n   [RFC5717]  Lengyel,\
    \ B. and M. Bjorklund, \"Partial Lock Remote\n              Procedure Call (RPC)\
    \ for NETCONF\", RFC 5717,\n              December 2009.\n   [RFC6020]  Bjorklund,\
    \ M., \"YANG - A Data Modeling Language for the\n              Network Configuration\
    \ Protocol (NETCONF)\", RFC 6020,\n              October 2010.\n   [RFC6021] \
    \ Schoenwaelder, J., \"Common YANG Data Types\", RFC 6021,\n              October\
    \ 2010.\n   [RFC6242]  Wasserman, M., \"Using the NETCONF Configuration Protocol\n\
    \              over Secure Shell (SSH)\", RFC 6242, June 2011.\n   [W3C.REC-xml-20001006]\n\
    \              Sperberg-McQueen, C., Bray, T., Paoli, J., and E. Maler,\n    \
    \          \"Extensible Markup Language (XML) 1.0 (Second Edition)\",\n      \
    \        World Wide Web Consortium REC-xml-20001006, October 2000,\n         \
    \     <http://www.w3.org/TR/2000/REC-xml-20001006>.\n   [W3C.REC-xpath-19991116]\n\
    \              DeRose, S. and J. Clark, \"XML Path Language (XPath)\n        \
    \      Version 1.0\", World Wide Web Consortium\n              Recommendation\
    \ REC-xpath-19991116, November 1999,\n              <http://www.w3.org/TR/1999/REC-xpath-19991116>.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [RFC2865]  Rigney, C., Willens, S., Rubens,\
    \ A., and W. Simpson,\n              \"Remote Authentication Dial In User Service\
    \ (RADIUS)\",\n              RFC 2865, June 2000.\n   [RFC3470]  Hollenbeck, S.,\
    \ Rose, M., and L. Masinter, \"Guidelines for\n              the Use of Extensible\
    \ Markup Language (XML)\n              within IETF Protocols\", BCP 70, RFC 3470,\
    \ January 2003.\n   [RFC4251]  Ylonen, T. and C. Lonvick, \"The Secure Shell (SSH)\n\
    \              Protocol Architecture\", RFC 4251, January 2006.\n   [RFC4741]\
    \  Enns, R., \"NETCONF Configuration Protocol\", RFC 4741,\n              December\
    \ 2006.\n   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n\
    \              (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n   [W3C.REC-xslt-19991116]\n\
    \              Clark, J., \"XSL Transformations (XSLT) Version 1.0\", World\n\
    \              Wide Web Consortium Recommendation REC-xslt-19991116,\n       \
    \       November 1999,\n              <http://www.w3.org/TR/1999/REC-xslt-19991116>.\n"
- title: Appendix A.  NETCONF Error List
  contents:
  - "Appendix A.  NETCONF Error List\n   This section is normative.\n   For each error-tag,\
    \ the valid error-type and error-severity values\n   are listed, together with\
    \ any mandatory error-info, if any.\n   error-tag:      in-use\n   error-type:\
    \     protocol, application\n   error-severity: error\n   error-info:     none\n\
    \   Description:    The request requires a resource that already is in\n     \
    \              use.\n   error-tag:      invalid-value\n   error-type:     protocol,\
    \ application\n   error-severity: error\n   error-info:     none\n   Description:\
    \    The request specifies an unacceptable value for one\n                   or\
    \ more parameters.\n   error-tag:      too-big\n   error-type:     transport,\
    \ rpc, protocol, application\n   error-severity: error\n   error-info:     none\n\
    \   Description:    The request or response (that would be generated) is\n   \
    \                too large for the implementation to handle.\n   error-tag:  \
    \    missing-attribute\n   error-type:     rpc, protocol, application\n   error-severity:\
    \ error\n   error-info:     <bad-attribute> : name of the missing attribute\n\
    \                   <bad-element> : name of the element that is supposed\n   \
    \                  to contain the missing attribute\n   Description:    An expected\
    \ attribute is missing.\n   error-tag:      bad-attribute\n   error-type:    \
    \ rpc, protocol, application\n   error-severity: error\n   error-info:     <bad-attribute>\
    \ : name of the attribute w/ bad value\n                   <bad-element> : name\
    \ of the element that contains\n                     the attribute with the bad\
    \ value\n   Description:    An attribute value is not correct; e.g., wrong type,\n\
    \                   out of range, pattern mismatch.\n   error-tag:      unknown-attribute\n\
    \   error-type:     rpc, protocol, application\n   error-severity: error\n   error-info:\
    \     <bad-attribute> : name of the unexpected attribute\n                   <bad-element>\
    \ : name of the element that contains\n                     the unexpected attribute\n\
    \   Description:    An unexpected attribute is present.\n   error-tag:      missing-element\n\
    \   error-type:     protocol, application\n   error-severity: error\n   error-info:\
    \     <bad-element> : name of the missing element\n   Description:    An expected\
    \ element is missing.\n   error-tag:      bad-element\n   error-type:     protocol,\
    \ application\n   error-severity: error\n   error-info:     <bad-element> : name\
    \ of the element w/ bad value\n   Description:    An element value is not correct;\
    \ e.g., wrong type,\n                   out of range, pattern mismatch.\n   error-tag:\
    \      unknown-element\n   error-type:     protocol, application\n   error-severity:\
    \ error\n   error-info:     <bad-element> : name of the unexpected element\n \
    \  Description:    An unexpected element is present.\n   error-tag:      unknown-namespace\n\
    \   error-type:     protocol, application\n   error-severity: error\n   error-info:\
    \     <bad-element> : name of the element that contains\n                    \
    \ the unexpected namespace\n                   <bad-namespace> : name of the unexpected\
    \ namespace\n   Description:    An unexpected namespace is present.\n   error-tag:\
    \      access-denied\n   error-type:     protocol, application\n   error-severity:\
    \ error\n   error-info:     none\n   Description:    Access to the requested protocol\
    \ operation or\n                   data model is denied because authorization\
    \ failed.\n   error-tag:      lock-denied\n   error-type:     protocol\n   error-severity:\
    \ error\n   error-info:     <session-id> : session ID of session holding the\n\
    \                     requested lock, or zero to indicate a non-NETCONF\n    \
    \                 entity holds the lock\n   Description:    Access to the requested\
    \ lock is denied because the\n                   lock is currently held by another\
    \ entity.\n   error-tag:      resource-denied\n   error-type:     transport, rpc,\
    \ protocol, application\n   error-severity: error\n   error-info:     none\n \
    \  Description:    Request could not be completed because of\n               \
    \    insufficient resources.\n   error-tag:      rollback-failed\n   error-type:\
    \     protocol, application\n   error-severity: error\n   error-info:     none\n\
    \   Description:    Request to roll back some configuration change (via\n    \
    \               rollback-on-error or <discard-changes> operations)\n         \
    \          was not completed for some reason.\n   error-tag:      data-exists\n\
    \   error-type:     application\n   error-severity: error\n   error-info:    \
    \ none\n   Description:    Request could not be completed because the relevant\n\
    \                   data model content already exists.  For example,\n       \
    \            a \"create\" operation was attempted on data that\n             \
    \      already exists.\n   error-tag:      data-missing\n   error-type:     application\n\
    \   error-severity: error\n   error-info:     none\n   Description:    Request\
    \ could not be completed because the relevant\n                   data model content\
    \ does not exist.  For example,\n                   a \"delete\" operation was\
    \ attempted on\n                   data that does not exist.\n   error-tag:  \
    \    operation-not-supported\n   error-type:     protocol, application\n   error-severity:\
    \ error\n   error-info:     none\n   Description:    Request could not be completed\
    \ because the requested\n                   operation is not supported by this\
    \ implementation.\n   error-tag:      operation-failed\n   error-type:     rpc,\
    \ protocol, application\n   error-severity: error\n   error-info:     none\n \
    \  Description:    Request could not be completed because the requested\n    \
    \               operation failed for some reason not covered by\n            \
    \       any other error condition.\n   error-tag:      partial-operation\n   error-type:\
    \     application\n   error-severity: error\n   error-info:     <ok-element> :\
    \ identifies an element in the data\n                     model for which the\
    \ requested operation has been\n                     completed for that node and\
    \ all its child nodes.\n                     This element can appear zero or more\
    \ times in the\n                     <error-info> container.\n               \
    \    <err-element> : identifies an element in the data\n                     model\
    \ for which the requested operation has failed\n                     for that\
    \ node and all its child nodes.\n                     This element can appear\
    \ zero or more times in the\n                     <error-info> container.\n  \
    \                 <noop-element> : identifies an element in the data\n       \
    \              model for which the requested operation was not\n             \
    \        attempted for that node and all its child nodes.\n                  \
    \   This element can appear zero or more times in the\n                     <error-info>\
    \ container.\n   Description:    This error-tag is obsolete, and SHOULD NOT be\
    \ sent\n                   by servers conforming to this document.\n         \
    \          Some part of the requested operation failed or was\n              \
    \     not attempted for some reason.  Full cleanup has\n                   not\
    \ been performed (e.g., rollback not supported)\n                   by the server.\
    \  The error-info container is used\n                   to identify which portions\
    \ of the application\n                   data model content for which the requested\
    \ operation\n                   has succeeded (<ok-element>), failed (<bad-element>),\n\
    \                   or not been attempted (<noop-element>).\n   error-tag:   \
    \   malformed-message\n   error-type:     rpc\n   error-severity: error\n   error-info:\
    \     none\n   Description:    A message could not be handled because it failed\
    \ to\n                   be parsed correctly.  For example, the message is not\n\
    \                   well-formed XML or it uses an invalid character set.\n   \
    \                This error-tag is new in :base:1.1 and MUST NOT be\n        \
    \           sent to old clients.\n"
- title: Appendix B.  XML Schema for NETCONF Messages Layer
  contents:
  - "Appendix B.  XML Schema for NETCONF Messages Layer\n   This section is normative.\n\
    \   <CODE BEGINS> file \"netconf.xsd\"\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n            \
    \  xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\n              targetNamespace=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\"\n              elementFormDefault=\"\
    qualified\"\n              attributeFormDefault=\"unqualified\"\n            \
    \  xml:lang=\"en\"\n              version=\"1.1\">\n     <xs:annotation>\n   \
    \    <xs:documentation>\n         This schema defines the syntax for the NETCONF\
    \ Messages layer\n         messages 'hello', 'rpc', and 'rpc-reply'.\n       </xs:documentation>\n\
    \     </xs:annotation>\n     <!--\n        import standard XML definitions\n \
    \      -->\n     <xs:import namespace=\"http://www.w3.org/XML/1998/namespace\"\
    \n                schemaLocation=\"http://www.w3.org/2001/xml.xsd\">\n       <xs:annotation>\n\
    \         <xs:documentation>\n           This import accesses the xml: attribute\
    \ groups for the\n           xml:lang as declared on the error-message element.\n\
    \         </xs:documentation>\n       </xs:annotation>\n     </xs:import>\n  \
    \   <!--\n        message-id attribute\n       -->\n     <xs:simpleType name=\"\
    messageIdType\">\n       <xs:restriction base=\"xs:string\">\n         <xs:maxLength\
    \ value=\"4095\"/>\n       </xs:restriction>\n     </xs:simpleType>\n     <!--\n\
    \        Types used for session-id\n       -->\n     <xs:simpleType name=\"SessionId\"\
    >\n       <xs:restriction base=\"xs:unsignedInt\">\n         <xs:minInclusive\
    \ value=\"1\"/>\n       </xs:restriction>\n     </xs:simpleType>\n     <xs:simpleType\
    \ name=\"SessionIdOrZero\">\n       <xs:restriction base=\"xs:unsignedInt\"/>\n\
    \     </xs:simpleType>\n     <!--\n        <rpc> element\n       -->\n     <xs:complexType\
    \ name=\"rpcType\">\n       <xs:sequence>\n         <xs:element ref=\"rpcOperation\"\
    />\n       </xs:sequence>\n       <xs:attribute name=\"message-id\" type=\"messageIdType\"\
    \n                     use=\"required\"/>\n       <!--\n          Arbitrary attributes\
    \ can be supplied with <rpc> element.\n         -->\n       <xs:anyAttribute processContents=\"\
    lax\"/>\n     </xs:complexType>\n     <xs:element name=\"rpc\" type=\"rpcType\"\
    />\n     <!--\n        data types and elements used to construct rpc-errors\n\
    \       -->\n     <xs:simpleType name=\"ErrorType\">\n       <xs:restriction base=\"\
    xs:string\">\n         <xs:enumeration value=\"transport\"/>\n         <xs:enumeration\
    \ value=\"rpc\"/>\n         <xs:enumeration value=\"protocol\"/>\n         <xs:enumeration\
    \ value=\"application\"/>\n       </xs:restriction>\n     </xs:simpleType>\n \
    \    <xs:simpleType name=\"ErrorTag\">\n       <xs:restriction base=\"xs:string\"\
    >\n         <xs:enumeration value=\"in-use\"/>\n         <xs:enumeration value=\"\
    invalid-value\"/>\n         <xs:enumeration value=\"too-big\"/>\n         <xs:enumeration\
    \ value=\"missing-attribute\"/>\n         <xs:enumeration value=\"bad-attribute\"\
    />\n         <xs:enumeration value=\"unknown-attribute\"/>\n         <xs:enumeration\
    \ value=\"missing-element\"/>\n         <xs:enumeration value=\"bad-element\"\
    />\n         <xs:enumeration value=\"unknown-element\"/>\n         <xs:enumeration\
    \ value=\"unknown-namespace\"/>\n         <xs:enumeration value=\"access-denied\"\
    />\n         <xs:enumeration value=\"lock-denied\"/>\n         <xs:enumeration\
    \ value=\"resource-denied\"/>\n         <xs:enumeration value=\"rollback-failed\"\
    />\n         <xs:enumeration value=\"data-exists\"/>\n         <xs:enumeration\
    \ value=\"data-missing\"/>\n         <xs:enumeration value=\"operation-not-supported\"\
    />\n         <xs:enumeration value=\"operation-failed\"/>\n         <xs:enumeration\
    \ value=\"partial-operation\"/>\n         <xs:enumeration value=\"malformed-message\"\
    />\n       </xs:restriction>\n     </xs:simpleType>\n     <xs:simpleType name=\"\
    ErrorSeverity\">\n       <xs:restriction base=\"xs:string\">\n         <xs:enumeration\
    \ value=\"error\"/>\n         <xs:enumeration value=\"warning\"/>\n       </xs:restriction>\n\
    \     </xs:simpleType>\n     <xs:complexType name=\"errorInfoType\">\n       <xs:sequence>\n\
    \         <xs:choice>\n           <xs:element name=\"session-id\" type=\"SessionIdOrZero\"\
    />\n           <xs:sequence minOccurs=\"0\" maxOccurs=\"unbounded\">\n       \
    \      <xs:sequence>\n               <xs:element name=\"bad-attribute\" type=\"\
    xs:QName\"\n                           minOccurs=\"0\" maxOccurs=\"1\"/>\n   \
    \            <xs:element name=\"bad-element\" type=\"xs:QName\"\n            \
    \               minOccurs=\"0\" maxOccurs=\"1\"/>\n               <xs:element\
    \ name=\"ok-element\" type=\"xs:QName\"\n                           minOccurs=\"\
    0\" maxOccurs=\"1\"/>\n               <xs:element name=\"err-element\" type=\"\
    xs:QName\"\n                           minOccurs=\"0\" maxOccurs=\"1\"/>\n   \
    \            <xs:element name=\"noop-element\" type=\"xs:QName\"\n           \
    \                minOccurs=\"0\" maxOccurs=\"1\"/>\n               <xs:element\
    \ name=\"bad-namespace\" type=\"xs:string\"\n                           minOccurs=\"\
    0\" maxOccurs=\"1\"/>\n             </xs:sequence>\n           </xs:sequence>\n\
    \         </xs:choice>\n         <!-- elements from any other namespace are also\
    \ allowed\n              to follow the NETCONF elements -->\n         <xs:any\
    \ namespace=\"##other\" processContents=\"lax\"\n                 minOccurs=\"\
    0\" maxOccurs=\"unbounded\"/>\n       </xs:sequence>\n     </xs:complexType>\n\
    \     <xs:complexType name=\"rpcErrorType\">\n       <xs:sequence>\n         <xs:element\
    \ name=\"error-type\" type=\"ErrorType\"/>\n         <xs:element name=\"error-tag\"\
    \ type=\"ErrorTag\"/>\n         <xs:element name=\"error-severity\" type=\"ErrorSeverity\"\
    />\n         <xs:element name=\"error-app-tag\" type=\"xs:string\"\n         \
    \            minOccurs=\"0\"/>\n         <xs:element name=\"error-path\" type=\"\
    xs:string\" minOccurs=\"0\"/>\n         <xs:element name=\"error-message\" minOccurs=\"\
    0\">\n           <xs:complexType>\n             <xs:simpleContent>\n         \
    \      <xs:extension base=\"xs:string\">\n                 <xs:attribute ref=\"\
    xml:lang\" use=\"optional\"/>\n               </xs:extension>\n             </xs:simpleContent>\n\
    \           </xs:complexType>\n         </xs:element>\n         <xs:element name=\"\
    error-info\" type=\"errorInfoType\"\n                     minOccurs=\"0\"/>\n\
    \       </xs:sequence>\n     </xs:complexType>\n     <!--\n        operation attribute\
    \ used in <edit-config>\n       -->\n     <xs:simpleType name=\"editOperationType\"\
    >\n       <xs:restriction base=\"xs:string\">\n         <xs:enumeration value=\"\
    merge\"/>\n         <xs:enumeration value=\"replace\"/>\n         <xs:enumeration\
    \ value=\"create\"/>\n         <xs:enumeration value=\"delete\"/>\n         <xs:enumeration\
    \ value=\"remove\"/>\n       </xs:restriction>\n     </xs:simpleType>\n     <xs:attribute\
    \ name=\"operation\" type=\"editOperationType\"/>\n     <!--\n        <rpc-reply>\
    \ element\n       -->\n     <xs:complexType name=\"rpcReplyType\">\n       <xs:choice>\n\
    \         <xs:element name=\"ok\"/>\n         <xs:sequence>\n           <xs:element\
    \ ref=\"rpc-error\"\n                       minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n           <xs:element ref=\"rpcResponse\"\n                       minOccurs=\"\
    0\" maxOccurs=\"unbounded\"/>\n         </xs:sequence>\n       </xs:choice>\n\
    \       <xs:attribute name=\"message-id\" type=\"messageIdType\"\n           \
    \          use=\"optional\"/>\n       <!--\n          Any attributes supplied\
    \ with <rpc> element must be returned\n          on <rpc-reply>.\n         -->\n\
    \       <xs:anyAttribute processContents=\"lax\"/>\n     </xs:complexType>\n \
    \    <xs:element name=\"rpc-reply\" type=\"rpcReplyType\"/>\n     <!--\n     \
    \   <rpc-error> element\n          -->\n     <xs:element name=\"rpc-error\" type=\"\
    rpcErrorType\"/>\n     <!--\n        rpcOperationType: used as a base type for\
    \ all\n        NETCONF operations\n       -->\n     <xs:complexType name=\"rpcOperationType\"\
    />\n     <xs:element name=\"rpcOperation\" type=\"rpcOperationType\"\n       \
    \          abstract=\"true\"/>\n     <!--\n        rpcResponseType: used as a\
    \ base type for all\n        NETCONF responses\n       -->\n     <xs:complexType\
    \ name=\"rpcResponseType\"/>\n     <xs:element name=\"rpcResponse\" type=\"rpcResponseType\"\
    \n                 abstract=\"true\"/>\n     <!--\n        <hello> element\n \
    \      -->\n     <xs:element name=\"hello\">\n       <xs:complexType>\n      \
    \   <xs:sequence>\n           <xs:element name=\"capabilities\">\n           \
    \  <xs:complexType>\n               <xs:sequence>\n                 <xs:element\
    \ name=\"capability\" type=\"xs:anyURI\"\n                             maxOccurs=\"\
    unbounded\"/>\n               </xs:sequence>\n             </xs:complexType>\n\
    \           </xs:element>\n           <xs:element name=\"session-id\" type=\"\
    SessionId\"\n                       minOccurs=\"0\"/>\n         </xs:sequence>\n\
    \       </xs:complexType>\n     </xs:element>\n   </xs:schema>\n   <CODE ENDS>\n"
- title: Appendix C.  YANG Module for NETCONF Protocol Operations
  contents:
  - "Appendix C.  YANG Module for NETCONF Protocol Operations\n   This section is\
    \ normative.\n   The ietf-netconf YANG module imports typedefs from [RFC6021].\n\
    \  <CODE BEGINS> file \"ietf-netconf@2011-06-01.yang\"\n  module ietf-netconf\
    \ {\n    // the namespace for NETCONF XML definitions is unchanged\n    // from\
    \ RFC 4741, which this document replaces\n    namespace \"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    ;\n    prefix nc;\n    import ietf-inet-types {\n      prefix inet;\n    }\n \
    \   organization\n      \"IETF NETCONF (Network Configuration) Working Group\"\
    ;\n    contact\n      \"WG Web:   <http://tools.ietf.org/wg/netconf/>\n      \
    \ WG List:  <netconf@ietf.org>\n       WG Chair: Bert Wijnen\n               \
    \  <bertietf@bwijnen.net>\n       WG Chair: Mehmet Ersue\n                 <mehmet.ersue@nsn.com>\n\
    \       Editor:   Martin Bjorklund\n                 <mbj@tail-f.com>\n      \
    \ Editor:   Juergen Schoenwaelder\n                 <j.schoenwaelder@jacobs-university.de>\n\
    \       Editor:   Andy Bierman\n                 <andy.bierman@brocade.com>\"\
    ;\n    description\n      \"NETCONF Protocol Data Types and Protocol Operations.\n\
    \       Copyright (c) 2011 IETF Trust and the persons identified as\n       the\
    \ document authors.  All rights reserved.\n       Redistribution and use in source\
    \ and binary forms, with or\n       without modification, is permitted pursuant\
    \ to, and subject\n       to the license terms contained in, the Simplified BSD\
    \ License\n       set forth in Section 4.c of the IETF Trust's Legal Provisions\n\
    \       Relating to IETF Documents\n       (http://trustee.ietf.org/license-info).\n\
    \       This version of this YANG module is part of RFC 6241; see\n       the\
    \ RFC itself for full legal notices.\";\n    revision 2011-06-01 {\n      description\n\
    \        \"Initial revision\";\n      reference\n        \"RFC 6241: Network Configuration\
    \ Protocol\";\n    }\n    extension get-filter-element-attributes {\n      description\n\
    \        \"If this extension is present within an 'anyxml'\n         statement\
    \ named 'filter', which must be conceptually\n         defined within the RPC\
    \ input section for the <get>\n         and <get-config> protocol operations,\
    \ then the\n         following unqualified XML attribute is supported\n      \
    \   within the <filter> element, within a <get> or\n         <get-config> protocol\
    \ operation:\n           type : optional attribute with allowed\n            \
    \      value strings 'subtree' and 'xpath'.\n                  If missing, the\
    \ default value is 'subtree'.\n         If the 'xpath' feature is supported, then\
    \ the\n         following unqualified XML attribute is\n         also supported:\n\
    \           select: optional attribute containing a\n                   string\
    \ representing an XPath expression.\n                   The 'type' attribute must\
    \ be equal to 'xpath'\n                   if this attribute is present.\";\n \
    \   }\n    // NETCONF capabilities defined as features\n    feature writable-running\
    \ {\n      description\n        \"NETCONF :writable-running capability;\n    \
    \     If the server advertises the :writable-running\n         capability for\
    \ a session, then this feature must\n         also be enabled for that session.\
    \  Otherwise,\n         this feature must not be enabled.\";\n      reference\
    \ \"RFC 6241, Section 8.2\";\n    }\n    feature candidate {\n      description\n\
    \        \"NETCONF :candidate capability;\n         If the server advertises the\
    \ :candidate\n         capability for a session, then this feature must\n    \
    \     also be enabled for that session.  Otherwise,\n         this feature must\
    \ not be enabled.\";\n      reference \"RFC 6241, Section 8.3\";\n    }\n    feature\
    \ confirmed-commit {\n      if-feature candidate;\n      description\n       \
    \ \"NETCONF :confirmed-commit:1.1 capability;\n         If the server advertises\
    \ the :confirmed-commit:1.1\n         capability for a session, then this feature\
    \ must\n         also be enabled for that session.  Otherwise,\n         this\
    \ feature must not be enabled.\";\n      reference \"RFC 6241, Section 8.4\";\n\
    \    }\n    feature rollback-on-error {\n      description\n        \"NETCONF\
    \ :rollback-on-error capability;\n         If the server advertises the :rollback-on-error\n\
    \         capability for a session, then this feature must\n         also be enabled\
    \ for that session.  Otherwise,\n         this feature must not be enabled.\"\
    ;\n      reference \"RFC 6241, Section 8.5\";\n    }\n    feature validate {\n\
    \      description\n        \"NETCONF :validate:1.1 capability;\n         If the\
    \ server advertises the :validate:1.1\n         capability for a session, then\
    \ this feature must\n         also be enabled for that session.  Otherwise,\n\
    \         this feature must not be enabled.\";\n      reference \"RFC 6241, Section\
    \ 8.6\";\n    }\n    feature startup {\n      description\n        \"NETCONF :startup\
    \ capability;\n         If the server advertises the :startup\n         capability\
    \ for a session, then this feature must\n         also be enabled for that session.\
    \  Otherwise,\n         this feature must not be enabled.\";\n      reference\
    \ \"RFC 6241, Section 8.7\";\n    }\n    feature url {\n      description\n  \
    \      \"NETCONF :url capability;\n         If the server advertises the :url\n\
    \         capability for a session, then this feature must\n         also be enabled\
    \ for that session.  Otherwise,\n         this feature must not be enabled.\"\
    ;\n      reference \"RFC 6241, Section 8.8\";\n    }\n    feature xpath {\n  \
    \    description\n        \"NETCONF :xpath capability;\n         If the server\
    \ advertises the :xpath\n         capability for a session, then this feature\
    \ must\n         also be enabled for that session.  Otherwise,\n         this\
    \ feature must not be enabled.\";\n      reference \"RFC 6241, Section 8.9\";\n\
    \    }\n    // NETCONF Simple Types\n    typedef session-id-type {\n      type\
    \ uint32 {\n        range \"1..max\";\n      }\n      description\n        \"\
    NETCONF Session Id\";\n    }\n    typedef session-id-or-zero-type {\n      type\
    \ uint32;\n      description\n        \"NETCONF Session Id or Zero to indicate\
    \ none\";\n    }\n    typedef error-tag-type {\n      type enumeration {\n   \
    \      enum in-use {\n           description\n             \"The request requires\
    \ a resource that\n              already is in use.\";\n         }\n         enum\
    \ invalid-value {\n           description\n             \"The request specifies\
    \ an unacceptable value for one\n              or more parameters.\";\n      \
    \   }\n         enum too-big {\n           description\n             \"The request\
    \ or response (that would be generated) is\n              too large for the implementation\
    \ to handle.\";\n         }\n         enum missing-attribute {\n           description\n\
    \             \"An expected attribute is missing.\";\n         }\n         enum\
    \ bad-attribute {\n           description\n             \"An attribute value is\
    \ not correct; e.g., wrong type,\n              out of range, pattern mismatch.\"\
    ;\n         }\n         enum unknown-attribute {\n           description\n   \
    \          \"An unexpected attribute is present.\";\n         }\n         enum\
    \ missing-element {\n           description\n             \"An expected element\
    \ is missing.\";\n         }\n         enum bad-element {\n           description\n\
    \             \"An element value is not correct; e.g., wrong type,\n         \
    \     out of range, pattern mismatch.\";\n         }\n         enum unknown-element\
    \ {\n           description\n             \"An unexpected element is present.\"\
    ;\n         }\n         enum unknown-namespace {\n           description\n   \
    \          \"An unexpected namespace is present.\";\n         }\n         enum\
    \ access-denied {\n           description\n             \"Access to the requested\
    \ protocol operation or\n              data model is denied because authorization\
    \ failed.\";\n         }\n         enum lock-denied {\n           description\n\
    \             \"Access to the requested lock is denied because the\n         \
    \     lock is currently held by another entity.\";\n         }\n         enum\
    \ resource-denied {\n           description\n             \"Request could not\
    \ be completed because of\n              insufficient resources.\";\n        \
    \ }\n         enum rollback-failed {\n           description\n             \"\
    Request to roll back some configuration change (via\n              rollback-on-error\
    \ or <discard-changes> operations)\n              was not completed for some reason.\"\
    ;\n         }\n         enum data-exists {\n           description\n         \
    \    \"Request could not be completed because the relevant\n              data\
    \ model content already exists.  For example,\n              a 'create' operation\
    \ was attempted on data that\n              already exists.\";\n         }\n \
    \        enum data-missing {\n           description\n             \"Request could\
    \ not be completed because the relevant\n              data model content does\
    \ not exist.  For example,\n              a 'delete' operation was attempted on\n\
    \              data that does not exist.\";\n         }\n         enum operation-not-supported\
    \ {\n           description\n             \"Request could not be completed because\
    \ the requested\n              operation is not supported by this implementation.\"\
    ;\n         }\n         enum operation-failed {\n           description\n    \
    \         \"Request could not be completed because the requested\n           \
    \   operation failed for some reason not covered by\n              any other error\
    \ condition.\";\n         }\n         enum partial-operation {\n           description\n\
    \             \"This error-tag is obsolete, and SHOULD NOT be sent\n         \
    \     by servers conforming to this document.\";\n         }\n         enum malformed-message\
    \ {\n           description\n             \"A message could not be handled because\
    \ it failed to\n              be parsed correctly.  For example, the message is\
    \ not\n              well-formed XML or it uses an invalid character set.\";\n\
    \         }\n       }\n       description \"NETCONF Error Tag\";\n       reference\
    \ \"RFC 6241, Appendix A\";\n    }\n    typedef error-severity-type {\n      type\
    \ enumeration {\n        enum error {\n          description \"Error severity\"\
    ;\n        }\n        enum warning {\n          description \"Warning severity\"\
    ;\n        }\n      }\n      description \"NETCONF Error Severity\";\n      reference\
    \ \"RFC 6241, Section 4.3\";\n    }\n    typedef edit-operation-type {\n     \
    \ type enumeration {\n        enum merge {\n          description\n          \
    \  \"The configuration data identified by the\n             element containing\
    \ this attribute is merged\n             with the configuration at the corresponding\n\
    \             level in the configuration datastore identified\n             by\
    \ the target parameter.\";\n        }\n        enum replace {\n          description\n\
    \            \"The configuration data identified by the element\n            \
    \ containing this attribute replaces any related\n             configuration in\
    \ the configuration datastore\n             identified by the target parameter.\
    \  If no such\n             configuration data exists in the configuration\n \
    \            datastore, it is created.  Unlike a\n             <copy-config> operation,\
    \ which replaces the\n             entire target configuration, only the configuration\n\
    \             actually present in the config parameter is affected.\";\n     \
    \   }\n        enum create {\n          description\n            \"The configuration\
    \ data identified by the element\n             containing this attribute is added\
    \ to the\n             configuration if and only if the configuration\n      \
    \       data does not already exist in the configuration\n             datastore.\
    \  If the configuration data exists, an\n             <rpc-error> element is returned\
    \ with an\n             <error-tag> value of 'data-exists'.\";\n        }\n  \
    \      enum delete {\n          description\n            \"The configuration data\
    \ identified by the element\n             containing this attribute is deleted\
    \ from the\n             configuration if and only if the configuration\n    \
    \         data currently exists in the configuration\n             datastore.\
    \  If the configuration data does not\n             exist, an <rpc-error> element\
    \ is returned with\n             an <error-tag> value of 'data-missing'.\";\n\
    \        }\n        enum remove {\n          description\n            \"The configuration\
    \ data identified by the element\n             containing this attribute is deleted\
    \ from the\n             configuration if the configuration\n             data\
    \ currently exists in the configuration\n             datastore.  If the configuration\
    \ data does not\n             exist, the 'remove' operation is silently ignored\n\
    \             by the server.\";\n        }\n      }\n      default \"merge\";\n\
    \      description \"NETCONF 'operation' attribute values\";\n      reference\
    \ \"RFC 6241, Section 7.2\";\n    }\n    // NETCONF Standard Protocol Operations\n\
    \    rpc get-config {\n      description\n        \"Retrieve all or part of a\
    \ specified configuration.\";\n      reference \"RFC 6241, Section 7.1\";\n  \
    \    input {\n        container source {\n          description\n            \"\
    Particular configuration to retrieve.\";\n          choice config-source {\n \
    \           mandatory true;\n            description\n              \"The configuration\
    \ to retrieve.\";\n            leaf candidate {\n              if-feature candidate;\n\
    \              type empty;\n              description\n                \"The candidate\
    \ configuration is the config source.\";\n            }\n            leaf running\
    \ {\n              type empty;\n              description\n                \"\
    The running configuration is the config source.\";\n            }\n          \
    \  leaf startup {\n              if-feature startup;\n              type empty;\n\
    \              description\n                \"The startup configuration is the\
    \ config source.\n                 This is optional-to-implement on the server\
    \ because\n                 not all servers will support filtering for this\n\
    \                 datastore.\";\n            }\n          }\n        }\n     \
    \   anyxml filter {\n          description\n            \"Subtree or XPath filter\
    \ to use.\";\n          nc:get-filter-element-attributes;\n        }\n      }\n\
    \      output {\n        anyxml data {\n          description\n            \"\
    Copy of the source datastore subset that matched\n             the filter criteria\
    \ (if any).  An empty data container\n             indicates that the request\
    \ did not produce any results.\";\n        }\n      }\n    }\n    rpc edit-config\
    \ {\n      description\n        \"The <edit-config> operation loads all or part\
    \ of a specified\n         configuration to the specified target configuration.\"\
    ;\n      reference \"RFC 6241, Section 7.2\";\n      input {\n        container\
    \ target {\n          description\n            \"Particular configuration to edit.\"\
    ;\n          choice config-target {\n            mandatory true;\n           \
    \ description\n              \"The configuration target.\";\n            leaf\
    \ candidate {\n              if-feature candidate;\n              type empty;\n\
    \              description\n                \"The candidate configuration is the\
    \ config target.\";\n            }\n            leaf running {\n             \
    \ if-feature writable-running;\n              type empty;\n              description\n\
    \                \"The running configuration is the config source.\";\n      \
    \      }\n          }\n        }\n        leaf default-operation {\n         \
    \ type enumeration {\n            enum merge {\n              description\n  \
    \              \"The default operation is merge.\";\n            }\n         \
    \   enum replace {\n              description\n                \"The default operation\
    \ is replace.\";\n            }\n            enum none {\n              description\n\
    \                \"There is no default operation.\";\n            }\n        \
    \  }\n          default \"merge\";\n          description\n            \"The default\
    \ operation to use.\";\n        }\n        leaf test-option {\n          if-feature\
    \ validate;\n          type enumeration {\n            enum test-then-set {\n\
    \              description\n                \"The server will test and then set\
    \ if no errors.\";\n            }\n            enum set {\n              description\n\
    \                \"The server will set without a test first.\";\n            }\n\
    \            enum test-only {\n              description\n                \"The\
    \ server will only test and not set, even\n                 if there are no errors.\"\
    ;\n            }\n          }\n          default \"test-then-set\";\n        \
    \  description\n            \"The test option to use.\";\n        }\n        leaf\
    \ error-option {\n          type enumeration {\n            enum stop-on-error\
    \ {\n              description\n                \"The server will stop on errors.\"\
    ;\n            }\n            enum continue-on-error {\n              description\n\
    \                \"The server may continue on errors.\";\n            }\n    \
    \        enum rollback-on-error {\n              description\n               \
    \ \"The server will roll back on errors.\n                 This value can only\
    \ be used if the 'rollback-on-error'\n                 feature is supported.\"\
    ;\n            }\n          }\n          default \"stop-on-error\";\n        \
    \  description\n            \"The error option to use.\";\n        }\n       \
    \ choice edit-content {\n          mandatory true;\n          description\n  \
    \          \"The content for the edit operation.\";\n          anyxml config {\n\
    \            description\n              \"Inline Config content.\";\n        \
    \  }\n          leaf url {\n            if-feature url;\n            type inet:uri;\n\
    \            description\n              \"URL-based config content.\";\n     \
    \     }\n        }\n      }\n    }\n    rpc copy-config {\n      description\n\
    \        \"Create or replace an entire configuration datastore with the\n    \
    \     contents of another complete configuration datastore.\";\n      reference\
    \ \"RFC 6241, Section 7.3\";\n      input {\n        container target {\n    \
    \      description\n            \"Particular configuration to copy to.\";\n  \
    \        choice config-target {\n            mandatory true;\n            description\n\
    \              \"The configuration target of the copy operation.\";\n        \
    \    leaf candidate {\n              if-feature candidate;\n              type\
    \ empty;\n              description\n                \"The candidate configuration\
    \ is the config target.\";\n            }\n            leaf running {\n      \
    \        if-feature writable-running;\n              type empty;\n           \
    \   description\n                \"The running configuration is the config target.\n\
    \                 This is optional-to-implement on the server.\";\n          \
    \  }\n            leaf startup {\n              if-feature startup;\n        \
    \      type empty;\n              description\n                \"The startup configuration\
    \ is the config target.\";\n            }\n            leaf url {\n          \
    \    if-feature url;\n              type inet:uri;\n              description\n\
    \                \"The URL-based configuration is the config target.\";\n    \
    \        }\n          }\n        }\n        container source {\n          description\n\
    \            \"Particular configuration to copy from.\";\n          choice config-source\
    \ {\n            mandatory true;\n            description\n              \"The\
    \ configuration source for the copy operation.\";\n            leaf candidate\
    \ {\n              if-feature candidate;\n              type empty;\n        \
    \      description\n                \"The candidate configuration is the config\
    \ source.\";\n            }\n            leaf running {\n              type empty;\n\
    \              description\n                \"The running configuration is the\
    \ config source.\";\n            }\n            leaf startup {\n             \
    \ if-feature startup;\n              type empty;\n              description\n\
    \                \"The startup configuration is the config source.\";\n      \
    \      }\n            leaf url {\n              if-feature url;\n            \
    \  type inet:uri;\n              description\n                \"The URL-based\
    \ configuration is the config source.\";\n            }\n            anyxml config\
    \ {\n              description\n                \"Inline Config content: <config>\
    \ element.  Represents\n                 an entire configuration datastore, not\n\
    \                 a subset of the running datastore.\";\n            }\n     \
    \     }\n        }\n      }\n    }\n    rpc delete-config {\n      description\n\
    \        \"Delete a configuration datastore.\";\n      reference \"RFC 6241, Section\
    \ 7.4\";\n      input {\n        container target {\n          description\n \
    \           \"Particular configuration to delete.\";\n          choice config-target\
    \ {\n            mandatory true;\n            description\n              \"The\
    \ configuration target to delete.\";\n            leaf startup {\n           \
    \   if-feature startup;\n              type empty;\n              description\n\
    \                \"The startup configuration is the config target.\";\n      \
    \      }\n            leaf url {\n              if-feature url;\n            \
    \  type inet:uri;\n              description\n                \"The URL-based\
    \ configuration is the config target.\";\n            }\n          }\n       \
    \ }\n      }\n    }\n    rpc lock {\n      description\n        \"The lock operation\
    \ allows the client to lock the configuration\n         system of a device.\"\
    ;\n      reference \"RFC 6241, Section 7.5\";\n      input {\n        container\
    \ target {\n          description\n            \"Particular configuration to lock.\"\
    ;\n          choice config-target {\n            mandatory true;\n           \
    \ description\n              \"The configuration target to lock.\";\n        \
    \    leaf candidate {\n              if-feature candidate;\n              type\
    \ empty;\n              description\n                \"The candidate configuration\
    \ is the config target.\";\n            }\n            leaf running {\n      \
    \        type empty;\n              description\n                \"The running\
    \ configuration is the config target.\";\n            }\n            leaf startup\
    \ {\n              if-feature startup;\n              type empty;\n          \
    \    description\n                \"The startup configuration is the config target.\"\
    ;\n            }\n          }\n        }\n      }\n    }\n    rpc unlock {\n \
    \     description\n        \"The unlock operation is used to release a configuration\
    \ lock,\n         previously obtained with the 'lock' operation.\";\n      reference\
    \ \"RFC 6241, Section 7.6\";\n      input {\n        container target {\n    \
    \      description\n            \"Particular configuration to unlock.\";\n   \
    \       choice config-target {\n            mandatory true;\n            description\n\
    \              \"The configuration target to unlock.\";\n            leaf candidate\
    \ {\n              if-feature candidate;\n              type empty;\n        \
    \      description\n                \"The candidate configuration is the config\
    \ target.\";\n            }\n            leaf running {\n              type empty;\n\
    \              description\n                \"The running configuration is the\
    \ config target.\";\n            }\n            leaf startup {\n             \
    \ if-feature startup;\n              type empty;\n              description\n\
    \                \"The startup configuration is the config target.\";\n      \
    \      }\n          }\n        }\n      }\n    }\n    rpc get {\n      description\n\
    \        \"Retrieve running configuration and device state information.\";\n \
    \     reference \"RFC 6241, Section 7.7\";\n      input {\n        anyxml filter\
    \ {\n          description\n            \"This parameter specifies the portion\
    \ of the system\n             configuration and state data to retrieve.\";\n \
    \         nc:get-filter-element-attributes;\n        }\n      }\n      output\
    \ {\n        anyxml data {\n          description\n            \"Copy of the running\
    \ datastore subset and/or state\n             data that matched the filter criteria\
    \ (if any).\n             An empty data container indicates that the request did\
    \ not\n             produce any results.\";\n        }\n      }\n    }\n    rpc\
    \ close-session {\n      description\n        \"Request graceful termination of\
    \ a NETCONF session.\";\n      reference \"RFC 6241, Section 7.8\";\n    }\n \
    \   rpc kill-session {\n      description\n        \"Force the termination of\
    \ a NETCONF session.\";\n      reference \"RFC 6241, Section 7.9\";\n      input\
    \ {\n        leaf session-id {\n          type session-id-type;\n          mandatory\
    \ true;\n          description\n            \"Particular session to kill.\";\n\
    \        }\n      }\n    }\n    rpc commit {\n      if-feature candidate;\n  \
    \    description\n        \"Commit the candidate configuration as the device's\
    \ new\n         current configuration.\";\n      reference \"RFC 6241, Section\
    \ 8.3.4.1\";\n      input {\n        leaf confirmed {\n          if-feature confirmed-commit;\n\
    \          type empty;\n          description\n            \"Requests a confirmed\
    \ commit.\";\n          reference \"RFC 6241, Section 8.3.4.1\";\n        }\n\
    \        leaf confirm-timeout {\n          if-feature confirmed-commit;\n    \
    \      type uint32 {\n            range \"1..max\";\n          }\n          units\
    \ \"seconds\";\n          default \"600\";   // 10 minutes\n          description\n\
    \            \"The timeout interval for a confirmed commit.\";\n          reference\
    \ \"RFC 6241, Section 8.3.4.1\";\n        }\n        leaf persist {\n        \
    \  if-feature confirmed-commit;\n          type string;\n          description\n\
    \            \"This parameter is used to make a confirmed commit\n           \
    \  persistent.  A persistent confirmed commit is not aborted\n             if\
    \ the NETCONF session terminates.  The only way to abort\n             a persistent\
    \ confirmed commit is to let the timer expire,\n             or to use the <cancel-commit>\
    \ operation.\n             The value of this parameter is a token that must be\
    \ given\n             in the 'persist-id' parameter of <commit> or\n         \
    \    <cancel-commit> operations in order to confirm or cancel\n             the\
    \ persistent confirmed commit.\n             The token should be a random string.\"\
    ;\n          reference \"RFC 6241, Section 8.3.4.1\";\n        }\n        leaf\
    \ persist-id {\n          if-feature confirmed-commit;\n          type string;\n\
    \          description\n            \"This parameter is given in order to commit\
    \ a persistent\n             confirmed commit.  The value must be equal to the\
    \ value\n             given in the 'persist' parameter to the <commit> operation.\n\
    \             If it does not match, the operation fails with an\n            'invalid-value'\
    \ error.\";\n          reference \"RFC 6241, Section 8.3.4.1\";\n        }\n \
    \     }\n    }\n    rpc discard-changes {\n      if-feature candidate;\n     \
    \ description\n        \"Revert the candidate configuration to the current\n \
    \        running configuration.\";\n      reference \"RFC 6241, Section 8.3.4.2\"\
    ;\n    }\n    rpc cancel-commit {\n      if-feature confirmed-commit;\n      description\n\
    \        \"This operation is used to cancel an ongoing confirmed commit.\n   \
    \      If the confirmed commit is persistent, the parameter\n         'persist-id'\
    \ must be given, and it must match the value of the\n         'persist' parameter.\"\
    ;\n      reference \"RFC 6241, Section 8.4.4.1\";\n      input {\n        leaf\
    \ persist-id {\n          type string;\n          description\n            \"\
    This parameter is given in order to cancel a persistent\n             confirmed\
    \ commit.  The value must be equal to the value\n             given in the 'persist'\
    \ parameter to the <commit> operation.\n             If it does not match, the\
    \ operation fails with an\n            'invalid-value' error.\";\n        }\n\
    \      }\n    }\n    rpc validate {\n      if-feature validate;\n      description\n\
    \        \"Validates the contents of the specified configuration.\";\n      reference\
    \ \"RFC 6241, Section 8.6.4.1\";\n      input {\n        container source {\n\
    \          description\n            \"Particular configuration to validate.\"\
    ;\n          choice config-source {\n            mandatory true;\n           \
    \ description\n              \"The configuration source to validate.\";\n    \
    \        leaf candidate {\n              if-feature candidate;\n             \
    \ type empty;\n              description\n                \"The candidate configuration\
    \ is the config source.\";\n            }\n            leaf running {\n      \
    \        type empty;\n              description\n                \"The running\
    \ configuration is the config source.\";\n            }\n            leaf startup\
    \ {\n              if-feature startup;\n              type empty;\n          \
    \    description\n                \"The startup configuration is the config source.\"\
    ;\n            }\n            leaf url {\n              if-feature url;\n    \
    \          type inet:uri;\n              description\n                \"The URL-based\
    \ configuration is the config source.\";\n            }\n            anyxml config\
    \ {\n              description\n                \"Inline Config content: <config>\
    \ element.  Represents\n                 an entire configuration datastore, not\n\
    \                 a subset of the running datastore.\";\n            }\n     \
    \     }\n        }\n      }\n    }\n  }\n  <CODE ENDS>\n"
- title: Appendix D.  Capability Template
  contents:
  - "Appendix D.  Capability Template\n   This non-normative section defines a template\
    \ that can be used to\n   define protocol capabilities.  Data models written in\
    \ YANG usually do\n   not need to define protocol capabilities since the usage\
    \ of YANG\n   automatically leads to a capability announcing the data model and\
    \ any\n   optional portions of the data model, so called features in YANG\n  \
    \ terminology.  The capabilities template is intended to be used in\n   cases\
    \ where the YANG mechanisms are not powerful enough (e.g., for\n   handling parameterized\
    \ features) or a different data modeling\n   language is used.\n"
- title: D.1.  capability-name (template)
  contents:
  - 'D.1.  capability-name (template)

    '
- title: D.1.1.  Overview
  contents:
  - 'D.1.1.  Overview

    '
- title: D.1.2.  Dependencies
  contents:
  - 'D.1.2.  Dependencies

    '
- title: D.1.3.  Capability Identifier
  contents:
  - "D.1.3.  Capability Identifier\n   The {name} capability is identified by the\
    \ following capability\n   string:\n      {capability uri}\n"
- title: D.1.4.  New Operations
  contents:
  - 'D.1.4.  New Operations

    '
- title: D.1.4.1.  <op-name>
  contents:
  - 'D.1.4.1.  <op-name>

    '
- title: D.1.5.  Modifications to Existing Operations
  contents:
  - 'D.1.5.  Modifications to Existing Operations

    '
- title: D.1.5.1.  <op-name>
  contents:
  - "D.1.5.1.  <op-name>\n   If existing operations are not modified by this capability,\
    \ this\n   section may be omitted.\n"
- title: D.1.6.  Interactions with Other Capabilities
  contents:
  - "D.1.6.  Interactions with Other Capabilities\n   If this capability does not\
    \ interact with other capabilities, this\n   section may be omitted.\n"
- title: Appendix E.  Configuring Multiple Devices with NETCONF
  contents:
  - "Appendix E.  Configuring Multiple Devices with NETCONF\n   This section is non-normative.\n"
- title: E.1.  Operations on Individual Devices
  contents:
  - "E.1.  Operations on Individual Devices\n   Consider the work involved in performing\
    \ a configuration update\n   against a single individual device.  In making a\
    \ change to the\n   configuration, the application needs to build trust that its\
    \ change\n   has been made correctly and that it has not impacted the operation\
    \ of\n   the device.  The application (and the application user) should feel\n\
    \   confident that their change has not damaged the network.\n   Protecting each\
    \ individual device consists of a number of steps:\n   o  Acquiring the configuration\
    \ lock.\n   o  Checkpointing the running configuration.\n   o  Loading and validating\
    \ the incoming configuration.\n   o  Changing the running configuration.\n   o\
    \  Testing the new configuration.\n   o  Making the change permanent (if desired).\n\
    \   o  Releasing the configuration lock.\n   Let's look at the details of each\
    \ step.\n"
- title: E.1.1.  Acquiring the Configuration Lock
  contents:
  - "E.1.1.  Acquiring the Configuration Lock\n   A lock should be acquired to prevent\
    \ simultaneous updates from\n   multiple sources.  If multiple sources are affecting\
    \ the device, the\n   application is hampered in both testing of its change to\
    \ the\n   configuration and in recovery if the update fails.  Acquiring a\n  \
    \ short-lived lock is a simple defense to prevent other parties from\n   introducing\
    \ unrelated changes.\n   The lock can be acquired using the <lock> operation.\n\
    \     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <lock>\n         <target>\n           <running/>\n         </target>\n\
    \       </lock>\n     </rpc>\n   If the :candidate capability is supported, the\
    \ candidate\n   configuration should be locked.\n     <rpc message-id=\"101\"\n\
    \          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <lock>\n\
    \         <target>\n           <candidate/>\n         </target>\n       </lock>\n\
    \     </rpc>\n"
- title: E.1.2.  Checkpointing the Running Configuration
  contents:
  - "E.1.2.  Checkpointing the Running Configuration\n   The running configuration\
    \ can be saved into a local file as a\n   checkpoint before loading the new configuration.\
    \  If the update\n   fails, the configuration can be restored by reloading the\
    \ checkpoint\n   file.\n   The checkpoint file can be created using the <copy-config>\
    \ operation.\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <copy-config>\n         <target>\n           <url>file://checkpoint.conf</url>\n\
    \         </target>\n         <source>\n           <running/>\n         </source>\n\
    \       </copy-config>\n     </rpc>\n   To restore the checkpoint file, reverse\
    \ the <source> and <target>\n   parameters.\n"
- title: E.1.3.  Loading and Validating the Incoming Configuration
  contents:
  - "E.1.3.  Loading and Validating the Incoming Configuration\n   If the :candidate\
    \ capability is supported, the configuration can be\n   loaded onto the device\
    \ without impacting the running system.\n     <rpc message-id=\"101\"\n      \
    \    xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <edit-config>\n\
    \         <target>\n           <candidate/>\n         </target>\n         <config>\n\
    \           <!-- place incoming configuration changes here -->\n         </config>\n\
    \       </edit-config>\n     </rpc>\n   If the device supports the :validate:1.1\
    \ capability, it will by\n   default validate the incoming configuration when\
    \ it is loaded into\n   the candidate.  To avoid this validation, pass the <test-option>\n\
    \   parameter with the value \"set\".  Full validation can be requested\n   with\
    \ the <validate> operation.\n     <rpc message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <validate>\n         <source>\n\
    \           <candidate/>\n         </source>\n       </validate>\n     </rpc>\n"
- title: E.1.4.  Changing the Running Configuration
  contents:
  - "E.1.4.  Changing the Running Configuration\n   When the incoming configuration\
    \ has been safely loaded onto the\n   device and validated, it is ready to impact\
    \ the running system.\n   If the device supports the :candidate capability, use\
    \ the <commit>\n   operation to set the running configuration to the candidate\n\
    \   configuration.  Use the <confirmed> parameter to allow automatic\n   reversion\
    \ to the original configuration if connectivity to the device\n   fails.\n   \
    \  <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <commit>\n         <confirmed/>\n         <confirm-timeout>120</confirm-timeout>\n\
    \       </commit>\n     </rpc>\n   If the candidate is not supported by the device,\
    \ the incoming\n   configuration change is loaded directly into running.\n   \
    \  <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <edit-config>\n         <target>\n           <running/>\n         </target>\n\
    \         <config>\n           <!-- place incoming configuration changes here\
    \ -->\n         </config>\n       </edit-config>\n     </rpc>\n"
- title: E.1.5.  Testing the New Configuration
  contents:
  - "E.1.5.  Testing the New Configuration\n   Now that the incoming configuration\
    \ has been integrated into the\n   running configuration, the application needs\
    \ to gain trust that the\n   change has affected the device in the way intended\
    \ without affecting\n   it negatively.\n   To gain this confidence, the application\
    \ can run tests of the\n   operational state of the device.  The nature of the\
    \ test is dependent\n   on the nature of the change and is outside the scope of\
    \ this\n   document.  Such tests may include reachability from the system\n  \
    \ running the application (using ping), changes in reachability to the\n   rest\
    \ of the network (by comparing the device's routing table), or\n   inspection\
    \ of the particular change (looking for operational evidence\n   of the BGP peer\
    \ that was just added).\n"
- title: E.1.6.  Making the Change Permanent
  contents:
  - "E.1.6.  Making the Change Permanent\n   When the configuration change is in place\
    \ and the application has\n   sufficient faith in the proper function of this\
    \ change, the\n   application is expected to make the change permanent.\n   If\
    \ the device supports the :startup capability, the current\n   configuration can\
    \ be saved to the startup configuration by using the\n   startup configuration\
    \ as the target of the <copy-config> operation.\n     <rpc message-id=\"101\"\n\
    \          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <copy-config>\n\
    \         <target>\n           <startup/>\n         </target>\n         <source>\n\
    \           <running/>\n         </source>\n       </copy-config>\n     </rpc>\n\
    \   If the device supports the :candidate capability and a confirmed\n   commit\
    \ was requested, the confirming commit must be sent before the\n   timeout expires.\n\
    \     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <commit/>\n     </rpc>\n"
- title: E.1.7.  Releasing the Configuration Lock
  contents:
  - "E.1.7.  Releasing the Configuration Lock\n   When the configuration update is\
    \ complete, the lock must be released,\n   allowing other applications access\
    \ to the configuration.\n   Use the <unlock> operation to release the configuration\
    \ lock.\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <unlock>\n         <target>\n           <running/>\n         </target>\n\
    \       </unlock>\n     </rpc>\n   If the :candidate capability is supported,\
    \ the candidate\n   configuration should be unlocked.\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <unlock>\n\
    \         <target>\n           <candidate/>\n         </target>\n       </unlock>\n\
    \     </rpc>\n"
- title: E.2.  Operations on Multiple Devices
  contents:
  - "E.2.  Operations on Multiple Devices\n   When a configuration change requires\
    \ updates across a number of\n   devices, care needs to be taken to provide the\
    \ required transaction\n   semantics.  The NETCONF protocol contains sufficient\
    \ primitives upon\n   which transaction-oriented operations can be built.  Providing\n\
    \   complete transactional semantics across multiple devices is\n   prohibitively\
    \ expensive, but the size and number of windows for\n   failure scenarios can\
    \ be reduced.\n   There are two classes of multi-device operations.  The first\
    \ class\n   allows the operation to fail on individual devices without requiring\n\
    \   all devices to revert to their original state.  The operation can be\n   retried\
    \ at a later time, or its failure simply reported to the user.\n   An example\
    \ of this class might be adding an NTP server.  For this\n   class of operations,\
    \ failure avoidance and recovery are focused on\n   the individual device.  This\
    \ means recovery of the device, reporting\n   the failure, and perhaps scheduling\
    \ another attempt.\n   The second class is more interesting, requiring that the\
    \ operation\n   should complete on all devices or be fully reversed.  The network\n\
    \   should either be transformed into a new state or be reset to its\n   original\
    \ state.  For example, a change to a VPN may require updates\n   to a number of\
    \ devices.  Another example of this might be adding a\n   class-of-service definition.\
    \  Leaving the network in a state where\n   only a portion of the devices have\
    \ been updated with the new\n   definition will lead to future failures when the\
    \ definition is\n   referenced.\n   To give transactional semantics, the same\
    \ steps used in single-device\n   operations listed above are used, but are performed\
    \ in parallel\n   across all devices.  Configuration locks should be acquired\
    \ on all\n   target devices and kept until all devices are updated and the changes\n\
    \   made permanent.  Configuration changes should be uploaded and\n   validation\
    \ performed across all devices.  Checkpoints should be made\n   on each device.\
    \  Then the running configuration can be changed,\n   tested, and made permanent.\
    \  If any of these steps fail, the previous\n   configurations can be restored\
    \ on any devices upon which they were\n   changed.  After the changes have been\
    \ completely implemented or\n   completely discarded, the locks on each device\
    \ can be released.\n"
- title: Appendix F.  Changes from RFC 4741
  contents:
  - "Appendix F.  Changes from RFC 4741\n   This section lists major changes between\
    \ this document and RFC 4741.\n   o  Added the \"malformed-message\" error-tag.\n\
    \   o  Added \"remove\" enumeration value to the \"operation\" attribute.\n  \
    \ o  Obsoleted the \"partial-operation\" error-tag enumeration value.\n   o  Added\
    \ <persist> and <persist-id> parameters to the <commit>\n      operation.\n  \
    \ o  Updated the base protocol URI and clarified the <hello> message\n      exchange\
    \ to select and identify the base protocol version in use\n      for a particular\
    \ session.\n   o  Added a YANG module to model the operations and removed the\n\
    \      operation layer from the XSD.\n   o  Clarified lock behavior for the candidate\
    \ datastore.\n   o  Clarified the error response server requirements for the \"\
    delete\"\n      enumeration value of the \"operation\" attribute.\n   o  Added\
    \ a namespace wildcarding mechanism for subtree filtering.\n   o  Added a \"test-only\"\
    \ value for the <test-option> parameter to the\n      <edit-config> operation.\n\
    \   o  Added a <cancel-commit> operation.\n   o  Introduced a NETCONF username\
    \ and a requirement for transport\n      protocols to explain how a username is\
    \ derived.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Rob Enns (editor)\n   Juniper Networks\n   EMail: rob.enns@gmail.com\n\
    \   Martin Bjorklund (editor)\n   Tail-f Systems\n   EMail: mbj@tail-f.com\n \
    \  Juergen Schoenwaelder (editor)\n   Jacobs University\n   EMail: j.schoenwaelder@jacobs-university.de\n\
    \   Andy Bierman (editor)\n   Brocade\n   EMail: andy.bierman@brocade.com\n"
