- title: __initial_text__
  contents:
  - "           Privacy Enhancement for Internet Electronic Mail:\n              \
    \ Part II: Certificate-Based Key Management\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for\
    \ the Internet\n   community, and requests discussion and suggestions for improvements.\n\
    \   Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This memo is the outgrowth of a series of meetings of the\
    \ Privacy and\n   Security Research Group of the Internet Research Task Force\
    \ (IRTF)\n   and the Privacy-Enhanced Electronic Mail Working Group of the\n \
    \  Internet Engineering Task Force (IETF).  I would like to thank the\n   members\
    \ of the PSRG and the PEM WG for their comments and\n   contributions at the meetings\
    \ which led to the preparation of this\n   document.  I also would like to thank\
    \ contributors to the PEM-DEV\n   mailing list who have provided valuable input\
    \ which is reflected in\n   this memo.\n"
- title: 1.  Executive Summary
  contents:
  - "1.  Executive Summary\n   This is one of a series of documents defining privacy\
    \ enhancement\n   mechanisms for electronic mail transferred using Internet mail\n\
    \   protocols.  RFC 1421 [6] prescribes protocol extensions and\n   processing\
    \ procedures for RFC-822 mail messages, given that suitable\n   cryptographic\
    \ keys are held by originators and recipients as a\n   necessary precondition.\
    \  RFC 1423 [7] specifies algorithms, modes and\n   associated identifiers for\
    \ use in processing privacy-enhanced\n   messages, as called for in RFC 1421 and\
    \ this document.  This document\n   defines a supporting key management architecture\
    \ and infrastructure,\n   based on public-key certificate techniques, to provide\
    \ keying\n   information to message originators and recipients.  RFC 1424 [8]\n\
    \   provides additional specifications for services in conjunction with\n   the\
    \ key management infrastructure described herein.\n   The key management architecture\
    \ described in this document is\n   compatible with the authentication framework\
    \ described in CCITT 1988\n   X.509 [2].  This document goes beyond X.509 by establishing\n\
    \   procedures and conventions for a key management infrastructure for\n   use\
    \ with Privacy Enhanced Mail (PEM) and with other protocols, from\n   both the\
    \ TCP/IP and OSI suites, in the future.  There are several\n   motivations for\
    \ establishing these procedures and conventions (as\n   opposed to relying only\
    \ on the very general framework outlined in\n   X.509):\n       -It is important\
    \ that a certificate management infrastructure\n           for use in the Internet\
    \ community accommodate a range of\n           clearly-articulated certification\
    \ policies for both users\n           and   organizations in a well-architected\
    \ fashion.\n           Mechanisms must be provided to enable each user to be\n\
    \           aware of the policies governing any certificate which the\n      \
    \     user may encounter.  This requires the introduction\n           and standardization\
    \ of procedures and conventions that are\n           outside the scope of X.509.\n\
    \       -The procedures for authenticating originators and recipient in\n    \
    \       the course of message submission and delivery should be\n           simple,\
    \ automated and uniform despite the existence of\n           differing certificate\
    \ management policies.  For example,\n           users should not have to engage\
    \ in careful examination of a\n           complex set of certification relationships\
    \ in order to\n           evaluate the credibility of a claimed identity.\n  \
    \     -The authentication framework defined by X.509 is designed to\n        \
    \   operate in the X.500 directory server environment.  However\n           X.500\
    \ directory servers are not expected to be ubiquitous\n           in the Internet\
    \ in the near future, so some conventions\n           are adopted to facilitate\
    \ operation of the key management\n           infrastructure in the near term.\n\
    \       -Public key cryptosystems are central to the authentication\n        \
    \   technology of X.509 and those which enjoy the most\n           widespread\
    \ use are patented in the U.S.  Although this\n           certification management\
    \ scheme is compatible with\n           the use of different digital signature\
    \ algorithms, it is\n           anticipated that the RSA cryptosystem will be\
    \ used as\n           the primary signature algorithm in establishing the\n  \
    \         Internet certification hierarchy.  Special license\n           arrangements\
    \ have been made to facilitate the\n           use of this algorithm in the U.S.\
    \ portion of Internet\n           environment.\n   The infrastructure specified\
    \ in this document establishes a single\n   root for all certification within\
    \ the Internet, the Internet Policy\n   Registration Authority (IPRA).  The IPRA\
    \ establishes global policies,\n   described in this document, which apply to\
    \ all certification effected\n   under this hierarchy.  Beneath IPRA root are\
    \ Policy Certification\n   Authorities (PCAs), each of which establishes and publishes\
    \ (in the\n   form of an informational RFC) its policies for registration of users\n\
    \   or organizations.  Each PCA is certified by the IPRA. (It is\n   desirable\
    \ that there be a relatively small number of PCAs, each with\n   a substantively\
    \ different policy, to facilitate user familiarity with\n   the set of PCA policies.\
    \  However there is no explicit requirement\n   that the set of PCAs be limited\
    \ in this fashion.)  Below PCAs,\n   Certification Authorities (CAs) will be established\
    \ to certify users\n   and subordinate organizational entities (e.g., departments,\
    \ offices,\n   subsidiaries, etc.).  Initially, we expect the majority of users\
    \ will\n   be registered via organizational affiliation, consistent with current\n\
    \   practices for how most user mailboxes are provided.  In this sense\n   the\
    \ registration is analogous to the issuance of a university or\n   company ID\
    \ card.\n   Some CAs are expected to provide certification for residential users\n\
    \   in support of users who wish to register independent of any\n   organizational\
    \ affiliation.  Over time, we anticipate that civil\n   government entities which\
    \  already provide analogous identification\n   services in other contexts, e.g.,\
    \  driver's licenses, may provide\n   this service.  For users who wish anonymity\
    \ while taking advantage of\n   PEM privacy facilities, one or more PCAs will\
    \ be established with\n   policies that allow for registration of users, under\
    \ subordinate CAs,\n   who do not wish to disclose their identities.\n"
- title: 2.  Overview of Approach
  contents:
  - "2.  Overview of Approach\n   This document defines a key management architecture\
    \ based on the use\n   of public-key certificates, primarily in support of the\
    \ message\n   encipherment and authentication procedures defined in RFC 1421.\
    \  The\n   concept of public-key certificates is defined in X.509 and this\n \
    \  architecture is a compliant subset of that envisioned in X.509.\n   Briefly,\
    \ a (public-key) certificate is a data structure which\n   contains the name of\
    \ a user (the \"subject\"), the public component\n   (This document adopts the\
    \ terms \"private component\" and \"public\n   component\" to refer to the quantities\
    \ which are, respectively, kept\n   secret and made publicly available in asymmetric\
    \ cryptosystems.  This\n   convention is adopted to avoid possible confusion arising\
    \ from use of\n   the term \"secret key\" to refer to either the former quantity\
    \ or to a\n   key in a symmetric cryptosystem.)  of that user, and the name of\
    \ an\n   entity (the \"issuer\") which vouches that the public component is\n\
    \   bound to the named user.  This data, along with a time interval over\n   which\
    \ the binding is claimed to be valid, is cryptographically signed\n   by the issuer\
    \ using the issuer's private component.  The subject and\n   issuer names in certificates\
    \ are Distinguished Names (DNs) as defined\n   in the directory system (X.500).\n\
    \   Once signed, certificates can be stored in directory servers,\n   transmitted\
    \ via non-secure message exchanges, or distributed via any\n   other means that\
    \ make certificates easily accessible to message\n   system users, without regard\
    \ for the security of the transmission\n   medium.  Certificates are used in PEM\
    \ to provide the originator of a\n   message with the (authenticated) public component\
    \ of each recipient\n   and to provide each recipient with the (authenticated)\
    \ public\n   component of the originator.  The following brief discussion\n  \
    \ illustrates the procedures for both originator and recipients.\n   Prior to\
    \ sending an encrypted message (using PEM), an originator must\n   acquire a certificate\
    \ for each recipient and must validate these\n   certificates.  Briefly, validation\
    \ is performed by checking the\n   digital signature in the certificate, using\
    \ the public component of\n   the issuer whose private component was used to sign\
    \ the certificate.\n   The issuer's public component is made available via some\
    \ out of band\n   means (for the IPRA) or is itself distributed in a certificate\
    \ to\n   which this validation procedure is applied recursively.  In the\n   latter\
    \ case, the issuer of a user's certificate becomes the subject\n   in a certificate\
    \ issued by another certifying authority (or a PCA),\n   thus giving rise to a\
    \ certification hierarchy.  The validity interval\n   for each certificate is\
    \ checked and Certificate Revocation Lists\n   (CRLs) are checked to ensure that\
    \ none of the certificates employed\n   in the validation process has been revoked\
    \ by an issuer.\n   Once a certificate for a recipient is validated, the public\
    \ component\n   contained in the certificate is extracted and used to encrypt\
    \ the\n   data encryption key (DEK), which, in turn, is used to encrypt the\n\
    \   message itself.  The resulting encrypted DEK is incorporated into the\n  \
    \ Key-Info field of the message header.  Upon receipt of an encrypted\n   message,\
    \ a recipient employs his private component to decrypt this\n   field, extracting\
    \ the DEK, and then uses this DEK to decrypt the\n   message.\n   In order to\
    \ provide message integrity and data origin authentication,\n   the originator\
    \ generates a message integrity code (MIC), signs\n   (encrypts) the MIC using\
    \ the private component of his public-key\n   pair, and includes the resulting\
    \ value in the message header in the\n   MIC-Info field.  The certificate of the\
    \ originator is (optionally)\n   included in the header in the Certificate field\
    \ as described in RFC\n   1421.  This is done in order to facilitate validation\
    \ in the absence\n   of ubiquitous directory services.  Upon receipt of a privacy\
    \ enhanced\n   message, a recipient validates the originator's certificate (using\n\
    \   the IPRA public component as the root of a certification path),\n   checks\
    \ to ensure that it has not been revoked, extracts the public\n   component from\
    \ the certificate, and uses that value to recover\n   (decrypt) the MIC.  The\
    \ recovered MIC is compared against the locally\n   calculated MIC to verify the\
    \ integrity and data origin authenticity\n   of the message.\n"
- title: 3.  Architecture
  contents:
  - "3.  Architecture\n   3.1  Scope and Restrictions\n   The architecture described\
    \ below is intended to provide a basis for\n   managing public-key cryptosystem\
    \ values in support of privacy\n   enhanced electronic mail in the Internet environment.\
    \  The\n   architecture describes procedures for registering certification\n \
    \  authorities and users, for generating and distributing certificates,\n   and\
    \ for generating and distributing CRLs.  RFC 1421 describes the\n   syntax and\
    \ semantics of header fields used to transfer certificates\n   and to represent\
    \ the DEK and MIC in this public-key context.\n   Definitions of the algorithms,\
    \ modes of use and associated\n   identifiers are separated in RFC 1423 to facilitate\
    \ the adoption of\n   additional algorithms in the future.  This document focuses\
    \ on the\n   management aspects of certificate-based, public-key cryptography\
    \ for\n   privacy enhanced mail.\n   The proposed architecture imposes conventions\
    \ for the certification\n   hierarchy which are not strictly required by the X.509\
    \ recommendation\n   nor by the technology itself.  These conventions are motivated\
    \ by\n   several factors, primarily the need for authentication semantics\n  \
    \ compatible with automated validation and the automated determination\n   of\
    \ the policies under which certificates are issued.\n   Specifically, the architecture\
    \ proposes a system in which user (or\n   mailing list) certificates represent\
    \ the leaves in a certification\n   hierarchy.  This certification hierarchy is\
    \ largely isomorphic to the\n   X.500 directory naming hierarchy, with two exceptions:\
    \ the IPRA forms\n   the root of the tree (the root of the X.500 DIT is not instantiated\n\
    \   as a node), and a number of Policy Certification Authorities (PCAs)\n   form\
    \ the \"roots\" of subtrees, each of which represents a different\n   certification\
    \ policy.\n   Not every level in the directory hierarchy need correspond to a\n\
    \   certification authority.  For example, the appearance of geographic\n   entities\
    \ in a distinguished name (e.g., countries, states, provinces,\n   localities)\
    \ does not require that various governments become\n   certifying authorities\
    \ in order to instantiate this architecture.\n   However, it is anticipated that,\
    \ over time, a number of such points\n   in the hierarchy will be instantiated\
    \ as CAs in order to simplify\n   later transition of management to appropriate\
    \ governmental\n   authorities.\n   These conventions minimize the complexity\
    \ of validating user\n   certificates, e.g., by making explicit the relationship\
    \ between a\n   certificate issuer and the user (via the naming hierarchy). Note\
    \ that\n   in this architecture, only PCAs may be certified by the IPRA, and\n\
    \   every CA's certification path can be traced to a PCA, through zero or\n  \
    \ more CAs.  If a CA is certified by more than one PCA, each\n   certificate issued\
    \ by a PCA for the CA must contain a distinct public\n   component.  These conventions\
    \ result in a certification hierarchy\n   which is a compatible subset of that\
    \ permitted under X.509, with\n   respect to both syntax and semantics.\n   Although\
    \ the key management architecture described in this document\n   has been designed\
    \ primarily to support privacy enhanced mail, this\n   infrastructure also may,\
    \ in principle, be used to support X.400 mail\n   security facilities (as per\
    \ 1988 X.411) and X.500 directory\n   authentication facilities.  Thus, establishment\
    \ of this\n   infrastructure paves the way for use of these and other OSI protocols\n\
    \   in the Internet in the future.  In the future, these certificates\n   also\
    \ may be employed in the provision of security services in other\n   protocols\
    \ in the TCP/IP and OSI suites as well.\n   3.2  Relation to X.509 Architecture\n\
    \   CCITT 1988 Recommendation X.509, \"The Directory - Authentication\n   Framework\"\
    , defines a framework for authentication of entities\n   involved in a distributed\
    \ directory service.  Strong authentication,\n   as defined in X.509, is accomplished\
    \ with the use of public-key\n   cryptosystems.  Unforgeable certificates are\
    \ generated by\n   certification authorities; these authorities may be organized\n\
    \   hierarchically, though such organization is not required by X.509.\n   There\
    \ is no implied mapping between a certification hierarchy and the\n   naming hierarchy\
    \ imposed by directory system naming attributes.\n   This document interprets\
    \ the X.509 certificate mechanism to serve the\n   needs of PEM in the Internet\
    \ environment.  The certification\n   hierarchy proposed in this document in support\
    \ of privacy enhanced\n   mail is intentionally a subset of that allowed under\
    \ X.509.  This\n   certification hierarchy also embodies semantics which are not\n\
    \   explicitly addressed by X.509, but which are consistent with X.509\n   precepts.\
    \  An overview of the rationale for these semantics is\n   provided in Section\
    \ 1.\n   3.3  Certificate Definition\n   Certificates are central to the key management\
    \ architecture for X.509\n   and PEM.  This section provides an overview of the\
    \ syntax and a\n   description of the semantics of certificates.  Appendix A includes\n\
    \   the ASN.1 syntax for certificates.   A certificate includes the\n   following\
    \ contents:\n       1.  version\n       2.  serial number\n       3.  signature\
    \ (algorithm ID and parameters)\n       4.  issuer name\n       5.  validity period\n\
    \       6.  subject name\n       7.  subject public key (and associated algorithm\
    \ ID)\n   3.3.1  Version Number\n   The version number field is intended to facilitate\
    \ orderly changes in\n   certificate formats over time.  The initial version number\
    \ for\n   certificates used in PEM is the X.509 default which has a value of\n\
    \   zero (0), indicating the 1988 version.  PEM implementations are\n   encouraged\
    \ to accept later versions as they are endorsed by\n   CCITT/ISO.\n   3.3.2  Serial\
    \ Number\n   The serial number field provides a short form, unique identifier\
    \ for\n   each certificate generated by an issuer.  An issuer must ensure that\n\
    \   no two distinct certificates with the same issuer DN contain the same\n  \
    \ serial number.  (This requirement must be met even when the\n   certification\
    \ function is effected on a distributed basis and/or when\n   the same issuer\
    \ DN is certified under two different PCAs.  This is\n   especially critical for\
    \ residential CAs certified under different\n   PCAs.) The serial number is used\
    \ in CRLs to identify revoked\n   certificates, as described in Section 3.4.3.4.\
    \  Although this\n   attribute is an integer, PEM UA processing of this attribute\
    \ need not\n   involve any arithmetic operations.  All PEM UA implementations\
    \ must\n   be capable of processing serial numbers at least 128 bits in length,\n\
    \   and size-independent support serial numbers is encouraged.\n   3.3.3  Signature\n\
    \   This field specifies the algorithm used by the issuer to sign the\n   certificate,\
    \ and any parameters associated with the algorithm. (The\n   certificate signature\
    \ is appended to the data structure, as defined\n   by the signature macro in\
    \ X.509.  This algorithm identification\n   information is replicated with the\
    \ signature.)  The signature is\n   validated by the UA processing a certificate,\
    \ in order to determine\n   that the integrity of its contents have not been modified\
    \ subsequent\n   to signing by a CA (IPRA, or PCA).  In this context, a signature\
    \ is\n   effected through the use of a Certificate Integrity Check (CIC)\n   algorithm\
    \ and a public-key encryption algorithm.  RFC 1423 contains\n   the definitions\
    \ and algorithm IDs for signature algorithms employed\n   in this architecture.\n\
    \   3.3.4  Subject Name\n   A certificate provides a representation of its subject's\
    \ identity in\n   the form of a Distinguished Name (DN).  The fundamental binding\n\
    \   ensured by the key management architecture is that between the public\n  \
    \ component and the user's identity in this form.  A distinguished name\n   is\
    \ an X.500 directory system concept and if a user is already\n   registered in\
    \ an X.500 directory, his distinguished name is defined\n   via that registration.\
    \  Users who are not registered in a directory\n   should keep in mind likely\
    \ directory naming structure (schema) when\n   selecting a distinguished name\
    \ for inclusion in a certificate.\n   3.3.5  Issuer Name\n   A certificate provides\
    \ a representation of its issuer's identity, in\n   the form of a Distinguished\
    \ Name.  The issuer identification is used\n   to select the appropriate issuer\
    \ public component to employ in\n   performing certificate validation.  (If an\
    \ issuer (CA) is certified\n   by multiple PCAs, then the issuer DN does not uniquely\
    \ identify the\n   public component used to sign the certificate.  In such circumstances\n\
    \   it may be necessary to attempt certificate validation using multiple\n   public\
    \ components, from certificates held by the issuer under\n   different PCAs. \
    \ If the 1992 version of a certificate is employed,\n   the issuer may employ\
    \ distinct issuer UIDs in the certificates it\n   issues, to further facilitate\
    \ selection of the right issuer public\n   component.) The issuer is the certifying\
    \ authority (IPRA, PCA or CA)\n   who vouches for the binding between the subject\
    \ identity and the\n   public key contained in the certificate.\n   3.3.6  Validity\
    \ Period\n   A certificate carries a pair of date and time indications, indicating\n\
    \   the start and end of the time period over which a certificate is\n   intended\
    \ to be used.  The duration of the interval may be constant\n   for all user certificates\
    \ issued by a given CA or it might differ\n   based on the nature of the user's\
    \ affiliation.  For example, an\n   organization might issue certificates with\
    \ shorter intervals to\n   temporary employees versus permanent employees.  It\
    \ is recommended\n   that the UTCT (Coordinated Universal Time) values recorded\
    \ here\n   specify granularity to no more than the minute, even though finer\n\
    \   granularity can be expressed in the format.  (Implementors are warned\n  \
    \ that no DER is defined for UTCT in X.509, thus transformation between\n   local\
    \ and transfer syntax must be performed carefully, e.g., when\n   computing the\
    \ hash value for a certificate.  For example, a UTCT\n   value which includes\
    \ explict, zero values for seconds would not\n   produce the same hash value as\
    \ one in which the seconds were\n   omitted.) It also recommended that all times\
    \ be expressed as\n   Greenwich Mean Time (Zulu), to simplify comparisons and\
    \ avoid\n   confusion relating to daylight savings time.  Note that UTCT\n   expresses\
    \ the value of a year modulo 100 (with no indication of\n   century), hence comparisons\
    \ involving dates in different centuries\n   must be performed with care.\n  \
    \ The longer the interval, the greater the likelihood that compromise\n   of a\
    \ private component or name change will render it invalid and thus\n   require\
    \ that the certificate be revoked.  Once revoked, the\n   certificate must remain\
    \ on the issuer's CRL (see Section 3.4.3.4)\n   until the validity interval expires.\
    \  PCAs may impose restrictions on\n   the maximum validity interval that may\
    \ be elected by CAs operating in\n   their certification domain (see Appendix\
    \ B).\n   3.3.7  Subject Public Key\n   A certificate carries the public component\
    \ of its associated subject,\n   as well as an indication of the algorithm, and\
    \ any algorithm\n   parameters, with which the public component is to be used.\
    \  This\n   algorithm identifier is independent of that which is specified in\
    \ the\n   signature field described above.  RFC 1423 specifies the algorithm\n\
    \   identifiers which may be used in this context.\n   3.4  Roles and Responsibilities\n\
    \   One way to explain the architecture proposed by this document is to\n   examine\
    \ the roles which are defined for various entities in the\n   architecture and\
    \ to describe what is required of each entity in order\n   for the proposed system\
    \ to work properly.  The following sections\n   identify four types of entities\
    \ within this architecture: users and\n   user agents, the Internet Policy Registration\
    \ Authority, Policy\n   Certification Authorities, and other Certification Authorities.\
    \  For\n   each type of entity, this document specifies the procedures which the\n\
    \   entity must execute as part of the architecture and the\n   responsibilities\
    \ the entity assumes as a function of its role in the\n   architecture.\n   3.4.1\
    \  Users and User Agents\n   The term User Agent (UA) is taken from CCITT X.400\
    \ Message Handling\n   Systems (MHS) Recommendations, which define it as follows:\
    \ \"In the\n   context of message handling, the functional object, a component\
    \ of\n   MHS, by means of which a single direct user engages in message\n   handling.\"\
    \   In the Internet environment, programs such as rand mh\n   and Gnu emacs rmail\
    \ are UAs.  UAs exchange messages by calling on a\n   supporting Message Transfer\
    \ Service (MTS), e.g., the SMTP mail relays\n   used in the Internet.\n   3.4.1.1\
    \  Generating and Protecting Component Pairs\n   A UA process supporting PEM must\
    \ protect the private component of its\n   associated entity (e.g., a human user\
    \ or a mailing list) from\n   disclosure, though the means by which this is effected\
    \ is a local\n   matter.  It is essential that the user take all available precautions\n\
    \   to protect his private component as the secrecy of this value is\n   central\
    \ to the security offered by PEM to that user.   For example,\n   the private\
    \ component might be stored in encrypted form, protected\n   with a locally managed\
    \ symmetric encryption key (e.g., using DES).\n   The user would supply a password\
    \ or passphrase which would be\n   employed as a symmetric key to decrypt the\
    \ private component when\n   required for PEM processing (either on a per message\
    \ or per session\n   basis).  Alternatively, the private component might be stored\
    \ on a\n   diskette which would be inserted by the user whenever he originated\n\
    \   or received PEM messages.  Explicit zeroing of memory locations where\n  \
    \ this component transiently resides could provide further protection.\n   Other\
    \ precautions, based on local operating system security\n   facilities, also should\
    \ be employed.\n   It is recommended that each user employ ancillary software\
    \ (not\n   otherwise associated with normal UA operation) or hardware to\n   generate\
    \ his personal public-key component pair.  Software for\n   generating user component\
    \ pairs will be available as part of the\n   reference implementation of PEM distributed\
    \ freely in the U.S.\n   portion of the Internet.  It is critically important\
    \ that the\n   component pair generation procedure be effected in as secure a\n\
    \   fashion as possible, to ensure that the resulting private component\n   is\
    \ unpredictable.  Introduction of adequate randomness into the\n   component pair\
    \ generation procedure is potentially the most difficult\n   aspect of this process\
    \ and the user is advised to pay particular\n   attention to this aspect.  (Component\
    \ pairs employed in public-key\n   cryptosystems tend to be large integers which\
    \ must be \"randomly\"\n   selected subject to mathematical constraints imposed\
    \ by the\n   cryptosystem.  Input(s) used to seed the component pair generation\n\
    \   process must be as unpredictable as possible.  An example of a poor\n   random\
    \ number selection technique is one in which a pseudo-random\n   number generator\
    \ is seeded solely with the current date and time.  An\n   attacker who could\
    \ determine approximately when a component pair was\n   generated could easily\
    \ regenerate candidate component pairs and\n   compare the public component to\
    \ the user's public component to detect\n   when the corresponding private component\
    \ had been found.)\n   There is no requirement imposed by this architecture that\
    \ anyone\n   other than the user, including any certification authority, have\n\
    \   access to the user's private component.  Thus a user may retain his\n   component\
    \ pair even if his certificate changes, e.g., due to rollover\n   in the validity\
    \ interval or because of a change of certifying\n   authority.  Even if a user\
    \ is issued a certificate in the context of\n   his employment, there is generally\
    \ no requirement that the employer\n   have access to the user's private component.\
    \  The rationale is that\n   any messages signed by the user are verifiable using\
    \ his public\n   component.   In the event that the corresponding private component\n\
    \   becomes unavailable, any ENCRYPTED messages directed to the user\n   would\
    \ be indecipherable and would require retransmission.\n   Note that if the user\
    \ stores messages in ENCRYPTED form, these\n   messages also would become indecipherable\
    \ in the event that the\n   private component is lost or changed.  To minimize\
    \ the potential for\n   loss of data in such circumstances messages can be transformed\
    \ into\n   MIC-ONLY or MIC-CLEAR form if cryptographically-enforced\n   confidentiality\
    \ is not required for the messages stored within the\n   user's computer.  Alternatively,\
    \ these transformed messages might be\n   forwarded in ENCRYPTED form to a (trivial)\
    \ distribution list which\n   serves in a backup capacity and for which the user's\
    \ employer holds\n   the private component.\n   A user may possess multiple certificates\
    \ which may embody the same or\n   different public components.  For example,\
    \ these certificates might\n   represent  a current and a former organizational\
    \ user identity and a\n   residential user identity.  It is recommended that a\
    \ PEM UA be\n   capable of supporting a user who possess multiple certificates,\n\
    \   irrespective of whether the certificates associated with the user\n   contain\
    \ the same or different DNs or public components.\n   3.4.1.2  User Registration\n\
    \   Most details of user registration are a local matter, subject to\n   policies\
    \ established by the user's CA and the PCA under which that CA\n   has been certified.\
    \  In general a user must provide, at a minimum,\n   his public component and\
    \ distinguished name to a CA, or a\n   representative thereof, for inclusion in\
    \ the user's certificate.\n   (The user also might provide a  complete certificate,\
    \ minus the\n   signature, as described in RFC 1424.)  The CA will employ some\
    \ means,\n   specified by the CA in accordance with the policy of its PCA, to\n\
    \   validate the user's claimed identity and to ensure that the public\n   component\
    \ provided is associated with the user whose distinguished\n   name is to be bound\
    \ into the certificate.  (In the case of PERSONA\n   certificates, described below,\
    \ the procedure is a bit different.) The\n   certifying authority generates a\
    \ certificate containing the user's\n   distinguished name and public component,\
    \ the authority's\n   distinguished name and other information (see Section 3.3)\
    \ and signs\n   the result using the private component of the authority.\n   3.4.1.3\
    \  CRL Management\n   Mechanisms for managing a UA certificate cache are, in typical\n\
    \   standards parlance, a local matter.  However, proper maintenance of\n   such\
    \ a cache is critical to the correct, secure operation of a PEM UA\n   and provides\
    \ a basis for improved performance.  Moreover, use of a\n   cache permits a PEM\
    \ UA to operate in the absence of directories (and\n   in circumstances where\
    \ directories are inaccessible).  The following\n   discussion  provides a paradigm\
    \ for one aspect of cache management,\n   namely the processing of CRLs, the functional\
    \ equivalent of which\n   must be embodied in any PEM UA implementation compliant\
    \ with this\n   document.  The specifications for CRLs used with PEM are provided\
    \ in\n   Section 3.5.\n   X.500 makes provision for the storage of CRLs as directory\
    \ attributes\n   associated with CA entries.  Thus, when X.500 directories become\n\
    \   widely available, UAs can retrieve CRLs from directories as required.\n  \
    \ In the interim, the IPRA will coordinate with PCAs to provide a\n   robust database\
    \ facility which will contain CRLs issued by the IPRA,\n   by PCAs, and by all\
    \ CAs.  Access to this database will be provided\n   through mailboxes maintained\
    \ by each PCA.  Every PEM UA must provide\n   a facility for requesting CRLs from\
    \ this database using the\n   mechanisms defined in RFC 1424.  Thus the UA must\
    \ include a\n   configuration parameter which specifies one or more mailbox addresses\n\
    \   from which CRLs may be retrieved.  Access to the CRL database may be\n   automated,\
    \ e.g., as part of the certificate validation process (see\n   Section 3.6) or\
    \ may be user directed.  Responses to CRL requests will\n   employ the PEM header\
    \ format specified in RFC 1421 for CRL\n   propagation.  As noted in RFC 1421,\
    \ every PEM UA must be capable of\n   processing CRLs distributed via such messages.\
    \  This message format\n   also may be employed to support a \"push\" (versus\
    \ a \"pull\") model of\n   CRL distribution, i.e., to support unsolicited distribution\
    \ of CRLs.\n   CRLs received by a PEM UA must be validated (A CRL is validated\
    \ in\n   much the same manner as a certificate, i.e., the CIC (see RFC 1113)\n\
    \   is calculated and compared against the decrypted signature value\n   obtained\
    \ from the CRL.  See Section 3.6 for additional details\n   related to validation\
    \ of certificates.) prior to being processed\n   against any cached certificate\
    \ information.  Any cache entries which\n   match CRL entries should be marked\
    \ as revoked, but it is not\n   necessary to delete cache entries marked as revoked\
    \ nor to delete\n   subordinate entries.  In processing a CRL against the cache\
    \ it is\n   important to recall that certificate serial numbers are unique only\n\
    \   for each issuer and that multiple, distinct CRLs may be issued under\n   the\
    \ same CA DN (signed using different private components), so care\n   must be\
    \ exercised in effecting this cache search.  (This situation\n   may arise either\
    \ because an organizational CA is certified by\n   multiple PCAs, or because multiple\
    \ residential CAs are certified\n   under different PCAs.)\n   This procedure\
    \ applies to cache entries associated with PCAs and CAs,\n   as well as user entries.\
    \  The UA also must retain each CRL to screen\n   incoming messages to detect\
    \ use of revoked certificates carried in\n   PEM message headers.  Thus a UA must\
    \ be capable of processing and\n   retaining CRLs issued by the IPRA (which will\
    \ list revoked PCA\n   certificates), by any PCA (which will list revoked CA certificate\n\
    \   issued by that PCA), and by any CA (which will list revoked user or\n   subordinate\
    \ CA certificates issued by that CA).\n   3.4.1.4  Facilitating Interoperation\n\
    \   In the absence of ubiquitous directory services or knowledge\n   (acquired\
    \ through out-of-band means) that a recipient already\n   possesses the necessary\
    \ issuer certificates, it is recommended that\n   an originating (PEM) UA include\
    \ sufficient certificates to permit\n   validation of the user's public key. \
    \ To this end every PEM UA must\n   be capable of including a full (originator)\
    \ certification path, i.e.,\n   including the user's certificate (using the \"\
    Originator-Certificate\"\n   field) and every superior (CA/PCA) certificate (using\
    \ \"Issuer-\n   Certificate\" fields) back to the IPRA, in a PEM message.  A PEM\
    \ UA\n   may send less than a full certification path, e.g., based on analysis\n\
    \   of a recipient list, but a UA which provides this sort of\n   optimization\
    \ must also provide the user with a capability to force\n   transmission of a\
    \ full certification path.\n   Optimization for the transmitted originator certification\
    \ path may be\n   effected by a UA as a side effect of the processing performed\
    \ during\n   message submission.  When an originator submits an ENCRYPTED message\n\
    \   (as per RFC 1421, his UA must validate the certificates of the\n   recipients\
    \ (see Section 3.6).  In the course of performing this\n   validation the UA can\
    \ determine the minimum set of certificates which\n   must be included to ensure\
    \ that all recipients can process the\n   received message.  Submission of a MIC-ONLY\
    \ or MIC-CLEAR message (as\n   per RFC 1421) does not entail validation of recipient\
    \ certificates\n   and thus it may not be possible for the originator's UA to\
    \ determine\n   the minimum certificate set as above.\n   3.4.2  The Internet\
    \ Policy Registration Authority (IPRA)\n   The IPRA acts as the root of the certification\
    \ hierarchy for the\n   Internet community.  The public component of the IPRA\
    \ forms the\n   foundation for all certificate validation within this hierarchy.\
    \  The\n   IPRA will be operated under the auspices of the Internet Society, an\n\
    \   international, non-profit organization.  The IPRA certifies all PCAs,\n  \
    \ ensuring that they agree to abide by the Internet-wide policy\n   established\
    \ by the IPRA.  This policy, and the services provided by\n   the IPRA, are detailed\
    \ below.\n   3.4.2.1  PCA Registration\n   The IPRA certifies only PCAs, not CAs\
    \ or users.  Each PCA must file\n   with the IPRA a description of its proposed\
    \ policy.  This document\n   will be published as an informational RFC.  A copy\
    \ of the document,\n   signed by the IPRA (in the form of a PEM MIC-ONLY message)\
    \ will be\n   made available via electronic mail access by the IPRA.  This\n \
    \  convention is adopted so that every Internet user has a reference\n   point\
    \ for determining the policies associated with the issuance of\n   any certificate\
    \ which he may encounter.  The existence of a digitally\n   signed copy of the\
    \ document ensures the immutability of the document.\n   Authorization of a PCA\
    \ to operate in the Internet hierarchy is\n   signified by the publication of\
    \ the policy document, and the issuance\n   of a certificate to the PCA, signed\
    \ by the IPRA.  An outline for PCA\n   policy statements is contained in Section\
    \ 3.4.3 of this document.\n   As part of registration, each PCA will be required\
    \ to execute a legal\n   agreement with the IPRA, and to pay a fee to defray the\
    \ costs of\n   operating the IPRA.  Each a PCA must specify its distinguished\
    \ name.\n   The IPRA will take reasonable precautions to ensure that the\n   distinguished\
    \ name claimed by a PCA is legitimate, e.g., requiring\n   the PCA to provide\
    \ documentation supporting its claim to a DN.\n   However, the certification of\
    \ a PCA by the IPRA does not constitute a\n   endorsement of the PCA's claim to\
    \ this DN outside of the context of\n   this certification system.\n   3.4.2.2\
    \  Ensuring the Uniqueness of Distinguished Names\n   A fundamental requirement\
    \ of this certification scheme is that\n   certificates are not issued to distinct\
    \ entities under the same\n   distinguished name.  This requirement is important\
    \ to the success of\n   distributed management for the certification hierarchy.\
    \  The IPRA\n   will not certify two PCAs with the same distinguished name and\
    \ no PCA\n   may certify two CAs with the same DN.  However, since PCAs are\n\
    \   expected to certify organizational CAs in widely disjoint portions of\n  \
    \ the directory namespace, and since X.500 directories are not\n   ubiquitous,\
    \ a facility is required for coordination among PCAs to\n   ensure the uniqueness\
    \ of CA DNs.  (This architecture allows multiple\n   PCAs to certify residential\
    \ CAs and thus multiple, distinct\n   residential CAs with identical DNs may come\
    \ into existence, at least\n   until such time as civil authorities assume responsibilities\
    \ for such\n   certification.  Thus, on an interim basis, the architecture\n \
    \  explicitly accommodates the potential for duplicate residential CA\n   DNs.)\n\
    \   In support of the uniqueness requirement, the IPRA will establish and\n  \
    \ maintain a database to detect potential, unintended duplicate\n   certification\
    \ of CA distinguished names.  This database will be made\n   accessible to all\
    \ PCAs via an email interface.  Each entry in this\n   database will consist of\
    \ a 4-tuple.  The first element in each entry\n   is a hash value, computed on\
    \ a canonical, ASN.1 encoded\n   representation of a CA distinguished name.  The\
    \ second element\n   contains the subjectPublicKey that appears in the CA's certificate.\n\
    \   The third element is the distinguished name of the PCA which\n   registered\
    \ the entry.  The fourth element consists of the date and\n   time at which the\
    \ entry was made, as established by the IPRA.  This\n   database structure provides\
    \ a degree of privacy for CAs registered by\n   PCAs, while providing a facility\
    \ for ensuring global uniqueness of CA\n   DNs certified in this scheme.\n   In\
    \ order to avoid conflicts, a PCA should query the database using a\n   CA DN\
    \ hash value as a search key, prior to certifying a CA.  The\n   database will\
    \ return any entries which match the query, i.e., which\n   have the same CA DN.\
    \  The PCA can use the information contained in\n   any returned entries to determine\
    \ if any PCAs should be contacted to\n   resolve possible DN conflicts.  If no\
    \ potential conflicts appear, a\n   PCA can then submit a candidate entry, consisting\
    \ of the first three\n   element values, plus any entries returned by the query.\
    \  The database\n   will register this entry, supplying the time and date stamp,\
    \ only if\n   two conditions are met: (1) the first two elements (the CA DN hash\n\
    \   and the CA subjectPublicKey) of the candidate entry together must be\n   unique\
    \ and, (2) any other entries included in the submission must\n   match what the\
    \ current database would return if the query\n   corresponding to the candidate\
    \ entry were submitted.\n   If the database detects a conflicting entry (failure\
    \ of case 1\n   above), or if the submission indicates that the PCA's perception\
    \ of\n   possible conflicting entries is not current (failure of case 2), the\n\
    \   submission is rejected and the database will return the potential\n   conflicting\
    \ entry (entries).  If the submission is successful, the\n   database will return\
    \ the timestamped new entry.  The database does\n   not, in itself, guarantee\
    \ uniqueness of CA DNs as it allows for two\n   DNs associated with different\
    \ public components to be registered.\n   Rather, it is the responsibility of\
    \ PCAs to coordinate with one\n   another whenever the database indicates a potential\
    \ DN conflict and\n   to resolve such conflicts prior to certification of CAs.\
    \  Details of\n   the protocol used to access the database will be provided in\
    \ another\n   document.\n   As noted earlier, a CA may be certified under more\
    \ than one PCA,\n   e.g., because the CA wants to issue certificates under two\
    \ different\n   policies.  If a CA is certified by multiple different PCAs, the\
    \ CA\n   must employ a different public key pair for each PCA.  In such\n   circumstances\
    \ the certificate issued to the CA by each PCA will\n   contain a different subjectPublicKey\
    \ and thus will represent a\n   different entry in this database.  The same situation\
    \ may arise if\n   multiple, equivalent residential CAs are certified by different\
    \ PCAs.\n   To complete the strategy for ensuring uniqueness of DNs, there is\
    \ a\n   DN subordination requirement levied on CAs.  In general, CAs are\n   expected\
    \ to sign certificates only if the subject DN in the\n   certificate is subordinate\
    \ to the issuer (CA) DN.  This ensures that\n   certificates issued by a CA are\
    \ syntactically constrained to refer to\n   subordinate entities in the X.500\
    \ directory information tree (DIT),\n   and this further limits the possibility\
    \ of duplicate DN registration.\n   CAs may sign certificates which do not comply\
    \ with this requirement\n   if the certificates are \"cross-certificates\" or\
    \ \"reverse\n   certificates\" (see X.509) used with applications other than PEM.\n\
    \   The IPRA also will establish and maintain a separate database to\n   detect\
    \ potential duplicate certification of (residential) user\n   distinguished names.\
    \  Each entry in this database will consist of 4-\n   tuple as above, but the\
    \ first components is the hash of a residential\n   user DN and the third component\
    \ is the DN of the residential CA DN\n   which registered the user.  This structure\
    \ provides a degree of\n   privacy for users registered by CAs which service residential\
    \ users\n   while providing a facility for ensuring global uniqueness of user\
    \ DNs\n   certified under this scheme.  The same database access facilities are\n\
    \   provided as described above for the CA database.  Here it is the\n   responsibility\
    \ of the CAs to coordinate whenever the database\n   indicates a potential conflict\
    \ and to resolve the conflict prior to\n   (residential) user certification.\n\
    \   3.4.2.3  Accuracy of Distinguished Names\n   As noted above, the IPRA will\
    \ make a reasonable effort to ensure that\n   PCA DNs are accurate.  The procedures\
    \ employed to ensure the accuracy\n   of a CA distinguished name, i.e., the confidence\
    \ attached to the\n   DN/public component binding implied by a certificate, will\
    \ vary\n   according to PCA policy.  However, it is expected that every PCA will\n\
    \   make a good faith effort to ensure the legitimacy of each CA DN\n   certified\
    \ by the PCA.  Part of this effort should include a check\n   that the purported\
    \ CA DN is consistent with any applicable national\n   standards for DN assignment,\
    \ e.g., NADF recommendations within North\n   America [5,9].\n   3.4.2.4  Distinguished\
    \ Name Conventions\n   A few basic DN conventions are included in the IPRA policy.\
    \  The IPRA\n   will certify PCAs, but not CAs nor users.  PCAs will certify CAs,\
    \ but\n   not users.  These conventions are required to allow simple\n   certificate\
    \ validation within PEM, as described later.  Certificates\n   issued by CAs (for\
    \ use with PEM) will be for users or for other CAs,\n   either of which must have\
    \ DNs subordinate to that of the issuing CA.\n   The attributes employed in constructing\
    \ DNs will be specified in a\n   list maintained by the IANA, to provide a coordinated\
    \ basis for\n   attribute identification for all applications employing DNs. \
    \ This\n   list will initially be populated with attributes taken from X.520.\n\
    \   This document does not impose detailed restrictions on the attributes\n  \
    \ used to identify different entities to which certificates are issued,\n   but\
    \ PCAs may impose such restrictions as part of their policies.\n   PCAs, CAs and\
    \ users are urged to employ only those DN attributes\n   which have printable\
    \ representations, to facilitate display and\n   entry.\n   3.4.2.5  CRL Management\n\
    \   Among the procedures articulated by each PCA in its policy statement\n   are\
    \ procedures for the maintenance and distribution of CRLs by the\n   PCA itself\
    \ and by its subordinate CAs.  The frequency of issue of\n   CRLs may vary according\
    \ to PCA-specific policy, but every PCA and CA\n   must issue a CRL upon inception\
    \ to provide a basis for uniform\n   certificate validation procedures throughout\
    \ the Internet hierarchy.\n   The IPRA will maintain a CRL for all the PCAs it\
    \ certifies and this\n   CRL will be updated monthly.  Each PCA will maintain\
    \ a CRL for all of\n   the CAs which it certifies and these CRLs will be updated\
    \ in\n   accordance with each PCA's policy.   The format for these CRLs is\n \
    \  that specified in Section 3.5.2 of the document.\n   In the absence of ubiquitous\
    \ X.500 directory services, the IPRA will\n   require each PCA to provide, for\
    \ its users, robust database access to\n   CRLs for the Internet hierarchy, i.e.,\
    \ the IPRA CRL, PCA CRLs, and\n   CRLs from all CAs.  The means by which this\
    \ database is implemented\n   is to be coordinated between the IPRA and PCAs.\
    \  This database will\n   be accessible via email as specified in RFC 1424, both\
    \ for retrieval\n   of (current) CRLs by any user, and for submission of new CRLs\
    \ by CAs,\n   PCAs and the IPRA.  Individual PCAs also may elect to maintain CRL\n\
    \   archives for their CAs, but this is not required by this policy.\n   3.4.2.6\
    \  Public Key Algorithm Licensing Issues\n   This certification hierarchy is architecturally\
    \ independent of any\n   specific digital signature (public key) algorithm.  Some\
    \ algorithms,\n   employed for signing certificates and validating certificate\n\
    \   signatures, are patented in some countries.  The IPRA will not grant\n   a\
    \ license to any PCA for the use of any signature algorithm in\n   conjunction\
    \ with the management of this certification hierarchy.  The\n   IPRA will acquire,\
    \ for itself, any licenses needed for it to sign\n   certificates and CRLs for\
    \ PCAs, for all algorithms which the IPRA\n   supports.  Every PCA will be required\
    \ to represent to the IPRA that\n   the PCA has obtained any licenses required\
    \ to issue (sign)\n   certificates and CRLs in the environment(s) which the PCA\
    \ will serve.\n   For example, the RSA cryptosystem is patented in the United\
    \ States\n   and thus any PCA operating in the U.S. and using RSA to sign\n  \
    \ certificates and CRLs must represent that it has a valid license to\n   employ\
    \ the RSA algorithm in this fashion.  In contrast, a PCA\n   employing RSA and\
    \ operating outside of the U.S. would represent that\n   it is exempt from these\
    \ licensing constraints.\n   3.4.3  Policy Certification Authorities\n   The policy\
    \ statement submitted by a prospective PCA must address the\n   topics in the\
    \ following outline.  Additional policy information may\n   be contained in the\
    \ statement, but PCAs are requested not to use\n   these statements as advertising\
    \ vehicles.\n   1. PCA Identity-  The DN of the PCA must be specified.  A postal\n\
    \   address, an Internet mail address, and telephone (and optional fax)\n   numbers\
    \ must be provided for (human) contact with the PCA.  The date\n   on which this\
    \ statement is effective, and its scheduled duration must\n   be specified.\n\
    \   2. PCA Scope- Each PCA must describe the community which the PCA\n   plans\
    \ to serve.  A PCA should indicate if it will certify\n   organizational, residential,\
    \ and/or PERSONA CAs.   There is not a\n   requirement that a single PCA serve\
    \ only one type of CA, but if a PCA\n   serves multiple types of CAs, the policy\
    \ statement must specify\n   clearly how a user can distinguish among these classes.\
    \  If the PCA\n   will operate CAs to directly serve residential or PERSONA users,\
    \ it\n   must so state.\n   3. PCA Security & Privacy- Each PCA must specify the\
    \ technical and\n   procedural security measures it will employ in the generation\
    \ and\n   protection of its component pair.  If any security requirements are\n\
    \   imposed on CAs certified by the PCA these must be specified as well.\n   A\
    \ PCA also must specify what measures it will take to protect the\n   privacy\
    \ of any information collected in the course of certifying CAs.\n   If the PCA\
    \ operates one or more CAs directly, to serve residential or\n   PERSONA users,\
    \ then this statement on privacy measures applies to\n   these CAs as well.\n\
    \   4. Certification Policy-  Each PCA must specify the policy and\n   procedures\
    \ which govern its certification of CAs and how this policy\n   applies transitively\
    \ to entities (users or subordinate CAs) certified\n   by these CAs.  For example,\
    \ a PCA must state what procedure is\n   employed to verify the claimed identity\
    \ of a CA, and the CA's right\n   to use a DN.  Similarly, if any requirements\
    \ are imposed on CAs to\n   validate the identity of users, these requirements\
    \ must be specified.\n   Since all PCAs are required to cooperate in the resolution\
    \ of\n   potential DN conflicts, each PCA is required to specify the procedure\n\
    \   it will employ to resolve such conflicts.  If the PCA imposes a\n   maximum\
    \ validity interval for the CA certificates it issues, and/or\n   for user (or\
    \ subordinate CA) certificates issued by the CAs it\n   certifies, then these\
    \ restrictions must be specified.\n   5. CRL Management-  Each PCA must specify\
    \ the frequency with which it\n   will issue scheduled CRLs.  It also must specify\
    \ any constraints it\n   imposes on the frequency of scheduled issue of CRLs by\
    \ the CAs it\n   certifies, and by subordinate CAs.  Both maximum and minimum\n\
    \   constraints should be specified.  Since the IPRA policy calls for\n   each\
    \ CRL issued by a CA to be forwarded to the cognizant PCA, each\n   PCA must specify\
    \ a mailbox address to which CRLs are to be\n   transmitted.  The PCA also must\
    \ specify a mailbox address for CRL\n   queries.  If the PCA offers any additional\
    \ CRL management services,\n   e.g., archiving of old CRLs, then procedures for\
    \ invoking these\n   services must be specified.  If the PCA requires CAs to provide\
    \ any\n   additional CRL management services, such services must be specified\n\
    \   here.\n   6. Naming Conventions- If the PCA imposes any conventions on DNs\
    \ used\n   by the CAs it certifies, or by entities certified by these CAs, these\n\
    \   conventions must be specified.  If any semantics are associated with\n   such\
    \ conventions, these semantics must be specified.\n   7. Business Issues- If a\
    \ legal agreement must be executed between a\n   PCA and the CAs it certifies,\
    \ reference to that agreement must be\n   noted, but the agreement itself ought\
    \ not be a part of the policy\n   statement.  Similarly, if any fees are charged\
    \ by the PCA this should\n   be noted, but the fee structure per se ought not\
    \ be part of this\n   policy statement.\n   8. Other- Any other topics the PCA\
    \ deems relevant to a statement of\n   its policy can be included.  However, the\
    \ PCA should be aware that a\n   policy statement is considered to be an immutable,\
    \ long lived\n   document and thus considerable care should be exercised in deciding\n\
    \   what material is to be included in the statement.\n   3.4.4  Certification\
    \ Authorities\n   In X.509 the term \"certification authority\" is defined as\
    \ \"an\n   authority trusted by one or more users to create and assign\n   certificates\"\
    .  X.509 imposes few constraints on CAs, but practical\n   implementation of a\
    \ worldwide certification system requires\n   establishment of technical and procedural\
    \ conventions by which all\n   CAs are expected to abide.  Such conventions are\
    \ established\n   throughout this document.  All CAs are required to maintain\
    \ a\n   database of the DNs which they have certified and to take measures to\n\
    \   ensure that they do not certify duplicate DNs, either for users or\n   for\
    \ subordinate CAs.\n   It is critical that the private component of a CA be afforded\
    \ a high\n   level of security, otherwise the authenticity guarantee implied by\n\
    \   certificates signed by the CA is voided.  Some PCAs may impose\n   stringent\
    \ requirements on CAs within their purview to ensure that a\n   high level of\
    \ security is afforded the certificate signing process,\n   but not all PCAs are\
    \ expected to impose such constraints.\n   3.4.4.1  Organizational CAs\n   Many\
    \ of the CAs certified by PCAs are expected to represent\n   organizations.  A\
    \ wide range of organizations are encompassed by this\n   model: commercial, governmental,\
    \ educational, non-profit,\n   professional societies, etc.  The common thread\
    \ is that the entities\n   certified by these CAs have some form of affiliation\
    \ with the\n   organization.  The object classes for organizations, organizational\n\
    \   units, organizational persons, organizational roles, etc., as defined\n  \
    \ in X.521, form the models for entities certified by such CAs.  The\n   affiliation\
    \ implied by organizational certification motivates the DN\n   subordination requirement\
    \ cited in Section 3.4.2.4.\n   As an example, an organizational user certificate\
    \ might contain a\n   subject DN of the form: C = \"US\" SP = \"Massachusetts\"\
    \ L = \"Cambridge\"\n   O = \"Bolt Beranek and Newman\" OU = \"Communications\
    \ Division\" CN =\n   \"Steve Kent\".  The issuer of this certificate might have\
    \ a DN of the\n   form: C = \"US\" SP = \"Massachusetts\" L = \"Cambridge\" O=\
    \ \"Bolt Beranek\n   and Newman\".  Note that the organizational unit attribute\
    \ is omitted\n   from the issuer DN, implying that there is no CA dedicated to\
    \ the\n   \"Communications Division\".\n   3.4.4.2  Residential CAs\n   Users\
    \ may wish to obtain certificates which do not imply any\n   organizational affiliation\
    \ but which do purport to accurately and\n   uniquely identify them.  Such users\
    \ can be registered as residential\n   persons and the DN of such a user should\
    \ be consistent with the\n   attributes of the corresponding X.521 object class.\
    \  Over time we\n   anticipate that such users will be accommodated by civil government\n\
    \   entities who will assume electronic certification responsibility at\n   geographically\
    \ designated points in the naming hierarchy.  Until\n   civil authorities are\
    \ prepared to issue certificates of this form,\n   residential user CAs will accommodate\
    \ such users.\n   Because residential CAs may be operated under the auspices of\n\
    \   multiple PCAs, there is a potential for the same residential CA DN to\n  \
    \ be assumed by several distinct entities.  This represents the one\n   exception\
    \ to the rule articulated throughout this document that no\n   two entities may\
    \ have the same DN.  This conflict is tolerated so as\n   to allow residential\
    \ CAs to be established offering different\n   policies.  Two requirements are\
    \ levied upon residential CAs as a\n   result: (1) residential CAs must employ\
    \ the residential DN conflict\n   detection database maintained by the IPRA, and\
    \ (2) residential CAs\n   must coordinate to ensure that they do not assign duplicate\n\
    \   certificate serial numbers.\n   As an example, a residential user certificate\
    \ might include a subject\n   name of the form: C = \"US\" SP = \"Massachusetts\"\
    \ L = \"Boston\" PA = \"19\n   North Square\" CN = \"Paul Revere.\"  The issuer\
    \ of that certificate\n   might have a DN of the form: C = \"US\"  SP = \"Massachusetts\"\
    \ L =\n   \"Boston\".  Note that the issuer DN is superior to the subject DN,\
    \ as\n   required by the IPRA policy described earlier.\n   3.4.4.3  PERSONA CAs\n\
    \   One or more CAs will be established to accommodate users who wish to\n   conceal\
    \ their identities while making use of PEM security features,\n   e.g., to preserve\
    \ the anonymity offered by \"arbitrary\" mailbox names\n   in the current mail\
    \ environment.  In this case the certifying\n   authority is explicitly NOT vouching\
    \ for the identity of the user.\n   All such certificates are issued under a PERSONA\
    \ CA, subordinate to a\n   PCA with a PERSONA policy, to warn users explicitly\
    \ that the subject\n   DN is NOT a validated user identity.  To minimize the possibility\
    \ of\n   syntactic confusion with certificates which do purport to specify an\n\
    \   authenticated user identity, a PERSONA certificate is issued as a\n   form\
    \ of organizational user certificate, not a residential user\n   certificate.\
    \  There are no explicit, reserved words used to identify\n   PERSONA user certificates.\n\
    \   A CA issuing PERSONA certificates must institute procedures to ensure\n  \
    \ that it does not issue the same subject DN to multiple users (a\n   constraint\
    \ required for all certificates of any type issued by any\n   CA).  There are\
    \ no requirements on an issuer of PERSONA certificates\n   to maintain any other\
    \ records that might bind the true identity of\n   the subject to his certificate.\
    \  However, a CA issuing such\n   certificates must establish procedures (not\
    \ specified in this\n   document) in order to allow the holder of a PERSONA certificate\
    \ to\n   request that his certificate be revoked (i.e., listed on a CRL).\n  \
    \ As an example, a PERSONA user certificate might include a subject DN\n   of\
    \ the form:  C = \"US\" SP = \"Massachusetts\" L = \"Boston\" O =\n   \"Pseudonyms\
    \ R US\" CN = \"Paul Revere.\"  The issuer of this certificate\n   might have\
    \ a DN of the form: C = \"US\"  SP = \"Massachusetts\" L =\n   \"Boston\" O =\
    \ \"Pseudonyms R US\".  Note the differences between this\n   PERSONA user certificate\
    \ for \"Paul Revere\" and the corresponding\n   residential user certificate for\
    \ the same common name.\n   3.4.4.4  CA Responsibilities for CRL Management\n\
    \   As X.500 directory servers become available, CRLs should be\n   maintained\
    \ and accessed via these servers.  However, prior to\n   widespread deployment\
    \ of X.500 directories, this document adopts some\n   additional requirements\
    \ for CRL management by CAs and PCAs.  As per\n   X.509, each CA is required to\
    \ maintain a CRL (in the format specified\n   by this document in Appendix A)\
    \ which contains entries for all\n   certificates issued and later revoked by\
    \ the CA.  Once a certificate\n   is entered on a CRL it remains there until the\
    \ validity interval\n   expires.  Each PCA is required to maintain a CRL for revoked\
    \ CA\n   certificates within its domain.  The interval at which a CA issues a\n\
    \   CRL is not fixed by this document, but the PCAs may establish minimum\n  \
    \ and maximum intervals for such issuance.\n   As noted earlier, each PCA will\
    \ provide access to a database\n   containing CRLs issued by the IPRA, PCAs, and\
    \ all CAs.  In support of\n   this requirement, each CA must supply its current\
    \ CRL to its PCA in a\n   fashion consistent with CRL issuance rules imposed by\
    \ the PCA and\n   with the next scheduled issue date specified by the CA (see\
    \ Section\n   3.5.1).  CAs may distribute CRLs to subordinate UAs using the CRL\n\
    \   processing type available in PEM messages (see RFC 1421).  CAs also\n   may\
    \ provide access to CRLs via the database mechanism described in\n   RFC 1424\
    \ and alluded to immediately above.\n   3.5  Certificate Revocation\n   3.5.1\
    \  X.509 CRLs\n   X.509 states that it is a CA's responsibility to maintain: \"\
    a time-\n   stamped list of the certificates it issued which have been revoked.\"\
    \n   There are two primary reasons for a CA to revoke a certificate, i.e.,\n \
    \  suspected compromise of a private component (invalidating the\n   corresponding\
    \ public component) or change of user affiliation\n   (invalidating the DN). \
    \ The use of Certificate Revocation Lists\n   (CRLs) as defined in X.509 is one\
    \ means of propagating information\n   relative to certificate revocation, though\
    \ it is not a perfect\n   mechanism.  In particular, an X.509 CRL indicates only\
    \ the age of the\n   information contained in it; it does not provide any basis\
    \ for\n   determining if the list is the most current CRL available from a\n \
    \  given CA.\n   The proposed architecture establishes a format for a CRL in which\
    \ not\n   only the date of issue, but also the next scheduled date of issue is\n\
    \   specified.  Adopting this convention, when the next scheduled issue\n   date\
    \ arrives a CA (Throughout this section, when the term \"CA\" is\n   employed,\
    \ it should be interpreted broadly, to include the IPRA and\n   PCAs as well as\
    \ organizational, residential, and PERSONA CAs.) will\n   issue a new CRL, even\
    \ if there are no changes in the list of entries.\n   In this fashion each CA\
    \ can independently establish and advertise the\n   frequency with which CRLs\
    \ are issued by that CA.  Note that this does\n   not preclude CRL issuance on\
    \ a more frequent basis, e.g., in case of\n   some emergency, but no system-wide\
    \ mechanisms are architected for\n   alerting users that such an unscheduled issuance\
    \ has taken place.\n   This scheduled CRL issuance convention allows users (UAs)\
    \ to\n   determine whether a given CRL is \"out of date,\" a facility not\n  \
    \ available from the (1988) X.509 CRL format.\n   The description of CRL management\
    \ in the text and the format for CRLs\n   specified in X.509 (1988) are inconsistent.\
    \  For example, the latter\n   associates an issuer distinguished name with each\
    \ revoked certificate\n   even though the text states that a CRL contains entries\
    \ for only a\n   single issuer (which is separately specified in the CRL format).\
    \  The\n   CRL format adopted for PEM is a (simplified) format consistent with\n\
    \   the text of X.509, but not identical to the accompanying format. The\n   ASN.1\
    \ format for CRLs used with PEM is provided in Appendix A.\n   X.509 also defines\
    \ a syntax for the \"time-stamped list of revoked\n   certificates representing\
    \ other CAs.\"  This syntax, the\n   \"AuthorityRevocationList\" (ARL) allows\
    \ the list to include references\n   to certificates issued by CAs other than\
    \ the list maintainer.  There\n   is no syntactic difference between these two\
    \ lists except as they are\n   stored in directories.  Since PEM is expected to\
    \ be used prior to\n   widespread directory deployment, this distinction between\
    \ ARLs and\n   CRLs is not syntactically significant.  As a simplification, this\n\
    \   document specifies the use the CRL format defined below for\n   revocation\
    \ both of user and of CA certificates.\n   3.5.2  PEM CRL Format\n   Appendix\
    \ A contains the ASN.1 description of CRLs specified by this\n   document.  This\
    \ section provides an informal description of CRL\n   components analogous to\
    \ that provided for certificates in Section\n   3.3.\n       1. signature (signature\
    \ algorithm ID and parameters)\n       2. issuer\n       3. last update\n    \
    \   4. next update\n       5. revoked certificates\n   The \"signature\" is a\
    \ data item completely analogous to the signature\n   data item in a certificate.\
    \ Similarly, the \"issuer\" is the DN of the\n   CA which signed the CRL.  The\
    \ \"last update\" and \"next update\" fields\n   contain time and date values\
    \ (UTCT format) which specify,\n   respectively, when this CRL was issued and\
    \ when the next CRL is\n   scheduled to be issued.  Finally, \"revoked certificates\"\
    \ is a\n   sequence of ordered pairs, in which the first element is the serial\n\
    \   number of the revoked certificate and the second element is the time\n   and\
    \ date of the revocation for that certificate.\n   The semantics for this second\
    \ element are not made clear in X.509.\n   For example, the time and date specified\
    \ might indicate when a\n   private component was thought to have been compromised\
    \ or it may\n   reflect when the report of such compromise was reported to the\
    \ CA.\n   For uniformity, this document adopts the latter convention, i.e., the\n\
    \   revocation date specifies the time and date at which a CA formally\n   acknowledges\
    \ a report of a compromise or a change or DN attributes.\n   As with certificates,\
    \ it is recommended that the UTCT values be of no\n   finer granularity than minutes\
    \ and that all values be stated in terms\n   of Zulu.\n   3.6  Certificate Validation\n\
    \   3.6.1  Validation Basics\n   Every UA must contain the public component of\
    \ the IPRA as the root\n   for its certificate validation database.  Public components\n\
    \   associated with PCAs must be identified as such, so that the\n   certificate\
    \ validation process described below can operate correctly.\n   Whenever a certificate\
    \ for a PCA is entered into a UA cache, e.g., if\n   encountered in a PEM message\
    \ encapsulated header, the certificate\n   must NOT be entered into the cache\
    \ automatically.  Rather, the user\n   must be notified and must explicitly direct\
    \ the UA to enter any PCA\n   certificate data into the cache.  This precaution\
    \ is essential\n   because introduction of a PCA certificate into the cache implies\
    \ user\n   recognition of the policy associated with the PCA.\n   Validating a\
    \ certificate begins with verifying that the signature\n   affixed to the certificate\
    \ is valid, i.e., that the hash value\n   computed on the certificate contents\
    \ matches the value that results\n   from decrypting the signature field using\
    \ the public component of the\n   issuer.  In order to perform this operation\
    \ the user must possess the\n   public component of the issuer, either via some\
    \ integrity-assured\n   channel, or by extracting it from another (validated)\
    \ certificate.\n   In order to rapidly terminate this recursive validation process,\
    \ we\n   recommend each PCA sign certificates for all CAs within its domain,\n\
    \   even CAs which are certified by other, superior CAs in the\n   certification\
    \ hierarchy.\n   The public component needed to validate certificates signed by\
    \ the\n   IPRA is made available to each user as part of the registration or\n\
    \   via the PEM installation process.  Thus a user will be able to\n   validate\
    \ any PCA certificate immediately.  CAs are certified by PCAs,\n   so validation\
    \ of a CA certificate requires processing a validation\n   path of length two.\
    \  User certificates are issued by CAs (either\n   immediately subordinate to\
    \ PCAs or subordinate to other CAs), thus\n   validation of a user certificate\
    \ may require three or more steps.\n   Local caching of validated certificates\
    \ by a UA can be used to speed\n   up this process significantly.\n   Consider\
    \ the situation in which a user receives a privacy enhanced\n   message from an\
    \ originator with whom the recipient has never\n   previously corresponded, and\
    \ assume that the message originator\n   includes a full certification path in\
    \ the PEM message header.  First\n   the recipient can use the IPRA's public component\
    \ to validate a PCA\n   certificate contained in an Issuer-Certificate field.\
    \  Using the\n   PCA's public component extracted from this certificate, the CA\n\
    \   certificate in an Issuer-Certificate field also can be validated.\n   This\
    \ process cam be repeated until the certificate for the\n   originator, from the\
    \ Originator-Certificate field, is validated.\n   Having performed this certificate\
    \ validation process, the recipient\n   can extract the originator's public component\
    \ and use it to decrypt\n   the content of the MIC-Info field.  By comparing the\
    \ decrypted\n   contents of this field against the MIC computed locally on the\n\
    \   message the user verifies the data origin authenticity and integrity\n   of\
    \ the message.  It is recommended that implementations of privacy\n   enhanced\
    \ mail cache validated public components (acquired from\n   incoming mail) to\
    \ speed up this process.  If a message arrives from\n   an originator whose public\
    \ component is held in the recipient's cache\n   (and if the cache is maintained\
    \ in a fashion that ensures timely\n   incorporation of received CRLs), the recipient\
    \ can immediately employ\n   that public component without the need for the certificate\
    \ validation\n   process described here. (For some digital signature algorithms,\
    \ the\n   processing required for certificate validation is considerably faster\n\
    \   than that involved in signing a certificate.  Use of such algorithms\n   serves\
    \ to minimize the computational burden on UAs.)\n   3.6.2  Display of Certificate\
    \ Validation Data\n   PEM provides authenticated identities for message recipients\
    \ and\n   originators expressed in the form of distinguished names.  Mail\n  \
    \ systems in which PEM is employed may employ identifiers other than\n   DNs as\
    \ the primary means of identifying recipients or originators.\n   Thus, in order\
    \ to benefit from these authentication facilities, each\n   PEM implementation\
    \ must employ some means of binding native mail\n   system identifiers to distinguished\
    \ names in a fashion which does not\n   undermine this basic PEM functionality.\n\
    \   For example, if a human user interacts directly with PEM, then the\n   full\
    \ DN of the originator of any message received using PEM should be\n   displayed\
    \ for the user.  Merely displaying the PEM-protected message\n   content, containing\
    \ an originator name from the native mail system,\n   does not provide equivalent\
    \ security functionality and could allow\n   spoofing.  If the recipient of a\
    \ message is a forwarding agent such\n   as a list exploder or mail relay, display\
    \ of the originator's DN is\n   not a relevant requirement.  In all cases the\
    \ essential requirement\n   is that the ultimate recipient of a PEM message be\
    \ able to ascertain\n   the identity of the originator based on the PEM certification\
    \ system,\n   not on unauthenticated identification information, e.g., extracted\n\
    \   from the native message system.\n   Conversely, for the originator of an ENCRYPTED\
    \ message, it is\n   important that recipient identities be linked to the DNs\
    \ as expressed\n   in PEM certificates.  This can be effected in a variety of\
    \ ways by\n   the PEM implementation, e.g., by display of recipient DNs upon\n\
    \   message submission or by a tightly controlled binding between local\n   aliases\
    \ and the DNs.  Here too, if the originator is a forwarding\n   process this linkage\
    \ might be effected via various mechanisms not\n   applicable to direct human\
    \ interaction.  Again, the essential\n   requirement is to avoid procedures which\
    \ might undermine the\n   authentication services provided by PEM.\n   As described\
    \ above, it is a local matter how and what certification\n   information is displayed\
    \ for a human user in the course of submission\n   or delivery of a PEM message.\
    \  Nonetheless all PEM implementations\n   must provide a user with the ability\
    \ to display a full certification\n   path for any certificate employed in PEM\
    \ upon demand.  Implementors\n   are urged to not overwhelm the user with certification\
    \ path\n   information which might confuse him or distract him from the critical\n\
    \   information cited above.\n   3.6.3  Validation Procedure Details\n   Every\
    \ PEM implementation is required to perform the following\n   validation steps\
    \ for every public component employed in the\n   submission of an ENCRYPTED PEM\
    \ message or the delivery of an\n   ENCRYPTED, MIC-ONLY, or MIC-CLEAR PEM message.\
    \  Each public component\n   may be acquired from an internal source, e.g., from\
    \ a (secure) cache\n   at the originator/recipient or it may be obtained from\
    \ an external\n   source, e.g., the PEM header of an incoming message or a directory.\n\
    \   The following procedures applies to the validation of certificates\n   from\
    \ either type of source.\n   Validation of a public component involves constructing\
    \ a\n   certification path between the component and the public component of\n\
    \   the IPRA.  The validity interval for every certificate in this path\n   must\
    \ be checked.  PEM software must, at a minimum, warn the user if\n   any certificate\
    \ in the path fails the validity interval check, though\n   the form of this warning\
    \ is a local matter.  For example, the warning\n   might indicate which certificate\
    \ in the path had expired.  Local\n   security policy may prohibit use of expired\
    \ certificates.\n   Each certificate also must be checked against the current\
    \ CRL from\n   the certificate's issuer to ensure that revoked certificates are\
    \ not\n   employed.  If the UA does not have access to the current CRL for any\n\
    \   certificate in the path, the user must be warned.  Again, the form of\n  \
    \ the warning is a local matter.  For example, the warning might\n   indicate\
    \ whether the CRL is unavailable or, if available but not\n   current, the CRL\
    \ issue date should be displayed. Local policy may\n   prohibit use of a public\
    \ component which cannot be checked against a\n   current CRL, and in such cases\
    \ the user should receive the same\n   information provided by the warning indications\
    \ described above.\n   If any revoked certificates are encountered in the construction\
    \ of a\n   certification path, the user must be warned.  The form of the warning\n\
    \   is a local matter, but it is recommended that this warning be more\n   stringent\
    \ than those previously alluded to above.  For example, this\n   warning might\
    \ display the issuer and subject DNs from the revoked\n   certificate and the\
    \ date of revocation, and then require the user to\n   provide a positive response\
    \ before the submission or delivery process\n   may proceed.  In the case of message\
    \ submission, the warning might\n   display the identity of the recipient affected\
    \ by this validation\n   failure and the user might be provided with the option\
    \ to specify\n   that this recipient be dropped from recipient list processing\
    \ without\n   affecting PEM processing for the remaining recipients.  Local policy\n\
    \   may prohibit PEM processing if a revoked certificate is encountered\n   in\
    \ the course of constructing a certification path.\n   Note that in order to comply\
    \ with these validation procedures, a\n   certificate cache must maintain all\
    \ of the information contained in a\n   certificate, not just the DNs and the\
    \ public component.  For example\n   the serial number and validity interval must\
    \ be associated with the\n   cache entry to comply with the checks described above.\
    \  Also note\n   that these procedures apply to human interaction in message\n\
    \   submission and delivery and are not directly applicable to forwarding\n  \
    \ processes.  When non human interaction is involved, a compliant PEM\n   implementation\
    \ must provide parameters to enable a process to specify\n   whether certificate\
    \ validation will succeed or fail if any of the\n   conditions arise which would\
    \ result in warnings to a human user.\n   Finally, in the course of validating\
    \ certificates as described above,\n   one additional check must be performed:\
    \ the subject DN of every\n   certificate must be subordinate to the certificate\
    \ issuer DN, except\n   if the issuer is the IPRA or a PCA (hence another reason\
    \ to\n   distinguish the IPRA and PCA entries in a certificate cache).  This\n\
    \   requirement is levied upon all PEM implementations as part of\n   maintaining\
    \ the certification hierarchy constraints defined in this\n   document.  Any certificate\
    \ which does not comply with these\n   requirements is considered invalid and\
    \ must be rejected in PEM\n   submission or delivery processing.  The user  must\
    \ be notified of the\n   nature of this fatal error.\n"
- title: 'A.  Appendix A: ASN.1 Syntax for Certificates and CRLs'
  contents:
  - 'A.  Appendix A: ASN.1 Syntax for Certificates and CRLs

    '
- title: A.1  Certificate Syntax
  contents:
  - "A.1  Certificate Syntax\n   The X.509 certificate format is defined by the following\
    \ ASN.1\n   syntax:\n   Certificate ::= SIGNED SEQUENCE{\n           version [0]\
    \     Version DEFAULT v1988,\n           serialNumber    CertificateSerialNumber,\n\
    \           signature       AlgorithmIdentifier,\n           issuer          Name,\n\
    \           validity        Validity,\n           subject         Name,\n    \
    \       subjectPublicKeyInfo    SubjectPublicKeyInfo}\n   Version ::=     INTEGER\
    \ {v1988(0)}\n   CertificateSerialNumber ::=     INTEGER\n   Validity ::=    SEQUENCE{\n\
    \           notBefore       UTCTime,\n           notAfter        UTCTime}\n  \
    \ SubjectPublicKeyInfo ::=        SEQUENCE{\n           algorithm            \
    \   AlgorithmIdentifier,\n           subjectPublicKey        BIT STRING}\n   AlgorithmIdentifier\
    \ ::= SEQUENCE{\n           algorithm       OBJECT IDENTIFIER,\n           parameters\
    \      ANY DEFINED BY algorithm OPTIONAL}\n   The components of this structure\
    \ are defined by ASN.1 syntax defined\n   in the X.500 Series Recommendations.\
    \  RFC 1423 provides references\n   for and the values of AlgorithmIdentifiers\
    \ used by PEM in the\n   subjectPublicKeyInfo and the signature data items.  It\
    \ also describes\n   how a signature is generated and the results represented.\
    \  Because\n   the certificate is a signed data object, the distinguished encoding\n\
    \   rules (see X.509, section 8.7) must be applied prior to signing.\n"
- title: A.2  Certificate Revocation List Syntax
  contents:
  - "A.2  Certificate Revocation List Syntax\n   The following ASN.1 syntax, derived\
    \ from X.509 and aligned with the\n   suggested format in recently submitted defect\
    \ reports, defines the\n   format of CRLs for use in the PEM environment.\n  \
    \ CertificateRevocationList ::= SIGNED SEQUENCE{\n           signature       AlgorithmIdentifier,\n\
    \           issuer          Name,\n           lastUpdate      UTCTime,\n     \
    \      nextUpdate      UTCTime,\n           revokedCertificates\n            \
    \               SEQUENCE OF CRLEntry OPTIONAL}\n   CRLEntry ::= SEQUENCE{\n  \
    \         userCertificate SerialNumber,\n           revocationDate UTCTime}\n"
- title: References
  contents:
  - "References\n   [1] CCITT Recommendation X.411 (1988), \"Message Handling Systems:\n\
    \       Message Transfer System: Abstract Service Definition and\n       Procedures\"\
    .\n   [2] CCITT Recommendation X.509 (1988), \"The Directory -\n       Authentication\
    \ Framework\".\n   [3] CCITT Recommendation X.520 (1988), \"The Directory - Selected\n\
    \       Attribute Types\".\n   [4] NIST Special Publication 500-183, \"Stable\
    \ Agreements for Open\n       Systems Interconnection Protocols,\" Version 4,\
    \ Edition 1,\n       December 1990.\n   [5] North American Directory Forum, \"\
    A Naming Scheme for c=US\", RFC\n       1255, NADF, September 1991.\n   [6] Linn,\
    \ J., \"Privacy Enhancement for Internet Electronic Mail: Part\n       I: Message\
    \ Encryption and Authentication Procedures\", RFC 1421,\n       DEC, February\
    \ 1993.\n   [7] Balenson, D., \"Privacy Enhancement for Internet Electronic Mail:\n\
    \       Part III: Algorithms, Modes, and Identifiers\", RFC 1423, TIS,\n     \
    \  February 1993.\n   [8] Balaski, B., \"Privacy Enhancement for Internet Electronic\
    \ Mail:\n       Part IV: Notary, Co-Issuer, CRL-Storing and CRL-Retrieving\n \
    \      Services\", RFC 1424, RSA Laboratories, February 1993.\n   [9] North American\
    \ Directory Forum, \"NADF Standing Documents: A Brief\n       Overview\", RFC\
    \ 1417, NADF, February 1993.\n"
- title: Patent Statement
  contents:
  - "Patent Statement\n   This version of Privacy Enhanced Mail (PEM) relies on the\
    \ use of\n   patented public key encryption technology for authentication and\n\
    \   encryption.  The Internet Standards Process as defined in RFC 1310\n   requires\
    \ a written statement from the Patent holder that a license\n   will be made available\
    \ to applicants under reasonable terms and\n   conditions prior to approving a\
    \ specification as a Proposed, Draft or\n   Internet Standard.\n   The Massachusetts\
    \ Institute of Technology and the Board of Trustees\n   of the Leland Stanford\
    \ Junior University have granted Public Key\n   Partners (PKP) exclusive sub-licensing\
    \ rights to the following\n   patents issued in the United States, and all of\
    \ their corresponding\n   foreign patents:\n      Cryptographic Apparatus and\
    \ Method\n      (\"Diffie-Hellman\")............................... No. 4,200,770\n\
    \      Public Key Cryptographic Apparatus\n      and Method (\"Hellman-Merkle\"\
    ).................... No. 4,218,582\n      Cryptographic Communications System\
    \ and\n      Method (\"RSA\")................................... No. 4,405,829\n\
    \      Exponential Cryptographic Apparatus\n      and Method (\"Hellman-Pohlig\"\
    ).................... No. 4,424,414\n   These patents are stated by PKP to cover\
    \ all known methods of\n   practicing the art of Public Key encryption, including\
    \ the variations\n   collectively known as El Gamal.\n   Public Key Partners has\
    \ provided written assurance to the Internet\n   Society that parties will be\
    \ able to obtain, under reasonable,\n   nondiscriminatory terms, the right to\
    \ use the technology covered by\n   these patents.  This assurance is documented\
    \ in RFC 1170 titled\n   \"Public Key Standards and Licenses\".  A copy of the\
    \ written assurance\n   dated April 20, 1990, may be obtained from the Internet\
    \ Assigned\n   Number Authority (IANA).\n   The Internet Society, Internet Architecture\
    \ Board, Internet\n   Engineering Steering Group and the Corporation for National\
    \ Research\n   Initiatives take no position on the validity or scope of the patents\n\
    \   and patent applications, nor on the appropriateness of the terms of\n   the\
    \ assurance.  The Internet Society and other groups mentioned above\n   have not\
    \ made any determination as to any other intellectual property\n   rights which\
    \ may apply to the practice of this standard. Any further\n   consideration of\
    \ these matters is the user's own responsibility.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   This entire document is about security.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Steve Kent\n   BBN Communications\n   50 Moulton Street\n\
    \   Cambridge, MA 02138\n   Phone: (617) 873-3988\n   EMail: kent@BBN.COM\n"
