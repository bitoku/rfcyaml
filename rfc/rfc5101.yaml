- title: __initial_text__
  contents:
  - "   Specification of the IP Flow Information Export (IPFIX) Protocol\n       \
    \     for the Exchange of IP Traffic Flow Information\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the IP Flow Information Export (IPFIX)\n\
    \   protocol that serves for transmitting IP Traffic Flow information\n   over\
    \ the network.  In order to transmit IP Traffic Flow information\n   from an Exporting\
    \ Process to an information Collecting Process, a\n   common representation of\
    \ flow data and a standard means of\n   communicating them is required.  This\
    \ document describes how the\n   IPFIX Data and Template Records are carried over\
    \ a number of\n   transport protocols from an IPFIX Exporting Process to an IPFIX\n\
    \   Collecting Process.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      4.2. The Metering Process Reliability Statistics Option\n\
    \           Template ..................................................24\n  \
    \    4.3. The Exporting Process Reliability Statistics\n           Option Template\
    \ ...........................................25\n      4.4. The Flow Keys Option\
    \ Template .............................26\n   5. IPFIX Message Header \"Export\
    \ Time\" and Flow Record Time ........27\n   6. Linkage with the Information Model\
    \ .............................28\n      6.1. Encoding of IPFIX Data Types ..............................28\n\
    \           6.1.1. Integral Data Types ................................28\n  \
    \         6.1.2. Address Types ......................................28\n    \
    \       6.1.3. float32 ............................................28\n      \
    \     6.1.4. float64 ............................................28\n        \
    \   6.1.5. boolean ............................................28\n          \
    \ 6.1.6. string and octetarray ..............................28\n           6.1.7.\
    \ dateTimeSeconds ....................................29\n           6.1.8. dateTimeMilliseconds\
    \ ...............................29\n           6.1.9. dateTimeMicroseconds ...............................29\n\
    \           6.1.10.dateTimeNanoseconds.................................29\n  \
    \    6.2. Reduced Size Encoding of Integer and Float Types ..........29\n   7.\
    \ Variable-Length Information Element ............................30\n   8. Template\
    \ Management ............................................31\n   9. The Collecting\
    \ Process's Side ..................................34\n   10. Transport Protocol\
    \ ............................................36\n      10.1. Transport Compliance\
    \ and Transport Usage .................36\n      10.2. SCTP .....................................................37\n\
    \           10.2.1. Congestion Avoidance ..............................37\n  \
    \         10.2.2. Reliability .......................................37\n    \
    \       10.2.3. MTU ...............................................37\n      \
    \     10.2.4. Exporting Process .................................38\n        \
    \          10.2.4.1. Association Establishment ................38\n          \
    \        10.2.4.2. Association Shutdown .....................38\n            \
    \      10.2.4.3. Stream ...................................38\n              \
    \    10.2.4.4. Template Management ......................39\n           10.2.5.\
    \ Collecting Process ................................39\n           10.2.6. Failover\
    \ ..........................................39\n      10.3. UDP ......................................................39\n\
    \           10.3.1. Congestion Avoidance ..............................39\n  \
    \         10.3.2. Reliability .......................................40\n    \
    \       10.3.3. MTU ...............................................40\n      \
    \     10.3.4. Port Numbers ......................................40\n        \
    \   10.3.5. Exporting Process .................................40\n          \
    \ 10.3.6. Template Management ...............................40\n           10.3.7.\
    \ Collecting Process ................................41\n           10.3.8. Failover\
    \ ..........................................42\n      10.4. TCP ......................................................42\n\
    \           10.4.1. Connection Management .............................42\n  \
    \                10.4.1.1. Connection Establishment .................42\n    \
    \              10.4.1.2. Graceful Connection Release ..............43\n      \
    \            10.4.1.3. Restarting Interrupted Connections .......43\n        \
    \          10.4.1.4. Failover .................................43\n          \
    \ 10.4.2. Data Transmission .................................43\n            \
    \      10.4.2.1. IPFIX Message Encoding ...................43\n              \
    \    10.4.2.2. Template Management ......................44\n                \
    \  10.4.2.3. Congestion Handling and Reliability ......44\n           10.4.3.\
    \ Collecting Process ................................45\n   11. Security Considerations\
    \ .......................................46\n      11.1. Applicability of TLS\
    \ and DTLS ............................47\n      11.2. Usage ....................................................48\n\
    \      11.3. Authentication ...........................................48\n  \
    \    11.4. Protection against DoS Attacks ...........................48\n    \
    \  11.5. When DTLS or TLS Is Not an Option ........................50\n      11.6.\
    \ Logging an IPFIX Attack ..................................50\n      11.7. Securing\
    \ the Collector ...................................51\n   12. IANA Considerations\
    \ ...........................................51\n   Appendix A. IPFIX Encoding\
    \ Examples ...............................52\n      A.1. Message Header Example.....................................52\n\
    \      A.2. Template Set Examples......................................53\n  \
    \         A.2.1. Template Set Using IETF-Specified Information\n             \
    \     Elements ...........................................53\n           A.2.2.\
    \ Template Set Using Enterprise-Specific Information\n                  Elements\
    \ ...........................................53\n      A.3. Data Set Example ..........................................55\n\
    \      A.4. Options Template Set Examples .............................56\n  \
    \         A.4.1. Options Template Set Using IETF-Specified\n                 \
    \ Information Elements ...............................56\n           A.4.2. Options\
    \ Template Set Using Enterprise-Specific\n                  Information Elements\
    \ ...............................56\n           A.4.3. Options Template Set Using\
    \ an Enterprise-Specific\n                  Scope ..............................................57\n\
    \           A.4.4. Data Set Using an Enterprise-Specific Scope ........58\n  \
    \    A.5. Variable-Length Information Element Examples ..............59\n    \
    \       A.5.1. Example of Variable-Length Information Element\n              \
    \    with Length Inferior to 255 Octets .................59\n           A.5.2.\
    \ Example of Variable-Length Information Element\n                  with Length\
    \ 255 to 65535 Octets ....................59\n   References ........................................................59\n\
    \      Normative References ...........................................59\n  \
    \    Informative References .........................................60\n   Acknowledgments\
    \ ...................................................61\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A data network with IP traffic primarily consists of IP\
    \ flows passing\n   through the network elements.  It is often interesting, useful,\
    \ or\n   even required to have access to information about these flows that\n\
    \   pass through the network elements for administrative or other\n   purposes.\
    \  The IPFIX Collecting Process should be able to receive the\n   flow information\
    \ passing through multiple network elements within the\n   data network.  This\
    \ requires uniformity in the method of representing\n   the flow information and\
    \ the means of communicating the flows from\n   the network elements to the collection\
    \ point.  This document\n   specifies the protocol to achieve these aforementioned\
    \ requirements.\n   This document specifies in detail the representation of different\n\
    \   flows, the additional data required for flow interpretation, packet\n   format,\
    \ transport mechanisms used, security concerns, etc.\n"
- title: 1.1.  IPFIX Documents Overview
  contents:
  - "1.1.  IPFIX Documents Overview\n   The IPFIX protocol provides network administrators\
    \ with access to IP\n   flow information.  The architecture for the export of\
    \ measured IP\n   flow information out of an IPFIX Exporting Process to a Collecting\n\
    \   Process is defined in [IPFIX-ARCH], per the requirements defined in\n   [RFC3917].\
    \  This document specifies how IPFIX data records and\n   templates are carried\
    \ via a number of transport protocols from IPFIX\n   Exporting Processes to IPFIX\
    \ Collecting Processes.  IPFIX has a\n   formal description of IPFIX Information\
    \ Elements, their name, type\n   and additional semantic information, as specified\
    \ in [RFC5102].\n   Finally, [IPFIX-AS] describes what type of applications can\
    \ use the\n   IPFIX protocol and how they can use the information provided.  It\n\
    \   furthermore shows how the IPFIX framework relates to other\n   architectures\
    \ and frameworks.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n   The definitions of the basic terms like IP Traffic Flow,\
    \ Exporting\n   Process, Collecting Process, Observation Points, etc.  are\n \
    \  semantically identical to those found in the IPFIX requirements\n   document\
    \ [RFC3917].  Some of the terms have been expanded for more\n   clarity when defining\
    \ the protocol.  Additional terms required for\n   the protocol have also been\
    \ defined.  Definitions in this document\n   and in [IPFIX-ARCH] are equivalent,\
    \ except that definitions that are\n   only relevant to the IPFIX protocol only\
    \ appear here.\n   The terminology summary table in Section 2.1 gives a quick\
    \ overview\n   of the relationships between some of the different terms defined.\n\
    \   Observation Point\n      An Observation Point is a location in the network\
    \ where IP packets\n      can be observed.  Examples include: a line to which\
    \ a probe is\n      attached, a shared medium, such as an Ethernet-based LAN,\
    \ a single\n      port of a router, or a set of interfaces (physical or logical)\
    \ of\n      a router.\n      Note that every Observation Point is associated with\
    \ an\n      Observation Domain (defined below), and that one Observation Point\n\
    \      may be a superset of several other Observation Points.  For\n      example,\
    \ one Observation Point can be an entire line card.  That\n      would be the\
    \ superset of the individual Observation Points at the\n      line card's interfaces.\n\
    \   Observation Domain\n      An Observation Domain is the largest set of Observation\
    \ Points for\n      which Flow information can be aggregated by a Metering Process.\n\
    \      For example, a router line card may be an Observation Domain if it\n  \
    \    is composed of several interfaces, each of which is an Observation\n    \
    \  Point.  In the IPFIX Message it generates, the Observation Domain\n      includes\
    \ its Observation Domain ID, which is unique per Exporting\n      Process.  That\
    \ way, the Collecting Process can identify the\n      specific Observation Domain\
    \ from the Exporter that sends the IPFIX\n      Messages.  Every Observation Point\
    \ is associated with an\n      Observation Domain.  It is RECOMMENDED that Observation\
    \ Domain IDs\n      also be unique per IPFIX Device.\n   IP Traffic Flow or Flow\n\
    \      There are several definitions of the term 'flow' being used by the\n  \
    \    Internet community.  Within the context of IPFIX we use the\n      following\
    \ definition:\n      A Flow is defined as a set of IP packets passing an Observation\n\
    \      Point in the network during a certain time interval.  All packets\n   \
    \   belonging to a particular Flow have a set of common properties.\n      Each\
    \ property is defined as the result of applying a function to\n      the values\
    \ of:\n         1. one or more packet header fields (e.g., destination IP\n  \
    \          address), transport header fields (e.g., destination port\n       \
    \     number), or application header fields (e.g., RTP header\n            fields\
    \ [RFC3550]).\n         2. one or more characteristics of the packet itself (e.g.,\n\
    \            number of MPLS labels, etc...).\n         3. one or more of fields\
    \ derived from packet treatment (e.g.,\n            next hop IP address, the output\
    \ interface, etc...).\n      A packet is defined as belonging to a Flow if it\
    \ completely\n      satisfies all the defined properties of the Flow.\n      This\
    \ definition covers the range from a Flow containing all\n      packets observed\
    \ at a network interface to a Flow consisting of\n      just a single packet between\
    \ two applications.  It includes\n      packets selected by a sampling mechanism.\n\
    \   Flow Key\n      Each of the fields that:\n      1.  belong to the packet header\
    \ (e.g., destination IP address),\n      2.  are a property of the packet itself\
    \ (e.g., packet length),\n      3.  are derived from packet treatment (e.g., Autonomous\
    \ System\n          (AS) number),\n      and that are used to define a Flow are\
    \ termed Flow Keys.\n   Flow Record\n      A Flow Record contains information\
    \ about a specific Flow that was\n      observed at an Observation Point.  A Flow\
    \ Record contains measured\n      properties of the Flow (e.g., the total number\
    \ of bytes for all\n      the Flow's packets) and usually characteristic properties\
    \ of the\n      Flow (e.g., source IP address).\n   Metering Process\n      The\
    \ Metering Process generates Flow Records.  Inputs to the\n      process are packet\
    \ headers and characteristics observed at an\n      Observation Point, and packet\
    \ treatment at the Observation Point\n      (for example, the selected output\
    \ interface).\n      The Metering Process consists of a set of functions that\
    \ includes\n      packet header capturing, timestamping, sampling, classifying,\
    \ and\n      maintaining Flow Records.\n      The maintenance of Flow Records\
    \ may include creating new records,\n      updating existing ones, computing Flow\
    \ statistics, deriving\n      further Flow properties, detecting Flow expiration,\
    \ passing Flow\n      Records to the Exporting Process, and deleting Flow Records.\n\
    \   Exporting Process\n      The Exporting Process sends Flow Records to one or\
    \ more Collecting\n      Processes.  The Flow Records are generated by one or\
    \ more Metering\n      Processes.\n   Exporter\n      A device that hosts one\
    \ or more Exporting Processes is termed an\n      Exporter.\n   IPFIX Device\n\
    \      An IPFIX Device hosts at least one Exporting Process.  It may host\n  \
    \    further Exporting Processes and arbitrary numbers of Observation\n      Points\
    \ and Metering Processes.\n   Collecting Process\n      A Collecting Process receives\
    \ Flow Records from one or more\n      Exporting Processes.  The Collecting Process\
    \ might process or\n      store received Flow Records, but such actions are out\
    \ of scope for\n      this document.\n   Collector\n      A device that hosts\
    \ one or more Collecting Processes is termed a\n      Collector.\n   Template\n\
    \      A Template is an ordered sequence of <type, length> pairs used to\n   \
    \   completely specify the structure and semantics of a particular set\n     \
    \ of information that needs to be communicated from an IPFIX Device\n      to\
    \ a Collector.  Each Template is uniquely identifiable by means\n      of a Template\
    \ ID.\n   IPFIX Message\n      An IPFIX Message is a message originating at the\
    \ Exporting Process\n      that carries the IPFIX records of this Exporting Process\
    \ and whose\n      destination is a Collecting Process.  An IPFIX Message is\n\
    \      encapsulated at the transport layer.\n   Message Header\n      The Message\
    \ Header is the first part of an IPFIX Message, which\n      provides basic information\
    \ about the message, such as the IPFIX\n      version, length of the message,\
    \ message sequence number, etc.\n   Template Record\n      A Template Record defines\
    \ the structure and interpretation of\n      fields in a Data Record.\n   Data\
    \ Record\n      A Data Record is a record that contains values of the parameters\n\
    \      corresponding to a Template Record.\n   Options Template Record\n     \
    \ An Options Template Record is a Template Record that defines the\n      structure\
    \ and interpretation of fields in a Data Record, including\n      defining how\
    \ to scope the applicability of the Data Record.\n   Set\n      Set is a generic\
    \ term for a collection of records that have a\n      similar structure.  In an\
    \ IPFIX Message, one or more Sets follow\n      the Message Header.\n      There\
    \ are three different types of Sets: Template Set, Options\n      Template Set,\
    \ and Data Set.\n   Template Set\n      A Template Set is a collection of one\
    \ or more Template Records\n      that have been grouped together in an IPFIX\
    \ Message.\n   Options Template Set\n      An Options Template Set is a collection\
    \ of one or more Options\n      Template Records that have been grouped together\
    \ in an IPFIX\n      Message.\n   Data Set\n      A Data Set is one or more Data\
    \ Records, of the same type, that are\n      grouped together in an IPFIX Message.\
    \  Each Data Record is\n      previously defined by a Template Record or an Options\
    \ Template\n      Record.\n   Information Element\n      An Information Element\
    \ is a protocol and encoding-independent\n      description of an attribute that\
    \ may appear in an IPFIX Record.\n      The IPFIX information model [RFC5102]\
    \ defines the base set of\n      Information Elements for IPFIX.  The type associated\
    \ with an\n      Information Element indicates constraints on what it may contain\n\
    \      and also determines the valid encoding mechanisms for use in\n      IPFIX.\n\
    \   Transport Session\n      In Stream Control Transmission Protocol (SCTP), the\
    \ transport\n      session is known as the SCTP association, which is uniquely\n\
    \      identified by the SCTP endpoints [RFC4960]; in TCP, the transport\n   \
    \   session is known as the TCP connection, which is uniquely\n      identified\
    \ by the combination of IP addresses and TCP ports used.\n      In UDP, the transport\
    \ session is known as the UDP session, which\n      is uniquely identified by\
    \ the combination of IP addresses and UDP\n      ports used.\n"
- title: 2.1.  Terminology Summary Table
  contents:
  - "2.1.  Terminology Summary Table\n   +------------------+---------------------------------------------+\n\
    \   |                  |                 contents                    |\n   | \
    \                 +--------------------+------------------------+\n   |      \
    \ Set        |      Template      |         record         |\n   +------------------+--------------------+------------------------+\n\
    \   |     Data Set     |          /         |     Data Record(s)     |\n   +------------------+--------------------+------------------------+\n\
    \   |   Template Set   | Template Record(s) |           /            |\n   +------------------+--------------------+------------------------+\n\
    \   | Options Template | Options Template   |           /            |\n   | \
    \      Set        | Record(s)          |                        |\n   +------------------+--------------------+------------------------+\n\
    \   Figure A: Terminology Summary Table\n   A Data Set is composed of Data Record(s).\
    \  No Template Record is\n   included.  A Template Record or an Options Template\
    \ Record defines\n   the Data Record.\n   A Template Set contains only Template\
    \ Record(s).\n   An Options Template Set contains only Options Template Record(s).\n"
- title: 3.  IPFIX Message Format
  contents:
  - "3.  IPFIX Message Format\n   An IPFIX Message consists of a Message Header, followed\
    \ by one or\n   more Sets.  The Sets can be any of the possible three types: Data\n\
    \   Set, Template Set, or Options Template Set.\n   The format of the IPFIX Message\
    \ is shown in Figure B.\n   +----------------------------------------------------+\n\
    \   | Message Header                                     |\n   +----------------------------------------------------+\n\
    \   | Set                                                |\n   +----------------------------------------------------+\n\
    \   | Set                                                |\n   +----------------------------------------------------+\n\
    \     ...\n   +----------------------------------------------------+\n   | Set\
    \                                                |\n   +----------------------------------------------------+\n\
    \   Figure B: IPFIX Message Format\n   The Exporter MUST code all binary integers\
    \ of the Message Header and\n   the different Sets in network-byte order (also\
    \ known as the\n   big-endian byte ordering).\n   Following are some examples\
    \ of IPFIX Messages:\n   1. An IPFIX Message consisting of interleaved Template,\
    \ Data, and\n      Options Template Sets -- A newly created Template is exported\
    \ as\n      soon as possible.  So, if there is already an IPFIX Message with a\n\
    \      Data Set that is being prepared for export, the Template and\n      Option\
    \ Template Sets are interleaved with this information,\n      subject to availability\
    \ of space.\n   +--------+--------------------------------------------------------+\n\
    \   |        | +----------+ +---------+     +-----------+ +---------+ |\n   |Message\
    \ | | Template | | Data    |     | Options   | | Data    | |\n   | Header | |\
    \ Set      | | Set     | ... | Template  | | Set     | |\n   |        | |    \
    \      | |         |     | Set       | |         | |\n   |        | +----------+\
    \ +---------+     +-----------+ +---------+ |\n   +--------+--------------------------------------------------------+\n\
    \   Figure C: IPFIX Message, Example 1\n   2. An IPFIX Message consisting entirely\
    \ of Data Sets -- After the\n      appropriate Template Records have been defined\
    \ and transmitted to\n      the Collecting Process, the majority of IPFIX Messages\
    \ consist\n      solely of Data Sets.\n   +--------+----------------------------------------------+\n\
    \   |        | +---------+     +---------+      +---------+ |\n   |Message | |\
    \ Data    |     | Data    |      | Data    | |\n   | Header | | Set     | ...\
    \ | Set     | ...  | Set     | |\n   |        | +---------+     +---------+  \
    \    +---------+ |\n   +--------+----------------------------------------------+\n\
    \   Figure D: IPFIX Message, Example 2\n   3. An IPFIX Message consisting entirely\
    \ of Template and Options\n      Template Sets.\n   +--------+-------------------------------------------------+\n\
    \   |        | +----------+     +----------+      +----------+ |\n   |Message\
    \ | | Template |     | Template |      | Options  | |\n   | Header | | Set   \
    \   | ... | Set      | ...  | Template | |\n   |        | |          |     | \
    \         |      | Set      | |\n   |        | +----------+     +----------+ \
    \     +----------+ |\n   +--------+-------------------------------------------------+\n\
    \   Figure E: IPFIX Message, Example 3\n"
- title: 3.1.  Message Header Format
  contents:
  - "3.1.  Message Header Format\n   The format of the IPFIX Message Header is shown\
    \ in Figure F.\n    0                   1                   2                \
    \   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |   \
    \    Version Number          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Export Time                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Sequence Number                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Observation Domain ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Figure F: IPFIX Message Header Format\n   Message Header Field Descriptions:\n\
    \   Version\n      Version of Flow Record format exported in this message.  The\
    \ value\n      of this field is 0x000a for the current version, incrementing by\n\
    \      one the version used in the NetFlow services export version 9\n      [RFC3954].\n\
    \   Length\n      Total length of the IPFIX Message, measured in octets, including\n\
    \      Message Header and Set(s).\n   Export Time\n      Time, in seconds, since\
    \ 0000 UTC Jan 1, 1970, at which the IPFIX\n      Message Header leaves the Exporter.\n\
    \   Sequence Number\n      Incremental sequence counter modulo 2^32 of all IPFIX\
    \ Data Records\n      sent on this PR-SCTP stream from the current Observation\
    \ Domain by\n      the Exporting Process.  Check the specific meaning of this\
    \ field\n      in the subsections of Section 10 when UDP or TCP is selected as\n\
    \      the transport protocol.  This value SHOULD be used by the\n      Collecting\
    \ Process to identify whether any IPFIX Data Records have\n      been missed.\
    \  Template and Options Template Records do not\n      increase the Sequence Number.\n\
    \   Observation Domain ID\n      A 32-bit identifier of the Observation Domain\
    \ that is locally\n      unique to the Exporting Process.  The Exporting Process\
    \ uses the\n      Observation Domain ID to uniquely identify to the Collecting\n\
    \      Process the Observation Domain that metered the Flows.  It is\n      RECOMMENDED\
    \ that this identifier also be unique per IPFIX Device.\n      Collecting Processes\
    \ SHOULD use the Transport Session and the\n      Observation Domain ID field\
    \ to separate different export streams\n      originating from the same Exporting\
    \ Process.  The Observation\n      Domain ID SHOULD be 0 when no specific Observation\
    \ Domain ID is\n      relevant for the entire IPFIX Message, for example, when\
    \ exporting\n      the Exporting Process Statistics, or in case of a hierarchy\
    \ of\n      Collectors when aggregated Data Records are exported.\n"
- title: 3.2.  Field Specifier Format
  contents:
  - "3.2.  Field Specifier Format\n   Vendors need the ability to define proprietary\
    \ Information Elements,\n   because, for example, they are delivering a pre-standards\
    \ product, or\n   the Information Element is, in some way, commercially sensitive.\n\
    \   This section describes the Field Specifier format for both\n   IETF-specified\
    \ Information Elements [RFC5102] and enterprise-specific\n   Information Elements.\n\
    \   The Information Elements are identified by the Information Element\n   identifier.\
    \  When the Enterprise bit is set to 0, the corresponding\n   Information Element\
    \ identifier will report an IETF-specified\n   Information Element, and the Enterprise\
    \ Number MUST NOT be present.\n   When the Enterprise bit is set to 1, the corresponding\
    \ Information\n   Element identifier will report an enterprise-specific Information\n\
    \   Element; the Enterprise Number MUST be present.  An example of this\n   is\
    \ shown in Section A.4.2.\n   The Field Specifier format is shown in Figure G.\n\
    \   0                   1                   2                   3\n   0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |E|  Information Element ident. |        Field Length           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Enterprise Number                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Figure G: Field Specifier Format\n   Where:\n   E\n      Enterprise bit. \
    \ This is the first bit of the Field Specifier.  If\n      this bit is zero, the\
    \ Information Element Identifier identifies an\n      IETF-specified Information\
    \ Element, and the four-octet Enterprise\n      Number field MUST NOT be present.\
    \  If this bit is one, the\n      Information Element identifier identifies an\
    \ enterprise-specific\n      Information Element, and the Enterprise Number filed\
    \ MUST be\n      present.\n   Information Element identifier\n      A numeric\
    \ value that represents the type of Information Element.\n      Refer to [RFC5102].\n\
    \   Field Length\n      The length of the corresponding encoded Information Element,\
    \ in\n      octets.  Refer to [RFC5102].  The field length may be smaller than\n\
    \      the definition in [RFC5102] if the reduced size encoding is used\n    \
    \  (see Section 6.2).  The value 65535 is reserved for variable-\n      length\
    \ Information Elements (see Section 7).\n   Enterprise Number\n      IANA enterprise\
    \ number [PEN] of the authority defining the\n      Information Element identifier\
    \ in this Template Record.\n"
- title: 3.3.  Set and Set Header Format
  contents:
  - "3.3.  Set and Set Header Format\n   A Set is a generic term for a collection\
    \ of records that have a\n   similar structure.  There are three different types\
    \ of Sets: Template\n   Sets, Options Template Sets, and Data Sets.  Each of these\
    \ Sets\n   consists of a Set Header and one or more records.  The Set Format and\n\
    \   the Set Header Format are defined in the following sections.\n"
- title: 3.3.1.  Set Format
  contents:
  - "3.3.1.  Set Format\n   A Set has the format shown in Figure H.  The record types\
    \ can be\n   either Template Records, Options Template Records, or Data Records.\n\
    \   The record types MUST NOT be mixed within a Set.\n   +--------------------------------------------------+\n\
    \   | Set Header                                       |\n   +--------------------------------------------------+\n\
    \   | record                                           |\n   +--------------------------------------------------+\n\
    \   | record                                           |\n   +--------------------------------------------------+\n\
    \    ...\n   +--------------------------------------------------+\n   | record\
    \                                           |\n   +--------------------------------------------------+\n\
    \   | Padding (opt.)                                   |\n   +--------------------------------------------------+\n\
    \   Figure H: Set Format\n   The Set Field Definitions are as follows:\n   Set\
    \ Header\n      The Set Header Format is defined in Section 3.3.2.\n   Record\n\
    \      One of the record Formats: Template Record, Options Template\n      Record,\
    \ or Data Record Format.\n   Padding\n      The Exporting Process MAY insert some\
    \ padding octets, so that the\n      subsequent Set starts at an aligned boundary.\
    \  For security\n      reasons, the padding octet(s) MUST be composed of zero\
    \ (0) valued\n      octets.  The padding length MUST be shorter than any allowable\n\
    \      record in this Set.  If padding of the IPFIX Message is desired in\n  \
    \    combination with very short records, then the padding Information\n     \
    \ Element 'paddingOctets' [RFC5102] can be used for padding records\n      such\
    \ that their length is increased to a multiple of 4 or 8\n      octets.  Because\
    \ Template Sets are always 4-octet aligned by\n      definition, padding is only\
    \ needed in case of other alignments\n      e.g., on 8-octet boundaries.\n"
- title: 3.3.2.  Set Header Format
  contents:
  - "3.3.2.  Set Header Format\n   Every Set contains a common header.  This header\
    \ is defined in Figure\n   I.\n    0                   1                   2 \
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Set ID               |          Length               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Figure I: Set Header Format\n   The Set Header Field Definitions are as follows:\n\
    \   Set ID\n      Set ID value identifies the Set.  A value of 2 is reserved for\
    \ the\n      Template Set.  A value of 3 is reserved for the Option Template\n\
    \      Set.  All other values from 4 to 255 are reserved for future use.\n   \
    \   Values above 255 are used for Data Sets.  The Set ID values of 0\n      and\
    \ 1 are not used for historical reasons [RFC3954].\n   Length\n      Total length\
    \ of the Set, in octets, including the Set Header, all\n      records, and the\
    \ optional padding.  Because an individual Set MAY\n      contain multiple records,\
    \ the Length value MUST be used to\n      determine the position of the next Set.\n"
- title: 3.4.   Record Format
  contents:
  - "3.4.   Record Format\n   IPFIX defines three record formats, defined in the next\
    \ sections: the\n   Template Record Format, the Options Template Record Format,\
    \ and the\n   Data Record Format.\n"
- title: 3.4.1.  Template Record Format
  contents:
  - "3.4.1.  Template Record Format\n   One of the essential elements in the IPFIX\
    \ record format is the\n   Template Record.  Templates greatly enhance the flexibility\
    \ of the\n   record format because they allow the Collecting Process to process\n\
    \   IPFIX Messages without necessarily knowing the interpretation of all\n   Data\
    \ Records.  A Template Record contains any combination of\n   IANA-assigned and/or\
    \ enterprise-specific Information Elements\n   identifiers.\n   The format of\
    \ the Template Record is shown in Figure J.  It consists\n   of a Template Record\
    \ Header and one or more Field Specifiers.  The\n   definition of the Field Specifiers\
    \ is given in Figure G above.\n   +--------------------------------------------------+\n\
    \   | Template Record Header                           |\n   +--------------------------------------------------+\n\
    \   | Field Specifier                                  |\n   +--------------------------------------------------+\n\
    \   | Field Specifier                                  |\n   +--------------------------------------------------+\n\
    \    ...\n   +--------------------------------------------------+\n   | Field\
    \ Specifier                                  |\n   +--------------------------------------------------+\n\
    \   Figure J: Template Record Format\n   The format of the Template Record Header\
    \ is shown in Figure K.\n    0                   1                   2       \
    \            3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Template ID (> 255)      |         Field Count           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Figure K: Template Record Header Format\n   The Template Record Header Field\
    \ Definitions are as follows:\n   Template ID\n      Each of the newly generated\
    \ Template Records is given a unique\n      Template ID.  This uniqueness is local\
    \ to the Transport Session\n      and Observation Domain that generated the Template\
    \ ID.  Template\n      IDs 0-255 are reserved for Template Sets, Options Template\
    \ Sets,\n      and other reserved Sets yet to be created.  Template IDs of Data\n\
    \      Sets are numbered from 256 to 65535.  There are no constraints\n      regarding\
    \ the order of the Template ID allocation.\n   Field Count\n      Number of fields\
    \ in this Template Record.\n   The example in Figure L shows a Template Set with\
    \ mixed standard and\n   enterprise-specific Information Elements.  It consists\
    \ of a Set\n   Header, a Template Header, and several Field Specifiers.\n    0\
    \                   1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Set ID = 2           |          Length               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Template ID = 256        |         Field Count = N       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1| Information Element id. 1.1 |        Field Length 1.1       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Enterprise Number  1.1                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0| Information Element id. 1.2 |        Field Length 1.2       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             ...               |              ...              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1| Information Element id. 1.N |        Field Length 1.N       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Enterprise Number  1.N                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Template ID = 257        |         Field Count = M       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0| Information Element id. 2.1 |        Field Length 2.1       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1| Information Element id. 2.2 |        Field Length 2.2       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Enterprise Number  2.2                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             ...               |              ...              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1| Information Element id. 2.M |        Field Length 2.M       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Enterprise Number  2.M                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Padding (opt)                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Figure L: Template Set Example\n   Information Element Identifiers 1.2 and\
    \ 2.1 are defined by the IETF\n   (Enterprise bit = 0) and, therefore, do not\
    \ need an Enterprise Number\n   to identify them.\n"
- title: 3.4.2.  Options Template Record Format
  contents:
  - "3.4.2.  Options Template Record Format\n   Thanks to the notion of scope, The\
    \ Options Template Record gives the\n   Exporter the ability to provide additional\
    \ information to the\n   Collector that would not be possible with Flow Records\
    \ alone.\n   One Options Template Record example is the \"Flow Keys\", which reports\n\
    \   the Flow Keys for a Template, which is defined as the scope.  Another\n  \
    \ example is the \"Template configuration\", which reports the\n   configuration\
    \ sampling parameter(s) for the Template, which is\n   defined as the scope.\n"
- title: 3.4.2.1.  Scope
  contents:
  - "3.4.2.1.  Scope\n   The scope, which is only available in the Options Template\
    \ Set, gives\n   the context of the reported Information Elements in the Data\
    \ Records.\n   Note that the IPFIX Message Header already contains the Observation\n\
    \   Domain ID (the identifier of the Observation Domain).  If not zero,\n   this\
    \ Observation Domain ID can be considered as an implicit scope for\n   the Data\
    \ Records in the IPFIX Message.  The Observation Domain ID\n   MUST be zero when\
    \ the IPFIX Message contains Data Records with\n   different Observation Domain\
    \ ID values defined as scopes.\n   Multiple Scope Fields MAY be present in the\
    \ Options Template Record,\n   in which case, the composite scope is the combination\
    \ of the scopes.\n   For example, if the two scopes are defined as \"metering\
    \ process\" and\n   \"template\", the combined scope is this Template for this\
    \ Metering\n   Process.  The order of the Scope Fields, as defined in the Options\n\
    \   Template Record, is irrelevant in this case.  However, if the order\n   of\
    \ the Scope Fields in the Options Template Record is relevant, the\n   order of\
    \ the Scope Fields MUST be used.  For example, if the first\n   scope defines\
    \ the filtering function, while the second scope defines\n   the sampling function,\
    \ the order of the scope is important.  Applying\n   the sampling function first,\
    \ followed by the filtering function,\n   would lead to potentially different\
    \ Data Records than applying the\n   filtering function first, followed by the\
    \ sampling function.  In this\n   case, the Collector deduces the function order\
    \ by looking at the\n   order of the scope in the Options Template Record.\n \
    \  The scope is an Information Element specified in the IPFIX\n   Information\
    \ Model [RFC5102].  An IPFIX-compliant implementation of\n   the Collecting Process\
    \ SHOULD support this minimum set of Information\n   Elements as scope: LineCardId,\
    \ TemplateId, exporterIPv4Address,\n   exporterIPv6Address, and ingressInterface.\
    \  Note that other\n   Information Elements, such as meteringProcessId, exportingProcessId,\n\
    \   observationDomainId, etc. are also valid scopes.  The IPFIX protocol\n   doesn't\
    \ prevent the use of any Information Elements for scope.\n   However, some Information\
    \ Element types don't make sense if specified\n   as scope; for example, the counter\
    \ Information Elements.\n   Finally, note that the Scope Field Count MUST NOT\
    \ be zero.\n"
- title: 3.4.2.2.  Options Template Record Format
  contents:
  - "3.4.2.2.  Options Template Record Format\n   An Options Template Record contains\
    \ any combination of IANA-assigned\n   and/or enterprise-specific Information\
    \ Elements identifiers.\n   The format of the Options Template Record is shown\
    \ in Figure M.  It\n   consists of an Options Template Record Header and one or\
    \ more Field\n   Specifiers.  The definition of the Field Specifiers is given\
    \ in\n   Figure G above.\n   +--------------------------------------------------+\n\
    \   | Options Template Record Header                   |\n   +--------------------------------------------------+\n\
    \   | Field Specifier                                  |\n   +--------------------------------------------------+\n\
    \   | Field Specifier                                  |\n   +--------------------------------------------------+\n\
    \    ...\n   +--------------------------------------------------+\n   | Field\
    \ Specifier                                  |\n   +--------------------------------------------------+\n\
    \   Figure M: Options Template Record Format\n   The format of the Options Template\
    \ Record Header is shown in Figure\n   N.\n    0                  1          \
    \         2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Template ID (> 255)   |         Field Count           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Scope Field Count        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Figure N: Options Template Record Header Format\n   The Options Template Record\
    \ Header Field Definitions are as follows:\n   Template ID\n   Template ID of\
    \ this Options Template Record.  This value is greater\n   than 255.\n   Field\
    \ Count\n   Number of all fields in this Options Template Record, including the\n\
    \   Scope Fields.\n   Scope Field Count\n   Number of scope fields in this Options\
    \ Template Record.  The Scope\n   Fields are normal Fields except that they are\
    \ interpreted as scope at\n   the Collector.  The Scope Field Count MUST NOT be\
    \ zero.\n   The example in Figure O shows an Option Template Set with mixed IETF\n\
    \   and enterprise-specific Information Elements.  It consists of a Set\n   Header,\
    \ an Option Template Header, and several Field Specifiers.\n    0            \
    \       1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Set ID = 3           |          Length               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Template ID = 258     |         Field Count = N + M   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Scope Field Count = N     |0|  Scope 1 Infor. Element Id. |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Scope 1 Field Length      |0|  Scope 2 Infor. Element Id. |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Scope 2 Field Length      |             ...               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            ...                |1|  Scope N Infor. Element Id. |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Scope N Field Length      |   Scope N Enterprise Number ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ...  Scope N Enterprise Number   |1| Option 1 Infor. Element Id. |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Option 1 Field Length      |  Option 1 Enterprise Number ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ... Option 1 Enterprise Number   |              ...              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             ...               |0| Option M Infor. Element Id. |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Option M Field Length     |      Padding (optional)       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Figure O: Option Template Set Example\n"
- title: 3.4.3.  Data Record Format
  contents:
  - "3.4.3.  Data Record Format\n   The Data Records are sent in Data Sets.  The format\
    \ of the Data\n   Record is shown in Figure P.  It consists only of one or more\
    \ Field\n   Values.  The Template ID to which the Field Values belong is encoded\n\
    \   in the Set Header field \"Set ID\", i.e., \"Set ID\" = \"Template ID\".\n\
    \   +--------------------------------------------------+\n   | Field Value   \
    \                                   |\n   +--------------------------------------------------+\n\
    \   | Field Value                                      |\n   +--------------------------------------------------+\n\
    \    ...\n   +--------------------------------------------------+\n   | Field\
    \ Value                                      |\n   +--------------------------------------------------+\n\
    \   Figure P: Data Record Format\n   Note that Field Values do not necessarily\
    \ have a length of 16 bits.\n   Field Values are encoded according to their data\
    \ type specified in\n   [RFC5102].\n   Interpretation of the Data Record format\
    \ can be done only if the\n   Template Record corresponding to the Template ID\
    \ is available at the\n   Collecting Process.\n   The example in Figure Q shows\
    \ a Data Set. It consists of a Set Header\n   and several Field Values.\n    0\
    \                   1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Set ID = Template ID        |          Length               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Record 1 - Field Value 1    |   Record 1 - Field Value 2    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Record 1 - Field Value 3    |             ...               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Record 2 - Field Value 1    |   Record 2 - Field Value 2    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Record 2 - Field Value 3    |             ...               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Record 3 - Field Value 1    |   Record 3 - Field Value 2    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Record 3 - Field Value 3    |             ...               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              ...              |      Padding (optional)       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Figure Q: Data Set, Containing Data Records\n"
- title: 4.  Specific Reporting Requirements
  contents:
  - "4.  Specific Reporting Requirements\n   Some specific Options Templates and Options\
    \ Template Records are\n   necessary to provide extra information about the Flow\
    \ Records and\n   about the Metering Process.\n   The Option Template and Options\
    \ Template Records defined in these\n   subsections, which impose some constraints\
    \ on the Metering Process\n   and Exporting Process implementations, MAY be implemented.\
    \  If\n   implemented, the specific Option Templates SHOULD be implemented as\n\
    \   specified in these subsections.\n   The minimum set of Information Elements\
    \ is always specified in these\n   Specific IPFIX Options Templates.  Nevertheless,\
    \ extra Information\n   Elements may be used in these specific Options Templates.\n"
- title: 4.1.  The Metering Process Statistics Option Template
  contents:
  - "4.1.  The Metering Process Statistics Option Template\n   The Metering Process\
    \ Statistics Option Template specifies the\n   structure of a Data Record for\
    \ reporting Metering Process statistics.\n   It SHOULD contain the following Information\
    \ Elements that are defined\n   in [RFC5102]:\n   observationDomainId\n      \
    \                     An identifier of an Observation Domain that\n          \
    \                 is locally unique to the Exporting Process.\n              \
    \             This Information Element MUST be defined as a\n                \
    \           Scope Field.\n   exportedMessageTotalCount\n                     \
    \      The total number of IPFIX Messages that the\n                         \
    \  Exporting Process successfully sent to the\n                           Collecting\
    \ Process since the Exporting\n                           Process re-initialization.\n\
    \   exportedFlowTotalCount\n                           The total number of Flow\
    \ Records that the\n                           Exporting Process successfully\
    \ sent to the\n                           Collecting Process since the Exporting\n\
    \                           Process re-initialization.\n   exportedOctetTotalCount\n\
    \                           The total number of octets that the Exporting\n  \
    \                         Process successfully sent to the Collecting\n      \
    \                     Process since the Exporting Process re-\n              \
    \             initialization.\n   The Exporting Process SHOULD export the Data\
    \ Record specified by the\n   Metering Process Statistics Option Template on a\
    \ regular basis or\n   based on some export policy.  This periodicity or export\
    \ policy\n   SHOULD be configurable.\n   Note that if several Metering Processes\
    \ are available on the Exporter\n   Observation Domain, the Information Element\
    \ meteringProcessId MUST be\n   specified as an additional Scope Field.\n"
- title: 4.2.  The Metering Process Reliability Statistics Option Template
  contents:
  - "4.2.  The Metering Process Reliability Statistics Option Template\n   The Metering\
    \ Process Reliability Option Template specifies the\n   structure of a Data Record\
    \ for reporting lack of reliability in the\n   Metering Process.  It SHOULD contain\
    \ the following Information\n   Elements that are defined in [RFC5102]:\n   observationDomainId\n\
    \                           An identifier of an Observation Domain that\n    \
    \                       is locally unique to the Exporting Process.\n        \
    \                   This Information Element MUST be defined as a\n          \
    \                 Scope Field.\n   ignoredPacketTotalCount\n                 \
    \          The total number of IP packets that the\n                         \
    \  Metering Process did not process.\n   ignoredOctetTotalCount\n            \
    \               The total number of octets in observed IP\n                  \
    \         packets that the Metering Process did not\n                        \
    \   process.\n   time first ignored\n                           The timestamp\
    \ of the first IP packet that was\n                           ignored by the Metering\
    \ Process.  For this\n                           timestamp, any of the \"flowStart\"\
    \ timestamp\n                           Information Elements flowStartMilliseconds,\n\
    \                           flowStartMicroseconds, flowStartNanoseconds,\n   \
    \                        and flowStartDeltaMicroseconds can be used.\n   time\
    \ last ignored\n                           The timestamp of the last IP packet\
    \ that was\n                           ignored by the Metering Process.  For this\n\
    \                           timestamp, any of the \"flowEnd\" timestamp\n    \
    \                       Information Elements flowEndMilliseconds,\n          \
    \                 flowEndMicroseconds, flowEndNanoseconds, and\n             \
    \              flowEndDeltaMicroseconds can be used.\n   The Exporting Process\
    \ SHOULD export the Data Record specified by the\n   Metering Process Reliability\
    \ Statistics Option Template on a regular\n   basis or based on some export policy.\
    \  This periodicity or export\n   policy SHOULD be configurable.\n   Note that\
    \ if several Metering Processes are available on the Exporter\n   Observation\
    \ Domain, the Information Element meteringProcessId MUST be\n   specified as an\
    \ additional Scope Field.\n"
- title: 4.3.  The Exporting Process Reliability Statistics Option Template
  contents:
  - "4.3.  The Exporting Process Reliability Statistics Option Template\n   The Exporting\
    \ Process Reliability Option Template specifies the\n   structure of a Data Record\
    \ for reporting lack of reliability in the\n   Exporting process.  It SHOULD contain\
    \ the following Information\n   Elements that are defined in [RFC5102]:\n   Exporting\
    \ Process ID\n                        The identifier of the Exporting Process\
    \ for\n                        which lack of reliability is reported.  There\n\
    \                        are three Information Elements specified in\n       \
    \                 [RFC5102] that can be used for this purpose:\n             \
    \           exporterIPv4Address, exporterIPv6Address, or\n                   \
    \     exportingProcessId.  This Information Element\n                        MUST\
    \ be defined as a Scope Field.\n   notSentFlowTotalCount\n                   \
    \     The total number of Flows that were generated by\n                     \
    \   the Metering Process and dropped by the Metering\n                       \
    \ Process or by the Exporting Process instead of\n                        being\
    \ sent to the Collecting Process.\n   notSentPacketTotalCount\n              \
    \          The total number of packets in Flow Records that\n                \
    \        were generated by the Metering Process and\n                        dropped\
    \ by the Metering Process or by the\n                        Exporting Process\
    \ instead of being sent to the\n                        Collecting Process.\n\
    \   notSentOctetTotalCount\n                        The total number of octets\
    \ in packets in Flow\n                        Records that were generated by the\
    \ Metering\n                        Process and dropped by the Metering Process\
    \ or\n                        by the Exporting Process instead of being sent\n\
    \                        to the Collecting Process.\n   time first flow dropped\n\
    \                        The timestamp of the first Flow was dropped by\n    \
    \                    the Metering Process.  For this timestamp, any\n        \
    \                of the \"flowStart\" timestamp Information\n                \
    \        Elements flowStartMilliseconds,\n                        flowStartMicroseconds,\
    \ flowStartNanoseconds, and\n                        flowStartDeltaMicroseconds\
    \ can be used.\n   time last flow dropped\n                        The timestamp\
    \ of the last IP packet that was\n                        ignored by the Metering\
    \ Process.  For this\n                        timestamp, any of the \"flowEnd\"\
    \ timestamp\n                        Information Elements flowEndMilliseconds,\n\
    \                        flowEndMicroseconds, flowEndNanoseconds, and\n      \
    \                  flowEndDeltaMicroseconds can be used.\n   The Exporting Process\
    \ SHOULD export the Data Record specified by the\n   Exporting Process Reliability\
    \ Statistics Option Template on a regular\n   basis or based on some export policy.\
    \  This periodicity or export\n   policy SHOULD be configurable.\n"
- title: 4.4.  The Flow Keys Option Template
  contents:
  - "4.4.  The Flow Keys Option Template\n   The Flow Keys Option Template specifies\
    \ the structure of a Data\n   Record for reporting the Flow Keys of reported Flows.\
    \  A Flow Keys\n   Data Record extends a particular Template Record that is referenced\n\
    \   by its templateId identifier.  The Template Record is extended by\n   specifying\
    \ which of the Information Elements contained in the\n   corresponding Data Records\
    \ describe Flow properties that serve as\n   Flow Keys of the reported Flow.\n\
    \   The Flow Keys Option Template SHOULD contain the following\n   Information\
    \ Elements that are defined in [RFC5102]:\n   templateId              An identifier\
    \ of a Template.  This\n                           Information Element MUST be\
    \ defined as a\n                           Scope Field.\n   flowKeyIndicator \
    \       Bitmap with the positions of the Flow Keys in\n                      \
    \     the Data Records.\n"
- title: 5.  IPFIX Message Header "Export Time" and Flow Record Time
  contents:
  - "5.  IPFIX Message Header \"Export Time\" and Flow Record Time\n   The IPFIX Message\
    \ Header \"Export Time\" field is the time in seconds\n   since 0000 UTC Jan 1,\
    \ 1970, at which the IPFIX Message Header leaves\n   the Exporter.  The time-related\
    \ Information Elements specified in\n   [RFC5102] MAY use this \"Export Time\"\
    \ as base time and specify an\n   offset relative to it, instead of using a common\
    \ base time, such as\n   0000 UTC Jan 1, 1970.  All Information Elements that\
    \ do not have\n   their base time defined by their data type MUST have the base\
    \ time\n   clearly specified in their description.\n   For example, Data Records\
    \ requiring a microsecond precision can\n   export the flow start and end times\
    \ with the flowStartMicroseconds\n   and flowEndMicroseconds Information Elements\
    \ [RFC5102], containing\n   the time since 0000 UTC Jan 1, 1970.  An alternate\
    \ solution is to\n   export the flowStartDeltaMicroseconds and flowEndDeltaMicroseconds\n\
    \   Information Elements [RFC5102] in the Data Record, which respectively\n  \
    \ report the flow start and end time offsets compared to the IPFIX\n   Message\
    \ Header \"Export Time\".  The latter solution lowers the export\n   bandwidth\
    \ requirement while it increases the load on the Exporter, as\n   the Exporting\
    \ Process must calculate the flowStartDeltaMicroseconds\n   and flowEndDeltaMicroseconds\
    \ of every single Data Record before\n   exporting the IPFIX Message.\n   It must\
    \ be noted that using time-related Information Elements with\n   offset times,\
    \ compared to the IPFIX Message Header \"Export Time\",\n   imposes some time\
    \ constraints on the Data Records contained in the\n   IPFIX Message.  In the\
    \ example of flowStartDeltaMicroseconds and\n   flowEndDeltaMicroseconds Information\
    \ Elements [RFC5102], the Data\n   Record must be exported within a maximum of\
    \ 71 minutes after its\n   creation.  Otherwise, the 32-bit counter would not\
    \ be sufficient to\n   contain the flow start time offset.\n"
- title: 6.  Linkage with the Information Model
  contents:
  - "6.  Linkage with the Information Model\n   The Information Elements [RFC5102]\
    \ MUST be sent in canonical format\n   in network-byte order (also known as the\
    \ big-endian byte ordering).\n"
- title: 6.1.  Encoding of IPFIX Data Types
  contents:
  - "6.1.  Encoding of IPFIX Data Types\n   The following sections will define the\
    \ encoding of the data types\n   specified in [RFC5102].\n"
- title: 6.1.1.  Integral Data Types
  contents:
  - "6.1.1.  Integral Data Types\n   Integral data types -- octet, signed8, unsigned16,\
    \ signed16,\n   unsigned32, signed32, signed64, and unsigned64 -- MUST be encoded\n\
    \   using the default canonical format in network-byte order.  Signed\n   Integral\
    \ data types are represented in two's complement notation.\n"
- title: 6.1.2.  Address Types
  contents:
  - "6.1.2.  Address Types\n   Address types -- macAddress, ipv4Address, and ipv6Address\
    \ -- MUST be\n   encoded the same way as the integral data types.  The macAddress\
    \ is\n   treated as a 6-octet integer, the ipv4Address as a 4-octet integer,\n\
    \   and the ipv6Address as a 16-octet integer.\n"
- title: 6.1.3.  float32
  contents:
  - "6.1.3.  float32\n   The float32 data type MUST be encoded as an IEEE single-precision\n\
    \   32-bit floating point-type, as specified in [IEEE.754.1985].\n"
- title: 6.1.4.  float64
  contents:
  - "6.1.4.  float64\n   The float64 data type MUST be encoded as an IEEE double-precision\n\
    \   64-bit floating point-type, as specified in [IEEE.754.1985].\n"
- title: 6.1.5.  boolean
  contents:
  - "6.1.5.  boolean\n   The boolean data type is specified according to the TruthValue\
    \ in\n   [RFC2579]: it is an integer with the value 1 for true and a value 2\n\
    \   for false.  Every other value is undefined.  The boolean data type\n   MUST\
    \ be encoded in a single octet.\n"
- title: 6.1.6.  string and octetarray
  contents:
  - "6.1.6.  string and octetarray\n   The data type string represents a finite length\
    \ string of valid\n   characters of the Unicode character encoding set.  The string\
    \ data\n   type MUST be encoded in UTF-8 format.  The string is sent as an array\n\
    \   of octets using an Information Element of fixed or variable length.\n   The\
    \ length of the Information Element specifies the length of the\n   octetarray.\n"
- title: 6.1.7.  dateTimeSeconds
  contents:
  - "6.1.7.  dateTimeSeconds\n   The data type dateTimeseconds represents a time value\
    \ in units of\n   seconds normalized to the GMT timezone.  It MUST be encoded\
    \ in a\n   32-bit integer containing the number of seconds since 0000 UTC Jan\
    \ 1,\n   1970.  The 32-bit integer allows the time encoding up to 136 years.\n"
- title: 6.1.8.  dateTimeMilliseconds
  contents:
  - "6.1.8.  dateTimeMilliseconds\n   The data type dateTimeMilliseconds represents\
    \ a time value in units\n   of milliseconds normalized to the GMT timezone.  It\
    \ MUST be encoded\n   in a 64-bit integer containing the number of milliseconds\
    \ since 0000\n   UTC Jan 1, 1970.\n"
- title: 6.1.9.  dateTimeMicroseconds
  contents:
  - "6.1.9.  dateTimeMicroseconds\n   The data type dateTimeMicroseconds represents\
    \ a time value in units\n   of microseconds normalized to the GMT timezone.  It\
    \ MUST be encoded\n   in a 64-bit integer, according to the NTP format given in\
    \ [RFC1305].\n"
- title: 6.1.10.  dateTimeNanoseconds
  contents:
  - "6.1.10.  dateTimeNanoseconds\n   The data type of dateTimeNanoseconds represents\
    \ a time value in units\n   of nanoseconds normalized to the GMT time zone.  It\
    \ MUST be encoded\n   in a 64-bit integer, according to the NTP format given in\
    \ [RFC1305].\n"
- title: 6.2.  Reduced Size Encoding of Integer and Float Types
  contents:
  - "6.2.  Reduced Size Encoding of Integer and Float Types\n   Information Elements\
    \ containing integer, string, float, and\n   octetarray types in the information\
    \ model MAY be encoded using fewer\n   octets than those implied by their type\
    \ in the information model\n   definition [RFC5102], based on the assumption that\
    \ the smaller size\n   is sufficient to carry any value the Exporter may need\
    \ to deliver.\n   This reduces the network bandwidth requirement between the Exporter\n\
    \   and the Collector.  Note that the Information Element definitions\n   [RFC5102]\
    \ will always define the maximum encoding size.\n   For instance, the information\
    \ model [RFC5102] defines byteCount as an\n   unsigned64 type, which would require\
    \ 64 bits.  However, if the\n   Exporter will never locally encounter the need\
    \ to send a value larger\n   than 4294967295, it may chose to send the value instead\
    \ as an\n   unsigned32.  For example, a core router would require an unsigned64\n\
    \   byteCount, while an unsigned32 might be sufficient for an access\n   router.\n\
    \   This behavior is indicated by the Exporter by specifying a type size\n   with\
    \ a smaller length than that associated with the assigned type of\n   the Information\
    \ Element.  In the example above, the Exporter would\n   place a length of 4 versus\
    \ 8 in the Template.\n   If reduced sizing is used, it MUST only be applied to\
    \ the following\n   integer types: unsigned64, signed64, unsigned32, signed32,\n\
    \   unsigned16, and signed16.  The signed versus unsigned property of the\n  \
    \ reported value MUST be preserved.  The reduction in size can be to\n   any number\
    \ of octets smaller than the original type if the data value\n   still fits, i.e.,\
    \ so that only leading zeroes are dropped.  For\n   example, an unsigned64 can\
    \ be reduced in size to 7, 6, 5, 4, 3, 2, or\n   1 octet(s).\n   Reduced sizing\
    \ can also be used to reduce float64 to float32.  The\n   float32 not only has\
    \ a reduced number range, but due to the smaller\n   mantissa, is also less precise.\n\
    \   The reduced size encoding MUST NOT be applied to dateTimeMicroseconds\n  \
    \ or to dateTimeNanoseconds because these represent an inherent\n   structure\
    \ that would be destroyed by using less than the original\n   number of bytes.\n"
- title: 7.  Variable-Length Information Element
  contents:
  - "7.  Variable-Length Information Element\n   The IPFIX Template mechanism is optimized\
    \ for fixed-length\n   Information Elements [RFC5102].  Where an Information Element\
    \ has a\n   variable length, the following mechanism MUST be used to carry the\n\
    \   length information for both the IETF and proprietary Information\n   Elements.\n\
    \   In the Template Set, the Information Element Field Length is recorded\n  \
    \ as 65535.  This reserved length value notifies the Collecting Process\n   that\
    \ length of the Information Element will be carried in the\n   Information Element\
    \ content itself.\n   In most cases, the length of the Information Element will\
    \ be less\n   than 255 octets.  The following length-encoding mechanism optimizes\n\
    \   the overhead of carrying the Information Element length in this\n   majority\
    \ case.  The length is carried in the octet before the\n   Information Element,\
    \ as shown in Figure R.\n    0                   1                   2       \
    \            3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Length (< 255)|          Information Element                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      ... continuing as needed                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Figure R: Variable-Length Information Element (length < 255 octets)\n   If\
    \ the length of the Information Element is greater than or equal to\n   255 octets,\
    \ the length is encoded into 3 octets before the\n   Information Element.  The\
    \ first octet is 255, and the length is\n   carried in the second and third octets,\
    \ as shown in Figure S.\n    0                   1                   2       \
    \            3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      255      |      Length (0 to 65535)      |       IE      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      ... continuing as needed                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Figure S: Variable-Length Information Element (length 0 to 65535\n   octets)\n\
    \   The octets carrying the length (either the first or the first three\n   octets)\
    \ MUST NOT be included in the length of the Information\n   Element.\n"
- title: 8.  Template Management
  contents:
  - "8.  Template Management\n   This section describes Template Management when using\
    \ SCTP and\n   PR-SCTP as the transport protocol.  Any necessary changes to Template\n\
    \   Management specifically related to TCP or UDP transport protocols are\n  \
    \ specified in Section 10.\n   The Exporting Process assigns and maintains the\
    \ Template IDs per SCTP\n   association for the Exporter's Observation Domains.\
    \  A newly created\n   Template Record is assigned an unused Template ID by the\
    \ Exporting\n   Process.\n   If a specific Information Element is required by\
    \ a Template, but is\n   not available in observed packets, the Exporting Process\
    \ MAY choose\n   to export Flow Records without this Information Element in a\
    \ Data\n   Record defined by a new Template.\n   If an Information Element is\
    \ required more than once in a Template,\n   the different occurrences of this\
    \ Information Element SHOULD follow\n   the logical order of their treatments\
    \ by the Metering Process.  For\n   example, if a selected packet goes through\
    \ two hash functions, and if\n   the two hash values are sent within a single\
    \ Template, the first\n   occurrence of the hash value should belong to the first\
    \ hash function\n   in the Metering Process.  For example, when exporting the\
    \ two source\n   IP addresses of an IPv4 in IPv4 packets, the first sourceIPv4Address\n\
    \   Information Element occurrence should be the IPv4 address of the\n   outer\
    \ header, while the second occurrence should be the inner header\n   one.\n  \
    \ Template Sets and Options Template Sets may be sent on any SCTP\n   stream.\
    \  Template Sets and Options Template Sets MUST be sent\n   reliably, using SCTP-ordered\
    \ delivery.  As such, the Collecting\n   Process MUST store the Template Record\
    \ information for the duration\n   of the SCTP association so that it can interpret\
    \ the corresponding\n   Data Records that are received in subsequent Data Sets.\n\
    \   The Exporting Process SHOULD transmit the Template Set and Options\n   Template\
    \ Set in advance of any Data Sets that use that (Options)\n   Template ID, to\
    \ help ensure that the Collector has the Template\n   Record before receiving\
    \ the first Data Record.  Data Records that\n   correspond to a Template Record\
    \ MAY appear in the same and/or\n   subsequent IPFIX Message(s).\n   Different\
    \ Observation Domains from the same SCTP association may use\n   the same Template\
    \ ID value to refer to different Templates.\n   The Templates that are not used\
    \ anymore SHOULD be deleted.  Before\n   reusing a Template ID, the Template MUST\
    \ be deleted.  In order to\n   delete an allocated Template, the Template is withdrawn\
    \ through the\n   use of a Template Withdrawal Message.\n   The Template Withdrawal\
    \ Message MUST NOT be sent until sufficient\n   time has elapsed to allow the\
    \ Collecting Process to receive and\n   process the last Data Record using this\
    \ Template information.  This\n   time MUST be configurable.  A suitable default\
    \ value is 5 seconds\n   after the last Data Record has been sent.\n   The Template\
    \ ID from a withdrawn Template MUST NOT be reused until\n   sufficient time has\
    \ elapsed to allow for the Collecting Process to\n   receive and process the Template\
    \ Withdrawal Message.\n   A Template Withdrawal Message is a Template Record for\
    \ that Template\n   ID with a Field Count of 0.  The format of the Template Withdrawal\n\
    \   Message is shown in Figure T.\n    0                   1                 \
    \  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Set ID = (2 or 3)       |          Length = 16          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Template ID N        |        Field Count = 0        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Template ID ...      |        Field Count = 0        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Template ID M        |        Field Count = 0        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Figure T: Template Withdrawal Message Format\n   The Set ID field MUST contain\
    \ the value 2 for Template Set Withdrawal\n   and the value 3 for Options Template\
    \ Set Withdrawal.  Multiple\n   Template IDs MAY be withdrawn with a single Template\
    \ Withdrawal\n   Message, in that case, padding MAY be used.\n   The Template\
    \ Withdrawal Message withdraws the Template IDs for the\n   Observation Domain\
    \ ID specified in the IPFIX Message Header.\n   The Template Withdrawal Message\
    \ may be sent on any SCTP stream.  The\n   Template Withdrawal Message MUST be\
    \ sent reliably, using SCTP-ordered\n   delivery.\n   The Template Withdrawal\
    \ Message MUST NOT contain new Template or\n   Options Template Records.\n   If\
    \ the measurement parameters change such that a new Template is\n   required,\
    \ the Template MUST be withdrawn (using a Template Withdraw\n   Message and a\
    \ new Template definition) or an unused Template ID MUST\n   be used.  Examples\
    \ of the measurement changes are: a new sampling\n   rate, a new Flow expiration\
    \ process, a new filtering definition, etc.\n   When the SCTP association shuts\
    \ down or the Exporting Process\n   restarts, all Template assignments are lost\
    \ and Template IDs MUST be\n   reassigned.\n   If the Metering Process restarts,\
    \ the Exporting Process MUST either\n   reuse the previously assigned Template\
    \ ID for each Template, or it\n   MUST withdraw the previously issued Template\
    \ IDs by sending Template\n   Withdraw Message(s) before reusing them.\n   A Template\
    \ Withdrawal Message to withdraw all Templates for the\n   Observation Domain\
    \ ID specified in the IPFIX Message Header MAY be\n   used.  Its format is shown\
    \ in Figure U.\n    0                   1                   2                \
    \   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |   \
    \          Set ID = 2        |          Length = 8           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Template ID = 2       |        Field Count = 0        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Figure U: All Data Templates Withdrawal Message Format\n   A Template Withdrawal\
    \ Message to withdraw all Options Templates for\n   the Observation Domain ID\
    \ specified in the IPFIX Message Header MAY\n   be used.  Its format is shown\
    \ in Figure V.\n    0                   1                   2                \
    \   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |   \
    \          Set ID = 3        |          Length = 8           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Template ID = 3       |        Field Count = 0        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Figure V: All Options Templates Withdrawal Message Format\n   When the SCTP\
    \ association restarts, the Exporting Process MUST resend\n   all the Template\
    \ Records.\n"
- title: 9.  The Collecting Process's Side
  contents:
  - "9.  The Collecting Process's Side\n   This section describes the Collecting Process\
    \ when using SCTP and\n   PR-SCTP as the transport protocol.  Any necessary changes\
    \ to the\n   Collecting Process specifically related to TCP or UDP transport\n\
    \   protocols are specified in Section 10.\n   The Collecting Process SHOULD listen\
    \ for a new association request\n   from the Exporting Process.  The Exporting\
    \ Process will request a\n   number of streams to use for export.  An Exporting\
    \ Process MAY\n   request and support more than one stream per SCTP association.\n\
    \   If the Collecting Process receives a malformed IPFIX Message, it MUST\n  \
    \ reset the SCTP association, discard the IPFIX Message, and SHOULD log\n   the\
    \ error.  Note that non-zero Set padding does not constitute a\n   malformed IPFIX\
    \ Message.\n   Template Sets and Option Template Sets are only sent once.  The\n\
    \   Collecting Process MUST store the Template Record information for the\n  \
    \ duration of the association so that it can interpret the\n   corresponding Data\
    \ Records that are received in subsequent Data Sets.\n   Template IDs are unique\
    \ per SCTP association and per Observation\n   Domain.  If the Collecting Process\
    \ receives a Template that has\n   already been received but that has not previously\
    \ been withdrawn\n   (i.e., a Template Record from the same Exporter Observation\
    \ Domain\n   with the same Template ID received on the SCTP association), then\
    \ the\n   Collecting Process MUST shut down the association.\n   When an SCTP\
    \ association is closed, the Collecting Process MUST\n   discard all Templates\
    \ received over that association and stop\n   decoding IPFIX Messages that use\
    \ those Templates.\n   The Collecting Process normally receives Template Records\
    \ from the\n   Exporting Process before receiving Data Records.  The Data Records\n\
    \   are then decoded and stored by the Collector.  If the Template\n   Records\
    \ have not been received at the time Data Records are received,\n   the Collecting\
    \ Process MAY store the Data Records for a short period\n   of time and decode\
    \ them after the Template Records are received.  A\n   Collecting Process MUST\
    \ NOT assume that the Data Set and the\n   associated Template Set (or Options\
    \ Template Set) are exported in the\n   same IPFIX Message.\n   The Collecting\
    \ Process MUST note the Information Element identifier\n   of any Information\
    \ Element that it does not understand and MAY\n   discard that Information Element\
    \ from the Flow Record.\n   The Collector MUST accept padding in Data Records\
    \ and Template\n   Records.  The padding size is the Set Length minus the size\
    \ of the\n   Set Header (4 octets for the Set ID and the Set Length), modulo the\n\
    \   Record size deduced from the Template Record.\n   The IPFIX protocol has a\
    \ Sequence Number field in the Export header\n   that increases with the number\
    \ of IPFIX Data Records in the IPFIX\n   Message.  A Collector may detect out-of-sequence,\
    \ dropped, or\n   duplicate IPFIX Messages by tracking the Sequence Number.  A\n\
    \   Collector SHOULD provide a logging mechanism for tracking\n   out-of-sequence\
    \ IPFIX Messages.  Such out-of-sequence IPFIX Messages\n   may be due to Exporter\
    \ resource exhaustion where it cannot transmit\n   messages at their creation\
    \ rate, an Exporting Process reset,\n   congestion on the network link between\
    \ the Exporter and Collector,\n   Collector resource exhaustion where it cannot\
    \ process the IPFIX\n   Messages at their arrival rate, out-of-order packet reception,\n\
    \   duplicate packet reception, or an attacker injecting false messages.\n   If\
    \ a Collecting Process receives a Template Withdrawal Message, the\n   Collecting\
    \ Process MUST delete the corresponding Template Records\n   associated with the\
    \ specific SCTP association and specific\n   Observation Domain, and stop decoding\
    \ IPFIX Messages that use the\n   withdrawn Templates.\n   If the Collecting Process\
    \ receives a Template Withdraw message for a\n   Template Record it has not received\
    \ before on this SCTP association,\n   it MUST reset the SCTP association, discard\
    \ the IPFIX Message, and\n   SHOULD log the error as it does for malformed IPFIX\
    \ Messages.\n   A Collecting Process that receives IPFIX Messages from several\n\
    \   Observation Domains on the same Transport Session MUST be aware that\n   the\
    \ uniqueness of the Template ID is not guaranteed across\n   Observation Domains.\n\
    \   The Collector MUST support the use of Templates containing multiple\n   occurrences\
    \ of the similar Information Elements.\n"
- title: 10.  Transport Protocol
  contents:
  - "10.  Transport Protocol\n   The IPFIX Protocol Specification has been designed\
    \ to be transport\n   protocol independent.  Note that the Exporter can export\
    \ to multiple\n   Collecting Processes using independent transport protocols.\n\
    \   The IPFIX Message Header 16-bit Length field limits the length of an\n   IPFIX\
    \ Message to 65535 octets, including the header.  A Collecting\n   Process MUST\
    \ be able to handle IPFIX Message lengths of up to 65535\n   octets.\n"
- title: 10.1.  Transport Compliance and Transport Usage
  contents:
  - "10.1.  Transport Compliance and Transport Usage\n   We need to differentiate\
    \ between what must be implemented (so that\n   operators can interoperably deploy\
    \ compliant implementations from\n   different vendors) and what should or could\
    \ be used in various\n   operational environments.  We must also make sure that\
    \ ALL\n   implementations can operate in a congestion-aware and\n   congestion-avoidance\
    \ mode.\n   SCTP [RFC4960] using the PR-SCTP extension specified in [RFC3758]\n\
    \   MUST be implemented by all compliant implementations.  UDP [UDP] MAY\n   also\
    \ be implemented by compliant implementations.  TCP [TCP] MAY also\n   be implemented\
    \ by compliant implementations.\n   PR-SCTP SHOULD be used in deployments where\
    \ Exporters and Collectors\n   are communicating over links that are susceptible\
    \ to congestion.\n   PR-SCTP is capable of providing any required degree of reliability.\n\
    \   TCP MAY be used in deployments where Exporters and Collectors\n   communicate\
    \ over links that are susceptible to congestion, but\n   PR-SCTP is preferred\
    \ due to its ability to limit back pressure on\n   Exporters and its message versus\
    \ stream orientation.\n   UDP MAY be used, although it is not a congestion-aware\
    \ protocol.\n   However, the IPFIX traffic between Exporter and Collector MUST\
    \ run in\n   an environment where IPFIX traffic has been provisioned for, or is\n\
    \   contained through some other means.\n"
- title: 10.2.  SCTP
  contents:
  - "10.2.  SCTP\n   This section describes how IPFIX can be transported over SCTP\n\
    \   [RFC4960] using the PR-SCTP [RFC3758] extension.\n"
- title: 10.2.1.  Congestion Avoidance
  contents:
  - "10.2.1.  Congestion Avoidance\n   The SCTP transport protocol provides the required\
    \ level of congestion\n   avoidance by design.\n   SCTP will detect congestion\
    \ in the end-to-end path between the IPFIX\n   Exporting Process and the IPFIX\
    \ Collecting Process, and limit the\n   transfer rate accordingly.  When an IPFIX\
    \ Exporting Process has\n   records to export, but detects that transmission by\
    \ SCTP is\n   temporarily impossible, it can either wait until sending is possible\n\
    \   again, or it can decide to drop the record.  In the latter case, the\n   dropped\
    \ export data MUST be accounted for, so that the amount of\n   dropped export\
    \ data can be reported.\n"
- title: 10.2.2.  Reliability
  contents:
  - "10.2.2.  Reliability\n   The SCTP transport protocol is by default reliable,\
    \ but has the\n   capability to deliver messages with partial reliability  [RFC3758].\n\
    \   Using reliable SCTP messages for the IPFIX export is not in itself a\n   guarantee\
    \ that all Data Records will be delivered.  If there is\n   congestion on the\
    \ link from the Exporting Process to the Collecting\n   Process, or if a significant\
    \ number of retransmissions are required,\n   the send queues on the Exporting\
    \ Process may fill up; the Exporting\n   Process MAY either suspend, export, or\
    \ discard the IPFIX Messages.\n   If Data Records are discarded the IPFIX Sequence\
    \ Numbers used for\n   export MUST reflect the loss of data.\n"
- title: 10.2.3.  MTU
  contents:
  - "10.2.3.  MTU\n   SCTP provides the required IPFIX Message fragmentation service\
    \ based\n   on path MTU discovery.\n"
- title: 10.2.4.  Exporting Process
  contents:
  - '10.2.4.  Exporting Process

    '
- title: 10.2.4.1.  Association Establishment
  contents:
  - "10.2.4.1.  Association Establishment\n   The IPFIX Exporting Process SHOULD initiate\
    \ an SCTP association with\n   the IPFIX Collecting Process.  By default, the\
    \ Collecting Process\n   listens for connections on SCTP port 4739.  By default,\
    \ the\n   Collecting Process listens for secure connections on SCTP port 4740\n\
    \   (refer to the Security Considerations section).  By default, the\n   Exporting\
    \ Process tries to connect to one of these ports.  It MUST be\n   possible to\
    \ configure both the Exporting and Collecting Processes to\n   use a different\
    \ SCTP port.\n   The Exporting Process MAY establish more than one association\n\
    \   (connection \"bundle\" in SCTP terminology) to the Collecting Process.\n \
    \  An Exporting Process MAY support more than one active association to\n   different\
    \ Collecting Processes (including the case of different\n   Collecting Processes\
    \ on the same host).\n"
- title: 10.2.4.2.   Association Shutdown
  contents:
  - "10.2.4.2.   Association Shutdown\n   When an Exporting Process is shut down,\
    \ it SHOULD shut down the SCTP\n   association.\n   When a Collecting Process\
    \ no longer wants to receive IPFIX Messages,\n   it SHOULD shut down its end of\
    \ the association.  The Collecting\n   Process SHOULD continue to receive and\
    \ process IPFIX Messages until\n   the Exporting Process has closed its end of\
    \ the association.\n   When a Collecting Process detects that the SCTP association\
    \ has been\n   abnormally terminated, it MUST continue to listen for a new\n \
    \  association establishment.\n   When an Exporting Process detects that the SCTP\
    \ association to the\n   Collecting Process is abnormally terminated, it SHOULD\
    \ try to\n   re-establish the association.\n   Association timeouts SHOULD be\
    \ configurable.\n"
- title: 10.2.4.3.  Stream
  contents:
  - "10.2.4.3.  Stream\n   An Exporting Process MAY request more than one SCTP stream\
    \ per\n   association.  Each of these streams may be used for the transmission\n\
    \   of IPFIX Messages containing Data Sets, Template Sets, and/or Options\n  \
    \ Template Sets.\n   Depending on the requirements of the application, the Exporting\n\
    \   Process may send Data Sets with full or partial reliability, using\n   ordered\
    \ or out-of-order delivery, over any SCTP stream established\n   during SCTP Association\
    \ setup.\n   An IPFIX Exporting Process MAY use any PR-SCTP Service Definition\
    \ as\n   per Section 4 of the PR-SCTP [RFC3758] specification when using\n   partial\
    \ reliability to transmit IPFIX Messages containing only Data\n   Sets.\n   However,\
    \ Exporting Processes SHOULD mark such IPFIX Messages for\n   retransmission for\
    \ as long as resource or other constraints allow.\n"
- title: 10.2.4.4.  Template Management
  contents:
  - "10.2.4.4.  Template Management\n   When the transport protocol is SCTP, the default\
    \ Template Management\n   described in Section 8 is used.\n"
- title: 10.2.5.  Collecting Process
  contents:
  - "10.2.5.  Collecting Process\n   When the transport protocol is SCTP, the default\
    \ Collector processing\n   described in Section 9 is used.\n"
- title: 10.2.6.  Failover
  contents:
  - "10.2.6.  Failover\n   If the Collecting Process does not acknowledge the attempt\
    \ by the\n   Exporting Process to establish an association, the Exporting Process\n\
    \   should retry using the SCTP exponential backoff feature.  The\n   Exporter\
    \ MAY log an alarm if the time to establish the association\n   exceeds a specified\
    \ threshold, configurable on the Exporter.\n   If Collecting Process failover\
    \ is supported by the Exporting Process,\n   a second SCTP association MAY be\
    \ opened in advance.\n"
- title: 10.3.  UDP
  contents:
  - "10.3.  UDP\n   This section describes how IPFIX can be transported over UDP [UDP].\n"
- title: 10.3.1.  Congestion Avoidance
  contents:
  - "10.3.1.  Congestion Avoidance\n   UDP has no integral congestion-avoidance mechanism.\
    \  Its use over\n   congestion-sensitive network paths is therefore not recommended.\
    \  UDP\n   MAY be used in deployments where Exporters and Collectors always\n\
    \   communicate over dedicated links that are not susceptible to\n   congestion,\
    \ i.e., over provisioned links compared to the maximum\n   export rate from the\
    \ Exporters.\n"
- title: 10.3.2.  Reliability
  contents:
  - "10.3.2.  Reliability\n   UDP is not a reliable transport protocol, and cannot\
    \ guarantee\n   delivery of messages.  IPFIX Messages sent from the Exporting\
    \ Process\n   to the Collecting Process using UDP may therefore be lost.  UDP\
    \ MUST\n   NOT be used unless the application can tolerate some loss of IPFIX\n\
    \   Messages.\n   The Collecting Process SHOULD deduce the loss and reordering\
    \ of IPFIX\n   Data Records by looking at the discontinuities in the IPFIX Sequence\n\
    \   Number.  In the case of UDP, the IPFIX Sequence Number contains the\n   total\
    \ number of IPFIX Data Records sent for the UDP Transport Session\n   prior to\
    \ the receipt of this IPFIX Message, modulo 2^32.  A Collector\n   SHOULD detect\
    \ out-of-sequence, dropped, or duplicate IPFIX Messages\n   by tracking the Sequence\
    \ Number.  Templates sent from the Exporting\n   Process to the Collecting Process\
    \ using UDP as a transport MUST be\n   re-sent at regular intervals, in case previous\
    \ copies were lost.\n"
- title: 10.3.3.  MTU
  contents:
  - "10.3.3.  MTU\n   The maximum size of exported messages MUST be configured such\
    \ that\n   the total packet size does not exceed the path MTU.  If the path MTU\n\
    \   is unknown, a maximum packet size of 512 octets SHOULD be used.\n"
- title: 10.3.4.  Port Numbers
  contents:
  - "10.3.4.  Port Numbers\n   By default, the Collecting Process listens on the UDP\
    \ port 4739.  By\n   default, the Collecting Process listens for secure connections\
    \ on UDP\n   port 4740 (refer to the \"Security Considerations\" section).  By\n\
    \   default, the Exporting Process tries to connect to one of these\n   ports.\
    \  It MUST be possible to configure both the Exporting and\n   Collecting Processes\
    \ to use a different UDP port.\n"
- title: 10.3.5.  Exporting Process
  contents:
  - "10.3.5.  Exporting Process\n   The Exporting Process MAY duplicate the IPFIX\
    \ Message to the several\n   Collecting Processes.\n"
- title: 10.3.6.  Template Management
  contents:
  - "10.3.6.  Template Management\n   When IPFIX uses UDP as the transport protocol,\
    \ Template Sets and\n   Option Template Sets MUST be re-sent at regular intervals.\
    \  The\n   frequency of the (Options) Template transmission MUST be\n   configurable.\
    \  The default value for the frequency of the (Options)\n   Template transmission\
    \ is 10 minutes.  The Exporting Process SHOULD\n   transmit the Template Set and\
    \ Options Template Set in advance of any\n   Data Sets that use that (Options)\
    \ Template ID to help ensure that the\n   Collector has the Template Record before\
    \ receiving the first Data\n   Record.\n   In the event of configuration changes,\
    \ the Exporting Process SHOULD\n   send multiple copies of the new Template definitions,\
    \ in different\n   IPFIX Messages, at an accelerated rate.  In such a case, it\
    \ SHOULD\n   transmit the changed Template Record(s) and Options Template\n  \
    \ Record(s), without any data, in advance to help ensure that the\n   Collector\
    \ will have the correct Template information before receiving\n   the first data.\n\
    \   If the Option Template scope is defined in another Template, then\n   both\
    \ Templates SHOULD be sent in the same IPFIX Message.  For\n   example, if a Flow\
    \ Key Option Template (see Section 4.4) is sent in\n   an Option Template, then\
    \ the associated Template SHOULD be sent in\n   the same IPFIX Message.\n   Following\
    \ a configuration change that can modify the interpretation\n   of the Data Records\
    \ (for example, a sampling rate change) a new\n   Template ID MUST be used, and\
    \ the old Template ID MUST NOT be reused\n   until its lifetime (see Section 10.3.7)\
    \ has expired.\n   If UDP is selected as the transport protocol, the Template\
    \ Withdraw\n   Messages MUST NOT be used, as this method is inefficient due to\
    \ the\n   unreliable nature of UDP.\n"
- title: 10.3.7.  Collecting Process
  contents:
  - "10.3.7.  Collecting Process\n   The Collecting Process MUST associate a lifetime\
    \ with each Template\n   (or another definition of an identifier considered unique\
    \ within the\n   Transport Session) received via UDP.  Templates (and similar\n\
    \   definitions) not refreshed by the Exporting Process within the\n   lifetime\
    \ are expired at the Collecting Process.  If the Template (or\n   other definition)\
    \ is not refreshed before that lifetime has expired,\n   the Collecting Process\
    \ MUST discard that definition and any current\n   and future associated Data\
    \ Records.  In which case, an alarm MUST be\n   logged.  The Collecting Process\
    \ MUST NOT decode any further Data\n   Records that are associated with the expired\
    \ Template.  If a Template\n   is refreshed with a Template Record that differs\
    \ from the previously\n   received Template Record, the Collecting Process SHOULD\
    \ log a warning\n   and replace the previously received Template Record with the\
    \ new one.\n   The Template lifetime at the Collecting Process MUST be at least\
    \ 3\n   times higher than the Template refresh timeout configured on the\n   Exporting\
    \ Process.\n   Template IDs are unique per UDP session and per Observation Domain.\n\
    \   At any given time, the Collecting Process SHOULD maintain the\n   following\
    \ for all the current Template Records and Options Template\n   Records: <IPFIX\
    \ Device, Exporter source UDP port, Observation Domain\n   ID, Template ID, Template\
    \ Definition, Last Received>.\n   The Collecting Process SHOULD accept Data Records\
    \ without the\n   associated Template Record (or other definitions) required to\
    \ decode\n   the Data Record.  If the Template Records (or other definitions such\n\
    \   as Common Properties) have not been received at the time Data Records\n  \
    \ are received, the Collecting Process SHOULD store the Data Records\n   for a\
    \ short period of time and decode them after the Template Records\n   (or other\
    \ definitions) are received.  The short period of time MUST\n   be lower than\
    \ the lifetime of definitions associated with identifiers\n   considered unique\
    \ within the UDP session.\n   If the Collecting Process receives a malformed IPFIX\
    \ Message, it MUST\n   discard the IPFIX Message and SHOULD log the error.\n"
- title: 10.3.8.  Failover
  contents:
  - "10.3.8.  Failover\n   Because UDP is not a connection-oriented protocol, the\
    \ Exporting\n   Process is unable to determine from the transport protocol that\
    \ the\n   Collecting Process is no longer able to receive the IPFIX Messages.\n\
    \   Therefore, it cannot invoke a failover mechanism.  However, the\n   Exporting\
    \ Process MAY duplicate the IPFIX Message to several\n   Collecting Processes.\n"
- title: 10.4.  TCP
  contents:
  - "10.4.  TCP\n   This section describes how IPFIX can be transported over TCP [TCP].\n"
- title: 10.4.1.  Connection Management
  contents:
  - '10.4.1.  Connection Management

    '
- title: 10.4.1.1.  Connection Establishment
  contents:
  - "10.4.1.1.  Connection Establishment\n   The IPFIX Exporting Process initiates\
    \ a TCP connection to the\n   Collecting Process.  By default, the Collecting\
    \ Process listens for\n   connections on TCP port 4739.  By default, the Collecting\
    \ Process\n   listens for secure connections on TCP port 4740 (refer to the\n\
    \   Security Considerations section).  By default, the Exporting Process\n   tries\
    \ to connect to one of these ports.  It MUST be possible to\n   configure both\
    \ the Exporting Process and the Collecting Process to\n   use a different TCP\
    \ port.\n   An Exporting Process MAY support more than one active connection to\n\
    \   different Collecting Processes (including the case of different\n   Collecting\
    \ Processes on the same host).\n   The Exporter MAY log an alarm if the time to\
    \ establish the connection\n   exceeds a specified threshold, configurable on\
    \ the Exporter.\n"
- title: 10.4.1.2.  Graceful Connection Release
  contents:
  - "10.4.1.2.  Graceful Connection Release\n   When an Exporting Process is shut\
    \ down, it SHOULD shut down the TCP\n   connection.\n   When a Collecting Process\
    \ no longer wants to receive IPFIX Messages,\n   it SHOULD close its end of the\
    \ connection.  The Collecting Process\n   SHOULD continue to read IPFIX Messages\
    \ until the Exporting Process\n   has closed its end.\n"
- title: 10.4.1.3.  Restarting Interrupted Connections
  contents:
  - "10.4.1.3.  Restarting Interrupted Connections\n   When a Collecting Process detects\
    \ that the TCP connection to the\n   Exporting Process has terminated abnormally,\
    \ it MUST continue to\n   listen for a new connection.\n   When an Exporting Process\
    \ detects that the TCP connection to the\n   Collecting Process has terminated\
    \ abnormally, it SHOULD try to\n   re-establish the connection.  Connection timeouts\
    \ and retry schedules\n   SHOULD be configurable.  In the default configuration,\
    \ an Exporting\n   Process MUST NOT attempt to establish a connection more frequently\n\
    \   than once per minute.\n"
- title: 10.4.1.4.  Failover
  contents:
  - "10.4.1.4.  Failover\n   If the Collecting Process does not acknowledge the attempt\
    \ by the\n   Exporting Process to establish a connection, it will retry using\
    \ the\n   TCP exponential backoff feature.\n   If Collecting Process failover\
    \ is supported by the Exporting Process,\n   a second TCP connection MAY be opened\
    \ in advance.\n"
- title: 10.4.2.  Data Transmission
  contents:
  - "10.4.2.  Data Transmission\n   Once a TCP connection is established, the Exporting\
    \ Process starts\n   sending IPFIX Messages to the Collecting Process.\n"
- title: 10.4.2.1.  IPFIX Message Encoding
  contents:
  - "10.4.2.1.  IPFIX Message Encoding\n   IPFIX Messages are sent over the TCP connection\
    \ without any special\n   encoding.  The Length field in the IPFIX Message Header\
    \ defines the\n   end of each IPFIX Message and thus the start of the next IPFIX\n\
    \   Message.  This means that IPFIX Messages cannot be interleaved.\n   In the\
    \ case of TCP, the IPFIX Sequence Number contains the total\n   number of IPFIX\
    \ Data Records sent from this TCP connection, from the\n   current Observation\
    \ Domain by the Exporting Process, prior to the\n   receipt of this IPFIX Message,\
    \ modulo 2^32.\n   If an Exporting Process exports data from multiple Observation\n\
    \   Domains, it should be careful to choose IPFIX Message lengths\n   appropriately\
    \ to minimize head-of-line blocking between different\n   Observation Domains.\
    \  Multiple TCP connections MAY be used to avoid\n   head-of-line between different\
    \ Observation Domains.\n"
- title: 10.4.2.2.  Template Management
  contents:
  - "10.4.2.2.  Template Management\n   For each Template, the Exporting Process MUST\
    \ send the Template\n   Record before exporting Data Records that refer to that\
    \ Template.\n   Template IDs are unique per TCP connection and per Observation\n\
    \   Domain.  A Collecting Process MUST record all Template and Options\n   Template\
    \ Records for the duration of the connection, as an Exporting\n   Process is not\
    \ required to re-export Template Records.\n   When the TCP connection restarts,\
    \ the Exporting Process MUST resend\n   all the Template Records.\n   When a TCP\
    \ connection is closed, the Collecting Process MUST discard\n   all Templates\
    \ received over that connection and stop decoding IPFIX\n   Messages that use\
    \ those Templates.\n   The Templates that are not used anymore SHOULD be deleted.\
    \  Before\n   reusing a Template ID, the Template MUST be deleted.  In order to\n\
    \   delete an allocated Template, the Template is withdrawn through the\n   use\
    \ of a Template Withdrawal Message over the TCP connection.\n   If the Collecting\
    \ Process receives a malformed IPFIX Message, it MUST\n   reset the TCP connection,\
    \ discard the IPFIX Message, and SHOULD log\n   the error.\n"
- title: 10.4.2.3.  Congestion Handling and Reliability
  contents:
  - "10.4.2.3.  Congestion Handling and Reliability\n   TCP ensures reliable delivery\
    \ of data from the Exporting Process to\n   the Collecting Process.  TCP also\
    \ controls the rate at which data can\n   be sent from the Exporting Process to\
    \ the Collecting Process, using a\n   mechanism that takes into account both congestion\
    \ in the network and\n   the capabilities of the receiver.\n   Therefore, an IPFIX\
    \ Exporting Process may not be able to send IPFIX\n   Messages at the rate that\
    \ the Metering Process generates it, either\n   because of congestion in the network\
    \ or because the Collecting\n   Process cannot handle IPFIX Messages fast enough.\
    \  As long as\n   congestion is transient, the Exporting Process can buffer IPFIX\n\
    \   Messages for transmission.  But such buffering is necessarily\n   limited,\
    \ both because of resource limitations and because of\n   timeliness requirements,\
    \ so ongoing and/or severe congestion may lead\n   to a situation where the Exporting\
    \ Process is blocked.\n   When an Exporting Process has Data Records to export\
    \ but the\n   transmission buffer is full, and it wants to avoid blocking, it\
    \ can\n   decide to drop some Data Records.  The dropped Data Records MUST be\n\
    \   accounted for, so that the amount can later be exported.\n   When an Exporting\
    \ Process finds that the rate at which records should\n   be exported is consistently\
    \ higher than the rate at which TCP sending\n   permits, it should provide back\
    \ pressure to the Metering Processes.\n   The Metering Process could then adapt\
    \ by temporarily reducing the\n   amount of data it generates, for example, using\
    \ sampling or\n   aggregation.\n"
- title: 10.4.3.  Collecting Process
  contents:
  - "10.4.3.  Collecting Process\n   The Collecting Process SHOULD listen for a new\
    \ TCP connection from\n   the Exporting Process.\n   If the Collecting Process\
    \ receives a malformed IPFIX Message, it MUST\n   reset the TCP connection, discard\
    \ the IPFIX Message, and SHOULD log\n   the error.  Note that non-zero Set padding\
    \ does not constitute a\n   malformed IPFIX Message.\n   Template Sets and Option\
    \ Template Sets are only sent once.  The\n   Collecting Process MUST store the\
    \ Template Record information for the\n   duration of the connection so that it\
    \ can interpret the corresponding\n   Data Records that are received in subsequent\
    \ Data Sets.\n   Template IDs are unique per TCP connection and per Observation\n\
    \   Domain.  If the Collecting Process receives a Template that has\n   already\
    \ been received but that has not previously been withdrawn\n   (i.e., a Template\
    \ Record from the same Exporter Observation Domain\n   with the same Template\
    \ ID received on the TCP connection), then the\n   Collecting Process MUST shut\
    \ down the connection.\n   When a TCP connection is closed, the Collecting Process\
    \ MUST discard\n   all Templates received over that connection and stop decoding\
    \ IPFIX\n   Messages that use those Templates.\n   If a Collecting Process receives\
    \ a Template Withdrawal Message, the\n   Collecting Process MUST delete the corresponding\
    \ Template Records\n   associated with the specific TCP connection and specific\
    \ Observation\n   Domain, and stop decoding IPFIX Messages that use the withdrawn\n\
    \   Templates.\n   If the Collecting Process receives a Template Withdrawal Message\
    \ for\n   a Template Record it has not received before on this TCP connection,\n\
    \   it MUST reset the TCP association, discard the IPFIX Message, and\n   SHOULD\
    \ log the error as it does for malformed IPFIX Messages.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   The security considerations for the IPFIX protocol\
    \ have been derived\n   from an analysis of potential security threats, as discussed\
    \ in the\n   \"Security Considerations\" section of IPFIX requirements [RFC3917].\n\
    \   The requirements for IPFIX security are as follows:\n   1. IPFIX must provide\
    \ a mechanism to ensure the confidentiality of\n      IPFIX data transferred from\
    \ an Exporting Process to a Collecting\n      Process, in order to prevent disclosure\
    \ of Flow Records\n      transported via IPFIX.\n   2. IPFIX must provide a mechanism\
    \ to ensure the integrity of IPFIX\n      data transferred from an Exporting Process\
    \ to a Collecting\n      Process, in order to prevent the injection of incorrect\
    \ data or\n      control information (e.g., Templates) into an IPFIX Message\n\
    \      stream.\n   3. IPFIX must provide a mechanism to authenticate IPFIX Collecting\n\
    \      and Exporting Processes, to prevent the collection of data from an\n  \
    \    unauthorized Exporting Process or the export of data to an\n      unauthorized\
    \ Collecting Process.\n   Because IPFIX can be used to collect information for\
    \ network\n   forensics and billing purposes, attacks designed to confuse, disable,\n\
    \   or take information from an IPFIX collection system may be seen as a\n   prime\
    \ objective during a sophisticated network attack.\n   An attacker in a position\
    \ to inject false messages into an IPFIX\n   Message stream can either affect\
    \ the application using IPFIX (by\n   falsifying data), or the IPFIX Collecting\
    \ Process itself (by\n   modifying or revoking Templates, or changing options);\
    \ for this\n   reason, IPFIX Message integrity is important.\n   The IPFIX Messages\
    \ themselves may also contain information of value\n   to an attacker, including\
    \ information about the configuration of the\n   network as well as end-user traffic\
    \ and payload data, so care must be\n   taken to confine their visibility to authorized\
    \ users.  When an\n   Information Element containing end-user payload information\
    \ is\n   exported, it SHOULD be transmitted to the Collecting Process using a\n\
    \   means that secures its contents against eavesdropping.  Suitable\n   mechanisms\
    \ include the use of either a direct point-to-point\n   connection or the use\
    \ of an encryption mechanism.  It is the\n   responsibility of the Collecting\
    \ Process to provide a satisfactory\n   degree of security for this collected\
    \ data, including, if necessary,\n   anonymization of any reported data.\n"
- title: 11.1.  Applicability of TLS and DTLS
  contents:
  - "11.1.  Applicability of TLS and DTLS\n   Transport Layer Security (TLS) [RFC4346]\
    \ and Datagram Transport Layer\n   Security (DTLS) [RFC4347] were designed to\
    \ provide the\n   confidentiality, integrity, and authentication assurances required\
    \ by\n   the IPFIX protocol, without the need for pre-shared keys.\n   With the\
    \ mandatory SCTP and PR-SCTP transport protocols for IPFIX,\n   DTLS [RFC4347]\
    \ MUST be implemented.  If UDP is selected as the IPFIX\n   transport protocol,\
    \ DTLS [RFC4347] MUST be implemented.  If TCP is\n   selected as the IPFIX transport\
    \ protocol, TLS [RFC4346] MUST be\n   implemented.\n   Note that DTLS is selected\
    \ as the security mechanism for SCTP and\n   PR-SCTP.  Though TLS bindings to\
    \ SCTP are defined in [RFC3436], they\n   require all communication to be over\
    \ reliable, bidirectional streams,\n   and require one TLS connection per stream.\
    \  This arrangement is not\n   compatible with the rationale behind the choice\
    \ of SCTP as an IPFIX\n   transport protocol.\n   Note that using DTLS [RFC4347]\
    \ has a vulnerability, i.e., a true man\n   in the middle may attempt to take\
    \ data out of an association and fool\n   the sender into thinking that the data\
    \ was actually received by the\n   peer.  In generic TLS for SCTP (and/or TCP),\
    \ this is not possible.\n   This means that the removal of a message may become\
    \ hidden from the\n   sender or receiver.  Another vulnerability of using PR-SCTP\
    \ with DTLS\n   is that someone could inject SCTP control information to shut\
    \ down\n   the SCTP association, effectively generating a loss of IPFIX Messages\n\
    \   if those are buffered outside of the SCTP association.  In the\n   future,\
    \ techniques such as [dtls-for-sctp] could be used to overcome\n   these vulnerabilities.\n\
    \   When using DTLS over SCTP, the Exporting Process MUST ensure that\n   each\
    \ IPFIX Message is sent over the same SCTP stream that would be\n   used when\
    \ sending the same IPFIX Message directly over SCTP.  Note\n   that DTLS may send\
    \ its own control messages on stream 0 with full\n   reliability; however, this\
    \ will not interfere with the processing of\n   stream 0 IPFIX Messages at the\
    \ Collecting Process, because DTLS\n   consumes its own control messages before\
    \ passing IPFIX Messages up to\n   the application layer.\n"
- title: 11.2.  Usage
  contents:
  - "11.2.  Usage\n   The IPFIX Exporting Process initiates the communication to the\
    \ IPFIX\n   Collecting Process, and acts as a TLS or DTLS client according to\n\
    \   [RFC4346] and [RFC4347], while the IPFIX Collecting Process acts as a\n  \
    \ TLS or DTLS server.  The DTLS client opens a secure connection on the\n   SCTP\
    \ port 4740 of the DTLS server if SCTP or PR-SCTP is selected as\n   the transport\
    \ protocol.  The TLS client opens a secure connection on\n   the TCP port 4740\
    \ of the TLS server if TCP is selected as the\n   transport protocol.  The DTLS\
    \ client opens a secure connection on the\n   UDP port 4740 of the DTLS server\
    \ if UDP is selected as the transport\n   protocol.\n"
- title: 11.3.  Authentication
  contents:
  - "11.3.  Authentication\n   IPFIX Exporting Processes and IPFIX Collecting Processes\
    \ are\n   identified by the fully qualified domain name of the interface on\n\
    \   which IPFIX Messages are sent or received, for purposes of X.509\n   client\
    \ and server certificates as in [RFC3280].\n   To prevent man-in-the-middle attacks\
    \ from impostor Exporting or\n   Collecting Processes, the acceptance of data\
    \ from an unauthorized\n   Exporting Process, or the export of data to an unauthorized\n\
    \   Collecting Process, strong mutual authentication via asymmetric keys\n   MUST\
    \ be used for both TLS and DTLS.  Each of the IPFIX Exporting and\n   Collecting\
    \ Processes MUST verify the identity of its peer against its\n   authorized certificates,\
    \ and MUST verify that the peer's certificate\n   matches its fully qualified\
    \ domain name, or, in the case of SCTP, the\n   fully qualified domain name of\
    \ one of its endpoints.\n   The fully qualified domain name used to identify an\
    \ IPFIX Collecting\n   Process or Exporting Process may be stored either in a\
    \ subjectAltName\n   extension of type dNSName, or in the most specific Common\
    \ Name field\n   of the Subject field of the X.509 certificate.  If both are present,\n\
    \   the subjectAltName extension is given preference.\n   Internationalized domain\
    \ names (IDN) in either the subjectAltName\n   extension of type dNSName or the\
    \ most specific Common Name field of\n   the Subject field of the X.509 certificate\
    \ MUST be encoded using\n   Punycode [RFC3492] as described in Section 4 of [RFC3490],\n\
    \   \"Conversion Operations\".\n"
- title: 11.4.  Protection against DoS Attacks
  contents:
  - "11.4.  Protection against DoS Attacks\n   An attacker may mount a denial-of-service\
    \ (DoS) attack against an\n   IPFIX collection system either directly, by sending\
    \ large amounts of\n   traffic to a Collecting Process, or indirectly, by generating\
    \ large\n   amounts of traffic to be measured by a Metering Process.\n   Direct\
    \ denial-of-service attacks can also involve state exhaustion,\n   whether at\
    \ the transport layer (e.g., by creating a large number of\n   pending connections),\
    \ or within the IPFIX Collecting Process itself\n   (e.g., by sending Flow Records\
    \ pending Template or scope information,\n   a large amount of Options Template\
    \ Records, etc.).\n   SCTP mandates a cookie-exchange mechanism designed to defend\
    \ against\n   SCTP state exhaustion denial-of-service attacks.  Similarly, TCP\n\
    \   provides the \"SYN cookie\" mechanism to mitigate state exhaustion; SYN\n\
    \   cookies SHOULD be used by any Collecting Process accepting TCP\n   connections.\
    \  DTLS also provides cookie exchange to protect against\n   DTLS server state\
    \ exhaustion.\n   The reader should note that there is no way to prevent fake\
    \ IPFIX\n   Message processing (and state creation) for UDP & SCTP communication.\n\
    \   The use of TLS and DTLS can obviously prevent the creation of fake\n   states,\
    \ but they are themselves prone to state exhaustion attacks.\n   Therefore, Collector\
    \ rate limiting SHOULD be used to protect TLS &\n   DTLS (like limiting the number\
    \ of new TLS or DTLS session per second\n   to a sensible number).\n   IPFIX state\
    \ exhaustion attacks can be mitigated by limiting the rate\n   at which new connections\
    \ or associations will be opened by the\n   Collecting Process, the rate at which\
    \ IPFIX Messages will be accepted\n   by the Collecting Process, and adaptively\
    \ limiting the amount of\n   state kept, particularly records waiting on Templates.\
    \  These rate\n   and state limits MAY be provided by a Collecting Process; if\n\
    \   provided, the limits SHOULD be user configurable.\n   Additionally, an IPFIX\
    \ Collecting Process can eliminate the risk of\n   state exhaustion attacks from\
    \ untrusted nodes by requiring TLS or\n   DTLS mutual authentication, causing\
    \ the Collecting Process to accept\n   IPFIX Messages only from trusted sources.\n\
    \   With respect to indirect denial of service, the behavior of IPFIX\n   under\
    \ overload conditions depends on the transport protocol in use.\n   For IPFIX\
    \ over TCP, TCP congestion control would cause the flow of\n   IPFIX Messages\
    \ to back off and eventually stall, blinding the IPFIX\n   system.  PR-SCTP improves\
    \ upon this situation somewhat, as some IPFIX\n   Messages would continue to be\
    \ received by the Collecting Process due\n   to the avoidance of head-of-line\
    \ blocking by SCTP's multiple streams\n   and partial reliability features, possibly\
    \ affording some visibility\n   of the attack.  The situation is similar with\
    \ UDP, as some datagrams\n   may continue to be received at the Collecting Process,\
    \ effectively\n   applying sampling to the IPFIX Message stream, implying that\
    \ some\n   forensics may be left.\n   To minimize IPFIX Message loss under overload\
    \ conditions, some\n   mechanism for service differentiation could be used to\
    \ prioritize\n   IPFIX traffic over other traffic on the same link.  Alternatively,\n\
    \   IPFIX Messages can be transported over a dedicated network.  In this\n   case,\
    \ care must be taken to ensure that the dedicated network can\n   handle the expected\
    \ peak IPFIX Message traffic.\n"
- title: 11.5.  When DTLS or TLS Is Not an Option
  contents:
  - "11.5.  When DTLS or TLS Is Not an Option\n   The use of DTLS or TLS might not\
    \ be possible in some cases due to\n   performance issues or other operational\
    \ concerns.\n   Without TLS or DTLS mutual authentication, IPFIX Exporting Processes\n\
    \   and Collecting Processes can fall back on using IP source addresses\n   to\
    \ authenticate their peers.  A policy of allocating Exporting\n   Process and\
    \ Collecting Process IP addresses from specified address\n   ranges, and using\
    \ ingress filtering to prevent spoofing, can improve\n   the usefulness of this\
    \ approach.  Again, completely segregating IPFIX\n   traffic on a dedicated network,\
    \ where possible, can improve security\n   even further.  In any case, the use\
    \ of open Collecting Processes\n   (those that will accept IPFIX Messages from\
    \ any Exporting Process\n   regardless of IP address or identity) is discouraged.\n\
    \   Modern TCP and SCTP implementations are resistant to blind insertion\n   attacks\
    \ (see [RFC1948], [RFC4960]); however, UDP offers no such\n   protection.  For\
    \ this reason, IPFIX Message traffic transported via\n   UDP and not secured via\
    \ DTLS SHOULD be protected via segregation to a\n   dedicated network.\n"
- title: 11.6.  Logging an IPFIX Attack
  contents:
  - "11.6.  Logging an IPFIX Attack\n   IPFIX Collecting Processes MUST detect potential\
    \ IPFIX Message\n   insertion or loss conditions by tracking the IPFIX Sequence\
    \ Number,\n   and SHOULD provide a logging mechanism for reporting out-of-sequence\n\
    \   messages.  Note that an attacker may be able to exploit the handling\n   of\
    \ out-of-sequence messages at the Collecting Process, so care should\n   be taken\
    \ in handling these conditions.  For example, a Collecting\n   Process that simply\
    \ resets the expected Sequence Number upon receipt\n   of a later Sequence Number\
    \ could be temporarily blinded by deliberate\n   injection of later Sequence Numbers.\n\
    \   IPFIX Exporting and Collecting Processes SHOULD log any connection\n   attempt\
    \ that fails due to authentication failure, whether due to\n   being presented\
    \ an unauthorized or mismatched certificate during TLS\n   or DTLS mutual authentication,\
    \ or due to a connection attempt from an\n   unauthorized IP address when TLS\
    \ or DTLS is not in use.\n   IPFIX Exporting and Collecting Processes SHOULD detect\
    \ and log any\n   SCTP association reset or TCP connection reset.\n"
- title: 11.7.  Securing the Collector
  contents:
  - "11.7.  Securing the Collector\n   The security of the Collector and its implementation\
    \ is important to\n   achieve overall security.  However, it is outside the scope\
    \ of this\n   document.\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   IPFIX Messages use two fields with assigned values.\
    \  These are the\n   IPFIX Version Number, indicating which version of the IPFIX\
    \ Protocol\n   was used to export an IPFIX Message, and the IPFIX Set ID, indicating\n\
    \   the type for each set of information within an IPFIX Message.\n   The IPFIX\
    \ Version Number value of 10 is reserved for the IPFIX\n   protocol specified\
    \ in this document.  Set ID values of 0 and 1 are\n   not used for historical\
    \ reasons [RFC3954].  The Set ID value of 2 is\n   reserved for the Template Set.\
    \  The Set ID value of 3 is reserved for\n   the Option Template Set.  All other\
    \ Set ID values from 4 to 255 are\n   reserved for future use.  Set ID values\
    \ above 255 are used for Data\n   Sets.\n   New assignments in either IPFIX Version\
    \ Number or IPFIX Set ID\n   assignments require a Standards Action [RFC2434],\
    \ i.e., they are to\n   be made via Standards Track RFCs approved by the IESG.\n"
- title: Appendix A.  IPFIX Encoding Examples
  contents:
  - "Appendix A.  IPFIX Encoding Examples\n   This appendix, which is a not a normative\
    \ reference, contains IPFIX\n   encoding examples.\n   Let's consider the example\
    \ of an IPFIX Message composed of a Template\n   Set, a Data Set (which contains\
    \ three Data Records), an Options\n   Template Set and a Data Set (which contains\
    \ 2 Data Records related to\n   the previous Options Template Record).\n   IPFIX\
    \ Message:\n   +--------+------------------------------------------. . .\n   |\
    \        | +--------------+ +------------------+\n   |Message | | Template   \
    \  | | Data             |\n   | Header | | Set          | | Set              |\
    \   . . .\n   |        | | (1 Template) | | (3 Data Records) |\n   |        |\
    \ +--------------+ +------------------+\n   +--------+------------------------------------------.\
    \ . .\n        . . .-------------------------------------------+\n           \
    \   +------------------+ +------------------+ |\n              | Options     \
    \     | | Data             | |\n       . . .  | Template Set     | | Set     \
    \         | |\n              | (1 Template)     | | (2 Data Records) | |\n   \
    \           +------------------+ +------------------+ |\n        . . .-------------------------------------------+\n"
- title: A.1.  Message Header Example
  contents:
  - "A.1.  Message Header Example\n   The Message Header is composed of:\n    0  \
    \                 1                   2                   3\n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Version = 0x000a          |         Length = 152          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Export Time                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Sequence Number                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Observation Domain ID                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: A.2.  Template Set Examples
  contents:
  - 'A.2.  Template Set Examples

    '
- title: A.2.1.  Template Set Using IETF-Specified Information Elements
  contents:
  - "A.2.1.  Template Set Using IETF-Specified Information Elements\n   We want to\
    \ report the following Information Elements:\n   - The IPv4 source IP address:\
    \ sourceIPv4Address in [RFC5102],\n     with a length of 4 octets\n   - The IPv4\
    \ destination IP address: destinationIPv4Address in\n     [RFC5102], with a length\
    \ of 4 octets\n   - The next-hop IP address (IPv4): ipNextHopIPv4Address in\n\
    \     [RFC5102], with a length of 4 octets\n   - The number of packets of the\
    \ Flow: inPacketDeltaCount in\n     [RFC5102], with a length of 4 octets\n   -\
    \ The number of octets of the Flow: inOctetDeltaCount in\n     [RFC5102], with\
    \ a length of 4 octets\n   Therefore, the Template Set will be composed of the\
    \ following:\n    0                   1                   2                  \
    \ 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Set ID = 2            |      Length = 28 octets       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Template ID 256         |       Field Count = 5         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|    sourceIPv4Address = 8    |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0| destinationIPv4Address = 12 |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|  ipNextHopIPv4Address = 15  |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|   inPacketDeltaCount = 2    |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|   inOctetDeltaCount =  1    |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: A.2.2.  Template Set Using Enterprise-Specific Information Elements
  contents:
  - "A.2.2.  Template Set Using Enterprise-Specific Information Elements\n   We want\
    \ to report the following Information Elements:\n   - The IPv4 source IP address:\
    \ sourceIPv4Address in [RFC5102], with a\n     length of 4 octets\n   - The IPv4\
    \ destination IP address: destinationIPv4Address in\n     [RFC5102], with a length\
    \ of 4 octets\n   - An enterprise-specific Information Element representing proprietary\n\
    \     information, with a type of 15 and a length of 4\n   - The number of packets\
    \ of the Flow: inPacketDeltaCount in [RFC5102],\n     with a length of 4 octets\n\
    \   - The number of octets of the Flow: inOctetDeltaCount in [RFC5102],\n    \
    \ with a length of 4 octets\n   Therefore, the Template Set will be composed of\
    \ the following:\n    0                   1                   2              \
    \     3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \       Set ID = 2            |      Length = 32 octets       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Template ID 257         |       Field Count = 5         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|    sourceIPv4Address = 8    |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0| destinationIPv4Address = 12 |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1| Information Element Id. = 15|       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Enterprise number                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|   inPacketDeltaCount = 2    |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|   inOctetDeltaCount = 1     |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: A.3.  Data Set Example
  contents:
  - "A.3.  Data Set Example\n   In this example, we report the following three Flow\
    \ Records:\n   Src IP addr. | Dst IP addr.  | Next Hop addr. | Packet | Octets\n\
    \                |               |                | Number | Number\n   ------------------------------------------------------------------\n\
    \   192.0.2.12   | 192.0.2.254   | 192.0.2.1      | 5009   | 5344385\n   192.0.2.27\
    \   | 192.0.2.23    | 192.0.2.2      | 748    | 388934\n   192.0.2.56   | 192.0.2.65\
    \    | 192.0.2.3      | 5      | 6534\n    0                   1             \
    \      2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Set ID = 256         |          Length = 64          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          192.0.2.12                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          192.0.2.254                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          192.0.2.1                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             5009                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                            5344385                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          192.0.2.27                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          192.0.2.23                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          192.0.2.2                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              748                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             388934                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          192.0.2.56                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          192.0.2.65                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          192.0.2.3                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               5                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              6534                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Note that padding is not necessary in this example.\n"
- title: A.4.  Options Template Set Examples
  contents:
  - 'A.4.  Options Template Set Examples

    '
- title: A.4.1.  Options Template Set Using IETF-Specified Information Elements
  contents:
  - "A.4.1.  Options Template Set Using IETF-Specified Information Elements\n   Per\
    \ line card (the router being composed of two line cards), we want\n   to report\
    \ the following Information Elements:\n   - Total number of IPFIX Messages: exportedPacketCount\
    \ [RFC5102], with\n     a length of 2 octets\n   - Total number of exported Flows:\
    \ exportedFlowCount [RFC5102], with a\n     length of 2 octets\n   The line card,\
    \ which is represented by the lineCardId Information\n   Element [RFC5102], is\
    \ used as the Scope Field.\n   Therefore, the Options Template Set will be:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Set ID = 3            |          Length = 24          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Template ID 258         |        Field Count = 3        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Scope Field Count = 1     |0|     lineCardId = 141        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Scope 1 Field Length = 4    |0|  exportedPacketCount = 41   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Field Length = 2        |0|   exportedFlowCount = 42    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Field Length = 2        |           Padding             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: A.4.2.  Options Template Set Using Enterprise-Specific Information
  contents:
  - "A.4.2.  Options Template Set Using Enterprise-Specific Information\n        Elements\n\
    \   Per line card (the router being composed of two line cards), we want\n   to\
    \ report the following Information Elements:\n      - Total number of IPFIX Messages:\
    \ exportedPacketCount [RFC5102],\n        with a length of 2 octets\n      - An\
    \ enterprise-specific number of exported Flows, with a type of\n        42 and\
    \ a length of 4 octets\n   The line card, which is represented by the lineCardId\
    \ Information\n   Element [RFC5102], is used as the Scope Field.\n   The format\
    \ of the Options Template Set is as follows:\n     0                   1     \
    \              2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |         Set ID = 3            |          Length = 28          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |       Template ID 259         |        Field Count = 3        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |     Scope Field Count = 1     |0|     lineCardId = 141        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |   Scope 1 Field Length = 4    |0|  exportedPacketCount = 41   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |       Field Length = 2        |1|Information Element Id. = 42 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |       Field Length = 4        |       Enterprise number     ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...      Enterprise number      |           Padding             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: A.4.3.  Options Template Set Using an Enterprise-Specific Scope
  contents:
  - "A.4.3.  Options Template Set Using an Enterprise-Specific Scope\n   In this example,\
    \ we want to export the same information as in the\n   example in Section A.4.1:\n\
    \      - Total number of IPFIX Messages: exportedPacketCount [RFC5102],\n    \
    \    with a length of 2 octets\n      - Total number of exported Flows: exportedFlowCount\
    \ [RFC5102],\n        with a length of 2 octets\n   But this time, the information\
    \ pertains to a proprietary scope,\n   identified by enterprise-specific Information\
    \ Element number 123.\n   The format of the Options Template Set is now as follows:\n\
    \     0                   1                   2                   3\n     0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |         Set ID = 3            |          Length = 28          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |       Template ID 260         |        Field Count = 3        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |     Scope Field Count = 1     |1|Scope 1 Infor. El. Id. = 123 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |    Scope 1 Field Length = 4   |       Enterprise Number      ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ...       Enterprise Number      |0|  exportedPacketCount = 41   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |       Field Length = 2        |0|   exportedFlowCount = 42    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |       Field Length = 2        |           Padding             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: A.4.4.  Data Set Using an Enterprise-Specific Scope
  contents:
  - "A.4.4.  Data Set Using an Enterprise-Specific Scope\n   In this example, we report\
    \ the following two Data Records:\n   Line Card ID               | IPFIX Message\
    \  | Exported Flow Records\n   -------------------------------------------------------------------\n\
    \   Line Card 1 (lineCardId=1) | 345            | 10201\n   Line Card 2 (lineCardId=2)\
    \ | 690            | 20402\n    0                   1                   2    \
    \               3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Set ID = 260             |         Length = 20           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               1                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             345               |            10201              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               2                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             690               |            20402              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: A.5.  Variable-Length Information Element Examples
  contents:
  - 'A.5.  Variable-Length Information Element Examples

    '
- title: A.5.1.  Example of Variable-Length Information Element with Length
  contents:
  - "A.5.1.  Example of Variable-Length Information Element with Length\n        Inferior\
    \ to 255 Octets\n    0                   1                   2               \
    \    3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \     5       |          5 octet Information Element          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: A.5.2.  Example of Variable-Length Information Element with Length 255
  contents:
  - "A.5.2.  Example of Variable-Length Information Element with Length 255\n    \
    \    to 65535 Octets\n    0                   1                   2          \
    \         3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |      255      |             1000              |    IE ...     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                1000 octet Information Element                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                              ...                              :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             ... IE            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: References
  contents:
  - 'References

    '
- title: Normative References
  contents:
  - "Normative References\n   [RFC1305]       Mills, D., \"Network Time Protocol (Version\
    \ 3)\n                   Specification, Implementation and Analysis\", RFC\n \
    \                  1305, March 1992.\n   [RFC2119]       Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n                   Requirement Levels\", BCP 14,\
    \ RFC 2119, March 1997.\n   [RFC2434]       Narten, T. and H. Alvestrand, \"Guidelines\
    \ for Writing\n                   an IANA Considerations Section in RFCs\", BCP\
    \ 26, RFC\n                   2434, October 1998.\n   [RFC3280]       Housley,\
    \ R., Polk, W., Ford, W., and D. Solo,\n                   \"Internet X.509 Public\
    \ Key Infrastructure Certificate\n                   and Certificate Revocation\
    \ List (CRL) Profile\", RFC\n                   3280, April 2002.\n   [RFC3436]\
    \       Jungmaier, A., Rescorla, E., and M. Tuexen,\n                   \"Transport\
    \ Layer Security over Stream Control\n                   Transmission Protocol\"\
    , RFC 3436, December 2002.\n   [RFC3758]       Stewart, R., Ramalho, M., Xie,\
    \ Q., Tuexen, M., and P.\n                   Conrad, \"Stream Control Transmission\
    \ Protocol (SCTP)\n                   Partial Reliability Extension\", RFC 3758,\
    \ May 2004.\n   [RFC4346]       Dierks, T. and E. Rescorla, \"The Transport Layer\n\
    \                   Security (TLS) Protocol Version 1.1\", RFC 4346, April\n \
    \                  2006.\n   [RFC4347]       Rescorla, E. and N. Modadugu, \"\
    Datagram Transport\n                   Layer Security\", RFC 4347, April 2006.\n\
    \   [RFC3490]       Faltstrom, P., Hoffman, P., and A. Costello,\n           \
    \        \"Internationalizing Domain Names in Applications\n                 \
    \  (IDNA)\", RFC 3490, March 2003.\n   [RFC3492]       Costello, A., \"Punycode:\
    \ A Bootstring encoding of\n                   Unicode for Internationalized Domain\
    \ Names in\n                   Applications (IDNA)\", RFC 3492, March 2003.\n\
    \   [RFC4960]       Stewart, R., Ed., \"Stream Control Transmission\n        \
    \           Protocol\", RFC 4960, September 2007.\n   [RFC5102]       Quittek,\
    \ J., Bryant S., Claise, B., Aitken, P., and\n                   J. Meyer, \"\
    Information Model for IP Flow Information\n                   Export\", RFC 5102,\
    \ January 2008.\n   [TCP]           Postel, J., \"Transmission Control Protocol\"\
    , STD 7,\n                   RFC 793, September 1981.\n   [UDP]           Postel,\
    \ J., \"User Datagram Protocol\", STD 6, RFC 768,\n                   August 1980.\n"
- title: Informative References
  contents:
  - "Informative References\n   [IPFIX-ARCH]    Sadasivan, G., Brownlee, N., Claise,\
    \ B., and J.\n                   Quittek, \"Architecture Model for IP Flow Information\n\
    \                   Export\", Work in Progress, September 2006.\n   [IPFIX-AS]\
    \      Zseby, T., Boschi, E., Brownlee, N., and B. Claise,\n                 \
    \  \"IPFIX Applicability\", Work in Progress, June 2007.\n   [PEN]           IANA\
    \ Private Enterprise Numbers registry\n                   http://www.iana.org/assignments/enterprise-numbers.\n\
    \   [RFC1948]       Bellovin, S., \"Defending Against Sequence Number\n      \
    \             Attacks\", RFC 1948, May 1996.\n   [RFC2579]       McCloghrie, K.,\
    \ Perkins, D., and J. Schoenwaelder,\n                   \"Textual Conventions\
    \ for SMIv2\", STD 58, RFC 2579,\n                   April 1999.\n   [RFC3917]\
    \       Quittek, J., Zseby, T., Claise, B., and S. Zander,\n                 \
    \  \"Requirements for IP Flow Information Export\n                   (IPFIX)\"\
    , RFC 3917, October 2004.\n   [RFC3550]       Schulzrinne, H., Casner, S., Frederick,\
    \ R., and V.\n                   Jacobson, \"RTP: A Transport Protocol for Real-Time\n\
    \                   Applications\", STD 64, RFC 3550, July 2003.\n   [RFC3954]\
    \       Claise, B., Ed., \"Cisco Systems NetFlow Services\n                  \
    \ Export Version 9\", RFC 3954, October 2004.\n   [IEEE.754.1985] Institute of\
    \ Electrical and Electronics Engineers,\n                   \"Standard for Binary\
    \ Floating-Point Arithmetic\", IEEE\n                   Standard 754, August 1985.\n\
    \   [dtls-for-sctp] Tuexen, M. and E. Rescola, \"Datagram Transport Layer\n  \
    \                 Security for Stream Control Transmission Protocol\",\n     \
    \              Work in Progress, November 2007.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   We would like to thank the following persons: Ganesh Sadasivan\
    \ for\n   his significant contribution during the initial phases of the\n   protocol\
    \ specification; Juergen Quittek for the coordination job\n   within IPFIX and\
    \ PSAMP; Nevil Brownlee, Dave Plonka, Paul Aitken, and\n   Andrew Johnson for\
    \ the thorough reviews; Randall Stewart and Peter\n   Lei for their SCTP expertise\
    \ and contributions; Martin Djernaes for\n   the first essay on the SCTP section;\
    \ Michael Behringer and Eric\n   Vyncke for their advice and knowledge in security;\
    \ Michael Tuexen for\n   his help regarding the DTLS section; Elisa Boschi for\
    \ her\n   contribution regarding the improvement of SCTP sections; Mark\n   Fullmer,\
    \ Sebastian Zander, Jeff Meyer, Maurizio Molina, Carter\n   Bullard, Tal Givoly,\
    \ Lutz Mark, David Moore, Robert Lowe, Paul\n   Calato, and many more, for the\
    \ technical reviews and feedback.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Benoit Claise\n   Cisco Systems\n   De Kleetlaan 6a b1\n\
    \   1831 Diegem\n   Belgium\n   Phone: +32 2 704 5622\n   EMail: bclaise@cisco.com\n\
    \   Stewart Bryant\n   Cisco Systems, Inc.\n   250, Longwater,\n   Green Park,\n\
    \   Reading, RG2 6GB,\n   United Kingdom\n   Phone: +44 (0)20 8824-8828\n   EMail:\
    \ stbryant@cisco.com\n   Simon Leinen\n   SWITCH\n   Werdstrasse 2\n   P.O. Box\n\
    \   CH-8021 Zurich\n   Switzerland\n   Phone: +41 44 268 1536\n   EMail: simon.leinen@switch.ch\n\
    \   Thomas Dietz\n   NEC Europe Ltd.\n   NEC Laboratories Europe\n   Network Research\
    \ Division\n   Kurfuersten-Anlage 36\n   69115 Heidelberg\n   Germany\n   Phone:\
    \ +49 6221 4342-128\n   EMail: Thomas.Dietz@nw.neclab.eu\n   Brian H. Trammell\n\
    \   CERT Network Situational Awareness\n   Software Engineering Institute\n  \
    \ 4500 Fifth Avenue\n   Pittsburgh, PA 15213\n   United States\n   Phone: +1 412\
    \ 268 9748\n   EMail: bht@cert.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
