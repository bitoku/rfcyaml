- title: __initial_text__
  contents:
  - '                         Entity MIB (Version 2)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n\
    \   for use with network management protocols in the Internet community.\n   In\
    \ particular, it describes managed objects used for managing\n   multiple logical\
    \ and physical entities managed by a single SNMP\n   agent.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   2.12.4 entityGeneral Group ....................................\
    \   11\n   2.12.5 entityNotifications Group ..............................   11\n\
    \   2.13 Multiple Agents ..........................................   11\n   2.14\
    \ Changes Since RFC 2037 ...................................   11\n   2.14.1 Textual\
    \ Conventions ....................................   11\n   2.14.2 New entPhysicalTable\
    \ Objects ...........................   12\n   2.14.3 New entLogicalTable Objects\
    \ ............................   12\n   2.14.4 Bugfixes ...............................................\
    \   12\n   3 Definitions .................................................   13\n\
    \   4 Usage Examples ..............................................   38\n   4.1\
    \ Router/Bridge .............................................   38\n   4.2 Repeaters\
    \ .................................................   44\n   5 Intellectual Property\
    \ .......................................   51\n   6 Acknowledgements ............................................\
    \   51\n   7 References ..................................................   51\n\
    \   8 Security Considerations .....................................   53\n   9\
    \ Authors' Addresses ..........................................   55\n   10 Full\
    \ Copyright Statement ...................................   56\n"
- title: 1.  The SNMP Management Framework
  contents:
  - "1.  The SNMP Management Framework\n   The SNMP Management Framework presently\
    \ consists of five major\n   components:\n   o  An overall architecture, described\
    \ in RFC 2571 [RFC2571].\n   o  Mechanisms for describing and naming objects and\
    \ events for the\n      purpose of management. The first version of this Structure\
    \ of\n      Management Information (SMI) is called SMIv1 and described in STD\n\
    \      16, RFC 1155 [RFC1155], STD 16, RFC 1212 [RFC1212] and RFC 1215\n     \
    \ [RFC1215].  The second version, called SMIv2, is described in STD\n      58,\
    \ RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and STD 58, RFC\n      2580 [RFC2580].\n\
    \   o  Message protocols for transferring management information. The\n      first\
    \ version of the SNMP message protocol is called SNMPv1 and\n      described in\
    \ STD 15, RFC 1157 [RFC1157]. A second version of the\n      SNMP message protocol,\
    \ which is not an Internet standards track\n      protocol, is called SNMPv2c\
    \ and described in RFC 1901 [RFC1901]\n      and RFC 1906 [RFC1906]. The third\
    \ version of the message protocol\n      is called SNMPv3 and described in RFC\
    \ 1906 [RFC1906], RFC 2572\n      [RFC2572] and RFC 2574 [RFC2574].\n   o  Protocol\
    \ operations for accessing management information. The\n      first set of protocol\
    \ operations and associated PDU formats is\n      described in STD 15, RFC 1157\
    \ [RFC1157]. A second set of protocol\n      operations and associated PDU formats\
    \ is described in RFC 1905\n      [RFC1905].\n   o  A set of fundamental applications\
    \ described in RFC 2573 [RFC2573]\n      and the view-based access control mechanism\
    \ described in RFC 2575\n      [RFC2575].\n   A more detailed introduction to\
    \ the current SNMP Management Framework\n   can be found in RFC 2570 [RFC2570].\n\
    \   Managed objects are accessed via a virtual information store, termed\n   the\
    \ Management Information Base or MIB.  Objects in the MIB are\n   defined using\
    \ the mechanisms defined in the SMI.\n   This memo specifies a MIB module that\
    \ is compliant to the SMIv2. A\n   MIB conforming to the SMIv1 can be produced\
    \ through the appropriate\n   translations. The resulting translated MIB must\
    \ be semantically\n   equivalent, except where objects or events are omitted because\
    \ no\n   translation is possible (use of Counter64). Some machine readable\n \
    \  information in SMIv2 will be converted into textual descriptions in\n   SMIv1\
    \ during the translation process. However, this loss of machine\n   readable information\
    \ is not considered to change the semantics of the\n   MIB.\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   There is a need for a standardized way of representing a single\
    \ agent\n   which supports multiple instances of one MIB.  This is presently true\n\
    \   for at least 3 standard MIBs, and is likely to become true for more\n   and\
    \ more MIBs as time passes.  For example:\n      - multiple instances of a bridge\
    \ supported within a single device\n        having a single agent;\n      - multiple\
    \ repeaters supported by a single agent;\n      - multiple OSPF backbone areas,\
    \ each one operating as part of its\n        own Autonomous System, and each identified\
    \ by the same area-id\n        (e.g., 0.0.0.0), supported inside a single router\
    \ with one\n        agent.\n   The fact that it is a single agent in each of these\
    \ cases implies\n   there is some relationship which binds all of these entities\n\
    \   together.  Effectively, there is some \"overall\" physical entity which\n\
    \   houses the sum of the things managed by that one agent, i.e., there\n   are\
    \ multiple \"logical\" entities within a single physical entity.\n   Sometimes,\
    \ the overall physical entity contains multiple (smaller)\n   physical entities\
    \ and each logical entity is associated with a\n   particular physical entity.\
    \  Sometimes, the overall physical entity\n   is a \"compound\" of multiple physical\
    \ entities (e.g., a stack of\n   stackable hubs).\n   What is needed is a way\
    \ to determine exactly what logical entities\n   are managed by the agent (with\
    \ some version of SNMP), and thereby to\n   be able to communicate with the agent\
    \ about a particular logical\n   entity.  When different logical entities are\
    \ associated with\n   different physical entities within the overall physical\
    \ entity, it is\n   also useful to be able to use this information to distinguish\
    \ between\n   logical entities.\n   In these situations, there is no need for\
    \ varbinds for multiple\n   logical entities to be referenced in the same SNMP\
    \ message (although\n   that might be useful in the future).  Rather, it is sufficient,\
    \ and\n   in some situations preferable, to have the context/community in the\n\
    \   message identify the logical entity to which the varbinds apply.\n   Version\
    \ 2 of this MIB addresses new requirements that have emerged\n   since the publication\
    \ of the first Entity MIB (RFC 2037 [RFC2037]).\n   There is a need for a standardized\
    \ way of providing non-volatile,\n   administratively assigned identifiers for\
    \ physical components\n   represented with the Entity MIB.  There is also a need\
    \ to align the\n   Entity MIB with the SNMPv3 administrative framework (RFC 2571\n\
    \   [RFC2571]). Implementation experience has shown that additional\n   physical\
    \ component attributes are also desirable.\n"
- title: 2.1.  Terms
  contents:
  - "2.1.  Terms\n   Some new terms are used throughout this document:\n      - Naming\
    \ Scope\n        A \"naming scope\" represents the set of information that may\
    \ be\n        potentially accessed through a single SNMP operation. All\n    \
    \    instances within the naming scope share the same unique\n        identifier\
    \ space.  For SNMPv1, a naming scope is identified by\n        the value of the\
    \ associated 'entLogicalCommunity' instance.  For\n        SNMPv3, the term 'context'\
    \ is used instead of 'naming scope'.\n        The complete definition of an SNMP\
    \ context can be found in\n        section 3.3.1 of RFC 2571 [RFC2571].\n    \
    \  - Multi-Scoped Object\n        A MIB object, for which identical instance values\
    \ identify\n        different managed information in different naming scopes,\
    \ is\n        called a \"multi-scoped\" MIB object.\n      - Single-Scoped Object\n\
    \        A MIB object, for which identical instance values identify the\n    \
    \    same managed information in different naming scopes, is called a\n      \
    \  \"single-scoped\" MIB object.\n      - Logical Entity\n        A managed system\
    \ contains one or more logical entities, each\n        represented by at most\
    \ one instantiation of each of a particular\n        set of MIB objects.  A set\
    \ of management functions is associated\n        with each logical entity. Examples\
    \ of logical entities include\n        routers, bridges, print-servers, etc.\n\
    \      - Physical Entity\n        A \"physical entity\" or \"physical component\"\
    \ represents an\n        identifiable physical resource within a managed system.\
    \ Zero or\n        more logical entities may utilize a physical resource at any\n\
    \        given time. It is an implementation-specific manner as to which\n   \
    \     physical components are represented by an agent in the\n        EntPhysicalTable.\
    \  Typically, physical resources (e.g.,\n        communications ports, backplanes,\
    \ sensors, daughter-cards, power\n        supplies, the overall chassis) which\
    \ can be managed via\n        functions associated with one or more logical entities\
    \ are\n        included in the MIB.\n      - Containment Tree\n        Each physical\
    \ component may be modeled as 'contained' within\n        another physical component.\
    \ A \"containment-tree\" is the\n        conceptual sequence of entPhysicalIndex\
    \ values which uniquely\n        specifies the exact physical location of a physical\
    \ component\n        within the managed system.  It is generated by 'following\
    \ and\n        recording' each 'entPhysicalContainedIn' instance 'up the tree\n\
    \        towards the root', until a value of zero indicating no further\n    \
    \    containment is found.\n"
- title: 2.2.  Relationship to Community Strings
  contents:
  - "2.2.  Relationship to Community Strings\n   For community-based SNMP, distinguishing\
    \ between different logical\n   entities is one (but not the only) purpose of\
    \ the community string\n   (STD 15, RFC 1157 [RFC1157]).  This is accommodated\
    \ by representing\n   each community string as a logical entity.\n   Note that\
    \ different logical entities may share the same naming scope\n   (and therefore\
    \ the same values of entLogicalCommunity). This is\n   possible, providing they\
    \ have no need for the same instance of a MIB\n   object to represent different\
    \ managed information.\n"
- title: 2.3.  Relationship to SNMP Contexts
  contents:
  - "2.3.  Relationship to SNMP Contexts\n   Version 2 of the Entity MIB contains\
    \ support for associating SNMPv3\n   contexts with logical entities. Two new MIB\
    \ objects, defining an\n   SnmpEngineID and ContextName pair, are used together\
    \ to identify an\n   SNMP context associated with a logical entity. This context\
    \ can be\n   used (in conjunction with the entLogicalTAddress and\n   entLogicalTDomain\
    \ MIB objects) to send SNMPv3 messages on behalf of a\n   particular logical entity.\n"
- title: 2.4.  Relationship to Proxy Mechanisms
  contents:
  - "2.4.  Relationship to Proxy Mechanisms\n   The Entity MIB is designed to allow\
    \ functional component discovery.\n   The administrative relationships between\
    \ different logical entities\n   are not visible in any Entity MIB tables. An\
    \ NMS cannot determine\n   whether MIB instances in different naming scopes are\
    \ realized locally\n   or remotely (e.g., via some proxy mechanism) by examining\
    \ any\n   particular Entity MIB objects.\n   The management of administrative\
    \ framework functions is not an\n   explicit goal of the Entity MIB WG at this\
    \ time. This new area of\n   functionality may be revisited after some operational\
    \ experience with\n   the Entity MIB is gained.\n   Note that for community-based\
    \ versions of SNMP, a network\n   administrator will likely be able to associate\
    \ community strings with\n   naming scopes with proprietary mechanisms, as a matter\
    \ of\n   configuration.  There are no mechanisms for managing naming scopes\n\
    \   defined in this MIB.\n"
- title: 2.5.  Relationship to a Chassis MIB
  contents:
  - "2.5.  Relationship to a Chassis MIB\n   Some readers may recall that a previous\
    \ IETF working group attempted\n   to define a Chassis MIB.  No consensus was\
    \ reached by that working\n   group, possibly because its scope was too broad.\
    \  As such, it is not\n   the purpose of this MIB to be a \"Chassis MIB replacement\"\
    , nor is it\n   within the scope of this MIB to contain all the information which\n\
    \   might be necessary to manage a \"chassis\".  On the other hand, the\n   entities\
    \ represented by an implementation of this MIB might well be\n   contained in\
    \ a chassis.\n"
- title: 2.6.  Relationship to the Interfaces MIB
  contents:
  - "2.6.  Relationship to the Interfaces MIB\n   The Entity MIB contains a mapping\
    \ table identifying physical\n   components that have 'external values' (e.g.,\
    \ ifIndex) associated\n   with them within a given naming scope.  This table can\
    \ be used to\n   identify the physical location of each interface in the ifTable\
    \ (RFC\n   2233 [RFC2233]).  Since ifIndex values in different contexts are not\n\
    \   related to one another, the interface to physical component\n   associations\
    \ are relative to the same logical entity within the\n   agent.\n   The Entity\
    \ MIB also contains 'entPhysicalName' and 'entPhysicalAlias'\n   objects, which\
    \ approximate the semantics of the 'ifName' and '\n   ifAlias' objects (respectively)\
    \ from the Interfaces MIB [RFC2233],\n   for all types of physical components.\n"
- title: 2.7.  Relationship to the Other MIBs
  contents:
  - "2.7.  Relationship to the Other MIBs\n   The Entity MIB contains a mapping table\
    \ identifying physical\n   components that have identifiers from other standard\
    \ MIBs associated\n   with them.  For example, this table can be used along with\
    \ the\n   physical mapping table to identify the physical location of each\n \
    \  repeater port in the rptrPortTable, or each interface in the ifTable.\n"
- title: 2.8.  Relationship to Naming Scopes
  contents:
  - "2.8.  Relationship to Naming Scopes\n   There is some question as to which MIB\
    \ objects may be returned within\n   a given naming scope. MIB objects which are\
    \ not multi-scoped within a\n   managed system are likely to ignore context information\
    \ in\n   implementation. In such a case, it is likely such objects will be\n \
    \  returned in all naming scopes (e.g., not just the 'default' naming\n   scope\
    \ or the SNMPv3 default context).\n   For example, a community string used to\
    \ access the management\n   information for logical device 'bridge2' may allow\
    \ access to all the\n   non-bridge related objects in the 'default' naming scope,\
    \ as well as\n   a second instance of the Bridge MIB (RFC 1493 [RFC1493]).\n \
    \  It is an implementation-specific matter as to the isolation of\n   single-scoped\
    \ MIB objects by the agent. An agent may wish to limit\n   the objects returned\
    \ in a particular naming scope to just the multi-\n   scoped objects in that naming\
    \ scope (e.g., system group and the\n   Bridge MIB).  In this case, all single-scoped\
    \ management information\n   would belong to a common naming scope (e.g., 'default'),\
    \ which itself\n   may contain some multi-scoped objects (e.g., system group).\n"
- title: 2.9.  Multiple Instances of the Entity MIB
  contents:
  - "2.9.  Multiple Instances of the Entity MIB\n   It is possible that more than\
    \ one agent exists in a managed system,\n   and in such cases, multiple instances\
    \ of the Entity MIB (representing\n   the same managed objects) may be available\
    \ to an NMS.\n   In order to reduce complexity for agent implementation, multiple\n\
    \   instances of the Entity MIB are not required to be equivalent or even\n  \
    \ consistent. An NMS may be able to 'align' instances returned by\n   different\
    \ agents by examining the columns of each table, but vendor-\n   specific identifiers\
    \ and (especially) index values are likely to be\n   different. Each agent may\
    \ be managing different subsets of the entire\n   chassis as well.\n   When all\
    \ of a physically-modular device is represented by a single\n   agent, the entry\
    \ for which entPhysicalContainedIn has the value zero\n   would likely have 'chassis'\
    \ as the value of its entPhysicalClass;\n   alternatively, for an agent on a module\
    \ where the agent represents\n   only the physical entities on that module (not\
    \ those on other\n   modules), the entry for which entPhysicalContainedIn has\
    \ the value\n   zero would likely have 'module' as the value of its entPhysicalClass.\n\
    \   An agent implementation of the entLogicalTable is not required to\n   contain\
    \ information about logical entities managed primarily by other\n   agents. That\
    \ is, the entLogicalTAddress and entLogicalTDomain objects\n   in the entLogicalTable\
    \ are provided to support an historical\n   multiplexing mechanism, not to identify\
    \ other SNMP agents.\n   Note that the Entity MIB is a single-scoped MIB, in the\
    \ event an\n   agent represents the MIB in different naming scopes.\n"
- title: 2.10.  Re-Configuration of Entities
  contents:
  - "2.10.  Re-Configuration of Entities\n   Most of the MIB objects defined in this\
    \ MIB have at most a read-only\n   MAX-ACCESS clause.  This is a conscious decision\
    \ by the working group\n   to limit this MIB's scope.  The second version of the\
    \ Entity MIB\n   allows a network administrator to configure some common attributes\
    \ of\n   physical components.\n"
- title: 2.11.  Textual Convention Change
  contents:
  - "2.11.  Textual Convention Change\n   Version 1 of the Entity MIB contains three\
    \ MIB objects defined with\n   the (now obsolete) DisplayString textual convention.\
    \  In version 2 of\n   the Entity MIB, the syntax for these objects has been updated\
    \ to use\n   the (now preferred) SnmpAdminString textual convention.\n   The working\
    \ group realizes that this change is not strictly supported\n   by SMIv2.  In\
    \ our judgment, the alternative of deprecating the old\n   objects and defining\
    \ new objects would have a more adverse impact on\n   backward compatibility and\
    \ interoperability, given the particular\n   semantics of these objects.\n"
- title: 2.12.  MIB Structure
  contents:
  - "2.12.  MIB Structure\n   The Entity MIB contains five groups of MIB objects:\n\
    \      - entityPhysical group\n        Describes the physical entities managed\
    \ by a single agent.\n      - entityLogical group\n        Describes the logical\
    \ entities managed by a single agent.\n      - entityMapping group\n        Describes\
    \ the associations between the physical entities,\n        logical entities, interfaces,\
    \ and non-interface ports managed by\n        a single agent.\n      - entityGeneral\
    \ group\n        Describes general system attributes shared by potentially all\n\
    \        types of entities managed by a single agent.\n      - entityNotifications\
    \ group\n        Contains status indication notifications.\n"
- title: 2.12.1.  entityPhysical Group
  contents:
  - "2.12.1.  entityPhysical Group\n   This group contains a single table to identify\
    \ physical system\n   components, called the entPhysicalTable.\n   The entPhysicalTable\
    \ contains one row per physical entity, and must\n   always contain at least one\
    \ row for an \"overall\" physical entity,\n   which should have an entPhysicalClass\
    \ value of 'stack(11)', '\n   chassis(3)' or 'module(9)'.\n   Each row is indexed\
    \ by an arbitrary, small integer, and contains a\n   description and type of the\
    \ physical entity.  It also optionally\n   contains the index number of another\
    \ entPhysicalEntry indicating a\n   containment relationship between the two.\n\
    \   Version 2 of the Entity MIB provides additional MIB objects for each\n   physical\
    \ entity. Some common read-only attributes have been added, as\n   well as three\
    \ writable string objects.\n      - entPhysicalAlias\n        This string can\
    \ be used by an NMS as a non-volatile identifier\n        for the physical component.\
    \ Maintaining a non-volatile string\n        for every physical component represented\
    \ in the entPhysicalTable\n        can be costly and unnecessary.  An agent may\
    \ algorithmically\n        generate 'entPhysicalAlias' strings for particular\
    \ entries\n        (e.g., based on the entPhysicalClass value).\n      - entPhysicalAssetID\n\
    \        This string is provided to store a user-specific asset\n        identifier\
    \ for removable physical components.  In order to\n        reduce the non-volatile\
    \ storage needed by a particular agent, a\n        network administrator should\
    \ only assign asset identifiers to\n        physical entities which are field-replaceable\
    \ (i.e., not\n        permanently contained within another physical entity).\n\
    \      - entPhysicalSerialNum\n        This string is provided to store a vendor-specific\
    \ serial number\n        string for physical components.  This is a writable object\
    \ in\n        case an agent cannot identify the serial numbers of all\n      \
    \  installed physical entities, and a network administrator wishes\n        to\
    \ configure the non-volatile serial number strings manually\n        (via an NMS\
    \ application).\n"
- title: 2.12.2.  entityLogical Group
  contents:
  - "2.12.2.  entityLogical Group\n   This group contains a single table to identify\
    \ logical entities,\n   called the entLogicalTable.\n   The entLogicalTable contains\
    \ one row per logical entity.  Each row is\n   indexed by an arbitrary, small\
    \ integer and contains a name,\n   description, and type of the logical entity.\
    \ It also contains\n   information to allow access to the MIB information for\
    \ the logical\n   entity. This includes SNMP versions that use a community name\
    \ (with\n   some form of implied context representation) and SNMP versions that\n\
    \   use the SNMP ARCH [RFC2571] method of context identification.\n   If a agent\
    \ represents multiple logical entities with this MIB, then\n   this group must\
    \ be implemented for all logical entities known to the\n   agent.\n   If an agent\
    \ represents a single logical entity, or multiple logical\n   entities within\
    \ a single naming scope, then implementation of this\n   group may be omitted\
    \ by the agent.\n"
- title: 2.12.3.  entityMapping Group
  contents:
  - "2.12.3.  entityMapping Group\n   This group contains three tables to identify\
    \ associations between\n   different system components.\n   The entLPMappingTable\
    \ contains mappings between entLogicalIndex\n   values (logical entities) and\
    \ entPhysicalIndex values (the physical\n   components supporting that entity).\
    \ A logical entity can map to more\n   than one physical component, and more than\
    \ one logical entity can map\n   to (share) the same physical component.  If an\
    \ agent represents a\n   single logical entity, or multiple logical entities within\
    \ a single\n   naming scope, then implementation of this table may be omitted\
    \ by the\n   agent.\n   The entAliasMappingTable contains mappings between entLogicalIndex,\n\
    \   entPhysicalIndex pairs and 'alias' object identifier values.  This\n   allows\
    \ resources managed with other MIBs (e.g., repeater ports,\n   bridge ports, physical\
    \ and logical interfaces) to be identified in\n   the physical entity hierarchy.\
    \ Note that each alias identifier is\n   only relevant in a particular naming\
    \ scope.  If an agent represents a\n   single logical entity, or multiple logical\
    \ entities within a single\n   naming scope, then implementation of this table\
    \ may be omitted by the\n   agent.\n   The entPhysicalContainsTable contains simple\
    \ mappings between\n   'entPhysicalContainedIn' values for each container/'containee'\n\
    \   relationship in the managed system. The indexing of this table allows\n  \
    \ an NMS to quickly discover the 'entPhysicalIndex' values for all\n   children\
    \ of a given physical entity.\n"
- title: 2.12.4.  entityGeneral Group
  contents:
  - "2.12.4.  entityGeneral Group\n   This group contains general information relating\
    \ to the other object\n   groups.\n   At this time, the entGeneral group contains\
    \ a single scalar object\n   (entLastChangeTime), which represents the value of\
    \ sysUptime when any\n   part of the Entity MIB configuration last changed.\n"
- title: 2.12.5.  entityNotifications Group
  contents:
  - "2.12.5.  entityNotifications Group\n   This group contains notification definitions\
    \ relating to the overall\n   status of the Entity MIB instantiation.\n"
- title: 2.13.  Multiple Agents
  contents:
  - "2.13.  Multiple Agents\n   Even though a primary motivation for this MIB is to\
    \ represent the\n   multiple logical entities supported by a single agent, it\
    \ is also\n   possible to use it to represent multiple logical entities supported\n\
    \   by multiple agents (in the same \"overall\" physical entity).  Indeed,\n \
    \  it is implicit in the SNMP architecture, that the number of agents is\n   transparent\
    \ to a network management station.\n   However, there is no agreement at this\
    \ time as to the degree of\n   cooperation which should be expected for agent\
    \ implementations.\n   Therefore, multiple agents within the same managed system\
    \ are free to\n   implement the Entity MIB independently.  (Refer the section\
    \ on\n   \"Multiple Instances of the Entity MIB\" for more details).\n"
- title: 2.14.  Changes Since RFC 2037
  contents:
  - '2.14.  Changes Since RFC 2037

    '
- title: 2.14.1.  Textual Conventions
  contents:
  - "2.14.1.  Textual Conventions\n   The PhysicalClass TC text has been clarified,\
    \ and a new enumeration\n   to support 'stackable' components has been added.\
    \  The\n   SnmpEngineIdOrNone TC has been added to support SNMPv3.\n"
- title: 2.14.2.  New entPhysicalTable Objects
  contents:
  - "2.14.2.  New entPhysicalTable Objects\n   The entPhysicalHardwareRev, entPhysicalFirmwareRev,\
    \ and\n   entPhysicalSoftwareRev objects have been added for revision\n   identification.\n\
    \   The entPhysicalSerialNum, entPhysicalMfgName, entPhysicalModelName,\n   and\
    \ entPhysicalIsFru objects have been added for better vendor\n   identification\
    \ for physical components.  The entPhysicalSerialNum\n   object can be set by\
    \ a management station in the event the agent\n   cannot identify this information.\n\
    \   The entPhysicalAlias and entPhysicalAssetID objects have been added\n   for\
    \ better user component identification. These objects are intended\n   to be set\
    \ by a management station and preserved by the agent across\n   restarts.\n"
- title: 2.14.3.  New entLogicalTable Objects
  contents:
  - "2.14.3.  New entLogicalTable Objects\n   The entLogicalContextEngineID and entLogicalContextName\
    \ objects have\n   been added to provide an SNMP context for SNMPv3 access on\
    \ behalf of\n   a logical entity.\n"
- title: 2.14.4.  Bugfixes
  contents:
  - "2.14.4.  Bugfixes\n   A bug was fixed in the entLogicalCommunity object. The\
    \ subrange was\n   incorrect (1..255) and is now (0..255).  The description clause\
    \ has\n   also been clarified.  This object is now deprecated.\n   The entLastChangeTime\
    \ object description has been changed to\n   generalize the events which cause\
    \ an update to the last change\n   timestamp.\n   The syntax was changed from\
    \ DisplayString to SnmpAdminString for the\n   entPhysicalDescr, entPhysicalName,\
    \ and entLogicalDescr objects.\n"
- title: 3.  Definitions
  contents:
  - '3.  Definitions

    '
- title: ENTITY-MIB DEFINITIONS ::= BEGIN
  contents:
  - 'ENTITY-MIB DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n    MODULE-IDENTITY, OBJECT-TYPE, mib-2, NOTIFICATION-TYPE\n       \
    \ FROM SNMPv2-SMI\n    TDomain, TAddress, TEXTUAL-CONVENTION,\n    AutonomousType,\
    \ RowPointer, TimeStamp, TruthValue\n        FROM SNMPv2-TC\n    MODULE-COMPLIANCE,\
    \ OBJECT-GROUP, NOTIFICATION-GROUP\n        FROM SNMPv2-CONF\n    SnmpAdminString\n\
    \        FROM SNMP-FRAMEWORK-MIB;\n"
- title: entityMIB MODULE-IDENTITY
  contents:
  - "entityMIB MODULE-IDENTITY\n    LAST-UPDATED \"9912070000Z\" -- December 7, 1999\n\
    \    ORGANIZATION \"IETF ENTMIB Working Group\"\n    CONTACT-INFO\n          \
    \  \"        WG E-mail: entmib@cisco.com\n                  Subscribe: majordomo@cisco.com\n\
    \                         msg body: subscribe entmib\n                     Keith\
    \ McCloghrie\n                     ENTMIB Working Group Chair\n              \
    \       Cisco Systems Inc.\n                     170 West Tasman Drive\n     \
    \                San Jose, CA 95134\n                     +1 408-526-5260\n  \
    \                   kzm@cisco.com\n                     Andy Bierman\n       \
    \              ENTMIB Working Group Editor\n                     Cisco Systems\
    \ Inc.\n                     170 West Tasman Drive\n                     San Jose,\
    \ CA 95134\n                     +1 408-527-3711\n                     abierman@cisco.com\"\
    \n    DESCRIPTION\n            \"The MIB module for representing multiple logical\n\
    \            entities supported by a single SNMP agent.\"\n    REVISION      \
    \  \"9912070000Z\"\n    DESCRIPTION\n            \"Initial Version of Entity MIB\
    \ (Version 2).\n             This revision obsoletes RFC 2037.\n             This\
    \ version published as RFC 2737.\"\n    REVISION        \"9610310000Z\"\n    DESCRIPTION\n\
    \            \"Initial version (version 1), published as\n             RFC 2037.\"\
    \n    ::= { mib-2 47 }\n"
- title: entityMIBObjects OBJECT IDENTIFIER ::= { entityMIB 1 }
  contents:
  - 'entityMIBObjects OBJECT IDENTIFIER ::= { entityMIB 1 }

    '
- title: -- MIB contains four groups
  contents:
  - '-- MIB contains four groups

    '
- title: entityPhysical OBJECT IDENTIFIER ::= { entityMIBObjects 1 }
  contents:
  - 'entityPhysical OBJECT IDENTIFIER ::= { entityMIBObjects 1 }

    '
- title: entityLogical  OBJECT IDENTIFIER ::= { entityMIBObjects 2 }
  contents:
  - 'entityLogical  OBJECT IDENTIFIER ::= { entityMIBObjects 2 }

    '
- title: entityMapping  OBJECT IDENTIFIER ::= { entityMIBObjects 3 }
  contents:
  - 'entityMapping  OBJECT IDENTIFIER ::= { entityMIBObjects 3 }

    '
- title: entityGeneral  OBJECT IDENTIFIER ::= { entityMIBObjects 4 }
  contents:
  - 'entityGeneral  OBJECT IDENTIFIER ::= { entityMIBObjects 4 }

    '
- title: -- Textual Conventions
  contents:
  - '-- Textual Conventions

    '
- title: PhysicalIndex ::= TEXTUAL-CONVENTION
  contents:
  - "PhysicalIndex ::= TEXTUAL-CONVENTION\n    STATUS            current\n    DESCRIPTION\n\
    \            \"An arbitrary value which uniquely identifies the physical\n   \
    \         entity.  The value should be a small positive integer; index\n     \
    \       values for different physical entities are not necessarily\n         \
    \   contiguous.\"\n    SYNTAX INTEGER (1..2147483647)\n"
- title: PhysicalClass ::= TEXTUAL-CONVENTION
  contents:
  - "PhysicalClass ::= TEXTUAL-CONVENTION\n    STATUS            current\n    DESCRIPTION\n\
    \            \"An enumerated value which provides an indication of the\n     \
    \       general hardware type of a particular physical entity.\n            There\
    \ are no restrictions as to the number of\n            entPhysicalEntries of each\
    \ entPhysicalClass, which must be\n            instantiated by an agent.\n   \
    \         The enumeration 'other' is applicable if the physical entity\n     \
    \       class is known, but does not match any of the supported\n            values.\n\
    \            The enumeration 'unknown' is applicable if the physical\n       \
    \     entity class is unknown to the agent.\n            The enumeration 'chassis'\
    \ is applicable if the physical\n            entity class is an overall container\
    \ for networking\n            equipment.  Any class of physical entity except\
    \ a stack may\n            be contained within a chassis, and a chassis may only\
    \ be\n            contained within a stack.\n            The enumeration 'backplane'\
    \ is applicable if the physical\n            entity class is some sort of device\
    \ for aggregating and\n            forwarding networking traffic, such as a shared\
    \ backplane in\n            a modular ethernet switch.  Note that an agent may\
    \ model a\n            backplane as a single physical entity, which is actually\n\
    \            implemented as multiple discrete physical components (within\n  \
    \          a chassis or stack).\n            The enumeration 'container' is applicable\
    \ if the physical\n            entity class is capable of containing one or more\
    \ removable\n            physical entities, possibly of different types. For example,\n\
    \            each (empty or full) slot in a chassis will be modeled as a\n   \
    \         container. Note that all removable physical entities should\n      \
    \      be modeled within a container entity, such as field-\n            replaceable\
    \ modules, fans, or power supplies.  Note that all\n            known containers\
    \ should be modeled by the agent, including\n            empty containers.\n \
    \           The enumeration 'powerSupply' is applicable if the physical\n    \
    \        entity class is a power-supplying component.\n            The enumeration\
    \ 'fan' is applicable if the physical entity\n            class is a fan or other\
    \ heat-reduction component.\n            The enumeration 'sensor' is applicable\
    \ if the physical\n            entity class is some sort of sensor, such as a\
    \ temperature\n            sensor within a router chassis.\n            The enumeration\
    \ 'module' is applicable if the physical\n            entity class is some sort\
    \ of self-contained sub-system.  If\n            it is removable, then it should\
    \ be modeled within a\n            container entity, otherwise it should be modeled\
    \ directly\n            within another physical entity (e.g., a chassis or another\n\
    \            module).\n            The enumeration 'port' is applicable if the\
    \ physical entity\n            class is some sort of networking port, capable\
    \ of receiving\n            and/or transmitting networking traffic.\n        \
    \    The enumeration 'stack' is applicable if the physical entity\n          \
    \  class is some sort of super-container (possibly virtual),\n            intended\
    \ to group together multiple chassis entities.  A\n            stack may be realized\
    \ by a 'virtual' cable, a real\n            interconnect cable, attached to multiple\
    \ chassis, or may in\n            fact be comprised of multiple interconnect cables.\
    \ A stack\n            should not be modeled within any other physical entities,\n\
    \            but a stack may be contained within another stack.  Only\n      \
    \      chassis entities should be contained within a stack.\"\n    SYNTAX    \
    \  INTEGER  {\n       other(1),\n       unknown(2),\n       chassis(3),\n    \
    \   backplane(4),\n       container(5),     -- e.g., chassis slot or daughter-card\
    \ holder\n       powerSupply(6),\n       fan(7),\n       sensor(8),\n       module(9),\
    \        -- e.g., plug-in card or daughter-card\n       port(10),\n       stack(11)\
    \         -- e.g., stack of multiple chassis entities\n    }\n"
- title: SnmpEngineIdOrNone ::= TEXTUAL-CONVENTION
  contents:
  - "SnmpEngineIdOrNone ::= TEXTUAL-CONVENTION\n    STATUS            current\n  \
    \  DESCRIPTION\n            \"A specially formatted SnmpEngineID string for use\
    \ with the\n            Entity MIB.\n            If an instance of an object of\
    \ SYNTAX SnmpEngineIdOrNone has\n            a non-zero length, then the object\
    \ encoding and semantics\n            are defined by the SnmpEngineID textual\
    \ convention (see RFC\n            2571 [RFC2571]).\n            If an instance\
    \ of an object of SYNTAX SnmpEngineIdOrNone\n            contains a zero-length\
    \ string, then no appropriate\n            SnmpEngineID is associated with the\
    \ logical entity (i.e.,\n            SNMPv3 not supported).\"\n    SYNTAX OCTET\
    \ STRING (SIZE(0..32)) -- empty string or SnmpEngineID\n"
- title: --           The Physical Entity Table
  contents:
  - '--           The Physical Entity Table

    '
- title: entPhysicalTable OBJECT-TYPE
  contents:
  - "entPhysicalTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF EntPhysicalEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"This table contains one row per physical entity.  There is\n    \
    \        always at least one row for an 'overall' physical entity.\"\n    ::=\
    \ { entityPhysical 1 }\n"
- title: entPhysicalEntry       OBJECT-TYPE
  contents:
  - "entPhysicalEntry       OBJECT-TYPE\n    SYNTAX      EntPhysicalEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n            \"Information\
    \ about a particular physical entity.\n            Each entry provides objects\
    \ (entPhysicalDescr,\n            entPhysicalVendorType, and entPhysicalClass)\
    \ to help an NMS\n            identify and characterize the entry, and objects\n\
    \            (entPhysicalContainedIn and entPhysicalParentRelPos) to help\n  \
    \          an NMS relate the particular entry to other entries in this\n     \
    \       table.\"\n    INDEX   { entPhysicalIndex }\n    ::= { entPhysicalTable\
    \ 1 }\n"
- title: EntPhysicalEntry ::= SEQUENCE {
  contents:
  - "EntPhysicalEntry ::= SEQUENCE {\n      entPhysicalIndex          PhysicalIndex,\n\
    \      entPhysicalDescr          SnmpAdminString,\n      entPhysicalVendorType\
    \     AutonomousType,\n      entPhysicalContainedIn    INTEGER,\n      entPhysicalClass\
    \          PhysicalClass,\n      entPhysicalParentRelPos   INTEGER,\n      entPhysicalName\
    \           SnmpAdminString,\n      entPhysicalHardwareRev    SnmpAdminString,\n\
    \      entPhysicalFirmwareRev    SnmpAdminString,\n      entPhysicalSoftwareRev\
    \    SnmpAdminString,\n      entPhysicalSerialNum      SnmpAdminString,\n    \
    \  entPhysicalMfgName        SnmpAdminString,\n      entPhysicalModelName    \
    \  SnmpAdminString,\n      entPhysicalAlias          SnmpAdminString,\n      entPhysicalAssetID\
    \        SnmpAdminString,\n      entPhysicalIsFRU          TruthValue\n"
- title: '}'
  contents:
  - '}

    '
- title: entPhysicalIndex    OBJECT-TYPE
  contents:
  - "entPhysicalIndex    OBJECT-TYPE\n    SYNTAX      PhysicalIndex\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n            \"The\
    \ index for this entry.\"\n    ::= { entPhysicalEntry 1 }\n"
- title: entPhysicalDescr OBJECT-TYPE
  contents:
  - "entPhysicalDescr OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"A textual\
    \ description of physical entity.  This object\n            should contain a string\
    \ which identifies the manufacturer's\n            name for the physical entity,\
    \ and should be set to a\n            distinct value for each version or model\
    \ of the physical\n            entity. \"\n    ::= { entPhysicalEntry 2 }\n"
- title: entPhysicalVendorType OBJECT-TYPE
  contents:
  - "entPhysicalVendorType OBJECT-TYPE\n    SYNTAX      AutonomousType\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"An indication\
    \ of the vendor-specific hardware type of the\n            physical entity.  Note\
    \ that this is different from the\n            definition of MIB-II's sysObjectID.\n\
    \            An agent should set this object to a enterprise-specific\n      \
    \      registration identifier value indicating the specific\n            equipment\
    \ type in detail.  The associated instance of\n            entPhysicalClass is\
    \ used to indicate the general type of\n            hardware device.\n       \
    \     If no vendor-specific registration identifier exists for\n            this\
    \ physical entity, or the value is unknown by this agent,\n            then the\
    \ value { 0 0 } is returned.\"\n    ::= { entPhysicalEntry 3 }\n"
- title: entPhysicalContainedIn OBJECT-TYPE
  contents:
  - "entPhysicalContainedIn OBJECT-TYPE\n    SYNTAX      INTEGER (0..2147483647)\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \     \"The value of entPhysicalIndex for the physical entity which\n        \
    \    'contains' this physical entity.  A value of zero indicates\n           \
    \ this physical entity is not contained in any other physical\n            entity.\
    \  Note that the set of 'containment' relationships\n            define a strict\
    \ hierarchy; that is, recursion is not\n            allowed.\n            In the\
    \ event a physical entity is contained by more than one\n            physical\
    \ entity (e.g., double-wide modules), this object\n            should identify\
    \ the containing entity with the lowest value\n            of entPhysicalIndex.\"\
    \n    ::= { entPhysicalEntry 4 }\n"
- title: entPhysicalClass OBJECT-TYPE
  contents:
  - "entPhysicalClass OBJECT-TYPE\n    SYNTAX      PhysicalClass\n    MAX-ACCESS \
    \ read-only\n    STATUS      current\n    DESCRIPTION\n            \"An indication\
    \ of the general hardware type of the physical\n            entity.\n        \
    \    An agent should set this object to the standard enumeration\n           \
    \ value which most accurately indicates the general class of\n            the\
    \ physical entity, or the primary class if there is more\n            than one.\n\
    \            If no appropriate standard registration identifier exists\n     \
    \       for this physical entity, then the value 'other(1)' is\n            returned.\
    \ If the value is unknown by this agent, then the\n            value 'unknown(2)'\
    \ is returned.\"\n    ::= { entPhysicalEntry 5 }\n"
- title: entPhysicalParentRelPos OBJECT-TYPE
  contents:
  - "entPhysicalParentRelPos OBJECT-TYPE\n    SYNTAX      INTEGER (-1..2147483647)\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \     \"An indication of the relative position of this 'child'\n            component\
    \ among all its 'sibling' components. Sibling\n            components are defined\
    \ as entPhysicalEntries which share the\n            same instance values of each\
    \ of the entPhysicalContainedIn\n            and entPhysicalClass objects.\n \
    \           An NMS can use this object to identify the relative ordering\n   \
    \         for all sibling components of a particular parent\n            (identified\
    \ by the entPhysicalContainedIn instance in each\n            sibling entry).\n\
    \            This value should match any external labeling of the\n          \
    \  physical component if possible. For example, for a container\n            (e.g.,\
    \ card slot) labeled as 'slot #3',\n            entPhysicalParentRelPos should\
    \ have the value '3'.  Note\n            that the entPhysicalEntry for the module\
    \ plugged in slot 3\n            should have an entPhysicalParentRelPos value\
    \ of '1'.\n            If the physical position of this component does not match\n\
    \            any external numbering or clearly visible ordering, then\n      \
    \      user documentation or other external reference material\n            should\
    \ be used to determine the parent-relative position. If\n            this is not\
    \ possible, then the the agent should assign a\n            consistent (but possibly\
    \ arbitrary) ordering to a given set\n            of 'sibling' components, perhaps\
    \ based on internal\n            representation of the components.\n         \
    \   If the agent cannot determine the parent-relative position\n            for\
    \ some reason, or if the associated value of\n            entPhysicalContainedIn\
    \ is '0', then the value '-1' is\n            returned. Otherwise a non-negative\
    \ integer is returned,\n            indicating the parent-relative position of\
    \ this physical\n            entity.\n            Parent-relative ordering normally\
    \ starts from '1' and\n            continues to 'N', where 'N' represents the\
    \ highest\n            positioned child entity.  However, if the physical entities\n\
    \            (e.g., slots) are labeled from a starting position of zero,\n   \
    \         then the first sibling should be associated with a\n            entPhysicalParentRelPos\
    \ value of '0'.  Note that this\n            ordering may be sparse or dense,\
    \ depending on agent\n            implementation.\n            The actual values\
    \ returned are not globally meaningful, as\n            each 'parent' component\
    \ may use different numbering\n            algorithms. The ordering is only meaningful\
    \ among siblings\n            of the same parent component.\n            The agent\
    \ should retain parent-relative position values\n            across reboots, either\
    \ through algorithmic assignment or use\n            of non-volatile storage.\"\
    \n    ::= { entPhysicalEntry 6 }\n"
- title: entPhysicalName OBJECT-TYPE
  contents:
  - "entPhysicalName OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The textual\
    \ name of the physical entity.  The value of this\n            object should be\
    \ the name of the component as assigned by\n            the local device and should\
    \ be suitable for use in commands\n            entered at the device's `console'.\
    \  This might be a text\n            name, such as `console' or a simple component\
    \ number (e.g.,\n            port or module number), such as `1', depending on\
    \ the\n            physical component naming syntax of the device.\n         \
    \   If there is no local name, or this object is otherwise not\n            applicable,\
    \ then this object contains a zero-length string.\n            Note that the value\
    \ of entPhysicalName for two physical\n            entities will be the same in\
    \ the event that the console\n            interface does not distinguish between\
    \ them, e.g., slot-1\n            and the card in slot-1.\"\n    ::= { entPhysicalEntry\
    \ 7 }\n"
- title: entPhysicalHardwareRev    OBJECT-TYPE
  contents:
  - "entPhysicalHardwareRev    OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The vendor-specific\
    \ hardware revision string for the\n            physical entity.  The preferred\
    \ value is the hardware\n            revision identifier actually printed on the\
    \ component itself\n            (if present).\n            Note that if revision\
    \ information is stored internally in a\n            non-printable (e.g., binary)\
    \ format, then the agent must\n            convert such information to a printable\
    \ format, in an\n            implementation-specific manner.\n            If no\
    \ specific hardware revision string is associated with\n            the physical\
    \ component, or this information is unknown to\n            the agent, then this\
    \ object will contain a zero-length\n            string.\"\n    ::= { entPhysicalEntry\
    \ 8 }\n"
- title: entPhysicalFirmwareRev    OBJECT-TYPE
  contents:
  - "entPhysicalFirmwareRev    OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The vendor-specific\
    \ firmware revision string for the\n            physical entity.\n           \
    \ Note that if revision information is stored internally in a\n            non-printable\
    \ (e.g., binary) format, then the agent must\n            convert such information\
    \ to a printable format, in an\n            implementation-specific manner.\n\
    \            If no specific firmware programs are associated with the\n      \
    \      physical component, or this information is unknown to the\n           \
    \ agent, then this object will contain a zero-length string.\"\n    ::= { entPhysicalEntry\
    \ 9 }\n"
- title: entPhysicalSoftwareRev    OBJECT-TYPE
  contents:
  - "entPhysicalSoftwareRev    OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The vendor-specific\
    \ software revision string for the\n            physical entity.\n           \
    \ Note that if revision information is stored internally in a\n            non-printable\
    \ (e.g., binary) format, then the agent must\n            convert such information\
    \ to a printable format, in an\n            implementation-specific manner.\n\
    \            If no specific software programs are associated with the\n      \
    \      physical component, or this information is unknown to the\n           \
    \ agent, then this object will contain a zero-length string.\"\n    ::= { entPhysicalEntry\
    \ 10 }\n"
- title: entPhysicalSerialNum   OBJECT-TYPE
  contents:
  - "entPhysicalSerialNum   OBJECT-TYPE\n    SYNTAX      SnmpAdminString (SIZE (0..32))\n\
    \    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n      \
    \      \"The vendor-specific serial number string for the physical\n         \
    \   entity.  The preferred value is the serial number string\n            actually\
    \ printed on the component itself (if present).\n            On the first instantiation\
    \ of an physical entity, the value\n            of entPhysicalSerialNum associated\
    \ with that entity is set\n            to the correct vendor-assigned serial number,\
    \ if this\n            information is available to the agent.  If a serial number\n\
    \            is unknown or non-existent, the entPhysicalSerialNum will be\n  \
    \          set to a zero-length string instead.\n            Note that implementations\
    \ which can correctly identify the\n            serial numbers of all installed\
    \ physical entities do not\n            need to provide write access to the entPhysicalSerialNum\n\
    \            object. Agents which cannot provide non-volatile storage for\n  \
    \          the entPhysicalSerialNum strings are not required to\n            implement\
    \ write access for this object.\n            Not every physical component will\
    \ have a serial number, or\n            even need one.  Physical entities for\
    \ which the associated\n            value of the entPhysicalIsFRU object is equal\
    \ to 'false(2)'\n            (e.g., the repeater ports within a repeater module),\
    \ do not\n            need their own unique serial number. An agent does not have\n\
    \            to provide write access for such entities, and may return a\n   \
    \         zero-length string.\n            If write access is implemented for\
    \ an instance of\n            entPhysicalSerialNum, and a value is written into\
    \ the\n            instance, the agent must retain the supplied value in the\n\
    \            entPhysicalSerialNum instance associated with the same\n        \
    \    physical entity for as long as that entity remains\n            instantiated.\
    \ This includes instantiations across all re-\n            initializations/reboots\
    \ of the network management system,\n            including those which result\
    \ in a change of the physical\n            entity's entPhysicalIndex value.\"\n\
    \    ::= { entPhysicalEntry 11 }\n"
- title: entPhysicalMfgName   OBJECT-TYPE
  contents:
  - "entPhysicalMfgName   OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The name\
    \ of the manufacturer of this physical component.\n            The preferred value\
    \ is the manufacturer name string actually\n            printed on the component\
    \ itself (if present).\n            Note that comparisons between instances of\
    \ the\n            entPhysicalModelName, entPhysicalFirmwareRev,\n           \
    \ entPhysicalSoftwareRev, and the entPhysicalSerialNum\n            objects, are\
    \ only meaningful amongst entPhysicalEntries with\n            the same value\
    \ of entPhysicalMfgName.\n            If the manufacturer name string associated\
    \ with the physical\n            component is unknown to the agent, then this\
    \ object will\n            contain a zero-length string.\"\n    ::= { entPhysicalEntry\
    \ 12 }\n"
- title: entPhysicalModelName   OBJECT-TYPE
  contents:
  - "entPhysicalModelName   OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The vendor-specific\
    \ model name identifier string associated\n            with this physical component.\
    \  The preferred value is the\n            customer-visible part number, which\
    \ may be printed on the\n            component itself.\n            If the model\
    \ name string associated with the physical\n            component is unknown to\
    \ the agent, then this object will\n            contain a zero-length string.\"\
    \n    ::= { entPhysicalEntry 13 }\n"
- title: entPhysicalAlias    OBJECT-TYPE
  contents:
  - "entPhysicalAlias    OBJECT-TYPE\n    SYNTAX      SnmpAdminString (SIZE (0..32))\n\
    \    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n      \
    \      \"This object is an 'alias' name for the physical entity as\n         \
    \   specified by a network manager, and provides a non-volatile\n            'handle'\
    \ for the physical entity.\n            On the first instantiation of an physical\
    \ entity, the value\n            of entPhysicalAlias associated with that entity\
    \ is set to\n            the zero-length string.  However, agent may set the value\
    \ to\n            a locally unique default value, instead of a zero-length\n \
    \           string.\n            If write access is implemented for an instance\
    \ of\n            entPhysicalAlias, and a value is written into the instance,\n\
    \            the agent must retain the supplied value in the\n            entPhysicalAlias\
    \ instance associated with the same physical\n            entity for as long as\
    \ that entity remains instantiated.\n            This includes instantiations\
    \ across all re-\n            initializations/reboots of the network management\
    \ system,\n            including those which result in a change of the physical\n\
    \            entity's entPhysicalIndex value.\"\n    ::= { entPhysicalEntry 14\
    \ }\n"
- title: entPhysicalAssetID OBJECT-TYPE
  contents:
  - "entPhysicalAssetID OBJECT-TYPE\n    SYNTAX      SnmpAdminString (SIZE (0..32))\n\
    \    MAX-ACCESS  read-write\n    STATUS      current\n    DESCRIPTION\n      \
    \      \"This object is a user-assigned asset tracking identifier\n          \
    \  for the physical entity as specified by a network manager,\n            and\
    \ provides non-volatile storage of this information.\n            On the first\
    \ instantiation of an physical entity, the value\n            of entPhysicalAssetID\
    \ associated with that entity is set to\n            the zero-length string.\n\
    \            Not every physical component will have a asset tracking\n       \
    \     identifier, or even need one.  Physical entities for which\n           \
    \ the associated value of the entPhysicalIsFRU object is equal\n            to\
    \ 'false(2)' (e.g., the repeater ports within a repeater\n            module),\
    \ do not need their own unique asset tracking\n            identifier. An agent\
    \ does not have to provide write access\n            for such entities, and may\
    \ instead return a zero-length\n            string.\n            If write access\
    \ is implemented for an instance of\n            entPhysicalAssetID, and a value\
    \ is written into the\n            instance, the agent must retain the supplied\
    \ value in the\n            entPhysicalAssetID instance associated with the same\n\
    \            physical entity for as long as that entity remains\n            instantiated.\
    \  This includes instantiations across all re-\n            initializations/reboots\
    \ of the network management system,\n            including those which result\
    \ in a change of the physical\n            entity's entPhysicalIndex value.\n\
    \            If no asset tracking information is associated with the\n       \
    \     physical component, then this object will contain a zero-\n            length\
    \ string.\"\n    ::= { entPhysicalEntry 15 }\n"
- title: entPhysicalIsFRU OBJECT-TYPE
  contents:
  - "entPhysicalIsFRU OBJECT-TYPE\n    SYNTAX      TruthValue\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"This object indicates\
    \ whether or not this physical entity\n            is considered a 'field replaceable\
    \ unit' by the vendor.  If\n            this object contains the value 'true(1)'\
    \ then this\n            entPhysicalEntry identifies a field replaceable unit.\
    \  For\n            all entPhysicalEntries which represent components that are\n\
    \            permanently contained within a field replaceable unit, the\n    \
    \        value 'false(2)' should be returned for this object.\"\n    ::= { entPhysicalEntry\
    \ 16 }\n"
- title: --           The Logical Entity Table
  contents:
  - '--           The Logical Entity Table

    '
- title: entLogicalTable OBJECT-TYPE
  contents:
  - "entLogicalTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF EntLogicalEntry\n  \
    \  MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n    \
    \        \"This table contains one row per logical entity.  For agents\n     \
    \       which implement more than one naming scope, at least one\n           \
    \ entry must exist. Agents which instantiate all MIB objects\n            within\
    \ a single naming scope are not required to implement\n            this table.\"\
    \n    ::= { entityLogical 1 }\n"
- title: entLogicalEntry       OBJECT-TYPE
  contents:
  - "entLogicalEntry       OBJECT-TYPE\n    SYNTAX      EntLogicalEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n            \"Information\
    \ about a particular logical entity.  Entities\n            may be managed by\
    \ this agent or other SNMP agents (possibly)\n            in the same chassis.\"\
    \n    INDEX       { entLogicalIndex }\n    ::= { entLogicalTable 1 }\n"
- title: EntLogicalEntry ::= SEQUENCE {
  contents:
  - "EntLogicalEntry ::= SEQUENCE {\n      entLogicalIndex            INTEGER,\n \
    \     entLogicalDescr            SnmpAdminString,\n      entLogicalType      \
    \       AutonomousType,\n      entLogicalCommunity        OCTET STRING,\n    \
    \  entLogicalTAddress         TAddress,\n      entLogicalTDomain          TDomain,\n\
    \      entLogicalContextEngineID  SnmpEngineIdOrNone,\n      entLogicalContextName\
    \      SnmpAdminString\n"
- title: '}'
  contents:
  - '}

    '
- title: entLogicalIndex OBJECT-TYPE
  contents:
  - "entLogicalIndex OBJECT-TYPE\n    SYNTAX      INTEGER (1..2147483647)\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n            \"The\
    \ value of this object uniquely identifies the logical\n            entity. The\
    \ value should be a small positive integer; index\n            values for different\
    \ logical entities are are not\n            necessarily contiguous.\"\n    ::=\
    \ { entLogicalEntry 1 }\n"
- title: entLogicalDescr OBJECT-TYPE
  contents:
  - "entLogicalDescr OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"A textual\
    \ description of the logical entity.  This object\n            should contain\
    \ a string which identifies the manufacturer's\n            name for the logical\
    \ entity, and should be set to a distinct\n            value for each version\
    \ of the logical entity. \"\n    ::= { entLogicalEntry 2 }\n"
- title: entLogicalType OBJECT-TYPE
  contents:
  - "entLogicalType OBJECT-TYPE\n    SYNTAX      AutonomousType\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"An indication of the\
    \ type of logical entity.  This will\n            typically be the OBJECT IDENTIFIER\
    \ name of the node in the\n            SMI's naming hierarchy which represents\
    \ the major MIB\n            module, or the majority of the MIB modules, supported\
    \ by the\n            logical entity.  For example:\n               a logical\
    \ entity of a regular host/router -> mib-2\n               a logical entity of\
    \ a 802.1d bridge -> dot1dBridge\n               a logical entity of a 802.3 repeater\
    \ -> snmpDot3RptrMgmt\n            If an appropriate node in the SMI's naming\
    \ hierarchy cannot\n            be identified, the value 'mib-2' should be used.\"\
    \n    ::= { entLogicalEntry 3 }\n"
- title: entLogicalCommunity OBJECT-TYPE
  contents:
  - "entLogicalCommunity OBJECT-TYPE\n    SYNTAX      OCTET STRING (SIZE (0..255))\n\
    \    MAX-ACCESS  read-only\n    STATUS      deprecated\n    DESCRIPTION\n    \
    \        \"An SNMPv1 or SNMPv2C community-string which can be used to\n      \
    \      access detailed management information for this logical\n            entity.\
    \  The agent should allow read access with this\n            community string\
    \ (to an appropriate subset of all managed\n            objects) and may also\
    \ return a community string based on the\n            privileges of the request\
    \ used to read this object.  Note\n            that an agent may return a community\
    \ string with read-only\n            privileges, even if this object is accessed\
    \ with a read-\n            write community string. However, the agent must take\
    \ care\n            not to return a community string which allows more\n     \
    \       privileges than the community string used to access this\n           \
    \ object.\n            A compliant SNMP agent may wish to conserve naming scopes\
    \ by\n            representing multiple logical entities in a single 'default'\n\
    \            naming scope.  This is possible when the logical entities\n     \
    \       represented by the same value of entLogicalCommunity have no\n       \
    \     object instances in common.  For example, 'bridge1' and\n            'repeater1'\
    \ may be part of the main naming scope, but at\n            least one additional\
    \ community string is needed to represent\n            'bridge2' and 'repeater2'.\n\
    \            Logical entities 'bridge1' and 'repeater1' would be\n           \
    \ represented by sysOREntries associated with the 'default'\n            naming\
    \ scope.\n            For agents not accessible via SNMPv1 or SNMPv2C, the value\n\
    \            of this object is the empty string.  This object may also\n     \
    \       contain an empty string if a community string has not yet\n          \
    \  been assigned by the agent, or no community string with\n            suitable\
    \ access rights can be returned for a particular SNMP\n            request.\n\
    \            Note that this object is deprecated. Agents which implement\n   \
    \         SNMPv3 access should use the entLogicalContextEngineID and\n       \
    \     entLogicalContextName objects to identify the context\n            associated\
    \ with each logical entity.  SNMPv3 agents may\n            return a zero-length\
    \ string for this object, or may continue\n            to return a community string\
    \ (e.g., tri-lingual agent\n            support).\"\n    ::= { entLogicalEntry\
    \ 4 }\n"
- title: entLogicalTAddress OBJECT-TYPE
  contents:
  - "entLogicalTAddress OBJECT-TYPE\n    SYNTAX      TAddress\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"The transport service\
    \ address by which the logical entity\n            receives network management\
    \ traffic, formatted according to\n            the corresponding value of entLogicalTDomain.\n\
    \            For snmpUDPDomain, a TAddress is 6 octets long, the initial\n   \
    \         4 octets containing the IP-address in network-byte order and\n     \
    \       the last 2 containing the UDP port in network-byte order.\n          \
    \  Consult 'Transport Mappings for Version 2 of the Simple\n            Network\
    \ Management Protocol' (RFC 1906 [RFC1906]) for\n            further information\
    \ on snmpUDPDomain.\"\n    ::= { entLogicalEntry 5 }\n"
- title: entLogicalTDomain OBJECT-TYPE
  contents:
  - "entLogicalTDomain OBJECT-TYPE\n    SYNTAX      TDomain\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"Indicates the kind of\
    \ transport service by which the\n            logical entity receives network\
    \ management traffic.\n            Possible values for this object are presently\
    \ found in the\n            Transport Mappings for SNMPv2 document (RFC 1906\n\
    \            [RFC1906]).\"\n    ::= { entLogicalEntry 6 }\n"
- title: entLogicalContextEngineID    OBJECT-TYPE
  contents:
  - "entLogicalContextEngineID    OBJECT-TYPE\n    SYNTAX      SnmpEngineIdOrNone\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \     \"The authoritative contextEngineID that can be used to send\n         \
    \   an SNMP message concerning information held by this logical\n            entity,\
    \ to the address specified by the associated\n            'entLogicalTAddress/entLogicalTDomain'\
    \ pair.\n            This object, together with the associated\n            entLogicalContextName\
    \ object, defines the context associated\n            with a particular logical\
    \ entity, and allows access to SNMP\n            engines identified by a contextEngineId\
    \ and contextName\n            pair.\n            If no value has been configured\
    \ by the agent, a zero-length\n            string is returned, or the agent may\
    \ choose not to\n            instantiate this object at all.\"\n    ::= { entLogicalEntry\
    \ 7 }\n"
- title: entLogicalContextName    OBJECT-TYPE
  contents:
  - "entLogicalContextName    OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The contextName\
    \ that can be used to send an SNMP message\n            concerning information\
    \ held by this logical entity, to the\n            address specified by the associated\n\
    \            'entLogicalTAddress/entLogicalTDomain' pair.\n            This object,\
    \ together with the associated\n            entLogicalContextEngineID object,\
    \ defines the context\n            associated with a particular logical entity,\
    \ and allows\n            access to SNMP engines identified by a contextEngineId\
    \ and\n            contextName pair.\n            If no value has been configured\
    \ by the agent, a zero-length\n            string is returned, or the agent may\
    \ choose not to\n            instantiate this object at all.\"\n    ::= { entLogicalEntry\
    \ 8 }\n"
- title: entLPMappingTable OBJECT-TYPE
  contents:
  - "entLPMappingTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF EntLPMappingEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"This table contains zero or more rows of logical entity to\n    \
    \        physical equipment associations. For each logical entity\n          \
    \  known by this agent, there are zero or more mappings to the\n            physical\
    \ resources which are used to realize that logical\n            entity.\n    \
    \        An agent should limit the number and nature of entries in\n         \
    \   this table such that only meaningful and non-redundant\n            information\
    \ is returned. For example, in a system which\n            contains a single power\
    \ supply, mappings between logical\n            entities and the power supply\
    \ are not useful and should not\n            be included.\n            Also, only\
    \ the most appropriate physical component which is\n            closest to the\
    \ root of a particular containment tree should\n            be identified in an\
    \ entLPMapping entry.\n            For example, suppose a bridge is realized on\
    \ a particular\n            module, and all ports on that module are ports on\
    \ this\n            bridge. A mapping between the bridge and the module would\
    \ be\n            useful, but additional mappings between the bridge and each\n\
    \            of the ports on that module would be redundant (since the\n     \
    \       entPhysicalContainedIn hierarchy can provide the same\n            information).\
    \ If, on the other hand, more than one bridge\n            was utilizing ports\
    \ on this module, then mappings between\n            each bridge and the ports\
    \ it used would be appropriate.\n            Also, in the case of a single backplane\
    \ repeater, a mapping\n            for the backplane to the single repeater entity\
    \ is not\n            necessary.\"\n    ::= { entityMapping 1 }\n"
- title: entLPMappingEntry       OBJECT-TYPE
  contents:
  - "entLPMappingEntry       OBJECT-TYPE\n    SYNTAX      EntLPMappingEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n            \"Information\
    \ about a particular logical entity to physical\n            equipment association.\
    \ Note that the nature of the\n            association is not specifically identified\
    \ in this entry.\n            It is expected that sufficient information exists\
    \ in the\n            MIBs used to manage a particular logical entity to infer\
    \ how\n            physical component information is utilized.\"\n    INDEX  \
    \     { entLogicalIndex, entLPPhysicalIndex }\n    ::= { entLPMappingTable 1 }\n"
- title: EntLPMappingEntry ::= SEQUENCE {
  contents:
  - "EntLPMappingEntry ::= SEQUENCE {\n      entLPPhysicalIndex         PhysicalIndex\n"
- title: '}'
  contents:
  - '}

    '
- title: entLPPhysicalIndex OBJECT-TYPE
  contents:
  - "entLPPhysicalIndex OBJECT-TYPE\n    SYNTAX      PhysicalIndex\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The value\
    \ of this object identifies the index value of a\n            particular entPhysicalEntry\
    \ associated with the indicated\n            entLogicalEntity.\"\n    ::= { entLPMappingEntry\
    \ 1 }\n"
- title: -- logical entity/component to alias table
  contents:
  - '-- logical entity/component to alias table

    '
- title: entAliasMappingTable OBJECT-TYPE
  contents:
  - "entAliasMappingTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF EntAliasMappingEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"This table contains zero or more rows, representing\n           \
    \ mappings of logical entity and physical component to\n            external MIB\
    \ identifiers.  Each physical port in the system\n            may be associated\
    \ with a mapping to an external identifier,\n            which itself is associated\
    \ with a particular logical\n            entity's naming scope.  A 'wildcard'\
    \ mechanism is provided\n            to indicate that an identifier is associated\
    \ with more than\n            one logical entity.\"\n    ::= { entityMapping 2\
    \ }\n"
- title: entAliasMappingEntry       OBJECT-TYPE
  contents:
  - "entAliasMappingEntry       OBJECT-TYPE\n    SYNTAX      EntAliasMappingEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"Information about a particular physical equipment, logical\n    \
    \        entity to external identifier binding. Each logical\n            entity/physical\
    \ component pair may be associated with one\n            alias mapping.  The logical\
    \ entity index may also be used as\n            a 'wildcard' (refer to the entAliasLogicalIndexOrZero\
    \ object\n            DESCRIPTION clause for details.)\n            Note that\
    \ only entPhysicalIndex values which represent\n            physical ports (i.e.\
    \ associated entPhysicalClass value is\n            'port(10)') are permitted\
    \ to exist in this table.\"\n    INDEX { entPhysicalIndex, entAliasLogicalIndexOrZero\
    \ }\n    ::= { entAliasMappingTable 1 }\n"
- title: EntAliasMappingEntry ::= SEQUENCE {
  contents:
  - "EntAliasMappingEntry ::= SEQUENCE {\n      entAliasLogicalIndexOrZero       \
    \ INTEGER,\n      entAliasMappingIdentifier          RowPointer\n"
- title: '}'
  contents:
  - '}

    '
- title: entAliasLogicalIndexOrZero OBJECT-TYPE
  contents:
  - "entAliasLogicalIndexOrZero OBJECT-TYPE\n    SYNTAX      INTEGER (0..2147483647)\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"The value of this object identifies the logical entity\n        \
    \    which defines the naming scope for the associated instance\n            of\
    \ the 'entAliasMappingIdentifier' object.\n            If this object has a non-zero\
    \ value, then it identifies the\n            logical entity named by the same\
    \ value of entLogicalIndex.\n            If this object has a value of zero, then\
    \ the mapping between\n            the physical component and the alias identifier\
    \ for this\n            entAliasMapping entry is associated with all unspecified\n\
    \            logical entities. That is, a value of zero (the default\n       \
    \     mapping) identifies any logical entity which does not have\n           \
    \ an explicit entry in this table for a particular\n            entPhysicalIndex/entAliasMappingIdentifier\
    \ pair.\n            For example, to indicate that a particular interface (e.g.,\n\
    \            physical component 33) is identified by the same value of\n     \
    \       ifIndex for all logical entities, the following instance\n           \
    \ might exist:\n                    entAliasMappingIdentifier.33.0 = ifIndex.5\n\
    \            In the event an entPhysicalEntry is associated differently\n    \
    \        for some logical entities, additional entAliasMapping\n            entries\
    \ may exist, e.g.:\n                    entAliasMappingIdentifier.33.0 = ifIndex.6\n\
    \                    entAliasMappingIdentifier.33.4 =  ifIndex.1\n           \
    \         entAliasMappingIdentifier.33.5 =  ifIndex.1\n                    entAliasMappingIdentifier.33.10\
    \ = ifIndex.12\n            Note that entries with non-zero entAliasLogicalIndexOrZero\n\
    \            index values have precedence over any zero-indexed entry. In\n  \
    \          this example, all logical entities except 4, 5, and 10,\n         \
    \   associate physical entity 33 with ifIndex.6.\"\n    ::= { entAliasMappingEntry\
    \ 1 }\n"
- title: entAliasMappingIdentifier OBJECT-TYPE
  contents:
  - "entAliasMappingIdentifier OBJECT-TYPE\n    SYNTAX      RowPointer\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The value\
    \ of this object identifies a particular conceptual\n            row associated\
    \ with the indicated entPhysicalIndex and\n            entLogicalIndex pair.\n\
    \            Since only physical ports are modeled in this table, only\n     \
    \       entries which represent interfaces or ports are allowed.  If\n       \
    \     an ifEntry exists on behalf of a particular physical port,\n           \
    \ then this object should identify the associated 'ifEntry'.\n            For\
    \ repeater ports, the appropriate row in the\n            'rptrPortGroupTable'\
    \ should be identified instead.\n            For example, suppose a physical port\
    \ was represented by\n            entPhysicalEntry.3, entLogicalEntry.15 existed\
    \ for a\n            repeater, and entLogicalEntry.22 existed for a bridge.  Then\n\
    \            there might be two related instances of\n            entAliasMappingIdentifier:\n\
    \               entAliasMappingIdentifier.3.15 == rptrPortGroupIndex.5.2\n   \
    \            entAliasMappingIdentifier.3.22 == ifIndex.17\n            It is possible\
    \ that other mappings (besides interfaces and\n            repeater ports) may\
    \ be defined in the future, as required.\n            Bridge ports are identified\
    \ by examining the Bridge MIB and\n            appropriate ifEntries associated\
    \ with each 'dot1dBasePort',\n            and are thus not represented in this\
    \ table.\"\n    ::= { entAliasMappingEntry 2 }\n"
- title: -- physical mapping table
  contents:
  - '-- physical mapping table

    '
- title: entPhysicalContainsTable OBJECT-TYPE
  contents:
  - "entPhysicalContainsTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF EntPhysicalContainsEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"A table which exposes the container/'containee'\n            relationships\
    \ between physical entities. This table provides\n            all the information\
    \ found by constructing the virtual\n            containment tree for a given\
    \ entPhysicalTable, but in a more\n            direct format.\n            In\
    \ the event a physical entity is contained by more than one\n            other\
    \ physical entity (e.g., double-wide modules), this\n            table should\
    \ include these additional mappings, which cannot\n            be represented\
    \ in the entPhysicalTable virtual containment\n            tree.\"\n    ::= {\
    \ entityMapping 3 }\n"
- title: entPhysicalContainsEntry OBJECT-TYPE
  contents:
  - "entPhysicalContainsEntry OBJECT-TYPE\n    SYNTAX      EntPhysicalContainsEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \          \"A single container/'containee' relationship.\"\n    INDEX       {\
    \ entPhysicalIndex, entPhysicalChildIndex }\n    ::= { entPhysicalContainsTable\
    \ 1 }\n"
- title: EntPhysicalContainsEntry ::= SEQUENCE {
  contents:
  - "EntPhysicalContainsEntry ::= SEQUENCE {\n      entPhysicalChildIndex     PhysicalIndex\n"
- title: '}'
  contents:
  - '}

    '
- title: entPhysicalChildIndex OBJECT-TYPE
  contents:
  - "entPhysicalChildIndex OBJECT-TYPE\n    SYNTAX      PhysicalIndex\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n            \"The value\
    \ of entPhysicalIndex for the contained physical\n            entity.\"\n    ::=\
    \ { entPhysicalContainsEntry 1 }\n"
- title: -- last change time stamp for the whole MIB
  contents:
  - '-- last change time stamp for the whole MIB

    '
- title: entLastChangeTime OBJECT-TYPE
  contents:
  - "entLastChangeTime OBJECT-TYPE\n    SYNTAX      TimeStamp\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n            \"The value of sysUpTime\
    \ at the time a conceptual row is\n            created, modified, or deleted in\
    \ any of these tables:\n                    - entPhysicalTable\n             \
    \       - entLogicalTable\n                    - entLPMappingTable\n         \
    \           - entAliasMappingTable\n                    - entPhysicalContainsTable\n\
    \            \"\n    ::= { entityGeneral 1 }\n"
- title: -- Entity MIB Trap Definitions
  contents:
  - '-- Entity MIB Trap Definitions

    '
- title: entityMIBTraps      OBJECT IDENTIFIER ::= { entityMIB 2 }
  contents:
  - 'entityMIBTraps      OBJECT IDENTIFIER ::= { entityMIB 2 }

    '
- title: entityMIBTrapPrefix OBJECT IDENTIFIER ::= { entityMIBTraps 0 }
  contents:
  - 'entityMIBTrapPrefix OBJECT IDENTIFIER ::= { entityMIBTraps 0 }

    '
- title: entConfigChange NOTIFICATION-TYPE
  contents:
  - "entConfigChange NOTIFICATION-TYPE\n    STATUS             current\n    DESCRIPTION\n\
    \            \"An entConfigChange notification is generated when the value\n \
    \           of entLastChangeTime changes. It can be utilized by an NMS\n     \
    \       to trigger logical/physical entity table maintenance polls.\n        \
    \    An agent should not generate more than one entConfigChange\n            'notification-event'\
    \ in a given time interval (five seconds\n            is the suggested default).\
    \  A 'notification-event' is the\n            transmission of a single trap or\
    \ inform PDU to a list of\n            notification destinations.\n          \
    \  If additional configuration changes occur within the\n            throttling\
    \ period, then notification-events for these\n            changes should be suppressed\
    \ by the agent until the current\n            throttling period expires.  At the\
    \ end of a throttling\n            period, one notification-event should be generated\
    \ if any\n            configuration changes occurred since the start of the\n\
    \            throttling period. In such a case, another throttling period\n  \
    \          is started right away.\n            An NMS should periodically check\
    \ the value of\n            entLastChangeTime to detect any missed entConfigChange\n\
    \            notification-events, e.g., due to throttling or transmission\n  \
    \          loss.\"\n   ::= { entityMIBTrapPrefix 1 }\n"
- title: -- conformance information
  contents:
  - '-- conformance information

    '
- title: entityConformance OBJECT IDENTIFIER ::= { entityMIB 3 }
  contents:
  - 'entityConformance OBJECT IDENTIFIER ::= { entityMIB 3 }

    '
- title: entityCompliances OBJECT IDENTIFIER ::= { entityConformance 1 }
  contents:
  - 'entityCompliances OBJECT IDENTIFIER ::= { entityConformance 1 }

    '
- title: entityGroups      OBJECT IDENTIFIER ::= { entityConformance 2 }
  contents:
  - 'entityGroups      OBJECT IDENTIFIER ::= { entityConformance 2 }

    '
- title: -- compliance statements
  contents:
  - '-- compliance statements

    '
- title: entityCompliance MODULE-COMPLIANCE
  contents:
  - "entityCompliance MODULE-COMPLIANCE\n    STATUS  deprecated\n    DESCRIPTION\n\
    \            \"The compliance statement for SNMP entities which implement\n  \
    \          version 1 of the Entity MIB.\"\n    MODULE  -- this module\n      \
    \  MANDATORY-GROUPS {\n                           entityPhysicalGroup,\n     \
    \                      entityLogicalGroup,\n                           entityMappingGroup,\n\
    \                           entityGeneralGroup,\n                           entityNotificationsGroup\n\
    \        }\n    ::= { entityCompliances 1 }\n"
- title: entity2Compliance MODULE-COMPLIANCE
  contents:
  - "entity2Compliance MODULE-COMPLIANCE\n    STATUS  current\n    DESCRIPTION\n \
    \           \"The compliance statement for SNMP entities which implement\n   \
    \         version 2 of the Entity MIB.\"\n    MODULE  -- this module\n       \
    \ MANDATORY-GROUPS {\n                           entityPhysicalGroup,\n      \
    \                     entityPhysical2Group,\n                           entityGeneralGroup,\n\
    \                           entityNotificationsGroup\n        }\n        GROUP\
    \ entityLogical2Group\n        DESCRIPTION\n            \"Implementation of this\
    \ group is not mandatory for agents\n            which model all MIB object instances\
    \ within a single naming\n            scope.\"\n        GROUP entityMappingGroup\n\
    \        DESCRIPTION\n            \"Implementation of the entPhysicalContainsTable\
    \ is mandatory\n            for all agents.  Implementation of the entLPMappingTable\
    \ and\n            entAliasMappingTables are not mandatory for agents which\n\
    \            model all MIB object instances within a single naming scope.\n  \
    \          Note that the entAliasMappingTable may be useful for all\n        \
    \    agents, however implementation of the entityLogicalGroup or\n           \
    \ entityLogical2Group is required to support this table.\"\n        OBJECT entPhysicalSerialNum\n\
    \        MIN-ACCESS   not-accessible\n        DESCRIPTION\n            \"Read\
    \ and write access is not required for agents which\n            cannot identify\
    \ serial number information for physical\n            entities, and/or cannot\
    \ provide non-volatile storage for\n            NMS-assigned serial numbers.\n\
    \            Write access is not required for agents which can identify\n    \
    \        serial number information for physical entities, but cannot\n       \
    \     provide non-volatile storage for NMS-assigned serial\n            numbers.\n\
    \            Write access is not required for physical entities for\n        \
    \    physical entities for which the associated value of the\n            entPhysicalIsFRU\
    \ object is equal to 'false(2)'.\"\n        OBJECT entPhysicalAlias\n        MIN-ACCESS\
    \   read-only\n        DESCRIPTION\n            \"Write access is required only\
    \ if the associated\n            entPhysicalClass value is equal to 'chassis(3)'.\"\
    \n        OBJECT entPhysicalAssetID\n        MIN-ACCESS   not-accessible\n   \
    \     DESCRIPTION\n            \"Read and write access is not required for agents\
    \ which\n            cannot provide non-volatile storage for NMS-assigned asset\n\
    \            identifiers.\n            Write access is not required for physical\
    \ entities for which\n            the associated value of entPhysicalIsFRU is\
    \ equal to\n            'false(2)'.\"\n    ::= { entityCompliances 2 }\n"
- title: -- MIB groupings
  contents:
  - '-- MIB groupings

    '
- title: entityPhysicalGroup    OBJECT-GROUP
  contents:
  - "entityPhysicalGroup    OBJECT-GROUP\n    OBJECTS {\n              entPhysicalDescr,\n\
    \              entPhysicalVendorType,\n              entPhysicalContainedIn,\n\
    \              entPhysicalClass,\n              entPhysicalParentRelPos,\n   \
    \           entPhysicalName\n            }\n    STATUS  current\n    DESCRIPTION\n\
    \            \"The collection of objects which are used to represent\n       \
    \     physical system components, for which a single agent\n            provides\
    \ management information.\"\n    ::= { entityGroups 1 }\n"
- title: entityLogicalGroup    OBJECT-GROUP
  contents:
  - "entityLogicalGroup    OBJECT-GROUP\n    OBJECTS {\n              entLogicalDescr,\n\
    \              entLogicalType,\n              entLogicalCommunity,\n         \
    \     entLogicalTAddress,\n              entLogicalTDomain\n            }\n  \
    \  STATUS  deprecated\n    DESCRIPTION\n            \"The collection of objects\
    \ which are used to represent the\n            list of logical entities for which\
    \ a single agent provides\n            management information.\"\n    ::= { entityGroups\
    \ 2 }\n"
- title: entityMappingGroup    OBJECT-GROUP
  contents:
  - "entityMappingGroup    OBJECT-GROUP\n    OBJECTS {\n              entLPPhysicalIndex,\n\
    \              entAliasMappingIdentifier,\n              entPhysicalChildIndex\n\
    \            }\n    STATUS  current\n    DESCRIPTION\n            \"The collection\
    \ of objects which are used to represent the\n            associations between\
    \ multiple logical entities, physical\n            components, interfaces, and\
    \ port identifiers for which a\n            single agent provides management information.\"\
    \n    ::= { entityGroups 3 }\n"
- title: entityGeneralGroup    OBJECT-GROUP
  contents:
  - "entityGeneralGroup    OBJECT-GROUP\n    OBJECTS {\n              entLastChangeTime\n\
    \            }\n    STATUS  current\n    DESCRIPTION\n            \"The collection\
    \ of objects which are used to represent\n            general entity information\
    \ for which a single agent provides\n            management information.\"\n \
    \   ::= { entityGroups 4 }\n"
- title: entityNotificationsGroup NOTIFICATION-GROUP
  contents:
  - "entityNotificationsGroup NOTIFICATION-GROUP\n    NOTIFICATIONS { entConfigChange\
    \ }\n    STATUS        current\n    DESCRIPTION\n            \"The collection\
    \ of notifications used to indicate Entity MIB\n            data consistency and\
    \ general status information.\"\n    ::= { entityGroups 5 }\n"
- title: entityPhysical2Group    OBJECT-GROUP
  contents:
  - "entityPhysical2Group    OBJECT-GROUP\n    OBJECTS {\n              entPhysicalHardwareRev,\n\
    \              entPhysicalFirmwareRev,\n              entPhysicalSoftwareRev,\n\
    \              entPhysicalSerialNum,\n              entPhysicalMfgName,\n    \
    \          entPhysicalModelName,\n              entPhysicalAlias,\n          \
    \    entPhysicalAssetID,\n              entPhysicalIsFRU\n            }\n    STATUS\
    \  current\n    DESCRIPTION\n            \"The collection of objects which are\
    \ used to represent\n            physical system components, for which a single\
    \ agent\n            provides management information.  This group augments the\n\
    \            objects contained in the entityPhysicalGroup.\"\n    ::= { entityGroups\
    \ 6 }\n"
- title: entityLogical2Group    OBJECT-GROUP
  contents:
  - "entityLogical2Group    OBJECT-GROUP\n    OBJECTS {\n              entLogicalDescr,\n\
    \              entLogicalType,\n              entLogicalTAddress,\n          \
    \    entLogicalTDomain,\n              entLogicalContextEngineID,\n          \
    \    entLogicalContextName\n            }\n    STATUS  current\n    DESCRIPTION\n\
    \            \"The collection of objects which are used to represent the\n   \
    \         list of logical entities for which a single SNMP entity\n          \
    \  provides management information.\"\n    ::= { entityGroups 7 }\n"
- title: END
  contents:
  - 'END

    '
- title: 4.  Usage Examples
  contents:
  - "4.  Usage Examples\n   The following sections iterate the instance values for\
    \ two example\n   networking devices. These examples are kept simple to make them\
    \ more\n   understandable. Auxiliary components, such as fans, sensors, empty\n\
    \   slots, and sub-modules are not shown, but might be modeled in real\n   implementations.\n"
- title: 4.1.  Router/Bridge
  contents:
  - "4.1.  Router/Bridge\n   A router containing two slots.  Each slot contains a\
    \ 3 port\n   router/bridge module. Each port is represented in the ifTable.  There\n\
    \   are two logical instances of OSPF running and two logical bridges:\n   Physical\
    \ entities -- entPhysicalTable:\n     1 Field-replaceable physical chassis:\n\
    \       entPhysicalDescr.1 ==             'Acme Chassis Model 100'\n       entPhysicalVendorType.1\
    \ ==        acmeProducts.chassisTypes.1\n       entPhysicalContainedIn.1 ==  \
    \     0\n       entPhysicalClass.1 ==             chassis(3)\n       entPhysicalParentRelPos.1\
    \ ==      0\n       entPhysicalName.1 ==              '100-A'\n       entPhysicalHardwareRev.1\
    \ ==       'A(1.00.02)'\n       entPhysicalSoftwareRev.1 ==       ''\n       entPhysicalFirmwareRev.1\
    \ ==       ''\n       entPhysicalSerialNum.1 ==         'C100076544'\n       entPhysicalMfgName.1\
    \ ==           'Acme'\n       entPhysicalModelName.1 ==         '100'\n      \
    \ entPhysicalAlias.1 ==             'cl-SJ17-3-006:rack1:rtr-U3'\n       entPhysicalAssetID.1\
    \ ==           '0007372293'\n       entPhysicalIsFRU.1 ==             true(1)\n\
    \     2 slots within the chassis:\n       entPhysicalDescr.2 ==             'Acme\
    \ Chassis Slot Type AA'\n       entPhysicalVendorType.2  ==       acmeProducts.slotTypes.1\n\
    \       entPhysicalContainedIn.2 ==       1\n       entPhysicalClass.2 ==    \
    \         container(5)\n       entPhysicalParentRelPos.2 ==      1\n       entPhysicalName.2\
    \ ==              'S1'\n       entPhysicalHardwareRev.2 ==       'B(1.00.01)'\n\
    \       entPhysicalSoftwareRev.2 ==       ''\n       entPhysicalFirmwareRev.2\
    \ ==       ''\n       entPhysicalSerialNum.2 ==         ''\n       entPhysicalMfgName.2\
    \ ==           'Acme'\n       entPhysicalModelName.2 ==         'AA'\n       entPhysicalAlias.2\
    \ ==             ''\n       entPhysicalAssetID.2 ==           ''\n       entPhysicalIsFRU.2\
    \ ==             false(2)\n       entPhysicalDescr.3 ==             'Acme Chassis\
    \ Slot Type AA'\n       entPhysicalVendorType.3 =         acmeProducts.slotTypes.1\n\
    \       entPhysicalContainedIn.3 ==       1\n       entPhysicalClass.3 ==    \
    \         container(5)\n       entPhysicalParentRelPos.3 ==      2\n       entPhysicalName.3\
    \ ==              'S2'\n       entPhysicalHardwareRev.3 ==       '1.00.07'\n \
    \      entPhysicalSoftwareRev.3 ==       ''\n       entPhysicalFirmwareRev.3 ==\
    \       ''\n       entPhysicalSerialNum.3 ==         ''\n       entPhysicalMfgName.3\
    \ ==           'Acme'\n       entPhysicalModelName.3 ==         'AA'\n       entPhysicalAlias.3\
    \ ==             ''\n       entPhysicalAssetID.3 ==           ''\n       entPhysicalIsFRU.3\
    \ ==             false(2)\n     2 Field-replaceable modules:\n     Slot 1 contains\
    \ a module with 3 ports:\n       entPhysicalDescr.4 ==             'Acme Router-100'\n\
    \       entPhysicalVendorType.4  ==       acmeProducts.moduleTypes.14\n      \
    \ entPhysicalContainedIn.4 ==       2\n       entPhysicalClass.4 ==          \
    \   module(9)\n       entPhysicalParentRelPos.4 ==      1\n       entPhysicalName.4\
    \ ==              'M1'\n       entPhysicalHardwareRev.4 ==       '1.00.07'\n \
    \      entPhysicalSoftwareRev.4 ==       '1.4.1'\n       entPhysicalFirmwareRev.4\
    \ ==       'A(1.1)'\n       entPhysicalSerialNum.4 ==         'C100087363'\n \
    \      entPhysicalMfgName.4 ==           'Acme'\n       entPhysicalModelName.4\
    \ ==         'R100-FE'\n       entPhysicalAlias.4 ==             'rtr-U3:m1:SJ17-3-eng'\n\
    \       entPhysicalAssetID.4 ==           '0007372462'\n       entPhysicalIsFRU.4\
    \ ==             true(1)\n       entPhysicalDescr.5 ==             'Acme Ethernet-100\
    \ Port'\n       entPhysicalVendorType.5  ==       acmeProducts.portTypes.2\n \
    \      entPhysicalContainedIn.5 ==       4\n       entPhysicalClass.5 ==     \
    \        port(10)\n       entPhysicalParentRelPos.5 ==      1\n       entPhysicalName.5\
    \ ==              'P1'\n       entPhysicalHardwareRev.5 ==       'G(1.02)'\n \
    \      entPhysicalSoftwareRev.5 ==       ''\n       entPhysicalFirmwareRev.5 ==\
    \       '1.1'\n       entPhysicalSerialNum.5 ==         ''\n       entPhysicalMfgName.5\
    \ ==           'Acme'\n       entPhysicalModelName.5 ==         'FE-100'\n   \
    \    entPhysicalAlias.5 ==             ''\n       entPhysicalAssetID.5 ==    \
    \       ''\n       entPhysicalIsFRU.5 ==             false(2)\n       entPhysicalDescr.6\
    \ ==             'Acme Ethernet-100 Port'\n       entPhysicalVendorType.6  ==\
    \       acmeProducts.portTypes.2\n       entPhysicalContainedIn.6 ==       4\n\
    \       entPhysicalClass.6 ==             port(10)\n       entPhysicalParentRelPos.6\
    \ ==      2\n       entPhysicalName.6 ==              'P2'\n       entPhysicalHardwareRev.6\
    \ ==       'G(1.02)'\n       entPhysicalSoftwareRev.6 ==       ''\n       entPhysicalFirmwareRev.6\
    \ ==       '1.1'\n       entPhysicalSerialNum.6 ==         ''\n       entPhysicalMfgName.6\
    \ ==           'Acme'\n       entPhysicalModelName.6 ==         'FE-100'\n   \
    \    entPhysicalAlias.6 ==             ''\n       entPhysicalAssetID.6 ==    \
    \       ''\n       entPhysicalIsFRU.6 ==             false(2)\n       entPhysicalDescr.7\
    \ ==             'Acme Router-100 FDDI-Port'\n       entPhysicalVendorType.7 \
    \ ==       acmeProducts.portTypes.3\n       entPhysicalContainedIn.7 ==      \
    \ 4\n       entPhysicalClass.7 ==             port(10)\n       entPhysicalParentRelPos.7\
    \ ==      3\n       entPhysicalName.7 ==              'P3'\n       entPhysicalHardwareRev.7\
    \ ==       'B(1.03)'\n       entPhysicalSoftwareRev.7 ==       '2.5.1'\n     \
    \  entPhysicalFirmwareRev.7 ==       '2.5F'\n       entPhysicalSerialNum.7 ==\
    \         ''\n       entPhysicalMfgName.7 ==           'Acme'\n       entPhysicalModelName.7\
    \ ==         'FDDI-100'\n       entPhysicalAlias.7 ==             ''\n       entPhysicalAssetID.7\
    \ ==           ''\n       entPhysicalIsFRU.7 ==             false(2)\n     Slot\
    \ 2 contains another 3-port module:\n       entPhysicalDescr.8 ==            \
    \ 'Acme Router-100 Comm Module'\n       entPhysicalVendorType.8  ==       acmeProducts.moduleTypes.15\n\
    \       entPhysicalContainedIn.8 ==       3\n       entPhysicalClass.8 ==    \
    \         module(9)\n       entPhysicalParentRelPos.8 ==      1\n       entPhysicalName.8\
    \ ==              'M2'\n       entPhysicalHardwareRev.8 ==       '2.01.00'\n \
    \      entPhysicalSoftwareRev.8 ==       '3.0.7'\n       entPhysicalFirmwareRev.8\
    \ ==       'A(1.2)'\n       entPhysicalSerialNum.8 ==         'C100098732'\n \
    \      entPhysicalMfgName.8 ==           'Acme'\n       entPhysicalModelName.8\
    \ ==         'C100'\n       entPhysicalAlias.8 ==             'rtr-U3:m2:SJ17-2-eng'\n\
    \       entPhysicalAssetID.8 ==           '0007373982'\n       entPhysicalIsFRU.8\
    \ ==             true(1)\n       entPhysicalDescr.9 ==             'Acme Fddi-100\
    \ Port'\n       entPhysicalVendorType.9 ==        acmeProducts.portTypes.5\n \
    \      entPhysicalContainedIn.9 ==       8\n       entPhysicalClass.9 ==     \
    \        port(10)\n       entPhysicalParentRelPos.9 ==      1\n       entPhysicalName.9\
    \ ==              'FDDI Primary'\n       entPhysicalHardwareRev.9 ==       'CC(1.07)'\n\
    \       entPhysicalSoftwareRev.9 ==       '2.0.34'\n       entPhysicalFirmwareRev.9\
    \ ==       '1.1'\n       entPhysicalSerialNum.9 ==         ''\n       entPhysicalMfgName.9\
    \ ==           'Acme'\n       entPhysicalModelName.9 ==         'FDDI-100'\n \
    \      entPhysicalAlias.9 ==             ''\n       entPhysicalAssetID.9 ==  \
    \         ''\n       entPhysicalIsFRU.9 ==             false(2)\n       entPhysicalDescr.10\
    \ ==            'Acme Ethernet-100 Port'\n       entPhysicalVendorType.10 == \
    \      acmeProducts.portTypes.2\n       entPhysicalContainedIn.10 ==      8\n\
    \       entPhysicalClass.10 ==            port(10)\n       entPhysicalParentRelPos.10\
    \ ==     2\n       entPhysicalName.10 ==             'Ethernet A'\n       entPhysicalHardwareRev.10\
    \ ==      'G(1.04)'\n       entPhysicalSoftwareRev.10 ==      ''\n       entPhysicalFirmwareRev.10\
    \ ==      '1.3'\n       entPhysicalSerialNum.10 ==        ''\n       entPhysicalMfgName.10\
    \ ==          'Acme'\n       entPhysicalModelName.10 ==        'FE-100'\n    \
    \   entPhysicalAlias.10 ==            ''\n       entPhysicalAssetID.10 ==    \
    \      ''\n       entPhysicalIsFRU.10 ==            false(2)\n       entPhysicalDescr.11\
    \ ==            'Acme Ethernet-100 Port'\n       entPhysicalVendorType.11 == \
    \      acmeProducts.portTypes.2\n       entPhysicalContainedIn.11 ==      8\n\
    \       entPhysicalClass.11 ==            port(10)\n       entPhysicalParentRelPos.11\
    \ ==     3\n       entPhysicalName.11 ==             'Ethernet B'\n       entPhysicalHardwareRev.11\
    \ ==      'G(1.04)'\n       entPhysicalSoftwareRev.11 ==      ''\n       entPhysicalFirmwareRev.11\
    \ ==      '1.3'\n       entPhysicalSerialNum.11 ==        ''\n       entPhysicalMfgName.11\
    \ ==          'Acme'\n       entPhysicalModelName.11 ==        'FE-100'\n    \
    \   entPhysicalAlias.11 ==            ''\n       entPhysicalAssetID.11 ==    \
    \      ''\n       entPhysicalIsFRU.11 ==            false(2)\n   Logical entities\
    \ -- entLogicalTable; no SNMPv3 support\n     2 OSPF instances:\n       entLogicalDescr.1\
    \ ==              'Acme OSPF v1.1'\n       entLogicalType.1 ==               ospf\n\
    \       entLogicalCommunity.1 ==          'public-ospf1'\n       entLogicalTAddress.1\
    \ ==           124.125.126.127:161\n       entLogicalTDomain.1 ==            snmpUDPDomain\n\
    \       entLogicalContextEngineID.1 ==    ''\n       entLogicalContextName.1 ==\
    \        ''\n       entLogicalDescr.2 ==              'Acme OSPF v1.1'\n     \
    \  entLogicalType.2 ==               ospf\n       entLogicalCommunity.2 ==   \
    \       'public-ospf2'\n       entLogicalTAddress.2 ==           124.125.126.127:161\n\
    \       entLogicalTDomain.2 ==            snmpUDPDomain\n       entLogicalContextEngineID.2\
    \ ==    ''\n       entLogicalContextName.2 ==        ''\n     2 logical bridges:\n\
    \       entLogicalDescr.3 ==              'Acme Bridge v2.1.1'\n       entLogicalType.3\
    \  ==              dot1dBridge\n       entLogicalCommunity.3 ==          'public-bridge1'\n\
    \       entLogicalTAddress.3 ==           124.125.126.127:161\n       entLogicalTDomain.3\
    \ ==            snmpUDPDomain\n       entLogicalContextEngineID.3 ==    ''\n \
    \      entLogicalContextName.3 ==        ''\n       entLogicalDescr.4 ==     \
    \         'Acme Bridge v2.1.1'\n       entLogicalType.4 ==               dot1dBridge\n\
    \       entLogicalCommunity.4 ==          'public-bridge2'\n       entLogicalTAddress.4\
    \ ==           124.125.126.127:161\n       entLogicalTDomain.4 ==            snmpUDPDomain\n\
    \       entLogicalContextEngineID.4 ==    ''\n       entLogicalContextName.4 ==\
    \        ''\n   Logical to Physical Mappings:\n     1st OSPF instance: uses module\
    \ 1-port 1\n         entLPPhysicalIndex.1.5 ==         5\n     2nd OSPF instance:\
    \ uses module 2-port 1\n         entLPPhysicalIndex.2.9 ==         9\n     1st\
    \ bridge group: uses module 1, all ports\n     [ed. -- Note that these mappings\
    \ are included in the table since\n     another logical entity (1st OSPF) utilizes\
    \ one of the\n     ports. If this were not the case, then a single mapping\n \
    \    to the module (e.g., entLPPhysicalIndex.3.4) would be\n     present instead.\
    \ ]\n         entLPPhysicalIndex.3.5 ==         5\n         entLPPhysicalIndex.3.6\
    \ ==         6\n         entLPPhysicalIndex.3.7 ==         7\n     2nd bridge\
    \ group: uses module 2, all ports\n         entLPPhysicalIndex.4.9  ==       \
    \ 9\n         entLPPhysicalIndex.4.10 ==        10\n         entLPPhysicalIndex.4.11\
    \ ==        11\n   Physical to Logical to MIB Alias Mappings -- entAliasMappingTable:\n\
    \     Example 1: ifIndex values are global to all logical entities\n         entAliasMappingIdentifier.5.0\
    \ ==  ifIndex.1\n         entAliasMappingIdentifier.6.0 ==  ifIndex.2\n      \
    \   entAliasMappingIdentifier.7.0 ==  ifIndex.3\n         entAliasMappingIdentifier.9.0\
    \ ==  ifIndex.4\n         entAliasMappingIdentifier.10.0 == ifIndex.5\n      \
    \   entAliasMappingIdentifier.11.0 == ifIndex.6\n     Example 2: ifIndex values\
    \ are not shared by all logical entities\n         entAliasMappingIdentifier.5.0\
    \ ==  ifIndex.1\n         entAliasMappingIdentifier.5.3 ==  ifIndex.101\n    \
    \     entAliasMappingIdentifier.6.0 ==  ifIndex.2\n         entAliasMappingIdentifier.6.3\
    \ ==  ifIndex.102\n         entAliasMappingIdentifier.7.0 ==  ifIndex.3\n    \
    \     entAliasMappingIdentifier.7.3 ==  ifIndex.103\n         entAliasMappingIdentifier.9.0\
    \ ==  ifIndex.4\n         entAliasMappingIdentifier.9.3 ==  ifIndex.204\n    \
    \     entAliasMappingIdentifier.10.0 == ifIndex.5\n         entAliasMappingIdentifier.10.3\
    \ == ifIndex.205\n         entAliasMappingIdentifier.11.0 == ifIndex.6\n     \
    \    entAliasMappingIdentifier.11.3 == ifIndex.206\n   Physical Containment Tree\
    \ -- entPhysicalContainsTable\n     chassis has two containers:\n         entPhysicalChildIndex.1.2\
    \ ==      2\n         entPhysicalChildIndex.1.3 ==      3\n     container 1 has\
    \ a module:\n         entPhysicalChildIndex.2.4 ==      4\n     container 2 has\
    \ a module:\n         entPhysicalChildIndex.3.8 ==      8\n     module 1 has 3\
    \ ports:\n         entPhysicalChildIndex.4.5 ==      5\n         entPhysicalChildIndex.4.6\
    \ ==      6\n         entPhysicalChildIndex.4.7 ==      7\n     module 2 has 3\
    \ ports:\n         entPhysicalChildIndex.8.9 ==      9\n         entPhysicalChildIndex.8.10\
    \ ==     10\n         entPhysicalChildIndex.1.11 ==     11\n"
- title: 4.2.  Repeaters
  contents:
  - "4.2.  Repeaters\n   A 3-slot Hub with 2 backplane ethernet segments.  Slot three\
    \ is\n   empty, and the remaining slots contain ethernet repeater modules.\n \
    \  Note that this example assumes an older Repeater MIB implementation,\n   (RFC\
    \ 1516 [RFC1516]) rather than the new Repeater MIB (RFC 2108\n   [RFC2108]). \
    \ The new version contains an object called '\n   rptrPortRptrId', which should\
    \ be used to identify repeater port\n   groupings, rather than with community\
    \ strings or contexts.\n"
- title: 'Physical entities -- entPhysicalTable:'
  contents:
  - "Physical entities -- entPhysicalTable:\n   1 Field-replaceable physical chassis:\n\
    \      entPhysicalDescr.1 ==          'Acme Chassis Model 110'\n      entPhysicalVendorType.1\
    \ ==     acmeProducts.chassisTypes.2\n      entPhysicalContainedIn.1 ==    0\n\
    \      entPhysicalClass.1 ==          chassis(3)\n      entPhysicalParentRelPos.1\
    \ ==   0\n      entPhysicalName.1 ==           '110-B'\n      entPhysicalHardwareRev.1\
    \ ==    'A(1.02.00)'\n      entPhysicalSoftwareRev.1 ==    ''\n      entPhysicalFirmwareRev.1\
    \ ==    ''\n      entPhysicalSerialNum.1 ==      'C100079294'\n      entPhysicalMfgName.1\
    \ ==        'Acme'\n      entPhysicalModelName.1 ==      '110'\n      entPhysicalAlias.1\
    \ ==          'bldg09:floor1:rptr18:0067eea0229f'\n      entPhysicalAssetID.1\
    \ ==        '0007386327'\n      entPhysicalIsFRU.1 ==          true(1)\n   2 Chassis\
    \ Ethernet Backplanes:\n      entPhysicalDescr.2 ==          'Acme Ethernet Backplane\
    \ Type A'\n      entPhysicalVendorType.2 ==     acmeProducts.backplaneTypes.1\n\
    \      entPhysicalContainedIn.2 ==    1\n      entPhysicalClass.2 ==         \
    \ backplane(4)\n      entPhysicalParentRelPos.2 ==   1\n      entPhysicalName.2\
    \ ==           'B1'\n      entPhysicalHardwareRev.2 ==    'A(2.04.01)'\n     \
    \ entPhysicalSoftwareRev.2 ==    ''\n      entPhysicalFirmwareRev.2 ==    ''\n\
    \      entPhysicalSerialNum.2 ==      ''\n      entPhysicalMfgName.2 ==      \
    \  'Acme'\n      entPhysicalModelName.2 ==      'BK-A'\n      entPhysicalAlias.2\
    \ ==          ''\n      entPhysicalAssetID.2 ==        ''\n      entPhysicalIsFRU.2\
    \ ==          false(2)\n      entPhysicalDescr.3 ==          'Acme Ethernet Backplane\
    \ Type A'\n      entPhysicalVendorType.3  ==    acmeProducts.backplaneTypes.1\n\
    \      entPhysicalContainedIn.3 ==    1\n      entPhysicalClass.3 ==         \
    \ backplane(4)\n      entPhysicalParentRelPos.3 ==   2\n      entPhysicalName.3\
    \ ==           'B2'\n      entPhysicalHardwareRev.3 ==    'A(2.04.01)'\n     \
    \ entPhysicalSoftwareRev.3 ==    ''\n      entPhysicalFirmwareRev.3 ==    ''\n\
    \      entPhysicalSerialNum.3 ==      ''\n      entPhysicalMfgName.3 ==      \
    \  'Acme'\n      entPhysicalModelName.3 ==      'BK-A'\n      entPhysicalAlias.3\
    \ ==          ''\n      entPhysicalAssetID.3 ==        ''\n      entPhysicalIsFRU.3\
    \ ==          false(2)\n   3 slots within the chassis:\n      entPhysicalDescr.4\
    \ ==          'Acme Hub Slot Type RB'\n      entPhysicalVendorType.4  ==    acmeProducts.slotTypes.5\n\
    \      entPhysicalContainedIn.4 ==    1\n      entPhysicalClass.4 ==         \
    \ container(5)\n      entPhysicalParentRelPos.4 ==   1\n      entPhysicalName.4\
    \ ==           'Slot 1'\n      entPhysicalHardwareRev.4 ==    'B(1.00.03)'\n \
    \     entPhysicalSoftwareRev.4 ==    ''\n      entPhysicalFirmwareRev.4 ==   \
    \ ''\n      entPhysicalSerialNum.4 ==      ''\n      entPhysicalMfgName.4 == \
    \       'Acme'\n      entPhysicalModelName.4 ==      'RB'\n      entPhysicalAlias.4\
    \ ==          ''\n      entPhysicalAssetID.4 ==        ''\n      entPhysicalIsFRU.4\
    \ ==          false(2)\n      entPhysicalDescr.5 ==          'Acme Hub Slot Type\
    \ RB'\n      entPhysicalVendorType.5  ==    acmeProducts.slotTypes.5\n      entPhysicalContainedIn.5\
    \ ==    1\n      entPhysicalClass.5 ==          container(5)\n      entPhysicalParentRelPos.5\
    \ ==   2\n      entPhysicalName.5 ==           'Slot 2'\n      entPhysicalHardwareRev.5\
    \ ==    'B(1.00.03)'\n      entPhysicalSoftwareRev.5 ==    ''\n      entPhysicalFirmwareRev.5\
    \ ==    ''\n      entPhysicalSerialNum.5 ==      ''\n      entPhysicalMfgName.5\
    \ ==        'Acme'\n      entPhysicalModelName.5 ==      'RB'\n      entPhysicalAlias.5\
    \ ==          ''\n      entPhysicalAssetID.5 ==        ''\n      entPhysicalIsFRU.5\
    \ ==          false(2)\n      entPhysicalDescr.6 ==          'Acme Hub Slot Type\
    \ RB'\n      entPhysicalVendorType.6  ==    acmeProducts.slotTypes.5\n      entPhysicalContainedIn.6\
    \ ==    1\n      entPhysicalClass.6 ==          container(5)\n      entPhysicalParentRelPos.6\
    \ ==   3\n      entPhysicalName.6 ==           'Slot 3'\n      entPhysicalHardwareRev.6\
    \ ==    'B(1.00.03)'\n      entPhysicalSoftwareRev.6 ==    ''\n      entPhysicalFirmwareRev.6\
    \ ==    ''\n      entPhysicalSerialNum.6 ==      ''\n      entPhysicalMfgName.6\
    \ ==        'Acme'\n      entPhysicalModelName.6 ==      'RB'\n      entPhysicalAlias.6\
    \ ==          ''\n      entPhysicalAssetID.6 ==        ''\n      entPhysicalIsFRU.6\
    \ ==          false(2)\n   Slot 1 contains a plug-in module with 4 10-BaseT ports:\n\
    \      entPhysicalDescr.7  ==         'Acme 10Base-T Module 114'\n      entPhysicalVendorType.7\
    \ ==     acmeProducts.moduleTypes.32\n      entPhysicalContainedIn.7  ==   4\n\
    \      entPhysicalClass.7 ==          module(9)\n      entPhysicalParentRelPos.7\
    \ ==   1\n      entPhysicalName.7 ==           'M1'\n      entPhysicalHardwareRev.7\
    \ ==    'A(1.02.01)'\n      entPhysicalSoftwareRev.7 ==    '1.7.2'\n      entPhysicalFirmwareRev.7\
    \ ==    'A(1.5)'\n      entPhysicalSerialNum.7 ==      'C100096244'\n      entPhysicalMfgName.7\
    \ ==        'Acme'\n      entPhysicalModelName.7 =       '114'\n      entPhysicalAlias.7\
    \ ==          'bldg09:floor1:eng'\n      entPhysicalAssetID.7 ==        '0007962951'\n\
    \      entPhysicalIsFRU.7 ==          true(1)\n      entPhysicalDescr.8 ==   \
    \       'Acme 10Base-T Port RB'\n      entPhysicalVendorType.8 ==     acmeProducts.portTypes.10\n\
    \      entPhysicalContainedIn.8  ==   7\n      entPhysicalClass.8 ==         \
    \ port(10)\n      entPhysicalParentRelPos.8 ==   1\n      entPhysicalName.8 ==\
    \           'Ethernet-A'\n      entPhysicalHardwareRev.8 ==    'A(1.04F)'\n  \
    \    entPhysicalSoftwareRev.8 ==    ''\n      entPhysicalFirmwareRev.8 ==    '1.4'\n\
    \      entPhysicalSerialNum.8 ==      ''\n      entPhysicalMfgName.8 ==      \
    \  'Acme'\n      entPhysicalModelName.8 ==      'RB'\n      entPhysicalAlias.8\
    \ ==          ''\n      entPhysicalAssetID.8 ==        ''\n      entPhysicalIsFRU.8\
    \ ==          false(2)\n      entPhysicalDescr.9  ==         'Acme 10Base-T Port\
    \ RB'\n      entPhysicalVendorType.9 ==     acmeProducts.portTypes.10\n      entPhysicalContainedIn.9\
    \ ==    7\n      entPhysicalClass.9 ==          port(10)\n      entPhysicalParentRelPos.9\
    \ ==   2\n      entPhysicalName.9 ==           'Ethernet-B'\n      entPhysicalHardwareRev.9\
    \ ==    'A(1.04F)'\n      entPhysicalSoftwareRev.9 ==    ''\n      entPhysicalFirmwareRev.9\
    \ ==    '1.4'\n      entPhysicalSerialNum.9 ==      ''\n      entPhysicalMfgName.9\
    \ ==        'Acme'\n      entPhysicalModelName.9 =       'RB'\n      entPhysicalAlias.9\
    \ ==          ''\n      entPhysicalAssetID.9 ==        ''\n      entPhysicalIsFRU.9\
    \ ==          false(2)\n      entPhysicalDescr.10 ==         'Acme 10Base-T Port\
    \ RB'\n      entPhysicalVendorType.10 ==    acmeProducts.portTypes.10\n      entPhysicalContainedIn.10\
    \ ==   7\n      entPhysicalClass.10 ==         port(10)\n      entPhysicalParentRelPos.10\
    \ ==  3\n      entPhysicalName.10 ==          'Ethernet-C'\n      entPhysicalHardwareRev.10\
    \ ==   'B(1.02.07)'\n      entPhysicalSoftwareRev.10 ==   ''\n      entPhysicalFirmwareRev.10\
    \ ==   '1.4'\n      entPhysicalSerialNum.10 ==     ''\n      entPhysicalMfgName.10\
    \ ==       'Acme'\n      entPhysicalModelName.10 ==     'RB'\n      entPhysicalAlias.10\
    \ ==         ''\n      entPhysicalAssetID.10 ==       ''\n      entPhysicalIsFRU.10\
    \ ==         false(2)\n      entPhysicalDescr.11 ==         'Acme 10Base-T Port\
    \ RB'\n      entPhysicalVendorType.11  ==   acmeProducts.portTypes.10\n      entPhysicalContainedIn.11\
    \ ==   7\n      entPhysicalClass.11 ==         port(10)\n      entPhysicalParentRelPos.11\
    \ ==  4\n      entPhysicalName.11 ==          'Ethernet-D'\n      entPhysicalHardwareRev.11\
    \ ==   'B(1.02.07)'\n      entPhysicalSoftwareRev.11 ==   ''\n      entPhysicalFirmwareRev.11\
    \ ==   '1.4'\n      entPhysicalSerialNum.11 ==     ''\n      entPhysicalMfgName.11\
    \ ==       'Acme'\n      entPhysicalModelName.11 ==     'RB'\n      entPhysicalAlias.11\
    \ ==         ''\n      entPhysicalAssetID.11 ==       ''\n      entPhysicalIsFRU.11\
    \ ==         false(2)\n   Slot 2 contains another ethernet module with 2 ports.\n\
    \      entPhysicalDescr.12 ==         'Acme 10Base-T Module Model 4'\n      entPhysicalVendorType.12\
    \ ==    acmeProducts.moduleTypes.30\n      entPhysicalContainedIn.12 =    5\n\
    \      entPhysicalClass.12 ==         module(9)\n      entPhysicalParentRelPos.12\
    \ ==  1\n      entPhysicalName.12 ==          'M2'\n      entPhysicalHardwareRev.12\
    \ ==   'A(1.01.07)'\n      entPhysicalSoftwareRev.12 ==   '1.8.4'\n      entPhysicalFirmwareRev.12\
    \ ==   'A(1.8)'\n      entPhysicalSerialNum.12 ==     'C100102384'\n      entPhysicalMfgName.12\
    \ ==       'Acme'\n      entPhysicalModelName.12 ==     '4'\n      entPhysicalAlias.12\
    \ ==         'bldg09:floor1:devtest'\n      entPhysicalAssetID.12 ==       '0007968462'\n\
    \      entPhysicalIsFRU.12 ==         true(1)\n      entPhysicalDescr.13 ==  \
    \       'Acme 802.3 AUI Port'\n      entPhysicalVendorType.13  ==   acmeProducts.portTypes.11\n\
    \      entPhysicalContainedIn.13 ==   12\n      entPhysicalClass.13 ==       \
    \  port(10)\n      entPhysicalParentRelPos.13 ==  1\n      entPhysicalName.13\
    \ ==          'AUI'\n      entPhysicalHardwareRev.13 ==   'A(1.06F)'\n      entPhysicalSoftwareRev.13\
    \ ==   ''\n      entPhysicalFirmwareRev.13 ==   '1.5'\n      entPhysicalSerialNum.13\
    \ ==     ''\n      entPhysicalMfgName.13 ==       'Acme'\n      entPhysicalModelName.13\
    \ ==     ''\n      entPhysicalAlias.13 ==         ''\n      entPhysicalAssetID.13\
    \ ==       ''\n      entPhysicalIsFRU.13 ==         false(2)\n      entPhysicalDescr.14\
    \ ==         'Acme 10Base-T Port RD'\n      entPhysicalVendorType.14  ==   acmeProducts.portTypes.14\n\
    \      entPhysicalContainedIn.14 ==   12\n      entPhysicalClass.14 ==       \
    \  port(10)\n      entPhysicalParentRelPos.14 ==  2\n      entPhysicalName.14\
    \ ==          'E2'\n      entPhysicalHardwareRev.14 ==   'B(1.01.02)'\n      entPhysicalSoftwareRev.14\
    \ ==   ''\n      entPhysicalFirmwareRev.14 ==   '2.1'\n      entPhysicalSerialNum.14\
    \ ==     ''\n      entPhysicalMfgName.14 ==       'Acme'\n      entPhysicalModelName.14\
    \ ==     ''\n      entPhysicalAlias.14 ==         ''\n      entPhysicalAssetID.14\
    \ ==       ''\n      entPhysicalIsFRU.14 ==         false(2)\n"
- title: Logical entities -- entLogicalTable; with SNMPv3 support
  contents:
  - "Logical entities -- entLogicalTable; with SNMPv3 support\n   Repeater 1--comprised\
    \ of any ports attached to backplane 1\n      entLogicalDescr.1 ==           'Acme\
    \ repeater v3.1'\n      entLogicalType.1  ==           snmpDot3RptrMgt\n     \
    \ entLogicalCommunity.1          'public-repeater1'\n      entLogicalTAddress.1\
    \ ==        124.125.126.127:161\n      entLogicalTDomain.1 ==         snmpUDPDomain\n\
    \      entLogicalContextEngineID.1 == '80000777017c7d7e7f'H\n      entLogicalContextName.1\
    \ ==     'repeater1'\n   Repeater 2--comprised of any ports attached to backplane\
    \ 2:\n      entLogicalDescr.2 ==           'Acme repeater v3.1'\n      entLogicalType.2\
    \  ==           snmpDot3RptrMgt\n      entLogicalCommunity.2 ==       'public-repeater2'\n\
    \      entLogicalTAddress.2 ==        124.125.126.127:161\n      entLogicalTDomain.2\
    \ ==         snmpUDPDomain\n      entLogicalContextEngineID.2 == '80000777017c7d7e7f'H\n\
    \      entLogicalContextName.2 ==     'repeater2'\n"
- title: 'Logical to Physical Mappings -- entLPMappingTable:'
  contents:
  - "Logical to Physical Mappings -- entLPMappingTable:\n  repeater1 uses backplane\
    \ 1, slot 1-ports 1 & 2, slot 2-port 1\n  [ed. -- Note that a mapping to the module\
    \ is not included,\n   since in this example represents a port-switchable hub.\n\
    \   Even though all ports on the module could belong to the\n   same repeater\
    \ as a matter of configuration, the LP port\n   mappings should not be replaced\
    \ dynamically with a single\n   mapping for the module (e.g., entLPPhysicalIndex.1.7).\n\
    \   If all ports on the module shared a single backplane connection,\n   then\
    \ a single mapping for the module would be more appropriate. ]\n     entLPPhysicalIndex.1.2\
    \ ==       2\n     entLPPhysicalIndex.1.8 ==       8\n     entLPPhysicalIndex.1.9\
    \ ==       9\n     entLPPhysicalIndex.1.13 ==      13\n  repeater2 uses backplane\
    \ 2, slot 1-ports 3 & 4, slot 2-port 2\n      entLPPhysicalIndex.2.3 ==      3\n\
    \      entLPPhysicalIndex.2.10 ==     10\n      entLPPhysicalIndex.2.11 ==   \
    \  11\n      entLPPhysicalIndex.2.14 ==     14\n"
- title: 'Physical to Logical to MIB Alias Mappings -- entAliasMappingTable:'
  contents:
  - "Physical to Logical to MIB Alias Mappings -- entAliasMappingTable:\n  Repeater\
    \ Port Identifier values are shared by both repeaters:\n      entAliasMappingIdentifier.8.0\
    \ ==      rptrPortGroupIndex.1.1\n      entAliasMappingIdentifier.9.0 ==     \
    \ rptrPortGroupIndex.1.2\n      entAliasMappingIdentifier.10.0 ==     rptrPortGroupIndex.1.3\n\
    \      entAliasMappingIdentifier.11.0 ==     rptrPortGroupIndex.1.4\n      entAliasMappingIdentifier.13.0\
    \ ==     rptrPortGroupIndex.2.1\n      entAliasMappingIdentifier.14.0 ==     rptrPortGroupIndex.2.2\n"
- title: Physical Containment Tree -- entPhysicalContainsTable
  contents:
  - "Physical Containment Tree -- entPhysicalContainsTable\n  chassis has two backplanes\
    \ and three containers:\n      entPhysicalChildIndex.1.2 ==   2\n      entPhysicalChildIndex.1.3\
    \ ==   3\n      entPhysicalChildIndex.1.4 ==   4\n      entPhysicalChildIndex.1.5\
    \ ==   5\n      entPhysicalChildIndex.1.6 ==   6\n  container 1 has a module:\n\
    \      entPhysicalChildIndex.4.7 ==   7\n  container 2 has a module\n      entPhysicalChildIndex.5.12\
    \ ==  12\n  [ed. - in this example, container 3 is empty.]\n  module 1 has 4 ports:\n\
    \      entPhysicalChildIndex.7.8 ==   8\n      entPhysicalChildIndex.7.9 ==  \
    \ 9\n      entPhysicalChildIndex.7.10 ==  10\n      entPhysicalChildIndex.7.11\
    \ ==  11\n  module 2 has 2 ports:\n      entPhysicalChildIndex.12.13 == 13\n \
    \     entPhysicalChildIndex.12.14 == 14\n"
- title: 5.  Intellectual Property
  contents:
  - "5.  Intellectual Property\n   The IETF takes no position regarding the validity\
    \ or scope of any\n   intellectual property or other rights that might be claimed\
    \ to\n   pertain to the implementation or use of the technology described in\n\
    \   this document or the extent to which any license under such rights\n   might\
    \ or might not be available; neither does it represent that it\n   has made any\
    \ effort to identify any such rights.  Information on the\n   IETF's procedures\
    \ with respect to rights in standards-track and\n   standards-related documentation\
    \ can be found in BCP-11.  Copies of\n   claims of rights made available for publication\
    \ and any assurances of\n   licenses to be made available, or the result of an\
    \ attempt made to\n   obtain a general license or permission for the use of such\n\
    \   proprietary rights by implementors or users of this specification can\n  \
    \ be obtained from the IETF Secretariat.\n   The IETF invites any interested party\
    \ to bring to its attention any\n   copyrights, patents or patent applications,\
    \ or other proprietary\n   rights which may cover technology that may be required\
    \ to practice\n   this standard.  Please address the information to the IETF Executive\n\
    \   Director.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   This memo has been produced by the IETF's Entity MIB\
    \ working group.\n"
- title: 7.  References
  contents:
  - "7.  References\n   [RFC1155] Rose, M. and K. McCloghrie, \"Structure and Identification\n\
    \             of Management Information for TCP/IP-based Internets\", STD\n  \
    \           16, RFC 1155, May 1990.\n   [RFC1157] Case, J., Fedor, M., Schoffstall,\
    \ M. and J. Davin, \"Simple\n             Network Management Protocol\", STD 15,\
    \ RFC 1157, May 1990.\n   [RFC1212] Rose, M. and K. McCloghrie, \"Concise MIB\
    \ Definitions\", STD\n             16, RFC 1212, March 1991.\n   [RFC1215] Rose,\
    \ M., \"A Convention for Defining Traps for use with the\n             SNMP\"\
    , RFC 1215, March 1991.\n   [RFC1493] Decker, E., Langille, P., Rijsinghani, A.\
    \ and K.\n             McCloghrie, \"Definitions of Managed Objects for Bridges\"\
    ,\n             RFC 1493, July 1993.\n   [RFC1516] McMaster, D. and K. McCloghrie,\
    \ \"Definitions of Managed\n             Objects for IEEE 802.3 Repeater Devices\"\
    , RFC 1516,\n             September 1993.\n   [RFC1901] Case, J., McCloghrie,\
    \ K., Rose, M. and S. Waldbusser,\n             \"Introduction to Community-based\
    \ SNMPv2\", RFC 1901, January\n             1996.\n   [RFC1905] Case, J., McCloghrie,\
    \ K., Rose, M. and S. Waldbusser,\n             \"Protocol Operations for Version\
    \ 2 of the Simple Network\n             Management Protocol (SNMPv2)\", RFC 1905,\
    \ January 1996.\n   [RFC1906] Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\n\
    \             \"Transport Mappings for Version 2 of the Simple Network\n     \
    \        Management Protocol (SNMPv2)\", RFC 1906, January 1996.\n   [RFC2026]\
    \ Bradner, S., \"The Internet Standards Process -- Revision\n             3\"\
    , BCP 9, RFC 2026, October 1996.\n   [RFC2037] McCloghrie, K. and A. Bierman,\
    \ \"Entity MIB using SMIv2\",\n             RFC 2037, October 1996.\n   [RFC2108]\
    \ de Graaf, K., Romascanu, D., McMaster, D. and K.\n             McCloghrie, \"\
    Definitions of Managed Objects for IEEE 802.3\n             Repeater Devices using\
    \ SMIv2\", RFC 2108, February 1997.\n   [RFC2233] McCloghrie, K. and F. Kastenholz,\
    \ \"The Interfaces Group MIB\n             Using SMIv2\", RFC 2233, November 1997.\n\
    \   [RFC2570] Case, J., Mundy, R., Partain, D. and B. Stewart,\n             \"\
    Introduction to Version 3 of the Internet-standard Network\n             Management\
    \ Framework\", RFC 2570, April 1999.\n   [RFC2571] Harrington, D., Presuhn, R.\
    \ and B. Wijnen, \"An Architecture\n             for Describing SNMP Management\
    \ Frameworks\", RFC 2571, April\n             1999.\n   [RFC2572] Case, J., Harrington\
    \ D., Presuhn R. and B. Wijnen, \"Message\n             Processing and Dispatching\
    \ for the Simple Network\n             Management Protocol (SNMP)\", RFC 2572,\
    \ April 1999.\n   [RFC2573] Levi, D., Meyer, P. and B. Stewart, \"SNMPv3 Applications\"\
    ,\n             RFC 2573, April 1999.\n   [RFC2574] Blumenthal, U. and B. Wijnen,\
    \ \"User-based Security Model\n             (USM) for version 3 of the Simple\
    \ Network Management\n             Protocol (SNMPv3)\", RFC 2574, April 1999.\n\
    \   [RFC2575] Wijnen, B., Presuhn, R. and K. McCloghrie, \"View-based\n      \
    \       Access Control Model (VACM) for the Simple Network\n             Management\
    \ Protocol (SNMP)\", RFC 2575, April 1999.\n   [RFC2578] McCloghrie, K., Perkins,\
    \ D., Schoenwaelder, J., Case, J.,\n             Rose, M.  and S. Waldbusser,\
    \ \"Structure of Management\n             Information Version 2 (SMIv2)\", STD\
    \ 58, RFC 2578, April\n             1999.\n   [RFC2579] McCloghrie, K., Perkins,\
    \ D., Schoenwaelder, J., Case, J.,\n             Rose, M.  and S. Waldbusser,\
    \ \"Textual Conventions for\n             SMIv2\", STD 58, RFC 2579, April 1999.\n\
    \   [RFC2580] McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J.,\n    \
    \         Rose, M.  and S. Waldbusser, \"Conformance Statements for\n        \
    \     SMIv2\", STD 58, RFC 2580, April 1999.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   There are a number of management objects defined\
    \ in this MIB that\n   have a MAX-ACCESS clause of read-write and/or read-create.\
    \  Such\n   objects may be considered sensitive or vulnerable in some network\n\
    \   environments.  The support for SET operations in a non-secure\n   environment\
    \ without proper protection can have a negative effect on\n   network operations.\n\
    \   There are a number of managed objects in this MIB that may contain\n   sensitive\
    \ information. These are:\n      entPhysicalDescr\n      entPhysicalVendorType\n\
    \      entPhysicalHardwareRev\n      entPhysicalFirmwareRev\n      entPhysicalSoftwareRev\n\
    \      entPhysicalSerialNum\n      entPhysicalMfgName\n      entPhysicalModelName\n\
    \   These objects expose information about the physical entities within a\n  \
    \ managed system, which may be used to identify the vendor, model, and\n   version\
    \ information of each system component.\n      entPhysicalAssetID\n   This object\
    \ can allow asset identifiers for various system components\n   to be exposed,\
    \ in the event this MIB object is actually configured by\n   an NMS application.\n\
    \      entLogicalDescr\n      entLogicalType\n   These objects expose the type\
    \ of logical entities present in the\n   managed system.\n      entLogicalCommunity\n\
    \   This object exposes community names associated with particular\n   logical\
    \ entites within the system.\n      entLogicalTAddress\n      entLogicalTDomain\n\
    \   These objects expose network addresses that can be used to\n   communicate\
    \ with an SNMP agent on behalf of particular logical\n   entities within the system.\n\
    \      entLogicalContextEngineID\n      entLogicalContextName\n   These objects\
    \ identify the authoritative SNMP engine that contains\n   information on behalf\
    \ of particular logical entities within the\n   system.\n   It is thus important\
    \ to control even GET access to these objects and\n   possibly to even encrypt\
    \ the values of these object when sending them\n   over the network via SNMP.\
    \  Not all versions of SNMP provide features\n   for such a secure environment.\n\
    \   SNMPv1 by itself is not a secure environment.  Even if the network\n   itself\
    \ is secure (for example by using IPSec), even then, there is no\n   control as\
    \ to who on the secure network is allowed to access and\n   GET/SET (read/change/create/delete)\
    \ the objects in this MIB.\n   It is recommended that the implementers consider\
    \ the security\n   features as provided by the SNMPv3 framework.  Specifically,\
    \ the use\n   of the User-based Security Model RFC 2574 [RFC2574] and the View-\n\
    \   based Access Control Model RFC 2575 [RFC2575] is recommended.\n   It is then\
    \ a customer/user responsibility to ensure that the SNMP\n   entity giving access\
    \ to an instance of this MIB, is properly\n   configured to give access to the\
    \ objects only to those principals\n   (users) that have legitimate rights to\
    \ indeed GET or SET\n   (change/create/delete) them.\n"
- title: 12.  Authors' Addresses
  contents:
  - "12.  Authors' Addresses\n   Keith McCloghrie\n   Cisco Systems, Inc.\n   170\
    \ West Tasman Drive\n   San Jose, CA 95134 USA\n   Phone: +1 408-526-5260\n  \
    \ EMail: kzm@cisco.com\n   Andy Bierman\n   Cisco Systems, Inc.\n   170 West Tasman\
    \ Drive\n   San Jose, CA 95134 USA\n   Phone: +1 408-527-3711\n   EMail: abierman@cisco.com\n"
- title: 9.  Full Copyright Statement
  contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
