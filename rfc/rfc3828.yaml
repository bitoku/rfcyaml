- title: __initial_text__
  contents:
  - '           The Lightweight User Datagram Protocol (UDP-Lite)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Lightweight User Datagram Protocol (UDP-\n\
    \   Lite), which is similar to the User Datagram Protocol (UDP) (RFC\n   768),\
    \ but can also serve applications in error-prone network\n   environments that\
    \ prefer to have partially damaged payloads delivered\n   rather than discarded.\
    \  If this feature is not used, UDP-Lite is\n   semantically identical to UDP.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Terminology. . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Protocol Description . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n       3.1.  Fields . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n       3.2.  Pseudo Header. . . . . . . . . . . . . . . . . . . .\
    \ . .  5\n       3.3.  Application Interface. . . . . . . . . . . . . . . . .\
    \ .  5\n       3.4.  IP Interface . . . . . . . . . . . . . . . . . . . . . .\
    \  6\n       3.5.  Jumbograms . . . . . . . . . . . . . . . . . . . . . . .  6\n\
    \   4.  Lower Layer Considerations . . . . . . . . . . . . . . . . . .  6\n  \
    \ 5.  Compatibility with UDP . . . . . . . . . . . . . . . . . . . .  7\n   6.\
    \  Security Considerations. . . . . . . . . . . . . . . . . . . .  8\n   7.  IANA\
    \ Considerations. . . . . . . . . . . . . . . . . . . . . .  8\n   8.  References\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . .  9\n       8.1.  Normative\
    \ References . . . . . . . . . . . . . . . . . .  9\n       8.2.  Informative\
    \ References . . . . . . . . . . . . . . . . .  9\n   9.  Acknowledgements . .\
    \ . . . . . . . . . . . . . . . . . . . . . 10\n   10. Authors' Addresses . .\
    \ . . . . . . . . . . . . . . . . . . . . 11\n   11. Full Copyright Statement\
    \ . . . . . . . . . . . . . . . . . . . 12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes a new transport protocol, UDP-Lite,\
    \ (also\n   known as UDPLite).  This new protocol is based on three observations:\n\
    \   First, there is a class of applications that benefit from having\n   damaged\
    \ data delivered rather than discarded by the network.  A\n   number of codecs\
    \ for voice and video fall into this class (e.g., the\n   AMR speech codec [RFC-3267],\
    \ the Internet Low Bit Rate Codec [ILBRC],\n   and error resilient H.263+ [ITU-H.263],\
    \ H.264 [ITU-H.264; H.264], and\n   MPEG-4 [ISO-14496] video codecs).  These codecs\
    \ may be designed to\n   cope better with errors in the payload than with loss\
    \ of entire\n   packets.\n   Second, all links that support IP transmission should\
    \ use a strong\n   link layer integrity check (e.g., CRC-32 [RFC-3819]), and this\
    \ MUST\n   be used by default for IP traffic.  When the under-lying link\n   supports\
    \ it, certain types of traffic (e.g., UDP-Lite) may benefit\n   from a different\
    \ link behavior that permits partially damaged IP\n   packets to be forwarded\
    \ when requested [RFC-3819].  Several radio\n   technologies (e.g., [3GPP]) support\
    \ this link behavior when operating\n   at a point where cost and delay are sufficiently\
    \ low.  If error-prone\n   links are aware of the error sensitive portion of a\
    \ packet, it is\n   also possible for the physical link to provide greater protection\
    \ to\n   reduce the probability of corruption of these error sensitive bytes\n\
    \   (e.g., the use of unequal Forward Error Correction).\n   Third, intermediate\
    \ layers (i.e., IP and the transport layer\n   protocols) should not prevent error-tolerant\
    \ applications from\n   running well in the presence of such links.  IP is not\
    \ a problem in\n   this regard, since the IP header has no checksum that covers\
    \ the IP\n   payload.  The generally available transport protocol best suited\
    \ for\n   these applications is UDP, since it has no overhead for\n   retransmission\
    \ of erroneous packets, in-order delivery, or error\n   correction.  In IPv4 [RFC-791],\
    \ the UDP checksum covers either the\n   entire packet or nothing at all.  In\
    \ IPv6 [RFC-2460], the UDP\n   checksum is mandatory and must not be disabled.\
    \  The IPv6 header does\n   not have a header checksum and it was deemed necessary\
    \ to always\n   protect the IP addressing information by making the UDP checksum\n\
    \   mandatory.\n   A transport protocol is needed that conforms to the properties\
    \ of\n   link layers and applications described above [LDP99].  The error-\n \
    \  detection mechanism of the transport layer must be able to protect\n   vital\
    \ information such as headers, but also to optionally ignore\n   errors best dealt\
    \ with by the application.  The set of octets to be\n   verified by the checksum\
    \ is best specified by the sending\n   application.\n   UDP-Lite provides a checksum\
    \ with an optional partial coverage.  When\n   using this option, a packet is\
    \ divided into a sensitive part (covered\n   by the checksum) and an insensitive\
    \ part (not covered by the\n   checksum).  Errors in the insensitive part will\
    \ not cause the packet\n   to be discarded by the transport layer at the receiving\
    \ end host.\n   When the checksum covers the entire packet, which should be the\n\
    \   default, UDP-Lite is semantically identical to UDP.\n   Compared to UDP, the\
    \ UDP-Lite partial checksum provides extra\n   flexibility for applications that\
    \ want to define the payload as\n   partially insensitive to bit errors.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC-2119].\n"
- title: 3.  Protocol Description
  contents:
  - "3.  Protocol Description\n   The UDP-Lite header is shown in figure 1.  Its format\
    \ differs from\n   UDP in that the Length field has been replaced with a Checksum\n\
    \   Coverage field.  This can be done since information about UDP packet\n   length\
    \ can be provided by the IP module in the same manner as for TCP\n   [RFC-793].\n\
    \       0              15 16             31\n      +--------+--------+--------+--------+\n\
    \      |     Source      |   Destination   |\n      |      Port       |      Port\
    \       |\n      +--------+--------+--------+--------+\n      |    Checksum  \
    \   |                 |\n      |    Coverage     |    Checksum     |\n      +--------+--------+--------+--------+\n\
    \      |                                   |\n      :              Payload   \
    \           :\n      |                                   |\n      +-----------------------------------+\n\
    \      Figure 1: UDP-Lite Header Format\n"
- title: 3.1.  Fields
  contents:
  - "3.1.  Fields\n   The fields Source Port and Destination Port are defined as in\
    \ the UDP\n   specification [RFC-768].  UDP-Lite uses the same set of port number\n\
    \   values assigned by the IANA for use by UDP.\n   Checksum Coverage is the number\
    \ of octets, counting from the first\n   octet of the UDP-Lite header, that are\
    \ covered by the checksum.  The\n   UDP-Lite header MUST always be covered by\
    \ the checksum.  Despite this\n   requirement, the Checksum Coverage is expressed\
    \ in octets from the\n   beginning of the UDP-Lite header in the same way as for\
    \ UDP.  A\n   Checksum Coverage of zero indicates that the entire UDP-Lite packet\n\
    \   is covered by the checksum.  This means that the value of the\n   Checksum\
    \ Coverage field MUST be either 0 or at least 8.  A UDP-Lite\n   packet with a\
    \ Checksum Coverage value of 1 to 7 MUST be discarded by\n   the receiver.  Irrespective\
    \ of the Checksum Coverage, the computed\n   Checksum field MUST include a pseudo-header,\
    \ based on the IP header\n   (see below).  UDP-Lite packets with a Checksum Coverage\
    \ greater than\n   the IP length MUST also be discarded.\n   The Checksum field\
    \ is the 16-bit one's complement of the one's\n   complement sum of a pseudo-header\
    \ of information collected from the\n   IP header, the number of octets specified\
    \ by the Checksum Coverage\n   (starting at the first octet in the UDP-Lite header),\
    \ virtually\n   padded with a zero octet at the end (if necessary) to make a multiple\n\
    \   of two octets [RFC-1071].  Prior to computation, the checksum field\n   MUST\
    \ be set to zero.  If the computed checksum is 0, it is\n   transmitted as all\
    \ ones (the equivalent in one's complement\n   arithmetic).\n   Since the transmitted\
    \ checksum MUST NOT be all zeroes, an application\n   using UDP-Lite that wishes\
    \ to have no protection of the packet\n   payload should use a Checksum Coverage\
    \ value of 8.  This differs\n   from the use of UDP over IPv4 in that the minimal\
    \ UDP-Lite checksum\n   always covers the UDP-Lite protocol header, which includes\
    \ the\n   Checksum Coverage field.\n"
- title: 3.2.  Pseudo Header
  contents:
  - "3.2.  Pseudo Header\n   UDP and UDP-Lite use the same conceptually prefixed pseudo\
    \ header\n   from the IP layer for the checksum.  This pseudo header is different\n\
    \   for IPv4 and IPv6.  The pseudo header of UDP-Lite is different from\n   the\
    \ pseudo header of UDP in one way: The value of the Length field of\n   the pseudo\
    \ header is not taken from the UDP-Lite header, but rather\n   from information\
    \ provided by the IP module.  This computation is done\n   in the same manner\
    \ as for TCP [RFC-793], and implies that the Length\n   field of the pseudo header\
    \ includes the UDP-Lite header and all\n   subsequent octets in the IP payload.\n"
- title: 3.3.  Application Interface
  contents:
  - "3.3.  Application Interface\n   An application interface should allow the same\
    \ operations as for UDP.\n   In addition to this, it should provide a way for\
    \ the sending\n   application to pass the Checksum Coverage value to the UDP-Lite\n\
    \   module.  There should also be a way to pass the Checksum Coverage\n   value\
    \ to the receiving application, or at least let the receiving\n   application\
    \ block delivery of packets with coverage values less than\n   a value provided\
    \ by the application.\n   It is RECOMMENDED that the default behavior of UDP-Lite\
    \ be set to\n   mimic UDP by having the Checksum Coverage field match the length\
    \ of\n   the UDP-Lite packet and verify the entire packet.  Applications that\n\
    \   wish to define the payload as partially insensitive to bit errors\n   (e.g.,\
    \ error tolerant codecs using RTP [RFC-3550]) should do this by\n   an explicit\
    \ system call on the sender side.  Applications that wish\n   to receive payloads\
    \ that were only partially covered by a checksum\n   should inform the receiving\
    \ system by an explicit system call.\n   The characteristics of the links forming\
    \ an Internet path may vary\n   greatly.  It is therefore difficult to make assumptions\
    \ about the\n   level or patterns of errors that may occur in the corruption\n\
    \   insensitive part of the UDP-Lite payload.  Applications that use\n   UDP-Lite\
    \ should not make any assumptions regarding the correctness of\n   the received\
    \ data beyond the position indicated by the Checksum\n   Coverage field, and should,\
    \ if necessary, introduce their own\n   appropriate validity checks.\n"
- title: 3.4.  IP Interface
  contents:
  - "3.4.  IP Interface\n   As for UDP, the IP module must provide the pseudo header\
    \ to the UDP-\n   Lite protocol module (known as the UDPLite module).  The UDP-Lite\n\
    \   pseudo header contains the IP addresses and protocol fields of the IP\n  \
    \ header, and also the length of the IP payload, which is derived from\n   the\
    \ Length field in the IP header.\n   The sender IP module MUST NOT pad the IP\
    \ payload with extra octets,\n   since the length of the UDP-Lite payload delivered\
    \ to the receiver\n   depends on the length of the IP payload.\n"
- title: 3.5.  Jumbograms
  contents:
  - "3.5.  Jumbograms\n   The Checksum Coverage field is 16 bits and can represent\
    \ a Checksum\n   Coverage value of up to 65535 octets.  This allows arbitrary\
    \ checksum\n   coverage for IP packets, unless they are Jumbograms.  For Jumbograms,\n\
    \   the checksum can cover either the entire payload (when the Checksum\n   Coverage\
    \ field has the value zero), or else at most the initial 65535\n   octets of the\
    \ UDP-Lite packet.\n"
- title: 4.  Lower Layer Considerations
  contents:
  - "4.  Lower Layer Considerations\n   Since UDP-Lite can deliver packets with damaged\
    \ payloads to an\n   application that wishes to receive them, frames carrying\
    \ UDP-Lite\n   packets need not be discarded by lower layer protocols when there\
    \ are\n   errors only in the insensitive part.  For a link that supports\n   partial\
    \ error detection, the Checksum Coverage field in the UDP-Lite\n   header MAY\
    \ be used as a hint of where errors do not need to be\n   detected.  Lower layers\
    \ MUST use a strong error detection mechanism\n   [RFC-3819] to detect at least\
    \ errors that occur in the sensitive part\n   of the packet, and discard damaged\
    \ packets.  The sensitive part\n   consists of the octets between the first octet\
    \ of the IP header and\n   the last octet identified by the Checksum Coverage\
    \ field.  The\n   sensitive part would thus be treated in exactly the same way\
    \ as for a\n   UDP packet.\n   Link layers that do not support partial error detection\
    \ suitable for\n   UDP-Lite, as described above, MUST detect errors in the entire\
    \ UDP-\n   Lite packet, and MUST discard damaged packets [RFC-3819].  The whole\n\
    \   UDP-Lite packet is thus treated in exactly the same way as a UDP\n   packet.\n\
    \   It should be noted that UDP-Lite would only make a difference to an\n   application\
    \ if partial error detection, based on the partial checksum\n   feature of UDP-Lite,\
    \ is implemented also by link layers, as discussed\n   above.  Partial error detection\
    \ at the link layer would only make a\n   difference when implemented over error-prone\
    \ links.\n"
- title: 5.  Compatibility with UDP
  contents:
  - "5.  Compatibility with UDP\n   UDP and UDP-Lite have similar syntax and semantics.\
    \  Applications\n   designed for UDP may therefore use UDP-Lite instead, and will\
    \ by\n   default receive the same full packet coverage.  The similarities also\n\
    \   ease implementation of UDP-Lite, since only minor modifications are\n   needed\
    \ to an existing UDP implementation.\n   UDP-Lite has been allocated a separate\
    \ IP protocol identifier, 136\n   (UDPLite), that allows a receiver to identify\
    \ whether UDP or UDP-Lite\n   is used.  A destination end host that is unaware\
    \ of UDP-Lite will, in\n   general, return an ICMP \"Protocol Unreachable\" or\
    \ an ICMPv6 \"Payload\n   Type Unknown\" error message (depending on the IP protocol\
    \ type).\n   This simple method of detecting UDP-Lite unaware systems is the\n\
    \   primary benefit of having separate protocol identifiers.\n   The remainder\
    \ of this section provides the rationale for allocating a\n   separate IP protocol\
    \ identifier for UDP-Lite, rather than sharing the\n   IP protocol identifier\
    \ with UDP.\n   There are no known interoperability problems between UDP and UDP-Lite\n\
    \   if they were to share the protocol identifier with UDP.\n   Specifically,\
    \ there is no case where a potentially problematic packet\n   is delivered to\
    \ an unsuspecting application; a UDP-Lite payload with\n   partial checksum coverage\
    \ cannot be delivered to UDP applications,\n   and UDP packets that only partially\
    \ fill the IP payload cannot be\n   delivered to applications using UDP-Lite.\n\
    \   However, if the protocol identifier were to have been shared between\n   UDP\
    \ and UDP-Lite, and a UDP-Lite implementation was to send a UDP-\n   Lite packet\
    \ using a partial checksum to a UDP implementation, the UDP\n   implementation\
    \ would silently discard the packet, because a\n   mismatching pseudo header would\
    \ cause the UDP checksum to fail.\n   Neither the sending nor the receiving application\
    \ would be notified.\n   Potential solutions to this could have been:\n   1) explicit\
    \ application in-band signaling (while not using the\n      partial checksum coverage\
    \ option) to enable the sender to learn\n      whether the receiver is UDP-Lite\
    \ enabled or not, or\n   2) use of out-of-band signaling such as H.323, SIP, or\
    \ RTCP to convey\n      whether the receiver is UDP-Lite enabled.\n   Since UDP-Lite\
    \ has been assigned its own IP protocol identifier,\n   there is no need to consider\
    \ this possibility of delivery of a UDP-\n   Lite packet to an unsuspecting UDP\
    \ port.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The security impact of UDP-Lite is related to\
    \ its interaction with\n   authentication and encryption mechanisms.  When the\
    \ partial checksum\n   option of UDP-Lite is enabled, the insensitive portion\
    \ of a packet\n   may change in transit.  This is contrary to the idea behind\
    \ most\n   authentication mechanisms: authentication succeeds if the packet has\n\
    \   not changed in transit.  Unless authentication mechanisms that\n   operate\
    \ only on the sensitive part of packets are developed and used,\n   authentication\
    \ will always fail for UDP-Lite packets where the\n   insensitive part has been\
    \ damaged.\n   The IPsec integrity check (Encapsulation Security Protocol, ESP\n\
    \   [RFC-2406], or Authentication Header, AH [RFC-2402]) is applied (at\n   least)\
    \ to the entire IP packet payload. Corruption of any bit within\n   the protected\
    \ area will then result in the IP receiver discarding the\n   UDP-Lite packet.\n\
    \   When IPsec is used with ESP payload encryption, a link can not\n   determine\
    \ the specific transport protocol of a packet being forwarded\n   by inspecting\
    \ the IP packet payload.  In this case, the link MUST\n   provide a standard integrity\
    \ check covering the entire IP packet and\n   payload.  UDP-Lite provides no benefit\
    \ in this case.\n   Encryption (e.g., at the transport or application levels)\
    \ may be\n   used.  If a few bits of an encrypted packet are damaged, the\n  \
    \ decryption transform will typically spread errors so that the packet\n   becomes\
    \ too damaged to be of use.  Many encryption transforms today\n   exhibit this\
    \ behavior.  There exist encryption transforms, and stream\n   ciphers, which\
    \ do not cause error propagation.  Note that omitting an\n   integrity check can,\
    \ under certain circumstances, compromise\n   confidentiality [Bellovin98].  Proper\
    \ use of stream ciphers poses its\n   own challenges [BB01].  In particular, an\
    \ attacker can cause\n   predictable changes to the ultimate plaintext, even without\
    \ being\n   able to decrypt the ciphertext.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   A new IP protocol number, 136 has been assigned for\
    \ UDP-Lite.  The\n   name associated with this protocol number is \"UDPLite\"\
    .  This ensures\n   compatibility across a wide range of platforms, since on some\n\
    \   platforms the \"-\" character may not form part of a protocol entity\n   name.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC-768]    Postel, J., \"User Datagram Protocol\"\
    , STD 6, RFC 768,\n                August 1980.\n   [RFC-791]    Postel, J., \"\
    Internet Protocol\", STD 5, RFC 791,\n                September 1981.\n   [RFC-793]\
    \    Postel, J., \"Transmission Control Protocol\", STD 7, RFC\n             \
    \   793, September 1981.\n   [RFC-1071]   Braden, R., Borman, D. and C. Partridge,\
    \ \"Computing the\n                Internet Checksum\", RFC 1071, September 1988.\n\
    \   [RFC-2119]   Bradner, S., \"Key words for use in RFCs to Indicate\n      \
    \          Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC-2460]\
    \   Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n              \
    \  (IPv6) Specification\", RFC 2460, December 1998.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [Bellovin98] Bellovin, S.M., \"Cryptography\
    \ and the Internet\", in\n                Proceedings of CRYPTO '98, August 1988.\n\
    \   [BB01]       Bellovin, S. and M. Blaze, \"Cryptographic Modes of\n       \
    \         Operation for the Internet\", Second NIST Workshop on\n            \
    \    Modes of Operation, August 2001.\n   [3GPP]       \"Technical Specification\
    \ Group Services and System\n                Aspects; Quality of Service (QoS)\
    \ concept and\n                architecture\", TS 23.107 V5.9.0, Technical Specification\n\
    \                3rd  Generation Partnership Project, June 2003.\n   [H.264] \
    \     Hannuksela, M.M., Stockhammer, T., Westerlund, M. and D.\n             \
    \   Singer, \"RTP payload Format for H.264 Video\", Internet\n               \
    \ Draft, Work in Progress, March 2003.\n   [ILBRC]      S.V. Andersen, et. al.,\
    \ \"Internet Low Bit Rate Codec\",\n                Work in Progress, March 2003.\n\
    \   [ISO-14496]  ISO/IEC International Standard 1446 (MPEG-4),\n             \
    \   \"Information Technology Coding of Audio-Visual Objects\",\n             \
    \   January 2000.\n   [ITU-H.263]  \"Video Coding for Low Bit Rate Communication,\"\
    \ ITU-T\n                Recommendation H.263, January 1998.\n   [ITU-H.264] \
    \ \"Draft ITU-T Recommendation and Final Draft\n                International\
    \ Standard of Joint Video Specification\",\n                ITU-T Recommendation\
    \ H.264, May 2003.\n   [RFC-3819]   Karn, Ed., P., Bormann, C., Fairhurst, G.,\
    \ Grossman, D.,\n                Ludwig, R., Mahdavi, J., Montenegro, G., Touch,\
    \ J. and\n                L. Wood, \"Advice for Internet Subnetwork Designers\"\
    , BCP\n                89, RFC 3819, July 2004.\n   [RFC-3550]   Schulzrinne,\
    \ H., Casner, S., Frederick, R. and V.\n                Jacobson, \"RTP: A Transport\
    \ Protocol for Real-Time\n                Applications\", RFC 3550, July 2003.\n\
    \   [RFC-2402]   Kent, S. and R. Atkinson, \"IP Authentication Header\",\n   \
    \             RFC 2402, November 1998.\n   [RFC-2406]   Kent, S. and R. Atkinson,\
    \ \"IP Encapsulating Security\n                Payload (ESP)\", RFC 2406, November\
    \ 1998.\n   [RFC-3267]   Sjoberg, J., Westerlund, M., Lakeaniemi, A. and Q. Xie,\n\
    \                \"Real-Time Transport Protocol (RTP) Payload Format and\n   \
    \             File Storage Format for the Adaptive Multi-Rate (AMR)\n        \
    \        and Adaptive Multi-Rate Wideband (AMR-WB) Audio Codecs\",\n         \
    \       RFC 3267, June 2002.\n   [LDP99]      Larzon, L-A., Degermark, M. and\
    \ S. Pink, \"UDP Lite for\n                Real-Time Multimedia Applications\"\
    , Proceedings of the\n                IEEE International Conference of Communications\
    \ (ICC),\n                1999.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   Thanks to Ghyslain Pelletier for significant technical\
    \ and editorial\n   comments.  Thanks also to Steven Bellovin, Elisabetta Carrara,\
    \ and\n   Mats Naslund for reviewing the security considerations chapter, and\n\
    \   to Peter Eriksson for a language review, thereby improving the\n   clarity\
    \ of this document.\n"
- title: 10.  Authors' Addresses
  contents:
  - "10.  Authors' Addresses\n   Lars-Ake Larzon\n   Department of CS & EE\n   Lulea\
    \ University of Technology\n   S-971 87 Lulea, Sweden\n   EMail: lln@csee.ltu.se\n\
    \   Mikael Degermark\n   Department of Computer Science\n   The University of\
    \ Arizona\n   P.O. Box 210077\n   Tucson, AZ 85721-0077, USA\n   EMail: micke@cs.arizona.edu\n\
    \   Stephen Pink\n   The University of Arizona\n   P.O. Box 210077\n   Tucson,\
    \ AZ 85721-0077, USA\n   EMail: steve@cs.arizona.edu\n   Lars-Erik Jonsson\n \
    \  Ericsson AB\n   Box 920\n   S-971 28 Lulea, Sweden\n   EMail: lars-erik.jonsson@ericsson.com\n\
    \   Godred Fairhurst\n   Department of Engineering\n   University of Aberdeen\n\
    \   Aberdeen, AB24 3UE, UK\n   EMail: gorry@erg.abdn.ac.uk\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\
    \  This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78, and\n   except as set forth therein, the authors retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n\
    \   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
