- title: __initial_text__
  contents:
  - '         Sieve Email Filtering: Detecting Duplicate Deliveries

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines a new test command, \"duplicate\", for the\
    \ Sieve\n   email filtering language.  This test adds the ability to detect\n\
    \   duplications.  The main application for this new test is handling\n   duplicate\
    \ deliveries commonly caused by mailing list subscriptions or\n   redirected mail\
    \ addresses.  The detection is normally performed by\n   matching the message\
    \ ID to an internal list of message IDs from\n   previously delivered messages.\
    \  For more complex applications, the\n   \"duplicate\" test can also use the\
    \ content of a specific header field\n   or other parts of the message.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7352.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Conventions Used in This Document ...............................3\n  \
    \ 3. Test \"duplicate\" ................................................3\n  \
    \    3.1. Arguments \":header\" and \":uniqueid\" ........................5\n\
    \      3.2. Argument \":handle\" .........................................7\n\
    \      3.3. Arguments \":seconds\" and \":last\" ...........................8\n\
    \      3.4. Interaction with Other Sieve Extensions ....................9\n  \
    \ 4. Sieve Capability Strings ........................................9\n   5.\
    \ Examples ........................................................9\n      5.1.\
    \ Example 1 ..................................................9\n      5.2. Example\
    \ 2 .................................................10\n      5.3. Example 3\
    \ .................................................11\n      5.4. Example 4 .................................................12\n\
    \   6. Security Considerations ........................................12\n  \
    \ 7. IANA Considerations ............................................13\n   8.\
    \ Acknowledgements ...............................................14\n   9. References\
    \ .....................................................14\n      9.1. Normative\
    \ References ......................................14\n      9.2. Informative\
    \ References ....................................15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies an extension to the Sieve filtering\
    \ language\n   defined by RFC 5228 [SIEVE].  It adds a test to track whether or\
    \ not\n   a text string was seen before by the delivery agent in an earlier\n\
    \   execution of the Sieve script.  This can be used to detect and handle\n  \
    \ duplicate message deliveries.\n   Duplicate deliveries are a common side effect\
    \ of being subscribed to\n   a mailing list.  For example, if a member of the\
    \ list decides to\n   reply to both the user and the mailing list itself, the\
    \ user will\n   often get one copy of the message directly and another through\
    \ the\n   mailing list.  Also, if someone crossposts over several mailing lists\n\
    \   to which the user is subscribed, the user will likely receive a copy\n   from\
    \ each of those lists.  In another scenario, the user has several\n   redirected\
    \ mail addresses all pointing to his main mail account.  If\n   one of the user's\
    \ contacts sends the message to more than one of\n   those addresses, the user\
    \ will likely receive more than a single\n   copy.  Using the \"duplicate\" extension,\
    \ users have the means to\n   detect and handle such duplicates (e.g., by discarding\
    \ them, marking\n   them as \"seen\", or putting them in a special folder).\n\
    \   Duplicate messages are normally detected using the Message-ID header\n   field,\
    \ which is required to be unique for each message.  However, the\n   \"duplicate\"\
    \ test is flexible enough to use different criteria for\n   defining what makes\
    \ a message a duplicate (e.g., using the subject\n   line or parts of the message\
    \ body).  Other applications of this new\n   test command are also possible, as\
    \ long as the tracked unique value\n   is a string.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [KEYWORDS].\n   Conventions for notations are as in Section 1.1 of [SIEVE],\
    \ including\n   use of the \"Usage:\" label for the definition of action and tagged\n\
    \   arguments syntax.\n"
- title: 3.  Test "duplicate"
  contents:
  - "3.  Test \"duplicate\"\n   Usage: \"duplicate\" [\":handle\" <handle: string>]\n\
    \                      [\":header\" <header-name: string> /\n                \
    \          \":uniqueid\" <value: string>]\n                      [\":seconds\"\
    \ <timeout: number>] [\":last\"]\n   The \"duplicate\" test identifies the message\
    \ by a \"unique ID\" and,\n   using that unique ID, keeps track of which messages\
    \ were seen by a\n   \"duplicate\" test during an earlier Sieve execution.  In\
    \ its basic\n   form, the test gets the unique ID from the content of the message's\n\
    \   Message-ID header field.  The \"duplicate\" test evaluates to \"true\"\n \
    \  if the message was seen before, and it evaluates to \"false\" if it\n   was\
    \ not.\n   As a side effect, the \"duplicate\" test adds the unique ID to an\n\
    \   internal duplicate-tracking list once the Sieve execution finishes\n   successfully.\
    \  The first time a particular unique ID is seen, the\n   message is not a duplicate,\
    \ and the unique ID is added to the\n   tracking list.  If a future Sieve execution\
    \ sees a message whose\n   unique ID appears in the tracking list, that test will\
    \ evaluate to\n   \"true\", and that message will be considered a duplicate.\n\
    \   Note that this side effect is performed only when the \"duplicate\"\n   test\
    \ is actually evaluated.  If the \"duplicate\" test is nested in a\n   control\
    \ structure or if it is not the first item of an \"allof\" or\n   \"anyof\" test\
    \ list, its evaluation depends on the result of preceding\n   tests, which may\
    \ produce unexpected results.\n   Implementations MUST only update the internal\
    \ duplicate-tracking list\n   when the Sieve script execution finishes successfully.\
    \  If failing\n   script executions add the unique ID to the duplicate-tracking\
    \ list,\n   all \"duplicate\" tests in the Sieve script would erroneously yield\n\
    \   \"true\" for the next delivery attempt of the same message.  This\n   can\
    \ -- depending on the action taken for a duplicate -- easily lead\n   to discarding\
    \ the message without further notice.\n   However, deferring the definitive modification\
    \ of the tracking list\n   to the end of a successful Sieve script execution is\
    \ not without\n   problems.  It can cause a race condition when a duplicate message\
    \ is\n   delivered in parallel before the tracking list is updated.  This way,\n\
    \   a duplicate message could be missed by the \"duplicate\" test.  More\n   complex\
    \ implementations could use a locking mechanism to prevent this\n   problem. \
    \ But, irrespective of what implementation is chosen,\n   situations in which\
    \ the \"duplicate\" test erroneously yields \"true\"\n   MUST be prevented.\n\
    \   The \"duplicate\" test MUST only check for duplicates amongst unique ID\n\
    \   values encountered in previous executions of the Sieve script; it\n   MUST\
    \ NOT consider ID values encountered earlier in the current Sieve\n   script execution\
    \ as potential duplicates.  This means that all\n   \"duplicate\" tests in a Sieve\
    \ script execution, including those\n   located in scripts included using the\
    \ \"include\" [INCLUDE] extension,\n   MUST always yield the same result if the\
    \ arguments are identical.\n   The Message-ID header field is assumed to be globally\
    \ unique as\n   required in Section 3.6.4 of RFC 5322 [IMAIL].  In practice, this\n\
    \   assumption may not always prove to be true.  The \"duplicate\" test\n   does\
    \ not deal with this situation, which means that false duplicates\n   may be detected\
    \ in this case.  However, the user can address such\n   situations by specifying\
    \ an alternative means of message\n   identification using the \":header\" or\
    \ the \":uniqueid\" argument, as\n   described in the next section.\n"
- title: 3.1.  Arguments ":header" and ":uniqueid"
  contents:
  - "3.1.  Arguments \":header\" and \":uniqueid\"\n   Duplicate tracking involves\
    \ determining the unique ID for a\n   given message and checking whether that\
    \ unique ID is in the\n   duplicate-tracking list.  The unique ID for a message\
    \ is\n   determined as follows:\n   o  When neither the \":header\" argument nor\
    \ the \":uniqueid\" argument\n      is used, the unique ID is the content of the\
    \ message's Message-ID\n      header field.\n   o  When the \":header\" argument\
    \ is used, the unique ID is the content\n      of the specified header field in\
    \ the message.  The header field\n      name is not part of the resulting unique\
    \ ID; it consists only of\n      the field value.\n   o  When the \":uniqueid\"\
    \ argument is used, the unique ID is the string\n      parameter that is specified\
    \ with the argument.\n   The \":header\" and \":uniqueid\" arguments are mutually\
    \ exclusive;\n   specifying both for a single \"duplicate\" test command MUST\
    \ trigger an\n   error.\n   The syntax rules for the header name parameter of\
    \ the \":header\"\n   argument are specified in Section 2.4.2.2 of RFC 5228 [SIEVE].\
    \  Note\n   that implementations MUST NOT trigger an error for an invalid header\n\
    \   name.  Instead, the \"duplicate\" test MUST yield \"false\"\n   unconditionally\
    \ in this case.  The parameter of the \":uniqueid\"\n   argument can be any string.\n\
    \   If the tracked unique ID value is extracted directly from a message\n   header\
    \ field (i.e., when the \":uniqueid\" argument is not used), the\n   following\
    \ operations MUST be performed before the actual duplicate\n   verification:\n\
    \   o  Unfold the header line as described in Section 2.2.3 of RFC 5322\n    \
    \  [IMAIL] (see also Section 2.4.2.2 of RFC 5228 [SIEVE]).\n   o  If possible,\
    \ convert the header value to Unicode, encoded as UTF-8\n      (see Section 2.7.2\
    \ of RFC 5228 [SIEVE]).  If conversion is not\n      possible, the value is left\
    \ unchanged.\n   o  Trim leading and trailing whitespace from the header value\
    \ (see\n      Section 2.2 of RFC 5228 [SIEVE]).\n   Note that these rules also\
    \ apply to the Message-ID header field used\n   by the basic \"duplicate\" test\
    \ without a \":header\" or \":uniqueid\"\n   argument.  When the \":uniqueid\"\
    \ argument is used, any normalization\n   needs to be done in the Sieve script\
    \ itself as the unique ID is\n   created.\n   If the header field specified using\
    \ the \":header\" argument exists\n   multiple times in the message, extraction\
    \ of the unique ID MUST use\n   only the first occurrence.  This is true whether\
    \ or not multiple\n   occurrences are allowed by Section 3.6 of RFC 5322 [IMAIL].\
    \  If the\n   specified header field is not present in the message, the \"duplicate\"\
    \n   test MUST yield \"false\" unconditionally.  In that case, the\n   duplicate-tracking\
    \ list is left unmodified by this test, since no\n   unique ID value is available.\
    \  The same rules apply with respect to\n   the Message-ID header field for the\
    \ basic \"duplicate\" test without a\n   \":header\" or \":uniqueid\" argument,\
    \ since that header field could also\n   be missing or occur multiple times.\n\
    \   The string parameter of the \":uniqueid\" argument can be composed from\n\
    \   arbitrary text extracted from the message using the \"variables\"\n   [VARIABLES]\
    \ extension.  To extract text from the message body, the\n   \"foreverypart\"\
    \ and \"extracttext\" [SIEVE-MIME] extensions need to be\n   used as well.  This\
    \ provides the user with detailed control over how\n   the message's unique ID\
    \ is created.\n   The unique ID MUST be matched case-sensitively with the contents\
    \ of\n   the duplicate-tracking list, irrespective of how the unique ID was\n\
    \   determined.  To achieve case-insensitive behavior when the\n   \":uniqueid\"\
    \ argument is used, the \"set\" command added by the\n   \"variables\" [VARIABLES]\
    \ extension can be used to normalize the unique\n   ID value to upper or lower\
    \ case.\n"
- title: 3.2.  Argument ":handle"
  contents:
  - "3.2.  Argument \":handle\"\n   The \"duplicate\" test MUST track a unique ID\
    \ value independent of its\n   source.  This means that all values in the duplicate-tracking\
    \ list\n   should be used for duplicate testing, regardless of whether they were\n\
    \   obtained from the Message-ID header field, from an arbitrary header\n   specified\
    \ using the \":header\" argument, or explicitly from the\n   \":uniqueid\" argument.\
    \  The following three examples are equivalent\n   and match the same entry in\
    \ the duplicate-tracking list:\n   require \"duplicate\";\n   if duplicate {\n\
    \     discard;\n   }\n   require \"duplicate\";\n   if duplicate :header \"message-id\"\
    \ {\n     discard;\n   }\n   require [\"duplicate\", \"variables\"];\n   if header\
    \ :matches \"message-id\" \"*\" {\n     if duplicate :uniqueid \"${0}\" {\n  \
    \     discard;\n     }\n   }\n   The \":handle\" argument can be used to override\
    \ this default behavior.\n   The \":handle\" argument separates a \"duplicate\"\
    \ test from other\n   \"duplicate\" tests with a different or omitted \":handle\"\
    \ argument.\n   Using the \":handle\" argument, unrelated \"duplicate\" tests\
    \ can be\n   prevented from interfering with each other: a message is only\n \
    \  recognized as a duplicate when the tracked unique ID was seen before\n   in\
    \ an earlier script execution by a \"duplicate\" test with the same\n   \":handle\"\
    \ argument.\n      NOTE: The necessary mechanism to track duplicate messages is\
    \ very\n      similar to the mechanism that is needed for tracking duplicate\n\
    \      responses for the \"vacation\" action [VACATION].  One way to\n      implement\
    \ the necessary mechanism for the \"duplicate\" test is\n      therefore to store\
    \ a hash of the tracked unique ID and, if\n      provided, the \":handle\" argument.\n"
- title: 3.3.  Arguments ":seconds" and ":last"
  contents:
  - "3.3.  Arguments \":seconds\" and \":last\"\n   Implementations SHOULD let entries\
    \ in the tracking list expire after\n   a short period of time.  The user can\
    \ explicitly control the length\n   of this expiration time by means of the \"\
    :seconds\" argument, which\n   accepts an integer value specifying the timeout\
    \ value in seconds.  If\n   the \":seconds\" argument is omitted, an appropriate\
    \ default value MUST\n   be used.  A default expiration time of around 7 days\
    \ is usually\n   appropriate.  Sites SHOULD impose a maximum limit on the expiration\n\
    \   time.  If that limit is exceeded by the \":seconds\" argument, the\n   maximum\
    \ value MUST be silently substituted; exceeding the limit MUST\n   NOT produce\
    \ an error.  If the \":seconds\" argument is zero, the\n   \"duplicate\" test\
    \ MUST yield \"false\" unconditionally.\n   When the \":last\" argument is omitted,\
    \ the expiration time for entries\n   in the duplicate-tracking list MUST be measured\
    \ relative to the\n   moment at which the entry was first created (i.e., at the\
    \ end of the\n   successful script execution during which the \"duplicate\" test\n\
    \   returned \"false\" for a message with that particular unique ID value).\n\
    \   This means that subsequent duplicate messages have no influence on\n   the\
    \ time at which the entry in the duplicate-tracking list finally\n   expires.\n\
    \   In contrast, when the \":last\" argument is specified, the expiration\n  \
    \ time MUST be measured relative to the last script execution during\n   which\
    \ the \"duplicate\" test was used to check the entry's unique ID\n   value.  This\
    \ effectively means that the entry in the duplicate-\n   tracking list will not\
    \ expire while duplicate messages with the\n   corresponding unique ID keep being\
    \ delivered within intervals smaller\n   than the expiration time.\n   It is possible\
    \ to write Sieve scripts where, during a single\n   execution, more than one \"\
    duplicate\" test is evaluated with the same\n   unique ID value and \":handle\"\
    \ argument but different \":seconds\" or\n   \":last\" arguments.  The resulting\
    \ behavior is left undefined by this\n   specification, so such constructs should\
    \ be avoided.  Implementations\n   MAY choose to use the \":seconds\" and \":last\"\
    \ arguments from the\n   \"duplicate\" test that was evaluated last.\n"
- title: 3.4.  Interaction with Other Sieve Extensions
  contents:
  - "3.4.  Interaction with Other Sieve Extensions\n   The \"duplicate\" test does\
    \ not support either the \"index\" [DATE-INDEX]\n   or \"mime\" [SIEVE-MIME] extensions\
    \ directly, meaning that none of the\n   \":index\", \":mime\", or associated\
    \ arguments are added to the\n   \"duplicate\" test when these extensions are\
    \ active.  The \":uniqueid\"\n   argument can be used in combination with the\
    \ \"variables\" [VARIABLES]\n   extension to achieve the same result indirectly.\n\
    \   Normally, Sieve scripts are executed at final delivery.  However,\n   with\
    \ the \"imapsieve\" [IMAPSIEVE] extension, Sieve scripts are invoked\n   when\
    \ the IMAP [IMAP] server performs operations on the message store\n   (e.g., when\
    \ messages are uploaded, flagged, or moved to another\n   location).  The \"duplicate\"\
    \ test is devised for use at final\n   delivery, and the semantics in the \"imapsieve\"\
    \ context are left\n   undefined.  Therefore, implementations SHOULD NOT allow\
    \ the\n   \"duplicate\" test to be used in the context of \"imapsieve\".\n"
- title: 4.  Sieve Capability Strings
  contents:
  - "4.  Sieve Capability Strings\n   A Sieve implementation that defines the \"duplicate\"\
    \ test command will\n   advertise the capability string \"duplicate\".\n"
- title: 5.  Examples
  contents:
  - '5.  Examples

    '
- title: 5.1.  Example 1
  contents:
  - "5.1.  Example 1\n   In this basic example, message duplicates are detected by\
    \ tracking\n   the Message-ID header field.  Duplicate deliveries are stored in\
    \ a\n   special folder contained in the user's Trash folder.  If the folder\n\
    \   does not exist, it is created automatically using the \"mailbox\"\n   [MAILBOX]\
    \ extension.  This way, the user has a chance to recover\n   messages when necessary.\
    \  Messages that are not recognized as\n   duplicates are stored in the user's\
    \ inbox as normal.\n   require [\"duplicate\", \"fileinto\", \"mailbox\"];\n \
    \  if duplicate {\n     fileinto :create \"Trash/Duplicate\";\n   }\n"
- title: 5.2.  Example 2
  contents:
  - "5.2.  Example 2\n   This example shows a more complex use of the \"duplicate\"\
    \ test.  The\n   user gets network alerts from a set of remote automated monitoring\n\
    \   systems.  Several notifications can be received about the same event\n   from\
    \ different monitoring systems.  The Message-ID header field of\n   these messages\
    \ is different, because these are all distinct messages\n   from different senders.\
    \  To avoid being notified more than a single\n   time about the same event, the\
    \ user writes the following script:\n   require [\"duplicate\", \"variables\"\
    , \"imap4flags\",\n     \"fileinto\"];\n   if header :matches \"subject\" \"ALERT:\
    \ *\" {\n     if duplicate :seconds 60 :uniqueid \"${1}\" {\n       setflag \"\
    \\\\seen\";\n     }\n     fileinto \"Alerts\";\n   }\n   The subjects of the notification\
    \ message are structured with a\n   predictable pattern that includes a description\
    \ of the event.  In the\n   script above, the \"duplicate\" test is used to detect\
    \ duplicate alert\n   events.  The message subject is matched against a pattern,\
    \ and the\n   event description is extracted using the \"variables\" [VARIABLES]\n\
    \   extension.  If a message with that event in the subject was received\n   before,\
    \ but more than a minute ago, it is not detected as a duplicate\n   due to the\
    \ specified \":seconds\" argument.  In the event of a\n   duplicate, the message\
    \ is marked as \"seen\" using the \"imap4flags\"\n   [IMAP4FLAGS] extension. \
    \ All alert messages are put into the \"Alerts\"\n   mailbox, irrespective of\
    \ whether those messages are duplicates\n   or not.\n"
- title: 5.3.  Example 3
  contents:
  - "5.3.  Example 3\n   This example shows how the \"duplicate\" test can be used\
    \ to limit the\n   frequency of notifications sent using the \"enotify\" [NOTIFY]\n\
    \   extension.  Consider the following scenario: a mail user receives\n   Extensible\
    \ Messaging and Presence Protocol (XMPP) notifications\n   [NOTIFY-XMPP] about\
    \ new mail through Sieve, but sometimes a single\n   contact sends many messages\
    \ in a short period of time.  Now the user\n   wants to prevent being notified\
    \ of all of those messages.  The user\n   wants to be notified about messages\
    \ from each person at most once per\n   30 minutes and writes the following script:\n\
    \   require [\"variables\", \"envelope\", \"enotify\", \"duplicate\"];\n   if\
    \ envelope :matches \"from\" \"*\" { set \"sender\" \"${1}\"; }\n   if header\
    \ :matches \"subject\" \"*\" { set \"subject\" \"${1}\"; }\n   if not duplicate\
    \ :seconds 1800 :uniqueid \"${sender}\"\n   {\n     notify :message \"[SIEVE]\
    \ ${sender}: ${subject}\"\n       \"xmpp:user@im.example.com\";\n   }\n   The\
    \ example shown above uses the message envelope sender rather than\n   the Message-ID\
    \ header field as the unique ID for duplicate tracking.\n   The example can be\
    \ extended to allow more messages from the same\n   sender in close succession\
    \ as long as the discussed subject is\n   different.  This can be achieved as\
    \ follows:\n   require [\"variables\", \"envelope\", \"enotify\", \"duplicate\"\
    ];\n   if envelope :matches \"from\" \"*\" { set \"sender\" \"${1}\"; }\n   if\
    \ header :matches \"subject\" \"*\" { set \"subject\" \"${1}\"; }\n   # account\
    \ for 'Re:' prefix\n   if string :comparator \"i;ascii-casemap\"\n     :matches\
    \ \"${subject}\" \"Re:*\"\n   {\n     set \"subject\" \"${1}\";\n   }\n   if not\
    \ duplicate :seconds 1800\n     :uniqueid \"${sender} ${subject}\"\n   {\n   \
    \  notify :message \"[SIEVE] ${sender}: ${subject}\"\n       \"xmpp:user@im.example.com\"\
    ;\n   }\n   This uses a combination of the message envelope sender and the\n \
    \  subject of the message as the unique ID for duplicate tracking.\n"
- title: 5.4.  Example 4
  contents:
  - "5.4.  Example 4\n   For this example, the mail user uses the \"duplicate\" test\
    \ for two\n   separate applications: for discarding duplicate events from a\n\
    \   notification system and for marking certain follow-up messages in a\n   software\
    \ support mailing as \"seen\" using the \"imap4flags\"\n   [IMAP4FLAGS] extension.\n\
    \   The two \"duplicate\" tests in the following example each use a\n   different\
    \ header to identify messages.  However, these \"X-Event-ID\"\n   and \"X-Ticket-ID\"\
    \ headers can have similar values in this case (e.g.,\n   both based on a time\
    \ stamp), meaning that one \"duplicate\" test can\n   erroneously detect duplicates\
    \ based on ID values tracked by the\n   other.  Therefore, the user wants to prevent\
    \ the second \"duplicate\"\n   test from matching ID values tracked by the first\
    \ \"duplicate\" test\n   and vice versa.  This is achieved by specifying different\
    \ \":handle\"\n   arguments for these tests.\n   require [\"duplicate\", \"imap4flags\"\
    ];\n   if duplicate :header \"X-Event-ID\" :handle \"notifier\" {\n     discard;\n\
    \   }\n   if allof (\n     duplicate :header \"X-Ticket-ID\" :handle \"support\"\
    ,\n     address \"to\" \"support@example.com\",\n     header :contains \"subject\"\
    \ \"fileserver\")\n   {\n     setflag \"\\\\seen\";\n   }\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   A flood of unique messages could cause the duplicate-tracking\
    \ list to\n   grow indefinitely.  Therefore, implementations SHOULD limit the\n\
    \   number of entries in the duplicate-tracking list.  When limiting the\n   number\
    \ of entries, implementations SHOULD discard the oldest ones\n   first.\n   Scripts\
    \ using the \"duplicate\" test evaluation should be aware that\n   message IDs\
    \ are not necessarily unique, either through the fault of\n   benign generators\
    \ or attackers injecting a message with the\n   properties used by the duplicate\
    \ Sieve filter at some point prior to\n   the Sieve filter.  Therefore, scripts\
    \ are well advised to be\n   conservative with respect to actions taken when duplicate\
    \ messages\n   are identified only by message ID.\n   The list of unique IDs used\
    \ for duplicate tracking can include\n   privacy-sensitive information, such as\
    \ message ID values, content of\n   subject lines, and content extracted from\
    \ message bodies.\n   Implementations SHOULD protect that information by obscuring\
    \ it\n   through hashing (see the note at the end of Section 3.2) and/or by\n\
    \   storing it with a level of access control equivalent to that of the\n   messages\
    \ themselves.\n   These measures will not prevent an entity that has access to\
    \ the\n   duplicate-tracking list from querying whether messages with certain\n\
    \   unique ID values were received.  As this operation is the essence of\n   the\
    \ \"duplicate\" test, this cannot be prevented and may violate the\n   expectations\
    \ of the user.  For example, a user who deletes a message\n   from the server\
    \ may expect that no record of it remains on the\n   server, but that will not\
    \ be true if its message ID is persisted on\n   the server in the duplicate-tracking\
    \ list.\n   It's notable, however, that server logs will often store the\n   information\
    \ present on the duplicate-tracking list anyway and\n   probably would expose\
    \ plaintext message IDs for a much longer period\n   than this mechanism would.\
    \  Users of email services that\n   intentionally delete such logs with the intent\
    \ of limiting\n   traceability should be made aware that use of the duplicate-tracking\n\
    \   mechanism re-exposes this information for the duration of the expiry\n   interval.\
    \  Therefore, a shorter default expiry interval may be\n   appropriate in those\
    \ situations.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   The following template specifies the IANA registration\
    \ of the Sieve\n   extension specified in this document:\n      To: iana@iana.org\n\
    \      Subject: Registration of new Sieve extension\n      Capability name:  duplicate\n\
    \      Description:      Adds test 'duplicate' that can be used to test\n    \
    \                    whether a particular message is a duplicate,\n          \
    \              i.e., whether a copy of it was seen before by\n               \
    \         the delivery agent that is executing the Sieve\n                   \
    \     script.\n      RFC number:       RFC 7352\n      Contact address:  Sieve\
    \ mailing list <sieve@ietf.org>\n   This information has been added to the list\
    \ of Sieve extensions given\n   on <http://www.iana.org/assignments/sieve-extensions>.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   Thanks to Brian Carpenter, Cyrus Daboo, Arnt Gulbrandsen,\
    \ Tony\n   Hansen, Kristin Hubner, Barry Leiba, Alexey Melnikov, Subramanian\n\
    \   Moonesamy, Tom Petch, Hector Santos, Robert Sparks, Aaron Stone, and\n   Stefan\
    \ Winter for reviews and suggestions.  Special thanks to Ned\n   Freed for his\
    \ guidance and support.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [DATE-INDEX]\n              Freed, N., \"Sieve\
    \ Email Filtering: Date and Index\n              Extensions\", RFC 5260, July\
    \ 2008.\n   [IMAIL]    Resnick, P., Ed., \"Internet Message Format\", RFC 5322,\n\
    \              October 2008.\n   [IMAPSIEVE]\n              Leiba, B., \"Support\
    \ for Internet Message Access Protocol\n              (IMAP) Events in Sieve\"\
    , RFC 6785, November 2012.\n   [INCLUDE]  Daboo, C. and A. Stone, \"Sieve Email\
    \ Filtering: Include\n              Extension\", RFC 6609, May 2012.\n   [KEYWORDS]\n\
    \              Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [SIEVE]    Guenther,\
    \ P. and T. Showalter, \"Sieve: An Email Filtering\n              Language\",\
    \ RFC 5228, January 2008.\n   [SIEVE-MIME]\n              Hansen, T. and C. Daboo,\
    \ \"Sieve Email Filtering: MIME Part\n              Tests, Iteration, Extraction,\
    \ Replacement, and Enclosure\",\n              RFC 5703, October 2009.\n   [VARIABLES]\n\
    \              Homme, K., \"Sieve Email Filtering: Variables Extension\",\n  \
    \            RFC 5229, January 2008.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [IMAP]     Crispin, M., \"INTERNET MESSAGE ACCESS\
    \ PROTOCOL -\n              VERSION 4rev1\", RFC 3501, March 2003.\n   [IMAP4FLAGS]\n\
    \              Melnikov, A., \"Sieve Email Filtering: Imap4flags\n           \
    \   Extension\", RFC 5232, January 2008.\n   [MAILBOX]  Melnikov, A., \"The Sieve\
    \ Mail-Filtering Language --\n              Extensions for Checking Mailbox Status\
    \ and Accessing\n              Mailbox Metadata\", RFC 5490, March 2009.\n   [NOTIFY]\
    \   Melnikov, A., Leiba, B., Segmuller, W., and T. Martin,\n              \"Sieve\
    \ Email Filtering: Extension for Notifications\",\n              RFC 5435, January\
    \ 2009.\n   [NOTIFY-XMPP]\n              Saint-Andre, P. and A. Melnikov, \"Sieve\
    \ Notification\n              Mechanism: Extensible Messaging and Presence Protocol\n\
    \              (XMPP)\", RFC 5437, January 2009.\n   [VACATION] Showalter, T.\
    \ and N. Freed, \"Sieve Email Filtering:\n              Vacation Extension\",\
    \ RFC 5230, January 2008.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Stephan Bosch\n   Enschede\n   NL\n   EMail: stephan@rename-it.nl\n"
