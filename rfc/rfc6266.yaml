- title: __initial_text__
  contents:
  - "           Use of the Content-Disposition Header Field in the\n             \
    \      Hypertext Transfer Protocol (HTTP)\n"
- title: Abstract
  contents:
  - "Abstract\n   RFC 2616 defines the Content-Disposition response header field,\
    \ but\n   points out that it is not part of the HTTP/1.1 Standard.  This\n   specification\
    \ takes over the definition and registration of Content-\n   Disposition, as used\
    \ in HTTP, and clarifies internationalization\n   aspects.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6266.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Notational Conventions ..........................................3\n  \
    \ 3. Conformance and Error Handling ..................................3\n   4.\
    \ Header Field Definition .........................................3\n      4.1.\
    \ Grammar ....................................................4\n      4.2. Disposition\
    \ Type ...........................................5\n      4.3. Disposition Parameter:\
    \ 'Filename' ..........................5\n      4.4. Disposition Parameter: Extensions\
    \ ..........................6\n      4.5. Extensibility ..............................................7\n\
    \   5. Examples ........................................................7\n  \
    \ 6. Internationalization Considerations .............................8\n   7.\
    \ Security Considerations .........................................8\n   8. IANA\
    \ Considerations .............................................8\n      8.1. Registry\
    \ for Disposition Values and Parameters .............8\n      8.2. Header Field\
    \ Registration ..................................8\n   9. Acknowledgements ................................................9\n\
    \   10. References .....................................................9\n  \
    \    10.1. Normative References ......................................9\n    \
    \  10.2. Informative References ....................................9\n   Appendix\
    \ A. Changes from the RFC 2616 Definition ..................11\n   Appendix B.\
    \ Differences Compared to RFC 2183 ......................11\n   Appendix C. Alternative\
    \ Approaches to Internationalization ........11\n     C.1. RFC 2047 Encoding ..........................................12\n\
    \     C.2. Percent Encoding ...........................................12\n  \
    \   C.3. Encoding Sniffing ..........................................12\n   Appendix\
    \ D. Advice on Generating Content-Disposition Header\n               Fields ................................................13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   RFC 2616 defines the Content-Disposition response header\
    \ field\n   (Section 19.5.1 of [RFC2616]) but points out that it is not part of\n\
    \   the HTTP/1.1 Standard (Section 15.5):\n      Content-Disposition is not part\
    \ of the HTTP standard, but since it\n      is widely implemented, we are documenting\
    \ its use and risks for\n      implementers.\n   This specification takes over\
    \ the definition and registration of\n   Content-Disposition, as used in HTTP.\
    \  Based on interoperability\n   testing with existing user agents (UAs), it fully\
    \ defines a profile\n   of the features defined in the Multipurpose Internet Mail\
    \ Extensions\n   (MIME) variant ([RFC2183]) of the header field, and also clarifies\n\
    \   internationalization aspects.\n      Note: This document does not apply to\
    \ Content-Disposition header\n      fields appearing in payload bodies transmitted\
    \ over HTTP, such as\n      when using the media type \"multipart/form-data\"\
    \ ([RFC2388]).\n"
- title: 2.  Notational Conventions
  contents:
  - "2.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   This specification uses the augmented BNF (ABNF) notation\
    \ defined in\n   Section 2.1 of [RFC2616], including its rules for implied linear\n\
    \   whitespace (LWS).\n"
- title: 3.  Conformance and Error Handling
  contents:
  - "3.  Conformance and Error Handling\n   This specification defines conformance\
    \ criteria for both senders\n   (usually, HTTP origin servers) and recipients\
    \ (usually, HTTP user\n   agents) of the Content-Disposition header field.  An\
    \ implementation\n   is considered conformant if it complies with all of the requirements\n\
    \   associated with its role.\n   This specification also defines certain forms\
    \ of the header field\n   value to be invalid, using both ABNF and prose requirements\n\
    \   (Section 4), but it does not define special handling of these invalid\n  \
    \ field values.\n   Senders MUST NOT generate Content-Disposition header fields\
    \ that are\n   invalid.\n   Recipients MAY take steps to recover a usable field\
    \ value from an\n   invalid header field, but SHOULD NOT reject the message outright,\n\
    \   unless this is explicitly desirable behavior (e.g., the\n   implementation\
    \ is a validator).  As such, the default handling of\n   invalid fields is to\
    \ ignore them.\n"
- title: 4.  Header Field Definition
  contents:
  - "4.  Header Field Definition\n   The Content-Disposition response header field\
    \ is used to convey\n   additional information about how to process the response\
    \ payload, and\n   also can be used to attach additional metadata, such as the\
    \ filename\n   to use when saving the response payload locally.\n"
- title: 4.1.  Grammar
  contents:
  - "4.1.  Grammar\n     content-disposition = \"Content-Disposition\" \":\"\n   \
    \                         disposition-type *( \";\" disposition-parm )\n     disposition-type\
    \    = \"inline\" | \"attachment\" | disp-ext-type\n                         ;\
    \ case-insensitive\n     disp-ext-type       = token\n     disposition-parm  \
    \  = filename-parm | disp-ext-parm\n     filename-parm       = \"filename\" \"\
    =\" value\n                         | \"filename*\" \"=\" ext-value\n     disp-ext-parm\
    \       = token \"=\" value\n                         | ext-token \"=\" ext-value\n\
    \     ext-token           = <the characters in token, followed by \"*\">\n   Defined\
    \ in [RFC2616]:\n     token         = <token, defined in [RFC2616], Section 2.2>\n\
    \     quoted-string = <quoted-string, defined in [RFC2616], Section 2.2>\n   \
    \  value         = <value, defined in [RFC2616], Section 3.6>\n              \
    \     ; token | quoted-string\n   Defined in [RFC5987]:\n     ext-value   = <ext-value,\
    \ defined in [RFC5987], Section 3.2>\n   Content-Disposition header field values\
    \ with multiple instances of\n   the same parameter name are invalid.\n   Note\
    \ that due to the rules for implied linear whitespace (Section 2.1\n   of [RFC2616]),\
    \ OPTIONAL whitespace can appear between words (token or\n   quoted-string) and\
    \ separator characters.\n   Furthermore, note that the format used for ext-value\
    \ allows\n   specifying a natural language (e.g., \"en\"); this is of limited\
    \ use\n   for filenames and is likely to be ignored by recipients.\n"
- title: 4.2.  Disposition Type
  contents:
  - "4.2.  Disposition Type\n   If the disposition type matches \"attachment\" (case-insensitively),\n\
    \   this indicates that the recipient should prompt the user to save the\n   response\
    \ locally, rather than process it normally (as per its media\n   type).\n   On\
    \ the other hand, if it matches \"inline\" (case-insensitively), this\n   implies\
    \ default processing.  Therefore, the disposition type \"inline\"\n   is only\
    \ useful when it is augmented with additional parameters, such\n   as the filename\
    \ (see below).\n   Unknown or unhandled disposition types SHOULD be handled by\n\
    \   recipients the same way as \"attachment\" (see also [RFC2183],\n   Section\
    \ 2.8).\n"
- title: '4.3.  Disposition Parameter: ''Filename'''
  contents:
  - "4.3.  Disposition Parameter: 'Filename'\n   The parameters \"filename\" and \"\
    filename*\", to be matched case-\n   insensitively, provide information on how\
    \ to construct a filename for\n   storing the message payload.\n   Depending on\
    \ the disposition type, this information might be used\n   right away (in the\
    \ \"save as...\" interaction caused for the\n   \"attachment\" disposition type),\
    \ or later on (for instance, when the\n   user decides to save the contents of\
    \ the current page being\n   displayed).\n   The parameters \"filename\" and \"\
    filename*\" differ only in that\n   \"filename*\" uses the encoding defined in\
    \ [RFC5987], allowing the use\n   of characters not present in the ISO-8859-1\
    \ character set\n   ([ISO-8859-1]).\n   Many user agent implementations predating\
    \ this specification do not\n   understand the \"filename*\" parameter.  Therefore,\
    \ when both\n   \"filename\" and \"filename*\" are present in a single header\
    \ field\n   value, recipients SHOULD pick \"filename*\" and ignore \"filename\"\
    .\n   This way, senders can avoid special-casing specific user agents by\n   sending\
    \ both the more expressive \"filename*\" parameter, and the\n   \"filename\" parameter\
    \ as fallback for legacy recipients (see Section 5\n   for an example).\n   It\
    \ is essential that recipients treat the specified filename as\n   advisory only,\
    \ and thus be very careful in extracting the desired\n   information.  In particular:\n\
    \   o  Recipients MUST NOT be able to write into any location other than\n   \
    \   one to which they are specifically entitled.  To illustrate the\n      problem,\
    \ consider the consequences of being able to overwrite\n      well-known system\
    \ locations (such as \"/etc/passwd\").  One strategy\n      to achieve this is\
    \ to never trust folder name information in the\n      filename parameter, for\
    \ instance by stripping all but the last\n      path segment and only considering\
    \ the actual filename (where 'path\n      segments' are the components of the\
    \ field value delimited by the\n      path separator characters \"\\\" and \"\
    /\").\n   o  Many platforms do not use Internet Media Types ([RFC2046]) to hold\n\
    \      type information in the file system, but rely on filename\n      extensions\
    \ instead.  Trusting the server-provided file extension\n      could introduce\
    \ a privilege escalation when the saved file is\n      later opened (consider\
    \ \".exe\").  Thus, recipients that make use of\n      file extensions to determine\
    \ the media type MUST ensure that a\n      file extension is used that is safe,\
    \ optimally matching the media\n      type of the received payload.\n   o  Recipients\
    \ SHOULD strip or replace character sequences that are\n      known to cause confusion\
    \ both in user interfaces and in filenames,\n      such as control characters\
    \ and leading and trailing whitespace.\n   o  Other aspects recipients need to\
    \ be aware of are names that have a\n      special meaning in the file system\
    \ or in shell commands, such as\n      \".\" and \"..\", \"~\", \"|\", and also\
    \ device names.  Recipients SHOULD\n      ignore or substitute names like these.\n\
    \      Note: Many user agents do not properly handle the escape character\n  \
    \    \"\\\" when using the quoted-string form.  Furthermore, some user\n     \
    \ agents erroneously try to perform unescaping of \"percent\" escapes\n      (see\
    \ Appendix C.2), and thus might misinterpret filenames\n      containing the percent\
    \ character followed by two hex digits.\n"
- title: '4.4.  Disposition Parameter: Extensions'
  contents:
  - "4.4.  Disposition Parameter: Extensions\n   To enable future extensions, recipients\
    \ SHOULD ignore unrecognized\n   parameters (see also [RFC2183], Section 2.8).\n"
- title: 4.5.  Extensibility
  contents:
  - "4.5.  Extensibility\n   Note that Section 9 of [RFC2183] defines IANA registries\
    \ both for\n   disposition types and disposition parameters.  This registry is\n\
    \   shared by different protocols using Content-Disposition, such as MIME\n  \
    \ and HTTP.  Therefore, not all registered values may make sense in the\n   context\
    \ of HTTP.\n"
- title: 5.  Examples
  contents:
  - "5.  Examples\n   Direct the UA to show \"save as\" dialog, with a filename of\n\
    \   \"example.html\":\n     Content-Disposition: Attachment; filename=example.html\n\
    \   Direct the UA to behave as if the Content-Disposition header field\n   wasn't\
    \ present, but to remember the filename \"an example.html\" for a\n   subsequent\
    \ save operation:\n     Content-Disposition: INLINE; FILENAME= \"an example.html\"\
    \n   Note: This uses the quoted-string form so that the space character\n   can\
    \ be included.\n   Direct the UA to show \"save as\" dialog, with a filename containing\n\
    \   the Unicode character U+20AC (EURO SIGN):\n     Content-Disposition: attachment;\n\
    \                          filename*= UTF-8''%e2%82%ac%20rates\n   Here, the encoding\
    \ defined in [RFC5987] is also used to encode the\n   non-ISO-8859-1 character.\n\
    \   This example is the same as the one above, but adding the \"filename\"\n \
    \  parameter for compatibility with user agents not implementing\n   RFC 5987:\n\
    \     Content-Disposition: attachment;\n                          filename=\"\
    EURO rates\";\n                          filename*=utf-8''%e2%82%ac%20rates\n\
    \   Note: Those user agents that do not support the RFC 5987 encoding\n   ignore\
    \ \"filename*\" when it occurs after \"filename\".\n"
- title: 6.  Internationalization Considerations
  contents:
  - "6.  Internationalization Considerations\n   The \"filename*\" parameter (Section\
    \ 4.3), using the encoding defined\n   in [RFC5987], allows the server to transmit\
    \ characters outside the\n   ISO-8859-1 character set, and also to optionally\
    \ specify the language\n   in use.\n   Future parameters might also require internationalization,\
    \ in which\n   case the same encoding can be used.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Using server-supplied information for constructing\
    \ local filenames\n   introduces many risks.  These are summarized in Section\
    \ 4.3.\n   Furthermore, implementers ought to be aware of the security\n   considerations\
    \ applying to HTTP (see Section 15 of [RFC2616]), and\n   also the parameter encoding\
    \ defined in [RFC5987] (see Section 5).\n"
- title: 8.  IANA Considerations
  contents:
  - '8.  IANA Considerations

    '
- title: 8.1.  Registry for Disposition Values and Parameters
  contents:
  - "8.1.  Registry for Disposition Values and Parameters\n   This specification does\
    \ not introduce any changes to the registration\n   procedures for disposition\
    \ values and parameters that are defined in\n   Section 9 of [RFC2183].\n"
- title: 8.2.  Header Field Registration
  contents:
  - "8.2.  Header Field Registration\n   This document updates the definition of the\
    \ Content-Disposition HTTP\n   header field in the permanent HTTP header field\
    \ registry (see\n   [RFC3864]).\n   Header field name:  Content-Disposition\n\
    \   Applicable protocol:  http\n   Status:  standard\n   Author/Change controller:\
    \  IETF\n   Specification document:  this specification (Section 4)\n   Related\
    \ information:  none\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   Thanks to Adam Barth, Rolf Eike Beer, Stewart Bryant,\
    \ Bjoern\n   Hoehrmann, Alfred Hoenes, Roar Lauritzsen, Alexey Melnikov, Henrik\n\
    \   Nordstrom, and Mark Nottingham for their valuable feedback.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [ISO-8859-1]  International Organization for\
    \ Standardization,\n                 \"Information technology -- 8-bit single-byte\
    \ coded\n                 graphic character sets -- Part 1: Latin alphabet\n \
    \                No. 1\", ISO/IEC 8859-1:1998, 1998.\n   [RFC2119]     Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n                 Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC2616]     Fielding, R., Gettys, J., Mogul,\
    \ J., Frystyk, H.,\n                 Masinter, L., Leach, P., and T. Berners-Lee,\
    \ \"Hypertext\n                 Transfer Protocol -- HTTP/1.1\", RFC 2616, June\
    \ 1999.\n   [RFC5987]     Reschke, J., \"Character Set and Language Encoding for\n\
    \                 Hypertext Transfer Protocol (HTTP) Header Field\n          \
    \       Parameters\", RFC 5987, August 2010.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RFC2046]     Freed, N. and N. Borenstein,\
    \ \"Multipurpose Internet\n                 Mail Extensions (MIME) Part Two: Media\
    \ Types\",\n                 RFC 2046, November 1996.\n   [RFC2047]     Moore,\
    \ K., \"MIME (Multipurpose Internet Mail\n                 Extensions) Part Three:\
    \ Message Header Extensions for\n                 Non-ASCII Text\", RFC 2047,\
    \ November 1996.\n   [RFC2183]     Troost, R., Dorner, S., and K. Moore, Ed.,\n\
    \                 \"Communicating Presentation Information in Internet\n     \
    \            Messages: The Content-Disposition Header Field\",\n             \
    \    RFC 2183, August 1997.\n   [RFC2231]     Freed, N. and K. Moore, \"MIME Parameter\
    \ Value and\n                 Encoded Word Extensions: Character Sets, Languages,\
    \ and\n                 Continuations\", RFC 2231, November 1997.\n   [RFC2388]\
    \     Masinter, L., \"Returning Values from Forms: multipart/\n              \
    \   form-data\", RFC 2388, August 1998.\n   [RFC3864]     Klyne, G., Nottingham,\
    \ M., and J. Mogul, \"Registration\n                 Procedures for Message Header\
    \ Fields\", BCP 90,\n                 RFC 3864, September 2004.\n   [RFC3986]\
    \     Berners-Lee, T., Fielding, R., and L. Masinter,\n                 \"Uniform\
    \ Resource Identifier (URI): Generic Syntax\",\n                 STD 66, RFC 3986,\
    \ January 2005.\n   [US-ASCII]    American National Standards Institute, \"Coded\
    \ Character\n                 Set -- 7-bit American Standard Code for Information\n\
    \                 Interchange\", ANSI X3.4, 1986.\n"
- title: Appendix A.  Changes from the RFC 2616 Definition
  contents:
  - "Appendix A.  Changes from the RFC 2616 Definition\n   Compared to Section 19.5.1\
    \ of [RFC2616], the following normative\n   changes reflecting actual implementations\
    \ have been made:\n   o  According to RFC 2616, the disposition type \"attachment\"\
    \ only\n      applies to content of type \"application/octet-stream\".  This\n\
    \      restriction has been removed, because recipients in practice do\n     \
    \ not check the content type, and it also discourages properly\n      declaring\
    \ the media type.\n   o  RFC 2616 only allows \"quoted-string\" for the filename\
    \ parameter.\n      This would be an exceptional parameter syntax, and also doesn't\n\
    \      reflect actual use.\n   o  The definition for the disposition type \"inline\"\
    \ ([RFC2183],\n      Section 2.1) has been re-added with a suggestion for its\n\
    \      processing.\n   o  This specification requires support for the extended\
    \ parameter\n      encoding defined in [RFC5987].\n"
- title: Appendix B.  Differences Compared to RFC 2183
  contents:
  - "Appendix B.  Differences Compared to RFC 2183\n   Section 2 of [RFC2183] defines\
    \ several additional disposition\n   parameters: \"creation-date\", \"modification-date\"\
    , \"quoted-date-time\",\n   and \"size\".  The majority of user agents do not\
    \ implement these;\n   thus, they have been omitted from this specification.\n"
- title: Appendix C.  Alternative Approaches to Internationalization
  contents:
  - "Appendix C.  Alternative Approaches to Internationalization\n   By default, HTTP\
    \ header field parameters cannot carry characters\n   outside the ISO-8859-1 ([ISO-8859-1])\
    \ character encoding (see\n   [RFC2616], Section 2.2).  For the \"filename\" parameter,\
    \ this of\n   course is an unacceptable restriction.\n   Unfortunately, user agent\
    \ implementers have not managed to come up\n   with an interoperable approach,\
    \ although the IETF Standards Track\n   specifies exactly one solution ([RFC2231],\
    \ clarified and profiled for\n   HTTP in [RFC5987]).\n   For completeness, the\
    \ sections below describe the various approaches\n   that have been tried, and\
    \ explain how they are inferior to the\n   RFC 5987 encoding used in this specification.\n"
- title: C.1.  RFC 2047 Encoding
  contents:
  - "C.1.  RFC 2047 Encoding\n   RFC 2047 defines an encoding mechanism for header\
    \ fields, but this\n   encoding is not supposed to be used for header field parameters\
    \ --\n   see Section 5 of [RFC2047]:\n      An 'encoded-word' MUST NOT appear\
    \ within a 'quoted-string'.\n      ...\n      An 'encoded-word' MUST NOT be used\
    \ in parameter of a MIME Content-\n      Type or Content-Disposition field, or\
    \ in any structured field body\n      except within a 'comment' or 'phrase'.\n\
    \   In practice, some user agents implement the encoding, some do not\n   (exposing\
    \ the encoded string to the user), and some get confused by\n   it.\n"
- title: C.2.  Percent Encoding
  contents:
  - "C.2.  Percent Encoding\n   Some user agents accept percent-encoded ([RFC3986],\
    \ Section 2.1)\n   sequences of characters.  The character encoding being used\
    \ for\n   decoding depends on various factors, including the encoding of the\n\
    \   referring page, the user agent's locale, its configuration, and also\n   the\
    \ actual value of the parameter.\n   In practice, this is hard to use because\
    \ those user agents that do\n   not support it will display the escaped character\
    \ sequence to the\n   user.  For those user agents that do implement this, it\
    \ is difficult\n   to predict what character encoding they actually expect.\n"
- title: C.3.  Encoding Sniffing
  contents:
  - "C.3.  Encoding Sniffing\n   Some user agents inspect the value (which defaults\
    \ to ISO-8859-1 for\n   the quoted-string form) and switch to UTF-8 when it seems\
    \ to be more\n   likely to be the correct interpretation.\n   As with the approaches\
    \ above, this is not interoperable and,\n   furthermore, risks misinterpreting\
    \ the actual value.\n"
- title: Appendix D.  Advice on Generating Content-Disposition Header Fields
  contents:
  - "Appendix D.  Advice on Generating Content-Disposition Header Fields\n   To successfully\
    \ interoperate with existing and future user agents,\n   senders of the Content-Disposition\
    \ header field are advised to:\n   o  Include a \"filename\" parameter when US-ASCII\
    \ ([US-ASCII]) is\n      sufficiently expressive.\n   o  Use the 'token' form\
    \ of the filename parameter only when it does\n      not contain disallowed characters\
    \ (e.g., spaces); in such cases,\n      the quoted-string form should be used.\n\
    \   o  Avoid including the percent character followed by two hexadecimal\n   \
    \   characters (e.g., %A9) in the filename parameter, since some\n      existing\
    \ implementations consider it to be an escape character,\n      while others will\
    \ pass it through unchanged.\n   o  Avoid including the \"\\\" character in the\
    \ quoted-string form of the\n      filename parameter, as escaping is not implemented\
    \ by some user\n      agents, and \"\\\" can be considered an illegal path character.\n\
    \   o  Avoid using non-ASCII characters in the filename parameter.\n      Although\
    \ most existing implementations will decode them as\n      ISO-8859-1, some will\
    \ apply heuristics to detect UTF-8, and thus\n      might fail on certain names.\n\
    \   o  Include a \"filename*\" parameter where the desired filename cannot\n \
    \     be expressed faithfully using the \"filename\" form.  Note that\n      legacy\
    \ user agents will not process this, and will fall back to\n      using the \"\
    filename\" parameter's content.\n   o  When a \"filename*\" parameter is sent,\
    \ to also generate a\n      \"filename\" parameter as a fallback for user agents\
    \ that do not\n      support the \"filename*\" form, if possible.  This can be\
    \ done by\n      substituting characters with US-ASCII sequences (e.g., Unicode\n\
    \      character point U+00E4 (LATIN SMALL LETTER A WITH DIARESIS) by\n      \"\
    ae\").  Note that this may not be possible in some locales.\n   o  When a \"filename\"\
    \ parameter is included as a fallback (as per\n      above), \"filename\" should\
    \ occur first, due to parsing problems in\n      some existing implementations.\n\
    \   o  Use UTF-8 as the encoding of the \"filename*\" parameter, when\n      present,\
    \ because at least one existing implementation only\n      implements that encoding.\n\
    \   Note that this advice is based upon UA behavior at the time of\n   writing,\
    \ and might be superseded.  At the time of publication of this\n   document, <http://purl.org/NET/http/content-disposition-tests>\n\
    \   provides an overview of current levels of support in various\n   implementations.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Julian F. Reschke\n   greenbytes GmbH\n   Hafenweg 16\n\
    \   Muenster, NW  48155\n   Germany\n   EMail: julian.reschke@greenbytes.de\n\
    \   URI:   http://greenbytes.de/tech/webdav/\n"
