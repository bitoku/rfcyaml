- title: __initial_text__
  contents:
  - '            FTP Operation Over Big Address Records (FOOBAR)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This paper describes a convention for specifying longer addresses\
    \ in\n   the PORT command.\n"
- title: Introduction
  contents:
  - "Introduction\n   This RFC specifies a method for assigning long addresses in\
    \ the\n   HOST-PORT specification for the data port to be used in establishing\n\
    \   a data connection for File Transfer Protocol, FTP (STD 9, RFC 959).\n   This\
    \ is a general solution, applicable for all \"next generation\" IP\n   alternatives,\
    \ and can also be extended to allow FTP operation over\n   transport interfaces\
    \ other than TCP.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Many thanks to all the folks in the IETF who casually mentioned\
    \ how\n   to do this, but who left it to me to write this RFC.  Special thanks\n\
    \   to Rich Colella, Bob Ullmann, Shawn Ostermann, Steve Lunt, and Brian\n   Carpenter\
    \ who had the time and decency to comment on the initial\n   draft.  :-)\n"
- title: 1.  Background
  contents:
  - "1.  Background\n   The PORT command of File Transfer Protocol allows users to\
    \ specify an\n   address other than the default data port for the transport connection\n\
    \   over which data are transferred. The PORT command syntax is:\n      PORT <SP>\
    \ <host-port> <CRLF>\n   The <host-port> argument is the concatenation of a 32-bit\
    \ internet\n   <host-address> and a 16-bit TCP <port-address>.  This address\n\
    \   information is broken into 8-bit fields and the value of each field\n   is\
    \ transmitted as a decimal number (in character string\n   representation).  The\
    \ fields are separated by commas.  A port command\n   is thus of the general form\
    \ \"PORT h1,h2,h3,h4,p1,p2\", where h1 is the\n   high order 8 bits of the internet\
    \ host address.\n   To accommodate larger network addresses anticipated for all\
    \ IP \"next\n   generation\" alternatives, new commands and reply codes are needed\
    \ for\n   FTP.  This memo addresses these needs.\n"
- title: 2.  The LPRT Command
  contents:
  - "2.  The LPRT Command\n   The LPRT command allows users to specify a \"long\"\
    \ address for the\n   transport connection over which data are transferred. The\
    \ LPRT\n   command syntax is:\n      LPRT <SP> <long-host-port> <CRLF>\n   The\
    \ <long-host-port> argument is the concatenation of the following\n   fields;\n\
    \   o  an 8-bit <address-family> argument (af)\n   o  an 8-bit <host-address-length>\
    \ argument (hal)\n   o  a <host-address> of <host-address-length> (h1, h2, ...)\n\
    \   o  an 8-bit <port-address-length> (pal)\n   o  a <port-address> of <port-address-length>\
    \ (p1, p2, ...)\n   The <address-family> argument takes the value of the version\
    \ number\n   of IP (see Assigned Numbers, STD 2, RFC 1340), or generally speaking,\n\
    \   an Internet layer protocol.  Relevant assigned IPng version numbers\n   are:\n\
    \     Decimal         Keyword\n     ------          -------\n     0          \
    \     reserved\n     1-3             unassigned\n     4               Internet\
    \ Protocol (IP)\n     5               ST Datagram Mode\n     6               SIP\n\
    \     7               TP/IX\n     8               PIP\n     9               TUBA\n\
    \     10-14           unassigned\n     15              reserved\n   The value\
    \ of each field is broken into 8-bit fields and the value of\n   each field is\
    \ transmitted as an unsigned decimal number (in character\n   string representation,\
    \ note that negative numbers are explicitly not\n   permitted).  The fields are\
    \ separated by commas.\n   A LPRT command is thus of the general form\n      LPRT\
    \ af,hal,h1,h2,h3,h4...,pal,p1,p2...\n   where h1 is the high order 8 bits of\
    \ the internet host address, and\n   p1 is the high order 8 bits of the port number\
    \ (transport address).\n"
- title: 3.  The LPSV Command
  contents:
  - "3.  The LPSV Command\n   The L(ONG) PASSIVE command requests the server-DTP to\
    \ listen on a\n   data port other than its default data port and to wait for a\n\
    \   connection rather than initiate one upon receipt of a transfer\n   command.\
    \  The response to this command includes the address family,\n   host address\
    \ length indicator, host address, port address length, and\n   port address this\
    \ server is listening on.  The reply code and text\n   for entering the passive\
    \ mode using a long address is 228\n   (Interpretation according to FTP is: positive\
    \ completion reply 2yz,\n   connections x2z, passive mode entered using long address\
    \ xy8).  The\n   suggested textual message to accompany this reply code is:\n\
    \      228 Entering Long Passive Mode (af,hal,h1,h2,h3,h4...,pal,p1,p2...)\n"
- title: 4.  Permanent Negative Completion Reply Codes
  contents:
  - "4.  Permanent Negative Completion Reply Codes\n   The negative completion reply\
    \ codes that are associated with syntax\n   errors in the PORT and PASV commands\
    \ are appropriate for the LPRT and\n   LPSV commands (500, 501).  An additional\
    \ negative completion reply\n   code is needed to distinguish the case where a\
    \ host supports the LPRT\n   or LPSV command, but does not support the address\
    \ family specified.\n   Of the FTP function groupings currently defined for reply\
    \ codes\n   (syntax, information, connections, authentication and accounting,\
    \ and\n   file system), \"connections\" seems the most logical choice; thus, an\n\
    \   additional negative command completion reply code, 521 is added, with\n  \
    \ the following suggested textual message:\n      521 Supported address families\
    \ are (af1, af2, ..., afn)\n   Where (af1, af2, ..., afn) are the values of the\
    \ version numbers of\n   the \"next generation\" or other protocol families supported.\
    \  IP\n   address noted earlier.\n"
- title: 5.  Rationale
  contents:
  - "5.  Rationale\n   An explicit address family argument in the LPRT command and\
    \ LPSV\n   reply allows the Internet community to experiment with a variety of\n\
    \   \"next generation IP\" alternatives within a common FTP implementation\n \
    \  framework.  (It also allows the use of a different address family on\n   the\
    \ command and data connections.)  An explicit length indicator for\n   the host\
    \ address is necessary because some of the IPNG alternatives\n   make use of variable\
    \ length addresses.  An explicit host address is\n   necessary because FTP says\
    \ it's necessary.\n   The decision to provide a length indicator for the port\
    \ number is not\n   as obvious, and certainly goes beyond the necessary condition\
    \ of\n   having to support TCP port numbers. Currently, at least one IPng\n  \
    \ alternative (TP/IX) supports longer port addresses.  And given the\n   increasingly\
    \ \"multi-protocol\" nature of the Internet, it seems\n   reasonable that someone,\
    \ somewhere, might wish to operate FTP operate\n   over Appletalk, IPX, and OSI\
    \ networks as well as TCP/IP networks.\n   (In theory, FTP should operate over\
    \ *any* transport protocol that\n   offers the same service as TCP.) Since some\
    \ of these transport\n   protocols may offer transport selectors or port numbers\
    \ that exceed\n   16 bits, a length indicator may be desirable.  If FTP must indeed\
    \ be\n   changed to accommodate larger network addresses, it may be prudent to\n\
    \   determine at this time whether the same flexibility is useful or\n   necessary\
    \ with respect to transport addresses.\n"
- title: 6.  Conclusions
  contents:
  - "6.  Conclusions\n   The mechanism defined here is simple, extensible, and meets\
    \ both IPNG\n   and possibly multi-protocol internet needs.\n"
- title: 7.  References
  contents:
  - "7.  References\n   STD 9, RFC 959  Postel, J., and J. Reynolds, \"File Transfer\
    \ Protocol\",\n                   STD 9, RFC 959, USC/Information Sciences Institute,\n\
    \                   October 1985.\n   STD 2, RFC 1340 Reynolds, J., and J. Postel,\
    \ \"Assigned Numbers\",\n                   STD 2, RFC 1340, USC/Information Sciences\
    \ Institute,\n                   July 1992.  (Does not include recently assigned\
    \ IPv7\n                   numbers).\n   STD 3, RFC 1123 Braden, R., Editor, \"\
    Requirements for Internet\n                   Hosts - Application and Support\"\
    , STD 3, RFC 1123,\n                   USC/Information Sciences Institute, October\
    \ 1989.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 9.  Author's Address
  contents:
  - "9.  Author's Address\n   David M. Piscitello\n   Bell Communications Research\n\
    \   NVC 1C322\n   331 Newman Springs Road\n   Red Bank, NJ 07701\n   EMail: dave@mail.bellcore.com\n"
