- title: __initial_text__
  contents:
  - '                         Firewall-Friendly FTP

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document provides information for the Internet community.\
    \  This\n   document does not specify an Internet standard of any kind.\n   Distribution\
    \ of this document is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes a suggested change to the behavior of FTP client\n\
    \   programs.  No protocol modifications are required, though we outline\n   some\
    \ that might be useful.\n"
- title: Overview and Rational
  contents:
  - "Overview and Rational\n   The FTP protocol [1] uses a secondary TCP connection\
    \ for actual\n   transmission of files.  By default, this connection is set up\
    \ by an\n   active open from the FTP server to the FTP client.  However, this\n\
    \   scheme does not work well with packet filter-based firewalls, which\n   in\
    \ general cannot permit incoming calls to random port numbers.\n   If, on the\
    \ other hand, clients use the PASV command, the data channel\n   will be an outgoing\
    \ call through the firewall.  Such calls are more\n   easily handled, and present\
    \ fewer problems.\n"
- title: The Gory Details
  contents:
  - "The Gory Details\n   The FTP specification says that by default, all data transfers\
    \ should\n   be over a single connection.  An active open is done by the server,\n\
    \   from its port 20 to the same port on the client machine as was used\n   for\
    \ the control connection.  The client does a passive open.\n   For better or worse,\
    \ most current FTP clients do not behave that way.\n   A new connection is used\
    \ for each transfer; to avoid running afoul of\n   TCP's TIMEWAIT state, the client\
    \ picks a new port number each time\n   and sends a PORT command announcing that\
    \ to the server.\n   Neither scenario is firewall-friendly.  If a packet filter\
    \ is used\n   (as, for example, provided by most modern routers), the data channel\n\
    \   requests appear as incoming calls to unknown ports.  Most firewalls\n   are\
    \ constructed to allow incoming calls only to certain believed-to-\n   be-safe\
    \ ports, such as SMTP.  The usual compromise is to block only\n   the \"server\"\
    \ area, i.e., port numbers below 1024.  But that strategy\n   is risky; dangerous\
    \ services such as X Windows live at higher-\n   numbered ports.\n   Outgoing\
    \ calls, on the other hand, present fewer problems, either for\n   the firewall\
    \ administrator or for the packet filter.  Any TCP packet\n   with the ACK bit\
    \ set cannot be the packet used to initiate a TCP\n   connection; filters can\
    \ be configured to pass such packets in the\n   outbound direction only.  We thus\
    \ want to change the behavior of FTP\n   so that the data channel is implemented\
    \ as a call from the client to\n   the server.\n   Fortunately, the necessary\
    \ mechanisms already exist in the protocol.\n   If the client sends a PASV command,\
    \ the server will do a passive TCP\n   open on some random port, and inform the\
    \ client of the port number.\n   The client can then do an active open to establish\
    \ the connection.\n   There are a few FTP servers in existence that do not honor\
    \ the PASV\n   command.  While this is unfortunate (and in violation of STD 3,\
    \ RFC\n   1123 [2]), it does not pose a problem.  Non-conforming\n   implementations\
    \ will return a \"500 Command not understood\" message;\n   it is a simple matter\
    \ to fall back to current behavior.  While it may\n   not be possible to talk\
    \ to such sites through a firewall, that would\n   have been the case had PASV\
    \ not been adopted.\n"
- title: Recommendation
  contents:
  - "Recommendation\n   We recommend that vendors convert their FTP client programs\n\
    \   (including FTP proxy agents such as Gopher [3] daemons) to use PASV\n   instead\
    \ of PORT.  There is no reason not to use it even for non-\n   firewall transfers,\
    \ and adopting it as standard behavior will make\n   the client more useful in\
    \ a firewall environment.\n   STD 3, RFC 1123 notes that the format of the response\
    \ to a PASV\n   command is not well-defined.  We therefore recommend that FTP\
    \ clients\n   and servers follow the recommendations of that RFC for solving this\n\
    \   problem.\n"
- title: Discussion
  contents:
  - "Discussion\n   Given the behavior of most current FTP clients, the use of PASV\
    \ does\n   not cause any additional messages to be sent.  In all cases, a\n  \
    \ transfer operation is preceded by an extra exchange between the\n   client and\
    \ the server; it does not matter if that exchange involves a\n   PORT command\
    \ or a PASV command.\n   There is some extra overhead with Gopher-style clients;\
    \ since they\n   transfer exactly one file per control channel connection, they\
    \ do not\n   need to use PORT commands.  If this is a serious concern, the Gopher\n\
    \   proxy should be located on the outside of the firewall, so that it is\n  \
    \ not hampered by the packet filter's restrictions.\n   If we accept that clients\
    \ should always perform active opens, it\n   might be worthwhile enhancing the\
    \ FTP protocol to eliminate the extra\n   exchange entirely.  At startup time,\
    \ the client could send a new\n   command APSV (\"all passive\"); a server that\
    \ implements this option\n   would always do a passive open.  A new reply code\
    \ 151 would be issued\n   in response to all file transfer requests not preceded\
    \ by a PORT or\n   PASV command; this message would contain the port number to\
    \ use for\n   that transfer.  A PORT command could still be sent to a server that\n\
    \   had previously received APSV; that would override the default\n   behavior\
    \ for the next transfer operation, thus permitting third-party\n   transfers.\n"
- title: Implementation Status
  contents:
  - "Implementation Status\n   At least two independent implementations of the modified\
    \ clients\n   exist.  Source code to one is freely available.  To our knowledge,\n\
    \   APSV has not been implemented.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Some people feel that packet filters are dangerous,\
    \ since they are\n   very hard to configure properly.  We agree.  But they are\
    \ quite\n   popular.  Another common complaint is that permitting arbitrary\n\
    \   outgoing calls is dangerous, since it allows free export of sensitive\n  \
    \ data through a firewall.  Some firewalls impose artificial bandwidth\n   limits\
    \ to discourage this.  While a discussion of the merits of this\n   approach is\
    \ beyond the scope of this memo, we note that the sort of\n   application-level\
    \ gateway necessary to implement a bandwidth limiter\n   could be implemented\
    \ just as easily using PASV as with PORT.\n   Using PASV does enhances the security\
    \ of gateway machines, since they\n   no longer need to create ports that an outsider\
    \ might connect to\n   before the real FTP client.  More importantly, the protocol\
    \ between\n   the client host and the firewall can be simplified, if there is\
    \ no\n   need to specify a \"create\" operation.\n   Concerns have been expressed\
    \ that this use of PASV just trades one\n   problem for another.  With it, the\
    \ FTP server must accept calls to\n   random ports, which could pose an equal\
    \ problem for its firewall.  We\n   believe that this is not a serious issue,\
    \ for several reasons.\n   First, there are many fewer FTP servers than there\
    \ are clients.  It\n   is possible to secure a small number of special-purpose\
    \ machines,\n   such as gateways and organizational FTP servers.  The firewall's\n\
    \   filters can be configured to allow access to just these machines.\n   Further\
    \ precautions can be taken by modifying the FTP server so that\n   it only uses\
    \ very high-numbered ports for the data channel.  It is\n   comparatively easy\
    \ to ensure that no dangerous services live in a\n   given port range.  Again,\
    \ this is feasible because of the small\n   number of servers.\n"
- title: References
  contents:
  - "References\n   [1] Postel, J., and J. Reynolds, \"File Transfer Protocol\", STD\
    \ 1, RFC\n       959, USC/Information Sciences Institute, October 1985.\n   [2]\
    \ Braden, R., Editor, \"Requirements for Internet Hosts -\n       Application\
    \ and Support\", STD 3, RFC 1123, USC/Information\n       Sciences Institute,\
    \ October 1989.\n   [3] Anklesaria, F., McCahill, M., Lindner, P., Johnson, D.,\
    \ Torrey,\n       D., and B. Alberti, \"The Internet Gopher Protocol (a distributed\n\
    \       document search and retrieval protocol)\", RFC 1436, University of\n \
    \      Minnesota, March 1993.\n"
- title: Author's Address
  contents:
  - "Author's Address\n       Steven M. Bellovin\n       AT&T Bell Laboratories\n\
    \       600 Mountain Avenue\n       Murray Hill, NJ  07974\n       Phone: (908)\
    \ 582-5886\n       EMail: smb@research.att.com\n"
