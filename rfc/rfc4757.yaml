- title: __initial_text__
  contents:
  - '    The RC4-HMAC Kerberos Encryption Types Used by Microsoft Windows

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2006).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This document documents the RC4 Kerberos encryption types first\n\
    \   introduced in Microsoft Windows 2000.  Since then, these encryption\n   types\
    \ have been implemented in a number of Kerberos implementations.\n   The IETF\
    \ Kerberos community supports publishing this specification as\n   an informational\
    \ document in order to describe this widely\n   implemented technology.  However,\
    \ while these encryption types\n   provide the operations necessary to implement\
    \ the base Kerberos\n   specification [RFC4120], they do not provide all the required\n\
    \   operations in the Kerberos cryptography framework [RFC3961].  As a\n   result,\
    \ it is not generally possible to implement potential\n   extensions to Kerberos\
    \ using these encryption types.  The Kerberos\n   encryption type negotiation\
    \ mechanism [RFC4537] provides one approach\n   for using such extensions even\
    \ when a Kerberos infrastructure uses\n   long-term RC4 keys.  Because this specification\
    \ does not implement\n   operations required by RFC 3961 and because of security\
    \ concerns with\n   the use of RC4 and MD4 discussed in Section 8, this specification\
    \ is\n   not appropriate for publication on the standards track.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Microsoft Windows 2000 implementation of Kerberos introduces\
    \ a\n   new encryption type based on the RC4 encryption algorithm and using\n\
    \   an MD5 HMAC for checksum.  This is offered as an alternative to using\n  \
    \ the existing DES-based encryption types.\n   The RC4-HMAC encryption types are\
    \ used to ease upgrade of existing\n   Windows NT environments, provide strong\
    \ cryptography (128-bit key\n   lengths), and provide exportable (meet United\
    \ States government\n   export restriction requirements) encryption.  This document\
    \ describes\n   the implementation of those encryption types.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Conventions Used in This Document ..........................3\n  \
    \ 2. Key Generation ..................................................3\n   3.\
    \ Basic Operations ................................................4\n   4. Checksum\
    \ Types ..................................................5\n   5. Encryption\
    \ Types ................................................6\n   6. Key Strength\
    \ Negotiation ........................................8\n   7. GSS-API Kerberos\
    \ V5 Mechanism Type ..............................8\n      7.1. Mechanism Specific\
    \ Changes .................................8\n      7.2. GSS-API MIC Semantics\
    \ ......................................9\n      7.3. GSS-API WRAP Semantics ....................................11\n\
    \   8. Security Considerations ........................................15\n  \
    \ 9. IANA Considerations ............................................15\n   10.\
    \ Acknowledgements ..............................................15\n   11. References\
    \ ....................................................16\n      11.1. Normative\
    \ References .....................................16\n      11.2. Informative\
    \ References ...................................16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Microsoft Windows 2000 implementation of Kerberos contains\
    \ new\n   encryption and checksum types for two reasons.  First, for export\n\
    \   reasons early in the development process, 56-bit DES encryption could\n  \
    \ not be exported, and, second, upon upgrade from Windows NT 4.0 to\n   Windows\
    \ 2000, accounts will not have the appropriate DES keying\n   material to do the\
    \ standard DES encryption.  Furthermore, 3DES was\n   not available for export\
    \ when Windows 2000 was released, and there\n   was a desire to use a single flavor\
    \ of encryption in the product for\n   both US and international products.\n \
    \  As a result, there are two new encryption types and one new checksum\n   type\
    \ introduced in Microsoft Windows 2000.\n   Note that these cryptosystems aren't\
    \ intended to be complete,\n   general-purpose Kerberos encryption or checksum\
    \ systems as defined in\n   [RFC3961]: there is no one-one mapping between the\
    \ operations in this\n   documents and the primitives described in [RFC3961].\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" are to\n   be interpreted as described in [RFC2119].\n"
- title: 2.  Key Generation
  contents:
  - "2.  Key Generation\n   On upgrade from existing Windows NT domains, the user\
    \ accounts would\n   not have a DES-based key available to enable the use of DES\
    \ base\n   encryption types specified in [RFC4120] and [RFC3961].  The key used\n\
    \   for RC4-HMAC is the same as the existing Windows NT key (NT Password\n   Hash)\
    \ for compatibility reasons.  Once the account password is\n   changed, the DES-based\
    \ keys are created and maintained.  Once the DES\n   keys are available, DES-based\
    \ encryption types can be used with\n   Kerberos.\n   The RC4-HMAC string to key\
    \ function is defined as follows:\n      String2Key(password)\n           K =\
    \ MD4(UNICODE(password))\n   The RC4-HMAC keys are generated by using the Windows\
    \ UNICODE version\n   of the password.  Each Windows UNICODE character is encoded\
    \ in\n   little-endian format of 2 octets each.  Then an MD4 [RFC1320] hash\n\
    \   operation is performed on just the UNICODE characters of the password\n  \
    \ (not including the terminating zero octets).\n   For an account with a password\
    \ of \"foo\", this String2Key(\"foo\") will\n   return:\n           0xac, 0x8e,\
    \ 0x65, 0x7f, 0x83, 0xdf, 0x82, 0xbe,\n           0xea, 0x5d, 0x43, 0xbd, 0xaf,\
    \ 0x78, 0x00, 0xcc\n"
- title: 3.  Basic Operations
  contents:
  - "3.  Basic Operations\n   The MD5 HMAC function is defined in [RFC2104].  It is\
    \ used in this\n   encryption type for checksum operations.  Refer to [RFC2104]\
    \ for\n   details on its operation.  In this document, this function is\n   referred\
    \ to as HMAC(Key, Data) returning the checksum using the\n   specified key on\
    \ the data.\n   The basic MD5 hash operation is used in this encryption type and\n\
    \   defined in [RFC1321].  In this document, this function is referred to\n  \
    \ as MD5(Data) returning the checksum of the data.\n   RC4 is a stream cipher\
    \ licensed by RSA Data Security.  In this\n   document, the function is referred\
    \ to as RC4(Key, Data) returning the\n   encrypted data using the specified key\
    \ on the data.\n   These encryption types use key derivation.  With each message,\
    \ the\n   message type (T) is used as a component of the keying material.  The\n\
    \   following table summarizes the different key derivation values used\n   in\
    \ the various operations.  Note that these differ from the key\n   derivations\
    \ used in other Kerberos encryption types.  T = the message\n   type, encoded\
    \ as a little-endian four-byte integer.\n      1.  AS-REQ PA-ENC-TIMESTAMP padata\
    \ timestamp, encrypted with the\n          client key (T=1)\n      2.  AS-REP\
    \ Ticket and TGS-REP Ticket (includes TGS session key or\n          application\
    \ session key), encrypted with the service key (T=2)\n      3.  AS-REP encrypted\
    \ part (includes TGS session key or application\n          session key), encrypted\
    \ with the client key (T=8)\n      4.  TGS-REQ KDC-REQ-BODY AuthorizationData,\
    \ encrypted with the TGS\n          session key (T=4)\n      5.  TGS-REQ KDC-REQ-BODY\
    \ AuthorizationData, encrypted with the TGS\n          authenticator subkey (T=5)\n\
    \      6.  TGS-REQ PA-TGS-REQ padata AP-REQ Authenticator cksum, keyed\n     \
    \     with the TGS session key (T=6)\n      7.  TGS-REQ PA-TGS-REQ padata AP-REQ\
    \ Authenticator (includes TGS\n          authenticator subkey), encrypted with\
    \ the TGS session key T=7)\n      8.  TGS-REP encrypted part (includes application\
    \ session key),\n          encrypted with the TGS session key (T=8)\n      9.\
    \  TGS-REP encrypted part (includes application session key),\n          encrypted\
    \ with the TGS authenticator subkey (T=8)\n      10. AP-REQ Authenticator cksum,\
    \ keyed with the application session\n          key (T=10)\n      11. AP-REQ Authenticator\
    \ (includes application authenticator\n          subkey), encrypted with the application\
    \ session key (T=11)\n      12. AP-REP encrypted part (includes application session\
    \ subkey),\n          encrypted with the application session key (T=12)\n    \
    \  13. KRB-PRIV encrypted part, encrypted with a key chosen by the\n         \
    \ application.  Also for data encrypted with GSS Wrap (T=13)\n      14. KRB-CRED\
    \ encrypted part, encrypted with a key chosen by the\n          application (T=14)\n\
    \      15. KRB-SAFE cksum, keyed with a key chosen by the application.\n     \
    \     Also for data signed in GSS MIC (T=15)\n      Relative to RFC-1964 key uses:\n\
    \      T = 0 in the generation of sequence number for the MIC token\n      T =\
    \ 0 in the generation of sequence number for the WRAP token\n      T = 0 in the\
    \ generation of encrypted data for the WRAPPED token\n   All strings in this document\
    \ are ASCII unless otherwise specified.\n   The lengths of ASCII-encoded character\
    \ strings include the trailing\n   terminator character (0).  The concat(a,b,c,...)\
    \ function will return\n   the logical concatenation (left to right) of the values\
    \ of the\n   arguments.  The nonce(n) function returns a pseudo-random number\
    \ of\n   \"n\" octets.\n"
- title: 4.  Checksum Types
  contents:
  - "4.  Checksum Types\n   There is one checksum type used in this encryption type.\
    \  The\n   Kerberos constant for this type is:\n           #define KERB_CHECKSUM_HMAC_MD5\
    \ (-138)\n      The function is defined as follows:\n      K = the Key\n     \
    \ T = the message type, encoded as a little-endian four-byte integer\n      CHKSUM(K,\
    \ T, data)\n           Ksign = HMAC(K, \"signaturekey\")  //includes zero octet\
    \ at end\n           tmp = MD5(concat(T, data))\n           CHKSUM = HMAC(Ksign,\
    \ tmp)\n"
- title: 5.  Encryption Types
  contents:
  - "5.  Encryption Types\n   There are two encryption types used in these encryption\
    \ types.  The\n   Kerberos constants for these types are:\n           #define\
    \ KERB_ETYPE_RC4_HMAC             23\n           #define KERB_ETYPE_RC4_HMAC_EXP\
    \         24\n   The basic encryption function is defined as follows:\n     T\
    \ = the message type, encoded as a little-endian four-byte integer.\n        \
    \   OCTET L40[14] = \"fortybits\";\n      The header field on the encrypted data\
    \ in KDC messages is:\n           typedef struct _RC4_MDx_HEADER {\n         \
    \      OCTET Checksum[16];\n               OCTET Confounder[8];\n           }\
    \ RC4_MDx_HEADER, *PRC4_MDx_HEADER;\n           ENCRYPT (K, export, T, data)\n\
    \           {\n               struct EDATA {\n                   struct HEADER\
    \ {\n                           OCTET Checksum[16];\n                        \
    \   OCTET Confounder[8];\n                   } Header;\n                   OCTET\
    \ Data[0];\n               } edata;\n               if (export){\n           \
    \        *((DWORD *)(L40+10)) = T;\n                   K1 = HMAC(K, L40); // where\
    \ the length of L40 in\n                                      // octets is 14\n\
    \               }\n               else\n               {\n                   K1\
    \ = HMAC(K, &T); // where the length of T in octets\n                        \
    \             // is 4\n               }\n               memcpy (K2, K1, 16);\n\
    \               if (export) memset (K1+7, 0xAB, 9);\n               nonce (edata.Confounder,\
    \ 8);\n               memcpy (edata.Data, data);\n               edata.Checksum\
    \ = HMAC (K2, edata);\n               K3 = HMAC (K1, edata.Checksum);\n      \
    \         RC4 (K3, edata.Confounder);\n               RC4 (K3, data.Data);\n \
    \          }\n           DECRYPT (K, export, T, edata)\n           {\n       \
    \        // edata looks like\n               struct EDATA {\n                \
    \   struct HEADER {\n                           OCTET Checksum[16];\n        \
    \                   OCTET Confounder[8];\n                   } Header;\n     \
    \              OCTET Data[0];\n               } edata;\n               if (export){\n\
    \                   *((DWORD *)(L40+10)) = T;\n                   HMAC (K, L40,\
    \ 14, K1);\n               }\n               else\n               {\n        \
    \           HMAC (K, &T, 4, K1);\n               }\n               memcpy (K2,\
    \ K1, 16);\n               if (export) memset (K1+7, 0xAB, 9);\n             \
    \  K3 = HMAC (K1, edata.Checksum);\n               RC4 (K3, edata.Confounder);\n\
    \               RC4 (K3, edata.Data);\n               // verify generated and\
    \ received checksums\n             checksum = HMAC (K2, concat(edata.Confounder,\
    \ edata.Data));\n               if (checksum != edata.Checksum)\n            \
    \       printf(\"CHECKSUM ERROR  !!!!!!\\n\");\n           }\n   The KDC message\
    \ is encrypted using the ENCRYPT function not including\n   the Checksum in the\
    \ RC4_MDx_HEADER.\n   The character constant \"fortybits\" evolved from the time\
    \ when a\n   40-bit key length was all that was exportable from the United States.\n\
    \   It is now used to recognize that the key length is of \"exportable\"\n   length.\
    \  In this description, the key size is actually 56 bits.\n   The pseudo-random\
    \ operation [RFC3961] for both enctypes above is\n   defined as follows:\n   \
    \        pseudo-random(K, S) = HMAC-SHA1(K, S)\n   where K is the protocol key\
    \ and S is the input octet string.\n   HMAC-SHA1 is defined in [RFC2104] and the\
    \ output of HMAC-SHA1 is the\n   20-octet digest.\n"
- title: 6.  Key Strength Negotiation
  contents:
  - "6.  Key Strength Negotiation\n   A Kerberos client and server can negotiate over\
    \ key length if they\n   are using mutual authentication.  If the client is unable\
    \ to perform\n   full-strength encryption, it may propose a key in the \"subkey\"\
    \ field\n   of the authenticator, using a weaker encryption type.  The server\n\
    \   must then either return the same key or suggest its own key in the\n   subkey\
    \ field of the AP reply message.  The key used to encrypt data\n   is derived\
    \ from the key returned by the server.  If the client is\n   able to perform strong\
    \ encryption but the server is not, it may\n   propose a subkey in the AP reply\
    \ without first being sent a subkey in\n   the authenticator.\n"
- title: 7.  GSS-API Kerberos V5 Mechanism Type
  contents:
  - '7.  GSS-API Kerberos V5 Mechanism Type

    '
- title: 7.1.   Mechanism Specific Changes
  contents:
  - "7.1.   Mechanism Specific Changes\n   The Generic Security Service Application\
    \ Program Interface (GSS-API)\n   per-message tokens also require new checksum\
    \ and encryption types.\n   The GSS-API per-message tokens are adapted to support\
    \ these new\n   encryption types.  See [RFC1964] Section 1.2.2.\n   The only support\
    \ quality of protection is:\n         #define GSS_KRB5_INTEG_C_QOP_DEFAULT   \
    \ 0x0\n   When using this RC4-based encryption type, the sequence number is\n\
    \   always sent in big-endian rather than little-endian order.\n   The Windows\
    \ 2000 implementation also defines new GSS-API flags in the\n   initial token\
    \ passed when initializing a security context.  These\n   flags are passed in\
    \ the checksum field of the authenticator.  See\n   [RFC1964] Section 1.1.1.\n\
    \   GSS_C_DCE_STYLE - This flag was added for use with Microsoft's\n   implementation\
    \ of Distributed Computing Environment Remote Procedure\n   Call (DCE RPC), which\
    \ initially expected three legs of\n   authentication.  Setting this flag causes\
    \ an extra AP reply to be\n   sent from the client back to the server after receiving\
    \ the server's\n   AP reply.  In addition, the context negotiation tokens do not\
    \ have\n   GSS-API per-message tokens -- they are raw AP messages that do not\n\
    \   include object identifiers.\n           #define GSS_C_DCE_STYLE          \
    \       0x1000\n   GSS_C_IDENTIFY_FLAG - This flag allows the client to indicate\
    \ to the\n   server that it should only allow the server application to identify\n\
    \   the client by name and ID, but not to impersonate the client.\n          \
    \ #define GSS_C_IDENTIFY_FLAG             0x2000\n   GSS_C_EXTENDED_ERROR_FLAG\
    \ - Setting this flag indicates that the\n   client wants to be informed of extended\
    \ error information.  In\n   particular, Windows 2000 status codes may be returned\
    \ in the data\n   field of a Kerberos error message.  This allows the client to\n\
    \   understand a server failure more precisely.  In addition, the server\n   may\
    \ return errors to the client that are normally handled at the\n   application\
    \ layer in the server, in order to let the client try to\n   recover.  After receiving\
    \ an error message, the client may attempt to\n   resubmit an AP request.\n  \
    \         #define GSS_C_EXTENDED_ERROR_FLAG       0x4000\n   These flags are only\
    \ used if a client is aware of these conventions\n   when using the Security Support\
    \ Provider Interface (SSPI) on the\n   Windows platform; they are not generally\
    \ used by default.\n   When NetBIOS addresses are used in the GSS-API, they are\
    \ identified\n   by the GSS_C_AF_NETBIOS value.  This value is defined as:\n \
    \          #define GSS_C_AF_NETBIOS                0x14\n   NetBios addresses\
    \ are 16-octet addresses typically composed of 1 to\n   15 characters, trailing\
    \ blank (ASCII char 20) filled, with a 16th\n   octet of 0x0.\n"
- title: 7.2.   GSS-API MIC Semantics
  contents:
  - "7.2.   GSS-API MIC Semantics\n   The GSS-API checksum type and algorithm are\
    \ defined in Section 5.\n   Only the first 8 octets of the checksum are used.\
    \  The resulting\n   checksum is stored in the SGN_CKSUM field.  See [RFC1964]\
    \ Section 1.2\n   for GSS_GetMIC() and GSS_Wrap(conf_flag=FALSE).\n   The GSS_GetMIC\
    \ token has the following format:\n        Byte no         Name        Description\n\
    \        0..1           TOK_ID     Identification field.\n                   \
    \               Tokens emitted by GSS_GetMIC() contain\n                     \
    \             the hex value 01 01 in this field.\n        2..3           SGN_ALG\
    \    Integrity algorithm indicator.\n                                  11 00 -\
    \ HMAC\n        4..7           Filler     Contains ff ff ff ff\n        8..15\
    \          SND_SEQ    Sequence number field.\n        16..23         SGN_CKSUM\
    \  Checksum of \"to-be-signed data\",\n                                  calculated\
    \ according to algorithm\n                                  specified in SGN_ALG\
    \ field.\n   The MIC mechanism used for GSS-MIC-based messages is as follows:\n\
    \           GetMIC(Kss, direction, export, seq_num, data)\n           {\n    \
    \               struct Token {\n                          struct Header {\n  \
    \                               OCTET TOK_ID[2];\n                           \
    \      OCTET SGN_ALG[2];\n                                 OCTET Filler[4];\n\
    \                            };\n                          OCTET SND_SEQ[8];\n\
    \                          OCTET SGN_CKSUM[8];\n                   } Token;\n\
    \                   Token.TOK_ID = 01 01;\n                   Token.SGN_SLG =\
    \ 11 00;\n                   Token.Filler = ff ff ff ff;\n                   //\
    \ Create the sequence number\n                   if (direction == sender_is_initiator)\n\
    \                   {\n                           memset(Token.SEND_SEQ+4, 0xff,\
    \ 4)\n                   }\n                   else if (direction == sender_is_acceptor)\n\
    \                   {\n                           memset(Token.SEND_SEQ+4, 0,\
    \ 4)\n                   }\n                   Token.SEND_SEQ[0] = (seq_num &\
    \ 0xff000000) >> 24;\n                   Token.SEND_SEQ[1] = (seq_num & 0x00ff0000)\
    \ >> 16;\n                   Token.SEND_SEQ[2] = (seq_num & 0x0000ff00) >> 8;\n\
    \                   Token.SEND_SEQ[3] = (seq_num & 0x000000ff);\n            \
    \       // Derive signing key from session key\n                   Ksign = HMAC(Kss,\
    \ \"signaturekey\");\n                                     // length includes\
    \ terminating null\n                   // Generate checksum of message - SGN_CKSUM\n\
    \                   //   Key derivation salt = 15\n                   Sgn_Cksum\
    \ = MD5((int32)15, Token.Header, data);\n                   // Save first 8 octets\
    \ of HMAC Sgn_Cksum\n                   Sgn_Cksum = HMAC(Ksign, Sgn_Cksum);\n\
    \                   memcpy(Token.SGN_CKSUM, Sgn_Cksum, 8);\n                 \
    \  // Encrypt the sequence number\n                   // Derive encryption key\
    \ for the sequence number\n                   //   Key derivation salt = 0\n \
    \                  if (exportable)\n                   {\n                   \
    \        Kseq = HMAC(Kss, \"fortybits\", (int32)0);\n                        \
    \                // len includes terminating null\n                          \
    \ memset(Kseq+7, 0xab, 7)\n                   }\n                   else\n   \
    \                {\n                            Kseq = HMAC(Kss, (int32)0);\n\
    \                   }\n                   Kseq = HMAC(Kseq, Token.SGN_CKSUM);\n\
    \                   // Encrypt the sequence number\n                   RC4(Kseq,\
    \ Token.SND_SEQ);\n           }\n"
- title: 7.3.   GSS-API WRAP Semantics
  contents:
  - "7.3.   GSS-API WRAP Semantics\n   There are two encryption keys for GSS-API message\
    \ tokens, one that is\n   128 bits in strength and one that is 56 bits in strength\
    \ as defined\n   in Section 6.\n   All padding is rounded up to 1 byte.  One byte\
    \ is needed to say that\n   there is 1 byte of padding.  The DES-based mechanism\
    \ type uses 8-byte\n   padding.  See [RFC1964] Section 1.2.2.3.\n   The RC4-HMAC\
    \ GSS_Wrap() token has the following format:\n      Byte no          Name    \
    \     Description\n        0..1           TOK_ID       Identification field.\n\
    \                                    Tokens emitted by GSS_Wrap() contain\n  \
    \                                  the hex value 02 01 in this field.\n      \
    \  2..3           SGN_ALG      Checksum algorithm indicator.\n               \
    \                     11 00 - HMAC\n        4..5           SEAL_ALG     ff ff\
    \ - none\n                                    00 00 - DES-CBC\n              \
    \                      10 00 - RC4\n        6..7           Filler       Contains\
    \ ff ff\n        8..15          SND_SEQ      Encrypted sequence number field.\n\
    \        16..23         SGN_CKSUM    Checksum of plaintext padded data,\n    \
    \                                calculated according to algorithm\n         \
    \                           specified in SGN_ALG field.\n        24..31      \
    \   Confounder   Random confounder.\n        32..last       Data         Encrypted\
    \ or plaintext padded data.\n   The encryption mechanism used for GSS-wrap-based\
    \ messages is as\n   follows:\n           WRAP(Kss, encrypt, direction, export,\
    \ seq_num, data)\n           {\n                   struct Token {          //\
    \ 32 octets\n                          struct Header {\n                     \
    \            OCTET TOK_ID[2];\n                                 OCTET SGN_ALG[2];\n\
    \                                 OCTET SEAL_ALG[2];\n                       \
    \          OCTET Filler[2];\n                          };\n                  \
    \        OCTET SND_SEQ[8];\n                          OCTET SGN_CKSUM[8];\n  \
    \                          OCTET Confounder[8];\n                   } Token;\n\
    \                   Token.TOK_ID = 02 01;\n                   Token.SGN_SLG =\
    \ 11 00;\n                   Token.SEAL_ALG = (no_encrypt)? ff ff : 10 00;\n \
    \                  Token.Filler = ff ff;\n                   // Create the sequence\
    \ number\n                   if (direction == sender_is_initiator)\n         \
    \          {\n                           memset(&Token.SEND_SEQ[4], 0xff, 4)\n\
    \                   }\n                   else if (direction == sender_is_acceptor)\n\
    \                   {\n                           memset(&Token.SEND_SEQ[4], 0,\
    \ 4)\n                   }\n                   Token.SEND_SEQ[0] = (seq_num &\
    \ 0xff000000) >> 24;\n                   Token.SEND_SEQ[1] = (seq_num & 0x00ff0000)\
    \ >> 16;\n                   Token.SEND_SEQ[2] = (seq_num & 0x0000ff00) >> 8;\n\
    \                   Token.SEND_SEQ[3] = (seq_num & 0x000000ff);\n            \
    \       // Generate random confounder\n                   nonce(&Token.Confounder,\
    \ 8);\n                   // Derive signing key from session key\n           \
    \        Ksign = HMAC(Kss, \"signaturekey\");\n                   // Generate\
    \ checksum of message -\n                   //  SGN_CKSUM + Token.Confounder\n\
    \                   //   Key derivation salt = 15\n                   Sgn_Cksum\
    \ = MD5((int32)15, Token.Header,\n                                   Token.Confounder);\n\
    \                   // Derive encryption key for data\n                   // \
    \  Key derivation salt = 0\n                   for (i = 0; i < 16; i++) Klocal[i]\
    \ = Kss[i] ^ 0xF0;\n                                                         \
    \   // XOR\n                   if (exportable)\n                   {\n       \
    \                    Kcrypt = HMAC(Klocal, \"fortybits\", (int32)0);\n       \
    \                                // len includes terminating null\n          \
    \                 memset(Kcrypt+7, 0xab, 7);\n                   }\n         \
    \          else\n                   {\n                           Kcrypt = HMAC(Klocal,\
    \ (int32)0);\n                     }\n                   // new encryption key\
    \ salted with seq\n                   Kcrypt = HMAC(Kcrypt, (int32)seq);\n   \
    \                // Encrypt confounder (if encrypting)\n                   if\
    \ (encrypt)\n                           RC4(Kcrypt, Token.Confounder);\n     \
    \              // Sum the data buffer\n                   Sgn_Cksum += MD5(data);\
    \         // Append to checksum\n                   // Encrypt the data (if encrypting)\n\
    \                   if (encrypt)\n                           RC4(Kcrypt, data);\n\
    \                   // Save first 8 octets of HMAC Sgn_Cksum\n               \
    \    Sgn_Cksum = HMAC(Ksign, Sgn_Cksum);\n                   memcpy(Token.SGN_CKSUM,\
    \ Sgn_Cksum, 8);\n                   // Derive encryption key for the sequence\
    \ number\n                   //   Key derivation salt = 0\n                  \
    \ if (exportable)\n                   {\n                           Kseq = HMAC(Kss,\
    \ \"fortybits\", (int32)0);\n                                       // len includes\
    \ terminating null\n                           memset(Kseq+7, 0xab, 7)\n     \
    \              }\n                   else\n                   {\n            \
    \               Kseq = HMAC(Kss, (int32)0);\n                   }\n          \
    \         Kseq = HMAC(Kseq, Token.SGN_CKSUM);\n                   // Encrypt the\
    \ sequence number\n                   RC4(Kseq, Token.SND_SEQ);\n            \
    \       // Encrypted message = Token + Data\n           }\n   The character constant\
    \ \"fortybits\" evolved from the time when a\n   40-bit key length was all that\
    \ was exportable from the United States.\n   It is now used to recognize that\
    \ the key length is of \"exportable\"\n   length.  In this description, the key\
    \ size is actually 56 bits.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Care must be taken in implementing these encryption\
    \ types because\n   they use a stream cipher.  If a different IV is not used in\
    \ each\n   direction when using a session key, the encryption is weak.  By using\n\
    \   the sequence number as an IV, this is avoided.\n   There are two classes of\
    \ attack on RC4 described in [MIRONOV].\n   Strong distinguishers distinguish\
    \ an RC4 keystream from randomness at\n   the start of the stream.  Weak distinguishers\
    \ can operate on any part\n   of the keystream, and the best ones, described in\
    \ [FMcG] and\n   [MANTIN05], can exploit data from multiple, different keystreams.\
    \  A\n   consequence of these is that encrypting the same data (for instance,\n\
    \   a password) sufficiently many times in separate RC4 keystreams can be\n  \
    \ sufficient to leak information to an adversary.  The encryption types\n   defined\
    \ in this document defend against these by constructing a new\n   keystream for\
    \ every message.  However, it is RECOMMENDED not to use\n   the RC4 encryption\
    \ types defined in this document for high-volume\n   connections.\n   Weaknesses\
    \ in MD4 [BOER91] were demonstrated by den Boer and\n   Bosselaers in 1991.  In\
    \ August 2004, Xiaoyun Wang, et al., reported\n   MD4 collisions generated using\
    \ hand calculation [WANG04].\n   Implementations based on Wang's algorithm can\
    \ find collisions in real\n   time.  However, the intended usage of MD4 described\
    \ in this document\n   does not rely on the collision-resistant property of MD4.\n\
    \   Furthermore, MD4 is always used in the context of a keyed hash in\n   this\
    \ document.  Although no evidence has suggested keyed MD4 hashes\n   are vulnerable\
    \ to collision-based attacks, no study has directly\n   proved that the HMAC-MD4\
    \ is secure: the existing study simply assumed\n   that the hash function used\
    \ in HMAC is collision proof.  It is thus\n   RECOMMENDED not to use the RC4 encryption\
    \ types defined in this\n   document if alternative stronger encryption types,\
    \ such as\n   aes256-cts-hmac-sha1-96 [RFC3962], are available.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   Section 5 of this document defines two Kerberos encryption\
    \ types\n   rc4-hmac (23) and rc4-hmac-exp (24).  The Kerberos parameters\n  \
    \ registration page at <http://www.iana.org/assignments/kerberos-\n   parameters>\
    \ has been updated to reference this document for these two\n   encryption types.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   The authors wish to thank Sam Hartman, Ken Raeburn,\
    \ and Qunli Li for\n   their insightful comments.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC1320]  Rivest, R., \"The MD4 Message-Digest\
    \ Algorithm\", RFC 1320,\n              April 1992.\n   [RFC1321]  Rivest, R.,\
    \ \"The MD5 Message-Digest Algorithm\", RFC 1321,\n              April 1992.\n\
    \   [RFC1964]  Linn, J., \"The Kerberos Version 5 GSS-API Mechanism\",\n     \
    \         RFC 1964, June 1996.\n   [RFC2104]  Krawczyk, H., Bellare, M., and R.\
    \ Canetti, \"HMAC: Keyed-\n              Hashing for Message Authentication\"\
    , RFC 2104,\n              February 1997.\n   [RFC2119]  Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [RFC3961]  Raeburn, K., \"Encryption and Checksum Specifications\
    \ for\n              Kerberos 5\", RFC 3961, February 2005.\n   [RFC3962]  Raeburn,\
    \ K., \"Advanced Encryption Standard (AES)\n              Encryption for Kerberos\
    \ 5\", RFC 3962, February 2005.\n   [RFC4120]  Neuman, C., Yu, T., Hartman, S.,\
    \ and K. Raeburn, \"The\n              Kerberos Network Authentication Service\
    \ (V5)\", RFC 4120,\n              July 2005.\n   [RFC4537]  Zhu, L., Leach, P.,\
    \ and K. Jaganathan, \"Kerberos\n              Cryptosystem Negotiation Extension\"\
    , RFC 4537, June 2006.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [BOER91]   den Boer, B. and A. Bosselaers,\
    \ \"An Attack on the Last Two\n              Rounds of MD4\", Proceedings of the\
    \ 11th Annual\n              International Cryptology Conference on Advances in\n\
    \              Cryptology, pages: 194 - 203, 1991.\n   [FMcG]     Fluhrer, S.\
    \ and D. McGrew, \"Statistical Analysis of the\n              Alleged RC4 Keystream\
    \ Generator\", Fast Software\n              Encryption:  7th International Workshop,\
    \ FSE 2000, April\n              2000, <http://www.mindspring.com/~dmcgrew/rc4-03.pdf>.\n\
    \   [MANTIN05] Mantin, I., \"Predicting and Distinguishing Attacks on RC4\n  \
    \            Keystream Generator\", Advances in Cryptology -- EUROCRYPT\n    \
    \          2005: 24th Annual International Conference on the Theory\n        \
    \      and Applications of Cryptographic Techniques, May 2005.\n   [MIRONOV] \
    \ Mironov, I., \"(Not So) Random Shuffles of RC4\", Advances\n              in\
    \ Cryptology -- CRYPTO 2002: 22nd Annual International\n              Cryptology\
    \ Conference, August 2002,\n              <http://eprint.iacr.org/2002/067.pdf>.\n\
    \   [WANG04]   Wang, X., Lai, X., Feng, D., Chen, H., and X. Yu,\n           \
    \   \"Cryptanalysis of Hash functions MD4 and RIPEMD\", August\n             \
    \ 2004, <http://www.infosec.sdu.edu.cn/paper/md4-ripemd-\n              attck.pdf>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Karthik Jaganathan\n   Microsoft Corporation\n   One Microsoft\
    \ Way\n   Redmond, WA  98052\n   US\n   EMail: karthikj@microsoft.com\n   Larry\
    \ Zhu\n   Microsoft Corporation\n   One Microsoft Way\n   Redmond, WA  98052\n\
    \   US\n   EMail: lzhu@microsoft.com\n   John Brezak\n   Microsoft Corporation\n\
    \   One Microsoft Way\n   Redmond, WA  98052\n   US\n   EMail: jbrezak@microsoft.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2006).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST,\n   AND THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\n   EXPRESS OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT\n   THE USE OF THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\n   IMPLIED WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR\n   PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
