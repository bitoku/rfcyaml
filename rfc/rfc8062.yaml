- title: __initial_text__
  contents:
  - '                     Anonymity Support for Kerberos

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines extensions to the Kerberos protocol to allow\
    \ a\n   Kerberos client to securely communicate with a Kerberos application\n\
    \   service without revealing its identity, or without revealing more\n   than\
    \ its Kerberos realm.  It also defines extensions that allow a\n   Kerberos client\
    \ to obtain anonymous credentials without revealing its\n   identity to the Kerberos\
    \ Key Distribution Center (KDC).  This\n   document updates RFCs 4120, 4121, and\
    \ 4556.  This document obsoletes\n   RFC 6112 and reclassifies that document as\
    \ Historic.  RFC 6112\n   contained errors, and the protocol described in that\
    \ specification is\n   not interoperable with any known implementation.  This\
    \ specification\n   describes a protocol that interoperates with multiple\n  \
    \ implementations.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8062.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Changes since RFC 6112  . . . . . . . . . . . . .\
    \ . . . .   4\n   2.  Conventions Used in This Document . . . . . . . . . . .\
    \ . . .   4\n   3.  Definitions . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   4\n   4.  Protocol Description  . . . . . . . . . . . . . . . . . . .\
    \ .   6\n     4.1.  Anonymity Support in AS Exchange  . . . . . . . . . . . .\
    \   6\n       4.1.1.  Anonymous PKINIT  . . . . . . . . . . . . . . . . . .  \
    \ 7\n     4.2.  Anonymity Support in TGS Exchange . . . . . . . . . . . .   8\n\
    \     4.3.  Subsequent Exchanges and Protocol Actions Common to AS\n         \
    \  and TGS for Anonymity Support . . . . . . . . . . . . . .  10\n   5.  Interoperability\
    \ Requirements . . . . . . . . . . . . . . . .  11\n   6.  GSS-API Implementation\
    \ Notes  . . . . . . . . . . . . . . . .  11\n   7.  PKINIT Client Contribution\
    \ to the Ticket Session Key  . . . .  12\n     7.1.  Combining Two Protocol Keys\
    \ . . . . . . . . . . . . . . .  14\n   8.  Security Considerations . . . . .\
    \ . . . . . . . . . . . . . .  14\n   9.  IANA Considerations . . . . . . . .\
    \ . . . . . . . . . . . . .  15\n   10. References  . . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  16\n     10.1.  Normative References . . . . . . .\
    \ . . . . . . . . . . .  16\n     10.2.  Informative References . . . . . . .\
    \ . . . . . . . . . .  17\n   Acknowledgments . . . . . . . . . . . . . . . .\
    \ . . . . . . . . .  17\n   Authors' Addresses  . . . . . . . . . . . . . . .\
    \ . . . . . . . .  18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In certain situations, the Kerberos [RFC4120] client may\
    \ wish to\n   authenticate a server and/or protect communications without revealing\n\
    \   the client's own identity.  For example, consider an application that\n  \
    \ provides read access to a research database and that permits queries\n   by\
    \ arbitrary requesters.  A client of such a service might wish to\n   authenticate\
    \ the service, to establish trust in the information\n   received from it, but\
    \ might not wish to disclose the client's\n   identity to the service for privacy\
    \ reasons.\n   Extensions to Kerberos are specified in this document by which\
    \ a\n   client can authenticate the Key Distribution Center (KDC) and request\n\
    \   an anonymous ticket.  The client can use the anonymous ticket to\n   authenticate\
    \ the server and protect subsequent client-server\n   communications.\n   By using\
    \ the extensions defined in this specification, the client can\n   request an\
    \ anonymous ticket where the client may reveal the client's\n   identity to the\
    \ client's own KDC, or the client can hide the client's\n   identity completely\
    \ by using anonymous Public Key Cryptography for\n   Initial Authentication in\
    \ Kerberos (PKINIT) as defined in\n   Section 4.1.  Using the returned anonymous\
    \ ticket, the client remains\n   anonymous in subsequent Kerberos exchanges thereafter\
    \ to KDCs on the\n   cross-realm authentication path and to the server with which\
    \ it\n   communicates.\n   In this specification, the client realm in the anonymous\
    \ ticket is\n   the anonymous realm name when anonymous PKINIT is used to obtain\
    \ the\n   ticket.  The client realm is the client's real realm name if the\n \
    \  client is authenticated using the client's long-term keys.  Note that\n   a\
    \ membership in a realm can imply a member of the community\n   represented by\
    \ the realm.\n   The interaction with Generic Security Service Application Program\n\
    \   Interface (GSS-API) is described after the protocol description.\n   This\
    \ specification replaces [RFC6112] to correct technical errors in\n   that specification.\
    \  RFC 6112 is classified as Historic;\n   implementation of RFC 6112 is NOT RECOMMENDED.\
    \  All known\n   implementations comply with this specification and not RFC 6112.\n"
- title: 1.1.  Changes since RFC 6112
  contents:
  - "1.1.  Changes since RFC 6112\n   In Section 7, the pepper2 string \"KeyExchange\"\
    \ used in RFC 6112 is\n   corrected to appear in all capital letters to comply\
    \ with the string\n   actually used by implementations.\n   The requirement for\
    \ the anonymous option to be used when an anonymous\n   ticket is used in a Ticket-Granting\
    \ Service (TGS) request is reduced\n   from a MUST to a SHOULD.  At least one\
    \ implementation does not\n   require this; it is not necessary that both the\
    \ anonymous option and\n   anonymous ticket be used as an indicator of request\
    \ type.\n   The authorization data type name \"AD-INITIAL-VERIFIED-CAS\" used\
    \ in\n   RFC 6112 is corrected to appear as \"AD_INITIAL_VERIFIED_CAS\" in this\n\
    \   document.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Definitions
  contents:
  - "3.  Definitions\n   The anonymous Kerberos realm name is defined as a well-known\
    \ realm\n   name based on [RFC6111], and the value of this well-known realm name\n\
    \   is the literal \"WELLKNOWN:ANONYMOUS\".\n   The anonymous Kerberos principal\
    \ name is defined as a well-known\n   Kerberos principal name based on [RFC6111].\
    \  The value of the name-\n   type field is KRB_NT_WELLKNOWN [RFC6111], and the\
    \ value of the name-\n   string field is a sequence of two KerberosString components:\n\
    \   \"WELLKNOWN\" and \"ANONYMOUS\".\n   The anonymous ticket flag is defined\
    \ as bit 16 (with the first bit\n   being bit 0) in the TicketFlags:\n       \
    \    TicketFlags     ::= KerberosFlags\n             -- anonymous(16)\n      \
    \       -- TicketFlags and KerberosFlags are defined in [RFC4120]\n   This is\
    \ a new ticket flag that is used to indicate that a ticket is\n   an anonymous\
    \ one.\n   An anonymous ticket is a ticket that has all of the following\n   properties:\n\
    \   o  The cname field contains the anonymous Kerberos principal name.\n   o \
    \ The crealm field contains the client's realm name or the anonymous\n      realm\
    \ name.\n   o  The anonymous ticket contains no information that can reveal the\n\
    \      client's identity.  However, the ticket may contain the client\n      realm,\
    \ intermediate realms on the client's authentication path,\n      and authorization\
    \ data that may provide information related to the\n      client's identity. \
    \ For example, an anonymous principal that is\n      identifiable only as being\
    \ in a particular group of users can be\n      implemented using authorization\
    \ data.  Such authorization data, if\n      included in the anonymous ticket,\
    \ would disclose that the client\n      is a member of the group observed.\n \
    \  o  The anonymous ticket flag is set.\n   The anonymous KDC option is defined\
    \ as bit 16 (with the first bit\n   being bit 0) in the KDCOptions:\n        \
    \   KDCOptions      ::= KerberosFlags\n             -- anonymous(16)\n       \
    \      -- KDCOptions and KerberosFlags are defined in [RFC4120]\n   As described\
    \ in Section 4, the anonymous KDC option is set to request\n   an anonymous ticket\
    \ in an Authentication Service (AS) request or a\n   Ticket-Granting Service (TGS)\
    \ request.\n"
- title: 4.  Protocol Description
  contents:
  - "4.  Protocol Description\n   In order to request an anonymous ticket, the client\
    \ sets the\n   anonymous KDC option in an AS request or a TGS request.\n   The\
    \ rest of this section is organized as follows: it first describes\n   protocol\
    \ actions specific to AS exchanges, then it describes those of\n   TGS exchanges.\
    \  These are then followed by the description of\n   protocol actions common to\
    \ both AS and TGS and those in subsequent\n   exchanges.\n"
- title: 4.1.  Anonymity Support in AS Exchange
  contents:
  - "4.1.  Anonymity Support in AS Exchange\n   The client requests an anonymous ticket\
    \ by setting the anonymous KDC\n   option in an AS exchange.\n   The Kerberos\
    \ client can use the client's long-term keys, the client's\n   X.509 certificates\
    \ [RFC4556], or any other pre-authentication data to\n   authenticate to the KDC\
    \ and request an anonymous ticket in an AS\n   exchange where the client's identity\
    \ is known to the KDC.\n   If the client in the AS request is anonymous, the anonymous\
    \ KDC\n   option MUST be set in the request.  Otherwise, the KDC MUST return a\n\
    \   KRB-ERROR message with the code KDC_ERR_BADOPTION.\n   If the client is anonymous\
    \ and the KDC does not have a key to encrypt\n   the reply (this can happen when,\
    \ for example, the KDC does not\n   support PKINIT [RFC4556]), the KDC MUST return\
    \ an error message with\n   the code KDC_ERR_NULL_KEY [RFC4120].\n   When policy\
    \ allows, the KDC issues an anonymous ticket.  If the\n   client name in the request\
    \ is the anonymous principal, the client\n   realm (crealm) in the reply is the\
    \ anonymous realm; otherwise, the\n   client realm is the realm of the AS.  As\
    \ specified by [RFC4120], the\n   client name and the client realm in the EncTicketPart\
    \ of the reply\n   MUST match with the corresponding client name and the client\
    \ realm of\n   the KDC reply; the client MUST use the client name and the client\n\
    \   realm returned in the KDC-REP in subsequent message exchanges when\n   using\
    \ the obtained anonymous ticket.\n   The KDC MUST NOT reveal the client's identity\
    \ in the authorization\n   data of the returned ticket when populating the authorization\
    \ data in\n   a returned anonymous ticket.\n   The AD_INITIAL_VERIFIED_CAS authorization\
    \ data, as defined in\n   [RFC4556], contains the issuer name of the client certificate.\
    \  This\n   authorization is not applicable and MUST NOT be present in the\n \
    \  returned anonymous ticket when anonymous PKINIT is used.  When the\n   client\
    \ is authenticated (i.e., anonymous PKINIT is not used), if it\n   is undesirable\
    \ to disclose such information about the client's\n   identity, the AD_INITIAL_VERIFIED_CAS\
    \ authorization data SHOULD be\n   removed from the returned anonymous ticket.\n\
    \   The client can use the client's key to mutually authenticate with the\n  \
    \ KDC and request an anonymous Ticket-Granting Ticket (TGT) in the AS\n   request.\
    \  In that case, the reply key is selected as normal,\n   according to Section\
    \ 3.1.3 of [RFC4120].\n"
- title: 4.1.1.  Anonymous PKINIT
  contents:
  - "4.1.1.  Anonymous PKINIT\n   This sub-section defines anonymous PKINIT.\n   As\
    \ described earlier in this section, the client can request an\n   anonymous ticket\
    \ by authenticating to the KDC using the client's\n   identity; alternatively,\
    \ without revealing the client's identity to\n   the KDC, the Kerberos client\
    \ can request an anonymous ticket as\n   follows: the client sets the client name\
    \ as the anonymous principal\n   in the AS exchange and provides PA_PK_AS_REQ\
    \ pre-authentication data\n   [RFC4556] where the signerInfos field of the SignedData\
    \ [RFC5652] of\n   the PA_PK_AS_REQ is empty, and the certificates field is absent.\n\
    \   Because the anonymous client does not have an associated asymmetric\n   key\
    \ pair, the client MUST choose the Diffie-Hellman key agreement\n   method by\
    \ filling in the Diffie-Hellman domain parameters in the\n   clientPublicValue\
    \ [RFC4556].  This use of the anonymous client name\n   in conjunction with PKINIT\
    \ is referred to as \"anonymous PKINIT\".  If\n   anonymous PKINIT is used, the\
    \ realm name in the returned anonymous\n   ticket MUST be the anonymous realm.\n\
    \   Upon receiving the anonymous PKINIT request from the client, the KDC\n   processes\
    \ the request, according to Section 3.1.2 of [RFC4120].  The\n   KDC skips the\
    \ checks for the client's signature and the client's\n   public key (such as the\
    \ verification of the binding between the\n   client's public key and the client\
    \ name) but performs otherwise\n   applicable checks and proceeds as normal, according\
    \ to [RFC4556].\n   For example, the AS MUST check if the client's Diffie-Hellman\
    \ domain\n   parameters are acceptable.  The Diffie-Hellman key agreement method\n\
    \   MUST be used and the reply key is derived according to\n   Section 3.2.3.1\
    \ of [RFC4556].  If the clientPublicValue is not\n   present in the request, the\
    \ KDC MUST return a KRB-ERROR with the code\n   KDC_ERR_PUBLIC_KEY_ENCRYPTION_NOT_SUPPORTED\
    \ [RFC4556].  If all goes\n   well, an anonymous ticket is generated, according\
    \ to Section 3.1.3 of\n   [RFC4120], and PA_PK_AS_REP [RFC4556] pre-authentication\
    \ data is\n   included in the KDC reply, according to [RFC4556].  If the KDC does\n\
    \   not have an asymmetric key pair, it MAY reply anonymously or reject\n   the\
    \ authentication attempt.  If the KDC replies anonymously, the\n   signerInfos\
    \ field of the SignedData [RFC5652] of PA_PK_AS_REP in the\n   reply is empty,\
    \ and the certificates field is absent.  The server\n   name in the anonymous\
    \ KDC reply contains the name of the TGS.\n   Upon receipt of the KDC reply that\
    \ contains an anonymous ticket and\n   PA_PK_AS_REP [RFC4556] pre-authentication\
    \ data, the client can then\n   authenticate the KDC based on the KDC's signature\
    \ in the\n   PA_PK_AS_REP.  If the KDC's signature is missing in the KDC reply\n\
    \   (the reply is anonymous), the client MUST reject the returned ticket\n   if\
    \ it cannot authenticate the KDC otherwise.\n   A KDC that supports anonymous\
    \ PKINIT MUST indicate the support of\n   PKINIT, according to Section 3.4 of\
    \ [RFC4556].  In addition, such a\n   KDC MUST indicate support for anonymous\
    \ PKINIT by including a padata\n   element of padata-type PA_PKINIT_KX and empty\
    \ padata-value when\n   including PA-PK-AS-REQ in an error reply.\n   When included\
    \ in a KDC error, PA_PKINIT_KX indicates support for\n   anonymous PKINIT.  As\
    \ discussed in Section 7, when included in an\n   AS-REP, PA_PKINIT_KX proves\
    \ that the KDC and client both contributed\n   to the session key for any use\
    \ of Diffie-Hellman key agreement with\n   PKINIT.\n   Note that in order to obtain\
    \ an anonymous ticket with the anonymous\n   realm name, the client MUST set the\
    \ client name as the anonymous\n   principal in the request when requesting an\
    \ anonymous ticket in an AS\n   exchange.  Anonymous PKINIT is the only way via\
    \ which an anonymous\n   ticket with the anonymous realm as the client realm can\
    \ be generated\n   in this specification.\n"
- title: 4.2.  Anonymity Support in TGS Exchange
  contents:
  - "4.2.  Anonymity Support in TGS Exchange\n   The client requests an anonymous\
    \ ticket by setting the anonymous KDC\n   option in a TGS exchange, and in that\
    \ request, the client can use a\n   normal Ticket-Granting Ticket (TGT) with the\
    \ client's identity, an\n   anonymous TGT, or an anonymous cross-realm TGT.  If\
    \ the client uses a\n   normal TGT, the client's identity is known to the TGS.\n\
    \   Note that the client can completely hide the client's identity in an\n   AS\
    \ exchange using anonymous PKINIT, as described in the previous\n   section.\n\
    \   If the ticket in the PA-TGS-REQ of the TGS request is an anonymous\n   one,\
    \ the anonymous KDC option SHOULD be set in the request.\n   When policy allows,\
    \ the KDC issues an anonymous ticket.  If the\n   ticket in the TGS request is\
    \ an anonymous one, the client name and\n   the client realm are copied from that\
    \ ticket; otherwise, the ticket\n   in the TGS request is a normal ticket, the\
    \ returned anonymous ticket\n   contains the client name as the anonymous principal\
    \ and the client\n   realm as the true realm of the client.  In all cases, according\
    \ to\n   [RFC4120], the client name and the client realm in the EncTicketPart\n\
    \   of the reply MUST match with the corresponding client name and the\n   client\
    \ realm of the anonymous ticket in the reply; the client MUST\n   use the client\
    \ name and the client realm returned in the KDC-REP in\n   subsequent message\
    \ exchanges when using the obtained anonymous\n   ticket.\n   The TGS MUST NOT\
    \ reveal the client's identity in the authorization\n   data of the returned ticket.\
    \  When propagating authorization data in\n   the ticket or in the enc-authorization-data\
    \ field of the request, the\n   TGS MUST ensure that the client confidentiality\
    \ is not violated in\n   the returned anonymous ticket.  The TGS MUST process\
    \ the\n   authorization data recursively, according to Section 5.2.6 of\n   [RFC4120],\
    \ beyond the container levels such that all embedded\n   authorization elements\
    \ are interpreted.  The TGS SHOULD NOT populate\n   identity-based authorization\
    \ data into an anonymous ticket in that\n   such authorization data typically\
    \ reveals the client's identity.  The\n   specification of a new authorization\
    \ data type MUST specify the\n   processing rules of the authorization data when\
    \ an anonymous ticket\n   is returned.  If there is no processing rule defined\
    \ for an\n   authorization data element or the authorization data element is\n\
    \   unknown, the TGS MUST process it when an anonymous ticket is returned\n  \
    \ as follows:\n   o  If the authorization data element may reveal the client's\n\
    \      identity, it MUST be removed unless otherwise specified.\n   o  If the\
    \ authorization data element that could reveal the client's\n      identity is\
    \ intended to restrict the use of the ticket or limit\n      the rights otherwise\
    \ conveyed in the ticket, it cannot be removed\n      in order to hide the client's\
    \ identity.  In this case, the\n      authentication attempt MUST be rejected,\
    \ and the TGS MUST return\n      an error message with the code KDC_ERR_POLICY.\
    \  Note this is\n      applicable to both critical and optional authorization\
    \ data.\n   o  If the authorization data element is unknown, the TGS MAY remove\n\
    \      it, or transfer it into the returned anonymous ticket, or reject\n    \
    \  the authentication attempt, based on local policy for that\n      authorization\
    \ data type unless otherwise specified.  If there is\n      no policy defined\
    \ for a given unknown authorization data type, the\n      authentication MUST\
    \ be rejected.  The error code is KDC_ERR_POLICY\n      when the authentication\
    \ is rejected.\n   The AD_INITIAL_VERIFIED_CAS authorization data, as defined\
    \ in\n   [RFC4556], contains the issuer name of the client certificate.  If it\n\
    \   is undesirable to disclose such information about the client's\n   identity,\
    \ the AD_INITIAL_VERIFIED_CAS authorization data SHOULD be\n   removed from an\
    \ anonymous ticket.\n   The TGS encodes the name of the previous realm into the\
    \ transited\n   field, according to Section 3.3.3.2 of [RFC4120].  Based on local\n\
    \   policy, the TGS MAY omit the previous realm, if the cross-realm TGT\n   is\
    \ an anonymous one, in order to hide the authentication path of the\n   client.\
    \  The unordered set of realms in the transited field, if\n   present, can reveal\
    \ which realm may potentially be the realm of the\n   client or the realm that\
    \ issued the anonymous TGT.  The anonymous\n   Kerberos realm name MUST NOT be\
    \ present in the transited field of a\n   ticket.  The true name of the realm\
    \ that issued the anonymous ticket\n   MAY be present in the transited field of\
    \ a ticket.\n"
- title: 4.3.  Subsequent Exchanges and Protocol Actions Common to AS and TGS for
  contents:
  - "4.3.  Subsequent Exchanges and Protocol Actions Common to AS and TGS for\n  \
    \    Anonymity Support\n   In both AS and TGS exchanges, the realm field in the\
    \ KDC request is\n   always the realm of the target KDC, not the anonymous realm\
    \ when the\n   client requests an anonymous ticket.\n   Absent other information,\
    \ the KDC MUST NOT include any identifier in\n   the returned anonymous ticket\
    \ that could reveal the client's identity\n   to the server.\n   Unless anonymous\
    \ PKINIT is used, if a client requires anonymous\n   communication, then the client\
    \ MUST check to make sure that the\n   ticket in the reply is actually anonymous\
    \ by checking the presence of\n   the anonymous ticket flag in the flags field\
    \ of the EncKDCRepPart.\n   This is because KDCs ignore unknown KDC options. \
    \ A KDC that does not\n   understand the anonymous KDC option will not return\
    \ an error but will\n   instead return a normal ticket.\n   The subsequent client\
    \ and server communications then proceed as\n   described in [RFC4120].\n   Note\
    \ that the anonymous principal name and realm are only applicable\n   to the client\
    \ in Kerberos messages, and the server cannot be\n   anonymous in any Kerberos\
    \ message per this specification.\n   A server accepting an anonymous service\
    \ ticket may assume that\n   subsequent requests using the same ticket originate\
    \ from the same\n   client.  Requests with different tickets are likely to originate\
    \ from\n   different clients.\n   Upon receipt of an anonymous ticket, the transited\
    \ policy check is\n   performed in the same way as that of a normal ticket if\
    \ the client's\n   realm is not the anonymous realm; if the client realm is the\n\
    \   anonymous realm, absent other information, any realm in the\n   authentication\
    \ path is allowed by the cross-realm policy check.\n"
- title: 5.  Interoperability Requirements
  contents:
  - "5.  Interoperability Requirements\n   Conforming implementations MUST support\
    \ the anonymous principal with\n   a non-anonymous realm, and they MAY support\
    \ the anonymous principal\n   with the anonymous realm using anonymous PKINIT.\n"
- title: 6.  GSS-API Implementation Notes
  contents:
  - "6.  GSS-API Implementation Notes\n   GSS-API defines the name_type GSS_C_NT_ANONYMOUS\
    \ [RFC2743] to\n   represent the anonymous identity.  In addition, Section 2.1.1\
    \ of\n   [RFC1964] defines the single string representation of a Kerberos\n  \
    \ principal name with the name_type GSS_KRB5_NT_PRINCIPAL_NAME.  The\n   anonymous\
    \ principal with the anonymous realm corresponds to the\n   GSS-API anonymous\
    \ principal.  A principal with the anonymous\n   principal name and a non-anonymous\
    \ realm is an authenticated\n   principal; hence, such a principal does not correspond\
    \ to the\n   anonymous principal in GSS-API with the GSS_C_NT_ANONYMOUS name type.\n\
    \   The [RFC1964] name syntax for GSS_KRB5_NT_PRINCIPAL_NAME MUST be used\n  \
    \ for importing the anonymous principal name with a non-anonymous realm\n   name\
    \ and for displaying and exporting these names.  In addition, this\n   syntax\
    \ must be used along with the name type GSS_C_NT_ANONYMOUS for\n   displaying\
    \ and exporting the anonymous principal with the anonymous\n   realm.\n   At the\
    \ GSS-API [RFC2743] level, an initiator/client requests the use\n   of an anonymous\
    \ principal with the anonymous realm by asserting the\n   \"anonymous\" flag when\
    \ calling GSS_Init_Sec_Context().  The GSS-API\n   implementation MAY provide\
    \ implementation-specific means for\n   requesting the use of an anonymous principal\
    \ with a non-anonymous\n   realm.\n   GSS-API does not know or define \"anonymous\
    \ credentials\", so the\n   (printable) name of the anonymous principal will rarely\
    \ be used by or\n   relevant for the initiator/client.  The printable name is\
    \ relevant\n   for the acceptor/server when performing an authorization decision\n\
    \   based on the initiator name that is returned from the acceptor side\n   upon\
    \ the successful security context establishment.\n   A GSS-API initiator MUST\
    \ carefully check the resulting context\n   attributes from the initial call to\
    \ GSS_Init_Sec_Context() when\n   requesting anonymity, because (as in the GSS-API\
    \ tradition and for\n   backwards compatibility) anonymity is just another optional\
    \ context\n   attribute.  It could be that the mechanism doesn't recognize the\n\
    \   attribute at all or that anonymity is not available for some other\n   reasons\
    \ -- and in that case, the initiator MUST NOT send the initial\n   security context\
    \ token to the acceptor, because it will likely reveal\n   the initiator's identity\
    \ to the acceptor, something that can rarely\n   be \"undone\".\n   Portable initiators\
    \ are RECOMMENDED to use default credentials\n   whenever possible and request\
    \ anonymity only through the input\n   anon_req_flag [RFC2743] to GSS_Init_Sec_Context().\n"
- title: 7.  PKINIT Client Contribution to the Ticket Session Key
  contents:
  - "7.  PKINIT Client Contribution to the Ticket Session Key\n   The definition in\
    \ this section was motivated by protocol analysis of\n   anonymous PKINIT (defined\
    \ in this document) in building secure\n   channels [RFC6113] and subsequent channel\
    \ bindings [RFC5056].  In\n   order to enable applications of anonymous PKINIT\
    \ to form secure\n   channels, all implementations of anonymous PKINIT need to\
    \ meet the\n   requirements of this section.  There is otherwise no connection\
    \ to\n   the rest of this document.\n   PKINIT is useful for constructing secure\
    \ channels.  To ensure that an\n   active attacker cannot create separate channels\
    \ to the client and KDC\n   with the same known key, it is desirable that neither\
    \ the KDC nor the\n   client unilaterally determine the ticket session key.  The\
    \ specific\n   reason why the ticket session key is derived jointly is discussed\
    \ at\n   the end of this section.  To achieve that end, a KDC conforming to\n\
    \   this definition MUST encrypt a randomly generated key, called the\n   \"KDC\
    \ contribution key\", in the PA_PKINIT_KX padata (defined next in\n   this section).\
    \  The KDC contribution key is then combined with the\n   reply key to form the\
    \ ticket session key of the returned ticket.\n   These two keys are combined using\
    \ the KRB-FX-CF2 operation defined in\n   Section 7.1, where K1 is the KDC contribution\
    \ key, K2 is the reply\n   key, the input pepper1 is US-ASCII [ANSI.X3-4] string\
    \ \"PKINIT\", and\n   the input pepper2 is US-ASCII string \"KEYEXCHANGE\".\n\
    \   PA_PKINIT_KX      147\n     -- padata for PKINIT that contains an encrypted\n\
    \     -- KDC contribution key.\n   PA-PKINIT-KX  ::= EncryptedData -- EncryptionKey\n\
    \     -- Contains an encrypted key randomly\n     -- generated by the KDC (known\
    \ as the KDC contribution key).\n     -- Both EncryptedData and EncryptionKey\
    \ are defined in [RFC4120]\n   The PA_PKINIT_KX padata MUST be included in the\
    \ KDC reply when\n   anonymous PKINIT is used; it SHOULD be included if PKINIT\
    \ is used\n   with the Diffie-Hellman key exchange but the client is not anonymous;\n\
    \   it MUST NOT be included otherwise (e.g., when PKINIT is used with the\n  \
    \ public key encryption as the key exchange).\n   The padata-value field of the\
    \ PA-PKINIT-KX type padata contains the\n   DER [X.680] [X.690] encoding of the\
    \ Abstract Syntax Notation One\n   (ASN.1) type PA-PKINIT-KX.  The PA-PKINIT-KX\
    \ structure is an\n   EncryptedData.  The cleartext data being encrypted is the\
    \ DER-encoded\n   KDC contribution key randomly generated by the KDC.  The encryption\n\
    \   key is the reply key, and the key usage number is\n   KEY_USAGE_PA_PKINIT_KX\
    \ (44).\n   The client then decrypts the KDC contribution key and verifies that\n\
    \   the ticket session key in the returned ticket is the combined key of\n   the\
    \ KDC contribution key and the reply key as described above.  A\n   conforming\
    \ client MUST reject anonymous PKINIT authentication if the\n   PA_PKINIT_KX padata\
    \ is not present in the KDC reply or if the ticket\n   session key of the returned\
    \ ticket is not the combined key of the KDC\n   contribution key and the reply\
    \ key when PA-PKINIT-KX is present in\n   the KDC reply.\n   This protocol provides\
    \ a binding between the party that generated the\n   session key and the Diffie-Hellman\
    \ exchange used to generate the\n   reply key.  Hypothetically, if the KDC did\
    \ not use PA-PKINIT-KX, the\n   client and KDC would perform a Diffie-Hellman\
    \ key exchange to\n   determine a shared key, and that key would be used as a\
    \ reply key.\n   The KDC would then generate a ticket with a session key encrypting\n\
    \   the reply with the Diffie-Helman agreement.  A man-in-the-middle\n   (MITM)\
    \ attacker would just decrypt the session key and ticket using\n   the Diffie-Hellman\
    \ key from the attacker-KDC Diffie-Hellman exchange\n   and re-encrypt it using\
    \ the key from the attacker-client Diffie-\n   Hellman exchange, while keeping\
    \ a copy of the session key and ticket.\n   This protocol binds the ticket to\
    \ the Diffie-Hellman exchange and\n   prevents the MITM attack by requiring the\
    \ session key to be created\n   in a way that can be verified by the client.\n"
- title: 7.1.  Combining Two Protocol Keys
  contents:
  - "7.1.  Combining Two Protocol Keys\n   KRB-FX-CF2() combines two protocol keys\
    \ based on the pseudo-random()\n   function defined in [RFC3961].\n   Given two\
    \ input keys, K1 and K2, where K1 and K2 can be of two\n   different enctypes,\
    \ the output key of KRB-FX-CF2(), K3, is derived as\n   follows:\n    KRB-FX-CF2(protocol\
    \ key, protocol key, octet string,\n              octet string)  ->  (protocol\
    \ key)\n    PRF+(K1, pepper1) -> octet-string-1\n    PRF+(K2, pepper2) -> octet-string-2\n\
    \    KRB-FX-CF2(K1, K2, pepper1, pepper2) ->\n           random-to-key(octet-string-1\
    \ ^ octet-string-2)\n   Where ^ denotes the exclusive-OR operation.  PRF+() is\
    \ defined as\n   follows:\n   PRF+(protocol key, octet string) -> (octet string)\n\
    \   PRF+(key, shared-info) -> pseudo-random( key,  1 || shared-info ) ||\n   \
    \             pseudo-random( key, 2 || shared-info ) ||\n                pseudo-random(\
    \ key, 3 || shared-info ) || ...\n   Here the counter value 1, 2, 3, and so on\
    \ are encoded as a one-octet\n   integer.  The pseudo-random() operation is specified\
    \ by the enctype\n   of the protocol key.  PRF+() uses the counter to generate\
    \ enough bits\n   as needed by the random-to-key() [RFC3961] function for the\n\
    \   encryption type specified for the resulting key; unneeded bits are\n   removed\
    \ from the tail.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Since KDCs ignore unknown options, a client requiring\
    \ anonymous\n   communication needs to make sure that the returned ticket is actually\n\
    \   anonymous.  This is because a KDC that does not understand the\n   anonymous\
    \ option would not return an anonymous ticket.\n   By using the mechanism defined\
    \ in this specification, the client does\n   not reveal the client's identity\
    \ to the server, but the client's\n   identity may be revealed to the KDC of the\
    \ server principal (when the\n   server principal is in a different realm than\
    \ that of the client) and\n   any KDC on the cross-realm authentication path.\
    \  The Kerberos client\n   MUST verify the ticket being used is indeed anonymous\
    \ before\n   communicating with the server, otherwise, the client's identity may\n\
    \   be revealed unintentionally.\n   In cases where specific server principals\
    \ must not have access to the\n   client's identity (for example, an anonymous\
    \ poll service), the KDC\n   can define the server-principal-specific policy that\
    \ ensures any\n   normal service ticket can NEVER be issued to any of these server\n\
    \   principals.\n   If the KDC that issued an anonymous ticket were to maintain\
    \ records\n   of the association of identities to an anonymous ticket, then someone\n\
    \   obtaining such records could breach the anonymity.  Additionally, the\n  \
    \ implementations of most (for now all) KDCs respond to requests at the\n   time\
    \ that they are received.  Traffic analysis on the connection to\n   the KDC will\
    \ allow an attacker to match client identities to\n   anonymous tickets issued.\
    \  Because there are plaintext parts of the\n   tickets that are exposed on the\
    \ wire, such matching by a third-party\n   observer is relatively straightforward.\
    \  A service that is\n   authenticated by the anonymous principals may be able\
    \ to infer the\n   identity of the client by examining and linking quasi-static\
    \ protocol\n   information such as the IP address from which a request is received\n\
    \   or by linking multiple uses of the same anonymous ticket.\n   Two mechanisms,\
    \ the FAST facility with the hide-client-names option\n   in [RFC6113] and the\
    \ Kerberos5 starttls option [RFC6251], protect the\n   client identity so that\
    \ an attacker would never be able to observe\n   the client identity sent to the\
    \ KDC.  Transport- or network-layer\n   security between the client and the server\
    \ will help prevent tracking\n   of a particular ticket to link a ticket to a\
    \ user.  In addition,\n   clients can limit how often a ticket is reused to minimize\
    \ ticket\n   linking.\n   The client's real identity is not revealed when the\
    \ client is\n   authenticated as the anonymous principal.  Application servers\
    \ MAY\n   reject the authentication in order to, for example, prevent\n   information\
    \ disclosure or as part of Denial-of-Service (DoS)\n   prevention.  Application\
    \ servers MUST avoid accepting anonymous\n   credentials in situations where they\
    \ must record the client's\n   identity, for example, when there must be an audit\
    \ trail.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This document defines an 'anonymous' Kerberos well-known\
    \ name and an\n   'anonymous' Kerberos well-known realm based on [RFC6111].  IANA\
    \ has\n   updated these two entries in the \"Well-Known Kerberos Principal\n \
    \  Names\" and \"Well-Known Kerberos Realm Names\" registries,\n   respectively,\
    \ to refer to this document.\n   In addition, IANA has updated the reference for\
    \ PA_PKINIT_KX (147) in\n   the \"Pre-authentication and Typed Data\" registry\
    \ to refer to this\n   document.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [ANSI.X3-4]\n              American National\
    \ Standards Institute, \"Coded Character\n              Set - 7-bit American Standard\
    \ Code for Information\n              Interchange\", ANSI X3-4, 1986.\n   [RFC1964]\
    \  Linn, J., \"The Kerberos Version 5 GSS-API Mechanism\",\n              RFC\
    \ 1964, DOI 10.17487/RFC1964, June 1996,\n              <http://www.rfc-editor.org/info/rfc1964>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2743]\
    \  Linn, J., \"Generic Security Service Application Program\n              Interface\
    \ Version 2, Update 1\", RFC 2743,\n              DOI 10.17487/RFC2743, January\
    \ 2000,\n              <http://www.rfc-editor.org/info/rfc2743>.\n   [RFC3961]\
    \  Raeburn, K., \"Encryption and Checksum Specifications for\n              Kerberos\
    \ 5\", RFC 3961, DOI 10.17487/RFC3961, February\n              2005, <http://www.rfc-editor.org/info/rfc3961>.\n\
    \   [RFC4120]  Neuman, C., Yu, T., Hartman, S., and K. Raeburn, \"The\n      \
    \        Kerberos Network Authentication Service (V5)\", RFC 4120,\n         \
    \     DOI 10.17487/RFC4120, July 2005,\n              <http://www.rfc-editor.org/info/rfc4120>.\n\
    \   [RFC4556]  Zhu, L. and B. Tung, \"Public Key Cryptography for Initial\n  \
    \            Authentication in Kerberos (PKINIT)\", RFC 4556,\n              DOI\
    \ 10.17487/RFC4556, June 2006,\n              <http://www.rfc-editor.org/info/rfc4556>.\n\
    \   [RFC5652]  Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n\
    \              RFC 5652, DOI 10.17487/RFC5652, September 2009,\n             \
    \ <http://www.rfc-editor.org/info/rfc5652>.\n   [RFC6111]  Zhu, L., \"Additional\
    \ Kerberos Naming Constraints\",\n              RFC 6111, DOI 10.17487/RFC6111,\
    \ April 2011,\n              <http://www.rfc-editor.org/info/rfc6111>.\n   [RFC6112]\
    \  Zhu, L., Leach, P., and S. Hartman, \"Anonymity Support for\n             \
    \ Kerberos\", RFC 6112, DOI 10.17487/RFC6112, April 2011,\n              <http://www.rfc-editor.org/info/rfc6112>.\n\
    \   [X.680]    International Telecommunications Union, \"Information\n       \
    \       technology - Abstract Syntax Notation One (ASN.1):\n              Specification\
    \ of Basic Notation\", ITU-T Recommendation\n              X.680, ISO/IEC International\
    \ Standard 8824-1:1998, 1997.\n   [X.690]    International Telecommunications\
    \ Union, \"Information\n              technology - ASN.1 encoding rules: Specification\
    \ of Basic\n              Encoding Rules (BER), Canonical Encoding Rules (CER)\
    \ and\n              Distinguished Encoding Rules (DER)\", ITU-T Recommendation\n\
    \              X.690, ISO/IEC International Standard 8825-1:1998, 1997.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RFC5056]  Williams, N., \"On the Use of Channel\
    \ Bindings to Secure\n              Channels\", RFC 5056, DOI 10.17487/RFC5056,\
    \ November 2007,\n              <http://www.rfc-editor.org/info/rfc5056>.\n  \
    \ [RFC6113]  Hartman, S. and L. Zhu, \"A Generalized Framework for\n         \
    \     Kerberos Pre-Authentication\", RFC 6113,\n              DOI 10.17487/RFC6113,\
    \ April 2011,\n              <http://www.rfc-editor.org/info/rfc6113>.\n   [RFC6251]\
    \  Josefsson, S., \"Using Kerberos Version 5 over the\n              Transport\
    \ Layer Security (TLS) Protocol\", RFC 6251,\n              DOI 10.17487/RFC6251,\
    \ May 2011,\n              <http://www.rfc-editor.org/info/rfc6251>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   JK Jaganathan helped edit early draft revisions of RFC 6112.\n\
    \   Clifford Neuman contributed the core notions of this document.\n   Ken Raeburn\
    \ reviewed the document and provided suggestions for\n   improvements.\n   Martin\
    \ Rex wrote the text for the GSS-API considerations.\n   Nicolas Williams reviewed\
    \ the GSS-API considerations section and\n   suggested ideas for improvements.\n\
    \   Sam Hartman and Nicolas Williams were great champions of this work.\n   Miguel\
    \ Garcia and Phillip Hallam-Baker reviewed the document and\n   provided helpful\
    \ suggestions.\n   In addition, the following individuals made significant\n \
    \  contributions: Jeffrey Altman, Tom Yu, Chaskiel M. Grundman, Love\n   Hornquist\
    \ Astrand, Jeffrey Hutzelman, and Olga Kornievskaia.\n   Greg Hudson and Robert\
    \ Sparks provided helpful text in this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Larry Zhu\n   Microsoft Corporation\n   One Microsoft\
    \ Way\n   Redmond, WA  98052\n   United States of America\n   Email: larry.zhu@microsoft.com\n\
    \   Paul Leach\n   Microsoft Corporation\n   One Microsoft Way\n   Redmond, WA\
    \  98052\n   United States of America\n   Email: pauljleach@msn.com\n   Sam Hartman\n\
    \   Hadron Industries\n   Email: hartmans-ietf@mit.edu\n   Shawn Emery (editor)\n\
    \   Oracle\n   Email: shawn.emery@gmail.com\n"
