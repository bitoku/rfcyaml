- title: __initial_text__
  contents:
  - '  Group Communication for the Constrained Application Protocol (CoAP)

    '
- title: Abstract
  contents:
  - "Abstract\n   The Constrained Application Protocol (CoAP) is a specialized web\n\
    \   transfer protocol for constrained devices and constrained networks.\n   It\
    \ is anticipated that constrained devices will often naturally\n   operate in\
    \ groups (e.g., in a building automation scenario, all\n   lights in a given room\
    \ may need to be switched on/off as a group).\n   This specification defines how\
    \ CoAP should be used in a group\n   communication context.  An approach for using\
    \ CoAP on top of IP\n   multicast is detailed based on existing CoAP functionality\
    \ as well as\n   new features introduced in this specification.  Also, various\
    \ use\n   cases and corresponding protocol flows are provided to illustrate\n\
    \   important concepts.  Finally, guidance is provided for deployment in\n   various\
    \ network topologies.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7390.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.  This document is subject\
    \ to\n   BCP 78 and the IETF Trust's Legal Provisions Relating to IETF\n   Documents\
    \ (http://trustee.ietf.org/license-info) in effect on the\n   date of publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Background  . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n     1.2.  Scope . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n     1.3.  Conventions and Terminology . . . . . . . . . . . . .\
    \ . .   4\n   2.  Protocol Considerations . . . . . . . . . . . . . . . . . .\
    \ .   5\n     2.1.  IP Multicast Background . . . . . . . . . . . . . . . . .\
    \   5\n     2.2.  Group Definition and Naming . . . . . . . . . . . . . . .  \
    \ 6\n     2.3.  Port and URI Configuration  . . . . . . . . . . . . . . .   7\n\
    \     2.4.  RESTful Methods . . . . . . . . . . . . . . . . . . . . .   9\n  \
    \   2.5.  Request and Response Model  . . . . . . . . . . . . . . .   9\n    \
    \ 2.6.  Membership Configuration  . . . . . . . . . . . . . . . .  10\n      \
    \ 2.6.1.  Background  . . . . . . . . . . . . . . . . . . . . .  10\n       2.6.2.\
    \  Membership Configuration RESTful Interface  . . . . .  11\n     2.7.  Request\
    \ Acceptance and Response Suppression Rules . . . .  17\n     2.8.  Congestion\
    \ Control  . . . . . . . . . . . . . . . . . . .  19\n     2.9.  Proxy Operation\
    \ . . . . . . . . . . . . . . . . . . . . .  20\n     2.10. Exceptions  . . .\
    \ . . . . . . . . . . . . . . . . . . . .  21\n   3.  Use Cases and Corresponding\
    \ Protocol Flows  . . . . . . . . .  22\n     3.1.  Introduction  . . . . . .\
    \ . . . . . . . . . . . . . . . .  22\n     3.2.  Network Configuration . . .\
    \ . . . . . . . . . . . . . . .  22\n     3.3.  Discovery of Resource Directory\
    \ . . . . . . . . . . . . .  25\n     3.4.  Lighting Control  . . . . . . . .\
    \ . . . . . . . . . . . .  26\n     3.5.  Lighting Control in MLD-Enabled Network\
    \ . . . . . . . . .  30\n     3.6.  Commissioning the Network Based on Resource\
    \ Directory . .  31\n   4.  Deployment Guidelines . . . . . . . . . . . . . .\
    \ . . . . . .  32\n     4.1.  Target Network Topologies . . . . . . . . . . .\
    \ . . . . .  32\n     4.2.  Networks Using the MLD Protocol . . . . . . . . .\
    \ . . . .  33\n     4.3.  Networks Using RPL Multicast without MLD  . . . . .\
    \ . . .  33\n     4.4.  Networks Using MPL Forwarding without MLD . . . . . .\
    \ . .  34\n     4.5.  6LoWPAN Specific Guidelines for the 6LBR  . . . . . . .\
    \ .  35\n   5.  Security Considerations . . . . . . . . . . . . . . . . . . .\
    \  35\n     5.1.  Security Configuration  . . . . . . . . . . . . . . . . .  35\n\
    \     5.2.  Threats . . . . . . . . . . . . . . . . . . . . . . . . .  36\n  \
    \   5.3.  Threat Mitigation . . . . . . . . . . . . . . . . . . . .  36\n    \
    \   5.3.1.  WiFi Scenario . . . . . . . . . . . . . . . . . . . .  37\n      \
    \ 5.3.2.  6LoWPAN Scenario  . . . . . . . . . . . . . . . . . .  37\n       5.3.3.\
    \  Future Evolution  . . . . . . . . . . . . . . . . . .  37\n     5.4.  Monitoring\
    \ Considerations . . . . . . . . . . . . . . . .  38\n       5.4.1.  General Monitoring\
    \  . . . . . . . . . . . . . . . . .  38\n       5.4.2.  Pervasive Monitoring\
    \  . . . . . . . . . . . . . . . .  38\n   6.  IANA Considerations . . . . . .\
    \ . . . . . . . . . . . . . . .  39\n     6.1.  New 'core.gp' Resource Type .\
    \ . . . . . . . . . . . . . .  39\n     6.2.  New 'coap-group+json' Internet Media\
    \ Type . . . . . . . .  39\n   7.  References  . . . . . . . . . . . . . . . .\
    \ . . . . . . . . .  41\n     7.1.  Normative References  . . . . . . . . . .\
    \ . . . . . . . .  41\n     7.2.  Informative References  . . . . . . . . . .\
    \ . . . . . . .  43\n   Appendix A.  Multicast Listener Discovery (MLD) . . .\
    \ . . . . . .  45\n   Acknowledgements  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  45\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  46\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Background
  contents:
  - "1.1.  Background\n   CoAP is a web transfer protocol based on Representational\
    \ State\n   Transfer (REST) for resource constrained devices operating in an IP\n\
    \   network [RFC7252].  CoAP has many similarities to HTTP [RFC7230] but\n   also\
    \ some key differences.  Constrained devices can be large in\n   numbers but are\
    \ often related to each other in function or by\n   location.  For example, all\
    \ the light switches in a building may\n   belong to one group, and all the thermostats\
    \ may belong to another\n   group.  Groups may be preconfigured before deployment\
    \ or dynamically\n   formed during operation.  If information needs to be sent\
    \ to or\n   received from a group of devices, group communication mechanisms can\n\
    \   improve efficiency and latency of communication and reduce bandwidth\n   requirements\
    \ for a given application.  HTTP does not support any\n   equivalent functionality\
    \ to CoAP group communication.\n"
- title: 1.2.  Scope
  contents:
  - "1.2.  Scope\n   Group communication involves a one-to-many relationship between\
    \ CoAP\n   endpoints.  Specifically, a single CoAP client can simultaneously get\n\
    \   (or set) resources from multiple CoAP servers using CoAP over IP\n   multicast.\
    \  An example would be a CoAP light switch turning on/off\n   multiple lights\
    \ in a room with a single CoAP group communication PUT\n   request and handling\
    \ the potential multitude of (unicast) responses.\n   The base protocol aspects\
    \ of sending CoAP requests on top of IP\n   multicast and processing the (unicast\
    \ IP) responses are given in\n   Section 8 of [RFC7252].  To provide a more complete\
    \ CoAP group\n   communication functionality, this specification introduces new\
    \ CoAP\n   processing functionality (e.g., new rules for reuse of Token values,\n\
    \   request suppression, and proxy operation) and a new management\n   interface\
    \ for RESTful group membership configuration.\n   CoAP group communication will\
    \ run in the Any Source Multicast (ASM)\n   mode [RFC5110] of IP multicast operation.\
    \  This means that there is\n   no restriction on the source node that sends (originates)\
    \ the CoAP\n   messages to the IP multicast group.  For example, the source node\
    \ may\n   or may not be part of the IP multicast group.  Also, there is no\n \
    \  restriction on the number of source nodes.\n   While Section 9.1 of [RFC7252]\
    \ supports various modes of security\n   based on Datagram Transport Layer Security\
    \ (DTLS) for CoAP over\n   unicast IP, it does not specify any security modes\
    \ for CoAP over IP\n   multicast.  That is, it is assumed per [RFC7252] that CoAP\
    \ over IP\n   multicast is not encrypted, nor authenticated, nor access controlled.\n\
    \   This document assumes the same security model (see Section 5.1).\n   However,\
    \ there are several promising security approaches being\n   developed that should\
    \ be considered in the future for protecting CoAP\n   group communications (see\
    \ Section 5.3.3).\n"
- title: 1.3.  Conventions and Terminology
  contents:
  - "1.3.  Conventions and Terminology\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in\n   [RFC2119] when they appear in ALL CAPS.  When\
    \ these words are not in\n   ALL CAPS (such as \"should\" or \"Should\"), they\
    \ have their usual\n   English meanings and are not to be interpreted as [RFC2119]\
    \ key\n   words.\n   Note that this document refers back to other RFCs, and especially\n\
    \   [RFC7252], to help explain overall CoAP group communication features.\n  \
    \ However, use of [RFC2119] key words is reserved for new CoAP\n   functionality\
    \ introduced by this specification.\n   This document assumes readers are familiar\
    \ with the terms and\n   concepts that are used in [RFC7252].  In addition, this\
    \ document\n   defines the following terminology:\n   Group Communication:\n \
    \     A source node sends a single application-layer (e.g., CoAP)\n      message\
    \ that is delivered to multiple destination nodes, where all\n      destinations\
    \ are identified to belong to a specific group.  The\n      source node itself\
    \ may be part of the group.  The underlying\n      mechanisms for CoAP group communication\
    \ are UDP/IP multicast for\n      the requests and unicast UDP/IP for the responses.\
    \  The network\n      involved may be a constrained network such as a low-power,\
    \ lossy\n      network.\n   Reliable Group Communication:\n      A special case\
    \ of group communication where for each destination\n      node, it is guaranteed\
    \ that the node either 1) eventually receives\n      the message sent by the source\
    \ node or 2) does not receive the\n      message and the source node is notified\
    \ of the non-reception\n      event.  An example of a reliable group communication\
    \ protocol is\n      [RFC5740].\n   Multicast:\n      Sending a message to multiple\
    \ destination nodes with one network\n      invocation.  There are various options\
    \ to implement multicast,\n      including layer 2 (Media Access Control) and\
    \ layer 3 (IP)\n      mechanisms.\n   IP Multicast:\n      A specific multicast\
    \ approach based on the use of IP multicast\n      addresses as defined in \"\
    IANA Guidelines for IPv4 Multicast\n      Address Assignments\" [RFC5771] and\
    \ \"IP Version 6 Addressing\n      Architecture\" [RFC4291].  A complete IP multicast\
    \ solution may\n      include support for managing group memberships and IP multicast\n\
    \      routing/forwarding (see Section 2.1).\n   Low-Power and Lossy Network (LLN):\n\
    \      A type of constrained IP network where devices are interconnected\n   \
    \   by low-power and lossy links.  The links may be composed of one or\n     \
    \ more technologies such as IEEE 802.15.4, Bluetooth Low Energy\n      (BLE),\
    \ Digital Enhanced Cordless Telecommunication (DECT), and\n      IEEE P1901.2\
    \ power-line communication.\n"
- title: 2.  Protocol Considerations
  contents:
  - '2.  Protocol Considerations

    '
- title: 2.1.  IP Multicast Background
  contents:
  - "2.1.  IP Multicast Background\n   IP multicast protocols have been evolving for\
    \ decades, resulting in\n   standards such as Protocol Independent Multicast -\
    \ Sparse Mode (PIM-\n   SM) [RFC4601].  IP multicast is very popular in specific\
    \ deployments\n   such as in enterprise networks (e.g., for video conferencing),\
    \ smart\n   home networks (e.g., Universal Plug and Play (UPnP)), and carrier\n\
    \   IPTV deployments.  The packet economy and minimal host complexity of\n   IP\
    \ multicast make it attractive for group communication in\n   constrained environments.\n\
    \   To achieve IP multicast beyond link-local (LL) scope, an IP multicast\n  \
    \ routing or forwarding protocol needs to be active on IP routers.  An\n   example\
    \ of a routing protocol specifically for LLNs is the IPv6\n   Routing Protocol\
    \ for Low-Power and Lossy Networks (RPL) (Section 12\n   of [RFC6550]), and an\
    \ example of a forwarding protocol for LLNs is\n   the Multicast Protocol for\
    \ Low-Power and Lossy Networks (MPL)\n   [MCAST-MPL].  RPL and MPL do not depend\
    \ on each other; each can be\n   used in isolation, and both can be used in combination\
    \ in a network.\n   Finally, PIM-SM [RFC4601] is often used for multicast routing\
    \ in\n   traditional IP networks (i.e., networks that are not constrained).\n\
    \   IP multicast can also be run in an LL scope.  This means that there\n   is\
    \ no routing involved, and an IP multicast message is only received\n   over the\
    \ link on which it was sent.\n   For a complete IP multicast solution, in addition\
    \ to a routing/\n   forwarding protocol, a \"listener\" protocol may be needed\
    \ for the\n   devices to subscribe to groups (see Section 4.2).  Also, a multicast\n\
    \   forwarding proxy node [RFC4605] may be required.\n   IP multicast is generally\
    \ classified as an unreliable service in that\n   packets are not guaranteed to\
    \ be delivered to each and every member\n   of the group.  In other words, it\
    \ cannot be directly used as a basis\n   for \"reliable group communication\"\
    \ as defined in Section 1.3.\n   However, the level of reliability can be increased\
    \ by employing a\n   multicast protocol that performs periodic retransmissions\
    \ as is done,\n   for example, in MPL.\n"
- title: 2.2.  Group Definition and Naming
  contents:
  - "2.2.  Group Definition and Naming\n   A CoAP group is defined as a set of CoAP\
    \ endpoints, where each\n   endpoint is configured to receive CoAP group communication\
    \ requests\n   that are sent to the group's associated IP multicast address. \
    \ The\n   individual response by each endpoint receiver to a CoAP group\n   communication\
    \ request is always sent back as unicast.  An endpoint\n   may be a member of\
    \ multiple groups.  Group membership of an endpoint\n   may dynamically change\
    \ over time.\n   All CoAP server nodes SHOULD join the \"All CoAP Nodes\" multicast\n\
    \   group (Section 12.8 of [RFC7252]) by default to enable CoAP\n   discovery.\
    \  For IPv4, the address is 224.0.1.187, and for IPv6, a\n   server node joins\
    \ at least both the link-local scoped address\n   ff02::fd and the site-local\
    \ scoped address ff05::fd.  IPv6 addresses\n   of other scopes MAY be enabled.\n\
    \   A CoAP group URI has the scheme 'coap' and includes in the authority\n   part\
    \ either a group IP multicast address or a hostname (e.g., Group\n   Fully Qualified\
    \ Domain Name (FQDN)) that can be resolved to the group\n   IP multicast address.\
    \  A group URI also contains an optional CoAP\n   port number in the authority\
    \ part.  Group URIs follow the regular\n   CoAP URI syntax (Section 6 of [RFC7252]).\n\
    \   Note: A group URI is needed to initiate CoAP group communications.\n   For\
    \ CoAP client implementations, it is recommended to use the URI\n   decomposition\
    \ method of Section 6.4 of [RFC7252] in such a way that,\n   from a group URI,\
    \ a CoAP group communication request is generated.\n   For sending nodes, it is\
    \ recommended to use the IP multicast address\n   literal in a group URI.  (This\
    \ is because DNS infrastructure may not\n   be deployed in many constrained network\
    \ deployments.)  However, in\n   case a group hostname is used, it can be uniquely\
    \ mapped to an IP\n   multicast address via DNS resolution (if supported).  Some\
    \ examples\n   of hierarchical group FQDN naming (and scoping) for a building\n\
    \   control application are shown below:\n     URI authority                 \
    \          Targeted group of nodes\n     ---------------------------------------\
    \ --------------------------\n     all.bldg6.example.com                   \"\
    all nodes in building 6\"\n     all.west.bldg6.example.com              \"all\
    \ nodes in west wing,\n                                              building\
    \ 6\"\n     all.floor1.west.bldg6.example.com       \"all nodes in floor 1,\n\
    \                                              west wing, building 6\"\n     all.bu036.floor1.west.bldg6.example.com\
    \ \"all nodes in office bu036,\n                                             \
    \ floor 1, west wing,\n                                              building\
    \ 6\"\n   Similarly, if supported, reverse mapping (from IP multicast address\n\
    \   to Group FQDN) is possible using the reverse DNS resolution technique\n  \
    \ ([RFC1033]).  Reverse mapping is important, for example, in\n   troubleshooting\
    \ to translate IP multicast addresses back to human-\n   readable hostnames to\
    \ show in a diagnostics user interface.\n"
- title: 2.3.  Port and URI Configuration
  contents:
  - "2.3.  Port and URI Configuration\n   A CoAP server that is a member of a group\
    \ listens for CoAP messages\n   on the group's IP multicast address, usually on\
    \ the CoAP default UDP\n   port, 5683.  If the group uses a specified non-default\
    \ UDP port, be\n   careful to ensure that all group members are configured to\
    \ use that\n   same port.\n   Different ports for the same IP multicast address\
    \ are preferably not\n   used to specify different CoAP groups.  If disjoint groups\
    \ share the\n   same IP multicast address, then all the devices interested in\
    \ one\n   group will accept IP traffic also for the other disjoint groups, only\n\
    \   to ultimately discard the traffic higher in their IP stack (based on\n   UDP\
    \ port discrimination).\n   CoAP group communication will not work if there is\
    \ diversity in the\n   authority port (e.g., different dynamic port addresses\
    \ across the\n   group) or if other parts of the group URI such as the path, or\
    \ the\n   query, differ on different endpoints.  Therefore, some measures must\n\
    \   be present to ensure uniformity in port number and resource names/\n   locations\
    \ within a group.  All CoAP group communication requests MUST\n   be sent using\
    \ a port number according to one of the below options:\n   1.  A preconfigured\
    \ port number.\n   2.  If the client is configured to use service discovery including\n\
    \       URI and port discovery, it uses the port number obtained via a\n     \
    \  service discovery lookup operation for the targeted CoAP group.\n   3.  Use\
    \ the default CoAP UDP port (5683).\n   For a CoAP server node that supports resource\
    \ discovery, the default\n   port 5683 must be supported (Section 7.1 of [RFC7252])\
    \ for the \"All\n   CoAP Nodes\" group.  Regardless of the method of selecting\
    \ the port\n   number, the same port MUST be used across all CoAP servers in a\
    \ group\n   and across all CoAP clients performing the group requests.\n   All\
    \ CoAP group communication requests SHOULD operate on group URI\n   paths in one\
    \ of the following ways:\n   1.  Preconfigured group URI paths, if available.\
    \  Implementers are\n       free to define the paths as they see fit.  However,\
    \ note that\n       [RFC7320] prescribes that a specification must not constrain\
    \ or\n       define the structure or semantics for any path component.  So for\n\
    \       this reason, a predefined URI path is not specified in this\n       document\
    \ and also must not be provided in other specifications.\n   2.  If the client\
    \ is configured to use default Constrained RESTful\n       Environments (CoRE)\
    \ resource discovery, it uses URI paths\n       retrieved from a \"/.well-known/core\"\
    \ lookup on a group member.\n       The URI paths the client will use MUST be\
    \ known to be available\n       also in all other endpoints in the group.  The\
    \ URI path\n       configuration mechanism on servers MUST ensure that these URIs\n\
    \       (identified as being supported by the group) are configured on\n     \
    \  all group endpoints.\n   3.  If the client is configured to use another form\
    \ of service\n       discovery, it uses group URI paths from an equivalent service\n\
    \       discovery lookup that returns the resources supported by all\n       group\
    \ members.\n   4.  If the client has received a group URI through a previous RESTful\n\
    \       interaction with a trusted server, it can use this URI in a CoAP\n   \
    \    group communication request.  For example, a commissioning tool\n       may\
    \ instruct a sensor device in this way to which target group\n       (group URI)\
    \ it should report sensor events.\n   However, when the URI path is selected,\
    \ the same path MUST be used\n   across all CoAP servers in a group and all CoAP\
    \ clients performing\n   the group requests.\n"
- title: 2.4.  RESTful Methods
  contents:
  - "2.4.  RESTful Methods\n   Group communication most often uses the idempotent\
    \ CoAP methods GET\n   and PUT.  The idempotent method DELETE can also be used.\
    \  The non-\n   idempotent CoAP method POST may only be used for group communication\n\
    \   if the resource being POSTed to has been designed to cope with the\n   unreliable\
    \ and lossy nature of IP multicast.  For example, a client\n   may resend a multicast\
    \ POST request for additional reliability.  Some\n   servers will receive the\
    \ request two times while others may receive\n   it only once.  For idempotent\
    \ methods, all these servers will be in\n   the same state while for POST, this\
    \ is not guaranteed; so, the\n   resource POST operation must be specifically\
    \ designed to take message\n   loss into account.\n"
- title: 2.5.  Request and Response Model
  contents:
  - "2.5.  Request and Response Model\n   All CoAP requests that are sent via IP multicast\
    \ must be Non-\n   confirmable (Section 8.1 of [RFC7252]).  The Message ID in\
    \ an IP\n   multicast CoAP message is used for optional message deduplication\
    \ as\n   detailed in Section 4.5 of [RFC7252].\n   A server optionally sends back\
    \ a unicast response to the CoAP group\n   communication request (e.g., response\
    \ \"2.05 Content\" to a group GET\n   request).  The unicast responses received\
    \ by the CoAP client may be a\n   mixture of success (e.g., 2.05 Content) and\
    \ failure (e.g., 4.04 Not\n   Found) codes depending on the individual server\
    \ processing results.\n   Detailed processing rules for IP multicast request acceptance\
    \ and\n   unicast response suppression are given in Section 2.7.\n   A CoAP request\
    \ sent over IP multicast and any unicast response it\n   causes must take into\
    \ account the congestion control rules defined in\n   Section 2.8.\n   The CoAP\
    \ client can distinguish the origin of multiple server\n   responses by the source\
    \ IP address of the UDP message containing the\n   CoAP response or any other\
    \ available unique identifier (e.g.,\n   contained in the CoAP payload).  In case\
    \ a CoAP client sent multiple\n   group requests, the responses are as usual matched\
    \ to a request using\n   the CoAP Token.\n   For multicast CoAP requests, there\
    \ are additional constraints on the\n   reuse of Token values, compared to the\
    \ unicast case.  In the unicast\n   case, receiving a response effectively frees\
    \ up its Token value for\n   reuse since no more responses will follow.  However,\
    \ for multicast\n   CoAP, the number of responses is not bounded a priori.  Therefore,\n\
    \   the reception of a response cannot be used as a trigger to \"free up\"\n \
    \  a Token value for reuse.  Reusing a Token value too early could lead\n   to\
    \ incorrect response/request matching in the client and would be a\n   protocol\
    \ error.  Therefore, the time between reuse of Token values\n   used in multicast\
    \ requests MUST be greater than:\n   NON_LIFETIME + MAX_LATENCY + MAX_SERVER_RESPONSE_DELAY\n\
    \   where NON_LIFETIME and MAX_LATENCY are defined in Section 4.8 of\n   [RFC7252].\
    \  MAX_SERVER_RESPONSE_DELAY is defined here as the expected\n   maximum response\
    \ delay over all servers that the client can send a\n   multicast request to.\
    \  This delay includes the maximum Leisure time\n   period as defined in Section\
    \ 8.2 of [RFC7252].  CoAP does not define\n   a time limit for the server response\
    \ delay.  Using the default CoAP\n   parameters, the Token reuse time MUST be\
    \ greater than 250 seconds\n   plus MAX_SERVER_RESPONSE_DELAY.  A preferred solution\
    \ to meet this\n   requirement is to generate a new unique Token for every multicast\n\
    \   request, such that a Token value is never reused.  If a client has to\n  \
    \ reuse Token values for some reason, and also\n   MAX_SERVER_RESPONSE_DELAY is\
    \ unknown, then using\n   MAX_SERVER_RESPONSE_DELAY = 250 seconds is a reasonable\
    \ guideline.\n   The time between Token reuses is in that case set to a value\
    \ greater\n   than 500 seconds.\n"
- title: 2.6.  Membership Configuration
  contents:
  - '2.6.  Membership Configuration

    '
- title: 2.6.1.  Background
  contents:
  - '2.6.1.  Background

    '
- title: 2.6.1.1.  Member Discovery
  contents:
  - "2.6.1.1.  Member Discovery\n   CoAP groups, and the membership of these groups,\
    \ can be discovered\n   via the lookup interfaces in the Resource Directory (RD)\
    \ defined in\n   [CoRE-RD].  This discovery interface is not required to invoke\
    \ CoAP\n   group communications.  However, it is a potential complementary\n \
    \  interface useful for overall management of CoAP groups.  Other\n   methods\
    \ to discover groups (e.g., proprietary management systems) can\n   also be used.\
    \  An example of doing some of the RD-based lookups is\n   given in Section 3.6.\n"
- title: 2.6.1.2.  Configuring Members
  contents:
  - "2.6.1.2.  Configuring Members\n   The group membership of a CoAP endpoint may\
    \ be configured in one of\n   the following ways.  First, the group membership\
    \ may be preconfigured\n   before node deployment.  Second, a node may be programmed\
    \ to discover\n   (query) its group membership using a specific service discovery\n\
    \   means.  Third, it may be configured by another node (e.g., a\n   commissioning\
    \ device).\n   In the first case, the preconfigured group information may be either\n\
    \   an IP multicast address or a hostname (FQDN) that is resolved later\n   (during\
    \ operation) to an IP multicast address by the endpoint using\n   DNS (if supported).\n\
    \   For the second case, a CoAP endpoint may look up its group membership\n  \
    \ using techniques such as DNS-based Service Discovery (DNS-SD) and RD\n   [CoRE-RD].\n\
    \   In the third case, typical in scenarios such as building control, a\n   dynamic\
    \ commissioning tool determines to which group(s) a sensor or\n   actuator node\
    \ belongs, and writes this information to the node, which\n   can subsequently\
    \ join the correct IP multicast group(s) on its\n   network interface.  The information\
    \ written per group may again be an\n   IP multicast address or a hostname.\n"
- title: 2.6.2.  Membership Configuration RESTful Interface
  contents:
  - "2.6.2.  Membership Configuration RESTful Interface\n   To achieve better interoperability\
    \ between endpoints from different\n   manufacturers, an OPTIONAL CoAP membership\
    \ configuration RESTful\n   interface for configuring endpoints with relevant\
    \ group information\n   is described here.  This interface provides a solution\
    \ for the third\n   case mentioned above.  To access this interface, a client\
    \ will use\n   unicast CoAP methods (GET/PUT/POST/DELETE).  This interface is\
    \ a\n   method of configuring group information in individual endpoints.\n   Also,\
    \ a form of authorization (preferably making use of unicast DTLS-\n   secured\
    \ CoAP per Section 9.1 of [RFC7252]) should be used such that\n   only authorized\
    \ controllers are allowed by an endpoint to configure\n   its group membership.\n\
    \   It is important to note that other approaches may be used to\n   configure\
    \ CoAP endpoints with relevant group information.  These\n   alternative approaches\
    \ may support a subset or superset of the\n   membership configuration RESTful\
    \ interface described in this\n   document.  For example, a simple interface to\
    \ just read the endpoint\n   group information may be implemented via a classical\
    \ Management\n   Information Base (MIB) approach (e.g., following the approach\
    \ of\n   [RFC3433]).\n"
- title: 2.6.2.1.  CoAP-Group Resource Type and Media Type
  contents:
  - "2.6.2.1.  CoAP-Group Resource Type and Media Type\n   CoAP endpoints implementing\
    \ the membership configuration RESTful\n   interface MUST support the CoAP group\
    \ configuration Internet Media\n   Type \"application/coap-group+json\" (Section\
    \ 6.2).\n   A resource offering this representation can be annotated for direct\n\
    \   discovery [RFC6690] using the Resource Type (rt=) Link Target\n   Attribute\
    \ \"core.gp\", where \"gp\" is shorthand for \"group\"\n   (Section 6.1).  An\
    \ authorized client uses this media type to query/\n   manage group membership\
    \ of a CoAP endpoint as defined in the\n   following subsections.\n   The Group\
    \ Configuration resource and its sub-resources have a content\n   format based\
    \ on JavaScript Object Notation (JSON) (as indicated by\n   the \"application/coap-group+json\"\
    \ media type).  The resource includes\n   zero or more group membership JSON objects\
    \ [RFC7159] in a format as\n   defined in Section 2.6.2.4.  A group membership\
    \ JSON object contains\n   one or more key/value pairs as defined below, and represents\
    \ a single\n   IP multicast group membership for the CoAP endpoint.  Each key/value\n\
    \   pair is encoded as a member of the JSON object, where the key is the\n   member\
    \ name and the value is the member's value.\n   Examples of four different group\
    \ membership objects are as follows:\n      { \"n\": \"All-Devices.floor1.west.bldg6.example.com\"\
    ,\n        \"a\": \"[ff15::4200:f7fe:ed37:abcd]:4567\" }\n      { \"n\": \"sensors.floor2.east.bldg6.example.com\"\
    \ }\n      { \"n\": \"coap-test\",\n        \"a\": \"224.0.1.187:56789\" }\n \
    \     { \"a\": \"[ff15::c0a7:15:c001]\" }\n   The OPTIONAL \"n\" key/value pair\
    \ stands for \"name\" and identifies the\n   group with a hostname (and optionally\
    \ the port number), for example,\n   an FQDN.  The OPTIONAL \"a\" key/value pair\
    \ specifies the IP multicast\n   address (and optionally the port number) of the\
    \ group.  It contains\n   an IPv4 address (in dotted-decimal notation) or an IPv6\
    \ address.  The\n   following ABNF rule can be used for parsing the address, referring\
    \ to\n   the definitions in Section 3.2.2 of [RFC3986] that are also used in\n\
    \   the base CoAP (Section 6 of [RFC7252].\n      group-address = IPv4address\
    \ [ \":\" port ]\n                      / \"[\" IPv6address \"]\" [\":\" port\
    \ ]\n   In any group membership object, if the IP address is known when the\n\
    \   object is created, it is included in the \"a\" key/value pair.  If the\n \
    \  \"a\" value cannot be provided, the \"n\" value MUST be included,\n   containing\
    \ a valid hostname with an optional port number that can be\n   translated to\
    \ an IP multicast address via DNS.\n      group-name = host [ \":\" port ]\n \
    \  If the port number is not provided, then the endpoint will attempt to\n   look\
    \ up the port number from DNS if it supports a method to do this.\n   The possible\
    \ DNS methods include DNS SRV [RFC2782] or DNS-SD\n   [RFC6763].  If port lookup\
    \ is not supported or not provided by DNS,\n   the default CoAP port (5683) is\
    \ assumed.\n   After any change on a Group Configuration resource, the endpoint\
    \ MUST\n   effect registration/deregistration from the corresponding IP\n   multicast\
    \ group(s) by making use of APIs such as IPV6_RECVPKTINFO\n   [RFC3542].\n"
- title: 2.6.2.2.  Creating a New Multicast Group Membership (POST)
  contents:
  - "2.6.2.2.  Creating a New Multicast Group Membership (POST)\n   Method:      \
    \ POST\n   URI Template: /{+gp}\n   Location-URI Template: /{+gp}/{index}\n  \
    \ URI Template Variables:\n     gp    - Group Configuration Function Set path\
    \ (mandatory).\n     index - Group index.  Index MUST be a string of maximum two\
    \ (2)\n       alphanumeric ASCII characters (case insensitive).  It MUST be\n\
    \       locally unique to the endpoint server.  It indexes the particular\n  \
    \     endpoint's list of group memberships.\n   Example:\n     Req: POST /coap-group\n\
    \          Content-Format: application/coap-group+json\n       { \"n\": \"All-Devices.floor1.west.bldg6.example.com\"\
    ,\n         \"a\": \"[ff15::4200:f7fe:ed37:abcd]:4567\" }\n     Res: 2.01 Created\n\
    \          Location-Path: /coap-group/12\n   For the 'gp' variable, it is recommended\
    \ to use the path \"coap-group\"\n   by default.  The \"a\" key/value pair is\
    \ always used if it is given.\n   The \"n\" pair is only used when there is no\
    \ \"a\" pair.  If only the \"n\"\n   pair is given, the CoAP endpoint performs\
    \ DNS resolution to obtain\n   the IP multicast address from the hostname in the\
    \ \"n\" pair.  If DNS\n   resolution is not successful, then the endpoint does\
    \ not attempt\n   joining or listening to any multicast group for this case since\
    \ the\n   IP multicast address is unknown.\n   After any change on a Group Configuration\
    \ resource, the endpoint MUST\n   effect registration/deregistration from the\
    \ corresponding IP\n   multicast group(s) by making use of APIs such as IPV6_RECVPKTINFO\n\
    \   [RFC3542].  When a POST payload contains an \"a\", an IP multicast\n   address\
    \ to which the endpoint is already subscribed, no change to\n   that subscription\
    \ is needed.\n"
- title: 2.6.2.3.  Deleting a Single Group Membership (DELETE)
  contents:
  - "2.6.2.3.  Deleting a Single Group Membership (DELETE)\n   Method:       DELETE\n\
    \   URI Template: {+location}\n   URI Template Variables:\n     location - The\
    \ Location-Path returned by the CoAP server\n       as a result of a successful\
    \ group creation.\n   Example:\n     Req: DELETE /coap-group/12\n     Res: 2.02\
    \ Deleted\n"
- title: 2.6.2.4.  Reading All Group Memberships at Once (GET)
  contents:
  - "2.6.2.4.  Reading All Group Memberships at Once (GET)\n   A (unicast) GET on\
    \ the CoAP-group resource returns a JSON object\n   containing multiple keys and\
    \ values.  The keys (member names) are\n   group indices, and the values (member\
    \ values) are the corresponding\n   group membership objects.  Each group membership\
    \ object describes one\n   IP multicast group membership.  If no group memberships\
    \ are\n   configured, then an empty JSON object is returned.\n   Method: GET\n\
    \   URI Template: /{+gp}\n   URI Template Variables:\n   gp - see Section 2.6.2.2\n\
    \   Example:\n     Req: GET /coap-group\n     Res: 2.05 Content\n          Content-Format:\
    \ application/coap-group+json\n       { \"8\" :{ \"a\": \"[ff15::4200:f7fe:ed37:14ca]\"\
    \ },\n         \"11\":{ \"n\": \"sensors.floor1.west.bldg6.example.com\",\n  \
    \              \"a\": \"[ff15::4200:f7fe:ed37:25cb]\" },\n         \"12\":{ \"\
    n\": \"All-Devices.floor1.west.bldg6.example.com\",\n                \"a\": \"\
    [ff15::4200:f7fe:ed37:abcd]:4567\" }\n       }\n   Note: the returned IPv6 address\
    \ string will represent the same IPv6\n   address that was originally submitted\
    \ in group membership creation,\n   though it might be a different string because\
    \ of different choices in\n   IPv6 string representation formatting that may be\
    \ allowed for the\n   same address (see [RFC5952]).\n"
- title: 2.6.2.5.  Reading a Single Group Membership (GET)
  contents:
  - "2.6.2.5.  Reading a Single Group Membership (GET)\n   Similar to Section 2.6.2.4,\
    \ but only a single group membership is\n   read.  If the requested group index\
    \ does not exist, then a 4.04 Not\n   Found response is returned.\n   Method:\
    \ GET\n   URI Template 1: {+location}\n   URI Template 2: /{+gp}/{index}\n   URI\
    \ Template Variables:\n   location - see Section 2.6.2.3\n   gp, index - see Section\
    \ 2.6.2.2\n   Example:\n     Req: GET /coap-group/12\n     Res: 2.05 Content\n\
    \          Content-Format: application/coap-group+json\n       {\"n\": \"All-Devices.floor1.west.bldg6.example.com\"\
    ,\n        \"a\": \"[ff15::4200:f7fe:ed37:abcd]:4567\"}\n"
- title: 2.6.2.6.  Creating/Updating All Group Memberships at Once (PUT)
  contents:
  - "2.6.2.6.  Creating/Updating All Group Memberships at Once (PUT)\n   A (unicast)\
    \ PUT with a group configuration media type as payload will\n   replace all current\
    \ group memberships in the endpoint with the new\n   ones defined in the PUT request.\
    \  This operation MUST only be used to\n   delete or update group membership objects\
    \ for which the CoAP client,\n   invoking this operation, is responsible.  The\
    \ responsibility is based\n   on application-level knowledge.  For example, a\
    \ commissioning tool\n   will be responsible for any group membership objects\
    \ that it created.\n   Method: PUT\n   URI Template: /{+gp}\n   URI Template Variables:\n\
    \   gp - see Section 2.6.2.2\n   Example: (replacing all existing group memberships\
    \ with two new\n             group memberships)\n     Req: PUT /coap-group\n \
    \         Content-Format: application/coap-group+json\n       { \"1\":{ \"a\"\
    : \"[ff15::4200:f7fe:ed37:1234]\" },\n         \"2\":{ \"a\": \"[ff15::4200:f7fe:ed37:5678]\"\
    \ }\n       }\n     Res: 2.04 Changed\n   Example: (clearing all group memberships\
    \ at once)\n     Req: PUT /coap-group\n          Content-Format: application/coap-group+json\n\
    \       {}\n     Res: 2.04 Changed\n   After a successful PUT on the Group Configuration\
    \ resource, the\n   endpoint MUST effect registration to any new IP multicast\
    \ group(s)\n   and deregistration from any previous IP multicast group(s), i.e.,\
    \ not\n   any more present in the new memberships.  An API such as\n   IPV6_RECVPKTINFO\
    \ [RFC3542] should be used for this purpose.  Also, it\n   MUST take into account\
    \ the group indices present in the new resource\n   during the generation of any\
    \ new unique group indices in the future.\n"
- title: 2.6.2.7.  Updating a Single Group Membership (PUT)
  contents:
  - "2.6.2.7.  Updating a Single Group Membership (PUT)\n   A (unicast) PUT with a\
    \ group membership JSON object will replace an\n   existing group membership in\
    \ the endpoint with the new one defined in\n   the PUT request.  This can be used\
    \ to update the group membership.\n   Method: PUT\n   URI Template 1: {+location}\n\
    \   URI Template 2: /{+gp}/{index}\n   URI Template Variables:\n   location -\
    \ see Section 2.6.2.3\n   gp, index - see Section 2.6.2.2\n   Example: (group\
    \ name and IP multicast port change)\n     Req: PUT /coap-group/12\n         \
    \ Content-Format: application/coap-group+json\n       {\"n\": \"All-My-Devices.floor1.west.bldg6.example.com\"\
    ,\n        \"a\": \"[ff15::4200:f7fe:ed37:abcd]\"}\n     Res: 2.04 Changed\n \
    \  After a successful PUT on the Group Configuration resource, the\n   endpoint\
    \ MUST effect registration to any new IP multicast group(s)\n   and deregistration\
    \ from any previous IP multicast group(s), i.e., not\n   any more present in the\
    \ new membership.  An API such as\n   IPV6_RECVPKTINFO [RFC3542] should be used\
    \ for this purpose.\n"
- title: 2.7.  Request Acceptance and Response Suppression Rules
  contents:
  - "2.7.  Request Acceptance and Response Suppression Rules\n   CoRE Link Format\
    \ [RFC6690] and Section 8 of CoAP [RFC7252] define\n   behaviors for the following:\n\
    \   1.  IP multicast request acceptance -- in which cases a CoAP request\n   \
    \    is accepted and executed, and when it is not.\n   2.  IP multicast response\
    \ suppression -- in which cases the CoAP\n       response to an already executed\
    \ request is returned to the\n       requesting endpoint, and when it is not.\n\
    \   A CoAP response differs from a CoAP ACK; ACKs are never sent by\n   servers\
    \ in response to an IP multicast CoAP request.  This section\n   first summarizes\
    \ these behaviors and then presents additional\n   guidelines for response suppression.\
    \  Also, a number of IP multicast\n   example applications are given to illustrate\
    \ the overall approach.\n   To apply any rules for request and/or response suppression,\
    \ a CoAP\n   server must be aware that an incoming request arrived via IP\n  \
    \ multicast by making use of APIs such as IPV6_RECVPKTINFO [RFC3542].\n   For\
    \ IP multicast request acceptance, the behaviors are as follows:\n   o  A server\
    \ should not accept an IP multicast request that cannot be\n      \"authenticated\"\
    \ in some way (i.e, cryptographically or by some\n      multicast boundary limiting\
    \ the potential sources); see\n      Section 11.3 of [RFC7252].  See Section 5.3\
    \ for examples of\n      multicast boundary limiting methods.\n   o  A server\
    \ should not accept an IP multicast discovery request with\n      a query string\
    \ (as defined in CoRE Link Format [RFC6690]) if\n      filtering [RFC6690] is\
    \ not supported by the server.\n   o  A server should not accept an IP multicast\
    \ request that acts on a\n      specific resource for which IP multicast support\
    \ is not required.\n      (Note that for the resource \"/.well-known/core\", IP\
    \ multicast\n      support is required if \"multicast resource discovery\" is\
    \ supported\n      as specified in Section 1.2.1 of [RFC6690].)  Implementers\
    \ are\n      advised to disable IP multicast support by default on any other\n\
    \      resource, until explicitly enabled by an application or by\n      configuration.\n\
    \   o  Otherwise, accept the IP multicast request.\n   For IP multicast response\
    \ suppression, the behaviors are as follows:\n   o  A server should not respond\
    \ to an IP multicast discovery request\n      if the filter specified by the request's\
    \ query string does not\n      match.\n   o  A server may choose not to respond\
    \ to an IP multicast request if\n      there's nothing useful to respond back\
    \ (e.g., error or empty\n      response).\n   The above response suppression behaviors\
    \ are complemented by the\n   following guidelines.  CoAP servers should implement\
    \ configurable\n   response suppression, enabling at least the following options\
    \ per\n   resource that supports IP multicast requests:\n   o  Suppression of\
    \ all 2.xx success responses;\n   o  Suppression of all 4.xx client errors;\n\
    \   o  Suppression of all 5.xx server errors; and\n   o  Suppression of all 2.05\
    \ responses with empty payload.\n   A number of CoAP group communication example\
    \ applications are given\n   below to illustrate how to make use of response suppression:\n\
    \   o  CoAP resource discovery: Suppress 2.05 responses with empty\n      payload\
    \ and all 4.xx and 5.xx errors.\n   o  Lighting control: Suppress all 2.xx responses\
    \ after a lighting\n      change command.\n   o  Update configuration data in\
    \ a group of devices using group\n      communication PUT: No suppression at all.\
    \  The client uses\n      collected responses to identify which group members\
    \ did not\n      receive the new configuration and then attempts using CoAP CON\n\
    \      unicast to update those specific group members.  Note that in this\n  \
    \    case, the client implements a \"reliable group communication\" (as\n    \
    \  defined in Section 1.3) function using additional, non-\n      standardized\
    \ functions above the CoAP layer.\n   o  IP multicast firmware update by sending\
    \ blocks of data: Suppress\n      all 2.xx and 5.xx responses.  After having sent\
    \ all IP multicast\n      blocks, the client checks each endpoint by unicast to\
    \ identify\n      which data blocks are still missing in each endpoint.\n   o\
    \  Conditional reporting for a group (e.g., sensors) based on a group\n      URI\
    \ query: Suppress all 2.05 responses with empty payload (i.e.,\n      if a query\
    \ produces no matching results).\n"
- title: 2.8.  Congestion Control
  contents:
  - "2.8.  Congestion Control\n   CoAP group communication requests may result in\
    \ a multitude of\n   responses from different nodes, potentially causing congestion.\n\
    \   Therefore, both the sending of IP multicast requests and the sending\n   of\
    \ the unicast CoAP responses to these multicast requests should be\n   conservatively\
    \ controlled.\n   CoAP [RFC7252] reduces IP multicast-specific congestion risks\
    \ through\n   the following measures:\n   o  A server may choose not to respond\
    \ to an IP multicast request if\n      there's nothing useful to respond to (e.g.,\
    \ error or empty\n      response); see Section 8.2 of [RFC7252].  See Section\
    \ 2.7 for more\n      detailed guidelines on response suppression.\n   o  A server\
    \ should limit the support for IP multicast requests to\n      specific resources\
    \ where multicast operation is required\n      (Section 11.3 of [RFC7252]).\n\
    \   o  An IP multicast request must be Non-confirmable (Section 8.1 of\n     \
    \ [RFC7252]).\n   o  A response to an IP multicast request should be Non-confirmable\n\
    \      (Section 5.2.3 of [RFC7252]).\n   o  A server does not respond immediately\
    \ to an IP multicast request\n      and should first wait for a time that is randomly\
    \ picked within a\n      predetermined time interval called the Leisure (Section\
    \ 8.2 of\n      [RFC7252]).\n   Additional guidelines to reduce congestion risks\
    \ defined in this\n   document are as follows:\n   o  A server in an LLN should\
    \ only support group communication GET for\n      resources that are small.  For\
    \ example, the payload of the\n      response is limited to approximately 5% of\
    \ the IP Maximum Transmit\n      Unit (MTU) size, so it fits into a single link-layer\
    \ frame in case\n      IPv6 over Low-Power Wireless Personal Area Networks (6LoWPAN)\
    \ (see\n      Section 4 of [RFC4944]) is used.\n   o  A server can minimize the\
    \ payload length in response to a group\n      communication GET on \"/.well-known/core\"\
    \ by using hierarchy in\n      arranging link descriptions for the response. \
    \ An example of this\n      is given in Section 5 of [RFC6690].\n   o  A server\
    \ can also minimize the payload length of a response to a\n      group communication\
    \ GET (e.g., on \"/.well-known/core\") using CoAP\n      blockwise transfers [BLOCKWISE-CoAP],\
    \ returning only a first block\n      of the CoRE Link Format description.  For\
    \ this reason, a CoAP\n      client sending an IP multicast CoAP request to \"\
    /.well-known/core\"\n      should support core-block.\n   o  A client should use\
    \ CoAP group communication with the smallest\n      possible IP multicast scope\
    \ that fulfills the application needs.\n      As an example, site-local scope\
    \ is always preferred over global\n      scope IP multicast if this fulfills the\
    \ application needs.\n      Similarly, realm-local scope is always preferred over\
    \ site-local\n      scope if this fulfills the application needs.\n   More guidelines\
    \ specific to the use of CoAP in 6LoWPAN networks\n   [RFC4919] are given in Section\
    \ 4.5 of this document.\n"
- title: 2.9.  Proxy Operation
  contents:
  - "2.9.  Proxy Operation\n   CoAP (Section 5.7.2 of [RFC7252]) allows a client to\
    \ request a\n   forward-proxy to process its CoAP request.  For this purpose,\
    \ the\n   client specifies either the request group URI as a string in the\n \
    \  Proxy-URI option or the Proxy-Scheme option with the group URI\n   constructed\
    \ from the usual Uri-* options.  This approach works well\n   for unicast requests.\
    \  However, there are certain issues and\n   limitations of processing the (unicast)\
    \ responses to a CoAP group\n   communication request made in this manner through\
    \ a proxy.\n   A proxy may buffer all the individual (unicast) responses to a\
    \ CoAP\n   group communication request and then send back only a single\n   (aggregated)\
    \ response to the client.  However, there are some issues\n   with this aggregation\
    \ approach:\n   o  Aggregation of (unicast) responses to a CoAP group communication\n\
    \      request in a proxy is difficult.  This is because the proxy does\n    \
    \  not know how many members there are in the group or how many group\n      members\
    \ will actually respond.  Also, the proxy does not know how\n      long to wait\
    \ before deciding to send back the aggregated response\n      to the client.\n\
    \   o  There is no default format defined in CoAP for aggregation of\n      multiple\
    \ responses into a single response.\n   Alternatively, if a proxy follows directly\
    \ the specification for a\n   CoAP Proxy (Section 5.7.2 of [RFC7252]), the proxy\
    \ would simply\n   forward all the individual (unicast) responses to a CoAP group\n\
    \   communication request to the client (i.e., no aggregation).  There\n   are\
    \ also issues with this approach:\n   o  The client may be confused as it may\
    \ not have known that the\n      Proxy-URI contained a group URI target.  That\
    \ is, the client may\n      be expecting only one (unicast) response but instead\
    \ receives\n      multiple (unicast) responses, potentially leading to fault\n\
    \      conditions in the application.\n   o  Each individual CoAP response will\
    \ appear to originate (IP source\n      address) from the CoAP Proxy, and not\
    \ from the server that\n      produced the response.  This makes it impossible\
    \ for the client to\n      identify the server that produced each response.\n\
    \   Due to the above issues, a CoAP Proxy SHOULD NOT support processing\n   an\
    \ IP multicast CoAP request but rather return a 501 (Not\n   Implemented) response\
    \ in such case.  The exception case here (i.e.,\n   to process it) is allowed\
    \ if all the following conditions are met:\n   o  The CoAP Proxy MUST be explicitly\
    \ configured (whitelist) to allow\n      proxied IP multicast requests by a specific\
    \ client(s).\n   o  The proxy SHOULD return individual (unicast) CoAP responses\
    \ to the\n      client (i.e., not aggregated).  The exception case here occurs\n\
    \      when a (future) standardized aggregation format is being used.\n   o  It\
    \ MUST be known to the person/entity doing the configuration of\n      the proxy,\
    \ or otherwise verified in some way, that the client\n      configured in the\
    \ whitelist supports receiving multiple responses\n      to a proxied unicast\
    \ CoAP request.\n"
- title: 2.10.  Exceptions
  contents:
  - "2.10.  Exceptions\n   CoAP group communication using IP multicast offers improved\
    \ network\n   efficiency and latency among other benefits.  However, group\n \
    \  communication may not always be implementable in a given network.\n   The primary\
    \ reason for this will be that IP multicast is not (fully)\n   supported in the\
    \ network.\n   For example, if only RPL [RFC6550] is used in a network with its\n\
    \   optional multicast support disabled, there will be no IP multicast\n   routing\
    \ at all.  The only multicast that works in this case is link-\n   local IPv6\
    \ multicast.  This implies that any CoAP group communication\n   request will\
    \ be delivered to nodes on the local link only, regardless\n   of the scope value\
    \ used in the IPv6 destination address.\n   CoAP Observe [OBSERVE-CoAP] is a feature\
    \ for a client to \"observe\"\n   resources (i.e., to retrieve a representation\
    \ of a resource and keep\n   this representation updated by the server over a\
    \ period of time).\n   CoAP Observe does not support a group communication mode.\
    \  CoAP\n   Observe only supports a unicast mode of operation.\n"
- title: 3.  Use Cases and Corresponding Protocol Flows
  contents:
  - '3.  Use Cases and Corresponding Protocol Flows

    '
- title: 3.1.  Introduction
  contents:
  - "3.1.  Introduction\n   The use of CoAP group communication is shown in the context\
    \ of the\n   following two use cases and corresponding protocol flows:\n   o \
    \ Discovery of RD [CoRE-RD]: discovering the local CoAP RD, which\n      contains\
    \ links to resources stored on other CoAP servers\n      [RFC6690].\n   o  Lighting\
    \ Control: synchronous operation of a group of\n      IPv6-connected lights (e.g.,\
    \ 6LoWPAN [RFC4944] lights).\n"
- title: 3.2.  Network Configuration
  contents:
  - "3.2.  Network Configuration\n   To illustrate the use cases, we define two IPv6\
    \ network\n   configurations.  Both are based on the topology as shown in Figure\
    \ 1.\n   The two configurations using this topology are as follows:\n   1.  Subnets\
    \ are 6LoWPAN networks; the routers Rtr-1 and Rtr-2 are\n       6LoWPAN Border\
    \ Routers (6LBRs) [RFC6775].\n   2.  Subnets are Ethernet links; the routers Rtr-1\
    \ and Rtr-2 are\n       multicast-capable Ethernet routers.\n   Both configurations\
    \ are further specified by the following:\n   o  A large room (Room-A) with three\
    \ lights (Light-1, Light-2, Light-\n      3) controlled by a light switch (Light\
    \ Switch).  The devices are\n      organized into two subnets.  In reality, there\
    \ could be more\n      lights (up to several hundreds) but, for clarity, only\
    \ three are\n      shown.\n   o  Light-1 and the light switch are connected to\
    \ a router (Rtr-1).\n   o  Light-2 and Light-3 are connected to another router\
    \ (Rtr-2).\n   o  The routers are connected to an IPv6 network backbone (Network\n\
    \      Backbone) that is also multicast enabled.  In the general case,\n     \
    \ this means the network backbone and Rtr-1/Rtr-2 support a PIM-\n      based\
    \ multicast routing protocol and Multicast Listener Discovery\n      (MLD) for\
    \ forming groups.\n   o  A CoAP RD is connected to the network backbone.\n   o\
    \  The DNS server (DNS Server) is optional.  If the server is there\n      (connected\
    \ to the network backbone), then certain DNS-based\n      features are available\
    \ (e.g., DNS resolution of the hostname to\n      the IP multicast address). \
    \ If the DNS server is not there, then\n      different provisioning of the network\
    \ is required (e.g., IP\n      multicast addresses are hard-coded into devices,\
    \ or manually\n      configured, or obtained via a service discovery method).\n\
    \   o  A controller (CoAP client) is connected to the backbone, which is\n   \
    \   able to control various building functions including lighting.\n     ################################################\n\
    \     #         **********************        Room-A #\n     #       **  Subnet-1\
    \            **             #           Network\n     #     *                \
    \           **           #          Backbone\n     #    *     +----------+   \
    \          *          #                 |\n     #   *      |  Light   |-------+\
    \      *         #                 |\n     #  *       |  Switch  |       |   \
    \    *        #                 |\n     #  *       +----------+  +---------+ \
    \ *        #                 |\n     #  *                     |  Rtr-1  |-----------------------------+\n\
    \     #  *                     +---------+  *        #                 |\n   \
    \  #  *       +----------+        |      *        #                 |\n     #\
    \   *      |  Light-1 |--------+     *         #                 |\n     #   \
    \ *     +----------+             *          #                 |\n     #     **\
    \                          **           #                 |\n     #       **************************\
    \             #                 |\n     #                                    \
    \          #                 |\n     #         **********************        \
    \       # +------------+  |\n     #       **  Subnet-2            **         \
    \    # | DNS Server |  |\n     #     *                           **          \
    \ # | (Optional) |--+\n     #    *     +----------+             *          # +------------+\
    \  |\n     #   *      |  Light-2 |-------+      *         #                 |\n\
    \     #  *       |          |       |       *        #                 |\n   \
    \  #  *       +----------+  +---------+  *        #                 |\n     #\
    \  *                     |  Rtr-2  |-----------------------------+\n     #  *\
    \                     +---------+  *        #                 |\n     #  *   \
    \    +----------+        |      *        #                 |\n     #   *     \
    \ |  Light-3 |--------+     *         #                 |\n     #    *     +----------+\
    \             *          # +------------+  |\n     #     **                  \
    \        **           # | Controller |--+\n     #       **************************\
    \             # | Client     |  |\n     ################################################\
    \ +------------+  |\n                                       +------------+   \
    \              |\n                                       |   CoAP     |      \
    \           |\n                                       |  Resource  |-----------------+\n\
    \                                       |  Directory |\n                     \
    \                  +------------+\n            Figure 1: Network Topology of a\
    \ Large Room (Room-A)\n"
- title: 3.3.  Discovery of Resource Directory
  contents:
  - "3.3.  Discovery of Resource Directory\n   The protocol flow for discovery of\
    \ the CoAP RD for the given network\n   (of Figure 1) is shown in Figure 2:\n\
    \   o  Light-2 is installed and powered on for the first time.\n   o  Light-2\
    \ will then search for the local CoAP RD by sending out a\n      group communication\
    \ GET request (with the \"/.well-known/\n      core?rt=core.rd\" request URI)\
    \ to the site-local \"All CoAP Nodes\"\n      multicast address (ff05:::fd).\n\
    \   o  This multicast message will then go to each node in Subnet-2.\n      Rtr-2\
    \ will then forward it into the network backbone where it will\n      be received\
    \ by the CoAP RD.  All other nodes in Subnet-2 will\n      ignore the group communication\
    \ GET request because it is qualified\n      by the query string \"?rt=core.rd\"\
    \ (which indicates it should only\n      be processed by the endpoint if it contains\
    \ a resource of type\n      \"core.rd\").\n   o  The CoAP RD will then send back\
    \ a unicast response containing the\n      requested content, which is a CoRE\
    \ Link Format representation of a\n      resource of type \"core.rd\".\n   o \
    \ Note that the flow is shown only for Light-2 for clarity.  Similar\n      flows\
    \ will happen for Light-1, Light-3, and light switch when they\n      are first\
    \ installed.\n   The CoAP RD may also be discovered by other means such as by\
    \ assuming\n   a default location (e.g., on a 6LBR), using DHCP, anycast address,\n\
    \   etc.  However, these approaches do not invoke CoAP group\n   communication\
    \ so are not further discussed here.  (See [CoRE-RD] for\n   more details.)\n\
    \   For other discovery use cases such as discovering local CoAP servers,\n  \
    \ services, or resources, CoAP group communication can be used in a\n   similar\
    \ fashion as in the above use case.  For example, link-local,\n   realm-local,\
    \ admin-local, or site-local scoped discovery can be done\n   this way.\n    \
    \                                Light                           CoAP\n   Light-1\
    \   Light-2    Light-3     Switch     Rtr-1     Rtr-2       RD\n    |        \
    \  |          |          |          |          |          |\n    |          |\
    \          |          |          |          |          |\n    **********************************\
    \          |          |          |\n    *   Light-2 is installed         *   \
    \       |          |          |\n    *   and powers on for first time *      \
    \    |          |          |\n    **********************************         \
    \ |          |          |\n    |          |          |          |          | \
    \         |          |\n    |          |          |          |          |    \
    \      |          |\n    |          | COAP NON Mcast(GET                     \
    \   |          |\n    |          |           /.well-known/core?rt=core.rd)   |\
    \          |\n    |          |--------->-------------------------------->|   \
    \       |\n    |          |          |          |          |          |--------->|\n\
    \    |          |          |          |          |          |          |\n   \
    \ |          |          |          |          |          |          |\n    | \
    \         | COAP NON (2.05 Content                    |          |\n    |    \
    \      |         </rd>;rt=\"core.rd\";ins=\"Primary\") |<---------|\n    |   \
    \       |<------------------------------------------|          |\n    |      \
    \    |          |          |          |          |          |\n       Figure 2:\
    \ Resource Directory Discovery via Multicast Request\n"
- title: 3.4.  Lighting Control
  contents:
  - "3.4.  Lighting Control\n   The protocol flow for a building automation lighting\
    \ control scenario\n   for the network (Figure 1) is shown in Figure 3.  The network\
    \ is\n   assumed to be in a 6LoWPAN configuration.  Also, it is assumed that\n\
    \   the CoAP servers in each light are configured to suppress CoAP\n   responses\
    \ for any IP multicast CoAP requests related to lighting\n   control.  (See Section\
    \ 2.7 for more details on response suppression\n   by a server.)\n   In addition,\
    \ Figure 4 shows a protocol flow example for the case that\n   servers do respond\
    \ to a lighting control IP multicast request with\n   (unicast) CoAP NON responses.\
    \  There are two success responses and\n   one 5.00 error response.  In this particular\
    \ case, the light switch\n   does not check that all lights in the group received\
    \ the IP multicast\n   request by examining the responses.  This is because the\
    \ light switch\n   is not configured with an exhaustive list of the IP addresses\
    \ of all\n   lights belonging to the group.  However, based on received error\n\
    \   responses, it could take additional action such as logging a fault or\n  \
    \ alerting the user via its LCD display.  In case a CoAP message is\n   delivered\
    \ multiple times to a light, the subsequent CoAP messages can\n   be filtered\
    \ out as duplicates, based on the CoAP Message ID.\n   Reliability of IP multicast\
    \ is not guaranteed.  Therefore, one or\n   more lights in the group may not have\
    \ received the CoAP control\n   request due to packet loss.  In this use case,\
    \ there is no detection\n   nor correction of such situations: the application\
    \ layer expects that\n   the IP multicast forwarding/routing will be of sufficient\
    \ quality to\n   provide on average a very high probability of packet delivery\
    \ to all\n   CoAP endpoints in an IP multicast group.  An example protocol to\n\
    \   accomplish this using randomized retransmission is the MPL forwarding\n  \
    \ protocol for LLNs [MCAST-MPL].\n   We assume the following steps have already\
    \ occurred before the\n   illustrated flows:\n   1)  Startup phase: 6LoWPANs are\
    \ formed.  IPv6 addresses are assigned\n       to all devices.  The CoAP network\
    \ is formed.\n   2)  Network configuration (application independent): 6LBRs are\n\
    \       configured with IP multicast addresses, or address blocks, to\n      \
    \ filter out or to pass through to/from the 6LoWPAN.\n   3a) Commissioning phase\
    \ (application related): The IP multicast\n       address of the group (Room-A-Lights)\
    \ has been configured in all\n       the lights and in the light switch.\n   3b)\
    \ As an alternative to the previous step, when a DNS server is\n       available,\
    \ the light switch and/or the lights have been\n       configured with a group\
    \ hostname that each node resolves to the\n       above IP multicast address of\
    \ the group.\n   Note for the Commissioning phase: the switch's 6LoWPAN/CoAP software\n\
    \   stack supports sending unicast, multicast, or proxied unicast CoAP\n   requests,\
    \ including processing of the multiple responses that may be\n   generated by\
    \ an IP multicast CoAP request.\n                                    Light   \
    \                    Network\n   Light-1   Light-2    Light-3     Switch    Rtr-1\
    \      Rtr-2  Backbone\n    |          |          |          |          |    \
    \      |          |\n    |          |          |          |          |       \
    \   |          |\n    |          |          ***********************          |\
    \          |\n    |          |          *   User flips on     *          |   \
    \       |\n    |          |          *   light switch to   *          |      \
    \    |\n    |          |          *   turn on all the   *          |         \
    \ |\n    |          |          *   lights in Room-A  *          |          |\n\
    \    |          |          ***********************          |          |\n   \
    \ |          |          |          |          |          |          |\n    | \
    \         |          |          |          |          |          |\n    |    \
    \      |          |    COAP NON Mcast(PUT,         |          |\n    |       \
    \   |          |    Payload=lights ON)          |          |\n    |<-------------------------------+--------->|\
    \          |          |\n    ON         |          |          |          |-------------------->|\n\
    \    |          |          |          |          |          |<---------|\n   \
    \ |          |<---------|<-------------------------------|          |\n    | \
    \         ON         ON         |          |          |          |\n    ^    \
    \      ^          ^          |          |          |          |\n    ***********************\
    \          |          |          |          |\n    *   Lights in Room-A  *   \
    \       |          |          |          |\n    *   turn on (nearly   *      \
    \    |          |          |          |\n    *   simultaneously)   *         \
    \ |          |          |          |\n    ***********************          | \
    \         |          |          |\n    |          |          |          |    \
    \      |          |          |\n          Figure 3: Light Switch Sends Multicast\
    \ Control Message\n                                    Light                 \
    \      Network\n   Light-1   Light-2    Light-3     Switch    Rtr-1      Rtr-2\
    \  Backbone\n    |          |          |          |          |          |    \
    \      |\n    |     COAP NON (2.04 Changed)    |          |          |       \
    \   |\n    |------------------------------->|          |          |          |\n\
    \    |          |          |          |          |          |          |\n   \
    \ |          |          |          |          |          |          |\n    | \
    \         COAP NON (2.04 Changed)          |          |          |\n    |    \
    \      |------------------------------------------>|          |\n    |       \
    \   |          |          |          |          |--------->|\n    |          |\
    \          |          |          |<--------------------|\n    |          |   \
    \       |          |<---------|          |          |\n    |          |      \
    \    |          |          |          |          |\n    |          |        COAP\
    \ NON (5.00 Internal Server Error)         |\n    |          |          |------------------------------->|\
    \          |\n    |          |          |          |          |          |--------->|\n\
    \    |          |          |          |          |<--------------------|\n   \
    \ |          |          |          |<---------|          |          |\n    | \
    \         |          |          |          |          |          |\n      Figure\
    \ 4: Lights (Optionally) Respond to Multicast CoAP Request\n   Another, but similar,\
    \ lighting control use case is shown in Figure 5.\n   In this case, a controller\
    \ connected to the network backbone sends a\n   CoAP group communication request\
    \ to turn on all lights in Room-A.\n   Every light sends back a CoAP response\
    \ to the controller after being\n   turned on.\n                             \
    \                        Network\n  Light-1   Light-2    Light-3     Rtr-1   \
    \   Rtr-2  Backbone Controller\n   |          |          |           |       \
    \   |          |        |\n   |          |          |           |          | \
    \   COAP NON Mcast(PUT,\n   |          |          |           |          |   \
    \ Payload=lights ON)\n   |          |          |           |          |      \
    \    |<-------|\n   |          |          |           |<----------<---------|\
    \        |\n   |<--------------------------------|          |          |     \
    \   |\n   ON         |          |           |          |          |        |\n\
    \   |          |<----------<---------------------|          |        |\n   | \
    \         ON         ON          |          |          |        |\n   ^      \
    \    ^          ^           |          |          |        |\n   ***********************\
    \           |          |          |        |\n   *   Lights in Room-A  *     \
    \      |          |          |        |\n   *   turn on (nearly   *          \
    \ |          |          |        |\n   *   simultaneously)   *           |   \
    \       |          |        |\n   ***********************           |        \
    \  |          |        |\n   |          |          |           |          |  \
    \        |        |\n   |          |          |           |          |       \
    \   |        |\n   |    COAP NON (2.04 Changed)      |          |          | \
    \       |\n   |-------------------------------->|          |          |      \
    \  |\n   |          |          |           |-------------------->|        |\n\
    \   |          |  COAP NON (2.04 Changed)        |          |------->|\n   | \
    \         |-------------------------------->|          |        |\n   |      \
    \    |          |           |          |--------->|        |\n   |          |\
    \          | COAP NON (2.04 Changed)         |------->|\n   |          |     \
    \     |--------------------->|          |        |\n   |          |          |\
    \           |          |--------->|        |\n   |          |          |     \
    \      |          |          |------->|\n   |          |          |          \
    \ |          |          |        |\n     Figure 5: Controller on Backbone Sends\
    \ Multicast Control Message\n"
- title: 3.5.  Lighting Control in MLD-Enabled Network
  contents:
  - "3.5.  Lighting Control in MLD-Enabled Network\n   The use case in the previous\
    \ section can also apply in networks where\n   nodes support the MLD protocol\
    \ [RFC3810].  The lights then take on\n   the role of MLDv2 listener, and the\
    \ routers (Rtr-1 and Rtr-2) are\n   MLDv2 routers.  In the Ethernet-based network\
    \ configuration, MLD may\n   be available on all involved network interfaces.\
    \  Use of MLD in the\n   6LoWPAN-based configuration is also possible but requires\
    \ MLD support\n   in all nodes in the 6LoWPAN.  In current 6LoWPAN implementations,\
    \ MLD\n   is, however, not supported.\n   The resulting protocol flow is shown\
    \ in Figure 6.  This flow is\n   executed after the commissioning phase, as soon\
    \ as lights are\n   configured with a group address to listen to.  The (unicast)\
    \ MLD\n   Reports may require periodic refresh activity as specified by the MLD\n\
    \   protocol.  In the figure, 'LL' denotes link-local communication.\n   After\
    \ the shown sequence of MLD Report messages has been executed,\n   both Rtr-1\
    \ and Rtr-2 are automatically configured to forward IP\n   multicast traffic destined\
    \ to Room-A-Lights onto their connected\n   subnet.  Hence, no manual network\
    \ configuration of routers, as\n   previously indicated in Section 3.4, step 2,\
    \ is needed anymore.\n                                    Light              \
    \         Network\n   Light-1   Light-2    Light-3     Switch    Rtr-1      Rtr-2\
    \  Backbone\n    |          |          |          |          |          |    \
    \      |\n    |          |          |          |          |          |       \
    \   |\n    |          |          |          |          |          |          |\n\
    \    | MLD Report: Join    |          |          |          |          |\n   \
    \ | Group (Room-A-Lights)          |          |          |          |\n    |---LL------------------------------------->|\
    \          |          |\n    |          |          |          |          |MLD\
    \ Report: Join     |\n    |          |          |          |          |Group (Room-A-Lights)|\n\
    \    |          |          |          |          |---LL---->----LL---->|\n   \
    \ |          |          |          |          |          |          |\n    | \
    \         | MLD Report: Join    |          |          |          |\n    |    \
    \      | Group (Room-A-Lights)          |          |          |\n    |       \
    \   |---LL------------------------------------->|          |\n    |          |\
    \          |          |          |          |          |\n    |          |   \
    \       | MLD Report: Join    |          |          |\n    |          |      \
    \    | Group (Room-A-Lights)          |          |\n    |          |         \
    \ |---LL-------------------------->|          |\n    |          |          | \
    \         |          |          |          |\n    |          |          |    \
    \      |          |MLD Report: Join     |\n    |          |          |       \
    \   |          |Group (Room-A-Lights)|\n    |          |          |          |\
    \          |<--LL-----+---LL---->|\n    |          |          |          |   \
    \       |          |          |\n    |          |          |          |      \
    \    |          |          |\n                Figure 6: Joining Lighting Groups\
    \ Using MLD\n"
- title: 3.6.  Commissioning the Network Based on Resource Directory
  contents:
  - "3.6.  Commissioning the Network Based on Resource Directory\n   This section\
    \ outlines how devices in the lighting use case (both\n   switches and lights)\
    \ can be commissioned, making use of the RD\n   [CoRE-RD] and its group configuration\
    \ feature.\n   Once the RD is discovered, the Switches and lights need to be\n\
    \   discovered and their groups need to be defined.  For the\n   commissioning\
    \ of these devices, a commissioning tool can be used that\n   defines the entries\
    \ in the RD.  The commissioning tool has the\n   authority to change the contents\
    \ of the RD and the light/switch\n   nodes.  DTLS-based unicast security is used\
    \ by the commissioning tool\n   to modify operational data in RD, switches, and\
    \ lights.\n   In our particular use case, a group of three lights is defined with\n\
    \   one IP multicast address and hostname:\n      \"Room-A-Lights.floor1.west.bldg6.example.com\"\
    \n   The commissioning tool has a list of the three lights and the\n   associated\
    \ IP multicast address.  For each light in the list, the\n   tool learns the IP\
    \ address of the light and instructs the RD with\n   three (unicast) POST commands\
    \ to store the endpoints associated with\n   the three lights as prescribed by\
    \ the RD specification [CoRE-RD].\n   Finally, the commissioning tool defines\
    \ the group in the RD to\n   contain these three endpoints.  Also the commissioning\
    \ tool writes\n   the IP multicast address in the light endpoints with, for example,\n\
    \   the (unicast) POST command discussed in Section 2.6.2.2.\n   The light switch\
    \ can discover the group in RD and thus learn the IP\n   multicast address of\
    \ the group.  The light switch will use this\n   address to send CoAP group communication\
    \ requests to the members of\n   the group.  When the message arrives, the lights\
    \ should recognize the\n   IP multicast address and accept the message.\n"
- title: 4.  Deployment Guidelines
  contents:
  - "4.  Deployment Guidelines\n   This section provides guidelines on how IP multicast-based\
    \ CoAP group\n   communication can be deployed in various network configurations.\n"
- title: 4.1.  Target Network Topologies
  contents:
  - "4.1.  Target Network Topologies\n   CoAP group communication can be deployed\
    \ in various network\n   topologies.  First, the target network may be a traditional\
    \ IP\n   network, or an LLN such as a 6LoWPAN network, or consist of mixed\n \
    \  traditional/constrained network segments.  Second, it may be a single\n   subnet\
    \ only or a multi-subnet, e.g., multiple 6LoWPAN networks joined\n   by a single\
    \ backbone LAN.  Third, a wireless network segment may have\n   all its nodes\
    \ reachable in a single IP hop (fully connected), or it\n   may require multiple\
    \ IP hops for some pairs of nodes to reach each\n   other.\n   Each topology may\
    \ pose different requirements on the configuration of\n   routers and protocol(s),\
    \ in order to enable efficient CoAP group\n   communication.  To enable all the\
    \ above target network topologies, an\n   implementation of CoAP group communication\
    \ needs to allow the\n   following:\n   1.  Routing/forwarding of IP multicast\
    \ packets over multiple hops.\n   2.  Routing/forwarding of IP multicast packets\
    \ over subnet boundaries\n       between traditional and constrained (e.g., LLN)\
    \ networks.\n   The remainder of this section discusses solutions to enable both\n\
    \   features.\n"
- title: 4.2.  Networks Using the MLD Protocol
  contents:
  - "4.2.  Networks Using the MLD Protocol\n   CoAP nodes that are IP hosts (i.e.,\
    \ not IP routers) are generally\n   unaware of the specific IP multicast routing/forwarding\
    \ protocol\n   being used.  When such a host needs to join a specific (CoAP)\n\
    \   multicast group, it requires a way to signal to IP multicast routers\n   which\
    \ IP multicast traffic it wants to receive.\n   The MLD protocol [RFC3810] (see\
    \ Appendix A of this document) is the\n   standard IPv6 method to achieve this;\
    \ therefore, this approach should\n   be used on traditional IP networks.  CoAP\
    \ server nodes would then act\n   in the role of MLD Multicast Address Listener.\n\
    \   The guidelines from [RFC6636] on the tuning of MLD for mobile and\n   wireless\
    \ networks may be useful when implementing MLD in LLNs.\n   However, on LLNs and\
    \ 6LoWPAN networks, the use of MLD may not be\n   feasible at all due to constraints\
    \ on code size, memory, or network\n   capacity.\n"
- title: 4.3.  Networks Using RPL Multicast without MLD
  contents:
  - "4.3.  Networks Using RPL Multicast without MLD\n   It is assumed in this section\
    \ that the MLD protocol is not\n   implemented in a network, for example, due\
    \ to resource constraints.\n   The RPL routing protocol (see Section 12 of [RFC6550])\
    \ defines the\n   advertisement of IP multicast destinations using Destination\n\
    \   Advertisement Object (DAO) messages and routing of multicast IPv6\n   packets\
    \ based on this.  It requires the RPL mode of operation to be 3\n   (Storing mode\
    \ with multicast support).\n   Hence, RPL DAO can be used by CoAP nodes that are\
    \ RPL routers, or are\n   RPL Leaf Nodes, to advertise IP multicast group membership\
    \ to parent\n   routers.  Then, RPL is used to route IP multicast CoAP requests\
    \ over\n   multiple hops to the correct CoAP servers.\n   The same DAO mechanism\
    \ can be used to convey IP multicast group\n   membership information to an edge\
    \ router (e.g., 6LBR), in case the\n   edge router is also the root of the RPL\
    \ Destination-Oriented Directed\n   Acyclic Graph (DODAG).  This is useful because\
    \ the edge router then\n   learns which IP multicast traffic it needs to pass\
    \ through from the\n   backbone network into the LLN subnet.  In 6LoWPAN networks,\
    \ such\n   selective \"filtering\" helps to avoid congestion of a 6LoWPAN subnet\n\
    \   by IP multicast traffic from the traditional backbone IP network.\n"
- title: 4.4.  Networks Using MPL Forwarding without MLD
  contents:
  - "4.4.  Networks Using MPL Forwarding without MLD\n   The MPL forwarding protocol\
    \ [MCAST-MPL] can be used for propagation\n   of IPv6 multicast packets to all\
    \ MPL Forwarders within a predefined\n   network domain, over multiple hops. \
    \ MPL is designed to work in LLNs.\n   In this section, it is again assumed that\
    \ MLD is not implemented in\n   the network, for example, due to resource limitations\
    \ in an LLN.\n   The purpose of MPL is to let a predefined group of Forwarders\n\
    \   collectively work towards the goal of distributing an IPv6 multicast\n   packet\
    \ throughout an MPL Domain.  (A Forwarder node may be associated\n   to multiple\
    \ MPL Domains at the same time.)  So, it would appear that\n   there is no need\
    \ for CoAP servers to advertise their multicast group\n   membership, since any\
    \ IP multicast packet that enters the MPL Domain\n   is distributed to all MPL\
    \ Forwarders without regard to what multicast\n   addresses the individual nodes\
    \ are listening to.\n   However, if an IP multicast request originates just outside\
    \ the MPL\n   Domain, the request will not be propagated by MPL.  An example of\n\
    \   such a case is the network topology of Figure 1 where the subnets are\n  \
    \ 6LoWPAN subnets and for each 6LoWPAN subnet, one Realm-Local\n   ([RFC7346])\
    \ MPL Domain is defined.  The backbone network in this case\n   is not part of\
    \ any MPL Domain.\n   This situation can become a problem in building control\
    \ use cases,\n   for example, when the controller client needs to send a single\
    \ IP\n   multicast request to the group Room-A-Lights.  By default, the\n   request\
    \ would be blocked by Rtr-1 and by Rtr-2 and not enter the\n   Realm-Local MPL\
    \ Domains associated to Subnet-1 and Subnet-2.  The\n   reason is that Rtr-1 and\
    \ Rtr-2 do not have the knowledge that devices\n   in Subnet-1/2 want to listen\
    \ for IP packets destined to IP multicast\n   group Room-A-Lights.\n   To solve\
    \ the above issue, the following solutions could be applied:\n   1.  Extend the\
    \ MPL Domain, e.g., in the above example, include the\n       network backbone\
    \ to be part of each of the two MPL Domains.  Or,\n       in the above example,\
    \ create just a single MPL Domain that\n       includes both 6LoWPAN subnets plus\
    \ the backbone link, which is\n       possible since MPL is not tied to a single\
    \ link-layer technology.\n   2.  Manual configuration of an edge router(s) as\
    \ an MPL Seed(s) for\n       specific IP multicast traffic.  In the above example,\
    \ this could\n       be done through the following three steps: First, configure\
    \ Rtr-1\n       and Rtr-2 to act as MLD Address Listeners for the Room-A-Lights\n\
    \       IP multicast group.  This step allows any (other) routers on the\n   \
    \    backbone to learn that at least one node on the backbone link is\n      \
    \ interested in receiving any IP multicast traffic to\n       Room-A-Lights. \
    \ Second, configure both routers to \"inject\" any IP\n       multicast packets\
    \ destined to group Room-A-Lights into the\n       (Realm-Local) MPL Domain that\
    \ is associated to that router.\n       Third, configure both routers to propagate\
    \ any IPv6 multicast\n       packets originating from within their associated\
    \ MPL Domain to\n       the backbone, if at least one node on the backbone has\
    \ indicated\n       interest in receiving such IPv6 packets (for which MLD is\
    \ used on\n       the backbone).\n   3.  Use an additional protocol/mechanism\
    \ for injection of IP\n       multicast traffic from outside an MPL Domain into\
    \ that MPL\n       Domain, based on IP multicast group subscriptions of Forwarders\n\
    \       within the MPL Domain.  Such a protocol is currently not defined\n   \
    \    in [MCAST-MPL].\n   In conclusion, MPL can be used directly in case all sources\
    \ of IP\n   multicast CoAP requests (CoAP clients) and also all the destinations\n\
    \   (CoAP servers) are inside a single MPL Domain.  Then, each source\n   node\
    \ acts as an MPL Seed.  In all other cases, MPL can only be used\n   with additional\
    \ protocols and/or configuration on how IP multicast\n   packets can be injected\
    \ from outside into an MPL Domain.\n"
- title: 4.5.  6LoWPAN Specific Guidelines for the 6LBR
  contents:
  - "4.5.  6LoWPAN Specific Guidelines for the 6LBR\n   To support multi-subnet scenarios\
    \ for CoAP group communication, it is\n   recommended that a 6LBR will act in\
    \ an MLD router role on the\n   backbone link.  If this is not possible, then\
    \ the 6LBR should be\n   configured to act as an MLD Multicast Address Listener\
    \ (see\n   Appendix A) on the backbone link.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This section describes the relevant security\
    \ configuration for CoAP\n   group communication using IP multicast.  The threats\
    \ to CoAP group\n   communication are also identified, and various approaches\
    \ to mitigate\n   these threats are summarized.\n"
- title: 5.1.  Security Configuration
  contents:
  - "5.1.  Security Configuration\n   As defined in Sections 8.1 and 9.1 of [RFC7252],\
    \ CoAP group\n   communication based on IP multicast will do the following:\n\
    \   o  Operate in CoAP NoSec (No Security) mode, until a future group\n      security\
    \ solution is developed (see also Section 5.3.3).\n   o  Use the \"coap\" scheme.\
    \  The \"coaps\" scheme should only be used\n      when a future group security\
    \ solution is developed (see also\n      Section 5.3.3).\n   Essentially, the\
    \ above configuration means that there is currently no\n   security at the CoAP\
    \ layer for group communication.  Therefore, for\n   sensitive and mission-critical\
    \ applications (e.g., health monitoring\n   systems and alarm monitoring systems),\
    \ it is currently recommended to\n   deploy CoAP group communication with an application-layer\
    \ security\n   mechanism (e.g., data object security) for improved security.\n\
    \   Application-level security has many desirable properties, including\n   maintaining\
    \ security properties while forwarding traffic through\n   intermediaries (proxies).\
    \  Application-level security also tends to\n   more cleanly separate security\
    \ from the dynamics of group membership\n   (e.g., the problem of distributing\
    \ security keys across large groups\n   with many members that come and go).\n\
    \   Without application-layer security, CoAP group communication should\n   only\
    \ be currently deployed in non-critical applications (e.g., read-\n   only temperature\
    \ sensors).  Only when security solutions at the CoAP\n   layer are mature enough\
    \ (see Section 5.3.3) should CoAP group\n   communication without application-layer\
    \ security be considered for\n   sensitive and mission-critical applications.\n"
- title: 5.2.  Threats
  contents:
  - "5.2.  Threats\n   As noted above, there is currently no security at the CoAP\
    \ layer for\n   group communication.  This is due to the fact that the current\
    \ DTLS-\n   based approach for CoAP is exclusively unicast oriented and does not\n\
    \   support group security features such as group key exchange and group\n   authentication.\
    \  As a direct consequence of this, CoAP group\n   communication is vulnerable\
    \ to all attacks mentioned in Section 11 of\n   [RFC7252] for IP multicast.\n"
- title: 5.3.  Threat Mitigation
  contents:
  - "5.3.  Threat Mitigation\n   Section 11 of [RFC7252] identifies various threat\
    \ mitigation\n   techniques for CoAP group communication.  In addition to those\n\
    \   guidelines, it is recommended that for sensitive data or safety-\n   critical\
    \ control, a combination of appropriate link-layer security\n   and administrative\
    \ control of IP multicast boundaries should be used.\n   Some examples are given\
    \ below.\n"
- title: 5.3.1.  WiFi Scenario
  contents:
  - "5.3.1.  WiFi Scenario\n   In a home automation scenario (using WiFi), the WiFi\
    \ encryption\n   should be enabled to prevent rogue nodes from joining.  The Customer\n\
    \   Premises Equipment (CPE) that enables access to the Internet should\n   also\
    \ have its IP multicast filters set so that it enforces multicast\n   scope boundaries\
    \ to isolate local multicast groups from the rest of\n   the Internet (e.g., as\
    \ per [RFC6092]).  In addition, the scope of the\n   IP multicast should be set\
    \ to be site-local or smaller scope.  For\n   site-local scope, the CPE will be\
    \ an appropriate multicast scope\n   boundary point.\n"
- title: 5.3.2.  6LoWPAN Scenario
  contents:
  - "5.3.2.  6LoWPAN Scenario\n   In a building automation scenario, a particular\
    \ room may have a\n   single 6LoWPAN network with a single edge router (6LBR).\
    \  Nodes on\n   the subnet can use link-layer encryption to prevent rogue nodes\
    \ from\n   joining.  The 6LBR can be configured so that it blocks any incoming\n\
    \   (6LoWPAN-bound) IP multicast traffic.  Another example topology could\n  \
    \ be a multi-subnet 6LoWPAN in a large conference room.  In this case,\n   the\
    \ backbone can implement port authentication (IEEE 802.1X) to\n   ensure only\
    \ authorized devices can join the Ethernet backbone.  The\n   access router to\
    \ this secured network segment can also be configured\n   to block incoming IP\
    \ multicast traffic.\n"
- title: 5.3.3.  Future Evolution
  contents:
  - "5.3.3.  Future Evolution\n   In the future, to further mitigate the threats,\
    \ security enhancements\n   need to be developed at the IETF for group communications.\
    \  This will\n   allow introduction of a secure mode of CoAP group communication\
    \ and\n   use of the \"coaps\" scheme for that purpose.\n   At the time of writing\
    \ this specification, there are various\n   approaches being considered for security\
    \ enhancements for group\n   communications.  Specifically, a lot of the current\
    \ effort at the\n   IETF is geared towards developing DTLS-based group communication.\n\
    \   This is primarily motivated by the fact that unicast CoAP security is\n  \
    \ DTLS based (Section 9.1 of [RFC7252].  For example, [MCAST-SECURITY]\n   proposes\
    \ DTLS-based IP multicast security.  However, it is too early\n   to conclude\
    \ if this is the best approach.  Alternatively,\n   [IPSEC-PAYLOAD] proposes IPsec-based\
    \ IP multicast security.  This\n   approach also needs further investigation and\
    \ validation.\n"
- title: 5.4.  Monitoring Considerations
  contents:
  - '5.4.  Monitoring Considerations

    '
- title: 5.4.1.  General Monitoring
  contents:
  - "5.4.1.  General Monitoring\n   CoAP group communication is meant to be used to\
    \ control a set of\n   related devices (e.g., simultaneously turn on all the lights\
    \ in a\n   room).  This intrinsically exposes the group to some unique\n   monitoring\
    \ risks that solitary devices (i.e., devices not in a group)\n   are not as vulnerable\
    \ to.  For example, assume an attacker is able to\n   physically see a set of\
    \ lights turn on in a room.  Then the attacker\n   can correlate a CoAP group\
    \ communication message to that easily\n   observable coordinated group action\
    \ even if the contents of the\n   message are encrypted by a future security solution\
    \ (see\n   Section 5.3.3).  This will give the attacker side-channel information\n\
    \   to plan further attacks (e.g., by determining the members of the\n   group,\
    \ then some network topology information may be deduced).\n   One mitigation to\
    \ group communication monitoring risks that should be\n   explored in the future\
    \ is methods to decorrelate coordinated group\n   actions.  For example, if a\
    \ CoAP group communication GET is sent to\n   all the alarm sensors in a house,\
    \ then their (unicast) responses\n   should be as decorrelated as possible.  This\
    \ will introduce greater\n   entropy into the system and will make it harder for\
    \ an attacker to\n   monitor and gather side-channel information.\n"
- title: 5.4.2.  Pervasive Monitoring
  contents:
  - "5.4.2.  Pervasive Monitoring\n   A key additional threat consideration for group\
    \ communication is\n   pointed to by [RFC7258], which warns of the dangers of\
    \ pervasive\n   monitoring.  CoAP group communication solutions that are built\
    \ on top\n   of IP multicast need to pay particular heed to these dangers.  This\n\
    \   is because IP multicast is easier to intercept (e.g., and to secretly\n  \
    \ record) compared to unicast traffic.  Also, CoAP traffic is meant for\n   the\
    \ Internet of Things.  This means that CoAP traffic (once future\n   security\
    \ solutions are developed as in Section 5.3.3) may be used for\n   the control\
    \ and monitoring of critical infrastructure (e.g., lights,\n   alarms, etc.) that\
    \ may be prime targets for attack.\n   For example, an attacker may attempt to\
    \ record all the CoAP traffic\n   going over the smart grid (i.e., networked electrical\
    \ utility) of a\n   country and try to determine critical nodes for further attacks.\
    \  For\n   example, the source node (controller) sends out the CoAP group\n  \
    \ communication messages.  CoAP multicast traffic is inherently more\n   vulnerable\
    \ (compared to a unicast packet) as the same packet may be\n   replicated over\
    \ many links, so there is a much higher probability of\n   it getting captured\
    \ by a pervasive monitoring system.\n   One useful mitigation to pervasive monitoring\
    \ is to restrict the\n   scope of the IP multicast to the minimal scope that fulfills\
    \ the\n   application need.  Thus, for example, site-local IP multicast scope\n\
    \   is always preferred over global scope IP multicast if this fulfills\n   the\
    \ application needs.  This approach has the added advantage that it\n   coincides\
    \ with the guidelines for minimizing congestion control (see\n   Section 2.8).\n\
    \   In the future, even if all the CoAP multicast traffic is encrypted,\n   an\
    \ attacker may still attempt to capture the traffic and perform an\n   off-line\
    \ attack, though of course having the multicast traffic\n   protected is always\
    \ desirable as it significantly raises the cost to\n   an attacker (e.g., to break\
    \ the encryption) versus unprotected\n   multicast traffic.\n"
- title: 6.  IANA Considerations
  contents:
  - '6.  IANA Considerations

    '
- title: 6.1.  New 'core.gp' Resource Type
  contents:
  - "6.1.  New 'core.gp' Resource Type\n   This memo registers a new Resource Type\
    \ (rt=) Link Target Attribute,\n   'core.gp', in the \"Resource Type (rt=) Link\
    \ Target Attribute Values\"\n   subregistry under the \"Constrained RESTful Environments\
    \ (CoRE)\n   Parameters\" registry.\n   Attribute Value: core.gp\n   Description:\
    \ Group Configuration resource.  This resource is used to\n   query/manage the\
    \ group membership of a CoAP server.\n   Reference: See Section 2.6.2.\n"
- title: 6.2.  New 'coap-group+json' Internet Media Type
  contents:
  - "6.2.  New 'coap-group+json' Internet Media Type\n   This memo registers a new\
    \ Internet media type for the CoAP Group\n   Configuration resource called 'application/coap-group+json'.\n\
    \   Type name: application\n   Subtype name: coap-group+json\n   Required parameters:\
    \ None\n   Optional parameters: None\n   Encoding considerations: 8-bit UTF-8.\n\
    \   JSON to be represented using UTF-8, which is 8-bit compatible (and\n   most\
    \ efficient for resource constrained implementations).\n   Security considerations:\n\
    \   Denial-of-Service attacks could be performed by constantly\n   (re-)setting\
    \ the Group Configuration resource of a CoAP endpoint to\n   different values.\
    \  This will cause the endpoint to register (or\n   deregister) from the related\
    \ IP multicast group.  To prevent this, it\n   is recommended that a form of authorization\
    \ (making use of unicast\n   DTLS-secured CoAP) be used such that only authorized\
    \ controllers are\n   allowed by an endpoint to configure its group membership.\n\
    \   Interoperability considerations: None\n   Published specification: RFC 7390\n\
    \   Applications that use this media type:\n   CoAP client and server implementations\
    \ that wish to set/read the\n   Group Configuration resource via the 'application/coap-group+json'\n\
    \   payload as described in Section 2.6.2.\n   Fragment identifier considerations:\
    \ N/A\n   Additional Information:\n      Deprecated alias names for this type:\
    \ None\n      Magic number(s): None\n      File extension(s): *.json\n      Macintosh\
    \ file type code(s): TEXT\n   Person and email address to contact for further\
    \ information:\n      Esko Dijk (\"Esko.Dijk@Philips.com\")\n   Intended usage:\
    \ COMMON\n   Restrictions on usage: None\n   Author: CoRE WG\n   Change controller:\
    \ IETF\n   Provisional registration? (standards tree only): N/A\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2782]\
    \  Gulbrandsen, A., Vixie, P., and L. Esibov, \"A DNS RR for\n              specifying\
    \ the location of services (DNS SRV)\", RFC 2782,\n              February 2000,\
    \ <http://www.rfc-editor.org/info/rfc2782>.\n   [RFC3376]  Cain, B., Deering,\
    \ S., Kouvelas, I., Fenner, B., and A.\n              Thyagarajan, \"Internet\
    \ Group Management Protocol, Version\n              3\", RFC 3376, October 2002,\n\
    \              <http://www.rfc-editor.org/info/rfc3376>.\n   [RFC3433]  Bierman,\
    \ A., Romascanu, D., and K. Norseth, \"Entity Sensor\n              Management\
    \ Information Base\", RFC 3433, December 2002,\n              <http://www.rfc-editor.org/info/rfc3433>.\n\
    \   [RFC3542]  Stevens, W., Thomas, M., Nordmark, E., and T. Jinmei,\n       \
    \       \"Advanced Sockets Application Program Interface (API) for\n         \
    \     IPv6\", RFC 3542, May 2003,\n              <http://www.rfc-editor.org/info/rfc3542>.\n\
    \   [RFC3810]  Vida, R. and L. Costa, \"Multicast Listener Discovery\n       \
    \       Version 2 (MLDv2) for IPv6\", RFC 3810, June 2004,\n              <http://www.rfc-editor.org/info/rfc3810>.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66, RFC\n       \
    \       3986, January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC4291]  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n        \
    \      Architecture\", RFC 4291, February 2006,\n              <http://www.rfc-editor.org/info/rfc4291>.\n\
    \   [RFC4601]  Fenner, B., Handley, M., Holbrook, H., and I. Kouvelas,\n     \
    \         \"Protocol Independent Multicast - Sparse Mode (PIM-SM):\n         \
    \     Protocol Specification (Revised)\", RFC 4601, August 2006,\n           \
    \   <http://www.rfc-editor.org/info/rfc4601>.\n   [RFC4919]  Kushalnagar, N.,\
    \ Montenegro, G., and C. Schumacher, \"IPv6\n              over Low-Power Wireless\
    \ Personal Area Networks (6LoWPANs):\n              Overview, Assumptions, Problem\
    \ Statement, and Goals\", RFC\n              4919, August 2007,\n            \
    \  <http://www.rfc-editor.org/info/rfc4919>.\n   [RFC4944]  Montenegro, G., Kushalnagar,\
    \ N., Hui, J., and D. Culler,\n              \"Transmission of IPv6 Packets over\
    \ IEEE 802.15.4\n              Networks\", RFC 4944, September 2007,\n       \
    \       <http://www.rfc-editor.org/info/rfc4944>.\n   [RFC5110]  Savola, P., \"\
    Overview of the Internet Multicast Routing\n              Architecture\", RFC\
    \ 5110, January 2008,\n              <http://www.rfc-editor.org/info/rfc5110>.\n\
    \   [RFC5771]  Cotton, M., Vegoda, L., and D. Meyer, \"IANA Guidelines for\n \
    \             IPv4 Multicast Address Assignments\", BCP 51, RFC 5771,\n      \
    \        March 2010, <http://www.rfc-editor.org/info/rfc5771>.\n   [RFC5952] \
    \ Kawamura, S. and M. Kawashima, \"A Recommendation for IPv6\n              Address\
    \ Text Representation\", RFC 5952, August 2010,\n              <http://www.rfc-editor.org/info/rfc5952>.\n\
    \   [RFC6092]  Woodyatt, J., \"Recommended Simple Security Capabilities in\n \
    \             Customer Premises Equipment (CPE) for Providing\n              Residential\
    \ IPv6 Internet Service\", RFC 6092, January\n              2011, <http://www.rfc-editor.org/info/rfc6092>.\n\
    \   [RFC6550]  Winter, T., Thubert, P., Brandt, A., Hui, J., Kelsey, R.,\n   \
    \           Levis, P., Pister, K., Struik, R., Vasseur, JP., and R.\n        \
    \      Alexander, \"RPL: IPv6 Routing Protocol for Low-Power and\n           \
    \   Lossy Networks\", RFC 6550, March 2012,\n              <http://www.rfc-editor.org/info/rfc6550>.\n\
    \   [RFC6636]  Asaeda, H., Liu, H., and Q. Wu, \"Tuning the Behavior of\n    \
    \          the Internet Group Management Protocol (IGMP) and\n              Multicast\
    \ Listener Discovery (MLD) for Routers in Mobile\n              and Wireless Networks\"\
    , RFC 6636, May 2012,\n              <http://www.rfc-editor.org/info/rfc6636>.\n\
    \   [RFC6690]  Shelby, Z., \"Constrained RESTful Environments (CoRE) Link\n  \
    \            Format\", RFC 6690, August 2012,\n              <http://www.rfc-editor.org/info/rfc6690>.\n\
    \   [RFC6763]  Cheshire, S. and M. Krochmal, \"DNS-Based Service\n           \
    \   Discovery\", RFC 6763, February 2013,\n              <http://www.rfc-editor.org/info/rfc6763>.\n\
    \   [RFC6775]  Shelby, Z., Chakrabarti, S., Nordmark, E., and C. Bormann,\n  \
    \            \"Neighbor Discovery Optimization for IPv6 over Low-Power\n     \
    \         Wireless Personal Area Networks (6LoWPANs)\", RFC 6775,\n          \
    \    November 2012, <http://www.rfc-editor.org/info/rfc6775>.\n   [RFC7159]  Bray,\
    \ T., \"The JavaScript Object Notation (JSON) Data\n              Interchange\
    \ Format\", RFC 7159, March 2014,\n              <http://www.rfc-editor.org/info/rfc7159>.\n\
    \   [RFC7230]  Fielding, R. and J. Reschke, \"Hypertext Transfer Protocol\n  \
    \            (HTTP/1.1): Message Syntax and Routing\", RFC 7230, June\n      \
    \        2014, <http://www.rfc-editor.org/info/rfc7230>.\n   [RFC7252]  Shelby,\
    \ Z., Hartke, K., and C. Bormann, \"The Constrained\n              Application\
    \ Protocol (CoAP)\", RFC 7252, June 2014,\n              <http://www.rfc-editor.org/info/rfc7252>.\n\
    \   [RFC7258]  Farrell, S. and H. Tschofenig, \"Pervasive Monitoring Is an\n \
    \             Attack\", BCP 188, RFC 7258, May 2014,\n              <http://www.rfc-editor.org/info/rfc7258>.\n\
    \   [RFC7320]  Nottingham, M., \"URI Design and Ownership\", BCP 190, RFC\n  \
    \            7320, July 2014, <http://www.rfc-editor.org/info/rfc7320>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC1033]  Lottor, M., \"Domain administrators\
    \ operations guide\", RFC\n              1033, November 1987,\n              <http://www.rfc-editor.org/info/rfc1033>.\n\
    \   [RFC4605]  Fenner, B., He, H., Haberman, B., and H. Sandick,\n           \
    \   \"Internet Group Management Protocol (IGMP) / Multicast\n              Listener\
    \ Discovery (MLD)-Based Multicast Forwarding\n              (\"IGMP/MLD Proxying\"\
    )\", RFC 4605, August 2006,\n              <http://www.rfc-editor.org/info/rfc4605>.\n\
    \   [RFC5740]  Adamson, B., Bormann, C., Handley, M., and J. Macker,\n       \
    \       \"NACK-Oriented Reliable Multicast (NORM) Transport\n              Protocol\"\
    , RFC 5740, November 2009,\n              <http://www.rfc-editor.org/info/rfc5740>.\n\
    \   [RFC7346]  Droms, R., \"IPv6 Multicast Address Scopes\", RFC 7346,\n     \
    \         August 2014, <http://www.rfc-editor.org/info/rfc7346>.\n   [BLOCKWISE-CoAP]\n\
    \              Bormann, C. and Z. Shelby, \"Blockwise transfers in CoAP\",\n \
    \             Work in Progress, draft-ietf-core-block-15, July 2014.\n   [CoRE-RD]\
    \  Shelby, Z., Bormann, C., and S. Krco, \"CoRE Resource\n              Directory\"\
    , Work in Progress, draft-ietf-core-resource-\n              directory-01, December\
    \ 2013.\n   [OBSERVE-CoAP]\n              Hartke, K., \"Observing Resources in\
    \ CoAP\", Work in\n              Progress, draft-ietf-core-observe-14, June 2014.\n\
    \   [MCAST-MPL]\n              Hui, J. and R. Kelsey, \"Multicast Protocol for\
    \ Low power\n              and Lossy Networks (MPL)\", Work in Progress, draft-ietf-\n\
    \              roll-trickle-mcast-09, April 2014.\n   [MCAST-SECURITY]\n     \
    \         Keoh, S., Kumar, S., Garcia-Morchon, O., Dijk, E., and A.\n        \
    \      Rahman, \"DTLS-based Multicast Security in Constrained\n              Environments\"\
    , Work in Progress, draft-keoh-dice-\n              multicast-security-08, July\
    \ 2014.\n   [IPSEC-PAYLOAD]\n              Migault, D. and C. Bormann, \"IPsec/ESP\
    \ for Application\n              Payload\", Work in Progress, draft-mglt-dice-ipsec-for-\n\
    \              application-payload-00, July 2014.\n"
- title: Appendix A.  Multicast Listener Discovery (MLD)
  contents:
  - "Appendix A.  Multicast Listener Discovery (MLD)\n   In order to extend the scope\
    \ of IP multicast beyond link-local scope,\n   an IP multicast routing or forwarding\
    \ protocol has to be active in\n   routers on an LLN.  To achieve efficient IP\
    \ multicast routing (i.e.,\n   avoid always flooding IP multicast packets), routers\
    \ have to learn\n   which hosts need to receive packets addressed to specific\
    \ IP\n   multicast destinations.\n   The MLD protocol [RFC3810] (or its IPv4 equivalent,\
    \ IGMP [RFC3376])\n   is today the method of choice used by a (IP multicast-enabled)\
    \ router\n   to discover the presence of IP multicast listeners on directly\n\
    \   attached links, and to discover which IP multicast addresses are of\n   interest\
    \ to those listening nodes.  MLD was specifically designed to\n   cope with fairly\
    \ dynamic situations in which IP multicast listeners\n   may join and leave at\
    \ any time.\n   Optimal tuning of the parameters of MLD/IGMP for routers for mobile\n\
    \   and wireless networks is discussed in [RFC6636].  These guidelines\n   may\
    \ be useful when implementing MLD in LLNs.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to Jari Arkko, Peter Bigot, Anders Brandt, Ben Campbell,\n\
    \   Angelo Castellani, Alissa Cooper, Spencer Dawkins, Badis Djamaa,\n   Adrian\
    \ Farrel, Stephen Farrell, Thomas Fossati, Brian Haberman,\n   Bjoern Hoehrmann,\
    \ Matthias Kovatsch, Guang Lu, Salvatore Loreto,\n   Kerry Lynn, Andrew McGregor,\
    \ Kathleen Moriarty, Pete Resnick, Dale\n   Seed, Zach Shelby, Martin Stiemerling,\
    \ Peter van der Stok, Gengyu\n   Wei, and Juan Carlos Zuniga for their helpful\
    \ comments and\n   discussions that have helped shape this document.\n   Special\
    \ thanks to Carsten Bormann and Barry Leiba for their extensive\n   and thoughtful\
    \ Chair and AD reviews of the document.  Their reviews\n   helped to immeasurably\
    \ improve the document quality.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Akbar Rahman (editor)\n   InterDigital Communications,\
    \ LLC\n   1000 Sherbrooke Street West\n   Montreal, Quebec  H3A 3G4\n   Canada\n\
    \   EMail: Akbar.Rahman@InterDigital.com\n   Esko Dijk (editor)\n   Philips Research\n\
    \   High Tech Campus 34\n   Eindhoven  5656AE\n   Netherlands\n   EMail: esko.dijk@philips.com\n"
