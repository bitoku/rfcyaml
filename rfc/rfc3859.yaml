- contents:
  - '                   Common Profile for Presence (CPP)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   At the time this document was written, numerous presence protocols\n
    \  were in use (largely as components of commercial instant messaging\n   services),
    and little interoperability between services based on\n   these protocols has
    been achieved.  This specification defines common\n   semantics and data formats
    for presence to facilitate the creation of\n   gateways between presence services.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  2\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n   3.  Abstract Presence Service  . . . . . . . . . . . . . . . .
    . .  4\n       3.1.  Overview of the Presence Service . . . . . . . . . . . .
    \ 4\n       3.2.  Identification of PRESENTITIES and WATCHERS  . . . . . .  6\n
    \            3.2.1.  Address Resolution . . . . . . . . . . . . . . .  6\n       3.3.
    \ Format of Presence Information . . . . . . . . . . . . .  6\n       3.4.  The
    Presence Service . . . . . . . . . . . . . . . . . .  7\n             3.4.1.  The
    Subscribe Operation  . . . . . . . . . . . .  7\n             3.4.2.  The Notify
    Operation . . . . . . . . . . . . . .  8\n             3.4.3.  Subscribe Operation
    (with Zero Duration) . . . .  8\n   4.  Security Considerations  . . . . . . .
    . . . . . . . . . . . .  8\n   5.  IANA Considerations  . . . . . . . . . . .
    . . . . . . . . . .  9\n       5.1.  The PRES URI Scheme  . . . . . . . . . .
    . . . . . . . .  9\n   6.  Contributors . . . . . . . . . . . . . . . . . . .
    . . . . . . 10\n   7.  References . . . . . . . . . . . . . . . . . . . . . .
    . . . . 10\n       7.1.  Normative References . . . . . . . . . . . . . . . .
    . . 10\n       7.2.  Informative References . . . . . . . . . . . . . . . . .
    11\n   A.  PRES URI IANA Registration Template  . . . . . . . . . . . . . 12\n
    \      A.1.  URI Scheme Name  . . . . . . . . . . . . . . . . . . . . 12\n       A.2.
    \ URI Scheme Syntax  . . . . . . . . . . . . . . . . . . . 12\n       A.3.  Character
    Encoding Considerations  . . . . . . . . . . . 12\n       A.4.  Intended Usage
    . . . . . . . . . . . . . . . . . . . . . 12\n       A.5.  Applications and/or
    Protocols which use this URI Scheme\n             Name . . . . . . . . . . . .
    . . . . . . . . . . . . . . 12\n       A.6.  Interoperability Considerations  .
    . . . . . . . . . . . 13\n       A.7.  Security Considerations  . . . . . . .
    . . . . . . . . . 13\n       A.8.  Relevant Publications  . . . . . . . . . .
    . . . . . . . 13\n       A.9.  Person & Email Address to Contact for Further\n
    \            Information. . . . . . . . . . . . . . . . . . . . . . . 13\n       A.10.
    Author/Change Controller . . . . . . . . . . . . . . . . 13\n       A.11. Applications
    and/or Protocols which use this URI Scheme\n             Name . . . . . . . .
    . . . . . . . . . . . . . . . . . . 13\n   B.  Issues of Interest . . . . . .
    . . . . . . . . . . . . . . . . 13\n       B.1.  Address Mapping  . . . . . .
    . . . . . . . . . . . . . . 13\n       B.2.  Source-Route Mapping . . . . . .
    . . . . . . . . . . . . 13\n   C.  Acknowledgments  . . . . . . . . . . . . .
    . . . . . . . . . . 14\n   Author's Address . . . . . . . . . . . . . . . . .
    . . . . . . . . 14\n   Full Copyright Statement . . . . . . . . . . . . . . .
    . . . . . . 15\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Presence is defined in RFC2778 [5].  At the time this document
    was\n   written, numerous presence protocols are in use (largely as\n   components
    of commercial instant messaging services), and little\n   interoperability between
    services based on these protocols has been\n   achieved.  This specification defines
    semantics and data formats for\n   common services of presence to facilitate the
    creation of gateways\n   between presence services: a common profile for presence
    (CPP).\n   Service behavior is described abstractly in terms of operations\n   invoked
    between the consumer and provider of a service.  Accordingly,\n   each presence
    service must specify how this behavior is mapped onto\n   its own protocol interactions.
    \ The choice of strategy is a local\n   matter, providing that there is a clear
    relation between the abstract\n   behaviors of the service (as specified in this
    memo) and how it is\n   faithfully realized by a particular presence service.
    \  For example,\n   one strategy might transmit presence information as key/value
    pairs,\n   another might use a compact binary representation, and a third might\n
    \  use nested containers.\n   The parameters for each operation are defined using
    an abstract\n   syntax.  Although the syntax specifies the range of possible data\n
    \  values, each presence service must specify how well-formed instances\n   of
    the abstract representation are encoded as a concrete series of\n   bits.\n   In
    order to provide a means for the preservation of end-to-end\n   features (especially
    security) to pass through presence\n   interoperability gateways, this specification
    also provides\n   recommendations for presence document formats that could be
    employed\n   by presence protocols.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"REQUIRED\",\n
    \  \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\n
    \  RECOMMENDED\", \"MAY\", and \"OPTIONAL\" are to be interpreted as\n   described
    in BCP 14, RFC 2119 [1] and indicate requirement levels for\n   compliant implementations.\n
    \  This memos makes use of the vocabulary defined in RFC 2778 [5].\n   Terms such
    as CLOSED, INSTANT INBOX, PRESENCE, and OPEN are used in\n   the same meaning
    as defined therein.\n   The term 'gateway' used in this document denotes a network
    element\n   responsible for interworking between diverse presence protocols.\n
    \  Although the presence protocols themselves are diverse, under the\n   model
    in this document these protocols can carry a common payload\n   that is relayed
    by the gateway.  Whether these interworking\n   intermediaries should be called
    'gateways' or 'relays' is therefore\n   somewhat debatable; for the purposes of
    this document, they are\n   called 'CPP gateways'.\n   The term 'presence service'
    also derives from RFC 2778, but its\n   meaning changes slightly due to the existence
    of gateways in the CPP\n   model.  When a client sends an operation to a presence
    service, that\n   service might either be an endpoint or an intermediary such
    as a CPP\n   gateway - in fact, the client should not have to be aware which it
    is\n   addressing, as responses from either will appear the same.\n   This document
    defines operations and attributes of an abstract\n   presence protocol.  In order
    for a compliant protocol to interface\n   with a presence gateway, it must support
    all of the operations\n   described in this document (i.e., the presence protocol
    must have\n   some message or capability that provides the function described
    by\n   all given operations).  Similarly, the attributes defined for these\n   operations
    must correspond to information available in the presence\n   protocol in order
    for the protocol to interface with gateways defined\n   by this specification.
    \ Note that these attributes provide only the\n   minimum possible information
    that needs to be specified for\n   interoperability - the functions in a presence
    protocol that\n   correspond to the operations described in this document can
    contain\n   additional information that will not be mapped by CPP.\n"
  title: 2.  Terminology
- contents:
  - '3.  Abstract Presence Service

    '
  - contents:
    - "3.1.  Overview of the Presence Service\n   When an application wants to subscriber
      to the presence information\n   associated with a PRESENTITY (in order to receive
      periodic\n   notifications of presence information), it invokes the subscribe\n
      \  operation, e.g.,\n             +-------+                    +-------+\n             |
      \      |                    |       |\n             | appl. | -- subscribe ---->
      | pres. |\n             |       |                    | svc.  |\n             +-------+
      \                   +-------+\n   The subscribe operation has the following
      attributes: watcher,\n   target, duration, SubscriptID and TransID.  The 'watcher'
      and\n   'target' identify the WATCHER and PRESENTITY, respectively, using the\n
      \  identifiers described in Section 3.2.  The duration specifies the\n   maximum
      number of seconds that the SUBSCRIPTION should be active\n   (which may be zero,
      in which case this is a one-time request for\n   presence information).  The
      SubscriptID creates a reference to the\n   SUBSCRIPTION that is used when unsubscribing.
      \ The TransID is a\n   unique identifier used to correlate the subscribe operation
      with a\n   response operation.  Gateways should be capable of handling TransIDs\n
      \  and SubscriptIDs up to 40 bytes in length.\n   Upon receiving a subscribe
      operation, the service immediately\n   responds by invoking the response operation
      containing the same\n   TransID, e.g.,\n             +-------+                    +-------+\n
      \            |       |                    |       |\n             | appl. |
      <----- response -- | pres. |\n             |       |                    | svc.
      \ |\n             +-------+                    +-------+\n   The response operation
      has the following attributes: status, TransID,\n   and duration.  'status' indicates
      whether the subscribe operation has\n   succeeded or failed.  The TransID of
      the response operation\n   corresponds to the TransID of the subscription operation
      to which it\n   is responding.  The 'duration' attribute specifies the number
      of\n   seconds for which the subscription will be active (which may differ\n
      \  from the value requested in the subscribe operation).\n   If the response
      operation indicates success, the service immediately\n   invokes the notify
      operation to communicate the presence information\n   to the WATCHER, e.g.,\n
      \            +-------+                    +-------+\n             |       |
      \                   |       |\n             | appl. | <------- notify -- | pres.
      |\n             |       |                    | svc.  |\n             +-------+
      \                   +-------+\n   The notify operation has the following attributes:
      watcher, target,\n   and TransID.  The values of 'watcher' and 'target' are
      identical to\n   those given in the subscribe operation that triggered this
      notify\n   operation.  The TransID is a unique identifier for this notification.\n
      \  The notify operation also has content, namely PRESENCE INFORMATION.\n   Content
      details are specified in Section 3.3.\n   If the duration parameter is non-zero,
      then for up to the specified\n   duration, the service invokes the notify operation
      whenever there are\n   any changes to the PRESENTITY's presence information.
      \ Otherwise,\n   exactly one notify operation is invoked, achieving a one-time
      poll of\n   the presence information.  Regardless, there is no application\n
      \  response to the notify operation (i.e., the application does not\n   invoke
      a response operation when a notify operation occurs) defined\n   in CPP.\n   The
      application may prematurely cancel a subscription by re-invoking\n   the subscribe
      operation (as described above) with a duration of 0 and\n   the same SubscriptID
      as the original subscribe operation , e.g.,\n             +-------+                    +-------+\n
      \            |       |                    |       |\n             | appl. |
      -- subscribe 0 --> | pres. |\n             |       |                    | svc.
      \ |\n             +-------+                    +-------+\n   Note that a notify
      operation will be invoked when a subscription is\n   prematurely canceled in
      this fashion; this notification may be\n   discarded by the watcher.\n   The
      service immediately responds by invoking the response operation\n   containing
      the same TransID; e.g.,\n             +-------+                    +-------+\n
      \            |       |                    |       |\n             | appl. |
      <----- response -- | pres. |\n             |       |                    | svc.
      \ |\n             +-------+                    +-------+\n   Note that this
      specification assumes that CPP-compliant presence\n   protocols provide reliable
      message delivery; there are no\n   application-layer message delivery assurance
      provisions in this\n   specification.\n"
    title: 3.1.  Overview of the Presence Service
  - contents:
    - "3.2.  Identification of PRESENTITIES and WATCHERS\n   A PRESENTITY is specified
      using the PRES URI scheme, which is further\n   described in Appendix A.  An
      example would be:\n   \"pres:fred@example.com\"\n   WATCHERs identify themselves
      in the same manner as PRESENTITIES; that\n   is, with a pres URI.\n"
    - contents:
      - "3.2.1.  Address Resolution\n   A presence service client determines the next
        hop to forward an\n   operation to by resolving the domain name portion of
        the service\n   destination.  Compliant implementations SHOULD follow the
        guidelines\n   for dereferencing URIs given in [2].\n"
      title: 3.2.1.  Address Resolution
    title: 3.2.  Identification of PRESENTITIES and WATCHERS
  - contents:
    - "3.3.  Format of Presence Information\n   This specification defines an abstract
      interoperability mechanism for\n   presence protocols; the message content definition
      given here\n   pertains to semantics rather than syntax.  However, some important\n
      \  properties for interoperability can only be provided if a common\n   end-to-end
      format for presence is employed by the interoperating\n   presence protocols,
      especially with respect to security.  In order to\n   maintain end-to-end security
      properties, applications that send\n   notification operations through a CPP
      gateway MUST support the format\n   defined in PIDF [4].  Applications MAY support
      other content formats.\n   CPP gateways MUST be capable of relaying the body
      of a notification\n   operation between supported presence protocols without
      needing to\n   modify or inspect the content.\n"
    title: 3.3.  Format of Presence Information
  - contents:
    - "3.4.  The Presence Service\n   An implementation of the service must maintain
      information about both\n   presence information and continual operations (like
      periodic\n   notification) in persistent storage.\n   Note that the subscription-identifier
      attribute used by the subscribe\n   operation is potentially long-lived.  Accordingly,
      the values\n   generated for this parameter should be unique across a significant\n
      \  duration of time.  The SubscriptID parameter should be intrinsically\n   globally
      unique over time, not merely unique among operations sent to\n   or from a particular
      WATCHER and PRESENTITY.\n"
    - contents:
      - "3.4.1.  The Subscribe Operation\n   When an application wants to subscribe
        to the presence information\n   associated with a PRESENTITY, it invokes the
        subscribe operation.\n   When the service is informed of the subscribe operation,
        it performs\n   these steps:\n   1.  If the watcher or target parameter does
        not refer to a valid\n       PRESENTITY, a response operation having status
        \"failure\" is\n       invoked.\n   2.  If access control does not permit
        the application to request this\n       operation, a response operation having
        status \"failure\" is\n       invoked.\n   3.  If the duration parameter is
        non-zero, and if the watcher and\n       target parameters refer to an in-progress
        subscribe operation for\n       the application, a response operation having
        status \"failure\" is\n       invoked.\n   4.  Otherwise, if the service is
        able to successfully deliver the\n       message:\n         A response operation
        having status \"success\" is immediately\n         invoked.  (If the service
        chooses a different duration for the\n         subscription then it conveys
        this information in the response\n         operation.)\n         A notify
        operation, corresponding to the target's presence\n         information, is
        immediately invoked for the watcher.\n         For up to the amount of time
        indicated by the duration\n         parameter of the notify operation (measured
        from the time that\n         the subscribe operation was received), if the
        target's presence\n         information changes, and if access control allows,
        a notify\n         operation is invoked for the watcher.\n   Note that if
        the duration parameter is zero-valued, then the\n   subscribe operation is
        making a one-time poll of the presence\n   information.  Accordingly, the
        final step above (continued\n   notifications for the duration of the subscription)
        does not occur.\n   When the service invokes a response operation as a result
        of this\n   processing, the transID parameter is identical to the value found
        in\n   the subscribe operation invoked by the application.\n"
      title: 3.4.1.  The Subscribe Operation
    - contents:
      - "3.4.2.  The Notify Operation\n   The service invokes the notify operation
        whenever the presence\n   information associated with a PRESENTITY changes
        and there are\n   subscribers requesting notifications for that PRESENTITY.\n
        \  There is no application response to the notify operation.\n"
      title: 3.4.2.  The Notify Operation
    - contents:
      - "3.4.3.  Subscribe Operation (with Zero Duration)\n   When an application
        wants to terminate a subscription, it issues a\n   SUBSCRIBE 0 with the SubscriptID
        of an existing subscription.  Note\n   that a notify operation will be invoked
        by the presentity when a\n   subscription is canceled in this fashion; this
        notification can be\n   discarded by the watcher.  There is no independent
        UNSUBSCRIBE\n   operation.\n   When an application wants to directly request
        presence information to\n   be supplied immediately without initiating any
        persistent\n   subscription, it issues a SUBSCRIBE 0 with a new SubscriptID.
        \ There\n   is no independent FETCH operation.\n"
      title: 3.4.3.  Subscribe Operation (with Zero Duration)
    title: 3.4.  The Presence Service
  title: 3.  Abstract Presence Service
- contents:
  - "4.  Security Considerations\n   Detailed security considerations for presence
    protocols given in RFC\n   2779 [6] (in particular, requirements are given in
    sections 5.1\n   through 5.3 with some motivating discussion in 8.2).\n   CPP
    defines an interoperability function that is employed by gateways\n   between
    presence protocols.  CPP gateways MUST be compliant with the\n   minimum security
    requirements of the presence protocols with which\n   they interface.\n   The
    introduction of gateways to the security model of presence in RFC\n   2779 also
    introduces some new risks.  End-to-end security properties\n   (especially confidentiality
    and integrity) between presentities and\n   watchers that interface through a
    CPP gateway can only be provided if\n   a common presence format (such as the
    format described in [4]) is\n   supported by the protocols interfacing with the
    CPP gateway.\n   When end-to-end security is required, the notify operation MUST
    use\n   PIDF, and MUST secure the PIDF MIME body with S/MIME [8], with\n   encryption
    (CMS EnvelopeData) and/or S/MIME signatures (CMS\n   SignedData).\n   The S/MIME
    algorithms are set by CMS [9].  The AES [11] algorithm\n   should be preferred,
    as it is expected that AES best suits the\n   capabilities of many platforms.
    \ Implementations MAY use AES as an\n   encryption algorithm, but are REQUIRED
    to support only the baseline\n   algorithms mandated by S/MIME and CMS.\n   When
    PRES URIs are used in presence protocols, they convey the\n   identity of watchers
    and/or presentities.  Certificates that are used\n   for S/MIME presence operations
    SHOULD, for the purposes of reference\n   integrity, contain a subjectAltName
    field containing the PRES URI of\n   their subject.  Note that such certificates
    may also contain other\n   identifiers, including those specific to particular
    presence\n   protocols.  In order to further facilitate interoperability of secure\n
    \  presence services through CPP gateways, users and service providers\n   are
    encouraged to employ trust anchors for certificates that are\n   widely accepted
    rather than trust anchors specific to any particular\n   presence service or provider.\n
    \  In some cases, anonymous presence services may be desired.  Such a\n   capability
    is beyond the scope of this specification.\n"
  title: 4.  Security Considerations
- contents:
  - "5.  IANA Considerations\n   The IANA has assigned the \"pres\" URI scheme.\n"
  - contents:
    - "5.1.  The PRES URI Scheme\n   The Presence (PRES) URI scheme designates an
      Internet resource,\n   namely a PRESENTITY or WATCHER.\n   The syntax of a PRES
      URI is given in Appendix A.\n"
    title: 5.1.  The PRES URI Scheme
  title: 5.  IANA Considerations
- contents:
  - "6.  Contributors\n   Dave Crocker edited earlier versions of this document.\n
    \  The following individuals made substantial textual contributions to\n   this
    document:\n      Athanassios Diacakis (thanos.diacakis@openwave.com)\n      Florencio
    Mazzoldi (flo@networkprojects.com)\n      Christian Huitema (huitema@microsoft.com)\n
    \     Graham Klyne (gk@ninebynine.org)\n      Jonathan Rosenberg (jdrosen@dynamicsoft.com)\n
    \     Robert Sparks (rsparks@dynamicsoft.com)\n      Hiroyasu Sugano (suga@flab.fujitsu.co.jp)\n"
  title: 6.  Contributors
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs
      to indicate requirement\n        levels\", BCP 14, RFC 2119, March 1997.\n   [2]
      \ Peterson, J., \"Address Resolution for Instant Messaging and\n        Presence\",
      RFC 3861, August 2004.\n   [3]  Resnick, P., \"Internet Message Format\", STD
      11, RFC 2822, April\n        2001.\n   [4]  Sugano, H., Fujimoto, S., Klyne,
      G., Bateman, A., Carr, W., and\n        J. Peterson, \"Presence Information
      Data Format (PIDF)\", RFC\n        3863, August 2004.\n   [5]  Day, M., Rosenberg,
      J., and H. Sugano, \"A Model for Presence and\n        Instant Messaging\",
      RFC 2778, February 2000.\n   [6]  Day, M., Aggarwal, S., and J. Vincent, \"Instant
      Messaging /\n        Presence Protocol Requirements\", RFC 2779, February 2000.\n
      \  [7]  Allocchio, C., \"GSTN Address Element Extensions in Email\n        Services\",
      RFC 2846, June 2000.\n   [8]  Ramsdell, B., \"Secure/Multipurpose Internet Mail
      Extensions\n        (S/MIME) Version 3.1 Message Specification\", RFC 3851,
      July\n        2004.\n   [9]  Housley, R., \"Cryptographic Message Syntax (CMS)\",
      RFC 3852,\n        July 2004.\n   [10] Berners-Lee, T., Fielding, R., and L.
      Masinter, \"Uniform\n        Resource Identifiers (URI): Generic Syntax\", RFC
      2396, August\n        1998.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [11] Schaad, J., \"Use of the Advanced Encryption
      Standard (AES)\n        Encryption Algorithm and in Cryptographic Message Syntax
      (CMS)\",\n        RFC 3565, July 2003.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Appendix A.  PRES URI IANA Registration Template\n   This section provides the
    information to register the pres: presence\n   URI .\n"
  - contents:
    - "A.1.  URI Scheme Name\n   pres\n"
    title: A.1.  URI Scheme Name
  - contents:
    - "A.2.  URI Scheme Syntax\n   The syntax follows the existing mailto: URI syntax
      specified in RFC\n   2368.  The ABNF is:\n   PRES-URI         = \"pres:\" [
      to ] [ headers ]\n   to             =  mailbox\n   headers        =  \"?\" header
      *( \"&\" header )\n   header         =  hname \"=\" hvalue\n   hname          =
      \ *uric\n   hvalue         =  *uric\n   Here the symbol \"mailbox\" represents
      an encoded mailbox name as\n   defined in RFC 2822 [3], and the symbol \"uric\"
      denotes any character\n   that is valid in a URL (defined in RFC 2396 [10]).\n"
    title: A.2.  URI Scheme Syntax
  - contents:
    - "A.3.  Character Encoding Considerations\n   Representation of non-ASCII character
      sets in local-part strings is\n   limited to the standard methods provided as
      extensions to RFC 2822\n   [3].\n"
    title: A.3.  Character Encoding Considerations
  - contents:
    - "A.4.  Intended Usage\n   Use of the pres: URI follows closely usage of the
      mailto: URI.  That\n   is, invocation of an PRES URI will cause the user's instant
      messaging\n   application to start, with destination address and message headers\n
      \  fill-in according to the information supplied in the URI.\n"
    title: A.4.  Intended Usage
  - contents:
    - "A.5.  Applications and/or Protocols which use this URI Scheme Name\n   It is
      anticipated that protocols compliant with RFC 2779, and meeting\n   the interoperability
      requirements specified here, will make use of\n   this URI scheme name.\n"
    title: A.5.  Applications and/or Protocols which use this URI Scheme Name
  - contents:
    - "A.6.  Interoperability Considerations\n   The underlying exchange protocol
      used to send an instant message may\n   vary from service to service.  Therefore
      complete, Internet-scale\n   interoperability cannot be guaranteed.  However,
      a service conforming\n   to this specification permits gateways to achieve interoperability\n
      \  sufficient to the requirements of RFC 2779.\n"
    title: A.6.  Interoperability Considerations
  - contents:
    - "A.7.  Security Considerations\n   See Section 4.\n"
    title: A.7.  Security Considerations
  - contents:
    - "A.8.  Relevant Publications\n   RFC 2779, RFC 2778\n"
    title: A.8.  Relevant Publications
  - contents:
    - "A.9.  Person & Email Address to Contact for Further Information\n   Jon Peterson
      [mailto:jon.peterson@neustar.biz]\n"
    title: A.9.  Person & Email Address to Contact for Further Information
  - contents:
    - "A.10.  Author/Change Controller\n   This scheme is registered under the IETF
      tree.  As such, IETF\n   maintains change control.\n"
    title: A.10.  Author/Change Controller
  - contents:
    - "A.11.  Applications and/or Protocols which use this URI Scheme Name\n   Instant
      messaging service; presence service\n"
    title: A.11.  Applications and/or Protocols which use this URI Scheme Name
  title: Appendix A.  PRES URI IANA Registration Template
- contents:
  - "Appendix B.  Issues of Interest\n   This appendix briefly discusses issues that
    may be of interest when\n   designing an interoperation gateway.\n"
  - contents:
    - "B.1.  Address Mapping\n   When mapping the service described in this memo,
      mappings that place\n   special information into the im: address local-part
      MUST use the\n   meta-syntax defined in RFC2846 [7].\n"
    title: B.1.  Address Mapping
  - contents:
    - "B.2.  Source-Route Mapping\n   The easiest mapping technique is a form of source-routing
      and usually\n   is the least friendly to humans having to type the string.  Source-\n
      \  routing also has a history of operational problems.\n   Use of source-routing
      for exchanges between different services is by\n   a transformation that places
      the entire, original address string into\n   the im: address local part and
      names the gateway in the domain part.\n   For example, if the destination INSTANT
      INBOX is \"pepp://example.com/\n   fred\", then, after performing the necessary
      character conversions,\n   the resulting mapping is:\n             im:pepp=example.com/fred@relay-domain\n
      \  where \"relay-domain\" is derived from local configuration information.\n
      \  Experience shows that it is vastly preferable to hide this mapping\n   from
      end-users - if possible, the underlying software should perform\n   the mapping
      automatically.\n"
    title: B.2.  Source-Route Mapping
  title: Appendix B.  Issues of Interest
- contents:
  - "Appendix C.  Acknowledgments\n   The author would like to acknowledge John Ramsdell
    for his comments,\n   suggestions and enthusiasm.  Thanks to Derek Atkins for
    editorial\n   fixes.\n"
  title: Appendix C.  Acknowledgments
- contents:
  - "Author's Address\n   Jon Peterson\n   NeuStar, Inc.\n   1800 Sutter St\n   Suite
    570\n   Concord, CA  94520\n   US\n   Phone: +1 925/363-8720\n   EMail: jon.peterson@neustar.biz\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This
    document is subject\n   to the rights, licenses and restrictions contained in
    BCP 78, and\n   except as set forth therein, the authors retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
