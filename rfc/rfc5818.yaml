- contents:
  - "              Data Channel Status Confirmation Extensions\n                    for
    the Link Management Protocol\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines simple additions to the Link Management\n
    \  Protocol (LMP) to provide a control plane tool that can assist in the\n   location
    of stranded resources by allowing adjacent Label-Switching\n   Routers (LSRs)
    to confirm data channel statuses and provide triggers\n   for notifying the management
    plane if any discrepancies are found.\n   As LMP is already used to verify data
    plane connectivity, it is\n   considered to be an appropriate candidate to support
    this feature.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5818.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Specification of Requirements ...................................4\n   3.
    Problem Explanation .............................................4\n      3.1.
    Mismatch Caused by Manual Configuration ....................4\n      3.2. Mismatch
    Caused by LSP Deletion ............................5\n      3.3. Failed Resources
    ...........................................6\n   4. Motivation ......................................................6\n
    \  5. Extensions to LMP ...............................................7\n      5.1.
    Confirm Data Channel Status Messages .......................7\n           5.1.1.
    ConfirmDataChannelStatus Messages ...................8\n           5.1.2. ConfirmDataChannelStatusAck
    Messages ................8\n           5.1.3. ConfirmDataChannelStatusNack Messages
    ...............8\n      5.2. Data Channel Status Subobject ..............................9\n
    \     5.3. Message Construction ......................................10\n      5.4.
    Backward Compatibility ....................................10\n   6. Procedures
    .....................................................11\n   7. Security Considerations
    ........................................12\n   8. IANA Considerations ............................................12\n
    \     8.1. LMP Message Types .........................................12\n      8.2.
    LMP Data Link Object Subobject ............................13\n      8.3. LMP
    Error_Code Class Type .................................13\n   9. Acknowledgments
    ................................................13\n   10. References ....................................................13\n
    \     10.1. Normative References .....................................13\n      10.2.
    Informative References ...................................14\n   Contributor's
    Address .............................................14\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Generalized Multiprotocol Label Switching (GMPLS) networks
    are\n   constructed from Traffic Engineering (TE) links connecting Label\n   Switching
    Routers (LSRs).  The TE links are constructed from a set of\n   data channels.
    \ In this context, a data channel corresponds to a\n   resource label in a non-packet
    technology (such as a timeslot or a\n   lambda).\n   A data channel status mismatch
    exists if the LSR at one end of a TE\n   link believes that the data channel is
    assigned to carry data, but\n   the LSR at the other end does not.  The term \"ready
    to carry data\"\n   means cross-connected or bound to an end-point for the receipt
    or\n   delivery of data.\n   Data channel mismatches cannot be detected from the
    TE information\n   advertised by the routing protocols [RFC4203], [RFC5307].  The\n
    \  existence of some data channel mismatch problems may be detected by a\n   mismatch
    in the advertised bandwidths where bidirectional TE links\n   and bidirectional
    services are in use.  However, where unidirectional\n   services exist, or where
    multiple data channel mismatches occur, it\n   is not possible to detect such
    errors through the routing protocol-\n   advertised TE information.  In any case,
    there is no mechanism to\n   isolate the mismatches by determining which data
    channels are at\n   fault.\n   If a data channel mismatch exists, any attempt
    to use the data\n   channel for a new Label Switched Path (LSP) will fail.  One
    end of\n   the TE link may attempt to assign the TE link for use, but the other\n
    \  end will report the data channel as unavailable when the control\n   plane
    or management plane attempts to assign it to an LSP.\n   Although such a situation
    can be resolved through the use of the\n   Acceptable Label Set object in GMPLS
    signaling [RFC3473], such a\n   procedure is inefficient since it may require
    an additional signaling\n   exchange for each LSP that is set up.  When many LSPs
    are to be set\n   up, and when there are many data channel mismatches, such\n
    \  inefficiencies become significant.  It is desirable to avoid the\n   additional
    signaling overhead, and to report the problems to the\n   management plane so
    that they can be resolved to improve the\n   efficiency of LSP setup.\n   Correspondingly,
    such a mismatch situation may give rise to\n   misconnections in the data plane,
    especially when LSPs are set up\n   using management plane operations.\n   Resources
    (data channels) that are in a mismatched state are often\n   described as \"stranded
    resources\".  They are not in use for any LSP,\n   but they cannot be assigned
    for use by a new LSP because they appear\n   to be in use.  Although it is theoretically
    possible for management\n   plane applications to audit all network resources
    to locate stranded\n   resources and to release them, this process is rarely performed\n
    \  because of the difficulty of coordinating different Element\n   Management
    Systems (EMSs) and the associated risks of accidentally\n   releasing in-use resources.
    \ It is desirable to have a control plane\n   mechanism that detects and reports
    stranded resources.\n   This document defines simple additions to the Link Management\n
    \  Protocol (LMP) [RFC4204] to provide a control plane tool that can\n   assist
    in the location of stranded resources by allowing adjacent\n   LSRs to confirm
    data channel statuses and provide triggers for\n   notifying the management plane
    if any discrepancies are found.  As\n   LMP is already used to verify data plane
    connectivity, it is\n   considered to be an appropriate candidate to support this
    feature.\n"
  title: 1.  Introduction
- contents:
  - "2.  Specification of Requirements\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Specification of Requirements
- contents:
  - "3.  Problem Explanation\n   Examples of data channel mismatches are described
    in the following\n   three scenarios.\n   In all of the scenarios, the specific
    channel resource of a data link\n   will be unavailable because of the data channel
    status mismatch, and\n   this channel resource will be wasted.  Furthermore, a
    data channel\n   status mismatch may reduce the possibility of successful LSP\n
    \  establishment, because a data channel status mismatch may result in\n   failure
    when establishing an LSP.\n   So it is desirable to confirm the data channel statuses
    as early as\n   possible.\n"
  - contents:
    - "3.1.  Mismatch Caused by Manual Configuration\n   The operator may have configured
      a cross-connect at only one end of a\n   TE link using an EMS.  The resource
      at one end of the data channel is\n   allocated, but the corresponding resource
      is still available at the\n   other end of the same data channel.  In this case,
      the data channel\n   may appear to be available for use by the control plane
      when viewed\n   from one end of the TE link but, will be considered to be unavailable\n
      \  by the other end of the TE link.  Alternatively, the available end of\n   the
      data channel may be cross-connected by the management plane, and\n   a misconnection
      may result from the fact that the other end of the\n   data channel is already
      cross-connected.\n   Figure 1 shows a data channel between nodes A and B.  The
      resource at\n   A's end of the TE link is allocated through manual configuration,\n
      \  while the resource at B's end of the TE link is available, so the\n   data
      channel status is mismatched.\n                       allocated      available\n
      \                         +-+------------+-+\n                       A  |x|
      \           | |  B\n                          +-+------------+-+\n                             data
      channel\n            Figure 1.  Mismatch Caused by Manual Configuration\n"
    title: 3.1.  Mismatch Caused by Manual Configuration
  - contents:
    - "3.2.  Mismatch Caused by LSP Deletion\n   The channel status of a data link
      may become mismatched during the\n   LSP deletion process.  If the LSP deletion
      process is aborted in the\n   middle of the process (perhaps because of a temporary
      control plane\n   failure), the cross-connect at the upstream node may be removed
      while\n   the downstream node still keeps its cross-connect, if the LSP\n   deletion
      was initiated by the source node.\n   For example, in Figure 2, an LSP traverses
      nodes A, B, and C.  Node B\n   resets abnormally when the LSP is being deleted.
      \ This results in the\n   cross-connects of nodes A and C being removed, but
      the cross-connect\n   of node B still being in use.  So, the data channel statuses
      between\n   nodes A and B, and between nodes B and C are both mismatched.\n
      \                         <---------LSP--------->\n                          +-+-------+-+-------+-+\n
      \                         | |       |X|       | |\n                          +-+-------+-+-------+-+\n
      \                          A         B         C\n                Figure 2.
      \ Mismatch Caused by LSP Deletion\n   In [RFC2205] and [RFC3209], a \"soft state\"
      mechanism was defined to\n   prevent state discrepancies between LSRs.  Resource
      ReSerVation\n   Protocol-Traffic Engineering (RSVP-TE) restart processes ([RFC3473],\n
      \  [RFC5063]) have been defined: adjacent LSRs may resynchronize their\n   control
      plane state to reinstate information about LSPs that have\n   persisted in the
      data plane.  Both mechanisms aim at keeping state\n   consistency among nodes
      and allow LSRs to detect mismatched data\n   plane states.  The data plane handling
      of such mismatched states can\n   be treated as a local policy decision.  Some
      deployments may decide\n   to automatically clean up the data plane state so
      it matches the\n   control plane state, but others may choose to raise an alert
      to the\n   management plane and leave the data plane untouched just in case
      it\n   is in use.\n   In such cases, data channel mismatches may arise after
      restart and\n   might not be cleared up by the restart procedures.\n"
    title: 3.2.  Mismatch Caused by LSP Deletion
  - contents:
    - "3.3.  Failed Resources\n   Even if the situation is not common, it might happen
      that a\n   termination point of a TE link is seen as failed by one end, while
      on\n   the other end it is seen as OK.  This problem may arise due to some\n
      \  failure either in the hardware or in the status detection of the\n   termination
      point.\n   This mismatch in the termination point status can lead to failure
      in\n   the case of bidirectional LSP setup.\n                         Good           Failed\n
      \                         +-+------------+-+\n                       A  | |
      \           |X|  B\n                          +-+------------+-+\n                             data
      channel\n                  Path Message with Upstream Label---->\n              Figure
      3.  Mismatch Caused by Resource Failure\n   In this case, the upstream node
      chooses to use termination point A in\n   order to receive traffic from the
      downstream node.  From the upstream\n   node's point of view, the resource is
      available and thus usable;\n   however, in the downstream node, the corresponding
      termination point\n   (resource B) is broken.  This leads to a setup failure.\n"
    title: 3.3.  Failed Resources
  title: 3.  Problem Explanation
- contents:
  - "4.  Motivation\n   The requirement does not come from a lack in GMPLS specifications\n
    \  themselves but rather from operational concerns because, in most\n   cases,
    GMPLS-controlled networks will co-exist with legacy networks\n   and legacy procedures.\n
    \  The protocol extensions defined in this document are intended to\n   detect
    data plane problems resulting from misuse or misconfigurations\n   triggered by
    user error, or resulting from failure to clean up the\n   data plane after control
    plane disconnection.  It is anticipated that\n   human mistakes are probably the
    major source of errors to deal with.\n   This document is not intened to provide
    a protocol mechanism to deal\n   with broken implementations.\n   The procedures
    defined in this document are designed to be performed\n   on a periodic or on-demand
    basis.  It is NOT RECOMMENDED that the\n   procedures be used to provide a continuous
    and on-line monitoring\n   process.\n   As LMP is already used to verify data
    plane connectivity, it is\n   considered to be an appropriate candidate to support
    this feature.\n"
  title: 4.  Motivation
- contents:
  - "5.  Extensions to LMP\n   A control plane tool to detect and isolate data channel
    mismatches is\n   provided in this document by simple additions to the Link Management\n
    \  Protocol (LMP) [RFC4204].  It can assist in the location of stranded\n   resources
    by allowing adjacent LSRs to confirm data channel statuses.\n   Outline procedures
    are described in this section.  More detailed\n   procedures are found in Section
    6.\n   The message formats in the subsections that follow use Backus-Naur\n   Form
    (BNF) encoding as defined in [RFC5511].\n"
  - contents:
    - "5.1.  Confirm Data Channel Status Messages\n   Extensions to LMP to confirm
      a data channel status are described\n   below.  In order to confirm a data channel
      status, the new LMP\n   messages are sent between adjacent nodes periodically
      or driven by\n   some event (such as an operator command, a configurable timer,
      or the\n   rejection of an LSP setup message because of an unavailable\n   resource).
      \ The new LMP messages run over the control channel,\n   encapsulated in UDP
      with an LMP port number and IP addressing as\n   defined in \"Link Management
      Protocol (LMP)\" [RFC4204].\n   Three new messages are defined to check data
      channel status:\n   ConfirmDataChannelStatus, ConfirmDataChannelStatusAck, and\n
      \  ConfirmDataChannelStatusNack.  These messages are described in detail\n   in
      the following subsections.  Message Type numbers are found in\n   Section 8.1.\n"
    - contents:
      - "5.1.1.  ConfirmDataChannelStatus Messages\n   The ConfirmDataChannelStatus
        message is used to provide the remote\n   end of the data channel with the
        status of the local end of the data\n   channel and to ask the remote end
        to report its data channel.  The\n   message may report on (and request information
        about) more than one\n   data channel.\n    <ConfirmDataChannelStatus Message>
        ::= <Common Header>\n                                           <LOCAL_LINK_ID>\n
        \                                          <MESSAGE_ID>\n                                           <DATA_LINK>[<DATA_LINK>...]\n
        \  When a node receives the ConfirmDataChannelStatus message, and the\n   data
        channel status confirmation procedure is supported at the node,\n   the node
        compares its own data channel statuses with all of the data\n   channel statuses
        sent by the remote end in the\n   ConfirmDataChannelStatus message.  If a
        data channel status mismatch\n   is found, this mismatch result is expected
        to be reported to the\n   management plane for further action.  Management
        plane reporting\n   procedures and actions are outside the scope of this document.\n
        \  If the message is a Confirm Data Channel Status message, and the\n   MESSAGE_ID
        value is less than the largest MESSAGE_ID value previously\n   received from
        the sender for the specified TE link, then the message\n   SHOULD be treated
        as being out-of-order.\n"
      title: 5.1.1.  ConfirmDataChannelStatus Messages
    - contents:
      - "5.1.2.  ConfirmDataChannelStatusAck Messages\n   The ConfirmDataChannelStatusAck
        message is sent back to the node that\n   originated the ConfirmDataChannelStatus
        message to return the\n   requested data channel statuses.\n   When the ConfirmDataChannelStatusAck
        message is received, the node\n   compares the received data channel statuses
        at the remote end with\n   those at the local end (the same operation as performed
        by the\n   receiver of the ConfirmDataChannelStatus message).  If a data channel\n
        \  status mismatch is found, the mismatch result is expected to be\n   reported
        to the management plane for further action.\n   <ConfirmDataChannelStatusAck
        Message> ::= <Common Header>\n                                             <MESSAGE_ID_ACK>\n
        \                                            <DATA_LINK>[<DATA_LINK>...]\n
        \  The contents of the MESSAGE_ID_ACK objects MUST be obtained from the\n
        \  ConfirmDataChannelStatus message being acknowledged.\n   Note that the
        ConfirmDataChannelStatusAck message is used both when\n   the data channel
        statuses match and when they do not match.\n"
      title: 5.1.2.  ConfirmDataChannelStatusAck Messages
    - contents:
      - "5.1.3.  ConfirmDataChannelStatusNack Messages\n   When a node receives the
        ConfirmDataChannelStatus message, if the\n   data channel status confirmation
        procedure is not supported but the\n   message is recognized, a ConfirmDataChannelStatusNack
        message\n   containing an ERROR_CODE indicating \"Channel Status Confirmation\n
        \  Procedure not supported\" MUST be sent.\n   If the data channel status
        confirmation procedure is supported, but\n   the node is unable to begin the
        procedure, a\n   ConfirmDataChannelStatusNack message containing an ERROR_CODE\n
        \  indicating \"Unwilling to Confirm\" MUST be sent.  If a\n   ConfirmDataChannelStatusNack
        message is received with such an\n   ERROR_CODE, the node that originated
        the ConfirmDataChannelStatus\n   message MAY schedule the ConfirmDataChannelStatus
        message\n   retransmission after a configured time.  A default value of\n
        \  10 minutes is suggested for this timer.\n     <ConfirmDataChannelStatusNack
        Message> ::= <Common Header>\n                                                [<LOCAL_LINK_ID>]\n
        \                                               <MESSAGE_ID_ACK>\n                                                <ERROR_CODE>\n
        \  The contents of the MESSAGE_ID_ACK objects MUST be obtained from the\n
        \  ConfirmDataChannelStatus message being rejected.\n   The ERROR_CODE object
        in this message has a new Class Type (see\n   Section 8.3), but is formed
        as the ERROR_CODE object defined in\n   [RFC4204].  The following Error Codes
        are defined:\n     0x01 = Channel Status Confirmation Procedure not supported\n
        \    0x02 = Unwilling to Confirm\n"
      title: 5.1.3.  ConfirmDataChannelStatusNack Messages
    title: 5.1.  Confirm Data Channel Status Messages
  - contents:
    - "5.2.  Data Channel Status Subobject\n   A new Data Channel Status subobject
      type is introduced to the DATA\n   LINK object to hold the Data Channel Status
      and Data Channel ID.\n   See Section 8.2 for the Subobject Type value.\n      0
      \                  1                   2                   3\n      0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |    Type       |    Length     |     Data Channel Status       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                                                               |\n     //
      \                     Data Channel ID                        //\n     |                                                               |\n
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Data
      Channel Status:\n   This is a series of bit flags to indicate the status of
      the data\n   channel.  The following values are defined.\n      0x0000 : The
      channel is available/free.\n      0x0001 : The channel is unavailable/in-use.\n
      \  Data Channel ID\n   This identifies the data channel.  The length of this
      field can be\n   deduced from the Length field in the subobject.  Note that
      all\n   subobjects must be padded to a four-byte boundary with trailing\n   zeros.\n
      \  If such padding is required, the Length field MUST indicate the\n   length
      of the subobject up to, but not including, the first byte of\n   padding.  Thus,
      the amount of padding is deduced and not represented\n   in the Length field.\n
      \  Note that the Data Channel ID is given in the context of the sender\n   of
      the ConfirmChannelStatus message.\n   The Data Channel ID must be encoded as
      a label value.  Based on the\n   type of signal (e.g., Synchronous Optical Network/Synchronous
      Digital\n      Hierarchy (SONET/SDH), Lambda, etc.), the encoding methodology\n
      \  used will be different.  For SONET/SDH, the label value is encoded as\n   per
      [RFC4606].\n"
    title: 5.2.  Data Channel Status Subobject
  - contents:
    - "5.3.  Message Construction\n   Data_Link Class (as defined in Section 13.12
      of [RFC4204]) is\n   included in ConfirmDataChannelStatus and ConfirmDataChannelStatusAck\n
      \  messages.\n   The status of the TE link end MUST be carried by the Data Channel\n
      \  Status subobject, which is defined in Section 5.2 of this document.\n   The
      new subobject MUST be part of Data_Link Class.\n   In the case of SONET/SDH,
      the Data Channel ID in the new subobject\n   SHOULD be used to identify each
      timeslot of the data link.\n"
    title: 5.3.  Message Construction
  - contents:
    - "5.4.  Backward Compatibility\n   Some nodes running in the network might only
      support the LMP Message\n   Types, which are already defined in [RFC4204].  The
      three new types\n   of LMP messages defined in this document cannot be recognized
      by\n   these nodes.  The behavior of an LMP node that receives an unknown\n
      \  message is not specified in [RFC4204] and will be clarified in a\n   separate
      document.\n   Since the behavior of legacy nodes must be assumed to be unknown,\n
      \  this document assumes that a deployment intended to support the\n   function
      described in this document will consist completely of nodes\n   that support
      the protocol extensions also described in this document.\n   In the future,
      it may be the case that LMP will be extended to allow\n   function support to
      be detected.  In that case, it may become\n   possible to deploy this function
      in a mixed environment.\n"
    title: 5.4.  Backward Compatibility
  title: 5.  Extensions to LMP
- contents:
  - "6.  Procedures\n   Adjacent nodes MAY send data channel status confirmation-related
    LMP\n   messages.  Periodical timers or some other events requesting the\n   confirmation
    of channel status for the data link may trigger these\n   messages.  It's a local
    policy decision to start the data channel\n   status confirmation process.  The
    procedure is described below:\n   .  Initially, the SENDER constructs a ConfirmDataChannelStatus\n
    \     message that MUST contain one or more DATA_LINK objects.  The\n      DATA_LINK
    object is defined in [RFC4204].  Each DATA_LINK object\n      MUST contain one
    or more Data Channel Status subobjects.  The Data\n      Channel ID field in the
    Data Channel Status subobject MUST\n      indicate which data channel needs to
    be confirmed, and MUST report\n      the data channel status at the SENDER.  The\n
    \     ConfirmDataChannelStatus message is sent to the RECEIVER.\n   .  Upon receipt
    of a ConfirmDataChannelStatus message, the RECEIVER\n      MUST extract the data
    channel statuses from the\n      ConfirmDataChannelStatus message and SHOULD compare
    these with its\n      data channel statuses for the reported data channels.  If
    a data\n      channel status mismatch is found, the mismatch result SHOULD be\n
    \     reported to the management plane for further action.  The RECEIVER\n      also
    SHOULD send the ConfirmDataChannelStatusAck message, which\n      MUST carry all
    the local end statuses of the requested data\n      channels to the SENDER.\n
    \  .  If the RECEIVER is not able to support or to begin the\n      confirmation
    procedure, the RECEIVER MUST send a\n      ConfirmDataChannelStatusNack message
    containing the ERROR_CODE\n      that indicates the reason for rejection.\n   .
    \ Upon receipt of a ConfirmDataChannelStatusAck message, the SENDER\n      MUST
    compare the received data channel statuses at the remote end\n      with the data
    channel statuses at the local end.  If a data\n      channel status mismatch is
    found, the mismatch result SHOULD be\n      reported to the management plane for
    further action.\n   The data channel status mismatch issue identified by LMP may
    be\n   automatically resolved by RSVP restart.  For example, the restarting\n
    \  node may also have damaged its data plane.  This leaves the data\n   channels
    mismatched.  However, RSVP restart will re-install the data\n   plane state in
    the restarting node.  The issue may also be resolved\n   via RSVP soft state timeout.\n
    \  If the ConfirmDataChannelStatus message is not recognized by the\n   RECEIVER,
    the RECEIVER ignores this message and will not send out an\n   acknowledgment
    message to the SENDER.\n   Due to the message loss problem, the SENDER may not
    be able to\n   receive the acknowledgment message.\n   ConfirmDataChannelStatus
    SHOULD be sent using LMP [RFC4204] reliable\n   transmission mechanisms.  If,
    after the retry limit is reached, a\n   ConfirmDataChannelStatusAck message or
    a ConfirmDataChannelStatusNack\n   message is not received by the SENDER, the
    SENDER SHOULD terminate\n   the data channel confirmation procedure and SHOULD
    raise an alert to\n   the management plane.\n"
  title: 6.  Procedures
- contents:
  - "7.  Security Considerations\n   [RFC4204] describes how LMP messages between
    peers can be secured,\n   and these measures are equally applicable to the new
    messages defined\n   in this document.\n   The operation of the procedures described
    in this document does not\n   of itself constitute a security risk because it
    does not cause any\n   change in network state.  It would be possible, if the
    messages were\n   intercepted or spoofed, to cause bogus alerts in the management\n
    \  plane, and so the use of LMP security measures described in [RFC4204]\n   is
    RECOMMENDED.\n   Note that performing the procedures described in this document
    may\n   provide a useful additional security measure to verify that data\n   channels
    have not been illicitly modified.\n"
  title: 7.  Security Considerations
- contents:
  - '8.  IANA Considerations

    '
  - contents:
    - "8.1.  LMP Message Types\n   IANA maintains the \"Link Management Protocol (LMP)\"
      registry, which\n   has a subregistry called \"LMP Message Type\".  IANA has
      made the\n   following three new allocations from this registry.\n      Value
      \   Description\n      ------   ---------------------------------\n        32
      \    ConfirmDataChannelStatus\n        33     ConfirmDataChannelStatusAck\n
      \       34     ConfirmDataChannelStatusNack\n"
    title: 8.1.  LMP Message Types
  - contents:
    - "8.2.  LMP Data Link Object Subobject\n   IANA maintains the \"Link Management
      Protocol (LMP)\" registry, which\n   has a subregistry called \"LMP Object Class
      name space and Class type\n   (C-Type)\".  This subregistry has an entry for
      the DATA_LINK object,\n   and there is a further embedded registry called \"DATA_LINK
      Sub-object\n   Class name space\".  IANA has made the following allocation from
      this\n   embedded registry.\n      Value    Description\n      ------   ---------------------------------\n
      \       9      Data Channel Status\n"
    title: 8.2.  LMP Data Link Object Subobject
  - contents:
    - "8.3.  LMP Error_Code Class Type\n   IANA maintains the \"Link Management Protocol
      (LMP)\" registry, which\n   has a subregistry called \"LMP Object Class name
      space and Class type\n   (C-Type)\".  This subregistry has an entry for the
      ERROR_CODE object.\n   IANA has allocated the following new value for an ERROR_CODE
      class\n   type.\n           C-Type   Description                    Reference\n
      \          ------   ----------------------------   ---------\n              4
      \    ConfirmDataChannelStatusNack   [This RFC]\n"
    title: 8.3.  LMP Error_Code Class Type
  title: 8.  IANA Considerations
- contents:
  - "9.  Acknowledgments\n   The authors would like to thank Adrian Farrel, Dimitri
    Papadimitriou,\n   and Lou Berger for their useful comments.\n"
  title: 9.  Acknowledgments
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use
      in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC4204]   Lang, J., Ed., \"Link Management Protocol (LMP)\",\n
      \              RFC 4204, October 2005.\n   [RFC5511]   Farrel, A., Ed., \"Routing
      Backus-Naur Form (RBNF):\n               A Syntax Used to Form Encoding Rules
      in Various Routing\n               Protocol Specifications\", RFC 5511, April
      2009.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC2205]   Braden, R., Ed., Zhang, L., Berson,
      S., Herzog, S., and\n               S. Jamin, \"Resource ReSerVation Protocol
      (RSVP) --\n               Version 1 Functional Specification\", RFC 2205,\n
      \              September 1997.\n   [RFC3209]   Awduche, D., Berger, L., Gan,
      D., Li, T., Srinivasan, V.,\n               and G. Swallow, \"RSVP-TE: Extensions
      to RSVP for LSP\n               Tunnels\", RFC 3209, December 2001.\n   [RFC3473]
      \  Berger, L., Ed., \"Generalized Multi-Protocol Label\n               Switching
      (GMPLS) Signaling Resource ReserVation\n               Protocol-Traffic Engineering
      (RSVP-TE) Extensions\",\n               RFC 3473, January 2003.\n   [RFC4203]
      \  Kompella, K., Ed., and Y. Rekhter, Ed., \"OSPF Extensions\n               in
      Support of Generalized Multi-Protocol Label Switching\n               (GMPLS)\",
      RFC 4203, October 2005.\n   [RFC4606]   Mannie, E. and D. Papadimitriou, \"Generalized
      Multi-\n               Protocol Label Switching (GMPLS) Extensions for\n               Synchronous
      Optical Network (SONET) and Synchronous\n               Digital Hierarchy (SDH)
      Control\", RFC 4606, August 2006.\n   [RFC5063]   Satyanarayana, A., Ed., and
      R. Rahman, Ed., \"Extensions\n               to GMPLS Resource Reservation Protocol
      (RSVP) Graceful\n               Restart\", RFC 5063, October 2007.\n   [RFC5307]
      \  Kompella, K., Ed., and Y. Rekhter, Ed., \"IS-IS Extensions\n               in
      Support of Generalized Multi-Protocol Label Switching\n               (GMPLS)\",
      RFC 5307, October 2008.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Contributor's Address\n   Fatai Zhang\n   Huawei Technologies\n   F3-5-B R&D
    Center, Huawei Base\n   Shenzhen 518129 China\n   Phone: +86 755-289-72912\n   EMail:
    zhangfatai@huawei.com\n"
  title: Contributor's Address
- contents:
  - "Authors' Addresses\n   Dan Li\n   Huawei Technologies\n   F3-5-B R&D Center,
    Huawei Base\n   Shenzhen 518129 China\n   Phone: +86 755-289-70230\n   EMail:
    danli@huawei.com\n   Huiying Xu\n   Huawei Technologies\n   F3-5-B R&D Center,
    Huawei Base\n   Shenzhen 518129 China\n   Phone: +86 755-289-72910\n   EMail:
    xuhuiying@huawei.com\n   Snigdho C. Bardalai\n   Fujitsu Network Communications\n
    \  2801 Telecom Parkway\n   Richardson, Texas 75082, USA\n   Phone: +1 972 479
    2951\n   EMail: snigdho.bardalai@us.fujitsu.com\n   Julien Meuric\n   France Telecom
    Orange Labs\n   2, avenue Pierre Marzin\n   22307 Lannion Cedex, France\n   Phone:
    +33 2 96 05 28 28\n   EMail: julien.meuric@orange-ftgroup.com\n   Diego Caviglia\n
    \  Ericsson\n   Via A. Negrone 1/A 16153\n   Genoa Italy\n   Phone: +39 010 600
    3736\n   EMail: diego.caviglia@ericsson.com\n"
  title: Authors' Addresses
