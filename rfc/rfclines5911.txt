Abstract The Cryptographic Message Syntax (CMS) format, and many associated formats, are expressed using ASN.1.
The current ASN.1 modules conform to the 1988 version of ASN.1.
This document updates those ASN.1 modules to conform to the 2002 version of ASN.1.
There are no bits on the wire changes to any of the formats; this is simply a change to the syntax.
Some developers would like the IETF to use the latest version of ASN.1 in its standards.
Most of the RFCs that relate to security protocols still use ASN.1 from the 1988 standard, which has been deprecated.
This is particularly true for the standards that relate to PKIX, CMS, and S/MIME.
This document updates the following RFCs to use ASN.1 modules that conform to the 2002 version of ASN.1 [ASN1 2002].
Note that not all the modules are updated; some are included to simply make the set complete.
RFC 3565, Use of AES in CMS [RFC3565]
RFC 3851, S/MIME Version 3.1 Message Specification [RFC3851]
RFC 4108, Using CMS to Protect Firmware Packages [RFC4108]  RFC 4998, Evidence Record Syntax (ERS)
[RFC4998]  RFC 5035, Enhanced Security Services (ESS)
[RFC5035]  RFC 5083, CMS Authenticated Enveloped Data Content Type
Using AES CCM and AES GCM Authenticated Encryption in CMS
[RFC5084]  RFC 5275, CMS Symmetric Key Management and Distribution
[RFC5275] Note that some of the modules in this document get some of their definitions from places different than the modules in the original RFCs.
The idea is that these modules, when combined with the modules in [RFC5912] can stand on their own and do not need to import definitions from anywhere else.
Also note that the ASN.1 modules in this document have references in their text comments that need to be looked up in original RFCs, and that some of those references may have already been superseded by later RFCs.
The document also includes a module of common definitions called "AlgorithmInformation".
These definitions are used here and in [RFC5912].
Note that some of the modules here import definitions from the common definitions module, "PKIX CommonTypes", in [RFC5912].
The modules in this document use the object model available in the 2002 ASN.1 documents to a great extent.
Objects for each of the different algorithm types are defined.
Also, all of the places where the 1988 ASN.1 syntax had ANY holes to allow for variable syntax now use objects.
Much like the way that the PKIX and S/MIME working groups use the prefix of i
d  for object identifiers, this document has also adopted a set of two , three , and four letter prefixes to allow for quick identification of the type of an object based on its name.
This allows, for example, the same back half of the name to be used for the different objects.
Thus, "id sha1" is the object identifier, while "mda sha1" is the message digest object for "sha1".
One or more object sets for the different types of algorithms are defined.
A single consistent name for each different algorithm type is used.
For example, an object set named PublicKeys contains the public keys defined in that module.
If no public keys are defined, then the object set is not created.
When importing these object sets into an ASN.1 module, one needs to be able to distinguish between the different object sets with the same name.
This is done by using both the module name (as specified in the IMPORT statement) and the object set name.
This section contains a module that is imported by many other modules in this document.
Note that this module is also given in [RFC5912].
This module does not come from any existing RFC.
AlgorithmInformation 2009 {iso(1) identified organization(3) dod(6)
kda    Key Derivation Algorithms    maca   Message Authentication Code Algorithms    pk
Public Key    cea    Content (symmetric)
WITH SYNTAX { IDENTIFIER &id [PARAMS [TYPE &Params] ARE &paramPresence ] }
Describes the basic properties of a signature
PUBLIC KEYS { pk rsa
WITH SYNTAX { IDENTIFIER &id [VALUE &Value]
[PARAMS [TYPE &Params] ARE &paramPresence ]
pk rsa pss PUBLIC KEY :
WITH SYNTAX { IDENTIFIER &id [KEY &KeyValue]
[PARAMS [TYPE &Params] ARE &paramPresence]
d contains the OID identifying
WITH SYNTAX { IDENTIFIER &id [PARAMS [TYPE &Params] ARE &paramPresence] [PUBLIC KEYS &PublicKeySet]
Describes the basic properties of a key agreement
&id contains the OID identifying the key agreement
PARAMS TYPE DHDomainParameters ARE inheritable
WITH SYNTAX { IDENTIFIER &id [PARAMS [TYPE &Params] ARE &paramPresence] [PUBLIC KEYS &PublicKeySet]
[UKM [TYPE &Ukm] ARE &ukmPresence]
WITH SYNTAX { IDENTIFIER &id [PARAMS [TYPE &Params] ARE &paramPresence]
WITH SYNTAX { IDENTIFIER &id [PARAMS [TYPE &Params] ARE &paramPresence]
Some parameters that perhaps should have been added would be    fields with the minimum and maximum MAC lengths for
those MAC algorithms that allow truncations.
PARAMS TYPE NULL ARE preferredAbsent
WITH SYNTAX { IDENTIFIER &id [PARAMS [TYPE &Params]
Describes the basic properties of a content encryption
&id contains the OID identifying the content
WITH SYNTAX { IDENTIFIER &id [PARAMS [TYPE &Params] ARE &paramPresence]
This would be used for cases where an algorithm of an unknown    type is used.
WITH SYNTAX { IDENTIFIER &id [PARAMS [TYPE &Params] ARE &paramPresence]
ALGORITHM TYPE.&id({AlgorithmSet}), parameters  ALGORITHM TYPE.
We have moved the SMIME CAPS from the module for RFC 3851 to here    because it is used in RFC 4262 (X.509 Certificate Extension for    S/MIME Capabilities)
This class is used to represent an S/MIME capability.
S/MIME    capabilities are used to represent what algorithm capabilities    an individual has.
The classic example was the content encryption    algorithm RC2 where the algorithm id and the RC2 key lengths    supported needed to be advertised, but the IV used is not fixed.
Another example where information needs to be shown is for    RSA OAEP where only specific hash functions or mask generation    functions are supported, but the saltLength is specified by the    sender and not the recipient.
This class is used to associate the type that describes the    capabilities with the object identifier.
WITH SYNTAX { [TYPE &Type] IDENTIFIED
Define a single S/MIME capability encoding SMIMECapability{SMIME
ASN.1 Module for RFC 3370
d mod cmsalg 2001 02(37) }
IMPORTS ParamOptions, DIGEST ALGORITHM, SIGNATURE ALGORITHM, PUBLIC KEY, KEY DERIVATION, KEY WRAP, MAC ALGORITHM, KEY AGREE, KEY TRANSPORT, CONTENT ENCRYPTION, ALGORITHM, AlgorithmIdentifier{}, SMIME CAPS FROM AlgorithmInformation 2009 {iso(1)
} pk rsa, pk dh, pk dsa, rsaEncryption, DHPublicKey, dhpublicnumber FROM PKIXAlgs 2009 {iso(1) identified organization(3)
} cap RC2CBC FROM SecureMimeMessageV3dot1 2009 {
Hash algorithms in this document
Content Encryption Algorithms ContentEncryptionAlgs CONTENT ENCRYPTION ::
Message Authentication Code Algorithms MessageAuthAlgs
S/MIME Capabilities for these items
7 } rc2 cbc OBJECT IDENTIFIER ::
{ iso(1) member body(2) us(840) rsadsi(113549) encryptionAlgorithm(3)
{ IDENTIFIER hMAC SHA1 PARAMS TYPE NULL ARE preferredAbsent
IS KEYED MAC TRUE SMIME CAPS {IDENTIFIED BY hMAC SHA1}
This object is included for completeness.
{ IDENTIFIER id alg ESDH
PARAMS TYPE KeyWrapAlgorithm ARE required PUBLIC KEYS { pk dh }
UKM is not ASN.1 encoded UKM
ARE optional SMIME CAPS {TYPE KeyWrapAlgorithm
IDENTIFIED BY id alg ESDH} }
PARAMS TYPE KeyWrapAlgorithm ARE required PUBLIC KEYS {pk dh}
UKM is not ASN.1 encoded UKM
ARE optional SMIME CAPS {TYPE KeyWrapAlgorithm
IDENTIFIED BY id alg SSDH} }
DHPublicKey PARAMS ARE absent CERT KEY USAGE {keyAgreement, encipherOnly, decipherOnly} } kwa 3DESWrap
PARAMS TYPE NULL ARE required SMIME CAPS {IDENTIFIED BY id alg CMS3DESwrap} } kwa RC2Wrap
IDENTIFIER des ede3 cbc PARAMS TYPE IV ARE required SMIME CAPS { IDENTIFIED BY des ede3 cbc }
} cea RC2 cbc CONTENT ENCRYPTION ::
{ IDENTIFIER rc2 cbc PARAMS TYPE RC2CBCParameter ARE required
SMIME CAPS cap RC2CBC } kt rsa KEY TRANSPORT ::
{ IDENTIFIER rsaEncryption PARAMS TYPE NULL ARE required PUBLIC KEYS { pk rsa } SMIME CAPS {IDENTIFIED BY rsaEncryption} }
S/MIME Capabilities most have no label.
cap 3DESwrap SMIME CAPS ::
{ IDENTIFIED BY id alg CMS3DESwrap } END 4.
ASN.1 Module for RFC 3565 CMSAesRsaesOaep 2009 {iso(1) member body(2) us(840)
d mod cms aes 02(38)
IMPORTS CONTENT ENCRYPTION, KEY WRAP,
SMIME CAPS FROM AlgorithmInformation 2009 {
id mod algorithmInformation 02(58)}; AES ContentEncryption CONTENT ENCRYPTION ::
CBC PARAMS TYPE AES IV ARE required SMIME CAPS { IDENTIFIED BY
aes192 CBC PARAMS TYPE AES IV ARE required SMIME CAPS { IDENTIFIED BY id aes192 CBC } }
aes256 CBC PARAMS TYPE AES IV ARE required SMIME CAPS { IDENTIFIED BY
AES IV is the parameter for all the above object identifiers.
id aes192 wrap } }
aes256 wrap PARAMS ARE absent SMIME CAPS { IDENTIFIED BY id
ASN.1 Module for RFC 3851 SecureMimeMessageV3dot1 2009 {iso(1) member body(2) us(840)
} ATTRIBUTE FROM PKIX CommonTypes 2009 {iso(1) identified organization(3) dod(6)
} SubjectKeyIdentifier, IssuerAndSerialNumber, RecipientKeyIdentifier FROM CryptographicMessageSyntax 2009 {
id mod cms 2004 02(41)
} rc2 cbc, SMimeCaps FROM CryptographicMessageSyntaxAlgorithms 2009 {iso(1) member body(2) us(840)
d mod cmsalg 2001 02(37)
} SMimeCaps FROM PKIXAlgs 2009 {iso(1) identified organization(3) dod(6)
d mod pkix1 algorithms2008 02(56)
} SMimeCaps FROM PKIX1 PSS OAEP Algorithms 2009 {
aa is the arc with all new authenticated and unauthenticated    attributes produced by the S/MIME Working Group id
The S/MIME Capabilities attribute provides a method of broadcasting   the symmetric capabilities understood.
Algorithms SHOULD be ordered   by preference and grouped by type aa smimeCapabilities
{ TYPE SMIMECapabilities{{SMimeCapsSet}} IDENTIFIED BY smimeCapabilities }
15 } SMimeCapsSet SMIME CAPS ::
Encryption Key Preference provides a method of broadcasting the   preferred encryption certificate.
CHOICE { issuerAndSerialNumber   [0] IssuerAndSerialNumber,
receipentKeyId is spelt incorrectly, but kept for historical   reasons.
The preferBinaryInside indicates an ability to receive messages   with binary encoding inside the CMS wrapper cap
The following list OIDs to be used with S/MIME V3
Signature Algorithms Not Found in [RFC3370]
{ TYPE SMIMECapabilitiesParametersForRC2CBC IDENTIFIED BY rc2 cbc} SMIMECapabilitiesParametersForRC2CBC ::
(RC2 Key Length (number of bits))
ASN.1 Module for RFC 3852
This module has an ASN.1 idiom for noting in which version of CMS changes were made from the original PKCS #7; that idiom is "[[v:", where "v" is an integer.
{ iso(1) member body(2) us(840)
id mod cms 2004 02(41)
IMPORTS ParamOptions, DIGEST ALGORITHM, SIGNATURE ALGORITHM, PUBLIC KEY, KEY DERIVATION, KEY WRAP, MAC ALGORITHM, KEY AGREE, KEY TRANSPORT, CONTENT ENCRYPTION, ALGORITHM, AlgorithmIdentifier FROM AlgorithmInformation 2009 {iso(1)
} SignatureAlgs, MessageDigestAlgs, KeyAgreementAlgs, MessageAuthAlgs, KeyWrapAlgs, ContentEncryptionAlgs, KeyTransportAlgs, KeyDerivationAlgs, KeyAgreePublicKeys FROM CryptographicMessageSyntaxAlgorithms 2009 {
d mod cmsalg 2001 02(37)
} Certificate, CertificateList, CertificateSerialNumber, Name, ATTRIBUTE FROM PKIX1Explicit 2009 { iso(1) identified organization(3) dod(6)
id mod pkix1 explicit 02(51)
} AttributeCertificate FROM PKIXAttributeCertificate 2009 { iso(1) identified organization(3)
id mod attribute cert 02(47)
} AttributeCertificateV1 FROM AttributeCertificateVersion1 2009 { iso(1) member body(2) us(840)
Define the set of content types to be recognized.
SET OF DigestAlgorithmIdentifier, encapContentInfo EncapsulatedContentInfo, certificates [0]
IMPLICIT CertificateSet OPTIONAL, crls [1]
OCTET STRING ( CONTAINING CONTENT TYPE. &Type({ContentSet}{@eContentType}))
IMPLICIT CertificateSet OPTIONAL, crls [1]
[0] IMPLICIT OCTET STRING OPTIONAL }
[0] IMPLICIT ENCRYPTED {CONTENT TYPE.
[[5: pwri  [3] PasswordRecipientInfo, ori
SubjectKeyIdentifier, originatorKey [1] OriginatorPublicKey } OriginatorPublicKey ::
CHOICE { issuerAndSerialNumber IssuerAndSerialNumber, rKeyId [0
subjectKeyIdentifier SubjectKeyIdentifier, date GeneralizedTime OPTIONAL, other OtherKeyAttribute OPTIONAL }
keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier, encryptedKey EncryptedKey } OTHER RECIPIENT ::
digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL, encapContentInfo EncapsulatedContentInfo, authAttrs
[2] IMPLICIT AuthAttributes OPTIONAL, mac MessageAuthenticationCode, unauthAttrs
SEQUENCE { keyAttrId  KEY ATTRIBUTE. &id({SupportedKeyAttributes}),
{ EnvelopedData IDENTIFIED BY i
ASN.1 Module for RFC 4108 CMSFirmwareWrapper 2009 {
id mod cms firmware wrap 02(40) }
BEGIN IMPORTS OTHER NAME FROM PKIX1Implicit 2009 {
id mod pkix1 implicit 02(59)
} EnvelopedData, CONTENT TYPE, ATTRIBUTE FROM CryptographicMessageSyntax 2009 { iso(1) member body(2) us(840)
Firmware Package Content Type and Object Identifier ct
{ FirmwarePkgData IDENTIFIED BY id
{ TYPE FirmwarePackageIdentifier IDENTIFIED BY id aa firmwarePackageID }
CHOICE { preferred PreferredPackageIdentifier, legacy OCTET
SEQUENCE { fwPkgID OBJECT IDENTIFIER, verNum INTEGER (0..
IDENTIFIED BY id aa targetHardwareIDs }
IDENTIFIER aa communityIdentifiers ATTRIBUTE :
BY id aa firmwarePackageInfo }
{ TYPE WrappedFirmwareKey IDENTIFIED BY
Firmware Package Load Receipt Content Type and Object Identifier ct
OCTET STRING, fwPkgName PreferredOrLegacyPackageIdentifier, trustAnchorKeyID
OCTET STRING OPTIONAL, decryptKeyID [1]
Firmware Package Load Error Report Content Type   and Object Identifier ct
errorCode FirmwarePackageLoadErrorCode, vendorErrorCode VendorLoadErrorCode OPTIONAL, fwPkgName PreferredOrLegacyPackageIdentifier OPTIONAL,
config [1] SEQUENCE OF CurrentFWConfig
OCTET STRING } END 8.
ASN.1 Module for RFC 4998 ERS {iso(1) identified organization(3)
} AlgorithmIdentifier{}, ALGORITHM, DIGEST ALGORITHM FROM AlgorithmInformation 2009 {iso(1) identified organization(3)
} ContentInfo FROM CryptographicMessageSyntax2004 { iso(1) member
id mod cms 2004 02(41)
aa er internal } id
49 } aa er External ATTRIBUTE :
id aa er external OBJECT
ASN.1 Module for RFC 5035 Section numbers in the module refer to the sections of RFC 2634 as updated by RFC 5035.
d mod ess 2006 02(42) }
} AlgorithmIdentifier{}, ALGORITHM, DIGEST ALGORITHM FROM AlgorithmInformation 2009 {iso(1) identified organization(3)
)} ContentType, IssuerAndSerialNumber, SubjectKeyIdentifier, CONTENT TYPE FROM CryptographicMessageSyntax 2009 {
id mod cms 2004 02(41)
} CertificateSerialNumber FROM PKIX1Explicit 2009 {
id mod pkix1 explicit 02(51
) } PolicyInformation, GeneralNames FROM PKIX1Implicit 2009 { iso(1) identified organization(3) dod(6)
id mod pkix1 implicit 02(59)
} mda sha256 FROM PKIX1 PSS
The construct "SEQUENCE SIZE (1..MAX) OF" appears in several ASN.1   constructs in this module.
A valid ASN.1 SEQUENCE can have zero or   more entries.
The SIZE (1..MAX) construct constrains the SEQUENCE   to have at least one entry.
MAX indicates the upper bound is   unspecified.
Implementations are free to choose an upper bound   that suits their environment.
{ TYPE ReceiptRequest IDENTIFIED BY
id aa receiptRequest} ReceiptRequest ::
7} ct receipt CONTENT TYPE :
OCTET STRING   Section 2.11 aa
privacy mark ESSPrivacyMark OPTIONAL, security categories SecurityCategories OPTIONAL }
algorithm mda sha256.&id }, certHash
Hash, issuerSerial    IssuerSerial OPTIONAL }
ASN.1 Module for RFC 5083 CMS AuthEnvelopedData 2009 {
id mod cms authEnvelopedData 02(43)
IMPORTS AuthAttributes, CMSVersion, EncryptedContentInfo, MessageAuthenticationCode, OriginatorInfo, RecipientInfos, UnauthAttributes, CONTENT TYPE FROM CryptographicMessageSyntax 2009 {iso(1) member body(2
[1] IMPLICIT AuthAttributes OPTIONAL, mac MessageAuthenticationCode, unauthAttrs
[2] IMPLICIT UnauthAttributes OPTIONAL } END 11.
ASN.1 Module for RFC 5084 CMS AES CCM and AES GCM 2009 { iso(1) member body(2
mod cms aes ccm gcm 02(44)
SMIME CAPS FROM AlgorithmInformation 2009 {
this algorithm set to include all of the algorithms defined in
aes128 CCM PARAMS TYPE CCMParameters ARE required SMIME CAPS { IDENTIFIED BY
id aes128 CCM } }
id aes192 CCM OBJECT IDENTIFIER ::
aes256 CCM PARAMS TYPE CCMParameters ARE required SMIME CAPS { IDENTIFIED BY id aes256 CCM } }
aes128 GCM PARAMS TYPE GCMParameters ARE required SMIME CAPS { IDENTIFIED BY id
aes128 GCM PARAMS TYPE GCMParameters ARE required SMIME CAPS { IDENTIFIED BY id aes192 GCM } }
id aes192 GCM OBJECT IDENTIFIER ::
aes128 GCM PARAMS TYPE GCMParameters ARE required SMIME CAPS { IDENTIFIED BY id aes256 GCM } }
12 } AES CCM ICVlen :
INTEGER (4   6   8   10   12
ASN.1 Module for RFC 5275 SMIMESymmetricKeyDistribution 2009
IMPORTS AlgorithmIdentifier{}, ALGORITHM, DIGEST ALGORITHM, KEY WRAP, SMIMECapability{}, SMIMECapabilities{}, SMIME CAPS FROM AlgorithmInformation 2009 {iso(1) identified organization(3)
} GeneralName FROM PKIX1Implicit 2009 { iso(1) identified organization(3)
id mod pkix1 implicit 02(59
) } Certificate FROM PKIX1Explicit 2009 { iso(1) identified organization(3) dod(6)
id mod pkix1 explicit 02(51)
} RecipientInfos, KEKIdentifier,CertificateSet FROM CryptographicMessageSyntax 2009 {iso(1) member body(2) us(840)
id mod cms 2004 02(41)
} cap 3DESwrap FROM CryptographicMessageSyntaxAlgorithms { iso(1) member body(2) us(840)
d mod cmsalg 2001 02(37)
} AttributeCertificate FROM PKIXAttributeCertificate 2009 { iso(1) identified organization(3)
} CMC CONTROL, EXTENDED FAILURE INFO FROM EnrollmentMessageSyntax { iso(1) identified
} kwa aes128 wrap, kwa aes192 wrap, kwa aes256 wrap FROM CMSAesRsaesOaep 2009 {
d mod cms aes 02(38) }
;   This defines the group list (GL symmetric key distribution OID arc
skd glDelete   skd glAddMember   skd glDeleteMember   skd glRekey   skd glAddOwner
This defines the GL Use KEK control attribute skd glUseKEK CMC CONTROL :
The advertised set of algorithm capabilities for the document
SKD Caps SMIME CAPS ::
{ cap 3DESwrap   kwa aes128
The set of key wrap algorithms supported by this specification   KeyWrapAlgorithm ::
[4] KeyWrapAlgorithm DEFAULT cap aes128 cbc }
This defines the Delete GL control attribute.
It has the simple type GeneralName.
This defines the Add GL Member control attribute skd glAddMember CMC CONTROL :
[1] SEQUENCE SIZE (1.. MAX) OF AttributeCertificate OPTIONAL,
CertificateSet OPTIONAL   From RFC 3852 }
This defines the Delete GL Member control attribute skd glDeleteMember CMC CONTROL ::
This defines the Delete GL Member control attribute skd glRekey CMC CONTROL :
This defines the Add and Delete GL Owner control attributes skd glAddOwner CMC CONTROL :
GLOwnerAdministration IDENTIFIED BY id skd glRemoveOwner
This defines the GL Key Compromise control attribute.
It has the simple type GeneralName.
This defines the GL Key Refresh control attribute.
This defines the GLA Query Request control attribute.
id skd glaQueryRequest OBJECT IDENTIFIER :
This defines the GLA Query Response control attribute.
skd glaQueryResponse CMC CONTROL ::
{ GLAQueryResponse IDENTIFIED BY i
This defines the GLA Request/Response (glaRR) arc for   glaRequestType/glaResponseType.
This defines the Algorithm Response skd AlgResponse SKD RESPONSE :
{ SMIMECapability{{SKD Caps}} IDENTIFIED BY i
d cmc gla skdAlgResponse }
id cmc glaRR 2 }
Note that the response for algorithmSupported request is the   smimeCapabilities attribute as defined in RFC 3851.
This defines the control attribute to request an updated   certificate to the GLA.
skd glProvideCert CMC CONTROL ::
{ GLManageCert IDENTIFIED BY i
This defines the control attribute to return an updated   certificate to the GLA.
It has the type GLManageCert.
skd glManageCert CMC CONTROL ::
This defines the control attribute to distribute the GL
skd glKey CMC CONTROL ::
KeyWrapAlgorithm, glkNotBefore  GeneralizedTime, glkNotAfter   GeneralizedTime }
This defines the CMC error types skd ExtendedFailures EXTENDED FAILURE INFO :
Security Considerations Even though all the RFCs in this document are security related, the document itself does not have any security considerations.
The ASN.1 modules keep the same bits on the wire as the modules that they replace.
