- title: __initial_text__
  contents:
  - '                  TCP Selective Acknowledgment Options

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   TCP may experience poor performance when multiple packets are lost\n\
    \   from one window of data.   With the limited information available\n   from\
    \ cumulative acknowledgments, a TCP sender can only learn about a\n   single lost\
    \ packet per round trip time.  An aggressive sender could\n   choose to retransmit\
    \ packets early, but such retransmitted segments\n   may have already been successfully\
    \ received.\n   A Selective Acknowledgment (SACK) mechanism, combined with a\n\
    \   selective repeat retransmission policy, can help to overcome these\n   limitations.\
    \  The receiving TCP sends back SACK packets to the sender\n   informing the sender\
    \ of data that has been received. The sender can\n   then retransmit only the\
    \ missing data segments.\n   This memo proposes an implementation of SACK and\
    \ discusses its\n   performance and related issues.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Much of the text in this document is taken directly from\
    \ RFC1072 \"TCP\n   Extensions for Long-Delay Paths\" by Bob Braden and Van Jacobson.\
    \  The\n   authors would like to thank Kevin Fall (LBNL), Christian Huitema\n\
    \   (INRIA), Van Jacobson (LBNL), Greg Miller (MITRE), Greg Minshall\n   (Ipsilon),\
    \ Lixia Zhang (XEROX PARC and UCLA), Dave Borman (BSDI),\n   Allison Mankin (ISI)\
    \ and others for their review and constructive\n   comments.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Multiple packet losses from a window of data can have a\
    \ catastrophic\n   effect on TCP throughput. TCP [Postel81] uses a cumulative\n\
    \   acknowledgment scheme in which received segments that are not at the\n   left\
    \ edge of the receive window are not acknowledged.  This forces\n   the sender\
    \ to either wait a roundtrip time to find out about each\n   lost packet, or to\
    \ unnecessarily retransmit segments which have been\n   correctly received [Fall95].\
    \  With the cumulative acknowledgment\n   scheme, multiple dropped segments generally\
    \ cause TCP to lose its\n   ACK-based clock, reducing overall throughput.\n  \
    \ Selective Acknowledgment (SACK) is a strategy which corrects this\n   behavior\
    \ in the face of multiple dropped segments.  With selective\n   acknowledgments,\
    \ the data receiver can inform the sender about all\n   segments that have arrived\
    \ successfully, so the sender need\n   retransmit only the segments that have\
    \ actually been lost.\n   Several transport protocols, including NETBLT [Clark87],\
    \ XTP\n   [Strayer92], RDP [Velten84], NADIR [Huitema81], and VMTP [Cheriton88]\n\
    \   have used selective acknowledgment.  There is some empirical evidence\n  \
    \ in favor of selective acknowledgments -- simple experiments with RDP\n   have\
    \ shown that disabling the selective acknowledgment facility\n   greatly increases\
    \ the number of retransmitted segments over a lossy,\n   high-delay Internet path\
    \ [Partridge87]. A recent simulation study by\n   Kevin Fall and Sally Floyd [Fall95],\
    \ demonstrates the strength of TCP\n   with SACK over the non-SACK Tahoe and Reno\
    \ TCP implementations.\n   RFC1072 [VJ88] describes one possible implementation\
    \ of SACK options\n   for TCP.  Unfortunately, it has never been deployed in the\
    \ Internet,\n   as there was disagreement about how SACK options should be used\
    \ in\n   conjunction with the TCP window shift option (initially described\n \
    \  RFC1072 and revised in [Jacobson92]).\n   We propose slight modifications to\
    \ the SACK options as proposed in\n   RFC1072.  Specifically, sending a selective\
    \ acknowledgment for the\n   most recently received data reduces the need for\
    \ long SACK options\n   [Keshav94, Mathis95].  In addition, the SACK option now\
    \ carries full\n   32 bit sequence numbers.  These two modifications represent\
    \ the only\n   changes to the proposal in RFC1072.  They make SACK easier to\n\
    \   implement and address concerns about robustness.\n   The selective acknowledgment\
    \ extension uses two TCP options. The\n   first is an enabling option, \"SACK-permitted\"\
    , which may be sent in a\n   SYN segment to indicate that the SACK option can\
    \ be used once the\n   connection is established.  The other is the SACK option\
    \ itself,\n   which may be sent over an established connection once permission\
    \ has\n   been given by SACK-permitted.\n   The SACK option is to be included\
    \ in a segment sent from a TCP that\n   is receiving data to the TCP that is sending\
    \ that data; we will refer\n   to these TCP's as the data receiver and the data\
    \ sender,\n   respectively.  We will consider a particular simplex data flow;\
    \ any\n   data flowing in the reverse direction over the same connection can be\n\
    \   treated independently.\n"
- title: 2.  Sack-Permitted Option
  contents:
  - "2.  Sack-Permitted Option\n   This two-byte option may be sent in a SYN by a\
    \ TCP that has been\n   extended to receive (and presumably process) the SACK\
    \ option once the\n   connection has opened.  It MUST NOT be sent on non-SYN segments.\n\
    \       TCP Sack-Permitted Option:\n       Kind: 4\n       +---------+---------+\n\
    \       | Kind=4  | Length=2|\n       +---------+---------+\n"
- title: 3.  Sack Option Format
  contents:
  - "3.  Sack Option Format\n   The SACK option is to be used to convey extended acknowledgment\n\
    \   information from the receiver to the sender over an established TCP\n   connection.\n\
    \       TCP SACK Option:\n       Kind: 5\n       Length: Variable\n          \
    \               +--------+--------+\n                         | Kind=5 | Length\
    \ |\n       +--------+--------+--------+--------+\n       |      Left Edge of\
    \ 1st Block       |\n       +--------+--------+--------+--------+\n       |  \
    \    Right Edge of 1st Block      |\n       +--------+--------+--------+--------+\n\
    \       |                                   |\n       /            . . .     \
    \             /\n       |                                   |\n       +--------+--------+--------+--------+\n\
    \       |      Left Edge of nth Block       |\n       +--------+--------+--------+--------+\n\
    \       |      Right Edge of nth Block      |\n       +--------+--------+--------+--------+\n\
    \   The SACK option is to be sent by a data receiver to inform the data\n   sender\
    \ of non-contiguous blocks of data that have been received and\n   queued.  The\
    \ data receiver awaits the receipt of data (perhaps by\n   means of retransmissions)\
    \ to fill the gaps in sequence space between\n   received blocks.  When missing\
    \ segments are received, the data\n   receiver acknowledges the data normally\
    \ by advancing the left window\n   edge in the Acknowledgement Number Field of\
    \ the TCP header.  The SACK\n   option does not change the meaning of the Acknowledgement\
    \ Number\n   field.\n   This option contains a list of some of the blocks of contiguous\n\
    \   sequence space occupied by data that has been received and queued\n   within\
    \ the window.\n   Each contiguous block of data queued at the data receiver is\
    \ defined\n   in the SACK option by two 32-bit unsigned integers in network byte\n\
    \   order:\n   *    Left Edge of Block\n        This is the first sequence number\
    \ of this block.\n   *    Right Edge of Block\n        This is the sequence number\
    \ immediately following the last\n        sequence number of this block.\n   Each\
    \ block represents received bytes of data that are contiguous and\n   isolated;\
    \ that is, the bytes just below the block, (Left Edge of\n   Block - 1), and just\
    \ above the block, (Right Edge of Block), have not\n   been received.\n   A SACK\
    \ option that specifies n blocks will have a length of 8*n+2\n   bytes, so the\
    \ 40 bytes available for TCP options can specify a\n   maximum of 4 blocks.  It\
    \ is expected that SACK will often be used in\n   conjunction with the Timestamp\
    \ option used for RTTM [Jacobson92],\n   which takes an additional 10 bytes (plus\
    \ two bytes of padding); thus\n   a maximum of 3 SACK blocks will be allowed in\
    \ this case.\n   The SACK option is advisory, in that, while it notifies the data\n\
    \   sender that the data receiver has received the indicated segments,\n   the\
    \ data receiver is permitted to later discard data which have been\n   reported\
    \ in a SACK option.  A discussion appears below in Section 8\n   of the consequences\
    \ of advisory SACK, in particular that the data\n   receiver may renege, or drop\
    \ already SACKed data.\n"
- title: '4.  Generating Sack Options: Data Receiver Behavior'
  contents:
  - "4.  Generating Sack Options: Data Receiver Behavior\n   If the data receiver\
    \ has received a SACK-Permitted option on the SYN\n   for this connection, the\
    \ data receiver MAY elect to generate SACK\n   options as described below.  If\
    \ the data receiver generates SACK\n   options under any circumstance, it SHOULD\
    \ generate them under all\n   permitted circumstances.  If the data receiver has\
    \ not received a\n   SACK-Permitted option for a given connection, it MUST NOT\
    \ send SACK\n   options on that connection.\n   If sent at all, SACK options SHOULD\
    \ be included in all ACKs which do\n   not ACK the highest sequence number in\
    \ the data receiver's queue.  In\n   this situation the network has lost or mis-ordered\
    \ data, such that\n   the receiver holds non-contiguous data in its queue.  RFC\
    \ 1122,\n   Section 4.2.2.21, discusses the reasons for the receiver to send ACKs\n\
    \   in response to additional segments received in this state.  The\n   receiver\
    \ SHOULD send an ACK for every valid segment that arrives\n   containing new data,\
    \ and each of these \"duplicate\" ACKs SHOULD bear a\n   SACK option.\n   If the\
    \ data receiver chooses to send a SACK option, the following\n   rules apply:\n\
    \      * The first SACK block (i.e., the one immediately following the\n     \
    \ kind and length fields in the option) MUST specify the contiguous\n      block\
    \ of data containing the segment which triggered this ACK,\n      unless that\
    \ segment advanced the Acknowledgment Number field in\n      the header.  This\
    \ assures that the ACK with the SACK option\n      reflects the most recent change\
    \ in the data receiver's buffer\n      queue.\n      * The data receiver SHOULD\
    \ include as many distinct SACK blocks as\n      possible in the SACK option.\
    \  Note that the maximum available\n      option space may not be sufficient to\
    \ report all blocks present in\n      the receiver's queue.\n      * The SACK\
    \ option SHOULD be filled out by repeating the most\n      recently reported SACK\
    \ blocks (based on first SACK blocks in\n      previous SACK options) that are\
    \ not subsets of a SACK block\n      already included in the SACK option being\
    \ constructed.  This\n      assures that in normal operation, any segment remaining\
    \ part of a\n      non-contiguous block of data held by the data receiver is reported\n\
    \      in at least three successive SACK options, even for large-window\n    \
    \  TCP implementations [RFC1323]).  After the first SACK block, the\n      following\
    \ SACK blocks in the SACK option may be listed in\n      arbitrary order.\n  \
    \ It is very important that the SACK option always reports the block\n   containing\
    \ the most recently received segment, because this provides\n   the sender with\
    \ the most up-to-date information about the state of\n   the network and the data\
    \ receiver's queue.\n"
- title: '5.  Interpreting the Sack Option and Retransmission Strategy: Data'
  contents:
  - "5.  Interpreting the Sack Option and Retransmission Strategy: Data\n   Sender\
    \ Behavior\n   When receiving an ACK containing a SACK option, the data sender\n\
    \   SHOULD record the selective acknowledgment for future reference.  The\n  \
    \ data sender is assumed to have a retransmission queue that contains\n   the\
    \ segments that have been transmitted but not yet acknowledged, in\n   sequence-number\
    \ order.  If the data sender performs re-packetization\n   before retransmission,\
    \ the block boundaries in a SACK option that it\n   receives may not fall on boundaries\
    \ of segments in the retransmission\n   queue; however, this does not pose a serious\
    \ difficulty for the\n   sender.\n   One possible implementation of the sender's\
    \ behavior is as follows.\n   Let us suppose that for each segment in the retransmission\
    \ queue\n   there is a (new) flag bit \"SACKed\", to be used to indicate that\
    \ this\n   particular segment has been reported in a SACK option.\n   When an\
    \ acknowledgment segment arrives containing a SACK option, the\n   data sender\
    \ will turn on the SACKed bits for segments that have been\n   selectively acknowledged.\
    \  More specifically, for each block in the\n   SACK option, the data sender will\
    \ turn on the SACKed flags for all\n   segments in the retransmission queue that\
    \ are wholly contained within\n   that block.  This requires straightforward sequence\
    \ number\n   comparisons.\n   After the SACKed bit is turned on (as the result\
    \ of processing a\n   received SACK option), the data sender will skip that segment\
    \ during\n   any later retransmission.  Any segment that has the SACKed bit turned\n\
    \   off and is less than the highest SACKed segment is available for\n   retransmission.\n\
    \   After a retransmit timeout the data sender SHOULD turn off all of the\n  \
    \ SACKed bits, since the timeout might indicate that the data receiver\n   has\
    \ reneged.  The data sender MUST retransmit the segment at the left\n   edge of\
    \ the window after a retransmit timeout, whether or not the\n   SACKed bit is\
    \ on for that segment.  A segment will not be dequeued\n   and its buffer freed\
    \ until the left window edge is advanced over it.\n"
- title: 5.1  Congestion Control Issues
  contents:
  - "5.1  Congestion Control Issues\n   This document does not attempt to specify\
    \ in detail the congestion\n   control algorithms for implementations of TCP with\
    \ SACK.  However,\n   the congestion control algorithms present in the de facto\
    \ standard\n   TCP implementations MUST be preserved [Stevens94].  In particular,\
    \ to\n   preserve robustness in the presence of packets reordered by the\n   network,\
    \ recovery is not triggered by a single ACK reporting out-of-\n   order packets\
    \ at the receiver.  Further, during recovery the data\n   sender limits the number\
    \ of segments sent in response to each ACK.\n   Existing implementations limit\
    \ the data sender to sending one segment\n   during Reno-style fast recovery,\
    \ or to two segments during slow-start\n   [Jacobson88].  Other aspects of congestion\
    \ control, such as reducing\n   the congestion window in response to congestion,\
    \ must similarly be\n   preserved.\n   The use of time-outs as a fall-back mechanism\
    \ for detecting dropped\n   packets is unchanged by the SACK option.  Because\
    \ the data receiver\n   is allowed to discard SACKed data, when a retransmit timeout\
    \ occurs\n   the data sender MUST ignore prior SACK information in determining\n\
    \   which data to retransmit.\n   Future research into congestion control algorithms\
    \ may take advantage\n   of the additional information provided by SACK.  One\
    \ such area for\n   future research concerns modifications to TCP for a wireless\
    \ or\n   satellite environment where packet loss is not necessarily an\n   indication\
    \ of congestion.\n"
- title: 6.  Efficiency and Worst Case Behavior
  contents:
  - "6.  Efficiency and Worst Case Behavior\n   If the return path carrying ACKs and\
    \ SACK options were lossless, one\n   block per SACK option packet would always\
    \ be sufficient.  Every\n   segment arriving while the data receiver holds discontinuous\
    \ data\n   would cause the data receiver to send an ACK with a SACK option\n \
    \  containing the one altered block in the receiver's queue.  The data\n   sender\
    \ is thus able to construct a precise replica of the receiver's\n   queue by taking\
    \ the union of all the first SACK blocks.\n   Since the return path is not lossless,\
    \ the SACK option is defined to\n   include more than one SACK block in a single\
    \ packet.  The redundant\n   blocks in the SACK option packet increase the robustness\
    \ of SACK\n   delivery in the presence of lost ACKs.  For a receiver that is also\n\
    \   using the time stamp option [Jacobson92], the SACK option has room to\n  \
    \ include three SACK blocks.  Thus each SACK block will generally be\n   repeated\
    \ at least three times, if necessary, once in each of three\n   successive ACK\
    \ packets.  However, if all of the ACK packets reporting\n   a particular SACK\
    \ block are dropped, then the sender might assume\n   that the data in that SACK\
    \ block has not been received, and\n   unnecessarily retransmit those segments.\n\
    \   The deployment of other TCP options may reduce the number of\n   available\
    \ SACK blocks to 2 or even to 1.  This will reduce the\n   redundancy of SACK\
    \ delivery in the presence of lost ACKs.  Even so,\n   the exposure of TCP SACK\
    \ in regard to the unnecessary retransmission\n   of packets is strictly less\
    \ than the exposure of current\n   implementations of TCP.  The worst-case conditions\
    \ necessary for the\n   sender to needlessly retransmit data is discussed in more\
    \ detail in a\n   separate document [Floyd96].\n   Older TCP implementations which\
    \ do not have the SACK option will not\n   be unfairly disadvantaged when competing\
    \ against SACK-capable TCPs.\n   This issue is discussed in more detail in [Floyd96].\n"
- title: 7.  Sack Option Examples
  contents:
  - "7.  Sack Option Examples\n   The following examples attempt to demonstrate the\
    \ proper behavior of\n   SACK generation by the data receiver.\n   Assume the\
    \ left window edge is 5000 and that the data transmitter\n   sends a burst of\
    \ 8 segments, each containing 500 data bytes.\n      Case 1: The first 4 segments\
    \ are received but the last 4 are\n      dropped.\n      The data receiver will\
    \ return a normal TCP ACK segment\n      acknowledging sequence number 7000, with\
    \ no SACK option.\n      Case 2:  The first segment is dropped but the remaining\
    \ 7 are\n      received.\n         Upon receiving each of the last seven packets,\
    \ the data\n         receiver will return a TCP ACK segment that acknowledges\n\
    \         sequence number 5000 and contains a SACK option specifying\n       \
    \  one block of queued data:\n             Triggering    ACK      Left Edge  \
    \ Right Edge\n             Segment\n             5000         (lost)\n       \
    \      5500         5000     5500       6000\n             6000         5000 \
    \    5500       6500\n             6500         5000     5500       7000\n   \
    \          7000         5000     5500       7500\n             7500         5000\
    \     5500       8000\n             8000         5000     5500       8500\n  \
    \           8500         5000     5500       9000\n      Case 3:  The 2nd, 4th,\
    \ 6th, and 8th (last) segments are\n      dropped.\n      The data receiver ACKs\
    \ the first packet normally.  The\n      third, fifth, and seventh packets trigger\
    \ SACK options as\n      follows:\n          Triggering  ACK    First Block  \
    \ 2nd Block     3rd Block\n          Segment            Left   Right  Left   Right\
    \  Left   Right\n                             Edge   Edge   Edge   Edge   Edge\
    \   Edge\n          5000       5500\n          5500       (lost)\n          6000\
    \       5500    6000   6500\n          6500       (lost)\n          7000     \
    \  5500    7000   7500   6000   6500\n          7500       (lost)\n          8000\
    \       5500    8000   8500   7000   7500   6000   6500\n          8500      \
    \ (lost)\n      Suppose at this point, the 4th packet is received out of order.\n\
    \      (This could either be because the data was badly misordered in the\n  \
    \    network, or because the 2nd packet was retransmitted and lost, and\n    \
    \  then the 4th packet was retransmitted). At this point the data\n      receiver\
    \ has only two SACK blocks to report.  The data receiver\n      replies with the\
    \ following Selective Acknowledgment:\n          Triggering  ACK    First Block\
    \   2nd Block     3rd Block\n          Segment            Left   Right  Left \
    \  Right  Left   Right\n                             Edge   Edge   Edge   Edge\
    \   Edge   Edge\n          6500       5500    6000   7500   8000   8500\n    \
    \  Suppose at this point, the 2nd segment is received.  The data\n      receiver\
    \ then replies with the following Selective Acknowledgment:\n          Triggering\
    \  ACK    First Block   2nd Block     3rd Block\n          Segment           \
    \ Left   Right  Left   Right  Left   Right\n                             Edge\
    \   Edge   Edge   Edge   Edge   Edge\n          5500       7500    8000   8500\n"
- title: 8.  Data Receiver Reneging
  contents:
  - "8.  Data Receiver Reneging\n   Note that the data receiver is permitted to discard\
    \ data in its queue\n   that has not been acknowledged to the data sender, even\
    \ if the data\n   has already been reported in a SACK option.  Such discarding\
    \ of\n   SACKed packets is discouraged, but may be used if the receiver runs\n\
    \   out of buffer space.\n   The data receiver MAY elect not to keep data which\
    \ it has reported in\n   a SACK option.  In this case, the receiver SACK generation\
    \ is\n   additionally qualified:\n      * The first SACK block MUST reflect the\
    \ newest segment.  Even if\n      the newest segment is going to be discarded\
    \ and the receiver has\n      already discarded adjacent segments, the first SACK\
    \ block MUST\n      report, at a minimum, the left and right edges of the newest\n\
    \      segment.\n      * Except for the newest segment, all SACK blocks MUST NOT\
    \ report\n      any old data which is no longer actually held by the receiver.\n\
    \   Since the data receiver may later discard data reported in a SACK\n   option,\
    \ the sender MUST NOT discard data before it is acknowledged by\n   the Acknowledgment\
    \ Number field in the TCP header.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This document neither strengthens nor weakens\
    \ TCP's current security\n   properties.\n"
- title: 10. References
  contents:
  - "10. References\n   [Cheriton88]  Cheriton, D., \"VMTP: Versatile Message Transaction\n\
    \   Protocol\", RFC 1045, Stanford University, February 1988.\n   [Clark87] Clark,\
    \ D., Lambert, M., and L. Zhang, \"NETBLT: A Bulk Data\n   Transfer Protocol\"\
    , RFC 998, MIT, March 1987.\n   [Fall95]  Fall, K. and Floyd, S., \"Comparisons\
    \ of Tahoe, Reno, and\n   Sack TCP\", ftp://ftp.ee.lbl.gov/papers/sacks.ps.Z,\
    \ December 1995.\n   [Floyd96]  Floyd, S.,  \"Issues of TCP with SACK\",\n   ftp://ftp.ee.lbl.gov/papers/issues_sa.ps.Z,\
    \ January 1996.\n   [Huitema81] Huitema, C., and Valet, I., An Experiment on High\
    \ Speed\n   File Transfer using Satellite Links, 7th Data Communication\n   Symposium,\
    \ Mexico, October 1981.\n   [Jacobson88] Jacobson, V., \"Congestion Avoidance\
    \ and Control\",\n   Proceedings of SIGCOMM '88, Stanford, CA., August 1988.\n\
    \   [Jacobson88}, Jacobson, V. and R. Braden, \"TCP Extensions for Long-\n   Delay\
    \ Paths\", RFC 1072, October 1988.\n   [Jacobson92] Jacobson, V., Braden, R.,\
    \ and D. Borman, \"TCP Extensions\n   for High Performance\", RFC 1323, May 1992.\n\
    \   [Keshav94]  Keshav, presentation to the Internet End-to-End Research\n   Group,\
    \ November 1994.\n   [Mathis95]  Mathis, M., and Mahdavi, J., TCP Forward Acknowledgment\n\
    \   Option, presentation to the Internet End-to-End Research Group, June\n   1995.\n\
    \   [Partridge87]  Partridge, C., \"Private Communication\", February 1987.\n\
    \   [Postel81]  Postel, J., \"Transmission Control Protocol - DARPA\n   Internet\
    \ Program Protocol Specification\", RFC 793, DARPA, September\n   1981.\n   [Stevens94]\
    \ Stevens, W., TCP/IP Illustrated, Volume 1: The Protocols,\n   Addison-Wesley,\
    \ 1994.\n   [Strayer92] Strayer, T., Dempsey, B., and Weaver, A., XTP -- the\n\
    \   xpress transfer protocol. Addison-Wesley Publishing Company, 1992.\n   [Velten84]\
    \ Velten, D., Hinden, R., and J. Sax, \"Reliable Data\n   Protocol\", RFC 908,\
    \ BBN, July 1984.\n"
- title: 11. Authors' Addresses
  contents:
  - "11. Authors' Addresses\n    Matt Mathis and Jamshid Mahdavi\n    Pittsburgh Supercomputing\
    \ Center\n    4400 Fifth Ave\n    Pittsburgh, PA 15213\n    mathis@psc.edu\n \
    \   mahdavi@psc.edu\n    Sally Floyd\n    Lawrence Berkeley National Laboratory\n\
    \    One Cyclotron Road\n    Berkeley, CA 94720\n    floyd@ee.lbl.gov\n    Allyn\
    \ Romanow\n    Sun Microsystems, Inc.\n    2550 Garcia Ave., MPK17-202\n    Mountain\
    \ View, CA 94043\n    allyn@eng.sun.com\n"
