- title: __initial_text__
  contents:
  - "             The WebSocket Protocol as a Transport for the\n                \
    \   Session Initiation Protocol (SIP)\n"
- title: Abstract
  contents:
  - "Abstract\n   The WebSocket protocol enables two-way real-time communication\n\
    \   between clients and servers in web-based applications.  This document\n  \
    \ specifies a WebSocket subprotocol as a reliable transport mechanism\n   between\
    \ Session Initiation Protocol (SIP) entities to enable use of\n   SIP in web-oriented\
    \ deployments.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7118.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n     2.1.  Definitions . . . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n   3.  The WebSocket Protocol  . . . . . . . . . . . . . . . . .\
    \ . .   3\n   4.  The WebSocket SIP Subprotocol . . . . . . . . . . . . . . .\
    \ .   4\n     4.1.  Handshake . . . . . . . . . . . . . . . . . . . . . . . .\
    \   4\n     4.2.  SIP Encoding  . . . . . . . . . . . . . . . . . . . . . .  \
    \ 5\n   5.  SIP WebSocket Transport . . . . . . . . . . . . . . . . . . .   6\n\
    \     5.1.  Via Transport Parameter . . . . . . . . . . . . . . . . .   6\n  \
    \   5.2.  SIP URI Transport Parameter . . . . . . . . . . . . . . .   6\n    \
    \ 5.3.  Via \"received\" Parameter  . . . . . . . . . . . . . . . .   7\n    \
    \ 5.4.  SIP Transport Implementation Requirements . . . . . . . .   7\n     5.5.\
    \  Locating a SIP Server . . . . . . . . . . . . . . . . . .   8\n   6.  Connection\
    \ Keep-Alive . . . . . . . . . . . . . . . . . . . .   8\n   7.  Authentication\
    \  . . . . . . . . . . . . . . . . . . . . . . .   8\n   8.  Examples  . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . .  10\n     8.1.  Registration  .\
    \ . . . . . . . . . . . . . . . . . . . . .  10\n     8.2.  INVITE Dialog through\
    \ a Proxy . . . . . . . . . . . . . .  12\n   9.  Security Considerations . .\
    \ . . . . . . . . . . . . . . . . .  16\n     9.1.  Secure WebSocket Connection\
    \ . . . . . . . . . . . . . . .  16\n     9.2.  Usage of \"sips\" Scheme  . .\
    \ . . . . . . . . . . . . . . .  16\n   10. IANA Considerations . . . . . . .\
    \ . . . . . . . . . . . . . .  16\n     10.1.  Registration of the WebSocket SIP\
    \ Subprotocol  . . . . .  16\n     10.2.  Registration of New NAPTR Service Field\
    \ Values . . . . .  17\n     10.3.  SIP/SIPS URI Parameters Subregistry  . . .\
    \ . . . . . . .  17\n     10.4.  Header Fields Subregistry  . . . . . . . . .\
    \ . . . . . .  17\n     10.5.  Header Field Parameters and Parameter Values Subregistry\
    \  17\n     10.6.  SIP Transport Subregistry  . . . . . . . . . . . . . . .  18\n\
    \   11. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  18\n  \
    \ 12. References  . . . . . . . . . . . . . . . . . . . . . . . . .  18\n    \
    \ 12.1.  Normative References . . . . . . . . . . . . . . . . . .  18\n     12.2.\
    \  Informative References . . . . . . . . . . . . . . . . .  19\n   Appendix A.\
    \  Authentication Use Cases . . . . . . . . . . . . . .  21\n     A.1.  Just SIP\
    \ Authentication . . . . . . . . . . . . . . . . .  21\n     A.2.  Just Web Authentication\
    \ . . . . . . . . . . . . . . . . .  21\n     A.3.  Cookie-Based Authentication\
    \ . . . . . . . . . . . . . . .  22\n   Appendix B.  Implementation Guidelines\
    \  . . . . . . . . . . . . .  22\n     B.1.  SIP WebSocket Client Considerations\
    \ . . . . . . . . . . .  23\n     B.2.  SIP WebSocket Server Considerations .\
    \ . . . . . . . . . .  24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The WebSocket protocol [RFC6455] enables message exchange\
    \ between\n   clients and servers on top of a persistent TCP connection (optionally\n\
    \   secured with Transport Layer Security (TLS) [RFC5246]).  The initial\n   protocol\
    \ handshake makes use of HTTP [RFC2616] semantics, allowing\n   the WebSocket\
    \ protocol to reuse existing HTTP infrastructure.\n   Modern web browsers include\
    \ a WebSocket client stack complying with\n   the WebSocket API [WS-API] as specified\
    \ by the W3C.  It is expected\n   that other client applications (those running\
    \ in personal computers\n   and devices such as smartphones) will also make a\
    \ WebSocket client\n   stack available.  The specification in this document enables\
    \ use of\n   SIP in these scenarios.\n   This specification defines a WebSocket\
    \ subprotocol (as defined in\n   Section 1.9 of [RFC6455]) for transporting SIP\
    \ messages between a\n   WebSocket client and server, a reliable and message-boundary-\n\
    \   preserving transport for SIP, and DNS Naming Authority Pointer\n   (NAPTR)\
    \ [RFC3403] service values and procedures for SIP entities\n   implementing the\
    \ WebSocket transport.  Media transport is out of the\n   scope of this document.\n\
    \   Section 3 in this specification relaxes the requirement in [RFC3261]\n   by\
    \ which the SIP server transport MUST add a \"received\" parameter in\n   the\
    \ top Via header in certain circumstances.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 2.1.  Definitions
  contents:
  - "2.1.  Definitions\n   SIP WebSocket Client:  A SIP entity capable of opening\
    \ outbound\n         connections to WebSocket servers and communicating using\
    \ the\n         WebSocket SIP subprotocol as defined by this document.\n   SIP\
    \ WebSocket Server:  A SIP entity capable of listening for inbound\n         connections\
    \ from WebSocket clients and communicating using the\n         WebSocket SIP subprotocol\
    \ as defined by this document.\n"
- title: 3.  The WebSocket Protocol
  contents:
  - "3.  The WebSocket Protocol\n   The WebSocket protocol [RFC6455] is a transport\
    \ layer on top of TCP\n   (optionally secured with TLS [RFC5246]) in which both\
    \ client and\n   server exchange message units in both directions.  The protocol\n\
    \   defines a connection handshake, WebSocket subprotocol and extensions\n   negotiation,\
    \ a frame format for sending application and control data,\n   a masking mechanism,\
    \ and status codes for indicating disconnection\n   causes.\n   The WebSocket\
    \ connection handshake is based on HTTP [RFC2616] and\n   utilizes the HTTP GET\
    \ method with an \"Upgrade\" request.  This is sent\n   by the client and then\
    \ answered by the server (if the negotiation\n   succeeded) with an HTTP 101 status\
    \ code.  Once the handshake is\n   completed, the connection upgrades from HTTP\
    \ to the WebSocket\n   protocol.  This handshake procedure is designed to reuse\
    \ the existing\n   HTTP infrastructure.  During the connection handshake, the\
    \ client and\n   server agree on the application protocol to use on top of the\n\
    \   WebSocket transport.  Such an application protocol (also known as a\n   \"\
    WebSocket subprotocol\") defines the format and semantics of the\n   messages\
    \ exchanged by the endpoints.  This could be a custom protocol\n   or a standardized\
    \ one (as defined by the WebSocket SIP subprotocol in\n   this document).  Once\
    \ the HTTP 101 response is processed, both the\n   client and server reuse the\
    \ underlying TCP connection for sending\n   WebSocket messages and control frames\
    \ to each other.  Unlike plain\n   HTTP, this connection is persistent and can\
    \ be used for multiple\n   message exchanges.\n   WebSocket defines message units\
    \ to be used by applications for the\n   exchange of data, so it provides a message-boundary-preserving\n\
    \   transport layer.  These message units can contain either UTF-8 text\n   or\
    \ binary data and can be split into multiple WebSocket text/binary\n   transport\
    \ frames as needed by the WebSocket stack.\n      The WebSocket API [WS-API] for\
    \ web browsers only defines callbacks\n      to be invoked upon receipt of an\
    \ entire message unit, regardless\n      of whether it was received in a single\
    \ WebSocket frame or split\n      across multiple frames.\n"
- title: 4.  The WebSocket SIP Subprotocol
  contents:
  - "4.  The WebSocket SIP Subprotocol\n   The term WebSocket subprotocol refers to\
    \ an application-level\n   protocol layered on top of a WebSocket connection.\
    \  This document\n   specifies the WebSocket SIP subprotocol for carrying SIP\
    \ requests and\n   responses through a WebSocket connection.\n"
- title: 4.1.  Handshake
  contents:
  - "4.1.  Handshake\n   The SIP WebSocket Client and SIP WebSocket Server negotiate\
    \ usage of\n   the WebSocket SIP subprotocol during the WebSocket handshake\n\
    \   procedure as defined in Section 1.3 of [RFC6455].  The client MUST\n   include\
    \ the value \"sip\" in the Sec-WebSocket-Protocol header in its\n   handshake\
    \ request.  The 101 reply from the server MUST contain \"sip\"\n   in its corresponding\
    \ Sec-WebSocket-Protocol header.\n      The WebSocket client initiates a WebSocket\
    \ connection when\n      attempting to send a SIP request (unless there is an\
    \ already\n      established WebSocket connection for sending the SIP request).\
    \  In\n      case there is no HTTP 101 response during the WebSocket handshake,\n\
    \      it is considered a transaction error as per [RFC3261],\n      Section 8.1.3.1.,\
    \ \"Transaction Layer Errors\".\n   Below is an example of a WebSocket handshake\
    \ in which the client\n   requests the WebSocket SIP subprotocol support from\
    \ the server:\n     GET / HTTP/1.1\n     Host: sip-ws.example.com\n     Upgrade:\
    \ websocket\n     Connection: Upgrade\n     Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\n\
    \     Origin: http://www.example.com\n     Sec-WebSocket-Protocol: sip\n     Sec-WebSocket-Version:\
    \ 13\n   The handshake response from the server accepting the WebSocket SIP\n\
    \   subprotocol would look as follows:\n     HTTP/1.1 101 Switching Protocols\n\
    \     Upgrade: websocket\n     Connection: Upgrade\n     Sec-WebSocket-Accept:\
    \ s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n     Sec-WebSocket-Protocol: sip\n   Once the\
    \ negotiation has been completed, the WebSocket connection is\n   established\
    \ and can be used for the transport of SIP requests and\n   responses.  Messages\
    \ other than SIP requests and responses MUST NOT\n   be transmitted over this\
    \ connection.\n"
- title: 4.2.  SIP Encoding
  contents:
  - "4.2.  SIP Encoding\n   WebSocket messages can be transported in either UTF-8\
    \ text frames or\n   binary frames.  SIP [RFC3261] allows both text and binary\
    \ bodies in\n   SIP requests and responses.  Therefore, SIP WebSocket Clients\
    \ and SIP\n   WebSocket Servers MUST accept both text and binary frames.\n   \
    \   If there is at least one non-UTF-8 symbol in the whole SIP message\n     \
    \ (including headers and the body), then the whole message MUST be\n      sent\
    \ within a WebSocket binary message.  Given the nature of\n      JavaScript and\
    \ the WebSocket API, it is RECOMMENDED to use UTF-8\n      encoding (or ASCII,\
    \ which is a subset of UTF-8) for SIP messages\n      carried over a WebSocket\
    \ connection.\n"
- title: 5.  SIP WebSocket Transport
  contents:
  - "5.  SIP WebSocket Transport\n   WebSocket [RFC6455] is a reliable protocol; therefore,\
    \ the SIP\n   WebSocket subprotocol defined by this document is a reliable SIP\n\
    \   transport.  Thus, client and server transactions using WebSocket for\n   transport\
    \ MUST follow the procedures and timer values for reliable\n   transports as defined\
    \ in [RFC3261].\n   Each SIP message MUST be carried within a single WebSocket\
    \ message,\n   and a WebSocket message MUST NOT contain more than one SIP message.\n\
    \   Because the WebSocket transport preserves message boundaries, the use\n  \
    \ of the Content-Length header in SIP messages is not necessary when\n   they\
    \ are transported using the WebSocket subprotocol.\n      This simplifies the\
    \ parsing of SIP messages for both clients and\n      servers.  There is no need\
    \ to establish message boundaries using\n      Content-Length headers between\
    \ messages.  Other SIP transports,\n      such as UDP and the Stream Control Transmission\
    \ Protocol (SCTP)\n      [RFC4168], also provide this benefit.\n"
- title: 5.1.  Via Transport Parameter
  contents:
  - "5.1.  Via Transport Parameter\n   Via header fields in SIP messages carry a transport\
    \ protocol\n   identifier.  This document defines the value \"WS\" to be used\
    \ for\n   requests over plain WebSocket connections and \"WSS\" for requests over\n\
    \   secure WebSocket connections (in which the WebSocket connection is\n   established\
    \ using TLS [RFC5246] with TCP transport).\n   The updated augmented BNF (Backus-Naur\
    \ Form) [RFC5234] for this\n   parameter is the following (the original BNF for\
    \ this parameter can\n   be found in [RFC3261], which was then updated by [RFC4168]):\n\
    \     transport  =/  \"WS\" / \"WSS\"\n"
- title: 5.2.  SIP URI Transport Parameter
  contents:
  - "5.2.  SIP URI Transport Parameter\n   This document defines the value \"ws\"\
    \ as the transport parameter value\n   for a SIP URI [RFC3986] to be contacted\
    \ using the SIP WebSocket\n   subprotocol as transport.\n   The updated augmented\
    \ BNF for this parameter is the following (the\n   original BNF for this parameter\
    \ can be found in [RFC3261]):\n     transport-param  =/  \"transport=\" \"ws\"\
    \n"
- title: 5.3.  Via "received" Parameter
  contents:
  - "5.3.  Via \"received\" Parameter\n   The following is stated in [RFC3261], Section\
    \ 18.2.1, \"Receiving\n   Requests\":\n      When the server transport receives\
    \ a request over any transport,\n      it MUST examine the value of the \"sent-by\"\
    \ parameter in the top\n      Via header field value.  If the host portion of\
    \ the \"sent-by\"\n      field contains a domain name, or if it contains an IP\
    \ address that\n      differs from the packet source address, the server MUST\
    \ add a\n      \"received\" parameter to that Via header field value.  This\n\
    \      parameter MUST contain the source address from which the packet\n     \
    \ was received.\n   The requirement of adding the \"received\" parameter does\
    \ not fit well\n   into the WebSocket protocol design.  The WebSocket connection\n\
    \   handshake reuses the existing HTTP infrastructure in which there\n   could\
    \ be an unknown number of HTTP proxies and/or TCP load balancers\n   between the\
    \ SIP WebSocket Client and Server, so the source address\n   the server would\
    \ write into the Via \"received\" parameter would be the\n   address of the HTTP/TCP\
    \ intermediary in front of it.  This could\n   reveal sensitive information about\
    \ the internal topology of the\n   server's network to the client.\n   Given the\
    \ fact that SIP responses can only be sent over the existing\n   WebSocket connection,\
    \ the Via \"received\" parameter is of little use.\n   Therefore, in order to\
    \ allow hiding possible sensitive information\n   about the SIP WebSocket Server's\
    \ network, this document updates\n   [RFC3261], Section 18.2.1 by stating:\n \
    \     When a SIP WebSocket Server receives a request, it MAY decide not\n    \
    \  to add a \"received\" parameter to the top Via header.  Therefore,\n      SIP\
    \ WebSocket Clients MUST accept responses without such a\n      parameter in the\
    \ top Via header regardless of whether the Via\n      \"sent-by\" field contains\
    \ a domain name.\n"
- title: 5.4.  SIP Transport Implementation Requirements
  contents:
  - "5.4.  SIP Transport Implementation Requirements\n   The following is stated in\
    \ [RFC3261], Section 18, \"Transport\":\n      All SIP elements MUST implement\
    \ UDP and TCP.  SIP elements MAY\n      implement other protocols.\n   The specification\
    \ of this transport enables SIP to be used as a\n   session establishment protocol\
    \ in scenarios where none of the other\n   transport protocols defined for SIP\
    \ can be used.  Since some\n   environments do not enable SIP elements to use\
    \ UDP and TCP as SIP\n   transport protocols, a SIP element acting as a SIP WebSocket\
    \ Client\n   is not mandated to implement support of UDP and TCP.\n"
- title: 5.5.  Locating a SIP Server
  contents:
  - "5.5.  Locating a SIP Server\n   [RFC3263] specifies the procedures that should\
    \ be followed by SIP\n   entities for locating SIP servers.  This specification\
    \ defines the\n   NAPTR service value \"SIP+D2W\" for SIP WebSocket Servers that\
    \ support\n   plain WebSocket connections and \"SIPS+D2W\" for SIP WebSocket Servers\n\
    \   that support secure WebSocket connections.\n      At the time this document\
    \ was written, DNS NAPTR/Service Record\n      (SRV) queries could not be performed\
    \ by commonly available\n      WebSocket client stacks (in JavaScript engines\
    \ and web browsers).\n   In the absence of DNS SRV resource records or an explicit\
    \ port, the\n   default port for a SIP URI using the \"sip\" scheme and the \"\
    ws\"\n   transport parameter is 80, and the default port for a SIP URI using\n\
    \   the \"sips\" scheme and the \"ws\" transport parameter is 443.\n"
- title: 6.  Connection Keep-Alive
  contents:
  - "6.  Connection Keep-Alive\n   SIP WebSocket Clients and Servers may keep their\
    \ WebSocket\n   connections open by sending periodic WebSocket \"Ping\" frames\
    \ as\n   described in [RFC6455], Section 5.5.2.\n      The WebSocket API [WS-API]\
    \ does not provide a mechanism for\n      applications running in a web browser\
    \ to control whether or not\n      periodic WebSocket \"Ping\" frames are sent\
    \ to the server.  The\n      implementation of such a keep-alive feature is the\
    \ decision of\n      each web browser manufacturer and may also depend on the\n\
    \      configuration of the web browser.\n   The indication and use of the CRLF\
    \ NAT keep-alive mechanism defined\n   for SIP connection-oriented transports\
    \ in [RFC5626], Section 3.5.1 or\n   [RFC6223] are, of course, usable over the\
    \ transport defined in this\n   specification.\n"
- title: 7.  Authentication
  contents:
  - "7.  Authentication\n   This section describes how authentication is achieved\
    \ through the\n   requirements in [RFC6455], [RFC6265], [RFC2617], and [RFC3261].\n\
    \   The WebSocket protocol [RFC6455] does not define an authentication\n   mechanism;\
    \ instead, it exposes the following text in Section 10.5,\n   \"WebSocket Client\
    \ Authentication\":\n      This protocol doesn't prescribe any particular way\
    \ that servers\n      can authenticate clients during the WebSocket handshake.\
    \  The\n      WebSocket server can use any client authentication mechanism\n \
    \     available to a generic HTTP server, such as cookies, HTTP\n      authentication,\
    \ or TLS authentication.\n   The following list exposes mandatory-to-implement\
    \ and optional\n   mechanisms for SIP WebSocket Clients and Servers in order to\
    \ get\n   interoperability at the WebSocket authentication level:\n   o  A SIP\
    \ WebSocket Client MUST be ready to add a session cookie when\n      it runs in\
    \ a web browser (or behaves like a browser navigating a\n      website) and has\
    \ previously retrieved a session cookie from the\n      web server whose URL domain\
    \ matches the domain in the WebSocket\n      URI.  This mechanism is defined by\
    \ [RFC6265].\n   o  A SIP WebSocket Client MUST be ready to be challenged with\
    \ an HTTP\n      401 status code [RFC2617] by the SIP WebSocket Server when\n\
    \      performing the WebSocket handshake.\n   o  A SIP WebSocket Client MAY use\
    \ TLS client authentication (when in\n      a secure WebSocket connection) as\
    \ an optional authentication\n      mechanism.\n         Note, however, that TLS\
    \ client authentication in the WebSocket\n         protocol is governed by the\
    \ rules of the HTTP protocol rather\n         than the rules of SIP.\n   o  A\
    \ SIP WebSocket Server MUST be ready to read session cookies when\n      present\
    \ in the WebSocket handshake request and use such a cookie\n      value for determining\
    \ whether the WebSocket connection has been\n      initiated by an HTTP client\
    \ navigating a website in the same\n      domain (or subdomain) as the SIP WebSocket\
    \ Server.\n   o  A SIP WebSocket Server SHOULD be able to reject a WebSocket\n\
    \      handshake request with an HTTP 401 status code by providing a\n      Basic/Digest\
    \ challenge as defined for the HTTP protocol.\n   Regardless of whether or not\
    \ the SIP WebSocket Server requires\n   authentication during the WebSocket handshake,\
    \ authentication MAY be\n   requested at the SIP level.\n   Some authentication\
    \ use cases are exposed in Appendix A.\n"
- title: 8.  Examples
  contents:
  - '8.  Examples

    '
- title: 8.1.  Registration
  contents:
  - "8.1.  Registration\n   Alice    (SIP WSS)    proxy.example.com\n   |        \
    \                     |\n   |HTTP GET (WS handshake) F1   |\n   |---------------------------->|\n\
    \   |101 Switching Protocols F2   |\n   |<----------------------------|\n   |\
    \                             |\n   |REGISTER F3                  |\n   |---------------------------->|\n\
    \   |200 OK F4                    |\n   |<----------------------------|\n   |\
    \                             |\n   Alice loads a web page using her web browser\
    \ and retrieves JavaScript\n   code implementing the WebSocket SIP subprotocol\
    \ defined in this\n   document.  The JavaScript code (a SIP WebSocket Client)\
    \ establishes a\n   secure WebSocket connection with a SIP proxy/registrar (a\
    \ SIP\n   WebSocket Server) at proxy.example.com.  Upon WebSocket connection,\n\
    \   Alice constructs and sends a SIP REGISTER request, including Outbound\n  \
    \ [RFC5626] and Globally Routable User Agent URI (GRUU) [RFC5627]\n   support.\
    \  Since the JavaScript stack in a browser has no way to\n   determine the local\
    \ address from which the WebSocket connection was\n   made, this implementation\
    \ uses a random \".invalid\" domain name for\n   the Via header \"sent-by\" parameter\
    \ and for the hostport of the URI in\n   the Contact header (see Appendix B.1).\n\
    \   Message details (authentication and Session Description Protocol\n   (SDP)\
    \ bodies are omitted for simplicity):\n   F1 HTTP GET (WS handshake)  Alice ->\
    \ proxy.example.com (TLS)\n   GET / HTTP/1.1\n   Host: proxy.example.com\n   Upgrade:\
    \ websocket\n   Connection: Upgrade\n   Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\n\
    \   Origin: https://www.example.com\n   Sec-WebSocket-Protocol: sip\n   Sec-WebSocket-Version:\
    \ 13\n   F2 101 Switching Protocols  proxy.example.com -> Alice (TLS)\n   HTTP/1.1\
    \ 101 Switching Protocols\n   Upgrade: websocket\n   Connection: Upgrade\n   Sec-WebSocket-Accept:\
    \ s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n   Sec-WebSocket-Protocol: sip\n   F3 REGISTER\
    \  Alice -> proxy.example.com (transport WSS)\n   REGISTER sip:proxy.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/WSS df7jal23ls0d.invalid;branch=z9hG4bKasudf\n   From:\
    \ sip:alice@example.com;tag=65bnmj.34asd\n   To: sip:alice@example.com\n   Call-ID:\
    \ aiuy7k9njasd\n   CSeq: 1 REGISTER\n   Max-Forwards: 70\n   Supported: path,\
    \ outbound, gruu\n   Contact: <sip:alice@df7jal23ls0d.invalid;transport=ws>\n\
    \     ;reg-id=1\n     ;+sip.instance=\"<urn:uuid:f81-7dec-14a06cf1>\"\n   F4 200\
    \ OK  proxy.example.com -> Alice (transport WSS)\n   SIP/2.0 200 OK\n   Via: SIP/2.0/WSS\
    \ df7jal23ls0d.invalid;branch=z9hG4bKasudf\n   From: sip:alice@example.com;tag=65bnmj.34asd\n\
    \   To: sip:alice@example.com;tag=12isjljn8\n   Call-ID: aiuy7k9njasd\n   CSeq:\
    \ 1 REGISTER\n   Supported: outbound, gruu\n   Contact: <sip:alice@df7jal23ls0d.invalid;transport=ws>\n\
    \     ;reg-id=1\n     ;+sip.instance=\"<urn:uuid:f81-7dec-14a06cf1>\"\n     ;pub-gruu=\"\
    sip:alice@example.com;gr=urn:uuid:f81-7dec-14a06cf1\"\n     ;temp-gruu=\"sip:87ash54=3dd.98a@example.com;gr\"\
    \n     ;expires=3600\n"
- title: 8.2.  INVITE Dialog through a Proxy
  contents:
  - "8.2.  INVITE Dialog through a Proxy\n   Alice    (SIP WSS)    proxy.example.com\
    \    (SIP UDP)       Bob\n   |                             |                 \
    \            |\n   |INVITE F1                    |                           \
    \  |\n   |---------------------------->|                             |\n   |100\
    \ Trying F2                |                             |\n   |<----------------------------|\
    \                             |\n   |                             |INVITE F3 \
    \                   |\n   |                             |---------------------------->|\n\
    \   |                             |200 OK F4                    |\n   |      \
    \                       |<----------------------------|\n   |200 OK F5       \
    \             |                             |\n   |<----------------------------|\
    \                             |\n   |                             |          \
    \                   |\n   |ACK F6                       |                    \
    \         |\n   |---------------------------->|                             |\n\
    \   |                             |ACK F7                       |\n   |      \
    \                       |---------------------------->|\n   |                \
    \             |                             |\n   |                 Bidirectional\
    \ RTP Media                   |\n   |<=========================================================>|\n\
    \   |                             |                             |\n   |      \
    \                       |BYE F8                       |\n   |                \
    \             |<----------------------------|\n   |BYE F9                    \
    \   |                             |\n   |<----------------------------|      \
    \                       |\n   |200 OK F10                   |                \
    \             |\n   |---------------------------->|                          \
    \   |\n   |                             |200 OK F11                   |\n   |\
    \                             |---------------------------->|\n   |          \
    \                   |                             |\n   In the same scenario,\
    \ Alice places a call to Bob's Address of Record\n   (AOR).  The SIP WebSocket\
    \ Server at proxy.example.com acts as a SIP\n   proxy, routing the INVITE to Bob's\
    \ contact address (which happens to\n   be using SIP transported over UDP).  Bob\
    \ answers the call and then\n   terminates it.\n   Message details (authentication\
    \ and SDP bodies are omitted for\n   simplicity):\n   F1 INVITE  Alice -> proxy.example.com\
    \ (transport WSS)\n   INVITE sip:bob@example.com SIP/2.0\n   Via: SIP/2.0/WSS\
    \ df7jal23ls0d.invalid;branch=z9hG4bK56sdasks\n   From: sip:alice@example.com;tag=asdyka899\n\
    \   To: sip:bob@example.com\n   Call-ID: asidkj3ss\n   CSeq: 1 INVITE\n   Max-Forwards:\
    \ 70\n   Supported: path, outbound, gruu\n   Route: <sip:proxy.example.com:443;transport=ws;lr>\n\
    \   Contact: <sip:alice@example.com\n    ;gr=urn:uuid:f81-7dec-14a06cf1;ob>\n\
    \   Content-Type: application/sdp\n   F2 100 Trying  proxy.example.com -> Alice\
    \ (transport WSS)\n   SIP/2.0 100 Trying\n   Via: SIP/2.0/WSS df7jal23ls0d.invalid;branch=z9hG4bK56sdasks\n\
    \   From: sip:alice@example.com;tag=asdyka899\n   To: sip:bob@example.com\n  \
    \ Call-ID: asidkj3ss\n   CSeq: 1 INVITE\n   F3 INVITE  proxy.example.com -> Bob\
    \ (transport UDP)\n   INVITE sip:bob@203.0.113.22:5060 SIP/2.0\n   Via: SIP/2.0/UDP\
    \ proxy.example.com;branch=z9hG4bKhjhjqw32c\n   Via: SIP/2.0/WSS df7jal23ls0d.invalid;branch=z9hG4bK56sdasks\n\
    \   Record-Route: <sip:proxy.example.com;transport=udp;lr>,\n     <sip:h7kjh12s@proxy.example.com:443;transport=ws;lr>\n\
    \   From: sip:alice@example.com;tag=asdyka899\n   To: sip:bob@example.com\n  \
    \ Call-ID: asidkj3ss\n   CSeq: 1 INVITE\n   Max-Forwards: 69\n   Supported: path,\
    \ outbound, gruu\n   Contact: <sip:alice@example.com\n     ;gr=urn:uuid:f81-7dec-14a06cf1;ob>\n\
    \   Content-Type: application/sdp\n   F4 200 OK  Bob -> proxy.example.com (transport\
    \ UDP)\n   SIP/2.0 200 OK\n   Via: SIP/2.0/UDP proxy.example.com;branch=z9hG4bKhjhjqw32c\n\
    \     ;received=192.0.2.10\n   Via: SIP/2.0/WSS df7jal23ls0d.invalid;branch=z9hG4bK56sdasks\n\
    \   Record-Route: <sip:proxy.example.com;transport=udp;lr>,\n     <sip:h7kjh12s@proxy.example.com:443;transport=ws;lr>\n\
    \   From: sip:alice@example.com;tag=asdyka899\n   To: sip:bob@example.com;tag=bmqkjhsd\n\
    \   Call-ID: asidkj3ss\n   CSeq: 1 INVITE\n   Contact: <sip:bob@203.0.113.22:5060;transport=udp>\n\
    \   Content-Type: application/sdp\n   F5 200 OK  proxy.example.com -> Alice (transport\
    \ WSS)\n   SIP/2.0 200 OK\n   Via: SIP/2.0/WSS df7jal23ls0d.invalid;branch=z9hG4bK56sdasks\n\
    \   Record-Route: <sip:proxy.example.com;transport=udp;lr>,\n     <sip:h7kjh12s@proxy.example.com:443;transport=ws;lr>\n\
    \   From: sip:alice@example.com;tag=asdyka899\n   To: sip:bob@example.com;tag=bmqkjhsd\n\
    \   Call-ID: asidkj3ss\n   CSeq: 1 INVITE\n   Contact: <sip:bob@203.0.113.22:5060;transport=udp>\n\
    \   Content-Type: application/sdp\n   F6 ACK  Alice -> proxy.example.com (transport\
    \ WSS)\n   ACK sip:bob@203.0.113.22:5060;transport=udp SIP/2.0\n   Via: SIP/2.0/WSS\
    \ df7jal23ls0d.invalid;branch=z9hG4bKhgqqp090\n   Route: <sip:h7kjh12s@proxy.example.com:443;transport=ws;lr>,\n\
    \     <sip:proxy.example.com;transport=udp;lr>,\n   From: sip:alice@example.com;tag=asdyka899\n\
    \   To: sip:bob@example.com;tag=bmqkjhsd\n   Call-ID: asidkj3ss\n   CSeq: 1 ACK\n\
    \   Max-Forwards: 70\n   F7 ACK  proxy.example.com -> Bob (transport UDP)\n  \
    \ ACK sip:bob@203.0.113.22:5060;transport=udp SIP/2.0\n   Via: SIP/2.0/UDP proxy.example.com;branch=z9hG4bKhwpoc80zzx\n\
    \   Via: SIP/2.0/WSS df7jal23ls0d.invalid;branch=z9hG4bKhgqqp090\n   From: sip:alice@example.com;tag=asdyka899\n\
    \   To: sip:bob@example.com;tag=bmqkjhsd\n   Call-ID: asidkj3ss\n   CSeq: 1 ACK\n\
    \   Max-Forwards: 69\n   F8 BYE  Bob -> proxy.example.com (transport UDP)\n  \
    \ BYE sip:alice@example.com;gr=urn:uuid:f81-7dec-14a06cf1;ob SIP/2.0\n   Via:\
    \ SIP/2.0/UDP 203.0.113.22;branch=z9hG4bKbiuiansd001\n   Route: <sip:proxy.example.com;transport=udp;lr>,\n\
    \     <sip:h7kjh12s@proxy.example.com:443;transport=ws;lr>\n   From: sip:bob@example.com;tag=bmqkjhsd\n\
    \   To: sip:alice@example.com;tag=asdyka899\n   Call-ID: asidkj3ss\n   CSeq: 1201\
    \ BYE\n   Max-Forwards: 70\n   F9 BYE  proxy.example.com -> Alice (transport WSS)\n\
    \   BYE sip:alice@example.com;gr=urn:uuid:f81-7dec-14a06cf1;ob SIP/2.0\n   Via:\
    \ SIP/2.0/WSS proxy.example.com:443;branch=z9hG4bKmma01m3r5\n   Via: SIP/2.0/UDP\
    \ 203.0.113.22;branch=z9hG4bKbiuiansd001\n   From: sip:bob@example.com;tag=bmqkjhsd\n\
    \   To: sip:alice@example.com;tag=asdyka899\n   Call-ID: asidkj3ss\n   CSeq: 1201\
    \ BYE\n   Max-Forwards: 69\n   F10 200 OK  Alice -> proxy.example.com (transport\
    \ WSS)\n   SIP/2.0 200 OK\n   Via: SIP/2.0/WSS proxy.example.com:443;branch=z9hG4bKmma01m3r5\n\
    \   Via: SIP/2.0/UDP 203.0.113.22;branch=z9hG4bKbiuiansd001\n   From: sip:bob@example.com;tag=bmqkjhsd\n\
    \   To: sip:alice@example.com;tag=asdyka899\n   Call-ID: asidkj3ss\n   CSeq: 1201\
    \ BYE\n   F11 200 OK  proxy.example.com -> Bob (transport UDP)\n   SIP/2.0 200\
    \ OK\n   Via: SIP/2.0/UDP 203.0.113.22;branch=z9hG4bKbiuiansd001\n   From: sip:bob@example.com;tag=bmqkjhsd\n\
    \   To: sip:alice@example.com;tag=asdyka899\n   Call-ID: asidkj3ss\n   CSeq: 1201\
    \ BYE\n"
- title: 9.  Security Considerations
  contents:
  - '9.  Security Considerations

    '
- title: 9.1.  Secure WebSocket Connection
  contents:
  - "9.1.  Secure WebSocket Connection\n   It is RECOMMENDED that the SIP traffic\
    \ transported over a WebSocket\n   communication be protected by using a secure\
    \ WebSocket connection\n   (using TLS [RFC5246] over TCP).\n   When establishing\
    \ a connection using SIP over secure WebSocket\n   transport, the client MUST\
    \ authenticate the server using the server's\n   certificate according to the\
    \ WebSocket validation procedure in\n   [RFC6455].\n      Server operators should\
    \ note that this authentication procedure is\n      different from the procedure\
    \ for SIP domain certificates defined\n      in [RFC5922].  Certificates that\
    \ are appropriate for SIP over TLS\n      over TCP will probably not be appropriate\
    \ for SIP over secure\n      WebSocket connections.\n"
- title: 9.2.  Usage of "sips" Scheme
  contents:
  - "9.2.  Usage of \"sips\" Scheme\n   The \"sips\" scheme in a SIP URI dictates\
    \ that the entire request path\n   to the target be secure.  If such a path includes\
    \ a WebSocket\n   connection, it MUST be a secure WebSocket connection.\n"
- title: 10.  IANA Considerations
  contents:
  - '10.  IANA Considerations

    '
- title: 10.1.  Registration of the WebSocket SIP Subprotocol
  contents:
  - "10.1.  Registration of the WebSocket SIP Subprotocol\n   IANA has registered\
    \ the WebSocket SIP subprotocol under the\n   \"WebSocket Subprotocol Name\" registry\
    \ with the following data:\n   Subprotocol Identifier:  sip\n   Subprotocol Common\
    \ Name:  WebSocket Transport for SIP (Session\n      Initiation Protocol)\n  \
    \ Subprotocol Definition:  [RFC7118]\n"
- title: 10.2.  Registration of New NAPTR Service Field Values
  contents:
  - "10.2.  Registration of New NAPTR Service Field Values\n   This document defines\
    \ two new NAPTR service field values (SIP+D2W and\n   SIPS+D2W) and IANA has registered\
    \ these values under the \"Registry\n   for the Session Initiation Protocol (SIP)\
    \ NAPTR Resource Record\n   Services Field\".  The entries are as follows:\n \
    \  Services Field   Protocol   Reference\n   --------------   --------   ---------\n\
    \   SIP+D2W          WS         [RFC7118]\n   SIPS+D2W         WS         [RFC7118]\n"
- title: 10.3.  SIP/SIPS URI Parameters Subregistry
  contents:
  - "10.3.  SIP/SIPS URI Parameters Subregistry\n   IANA has added a reference to\
    \ this document under the \"SIP/SIPS URI\n   Parameters\" subregistry within the\
    \ \"Session Initiation Protocol (SIP)\n   Parameters\" registry:\n   Parameter\
    \ Name   Predefined Values   Reference\n   --------------   -----------------\
    \   ---------\n   transport        Yes                 [RFC3261][RFC7118]\n"
- title: 10.4.  Header Fields Subregistry
  contents:
  - "10.4.  Header Fields Subregistry\n   IANA has added a reference to this document\
    \ under the \"Header Fields\"\n   subregistry within the \"Session Initiation\
    \ Protocol (SIP) Parameters\"\n   registry:\n   Header Name   compact   Reference\n\
    \   -----------   -------   ---------\n   Via           v         [RFC3261][RFC7118]\n"
- title: 10.5.  Header Field Parameters and Parameter Values Subregistry
  contents:
  - "10.5.  Header Field Parameters and Parameter Values Subregistry\n   IANA has\
    \ added a reference to this document under the \"Header Field\n   Parameters and\
    \ Parameter Values\" subregistry within the \"Session\n   Initiation Protocol\
    \ (SIP) Parameters\" registry:\n                                 Predefined\n\
    \   Header Field  Parameter Name  Values  Reference\n   ------------  --------------\
    \  ------  ---------\n   Via           received        No      [RFC3261][RFC7118]\n"
- title: 10.6.  SIP Transport Subregistry
  contents:
  - "10.6.  SIP Transport Subregistry\n   This document adds a new subregistry, \"\
    SIP Transport\", to the\n   \"Session Initiation Protocol (SIP) Parameters\" registry.\
    \  Its format\n   and initial values are as shown in the following table:\n  \
    \ +------------+------------------------+\n   | Transport  | Reference       \
    \       |\n   +------------+------------------------+\n   | UDP        | [RFC3261]\
    \              |\n   | TCP        | [RFC3261]              |\n   | TLS       \
    \ | [RFC3261]              |\n   | SCTP       | [RFC3261], [RFC4168]   |\n   |\
    \ TLS-SCTP   | [RFC4168]              |\n   | WS         | [RFC7118]         \
    \     |\n   | WSS        | [RFC7118]              |\n   +------------+------------------------+\n\
    \   The policy for registration of values in this registry is \"Standards\n  \
    \ Action\" [RFC5226].\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   Special thanks to the following people who participated\
    \ in\n   discussions on the SIPCORE and RTCWEB WG mailing lists and\n   contributed\
    \ ideas and/or provided detailed reviews (the list is\n   likely to be incomplete):\
    \ Hadriel Kaplan, Paul Kyzivat, Robert\n   Sparks, Adam Roach, Ranjit Avasarala,\
    \ Xavier Marjou, Nataraju A. B.,\n   Martin Vopatek, Alexey Melnikov, Alan Johnston,\
    \ Christer Holmberg,\n   Salvatore Loreto, Kevin P. Fleming, Suresh Krishnan,\
    \ Yaron Sheffer,\n   Richard Barnes, Barry Leiba, Stephen Farrell, Ted Lemon,\
    \ Benoit\n   Claise, Pete Resnick, Binod P.G., and Saul Ibarra Corretge.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2617]  Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence,\
    \ S.,\n              Leach, P., Luotonen, A., and L. Stewart, \"HTTP\n       \
    \       Authentication: Basic and Digest Access Authentication\",\n          \
    \    RFC 2617, June 1999.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston,\n              A., Peterson, J., Sparks, R., Handley, M., and\
    \ E.\n              Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n\
    \              June 2002.\n   [RFC3263]  Rosenberg, J. and H. Schulzrinne, \"\
    Session Initiation\n              Protocol (SIP): Locating SIP Servers\", RFC\
    \ 3263, June\n              2002.\n   [RFC3403]  Mealling, M., \"Dynamic Delegation\
    \ Discovery System (DDDS)\n              Part Three: The Domain Name System (DNS)\
    \ Database\", RFC\n              3403, October 2002.\n   [RFC5226]  Narten, T.\
    \ and H. Alvestrand, \"Guidelines for Writing an\n              IANA Considerations\
    \ Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n   [RFC5234]\
    \  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:\
    \ ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5246]  Dierks, T. and E. Rescorla,\
    \ \"The Transport Layer Security\n              (TLS) Protocol Version 1.2\",\
    \ RFC 5246, August 2008.\n   [RFC6265]  Barth, A., \"HTTP State Management Mechanism\"\
    , RFC 6265,\n              April 2011.\n   [RFC6455]  Fette, I. and A. Melnikov,\
    \ \"The WebSocket Protocol\", RFC\n              6455, December 2011.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [RFC2606]  Eastlake, D. and A. Panitz, \"Reserved\
    \ Top Level DNS\n              Names\", BCP 32, RFC 2606, June 1999.\n   [RFC2616]\
    \  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter,\
    \ L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol\
    \ -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC3327]  Willis, D. and B. Hoeneisen,\
    \ \"Session Initiation Protocol\n              (SIP) Extension Header Field for\
    \ Registering Non-Adjacent\n              Contacts\", RFC 3327, December 2002.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66, RFC\n       \
    \       3986, January 2005.\n   [RFC4168]  Rosenberg, J., Schulzrinne, H., and\
    \ G. Camarillo, \"The\n              Stream Control Transmission Protocol (SCTP)\
    \ as a Transport\n              for the Session Initiation Protocol (SIP)\", RFC\
    \ 4168,\n              October 2005.\n   [RFC5626]  Jennings, C., Mahy, R., and\
    \ F. Audet, \"Managing Client-\n              Initiated Connections in the Session\
    \ Initiation Protocol\n              (SIP)\", RFC 5626, October 2009.\n   [RFC5627]\
    \  Rosenberg, J., \"Obtaining and Using Globally Routable User\n             \
    \ Agent URIs (GRUUs) in the Session Initiation Protocol\n              (SIP)\"\
    , RFC 5627, October 2009.\n   [RFC5922]  Gurbani, V., Lawrence, S., and A. Jeffrey,\
    \ \"Domain\n              Certificates in the Session Initiation Protocol (SIP)\"\
    ,\n              RFC 5922, June 2010.\n   [RFC6223]  Holmberg, C., \"Indication\
    \ of Support for Keep-Alive\", RFC\n              6223, April 2011.\n   [WS-API]\
    \   W3C and I. Hickson, Ed., \"The WebSocket API\", September\n              2012.\n"
- title: Appendix A.  Authentication Use Cases
  contents:
  - "Appendix A.  Authentication Use Cases\n   The sections below briefly describe\
    \ some SIP over WebSocket scenarios\n   in which authentication takes place in\
    \ different ways.\n"
- title: A.1.  Just SIP Authentication
  contents:
  - "A.1.  Just SIP Authentication\n   SIP Private Branch Exchange (PBX) model A implements\
    \ the SIP\n   WebSocket transport defined by this specification.  Its\n   implementation\
    \ is 100% website agnostic as it does not share\n   information with the web server\
    \ providing the HTML code to browsers,\n   meaning that the SIP WebSocket Server\
    \ (here, PBX model A) has no\n   knowledge about web login activity within the\
    \ website.\n   In this simple scenario, the SIP WebSocket Server does not inspect\n\
    \   fields in the WebSocket handshake HTTP GET request such as the\n   request\
    \ URL, the Origin header value, the Host header value, or the\n   Cookie header\
    \ value (if present).  However, some of those fields\n   could be inspected for\
    \ a minimal validation (i.e., PBX model A could\n   require that the Origin header\
    \ value contains a specific URL so just\n   users navigating such a website would\
    \ be able to establish a\n   WebSocket connection with PBX model A).\n   Once\
    \ the WebSocket connection has been established, SIP\n   authentication is requested\
    \ by PBX model A for each SIP request\n   coming over that connection.  Therefore,\
    \ SIP WebSocket Clients must\n   be provisioned with their corresponding SIP password.\n"
- title: A.2.  Just Web Authentication
  contents:
  - "A.2.  Just Web Authentication\n   A SIP-to-PSTN (Public Switched Telephone Network)\
    \ provider offers\n   telephony service for clients logged into its website. \
    \ The provider\n   does not want to expose SIP passwords into the web for security/\n\
    \   privacy reasons.\n   Once the user is logged into the web, the web server\
    \ provides him\n   with a SIP identity (SIP URI) and a session temporary token\
    \ string\n   (along with the SIP WebSocket Client JavaScript application and SIP\n\
    \   settings).  The web server stores the SIP identity and session token\n   into\
    \ a database.\n   The web application adds the SIP identity and session token\
    \ as URL\n   query parameters in the WebSocket handshake request and attempts\
    \ the\n   connection.  The SIP WebSocket Server inspects the handshake request\n\
    \   and validates that the session token matches the value stored in the\n   database\
    \ for the given SIP identity.  In case the value matches, the\n   WebSocket connection\
    \ gets \"authenticated\" for that SIP identity.  The\n   SIP WebSocket Client\
    \ can then register and make calls.  The SIP\n   WebSocket Server would, however,\
    \ verify that the identity in those\n   SIP requests (i.e., the From URI value)\
    \ matches the SIP identity the\n   WebSocket connection is associated to (otherwise,\
    \ the SIP request is\n   rejected).\n   When the user performs a logout action\
    \ in the web, the web server\n   removes the SIP identity and session token tuple\
    \ from the database\n   and notifies the SIP WebSocket Server, which revokes and\
    \ closes the\n   WebSocket connection.\n   No SIP authentication takes place in\
    \ this scenario.\n"
- title: A.3.  Cookie-Based Authentication
  contents:
  - "A.3.  Cookie-Based Authentication\n   The Apache web server comes with a new\
    \ module: mod_sip_websocket.  In\n   port 80, the web server is configured to\
    \ listen for both HTTP common\n   requests and WebSocket handshake requests. \
    \ Therefore, both the web\n   server and the SIP WebSocket Server are co-located\
    \ within the same\n   host and same domain.\n   Once the user is logged into the\
    \ web, he is provided with the SIP\n   WebSocket Client JavaScript application\
    \ and SIP settings.  The HTTP\n   200 response after the login procedure also\
    \ contains a session cookie\n   [RFC6265].  The web application then attempts\
    \ a WebSocket connection\n   against the same URL/domain of the website, and thus\
    \ the session\n   cookie is automatically added by the browser into the WebSocket\n\
    \   handshake request (as the WebSocket protocol [RFC6455] states).\n   The web\
    \ server inspects the cookie value (as it would do for a common\n   HTTP request\
    \ containing a session cookie so that the login procedure\n   is not required\
    \ again).  If the cookie is valid, the WebSocket\n   connection is authorized.\
    \  And, as in the previous use case, the\n   connection is also associated with\
    \ a specific SIP identity that must\n   be satisfied by every SIP request coming\
    \ over that connection.\n   No SIP authentication takes place in this scenario\
    \ but just common\n   cookie usage as widely deployed in the World Wide Web.\n"
- title: Appendix B.  Implementation Guidelines
  contents:
  - "Appendix B.  Implementation Guidelines\n   Let us assume a scenario in which\
    \ the users access with their web\n   browsers (probably behind NAT) an application\
    \ provided by a server on\n   an intranet, login by entering their user identifier\
    \ and credentials,\n   and retrieve a JavaScript application (along with the HTML)\n\
    \   implementing a SIP WebSocket Client.\n   Such a SIP stack connects to a given\
    \ SIP WebSocket Server (an\n   outbound SIP proxy that also implements classic\
    \ SIP transports such\n   as UDP and TCP).  The HTTP GET method request sent by\
    \ the web browser\n   for the WebSocket handshake includes a Cookie [RFC6265]\
    \ header with\n   the value previously provided by the server after the successful\n\
    \   login procedure.  The cookie value is then inspected by the WebSocket\n  \
    \ server to authorize the connection.  Once the WebSocket connection is\n   established,\
    \ the SIP WebSocket Client performs a SIP registration to\n   a SIP registrar\
    \ server that is reachable through the proxy.  After\n   registration, the SIP\
    \ WebSocket Client and Server exchange SIP\n   messages as would normally be expected.\n\
    \   This scenario is quite similar to ones in which SIP user agents (UAs)\n  \
    \ behind NATs connect to a proxy and must reuse the same TCP connection\n   for\
    \ incoming requests (because they are not directly reachable by the\n   proxy\
    \ otherwise).  In both cases, the SIP UAs are only reachable\n   through the proxy\
    \ to which they are connected.\n   The SIP Outbound extension [RFC5626] seems\
    \ an appropriate solution\n   for this scenario.  Therefore, these SIP WebSocket\
    \ Clients and the\n   SIP registrar implement both the Outbound and Path [RFC3327]\n\
    \   extensions, and the SIP proxy acts as an Outbound Edge Proxy (as\n   defined\
    \ in [RFC5626], Section 3.4).\n   SIP WebSocket Clients in this scenario receive\
    \ incoming SIP requests\n   via the SIP WebSocket Server to which they are connected.\
    \  Therefore,\n   in some call transfer cases, the use of GRUU [RFC5627] (which\
    \ should\n   be implemented in both the SIP WebSocket Clients and SIP registrar)\n\
    \   is valuable.\n      If a REFER request is sent to a third SIP user agent including\
    \ the\n      Contact URI of a SIP WebSocket Client as the target in its\n    \
    \  Refer-To header field, such a URI will be reachable by the third\n      SIP\
    \ UA only if it is a globally routable URI.  GRUU (Globally\n      Routable User\
    \ Agent URI) is a solution for those scenarios and\n      would cause the incoming\
    \ request from the third SIP user agent to\n      be sent to the SIP registrar,\
    \ which would route the request to the\n      SIP WebSocket Client via the Outbound\
    \ Edge Proxy.\n"
- title: B.1.  SIP WebSocket Client Considerations
  contents:
  - "B.1.  SIP WebSocket Client Considerations\n   The JavaScript stack in web browsers\
    \ does not have the ability to\n   discover the local transport address used for\
    \ originating WebSocket\n   connections.  A SIP WebSocket Client running in such\
    \ an environment\n   can construct a domain name consisting of a random token\
    \ followed by\n   the \".invalid\" top-level domain name, as stated in [RFC2606],\
    \ and\n   uses it within its Via and Contact headers.\n      The Contact URI provided\
    \ by SIP UAs requesting (and receiving)\n      Outbound support is not used for\
    \ routing requests to those UAs,\n      thus it is safe to set a random domain\
    \ in the Contact URI\n      hostport.\n   Both the Outbound and GRUU specifications\
    \ require a SIP UA to include\n   a Uniform Resource Name (URN) in a \"+sip.instance\"\
    \ parameter of the\n   Contact header in which they include their SIP REGISTER\
    \ requests.\n   The client device is responsible for generating or collecting\
    \ a\n   suitable value for this purpose.\n      In web browsers, it is difficult\
    \ to generate or collect a suitable\n      value to be used as an URN value from\
    \ the browser itself.  This\n      scenario suggests that value is generated according\
    \ to [RFC5626],\n      Section 4.1 by the web application running in the browser\
    \ the\n      first time it loads the JavaScript SIP stack code, and then it is\n\
    \      stored as a cookie within the browser.\n"
- title: B.2.  SIP WebSocket Server Considerations
  contents:
  - "B.2.  SIP WebSocket Server Considerations\n   The SIP WebSocket Server in this\
    \ scenario behaves as a SIP Outbound\n   Edge Proxy, which involves support for\
    \ Outbound [RFC5626] and Path\n   [RFC3327].\n   The proxy performs loose routing\
    \ and remains in the path of dialogs\n   as specified in [RFC3261].  If it did\
    \ not do this, in-dialog requests\n   would fail since SIP WebSocket Clients make\
    \ use of their SIP\n   WebSocket Server in order to send and receive SIP messages.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Inaki Baz Castillo\n   Versatica\n   Barakaldo, Basque\
    \ Country\n   Spain\n   EMail: ibc@aliax.net\n   Jose Luis Millan Villegas\n \
    \  Versatica\n   Bilbao, Basque Country\n   Spain\n   EMail: jmillan@aliax.net\n\
    \   Victor Pascual\n   Quobis\n   Spain\n   EMail: victor.pascual@quobis.com\n"
