- title: __initial_text__
  contents:
  - "             Verizon Wireless Dynamic Mobile IP Key Update\n                \
    \       for cdma2000(R) Networks\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This document describes an existing deployed technology that was\n\
    \   developed outside the IETF.  It utilizes the RADIUS Access-Reject in\n   order\
    \ to provision service, which is incompatible with the RADIUS\n   protocol, and\
    \ practices the sharing of secret keys in public-key\n   cryptosystems, which\
    \ is not a practice the IETF recommends.  The IESG\n   recommends against using\
    \ this protocol as a basis for solving similar\n   problems in the future.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Verizon Wireless Dynamic Mobile IP Key Update procedure is a\n\
    \   mechanism for distributing and updating Mobile IP (MIP) cryptographic\n  \
    \ keys in cdma2000(R) networks (including High Rate Packet Data, which\n   is\
    \ often referred to as 1xEV-DO).  The Dynamic Mobile IP Key Update\n   (DMU) procedure\
    \ occurs between the MIP Mobile Node (MN) and RADIUS\n    Authentication, Authorization\
    \ and Accounting (AAA) Server via a\n   cdma2000(R) Packet Data Serving Node (PDSN)\
    \ that is acting as a\n   Mobile IP Foreign Agent (FA).\n   cdma2000(R) is a registered\
    \ trademark of the Telecommunications\n   Industry Association (TIA).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Conventions Used in This Document ..........................3\n  \
    \ 2. Basic Dynamic MIP Key Update Mechanism ..........................3\n    \
    \  2.1. RSA Encrypted Key Distribution .............................4\n      2.2.\
    \ Mutual Authentication (1X) .................................5\n      2.3. Encrypted\
    \ Password Authentication ..........................8\n   3. Dynamic MIP Key Update\
    \ Advantages over OTASP ...................10\n   4. Detailed DMU Procedure Description\
    \ and Requirements ............10\n      4.1. RSA Public Key Cryptography ...............................11\n\
    \      4.2. Other Public Key Algorithms ...............................11\n  \
    \    4.3. Why No Public Key Infrastructure (PKI)? ...................11\n    \
    \  4.4. Cryptographic Key Generation ..............................12\n      4.5.\
    \ MIP_Key_Data Payload ......................................12\n      4.6. RSA\
    \ Key Management ........................................13\n      4.7. RADIUS\
    \ AAA Server .........................................14\n      4.8. MN (Handset\
    \ or Modem) .....................................16\n      4.9. PDSN / Foreign\
    \ Agent (FA) .................................19\n      4.10. Home Agent (HA)\
    \ ..........................................20\n      4.11. DMU Procedure Network\
    \ Flow ...............................20\n   5. DMU Procedure Failure Operation\
    \ ................................25\n   6. cdma2000(R) HRPD/1xEV-DO Support ...............................28\n\
    \      6.1. RADIUS AAA Support ........................................28\n  \
    \    6.2. MN Support ................................................29\n    \
    \  6.3. Informative: MN_Authenticator Support .....................30\n   7. Security\
    \ Considerations ........................................31\n      7.1. Cryptographic\
    \ Key Generation by the MN ....................31\n      7.2. Man-in-the-Middle\
    \ Attack ..................................31\n      7.3. RSA Private Key Compromise\
    \ ................................32\n      7.4. RSA Encryption ............................................32\n\
    \      7.5. False Base Station/PDSN ...................................32\n  \
    \    7.6. cdma2000(R) 1X False MN ...................................32\n    \
    \  7.7. HRPD/1xEV-DO False MN .....................................32\n      7.8.\
    \ Key Lifetimes .............................................32\n      7.9. Network\
    \ Message Security ..................................33\n   8. Verizon Wireless\
    \ RADIUS Attributes .............................33\n   9. Verizon Wireless Mobile\
    \ IP Extensions ..........................34\n   10. Public Key Identifier and\
    \ DMU Version .........................36\n   11. Conclusion ....................................................40\n\
    \   12. Normative References ..........................................41\n  \
    \ 13. Informative References ........................................41\n   14.\
    \ Acknowledgments ...............................................42\n   Appendix\
    \ A. Cleartext-Mode Operation ..............................43\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Verizon Wireless Dynamic Mobile IP Key Update procedure\
    \ is a\n   mechanism for distributing and updating Mobile IP (MIP) cryptographic\n\
    \   keys in cdma2000(R) 1xRTT (1X) [2] and High Rate Packet Data (HRPD) /\n  \
    \ 1xEV-DO networks [3].  The Dynamic Mobile IP Key Update (DMU)\n   procedure\
    \ occurs between the Mobile IP Mobile Node (MN) and the home\n   RADIUS [4] (or\
    \ Diameter [5]) Authentication, Authorization and\n   Accounting (AAA) Server\
    \ via a cdma2000(R) Packet Data Serving Node\n   (PDSN) that is acting as a Mobile\
    \ IP Foreign Agent (FA).  (In this\n   document, we use the acronym AAAH to indicate\
    \ the home AAA server as\n   opposed to an AAA server that may be located in a\
    \ visited system.)\n   This procedure is intended to support wireless systems\
    \ conforming to\n   Telecommunications Industry Association (TIA) TR-45 Standard\
    \ IS-835\n   [6].  DMU, however, could be performed in any MIP network to enable\n\
    \   bootstrapping of a shared secret between the Mobile Node (MN) and\n   RADIUS\
    \ AAA Server.\n   The DMU procedure utilizes RSA public key cryptography to securely\n\
    \   distribute unique MIP keys to potentially millions of cdma2000(R) 1X\n   and\
    \ HRPD/1xEV-DO Mobile Nodes (MN) using the same RSA public key.\n   By leveraging\
    \ the existing cdma2000(R) 1X authentication process, the\n   Dynamic Mobile IP\
    \ Key Update process employs a mutual authentication\n   mechanism in which device-to-network\
    \ authentication is facilitated\n   using cdma2000(R) 1X challenge-response authentication,\
    \ and network-\n   to-device authentication is facilitated using RSA encryption.\n\
    \   By utilizing RSA encryption, the MN (or MN manufacturer) is able to\n   pre-generate\
    \ MIP keys (and the Challenge Handshake Authentication\n   Protocol (CHAP) key)\
    \ and pre-encrypt the MIP keys prior to initiation\n   of the DMU procedure. \
    \ By employing this pre-computation capability,\n   the DMU process requires less\
    \ computation (by an order of magnitude)\n   during the key exchange than Diffie-Hellman\
    \ Key Exchange.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [1].\n"
- title: 2.  Basic Dynamic MIP Key Update Mechanism
  contents:
  - "2.  Basic Dynamic MIP Key Update Mechanism\n   The DMU procedure is basically\
    \ an authentication and key distribution\n   protocol that is more easily understood\
    \ by separately describing the\n   mechanism's two functional goals: 1) encrypted\
    \ key distribution and\n   2) mutual authentication.\n"
- title: 2.1.  RSA Encrypted Key Distribution
  contents:
  - "2.1.  RSA Encrypted Key Distribution\n   By utilizing RSA public key cryptography,\
    \ MNs can be pre-loaded with\n   a common RSA public (encryption) key (by the\
    \ MN manufacturer), while\n   the associated RSA Private (decryption) key is securely\
    \ distributed\n   from the MN manufacturer to a trusted service provider.\n  \
    \ Alternatively, a service provider can generate its own RSA\n   public/private\
    \ key pair and only distribute the RSA public key to MN\n   manufacturers for\
    \ pre-loading of MNs.\n   During the manufacturing process, the MN manufacturer\
    \ pre-loads each\n   MN with the RSA public key.  When the MN is powered-up (or\
    \ client\n   application initiated), the MN can pre-generate and encrypt MIP keys\n\
    \   for distribution to the Home RADIUS AAA Server during the DMU\n   process.\
    \  Alternatively, the MN manufacturer can pre-generate MIP\n   keys, encrypt the\
    \ MIP key payload, and pre-load the MN with multiple\n   encrypted MIP key payloads\
    \ to enable the DMU procedure.\n   During the initial registration process (or\
    \ when the AAA requires MIP\n   key update), the MN: 1) generates the appropriate\
    \ MIP keys, CHAP key,\n   and authentication information, 2) uses the embedded\
    \ RSA public key\n   to encrypt the payload information, 3) and appends the payload\
    \ to the\n   MIP Registration Request.  The Registration Request is sent to the\n\
    \   Mobile IP Foreign Agent (FA) via the cellular Base Station (BS) and\n   Packet\
    \ Data Serving Node (PDSN).  When the RADIUS AAA Server receives\n   the encrypted\
    \ payload (defined later as MIP_Key_Data), the AAA Server\n   uses the RSA Private\
    \ key to decrypt the payload and recover the MIP\n   keys.\n              MN \
    \                BS/PDSN/FA                 AAA\n              --            \
    \     ----------                 ---\n               |                     | \
    \                      |\n       ------------------            |             \
    \ -------------------\n      |  RSA Public Key  |           |             |  RSA\
    \ Private Key  |\n      |  Pre-loaded by   |           |             |  Pre-loaded\
    \ by    |\n      |  Manufacturer    |           |             |  Service Provider\
    \ |\n       ------------------            |               -------------------\n\
    \               |  Registration Request,                      |\n            \
    \   |  (MIP keys), RSA    |                       |\n               |  Public\
    \ Key         |                       |\n               |-------------------->|\
    \                       |\n               |                     |  Access Request,\
    \ (MIP keys),\n               |                     |  RSA Public Key       |\n\
    \               |                     |---------------------->|\n            \
    \   |                     |              -------------------\n               |\
    \                     |             |  Decrypt MIP      |\n               |  \
    \                   |             |  Keys using RSA   |\n               |    \
    \                 |             |  Private Key      |\n               |      \
    \               |              -------------------\n                 Figure 1.\
    \  RSA Encrypted Key Distribution\n"
- title: 2.2.  Mutual Authentication (1X)
  contents:
  - "2.2.  Mutual Authentication (1X)\n   Mutual authentication can be achieved by\
    \ delegation of the MN/device\n   authentication by the RADIUS AAA Server to the\
    \ cdma2000(R) 1X Home\n   Location Register (HLR) and its associated Authentication\
    \ Center (AC)\n   [7], while the MN utilizes RSA encryption to authenticate the\
    \ RADIUS\n   AAA Server.\n   MN/device authentication via an HLR/AC is based on\
    \ the assumption\n   that the MN's Mobile Station (MS) has an existing Authentication\
    \ Key\n   (A-key) and Shared Secret Data (SSD) with the cdma2000(R) 1X network.\n\
    \   When MS call origination occurs, the AC authenticates the MS.  If\n   authentication\
    \ is successful, the BS passes the Mobile Station\n   Identifier (MSID) (e.g.,\
    \ Mobile Identification Number (MIN)) to the\n   PDSN.  The \"Authenticated MSID\"\
    \ is then included in the RADIUS Access\n   Request (ARQ) message [4] sent from\
    \ the PDSN to the RADIUS AAA\n   server.  Because the RADIUS AAA server stores\
    \ the MSID associated\n   with an MN subscription, the RADIUS AAA server is able\
    \ to authorize\n   MN access if the \"Authenticated MSID\" matches the RADIUS\
    \ AAA MSID,\n   i.e., the RADIUS AAA server is delegating its authentication function\n\
    \   to the cdma2000(R) 1X HLR/AC.\n   RADIUS AAA Server authentication (by the\
    \ MN) is enabled by including\n   a random number (AAA_Authenticator) in the encrypted\
    \ payload sent\n   from the MN to the RADIUS AAA Server.  Only the possessor of\
    \ the\n   proper RSA Private key will have the ability to decrypt the payload\n\
    \   and recover the unique AAA_Authenticator.  If the MN receives the\n   correct\
    \ AAA_Authenticator (returned by the RADIUS AAA Server), the MN\n   is assured\
    \ that it is not interacting with a false Base Station (BS).\n           MN  \
    \         BS/PDSN/FA         HLR/AC          AAA\n           --           ----------\
    \         ------          ---\n    ------------------     |                 |\
    \      -------------------\n   |  RSA Public Key  |    |                 |   \
    \  |  RSA Private Key  |\n   |  Pre-loaded by   |    |                 |     |\
    \  Pre-loaded by    |\n   |  Manufacturer    |    |                 |     |  Service\
    \ Provider |\n    ------------------     |                 |      -------------------\n\
    \            |  Global Challenge              |              |\n            |<-------------|\
    \                 |              |\n            |              |             \
    \    |              |\n            |  Auth_Response                 |        \
    \      |\n            |------------->|                 |              |\n    \
    \        |              |  Auth_Response  |              |\n            |    \
    \          |---------------->|              |\n            |              |  \
    \        ------------------    |\n            |              |         |  IS-2000\
    \         |   |\n            |              |         |  Authentication  |   |\n\
    \            |              |          ------------------    |\n            |\
    \              |   Auth_Success  |              |\n            |             \
    \ |<----------------|              |\n            |     ------------------   \
    \      |              |\n            |    |  BS forwards     |        |      \
    \        |\n            |    |  Authenticated   |        |              |\n  \
    \          |    |  MSID to PDSN    |        |              |\n            |  \
    \   ------------------         |              |\n            |              |\
    \                 |              |\n            |  Registration Request      \
    \    |              |\n            |  (MIP keys, AAA_Authenticator),         \
    \      |\n            |  RSA Public Key                |              |\n    \
    \        |------------->|                 |              |\n            |    \
    \          |  Access Request, MSID,         |\n            |              |  (MIP\
    \ keys, AAA_Authenticator),\n            |              |  RSA Public Key    \
    \            |\n            |              |------------------------------->|\n\
    \            |              |                 |     -------------------\n    \
    \        |              |                 |    |  Check MSID,      |\n       \
    \     |              |                 |    |  Decrypt AAA_-    |\n          \
    \  |              |                 |    |  Authenticator    |\n            |\
    \              |                 |     -------------------\n            |    \
    \         Access Reject, AAA_Authenticator  |\n            |              |<-------------------------------|\n\
    \        Registration Reply, AAA_Authenticator               |\n            |<-------------|\
    \                 |              |\n    ------------------     |             \
    \    |              |\n   |  Check AAA_-     |    |                 |        \
    \      |\n   |  Authenticator   |    |                 |              |\n    ------------------\
    \     |                 |              |\n                      Figure 2. Mutual\
    \ Authentication\n"
- title: 2.3.  Encrypted Password Authentication
  contents:
  - "2.3.  Encrypted Password Authentication\n   Because cdma2000(R) A-key/SSD authentication\
    \ is not available in\n   1xEV-DO, or a particular cdma2000(R) 1X network may\
    \ not support A-key\n   authentication, the DMU procedure also includes a random\
    \ number\n   (MN_Authenticator) generated by the MN (and/or pre-loaded by the\n\
    \   manufacturer), which enables the RADIUS AAA Server to optionally\n   authenticate\
    \ the MN (in 1XEV DO network only).\n   The MN_Authenticator is transmitted from\
    \ the MN to the Home AAA\n   Server within the RSA-encrypted MIP_Key_Data payload\
    \ to prevent\n   interception and possible re-use by an attacker.  Ideally, the\n\
    \   MN_Authenticator is utilized as a One-Time Password; however, RSA\n   encryption\
    \ allows the MN_Authenticator to possibly be re-used based\n   on each service\
    \ provider's key distribution policy.\n   When the encrypted MIP keys are decrypted\
    \ at the Home RADIUS AAA\n   Server, the MN_Authenticator is also decrypted and\
    \ compared with a\n   copy of the MN_Authenticator stored within the Home RADIUS\
    \ AAA\n   Server.  The Home RADIUS AAA Server receives a copy of the\n   MN_Authenticator\
    \ out-of-band (not using the cdma2000(R) network)\n   utilizing one of numerous\
    \ possible methods outside the scope of the\n   standard.  For example, the MN_Authenticator\
    \ MAY be: 1) read out by a\n   Point-of-Sale provisioner from the MN, input into\
    \ the subscriber\n   profile, and delivered, along with the Network Access Identifier\n\
    \   (NAI), via the billing/provision system to the Home RADIUS AAA\n   server,\
    \ 2) verbally communicated to a customer care representative\n   via a call, or\
    \ 3) input by the user interfacing with an interactive\n   voice recognition server.\
    \  The out-of-band MN_Authenticator delivery\n   is not specified in this document\
    \ to maximize the service provider's\n   implementation flexibility.\n   It is\
    \ possible for an unscrupulous provisioner or distribution\n   employee to extract\
    \ the MN_Authenticator prior to the DMU procedure;\n   however, the risk associated\
    \ with such a disclosure is minimal.\n   Because the HRPD/1xEV-DO MN does not\
    \ transmit a device identifier\n   during the initial registration process, an\
    \ attacker, even with a\n   stolen MN_Authenticator, cannot correlate the password\
    \ with a\n   particular MN device or NAI, which is typically provisioned just\n\
    \   prior to DMU procedure initiation.\n   The MN_Authenticator is typically generated\
    \ by a random/pseudorandom\n   number generator within the MN.  MN_Authenticator\
    \ generation is\n   initiated by the MN user; however, it may be initially pre-loaded\
    \ by\n   the manufacturer.  When the MN_Authenticator is reset (i.e., a new\n\
    \   MN_Authenticator is generated), all MIP_Data_Key payloads using the\n   previous\
    \ MN_Authenticator are discarded and the MN immediately re-\n   encrypts a MIP_Key_Data\
    \ payload containing the new MN_Authenticator.\n   The MN_Authenticator MUST NOT\
    \ change unless it is explicitly reset by\n   the MN user.  Thus, the MN will\
    \ generate new MIP_Key_Data payloads\n   using the same MN_Authenticator until\
    \ the MN_Authenticator is\n   updated.\n                                     \
    \    -------------------------\n                                        |  User-initiated\
    \         |\n                                        |  MN_Authenticator[x]  \
    \  |\n                                        |  Generation             |\n  \
    \                                       -------------------------\n          \
    \                                          |\n                               \
    \                     v\n    -----------------------------        ------------------------------\n\
    \   |  Manufacturer               |      |  Delete MN_Authenticator[y], |\n  \
    \ |  MN_Authenticator[y]        |----->|  Store  MN_Authenticator[x]  |\n   |\
    \  Generation**               |      |  in MN                       |\n    -----------------------------\
    \        ------------------------------\n                                    \
    \                |\n                                                    v\n  \
    \                                       -------------------------\n          \
    \                              |  Delete MIP_Key_Data    |\n                 \
    \                       |  Payloads based on      |\n                        \
    \                |  MN_Authenticator[y]    |\n                               \
    \          -------------------------\n                                       \
    \             |\n                                                    v\n    -----------------------------\
    \        -------------------------\n   |  KEYS_VALID state and       |      |\
    \  Generate MIP_Key_Data  |\n   |  committed, delete          |----->|  Payloads\
    \ based on      |\n   |  MIP_Key_Data Payload       |      |  MN_Authenticator[x]\
    \    |\n    -----------------------------        -------------------------\n \
    \                ^                                  |\n                 |    \
    \                              v\n    -----------------------------        -------------------------\n\
    \   |  DMU MIP_Key_Data           |      |  Store MIP_Key_Data     |\n   |  Delivery\
    \                   |<-----|  Payload                |\n    -----------------------------\
    \        -------------------------\n     Figure 3. MN_Authenticator and MIP_Key_Data\
    \ Payload State Machine\n   **Note: Manufacturer pre-load of MN_Authenticator\
    \ is not essential\n   since the MN_Authenticator is typically generated by the\
    \ MN.\n   However, manufacturer pre-load may reduce the provisioner burden of\n\
    \   accessing a device such as a modem to recover the MN_Authenticator\n   for\
    \ entry into the service provider provisioning system.\n"
- title: 3.  Dynamic MIP Key Update Advantages over OTASP
  contents:
  - "3.  Dynamic MIP Key Update Advantages over OTASP\n   The DMU procedure has numerous\
    \ advantages over the current Over-the-\n   Air Service Provisioning (OTASP) [8]\
    \ procedure, including:\n      *  In DMU, MIP key distribution occurs directly\
    \ between the MN and\n         AAA Server at the IP Layer.  This eliminates the\
    \ need for an\n         interface between the Over-the-Air Functionality (OTAF)\
    \ and\n         RADIUS AAA server.\n      *  DMU Supports MIP key distribution\
    \ for cdma2000(R) 1X and\n         HRPD/1xEV-DO MN.  OTASP only supports cdma2000(R)\
    \ 1X MIP key\n         distribution.\n      *  DMU facilitates MIP key distribution\
    \ to an MN in a Relay-mode\n         MS.  OTASP only delivers the MIP keys to\
    \ the MS.  For example,\n         OTASP cannot deliver MIP keys to a Laptop MN\
    \ interfacing with\n         an MS modem.\n      *  Pre-encryption of MIP_Key_Data\
    \ allows the DMU procedure to be\n         an order of magnitude faster than Diffie-Hellman\
    \ Key Exchange.\n      *  In DMU, an MN manufacturer can pre-generate MIP keys,\
    \ pre-\n         encrypt the MIP key payload, and pre-load the payload in the\n\
    \         MN.  Thus, an MN with limited processing power is never\n         required\
    \ to use RSA encryption.  An OTASP device is always\n         forced to perform\
    \ computationally expensive exponentiations\n         during the key update process.\n\
    \      *  In DMU, the MN is protected against Denial-of-Service (DOS)\n      \
    \   attacks in which a false BS changes the MIP key for MNs in its\n         vicinity.\
    \  OTASP Diffie-Hellman Key Exchange is vulnerable to a\n         false BS DOS\
    \ attack.\n      *  DMU utilizes mutual authentication.  OTASP Diffie-Hellman\
    \ Key\n         Exchange does not utilize mutual authentication.\n"
- title: 4.  Detailed DMU Procedure Description and Requirements
  contents:
  - "4.  Detailed DMU Procedure Description and Requirements\n   The Verizon Wireless\
    \ Dynamic Mobile IP Update procedure is a secure,\n   yet extremely efficient\
    \ mechanism for distributing essential MIP\n   cryptographic keys (e.g., MN-AAAH\
    \ key and MN-HA key) and the Simple\n   IP CHAP key.  The DMU protocol enables\
    \ pre-computation of the\n   encrypted key material payload, known as MIP_Key_Data.\
    \  The DMU\n   procedure purposely avoids the use of Public Key Infrastructure\
    \ (PKI)\n   Certificates, greatly enhancing the procedure's efficiency.\n"
- title: 4.1.  RSA Public Key Cryptography
  contents:
  - "4.1.  RSA Public Key Cryptography\n   RSA public key encryption and decryption\
    \ MUST be performed in\n   accordance with RFC 3447 [9] PKCS #1: RSA Encryption\
    \ Version 1.5. DMU\n   MUST support RSA with a 1024-bit modulus by default.  DMU\
    \ MAY also\n   support 768-bit or 2048-bit RSA, depending on the MN user's\n \
    \  efficiency or security requirements.  RSA computation speed-ups using\n   a\
    \ public RSA exponent that is small or has a small number of nonzero\n   bits\
    \ (e.g., 65537) are acceptable.\n"
- title: 4.2.  Other Public Key Algorithms
  contents:
  - "4.2.  Other Public Key Algorithms\n   DMU does not preclude the use of other\
    \ public key technologies.  The\n   protocol includes a Public Key Type field\
    \ that defines the type of\n   encryption used.\n"
- title: 4.3.  Why No Public Key Infrastructure (PKI)?
  contents:
  - "4.3.  Why No Public Key Infrastructure (PKI)?\n   DMU is designed to maximize\
    \ the efficiency of Mobile IP (MIP) key\n   distribution for cdma2000(R) MNs.\
    \  The use of a public key\n   Certificate would improve the flexibility of the\
    \ MIP key update\n   process by allowing a Certificate Authority (CA) to vouch\
    \ for the RSA\n   public key delivered to the MN.  Unfortunately, the use of a\
    \ public\n   key certificate would significantly reduce the efficiency (speed\
    \ and\n   overhead) of the MIP key update process.  For instance, each MN must\n\
    \   be pre-loaded with the CA's public key.  During the MIP key\n   distribution\
    \ process, the network must first deliver its RSA public\n   key (in a certificate)\
    \ to the MN.  The MN must then use RSA to\n   decrypt the Certificate's digital\
    \ signature to verify that the\n   presented RSA public key is legitimate.  Such\
    \ a process significantly\n   increases the number of exchanges, increases air\
    \ interface overhead,\n   increases the amount of MN computation, and slows the\
    \ MIP key update\n   process.\n   Aside from the operational efficiency issues,\
    \ there are numerous\n   policy and procedural issues that have previously hampered\
    \ the\n   deployment of PKI in commercial networks.\n   On a more theoretical\
    \ basis, PKI is likely unnecessary for this key\n   distribution model.  PKI is\
    \ ideal for a Many-to-Many communications\n   model, such as within the Internet,\
    \ where many different users\n   interface with many different Websites.  However,\
    \ in the cellular/PCS\n   Packet Data environment, a Many-to-One (or few) distribution\
    \ model\n   exists, in which many users interface with one wireless Carrier to\n\
    \   establish their Mobile IP security associations (i.e., cryptographic\n   keys).\n"
- title: 4.4.  Cryptographic Key Generation
  contents:
  - "4.4.  Cryptographic Key Generation\n   The DMU procedure relies on each MN to\
    \ randomly/pseudo-randomly\n   generate the MN_AAAH key, MN_HA key, and Simple\
    \ IP CHAP key.  Each MN\n   MUST have the capability to generate random/pseudo-random\
    \ numbers in\n   accordance with the guidelines specified in RFC 4086 \"Randomness\n\
    \   Requirements for Security\".\n   Although it may be more secure for the network\
    \ to generate\n   cryptographic keys at the RADIUS AAA server, client cryptographic\
    \ key\n   generation is acceptable due to the significant efficiency\n   improvement\
    \ in the update process via pre-generation and pre-\n   encryption of the MIP\
    \ keys.\n"
- title: 4.5.  MIP_Key_Data Payload
  contents:
  - "4.5.  MIP_Key_Data Payload\n   MIP cryptographic keys (MN_AAAH key and MN_HA\
    \ key) and the Simple IP\n   CHAP key are encapsulated and encrypted into a MIP_Key_Data\
    \ Payload\n   (along with the AAA_Authenticator and MN_Authenticator).  The\n\
    \   MIP_Key_Data Payload is appended to the MN's MIP Registration Request\n  \
    \ (RRQ) as a MIP Vendor/Organization-Specific Extension (VSE) (see RFC\n   3115\
    \ [10] Mobile IP Vendor/Organization-Specific Extensions).  When\n   the PDSN\
    \ converts the MIP RRQ to a RADIUS Access Request (ARQ)\n   message, the MIP_Key_Data\
    \ Payload is converted from a MIP\n   Vendor/Organization-Specific Extension to\
    \ a Vendor Specific RADIUS\n   Attribute (VSA).\n   Upon receipt of the RADIUS\
    \ Access Request, the RADIUS AAA Server\n   decrypts the MIP_Key_Data payload\
    \ using the RSA private (decryption)\n   key associated with the RSA public (encryption)\
    \ used to encrypt the\n   MIP_Key_Data payload.  The MIP_Key_Data is defined as\
    \ follows:\n   MIP_Key_Data = RSA_Public_Key [MN_AAAH key, MN_HA key, CHAP_key,\n\
    \   MN_Authenticator, AAA_Authenticator], Public_Key_ID, DMUV\n   Where:\n   \
    \   MN_AAAH key = 128-bit random MN / RADIUS AAA Server key\n         (encrypted)\n\
    \      MN_HA key = 128-bit random MN / Home Agent (HA) key (encrypted)\n     \
    \ CHAP_key = 128-bit random Simple IP authentication key (encrypted)\n       \
    \  Note: the Simple IP CHAP key is not the same as the AT-CHAP key\n         used\
    \ for A12 Interface authentication [11].\n      MN_Authenticator = 24-bit random\
    \ number (displayed as an 8 decimal\n         digit number).  (To be used for\
    \ 1xEV-DO networks.) (encrypted)\n      AAA_Authenticator = 64-bit random number\
    \ used by MN to\n         authenticate the RADIUS AAA Server. (encrypted)\n  \
    \    DMU Version (DMUV) = 4-bit identifier of DMU version.\n   Public Key Identifier\
    \ (Public_Key_ID) = PKOID, PKOI, PK_Expansion,\n   ATV\n   Where:\n      Public\
    \ Key Organization Identifier (PKOID) = 8-bit serial number\n         identifier\
    \ of Public Key Organization (PKO) that created the\n         Public Key.\n  \
    \    Public Key Organization Index (PKOI) = 8-bit serial number used at\n    \
    \     PKO discretion to distinguish different public/private key\n         pairs.\n\
    \      PK_Expansion = 8-bit field to enable possible expansion of PKOID\n    \
    \     or PKOI fields. (Note: Default value = 0xFF)\n      Algorithm Type and Version\
    \ (ATV) = 4-bit identifier of the\n         algorithm used.\n   Note: If 1024-bit\
    \ RSA is used, the encrypted portion of the payload\n   is 1024 bits (128 bytes)\
    \ long.  With the 28-bit Public Key Identifier\n   and 4-bit DMUV, the total MIP_Key_Data\
    \ payload is 132 bytes long.\n"
- title: 4.6.  RSA Key Management
  contents:
  - "4.6.  RSA Key Management\n   The wireless service provider or carrier MUST generate\
    \ the RSA\n   Public/Private key pair(s).  An organization within the service\n\
    \   provider MUST be designated by the service provider to generate,\n   manage,\
    \ protect, and distribute RSA Private keys (to the RADIUS AAA\n   Server) and\
    \ public keys (to the MN manufacturers) in support of the\n   DMU procedure.\n\
    \   Each RSA public/private key pair, generated by the wireless carrier,\n   MUST\
    \ be assigned a unique Public Key Identifier in accordance with\n   Section 9.\n\
    \   RSA Private keys MUST be protected from disclosure to unauthorized\n   parties.\
    \  The service provider organization with the responsibility\n   of generating\
    \ the RSA public/private key pairs MUST establish an RSA\n   key management policy\
    \ to protect the RSA Private (decryption) keys.\n   RSA public keys MAY be freely\
    \ distributed to all MN manufacturers\n   (along with the Public Key Identifier).\
    \  Because one RSA public key\n   can be distributed to million of MNs, it is\
    \ acceptable to distribute\n   the RSA public key (and Public Key Identifier)\
    \ to MN manufacturers\n   via e-mail, floppy disk, or a Website.  The preferred\
    \ method is to\n   simply publish the RSA public key and associated Public Key\n\
    \   Identifier in the DMU Requirements document sent to each MN\n   manufacturer/OEM.\n\
    \   When public keys are distributed, the public keys MUST be protected\n   against\
    \ alteration.  If an invalid public key is programmed into a\n   terminal, the\
    \ terminal may be denied service because DMU cannot be\n   performed successfully.\n\
    \   RSA Private keys MAY be loaded into the RADIUS AAA server manually.\n   Access\
    \ to the RADIUS AAA Server RSA Private keys MUST be restricted\n   to authorized\
    \ personnel only.\n   The wireless service provider MAY accept RSA Private key(s)\
    \ (and\n   Public Key Identifier) from MN manufacturers that have preloaded MNs\n\
    \   with manufacturer-generated RSA public keys.\n"
- title: 4.7.  RADIUS AAA Server
  contents:
  - "4.7.  RADIUS AAA Server\n   The RADIUS AAA Server used for DMU MUST support the\
    \ DMU Procedure.\n   The AAA Server MUST support RSA public key cryptography and\
    \ maintain\n   a database of RSA Private (decryption) keys indexed by the Public\
    \ Key\n   Identifier.\n   Delivery of the RSA Private key(s) to an AAA Server\
    \ from the MN\n   manufacturer(s) is outside the scope of this document.  However,\
    \ RSA\n   Private key(s) delivery via encrypted e-mail or physical (mail)\n  \
    \ delivery is likely acceptable.\n   Access to the RADIUS AAA Server MUST be limited\
    \ to authorized\n   personnel only.\n   The RADIUS AAA Server MUST support 1024-bit\
    \ RSA decryption.\n   The RADIUS AAA Server MUST maintain a database of RSA public/private\n\
    \   key pair indexed by the Public Key Identifier.\n   The RADIUS AAA Server MUST\
    \ support the RADIUS attributes specified in\n   Section 8.\n   The RADIUS AAA\
    \ Server MUST support a subscriber-specific MIP Update\n   State Field.  When\
    \ the MIP Update State Field is set to UPDATE KEYS\n   (1), the RADIUS AAA Server\
    \ MUST initiate the DMU procedure by\n   including the MIP_Key_Request attribute\
    \ in an Access Reject message\n   sent to the PDSN.  The MIP Update State Field\
    \ MAY be set to UPDATE\n   KEYS (1) by the service provider's Billing/Provisioning\
    \ system based\n   on IT policy.  Upon verification of MN-AAA Authentication Extension\n\
    \   using the decrypted MN_AAA key, the RADIUS AAA Server MUST set the\n   MIP\
    \ Update State Field to KEYS UPDATED (2).  Upon verification of the\n   MN-Authentication\
    \ Extension on a subsequent RRQ/ARQ, the RADIUS AAA\n   Server MUST set the MIP\
    \ Update State Field to KEYS VALID (0).\n   Note that the inclusion of a vendor-specific\
    \ attribute in the Access\n   Reject message is not consistent with Section 5.44\
    \ of [4].  A RADIUS\n   AAA server that supports DMU SHOULD NOT include a vendor-specific\n\
    \   attribute if the corresponding Access Request message was not\n   received\
    \ from a DMU-compliant PDSN.  This use of Access Reject is\n   strongly discouraged\
    \ for any future work based on this document.\n   Future work should consider\
    \ the use of Access-Challenge to carry this\n   vendor-specific attribute.\n \
    \  The RADIUS AAA Server MUST maintain a MIP Update State Field, for\n   each\
    \ subscription, in one of three states (0 = KEYS VALID, 1 = UPDATE\n   KEYS, 2\
    \ = KEYS UPDATED).\n   The RADIUS AAA Server MUST decrypt the encrypted portion\
    \ of the\n   MIP_Key_Data payload using the appropriate RSA Private (decryption)\n\
    \   key.\n   The RADIUS AAA Server MUST check the MN_AAA Authentication Extension\n\
    \   of the DMU RRQ using the decrypted MN_AAA key.\n   The RADIUS AAA Server MUST\
    \ include the AAA_Authenticator in the\n   Access Accept as a Vendor-Specific\
    \ RADIUS Attribute.\n   The RADIUS AAA Server MUST support the MN_Authenticator\
    \ options\n   specified in Section 6.1.\n   The RADIUS AAA Server MUST comply\
    \ with DMU Procedure failure\n   operation specified in Section 5.\n   The RADIUS\
    \ AAA Server MUST support manual hexadecimal entry of MN_AAA\n   key, MN_HA key,\
    \ and Simple IP CHAP key via the AAA GUI for each\n   subscription.\n   The RADIUS\
    \ AAA Server MUST provide a mechanism to validate the\n   MIN/International Mobile\
    \ Subscriber Identity (IMSI).  When the\n   MIN/IMSI validation is on, the RADIUS\
    \ AAA Server MUST compare the\n   MIN/IMSI sent from the PDSN with the MIN/IMSI\
    \ in the AAA subscription\n   record/profile.  If the MINs or IMSIs do not match,\
    \ the RADIUS AAA\n   Server MUST send an Access Reject to the PDSN/FA.  The Access\
    \ Reject\n   MUST NOT contain a MIP Key Data request\n   When the \"Ignore MN_Authenticator\"\
    \ bit is not set, the RADIUS AAA\n   Server MUST check whether MN_AuthenticatorMN\
    \ = MN_AuthenticatorAAA.\n   If the MN_Authenticators do not match, the RADIUS\
    \ AAA Server MUST\n   send an Access Reject to the PDSN/FA.  The Access Reject\
    \ MUST NOT\n   contain a MIP_Key_Data request.\n   The RADIUS AAA Server MUST\
    \ include its PKOID (or another designated\n   PKOID) in the MIP_Key_Request RADIUS\
    \ Attribute.\n   The RADIUS AAA Server MUST compare the PKOID sent in the MIP_Key_Data\n\
    \   RADIUS Attribute with a list of valid PKOIDs in the RADIUS AAA\n   Server.\
    \  If the PKOID is not valid, the RADIUS AAA Server MUST send\n   an Access Reject\
    \ to the PDSN with the \"Invalid Public Key\" Verizon\n   Wireless RADIUS Vendor\
    \ Specific Attribute (VSA).  Note: the same\n   RADIUS attribute may be assigned\
    \ a different Vendor identifier.\n   Note that the inclusion of a vendor-specific\
    \ attribute in the Access\n   Reject message is not consistent with section 5.44\
    \ of [4].  A RADIUS\n   AAA server that supports DMU SHOULD NOT include a vendor-specific\n\
    \   attribute if the corresponding Access Request message was not\n   received\
    \ from a DMU-compliant PDSN.  This use of Access Reject is\n   strongly discouraged\
    \ for any future work based on this document.\n   Future work should consider\
    \ the use of Access-Challenge to carry this\n   vendor-specific attribute.\n \
    \  The RADIUS AAA Server MUST support delivery of the MN-HA key using\n   3GPP2\
    \ RADIUS VSAs as specified in 3GPP2 X.S0011-005-C.  The 3GPP2\n   VSAs used are\
    \ the MN-HA Shared Key (Vendor-Type = 58) and MN-HA\n   Security Parameter Index\
    \ (SPI) (Vendor-Type = 57).\n   The RADIUS AAA Server SHOULD always accept an\
    \ Access Request from a\n   cdma2000(R) Access Node (AN) for a particular subscriber\
    \ when the\n   UPDATE KEYS (1) and KEYS UPDATED (2) states are set.  In the KEYS\n\
    \   VALID (0) state, the RADIUS AAA Server MUST check the Access Request\n   normally.\n\
    \   The RADIUS AAA Server MUST reject an Access Request with the\n   MIP_Key_Data\
    \ RADIUS Attribute while the RADIUS AAA Server is in the\n   KEYS VALID state,\
    \ i.e., the AAA MUST NOT allow an unsolicited key\n   update to occur.\n"
- title: 4.8.  MN (Handset or Modem)
  contents:
  - "4.8.  MN (Handset or Modem)\n   The MN manufacturer MUST pre-load the Wireless\
    \ Carrier RSA public key\n   (and Public Key Identifier).\n   The MN manufacturer\
    \ MUST pre-generate and pre-load the\n   MN_Authenticator.\n   The MN MUST support\
    \ 1024-bit RSA Encryption using the pre-loaded RSA\n   public key.\n   The MN\
    \ MUST support MN_AAA, MN_HA, and CHAP random/pseudo-random key\n   generation\
    \ (in accordance with RFC 4086).\n   The MN MUST support random/pseudo-random\
    \ AAA_Authenticator and\n   MN_Authenticator generation (in accordance with RFC\
    \ 4086).\n   Upon power-up of an MN handset or launch of the MN client, the MN\n\
    \   MUST check whether a MIP_Key_Data payload has been computed.  If no\n   MIP_Key_Data\
    \ payload exists, the MN MUST generate and store a\n   MIP_Key_Data payload. \
    \ The MN MUST maintain at least one pre-\n   generated MIP_Key_Data payload.\n\
    \   The MN MUST construct the MIP_Key_Data payload in accordance with\n   Section\
    \ 4.5.\n   The MN MUST initiate the DMU Procedure upon receipt of a MIP\n   Registration\
    \ Reply (RRP) with the MIP_Key_Request Verizon Wireless\n   Vendor/Organization-Specific\
    \ Extension (VSE).\n   Upon receipt of an RRP including the MIP_Key_Request, the\
    \ MN MUST\n   check the PKOID sent in the MIP_Key_Request.  If the MN has a public\n\
    \   key associated with the PKOID, the MN MUST encrypt the MIP_Key_Data\n   payload\
    \ using that public key.\n   The MN MUST have the capability to designate one\
    \ public key as the\n   default public key if the MN supports multiple public\
    \ keys.\n   The MN MUST insert the Verizon Wireless MIP_Key_Data VSE (or another\n\
    \   Organization-specific MIP_Key_Data VSE) after the Mobile-Home\n   Authentication\
    \ Extension, but before the MN-AAA Authentication\n   Extension.  The MIP_Key_Data\
    \ Extension must also be located after the\n   FA Challenge Extension, if present.\n\
    \   Note:  The order of the extensions is important for interoperability.\n  \
    \ After the FA receives the Access Accept from the RADIUS AAA server,\n   the\
    \ FA may strip away all MIP extensions after the Mobile-Home\n   Authenticator.\
    \  If this occurs, it is not necessary for the HA to\n   process the DMU extensions.\
    \  Other compatibility problems have also\n   been identified during testing with\
    \ FAs from various vendors who\n   place extensions in various locations.  Explicit\
    \ placement of the\n   extensions eliminates these issues.\n   Upon initiation\
    \ of the DMU Procedure, the MN MUST compute the MIP\n   authentication extensions\
    \ using the newly-generated temporary MN_AAA\n   and MN_HA keys.  Upon receipt\
    \ of the AAA_Authenticator MIP Extension,\n   the MN MUST compare the AAA_AuthenticatorMN\
    \ (sent in the encrypted\n   MIP_Key_Data payload) with the AAA_AuthenticatorAAA\
    \ (returned by the\n   RADIUS AAA Server).  If both values are the same, the MN\
    \ MUST\n   designate the temporary MN_AAA, MN_HA key, and the Simple IP CHAP key\n\
    \   as permanent.  The MN MUST set its MIP Update State field to KEYS\n   VALID.\n\
    \   The MN MUST support reset (re-generation) of the MN_Authenticator by\n   the\
    \ MN user as specified in Section 6.2.\n   The MN MUST enable the MN user to view\
    \ the MN_Authenticator.\n   MN_Authenticator (24-bit random number) MUST be displayed\
    \ as an 8\n   decimal digit number as specified in Section 6.2.\n   The MN manufacturer\
    \ MUST pre-load each MN with a unique random 24-bit\n   MN_Authenticator.\n  \
    \ Upon reset of the MN_Authenticator, the MN MUST delete all\n   MIP_Key_Data\
    \ payloads based on the old MN_Authenticator and generate\n   all subsequent MIP_Key_Data\
    \ payloads using the new MN_Authenticator\n   (until the MN_Authenticator is explicitly\
    \ re-set again by the MN\n   user).\n   The MN MUST support manual entry of all\
    \ cryptographic keys such as\n   the MN_AAA, MN_HA, and Simple IP CHAP key.  MN\
    \ MUST support\n   hexadecimal digit entry of a 128-bit key.  (Note: certain Simple\
    \ IP\n   devices only enable ASCII entry of a password as the CHAP key.  It is\n\
    \   acceptable for future devices to provide both capabilities, i.e.,\n   ASCII\
    \ for a password or hexadecimal for a key.  The authors recommend\n   the use\
    \ of strong cryptographic keys.)\n   The MN MUST support the Verizon Wireless\
    \ MIP Vendor/Organization-\n   Specific Extensions specified in Section 9.\n \
    \  The MN MUST update the RRQ Identification field when re-transmitting\n   the\
    \ same MIP_Key_Data in a new RRQ.\n   The MN MUST comply with the DMU Procedure\
    \ failure operation specified\n   in Section 5.\n   The RSA public key MAY be\
    \ stored in the MN flash memory as a constant\n   while being updatable via software\
    \ patch.\n"
- title: 4.9.  PDSN / Foreign Agent (FA)
  contents:
  - "4.9.  PDSN / Foreign Agent (FA)\n   The PDSN MUST support the Verizon Wireless\
    \ RADIUS Vendor-Specific\n   Attributes (VSA) specified in Section 8 and the Verizon\
    \ Wireless MIP\n   Vendor/Organization-Specific Extensions (VSEs) specified in\
    \ Section\n   9.\n   The PDSN MAY support the RADIUS VSAs specified in Section\
    \ 8 and the\n   MIP VSEs specified in Section 9 using another Organization\n \
    \  identifier.\n   Upon receipt of an Access Reject containing the\n   MIP_Key_Update_Request\
    \ VSA, PDSN MUST send an RRP to the MN with the\n   MIP_Key_Request VSE.  The\
    \ PDSN MUST use the RRP error code = 89\n   (Vendor Specific) and MUST not tear\
    \ down the PPP session after\n   transmission.\n   Upon receipt of an Access Reject\
    \ containing the AAA_Authenticator\n   VSA, the PDSN MUST send an RRP with the\
    \ AAA_Authenticator MIP VSE.\n   The PDSN MUST use the RRP error code = 89 (Vendor\
    \ Specific) and MUST\n   NOT tear down the PPP session after transmission.\n \
    \  Upon receipt of an Access Reject containing the Public Key Invalid\n   VSA,\
    \ the PDSN MUST send an RRP with the Public Key Invalid MIP VSE.\n   The PDSN\
    \ MUST use the RRP error code = 89 (Vendor Specific) and MUST\n   NOT tear down\
    \ the PPP session after transmission.\n   Note that the inclusion of a vendor-specific\
    \ attribute in the Access\n   Reject message is not consistent with section 5.44\
    \ of [4].  A PDSN\n   that supports DMU MUST accept an Access Reject message containing\
    \ a\n   vendor-specific attribute.  This use of Access Reject is strongly\n  \
    \ discouraged for any future work based on this document.  Future work\n   should\
    \ consider the use of Access-Challenge to carry this vendor-\n   specific attribute.\n\
    \   Upon receipt of an RRQ with the MIP_Key_Data VSE, the PDSN MUST\n   convert\
    \ the RRQ to an ARQ with the MIP_Key_Data VSA.  The PDSN MUST\n   send the ARQ\
    \ to the RADIUS AAA server.\n   The PDSN/FA MUST comply with the DMU Procedure\
    \ failure operation\n   specified in Section 5.\n   The PDSN/FA MUST include the\
    \ PKOID from the Access Reject\n   MIP_Key_Update_Request VSA in the MIP_Key_Request\
    \ MIP VSE sent to the\n   MN.\n"
- title: 4.10.  Home Agent (HA)
  contents:
  - "4.10.  Home Agent (HA)\n   The HA MUST support the Verizon Wireless MIP Vendor/Organization-\n\
    \   Specific Extensions (VSEs) specified in Section 9.  (Note: the HA may\n  \
    \ not encounter a DMU MIP extension if the FA strips away all\n   extensions after\
    \ the Mobile-Home authentication extension.)\n   The HA MAY support the MIP VSEs\
    \ specified in Section 9 using another\n   Organization identifier.  (Note: the\
    \ HA may not encounter a DMU MIP\n   extension if the FA strips away all extensions\
    \ after the Mobile-Home\n   authentication extension.)\n   The HA MUST support\
    \ delivery of the MN-HA key from the Home RADIUS\n   AAA server using 3GPP2 RADIUS\
    \ Vendor-Specific Attributes (VSA) as\n   specified in 3GPP2 X.S0011-005-C.  The\
    \ 3GPP2 VSAs used are the MN-HA\n   Shared Key (Vendor-Type = 58) and the MN-HA\
    \ SPI (Vendor-Type = 57).\n"
- title: 4.11.  DMU Procedure Network Flow
  contents:
  - "4.11.  DMU Procedure Network Flow\n   This section provides a flow diagram and\
    \ detailed description of the\n   process flow involving the Dynamic Mobile IP\
    \ Update procedure process\n   within the IS-2000 network.\n           MN    \
    \                          PDSN/FA         AAAH\n           --               \
    \               -------         ----\n    ---------------------              \
    \       |     -------------------\n   |  1: RSA Public Key  |                \
    \    |    |  RSA Private Key  |\n   |  Pre-loaded by      |                  \
    \  |    |  Pre-loaded by    |\n   |  Manufacturer       |                    |\
    \    |  Service Provider |\n    ---------------------                     |  \
    \   -------------------\n         ---------------------------------------------------------\n\
    \        |  2: MS/BS: IS-2000 Call Origination and Authentication  |\n       \
    \ |  3: MN/PDSN/FA: PPP Session Establishment               |\n         ---------------------------------------------------------\n\
    \           |  4: Registration Request (RRQ)   |             |\n           |--------------------------------->|\
    \ 5: Access Request w/MSID\n           |                                  |------------>|\n\
    \           |                                  |    --------------------\n   \
    \        |                                  |   | 6: MIP Update State|\n     \
    \      |                                  |   | is UPDATE KEYS   |\n         \
    \  |                                  |    --------------------\n           |\
    \                        7: Access Reject with   |\n           |             \
    \           MIP_Key_Update_Request  |\n           |                        RADIUS\
    \ Attribute        |\n           |                                  |<------------|\n\
    \           |  8: Registration Reply (RRP)     |             |\n           | \
    \ with MIP_Key_Request MIP        |             |\n           |  Vendor/organization-specific\
    \    |             |\n           |  extension                       |        \
    \     |\n           |<---------------------------------|             |\n    -------------------\
    \                       |             |\n   |  9: MN generates  |            \
    \          |             |\n   |  MIP_Key_Data     |                      |  \
    \           |\n   |  using temporary  |                      |             |\n\
    \   |  MIP keys         |                      |             |\n    -------------------\
    \                       |             |\n           |  10: RRQ with MIP_Key_Data\
    \       |             |\n           |  Vendor/organization-specific extension\
    \        |\n           |--------------------------------->|  11: Access Request\n\
    \           |                                  |  w/MSID\n           |       \
    \                           |  and MIP_Key_Data\n           |                \
    \                  |  RADIUS attribute\n           |                         \
    \         |------------>|\n                   Figure 4. DMU Procedure Flow (part\
    \ 1)\n           MN                              PDSN/FA         AAAH\n      \
    \     --                              -------         ----\n           |     \
    \                             |             |\n           |                  \
    \                |    -------------------\n           |                      \
    \            |   |  12: decrypt      |\n           |                         \
    \         |   |  MIP_Key_Data,    |\n           |                            \
    \      |   |  verify MN-AAA    |\n           |                               \
    \   |   |  authentication   |\n           |                                  |\
    \   |  extension, set   |\n           |                                  |   |\
    \  MIP Update State |\n           |                                  |   |  =\
    \ KEYS UPDATED |\n           |                                  |    -------------------\n\
    \           |                        13: Access Reject with  |\n           | \
    \                       AAA_Authenticator       |\n           |              \
    \          RADIUS Attribute        |\n           |                           \
    \       |<------------|\n           |  14: Registration Reply (RRP)    |     \
    \        |\n           |  with AAA_Authenticator MIP      |             |\n  \
    \         |  Vendor/organization-specific    |             |\n           |  extension\
    \                       |             |\n           |<---------------------------------|\
    \             |\n    ----------------------                    |             |\n\
    \   |  15: verify          |                   |             |\n   |  AAA_Authenticator,\
    \  |                   |             |\n   |  store temporary     |          \
    \         |             |\n   |  MIP keys as         |                   |   \
    \          |\n   |  permanent keys      |                   |             |\n\
    \    ----------------------                    |             |\n           | \
    \ 16: RRQ                         |             |\n           |--------------------------------->|\
    \  Access Request\n           |                                  |  w/MSID\n \
    \          |                                  |------------>|\n           |  \
    \                                |    --------------------\n           |     \
    \                             |   |  17: verify MN-AAA |\n           |       \
    \                           |   |  authentication    |\n           |         \
    \                         |   |  extension, set    |\n           |           \
    \                       |   |  MIP Update State  |\n           |             \
    \                     |   |  = KEYS VALID    |\n           |                 \
    \                 |    --------------------\n           |                    \
    \              Access Accept |\n           |                                 \
    \ |<------------|\n                   Figure 4. DMU Procedure Flow (part 2)\n\
    \           MN           PDSN/FA         AAAH                HA\n           --\
    \           -------         ----                --\n           |             \
    \  |              |                  |\n           |               |  18. Registration\
    \ Request (RRQ) |\n           |               |-------------------------------->|\n\
    \           |               |              19: Access Request |\n           |\
    \               |              |<-----------------|\n           |            \
    \   |              | Access Accept    |\n           |               |        \
    \      | with MN-HA key   |\n           |               |              |----------------->|\n\
    \           |               |              |        -------------------\n    \
    \       |               |              |       |  verify           |\n       \
    \    |               |              |       |  mobile-home      |\n          \
    \ |               |              |       |  authentication   |\n           | \
    \              |              |       |  extension        |\n           |    \
    \           |              |        -------------------\n           |        \
    \       |    20. Registration Reply (RRP) |\n           |               |<--------------------------------|\n\
    \           |          RRP  |              |                  |\n           |<--------------|\
    \              |                  |\n                   Figure 4. DMU Procedure\
    \ Flow (part 3)\n   Each step in the Figure 4 DMU Process is described as follows:\n\
    \      1.  Each RSA public/private key pair MUST be generated in\n          accordance\
    \ with RFC 3447.  Each public/private key pair MUST\n          be assigned a unique\
    \ Public Key Identifier (PKOID) by its\n          creator.\n          If the service\
    \ provider does not generate the public/private\n          key pair and deliver\
    \ the RSA public key to the MN manufacturer\n          for pre-installation in\
    \ the MN, the MN manufacturer MUST\n          generate the RSA public/private\
    \ key pair (using a 1024-bit\n          modulus) and pre-load all MNs with the\
    \ RSA public (encryption)\n          key.  The MN manufacturer MUST distribute\
    \ the RSA Private\n          (decryption) key, in a secure manner, to the appropriate\n\
    \          service provider.\n      2.  Assuming that the cdma2000(R) 1X MN has\
    \ been provisioned with\n          an A-key and SSD, the cdma2000(R) 1X MS initiates\
    \ a call\n          origination and authenticates itself to the IS-2000 network.\n\
    \          Upon IS-2000 authentication success, the BS sends the\n          \"\
    authenticated\" MSID (e.g., MIN) to the PDSN.\n      3.  The MN and PDSN establish\
    \ a PPP session.\n      4.  The MN sends a MIP Registration Request (RRQ) to the\
    \ PDSN.\n      5.  The PDSN converts the MIP RRQ into a RADIUS Access Request\n\
    \          (ARQ) message, includes the MSID in the ARQ, and forwards the\n   \
    \       ARQ to the Home RADIUS AAA server.\n      6.  The RADIUS AAA Server compares\
    \ the authenticated MSID (sent\n          from the PDSN) with the MSID in its\
    \ subscriber database\n          (associated with the NAI).  If the AAA MIP Update\
    \ State Field\n          is set to UPDATE KEYS (1), the RADIUS AAA Server rejects\n\
    \          Packet Data access and orders a MIP key update.\n      7.  The RADIUS\
    \ AAA Server sends an Access Reject (code = 3)\n          message to the PDSN\
    \ with the MIP_Key_Update_Request RADIUS\n          VSA.\n      8.  The PDSN converts\
    \ the Access Reject to a MIP Registration\n          Reply (RRP) with a MIP_Key_Request\
    \ MIP VSE and sends the RRP\n          to the MN.  RRP Code = 89 (Vendor Specific).\n\
    \      9.  The MN sets the MN MIP Update State = UPDATE KEYS.  If the MN\n   \
    \       has no pre-generated and pre-encrypted MIP_Key_Data payload,\n       \
    \   the MN MUST generate the MN_AAA key, MN_HA key, Chap key,\n          MN_Authenticator,\
    \ and AAA_Authenticator in accordance with RFC\n          4086.  Except for the\
    \ Public Key Identifier, all generated\n          values MUST be encrypted using\
    \ the pre-loaded RSA public\n          (encryption) key.  The newly generated\
    \ MN_AAATEMP Key and\n          MN_HATEMP MUST be used to calculate the MN-AAA\
    \ and Mobile-Home\n          Authentication Extensions for the current RRQ.  Note:\
    \ the MN\n          MAY pre-compute the MIP_Key_Data payload by checking whether\
    \ a\n          payload exists during each MN power-up or application\n       \
    \   initiation.\n      10. The MN sends the RRQ with MIP_Key_Data MIP VSE to the\
    \ PDSN.\n      11. The PDSN converts the RRQ to a RADIUS ARQ with MIP_Key_Data\n\
    \          RADIUS VSA and forwards the ARQ to the home RADIUS AAA Server.\n  \
    \        The MSID is included in the ARQ.\n      12. The RADIUS AAA Server compares\
    \ the authenticated MSID (sent\n          from the PDSN) with the MSID in its\
    \ subscriber database\n          (associated with the NAI).  If MSIDPDSN = MSIDAAA,\
    \ the RADIUS\n          AAA server, using the Public Key Identifier, determines\
    \ the\n          appropriate RSA Private key and decrypts the encrypted portion\n\
    \          of the MIP_Key_Data payload.  The RADIUS AAA Server verifies\n    \
    \      the MN-AAA Authentication Extension Authenticator using the\n         \
    \ decrypted MN_AAA key.  If successful, the RADIUS AAA Server\n          updates\
    \ the subscriber profile with the decrypted MN_AAA key,\n          MN_HA key,\
    \ and CHAP key.  The RADIUS AAA Server sets the AAA\n          MIP Update State\
    \ Field to KEYS UPDATED (2).\n      13. The RADIUS AAA Server sends an Access\
    \ Reject with\n          AAA_Authenticator RADIUS VSA to the PDSN.\n      14.\
    \ The PDSN converts the Access Reject to a MIP RRP with\n          AAA_Authenticator\
    \ MIP VSE.  RRP Code = 89 (Vendor Specific).\n      15. If AAA_AuthenticatorMN\
    \ = AAA_AuthenticatorAAA, the MN assigns\n          MN_AAATEMP to MN_AAA key and\
    \ MN_HATEMP to MN_HA key (MN MIP\n          Update State = KEYS VALID).  Otherwise,\
    \ the MN discards the\n          temporary keys.\n      16. The MN initiates a\
    \ new RRQ that is converted to an ARQ by the\n          PDSN and forwarded to\
    \ the RADIUS AAA Server.\n      17. The RADIUS AAA Server verifies the MN-AAA\
    \ Authentication\n          Extension and sets the AAA MIP Update State Field\
    \ to KEYS\n          VALID (0).  The RADIUS AAA Server sends an Access Accept\
    \ to\n          the PDSN/FA.\n      18. The PDSN/FA sends the RRQ to the Home\
    \ Agent (HA).\n      19. The HA sends an Access Request to the RADIUS AAA Server.\
    \  The\n          RADIUS AAA Server sends an Access Accept to the HA with the\n\
    \          MN_HA key.  The HA verifies the Mobile-Home Authentication\n      \
    \    Extension using the MN_HA key.\n      20. The HA sends an RRP to the PDSN/FA,\
    \ which forwards the RRP to\n          the MN.  RRP Code = 0 (Success).\n"
- title: 5.  DMU Procedure Failure Operation
  contents:
  - "5.  DMU Procedure Failure Operation\n   To improve the robustness of the DMU\
    \ Procedure to account for\n   interruptions due to UDP message loss, RRQ retransmission,\
    \ or MN\n   failure, the RADIUS AAA Server MUST maintain a MIP Update State\n\
    \   Field, for each subscription, in one of three states (0 = KEYS VALID,\n  \
    \ 1 = UPDATE KEYS, 2 = KEYS UPDATED).\n              MN           PDSN/FA    \
    \     AAAH               HA\n              --           -------         ---- \
    \              --\n       ----------------       |       ----------------    \
    \     |\n      |  MN state =    |      |      |  AAAH state =  |        |\n  \
    \    |  KEYS VALID    |      |      |  UPDATE KEYS   |        |\n       ----------------\
    \       |       ----------------         |\n              | (A) RRQ       |  \
    \            |                 |\n              |-------------->|  ARQ       \
    \  |                 |\n              |               |------------->|       \
    \          |\n              |               AR(Key_Update) |                 |\n\
    \        (B) RRP (Key_Update)  |<-------------|                 |\n          \
    \    |<--------------|              |                 |\n       ----------------\
    \       |              |                 |\n      |  MN state =    |      |  \
    \            |                 |\n      |  UPDATE KEYS   |      |            \
    \  |                 |\n       ----------------       |              |       \
    \          |\n              | (C) RRQ (MIP_Key_Data)       |                 |\n\
    \              |-------------->|  ARQ (MIP_Key_Data)            |\n          \
    \    |               |------------->|                 |\n              |     \
    \          |       ----------------         |\n              |               |\
    \      |  AAAH state =  |        |\n              |               |      |  KEYS\
    \ UPDATED  |        |\n              |               |       ----------------\
    \         |\n              |               AR (AAA_Auth)  |                 |\n\
    \           (D) RRP (AAA_Auth) |<-------------|                 |\n          \
    \    |<--------------|              |                 |\n       ----------------\
    \       |              |                 |\n      |  MN state =    |      |  \
    \            |                 |\n      |  KEYS VALID    |      |            \
    \  |                 |\n       ----------------       |              |       \
    \          |\n              |  RRQ          |              |                 |\n\
    \              |-------------->|  ARQ         |                 |\n          \
    \    |               |------------->|                 |\n              |     \
    \          |       ----------------         |\n              |               |\
    \      |  AAAH state =  |        |\n              |               |      |  KEYS\
    \ VALID    |        |\n              |               |       ----------------\
    \         |\n              |               |          AA  |                 |\n\
    \              |               |<-------------|  RRQ            |\n          \
    \    |               |------------------------------->|\n              |     \
    \          |              |            ARQ  |\n              |               |\
    \              |<----------------|\n              |               |          \
    \    |  AA             |\n              |               |              |---------------->|\n\
    \              |               |              |            RRP  |\n          \
    \    |               |         RRP  |<----------------|\n              |<-----------------------------|\
    \                 |\n             Figure 5.  DMU Failure Call Flow with MN and\
    \ AAA States\n   Each step in Figure 5 is described as follows:\n      1. If (A)\
    \ is lost, the MN retransmits (A).  The RADIUS AAA server\n         expects (A).\
    \  If the AAA server is in the UPDATE KEYS state,\n         the RADIUS AAA Server\
    \ sends AR with MIP_Key_Update_Request VSA,\n         and the PDSN/FA sends (B).\n\
    \      2. If (B) is lost, the MN retransmits (A).  The RADIUS AAA server\n   \
    \      expects (C).  If it receives (A), the RADIUS AAA Server sends\n       \
    \  AR with MIP_Key_Update_Request VSA, and the PDSN/FA retransmits\n         (B).\n\
    \      3. If (C) is lost, the mobile retransmits (C).  The RADIUS AAA\n      \
    \   server expects (C) and updates the MIP keys appropriately.  The\n        \
    \ RADIUS AAA server transitions to KEYS UPDATED and commits the\n         MIP_Key_Data.\
    \  The RADIUS AAA Server sends the AR with\n         AAA_Authenticator VSA, and\
    \ the PDSN/FA replies to the MN with\n         (D).\n      4. If (D) is lost,\
    \ the mobile retransmits (C) using the same key\n         data sent previously.\
    \  The RADIUS AAA server expects (A) using\n         the same keys.\n        \
    \ a. If the RADIUS AAA server receives (C) with the same keys it\n           \
    \ received previously, it retransmits the AR with\n            AAA_Authenticator\
    \ VSA and the PDSN replies with (D),\n            containing the AAA_Authenticator.\n\
    \         b. If the RADIUS AAA server receives (C) with different keys\n     \
    \       than it received previously, the RADIUS AAA Server sends AR\n        \
    \    with MIP_Key_Update_Request VSA, the PDSN/FA retransmits\n            (B),\
    \ and the RADIUS AAA server transitions to UPDATE KEYS.\n         c. If the RADIUS\
    \ AAA server receives (A), which fails\n            authentication using the keys\
    \ sent in (C), the RADIUS AAA\n            Server sends AR with MIP_Key_Update_Request,\
    \ the PDSN/FA\n            retransmits (B), and the RADIUS AAA server transitions\
    \ to\n            UPDATE KEYS.\n      5. Once the PDSN/FA receives (A), forwards\
    \ the ARQ to the RADIUS\n         AAA server, and the MN-AAA Authenticator is\
    \ verified using the\n         MN_AAA key, the RADIUS AAA Server transitions to\
    \ the KEYS VALID\n         state and the DMU process is complete.\n   The AAA\
    \ DMU state machine is described in Figure 6.\n                              \
    \ --------------\n        --------------------->|  KEYS VALID  |---------------\n\
    \       |  Auth success using   --------------   Need Key     |\n       |  MIP_Key_Data\
    \                          Update       |\n       |                          \
    \                           |\n       |            Auth failed (invalid keys)\
    \               |\n       |            or RRQ with different MIP_Key_Data    \
    \   |\n       |           ---------------------------------         |\n      \
    \ |          |                                 |        |\n       |          |\
    \                                 v        v\n    ----------------           \
    \                   ---------------\n   |  KEYS UPDATED  |                   \
    \         |  UPDATE KEYS  |\n    ----------------                            \
    \  ---------------\n       |       ^  ^                                 |\n  \
    \     |       |  |                                 |\n        -------    ---------------------------------\n\
    \   RRQ with same           Got MIP_Key_Data\n   MIP_Key_Data\n              \
    \ Figure 6. RADIUS AAA Server DMU State Machine\n"
- title: 6.  cdma2000(R) HRPD/1xEV-DO Support
  contents:
  - "6.  cdma2000(R) HRPD/1xEV-DO Support\n   Because the DMU Procedure occurs at\
    \ the IP Layer, the DMU Procedure\n   supports MIP key distribution in either\
    \ the cdma2000(R) 1X or\n   HRPD/1xEV-DO network.  Because the cdma2000(R) HRPD/1xEV-DO\
    \ network\n   does not provide Radio Access Network (RAN) authentication, the\
    \ DMU\n   Procedure is more susceptible to a false MN attack (than in an\n   cdma2000(R)\
    \ 1X network with Cellular Authentication and Voice\n   Encryption (CAVE) RAN\
    \ authentication).  For this reason, the DMU\n   Procedure has the capability\
    \ to optionally support device-to-network\n   authentication using the MN_Authenticator.\n\
    \   The method of MN_Authenticator delivery to the RADIUS AAA server is\n   outside\
    \ the scope of this document, allowing service providers the\n   flexibility to\
    \ determine the most efficient/least intrusive procedure\n   to support MN authentication\
    \ during the DMU Procedure.\n"
- title: 6.1.  RADIUS AAA Support
  contents:
  - "6.1.  RADIUS AAA Support\n   The RADIUS AAA server MUST support three MN_Authenticator\
    \ options:\n   1. Ignore MN_Authenticator\n      Depending on other potential\
    \ authentication/fraud prevention\n      options (outside the scope of the DMU\
    \ Procedure), the RADIUS AAA\n      Server MUST have the capability to ignore\
    \ the MN_Authenticator.\n      For example, when the RADIUS AAA Server decrypts\
    \ the MIP_Key_Data\n      payload, the AAA Server silently discards the MN_Authenticator.\n\
    \   2. Pre-Update Validation\n      Prior to updating a subscription profile with\
    \ the delivered MIP\n      keys, the RADIUS AAA Server MUST compare the MN_AuthenticatorMN\n\
    \      (delivered via the encrypted MIP_Key_Data payload) with the\n      MN_AuthenticatorAAA\
    \ (possibly delivered via the service provider\n      customer care or billing/provisioning\
    \ system).\n   3. Post-Update Validation\n      After the DMU Procedure is complete,\
    \ the RADIUS AAA Server stores\n      the delivered MN_AuthenticatorMN and waits\
    \ for delivery of the\n      MN_AuthenticatorAAA (via Customer Care, interactive\
    \ voice response\n      (IVR), or some other unspecified process).  Once the\n\
    \      MN_Authenticator is delivered to the RADIUS AAA Server, the AAA\n     \
    \ MUST compare the MN_AuthenticatorMN (delivered via the encrypted\n      MIP_Key_Data\
    \ payload) with the MN_AuthenticatorAAA.  If the\n      Authenticators match,\
    \ the RADIUS AAA Server authorizes access and\n      final update of the MIP keys.\n"
- title: 6.2.  MN Support
  contents:
  - "6.2.  MN Support\n   The Mobile Node (MN) MUST store the 24-bit MN_Authenticator.\n\
    \   The MN MUST display the MN_Authenticator as an 8 decimal digit number\n  \
    \ (via LCD display on a handset or via a GUI for a modem).  If the MN\n   resides\
    \ within a handset, the user MAY display the MN_Authenticator\n   using the following\
    \ keypad sequence:  \"FCN + * + * + M + I + P +\n   RCL\".  Otherwise, the MN\
    \ MUST display the MN_Authenticator via the\n   device's GUI.\n   The MN MUST\
    \ have the capability to reset the MN_Authenticator.  In\n   other words, the\
    \ MN MUST have the capability to randomly/pseudo-\n   randomly generate a new\
    \ 24-bit MN_Authenticator upon user command, in\n   accordance with RFC 4086.\
    \  The reset feature mitigates possible\n   compromise of the MN_Authenticator\
    \ during shipment/storage.  If the\n   MN resides within a handset, the user MAY\
    \ reset the MN_Authenticator\n   using the following keypad sequence:  \"FCN +\
    \ * + * + M + I + P + C +\n   C + RCL\".  Otherwise, the MN MUST reset the MN_Authenticator\
    \ via the\n   device's GUI.\n   The MN manufacturer MAY pre-load the MN with the\
    \ MN_Authenticator.\n   For example, by pre-loading the MN_Authenticator and affixing\
    \ a\n   sticker with the MN_Authenticator (8 decimal digit representation) to\n\
    \   the MN (e.g., modem), the point-of-sale representative does not have\n   to\
    \ retrieve the MN_Authenticator from the MN interface.\n   [Optional] The MN MAY\
    \ maintain a separate primary and secondary queue\n   of MN_Authenticator/MIP_Key_Data\
    \ Payload pairs.  When the MN user\n   resets the primary MN_Authenticator, the\
    \ MN discards the primary\n   MN_Authenticator (and any associated MIP_Key_Data\
    \ Payload) and\n   assigns the MN_Authenticator in the secondary queue as the\
    \ primary\n   MN_Authenticator (and assigns any associated MIP_Key_Data Payloads\
    \ to\n   the primary queue).  This feature enables the user/provisioner to\n \
    \  reset the MN_Authenticator and immediately initiate the DMU procedure\n   without\
    \ losing the MIP_Key_Data Payload pre-encryption advantage.\n   Upon MN_Authenticator\
    \ transfer from the secondary to primary queue,\n   the MN MUST generate a new\
    \ MN_Authenticator and associated\n   MIP_Key_Data Payload for the secondary queue.\
    \  The MN MUST check both\n   the primary and secondary MN_Authenticator/MIP_Key_Data\
    \ Payload\n   queues upon power-up or application initiation.  The MN MUST maintain\n\
    \   at least one MN_Authenticator/MIP_Key_Data Payload pair in each\n   queue.\n"
- title: '6.3.  Informative: MN_Authenticator Support'
  contents:
  - "6.3.  Informative: MN_Authenticator Support\n   MN authentication using the MN_Authenticator\
    \ gives the service\n   provider the maximum flexibility in determining how to\
    \ deliver the\n   MN_Authenticator to the RADIUS AAA Server.  The method of\n\
    \   MN_Authenticator delivery is outside the scope of this document.\n   However,\
    \ to provide some context as to how the MN_Authenticator may\n   support MN authentication/fraud\
    \ prevention in the HRPD/1xEV-DO\n   environment, we describe the following possible\
    \ provisioning\n   scenario.\n   When a subscriber initially acquires their HRPD/1xEV-DO\
    \ device and\n   service, the point-of-sale representative records the subscription\n\
    \   information into the billing/provision system via a computer terminal\n  \
    \ at the point-of-sale.  The billing/provisioning system delivers\n   certain\
    \ information to the RADIUS AAA Server (e.g., NAI, MSID,\n   Electronic Serial\
    \ Number (ESN)) including the MN_Authenticator, which\n   the point-of-sale representative\
    \ retrieves via the MN device's\n   display.  In the case of a modem, the manufacturer\
    \ may have pre-\n   loaded the MN_Authenticator and placed a copy of the MN_Authenticator\n\
    \   on a sticker attached to the modem.  The point-of-sale representative\n  \
    \ simply copies the 8 decimal digit value of the MN_Authenticator into\n   the\
    \ customer profile.  Once the MN is loaded with the proper NAI and\n   powered-up,\
    \ the MN initiates the DMU Procedure with the RADIUS AAA\n   Server.  The RADIUS\
    \ AAA Server compares the MN-delivered\n   MN_Authenticator with the billing-system-delivered\
    \ MN_Authenticator.\n   If the authenticators match, the RADIUS AAA Server updates\
    \ the\n   subscriber profile with the delivered MIP keys and authorizes\n   service.\
    \  If the Post-Update option is enabled within the RADIUS AAA\n   Server, the\
    \ RADIUS AAA Server tentatively updates the subscription\n   profile until it\
    \ receives the MN_Authenticator via the\n   billing/provision system.\n   As another\
    \ option, the service provider MAY use an IVR system in\n   which the HRPD/1xEV-DO\
    \ subscriber calls a provisioning number and\n   inputs the MN_Authenticator.\
    \  The IVR system then delivers the\n   MN_Authenticator to the RADIUS AAA Server\
    \ for final validation and\n   Packet Data Access.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The DMU Procedure is designed to maximize the\
    \ efficiency of MIP key\n   distribution while providing adequate key distribution\
    \ security.  The\n   following provides a description of potential security\n\
    \   vulnerabilities and their relative risk to the DMU Procedure:\n"
- title: 7.1.  Cryptographic Key Generation by the MN
  contents:
  - "7.1.  Cryptographic Key Generation by the MN\n   Because the MN is required to\
    \ properly generate the MN_AAA, MN_HA,\n   and CHAP key, the MN must perform cryptographic\
    \ key generation in\n   accordance with accepted random/pseudo-random number generation\n\
    \   procedures.  MN manufacturers MUST comply with RFC 4086 [12]\n   guidelines,\
    \ and service providers SHOULD ensure that manufacturers\n   implement acceptable\
    \ key generation procedures.  The use of\n   predictable cryptographic keys could\
    \ be devastating to MIP security.\n   However, the risk of not using acceptable\
    \ random/pseudo-random key\n   generation is minimal as long as MN manufacturers\
    \ adhere to RFC 4086\n   guidelines.  Furthermore, if a key generation flaw is\
    \ identified, the\n   flaw appears readily correctable via a software patch, minimizing\
    \ the\n   impact.\n"
- title: 7.2.  Man-in-the-Middle Attack
  contents:
  - "7.2.  Man-in-the-Middle Attack\n   The DMU procedure is susceptible to a Man-in-the-Middle\
    \ (MITM)\n   attack; however, such an attack appears relatively complex and\n\
    \   expensive.  When Authentication and Key Agreement (AKA) is deployed\n   within\
    \ cdma2000(R) 1X, the MITM Attack will be eliminated.  The risk\n   of an MITM\
    \ Attack is minimal due to required expertise, attack\n   expense, and impending\
    \ cdma2000(R) 1X mutual authentication\n   protection.  If a particular cdma2000(R)\
    \ 1X network does not support\n   A-key authentication, the MN_Authenticator MAY\
    \ optionally be used.\n"
- title: 7.3.  RSA Private Key Compromise
  contents:
  - "7.3.  RSA Private Key Compromise\n   Because one RSA Private key may be associated\
    \ with millions of MNs\n   (RSA public key), it is important to protect the RSA\
    \ Private key from\n   disclosure to unauthorized parties.  If a MN manufacturer\
    \ is\n   generating the RSA public/private key pair, the MN manufacturer MUST\n\
    \   establish adequate security procedures/policies regarding the\n   dissemination\
    \ of the RSA Private key to the appropriate service\n   provider.  An RSA Private\
    \ key SHOULD be distributed to a legitimate\n   cdma2000(R) service provider only.\
    \  If a service provider is\n   generating their own RSA public/private key pair,\
    \ the service\n   provider MUST protect the RSA Private key from disclosure to\n\
    \   unauthorized parties.\n"
- title: 7.4.  RSA Encryption
  contents:
  - "7.4.  RSA Encryption\n   Several vulnerabilities have been identified in certain\n\
    \   implementations of RSA; however, they do not appear applicable to the\n  \
    \ DMU Procedure.\n"
- title: 7.5.  False Base Station/PDSN
  contents:
  - "7.5.  False Base Station/PDSN\n   The MN appears to be protected against a false\
    \ BS denial-of-service\n   (DOS) attack, since only the proper RADIUS AAA server\
    \ can recover the\n   AAA_Authenticator.  This method of preventing a false base\
    \ station\n   attack assumes security of the network messaging between the AAA\
    \ and\n   the serving system, as discussed in Section 7.9.\n"
- title: 7.6.  cdma2000(R) 1X False MN
  contents:
  - "7.6.  cdma2000(R) 1X False MN\n   The cdma2000(R) 1X network appears adequately\
    \ protected against a\n   false MN by IS-2000 challenge-response authentication.\
    \  If DMU is\n   used outside the cellular domain, equivalent authentication\n\
    \   procedures are required for the same level of security.\n"
- title: 7.7.  HRPD/1xEV-DO False MN
  contents:
  - "7.7.  HRPD/1xEV-DO False MN\n   The 1xEV-DO RADIUS AAA Server MAY optionally\
    \ authenticate the MN\n   using the MN_Authenticator to prevent a fraudulent MN\
    \ activation.\n"
- title: 7.8.  Key Lifetimes
  contents:
  - "7.8.  Key Lifetimes\n   There is no explicit lifetime for the keys distributed\
    \ by DMU.\n   The lifetime of the keys distributed by DMU is determined by the\n\
    \   system operator through the RADIUS AAA server.  The MN_AAA and MN_HA\n   key\
    \ lifetimes can be controlled by initiating an update as needed.\n   Furthermore,\
    \ the DMU process is protected against false initiation\n   because the MN cannot\
    \ initiate DMU.  This makes it unworkable to\n   provide an explicit lifetime\
    \ to the MN, since the MN cannot take any\n   action to renew the keys after expiration.\n"
- title: 7.9.  Network Message Security
  contents:
  - "7.9.  Network Message Security\n   The security of the MN-HA keys delivered from\
    \ the RADIUS AAA server\n   to the MIP home agent requires confidentiality for\
    \ network messages\n   containing such keys.  The specification of security requirements\
    \ for\n   network messages is the responsibility of the operator, and is\n   outside\
    \ the scope of this document. (Note that similar considerations\n   apply to the\
    \ distribution of Shared Secret Data, which is already\n   transmitted between\
    \ nodes in the ANSI-41 network.)\n   If DMU is used outside the domain of a cellular\
    \ operator, RADIUS\n   security features MAY be used, including the Request-Authenticator\n\
    \   and Response-Authenticator fields defined in [4] and the Message-\n   Authenticator\
    \ attribute defined in [13].\n"
- title: 8.  Verizon Wireless RADIUS Attributes
  contents:
  - "8.  Verizon Wireless RADIUS Attributes\n   Three new RADIUS Attributes are required\
    \ to support the DMU Procedure\n   and are specified as follows:\n   Type: 26\n\
    \   Length: >9\n   Verizon Wireless Enterprise/Vendor ID: 12951\n   MIP_Key_Update_Request:\n\
    \   ----------------------\n   The Home RADIUS AAA Server includes this attribute\
    \ to indicate that\n   MIP key update is required.\n   Vendor-Type = 1\n   Vendor-Length\
    \ = 3 bytes\n   Vendor-Value = PKOID of the RADIUS AAA Server\n   MIP_Key_Data:\n\
    \   ------------\n   Key data payload containing the encrypted MN_AAA key, MN_HA\
    \ key, CHAP\n   key, MN_Authenticator, and AAA_Authenticator.  This payload also\n\
    \   contains the Public Key Identifier.\n      Vendor-Type = 2\n      Vendor-Length\
    \ = 134 bytes\n      NOTE: Vendor-Length depends on the size of the RSA modulus.\
    \  For\n         example, when RSA-512 is used, Vendor-Length = 70 bytes.\n  \
    \    Vendor-Value = 128 byte RSA encryption payload (when 1024-bit RSA\n     \
    \    used), which contains encrypted MN_AAA key, MN_HA key, CHAP\n         key,\
    \ MN_Authenticator, and AAA_Authenticator.\n      The four (4) byte Public Key\
    \ Identifier is concatenated to the\n         encrypted payload.\n   AAA_Authenticator:\n\
    \   -----------------\n   The 64-bit AAA_Authenticator value decrypted by the\
    \ Home RADIUS AAA\n   Server.\n      Vendor-Type = 3\n      Vendor-Length = 10\
    \ bytes\n      Vendor-Value = decrypted AAA_Authenticator from Home RADIUS AAA\n\
    \         Server.\n   Public Key Invalid:\n   ------------------\n   The home\
    \ RADIUS AAA Server includes this attribute to indicate that\n   the public key\
    \ used by the MN is not valid.\n      Vendor-Type = 4\n      Vendor-Length = 2\
    \ bytes\n      Vendor-Value = none.\n   Note:  An Organization may define RADIUS\
    \ VSAs using its own\n   Organization identifier.\n"
- title: 9.  Verizon Wireless Mobile IP Extensions
  contents:
  - "9.  Verizon Wireless Mobile IP Extensions\n   Three Verizon Wireless Mobile IP\
    \ Vendor/Organization-Specific\n   Extensions (VSEs) (RFC 3115), required to support\
    \ the DMU Procedure,\n   are specified as follows:\n   Type: 38 (CVSE-TYPE-NUMBER)\n\
    \   Verizon Wireless Vendor ID: 12951 (high-order octet is 0 and low\n   order\
    \ octets are the SMI Network Management Private Enterprise Code\n   of the Vendor\
    \ in the network byte order, as defined by IANA).\n            0          7 8\
    \         15 16                     31\n            ---------------------------------------------------\n\
    \           |    Type    |  Reserved  |        Length           |\n          \
    \  ---------------------------------------------------\n           |         \
    \        Vendor/Org-ID                     |\n            ---------------------------------------------------\n\
    \           |   Vendor-CVSE-Type      |   Vendor-CVSE-Value ... |\n          \
    \  ---------------------------------------------------\n        Figure 7.  Critical\
    \ Vendor/Organization-Specific Extension\n   MIP_Key_Request:\n   ---------------\n\
    \   The Home RADIUS AAA Server includes this extension to indicate that\n   MIP\
    \ key update is required.\n      Length = 7\n      NOTE: The RFC 3115 Editor has\
    \ stated that the Reserved field is\n         not included in the length determination.\n\
    \      Vendor-CVSE-Type = 1\n      Vendor-CVSE-Value = PKOID sent in the RADIUS\n\
    \         MIP_Key_Update_Request attribute.\n   MIP_Key_Data:\n   ------------\n\
    \   Key data payload containing encrypted MN_AAA key, MN_HA key, CHAP\n   key,\
    \ MN_Authenticator, and AAA_Authenticator.  This payload also\n   contains the\
    \ Public Key Identifier.\n      Length = 138\n      NOTE: Length depends on the\
    \ size of the RSA modulus.  For example,\n         when RSA-512 is used, Length\
    \ = 74 bytes.\n      Vendor-CVSE-Type = 2\n      Vendor-CVSE-Value = 128 byte\
    \ RSA encryption payload (when 1024-bit\n         RSA used) which contains encrypted\
    \ MN_AAA key, MN_HA key, CHAP\n         key, MN_Authenticator, and AAA_Authenticator.\n\
    \      The four (4) byte Public Key Identifier and DMUV is concatenated\n    \
    \     to the encrypted payload.\n   AAA_Authenticator:\n   -----------------\n\
    \   The 64-bit AAA_Authenticator value decrypted by the Home RADIUS AAA\n   Server.\n\
    \      Length = 14 bytes\n      Vendor-CVSE-Type = 3\n      Vendor-CVSE-Value\
    \ = decrypted AAA_Authenticator from the Home\n         RADIUS AAA Server.\n \
    \  Public Key Invalid:\n   ------------------\n   The Home RADIUS AAA Server includes\
    \ this extension to indicate that\n   the public key used by the MN is not valid.\n\
    \      Length = 6 bytes\n      Vendor-CVSE-Type = 4\n      Vendor-CVSE-Value =\
    \ none.\n   Note:  An Organization may define VSEs using their own Organization\n\
    \   identifier.\n"
- title: 10.  Public Key Identifier and DMU Version
  contents:
  - "10.  Public Key Identifier and DMU Version\n   The Public Key Identifier (Pub_Key_ID)\
    \ is used during the Dynamic\n   Mobile IP Update (DMU) procedure to allow the\
    \ RADIUS AAA Server to\n   distinguish between different public keys (which may\
    \ be assigned by\n   different manufacturers, service providers, or other organizations).\n\
    \   The Public Key Identifier consists of the PKOID, PKOI, PK_Identifier,\n  \
    \ and ATV fields.  The DMU Version field enables subsequent revisions\n   of the\
    \ DMU procedure.\n              ----------------------------------------------\n\
    \             | PKOID  |   PKOI  | PK_Expansion | ATV | DMUV |\n             \
    \ ----------------------------------------------\n              0      7 8   \
    \   15 16          23 24 27 28  31\n                 Figure 8. Public Key Identifier\
    \ and DMUV\n   Each Public Key Organization (PKO) MUST be assigned a Public Key\n\
    \   Organization Identifier (PKOID) to enable the RADIUS AAA Server to\n   distinguish\
    \ between different public keys created by different PKOs\n   (see Table 1).\n\
    \   If a service provider does not provide the MN manufacturer with a\n   (RSA)\
    \ public key, the manufacturer MUST generate a unique RSA\n   Public/Private key\
    \ pair and pre-load each MN with the RSA public key\n   (1024-bit modulus by default).\
    \  The manufacturer MAY share the same\n   RSA Private key with multiple service\
    \ providers as long as reasonable\n   security procedures are established and\
    \ maintained (by the\n   manufacturer) to prevent disclosure of the RSA Private\
    \ (decryption)\n   key to an unauthorized party.\n   The Public Key Organization\
    \ Index (PKOI) is an 8-bit field whose\n   value is defined at the discretion\
    \ of the PKO.  For example, a device\n   manufacturer MAY incrementally assign\
    \ a new PKOI for each\n   Public/Private key pair when the pair is created.\n\
    \   The PK_Expansion field enables support for additional PKOs or\n   expansion\
    \ of the PKOI.\n   The DMU Version field allows for DMU Procedure version identification\n\
    \   (see Table 2).\n   The Algorithm Type and Version (ATV) field allows for identification\n\
    \   of the public key algorithm and version used (see Table 3).\n          Table\
    \ 1.  Public Key Organization Identification Table\n   PKOID    Public Key   \
    \              PKOID    Public Key\n   (HEX)    Organization (PKO)         (HEX)\
    \    Organization (PKO)\n   -----    ------------------         -----    ------------------\n\
    \   00       RESERVED                   40       Sanyo Fisher Company\n   01 \
    \      RESERVED                   41       Sharp Laboratories of\n           \
    \                                     America\n   02       RESERVED          \
    \         42       Sierra Wireless, Inc.\n   03       RESERVED               \
    \    43       Sony Electronics\n   04       RESERVED                   44    \
    \   Synertek, Inc.\n   05       RESERVED                   45       Tantivy Communications,\n\
    \                                                Inc.\n   06       RESERVED  \
    \                 46       Tellus Technology, Inc.\n   07       RESERVED     \
    \              47       Wherify Wireless, Inc.\n   08       RESERVED         \
    \          48       Airbiquity\n   09       RESERVED                   49    \
    \   ArrayComm\n   0A       Verizon Wireless           4A       Celletra Ltd.\n\
    \   0B       AAPT Ltd.                  4B       CIBERNET Corporation\n   0C \
    \      ALLTEL Communications      4C       CommWorks Corporation,\n          \
    \                                      a 3Com Company\n   0D       Angola Telecom\
    \             4D       Compaq Computer\n                                     \
    \           Corporation\n   0E       Bell Mobility              4E       ETRI\n\
    \   0F       BellSouth International    4F       Glenayre Electronics\n      \
    \                                          Inc.\n   10       China Unicom    \
    \           50       GTRAN, Inc.\n   11       KDDI Corporation           51  \
    \     Logica\n   12       Himachal Futuristic        52       LSI Logic\n    \
    \        Communications Ltd.\n   13       Hutchison Telecom (HK),    53      \
    \ Metapath Software\n            Ltd.                                International,\
    \ Inc.\n   14       IUSACELL                   54       Metawave Communications\n\
    \   15       Komunikasi Selular         55       Openwave Systems Inc.\n     \
    \       Indonesia (Komselindo)\n   16       Korea Telecom Freetel,     56    \
    \   ParkerVision, Inc.\n            Inc.\n   17       Leap                   \
    \    57       QUALCOMM, Inc.\n   18       LG Telecom, Ltd.           58      \
    \ QuickSilver Technologies\n   19       Mahanagar Telephone Nigam  59       Research\
    \ Institute of\n            Limited (MTNL)                      Telecommunication\n\
    \                                                Transmission, MII (RITT)\n  \
    \ 1A       Nextel Communications,     5A       Schema, Ltd.\n            Inc.\n\
    \   1B       Operadora UNEFON SA de CV  5B       SchlumbergerSema\n   1C     \
    \  Pacific Bangladesh         5C       ScoreBoard, Inc.\n            Telecom Limited\n\
    \   1D       Pegaso PCS, S.A. DE C.V.   5D       SignalSoft Corp.\n   PKOID  \
    \  Public Key                 PKOID    Public Key\n   (HEX)    Organization (PKO)\
    \         (HEX)    Organization (PKO)\n   -----    ------------------        \
    \ -----    ------------------\n   1E       Pele-Phone                 5E     \
    \  SmartServ Online,\n            Communications Ltd.                 Inc.\n \
    \  1F       Qwest                      5F       TDK Corporation\n   20       Reliance\
    \ Infocom Limited   60       Texas Instruments\n   21       Shinsegi Telecomm,\
    \ Inc.    61       Wherify Wireless, Inc.\n   22       Shyam Telelink Limited\
    \     62       Acterna\n   23       SK Telecom                 63       Anritsu\
    \ Company\n   24       Sprint PCS                 64       Ericsson\n   25   \
    \    Tata Teleservices Ltd.     65       Grayson Wireless\n   26       Telecom\
    \ Mobile Limited     66       LinkAir Communications,\n                      \
    \                          Inc.\n   27       Telstra Corporation        67   \
    \    Racal Instruments\n            Limited\n   28       Telus Mobility Cellular,\
    \   68       Rohde & Schwarz\n            Inc.\n   29       US Cellular      \
    \          69       Spirent Communications\n   2A       3G Cellular          \
    \      6A       Willtech, Inc.\n   2B       Acer Communication &       6B    \
    \   Wireless Test Systems\n            Multimedia Inc.\n   2C       AirPrime,\
    \ Inc.             6C       Airvana, Inc.\n   2D       Alpine Electronics, Inc.\
    \   6D       COM DEV Wireless\n   2E       Audiovox Communications    6E     \
    \  Conductus, Inc.\n            Corporation\n   2F       DENSO Wireless      \
    \       6F       Glenayre Electronics\n                                      \
    \          Inc.\n   30       Ditrans Corporation        70       Hitachi Telecom\
    \ (USA),\n                                                Inc.\n   31       Fujitsu\
    \ Network            71       Hyundai Syscomm Inc.\n            Communication,\
    \ Inc.\n   32       Gemplus Corporation        72       ISCO\n   33       Giga\
    \ Telecom Inc.          73       LG Electronics, Inc.\n   34       Hyundai CURITEL,\
    \ Inc.      74       LinkAir Communications,\n                               \
    \                 Inc.\n   35       InnovICs Corp              75       Lucent\
    \ Technologies,\n                                                Inc.\n   36 \
    \      Kyocera Corporation        76       Motorola CIG\n   37       LG Electronics,\
    \ Inc.       77       Nortel Networks\n   38       LinkAir Communications,   \
    \ 78       Repeater Technologies\n            Inc.\n   39       Motorola, Inc.\
    \             79       Samsung Electronics Co.,\n                            \
    \                    Ltd.\n   3A       Nokia Corporation          7A       Starent\
    \ Networks\n   3B       Novatel Wireless, Inc.     7B       Tahoe Networks, Inc.\n\
    \   3C       OKI Network Technologies   7C       Tantivy Communications,\n   \
    \                                             Inc.\n   PKOID    Public Key   \
    \              PKOID    Public Key\n   (HEX)    Organization (PKO)         (HEX)\
    \    Organization (PKO)\n   -----    ------------------         -----    ------------------\n\
    \   3D       Pixo                       7D       WaterCove Networks\n   3E   \
    \    Research In Motion         7E       Winphoria Networks, Inc.\n   3F     \
    \  Samsung Electronics        7F       ZTE Corporation\n            Co., Ltd.\n\
    \   Note: 80 through FF will be assigned by the PKOID administrator\n   (Verizion\
    \ Wireless).\n                           Table 2.  DMU Version\n             \
    \           DMU Version    DMU Version\n                           Value\n   \
    \                     -----------    -----------\n                        00 \
    \            RFC 4784\n                        01             Reserved\n     \
    \                   02             Reserved\n                        03      \
    \       Reserved\n                        04             Reserved\n          \
    \              05             Reserved\n                        06           \
    \  Reserved\n                        07             Cleartext Mode\n         \
    \          Table 3.  Algorithm Type and Version\n                        ATV \
    \     Public Key Algorithm\n                        Value    Type and Version\n\
    \                        -----    --------------------\n                     \
    \   00       Reserved\n                        01       RSA - 1024\n         \
    \               02       RSA - 768\n                        03       RSA - 2048\n\
    \                        04       Reserved\n                        05       Reserved\n\
    \                        06       Reserved\n                        07       Reserved\n"
- title: 11.  Conclusion
  contents:
  - "11.  Conclusion\n   The Dynamic Mobile IP Key Update (DMU) Procedure enables\
    \ the\n   efficient, yet secure, delivery of critical Mobile IP cryptographic\n\
    \   keys.  The use of cryptographic keys (and hence, the bootstrapping of\n  \
    \ such MIP keys using the DMU Procedure) is essential to commercial\n   delivery\
    \ of Mobile IP service in cdma2000 1xRTT and HRPD/1xEV-DO\n   networks or other\
    \ networks that utilize Mobile IP.\n"
- title: 12.  Normative References
  contents:
  - "12.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs to\
    \ Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n"
- title: 13.  Informative References
  contents:
  - "13.  Informative References\n   [2]  TIA/EIA/IS-2000 Series, Revision A, Telecommunications\
    \ Industry\n        Association, March 2000.\n   [3]  TIA/EIA/IS-856, cdma2000(R)\
    \ High Rate Packet Data Air Interface\n        Specification, Telecommunications\
    \ Industry Association, November\n        2000.\n   [4]  Rigney, C., Willens,\
    \ S., Rubens, A., and W. Simpson, \"Remote\n        Authentication Dial In User\
    \ Service (RADIUS)\", RFC 2865, June\n        2000.\n   [5]  Calhoun, P., Loughney,\
    \ J., Guttman, E., Zorn, G., and J. Arkko,\n        \"Diameter Base Protocol\"\
    , RFC 3588, September 2003.\n   [6]  TIA/EIA/IS-835-A, cdma2000(R) Wireless IP\
    \ Network Standard,\n        Telecommunications Industry Association, May 2001.\n\
    \   [7]  ANSI/TIA/EIA-41-D-97, Cellular Radiotelecommunications\n        Intersystem\
    \ Operations, Telecommunications Industry Association,\n        December 1997\n\
    \   [8]  ANSI/TIA/EIA-683-B-2001, Over-the-Air Service Provisioning of\n     \
    \   Mobile Stations in Spread Spectrum Systems, Telecommunications\n        Industry\
    \ Association, December 2001\n   [9]  Jonsson, J. and B. Kaliski, \"Public-Key\
    \ Cryptography Standards\n        (PKCS) #1: RSA Cryptography Specifications Version\
    \ 2.1\", RFC\n        3447, February 2003.\n   [10] Dommety, G. and K. Leung,\
    \ \"Mobile IP Vendor/Organization-\n        Specific Extensions\", RFC 3115, April\
    \ 2001.\n   [11] TIA-2001-A, Interoperability Specifications (IOS) for\n     \
    \   cdma2000(R) Access Network Interfaces, Telecommunications\n        Industry\
    \ Association, August 2001.\n   [12] Eastlake, D., 3rd, Schiller, J., and S. Crocker,\
    \ \"Randomness\n        Requirements for Security\", BCP 106, RFC 4086, June 2005.\n\
    \   [13] Rigney, C., Willats, W., and P. Calhoun, \"RADIUS Extensions\",\n   \
    \     RFC 2869, June 2000.\n"
- title: 14.  Acknowledgments
  contents:
  - "14.  Acknowledgments\n   Thanks to Jeffrey Dyck (Qualcomm), James Willkie (Qualcomm),\
    \ Jayanth\n   Mandayam (Qualcomm), Marcello Lioy (Qualcomm), Michael Borella\n\
    \   (CommWorks), Cliff Randall (CommWorks), Daniel Cassinelli\n   (CommWorks),\
    \ Edward Dunn (CommWorks), Suresh Sarvepalli (CommWorks),\n   Gabriella Ambramovici\
    \ (Lucent), Semyon Mizikovsky (Lucent), Sarvar\n   Patel (Lucent), Peter McCann\
    \ (Lucent), Ganapathy Sundaram (Lucent),\n   Girish Patel (Nortel), Glen Baxley\
    \ (Nortel), Diane Thompson\n   (Ericsson), Brian Hickman (Ericsson), Somsay Sychaleun\
    \ (Bridgewater),\n   Parm Sandhu (Sierra Wireless), Iulian Mucano (Sierra Wireless),\
    \ and\n   Samy Touati (Ericsson) for their useful discussions and comments.\n"
- title: 'Appendix A: Cleartext-Mode Operation'
  contents:
  - "Appendix A: Cleartext-Mode Operation\n   DMU supports a cleartext mode for development\
    \ testing where DMUV = 7.\n   The MIP_Key_Data payload will assume the same size\
    \ as if RSA 1024-bit\n   encryption were applied to the payload.  In this mode,\
    \ the\n   MIP_Key_Data RADIUS Attribute and MIP Vendor Specific Extension will\n\
    \   be 134 bytes and 138 bytes in length, respectively.  Thus, in\n   cleartext\
    \ mode, the payload MUST consist of 48 bytes of keys (MN_AAA,\n   MN_HA, and CHAP\
    \ key), 8-byte AAA_Authenticator, 3-byte\n   MN_Authenticator.  The next 69 bytes\
    \ will be padded with \"0\" bits.\n   MIP_Key_Data = MN_AAAH key, MN_HA key, CHAP_key,\
    \ MN_Authenticator,\n   AAA_Authenticator, Padding (69 bytes), Public_Key_IDi,\
    \ DMUV\n   Where:\n      MN_AAA key = 128-bit random MN / RADIUS AAA Server key.\n\
    \      MN_HA key = 128-bit random MN / Home Agent (HA) key.\n      CHAP_key =\
    \ 128-bit random Simple IP authentication key.\n      MN_Authenticator = 24-bit\
    \ random number.\n      AAA_Authenticator = 64-bit random number used by MN to\n\
    \         authenticate the RADIUS AAA Server.\n      Padding = 69 bytes of 0's.\n\
    \      DMU Version (DMUV) = 4-bit identifier of DMU version.\n   Public Key Identifier\
    \ (Pub _Key_ID) = PKOID, PKOI, PK_Expansion, ATV\n   Where:\n      Public Key\
    \ Organization Identifier (PKOID) = 8-bit serial number\n         identifier of\
    \ the Public Key Organization (PKO) that created\n         the Public Key.\n \
    \     Public Key Organization Index (PKOI) = 8-bit serial number used at\n   \
    \      PKO discretion to distinguish different Public/Private key\n         pairs.\n\
    \      PK_Expansion = 8-bit field to enable possible expansion of PKOID\n    \
    \     or PKOI fields. (Note: Default value = 0xFF)\n      Algorithm Type and Version\
    \ (ATV) = 4-bit identifier of the\n         algorithm used.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Christopher Carroll*\n   Ropes & Gray LLP\n   Fish & Neave\
    \ IP Group\n   One International Place\n   Boston, MA 02110\n   Phone: 617-951-7756\n\
    \   EMail: Christopher.Carroll@ropesgray.com\n   * This document was developed\
    \ while at Verizon Wireless.\n   Frank Quick\n   Qualcomm Incorporated\n   5775\
    \ Morehouse Drive\n   San Diego, CA 92121 USA\n   Phone: 858-658-3608\n   EMail:\
    \ fquick@qualcomm.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78\
    \ and at www.rfc-editor.org/copyright.html, and\n   except as set forth therein,\
    \ the authors retain all their rights.\n   This document and the information contained\
    \ herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION\
    \ HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE\
    \ IETF TRUST AND\n   THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\
    \ EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE\
    \ OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n\
    \   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
