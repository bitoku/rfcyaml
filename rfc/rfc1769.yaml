- title: __initial_text__
  contents:
  - '                  Simple Network Time Protocol (SNTP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memorandum describes the Simple Network Time Protocol (SNTP),\n\
    \   which is an adaptation of the Network Time Protocol (NTP) used to\n   synchronize\
    \ computer clocks in the Internet. SNTP can be used when\n   the ultimate performance\
    \ of the full NTP implementation described in\n   RFC-1305 is not needed or justified.\
    \ It can operate in both unicast\n   modes (point to point) and broadcast modes\
    \ (point to multipoint). It\n   can also operate in IP multicast mode where this\
    \ service is\n   available. SNTP involves no change to the current or previous\
    \ NTP\n   specification versions or known implementations, but rather a\n   clarification\
    \ of certain design features of NTP which allow operation\n   in a simple, stateless\
    \ remote-procedure call (RPC) mode with accuracy\n   and reliability expectations\
    \ similar to the UDP/TIME protocol\n   described in RFC-868.\n   This memorandum\
    \ obsoletes RFC-1361 of the same title. Its purpose is\n   to explain the protocol\
    \ model for operation in broadcast mode, to\n   provide additional clarification\
    \ in some places and to correct a few\n   typographical errors. A working knowledge\
    \ of the NTP Version 3\n   specification RFC-1305 is not required for an implementation\
    \ of SNTP.\n   Distribution of this memorandum is unlimited.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Network Time Protocol (NTP) specified in RFC-1305 [MIL92]\
    \ is used\n   to synchronize computer clocks in the global Internet. It provides\n\
    \   comprehensive mechanisms to access national time and frequency\n   dissemination\
    \ services, organize the time-synchronization subnet and\n   adjust the local\
    \ clock in each participating subnet peer. In most\n   places of the Internet\
    \ of today, NTP provides accuracies of 1-50 ms,\n   depending on the characteristics\
    \ of the synchronization source and\n   network paths.\n   RFC-1305 specifies\
    \ the NTP protocol machine in terms of events,\n   states, transition functions\
    \ and actions and, in addition, optional\n   algorithms to improve the timekeeping\
    \ quality and mitigate among\n   several, possibly faulty, synchronization sources.\
    \ To achieve\n   accuracies in the low milliseconds over paths spanning major\
    \ portions\n   of the Internet of today, these intricate algorithms, or their\n\
    \   functional equivalents, are necessary. However, in many cases\n   accuracies\
    \ of this order are not required and something less, perhaps\n   in the order\
    \ of large fractions of the second, is sufficient. In such\n   cases simpler protocols\
    \ such as the Time Protocol [POS83], have been\n   used for this purpose. These\
    \ protocols usually involve an RPC\n   exchange where the client requests the\
    \ time of day and the server\n   returns it in seconds past some known reference\
    \ epoch.\n   NTP is designed for use by clients and servers with a wide range\
    \ of\n   capabilities and over a wide range of network delays and jitter\n   characteristics.\
    \ Most users of the Internet NTP synchronization\n   subnet of today use a software\
    \ package including the full suite of\n   NTP options and algorithms, which are\
    \ relatively complex, real-time\n   applications. While the software has been\
    \ ported to a wide variety of\n   hardware platforms ranging from supercomputers\
    \ to personal computers,\n   its sheer size and complexity is not appropriate\
    \ for many\n   applications. Accordingly, it is useful to explore alternative\
    \ access\n   strategies using far simpler software appropriate for less stringent\n\
    \   accuracy expectations.\n   This memorandum describes the Simple Network Time\
    \ Protocol (SNTP),\n   which is a simplified access strategy for servers and clients\
    \ using\n   NTP as now specified and deployed in the Internet. There are no\n\
    \   changes to the protocol or implementations now running or likely to\n   be\
    \ implemented in the near future. The access paradigm is identical\n   to the\
    \ UDP/TIME Protocol and, in fact, it should be easily possible\n   to adapt a\
    \ UDP/TIME client implementation, say for a personal\n   computer, to operate\
    \ using SNTP. Moreover, SNTP is also designed to\n   operate in a dedicated server\
    \ configuration including an integrated\n   radio clock. With careful design and\
    \ control of the various latencies\n   in the system, which is practical in a\
    \ dedicated design, it is\n   possible to deliver time accurate to the order of\
    \ microseconds.\n   It is strongly recommended that SNTP be used only at the extremities\n\
    \   of the synchronization subnet. SNTP clients should operate only at\n   the\
    \ leaves (highest stratum) of the subnet and in configurations\n   where no NTP\
    \ or SNTP client is dependent on another SNTP client for\n   synchronization.\
    \ SNTP servers should operate only at the root\n   (stratum 1) of the subnet and\
    \ then only in configurations where no\n   other source of synchronization other\
    \ than a reliable radio clock is\n   available. The full degree of reliability\
    \ ordinarily expected of\n   primary servers is possible only using the redundant\
    \ sources, diverse\n   subnet paths and crafted algorithms of a full NTP implementation.\n\
    \   This extends to the primary source of synchronization itself in the\n   form\
    \ of multiple radio clocks and backup paths to other primary\n   servers should\
    \ the radio clock fail or deliver incorrect time.\n   Therefore, the use of SNTP\
    \ rather than NTP in primary servers should\n   be carefully considered.\n"
- title: 2. Operating Modes and Addressing
  contents:
  - "2. Operating Modes and Addressing\n   Like NTP, SNTP can operate in either unicast\
    \ (point to point) or\n   broadcast (point to multipoint) modes. A unicast client\
    \ sends a\n   request to a server and expects a reply from which it can determine\n\
    \   the time and, optionally, the roundtrip delay and local clock offset\n   relative\
    \ to the server. A broadcast server periodically sends a\n   message to a designated\
    \ IP broadcast address or IP multicast group\n   address and ordinarily expects\
    \ no requests from clients, while a\n   broadcast client listens on this address\
    \ and ordinarily sends no\n   requests to servers. Some broadcast servers may\
    \ elect to respond to\n   client requests as well as send unsolicited broadcast\
    \ messages, while\n   some broadcast clients may elect to send requests only in\
    \ order to\n   determine the network propagation delay between the server and\n\
    \   client.\n   In unicast mode the client and server IP addresses are assigned\n\
    \   following the usual conventions. In broadcast mode the server uses a\n   designated\
    \ IP broadcast address or IP multicast group address,\n   together with a designated\
    \ media-access broadcast address, and the\n   client listens on these addresses.\
    \ For this purpose, an IP broadcast\n   address has scope limited to a single\
    \ IP subnet, since routers do not\n   propagate IP broadcast datagrams. In the\
    \ case of Ethernets, for\n   example, the Ethernet media-access broadcast address\
    \ (all ones) is\n   used with an IP address consisting of the IP subnet number\
    \ in the net\n   field and all ones in the host field.\n   On the other hand,\
    \ an IP multicast group address has scope extending\n   to potentially the entire\
    \ Internet. The actual scope, group\n   membership and routing are determined\
    \ by the Internet Group\n   Management Protocol (IGMP) [DEE89] and various routing\
    \ protocols,\n   which are beyond the scope of this document. In the case of\n\
    \   Ethernets, for example, the Ethernet media-access broadcast address\n   (all\
    \ ones) is used with the assigned IP multicast group address of\n   224.0.1.1.\
    \ Other than the IP addressing conventions and IGMP, there\n   is no difference\
    \ in server operations with either the IP broadcast\n   address or IP multicast\
    \ group address.\n   Broadcast clients listen on the designated media-access broadcast\n\
    \   address, such as all ones in the case of Ethernets. In the case of IP\n  \
    \ broadcast addresses, no further provisions are necessary. In the case\n   of\
    \ IP multicast group addresses, the host may need to implement IGMP\n   in order\
    \ that the local router intercepts messages to the 224.0.1.1\n   multicast group.\
    \ These considerations are beyond the scope of this\n   document.\n   In the case\
    \ of SNTP as specified herein, there is a very real\n   vulnerability that SNTP\
    \ multicast clients can be disrupted by\n   misbehaving or hostile SNTP or NTP\
    \ multicast servers elsewhere in the\n   Internet, since at present all such servers\
    \ use the same IP multicast\n   group address 224.0.1.1. Where necessary, access\
    \ control based on the\n   server source address can be used to select only those\
    \ servers known\n   to and trusted by the client. Alternatively, by convention\
    \ and\n   informal agreement, all NTP multicast servers now include an MD5-\n\
    \   encrypted message digest in every message, so that clients can\n   determine\
    \ if the message is authentic and not modified in transit. It\n   is in principle\
    \ possible that SNTP clients could implement the\n   necessary encryption and\
    \ key-distribution schemes, but this is\n   considered not likely in the simple\
    \ systems for which SNTP is\n   intended.\n   While not integral to the SNTP specification,\
    \ it is intended that IP\n   broadcast addresses will be used primarily in IP\
    \ subnets and LAN\n   segments including a fully functional NTP server with a\
    \ number of\n   SNTP clients in the same subnet, while IP multicast group addresses\n\
    \   will be used only in special cases engineered for the purpose. In\n   particular,\
    \ IP multicast group addresses should be used in SNTP\n   servers only if the\
    \ server implements the NTP authentication scheme\n   described in RFC-1305, including\
    \ support for the MD5 message-digest\n   algorithm.\n"
- title: 3. NTP Timestamp Format
  contents:
  - "3. NTP Timestamp Format\n   SNTP uses the standard NTP timestamp format described\
    \ in RFC-1305 and\n   previous versions of that document. In conformance with\
    \ standard\n   Internet practice, NTP data are specified as integer or fixed-point\n\
    \   quantities, with bits numbered in big-endian fashion from 0 starting\n   at\
    \ the left, or high-order, position. Unless specified otherwise, all\n   quantities\
    \ are unsigned and may occupy the full field width with an\n   implied 0 preceding\
    \ bit 0.\n   Since NTP timestamps are cherished data and, in fact, represent the\n\
    \   main product of the protocol, a special timestamp format has been\n   established.\
    \ NTP timestamps are represented as a 64-bit unsigned\n   fixed-point number,\
    \ in seconds relative to 0h on 1 January 1900. The\n   integer part is in the\
    \ first 32 bits and the fraction part in the\n   last 32 bits. In the fraction\
    \ part, the non-significant low-order\n   bits should be set to 0. This format\
    \ allows convenient multiple-\n   precision arithmetic and conversion to UDP/TIME\
    \ representation\n   (seconds), but does complicate the conversion to ICMP Timestamp\n\
    \   message representation (milliseconds). The precision of this\n   representation\
    \ is about 200 picoseconds, which should be adequate for\n   even the most exotic\
    \ requirements.\n                           1                   2            \
    \       3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           Seconds                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                  Seconds Fraction (0-padded)                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Note that, since some time in 1968 the most significant bit (bit 0 of\n  \
    \ the integer part) has been set and that the 64-bit field will\n   overflow some\
    \ time in 2036. Should NTP or SNTP be in use in 2036,\n   some external means\
    \ will be necessary to qualify time relative to\n   1900 and time relative to\
    \ 2036 (and other multiples of 136 years).\n   Timestamped data requiring such\
    \ qualification will be so precious\n   that appropriate means should be readily\
    \ available. There will exist\n   a 200-picosecond interval, henceforth ignored,\
    \ every 136 years when\n   the 64-bit field will be 0, which by convention is\
    \ interpreted as an\n   invalid or unavailable timestamp.\n"
- title: 4. NTP Message Format
  contents:
  - "4. NTP Message Format\n   Both NTP and SNTP are clients of the User Datagram\
    \ Protocol (UDP)\n   [POS80], which itself is a client of the Internet Protocol\
    \ (IP)\n   [DAR81]. The structure of the IP and UDP headers is described in the\n\
    \   cited specification documents and will not be described further here.\n  \
    \ The UDP port number assigned to NTP is 123, which should be used in\n   both\
    \ the Source Port and Destination Port fields in the UDP header.\n   The remaining\
    \ UDP header fields should be set as described in the\n   specification.\n   Following\
    \ is a description of the SNTP message format, which follows\n   the IP and UDP\
    \ headers. The SNTP message format is identical to the\n   NTP format described\
    \ in RFC-1305, with the exception that some of the\n   data fields are \"canned,\"\
    \ that is, initialized to pre-specified\n   values. The format of the NTP message\
    \ is shown below.\n                           1                   2          \
    \         3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |LI | VN  |Mode |    Stratum    |     Poll      |   Precision   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                          Root Delay                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       Root Dispersion                         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                    Reference Identifier                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   |                   Reference Timestamp (64)                    |\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   |                   Originate Timestamp (64)                    |\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   |                    Receive Timestamp (64)                     |\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   |                    Transmit Timestamp (64)                    |\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   |                                                               |\n      |\
    \                  Authenticator (optional) (96)                |\n      |   \
    \                                                            |\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   As described in the next section, in SNTP most of these fields are\n   initialized\
    \ with pre-specified data. For completeness, the function\n   of each field is\
    \ briefly summarized below.\n   Leap Indicator (LI): This is a two-bit code warning\
    \ of an impending\n   leap second to be inserted/deleted in the last minute of\
    \ the current\n   day, with bit 0 and bit 1, respectively, coded as follows:\n\
    \      LI       Value     Meaning\n      -------------------------------------------------------\n\
    \      00       0         no warning\n      01       1         last minute has\
    \ 61 seconds\n      10       2         last minute has 59 seconds)\n      11 \
    \      3         alarm condition (clock not synchronized)\n   Version Number (VN):\
    \ This is a three-bit integer indicating the NTP\n   version number, currently\
    \ 3.\n   Mode: This is a three-bit integer indicating the mode, with values\n\
    \   defined as follows:\n      Mode     Meaning\n      ------------------------------------\n\
    \      0        reserved\n      1        symmetric active\n      2        symmetric\
    \ passive\n      3        client\n      4        server\n      5        broadcast\n\
    \      6        reserved for NTP control message\n      7        reserved for\
    \ private use\n   In unicast mode the client sets this field to 3 (client) in\
    \ the\n   request and the server sets it to 4 (server) in the reply. In\n   broadcast\
    \ mode the server sets this field to 5 (broadcast).\n   Stratum: This is a eight-bit\
    \ unsigned integer indicating the stratum\n   level of the local clock, with values\
    \ defined as follows:\n      Stratum  Meaning\n      ----------------------------------------------\n\
    \      0        unspecified or unavailable\n      1        primary reference (e.g.,\
    \ radio clock)\n      2-15     secondary reference (via NTP or SNTP)\n      16-255\
    \   reserved\n   Poll Interval: This is an eight-bit signed integer indicating\
    \ the\n   maximum interval between successive messages, in seconds to the\n  \
    \ nearest power of two. The values that can appear in this field\n   presently\
    \ range from 4 (16 s) to 14 (16284 s); however, most\n   applications use only\
    \ the sub-range 6 (64 s) to 10 (1024 s).\n   Precision: This is an eight-bit signed\
    \ integer indicating the\n   precision of the local clock, in seconds to the nearest\
    \ power of two.\n   The values that normally appear in this field range from -6\
    \ for\n   mains-frequency clocks to -20 for microsecond clocks found in some\n\
    \   workstations.\n   Root Delay: This is a 32-bit signed fixed-point number indicating\
    \ the\n   total roundtrip delay to the primary reference source, in seconds\n\
    \   with fraction point between bits 15 and 16. Note that this variable\n   can\
    \ take on both positive and negative values, depending on the\n   relative time\
    \ and frequency offsets. The values that normally appear\n   in this field range\
    \ from negative values of a few milliseconds to\n   positive values of several\
    \ hundred milliseconds.\n   Root Dispersion: This is a 32-bit unsigned fixed-point\
    \ number\n   indicating the nominal error relative to the primary reference\n\
    \   source, in seconds with fraction point between bits 15 and 16. The\n   values\
    \ that normally appear in this field range from 0 to several\n   hundred milliseconds.\n\
    \   Reference Clock Identifier: This is a 32-bit code identifying the\n   particular\
    \ reference source. In the case of stratum 0 (unspecified)\n   or stratum 1 (primary\
    \ reference), this is a four-octet, left-\n   justified, 0-padded ASCII string.\
    \ While not enumerated as part of the\n   NTP specification, the following are\
    \ representative ASCII\n   identifiers:\n      Stratum Code  Meaning\n      ----------------------------------------------------------------\n\
    \      1   pps       precision calibrated source, such as ATOM (atomic\n     \
    \               clock), PPS (precision pulse-per-second source),\n           \
    \         etc.\n      1   service   generic time service other than NTP, such\
    \ as ACTS\n                    (Automated Computer Time Service), TIME (UDP/Time\n\
    \                    Protocol), TSP (Unix Time Service Protocol), DTSS\n     \
    \               (Digital Time Synchronization Service), etc.\n      1   radio\
    \     Generic radio service, with callsigns such as CHU,\n                   \
    \ DCF77, MSF, TDF, WWV, WWVB, WWVH, etc.\n      1   nav       radionavigation\
    \ system, such as OMEG (OMEGA), LORC\n                    (LORAN-C), etc.\n  \
    \    1   satellite generic satellite service, such as GOES\n                 \
    \   (Geostationary Orbit Environment Satellite, GPS\n                    (Global\
    \ Positioning Service), etc.\n      2   address   secondary reference (four-octet\
    \ Internet address of\n                    the NTP server)\n   Reference Timestamp:\
    \ This is the time at which the local clock was\n   last set or corrected, in\
    \ 64-bit timestamp format.\n   Originate Timestamp: This is the time at which\
    \ the request departed\n   the client for the server, in 64-bit timestamp format.\n\
    \   Receive Timestamp: This is the time at which the request arrived at\n   the\
    \ server, in 64-bit timestamp format.\n   Transmit Timestamp: This is the time\
    \ at which the reply departed the\n   server for the client, in 64-bit timestamp\
    \ format.\n   Authenticator (optional): When the NTP authentication mechanism\
    \ is\n   implemented, this contains the authenticator information defined in\n\
    \   Appendix C of RFC-1305. In SNTP this field is ignored for incoming\n   messages\
    \ and is not generated for outgoing messages.\n"
- title: 5. SNTP Client Operations
  contents:
  - "5. SNTP Client Operations\n   The model for n SNTP client operating with either\
    \ a NTP or SNTP\n   server is a RPC client with no persistent state. In unicast\
    \ mode, the\n   client sends a client request (mode 3) to the server and expects\
    \ a\n   server reply (mode 4). In broadcast mode, the client sends no request\n\
    \   and waits for a broadcast message (mode 5) from one or more servers,\n   depending\
    \ on configuration. Unicast client and broadcast server\n   messages are normally\
    \ sent at periods from 64 s to 1024 s, depending\n   on the client and server\
    \ configurations.\n   A unicast client initializes the SNTP message header, sends\
    \ the\n   message to the server and strips the time of day from the reply. For\n\
    \   this purpose all of the message-header fields shown above are set to\n   0,\
    \ except the first octet. In this octet the LI field is set to 0 (no\n   warning)\
    \ and the Mode field is set to 3 (client). The VN field must\n   agree with the\
    \ software version of the NTP or SNTP server; however,\n   NTP Version 3 (RFC-1305)\
    \ servers will also accept Version 2 (RFC-\n   1119) and Version 1 (RFC-1059)\
    \ messages, while NTP Version 2 servers\n   will also accept NTP Version 1 messages.\
    \ Version 0 (RFC-959) messages\n   are no longer supported. Since there are NTP\
    \ servers of all three\n   versions interoperating in the Internet of today, it\
    \ is recommended\n   that the VN field be set to 1.\n   In both unicast and broadcast\
    \ modes, the unicast server reply or\n   broadcast message includes all the fields\
    \ described above; however,\n   in SNTP only the Transmit Timestamp has explicit\
    \ meaning and then\n   only if nonzero. The integer part of this field contains\
    \ the server\n   time of day in the same format as the UDP/TIME Protocol [POS83].\n\
    \   While the fraction part of this field will usually be valid, the\n   accuracy\
    \ achieved with SNTP may justify its use only to a significant\n   fraction of\
    \ a second. If the Transmit Timestamp field is 0, the\n   message should be disregarded.\n\
    \   In broadcast mode, a client has no additional information to\n   calculate\
    \ the propagation delay between the server and client, as the\n   Transmit Timestamp\
    \ and Receive Timestamp fields have no meaning in\n   this mode. Even in unicast\
    \ mode, most clients will probably elect to\n   ignore the Originate Timestamp\
    \ and Receive Timestamp fields anyway.\n   However, in unicast mode a simple calculation\
    \ can be used to provide\n   the roundtrip delay d and local clock offset t relative\
    \ to the\n   server, generally to within a few tens of milliseconds. To do this,\n\
    \   the client sets the Originate Timestamp in the request to the time of\n  \
    \ day according to its local clock converted to NTP timestamp format.\n   When\
    \ the reply is received, the client determines a Destination\n   Timestamp as\
    \ the time of arrival according to its local clock\n   converted to NTP timestamp\
    \ format. The following table summarizes the\n   four timestamps.\n      Timestamp\
    \ Name          ID   When Generated\n      ------------------------------------------------------------\n\
    \      Originate Timestamp     T1   time request sent by client\n      Receive\
    \ Timestamp       T2   time request received at server\n      Transmit Timestamp\
    \      T3   time reply sent by server\n      Destination Timestamp   T4   time\
    \ reply received at client\n   The roundtrip delay d and local clock offset t\
    \ are defined as\n                       d = (T4 - T1) - (T2 - T3)\n         \
    \           t = ((T2 - T1) + (T3 - T4)) / 2.\n   The following table is a summary\
    \ of the SNTP client operations. There\n   are two recommended error checks shown\
    \ in the table. In all NTP\n   versions, if the LI field is 3, or the Stratum\
    \ field is not in the\n   range 1-15, or the Transmit Timestamp is 0, the server\
    \ has never\n   synchronized or not synchronized to a valid timing source within\
    \ the\n   last 24 hours. At the client discretion, the values of the remaining\n\
    \   fields can be checked as well. Whether to believe the transmit\n   timestamp\
    \ or not in case one or more of these fields appears invalid\n   is at the discretion\
    \ of the implementation.\n      Field Name              Request        Reply\n\
    \      -------------------------------------------------------------\n      LI\
    \                      0              leap indicator; if 3\n                 \
    \                            (unsynchronized), disregard\n                   \
    \                          message\n      VN                      1 (see text)\
    \   ignore\n      Mode                    3 (client)     ignore\n      Stratum\
    \                 0              ignore\n      Poll                    0     \
    \         ignore\n      Precision               0              ignore\n      Root\
    \ Delay              0              ignore\n      Root Dispersion         0  \
    \            ignore\n      Reference Identifier    0              ignore\n   \
    \   Reference Timestamp     0              ignore\n      Originate Timestamp \
    \    0 (see text)   ignore (see text)\n      Receive Timestamp       0       \
    \       ignore (see text)\n      Transmit Timestamp      0              time of\
    \ day; if 0\n                                             (unsynchronized), disregard\n\
    \                                             message\n      Authenticator   \
    \        (not used)     ignore\n"
- title: 6. SNTP Server Operations
  contents:
  - "6. SNTP Server Operations\n   The model for a SNTP server operating with either\
    \ a NTP or SNTP\n   client is an RPC server with no persistent state. Since a\
    \ SNTP server\n   ordinarily does not implement the full set of NTP algorithms\
    \ intended\n   to support redundant peers and diverse network paths, it is\n \
    \  recommended that a SNTP server be operated only in conjunction with a\n   source\
    \ of external synchronization, such as a reliable radio clock.\n   In this case\
    \ the server always operates at stratum 1.\n   A server can operate in unicast\
    \ mode, broadcast mode or both at the\n   same time. In unicast mode the server\
    \ receives a request message,\n   modifies certain fields in the NTP or SNTP header,\
    \ and returns the\n   message to the sender, possibly using the same message buffer\
    \ as the\n   request. The server may or may not respond if not synchronized to\
    \ a\n   correctly operating radio clock, but the preferred option is to\n   respond,\
    \ since this allows reachability to be determined regardless\n   of synchronization\
    \ state. In unicast mode, the VN and Poll fields of\n   the request are copied\
    \ intact to the reply. If the Mode field of the\n   request is 3 (client), it\
    \ is set to 4 (server) in the reply;\n   otherwise, this field is set to 2 (symmetric\
    \ passive) in order to\n   conform to the NTP specification.\n   In broadcast\
    \ mode, the server sends messages only if synchronized to\n   a correctly operating\
    \ reference clock. In this mode, the VN field is\n   set to 3 (for the current\
    \ SNTP version), and the Mode field to 5\n   (broadcast). The Poll field is set\
    \ to the server poll interval, in\n   seconds to the nearest power of two. It\
    \ is highly desirable that, if\n   a server supports broadcast mode, it also supports\
    \ unicast mode. This\n   is necessary so a potential broadcast client can calculate\
    \ the\n   propagation delay using client/server messages prior to regular\n  \
    \ operation using only broadcast messages.\n   The remaining fields are set in\
    \ the same way in both unicast and\n   broadcast modes. Assuming the server is\
    \ synchronized to a radio clock\n   or other primary reference source and operating\
    \ correctly, the\n   Stratum field is set to 1 (primary server) and the LI field\
    \ is set to\n   0; if not, the Stratum field is set to 0 and the LI field is set\
    \ to\n   3. The Precision field is set to reflect the maximum reading error of\n\
    \   the local clock. For all practical cases it is computed as the\n   negative\
    \ of the number of significant bits to the right of the\n   decimal point in the\
    \ NTP timestamp format. The Root Delay and Root\n   Dispersion fields are set\
    \ to 0 for a primary server; optionally, the\n   Root Dispersion field can be\
    \ set to a value corresponding to the\n   maximum expected error of the radio\
    \ clock itself. The Reference\n   Identifier is set to designate the primary reference\
    \ source, as\n   indicated in the table above.\n   The timestamp fields are set\
    \ as follows. If the server is\n   unsynchronized or first coming up, all timestamp\
    \ fields are set to\n   zero. If synchronized, the Reference Timestamp is set\
    \ to the time the\n   last update was received from the radio clock or, if unavailable,\
    \ to\n   the time of day when the message is sent. The Receive Timestamp and\n\
    \   Transmit Timestamp fields are set to the time of day when the message\n  \
    \ is sent. In unicast mode, the Originate Timestamp field is copied\n   unchanged\
    \ from the Transmit Timestamp field of the request. It is\n   important that this\
    \ field be copied intact, as a NTP client uses it\n   to check for replays. In\
    \ broadcast mode, this field is set to the\n   time of day when the message is\
    \ sent. The following table summarizes\n   these actions.\n      Field Name  \
    \            Request        Reply\n      ----------------------------------------------------------\n\
    \      LI                      ignore         0 (normal), 3\n                \
    \                             (unsynchronized)\n      VN                     \
    \ 1, 2 or 3      3 or copied from request\n      Mode                    3 (see\
    \ text)   2, 4 or 5 (see text)\n      Stratum                 ignore         1\
    \ server stratum\n      Poll                    ignore         copied from request\n\
    \      Precision               ignore         server precision\n      Root Delay\
    \              ignore         0\n      Root Dispersion         ignore        \
    \ 0 (see text)\n      Reference Identifier    ignore         source identifier\n\
    \      Reference Timestamp     ignore         0 or time of day\n      Originate\
    \ Timestamp     ignore         0 or time of day or copied\n                  \
    \                           from Transmit Timestamp of\n                     \
    \                        request\n      Receive Timestamp       ignore       \
    \  0 or time of day\n      Transmit Timestamp      (see text)     0 or time of\
    \ day\n      Authenticator           ignore         (not used)\n   There is some\
    \ latitude on the part of most clients to forgive invalid\n   timestamps, such\
    \ as might occur when first coming up or during\n   periods when the primary reference\
    \ source is inoperative. The most\n   important indicator of an unhealthy server\
    \ is the LI field, in which\n   a value of 3 indicates an unsynchronized condition.\
    \ When this value\n   is displayed, clients should discard the server message,\
    \ regardless\n   of the contents of other fields.\n"
- title: 7. References
  contents:
  - "7. References\n   [DAR81] Postel, J., \"Internet Protocol - DARPA Internet Program\n\
    \   Protocol Specification\", STD 5, RFC 791, DARPA, September 1981.\n   [DEE89]\
    \ Deering, S., \"Host Extensions for IP Multicasting. STD 5,\n   RFC 1112, Stanford\
    \ University, August 1989.\n   [MIL92] Mills, D., \"Network Time Protocol (Version\
    \ 3) Specification,\n   Implementation and Analysis. RFC 1305, University of Delaware,\n\
    \   March 1992.\n   [POS80] Postel, J., \"User Datagram Protocol\", STD 6, RFC\
    \ 768,\n   USC/Information Sciences Institute, August 1980.\n   [POS83] Postel,\
    \ J., and K. Harrenstien, \"Time Protocol\", STD 26,\n   RFC 868, USC/Information\
    \ Sciences Institute, SRI, May 1983.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   David L. Mills\n   Electrical Engineering Department\n \
    \  University of Delaware\n   Newark, DE 19716\n   Phone: (302) 831-8247\n   EMail:\
    \ mills@udel.edu\n"
