- title: __initial_text__
  contents:
  - "     XACCT's Common Reliable Accounting for Network Element (CRANE)\n       \
    \            Protocol Specification Version 1.0\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines the Common Reliable Accounting for Network\n\
    \   Element (CRANE) protocol that enables efficient and reliable delivery\n  \
    \ of any data, mainly accounting data from Network Elements to any\n   systems,\
    \ such as mediation systems and Business Support Systems\n   (BSS)/ Operations\
    \ Support Systems (OSS).  The protocol is developed\n   to address the critical\
    \ needs for exporting high volume of accounting\n   data from NE's with efficient\
    \ use of network, storage, and processing\n   resources.\n   This document specifies\
    \ the architecture of the protocol and the\n   message format, which MUST be supported\
    \ by all CRANE protocol\n   implementations.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1  Introduction...................................................2\n\
    \      1.1  Specification of Requirements.............................3\n    \
    \  1.2  Terminology...............................................3\n   2  Protocol\
    \ Overview..............................................5\n      2.1  CRANE Architecture........................................6\n\
    \      2.2  CRANE over TCP............................................7\n    \
    \  2.3  Alternate servers.........................................7\n      2.4\
    \  Templates.................................................9\n      2.5  Template\
    \ Transmission and Negotiation....................10\n      2.6  Changing Templates.......................................11\n\
    \      2.7  Flow Control.............................................12\n    \
    \  2.8  The CRANE Client Query Messages..........................13\n      2.9\
    \  CRANE Sessions...........................................13\n   3  CRANE Message\
    \ Format..........................................14\n   4  CRANE Messages................................................16\n\
    \      4.1  Flow Start (START).......................................16\n    \
    \  4.2  Flow Start Acknowledge (START ACK).......................16\n      4.3\
    \  Flow Stop (STOP).........................................17\n      4.4  Flow\
    \ Stop Acknowledge (STOP ACK).........................17\n      4.5  Connect (CONNECT)........................................18\n\
    \      4.6  Template Data (TMPL DATA)................................18\n    \
    \  4.7  Template Data Acknowledge (TMPL DATA ACK)................23\n      4.8\
    \  Final Template Data (FINAL TMPL DATA)....................25\n      4.9  Final\
    \ Template Data Acknowledge (FINAL TMPL DATA ACK)....26\n      4.10  Get Sessions\
    \ (GET SESS).................................26\n      4.11  Get Sessions Response\
    \ (GET SESS RSP)....................27\n      4.12  Get Templates (GET TMPL)................................30\n\
    \      4.13  Get Templates Response(GET TMPL RSP)....................30\n    \
    \  4.14  Start Negotiation (START NEGOTIATE).....................33\n      4.15\
    \  Start Negotiation Acknowledge (START NEGOTIATE ACK).....34\n      4.16  Data\
    \ (DATA).............................................34\n      4.17  Data Acknowledge\
    \ (DATA ACK).............................36\n      4.18  Error (ERROR)...........................................37\n\
    \      4.19  Status Request (STATUS REQ).............................38\n    \
    \  4.20  Status Response (STATUS RSP)............................38\n   5  Protocol\
    \ Version Negotiation..................................39\n   6  Security Considerations.......................................42\n\
    \   7  References....................................................43\n   8\
    \  Acknowledgments...............................................43\n   9  Authors'\
    \ Addresses............................................44\n   10 Full Copyright\
    \ Statement......................................45\n"
- title: 1  Introduction
  contents:
  - "1  Introduction\n   Network Elements are often required to export usage information\
    \ to\n   mediation and business support systems (BSS) to facilitate\n   accounting.\
    \  Though there are several existing mechanisms for usage\n   information export,\
    \ they are becoming inadequate to support the\n   evolving business requirements\
    \ from service providers.\n   For example, some of the export mechanisms are legacies\
    \ of the Telco\n   world.  Typically usage information is stored in Network Elements\
    \ as\n   Log files (e.g., CDR files), and exported to external systems in\n  \
    \ batches.  These are reliable methods, however, they do not meet the\n   real-time\
    \ and high-performance requirements of today's rapidly\n   evolving data networks.\n\
    \   RADIUS [1] is a widely deployed protocol that may be used for\n   exporting\
    \ usage information.  However, it can only handle a few\n   outstanding requests\
    \ and is not extensible due to its limited command\n   and attribute address space.\
    \  RADIUS also does not support\n   unsolicited messages from a server to a client.\
    \  A detailed analysis\n   of limitations of RADIUS can be found in [3].\n   DIAMETER\
    \ [2] is a new AAA protocol that retains the basic RADIUS\n   model, and eliminates\
    \ several drawbacks in RADIUS.  The current\n   DIAMETER protocol and its extensions\
    \ focus on Internet and wireless\n   network access, and their support to accounting\
    \ is closely associated\n   with authentication/authorization events.  DIAMETER\
    \ is intended to\n   solve many problems in the AAA area; by doing so, it does\
    \ not\n   adequately address some critical issues such as efficiency and\n   performance\
    \ in an accounting protocol.\n   There are also SNMP based mechanisms that generally\
    \ require a large\n   amount of processing and bandwidth resources.\n   Based\
    \ on the above analysis, a critical need for a reliable, fast,\n   efficient and\
    \ flexible accounting protocol exists.  The XACCT's CRANE\n   protocol is designed\
    \ to address these critical requirements.\n   This document defines the CRANE\
    \ protocol that enables efficient and\n   reliable delivery of any data, mainly\
    \ accounting data from Network\n   Elements to any systems, such as mediation\
    \ systems and BSS/OSS.  The\n   protocol is developed to address the critical\
    \ needs for exporting\n   high volume of accounting data from NE's with efficient\
    \ use of\n   network, storage, and processing resources.\n   This document specifies\
    \ the architecture of the protocol and the\n   message format, which MUST be supported\
    \ by all CRANE protocol\n   implementations.\n"
- title: 1.1 Specification of Requirements
  contents:
  - "1.1 Specification of Requirements\n   In this document, the keywords \"MUST\"\
    , \"MUST NOT\", \"SHOULD\", \"SHOULD\n   NOT\", and \"MAY\" are to be interpreted\
    \ as described in BCP 14 [5].\n   These keywords are not case sensitive in this\
    \ document.\n"
- title: 1.2 Terminology
  contents:
  - "1.2 Terminology\n   CRANE Protocol\n      CRANE stands for Common Reliable Accounting\
    \ for Network Element.\n      The CRANE Protocol maybe referred as CRANE, or the\
    \ Protocol in\n      this document.  The CRANE Protocol is used at the interface(s)\n\
    \      between a CRANE client and one or multiple CRANE servers for the\n    \
    \  purpose of delivering accounting data.\n   Client or CRANE Client\n      A\
    \ CRANE Client is an implementation on the data producing side of\n      the CRANE\
    \ protocol.  It is typically integrated with the network\n      element's software,\
    \ enabling it to collect and send out accounting\n      data to a mediation/billing\
    \ system using the protocol defined\n      herein.\n   Server or CRANE Server\n\
    \      A CRANE Server is an implementation on the data receiving side of\n   \
    \   the CRANE protocol.  It is typically part of a Business Support\n      System\
    \ (BSS) (e.g., Billing, Market Analysis, Fraud detection,\n      etc.), or a mediation\
    \ system.  There could be more than one CRANE\n      server connected to one CRANE\
    \ client to improve robustness of the\n      usage information export system.\n\
    \   CRANE Session\n      A CRANE Session is a logical connection between a CRANE\
    \ client and\n      one or multiple CRANE servers for the purpose of delivering\n\
    \      accounting data.  Multiple sessions MAY be maintained concurrently\n  \
    \    in a CRANE client or a CRANE server; they are distinguished by\n      Session\
    \ IDs.\n   Server Priority\n      A CRANE server is assigned with a Priority value.\
    \  Accounting data\n      is always delivered to the perceived operating CRANE\
    \ server (from\n      the CRANE client point of view) with the highest Priority\
    \ value\n      (the primary server) within a CRANE Session.\n   Message\n    \
    \  A Message is encoded according to rules specified by the CRANE\n      protocol\
    \ and transmitted across the interface between a CRANE\n      client and a CRANE\
    \ server.  It contains a common CRANE header and\n      optionally control or\
    \ user data payload.\n   Data Record\n      A Data Record is a collection of information\
    \ gathered by the\n      Network Element for various purposes, e.g., accounting.\
    \  The\n      structure of a Data Record is defined by a Template.\n   Template\n\
    \      A Template defines the structure of any types of Data Record, and\n   \
    \   specifies the data type, meaning, and location of the fields in\n      the\
    \ record.\n   Data Sequence Number (DSN)\n      An accounting Data Record level\
    \ sequence number, which is attached\n      to all data messages to facilitate\
    \ reliable and in-sequence\n      delivery.\n"
- title: 2  Protocol Overview
  contents:
  - "2  Protocol Overview\n   The CRANE protocol is designed to deliver accounting\
    \ data reliably,\n   efficiently, and quickly.  Due to the nature of accounting\
    \ data,\n   large records often need to be transmitted; thus supporting\n   fragmentation\
    \ of large records is required.  Furthermore, the value\n   associated with accounting\
    \ data is high; to prevent data loss, quick\n   detection of unresponsive CRANE\
    \ servers is also required for added\n   robustness.\n   The CRANE protocol can\
    \ be viewed as an application that uses the data\n   transport service provided\
    \ by lower layer protocols.  It relies on a\n   transport layer protocol to deliver\
    \ reliable, in-sequence data\n   packets.\n   UDP is a simple connectionless transport\
    \ layer protocol that has\n   advantages of being fast and agile, but it provides\
    \ no reliability\n   and lacks flow control mechanisms.  Hence, The CRANE protocol\
    \ must\n   not use UDP as the transport layer protocol to avoid the risk of\n\
    \   adversely impacting the networks it is being run over.\n   TCP and SCTP [4]\
    \ are two transport layer protocols that fulfill the\n   reliability requirement\
    \ of CRANE.  Either one of them MAY be used to\n   transport CRANE messages. \
    \ TCP meets some of the requirements, but\n   not all (e.g., quick detection of\
    \ server failure, the fact that TCP\n   is stream oriented and not record oriented).\
    \  Therefore, SCTP [4] is\n   the preferred way to transmit CRANE messages.\n"
- title: 2.1 CRANE Architecture
  contents:
  - "2.1 CRANE Architecture\n   The CRANE protocol is an application running over\
    \ a reliable\n   transport layer protocol.  The transport layer protocol is\n\
    \   responsible for delivering CRANE messages between CRANE clients and\n   CRANE\
    \ servers.  It MUST support the following capabilities:\n   1. Reliable, in-sequence\
    \ message delivery.\n   2. Connection oriented.\n   3. Delivery of messages with\
    \ a length of up to 2^32 octets (i.e., the\n      transport layer has to support\
    \ fragmentation of messages when\n      running over IP).\n   The transport layer\
    \ MAY support:\n   1. Authentication.\n   2. Bundling of multiple messages into\
    \ a single datagram.\n   Possible transport layer protocols MAY be TCP or SCTP\
    \ [4].  TCP\n   supports the minimal requirements for CRANE, but lacks some desirable\n\
    \   capabilities that are available in SCTP, these include:\n   1. Session level\
    \ authentication.\n   2. Message based data delivery (as opposed to stream based).\n\
    \   3. Fast connection failure detection.\n   Reliable delivery of accounting\
    \ data is achieved through both the\n   transport layer level and the CRANE protocol\
    \ level.  The transport\n   layer acknowledgments are used to ensure quick detection\
    \ of lost data\n   packets and unresponsive servers, while the CRANE protocol\n\
    \   acknowledges CRANE messages after they have been processed and the\n   accounting\
    \ information has been placed in persistent storage.\n   Being a reliable protocol\
    \ for delivering accounting data, traffic\n   flowing from a CRANE client to a\
    \ CRANE server is mostly accounting\n   data.  There are also bi-directional control\
    \ message exchanges,\n   though they only comprise of small portion of the traffic.\n\
    \   The following diagram illustrates the CRANE protocol architecture:\n     \
    \  +----------------+             +----------------+\n       |    CRANE      \
    \ |             |     CRANE      |+\n       |    User        |             | \
    \    User       ||+\n       +----------------+             +----------------+||\n\
    \       |    CRANE       | ==========> |     CRANE      |+|\n       |    Client\
    \      | <---------- |     Server     ||+\n       +----------------+         \
    \    +----------------+||\n       |  Transport     |             |   Transport\
    \    |+|\n       |    Layer       | <---------> |     Layer      ||+\n       +----------------+\
    \             +----------------+||\n       |    Lower       |             |  \
    \   Lower      |+|\n       |    Layers      | <---------> |     Layers     ||+\n\
    \       +----------------+             +----------------+||\n                \
    \                       +----------------+|\n                                \
    \        +----------------+\n"
- title: 2.2 CRANE over TCP
  contents:
  - "2.2 CRANE over TCP\n   TCP can be used as a transport layer for the CRANE protocol.\
    \  CRANE\n   running over TCP MUST conform to the following rules:\n   1. The\
    \ CRANE client MUST accept TCP connections over a specific TCP\n      port.\n\
    \   2. The CRANE server MUST connect to the CRANE client, and SHOULD be\n    \
    \  responsible for reestablishing a connection in case of a failure.\n   3. CRANE\
    \ messages are written as a stream of bytes into a TCP\n      connection, the\
    \ size of a CRANE message is specified by the\n      Message Length field in the\
    \ CRANE message header.\n"
- title: 2.3 Alternate servers
  contents:
  - "2.3 Alternate servers\n   For purposes of improved reliability and robustness,\
    \ redundant CRANE\n   server configuration MAY be employed.  The CRANE protocol\
    \ supports\n   delivering accounting data to alternate CRANE servers, which may\
    \ be\n   part of a mediation system or a BSS.\n   A CRANE session may comprise\
    \ of one or more CRANE servers.  The CRANE\n   client is responsible for configuring\
    \ network addresses of all CRANE\n   servers belonging to the session.  A Server\
    \ Priority is assigned to\n   each CRANE server.  The Server Priority reflects\
    \ the CRANE client's\n   preference regarding which CRANE server should receive\
    \ accounting\n   data.  The assignment of the Server Priority should consider\
    \ factors\n   such as geographical distance, communication cost, and CRANE server\n\
    \   loading, etc.  It is also possible for several CRANE servers to have\n   the\
    \ same priority.  In this case, the CRANE client could randomly\n   choose one\
    \ of them as the primary server to deliver accounting data.\n   Additional features\
    \ such as load balancing may be implemented in a\n   multi-server environment.\
    \  The process of configuring CRANE client is\n   carried out using the NE's configuration\
    \ system and is outside the\n   scope of this document.\n   A CRANE client MUST\
    \ deliver accounting data to its perceived\n   operating CRANE server with the\
    \ highest priority; if this CRANE\n   server is deemed unreachable, the CRANE\
    \ client MUST deliver the\n   accounting data to the next highest priority CRANE\
    \ server that is\n   perceived to be operating.  If no perceived operating CRANE\
    \ servers\n   are available, accounting data MUST be queued in the CRANE client\n\
    \   until any CRANE server is available or the client's queue space runs\n   out.\
    \  An alarm should be generated to inform the CRANE user of the\n   queue overflow\
    \ condition.\n   Accounting data delivery SHOULD revert to the higher priority\
    \ server\n   when it is perceived to be operating again.\n   The CRANE protocol\
    \ does not specify how a CRANE client should\n   redirect accounting data to other\
    \ CRANE servers, which is considered\n   an implementation issue.  But all the\
    \ supporting mechanisms are\n   provided by the protocol to work in a multiple-server\
    \ environment\n   (e.g., the template negotiation process, and configuration\n\
    \   procedures, etc.).  The transport layer (together with some other\n   means)\
    \ is responsible for monitoring server's responsiveness and\n   notifying CRANE\
    \ protocol for any failures.  The client may choose to\n   transition to an alternate\
    \ server.\n   Implementation Note:\n      The transition to an alternate CRANE\
    \ server is an implementation\n      issue and should occur under the following\
    \ conditions:\n      A) Transport layer notifies the CRANE client that the\n \
    \     corresponding port of the CRANE server is unresponsive.\n      B) Total\
    \ size of unacknowledged accounting records has exceeded a\n      threshold (configurable)\
    \ for certain duration (configurable).\n      C) A STOP message is received from\
    \ the active server.\n      D) A lower priority server is the active one and a\
    \ higher priority\n      server has recovered.\n"
- title: 2.4 Templates
  contents:
  - "2.4 Templates\n   The CRANE protocol enables efficient delivery of accounting\
    \ data.\n   This is achieved by negotiating a set of Data Templates for a CRANE\n\
    \   session before actual accounting data is delivered.   A data template\n  \
    \ defines the structure of a DATA message payload by describing the\n   data type,\
    \ meaning, and location of the fields in the payload.  By\n   agreeing on session\
    \ templates, CRANE servers understand how to\n   process DATA messages received\
    \ from a CRANE client.  As a result, a\n   CRANE client only needs to deliver\
    \ actual accounting data without\n   attaching any descriptors of the data; this\
    \ reduces the amount of\n   bytes sent over communication links.\n   A template\
    \ is an ordered list of keys.  A key is the specification of\n   a field in the\
    \ template.  It specifies an accounting item that a\n   network element MAY collect\
    \ and export.  The specification MUST\n   consist of the description and the data\
    \ type of the accounting item.\n   (e.g., 'Number of Sent Bytes'  can be a key\
    \ that is an unsigned\n   integer of 32 bit long).  A CRANE client typically defines\
    \ keys.\n   The CRANE protocol supports usage of several templates concurrently\n\
    \   (for different accounting records).  Keys contained in a template\n   could\
    \ be enabled or disabled.  An enabled key implies that the\n   outgoing data record\
    \ will contain the data item specified by the key.\n   A disabled key implies\
    \ that the outgoing record will omit the\n   specified data item.  The enabling/disabling\
    \ mechanism further\n   reduces bandwidth requirement; it could also reduce processing\
    \ in\n   network elements, as only needed data items are produced.\n   In a CRANE\
    \ session, all the CRANE servers and the CRANE client MUST\n   use the same set\
    \ of templates and associated enable/disable status.\n   The templates' configuration\
    \ and connectivity to an end application\n   MUST be the same in all servers.\
    \  The CRANE client MUST publish the\n   relevant templates to all CRANE servers\
    \ in a session through user\n   configuration, before it starts to send data according\
    \ to the\n   templates.\n   The complete set of templates residing in a CRANE\
    \ client MUST bear a\n   configuration ID that identifies the template set.  Each\
    \ data record\n   is delivered with the Template ID and the Configuration ID,\
    \ so that\n   the correct template can be referenced.  A server, when receiving\
    \ a\n   record with an older Configuration ID, MAY handle the record\n   gracefully\
    \ by keeping some template history.  The transport layer\n   should ensure that\
    \ a server would not get messages with future\n   configuration IDs.\n"
- title: 2.5 Template Transmission and Negotiation
  contents:
  - "2.5 Template Transmission and Negotiation\n   As stated before, all CRANE servers\
    \ MUST use the same set of\n   templates in a CRANE session.  In case that servers\
    \ do not share the\n   same set of templates (the templates are considered different\
    \ if\n   different keys are enabled or disabled), a negotiation process\n   between\
    \ the client and the server would ultimately determine one set\n   of templates\
    \ that is accepted and used by all the CRANE servers in a\n   session.\n   After\
    \ a CRANE session is established and the server sent a START\n   message indicating\
    \ that it is ready to take part in the session, the\n   client MUST deliver the\
    \ set of templates that it intends to use by\n   sending a TMPL DATA message to\
    \ the server.  The CRANE server MUST\n   acknowledge the reception of the set\
    \ of templates.\n   Templates are negotiable between a CRANE client and CRANE\
    \ servers.  A\n   CRANE server may propose changes to the templates received from\
    \ a\n   CRANE client (e.g., enabling some keys and disabling others), or it\n\
    \   can acknowledge the templates as is.  In the case that a template or\n   a\
    \ key is not recognized by the server (e.g., they might be added to\n   the client\
    \ after the server configuration has completed), the server\n   MAY choose to\
    \ disable each unknown key or unknown templates in order\n   to avoid unnecessary\
    \ traffic.  A template is disabled when all the\n   keys are disabled.  If changes\
    \ were received from the CRANE servers,\n   the client will send the changed template\
    \ set to all connected\n   servers (using FINAL_TMPL_DATA message).  It is the\
    \ client's\n   responsibility to decide what would be the final set of templates\n\
    \   used by a session.  At this time, each CRANE server MUST accept and\n   acknowledge\
    \ the templates without changing anything (to avoid\n   deadlock and loop conditions).\
    \  Each CRANE server is given a single\n   chance to propose any changes during\
    \ the negotiation process.\n   The template negotiation process is outlined as\
    \ follows:\n   A) CRANE client sends a TMPL DATA message with a set of templates.\n\
    \   B) CRANE server either responds with the TMPL DATA ACK message with\n   changes\
    \ in the template set (process continues in step C) or responds\n   with FINAL\
    \ TMPL DATA ACK message if no changes are needed (process\n   continues in step\
    \ E).\n   C) CRANE client receives proposed changes, incorporates them if\n  \
    \ possible and then sends a FINAL TMPL DATA message containing the new\n   set\
    \ of templates to all servers (in order to deploy the change).\n   D) CRANE server\
    \ receives the FINAL TMPL DATA message containing the\n   new set of templates\
    \ and MUST send a FINAL TMPL DATA ACK message to\n   acknowledge the reception\
    \ of the templates.  No changes are allowed\n   at this stage and the templates,\
    \ which the client sent, are going to\n   be used.\n   E) CRANE client receives\
    \ a FINAL TMPL DATA ACK message from the\n   server and can assume that the server\
    \ knows which templates to use.\n   All these stages take place only when there\
    \ are multiple CRANE\n   servers with differences in the template set (e.g., not\
    \ all key\n   states are identical).  If all CRANE servers within a session share\n\
    \   the same configuration exactly, all servers will respond with FINAL\n   TMPL\
    \ DATA ACK and the ping-pong between the client and the servers\n   will end immediately.\
    \  This is the common case, but in case some\n   other CRANE servers have a different\
    \ configuration, the protocol\n   offers the way to maintain consistency among\
    \ CRANE servers.\n   Implementation Note:\n      TMPL DATA messages SHOULD be\
    \ sent only after all DATA messages\n      with the previous configuration have\
    \ been acknowledged.  This\n      ensures the server to transition properly to\
    \ the new\n      configuration.\n"
- title: 2.6 Changing Templates
  contents:
  - "2.6 Changing Templates\n   Though TMPL DATA messages allow for deploying and\
    \ publicizing\n   template, a need to configure the template set still exists.\
    \  Each of\n   the CRANE servers in a CRANE session may change the template set,\n\
    \   which is typically requested by an end-user through User Interface.\n   If\
    \ the end-users need to know what templates are available and the\n   current\
    \ template set status, they may issue the GET TMPL message.\n   The following\
    \ steps are performed in order to change the templates:\n   A) The server MUST\
    \ retrieve from CRANE client the template set that\n   requires change by issuing\
    \ GET TMPL message.  The server can issue a\n   GET TMPL even if it has not yet\
    \ issued a START message.\n   B) After received a GET TMPL message, the client\
    \ sends back a GET\n   TMPL RSP message with the requested data.\n   C) The server\
    \ makes the necessary changes to the templates and sends\n   back a START NEGOTIATION\
    \ message.  This message triggers the CRANE\n   client to inquire about changes\
    \ made by the CRANE server.\n   D) After received a START NEGOTIATE message, the\
    \ client MUST respond\n   with START NEGOTIATE ACK message followed by a TMPL\
    \ DATA message.\n   From this point on, the template negotiation process starts.\n"
- title: 2.7 Flow Control
  contents:
  - "2.7 Flow Control\n   After templates have been deployed, DATA messages start\
    \ to arrive at\n   the primary CRANE server (the operational one with the highest\n\
    \   priority within the CRANE session).  Each DATA message contains a\n   Data\
    \ Sequence Number (DSN).  The primary CRANE server MUST accept the\n   data as\
    \ long as it is in-sequence.  Out-of-sequence DATA messages\n   should be discarded.\n\
    \   The CRANE server detects the start of accounting data when it\n   receives\
    \ the first DATA message either after startup or after a\n   server transition.\
    \  The first DATA message MUST have the 'S' bit\n   ('DSN Synchronize' bit) set\
    \ by the CRANE client.  Upon reception of\n   the message with initial DSN, the\
    \ server MUST accept all in-sequence\n   DATA messages.  The DSN MUST be incremented\
    \ by 1 for each new DATA\n   message originated from the client.\n   A CRANE server\
    \ MUST acknowledge the reception and correct processing\n   of DATA messages by\
    \ sending DATA ACK messages.  The DATA ACK MUST\n   contain the DSN of the last\
    \ processed in-sequence DATA message.  If\n   the CRANE server receives an Out\
    \ Of Sequence DATA message, it MUST\n   also send a DATA ACK message.  It will\
    \ trigger an immediate\n   retransmission of unacknowledged records.\n   The CRANE\
    \ client is responsible for delivering all the records.  In\n   the case of a\
    \ redundant server configuration, there could be a\n   scenario when one server\
    \ does not receive all the records but another\n   redundant CRANE server for\
    \ the same mediation system receives the\n   rest of the records.  For example,\
    \ server #1 could receive records\n   3042-3095 and then 3123-..., with server\
    \ #2 receiving records 3096-\n   3122.  It is the sender's responsibility to deliver\
    \ all the records,\n   in-sequence, but not necessarily to the same server.\n\
    \   The billing/mediation system eventually receives all the records,\n   possibly\
    \ through more than one CRANE server.  The CRANE client MUST\n   convey all the\
    \ records it received to the billing/mediation system.\n    This MAY result in\
    \ duplicate records in the billing/mediation\n   system.  In this case, the DSN\
    \ MUST be used to remove duplicates.  To\n   aid the process of duplicate removal,\
    \ whenever a record is re-sent to\n   another server, its 'Duplicate' bit MUST\
    \ be set to suggest that this\n   record might be a duplicate.\n   Implementation\
    \ Note:\n      When the amount of unacknowledged records reaches a threshold,\
    \ a\n      timer should be started.  When the timer expires, all the\n      unacknowledged\
    \ records should be transmitted to an alternate\n      server with 'D' bit set\
    \ in the DATA message; if alternate servers\n      are not available, the records\
    \ should be retransmitted.\n      The CRANE flow control also supports redundant\
    \ server\n      configuration.  A server MUST send a START message in order to\n\
    \      move to the 'ready' state.  In the 'ready' state, the server can\n    \
    \  receive and process CRANE messages.  To leave the 'ready' state\n      and\
    \ stop the message flows from the client, the server should send\n      a STOP\
    \ message to the client.\n"
- title: 2.8 The CRANE Client Query Messages
  contents:
  - "2.8 The CRANE Client Query Messages\n   A CRANE server may query a CRANE client's\
    \ status by sending query\n   messages after it has established a session with\
    \ the client.  A CRANE\n   client that is connected to the server MUST respond\
    \ with response\n   messages.  All the Query Messages MUST be initiated by a CRANE\n\
    \   server.  The CRANE protocol defines three such Query Message pairs,\n   they\
    \ are:\n   Get Session (GET SESS)\n   Get Session Response (GET SESS RSP)\n  \
    \ Get Template (GET TMPL)\n   Get Template Response (GET TMPL RSP)\n   Status\
    \ Request (STATUS REQ)\n   Status Response (STATUS RSP)\n   All the query messages\
    \ incorporate a Request ID field for tagging\n   purposes and matching requests\
    \ and responses.  This field contains a\n   16 bit counter incremented with every\
    \ request and is set by the\n   initiator of the request.  Along with the CRANE\
    \ server's IP address\n   and port number, this constitutes a unique identifier\
    \ for a request.\n   This value MUST be copied to Request ID field in the response\
    \ message\n   in order to associate a specific response with a request.\n   The\
    \ CRANE client SHOULD collect and send out meta-data about the data\n   collected\
    \ (counters, statistics, etc.).  This is done by creating\n   status templates,\
    \ which are treated like any other template, with the\n   exception that these\
    \ templates are marked with a /'Status' bit.\n   Status templates are used with\
    \ the set of STATUS REQ and STATUS RSP\n   messages.  A server MAY issue a STATUS\
    \ REQ to a CRANE client and\n   receive a STATUS RSP message with the requested\
    \ data.\n"
- title: 2.9 CRANE Sessions
  contents:
  - "2.9 CRANE Sessions\n   A CRANE client MAY deliver accounting data to different\n\
    \   mediation/billing systems by establishing different CRANE sessions.\n   Each\
    \ session MAY consist of several CRANE servers in a redundant\n   configuration.\
    \  The session ID imbedded in all the CRANE messages\n   enables the correct association\
    \ of CRANE sessions with CRANE users.\n   All the CRANE processes (e.g., template\
    \ negotiation, configuration,\n   flow control, etc.) should be carried out in\
    \ the same way in a multi\n   session scenario.\n   Each session has its set of\
    \ templates (these may be the same\n   templates, but the keys could be enabled\
    \ or disabled differently).\n    The sessions are configured in the NE, each with\
    \ a different session\n   name with associated Session IDs.  The session ID is\
    \ carried in each\n   message to associate the message with a specific session.\n\
    \   A CRANE server MAY take part in different sessions.  When configuring\n  \
    \ a server, it needs to know the sessions in which it participates.\n   The server\
    \ can issue a GET SESS message to receive a list of relevant\n   sessions.\n"
- title: 3  CRANE Message Format
  contents:
  - "3  CRANE Message Format\n   A summary of the CRANE protocol message format is\
    \ shown below.  A\n   CRANE message consists of an 8 octet message header; it\
    \ is followed\n   by a variable length message payload that is aligned to 32 bit\n\
    \   boundary.  Some of the messages do not have the CRANE Message Payload\n  \
    \ part.  The fields are in network byte order and transmitted from left\n   to\
    \ right.\n       0                   1                   2                   3\n\
    \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Version      |Message ID(MID)|  Session ID   | Message Flags |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         Message Length                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      ~   \
    \                 CRANE Message Payload                      ~\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Version: 8 bit unsigned integer\n      The Version field indicates the supported\
    \ CRANE protocol\n      implementation.  This field MUST be set to 1 to indicate\
    \ the CRANE\n      protocol Version 1.0.  CRANE protocol Version 1.0 only supports\n\
    \      Ipv4 addressing; however, it can be used to transfer information\n    \
    \  related to Ipv6 flows.\n   Message ID (MID): 8 bit unsigned integer\n     \
    \ The Message ID field identifies the type of the message.  The\n      message\
    \ IDs defined by CRANE Version 1 are:\n      Message Name               Short\
    \ Name         Message ID\n      ---------------------      ---------------  \
    \  ------------\n      Reserved                                         0x00\n\
    \      Flow Start                  START                0x01\n      Flow Start\
    \ Acknowledge      START ACK            0x02\n      Flow Stop                \
    \   STOP                 0x03\n      Flow Stop Acknowledge       STOP ACK    \
    \         0x04\n      Connect                     CONNECT              0x05\n\
    \      Template Data               TMPL DATA            0x10\n      Template Data\
    \ Acknowledge   TMPL DATA ACK        0x11\n      Final Template Data         FINAL\
    \ TMPL DATA      0x12\n      Final Template Data Ack.    FINAL TMPL DATA ACK \
    \ 0x13\n      Get Sessions                GET SESS             0x14\n      Get\
    \ Sessions Response       GET SESS RSP         0x15\n      Get Template      \
    \          GET TMPL             0x16\n      Get Template Response       GET TMPL\
    \ RSP         0x17\n      Start Negotiation           START NEGOTIATE      0x18\n\
    \      Start Negotiation Ack.      START NEGOTIATE ACK  0x19\n      Data     \
    \                   DATA                 0x20\n      Data Acknowledge        \
    \    DATA ACK             0x21\n      Error                       ERROR      \
    \          0x23\n      Status Request              STATUS REQ           0x30\n\
    \      Status Response             STATUS RSP           0x31\n   Session ID: 8\
    \ bit unsigned char\n      The Session ID field identifies the session with which\
    \ the message\n      is associated.  The session ID is ignored in the case of\
    \ GET SESS\n      and GET SESS RSP messages.  More details about session can be\n\
    \      found in Section 2.9.\n   Message Flags: 8 bit unsigned char\n      The\
    \ Message Flags field can be used to identify options associated\n      with the\
    \ message.  For CRANE Version 1.0, all the flags are\n      reserved; unless otherwise\
    \ specified, the flags are set to zero on\n      transmit and are ignored on receipt.\n\
    \   Message Length: 32 bit unsigned integer\n      The Message Length field is\
    \ the total length of the CRANE message\n      in octet including the header.\n"
- title: 4  CRANE Messages
  contents:
  - "4  CRANE Messages\n   This section defines CRANE mandatory messages.  They MUST\
    \ be\n   supported by any CRANE protocol implementation.\n"
- title: 4.1 Flow Start (START)
  contents:
  - "4.1 Flow Start (START)\n   Description\n      The Flow Start message is sent\
    \ from a CRANE server to a CRANE\n      client to indicate that the CRANE server\
    \ is ready to receive CRANE\n      messages.\n     Message Format\n       0  \
    \                 1                   2                   3\n       0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Version      |  MID=0x01     | Session ID    | Message Flags |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Message Length                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 4.2 Flow Start Acknowledge (START ACK)
  contents:
  - "4.2 Flow Start Acknowledge (START ACK)\n   Description\n      The Flow Start\
    \ Acknowledge message is sent by a CRANE client to\n      acknowledge the reception\
    \ of a START message from a specific CRANE\n      server.  It is sent only to\
    \ that server to indicate that the\n      client considers it ready to receive\
    \ CRANE messages.\n   Message Format\n       0                   1           \
    \        2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Version      |  MID=0x02     | Session ID    | Message Flags |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Message Length                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                        Client Boot Time                       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Client\
    \ Boot Time: 32 bit unsigned integer\n      The Client Boot Time field is the\
    \ timestamp of the last client\n      startup in seconds from 1970.  This field\
    \ can be combined with the\n      DSN and the client's IP address to serve as\
    \ a system wide unique\n      record identifier.\n"
- title: 4.3 Flow Stop (STOP)
  contents:
  - "4.3 Flow Stop (STOP)\n   Description\n      The Flow Stop message is sent from\
    \ a CRANE server to a CRANE\n      client to instruct it to stop sending data\
    \ (to that server).  The\n      STOP message does not disconnect the server; it\
    \ only stops the\n      CRANE client from sending \"DATA\" messages.\n   Message\
    \ Format\n       0                   1                   2                   3\n\
    \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Version      |  MID=0x03     | Session ID    | Message Flags |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         Message Length                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 4.4 Flow Stop Acknowledge (STOP ACK)
  contents:
  - "4.4 Flow Stop Acknowledge (STOP ACK)\n   Description\n      The Flow Stop Acknowledgement\
    \ message acknowledges the STOP\n      message issued by a CRANE server.\n   Message\
    \ Format\n      0                   1                   2                   3\n\
    \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  Version      |  MID=0x04     | Session ID    | Message Flags |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                       Message Length                        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 4.5 Connect (CONNECT)
  contents:
  - "4.5 Connect (CONNECT)\n   Description\n      The CONNECT message is sent from\
    \ a CRANE server to a CRANE client\n      to identify itself.  The message MUST\
    \ be the first message sent\n      over a transport layer connection between the\
    \ server and the\n      client.\n   Message Format\n       0                 \
    \  1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Version      |  MID=0x05     | Session ID    | Message Flags |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Message Length                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         Server Address                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \          Server Port          |           Reserved            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Server Address: 32 bit unsigned integer\n      The Server Address field is\
    \ the server's IP address (IPV4).\n   Server Port: 16 bit unsigned integer\n \
    \     The Server Port field is the server's port number for the\n      transport\
    \ layer (the port number specified here doesn't\n      necessarily have to match\
    \ the port number used by the transport\n      layer)\n"
- title: 4.6 Template Data (TMPL DATA)
  contents:
  - "4.6 Template Data (TMPL DATA)\n   Description\n      A CRANE client sends the\
    \ Template Data message to a CRANE server\n      after a START or a START NEGOTIATE\
    \ message was received from the\n      server.  The message MUST contain all the\
    \ templates that are going\n      to be used for the session.  It SHOULD also\
    \ include the template\n      for the status records (See section 2.8)\n     \
    \ The receiving CRANE server MUST acknowledge the message by sending\n      either\
    \ a TMPL DATA ACK (if template changes are needed) or a FINAL\n      TMPL DATA\
    \ ACK message.  For more information, see section 2.5.\n   Message Format\n  \
    \     0                   1                   2                   3\n       0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Version      |  MID=0x10     | Session ID    | Message Flags |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Message Length                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Config ID   |  Flags      |E|       Number of Templates     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      ~   \
    \                    Template Block                          ~\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                       ...       ...                           ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                       Template Block                          ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Configuration ID (Config. ID): 8 bit unsigned char\n      The Configuration\
    \ ID field identifies the version number\n      associated with a template set.\
    \  Changes to any of the templates\n      would result in a new template version,\
    \ and the version number\n      would be incremented by one.  An implementation\
    \ SHOULD handle\n      rollovers of the version number.\n   Flags: 8 bit unsigned\
    \ char\n      The Flags field identifies any options associated to the message.\n\
    \      The flag defined by the CRANE Version 1 is:\n      The 'E' bit indicates\
    \ the transmission order of the \"DATA\"\n      messages.  If the field is set\
    \ to 1, data is in big endian format;\n      otherwise, little endian format is\
    \ used.\n   Number of Templates: 16 bit unsigned integer\n      The Number of\
    \ Templates field is the number of Templates (a\n      template is described by\
    \ a Template Block) specified by the\n      message.\n   Template Block\n    \
    \  The Template Block field is of variable length and aligned to 32\n      bit\
    \ boundary.  It is the specification of a template.\n   Template Block Format:\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |        Template ID            |         Number of Keys        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \      Template Flags         |T|      Description Length       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Template Block Length                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      ~   \
    \                      Description                           ~\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                          Key Block                            ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                       ...       ...                           ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                          Key Block                            ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Template ID: 16 bit unsigned integer\n      The Template ID field identifies\
    \ a specific template.\n   Number of Keys: 16 bit unsigned integer\n      The\
    \ Number of Keys field is the number of keys included in the\n      template.\n\
    \   Template Flags: 16 bit unsigned integer\n      The Template Flags field is\
    \ composed of flags that indicate\n      different attributes of the template.\
    \  In CRANE Version 1.0, only\n      the 'T' bit is defined, other bits in the\
    \ field SHOULD be set to\n      zero by the sender and ignored by the receiver.\n\
    \      The 'T' bit ('Status' bit) indicates that the template is a status\n  \
    \    template that is used by the STATUS RSP message only.  See section\n    \
    \  2.8 for more details.\n   Description Length: 16 bit unsigned integer\n   \
    \   The Description Length field is the length of the Description\n      field.\
    \  If no description is supplied, the length MUST be 0.\n   Template Block Length:\
    \ 32 bit unsigned integer\n      The Template Block Length is the length of the\
    \ template block in\n      octets.\n   Description: Variable length unsigned char\n\
    \      The Description field contains the text description of the\n      template\
    \ (e.g., \"Aggregated by interface and ToS bits\").  It is a\n      variable length\
    \ field of up to 64Kb long, and padded with 0 to the\n      next 32 bit boundary.\n\
    \   Key Block\n      A key Block contains the specification of a key within a\
    \ template.\n   Key Block Format\n       0                   1               \
    \    2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                            Key ID                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \          Key Type ID          |            Reserved           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      Key Attribute Vector                   |K|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Key\
    \ ID: 32 bit unsigned integer\n      The Key ID field identifies the key within\
    \ a template.  See\n      section 2.4 for more details.\n   Key Type ID: 16 bit\
    \ unsigned integer\n      The Key Type ID field specifies the data type of the\
    \ key.\n           The fixed length data types are defined as following:\n   \
    \            Data Type             Data Type ID\n           ---------------------\
    \    --------------\n            Boolean (1)                 0x0001\n        \
    \    Unsigned Integer8           0x0002\n            Signed Integer8         \
    \    0x0003\n            Unsigned Integer16          0x0004\n            Signed\
    \ Integer16            0x0005\n            Unsigned Integer32          0x0006\n\
    \            Signed Integer32            0x0007\n            Unsigned Integer64\
    \          0x0008\n            Signed Integer64            0x0009\n          \
    \  Float (2)                   0x000a\n            Double (2)                \
    \  0x000b\n            IP address (Ipv4)           0x0010\n            IP address\
    \ (Ipv6)           0x0011\n            Time_SEC  (3)               0x0012\n  \
    \          Time_MSEC_64(4)             0x0013\n            Time_USEC_64 (5)  \
    \          0x0014\n            Time_MSEC_32 (6)            0x0015\n          \
    \  Time_USEC_32 (7)            0x0016\n           The variable length data types\
    \ are defined as following:\n            String (8)                  0x400c\n\
    \            Null Terminated String      0x400d\n            UTF-8 String    \
    \            0x400e\n            UTF-16 String               0x400f\n        \
    \    Arbitrary Data (BLOB) (9)   0x4015\n           (1) Boolean is represented\
    \ as a single octet holding 0 for a\n           value of FALSE and 1 for a value\
    \ of TRUE.\n           (2) Float and Double are single and double precision floating\n\
    \           point numbers that comply with the IEEE-754 standard.\n          \
    \ (3) Time_SEC is a 32 bit value, most significant octet first\n           - seconds\
    \ since 00:00:00 GMT, January 1, 1970.\n           (4) Time_MSEC_64 is a 64 bit\
    \ value, most significant octet\n           first - milliseconds since 00:00:00\
    \ GMT, January 1, 1970.\n           (5) Time_USEC_64 is a 64 bit value, most significant\
    \ octet\n           first - microseconds since 00:00:00 GMT, January 1, 1970.\n\
    \           (6) Time_MSEC_32 is a 32 bit value, most significant octet\n     \
    \      first - milliseconds since 00:00:00 GMT, January 1, 1970.\n           (7)\
    \ Time_USEC_32 is a 32 bit value, most significant octet\n           first - microseconds\
    \ since 00:00:00 GMT, January 1, 1970.\n           (8) String is prefixed by a\
    \ 32 bit length field that\n           indicates the length of the string, and\
    \ followed by ASCII\n           codes of the string characters.  This representation\
    \ MUST\n           only be used for encoding data records in a \"DATA\" message.\n\
    \           (9) The arbitrary data is prefixed by a 32 bit length field\n    \
    \       and followed by the data in binary format.\n   Key Attribute Vector: 32\
    \ bit unsigned integer\n      The Key Attribute Vector field indicates different\
    \ attributes of\n      the key.  In CRANE Version 1, only the 'K' bit is defined,\
    \ other\n      bits in the field SHOULD be set to zero by the sender and ignored\n\
    \      by the receiver.\n      The 'K' bit ('Disabled bit') is set to 1 when the\
    \ key is disabled\n      in this template.\n"
- title: 4.7 Template Data Acknowledge (TMPL DATA ACK)
  contents:
  - "4.7 Template Data Acknowledge (TMPL DATA ACK)\n   Description\n      The Template\
    \ Data Acknowledge message is sent from a CRANE server\n      to a CRANE client\
    \ after a TMPL DATA message has been received.  It\n      proposes changes of\
    \ the templates and/or key status changes\n      (enable/disable) for the templates.\n\
    \      If a CRANE server wishes to acknowledge reception of TMPL DATA\n      without\
    \ changes, it MUST respond with the FINAL TMPL DATA ACK\n      message.\n   Message\
    \ Format\n       0                   1                   2                   3\n\
    \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Version      |  MID=0x11     | Session ID    | Message Flags |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         Message Length                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \    Config. ID |    Reserved   |   Number of Template Changes  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                    Template Change Block                      ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                       ...       ...                           ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                    Template Change Block                      ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Configuration ID (Config. ID): 8 bit unsigned char\n      See Section 4.6.\
    \  The value MUST be identical to the Config.  ID\n      field of the acknowledged\
    \ TMPL DATA message.\n   Number of Template Changes: 16 bit unsigned integer\n\
    \      The Number of Template Changes field is the number of changed\n      Templates\
    \ (a changed template is described by a Template Change\n      Block) specified\
    \ by the message.\n   Template Change Block\n       0                   1    \
    \               2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |        Template ID            |        Number of Keys         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      ~   \
    \                       Key Block                            ~\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                       ...       ...                           ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                          Key Block                            ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Template ID: 16 bit unsigned integer\n      See Section 4.6.\n   Number of\
    \ Keys: 16 bit unsigned integer\n      See Section 4.6.\n   Key Block\n      See\
    \ Section 4.6, only relevant keys are described.\n"
- title: 4.8 Final Template Data (FINAL TMPL DATA)
  contents:
  - "4.8 Final Template Data (FINAL TMPL DATA)\n      Description\n      The Final\
    \ Template Data message is sent by a CRANE client to all\n      the CRANE servers\
    \ in a session, to convey the finalize templates.\n      It is similar to the\
    \ TMPL DATA message, with the only difference\n      that a server must accept\
    \ the templates in this message.\n   Message Format\n      Identical to the TMPL\
    \ DATA (see section 4.6)\n   Message ID (MID)\n      0x12      Final Template\
    \ Data\n"
- title: 4.9 Final Template Data Acknowledge (FINAL TMPL DATA ACK)
  contents:
  - "4.9 Final Template Data Acknowledge (FINAL TMPL DATA ACK)\n   Description\n \
    \     The CRANE server acknowledges reception of the TMPL DATA or FINAL\n    \
    \  TMPL DATA by sending a Final Template Data Acknowledge message.\n      It does\
    \ not carry any changes to the templates.  Unlike TMPL DATA\n      ACK messages,\
    \ a FINAL TMPL DATA ACK message indicates the\n      acceptance of the templates\
    \ for the session.  A server MAY respond\n      with this message to a TMPL DATA\
    \ (if it does not want any changes\n      in the templates).  A server MUST respond\
    \ with this message to a\n      FINAL TMPL DATA.\n   Message Format\n       0\
    \                   1                   2                   3\n       0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Version      |  MID=0x13     | Session ID    | Message Flags |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Message Length                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Config. ID  |                     Reserved                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Configuration\
    \ ID: 8 bit unsigned char\n      See Section 4.6.  This field MUST copy the configuration\
    \ ID from\n      the acknowledged message.\n"
- title: 4.10    Get Sessions (GET SESS)
  contents:
  - "4.10    Get Sessions (GET SESS)\n   Description\n      The Get Sessions message\
    \ is sent by a CRANE server to a CRANE\n      client to query what are the sessions\
    \ it should participate.  This\n      is typically done just before a UI configuration\
    \ of the CRANE\n      client's templates.  As each session has its own set of\
    \ templates,\n      there is a need to know the server's participation of all\
    \ the\n      sessions.\n      The Session ID field in the CRANE message header\
    \ MUST be ignored\n      by the receiver.\n   Message Format\n       0       \
    \            1                   2                   3\n       0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Version      |  MID=0x14     | Session ID    | Message Flags |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Message Length                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           Request ID          |        Reserved               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Request\
    \ ID: 16 bit unsigned integer\n      The Request ID field identifies the specific\
    \ request issued by the\n      server.  The same Request ID MUST be placed in\
    \ the responding\n      message in order to associate it with the request.\n"
- title: 4.11    Get Sessions Response (GET SESS RSP)
  contents:
  - "4.11    Get Sessions Response (GET SESS RSP)\n   Description\n      The Get Sessions\
    \ Response message is sent by a CRANE client to a\n      CRANE server as a reply\
    \ to a GET SESS request.  The message MUST\n      contain all the information\
    \ related to any session with which the\n      requesting server is associated.\n\
    \      The Session ID field in the common message header MUST be ignored\n   \
    \   by the receiver.\n   Message Format\n       0                   1        \
    \           2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Version      |  MID=0x15     | Session ID    | Message Flags |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Message Length                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           Request ID          |       Number of Sessions      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \    Vendor String Length       |           Reserved            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \      |                                                               |\n   \
    \   ~                       Vendor String                           ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                         Session Block                         ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                       ...       ...                           ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                         Session Block                         ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Request ID: 16 bit unsigned integer\n      See Section 4.10.\n   Number of\
    \ Sessions: 16 bit unsigned integer\n      The Number of Sessions field is the\
    \ number of session blocks in\n      the message.\n   Vendor String Length: 16\
    \ bit unsigned integer\n      The Vendor String Length field is the length of\
    \ Vendor String\n      field in octet.  The field limits vendor strings to 64Kb\
    \ long.  If\n      no such string is supplied, the length MUST be set to 0.\n\
    \   Vendor String: Variable length unsigned char\n      The Vendor String field\
    \ is a variable length field.  It identifies\n      the vendor that created the\
    \ session.  It MUST be padded with 0 to\n      the next 32 bit boundary.  The\
    \ information differentiates similar\n      templates from different vendors.\
    \  The actual format of the\n      information is application specific and outside\
    \ the scope of this\n      document.\n   Session Block\n       0             \
    \      1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Session ID    |   Reserved    |      Session Name Length      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Session Description Length   |             Reserved          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                          Session Name                         ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                       Session Description                     ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Session ID: 8 bit unsigned char\n      See Section 3.\n   Session Name Length:\
    \ 16 bit unsigned integer\n      The Session Name Length field is the length of\
    \ the Session Name\n      field.  The field limits the session name strings to\
    \ 64 Kb long.\n      As a name is mandatory to differentiate between sessions,\
    \ this\n      field MUST NOT be 0.\n   Session Description Length: 16 bit unsigned\
    \ integer\n      The Session Description Length field is the length of a session\n\
    \      description.  The field limits the session description to 64Kb\n      long.\
    \  If no such Description is supplied, the length MUST be set\n      to 0.\n \
    \  Session Name: Variable length unsigned char\n      The Session Name field is\
    \ the name for a session, which MAY be\n      displayed to end-users.  It MUST\
    \ be padded with 0 to the next 32\n      bit boundary.  Session Name MUST be unique\
    \ within a CRANE client.\n      This field is mandatory and MUST be a part of\
    \ any Session Block.\n   Session Description: Variable length unsigned char\n\
    \      The Session Description field is the text description of a\n      session;\
    \ it could be displayed to end-users.  It MUST be padded\n      with 0 to the\
    \ next 32 bit boundary.\n"
- title: 4.12    Get Templates (GET TMPL)
  contents:
  - "4.12    Get Templates (GET TMPL)\n   Description\n      The Get Templates message\
    \ is sent by a CRANE server to a CRANE\n      client to query templates in a session.\n\
    \   Message Format\n       0                   1                   2         \
    \          3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Version      |  MID=0x16     | Session ID    | Message Flags |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Message Length                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           Request ID          |            Reserved           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Request\
    \ ID: 16 bit unsigned integer\n      See Section 4.10.\n"
- title: 4.13    Get Templates Response (GET TMPL RSP)
  contents:
  - "4.13    Get Templates Response (GET TMPL RSP)\n   Description\n      The Get\
    \ Templates Response message is sent by a CRANE client to a\n      CRANE server\
    \ as a response to a GET TMPL message.  The message\n      SHOULD contain all\
    \ templates available for the specific session.\n   Message Format\n       0 \
    \                  1                   2                   3\n       0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Version      |  MID=0x17     | Session ID    | Message Flags |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Message Length                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           Request ID          |       Number of Templates     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      ~   \
    \                    Template Block                          ~\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                       ...       ...                           ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                       Template Block                          ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Request ID: 16 bit unsigned integer\n      See Section 4.10.\n   Number of\
    \ Templates: 16 bit unsigned integer\n      See Section 4.6.\n   Template Block\n\
    \      Same as the template block defined in the TMPL DATA message (see\n    \
    \  Section 4.6).  However, Extended Key Blocks MUST be used instead\n      of\
    \ Key Blocks.  Extended key Block field provides extensive\n      informational\
    \ data that MAY be displayed to end-users.\n   Extended Key Block\n      The Extended\
    \ Key Block field provides comprehensive information\n      about a key.\n   Extended\
    \ Key Block Format:\n       0                   1                   2        \
    \           3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                            Key ID                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \          Key Type ID          |        Key Name Length        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Key Label Length     |        Key Help Length        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      ~   \
    \                         Key Name                           ~\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                            Key Label                          ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                            Key Help                           ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      Key Attribute Vector                   |K|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Key\
    \ ID: 32 bit unsigned integer\n      Same as section 4.6.\n   Key Type ID: 16\
    \ bit unsigned integer\n      Same as section 4.6.\n   Key Name Length: 16 bit\
    \ unsigned integer\n      The Key Name Length field is the length of the Key Name\
    \ field.\n      The field limits Key Name strings to 64 Kb long.  As a name is\n\
    \      mandatory to a key, this field MUST NOT be 0.\n   Key Label Length: 16\
    \ bit unsigned integer\n      The Key Label Length field is the length of the\
    \ Key Label field.\n      The field limits Key Label strings to 64 Kb long.  Length\
    \ of 0\n      means that the Label field is to be skipped.\n   Key Help Length:\
    \ 16 bit unsigned integer\n      The Key Help Length field is the length of the\
    \ Key Help field.\n      The field limits Key Help strings to 64 Kb long.  Length\
    \ of 0\n      means that the Help field is to be skipped.\n   Key Name: Variable\
    \ length unsigned char\n      The Key Name field is the name for the key, which\
    \ could be\n      displayed to end users.  It MUST be padded with 0 to the next\
    \ 32\n      bit boundary.  Key Name MUST be unique (within the template) and\n\
    \      case sensitive.  This field is mandatory and MUST be a part of any\n  \
    \    Extended Key Block.\n   Key Label: Variable length unsigned char\n      The\
    \ Key Label field is a descriptive label, which could be\n      displayed to end\
    \ users concerning this key.  It MUST be padded\n      with 0 to the next 32 bit\
    \ boundary.  This field SHOULD be a part\n      of any Extended Key Block.\n \
    \  Key Help: Variable length unsigned char\n      The Key Help field is any Help\
    \ string that could be displayed to\n      end users concerning this key.  It\
    \ MUST be padded with 0 to the\n      next 32 bit boundary.  This field MAY be\
    \ a part of any Extended\n      Key Block.\n   Key Attribute Vector: 32 bit unsigned\
    \ integer\n      Same as section 4.6.\n"
- title: 4.14    Start Negotiation (START NEGOTIATE)
  contents:
  - "4.14    Start Negotiation (START NEGOTIATE)\n   Description\n      The Start\
    \ Negotiation message is sent by a CRANE server after the\n      configuration\
    \ process has completed.  The message should initiate\n      template negotiation\
    \ by the client with all CRANE servers in a\n      session.  The CRANE server\
    \ MAY re-send this message up to 3 times\n      with repeat interval of 5 seconds\
    \ unless it is acknowledged by the\n      CRANE client.  Otherwise, the CRANE\
    \ user will be informed.  The\n      client should send TMPL DATA message to the\
    \ servers after\n      acknowledged the message.\n   Message Format\n       0\
    \                   1                   2                   3\n       0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Version      |  MID=0x18     | Session ID    | Message Flags |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Message Length                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 4.15    Start Negotiation Acknowledge (START NEGOTIATE ACK)
  contents:
  - "4.15    Start Negotiation Acknowledge (START NEGOTIATE ACK)\n   Description\n\
    \      The Start Negotiation Acknowledge message MUST be sent by a CRANE\n   \
    \   client to the server to acknowledge the reception of the START\n      NEGOTIATE\
    \ message.\n   Message Format\n       0                   1                  \
    \ 2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Version      |  MID=0x19     | Session ID    | Message Flags |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Message Length                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 4.16    Data (DATA)
  contents:
  - "4.16    Data (DATA)\n   Description\n      The DATA message carries actual data\
    \ records from a CRANE client\n      to a CRANE server.  A data record is a structured\
    \ collection of\n      fields that matches a specific template.\n   Message Format\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Version      |  MID=0x20     | Session ID    | Message Flags |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Message Length                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |        Template ID            |    Config. ID |  Flags    |D|S|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                   Data Sequence Number (DSN)                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                          Record Data                          ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Template ID: 16 bit unsigned integer\n      See Section 4.6.\n     Configuration\
    \ ID: 8 bit unsigned char\n      See Section 4.6.  The Config. ID field can prevent\
    \ out-of-the-blue\n      messages with outdated templates arriving and erroneously\n\
    \      processed.  A server MAY keep a short history of templates in\n      order\
    \ to cope with this scenario.\n   Flags: 8 bit unsigned char\n      The Flags\
    \ field is composed of flag bits that indicate processing\n      requirements\
    \ of the data records.  The CRANE Version 1 defined two\n      flags for these\
    \ purposes.  Unless otherwise specified, the other\n      flags are set to zero\
    \ on transmit and are ignored on receipt.\n   The following flags are defined\
    \ in CRANE Version 1:\n      The 'D' bit ('Duplicate' bit): It is set for records\
    \ that are\n      re-sent to an alternate server after a server transition occurs.\n\
    \      When the same records are sent to different servers, there is a\n     \
    \ possibility that duplicated data exists.  The Status of the 'D'\n      bit will\
    \ help the billing/mediation system to perform\n      de-duplication if desired.\n\
    \      The 'S' bit ('DSN Synchronize' bit): When set, it indicates that\n    \
    \  the record is the first one received by the server after starting\n      (or\
    \ restarting) of data transmission to this server.  The server\n      MUST set\
    \ the initial DSN to the DSN specified in the record.  The\n      flag is set\
    \ to zero by default.\n   Data Sequence Number: 32 bit unsigned integer\n    \
    \  The Data Sequence Number field is the record sequence number used\n      for\
    \ preserving data orders and detecting data losses.  The DSN\n      MUST be incremented\
    \ by one for each new record transmitted.  The\n      selection of the initial\
    \ DSN number is implementation specific.\n   Record Data: Variable Length unsigned\
    \ octets\n      The Record Data field carries the actual accounting/billing data\n\
    \      that is structured according to the template identified by the\n      Template\
    \ ID field.\n"
- title: 4.17    Data Acknowledge (DATA ACK)
  contents:
  - "4.17    Data Acknowledge (DATA ACK)\n   Description\n      The Data Acknowledgement\
    \ message is sent from a CRANE server to\n      acknowledge receipt of records.\
    \  It acknowledges the maximal in-\n      sequence DSN received.\n   Message Format\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Version      |  MID=0x21     | Session ID    | Message Flags |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Message Length                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      Data Sequence Number                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \   Config. ID  |                  Reserved                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Data Sequence Number: 32 bit unsigned integer\n      See Section 4.16.  It\
    \ MUST be DSN of the last in-sequence record\n      that was received by the server.\n\
    \   Configuration ID: 8 bit unsigned char\n      See Section 4.16.\n"
- title: 4.18    Error (ERROR)
  contents:
  - "4.18    Error (ERROR)\n   Description\n      The Error message MAY be issued\
    \ by either a CRANE server or\n      client.  It indicates an error condition\
    \ that was detected by the\n      sender.\n   Message Format\n       0       \
    \            1                   2                   3\n       0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Version      |  MID=0x23     | Session ID    | Message Flags |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Message Length                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           Timestamp                           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \         Error Code            |      Description Length       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                          Description                          ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Timestamp: 32 bit unsigned integer\n      The Timestamp field is a timestamp\
    \ in seconds since 00:00:00 GMT,\n      January 1, 1970.\n   Error Code: 16 bit\
    \ unsigned integer\n      The Error Code field is a code assigned to an error\
    \ condition.\n   The following error codes are defined in CRANE Version 1:\n \
    \         Error Condition                   Error Code\n         ----------- \
    \                   --------------\n          Unknown                        \
    \   0\n   Description Length: 16 bit unsigned integer\n      The Description Length\
    \ field is the length of the Description\n      field.  The field limits Description\
    \ strings to 64 Kb long.\n      Length of 0 means that the Description field is\
    \ to be skipped.\n   Description: Variable Length unsigned char\n      The Description\
    \ field is a text description that allows the sender\n      to provide more detailed\
    \ information about the error condition.\n      It MUST be padded with 0 to the\
    \ next 32 bit boundary.\n"
- title: 4.19    Status Request (STATUS REQ)
  contents:
  - "4.19    Status Request (STATUS REQ)\n   Description\n      CRANE servers MAY\
    \ inquire general operation status of a client by\n      sending the Status Request\
    \ message.  The status information SHOULD\n      include a collection of states,\
    \ counters, accumulators of the data\n      collection functions that reside with\
    \ the client.  The status MAY\n      include more information about the CRANE\
    \ client itself.\n      The status reporting mechanism relies on the status template\
    \ of a\n      session.  It is determined similarly as other templates.  Without\n\
    \      a determined status template, no status information can be\n      delivered.\n\
    \   Message Format\n       0                   1                   2         \
    \          3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Version      |  MID=0x30     | Session ID    | Message Flags |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Message Length                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 4.20    Status Response (STATUS RSP)
  contents:
  - "4.20    Status Response (STATUS RSP)\n   Description\n      The Status Response\
    \ message contains a status report that MUST be\n      compatible with the status\
    \ template of the session.  It is\n      client's response to a STATUS REQ message\
    \ from a server.\n   Message Format\n       0                   1            \
    \       2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Version      |  MID=0x31     | Session ID    | Message Flags |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Message Length                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |        Template ID            |  Reserved     |Config. ID     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Record Length                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                         Record Data                           ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     Template ID: 16 bit unsigned integer\n      See Section 4.6.\n   Configuration\
    \ ID: 8 bit unsigned integer\n      See Section 4.6.  The version is needed here\
    \ to prevent\n      out-of-the-blue messages with outdated templates arriving\
    \ and\n      erroneously processed.  A server MAY keep a short history of\n  \
    \    templates in order to cope with this scenario.\n   Record Length: 32 bit\
    \ unsigned integer\n      The Record Length field is the length of the Record\
    \ Data field in\n      octets.\n   Record Data: Variable Length unsigned octets\n\
    \      The Record Data field contains the status data that complies with\n   \
    \   the status template.  For more details see section 2.4\n"
- title: 5  Protocol Version Negotiation
  contents:
  - "5  Protocol Version Negotiation\n   Since the CRANE protocol may evolve in the\
    \ future and it may run over\n   different transport layers, a transport neutral\
    \ version negotiation\n   mechanism running over UDP is defined.  A CRANE server\
    \ MAY inquire a\n   CRANE client about the CRANE protocol version and transport\
    \ layer\n   support by sending a UDP packet on an agreed UDP port.  The client\n\
    \   MUST respond to this request with a UDP packet carrying the protocol\n   version,\
    \ the transport type and the port number used for the specific\n   transport.\
    \  The Protocol Version Negotiation is optional for CRANE\n   Version 1.\n   The\
    \ CRANE server sends the following message to query the client's\n   protocol\
    \ support.\n   Message Format\n       0                   1                  \
    \ 2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         Server Address                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        Server Boot Time                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     'C'       |    'R'        |    'A'        |    'N'        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Server\
    \ Address:\n      The Server Address field is the IP address (Ipv4) of the CRANE\n\
    \      server.\n   Server Boot Time\n      The Server Boot Time field is the timestamp\
    \ of the last server\n      startup in seconds from 1970.\n   'C', 'R', 'A', 'N':\n\
    \      The 'C', 'R', 'A', 'N' fields are ASCII encoded characters to\n      identify\
    \ the CRANE server.\n   The client's reply to a version negotiation request MUST\
    \ comply with\n   the following structure:\n   Message Format\n       0      \
    \             1                   2                   3\n       0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      Default Protocol Info                    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                    Additional Protocols Count                 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    Additional Protocols Info                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \              ...   Additional Protocols Info  ...             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    Additional Protocols Info                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Default\
    \ Protocol Info:\n      The Default Protocol Info field contains information of\
    \ the\n      default protocol supported by the client.  The field is structured\n\
    \      as a Protocol Info Block described below.\n   Additional Protocols Count:\
    \ 32 bit unsigned integer\n      The Additional Protocols Count field specifies\
    \ the number of\n      additional protocols supported by the client.  In the case\
    \ that\n      only the default protocol is supported, the field MUST be set to\n\
    \      0.\n   Additional Protocols Info:\n      The Additional Protocol Info field\
    \ is an array of Protocol Info\n      Blocks (described below) contain information\
    \ about additional\n      protocols supported by the client.\n   Protocol Info\
    \ Block\n       0                   1                   2                   3\n\
    \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Transport Type                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                        Protocol Version                       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \         Port Number           |            Reserved           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Transport Type: 32 bit unsigned integer\n      1 - TCP, 2 - SCTP\n   Protocol\
    \ Version: 32 bit unsigned integer\n      Version number of the CRANE protocol\
    \ supported over the specific\n      transport layer, the current version is 1.\n\
    \   Port Number: 16 bit unsigned integer\n      Port number (either SCTP or TCP\
    \ port) used for the protocol\n"
- title: 6  Security Considerations
  contents:
  - "6  Security Considerations\n   The CRANE protocol can be viewed as an application\
    \ running over a\n   reliable transport layer, such as TCP and SCTP.  The CRANE\
    \ protocol\n   is end-to-end in the sense that the CRANE messages are communicated\n\
    \   between clients and servers identified by the host address and the\n   transport\
    \ protocol port number.  Before any CRANE sessions can be\n   initiated, a set\
    \ of CRANE servers' addresses should be provisioned on\n   a CRANE client.  Similarly,\
    \ a CRANE server maintains a list of CRANE\n   clients' address with which it\
    \ communicates.  The provisioning is\n   typically carried out securely using\
    \ a network management system; in\n   this way, the CRANE end-points can be authenticated\
    \ and authorized.\n   As this scheme is static, without additional security protections\
    \ the\n   CRANE protocol is vulnerable to attacks such as address spoofing.\n\
    \   The CRANE protocol itself does not offer strong security facilities;\n   therefore,\
    \ it cannot ensure confidentiality and integrity of CRANE\n   messages.  It is\
    \ strongly recommended that users of the CRANE\n   protocol evaluate their deployment\
    \ configurations and implement\n   appropriate security policies.  For example,\
    \ if the CRANE protocol is\n   deployed over a local area network or a dedicated\
    \ connection that\n   ensure security, no additional security services or procedures\
    \ may be\n   required; however, if CRANE clients and servers are connected through\n\
    \   the Internet, lower layer security services should be invoked.\n   To achieve\
    \ a strong security protection of communications between\n   CRANE clients and\
    \ servers, lower layer security services are strongly\n   recommended.  The lower\
    \ layer security services are transparent to\n   the CRANE protocols.  Security\
    \ mechanisms may be provided at the IP\n   layer using IPSEC [6], or it may be\
    \ implemented for transport layer\n   using TLS [7].  The provisioning of the\
    \ lower layer security services\n   is out of the scope of this document.\n"
- title: 7  References
  contents:
  - "7  References\n   [1]   Rigney, C., Willens, S., Rubens, A. and W. Simpson, \"\
    Remote\n         Authentication Dial In User Service (RADIUS)\", RFC 2865, June\n\
    \         2000.\n   [2]   Calhoun, P., \"DIAMETER Base Protocol\", Work in Progress.\n\
    \   [3]   Calhoun, P., et. al., \"DIAMETER Framework Document\", Work in\n   \
    \      Progress.\n   [4]   Stewart, R., Xie, Q., Morneault, K., Sharp, C., Schwarzbauer,\n\
    \         H., Taylor, T., Rytina, I., Kalla, M., Zhang, L. and V. Paxson,\n  \
    \       \"Simple Control Transmission Protocol\", RFC 2960, October 2000.\n  \
    \ [5]   Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n   \
    \      Levels\", BCP 14, RFC 2119, March 1997.\n   [6]   Kent, S. and R. Atkinson,\
    \  \"Security Architecture for the\n         Internet Protocol\", RFC 2401, November\
    \ 1998.\n   [7]   Dierks,  T. and C. Allen, \"The TLS Protocol, Version 1.0\"\
    , RFC\n         2246, January 1999.\n"
- title: 8  Acknowledgments
  contents:
  - "8  Acknowledgments\n   Special thanks are due to Tal Givoly, Limor Schweitzer\
    \ for conceiving\n   the work, and Nir Pedhatzur, Batya Ferder, and Peter Ludemann\
    \ from\n   XACCT Technologies for accomplishing the first CRANE protocol\n   implementation.\n\
    \   Thanks are also due to Nevil Brownlee for his valuable comments on\n   the\
    \ work, as well as the IETF IPFIX WG.\n"
- title: 9  Authors' Addresses
  contents:
  - "9  Authors' Addresses\n   Kevin Zhang\n   10124 Treble Court\n   Rockville, MD\
    \ 20850\n   U.S.A.\n   Phone +1 301 315 0033\n   EMail: kevinzhang@ieee.org\n\
    \   Eitan Elkin\n   XACCT Technologies, Ltd.\n   www.xacct.com\n   12 Hachilazon\
    \ St.\n   Ramat-Gan, Israel 52522\n   Phone +1 972 3 576 4111\n   EMail: eitan@xacct.com\n"
- title: 10  Full Copyright Statement
  contents:
  - "10  Full Copyright Statement\n   Copyright (C) The Internet Society (2002). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
