- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                         R. Browne
  contents:
  - "Independent Submission                                         R. Browne\n  \
    \              Key Performance Indicator (KPI) Stamping\n                  for\
    \ the Network Service Header (NSH)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes methods of carrying Key Performance\n  \
    \ Indicators (KPIs) using the Network Service Header (NSH).  These\n   methods\
    \ may be used, for example, to monitor latency and QoS marking\n   to identify\
    \ problems on some links or service functions.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not candidates for any level of Internet\
    \ Standard;\n   see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8592.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Terminology .....................................................3\n  \
    \    2.1. Requirements Language ......................................3\n    \
    \  2.2. Definition of Terms ........................................3\n      \
    \     2.2.1. Terms Defined in This Document ......................4\n      2.3.\
    \ Abbreviations ..............................................5\n   3. NSH KPI\
    \ Stamping: An Overview ...................................6\n      3.1. Prerequisites\
    \ ..............................................7\n      3.2. Operation ..................................................9\n\
    \           3.2.1. Flow Selection ......................................9\n  \
    \         3.2.2. SCP Interface ......................................10\n    \
    \  3.3. Performance Considerations ................................11\n   4. NSH\
    \ KPI-Stamping Encapsulation .................................12\n      4.1. KPI-Stamping\
    \ Extended Encapsulation .......................13\n           4.1.1. NSH Timestamping\
    \ Encapsulation (Extended Mode) .....15\n           4.1.2. NSH QoS-Stamping Encapsulation\
    \ (Extended Mode) .....17\n      4.2. KPI-Stamping Encapsulation (Detection Mode)\
    \ ...............20\n   5. Hybrid Models ..................................................22\n\
    \      5.1. Targeted VNF Stamping .....................................23\n  \
    \ 6. Fragmentation Considerations ...................................23\n   7.\
    \ Security Considerations ........................................24\n   8. IANA\
    \ Considerations ............................................24\n   9. References\
    \ .....................................................25\n      9.1. Normative\
    \ References ......................................25\n      9.2. Informative\
    \ References ....................................25\n   Acknowledgments ...................................................27\n\
    \   Contributors ......................................................27\n  \
    \ Authors' Addresses ................................................27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Network Service Header (NSH), as defined by [RFC8300],\
    \ specifies\n   a method for steering traffic among an ordered set of Service\n\
    \   Functions (SFs) using an extensible service header.  This allows for\n   flexibility\
    \ and programmability in the forwarding plane to invoke the\n   appropriate SFs\
    \ for specific flows.\n   The NSH promises a compelling vista of operational flexibility.\n\
    \   However, many service providers are concerned about service and\n   configuration\
    \ visibility.  This concern increases when considering\n   that many service providers\
    \ wish to run their networks seamlessly in\n   \"hybrid mode\", whereby they wish\
    \ to mix physical and virtual SFs and\n   run services seamlessly between the\
    \ two domains.\n   This document describes generic methods to monitor and debug\
    \ Service\n   Function Chains (SFCs) in terms of latency and QoS marking of the\n\
    \   flows within an SFC.  These are referred to as \"detection mode\" and\n  \
    \ \"extended mode\" and are explained in Section 4.\n   The methods described\
    \ in this document are compliant with hybrid\n   architectures in which Virtual\
    \ Network Functions (VNFs) and Physical\n   Network Functions (PNFs) are freely\
    \ mixed in the SFC.  These methods\n   also provide flexibility for monitoring\
    \ the performance and\n   configuration of an entire chain or parts thereof as\
    \ desired.  These\n   methods are extensible to monitoring other Key Performance\
    \ Indicators\n   (KPIs).  Please refer to [RFC7665] for an architectural context\
    \ for\n   this document.\n   The methods described in this document are not Operations,\n\
    \   Administration, and Maintenance (OAM) protocols such as [Y.1731].  As\n  \
    \ such, they do not define new OAM packet types or operations.  Rather,\n   they\
    \ monitor the SFC's performance and configuration for subscriber\n   payloads\
    \ and indicate subscriber QoE rather than out-of-band\n   infrastructure metrics.\
    \  This document differs from [In-Situ-OAM] in\n   the sense that it is specifically\
    \ tied to NSH operations and is not\n   generic in nature.\n"
- title: 2.  Terminology
  contents:
  - '2.  Terminology

    '
- title: 2.1.  Requirements Language
  contents:
  - "2.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 2.2.  Definition of Terms
  contents:
  - "2.2.  Definition of Terms\n   This section presents the main terms used in this\
    \ document.  This\n   document also makes use of the terms defined in [RFC7665]\
    \ and\n   [RFC8300].\n"
- title: 2.2.1.  Terms Defined in This Document
  contents:
  - "2.2.1.  Terms Defined in This Document\n   First Stamping Node (FSN):  The first\
    \ node along an SFC that stamps\n      packets using KPI stamping.  The FSN matches\
    \ each packet with a\n      Stamping Controller (SC) flow based on (but not limited\
    \ to) a\n      stamping classification criterion such as transport 5-tuple\n \
    \     coordinates.\n   Last Stamping Node (LSN):  The last node along an SFC that\
    \ stamps\n      packets using KPI stamping.  From a forwarding point of view,\
    \ the\n      LSN removes the NSH and forwards the raw IP packet to the next\n\
    \      hop.  From a control-plane point of view, the LSN reads all the\n     \
    \ metadata (MD) and exports it to a system performance statistics\n      agent\
    \ or repository.  The LSN should use the NSH Service Index\n      (SI) to indicate\
    \ if an SF was at the end of the chain.  The LSN\n      may change the Service\
    \ Path Identifier (SPI) to a preconfigured\n      value so that the network underlay\
    \ forwards the MD back directly\n      to the KPI database (KPIDB) based on this\
    \ value.\n   Key Performance Indicator Database (KPIDB):  Denotes the external\n\
    \      storage of MD for reporting, trend analysis, etc.\n   KPI stamping:  The\
    \ insertion of latency-related and/or QoS-related\n      information into a packet\
    \ using NSH MD.\n   Flow ID:  A unique 16-bit identifier written into the header\
    \ by the\n      classifier.  This allows 65536 flows to be concurrently stamped\
    \ on\n      any given NSH service chain.\n   QoS stamping:  The insertion of QoS-related\
    \ information into a packet\n      using NSH MD.\n   Stamping Controller (SC):\
    \  The central logic that decides what\n      packets to stamp and how to stamp\
    \ them.  The SC instructs the\n      classifier on how to build the parts of the\
    \ NSH that are specific\n      to KPI stamping.\n   Stamping Control Plane (SCP):\
    \  The control plane between the FSN and\n      the SC.\n"
- title: 2.3.  Abbreviations
  contents:
  - "2.3.  Abbreviations\n   DEI         Drop Eligible Indicator\n   DSCP        Differentiated\
    \ Services Code Point\n   FSN         First Stamping Node\n   KPI         Key\
    \ Performance Indicator\n   KPIDB       Key Performance Indicator Database\n \
    \  LSN         Last Stamping Node\n   MD          Metadata\n   NFV         Network\
    \ Function Virtualization\n   NSH         Network Service Header\n   OAM     \
    \    Operations, Administration, and Maintenance\n   PCP         Priority Code\
    \ Point\n   PNF         Physical Network Function\n   PNFN        Physical Network\
    \ Function Node\n   QoE         Quality of Experience\n   QoS         Quality\
    \ of Service\n   RSP         Rendered Service Path\n   SC          Stamping Controller\n\
    \   SCL         Service Classifier\n   SCP         Stamping Control Plane\n  \
    \ SF          Service Function\n   SFC         Service Function Chain\n   SI \
    \         Service Index\n   SSI         Stamp Service Index\n   TS          Timestamp\n\
    \   VLAN        Virtual Local Area Network\n   VNF         Virtual Network Function\n"
- title: '3.  NSH KPI Stamping: An Overview'
  contents:
  - "3.  NSH KPI Stamping: An Overview\n   A typical KPI-stamping architecture is\
    \ presented in Figure 1.\n       Stamping\n      Controller\n         |      \
    \                                               KPIDB\n         | SCP Interface\
    \                                        |\n       ,---.             ,---.   \
    \           ,---.              ,---.\n      /     \\           /     \\      \
    \      /     \\            /     \\\n     (  SCL  )-------->(  SF1  )--------->(\
    \  SF2  )--------->(  SFn  )\n      \\ FSN /           \\     /            \\\
    \     /            \\ LSN /\n       `---'             `---'              `---'\
    \              `---'\n                Figure 1: Logical Roles in NSH KPI Stamping\n\
    \   The SC will be part of the SFC control-plane architecture, but it is\n   described\
    \ separately in this document for clarity.\n   The SC is responsible for initiating\
    \ start/stop stamp requests to the\n   SCL or FSN and also for distributing the\
    \ NSH-stamping policy into the\n   service chain via the SCP interface.\n   The\
    \ FSN will typically be part of the SCL but is called out as a\n   separate logical\
    \ entity for clarity.\n   The FSN is responsible for marking NSH MD fields; this\
    \ tells nodes in\n   the service chain how to behave in terms of stamping at the\
    \ SF\n   ingress, the SF egress, or both, or ignoring the stamp NSH MD\n   completely.\n\
    \   The FSN also writes the Reference Time value, a (possibly inaccurate)\n  \
    \ estimate of the current time of day, into the header, allowing the\n   \"SPI:Flow\
    \ ID\" performance to be compared to previous samples for\n   offline analysis.\n\
    \   The FSN should return an error to the SC if not synchronized to the\n   current\
    \ time of day and forward the packet along the service chain\n   unchanged.  The\
    \ code and format of the error are specific to the\n   protocol used between the\
    \ FSN and SC; these considerations are out of\n   scope.\n   SF1 and SF2 stamp\
    \ the packets as dictated by the FSN and process the\n   payload as per normal.\n\
    \   Note 1: The exact location of the stamp creation may not be in the SF\n  \
    \         itself and may be applied by a hardware device -- for\n           example,\
    \ as discussed in Section 3.3.\n   Note 2: Special cases exist where some of the\
    \ SFs are NSH unaware.\n           This is covered in Section 5.\n   The LSN should\
    \ strip the entire NSH and forward the raw packet to the\n   IP next hop as per\
    \ [RFC8300].  The LSN also exports NSH-stamping\n   information to the KPIDB for\
    \ offline analysis; the LSN may export the\n   stamping information of either\
    \ (1) all packets or (2) a subset based\n   on packet sampling.\n   In fully virtualized\
    \ environments, the LSN is likely to be co-located\n   with the SF that decrements\
    \ the NSH SI to zero.  Corner cases exist\n   where this is not the case; see\
    \ Section 5.\n"
- title: 3.1.  Prerequisites
  contents:
  - "3.1.  Prerequisites\n   Timestamping has its own set of prerequisites; however,\
    \ these\n   prerequisites are not required for QoS stamping.  In order to\n  \
    \ guarantee MD accuracy, all servers hosting VNFs should be\n   synchronized from\
    \ a centralized stable clock.  As it is assumed that\n   PNFs do not timestamp\
    \ (as this would involve a software change and a\n   probable impact on throughput\
    \ performance), there is no need for them\n   to synchronize.  There are two possible\
    \ levels of synchronization:\n   Level A: Low-accuracy time-of-day synchronization,\
    \ based on NTP\n            [RFC5905].\n   Level B: High-accuracy synchronization\
    \ (typically on the order of\n            microseconds), based on [IEEE1588].\n\
    \   Each SF SHOULD have Level A synchronization and MAY have Level B\n   synchronization.\n\
    \   Level A requires each platform (including the SC) to synchronize its\n   system\
    \ real-time clock to an NTP server.  This is used to mark the MD\n   in the chain,\
    \ using the Reference Time field in the NSH KPI stamp\n   header (Section 4.1).\
    \  This timestamp is inserted into the NSH by the\n   first SF in the chain. \
    \ NTP accuracy can vary by several milliseconds\n   between locations.  This is\
    \ not an issue, as the Reference Time is\n   merely being used as a time-of-day\
    \ reference inserted into the KPIDB\n   for performance monitoring and MD retrieval.\n\
    \   Level B synchronization requires each platform to be synchronized to\n   a\
    \ Primary Reference Clock (PRC) using the Precision Time Protocol\n   (PTP) [IEEE1588].\
    \  A platform MAY also use Synchronous Ethernet\n   [G.8261] [G.8262] [G.8264],\
    \ allowing more accurate frequency\n   synchronization.\n   If an SF is not synchronized\
    \ at the moment of timestamping, it should\n   indicate its synchronization status\
    \ in the NSH.  This is described in\n   more detail in Section 4.\n   By synchronizing\
    \ the network in this way, the timestamping operation\n   is independent of the\
    \ current RSP.  Indeed, the timestamp MD can\n   indicate where a chain has been\
    \ moved due to a resource starvation\n   event as indicated in Figure 2, between\
    \ VNF3 and VNF4 at time B.\n     Delay\n      |                              \
    \    v\n      |                           v\n      |                         \
    \         x\n      |                           x             x = Reference Time\
    \ A\n      |                    xv                   v = Reference Time B\n  \
    \    |             xv\n      |      xv\n      |______|______|______|______|______|_____\n\
    \         VNF1    VNF2   VNF3   VNF4   VNF5\n               Figure 2: Flow Performance\
    \ in a Service Chain\n   For QoS stamping, it is desired that the SCL or FSN be\
    \ synchronized\n   in order to provide a Reference Time for offline analysis,\
    \ but this\n   is not a hard requirement (they may be in holdover or free-run\
    \ state,\n   for example).  Other SFs in the service chain do not need to be\n\
    \   synchronized for QoS-stamping operations, as described below.\n   QoS stamping\
    \ can be used to check the consistency of configuration\n   across the entire\
    \ chain or parts thereof.  By adding all potential\n   Layer 2 and Layer 3 QoS\
    \ fields into a QoS sum at the SF ingress or\n   egress, this allows quick identification\
    \ of QoS mismatches across\n   multiple Layer 2 / Layer 3 fields, which otherwise\
    \ is a manual,\n   expert-led consuming process.\n   |\n   |\n   |           \
    \                       xy\n   |                           xy           x = ingress\
    \ QoS sum\n   |                    xv                  v = egress QoS sum\n  \
    \ |             xv                         y = egress QoS sum mismatch\n   | \
    \     xv\n   |______|______|______|______|______|_____\n         SF1    SF2  \
    \  SF3    SF4    SF5\n             Figure 3: Flow QoS Consistency in a Service\
    \ Chain\n   Referring to Figure 3, x, v, and y are notional sum values of the\
    \ QoS\n   marking configuration of the flow within a given chain.  As the\n  \
    \ encapsulation of the flow can change from hop to hop in terms of VLAN\n   header(s),\
    \ MPLS labels, or DSCP(s), these values are used to compare\n   the consistency\
    \ of configuration from, for example, payload DSCP\n   through overlay and underlay\
    \ QoS settings in VLAN IEEE 802.1Q bits,\n   MPLS bits, and infrastructure DSCPs.\n\
    \   Figure 3 indicates that, at SF4 in the chain, the egress QoS marking\n   is\
    \ inconsistent.  That is, the ingress QoS settings do not match the\n   egress.\
    \  The method described here will indicate which QoS field(s)\n   is inconsistent\
    \ and whether this is ingress (where the underlay has\n   incorrectly marked and\
    \ queued the packet) or egress (where the SF has\n   incorrectly marked and queued\
    \ the packet.\n   Note that the SC must be aware of cases when an SF re-marks\
    \ QoS\n   fields deliberately and thus does not flag an issue for desired\n  \
    \ behavior.\n"
- title: 3.2.  Operation
  contents:
  - "3.2.  Operation\n   KPI-stamping detection mode uses MD Type 2 as defined in\
    \ [RFC8300].\n   This involves the SFC classifier stamping the flow at the chain\n\
    \   ingress and no subsequent stamps being applied; rather, each upstream\n  \
    \ SF can compare its local condition with the ingress value and take\n   appropriate\
    \ action.  Therefore, detection mode is very efficient in\n   terms of header\
    \ size that does not grow after the classification.\n   This is further explained\
    \ in Section 4.2.\n"
- title: 3.2.1.  Flow Selection
  contents:
  - "3.2.1.  Flow Selection\n   The SC should maintain a list of flows within each\
    \ service chain to\n   be monitored.  This flow table should be in the format\
    \ \"SPI:Flow ID\".\n   The SC should map these pairs to unique values presented\
    \ as Flow IDs\n   per service chain within the NSH TLV specified in this document\
    \ (see\n   Section 4).  The SC should instruct the FSN to initiate timestamping\n\
    \   on flow table match.  The SC may also tell the classifier the\n   duration\
    \ of the timestamping operation, by either the number of\n   packets in the flow\
    \ or a certain time duration.\n   In this way, the system can monitor the performance\
    \ of all en-route\n   traffic, an individual subscriber in a chain, or just a\
    \ specific\n   application or QoS class that is used in the network.\n   The SC\
    \ should write the list of monitored flows into the KPIDB for\n   correlation\
    \ of performance and configuration data.  Thus, when the\n   KPIDB receives data\
    \ from the LSN, it understands to which flow the\n   data pertains.\n   The association\
    \ of a source IP address with a subscriber identity is\n   outside the scope of\
    \ this document and will vary by network\n   application.  For example, the method\
    \ of association of a source IP\n   address with an International Mobile Subscriber\
    \ Identity (IMSI) will\n   be different from how a Customer Premises Equipment\
    \ (CPE) entity with\n   a Network Address Translation (NAT) function may be chained\
    \ in an\n   enterprise NFV application.\n"
- title: 3.2.2.  SCP Interface
  contents:
  - "3.2.2.  SCP Interface\n   An SCP interface is required between the SC and the\
    \ FSN or\n   classifier.  This interface is used to:\n   o  Query the SFC classifier\
    \ for a list of active chains and flows.\n   o  Communicate which chains and flows\
    \ to stamp.  This can be a\n      specific \"SPI:Flow ID\" combination or can\
    \ include wildcards for\n      monitoring subscribers across multiple chains or\
    \ multiple flows\n      within one chain.\n   o  Instruct how the stamp should\
    \ be applied (ingress, egress, both\n      ingress and egress, or specific).\n\
    \   o  Indicate when to stop stamping (after either a certain number of\n    \
    \  packets or a certain time duration).\n   Typically, SCP timestamps flows for\
    \ a certain duration for trend\n   analysis but only stamps one packet of each\
    \ QoS class in a chain\n   periodically (perhaps once per day or after a network\
    \ change).\n   Therefore, timestamping is generally applied to a much larger set\
    \ of\n   packets than QoS stamping.\n   The exact specification of SCP is left\
    \ for further study.\n"
- title: 3.3.  Performance Considerations
  contents:
  - "3.3.  Performance Considerations\n   This document does not mandate a specific\
    \ stamping implementation\n   method; thus, NSH KPI stamping can be performed\
    \ by either hardware\n   mechanisms or software.\n   If software-based stamping\
    \ is used, applying and operating on the\n   stamps themselves incur an additional\
    \ small delay in the service\n   chain.  However, it can be assumed that these\
    \ additional delays are\n   all relative for the flow in question.  This is only\
    \ pertinent for\n   timestamping mode, and not for QoS-stamping mode.  Thus, whilst\
    \ the\n   absolute timestamps may not be fully accurate for normal\n   non-timestamped\
    \ traffic, they can be assumed to be relative.\n   It is assumed that the methods\
    \ described in this document would only\n   operate on a small percentage of user\
    \ flows.\n   The service provider may choose a flexible policy in the SC to\n\
    \   timestamp a selection of a user plane every minute -- for example, to\n  \
    \ highlight any performance issues.  Alternatively, the LSN may\n   selectively\
    \ export a subset of the KPI stamps it receives, based on a\n   predefined sampling\
    \ method.  Of course, the SC can stress-test an\n   individual flow or chain should\
    \ a deeper analysis be required.  We\n   can expect that this type of deep analysis\
    \ will have an impact on the\n   performance of the chain itself whilst under\
    \ investigation.  This\n   impact will be dependent on vendor implementations\
    \ and is outside the\n   scope of this document.\n   For QoS stamping, the methods\
    \ described here are even less intrusive,\n   as typically packets are only QoS\
    \ stamped periodically (perhaps once\n   per day) to check service chain configuration\
    \ per QoS class.\n"
- title: 4.  NSH KPI-Stamping Encapsulation
  contents:
  - "4.  NSH KPI-Stamping Encapsulation\n   KPI stamping uses NSH MD Type 0x2 for\
    \ detection of anomalies and\n   extended mode for root-cause analysis of KPI\
    \ violations.  These are\n   further explained in this section.\n   The generic\
    \ NSH MD Type 2 TLV for KPI stamping is shown below.\n     0                 \
    \  1                   2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |Ver|O|U|    TTL    |   Length  |U|U|U|U|Type=2 | Next Protocol |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |          Service Path Identifier              | Service Index |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |        Metadata Class         |      Type     |U|    Length   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |       Variable Length KPI Metadata header and TLV(s)          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 4: Generic NSH KPI Encapsulation\n   Relevant fields\
    \ in the header that the FSN must implement are as\n   follows:\n   o  The O bit\
    \ must not be set.\n   o  The MD type must be set to 0x2.\n   o  The Metadata\
    \ Class must be set to a value from the experimental\n      range 0xfff6 to 0xfffe\
    \ according to an agreement by all parties to\n      the experiment.\n   o  Unassigned\
    \ bits: All fields marked \"U\" are unassigned and\n      available for future\
    \ use [RFC8300].\n   o  The Type field may have one of the following values; the\
    \ content\n      of the Variable Length KPI Metadata header and TLV(s) field\n\
    \      depends on the Type value:\n      *  Type = 0x01 (Det): Detection\n   \
    \   *  Type = 0x02 (TS): Timestamp Extended\n      *  Type = 0x03 (QoS): QoS stamp\
    \ Extended\n   The Type field determines the type of KPI-stamping format.  The\n\
    \   supported formats are presented in the following subsections.\n"
- title: 4.1.  KPI-Stamping Extended Encapsulation
  contents:
  - "4.1.  KPI-Stamping Extended Encapsulation\n   The generic NSH MD Type 2 KPI-stamping\
    \ header (extended mode) is\n   shown in Figure 5.  This is the format for performance\
    \ monitoring of\n   service chain issues with respect to QoS configuration and\
    \ latency.\n     0                   1                   2                   3\n\
    \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |Ver|O|U|    TTL    |   Length  |U|U|U|U|Type=2 | Next Protocol |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |          Service Path Identifier              | Service Index |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |         Metadata Class        |     Type      |U|    Length   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |           Variable Length KPI Configuration Header            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                  Variable Length KPI Value (LSN)              |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    \\                                                               \\\n   \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |   \
    \               Variable Length KPI Value (FSN)              |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Figure 5: Generic KPI Encapsulation (Extended Mode)\n   As mentioned\
    \ above, two types are defined under the experimental MD\n   class to indicate\
    \ the extended KPI MD: a timestamp type and a\n   QoS-stamp type.\n   The KPI\
    \ Encapsulation Configuration Header format is shown below.\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |K|K|T|K|K|K|K|K|   Stamping SI |           Flow ID             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        Reference Time                         |\n    |\
    \                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 6: KPI Encapsulation Configuration Header\n   The bits marked\
    \ \"K\" are reserved for specific KPI type use and are\n   described in the subsections\
    \ below.\n   The T bit should be set if Reference Time follows the KPI\n   Encapsulation\
    \ Configuration Header.\n   The SSI (Stamping SI) contains the SI used for KPI\
    \ stamping and is\n   described in the subsections below.\n   The Flow ID is a\
    \ unique 16-bit identifier written into the header by\n   the classifier.  This\
    \ allows 65536 flows to be concurrently stamped\n   on any given NSH service chain\
    \ (SPI).  Flow IDs are not written by\n   subsequent SFs in the chain.  The FSN\
    \ may export monitored Flow IDs\n   to the KPIDB for correlation.\n   Reference\
    \ Time is the wall clock of the FSN and may be used for\n   historical comparison\
    \ of SC performance.  If the FSN is not Level A\n   synchronized (see Section\
    \ 3.1), it should inform the SC over the SCP\n   interface.  The Reference Time\
    \ is represented in 64-bit NTP format\n   [RFC5905], as presented in Figure 7:\n\
    \     0                   1                   2                   3\n     0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                            Seconds                            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                            Fraction                           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 7: NTP 64-Bit Timestamp Format (RFC 5905)\n"
- title: 4.1.1.  NSH Timestamping Encapsulation (Extended Mode)
  contents:
  - "4.1.1.  NSH Timestamping Encapsulation (Extended Mode)\n   The NSH timestamping\
    \ extended encapsulation is shown below.\n     0                   1         \
    \          2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |Ver|O|C|U|U|U|U|U|U|   Length  |U|U|U|U|Type=2 |   NextProto   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |          Service Path ID                      | Service Index |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |          Metadata Class         |  Type=TS(2) |U|     Len     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |I|E|T|U|U|U|SSI|  Stamping SI  |           Flow ID             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \    |              Reference Time (T bit is set)                    |\n    |\
    \                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |I|E|U|U|U| SYN |  Stamping SI  |         Unassigned            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \    |            Ingress Timestamp (I bit is set) (LSN)             |\n    |\
    \                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             Egress Timestamp (E bit is set) (LSN)             |\n    |\
    \                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    .                                                               .\n    .\
    \                                                               .\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |I|E|U|U|U| SYN |  Stamping SI  |          Unassigned           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \    |                 Ingress Timestamp (I bit is set) (FSN)        |\n    |\
    \                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                 Egress Timestamp (E bit is set) (FSN)         |\n    |\
    \                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           Figure 8: NSH Timestamp Encapsulation (Extended Mode)\n   The FSN\
    \ KPI stamp MD starts with the Stamping Configuration Header.\n   This header\
    \ contains the I, E, and T bits, and the SSI.\n   The I bit should be set if the\
    \ Ingress stamp is requested.\n   The E bit should be set if the Egress stamp\
    \ is requested.\n   The SSI field must be set to one of the following values:\n\
    \   o  0x0: KPI stamp mode.  No SI is specified in the Stamping SI field.\n  \
    \ o  0x1: KPI stamp hybrid mode is selected.  The Stamping SI field\n      contains\
    \ the LSN SI.  This is used when PNFs or NSH-unaware SFs\n      are used at the\
    \ tail of the chain.  If SSI=0x1, then the value in\n      the Type field informs\
    \ the chain regarding which SF should act as\n      the LSN.\n   o  0x2: KPI stamp\
    \ Specific mode is selected.  The Stamping SI field\n      contains the targeted\
    \ SI.  In this case, the Stamping SI field\n      indicates which SF is to be\
    \ stamped.  Both Ingress stamps and\n      Egress stamps are performed when the\
    \ SI=SSI in the chain.  For\n      timestamping mode, the FSN will also apply\
    \ the Reference Time and\n      Ingress Timestamp.  This will indicate the delay\
    \ along the entire\n      service chain to the targeted SF.  This method may also\
    \ be used as\n      a light implementation to monitor end-to-end service chain\n\
    \      performance whereby the targeted SF is the LSN.  This is not\n      applicable\
    \ to QoS-stamping mode.\n   Each stamping node adds stamp MD that consists of\
    \ the Stamping\n   Reporting Header and timestamps.\n   The E bit should be set\
    \ if the Egress stamp is reported.\n   The I bit should be set if the Ingress\
    \ stamp is reported.\n   With respect to timestamping mode, the SYN bits are an\
    \ indication of\n   the synchronization status of the node performing the timestamp\
    \ and\n   must be set to one of the following values:\n   o  In synch: 0x00\n\
    \   o  In holdover: 0x01\n   o  In free run: 0x02\n   o  Out of synch: 0x03\n\
    \   If the platform hosting the SF is out of synch or in free run, no\n   timestamp\
    \ is applied by the node, and the packet is processed\n   normally.\n   If the\
    \ FSN is out of synch or in free run, the timestamp request is\n   rejected and\
    \ is not propagated through the chain.  In such an event,\n   the FSN should inform\
    \ the SC over the SCP interface.  Similarly, if\n   the KPIDB receives timestamps\
    \ that are out of order (i.e., a\n   timestamp of an \"N+1\" SF is prior to the\
    \ timestamp of an \"N\" SF), it\n   should notify the SC of this condition over\
    \ the SCP interface.\n   The outer SI value is copied into the stamp MD as the\
    \ Stamping SI to\n   help cater to hybrid chains that are a mix of VNFs and PNFs\
    \ or\n   through NSH-unaware SFs.  Thus, if a flow transits through a PNF or\n\
    \   an NSH-unaware node, the delta in the inner SI between timestamps\n   will\
    \ indicate this.\n   The Ingress Timestamp and Egress Timestamp are represented\
    \ in 64-bit\n   NTP format.  The corresponding bits (I and E) are reported in\
    \ the\n   Stamping Reporting Header of the node's MD.\n"
- title: 4.1.2.  NSH QoS-Stamping Encapsulation (Extended Mode)
  contents:
  - "4.1.2.  NSH QoS-Stamping Encapsulation (Extended Mode)\n   Packets have a variable\
    \ QoS stack.  For example, the same payload IP\n   can have a very different stack\
    \ in the access part of the network\n   than the core.  This is most apparent\
    \ in mobile networks where, for\n   example, in an access circuit we would have\
    \ an infrastructure IP\n   header (DSCP) composed of two layers -- one based on\
    \ transport and\n   the other based on IPsec -- in addition to multiple MPLS and\
    \ VLAN\n   tags.  The same packet, as it leaves the Packet Data Network (PDN)\n\
    \   Gateway Gi egress interface, may be very much simplified in terms of\n   overhead\
    \ and related QoS fields.\n   Because of this variability, we need to build extra\
    \ meaning into the\n   QoS headers.  They are not, for example, all PTP timestamps\
    \ of a\n   fixed length, as in the case of timestamping; rather, they are of\n\
    \   variable lengths and types.  Also, they can be changed on the\n   underlay\
    \ at any time without the knowledge of the SFC system.\n   Therefore, each SF\
    \ must be able to ascertain and record its ingress\n   and egress QoS configuration\
    \ on the fly.\n   The suggested QoS Type (QT) and lengths are listed below.\n\
    \    QoS Type  Value    Length    Comment\n    ----------------------------------------------------------\n\
    \    IVLAN     0x01     4 Bits    Ingress VLAN (PCP + DEI)\n    EVLAN     0x02\
    \     4 Bits    Egress VLAN\n    IQINQ     0x03     8 Bits    Ingress QinQ (2x\
    \ (PCP + DEI))\n    EQINQ     0x04     8 Bits    Egress QinQ\n    IMPLS     0x05\
    \     3 Bits    Ingress Label\n    EMPLS     0x06     3 Bits    Egress Label\n\
    \    IMPLS     0x07     6 Bits    Two Ingress Labels (2x EXP)\n    EMPLS     0x08\
    \     6 Bits    Two Egress Labels\n    IDSCP     0x09     8 Bits    Ingress DSCP\n\
    \    EDSCP     0x0A     8 Bits    Egress DSCP\n   For stacked headers such as\
    \ MPLS and 802.1ad, we extract the relevant\n   QoS data from the header and insert\
    \ it into one QoS value in order to\n   be more efficient in terms of packet size.\
    \  Thus, for MPLS, we\n   represent both experimental bits (EXP) fields in one\
    \ QoS value, and\n   both 802.1p priority and drop precedence in one QoS value,\
    \ as\n   indicated above.\n   For stack types not listed here (for example, three\
    \ or more MPLS\n   tags), the SF would insert IMPLS/EMPLS several times, with\
    \ each layer\n   in the stack indicating EXP QoS for that layer.\n     0     \
    \              1                   2                   3\n     0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |Ver|O|C|U|U|U|U|U|U|   Length  |U|U|U|U|Type=2 | NextProto=0x0 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |          Service Path ID                      | Service Index |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |         Metadata Class        |   Type=QoS(3) |U|     Len     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |U|U|T|U|U|U|SSI|  Stamping SI  |           Flow ID             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \    |              Reference Time (T bit is set)                    |\n    |\
    \                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |U|U|U|U|U|U|U|U|  Stamping SI  |         Unassigned            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \    |   QT  |    QoS Value  |U|U|U|E|  QT   | QoS Value     |U|U|U|E|\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    .                                                               .\n    .\
    \                                                               .\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |U|U|U|U|U|U|U|U|  Stamping SI  |          Unassigned           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \    |   QT  |   QoS Value   |U|U|U|E|  QT   | QoS Value     |U|U|U|E|\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       Figure 9: NSH QoS Configuration Encapsulation (Extended Mode)\n   The\
    \ encapsulation in Figure 9 is very similar to the encapsulation\n   detailed\
    \ in Section 4.1.1, with the following exceptions:\n   o  I and E bits are not\
    \ required, as we wish to examine the full QoS\n      stack at the ingress and\
    \ egress at every SF.\n   o  SYN status bits are not required.\n   o  The QT and\
    \ QoS values are as outlined in the list above.\n   o  The E bit at the tail of\
    \ each QoS context field indicates if this\n      is the last egress QoS stamp\
    \ for a given SF.  This should coincide\n      with SI=0 at the LSN, whereby the\
    \ packet is truncated, the NSH MD\n      is sent to the KPIDB, and the subscriber's\
    \ raw IP packet is\n      forwarded to the underlay next hop.\n   Note: It is\
    \ possible to compress the frame structure to better\n   utilize the header, but\
    \ this would come at the expense of crossing\n   byte boundaries.  For ease of\
    \ implementation, and so that\n   QoS stamping is applied on an extremely small\
    \ subset of user-plane\n   traffic, we believe that the above structure is a pragmatic\n\
    \   compromise between header efficiency and ease of implementation.\n"
- title: 4.2.  KPI-Stamping Encapsulation (Detection Mode)
  contents:
  - "4.2.  KPI-Stamping Encapsulation (Detection Mode)\n   The format of the NSH MD\
    \ Type 2 KPI-stamping TLV (detection mode) is\n   shown in Figure 10.\n   This\
    \ TLV is used for KPI anomaly detection.  Upon detecting a problem\n   or an anomaly,\
    \ it will be possible to enable the use of KPI-stamping\n   extended encapsulations,\
    \ which will provide more detailed analysis.\n     0                   1     \
    \              2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |Ver|O|U|    TTL    |   Length  |U|U|U|U|Type=2 | Next Protocol |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |          Service Path Identifier              | Service Index |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |        Metadata Class         | Type=Det(1)   |U|    Length   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |   KPI Type    |      Stamping SI      |          Flow ID      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                      Threshold KPI Value                      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                       Ingress KPI stamp                       |\n    |\
    \                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \         Figure 10: Generic NSH KPI Encapsulation (Detection Mode)\n   The following\
    \ fields are defined in the KPIDB MD:\n   o  KPI Type: This field determines the\
    \ type of KPI stamp that is\n      included in this MD.  If a receiver along the\
    \ path does not\n      understand the KPI type, it will pass the packet on transparently\n\
    \      and will not drop it.  The supported values of KPI Type are:\n      * \
    \ 0x0: Timestamp\n      *  0x1: QoS stamp\n   o  Threshold KPI Value: In the first\
    \ header, the SFC classifier may\n      program a KPI threshold value.  This is\
    \ a value that, when\n      exceeded, requires the SF to insert the current SI\
    \ value into the\n      SI field.  The KPI type is the type of KPI stamp inserted\
    \ into the\n      header as per Figure 10.\n   o  Stamping SI: This is the Service\
    \ Identifier of the SF when the\n      above threshold value is exceeded.\n  \
    \ o  Flow ID: The Flow ID is inserted into the header by the SFC\n      classifier\
    \ in order to correlate flow data in the KPIDB for\n      offline analysis.\n\
    \   o  Ingress KPI stamp: The last 8 octets are reserved for the\n      KPI stamp.\
    \  This is the KPI value at the chain ingress at the SFC\n      classifier.  Depending\
    \ on the KPI type, the KPI stamp includes\n      either a timestamp or a QoS stamp.\
    \  If the KPI type is Timestamp,\n      then the Ingress KPI stamp field contains\
    \ a timestamp in 64-bit\n      NTP timestamp format.  If the KPI type is QoS stamp,\
    \ then the\n      format of the 64-bit Ingress KPI stamp is as follows.\n    \
    \ 0                   1                   2                   3\n     0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |   QT  |    QoS Value  |              Unassigned               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+\
    \                                       +\n    |                             \
    \                                  |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 11: QoS-Stamp Format (Detection Mode)\n   As an example\
    \ operation, let's say we are using KPI type 0x01\n   (Timestamp).  When an SF\
    \ (say SFn) receives the packet, it can\n   compare the current local timestamp\
    \ (it first checks that it is\n   synchronized to the network's PRC) with the\
    \ chain Ingress Timestamp\n   to calculate the latency in the chain.  If this\
    \ value exceeds the\n   timestamp threshold, it then inserts its SI and returns\
    \ the NSH to\n   the KPIDB.  This effectively tells the system that at SFn the\
    \ packet\n   violated the KPI threshold.  Please refer to Figure 8 for the\n \
    \  timestamp format.\n   When this occurs, the SFC control-plane system would\
    \ then invoke the\n   KPI extended mode, which uses a more sophisticated (and\
    \ intrusive)\n   method to isolate the root cause of the KPI violation, as described\n\
    \   below.\n   Note: Whilst detection mode is a valuable tool for latency actions,\n\
    \   the authors feel that building the logic into the KPI system for QoS\n   configuration\
    \ is not justified.  As QoS stamping is done infrequently\n   and on a tiny percentage\
    \ of the user plane, it is more practical to\n   use extended mode only for service\
    \ chain QoS verification.\n"
- title: 5.  Hybrid Models
  contents:
  - "5.  Hybrid Models\n   A hybrid chain may be defined as a chain whereby there\
    \ is a mix of\n   NSH-aware and NSH-unaware SFs.\n   Figure 12 shows an example\
    \ of a hybrid chain with a PNF in the\n   middle.\n      Stamping\n     Controller\n\
    \         |                                                      KPIDB\n     \
    \    | SCP Interface                                        |\n       ,---.  \
    \           ,---.              ,---.              ,---.\n      /     \\      \
    \     /     \\            /     \\            /     \\\n     (  SCL  )-------->(\
    \  SF1  )--------->(  SF2  )--------->(  SFn  )\n      \\ FSN /           \\ \
    \    /            \\ PNF1/            \\ LSN /\n       `---'             `---'\
    \              `---'              `---'\n                Figure 12: Hybrid Chain\
    \ with PNF in Middle\n   In this example, the FSN begins its operation and sets\
    \ the SI to 3.\n   SF1 decrements the SI to 2 and passes the packet to an SFC\
    \ proxy\n   (not shown).\n   The SFC proxy strips the NSH and passes the packet\
    \ to the PNF.  On\n   receipt back from the PNF, the proxy decrements the SI and\
    \ passes the\n   packet to the LSN with SI=1.\n   After the LSN processes the\
    \ traffic, it knows from the SI value that\n   it is the last node in the chain,\
    \ and it exports the entire NSH and\n   all MD to the KPIDB.  The payload is forwarded\
    \ to the next hop on the\n   underlay minus the NSH.  The stamping information\
    \ packet may be given\n   a new SPI to act as a homing tag to transport the stamp\
    \ data back to\n   the KPIDB.\n   Figure 13 shows an example of a hybrid chain\
    \ with a PNF at the end.\n     Stamping\n    Controller\n        |           \
    \                                           KPIDB\n        | SCP Interface   \
    \                                     |\n      ,---.             ,---.       \
    \       ,---.              ,---.\n     /     \\           /     \\           \
    \ /     \\            /     \\\n    (  SCL  )-------->(  SF1  )--------->(  SF2\
    \  )--------->(  PNFN )\n     \\ FSN /           \\     /            \\ LSN /\
    \            \\     /\n      `---'             `---'              `---'      \
    \        `---'\n                  Figure 13: Hybrid Chain with PNF at End\n  \
    \ In this example, the FSN begins its operation and sets the SI to 3.\n   The\
    \ SSI field is set to 0x1, and the type is set to 1.  Thus, when\n   SF2 receives\
    \ the packet with SI=1, it understands that it is expected\n   to take on the\
    \ role of the LSN, as it is the last NSH-aware node in\n   the chain.\n"
- title: 5.1.  Targeted VNF Stamping
  contents:
  - "5.1.  Targeted VNF Stamping\n   For the majority of flows within the service\
    \ chain, stamps (Ingress\n   stamps, Egress stamps, or both) will be carried out\
    \ at each hop until\n   the SI decrements to zero and the NSH and stamp MD are\
    \ exported to\n   the KPIDB.  However, the need to just test a particular VNF\
    \ may exist\n   (perhaps after a scale-out operation, software upgrade, or underlay\n\
    \   change, for example).  In this case, the FSN should mark the NSH as\n   follows:\n\
    \   o  The SSI field is set to 0x2.\n   o  Type is set to the expected SI at the\
    \ SF in question.\n   o  When the outer SI is equal to the SSI, stamps are applied\
    \ at the\n      SF ingress and egress, and the NSH and MD are exported to the\n\
    \      KPIDB.\n"
- title: 6.  Fragmentation Considerations
  contents:
  - "6.  Fragmentation Considerations\n   The methods described in this document do\
    \ not support fragmentation.\n   The SC should return an error should a stamping\
    \ request from an\n   external system exceed MTU limits and require fragmentation.\n\
    \   Depending on the length of the payload and the type of KPI stamp and\n   chain\
    \ length, this will vary for each packet.\n   In most service provider architectures,\
    \ we would expect SI << 10,\n   which may include some PNFs in the chain that\
    \ do not add overhead.\n   Thus, for typical Internet Mix (IMIX) packet sizes\
    \ [RFC6985], we\n   expect to be able to perform timestamping on the vast majority\
    \ of\n   flows without fragmentation.  Thus, the classifier can apply a simple\n\
    \   rule that only allows KPI stamping on packet sizes less than 1200\n   bytes,\
    \ for example.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The security considerations for the NSH in general\
    \ are discussed in\n   [RFC8300].\n   In-band timestamping, as defined in this\
    \ document, can be used as a\n   means for network reconnaissance.  By passively\
    \ eavesdropping on\n   timestamped traffic, an attacker can gather information\
    \ about network\n   delays and performance bottlenecks.\n   The NSH timestamp\
    \ is intended to be used by various applications to\n   monitor network performance\
    \ and to detect anomalies.  Thus, a\n   man-in-the-middle attacker can maliciously\
    \ modify timestamps in order\n   to attack applications that use the timestamp\
    \ values.  For example,\n   an attacker could manipulate the SFC classifier operation,\
    \ such that\n   it forwards traffic through \"better-behaved\" chains.  Furthermore,\
    \ if\n   timestamping is performed on a fraction of the traffic, an attacker\n\
    \   can selectively induce synthetic delay only to timestamped packets\n   and\
    \ can systematically trigger measurement errors.\n   Similarly, if an attacker\
    \ can modify QoS stamps, erroneous values may\n   be imported into the KPIDB,\
    \ resulting in further misconfiguration and\n   subscriber QoE impairment.\n \
    \  An attacker that gains access to the SCP can enable timestamping and\n   QoS\
    \ stamping for all subscriber flows, thereby causing performance\n   bottlenecks,\
    \ fragmentation, or outages.\n   As discussed in previous sections, NSH timestamping\
    \ relies on an\n   underlying time synchronization protocol.  Thus, by attacking\
    \ the\n   time protocol, an attacker can potentially compromise the integrity\n\
    \   of the NSH timestamp.  A detailed discussion about the threats\n   against\
    \ time protocols and how to mitigate them is presented in\n   [RFC7384].\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC7665]  Halpern, J., Ed. and C. Pignataro, Ed., \"Service Function\n  \
    \            Chaining (SFC) Architecture\", RFC 7665,\n              DOI 10.17487/RFC7665,\
    \ October 2015,\n              <https://www.rfc-editor.org/info/rfc7665>.\n  \
    \ [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in\n           \
    \   RFC 2119 Key Words\", BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174,\
    \ May 2017,\n              <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8300]\
    \  Quinn, P., Ed., Elzur, U., Ed., and C. Pignataro, Ed.,\n              \"Network\
    \ Service Header (NSH)\", RFC 8300,\n              DOI 10.17487/RFC8300, January\
    \ 2018,\n              <https://www.rfc-editor.org/info/rfc8300>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [IEEE1588]\n              IEEE, \"IEEE Standard\
    \ for a Precision Clock Synchronization\n              Protocol for Networked\
    \ Measurement and Control Systems\",\n              IEEE Standard 1588,\n    \
    \          <https://standards.ieee.org/standard/1588-2008.html>.\n   [RFC5905]\
    \  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,\n              \"Network\
    \ Time Protocol Version 4: Protocol and Algorithms\n              Specification\"\
    , RFC 5905, DOI 10.17487/RFC5905, June 2010,\n              <https://www.rfc-editor.org/info/rfc5905>.\n\
    \   [RFC7384]  Mizrahi, T., \"Security Requirements of Time Protocols in\n   \
    \           Packet Switched Networks\", RFC 7384, DOI 10.17487/RFC7384,\n    \
    \          October 2014, <https://www.rfc-editor.org/info/rfc7384>.\n   [RFC6985]\
    \  Morton, A., \"IMIX Genome: Specification of Variable Packet\n             \
    \ Sizes for Additional Testing\", RFC 6985,\n              DOI 10.17487/RFC6985,\
    \ July 2013,\n              <https://www.rfc-editor.org/info/rfc6985>.\n   [Y.1731]\
    \   ITU-T Recommendation G.8013/Y.1731, \"Operations,\n              administration\
    \ and maintenance (OAM) functions and\n              mechanisms for Ethernet-based\
    \ networks\", August 2015,\n              <https://www.itu.int/rec/T-REC-G.8013/en>.\n\
    \   [G.8261]   ITU-T Recommendation G.8261/Y.1361, \"Timing and\n            \
    \  synchronization aspects in packet networks\", August 2013,\n              <https://www.itu.int/rec/T-REC-G.8261>.\n\
    \   [G.8262]   ITU-T Recommendation G.8262/Y.1362, \"Timing\n              characteristics\
    \ of a synchronous Ethernet equipment slave\n              clock\", November 2018,\n\
    \              <https://www.itu.int/rec/T-REC-G.8262>.\n   [G.8264]   ITU-T Recommendation\
    \ G.8264/Y.1364, \"Distribution of\n              timing information through packet\
    \ networks\", August 2017,\n              <https://www.itu.int/rec/T-REC-G.8264>.\n\
    \   [In-Situ-OAM]\n              Brockners, F., Bhandari, S., Pignataro, C., Gredler,\
    \ H.,\n              Leddy, J., Youell, S., Mizrahi, T., Mozes, D., Lapukhov,\n\
    \              P., Chang, R., Bernier, D., and J. Lemon, \"Data Fields for\n \
    \             In-situ OAM\", Work in Progress,\n              draft-ietf-ippm-ioam-data-05,\
    \ March 2019.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors gratefully acknowledge Mohamed Boucadair, Martin\n\
    \   Vigoureux, and Adrian Farrel for their thorough reviews and helpful\n   comments.\n"
- title: Contributors
  contents:
  - "Contributors\n   This document originated as draft-browne-sfc-nsh-timestamp-00;\
    \ the\n   following people were coauthors of that draft.  We would like to\n \
    \  thank them and recognize them for their contributions.\n   Yoram Moses\n  \
    \ Technion\n   Email: moses@ee.technion.ac.il\n   Brendan Ryan\n   Intel Corporation\n\
    \   Email: brendan.ryan@intel.com\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Rory Browne\n   Intel\n   Dromore House\n   Shannon\n\
    \   Co. Clare\n   Ireland\n   Email: rorybrowne@yahoo.com\n   Andrey Chilikin\n\
    \   Intel\n   Dromore House\n   Shannon\n   Co. Clare\n   Ireland\n   Email: andrey.chilikin@intel.com\n\
    \   Tal Mizrahi\n   Huawei Network.IO Innovation Lab\n   Israel\n   Email: tal.mizrahi.phd@gmail.com\n"
