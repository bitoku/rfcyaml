Abstract This document describes how to use CBC mode cipher algorithms with the IPSec ESP (Encapsulating Security Payload) Protocol.
It not only clearly states how to use certain cipher algorithms, but also how to use all CBC mode cipher algorithms.
The Encapsulating Security Payload (ESP) [Kent98] provides confidentiality for IP datagrams by encrypting the payload data to be protected.
This specification describes the ESP use of CBC mode cipher algorithms.
While this document does not describe the use of the default cipher algorithm DES, the reader should be familiar with that document.
It is assumed that the reader is familiar with the terms and concepts described in the "Security Architecture for the Internet Protocol" [Atkinson95], "IP Security Document Roadmap" [Thayer97], and "IP Encapsulating Security Payload (ESP)" [Kent98] documents.
Furthermore, this document is a companion to [Kent98] and MUST be read in its context.
The keywords "MUST", "MUST NOT", "REQUIRED", "SHOULD", "SHOULD NOT", and "MAY" that appear in this document are to be interpreted as described in [Bradner97].
All symmetric block cipher algorithms share common characteristics and variables.
These include mode, key size, weak keys, block size, and rounds.
All of which will be explained below.
While this document illustrates certain cipher algorithms such as Blowfish [Schneier93], CAST 128 [Adams97], 3DES, IDEA [Lai] [MOV], and RC5 [Baldwin96], any other block cipher algorithm may be used with ESP if all of the variables described within this document are clearly defined.
algorithms described or insinuated within this document use
Cipher Block Chaining (CBC) mode.
This mode requires an Initialization Vector (IV)
that is the same size as the block size.
Use of a randomly generated IV prevents generation of identical ciphertext from packets which have identical data that spans the first block of the cipher algorithm's blocksize.
The IV is XOR'd with the first plaintext block, before it is encrypted.
Then for successive blocks, the previous ciphertext block is XOR'd with the current plaintext, before it is encrypted.
More information on CBC mode can be obtained in [Schneier95].
Some cipher algorithms allow for variable sized keys, while others only allow a specific key size.
The length of the key correlates with the strength of that algorithm, thus larger keys are always harder to break than shorter ones.
This document stipulates that all key sizes MUST be a multiple of 8 bits.
This document does specify the default key size for each cipher algorithm.
This size was chosen by consulting experts on the algorithm and by balancing strength of the algorithm with performance.
[1] With CAST 128, keys less than 128 bits MUST be padded with zeros in the rightmost, or least significant, positions out to 128 bits since the CAST 128 key schedule assumes an input key of 128 bits.
Thus if you had a key with a size of 80 bits '3B5D831CFE', it would be padded to produce a key with a size of 128 bits '3B5D831CFE000000'.
The first 3DES key is taken from the first 64 bits, the second from the next 64 bits, and the third from the last 64 bits.
Implementations MUST take into consideration the parity bits when initially accepting a new set of keys.
Each of the three keys is really 56 bits in length with the extra 8 bits used for parity.
The reader should note that the minimum key size for all of the above cipher algorithms is 40 bits, and that the authors strongly advise that implementations do NOT use key sizes smaller than 40 bits.
2.3 Weak Keys Weak key checks SHOULD be performed.
If such a key is found, the key SHOULD be rejected and a new SA requested.
Some cipher algorithms have weak keys or keys that MUST not be used due to their weak nature.
New weak keys might be discovered, so this document does not in any way contain all possible weak keys for these ciphers.
Please check with other sources of cryptography such as [MOV] and [Schneier] for further weak keys.
No known weak keys when used with 16 rounds.
IDEA has been found to have weak keys.
Please check with [MOV] and [Schneier] for more information.
Weak keys for Blowfish have been discovered.
Weak keys are keys that produce the identical entries in a given S box.
Unfortunately, there is no way to test for weak keys before the S  box values are generated.
However, the chances of randomly generating such a key are small.
DES has 64 known weak keys, including so called semi weak keys and possibly weak keys [Schneier95, pp 280 282].
The likelihood of picking one at random is negligible.
For DES EDE3, there is no known need to reject weak or complementation keys.
Any weakness is obviated by the use of multiple keys.
However, if the first two or last two independent 64 bit keys are equal (k1   k2 or k2   k3), then the 3DES operation is simply the same as DES.
Implementers MUST reject keys that exhibit this property.
2.4 Block Size and Padding All of the algorithms described in this document use a block size of eight octets (64 bits).
Padding is used to align the payload type and pad length octets as specified in [Kent98].
Padding must be sufficient to align the data to be encrypted to an eight octet (64 bit) boundary.
This variable determines how many times a block is encrypted.
While this variable MAY be negotiated, a default value MUST always exist when it is not negotiated.
The CAST design procedure was originally developed by Carlisle Adams and Stafford Tavares at Queen's University, Kingston, Ontario, Canada.
Subsequent enhancements have been made over the years by Carlisle Adams and Michael Wiener of Entrust Technologies.
CAST 128 is the result of applying the CAST Design Procedure as outlined in [Adams97].
The RC5 encryption algorithm was developed by Ron Rivest for RSA Data Security Inc. in order to address the need for a high  performance software and hardware ciphering alternative to DES.
It is patented (pat.no. 5,724,428).
A description of RC5 may be found in [MOV] and [Schneier].
Xuejia Lai and James Massey developed the IDEA (International Data Encryption Algorithm) algorithm.
The algorithm is described in detail in [Lai], [Schneier] and [MOV].
The IDEA algorithm is patented in Europe and in the United States with patent application pending in Japan.
Licenses are required for commercial uses of IDEA.
For patent and licensing information, contact: Ascom Systec AG, Dept. CMVV Gewerbepark, CH 5506 Magenwil,
59 83 Fax:  41 64 56 59 90
Bruce Schneier of Counterpane Systems developed the Blowfish block cipher algorithm.
The algorithm is described in detail in [Schneier93], [Schneier95] and [Schneier].
This DES variant, colloquially known as "Triple DES" or as DES EDE3, processes each block three times, each time with a different key.
This technique of using more than one DES operation was proposed in [Tuchman79].
The DES EDE3 CBC algorithm is a simple variant of the DES CBC algorithm [FIPS 46].
The "outer" chaining technique is used.
In DES EDE3 CBC, an Initialization Vector (IV) is XOR'd with the first 64 bit (8 byte) plaintext block (P1).
The keyed DES function is iterated three times, an encryption (Ek1) followed by a decryption (Dk2) followed by an encryption (Ek3), and generates the ciphertext (C1) for the block.
Each iteration uses an independent key: k1, k2 and k3.
For successive blocks, the previous ciphertext block is XOR'd with the current plaintext (Pi).
The keyed DES EDE3 encryption function generates the ciphertext (Ci) for that block.
To decrypt, the order of the functions is reversed: decrypt with k3, encrypt with k2, decrypt with k1, and XOR the previous ciphertext block.
Note that when all three keys (k1, k2 and k3) are the same, DES  EDE3 CBC is equivalent to DES CBC.
This property allows the DES EDE3 hardware implementations to operate in DES mode without modification.
For more explanation and implementation information for Triple DES, see [Schneier95].
2.7 Performance For a comparison table of the estimated speed of any of these and other cipher algorithms, please see [Schneier97] or for an up to date performance comparison, please see [Bosseleaers].
The ESP payload is made up of the IV followed by raw cipher text.
The IV field MUST be same size as the block size of the cipher algorithm being used.
The IV MUST be chosen at random.
Common practice is to use random data for the first IV and the last block of encrypted data from an encryption process as the IV for the next encryption process.
Including the IV in each datagram ensures that decryption of each received datagram can be performed, even when some datagrams are dropped, or datagrams are re ordered in transit.
To avoid ECB encryption of very similar plaintext blocks in different packets, implementations MUST NOT use a counter or other low Hamming distance source for IVs.
Currently, there are no known issues regarding interactions between these algorithms and other aspects of ESP, such as use of certain authentication schemes.
The minimum number of bits sent from the key exchange protocol to this ESP algorithm must be greater or equal to the key size.
The cipher's encryption and decryption key is taken from the first <x> bits of the keying material, where <x> represents the required key size.
Security Considerations Implementations are encouraged to use the largest key sizes they can when taking into account performance considerations for their particular hardware and software configuration.
Note that encryption necessarily impacts both sides of a secure channel, so such consideration must take into account not only the client side, but the server as well.
For information on the case for using random values please see [Bell97].
For further security considerations, the reader is encouraged to read the documents that describe the actual cipher algorithms.
Editors' Addresses Roy Pereira TimeStep Corporation Phone:  1
(613) 599 3610 x 4808 EMail:
Rob Adams Cisco Systems Inc. Phone:  1 (408)
Robert W. Baldwin RSA Data Security,
595 8782 EMail: baldwin@rsa.com or baldwin@lcs.mit.edu
Greg Carter Entrust Technologies Phone:  1 (613
Rodney Thayer Sable Technology Corporation Phone:  1 (617)
The IPSec working group can be contacted via the IPSec working group's mailing list (ipsec@tis.com) or through its chairs:
Robert Moskowitz International Computer Security Association EMail: rgm@icsa.net Theodore
Y. Ts'o Massachusetts Institute of Technology EMail: tytso@MIT.EDU
