- title: __initial_text__
  contents:
  - '            Common DNS Operational and Configuration Errors

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes errors often found in both the operation of\n\
    \   Domain Name System (DNS) servers, and in the data that these DNS\n   servers\
    \ contain.  This memo tries to summarize current Internet\n   requirements as\
    \ well as common practice in the operation and\n   configuration of the DNS. \
    \ This memo also tries to summarize or\n   expand upon issues raised in [RFC 1537].\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Running a nameserver is not a trivial task.  There are many\
    \ things\n   that can go wrong, and many decisions have to be made about what\
    \ data\n   to put in the DNS and how to set up servers.  This memo attempts to\n\
    \   address many of the common mistakes and pitfalls that are made in DNS\n  \
    \ data as well as in the operation of nameservers.  Discussions are\n   also made\
    \ regarding some other relevant issues such as server or\n   resolver bugs, and\
    \ a few political issues with respect to the\n   operation of DNS on the Internet.\n"
- title: 2. DNS Data
  contents:
  - "2. DNS Data\n   This section discusses problems people typically have with the\
    \ DNS\n   data in their nameserver, as found in the zone data files that the\n\
    \   nameserver loads into memory.\n"
- title: 2.1 Inconsistent, Missing, or Bad Data
  contents:
  - "2.1 Inconsistent, Missing, or Bad Data\n   Every Internet-reachable host should\
    \ have a name.  The consequences\n   of this are becoming more and more obvious.\
    \  Many services available\n   on the Internet will not talk to you if you aren't\
    \ correctly\n   registered in the DNS.\n   Make sure your PTR and A records match.\
    \  For every IP address, there\n   should be a matching PTR record in the in-addr.arpa\
    \ domain.  If a\n   host is multi-homed, (more than one IP address) make sure\
    \ that all IP\n   addresses have a corresponding PTR record (not just the first\
    \ one).\n   Failure to have matching PTR and A records can cause loss of Internet\n\
    \   services similar to not being registered in the DNS at all.  Also,\n   PTR\
    \ records must point back to a valid A record, not a alias defined\n   by a CNAME.\
    \  It is highly recommended that you use some software\n   which automates this\
    \ checking, or generate your DNS data from a\n   database which automatically\
    \ creates consistent data.\n   DNS domain names consist of \"labels\" separated\
    \ by single dots.  The\n   DNS is very liberal in its rules for the allowable\
    \ characters in a\n   domain name.  However, if a domain name is used to name\
    \ a host, it\n   should follow rules restricting host names.  Further if a name\
    \ is\n   used for mail, it must follow the naming rules for names in mail\n  \
    \ addresses.\n   Allowable characters in a label for a host name are only ASCII\n\
    \   letters, digits, and the `-' character.  Labels may not be all\n   numbers,\
    \ but may have a leading digit  (e.g., 3com.com).  Labels must\n   end and begin\
    \ only with a letter or digit.  See [RFC 1035] and [RFC\n   1123].  (Labels were\
    \ initially restricted in [RFC 1035] to start with\n   a letter, and some older\
    \ hosts still reportedly have problems with\n   the relaxation in [RFC 1123].)\
    \  Note there are some Internet\n   hostnames which violate this rule (411.org,\
    \ 1776.com).  The presence\n   of underscores in a label is allowed in [RFC 1033],\
    \ except [RFC 1033]\n   is informational only and was not defining a standard.\
    \  There is at\n   least one popular TCP/IP implementation which currently refuses\
    \ to\n   talk to hosts named with underscores in them.  It must be noted that\n\
    \   the language in [1035] is such that these rules are voluntary -- they\n  \
    \ are there for those who wish to minimize problems.  Note that the\n   rules\
    \ for Internet host names also apply to hosts and addresses used\n   in SMTP (See\
    \ RFC 821).\n   If a domain name is to be used for mail (not involving SMTP),\
    \ it must\n   follow the rules for mail in [RFC 822], which is actually more\n\
    \   liberal than the above rules.  Labels for mail can be any ASCII\n   character\
    \ except \"specials\", control characters, and whitespace\n   characters.  \"\
    Specials\" are specific symbols used in the parsing of\n   addresses.  They are\
    \ the characters \"()<>@,;:\\\".[]\".  (The \"!\"\n   character wasn't in [RFC\
    \ 822], however it also shouldn't be used due\n   to the conflict with UUCP mail\
    \ as defined in RFC 976)  However, since\n   today almost all names which are\
    \ used for mail on the Internet are\n   also names used for hostnames, one rarely\
    \ sees addresses using these\n   relaxed standard, but mail software should be\
    \ made liberal and robust\n   enough to accept them.\n   You should also be careful\
    \ to not have addresses which are valid\n   alternate syntaxes to the inet_ntoa()\
    \ library call.  For example 0xe\n   is a valid name, but if you were to type\
    \ \"telnet 0xe\", it would try\n   to connect to IP address 0.0.0.14.  It is also\
    \ rumored that there\n   exists some broken inet_ntoa() routines that treat an\
    \ address like\n   x400 as an IP address.\n   Certain operating systems have limitations\
    \ on the length of their own\n   hostname.  While not strictly of issue to the\
    \ DNS, you should be\n   aware of your operating system's length limits before\
    \ choosing the\n   name of a host.\n   Remember that many resource records (abbreviated\
    \ RR) take on more\n   than one argument.  HINFO requires two arguments, as does\
    \ RP.  If you\n   don't supply enough arguments, servers sometime return garbage\
    \ for\n   the missing fields.  If you need to include whitespace within any\n\
    \   data, you must put the string in quotes.\n"
- title: 2.2 SOA records
  contents:
  - "2.2 SOA records\n   In the SOA record of every zone, remember to fill in the\
    \ e-mail\n   address that will get to the person who maintains the DNS at your\n\
    \   site (commonly referred to as \"hostmaster\").  The `@' in the e-mail\n  \
    \ must be replaced by a `.' first.  Do not try to put an `@' sign in\n   this\
    \ address.  If the local part of the address already contains a\n   `.' (e.g.,\
    \ John.Smith@widget.xx), then you need to quote the `.' by\n   preceding it with\
    \ `\\' character.  (e.g., to become\n   John\\.Smith.widget.xx) Alternately (and\
    \ preferred), you can just use\n   the generic name `hostmaster', and use a mail\
    \ alias to redirect it to\n   the appropriate persons.  There exists software\
    \ which uses this field\n   to automatically generate the e-mail address for the\
    \ zone contact.\n   This software will break if this field is improperly formatted.\
    \  It\n   is imperative that this address get to one or more real persons,\n \
    \  because it is often used for everything from reporting bad DNS data\n   to\
    \ reporting security incidents.\n   Even though some BIND versions allow you to\
    \ use a decimal in a serial\n   number, don't.  A decimal serial number is converted\
    \ to an unsigned\n   32-bit integer internally anyway.  The formula for a n.m\
    \ serial\n   number is n*10^(3+int(0.9+log10(m))) + m which translates to\n  \
    \ something rather unexpected.  For example it's routinely possible\n   with a\
    \ decimal serial number (perhaps automatically generated by\n   SCCS) to be incremented\
    \ such that it is numerically larger, but after\n   the above conversion yield\
    \ a serial number which is LOWER than\n   before.  Decimal serial numbers have\
    \ been officially deprecated in\n   recent BIND versions.  The recommended syntax\
    \ is YYYYMMDDnn\n   (YYYY=year, MM=month, DD=day, nn=revision number.  This won't\n\
    \   overflow until the year 4294.\n   Choose logical values for the timer values\
    \ in the SOA record (note\n   values below must be expressed as seconds in the\
    \ zone data):\n      Refresh: How often a secondary will poll the primary server\
    \ to see\n          if the serial number for the zone has increased (so it knows\n\
    \          to request a new copy of the data for the zone).  Set this to\n   \
    \       how long your secondaries can comfortably contain out-of-date\n      \
    \    data.  You can keep it short (20 mins to 2 hours) if you\n          aren't\
    \ worried about a small increase in bandwidth used, or\n          longer (2-12\
    \ hours) if your Internet connection is slow or is\n          started on demand.\
    \  Recent BIND versions (4.9.3) have optional\n          code to automatically\
    \ notify secondaries that data has\n          changed, allowing you to set this\
    \ TTL to a long value (one\n          day, or more).\n      Retry: If a secondary\
    \ was unable to contact the primary at the\n          last refresh, wait the retry\
    \ value before trying again.  This\n          value isn't as important as others,\
    \ unless the secondary is on\n          a distant network from the primary or\
    \ the primary is more\n          prone to outages.  It's typically some fraction\
    \ of the refresh\n          interval.\n      Expire: How long a secondary will\
    \ still treat its copy of the zone\n          data as valid if it can't contact\
    \ the primary.  This value\n          should be greater than how long a major\
    \ outage would typically\n          last, and must be greater than the minimum\
    \ and retry\n          intervals, to avoid having a secondary expire the data\
    \ before\n          it gets a chance to get a new copy.  After a zone is expired\
    \ a\n          secondary will still continue to try to contact the primary,\n\
    \          but it will no longer provide nameservice for the zone.  2-4\n    \
    \      weeks are suggested values.\n      Minimum: The default TTL (time-to-live)\
    \ for resource records --\n          how long data will remain in other nameservers'\
    \ cache.  ([RFC\n          1035] defines this to be the minimum value, but servers\
    \ seem\n          to always implement this as the default value)  This is by far\n\
    \          the most important timer.  Set this as large as is comfortable\n  \
    \        given how often you update your nameserver.  If you plan to\n       \
    \   make major changes, it's a good idea to turn this value down\n          temporarily\
    \ beforehand.  Then wait the previous minimum value,\n          make your changes,\
    \ verify their correctness, and turn this\n          value back up.  1-5 days\
    \ are typical values.  Remember this\n          value can be overridden on individual\
    \ resource records.\n   As you can see, the typical values above for the timers\
    \ vary widely.\n   Popular documentation like [RFC 1033] recommended a day for\
    \ the\n   minimum TTL, which is now considered too low except for zones with\n\
    \   data that vary regularly.  Once a DNS stabilizes, values on the order\n  \
    \ of 3 or more days are recommended.  It is also recommended that you\n   individually\
    \ override the TTL on certain RRs which are often\n   referenced and don't often\
    \ change to have very large values (1-2\n   weeks).  Good examples of this are\
    \ the MX, A, and PTR records of your\n   mail host(s), the NS records of your\
    \ zone, and the A records of your\n   nameservers.\n"
- title: 2.3 Glue A Records
  contents:
  - "2.3 Glue A Records\n   Glue records are A records that are associated with NS\
    \ records to\n   provide \"bootstrapping\" information to the nameserver.  For\
    \ example:\n           podunk.xx.      in      ns      ns1.podunk.xx.\n      \
    \                     in      ns      ns2.podunk.xx.\n           ns1.podunk.xx.\
    \  in      a       1.2.3.4\n           ns2.podunk.xx.  in      a       1.2.3.5\n\
    \   Here, the A records are referred to as \"Glue records\".\n   Glue records\
    \ are required only in forward zone files for nameservers\n   that are located\
    \ in the subdomain of the current zone that is being\n   delegated.  You shouldn't\
    \ have any A records in an in-addr.arpa zone\n   file (unless you're using RFC\
    \ 1101-style encoding of subnet masks).\n   If your nameserver is multi-homed\
    \ (has more than one IP address), you\n   must list all of its addresses in the\
    \ glue to avoid cache\n   inconsistency due to differing TTL values, causing some\
    \ lookups to\n   not find all addresses for your nameserver.\n   Some people get\
    \ in the bad habit of putting in a glue record whenever\n   they add an NS record\
    \ \"just to make sure\".  Having duplicate glue\n   records in your zone files\
    \ just makes it harder when a nameserver\n   moves to a new IP address, or is\
    \ removed. You'll spend hours trying\n   to figure out why random people still\
    \ see the old IP address for some\n   host, because someone forgot to change or\
    \ remove a glue record in\n   some other file.  Newer BIND versions will ignore\
    \ these extra glue\n   records in local zone files.\n   Older BIND versions (4.8.3\
    \ and previous) have a problem where it\n   inserts these extra glue records in\
    \ the zone transfer data to\n   secondaries.  If one of these glues is wrong,\
    \ the error can be\n   propagated to other nameservers.  If two nameservers are\
    \ secondaries\n   for other zones of each other, it's possible for one to continually\n\
    \   pass old glue records back to the other.  The only way to get rid of\n   the\
    \ old data is to kill both of them, remove the saved backup files,\n   and restart\
    \ them.  Combined with that those same versions also tend\n   to become infected\
    \ more easily with bogus data found in other non-\n   secondary nameservers (like\
    \ the root zone data).\n"
- title: 2.4 CNAME records
  contents:
  - "2.4 CNAME records\n   A CNAME record is not allowed to coexist with any other\
    \ data.  In\n   other words, if suzy.podunk.xx is an alias for sue.podunk.xx,\
    \ you\n   can't also have an MX record for suzy.podunk.edu, or an A record, or\n\
    \   even a TXT record.  Especially do not try to combine CNAMEs and NS\n   records\
    \ like this!:\n           podunk.xx.      IN      NS      ns1\n              \
    \             IN      NS      ns2\n                           IN      CNAME  \
    \ mary\n           mary            IN      A       1.2.3.4\n   This is often attempted\
    \ by inexperienced administrators as an obvious\n   way to allow your domain name\
    \ to also be a host.  However, DNS\n   servers like BIND will see the CNAME and\
    \ refuse to add any other\n   resources for that name.  Since no other records\
    \ are allowed to\n   coexist with a CNAME, the NS entries are ignored.  Therefore\
    \ all the\n   hosts in the podunk.xx domain are ignored as well!\n   If you want\
    \ to have your domain also be a host, do the following:\n           podunk.xx.\
    \      IN      NS      ns1\n                           IN      NS      ns2\n \
    \                          IN      A       1.2.3.4\n           mary          \
    \  IN      A       1.2.3.4\n   Don't go overboard with CNAMEs.  Use them when\
    \ renaming hosts, but\n   plan to get rid of them (and inform your users).  However\
    \ CNAMEs are\n   useful (and encouraged) for generalized names for servers --\
    \ `ftp'\n   for your ftp server, `www' for your Web server, `gopher' for your\n\
    \   Gopher server, `news' for your Usenet news server, etc.\n   Don't forget to\
    \ delete the CNAMEs associated with a host if you\n   delete the host it is an\
    \ alias for.  Such \"stale CNAMEs\" are a waste\n   of resources.\n   Don't use\
    \ CNAMEs in combination with RRs which point to other names\n   like MX, CNAME,\
    \ PTR and NS.  (PTR is an exception if you want to\n   implement classless in-addr\
    \ delegation.)  For example, this is\n   strongly discouraged:\n           podunk.xx.\
    \      IN      MX      mailhost\n           mailhost        IN      CNAME   mary\n\
    \           mary            IN      A       1.2.3.4\n   [RFC 1034] in section\
    \ 3.6.2 says this should not be done, and [RFC\n   974] explicitly states that\
    \ MX records shall not point to an alias\n   defined by a CNAME.  This results\
    \ in unnecessary indirection in\n   accessing the data, and DNS resolvers and\
    \ servers need to work more\n   to get the answer.  If you really want to do this,\
    \ you can accomplish\n   the same thing by using a preprocessor such as m4 on\
    \ your host files.\n   Also, having chained records such as CNAMEs pointing to\
    \ CNAMEs may\n   make administration issues easier, but is known to tickle bugs\
    \ in\n   some resolvers that fail to check loops correctly.  As a result some\n\
    \   hosts may not be able to resolve such names.\n   Having NS records pointing\
    \ to a CNAME is bad and may conflict badly\n   with current BIND servers.  In\
    \ fact, current BIND implementations\n   will ignore such records, possibly leading\
    \ to a lame delegation.\n   There is a certain amount of security checking done\
    \ in BIND to\n   prevent spoofing DNS NS records.  Also, older BIND servers reportedly\n\
    \   will get caught in an infinite query loop trying to figure out the\n   address\
    \ for the aliased nameserver, causing a continuous stream of\n   DNS requests\
    \ to be sent.\n"
- title: 2.5 MX records
  contents:
  - "2.5 MX records\n   It is a good idea to give every host an MX record, even if\
    \ it points\n   to itself!  Some mailers will cache MX records, but will always\
    \ need\n   to check for an MX before sending mail.  If a site does not have an\n\
    \   MX, then every piece of mail may result in one more resolver query,\n   since\
    \ the answer to the MX query often also contains the IP addresses\n   of the MX\
    \ hosts.  Internet SMTP mailers are required by [RFC 1123] to\n   support the\
    \ MX mechanism.\n   Put MX records even on hosts that aren't intended to send\
    \ or receive\n   e-mail.  If there is a security problem involving one of these\
    \ hosts,\n   some people will mistakenly send mail to postmaster or root at the\n\
    \   site without checking first to see if it is a \"real\" host or just a\n  \
    \ terminal or personal computer that's not set up to accept e-mail.  If\n   you\
    \ give it an MX record, then the e-mail can be redirected to a real\n   person.\
    \  Otherwise mail can just sit in a queue for hours or days\n   until the mailer\
    \ gives up trying to send it.\n   Don't forget that whenever you add an MX record,\
    \ you need to inform\n   the target mailer if it is to treat the first host as\
    \ \"local\".  (The\n   \"Cw\" flag in sendmail, for example)\n   If you add an\
    \ MX record which points to an external host (e.g., for\n   the purposes of backup\
    \ mail routing) be sure to ask permission from\n   that site first.  Otherwise\
    \ that site could get rather upset and take\n   action (like throw your mail away,\
    \ or appeal to higher authorities\n   like your parent DNS administrator or network\
    \ provider.)\n"
- title: 2.6 Other Resource Records
  contents:
  - '2.6 Other Resource Records

    '
- title: 2.6.1 WKS
  contents:
  - "2.6.1 WKS\n   WKS records are deprecated in [RFC 1123].  They serve no known\
    \ useful\n   function, except internally among LISP machines.  Don't use them.\n"
- title: 2.6.2 HINFO
  contents:
  - "2.6.2 HINFO\n   On the issue HINFO records, some will argue that these is a security\n\
    \   problem (by broadcasting what vendor hardware and operating system\n   you\
    \ so people can run systematic attacks on known vendor security\n   holes).  If\
    \ you do use them, you should keep up to date with known\n   vendor security problems.\
    \  However, they serve a useful purpose.\n   Don't forget that HINFO requires\
    \ two arguments, the hardware type,\n   and the operating system.\n   HINFO is\
    \ sometimes abused to provide other information.  The record\n   is meant to provide\
    \ specific information about the machine itself.\n   If you need to express other\
    \ information about the host in the DNS,\n   use TXT.\n"
- title: 2.6.3 TXT
  contents:
  - "2.6.3 TXT\n   TXT records have no specific definition.  You can put most anything\n\
    \   in them.  Some use it for a generic description of the host, some put\n  \
    \ specific information like its location, primary user, or maybe even a\n   phone\
    \ number.\n"
- title: 2.6.4 RP
  contents:
  - "2.6.4 RP\n   RP records are relatively new.  They are used to specify an e-mail\n\
    \   address (see first paragraph of section 2.2)  of the \"Responsible\n   Person\"\
    \ of the host, and the name of a TXT record where you can get\n   more information.\
    \  See [RFC 1183].\n"
- title: 2.7 Wildcard records
  contents:
  - "2.7 Wildcard records\n   Wildcard MXs are useful mostly for non IP-connected\
    \ sites.  A common\n   mistake is thinking that a wildcard MX for a zone will\
    \ apply to all\n   hosts in the zone.  A wildcard MX will apply only to names\
    \ in the\n   zone which aren't listed in the DNS at all.  e.g.,\n           podunk.xx.\
    \      IN      NS      ns1\n                           IN      NS      ns2\n \
    \          mary            IN      A       1.2.3.4\n           *.podunk.xx.  \
    \  IN      MX      5 sue\n   Mail for mary.podunk.xx will be sent to itself for\
    \ delivery.  Only\n   mail for jane.podunk.xx or any hosts you don't see above\
    \ will be sent\n   to the MX.  For most Internet sites, wildcard MX records are\
    \ not\n   useful.  You need to put explicit MX records on every host.\n   Wildcard\
    \ MXs can be bad, because they make some operations succeed\n   when they should\
    \ fail instead.  Consider the case where someone in\n   the domain \"widget.com\"\
    \ tries to send mail to \"joe@larry\".  If the\n   host \"larry\" doesn't actually\
    \ exist, the mail should in fact bounce\n   immediately.  But because of domain\
    \ searching the address gets\n   resolved to \"larry.widget.com\", and because\
    \ of the wildcard MX this\n   is a valid address according to DNS.  Or perhaps\
    \ someone simply made\n   a typo in the hostname portion of the address.  The\
    \ mail message then\n   gets routed to the mail host, which then rejects the mail\
    \ with\n   strange error messages like \"I refuse to talk to myself\" or \"Local\n\
    \   configuration error\".\n   Wildcard MX records are good for when you have\
    \ a large number of\n   hosts which are not directly Internet-connected (for example,\
    \ behind\n   a firewall) and for administrative or political reasons it is too\n\
    \   difficult to have individual MX records for every host, or to force\n   all\
    \ e-mail addresses to be \"hidden\" behind one or more domain names.\n   In that\
    \ case, you must divide your DNS into two parts, an internal\n   DNS, and an external\
    \ DNS.  The external DNS will have only a few\n   hosts and explicit MX records,\
    \ and one or more wildcard MXs for each\n   internal domain.  Internally the DNS\
    \ will be complete, with all\n   explicit MX records and no wildcards.\n   Wildcard\
    \ As and CNAMEs are possible too, and are really confusing to\n   users, and a\
    \ potential nightmare if used without thinking first.  It\n   could result (due\
    \ again to domain searching) in any telnet/ftp\n   attempts from within the domain\
    \ to unknown hosts to be directed to\n   one address.  One such wildcard CNAME\
    \ (in *.edu.com) caused\n   Internet-wide loss of services and potential security\
    \ nightmares due\n   to unexpected interactions with domain searching.  It resulted\
    \ in\n   swift fixes, and even an RFC ([RFC 1535]) documenting the problem.\n"
- title: 2.8 Authority and Delegation Errors (NS records)
  contents:
  - "2.8 Authority and Delegation Errors (NS records)\n   You are required to have\
    \ at least two nameservers for every domain,\n   though more is preferred.  Have\
    \ secondaries outside your network.  If\n   the secondary isn't under your control,\
    \ periodically check up on them\n   and make sure they're getting current zone\
    \ data from you.  Queries to\n   their nameserver about your hosts should always\
    \ result in an\n   \"authoritative\" response.  If not, this is called a \"lame\n\
    \   delegation\".  A lame delegations exists when a nameserver is\n   delegated\
    \ responsibility for providing nameservice for a zone (via NS\n   records) but\
    \ is not performing nameservice for that zone (usually\n   because it is not set\
    \ up as a primary or secondary for the zone).\n   The \"classic\" lame delegation\
    \ can be illustrated in this example:\n           podunk.xx.      IN      NS \
    \     ns1.podunk.xx.\n                           IN      NS      ns0.widget.com.\n\
    \   \"podunk.xx\" is a new domain which has recently been created, and\n   \"\
    ns1.podunk.xx\" has been set up to perform nameservice for the zone.\n   They\
    \ haven't quite finished everything yet and haven't made sure that\n   the hostmaster\
    \ at \"ns0.widget.com\" has set up to be a proper\n   secondary, and thus has\
    \ no information about the podunk.xx domain,\n   even though the DNS says it is\
    \ supposed to.  Various things can\n   happen depending on which nameserver is\
    \ used.  At best, extra DNS\n   traffic will result from a lame delegation.  At\
    \ worst, you can get\n   unresolved hosts and bounced e-mail.\n   Also, sometimes\
    \ a nameserver is moved to another host or removed from\n   the list of secondaries.\
    \  Unfortunately due to caching of NS records,\n   many sites will still think\
    \ that a host is a secondary after that\n   host has stopped providing nameservice.\
    \  In order to prevent lame\n   delegations while the cache is being aged, continue\
    \ to provide\n   nameservice on the old nameserver for the length of the maximum\
    \ of\n   the minimum plus refresh times for the zone and the parent zone.\n  \
    \ (See section 2.2)\n   Whenever a primary or secondary is removed or changed,\
    \ it takes a\n   fair amount of human coordination among the parties involved.\
    \  (The\n   site itself, it's parent, and the site hosting the secondary)  When\
    \ a\n   primary moves, make sure all secondaries have their named.boot files\n\
    \   updated and their servers reloaded.  When a secondary moves, make\n   sure\
    \ the address records at both the primary and parent level are\n   changed.\n\
    \   It's also been reported that some distant sites like to pick popular\n   nameservers\
    \ like \"ns.uu.net\" and just add it to their list of NS\n   records in hopes\
    \ that they will magically perform additional\n   nameservice for them.  This\
    \ is an even worse form of lame delegation,\n   since this adds traffic to an\
    \ already busy nameserver.  Please\n   contact the hostmasters of sites which\
    \ have lame delegations.\n   Various tools can be used to detect or actively find\
    \ lame\n   delegations.  See the list of contributed software in the BIND\n  \
    \ distribution.\n   Make sure your parent domain has the same NS records for your\
    \ zone as\n   you do.  (Don't forget your in-addr.arpa zones too!).  Do not list\n\
    \   too many (7 is the recommended maximum), as this just makes things\n   harder\
    \ to manage and is only really necessary for very popular top-\n   level or root\
    \ zones.  You also run the risk of overflowing the 512-\n   byte limit of a UDP\
    \ packet in the response to an NS query.  If this\n   happens, resolvers will\
    \ \"fall back\" to using TCP requests, resulting\n   in increased load on your\
    \ nameserver.\n   It's important when picking geographic locations for secondary\n\
    \   nameservers to minimize latency as well as increase reliability.\n   Keep\
    \ in mind network topologies.  For example if your site is on the\n   other end\
    \ of a slow local or international link, consider a secondary\n   on the other\
    \ side of the link to decrease average latency.  Contact\n   your Internet service\
    \ provider or parent domain contact for more\n   information about secondaries\
    \ which may be available to you.\n"
- title: 3. BIND operation
  contents:
  - "3. BIND operation\n   This section discusses common problems people have in the\
    \ actual\n   operation of the nameserver (specifically, BIND).  Not only must\
    \ the\n   data be correct as explained above, but the nameserver must be\n   operated\
    \ correctly for the data to be made available.\n"
- title: 3.1 Serial numbers
  contents:
  - "3.1 Serial numbers\n   Each zone has a serial number associated with it.  Its\
    \ use is for\n   keeping track of who has the most current data.  If and only\
    \ if the\n   primary's serial number of the zone is greater will the secondary\
    \ ask\n   the primary for a copy of the new zone data (see special case below).\n\
    \   Don't forget to change the serial number when you change data!  If\n   you\
    \ don't, your secondaries will not transfer the new zone\n   information.  Automating\
    \ the incrementing of the serial number with\n   software is also a good idea.\n\
    \   If you make a mistake and increment the serial number too high, and\n   you\
    \ want to reset the serial number to a lower value, use the\n   following procedure:\n\
    \      Take the `incorrect' serial number and add 2147483647 to it.  If\n    \
    \  the number exceeds 4294967296, subtract 4294967296.  Load the\n      resulting\
    \ number.  Then wait 2 refresh periods to allow the zone\n      to propagate to\
    \ all servers.\n      Repeat above until the resulting serial number is less than\
    \ the\n      target serial number.\n      Up the serial number to the target serial\
    \ number.\n   This procedure won't work if one of your secondaries is running\
    \ an\n   old version of BIND (4.8.3 or earlier).  In this case you'll have to\n\
    \   contact the hostmaster for that secondary and have them kill the\n   secondary\
    \ servers, remove the saved backup file, and restart the\n   server.  Be careful\
    \ when editing the serial number -- DNS admins\n   don't like to kill and restart\
    \ nameservers because you lose all that\n   cached data.\n"
- title: 3.2 Zone file style guide
  contents:
  - "3.2 Zone file style guide\n   Here are some useful tips in structuring your zone\
    \ files.  Following\n   these will help you spot mistakes, and avoid making more.\n\
    \   Be consistent with the style of entries in your DNS files. If your\n   $ORIGIN\
    \ is podunk.xx., try not to write entries like:\n           mary            IN\
    \      A       1.2.3.1\n           sue.podunk.xx.  IN      A       1.2.3.2\n \
    \  or:\n           bobbi           IN      A       1.2.3.2\n                 \
    \          IN      MX      mary.podunk.xx.\n   Either use all FQDNs (Fully Qualified\
    \ Domain Names) everywhere or\n   used unqualified names everywhere.  Or have\
    \ FQDNs all on the right-\n   hand side but unqualified names on the left.  Above\
    \ all, be\n   consistent.\n   Use tabs between fields, and try to keep columns\
    \ lined up.  It makes\n   it easier to spot missing fields (note some fields such\
    \ as \"IN\" are\n   inherited from the previous record and may be left out in\
    \ certain\n   circumstances.)\n   Remember you don't need to repeat the name of\
    \ the host when you are\n   defining multiple records for one host.  Be sure also\
    \ to keep all\n   records associated with a host together in the file.  It will\
    \ make\n   things more straightforward when it comes time to remove or rename\
    \ a\n   host.\n   Always remember your $ORIGIN.  If you don't put a `.' at the\
    \ end of\n   an FQDN, it's not recognized as an FQDN.  If it is not an FQDN, then\n\
    \   the nameserver will append $ORIGIN to the name.  Double check, triple\n  \
    \ check, those trailing dots, especially in in-addr.arpa zone files,\n   where\
    \ they are needed the most.\n   Be careful with the syntax of the SOA and WKS\
    \ records (the records\n   which use parentheses).  BIND is not very flexible\
    \ in how it parses\n   these records.  See the documentation for BIND.\n"
- title: 3.3 Verifying data
  contents:
  - "3.3 Verifying data\n   Verify the data you just entered or changed by querying\
    \ the resolver\n   with dig (or your favorite DNS tool, many are included in the\
    \ BIND\n   distribution) after a change.  A few seconds spent double checking\n\
    \   can save hours of trouble, lost mail, and general headaches.  Also be\n  \
    \ sure to check syslog output when you reload the nameserver.  If you\n   have\
    \ grievous errors in your DNS data or boot file, named will report\n   it via\
    \ syslog.\n   It is also highly recommended that you automate this checking, either\n\
    \   with software which runs sanity checks on the data files before they\n   are\
    \ loaded into the nameserver, or with software which checks the\n   data already\
    \ loaded in the nameserver.  Some contributed software to\n   do this is included\
    \ in the BIND distribution.\n"
- title: 4. Miscellaneous Topics
  contents:
  - '4. Miscellaneous Topics

    '
- title: 4.1 Boot file setup
  contents:
  - "4.1 Boot file setup\n   Certain zones should always be present in nameserver\
    \ configurations:\n           primary         localhost               localhost\n\
    \           primary         0.0.127.in-addr.arpa    127.0\n           primary\
    \         255.in-addr.arpa        255\n           primary         0.in-addr.arpa\
    \          0\n   These are set up to either provide nameservice for \"special\"\
    \n   addresses, or to help eliminate accidental queries for broadcast or\n   local\
    \ address to be sent off to the root nameservers.  All of these\n   files will\
    \ contain NS and SOA records just like the other zone files\n   you maintain,\
    \ the exception being that you can probably make the SOA\n   timers very long,\
    \ since this data will never change.\n   The \"localhost\" address is a \"special\"\
    \ address which always refers to\n   the local host.  It should contain the following\
    \ line:\n           localhost.      IN      A       127.0.0.1\n   The \"127.0\"\
    \ file should contain the line:\n           1    PTR     localhost.\n   There\
    \ has been some extensive discussion about whether or not to\n   append the local\
    \ domain to it.  The conclusion is that \"localhost.\"\n   would be the best solution.\
    \  The reasons given include:\n      \"localhost\" by itself is used and expected\
    \ to work in some\n      systems.\n      Translating 127.0.0.1 into \"localhost.dom.ain\"\
    \ can cause some\n      software to connect back to the loopback interface when\
    \ it didn't\n      want to because \"localhost\" is not equal to \"localhost.dom.ain\"\
    .\n   The \"255\" and \"0\" files should not contain any additional data beyond\n\
    \   the NS and SOA records.\n   Note that future BIND versions may include all\
    \ or some of this data\n   automatically without additional configuration.\n"
- title: 4.2 Other Resolver and Server bugs
  contents:
  - "4.2 Other Resolver and Server bugs\n   Very old versions of the DNS resolver\
    \ have a bug that cause queries\n   for names that look like IP addresses to go\
    \ out, because the user\n   supplied an IP address and the software didn't realize\
    \ that it didn't\n   need to be resolved.  This has been fixed but occasionally\
    \ it still\n   pops up.  It's important because this bug means that these queries\n\
    \   will be sent directly to the root nameservers, adding to an already\n   heavy\
    \ DNS load.\n   While running a secondary nameserver off another secondary nameserver\n\
    \   is possible, it is not recommended unless necessary due to network\n   topologies.\
    \  There are known cases where it has led to problems like\n   bogus TTL values.\
    \  While this may be caused by older or flawed DNS\n   implementations, you should\
    \ not chain secondaries off of one another\n   since this builds up additional\
    \ reliability dependencies as well as\n   adds additional delays in updates of\
    \ new zone data.\n"
- title: 4.3 Server issues
  contents:
  - "4.3 Server issues\n   DNS operates primarily via UDP (User Datagram Protocol)\
    \ messages.\n   Some UNIX operating systems, in an effort to save CPU cycles,\
    \ run\n   with UDP checksums turned off.  The relative merits of this have long\n\
    \   been debated.  However, with the increase in CPU speeds, the\n   performance\
    \ considerations become less and less important.  It is\n   strongly encouraged\
    \ that you turn on UDP checksumming to avoid\n   corrupted data not only with\
    \ DNS but with other services that use UDP\n   (like NFS).  Check with your operating\
    \ system documentation to verify\n   that UDP checksumming is enabled.\n"
- title: References
  contents:
  - "References\n   [RFC 974] Partridge, C., \"Mail routing and the domain system\"\
    , STD\n              14, RFC 974, CSNET CIC BBN Laboratories Inc, January 1986.\n\
    \   [RFC 1033] Lottor, M, \"Domain Administrators Operations Guide\", RFC\n  \
    \            1033, USC/Information Sciences Institute, November 1987.\n   [RFC\
    \ 1034] Mockapetris, P., \"Domain Names - Concepts and Facilities\",\n       \
    \       STD 13, RFC 1034, USC/Information Sciences Institute,\n              November\
    \ 1987.\n   [RFC 1035] Mockapetris, P., \"Domain Names - Implementation and\n\
    \              Specification\", STD 13, RFC 1035, USC/Information Sciences\n \
    \             Institute, November 1987.\n   [RFC 1123] Braden, R., \"Requirements\
    \ for Internet Hosts --\n              Application and Support\", STD 3, RFC 1123,\
    \ IETF, October\n              1989.\n   [RFC 1178] Libes, D., \"Choosing a Name\
    \ for Your Computer\", FYI 5, RFC\n              1178, Integrated Systems Group/NIST,\
    \ August 1990.\n   [RFC 1183] Ullman, R., Mockapetris, P., Mamakos, L, and C.\
    \ Everhart,\n              \"New DNS RR Definitions\", RFC 1183, October 1990.\n\
    \   [RFC 1535] Gavron, E., \"A Security Problem and Proposed Correction\n    \
    \          With Widely Deployed DNS Software\", RFC 1535, ACES\n             \
    \ Research Inc., October 1993.\n   [RFC 1536] Kumar, A., Postel, J., Neuman, C.,\
    \ Danzig, P., and S.\n              Miller, \"Common DNS Implementation Errors\
    \ and Suggested\n              Fixes\", RFC 1536, USC/Information Sciences Institute,\
    \ USC,\n              October 1993.\n   [RFC 1537] Beertema, P., \"Common DNS\
    \ Data File Configuration Errors\",\n              RFC 1537, CWI, October 1993.\n\
    \   [RFC 1713] A. Romao, \"Tools for DNS debugging\", RFC 1713, FCCN,\n      \
    \        November 1994.\n   [BOG] Vixie, P, et. al., \"Name Server Operations\
    \ Guide for BIND\",\n              Vixie Enterprises, July 1994.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 6. Author's Address
  contents:
  - "6. Author's Address\n   David Barr\n   The Pennsylvania State University\n  \
    \ Department of Mathematics\n   334 Whitmore Building\n   University Park, PA\
    \ 16802\n   Voice: +1 814 863 7374\n   Fax: +1 814 863-8311\n   EMail: barr@math.psu.edu\n"
