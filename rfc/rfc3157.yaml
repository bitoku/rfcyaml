- title: __initial_text__
  contents:
  - '             Securely Available Credentials - Requirements

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes requirements to be placed on Securely\n\
    \   Available Credentials (SACRED) protocols.\n"
- title: Table Of Contents
  contents:
  - 'Table Of Contents

    '
- title: 1. Introduction
  contents:
  - "1. Introduction\n   \"Credentials\" are information that can be used to establish\
    \ the\n   identity of an entity, or help that entity communicate securely.\n \
    \  Credentials include such things as private keys, trusted roots,\n   tickets,\
    \ or the private part of a Personal Security Environment (PSE)\n   [RFC2510] -\
    \ that is, information used in secure communication on the\n   Internet.  Credentials\
    \ are used to support various Internet\n   protocols, e.g., S/MIME, IPSec and\
    \ TLS.\n   In simple models, users and other entities (e.g., computers like\n\
    \   routers) are provided with credentials, and these credentials stay in\n  \
    \ one place.  However, the number, and more importantly the number of\n   different\
    \ types, of devices that can be used to access the Internet\n   is increasing.\
    \  It is now possible to access Internet services and\n   accounts using desktop\
    \ computers, laptop computers, wireless phones,\n   pagers, personal digital assistants\
    \ (PDAs) and other types of\n   devices.  Further, many users want to access private\
    \ information and\n   secure services from a number of different devices, and\
    \ want access\n   to the same information from any device.  Similarly credentials\
    \ may\n   have to be moved between routers when they are upgraded.\n   This document\
    \ identifies a set of requirements for credential\n   mobility.  The Working Group\
    \ will also produce companion documents,\n   which describe a framework for secure\
    \ credential mobility, and a set\n   of protocols for accomplishing this goal.\n\
    \   The key words \"MUST\", \"REQUIRED\", \"SHOULD\", \"RECOMMENDED\", and \"\
    MAY\"\n   in this document are to be interpreted as described in [RFC2119].\n"
- title: 1.1 Background and Motivation
  contents:
  - "1.1 Background and Motivation\n   In simple models of Internet use, users and\
    \ other entities are\n   provided with credentials, and these credentials stay\
    \ in one place.\n   For example, Mimi generates a public and private key on her\
    \ desktop\n   computer, provides the public key to a Certification Authority (CA)\n\
    \   to be included in a certificate, and keeps the private key on her\n   computer.\
    \  It never has to be moved.\n   However, Mimi may want to able to send signed\
    \ e-mail messages from\n   her desktop computer when she is in the office, and\
    \ from her laptop\n   computer when she is on the road, and she does not want\
    \ message\n   recipients to know the difference.  In order to do this, she must\n\
    \   somehow make her private key available on both devices - that is,\n   that\
    \ credential must be moved.\n   Similarly, Will may want to retrieve and read\
    \ encrypted e-mail from\n   either his wireless phone or from his two-way pager.\
    \  He wants to use\n   whichever device he has with him at the moment, and does\
    \ not want to\n   be denied access to his mail or to be unable to decrypt important\n\
    \   messages simply because he has the wrong device.  Thus, he must be\n   able\
    \ to have the same private key available on both devices.\n   The following scenario\
    \ relating to routers has also been offered:\n   \"Once upon a time, a router\
    \ generated a keypair.  The administrators\n   transferred the public key of that\
    \ router to a lot of other (peer)\n   routers and used that router to encrypt\
    \ traffic to the other routers.\n   And this was good for many years.  Then one\
    \ day, the network\n   administrators found that this particular little router\
    \ couldn't\n   handle an OC-192.  So they trashed it and replaced it with a really\n\
    \   big router.  While they were there, the craft workers inserted a\n   smart\
    \ card into the router and logged into the router.  They gave the\n   appropriate\
    \ commands and entered the correct answers and so the\n   credentials (keypair)\
    \ were transferred to the new, big router.\n   Alternatively, the craft people\
    \ could have logged into the router,\n   given it a minimal configuration and\
    \ transferred the credentials from\n   a credential server to the router.  They\
    \ had to perform the correct\n   incantations and authentications for the transfer\
    \ to be successful.\n   In this way, the identity of the router was moved from\
    \ an old router\n   to a new one.  The administrators were glad that they didn't\
    \ have to\n   edit the configurations of all of the peer routers as well.\"\n\
    \   It is generally accepted that the private key in these examples must\n   be\
    \ transferred securely.  In the first example, the private key\n   should not\
    \ be exposed to anyone other than Mimi herself (and ideally,\n   it would not\
    \ be directly exposed to her).  Furthermore, it must be\n   transferred correctly.\
    \  It must be transferred to the proper device,\n   and it must not be corrupted\
    \ - improperly modified - during transfer.\n   Making credentials securely available\
    \ (in an interoperable fashion)\n   will provide substantial value to network\
    \ owners, administrators, and\n   end users.  The intent is that this value be\
    \ provided largely\n   independent of the hardware device used to access the secure\n\
    \   credential and the type of storage medium to which the secure\n   credential\
    \ is written.  Different credential storage devices, (e.g.,\n   desktop or laptop\
    \ PC computer memory, a 3.5 inch flexible diskette, a\n   hard disk file, a cell\
    \ phone, a smart card, etc.) will have very\n   different security characteristics\
    \ and, often very different protocol\n   handling capabilities.  Using SACRED\
    \ protocols, users will be able to\n   securely move their credentials between\
    \ different locations,\n   different Internet devices, and different storage media\
    \ as needed.\n   In the remainder of this document we present a set of requirements\n\
    \   for the secure transfer of software-based credentials.\n"
- title: 1.2 Working Group Organization and Documents
  contents:
  - "1.2 Working Group Organization and Documents\n   The SACRED Working Group is\
    \ working on the standardization of a set\n   of protocols for securely transferring\
    \ credentials among devices.  A\n   general framework is being developed that\
    \ will give an abstract\n   definition of protocols which can meet the credential-transfer\n\
    \   requirements.  This framework will allow for the development of a set\n  \
    \ of protocols, which may vary from one another in some respects.\n   Specific\
    \ protocols that conform to the framework can then be\n   developed.\n   Work\
    \ is being done on a number of documents.  This document\n   identifies the requirements\
    \ for the general framework, as well as the\n   requirements for specific protocols.\
    \  Another document will describe\n   the protocol framework.  Still others will\
    \ define the protocols\n   themselves.\n"
- title: 1.3 Structure of This Document
  contents:
  - "1.3 Structure of This Document\n   Section 1 of this document provides an introduction\
    \ to the problem\n   being solved by this working group.  Section 2 describes\
    \ requirements\n   on the framework.  Section 3 identifies the overall requirements\
    \ for\n   secure credential-transfer protocols, and separate requirements for\n\
    \   two different classes of solutions.  Section 4 identifies Security\n   Considerations.\
    \  Appendix A describes the relationship of the SACRED\n   solutions and credential-mobility\
    \ solutions involving hardware\n   components such as smart cards.  Appendix B\
    \ contains some additional\n   scenarios which were considered when developing\
    \ the requirements.\n"
- title: 2. Framework Requirements
  contents:
  - "2. Framework Requirements\n   This section describes requirements that the SACRED\
    \ framework has to\n   meet, as opposed to requirements that are to be met by\
    \ a specific\n   protocol that uses the framework.\n"
- title: 2.1 Credential Server and Direct solutions
  contents:
  - "2.1 Credential Server and Direct solutions\n   There are at least two different\
    \ ways to solve the problem of secure\n   credential transfer between devices.\
    \  One class of solutions uses a\n   \"credential server\" as an intermediate\
    \ node, and the other class\n   provides direct transfer between devices.\n  \
    \ A \"credential server\" can be likened to a server that sits in front\n   of\
    \ a repository where credentials can be securely stored for later\n   retrieval.\
    \  The credential server is active in the protocol, that is,\n   it implements\
    \ security enforcing functionality.\n   To transfer credentials securely from\
    \ one end device to another is a\n   straightforward two-step process.  Users\
    \ can have their credentials\n   securely \"uploaded\" from one device, e.g.,\
    \ a wireless phone, to the\n   credential server.  They can be stored on the credential\
    \ server, and\n   \"downloaded\" when needed using another device; e.g., a two-way\
    \ pager.\n   Some advantages of a credential server approach compared to\n   credential\
    \ transfer are:\n   1. It provides a conceptually clean and straightforward approach.\n\
    \      For all end devices, there is one protocol, with a set of actions\n   \
    \   defined to transfer credentials from the device to the server, and\n     \
    \ another set of actions defined to transfer credentials from the\n      server\
    \ to the device.  Furthermore, this protocol involves clients\n      (the devices)\
    \ and a server (the credential server), like many\n      other Internet protocols;\
    \ thus, the design of this protocol is\n      likely to be familiar to most people\
    \ familiar with most other\n      Internet protocols.\n   2. It provides for a\
    \ place where credentials can be securely stored\n      for arbitrary lengths\
    \ of time.  Given a reasonable-quality server\n      operating under generally\
    \ accepted practices, it is unlikely the\n      credentials will be permanently\
    \ lost due to a hardware failure.\n      This contrasts with systems where credentials\
    \ are only stored on\n      end devices, in which a failure of or the loss of\
    \ the device could\n      mean that the credentials are lost forever.\n   3. The\
    \ credential server may be able to enforce a uniform security\n      policy regarding\
    \ credential handling.  This is particularly the\n      case where credentials\
    \ are issued by an organization for its own\n      purposes, and are not \"created\"\
    \ by the end user, and so must be\n      governed by the policies of the issuer,\
    \ not the user.\n   However, the credential server approach has some potential\n\
    \   disadvantages, too:\n   1. It might be somewhat expensive to maintain and\
    \ run the credential\n      server, particularly if there are stringent requirements\
    \ on\n      availability and reliability of the server.  This is particularly\n\
    \      true for servers which are used for a large community of users.\n     \
    \ When the credential server is intended for a small community, the\n      complexity\
    \ and cost would be much less.\n   2. The credential server may have to be \"\
    trusted\" in some sense and\n      also introduces a point of potential vulnerability.\
    \  (See the\n      Security Considerations section for some of the issues.)  Good\n\
    \      protocol and system design will limit the vulnerability that\n      exists\
    \ at the credential server, but at a minimum, someone with\n      access to the\
    \ credential server will be able to delete credentials\n      and thus deny the\
    \ SACRED service to system users.\n   Thus, some users may prefer a different\
    \ class of solution, in which\n   credentials are transferred directly from one\
    \ device to another\n   (i.e., having no intermediary element that processes or\
    \ has any\n   understanding of the credentials).\n   For example, consider the\
    \ case where Mimi sends a message from her\n   wireless phone containing the credentials\
    \ in question, and retrieves\n   it using her two-way pager.  In getting from\
    \ one place to another,\n   the bits of the message cross the wireless phone network\
    \ to a base\n   station.  These bits are likely transferred over the wired phone\n\
    \   network to a message server run by the wireless phone operator, and\n   are\
    \ transferred from there over the Internet to a message server run\n   by the\
    \ paging operator.  From the paging operator they are\n   transferred to a base\
    \ station and then finally to Mimi's pager.\n   Certainly, there are devices other\
    \ than the original wireless phone\n   and ultimate pager that are involved in\
    \ the credential transfer, in\n   the sense that they transmit bits from one place\
    \ to another.\n   However, to all devices except the pager and the wireless phone,\
    \ what\n   is being transferred is an un-interpreted and unprocessed set of\n\
    \   bits.  No security-related decisions are made, and no actions are\n   taken\
    \ based on the fact that this message contains credentials, at\n   any of the\
    \ intermediate nodes.  They exist simply to forward bits.\n   Thus, we consider\
    \ this to be a \"direct\" transfer of credentials.\n   Solutions involving the\
    \ direct transfer of credentials from one\n   device to another are potentially\
    \ somewhat more complex than the\n   credential-server approach, owing to the\
    \ large number of different\n   devices and formats that may have to be supported.\
    \  Complexity is\n   also added due to the fact that each device may in turn have\
    \ to\n   exhibit the behavior of both a client and a server.\n   We believe that\
    \ both classes of solutions are useful in certain\n   environments, and thus that\
    \ the SACRED framework will have to define\n   solutions for both.  The extent\
    \ to which elements of the above\n   solutions overlap remains to be determined.\n\
    \   This all leads to our first set of requirements:\n   F1.   The framework MUST\
    \ support both \"credential server\" and\n         \"direct\" solutions.\n   F2.\
    \   The \"credential server\" and \"direct\" solutions SHOULD use the\n      \
    \   same technology as far as possible.\n"
- title: 2.2 User authentication
  contents:
  - "2.2 User authentication\n   There is a wide range of deployment options for credential\
    \ mobility\n   solutions.  In many of these cases, it is useful to be able to\
    \ re-use\n   an existing user authentication scheme, for example where passwords\n\
    \   have previously been established, it may be more secure to re-use\n   these\
    \ than try to manage a whole new set of passwords.  Different\n   devices may\
    \ also limit the types of user authentication scheme that\n   are possible, e.g.,\
    \ not all mobile devices are practically capable of\n   carrying out asymmetric\
    \ cryptography.\n   F3.   The framework MUST allow for protocols which support\
    \ different\n         user authentication schemes\n"
- title: 2.3 Credential Formats
  contents:
  - "2.3 Credential Formats\n         Today there is no single standard format for\
    \ credentials and\n         this is not likely to change in the near future. \
    \ There are a\n         number of fairly widely deployed formats, e.g., [PGP],\n\
    \         [PKCS#12] that have to be supported.  This means that the\n        \
    \ framework has to allow for protocols supporting any credential\n         format.\n\
    \   F4.   The details of the actual credential type or format MUST be\n      \
    \   opaque to the protocol, though not to processing within the\n         protocol's\
    \ peers.  The protocol MUST NOT depend on the internal\n         structure of\
    \ any credential type or format.\n"
- title: 2.4 Transport Issues
  contents:
  - "2.4 Transport Issues\n   Different devices allow for different transport layer\
    \ possibilities,\n   e.g., current WAP 1.x devices do not support TCP.  For this\
    \ reason\n   the framework has to be transport \"agnostic\".\n   F5.   The framework\
    \ MUST allow use of different transports.\n"
- title: 3. Protocol Requirements
  contents:
  - "3. Protocol Requirements\n   In this section, we identify the requirements for\
    \ secure credential-\n   transfer solutions.  We will begin by listing a set of\
    \ relevant\n   vulnerabilities and the requirements that must be met by all\n\
    \   solutions.  Then we identify additional requirements that must be met\n  \
    \ by solutions involving a credential server, followed by additional\n   requirements\
    \ that must be met by solutions involving direct transfer\n   of credentials.\n"
- title: 3.1 Vulnerabilities
  contents:
  - "3.1 Vulnerabilities\n   This section lists the vulnerabilities against which\
    \ a SACRED\n   protocol SHOULD offer protection.  Any protocol claiming to meet\
    \ the\n   requirements listed in this document MUST explicitly indicate how (or\n\
    \   whether) it offers protection for each of these vulnerabilities.\n   V1. \
    \     A passive attacker can watch all packets on the network and\n          \
    \  later carry out a dictionary attack.\n   V2.      An attacker can attempt to\
    \ masquerade as a credential server\n            in an attempt to get a client\
    \ to reveal information on line\n            that allows for a later dictionary\
    \ attack.\n   V3.      An attacker can attempt to get a client to decrypt a chosen\n\
    \            \"ciphertext\" and get the client to make use of the resulting\n\
    \            plaintext - the attacker may then be able to carry out a\n      \
    \      dictionary attack (e.g., if the plaintext resulting from\n            \"\
    decryption\" of a random string is used as a DSA private\n            key).\n\
    \   V4.      An attacker could overwrite a repository entry so that when\n   \
    \         a user subsequently uses what they think is a good\n            credential,\
    \ they expose information about their password\n            (and hence the \"\
    real\" credential).\n   V5.      An attacker can copy a credential server's repository\
    \ and\n            carry out a dictionary attack.\n   V6.      An attacker can\
    \ attempt to masquerade as a client in an\n            attempt to get a server\
    \ to reveal information that allows\n            for a later dictionary attack.\n\
    \   V7.      An attacker can persuade a server that a successful login\n     \
    \       has occurred, even if it hasn't.\n   V8.      (Upload) An attacker can\
    \ overwrite someone else's\n            credentials on the server.\n   V9.   \
    \   (When using password-based authentication) An attacker can\n            force\
    \ a password change to a known (or \"weak\") password.\n   V10.     An attacker\
    \ can attempt a man-in-the-middle attack for lots\n   V11.     User enters password\
    \ instead of name.\n   V12.     An attacker could attempt various denial-of-service\
    \ attacks.\n"
- title: 3.2 General Protocol Requirements
  contents:
  - "3.2 General Protocol Requirements\n   Looking again at the examples described\
    \ in Section 1.1, we can\n   readily see that there are a number of requirements\
    \ that must apply\n   to the transfer of credentials if the ultimate goal of supporting\
    \ the\n   Internet security protocols (e.g., TLS, IPSec, S/MIME) is to be met.\n\
    \   For example, the credentials must remain confidential at all times;\n   it\
    \ is unacceptable for nodes other than the end-user's device(s) to\n   see the\
    \ credentials in any readable, cleartext form.\n   These, then, are the requirements\
    \ that apply to all secure\n   credential-transfer solutions:\n   G1.      Credential\
    \ transfer both to and from a device MUST be\n            supported.\n   G2. \
    \     Credentials MUST NOT be forced by the protocol to be present\n         \
    \   in cleartext at any device other than the end user's.\n   G3.      The protocol\
    \ SHOULD ensure that all transferred credentials\n            be authenticated\
    \ in some way (e.g., digitally signed or\n            MAC-ed).\n   G4.      The\
    \ protocol MUST support a range of cryptographic\n            algorithms, including\
    \ symmetric and asymmetric algorithms,\n            hash algorithms, and MAC algorithms.\n\
    \   G5.      The protocol MUST allow the use of various credential types\n   \
    \         and formats (e.g., X.509, PGP, PKCS12, ...).\n   G6.      One mandatory\
    \ to support credential format MUST be defined.\n   G7.      One mandatory to\
    \ support user authentication scheme MUST be\n            defined.\n   G8.   \
    \   The protocol MAY allow credentials to be labeled with a text\n           \
    \ handle, (outside the credential), to allow the end user to\n            select\
    \ amongst a set of credentials or to name a particular\n            credential.\n\
    \   G9.      Full I18N support is REQUIRED (via UTF8 support) [RFC2277].\n   G10.\
    \     It is desirable that the protocol be able to support\n            privacy,\
    \ that is, anonymity for the client.\n   G11.     Transferred credentials MAY\
    \ incorporate timing information,\n            for example a \"time to live\"\
    \ value determining the maximum\n            time for which the credential is\
    \ to be usable following\n            transfer/download.\n"
- title: 3.3 Requirements for Credential Server-based solutions
  contents:
  - "3.3 Requirements for Credential Server-based solutions\n   The following requirements\
    \ assume that there is a credential server\n   from which credentials are downloaded\
    \ to the end user device, and to\n   which credentials are uploaded from an end\
    \ user device.\n   S1.      Credential downloads (to an end user) and upload (to\
    \ the\n            credential server) MUST be supported.\n   S2.      Credentials\
    \ MUST only be downloadable following user\n            authentication or else\
    \ only downloaded in a format that\n            requires completion of user authentication\
    \ for deciphering.\n   S3.      It MUST be possible to ensure the authenticity\
    \ of a\n            credential during upload.\n   S4.      Different end user\
    \ devices MAY be used to\n            download/upload/manage the same set of credentials.\n\
    \   S5.      Credential servers SHOULD be authenticated to the user for\n    \
    \        all operations except download.  Note: This requirement can\n       \
    \     be ignored if the credential format itself is strongly\n            protected,\
    \ as there is no risk (other than user confusion)\n            from an unauthenticated\
    \ credential server.\n   S6.      It SHOULD be possible to authenticate the credential\
    \ server\n            to the user as part of a download operation.\n   S7.   \
    \   The user SHOULD only have to enter a single secret value in\n            order\
    \ to download and use a credential.\n   S8.      Sharing of secrets across multiple\
    \ servers MAY be possible,\n            so that penetration of some servers does\
    \ not expose the\n            private parts of a credential (\"m-from-n\" operation).\n\
    \   S9.      The protocol MAY support \"away-from-home\" operation, where\n  \
    \          the user enters both a name and a domain (e.g.\n            RoamingStephen@baltimore.ie)\
    \ and the domain can be used in\n            order to locate the user's credential\
    \ server.\n   S10.     The protocol MUST provide operations allowing users to\n\
    \            manage their credentials stored on the credential server,\n     \
    \       e.g., to retrieve a list of their credentials stored on a\n          \
    \  server; add credentials to the server; delete credentials\n            from\
    \ the server.\n   S11.     Client-initiated authentication information (e.g.,\
    \ password)\n            change MUST be supported.\n   S12.     The user SHOULD\
    \ be able to retrieve a list of\n            accesses/changes to their credentials.\n\
    \   S13.     The protocol MUST support user self-enrollment.  One\n          \
    \  scenario calling for this is where a previously unknown user\n            uploads\
    \ his credential without requiring manual operator\n            intervention.\n\
    \   S14.     The protocol MUST NOT prevent bulk initializing of a\n          \
    \  credential server's repository.\n   S15.     The protocol SHOULD require minimal\
    \ client configuration.\n"
- title: 3.4 Requirements for Direct-Transfer Solutions
  contents:
  - "3.4 Requirements for Direct-Transfer Solutions\n   The full set of requirements\
    \ for this case has not been elucidated,\n   and this list is therefore provisional.\
    \  An additional requirements\n   document (or a modification of this one) will\
    \ be required prior to\n   progression of a direct-transfer protocol.\n   The\
    \ following requirements apply to solutions supporting the \"direct\"\n   transfer\
    \ of credentials from one device to another.  (See Section 2\n   for the note\
    \ on the meaning of \"direct\" in this case.)\n   D1.   It SHOULD be possible\
    \ for the receiving device to authenticate\n         that the credential package\
    \ indeed came from the purported\n         sending device.\n   D2.   In order\
    \ for a sender to know that a credential has been\n         received by a recipient,\
    \ it SHOULD be possible for the\n         receiving device to send an acknowledgment\
    \ of credential\n         receipt back to the sending device, and for the sending\
    \ device\n         to authenticate this acknowledgment.\n"
- title: 4. Security Considerations
  contents:
  - '4. Security Considerations

    '
- title: 4.1 Hardware vs. Software
  contents:
  - "4.1 Hardware vs. Software\n   Mobile credentials will never be as secure as a\
    \ \"pure\" hardware-based\n   solution, because of potential attacks through the\
    \ operating system\n   of the end-user device.  However, an acceptable level of\
    \ security may\n   be accomplished through some simple means.  In fact the level\
    \ of\n   security may be improved (compared to password encrypted files)\n   through\
    \ the use of SACRED protocols.\n   The platforms to which credentials are downloaded\
    \ usually cannot be\n   regarded as tamper-resistant, and it therefore is not\
    \ too hard to\n   analyze contents of their memories.  Further, storage of private\n\
    \   keys, even if they are encrypted, on a credential server, will be\n   unacceptable\
    \ in some environments.  Lastly, replacement of installed\n   or downloaded SACRED\
    \ client software with a Trojan horse program will\n   always be possible, such\
    \ a program could email the username and\n   password to the program's author.\n"
- title: 4.2 Auditing
  contents:
  - "4.2 Auditing\n   Although out of scope of the SACRED protocol development work,\n\
    \   implementations should carefully audit events that may be security\n   relevant.\
    \  In particular credential server implementations should\n   audit all operations\
    \ and should include information about the time\n   and source (e.g., IP address)\
    \ of the operation, the claimed identity\n   of the client (possibly masked -\
    \ see below), the type and result of\n   the operation and possibly other operation\
    \ specific information.\n   Implementations should also take care not to include\
    \ security\n   sensitive information in the audit trail, especially not sensitive\n\
    \   authentication information.\n   It may be sensible to mask the claimed identity\
    \ in some way in order\n   to ensure that even if a user enters her password in\
    \ a \"username\"\n   field, that that information is not in clear in the audit\
    \ trail,\n   regardless of whether or not it was received in clear.\n   Similar\
    \ mechanisms which should be supported, but which are out of\n   scope of protocol\
    \ development include alerts and account locking, in\n   particular following\
    \ repeated authentication failures.\n"
- title: 4.3 Defense against attacks
  contents:
  - "4.3 Defense against attacks\n   Credential servers are major targets.  Someone\
    \ who can successfully\n   attack a credential server might be able to gain access\
    \ to the\n   credentials of a number of users, unless those credentials are\n\
    \   sufficiently protected (e.g., encrypted sufficiently that they cannot\n  \
    \ be read or used by someone who gains access to them).  Attackers\n   might also\
    \ be able to substitute credentials of users, to carry out\n   other system attacks\
    \ (e.g., an attacker could provide a user with a\n   \"trusted root\" credential\
    \ that the attacker controls, which would\n   later allow the attacker to have\
    \ some other certificate accepted by\n   the user counter to policy).\n   In addition,\
    \ a credential server is a major target for denial of\n   service attacks.  Ensuring\
    \ that a credential server is unavailable to\n   legitimate users can be of great\
    \ assistance to attackers.  Users who\n   were not able to retrieve needed credentials\
    \ might be forced to\n   operate insecurely, or not operate at all.  Credential\
    \ servers are\n   especially vulnerable to denial of service attacks if they do\
    \ lots of\n   expensive cryptographic operations - it might not take very many\n\
    \   operations for the attacker to bring service to an unacceptable\n   level.\n\
    \   Thus, great care should be taken in designing systems that use\n   credential\
    \ servers to protect against these attacks.\n"
- title: References
  contents:
  - "References\n   [PGP]       Callas, J., Donnerhacke, L., Finney, H. and R. Thayer,\n\
    \               \"OpenPGP Message Format\", RFC 2440, November 1998.\n   [PKCS12]\
    \    \"PKCS #12 v1.0: Personal Information Exchange Syntax\n               Standard\"\
    , RSA Laboratories, June 24, 1999.\n   [CMS]       Housley, R., \"Cryptographic\
    \ Message Syntax\", RFC 2630,\n               June 1999.\n   [PKCS15]    \"PKCS\
    \ #15 v1.1: Cryptographic Token Information Syntax\n               Standard,\"\
    \ RSA Laboratories, June 2000.\n   [RFC2026]   Bradner, S., \"The Internet Standards\
    \ Process -- Revision\n               3\", BCP 9, RFC 2026, October 1996.\n  \
    \ [RFC2119]   Bradner, S., \"Key words for use in RFCs to Indicate\n         \
    \      Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2277]   Alvestrand,\
    \ H., \" IETF Policy on Character Sets and\n               Languages\", BCP 18,\
    \ RFC 2277, January 1998.\n   [RFC2510]   Adams, C. and S. Farrell, \"Internet\
    \ X.509 Public Key\n               Infrastructure Certificate Management Protocols\"\
    , RFC\n               2510, March 1999.\n   [RFC2616]   Fielding, R., Gettys,\
    \ J., Mogul, J., Frysyk, H.,\n               Masinter, L., Leach, P. and T. Berners-Lee,\
    \ \"Hypertext\n               Transfer Protocol - HTTP/1.1\", RFC 2616, June 1999.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors gratefully acknowledge the text containing additional\
    \ use\n   cases in Appendix B that was supplied by Neal Mc Burnett\n   (nealmcb@avaya.com).\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Alfred Arsenault\n   Diversinet Corp.\n   P.O. Box 6530\n\
    \   Ellicott City, MD 21042\n   USA\n   Phone: +1 410-480-2052\n   EMail: aarsenault@dvnet.com\n\
    \   Stephen Farrell,\n   Baltimore Technologies,\n   39 Parkgate Street,\n   Dublin\
    \ 8,\n   IRELAND\n   Phone: +353-1-881-6000\n   EMail: stephen.farrell@baltimore.ie\n"
- title: 'Appendix A: A note on SACRED vs. hardware support.'
  contents:
  - "Appendix A: A note on SACRED vs. hardware support.\n   One way of accomplishing\
    \ many of the goals of the SACRED WG is to put\n   the credentials on hardware\
    \ tokens - e.g., smart cards, PCMCIA cards,\n   or other devices.  There are a\
    \ number of types of hardware tokens\n   today that provide secure storage for\
    \ sensitive information, some\n   degree of authentication, and interfaces to\
    \ a number of types of\n   wireless and other devices.  Thus, in the second example\
    \ from section\n   1.1, Will could simply put his private key on a smart card,\
    \ always\n   take the smart card with him, and be assured that whichever device\
    \ he\n   uses to retrieve his e-mail, he will have all of the information\n  \
    \ necessary to decrypt and read messages.\n   However, hardware tokens are not\
    \ appropriate for every environment.\n   They cost more than software-only solutions,\
    \ and the additional\n   security they provide may or may not be worth the incremental\
    \ cost.\n   Not all devices have interfaces for the same hardware tokens.  And\n\
    \   hardware tokens are subject to different failure modes than typical\n   computers\
    \ - it is not at all unusual for a smart card to be lost or\n   stolen; or for\
    \ a PCMCIA card to physically break.\n   Thus, it is appropriate to develop complementary\
    \ software-based\n   solution that allows credentials to be moved from one device\
    \ to\n   another, and provides a level of security sufficient for its\n   environments.\
    \  While we recognize that the level of security provided\n   by a software solution\
    \ may not be as high as that provided by the\n   hardware solutions discussed\
    \ above, and some organizations may not\n   consider it sufficient at all, we\
    \ believe that a worthwhile solution\n   can be developed.\n   Finally, SACRED\
    \ protocols can also complement hardware credential\n   solutions by providing\
    \ standard mechanisms for the update of\n   credentials which are stored on the\
    \ hardware device.  Today, this\n   often requires returning (with) the device\
    \ to an administrative\n   centre, which is often inconvenient and may be costly.\
    \  SACRED\n   protocols provide a way to update and manage credentials stored\
    \ on\n   hardware devices without requiring such physical presence.\n"
- title: 'Appendix B: Additional Use Cases'
  contents:
  - "Appendix B: Additional Use Cases\n   This appendix describes some additional\
    \ use cases for SACRED\n   protocols.  SACRED protocols are NOT REQUIRED to support\
    \ all these\n   use cases, that is, this text is purely informative.\n"
- title: B.1 Home/Work Desktop Computer
  contents:
  - "B.1 Home/Work Desktop Computer\n   Scenario Overview\n   A university utilizing\
    \ a PKI for various applications and services\n   on-campus is likely to find\
    \ that many of its users would like to make\n   use of the same PKI-enabled services\
    \ and applications on computers\n   located in their residence.  These home computers\
    \ may be owned either\n   by the university or by the individual but are permanently\
    \ located at\n   the residence as opposed to laptop systems that may be taken\
    \ home.\n   The usage depicted in this scenario may be motivated by formal\n \
    \  telecommuting arrangements or simply by the need to catch up on work\n   from\
    \ home in the evenings.  The basic scenario should apply equally\n   well to the\
    \ commercial, health care, and higher education\n   environments.\n   Assumptions\n\
    \   This scenario assumes that the institution has not implemented a\n   hardware\
    \ token-based PKI mobility solution\n   The home computer has a dial-up as opposed\
    \ to a permanent network\n   connection.\n   The PKI applications, whenever practical,\
    \ should be functional in\n   both on-line and off-line modes.  For example, the\
    \ home user signing\n   an email message to be queued for later bulk sending and\
    \ the reading\n   of a received encrypted message may be supported off-line while\n\
    \   composing and queuing of an encrypted message might not be supported\n   in\
    \ off-line mode.\n   Applications using digital signatures may require \"non-repudiation\"\
    .\n   The institution prefers that the user be identified via a single\n   certificate\
    \ / key-pair from all computers used by the individual.\n   The home computer\
    \ system can not be directly supported by the\n   institution's IT staff.  Hardware,\
    \ operating system versions, and\n   operating system configurations will vary\
    \ widely.  Significant\n   software installation or specialized configurations\
    \ will be difficult\n   to implement.\n   Uniqueness of Scenario\n   vThe PKI\
    \ mobility support needed for this scenario is, in general,\n   similar to the\
    \ other mobility scenarios.  However, it does have\n   several unique aspects:\n\
    \   1. The home-user scenario differs from the general public workstation\n  \
    \    case in that it provides the opportunity to permanently store the\n     \
    \ user's certificate and key-pair on the workstation.\n   2. Likewise the appropriate\
    \ CA certificates and even certificates for\n      other users can be permanently\
    \ stored or cached on the home\n      workstation.\n   3. Another key difference\
    \ is the need to support off-line use of the\n      PKI credentials given the\
    \ assumed dial-up network connection.\n   4. The level of hardware and software\
    \ platform consistency (operating\n      system versions and configurations) will\
    \ vary widely.\n   5. Finally, the level of available technical support is significantly\n\
    \      less for home systems than for equivalent systems managed by the\n    \
    \  IT staff at the office location.\n"
- title: B.2 Public Lab / On-campus Shared Workstation
  contents:
  - "B.2 Public Lab / On-campus Shared Workstation\n   Scenario Overview\n   Many\
    \ colleges and universities operate labs full of computer systems\n   that are\
    \ available for use by the general student population.  These\n   computers are\
    \ typically configured with identical hardware and an\n   operating system build\
    \ that is replicated to all of the systems in\n   the lab.  Many typical configurations\
    \ provide no permanent storage of\n   any type while others may offer individual\
    \ disk space for personal\n   files on a central server.  Some scheme is generally\
    \ used to ensure\n   that the configuration of the operating system is preserved\
    \ across\n   users and that temporary files created by one user are removed before\n\
    \   the next user logs in.  Students generally sit down at the next\n   available\
    \ workstation without any clear pattern of usage.\n   The same basic technical\
    \ solutions used to operate public labs are\n   often also used in general environments\
    \ where several people share a\n   single workstation.  This is often found in\
    \ locations with shift work\n   such as medical facilities and service bureaus\
    \ that provide services\n   to multiple time zones.\n   Assumptions\n   1. This\
    \ scenario assumes that the institution has not implemented a\n      hardware\
    \ token-based PKI mobility solution.\n   2. The computer systems are permanently\
    \ networked with LAN\n      connections.\n   3. The configuration of the computer\
    \ system is centrally maintained\n      and customizations are relatively easy\
    \ to implement.  For example\n      it would be easy to load enterprise root certificates,\
    \ LDAP server\n      configurations, specialized software, and any other needed\n\
    \      components of the PKI on to the workstations.\n   4. Applications using\
    \ digital signatures may require \"non-\n      repudiation\" in some of the anticipated\
    \ environments.  Examples of\n      this might include homework submission in\
    \ a public lab environment\n      or medical records in a health care environment.\n\
    \   5. The institution prefers that the user be identified via a single\n    \
    \  certificate / key-pair from all computers used by the individual.\n   6. Many\
    \ anticipated implementations of this scenario will not\n      implement any user\
    \ authentication at the desktop operating system\n      level.  Instead, user\
    \ authentication will occur at during the\n      startup of networked applications\
    \ such as email, web-based\n      services, etc.  Login at the desktop level may\
    \ be with generic\n      user names that are more targeted at matching printouts\
    \ to\n      machines than identifying users.\n   7. Users, with almost ridiculous\
    \ frequency, will walk away from a\n      system forgetting to first logout from\
    \ running authenticated\n      applications.\n   Uniqueness of Scenario\n   The\
    \ PKI mobility support needed for this scenario is, in general,\n   similar to\
    \ the other mobility scenarios.  However, it does have\n   several unique aspects:\n\
    \   1. Unlike situations with personal workstations, there is no\n      permanent\
    \ storage available to hold user key pairs and\n      certificates.\n   2. Appropriate\
    \ CA certificates and custom software are easily added\n      and maintained for\
    \ these types of shared systems.\n   3. The workstations are installed in public\
    \ locations and users will\n      frequently forget to close applications before\
    \ permanently walking\n      away from the workstation.\n"
- title: B.3 Public Kiosk Mobility
  contents:
  - "B.3 Public Kiosk Mobility\n   Overview\n   This scenario describes the needs\
    \ of the traveler or the shopper.\n   This person is traveling light (no computer)\
    \ or is burdened with\n   everything but a computer.  It recognizes the increasing\
    \ availability\n   of Internet access points in public spaces, such as libraries,\n\
    \   airports, shopping malls, and \"cyber cafes\".\n   The Need\n   In our increasingly\
    \ mobile society, the chances of needing\n   information when away from the normal\
    \ computing place are great.  One\n   may need to look up a telephone number.\
    \  Have you tried to find a\n   phone book at a public phone lately?  It may become\
    \ necessary to use\n   a data device to find the next place to rush to.  With\
    \ the\n   proliferation of wireless devices (electronic leashes), others have\n\
    \   the ability to create a need for quick access to electronic\n   information.\
    \  A pager can generate a need to check the email inbox or\n   address book. \
    \ A cell phone can drive you to your database to answer\n   a pressing question.\n\
    \   The ability to quickly access sensitive or protected information or\n   services\
    \ from publicly available devices will only become more\n   necessary as we become\
    \ more and more \"connected\".\n   The Device\n   The access device is more a\
    \ function of the best discount or\n   marketing effort than of design.  Any number\
    \ of hardware platforms\n   will be encountered.\n   Since these devices are open\
    \ to the public I/O ports are not likely\n   to be.  In order to protect the device\
    \ and its immediate network\n   environment, most devices will be in some sort\
    \ of protective\n   container.  Access to serial, parallel, USB, firewire, SCSI,\
    \ or\n   PCMCIA connections will not be possible.  Likewise floppy, zip, or CD\n\
    \   drives.  Therefore, any software \"token\" must be obtained from the\n   network\
    \ itself.\n   The Concerns\n   1. Getting the \"token\".  Since it will be necessary\
    \ to obtain the\n      token (key, certificate, credential) from across the network.\
    \  How\n      can it be protected during transit?\n   2. Where did you get it?\
    \  One of the primary controls in PKI is\n      protection of the private key.\
    \  Placing the key on a host that is\n      accessible from a public network means\
    \ that there is an inherent\n      exposure from that network.  The access controls\
    \ and other\n      security measures on the host machine are an area of concern.\n\
    \   3. How did you get it?  When you obtained the token from the server,\n   \
    \   how did it know that you are you?  Authentication becomes\n      critical.\n\
    \   4. What happens to the token when you leave?  You've checked your\n      mail,\
    \ downloaded a recipe from that super-secure recipe server,\n      found out how\
    \ to get to the adult beverage store for the... uh...\n      accessories... for\
    \ the meal, and you're off!  Is your token?  Or\n      is it still sitting there\
    \ on the public kiosk waiting for those\n      youngsters coming out of the music\
    \ store to notice and cruise the\n      information highway on your ticket?\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
