- title: __initial_text__
  contents:
  - '            Authorization for NSIS Signaling Layer Protocols

    '
- title: Abstract
  contents:
  - "Abstract\n   Signaling layer protocols specified within the Next Steps in\n \
    \  Signaling (NSIS) framework may rely on the General Internet Signaling\n   Transport\
    \ (GIST) protocol to handle authorization.  Still, the\n   signaling layer protocol\
    \ above GIST itself may require separate\n   authorization to be performed when\
    \ a node receives a request for a\n   certain kind of service or resources.  This\
    \ document presents a\n   generic model and object formats for session authorization\
    \ within the\n   NSIS signaling layer protocols.  The goal of session authorization\
    \ is\n   to allow the exchange of information between network elements in\n  \
    \ order to authorize the use of resources for a service and to\n   coordinate\
    \ actions between the signaling and transport planes.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5981.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Conventions Used in This Document  . . . . . . . . .\
    \ . . . . .  4\n   3.  Session Authorization Object . . . . . . . . . . . . .\
    \ . . . .  4\n     3.1.  Session Authorization Object format  . . . . . . . .\
    \ . . .  5\n     3.2.  Session Authorization Attributes . . . . . . . . . . .\
    \ . .  6\n       3.2.1.  Authorizing Entity Identifier  . . . . . . . . . . .\
    \ .  7\n       3.2.2.  Session Identifier . . . . . . . . . . . . . . . . . .\
    \  9\n       3.2.3.  Source Address . . . . . . . . . . . . . . . . . . . .  9\n\
    \       3.2.4.  Destination Address  . . . . . . . . . . . . . . . . . 11\n  \
    \     3.2.5.  Start Time . . . . . . . . . . . . . . . . . . . . . . 12\n    \
    \   3.2.6.  End Time . . . . . . . . . . . . . . . . . . . . . . . 13\n      \
    \ 3.2.7.  NSLP Object List . . . . . . . . . . . . . . . . . . . 13\n       3.2.8.\
    \  Authentication Data  . . . . . . . . . . . . . . . . . 15\n   4.  Integrity\
    \ of the SESSION_AUTH Object . . . . . . . . . . . . . 15\n     4.1.  Shared Symmetric\
    \ Keys  . . . . . . . . . . . . . . . . . . 15\n       4.1.1.  Operational Setting\
    \ Using Shared Symmetric Keys  . . . 16\n     4.2.  Kerberos . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 17\n     4.3.  Public Key . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 18\n       4.3.1.  Operational Setting for Public-Key-Based\n\
    \               Authentication . . . . . . . . . . . . . . . . . . . . 19\n  \
    \   4.4.  HMAC Signed  . . . . . . . . . . . . . . . . . . . . . . . 21\n   5.\
    \  Framework  . . . . . . . . . . . . . . . . . . . . . . . . . . 23\n     5.1.\
    \  The Coupled Model  . . . . . . . . . . . . . . . . . . . . 23\n     5.2.  The\
    \ Associated Model with One Policy Server  . . . . . . . 23\n     5.3.  The Associated\
    \ Model with Two Policy Servers . . . . . . . 24\n     5.4.  The Non-Associated\
    \ Model . . . . . . . . . . . . . . . . . 24\n   6.  Message Processing Rules\
    \ . . . . . . . . . . . . . . . . . . . 25\n     6.1.  Generation of the SESSION_AUTH\
    \ by an Authorizing Entity  . 25\n     6.2.  Processing within the QoS NSLP .\
    \ . . . . . . . . . . . . . 25\n       6.2.1.  Message Generation . . . . . .\
    \ . . . . . . . . . . . . 25\n       6.2.2.  Message Reception  . . . . . . .\
    \ . . . . . . . . . . . 26\n       6.2.3.  Authorization (QNE or PDP) . . . .\
    \ . . . . . . . . . . 26\n       6.2.4.  Error Signaling  . . . . . . . . . .\
    \ . . . . . . . . . 27\n     6.3.  Processing with the NATFW NSLP . . . . . .\
    \ . . . . . . . . 27\n       6.3.1.  Message Generation . . . . . . . . . . .\
    \ . . . . . . . 28\n       6.3.2.  Message Reception  . . . . . . . . . . . .\
    \ . . . . . . 28\n       6.3.3.  Authorization (Router/PDP) . . . . . . . . .\
    \ . . . . . 28\n       6.3.4.  Error Signaling  . . . . . . . . . . . . . . .\
    \ . . . . 29\n     6.4.  Integrity Protection of NSLP Messages  . . . . . . .\
    \ . . . 29\n   7.  Security Considerations  . . . . . . . . . . . . . . . . .\
    \ . . 30\n   8.  IANA Considerations  . . . . . . . . . . . . . . . . . . . .\
    \ . 31\n   9.  Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . .\
    \ 34\n   10. References . . . . . . . . . . . . . . . . . . . . . . . . . . 34\n\
    \     10.1. Normative References . . . . . . . . . . . . . . . . . . . 34\n  \
    \   10.2. Informative References . . . . . . . . . . . . . . . . . . 35\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Next Steps in Signaling (NSIS) framework [RFC4080] defines\
    \ a\n   suite of protocols for the next generation in Internet signaling.\n  \
    \ The design is based on a generalized transport protocol for signaling\n   applications,\
    \ the General Internet Signaling Transport (GIST)\n   [RFC5971], and various kinds\
    \ of signaling applications.  Two\n   signaling applications and their NSIS Signaling\
    \ Layer Protocol (NSLP)\n   have been designed, a Quality of Service application\
    \ (QoS NSLP)\n   [RFC5974] and a NAT/firewall application (NATFW NSLP) [RFC5973].\n\
    \   The basic security architecture for NSIS is based on a chain-of-trust\n  \
    \ model, where each GIST hop may choose the appropriate security\n   protocol,\
    \ taking into account the signaling application requirements.\n   For instance,\
    \ communication between two directly adjacent GIST peers\n   may be secured via\
    \ TCP/TLS.  On the one hand, this model is\n   appropriate for a number of different\
    \ use cases and allows the\n   signaling applications to leave the handling of\
    \ security to GIST.  On\n   the other hand, several sessions of different signaling\
    \ applications\n   are then multiplexed onto the same GIST TLS connection.\n \
    \  Yet, in order to allow for finer-grain per-session or per-user\n   admission\
    \ control, it is necessary to provide a mechanism for\n   ensuring that the use\
    \ of resources by a host has been properly\n   authorized before allowing the\
    \ signaling application to commit the\n   resource request, e.g., a QoS reservation\
    \ or mappings for NAT\n   traversal.  In order to meet this requirement, there\
    \ must be\n   information in the NSLP message that may be used to verify the\n\
    \   validity of the request.  This can be done by providing the host with\n  \
    \ a Session Authorization Object that is inserted into the message and\n   verified\
    \ by the respective network elements.\n   This document describes a generic NSLP-layer\
    \ Session Authorization\n   Object (SESSION_AUTH) used to convey authorization\
    \ information for\n   the request.  \"Generic\" in this context means that it\
    \ is usable by\n   all NSLPs.  The scheme is based on third-party tokens.  A trusted\n\
    \   third party provides authentication tokens to clients and allows\n   verification\
    \ of the information by the network elements.  The\n   requesting host inserts\
    \ the authorization information (e.g., a policy\n   object) acquired from the\
    \ trusted third party into the NSLP message\n   to allow verification of the network\
    \ resource request.  Network\n   elements verify the request and then process\
    \ it based on admission\n   policy (e.g., they perform a resource reservation\
    \ or change bindings\n   or firewall filter).  This work is based on RFC 3520\
    \ [RFC3520] and\n   RFC 3521 [RFC3521].\n   The default operation when using NSLP-layer\
    \ session authorization is\n   to add one authorization policy object.  Yet, in\
    \ order to support\n   end-to-end signaling and request authorization from different\n\
    \   networks, a host initiating an NSLP signaling session may add more\n   than\
    \ one SESSION_AUTH object in the message.  The identifier of the\n   authorizing\
    \ entity can be used by the network elements to use the\n   third party they trust\
    \ to verify the request.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in BCP 14, RFC 2119\n   [RFC2119].\n   The term \"NSLP node\" (NN) is used to\
    \ refer to an NSIS node running an\n   NSLP protocol that can make use of the\
    \ authorization object discussed\n   in this document.  Currently, this node would\
    \ run either the QoS NSLP\n   [RFC5974] or the NAT/Firewall NSLP [RFC5973] service.\n"
- title: 3.  Session Authorization Object
  contents:
  - "3.  Session Authorization Object\n   This section presents a new NSLP-layer object\
    \ called session\n   authorization (SESSION_AUTH).  The SESSION_AUTH object can\
    \ be used in\n   the currently specified and future NSLP protocols.\n   The authorization\
    \ attributes follow the format and specification\n   given in RFC3520 [RFC3520].\n"
- title: 3.1.  Session Authorization Object format
  contents:
  - "3.1.  Session Authorization Object format\n   The SESSION_AUTH object contains\
    \ a list of fields that describe the\n   session, along with other attributes.\
    \  The object header follows the\n   generic NSLP object header; therefore, it\
    \ can be used together with\n   any NSLP.\n    0                   1         \
    \          2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |A|B|r|r|         Type          |r|r|r|r|        Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   +                                                               +\n   // \
    \        Session Authorization Attribute List                //\n   +        \
    \                                                       +\n   +---------------------------------------------------------------+\n\
    \   The value for the Type field comes from shared NSLP object type\n   space.\
    \  The Length field is given in units of 32-bit words and\n   measures the length\
    \ of the Value component of the TLV object (i.e.,\n   it does not include the\
    \ standard header).\n   The bits marked 'A' and 'B' are extensibility flags and\
    \ are used to\n   signal the desired treatment for objects whose treatment has\
    \ not been\n   defined in the protocol specification (i.e., whose Type field is\n\
    \   unknown at the receiver).  The following four categories of object\n   have\
    \ been identified, and are described here for informational\n   purposes only\
    \ (for normative behavior, refer to the particular NSLP\n   documents, e.g., [RFC5974]\
    \ [RFC5973]).\n      AB=00 (\"Mandatory\"): If the object is not understood, the\
    \ entire\n      message containing it MUST be rejected, and an error message sent\n\
    \      back (usually of class/code \"Protocol Error/Unknown object\n      present\"\
    ).\n      AB=01 (\"Ignore\"): If the object is not understood, it MUST be\n  \
    \    deleted, and the rest of the message processed as usual.\n      AB=10 (\"\
    Forward\"): If the object is not understood, it MUST be\n      retained unchanged\
    \ in any message forwarded as a result of message\n      processing, but not stored\
    \ locally.\n      AB=11 (\"Refresh\"): If the object is not understood, it should\
    \ be\n      incorporated into the locally stored signaling application state\n\
    \      for this flow/session, forwarded in any resulting message, and\n      also\
    \ used in any refresh or repair message which is generated\n      locally.  This\
    \ flag combination is not used by all NSLPs, e.g., it\n      is not used in the\
    \ NATFW NSLP.\n   The remaining bits marked 'r' are reserved.  The extensibility\
    \ flags\n   follow the definition in the GIST specification.  The SESSION_AUTH\n\
    \   object defined in this specification MUST have the AB bits set to\n   \"10\"\
    .  An NSLP Node (NN) may use the authorization information if it\n   is configured\
    \ to do so, but may also just skip the object.\n   Type: SESSION_AUTH_OBJECT (0x016)\n\
    \   Length: Variable, contains length of session authorization object\n   list\
    \ in units of 32-bit words.\n   Session Authorization Attribute List: variable\
    \ length\n      The session authorization attribute list is a collection of\n\
    \      objects that describes the session and provides other information\n   \
    \   necessary to verify resource request (e.g., a resource\n      reservation,\
    \ binding, or firewall filter change request).  An\n      initial set of valid\
    \ objects is described in Section 3.2.\n"
- title: 3.2.  Session Authorization Attributes
  contents:
  - "3.2.  Session Authorization Attributes\n   A session authorization attribute\
    \ may contain a variety of\n   information and has both an attribute type and\
    \ sub-type.  The\n   attribute itself MUST be a multiple of 4 octets in length,\
    \ and any\n   attributes that are not a multiple of 4 octets long MUST be padded\
    \ to\n   a 4-octet boundary.  All padding bytes MUST have a value of zero.\n \
    \   0                   1                   2                   3\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |    X-Type     |   SubType     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   //                           Value ...                         //\n   +---------------------------------------------------------------+\n\
    \   Length: 16 bits\n      The Length field is two octets and indicates the actual\
    \ length of\n      the attribute (including Length, X-Type, and SubType fields)\
    \ in\n      number of octets.  The length does NOT include any padding of the\n\
    \      value field to make the attribute's length a multiple of 4 octets.\n  \
    \ X-Type: 8 bits\n      Session authorization attribute type (X-Type) field is\
    \ one octet.\n      IANA acts as a registry for X-Types as described in Section\
    \ 8,\n      IANA Considerations.  This specification uses the following\n    \
    \  X-Types:\n      1.  AUTH_ENT_ID: The unique identifier of the entity that\n\
    \          authorized the session.\n      2.  SESSION_ID: The unique identifier\
    \ for this session, usually\n          created locally at the authorizing entity.\
    \  See also RFC 3520\n          [RFC3520]; not to be confused with the SESSION-ID\
    \ of GIST/\n          NSIS.\n      3.  SOURCE_ADDR: The address specification\
    \ for the signaling\n          session initiator, i.e., the source address of\
    \ the signaling\n          message originator.\n      4.  DEST_ADDR: The address\
    \ specification for the signaling session\n          endpoint.\n      5.  START_TIME:\
    \ The starting time for the session.\n      6.  END_TIME: The end time for the\
    \ session.\n      7.  AUTHENTICATION_DATA: The authentication data of the Session\n\
    \          Authorization Object.\n   SubType: 8 bits\n      Session authorization\
    \ attribute sub-type is one octet in length.\n      The value of the SubType depends\
    \ on the X-Type.\n   Value: variable length\n      The attribute-specific information.\n"
- title: 3.2.1.  Authorizing Entity Identifier
  contents:
  - "3.2.1.  Authorizing Entity Identifier\n   The AUTH_ENT_ID is used to identify\
    \ the entity that authorized the\n   initial service request and generated the\
    \ Session Authorization\n   Object.  The AUTH_ENT_ID may be represented in various\
    \ formats, and\n   the SubType is used to define the format for the ID.  The format\
    \ for\n   AUTH_ENT_ID is as follows:\n    0                   1              \
    \     2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |    X-Type     |   SubType     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   //                        OctetString ...                      //\n   +---------------------------------------------------------------+\n\
    \   Length: Length of the attribute, which MUST be > 4.\n   X-Type: AUTH_ENT_ID\n\
    \   SubType:\n      The following sub-types for AUTH_ENT_ID are defined.  IANA\
    \ acts as\n      a registry for AUTH_ENT_ID SubTypes as described in Section 8,\n\
    \      IANA Considerations.  Initially, the registry contains the\n      following\
    \ SubTypes of AUTH_ENT_ID:\n      1.   IPV4_ADDRESS: IPv4 address represented\
    \ in 32 bits.\n      2.   IPV6_ADDRESS: IPv6 address represented in 128 bits.\n\
    \      3.   FQDN: Fully Qualified Domain Name as defined in [RFC1034] as\n   \
    \        an ASCII string.\n      4.   ASCII_DN: X.500 Distinguished name as defined\
    \ in [RFC4514] as\n           an ASCII string.\n      5.   UNICODE_DN: X.500 Distinguished\
    \ name as defined in [RFC4514]\n           as a UTF-8 string.\n      6.   URI:\
    \ Universal Resource Identifier, as defined in [RFC3986].\n      7.   KRB_PRINCIPAL:\
    \ Fully Qualified Kerberos Principal name\n           represented by the ASCII\
    \ string of a principal, followed by\n           the @ realm name as defined in\
    \ [RFC4120] (e.g.,\n           johndoe@nowhere).\n      8.   X509_V3_CERT: The\
    \ Distinguished Name of the subject of the\n           certificate as defined\
    \ in [RFC4514] as a UTF-8 string.\n      9.   PGP_CERT: The OpenPGP certificate\
    \ of the authorizing entity\n           as defined as Public-Key Packet in [RFC4880].\n\
    \      10.  HMAC_SIGNED: Indicates that the AUTHENTICATION_DATA attribute\n  \
    \         contains a self-signed HMAC signature [RFC2104] that ensures\n     \
    \      the integrity of the NSLP message.  The HMAC is calculated\n          \
    \ over all NSLP objects given in the NSLP_OBJECT_LIST attribute\n           that\
    \ MUST also be present.  The object specifies the hash\n           algorithm that\
    \ is used for calculation of the HMAC as\n           Transform ID from Transform\
    \ Type 3 of the IKEv2 registry\n           [RFC5996].\n   OctetString: Contains\
    \ the authorizing entity identifier.\n"
- title: 3.2.2.  Session Identifier
  contents:
  - "3.2.2.  Session Identifier\n   SESSION_ID is a unique identifier used by the\
    \ authorizing entity to\n   identify the request.  It may be used for a number\
    \ of purposes,\n   including replay detection, or to correlate this request to\
    \ a policy\n   decision entry made by the authorizing entity.  For example, the\n\
    \   SESSION_ID can be based on simple sequence numbers or on a standard\n   NTP\
    \ timestamp.\n    0                   1                   2                  \
    \ 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |    X-Type     |   SubType     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   //                        OctetString ...                      //\n   +---------------------------------------------------------------+\n\
    \   Length: Length of the attribute, which MUST be > 4.\n   X-Type: SESSION_ID\n\
    \   SubType:\n   No sub-types for SESSION_ID are currently defined; this field\
    \ MUST be\n   set to zero.  The authorizing entity is the only network entity\
    \ that\n   needs to interpret the contents of the SESSION_ID; therefore, the\n\
    \   contents and format are implementation dependent.\n   OctetString: The OctetString\
    \ contains the session identifier.\n"
- title: 3.2.3.  Source Address
  contents:
  - "3.2.3.  Source Address\n   SOURCE_ADDR is used to identify the source address\
    \ specification of\n   the authorized session.  This X-Type may be useful in some\
    \ scenarios\n   to make sure the resource request has been authorized for that\n\
    \   particular source address and/or port.  Usually, it corresponds to\n   the\
    \ signaling source, e.g., the IP source address of the GIST packet,\n   or flow\
    \ source or flow destination address, respectively, which are\n   contained in\
    \ the GIST MRI (Message Routing Information) object.\n    0                  \
    \ 1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |    X-Type     |   SubType     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   //                        OctetString ...                      //\n   +---------------------------------------------------------------+\n\
    \   Length: Length of the attribute, which MUST be > 4.\n   X-Type: SOURCE_ADDR\n\
    \   SubType:\n      The following sub-types for SOURCE_ADDR are defined.  IANA\
    \ acts as\n      a registry for SOURCE_ADDR SubTypes as described in Section 8,\n\
    \      IANA Considerations.  Initially, the registry contains the\n      following\
    \ SubTypes for SOURCE_ADDR:\n      1.  IPV4_ADDRESS: IPv4 address represented\
    \ in 32 bits.\n      2.  IPV6_ADDRESS: IPv6 address represented in 128 bits.\n\
    \      3.  UDP_PORT_LIST: list of UDP port specifications, represented as\n  \
    \        16 bits per list entry.\n      4.  TCP_PORT_LIST: list of TCP port specifications,\
    \ represented as\n          16 bits per list entry.\n      5.  SPI: Security Parameter\
    \ Index, represented in 32 bits.\n   OctetString: The OctetString contains the\
    \ source address information.\n   In scenarios where a source address is required\
    \ (see Section 5), at\n   least one of the sub-types 1 or 2 MUST be included in\
    \ every Session\n   Authorization Object.  Multiple SOURCE_ADDR attributes MAY\
    \ be\n   included if multiple addresses have been authorized.  The source\n  \
    \ address of the request (e.g., a QoS NSLP RESERVE) MUST match one of\n   the\
    \ SOURCE_ADDR attributes contained in this Session Authorization\n   Object.\n\
    \   At most, one instance of sub-type 3 MAY be included in every Session\n   Authorization\
    \ Object.  At most, one instance of sub-type 4 MAY be\n   included in every Session\
    \ Authorization Object.  Inclusion of a sub-\n   type 3 attribute does not prevent\
    \ inclusion of a sub-type 4 attribute\n   (i.e., both UDP and TCP ports may be\
    \ authorized).\n   If no PORT attributes are specified, then all ports are considered\n\
    \   valid; otherwise, only the specified ports are authorized for use.\n   Every\
    \ source address and port list must be included in a separate\n   SOURCE_ADDR\
    \ attribute.\n"
- title: 3.2.4.  Destination Address
  contents:
  - "3.2.4.  Destination Address\n   DEST_ADDR is used to identify the destination\
    \ address of the\n   authorized session.  This X-Type may be useful in some scenarios\
    \ to\n   make sure the resource request has been authorized for that\n   particular\
    \ destination address and/or port.\n    0                   1                \
    \   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |    X-Type     |   SubType     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   //                        OctetString ...                      //\n   +---------------------------------------------------------------+\n\
    \   Length: Length of the attribute in number of octets, which MUST be >\n   4.\n\
    \   X-Type: DEST_ADDR\n   SubType:\n      The following sub-types for DEST_ADDR\
    \ are defined.  IANA acts as a\n      registry for DEST_ADDR SubTypes as described\
    \ in Section 8, IANA\n      Considerations.  Initially, the registry contains\
    \ the following\n      SubTypes for DEST_ADDR:\n      1.  IPV4_ADDRESS: IPv4 address\
    \ represented in 32 bits.\n      2.  IPV6_ADDRESS: IPv6 address represented in\
    \ 128 bits.\n      3.  UDP_PORT_LIST: list of UDP port specifications, represented\
    \ as\n          16 bits per list entry.\n      4.  TCP_PORT_LIST: list of TCP\
    \ port specifications, represented as\n          16 bits per list entry.\n   \
    \   5.  SPI: Security Parameter Index, represented in 32 bits.\n   OctetString:\
    \ The OctetString contains the destination address\n   specification.\n   In scenarios\
    \ where a destination address is required (see Section 5),\n   at least one of\
    \ the sub-types 1 or 2 MUST be included in every\n   Session Authorization Object.\
    \  Multiple DEST_ADDR attributes MAY be\n   included if multiple addresses have\
    \ been authorized.  The destination\n   address field of the resource reservation\
    \ datagram (e.g., QoS NSLP\n   Reserve) MUST match one of the DEST_ADDR attributes\
    \ contained in this\n   Session Authorization Object.\n   At most, one instance\
    \ of sub-type 3 MAY be included in every Session\n   Authorization Object.  At\
    \ most, one instance of sub-type 4 MAY be\n   included in every Session Authorization\
    \ Object.  Inclusion of a sub-\n   type 3 attribute does not prevent inclusion\
    \ of a sub-type 4 attribute\n   (i.e., both UDP and TCP ports may be authorized).\n\
    \   If no PORT attributes are specified, then all ports are considered\n   valid;\
    \ otherwise, only the specified ports are authorized for use.\n   Every destination\
    \ address and port list must be included in a\n   separate DEST_ADDR attribute.\n"
- title: 3.2.5.  Start Time
  contents:
  - "3.2.5.  Start Time\n   START_TIME is used to identify the start time of the authorized\n\
    \   session and can be used to prevent replay attacks.  If the\n   SESSION_AUTH\
    \ object is presented in a resource request, the network\n   SHOULD reject the\
    \ request if it is not received within a few seconds\n   of the start time specified.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |    X-Type     |   SubType     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   //                        OctetString ...                      //\n   +---------------------------------------------------------------+\n\
    \   Length: Length of the attribute, which MUST be > 4.\n   X-Type: START_TIME\n\
    \   SubType:\n   The following sub-type for START_TIME is defined.  IANA acts\
    \ as a\n   registry for START_TIME SubTypes as described in Section 8, IANA\n\
    \   Considerations.  Initially, the registry contains the following\n   SubType\
    \ for START_TIME:\n      1 NTP_TIMESTAMP: NTP Timestamp Format as defined in RFC\
    \ 5905\n      [RFC5905].\n   OctetString: The OctetString contains the start time.\n"
- title: 3.2.6.  End Time
  contents:
  - "3.2.6.  End Time\n   END_TIME is used to identify the end time of the authorized\
    \ session\n   and can be used to limit the amount of time that resources are\n\
    \   authorized for use (e.g., in prepaid session scenarios).\n    0          \
    \         1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |    X-Type     |   SubType     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   //                        OctetString ...                      //\n   +---------------------------------------------------------------+\n\
    \   Length: Length of the attribute, which MUST be > 4.\n   X-Type: END_TIME\n\
    \   SubType:\n   The following sub-type for END_TIME is defined.  IANA acts as\
    \ a\n   registry for END_TIME SubTypes as described in Section 8, IANA\n   Considerations.\
    \  Initially, the registry contains the following\n   SubType for END_TIME:\n\
    \      1 NTP_TIMESTAMP: NTP Timestamp Format as defined in RFC 5905\n      [RFC5905].\n\
    \   OctetString: The OctetString contains the end time.\n"
- title: 3.2.7.  NSLP Object List
  contents:
  - "3.2.7.  NSLP Object List\n   The NSLP_OBJECT_LIST attribute contains a list of\
    \ NSLP object types\n   that are used in the keyed-hash computation whose result\
    \ is given in\n   the AUTHENTICATION_DATA attribute.  This allows for an integrity\n\
    \   protection of NSLP PDUs.  If an NSLP_OBJECT_LIST attribute has been\n   included\
    \ in the SESSION_AUTH object, an AUTHENTICATION_DATA attribute\n   MUST also be\
    \ present.\n   The creator of this attribute lists every NSLP object type whose\
    \ NSLP\n   PDU object was included in the computation of the hash.  The hash\n\
    \   computation has to follow the order of the NSLP object types as\n   specified\
    \ by the list.  The receiver can verify the integrity of the\n   NSLP PDU by computing\
    \ a hash over all NSLP objects that are listed in\n   this attribute (in the given\
    \ order), including all the attributes of\n   the authorization object.  Since\
    \ all NSLP object types are unique\n   over all different NSLPs, this will work\
    \ for any NSLP.\n   Basic NSIS Transport Layer Protocol (NTLP) / NSLP objects\
    \ like the\n   session ID, the NSLPID, and the MRI MUST be always included in\
    \ the\n   HMAC.  Since they are not carried within the NSLP itself, but only\n\
    \   within GIST, they have to be provided for HMAC calculation, e.g.,\n   they\
    \ can be delivered via the GIST API.  They MUST be normalized to\n   their network\
    \ representation from [RFC5971] again before calculating\n   the hash.  These\
    \ values MUST be hashed first (in the order session\n   ID, NSLPID, MRI), before\
    \ any other NSLP object values that are\n   included in the hash computation.\n\
    \   A summary of the NSLP_OBJECT_LIST attribute format is described\n   below.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +---------------+---------------+---------------+---------------+\n\
    \   | Length                        | NSLP_OBJ_LIST |     zero      |\n   +---------------+---------------+-------+-------+---------------+\n\
    \   | # of signed NSLP objects = n  |  rsv  |  NSLP object type (1) |\n   +-------+-------+---------------+-------+-------+---------------+\n\
    \   |  rsv  | NSLP object type (2)  |             .....            //\n   +-------+-------+---------------+---------------+---------------+\n\
    \   |  rsv  | NSLP object type (n)  |     (padding if required)     |\n   +--------------+----------------+---------------+---------------+\n\
    \   Length: Length of the attribute, which MUST be > 4.\n   X-Type: NSLP_OBJECT_LIST\n\
    \   SubType: No sub-types for NSLP_OBJECT_LIST are currently defined.\n   This\
    \ field MUST be set to 0 and ignored upon reception.\n   # of signed NSLP objects:\
    \ The number n of NSLP object types that\n   follow. n=0 is allowed; in that case,\
    \ only a padding field is\n   contained.\n   rsv: reserved bits; MUST be set to\
    \ 0 and ignored upon reception.\n   NSLP object type: the NSLP 12-bit object type\
    \ identifier of the\n   object that was included in the hash calculation.  The\
    \ NSLP object\n   type values comprise only 12 bits, so four bits per type value\
    \ are\n   currently not used within the list.  Depending on the number of\n  \
    \ signed objects, a corresponding padding word of 16 bits must be\n   supplied.\n\
    \   padding: padding MUST be added if the number of NSLP objects is even\n   and\
    \ MUST NOT be added if the number of NSLP objects is odd.  If\n   padding has\
    \ to be applied, the padding field MUST be 16 bits set to\n   0, and its contents\
    \ MUST be ignored upon reception.\n"
- title: 3.2.8.  Authentication Data
  contents:
  - "3.2.8.  Authentication Data\n   The AUTHENTICATION_DATA attribute contains the\
    \ authentication data of\n   the SESSION_AUTH object and signs all the data in\
    \ the object up to\n   the AUTHENTICATION_DATA.  If the AUTHENTICATION_DATA attribute\
    \ has\n   been included in the SESSION_AUTH object, it MUST be the last\n   attribute\
    \ in the list.  The algorithm used to compute the\n   authentication data depends\
    \ on the AUTH_ENT_ID SubType field.  See\n   Section 4 entitled \"Integrity of\
    \ the SESSION_AUTH Object\".\n   A summary of the AUTHENTICATION_DATA attribute\
    \ format is described\n   below.\n    0                   1                  \
    \ 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |    X-Type     |   SubType     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   //                        OctetString ...                      //\n   +---------------------------------------------------------------+\n\
    \   Length: Length of the attribute, which MUST be > 4.\n   X-Type: AUTHENTICATION_DATA\n\
    \   SubType: No sub-types for AUTHENTICATION_DATA are currently defined.\n   This\
    \ field MUST be set to 0 and ignored upon reception.\n   OctetString: The OctetString\
    \ contains the authentication data of the\n   SESSION_AUTH.\n"
- title: 4.  Integrity of the SESSION_AUTH Object
  contents:
  - "4.  Integrity of the SESSION_AUTH Object\n   This section describes how to ensure\
    \ that the integrity of the\n   SESSION_AUTH object is preserved.\n"
- title: 4.1.  Shared Symmetric Keys
  contents:
  - "4.1.  Shared Symmetric Keys\n   In shared symmetric key environments, the AUTH_ENT_ID\
    \ MUST be of sub-\n   types: IPV4_ADDRESS, IPV6_ADDRESS, FQDN, ASCII_DN, UNICODE_DN,\
    \ or\n   URI.  An example SESSION_AUTH object is shown below.\n    0         \
    \          1                   2                   3\n    0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1|0|0|0| Type = SESSION_AUTH   |0|0|0|0|    Object Length      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |   AUTH_ENT_ID | IPV4_ADDRESS  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   OctetString ...   (The authorizing entity's Identifier)     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |   AUTH_DATA   |     zero      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                            Key-ID                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   OctetString ...   (Authentication data)                     |\n   +---------------------------------------------------------------+\n\
    \                Figure 1: Example of a SESSION_AUTH Object\n"
- title: 4.1.1.  Operational Setting Using Shared Symmetric Keys
  contents:
  - "4.1.1.  Operational Setting Using Shared Symmetric Keys\n   This assumes both\
    \ the Authorizing Entity and the network router/PDP\n   (Policy Decision Point)\
    \ are provisioned with shared symmetric keys,\n   policies detailing which algorithm\
    \ to be used for computing the\n   authentication data, and the expected length\
    \ of the authentication\n   data for that particular algorithm.\n   Key maintenance\
    \ is outside the scope of this document, but\n   SESSION_AUTH implementations\
    \ MUST at least provide the ability to\n   manually configure keys and their parameters.\
    \  The key used to\n   produce the authentication data is identified by the AUTH_ENT_ID\n\
    \   field.  Since multiple keys may be configured for a particular\n   AUTH_ENT_ID\
    \ value, the first 32 bits of the AUTHENTICATION_DATA field\n   MUST be a Key-ID\
    \ to be used to identify the appropriate key.  Each\n   key must also be configured\
    \ with lifetime parameters for the time\n   period within which it is valid as\
    \ well as an associated\n   cryptographic algorithm parameter specifying the algorithm\
    \ to be used\n   with the key.  At a minimum, all SESSION_AUTH implementations\
    \ MUST\n   support the HMAC-SHA2-256 [RFC4868] [RFC2104] cryptographic algorithm\n\
    \   for computing the authentication data.\n   It is good practice to regularly\
    \ change keys.  Keys MUST be\n   configurable such that their lifetimes overlap,\
    \ thereby allowing\n   smooth transitions between keys.  At the midpoint of the\
    \ lifetime\n   overlap between two keys, senders should transition from using\
    \ the\n   current key to the next/longer-lived key.  Meanwhile, receivers\n  \
    \ simply accept any identified key received within its configured\n   lifetime\
    \ and reject those that are not.\n"
- title: 4.2.  Kerberos
  contents:
  - "4.2.  Kerberos\n   Since Kerberos [RFC4120] is widely used for end-user authorization,\n\
    \   e.g., in Windows domains, it is well suited for being used in the\n   context\
    \ of user-based authorization for NSIS sessions.  For instance,\n   a user may\
    \ request a ticket for authorization to install rules in an\n   NATFW-capable\
    \ router.\n   In a Kerberos environment, it is assumed that the user of the NSLP\n\
    \   requesting host requests a ticket from the Kerberos Key Distribution\n   Center\
    \ (KDC) for using the NSLP node (router) as a resource (target\n   service). \
    \ The NSLP requesting host (client) can present the ticket\n   to the NSLP node\
    \ via Kerberos by sending a KRB_CRED message to the\n   NSLP node independently\
    \ but prior to the NSLP exchange.  Thus, the\n   principal name of the service\
    \ must be known at the client in advance,\n   though the exact IP address may\
    \ not be known in advance.  How the\n   name is assigned and made available to\
    \ the client is implementation\n   specific.  The extracted common session key\
    \ can subsequently be used\n   to employ the HMAC_SIGNED variant of the SESSION_AUTH\
    \ object.\n   Another option is to encapsulate the credentials in the\n   AUTHENTICATION_DATA\
    \ portion of the SESSION_AUTH object.  In this\n   case, the AUTH_ENT_ID MUST\
    \ be of the sub-type KRB_PRINCIPAL.  The\n   KRB_PRINCIPAL field is defined as\
    \ the Fully Qualified Kerberos\n   Principal name of the authorizing entity. \
    \ The AUTHENTICATION_DATA\n   portion of the SESSION_AUTH object contains the\
    \ KRB_CRED message that\n   the receiving NSLP node has to extract and verify.\
    \  A second\n   SESSION_AUTH object of type HMAC_SIGNED SHOULD protect the integrity\n\
    \   of the NSLP message, including the prior SESSION_AUTH object.  The\n   session\
    \ key included in the first SESSION_AUTH object has to be used\n   for HMAC calculation.\n\
    \   An example of the Kerberos AUTHENTICATION_DATA object is shown below\n   in\
    \ Figure 2.\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1|0|0|0| Type = SESSION_AUTH   |0|0|0|0|    Object Length      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |   AUTH_ENT_ID |  KERB_P.      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   OctetString ...   (The principal@realm name)                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |   AUTH_DATA   |     zero      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   OctetString ...   (KRB_CRED Data)                           |\n   +---------------------------------------------------------------+\n\
    \        Figure 2: Example of a Kerberos AUTHENTICATION_DATA Object\n"
- title: 4.3.  Public Key
  contents:
  - "4.3.  Public Key\n   In a public key environment, the AUTH_ENT_ID MUST be of\
    \ the sub-\n   types: X509_V3_CERT or PGP_CERT.  The authentication data is used\
    \ for\n   authenticating the authorizing entity.  Two examples of the public\n\
    \   key SESSION_AUTH object are shown in Figures 3 and 4.\n    0             \
    \      1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1|0|0|0| Type = SESSION_AUTH   |0|0|0|0|    Object Length      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |   AUTH_ENT_ID |   PGP_CERT    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   OctetString ...   (Authorizing entity Digital Certificate)  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |   AUTH_DATA   |     zero      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   OctetString ...   (Authentication data)                     |\n   +---------------------------------------------------------------+\n\
    \    Figure 3: Example of a SESSION_AUTH_OBJECT Using a PGP Certificate\n    0\
    \                   1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1|0|0|0| Type = SESSION_AUTH   |0|0|0|0|    Object   Length    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |   AUTH_ENT_ID | X509_V3_CERT  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   OctetString ...   (Authorizing entity Digital Certificate)  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |   AUTH_DATA   |     zero      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   OctetString ...   (Authentication data)                     |\n   +---------------------------------------------------------------+\n\
    \     Figure 4: Example of a SESSION_AUTH_OBJECT Using an X509_V3_CERT\n     \
    \                           Certificate\n"
- title: 4.3.1.  Operational Setting for Public-Key-Based Authentication
  contents:
  - "4.3.1.  Operational Setting for Public-Key-Based Authentication\n   Public-key-based\
    \ authentication assumes the following:\n   o  Authorizing entities have a pair\
    \ of keys (private key and public\n      key).\n   o  The private key is secured\
    \ with the authorizing entity.\n   o  Public keys are stored in digital certificates;\
    \ a trusted party,\n      the certificate authority (CA), issues these digital\
    \ certificates.\n   o  The verifier (PDP or router) has the ability to verify\
    \ the digital\n      certificate.\n   The authorizing entity uses its private\
    \ key to generate\n   AUTHENTICATION_DATA.  Authenticators (router, PDP) use the\n\
    \   authorizing entity's public key (stored in the digital certificate)\n   to\
    \ verify and authenticate the object.\n"
- title: 4.3.1.1.  X.509 V3 Digital Certificates
  contents:
  - "4.3.1.1.  X.509 V3 Digital Certificates\n   When the AUTH_ENT_ID is of type X509_V3_CERT,\
    \ AUTHENTICATION_DATA\n   MUST be generated by the authorizing entity following\
    \ these steps:\n   o  A signed-data is constructed as defined in RFC 5652 [RFC5652].\
    \  A\n      digest is computed on the content (as specified in Section 6.1)\n\
    \      with a signer-specific message-digest algorithm.  The certificates\n  \
    \    field contains the chain of X.509 V3 digital certificates from\n      each\
    \ authorizing entity.  The certificate revocation list is\n      defined in the\
    \ crls field.  The digest output is digitally signed\n      following Section\
    \ 8 of RFC 3447 [RFC3447], using the signer's\n      private key.\n   When the\
    \ AUTH_ENT_ID is of type X509_V3_CERT, verification at the\n   verifying network\
    \ element (PDP or router) MUST be done following\n   these steps:\n   o  Parse\
    \ the X.509 V3 certificate to extract the distinguished name\n      of the issuer\
    \ of the certificate.\n   o  Certification Path Validation is performed as defined\
    \ in Section 6\n      of RFC 5280 [RFC5280].\n   o  Parse through the Certificate\
    \ Revocation list to verify that the\n      received certificate is not listed.\n\
    \   o  Once the X.509 V3 certificate is validated, the public key of the\n   \
    \   authorizing entity can be extracted from the certificate.\n   o  Extract the\
    \ digest algorithm and the length of the digested data\n      by parsing the CMS\
    \ (Cryptographic Message Syntax) signed-data.\n   o  The recipient independently\
    \ computes the message digest.  This\n      message digest and the signer's public\
    \ key are used to verify the\n      signature value.\n   This verification ensures\
    \ integrity, non-repudiation, and data\n   origin.\n"
- title: 4.3.1.2.  PGP Digital Certificates
  contents:
  - "4.3.1.2.  PGP Digital Certificates\n   When the AUTH_ENT_ID is of type PGP_CERT,\
    \ AUTHENTICATION_DATA MUST be\n   generated by the authorizing entity following\
    \ these steps:\n   AUTHENTICATION_DATA contains a Signature Packet as defined\
    \ in Section\n   5.2.3 of RFC 4880 [RFC4880].  In summary:\n   o  Compute the\
    \ hash of all data in the SESSION_AUTH object up to the\n      AUTHENTICATION_DATA.\n\
    \   o  The hash output is digitally signed following Section 8 of RFC\n      3447,\
    \ using the signer's private key.\n   When the AUTH_ENT_ID is of type PGP_CERT,\
    \ verification MUST be done\n   by the verifying network element (PDP or router)\
    \ following these\n   steps:\n   o  Validate the certificate.\n   o  Once the\
    \ PGP certificate is validated, the public key of the\n      authorizing entity\
    \ can be extracted from the certificate.\n   o  Extract the hash algorithm and\
    \ the length of the hashed data by\n      parsing the PGP signature packet.\n\
    \   o  The recipient independently computes the message digest.  This\n      message\
    \ digest and the signer's public key are used to verify the\n      signature value.\n\
    \   This verification ensures integrity, non-repudiation, and data\n   origin.\n"
- title: 4.4.  HMAC Signed
  contents:
  - "4.4.  HMAC Signed\n   A SESSION_AUTH object that carries an AUTH_ENT_ID of HMAC_SIGNED\
    \ is\n   used as integrity protection for NSLP messages.  The SESSION_AUTH\n \
    \  object MUST contain the following attributes:\n   o  SOURCE_ADDR: the source\
    \ address of the entity that created the\n      HMAC\n   o  START_TIME: the timestamp\
    \ when the HMAC signature was calculated.\n      This MUST be different for any\
    \ two messages in sequence in order\n      to prevent replay attacks.  The NTP\
    \ timestamp currently provides a\n      resolution of 200 picoseconds, which should\
    \ be sufficient.\n   o  NSLP_OBJECT_LIST: this attribute lists all NSLP objects\
    \ that are\n      included in HMAC calculation.\n   o  AUTHENTICATION_DATA: this\
    \ attribute contains the Key-ID that is\n      used for HMAC calculation as well\
    \ as the HMAC data itself\n      [RFC2104].\n   The key used for HMAC calculation\
    \ must be exchanged securely by some\n   other means, e.g., a Kerberos Ticket\
    \ or pre-shared manual\n   installation etc.  The Key-ID in the AUTHENTICATION_DATA\
    \ allows the\n   reference to the appropriate key and also to periodically change\n\
    \   signing keys within a session.  The key length MUST be at least 64\n   bits,\
    \ but it is ideally longer in order to defend against brute-force\n   attacks\
    \ during the key validity period.  For scalability reasons it\n   is suggested\
    \ to use a per-user key for signing NSLP messages, but\n   using a per-session\
    \ key is possible, too, at the cost of a per-\n   session key exchange.  A per-user\
    \ key allows for verification of the\n   authenticity of the message and thus\
    \ provides a basis for a session-\n   based per-user authorization.  It is RECOMMENDED\
    \ to periodically\n   change the shared key in order to prevent eavesdroppers\
    \ from\n   performing brute-force off-line attacks on the shared key.  The\n \
    \  actual hash algorithm used in the HMAC computation is specified by\n   the\
    \ \"Transform ID\" field (given as Transform Type 3 of the IKEv2\n   registry\
    \ [RFC5996]).  The hash algorithm MUST be chosen consistently\n   between the\
    \ object creator and the NN verifying the HMAC; this can be\n   accomplished by\
    \ out-of-band mechanisms when the shared key is\n   exchanged.\n   Figure 5 shows\
    \ an example of an object that is used for integrity\n   protection of NSLP messages.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1|0|0|0| Type = SESSION_AUTH   |0|0|0|0|    Object   Length    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |   AUTH_ENT_ID | HMAC_SIGNED   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                   reserved                    | Transform ID  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             | SOURCE_ADDR   |  IPV4_ADDRESS |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                IPv4 Source Address of NSLP sender             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |  START_TIME   | NTP_TIME_STAMP|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        NTP Time Stamp (1)                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        NTP Time Stamp (2)                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             | NSLP_OBJ_LIST |     zero      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |No. of signed NSLP objects = n |  rsv  |  NSLP object type (1) |\n   +-------+-------+---------------+-------+-------+---------------+\n\
    \   |  rsv  | NSLP object type (2)  |             .....            //\n   +-------+-------+---------------+---------------+---------------+\n\
    \   |  rsv  | NSLP object type (n)  |     (padding if required)     |\n   +--------------+----------------+---------------+---------------+\n\
    \   |            Length             |   AUTH_DATA   |     zero      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                            Key-ID                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Message Authentication Code HMAC Data                |\n   +---------------------------------------------------------------+\n\
    \    Figure 5: Example of a SESSION_AUTH_OBJECT That Provides Integrity\n    \
    \                   Protection for NSLP Messages\n"
- title: 5.  Framework
  contents:
  - "5.  Framework\n   RFC 3521 [RFC3521] describes a framework in which the SESSION_AUTH\n\
    \   object may be utilized to transport information required for\n   authorizing\
    \ resource reservation for data flows (e.g., media flows).\n   RFC 3521 introduces\
    \ four different models:\n   1.  The coupled model\n   2.  The associated model\
    \ with one policy server\n   3.  The associated model with two policy servers\n\
    \   4.  The non-associated model\n   The fields that are required in a SESSION_AUTH\
    \ object depend on which\n   of the models is used.\n"
- title: 5.1.  The Coupled Model
  contents:
  - "5.1.  The Coupled Model\n   In the coupled model, the only information that MUST\
    \ be included in\n   the SESSION_AUTH object is the SESSION_ID; it is used by\
    \ the\n   Authorizing Entity to correlate the resource reservation request with\n\
    \   the media authorized during session setup.  Since the End Host is\n   assumed\
    \ to be untrusted, the Policy Server SHOULD take measures to\n   ensure that the\
    \ integrity of the SESSION_ID is preserved in transit;\n   the exact mechanisms\
    \ to be used and the format of the SESSION_ID are\n   implementation dependent.\n"
- title: 5.2.  The Associated Model with One Policy Server
  contents:
  - "5.2.  The Associated Model with One Policy Server\n   In this model, the contents\
    \ of the SESSION_AUTH object MUST include:\n   o  A session identifier - SESSION_ID.\
    \  This is information that the\n      authorizing entity can use to correlate\
    \ the resource request with\n      the data flows authorized during session setup.\n\
    \   o  The identity of the authorizing entity - AUTH_ENT_ID.  This\n      information\
    \ is used by an NN to determine which authorizing entity\n      (Policy Server)\
    \ should be used to solicit resource policy\n      decisions.\n   In some environments,\
    \ an NN may have no means for determining if the\n   identity refers to a legitimate\
    \ Policy Server within its domain.  In\n   order to protect against redirection\
    \ of authorization requests to a\n   bogus authorizing entity, the SESSION_AUTH\
    \ MUST also include:\n      AUTHENTICATION_DATA.  This authentication data is\
    \ calculated over\n      all other fields of the SESSION_AUTH object.\n"
- title: 5.3.  The Associated Model with Two Policy Servers
  contents:
  - "5.3.  The Associated Model with Two Policy Servers\n   The content of the SESSION_AUTH\
    \ object is identical to the associated\n   model with one policy server.\n"
- title: 5.4.  The Non-Associated Model
  contents:
  - "5.4.  The Non-Associated Model\n   In this model, the SESSION_AUTH object MUST\
    \ contain sufficient\n   information to allow the Policy Server to make resource\
    \ policy\n   decisions autonomously from the authorizing entity.  The object is\n\
    \   created using information about the session by the authorizing\n   entity.\
    \  The information in the SESSION_AUTH object MUST include:\n   o  Initiating\
    \ party's IP address or Identity (e.g., FQDN) -\n      SOURCE_ADDR X-Type\n  \
    \ o  Responding party's IP address or Identity (e.g., FQDN) - DEST_ADDR\n    \
    \  X-Type\n   o  The authorization lifetime - START_TIME X-Type\n   o  The identity\
    \ of the authorizing entity to allow for validation of\n      the token in shared\
    \ symmetric key and Kerberos schemes -\n      AUTH_ENT_ID X-Type\n   o  The credentials\
    \ of the authorizing entity in a public-key scheme -\n      AUTH_ENT_ID X-Type\n\
    \   o  Authentication data used to prevent tampering with the\n      SESSION_AUTH\
    \ object - AUTHENTICATION_DATA X-Type\n   Furthermore, the SESSION_AUTH object\
    \ MAY contain:\n   o  The lifetime of (each of) the media stream(s) - END_TIME\
    \ X-Type\n   o  Initiating party's port number - SOURCE_ADDR X-Type\n   o  Responding\
    \ party's port number - DEST_ADDR X-Type\n   All SESSION_AUTH fields MUST match\
    \ with the resource request.  If a\n   field does not match, the request SHOULD\
    \ be denied.\n"
- title: 6.  Message Processing Rules
  contents:
  - "6.  Message Processing Rules\n   This section discusses the message processing\
    \ related to the\n   SESSION_AUTH object.  Details of the processing of the SESSION_AUTH\n\
    \   object within QoS NSLP and NATFW NSLP are described.  New NSLP\n   protocols\
    \ should use the same logic in making use of the SESSION_AUTH\n   object.\n"
- title: 6.1.  Generation of the SESSION_AUTH by an Authorizing Entity
  contents:
  - "6.1.  Generation of the SESSION_AUTH by an Authorizing Entity\n   1.  Generate\
    \ the SESSION_AUTH object with the appropriate contents as\n       specified in\
    \ Section 3.\n   2.  If authentication is needed, the entire SESSION_AUTH object\
    \ is\n       constructed, excluding the length, type, and SubType fields of\n\
    \       the SESSION_AUTH field.  Note that the message MUST include a\n      \
    \ START_TIME to prevent replay attacks.  The output of the\n       authentication\
    \ algorithm, plus appropriate header information, is\n       appended as the AUTHENTICATION_DATA\
    \ attribute to the SESSION_AUTH\n       object.\n"
- title: 6.2.  Processing within the QoS NSLP
  contents:
  - "6.2.  Processing within the QoS NSLP\n   The SESSION_AUTH object may be used\
    \ with QoS NSLP QUERY and RESERVE\n   messages to authorize the query operation\
    \ for network resources, and\n   a resource reservation request, respectively.\n\
    \   Moreover, the SESSION_AUTH object may also be used with RESPONSE\n   messages\
    \ in order to indicate that the authorizing entity changed the\n   original request.\
    \  For example, the session start or end times may\n   have been modified, or\
    \ the client may have requested authorization\n   for all ports, but the authorizing\
    \ entity only allowed the use of\n   certain ports.\n   If the QoS NSIS Initiator\
    \ (QNI) receives a RESPONSE message with a\n   SESSION_AUTH object, the QNI MUST\
    \ inspect the SESSION_AUTH object to\n   see which authentication attribute was\
    \ changed by an authorizing\n   entity.  The QNI SHOULD also silently accept SESSION_AUTH\
    \ objects in\n   the RESPONSE message that do not indicate any change to the original\n\
    \   authorization request.\n"
- title: 6.2.1.  Message Generation
  contents:
  - "6.2.1.  Message Generation\n   A QoS NSLP message is created as specified in\
    \ [RFC5974].\n   1.  The policy element received from the authorizing entity MUST\
    \ be\n       copied without modification into the SESSION_AUTH object.\n   2.\
    \  The SESSION_AUTH object (containing the policy element) is\n       inserted\
    \ in the NSLP message in the appropriate place.\n"
- title: 6.2.2.  Message Reception
  contents:
  - "6.2.2.  Message Reception\n   The QoS NSLP message is processed as specified\
    \ in [RFC5974] with the\n   following modifications.\n   1.  If the QoS NSIS Entity\
    \ (QNE) is policy aware then it SHOULD use\n       the Diameter QoS application\
    \ or the RADIUS QoS protocol to\n       communicate with the PDP.  To construct\
    \ the AAA message it is\n       necessary to extract the SESSION_AUTH object and\
    \ the QoS-related\n       objects from the QoS NSLP message and to craft the respective\n\
    \       RADIUS or Diameter message.  The message processing and object\n     \
    \  format are described in the respective RADIUS or Diameter QoS\n       protocol,\
    \ respectively.  If the QNE is policy unaware, then it\n       ignores the policy\
    \ data objects and continues processing the NSLP\n       message.\n   2.  If the\
    \ response from the PDP is negative, the request must be\n       rejected.  A\
    \ negative response in RADIUS is an Access-Reject, and\n       in Diameter is\
    \ based on the 'DIAMETER_SUCCESS' value in the\n       Result-Code AVP of the\
    \ QoS-Authz-Answer (QAA) message.  The QNE\n       must construct and send a RESPONSE\
    \ message with the status of the\n       authorization failure as specified in\
    \ [RFC5974].\n   3.  Continue processing the NSIS message.\n"
- title: 6.2.3.  Authorization (QNE or PDP)
  contents:
  - "6.2.3.  Authorization (QNE or PDP)\n   1.  Retrieve the policy element from the\
    \ SESSION_AUTH object.  Check\n       the AUTH_ENT_ID type and SubType fields\
    \ and return an error if\n       the identity type is not supported.\n   2.  Verify\
    \ the message integrity.\n       *  Shared symmetric key authentication: The QNE\
    \ or PDP uses the\n          AUTH_ENT_ID field to consult a table keyed by that\
    \ field.  The\n          table should identify the cryptographic authentication\n\
    \          algorithm to be used along with the expected length of the\n      \
    \    authentication data and the shared symmetric key for the\n          authorizing\
    \ entity.  Verify that the indicated length of the\n          authentication data\
    \ is consistent with the configured table\n          entry and validate the authentication\
    \ data.\n       *  Public Key: Validate the certificate chain against the trusted\n\
    \          Certificate Authority (CA) and validate the message signature\n   \
    \       using the public key.\n       *  HMAC signed: The QNE or PDP uses the\
    \ Key-ID field of the\n          AUTHENTICATION_DATA attribute to consult a table\
    \ keyed by that\n          field.  The table should identify the cryptographic\n\
    \          authentication algorithm to be used along with the expected\n     \
    \     length of the authentication data and the shared symmetric key\n       \
    \   for the authorizing entity.  Verify that the indicated length\n          of\
    \ the authentication data is consistent with the configured\n          table entry\
    \ and validate the integrity of the parts of the\n          NSLP message, i.e.,\
    \ session ID, MRI, NSLPID, and all other\n          NSLP elements listed in the\
    \ NSLP_OBJECT_LIST authentication\n          data as well as the SESSION_AUTH\
    \ object contents (cf.\n          Section 6.4).\n       *  Kerberos: If AUTHENTICATION_DATA\
    \ contains an encapsulated\n          KRB_CRED message (cf. Section 4.2), the\
    \ integrity of the\n          KRB_CRED message can be verified within Kerberos\
    \ itself.\n          Moreover, if the same NSLP message contains another\n   \
    \       SESSION_AUTH object using HMAC_SIGNED, the latter can be used\n      \
    \    to verify the message integrity as described above.\n   3.  Once the identity\
    \ of the authorizing entity and the validity of\n       the service request have\
    \ been established, the authorizing\n       router/PDP MUST then consult its authorization\
    \ policy in order to\n       determine whether or not the specific request is\
    \ finally\n       authorized (e.g., based on available credits and on information\n\
    \       in the subscriber's database).  To the extent to which these\n       access\
    \ control decisions require supplementary information,\n       routers/PDPs MUST\
    \ ensure that supplementary information is\n       obtained securely.\n   4. \
    \ Verify that the requested resources do not exceed the authorized\n       QoS.\n"
- title: 6.2.4.  Error Signaling
  contents:
  - "6.2.4.  Error Signaling\n   When the PDP (e.g., a RADIUS or Diameter server)\
    \ fails to verify the\n   policy element, the appropriate actions described in\
    \ the respective\n   AAA document need to be taken.\n   The QNE node MUST return\
    \ a RESPONSE message with the INFO_SPEC error\n   code 'Authorization failure'\
    \ as defined in the QoS NSLP specification\n   [RFC5974].  The QNE MAY include\
    \ an INFO_SPEC Object Value Info to\n   indicate which SESSION_AUTH attribute\
    \ created the error.\n"
- title: 6.3.  Processing with the NATFW NSLP
  contents:
  - "6.3.  Processing with the NATFW NSLP\n   This section presents processing rules\
    \ for the NATFW NSLP [RFC5973].\n"
- title: 6.3.1.  Message Generation
  contents:
  - "6.3.1.  Message Generation\n   A NATFW NSLP message is created as specified in\
    \ [RFC5973].\n   1.  The policy element received from the authorizing entity MUST\
    \ be\n       copied without modification into the SESSION_AUTH object.\n   2.\
    \  The SESSION_AUTH object (containing the policy element) is\n       inserted\
    \ in the NATFW NSLP message in the appropriate place.\n"
- title: 6.3.2.  Message Reception
  contents:
  - "6.3.2.  Message Reception\n   The NATFW NSLP message is processed as specified\
    \ in [RFC5973] with\n   the following modifications.\n   1.  If the router is\
    \ policy aware, then it SHOULD use the Diameter\n       application or the RADIUS\
    \ protocol to communicate with the PDP.\n       To construct the AAA message,\
    \ it is necessary to extract the\n       SESSION_AUTH object and the objects related\
    \ to NATFW policy rules\n       from the NSLP message and to craft the respective\
    \ RADIUS or\n       Diameter message.  The message processing and object format\
    \ is\n       described in the respective RADIUS or Diameter protocols.  If the\n\
    \       router is policy unaware, then it ignores the policy data objects\n  \
    \     and continues processing the NSLP message.\n   2.  Reject the message if\
    \ the response from the PDP is negative.  A\n       negative response in RADIUS\
    \ is an Access-Reject, and in Diameter\n       is based on the 'DIAMETER_SUCCESS'\
    \ value in the Result-Code AVP.\n   3.  Continue processing the NSIS message.\n"
- title: 6.3.3.  Authorization (Router/PDP)
  contents:
  - "6.3.3.  Authorization (Router/PDP)\n   1.  Retrieve the policy element from the\
    \ SESSION_AUTH object.  Check\n       the AUTH_ENT_ID type and SubType fields\
    \ and return an error if\n       the identity type is not supported.\n   2.  Verify\
    \ the message integrity.\n       *  Shared symmetric key authentication: The network\
    \ router/PDP\n          uses the AUTH_ENT_ID field to consult a table keyed by\
    \ that\n          field.  The table should identify the cryptographic\n      \
    \    authentication algorithm to be used, along with the expected\n          length\
    \ of the authentication data and the shared symmetric key\n          for the authorizing\
    \ entity.  Verify that the indicated length\n          of the authentication data\
    \ is consistent with the configured\n          table entry and validate the authentication\
    \ data.\n       *  Public Key: Validate the certificate chain against the trusted\n\
    \          Certificate Authority (CA) and validate the message signature\n   \
    \       using the public key.\n       *  HMAC signed: The QNE or PDP uses the\
    \ Key-ID field of the\n          AUTHENTICATION_DATA attribute to consult a table\
    \ keyed by that\n          field.  The table should identify the cryptographic\n\
    \          authentication algorithm to be used along with the expected\n     \
    \     length of the authentication data and the shared symmetric key\n       \
    \   for the authorizing entity.  Verify that the indicated length\n          of\
    \ the authentication data is consistent with the configured\n          table entry\
    \ and validate the integrity of parts of the NSLP\n          message, i.e., session\
    \ ID, MRI, NSLPID, and all other NSLP\n          elements listed in the NSLP_OBJECT_LIST\
    \ authentication data as\n          well as the SESSION_AUTH object contents (cf.\
    \ Section 6.4).\n       *  Kerberos: If AUTHENTICATION_DATA contains an encapsulated\n\
    \          KRB_CRED message (cf. Section 4.2), the integrity of the\n        \
    \  KRB_CRED message can be verified within Kerberos itself.\n          Moreover,\
    \ an if the same NSLP message contains another\n          SESSION_AUTH object\
    \ using HMAC_SIGNED, the latter can be used\n          to verify the message integrity\
    \ as described above.\n   3.  Once the identity of the authorizing entity and\
    \ the validity of\n       the service request have been established, the authorizing\n\
    \       router/PDP MUST then consult its authorization policy in order to\n  \
    \     determine whether or not the specific request is authorized.  To\n     \
    \  the extent to which these access control decisions require\n       supplementary\
    \ information, routers/PDPs MUST ensure that\n       supplementary information\
    \ is obtained securely.\n"
- title: 6.3.4.  Error Signaling
  contents:
  - "6.3.4.  Error Signaling\n   When the PDP (e.g., a RADIUS or Diameter server)\
    \ fails to verify the\n   SESSION_AUTH object, the appropriate actions described\
    \ in the\n   respective AAA document need to be taken.  The NATFW NSLP node MUST\n\
    \   return an error message of class 'Permanent failure' (0x5) with error\n  \
    \ code 'Authorization failed' (0x02).\n"
- title: 6.4.  Integrity Protection of NSLP Messages
  contents:
  - "6.4.  Integrity Protection of NSLP Messages\n   The SESSION_AUTH object can also\
    \ be used to provide an integrity\n   protection for every NSLP signaling message,\
    \ thereby also\n   authenticating requests or responses.  Assume that a user has\n\
    \   deposited a shared key at some NN.  This NN can then verify the\n   integrity\
    \ of every NSLP message sent by the user to the NN.  Based on\n   this authentication,\
    \ the NN can apply authorization policies to\n   actions like resource reservations\
    \ or opening of firewall pinholes.\n   The sender of an NSLP message creates a\
    \ SESSION_AUTH object that\n   contains the AUTH_ENT_ID attribute set to HMAC_SIGNED\
    \ (cf.\n   Section 4.4) and hashes with the shared key over all NSLP objects\n\
    \   that need to be protected and lists them in the NSLP_OBJECT_LIST.\n   The\
    \ SESSION_AUTH object itself is also protected by the HMAC.  By\n   inclusion\
    \ of the SESSION_AUTH object into the NSLP message, the\n   receiver of this NSLP\
    \ message can verify its integrity if it has the\n   suitable shared key for the\
    \ HMAC.  Any response to the sender should\n   also be protected by inclusion\
    \ of a SESSION_AUTH object in order to\n   prevent attackers from sending unauthorized\
    \ responses on behalf of\n   the real NN.\n   If a SESSION_AUTH object is present\
    \ that has an AUTH_ENT_ID attribute\n   set to HMAC_SIGNED, the integrity of all\
    \ NSLP elements listed in the\n   NSLP_OBJECT_LIST has to be checked, including\
    \ the SESSION_AUTH object\n   contents itself.  Furthermore, session ID, MRI,\
    \ and NSLPID have to be\n   included into the HMAC calculation, too, as specified\
    \ in\n   Section 3.2.7.  The key that is used to calculate the HMAC is\n   referred\
    \ to by the Key-ID included in the AUTHENTICATION_DATA\n   attribute.  If the\
    \ provided timestamp in START_TIME is not recent\n   enough or the calculated\
    \ HMAC differs from the one provided in\n   AUTHENTICATION_DATA, the message must\
    \ be discarded silently and an\n   error should be logged locally.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document describes a mechanism for session\
    \ authorization to\n   prevent theft of service.  There are three types of security\
    \ issues\n   to consider: protection against replay attacks, integrity of the\n\
    \   SESSION_AUTH object, and the choice of the authentication algorithms\n   and\
    \ keys.\n   The first issue, replay attacks, MUST be prevented.  In the non-\n\
    \   associated model, the SESSION_AUTH object MUST include a START_TIME\n   field,\
    \ and the NNs as well as Policy Servers MUST support NTP to\n   ensure proper\
    \ clock synchronization.  Failure to ensure proper clock\n   synchronization will\
    \ allow replay attacks since the clocks of the\n   different network entities\
    \ may not be in sync.  The start time is\n   used to verify that the request is\
    \ not being replayed at a later\n   time.  In all other models, the SESSION_ID\
    \ is used by the Policy\n   Server to ensure that the resource request successfully\
    \ correlates\n   with records of an authorized session.  If a SESSION_AUTH object\
    \ is\n   replayed, it MUST be detected by the policy server (using internal\n\
    \   algorithms), and the request MUST be rejected.\n   The second issue, the integrity\
    \ of the SESSION_AUTH object, is\n   preserved in untrusted environments by including\
    \ the\n   AUTHENTICATION_DATA attribute in such environments.\n   In environments\
    \ where shared symmetric keys are possible, they should\n   be used in order to\
    \ keep the SESSION_AUTH object size to a strict\n   minimum, e.g., when wireless\
    \ links are used.  A secondary option\n   would be Public Key Infrastructure (PKI)\
    \ authentication, which\n   provides a high level of security and good scalability.\
    \  However, PKI\n   authentication requires the presence of credentials in the\n\
    \   SESSION_AUTH object, thus impacting its size.\n   The SESSION_AUTH object\
    \ can also serve to protect the integrity of\n   NSLP message parts by using the\
    \ HMAC_SIGNED Authentication Data as\n   described in Section 6.4.\n   When shared\
    \ keys are used, e.g., in AUTHENTICATION_DATA (cf.\n   Section 4.1) or in conjunction\
    \ with HMAC_SIGNED (cf. Section 4.4), it\n   is important that the keys are kept\
    \ secret, i.e., they must be\n   exchanged, stored, and managed in a secure and\
    \ confidential manner,\n   so that no unauthorized party gets access to the key\
    \ material.  If\n   the key material is disclosed to an unauthorized party,\n\
    \   authentication and integrity protection are ineffective.\n   Furthermore,\
    \ security considerations for public-key mechanisms using\n   the X.509 certificate\
    \ mechanisms described in [RFC5280] apply.\n   Similarly, security considerations\
    \ for PGP (Pretty Good Privacy)\n   described in [RFC4880] apply.\n   Further\
    \ security issues are outlined in RFC 4081 [RFC4081].\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   The SESSION_AUTH_OBJECT NSLP Message Object type\
    \ is specified as\n   0x016.\n   This document specifies an 8-bit Session authorization\
    \ attribute type\n   (X-Type) field as well as 8-bit SubType fields per X-Type,\
    \ for which\n   IANA has created and will maintain corresponding sub-registries\
    \ for\n   the NSLP Session Authorization Object.\n   Initial values for the X-Type\
    \ registry and the registration\n   procedures according to [RFC5226] are as follows:\n\
    \   Registration Procedure:\n      Specification Required\n   X-Type    Description\n\
    \   --------  -------------------\n   0         Reserved\n   1         AUTH_ENT_ID\n\
    \   2         SESSION_ID\n   3         SOURCE_ADDR\n   4         DEST_ADDR\n \
    \  5         START_TIME\n   6         END_TIME\n   7         NSLP_OBJECT_LIST\n\
    \   8         AUTHENTICATION_DATA\n   9-127     Unassigned\n   128-255   Reserved\
    \ for Private or Experimental Use\n   In the following, registration procedures\
    \ and initial values for the\n   SubType registries are specified.\n   Sub-registry:\
    \ AUTH_ENT_ID (X-Type 1) SubType values\n   Registration Procedure:\n      Specification\
    \ Required\n   Registry:\n   SubType   Description\n   --------  -------------\n\
    \   0         Reserved\n   1         IPV4_ADDRESS\n   2         IPV6_ADDRESS\n\
    \   3         FQDN\n   4         ASCII_DN\n   5         UNICODE_DN\n   6     \
    \    URI\n   7         KRB_PRINCIPAL\n   8         X509_V3_CERT\n   9        \
    \ PGP_CERT\n   10        HMAC_SIGNED\n   11-127    Unassigned\n   128-255   Reserved\
    \ for Private or Experimental Use\n   Sub-registry: SOURCE_ADDR (X-Type 3) SubType\
    \ values\n   Registration Procedure:\n      Specification Required\n   Registry:\n\
    \   SubType   Description\n   --------  -------------\n   0         Reserved\n\
    \   1         IPV4_ADDRESS\n   2         IPV6_ADDRESS\n   3         UDP_PORT_LIST\n\
    \   4         TCP_PORT_LIST\n   5         SPI\n   6-127     Unassigned\n   128-255\
    \   Reserved for Private or Experimental Use\n   Sub-registry: DEST_ADDR (X-Type\
    \ 4) SubType values\n   Registration Procedure:\n      Specification Required\n\
    \   Registry:\n   0         Reserved\n   1         IPV4_ADDRESS\n   2        \
    \ IPV6_ADDRESS\n   3         UDP_PORT_LIST\n   4         TCP_PORT_LIST\n   5 \
    \        SPI\n   6-127     Unassigned\n   128-255   Reserved for Private or Experimental\
    \ Use\n   Sub-registry: START_TIME (X-Type 5) SubType values\n   Registration\
    \ Procedure:\n      Specification Required\n   Registry:\n   SubType   Description\n\
    \   --------  -------------\n   0         Reserved\n   1         NTP_TIMESTAMP\n\
    \   2-127     Unassigned\n   128-255   Reserved for Private or Experimental Use\n\
    \   Sub-registry: END_TIME (X-Type 6) SubType values\n   Registration Procedure:\n\
    \      Specification Required\n   Registry:\n   SubType   Description\n   --------\
    \  -------------\n   0         Reserved\n   1         NTP_TIMESTAMP\n   2-127\
    \     Unassigned\n   128-255   Reserved for Private or Experimental Use\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   We would like to thank Xioaming Fu and Lars Eggert for\
    \ providing\n   reviews and comments.  Helpful comments were also provided by\
    \ Gen-ART\n   reviewer Ben Campbell, as well as Sean Turner and Tim Polk from\
    \ the\n   Security Area.  This document is largely based on the RFC 3520\n   [RFC3520]\
    \ and credit therefore goes to the authors of RFC 3520 --\n   namely, Louis-Nicolas\
    \ Hamer, Brett Kosinski, Bill Gage, and Hugh\n   Shieh.  Part of this work was\
    \ funded by Deutsche Telekom Laboratories\n   within the context of the BMBF-funded\
    \ ScaleNet project.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3447]  Jonsson, J. and B. Kaliski, \"Public-Key Cryptography\n\
    \              Standards (PKCS) #1: RSA Cryptography Specifications\n        \
    \      Version 2.1\", RFC 3447, February 2003.\n   [RFC5905]  Mills, D., Martin,\
    \ J., Burbank, J., and W. Kasch, \"Network\n              Time Protocol Version\
    \ 4: Protocol and Algorithms\n              Specification\", RFC 5905, June 2010.\n\
    \   [RFC5971]  Schulzrinne, H. and R. Hancock, \"GIST: General Internet\n    \
    \          Signalling Transport\", RFC 5971, October 2010.\n   [RFC5973]  Stiemerling,\
    \ M., Tschofenig, H., Aoun, C., and E. Davies,\n              \"NAT/Firewall NSIS\
    \ Signaling Layer Protocol (NSLP)\",\n              RFC 5973, October 2010.\n\
    \   [RFC5974]  Manner, J., Karagiannis, G., and A. McDonald, \"NSIS\n        \
    \      Signaling Layer Protocol (NSLP) for Quality-of-Service\n              Signaling\"\
    , RFC 5974, October 2010.\n   [RFC5996]  Kaufman, C., Hoffman, P., Nir, Y., and\
    \ P. Eronen,\n              \"Internet Key Exchange Protocol Version 2 (IKEv2)\"\
    ,\n              RFC 5996, September 2010.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RFC1034]  Mockapetris, P., \"Domain names\
    \ - concepts and facilities\",\n              STD 13, RFC 1034, November 1987.\n\
    \   [RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-\n   \
    \           Hashing for Message Authentication\", RFC 2104,\n              February\
    \ 1997.\n   [RFC3520]  Hamer, L-N., Gage, B., Kosinski, B., and H. Shieh,\n  \
    \            \"Session Authorization Policy Element\", RFC 3520,\n           \
    \   April 2003.\n   [RFC3521]  Hamer, L-N., Gage, B., and H. Shieh, \"Framework\
    \ for\n              Session Set-up with Media Authorization\", RFC 3521,\n  \
    \            April 2003.\n   [RFC3986]  Berners-Lee, T., Fielding, R., and L.\
    \ Masinter, \"Uniform\n              Resource Identifier (URI): Generic Syntax\"\
    , STD 66,\n              RFC 3986, January 2005.\n   [RFC4080]  Hancock, R., Karagiannis,\
    \ G., Loughney, J., and S. Van den\n              Bosch, \"Next Steps in Signaling\
    \ (NSIS): Framework\",\n              RFC 4080, June 2005.\n   [RFC4081]  Tschofenig,\
    \ H. and D. Kroeselberg, \"Security Threats for\n              Next Steps in Signaling\
    \ (NSIS)\", RFC 4081, June 2005.\n   [RFC4120]  Neuman, C., Yu, T., Hartman, S.,\
    \ and K. Raeburn, \"The\n              Kerberos Network Authentication Service\
    \ (V5)\", RFC 4120,\n              July 2005.\n   [RFC4514]  Zeilenga, K., \"\
    Lightweight Directory Access Protocol\n              (LDAP): String Representation\
    \ of Distinguished Names\",\n              RFC 4514, June 2006.\n   [RFC4868]\
    \  Kelly, S. and S. Frankel, \"Using HMAC-SHA-256, HMAC-SHA-\n              384,\
    \ and HMAC-SHA-512 with IPsec\", RFC 4868, May 2007.\n   [RFC4880]  Callas, J.,\
    \ Donnerhacke, L., Finney, H., Shaw, D., and R.\n              Thayer, \"OpenPGP\
    \ Message Format\", RFC 4880, November 2007.\n   [RFC5226]  Narten, T. and H.\
    \ Alvestrand, \"Guidelines for Writing an\n              IANA Considerations Section\
    \ in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n   [RFC5280]  Cooper,\
    \ D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley, R., and\
    \ W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate\
    \ and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, May\
    \ 2008.\n   [RFC5652]  Housley, R., \"Cryptographic Message Syntax (CMS)\", STD\
    \ 70,\n              RFC 5652, September 2009.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jukka Manner\n   Aalto University\n   Department of Communications\
    \ and Networking (Comnet)\n   P.O. Box 13000\n   Aalto  FI-00076\n   Finland\n\
    \   Phone: +358 9 470 22481\n   EMail: jukka.manner@tkk.fi\n   Martin Stiemerling\n\
    \   Network Laboratories, NEC Europe Ltd.\n   Kurfuersten-Anlage 36\n   Heidelberg\
    \  69115\n   Germany\n   Phone: +49 (0) 6221 4342 113\n   EMail: martin.stiemerling@neclab.eu\n\
    \   URI:   http://www.stiemerling.org\n   Hannes Tschofenig\n   Nokia Siemens\
    \ Networks\n   Linnoitustie 6\n   Espoo  02600\n   Finland\n   Phone: +358 (50)\
    \ 4871445\n   EMail: Hannes.Tschofenig@gmx.net\n   URI:   http://www.tschofenig.priv.at\n\
    \   Roland Bless (editor)\n   Karlsruhe Institute of Technology\n   Institute\
    \ of Telematics\n   Zirkel 2, Building 20.20\n   P.O. Box 6980\n   Karlsruhe \
    \ 76049\n   Germany\n   Phone: +49 721 608 46413\n   EMail: roland.bless@kit.edu\n\
    \   URI:   http://tm.kit.edu/~bless\n"
