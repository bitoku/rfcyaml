Abstract This document specifies Metalink, an XML based download description format.
Metalink describes download locations (mirrors), cryptographic hashes, and other information.
Clients can transparently use this information to reliably transfer files.
Introduction Metalink is a document format based on Extensible Markup Language (XML) that describes a file or list of files to be downloaded from a server.
Metalinks can list a number of files, each with an extensible set of attached metadata.
Each listed file can have a description, multiple cryptographic hashes, and a list of Uniform Resource Identifiers (URIs) from which it is available.
Often, identical copies of a file are accessible in multiple locations on the Internet over a variety of protocols, such as File Transfer Protocol (FTP), Hypertext Transfer Protocol (HTTP), and Peer to Peer (P2P).
In some cases, users are shown a list of these multiple download locations (mirror servers) and must manually select one based on geographical location, priority, or bandwidth.
This is done to distribute the load across multiple servers, and to give human users the opportunity to choose a download location that they expect to work best for them.
At times, individual servers can be slow, outdated, or unreachable, but this cannot be determined until the download has been initiated.
This can lead to the user canceling the download and needing to restart it.
During downloads, errors in transmission can corrupt the file.
There are no easy ways to repair these files.
For large downloads, this can be especially troublesome.
Any of the number of problems that can occur during a download lead to frustration on the part of users, and bandwidth wasted with retransmission.
Knowledge about availability of a download on mirror servers can be acquired and maintained by the operators of the origin server or by a third party.
This knowledge, together with cryptographic hashes, digital signatures, and more, can be stored in a machine readable Metalink file.
The Metalink file can transfer this knowledge to the user agent, which can peruse it in automatic ways or present the information to a human user.
User agents can fall back to alternate mirrors if the current one has an issue.
Thereby, clients are enabled to work their way to a successful download under adverse circumstances.
All this can be done transparently to the human user and the download is much more reliable and efficient.
In contrast, a traditional HTTP redirect to one mirror conveys only comparatively minimal information   a referral to a single server, and there is no provision in the HTTP protocol to handle failures.
Other features that some clients provide include multi source downloads, where chunks of a file are downloaded from multiple mirrors (and optionally, Peer to Peer) simultaneously, which frequently results in a faster download.
Metalinks can leverage HTTP, FTP, and Peer to Peer protocols together, because regardless of the protocol over which the Metalink was obtained, it can make a resource accessible through other protocols.
If the Metalink was obtained from a trusted source, included verification metadata can solve trust issues when downloading files from replica servers operated by third parties.
Metalinks also provide structured information about downloads that can be indexed by search engines.
A brief, Metalink Document that describes a single file: <?
xml version "1.0" encoding "UTF 8"?
<metalink xmlns "urn:ietf:params:xml:ns:metalink"> <file name "example.ext"> <size>14471447</size> <url
<metaurl mediatype "torrent"> http://example.com/example.ext.torrent</metaurl> </file> </metalink>
A more extensive Metalink Document that describes two files: <?
xml version "1.0" encoding "UTF 8"?
<metalink xmlns "urn:ietf:params:xml:ns:metalink"> <published>2009 05
A description of the example file for download.
/description> <hash type "sha 256">f0ad929cd259957e160ea442eb80986b5f01...
url location "de" priority "1">ftp://ftp.example.com/example.ext</url
<url location "fr" priority "
> <metaurl mediatype "torrent" priority "2">http://example.com
Another description for a second file.
</hash> <url location "de" priority "1">ftp://ftp.example.com
/example2.ext</url> <url location "fr" priority "
/example2.ext</url> <metaurl mediatype "torrent" priority "
The XML Namespaces URI [REC xml names] for the XML data format described in this specification is: urn:ietf:params:xml:ns:
metalink For convenience, this data format may be referred to as "Metalink", which this specification uses internally.
This specification describes conformance of Metalink Documents.
Additionally, it places some requirements on Metalink Processors.
This specification uses the namespace prefix "metalink:" for the Namespace URI identified in Section 1.2, above.
Note that the choice of namespace prefix is arbitrary and not semantically significant.
Metalink is specified using terms from the XML Infoset [REC xml infoset].
However, this specification uses a shorthand for two common terms: the phrase "Information Item" is omitted when naming Element Information Items and Attribute Information Items.
Therefore, when this specification uses the term "element," it is referring to an Element Information Item in Infoset terms.
Likewise, when it uses the term "attribute," it is referring to an Attribute Information Item.
Some sections of this specification are illustrated with fragments of a non normative RELAX
However, the text of this specification provides the definition of conformance.
A complete schema appears in Appendix B.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14, [RFC2119], as scoped to those conformance targets.
This specification describes Metalink Documents.
A Metalink Document describes a file or group of files, how to access them, and metadata that identifies them.
Its root is the metalink: metalink element.
metalinkMetalink Metalink Documents are specified in terms of the XML Information Set, serialized as XML 1.0 [REC xml] and identified with the "application/ metalink4 xml" media type.
Metalink Documents MUST be well formed XML.
This specification does not define a Document Type Definition (DTD) for Metalink Documents, and hence it does not require them to be valid (in the sense used by XML).
Metalink allows the use of Internationalized Resource Identifiers (IRIs), encoded according to [RFC3987].
Every URI [RFC3986] is also an IRI, so a URI may be used wherever an IRI is named below.
There is one special consideration: when an IRI that is not also a URI is given for dereferencing, it MUST be mapped to a URI using the steps in Section 3.1 of [RFC3987].
Any element defined by this specification MAY have an xml:
lang attribute, whose content indicates the natural language for the element and its descendents.
The language context is only significant for elements and attributes declared to be "Language  Sensitive" by this specification.
Requirements regarding the content and interpretation of xml:lang are specified in XML 1.0 [REC xml], Section 2.12.
All leading and trailing whitespace is part of the element content and MUST NOT be ignored.
Consequently, it is disallowed for elements where the defined type does not allow whitespace, such as dates, integers, or IRIs.
Some XML generating implementations erroneously insert whitespace around values by default, and such implementations will generate invalid Metalink Documents.
Metalink Documents that do not follow this specification are invalid and SHOULD NOT be used by Metalink Processors.
Metalink is an extensible format.
See Section 5 of this document for a full description of how Metalink Documents can be extended.
Common Metalink Constructs Many Metalink elements share common structures.
This section defines those structures and their requirements for convenient reference by the appropriate element definitions.
When an element is identified as being a particular kind of construct, it inherits the corresponding requirements from that construct's definition in this section.
A Text construct contains human readable text, usually short in length.
A description of the example file for download.
The content of the Text construct MUST NOT contain child elements.
Such text is intended to be presented to humans in a readable fashion.
Thus, whitespace could be collapsed (including line breaks), and text could be displayed using typographic techniques such as justification and proportional fonts.
Date Constructs A Date construct is an element whose content MUST conform to the "date time" production in [RFC3339].
In addition, an uppercase "T" character MUST be used to separate date and time, and an uppercase "Z" character MUST be present in the absence of a numeric time zone offset.
dateTime Such date values happen to be compatible with the following specifications: [ISO.8601.1988], [NOTE datetime 19980827], and [REC xmlschema 2 20041028].
The "metalink:metalink" element is the document (i.e., top level) element of a Metalink Document, acting as a container for metadata and data associated with the listed files.
It contains one or more metalink:file child elements that consist of Metadata elements.
metalinkMetalink   element metalink:metalink { metalinkCommonAttributes, (metalinkFile  & metalinkGenerator? & metalinkOrigin? & metalinkPublished? & metalinkUpdated? & extensionElement ) }
The following child elements are defined by this specification (note that the presence of some of these elements is required):
metalink elements MUST contain one or more metalink:file elements.
metalink:metalink elements MAY contain exactly one metalink: generator element and MUST NOT contain more than one such element.
metalink:metalink elements SHOULD contain exactly one metalink: origin element and MUST NOT contain more than one such element.
metalink:metalink elements MAY contain exactly one metalink: published element and MUST NOT contain more than one such element.
metalink:metalink elements MAY contain exactly one metalink: updated element and MUST NOT contain more than one such element.
Providing Textual Content Experience teaches that downloads providing textual content are, in general, more useful than those that do not.
Some applications (one example is full text indexers) require a minimum amount of text to function reliably and predictably.
Metalink publishers should be aware of this.
It is RECOMMENDED that each metalink:file element contain a non empty metalink:description element, a non empty metalink:identity element, a non empty metalink:version element, and a non empty metalink:publisher element when these elements are present.
However, the absence of metalink:description, metalink: identity, metalink:version, and metalink:publisher is not an error, and Metalink Processors MUST NOT fail to function correctly as a consequence of such an absence.
The "metalink:file" element represents an individual file, acting as a container for metadata and data associated with the file.
Each unique file described in a Metalink Document MUST have its own metalink:file element.
All metalink:url elements contained in each metalink:file element SHOULD lead to identical files.
url element should be an alternative location for the same file and each metalink:metaurl element should provide metadata to retrieve the same file in another way, such as a Peer to Peer network.
Refer to Sections 4.2.8 and 4.2.16 for more information.
& metalinkSize? & metalinkURL  & metalinkVersion? & extensionElement ) }
This specification assigns no significance to the order of metalink: file elements or to the order of metalink:url or metalink:metaurl elements.
Significance is determined by the value of the "priority" attribute of the metalink:url or metalink:metaurl elements.
The following child elements are defined by this specification (the presence of some of them is required):  metalink:file elements MAY contain exactly one metalink:copyright element and MUST NOT contain more than one such element.
metalink:file elements MAY contain exactly one metalink: description element and MUST NOT contain more than one such element.
metalink:file elements MAY contain exactly one metalink:identity element and MUST NOT contain more than one such element.
:file elements MAY contain one or more metalink:hash elements.
:file elements MAY contain one or more metalink:language elements.
metalink:file elements MAY contain exactly one metalink:logo element and MUST NOT contain more than one such element.
:file elements MAY contain one or more metalink:
metalink:file elements MUST contain at least one metalink:url element or at least one metalink:metaurl element.
file elements contain more than one metalink:url element to provide multiple download sources.
:file elements MAY contain one or more metalink:pieces elements.
metalink:file elements MAY contain exactly one metalink:publisher element and MUST NOT contain more than one such element.
:file elements MAY contain one or more metalink:signature elements.
metalink:file elements SHOULD contain exactly one metalink:size element and MUST NOT contain more than one such element.
metalink:file elements MAY contain exactly one metalink:version element and MUST NOT contain more than one such element.
The "name" Attribute metalink:file elements MUST have a "name" attribute, which contains the local file name to which the downloaded file will be written.
Hence, if a Metalink Document contains multiple metalink:file elements, the value of the "name" attribute MUST be unique for each.
Directory information can also be contained in a "path/file" format only, as in: <file name "debian amd64/sarge/Contents amd64.gz"
In this example, a subdirectory "debian amd64/sarge/" will be created and a file named "Contents amd64.gz" will be created inside it.
The path MUST NOT contain any directory traversal directives or information.
The path MUST be relative.
The "metalink:pieces" Element The "metalink:pieces" element acts as a container for a list of cryptographic hashes of contiguous, non overlapping pieces of the file.
The cryptographic hashes MUST be listed in the same order as the corresponding pieces appear in the file, starting at the beginning of the file.
Metalink Documents MAY contain one or multiple metalink:
pieces container elements, if each "type" attribute of metalink:pieces has a unique value.
element metalink:pieces { attribute length { xsd:positiveInteger }, attribute type { text }, metalinkHash  } 4.1.3.1.
The "type" Attribute metalink:pieces elements MUST have a "type" attribute.
The Internet Assigned Numbers Authority (IANA) registry named "Hash Function Textual Names" defines values for hash types.
See Section 7.4 for security implications.
The "length" Attribute metalink:pieces elements MUST have a "length" attribute, which is a positive integer that describes the length of the pieces of the file in octets.
The whole file is divided into non overlapping pieces of this length, starting from the beginning of the file.
That is, every piece MUST be the same size, apart from the last piece, which is the remainder.
The last piece extends to the end of the file, and it therefore MAY be shorter than the other pieces.
The "metalink:copyright" element is a Text construct that conveys a human readable copyright for a file.
element metalink:copyright { metalinkTextConstruct } 4.2.2.
The "metalink:description" Element The "metalink:description" element is a Text construct that conveys a human readable file description.
element metalink:description { metalinkTextConstruct } 4.2.3.
The "metalink:generator" element's content identifies the generating agent name and version used to generate a Metalink Document, for debugging and other purposes.
metalinkGenerator   element metalink:generator { metalinkTextConstruct }
The metalink:generator element's content is defined below in ABNF notation [RFC5234].
1 <any CHAR except CTLs or separators
Although any token character MAY appear in an agent version, this token SHOULD only be used for a version identifier (i.e., successive versions of the same agent SHOULD only differ in the agent version portion of the agent value).
The "metalink:hash" Element The "metalink:hash" element is a Text construct that conveys a cryptographic hash for a file.
All hashes are encoded in lowercase hexadecimal format.
Hashes are used to verify the integrity of a complete file or portion of a file to determine if the file has been transferred without any errors.
metalinkHash   element metalink:hash { attribute type { text }?,
text } Metalink Documents MAY contain one or multiples hashes of a complete file.
hash elements with a "type" attribute MUST contain a hash of the complete file.
Metalink Documents MAY also contain hashes for individual pieces of a file.
hash elements that are inside a metalink:pieces container element have a hash for that specific piece or chunk of the file, and are of the same hash type as the metalink:
pieces element in which they are contained.
Metalink Documents MAY contain one or multiple metalink:
pieces container elements, if each "type" attribute of metalink:pieces has a unique value.
hash elements without a "type" attribute MUST contain a hash for that specific piece or chunk of the file and MUST be listed in the same order as the corresponding pieces appear in the file, starting at the beginning of the file.
The size of the piece is equal to the value of the "length" attribute of the metalink:pieces element, apart from the last piece, which is the remainder.
See Section 4.1.3.2 for more information on the size of pieces.
<pieces length "1048576" type "sha 1"> <hash>d96b9a4b92a899c2099b7b31bddb5ca423bb9b30</hash> <hash>10d68f4b1119014c123da2a0a6baf5c8a6d5ba1e</hash
:hash elements MUST have a "type" attribute, if and only if it contains a hash of the complete file.
The IANA registry named "Hash Function Textual Names" defines values for hash types.
hash elements MUST NOT have a "type" attribute, if they are inside a metalink:pieces container element.
See Section 7.4 for security implications.
The "metalink:identity" Element The "metalink:identity" element is a Text construct that conveys a human readable identity for a file.
For example, the identity of Firefox 3.5 would be "Firefox".
element metalink:identity { metalinkTextConstruct } 4.2.6.
The "metalink:language" Element The "metalink:language" element is a Text construct that conveys a code for the language of a file, per [RFC5646].
language elements are allowed, for instance, to describe a file such as an binary installation program that provides multiple language options, a movie with multiple language tracks, or a document in multiple languages.
metalinkLanguage   element metalink:language { metalinkTextConstruct } 4.2.7.
The "metalink:logo" Element The "metalink:
logo" element's content is an IRI reference [RFC3987] that identifies an image that provides visual identification for a file.
metalinkLogo   element metalink:logo { metalinkCommonAttributes, (metalinkUri) }
The image SHOULD have an aspect ratio of one (horizontal) to one (vertical) and SHOULD be suitable for presentation at a small size.
The "metalink:metaurl" element contains the IRI of a metadata file, also known as a metainfo file, about a resource to download.
For example, this could be the IRI of a BitTorrent .torrent file, a Metalink Document, or other type of metadata file.
Note that the information in the metalink:hash element does not apply to these metadata files but to the files that are described by them.
metalinkMetaURL   element metalink:metaurl { metalinkCommonAttributes, attribute priority
metaurl elements MAY have a priority attribute.
Values MUST be positive integers between 1 and 999999.
Lower values indicate a higher priority.
metaurl elements without a priority attribute are considered to have the lowest priority, i.e., 999999.
The priority values of metalink:metaurl and metalink:url elements are compared and those with the lowest values, starting with 1, are used first.
:url elements MAY have the same priority, i.e., one BitTorrent .torrent file and three FTP URIs could have priority "1".
See also the "priority" attribute of the metalink:url element.
The "mediatype" Attribute metalink:metaurl elements MUST have a "mediatype" attribute that indicates the Multipurpose Internet Mail Extensions (MIME) media type [RFC4288] of the metadata file available at the IRI.
In the case of BitTorrent as specified in [BITTORRENT], the value "torrent" is REQUIRED.
Currently, "torrent" is the only reserved value.
Values for this attribute are defined below in ABNF notation [RFC5234].
media reserved media reserved   "torrent" type name
<Defined in Section 4.2 of RFC 4288
<Defined in Section 4.2 of RFC 4288>
The "name" Attribute metalink:metaurl elements MAY have a "name" attribute that indicates a specific file in a BitTorrent .torrent file or a Metalink Document that describes multiple files.
Directory information can also be contained in a "path/file" format only, as in: <metaurl mediatype "torrent" name "debian amd64/sarge/Contents amd64.gz"
In this example, a file named "Contents amd64.gz" is indicated, in a "debian amd64/sarge/" subdirectory.
The path MUST NOT contain any directory traversal directives or information.
The path MUST be relative.
The "metalink:origin" element is an IRI where the Metalink Document was originally published.
If the dynamic attribute of metalink: origin is "true", then updated versions of the Metalink can be found at this IRI.
The "dynamic" Attribute The metalink:
origin element MAY have a "dynamic" attribute, set to "true" or "false", which tells if a Metalink at the origin IRI will contain dynamic updated information or if it is static and not likely to be updated.
The "metalink:os" element is a Text construct that conveys an Operating System that a file is suitable for.
The IANA registry named "Operating System Names" defines values for OS types.
metalinkOS   element metalink:os { metalinkTextConstruct } 4.2.11.
The "metalink:published" Element The "metalink:published" element is a Date construct indicating an instant in time associated with an event early in the life cycle of the entry.
metalinkPublished   element metalink:published { metalinkDateConstruct
} Typically, metalink:published will be associated with the initial creation or first availability of the resource.
The metalink:updated element is used when a Metalink Document has been updated after initial publication.
The "metalink:publisher" Element The "metalink:publisher" element contains a human readable group or other entity that has published the file described in the Metalink Document and an IRI for more information.
The metalink:publisher element MUST have a "name" attribute that indicates the human readable name of the publisher.
The metalink:publisher element MAY have a "url" attribute whose value MUST be an IRI reference [RFC3987].
The "metalink:signature" Element The "metalink:
signature" element is a Text construct that conveys a digital signature for a file described in a Metalink Document.
Digital signatures verify that a file is from the entity that has signed it.
Support in Metalink Processors for digital signatures included in this element is OPTIONAL.
Note that the signing of Metalink Documents, as opposed to a digital signature of a file described in a Metalink Document, is covered in Section 7.1.
element metalink:signature { attribute mediatype { text }, metalinkTextConstruct } Example with an OpenPGP signature [RFC4880]:
END PGP SIGNATURE  </signature> 4.2.13.1.
The "mediatype" Attribute metalink:signature elements MUST have a "mediatype" attribute that indicates the MIME media type [RFC4288] of the included digital signature.
Values for this attribute are defined below in ABNF notation [RFC5234].
<Defined in Section 4.2 of RFC 4288
<Defined in Section 4.2 of RFC 4288
The "metalink:size" Element The "metalink:size" element indicates the length of the linked content in octets.
This is the content length of the representation returned when the IRI is mapped to a URI and dereferenced.
Note that the "metalink:size" element MUST override the actual content length of the representation as reported by the underlying protocol, and those that do not match MUST be discarded by Metalink Processors.
This value MUST be a non negative integer.
metalinkSize   element metalink:size { xsd:
The "metalink:updated" Element The "metalink:
updated" element is a Date construct indicating the most recent instant in time when a Metalink was modified in a way the publisher considers significant.
Therefore, not all modifications necessarily result in a changed metalink:updated value.
metalinkUpdated   element metalink:updated { metalinkDateConstruct } Publishers
MAY change the value of this element over time.
The "metalink:url" Element The "metalink:url" element contains a file IRI.
Most metalink:file container elements will contain multiple metalink:url elements, and each one SHOULD be a valid alternative to download the same file.
The metalink:url elements SHOULD be resolvable and, if resolvable, SHOULD lead to identical files.
Metalink Processors MUST filter out invalid files obtained from "metalink:url" elements by using information in the metalink:size element and metalink:hash elements.
url elements MAY have a priority attribute.
Values MUST be positive integers between 1 and 999999.
Lower values indicate a higher priority.
url elements without a priority attribute are considered to have the lowest priority, i.e., 999999.
Multiple metalink:url elements can have the same priority, i.e., ten different mirrors could have priority "1".
The "location" Attribute metalink:url elements MAY have a "location" attribute, which is a [ISO3166 1] alpha 2 two letter country code for the geographical location of the physical server an IRI is used to access.
The "metalink:version" Element The "metalink:version" element is a Text construct that conveys a human readable version for a file.
The version of Firefox 3.5 would be "3.5".
metalinkVersion   element metalink:version { metalinkTextConstruct } 5.
Extensions from Non Metalink Vocabularies
This specification describes Metalink's XML vocabulary.
Extensions to the Metalink Vocabulary
The Metalink namespace is reserved for future forward compatible revisions of Metalink.
Future versions of this specification could add new elements and attributes to the Metalink markup vocabulary.
Software written to conform to this version of the specification will not be able to process such markup correctly and, in fact, will not be able to distinguish it from markup error.
For the purposes of this discussion, unrecognized markup from the Metalink vocabulary will be considered "foreign markup".
Processing Foreign Markup Metalink Processors that encounter foreign markup in a location that is legal according to this specification MUST ignore such foreign markup, in particular they MUST NOT stop processing or signal an error.
It might be the case that the Metalink Processor is able to process the foreign markup correctly and does so.
Otherwise, such markup is termed "unknown foreign markup".
When unknown foreign markup is encountered as a child of metalink: file, metalink:
Metalink Processors MAY bypass the markup and any textual content and MUST NOT change their behavior as a result of the markup's presence.
Extension Elements Metalink allows foreign markup anywhere in a Metalink document, except where it is explicitly forbidden.
Child elements of metalink: file and metalink:metalink are considered Metadata elements and are described below.
The role of other foreign markup is undefined by this specification.
Simple Extension Elements A Simple Extension element MUST NOT have any attributes or child elements.
The element MAY contain character data or be empty.
Simple Extension elements are not Language Sensitive.
The element can be interpreted as a simple property (or name/value pair) of the parent element that encloses it.
The pair consisting of the namespace URI of the element and the local name of the element can be interpreted as the name of the property.
The character data content of the element can be interpreted as the value of the property.
If the element is empty, then the property value can be interpreted as an empty string.
The root element of a Structured Extension element MUST have at least one attribute or child element.
, it MAY contain well formed XML content (including character data), or it MAY be empty.
Structured Extension elements are Language Sensitive.
The structure of a Structured Extension element, including the order of its child elements, could be significant.
This specification does not provide an interpretation of a Structured Extension element.
The syntax of the XML contained in the element (and an interpretation of how the element relates to its containing element) is defined by the specification of the Metalink extension.
This document makes use of the XML registry specified in [RFC3688].
Accordingly, IANA has made the following registration:
Registration request for the Metalink namespace:
See the "Authors' Addresses" section of this document.
Namespace URIs do not represent an XML specification.
A Metalink Document, when serialized as XML 1.0, can be identified with the following media type:
Type name:  application Subtype name:  metalink4 xml Required parameters:  None.
This parameter has semantics identical to the charset parameter of the "application/xml" media type as specified in [RFC3023].
Encoding considerations:  Identical to those of "application/xml" as described in [RFC3023], Section 3.2.
Security considerations:  As defined in this specification.
In addition, as this media type uses the " xml" convention, it shares the same security considerations as described in [RFC3023], Section 10.
There are no known interoperability issues.
Applications that use this media type:  File transfer applications.
Additional information: Magic number(s):  None.
Macintosh File Type code:  TEXT Person and email address to contact for further information:
Intended usage:  COMMON Restrictions on usage:  None.
Security Considerations Because Metalink is an XML based format, existing XML security mechanisms can be used to secure its content.
Publishers of Metalink Documents may have sound reasons for signing otherwise unprotected content.
For example, a merchant might digitally sign a Metalink that lists a file download to verify its origin.
Other merchants may wish to sign and encrypt Metalink Documents that list digital songs that have been purchased.
Many other examples are conceivable.
Publishers are encouraged to offer Metalink documents via authenticated HTTP under Transport Layer Security (TLS) as specified in [RFC2818].
The choice of a secure content layer rests entirely with the content providers.
Publishers are also encouraged to include digital signatures of the files within the Metalink Documents, if they are available, as described in Section 4.2.13.
Normally, a publisher is in the best position to know how strong the protective signing ought to be on their content.
Thus, a publisher can choose weak or strong cryptography, and a Metalink Processor SHOULD normally accept that.
There are potential applications where the Metalink Processor chooses to reject weak cryptography, but that is not envisioned as the common use case.
The root of a Metalink Document (i.e., metalink:metalink) or any metalink:
file element MAY have an Enveloped Signature, as described by XML Signature and Syntax Processing [REC xmldsig core].
Although signing and verifying signatures are both OPTIONAL, an implementation that supports either feature SHOULD implement RSA with a minimum key size of 2048 with SHA 256.
Metalink Processors that support verifying signatures MUST reject Metalink Documents with invalid signatures.
Metalink Processors MUST NOT reject a Metalink Document containing such a signature because they are not capable of verifying it; they MUST continue processing and MAY inform the user of their failure to validate the signature.
In other words, the presence of an element with the namespace URI "http://www.w3.org/2000/09/xmldsig#" and a local name of "Signature" as a child of the document element MUST NOT cause a Metalink Processor to fail merely because of its presence.
Other elements in a Metalink Document MUST NOT be signed unless their definitions explicitly specify such a capability.
Section 6.5.1 of [REC xmldsig core] requires support for Canonical XML [REC xml c14n].
However, many implementers do not use it because signed XML documents enclosed in other XML documents
Thus, Metalink Processors that verify signed Metalink Documents MUST be able to canonicalize with the exclusive XML canonicalization method identified by the URI "http://www.w3.org/2001/10/xml exc c14n
#", as specified in Exclusive XML Canonicalization
Section 4.4.2 of [REC xmldsig core] requires support for Digital Signature Algorithm (DSA) signatures and recommends support for RSA signatures.
However, because of the much greater popularity in the market of RSA versus DSA, Metalink Processors that verify signed Metalink Documents MUST be able to verify RSA signatures, but do not need be able to verify DSA signatures.
Due to security issues that can arise if the keying material for message authentication code (MAC) authentication is not handled properly, Metalink Documents SHOULD NOT use MACs for signatures.
URIs and IRIs Metalink Processors handle URIs and IRIs.
See Section 7 of [RFC3986] and Section 8 of [RFC3987] for security considerations related to their handling and use.
Spoofing There is potential for spoofing attacks where the attacker publishes Metalink Documents with false information.
Malicious publishers might create Metalink Documents containing inaccurate information anywhere in the document.
Unaware downloaders could be deceived into downloading malicious or worthless content.
Malicious publishers could attempt a distributed denial of service attack by inserting unrelated IRIs into Metalink Documents.
Digital signatures address the issue of spoofing.
Currently, some of the hash types defined in the IANA registry named "Hash Function Textual Names" are considered insecure.
These include the whole Message Digest family of algorithms that are not suitable for cryptographically strong verification.
Malicious parties could provide files that appear to be identical to another file because of a collision, i.e., the weak cryptographic hashes of the intended file and a substituted malicious file could match.
Metalink Generators and Processors MUST support "sha 256", which is SHA 256, as specified in [FIPS 180 3], and MAY support stronger hashes.
If a Metalink Document contains hashes, it SHOULD include "sha 256", which is SHA 256, or stronger.
It MAY also include other hashes from the IANA registry named "Hash Function Textual Names".
Appendix A.  Acknowledgements and Contributors
The layout and shape of this document relies heavily on work pioneered in the Atom Syndication Format as specified in [RFC4287].
The content and concepts within are a product of the Metalink community.
Key contributors provided early implementations: A. Bram Neijt, Hampus Wessman, Darius Liktorius, Manuel Subredu, Michael Burford, Giorgio Maone, Nils Maier, Max Velasques, Manolo Valdes, Hayden Legendre, Frederick Cheung, Rene Leonhardt, Per Oyvind Karlsen, Matt Domsch, Yazsoft, KGet developers, Free Download Manager developers, Orbit developers, Arne Babenhauserheide, Mathias Berchtold, Xienzhenyu and TheWorld Browser developers, Xi Software, Agostino Russo, and James Antill.
The Metalink community has dozens of contributors who contributed to the evolution of Metalink or proposed ideas and wording for this document, including: Paul Burkhead, Kristian Weston, Nicolas Alvarez, Urs Wolfer, Bridget and Ethan Fletcher, Patrick Ruckstuhl, Sebastien Willemijns, Micah Cowan, Ruben Kerkhof, Danny Ayers, Nick Dominguez, Gary Zellerbach, James Clark, Daniel Stenberg, John and Sandra Sowder, Salvatore Musumeci, Steve Eshelman, Lucas Hewett, Ryan Cronin, Dave Winquist, Bob Denison, Wes Shelton, Josh Colbert, Steve Kleisath, Chad Neptune, Derick Cordoba, Nick Carrabba, Chris Carrabba, Erin Solari, Ryan Alexander, Tom Mainville, Janie Wargo, Jason Hansen, Tim Bray, Dan Brickley, Markus Hofmann, Dan Connolly, Tim Berners Lee, Louis Suarez Potts, Ross Smith, Jeff Covey, Ed Lee, Shawn Wilsher, Mike Connor, Johan Svedberg, Kees Cook, Dedric Carter, and Debi Goulding.
We also thank the Anthony Family, the Bryan Family, Juanita Anthony, and Zimmy Bryan.
Special thanks to Eran Hammer Lahav, document shepherd, and Lisa Dusseault, Area Director.
We also thank the following contributors for assistance and review: Mark Nottingham, Peter Saint Andre, Julian Reschke, Chris Newman, Ian Macfarlane, Dave Cridland, Barry Leiba, Uri Blumenthal, Paul Hoffman, Felix Sasaki, Matthias Fuchs, Mark Baker, Scott Cantor, Brian Carpenter, Alexey Melnikov, Lars Eggert, Pasi Eronen, Tim Polk, Dan Romascanu, and Bjoern Hoehrmann.
Peter Poeml wishes to acknowledge the support of SUSE Linux Products GmbH / Novell Inc., where he was employed during much of the work on this document.
This document is dedicated to Sonora Bryan.
Appendix B.  RELAX NG Compact Schema
The Relax NG schema explicitly excludes elements in the Metalink namespace that are not defined in this revision of the specification.
Requirements for Metalink Processors encountering such markup are given in Sections 5.2 and 5.3.
# RELAX NG Compact Syntax Grammar for the # Metalink Format Specification Version
4 # Based on RFC 4287 schema
metalinkTextConstruct   metalinkCommonAttributes, text # Date Construct metalinkDateConstruct
metalinkMetalink metalinkMetalink   element metalink:metalink { metalinkCommonAttributes, (metalinkFile  & metalinkGenerator? & metalinkOrigin? & metalinkPublished? & metalinkUpdated? & extensionElement ) }
element metalink:pieces { attribute length { xsd:positiveInteger }, attribute type { text },
element metalink:copyright { metalinkTextConstruct } metalinkDescription   element metalink:
description { metalinkTextConstruct } metalinkGenerator   element metalink:generator { metalinkTextConstruct }
element metalink:hash { attribute type { text }?
, text } metalinkIdentity   element metalink:identity { metalinkTextConstruct } metalinkLanguage   element metalink:language { metalinkTextConstruct }
metalinkLogo   element metalink:logo { metalinkCommonAttributes, (metalinkUri) }
metalinkMetaURL   element metalink:metaurl { metalinkCommonAttributes, attribute priority
} metalinkOS   element metalink:os { metalinkTextConstruct } metalinkPublished   element metalink:published { metalinkDateConstruct } metalinkPublisher
metalinkSignature   element metalink:signature { attribute mediatype { text }, metalinkTextConstruct } metalinkSize   element metalink:size { xsd:
nonNegativeInteger } metalinkUpdated   element metalink:
} metalinkVersion   element metalink:version { metalinkTextConstruct }
# As defined in RFC 3066 and compatible with RFC 5646
# Unconstrained; it's not entirely clear how IRI fit into # xsd:
so let's not try to constrain it here
} # EOF Index A ABNF metalinkGenerator  13 metaurl mediatype
17 signature mediatype  19 application/metalink4 xml Media Type  23 C copyright XML element
12 D description XML element  13 F file XML element  10 G generator XML element
metalinkOS  18 metalinkPieces  12 metalinkPublished
23 H hash XML element  14
15 L language XML element  15 logo XML element  16 M Media Type application/metalink4 xml
7 metalinkCopyright grammar production  12 metalinkDateConstruct grammar production  8 metalinkDescription grammar production  13 metalinkFile grammar production
10 metalinkGenerator ABNF  13 metalinkGenerator grammar production
13 metalinkHash grammar production  14 metalinkIdentity grammar production  15 metalinkLanguage grammar production  15 metalinkLogo grammar production  16 metalinkMetalink grammar production  8 metalinkMetaURL grammar production  16 metalinkOrigin grammar production  17 metalinkOS grammar production  18 metalinkPieces grammar production
12 metalinkPublished grammar production  18 metalinkPublisher grammar production  18 metalinkSignature grammar production  19 metalinkSize grammar production  20 metalinkTextConstruct grammar production  7 metalinkUpdated grammar production  20 metalinkURL grammar production  21 metalinkVersion grammar production
21 metaurl mediatype ABNF  16 metaurl XML element
16 O origin XML element  17 os XML element  18 P pieces XML element
18 S signature mediatype ABNF  19 signature XML element
19 simpleExtensionElement grammar production  22 size XML element  20 structuredExtensionElement grammar production
23 U updated XML element  20 url XML element  20 V version XML element  21 X XML Elements
12 description  13 file  9 generator  13 hash  14 identity
15 language  15 logo  16 metalink
16 origin  17 os  18 pieces  12
published  18 publisher  18 signature  19 size  20
updated  20 url  20 version  21
