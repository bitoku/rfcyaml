- title: __initial_text__
  contents:
  - "           Key Management Extensions for Session Description\n         Protocol\
    \ (SDP) and Real Time Streaming Protocol (RTSP)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines general extensions for Session Description\n\
    \   Protocol (SDP) and Real Time Streaming Protocol (RTSP) to carry\n   messages,\
    \ as specified by a key management protocol, in order to\n   secure the media.\
    \  These extensions are presented as a framework, to\n   be used by one or more\
    \ key management protocols.  As such, their use\n   is meaningful only when complemented\
    \ by an appropriate key management\n   protocol.\n   General guidelines are also\
    \ given on how the framework should be used\n   together with SIP and RTSP.  The\
    \ usage with the Multimedia Internet\n   KEYing (MIKEY) key management protocol\
    \ is also defined.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Notational Conventions .....................................4\n  \
    \ 2. Applicability ...................................................4\n   3.\
    \ Extensions to SDP and RTSP ......................................5\n      3.1.\
    \ SDP Extensions .............................................5\n      3.2. RTSP\
    \ Extensions ............................................6\n   4. Usage with SDP,\
    \ SIP, RTSP, and SAP ..............................7\n      4.1. Use of SDP .................................................8\n\
    \           4.1.1. General Processing ..................................8\n  \
    \         4.1.2. Use of SDP with Offer/Answer and SIP ...............10\n    \
    \       4.1.3. Use of SDP with SAP ................................13\n      \
    \     4.1.4. Bidding-Down Attack Prevention .....................13\n      4.2.\
    \ RTSP Usage ................................................14\n   5. Example\
    \ Scenarios ..............................................17\n      5.1. Example\
    \ 1 (SIP/SDP) .......................................17\n      5.2. Example 2\
    \ (SDP) ...........................................18\n      5.3. Example 3 (RTSP)\
    \ ..........................................18\n      5.4. Example 4 (RTSP) ..........................................20\n\
    \   6. Adding Further Key Management Protocols ........................21\n  \
    \ 7. Integration of MIKEY ...........................................22\n    \
    \  7.1. MIKEY Interface ...........................................22\n   8. Security\
    \ Considerations ........................................23\n   9. IANA Considerations\
    \ ............................................25\n      9.1. SDP Attribute Registration\
    \ ................................25\n      9.2. RTSP Registration .........................................26\n\
    \      9.3. Protocol Identifier Registration ..........................26\n  \
    \ 10. Acknowledgements ..............................................27\n   11.\
    \ References ....................................................27\n      11.1.\
    \ Normative References .....................................27\n      11.2. Informative\
    \ References ...................................28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   There has recently been work to define a security profile\
    \ for the\n   protection of real-time applications running over RTP, [SRTP].\n\
    \   However, a security protocol needs a key management solution to\n   exchange\
    \ keys and security parameters, manage and refresh keys, etc.\n   A key management\
    \ protocol is executed prior to the security\n   protocol's execution.  The key\
    \ management protocol's main goal is to,\n   in a secure and reliable way, establish\
    \ a security association for\n   the security protocol.  This includes one or\
    \ more cryptographic keys\n   and the set of necessary parameters for the security\
    \ protocol, e.g.,\n   cipher and authentication algorithms to be used.  The key\
    \ management\n   protocol has similarities with, e.g., SIP [SIP] and RTSP [RTSP]\
    \ in\n   the sense that it negotiates necessary information in order to be\n \
    \  able to set up the session.\n   The focus in the following sections is to describe\
    \ a new SDP\n   attribute and RTSP header extension to support key management,\
    \ and to\n   show how these can be integrated within SIP and RTSP.  The resulting\n\
    \   framework is completed by one or more key management protocols, which\n  \
    \ use the extensions provided.\n   Some of the motivations to create a framework\
    \ with the possibility to\n   include the key management in the session establishment\
    \ are:\n   * Just as the codec information is a description of how to encode and\n\
    \     decode the audio (or video) stream, the key management data is a\n     description\
    \ of how to encrypt and decrypt the data.\n   * The possibility to negotiate the\
    \ security for the entire multimedia\n     session at the same time.\n   * The\
    \ knowledge of the media at session establishment makes it easy\n     to tie the\
    \ key management to the multimedia sessions.\n   * This approach may be more efficient\
    \ than setting up the security\n     later, as that approach might force extra\
    \ roundtrips, possibly also\n     a separate setup for each stream, hence implying\
    \ more delay to the\n     actual setup of the media session.\n   * The possibility\
    \ to negotiate keying material end-to-end without\n     applying end-to-end protection\
    \ of the SDP (instead, hop-by-hop\n     security mechanisms can be used, which\
    \ may be useful if\n     intermediate proxies need access to the SDP).\n   Currently\
    \ in SDP [SDPnew], there exists one field to transport keys,\n   the \"k=\" field.\
    \  However, this is not enough for a key management\n   protocol as there are\
    \ many more parameters that need to be\n   transported, and the \"k=\" field is\
    \ not extensible.  The approach used\n   is to extend the SDP description through\
    \ a number of attributes that\n   transport the key management offer/answer and\
    \ also to associate it\n   with the media sessions.  SIP uses the offer/answer\
    \ model [OAM]\n   whereby extensions to SDP will be enough.  However, RTSP [RTSP]\
    \ does\n   not use the offer/answer model with SDP, so a new RTSP header is\n\
    \   introduced to convey key management data.  [SDES] uses the approach\n   of\
    \ extending SDP, to carry the security parameters for the media\n   streams. \
    \ However, the mechanism defined in [SDES] requires end-to-\n   end protection\
    \ of the SDP by some security protocol such as S/MIME,\n   in order to get end-to-end\
    \ protection.  The solution described here\n   focuses only on the end-to-end\
    \ protection of key management\n   parameters and as a consequence does not require\
    \ external end-to-end\n   protection means.  It is important to note though, and\
    \ we stress this\n   again, that only the key management parameters are protected.\n\
    \   The document also defines the use of the described framework together\n  \
    \ with the key management protocol Multimedia Internet KEYing (MIKEY)\n   [MIKEY].\n"
- title: 1.1.  Notational Conventions
  contents:
  - "1.1.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Applicability
  contents:
  - "2.  Applicability\n   [SDES] provides similar cryptographic key distribution\
    \ capabilities,\n   and it is intended for use when keying material is protected\
    \ along\n   with the signaling.\n   In contrast, this specification expects endpoints\
    \ to have\n   preconfigured keys or common security infrastructure.  It provides\n\
    \   its own security and is independent of the protection of signaling\n   (if\
    \ any).  As a result, it can be applied in environments where\n   signaling protection\
    \ is not turned on, or used hop-by-hop (i.e.,\n   scenarios where the SDP is not\
    \ protected end-to-end).  This\n   specification will, independently of the signaling\
    \ protection\n   applied, ensure end-to-end security establishment for the media.\n"
- title: 3.  Extensions to SDP and RTSP
  contents:
  - "3.  Extensions to SDP and RTSP\n   This section describes common attributes that\
    \ can be included in SDP\n   or RTSP when an integrated key management protocol\
    \ is used.  The\n   attribute values follow the general SDP and RTSP guidelines\
    \ (see\n   [SDPnew] and [RTSP]).\n   For both SDP and RTSP, the general method\
    \ of adding the key\n   management protocol is to introduce new attributes, one\
    \ identifier to\n   identify the specific key management protocol, and one data\
    \ field\n   where the key management protocol data is placed.  The key management\n\
    \   protocol data contains the necessary information to establish the\n   security\
    \ protocol, e.g., keys and cryptographic parameters.  All\n   parameters and keys\
    \ are protected by the key management protocol.\n   The key management data SHALL\
    \ be base64 [RFC3548] encoded and comply\n   with the base64 grammar as defined\
    \ in [SDPnew].  The key management\n   protocol identifier, KMPID, is defined\
    \ as below in Augmented Backus-\n   Naur Form grammar (ABNF) [RFC4234].\n   KMPID\
    \ =  1*(ALPHA / DIGIT)\n   Values for the identifier, KMPID, are registered and\
    \ defined in\n   accordance to Section 9.  Note that the KMPID is case sensitive,\
    \ and\n   it is RECOMMENDED that values registered are lowercase letters.\n"
- title: 3.1.  SDP Extensions
  contents:
  - "3.1.  SDP Extensions\n   This section provides an ABNF grammar (as used in [SDPnew])\
    \ for the\n   key management extensions to SDP.\n   Note that the new definitions\
    \ are compliant with the definition of an\n   attribute field, i.e.,\n   attribute\
    \    = (att-field \":\" att-value) / att-field\n   The ABNF for the key management\
    \ extensions (conforming to the\n   att-field and att-value) are as follows:\n\
    \      key-mgmt-attribute = key-mgmt-att-field \":\" key-mgmt-att-value\n    \
    \  key-mgmt-att-field = \"key-mgmt\"\n      key-mgmt-att-value = 0*1SP prtcl-id\
    \ SP keymgmt-data\n      prtcl-id     = KMPID\n                     ; e.g., \"\
    mikey\"\n      keymgmt-data = base64\n      SP           = %x20\n   where KMPID\
    \ is as defined in Section 3 of this memo, and base64 is as\n   defined in SDP\
    \ [SDPnew].  Prtcl-id refers to the set of values\n   defined for KMPID in Section\
    \ 9.\n   The attribute MAY be used at session level, media level, or at both\n\
    \   levels.  An attribute defined at media level overrides an attribute\n   defined\
    \ at session level.  In other words, if the media-level\n   attribute is present,\
    \ the session level attribute MUST be ignored for\n   this media.  Section 4.1\
    \ describes in detail how the attributes are\n   used and how the SDP is handled\
    \ in different usage scenarios.  The\n   choice of the level depends, for example,\
    \ on the particular key\n   management protocol.  Some protocols may not be able\
    \ to derive enough\n   key material for all the sessions; furthermore, possibly\
    \ a different\n   protection to each session could be required.  The particular\n\
    \   protocol might achieve this only by specifying it at the media level.\n  \
    \ Other protocols, such as MIKEY, have instead those capabilities (as\n   it can\
    \ express multiple security policies and derive multiple keys),\n   so it may\
    \ use the session level.\n"
- title: 3.2.  RTSP Extensions
  contents:
  - "3.2.  RTSP Extensions\n   To support the key management attributes, the following\
    \ RTSP header\n   is defined:\n   KeyMgmt = \"KeyMgmt\" \":\" key-mgmt-spec 0*(\"\
    ,\" key-mgmt-spec)\n   key-mgmt-spec = \"prot\" \"=\" KMPID \";\" [\"uri\" \"\
    =\" %x22 URI %x22 \";\"]\n   where KMPID is as defined in Section 3 of this memo,\
    \ \"base64\" as\n   defined in [SDPnew], and \"URI\" as defined in Section 3 of\
    \ [RFC3986].\n   The \"uri\" parameter identifies the context for which the key\n\
    \   management data applies, and the RTSP URI SHALL match a (session or\n   media)\
    \ URI present in the description of the session.  If the RTSP\n   aggregated control\
    \ URI is included, it indicates that the key\n   management message is on session\
    \ level (and similarly the RTSP media\n   control URI that it applies to the media\
    \ level).  If no \"uri\"\n   parameter is present in a key-mgmt-spec the specification\
    \ applies to\n   the context identified by the RTSP request URI.\n   The KeyMgmt\
    \ header MAY be used in the messages and directions\n   described in the table\
    \ below.\n   Method            | Direction  |  Requirement\n   ---------------------------------------------\n\
    \   DESCRIBE response |   S->C     |  RECOMMENDED\n   SETUP             |   C->S\
    \     |  REQUIRED\n   SETUP Response    |   S->C     |  REQUIRED (error)\n   Note:\
    \ Section 4.2 describes in detail how the RTSP extensions are\n   used.\n   We\
    \ define one new RTSP status code to report error due to any failure\n   during\
    \ the key management processing (Section 4.2):\n   Status-Code  =  \"463\" ; Key\
    \ management failure\n   A 463 response MAY contain a KeyMgmt header with a key\
    \ management\n   protocol message that further indicates the nature of the error.\n"
- title: 4.  Usage with SDP, SIP, RTSP, and SAP
  contents:
  - "4.  Usage with SDP, SIP, RTSP, and SAP\n   This section gives rules and recommendations\
    \ of how/when to include\n   the defined key management attribute when SIP and/or\
    \ RTSP are used\n   together with SDP.\n   When a key management protocol is integrated\
    \ with SIP/SDP and RTSP,\n   the following general requirements are placed on\
    \ the key management:\n   * At the current time, it MUST be possible to execute\
    \ the key\n     management protocol in at most one request-response message\n\
    \     exchange.  Future relaxation of this requirement is possible but\n     would\
    \ introduce significant complexity for implementations\n     supporting multi-roundtrip\
    \ mechanisms.\n   * It MUST be possible from the SIP/SDP and RTSP application,\
    \ using\n     the key management API, to receive key management data and\n   \
    \  information of whether or not a message is accepted.\n   The content of the\
    \ key management messages depends on the key\n   management protocol that is used.\
    \  However, the content of such key\n   management messages might be expected\
    \ to be roughly as follows: the\n   key management Initiator (e.g., the offerer)\
    \ includes the key\n   management data in a first message, containing the media\
    \ description\n   it should apply to.  This data in general consists of the security\n\
    \   parameters (including key material) needed to secure the\n   communication,\
    \ together with the necessary authentication information\n   (to ensure that the\
    \ message is authentic).\n   At the Responder's side, the key management protocol\
    \ checks the\n   validity of the key management message, together with the\n \
    \  availability of the parameters offered, and then provides the key\n   management\
    \ data to be included in the answer.  This answer may\n   typically authenticate\
    \ the Responder to the Initiator, and also state\n   if the initial offer was\
    \ accepted or not.  Certain protocols might\n   require the Responder to include\
    \ a selection of the security\n   parameters that he is willing to support.  Again,\
    \ the actual content\n   of such responses is dependent on the particular key\
    \ management\n   protocol.\n   Section 7 describes a realization of the MIKEY\
    \ protocol using these\n   mechanisms.  Procedures to be used when mapping new\
    \ key management\n   protocols onto this framework are described in Section 6.\n"
- title: 4.1.  Use of SDP
  contents:
  - "4.1.  Use of SDP\n   This section describes the processing rules for the different\n\
    \   applications that use SDP for the key management.\n"
- title: 4.1.1. General Processing
  contents:
  - "4.1.1. General Processing\n   The processing when SDP is used is slightly different\
    \ according to\n   the way SDP is transported, and if it uses an offer/answer\
    \ or\n   announcement.  The processing can be divided into four different\n  \
    \ steps:\n   1) How to create the initial offer.\n   2) How to handle a received\
    \ offer.\n   3) How to create an answer.\n   4) How to handle a received answer.\n\
    \   It should be noted that the last two steps may not always be\n   applicable,\
    \ as there are cases where an answer cannot or will not be\n   sent back.\n  \
    \ The general processing for creating an initial offer SHALL follow the\n   following\
    \ actions:\n   * The identifier of the key management protocol used MUST be placed\n\
    \     in the prtcl-id field of SDP.  A table of legal protocols\n     identifiers\
    \ is maintained by IANA (see Section 9).\n   * The keymgmt-data field MUST be\
    \ created as follows: the key\n     management protocol MUST be used to create\
    \ the key management\n     message.  This message SHALL be base64 encoded [RFC3548]\
    \ by the SDP\n     application and then encapsulated in the keymgmt-data attribute.\n\
    \     Note though that the semantics of the encapsulated message is\n     dependent\
    \ on the key management protocol that is used.\n   The general processing for\
    \ handling a received offer SHALL follow the\n   following actions:\n   * The\
    \ key management protocol is identified according to the prtcl-id\n     field.\
    \  A table of legal protocols identifiers is maintained by\n     IANA (Section\
    \ 9).\n   * The key management data from the keymgmt-data field MUST be\n    \
    \ extracted, base64 decoded to reconstruct the original message, and\n     then\
    \ passed to the key management protocol for processing.  Note\n     that depending\
    \ on key management protocol, some extra parameters\n     might also be requested\
    \ by the specific API, such as the\n     source/destination network address/port(s)\
    \ for the specified media\n     (however, this will be implementation specific\
    \ depending on the\n     actual API).  The extra parameters that a key management\
    \ protocol\n     might need (other than the ones defined here) MUST be documented,\n\
    \     describing their use, as well as the interaction of that key\n     management\
    \ protocol with SDP and RTSP.\n   * If errors occur, or the key management offer\
    \ is rejected, the\n     session SHALL be aborted.  Possible error messages are\
    \ dependent on\n     the specific session establishment protocol.\n   At this\
    \ stage, the key management will have either accepted or\n   rejected the offered\
    \ parameters.  This MAY cause a response message\n   to be generated, depending\
    \ on the key management protocol and the\n   application scenario.\n   If an answer\
    \ is to be generated, the following general actions SHALL\n   be performed:\n\
    \   * The identifier of the key management protocol used MUST be placed\n    \
    \ in the prtcl-id field.\n   * The keymgmt-data field MUST be created as follows.\
    \  The key\n     management protocol MUST be used to create the key management\n\
    \     message.  This message SHALL be base64 encoded [RFC3548] by the SDP\n  \
    \   application and then encapsulated in the keymgmt-data attribute.\n     The\
    \ semantics of the encapsulated message is dependent on the key\n     management\
    \ protocol that is used.\n   The general processing for handling a received answer\
    \ SHALL follow\n   the following actions:\n   * The key management protocol is\
    \ identified according to the prtcl-id\n     field.\n   * The key management data\
    \ from the keymgmt-data field MUST be\n     extracted, base64 decoded to reconstruct\
    \ the original message, and\n     then passed to the key management protocol for\
    \ processing.\n   * If the key management offer is rejected and the intent is\
    \ to re-\n     negotiate it, it MUST be done through another Offer/Answer\n  \
    \   exchange.  It is RECOMMENDED to NOT abort the session in that case,\n    \
    \ but to re-negotiate using another Offer/Answer exchange.  For\n     example,\
    \ in [SIP], the \"security precondition\" as defined in\n     [SPREC] solves the\
    \ problem for a session initiation.  The\n     procedures in [SPREC] are outside\
    \ the scope of this document.  In\n     an established session, an additional\
    \ Offer/Answer exchange using a\n     re-INVITE or UPDATE as appropriate MAY be\
    \ used\n   * If errors occur, or the key management offer is rejected and there\n\
    \     is no intent to re-negotiate it, the session SHALL be aborted.  If\n   \
    \  possible, an error message indicating the failure SHOULD be sent\n     back.\n\
    \   Otherwise, if all the steps are successful, the normal setup\n   proceeds.\n"
- title: 4.1.2. Use of SDP with Offer/Answer and SIP
  contents:
  - "4.1.2. Use of SDP with Offer/Answer and SIP\n   This section defines additional\
    \ processing rules, to the general\n   rules defined in Section 4.1.1, applicable\
    \ only to applications using\n   SDP with the offer/answer model [OAM] (and in\
    \ particular SIP).\n   When an initial offer is created, the following offer/answer-specific\n\
    \   procedure SHALL be applied:\n   * Before creating the key management data\
    \ field, the list of protocol\n     identifiers MUST be provided by the SDP application\
    \ to (each) key\n     management protocol, as defined in Section 4.1.4 (to defeat\n\
    \     bidding-down attacks).\n   For a received SDP offer that contains the key\
    \ management attributes,\n   the following offer/answer-specific procedure SHALL\
    \ be applied:\n   * Before, or in conjunction with, passing the key management\
    \ data to\n     the key management protocol, the complete list of protocol\n \
    \    identifiers from the offer message is provided by the SDP\n     application\
    \ to the key management protocol (as defined in Section\n     4.1.4).\n   When\
    \ an answer is created, the following offer/answer-specific\n   procedure SHALL\
    \ be applied:\n   * If the key management rejects the offer and the intent is\
    \ to re-\n     negotiate it, the Answer SHOULD include the cause of failure in\
    \ an\n     included message from the key management protocol.  The\n     renegotiation\
    \ MUST be done through another Offer/Answer exchange\n     (e.g., using [SPREC]).\
    \  In an established session, it can also be\n     done through a re-INVITE or\
    \ UPDATE as appropriate.\n   * If the key management rejects the offer and the\
    \ session needs to be\n     aborted, the answerer SHOULD return a \"488 Not Acceptable\
    \ Here\"\n     message, optionally also including one or more Warning headers\
    \ (a\n     \"306 Attribute not understood\" when one of the parameters is not\n\
    \     supported, and a \"399 Miscellaneous warning\" with arbitrary\n     information\
    \ to be presented to a human user or logged; see Section\n     20.43 in [SIP]).\
    \  Further details about the cause of failure MAY be\n     described in an included\
    \ message from the key management protocol.\n     The session is then aborted\
    \ (and it is up to local policy or end\n     user to decide how to continue).\n\
    \   Note that the key management attribute (related to the same key\n   management\
    \ protocol) MAY be present both at session level and at\n   media level.  Consequently,\
    \ the process SHALL be repeated for each\n   such key management attribute detected.\
    \  In case the key management\n   processing of any such attribute does not succeed\
    \ (e.g.,\n   authentication failure, parameters not supported, etc.), on either\n\
    \   session or media level, the entire session setup SHALL be aborted,\n   including\
    \ those parts of the session that successfully completed\n   their part of the\
    \ key management.\n   If more than one key management protocol is supported, multiple\n\
    \   instances of the key management attribute MAY be included in the\n   initial\
    \ offer when using the offer/answer model, each transporting a\n   different key\
    \ management protocol, thus indicating supported\n   alternatives.\n   If the\
    \ offerer includes more than one key management protocol\n   attribute at session\
    \ level (analogous for the media level), these\n   SHOULD be listed in order of\
    \ preference (the first being the\n   preferred).  The answerer selects the key\
    \ management protocol it\n   wishes to use, and processes only it, on either session\
    \ or media\n   level, or on both, according to where located.  If the answerer\
    \ does\n   not support any of the offerer's suggested key management protocols,\n\
    \   the answerer indicates this to the offerer so a new Offer/Answer can\n   be\
    \ triggered; alternatively, it may return a \"488 Not Acceptable\n   Here\" error\
    \ message, whereby the sender MUST abort the current setup\n   procedure.\n  \
    \ Note that the placement of multiple key management offers in a single\n   message\
    \ has the disadvantage that the message expands and the\n   computational workload\
    \ for the offerer will increase drastically.\n   Unless the guidelines of Section\
    \ 4.1.4 are followed, multiple lines\n   may open up bidding-down attacks.  Note\
    \ also that the multiple-offer\n   option has been added to optimize signaling\
    \ overhead in case the\n   Initiator knows some key (e.g., a public key) that\
    \ the Responder has,\n   but is unsure of what protocol the Responder supports.\
    \  The mechanism\n   is not intended to negotiate options within one and the same\n\
    \   protocol.\n   The offerer MUST include the key management data within an offer\
    \ that\n   contains the media description it applies to.\n   Re-keying MUST be\
    \ handled as a new offer, with the new proposed\n   parameters.  The answerer\
    \ treats this as a new offer where the key\n   management is the issue of change.\
    \  The re-keying exchange MUST be\n   finalized before the security protocol can\
    \ change the keys.  The same\n   key management protocol used in the original\
    \ offer SHALL also be used\n   in the new offer carrying re-keying.  If the new\
    \ offer carrying re-\n   keying fails (e.g., the authentication verification fails),\
    \ the\n   answerer SHOULD send a \"488 Not Acceptable Here\" message, including\n\
    \   one or more Warning headers (at least a 306).  The offerer MUST then\n   abort\
    \ the session.\n   Note that, in multicast scenarios, unlike unicast, there is\
    \ only a\n   single view of the stream [OAM], hence there MUST be a uniform\n\
    \   agreement of the security parameters.\n   After the offer is issued, the offerer\
    \ SHOULD be prepared to receive\n   media, as the media may arrive prior to the\
    \ answer.  However, this\n   brings issues, as the offerer does not know yet the\
    \ answerer's choice\n   in terms of, e.g., algorithms, or possibly the key is\
    \ known.  This\n   can cause delay or clipping can occur; if this is unacceptable,\
    \ the\n   offerer SHOULD use mechanisms outside the scope of this document,\n\
    \   e.g., the security preconditions for SIP [SPREC].\n"
- title: 4.1.3. Use of SDP with SAP
  contents:
  - "4.1.3. Use of SDP with SAP\n   There are cases where SDP is used without conforming\
    \ to the\n   offer/answer model; instead, it is a one-way SDP distribution (i.e.,\n\
    \   without back channel), such as when used with SAP and HTTP.\n   The processing\
    \ follows the two first steps of the general SDP\n   processing (see Section 4.1.1).\
    \  It can be noted that the processing\n   in this case differs from the offer/answer\
    \ case in that only one key\n   management protocol SHALL be offered (i.e., no\
    \ negotiation will be\n   possible).  This implies that the bidding-down attack\
    \ is not an\n   issue; therefore, the countermeasure is not needed.  The key\n\
    \   management protocol used MUST support one-way messages.\n"
- title: 4.1.4. Bidding-Down Attack Prevention
  contents:
  - "4.1.4. Bidding-Down Attack Prevention\n   The possibility to support multiple\
    \ key management protocols may,\n   unless properly handled, introduce bidding-down\
    \ attacks.\n   Specifically, a man-in-the-middle could \"peel off\" cryptographically\n\
    \   strong offers (deleting the key management lines from the message),\n   leaving\
    \ only weaker ones as the Responder's choice.  To avoid this,\n   the list of\
    \ identifiers of the proposed key management protocols MUST\n   be authenticated.\
    \  The authentication MUST be done separately by each\n   key management protocol.\n\
    \   Accordingly, it MUST be specified (in the key management protocol\n   specification\
    \ itself or in a companion document) how the list of key\n   management protocol\
    \ identifiers can be processed to be authenticated\n   from the offerer to the\
    \ answerer by the specific key management\n   protocol.  Note that even if only\
    \ one key management protocol is\n   used, that still MUST authenticate its own\
    \ protocol identifier.\n   The list of protocol identifiers MUST then be given\
    \ to each of the\n   selected (offered) key management protocols by the application\
    \ with\n   \";\" separated identifiers.  All the offered protocol identifiers\
    \ MUST\n   be included, in the same order as they appear in the corresponding\n\
    \   SDP description.\n   The protocol list can formally be described as\n   prtcl-list\
    \   =  KMPID *(\";\" KMPID)\n   where KMPID is as defined in Section 3.\n   For\
    \ example, if the offered protocols are MIKEY and two yet-to-be-\n   invented\
    \ protocols KEYP1, KEYP2, the SDP is:\n   v=0\n   o=alice 2891092738 2891092738\
    \ IN IP4 lost.example.com\n   s=Secret discussion\n   t=0 0\n   c=IN IP4 lost.example.com\n\
    \   a=key-mgmt:mikey AQAFgM0XflABAAAAAAAAAAAAAAsAyO...\n   a=key-mgmt:keyp1 727gkdOshsuiSDF9sdhsdKnD/dhsoSJokdo7eWD...\n\
    \   a=key-mgmt:keyp2 DFsnuiSDSh9sdh Kksd/dhsoddo7eOok727gWsJD...\n   m=audio 39000\
    \ RTP/SAVP 98\n   a=rtpmap:98 AMR/8000\n   m=video 42000 RTP/SAVP 31\n   a=rtpmap:31\
    \ H261/90000\n   The protocol list, \"mikey;keyp1;keyp2\", would be generated\
    \ from the\n   SDP description and used as input to each specified key management\n\
    \   protocol (together with the data for that protocol).  Each of the\n   three\
    \ protocols includes this protocol identifier list in its\n   authentication coverage\
    \ (according to its protocol specification).\n   If more than one protocol is\
    \ supported by the offerer, it is\n   RECOMMENDED that all acceptable protocols\
    \ are included in the first\n   offer, rather than making single, subsequent alternative\
    \ offers in\n   response to error messages; see \"Security Considerations\".\n\
    \   End-to-end integrity protection of the key-mgmt attributes\n   altogether,\
    \ provided externally to the key management itself, also\n   protects against\
    \ this bidding-down attack.  This is, for example, the\n   case if SIP uses S/MIME\
    \ [RFC3851] to end-to-end integrity protect the\n   SDP description.  However,\
    \ as this end-to-end protection is not an\n   assumption of the framework, the\
    \ mechanisms defined in this section\n   SHALL be applied.\n"
- title: 4.2.  RTSP Usage
  contents:
  - "4.2.  RTSP Usage\n   RTSP does not use the offer/answer model, as SIP does. \
    \ This causes\n   some problems, as it is not possible (without modifying RTSP)\
    \ to send\n   back an answer.  To solve this, a new header has been introduced\n\
    \   (Section 3.2).  This also assumes that the key management also has\n   some\
    \ kind of binding to the media, so that the response to the server\n   will be\
    \ processed as required.\n   The server SHALL be the Initiator of the key management\
    \ exchange for\n   sessions in PLAY mode, i.e., transporting media from server\
    \ to\n   client.  The below text describes the behavior for PLAY mode.  For\n\
    \   any other mode, the behavior is not defined in this specification.\n   To\
    \ obtain a session description, the client initially contacts the\n   server via\
    \ a DESCRIBE message.  The initial key management message\n   from the RTSP server\
    \ is sent to the client in the SDP of the 200 OK\n   in response to the DESCRIBE.\
    \  Note that only one key management\n   protocol SHALL be used per session/media\
    \ level.  A server MAY allow\n   the SDP with key management attribute(s) to be\
    \ distributed to the\n   client through other means than RTSP, although this is\
    \ not specified\n   here.\n   The \"uri\" parameter of the KeyMgmt header is used\
    \ to indicate for the\n   key management protocol on what context the carried\
    \ message applies.\n   For key management messages on the SDP session level, the\
    \ answer MUST\n   contain the RTSP aggregated control URL to indicate this.  For\
    \ key\n   management messages initially on SDP media level, the key management\n\
    \   response message in the KeyMgmt header MAY use the RTSP media-level\n   URL.\
    \  For RTSP sessions not using aggregated control, i.e., no\n   session-level\
    \ control URI is defined, the key management protocol\n   SHALL only be invoked\
    \ on individual media streams.  In this case\n   also, the key management response\
    \ SHALL be on individual media\n   streams (i.e., one RTSP key management header\
    \ per media).\n   When responding to the initial key management message, the client\n\
    \   uses the new RTSP header (KeyMgmt) to send back an answer.  How this\n   is\
    \ done depends on the usage context:\n   * Key management protocol responses for\
    \ the initial establishment of\n     security parameters for an aggregated RTSP\
    \ session SHALL be sent in\n     the first SETUP of the session.  This means that\
    \ if the key\n     management is declared for the whole session but is set up\
    \ in non-\n     aggregated fashion (i.e., one media per RTSP session), each SETUP\n\
    \     MUST carry the same response for the session-level context.  When\n    \
    \ performing a setup of the second or any subsequent media in an RTSP\n     session,\
    \ the same key management parameters as established for the\n     first media\
    \ also apply to these setups.\n   * Key management responses for the initial establishment\
    \ of security\n     parameters for an individual media SHALL only be included\
    \ in SETUP\n     for the corresponding media stream.\n   If a server receives\
    \ a SETUP message in which it expects a key\n   management message, but none is\
    \ included, a \"403 Forbidden\" SHOULD be\n   returned to the client, whereby\
    \ the current setup MUST be aborted.\n   When the server creates an initial SDP\
    \ message, the procedure SHALL\n   be the same as described in Section 4.1.1.\n\
    \   The client processing of the initial SDP message from the server\n   SHALL\
    \ follow the same procedures as described in Section 4.1.1,\n   except that, if\
    \ there is an error, the session is aborted (no error\n   is sent back).\n   The\
    \ client SHALL create the response, using the key management header\n   in RTSP,\
    \ as follows:\n   * The identifier of the key management protocol used (e.g.,\
    \ MIKEY)\n     MUST be placed in the \"prot\" field of the header.  The prot values\n\
    \     are maintained by IANA (Section 9).\n   * The keymgmt-data field MUST be\
    \ created as follows: the key\n     management protocol MUST be used to create\
    \ the key management\n     message.  This message SHALL be base64 encoded by the\
    \ RTSP\n     application and then encapsulated in the \"data\" field of the\n\
    \     header.  The semantics of the encapsulated message is dependent on\n   \
    \  the key management protocol that is used.\n   * Include, if necessary, the\
    \ URL to indicate the context in the \"uri\"\n     parameter.\n   The server SHALL\
    \ process a received key management header in RTSP as\n   follows:\n   * The key\
    \ management protocol is identified according to the \"prot\"\n     field.\n \
    \  * The key management data from the \"data\" field MUST be extracted,\n    \
    \ base64 decoded to reconstruct the original message, and then passed\n     to\
    \ the key management protocol for processing.\n   * If the key management protocol\
    \ is successful, the processing can\n     proceed according to normal rules.\n\
    \   * Otherwise, if the key management fails (e.g., due to authentication\n  \
    \   failure or parameter not supported), an error is sent back as the\n     SETUP\
    \ response using RTSP error code 463 (see Section 3.2) and the\n     session is\
    \ aborted.  It is up to the key management protocol to\n     specify (within the\
    \ RTSP status code message or through key\n     management messages) details about\
    \ the type of error that occurred.\n   Re-keying within RTSP is for further study,\
    \ given that media updating\n   mechanisms within RTSP are unspecified at the\
    \ time this document was\n   written.\n"
- title: 5.  Example Scenarios
  contents:
  - "5.  Example Scenarios\n   The following examples utilize MIKEY [MIKEY] as the\
    \ key management\n   protocol to be integrated into SDP and RTSP.\n"
- title: 5.1.  Example 1 (SIP/SDP)
  contents:
  - "5.1.  Example 1 (SIP/SDP)\n   A SIP call is taking place between Alice and Bob.\
    \  Alice sends an\n   INVITE message consisting of the following offer:\n   v=0\n\
    \   o=alice 2891092738 2891092738 IN IP4 w-land.example.com\n   s=Cool stuff\n\
    \   e=alice@w-land.example.com\n   t=0 0\n   c=IN IP4 w-land.example.com\n   a=key-mgmt:mikey\
    \ AQAFgM0XflABAAAAAAAAAAAAAAsAyONQ6gAAAAAGEEoo2pee4hp2\n   UaDX8ZE22YwKAAAPZG9uYWxkQGR1Y2suY29tAQAAAAAAAQAk0JKpgaVkDaawi9whVBtBt\n\
    \   0KZ14ymNuu62+Nv3ozPLygwK/GbAV9iemnGUIZ19fWQUOSrzKTAv9zV\n   m=audio 49000\
    \ RTP/SAVP 98\n   a=rtpmap:98 AMR/8000\n   m=video 52230 RTP/SAVP 31\n   a=rtpmap:31\
    \ H261/90000\n   That is, Alice proposes to set up one audio stream and one video\n\
    \   stream that run over SRTP (signaled by the use of the SAVP profile).\n   She\
    \ uses MIKEY to set up the security parameters for SRTP (Section\n   7).  The\
    \ MIKEY message contains the security parameters, together\n   with the necessary\
    \ key material.  Note that MIKEY is exchanging the\n   crypto suite for both streams,\
    \ as it is placed at the session level.\n   Also, MIKEY provides its own security,\
    \ i.e., when Bob processes\n   Alice's MIKEY message, he will also find the signaling\
    \ of the\n   security parameters used to secure the MIKEY exchange.  Alice's\n\
    \   endpoint's authentication information is also carried within the\n   MIKEY\
    \ message, to prove that the message is authentic.  The above\n   MIKEY message\
    \ is an example of message when the pre-shared method\n   MIKEY is used.\n   Upon\
    \ receiving the offer, Bob checks the validity of the received\n   MIKEY message,\
    \ and, in case of successful verification, he accepts\n   the offer and sends\
    \ an answer back to Alice (with his authentication\n   information, and, if necessary,\
    \ also some key material from his\n   side):\n   v=0\n   o=bob 2891092897 2891092897\
    \ IN IP4 foo.example.com\n   s=Cool stuff\n   e=bob@foo.example.com\n   t=0 0\n\
    \   c=IN IP4 foo.example.com\n   a=key-mgmt:mikey AQEFgM0XflABAAAAAAAAAAAAAAYAyONQ6gAAAAAJAAAQbWlja2\n\
    \   V5QG1vdXNlLmNvbQABn8HdGE5BMDXFIuGEga+62AgY5cc=\n   m=audio 49030 RTP/SAVP\
    \ 98\n   a=rtpmap:98 AMR/8000\n   m=video 52230 RTP/SAVP 31\n   a=rtpmap:31 H261/90000\n\
    \   Upon receiving the answer, Alice verifies the correctness of it.  In\n   case\
    \ of success, at this point Alice and Bob share the security\n   parameters and\
    \ the keys needed for a secure RTP communication.\n"
- title: 5.2.  Example 2 (SDP)
  contents:
  - "5.2.  Example 2 (SDP)\n   This example shows what Alice would have done if she\
    \ wished to\n   protect only the audio stream.  She would have placed the MIKEY\
    \ line\n   at media level for the audio stream only (also specifying the use of\n\
    \   the SRTP profile there, SAVP).  The semantics of the MIKEY messages\n   is\
    \ as in the previous case, but applies only to the audio stream.\n   v=0\n   o=alice\
    \ 2891092738 2891092738 IN IP4 w-land.example.com\n   s=Cool stuff\n   e=alice@w-land.example.com\n\
    \   t=0 0\n   c=IN IP4 w-land.example.com\n   m=audio 49000 RTP/SAVP 98\n   a=rtpmap:98\
    \ AMR/8000\n   a=key-mgmt:mikey AQAFgM0XflABAAAAAAAAAAAAAAsAy...\n   m=video 52230\
    \ RTP/AVP 31\n   a=rtpmap:31 H261/90000\n   Bob would then act as described in\
    \ the previous example, including\n   the MIKEY answer at the media level for\
    \ the audio stream (as Alice\n   did).\n   Note that even if the key management\
    \ attribute were specified at the\n   session level, the video part would not\
    \ be affected by this (as a\n   security profile is not used, instead the RTP/AVP\
    \ profile is\n   signaled).\n"
- title: 5.3.  Example 3 (RTSP)
  contents:
  - "5.3.  Example 3 (RTSP)\n   A client wants to set up a streaming session and requests\
    \ a media\n   description from the streaming server.\n   DESCRIBE rtsp://server.example.com/fizzle/foo\
    \ RTSP/1.0\n   CSeq: 312\n   Accept: application/sdp\n   From: user@example.com\n\
    \   The server sends back an OK message including an SDP description,\n   together\
    \ with the MIKEY message.  The MIKEY message contains the\n   necessary security\
    \ parameters that the server is willing to offer to\n   the client, together with\
    \ authentication information (to prove that\n   the message is authentic) and\
    \ the key material.  The SAVP profile\n   also signals the use of SRTP for securing\
    \ the media sessions.\n   RTSP/1.0 200 OK\n   CSeq: 312\n   Date: 23 Jan 1997\
    \ 15:35:06 GMT\n   Content-Type: application/sdp\n   Content-Length: 478\n   v=0\n\
    \   o=actionmovie 2891092738 2891092738 IN IP4 movie.example.com\n   s=Action\
    \ Movie\n   e=action@movie.example.com\n   t=0 0\n   c=IN IP4 movie.example.com\n\
    \   a=control:rtsp://movie.example.com/action\n   a=key-mgmt:mikey AQAFgM0XflABAAAAAAAAAAAAAAsAy...\n\
    \   m=audio 0 RTP/SAVP 98\n   a=rtpmap:98 AMR/8000\n   a=control:rtsp://movie.example.com/action/audio\n\
    \   m=video 0 RTP/SAVP 31\n   a=rtpmap:31 H261/90000\n   a=control:rtsp://movie.example.com/action/video\n\
    \   The client checks the validity of the received MIKEY message, and, in\n  \
    \ case of successful verification, it accept the message.  The client\n   then\
    \ includes its key management data in the SETUP request going back\n   to the\
    \ server, the client authentication information (to prove that\n   the message\
    \ is authentic), and, if necessary, some key material.\n   SETUP rtsp://movie.example.com/action/audio\
    \ RTSP/1.0\n   CSeq: 313\n   Transport: RTP/SAVP/UDP;unicast;client_port=3056-3057\n\
    \   keymgmt: prot=mikey; uri=\"rtsp://movie.example.com/action\";\n          \
    \  data=\"AQEFgM0XflABAAAAAAAAAAAAAAYAyONQ6g...\"\n   The server processes the\
    \ request including checking the validity of\n   the key management header.\n\
    \   RTSP/1.0 200 OK\n   CSeq: 313\n   Session: 12345678\n   Transport: RTP/SAVP/UDP;unicast;client_port=3056-3057;\n\
    \                         server_port=5000-5001\n   Note that in this case the\
    \ key management line was specified at the\n   session level, and the key management\
    \ information only goes into the\n   SETUP related to the first stream.  The \"\
    uri\" indicates to the server\n   that the context is for the whole aggregated\
    \ session the key\n   management applies.  The RTSP client then proceeds setting\
    \ up the\n   second media (video) in aggregation with the audio.  As the two media\n\
    \   are run in aggregation and the key context was established in the\n   first\
    \ exchange, no more key management messages are needed.\n"
- title: 5.4.  Example 4 (RTSP)
  contents:
  - "5.4.  Example 4 (RTSP)\n   The use of the MIKEY message at the media level would\
    \ change the\n   previous example as follows.\n   The 200 OK would contain the\
    \ two distinct SDP attributes for MIKEY at\n   the media level:\n   RTSP/1.0 200\
    \ OK\n   CSeq: 312\n   Date: 23 Jan 1997 15:35:06 GMT\n   Content-Type: application/sdp\n\
    \   Content-Length: 561\n   v=0\n   o=actionmovie 2891092738 2891092738 IN IP4\
    \ movie.example.com\n   s=Action Movie\n   e=action@movie.example.com\n   t=0\
    \ 0\n   c=IN IP4 movie.example.com\n   a=control:rtsp://movie.example.com/action\n\
    \   m=audio 0 RTP/SAVP 98\n   a=rtpmap:98 AMR/8000\n   a=key-mgmt:mikey AQAFgM0XflABAAAAAAAAAAAAA...\n\
    \   a=control:rtsp://movie.example.com/action/audio\n   m=video 0 RTP/SAVP 31\n\
    \   a=rtpmap:31 H261/90000\n   a=key-mgmt:mikey AQAFgM0AdlABAAAAAAAAAAAAA...\n\
    \   a=control:rtsp://movie.example.com/action/video\n   Each RTSP header is inserted\
    \ in the SETUP related to the audio and\n   video separately:\n   SETUP rtsp://movie.example.com/action/audio\
    \ RTSP/1.0\n   CSeq: 313\n   Transport: RTP/SAVP/UDP;unicast;client_port=3056-3057\n\
    \   keymgmt: prot=mikey; uri=\"rtsp://movie.example.com/action/audio\";\n    \
    \        data=\"AQEFgM0XflABAAAAAAAAAAAAA...\"\n   and similarly for the video\
    \ session:\n   SETUP rtsp://movie.example.com/action/video RTSP/1.0\n   CSeq:\
    \ 315\n   Transport: RTP/SAVP/UDP;unicast;client_port=3058-3059\n   keymgmt: prot=mikey;\
    \ uri=\"rtsp://movie.example.com/action/video\";\n            data=\"AQEFgM0AdlABAAAAAAAAAAAAAA...\"\
    \n   Note: The \"uri\" parameter could be excluded from the two SETUP\n   messages\
    \ in this example.\n"
- title: 6.  Adding Further Key Management Protocols
  contents:
  - "6.  Adding Further Key Management Protocols\n   This framework cannot be used\
    \ with all key management protocols.  The\n   key management protocol needs to\
    \ comply with the requirements\n   described in Section 4.  In addition to this,\
    \ the following needs to\n   be defined:\n   * The key management protocol identifier\
    \ to be used as the protocol\n     identifier should be registered at IANA according\
    \ to Section 9.\n   * The information that the key management needs from SDP and\
    \ RTSP,\n     and vice versa, as described in Section 4.  The exact API is\n \
    \    implementation specific, but it MUST at least support the exchange\n    \
    \ of the specified information.\n   * The key management protocol to be added\
    \ MUST be such that the\n     processing in Section 4 (describing its interactions\
    \ with SDP and\n     RTSP) can be applied.  Note in particular, Section 4.1.4\
    \ requires\n     each key management protocol to specify how the list of protocol\n\
    \     identifiers is authenticated inside that key management protocol.\n    \
    \ The key management MUST always be given the protocol identifier(s)\n     of\
    \ the key management protocol(s) included in the offer in the\n     correct order\
    \ as they appear.\n   Finally, it is obviously crucial to analyze possible security\n\
    \   implications induced by the introduction of a new key management\n   protocol\
    \ in the described framework.\n   Today, the MIKEY protocol [MIKEY] has adopted\
    \ the key management\n   extensions to work together with SIP and RTSP (see Section\
    \ 7).  Other\n   protocols MAY use the described attribute and header, e.g., Kerberos\n\
    \   [KERB]; however, this is subject to future standardization.\n"
- title: 7.  Integration of MIKEY
  contents:
  - "7.  Integration of MIKEY\n   [MIKEY] describes a key management protocol for\
    \ real-time\n   applications (both for peer-to-peer communication and group\n\
    \   communication).  MIKEY carries the security parameters needed for\n   setting\
    \ up the security protocol (e.g., SRTP) protecting the media\n   stream.  MIKEY\
    \ can be integrated within SDP and RTSP, following the\n   rules and guidelines\
    \ described in this document.\n   MIKEY satisfies the requirements described in\
    \ Section 4.  The MIKEY\n   message is formed as defined in [MIKEY], then passed\
    \ from MIKEY to\n   the SDP application that base64 encodes it, and encapsulates\
    \ it in\n   the keymgmt-data attribute.  The examples in Section 5 use MIKEY,\n\
    \   where the semantics of the exchange is also briefly explained.\n   The key\
    \ management protocol identifier (KMPID) to be used as the\n   protocol identifier\
    \ SHALL be \"mikey\" and is registered at IANA; see\n   Section 9 for details.\n\
    \   The information that the key management needs from SDP and RTSP, and\n   vice\
    \ versa, follows Section 4.  To avoid bidding-down attacks, the\n   directives\
    \ in Section 4.1.4 are followed.  The list of protocol\n   identifiers is authenticated\
    \ within MIKEY by placing the list in a\n   General Extension Payload (of type\
    \ \"SDP IDs\", [MIKEY]), which then\n   automatically will be integrity protected/signed.\
    \  The receiver SHALL\n   then match the list in the General Extension Payload\
    \ with the list\n   included in SDP and SHOULD (according to policy) if they differ,\
    \ or\n   if integrity/signature verification fails, reject the offer.\n   The\
    \ server will need to be able to know the identity of the client\n   before creating\
    \ and sending a MIKEY message.  To signal the (MIKEY)\n   identity of the client\
    \ to the server in the DESCRIBE, it is\n   RECOMMENDED to include the From header\
    \ field in RTSP.  Other methods\n   to establish the identity could be using the\
    \ IP address or retrieving\n   the identity from the RTSP authentication if used.\n"
- title: 7.1.  MIKEY Interface
  contents:
  - "7.1.  MIKEY Interface\n   This subsection describes some aspects, which implementers\
    \ SHOULD\n   consider.  If the MIKEY implementation is separate from the\n   SDP/SIP/RTSP,\
    \ an application programming interface (API) between\n   MIKEY and those protocols\
    \ is needed with certain functionality\n   (however, exactly what it looks like\
    \ is implementation dependent).\n   The following aspects need to be considered:\n\
    \   * the possibility for MIKEY to receive information about the sessions\n  \
    \   negotiated.  This is to some extent implementation dependent.  But\n     it\
    \ is RECOMMENDED that, in the case of SRTP streams, the number of\n     SRTP streams\
    \ is included (and the direction of these).  It is also\n     RECOMMENDED to provide\
    \ the destination addresses and ports to\n     MIKEY.  When referring to streams\
    \ described in SDP, MIKEY SHALL\n     allocate two consecutive numbers for the\
    \ related Crypto Session\n     indexes (as each stream can be bi-directional).\
    \  An example: if the\n     SDP contains two m lines (specifying whatever direction\
    \ of the\n     streams), and MIKEY is at the session level, then MIKEY allocates,\n\
    \     e.g., the Crypto Sessions Identifiers (CS IDs; see [MIKEY]) '1' and\n  \
    \   '2' for the first m line, and '3' and '4' for the second m line.\n   * the\
    \ possibility for MIKEY to receive incoming MIKEY messages and\n     return a\
    \ status code from/to the SIP/RTSP application.\n   * the possibility for the\
    \ SIP or RTSP applications to receive\n     information from MIKEY.  This would\
    \ typically include the receiving\n     of the Crypto Session Bundle Identifier\
    \ (CSB ID; see [MIKEY], to\n     later be able to identify the active MIKEY session),\
    \ and the SSRCs\n     and the rollover counter (ROC; see [SRTP]) for SRTP usage.\
    \  It is\n     also RECOMMENDED that extra information about errors can be\n \
    \    received.\n   * the possibility for the SIP or RTSP application to receive\
    \ outgoing\n     MIKEY messages.\n   * the possibility to tear down a MIKEY CSB\
    \ (e.g., if the SIP session\n     is closed, the CSB SHOULD also be closed).\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The framework for transfer of key management\
    \ data as described here\n   is intended to provide the security parameters for\
    \ the end-to-end\n   protection of the media session.  It is furthermore good\
    \ practice to\n   secure the session setup (e.g., SDP, SIP, RTSP, SAP).  However,\
    \ it\n   might be that the security of the session setup is not possible to\n\
    \   achieve end-to-end, but only hop-by-hop.  For example, SIP requires\n   intermediate\
    \ proxies to have access to part of the SIP message, and\n   sometimes also to\
    \ the SDP description (cf. [E2M]), although end-to-\n   end confidentiality can\
    \ hide bodies from intermediaries.  General\n   security considerations for the\
    \ session setup can be found in SDP\n   [SDPnew], SIP [SIP], and RTSP [RTSP].\
    \  The framework defined in this\n   memo is useful when the session setup is\
    \ not protected in an end-to-\n   end fashion, but the media streams need to be\
    \ end-to-end protected;\n   hence the security parameters (such as keys) are not\
    \ wanted revealed\n   to or manipulated by intermediaries.\n   The security will\
    \ also depend on the level of security the key\n   management protocol offers.\
    \  It follows that, under the assumption\n   that the key management schemes are\
    \ secure, the SDP can be passed\n   along unencrypted without affecting the key\
    \ management as such, and\n   the media streams will still be secure even if some\
    \ attackers gained\n   knowledge of the SDP contents.  Further security considerations\
    \ can\n   be found for each key management protocol (for MIKEY these can be\n\
    \   found in [MIKEY]).  However, if the SDP messages are not sent\n   integrity\
    \ protected between the parties, it is possible for an active\n   attacker to\
    \ change attributes without being detected.  As the key\n   management protocol\
    \ may (indirectly) rely on some of the session\n   information from SDP (e.g.,\
    \ address information), an attack on SDP\n   may have indirect consequences on\
    \ the key management.  Even if the\n   key management protocol does not rely on\
    \ parameters of SDP and will\n   not be affected by manipulation of these, different\
    \ denial-of-service\n   (DoS) attacks aimed at SDP may lead to undesired interruption\
    \ in the\n   setup.  See also the attacks described at the end of this section.\n\
    \   The only integrity-protected attribute of the media stream is, in the\n  \
    \ framework proposed here, the set of key management protocols.  For\n   instance,\
    \ it is possible to (1) swap key management offers across SDP\n   messages, or\
    \ (2) inject a previous key management offer into a new\n   SDP message.  Making\
    \ the (necessary) assumption that all involved key\n   management protocols are\
    \ secure, the second attack will be detected\n   by replay protection mechanisms\
    \ of the key management protocol(s).\n   Making the further assumption that, according\
    \ to normal best current\n   practice, the production of each key management offer\
    \ is done with\n   independent (pseudo)random choices (for session keys and other\n\
    \   parameters), the first attack will either be detected in the\n   Responder's\
    \ (now incorrect) verification reply message (if such is\n   used) or be a pure\
    \ DoS attack, resulting in Initiator and Responder\n   using different keys.\n\
    \   It is RECOMMENDED for the identity at the SPD level to be the one\n   authenticated\
    \ at the key management protocol level.  However, this\n   might need to keep\
    \ into consideration privacy aspects, which are out\n   of scope for this framework.\n\
    \   The use of multiple key management protocols in the same offer may\n   open\
    \ up the possibility of a bidding-down attack, as specified in\n   Section 4.1.4.\
    \  To exclude such possibility, the authentication of\n   the protocol identifier\
    \ list is used.  Note though, that the security\n   level of the authenticated\
    \ protocol identifier will be as high (or\n   low), as the \"weakest\" protocol.\
    \  Therefore, the offer MUST NOT\n   contain any security protocols (or configurations\
    \ thereof) weaker\n   than permitted by local security policy.\n   Note that it\
    \ is impossible to ensure the authenticity of a declined\n   offer, since even\
    \ if it comes from the true respondent, the fact that\n   the answerer declines\
    \ the offer usually means that he does not\n   support the protocol(s) offered,\
    \ and consequently cannot be expected\n   to authenticate the response either.\
    \  This means that if the\n   Initiator is unsure of which protocol(s) the Responder\
    \ supports, we\n   RECOMMEND that the Initiator offers all acceptable protocols\
    \ in a\n   single offer.  If not, this opens up the possibility for a \"man-in-\n\
    \   the-middle\" (MITM) to affect the outcome of the eventually agreed\n   upon\
    \ protocol, by faking unauthenticated error messages until the\n   Initiator eventually\
    \ offers a protocol \"to the liking\" of the MITM.\n   This is not really a security\
    \ problem, but rather a mild form of\n   denial of service that can be avoided\
    \ by following the above\n   recommendation.  Note also that the declined offer\
    \ could be the\n   result of an attacker who sits on the path and removes all\
    \ the key\n   management offers.  The bidding-down attack prevention, as described\n\
    \   above, would not work in this case (as the answerer receives no key\n   management\
    \ attribute).  Also, here it is impossible to ensure the\n   authenticity of a\
    \ declined offer, though here the reason is the\n   \"peeling-off\" attack.  It\
    \ is up to the local policy to decide the\n   behavior in the case that the response\
    \ declines any security\n   (therefore, there is impossibility of authenticating\
    \ it).  For\n   example, if the local policy requires a secure communication and\n\
    \   cannot accept an unsecured one, then the session setup SHALL be\n   aborted.\n"
- title: 9.  IANA Considerations
  contents:
  - '9.  IANA Considerations

    '
- title: 9.1.  SDP Attribute Registration
  contents:
  - "9.1.  SDP Attribute Registration\n   The IANA has created a new subregistry for\
    \ the purpose of key\n   management protocol integration with SDP.\n      SDP\
    \ Attribute Field (\"att-field\"):\n        Name:               key-mgmt-att-field\n\
    \        Long form:          key management protocol attribute field\n       \
    \ Type of name:       att-field\n        Type of attribute:  Media and session\
    \ level\n        Purpose:            See RFC 4567, Section 3.\n        Reference:\
    \          RFC 4567, Section 3.1\n        Values:             See RFC 4567, Sections\
    \ 3.1 and 9.3.\n"
- title: 9.2.  RTSP Registration
  contents:
  - "9.2.  RTSP Registration\n   The IANA has created a new subregistry for the purpose\
    \ of key\n   management protocol integration with RTSP.\n   Following the guidelines\
    \ of [RTSP], the registration is defined as\n   follows:\n   Header name:    \
    \  keymgmt\n   Header syntax:    see RFC 4567, Section 3.2\n   Intended usage:\
    \   see RFC 4567, Section 3.2\n   Proxy treatment:  Proxies SHALL NOT add, change,\
    \ or delete the\n                      header.  The proxy does not need to read\
    \ this\n                      header.\n   Purpose:          see RFC 4567, Section\
    \ 3\n   The RTSP Status-Code \"463\" (RFC 4567), with the default string \"Key\n\
    \   management failure\", needs to be registered.\n"
- title: 9.3.  Protocol Identifier Registration
  contents:
  - "9.3.  Protocol Identifier Registration\n   This document defines one new name\
    \ space, the \"SDP/RTSP key\n   management protocol identifier\", associated with\
    \ the protocol\n   identifier, KMPID, defined in Section 3 to be used with the\
    \ above\n   registered attributes in SDP and RTSP.\n   The IANA has created a\
    \ new subregistry for the KMPID parameter, with\n   the following registration\
    \ created initially:  \"mikey\".\n   Value name:     mikey\n   Long name:    \
    \  Multimedia Internet KEYing\n   Purpose:        Usage of MIKEY with the key-mgmt-att-field\n\
    \                    attribute and the keymgmt RTSP header\n   Reference:    \
    \  Section 7 in RFC 3830\n   Note that this registration implies that the protocol\
    \ identifier,\n   KMPID, name space will be shared between SDP and RTSP.\n   Further\
    \ values may be registered according to the \"Specification\n   Required\" policy\
    \ as defined in [RFC2434].  Each new registration\n   needs to indicate the parameter\
    \ name, and register it with IANA.\n   Note that the parameter name is case sensitive,\
    \ and it is RECOMMENDED\n   that the name be in lowercase letters.  For each new\
    \ registration, it\n   is mandatory that a permanent, stable, and publicly accessible\n\
    \   document exists that specifies the semantics of the registered\n   parameter\
    \ and the requested details of interaction between the key\n   management protocol\
    \ and SDP, as specified in RFC 4567.\n   New values MUST be registered with IANA.\
    \  Registrations SHALL include\n   the following information:\n   * Contact: the\
    \ contact name and email address\n   * Value name: the name of the value being\
    \ registered (which MUST\n     comply with the KMPID as defined in Section 3)\n\
    \   * Long Name: long-form name in English\n   * Purpose: short explanation of\
    \ the purpose of the registered name.\n   * Reference: a reference to the specification\
    \ (e.g., RFC number)\n     providing the usage guidelines in accordance to Section\
    \ 6 (and also\n     complying to the specified requirements).\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   The authors would like to thank Francois Audet, Rolf\
    \ Blom, Johan\n   Bilien, Magnus Brolin, Erik Eliasson, Martin Euchner, Steffen\
    \ Fries,\n   Joerg Ott, Jon Peterson, and Jon-Olov Vatn.  A special thanks to\n\
    \   Colin Perkins and Magnus Westerlund, who contributed in many\n   sections.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [MIKEY]    Arkko, J., Carrara, E., Lindholm,\
    \ F., Naslund, M., and K.\n              Norrman, \"MIKEY: Multimedia Internet\
    \ KEYing\", RFC 3830,\n              August 2004.\n   [OAM]      Rosenberg, J.\
    \ and H. Schulzrinne, \"An Offer/Answer Model\n              with Session Description\
    \ Protocol (SDP)\", RFC 3264, June\n              2002.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC2434]  Narten, T. and H. Alvestrand, \"\
    Guidelines for Writing an\n              IANA Considerations Section in RFCs\"\
    , BCP 26, RFC 2434,\n              October 1998.\n   [RFC3548]  Josefsson, S.,\
    \ \"The Base16, Base32, and Base64 Data\n              Encodings\", RFC 3548,\
    \ July 2003.\n   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"\
    Uniform\n              Resource Identifier (URI): Generic Syntax\", STD 66, RFC\n\
    \              3986, January 2005.\n   [RFC4234]  Crocker, D., Ed. and P. Overell,\
    \ \"Augmented BNF for Syntax\n              Specifications: ABNF\", RFC 4234,\
    \ October 2005.\n   [RTSP]     Schulzrinne, H., Rao, A., and R. Lanphier, \"Real\
    \ Time\n              Streaming Protocol (RTSP)\", RFC 2326, April 1998.\n   [SDPnew]\
    \   Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n              Description\
    \ Protocol\", RFC 4566, July 2006.\n   [SIP]      Rosenberg, J., Schulzrinne,\
    \ H., Camarillo, G., Johnston,\n              A., Peterson, J., Sparks, R., Handley,\
    \ M., and E.\n              Schooler, \"SIP: Session Initiation Protocol\", RFC\
    \ 3261,\n              June 2002.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [E2M]      Ono, K. and S. Tachimoto, \"Requirements\
    \ for End-to-Middle\n              Security for the Session Initiation Protocol\
    \ (SIP)\", RFC\n              4189, October 2005.\n   [KERB]     Neuman, C., Yu,\
    \ T., Hartman, S., and K. Raeburn, \"The\n              Kerberos Network Authentication\
    \ Service (V5)\", RFC 4120,\n              July 2005.\n   [RFC3851]  Ramsdell,\
    \ B., \"Secure/Multipurpose Internet Mail\n              Extensions (S/MIME) Version\
    \ 3.1 Message Specification\",\n              RFC 3851, July 2004.\n   [SDES]\
    \     Andreasen, F., Baugher, M., and D. Wing, \"Session\n              Description\
    \ Protocol (SDP) Security Descriptions for Media\n              Streams\", RFC\
    \ 4568, July 2006.\n   [SPREC]    Andreasen, F., Baugher, M., and Wing, D., \"\
    Security\n              Preconditions for Session Description Protocol Media\n\
    \              Streams\", Work in Progress, October 2005.\n   [SRTP]     Baugher,\
    \ M., McGrew, D., Naslund, M., Carrara, E., and K.\n              Norrman, \"\
    The Secure Real-time Transport Protocol (SRTP)\",\n              RFC 3711, March\
    \ 2004.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jari Arkko\n   Ericsson\n   02420 Jorvas\n   Finland\n\
    \   Phone:  +358 40 5079256\n   EMail:  jari.arkko@ericsson.com\n   Elisabetta\
    \ Carrara\n   Royal Institute of Technology\n   Stockholm\n   Sweden\n   EMail:\
    \  carrara@kth.se\n   Fredrik Lindholm\n   Ericsson\n   SE-16480 Stockholm\n \
    \  Sweden\n   Phone:  +46 8 58531705\n   EMail:  fredrik.lindholm@ericsson.com\n\
    \   Mats Naslund\n   Ericsson Research\n   SE-16480 Stockholm\n   Sweden\n   Phone:\
    \  +46 8 58533739\n   EMail:  mats.naslund@ericsson.com\n   Karl Norrman\n   Ericsson\
    \ Research\n   SE-16480 Stockholm\n   Sweden\n   Phone:  +46 8 4044502\n   EMail:\
    \  karl.norrman@ericsson.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
