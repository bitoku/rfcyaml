- title: __initial_text__
  contents:
  - '                       HEMS VARIABLE DEFINITIONS

    '
- title: STATUS OF THIS MEMO
  contents:
  - "STATUS OF THIS MEMO\n   This memo assigns instruction codes, defines object formats\
    \ and\n   object semantics for use with the High-Level Monitoring and Control\n\
    \   Language, defined in RFC-1023.\n   This memo is provisional and the definitions\
    \ are subject to change.\n   Readers should confirm that they have the most recent\
    \ version of the\n   memo.\n   The authors assume a working knowledge of the ISO\
    \ data encoding\n   standard, ASN.1, and a general understanding of the IP protocol\n\
    \   suite.\n   Distribution of this memo is unlimited.\n"
- title: INTRODUCTION
  contents:
  - "INTRODUCTION\n   In other memos [RFC-1021, RFC-1022] the authors have described\
    \ a\n   general system for monitoring and controlling network entities; this\n\
    \   system is called the High-Level Entity Management System (HEMS).\n   This\
    \ system permits applications to read and write values in remote\n   entities\
    \ which support a simple query processor.\n   In this memo we standardize the\
    \ language instruction codes, the\n   objects which can be read or written, and\
    \ the meanings of any\n   constants stored in the objects.  There are three parts\
    \ to this\n   standardization: (1) the assignment of an ASN.1 tag to each value,\n\
    \   (2) the definition of the external representation of the value (e.g.,\n  \
    \ INTEGER, OCTETSTRING, etc.), and (3) the definition of the meaning,\n   or semantics\
    \ of a value (e.g., what types of packets a particular\n   packet counter actually\
    \ tracks).\n   This definition is provisional, and the authors hope that it will\
    \ be\n   expanded and improved as the community becomes more experienced with\n\
    \   HEMS.  Readers with suggestions for additional object definitions, or\n  \
    \ improved definitions are encouraged to contact the authors.\n"
- title: MESSAGE FORMATS
  contents:
  - "MESSAGE FORMATS\n   All HEMS values are conveyed between applications and entities\
    \ using\n   the High-Level Entity Management Protocol (HEMP) specified in RFC-\n\
    \   1022.  All values specified in this memo are passed in the data\n   sections\
    \ of HEMP messages.  For all message types, the data section\n   is a SEQUENCE\
    \ of objects.  For requests, these objects are operations\n   and their operands.\
    \  Replies contain a sequence of objects retrieved\n   by a request.  Events contain\
    \ an initial event object followed by an\n   optional number of objects related\
    \ to the event.\n   Messages conforming to this memo should set the link field\
    \ in the\n   HEMP CommonHeader to 1, to indicate version 1 of HEMS.  The\n   resourceId\
    \ field should be set to NULL.\n"
- title: CONTROL LANGUAGE INSTRUCTIONS
  contents:
  - "CONTROL LANGUAGE INSTRUCTIONS\n   The HEMS Monitoring and Control Language defines\
    \ a suite of\n   operations which the query processor must be able to perform.\
    \  These\n   operations and their operands are ASN.1 objects which are passed\
    \ to\n   the query processor over a network connection.  The operations and\n\
    \   operands are sent in postfix form (the operation follows the\n   operands).\
    \ Operands are pushed onto a stack and are processed when\n   the operation is\
    \ encountered.\n   To ensure that operations are easily recognized in the input\
    \ stream,\n   they are all encoded in a single application-specific type.  This\n\
    \   type is shown below.\n               Operation ::= [APPLICATION 1] IMPLICIT\
    \ INTEGER {\n                       reserved(0), get(1) begin(2), end(3),\n  \
    \                     get-match(4), get-attributes(5),\n                     \
    \  get-attributes-match(6), get-range(7),\n                       set(8), set-match(9)\n\
    \                   }\n   When the query processor encounters an Operation object\
    \ it consults\n   the value to determine which operation is to be done (e.g.,\
    \ GET).\n"
- title: GENERAL COMMENTS ON OBJECTS STORED IN ENTITIES
  contents:
  - "GENERAL COMMENTS ON OBJECTS STORED IN ENTITIES\n   The High-Level Monitoring\
    \ and Control Language requires the object\n   space to have a tree-shaped type\
    \ space.  Locating a particular object\n   requires identifying that section of\
    \ the tree in which the object\n   resides.  (A more detailed explanation of the\
    \ scheme is given in\n   RFC-1023).\n   This memo defines a universal type space.\
    \  A subset of this type\n   space is expected to be an appropriate type space\
    \ for any entity\n   (e.g., a gateway or a multi-user host).  The type space is\
    \ divided\n   into required and optional portions.  Implementors should implement\n\
    \   the required portion of the type space plus that part of the optional\n  \
    \ type space which is appropriate for their particular entity.\n   One problem\
    \ with defining a universal type space is that certain\n   interesting objects\
    \ are not universal, but are instead very machine\n   specific (for example, status\
    \ registers on specialized hardware).  To\n   allow implementors to retrieve such\
    \ implementation-specific objects\n   using the HEMS system, a special APPLICATION\
    \ type is reserved for\n   non-standard values.\n   Putting objects in ASN.1 form\
    \ implies an ability to map to and from\n   ASN.1 format.  One of the design goals\
    \ of this system has been to\n   minimize the amount of ASN.1 compilation required\
    \ by the query\n   processor to reduce the expense of processing queries at entities.\n\
    \   (This implies a certain willingness to force the applications\n   querying\
    \ entities to be more powerful).  We expect that most of the\n   complex mapping\
    \ will be done when objects are read; most writable\n   objects have a simple\
    \ format (e.g., an INTEGER, or OCTETSTRING).  As\n   a result, we have made a\
    \ heavy use of the ASN.1 SET type, which\n   allows values to be presented in\
    \ any order.  Applications which\n   require particular fields in an object may\
    \ use the template structure\n   to specify particular fields to be retrieved,\
    \ but this still permits\n   the query processor to return the fields in whatever\
    \ order is\n   convenient.\n   In addition to ease the problems of ASN.1 compilation,\
    \ query\n   processors are not required to reduce an INTEGER to the minimum\n\
    \   number of octets as specified in ASN.1.  Applications should be\n   prepared\
    \ to receive INTEGERs which have leading octets with all zeros\n   or ones.\n\
    \   More generally, a design goal of HEMS was to try to limit the data\n   processing\
    \ done at the entity, and to place the burden of data\n   reduction on the querying\
    \ application.  As a result, the objects\n   presented here are typically counters,\
    \ or values which the entity has\n   to compute already.  Object definitions which\
    \ require the entity to\n   do data reduction are not supported, although consideration\
    \ might be\n   given to making them optionally available.\n   Finally, HEMS is\
    \ required to support access by multiple network\n   management centers or applications.\
    \  This constraint has some\n   important consequences.  First, the SET operation\
    \ cannot be applied\n   to any Counter, since changing the value of a Counter\
    \ may impair data\n   acquisition by other centers.  More generally, there are\
    \ questions\n   about competing or clashing SET requests from management centers.\n\
    \   Currently HEMS does not provide any facilities for protecting against\n  \
    \ such requests.  If such facilities become necessary, the authors\n   envision\
    \ the enhancement of the object definitions to incorporate the\n   idea of \"\
    owned\" objects.\n"
- title: READING THE OBJECT DEFINITIONS
  contents:
  - "READING THE OBJECT DEFINITIONS\n   Most of the rest of this memo is devoted to\
    \ ennumerating the objects\n   managed by the query processor.  Many of these\
    \ objects are\n   dictionaries, objects which reference other objects.  Defining\n\
    \   dictionaries requires that we specify the class of objects they\n   reference.\n\
    \   Most significant objects, such as packet counts, reside at the leaves\n  \
    \ of the object data tree.  They need to be carefully defined to ensure\n   that\
    \ their meaning is consistent across all HEMS implementations.\n   These values\
    \ are defined using the following format:\n   OBJECT:  This is the name of the\
    \ object.\n   Type:  This is the ASN.1 type of the object.\n   Definition:  The\
    \ meaning of the data the object contains.\n           Implementations should\
    \ ensure that their instance of\n           the object fulfills this definition\
    \ since an important\n           feature of HEMS is that objects have consistent\
    \ meaning\n           across all machines.  It is better not to implement\n  \
    \         an object than to abuse its definition.\n   Notes:  An optional section\
    \ of the definition which is used\n           to discuss issues not covered in\
    \ other sections of\n           this specification.\n   Object Status:  An optional\
    \ section of the definition which\n           is used to indicate whether the\
    \ object is required of all\n           HEMS implementations, encouraged of HEMS\
    \ implementations\n           or simply considered useful.  Currently, there are\
    \ four\n           levels of status:\n               Required:  The object is\
    \ felt to provide critical\n               information and must be included in\
    \ a fully\n               conforming HEMS implementation.\n               Required\
    \ On Condition:  The object is felt to\n               provide critical information\
    \ about an optional\n               feature of an IP entity (for example, support\
    \ of\n               the Transmission Control Protocol).  The object\n       \
    \        is required if the feature is implemented in the\n               entity.\n\
    \               Encouraged:  The object is felt to provide very\n            \
    \   useful management information and implementors\n               are encouraged\
    \ to implement it.\n               Defined:  The object may be useful and has\
    \ been\n               defined so that all implementations of the object\n   \
    \            are consistent.\n           If the object status is not specified,\
    \ the object should\n           be considered required.  If the parent dictionary\
    \ is optional,\n           then the object should be considered required if the\
    \ parent\n           dictionary is supported.\n   Operations on Object:  The definition\
    \ of how each monitoring\n           and control operation acts on the object.\
    \  Many operations\n           have the same effect on almost all values, so some\n\
    \           default definitions are presented here.  In the absence\n        \
    \   of an operation specification, implementors should use\n           the default\
    \ operations defined here.\n           BEGIN:  The default is for BEGIN to be\
    \ defined for\n               dictionaries, and an error if performed on leaf\n\
    \               objects in the tree.\n           CREATE:  The default is that\
    \ CREATE is undefined.\n           DELETE:  The default is that DELETE is undefined.\n\
    \           END:  END is a stack operation and is defined for all objects.\n \
    \              Note that END may fail if there is no object on the\n         \
    \      stack.\n           GET-ATTRIBUTES:  The default is that GET-ATTRIBUTES\
    \ is\n               defined on the contents of all dictionaries specified\n \
    \              in this memo.  The text description attributes\n              \
    \ are optional for values defined in this memo, but\n               are required\
    \ for implementation-specific objects.\n               Any descriptions of object\
    \ listed in this memo should\n               cite this memo.  GET-ATTRIBUTES must\
    \ be supported on\n               all entity-specific values.  GET-ATTRIBUTES\n\
    \               returns a Attributes object, which is defined in\n           \
    \    the well-known types section below.\n           GET-ATTRIBUTES-MATCH:  The\
    \ default is that\n               GET-ATTRIBUTES-MATCH is optionally defined on\
    \ any\n               object which supports GET-MATCH, and is an error\n     \
    \          otherwise.  The rules for attributes returned by\n               GET-ATTRIBUTES-MATCH\
    \ are the same as those for\n               GET-ATTRIBUTES.\n           GET: \
    \ The default definition of GET is to emit the operand\n               specified\
    \ is a leaf object, and if the operand is a\n               dictionary, to recursively\
    \ GET the entire dictionary and\n               its subdictionaries.\n       \
    \    GET-MATCH:  Unless otherwise specified, GET-MATCH is not\n              \
    \ supported on an object.\n           GET-RANGE:  Unless otherwise specified,\
    \ GET-RANGE is not\n               supported on an object.\n           SET:  Unless\
    \ otherwise specified, SET is not supported on an\n               object.\n  \
    \         SET-MATCH:  Unless otherwise specified, SET-MATCH is not\n         \
    \      supported on an object.\n"
- title: ATTRIBUTES
  contents:
  - "ATTRIBUTES\n   HEMS requires that remote applications be able to discover the\n\
    \   meaning of an object by querying the entity in which the object is\n   stored.\
    \  This is done through use of the GET-ATTRIBUTES operator,\n   which causes an\
    \ Attributes object to be returned to the application.\n   The Attributes object\
    \ is described below.\n           Attributes ::= [APPLICATION 2] IMPLICIT SEQUENCE\
    \ {\n               tagASN1       [0] IMPLICIT INTEGER,\n               valueFormat\
    \   [1] IMPLICIT INTEGER,\n               longDesc      [2] IMPLICIT IA5String\
    \ OPTIONAL,\n               shortDesc     [3] IMPLICIT IA5String OPTIONAL,\n \
    \              unitsDesc     [4] IMPLICIT IA5String OPTIONAL,\n              \
    \ precision     [5] IMPLICIT INTEGER OPTIONAL,\n               properties    [6]\
    \ IMPLICIT BITSTRING OPTIONAL,\n           }\n   The meanings of the various attributes\
    \ are given below.\n           tagASN1:  The ASN.1 tag for this object.\n    \
    \           This attribute is required.\n           valueFormat:  The underlying\
    \ ASN.1 type of the object\n               (e.g., SEQUENCE, or OCTETSTRING). \
    \ This attribute\n               is required.\n           longDesc:  A potentially\
    \ lengthy text description which\n               fully defines the object.  This\
    \ attribute is optional\n               for objects defined in this memo and required\
    \ for\n               entity-specific objects.\n           shortDesc:  A short\
    \ mnemonic string of less than 15 octets\n               which is suitable for\
    \ labelling the value on a display.\n               This attribute is optional.\n\
    \           unitsDesc:  A short string used for integer values to\n          \
    \     indicate the units in which the value is measured\n               (e.g.\
    \ \"ms\", \"sec\", \"packets\", etc).  This attribute\n               is optional.\n\
    \           precision:  For Counter objects, the value at which the\n        \
    \       Counter will roll-over.  Required for all Counter\n               objects.\n\
    \           properties:  A bitstring of boolean properties of the\n          \
    \     object.  If the bit is on, it has the given property.\n               This\
    \ attribute is optional.  The bits currently\n               defined are:\n  \
    \                 0 -- If true, the difference between two values\n          \
    \             of this object is significant. For example,\n                  \
    \     the changes in a packet count is always\n                       significant,\
    \ it always conveys information.\n                       In this case, the 0 bit\
    \ would be set.  On the\n                       other hand, the difference between\
    \ two readings\n                       of a queue length may be meaningless.\n"
- title: IMPLEMENTATION SPECIFIC TYPES
  contents:
  - "IMPLEMENTATION SPECIFIC TYPES\n   Each vendor or implementation specific value\
    \ must be contained within\n   an VendorSpecific object.  The format of the VendorSpecific\
    \ object is\n   shown below.\n   Type:  VendorSpecific\n            VendorSpecific\
    \ ::= [APPLICATION 3] IMPLICIT SET of ANY\n   For a detailed discussion of the\
    \ need for this type, see RFC 1023.\n"
- title: WELL-KNOWN TYPES
  contents:
  - "WELL-KNOWN TYPES\n   There are some generally useful types which are defined\
    \ across the\n   system and are considered well-known.  These types support abstract\n\
    \   notions that are frequently used in other definitions.\n   TYPE: Error\n \
    \          Error ::= [APPLICATION 0] IMPLICIT SEQUENCE {\n               errorCode\
    \ INTEGER,\n               errorOffset INTEGER\n               errorDescription\
    \ IA5String,\n           }\n   The Error type is returned within reply messages\
    \ when an error is\n   countered.  The errorCode is a number specifying a general\
    \ class of\n   error.  The errorOffset is the octet in the query where the error\
    \ was\n   discovered.  Note that the query starts at the first octet (octet 0)\n\
    \   of the HEMP data section.  The errorDescription is a text message\n   explaining\
    \ the error.  Note that the definition of this section is\n   the same (except\
    \ for the start of the offset) as that of the HEMP\n   protocol error structure\
    \ and the error codes have been selected to\n   keep the code spaces distinct.\
    \  This is intended to ease the\n   processing of error messages.  The defined\
    \ errorCodes are:\n               100 -- Any error not listed below.\n       \
    \        101 -- System error.  The query processor has failed\n              \
    \     in some way.\n               102 -- Format error.  An error has been detected\
    \ in\n                   the input stream.\n               103 -- Stack error.\
    \  A stack overflow or underflow has\n                   occurred.\n         \
    \      104 -- Instruction error.  The instruction is either\n                \
    \   unknown, or not supported on the object to which\n                   it has\
    \ been applied.\n               105 -- Operand error.  The wrong number of operands\
    \ or\n                   inappropriate operands have been given to an\n      \
    \             instruction.\n   TYPE:  Counter\n       Counter ::= [APPLICATION\
    \ 4] IMPLICIT INTEGER\n   The Counter type is an unsigned integer which is defined\
    \ to roll-over\n   to 0 when incremented past a certain value.  (The roll-over\
    \ point may\n   be found by examining the attributes for the particular counter.)\n\
    \   Counter sizes should be chosen such that the counters will not roll\n   over\
    \ more than once every 24 hours.\n   TYPE:  InstructionGroup\n       InstructionGroup\
    \ ::= [APPLICATION 5] IMPLICIT SEQUENCE\n           of ANY\n   An InstructionGroup\
    \ is an encapsulated sequence of operands and\n   operations.  It allows applications\
    \ to encode queries as objects.\n   TYPE:  Histogram\n       Histogram ::= SET\
    \ of HistEntry\n       HistEntry ::= SEQUENCE {\n           histValue INTEGER,\n\
    \           histCount Counter\n       }\n   A Histogram associates a count, histCount,\
    \ with a numeric value,\n   histValue.  No meaning is placed on the count or value\
    \ by this\n   definition.  Each HistEntry may represent a simple map (e.g.,\n\
    \   histCount instances of histValue), or a more complex relationship\n   (e.g.,\
    \ a count of all values between this histValue and the next\n   lowest histValue\
    \ in the Histogram).  The meaning of the particular\n   Histogram is given in\
    \ the object definition.\n   TYPE: TrafficMatrix\n       TrafficMatrix ::= SET\
    \ of TrafficEntry\n       TrafficEntry ::= SEQUENCE {\n           src IpAddress,\n\
    \           dst IpAddress,\n           count Counter\n       }\n   A TrafficMatrix\
    \ measures traffic observed between two IP addresses.\n   Typically it is used\
    \ to count packets flowing through a gateway.\n   TYPE:  IpAddress\n       IpAddress\
    \ ::= OCTETSTRING\n   The 4 octet IP address.  If the length of the string is\
    \ less than 4\n   then the missing octets are wildcarded.  A zero length string\
    \ is a\n   default address (e.g., for indicating default routes).\n   TYPE: Fraction\n\
    \       Fraction ::= INTEGER\n   A Fraction is an integer representation of a\
    \ fractional value.  It\n   contains the numerator of a value as expressed over\
    \ 256.  (For\n   example dividing the Fraction by 256 gives the fractional value.)\n\
    \   TYPE:  BootClock\n       BootClock ::= INTEGER\n   The time in milliseconds\
    \ since the machine was last booted or reset.\n   This value is always defined.\n\
    \   TYPE:  localClock\n       LocalClock ::= INTEGER\n   The local system clock,\
    \ measured in milliseconds since 00:00 1\n   January 1900 UTC.  Assumed to be\
    \ only a local estimate of the time.\n   The value 0 is reserved for an uninitialized\
    \ clock (For example, an\n   uninitialized time-of-day chip.)\n   TYPE:  NetClock\n\
    \       NetClock ::= INTEGER\n   A network synchronized clock, which is assumed\
    \ to be synchronized\n   across some part of a network.  The clock value is measured\
    \ in\n   milliseconds since 00:00 1 January 1900 UTC.  Specific information\n\
    \   about the synchronization protocol is found in the system variable\n   dictionary.\
    \  The value 0 is used to indicate an uninitialized clock.\n   TYPE: TimeStamp\n\
    \       TimeStamp ::= CHOICE {\n           [0] BootClock\n           [1] localClock\n\
    \           [2] NetClock\n       }\n   A TimeStamp, which was taken from the boot\
    \ clock, system clock or the\n   synchronized clock.  In general, a time of day\
    \ is preferred to the\n   time since boot, and a synchronized clock is preferred\
    \ to an\n   unsynchronized clock.  It is more useful to know that an event\n \
    \  occurred at a particular time, than that it happened so many\n   milliseconds\
    \ after the machine booted.\n"
- title: OBJECT DEFINITIONS
  contents:
  - 'OBJECT DEFINITIONS

    '
- title: The Root Dictionary
  contents:
  - "The Root Dictionary\n   In HEMS, all data is stored in dictionaries, where a\
    \ dictionary is\n   thought to represent a conceptual grouping of values.  The\
    \ top-level\n   dictionary is the root dictionary.  The form of the root dictionary\n\
    \   for is shown below.\n           RootDictionary ::= [APPLICATION 32] IMPLICIT\
    \ SET {\n               SystemVariables,\n               EventControls OPTIONAL,\n\
    \               Interfaces,\n               IpNetworkLayer,\n               IpRoutingTable,\n\
    \               IpTransportLayer,\n               IpApplications OPTIONAL\n  \
    \         }\n"
- title: 'The root dictionary is split into seven general dictionaries:'
  contents:
  - "The root dictionary is split into seven general dictionaries:\n           - SystemVariables,\
    \ which stores general system values such\n           as the system clock, machine\
    \ memory and system up/down\n           status.\n           - EventControls, which\
    \ stores all objects necessary to\n           observe and control the event generating\
    \ mechanism in\n           entities which support events.\n           - interfaces,\
    \ which contains all information on all\n           the network interfaces and\
    \ IP to physical address\n           maps (ARP tables, X.25 Standard mappings,\
    \ etc).\n           - IpNetworkLayer, which contains information about the\n \
    \          workings of the IP layer.  This includes information such\n       \
    \    as routing tables, general packet counts, and host-traffic\n           matrices.\n\
    \           - IpRoutingTable, which contains information on how the\n        \
    \   machine routes packets.  It proved more useful to segregate\n           routing\
    \ information than to keep it stored with the network\n           layer data.\n\
    \           - IpTransportLayer, which stores information on the transport\n  \
    \         protocols that the entity supports.\n           - IpApplications, which\
    \ may store information about various\n           internet applications such as\
    \ the domain system.  This\n           section is not required of HEMS entities.\n\
    \   The next several sections define the values stored in the five\n   dictionaries.\n"
- title: The SystemVariables Dictionary
  contents:
  - "The SystemVariables Dictionary\n   The SystemVariables dictionary stores objects\
    \ which are not strictly\n   protocol, network, or application specific.  Such\
    \ objects include\n   values such as the machine load, clocks and the processor\
    \ status.\n   The form of the dictionary is shown below.\n   SystemVariables ::=\
    \ [APPLICATION 33] IMPLICIT SET {\n       referenceClock   [0] IMPLICIT TimeStamp,\n\
    \       netClockInfo     [1] IMPLICIT SET OPTIONAL,\n       processorLoad    [2]\
    \ IMPLICIT INTEGER,\n       entityState      [3] IMPLICIT INTEGER,\n       kernelMemory\
    \     [4] IMPLICIT OCTETSTRING OPTIONAL,\n       pktBuffers       [5] IMPLICIT\
    \ INTEGER OPTIONAL,\n       pktOctets        [6] IMPLICIT INTEGER OPTIONAL,\n\
    \       pktBuffersFree   [7] IMPLICIT INTEGER OPTIONAL,\n       pktOctetsFree\
    \    [8] IMPLICIT INTEGER OPTIONAL\n       systemID         [9] IMPLICIT IA5STRING,\n\
    \   }\n   OBJECT:  SystemVariables\n   Type:  SET\n   Definition:  see above\n\
    \   The objects in the dictionary are defined below.\n   OBJECT:  referenceClock\n\
    \   Type:  TimeStamp\n   Definition:  The system clock used for placing timestamps\
    \ on\n       information.  Use of a NetClock is encouraged.\n   Operations on\
    \ Object:  Defaults.\n   Notes:  Cross-network clock adjustment is best handled\
    \ by a proper\n           time synchronization protocol, not through the use of\
    \ SET.\n   OBJECT:  netClockInfo\n   Type:  SET\n   Definition:  Detailed information\
    \ on the referenceClock if the\n       referenceClock is a NetClock.  The format\
    \ of this\n       information is shown below.\n       netClockInfo ::= [1] IMPLICIT\
    \ SET {\n           estError INTEGER,\n           refClockType INTEGER {\n   \
    \            unspecified(0), primary-reference(1),\n               ntp-secondary-reference(2),\
    \ secondary-reference(3),\n               wristwatch(4)\n             }\n    \
    \    }\n        The estError is the estimated error in milliseconds.  The\n  \
    \      refClockType is a value indicating the type of reference\n        clock\
    \ consulted for network time  (the values are taken\n        directly from the\
    \ Network Time Protocol specification,\n        RFC-958).\n   Object Status: \
    \ Required if the referenceClock is a NetClock.\n   OBJECT: processorLoad\n  \
    \ Type:  Fraction\n   Definition:  A value, expressed as a Fraction, which indicates\n\
    \           the current processing load on the entity.  A value of\n         \
    \  256 (= 1.0) is defined to be running at capacity.  It\n           is recognized\
    \ that this is an imprecise definition since\n           capacity can be measured\
    \ in several ways.  For example,\n           a multiprocessor may still have plenty\
    \ of capacity\n           even if one processor is running at capacity,\n    \
    \       or it may be at capacity because that processor is the\n           master\
    \ processor and handles all context switching.\n           The idea is for remote\
    \ applications to be able to get some\n           sense of the current workload\
    \ on the entity.  Also note\n           that the time scale of the measurement\
    \ should be small.\n           A load measure that averages over the past 10 seconds\n\
    \           is acceptable but a load measure that averages over the\n        \
    \   past 10 minutes is not.  Implementors should chose some\n           mapping\
    \ between system load and this scale such that 256\n           represents a machine\
    \ under severe strain.  (Note that this\n           suggests that values greater\
    \ than 256 may be returned in\n           rare cases.)\n   OBJECT:  entityState\n\
    \   Type:  INTEGER\n   Definition: An object which indicates the system state.\
    \  There are\n         several defined object values.  Some values are read-only\
    \ and\n         can only be read from the object.  Over values are write-only\n\
    \         and will never be read from the object. Over values are\n         write-only\
    \ and will never be read from the object.The values\n         are:\n         \
    \  The read-only values are:\n                   (0) -- reserved.\n          \
    \         (1) -- running.  The entity is up and running.\n                   (2)\
    \ -- testing.  The entity is running some sort of\n                       diagnostics\
    \ which may affect its network\n                       operation.\n          \
    \ The write-only values are:\n                   (0) -- reserved.\n          \
    \         (1) -- reset the entity.\n                   (2) -- reboot the entity.\
    \ This value is assumed to\n                       cause a more aggressive recycling\
    \ of the system\n                       than reset, though this need not be the\
    \ case.\n                   (3) -- halt the entity.  This value stops the\n  \
    \                     entity.  It assumed to prevent the entity from\n       \
    \                operating until it is manually restarted.  (I.e.\n          \
    \             the halt takes the machine off the network).\n   Note:  The ability\
    \ to change an entity's state requires very strong\n      access controls.\n \
    \  Operations on Object:  The defaults except as noted below.\n       SET:  Optionally\
    \ writes the value into the object.\n             The message requesting the SET\
    \ must be authenticated.\n       SET-MATCH:  Optionally writes the value into\
    \ the object\n             if the current value is matched.\n   OBJECT:  kernelMemory\n\
    \   Type:  OCTETSTRING\n   Definition:  A sequence of octets which represents\
    \ the image of the\n        kernel software running on the entity.  This facility\
    \ is\n        provided to allow remote network debugging.\n        By kernel software,\
    \ we mean that software which controls the\n        operations and access to the\
    \ hardware.  In particular, the kernel\n        is expected to contain all network\
    \ software up through the IP\n        layer.\n        Implementations which use\
    \ lightweight processes or segmented\n        images should consider providing\
    \ some way to map their internal\n        representation into a single contiguous\
    \ stream of octets.\n   Note:  Access control is required to read this object.\n\
    \   Object Status:  Useful.\n   Operations on Object:  The defaults except as\
    \ noted below.\n       GET-RANGE:  Emits the section of memory specified.\n  \
    \     GET:  Emits all of memory, but note that a GET on the system\n         \
    \  dictionary should *not* emit this object.\n   OBJECT:  pktBuffers\n   Type:\
    \  INTEGER\n   Definition:  The total number of packet buffers in the entity.\n\
    \   Object Status:  Required if the entity has a maximum number of\n       buffers.\
    \  Note that most entities do have a limit (even if it\n       is for practical\
    \ purposes, near infinite) and should return\n       that limit.\n   OBJECT: \
    \ pktOctets\n   Type:  INTEGER\n   Definition:  The maximum number of octets that\
    \ can be buffered in the\n       entity at any one time.\n   Object Status:  Required\
    \ if the entity has a maximum number of octets\n       it can buffer.  Note that\
    \ most entities do have a limit and\n       should return that limit.\n   OBJECT:\
    \  pktBuffersFree\n   Type:  INTEGER\n   Definition:  The number of packet buffers\
    \ currently available.\n       Subtracting pktBuffersFree from pktBuffers should\
    \ give the\n       number of buffers in use.\n   Object Status:  Required if there\
    \ is a limit on the number of\n       buffers.\n   OBJECT: pktOctetsFree\n   Type:\
    \ INTEGER\n   Definition:  The number of octets currently available including\
    \ those\n       not used in allocated buffers.  Subtracting this value from\n\
    \       pktOctets should give the number of octets in use.\n       This object\
    \ can be used to track how well the entity buffers its\n       data.\n       Object\
    \ Status:  Required if there is a limit on the number of\n       octets that can\
    \ be buffered.\n   OBJECT:  systemID\n   Type:  IA5STRING\n   Definition:  The\
    \ text identification of the entity.  This value\n       should include the full\
    \ name of the vendor, the type of system,\n       and the version number of the\
    \ hardware and software running on\n       the entity.\n"
- title: The EventControls Dictionary
  contents:
  - "The EventControls Dictionary\n    The EventControls dictionary contains objects\
    \ to control and\n    monitor the delivery of event messages to operations centers.\n\
    \    The format of this dictionary is shown below.\n       EventControls ::= [APPLICATION\
    \ 34] IMPLICIT SET OPTIONAL {\n           lastEvent      [0] IMPLICIT OCTETSTRING\
    \ OPTIONAL,\n           eventMessageID [1] IMPLICIT Counter,\n           eventCenters\
    \   [2] IMPLICIT SET of IpAddress,\n           eventList      [3] IMPLICIT SET\
    \ of eventEntry,\n       }\n    OBJECT: eventControls\n    Type: SET\n    Definition:\
    \ See above.\n    Object Status:  This object will be required in entities which\n\
    \        support events, after the event definitions have been\n        properly\
    \ specified.  See discussion of the event formats\n        at the end of this\
    \ memo.\n    A description of the fields in this dictionary are given below.\n\
    \    OBJECT:  lastEvent\n    Type:  OCTETSTRING\n    Definition:  The last event\
    \ message sent.\n    Object Status: Implementation of this object is encouraged\
    \ if the\n        transport protocol used for events is unreliable (e.g., UDP).\n\
    \    OBJECT:  eventMessageID\n    Type:  Counter\n    Definition:  The HEMP MessageId\
    \ to be used in the next event\n        message.  Equals the number of events\
    \ sent.\n    OBJECT:  eventCenters\n    Type:  SET of IpAddress\n    Definition:\
    \  The list of IP addresses to which events are sent.\n        This list receives\
    \ all events.  For more selective event\n        monitoring, centers should list\
    \ themselves under the\n        particular events of interest.\n    Note:  If\
    \ the SET operator is defined then use of some form of\n        access control\
    \ is recommended.\n    Operations on Object: The defaults except as listed below.\n\
    \        CREATE:  Adds an address to the list.  The new address may\n        \
    \    not be a broadcast address (it may be a multicast\n            address).\n\
    \        DELETE:  Deletes an address from the list.\n        SET-MATCH:  Defined\
    \ on the IP address.  Replaces the\n            address with a new value.\n  \
    \      EMIT-MATCH:  Defined on the IP address.\n    OBJECT:  eventList\n    Type:\
    \ SET of eventEntry\n    Definition: An array of entries which contain objects\
    \ which allow\n        management centers to control how and when events are sent.\n\
    \        (The contents of the eventEntry structure are explained below.)\n"
- title: 'The eventControls Dictionary:  eventList/eventEntry'
  contents:
  - "The eventControls Dictionary:  eventList/eventEntry\n    The eventEntry provides\
    \ the necessary control objects to manage how\n    a particular event is sent.\
    \  The format of the eventEntry is shown\n    below.\n            eventEntry ::=\
    \ [0] IMPLICIT SET {\n                eventID        [0] IMPLICIT INTEGER,\n \
    \               eventMode      [1] IMPLICIT INTEGER,\n                eventCount\
    \     [2] IMPLICIT Counter,\n                threshold      [3] IMPLICIT Counter,\n\
    \                thresholdIncr  [4] IMPLICIT INTEGER,\n                eventExecution\
    \ [5] IMPLICIT InstructionGroup OPTIONAL,\n                eventCenters   [6]\
    \ IMPLICIT SET of IpAddress\n            }\n    OBJECT:  eventEntry\n    Type:\
    \  SET\n    Definition:  See Above.\n    OBJECT:  eventID\n    Type:  INTEGER\n\
    \    Definition:  The particular event ID.\n    OBJECT:  eventMode\n    Type:\
    \  INTEGER\n    Definition:  A control object which determines how and whether\
    \ this\n        event is sent.  The three modes are:\n           0 -- unused.\n\
    \           1 -- off.  The event is not sent.\n           2 -- on.   The event\
    \ is sent every time it occurs.\n           3 -- threshold.  The event is sent\
    \ every time the\n                event count reaches the threshold.\n    OBJECT:\
    \  eventCount\n    Type:  Counter\n    Definition:  The number of times this event\
    \ has occurred.\n    OBJECT:  threshold\n    Type:  Counter\n    Definition: The\
    \ event threshold.  If the eventMode is \"threshold\"\n        then a event is\
    \ sent every time the eventCount equals this\n        value.\n    Operations on\
    \ Object:  The defaults except as noted below.\n            SET:  Changes the\
    \ threshold.\n    OBJECT:  thresholdIncr\n    Type:  INTEGER\n    Definition:\
    \  The threshold increment.  Every time a event threshold\n        is reached,\
    \ the threshold value is incremented by this value\n        (modulo the precision\
    \ of the Counter) to find the new\n        threshold.\n    Operations on Object:\
    \  The defaults except as noted below.\n            SET:  Changes the increment.\n\
    \    OBJECT:  eventExecution\n    Type:  InstructionGroup\n    Definition:  A\
    \ query to be executed whenever the event is actually\n        sent.  Any data\
    \ retrieved by this query is appended to the\n        event message.\n    Object\
    \ Status:  Encouraged.\n    Operations on Object:  The defaults except as noted\
    \ below.\n            SET:  Changes the buffer.\n    OBJECT:  eventCenters\n \
    \   Type:  SET\n    Definition:  The IP addresses of the monitoring centers which\
    \ wish\n        to listen to this particular event.  Note that events should be\n\
    \        sent to both these centers and the global list of event centers.\n  \
    \  Operations on Object:  The defaults except as noted below.\n            CREATE:\
    \  Adds an address to the list of centers.\n            DELETE:  Deletes an address\
    \ from the list.\n            SET-MATCH:  Defined on the IP address.  Replaces\
    \ the\n                entry with a new value.\n            EMIT-MATCH:  Defined\
    \ on the IP address.\n"
- title: The Interfaces Dictionary
  contents:
  - "The Interfaces Dictionary\n    The Interfaces dictionary a list of per-interface\
    \ objects.  Since\n    one of the fundamental goals of HEMS is to use generic\
    \ interfaces\n    across differing hardwares, all hardware interfaces are described\
    \ by\n    the same data structure, the InterfaceData.\n         Interfaces ::=\
    \ [APPLICATION 35] IMPLICIT SET OF InterfaceData\n    OBJECT:  Interfaces\n  \
    \  Type:  SET\n    Definition:  see above.\n"
- title: 'The Interfaces Dictionary: The InterfaceData structure.'
  contents:
  - "The Interfaces Dictionary: The InterfaceData structure.\n    The InterfaceData\
    \ structure contains all information on a particular\n    interface.  The form\
    \ of the structure is shown below.\n            InterfaceData ::= [0] IMPLICIT\
    \ SET {\n                addresses         [0] IMPLICIT SET of IpAddress,\n  \
    \              mtu               [1] IMPLICIT INTEGER,\n                netMask\
    \           [2] IMPLICIT IpAddress,\n                pktsIn            [3] IMPLICIT\
    \ Counter,\n                pktsOut           [4] IMPLICIT Counter,\n        \
    \        inputPktsDropped  [5] IMPLICIT Counter,\n                outputPktsDropped\
    \ [6] IMPLICIT Counter,\n                bcastPktsIn       [7] IMPLICIT Counter\
    \ OPTIONAL,\n                bcastPktsOut      [8] IMPLICIT Counter OPTIONAL,\n\
    \                mcastPktsIn       [9] IMPLICIT Counter OPTIONAL,\n          \
    \      mcastPktsOut     [10] IMPLICIT Counter OPTIONAL,\n                inputErrors\
    \      [11] IMPLICIT Counter,\n                outputErrors     [12] IMPLICIT\
    \ Counter,\n                outputQLen       [13] IMPLICIT INTEGER,\n        \
    \        name             [14] IMPLICIT IA5String,\n                status   \
    \        [15] IMPLICIT INTEGER,\n                ifType           [16] IMPLICIT\
    \ INTEGER,\n                mediaErrors      [17] IMPLICIT Counter OPTIONAL,\n\
    \                upTime           [18] IMPLICIT TimeStamp,\n                broadcast\
    \        [19] IMPLICIT BITSTRING\n                multicast        [20] IMPLICIT\
    \ SET of BITSTRING,\n                addressList      [21] IMPLICIT SET OPTIONAL,\n\
    \            }\n    OBJECT:  InterfaceData\n    Type:  SET\n    Definition:  see\
    \ above.\n    Operations on Object:  The defaults except as noted below.\n   \
    \     SET-MATCH:  This operation is optionally defined on the\n            address\
    \ field of the structure.  Only certain fields\n            in this structure\
    \ may be changed.  The fields which\n            may be SET are indicated in the\
    \ descriptions below.\n        GET-MATCH:  Defined to emit information on the\
    \ interface\n            which matches the address given.\n    The fields in the\
    \ structure are defined below.\n    OBJECT:  addresses\n    Type:  SET of IpAddress\n\
    \    Definition:  The IP addresses that the interface accepts.  Note that\n  \
    \      additional information on multicast addresses may be found in\n       \
    \ the IgmpValues dictionary.\n    OBJECT:  mtu\n    Type:  INTEGER\n    Definition:\
    \  The maximum transmission unit of the device.\n    OBJECT:  netMask\n    Type:\
    \  IpAddress\n    Definition:  The subnet mask, which is an address with all the\n\
    \        network bits set to 1 and all the hosts bits set to 0.  Used to\n   \
    \     identify subnets.\n    OBJECT:  pktsIn\n    Type:  Counter\n    Definition:\
    \  The total number of packets received on this interface\n        including those\
    \ in error.\n    OBJECT:  pktsOut\n    Type:  Counter\n    Definition:  The total\
    \ number of packets that higher levels have\n        attempted to send, including\
    \ those that were not sent.\n    OBJECT:  inputPktsDropped\n    Type:  Counter\n\
    \    Definition:  The number of good inbound packets dropped (presumably\n   \
    \     to free up buffer space).\n    OBJECT:  outputPktsDropped\n    Type:  Counter\n\
    \    Definition:  The number of good outbound packets dropped (presumably\n  \
    \      to free up buffer space).\n    OBJECT:  bcastPktsIn\n    Type:  Counter\n\
    \    Definition:  The number of broadcast packets received including\n       \
    \ those in error.\n    Object Status:  Encouraged on interfaces that support broadcast.\n\
    \    OBJECT:  bcastPktsOut\n    Type:  Counter\n    Definition:  The number of\
    \ broadcast packets that higher levels\n        attempted to send, including those\
    \ that were not sent.\n    Object Status:  Encouraged on interfaces that support\
    \ broadcast.\n    OBJECT:  mcastPktsIn\n    Type:  Counter\n    Definition:  The\
    \ number of multicast packets received including\n        those in error.\n  \
    \  Object Status:  Encouraged on interfaces that support multicast.\n    OBJECT:\
    \  mcastPktsOut\n    Type:  Counter\n    Definition: The number of multicast packets\
    \ sent, including those\n        that were not sent.\n    Object Status:  Encouraged\
    \ on interfaces that support multicast.\n    OBJECT:  inputErrors\n    Type: \
    \ Counter\n    Definition: The number of inbound packets that could not be\n \
    \       delivered.  The number of inbound packets delivered\n        should equal\
    \ inputPkts less this value and inputPktsDropped.\n    OBJECT:  outputErrors\n\
    \    Type:  Counter\n    Definition:  The number of outbound packets that could\
    \ not be\n        transmitted because of errors.  The number of outbound\n   \
    \     packets placed on the network should equal outputPkts\n        less this\
    \ value and outputPktsDropped.\n    OBJECT:  outputQLen\n    Type:  INTEGER\n\
    \    Definition:  The length of the output packet queue (in packets).\n    OBJECT:\
    \  name\n    Type:  IA5String\n    Definition:  A text string completely identifying\
    \ the interface.\n        This string should include the name of the manufacturer,\
    \ the\n        product name and the version of the hardware.\n    OBJECT:  status\n\
    \    Type:  INTEGER\n    Definition:  The status of the object.  The status values\
    \ are:\n                0 -- reserved\n                1 -- testing (the interface\
    \ is in some test mode)\n                2 -- down  (the interface is down)\n\
    \                3 -- up  (the interface is up ready to pass packets)\n    Note:\
    \  If set operations are defined, access control is required.\n    Operations\
    \ on Object:  The defaults except as noted below.\n       SET:  Optionally defined\
    \ to change the state of the interface.\n    OBJECT:  ifType\n    Type:  INTEGER\n\
    \    Definition: A flag which indicates the type of interface in use.  The\n \
    \       currently defined types are:\n                     0 -- reserved\n   \
    \                  1 -- 1822 HDH\n                     2 -- 1822\n           \
    \          3 -- FDDI\n                     4 -- DDN X.25\n                   \
    \  5 -- RFC-877 X.25\n                     6 -- StarLan\n                    \
    \ 7 -- Proteon 10Mbit\n                     8 -- Proteon 80Mbit\n            \
    \         9 -- Ethernet\n                    10 -- 802.3 Ethernet\n          \
    \          11 -- 802.4 Token Bus\n                    12 -- 802.5 Token Ring\n\
    \                    13 -- Point-to-Point Serial\n    OBJECT:  mediaErrors\n \
    \   Type:  Counter\n    Definition:  A counter of media errors, such as collisions\
    \ on\n        Ethernets, token regeneration on token passing rings, or lost\n\
    \        RFNMs on PSNs.\n    Object Status:  Encouraged for interfaces to media\
    \ which have such\n        errors.\n    OBJECT:  upTime\n    Type:  TimeStamp\n\
    \    Definition:  When the interface was put in its current state.\n    OBJECT:\
    \  broadcast\n    Type:  BITSTRING\n    Definition:  Whether this interface has\
    \ a physical broadcast\n        address.\n    Object Status:  Required if the\
    \ interface has a broadcast adddress.\n    OBJECT:  multicast\n    Type:  SET\
    \ of BITSTRING\n    Definition: The set of hardware multicast addresses currently\n\
    \        enabled on the device.\n    Object Status:  Encouraged in interfaces\
    \ which support multicast.\n    OBJECT:  addressList\n    Definition:  SET of\
    \ addressMap\n         addressMap ::= [0] IMPLICIT SET {\n                 ipAddr\
    \     [0] IMPLICIT IpAddress\n                 physAddr   [1] IMPLICIT BITSTRING\n\
    \         }\n    Definition:  Most interfaces maintain tables mapping physical\n\
    \        network address to IP address.  An example is an ARP table.\n       \
    \ This table stores that map as a series of entries which map\n        IP addresses\
    \ to the physical address.\n    Object Status:  Required if the interface has\
    \ to map IP addresses to\n        physical addresses.\n"
- title: The IpNetworkLayer Dictionary
  contents:
  - "The IpNetworkLayer Dictionary\n    The IpNetworkLayer dictionary contains all\
    \ information about the IP\n    Layer.  The format of the dictionary is shown\
    \ below.\n            IpNetworkLayer ::= [APPLICATION 36] IMPLICIT SET {\n   \
    \             gateway           [0] IMPLICIT BOOLEAN,\n                inputPkts\
    \         [1] IMPLICIT Counter,\n                inputErrors       [2] IMPLICIT\
    \ Counter,\n                inputPktsDropped  [3] IMPLICIT Counter,\n        \
    \        inputQLen         [4] IMPLICIT INTEGER OPTIONAL,\n                outputPkts\
    \        [5] IMPLICIT Counter,\n                outputErrors      [6] IMPLICIT\
    \ Counter,\n                outputPktsDropped [7] IMPLICIT Counter,\n        \
    \        outputQLen        [8] IMPLICIT INTEGER OPTIONAL,\n                ipID\
    \              [9] IMPLICIT Counter,\n                fragCreated       [10] IMPLICIT\
    \ Counter OPTIONAL,\n                fragRcvd          [11] IMPLICIT Counter OPTIONAL,\n\
    \                fragDropped       [12] IMPLICIT Counter OPTIONAL,\n         \
    \       pktsReassembled   [13] IMPLICIT Counter OPTIONAL,\n                pktsFragmented\
    \    [14] IMPLICIT Counter OPTIONAL,\n                htm               [15] IMPLICIT\
    \ TrafficMatrix OPTIONAL,\n                itm               [16] IMPLICIT TrafficMatrix\
    \ OPTIONAL\n            }\n    OBJECT:  IpNetworkLayer\n    Type:  SET\n    Definition:\
    \  See above.\n    The fields of the dictionary are defined below.\n    OBJECT:\
    \  gateway\n    Type:  BOOLEAN\n    Definition: A boolean value which is true\
    \ if the entity gateways\n        packets.\n    OBJECT: inputPkts\n    Type: Counter\n\
    \    Definition: The total number of input packets received including\n      \
    \  those in error.\n    OBJECT: inputErrors\n    Type: Counter\n    Definition:\
    \  The number of input packets discarded due to errors\n        (unknown protocols,\
    \ format errors, etc).\n    OBJECT:  inputPktsDropped\n    Type:  Counter\n  \
    \  Definition: The number of input packets dropped for lack of buffer\n      \
    \  space.\n    OBJECT:  inputQLen\n    Type:  INTEGER\n    Definition:  The number\
    \ of inbound packets currently waiting to be\n        processed by the IP layer.\n\
    \    Object Status:  Encouraged.\n    OBJECT:  outputPkts\n    Type:  Counter\n\
    \    Definition:  The total number of outbound packets including both\n      \
    \  those packets presented to the IP layer by higher layers and\n        packets\
    \ which are gatewayed.\n    OBJECT:  outputErrors\n    Type:  Counter\n    Definition:\
    \  The number of output packets discarded because of\n        errors (unable to\
    \ route, format errors, etc).\n    OBJECT:  outputPktsDropped\n    Type: Counter\n\
    \    Definition:  The number of output packets dropped for lack of\n        buffer\
    \ space.\n    OBJECT:  outputQLen\n    Type:  INTEGER\n    Definition: The number\
    \ of outbound packets waiting to be processed\n        by the IP layer.\n    Object\
    \ Status:  Encouraged.\n    OBJECT:  ipID\n    Type:  Counter\n    Definition:\
    \  The next IP packet ID identifier to be used.  Note\n        that in some implementations\
    \ the transport layer may set the\n        IP identifier, in which case this value\
    \ is used if the IP\n        identifier has not been set by the transport layer.\n\
    \    OBJECT:  fragCreated\n    Type:  Counter\n    Definition:  The number of\
    \ IP fragments created at this entity.\n        (e.g., if an IP is split into\
    \ three fragments at this entity,\n        then this counter is incremented by\
    \ three).\n    Object Status:  Encouraged.\n    OBJECT:  fragRcvd\n    Type: \
    \ Counter\n    Definition:  The number of IP fragments received at this entity.\n\
    \    Object Status:  Encouraged.\n    OBJECT:  fragDropped\n    Type:  Counter\n\
    \    Definition:  The number of IP fragments discarded at this entity\n      \
    \  for whatever reason (timed out, errors, etc).\n    Object Status:  Encouraged.\n\
    \    OBJECT:  pktsReassembled\n    Type:  Counter\n    Definition:  The number\
    \ of IP datagrams that have been reassembled\n        at this entity.\n    Object\
    \ Status:  Encouraged\n    OBJECT:  pktsFragmented\n    Type:  Counter\n    Definition:\
    \  The number of IP datagrams that have been fragmented\n        at this entity.\n\
    \    Object Status:  Encouraged.\n    OBJECT:  htm\n    Type:  TrafficMatrix\n\
    \    Definition:  A host traffic matrix, mapping all traffic switched any\n  \
    \      pair of sources and destinations.  The count in each trafficEntry\n   \
    \     routeDst is expressed in packets.  Source routed IP packets\n        should\
    \ be logged as being between their source and the\n        destination (i.e.,\
    \ they should not be treated as destined for\n        this entity).\n    Notes:\
    \  This information may be considered sensitive.\n    Object Status:  Encouraged\
    \ in gateways.\n    OBJECT:  itm\n    Type:  TrafficMatrix\n    Definition: An\
    \ interface traffic matrix showing traffic switched\n        between interfaces\
    \ in an entity.  The source and destinations\n        fields are the IP addresses\
    \ of the interfaces between which\n        the packet was switched.  The count\
    \ in each trafficEntry is\n        expressed in packets.\n    Object Status: Useful.\n"
- title: The IpRoutingTable Dictionary
  contents:
  - "The IpRoutingTable Dictionary\n    The IpRoutingTable dictionary contains all\
    \ routing information.\n    Note that information about any routing protocols\
    \ used to maintain\n    the routing table is found under the entry for the routing\
    \ protocol.\n    The format of the routing dictionary is shown below.\n    IpRoutingTable\
    \ ::= [APPLICATION 37] IMPLICIT SET {\n            routingProtocols [0] IMPLICIT\
    \ OCTETSTRING,\n            coreRouter       [1] IMPLICIT BOOLEAN,\n         \
    \   autoSys          [2] IMPLICIT INTEGER,\n            metricUsed       [3] IMPLICIT\
    \ OCTET,\n                             [4] RoutingEntries,\n    }\n    OBJECT:\
    \  IpRoutingTable\n    Type:  SET\n    Definition:  See above.\n    The objects\
    \ contained in the dictionary are described below.\n    OBJECT:  routingProtocols\n\
    \    Type:  OCTETSTRING\n    Definition: A sparse list of the routing protocols\
    \ used to update\n        the routing table (e.g., EGP and ICMP).  Each octet\
    \ contains one\n        of the following values:\n                    0 -- anything\
    \ not specified below.\n                    1 -- local (non-protocol) information.\
    \  (E.g.\n                        routing tables can be changed by hand).\n  \
    \                  2 -- HEMS (was changed/set by a HEMS operation)\n         \
    \           3 -- Internet Control Message Protocols, (i.e.\n                 \
    \       ICMP redirects).\n                    4 --  Exterior Gateway Protocol\
    \ (EGP).\n                    5 -- Gateway-to-Gateway Protocol (GGP).\n      \
    \              6 -- Dissimilar Gateway Protocol (DGP).\n                    7\
    \ -- HELO\n                    8 -- RIP\n                    9 -- Proprietary\
    \ IGP\n    OBJECT: coreRouter\n    Type:  BOOLEAN\n    Definition:  This value\
    \ is set to true if this entity is a reference\n        router for any other router\
    \ (i.e., if it distributes any of its\n        routes to other machines).\n  \
    \  OBJECT:  autoSys\n    Type:  INTEGER\n    Definition:  The autonomous system\
    \ number of the autonomous system in\n        which this entity resides.\n   \
    \ OBJECT:  metricUsed\n    Type:  OCTET\n    Definition: Classifies the routing\
    \ metric used in the routing table\n        entries.  The value should be chosen\
    \ from the list of values for\n        routingProtocols above, and indicates the\
    \ metric definition used\n        (e.g., this entity uses an EGP metric internally).\n\
    \    OBJECT:  RoutingEntries\n    Type:  SET of RoutingEntry\n    Definition:\
    \  The set of all routing entries.  The RoutingEntry is\n        defined below.\n"
- title: 'The IpRoutingTable Dictionary: The RoutingEntry'
  contents:
  - "The IpRoutingTable Dictionary: The RoutingEntry\n    The RoutingEntry contains\
    \ all information on a particular route.\n    The format of the structure is shown\
    \ below.\n            RoutingEntry ::= [0] IMPLICIT SET {\n                routeMetric\
    \     [0] IMPLICIT INTEGER,\n                routeDst        [1] IMPLICIT IpAddress,\n\
    \                nextHop         [2] IMPLICIT IpAddress,\n                routeAuthor\
    \     [3] IMPLICIT IpAddress OPTIONAL,\n                routeproto      [4] IMPLICIT\
    \ Octet OPTIONAL,\n                routeTime       [5] TimeStamp,\n          \
    \      routeTOS        [6] IMPLICIT INTEGER OPTIONAL,\n                valid \
    \          [7] IMPLICIT BOOLEAN\n            }\n    OBJECT:  RoutingEntry\n  \
    \  Type:  SET\n    Definition:  See above.\n    Operations on Object:  Defaults\
    \ except as specified below.\n        CREATE: Adds a new routing entry.  It should\
    \ be confirmed\n            that the entry is new.\n        DELETE: Deletes a\
    \ routing entry.\n        GET-MATCH:  The match operator is defined on the routeDst\n\
    \            field.  A match on an IpAddress is defined to be a\n            search\
    \ to find the route or routes which would be\n            used to reach the IpAddress.\
    \  More than one route\n            may be applicable, in which case all possible\
    \ routes\n            should be returned.\n        SET-MATCH: Is optionally defined\
    \ on the object.  A SET\n            on an entire RoutingEntry replaces the entire\
    \ entry\n            with a new value.  Certain fields (indicated below)\n   \
    \         can also be changed using a SET-MATCH.\n            The match operator\
    \ is defined on the routeDst and\n            routeTOS fields.  To SET a value,\
    \ the match must be\n            exact on the IP address (this is different from\
    \ the\n            search definition for GET-MATCH).\n            Note that support\
    \ of the operator on an entity\n            which uses a dynamic routing protocol\
    \ such as\n            GGP or EGP will require close coordination with\n     \
    \       the routing protocol to ensure consistent data.\n            (Arguably,\
    \ this facility should not be supported\n            on such machines).\n    The\
    \ definitions of the fields in the RoutingEntry are given below.\n    OBJECT:\
    \  routeMetric\n    Type:  INTEGER\n    Definition: The routing metric on this\
    \ route.  Note that the type of\n        metric is defined in the metricUsed field\
    \ of the IpRoutingTable\n        dictionary.\n    OBJECT: routeDst\n    Type:\
    \ IpAddress\n    Definition:  The final destination that can be reached via this\n\
    \        route.\n    OBJECT:  nextHop\n    Type:  IpAddress\n    Definition: \
    \ The next hop to the final destination.\n    OBJECT:  routeAuthor\n    Type:\
    \  IpAddress\n    Definition:  The IP address of the entity from which this route\
    \ was\n        *first* received.  That is, the first entity which stated that\n\
    \        was reached via nextHop.  The default IpAddress should be used\n    \
    \    to indicate routes which originated on the entity.\n    Object Status:  Encouraged.\n\
    \    OBJECT:  routeProto\n    Type:  Octet\n    Definition:  The routing protocol\
    \ from which this route was learned.\n        The value is taken from the list\
    \ of values for routingProtocols\n        above.\n    Object Status:  Encouraged.\n\
    \    OBJECT: routeTime\n    Type:  TimeStamp\n    Definition:  When this route\
    \ was first received.\n    Object Status:  Encouraged.\n    OBJECT:  routeTOS\n\
    \    Type:  INTEGER\n    Definition:  The IP Type of Service which this routing\
    \ entry serves.\n    Object Status:  Required if type of service routing is supported.\n\
    \    OBJECT:  valid\n    Type:  BOOLEAN\n    Definition:  Whether the route is\
    \ active.  (Some machines retain\n        routes which are no longer valid for\
    \ various reasons.)\n"
- title: The IpTransportLayer Dictionary
  contents:
  - "The IpTransportLayer Dictionary\n    The IpTransportLayer Dictionary contains\
    \ any information which\n    pertains to transport protocols which use the IP\
    \ protocol as the\n    network protocol.  For ease of reference, the ASN.1 tag\
    \ of each\n    transport protocol's dictionary is the same as the assigned IP\n\
    \    Protocol number.  The definition of the IpTransportLayer\n    dictionary\
    \ is shown below.  Note that dictionaries for many\n    protocols are not yet\
    \ defined.\n    IpTransportLayer ::= [APPLICATION 38] IMPLICIT SET {\n       \
    \         [0] IMPLICIT ProtocolsSupported,\n                [1] IMPLICIT IcmpValues,\n\
    \                [2] IMPLICIT IgmpValues OPTIONAL,\n                [3] IMPLICIT\
    \ GgpValues OPTIONAL,\n                [7] IMPLICIT TcpValues OPTIONAL,\n    \
    \            [8] IMPLICIT EgpValues OPTIONAL,\n                [17] IMPLICIT UdpValues\
    \ OPTIONAL,\n                [20] IMPLICIT HmpValues OPTIONAL,\n             \
    \   [27] IMPLICIT RdpValues OPTIONAL,\n                [30] IMPLICIT NetbltValues\
    \ OPTIONAL,\n    }\n    OBJECT:  IpTransportLayer\n    Type:  SET\n    Definition:\
    \  see above.\n    The objects in the dictionary are defined below.\n"
- title: 'The IpTransportLayer Dictionary:  ProtocolsSupported'
  contents:
  - "The IpTransportLayer Dictionary:  ProtocolsSupported\n    OBJECT:  protocolsSupported\n\
    \    Type:  OCTETSTRING\n    Definition: Sparse list of transport protocols supported.\
    \  Each\n        octet in the OCTETSTRING contains the IP protocol number of a\n\
    \        supported protocol.  For the purposes of this definition, an\n      \
    \  entity supports a protocol if it both contains software to\n        makes it\
    \ possible for the protocol to be used in\n        communications with the entity,\
    \ AND the entity keeps the\n        required values (if any) defined in this memo\
    \ for that protocol.\n"
- title: 'The IpTransportLayer Dictionary: IcmpValues'
  contents:
  - "The IpTransportLayer Dictionary: IcmpValues\n    The IcmpValues dictionary is\
    \ a subdictionary of the IpTransportLayer\n    dictionary which tracks the workings\
    \ of the Internet Control Message\n    Protocol, defined in RFC-792.  The form\
    \ of the dictionary is shown\n    below.\n            IcmpValues ::= SET {\n \
    \               inputPktCount   [0] IMPLICIT Counter,\n                inputPktErrors\
    \  [1] IMPLICIT Counter,\n                inputPktDeliver [2] IMPLICIT Counter,\n\
    \                inputPktTypes   [3] IMPLICIT Histogram OPTIONAL,\n          \
    \      outputPktCount  [4] IMPLICIT Counter,\n                outputPktErrors\
    \ [5] IMPLICIT Counter,\n                outputPktTypes  [6] IMPLICIT Histogram\
    \ OPTIONAL,\n                icmpTraffic     [7] IMPLICIT TrafficMatrix OPTIONAL,\n\
    \                ipID            [8] IMPLICIT Counter OPTIONAL\n            }\n\
    \    OBJECT:  IcmpValues\n    Type:  SET\n    Definition:  see above.\n    The\
    \ objects in the dictionary are defined below.\n    OBJECT:  inputPktCount\n \
    \   Type:  Counter\n    Definition:  The total number of ICMP packets received\
    \ (including\n        those in error).\n    OBJECT:  inputPktErrors\n    Type:\
    \  Counter\n    Definition:  The number of ICMP packets received which proved\
    \ to\n        have errors (bad checksums, bad length etc).  Subtracting this\n\
    \        value from the inputPktCount field should give the number of\n      \
    \  valid ICMP packets received.\n    OBJECT:  inputPktDeliver\n    Type:  Counter\n\
    \    Definition:  The number of valid ICMP packets which were\n        successfully\
    \ processed (e.g., delivered to the higher\n        protocol).\n    OBJECT:  inputPktTypes\n\
    \    Type:  Histogram\n    Definition:  A histogram of ICMP messages types and\
    \ codes received,\n        not including those messages that proved to contain\
    \ errors.\n        The histogram histValue field contains a 16-bit value which\
    \ is\n        the the (ICMP type * 256) + ICMP code, and the histCount field\n\
    \        contains the number of valid messages containing this\n        type/code\
    \ pair which have been received.\n        The message type and code values are\
    \ those defined in RFC-792\n        (e.g., the Time Exceeded Message with a code\
    \ of \"fragment\n        reassembly time exceeded\" is (11 * 256) + 1 = 2817).\n\
    \    Object Status:  Useful.\n    Operations on Object:  The defaults except as\
    \ listed below:\n        GET-MATCH:  Match is defined on the value of the histValue\n\
    \            field.\n    OBJECT:  outputPktCount\n    Type:  Counter\n    Definition:\
    \  The total number of ICMP packets that the entity\n        attempted to send\
    \ (including those that failed due to lack of\n        buffers, a missing route\
    \ or other transient transmission\n        problems).\n    OBJECT:  outputPktErrors\n\
    \    Type:  Counter\n    Definition:  The number of ICMP packets which the entity\
    \ could not\n        send due to transmission problems such as the lack of buffers,\
    \ a\n        missing route or other transient transmission problems.  This\n \
    \       value is not required to include errors which the ICMP layer\n       \
    \ could not reasonably be expected to detect such as damage to the\n        packet\
    \ in transit.  Subtracting this value from the PktCount\n        field should\
    \ give the number of ICMP packets the entity believes\n        it successfully\
    \ sent.\n    OBJECT:  outputPktTypes\n    Type:  Histogram\n    Definition:  A\
    \ histogram of ICMP messages types and codes sent,\n        including those messages\
    \ that later failed to be transmitted.\n        The histogram histValue field\
    \ contains a 16-bit value which is\n        the the (ICMP type * 256) + ICMP code,\
    \ and the histCount field\n        contains the number of valid messages containing\
    \ this type/code\n        pair which have been sent.\n        The message type\
    \ and code values are those defined in RFC-792\n        (e.g., the Time Exceeded\
    \ Message with a code of \"fragment\n        reassembly time exceeded\" is (11\
    \ * 256) + 1 = 2817).\n    Object Status:  Useful.\n    Operations on Object:\
    \  The defaults except as listed below:\n            GET-MATCH:  Match is defined\
    \ on the value of the histValue\n                field.\n    OBJECT:  icmpTraffic\n\
    \    Type:  TrafficMatrix\n    Definition:  All ICMP traffic which has originated\
    \ on this machine.\n        The source address in the traffic matrix should be\
    \ the interface\n        from which the packet was sent.  The destination is the\
    \ address\n        to which the packet is to finally be delivered (not an\n  \
    \      intermediate hop).\n    Object Status:  Useful.\n    OBJECT:  ipID\n  \
    \  Type:  Counter\n    Definition:  The next IP packet ID identifier to be used\
    \ by the ICMP\n        code.\n    Object Status:  Required if the ICMP code generates\
    \ its own IP\n        identifiers.\n"
- title: 'The IpTransportLayer Dictionary: IgmpValues'
  contents:
  - "The IpTransportLayer Dictionary: IgmpValues\n    IgmpValues ::= SET {\n     \
    \   conformance     [0] IMPLICIT INTEGER,\n        inputPktCount   [1] IMPLICIT\
    \ Counter,\n        inputPktErrors  [2] IMPLICIT Counter,\n        inputPktTypes\
    \   [3] IMPLICIT Histogram OPTIONAL,\n        outputPktCount  [4] IMPLICIT Counter,\n\
    \        outputPktErrors [5] IMPLICIT Counter,\n        outputPktTypes  [6] IMPLICIT\
    \ Histogram OPTIONAL,\n        igmpTraffic     [7] IMPLICIT TrafficMatrix OPTIONAL\n\
    \        igmpGroups      [8] IMPLICIT SET of IgmpGroupEntry,\n        ipID   \
    \         [9] IMPLICIT Counter OPTIONAL,\n       }\n    OBJECT:  IgmpValues\n\
    \    Type:  SET\n    Definition:  The dictionary of information on the Internet\
    \ Group\n        Management Protocol (RFC-988).\n    Object Status:  Required\
    \ in hosts which support IGMP.\n    The objects stored in this dictionary are\
    \ defined below.\n    OBJECT:  conformance\n    Type:  INTEGER\n    Definition:\
    \  The level of conformance with RFC-988.  The conformance\n        levels are:\n\
    \               0 -- Level 0.  No support for IP multicasting\n              \
    \ 1 -- Level 1.  Support for sending but not receiving\n                    multicast\
    \ datagrams.\n               2 -- Level 2.  Full support for IP multicasting.\n\
    \        These values are taken directly from RFC-988.\n    OBJECT:  inputPktCount\n\
    \    Type:  Counter\n    Definition:  The number of IGMP packets received including\
    \ those\n        that proved to be in error.\n    OBJECT:  inputPktErrors\n  \
    \  Type:  Counter\n    Definition:  The number of IGMP packets received which\
    \ proved to\n        be in error.  This value subtracted from inputPktCount should\n\
    \        give the number of valid IGMP packets received.\n    OBJECT:  inputPktTypes\n\
    \    Type:  Histogram\n    Definition:  A histogram of IGMP messages types and\
    \ codes sent,\n        including those messages that later failed to be transmitted.\n\
    \        The histogram histValue field contains a 16-bit value which\n       \
    \ is the the (IGMP type * 256) + IGMP code, and the histCount\n        field contains\
    \ the number of valid messages containing this\n        type/code pair which have\
    \ been sent.\n        The type and code values are taken from RFC-988.\n    OBJECT:\
    \  outputPktCount\n    Type:  Counter\n    Definition:  The total number of IGMP\
    \ packets that the entity\n        attempted to send (including those that failed\
    \ due to lack\n        of buffers, a missing route or other transient transmission\n\
    \        problems).\n    OBJECT:  outputPktErrors\n    Type:  Counter\n    Definition:\
    \  The number of IGMP packets which the entity could not\n        send due to\
    \ transmission problems such as the lack of buffers,\n        a missing route\
    \ or other transient transmission problems.\n        This value is not required\
    \ to include errors which the IGMP\n        layer could not reasonably be expected\
    \ to detect such as damage\n        to the packet in transit.  Subtracting this\
    \ value from the\n        outputPktCount field should give the number of IGMP\
    \ packets\n        the entity believes it successfully sent.\n    OBJECT:  outputPktTypes\n\
    \    Type:  Histogram\n    Definition:  A histogram of IGMP messages types and\
    \ codes sent,\n        including those messages that later failed to be transmitted.\n\
    \        The histogram histValue field contains a 16-bit value which is\n    \
    \    the the (IGMP type * 256) + IGMP code, and the histCount field\n        contains\
    \ the number of valid messages containing this type/code\n        pair which have\
    \ been sent.\n        The type and code values are taken from RFC-988.\n    OBJECT:\
    \ igmpTraffic\n    Type: TrafficMatrix\n    Definition:  All IGMP traffic which\
    \ has originated on this machine.\n        The source address in the traffic matrix\
    \ should be the interface\n        from which the packet was sent.  The destination\
    \ is the address\n        to which the packet is to finally be delivered (not\
    \ an\n        intermediate hop).\n    Object Status: Useful.\n    OBJECT: igmpGroups\n\
    \    Type: SET\n    Definition:  The various igmpGroups of which this host is\
    \ aware.\n        This is stored as a set of IgmpGroupEntry.  The format of an\n\
    \        IgmpGroupEntry is shown below.\n                    IgmpGroupEntry ::=\
    \ [0] SET {\n                        groupAddress      [0] IMPLICIT IpAddress,\n\
    \                        groupAccessKey    [1] IMPLICIT OCTETSTRING,\n       \
    \                 groupAgent        [2] IMPLICIT BOOLEAN,\n                  \
    \  }\n        The groupAddress is the multicast IP address.  The\n        groupAccessKey\
    \ is the 8 octet key -- this key may be\n        confidential and should only\
    \ be available to authorized querying\n        entities.  The groupAgent field\
    \ is true if this entity is an\n        agent for the multicast group.\n    OBJECT:\
    \  ipID\n    Type:  Counter\n    Definition:  The next IP packet ID identifier\
    \ to be used by the IGMP\n        code.\n    Object Status:  Required if the IGMP\
    \ code generates its own IP\n        identifiers.\n"
- title: 'The IpTransportLayer Dictionary:  GgpValues'
  contents:
  - "The IpTransportLayer Dictionary:  GgpValues\n    The definition of the GgpValues\
    \ dictionary is left for further\n    study.\n"
- title: 'The IpTransportLayer Dictionary:  TcpValues'
  contents:
  - "The IpTransportLayer Dictionary:  TcpValues\n    The TcpValues dictionary is\
    \ a subdictionary of the IpTransportLayer\n    dictionary which tracks the workings\
    \ of the Transmission Control\n    Protocol, defined in RFC-793.  The definitions\
    \ of several objects in\n    this dictionary refer to definitions in RFC-793.\
    \  The form of the\n    dictionary is shown below.\n            TcpValues ::=\
    \ SET {\n                          [0] IMPLICIT TcpParam\n                   \
    \       [1] IMPLICIT TcpStats OPTIONAL,\n              tcpConnData [2] IMPLICIT\
    \ SET of TcpConn,\n            }\n    OBJECT:  TcpValues\n    Type:  IMPLICIT\
    \ SET\n    Definition:  see above.\n    Object Status:  Required if the entity\
    \ supports TCP.\n    The objects in the dictionary are defined in the next few\
    \ sections.\n"
- title: 'The IpTransportLayer Dictionary: TcpValues/TcpParam'
  contents:
  - "The IpTransportLayer Dictionary: TcpValues/TcpParam\n    The TcpParam dictionary\
    \ contains information about certain\n    parameters such as round-trip timer\
    \ estimation constants which are\n    managed on a per-machine basis.  The form\
    \ of the dictionary is shown\n    below.\n            TcpParam ::= SET {\n   \
    \             tcpRtoA       [0] IMPLICIT IA5String,\n                tcpRtoParam\
    \   [1] IMPLICIT SET of RtoParam,\n                ipID          [2] IMPLICIT\
    \ Counter,\n                tcpRtoMin     [3] IMPLICIT INTEGER OPTIONAL,\n   \
    \             tcpRtoMax     [4] IMPLICIT INTEGER OPTIONAL,\n                tcpMaxSegSiz\
    \  [5] IMPLICIT INTEGER,\n                tcpMaxConn    [6] IMPLICIT INTEGER OPTIONAL,\n\
    \                tcpMaxWindow  [7] IMPLICIT INTEGER OPTIONAL,\n            }\n\
    \    OBJECT:  tcpParam\n    Type:  SET\n    Definition:  see above.\n    The definition\
    \ of the objects in the tcpParam dictionary are given\n    below.\n    OBJECT:\
    \  tcpRtoA\n    Type:  IA5String\n    Definition:  The TCP retransmission timeout\
    \ algorithm used.  The\n        algorithm is expressed as one or more equations\
    \ to generate\n        a target value, \"RTO[N]\", which is the retransmission\
    \ timeout\n        for packet \"N\".  Expressions should use well understood\n\
    \        symbols such as * for multiplication and / for division, and\n      \
    \  parentheses to indicate precedence.  Variables should begin\n        with an\
    \ upper case character.  Multiple equations should be\n        separated by semi-colons.\
    \  Comments should be in braces (i.e.,\n        {}).  Constants should begin with\
    \ a lower case character.  In\n        addition to \"RTO[N]\" the symbol \"S[N]\"\
    \ is defined to mean the\n        round-trip sample for packet N.  Using this\
    \ syntax, the\n        algorithm in RFC-793 would be expressed as:\n         \
    \       RTO[N] = SRTT[N] * beta ;\n                SRTT[N] = ( S[N-1] * alpha)\
    \ + (SRTT[N-1] * (1 - alpha))\n    Note:  The syntax probably needs to be refined\
    \ so that it can be\n       parsed and interpreted by a program.  This is left\
    \ for future\n       study.\n    OBJECT:  tcpRtoParam\n    Type:  SET of RtoParam\n\
    \    Definition:  The list of the values of the constants used by the\n      \
    \  retransmission timeout algorithm.  The format of the RtoParam\n        structure\
    \ is shown below.\n        RtoParam ::= SEQUENCE {\n            name IA5String,\n\
    \            value Fraction\n        }\n        The name is the name of the constant\
    \ as expressed in the\n        tcpRtoA (e.g., \"beta\").\n    OBJECT:  ipID\n\
    \    Type:  Counter\n    Definition:  The next IP packet ID identifier to be used\
    \ by the TCP\n        code.\n    Object Status:  Required if the TCP code generates\
    \ its own IP\n        identifiers.\n    OBJECT:  tcpRtoMin\n    Type:  INTEGER\n\
    \    Definition:  The minimum value the TCP implementation permits for\n     \
    \   the retransmission timeout (RTO), measured in milliseconds.\n    Note:  If\
    \ the SET operation is optionally defined, access control\n       must be exercised.\n\
    \    Object Status:  Required if the implementation uses the suggested\n     \
    \   algorithm in RFC-793 or if the implementation sets any limits\n        on\
    \ the minimum RTO.\n    Operations on Object:  The defaults except as listed below:\n\
    \        SET:  Optionally defined to change the value.  Implementations\n    \
    \       should confirm that the new value is less than tcpRtoMax.\n    OBJECT:\
    \  tcpRtoMax\n    Type:  INTEGER\n    Definition:  The maximum value the TCP implementation\
    \ permits for\n        the retransmission timeout (RTO), measured in milliseconds.\n\
    \    Note:  If the SET operation is optionally defined, access control\n     \
    \  must be exercised.\n    Object Status:  Required if the implementation uses\
    \ the suggested\n        algorithm in RFC-793 or if the implementation sets any\
    \ limits\n        on the maximum RTO.\n    Operations on Object:  The defaults\
    \ except as listed below:\n    SET:  Optionally defined to change the value. \
    \ Implementations\n         should confirm that the new value is greater than\
    \ tcpRtoMax,\n         and that the value is large (i.e., several seconds).\n\
    \    OBJECT:  tcpMaxSegSiz\n    Type:  INTEGER\n    Definition:  The maximum segment\
    \ size used by this implementation.\n    Object Status:  Required if the entity\
    \ sets an upper limit on the\n        MTU.  (Some implementations have no constraints,\
    \ but chose an\n        MTU from external constraints such as the maximum MTU\
    \ of the\n        network interface in use.)\n    OBJECT:  tcpMaxConn\n    Type:\
    \  INTEGER\n    Definition:  An optional value, which must be present if the entity\n\
    \        has a limit on the total number of TCP connections it can support.\n\
    \    Object Status:  Required if the entity sets limits.\n    Note:  If the SET\
    \ operation is defined, access control must be\n        exercised.\n    Operations\
    \ on Object:  The defaults except as listed below:\n        SET:  Optionally defined\
    \ to change the value.  If the\n            new value is less than the number\
    \ of currently\n            open connections, implementations are *not* required\n\
    \            to close existing connections, but may not open\n            any\
    \ additional ones.\n    OBJECT:  tcpMaxWindow\n    Type:  INTEGER\n    Definition:\
    \  An optional value, which must be present if the entity\n        places a fixed\
    \ upper limit on the size of any connection's TCP\n        window (i.e., if the\
    \ maximum window size is not per connection\n        configurable).\n    Object\
    \ Status:  Required if the entity sets limits.\n    Note:  If the SET operation\
    \ is defined, access control must be\n        exercised.\n    Operations on Object:\
    \  The defaults except as listed below:\n            SET:  Optionally defined\
    \ to change the value.  The new\n                value must be at least the size\
    \ of one maximum\n                TCP segment.\n"
- title: 'The IpTransportLayer Dictionary: TcpValues/TcpStats'
  contents:
  - "The IpTransportLayer Dictionary: TcpValues/TcpStats\n    The TcpStats dictionary\
    \ stores general information about the\n    workings of the TCP layer.  The form\
    \ of the dictionary is shown\n    below.\n            TcpStats ::= SET {\n   \
    \              connAttempts     [0] IMPLICIT Counter OPTIONAL,\n             \
    \    connOpened       [1] IMPLICIT Counter OPTIONAL,\n                 connAccepted\
    \     [2] IMPLICIT Counter OPTIONAL,\n                 connClosed       [3] IMPLICIT\
    \ Counter OPTIONAL,\n                 connAborted      [4] IMPLICIT Counter OPTIONAL,\n\
    \                 connAbortedInfo  [5] IMPLICIT Histogram OPTIONAL,\n        \
    \         octetsIn         [6] IMPLICIT Counter OPTIONAL,\n                 octetsOut\
    \        [7] IMPLICIT Counter OPTIONAL,\n                 octetsInDup      [8]\
    \ IMPLICIT Counter OPTIONAL,\n                 octetsRetrans    [9] IMPLICIT Counter\
    \ OPTIONAL,\n                 inputPkts       [10] IMPLICIT Counter OPTIONAL,\n\
    \                 retransPkts     [11] IMPLICIT Counter OPTIONAL,\n          \
    \       outputPkts      [12] IMPLICIT Counter OPTIONAL,\n                 dupPkts\
    \         [13] IMPLICIT Counter OPTIONAL,\n            }\n    OBJECT:  TcpStats\n\
    \    Type:  SET\n    Definition:  See above.\n    Object Status:  Encouraged.\n\
    \    The definition of the fields in the dictionary are given below.\n    OBJECT:\
    \  connAttempts\n    Type:  Counter\n    Definition:  The number of connection\
    \ attempts that have been made\n        from this host.  This includes pending\
    \ attempts.\n    Object Status:  Encouraged.\n    OBJECT:  connOpened\n    Type:\
    \  Counter\n    Definition:  The number of connection attempts from this host\
    \ which\n        successfully generated an open connection.  This includes\n \
    \       currently open connections.\n    Object Status:  Encouraged.\n    OBJECT:\
    \  connAccepted\n    Type:  Counter\n    Definition:  The number of connections\
    \ accepted by listening peers\n        on this entity.  This includes currently\
    \ open connections.\n    Object Status:  Encouraged.\n    OBJECT:  connClosed\n\
    \    Type:  Counter\n    Definition:  The number of connections which were properly\
    \ closed.\n    Object Status:  Encouraged.\n    OBJECT:  connAborted\n    Type:\
    \  Counter\n    Definition:  The number of connections which were aborted.  Note\n\
    \        that if implementations trace how the connection was aborted,\n     \
    \   they are encouraged to use the connAbortedInfo histogram.\n    Object Status:\
    \  Encouraged.\n    OBJECT:  connAbortedInfo\n    Type:  Histogram\n    Definition:\
    \  The number of connections which were aborted by type of\n        abort.  The\
    \ histValue is one of the codes listed below.  The\n        histCount is the number\
    \ of connections aborted for this reason.\n        The histValues codes are:\n\
    \                    0 -- an abort condition not specified below\n           \
    \         1 -- remote abort\n                    2 -- local application abort\n\
    \                    3 -- local protocol level abort\n    Object Status:  Useful\n\
    \    OBJECT:  octetsIn\n    Type:  Counter\n    Definition:  The total number\
    \ of TCP octets (not including\n        duplicates) received at this entity.\n\
    \    Object Status:  Required if TcpStats is implemented.\n    OBJECT:  octetsOut\n\
    \    Type:  Counter\n    Definition:  The total number of TCP octets (not including\n\
    \        retransmissions) sent from this entity.\n    Object Status:  Required\
    \ if TcpStats is implemented.\n    OBJECT:  octetsInDup\n    Type:  Counter\n\
    \    Definition:  The total number of TCP octets received which were\n       \
    \ duplicates.\n    Object Status:  Required if TcpStats is implemented.\n    OBJECT:\
    \  octetsReTrans\n    Type:  Counter\n    Definition:  The total number of TCP\
    \ octets which have been\n        retransmitted.\n    Object Status:  Required\
    \ if TcpStats is implemented.\n    OBJECT:  inputPkts\n    Type:  Counter\n  \
    \  Definition:  The total number of valid packets received, including\n      \
    \  those on current connections.\n    Object Status:  Useful.\n    OBJECT:  retransPkts\n\
    \    Type:  Counter\n    Definition:  The total number of packets retransmitted.\n\
    \    Object Status:  Useful.\n    OBJECT:  outputPkts\n    Type:  Counter\n  \
    \  Definition:  The total number of packets sent.\n    Object Status:  Useful.\n\
    \    OBJECT:  dupPkts\n    Type:  Counter\n    Definition:  The number of packets\
    \ received which contained only\n        data already received.\n    Object Status:\
    \  Useful.\n"
- title: 'The IpTransportLayer Dictionary: TcpValues/TcpConn'
  contents:
  - "The IpTransportLayer Dictionary: TcpValues/TcpConn\n    The tcpConnData field\
    \ in the TcpValues dictionary is a set of\n    TcpConn, where each TcpConn contains\
    \ information on a particular TCP\n    connection.  The definition of TcpConn\
    \ is shown below.\n                TcpConn ::= SET {\n                    localPort\
    \       [0] IMPLICIT INTEGER,\n                    localAddress    [1] IMPLICIT\
    \ IpAddress,\n                    foreignPort     [2] IMPLICIT INTEGER,\n    \
    \                foreignAddress  [3] IMPLICIT IpAddress,\n                   \
    \ state           [4] IMPLICIT INTEGER,\n                    snduna          [5]\
    \ IMPLICIT INTEGER,\n                    sndnxt          [6] IMPLICIT INTEGER,\n\
    \                    sndwnd          [7] IMPLICIT INTEGER,\n                 \
    \   congwnd         [8] IMPLICIT INTEGER,\n                    rcvnxt        \
    \  [9] IMPLICIT INTEGER,\n                    rcvwnd         [10] IMPLICIT INTEGER,\n\
    \                    srtt           [11] IMPLICIT INTEGER OPTIONAL,\n        \
    \            lastrtt        [12] IMPLICIT INTEGER OPTIONAL,\n                \
    \    maxSegSize     [13] IMPLICIT INTEGER,\n                    octetsSent   \
    \  [14] IMPLICIT Counter OPTIONAL,\n                    octetsRXmit    [15] IMPLICIT\
    \ Counter OPTIONAL,\n                    octetsRcvd     [16] IMPLICIT Counter\
    \ OPTIONAL,\n                    octetDups      [17] IMPLICIT Counter OPTIONAL,\n\
    \                    octetPastWin   [18] IMPLICIT Counter OPTIONAL,\n        \
    \            segSizes       [19] IMPLICIT Histogram OPTIONAL,\n            }\n\
    \    The set of TCP connections can be searched in a number of ways based\n  \
    \  on the local and foreign addresses (including the port number).\n    Individual\
    \ values of a connection cannot be retrieved without a\n    search.\n    OBJECT:\
    \  TcpConn\n    Type:  SET\n    Definition:  The per TCP connection data.\n  \
    \  Operations on Object:  The defaults except as listed below:\n          GET-MATCH:\
    \  Defined on any combination of values of\n              localAddress,  localPort,\
    \ foreignAddress and\n              foreignPort.  Returns all connections which\
    \ match\n              the template.  (For example, GET-MATCH on a\n         \
    \     particular foreignAddress returns all connections\n              to that\
    \ address.)\n    The definitions of the fields of the tcpConn structure are given\n\
    \    below.\n    OBJECT:  localPort\n    Type:  INTEGER\n    Definition:  The\
    \ local port number of this connection.\n    Operations on Object: Defaults. \
    \ Note that MATCH operators may be\n        applied to this object to locate information\
    \ on a particular TCP\n        connection.\n    OBJECT:  localAddress\n    Type:\
    \  IpAddress\n    Definition:  The local IP address of this connection.  May be\
    \ the\n        default IP address defined above.  This value may not be valid\n\
    \        in certain states.\n    Operations on Object:  Defaults.  Note that MATCH\
    \ operators may be\n        applied to this object to locate information on a\
    \ particular\n        TCP connection.\n    OBJECT:  foreignPort\n    Type:  INTEGER\n\
    \    Definition:  The foreign port number of this connection.  This value\n  \
    \      may be meaningless if the local peer is in certain states (e.g.,\n    \
    \    LISTEN).\n    Operations on Object:  Defaults.  Note that MATCH operators\
    \ may be\n       applied to this object to locate information on a particular\
    \ TCP\n       connection.\n    OBJECT:  foreignAddress\n    Type:  IpAddress\n\
    \    Definition:  The foreign IP address of this connection.  This value\n   \
    \     may be meaningless if the local peer is in certain states (e.g.,\n     \
    \   LISTEN).\n    Operations on Object: Defaults.  Note that MATCH operators may\
    \ be\n        applied to this object to locate information on a particular\n \
    \       TCP connection.\n    OBJECT:  state\n    Type:  INTEGER\n    Definition:\
    \  The current state of the local peer.  The values\n        corresponding to\
    \ the different states are: close(0), listen(1),\n        syn-sent(2), syn-received(3),\
    \ established(4), close-wait(5),\n        fin-wait-1(6), closing(7), last-ack(8),\
    \ fin-wait-2(9),\n        time-wait(10).  Implementations must map internal\n\
    \        representations of the state into these values.\n    OBJECT:  snduna\n\
    \    Type:  INTEGER\n    Definition:  The SND.UNA value as defined in RFC-793.\n\
    \    OBJECT:  sndnxt\n    Type:  INTEGER\n    Definition:  The SND.NXT value as\
    \ defined in RFC-793.\n    OBJECT:  sndwnd\n    Type:  INTEGER\n    Definition:\
    \  The SND.WND value as defined in RFC-793.\n    OBJECT:  congwnd\n    Type: \
    \ INTEGER\n    Definition:  The congestion window.  This value is less than or\n\
    \        equal to sndwnd.  If less than sndwnd, then congestion\n        control\
    \ is in effect and congwnd is the reduced send window\n        size in use.\n\
    \    OBJECT:  rcvnxt\n    Type:  INTEGER\n    Definition:  The RCV.NXT value as\
    \ defined in RFC-793.\n    OBJECT:  rcvwnd\n    Type:  INTEGER\n    Definition:\
    \  The RCV.WND value as defined in RFC-793.\n    OBJECT:  srtt\n    Type:  INTEGER\n\
    \    Definition:  The smoothed round-trip time in milliseconds.\n    Object Status:\
    \  Required if the implementation maintains a smoothed\n        round-trip time.\n\
    \    OBJECT:  lastrtt\n    Type:  INTEGER\n    Definition:  The last round-trip\
    \ time sample taken in milliseconds.\n    Object Status:  Encouraged.\n    OBJECT:\
    \  maxSegSize\n    Type:  INTEGER\n    Definition:  The maximum segment size that\
    \ can be used on this\n        connection.\n    OBJECT:  octetsSent\n    Type:\
    \  Counter\n    Definition:  The total number of octets transmitted since the\n\
    \        connection was opened, not including retransmissions.  Can\n        alternatively\
    \ be thought of as the current length of the\n        stream.\n    Object Status:\
    \  Encouraged.\n    OBJECT:  octetsRXmit\n    Type:  Counter\n    Definition:\
    \  The total number of octets retransmitted since the\n        connection was\
    \ opened.  This plus octetsSent should give the\n        total number of octets\
    \ sent.\n    Object Status:  Encouraged.\n    OBJECT:  octetsRcvd\n    Type: \
    \ Counter\n    Definition:  The number of octets received since the connection\
    \ was\n        opened, not including duplicates received.  The receiver's\n  \
    \      version of octetsSent.\n    Object Status:  Encouraged.\n    OBJECT:  octetDups\n\
    \    Type:  Counter\n    Definition:  The total number of octets received since\
    \ the\n        connection was opened which were redundant (i.e., they had been\n\
    \        previously received).\n    Object Status:  Encouraged.\n    OBJECT: \
    \ octetPastWin\n    Type:  Counter\n    Definition:  The number of segments which\
    \ contained data beyond\n        the upper edge of the receive window.\n    Object\
    \ Status:  Encouraged\n    OBJECT:  segSizes\n    Type:  Histogram\n    Definition:\
    \  A histogram of the sizes of the packets sent on the\n        connection (useful\
    \ for catching cases of silly-window syndrome).\n        This histogram is an\
    \ range histogram, measuring the number of\n        segments whose size fell into\
    \ a give range.  The histogram\n        histValue field contains a segment size,\
    \ and the histCount\n        field contains the number of segments between this\
    \ size and\n        the next largest size.\n    Object Status:  Useful.\n"
- title: 'The IpTransportLayer Dictionary: EgpValues'
  contents:
  - "The IpTransportLayer Dictionary: EgpValues\n    The EgpValues dictionary stores\
    \ information about the workings of\n    the Exterior Gateway Protocol, defined\
    \ in RFC-904.  The format of\n    the dictionary is shown below.\n           \
    \ EgpValues ::= SET {\n                egpState  [0] IMPLICIT INTEGER,\n     \
    \                     [1] IMPLICIT EgpParam,\n                          [2] IMPLICIT\
    \ EgpStats OPTIONAL,\n              egpPeerData [3] IMPLICIT SET of EgpPeer\n\
    \            }\n    OBJECT:  EgpValues\n    Type:  SET\n    Definition:  See above.\n\
    \    Object Status:  Required in entities which support EGP.\n    The definitions\
    \ of the subdictionaries of this dictionary are given\n    below.\n    OBJECT:\
    \  egpState\n    Type:  INTEGER\n    Definition:  The state of the EGP system.\
    \  The state values are:\n                        0 -- Idle\n                \
    \        1 -- Acquisition\n                        2 -- Down\n               \
    \         3 -- Up\n                        4 -- Cease\n    These values are taken\
    \ directly from RFC-904.\n"
- title: 'The IpTransportLayer Dictionary: EgpValues/EgpParam'
  contents:
  - "The IpTransportLayer Dictionary: EgpValues/EgpParam\n    The EgpParam dictionary\
    \ stores the various EGP parameters.  The\n    format of the dictionary is shown\
    \ below.\n            EgpParam ::= SET {\n                p1    [0] IMPLICIT INTEGER,\n\
    \                p2    [1] IMPLICIT INTEGER,\n                p3    [2] IMPLICIT\
    \ INTEGER,\n                p4    [3] IMPLICIT INTEGER,\n                p5  \
    \  [4] IMPLICIT INTEGER,\n                ipID  [5] IMPLICIT Counter OPTIONAL\n\
    \            }\n    OBJECT:  EgpParam\n    Type:  SET\n    Definition:  See above.\n\
    \    The definition of the fields of the dictionary are given below.  All\n  \
    \  the definitions are taken from RFC-904.\n    OBJECT:  p1\n    Type:  INTEGER\n\
    \    Definition:  Minimum interval acceptable between successive Hello\n     \
    \   commands received.\n    Operations on Object:  The defaults except as noted\
    \ below.\n        SET:  The set command is optionally defined on this object.\n\
    \    OBJECT:  p2\n    Type:  INTEGER\n    Definition:  Minimum interval acceptable\
    \ between successive Poll\n        commands received.\n    Operations on Object:\
    \  The defaults except as noted below.\n        SET:  The set command is optionally\
    \ defined on this object.\n    OBJECT:  p3\n    Type:  INTEGER\n    Definition:\
    \  Interval between Request or Cease command\n        retransmissions.\n    Operations\
    \ on Object:  The defaults except as noted below.\n        SET:  The set command\
    \ is optionally defined on this object.\n    OBJECT:  p4\n    Type:  INTEGER\n\
    \    Definition:  Interval during which state variables are maintained in\n  \
    \      the absence of commands or response in the Down and Up states.\n    Operations\
    \ on Object:  The defaults except as noted below.\n    SET:  The set command is\
    \ optionally defined on this object.\n    OBJECT:  p5\n    Type:  INTEGER\n  \
    \  Definition:  Interval during which state variables are maintained in\n    \
    \    the absence of commands or response in the Acquisition and Cease\n      \
    \  states.\n    Operations on Object:  The defaults except as noted below.\n \
    \       SET:  The set command is optionally defined on this object.\n    OBJECT:\
    \ ipID\n    Type: Counter\n    Definition:  The next IP packet ID identifier to\
    \ be used by the EGP\n        code.\n    Object Status: Required if the EGP code\
    \ generates its own IP\n        identifiers.\n"
- title: 'The IpTransportLayer Dictionary: EgpValues/EgpStats'
  contents:
  - "The IpTransportLayer Dictionary: EgpValues/EgpStats\n    The EgpStats dictionary\
    \ keeps statistics about the use of EGP on\n    this entity.  The form of the\
    \ dictionary is shown below.\n            EgpStats ::= SET {\n               \
    \ inputPktCount   [1] IMPLICIT Counter,\n                inputPktErrors  [2] IMPLICIT\
    \ Counter,\n                inputPktTypes   [3] IMPLICIT Histogram OPTIONAL,\n\
    \                outputPktCount  [4] IMPLICIT Counter,\n                outputPktErrors\
    \ [5] IMPLICIT Counter,\n                outputPktTypes  [6] IMPLICIT Histogram\
    \ OPTIONAL,\n                egpTraffic      [7] IMPLICIT TrafficMatrix OPTIONAL\n\
    \            }\n    OBJECT:  EgpStats\n    Type:  SET\n    Definition:  See above.\n\
    \    The definitions of the objects in this dictionary are given below.\n    OBJECT:\
    \  inputPktCount\n    Type: Counter\n    Definition:  The number of EGP packets\
    \ received including those that\n        proved to be in error.\n    OBJECT: \
    \ inputPktErrors\n    Type:  Counter\n    Definition:  The number of EGP packets\
    \ received which proved to be\n        in error.  This value subtracted from inputPktCount\
    \ should give\n        the number of valid EGP packets received.\n    OBJECT:\
    \  inputPktTypes\n    Type:  Histogram\n    Definition:  A histogram of types\
    \ of valid EGP messages received.\n        The histogram histValue field contains\
    \ the message type number,\n        and the histCount field contains the number\
    \ of messages of\n        this type which have been received.\n    Object Status:\
    \  Useful.\n    OBJECT:  outputPktCount\n    Type:  Counter\n    Definition: \
    \ The total number of EGP packets that the entity\n        attempted to send (including\
    \ those that failed due to lack of\n        buffers, a missing route or other\
    \ transient transmission\n        problems).\n    OBJECT:  outputPktErrors\n \
    \   Type:  Counter\n    Definition:  The number of EGP packets which the entity\
    \ could not\n        send due to transmission problems such as the lack of buffers,\n\
    \        a missing route or other transient transmission problems.\n        This\
    \ value is not required to include errors which the EGP\n        layer could not\
    \ reasonably be expected to detect such as\n        damage to the packet in transit.\
    \  Subtracting this value from\n        the outputPktCount field should give the\
    \ number of EGP packets\n        the entity believes it successfully sent.\n \
    \   OBJECT:  outputPktTypes\n    Type:  Histogram\n    Definition:  A histogram\
    \ of EGP messages types sent, including those\n        that later failed to be\
    \ transmitted.  The histogram histValue\n        field contains the message type\
    \ number, and the histCount field\n        contains the number of messages of\
    \ this type which have been sent.\n    Object Status:  Useful.\n    OBJECT:  egpTraffic\n\
    \    Type:  TrafficMatrix\n    Definition:  All EGP traffic which has originated\
    \ on this machine.\n        The source address in the traffic matrix should be\
    \ the interface\n        from which the packet was sent.  The destination is the\
    \ address\n        to which the packet is to finally be delivered (not an\n  \
    \      intermediate hop).\n    Object Status:  Useful.\n"
- title: 'The IpTransportLayer Dictionary: EgpValues/EgpPeer'
  contents:
  - "The IpTransportLayer Dictionary: EgpValues/EgpPeer\n    The egpPeerData field\
    \ of the EgpValues dictionary is a set of\n    EgpPeer structures which contain\
    \ the state variables for a\n    particular EGP neighbor.  The form of the EgpPeer\
    \ structure is shown\n    below.\n            EgpPeer ::= SET {\n            \
    \    r       [0] IMPLICIT Counter,\n                s       [1] IMPLICIT Counter,\n\
    \                t1      [2] IMPLICIT INTEGER,\n                t2      [3] IMPLICIT\
    \ INTEGER,\n                t3      [4] IMPLICIT INTEGER,\n                m \
    \      [5] IMPLICIT BOOLEAN,\n                timer1  [6] IMPLICIT INTEGER,\n\
    \                timer2  [7] IMPLICIT INTEGER,\n                timer3  [8] IMPLICIT\
    \ INTEGER,\n                addr    [9] IMPLICIT IpAddress\n            }\n  \
    \  OBJECT:  EgpPeer\n    Type:  SET\n    Definition:  The state information for\
    \ a given EGP neighbor.\n    The definition of each field is given below.\n  \
    \  OBJECT:  r\n    Type:  Counter\n    Definition:  The receive sequence number\
    \ as defined in RFC-904.\n    OBJECT:  s\n    Type:  Counter\n    Definition:\
    \  The send sequence number as defined in RFC-904.\n    OBJECT:  t1\n    Type:\
    \  INTEGER\n    Definition:  The interval between Hello command retransmissions\
    \ as\n        defined in RFC-904.\n    OBJECT:  t2\n    Type:  INTEGER\n    Definition:\
    \  The interval between Poll command retransmissions as\n        defined in RFC-904.\n\
    \    OBJECT:  t3\n    Type:  INTEGER\n    Definition:  The interval during which\
    \ neighbor-reachability\n        indications are counted, as defined in RFC-904.\n\
    \    OBJECT:  m\n    Type:  BOOLEAN\n    Definition:  The Hello Polling mode.\
    \  True if in active mode, false\n        if in passive mode.\n    Operations\
    \ on Object:  The defaults except as noted below.\n        SET:  Optionally defined\
    \ to change the Hello Polling mode.\n    OBJECT:  timer1\n    Type:  INTEGER\n\
    \    Definition:  The value of timer 1 as defined in RFC-904.\n    OBJECT:  timer2\n\
    \    Type:  INTEGER\n    Definition:  The value of timer 2 as defined in RFC-904.\n\
    \    OBJECT:  timer3\n    Type:  INTEGER\n    Definition:  The value of timer\
    \ 3 as defined in RFC-904.\n    OBJECT:  addr\n    Type:  IpAddress\n    Definition:\
    \  The IP address of the neighbor.\n"
- title: 'The IpTransportLayer Dictionary: UdpValues'
  contents:
  - "The IpTransportLayer Dictionary: UdpValues\n    The UdpValues dictionary stores\
    \ all information on the User Datagram\n    Protocol, defined in RFC-768.  The\
    \ format of the dictionary is shown\n    below.\n            UdpValues ::= [17]\
    \ IMPLICIT SET OPTIONAL {\n                ipID        [0] IMPLICIT Counter OPTIONAL,\n\
    \                            [1] IMPLICIT UdpStats,\n                udpPortData\
    \ [2] IMPLICIT SET of udpPort\n            }\n    OBJECT:  UdpValues\n    Type:\
    \  SET\n    Definition:  See above.\n    Object Status:  Implementation of this\
    \ dictionary is required if\n        the entity supports UDP.\n    The fields\
    \ of this dictionary are given below.\n    OBJECT:  ipID\n    Type:  Counter\n\
    \    Definition:  The next IP packet ID identifier to be used by the UDP\n   \
    \     code.\n    Object Status:  Required if the UDP code generates its own IP\n\
    \        identifiers.\n"
- title: 'The IpTransportLayer Dictionary: UdpValues/UdpStats'
  contents:
  - "The IpTransportLayer Dictionary: UdpValues/UdpStats\n    The UdpStats dictionary\
    \ stores general information about the\n    behavior of the UDP protocol on the\
    \ entity.  The format of the\n    dictionary is shown below.\n            UdpStats\
    \ ::= SET {\n                inputPkts       [0] IMPLICIT Counter,\n         \
    \       inputPktErrors  [1] IMPLICIT Counter,\n                outputPkts    \
    \  [2] IMPLICIT Counter,\n            }\n    OBJECT:  UdpStats\n    Type:  SET\n\
    \    Definition:  See above.\n    Object Status:  Encouraged.\n    The fields\
    \ in this dictionary are defined below.\n    OBJECT:  inputPkts\n    Type:  Counter\n\
    \    Definition:  The total number of UDP packets received at this entity\n  \
    \      including any errors.\n    Object Status:  Required if the UdpStats dictionary\
    \ is implemented.\n    OBJECT:  inputPktsErrors\n    Type:  Counter\n    Definition:\
    \  The number of UDP packets which could not be delivered\n        because of\
    \ format errors, data corruption or because there was no\n        application\
    \ at the destination port.\n    Object Status:  Required if the UdpStats dictionary\
    \ is implemented.\n    OBJECT:  outputPkts\n    Type:  Counter\n    Definition:\
    \  The total number of UDP segments sent from this entity.\n    Object Status:\
    \  Required if the UdpStats dictionary is implemented.\n"
- title: 'The IpTransportLayer Dictionary: UdpValues/udpPortData'
  contents:
  - "The IpTransportLayer Dictionary: UdpValues/udpPortData\n    The udpPortData structure\
    \ stores information about individual UDP\n    applications.  The udpPortData\
    \ is represented as a set of records,\n    udpPorts, which track the behavior\
    \ of individual ports.  The format\n    of both structures are shown below.\n\
    \            udpPortData    [1] IMPLICIT SET of UdpPort\n            UdpPort ::=\
    \  [0] IMPLICIT SET {\n                localAddress     [0] IMPLICIT IpAddress,\n\
    \                localPort        [1] IMPLICIT INTEGER,\n                foreignAddress\
    \   [2] IMPLICIT IpAddress OPTIONAL,\n                foreignPort      [3] IMPLICIT\
    \ INTEGER OPTIONAL,\n                maxPktSize       [4] IMPLICIT INTEGER,\n\
    \                pktsRcvd         [5] IMPLICIT Counter,\n                octetRcvd\
    \        [6] IMPLICIT Counter OPTIONAL,\n                pktsSent         [7]\
    \ IMPLICIT Counter,\n                octetSent        [8] IMPLICIT Counter OPTIONAL,\n\
    \            }\n    OBJECT:  udpPortData\n    Type:  SET of udpPort\n    Definition:\
    \  See above.\n    OBJECT:  UdpPort\n    Type:  SET\n    Definition:  See above.\n\
    \    Operations on Object: The defaults except as noted below.\n        GET-MATCH.\
    \  Defined on any combination of the values of\n            localAddress, localPort,\
    \ foreignAddress and foreignPort.\n            Returns all ports which match the\
    \ template.\n    The meaning of the individual fields of the udpPort record are\
    \ given\n    below.\n    OBJECT:  localAddress\n    Type:  IpAddress\n    Definition:\
    \  The local IP address of the port.  May be the default\n        IP address if\
    \ records are accepted from any interface.\n    OBJECT:  localPort\n    Type:\
    \  INTEGER\n    Definition:  The local port number.\n    OBJECT:  foreignAddress\n\
    \    Type:  IpAddress\n    Definition:  Some UDP implementations permit applications\
    \ to specify\n        the remote address from which packets will be accepted.\
    \  In such\n        implementations, this field may be used to return the remote\
    \ IP\n        address.  If this value is set to the default IP address, then\n\
    \        packets from any host are accepted.  The default IP address\n       \
    \ indicates that the application has not specified the remote\n        address\
    \ (but could if it chose).\n    Object Status:  Required in entities which permit\
    \ applications to\n        specify the remote address.\n    OBJECT:  foreignPort\n\
    \    Type:  INTEGER\n    Definition:  Some UDP implementations permit applications\
    \ to specify\n        the remote address from which packets will be accepted.\
    \  In such\n        implementations, this field may be used to return the remote\n\
    \        port.  If this value is set to 0, packets from any remote port\n    \
    \    are accepted.\n    Object Status:  Required in entities which permit applications\
    \ to\n        specify the remote port.\n    OBJECT:  maxPktSize\n    Type:  INTEGER\n\
    \    Definition:  The maximum UDP packet size, if any, supported by this\n   \
    \     host.\n    Object Status:  Required if there is a limit on the UDP packet\
    \ size.\n    OBJECT:  pktsRcvd\n    Type:  Counter\n    Definition:  The total\
    \ number of packets received on this port during\n        the lifetime of this\
    \ application (i.e., application which opened\n        this port).\n    OBJECT:\
    \  octetsRcvd\n    Type:  Counter\n    Definition:  The total number of octets\
    \ received at this port.\n    OBJECT:  pktsSent\n    Type:  Counter\n    Definition:\
    \  The total number of packets sent on this port during the\n        lifetime\
    \ of this application (i.e., the application which opened\n        this port).\n\
    \    OBJECT:  octetsSent\n    Type:  Counter\n    Definition:  The total number\
    \ of octets sent on this port during the\n        lifetime of this application\
    \ (i.e., the application which opened\n        this port).\n"
- title: 'The IpTransportLayer Dictionary:  HmpValues'
  contents:
  - "The IpTransportLayer Dictionary:  HmpValues\n     The HmpValues dictionary stores\
    \ all information on the Host\n     Monitoring Protocol, defined in RFC-869. \
    \ Since HEMS is designed to\n     replace HMP, the definition of this dictionary\
    \ has been deferred\n     until a clear need for it is demonstrated.\n"
- title: 'The IpTransportLayer Dictionary:  RdpValues'
  contents:
  - "The IpTransportLayer Dictionary:  RdpValues\n     The RdpValues dictionary stores\
    \ all information on the Reliable\n     Data Protocol (RDP).  Since RDP is currently\
    \ being tested and\n     revised, the definition of this dictionary is left for\
    \ further\n     study.\n"
- title: 'The IpTransportLayer Dictionary:  NetbltValues'
  contents:
  - "The IpTransportLayer Dictionary:  NetbltValues\n     The NetbltValues dictionary\
    \ stores all information on the Network\n     Block Transfer protocol.  Since\
    \ Netblt is currently being tested\n     and revised, the definition of this dictionary\
    \ is left for further\n     study.\n"
- title: The IpApplications Dictionary
  contents:
  - "The IpApplications Dictionary\n     The IpApplications dictionary stores information\
    \ about networking\n     applications whose operations may affect the proper operation\
    \ of\n     the network.  Examples of such applications might be domain\n     nameservers\
    \ or distributed routing agents (such as gated or\n     routed).  The definition\
    \ of this dictionary is left for further\n     study.\n"
- title: NOTES ON RETRIEVAL OF OBJECTS
  contents:
  - "NOTES ON RETRIEVAL OF OBJECTS\n     It is assumed in this system that the query\
    \ processor is only one\n     of many concurrently running processes on an entity,\
    \ and that the\n     operations of the other processes may affect the values of\
    \ the\n     objects managed by the query processor.  To permit this\n     concurrency,\
    \ the query processor is not required to keep the values\n     frozen during the\
    \ execution of a query.  As a result, related\n     values may change during the\
    \ course of the query's execution.\n     Applications should be prepared for this\
    \ possibility.\n     In several places, specific mathematical relations between\
    \ objects\n     have been specified, for example, that object X minus object Y\n\
    \     should yield some well-defined value.  Note that in many cases,\n     objects\
    \ X and Y are roll-over counters, in which case these\n     relations are only\
    \ valid modulo the precision of the counter.  This\n     is acceptable.  The relationships\
    \ are only intended to clarify the\n     association between objects.\n"
- title: EVENTS
  contents:
  - "EVENTS\n     In the remainder of this memo we present the format and definition\n\
    \     of event messages which are unsolicited updates sent from entities\n   \
    \  to management centers.\n     This section needs much further work.  The authors\
    \ provide this\n     section to illustrate how the trap mechanism works.  However,\
    \ much\n     more research must be done into the questions of what events need\n\
    \     to be reported, and what information they must carry with them\n     before\
    \ this section can be completed.  The authors welcome any\n     advice from the\
    \ community on this subject.\n"
- title: Format of Event Messages
  contents:
  - "Format of Event Messages\n     Event messages have the same format as replies;\
    \ they are a sequence\n     of objects.  The only difference between a event message\
    \ and a\n     regular reply to a query is that the event message is labelled as\
    \ a\n     event in the HEMP message header and the first object in the event\n\
    \     message is a special event leader describing the event.  All\n     objects\
    \ after the event message are standard objects stored by the\n     entity which\
    \ might be useful to a monitoring center in\n     understanding the machine state\
    \ which caused the event.  Each event\n     has a certain number of objects that\
    \ it must return.  Additional\n     objects may be returned by loading instructions\
    \ into the\n     eventExecution buffer of the relevant eventEntry.\n     The format\
    \ of the event leader is shown below:\n             EventLeader ::= [APPLICATION\
    \ 1024] IMPLICIT SEQUENCE {\n                 eventCode INTEGER,\n           \
    \      eventIndex INTEGER,\n                 eventThreshold INTEGER,\n       \
    \          eventTime TimeStamp,\n                 eventDescr IA5STRING\n     \
    \        }\n     The eventCode is a number which indicates the type of event.\
    \  The\n     eventCodes are defined below.\n     The eventIndex is an implementation\
    \ specific value.  It is\n     considered good practice to make sure that a particular\
    \ event is\n     only generated in one place.  It may be the case that certain\
    \ HEMS\n     generic events (for example, \"no buffer space\") may be generated\
    \ by\n     more than one place in an entity's code.  To allow implementors and\n\
    \     network managers to determine where the event is actually being\n     generated,\
    \ implementors should make sure that a distinct eventIndex\n     is assigned to\
    \ each location in the code that generates a\n     particular event.\n     The\
    \ eventThreshold is the value of the event threshold when the\n     event was\
    \ sent.\n     The eventTime indicates when the trap was generated.\n     The eventDescr\
    \ is a text string which describes the event.  This\n     description should explain\
    \ the general problem (e.g., \"no buffer\n     space\") and may also, optionally,\
    \ include additional information\n     about why this particular event was generated\
    \ (e.g., \"could not\n     send ICMP redirect\").\n"
- title: Event Definitions
  contents:
  - "Event Definitions\n     The remainder of this memo presents a few generic events,\
    \ which are\n     presented for illustration only.  Implementors interested in\n\
    \     supporting events should contact the authors to help work out a\n     more\
    \ comprehensive set of definitions.\n     The format of the event definitions\
    \ is:\n     EVENT CODE:  The event code number.\n     Definition:  Defines the\
    \ event.\n         Related Objects: The list of related objects which *must* be\n\
    \         returned following the event header.  All objects should be\n      \
    \   returned as fully qualified objects (with ASN.1 codes tracing\n         a\
    \ complete path from the root object dictionary).  If no\n         objects are\
    \ specified, then no related objects are required.\n     Event Status:  Events\
    \ are either required of all conforming\n             implementations, required\
    \ if the entity supports a\n             particular feature (e.g., TCP events)\
    \ or optional.\n     Notes: Any additional notes about the event.\n"
- title: List of Events
  contents:
  - "List of Events\n         The next few event codes are for system (as opposed\
    \ to more\n         network oriented) events.\n         EVENT CODE:  0\n     \
    \    Definition:  Unused\n         EVENT CODE:  1\n         Definition:  The entity\
    \ has rebooted.\n         Related Objects:   An INTEGER which is the highest HEMP\n\
    \             messageID reached by the trap system before the system\n       \
    \      crashed.\n         EVENT CODE:  2\n         Definition:  The entity is\
    \ about to go into test mode.\n         EVENT CODE:  3\n         Definition: \
    \ The entity is about to reset.\n         EVENT CODE:  4\n         Definition:\
    \  The entity is about to reboot.\n         EVENT CODE:  5\n         Definition:\
    \  The entity is about to halt.\n         EVENT CODE:  6\n         Definition:\
    \  The system is close to depleting its packet buffer\n             space.\n \
    \        Event Status:  optional\n         EVENT CODE:  7\n         Definition:\
    \  The system has depleted its packet buffer space.\n         EVENT CODE:  8\n\
    \         Definition:  The system has depleted a non-packet buffer space.\n  \
    \       Note:  The two trap codes above do not deal neatly with\n            \
    \ systems which have multiple buffer pools, each of which\n             may be\
    \ depleted separately, with very different effects\n             on the entity.\n\
    \         The next set of event codes apply to events related to network\n   \
    \      interfaces.\n         EVENT CODE:  1024\n         Definition:  The given\
    \ interface has just come up.\n         Related Objects:  The InterfaceData structure\
    \ for the\n             interface.\n         EVENT CODE:  1025\n         Definition:\
    \  The given interface has just been taken down.\n         Related Objects:  The\
    \ InterfaceData structure for the\n             interface.\n         EVENT CODE:\
    \  1026\n         Definition:  The given interface has just gone into test mode.\n\
    \         Related Objects:  The InterfaceData structure for the\n            \
    \ interface.\n         The next set of event codes are used to report IP-level\
    \ errors.\n         EVENT CODE:  2048\n         Definition:  Unable to route IP\
    \ packet.\n         EVENT CODE:  2049\n         Definition:  Bad IP checksum.\n\
    \         EVENT CODE:  2050\n         Definition:  An IP packet with a bad header\
    \ was received (for\n             example, with a broadcast or multicast IP address\
    \ as the\n             source, or the wrong IP version number, or a header length\n\
    \             which is too short).\n         Related Objects:  Should return the\
    \ IP header of the packet.\n             Note that an IP header type has not yet\
    \ been defined.\n         EVENT CODE:  2051\n         Definition:  Packet for\
    \ unsupported IP transport protocol.\n         Related Objects:  Should return\
    \ the IP header of the packet.\n             Note that an IP header type has not\
    \ yet been defined.\n         EVENT CODE:  2052\n         Definition:  A stunted\
    \ IP packet was received (smaller than\n             the IP length says it should\
    \ be).\n         Related Objects:  Should return the IP header of the packet.\n\
    \             Note that an IP header type has not yet been defined.\n        \
    \ EVENT CODE:  2053\n         Definition:  An oversize IP packet was received\
    \ (larger than\n             the IP length says it should be).\n         Related\
    \ Objects:  Should return the IP header of the packet.\n             Note that\
    \ an IP header type has not yet been defined.\n         EVENT CODE:  2054\n  \
    \       Definition:  A good IP packet was discarded (usually to free\n       \
    \      up buffer space).\n         Related Objects:  Should return the IP header\
    \ of the packet.\n             Note that an IP header type has not yet been defined.\n\
    \         EVENT CODE:  2055\n         Definition:  An IP packet's time-to-live\
    \ as expired.\n         Related Objects:  Should return the IP header of the packet.\n\
    \             Note that an IP header type has not yet been defined.\n        \
    \ EVENT CODE:  2056\n         Definition:  This IP fragment has timed out.\n \
    \        Related Objects:  Should return the header of the fragment.\n       \
    \      Note that an IP header type has not yet been defined.\n"
- title: AREAS FOR FURTHER STUDY
  contents:
  - "AREAS FOR FURTHER STUDY\n     There are several parts of this document that could\
    \ use additional\n     study.  Comments from readers are welcome.\n     The whole\
    \ event system needs thorough examination.  It is not clear\n     that the event\
    \ control mechanism strikes the proper balance between\n     sufficient flexibility\
    \ to allow monitoring centers to customize\n     their event stream, and keeping\
    \ the basic mechanism simple.\n     Further, the problem of defining generic events\
    \ for all entities is\n     an immense task.  Finally, the system of appending\
    \ required values\n     after traps, followed by optional values read from the\
    \ data tree\n     feels a bit cumbersome.  It would be nice if all values were\
    \ in the\n     same data space.\n     Several readers have suggested it might\
    \ make more sense to keep TCP\n     connection parameters on a per-connection\
    \ basis rather than\n     globally.\n     The method for specifying the TCP round-trip\
    \ time algorithm needs\n     to be refined.  The expression syntax should be sufficiently\n\
    \     general that all round-trip-time-related algorithms (e.g., those\n     for\
    \ time or routing protocols) can be expressed in it.\n     Much more research\
    \ could be done into what information needs to be\n     gathered to effectively\
    \ monitor a network.\n"
