- title: __initial_text__
  contents:
  - "         RFC 802: The ARPANET 1822L Host Access Protocol\n                  \
    \       Andrew G. Malis\n                     Netmail: malis@bbn-unix\n      \
    \            Bolt Beranek and Newman Inc.\n                          November\
    \ 1981\n                        Table of Contents\n1   INTRODUCTION..........................................\
    \ 1\n2   THE ARPANET 1822L HOST ACCESS PROTOCOL................ 4\n2.1   Addresses\
    \ and Names................................. 6\n2.2   Name Authorization and Effectiveness................\
    \ 8\n2.3   Uncontrolled Messages.............................. 14\n2.4   The Short-Blocking\
    \ Feature......................... 15\n2.4.1   Host Blocking....................................\
    \ 16\n2.4.2   Reasons for Host Blockage........................ 19\n2.5   Establishing\
    \ Host-IMP Communications............... 22\n3   1822L LEADER FORMATS.................................\
    \ 25\n3.1   Host-to-IMP 1822L Leader Format.................... 26\n3.2   IMP-to-Host\
    \ 1822L Leader Format.................... 34\n4   REFERENCES...........................................\
    \ 42\n                              - i -\n                             FIGURES\n\
    1822 Address Format....................................... 6\n1822L Name Format.........................................\
    \ 7\n1822L Address Format...................................... 7\nCommunications\
    \ between different host types.............. 13\nHost-to-IMP 1822L Leader Format..........................\
    \ 27\nNDM Message Format....................................... 30\nIMP-to-Host\
    \ 1822L Leader Format.......................... 35\n                         \
    \    - ii -\n1  INTRODUCTION\nThis document proposes two major changes to the\
    \  current  ARPANET\nhost  access  protocol.  The first change will allow hosts\
    \ to use\nlogical addressing (i.e., host addresses that are independent  of\n\
    their  physical location on the ARPANET) to communicate with each\nother, and\
    \ the second will allow a host to shorten the amount  of\ntime  that  it  may\
    \  be  blocked  by  its IMP after it presents a\nmessage to the network (currently,\
    \  the  IMP  can  block  further\ninput from a host for up to 15 seconds).\nThe\
    \ new host access protocol is known as the ARPANET  1822L  (for\nLogical)  Host\
    \  Access Protocol, and it represents an addition to\nthe current ARPANET 1822\
    \ Host Access Protocol, which is described\nin  sections  3.3  and  3.4 of BBN\
    \ Report 1822 [1].  Although the\n1822L protocol uses different  Host-IMP  leaders\
    \  than  the  1822\nprotocol,  hosts  using  either  protocol can readily communicate\n\
    with each other (the IMPs handle the translation automatically).\nThe new option\
    \ for shortening the host blocking timeout is called\nthe short-blocking feature,\
    \ and it replaces the non-blocking host\ninterface described in section 3.7 of\
    \ Report 1822.  This  feature\nwill  be  available  to  all  hosts  on  C/30 \
    \ IMPs (see the next\nparagraph), regardless of whether they  use  the  1822 \
    \ or  1822L\nprotocol.\n                              - 1 -\nThere is one major\
    \ restriction  to  the  new  capabilities  being\ndescribed.   Both  the  1822L\
    \  protocol  and  the  short-blocking\nfeature will be implemented on C/30 IMPs\
    \ only, and will therefore\nonly be useable by hosts connected to C/30 IMPs, as\
    \ the Honeywell\nand Pluribus IMPs do not have sufficient memory to hold  the\
    \  new\nprograms  and  tables.   This restriction also means that logical\naddressing\
    \ cannot be used to address a host on  a  non-C/30  IMP.\nHowever, the ARPANET\
    \ will shortly be completely converted to C/30\nIMPs, and at that time this  restriction\
    \  will  no  longer  be  a\nproblem.\nI will try to keep my terminology consistent\
    \ with  that  used  in\nReport  1822, and will define new terms when they are\
    \ first used.\nOf course, familiarity with Report 1822 (section 3 in particular)\n\
    is assumed.\nThis document  makes  many  references  to  Report  1822.   As  a\n\
    convenient  abbreviation,  I  will  use  \"see 1822(x)\" instead of\n\"please\
    \ refer to Report 1822, section x, for further details\".\nThis document is a\
    \ proposal, not a description of an  implemented\nsystem.   Thus,  described \
    \ features  are subject to change based\nupon responses to this  document  and\
    \  restrictions  that  become\nevident  during  implementation.   However,  any\
    \ such changes are\nexpected to be minor.  A new RFC will be made available once\
    \  the\n                              - 2 -\nimplementation  is  complete containing\
    \ the actual as-implemented\ndescription.\nFinally, I would like to thank Dr.\
    \ Eric C. Rosen, who wrote  most\nof section 2.4, and James G. Herman, Dr. Paul\
    \ J. Santos Jr., John\nF.  Haverty, and Robert M. Hinden, all of  BBN,  who  contributed\n\
    many of the ideas found herein.\n                              - 3 -\n2  THE ARPANET\
    \ 1822L HOST ACCESS PROTOCOL\nThe ARPANET  1822L  Host  Access  Protocol,  which\
    \  replaces  the\nARPANET  1822  Host  Access  Protocol  described  in Report\
    \ 1822,\nsections 3.3 and 3.4, allows a host to use logical addressing  to\ncommunicate\
    \  with other hosts on the ARPANET.  Basically, logical\naddressing allows hosts\
    \ to refer to each  other  using  an  1822L\nname  (see section 2.1) which is\
    \ independent of a host's physical\nlocation in the network.  IEN 183 (also published\
    \ as  BBN  Report\n4473)  [2]  gives  the  use  of  logical  addressing considerable\n\
    justification.  Among the advantages it cites are:\no The ability to refer to\
    \ each host on  the  network  by  a  name\n  independent of its location on the\
    \ network.\no Allowing different hosts to share  the  same  host  port  on  a\n\
    \  time-division basis.\no Allowing a host to use multi-homing (where a single\
    \  host  uses\n  more than one port to communicate with the network).\no And allowing\
    \ several hosts that provide  the  same  service  to\n  share the same name.\n\
    The main differences between the 1822 and 1822L protocols are the\nformat of the\
    \ leaders that are used to introduce messages between\n                      \
    \        - 4 -\na host and an IMP, and the specification in those leaders of \
    \ the\nsource  and/or  destination  host(s).   Hosts  have the choice of\nusing\
    \ the 1822 or the 1822L protocol.  When a host comes up on an\nIMP,  it declares\
    \ itself to be an 1822 host or an 1822L host host\nby the type of NOP message\
    \ (see section 3.1) it uses.   Once  up,\nhosts  can  switch  from  one protocol\
    \ to the other by issuing an\nappropriate NOP.  Hosts that do not use the 1822L\
    \  protocol  will\nstill  be  addressable by and can communicate with hosts that\
    \ do,\nand vice-versa.\nAnother difference between the two protocols  is  that\
    \  the  1822\nleaders are symmetric, while the 1822L leaders are not.  The term\n\
    symmetric means that in the 1822 protocol, the exact same  leader\nformat  is\
    \ used for messages in both directions between the hosts\nand IMPs.  For example,\
    \ a leader sent from a host  over  a  cable\nthat  was  looped  back onto itself\
    \ (via a looping plug or faulty\nhardware) would arrive back at the host and appear\
    \ to be a  legal\nmessage  from  a  real host (the destination host of the original\n\
    message).  In contrast, the 1822L headers are not symmetric,  and\na  host  can\
    \  detect  if  the  connection to its IMP is looped by\nreceiving a message with\
    \ the wrong leader  format.   This  allows\nthe host to take appropriate action\
    \ upon detection of the loop.\n                              - 5 -\n2.1  Addresses\
    \ and Names\nThe 1822 protocol defines one form of host specification, and the\n\
    1822L  protocol  defines  two additional ways to identify network\nhosts.  These\
    \ three forms are 1822 addresses,  1822L  names,  and\n1822L addresses.\n1822\
    \ addresses are  the  24-bit  host  addresses  found  in  1822\nleaders.  They\
    \ have the following format:\n       1              8 9                      \
    \        24\n      +----------------+---------------------------------+\n    \
    \  |                |                                 |\n      |  Host number\
    \   |           IMP number            |\n      |                |            \
    \                     |\n      +----------------+---------------------------------+\n\
    \                 Figure 1. 1822 Address Format\nThese fields are quite large,\
    \ and the ARPANET will never use more\nthan  a  fraction of the available address\
    \ space.  1822 addresses\nare used in 1822 leaders only.\n1822L names are 16-bit\
    \ unsigned numbers that serve as  a  logical\nidentifier  for  one  or  more \
    \ hosts.   1822L  names have a much\nsimpler format:\n                       \
    \       - 6 -\n                1                             16\n            \
    \   +--------------------------------+\n               |                     \
    \           |\n               |           1822L name           |\n           \
    \    |                                |\n               +--------------------------------+\n\
    \                  Figure 2. 1822L Name Format\nThe 1822L names are just 16-bit\
    \  unsigned  numbers,  except  that\nbits  1  and  2 are not both zeros (see below).\
    \  This allows over\n49,000 hosts to be specified.\n1822 addresses cannot be used\
    \ in 1822L leaders, but there may  be\na  requirement for an 1822L host to be\
    \ able to address a specific\nphysical host port or IMP fake host.  1822L  addresses\
    \  are  used\nfor  this  function.   1822L addresses form a subset of the 1822L\n\
    name space, and have both bits 1 and 2 off.\n               1   2  3         \
    \ 8 9             16\n             +---+---+------------+----------------+\n \
    \            |   |   |            |                |\n             | 0 | 0 | \
    \  host #   |   IMP number   |\n             |   |   |            |          \
    \      |\n             +---+---+------------+----------------+\n             \
    \    Figure 3. 1822L Address Format\n                              - 7 -\nThis\
    \ format gives 1822L hosts the  ability  to  directly  address\nhosts  0-59  at\
    \  IMPs 1-255 (IMP 0 does not exist).  Host numbers\n60-63 are reserved for addressing\
    \ the four  fake  hosts  at  each\nIMP.\n2.2  Name Authorization and Effectiveness\n\
    Every host on a C/30 IMP, regardless of whether it is  using  the\n1822 or 1822L\
    \ protocol to access the network, will be assigned at\nleast one 1822L name (logical\
    \ address).  Other 1822L  hosts  will\nuse  this name to address the host, wherever\
    \ it may be physically\nlocated.  Because of the implementation constraints mentioned\
    \  in\nthe introduction, hosts on non-C/30 IMPs cannot be assigned 1822L\nnames.\
    \  To circumvent this restriction, however, 1822L hosts  can\nuse  1822L addresses\
    \ to access all other hosts on the network, no\nmatter where they reside.\nAt\
    \ this point, several questions  arise:   How  are  these  names\nassigned,  how\
    \  do  they  become  known  to  the  IMPs  (so  that\ntranslations to physical\
    \ addresses can be made), and how  do  the\nIMPs know which host is currently\
    \ using a shared port?  To answer\neach question in order:\n                 \
    \             - 8 -\nNames are assigned by a central network administrator.  When\
    \ each\nname  is  created, it is assigned to a host (or a group of hosts)\nat\
    \ one or more specific host ports.  The host(s) are  allowed  to\nreside at those\
    \ specific host ports, and nowhere else.  If a host\nmoves, it will keep the same\
    \ name, but the administrator  has  to\nupdate  the  central  database  to  reflect\
    \  the  new  host port.\nChanges to this database are  distributed  to  the  IMPs\
    \  by  the\nNetwork  Operations  Center  (NOC) at BBN.  For a while, the host\n\
    may be allowed to reside at either of (or both) the new  and  old\nports.   Once\
    \  the  correspondence between a name and one or more\nhosts ports where it may\
    \ be used has been made  official  by  the\nadministrator,   that  name  is  said\
    \  to  be  authorized.  1822L\naddresses, which actually  refer  to  physical\
    \  host  ports,  are\nalways authorized in this sense.\nOnce a host has been assigned\
    \ one or more names, it  has  to  let\nthe  IMPs  know  where it is and what name(s)\
    \ it is using.  There\nare two cases to consider, one for 1822L hosts  and  another\
    \  for\n1822  hosts.   The following discussion only pertains to hosts on\nC/30\
    \ IMPs.\nWhen an IMP sees an 1822L host come up on a host  port,  the  IMP\nhas\
    \  no way of knowing which host has just come up (several hosts\nmay share the\
    \ same port, or one host may prefer to  be  known  by\n                      \
    \        - 9 -\ndifferent  names  at different times).  This requires the host\
    \ to\nlet the IMP know what is happening before it  can  actually  send\nand \
    \ receive messages.  This function is performed by a new host-\nto-IMP message,\
    \ the Name Declaration Message (NDM),  which  lists\nthe  names  that  the  host\
    \  would  like to be known by.  The IMP\nchecks its tables to see if each of the\
    \ names is authorized,  and\nsends an NDM Reply to the host saying which names\
    \ in the list can\nbe used for sending and receiving messages (i.e., which names\
    \ are\neffective). A host can also use an NDM message to change its list\nof effective\
    \ addresses (it can add to and delete from  the  list)\nat  any  time.  The only\
    \ constraint on the host is that any names\nit  wishes  to  use  can  become \
    \ effective  only  if  they   are\nauthorized.\nIn the second case, if a host\
    \ comes up on a C/30  IMP  using  the\n1822 protocol, the IMP automatically makes\
    \ the first name the IMP\nfinds in its tables for that host become effective.\
    \   Thus,  even\nthough  the host is using the 1822 protocol, it can still receive\n\
    messages from 1822L hosts via its 1822L name.  Of course, it  can\nalso receive\
    \ messages from an 1822L host via its 1822L address as\nwell.   (Remember,  the\
    \  distinction  between  1822L  names   and\naddresses  is that the addresses\
    \ correspond to physical locations\non  the  network,  while   the   names   are\
    \   strictly   logical\nidentifiers).   The  IMPs translate between the different\
    \ leaders\n                             - 10 -\nand send the proper leader in\
    \ each case (more on this below).\nThe third question above has by now already\
    \ been answered.   When\nan  1822L  host comes up, it uses the NDM message to\
    \ tell the IMP\nwhich host it is (which names it is known by).  Even if this is\
    \ a\nshared port, the IMP knows which host is currently connected.\nWhenever a\
    \ host goes down, its names  automatically  become  non-\neffective.   When it\
    \ comes back up, it has to make them effective\nagain.\nSeveral hosts can share\
    \ the same 1822L name.  If more than one of\nthese  hosts  is  up  at the same\
    \ time, any messages sent to that\n1822L name will be delivered to just one  of\
    \  the  hosts  sharing\nthat  name,  and  a RFNM will be returned as usual.  However,\
    \ the\nsending host will  not  receive  any  indication  of  which  host\nreceived\
    \  the  message,  and subsequent messages to that name are\nnot guaranteed to\
    \ be sent to the  same  host.   Typically,  hosts\nproviding  exactly  the  same\
    \  service could share the same 1822L\nname in this manner.\nSimilarly, when a\
    \ host is multi-homed, the same  1822L  name  may\nrefer  to  more  than  one\
    \  host  port (all connected to the same\nhost).  If the host is up on only one\
    \ of those ports,  that  port\nwill  be  used for all messages addressed to it.\
    \  However, if the\n                             - 11 -\nhost were up  on  more\
    \  than  one  port,  the  message  would  be\ndelivered  over  just  one  of \
    \ those ports, and the subnet would\nchoose which port to use.  This port selection\
    \ could change  from\nmessage  to  message.   If  a  host wanted to insure that\
    \ certain\nmessages were delivered to it on specific ports,  these  messages\n\
    could  use  either  the  port's 1822L address or a specific 1822L\nname that referred\
    \ to that port alone.\nSome further details are required on communications between\
    \  1822\nand  1822L  hosts.   Obviously, when 1822 hosts converse, or when\n1822L\
    \ hosts converse, no conversions between leaders and  address\nformats  are  required.\
    \   However,  this becomes more complicated\nwhen 1822 and 1822L hosts converse\
    \ with each other.\nThe   following   figure   illustrates   how   these   addressing\n\
    combinations  are  handled,  showing  how  each  type of host can\naccess every\
    \ other type of host.  There are three types of hosts:\n\"1822  on  C/30\"  signifies\
    \  an  1822 host that is on a C/30 IMP,\n\"1822L\" signifies an 1822L host (on\
    \ a C/30  IMP),  and  \"1822  on\nnon-C/30\"  signifies  a  host  on  an  non-C/30\
    \ IMP (which cannot\nsupport the 1822L protocol).  The table entry shows the \
    \ protocol\nand  host address format(s) that the source host can use to reach\n\
    the destination host.\n                             - 12 -\n                 \
    \           Destination Host\n  Source\n  Host    | 1822 on C/30   | 1822L   \
    \       | 1822 on non-C/30\n  --------+----------------+----------------+-----------------\n\
    \          |                |                |\n  1822 on | 1822           | 1822\
    \           | 1822\n  C/30    |                | (note 1)       |\n          |\
    \                |                |\n  --------+----------------+----------------+-----------------\n\
    \          |                |                |\n          | 1822L, using   | 1822L,\
    \ using   | 1822L, using\n  1822L   | 1822L name or  | 1822L name or  | 1822L\
    \ address\n          |address (note 2)| address        | only (note 2)\n     \
    \     |                |                |\n  --------+----------------+----------------+-----------------\n\
    \          |                |                |\n  1822 on | 1822           | 1822\
    \           | 1822\n  non-C/30|                | (note 1)       |\n          |\
    \                |                |\n  --------+----------------+----------------+-----------------\n\
    \  Note 1: The message is presented  to  the  destination  host\n          with\
    \  an 1822L leader containing the 1822L addresses\n          of the source  and\
    \  destination  hosts.   If  either\n          address  cannot be encoded as an\
    \ 1822L address, then\n          the message is not delivered and and  error \
    \ message\n          is sent to the source host.\n  Note 2: The message is presented\
    \  to  the  destination  host\n          with  an  1822 leader containing the\
    \ 1822 address of\n          the source host.\n     Figure 4. Communications between\
    \ different host types\n                             - 13 -\n2.3  Uncontrolled\
    \ Messages\nUncontrolled messages (see 1822(3.6)) present  a  unique  problem\n\
    for  the  1822L  protocol.  Uncontrolled messages use none of the\nnormal ordering\
    \ and error-control mechanisms in the IMP,  and  do\nnot  use  the  normal  subnetwork\
    \  connection  facilities.   As a\nresult, uncontrolled messages need to carry\
    \ all of their overhead\nwith  them, including source and destination addresses.\
    \  If 1822L\naddresses  are  used  when  sending  an   uncontrolled   message,\n\
    additional information is now required by the subnetwork when the\nmessage is\
    \ transferred to the destination IMP.  This  means  that\nless  host-to-host \
    \ data  can be contained in the message than is\npossible between 1822 hosts.\n\
    Uncontrolled messages  that  are  sent  between  1822  hosts  may\ncontain  not\
    \  more  than 991 bits of data.  Uncontrolled messages\nthat are sent to and/or\
    \ from 1822L hosts are limited to  32  bits\nless,  or  not  more  than  959 \
    \ bits.  Messages that exceed this\nlength will result in an error indication\
    \ to the  host,  and  the\nmessage  will  not  be sent.  This error indication\
    \ represents an\nenhancement to the previous level of service provided by the\
    \ IMP,\nwhich  would  simply  discard an overly long uncontrolled message\nwithout\
    \ notification.\n                             - 14 -\nOther enhancements that\
    \ are  provided  for  uncontrolled  message\nservice  are  a  notification  to\
    \ the host of any message-related\nerrors that are detected by the host's IMP\
    \ when it  receives  the\nmessage.   A  host  will  be  notified if an uncontrolled\
    \ message\ncontains an error in the 1822L name specification,  such  as  the\n\
    name  not being authorized or effective, or if the remote host is\nunreachable\
    \ (which is  indicated  by  none  of  its  names  being\neffective),  or  if \
    \ network  congestion  control  throttled  the\nmessage before it left the source\
    \ IMP.   The  host  will  not  be\nnotified  if  the  uncontrolled  message was\
    \ lost for some reason\nonce it was transmitted by the source IMP.\n2.4  The Short-Blocking\
    \ Feature\nThe short-blocking feature of the 1822  and  1822L  protocols  is\n\
    designed  to  allow a host to present messages to the IMP without\ncausing the\
    \ IMP to not accept further messages from the host  for\nlong amounts of time\
    \ (up to 15 seconds).  It is a replacement for\nthe non-blocking host interface\
    \ described in 1822(3.7), and  that\ndescription should be ignored.\n        \
    \                     - 15 -\n2.4.1  Host Blocking\nMost commonly, when a source\
    \ host submits a message  to  an  IMP,\nthe  IMP  immediately  processes that\
    \ message and sends it on its\nway to its destination host.  Sometimes, however,\
    \ the IMP is  not\nable  to  process  the message immediately.  Processing a message\n\
    requires a significant number of resources, and when the  network\nis heavily\
    \ loaded, there can sometimes be a long delay before the\nnecessary resources\
    \ become available.  In  such  cases,  the  IMP\nmust  make  a decision as to\
    \ what to do while it is attempting to\ngather the resources.\nOne possibility\
    \ is for the IMP to stop  accepting  messages  from\nthe  source  host  until\
    \  it has gathered the resources needed to\nprocess the message just submitted.\
    \  This strategy  is  known  as\nblocking  the  host,  and is basically the strategy\
    \ that has been\nused in the ARPANET up to the present.  When  a  host  submits\
    \  a\nmessage  to  an  IMP, all further transmissions from that host to\nthat\
    \ IMP are blocked until the message can be processed.\nIt is important to note,\
    \ however, that not all  messages  require\nthe  same  set  of resources in order\
    \ to be processed by the IMP.\nThe particular set of resources needed will depend\
    \ on the message\ntype, the message length, and the destination host of the message\n\
    (see below).  Therefore, although it might take a  long  time  to\n          \
    \                   - 16 -\ngather  the  resources needed to process some particular\
    \ message,\nit might take only a short time to gather the resources needed to\n\
    process  some  other  message.   This  fact exposes a significant\ndisadvantage\
    \ in the strategy of blocking the host.  A host  which\nis  blocked may have many\
    \ other messages to submit which, if only\nthey could be submitted, could be processed\
    \ immediately.   It  is\n\"unfair\"  for  the IMP to refuse to accept these message\
    \ until it\nhas gathered the resources for  some  other,  unrelated  message.\n\
    Why  should messages for which the IMP has plenty of resources be\ndelayed for\
    \ an arbitrarily long amount of time just  because  the\nIMP lacks the resources\
    \ needed for some other message?\nA simple way to alleviate the problem would\
    \ be to place  a  limit\non  the  amount of time during which a host can be blocked.\
    \  This\namount  of  time  should  be  long  enough  so  that,   in   most\ncircumstances,\
    \  the  IMP  will  be  able  to gather the resources\nneeded to process the message\
    \ within the given time period.   If,\nhowever, the resources cannot be gathered\
    \ in this period of time,\nthe IMP will flush the message, sending a  reply  to\
    \  the  source\nhost   indicating   that  the  message  was  not  processed, \
    \ and\nspecifying the reason that it could not be  processed.   However,\nthe\
    \  resource gathering process would continue.  The intention is\nthat the host\
    \  resubmit  the  message  in  a  short  time,  when,\nhopefully,   the   resource\
    \   gathering   process  has  concluded\n                             - 17 -\n\
    successfully.   In  the  meantime,  the  host  can  submit  other\nmessages, \
    \ which may be processed sooner.  This strategy does not\neliminate the phenomenon\
    \ of host blocking, but  only  limits  the\ntime  during  which  a  host is blocked.\
    \  This shorter time limit\nwill generally fall somewhere in the range of 100\
    \ milliseconds to\n2  seconds,  with  its value possibly depending on the reason\
    \ for\nthe blocking.\nNote, however, that there  is  a  disadvantage  to  having\
    \  short\nblocking  times.  Let us say that the IMP accepts a message if it\n\
    has all the resources needed to process it.  The ARPANET provides\na  sequential\
    \  delivery  service,  whereby messages with the same\npriority, source host,\
    \ and destination host are delivered to  the\ndestination  host in the same order\
    \ as they are accepted from the\nsource host.  With short blocking times, however,\
    \  the  order  in\nwhich  the  IMP accepts messages from the source host need\
    \ not be\nthe same as  the  order  in  which  the  source  host  originally\n\
    submitted  the messages.  Since the two data streams (one in each\ndirection)\
    \ between the host and the IMP are not synchronized, the\nhost  may  not  receive\
    \ the reply to a rejected message before it\nsubmits subsequent messages of the\
    \ same  priority  for  the  same\ndestination host.  If a subsequent message is\
    \ accepted, the order\nof acceptance differs from the order of original submission,\
    \  and\nthe ARPANET will not provide the same type of sequential delivery\n  \
    \                           - 18 -\nthat it has in the past.\nUp to now, type\
    \ 0 (regular)  messages  have  only  had  sub-types\navailable  to  request the\
    \ standard blocking timeout.  The short-\nblocking feature makes available new\
    \  sub-types  that  allow  the\nhost  to  request  messages to be short-blocking,\
    \ i.e. only cause\nthe host to be blocked for a short amount of time if the  message\n\
    cannot be immediately processed.   See section 3.1 for a complete\nlist of the\
    \ available sub-types.\nIf sequential delivery by the subnet is a strict requirement,\
    \  as\nwould  be  the  case  for  messages  produced  by NCP, the short-\nblocking\
    \ feature cannot be used.  For messages produced  by  TCP,\nhowever,  the  use\
    \  of  the short-blocking feature is allowed and\nrecommended.\n2.4.2  Reasons\
    \ for Host Blockage\nThere are a number of reasons why a message could  cause\
    \  a  long\nblockage  in  the  IMP,  which would result in the rejection of a\n\
    short-blocking message.  The IMP  signals  this  rejection  of  a\nshort-blocking\
    \ message by using the Incomplete Transmission (Type\n9) message, using the sub-type\
    \ field to  indicate  which  of  the\nabove  reasons  caused the rejection of\
    \ the message.  See section\n                             - 19 -\n3.2 for a summary\
    \ of the Incomplete Transmission  message  and  a\ncomplete  list of its sub-types.\
    \  The sub-types that apply to the\nshort-blocking feature are:\n6.  Connection\
    \ setup-delay: Although the IMP  presents  a  simple\n    message-at-a-time  interface\
    \  to  the  host,  it  provides an\n    internal  connection-oriented  (virtual\
    \   circuit)   service,\n    except  in  the  case  of  uncontrolled messages\
    \ (see section\n    2.3).   Two  messages  are  considered  to  be  on  the  same\n\
    \    connection  if they have the same source host (i.e., they are\n    submitted\
    \ to the same IMP over the same host interface),  the\n    same priority, and\
    \ the same destination host name or address.\n    The subnet maintains internal\
    \ connection set-up and tear-down\n    procedures.   Connections  are set up as\
    \ needed, and are torn\n    down  only  after  a  period  of  inactivity.   Occasionally,\n\
    \    network  congestion or resource shortage will cause a lengthy\n    delay\
    \ in connection set-up.  During this period, no  messages\n    for  that  connection\
    \ can be accepted, but other messages can\n    be accepted.\n7.  End-to-end flow\
    \  control:  For  every  message  that  a  host\n    submits  to  an  IMP  (except\
    \  uncontrolled messages) the IMP\n    eventually  returns  a  reply  to  the\
    \  host  indicating  the\n    disposition  of  the  message.   Between  the  time\
    \  that the\n                             - 20 -\n    message is submitted and\
    \  the  time  the  host  receives  the\n    reply,  the  message  is  said to\
    \ be outstanding. The ARPANET\n    allows  only  eight  outstanding  messages\
    \   on   any   given\n    connection.   If  there  are  eight outstanding messages\
    \ on a\n    given connection, and a ninth is  submitted,  it  cannot  the\n  \
    \  accepted.  If  a message is refused because its connection is\n    blocked\
    \ due to flow control, messages  on  other  connections\n    can still be accepted.\n\
    \    End-to-end flow control is the  most  common  cause  of  host\n    blocking\
    \ in the ARPANET at present.\n8.  Destination IMP buffer space shortage: If the\
    \ host submits  a\n    message  of  more  than  1008  bits  (exclusive of the\
    \ 96-bit\n    leader), buffer space at the destination IMP must be reserved\n\
    \    before  the  message  can  be  accepted.  Buffer space at the\n    destination\
    \ IMP is always reserved on a per-connection basis.\n    If  the  destination\
    \  IMP  is  heavily loaded, there may be a\n    lengthy wait for the buffer space;\
    \  this  is  another  common\n    cause  of  blocking  in  the  present  ARPANET.\
    \  Messages are\n    rejected  for  this  reason  based  on   their   length \
    \  and\n    connection;  messages  of  1008 or fewer bits or messages for\n  \
    \  other connections may still be acceptable.\n                             -\
    \ 21 -\n9.  Congestion control: A message may be refused for  reasons  of\n  \
    \  congestion  control if the path via the intermediate IMPs and\n    lines to\
    \ the destination IMP is too heavily loaded to  handle\n    additional  traffic.\
    \   Messages  to other destinations may be\n    acceptable, however.\n10.  Local\
    \ resource shortage: Sometimes the source IMP itself  is\n    short  of buffer\
    \ space, table entries, or some other resource\n    that it needs to accept a\
    \ message.  Unlike the other  reasons\n    for message rejection, this resource\
    \ shortage will affect all\n    messages equally,  except  for  uncontrolled \
    \ messages.   The\n    message's size or connection is not relevant.\nThe short-blocking\
    \ feature is available  to  all  hosts  on  C/30\nIMPs,  whether they are using\
    \ the 1822 or 1822L protocol, through\nthe use of Type 0, sub-type 1 and 2 messages.\
    \  A host using these\nsub-types  should  be  prepared  to  correctly  handle\
    \ Incomplete\nTransmission messages from the IMP.\n2.5  Establishing Host-IMP\
    \ Communications\nWhen a host comes up on an IMP, or after there has been  a \
    \ break\nin   the  communications  between  the  host  and  its  IMP  (see\n1822(3.2)),\
    \ the orderly flow of messages between the host and the\n                    \
    \         - 22 -\nIMP  needs  to  be properly (re)established.  This allows the\
    \ IMP\nand host to recover from most any failure  in  the  other  or  in\ntheir\
    \ communications path, including a break in mid-message.\nThe first messages that\
    \ a host should send to its IMP  are  three\nNOP  messages.   Three  messages\
    \  are  required to insure that at\nleast one message will be properly read by\
    \ the IMP (the first NOP\ncould be concatenated to a previous message if communications\
    \ had\nbeen broken in mid-stream, and the third provides redundancy  for\nthe\
    \   second).    These   NOPs   serve  several  functions:  they\nsynchronize the\
    \ IMP with the host, they tell  the  IMP  how  much\npadding  the  host  requires\
    \  between  the message leader and its\nbody, and they also tell the IMP whether\
    \ the host will  be  using\n1822 or 1822L leaders.\nSimilarly, the IMP will send\
    \ three  NOPs  to  the  host  when  it\ndetects  that  the host has come up. \
    \ Actually, the IMP will send\nsix NOPs, alternating three 1822  NOPs  with  three\
    \  1822L  NOPs.\nThus, the host will see three NOPs no matter which protocol it\
    \ is\nusing.   The  NOPs  will  be  followed  by  two  Interface  Reset\nmessages,\
    \  one of each style.  If the IMP receives a NOP from the\nhost while the above\
    \ sequence is occurring,  the  IMP  will  only\nsend  the  remainder  of  the\
    \ NOPs and the Interface Reset in the\nproper style.  The 1822 NOPs will contain\
    \ the 1822 address of the\n                             - 23 -\nhost interface,\
    \ and the 1822L NOPs will contain the corresponding\n1822L address.\nOnce the\
    \ IMP  and  the  host  have  sent  each  other  the  above\nmessages, regular\
    \ communications can commence.  See 1822(3.2) for\nfurther details concerning\
    \ the ready line,  host  tardiness,  and\nother issues.\n                    \
    \         - 24 -\n3  1822L LEADER FORMATS\nThe following sections describe the\
    \ formats of the  leaders  that\nprecede  messages  between  an 1822L host and\
    \ its IMP.  They were\ndesigned to be as compatible with the 1822 leaders  as\
    \  possible.\nThe  second,  fifth,  and  sixth  words  are identical in the two\n\
    leaders, and all  of  the  existing  functionality  of  the  1822\nleaders has\
    \ been retained.  The first difference one will note is\nin the first word.  The\
    \ 1822 New Format Flag is now also used  to\nidentify  the  two  types of 1822L\
    \ leaders, and the Handling Type\nhas been moved to the second byte.  The third\
    \  and  fourth  words\ncontain the Source and Destination 1822L Name, respectively.\n\
    \                             - 25 -\n3.1  Host-to-IMP 1822L Leader Format\n \
    \              1      4 5      8 9             16\n              +--------+--------+----------------+\n\
    \              |        |  1822L |                |\n              | Unused |\
    \  H2I   | Handling Type  |\n              |        |  Flag  |               \
    \ |\n              +--------+--------+----------------+\n               17   \
    \ 20 21 22 24 25            32\n              +--------+-+------+----------------+\n\
    \              |        |T|Leader|                |\n              | Unused |R|Flags\
    \ |  Message Type  |\n              |        |C|      |                |\n   \
    \           +--------+-+------+----------------+\n               33          \
    \                    48\n              +----------------------------------+\n\
    \              |                                  |\n              |         \
    \  Source Host            |\n              |                                 \
    \ |\n              +----------------------------------+\n               49   \
    \                           64\n              +----------------------------------+\n\
    \              |                                  |\n              |         Destination\
    \ Host         |\n              |                                  |\n       \
    \       +----------------------------------+\n               65              \
    \       76 77    80\n              +-------------------------+--------+\n    \
    \          |                         |        |\n              |       Message\
    \ ID        |Sub-type|\n              |                         |        |\n \
    \             +-------------------------+--------+\n               81        \
    \                      96\n              +----------------------------------+\n\
    \              |                                  |\n              |         \
    \     Unused              |\n              |                                 \
    \ |\n              +----------------------------------+\n           Figure 5.\
    \ Host-to-IMP 1822L Leader Format\n                             - 26 -\nBits 1-4:\
    \ Unused, must be set to zero.\nBits 5-8: 1822L Host-to-IMP Flag:\n     This field\
    \ is set to decimal 13 (1101 in binary).\nBits 9-16: Handling Type:\n     This\
    \  field  is  bit-coded  to  indicate  the   transmission\n     characteristics\
    \  of  the connection desired by the host. See\n     1822(3.3).\n     Bit 9: Priority\
    \ Bit:\n          Messages with this bit on will be treated  as  priority\n  \
    \        messages.\n     Bits 10-16: Unused, must be zero.\nBits 17-20: Unused,\
    \ must be zero.\nBit 21: Trace Bit:\n     If equal to one, this message is designated\
    \ for  tracing  as\n     it proceeds through the network.  See 1822(5.5).\nBits\
    \ 22-24: Leader Flags:\n     Bit 22: A flag available for use by  the  destination\
    \  host.\n          See 1822(3.3) for a description of its use by the IMP's\n\
    \          TTY fake host.\n     Bits 23-24: Reserved for future use, must be zero.\n\
    \                             - 27 -\nBits 25-32: Message Type:\n     Type 0:\
    \ Regular Message  -  All  host-to-host  communication\n          occurs  via\
    \  regular  messages, which have several sub-\n          types, found in bits\
    \ 77-80.  These sub-types are:\n          0: Standard - The IMP uses its full\
    \ message  and  error\n               control facilities, and host blocking (see\
    \ section\n               2.4) may occur.\n          1: Standard, short-blocking\
    \ - See section 2.4.\n          2: Uncontrolled, short-blocking - See section\
    \ 2.4.\n          3: Uncontrolled - The  IMP  will  perform  no  message-\n  \
    \             control  functions  for  this type of message, and\n           \
    \    network flow and congestion control  (see  section\n               2.4) \
    \ may  cause  loss  of  the message.  Also see\n               1822(3.6) and section\
    \ 2.3.\n          4-15: Unassigned.\n     Type 1: Error Without Message ID - See\
    \ 1822(3.3).\n     Type 2: Host Going Down - see 1822(3.3).\n     Type 3: Name\
    \ Declaration Message (NDM)  -  This  message  is\n          used by the host\
    \ to declare which of its 1822L names is\n          or is not effective (see section\
    \ 2.2), or to  make  all\n          of  its  names non-effective.  The first 16\
    \ bits of the\n          data portion of the NDM message, following  the  leader\n\
    \          and  any  padding,  contains  the  number of 1822L name\n         \
    \                    - 28 -\n          entries contained in the message.  This\
    \ is followed  by\n          the 1822L name entries, each 32 bits long, of which\
    \ the\n          first 16 bits is a 1822L name and the  second  16  bits\n   \
    \       contains  either  of  the  integers  zero or one.  Zero\n          indicates\
    \ that the name should not  be  effective,  and\n          one  indicates  that\
    \ the name should be effective.  The\n          IMP will reply with a NDM Reply\
    \  message  (see  section\n          3.2)  indicating  which  of the names are\
    \ now effective\n          and which are not.  Pictorially, a NDM message has\
    \  the\n          following   format  (including  the  leader,  which  is\n  \
    \        printed in hexadecimal):\n                             - 29 -\n     \
    \       1             16 17            32 33            48\n           +----------------+----------------+----------------+\n\
    \           |                |                |                |\n           |\
    \      0D00      |      0003      |      0000      |\n           |           \
    \     |                |                |\n           +----------------+----------------+----------------+\n\
    \            49            64 65            80 81            96\n           +----------------+----------------+----------------+\n\
    \           |                |                |                |\n           |\
    \      0000      |      0000      |      0000      |\n           |           \
    \     |                |                |\n           +----------------+----------------+----------------+\n\
    \            97           112 113          128 129          144\n           +----------------+----------------+----------------+\n\
    \           |                |                |                |\n           |\
    \  # of entries  |  1822L name #1 |     0 or 1     |\n           |           \
    \     |                |                |\n           +----------------+----------------+----------------+\n\
    \           145           160 161          176\n           +----------------+----------------+\n\
    \           |                |                |\n           |  1822L name #2 |\
    \     0 or 1     |       etc.\n           |                |                |\n\
    \           +----------------+----------------+\n                  Figure 6. NDM\
    \ Message Format\n          An  NDM  with  zero  entries  will  cause  all  current\n\
    \          effective names for the host to become non-effective.\n     Type 4:\
    \ NOP - This allows the IMP to  know  which  style  of\n          leader  the\
    \  host wishes to use.  A 1822L NOP signifies\n          that the host wishes\
    \ to use 1822L leaders, and an  1822\n          NOP signifies that the host wishes\
    \ to use 1822 leaders.\n          All of the other remarks concerning the NOP\
    \ message  in\n                             - 30 -\n          1822(3.3)  still\
    \  hold.   The  host should always issue\n          NOPs in groups of three to\
    \ insure proper  reception  by\n          the IMP.  Also see section 2.5 for a\
    \ further discussion\n          on the use of the NOP message.\n     Type 8: Error\
    \ with Message ID - see 1822(3.3).\n     Types 5-7,9-255: Unassigned.\nBits 33-48:\
    \ Source Host:\n     This field contains one of the  source  host's  1822L  names\n\
    \     (or,  alternatively,  the 1822L address of the host port the\n     message\
    \  is  being  sent   over).    This   field   is   not\n     automatically filled\
    \ in by the IMP, as in the 1822 protocol,\n     because the host may be known\
    \ by several names and may  wish\n     to use a particular name as the source\
    \ of this message.  All\n     messages from the same host need not use the  same\
    \  name  in\n     this  field.   Each  source  name, when used, is checked for\n\
    \     authorization, effectiveness, and actually belonging to this\n     host.\
    \  Messages using names that do not satisfy all of these\n     requirements will\
    \ not be delivered, and will instead  result\n     in  an  error  message being\
    \ sent back into the source host.\n     If the host places its 1822L  Address\
    \  in  this  field,  the\n     address is checked to insure that it actually represents\
    \ the\n     host port where the message originated.  If the  message  is\n   \
    \  destined for an 1822 host on a non-C/30 IMP, this field MUST\n            \
    \                 - 31 -\n     contain the source host's 1822L address  (see \
    \ Figure  4  in\n     section 2.2).\nBits 49-64: Destination Host:\n     This\
    \ field  contains  the  1822L  name  or  address  of  the\n     destination  host.\
    \   If it contains a name, the name will be\n     checked for effectiveness, with\
    \ an error message returned to\n     the  source  host  if  the  name  is  not\
    \ effective.  If the\n     message is destined for an 1822 host on a non-C/30\
    \ IMP, this\n     field MUST contain the destination host's 1822L address (see\n\
    \     Figure 4 in section 2.2).\nBits 65-76: Message ID:\n     This is a host-specified\
    \ identification used in all  type  0\n     and  type  8  messages, and is also\
    \ used in type 2 messages.\n     When used in type 0 messages, bits 65-72 are\
    \ also  known  as\n     the  Link  Field,  and  should  contain  values specified\
    \ in\n     Assigned  Numbers  [3]  appropriate  for  the   host-to-host\n    \
    \ protocol being used.\nBits 77-80: Sub-type:\n     This field is used as a modifier\
    \ by message types 0,  2,  4,\n     and 8.\n                             - 32\
    \ -\nBits 81-96: Unused, must be zero.\n                             - 33 -\n\
    3.2  IMP-to-Host 1822L Leader Format\n               1      4 5      8 9     \
    \        16\n              +--------+--------+----------------+\n            \
    \  |        |  1822L |                |\n              | Unused |  I2H   | Handling\
    \ Type  |\n              |        |  Flag  |                |\n              +--------+--------+----------------+\n\
    \               17    20 21 22 24 25            32\n              +--------+-+------+----------------+\n\
    \              |        |T|Leader|                |\n              | Unused |R|Flags\
    \ |  Message Type  |\n              |        |C|      |                |\n   \
    \           +--------+-+------+----------------+\n               33          \
    \                    48\n              +----------------------------------+\n\
    \              |                                  |\n              |         \
    \  Source Host            |\n              |                                 \
    \ |\n              +----------------------------------+\n               49   \
    \                           64\n              +----------------------------------+\n\
    \              |                                  |\n              |         Destination\
    \ Host         |\n              |                                  |\n       \
    \       +----------------------------------+\n               65              \
    \       76 77    80\n              +-------------------------+--------+\n    \
    \          |                         |        |\n              |       Message\
    \ ID        |Sub-type|\n              |                         |        |\n \
    \             +-------------------------+--------+\n               81        \
    \                      96\n              +----------------------------------+\n\
    \              |                                  |\n              |         \
    \ Message Length          |\n              |                                 \
    \ |\n              +----------------------------------+\n           Figure 7.\
    \ IMP-to-Host 1822L Leader Format\n                             - 34 -\nBits 1-4:\
    \ Unused and set to zero.\nBits 5-8: 1822L IMP-to-Host Flag:\n     This field\
    \ is set to decimal 14 (1110 in binary).\nBits 9-16: Handling Type:\n     This\
    \ has the value assigned by the source host (see  section\n     3.1).   This \
    \ field is only used in message types 0, 5-9, 11\n     and 15.\nBits 17-20: Unused\
    \ and set to zero.\nBit 21: Trace Bit:\n     If equal to one, the source host\
    \ designated this message for\n     tracing as it proceeds through the network.\
    \  See 1822(5.5).\nBits 22-24: Leader Flags:\n     Bit 22: Available as a destination\
    \ host flag.\n     Bits 23-24: Reserved for future use, set to zero.\nBits 25-32:\
    \ Message Type:\n     Type 0: Regular Message  -  All  host-to-host  communication\n\
    \          occurs  via  regular  messages, which have several sub-\n         \
    \ types.  The sub-type field (bits 77-80) is the same  as\n          sent in the\
    \ host-to-IMP leader (see section 3.1).\n     Type 1: Error in Leader - See 1822(3.4).\n\
    \                             - 35 -\n     Type 2: IMP Going Down - See 1822(3.4).\n\
    \     Type 3: NDM Reply - This is a reply to the  NDM  host-to-IMP\n         \
    \ message  (see  section  3.1).   It  will  have the same\n          number of\
    \ entries as the  NDM  message  that  is  being\n          replying  to,  and\
    \  each  listed  1822L  name  will  be\n          accompanied by a zero or a one.\
    \  A zero signifies  that\n          the  name  is  not  effective, and a one\
    \ means that the\n          name is now effective.\n     Type 4: NOP - The host\
    \ should discard this message.   It  is\n          used    during    initialization\
    \    of   the   IMP/host\n          communication.  The Destination Host field\
    \ will contain\n          the  1822L  Address of the host port over which the\
    \ NOP\n          is being sent.  All other fields are unused.\n     Type 5: Ready\
    \ for Next Message (RFNM) - See 1822(3.4).\n     Type 6: Dead Host Status - See\
    \ 1822(3.4).\n     Type 7: Destination Host or IMP Dead  (or  unknown)  -  This\n\
    \          message  is  sent  in  response  to  a  message  for  a\n         \
    \ destination which the IMP cannot reach.  The message to\n          the \"dead\"\
    \ destination is discarded.  See 1822(3.4) for\n          a complete list of the\
    \ applicable sub-types.   If  this\n          message  is in response to a standard\
    \ (type 0, sub-type\n          0 or 1) message, it will be followed  by  a  Dead\
    \  Host\n          Status  message,  which gives further information about\n \
    \                            - 36 -\n          the status of the dead host.  If\
    \  this  message  is  in\n          response  to  an uncontrolled (type 0, sub-type\
    \ 2 or 3)\n          message, only sub-type 1 (The destination host  is  not\n\
    \          up) will be used, and it will not be followed by a Dead\n         \
    \ Host Status message.\n     Type 8: Error in Data - See 1822(3.4).\n     Type\
    \ 9: Incomplete Transmission - The  transmission  of  the\n          named  message\
    \  was  incomplete  for  some  reason.  An\n          incomplete transmission\
    \ message is similar to  a  RFNM,\n          but  is  a  failure  indication \
    \ rather  than a success\n          indication.  This message is also used  by\
    \  the  short-\n          blocking feature to indicate that the named message\
    \ was\n          rejected because it would have caused to IMP  to  block\n   \
    \       the  host  for  a long amount of time.  See section 2.4\n          for\
    \ more details concerning the short-blocking feature.\n          The message's\
    \ sub-types are:\n          0: The destination host  did  not  accept  the  message\n\
    \               quickly enough.\n          1: The message was too long.\n    \
    \      2: The host took more than 15 seconds to  transmit  the\n             \
    \  message  to  the  IMP.  This time is measured from\n               the last\
    \ bit of the leader through the last bit of\n               the message.\n   \
    \                          - 37 -\n          3: The message was lost in the network\
    \ due  to  IMP  or\n               circuit failures.\n          4: The IMP could\
    \ not accept the entire  message  within\n               15 seconds because of\
    \ unavailable resources.  This\n               sub-type is only used in  response\
    \  to  non-short-\n               blocking  messages.   If  a short-blocking message\n\
    \               timed out, it will be responded to with one of the\n         \
    \      sub-types 6-10.\n          5: Source IMP I/O failure occurred  during \
    \ receipt  of\n               this message.\n          Sub-types 6-10 are all\
    \ issued in response to  a  short-\n          blocking  message that timed out\
    \ (would have caused the\n          host to become blocked for a long amount of\
    \ time).  The\n          sub-types are designed to give the host some indication\n\
    \          of why it timed out and what other messages would  also\n         \
    \ time  out.   See  section  2.4.2  for  further  details\n          concerning\
    \ each of these sub-types.\n          6: The message timed out because of  connection\
    \  set-up\n               delay.   Further  messages to the same host (if on\n\
    \               the same connection) may also be affected.\n          7: The message\
    \ timed out  because  of  end-to-end  flow\n               control.  Further messages\
    \ to the same host on the\n               same connection will also be affected.\n\
    \                             - 38 -\n          8: Destination IMP buffer shortage\
    \ caused  the  message\n               to  time  out.  This affects multi-packet\
    \ standard\n               messages  to  the  specified  host,  but   shorter\n\
    \               messages  or  messages  to hosts on other IMPs may\n         \
    \      not be affected.\n          9: Network congestion control caused the message\
    \ to  be\n               rejected.  Messages to hosts on other IMPs may not\n\
    \               be affected, however.\n          10: Local resource shortage kept\
    \  the  IMP  from  being\n               able  to  accept  the  message  within\
    \  the short-\n               blocking timeout period.\n          11-15: Unassigned.\n\
    \     Type 10: Interface Reset - See 1822(3.4).\n     Type 15: 1822L Name or Address\
    \ Error - This message is  sent\n          in  response  to  a  type  0  message\
    \  from a host that\n          contained an erroneous Source Host or Destination\
    \  Host\n          field.  Its sub-types are:\n          0: The Source Host 1822L\
    \ name is not authorized or  not\n               effective.\n          1: The\
    \ Source Host 1822L address  does  not  match  the\n               host port used\
    \ to send the message.\n          2: The Destination Host 1822L name is not authorized.\n\
    \          3: The Destination Host 1822L name  is  authorized  but\n         \
    \                    - 39 -\n               not  effective,  even though the named\
    \ host is up.\n               If the host were actually down, a type  7  message\n\
    \               would be returned, not a type 15.\n          4: The Source or\
    \  Destination  Host  field  contains  a\n               1822L  name,  but the\
    \ host being addressed is on a\n               non-C/30 IMP (see Figure 4 in section\
    \ 2.2).\n          5-15: Unassigned.\n     Types 11-14,16-255: Unassigned.\nBits\
    \ 33-48: Source Host:\n     For type 0 messages, this field contains the 1822L\
    \  name  or\n     address  of  the  host  that  originated  the  message.  All\n\
    \     replies to the message should be sent to the host  specified\n     herein.\
    \   For  message  types  5-9,  11  and  15, this field\n     contains the source\
    \ host field used in  a  previous  type  0\n     message sent by this host.\n\
    Bits 49-64: Destination Host:\n     For type 0 messages, this field contains the\
    \ 1822L  name  or\n     address  that  the  message  was  sent  to.  This allows\
    \ the\n     destination host to detect  how  it  was  specified  by  the\n   \
    \  source  host.   For message types 5-9, 11 and 15, this field\n     contains\
    \ the destination host field used in a previous  type\n     0 message sent by\
    \ this host.\n                             - 40 -\nBits 65-76: Message ID:\n \
    \    For message types 0, 5, 7-9, 11 and 15, this  is  the  value\n     assigned\
    \  by  the  source  host to identify the message (see\n     section 3.1).  This\
    \ field is also used by  message  types  2\n     and 6.\nBits 77-80: Sub-type:\n\
    \     This field is used as a modifier by message types 0-2,  4-7,\n     9, 11\
    \ and 15.\nBits 81-96: Message Length:\n     This field is contained in type 0\
    \ and type 3 messages  only,\n     and  is  the actual length in bits of the message\
    \ (exclusive\n     of leader, leader padding, and hardware padding) as computed\n\
    \     by the IMP.\n                             - 41 -\n4  REFERENCES\n[1]  Specifications\
    \ for the Interconnection of a Host and an IMP,\n     BBN Report 1822, May 1978\
    \ Revision.\n[2]  E. C. Rosen et. al., ARPANET Routing Algorithm Improvements,\n\
    \     IEN  183 (also published as BBN Report 4473, Vol. 1), August\n     1980,\
    \ pp. 55-107.\n[3]  J. Postel, Assigned Numbers, RFC 790, September 1981, p. 10.\n\
    \                             - 42 -\n                              INDEX\n1822......................................................\
    \ 4\n1822 address.............................................. 6\n1822 host.................................................\
    \ 5\n1822L..................................................... 4\n1822L address.............................................\
    \ 7\n1822L host................................................ 5\n1822L name................................................\
    \ 6\nauthorized................................................ 9\nblocking.................................................\
    \ 16\ncongestion control................................... 22, 39\nconnection...........................................\
    \ 20, 38\ndestination host..................................... 32, 40\neffective................................................\
    \ 10\nflow control......................................... 20, 38\nhanding type.........................................\
    \ 27, 35\nincomplete transmission message...................... 19, 37\nleader\
    \ flags......................................... 27, 35\nlink field...............................................\
    \ 32\nlogical addressing........................................ 4\nmessage ID...........................................\
    \ 32, 41\nmessage length........................................... 41\nmessage\
    \ type......................................... 28, 35\nmulti-homing..............................................\
    \ 4\nNDM.................................................. 10, 28\nNDM reply............................................\
    \ 10, 36\nNOC....................................................... 9\nNOP...........................................\
    \ 5, 22, 30, 36\noutstanding.............................................. 21\n\
    priority bit............................................. 27\nregular message......................................\
    \ 28, 35\nRFNM..................................................... 36\nshort-blocking\
    \ feature................................... 15\nshort-blocking message...............................\
    \ 19, 28\nsource host.......................................... 31, 40\nstandard\
    \ message......................................... 28\nsub-type.............................................\
    \ 32, 41\nsymmetric................................................. 5\ntrace\
    \ bit............................................ 27, 35\nuncontrolled message.................................\
    \ 14, 28\n                             - 43 -\n"
