- title: __initial_text__
  contents:
  - '                     IPv6 Flow Label Specification

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the IPv6 Flow Label field and the minimum\n\
    \   requirements for IPv6 nodes labeling flows, IPv6 nodes forwarding\n   labeled\
    \ packets, and flow state establishment methods.  Even when\n   mentioned as examples\
    \ of possible uses of the flow labeling, more\n   detailed requirements for specific\
    \ use cases are out of the scope for\n   this document.\n   The usage of the Flow\
    \ Label field enables efficient IPv6 flow\n   classification based only on IPv6\
    \ main header fields in fixed\n   positions.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6437.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  IPv6 Flow Label Specification  . . . . . . . . . . .\
    \ . . . . .  4\n   3.  Flow Labeling Requirements in the Stateless Scenario .\
    \ . . . .  5\n   4.  Flow State Establishment Requirements  . . . . . . . . .\
    \ . . .  7\n   5.  Essential Correction to RFC 2205 . . . . . . . . . . . . .\
    \ . .  7\n   6.  Security Considerations  . . . . . . . . . . . . . . . . . .\
    \ .  7\n     6.1.  Covert Channel Risk  . . . . . . . . . . . . . . . . . . .\
    \  8\n     6.2.  Theft and Denial of Service  . . . . . . . . . . . . . . .  8\n\
    \     6.3.  IPsec and Tunneling Interactions . . . . . . . . . . . . . 10\n  \
    \   6.4.  Security Filtering Interactions  . . . . . . . . . . . . . 11\n   7.\
    \  Differences from RFC 3697  . . . . . . . . . . . . . . . . . . 11\n   8.  Acknowledgements\
    \ . . . . . . . . . . . . . . . . . . . . . . . 11\n   9.  References . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 12\n     9.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . . . 12\n     9.2.  Informative References\
    \ . . . . . . . . . . . . . . . . . . 12\n   Appendix A.  Example 20-Bit Hash\
    \ Function  . . . . . . . . . . . . 14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   From the viewpoint of the network layer, a flow is a sequence\
    \ of\n   packets sent from a particular source to a particular unicast,\n   anycast,\
    \ or multicast destination that a node desires to label as a\n   flow.  From an\
    \ upper-layer viewpoint, a flow could consist of all\n   packets in one direction\
    \ of a specific transport connection or media\n   stream.  However, a flow is\
    \ not necessarily 1:1 mapped to a transport\n   connection.\n   Traditionally,\
    \ flow classifiers have been based on the 5-tuple of the\n   source address, destination\
    \ address, source port, destination port,\n   and the transport protocol type.\
    \  However, some of these fields may\n   be unavailable due to either fragmentation\
    \ or encryption, or locating\n   them past a chain of IPv6 extension headers may\
    \ be inefficient.\n   Additionally, if classifiers depend only on IP-layer headers,\
    \ later\n   introduction of alternative transport-layer protocols will be easier.\n\
    \   The usage of the 3-tuple of the Flow Label, Source Address, and\n   Destination\
    \ Address fields enables efficient IPv6 flow\n   classification, where only IPv6\
    \ main header fields in fixed positions\n   are used.\n   The flow label could\
    \ be used in both stateless and stateful\n   scenarios.  A stateless scenario\
    \ is one where any node that processes\n   the flow label in any way does not\
    \ need to store any information\n   about a flow before or after a packet has\
    \ been processed.  A stateful\n   scenario is one where a node that processes\
    \ the flow label value\n   needs to store information about the flow, including\
    \ the flow label\n   value.  A stateful scenario might also require a signaling\
    \ mechanism\n   to inform downstream nodes that the flow label is being used in\
    \ a\n   certain way and to establish flow state in the network.  For example,\n\
    \   RSVP [RFC2205] and General Internet Signaling Transport (GIST)\n   [RFC5971]\
    \ can signal flow label values.\n   The flow label can be used most simply in\
    \ stateless scenarios.  This\n   specification concentrates on the stateless model\
    \ and how it can be\n   used as a default mechanism.  Details of stateful models,\
    \ signaling,\n   specific flow state establishment methods, and their related\
    \ service\n   models are out of scope for this specification.  The basic\n   requirement\
    \ for stateful models is set forth in Section 4.\n   The minimum level of IPv6\
    \ flow support consists of labeling the\n   flows.  A specific goal is to enable\
    \ and encourage the use of the\n   flow label for various forms of stateless load\
    \ distribution,\n   especially across Equal Cost Multi-Path (ECMP) and/or Link\n\
    \   Aggregation Group (LAG) paths.  ECMP and LAG are methods to bond\n   together\
    \ multiple physical links used to procure the required\n   capacity necessary\
    \ to carry an offered load greater than the\n   bandwidth of an individual physical\
    \ link.  Further details are in a\n   separate document [RFC6438].  IPv6 source\
    \ nodes SHOULD be able to\n   label known flows (e.g., TCP connections and application\
    \ streams),\n   even if the node itself does not require any flow-specific treatment.\n\
    \   Node requirements for stateless flow labeling are given in Section 3.\n  \
    \ This document replaces [RFC3697] and Section 6 and Appendix A of\n   [RFC2460].\
    \  A rationale for the changes made is documented in\n   [RFC6436].  The present\
    \ document also includes a correction to\n   [RFC2205] concerning the flow label.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\"\
    , and\n   \"OPTIONAL\" in this document are to be interpreted as described in\n\
    \   [RFC2119].\n"
- title: 2.  IPv6 Flow Label Specification
  contents:
  - "2.  IPv6 Flow Label Specification\n   The 20-bit Flow Label field in the IPv6\
    \ header [RFC2460] is used by a\n   node to label packets of a flow.  A Flow Label\
    \ of zero is used to\n   indicate packets that have not been labeled.  Packet\
    \ classifiers can\n   use the triplet of Flow Label, Source Address, and Destination\n\
    \   Address fields to identify the flow to which a particular packet\n   belongs.\
    \  Packets are processed in a flow-specific manner by nodes\n   that are able\
    \ to do so in a stateless manner or that have been set up\n   with flow-specific\
    \ state.  The nature of the specific treatment and\n   the methods for flow state\
    \ establishment are out of scope for this\n   specification.\n   Flow label values\
    \ should be chosen such that their bits exhibit a\n   high degree of variability,\
    \ making them suitable for use as part of\n   the input to a hash function used\
    \ in a load distribution scheme.  At\n   the same time, third parties should be\
    \ unlikely to be able to guess\n   the next value that a source of flow labels\
    \ will choose.\n   In statistics, a discrete uniform distribution is defined as\
    \ a\n   probability distribution in which each value in a given range of\n   equally\
    \ spaced values (such as a sequence of integers) is equally\n   likely to be chosen\
    \ as the next value.  The values in such a\n   distribution exhibit both variability\
    \ and unguessability.  Thus, as\n   specified in Section 3, an approximation to\
    \ a discrete uniform\n   distribution is preferable as the source of flow label\
    \ values.\n   Intentionally, there are no precise mathematical requirements placed\n\
    \   on the distribution or the method used to achieve such a\n   distribution.\n\
    \   Once set to a non-zero value, the Flow Label is expected to be\n   delivered\
    \ unchanged to the destination node(s).  A forwarding node\n   MUST either leave\
    \ a non-zero flow label value unchanged or change it\n   only for compelling operational\
    \ security reasons as described in\n   Section 6.1.\n   There is no way to verify\
    \ whether a flow label has been modified en\n   route or whether it belongs to\
    \ a uniform distribution.  Therefore, no\n   Internet-wide mechanism can depend\
    \ mathematically on unmodified and\n   uniformly distributed flow labels; they\
    \ have a \"best effort\" quality.\n   Implementers should be aware that the flow\
    \ label is an unprotected\n   field that could have been accidentally or intentionally\
    \ changed en\n   route (see Section 6).  This leads to the following formal rule:\n\
    \   o  Forwarding nodes such as routers and load distributors MUST NOT\n     \
    \ depend only on Flow Label values being uniformly distributed.  In\n      any\
    \ usage such as a hash key for load distribution, the Flow Label\n      bits MUST\
    \ be combined at least with bits from other sources within\n      the packet,\
    \ so as to produce a constant hash value for each flow\n      and a suitable distribution\
    \ of hash values across flows.\n      Typically, the other fields used will be\
    \ some or all components of\n      the usual 5-tuple.  In this way, load distribution\
    \ will still\n      occur even if the Flow Label values are poorly distributed.\n\
    \   Although uniformly distributed flow label values are recommended\n   below,\
    \ and will always be helpful for load distribution, it is unsafe\n   to assume\
    \ their presence in the general case, and the use case needs\n   to work even\
    \ if the flow label value is zero.\n   As a general practice, packet flows should\
    \ not be reordered, and the\n   use of the Flow Label field does not affect this.\
    \  In particular, a\n   Flow label value of zero does not imply that reordering\
    \ is\n   acceptable.\n"
- title: 3.  Flow Labeling Requirements in the Stateless Scenario
  contents:
  - "3.  Flow Labeling Requirements in the Stateless Scenario\n   This section defines\
    \ the minimum requirements for methods of setting\n   the flow label value within\
    \ the stateless scenario of flow label\n   usage.\n   To enable Flow-Label-based\
    \ classification, source nodes SHOULD assign\n   each unrelated transport connection\
    \ and application data stream to a\n   new flow.  A typical definition of a flow\
    \ for this purpose is any set\n   of packets carrying the same 5-tuple {dest addr,\
    \ source addr,\n   protocol, dest port, source port}.  It should be noted that\
    \ a source\n   node always has convenient and efficient access to this 5-tuple,\n\
    \   which is not always the case for nodes that subsequently forward the\n   packet.\n\
    \   It is desirable that flow label values should be uniformly\n   distributed\
    \ to assist load distribution.  It is therefore RECOMMENDED\n   that source hosts\
    \ support the flow label by setting the flow label\n   field for all packets of\
    \ a given flow to the same value chosen from\n   an approximation to a discrete\
    \ uniform distribution.  Both stateful\n   and stateless methods of assigning\
    \ a value could be used, but it is\n   outside the scope of this specification\
    \ to mandate an algorithm.  The\n   algorithm SHOULD ensure that the resulting\
    \ flow label values are\n   unique with high probability.  However, if two simultaneous\
    \ flows are\n   assigned the same flow label value by chance and have the same\
    \ source\n   and destination addresses, it simply means that they will receive\
    \ the\n   same flow label treatment throughout the network.  As long as this is\n\
    \   a low-probability event, it will not significantly affect load\n   distribution.\n\
    \   A possible stateless algorithm is to use a suitable 20-bit hash of\n   values\
    \ from the IP packet's 5-tuple.  A simple example hash function\n   is described\
    \ in Appendix A.\n   An alternative approach is to use a pseudo-random number\
    \ generator to\n   assign a flow label value for a given transport session; such\
    \ a\n   method will require minimal local state to be kept at the source node\n\
    \   by recording the flow label associated with each transport socket.\n   Viewed\
    \ externally, either of these approaches will produce values\n   that appear to\
    \ be uniformly distributed and pseudo-random.\n   An implementation in which flow\
    \ labels are assigned sequentially is\n   NOT RECOMMENDED, as it would then be\
    \ simple for on-path observers to\n   guess the next value.\n   A source node\
    \ that does not otherwise set the flow label MUST set its\n   value to zero.\n\
    \   A node that forwards a flow whose flow label value in arriving\n   packets\
    \ is zero MAY change the flow label value.  In that case, it is\n   RECOMMENDED\
    \ that the forwarding node sets the flow label field for a\n   flow to a uniformly\
    \ distributed value as just described for source\n   nodes.\n   o  The same considerations\
    \ apply as to source hosts setting the flow\n      label; in particular, the preferred\
    \ case is that a flow is defined\n      by the 5-tuple.  However, there are cases\
    \ in which the complete\n      5-tuple for all packets is not readily available\
    \ to a forwarding\n      node, in particular for fragmented packets.  In such\
    \ cases, a flow\n      can be defined by fewer IPv6 header fields, typically using\
    \ only\n      the 2-tuple {dest addr, source addr}.  There are alternative\n \
    \     approaches that implementers could choose, such as:\n      *  A forwarding\
    \ node might use the 5-tuple to define a flow\n         whenever possible but\
    \ use the 2-tuple when the complete 5-tuple\n         is not available.  In this\
    \ case, unfragmented and fragmented\n         packets belonging to the same transport\
    \ session would receive\n         different flow label values, altering the effect\
    \ of subsequent\n         load distribution based on the flow label.\n      *\
    \  A forwarding node might use the 2-tuple to define a flow in all\n         cases.\
    \  In this case, subsequent load distribution would be\n         based only on\
    \ IP addresses.\n   o  The option to set the flow label in a forwarding node,\
    \ if\n      implemented, would presumably be of value in first-hop or ingress\n\
    \      routers.  It might place a considerable per-packet processing load\n  \
    \    on them, even if they adopted a stateless method of flow\n      identification\
    \ and label assignment.  However, it will not\n      interfere with host-to-router\
    \ load sharing [RFC4311].  It needs to\n      be under the control of network\
    \ managers, to avoid unwanted\n      processing load and any other undesirable\
    \ effects.  For this\n      reason, it MUST be a configurable option, disabled\
    \ by default.\n   The preceding rules taken together allow a given network to\
    \ include\n   routers that set flow labels on behalf of hosts that do not do so.\n\
    \   The complications described explain why the principal recommendation\n   is\
    \ that the source hosts should set the label.\n"
- title: 4.  Flow State Establishment Requirements
  contents:
  - "4.  Flow State Establishment Requirements\n   A node that sets the flow label\
    \ MAY also take part in a flow state\n   establishment method that results in\
    \ assigning specific treatments to\n   specific flows, possibly including signaling.\
    \  Any such method MUST\n   NOT disturb nodes taking part in the stateless scenario\
    \ just\n   described.  Thus, any node that sets flow label values according to\
    \ a\n   stateful scheme MUST choose labels that conform to Section 3 of this\n\
    \   specification.  Further details are not discussed in this document.\n"
- title: 5.  Essential Correction to RFC 2205
  contents:
  - "5.  Essential Correction to RFC 2205\n   [RFC2460] reduced the size of the flow\
    \ label field from 24 to 20\n   bits.  The references to a 24-bit flow label field\
    \ in Section A.9 of\n   [RFC2205] are updated accordingly.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This section considers security issues raised\
    \ by the use of the Flow\n   Label, including the potential for denial-of-service\
    \ attacks and the\n   related potential for theft of service by unauthorized traffic\n\
    \   (Section 6.2).  Section 6.3 addresses the use of the Flow Label in\n   the\
    \ presence of IPsec, including its interaction with IPsec tunnel\n   mode and\
    \ other tunneling protocols.  We also note that inspection of\n   unencrypted\
    \ Flow Labels may allow some forms of traffic analysis by\n   revealing some structure\
    \ of the underlying communications.  Even if\n   the flow label was encrypted,\
    \ its presence as a constant value in a\n   fixed position might assist traffic\
    \ analysis and cryptoanalysis.\n   The flow label is not protected in any way,\
    \ even if IPsec\n   authentication [RFC4302] is in use, so it can be forged by\
    \ an on-path\n   attacker.  Implementers are advised that any en-route change\
    \ to the\n   flow label value is undetectable.  On the other hand, a uniformly\n\
    \   distributed pseudo-random flow label cannot be readily guessed by an\n   attacker;\
    \ see [LABEL-SEC] for further discussion.  If a hash\n   algorithm is used, as\
    \ suggested in Section 3, it SHOULD include a\n   step that makes the flow label\
    \ value significantly difficult to\n   predict [RFC4086], even with knowledge\
    \ of the algorithm being used.\n"
- title: 6.1.  Covert Channel Risk
  contents:
  - "6.1.  Covert Channel Risk\n   The flow label could be used as a covert data channel,\
    \ since\n   apparently pseudo-random flow label values could, in fact, consist\
    \ of\n   covert data [NSA].  This could, for example, be achieved using a\n  \
    \ series of otherwise innocuous UDP packets whose flow label values\n   constitute\
    \ a covert message, or by co-opting a TCP session to carry a\n   covert message\
    \ in the flow labels of successive packets.  Both of\n   these could be recognized\
    \ as suspicious -- the first because isolated\n   UDP packets would not normally\
    \ be expected to have non-zero flow\n   labels, and the second because the flow\
    \ label values in a given TCP\n   session should all be equal.  However, other\
    \ methods, such as co-\n   opting the flow labels of occasional packets, might\
    \ be rather hard to\n   detect.\n   In situations where the covert channel risk\
    \ is considered\n   significant, the only certain defense is for a firewall to\
    \ rewrite\n   non-zero flow labels.  This would be an exceptional violation of\
    \ the\n   rule that the flow label, once set to a non-zero value, must not be\n\
    \   changed.  To preserve load distribution capability, such a firewall\n   SHOULD\
    \ rewrite labels by following the method described for a\n   forwarding node (see\
    \ Section 3), as if the incoming label value were\n   zero, and MUST NOT set non-zero\
    \ flow labels to zero.  This behavior\n   is nevertheless undesirable, since (as\
    \ discussed in Section 3) only\n   source nodes have straightforward access to\
    \ the complete 5-tuple.\n"
- title: 6.2.  Theft and Denial of Service
  contents:
  - "6.2.  Theft and Denial of Service\n   Since the mapping of network traffic to\
    \ flow-specific treatment is\n   triggered by the IP addresses and Flow Label\
    \ value of the IPv6\n   header, an adversary may be able to obtain a class of\
    \ service that\n   the network did not intend to provide by modifying the IPv6\
    \ header or\n   by injecting packets with false addresses and/or labels.  A concrete\n\
    \   analysis of this threat is only possible for specific stateful\n   methods\
    \ of signaling and using the flow label, which are out of scope\n   for this document.\
    \  Clearly, a full analysis will be required when\n   any such method is specified,\
    \ but in general, networks SHOULD NOT\n   make resource allocation decisions based\
    \ on flow labels without some\n   external means of assurance.\n   A denial-of-service\
    \ attack [RFC4732] becomes possible in the\n   stateless model when the modified\
    \ or injected traffic depletes the\n   resources available to forward it and other\
    \ traffic streams.  If a\n   denial-of-service attack were undertaken against\
    \ a given Flow Label\n   (or set of Flow Labels), then traffic containing an affected\
    \ Flow\n   Label might well experience worse-than-best-effort network\n   performance.\n\
    \   Note that since the treatment of IP headers by nodes is typically\n   unverified,\
    \ there is no guarantee that flow labels sent by a node are\n   set according\
    \ to the recommendations in this document.  A man-in-the-\n   middle or injected-traffic\
    \ denial-of-service attack specifically\n   directed at flow label handling would\
    \ involve setting unusual flow\n   labels.  For example, an attacker could set\
    \ all flow labels reaching\n   a given router to the same arbitrary non-zero value\
    \ or could perform\n   rapid cycling of flow label values such that the packets\
    \ of a given\n   flow will each have a different value.  Either of these attacks\
    \ would\n   cause a stateless load distribution algorithm to perform badly and\n\
    \   would cause a stateful classifier to behave incorrectly.  For this\n   reason,\
    \ stateless classifiers should not use the flow label alone to\n   control load\
    \ distribution, and stateful classifiers should include\n   explicit methods to\
    \ detect and ignore suspect flow label values.\n   Since flows are identified\
    \ by the 3-tuple of the Flow Label and the\n   Source and Destination Address,\
    \ the risk of denial of service\n   introduced by the Flow Label is closely related\
    \ to the risk of denial\n   of service by address spoofing.  An adversary who\
    \ is in a position to\n   forge an address is also likely to be able to forge\
    \ a label, and vice\n   versa.\n   There are two issues with different properties:\
    \ spoofing of the Flow\n   Label only and spoofing of the whole 3-tuple, including\
    \ Source and\n   Destination Address.\n   The former can be done inside a node\
    \ that is using or transmitting\n   the correct source address.  The ability to\
    \ spoof a Flow Label\n   typically implies being in a position to also forge an\
    \ address, but\n   in many cases, spoofing an address may not be interesting to\
    \ the\n   spoofer, especially if the spoofer's goal is theft of service rather\n\
    \   than denial of service.\n   The latter can be done by a host that is not subject\
    \ to ingress\n   filtering [RFC2827] or by an intermediate router.  Due to its\n\
    \   properties, this is typically useful only for denial of service.  In\n   the\
    \ absence of ingress filtering, almost any third party could\n   instigate such\
    \ an attack.\n   In the presence of ingress filtering, forging a non-zero Flow\
    \ Label\n   on packets that originated with a zero label, or modifying or\n  \
    \ clearing a label, could only occur if an intermediate system such as\n   a router\
    \ was compromised, or through some other form of man-in-the-\n   middle attack.\n"
- title: 6.3.  IPsec and Tunneling Interactions
  contents:
  - "6.3.  IPsec and Tunneling Interactions\n   The IPsec protocol, as defined in\
    \ [RFC4301], [RFC4302], and\n   [RFC4303], does not include the IPv6 header's\
    \ Flow Label in any of\n   its cryptographic calculations (in the case of tunnel\
    \ mode, it is the\n   outer IPv6 header's Flow Label that is not included).  Hence,\n\
    \   modification of the Flow Label by a network node has no effect on\n   IPsec\
    \ end-to-end security, because it cannot cause any IPsec\n   integrity check to\
    \ fail.  As a consequence, IPsec does not provide\n   any defense against an adversary's\
    \ modification of the Flow Label\n   (i.e., a man-in-the-middle attack).\n   IPsec\
    \ tunnel mode provides security for the encapsulated IP header's\n   Flow Label.\
    \  A tunnel mode IPsec packet contains two IP headers: an\n   outer header supplied\
    \ by the tunnel ingress node and an encapsulated\n   inner header supplied by\
    \ the original source of the packet.  When an\n   IPsec tunnel is passing through\
    \ nodes performing flow classification,\n   the intermediate network nodes operate\
    \ on the Flow Label in the outer\n   header.  At the tunnel egress node, IPsec\
    \ processing includes\n   removing the outer header and forwarding the packet\
    \ (if required)\n   using the inner header.  The IPsec protocol requires that\
    \ the inner\n   header's Flow Label not be changed by this decapsulation processing\n\
    \   to ensure that modifications to the label cannot be used to launch\n   theft-\
    \ or denial-of-service attacks across an IPsec tunnel endpoint.\n   This document\
    \ makes no change to that requirement; indeed, it forbids\n   changes to the Flow\
    \ Label.\n   When IPsec tunnel egress decapsulation processing includes a\n  \
    \ sufficiently strong cryptographic integrity check of the encapsulated\n   packet\
    \ (where sufficiency is determined by local security policy),\n   the tunnel egress\
    \ node can safely assume that the Flow Label in the\n   inner header has the same\
    \ value it had at the tunnel ingress node.\n   This analysis and its implications\
    \ apply to any tunneling protocol\n   that performs integrity checks.  Of course,\
    \ any Flow Label set in an\n   encapsulating IPv6 header is subject to the risks\
    \ described in the\n   previous section.\n"
- title: 6.4.  Security Filtering Interactions
  contents:
  - "6.4.  Security Filtering Interactions\n   The Flow Label does nothing to eliminate\
    \ the need for packet\n   filtering based on headers past the IP header if such\
    \ filtering is\n   deemed necessary for security reasons on nodes such as firewalls\
    \ or\n   filtering routers.\n"
- title: 7.  Differences from RFC 3697
  contents:
  - "7.  Differences from RFC 3697\n   The main differences between this specification\
    \ and its predecessor\n   [RFC3697] are as follows:\n   o  This specification\
    \ encourages non-zero flow label values to be\n      used and clearly defines\
    \ how to set a non-zero value.\n   o  This specification encourages a stateless\
    \ model with uniformly\n      distributed flow label values.\n   o  This specification\
    \ does not specify any details of a stateful\n      model.\n   o  This specification\
    \ retains the rule that the flow label must not\n      be changed en route but\
    \ allows routers to set the label on behalf\n      of hosts that do not do so.\n\
    \   o  This specification discusses the covert channel risk and its\n      consequences\
    \ for firewalls.\n   For further details, see [RFC6436].\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   Valuable comments and contributions were made by Jari\
    \ Arkko, Ran\n   Atkinson, Fred Baker, Richard Barnes, Steve Blake, Tassos\n \
    \  Chatzithomaoglou, Remi Despres, Alan Ford, Fernando Gont, Brian\n   Haberman,\
    \ Tony Hain, Joel Halpern, Qinwen Hu, Chris Morrow, Thomas\n   Narten, Mark Smith,\
    \ Pascal Thubert, Iljitsch van Beijnum, and other\n   participants in the 6man\
    \ working group.\n   Cristian Calude suggested the von Neumann algorithm in Appendix\
    \ A.\n   David Malone and Donald Eastlake gave additional input about hash\n \
    \  algorithms.\n   Steve Deering and Alex Conta were co-authors of RFC 3697, on\
    \ which\n   this document is based.\n   Contributors to the original development\
    \ of RFC 3697 included Ran\n   Atkinson, Steve Blake, Jim Bound, Francis Dupont,\
    \ Robert Elz, Tony\n   Hain, Robert Hancock, Bob Hinden, Christian Huitema, Frank\n\
    \   Kastenholz, Thomas Narten, Charles Perkins, Pekka Savola, Hesham\n   Soliman,\
    \ Michael Thomas, Margaret Wasserman, and Alex Zinin.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]    Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2205]    Braden, B., Zhang, L., Berson, S., Herzog, S.,\
    \ and S.\n                Jamin, \"Resource ReSerVation Protocol (RSVP) -- Version\n\
    \                1 Functional Specification\", RFC 2205, September 1997.\n   [RFC2460]\
    \    Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n             \
    \   (IPv6) Specification\", RFC 2460, December 1998.\n   [RFC4086]    Eastlake,\
    \ D., Schiller, J., and S. Crocker, \"Randomness\n                Requirements\
    \ for Security\", BCP 106, RFC 4086,\n                June 2005.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [LABEL-SEC]  Gont, F., \"Security Assessment\
    \ of the IPv6 Flow Label\",\n                Work in Progress, November 2010.\n\
    \   [NSA]        Potyraj, C., \"Firewall Design Considerations for IPv6\",\n \
    \               National Security Agency I733-041R-2007, 2007,\n             \
    \   <http://www.nsa.gov/ia/_files/ipv6/I733-041R-2007.pdf>.\n   [RFC2827]    Ferguson,\
    \ P. and D. Senie, \"Network Ingress Filtering:\n                Defeating Denial\
    \ of Service Attacks which employ IP\n                Source Address Spoofing\"\
    , BCP 38, RFC 2827, May 2000.\n   [RFC3697]    Rajahalme, J., Conta, A., Carpenter,\
    \ B., and S. Deering,\n                \"IPv6 Flow Label Specification\", RFC\
    \ 3697, March 2004.\n   [RFC4301]    Kent, S. and K. Seo, \"Security Architecture\
    \ for the\n                Internet Protocol\", RFC 4301, December 2005.\n   [RFC4302]\
    \    Kent, S., \"IP Authentication Header\", RFC 4302,\n                December\
    \ 2005.\n   [RFC4303]    Kent, S., \"IP Encapsulating Security Payload (ESP)\"\
    ,\n                RFC 4303, December 2005.\n   [RFC4311]    Hinden, R. and D.\
    \ Thaler, \"IPv6 Host-to-Router Load\n                Sharing\", RFC 4311, November\
    \ 2005.\n   [RFC4732]    Handley, M., Rescorla, E., and IAB, \"Internet Denial-of-\n\
    \                Service Considerations\", RFC 4732, December 2006.\n   [RFC5971]\
    \    Schulzrinne, H. and R. Hancock, \"GIST: General Internet\n              \
    \  Signalling Transport\", RFC 5971, October 2010.\n   [RFC6436]    Amante, S.,\
    \ Carpenter, B., and S. Jiang, \"Rationale for\n                Update to the\
    \ IPv6 Flow Label Specification\", RFC 6436,\n                November 2011.\n\
    \   [RFC6438]    Carpenter, B. and S. Amante, \"Using the IPv6 Flow Label\n  \
    \              for Equal Cost Multipath Routing and Link Aggregation in\n    \
    \            Tunnels\", RFC 6438, November 2011.\n   [vonNeumann] von Neumann,\
    \ J., \"Various techniques used in connection\n                with random digits\"\
    , National Bureau of Standards\n                Applied Math Series 12, 36-38,\
    \ 1951.\n"
- title: Appendix A.  Example 20-Bit Hash Function
  contents:
  - "Appendix A.  Example 20-Bit Hash Function\n   As mentioned in Section 3, a stateless\
    \ hash function may be used to\n   generate a flow label value from an IPv6 packet's\
    \ 5-tuple.  It is not\n   trivial to choose a suitable hash function, and it is\
    \ expected that\n   extensive practical experience will be required to identify\
    \ the best\n   choices.  An example function, based on an algorithm by von Neumann\n\
    \   known to produce an approximately uniform distribution [vonNeumann],\n   follows.\
    \  For each packet for which a flow label must be generated,\n   execute the following\
    \ steps:\n   1.  Split the destination and source addresses into two 64-bit values\n\
    \       each, thus transforming the 5-tuple into a 7-tuple.\n   2.  Add the following\
    \ five components together using unsigned 64-bit\n       arithmetic, discarding\
    \ any carry bits: both parts of the source\n       address, both parts of the\
    \ destination address, and the protocol\n       number.\n   3.  Apply the von\
    \ Neumann algorithm to the resulting string of 64\n       bits:\n       1.  Starting\
    \ at the least significant end, select two bits.\n       2.  If the two bits are\
    \ 00 or 11, discard them.\n       3.  If the two bits are 01, output a 0 bit.\n\
    \       4.  If the two bits are 10, output a 1 bit.\n       5.  Repeat with the\
    \ next two bits in the input 64-bit string.\n       6.  Stop when 16 bits have\
    \ been output (or when the 64-bit string\n           is exhausted).\n   4.  Add\
    \ the two port numbers to the resulting 16-bit number.\n   5.  Shift the resulting\
    \ value 4 bits left, and mask with 0xfffff.\n   6.  In the highly unlikely event\
    \ that the result is exactly zero, set\n       the flow label arbitrarily to the\
    \ value 1.\n   Note that this simple example does not include a step to prevent\n\
    \   predictability, as recommended in Section 6.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Shane Amante\n   Level 3 Communications, LLC\n   1025\
    \ Eldorado Blvd\n   Broomfield, CO  80021\n   USA\n   EMail: shane@level3.net\n\
    \   Brian Carpenter\n   Department of Computer Science\n   University of Auckland\n\
    \   PB 92019\n   Auckland  1142\n   New Zealand\n   EMail: brian.e.carpenter@gmail.com\n\
    \   Sheng Jiang\n   Huawei Technologies Co., Ltd\n   Q14, Huawei Campus\n   No.156\
    \ Beiqing Road\n   Hai-Dian District, Beijing  100095\n   P.R. China\n   EMail:\
    \ jiangsheng@huawei.com\n   Jarno Rajahalme\n   Nokia Siemens Networks\n   Linnoitustie\
    \ 6\n   02600  Espoo\n   Finland\n   EMail: jarno.rajahalme@nsn.com\n"
