- contents:
  - '               Port Control Protocol (PCP) Proxy Function

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies a new Port Control Protocol (PCP) functional\n
    \  element: the PCP proxy.  The PCP proxy relays PCP requests received\n   from
    PCP clients to upstream PCP server(s).  A typical deployment\n   usage of this
    function is to help establish successful PCP\n   communications for PCP clients
    that cannot be configured with the\n   address of a PCP server located more than
    one hop away.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7648.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n     1.1.  Use Case: The NAT Cascade . . . . . . . . . . . . .
    . . .   4\n     1.2.  Use Case: The PCP Relay . . . . . . . . . . . . . . . .
    .   5\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   5\n
    \  3.  Operation of the PCP Proxy  . . . . . . . . . . . . . . . . .   6\n     3.1.
    \ Optimized Hairpin Routing . . . . . . . . . . . . . . . .   8\n     3.2.  Termination
    of Recursion  . . . . . . . . . . . . . . . .   9\n     3.3.  Source Address for
    PCP Requests Sent Upstream . . . . . .  10\n     3.4.  Unknown Opcodes and Options
    . . . . . . . . . . . . . . .  10\n       3.4.1.  No NAT Is Co-located with the
    PCP Proxy . . . . . . .  10\n       3.4.2.  PCP Proxy Co-located with a NAT Function
    \ . . . . . .  10\n     3.5.  Mapping Repair  . . . . . . . . . . . . . . . .
    . . . . .  11\n     3.6.  Multiple PCP Servers  . . . . . . . . . . . . . . .
    . . .  11\n   4.  Security Considerations . . . . . . . . . . . . . . . . . .
    .  12\n   5.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  12\n
    \    5.1.  Normative References  . . . . . . . . . . . . . . . . . .  12\n     5.2.
    \ Informative References  . . . . . . . . . . . . . . . . .  13\n   Acknowledgements
    \ . . . . . . . . . . . . . . . . . . . . . . . .  13\n   Authors' Addresses  .
    . . . . . . . . . . . . . . . . . . . . . .  14\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document defines a new Port Control Protocol (PCP)
    [RFC6887]\n   functional element: the PCP proxy.  As shown in Figure 1, the\n
    \  PCP proxy is logically equivalent to a PCP client back-to-back with a\n   PCP
    server.  The \"glue\" between the two is what is specified in this\n   document.
    \ Other than that \"glue\", the server and the client behave\n   exactly like
    their regular counterparts.\n   The PCP proxy is responsible for relaying PCP
    messages received from\n   PCP clients to upstream PCP servers and vice versa.\n
    \  Whether or not the PCP proxy is co-located with a flow-aware function\n   (e.g.,
    NAT, firewall) is deployment specific.\n                              .................\n
    \             +------+       : +------+------+ :    +------+\n              |Client|-------:-|Server|Client|-:----|Server|\n
    \             +------+       : +------+------+ :    +------+\n                             :
    \     Proxy      :\n                              .................\n                     Figure
    1: Reference Architecture\n   This document assumes a hop-by-hop PCP authentication
    scheme.  That\n   is, referring to Figure 1, the leftmost PCP client authenticates
    with\n   the PCP proxy, while the PCP proxy authenticates with the upstream\n
    \  server.  Note that in some deployments, PCP authentication may only\n   be
    enabled between the PCP proxy and an upstream PCP server (e.g., a\n   customer
    premises host may not authenticate with the PCP proxy, but\n   the PCP proxy may
    authenticate with the PCP server).  The hop-by-hop\n   authentication scheme is
    more suitable from a deployment standpoint.\n   Furthermore, it allows implementations
    to easily support a PCP proxy\n   that alters PCP messages (e.g., strips a PCP
    option, modifies a\n   PCP field).\n"
  - contents:
    - "1.1.  Use Case: The NAT Cascade\n   In today's world, with public routable
      IPv4 addresses becoming less\n   readily available, it is increasingly common
      for customers to receive\n   a private address from their Internet Service Provider
      (ISP), and the\n   ISP uses a NAT gateway of its own to translate those packets
      before\n   sending them out onto the public Internet.  This means that there
      is\n   likely to be more than one NAT on the path between client machines\n
      \  and the public Internet:\n   o  If a residential customer receives a translated
      address from their\n      ISP and then installs their own residential NAT gateway
      to share\n      that address between multiple client devices in their home,
      then\n      there are at least two NAT gateways on the path between client\n
      \     devices and the public Internet.\n   o  If a mobile phone customer receives
      a translated address from\n      their mobile phone carrier and uses \"Personal
      Hotspot\" or\n      \"Internet Sharing\" software on their mobile phone to make
      Wireless\n      LAN (WLAN) Internet access available to other client devices,
      then\n      there are at least two NAT gateways on the path between those\n
      \     client devices and the public Internet.\n   o  If a hotel guest connects
      a portable WLAN gateway to their hotel\n      room's Ethernet port to share
      their room's Internet connection\n      between their phone and their laptop
      computer, then packets from\n      the client devices may traverse the hotel
      guest's portable NAT,\n      the hotel network's NAT, and the ISP's NAT before
      reaching the\n      public Internet.\n   While it is possible, in theory, that
      client devices could somehow\n   discover all the NATs on the path and communicate
      with each one\n   separately using PCP [RFC6887], in practice it is not clear
      how\n   client devices would reliably learn this information.  Since the NAT\n
      \  gateways are installed and operated by different individuals and\n   organizations,
      no single entity has knowledge of all the NATs on the\n   path.  Also, even
      if a client device could somehow know all the NATs\n   on the path, requiring
      a client device to communicate separately with\n   all of them imposes unreasonable
      complexity on PCP clients, many of\n   which are expected to be simple low-cost
      devices.\n   In addition, this goes against the spirit of NAT gateways.  The
      main\n   purpose of a NAT gateway is to make multiple downstream client\n   devices
      appear, from the point of view of everything upstream of the\n   NAT gateway,
      to be a single client device.  In the same spirit, it\n   makes sense for a
      PCP-capable NAT gateway to make multiple downstream\n   client devices requesting
      port mappings appear, from the point of\n   view of everything upstream of the
      NAT gateway, to be a single client\n   device requesting port mappings.\n"
    title: '1.1.  Use Case: The NAT Cascade'
  - contents:
    - "1.2.  Use Case: The PCP Relay\n   Another envisioned use case of the PCP proxy
      is to help establish\n   successful PCP communications for PCP clients that
      cannot be\n   configured with the address of a PCP server located more than
      one hop\n   away.  A PCP proxy can, for instance, be embedded in a CPE (Customer\n
      \  Premises Equipment) while the PCP server is located in a network\n   operated
      by an ISP.  This is illustrated in Figure 2.\n                 |\n       +------+
      \ |\n       |Client|--+\n       +------+  |  +-----+                               +------+\n
      \                +--|Proxy|--------<ISP network>----------|Server|\n       +------+
      \ |  +-----+                               +------+\n       |Client|--+    CPE\n
      \      +------+  |\n                 |\n                LAN\n                       Figure
      2: PCP Relay Use Case\n   This works because the proxy's server side is listening
      on the\n   address used as a default gateway by the clients.  The clients use\n
      \  that address as a fallback when discovering the PCP server's address.\n   The
      proxy picks up the requests and forwards them upstream to the\n   ISP's PCP
      server, with whose address it has been provisioned through\n   regular PCP client
      provisioning means.\n   This particular use case assumes that provisioning the
      server's\n   address on the CPE is feasible while doing it on the clients in
      the\n   LAN is not, which is what makes the PCP proxy valuable.\n   An alternative
      way to contact an upstream PCP server that may be\n   several hops away is to
      use a well-known anycast address\n   [PCP-ANYCAST], but that technique can be
      problematic when multiple\n   PCP servers are to be contacted [PCP-DEPLOY].\n"
    title: '1.2.  Use Case: The PCP Relay'
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in\n   \"Key words for use in RFCs to Indicate Requirement Levels\" [RFC2119].\n
    \  Where this document uses the terms \"upstream\" and \"downstream\", the\n   term
    \"upstream\" refers to the direction outbound packets travel\n   towards the public
    Internet, and the term \"downstream\" refers to the\n   direction inbound packets
    travel from the public Internet towards\n   client systems.  Typically, when a
    home user views a web site, their\n   computer sends an outbound TCP SYN packet
    upstream towards the public\n   Internet, and an inbound downstream TCP SYN ACK
    reply comes back from\n   the public Internet.\n"
  title: 2.  Terminology
- contents:
  - "3.  Operation of the PCP Proxy\n   Upon receipt of a PCP mapping-creation request
    from a downstream\n   PCP client, a PCP proxy first examines its local mapping
    table to see\n   if it already has a valid active mapping matching the internal\n
    \  address and internal port (and in the case of PEER requests, the\n   remote
    peer) given in the request.\n   If the PCP proxy does not already have a valid
    active mapping for\n   this mapping-creation request, then it allocates an available
    port on\n   its external interface.  We assume for the sake of this description\n
    \  that the address of its external interface is itself a private\n   address,
    subject to translation by an upstream NAT.  The PCP proxy\n   then constructs
    an appropriate corresponding PCP request of its own\n   (as described below) and
    sends it to its upstream NAT, and the newly\n   created local mapping is considered
    temporary until a confirming\n   reply is received from the upstream PCP server.\n
    \  If the PCP proxy does already have a valid active mapping for this\n   mapping-creation
    request and the lifetime remaining on the local\n   mapping is at least 3/4 of
    the lifetime requested by the PCP client,\n   then the PCP proxy SHOULD send an
    immediate reply giving the\n   outermost external address and port (previously
    learned using PCP\n   recursively, as described below) and the actual lifetime
    remaining\n   for this mapping.  If the lifetime remaining on the local mapping
    is\n   less than 3/4 of the lifetime requested by the PCP client, then the\n   PCP
    proxy MUST generate an upstream request as described below.\n   For mapping-deletion
    requests (lifetime = 0), the local mapping, if\n   any, is deleted, and then (regardless
    of whether or not a local\n   mapping existed) a corresponding upstream request
    is generated.\n   The PCP proxy knows the destination IP address for its upstream\n
    \  PCP request using the same means that are available for provisioning\n   a
    PCP client.  In particular, the PCP proxy MUST follow the procedure\n   defined
    in Section 8.1 of the PCP specification [RFC6887] to discover\n   its PCP server.
    \ This does not preclude other means from being used\n   in addition.\n   In the
    upstream PCP request:\n   o  The PCP client's IP address and internal port are
    the PCP proxy's\n      own external address and port just allocated for this mapping.\n
    \  o  The suggested external address and port in the upstream\n      PCP request
    SHOULD be copied from the original PCP request.  On a\n      typical renewal request,
    this will be the outermost external\n      address and port previously learned
    by the client.\n   o  The requested lifetime is as requested by the client if
    it falls\n      within the acceptable range for this PCP server; otherwise, it\n
    \     SHOULD be capped to appropriate minimum and maximum values\n      configured
    for this PCP server.\n   o  The mapping nonce is copied from the original PCP
    request.\n   o  For PEER requests, the remote peer IP address and port are copied\n
    \     from the original PCP request.\n   Upon receipt of a PCP reply giving the
    outermost (i.e., publicly\n   routable) external address, port, and lifetime,
    the PCP proxy records\n   this information in its own mapping table and relays
    the information\n   to the requesting downstream PCP client in a PCP reply.  The\n
    \  PCP proxy therefore records, among other things, the following\n   information
    in its mapping table:\n   o  Client's internal address and port.\n   o  External
    address and port allocated by this PCP proxy.\n   o  Outermost external address
    and port allocated by the upstream\n      PCP server.\n   o  Mapping lifetime
    (also dictated by the upstream PCP server).\n   o  Mapping nonce.\n   In the downstream
    PCP reply:\n   o  The lifetime is as granted by the upstream PCP server, or less
    if\n      the granted lifetime exceeds the maximum lifetime this PCP server\n
    \     is configured to grant.  If the proxy chooses to grant a\n      downstream
    lifetime greater than the lifetime granted by the\n      upstream PCP server (which
    is NOT RECOMMENDED), then this\n      PCP proxy MUST take responsibility for renewing
    the upstream\n      mapping itself.\n   o  The Epoch Time is this PCP proxy's
    Epoch Time, not the Epoch Time\n      of the upstream PCP server.  Each PCP server
    has its own\n      independent Epoch Time.  However, if the Epoch Time received
    from\n      the upstream PCP server indicates a loss of state in that\n      PCP
    server, the PCP proxy can either (1) recreate the lost\n      mappings itself
    or (2) reset its own Epoch Time to cause its\n      downstream clients to perform
    such state repairs themselves.  A\n      PCP proxy MUST NOT simply copy the upstream
    PCP server's\n      Epoch Time into its downstream PCP replies, because if it
    suffers\n      its own state loss it needs the ability to communicate that state\n
    \     loss to clients.  Thus, each PCP server has its own independent\n      Epoch
    Time.  However, as a convenience, a downstream PCP proxy may\n      simply choose
    to reset its own Epoch Time whenever it detects that\n      its upstream PCP server
    has lost state.  Thus, in this case, the\n      PCP proxy's Epoch Time always
    resets whenever its upstream\n      PCP server loses state; it may reset at other
    times as well.\n   o  The mapping nonce is copied from the reply received from
    the\n      upstream PCP server.\n   o  The assigned external port and assigned
    external IP address are\n      copied from the reply received from the upstream
    PCP server (i.e.,\n      they are the outermost external IP address and port,
    not the\n      locally assigned external address and port).  By recursive\n      application
    of this procedure, the outermost external IP address\n      and port are relayed
    from the outermost NAT, through one or more\n      intervening PCP proxies, until
    they ultimately reach the\n      downstream client.\n   o  For PEER requests,
    the remote peer IP address and port are copied\n      from the reply received
    from the upstream PCP server.\n"
  - contents:
    - "3.1.  Optimized Hairpin Routing\n   A PCP proxy SHOULD implement optimized
      hairpin routing.  What this\n   means is the following:\n   o  If a PCP proxy
      observes an outgoing packet arriving on its\n      internal interface that is
      addressed to an external address and\n      port appearing in the NAT gateway's
      own mapping table, then the\n      NAT gateway SHOULD (after creating a new
      outbound mapping if one\n      does not already exist) rewrite the packet appropriately
      and\n      deliver it to the internal client to which that external address\n
      \     and port are currently allocated.\n   o  Similarly, if a PCP proxy observes
      an outgoing packet arriving on\n      its internal interface that is addressed
      to an *outermost*\n      external address and port appearing in the NAT gateway's
      own\n      mapping table, then the NAT gateway SHOULD do as described above:\n
      \     create a new outbound mapping if one does not already exist, and\n      then
      rewrite the packet appropriately and deliver it to the\n      internal client
      to which that outermost external address and port\n      are currently allocated.
      \ This is not necessary for successful\n      communication, but it provides
      efficiency.  Without this optimized\n      hairpin routing, the packet will
      be delivered all the way to the\n      outermost NAT gateway, which will then
      perform standard hairpin\n      translation and send it back.  Using knowledge
      of the outermost\n      external address and port, this rewriting can be anticipated
      and\n      performed locally.  This rewriting technique will typically offer\n
      \     higher throughput and lower latency than sending packets all the\n      way
      to the outermost NAT gateway and back.\n   Note that traffic counters maintained
      by an upstream PCP server will\n   differ from the counters of a PCP proxy implementing
      optimized\n   hairpin routing.\n"
    title: 3.1.  Optimized Hairpin Routing
  - contents:
    - "3.2.  Termination of Recursion\n   Any recursive algorithm needs a mechanism
      to terminate the recursion\n   at the appropriate point.  This termination of
      recursion can be\n   achieved in a variety of ways.  The following (non-exhaustive)\n
      \  examples are provided for illustration purposes:\n   o  An ISP's PCP-controlled
      gateway (which may embed a NAT, firewall,\n      or any function that can be
      controlled with PCP) could be\n      configured to know that it is the outermost
      PCP-controlled\n      gateway, and consequently it does not need to relay PCP
      requests\n      upstream.\n   o  A PCP-controlled gateway could determine automatically
      that if its\n      external address is not one of the known private addresses\n
      \     [RFC1918] [RFC6598], then its external address is a public\n      routable
      IP address, and consequently it does not need to relay\n      PCP requests upstream.\n
      \  o  Recursion may be terminated if there is no explicit list of\n      PCP
      servers configured (manually, using DHCP [RFC7291], or\n      otherwise) or
      if its default router is not responsive to\n      PCP requests.\n   o  Recursion
      may also be terminated if the upstream PCP-controlled\n      device does not
      embed a PCP proxy.\n"
    title: 3.2.  Termination of Recursion
  - contents:
    - "3.3.  Source Address for PCP Requests Sent Upstream\n   As with a regular PCP
      server, the PCP-controlled device can be a NAT,\n   a firewall, or even some
      sort of hybrid.  In particular, a PCP proxy\n   that simply relays all requests
      upstream can be thought of as the\n   degenerate case of a PCP server controlling
      a wide-open firewall\n   back-to-back with a regular PCP client.\n   One important
      property of the PCP-controlled device will affect the\n   PCP proxy's behavior:
      when the proxy's server part instructs the\n   device to create a mapping, that
      mapping's external address may or\n   may not be one that belongs to the proxy
      node.\n   o  When the mapping's external address belongs to the proxy node,
      as\n      would presumably be the case for a NAT, then the proxy's client\n
      \     side sends out an upstream PCP request using the mapping's\n      external
      IP address as the source.\n   o  When the mapping's external address does not
      belong to the proxy\n      node, as would presumably be the case for a firewall,
      then the\n      proxy's client side needs to install upstream mappings on behalf\n
      \     of its downstream clients.  To do this, it MUST insert a\n      THIRD_PARTY
      option in its upstream PCP request carrying the\n      mapping's external address.\n
      \  Note that hybrid PCP-controlled devices may create NAT-like mappings\n   in
      some circumstances and firewall-like mappings in others.  A proxy\n   controlling
      such a device would adjust its behavior dynamically,\n   depending on the kind
      of mapping created.\n"
    title: 3.3.  Source Address for PCP Requests Sent Upstream
  - contents:
    - '3.4.  Unknown Opcodes and Options

      '
    - contents:
      - "3.4.1.  No NAT Is Co-located with the PCP Proxy\n   When no NAT is co-located
        with the PCP proxy, the port numbers\n   included in received PCP messages
        (from the PCP server or\n   PCP client(s)) are not altered by the PCP proxy.
        \ The PCP proxy\n   relays to the PCP server unknown options and Opcodes because
        there is\n   no reachability failure risk.\n"
      title: 3.4.1.  No NAT Is Co-located with the PCP Proxy
    - contents:
      - "3.4.2.  PCP Proxy Co-located with a NAT Function\n   By default, the proxy
        MUST relay unknown Opcodes and mandatory-to-\n   process unknown options.
        \ Rejecting unknown options and Opcodes has\n   the drawback of preventing
        a PCP client from making use of new\n   capabilities offered by the PCP server
        but not supported by the\n   PCP proxy, even if no IP address and/or port
        is included in the\n   option/Opcode.\n   Because PCP messages with an unknown
        Opcode or mandatory-to-process\n   unknown options can carry a hidden internal
        address or internal port\n   that will not be translated, a PCP proxy MUST
        be configurable to\n   disable relaying unknown Opcodes and mandatory-to-process
        unknown\n   options.  If the PCP proxy is configured to disable relaying unknown\n
        \  Opcodes and mandatory-to-process unknown options, the PCP proxy MUST\n
        \  behave as follows:\n   o  a PCP proxy co-located with a NAT MUST reject,
        via an\n      UNSUPP_OPCODE error response, a received request with an unknown\n
        \     Opcode.\n   o  a PCP proxy co-located with a NAT MUST reject, via an\n
        \     UNSUPP_OPTION error response, a received request with a mandatory-\n
        \     to-process unknown option.\n"
      title: 3.4.2.  PCP Proxy Co-located with a NAT Function
    title: 3.4.  Unknown Opcodes and Options
  - contents:
    - "3.5.  Mapping Repair\n   ANNOUNCE requests received from PCP clients are handled
      locally; as\n   such, these requests MUST NOT be relayed to the provisioned\n
      \  PCP server.\n   Upon receipt of an unsolicited ANNOUNCE response from a PCP
      server,\n   the PCP proxy proceeds to renew the mappings and checks to see\n
      \  whether or not there are changes compared to a local cache if it is\n   maintained
      by the PCP proxy.  If no change is detected, no\n   unsolicited ANNOUNCE is
      generated towards PCP clients.  If a change\n   is detected, the PCP proxy MUST
      generate unsolicited ANNOUNCE\n   message(s) to appropriate PCP clients.  If
      the PCP proxy does not\n   maintain a local cache for the mappings, unsolicited
      multicast\n   ANNOUNCE messages are sent to PCP clients.\n   Upon change of
      its external IP address, the PCP proxy SHOULD renew\n   the mappings it maintained.
      \ If the PCP server assigns a different\n   external port, the PCP proxy SHOULD
      follow the PCP mapping repair\n   procedure [RFC6887].  This can be achieved
      only if a full state table\n   is maintained by the PCP proxy.\n"
    title: 3.5.  Mapping Repair
  - contents:
    - "3.6.  Multiple PCP Servers\n   A PCP proxy MAY handle multiple PCP servers
      at the same time.  Each\n   PCP server is associated with its own epoch value.
      \ PCP clients are\n   not aware of the presence of multiple PCP servers.\n   Following
      the PCP Server Selection process [RFC7488], if several\n   PCP servers are configured
      to the PCP proxy, it will contact in\n   parallel all these PCP servers.\n   In
      some contexts (e.g., PCP-controlled Carrier-Grade NATs (CGNs)),\n   the PCP
      proxy MAY load-balance the PCP clients among available\n   PCP servers.  The
      PCP proxy MUST ensure that requests of a given\n   PCP client are relayed to
      the same PCP server.\n   The PCP proxy MAY rely on some fields (e.g., Zone-ID
      [PCP-ZONES]) in\n   the PCP request to redirect the request to a given PCP server.\n"
    title: 3.6.  Multiple PCP Servers
  title: 3.  Operation of the PCP Proxy
- contents:
  - "4.  Security Considerations\n   The PCP proxy MUST follow the security considerations
    detailed in the\n   PCP specification [RFC6887] for both the client and server
    side.\n   Section 3.3 specifies the cases where a THIRD_PARTY option is\n   inserted
    by the PCP proxy.  In those cases, ways to prevent a\n   malicious user from creating
    mappings on behalf of a third party must\n   be employed as discussed in Section
    13.1 of the PCP specification\n   [RFC6887].  In particular, THIRD_PARTY options
    MUST NOT be enabled\n   unless the network on which the PCP messages are to be
    sent is fully\n   trusted (via physical or cryptographic security, or both) --
    for\n   example, if access control lists (ACLs) are installed on the\n   PCP proxy,
    the PCP server, and the network between them so that those\n   ACLs allow only
    communications from a trusted PCP proxy to the\n   PCP server.\n   A received
    request carrying an unknown Opcode or option SHOULD be\n   dropped (or, in the
    case of an unknown option that is not mandatory\n   to process, the option SHOULD
    be removed) if it is not compatible\n   with security controls provisioned to
    the PCP proxy.\n   The device embedding the PCP proxy MAY block PCP requests directly\n
    \  sent to the upstream PCP server(s).  This can be enforced using ACLs.\n"
  title: 4.  Security Considerations
- contents:
  - '5.  References

    '
  - contents:
    - "5.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC6887]  Wing, D., Ed., Cheshire, S., Boucadair, M., Penno, R., and\n              P.
      Selkirk, \"Port Control Protocol (PCP)\", RFC 6887,\n              DOI 10.17487/RFC6887,
      April 2013,\n              <http://www.rfc-editor.org/info/rfc6887>.\n"
    title: 5.1.  Normative References
  - contents:
    - "5.2.  Informative References\n   [PCP-ANYCAST]\n              Kiesel, S., Penno,
      R., and S. Cheshire, \"Port Control\n              Protocol (PCP) Anycast Addresses\",
      Work in Progress,\n              draft-ietf-pcp-anycast-07, August 2015.\n   [PCP-DEPLOY]\n
      \             Boucadair, M., \"Port Control Protocol (PCP) Deployment\n              Models\",
      Work in Progress,\n              draft-boucadair-pcp-deployment-cases-03, July
      2014.\n   [PCP-ZONES]\n              Penno, R., \"PCP Support for Multi-Zone
      Environments\", Work\n              in Progress, draft-penno-pcp-zones-01, October
      2011.\n   [RFC1918]  Rekhter, Y., Moskowitz, B., Karrenberg, D., de Groot, G.,\n
      \             and E. Lear, \"Address Allocation for Private Internets\",\n              BCP
      5, RFC 1918, DOI 10.17487/RFC1918, February 1996,\n              <http://www.rfc-editor.org/info/rfc1918>.\n
      \  [RFC6598]  Weil, J., Kuarsingh, V., Donley, C., Liljenstolpe, C., and\n              M.
      Azinger, \"IANA-Reserved IPv4 Prefix for Shared Address\n              Space\",
      BCP 153, RFC 6598, DOI 10.17487/RFC6598, April\n              2012, <http://www.rfc-editor.org/info/rfc6598>.\n
      \  [RFC7291]  Boucadair, M., Penno, R., and D. Wing, \"DHCP Options for\n              the
      Port Control Protocol (PCP)\", RFC 7291,\n              DOI 10.17487/RFC7291,
      July 2014,\n              <http://www.rfc-editor.org/info/rfc7291>.\n   [RFC7488]
      \ Boucadair, M., Penno, R., Wing, D., Patil, P., and T.\n              Reddy,
      \"Port Control Protocol (PCP) Server Selection\",\n              RFC 7488, DOI
      10.17487/RFC7488, March 2015,\n              <http://www.rfc-editor.org/info/rfc7488>.\n"
    title: 5.2.  Informative References
  title: 5.  References
- contents:
  - "Acknowledgements\n   Many thanks to C. Zhou, T. Reddy, and D. Thaler for their
    review and\n   comments.\n   Special thanks to F. Dupont, who contributed to this
    document.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Simon Perreault\n   Jive Communications\n   Quebec, QC\n
    \  Canada\n   Email: sperreault@jive.com\n   Mohamed Boucadair\n   France Telecom\n
    \  Rennes  35000\n   France\n   Email: mohamed.boucadair@orange.com\n   Reinaldo
    Penno\n   Cisco\n   United States\n   Email: repenno@cisco.com\n   Dan Wing\n
    \  Cisco Systems, Inc.\n   170 West Tasman Drive\n   San Jose, California  95134\n
    \  United States\n   Email: dwing@cisco.com\n   Stuart Cheshire\n   Apple Inc.\n
    \  1 Infinite Loop\n   Cupertino, California  95014\n   United States\n   Phone:
    +1 408 974 3207\n   Email: cheshire@apple.com\n"
  title: Authors' Addresses
