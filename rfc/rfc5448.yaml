- title: __initial_text__
  contents:
  - "        Improved Extensible Authentication Protocol Method for\n       3rd Generation\
    \ Authentication and Key Agreement (EAP-AKA')\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n"
- title: Abstract
  contents:
  - "Abstract\n   This specification defines a new EAP method, EAP-AKA', which is\
    \ a\n   small revision of the EAP-AKA (Extensible Authentication Protocol\n  \
    \ Method for 3rd Generation Authentication and Key Agreement) method.\n   The\
    \ change is a new key derivation function that binds the keys\n   derived within\
    \ the method to the name of the access network.  The new\n   key derivation mechanism\
    \ has been defined in the 3rd Generation\n   Partnership Project (3GPP).  This\
    \ specification allows its use in EAP\n   in an interoperable manner.  In addition,\
    \ EAP-AKA' employs SHA-256\n   instead of SHA-1.\n   This specification also updates\
    \ RFC 4187, EAP-AKA, to prevent bidding\n   down attacks from EAP-AKA'.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Requirements Language  . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  EAP-AKA' . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n     3.1.  AT_KDF_INPUT . . . . . . . . . . . . . . . . . . . .\
    \ . . .  6\n     3.2.  AT_KDF . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  8\n     3.3.  Key Generation . . . . . . . . . . . . . . . . . . . . .\
    \ . 10\n     3.4.  Hash Functions . . . . . . . . . . . . . . . . . . . . . .\
    \ 12\n       3.4.1.  PRF' . . . . . . . . . . . . . . . . . . . . . . . . . 12\n\
    \       3.4.2.  AT_MAC . . . . . . . . . . . . . . . . . . . . . . . . 13\n  \
    \     3.4.3.  AT_CHECKCODE . . . . . . . . . . . . . . . . . . . . . 13\n   4.\
    \  Bidding Down Prevention for EAP-AKA  . . . . . . . . . . . . . 14\n   5.  Security\
    \ Considerations  . . . . . . . . . . . . . . . . . . . 15\n     5.1.  Security\
    \ Properties of Binding Network Names . . . . . . . 18\n   6.  IANA Considerations\
    \  . . . . . . . . . . . . . . . . . . . . . 19\n     6.1.  Type Value . . . .\
    \ . . . . . . . . . . . . . . . . . . . . 19\n     6.2.  Attribute Type Values\
    \  . . . . . . . . . . . . . . . . . . 19\n     6.3.  Key Derivation Function\
    \ Namespace  . . . . . . . . . . . . 19\n   7.  Contributors . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 20\n   8.  Acknowledgments  . . . . . . . .\
    \ . . . . . . . . . . . . . . . 20\n   9.  References . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . 20\n     9.1.  Normative References . . . . . .\
    \ . . . . . . . . . . . . . 20\n     9.2.  Informative References . . . . . .\
    \ . . . . . . . . . . . . 21\n   Appendix A.  Changes from RFC 4187 . . . . .\
    \ . . . . . . . . . . . 23\n   Appendix B.  Importance of Explicit Negotiation\
    \  . . . . . . . . . 23\n   Appendix C.  Test Vectors  . . . . . . . . . . . .\
    \ . . . . . . . . 24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This specification defines a new Extensible Authentication\
    \ Protocol\n   (EAP)[RFC3748] method, EAP-AKA', which is a small revision of the\n\
    \   EAP-AKA method originally defined in [RFC4187].  What is new in EAP-\n   AKA'\
    \ is that it has a new key derivation function, specified in\n   [3GPP.33.402].\
    \  This function binds the keys derived within the\n   method to the name of the\
    \ access network.  This limits the effects of\n   compromised access network nodes\
    \ and keys.  This specification\n   defines the EAP encapsulation for AKA when\
    \ the new key derivation\n   mechanism is in use.\n   3GPP has defined a number\
    \ of applications for the revised AKA\n   mechanism, some based on native encapsulation\
    \ of AKA over 3GPP radio\n   access networks and others based on the use of EAP.\n\
    \   For making the new key derivation mechanisms usable in EAP-AKA,\n   additional\
    \ protocol mechanisms are necessary.  Given that RFC 4187\n   calls for the use\
    \ of CK (the encryption key) and IK (the integrity\n   key) from AKA, existing\
    \ implementations continue to use these.  Any\n   change of the key derivation\
    \ must be unambiguous to both sides in the\n   protocol.  That is, it must not\
    \ be possible to accidentally connect\n   old equipment to new equipment and get\
    \ the key derivation wrong or\n   attempt to use wrong keys without getting a\
    \ proper error message.\n   The change must also be secure against bidding down\
    \ attacks that\n   attempt to force the participants to use the least secure mechanism.\n\
    \   This specification therefore introduces a variant of the EAP-AKA\n   method,\
    \ called EAP-AKA'.  This method can employ the derived keys CK'\n   and IK' from\
    \ the 3GPP specification and updates the used hash\n   function to SHA-256 [FIPS.180-2.2002].\
    \  But it is otherwise\n   equivalent to RFC 4187.  Given that a different EAP\
    \ method type value\n   is used for EAP-AKA and EAP-AKA', a mutually supported\
    \ method may be\n   negotiated using the standard mechanisms in EAP [RFC3748].\n\
    \      Note: Appendix B explains why it is important to be explicit about\n  \
    \    the change of semantics for the keys, and why other approaches\n      would\
    \ lead to severe interoperability problems.\n   The rest of this specification\
    \ is structured as follows.  Section 3\n   defines the EAP-AKA' method.  Section\
    \ 4 adds support to EAP-AKA to\n   prevent bidding down attacks from EAP-AKA'.\
    \  Section 5 explains the\n   security differences between EAP-AKA and EAP-AKA'.\
    \  Section 6\n   describes the IANA considerations and Appendix A explains what\n\
    \   updates to RFC 4187 EAP-AKA have been made in this specification.\n   Appendix\
    \ B explains some of the design rationale for creating EAP-\n   AKA'.  Finally,\
    \ Appendix C provides test vectors.\n"
- title: 2.  Requirements Language
  contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  EAP-AKA'
  contents:
  - "3.  EAP-AKA'\n   EAP-AKA' is a new EAP method that follows the EAP-AKA specification\n\
    \   [RFC4187] in all respects except the following:\n   o  It uses the Type code\
    \ 50, not 23 (which is used by EAP-AKA).\n   o  It carries the AT_KDF_INPUT attribute,\
    \ as defined in Section 3.1,\n      to ensure that both the peer and server know\
    \ the name of the\n      access network.\n   o  It supports key derivation function\
    \ negotiation via the AT_KDF\n      attribute (Section 3.2) to allow for future\
    \ extensions.\n   o  It calculates keys as defined in Section 3.3, not as defined\
    \ in\n      EAP-AKA.\n   o  It employs SHA-256 [FIPS.180-2.2002], not SHA-1 [FIPS.180-1.1995]\n\
    \      (Section 3.4).\n   Figure 1 shows an example of the authentication process.\
    \  Each\n   message AKA'-Challenge and so on represents the corresponding message\n\
    \   from EAP-AKA, but with EAP-AKA' Type code.  The definition of these\n   messages,\
    \ along with the definition of attributes AT_RAND, AT_AUTN,\n   AT_MAC, and AT_RES\
    \ can be found in [RFC4187].\n    Peer                                       \
    \             Server\n       |                       EAP-Request/Identity    \
    \         |\n       |<-------------------------------------------------------|\n\
    \       |                                                        |\n       | \
    \ EAP-Response/Identity                                 |\n       |  (Includes\
    \ user's Network Access Identifier, NAI)      |\n       |------------------------------------------------------->|\n\
    \       |         +--------------------------------------------------+\n     \
    \  |         | Server determines the network name and ensures   |\n       |  \
    \       | that the given access network is authorized to   |\n       |       \
    \  | use the claimed name.  The server then runs the  |\n       |         | AKA'\
    \ algorithms generating RAND and AUTN, and    |\n       |         | derives session\
    \ keys from CK' and IK'.  RAND and |\n       |         | AUTN are sent as AT_RAND\
    \ and AT_AUTN attributes, |\n       |         | whereas the network name is transported\
    \ in the   |\n       |         | AT_KDF_INPUT attribute.  AT_KDF signals the used\
    \ |\n       |         | key derivation function.  The session keys are   |\n \
    \      |         | used in creating the AT_MAC attribute.           |\n      \
    \ |         +--------------------------------------------------+\n       |   \
    \                      EAP-Request/AKA'-Challenge     |\n       |        (AT_RAND,\
    \ AT_AUTN, AT_KDF, AT_KDF_INPUT, AT_MAC)|\n       |<-------------------------------------------------------|\n\
    \   +------------------------------------------------------+     |\n   | The peer\
    \ determines what the network name should be, |     |\n   | based on, e.g., what\
    \ access technology it is using.  |     |\n   | The peer also retrieves the network\
    \ name sent by     |     |\n   | the network from the AT_KDF_INPUT attribute.\
    \  The    |     |\n   | two names are compared for discrepancies, and if     |\
    \     |\n   | necessary, the authentication is aborted.  Otherwise,|     |\n \
    \  | the network name from AT_KDF_INPUT attribute is      |     |\n   | used in\
    \ running the AKA' algorithms, verifying AUTN  |     |\n   | from AT_AUTN and\
    \ MAC from AT_MAC attributes.  The    |     |\n   | peer then generates RES. \
    \ The peer also derives      |     |\n   | session keys from CK'/IK'.  The AT_RES\
    \ and AT_MAC    |     |\n   | attributes are constructed.                    \
    \      |     |\n   +------------------------------------------------------+  \
    \   |\n       | EAP-Response/AKA'-Challenge                            |\n   \
    \    | (AT_RES, AT_MAC)                                       |\n       |------------------------------------------------------->|\n\
    \       |         +-------------------------------------------------+\n      \
    \ |         | Server checks the RES and MAC values received    |\n       |   \
    \      | in AT_RES and AT_MAC, respectively.  Success     |\n       |        \
    \ | requires both to be found correct.               |\n       |         +-------------------------------------------------+\n\
    \       |                                           EAP-Success  |\n       |<-------------------------------------------------------|\n\
    \              Figure 1: EAP-AKA' Authentication Process\n   EAP-AKA' can operate\
    \ on the same credentials as EAP-AKA and employ\n   the same identities.  However,\
    \ EAP-AKA' employs different leading\n   characters than EAP-AKA for the conventions\
    \ given in Section 4.1.1 of\n   [RFC4187] for International Mobile Subscriber\
    \ Identifier (IMSI) based\n   usernames.  EAP-AKA' MUST use the leading character\
    \ \"6\" (ASCII 36\n   hexadecimal) instead of \"0\" for IMSI-based permanent usernames.\
    \  All\n   other usage and processing of the leading characters, usernames, and\n\
    \   identities is as defined by EAP-AKA [RFC4187].  For instance, the\n   pseudonym\
    \ and fast re-authentication usernames need to be constructed\n   so that the\
    \ server can recognize them.  As an example, a pseudonym\n   could begin with\
    \ a leading \"7\" character (ASCII 37 hexadecimal) and a\n   fast re-authentication\
    \ username could begin with \"8\" (ASCII 38\n   hexadecimal).  Note that a server\
    \ that implements only EAP-AKA may\n   not recognize these leading characters.\
    \  According to Section 4.1.4\n   of [RFC4187], such a server will re-request\
    \ the identity via the EAP-\n   Request/AKA-Identity message, making obvious to\
    \ the peer that EAP-AKA\n   and associated identity are expected.\n"
- title: 3.1.  AT_KDF_INPUT
  contents:
  - "3.1.  AT_KDF_INPUT\n   The format of the AT_KDF_INPUT attribute is shown below.\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | AT_KDF_INPUT  | Length        | Actual Network Name Length    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      .   \
    \                     Network Name                           .\n      .      \
    \                                                         .\n      |         \
    \                                                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The fields are as follows:\n   AT_KDF_INPUT\n      This is set to 23.\n  \
    \ Length\n      The length of the attribute, calculated as defined in [RFC4187],\n\
    \      Section 8.1.\n   Actual Network Name Length\n      This is a 2 byte actual\
    \ length field, needed due to the\n      requirement that the previous field is\
    \ expressed in multiples of 4\n      bytes per the usual EAP-AKA rules.  The Actual\
    \ Network Name Length\n      field provides the length of the network name in\
    \ bytes.\n   Network Name\n      This field contains the network name of the access\
    \ network for\n      which the authentication is being performed.  The name does\
    \ not\n      include any terminating null characters.  Because the length of\n\
    \      the entire attribute must be a multiple of 4 bytes, the sender\n      pads\
    \ the name with 1, 2, or 3 bytes of all zero bits when\n      necessary.\n   Only\
    \ the server sends the AT_KDF_INPUT attribute.  Per [3GPP.33.402],\n   the server\
    \ always verifies the authorization of a given access\n   network to use a particular\
    \ name before sending it to the peer over\n   EAP-AKA'.  The value of the AT_KDF_INPUT\
    \ attribute from the server\n   MUST be non-empty.  If it is empty, the peer behaves\
    \ as if AUTN had\n   been incorrect and authentication fails.  See Section 3 and\
    \ Figure 3\n   of [RFC4187] for an overview of how authentication failures are\n\
    \   handled.\n   In addition, the peer MAY check the received value against its\
    \ own\n   understanding of the network name.  Upon detecting a discrepancy, the\n\
    \   peer either warns the user and continues, or fails the authentication\n  \
    \ process.  More specifically, the peer SHOULD have a configurable\n   policy\
    \ that it can follow under these circumstances.  If the policy\n   indicates that\
    \ it can continue, the peer SHOULD log a warning message\n   or display it to\
    \ the user.  If the peer chooses to proceed, it MUST\n   use the network name\
    \ as received in the AT_KDF_INPUT attribute.  If\n   the policy indicates that\
    \ the authentication should fail, the peer\n   behaves as if AUTN had been incorrect\
    \ and authentication fails.\n   The Network Name field contains a UTF-8 string.\
    \  This string MUST be\n   constructed as specified in [3GPP.24.302] for \"Access\
    \ Network\n   Identity\".  The string is structured as fields separated by colons\n\
    \   (:).  The algorithms and mechanisms to construct the identity string\n   depend\
    \ on the used access technology.\n   On the network side, the network name construction\
    \ is a configuration\n   issue in an access network and an authorization check\
    \ in the\n   authentication server.  On the peer, the network name is constructed\n\
    \   based on the local observations.  For instance, the peer knows which\n   access\
    \ technology it is using on the link, it can see information in\n   a link-layer\
    \ beacon, and so on.  The construction rules specify how\n   this information\
    \ maps to an access network name.  Typically, the\n   network name consists of\
    \ the name of the access technology, or the\n   name of the access technology\
    \ followed by some operator identifier\n   that was advertised in a link-layer\
    \ beacon.  In all cases,\n   [3GPP.24.302] is the normative specification for\
    \ the construction in\n   both the network and peer side.  If the peer policy\
    \ allows running\n   EAP-AKA' over an access technology for which that specification\
    \ does\n   not provide network name construction rules, the peer SHOULD rely\n\
    \   only on the information from the AT_KDF_INPUT attribute and not\n   perform\
    \ a comparison.\n   If a comparison of the locally determined network name and\
    \ the one\n   received over EAP-AKA' is performed on the peer, it MUST be done\
    \ as\n   follows.  First, each name is broken down to the fields separated by\n\
    \   colons.  If one of the names has more colons and fields than the\n   other\
    \ one, the additional fields are ignored.  The remaining\n   sequences of fields\
    \ are compared, and they match only if they are\n   equal character by character.\
    \  This algorithm allows a prefix match\n   where the peer would be able to match\
    \ \"\", \"FOO\", and \"FOO:BAR\"\n   against the value \"FOO:BAR\" received from\
    \ the server.  This\n   capability is important in order to allow possible updates\
    \ to the\n   specifications that dictate how the network names are constructed.\n\
    \   For instance, if a peer knows that it is running on access technology\n  \
    \ \"FOO\", it can use the string \"FOO\" even if the server uses an\n   additional,\
    \ more accurate description, e.g., \"FOO:BAR\", that contains\n   more information.\n\
    \   The allocation procedures in [3GPP.24.302] ensure that conflicts\n   potentially\
    \ arising from using the same name in different types of\n   networks are avoided.\
    \  The specification also has detailed rules\n   about how a client can determine\
    \ these based on information available\n   to the client, such as the type of\
    \ protocol used to attach to the\n   network, beacons sent out by the network,\
    \ and so on.  Information\n   that the client cannot directly observe (such as\
    \ the type or version\n   of the home network) is not used by this algorithm.\n\
    \   The AT_KDF_INPUT attribute MUST be sent and processed as explained\n   above\
    \ when AT_KDF attribute has the value 1.  Future definitions of\n   new AT_KDF\
    \ values MUST define how this attribute is sent and\n   processed.\n"
- title: 3.2.  AT_KDF
  contents:
  - "3.2.  AT_KDF\n   AT_KDF is an attribute that the server uses to reference a specific\n\
    \   key derivation function.  It offers a negotiation capability that can\n  \
    \ be useful for future evolution of the key derivation functions.\n   The format\
    \ of the AT_KDF attribute is shown below.\n       0                   1      \
    \             2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | AT_KDF        | Length        |    Key Derivation Function    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The\
    \ fields are as follows:\n   AT_KDF\n      This is set to 24.\n   Length\n   \
    \   The length of the attribute, MUST be set to 1.\n   Key Derivation Function\n\
    \      An enumerated value representing the key derivation function that\n   \
    \   the server (or peer) wishes to use.  Value 1 represents the\n      default\
    \ key derivation function for EAP-AKA', i.e., employing CK'\n      and IK' as\
    \ defined in Section 3.3.\n   Servers MUST send one or more AT_KDF attributes\
    \ in the EAP-Request/\n   AKA'-Challenge message.  These attributes represent\
    \ the desired\n   functions ordered by preference, the most preferred function\
    \ being\n   the first attribute.\n   Upon receiving a set of these attributes,\
    \ if the peer supports and is\n   willing to use the key derivation function indicated\
    \ by the first\n   attribute, the function is taken into use without any further\n\
    \   negotiation.  However, if the peer does not support this function or\n   is\
    \ unwilling to use it, it does not process the received EAP-Request/\n   AKA'-Challenge\
    \ in any way except by responding with the EAP-Response/\n   AKA'-Challenge message\
    \ that contains only one attribute, AT_KDF with\n   the value set to the selected\
    \ alternative.  If there is no suitable\n   alternative, the peer behaves as if\
    \ AUTN had been incorrect and\n   authentication fails (see Figure 3 of [RFC4187]).\
    \  The peer fails the\n   authentication also if there are any duplicate values\
    \ within the list\n   of AT_KDF attributes (except where the duplication is due\
    \ to a\n   request to change the key derivation function; see below for further\n\
    \   information).\n   Upon receiving an EAP-Response/AKA'-Challenge with AT_KDF\
    \ from the\n   peer, the server checks that the suggested AT_KDF value was one\
    \ of\n   the alternatives in its offer.  The first AT_KDF value in the message\n\
    \   from the server is not a valid alternative.  If the peer has replied\n   with\
    \ the first AT_KDF value, the server behaves as if AT_MAC of the\n   response\
    \ had been incorrect and fails the authentication.  For an\n   overview of the\
    \ failed authentication process in the server side, see\n   Section 3 and Figure\
    \ 2 of [RFC4187].  Otherwise, the server re-sends\n   the EAP-Response/AKA'-Challenge\
    \ message, but adds the selected\n   alternative to the beginning of the list\
    \ of AT_KDF attributes and\n   retains the entire list following it.  Note that\
    \ this means that the\n   selected alternative appears twice in the set of AT_KDF\
    \ values.\n   Responding to the peer's request to change the key derivation\n\
    \   function is the only legal situation where such duplication may\n   occur.\n\
    \   When the peer receives the new EAP-Request/AKA'-Challenge message, it\n  \
    \ MUST check that the requested change, and only the requested change,\n   occurred\
    \ in the list of AT_KDF attributes.  If so, it continues with\n   processing the\
    \ received EAP-Request/AKA'-Challenge as specified in\n   [RFC4187] and Section\
    \ 3.1 of this document.  If not, it behaves as if\n   AT_MAC had been incorrect\
    \ and fails the authentication.  If the peer\n   receives multiple EAP-Request/AKA'-Challenge\
    \ messages with differing\n   AT_KDF attributes without having requested negotiation,\
    \ the peer MUST\n   behave as if AT_MAC had been incorrect and fail the authentication.\n\
    \   Note that the peer may also request sequence number resynchronization\n  \
    \ [RFC4187].  This happens after AT_KDF negotiation has already\n   completed.\
    \  An AKA'-Synchronization-Failure message is sent as a\n   response to the newly\
    \ received EAP-Request/AKA'-Challenge (the last\n   message of the AT_KDF negotiation).\
    \  The AKA'-Synchronization-Failure\n   message MUST contain the AUTS parameter\
    \ as specified in [RFC4187] and\n   a copy the AT_KDF attributes as they appeared\
    \ in the last message of\n   the AT_KDF negotiation.  If the AT_KDF attributes\
    \ are found to differ\n   from their earlier values, the peer and server MUST\
    \ behave as if\n   AT_MAC had been incorrect and fail the authentication.\n"
- title: 3.3.  Key Generation
  contents:
  - "3.3.  Key Generation\n   Both the peer and server MUST derive the keys as follows.\n\
    \   AT_KDF set to 1\n      In this case, MK is derived and used as follows:\n\
    \       MK = PRF'(IK'|CK',\"EAP-AKA'\"|Identity)\n       K_encr = MK[0..127]\n\
    \       K_aut  = MK[128..383]\n       K_re   = MK[384..639]\n       MSK    = MK[640..1151]\n\
    \       EMSK   = MK[1152..1663]\n   Here [n..m] denotes the substring from bit\
    \ n to m.  PRF' is a new\n   pseudo-random function specified in Section 3.4.\
    \  The first 1664 bits\n   from its output are used for K_encr (encryption key,\
    \ 128 bits), K_aut\n   (authentication key, 256 bits), K_re (re-authentication\
    \ key, 256\n   bits), MSK (Master Session Key, 512 bits), and EMSK (Extended Master\n\
    \   Session Key, 512 bits).  These keys are used by the subsequent\n   EAP-AKA'\
    \ process.  K_encr is used by the AT_ENCR_DATA attribute, and\n   K_aut by the\
    \ AT_MAC attribute.  K_re is used later in this section.\n   MSK and EMSK are\
    \ outputs from a successful EAP method run [RFC3748].\n   IK' and CK' are derived\
    \ as specified in [3GPP.33.402].  The functions\n   that derive IK' and CK' take\
    \ the following parameters:  CK and IK\n   produced by the AKA algorithm, and\
    \ value of the Network Name field\n   comes from the AT_KDF_INPUT attribute (without\
    \ length or padding) .\n   The value \"EAP-AKA'\" is an eight-characters-long\
    \ ASCII string.  It is\n   used as is, without any trailing NUL characters.\n\
    \   Identity is the peer identity as specified in Section 7 of [RFC4187].\n  \
    \ When the server creates an AKA challenge and corresponding AUTN, CK,\n   CK',\
    \ IK, and IK' values, it MUST set the Authentication Management\n   Field (AMF)\
    \ separation bit to 1 in the AKA algorithm [3GPP.33.102].\n   Similarly, the peer\
    \ MUST check that the AMF separation bit is set to\n   1.  If the bit is not set\
    \ to 1, the peer behaves as if the AUTN had\n   been incorrect and fails the authentication.\n\
    \   On fast re-authentication, the following keys are calculated:\n       MK =\
    \ PRF'(K_re,\"EAP-AKA' re-auth\"|Identity|counter|NONCE_S)\n       MSK  = MK[0..511]\n\
    \       EMSK = MK[512..1023]\n   MSK and EMSK are the resulting 512-bit keys,\
    \ taking the first 1024\n   bits from the result of PRF'.  Note that K_encr and\
    \ K_aut are not\n   re-derived on fast re-authentication.  K_re is the re-authentication\n\
    \   key from the preceding full authentication and stays unchanged over\n   any\
    \ fast re-authentication(s) that may happen based on it.  The value\n   \"EAP-AKA'\
    \ re-auth\" is a sixteen- characters-long ASCII string, again\n   represented\
    \ without any trailing NUL characters.  Identity is the\n   fast re-authentication\
    \ identity, counter is the value from the\n   AT_COUNTER attribute,\n   NONCE_S\
    \ is the nonce value from the AT_NONCE_S attribute, all as\n   specified in Section\
    \ 7 of [RFC4187].  To prevent the use of\n   compromised keys in other places,\
    \ it is forbidden to change the\n   network name when going from the full to the\
    \ fast re-authentication\n   process.  The peer SHOULD NOT attempt fast re-authentication\
    \ when it\n   knows that the network name in the current access network is\n \
    \  different from the one in the initial, full authentication.  Upon\n   seeing\
    \ a re-authentication request with a changed network name, the\n   server SHOULD\
    \ behave as if the re-authentication identifier had been\n   unrecognized, and\
    \ fall back to full authentication.  The server\n   observes the change in the\
    \ name by comparing where the fast\n   re-authentication and full authentication\
    \ EAP transactions were\n   received at the Authentication, Authorization, and\
    \ Accounting (AAA)\n   protocol level.\n   AT_KDF has any other value\n      Future\
    \ variations of key derivation functions may be defined, and\n      they will\
    \ be represented by new values of AT_KDF.  If the peer\n      does not recognize\
    \ the value, it cannot calculate the keys and\n      behaves as explained in Section\
    \ 3.2.\n   AT_KDF is missing\n      The peer behaves as if the AUTN had been incorrect\
    \ and MUST fail\n      the authentication.\n   If the peer supports a given key\
    \ derivation function but is unwilling\n   to perform it for policy reasons, it\
    \ refuses to calculate the keys\n   and behaves as explained in Section 3.2.\n"
- title: 3.4.  Hash Functions
  contents:
  - "3.4.  Hash Functions\n   EAP-AKA' uses SHA-256 [FIPS.180-2.2002], not SHA-1 [FIPS.180-1.1995]\n\
    \   as in EAP-AKA.  This requires a change to the pseudo-random function\n   (PRF)\
    \ as well as the AT_MAC and AT_CHECKCODE attributes.\n"
- title: 3.4.1.  PRF'
  contents:
  - "3.4.1.  PRF'\n   The PRF' construction is the same one IKEv2 uses (see Section\
    \ 2.13 of\n   [RFC4306]).  The function takes two arguments.  K is a 256-bit value\n\
    \   and S is an octet string of arbitrary length.  PRF' is defined as\n   follows:\n\
    \   PRF'(K,S) = T1 | T2 | T3 | T4 | ...\n      where:\n      T1 = HMAC-SHA-256\
    \ (K, S | 0x01)\n      T2 = HMAC-SHA-256 (K, T1 | S | 0x02)\n      T3 = HMAC-SHA-256\
    \ (K, T2 | S | 0x03)\n      T4 = HMAC-SHA-256 (K, T3 | S | 0x04)\n      ...\n\
    \   PRF' produces as many bits of output as is needed.  HMAC-SHA-256 is\n   the\
    \ application of HMAC [RFC2104] to SHA-256.\n"
- title: 3.4.2.  AT_MAC
  contents:
  - "3.4.2.  AT_MAC\n   When used within EAP-AKA', the AT_MAC attribute is changed\
    \ as\n   follows.  The MAC algorithm is HMAC-SHA-256-128, a keyed hash value.\n\
    \   The HMAC-SHA-256-128 value is obtained from the 32-byte HMAC-SHA-256\n   value\
    \ by truncating the output to the first 16 bytes.  Hence, the\n   length of the\
    \ MAC is 16 bytes.\n   Otherwise, the use of AT_MAC in EAP-AKA' follows Section\
    \ 10.15 of\n   [RFC4187].\n"
- title: 3.4.3.  AT_CHECKCODE
  contents:
  - "3.4.3.  AT_CHECKCODE\n   When used within EAP-AKA', the AT_CHECKCODE attribute\
    \ is changed as\n   follows.  First, a 32-byte value is needed to accommodate\
    \ a 256-bit\n   hash output:\n    0                   1                   2  \
    \                 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | AT_CHECKCODE  | Length        |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                   Checkcode (0 or 32 bytes)                 |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   |                    \
    \                                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Second, the checkcode is a hash value, calculated with SHA-256\n   [FIPS.180-2.2002],\
    \ over the data specified in Section 10.13 of\n   [RFC4187].\n"
- title: 4.  Bidding Down Prevention for EAP-AKA
  contents:
  - "4.  Bidding Down Prevention for EAP-AKA\n   As discussed in [RFC3748], negotiation\
    \ of methods within EAP is\n   insecure.  That is, a man-in-the-middle attacker\
    \ may force the\n   endpoints to use a method that is not the strongest that they\
    \ both\n   support.  This is a problem, as we expect EAP-AKA and EAP-AKA' to be\n\
    \   negotiated via EAP.\n   In order to prevent such attacks, this RFC specifies\
    \ a new mechanism\n   for EAP-AKA that allows the endpoints to securely discover\
    \ the\n   capabilities of each other.  This mechanism comes in the form of the\n\
    \   AT_BIDDING attribute.  This allows both endpoints to communicate\n   their\
    \ desire and support for EAP-AKA' when exchanging EAP-AKA\n   messages.  This\
    \ attribute is not included in EAP-AKA' messages as\n   defined in this RFC. \
    \ It is only included in EAP-AKA messages.  This\n   is based on the assumption\
    \ that EAP-AKA' is always preferable (see\n   Section 5).  If during the EAP-AKA\
    \ authentication process it is\n   discovered that both endpoints would have been\
    \ able to use EAP-AKA',\n   the authentication process SHOULD be aborted, as a\
    \ bidding down\n   attack may have happened.\n   The format of the AT_BIDDING\
    \ attribute is shown below.\n       0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | AT_BIDDING    | Length        |D|          Reserved           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The\
    \ fields are as follows:\n   AT_BIDDING\n      This is set to 136.\n   Length\n\
    \      The length of the attribute, MUST be set to 1.\n   D\n      This bit is\
    \ set to 1 if the sender supports EAP-AKA', is willing\n      to use it, and prefers\
    \ it over EAP-AKA.  Otherwise, it should be\n      set to zero.\n   Reserved\n\
    \      This field MUST be set to zero when sent and ignored on receipt.\n   The\
    \ server sends this attribute in the EAP-Request/AKA-Challenge\n   message.  If\
    \ the peer supports EAP-AKA', it compares the received\n   value to its own capabilities.\
    \  If it turns out that both the server\n   and peer would have been able to use\
    \ EAP-AKA' and preferred it over\n   EAP-AKA, the peer behaves as if AUTN had\
    \ been incorrect and fails the\n   authentication (see Figure 3 of [RFC4187]).\
    \  A peer not supporting\n   EAP-AKA' will simply ignore this attribute.  In all\
    \ cases, the\n   attribute is protected by the integrity mechanisms of EAP-AKA,\
    \ so it\n   cannot be removed by a man-in-the-middle attacker.\n   Note that we\
    \ assume (Section 5) that EAP-AKA' is always stronger than\n   EAP-AKA.  As a\
    \ result, there is no need to prevent bidding \"down\"\n   attacks in the other\
    \ direction, i.e., attackers forcing the endpoints\n   to use EAP-AKA'.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   A summary of the security properties of EAP-AKA'\
    \ follows.  These\n   properties are very similar to those in EAP-AKA.  We assume\
    \ that SHA-\n   256 is at least as secure as SHA-1.  This is called the SHA-256\n\
    \   assumption in the remainder of this section.  Under this assumption,\n   EAP-AKA'\
    \ is at least as secure as EAP-AKA.\n   If the AT_KDF attribute has value 1, then\
    \ the security properties of\n   EAP-AKA' are as follows:\n   Protected ciphersuite\
    \ negotiation\n      EAP-AKA' has no ciphersuite negotiation mechanisms.  It does\
    \ have\n      a negotiation mechanism for selecting the key derivation\n     \
    \ functions.  This mechanism is secure against bidding down attacks.\n      The\
    \ negotiation mechanism allows changing the offered key\n      derivation function,\
    \ but the change is visible in the final EAP-\n      Request/AKA'-Challenge message\
    \ that the server sends to the peer.\n      This message is authenticated via\
    \ the AT_MAC attribute, and\n      carries both the chosen alternative and the\
    \ initially offered\n      list.  The peer refuses to accept a change it did not\
    \ initiate.\n      As a result, both parties are aware that a change is being\
    \ made\n      and what the original offer was.\n   Mutual authentication\n   \
    \   Under the SHA-256 assumption, the properties of EAP-AKA' are at\n      least\
    \ as good as those of EAP-AKA in this respect.  Refer to\n      [RFC4187], Section\
    \ 12 for further details.\n   Integrity protection\n      Under the SHA-256 assumption,\
    \ the properties of EAP-AKA' are at\n      least as good (most likely better)\
    \ as those of EAP-AKA in this\n      respect.  Refer to [RFC4187], Section 12\
    \ for further details.  The\n      only difference is that a stronger hash algorithm,\
    \ SHA-256, is\n      used instead of SHA-1.\n   Replay protection\n      Under\
    \ the SHA-256 assumption, the properties of EAP-AKA' are at\n      least as good\
    \ as those of EAP-AKA in this respect.  Refer to\n      [RFC4187], Section 12\
    \ for further details.\n   Confidentiality\n      The properties of EAP-AKA' are\
    \ exactly the same as those of EAP-\n      AKA in this respect.  Refer to [RFC4187],\
    \ Section 12 for further\n      details.\n   Key derivation\n      EAP-AKA' supports\
    \ key derivation with an effective key strength\n      against brute force attacks\
    \ equal to the minimum of the length of\n      the derived keys and the length\
    \ of the AKA base key, i.e., 128\n      bits or more.  The key hierarchy is specified\
    \ in Section 3.3.\n      The Transient EAP Keys used to protect EAP-AKA packets\
    \ (K_encr,\n      K_aut, K_re), the MSK, and the EMSK are cryptographically\n\
    \      separate.  If we make the assumption that SHA-256 behaves as a\n      pseudo-random\
    \ function, an attacker is incapable of deriving any\n      non-trivial information\
    \ about any of these keys based on the other\n      keys.  An attacker also cannot\
    \ calculate the pre-shared secret\n      from IK, CK, IK', CK', K_encr, K_aut,\
    \ K_re, MSK, or EMSK by any\n      practically feasible means.\n      EAP-AKA'\
    \ adds an additional layer of key derivation functions\n      within itself to\
    \ protect against the use of compromised keys.\n      This is discussed further\
    \ in Section 5.1.\n      EAP-AKA' uses a pseudo-random function modeled after\
    \ the one used\n      in IKEv2 [RFC4306] together with SHA-256.\n   Key strength\n\
    \      See above.\n   Dictionary attack resistance\n      Under the SHA-256 assumption,\
    \ the properties of EAP-AKA' are at\n      least as good as those of EAP-AKA in\
    \ this respect.  Refer to\n      [RFC4187], Section 12 for further details.\n\
    \   Fast reconnect\n      Under the SHA-256 assumption, the properties of EAP-AKA'\
    \ are at\n      least as good as those of EAP-AKA in this respect.  Refer to\n\
    \      [RFC4187], Section 12 for further details.  Note that\n      implementations\
    \ MUST prevent performing a fast reconnect across\n      method types.\n   Cryptographic\
    \ binding\n      Note that this term refers to a very specific form of binding,\n\
    \      something that is performed between two layers of authentication.\n   \
    \   It is not the same as the binding to a particular network name.\n      The\
    \ properties of EAP-AKA' are exactly the same as those of EAP-\n      AKA in this\
    \ respect, i.e., as it is not a tunnel method, this\n      property is not applicable\
    \ to it.  Refer to [RFC4187], Section 12\n      for further details.\n   Session\
    \ independence\n      The properties of EAP-AKA' are exactly the same as those\
    \ of EAP-\n      AKA in this respect.  Refer to [RFC4187], Section 12 for further\n\
    \      details.\n   Fragmentation\n      The properties of EAP-AKA' are exactly\
    \ the same as those of EAP-\n      AKA in this respect.  Refer to [RFC4187], Section\
    \ 12 for further\n      details.\n   Channel binding\n      EAP-AKA', like EAP-AKA,\
    \ does not provide channel bindings as\n      they're defined in [RFC3748] and\
    \ [RFC5247].  New skippable\n      attributes can be used to add channel binding\
    \ support in the\n      future, if required.\n      However, including the Network\
    \ Name field in the AKA' algorithms\n      (which are also used for other purposes\
    \ than EAP-AKA') provides a\n      form of cryptographic separation between different\
    \ network names,\n      which resembles channel bindings.  However, the network\
    \ name does\n      not typically identify the EAP (pass-through) authenticator.\
    \  See\n      the following section for more discussion.\n"
- title: 5.1.  Security Properties of Binding Network Names
  contents:
  - "5.1.  Security Properties of Binding Network Names\n   The ability of EAP-AKA'\
    \ to bind the network name into the used keys\n   provides some additional protection\
    \ against key leakage to\n   inappropriate parties.  The keys used in the protocol\
    \ are specific to\n   a particular network name.  If key leakage occurs due to\
    \ an accident,\n   access node compromise, or another attack, the leaked keys\
    \ are only\n   useful when providing access with that name.  For instance, a\n\
    \   malicious access point cannot claim to be network Y if it has stolen\n   keys\
    \ from network X.  Obviously, if an access point is compromised,\n   the malicious\
    \ node can still represent the compromised node.  As a\n   result, neither EAP-AKA'\
    \ nor any other extension can prevent such\n   attacks; however, the binding to\
    \ a particular name limits the\n   attacker's choices, allows better tracking\
    \ of attacks, makes it\n   possible to identify compromised networks, and applies\
    \ good\n   cryptographic hygiene.\n   The server receives the EAP transaction\
    \ from a given access network\n   and verifies that the claim from the access\
    \ network corresponds to\n   the name that this access network should be using.\
    \  It becomes\n   impossible for an access network to claim over AAA that it is\
    \ another\n   access network.  In addition, if the peer checks that the information\n\
    \   it has received locally over the network-access link layer matches\n   with\
    \ the information the server has given it via EAP-AKA', it becomes\n   impossible\
    \ for the access network to tell one story to the AAA\n   network and another\
    \ one to the peer.  These checks prevent some\n   \"lying NAS\" (Network Access\
    \ Server) attacks.  For instance, a roaming\n   partner, R, might claim that it\
    \ is the home network H in an effort to\n   lure peers to connect to itself. \
    \ Such an attack would be beneficial\n   for the roaming partner if it can attract\
    \ more users, and damaging\n   for the users if their access costs in R are higher\
    \ than those in\n   other alternative networks, such as H.\n   Any attacker who\
    \ gets hold of the keys CK and IK, produced by the AKA\n   algorithm, can compute\
    \ the keys CK' and IK' and, hence, the Master\n   Key (MK) according to the rules\
    \ in Section 3.3.  The attacker could\n   then act as a lying NAS.  In 3GPP systems\
    \ in general, the keys CK and\n   IK have been distributed to, for instance, nodes\
    \ in a visited access\n   network where they may be vulnerable.  In order to reduce\
    \ this risk,\n   the AKA algorithm MUST be computed with the AMF separation bit\
    \ set to\n   1, and the peer MUST check that this is indeed the case whenever\
    \ it\n   runs EAP-AKA'.  Furthermore, [3GPP.33.402] requires that no CK or IK\n\
    \   keys computed in this way ever leave the home subscriber system.\n   The additional\
    \ security benefits obtained from the binding depend\n   obviously on the way\
    \ names are assigned to different access networks.\n   This is specified in [3GPP.24.302].\
    \  See also [3GPP.23.003].\n   Ideally, the names allow separating each different\
    \ access technology,\n   each different access network, and each different NAS\
    \ within a\n   domain.  If this is not possible, the full benefits may not be\n\
    \   achieved.  For instance, if the names identify just an access\n   technology,\
    \ use of compromised keys in a different technology can be\n   prevented, but\
    \ it is not possible to prevent their use by other\n   domains or devices using\
    \ the same technology.\n"
- title: 6.  IANA Considerations
  contents:
  - '6.  IANA Considerations

    '
- title: 6.1.  Type Value
  contents:
  - "6.1.  Type Value\n   EAP-AKA' has the EAP Type value 50 in the Extensible Authentication\n\
    \   Protocol (EAP) Registry under Method Types.  Per Section 6.2 of\n   [RFC3748],\
    \ this allocation can be made with Designated Expert and\n   Specification Required.\n"
- title: 6.2.  Attribute Type Values
  contents:
  - "6.2.  Attribute Type Values\n   EAP-AKA' shares its attribute space and subtypes\
    \ with EAP-SIM\n   [RFC4186] and EAP-AKA [RFC4187].  No new registries are needed.\n\
    \   However, a new Attribute Type value (23) in the non-skippable range\n   has\
    \ been assigned for AT_KDF_INPUT (Section 3.1) in the EAP-AKA and\n   EAP-SIM\
    \ Parameters registry under Attribute Types.\n   Also, a new Attribute Type value\
    \ (24) in the non-skippable range has\n   been assigned for AT_KDF (Section 3.2).\n\
    \   Finally, a new Attribute Type value (136) in the skippable range has\n   been\
    \ assigned for AT_BIDDING (Section 4).\n"
- title: 6.3.  Key Derivation Function Namespace
  contents:
  - "6.3.  Key Derivation Function Namespace\n   IANA has also created a new namespace\
    \ for EAP-AKA' AT_KDF Key\n   Derivation Function Values.  This namespace exists\
    \ under the EAP-AKA\n   and EAP-SIM Parameters registry.  The initial contents\
    \ of this\n   namespace are given below; new values can be created through the\n\
    \   Specification Required policy [RFC5226].\n   Value      Description      \
    \        Reference\n   ---------  ----------------------   ---------------\n \
    \  0          Reserved                 [RFC5448]\n   1          EAP-AKA' with\
    \ CK'/IK'    [RFC5448]\n   2-65535    Unassigned\n"
- title: 7.  Contributors
  contents:
  - "7.  Contributors\n   The test vectors in Appendix C were provided by Yogendra\
    \ Pal and\n   Jouni Malinen, based on two independent implementations of this\n\
    \   specification.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The authors would like to thank Guenther Horn, Joe Salowey,\
    \ Mats\n   Naslund, Adrian Escott, Brian Rosenberg, Laksminath Dondeti, Ahmad\n\
    \   Muhanna, Stefan Rommer, Miguel Garcia, Jan Kall, Ankur Agarwal, Jouni\n  \
    \ Malinen, Brian Weis, Russ Housley, and Alfred Hoenes for their in-\n   depth\
    \ reviews and interesting discussions in this problem space.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [3GPP.24.302]      3GPP, \"3rd Generation Partnership\
    \ Project;\n                      Technical Specification Group Core Network and\n\
    \                      Terminals; Access to the 3GPP Evolved Packet Core\n   \
    \                   (EPC) via non-3GPP access networks; Stage 3;\n           \
    \           (Release 8)\", 3GPP Technical Specification 24.302,\n            \
    \          December 2008.\n   [3GPP.33.102]      3GPP, \"3rd Generation Partnership\
    \ Project;\n                      Technical Specification Group Services and System\n\
    \                      Aspects; 3G Security; Security architecture\n         \
    \             (Release 8)\", 3GPP Technical Specification 33.102,\n          \
    \            December 2008.\n   [3GPP.33.402]      3GPP, \"3GPP System Architecture\
    \ Evolution (SAE);\n                      Security aspects of non-3GPP accesses;\
    \ Release 8\",\n                      3GPP Technical Specification 33.402,\n \
    \                     December 2008.\n   [FIPS.180-2.2002]  National Institute\
    \ of Standards and Technology,\n                      \"Secure Hash Standard\"\
    , FIPS PUB 180-2,\n                      August 2002, <http://csrc.nist.gov/publications/\n\
    \                      fips/fips180-2/fips180-2.pdf>.\n   [RFC2104]          Krawczyk,\
    \ H., Bellare, M., and R. Canetti, \"HMAC:\n                      Keyed-Hashing\
    \ for Message Authentication\",\n                      RFC 2104, February 1997.\n\
    \   [RFC2119]          Bradner, S., \"Key words for use in RFCs to\n         \
    \             Indicate Requirement Levels\", BCP 14, RFC 2119,\n             \
    \         March 1997.\n   [RFC3748]          Aboba, B., Blunk, L., Vollbrecht,\
    \ J., Carlson, J.,\n                      and H. Levkowetz, \"Extensible Authentication\n\
    \                      Protocol (EAP)\", RFC 3748, June 2004.\n   [RFC4187]  \
    \        Arkko, J. and H. Haverinen, \"Extensible\n                      Authentication\
    \ Protocol Method for 3rd Generation\n                      Authentication and\
    \ Key Agreement (EAP-AKA)\",\n                      RFC 4187, January 2006.\n\
    \   [RFC5226]          Narten, T. and H. Alvestrand, \"Guidelines for\n      \
    \                Writing an IANA Considerations Section in RFCs\",\n         \
    \             BCP 26, RFC 5226, May 2008.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [3GPP.23.003]      3GPP, \"3rd Generation Partnership\
    \ Project;\n                      Technical Specification Group Core Network and\n\
    \                      Terminals; Numbering, addressing and\n                \
    \      identification (Release 8)\", 3GPP Draft Technical\n                  \
    \    Specification 23.003, December 2008.\n   [3GPP.35.208]      3GPP, \"3rd Generation\
    \ Partnership Project;\n                      Technical Specification Group Services\
    \ and System\n                      Aspects; 3G Security; Specification of the\n\
    \                      MILENAGE Algorithm Set: An example algorithm set\n    \
    \                  for the 3GPP authentication and key generation\n          \
    \            functions f1, f1*, f2, f3, f4, f5 and f5*;\n                    \
    \  Document 4: Design Conformance Test Data (Release\n                      8)\"\
    , 3GPP Technical Specification 35.208,\n                      December 2008.\n\
    \   [FIPS.180-1.1995]  National Institute of Standards and Technology,\n     \
    \                 \"Secure Hash Standard\", FIPS PUB 180-1,\n                \
    \      April 1995,\n                      <http://www.itl.nist.gov/fipspubs/fip180-1.htm>.\n\
    \   [RFC4186]          Haverinen, H. and J. Salowey, \"Extensible\n          \
    \            Authentication Protocol Method for Global System\n              \
    \        for Mobile Communications (GSM) Subscriber\n                      Identity\
    \ Modules (EAP-SIM)\", RFC 4186,\n                      January 2006.\n   [RFC4284]\
    \          Adrangi, F., Lortz, V., Bari, F., and P. Eronen,\n                \
    \      \"Identity Selection Hints for the Extensible\n                      Authentication\
    \ Protocol (EAP)\", RFC 4284,\n                      January 2006.\n   [RFC4306]\
    \          Kaufman, C., \"Internet Key Exchange (IKEv2)\n                    \
    \  Protocol\", RFC 4306, December 2005.\n   [RFC5113]          Arkko, J., Aboba,\
    \ B., Korhonen, J., and F. Bari,\n                      \"Network Discovery and\
    \ Selection Problem\",\n                      RFC 5113, January 2008.\n   [RFC5247]\
    \          Aboba, B., Simon, D., and P. Eronen, \"Extensible\n               \
    \       Authentication Protocol (EAP) Key Management\n                      Framework\"\
    , RFC 5247, August 2008.\n"
- title: Appendix A.  Changes from RFC 4187
  contents:
  - "Appendix A.  Changes from RFC 4187\n   The changes to RFC 4187 relate only to\
    \ the bidding down prevention\n   support defined in Section 4.  In particular,\
    \ this document does not\n   change how the Master Key (MK) is calculated in RFC\
    \ 4187 (it uses CK\n   and IK, not CK' and IK'); neither is any processing of\
    \ the AMF bit\n   added to RFC 4187.\n"
- title: Appendix B.  Importance of Explicit Negotiation
  contents:
  - "Appendix B.  Importance of Explicit Negotiation\n   Choosing between the traditional\
    \ and revised AKA key derivation\n   functions is easy when their use is unambiguously\
    \ tied to a\n   particular radio access network, e.g., Long Term Evolution (LTE)\
    \ as\n   defined by 3GPP or evolved High Rate Packet Data (eHRPD) as defined\n\
    \   by 3GPP2.  There is no possibility for interoperability problems if\n   this\
    \ radio access network is always used in conjunction with new\n   protocols that\
    \ cannot be mixed with the old ones; clients will always\n   know whether they\
    \ are connecting to the old or new system.\n   However, using the new key derivation\
    \ functions over EAP introduces\n   several degrees of separation, making the\
    \ choice of the correct key\n   derivation functions much harder.  Many different\
    \ types of networks\n   employ EAP.  Most of these networks have no means to carry\
    \ any\n   information about what is expected from the authentication process.\n\
    \   EAP itself is severely limited in carrying any additional\n   information,\
    \ as noted in [RFC4284] and [RFC5113].  Even if these\n   networks or EAP were\
    \ extended to carry additional information, it\n   would not affect millions of\
    \ deployed access networks and clients\n   attaching to them.\n   Simply changing\
    \ the key derivation functions that EAP-AKA [RFC4187]\n   uses would cause interoperability\
    \ problems with all of the existing\n   implementations.  Perhaps it would be\
    \ possible to employ strict\n   separation into domain names that should be used\
    \ by the new clients\n   and networks.  Only these new devices would then employ\
    \ the new key\n   derivation mechanism.  While this can be made to work for specific\n\
    \   cases, it would be an extremely brittle mechanism, ripe to result in\n   problems\
    \ whenever client configuration, routing of authentication\n   requests, or server\
    \ configuration does not match expectations.  It\n   also does not help to assume\
    \ that the EAP client and server are\n   running a particular release of 3GPP\
    \ network specifications.  Network\n   vendors often provide features from future\
    \ releases early or do not\n   provide all features of the current release.  And\
    \ obviously, there\n   are many EAP and even some EAP-AKA implementations that\
    \ are not\n   bundled with the 3GPP network offerings.  In general, these\n  \
    \ approaches are expected to lead to hard-to-diagnose problems and\n   increased\
    \ support calls.\n"
- title: Appendix C.  Test Vectors
  contents:
  - "Appendix C.  Test Vectors\n   Test vectors are provided below for four different\
    \ cases.  The test\n   vectors may be useful for testing implementations.  In\
    \ the first two\n   cases, we employ the Milenage algorithm and the algorithm\n\
    \   configuration parameters (the subscriber key K and operator algorithm\n  \
    \ variant configuration value OP) from test set 19 in [3GPP.35.208].\n   The last\
    \ two cases use artificial values as the output of AKA, and is\n   useful only\
    \ for testing the computation of values within EAP-AKA',\n   not AKA itself.\n\
    \   Case 1\n      The parameters for the AKA run are as follows:\n         Identity:\
    \ \"0555444333222111\"\n         Network name: \"WLAN\"\n         RAND: 81e9 2b6c\
    \ 0ee0 e12e bceb a8d9 2a99 dfa5\n         AUTN: bb52 e91c 747a c3ab 2a5c 23d1\
    \ 5ee3 51d5\n         IK: 9744 871a d32b f9bb d1dd 5ce5 4e3e 2e5a\n         CK:\
    \ 5349 fbe0 9864 9f94 8f5d 2e97 3a81 c00f\n         RES: 28d7 b0f2 a2ec 3de5\n\
    \      Then the derived keys are generated as follows:\n         CK': 0093 962d\
    \ 0dd8 4aa5 684b 045c 9edf fa04\n         IK': ccfc 230c a74f cc96 c0a5 d611 64f5\
    \ a76c\n         K_encr: 766f a0a6 c317 174b 812d 52fb cd11 a179\n         K_aut:\
    \ 0842 ea72 2ff6 835b fa20 3249 9fc3 ec23\n         c2f0 e388 b4f0 7543 ffc6 77f1\
    \ 696d 71ea\n         K_re: cf83 aa8b c7e0 aced 892a cc98 e76a 9b20\n        \
    \ 95b5 58c7 795c 7094 715c b339 3aa7 d17a\n         MSK: 67c4 2d9a a56c 1b79 e295\
    \ e345 9fc3 d187\n         d42b e0bf 818d 3070 e362 c5e9 67a4 d544\n         e8ec\
    \ fe19 358a b303 9aff 03b7 c930 588c\n         055b abee 58a0 2650 b067 ec4e 9347\
    \ c75a\n         EMSK: f861 703c d775 590e 16c7 679e a387 4ada\n         8663\
    \ 11de 2907 64d7 60cf 76df 647e a01c\n         313f 6992 4bdd 7650 ca9b ac14 1ea0\
    \ 75c4\n         ef9e 8029 c0e2 90cd bad5 638b 63bc 23fb\n   Case 2\n      The\
    \ parameters for the AKA run are as follows:\n         Identity: \"0555444333222111\"\
    \n         Network name: \"HRPD\"\n         RAND: 81e9 2b6c 0ee0 e12e bceb a8d9\
    \ 2a99 dfa5\n         AUTN: bb52 e91c 747a c3ab 2a5c 23d1 5ee3 51d5\n        \
    \ IK: 9744 871a d32b f9bb d1dd 5ce5 4e3e 2e5a\n         CK: 5349 fbe0 9864 9f94\
    \ 8f5d 2e97 3a81 c00f\n         RES: 28d7 b0f2 a2ec 3de5\n      Then the derived\
    \ keys are generated as follows:\n         CK': 3820 f027 7fa5 f777 32b1 fb1d\
    \ 90c1 a0da\n         IK': db94 a0ab 557e f6c9 ab48 619c a05b 9a9f\n         K_encr:\
    \ 05ad 73ac 915f ce89 ac77 e152 0d82 187b\n         K_aut: 5b4a caef 62c6 ebb8\
    \ 882b 2f3d 534c 4b35\n         2773 37a0 0184 f20f f25d 224c 04be 2afd\n    \
    \     K_re: 3f90 bf5c 6e5e f325 ff04 eb5e f653 9fa8\n         cca8 3981 94fb d00b\
    \ e425 b3f4 0dba 10ac\n         MSK: 87b3 2157 0117 cd6c 95ab 6c43 6fb5 073f\n\
    \         f15c f855 05d2 bc5b b735 5fc2 1ea8 a757\n         57e8 f86a 2b13 8002\
    \ e057 5291 3bb4 3b82\n         f868 a961 17e9 1a2d 95f5 2667 7d57 2900\n    \
    \     EMSK: c891 d5f2 0f14 8a10 0755 3e2d ea55 5c9c\n         b672 e967 5f4a 66b4\
    \ bafa 0273 79f9 3aee\n         539a 5979 d0a0 042b 9d2a e28b ed3b 17a3\n    \
    \     1dc8 ab75 072b 80bd 0c1d a612 466e 402c\n   Case 3\n      The parameters\
    \ for the AKA run are as follows:\n           Identity:     \"0555444333222111\"\
    \n           Network name: \"WLAN\"\n           RAND:         e0e0 e0e0 e0e0 e0e0\
    \ e0e0 e0e0 e0e0 e0e0\n           AUTN:         a0a0 a0a0 a0a0 a0a0 a0a0 a0a0\
    \ a0a0 a0a0\n           IK:           b0b0 b0b0 b0b0 b0b0 b0b0 b0b0 b0b0 b0b0\n\
    \           CK:           c0c0 c0c0 c0c0 c0c0 c0c0 c0c0 c0c0 c0c0\n          \
    \ RES:          d0d0 d0d0 d0d0 d0d0 d0d0 d0d0 d0d0 d0d0\n        Then the derived\
    \ keys are generated as follows:\n           CK':          cd4c 8e5c 68f5 7dd1\
    \ d7d7 dfd0 c538 e577\n           IK':          3ece 6b70 5dbb f7df c459 a112\
    \ 80c6 5524\n           K_encr:       897d 302f a284 7416 488c 28e2 0dcb 7be4\n\
    \           K_aut:        c407 00e7 7224 83ae 3dc7 139e b0b8 8bb5\n          \
    \               58cb 3081 eccd 057f 9207 d128 6ee7 dd53\n           K_re:    \
    \     0a59 1a22 dd8b 5b1c f29e 3d50 8c91 dbbd\n                         b4ae e230\
    \ 5189 2c42 b6a2 de66 ea50 4473\n           MSK:          9f7d ca9e 37bb 2202\
    \ 9ed9 86e7 cd09 d4a7\n                         0d1a c76d 9553 5c5c ac40 a750\
    \ 4699 bb89\n                         61a2 9ef6 f3e9 0f18 3de5 861a d1be dc81\n\
    \                         ce99 1639 1b40 1aa0 06c9 8785 a575 6df7\n          \
    \ EMSK:         724d e00b db9e 5681 87be 3fe7 4611 4557\n                    \
    \     d501 8779 537e e37f 4d3c 6c73 8cb9 7b9d\n                         c651 bc19\
    \ bfad c344 ffe2 b52c a78b d831\n                         6b51 dacc 5f2b 1440\
    \ cb95 1552 1cc7 ba23\n   Case 4\n      The parameters for the AKA run are as\
    \ follows:\n           Identity:     \"0555444333222111\"\n           Network\
    \ name: \"HRPD\"\n           RAND:         e0e0 e0e0 e0e0 e0e0 e0e0 e0e0 e0e0\
    \ e0e0\n           AUTN:         a0a0 a0a0 a0a0 a0a0 a0a0 a0a0 a0a0 a0a0\n   \
    \        IK:           b0b0 b0b0 b0b0 b0b0 b0b0 b0b0 b0b0 b0b0\n           CK:\
    \           c0c0 c0c0 c0c0 c0c0 c0c0 c0c0 c0c0 c0c0\n           RES:         \
    \ d0d0 d0d0 d0d0 d0d0 d0d0 d0d0 d0d0 d0d0\n        Then the derived keys are generated\
    \ as follows:\n           CK':          8310 a71c e6f7 5488 9613 da8f 64d5 fb46\n\
    \           IK':          5adf 1436 0ae8 3819 2db2 3f6f cb7f 8c76\n          \
    \ K_encr:       745e 7439 ba23 8f50 fcac 4d15 d47c d1d9\n           K_aut:   \
    \     3e1d 2aa4 e677 025c fd86 2a4b e183 61a1\n                         3a64 5765\
    \ 5714 63df 833a 9759 e809 9879\n           K_re:         99da 835e 2ae8 2462\
    \ 576f e651 6fad 1f80\n                         2f0f a119 1655 dd0a 273d a96d\
    \ 04e0 fcd3\n           MSK:          c6d3 a6e0 ceea 951e b20d 74f3 2c30 61d0\n\
    \                         680a 04b0 b086 ee87 00ac e3e0 b95f a026\n          \
    \               83c2 87be ee44 4322 94ff 98af 26d2 cc78\n                    \
    \     3bac e75c 4b0a f7fd feb5 511b a8e4 cbd0\n           EMSK:         7fb5 6813\
    \ 838a dafa 99d1 40c2 f198 f6da\n                         cebf b6af ee44 4961\
    \ 1054 02b5 08c7 f363\n                         352c b291 9644 b504 63e6 a693\
    \ 5415 0147\n                         ae09 cbc5 4b8a 651d 8787 a689 3ed8 536d\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jari Arkko\n   Ericsson\n   Jorvas  02420\n   Finland\n\
    \   EMail: jari.arkko@piuha.net\n   Vesa Lehtovirta\n   Ericsson\n   Jorvas  02420\n\
    \   Finland\n   EMail: vesa.lehtovirta@ericsson.com\n   Pasi Eronen\n   Nokia\
    \ Research Center\n   P.O. Box 407\n   FIN-00045 Nokia Group\n   Finland\n   EMail:\
    \ pasi.eronen@nokia.com\n"
