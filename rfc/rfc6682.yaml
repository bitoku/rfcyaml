- contents:
  - '      RTP Payload Format for Raptor Forward Error Correction (FEC)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies an RTP payload format for the Forward Error\n
    \  Correction (FEC) repair data produced by the Raptor FEC Schemes.\n   Raptor
    FEC Schemes are specified for use with the IETF FEC Framework\n   that supports
    the transport of repair data over both UDP and RTP.\n   This document specifies
    the payload format that is required for the\n   use of RTP to carry Raptor repair
    flows.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by\n   the Internet Engineering Steering Group (IESG).
    \ Further\n   information on Internet Standards is available in Section 2 of\n
    \  RFC 5741.\n   Information about the current status of this document, any\n
    \  errata, and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6682.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Conventions, Definitions, and Acronyms ..........................3\n   3.
    Media Format Background .........................................3\n   4. Payload
    Format for FEC Repair Packets ...........................4\n      4.1. RTP Header
    Usage ...........................................4\n      4.2. Payload Header
    .............................................5\n      4.3. Payload Data ...............................................5\n
    \  5. Congestion Control Considerations ...............................5\n   6.
    Media Types .....................................................5\n      6.1.
    Registration of the 'application/raptorfec' Media Type .....5\n           6.1.1.
    Media Type Definition ...............................5\n      6.2. Registration
    of the 'video/raptorfec' Media Type ...........7\n           6.2.1. Media Type
    Definition ...............................7\n      6.3. Registration of the 'audio/raptorfec'
    Media Type ...........8\n           6.3.1. Media Type Definition ...............................8\n
    \     6.4. Registration of the 'text/raptorfec' Media Type ...........10\n           6.4.1.
    Media Type Definition ..............................10\n   7. Mapping to the Session
    Description Protocol (SDP) ..............12\n   8. Offer/Answer Considerations
    ....................................12\n   9. Declarative SDP Considerations .................................13\n
    \  10. Repair Flow Generation and Recovery Procedures ................13\n      10.1.
    Overview .................................................13\n      10.2. Repair
    Packet Construction ...............................14\n      10.3. Usage of RTCP
    ............................................14\n      10.4. Source Packet Reconstruction
    .............................14\n   11. Session Description Protocol (SDP) Example
    ....................14\n   12. IANA Considerations ...........................................15\n
    \  13. Security Considerations .......................................15\n   14.
    References ....................................................16\n      14.1.
    Normative References .....................................16\n      14.2. Informative
    References ...................................17\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The FEC Framework [RFC6363] defines a general framework
    for the use\n   of Forward Error Correction in association with arbitrary packet\n
    \  flows, including flows over UDP and RTP [RFC3550].  Forward Error\n   Correction
    operates by generating redundant data packets (\"repair\n   data\") that can be
    sent independently from the original flow.  At a\n   receiver, the original flow
    can be reconstructed provided a\n   sufficient set of redundant data packets and
    possibly original data\n   packets are received.\n   The FEC Framework provides
    for independence between application\n   protocols and FEC codes.  The use of
    a particular FEC code within the\n   framework is defined by means of a FEC Scheme,
    which may then be used\n   with any application protocol compliant to the framework.\n
    \  Repair data flows may be sent directly over a transport protocol,\n   such
    as UDP, or they may be encapsulated within specialized\n   transports for multimedia,
    such as RTP.\n   This document defines the RTP payload format for the Raptor FEC\n
    \  Schemes defined in [RFC6681].\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions, Definitions, and Acronyms\n   The key words \"MUST\", \"MUST
    NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
    \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
    as described in [RFC2119].\n"
  title: 2.  Conventions, Definitions, and Acronyms
- contents:
  - "3.  Media Format Background\n   The Raptor and RaptorQ codes are efficient block-based
    fountain\n   codes, meaning that from any group of source packets (or 'source\n
    \  block'), one can generate an arbitrary number of repair packets.  The\n   Raptor
    and RaptorQ codes have the property that the original group of\n   source symbols
    can be recovered with a very high probability from any\n   set of symbols (source
    and repair) only slightly greater in number\n   than the original number of source
    symbols.  The RaptorQ code\n   additionally has the property that the probability
    that the original\n   group of source symbols can be recovered from a set of symbols\n
    \  (source and repair) equal in number to the original number of source\n   symbols
    is in many cases also very high.\n   [RFC6681] defines six FEC Schemes for the
    use of the Raptor and\n   RaptorQ codes with arbitrary packet flows.  The first
    two schemes are\n   fully applicable to arbitrary packet flows (using Raptor and
    RaptorQ\n   respectively).  The third and fourth schemes are slightly optimized\n
    \  versions of the first two schemes, which are applicable in\n   applications
    with relatively small block sizes.  The fifth and sixth\n   schemes are variants
    of the third and fourth schemes, which are\n   applicable to a single source flow
    that already has some kind of\n   identifiable sequence number.  The presence
    of a sequence number in\n   the source flow allows for backwards-compatible operation
    (the source\n   flows do not need to be modified in order to apply FEC).  In this\n
    \  case, in the language of the FEC Framework, there is no need for an\n   explicit
    FEC Source Payload ID; therefore, it is not included in the\n   packets.\n   This
    document specifies the payload format for RTP repair flows and\n   can be used
    with any of the FEC Schemes defined in [RFC6681].\n"
  title: 3.  Media Format Background
- contents:
  - '4.  Payload Format for FEC Repair Packets

    '
  - contents:
    - "4.1.  RTP Header Usage\n   Header fields SHALL be set according to the rules
      of [RFC3550].  In\n   addition, the following rules and definitions apply for
      the RTP\n   headers used with FEC repair packets:\n   o  Marker bit: The marker
      bit SHALL be set to 1 for the last\n      protection RTP packet sent for each
      source block, and otherwise\n      set to 0.\n   o  Payload Type (PT): The payload
      type codes SHALL be assigned\n      dynamically through non-RTP means.  If the
      Session Description\n      Protocol (SDP) is used for signaling, the rules in
      Section 7\n      apply.\n   o  Timestamp: This field contains the time at which
      the packet is\n      transmitted.  The time SHOULD be as close as possible to
      the\n      packet's actual time of transmission.  The timestamp value has no\n
      \     use in the actual FEC protection process.  However,\n      implementations
      SHOULD supply a value that can be used for packet-\n      arrival timing or
      jitter calculations.  The timestamp rate is\n      specified using the \"rate\"
      media type parameter defined in Section\n      6.  The operator SHALL select
      a \"rate\" larger than 1000 Hz to\n      provide sufficient resolution to the
      Real-Time Transport Control\n      Protocol (RTCP) operations, and the operator
      SHOULD select the\n      rate that matches the rate of the protected source
      RTP stream.\n   o  Synchronization Source (SSRC): The SSRC values MUST be set\n
      \     according to [RFC3550].  The SSRC value of the RTP repair flow\n      MUST
      be different from the SSRC value of the protected source\n      flow.\n"
    title: 4.1.  RTP Header Usage
  - contents:
    - "4.2.  Payload Header\n   There is no payload header in this payload format.\n"
    title: 4.2.  Payload Header
  - contents:
    - "4.3.  Payload Data\n   Procedures and data formats for the use of Raptor Forward
      Error\n   Correction in a FECFRAME context are fully defined in [RFC6363] and\n
      \  [RFC6681] and are not duplicated here.  The procedures of those\n   documents
      apply in order to generate repair data streams to be\n   carried by the payload
      formats defined in this document.\n   The RTP Payload SHALL contain a Repair
      FEC Payload ID as defined in\n   [RFC6363] and [RFC6681].\n"
    title: 4.3.  Payload Data
  title: 4.  Payload Format for FEC Repair Packets
- contents:
  - "5.  Congestion Control Considerations\n   See [RFC6363].\n"
  title: 5.  Congestion Control Considerations
- contents:
  - '6.  Media Types

    '
  - contents:
    - "6.1.  Registration of the 'application/raptorfec' Media Type\n   This RTP payload
      format is identified using the\n   'application/raptorfec' media type that is
      registered in accordance\n   with [RFC4855] and uses the template of [RFC4288].\n"
    - contents:
      - "6.1.1.  Media Type Definition\n   Type name: application\n   Subtype name:
        raptorfec\n   Required parameters:\n   o  rate: The RTP timestamp (clock)
        rate.  The RTP timestamp (clock)\n      rate is specified in Hz and the format
        is unsigned integer.\n   o  raptor-scheme-id: The value of this parameter
        is the FEC Scheme ID\n      for the specific Raptor FEC Scheme that will be
        used as defined in\n      [RFC6681].\n   o  Kmax: The value of this parameter
        is the FEC Framework\n      Configuration Information element, Maximum Source
        Block Length\n      (MSBL), as defined in [RFC6681], encoded as a unsigned
        integer.\n      For specific requirements for this value, refer to [RFC6681].\n
        \  o  T: The value of this parameter is the FEC Framework Configuration\n
        \     Information element, encoding symbol size, as defined in\n      [RFC6681],
        encoded as a unsigned integer.  For specific\n      requirements for this
        value, refer to [RFC6681].\n   o  repair-window: The maximum time that spans
        the source packets and\n      the corresponding repair packets.  The size
        of the repair window\n      is specified in microseconds and the format is
        unsigned integer.\n   Optional parameters:\n   o  P: The value of this parameter
        is the FEC Framework Configuration\n      Information element, Payload ID
        Format, as defined in [RFC6681].\n      The default value of this parameter
        (when it does not appear\n      explicitly) is 'A'.\n   Encoding considerations:
        This media type is framed and binary; see\n   Section 4.8 in [RFC4288]\n   Security
        considerations: Please see the security considerations in\n   [RFC6363].\n
        \  Interoperability considerations:\n   Published specification: [RFC6681]\n
        \  Applications that use this media type: Real-time multimedia\n   applications
        like video streaming, audio streaming, and video\n   conferencing.\n   Additional
        information:\n   Magic number(s): <none defined>\n   File extension(s): <none
        defined>\n   Macintosh file type code(s): <none defined>\n   Person & email
        address to contact for further information:\n   Thomas Stockhammer, stockhammer@nomor.de\n
        \  Intended usage: COMMON\n   Restrictions on usage: This media type depends
        on RTP framing, and\n   hence is only defined for transfer via RTP [RFC3550].
        \ Transport\n   within other framing protocols is not defined at this time.\n
        \  Author: Thomas Stockhammer, Nomor Research\n   Change controller: IETF
        PAYLOAD working group delegated from the\n   IESG.\n"
      title: 6.1.1.  Media Type Definition
    title: 6.1.  Registration of the 'application/raptorfec' Media Type
  - contents:
    - "6.2.  Registration of the 'video/raptorfec' Media Type\n   This RTP payload
      format is identified using the 'video/raptorfec'\n   media type that is registered
      in accordance with [RFC4855] and uses\n   the template of [RFC4288].\n"
    - contents:
      - "6.2.1.  Media Type Definition\n   Type name: video\n   Subtype name: raptorfec\n
        \  Required parameters:\n   o  rate: The RTP timestamp (clock) rate.  The
        RTP timestamp (clock)\n      rate is specified in Hz and the format is unsigned
        integer.\n   o  raptor-scheme-id: The value of this parameter is the FEC Scheme
        ID\n      for the specific Raptor FEC Scheme that will be used as defined
        in\n      [RFC6681].\n   o  Kmax: The value of this parameter is the FEC Framework\n
        \     Configuration Information element, MSBL, as defined in [RFC6681],\n
        \     encoded as a unsigned integer.  For specific requirements for this\n
        \     value, refer to [RFC6681].\n   o  T: The value of this parameter is
        the FEC Framework Configuration\n      Information element, encoding symbol
        size, as defined in\n      [RFC6681], encoded as a unsigned integer.  For
        specific\n      requirements for this value, refer to [RFC6681].\n   o  repair-window:
        The maximum time that spans the source packets and\n      the corresponding
        repair packets.  The size of the repair window\n      is specified in microseconds,
        and the format is unsigned integer.\n   Optional parameters:\n   o  P: The
        value of this parameter is the FEC Framework Configuration\n      Information
        element, Payload ID Format, as defined in [RFC6681].\n      The default value
        of this parameter (when it does not appear\n      explicitly) is 'A'.\n   Encoding
        considerations: This media type is framed and binary; see\n   Section 4.8
        in [RFC4288].\n   Security considerations: Please see the security considerations
        in\n   [RFC6363].\n   Interoperability considerations:\n   Published specification:
        [RFC6681]\n   Applications that use this media type: Real-time multimedia\n
        \  applications like video streaming, audio streaming, and video\n   conferencing.\n
        \  Additional information:\n   Magic number(s): <none defined>\n   File extension(s):
        <none defined>\n   Macintosh file type code(s): <none defined>\n   Person
        & email address to contact for further information:\n   Thomas Stockhammer,
        stockhammer@nomor.de\n   Intended usage: COMMON\n   Restrictions on usage:
        This media type depends on RTP framing, and\n   hence is only defined for
        transfer via RTP [RFC3550].  Transport\n   within other framing protocols
        is not defined at this time.\n   Author: Thomas Stockhammer, Nomor Research.\n
        \  Change controller: IETF PAYLOAD working group delegated from the\n   IESG.\n"
      title: 6.2.1.  Media Type Definition
    title: 6.2.  Registration of the 'video/raptorfec' Media Type
  - contents:
    - "6.3.  Registration of the 'audio/raptorfec' Media Type\n   This RTP payload
      format is identified using the 'audio/raptorfec'\n   media type that is registered
      in accordance with [RFC4855] and uses\n   the template of [RFC4288].\n"
    - contents:
      - "6.3.1.  Media Type Definition\n   Type name: audio\n   Subtype name: raptorfec\n
        \  Required parameters:\n   o  rate: The RTP timestamp (clock) rate.  The
        RTP timestamp (clock)\n      rate is specified in Hz and the format is unsigned
        integer.\n   o  raptor-scheme-id: The value of this parameter is the FEC Scheme
        ID\n      for the specific Raptor FEC Scheme that will be used as defined
        in\n      [RFC6681].\n   o  Kmax: The value of this parameter is the FEC Framework\n
        \     Configuration Information element, MSBL, as defined in [RFC6681],\n
        \     encoded as a unsigned integer.  For specific requirements for this\n
        \     value, refer to [RFC6681].\n   o  T: The value of this parameter is
        the FEC Framework Configuration\n      Information element, encoding symbol
        size, as defined in\n      [RFC6681], encoded as a unsigned integer.  For
        specific\n      requirements for this value, refer to [RFC6681].\n   o  repair-window:
        The maximum time that spans the source packets and\n      the corresponding
        repair packets.  The size of the repair window\n      is specified in microseconds
        and the format is unsigned integer.\n   Optional parameters:\n   o  P: The
        value of this parameter is the FEC Framework Configuration\n      Information
        element, Payload ID Format, as defined in [RFC6681].\n      The default value
        of this parameter (when it does not appear\n      explicitly) is 'A'.\n   Encoding
        considerations: This media type is framed and binary; see\n   Section 4.8
        in [RFC4288].\n   Security considerations: Please see the security considerations
        in\n   [RFC6363].\n   Interoperability considerations:\n   Published specification:
        [RFC6681]\n   Applications that use this media type: Real-time multimedia\n
        \  applications like video streaming, audio streaming, and video\n   conferencing.\n
        \  Additional information:\n   Magic number(s): <none defined>\n   File extension(s):
        <none defined>\n   Macintosh file type code(s): <none defined>\n   Person
        & email address to contact for further information:\n   Thomas Stockhammer,
        stockhammer@nomor.de\n   Intended usage: COMMON\n   Restrictions on usage:
        This media type depends on RTP framing, and\n   hence is only defined for
        transfer via RTP [RFC3550].  Transport\n   within other framing protocols
        is not defined at this time.\n   Author: Thomas Stockhammer, Nomor Research.\n
        \  Change controller: IETF PAYLOAD working group delegated from the\n   IESG.\n"
      title: 6.3.1.  Media Type Definition
    title: 6.3.  Registration of the 'audio/raptorfec' Media Type
  - contents:
    - "6.4.  Registration of the 'text/raptorfec' Media Type\n   This RTP payload
      format is identified using the 'text/raptorfec'\n   media type that is registered
      in accordance with [RFC4855] and uses\n   the template of [RFC4288].\n"
    - contents:
      - "6.4.1.  Media Type Definition\n   Type name: text\n   Subtype name: raptorfec\n
        \  Required parameters:\n   o  rate: The RTP timestamp (clock) rate.  The
        RTP timestamp (clock)\n      rate is specified in Hz and the format is unsigned
        integer.\n   o  raptor-scheme-id: The value of this parameter is the FEC Scheme
        ID\n      for the specific Raptor FEC Scheme that will be used as defined
        in\n      [RFC6681].\n   o  Kmax: The value of this parameter is the FEC Framework\n
        \     Configuration Information element, MSBL, as defined in [RFC6681],\n
        \     encoded as a unsigned integer.  For specific requirements for this\n
        \     value, refer to [RFC6681].\n   o  T: The value of this parameter is
        the FEC Framework Configuration\n      Information element, encoding symbol
        size, as defined in\n      [RFC6681], encoded as a unsigned integer.  For
        specific\n      requirements for this value, refer to [RFC6681].\n   o  repair-window:
        The maximum time that spans the source packets and\n      the corresponding
        repair packets.  The size of the repair window\n      is specified in microseconds
        and the format is unsigned integer.\n   Optional parameters:\n   o  P: The
        value of this parameter is the FEC Framework Configuration\n      Information
        element, Payload ID Format, as defined in [RFC6681].\n      The default value
        of this parameter (when it does not appear\n      explicitly) is 'A'.\n   Encoding
        considerations: This media type is framed and binary; see\n   Section 4.8
        in [RFC4288].\n   Security considerations: Please see the security considerations
        in\n   [RFC6363].\n   Interoperability considerations:\n   Published specification:
        [RFC6681]\n   Applications that use this media type: Real-time multimedia\n
        \  applications like video streaming, audio streaming, and video\n   conferencing.\n
        \  Additional information:\n   Magic number(s): <none defined>\n   File extension(s):
        <none defined>\n   Macintosh file type code(s): <none defined>\n   Person
        & email address to contact for further information:\n   Thomas Stockhammer,
        stockhammer@nomor.de\n   Intended usage: COMMON\n   Restrictions on usage:
        This media type depends on RTP framing, and\n   hence is only defined for
        transfer via RTP [RFC3550].  Transport\n   within other framing protocols
        is not defined at this time.\n   Author: Thomas Stockhammer, Nomor Research.\n
        \  Change controller: IETF PAYLOAD working group delegated from the\n   IESG.\n"
      title: 6.4.1.  Media Type Definition
    title: 6.4.  Registration of the 'text/raptorfec' Media Type
  title: 6.  Media Types
- contents:
  - "7.  Mapping to the Session Description Protocol (SDP)\n   Applications that are
    using RTP transport commonly use the Session\n   Description Protocol (SDP) [RFC4566]
    to describe their RTP sessions.\n   The information that is used to specify the
    media types in an RTP\n   session has specific mappings to the fields in an SDP
    description.\n   Note that if an application does not use SDP to describe the
    RTP\n   sessions, an appropriate mapping must be defined and used to specify\n
    \  the media types and their parameters for the control/description\n   protocol
    employed by the application.\n   The mapping of the above defined payload format
    media type and its\n   parameters SHALL be done according to Section 3 of [RFC4855],\n
    \  following the suggestion therein regarding the mapping of payload-\n   format-specific
    parameters into the \"a=fmtp\" field.\n   When the RTP payload formats defined
    in this document are used, the\n   media type parameters defined above MUST use
    the media types in this\n   document and MUST NOT use those specified in [RFC6364].\n"
  title: 7.  Mapping to the Session Description Protocol (SDP)
- contents:
  - "8.  Offer/Answer Considerations\n   When offering Raptor FEC over RTP using SDP
    in an Offer/Answer model\n   [RFC3264], the following considerations apply:\n
    \  o  Each combination of the Kmax and T parameters produces different\n      FEC
    data and is not compatible with any other combination.  A\n      sender application
    MAY desire to provide multiple offers with\n      different sets of Kmax and T
    values, which is possible as long as\n      the parameter values are valid.  The
    receiver SHOULD normally\n      choose the offer with the largest value of the
    product of Kmax and\n      T that it supports.\n   o  The size of the repair window
    is related to the maximum delay\n      between the transmission of a source packet
    and the associated\n      repair packet.  This directly impacts the buffering
    requirement on\n      the receiver side and the receiver must consider this when\n
    \     choosing an offer.\n   o  When the P parameter is not present, the receiver
    MUST use FEC\n      Payload ID Format A.  In an answer that selects an offer in
    which\n      the P parameter was omitted, the P parameter MUST either be\n      omitted,
    or included with value \"A\".\n"
  title: 8.  Offer/Answer Considerations
- contents:
  - "9.  Declarative SDP Considerations\n   In declarative usage, like SDP in the
    Real-Time Streaming Protocol\n   (RTSP) [RFC2326] or the Session Announcement
    Protocol (SAP)\n   [RFC2974], the following considerations apply:\n   o  The payload
    format configuration parameters are all declarative\n      and a participant MUST
    use the configuration that is provided for\n      the session.\n   o  More than
    one configuration MAY be provided (if desired) by\n      declaring multiple RTP
    payload types.  In this case, the receivers\n      should choose the repair session
    that is best for them.\n"
  title: 9.  Declarative SDP Considerations
- contents:
  - '10.  Repair Flow Generation and Recovery Procedures

    '
  - contents:
    - "10.1.  Overview\n   This document only specifies repair flow construction when
      the repair\n   packets are delivered with RTP.  Source packet construction is\n
      \  covered in [RFC6681].  This section provides an overview on how to\n   generate
      a repair flow, including the repair packets and how to\n   reconstruct missing
      source packets from a set of available source and\n   repair packets.  Detailed
      algorithms for the generation of Raptor and\n   RaptorQ symbols are provided
      in [RFC5053] and [RFC6330],\n   respectively.\n   As per the FEC Framework document
      [RFC6363], the FEC Framework\n   Configuration Information includes, among others,
      the identification\n   of the repair flow(s) and the source flow(s).  Methods
      to convey FEC\n   Framework Configuration Information are provided in [FEC-SIG].\n
      \  Specifically, the reader is referred to the SDP elements document\n   [RFC6364],
      which describes the usage of the 'SDP' encoding format as\n   an example encoding
      format for FEC Framework Configuration\n   Information.\n   For the generation
      of a repair flow:\n   o  repair packets SHALL be constructed according to Section
      10.2, and\n   o  RTCP SHALL be used according to Section 10.3.\n   For the reconstruction
      of a source packet of a source RTP session at\n   the receiver, based on the
      availability of a source RTP session and a\n   repair RTP session, the procedures
      in Section 10.4 may be used.\n"
    title: 10.1.  Overview
  - contents:
    - "10.2.  Repair Packet Construction\n   The construction of the repair packet
      is fully specified in Section\n   4.  A repair packet is constructed by the
      concatenation of\n   o  an RTP header as specified in Section 4.1, and\n   o
      \ payload data as defined in Section 4.3.\n   Repair Packet Construction may
      make use of the Sender Operation for\n   RTP repair flows as specified in see
      [RFC6363], Section 4.2.\n"
    title: 10.2.  Repair Packet Construction
  - contents:
    - "10.3.  Usage of RTCP\n   RTCP SHALL be used according to [RFC3550].  If the
      repair RTP session\n   is sent in a separate RTP session, the two sessions MUST
      be\n   associated using RTCP CNAME (Canonical Name).\n"
    title: 10.3.  Usage of RTCP
  - contents:
    - "10.4.  Source Packet Reconstruction\n   Source Packet Reconstruction may make
      use of the receiver operation\n   for the case of RTP repair flows as specified
      in [RFC6363], Section\n   4.3.  Depending on the FEC Scheme using the ones defined
      in\n   [RFC6681], the appropriate source blocks are formed.  If enough data\n
      \  for decoding any or all of the missing source payloads in the source\n   block
      has been received, the respective FEC decoding procedures are\n   applied.\n
      \  In case the FEC Scheme uses Raptor codes as defined in [RFC5053],\n   then
      the Example FEC Decoder, as specified in [RFC5053], Section 5.5,\n   may be
      used.\n   In case the FEC Scheme uses RaptorQ codes as defined in [RFC6330],\n
      \  then the Example FEC Decoder, as specified in [RFC6330], Section 5.4,\n   may
      be used.\n"
    title: 10.4.  Source Packet Reconstruction
  title: 10.  Repair Flow Generation and Recovery Procedures
- contents:
  - "11.  Session Description Protocol (SDP) Example\n   This section provides an
    SDP [RFC4566] example.  Assume we have one\n   source video stream (mid:S1) and
    one FEC repair stream (mid:R1).  The\n   'group' attribute and the FEC grouping
    semantics defined in [RFC5888]\n   and [RFC5956], respectively, are used to associate
    source and repair\n   flows.  We form one FEC group with the \"a=group:FEC S1
    R1\" line.  The\n   source and repair streams are sent to the same port on different\n
    \  multicast groups.  The repair window is set to 200 ms.\n   v=0\n   o=ali 1122334455
    1122334466 IN IP4 fec.example.com\n   s=Raptor RTP FEC Example\n   t=0 0\n   a=group:FEC-FR
    S1 R1\n   m=video 30000 RTP/AVP 100\n   c=IN IP4 233.252.0.1/127\n   a=rtpmap:100
    MP2T/90000\n   a=fec-source-flow: id=0\n   a=mid:S1\n   m=application 30000 RTP/AVP
    110\n   c=IN IP4 233.252.0.2/127\n   a=rtpmap:110 raptorfec/90000\n   a=fmtp:110
    raptor-scheme-id=1; Kmax=8192; T=128;\n           P=A; repair-window=200000\n
    \  a=mid:R1\n"
  title: 11.  Session Description Protocol (SDP) Example
- contents:
  - "12.  IANA Considerations\n   IANA has registered 'application/raptorfec' as specified
    in Section\n   6.1.1, 'video/raptorfec' as specified in Section 6.2.1,\n   'audio/raptorfec'
    as specified in Section 6.3.1, and 'text/raptorfec'\n   as specified in Section
    6.4.1.  The media type has also been added to\n   the IANA registry for \"RTP
    Payload Format media types\"\n   (http://www.iana.org/assignments/rtp-parameters).\n"
  title: 12.  IANA Considerations
- contents:
  - "13.  Security Considerations\n   Security Considerations related to the use of
    the FEC Framework are\n   addressed in [RFC6363].  These considerations apply
    in full to users\n   of the RTP payload formats defined in this document, since
    these are\n   defined in terms of the FEC Framework.\n   No further security considerations
    related specifically to the Raptor\n   FEC Schemes defined in [RFC6681] have been
    identified.\n   RTP packets using the payload format defined in this specification\n
    \  are subject to the security considerations discussed in the RTP\n   specification
    [RFC3550] and in any applicable RTP profile.  The main\n   security considerations
    for the RTP packet carrying the RTP payload\n   format defined within this memo
    are confidentiality, integrity, and\n   source authenticity.  Confidentiality
    is achieved by encrypting the\n   RTP payload.  Integrity of the RTP packets is
    achieved through a\n   suitable cryptographic integrity protection mechanism.
    \ Such a\n   cryptographic system can also allow the authentication of the source\n
    \  of the payload.  A suitable security mechanism for this RTP payload\n   format
    should provide confidentiality, integrity protection, and at\n   least source
    authentication capable of determining if an RTP packet\n   is from a member of
    the RTP session.  Note that the appropriate\n   mechanism to provide security
    to RTP and payloads following this memo\n   MAY vary.  It is dependent on the
    application, transport, and\n   signaling protocol employed.  Therefore, a single
    mechanism is not\n   sufficient; although, if suitable, using the Secure Real-Time\n
    \  Transport Protocol (SRTP) [RFC3711] is RECOMMENDED.  Other mechanisms\n   that
    may be used are IPsec [RFC4301] and Transport Layer Security\n   (TLS) [RFC5246]
    (RTP over TCP); other alternatives exist.\n"
  title: 13.  Security Considerations
- contents:
  - '14.  References

    '
  - contents:
    - "14.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n              Jacobson,
      \"RTP: A Transport Protocol for Real-Time\n              Applications\", STD
      64, RFC 3550, July 2003.\n   [RFC4288]  Freed, N. and J. Klensin, \"Media Type
      Specifications and\n              Registration Procedures\", BCP 13, RFC 4288,
      December 2005.\n   [RFC4855]  Casner, S., \"Media Type Registration of RTP Payload\n
      \             Formats\", RFC 4855, February 2007.\n   [RFC6363]  Watson, M.,
      Begen, A., and V. Roca, \"Forward Error\n              Correction (FEC) Framework\",
      RFC 6363, October 2011.\n   [RFC6364]  Begen, A., \"Session Description Protocol
      Elements for the\n              Forward Error Correction (FEC) Framework\",
      RFC 6364,\n              October 2011.\n   [RFC6681]  Watson, M., Stockhammer,
      T., and M. Luby, \"Raptor Forward\n              Error Correction (FEC) Schemes
      for FECFRAME\", RFC 6681,\n              August 2012.\n   [RFC4566]  Handley,
      M., Jacobson, V., and C. Perkins, \"SDP: Session\n              Description
      Protocol\", RFC 4566, July 2006.\n   [RFC3264]  Rosenberg, J. and H. Schulzrinne,
      \"An Offer/Answer Model\n              with Session Description Protocol (SDP)\",
      RFC 3264, June\n              2002.\n   [RFC3711]  Baugher, M., McGrew, D.,
      Naslund, M., Carrara, E., and K.\n              Norrman, \"The Secure Real-time
      Transport Protocol (SRTP)\",\n              RFC 3711, March 2004.\n   [RFC4301]
      \ Kent, S. and K. Seo, \"Security Architecture for the\n              Internet
      Protocol\", RFC 4301, December 2005.\n   [RFC5246]  Dierks, T. and E. Rescorla,
      \"The Transport Layer Security\n              (TLS) Protocol Version 1.2\",
      RFC 5246, August 2008.\n   [RFC5053]  Luby, M., Shokrollahi, A., Watson, M.,
      and T. Stockhammer,\n              \"Raptor Forward Error Correction Scheme
      for Object\n              Delivery\", RFC 5053, October 2007.\n   [RFC6330]
      \ Luby, M., Shokrollahi, A., Watson, M., Stockhammer, T.,\n              and
      L. Minder, \"RaptorQ Forward Error Correction Scheme\n              for Object
      Delivery\", RFC 6330, August 2011.\n"
    title: 14.1.  Normative References
  - contents:
    - "14.2.  Informative References\n   [RFC2326]  Schulzrinne, H., Rao, A., and
      R. Lanphier, \"Real Time\n              Streaming Protocol (RTSP)\", RFC 2326,
      April 1998.\n   [RFC2974]  Handley, M., Perkins, C., and E. Whelan, \"Session\n
      \             Announcement Protocol\", RFC 2974, October 2000.\n   [RFC5888]
      \ Camarillo, G. and H. Schulzrinne, \"The Session Description\n              Protocol
      (SDP) Grouping Framework\", RFC 5888, June 2010.\n   [RFC5956]  Begen, A., \"Forward
      Error Correction Grouping Semantics in\n              the Session Description
      Protocol\", RFC 5956, September\n              2010.\n   [FEC-SIG]  Asati, R.,
      \"Methods to convey FEC Framework Configuration\n              Information\",
      Work in Progress, February 2012.\n"
    title: 14.2.  Informative References
  title: 14.  References
- contents:
  - "Authors' Addresses\n   Mark Watson\n   Netflix\n   100 Winchester Circle\n   Los
    Gatos, CA 95032\n   United States\n   EMail: watsonm@netflix.com\n   Thomas Stockhammer\n
    \  Nomor Research\n   Brecherspitzstrasse 8\n   Munich 81541\n   Germany\n   EMail:
    stockhammer@nomor.de\n   Michael Luby\n   Qualcomm Research Berkeley\n   2030
    Addison Street\n   Berkeley, CA 94704\n   United States\n   EMail: luby@qualcomm.com\n"
  title: Authors' Addresses
