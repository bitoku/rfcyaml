- title: __initial_text__
  contents:
  - "              Stream Control Transmission Protocol (SCTP)\n                 \
    \   Dynamic Address Reconfiguration\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   A local host may have multiple points of attachment to the Internet,\n\
    \   giving it a degree of fault tolerance from hardware failures.  Stream\n  \
    \ Control Transmission Protocol (SCTP) (RFC 4960) was developed to take\n   full\
    \ advantage of such a multi-homed host to provide a fast failover\n   and association\
    \ survivability in the face of such hardware failures.\n   This document describes\
    \ an extension to SCTP that will allow an SCTP\n   stack to dynamically add an\
    \ IP address to an SCTP association,\n   dynamically delete an IP address from\
    \ an SCTP association, and to\n   request to set the primary address the peer\
    \ will use when sending to\n   an endpoint.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Conventions  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Serial Number Arithmetic . . . . . . . . . . . . . . .\
    \ . . . .  4\n   4.  Additional Chunks and Parameters . . . . . . . . . . . .\
    \ . . .  4\n     4.1.  New Chunk Types  . . . . . . . . . . . . . . . . . . .\
    \ . .  4\n       4.1.1.  Address Configuration Change Chunk (ASCONF)  . . . .\
    \ .  5\n       4.1.2.  Address Configuration Acknowledgment Chunk\n          \
    \     (ASCONF-ACK) . . . . . . . . . . . . . . . . . . . . .  6\n     4.2.  New\
    \ Parameter Types  . . . . . . . . . . . . . . . . . . .  7\n       4.2.1.  Add\
    \ IP Address . . . . . . . . . . . . . . . . . . . .  8\n       4.2.2.  Delete\
    \ IP Address  . . . . . . . . . . . . . . . . . .  9\n       4.2.3.  Error Cause\
    \ Indication . . . . . . . . . . . . . . . . 10\n       4.2.4.  Set Primary IP\
    \ Address . . . . . . . . . . . . . . . . 11\n       4.2.5.  Success Indication\
    \ . . . . . . . . . . . . . . . . . . 12\n       4.2.6.  Adaptation Layer Indication\
    \  . . . . . . . . . . . . . 13\n       4.2.7.  Supported Extensions Parameter\
    \ . . . . . . . . . . . . 13\n     4.3.  New Error Causes . . . . . . . . . .\
    \ . . . . . . . . . . . 14\n       4.3.1.  Error Cause: Request to Delete Last\
    \ Remaining IP\n               Address  . . . . . . . . . . . . . . . . . . .\
    \ . . . . 15\n       4.3.2.  Error Cause: Operation Refused Due to Resource\n\
    \               Shortage . . . . . . . . . . . . . . . . . . . . . . . 15\n  \
    \     4.3.3.  Error Cause: Request to Delete Source IP Address . . . 16\n    \
    \   4.3.4.  Error Cause: Association Aborted Due to Illegal\n               ASCONF-ACK\
    \ . . . . . . . . . . . . . . . . . . . . . . 17\n       4.3.5.  Error Cause:\
    \ Request Refused - No Authorization. . . . 17\n   5.  Procedures . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . 18\n     5.1.  ASCONF Chunk Procedures\
    \  . . . . . . . . . . . . . . . . . 18\n       5.1.1.  Congestion Control of\
    \ ASCONF Chunks  . . . . . . . . . 20\n     5.2.  Upon Reception of an ASCONF\
    \ Chunk  . . . . . . . . . . . . 21\n     5.3.  General Rules for Address Manipulation\
    \ . . . . . . . . . . 24\n       5.3.1.  A Special Case for OOTB ABORT Chunks\
    \ . . . . . . . . . 29\n       5.3.2.  A Special Case for Changing an Address\
    \ . . . . . . . . 29\n     5.4.  Setting of the Primary Address . . . . . . .\
    \ . . . . . . . 29\n     5.5.  Bundling of Multiple ASCONFs . . . . . . . . .\
    \ . . . . . . 30\n   6.  Security Considerations  . . . . . . . . . . . . . .\
    \ . . . . . 30\n   7.  IANA Considerations  . . . . . . . . . . . . . . . . .\
    \ . . . . 33\n   8.  Acknowledgments  . . . . . . . . . . . . . . . . . . . .\
    \ . . . 34\n   9.  References . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 35\n     9.1.  Normative References . . . . . . . . . . . . . . . . . .\
    \ . 35\n     9.2.  Informative References . . . . . . . . . . . . . . . . . .\
    \ 35\n   Appendix A.  Abstract Address Handling . . . . . . . . . . . . . . 36\n\
    \     A.1.  General Remarks  . . . . . . . . . . . . . . . . . . . . . 36\n  \
    \   A.2.  Generalized Endpoints  . . . . . . . . . . . . . . . . . . 36\n    \
    \ A.3.  Associations . . . . . . . . . . . . . . . . . . . . . . . 37\n     A.4.\
    \  Relationship with RFC 4960 . . . . . . . . . . . . . . . . 38\n     A.5.  Rules\
    \ for Address Manipulation . . . . . . . . . . . . . . 38\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A local host may have multiple points of attachment to the\
    \ Internet,\n   giving it a degree of fault tolerance from hardware failures.\
    \  SCTP\n   was developed to take full advantage of such a multi-homed host to\n\
    \   provide a fast failover and association survivability in the face of\n   such\
    \ hardware failures.  However, many modern computers allow for the\n   dynamic\
    \ addition and deletion of network cards (sometimes termed a\n   hot-pluggable\
    \ interface).  Complicate this with the ability of a\n   provider, in IPv6, to\
    \ dynamically renumber a network, and there still\n   is a gap between full-fault\
    \ tolerance and the currently defined SCTP\n   protocol.  No matter if a card\
    \ is added or an interface is\n   renumbered, in order to take advantage of this\
    \ new configuration, the\n   transport association must be restarted.  For many\
    \ fault-tolerant\n   applications this restart is considered an outage and is\
    \ undesirable.\n   This document describes an extension to SCTP to attempt to\
    \ correct\n   this problem for the more demanding fault-tolerant application.\
    \  This\n   extension will allow an SCTP stack to:\n   o  Dynamically add an IP\
    \ address to an association.\n   o  Dynamically delete an IP address from an association.\n\
    \   o  Request to set the primary address the peer will use when sending\n   \
    \   to an endpoint.\n   The dynamic addition and subtraction of IP addresses allows\
    \ an SCTP\n   association to continue to function through host and network\n \
    \  reconfigurations.  These changes, brought on by provider or user\n   action,\
    \ may mean that the peer would be better served by using the\n   newly added address;\
    \ however, this information may only be known by\n   the endpoint that had the\
    \ reconfiguration occur.  In such a case this\n   extension allows the local endpoint\
    \ to advise the peer as to what it\n   thinks is the better primary address that\
    \ the peer should be using.\n   One last thing this extension adds is a small,\
    \ 32-bit integer called\n   an adaptation indication that can be exchanged at\
    \ startup.  This is\n   useful for applications where there are one or more specific\
    \ layers\n   below the application, yet still above SCTP.  In such a case, the\n\
    \   exchange of this indication can allow the proper layer to be enabled\n   below\
    \ the application.\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 3.  Serial Number Arithmetic
  contents:
  - "3.  Serial Number Arithmetic\n   It is essential to remember that the actual\
    \ Address Configuration\n   Change Chunk (ASCONF) Sequence Number space is finite,\
    \ though very\n   large.  This space ranges from 0 to 2**32 - 1.  Since the space\
    \ is\n   finite, all arithmetic dealing with ASCONF Sequence Numbers MUST be\n\
    \   performed modulo 2**32.  This unsigned arithmetic preserves the\n   relationship\
    \ of sequence numbers as they cycle from 2**32 - 1 to 0\n   again.  There are\
    \ some subtleties to computer modulo arithmetic, so\n   great care should be taken\
    \ in programming the comparison of such\n   values.  When referring to ASCONF\
    \ Sequence Numbers, the symbol \"=<\"\n   means \"less than or equal\"(modulo\
    \ 2**32).\n   Comparisons and arithmetic on ASCONF sequence numbers in this\n\
    \   document SHOULD use Serial Number Arithmetic as defined in [RFC1982]\n   where\
    \ SERIAL_BITS = 32.\n   ASCONF Sequence Numbers wrap around when they reach 2**32\
    \ - 1.  That\n   is, the next ASCONF Sequence Number an ASCONF chunk MUST use\
    \ after\n   transmitting an ASCONF Sequence Number = 2**32 - 1 is 0.\n   Any arithmetic\
    \ done on Stream Sequence Numbers SHOULD use Serial\n   Number Arithmetic (as\
    \ defined in [RFC1982]) where SERIAL_BITS = 16.\n   All other arithmetic and comparisons\
    \ in this document use normal\n   arithmetic.\n"
- title: 4.  Additional Chunks and Parameters
  contents:
  - "4.  Additional Chunks and Parameters\n   This section describes the addition\
    \ of two new chunks and seven new\n   parameters to allow:\n   o  Dynamic addition\
    \ of IP addresses to an association.\n   o  Dynamic deletion of IP addresses from\
    \ an association.\n   o  A request to set the primary address the peer will use\
    \ when\n      sending to an endpoint.\n   Additionally, this section describes\
    \ three new Error Causes that\n   support these new chunks and parameters.\n"
- title: 4.1.  New Chunk Types
  contents:
  - "4.1.  New Chunk Types\n   This section defines two new chunk types that will\
    \ be used to\n   transfer the control information reliably.  Table 1 illustrates\
    \ the\n   two new chunk types.\n        Chunk Type  Chunk Name\n        --------------------------------------------------------------\n\
    \        0xC1    Address Configuration Change Chunk        (ASCONF)\n        0x80\
    \    Address Configuration Acknowledgment      (ASCONF-ACK)\n              Table\
    \ 1: Address Configuration Chunks\n"
- title: 4.1.1.  Address Configuration Change Chunk (ASCONF)
  contents:
  - "4.1.1.  Address Configuration Change Chunk (ASCONF)\n   This chunk is used to\
    \ communicate to the remote endpoint one of the\n   configuration change requests\
    \ that MUST be acknowledged.  The\n   information carried in the ASCONF Chunk\
    \ uses the form of a Type-\n   Length-Value (TLV), as described in \"3.2.1 Optional/Variable-length\n\
    \   Parameter Format\" in [RFC4960] for all variable parameters.  This\n   chunk\
    \ MUST be sent in an authenticated way by using the mechanism\n   defined in [RFC4895].\
    \  If this chunk is received unauthenticated it\n   MUST be silently discarded\
    \ as described in [RFC4895].\n        0                   1                  \
    \ 2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       | Type = 0xC1   |  Chunk Flags  |      Chunk Length             |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                      Sequence Number                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                    Address Parameter                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     ASCONF Parameter #1                       |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   \\                                                               \\\n    \
    \   /                             ....                              /\n      \
    \ \\                                                               \\\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     ASCONF Parameter #N                       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Sequence Number: 32 bits (unsigned integer)\n   This value represents a Sequence\
    \ Number for the ASCONF Chunk.  The\n   valid range of a Sequence Number is from\
    \ 0 to 4294967295 (2**32 - 1).\n   Sequence Numbers wrap back to 0 after reaching\
    \ 4294967295.\n   Address Parameter: 8 or 20 bytes (depending on the address type)\n\
    \   This field contains an address parameter, either IPv6 or IPv4, from\n   [RFC4960].\
    \  The address is an address of the sender of the ASCONF\n   Chunk; the address\
    \ MUST be considered part of the association by the\n   peer endpoint (the receiver\
    \ of the ASCONF Chunk).  This field may be\n   used by the receiver of the ASCONF\
    \ to help in finding the\n   association.  If the address 0.0.0.0 or ::0 is provided,\
    \ the receiver\n   MAY lookup the association by other information provided in\
    \ the\n   packet.  This parameter MUST be present in every ASCONF message, i.e.\n\
    \   it is a mandatory TLV parameter.\n   Note: The host name address MUST NOT\
    \ be sent and MUST be ignored if\n   received in any ASCONF message.\n   It should\
    \ be noted that the ASCONF Chunk format requires the receiver\n   to report to\
    \ the sender if it does not understand the ASCONF Chunk.\n   This is accomplished\
    \ by setting the upper bits in the chunk type as\n   described in [RFC4960], Section\
    \ 3.2.  Note that the upper two bits in\n   the ASCONF Chunk are set to one. \
    \ As defined in [RFC4960], Section\n   3.2, when setting these upper bits in this\
    \ manner the receiver that\n   does not understand this chunk MUST skip the chunk\
    \ and continue\n   processing, and report in an Operation Error Chunk using the\n\
    \   'Unrecognized Chunk Type' cause of error.  This will NOT abort the\n   association\
    \ but indicates to the sender that it MUST not send any\n   further ASCONF chunks.\n\
    \   ASCONF Parameter: TLV format\n   Each address configuration change is represented\
    \ by a TLV parameter,\n   as defined in Section 4.2.  One or more requests may\
    \ be present in an\n   ASCONF Chunk.\n"
- title: 4.1.2.  Address Configuration Acknowledgment Chunk (ASCONF-ACK)
  contents:
  - "4.1.2.  Address Configuration Acknowledgment Chunk (ASCONF-ACK)\n   This chunk\
    \ is used by the receiver of an ASCONF Chunk to acknowledge\n   the reception.\
    \  It carries zero or more results for any ASCONF\n   parameters that were processed\
    \ by the receiver.  This chunk MUST be\n   sent in an authenticated way by using\
    \ the mechanism defined in\n   [RFC4895].  If this chunk is received unauthenticated\
    \ it MUST be\n   silently discarded as described in [RFC4895].\n        0    \
    \               1                   2                   3\n        0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       | Type = 0x80   |  Chunk Flags  |      Chunk Length             |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                     Sequence Number                           |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                 ASCONF Parameter Response#1                   |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       \\                                                               \\\n\
    \       /                             ....                              /\n  \
    \     \\                                                               \\\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                 ASCONF Parameter Response#N                   |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Sequence\
    \ Number: 32 bits (unsigned integer)\n   This value represents the Sequence Number\
    \ for the received ASCONF\n   Chunk that is acknowledged by this chunk.  This\
    \ value is copied from\n   the received ASCONF Chunk.\n   ASCONF Parameter Response:\
    \ TLV format\n   The ASCONF Parameter Response is used in the ASCONF-ACK to report\
    \ the\n   status of ASCONF processing.  By default, if a responding endpoint\n\
    \   does not include any Error Cause, a success is indicated.  Thus a\n   sender\
    \ of an ASCONF-ACK MAY indicate complete success of all TLVs in\n   an ASCONF\
    \ by returning only the Chunk Type, Chunk Flags, Chunk Length\n   (set to 8),\
    \ and the Sequence Number.\n"
- title: 4.2.  New Parameter Types
  contents:
  - "4.2.  New Parameter Types\n   The seven new parameters added follow the format\
    \ defined in Section\n   3.2.1 of [RFC4960].  Tables 2, 3, and 4 describe the\
    \ parameters.\n        Address Configuration Parameters   Parameter Type\n   \
    \     -------------------------------------------------\n        Set Primary Address\
    \                  0xC004\n        Adaptation Layer Indication          0xC006\n\
    \        Supported Extensions                 0x8008\n        Table 2: Parameters\
    \ That Can Be Used in an INIT/INIT-ACK Chunk\n        Address Configuration Parameters\
    \   Parameter Type\n        -------------------------------------------------\n\
    \        Add IP Address                       0xC001\n        Delete IP Address\
    \                    0xC002\n        Set Primary Address                  0xC004\n\
    \        Table 3: Parameters Used in an ASCONF Parameter\n        Address Configuration\
    \ Parameters   Parameter Type\n        -------------------------------------------------\n\
    \        Error Cause Indication               0xC003\n        Success Indication\
    \                   0xC005\n        Table 4: Parameters Used in an ASCONF Parameter\
    \ Response\n   Any parameter that appears where it is not allowed (for example,\
    \ a\n   0xC002 parameter appearing within an INIT or INIT-ACK) MAY be\n   responded\
    \ to with an ABORT by the receiver of the invalid parameter.\n   If the receiver\
    \ chooses NOT to abort, the parameter MUST be ignored.\n   A robust implementation\
    \ SHOULD ignore the parameter and leave the\n   association intact.\n"
- title: 4.2.1.  Add IP Address
  contents:
  - "4.2.1.  Add IP Address\n        0                   1                   2   \
    \                3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |        Type = 0xC001          |    Length = Variable          |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |               ASCONF-Request Correlation ID                   |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Address Parameter                       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ASCONF-Request Correlation ID: 32 bits\n   This is an opaque integer assigned\
    \ by the sender to identify each\n   request parameter.  The receiver of the ASCONF\
    \ Chunk will copy this\n   2-bit value into the ASCONF Response Correlation ID\
    \ field of the\n   ASCONF-ACK response parameter.  The sender of the ASCONF can\
    \ use this\n   same value in the ASCONF-ACK to find which request the response\
    \ is\n   for.  Note that the receiver MUST NOT change this 32-bit value.\n   Address\
    \ Parameter: TLV\n   This field contains an IPv4 or IPv6 address parameter as\
    \ described in\n   Section 3.3.2.1 of [RFC4960].  The complete TLV is wrapped\
    \ within\n   this parameter.  It informs the receiver that the address specified\n\
    \   is to be added to the existing association.  This parameter MUST NOT\n   contain\
    \ a broadcast or multicast address.  If the address 0.0.0.0 or\n   ::0 is provided,\
    \ the source address of the packet MUST be added.\n   An example TLV requesting\
    \ that the IPv4 address 192.0.2.1 be added to\n   the association would look as\
    \ follows:\n           +--------------------------------+\n           |  Type=0xC001\
    \   | Length = 16   |\n           +--------------------------------+\n       \
    \    |       C-ID = 0x01023474        |\n           +--------------------------------+\n\
    \           |  Type=5        | Length = 8    |\n           +----------------+---------------+\n\
    \           |       Value=0xC0000201         |\n           +----------------+---------------+\n\
    \   Valid Chunk Appearance\n   The Add IP Address parameter may only appear in\
    \ the ASCONF Chunk\n   type.\n"
- title: 4.2.2.  Delete IP Address
  contents:
  - "4.2.2.  Delete IP Address\n        0                   1                   2\
    \                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |        Type =0xC002           |    Length = Variable          |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |               ASCONF-Request Correlation ID                   |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Address Parameter                       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ASCONF-Request Correlation ID: 32 bits\n   This is an opaque integer assigned\
    \ by the sender to identify each\n   request parameter.  The receiver of the ASCONF\
    \ Chunk will copy this\n   32-bit value into the ASCONF Response Correlation ID\
    \ field of the\n   ASCONF-ACK response parameter.  The sender of the ASCONF can\
    \ use this\n   same value in the ASCONF-ACK to find which request the response\
    \ is\n   for.  Note that the receiver MUST NOT change this 32-bit value.\n   Address\
    \ Parameter: TLV\n   This field contains an IPv4 or IPv6 address parameter, as\
    \ described\n   in Section 3.3.2.1 of [RFC4960].  The complete TLV is wrapped\
    \ within\n   this parameter.  It informs the receiver that the address specified\n\
    \   is to be removed from the existing association.  This parameter MUST\n   NOT\
    \ contain a broadcast or multicast address.  If the address 0.0.0.0\n   or ::0\
    \ is provided, all addresses of the peer except the source\n   address of the\
    \ packet MUST be deleted.\n   An example TLV deleting the IPv4 address 192.0.2.1\
    \ from an existing\n   association would look as follows:\n           +--------------------------------+\n\
    \           |  Type=0xC002   | Length = 16   |\n           +--------------------------------+\n\
    \           |       C-ID = 0x01023476        |\n           +--------------------------------+\n\
    \           |  Type=5        | Length = 8    |\n           +----------------+---------------+\n\
    \           |       Value=0xC0000201         |\n           +----------------+---------------+\n\
    \   Valid Chunk Appearance\n   The Delete IP Address parameter may only appear\
    \ in the ASCONF Chunk\n   type.\n"
- title: 4.2.3.  Error Cause Indication
  contents:
  - "4.2.3.  Error Cause Indication\n        0                   1               \
    \    2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |    Type = 0xC003              |      Length = Variable        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |             ASCONF-Response Correlation ID                    |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \             Error Cause(s) or Success Indication              |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ASCONF-Response Correlation ID: 32 bits\n   This is an opaque integer assigned\
    \ by the sender to identify each\n   request parameter.  The receiver of the ASCONF\
    \ Chunk will copy this\n   32-bit value from the ASCONF-Request Correlation ID\
    \ into the ASCONF\n   Response Correlation ID field so the peer can easily correlate\
    \ the\n   request to this response.  Note that the receiver MUST NOT change\n\
    \   this 32-bit value.\n   Error Cause(s): TLV(s)\n   When reporting an error,\
    \ this response parameter is used to wrap one\n   or more standard Error Causes\
    \ normally found within an SCTP\n   Operational Error or SCTP Abort (as defined\
    \ in [RFC4960]).  The Error\n   Cause(s) follow the format defined in Section\
    \ 3.3.10 of [RFC4960].\n   Valid Chunk Appearance\n   The Error Cause Indication\
    \ parameter may only appear in the ASCONF-\n   ACK Chunk Type.\n"
- title: 4.2.4.  Set Primary IP Address
  contents:
  - "4.2.4.  Set Primary IP Address\n        0                   1               \
    \    2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |        Type =0xC004           |    Length = Variable          |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |               ASCONF-Request Correlation ID                   |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Address Parameter                       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ASCONF-Request Correlation ID: 32 bits\n   This is an opaque integer assigned\
    \ by the sender to identify each\n   request parameter.  The receiver of the ASCONF\
    \ Chunk will copy this\n   32-bit value into the ASCONF Response Correlation ID\
    \ field of the\n   ASCONF-ACK response parameter.  The sender of the ASCONF can\
    \ use this\n   same value in the ASCONF-ACK to find which request the response\
    \ is\n   for.  Note that the receiver MUST NOT change this 32-bit value.\n   Address\
    \ Parameter: TLV\n   This field contains an IPv4 or IPv6 address parameter as\
    \ described in\n   Section 3.3.2.1 of [RFC4960].  The complete TLV is wrapped\
    \ within\n   this parameter.  It requests the receiver to mark the specified\n\
    \   address as the primary address to send data to (see Section 5.1.2 of\n   [RFC4960]).\
    \  The receiver MAY mark this as its primary address upon\n   receiving this request.\
    \  If the address 0.0.0.0 or ::0 is provided,\n   the receiver MAY mark the source\
    \ address of the packet as its\n   primary.\n   An example TLV requesting that\
    \ the IPv4 address 192.0.2.1 be made the\n   primary destination address would\
    \ look as follows:\n           +--------------------------------+\n          \
    \ |  Type=0xC004   | Length = 16   |\n           +--------------------------------+\n\
    \           |       C-ID = 0x01023479        |\n           +--------------------------------+\n\
    \           |  Type=5        | Length = 8    |\n           +----------------+---------------+\n\
    \           |       Value=0xC0000201         |\n           +----------------+---------------+\n\
    \   Valid Chunk Appearance\n   The Set Primary IP Address parameter may appear\
    \ in the ASCONF, the\n   INIT, or the INIT-ACK Chunk Type.  The inclusion of this\
    \ parameter in\n   the INIT or INIT-ACK can be used to indicate an initial preference\
    \ of\n   primary address.\n"
- title: 4.2.5.  Success Indication
  contents:
  - "4.2.5.  Success Indication\n        0                   1                   2\
    \                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |        Type = 0xC005          |      Length = 8               |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |               ASCONF-Response Correlation ID                  |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   By default,\
    \ if a responding endpoint does not report an error for any\n   requested TLV,\
    \ a success is implicitly indicated.  Thus, a sender of\n   an ASCONF-ACK MAY\
    \ indicate complete success of all TLVs in an ASCONF\n   by returning only the\
    \ Chunk Type, Chunk Flags, Chunk Length (set to\n   8), and the Sequence Number.\n\
    \   The responding endpoint MAY also choose to explicitly report a\n   success\
    \ for a requested TLV, by returning a success report ASCONF\n   Parameter Response.\n\
    \   ASCONF-Response Correlation ID: 32 bits\n   This is an opaque integer assigned\
    \ by the sender to identify each\n   request parameter.  The receiver of the ASCONF\
    \ Chunk will copy this\n   32-bit value from the ASCONF-Request Correlation ID\
    \ into the ASCONF\n   Response Correlation ID field so the peer can easily correlate\
    \ the\n   request to this response.\n   Valid Chunk Appearance\n   The Success\
    \ Indication parameter may only appear in the ASCONF-ACK\n   Chunk Type.\n"
- title: 4.2.6.  Adaptation Layer Indication
  contents:
  - "4.2.6.  Adaptation Layer Indication\n        0                   1          \
    \         2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |        Type =0xC006           |    Length = 8                 |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                   Adaptation Code point                       |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   This parameter\
    \ is specified for the communication of peer upper-layer\n   protocols.  It is\
    \ envisioned to be used for flow control and other\n   adaptation layers that\
    \ require an indication to be carried in the\n   INIT and INIT-ACK.  Each adaptation\
    \ layer that is defined that wishes\n   to use this parameter MUST specify an\
    \ adaptation code point in an\n   appropriate RFC defining its use and meaning.\
    \  This parameter SHOULD\n   NOT be examined by the receiving SCTP implementation\
    \ and should be\n   passed opaquely to the upper-layer protocol.\n   Note: This\
    \ parameter is not used in either the addition or deletion\n   of addresses but\
    \ is for the convenience of the upper layer.  This\n   document includes this\
    \ parameter to minimize the number of SCTP\n   documents.\n   Valid Chunk Appearance\n\
    \   The Adaptation Layer Indication parameter may appear in INIT or INIT-\n  \
    \ ACK chunk and SHOULD be passed to the receiver's upper-layer protocol\n   based\
    \ upon the upper-layer protocol configuration of the SCTP stack.\n   This parameter\
    \ MUST NOT be sent in any other chunks, and if it is\n   received in another chunk,\
    \ it MUST be ignored.\n"
- title: 4.2.7.  Supported Extensions Parameter
  contents:
  - "4.2.7.  Supported Extensions Parameter\n   This parameter is used at startup\
    \ to identify any additional\n   extensions that the sender supports.  The sender\
    \ MUST support both\n   the sending and the receiving of any chunk types listed\
    \ within the\n   Supported Extensions Parameter.  An implementation supporting\
    \ this\n   extension MUST list the ASCONF,the ASCONF-ACK, and the AUTH chunks\
    \ in\n   its INIT and INIT-ACK parameters.\n      0                   1      \
    \             2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Parameter Type = 0x8008   |      Parameter Length         |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | CHUNK\
    \ TYPE 1  |  CHUNK TYPE 2 |  CHUNK TYPE 3 |  CHUNK TYPE 4 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                             ....                              |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | CHUNK\
    \ TYPE N  |      PAD      |      PAD      |      PAD      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Parameter Type This field holds the IANA-defined parameter type for\n   the\
    \ Supported Extensions Parameter.  The value of this field is\n   0x8008.\n  \
    \ Parameter Type Length This field holds the length of the parameter,\n   including\
    \ the Parameter Type, Parameter Length, and any additional\n   supported extensions.\
    \  Note: The length MUST NOT include any padding.\n   CHUNK TYPE X This field(s)\
    \ hold the chunk type of any SCTP\n   extension(s) that are currently supported\
    \ by the sending SCTP.\n   Multiple chunk types may be defined listing each additional\
    \ feature\n   that the sender supports.  The sender MUST NOT include multiple\n\
    \   Supported Extensions Parameter within any chunk.\n   Parameter Appearance\
    \ This parameter may appear in the INIT or INIT-\n   ACK chunk.  This parameter\
    \ MUST NOT appear in any other chunk.\n"
- title: 4.3.  New Error Causes
  contents:
  - "4.3.  New Error Causes\n   Five new Error Causes are added to the SCTP Operational\
    \ Errors,\n   primarily for use in the ASCONF-ACK Chunk.\n       Cause Code\n\
    \       Value          Cause Code\n       ---------      ----------------\n  \
    \     0x00A0          Request to Delete Last Remaining IP Address\n       0x00A1\
    \          Operation Refused Due to Resource Shortage\n       0x00A2         \
    \ Request to Delete Source IP Address\n       0x00A3          Association Aborted\
    \ Due to Illegal ASCONF-ACK\n       0x00A4          Request Refused - No Authorization\n\
    \             Table 5: New Error Causes\n"
- title: '4.3.1.  Error Cause: Request to Delete Last Remaining IP Address'
  contents:
  - "4.3.1.  Error Cause: Request to Delete Last Remaining IP Address\n   Cause of\
    \ error\n   Request to Delete Last Remaining IP Address: The receiver of this\n\
    \   error sent a request to delete the last IP address from its\n   association\
    \ with its peer.  This error indicates that the request is\n   rejected.\n   \
    \     0                   1                   2                   3\n        0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |     Cause Code=0x00A0         |      Cause Length=Variable    |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   \\                     TLV-Copied-From-ASCONF                    /\n     \
    \  /                                                               \\\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   An example\
    \ of a failed delete in an Error Cause TLV would look as\n   follows in the response\
    \ ASCONF-ACK message:\n           +--------------------------------+\n       \
    \    | Type = 0xC003  | Length = 28   |\n           +----------------+---------------+\n\
    \           |       C-ID = 0x01023476        |\n           +--------------------------------+\n\
    \           |  Cause=0x00A0  | Length = 20   |\n           +----------------+---------------+\n\
    \           |  Type= 0xC002  | Length = 16   |\n           +----------------+---------------+\n\
    \           |       C-ID = 0x01023476        |\n           +--------------------------------+\n\
    \           |   Type=0x0005  | Length = 8    |\n           +----------------+---------------+\n\
    \           |       Value=0xC0000201         |\n           +----------------+---------------+\n"
- title: '4.3.2.  Error Cause: Operation Refused Due to Resource Shortage'
  contents:
  - "4.3.2.  Error Cause: Operation Refused Due to Resource Shortage\n   Cause of\
    \ error\n   This Error Cause is used to report a failure by the receiver to\n\
    \   perform the requested operation due to a lack of resources.  The\n   entire\
    \ TLV that is refused is copied from the ASCONF into the Error\n   Cause.\n  \
    \      0                   1                   2                   3\n       \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |     Cause Code=0x00A1         |      Cause Length=Variable    |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   \\                  TLV-Copied-From-ASCONF                      /\n      \
    \ /                                                              \\\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   An example of a failed addition in an Error Cause TLV would look as\n   follows\
    \ in the response ASCONF-ACK message:\n           +--------------------------------+\n\
    \           | Type = 0xC003  | Length = 28   |\n           +--------------------------------+\n\
    \           |       C-ID = 0x01023474        |\n           +--------------------------------+\n\
    \           |  Cause=0x00A1  | Length = 20   |\n           +----------------+---------------+\n\
    \           |  Type=0xC001   | Length = 16   |\n           +--------------------------------+\n\
    \           |       C-ID = 0x01023474        |\n           +--------------------------------+\n\
    \           |  Type=0x0005   | Length = 8    |\n           +----------------+---------------+\n\
    \           |       Value=0xC0000201         |\n           +----------------+---------------+\n"
- title: '4.3.3.  Error Cause: Request to Delete Source IP Address'
  contents:
  - "4.3.3.  Error Cause: Request to Delete Source IP Address\n   Cause of error\n\
    \   Request to Delete Source IP Address: The receiver of this error sent\n   a\
    \ request to delete the source IP address of the ASCONF message.\n   This error\
    \ indicates that the request is rejected.\n        0                   1     \
    \              2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |     Cause Code=0x00A2         |      Cause Length=Variable    |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   \\                    TLV-Copied-From-ASCONF                     /\n     \
    \  /                                                               \\\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   An example\
    \ of a failed delete in an Error Cause TLV would look as\n   follows in the response\
    \ ASCONF-ACK message:\n           +--------------------------------+\n       \
    \    | Type = 0xC003  | Length = 28   |\n           +--------------------------------+\n\
    \           |       C-ID = 0x01023476        |\n           +--------------------------------+\n\
    \           |  Cause=0x00A2  | Length = 20   |\n           +----------------+---------------+\n\
    \           |  Type=0xC002   | Length = 16   |\n           +----------------+---------------+\n\
    \           |       C-ID = 0x01023476        |\n           +--------------------------------+\n\
    \           |   Type=0x0005  | Length = 8    |\n           +----------------+---------------+\n\
    \           |       Value=0xC0000201         |\n           +----------------+---------------+\n\
    \   IMPLEMENTATION NOTE: It is unlikely that an endpoint would source a\n   packet\
    \ from the address being deleted, unless the endpoint does not\n   do proper source\
    \ address selection.\n"
- title: '4.3.4.  Error Cause: Association Aborted Due to Illegal ASCONF-ACK'
  contents:
  - "4.3.4.  Error Cause: Association Aborted Due to Illegal ASCONF-ACK\n   This error\
    \ is to be included in an ABORT that is generated due to the\n   reception of\
    \ an ASCONF-ACK that was not expected but is larger than\n   the current Sequence\
    \ Number (see Section 5.3, Rule F0 ).  Note that a\n   Sequence Number is larger\
    \ than the last acked Sequence Number if it\n   is either the next sequence or\
    \ no more than 2**31-1 greater than the\n   current Sequence Number.  Sequence\
    \ Numbers smaller than the last\n   acked Sequence Number are silently ignored.\n\
    \        0                   1                   2                   3\n     \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |     Cause Code=0x00A3         |      Cause Length=4           |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: '4.3.5.  Error Cause: Request Refused - No Authorization.'
  contents:
  - "4.3.5.  Error Cause: Request Refused - No Authorization.\n   Cause of error\n\
    \   This Error Cause may be included to reject a request based on local\n   security\
    \ policies.\n        0                   1                   2               \
    \    3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |     Cause Code=0x00A4         |      Cause Length=Variable    |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   \\                     TLV-Copied-From-ASCONF                    /\n     \
    \  /                                                               \\\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 5.  Procedures
  contents:
  - "5.  Procedures\n   This section will lay out the specific procedures for address-\n\
    \   configuration change chunk type and its processing.\n"
- title: 5.1.  ASCONF Chunk Procedures
  contents:
  - "5.1.  ASCONF Chunk Procedures\n   When an endpoint has an ASCONF signaled change\
    \ to be sent to the\n   remote endpoint, it MUST do the following:\n   A1)  Create\
    \ an ASCONF Chunk as defined in Section 4.1.1.  The chunk\n        MUST contain\
    \ all of the TLV(s) of information necessary to be\n        sent to the remote\
    \ endpoint, and unique correlation identities\n        for each request.\n   A2)\
    \  A Sequence Number MUST be assigned to the Chunk.  The Sequence\n        Number\
    \ MUST be larger by one.  The Sequence Number MUST be\n        initialized at\
    \ the start of the association to the same value as\n        the Initial Transmission\
    \ Sequence Number (TSN) and every time a\n        new ASCONF Chunk is created,\
    \ it MUST be incremented by one after\n        assigning the Sequence Number to\
    \ the newly created chunk.\n   A3)  If no SCTP packet with one or more ASCONF\
    \ Chunk(s) is\n        outstanding (unacknowledged) with the remote peer, send\
    \ the\n        chunk and proceed to step A4.  If an ASCONF chunk is\n        outstanding,\
    \ then the ASCONF chunk should be queued for later\n        transmission and no\
    \ further action should be taken until the\n        previous ASCONF is acknowledged\
    \ or a timeout occurs.\n   A4)  The sender MUST Start a T-4 Retransmission Timeout\
    \ (RTO) timer,\n        using the RTO value of the selected destination address\n\
    \        (normally the primary path; see [RFC4960], Section 6.4 for\n        details).\n\
    \   A5)  When the ASCONF-ACK that acknowledges the Sequence Number last\n    \
    \    sent arrives, the sender MUST stop the T-4 RTO timer, and clear\n       \
    \ the appropriate association and destination error counters as\n        defined\
    \ in [RFC4960], Sections 8.1 and 8.2.\n   A6)  The endpoint MUST process all of\
    \ the TLVs within the ASCONF-\n        ACK(s) to find out particular status information\
    \ returned to the\n        various requests that were sent.  Use the Correlation\
    \ IDs to\n        correlate the request and the responses.\n   A7)  If an error\
    \ response is received for a TLV parameter, all TLVs\n        with no response\
    \ before the failed TLV are considered successful\n        if not reported.  All\
    \ TLVs after the failed response are\n        considered unsuccessful unless a\
    \ specific success indication is\n        present for the parameter.\n   A8) \
    \ If there is no response(s) to specific TLV parameter(s), and no\n        failures\
    \ are indicated, then all request(s) are considered\n        successful.\n   A9)\
    \  If the peer responds to an ASCONF with an ERROR Chunk reporting\n        that\
    \ it did not recognize the ASCONF Chunk Type, the sender of\n        the ASCONF\
    \ MUST NOT send any further ASCONF Chunks and MUST stop\n        its T-4 timer.\n\
    \   If the T-4 RTO timer expires the endpoint MUST do the following:\n   B1) \
    \ Increment the error counters and perform path failure detection\n        on\
    \ the appropriate destination address as defined in [RFC4960],\n        Sections\
    \ 8.1 and 8.2.\n   B2)  Increment the association error counters and perform endpoint\n\
    \        failure detection on the association as defined in [RFC4960],\n     \
    \   Sections 8.1 and 8.2.\n   B3)  Backoff the destination address RTO value to\
    \ which the ASCONF\n        chunk was sent by doubling the RTO timer value.\n\
    \        Note: The RTO value is used in the setting of all timer types\n     \
    \   for SCTP.  Each destination address has a single RTO estimate.\n   B4)  Re-transmit\
    \ the ASCONF Chunk last sent and if possible choose an\n        alternate destination\
    \ address (please refer to [RFC4960],\n        Section 6.4.1).  An endpoint MUST\
    \ NOT add new parameters to this\n        chunk; it MUST be the same (including\
    \ its Sequence Number) as\n        the last ASCONF sent.  An endpoint MAY, however,\
    \ bundle an\n        additional ASCONF with new ASCONF parameters with the next\n\
    \        Sequence Number.  For details, see Section 5.5.\n   B5)  Restart the\
    \ T-4 RTO timer.  Note that if a different destination\n        is selected, then\
    \ the RTO used will be that of the new\n        destination address.\n   Note:\
    \ The total number of retransmissions is limited by B2 above.  If\n   the maximum\
    \ is reached, the association will fail and enter into the\n   CLOSED state (see\
    \ [RFC4960], Section 6.4.1 for details).\n"
- title: 5.1.1.  Congestion Control of ASCONF Chunks
  contents:
  - "5.1.1.  Congestion Control of ASCONF Chunks\n   In defining the ASCONF Chunk\
    \ transfer procedures, it is essential\n   that these transfers MUST NOT cause\
    \ congestion within the network.\n   To achieve this, we place these restrictions\
    \ on the transfer of\n   ASCONF Chunks:\n   C1)  One and only one SCTP packet-holding\
    \ ASCONF Chunk(s) MAY be in\n        transit and unacknowledged at any one time.\
    \  If a sender, after\n        sending an ASCONF chunk, decides it needs to transfer\
    \ another\n        ASCONF Chunk, it MUST wait until the ASCONF-ACK Chunk returns\n\
    \        from the previous ASCONF Chunk before sending a subsequent\n        ASCONF.\
    \  Note: This restriction binds each side, so at any time,\n        two ASCONF\
    \ may be in-transit on any given association (one sent\n        from each endpoint).\
    \  However, when an ASCONF Chunk is\n        retransmitted due to a time-out,\
    \ the additionally held ASCONF\n        Chunks can be bundled into the retransmission\
    \ packet as\n        described in Section 5.5.\n   C2)  An ASCONF Chunk may be\
    \ bundled with any other chunk type\n        including other ASCONF Chunks.  If\
    \ bundled with other ASCONF\n        Chunks, the chunks MUST appear in sequential\
    \ order with respect\n        to their Sequence Number.\n   C3)  An ASCONF-ACK\
    \ Chunk may be bundled with any other chunk type\n        including other ASCONF-ACK\
    \ Chunks.  If bundled with other\n        ASCONF-ACK Chunks, the chunks MUST appear\
    \ in sequential order\n        with respect to their Sequence Number.\n   C4)\
    \  Both ASCONF and ASCONF-ACK Chunks MUST NOT be sent in any SCTP\n        state\
    \ except ESTABLISHED, SHUTDOWN-PENDING, SHUTDOWN-RECEIVED,\n        and SHUTDOWN-SENT.\n\
    \   C5)  An ASCONF Chunk and an ASCONF-ACK Chunk SHOULD not be larger\n      \
    \  than the PMTU.  If the PMTU is unknown, then the PMTU should be\n        set\
    \ to the minimum PMTU.  The minimum PMTU depends on the IP\n        version used\
    \ for transmission, and is the lesser of 576 octets\n        and the first-hop\
    \ MTU for IPv4 [RFC1122] and 1280 octets for\n        IPv6 [RFC2460].\n   An ASCONF\
    \ sender without these restrictions could possibly flood the\n   network with\
    \ a large number of separate address-change operations,\n   thus causing network\
    \ congestion.\n   If the sender of an ASCONF Chunk receives an Operational Error\n\
    \   indicating that the ASCONF Chunk Type is not understood, then the\n   sender\
    \ MUST NOT send subsequent ASCONF Chunks to the peer.  The\n   endpoint should\
    \ also inform the upper-layer application that the peer\n   endpoint does not\
    \ support any of the extensions detailed in this\n   document.\n"
- title: 5.2.  Upon Reception of an ASCONF Chunk
  contents:
  - "5.2.  Upon Reception of an ASCONF Chunk\n   When an endpoint receives an ASCONF\
    \ Chunk from the remote peer,\n   special procedures may be needed to identify\
    \ the association the\n   ASCONF Chunk is associated with.  To properly find the\
    \ association,\n   the following procedures SHOULD be followed:\n   D1)  Use the\
    \ source address and port number of the sender to attempt\n        to identify\
    \ the association (i.e., use the same method defined\n        in [RFC4960] used\
    \ for all other SCTP Chunks).  If found proceed\n        to rule D4.\n   D2) \
    \ If the association is not found, use the address found in the\n        Address\
    \ Parameter TLV combined with the port number found in the\n        SCTP common\
    \ header.  If found, proceed to rule D4.\n   D2-ext)  If more than one ASCONF\
    \ Chunks are packed together, use the\n            address found in the ASCONF\
    \ Address Parameter TLV of each of\n            the subsequent ASCONF Chunks.\
    \  If found, proceed to rule D4.\n   D3)  If neither D1, D2, nor D2-ext locates\
    \ the association, treat the\n        chunk as an Out Of The Blue packet as defined\
    \ in [RFC4960].\n   D4)  Follow the normal rules to validate the SCTP verification\
    \ tag\n        found in [RFC4960].\n   D5)  After the verification tag has been\
    \ validated, normal chunk\n        processing should occur.  Prior to finding\
    \ the ASCONF chunk, the\n        receiver MUST encounter an AUTH chunk as described\
    \ in [RFC4895].\n        If either authentication fails, or the AUTH chunk is\
    \ missing,\n        the receiver MUST silently discard this chunk and the rest\
    \ of\n        the packet.\n   After identification and verification of the association,\
    \ the\n   following should be performed to properly process the ASCONF Chunk:\n\
    \   E1)  If the value found in the Sequence Number of the ASCONF Chunk is\n  \
    \      equal to the ('Peer-Sequence-Number' + 1) and the Sequence\n        Number\
    \ of the ASCONF Chunk is the first in the SCTP Packet, the\n        endpoint MAY\
    \ clean any old cached ASCONF-ACK up to the 'Peer-\n        Sequence-Number' and\
    \ then proceed to rule E4.\n   E1-ext)  If the value found in the Sequence Number\
    \ of the ASCONF\n            Chunk is equal to the ('Peer-Sequence-Number' + 1)\
    \ and the\n            ASCONF chunk is NOT the first Sequence Number in the SCTP\n\
    \            packet, proceed to rule E4 but do NOT clear any cached\n        \
    \    ASCONF- ACK or state information.\n   E2)  If the value found in the Sequence\
    \ Number is less than the\n        ('Peer- Sequence-Number' + 1), simply skip\
    \ to the next ASCONF,\n        and include in the outbound response packet any\
    \ previously\n        cached ASCONF-ACK response that was sent and saved that\
    \ matches\n        the Sequence Number of the ASCONF.  Note: It is possible that\
    \ no\n        cached ASCONF-ACK Chunk exists.  This will occur when an older\n\
    \        ASCONF arrives out of order.  In such a case, the receiver\n        should\
    \ skip the ASCONF Chunk and not include ASCONF-ACK Chunk\n        for that chunk.\n\
    \   E3)  Then, process each ASCONF one by one as above while the Sequence\n  \
    \      Number of the ASCONF is less than the ('Peer-Sequence-Number' +\n     \
    \   1).\n   E4)  When the Sequence Number matches the next one expected, process\n\
    \        the ASCONF as described below and after processing the ASCONF\n     \
    \   Chunk, append an ASCONF-ACK Chunk to the response packet and\n        cache\
    \ a copy of it (in the event it later needs to be\n        retransmitted).\n \
    \       V1)  Process the TLVs contained within the Chunk performing the\n    \
    \         appropriate actions as indicated by each TLV type.  The\n          \
    \   TLVs MUST be processed in order within the Chunk.  For\n             example,\
    \ if the sender puts 3 TLVs in one chunk, the first\n             TLV (the one\
    \ closest to the Chunk Header) in the Chunk MUST\n             be processed first.\
    \  The next TLV in the chunk (the middle\n             one) MUST be processed\
    \ second and finally, the last TLV in\n             the Chunk MUST be processed\
    \ last.\n        V2)  In processing the chunk, the receiver should build a\n \
    \            response message with the appropriate error TLVs, as\n          \
    \   specified in the Parameter type bits, for any ASCONF\n             Parameter\
    \ it does not understand.  To indicate an\n             unrecognized parameter,\
    \ Cause Type 8 should be used as\n             defined in the ERROR in Section\
    \ 3.3.10.8, [RFC4960].  The\n             endpoint may also use the response to\
    \ carry rejections for\n             other reasons, such as resource shortages,\
    \ etc., using the\n             Error Cause TLV and an appropriate error condition.\n\
    \        Note: A positive response is implied if no error is indicated by\n  \
    \           the sender.\n        V3)  All responses MUST copy the ASCONF-Request\
    \ Correlation ID\n             field received in the ASCONF parameter from the\
    \ TLV being\n             responded to, into the ASCONF-Request Correlation ID\
    \ field\n             in the response parameter.\n        V4)  After processing\
    \ the entire Chunk, the receiver of the\n             ASCONF MUST queue the response\
    \ ASCONF-ACK Chunk for\n             transmission after the rest of the SCTP packet\
    \ has been\n             processed.  This allows the ASCONF-ACK Chunk to be bundled\n\
    \             with other ASCONF-ACK Chunks as well as any additional\n       \
    \      responses, e.g., a Selective Acknowledgment (SACK) Chunk.\n        V5)\
    \  Update the 'Peer-Sequence-Number' to the value found in the\n             Sequence\
    \ Number field.\n   E5)  Otherwise, the ASCONF Chunk is discarded since it must\
    \ be either\n        a stale packet or from an attacker.  A receiver of such a\
    \ packet\n        MAY log the event for security purposes.\n   E6)  When all ASCONF\
    \ Chunks are processed for this SCTP packet, send\n        back the accumulated\
    \ single response packet with all of the\n        ASCONF-ACK Chunks.  The destination\
    \ address of the SCTP packet\n        containing the ASCONF-ACK Chunks MUST be\
    \ the source address of\n        the SCTP packet that held the ASCONF Chunks.\n\
    \   E7)  While processing the ASCONF Chunks in the SCTP packet, if the\n     \
    \   response packet will exceed the PMTU of the return path, the\n        receiver\
    \ MUST stop adding additional ASCONF-ACKs into the\n        response packet but\
    \ MUST continue to process all of the ASCONF\n        Chunks, saving ASCONF-ACK\
    \ Chunk responses in its cached copy.\n        The sender of the ASCONF Chunk\
    \ will later retransmit the ASCONF\n        Chunks that were not responded to,\
    \ at which time the cached\n        copies of the responses that would NOT fit\
    \ in the PMTU can be\n        sent to the peer.\n   Note: These rules have been\
    \ presented with the assumption that the\n   implementation is caching old ASCONF-ACKs\
    \ in case of loss of SCTP\n   packets in the ACK path.  It is allowable for an\
    \ implementation to\n   maintain this state in another form it deems appropriate,\
    \ as long as\n   that form results in the same ASCONF-ACK sequences being returned\
    \ to\n   the peer as outlined above.\n"
- title: 5.3.  General Rules for Address Manipulation
  contents:
  - "5.3.  General Rules for Address Manipulation\n   When building TLV parameters\
    \ for the ASCONF Chunk that will add or\n   delete IP addresses, the following\
    \ rules MUST be applied:\n   F0)  If an endpoint receives an ASCONF-ACK that is\
    \ greater than or\n        equal to the next Sequence Number to be used but no\
    \ ASCONF Chunk\n        is outstanding, the endpoint MUST ABORT the association.\
    \  Note\n        that a Sequence Number is greater than if it is no more than\n\
    \        2^^31-1 larger than the current Sequence Number (using serial\n     \
    \   arithmetic).\n   F1)  When adding an IP address to an association, the IP\
    \ address is\n        NOT considered fully added to the association until the\
    \ ASCONF-\n        ACK arrives.  This means that until such time as the ASCONF\n\
    \        containing the add is acknowledged, the sender MUST NOT use the\n   \
    \     new IP address as a source for ANY SCTP packet except on\n        carrying\
    \ an ASCONF Chunk.  The receiver of the Add IP Address\n        request may use\
    \ the address as a destination immediately.  The\n        receiver MUST use the\
    \ path-verification procedure for the added\n        address before using that\
    \ address.  The receiver MUST NOT send\n        packets to the new address except\
    \ for the corresponding ASCONF-\n        ACK Chunk or HEARTBEAT Chunks for path\
    \ verification before the\n        new path is verified.  If the ASCONF-ACK is\
    \ sent to the new\n        address, it MAY be bundled with the HEARTBEAT chunk\
    \ for path\n        verification.\n   F2)  After the ASCONF-ACK of an IP address\
    \ Add arrives, the endpoint\n        MAY begin using the added IP address as a\
    \ source address for any\n        type of SCTP chunk.\n   F3a) If an endpoint\
    \ receives an Error Cause TLV indicating that the\n        IP address Add or IP\
    \ address Deletion parameters was not\n        understood, the endpoint MUST consider\
    \ the operation failed and\n        MUST NOT attempt to send any subsequent Add\
    \ or Delete requests\n        to the peer.\n   F3b) If an endpoint receives an\
    \ Error Cause TLV indicating that the\n        IP address Set Primary IP Address\
    \ parameter was not understood,\n        the endpoint MUST consider the operation\
    \ failed and MUST NOT\n        attempt to send any subsequent Set Primary IP Address\
    \ requests\n        to the peer.\n   F4)  When deleting an IP address from an\
    \ association, the IP address\n        MUST be considered a valid destination\
    \ address for the reception\n        of SCTP packets until the ASCONF-ACK arrives\
    \ and MUST NOT be\n        used as a source address for any subsequent packets.\
    \  This means\n        that any datagrams that arrive before the ASCONF-ACK destined\
    \ to\n        the IP address being deleted MUST be considered part of the\n  \
    \      current association.  One special consideration is that ABORT\n       \
    \ Chunks arriving destined to the IP address being deleted MUST be\n        ignored\
    \ (see Section 5.3.1 for further details).\n   F5)  An endpoint MUST NOT delete\
    \ its last remaining IP address from\n        an association.  In other words,\
    \ if an endpoint is NOT multi-\n        homed, it MUST NOT use the delete IP address\
    \ without an Add IP\n        Address preceding the delete parameter in the ASCONF\
    \ Chunk.  Or,\n        if an endpoint sends multiple requests to delete IP addresses,\n\
    \        it MUST NOT delete all of the IP addresses that the peer has\n      \
    \  listed for the requester.\n   F6)  An endpoint MUST NOT set an IP header source\
    \ address for an SCTP\n        packet holding the ASCONF Chunk to be the same\
    \ as an address\n        being deleted by the ASCONF Chunk.\n   F7)  If a request\
    \ is received to delete the last remaining IP address\n        of a peer endpoint,\
    \ the receiver MUST send an Error Cause TLV\n        with the Error Cause set\
    \ to the new error code 'Request to\n        Delete Last Remaining IP Address'.\
    \  The requested delete MUST\n        NOT be performed or acted upon, other than\
    \ to send the ASCONF-\n        ACK.\n   F8)  If a request is received to delete\
    \ an IP address that is also\n        the source address of the IP packet that\
    \ contained the ASCONF\n        chunk, the receiver MUST reject this request.\
    \  To reject the\n        request, the receiver MUST send an Error Cause TLV set\
    \ to the\n        new error code 'Request to Delete Source IP Address' (unless\n\
    \        Rule F5 has also been violated, in which case the error code\n      \
    \  'Request to Delete Last Remaining IP Address' is sent).\n   F9)  If an endpoint\
    \ receives an ADD IP Address request and does not\n        have the local resources\
    \ to add this new address to the\n        association, it MUST return an Error\
    \ Cause TLV set to the new\n        error code 'Operation Refused Due to Resource\
    \ Shortage'.\n   F10) If an endpoint receives an 'Out of Resource' error in response\n\
    \        to its request to ADD an IP address to an association, it must\n    \
    \    either ABORT the association or not consider the address part of\n      \
    \  the association.  In other words, if the endpoint does not ABORT\n        the\
    \ association, it must consider the add attempt failed and NOT\n        use this\
    \ address since its peer will treat SCTP packets destined\n        to the address\
    \ as Out Of The Blue packets.\n   F11) When an endpoint receives an ASCONF to\
    \ add an IP address sends\n        an 'Out of Resource' in its response, it MUST\
    \ also fail any\n        subsequent add or delete requests bundled in the ASCONF.\
    \  The\n        receiver MUST NOT reject an ADD and then accept a subsequent\n\
    \        DELETE of an IP address in the same ASCONF Chunk.  In other\n       \
    \ words, once a receiver begins failing any ADD or DELETE request,\n        it\
    \ must fail all subsequent ADD or DELETE requests contained in\n        that single\
    \ ASCONF.\n   F12) When an endpoint receives a request to delete an IP address\
    \ that\n        is the current primary address, it is an implementation decision\n\
    \        as to how that endpoint chooses the new primary address.\n   F13) When\
    \ an endpoint receives a valid request to DELETE an IP\n        address, the endpoint\
    \ MUST consider the address no longer part\n        of the association.  It MUST\
    \ NOT send SCTP packets for the\n        association to that address and it MUST\
    \ treat subsequent packets\n        received from that address as Out Of The Blue.\n\
    \        During the time interval between sending out the ASCONF and\n       \
    \ receiving the ASCONF-ACK, it MAY be possible to receive DATA\n        Chunks\
    \ out of order.  The following examples illustrate these\n        problems:\n\
    \   F14) All addresses added by the reception of an ASCONF Chunk MUST be\n   \
    \     put into the UNCONFIRMED state and MUST have path verification\n       \
    \ performed on them before the address can be used as described in\n        [RFC4960],\
    \ Section 5.4.\n       Endpoint-A                                     Endpoint-Z\n\
    \       ----------                                     ----------\n       ASCONF[Add-IP:X]------------------------------>\n\
    \                                               /--ASCONF-ACK\n              \
    \                                /\n                                    /--------/---New\
    \ DATA:\n                                   /        /    Destination\n      \
    \        <-------------------/        /     IP:X\n                           \
    \               /\n              <--------------------------/\n   In the above\
    \ example, we see a new IP address (X) being added to the\n   Endpoint-A.  However,\
    \ due to packet re-ordering in the network, a new\n   DATA chunk is sent and arrives\
    \ at Endpoint-A before the ASCONF-ACK\n   confirms the add of the address to the\
    \ association.\n   A similar problem exists with the deletion of an IP address\
    \ as\n   follows:\n       Endpoint-A                                     Endpoint-Z\n\
    \       ----------                                     ----------\n          \
    \                          /------------New DATA:\n                          \
    \         /             Destination\n                                  /     \
    \         IP:X\n       ASCONF [DEL-IP:X]---------/---------------->\n        \
    \      <-----------------/------------------ASCONF-ACK\n                     \
    \          /\n                              /\n               <-------------/\n\
    \   In this example, we see a DATA chunk destined to the IP:X (which is\n   about\
    \ to be deleted) arriving after the deletion is complete.  For\n   the ADD case,\
    \ an endpoint SHOULD consider the newly added IP address\n   for the purpose of\
    \ sending data to the association before the ASCONF-\n   ACK has been received.\
    \  The endpoint MUST NOT source data from this\n   new address until the ASCONF-ACK\
    \ arrives, but it may receive out-of-\n   order data as illustrated and MUST NOT\
    \ treat this data as an OOTB\n   datagram (please see [RFC4960] section 8.4).\
    \  It MAY drop the data\n   silently or it MAY consider it part of the association,\
    \ but it MUST\n   NOT respond with an ABORT.\n   For the DELETE case, an endpoint\
    \ MAY respond to the late-arriving\n   DATA packet as an OOTB datagram or it MAY\
    \ hold the deleting IP\n   address for a small period of time as still valid.\
    \  If it treats the\n   DATA packet as OOTB, the peer will silently discard the\
    \ ABORT (since\n   by the time the ABORT is sent, the peer will have removed the\
    \ IP\n   address from this association).  If the endpoint elects to hold the\n\
    \   IP address valid for a period of time, it MUST NOT hold it valid\n   longer\
    \ than 2 RTO intervals for the destination being removed.\n"
- title: 5.3.1.  A Special Case for OOTB ABORT Chunks
  contents:
  - "5.3.1.  A Special Case for OOTB ABORT Chunks\n   Another case worth mentioning\
    \ is illustrated below:\n       Endpoint-A                                   \
    \  Endpoint-Z\n       ----------                                     ----------\n\
    \       New DATA:------------\\\n       Source IP:X           \\\n           \
    \                   \\\n       ASCONF-REQ[DEL-IP:X]----\\------------------>\n\
    \                                \\        /---------ASCONF-ACK\n            \
    \                     \\      /\n                                  \\----/----------->\
    \ OOTB\n       (Ignored <---------------------/-------------ABORT\n        by\
    \ rule F4)                  /\n              <---------------------/\n   For this\
    \ case, during the deletion of an IP address, an Abort MUST be\n   ignored if\
    \ the destination address of the Abort message is that of a\n   destination being\
    \ deleted.\n"
- title: 5.3.2.  A Special Case for Changing an Address
  contents:
  - "5.3.2.  A Special Case for Changing an Address\n   In some instances, the sender\
    \ may only have one IP address in an\n   association that is being renumbered.\
    \  When this occurs, the sender\n   may not be able to send the appropriate ADD/DELETE\
    \ pair to the peer,\n   and may use the old address as a source in the IP header.\
    \  For this\n   reason, the sender MUST fill in the Address Parameter field with\
    \ an\n   address that is part of the association (in this case, the one being\n\
    \   deleted).  This will allow the receiver to locate the association\n   without\
    \ using the source address found in the IP header.\n   The receiver of such a\
    \ chunk MUST always first use the source address\n   found in the IP header in\
    \ looking up the association.  The receiver\n   should attempt to use the address\
    \ found in the Address Parameter\n   field only if the lookup using the source\
    \ address from the IP header\n   fails.  The receiver MUST reply to the source\
    \ address of the packet\n   in this case, which is the new address that was added\
    \ by the ASCONF\n   (since the old address is no longer part of the association\
    \ after\n   processing).\n"
- title: 5.4.  Setting of the Primary Address
  contents:
  - "5.4.  Setting of the Primary Address\n   A sender of the set primary parameter\
    \ MAY elect to send this combined\n   with an add or delete of an address.  A\
    \ sender MUST only send a set\n   primary request to an address that is already\
    \ considered part of the\n   association.  In other words, if a sender combines\
    \ a set primary with\n   an add new IP address request, the set primary will be\
    \ discarded\n   unless the add request is to be processed BEFORE the set primary\n\
    \   (i.e., it precedes the set primary).\n   A request to set primary MAY also\
    \ appear in an INIT or INIT-ACK\n   chunk, which can give advice to the peer endpoint\
    \ as to which of its\n   addresses the sender of the INIT or INIT-ACK would prefer\
    \ as the\n   primary address.\n   The request to set an address as the primary\
    \ path is an option the\n   receiver SHOULD perform.  It is considered advice\
    \ to the receiver of\n   the best-destination address to use in sending SCTP packets\
    \ (in the\n   requester's view).  If a request arrives that asks the receiver\
    \ to\n   set an address as primary that does not exist, the receiver SHOULD\n\
    \   NOT honor the request, leaving its existing primary address\n   unchanged.\n"
- title: 5.5.  Bundling of Multiple ASCONFs
  contents:
  - "5.5.  Bundling of Multiple ASCONFs\n   In the normal case, a single ASCONF is\
    \ sent in a packet and a single\n   reply ASCONF-ACK is received.  However, in\
    \ the event of the loss of\n   an SCTP packet containing either an ASCONF or ASCONF-ACK,\
    \ it is\n   allowable for a sender to bundle additional ASCONFs in the\n   retransmission.\
    \  In bundling multiple ASCONFs, the following rules\n   MUST be followed:\n \
    \  1.  Previously transmitted ASCONF Chunks MUST be left unchanged.\n   2.  Each\
    \ SCTP packet containing ASCONF Chunks MUST be bundled\n       starting with the\
    \ smallest ASCONF Sequence Number first in the\n       packet (closest to the\
    \ Chunk header) and preceding in sequential\n       order from the lowest to highest\
    \ ASCONF Sequence Number.\n   3.  All ASCONFs within the packet MUST be adjacent\
    \ to each other,\n       i.e., no other chunk type must separate the ASCONFs.\n\
    \   4.  Each new ASCONF lookup address MUST be populated as if the\n       previous\
    \ ASCONFs had been processed and accepted.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The addition and or deletion of an IP address\
    \ to an existing\n   association does provide an additional mechanism by which\
    \ existing\n   associations can be hijacked.  Therefore, this document requires\
    \ the\n   use of the authentication mechanism defined in [RFC4895] to limit the\n\
    \   ability of an attacker to hijack an association.\n   Hijacking an association\
    \ by using the addition and deletion of an IP\n   address is only possible for\
    \ an attacker who is able to intercept the\n   initial two packets of the association\
    \ setup when the SCTP-AUTH\n   extension is used without pre-shared keys.  If\
    \ such a threat is\n   considered a possibility, then the [RFC4895] extension\
    \ MUST be used\n   with a preconfigured shared endpoint pair key to mitigate this\n\
    \   threat.  For a more detailed analysis, see [RFC4895].\n   When the address\
    \ parameter in ASCONF chunks with Add, IP Delete IP,\n   or Set Primary IP parameters\
    \ is a wildcard, the source address of the\n   packet is used.  This address is\
    \ not protected by SCTP-AUTH [RFC4895]\n   and an attacker can therefore intercept\
    \ such a packet and modify the\n   source address.  Even if the source address\
    \ is not one presently an\n   alternate for the association, the identification\
    \ of the association\n   may rely on the other information in the packet (perhaps\
    \ the\n   verification tag, for example).  An on-path attacker can therefore\n\
    \   modify the source address to its liking.\n   If the ASCONF includes an Add\
    \ IP with a wildcard address, the\n   attacker can add an address of its liking,\
    \ which provides little\n   immediate damage but can set up later attacks.\n \
    \  If the ASCONF includes a Delete IP with a wildcard address, the\n   attacker\
    \ can cause all addresses but one of its choosing to be\n   deleted from an association.\
    \  The address supplied by the attacker\n   must already belong to the association,\
    \ which makes this more\n   difficult for the attacker.  However, the sole remaining\
    \ address\n   might be one that the attacker controls, for example, or can monitor,\n\
    \   etc.  In the least, the sender and the deceived receiver would have\n   different\
    \ ideas of what that sole remaining address would be.  This\n   will eventually\
    \ cause the association to fail, but in the meantime,\n   the deceived receiver\
    \ could be transmitting packets to an address the\n   sender did not intend.\n\
    \   If the ASCONF includes a Set Primary IP with a wildcard address, then\n  \
    \ the attacker can cause an address to be used as a primary address.\n   This\
    \ is limited to an address that already belongs to the\n   association, so the\
    \ damage is limited.  At least, the result would be\n   that the recipient is\
    \ using a primary address that the sender did not\n   intend.  However, if both\
    \ a wildcard Add IP and a wildcard Set\n   Primary IP are used, then the attacker\
    \ can modify the source address\n   to both add an address to its liking to the\
    \ association and make it\n   the primary address.  Such a combination would present\
    \ the attacker\n   with an opportunity for more damage.\n   Note that all these\
    \ attacks are from an on-path attacker.  Endpoints\n   that believe they face\
    \ a threat from on-path attackers SHOULD NOT use\n   wildcard addresses in ASCONF\
    \ Add IP, Delete IP, or Set Primary IP\n   parameters.\n   If an SCTP endpoint\
    \ that supports this extension receives an INIT\n   that indicates that the peer\
    \ supports the ASCONF extension but does\n   NOT support the [RFC4895] extension,\
    \ the receiver of such an INIT\n   MUST send an ABORT in response.  Note that\
    \ an implementation is\n   allowed to silently discard such an INIT as an option\
    \ as well, but\n   under NO circumstance is an implementation allowed to proceed\
    \ with\n   the association setup by sending an INIT-ACK in response.\n   An implementation\
    \ that receives an INIT-ACK that indicates that the\n   peer does not support\
    \ the [RFC4895] extension MUST NOT send the\n   COOKIE-ECHO to establish the association.\
    \  Instead, the\n   implementation MUST discard the INIT-ACK and report to the\
    \ upper-\n   layer user that an association cannot be established destroying the\n\
    \   Transmission Control Block (TCB).\n   Other types of attacks, e.g., bombing,\
    \ are discussed in detail in\n   [RFC5062].  The bombing attack, in particular,\
    \ is countered by the\n   use of a random nonce and is required by [RFC4960].\n\
    \   An on-path attacker can modify the INIT and INIT-ACK Supported\n   Extensions\
    \ parameter (and authentication-related parameters) to\n   produce a denial of\
    \ service.  If the on-path attacker removes the\n   [RFC4895]-related parameters\
    \ from an INIT that indicates it supports\n   the ASCONF extension, the association\
    \ will not be established.  If\n   the on-path attacker adds a Supported Extensions\
    \ parameter mentioning\n   the ASCONF type to an INIT or INIT-ACK that does not\
    \ carry any AUTH-\n   related parameters, the association will not be established.\
    \  If the\n   on-path attacker removes the Supported Extensions parameter (or\n\
    \   removes the ASCONF type from that parameter) from the INIT or the\n   INIT-ACK,\
    \ then the association will not be able to use the ADD-IP\n   feature.  If the\
    \ on-path attacker adds the Supported Extensions\n   parameter listing the ASCONF\
    \ type to an INIT-ACK that did not carry\n   one (but did carry AUTH-related parameters),\
    \ then the INIT sender may\n   use ASCONF where the INIT-ACK sender does not support\
    \ it.  This would\n   be discovered later if the INIT sender transmitted an ASCONF,\
    \ but the\n   INIT sender could have made configuration choices at that point.\
    \  As\n   the INIT and INIT-ACK are not protected by the AUTH feature, there is\n\
    \   no way to counter such attacks.  Note however that an on-path\n   attacker\
    \ capable of modifying the INIT and INIT-ACK would almost\n   certainly also be\
    \ able to prevent the INIT and INIT-ACK from being\n   delivered or modify the\
    \ verification tags or checksum to cause the\n   packet to be discarded, so the\
    \ Supported Extensions adds little\n   additional vulnerability (with respect\
    \ to preventing association\n   formation) to the SCTP protocol.  The ability\
    \ to prevent the use of\n   this new feature is an additional vulnerability to\
    \ SCTP but only for\n   this new feature.\n   The Adaptation Layer Indication\
    \ is subject to corruption, insertion,\n   or deletion from the INIT and INIT-ACK\
    \ chunks by an on-path attacker.\n   This parameter SHOULD be opaque to the SCTP\
    \ protocol (see Section\n   4.2.6), and so changes to the parameter will likely\
    \ not affect the\n   SCTP protocol.  However, any adaptation layer that is defined\
    \ SHOULD\n   consider its own vulnerabilities in the Security Considerations\n\
    \   section of the RFC that defines its adaptation code point.\n   The Set Primary\
    \ IP Address parameter is subject to corruption,\n   insertion, or deletion by\
    \ an on-path attacker when included in the\n   INIT and INIT-ACK chunks.  The\
    \ attacker could use this to influence\n   the receiver to choose an address to\
    \ its own purposes (one over which\n   it has control, one that would be less\
    \ desirable for the sender,\n   etc.).  An on-path attacker would also have the\
    \ ability to include or\n   remove addresses for the association from the INIT\
    \ or INIT-ACK, so it\n   is not limited in the address it can specify in the Set\
    \ Primary IP\n   Address.  Endpoints that wish to avoid this possible threat MAY\
    \ defer\n   sending the initial Set Primary request and wait until the\n   association\
    \ is fully established before sending a fully protected\n   ASCONF with the Set\
    \ Primary as its single parameter.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document defines the following new SCTP parameters,\
    \ chunks, and\n   errors (http://www.iana.org/assignments/sctp-parameters):\n\
    \   o  two new chunk types,\n   o  six parameter types, and\n   o  five new SCTP\
    \ error causes.\n   The chunk types with their assigned values are shown below.\n\
    \        Chunk Type  Chunk Name\n        --------------------------------------------------------------\n\
    \        0xC1    Address Configuration Change Chunk        (ASCONF)\n        0x80\
    \    Address Configuration Acknowledgment      (ASCONF-ACK)\n   The parameter\
    \ types are listed below:\n        Parameter Type     Parameter Name\n       \
    \ -------------------------------------------------\n        0x8008          \
    \   Supported Extensions\n        0xC001             Add IP Address\n        0xC002\
    \             Delete IP Address\n        0xC003             Error Cause Indication\n\
    \        0xC004             Set Primary Address\n        0xC005             Success\
    \ Indication\n        0xC006             Adaptation Layer Indication\n   The Error\
    \ Causes are listed below:\n       Cause Code\n       Value          Cause Code\n\
    \       ---------      ----------------\n       0x00A0          Request to Delete\
    \ Last Remaining IP Address\n       0x00A1          Operation Refused Due to Resource\
    \ Shortage\n       0x00A2          Request to Delete Source IP Address\n     \
    \  0x00A3          Association Aborted Due to Illegal ASCONF-ACK\n       0x00A4\
    \          Request Refused - No Authorization\n   This document also defines an\
    \ adaptation code point.  The adaptation\n   code point is a 32-bit integer that\
    \ is assigned by IANA through an\n   IETF Consensus action as defined in [RFC2434].\
    \  For this new\n   registry, no initial values are being added by this document;\n\
    \   however, [RDDP] will add the first entry.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The authors would like to express a special note of thanks\
    \ to Michael\n   Ramahlo and Phillip Conrad for their extreme efforts in the early\n\
    \   formation of this draft.\n   The authors wish to thank Jon Berger, Mark Butler,\
    \ Lars Eggert,\n   Janardhan Iyengar, Greg Kendall, Seok Koh, Salvatore Loreto,\
    \ Peter\n   Lei, John Loughney, Sandy Murphy, Ivan Arias Rodriguez, Renee Revis,\n\
    \   Marshall Rose, Ronnie Sellars, Chip Sharp, and Irene Ruengeler for\n   their\
    \ invaluable comments.\n   The authors would also like to give special mention\
    \ to Maria-Carmen\n   Belinchon and Ian Rytina for their early contributions to\
    \ this\n   document and their thoughtful comments.\n   And a special thanks to\
    \ James Polk, abstract writer to the few but\n   lucky.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC1122]  Braden, R., \"Requirements for Internet\
    \ Hosts -\n              Communication Layers\", STD 3, RFC 1122, October 1989.\n\
    \   [RFC1982]  Elz, R. and R. Bush, \"Serial Number Arithmetic\", RFC 1982,\n\
    \              August 1996.\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2434]  Narten, T. and H. Alvestrand, \"Guidelines for Writing\
    \ an\n              IANA Considerations Section in RFCs\", BCP 26, RFC 2434,\n\
    \              October 1998.\n   [RFC2460]  Deering, S. and R. Hinden, \"Internet\
    \ Protocol, Version 6\n              (IPv6) Specification\", RFC 2460, December\
    \ 1998.\n   [RFC4960]  Stewart, R., Ed., \"Stream Control Transmission Protocol\"\
    ,\n              RFC 4960, September 2007.\n   [RFC4895]  Tuexen, M., Stewart,\
    \ R., Lei, P., and E. Rescorla,\n              \"Authenticated Chunks for the\
    \ Stream Control Transmission\n              Protocol (SCTP)\", RFC 4895, August\
    \ 2007.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC5062]  Stewart, R., Tuexen, M., and G. Camarillo,\
    \ \"Security\n              Attacks Found Against SCTP and Current Countermeasures\"\
    ,\n              RFC 5062, September 2007.\n   [RDDP]     Bestler, C. and R. Stewart,\
    \ \"Stream Control Transmission\n              Protocol (SCTP) Direct Data Placement\
    \ (DDP) Adaptation\",\n              Work in Progress, September 2006.\n"
- title: Appendix A.  Abstract Address Handling
  contents:
  - 'Appendix A.  Abstract Address Handling

    '
- title: A.1.  General Remarks
  contents:
  - "A.1.  General Remarks\n   This appendix is non-normative.  It is present to give\
    \ the reader a\n   concise mathematical definition of an SCTP endpoint.  The following\n\
    \   text provides a working definition of the endpoint notion to discuss\n   address\
    \ reconfiguration.  It is not intended to restrict\n   implementations in any\
    \ way; its goal is to provide a set of\n   definitions only.  Using these definitions\
    \ should make a discussion\n   about address issues easier.\n"
- title: A.2.  Generalized Endpoints
  contents:
  - "A.2.  Generalized Endpoints\n   A generalized endpoint is a pair of a set of\
    \ IP addresses and a port\n   number at any given point of time.  The precise\
    \ definition is as\n   follows:\n   A generalized endpoint gE at time t is given\
    \ by\n                  gE(t) = ({IP1, ..., IPn}, Port)\n   where {IP1, ..., IPn}\
    \ is a non-empty set of IP addresses.\n   Please note that the dynamic addition\
    \ and deletion of IP addresses\n   described in this document allows the set of\
    \ IP addresses of a\n   generalized endpoint to be changed at some point of time.\
    \  The port\n   number can never be changed.\n   The set of IP addresses of a\
    \ generalized endpoint gE at a time t is\n   defined as\n               Addr(gE)(t)\
    \ = {IP1, ..., IPn}\n   if gE(t) = ({IP1, ..., IPn}, Port) holds at time t.\n\
    \   The port number of a generalized endpoint gE is defined as\n             \
    \  Port(gE) = Port\n   if gE(t) = ({IP1, ..., IPn}, Port) holds at time t.\n \
    \  There is one fundamental rule that restricts all generalized\n   endpoints:\n\
    \   For two different generalized endpoints gE' and gE'' with the same\n   port\
    \ number Port(gE') = Port(gE''), the address sets Addr(gE')(t) and\n   Addr(gE'')(t)\
    \ must be disjoint at every point in time.\n"
- title: A.3.  Associations
  contents:
  - "A.3.  Associations\n   Associations consist of two generalized endpoints and\
    \ the two address\n   sets known by the peer at any time.  The precise definition\
    \ is as\n   follows:\n   An association A between two different generalized endpoints\
    \ gE' and\n   gE'' is given by\n                  A = (gE', S', gE'', S'')\n \
    \  where S'(t) and S''(t) are a set of addresses at any time t such that\n   S'(t)\
    \ is a non-empty subset of Addr(gE')(t) and S''(t) is a non-empty\n   subset of\
    \ Addr(gE'')(t).\n   If A = (gE', S', gE'', S'') is an association between the\
    \ generalized\n   endpoints gE' and gE'', the following notion is used:\n    \
    \              Addr(A, gE') = S'   and  Addr(A, gE'') = S''.\n   If the dependency\
    \ on time is important the notion Addr(A, gE')(t) =\n   S'(t) will be used.\n\
    \   If A is an association between gE' and gE'', then Addr(A, gE') is the\n  \
    \ subset of IP addresses of gE', which is known by gE'' and used by\n   gE'.\n\
    \   Association establishment between gE' and gE'' can be seen as:\n   1.  gE'\
    \ and gE'' do exist before the association.\n   2.  If an INIT has to be sent\
    \ from gE' to gE'', address-scoping rules\n       and other limitations are applied\
    \ to calculate the subset S' from\n       Addr(gE').  The addresses of S' are\
    \ included in the INIT chunk.\n   3.  If an INIT-ACK has to be sent from gE''\
    \ to gE', address-scoping\n       rules and other limitations are applied to calculate\
    \ the subset\n       S'' from Addr(gE'').  The addresses of S'' are included in\
    \ the\n       INIT-ACK chunk.\n   4.  After the handshake the association A =\
    \ (gE', S', gE'', S'') has\n       been established.\n   5.  Right after the association\
    \ establishment Addr(A, gE') and\n       Addr(A, gE'') are the addresses that\
    \ have been seen on the wire\n       during the handshake.\n"
- title: A.4.  Relationship with RFC 4960
  contents:
  - "A.4.  Relationship with RFC 4960\n   [RFC4960] defines the notion of an endpoint.\
    \  This subsection will\n   show that these endpoints are also (special) generalized\
    \ endpoints.\n   [RFC4960] has no notion of address-scoping or other address-handling\n\
    \   limitations and provides no mechanism to change the addresses of an\n   endpoint.\n\
    \   This means that an endpoint is simply a generalized endpoint that\n   does\
    \ not depend on time.  Neither the port nor the address list\n   changes.\n  \
    \ During association setup, no address-scoping rules or other\n   limitations\
    \ will be applied.  This means that for an association A\n   between two endpoints\
    \ gE' and gE'', the following is true:\n   Addr(A, gE') = Addr(gE') and Addr(A,\
    \ gE'') = Addr(gE'').\n"
- title: A.5.  Rules for Address Manipulation
  contents:
  - "A.5.  Rules for Address Manipulation\n   The rules for address manipulation can\
    \ now be stated in a simple way:\n   1.  An address can be added to a generalized\
    \ endpoint gE only if this\n       address is not an address of a different generalized\
    \ endpoint\n       with the same port number.\n   2.  An address can be added\
    \ to an association A with generalized\n       endpoint gE if it has been added\
    \ to the generalized endpoint gE\n       first.  This means that the address must\
    \ be an element of\n       Addr(gE) first and then it can become an element of\
    \ Addr(A, gE).\n       But this is not necessary.  If the association does not\
    \ allow the\n       reconfiguration of the addresses only Addr(gE) can be modified.\n\
    \   3.  An address can be deleted from an association A with generalized\n   \
    \    endpoint gE as long as Addr(A, gE) stays non-empty.\n   4.  An address can\
    \ be deleted from an generalized endpoint gE only if\n       it has been removed\
    \ from all associations having gE as a\n       generalized endpoint.\n   These\
    \ rules simply make sure that the rules for the endpoints and\n   associations\
    \ given above are always fulfilled.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Randall R. Stewart\n   Cisco Systems, Inc.\n   4875 Forest\
    \ Drive\n   Suite 200\n   Columbia, SC  29206\n   US\n   Phone:\n   EMail: rrs@cisco.com\n\
    \   Qiaobing Xie\n   Motorola, Inc.\n   1501 W. Shure Drive, 2-3C\n   Arlington\
    \ Heights, IL  60004\n   USA\n   Phone: +1-847-632-3028\n   EMail: Qiaobing.Xie@motorola.com\n\
    \   Michael Tuexen\n   Univ. of Applied Sciences Muenster\n   Stegerwaldstr. 39\n\
    \   48565 Steinfurt\n   Germany\n   EMail: tuexen@fh-muenster.de\n   Shin Maruyama\n\
    \   Kyoto University\n   Yoshida-Honmachi\n   Sakyo-ku\n   Kyoto, Kyoto  606-8501\n\
    \   JAPAN\n   Phone: +81-75-753-7417\n   EMail: mail@marushin.gr.jp\n   Masahiro\
    \ Kozuka\n   Kyoto University\n   Yoshida-Honmachi\n   Sakyo-ku\n   Kyoto, Kyoto\
    \  606-8501\n   JAPAN\n   Phone: +81-75-753-7417\n   EMail: ma-kun@kozuka.jp\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
