- title: __initial_text__
  contents:
  - "                Close Encounters of the ICMP Type 2 Kind\n             (Near\
    \ Misses with ICMPv6 Packet Too Big (PTB))\n"
- title: Abstract
  contents:
  - "Abstract\n   This document calls attention to the problem of delivering ICMPv6\n\
    \   type 2 \"Packet Too Big\" (PTB) messages to the intended destination\n   (typically\
    \ the server) in ECMP load-balanced or anycast network\n   architectures.  It\
    \ discusses operational mitigations that can be\n   employed to address this class\
    \ of failures.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7690.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Problem . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Mitigation  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n     3.1.  Alternative Mitigations . . . . . . . . . . . . . . .\
    \ . .   5\n     3.2.  Implementation  . . . . . . . . . . . . . . . . . . . .\
    \ .   5\n       3.2.1.  Alternative Implementation  . . . . . . . . . . . . .\
    \   6\n   4.  Improvements  . . . . . . . . . . . . . . . . . . . . . . . .  \
    \ 7\n   5.  Security Considerations . . . . . . . . . . . . . . . . . . .   8\n\
    \   6.  Informative References  . . . . . . . . . . . . . . . . . . .   8\n  \
    \ Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .   9\n   Authors'\
    \ Addresses  . . . . . . . . . . . . . . . . . . . . . . .   9\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Operators of popular Internet services face complex challenges\n\
    \   associated with scaling their infrastructure.  One scaling approach\n   is\
    \ to utilize equal-cost multipath (ECMP) routing to perform\n   stateless distribution\
    \ of incoming TCP or UDP sessions to multiple\n   servers or to middle boxes such\
    \ as load balancers.  Distribution of\n   traffic in this manner presents a problem\
    \ when dealing with ICMP\n   signaling.  Specifically, an ICMP error is not guaranteed\
    \ to hash via\n   ECMP to the same destination as its corresponding TCP or UDP\
    \ session.\n   A case where this is particularly problematic operationally is\
    \ path\n   MTU discovery (PMTUD) [RFC1981].\n"
- title: 2.  Problem
  contents:
  - "2.  Problem\n   A common application for stateless load balancing of TCP or UDP\
    \ flows\n   is to perform an initial subdivision of flows in front of a stateful\n\
    \   load-balancer tier or multiple servers so that the workload becomes\n   divided\
    \ into manageable fractions of the total number of flows.  The\n   flow division\
    \ is performed using ECMP forwarding and a stateless but\n   sticky algorithm\
    \ for hashing across the available paths (see\n   [RFC2991] for background on\
    \ ECMP routing).  For the purposes of flow\n   distribution, this next-hop selection\
    \ is a constrained form of\n   anycast topology, where all anycast destinations\
    \ are equidistant from\n   the upstream router responsible for making the last\
    \ next-hop\n   forwarding decision before the flow arrives on the destination\n\
    \   device.  In this approach, the hash is performed across some set of\n   available\
    \ protocol headers.  Typically, these headers may include all\n   or a subset\
    \ of (IPv6) Flow-Label, IP-source, IP-destination,\n   protocol, source-port,\
    \ destination-port, and potentially others such\n   as ingress interface.\n  \
    \ A problem common to this approach of distribution through hashing is\n   impact\
    \ on path MTU discovery.  An ICMPv6 type 2 PTB message generated\n   on an intermediate\
    \ device for a packet sent from a server that is\n   part of an ECMP load-balanced\
    \ service to a client will have the load-\n   balanced anycast address as the\
    \ destination and hence will be\n   statelessly load balanced to one of the servers.\
    \  While the ICMPv6\n   PTB message contains as much of the packet that could\
    \ not be\n   forwarded as possible, the payload headers are not considered in\
    \ the\n   forwarding decision and are ignored.  Because the PTB message is not\n\
    \   identifiable as part of the original flow by the IP or upper-layer\n   packet\
    \ headers, the results of the ICMPv6 ECMP hash calculation are\n   unlikely to\
    \ be hashed to the same next hop as packets matching the\n   TCP or UDP ECMP hash\
    \ of the flow.\n   An example packet flow and topology follow.  The packet for\
    \ which the\n   PTB message was generated was intended for the client.\n   ptb\
    \ -> router ecmp -> next hop L4/L7 load balancer -> destination\n     router -->\
    \ load balancer 1 --->\n          \\\\--> load balancer 2 ---> load-balanced service\n\
    \           \\--> load balancer N --->\n                                 Figure\
    \ 1\n   The router ECMP decision is used because it is part of the forwarding\n\
    \   architecture, can be performed at line rate, and does not depend on\n   shared\
    \ state or coordination across a distributed forwarding system\n   that may include\
    \ multiple linecards or routers.  The ECMP routing\n   decision is deterministic\
    \ with respect to packets having the same\n   computed hash.\n   A typical case\
    \ in which ICMPv6 PTB messages are received at the load\n   balancer is where\
    \ the path MTU from the client to the load balancer\n   is limited by a tunnel\
    \ of which the client itself is not aware.\n   Direct experience says that the\
    \ frequency of PTB messages is small\n   compared to total flows.  One possible\
    \ conclusion is that tunneled\n   IPv6 deployments that cannot carry 1500 MTU\
    \ packets are relatively\n   rare.  Techniques employed by clients (e.g., Happy\
    \ Eyeballs\n   [RFC6555]) may actually contribute some amelioration to the IPv6\n\
    \   client experience by preferring IPv4 in cases that might be\n   identified\
    \ as failures.  Still, the expectation of operators is that\n   PMTUD should work\
    \ and that unnecessary breakage of client traffic\n   should be avoided.\n   A\
    \ final observation regarding server tuning is that it is not always\n   possible,\
    \ even if it is potentially desirable to be able to\n   independently set the\
    \ TCP MSS (Maximum Segment Size) for different\n   address families on some end\
    \ systems.  On Linux platforms, advmss\n   (advertised mss) may be set on a per-route\
    \ basis for selected\n   destinations in cases where discrimination by route is\
    \ possible.\n   The problem as described does also impact IPv4; however,\n   implementation\
    \ of RFC 4821 [RFC4821] TCP MTU probing, the ability to\n   fragment on the wire\
    \ at tunnel ingress points, and the relative\n   rarity of sub-1500-byte MTUs\
    \ that are not coupled to changes in\n   client behavior (for example, endpoint\
    \ VPN clients set the tunnel\n   interface MTU accordingly to avoid fragmentation\
    \ for performance\n   reasons) makes the problem sufficiently rare that some existing\n\
    \   deployments have chosen to ignore it.\n"
- title: 3.  Mitigation
  contents:
  - "3.  Mitigation\n   Mitigation of the potential for PTB messages to be misdelivered\n\
    \   involves ensuring that an ICMPv6 error message is distributed to the\n   same\
    \ anycast server responsible for the flow for which the error is\n   generated.\
    \  With appropriate hardware support, flows could be\n   identified using the\
    \ same technique as hosts by inspecting the\n   payload of the ICMPv6 message.\
    \  The ECMP hash calculation can then be\n   performed using values identified\
    \ from the inner TCP flow parameters\n   of the ICMPv6 message.  Because the encapsulated\
    \ IP header occurs at\n   a fixed offset in the ICMP message, it is not outside\
    \ the realm of\n   possibility that routers with sufficient header processing\
    \ capability\n   could parse that far into the payload.  Employing a mediation\
    \ device\n   that handles the parsing and distribution of PTB messages after\n\
    \   policy routing or on each load balancer / server is a possibility.\n   Another\
    \ mitigation approach is predicated upon distributing the PTB\n   message to all\
    \ anycast servers under the assumption that the one for\n   which the message\
    \ was intended will be able to match it to the flow\n   and update the route cache\
    \ with the new MTU and that devices not able\n   to match the flow will discard\
    \ these packets.  Such distribution has\n   potentially significant implications\
    \ for resource consumption and for\n   self-inflicted denial of service (DOS)\
    \ if not carefully employed.\n   Fortunately, we have observed that the number\
    \ of flows for which this\n   problem occurs is relatively small in real-world\
    \ deployments (for\n   example, 10 or fewer pps on 1 Gbit/s or more worth of HTTPS);\n\
    \   sensible ingress rate limiters that will discard excessive message\n   volume\
    \ can be applied to protect even very large anycast server tiers\n   with the\
    \ potential for fallout limited to circumstances of deliberate\n   duress.\n"
- title: 3.1.  Alternative Mitigations
  contents:
  - "3.1.  Alternative Mitigations\n   As an alternative, it may be appropriate to\
    \ lower the TCP MSS to 1220\n   in order to accommodate 1280-byte MTU.  We consider\
    \ this undesirable,\n   as hosts may not be able to independently set TCP MSS\
    \ by address\n   family thereby impacting IPv4, or alternatively that middle-boxes\n\
    \   need to be employed to clamp the MSS independently from the end\n   systems.\
    \  Potentially, extension headers might further alter the\n   lower bound that\
    \ the MSS would have to be set to, making clamping\n   even more undesirable.\n"
- title: 3.2.  Implementation
  contents:
  - "3.2.  Implementation\n   1.  Filter-based forwarding matches next-header ICMPv6\
    \ type 2 and\n       matches a next hop on a particular subnet directly attached\
    \ to\n       one or more routers.  The filter is policed to reasonable limits\n\
    \       (we chose 1000 pps; more conservative rates might be required in\n   \
    \    other implementations).\n   2.  The filter is applied on the input side of\
    \ all external\n       (Internet- or customer-facing) interfaces.\n   3.  A proxy\
    \ located at the next hop forwards ICMPv6 type 2 packets it\n       receives to\
    \ an Ethernet broadcast address (example\n       ff:ff:ff:ff:ff:ff) on all specified\
    \ subnets.  This was\n       necessitated by router inability (in IPv6) to forward\
    \ the same\n       packet to multiple unicast next hops.\n   4.  Anycasted servers\
    \ receive the PTB error and process the packet as\n       needed.\n   A simple\
    \ Python scapy [SCAPY] script that can perform the ICMPv6\n   proxy reflection\
    \ is included.\n         #!/usr/bin/python\n         from scapy.all import *\n\
    \         IFACE_OUT = [\"p2p1\", \"p2p2\"]\n         def icmp6_callback(pkt):\n\
    \             if pkt.haslayer(IPv6) and (ICMPv6PacketTooBig in pkt) \\\n     \
    \        and pkt[Ether].dst != 'ff:ff:ff:ff:ff:ff':\n                 del(pkt[Ether].src)\n\
    \                 pkt[Ether].dst = 'ff:ff:ff:ff:ff:ff'\n                 pkt.show()\n\
    \                 for iface in IFACE_OUT:\n                     sendp(pkt, iface=iface)\n\
    \         def main():\n             sniff(prn=icmp6_callback, filter=\"icmp6 \\\
    \n             and (ip6[40+0] == 2)\", store=0)\n         if __name__ == '__main__':\n\
    \             main()\n   This example script listens on all interfaces for IPv6\
    \ PTB errors\n   being forwarded using filter-based forwarding.  It removes the\n\
    \   existing Ethernet source and rewrites a new Ethernet destination of\n   the\
    \ Ethernet broadcast address.  It then sends the resulting frame\n   out the p2p1\
    \ and p2p2 interfaces that are attached to VLANs where our\n   anycast servers\
    \ reside.\n"
- title: 3.2.1.  Alternative Implementation
  contents:
  - "3.2.1.  Alternative Implementation\n   Alternatively, network designs in which\
    \ a common layer 2 network\n   exists on the ECMP hop could distribute the proxy\
    \ onto the end\n   systems, eliminating the need for policy routing.  They could\
    \ then\n   rewrite the destination -- for example, using iptables before\n   forwarding\
    \ the packet back to the network containing all of the\n   server or load-balancer\
    \ interfaces.  This implementation can be done\n   entirely within the Linux iptables\
    \ firewall.  Because of the\n   distributed nature of the filter, more conservative\
    \ rate limits are\n   required than when a global rate limit can be employed.\n\
    \   An example ip6tables/nftables rule to match icmp6 traffic, not match\n   broadcast\
    \ traffic, impose a rate limit of 10 pps, and pass to a\n   target destination\
    \ would resemble:\n       ip6tables -I INPUT -i lo -p icmpv6 -m icmpv6 --icmpv6-type\
    \ 2/0 \\\n       -m pkttype ! --pkt-type broadcast -m limit --limit 10/second\
    \ \\\n       -j TEE 2001:DB8::1\n   As with the scapy example, once the destination\
    \ has been rewritten\n   from a hardcoded ND entry to an Ethernet broadcast address\
    \ -- in this\n   case to an IPv6 documentation address -- the traffic will be\n\
    \   reflected to all the hosts on the subnet.\n"
- title: 4.  Improvements
  contents:
  - "4.  Improvements\n   There are several ways that improvements could be made to\
    \ improve\n   handling ECMP load balancing of ICMPv6 PTB messages.  Little in\
    \ the\n   way of change to the Internet protocol specification is required;\n\
    \   rather, we foresee practical implementation change, which, insofar as\n  \
    \ we are aware, does not exist in current router, switch, or layer 3/4\n   load\
    \ balancers.  Alternatively, improved behavior on the part of\n   client/server\
    \ detection of path MTU in band could render the behavior\n   of devices in the\
    \ path irrelevant.\n   1.  Routers with sufficient capacity within the lookup\
    \ process could\n       parse all the way through the L3 or L4 header in the ICMPv6\n\
    \       payload beginning at bit offset 32 of the ICMP header.  By\n       reordering\
    \ the elements of the hash to match the inward direction\n       of the flow,\
    \ the PTB error could be directed to the same next hop\n       as the incoming\
    \ packets in the flow.\n   2.  The FIB (Forwarding Information Base) on the router\
    \ could be\n       programmed with a multicast distribution tree that includes\
    \ all\n       of the necessary next hops, and unicast ICMPv6 packets could be\n\
    \       policy routed to these destinations.\n   3.  Ubiquitous implementation\
    \ of RFC 4821 [RFC4821] Packetization\n       Layer Path MTU Discovery would probably\
    \ go a long way towards\n       reducing dependence on ICMPv6 PTB by end systems.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The employed mitigation has the potential to\
    \ greatly amplify the\n   impact of a deliberately malicious sending of ICMPv6\
    \ PTB messages.\n   Sensible ingress rate limiting can reduce the potential for\
    \ impact;\n   legitimate PMTUD messages may be lost once the rate limit is reached.\n\
    \   The scenario where drops of legitimate traffic occur is analogous to\n   other\
    \ cases where DOS traffic can crowd out legitimate traffic,\n   however only a\
    \ limited subset of overall traffic is impacted.\n   The proxy replication results\
    \ in all devices on the subnet receiving\n   ICMPv6 PTB errors, even those not\
    \ associated with the flow.  This\n   could arguably result in information disclosure\
    \ due to the wide\n   replication of the ICMPv6 PTB error on the subnet and the\
    \ large\n   fragment of the offending IP packet embedded in the ICMPv6 error.\n\
    \   Because of this, recipient machines should be in a common\n   administrative\
    \ domain.\n"
- title: 6.  Informative References
  contents:
  - "6.  Informative References\n   [RFC1981]  McCann, J., Deering, S., and J. Mogul,\
    \ \"Path MTU Discovery\n              for IP version 6\", RFC 1981, DOI 10.17487/RFC1981,\
    \ August\n              1996, <http://www.rfc-editor.org/info/rfc1981>.\n   [RFC2991]\
    \  Thaler, D. and C. Hopps, \"Multipath Issues in Unicast and\n              Multicast\
    \ Next-Hop Selection\", RFC 2991,\n              DOI 10.17487/RFC2991, November\
    \ 2000,\n              <http://www.rfc-editor.org/info/rfc2991>.\n   [RFC4821]\
    \  Mathis, M. and J. Heffner, \"Packetization Layer Path MTU\n              Discovery\"\
    , RFC 4821, DOI 10.17487/RFC4821, March 2007,\n              <http://www.rfc-editor.org/info/rfc4821>.\n\
    \   [RFC6555]  Wing, D. and A. Yourtchenko, \"Happy Eyeballs: Success with\n \
    \             Dual-Stack Hosts\", RFC 6555, DOI 10.17487/RFC6555, April\n    \
    \          2012, <http://www.rfc-editor.org/info/rfc6555>.\n   [SCAPY]    Scapy,\
    \ <http://www.secdev.org/projects/scapy/>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors thank Marak Majkowsiki for contributing text,\
    \ examples,\n   and a very thorough review.  The authors would like to thank Mark\n\
    \   Andrews, Brian Carpenter, Nick Hilliard, and Ray Hunter, for review.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Matt Byerly\n   Fastly\n   Kapolei, HI\n   United States\n\
    \   Email: suckawha@gmail.com\n   Matt Hite\n   Evernote\n   Redwood City, CA\n\
    \   United States\n   Email: mhite@hotmail.com\n   Joel Jaeggli\n   Fastly\n \
    \  Mountain View, CA\n   United States\n   Email: joelja@gmail.com\n"
