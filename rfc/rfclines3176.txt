Abstract This memo defines InMon Coporation's sFlow system.
sFlow is a technology for monitoring traffic in data networks containing switches and routers.
In particular, it defines the sampling mechanisms implemented in an sFlow Agent for monitoring traffic, the sFlow MIB for controlling the sFlow Agent, and the format of sample data used by the sFlow Agent when forwarding data to a central data collector.
Overview sFlow is a technology for monitoring traffic in data networks containing switches and routers.
In particular, it defines the sampling mechanisms implemented in an sFlow Agent for monitoring traffic, the sFlow MIB for controlling the sFlow Agent, and the format of sample data used by the sFlow Agent when forwarding data to a central data collector.
The architecture and sampling techniques used in the sFlow monitoring system are designed to provide continuous site wide (and network  wide) traffic monitoring for high speed switched and routed networks.
The design specifically addresses issues associated with: Accurately monitoring network traffic at Gigabit speeds and higher.
Scaling to manage tens of thousands of agents from a single point.
Extremely low cost agent implementation.
The sFlow monitoring system consists of an sFlow Agent (embedded in a switch or router or in a stand alone probe) and a central data collector, or sFlow Analyzer.
The sFlow Agent uses sampling technology to capture traffic statistics from the device it is monitoring.
sFlow Datagrams are used to immediately forward the sampled traffic statistics to an sFlow Analyzer for analysis.
This document describes the sampling mechanisms used by the sFlow Agent, the SFLOW MIB used by the sFlow Analyzer to control the sFlow Agent, and the sFlow Datagram Format used by the sFlow Agent to send traffic data to the sFlow Analyzer.
The sFlow Agent uses two forms of sampling: statistical packet based sampling of switched flows, and time based sampling of network interface statistics.
2.1 Sampling of Switched Flows
A flow is defined as all the packets that are received on one interface, enter the Switching/Routing Module and are sent to another interface.
In the case of a one armed router, the source and destination interface could be the same.
In the case of a broadcast or multicast packet there may be multiple destination interfaces.
The sampling mechanism must ensure that any packet involved in a flow has an equal chance of being sampled, irrespective of the flow to which it belongs.
Sampling flows is accomplished as follows: When a packet arrives on an interface, a filtering decision is made that determines whether the packet should be dropped.
If the packet is not filtered a destination interface is assigned by the switching/routing function.
At this point a decision is made on whether or not to sample the packet.
The mechanism involves a counter that is decremented with each packet.
When the counter reaches zero a sample is taken.
Whether or not a sample is taken, the counter Total Packets is incremented.
Total Packets is a count of all the packets that could have been sampled.
Taking a sample involves either copying the packet's header, or extracting features from the packet (see sFlow Datagram Format for a description of the different forms of sample).
Every time a sample is taken, the counter Total Samples, is incremented.
Total Samples is a count of the number of samples generated.
Samples are sent by the sampling entity to the sFlow Agent for processing.
The sample includes the packet information, and the values of the Total Packets and Total Samples counters.
When a sample is taken, the counter indicating how many packets to skip before taking the next sample should be reset.
The value of the counter should be set to a random integer where the sequence of random integers used over time should be such that (1) Total Packets/Total Samples   Rate
An alternative strategy for packet sampling is to generate a random number for each packet, compare the random number to a preset threshold and take a sample whenever the random number is smaller than the threshold value.
Calculation of an appropriate threshold value depends on the characteristics of the random number generator, however, the resulting sample stream must still satisfy (1).
2.1.1 Distributed Switching The SFLOW
MIB permits separate sampling entities to be associated with different physical or logical elements of the switch (such as interfaces, backplanes or VLANs).
Each sampling engine has its own independent state (i.e., Total Packets, Total Samples, Skip and Rate), and forwards its own sample messages to the sFlow Agent.
The sFlow Agent is responsible for packaging the samples into datagrams for transmission to an sFlow Analyzer.
The essential property of the random number generator is that the mean value of the numbers it generates converges to the required sampling rate.
A uniform distribution random number generator is very effective.
The range of skip counts (the variance) does not significantly affect results; variation of  10% of the mean value is sufficient.
The random number generator must ensure that all numbers in the range between its maximum and minimum values of the distribution are possible; a random number generator only capable of generating even numbers, or numbers with any common divisor is unsuitable.
A new skip value is only required every time a sample is taken.
2.2 Sampling of Network Interface Statistics
The objective of the counter sampling is to efficiently, periodically poll each data source on the device and extract key statistics.
For efficiency and scalability reasons, the sFlow System implements counter polling in the sFlow Agent.
A maximum polling interval is assigned to the agent, but the agent is free to schedule polling in order maximize internal efficiency.
Flow sampling and counter sampling are designed as part of an integrated system.
Both types of samples are combined in sFlow Datagrams.
Since flow sampling will cause a steady, but random, stream of datagrams to be sent to the sFlow Analyzer, counter samples may be taken opportunistically in order to fill these datagrams.
One strategy for counter sampling has the sFlow Agent keep a list of counter sources being sampled.
When a flow sample is generated the sFlow Agent examines the list and adds counters to the sample datagram, least recently sampled first.
Counters are only added to the datagram if the sources are within a short period, 5 seconds say, of failing to meet the required sampling interval (see sFlowCounterSamplingInterval in SFLOW MIB).
Whenever a counter source's statistics are added to a sample datagram, the time the counter source was last sampled is updated and the counter source is placed at the end of the list.
Periodically, say every second, the sFlow Agent examines the list of counter sources and sends any counters that need to be sent to meet the sampling interval requirement.
Alternatively, if the agent regularly schedules counter sampling
, then it should schedule each counter source at a different start time (preferably randomly) so that counter sampling is not synchronized within an agent or between agents.
The sFlow MIB defines a control interface for an sFlow Agent.
This interface provides a standard mechanism for remotely controlling and configuring an sFlow Agent.
The SNMP Management Framework presently consists of five major components:  An overall architecture, described in RFC 2571 [2].
Mechanisms for describing and naming objects and events for the purpose of management.
The first version of this Structure of Management Information (SMI) is called SMIv1 and described in STD 16, RFC 1155 [3], STD 16, RFC 1212 [4] and RFC 1215 [5].
The second version, called SMIv2, is described in STD 58, RFC 2578 [6], STD 58, RFC 2579 [7] and STD 58, RFC 2580 [8].
Message protocols for transferring management information.
The first version of the SNMP message protocol is called SNMPv1 and described in STD 15, RFC 1157 [9].
A second version of the SNMP message protocol, which is not an Internet standards track protocol, is called SNMPv2c and described in RFC 1901 [10] and RFC 1906 [11].
The third version of the message protocol is called SNMPv3 and described in RFC 1906 [11], RFC 2572 [12] and RFC 2574 [13].
Protocol operations for accessing management information.
The first set of protocol operations and associated PDU formats is described in STD 15, RFC 1157 [9].
A second set of protocol operations and associated PDU formats is described in RFC 1905 [14].
A set of fundamental applications described in RFC 2573 [15] and the view based access control mechanism described in RFC 2575 [16].
A more detailed introduction to the current SNMP Management Framework can be found in RFC 2570 [17].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
Objects in the MIB are defined using the mechanisms defined in the SMI.
This memo specifies a MIB module that is compliant to the SMIv2.
A MIB conforming to the SMIv1 can be produced through the appropriate translations.
The resulting translated MIB must be semantically equivalent, except where objects or events are omitted because no translation is possible (use of Counter64).
Some machine readable information in SMIv2 will be converted into textual descriptions in SMIv1 during the translation process.
However, this loss of machine readable information is not considered to change the semantics of the MIB.
IMPORTS MODULE IDENTITY, OBJECT TYPE, Integer32,
SMI SnmpAdminString FROM SNMP FRAMEWORK MIB OwnerString FROM RMON MIB InetAddressType, InetAddress FROM
INET ADDRESS MIB MODULE COMPLIANCE, OBJECT GROUP FROM SNMPv2 CONF;
InMon Corp." CONTACT INFO "
Peter Phaal InMon Corp. http://www.inmon.com/
661 6343 Email: peter phaal@inmon.com" DESCRIPTION "
The MIB module for managing the generation and transportation of sFlow data records."
Version 1.2 Brings MIB into SMI v2 compliance."
2001 DESCRIPTION "Version 1.1 Adds sFlowDatagramVersion."
"Uniquely identifies the version and implementation of this MIB.
The version string must have the following structure:
must be '1.2', the version of this MIB.
<Organization> the name of the organization responsible for the agent implementation.
As an example, the string '1.2;InMon Corp.;2.1.1' indicates that this agent implements version '1.2' of the SFLOW MIB, that it was developed by 'InMon Corp.' and that the software build is '2.1.1'.
The MIB Version will change with each revision of the SFLOW MIB.
Management entities must check the MIB Version and not attempt to manage agents with MIB Versions greater than that for which they were designed.
The sFlow Datagram Format has an independent version number which may change independently from <MIB Version>.
> applies to the structure and semantics of the SFLOW MIB only.
"The address type of the address associated with this agent.
Only ipv4 and ipv6 types are supported."
The IP address associated with this agent.
In the case of a multi homed agent, this should be the loopback address of the agent.
The sFlowAgent address must provide SNMP connectivity to the agent.
The address should be an invariant that does not change as interfaces are reconfigured, enabled, disabled, added or removed.
A manager should be able to use the sFlowAgentAddress as a unique key that will identify this agent over extended periods of time so that a history can be maintained."
A table of the sFlow samplers within a device."
{ sFlowAgent 4 } sFlowEntry OBJECT TYPE SYNTAX
current DESCRIPTION "Attributes of an sFlow sampler.
Identifies the source of the data for the sFlow sampler.
The following data source types are currently defined:
ifIndex.<I> DataSources of this traditional form are called 'port based'.
Ideally the sampling entity will perform sampling on all flows originating from or destined to the specified interface.
However, if the switch architecture only permits input or output sampling then the sampling agent is permitted to only sample input flows input or output flows.
Each packet must only be considered once for sampling, irrespective of the number of ports it will be forwarded to.
Note: Port 0 is used to indicate that all ports on the device are represented by a single data source.
sFlowPacketSamplingRate applies to all ports on the device capable of packet sampling.
sFlowCounterSamplingInterval applies to all ports.
A dataSource of this form refers to a 'Packet based VLAN' and is called a 'VLAN based' dataSource.
> is the VLAN ID as defined by the IEEE 802.1Q standard.
The value is between 1 and 4094 inclusive, and it represents an 802.1Q VLAN ID with global scope within a given bridged domain.
Sampling is performed on all packets received that are part of the specified VLAN (no matter which port they arrived on).
Each packet will only be considered once for sampling, irrespective of the number of ports it will be forwarded to.
A dataSource of this form refers to a physical entity within the agent (e.g., entPhysicalClass
backplane(4)) and is called an 'entity based' dataSource.
Sampling is performed on all packets entering the resource (e.g. If the backplane is being sampled, all packets transmitted onto the backplane will be considered as single candidates for sampling irrespective of the number of ports they ultimately reach).
Note: Since each DataSource operates independently, a packet that crosses multiple DataSources may generate multiple flow records."
"The entity making use of this sFlow sampler.
The empty string indicates that the sFlow sampler is currently unclaimed.
An entity wishing to claim an sFlow sampler must make sure that the sampler is unclaimed before trying to claim it.
The sampler is claimed by setting the owner string to identify the entity claiming the sampler.
The sampler must be claimed before any changes can be made to other sampler objects.
In order to avoid a race condition, the entity taking control of the sampler must set both the owner and a value for sFlowTimeout in the same SNMP set request.
When a management entity is finished using the sampler, it should set its value back to unclaimed.
The agent must restore all other entities this row to their default values when the owner is set to unclaimed.
This mechanism provides no enforcement and relies on the cooperation of management entities in order to ensure that competition for a sampler is fairly resolved.
The time (in seconds) remaining before the sampler is released and stops sampling.
When set, the owner establishes control for the specified period.
When read, the remaining time in the interval is returned.
A management entity wanting to maintain control of the sampler is responsible for setting a new value before the old one expires.
When the interval expires, the agent is responsible for restoring all other entities in this row to their default values.
current DESCRIPTION "The statistical sampling rate for packet sampling from this source.
Set to N to sample 1/Nth of the packets in the monitored flows.
An agent should choose its own algorithm introduce variance into the sampling so that exactly every Nth packet is not counted.
A sampling rate of 1 counts all packets.
A sampling rate of 0 disables sampling.
The agent is permitted to have minimum and maximum allowable values for the sampling rate.
A minimum rate lets the agent designer set an upper bound on the overhead associated with sampling, and a maximum rate may be the result of hardware restrictions (such as counter size).
In addition not all values between the maximum and minimum may be realizable as the sampling rate (again because of implementation considerations).
When the sampling rate is set the agent is free to adjust the value so that it lies between the maximum and minimum values and has the closest achievable value.
When read, the agent must return the actual sampling rate it will be using (after the adjustments previously described).
The sampling algorithm must converge so that over time the number of packets sampled approaches
1/Nth of the total number of packets in the monitored flows.
"The maximum number of seconds between successive samples of the counters associated with this data source.
A sampling interval of 0 disables counter sampling."
"The maximum number of bytes that should be copied from a sampled packet.
The agent may have an internal maximum and minimum permissible sizes.
If an attempt is made to set this value outside the permissible range then the agent should adjust the value to the closest permissible value."
"The maximum number of data bytes that can be sent in a single sample datagram.
The manager should set this value to avoid fragmentation of the sFlow datagrams.
InetAddressType MAX ACCESS  read write
current DESCRIPTION "The type of sFlowCollectorAddress.
The IP address of the sFlow collector.
If set to 0.0.0.0 all sampling is disabled.
"The destination port for sFlow datagrams."
"The version of sFlow datagrams that should be sent.
When set to a value not support by the agent, the agent should adjust the value to the highest supported value less than the requested value, or return an error if no such values exist.
} sFlowMIBCompliances OBJECT IDENTIFIER ::
{ ipv4(1) } DESCRIPTION "Agents need only support ipv4."
InetAddressType { ipv4(1) } DESCRIPTION "Agents need only support ipv4."
A collection of objects for managing the generation and transportation of sFlow data records."
The sFlow MIB references definitions from a number of existing RFCs [18], [19], [20] and [21].
The sFlow datagram format specifies a standard format for the sFlow Agent to send sampled data to a remote data collector.
The format of the sFlow datagram is specified using the XDR standard [1].
XDR is more compact than ASN.1 and simpler for the sFlow Agent to encode and the sFlow Analyzer to decode.
Samples are sent as UDP packets to the host and port specified in the SFLOW MIB.
The lack of reliability in the UDP transport mechanism does not significantly affect the accuracy of the measurements obtained from an sFlow Agent.
If counter samples are lost then new values will be sent during the next polling interval.
The chance of an undetected counter wrap is negligible.
The sFlow datagram specifies 64 bit octet counters, and with typical counter polling intervals between 20 to 120 seconds, the chance of a long enough sequence of sFlow datagrams being lost to hide a counter wrap is very small.
The net effect of lost flow samples is a slight reduction in the effective sampling rate.
The use of UDP reduces the amount of memory required to buffer data.
UDP also provides a robust means of delivering timely traffic information during periods of intense traffic (such as a denial of service attack).
UDP is more robust than a reliable transport mechanism because under overload the only effect on overall system performance is a slight increase in transmission delay and a greater number of lost packets, neither of which has a significant effect on an sFlow based monitoring system.
If a reliable transport mechanism were used then an overload would introduce long transmission delays and require large amounts of buffer memory on the agent.
While the sFlow Datagram structure permits multiple samples to be included in each datagram, the sampling agent must not wait for a buffer to fill with samples before sending the sample datagram.
sFlow sampling is intended to provide timely information on traffic.
The agent may at most delay a sample by 1 second before it is required to send the datagram.
The agent should try to piggyback counter samples on the datagram stream resulting from flow sampling.
Before sending out a datagram the remaining space in the buffer can be filled with counter samples.
The agent has discretion in the timing of its counter polling, the specified counter sampling intervals sFlowCounterSamplingInterval is a maximum, so the agent is free to sample counters early if it has space in a datagram.
If counters must be sent in order to satisfy the maximum sampling interval then a datagram must be sent containing the outstanding counters.
The maximum sampled header size.
IP next header (for example, TCP   6, UDP   17)
IP version 4 data  / IPV6
d of incoming frame  / unsigned int src priority;
URL associated with packet source
Extended gateway router information  /
and the lower three bytes contain the relevant index value.
if interface is not known.
Set most significant bit to indicate multiple destination interfaces (i.e., in case of broadcast or multicast) and set lower order bits to indicate number of destination interfaces.
indicates a packet sent to 7 interfaces.
indicates a packet sent to an unknown number of interfaces greater than 1.
/ packet data type packet data
down, 1   up) bit 1   ifOperStatus (0
and the lower three bytes contain the relevant index value.
Should be set as close to datagram transmission time as possible.
sample datagram v4 datagram; } struct sample datagram { sample datagram type version; } The sFlow Datagram specification makes use of definitions from a number of existing RFCs [22], [23], [24], [25], [26], [27] and [28].
a traffic monitoring system raises a number of security related issues.
sFlow does not provide specific security mechanisms, relying instead on proper deployment and configuration to maintain an adequate level of security.
While the deployment of traffic monitoring systems does create some risk, it also provides a powerful means of detecting and tracing unauthorized network activity.
This section is intended to provide information that will help understand potential risks and configuration options for mitigating those risks.
The sFlow MIB is used to configure the generation of sFlow samples.
The security of SNMP, with access control lists, is usually considered adequate in an enterprise setting.
However, there are situations when these security measures are insufficient (for example a WAN router) and SNMP configuration control will be disabled.
When SNMP is disabled, a command line interface is typically provided.
The following arguments are required to configure sFlow sampling on an interface.
5.2 Transport Traffic information is sent unencrypted across the network from the sFlow Agent to the sFlow Analyzer and is thus vulnerable to eavesdropping.
This risk can be limited by creating a secure measurement network and routing the sFlow Datagrams over this network.
The choice of technology for creating the secure measurement network is deployment specific, but could include the use of VLANs or VPN tunnels.
The sFlow Analyzer is vulnerable to attacks involving spoofed sFlow Datagrams.
To limit this vulnerability the sFlow Analyzer should check sequence numbers and verify source addresses.
If a secure measurement network has been constructed then only sFlow Datagrams received from that network should be processed.
5.3 Confidentiality Traffic information can reveal confidential information about individual network users.
The degree of visibility of application level data can be controlled by limiting the number of header bytes captured by the sFlow agent.
In addition, packet sampling makes it virtually impossible to capture sequences of packets from an individual transaction.
The traffic patterns discernible by decoding the sFlow Datagrams in the sFlow Analyzer can reveal details of an individual's network related activities and due care should be taken to secure access to the sFlow Analyzer.
