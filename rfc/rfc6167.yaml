- title: __initial_text__
  contents:
  - '              URI Scheme for Java(tm) Message Service 1.0

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines the format of Uniform Resource Identifiers\n\
    \   (URIs) as defined in RFC 3986, for designating connections and\n   destination\
    \ addresses used in the Java(tm) Messaging Service (JMS).\n   It was originally\
    \ designed for particular uses, but applies generally\n   wherever a JMS URI is\
    \ needed to describe the connection to a JMS\n   provider, and access to a JMS\
    \ Destination.  The syntax of this JMS\n   URI is not compatible with previously\
    \ existing, but unregistered,\n   \"jms\" URI schemes.  However, the expressiveness\
    \ of the scheme\n   described herein should satisfy the requirements of all existing\n\
    \   circumstances.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6167.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Requirements Notation ......................................4\n  \
    \ 2. URI Scheme Name .................................................5\n   3.\
    \ Syntax of a JMS URI .............................................5\n   4. URI\
    \ Scheme Semantics ............................................5\n      4.1. Shared\
    \ Parameters ..........................................6\n      4.2. \"jndi\"\
    \ Variant .............................................7\n      4.3. Vendor Destination\
    \ Names -- Variants \"queue\" and \"topic\" ..11\n      4.4. Custom Parameters\
    \ .........................................12\n   5. Encoding Considerations ........................................13\n\
    \   6. Applications/Protocols That Use the JMS URI ....................13\n  \
    \ 7. Interoperability Considerations ................................13\n   8.\
    \ Security Considerations ........................................14\n      8.1.\
    \ Reliability and Consistency ...............................14\n      8.2. Malicious\
    \ Construction ....................................14\n      8.3. Back-End Transcoding\
    \ ......................................15\n      8.4. Semantic Attacks ..........................................15\n\
    \      8.5. Other Security Concerns ...................................16\n  \
    \ 9. IANA Considerations ............................................16\n    \
    \  9.1. URI Scheme Registration ...................................16\n      9.2.\
    \ \"jms\" URI Scheme Registries ...............................17\n   10. Contributors\
    \ ..................................................18\n   11. Acknowledgements\
    \ ..............................................19\n   12. References ....................................................20\n\
    \      12.1. Normative References .....................................20\n  \
    \    12.2. Informative References ...................................21\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The \"jms\" URI scheme is used to designate a javax.jms.Destination\n\
    \   object and an associated javax.jms.ConnectionFactory object [JMS],\n   and,\
    \ optionally, to provide additional information concerning the way\n   that the\
    \ Destination object is to be used.  Probably the most common,\n   and certainly\
    \ the most compatible, way in Java to retrieve such\n   Destinations is via Java\
    \ Naming and Directory Information (JNDI)\n   [JNDI] methods.  So as to extend\
    \ compatibility to existing vendor\n   mechanisms beyond JNDI lookup, the JMS\
    \ URI syntax allows variants on\n   the core syntax.  The variant exists as an\
    \ explicit part of the\n   syntax so that tools that are otherwise unfamiliar\
    \ with the variant\n   can recognize the presence of a URI with an alternate interpretation.\n\
    \   In its simplest and most interoperable form, this URI scheme starts\n   with\
    \ \"jms:jndi:\" plus a JNDI name for a Destination.  Since\n   interaction with\
    \ some resources might require JNDI contextual\n   information or JMS header fields\
    \ and properties to be specified as\n   well, the \"jndi\" variant of the \"jms\"\
    \ URI scheme includes support for\n   supplying this additional JNDI information\
    \ as query parameters.\n   While the \"jndi\" variant provides compatibility,\
    \ vendors can define\n   additional variants.  This specification defines three\
    \ variants:\n   \"jndi\", \"queue\", and \"topic\".  Vendors defining additional\
    \ variants\n   are strongly encouraged to register them with IANA as documented\
    \ in\n   Section 9.2.1.\n   While the \"jms\" URI scheme allows the location of\
    \ network resources,\n   it does not map to a single underlying protocol, unlike\
    \ most other\n   URI schemes that do so.  Instead, it achieves interoperability\n\
    \   through the use of a common Java-based API [JAVA] for messaging.\n   Because\
    \ of this, interoperability is dependent upon the\n   implementation of the API\
    \ and its capabilities; two implementations\n   of JMS might or might not interoperate\
    \ in practice.  Furthermore, it\n   might be impractical to use JMS URIs in non-Java\
    \ environments.\n   As a consequence of building upon an API, rather than a protocol,\
    \ the\n   utility of a JMS URI depends on the context in which it is used.\n \
    \  That context includes agreement on the same JMS provider or\n   underlying\
    \ protocol; agreement on how to look up endpoints (JNDI);\n   and, when using\
    \ serialized Java object messages, sufficiently similar\n   Java Class environments\
    \ that serialized objects can be appropriately\n   read and written.  Users of\
    \ this scheme need to establish the\n   necessary shared-context parts as just\
    \ enumerated -- a context that\n   can span the globe, or merely a small local\
    \ network.  With that\n   shared context, this URI scheme enables endpoint identification\
    \ in a\n   uniform way, and the means to connect to those endpoints.\n"
- title: 1.1.  Requirements Notation
  contents:
  - "1.1.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   All syntax descriptions use the ABNF specified by [RFC5234],\n\
    \   \"Augmented BNF for Syntax Specifications: ABNF\".\n   Note that some examples\
    \ in this document wrap long JMS URIs for\n   readability.  The line breaks are\
    \ not part of the actual URIs.\n"
- title: 2.  URI Scheme Name
  contents:
  - "2.  URI Scheme Name\n   The name of the URI scheme is \"jms\".\n"
- title: 3.  Syntax of a JMS URI
  contents:
  - "3.  Syntax of a JMS URI\n   The following ABNF describes the \"jms\" scheme URI\
    \ syntax:\n     jms-uri = \"jms:\" jms-variant \":\" jms-dest\n        [ \"?\"\
    \ param *( \"&\" param ) ]\n     jms-variant = segment-nz-nc\n     jms-dest =\
    \ segment-nz ; specific meaning per variant\n     param = param-name \"=\" param-value\n\
    \     param-name = 1*(unreserved / pct-encoded)\n     param-value = *(unreserved\
    \ / pct-encoded)\n     segment-nz-nc = <as defined in RFC 3986>\n     path-rootless\
    \ = <as defined in RFC 3986>\n     unreserved = <as defined in RFC 3986>\n   \
    \  pct-encoded = <as defined in RFC 3986>\n   The URIs are percent-encoded UTF-8\
    \ [RFC3629].  Please see Section 5\n   of this document for encoding considerations.\n"
- title: 4.  URI Scheme Semantics
  contents:
  - "4.  URI Scheme Semantics\n   JMS URIs are used to locate JMS [JMS] Destination\
    \ resources and do\n   not specify actions to be taken on those resources.  Operations\n\
    \   available on JMS Destinations are fully and normatively defined by\n   the\
    \ JMS specification and as such are out of scope for this URI\n   specification.\n\
    \   The required portions of the syntax include the terminal of \"jms\" for\n\
    \   the URI scheme name; the <jms-variant> element to indicate the\n   variant\
    \ of the scheme; and the <jms-dest> element, which identifies\n   the Destination\
    \ based on the chosen variant.  For the <jms-variant>\n   element, this document\
    \ defines three values: \"jndi\", \"queue\", and\n   \"topic\".  All the terminals\
    \ resulting from <jms-variant> and\n   <jms-dest> production rules are case-sensitive.\n\
    \   Parameters further refine how to locate and use the Destination.  The\n  \
    \ parameter names and values are case-sensitive.  They can occur in any\n   order,\
    \ and each parameter name SHOULD NOT appear more than once.  In\n   the event\
    \ that a parameter appears multiple times, all but the last\n   instance of the\
    \ parameter MUST be ignored.  For comparison purposes,\n   the absence of a parameter\
    \ does not mean the same thing as a URI with\n   a parameter set to a default\
    \ value, due to the potential variation in\n   default values as determined by\
    \ the context of a specific use.\n   Each variant can have query parameters specific\
    \ to that variation.\n   All such variant-specific parameters SHOULD use the name\
    \ of the\n   variant as the prefix to the parameters.  For example, a vendor-\n\
    \   specific variant of \"vnd.example.ex\" might also define a parameter\n   with\
    \ a name like \"vnd.example.exParameter\".  Parameters that apply\n   across multiple\
    \ variants -- perhaps because they are generally\n   applicable, such as JMS settings\
    \ -- MUST NOT have a name that starts\n   with the name of any known variant.\
    \  This pattern enables tools that\n   are otherwise unfamiliar with a particular\
    \ variant to distinguish\n   those parameters that are specific to a variant from\
    \ those that are\n   more generally applicable.\n   Examples of the URI scheme\
    \ include:\n     jms:jndi:SomeJndiNameForDestination?\n       jndiInitialContextFactory=\n\
    \       com.example.jndi.JndiFactory&priority=3\n     jms:queue:ExampleQueueName?timeToLive=1000\n"
- title: 4.1.  Shared Parameters
  contents:
  - "4.1.  Shared Parameters\n   In addition to the required particles, the \"jms\"\
    \ URI scheme supports\n   the following shared parameters, which are available\
    \ to all variants.\n   These parameters correspond to headers and properties on\
    \ the JMS\n   Messages to be sent.  For the parameters deliveryMode, timeToLive,\n\
    \   and priority, the default values might be specified in the context of\n  \
    \ a specific use, for example by environment variables, or in the\n   configuration\
    \ of a particular network application.  JMS also defines\n   default values for\
    \ these properties.  The context default is hereby\n   defined as the default\
    \ value in the context of a specific use, or the\n   JMS default for a particular\
    \ property if the context does not define\n   a default.\n"
- title: 4.1.1.  deliveryMode
  contents:
  - "4.1.1.  deliveryMode\n   Indicates whether the request message is persistent\
    \ or not.  This\n   property corresponds to the JMS message header field\n   \"\
    JMSDeliveryMode\" defined in Section 3.4.2 of the JMS 1.1\n   specification [JMS].\
    \  The value of this parameter MUST be\n   \"PERSISTENT\" or \"NON_PERSISTENT\"\
    .  If this parameter is not\n   specified, then the context default MUST be used.\n"
- title: 4.1.2.  timeToLive
  contents:
  - "4.1.2.  timeToLive\n   The lifetime, in milliseconds, of the request message,\
    \ specified as a\n   decimal number.  This property corresponds to the JMS Time-To-Live\n\
    \   value defined in Section 4.8 of the JMS 1.1 specification.  If this\n   parameter\
    \ is not specified, then the context default MUST be used.\n"
- title: 4.1.3.  priority
  contents:
  - "4.1.3.  priority\n   The JMS priority associated with the request message.  As\
    \ per\n   Section 3.4.10 of the JMS 1.1 specification, this MUST be a value\n\
    \   between 0 and 9 inclusive, specified as a decimal number.  This\n   corresponds\
    \ to the JMS message header field \"JMSPriority\".  If this\n   parameter is not\
    \ specified, then the context default MUST be used.\n"
- title: 4.1.4.  replyToName
  contents:
  - "4.1.4.  replyToName\n   This property corresponds to the JMS message header field\n\
    \   \"JMSReplyTo\" defined in Section 3.4.6 of the JMS 1.1 specification.\n  \
    \ As interpreted by the particular variant, this property value\n   specifies\
    \ the JMS Destination object to which a response message\n   ought to be sent.\n"
- title: 4.2.  "jndi" Variant
  contents:
  - "4.2.  \"jndi\" Variant\n   The \"jndi\" variant implies the use of JNDI for discovering\
    \ the\n   Destination object.  When this is specified as the variant, the\n  \
    \ <jms-dest> portion of the syntax is the name for JNDI lookup\n   purposes. \
    \ Additional JNDI-specific parameters can be specified.  The\n   JNDI-specific\
    \ parameters SHOULD only be processed when the URI\n   variant is \"jndi\".\n"
- title: 4.2.1.  JNDI Parameters
  contents:
  - '4.2.1.  JNDI Parameters

    '
- title: 4.2.1.1.  jndiConnectionFactoryName
  contents:
  - "4.2.1.1.  jndiConnectionFactoryName\n   Specifies the JNDI name of the Java class\
    \ (see Section 3.8,\n   \"Identifiers\", of [JLS] for the specification of a legal\
    \ Java class\n   name) providing the connection factory.\n"
- title: 4.2.1.2.  jndiInitialContextFactory
  contents:
  - "4.2.1.2.  jndiInitialContextFactory\n   Specifies the fully qualified Java class\
    \ name of the\n   \"InitialContextFactory\" implementation class to use.\n"
- title: 4.2.1.3.  jndiURL
  contents:
  - "4.2.1.3.  jndiURL\n   Specifies the JNDI provider URL, in a form consistent with\n\
    \   javax.naming.spi.NamingManager.getURLContext(String scheme, Hashtable\n  \
    \ environment) as defined in the JNDI specification [JNDI].\n"
- title: 4.2.1.4.  Additional JNDI Parameters
  contents:
  - "4.2.1.4.  Additional JNDI Parameters\n   It is possible that connecting to a\
    \ JNDI provider requires additional\n   parameters.  These parameters can be passed\
    \ in as custom parameters\n   (see Section 4.4).  To identify a custom parameter\
    \ as JNDI specific,\n   the parameter name needs to start with the prefix \"jndi-\"\
    .\n   For example, if the JNDI provider requires a parameter named\n   \"com.example.jndi.someParameter\"\
    , you can supply the parameter in the\n   URI as: jndi-com.example.jndi.someParameter=someValue\n"
- title: 4.2.2.  Example of Performing a JNDI Lookup
  contents:
  - "4.2.2.  Example of Performing a JNDI Lookup\n   To perform a lookup based on\
    \ a \"jndi\" variant URI using Java APIs, an\n   application might start by creating\
    \ a JNDI InitialContext object.\n   The InitialContext object can then be used\
    \ to look up the JMS\n   ConnectionFactory object (using the \"jndiConnectionFactoryName\"\
    \ URI\n   parameter), the target JMS Destination object (using the <jms-dest>\n\
    \   portion of the JMS URI), and the \"replyToName\" JMS Destination object\n\
    \   (if the \"replyToName\" parameter is specified on the URI).  The\n   application\
    \ creates the InitialContext object by first setting up two\n   properties: \"\
    Context.INITIAL_CONTEXT_FACTORY\", with the value of the\n   jndiInitialContextFactory\
    \ JMS URI parameter; and\n   \"Context.PROVIDER_URL\", with the value of the jndiURL\
    \ URI parameter;\n   and then passing the two properties to the InitialContext\n\
    \   constructor.\n   To locate a connection factory or Destination object, the\
    \ application\n   passes the name of the object into the InitialContext.lookup()\n\
    \   method.\n   For example, the JMS URI...\n     jms:jndi:REQ_QUEUE\n       ?jndiURL=file:/C:/JMSAdmin\n\
    \       &jndiInitialContextFactory\n       =com.sun.jndi.fscontext.RefFSContextFactory\n\
    \       &jndiConnectionFactoryName=CONNFACT\n       &replyToName=RESP_QUEUE\n\
    \   ...would be used by the following (non-normative) code sample to\n   locate\
    \ and retrieve a JMS ConnectionFactory called \"CONNFACT\", and\n   JMS Destinations\
    \ called \"REQ_QUEUE\" and \"RESP_QUEUE\", from a file-\n   system JNDI context\
    \ called \"c:/JMSAdmin\".\n     /*\n      * Preconditions on URI:\n      * - portion\
    \ <jms-dest> has been parsed into variable \"jms_dest\"\n      * - parameters\
    \ \"jndiConnectionFactoryName\",\n      *   \"jndiInitialContextFactory\", \"\
    replyToName\", and \"jndiURL\" have\n      *   been parsed into variables of the\
    \ same name.\n      */\n     Hashtable environment = new Hashtable();\n     environment.put(Context.INITIAL_CONTEXT_FACTORY,\n\
    \       jndiInitialContextFactory);\n     environment.put(Context.PROVIDER_URL,\
    \ jndiURL);\n     /*\n      *  Create File-System Initial Context\n      */\n\
    \     Context ctx = new InitialContext(environment);\n     /*\n      * Now get\
    \ the JMS ConnectionFactory and Destination.  These will\n      * be used later\
    \ on in the application to create the JMS\n      * Connection and send/receive\
    \ messages.\n      */\n     ConnectionFactory jmsConnFact = (ConnectionFactory)\n\
    \       ctx.lookup(jndiConnectionFactoryName);\n     Destination requestDest =\
    \ (Destination) ctx.lookup(jms_dest);\n     Destination replyDest = (Destination)\
    \ ctx.lookup(replyToName);\n   The ConnectionFactory is used to create a Connection,\
    \ which itself is\n   used to create a Session.  The Session can then be used\
    \ to create the\n   MessageProducer, which sends messages to the target Destination;\
    \ and\n   the MessageConsumer, which receives messages from the replyToName\n\
    \   Destination (as shown in the following code extract).\n     /*\n      * Create\
    \ a producer to send a message to the request Destination\n      * that was specified\
    \ in the URI, then create the message, setting\n      * the replyToName Destination\
    \ in the message to the one specified\n      * in the URI, and send it.\n    \
    \  */\n     MessageProducer producer = sess.createProducer(requestDest);\n   \
    \  BytesMessage reqMsg = sess.createBytesMessage();\n     reqMsg.setJMSReplyTo(replyDest);\n\
    \     producer.send(reqMsg);\n     /*\n      * Create a consumer to get a message\
    \ from the replyToName\n      * Destination using a selector to get the specific\
    \ response to\n      * this request.  The responder sets the correlation ID of\
    \ the\n      * response to the message ID of the request message.\n      */\n\
    \     MessageConsumer consumer = sess.createConsumer(replyDest,\n           \"\
    JMSCorrelationID = '\" + reqMsg.getJMSMessageID() + \"'\");\n     Message respMsg\
    \ = (Message) consumer.receive(300000);\n"
- title: 4.2.2.1.  Performing a JNDI Lookup with Custom Parameters
  contents:
  - "4.2.2.1.  Performing a JNDI Lookup with Custom Parameters\n   Any parameters\
    \ with a prefix of \"jndi-\" MUST be used to set custom\n   properties when establishing\
    \ a connection to the JNDI provider.  The\n   name of the custom property is derived\
    \ by removing the \"jndi-\" prefix\n   from the URI parameter name, and the value\
    \ of the property is the\n   value of the parameter.\n   For example, the JMS\
    \ URI...\n     jms:jndi:REQ_QUEUE\n       ?jndiURL=file:/C:/JMSAdmin\n       &jndiInitialContextFactory\n\
    \       =com.sun.jndi.fscontext.RefFSContextFactory\n       &jndiConnectionFactoryName=CONNFACT\n\
    \       &jndi-com.example.jndi.someParameter=someValue\n   ...instructs the consumer\
    \ to use the following properties to connect\n   to the JNDI provider:\n     java.naming.provider.url=file:/C:/JMSAdmin\n\
    \     java.naming.factory.initial=\n       com.sun.jndi.fscontext.RefFSContextFactory\n\
    \     com.example.jndi.someParameter=someValue\n"
- title: 4.3.  Vendor Destination Names -- Variants "queue" and "topic"
  contents:
  - "4.3.  Vendor Destination Names -- Variants \"queue\" and \"topic\"\n   The JMS\
    \ Session object provides a means to directly access Queues and\n   Topics.  Specifically,\
    \ it has the methods Session.createQueue(String\n   name) and Session.createTopic(String\
    \ name).  These methods can be\n   used to \"create\" the Java representation\
    \ of an existing JMS Topic or\n   Queue.\n   Since the Session interface requires\
    \ external knowledge about whether\n   a given name relates to a Queue or Topic,\
    \ rather than introducing one\n   new variant, this section defines two variants.\
    \  A JMS URI can\n   indicate which of these methods to use by specifying the\
    \ appropriate\n   variant -- either \"queue\" or \"topic\".  For example:\n  \
    \   jms:queue:ExampleQueueName\n   to identify a JMS Queue Destination, and\n\
    \     jms:topic:ExampleTopicName\n   to identify a JMS Topic Destination.\n  \
    \ JMS only specifies one way to obtain the names used by these APIs.\n   With\
    \ a JMS Queue or Topic available, an implementation can call\n   Queue.getQueueName()\
    \ or Topic.getTopicName(), respectively, both of\n   which return a String object.\
    \  To create a correct corresponding URI,\n   the resulting string MUST use standard\
    \ URI escape mechanisms so that\n   the resulting characters conform to the production\
    \ <jms-dest>.\n"
- title: 4.3.1.  Treatment of replyToName Parameter
  contents:
  - "4.3.1.  Treatment of replyToName Parameter\n   When used with the \"queue\" and\
    \ \"topic\" variants, the replyToName\n   parameter, specified in Section 4.1.4,\
    \ always refers to a name of a\n   JMS Queue to look up via the Session.createQueue()\
    \ method, or its\n   equivalent.  For either variant, if a JMS Topic is instead\
    \ required\n   as a response Destination, a JMS URI can employ the\n   \"topicReplyToName\"\
    \ parameter.  This parameter defines a name to look\n   up with the Session.createTopic()\
    \ method, or its equivalent.\n   A JMS URI MUST NOT specify both a \"topicReplyToName\"\
    \ and a\n   \"replyToName\" parameter.\n"
- title: 4.3.2.  Obtaining a Session via JNDI
  contents:
  - "4.3.2.  Obtaining a Session via JNDI\n   Using the Session.createQueue() and\
    \ Session.createTopic() methods\n   assumes that a client program has already\
    \ obtained a Session object.\n   Where does that Session object come from -- how\
    \ does a client get it?\n   One way to get a Session is simply to access vendor-specific\
    \ APIs.\n   Another way to get a Session object is to simply revert to using\n\
    \   JNDI.  That is, if a Session is not available to the client from some\n  \
    \ other context, the \"queue\" and \"topic\" variants MAY reuse the URL\n   parameters\
    \ specified in Section 4.2.1, \"JNDI Parameters\".  Via JNDI,\n   those parameters\
    \ will identify a ConnectionFactory, which can then be\n   used to obtain a Session\
    \ object.\n   Combining the \"queue\" and \"topic\" variants with JNDI lookup\
    \ for an\n   implementation of ConnectionFactory raises an important consideration\n\
    \   for JMS URI clients.  Once clients employ JNDI for one part of\n   discovering\
    \ a Destination, they almost certainly could use a vendor-\n   neutral JNDI lookup\
    \ for a Destination object itself, rather than\n   using vendor-specific means.\
    \  As a result, clients need to carefully\n   consider whether it makes sense\
    \ to use JNDI for one part of this\n   problem, without using it for the other.\n"
- title: 4.3.3.  Limitations of "queue" and "topic"
  contents:
  - "4.3.3.  Limitations of \"queue\" and \"topic\"\n   The JMS specification clearly\
    \ identifies the two methods on the\n   Session interface as returning vendor-specific\
    \ names for\n   Destinations.  Consequently, users of the \"jms\" URI scheme ought\
    \ to\n   carefully consider when these two variants might be employed.  If\n \
    \  users plan on switching between JMS vendors, they might also need to\n   plan\
    \ on regenerating resources that contain URIs in this vendor-\n   specific form.\n\
    \   A JMS vendor can provide alternate ways to obtain the names that can\n   be\
    \ passed to Session.createQueue() and Session.createTopic().  When\n   using names\
    \ derived from those alternate means, users of this URI\n   specification are\
    \ encouraged to verify that the obtained names work\n   as expected in all circumstances.\n"
- title: 4.4.  Custom Parameters
  contents:
  - "4.4.  Custom Parameters\n   The set of parameters is extensible.  Any other vendor-\
    \ or\n   application-defined parameter can be supplied, in the URI, by passing\n\
    \   it as <param-name>=<param-value>, just like the set of well-known\n   parameters.\n\
    \   WARNING: Vendors and applications MUST NOT include sensitive\n   information\
    \ (such as authorization tokens) in a URI.  Other means of\n   authorization,\
    \ authentication, and identification ought to be used.\n   Also see the security\
    \ discussion below about properties that might be\n   duplicated as JMS message\
    \ properties.\n"
- title: 5.  Encoding Considerations
  contents:
  - "5.  Encoding Considerations\n   The \"jms\" URI scheme distinguishes between\
    \ <unreserved> characters\n   and <pct-encoded> characters, as defined in [RFC3986].\
    \  Apart from\n   these encoding considerations, the characters \"?\" and \"&\"\
    \ MUST be\n   encoded when they appear within the <jms-dest> particle (for example,\n\
    \   a JNDI name) or in query parameters.  The character \":\" SHOULD be\n   escaped\
    \ when appearing in the <jms-dest> portion of the syntax.\n   Conversions to and\
    \ from Internationalized Resource Identifiers (IRIs)\n   follow the rules of RFC\
    \ 3987, Sections 3.1 and 3.2.  As per\n   Sections 1.2-c. and 6.4 of [RFC3987],\
    \ all parts of the JMS URI MUST\n   use the UTF-8 encoding when converting to\
    \ and from the IRI format.\n"
- title: 6.  Applications/Protocols That Use the JMS URI
  contents:
  - "6.  Applications/Protocols That Use the JMS URI\n   A variety of vendors provide\
    \ implementations of the JMS Service\n   Provider Interface (SPI).  These products\
    \ interoperate at the API\n   level, in the Java programming language.\n   Some\
    \ vendors have provided additional products that interoperate with\n   their own\
    \ SPI implementations.  These extensions might also be able\n   to make use of\
    \ this URI scheme.\n   The vendors working on this URI scheme are also working\
    \ on a\n   specification for carrying SOAP messages over their respective\n  \
    \ implementations of JMS [SOAP-JMS].  In addition, the Service\n   Component Architecture\
    \ Bindings technical committee (TC) [SCA-TC] at\n   OASIS employs the \"jms\"\
    \ URI scheme to identify JMS Destinations in\n   [SCA-JMS].\n"
- title: 7.  Interoperability Considerations
  contents:
  - "7.  Interoperability Considerations\n   This \"jms\" URI scheme focuses on identifying\
    \ a JMS Destination\n   object, and some characteristics of communication using\
    \ that\n   Destination, and specifically excludes any notion of describing how\n\
    \   JMS itself is implemented and how it delivers messages.  As a\n   consequence\
    \ of this focus, interoperability concerns are limited to\n   how implementations\
    \ obtain and use a Destination object.\n   This scheme definition describes three\
    \ variants for obtaining a\n   Destination.  These variants achieve their aims\
    \ with the use of JNDI\n   and JMS APIs, with no new APIs or protocols defined\
    \ here.  As a\n   consequence of using JNDI and JMS, interoperability concerns\
    \ might\n   arise if implementations do not conform to the specifications for\n\
    \   those APIs.  Further, the use of Java, and JNDI in particular, means\n   that\
    \ the configuration of the execution environment and the use of\n   Java ClassLoaders\
    \ can affect the interpretation of any given URI.\n   Consumers of these URIs\
    \ are urged to consider the scope and\n   consistency of the environment across\
    \ which these URIs will be\n   shared.\n   As described in Section 4, others can\
    \ define additional variants,\n   which provide the means to describe how to look\
    \ up JMS Destination\n   objects in a manner specific to some environment.  For\
    \ any new\n   variant, the shared parameters defined in Section 4.1 MUST have\
    \ the\n   same meaning in that variant as they do here.  That way, tools and\n\
    \   people can safely copy these parameters between environments.  Note\n   that\
    \ while additional variants might seem more flexible, employing\n   variants not\
    \ defined here might make it more difficult to switch to\n   an alternate JMS\
    \ provider.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Section 7 of [RFC3986] identifies some of the\
    \ security concerns that\n   ought to be addressed by this specification.\n"
- title: 8.1.  Reliability and Consistency
  contents:
  - "8.1.  Reliability and Consistency\n   This specification identifies only the\
    \ variant (<jms-variant>) and\n   variant-specific details (<jms-dest>) as an\
    \ essential part of the\n   URI.  For reliability and consistency purposes, these\
    \ variants are\n   the only part that can reasonably be expected to be stable.\
    \  Other\n   optional JMS configuration and message properties indicated as URI\n\
    \   parameters, like \"timeToLive\", can reasonably be determined by the\n   sender\
    \ of a message, without affecting the recipient.  Insofar as a\n   recipient might\
    \ wish to dictate certain parameters, such as the\n   \"jndiConnectionFactoryName\"\
    , those parameters can be specified.\n"
- title: 8.2.  Malicious Construction
  contents:
  - '8.2.  Malicious Construction

    '
- title: 8.2.1.  Recipient Concerns
  contents:
  - "8.2.1.  Recipient Concerns\n   A malicious consumer of a service using a JMS\
    \ URI could send, as part\n   of a JMS message, a URI with a parameter such as\
    \ \"timeToLive\" with a\n   value specified in the URI that differs from the corresponding\
    \ JMS\n   message property (\"JMSExpiration\" header field, in this example).\
    \  In\n   the case of such messages with such URIs, recipients are strongly\n\
    \   cautioned to avoid applying processing logic based on particular URI\n   parameters.\
    \  Discrepancies in the message could be used to exploit\n   differences in behavior\
    \ between the selectors that a JMS-based\n   application might use to affect which\
    \ messages it sees, and the\n   processing of the rest of the application.  As\
    \ defined in this\n   document, the parameters of concern include:\n      deliveryMode\n\
    \      timeToLive\n      priority\n   Message senders are strongly urged to remove\
    \ from the URI extra\n   parameters like the above in environments where the data\
    \ will be\n   redundant with information specified elsewhere in the JMS message.\n\
    \   Any use of additional parameters, either as a part of a definition of\n  \
    \ a new variant or for more general use, SHOULD also specify whether\n   those\
    \ parameters ought to be removed by a sender as specified here.\n   If a recipient\
    \ is aware of the \"jms\" URI scheme, and it receives a\n   message containing\
    \ a JMS URI, it MUST ignore or discard parameters\n   that it does not recognize.\n"
- title: 8.2.2.  Sender Concerns
  contents:
  - "8.2.2.  Sender Concerns\n   A third party could intercept and replace a URI containing\
    \ any of the\n   JMS/JNDI configuration parameters, such as\n   \"jndiConnectionFactoryName\"\
    , \"jndiInitialContextFactory\", or\n   \"jndiURL\".  As these parameters can\
    \ affect how an implementation\n   establishes an initial connection, such parameters\
    \ could be used as a\n   means to subvert communications.  This could possibly\
    \ result in\n   re-routing communications to third parties, who could then monitor\n\
    \   sent messages.  Clients SHOULD NOT use these URI parameters unless\n   assured\
    \ of their validity in trusted environments.\n"
- title: 8.3.  Back-End Transcoding
  contents:
  - "8.3.  Back-End Transcoding\n   This specification, in using the URI specification\
    \ and building\n   around the JMS specification, has no particular transcoding\
    \ issues.\n   Any such issues are problems with the underlying implementation\
    \ of\n   Java and the Java Messaging Service being employed.\n"
- title: 8.4.  Semantic Attacks
  contents:
  - "8.4.  Semantic Attacks\n   A possible semantic attack on the \"jndi\" variant\
    \ could be\n   accomplished by replacing characters of the JMS URI from one language\n\
    \   with equivalent-looking characters from another language, known as an\n  \
    \ \"Internationalized Domain Name (IDN) homograph attack\" [HOMOGRAPH].\n   This\
    \ kind of attack could occur in a variety of ways.  For example,\n   if an environment\
    \ allows for the automatic registration of JNDI\n   Destination names, a malicious\
    \ actor could register and then\n   publicize an alternate of an existing Destination\
    \ name.  Such an\n   environment ought to prevent the use of homograph equivalents,\n\
    \   perhaps by restricting allowed characters, so that clients do not\n   accidentally\
    \ send their requests to unintended Destinations.\n   The \"queue\" and \"topic\"\
    \ variants are subject to the same concerns as\n   the \"jndi\" variant.  In addition,\
    \ because the Destination names are\n   vendor defined, URIs employing these two\
    \ variants might employ\n   special characters that significantly change the meaning\
    \ of the URI.\n   It is possible that the introduction of a single character --\n\
    \   difficult for a human to notice -- might dramatically change the\n   intended\
    \ meaning of a URI.  In situations where this might be an\n   issue, users of\
    \ this URI are urged to strongly consider the \"jndi\"\n   variant instead.\n"
- title: 8.5.  Other Security Concerns
  contents:
  - "8.5.  Other Security Concerns\n   This specification does not define or anticipate\
    \ any use for IP\n   addresses as part of the URI, so no issues around IP addresses,\
    \ rare\n   or otherwise, are raised by this specification.\n   This specification\
    \ does not define any characteristics of a \"jms\"\n   scheme URI that contain\
    \ sensitive information.\n"
- title: 9.  IANA Considerations
  contents:
  - '9.  IANA Considerations

    '
- title: 9.1.  URI Scheme Registration
  contents:
  - "9.1.  URI Scheme Registration\n   IANA registered the Java Message Service URI\
    \ scheme described in this\n   document, according to the following scheme registration\
    \ request,\n   using the template from [RFC4395]:\n   o  URI scheme name: jms\n\
    \   o  Status: Provisional\n   o  URI scheme syntax: See Section 3\n   o  URI\
    \ scheme semantics: See Section 4\n   o  Encoding considerations: See Section\
    \ 5\n   o  Applications/protocols that use this URI scheme name: See\n      Section\
    \ 6\n   o  Interoperability considerations: See Section 7\n   o  Security considerations:\
    \ See Section 8\n   o  Contact: See the Authors' Addresses section\n   o  References:\
    \ See the References section\n"
- title: 9.2.  "jms" URI Scheme Registries
  contents:
  - "9.2.  \"jms\" URI Scheme Registries\n   Per this URI scheme, IANA has created\
    \ a registry for possible\n   \"variants\".  IANA can reject obviously bogus registrations.\n"
- title: 9.2.1.  JMS URI Variants
  contents:
  - "9.2.1.  JMS URI Variants\n   This registry provides a listing of \"jms\" URI\
    \ scheme variants.\n   Variant names beginning with \"vnd.\" are reserved for\
    \ vendor\n   extensions.  Such variants should follow a pattern of\n   vnd.<vendorname>.<label>.\
    \  The <vendorname> corresponds to the\n   iana-vendor-tag production from [RFC6075],\
    \ and vendor.<vendorname>\n   must already be registered in the Application Configuration\
    \ Access\n   Protocol (ACAP) Vendor Subtree.  The <label> is chosen by said\n\
    \   vendor.\n   All variant names are to be registered on a first come, first\
    \ served\n   basis.\n   Variants must conform to the \"jms-variant\" production\
    \ above.  Since\n   variants occur in URIs, they ought to be short, and MUST NOT\
    \ be more\n   than forty characters in length.\n   This document defines the \"\
    jndi\", \"queue\", and \"topic\" variants\n   initially included in the registry.\n"
- title: 9.2.2.  "jms" URI Scheme Variant Registration Template
  contents:
  - "9.2.2.  \"jms\" URI Scheme Variant Registration Template\n   This template describes\
    \ the fields that must be present to register a\n   new variant for use in a JMS\
    \ URI.\n   To: iana@iana.org\n   Subject: Registration of JMS URI variant name\n\
    \   JMS URI variant name:  Variants must conform to the \"jms-variant\"\n    \
    \  production above.  Since variants occur in URIs, they ought to be\n      short,\
    \ and MUST NOT be more than forty characters in length.\n   Description:  A description\
    \ of the purpose of the variant being\n      registered.\n   Contact Information:\
    \  Name(s) and email address(es) to contact for\n      more information about\
    \ this registration.\n   Description URL:  If available, a URL for a document\
    \ describing the\n      details of how the variant works.\n   Comments:  Any comments\
    \ the requester thinks are relevant to this\n      request.\n   Change Controller:\
    \  Contact information for the person who controls\n      further changes to this\
    \ variant definition.\n"
- title: 9.2.3.  Change Control
  contents:
  - "9.2.3.  Change Control\n   Once a JMS URI variant registration has been published\
    \ by IANA, the\n   change controller can request a change to its definition. \
    \ The change\n   request follows the same procedure as the registration request.\n\
    \   The change controller of a JMS URI variant can pass responsibility\n   for\
    \ the JMS URI variant to another person or agency by informing\n   IANA; this\
    \ can be done without discussion or review.\n   JMS URI variant registrations\
    \ MUST NOT be deleted; mechanisms that\n   are no longer believed appropriate\
    \ for use can be marked as obsolete\n   in the Comment field.\n   In exceptional\
    \ circumstances, the IESG can reassign responsibility\n   for a JMS URI variant.\n\
    \   The IESG is considered to be the owner of all JMS URI variants that\n   are\
    \ on the IETF Standards Track.\n"
- title: 10.  Contributors
  contents:
  - "10.  Contributors\n   The authors gratefully acknowledge the contributions of:\n\
    \      Phil Adams\n      International Business Machines Corporation\n      EMail:\
    \ phil_adams@us.ibm.com\n      Glen Daniels\n      WSO2\n      EMail: glen@wso2.com\n\
    \      Peter Easton\n      Progress Software\n      EMail: peaston@progress.com\n\
    \      Tim Frank\n      Software AG.\n      EMail: tim.frank@softwareag.com\n\
    \      Lei Jin\n      BEA Systems, Inc. until March 2007\n      Eric Johnson\n\
    \      TIBCO Software Inc.\n      EMail: eric@tibco.com\n      Vinod Kumar\n \
    \     BEA Systems, Inc. until May 2007\n      Amelia A. Lewis\n      TIBCO Software\
    \ Inc.\n      EMail: alewis@tibco.com\n      Roland Merrick\n      International\
    \ Business Machines Corporation until June 2009\n      Mark Phillips\n      International\
    \ Business Machines Corporation\n      EMail: m8philli@uk.ibm.com\n      Derek\
    \ Rokicki\n      Software AG.\n      EMail: derek.rokicki@softwareag.com\n   \
    \   Stephen Todd\n      International Business Machines Corporation until April\
    \ 2007\n      Dongbo Xiao\n      Oracle Corp.\n      EMail: dongbo.xiao@oracle.com\n\
    \      Prasad Yendluri\n      Software AG.\n      EMail: prasad.yendluri@softwareag.com\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   Oracle and Java are registered trademarks of Oracle\
    \ and/or its\n   affiliates.  Other names may be trademarks of their respective\n\
    \   owners.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [JLS]        Sun Microsystems, Inc., \"The Java\
    \ Language\n                Specification, Third Edition\", January 2005,\n  \
    \              <http://java.sun.com/docs/books/jls/third_edition/html/\n     \
    \           j3TOC.html>.\n   [JMS]        Hapner, M., Burridge, R., Sharma, R.,\
    \ Fialli, J., and K.\n                Stout, \"Java Message Service\", April 2002,\n\
    \                <http://java.sun.com/products/jms/>.\n   [JNDI]       Sun Microsystems,\
    \ Inc., \"Java Naming and Directory\n                Interface Application Programming\
    \ Interface\", July 1999,\n                <http://java.sun.com/products/jndi/docs.html>.\n\
    \   [RFC2119]    Bradner, S., \"Key words for use in RFCs to Indicate\n      \
    \          Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3629] \
    \   Yergeau, F., \"UTF-8, a transformation format of ISO\n                10646\"\
    , STD 63, RFC 3629, November 2003.\n   [RFC3986]    Berners-Lee, T., Fielding,\
    \ R., and L. Masinter, \"Uniform\n                Resource Identifier (URI): Generic\
    \ Syntax\", STD 66,\n                RFC 3986, January 2005.\n   [RFC3987]   \
    \ Duerst, M. and M. Suignard, \"Internationalized Resource\n                Identifiers\
    \ (IRIs)\", RFC 3987, January 2005.\n   [RFC4395]    Hansen, T., Hardie, T., and\
    \ L. Masinter, \"Guidelines and\n                Registration Procedures for New\
    \ URI Schemes\", BCP 35,\n                RFC 4395, February 2006.\n   [RFC5234]\
    \    Crocker, D., Ed., and P. Overell, \"Augmented BNF for\n                Syntax\
    \ Specifications: ABNF\", STD 68, RFC 5234,\n                January 2008.\n \
    \  [RFC6075]    Cridland, D., \"The Internet Assigned Number Authority\n     \
    \           (IANA) Application Configuration Access Protocol (ACAP)\n        \
    \        Vendor Subtrees Registry\", RFC 6075, December 2010.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [HOMOGRAPH]  \"IDN Homograph attack\", 2011,\
    \ <http://en.wikipedia.org/\n                w/index.php?title=IDN_homograph_attack&oldid=416746950>.\n\
    \   [JAVA]       Oracle Corporation, \"Oracle Technology for Java\n          \
    \      Developers\", 2011,\n                <http://www.oracle.com/technetwork/java/index.html>.\n\
    \   [SCA-JMS]    Holdsworth, S. and A. Karmarkar, \"Service Component\n      \
    \          Architecture JMS Binding Specification Version 1.1\",\n           \
    \     November 2010, <http://docs.oasis-open.org/opencsa/\n                sca-bindings/sca-jmsbinding-1.1-spec.html>.\n\
    \   [SCA-TC]     \"OASIS Service Component Architecture / Bindings (SCA-\n   \
    \             Bindings) TC\", <http://www.oasis-open.org/committees/\n       \
    \         tc_home.php?wg_abbrev=sca-bindings>.\n   [SOAP-JMS]   Adams, P., Easton,\
    \ P., Johnson, E., Merrick, R., and M.\n                Phillips, \"SOAP over\
    \ Java Message Service 1.0\",\n                October 2010,\n               \
    \ <http://www.w3.org/TR/2010/WD-soapjms-20101026/>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mark Phillips\n   International Business Machines Corporation\n\
    \   Hursley House, Hursley Park\n   Winchester, Hampshire  SO21 2JN\n   United\
    \ Kingdom\n   EMail: m8philli@uk.ibm.com\n   Phil Adams\n   International Business\
    \ Machines Corporation\n   11501 Burnet Rd.\n   Austin, TX  78758\n   United States\n\
    \   EMail: phil_adams@us.ibm.com\n   Derek Rokicki\n   Software AG.\n   11700\
    \ Plaza America Drive\n   Reston, VA  20190\n   United States\n   EMail: derek.rokicki@softwareag.com\n\
    \   Eric Johnson\n   TIBCO Software Inc.\n   3303 Hillview Avenue\n   Palo Alto,\
    \ CA  94304\n   United States\n   EMail: eric@tibco.com\n"
