- contents:
  - '              MIME Security with Pretty Good Privacy (PGP)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   This document describes how Pretty Good Privacy (PGP) can be used
    to\n   provide privacy and authentication using the Multipurpose Internet\n   Mail
    Extensions (MIME) security content types described in RFC1847.\n"
  title: Abstract
- contents:
  - "1.  Introduction\n   Previous work on integrating PGP with MIME (including the
    since\n   withdrawn application/pgp content type) has suffered from a number of\n
    \  problems, the most significant of which is the inability to recover\n   signed
    message bodies without parsing data structures specific to\n   PGP.  This work
    makes use of the elegant solution proposed in\n   RFC1847, which defines security
    multipart formats for MIME. The\n   security multiparts clearly separate the signed
    message body from the\n   signature, and have a number of other desirable properties.
    This\n   document is styled after RFC 1848, which defines MIME Object Security\n
    \  Services (MOSS) for providing security and authentication.\n   This document
    defines three new content types for implementing\n   security and privacy with
    PGP: application/pgp-encrypted,\n   application/pgp-signature and application/pgp-keys.\n"
  - contents:
    - "1.1  Compliance\n   In order for an implementation to be compliant with this\n
      \  specification, is it absolutely necessary for it to obey all items\n   labeled
      as MUST or REQUIRED.\n"
    title: 1.1  Compliance
  title: 1.  Introduction
- contents:
  - "2.  PGP data formats\n   PGP can generate either ASCII armor (described in [3])
    or 8-bit\n   binary output when encrypting data, generating a digital signature,\n
    \  or extracting public key data.  The ASCII armor output is the\n   REQUIRED
    method for data transfer.  This allows those users who do\n   not have the means
    to interpret the formats described in this\n   document to be able extract and
    use the PGP information in the\n   message.\n   When the amount of data to be
    transmitted requires that it be sent in\n   many parts, the MIME message/partial
    mechanism should be used rather\n   than the multipart ASCII armor PGP format.\n"
  title: 2.  PGP data formats
- contents:
  - "3.  Content-Transfer-Encoding restrictions\n   Multipart/signed and multipart/encrypted
    are to be treated by agents\n   as opaque, meaning that the data is not to be
    altered in any way [1].\n   However, many existing mail gateways will detect if
    the next hop does\n   not support MIME or 8-bit data and perform conversion to
    either\n   Quoted-Printable or Base64.  This presents serious problems for\n   multipart/signed,
    in particular, where the signature is invalidated\n   when such an operation occurs.
    \ For this reason all data signed\n   according to this protocol MUST be constrained
    to 7 bits (8- bit data\n   should be encoded using either Quoted-Printable or
    Base64).  Note\n   that this also includes the case where a signed object is also\n
    \  encrypted (see section 6).  This restriction will increase the\n   likelihood
    that the signature will be valid upon receipt.\n   Data that is ONLY to be encrypted
    is allowed to contain 8-bit\n   characters and therefore need not be converted
    to a 7-bit format.\n     Implementor's note: It cannot be stressed enough that
    applications\n     using this standard should follow MIME's suggestion that you
    \"be\n     conservative in what you generate, and liberal in what you accept.\"\n
    \    In this particular case it means it would be wise for an\n     implementation
    to accept messages with any content-transfer-\n     encoding, but restrict generation
    to the 7-bit format required by\n     this memo.  This will allow future compatibility
    in the event the\n     Internet SMTP framework becomes 8-bit friendly.\n"
  title: 3.  Content-Transfer-Encoding restrictions
- contents:
  - "4.  PGP encrypted data\n   Before encryption with PGP, the data should be written
    in MIME\n   canonical format (body and headers).\n   PGP encrypted data is denoted
    by the \"multipart/encrypted\" content\n   type, described in [1], and MUST have
    a \"protocol\" parameter value of\n   \"application/pgp-encrypted\".  Note that
    the value of the parameter\n   MUST be enclosed in quotes.\n   The multipart/encrypted
    MUST consist of exactly two parts.  The first\n   MIME body part must have a content
    type of \"application/pgp-\n   encrypted\".  This body contains the control information.
    \ A message\n   complying with this standard MUST contain a \"Version: 1\" field
    in\n   this body.  Since the PGP packet format contains all other\n   information
    necessary for decrypting, no other information is\n   required here.\n   The second
    MIME body part MUST contain the actual encrypted data.  It\n   must be labeled
    with a content type of \"application/octet- stream\".\n   Example message:\n     From:
    Michael Elkins <elkins@aero.org>\n     To: Michael Elkins <elkins@aero.org>\n
    \    Mime-Version: 1.0\n     Content-Type: multipart/encrypted; boundary=foo;\n
    \       protocol=\"application/pgp-encrypted\"\n     --foo\n     Content-Type:
    application/pgp-encrypted\n     Version: 1\n     --foo\n     Content-Type: application/octet-stream\n
    \    -----BEGIN PGP MESSAGE-----\n     Version: 2.6.2\n     hIwDY32hYGCE8MkBA/wOu7d45aUxF4Q0RKJprD3v5Z9K1YcRJ2fve87lMlDlx4Oj\n
    \    eW4GDdBfLbJE7VUpp13N19GL8e/AqbyyjHH4aS0YoTk10QQ9nnRvjY8nZL3MPXSZ\n     g9VGQxFeGqzykzmykU6A26MSMexR4ApeeON6xzZWfo+0yOqAq6lb46wsvldZ96YA\n
    \    AABH78hyX7YX4uT1tNCWEIIBoqqvCeIMpp7UQ2IzBrXg6GtukS8NxbukLeamqVW3\n     1yt21DYOjuLzcMNe/JNsD9vDVCvOOG3OCi8=\n
    \    =zzaA\n     -----END PGP MESSAGE-----\n     --foo--\n"
  title: 4.  PGP encrypted data
- contents:
  - "5.  PGP signed data\n   PGP signed messages are denoted by the \"multipart/signed\"
    content\n   type, described in [1], with a \"protocol\" parameter which MUST have
    a\n   value of \"application/pgp-signature\" (MUST be quoted).  The \"micalg\"\n
    \  parameter MUST have a value of \"pgp-<hash-symbol>\", where <hash-\n   symbol>
    identifies the message integrity check (MIC) used to generate\n   the signature.
    \ The currently defined values for <hash-symbol> are\n   \"md5\" for the MD5 checksum,
    and \"sha1\" for the SHA.1 algorithm.\n   The multipart/signed body MUST consist
    of exactly two parts.  The\n   first part contains the signed data in MIME canonical
    format,\n   including a set of appropriate content headers describing the data.\n
    \  The second body MUST contain the PGP digital signature.  It MUST be\n   labeled
    with a content type of \"application/pgp-signature\".\n   When the PGP digital
    signature is generated:\n   (1)  The data to be signed must first be converted
    to its\n        type/subtype specific canonical form.  For text/plain, this\n
    \       means conversion to an appropriate character set and conversion\n        of
    line endings to the canonical <CR><LF> sequence.\n   (2)  An appropriate Content-Transfer-Encoding
    is then applied. Each\n        line of the encoded data MUST end with the canonical
    <CR><LF>\n        sequence.\n   (3)  MIME content headers are then added to the
    body, each ending\n        with the canonical <CR><LF> sequence.\n   (4)  As described
    in [1], the digital signature MUST be calculated\n        over both the data to
    be signed and its set of content headers.\n   (5)  The signature MUST be generated
    detached from the signed data\n        so that the process does not alter the
    signed data in any way.\n   Example message:\n     From: Michael Elkins <elkins@aero.org>\n
    \    To: Michael Elkins <elkins@aero.org>\n     Mime-Version: 1.0\n     Content-Type:
    multipart/signed; boundary=bar; micalg=pgp-md5;\n     protocol=\"application/pgp-signature\"\n
    \    --bar\n     & Content-Type: text/plain; charset=iso-8859-1\n     & Content-Transfer-Encoding:
    quoted-printable\n     &\n     & =A1Hola!\n     &\n     & Did you know that talking
    to yourself is a sign of senility?\n     &\n     & It's generally a good idea
    to encode lines that begin with\n     & From=20because some mail transport agents
    will insert a greater-\n     & than (>) sign, thus invalidating the signature.\n
    \    &\n     & Also, in some cases it might be desirable to encode any   =20\n
    \    &railing whitespace that occurs on lines in order to ensure  =20\n     &
    that the message signature is not invalidated when passing =20\n     & a gateway
    that modifies such whitespace (like BITNET). =20\n     &\n     & me\n     --bar\n
    \    Content-Type: application/pgp-signature\n    -----BEGIN PGP MESSAGE-----\n
    \  Version: 2.6.2\n   iQCVAwUBMJrRF2N9oWBghPDJAQE9UQQAtl7LuRVndBjrk4EqYBIb3h5QXIX/LC//\n
    \  jJV5bNvkZIGPIcEmI5iFd9boEgvpirHtIREEqLQRkYNoBActFBZmh9GC3C041WGq\n   uMbrbxc+nIs1TIKlA08rVi9ig/2Yh7LFrK5Ein57U/W72vgSxLhe/zhdfolT9Brn\n
    \  HOxEa44b+EI=\n   =ndaj\n   -----END PGP MESSAGE-----\n   --bar--\n   The \"&\"s
    in the previous example indicate the portion of the data\n   over which the signature
    was calculated.\n   Though not required, it is generally a good idea to use Quoted-\n
    \  Printable encoding in the first step (writing out the data to be\n   signed
    in MIME canonical format) if any of the lines in the data\n   begin with \"From
    \", and encode the \"F\".  This will avoid an MTA\n   inserting a \">\" in front
    of the line, thus invalidating the\n   signature!\n   Upon receipt of a signed
    message, an application MUST:\n   (1)  Convert line endings to the canonical <CR><LF>
    sequence before\n        the signature can be verified.  This is necessary since
    the\n        local MTA may have converted to a local end of line convention.\n
    \  (2)  Pass both the signed data and its associated content headers\n        along
    with the PGP signature to the signature verification\n        service.\n"
  title: 5.  PGP signed data
- contents:
  - "6.  Encrypted and Signed Data\n   Sometimes it is desirable to both digitally
    sign and then encrypt a\n   message to be sent.  This protocol allows for two
    methods of\n   accomplishing this task.\n"
  - contents:
    - "6.1  RFC1847 Encapsulation\n   [1], it is stated that the data should first
      be signed as a\n   multipart/signature body, and then encrypted to form the
      final\n   multipart/encrypted body, i.e.,\n    Content-Type: multipart/encrypted;\n
      \      protocol=\"application/pgp-encrypted\"; boundary=foo\n    --foo\n    Content-Type:
      application/pgp-encrypted\n    Version: 1\n    --foo\n    Content-Type: application/octet-stream\n
      \   -----BEGIN PGP MESSAGE-----\n    & Content-Type: multipart/signed; micalg=pgp-md5\n
      \   &     protocol=\"application/pgp-signature\"; boundary=bar\n    &\n    &
      --bar\n    & Content-Type: text/plain; charset=us-ascii\n    &\n    & This message
      was first signed, and then encrypted.\n    &\n    & --bar\n    & Content-Type:
      application/pgp-signature\n    &\n    & -----BEGIN PGP MESSAGE-----\n    & Version:
      2.6.2\n    &\n    & iQCVAwUBMJrRF2N9oWBghPDJAQE9UQQAtl7LuRVndBjrk4EqYBIb3h5QXIX/LC//\n
      \   & jJV5bNvkZIGPIcEmI5iFd9boEgvpirHtIREEqLQRkYNoBActFBZmh9GC3C041WGq\n    &
      uMbrbxc+nIs1TIKlA08rVi9ig/2Yh7LFrK5Ein57U/W72vgSxLhe/zhdfolT9Brn\n    & HOxEa44b+EI=\n
      \   & =ndaj\n    & -----END PGP MESSAGE-----\n    &\n    & --bar--\n    -----END
      PGP MESSAGE-----\n    --foo--\n    (The text preceded by '&' indicates that
      it is really\n    encrypted, but presented as text for clarity.)\n"
    title: 6.1  RFC1847 Encapsulation
  - contents:
    - "6.2  Combined method\n   Versions 2.x of PGP also allow data to be signed and
      encrypted in one\n   operation.  This method is an acceptable shortcut, and
      has the\n   benefit of less overhead.  The resulting data should be formed as
      a\n   \"multipart/encrypted\" object as described above.\n   Messages which
      are encrypted and signed in this combined fashion are\n   REQUIRED to follow
      the same canonicalization rules as for\n   multipart/signed objects.\n   It
      is explicitly allowed for an agent to decrypt a combined message\n   and rewrite
      it as a multipart/signed object using the signature data\n   embedded in the
      encrypted version.\n"
    title: 6.2  Combined method
  title: 6.  Encrypted and Signed Data
- contents:
  - "7.  Distribution of PGP public keys\n   Content-Type: application/pgp-keys\n
    \  Required parameters: none\n   Optional parameters: none\n   This is the content
    type which should be used for relaying public key\n   blocks.\n"
  title: 7.  Distribution of PGP public keys
- contents:
  - "8.  Notes\n   PGP and Pretty Good Privacy are trademarks of Philip Zimmermann.\n"
  title: 8.  Notes
- contents:
  - "9.  Security Considerations\n   Use of this protocol has the same security considerations
    as PGP, and\n   is not known to either increase or decrease the security of messages\n
    \  using it; see [3] for more information.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  Author's Address\n        Michael Elkins\n        P.O. Box 92957 - M1/102\n
    \       Los Angeles, CA 90009-2957\n        Phone: +1 310 336 8040\n        Fax:
    +1 310 336 4402\n"
  title: 10.  Author's Address
- contents:
  - "References\n   [1]  Galvin, J., Murphy, G., Crocker, S., and N. Freed, \"Security\n
    \       Multiparts for MIME: Multipart/Signed and Multipart/Encrypted\",\n        RFC
    1847, October 1995.\n   [2]  Galvin, J., Murphy, G., Crocker, S., and N. Freed,
    \"MIME Object\n        Security Services\", RFC 1848, October 1995.\n   [3]  Atkins,
    D., Stallings, W., and P. Zimmermann, \"PGP Message\n        Exchange Formats\",
    RFC 1991, August 1996.\n"
  title: References
