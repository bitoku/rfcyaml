- title: __initial_text__
  contents:
  - '        Adding Support for Salted Password Databases to EAP-pwd

    '
- title: Abstract
  contents:
  - "Abstract\n   EAP-pwd is an Extensible Authentication Protocol (EAP) method that\n\
    \   utilizes a shared password for authentication using a technique that\n   is\
    \ resistant to dictionary attacks.  It includes support for raw keys\n   and double\
    \ hashing of a password in the style of Microsoft Challenge\n   Handshake Authentication\
    \ Protocol version 2 (MSCHAPv2), but it does\n   not include support for salted\
    \ passwords.  There are many existing\n   databases of salted passwords, and it\
    \ is desirable to allow their use\n   with EAP-pwd.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc8146.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Background .................................................3\n  \
    \    1.2. Keyword Definition .........................................3\n   2.\
    \ Salted Passwords in EAP-pwd .....................................3\n      2.1.\
    \ Password Preprocessing .....................................3\n      2.2. The\
    \ Salting of a Password ..................................5\n      2.3. Using\
    \ UNIX crypt ...........................................5\n      2.4. Using scrypt\
    \ ...............................................6\n      2.5. Using PBKDF2 ...............................................6\n\
    \      2.6. Protocol Modifications .....................................7\n  \
    \    2.7. Payload Modifications ......................................8\n   3.\
    \ IANA Considerations .............................................8\n   4. Security\
    \ Considerations .........................................9\n   5. References\
    \ ......................................................9\n      5.1. Normative\
    \ References .......................................9\n      5.2. Informative\
    \ References ....................................10\n   Acknowledgements ..................................................11\n\
    \   Author's Address ..................................................11\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Background
  contents:
  - "1.1.  Background\n   Databases of stored passwords present an attractive target\
    \ for attack\n   -- get access to the database, learn the passwords.  To confound\
    \ such\n   attacks, a random \"salt\" was hashed with the password and the\n \
    \  resulting digest stored, along with the salt, instead of the raw\n   password.\
    \  This has the effect of randomizing the password; even if\n   two, distinct\
    \ users have chosen the same password, the stored, and\n   salted, password will\
    \ be different.  It also requires an adversary\n   who has compromised the security\
    \ of the stored database to launch a\n   dictionary attack per entry to recover\
    \ passwords.\n   Dictionary attacks, especially using custom hardware, represent\
    \ real-\n   world attacks and merely salting a password is insufficient to\n \
    \  protect a password database.  To address these attacks, a sequential\n   memory\
    \ hard function, such as described in [RFC7914], is used.\n   While salting a\
    \ password database is not sufficient to deal with many\n   real-world attacks,\
    \ the historic popularity of password salting means\n   there are a large number\
    \ of such databases deployed, and EAP-pwd\n   needs to be able to support them.\
    \  In addition, EAP-pwd needs to be\n   able to support databases using more modern\
    \ sequential memory hard\n   functions for protection.\n   EAP-pwd imposes an\
    \ additional security requirement on a database of\n   salted passwords that otherwise\
    \ would not exist, see Section 4.\n"
- title: 1.2.  Keyword Definition
  contents:
  - "1.2.  Keyword Definition\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Salted Passwords in EAP-pwd
  contents:
  - '2.  Salted Passwords in EAP-pwd

    '
- title: 2.1.  Password Preprocessing
  contents:
  - "2.1.  Password Preprocessing\n   EAP-pwd is based on the \"dragonfly\" Password-Authenticated\
    \ Key\n   Exchange (PAKE) -- see [RFC7664].  This is a balanced PAKE and\n   requires\
    \ that each party to the protocol obtain an identical\n   representation of a\
    \ processed password (see Section 4).  Therefore,\n   salting of a password is\
    \ treated as an additional password\n   preprocessing technique of EAP-pwd.  The\
    \ salt and digest to use are\n   conveyed to the peer by the server, and the password\
    \ is processed\n   prior to fixing the password element (see Section 2.8.3 of\n\
    \   [RFC5931]).\n   This memo defines eight (8) new password preprocessing techniques\
    \ for\n   EAP-pwd:\n   o  0x03: a random salt with SHA-1\n   o  0x04: a random\
    \ salt with SHA-256\n   o  0x05: a random salt with SHA-512\n   o  0x06: UNIX\
    \ crypt()\n   o  0x07: scrypt\n   o  0x08: PBKDF2 with SHA-256\n   o  0x09: PBKDF2\
    \ with SHA-512\n   o  0x0A: SASLprep then a random salt with SHA-1\n   o  0x0B:\
    \ SASLprep then a random salt with SHA-256\n   o  0x0C: SASLprep then a random\
    \ salt with SHA-512\n   o  0x0D: SASLprep then UNIX crypt()\n   o  0x0E: OpaqueString\
    \ then scrypt\n   o  0x0F: OpaqueString then PBKDF2 with SHA-256\n   o  0x10:\
    \ OpaqueString then PBKDF2 with SHA-512\n   When passing salt, the size of the\
    \ salt SHOULD be at least as long as\n   the message digest of the hash algorithm\
    \ used.  There is no guarantee\n   that deployed salted databases have followed\
    \ this rule, and in the\n   interest of interoperability, an EAP peer SHOULD NOT\
    \ abort an EAP-pwd\n   exchange if the length of the salt conveyed during the\
    \ exchange is\n   less than the message digest of the indicated hash algorithm.\n\
    \   UNIX crypt() ([CRY]), scrypt ([RFC7914]), and PBKDF2 ([RFC8018])\n   impose\
    \ additional formatting requirements on the passed salt.  See\n   below.\n   Plain\
    \ salting techniques using [SHS] are included for support of\n   existing databases.\
    \ scrypt and PBKDF2 techniques are RECOMMENDED for\n   new password database deployments.\n\
    \   SASLprep has been deprecated, but databases treated with SASLprep\n   exist;\
    \ it is necessary to provide code points for them.  When using\n   SASLprep, a\
    \ password SHALL be considered a \"stored string\" per\n   [RFC3454]; therefore,\
    \ unassigned code points are prohibited.  The\n   output of SASLprep SHALL be\
    \ the binary representation of the\n   processed UTF-8 character string.  Prohibited\
    \ output and unassigned\n   code points encountered in SASLprep preprocessing\
    \ SHALL cause a\n   failure of preprocessing, and the output SHALL NOT be used\
    \ with EAP-\n   pwd.\n   When performing one of the preprocessing techniques (0x0E-0x10),\
    \ the\n   password SHALL be a UTF-8 string and SHALL be preprocessed by\n   applying\
    \ the Preparation and Enforcement steps of the OpaqueString\n   profile in [RFC7613]\
    \ to the password.  The output of OpaqueString,\n   also a UTF-8 string, becomes\
    \ the EAP-pwd password and SHALL be hashed\n   with the indicated algorithm.\n\
    \   There is a large number of deployed password databases that use\n   salting\
    \ and hashing in the style of [RFC7616], but these deployments\n   require a nonce\
    \ contribution by the client (as well as the server),\n   and EAP-pwd does not\
    \ have the capability to provide that information.\n"
- title: 2.2.  The Salting of a Password
  contents:
  - "2.2.  The Salting of a Password\n   For both parties to derive the same salted\
    \ password, there needs to\n   be a canonical method of salting a password.  When\
    \ using EAP-pwd, a\n   password SHALL be salted by hashing the password followed\
    \ by the salt\n   using the designated hash function:\n      salted-password =\
    \ Hash(password | salt)\n   The server stores the salted-password, and the salt,\
    \ in its database\n   and the client derives the salted password on the fly.\n"
- title: 2.3.  Using UNIX crypt
  contents:
  - "2.3.  Using UNIX crypt\n   Different algorithms are supported with the UNIX crypt()\
    \ function.\n   The particular algorithm used is indicated by prepending an encoding\n\
    \   of \"setting\" to the passed salt.  The specific algorithm used is\n   opaque\
    \ to EAP-pwd as the entire salt, including the encoded\n   \"setting\", is passed\
    \ as an opaque string for interpretation by\n   crypt().  The salted password\
    \ used for EAP-pwd SHALL be the output of\n   crypt():\n      salted-password\
    \ = crypt(password, salt)\n   The server stores the salted-password, and the encoded\
    \ algorithm plus\n   salt, in its database and the client derives the salted-password\
    \ on-\n   the-fly.\n   If the server indicates a crypt() algorithm that is unsupported\
    \ by\n   the client, the exchange fails and the client MUST terminate the\n  \
    \ connection.\n"
- title: 2.4.  Using scrypt
  contents:
  - "2.4.  Using scrypt\n   The scrypt function takes several parameters:\n   o  N,\
    \ the cost parameter\n   o  r, the block size\n   o  p, the parallelization parameter\n\
    \   o  dkLen, the length of the output\n   These parameters are encoded into the\
    \ \"salt\" field of the modified\n   EAP-pwd message.  Parameters r and dkLen\
    \ SHALL be 16-bit integers in\n   network order.  The other parameters SHALL each\
    \ be 32-bit integers in\n   network order.  The \"salt\" field that gets transmitted\
    \ in EAP-pwd\n   SHALL therefore be:\n      N || r || p || dkLen || salt\n   where\
    \ || represents concatenation.\n   The value of N represents the exponent taken\
    \ to the power of two in\n   order to determine the CPU/Memory cost of scrypt\
    \ -- i.e., the value\n   is 2^N.  Per [RFC7914], the resulting CPU/Memory cost\
    \ value SHALL be\n   less than 2^(128 * r / 8), and the value p SHALL be less\
    \ than or\n   equal to ((2^32 - 1) * 32) / (128 * r).\n   Note: EAP-pwd uses the\
    \ salted password directly as the authentication\n   credential and will hash\
    \ it with a counter in order to obtain a\n   secret element in a finite field.\
    \  Therefore, it makes little sense\n   to use dkLen greater than the length of\
    \ the digest produced by the\n   underlying hash function, but the capability\
    \ is provided to do so\n   anyway.\n"
- title: 2.5.  Using PBKDF2
  contents:
  - "2.5.  Using PBKDF2\n   The PBKDF2 function requires two parameters:\n   o  c,\
    \ the iteration count\n   o  dkLen, the length of the output\n   These parameters\
    \ are encoded into the \"salt\" field of the modified\n   EAP-pwd message.  The\
    \ parameters SHALL be 16-bit integers in network\n   order.  The \"salt\" field\
    \ that gets transmitted in EAP-pwd SHALL\n   therefore be:\n      c || dkLen ||\
    \ salt\n   where || represents concatenation.\n   Note: EAP-pwd uses the salted\
    \ password directly as the authentication\n   credential and will hash it with\
    \ a counter in order to obtain a\n   secret element in a finite field.  Therefore,\
    \ it makes little sense\n   to use a dkLen greater than the length of the digest\
    \ produced by the\n   underlying hash function, but the capability is provided\
    \ to do so\n   anyway.\n"
- title: 2.6.  Protocol Modifications
  contents:
  - "2.6.  Protocol Modifications\n   Like all EAP methods, EAP-pwd is server initiated,\
    \ and the initial\n   identity supplied by the client is not useful for authentication\n\
    \   purposes.  Because of this, the server is required to indicate its\n   intentions,\
    \ including the password preprocessing it wishes to use,\n   before it knows the\
    \ true identity of the client.  This prevents the\n   server from supporting multiple\
    \ salt digests simultaneously in a\n   single password database.  To support multiple\
    \ salt digests\n   simultaneously, it is necessary to maintain multiple password\n\
    \   databases and use the routable portion of the client identity to\n   select\
    \ one when initiating EAP-pwd.\n   The server uses the EAP-pwd-ID/Request to indicate\
    \ the password\n   preprocessing technique.  The client indicates its acceptance\
    \ of the\n   password preprocessing technique and identifies itself in the EAP-\n\
    \   pwd-ID/Response.  If the client does not accept any of the offered\n   preprocessing\
    \ techniques, it SHALL terminate the exchange.  Upon\n   receipt of the EAP-pwd-ID/Response,\
    \ the server knows the identity of\n   the client and can look up the client's\
    \ salted password and the salt\n   from the database.  The server adds the length\
    \ of the salt and the\n   salt itself to the EAP-pwd-Commit/Request message (see\
    \ Section 2.7).\n   The server can fix the password element (Section 2.8.3 of\
    \ [RFC5931])\n   as soon as the salted password has been looked up in the database.\n\
    \   The client, though, is required to wait until receipt of the server's\n  \
    \ EAP-pwd-Commit/Request before it begins fixing the password element.\n"
- title: 2.7.  Payload Modifications
  contents:
  - "2.7.  Payload Modifications\n   When a salted password preprocessing technique\
    \ is agreed upon during\n   the EAP-pwd-ID exchange, the EAP-pwd-Commit payload\
    \ is modified to\n   include the salt and salt length (see Figure 1).  The server\
    \ passes\n   the salt and salt length in the EAP-pwd-Commit/Request; the client's\n\
    \   EAP-pwd-Commit/Response is unchanged, and it MUST NOT echo the salt\n   length\
    \ and salt in its EAP-pwd-Commit/Response.\n       0                   1     \
    \              2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Salt-len    |                                               |\n   \
    \   +-+-+-+-+-+-+-+-+                                               ~\n      ~\
    \                            Salt             +-+-+-+-+-+-+-+-+-+\n      |   \
    \                                          |                 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                 ~\n      |                                                 \
    \              |\n      ~                           Element                  \
    \           ~\n      |                                                       \
    \        |\n      ~                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                               |                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               ~\n      |\
    \                                                               |\n      ~   \
    \                         Scalar             +-+-+-+-+-+-+-+-+\n      |      \
    \                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 1: Salted EAP-pwd-Commit/Request\n   The \"salt-len\"\
    \ SHALL be non-zero, and it indicates the length, in\n   octets, of the salt that\
    \ follows.  The \"Salt\" SHALL be a binary\n   string.  The \"Element\" and \"\
    Scalar\" are encoded according to\n   Section 3.3 of [RFC5931].\n   Note: when\
    \ a non-salted password preprocessing method is used, for\n   example, any of\
    \ the methods from [RFC5931], the EAP-pwd-Commit\n   payload MUST NOT be modified\
    \ to include the salt and salt length.\n"
- title: 3.  IANA Considerations
  contents:
  - "3.  IANA Considerations\n   IANA has allocated fourteen (14) values from the\
    \ \"password\n   preprocessing method registry\" established by [RFC5931].\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   EAP-pwd requires each side to produce an identical\
    \ representation of\n   the (processed) password before the password element can\
    \ be fixed.\n   This symmetry undercuts one of the benefits to salting a password\n\
    \   database because the salted password from a compromised database can\n   be\
    \ used directly to impersonate the EAP-pwd client -- since the\n   plaintext password\
    \ need not be recovered, no dictionary attack is\n   needed.  While the immediate\
    \ effect of such a compromise would be\n   compromise of the server, the per-user\
    \ salt would still prevent the\n   adversary from recovering the password, barring\
    \ a successful\n   dictionary attack, to use for other purposes.\n   Salted password\
    \ databases used with EAP-pwd MUST be afforded the same\n   level of protection\
    \ as databases of plaintext passwords.\n   Hashing a password with a salt increases\
    \ the work factor for an\n   attacker to obtain the cleartext password, but dedicated\
    \ hardware\n   makes this increased work factor increasingly negligible in real-\n\
    \   world scenarios.  Cleartext password databases SHOULD be protected\n   with\
    \ a scheme that uses a sequential memory hard function such as\n   [RFC7914].\n\
    \   EAP-pwd sends the salt in the clear.  If EAP-pwd is not tunneled in\n   another,\
    \ encrypting, EAP method, an adversary that can observe\n   traffic from server\
    \ to authenticator or from authenticator to client\n   would learn the salt used\
    \ for a particular user.  While knowledge of\n   a salt by an adversary may be\
    \ of a somewhat dubious nature (pre-image\n   resistance of the hash function\
    \ used will protect the client's\n   password and, as noted above, the database\
    \ of salted passwords must\n   still be protected from disclosure), it does represent\
    \ potential\n   additional meta-data in the hands of a untrusted third party.\n"
- title: 5.  References
  contents:
  - '5.  References

    '
- title: 5.1.  Normative References
  contents:
  - "5.1.  Normative References\n   [CRY]      Linux Programmer's Manual, \"CRYPT(3)\"\
    , August 2015,\n              <http://man7.org/linux/man-pages/man3/crypt.3.html>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3454]\
    \  Hoffman, P. and M. Blanchet, \"Preparation of\n              Internationalized\
    \ Strings (\"stringprep\")\", RFC 3454,\n              DOI 10.17487/RFC3454, December\
    \ 2002,\n              <http://www.rfc-editor.org/info/rfc3454>.\n   [RFC5931]\
    \  Harkins, D. and G. Zorn, \"Extensible Authentication\n              Protocol\
    \ (EAP) Authentication Using Only a Password\",\n              RFC 5931, DOI 10.17487/RFC5931,\
    \ August 2010,\n              <http://www.rfc-editor.org/info/rfc5931>.\n   [RFC7613]\
    \  Saint-Andre, P. and A. Melnikov, \"Preparation,\n              Enforcement,\
    \ and Comparison of Internationalized Strings\n              Representing Usernames\
    \ and Passwords\", RFC 7613,\n              DOI 10.17487/RFC7613, August 2015,\n\
    \              <http://www.rfc-editor.org/info/rfc7613>.\n   [RFC7914]  Percival,\
    \ C. and S. Josefsson, \"The scrypt Password-Based\n              Key Derivation\
    \ Function\", RFC 7914, DOI 10.17487/RFC7914,\n              August 2016, <http://www.rfc-editor.org/info/rfc7914>.\n\
    \   [RFC8018]  Moriarty, K., Ed., Kaliski, B., and A. Rusch, \"PKCS #5:\n    \
    \          Password-Based Cryptography Specification Version 2.1\",\n        \
    \      RFC 8018, DOI 10.17487/RFC8018, January 2017,\n              <http://www.rfc-editor.org/info/rfc8018>.\n\
    \   [SHS]      National Institute of Standards and Technology, \"Secure\n    \
    \          Hash Standard (SHS)\", FIPS PUB 180-4,\n              DOI 10.6028/NIST.FIPS.180-4,\
    \ August 2015,\n              <http://csrc.nist.gov/publications/fips/fips180-4/\n\
    \              fips-180-4.pdf>.\n"
- title: 5.2.  Informative References
  contents:
  - "5.2.  Informative References\n   [RFC7616]  Shekh-Yusef, R., Ed., Ahrens, D.,\
    \ and S. Bremer, \"HTTP\n              Digest Access Authentication\", RFC 7616,\n\
    \              DOI 10.17487/RFC7616, September 2015,\n              <http://www.rfc-editor.org/info/rfc7616>.\n\
    \   [RFC7664]  Harkins, D., Ed., \"Dragonfly Key Exchange\", RFC 7664,\n     \
    \         DOI 10.17487/RFC7664, November 2015,\n              <http://www.rfc-editor.org/info/rfc7664>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to Stefan Winter and the eduroam project for its\
    \ continued\n   interest in using EAP-pwd.  Thanks to Simon Josefsson for his\
    \ advice\n   on support for scrypt and PBKDF2.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Dan Harkins\n   HP Enterprise\n   3333 Scott Boulevard\n\
    \   Santa Clara, CA  95054\n   United States of America\n   Email: dharkins@arubanetworks.com\n"
