- contents:
  - '           Support for Multiple Clock Rates in an RTP Session

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document clarifies the RTP specification regarding the use
    of\n   different clock rates in an RTP session.  It also provides guidance\n   on
    how legacy RTP implementations that use multiple clock rates can\n   interoperate
    with RTP implementations that use the algorithm\n   described in this document.
    \ It updates RFC 3550.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7160.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    . . .   4\n   3.  Legacy RTP  . . . . . . . . . . . . . . . . . . . . . . . .
    .   4\n     3.1.  Different SSRC  . . . . . . . . . . . . . . . . . . . . .   4\n
    \    3.2.  Same SSRC . . . . . . . . . . . . . . . . . . . . . . . .   5\n       3.2.1.
    \ Monotonic Timestamps  . . . . . . . . . . . . . . . .   5\n       3.2.2.  Non-monotonic
    Timestamps  . . . . . . . . . . . . . .   6\n   4.  Recommendations . . . . .
    . . . . . . . . . . . . . . . . . .   6\n     4.1.  RTP Sender (with RTCP)  .
    . . . . . . . . . . . . . . . .   6\n     4.2.  RTP Sender (without RTCP) . .
    . . . . . . . . . . . . . .   6\n     4.3.  RTP Receiver  . . . . . . . . . .
    . . . . . . . . . . . .   7\n   5.  Security Considerations . . . . . . . . .
    . . . . . . . . . .   7\n   6.  Acknowledgements  . . . . . . . . . . . . . .
    . . . . . . . .   8\n   7.  References  . . . . . . . . . . . . . . . . . . .
    . . . . . .   8\n     7.1.  Normative References  . . . . . . . . . . . . . .
    . . . .   8\n     7.2.  Informative References  . . . . . . . . . . . . . . .
    . .   8\n   Appendix A.  Example Values . . . . . . . . . . . . . . . . . . .
    \ 10\n   Appendix B.  Using a Fixed Clock Rate . . . . . . . . . . . . . .  12\n
    \  Appendix C.  Behavior of Legacy Implementations . . . . . . . . .  12\n     C.1.
    \ libccrtp 2.0.2  . . . . . . . . . . . . . . . . . . . . .  12\n     C.2.  libmediastreamer0
    2.6.0 . . . . . . . . . . . . . . . . .  12\n     C.3.  libpjmedia 1.0  . . .
    . . . . . . . . . . . . . . . . . .  13\n     C.4.  Android RTP Stack 4.0.3 .
    . . . . . . . . . . . . . . . .  13\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The clock rate is a parameter of the payload format as identified
    in\n   RTP and RTCP (RTP Control Protocol) by the payload type value.  It is\n
    \  often defined as being the same as the sampling rate but that is not\n   always
    the case (see, for example, the G722 and MPA audio codecs\n   [RFC3551]).\n   An
    RTP sender can switch between different payloads during the\n   lifetime of an
    RTP session and because clock rates are defined by\n   payload format, it is possible
    that the clock rate will also vary\n   during an RTP session.  Schulzrinne, et
    al. [RFC3550] lists using\n   multiple clock rates as one of the reasons to not
    use different\n   payloads on the same Synchronization Source (SSRC).  Unfortunately,\n
    \  this advice has not always been followed and some RTP implementations\n   change
    the payload in the same SSRC, even if the different payloads\n   use different
    clock rates.\n   This creates three problems:\n   o  The method used to calculate
    the RTP timestamp field in an RTP\n      packet is underspecified.\n   o  When
    the same SSRC is used for different clock rates, it is\n      difficult to know
    what clock rate was used for the RTP timestamp\n      field in an RTCP Sender
    Report (SR) packet.\n   o  When the same SSRC is used for different clock rates,
    it is\n      difficult to know what clock rate was used for the interarrival\n
    \     jitter field in an RTCP Receiver Report (RR) packet.\n   Table 1 contains
    a non-exhaustive list of fields in RTCP packets that\n   uses a clock rate as
    a unit:\n          +---------------------+------------------+------------+\n          |
    Field name          | RTCP packet type | Reference  |\n          +---------------------+------------------+------------+\n
    \         | RTP timestamp       | SR               | [RFC3550]  |\n          |
    \                    |                  |            |\n          | Interarrival
    jitter | RR               | [RFC3550]  |\n          |                     |                  |
    \           |\n          | min_jitter          | XR Summary Block | [RFC3611]
    \ |\n          |                     |                  |            |\n          |
    max_jitter          | XR Summary Block | [RFC3611]  |\n          |                     |
    \                 |            |\n          | mean_jitter         | XR Summary
    Block | [RFC3611]  |\n          |                     |                  |            |\n
    \         | dev_jitter          | XR Summary Block | [RFC3611]  |\n          |
    \                    |                  |            |\n          | Interarrival
    jitter | IJ               | [RFC5450]  |\n          |                     |                  |
    \           |\n          | RTP timestamp       | SMPTETC          | [RFC5484]
    \ |\n          |                     |                  |            |\n          |
    Jitter              | RSI Jitter Block | [RFC5760]  |\n          |                     |
    \                 |            |\n          | Median jitter       | RSI Stats
    Block  | [RFC5760]  |\n          +---------------------+------------------+------------+\n
    \                                 Table 1\n   Section 3 and its subsections try
    to list all of the algorithms known\n   to be used in existing RTP implementations
    at the time of writing.\n   These sections are not normative.\n   Section 4 and
    its subsections recommend a unique algorithm that\n   modifies RFC 3550.  These
    sections are normative.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n
    \  In addition, this document uses the following terms:\n   Clock rate     The
    multiplier used to convert from a wallclock value\n                  in seconds
    to an equivalent RTP timestamp value\n                  (without the fixed random
    offset).  Note that RFC 3550\n                  uses various terms like \"clock
    frequency\", \"media\n                  clock rate\", \"timestamp unit\", \"timestamp
    frequency\",\n                  and \"RTP timestamp clock rate\" as synonymous
    to clock\n                  rate.\n   RTP Sender     A logical network element
    that sends RTP packets,\n                  sends RTCP SR packets, and receives
    RTCP reception\n                  report blocks.\n   RTP Receiver   A logical
    network element that receives RTP packets,\n                  receives RTCP SR
    packets, and sends RTCP reception\n                  report blocks.\n"
  title: 2.  Terminology
- contents:
  - "3.  Legacy RTP\n   The following sections describe the various ways in which
    legacy RTP\n   implementations behave when multiple clock rates are used.  \"Legacy\n
    \  RTP\" refers to RFC 3550 without the modifications introduced by this\n   document.\n"
  - contents:
    - "3.1.  Different SSRC\n   One way of managing multiple clock rates is to use
      a different SSRC\n   for each different clock rate, as in this case there is
      no ambiguity\n   on the clock rate used by fields in the RTCP packets.  This
      method\n   also seems to be the original intent of RTP as can be deduced from\n
      \  points 2 and 3 of Section 5.2 of RFC 3550.\n   On the other hand, changing
      the SSRC can be a problem for some\n   implementations designed to work only
      with unicast IP addresses,\n   where having multiple SSRCs is considered a corner
      case.  Lip\n   synchronization can also be a problem in the interval between
      the\n   beginning of the new stream and the first RTCP SR packet.\n"
    title: 3.1.  Different SSRC
  - contents:
    - "3.2.  Same SSRC\n   The simplest way to manage multiple clock rates is to use
      the same\n   SSRC for all of the payload types regardless of the clock rates.\n
      \  Unfortunately, there is no clear definition on how the RTP timestamp\n   should
      be calculated in this case.  The following subsections present\n   the algorithms
      currently in use.\n"
    - contents:
      - "3.2.1.  Monotonic Timestamps\n   This method of calculating the RTP timestamp
        ensures that the value\n   increases monotonically.  The formula used by this
        method is as\n   follows:\n   timestamp = previous_timestamp\n               +
        (current_capture_time - previous_capture_time)\n               * current_clock_rate\n
        \  The problem with this method is that the jitter calculation on the\n   receiving
        side gives an invalid result during the transition between\n   two clock rates,
        as shown in Table 2 (Appendix A).  The capture and\n   arrival time are measured
        in seconds, starting at the beginning of\n   the capture of the first packet;
        clock rate is measured in Hz; the\n   RTP timestamp does not include the random
        offset; and the transit,\n   jitter, and average jitter use the clock rate
        as a unit.\n   Calculating the correct transit time on the receiving side
        can be\n   done by using the following formulas:\n   1.  current_capture_time
        = (current_timestamp - previous_timestamp) /\n       current_clock_rate +
        previous_capture_time\n   2.  transit = current_clock_rate * (arrival_time
        -\n       current_capture_time)\n   3.  previous_capture_time = current_capture_time\n
        \  The main problem with this method, in addition to the fact that the\n   jitter
        calculation described in RFC 3550 cannot be used, is that it\n   is dependent
        on the previous RTP packets, which can be reordered or\n   lost in the network.\n"
      title: 3.2.1.  Monotonic Timestamps
    - contents:
      - "3.2.2.  Non-monotonic Timestamps\n   An alternate way of generating the RTP
        timestamps is to use the\n   following formula:\n                   timestamp
        = capture_time * clock_rate\n   With this formula, the jitter calculation
        is correct but the RTP\n   timestamp values are no longer increasing monotonically
        as shown in\n   Table 3 (Appendix A).  RFC 3550 states that \"[t]he sampling
        instant\n   MUST be derived from a clock that increments monotonically . .
        .\",\n   but it does not say that the RTP timestamp must increment\n   monotonically.\n
        \  The advantage with this method is that it works with the jitter\n   calculation
        described in RFC 3550, as long as the correct clock rates\n   are used.  It
        seems that this is what most implementations are using\n   (based on a survey
        done at SIPit26 and on a survey of open source\n   implementations, see Appendix
        C).\n"
      title: 3.2.2.  Non-monotonic Timestamps
    title: 3.2.  Same SSRC
  title: 3.  Legacy RTP
- contents:
  - "4.  Recommendations\n   The following subsections describe behavioral recommendations
    for RTP\n   senders (with and without RTCP) and RTP receivers.\n"
  - contents:
    - "4.1.  RTP Sender (with RTCP)\n   An RTP Sender with RTCP turned on MUST use
      a different SSRC for each\n   different clock rate.  An RTCP BYE MUST be sent
      and a new SSRC MUST\n   be used if the clock rate switches back to a value already
      seen in\n   the RTP stream.\n   To accelerate lip synchronization, the next
      compound RTCP packet sent\n   by the RTP sender MUST contain multiple SR packets,
      the first one\n   containing the mapping for the current clock rate and the
      subsequent\n   SR packet(s) containing the mapping for the other clock rates
      seen\n   during the last period.\n   The RTP extension defined by Perkins &
      Schierl [RFC6051] MAY be used\n   to accelerate the synchronization.\n"
    title: 4.1.  RTP Sender (with RTCP)
  - contents:
    - "4.2.  RTP Sender (without RTCP)\n   An RTP Sender with RTCP turned off (i.e.,
      having set the RTP Sender\n   and RTP Receiver bandwidth modifiers [RFC3556]
      to 0) SHOULD use a\n   different SSRC for each different clock rate but MAY
      use different\n   clock rates on the same SSRC as long as the RTP timestamp
      is\n   calculated as explained below:\n   Each time the clock rate changes,
      the start_offset and capture_start\n   values are calculated with the following
      formulas:\n   start_offset += (capture_time - capture_start) * previous_clock_rate\n
      \  capture_start = capture_time\n   For the first RTP packet, the values are
      initialized with the\n   following values:\n                   start_offset
      = random_initial_offset\n                   capture_start = capture_time\n   After
      eventually updating these values, the RTP timestamp is\n   calculated with the
      following formula:\n          timestamp = (capture_time - capture_start) * clock_rate\n
      \                     + start_offset\n   Note that in all the formulas, capture_start
      is the first instant\n   that the new timestamp rate is used.  The output of
      the above method\n   is exemplified in Table 4 (Appendix A).\n"
    title: 4.2.  RTP Sender (without RTCP)
  - contents:
    - "4.3.  RTP Receiver\n   An RTP Receiver MUST calculate the jitter using the
      following\n   formula:\n         D(i,j) = (arrival_time_j * clock_rate_i - timestamp_j)\n
      \                 - (arrival_time_i * clock_rate_i - timestamp_i)\n   An RTP
      Receiver MUST be able to handle a compound RTCP packet with\n   multiple SR
      packets.\n"
    title: 4.3.  RTP Receiver
  title: 4.  Recommendations
- contents:
  - "5.  Security Considerations\n   When the algorithm described in Section 4.1 is
    used, the security\n   considerations described in RFC 3550 apply.\n   The algorithm
    described in Section 4.2 is new and so its security\n   properties were not considered
    in RFC 3550.  Although the RTP\n   timestamp is initialized with a random value
    like before, the\n   timestamp value depends on the current and previous clock
    rates; this\n   may or may not introduce a security vulnerability in the protocol.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  Acknowledgements\n   Thanks to Colin Perkins, Ali C. Begen, Harald Alvestrand,
    Qin Wu,\n   Jonathan Lennox, Barry Leiba, David Harrington, Stephen Farrell,\n
    \  Spencer Dawkins, Wassim Haddad, and Magnus Westerlund for comments,\n   suggestions,
    and questions that helped to improve this document.\n   Thanks to Bo Burman, who
    provided the values in Table 4 of\n   Appendix A.\n   Thanks to Robert Sparks
    and the attendees of SIPit 26 for the survey\n   on multiple clock rates interoperability.\n"
  title: 6.  Acknowledgements
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n              Jacobson,
      \"RTP: A Transport Protocol for Real-Time\n              Applications\", STD
      64, RFC 3550, July 2003.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [AVT-VAR-RATE]\n              Wenger, S. and
      C. Perkins, \"RTP Timestamp Frequency for\n              Variable Rate Audio
      Codecs\", Work in Progress, October\n              2004.\n   [RFC3551]  Schulzrinne,
      H. and S. Casner, \"RTP Profile for Audio and\n              Video Conferences
      with Minimal Control\", STD 65, RFC 3551,\n              July 2003.\n   [RFC3556]
      \ Casner, S., \"Session Description Protocol (SDP) Bandwidth\n              Modifiers
      for RTP Control Protocol (RTCP) Bandwidth\", RFC\n              3556, July 2003.\n
      \  [RFC3611]  Friedman, T., Caceres, R., and A. Clark, \"RTP Control\n              Protocol
      Extended Reports (RTCP XR)\", RFC 3611, November\n              2003.\n   [RFC5450]
      \ Singer, D. and H. Desineni, \"Transmission Time Offsets in\n              RTP
      Streams\", RFC 5450, March 2009.\n   [RFC5484]  Singer, D., \"Associating Time-Codes
      with RTP Streams\", RFC\n              5484, March 2009.\n   [RFC5760]  Ott,
      J., Chesterfield, J., and E. Schooler, \"RTP Control\n              Protocol
      (RTCP) Extensions for Single-Source Multicast\n              Sessions with Unicast
      Feedback\", RFC 5760, February 2010.\n   [RFC6051]  Perkins, C. and T. Schierl,
      \"Rapid Synchronisation of RTP\n              Flows\", RFC 6051, November 2010.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Appendix A.  Example Values\n   The following tables illustrate the timestamp
    and jitter values\n   produced when the various methods discussed in the text
    are used.\n   The values shown are purely exemplary, illustrative, and non-\n
    \  normative.\n   +-------+-------+-----------+---------+---------+--------+----------+\n
    \  | Capt. | Clock | RTP       | Arrival | Transit | Jitter | Average  |\n   |
    time  | rate  | timestamp | time    |         |        | jitter   |\n   +-------+-------+-----------+---------+---------+--------+----------+\n
    \  | 0     | 8000  | 0         | 0.1     | 800     |        |          |\n   |
    \      |       |           |         |         |        |          |\n   | 0.02
    \ | 8000  | 160       | 0.12    | 800     | 0      | 0        |\n   |       |
    \      |           |         |         |        |          |\n   | 0.04  | 8000
    \ | 320       | 0.14    | 800     | 0      | 0        |\n   |       |       |
    \          |         |         |        |          |\n   | 0.06  | 8000  | 480
    \      | 0.16    | 800     | 0      | 0        |\n   |       |       |           |
    \        |         |        |          |\n   | 0.08  | 16000 | 800       | 0.18
    \   | 2080    | 480    | 30       |\n   |       |       |           |         |
    \        |        |          |\n   | 0.1   | 16000 | 1120      | 0.2     | 2080
    \   | 0      | 28       |\n   |       |       |           |         |         |
    \       |          |\n   | 0.12  | 16000 | 1440      | 0.22    | 2080    | 0      |
    26       |\n   |       |       |           |         |         |        |          |\n
    \  | 0.14  | 8000  | 1600      | 0.24    | 320     | 720    | 70       |\n   |
    \      |       |           |         |         |        |          |\n   | 0.16
    \ | 8000  | 1760      | 0.26    | 320     | 0      | 65       |\n   +-------+-------+-----------+---------+---------+--------+----------+\n
    \                      Table 2: Monotonic Timestamps\n   +-------+-------+-----------+---------+---------+--------+----------+\n
    \  | Capt. | Clock | RTP       | Arrival | Transit | Jitter | Average  |\n   |
    time  | rate  | timestamp | time    |         |        | jitter   |\n   +-------+-------+-----------+---------+---------+--------+----------+\n
    \  | 0     | 8000  | 0         | 0.1     | 800     |        |          |\n   |
    \      |       |           |         |         |        |          |\n   | 0.02
    \ | 8000  | 160       | 0.12    | 800     | 0      | 0        |\n   |       |
    \      |           |         |         |        |          |\n   | 0.04  | 8000
    \ | 320       | 0.14    | 800     | 0      | 0        |\n   |       |       |
    \          |         |         |        |          |\n   | 0.06  | 8000  | 480
    \      | 0.16    | 800     | 0      | 0        |\n   |       |       |           |
    \        |         |        |          |\n   | 0.08  | 16000 | 1280      | 0.18
    \   | 1600    | 0      | 0        |\n   |       |       |           |         |
    \        |        |          |\n   | 0.1   | 16000 | 1600      | 0.2     | 1600
    \   | 0      | 0        |\n   |       |       |           |         |         |
    \       |          |\n   | 0.12  | 16000 | 1920      | 0.22    | 1600    | 0      |
    0        |\n   |       |       |           |         |         |        |          |\n
    \  | 0.14  | 8000  | 1120      | 0.24    | 800     | 0      | 0        |\n   |
    \      |       |           |         |         |        |          |\n   | 0.16
    \ | 8000  | 1280      | 0.26    | 800     | 0      | 0        |\n   +-------+-------+-----------+---------+---------+--------+----------+\n
    \                    Table 3: Non-monotonic Timestamps\n   +-------+-------+-----------+---------+---------+--------+----------+\n
    \  | Capt. | Clock | RTP       | Arrival | Transit | Jitter | Average  |\n   |
    time  | rate  | timestamp | time    |         |        | jitter   |\n   +-------+-------+-----------+---------+---------+--------+----------+\n
    \  | 0     | 8000  | 0         | 0.1     | 800     |        |          |\n   |
    \      |       |           |         |         |        |          |\n   | 0.02
    \ | 8000  | 160       | 0.12    | 800     | 0      | 0        |\n   |       |
    \      |           |         |         |        |          |\n   | 0.04  | 8000
    \ | 320       | 0.14    | 800     | 0      | 0        |\n   |       |       |
    \          |         |         |        |          |\n   | 0.06  | 8000  | 480
    \      | 0.16    | 800     | 0      | 0        |\n   |       |       |           |
    \        |         |        |          |\n   | 0.08  | 16000 | 640       | 0.18
    \   | 1600    | 0      | 0        |\n   |       |       |           |         |
    \        |        |          |\n   | 0.1   | 16000 | 960       | 0.2     | 1600
    \   | 0      | 0        |\n   |       |       |           |         |         |
    \       |          |\n   | 0.12  | 16000 | 1280      | 0.22    | 1600    | 0      |
    0        |\n   |       |       |           |         |         |        |          |\n
    \  | 0.14  | 8000  | 1600      | 0.24    | 320     | 0      | 0        |\n   |
    \      |       |           |         |         |        |          |\n   | 0.16
    \ | 8000  | 1760      | 0.26    | 320     | 0      | 0        |\n   +-------+-------+-----------+---------+---------+--------+----------+\n
    \        Table 4: Recommended Method for RTP Sender (without RTCP)\n"
  title: Appendix A.  Example Values
- contents:
  - "Appendix B.  Using a Fixed Clock Rate\n   An alternate way of fixing the issue
    with using multiple clock rates\n   was proposed by Wenger and Perkins [AVT-VAR-RATE].
    \ This document\n   proposed to define a unified clock rate, but the proposal
    was\n   rejected at IETF 61.\n"
  title: Appendix B.  Using a Fixed Clock Rate
- contents:
  - 'Appendix C.  Behavior of Legacy Implementations

    '
  - contents:
    - "C.1.  libccrtp 2.0.2\n   This library uses the formula described in Section
      3.2.2.\n   Note that this library uses gettimeofday(2) which is not guaranteed\n
      \  to increment monotonically (e.g., when the clock is adjusted by NTP).\n"
    title: C.1.  libccrtp 2.0.2
  - contents:
    - "C.2.  libmediastreamer0 2.6.0\n   This library (which uses the oRTP library)
      uses the formula described\n   in Section 3.2.2.\n   Note that in some environments
      this library uses gettimeofday(2),\n   which is not guaranteed to increment
      monotonically.\n"
    title: C.2.  libmediastreamer0 2.6.0
  - contents:
    - "C.3.  libpjmedia 1.0\n   This library uses the formula described in Section
      3.2.2.\n"
    title: C.3.  libpjmedia 1.0
  - contents:
    - "C.4.  Android RTP Stack 4.0.3\n   This library changes the SSRC each time the
      format changes, as\n   described in Section 3.1.\n"
    title: C.4.  Android RTP Stack 4.0.3
  title: Appendix C.  Behavior of Legacy Implementations
- contents:
  - "Authors' Addresses\n   Marc Petit-Huguenin\n   Impedance Mismatch\n   EMail:
    petithug@acm.org\n   Glen Zorn (editor)\n   Network Zen\n   227/358 Thanon Sanphawut\n
    \  Bang Na, Bangkok  10260\n   Thailand\n   Phone: +66 (0) 8-1000-4155\n   EMail:
    glenzorn@gmail.com\n"
  title: Authors' Addresses
