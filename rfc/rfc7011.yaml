- title: __initial_text__
  contents:
  - "    Specification of the IP Flow Information Export (IPFIX) Protocol\n      \
    \            for the Exchange of Flow Information\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the IP Flow Information Export (IPFIX)\n\
    \   protocol, which serves as a means for transmitting Traffic Flow\n   information\
    \ over the network.  In order to transmit Traffic Flow\n   information from an\
    \ Exporting Process to a Collecting Process, a\n   common representation of flow\
    \ data and a standard means of\n   communicating them are required.  This document\
    \ describes how the\n   IPFIX Data and Template Records are carried over a number\
    \ of\n   transport protocols from an IPFIX Exporting Process to an IPFIX\n   Collecting\
    \ Process.  This document obsoletes RFC 5101.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7011.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................5\n\
    \      1.1. Changes since RFC 5101 .....................................5\n  \
    \    1.2. IPFIX Documents Overview ...................................6\n   2.\
    \ Terminology .....................................................7\n      2.1.\
    \ Terminology Summary Table .................................13\n   3. IPFIX Message\
    \ Format ...........................................13\n      3.1. Message Header\
    \ Format .....................................15\n      3.2. Field Specifier Format\
    \ ....................................16\n      3.3. Set and Set Header Format\
    \ .................................18\n           3.3.1. Set Format .........................................18\n\
    \           3.3.2. Set Header Format ..................................19\n  \
    \    3.4. Record Format .............................................20\n    \
    \       3.4.1. Template Record Format .............................20\n      \
    \     3.4.2. Options Template Record Format .....................23\n        \
    \          3.4.2.1. Scope .....................................23\n          \
    \        3.4.2.2. Options Template Record Format ............24\n           3.4.3.\
    \ Data Record Format .................................27\n   4. Specific Reporting\
    \ Requirements ................................28\n      4.1. The Metering Process\
    \ Statistics Options Template ..........29\n      4.2. The Metering Process Reliability\
    \ Statistics\n           Options Template ..........................................29\n\
    \      4.3. The Exporting Process Reliability Statistics\n           Options Template\
    \ ..........................................31\n      4.4. The Flow Keys Options\
    \ Template ............................32\n   5. Timing Considerations ..........................................32\n\
    \      5.1. IPFIX Message Header Export Time and Flow Record Time .....32\n  \
    \    5.2. Supporting Timestamp Wraparound ...........................33\n   6.\
    \ Linkage with the Information Model .............................34\n      6.1.\
    \ Encoding of IPFIX Data Types ..............................34\n           6.1.1.\
    \ Integral Data Types ................................34\n           6.1.2. Address\
    \ Types ......................................34\n           6.1.3. float32 ............................................34\n\
    \           6.1.4. float64 ............................................34\n  \
    \         6.1.5. boolean ............................................35\n    \
    \       6.1.6. string and octetArray ..............................35\n      \
    \     6.1.7. dateTimeSeconds ....................................35\n        \
    \   6.1.8. dateTimeMilliseconds ...............................35\n          \
    \ 6.1.9. dateTimeMicroseconds ...............................35\n           6.1.10.\
    \ dateTimeNanoseconds ...............................36\n      6.2. Reduced-Size\
    \ Encoding .....................................36\n   7. Variable-Length Information\
    \ Element ............................37\n   8. Template Management ............................................38\n\
    \      8.1. Template Withdrawal and Redefinition ......................40\n  \
    \    8.2. Sequencing Template Management Actions ....................42\n    \
    \  8.3. Additional Considerations for Template Management\n           over SCTP\
    \ .................................................43\n      8.4. Additional Considerations\
    \ for Template Management\n           over UDP ..................................................44\n\
    \   9. The Collecting Process's Side ..................................45\n  \
    \    9.1. Collecting Process Handling of Malformed IPFIX Messages ...46\n    \
    \  9.2. Additional Considerations for SCTP Collecting Processes ...46\n      9.3.\
    \ Additional Considerations for UDP Collecting Processes ....46\n   10. Transport\
    \ Protocol ............................................47\n      10.1. Transport\
    \ Compliance and Transport Usage .................47\n      10.2. SCTP .....................................................48\n\
    \           10.2.1. Congestion Avoidance ..............................48\n  \
    \         10.2.2. Reliability .......................................49\n    \
    \       10.2.3. MTU ...............................................49\n      \
    \     10.2.4. Association Establishment and Shutdown ............49\n        \
    \   10.2.5. Failover ..........................................50\n          \
    \ 10.2.6. Streams ...........................................50\n      10.3. UDP\
    \ ......................................................50\n           10.3.1.\
    \ Congestion Avoidance ..............................50\n           10.3.2. Reliability\
    \ .......................................51\n           10.3.3. MTU ...............................................51\n\
    \           10.3.4. Session Establishment and Shutdown ................51\n  \
    \         10.3.5. Failover and Session Duplication ..................51\n    \
    \  10.4. TCP ......................................................52\n      \
    \     10.4.1. Congestion Avoidance ..............................52\n        \
    \   10.4.2. Reliability .......................................52\n          \
    \ 10.4.3. MTU ...............................................52\n           10.4.4.\
    \ Connection Establishment and Shutdown .............53\n           10.4.5. Failover\
    \ ..........................................53\n   11. Security Considerations\
    \ .......................................54\n      11.1. Applicability of TLS\
    \ and DTLS ............................55\n      11.2. Usage ....................................................56\n\
    \      11.3. Mutual Authentication ....................................56\n  \
    \    11.4. Protection against DoS Attacks ...........................57\n    \
    \  11.5. When DTLS or TLS Is Not an Option ........................58\n      11.6.\
    \ Logging an IPFIX Attack ..................................58\n      11.7. Securing\
    \ the Collector ...................................59\n      11.8. Privacy Considerations\
    \ for Collected Data ................59\n   12. Management Considerations .....................................60\n\
    \   13. IANA Considerations ...........................................61\n  \
    \ Appendix A. IPFIX Encoding Examples ...............................62\n    \
    \  A.1. Message Header Example ....................................62\n      A.2.\
    \ Template Set Examples .....................................63\n        A.2.1.\
    \ Template Set Using IANA Information Elements ..........63\n        A.2.2. Template\
    \ Set Using Enterprise-Specific Information\n               Elements ..............................................64\n\
    \      A.3. Data Set Example ..........................................65\n  \
    \    A.4. Options Template Set Examples .............................66\n    \
    \    A.4.1. Options Template Set Using IANA Information Elements ..66\n      \
    \  A.4.2. Options Template Set Using Enterprise-Specific\n               Information\
    \ Elements ..................................66\n        A.4.3. Options Template\
    \ Set Using an Enterprise-Specific\n               Scope .................................................67\n\
    \        A.4.4. Data Set Using an Enterprise-Specific Scope ...........68\n  \
    \    A.5. Variable-Length Information Element Examples ..............69\n    \
    \    A.5.1. Example of Variable-Length Information Element with\n            \
    \   Length Less Than 255 Octets ...........................69\n        A.5.2.\
    \ Example of Variable-Length Information Element with\n               3-Octet\
    \ Length Encoding ...............................70\n   Normative References ..............................................71\n\
    \   Informative References ............................................71\n  \
    \ Acknowledgments ...................................................74\n   Contributors\
    \ ......................................................75\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Traffic on a data network can be seen as consisting of flows\
    \ passing\n   through network elements.  For administrative or other purposes,\
    \ it\n   is often interesting, useful, or even necessary to have access to\n \
    \  information about these flows that pass through the network elements.\n   A\
    \ Collecting Process should be able to receive the Flow information\n   passing\
    \ through multiple network elements within the data network.\n   This requires\
    \ uniformity in the method of representing the flow\n   information and the means\
    \ of communicating the flows from the network\n   elements to the collection point.\
    \  This document specifies a protocol\n   to achieve these requirements.  This\
    \ document specifies in detail the\n   representation of different flows, as well\
    \ as the additional data\n   required for flow interpretation, packet format,\
    \ transport mechanisms\n   used, security concerns, etc.\n"
- title: 1.1.  Changes since RFC 5101
  contents:
  - "1.1.  Changes since RFC 5101\n   This document obsoletes the Proposed Standard\
    \ revision of the IPFIX\n   Protocol Specification [RFC5101].  The protocol specified\
    \ by this\n   document is interoperable with the protocol as specified in\n  \
    \ [RFC5101].  The following changes have been made to this document\n   with respect\
    \ to the previous document:\n   - All outstanding technical and editorial errata\
    \ on [RFC5101] have\n     been addressed.\n   - As the [IANA-IPFIX] registry is\
    \ now the normative reference for all\n     Information Element definitions (see\
    \ [RFC7012]), all definitions of\n     Information Elements in Section 4 have\
    \ been replaced with\n     references to that registry.\n   - The encoding of\
    \ the dateTimeSeconds, dateTimeMilliseconds,\n     dateTimeMicroseconds, and dateTimeNanoseconds\
    \ data types, and the\n     related encoding of the IPFIX Message Header Export\
    \ Time field,\n     have been clarified, especially with respect to the epoch\
    \ upon\n     which the timestamp data types are based.\n   - A new Section 5.2\
    \ has been added to address wraparound of these\n     timestamp data types after\
    \ they overflow in the years 2032-2038.\n   - Clarifications on encoding, especially\
    \ in Section 6, have been\n     made: all IPFIX values are encoded in network\
    \ byte order.\n   - Template management, as described in Section 8, has been simplified\n\
    \     and clarified: the specification has been relaxed with respect to\n    \
    \ [RFC5101], especially concerning potential failures in Template ID\n     reuse.\
    \  Additional corner cases in template management have been\n     addressed. \
    \ The new template management language is interoperable\n     with that in [RFC5101]\
    \ to the extent that the behavior was defined\n     in the prior specification.\n\
    \   - Section 11.3 (Mutual Authentication) has been improved to refer to\n   \
    \  current practices in Transport Layer Security (TLS) mutual\n     authentication;\
    \ references to Punycode were removed, as these are\n     covered in [RFC6125].\n\
    \   - Editorial improvements, including structural changes to Sections 8,\n  \
    \   9, and 10 to improve readability, have been applied.  Behavior\n     common\
    \ to all transport protocols has been separated out, with\n     exceptions per\
    \ transport specifically noted.  All template\n     management language (on both\
    \ Exporting and Collecting Processes)\n     has been unified in Section 8.\n \
    \  - A new Section 12 on management considerations has been added.\n"
- title: 1.2.  IPFIX Documents Overview
  contents:
  - "1.2.  IPFIX Documents Overview\n   The IPFIX protocol provides network administrators\
    \ with access to IP\n   Flow information.  The architecture for the export of\
    \ measured IP\n   Flow information out of an IPFIX Exporting Process to a Collecting\n\
    \   Process is defined in [RFC5470], per the requirements defined in\n   [RFC3917].\
    \  This document specifies how IPFIX Data Records and\n   Templates are carried\
    \ via a number of transport protocols from IPFIX\n   Exporting Processes to IPFIX\
    \ Collecting Processes.\n   Four IPFIX optimizations/extensions are currently\
    \ specified: a\n   bandwidth-saving method for the IPFIX protocol [RFC5473], an\n\
    \   efficient method for exporting bidirectional flows [RFC5103], a\n   method\
    \ for the definition and export of complex data structures\n   [RFC6313], and\
    \ the specification of the Protocol on IPFIX Mediators\n   [IPFIX-MED-PROTO] based\
    \ on the IPFIX Mediation Framework [RFC6183].\n   A \"file-based transport\" for\
    \ IPFIX, which defines how IPFIX Messages\n   can be stored in files for document-based\
    \ workflows and for archival\n   purposes, is discussed in [RFC5655].\n   IPFIX\
    \ has a formal description of IPFIX Information Elements -- their\n   names, data\
    \ types, and additional semantic information -- as\n   specified in [RFC7012].\
    \  The registry is maintained by IANA\n   [IANA-IPFIX].  The inline export of\
    \ the Information Element type\n   information is specified in [RFC5610].\n  \
    \ The framework for packet selection and reporting [RFC5474] enables\n   network\
    \ elements to select subsets of packets by statistical and\n   other methods,\
    \ and to export a stream of reports on the selected\n   packets to a Collector.\
    \  The set of packet selection techniques\n   (Sampling, Filtering, and hashing)\
    \ standardized by the Packet\n   Sampling (PSAMP) protocol is described in [RFC5475].\
    \  The PSAMP\n   protocol [RFC5476], which uses IPFIX as its export protocol,\n\
    \   specifies the export of packet information from a PSAMP Exporting\n   Process\
    \ to a PSAMP Collector.  Instead of exporting PSAMP Packet\n   Reports, the stream\
    \ of selected packets may also serve as input to\n   the generation of IPFIX Flow\
    \ Records.  Like IPFIX, PSAMP has a formal\n   description of its Information\
    \ Elements: their names, types, and\n   additional semantic information.  The\
    \ PSAMP information model is\n   defined in [RFC5477].\n   [RFC6615] specifies\
    \ a MIB module for monitoring, and [RFC6728]\n   specifies a data model for configuring\
    \ and monitoring IPFIX and\n   PSAMP-compliant devices using the Network Configuration\
    \ Protocol\n   (NETCONF).  [RFC6727] specifies the PSAMP MIB module as an extension\n\
    \   of the IPFIX SELECTOR MIB module defined in [RFC6615].\n   In terms of development,\
    \ [RFC5153] provides guidelines for the\n   implementation and use of the IPFIX\
    \ protocol, while [RFC5471]\n   provides guidelines for testing.  Finally, [RFC5472]\
    \ describes what\n   types of applications can use the IPFIX protocol and how\
    \ they can use\n   the information provided.  It furthermore shows how the IPFIX\n\
    \   framework relates to other architectures and frameworks.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   RFC 2119 [RFC2119].\n   The definitions of the basic terms like Traffic\
    \ Flow, Exporting\n   Process, Collecting Process, Observation Points, etc. are\n\
    \   semantically identical to those found in the IPFIX requirements\n   document\
    \ [RFC3917].  Some of the terms have been expanded for more\n   clarity when defining\
    \ the protocol.  Additional terms required for\n   the protocol have also been\
    \ defined.  Definitions in this document\n   and in [RFC5470] are equivalent;\
    \ definitions that are only relevant\n   to the IPFIX protocol only appear here.\n\
    \   The terminology summary table in Section 2.1 gives a quick overview\n   of\
    \ the relationships among some of the different terms defined.\n   Observation\
    \ Point\n      An Observation Point is a location in the network where packets\n\
    \      can be observed.  Examples include a line to which a probe is\n      attached;\
    \ a shared medium, such as an Ethernet-based LAN; a single\n      port of a router;\
    \ or a set of interfaces (physical or logical) of\n      a router.\n      Note\
    \ that every Observation Point is associated with an\n      Observation Domain\
    \ (defined below) and that one Observation Point\n      may be a superset of several\
    \ other Observation Points.  For\n      example, one Observation Point can be\
    \ an entire line card.  That\n      would be the superset of the individual Observation\
    \ Points at the\n      line card's interfaces.\n   Observation Domain\n      An\
    \ Observation Domain is the largest set of Observation Points for\n      which\
    \ Flow information can be aggregated by a Metering Process.\n      For example,\
    \ a router line card may be an Observation Domain if it\n      is composed of\
    \ several interfaces, each of which is an Observation\n      Point.  In the IPFIX\
    \ Message it generates, the Observation Domain\n      includes its Observation\
    \ Domain ID, which is unique per Exporting\n      Process.  That way, the Collecting\
    \ Process can identify the\n      specific Observation Domain from the Exporter\
    \ that sends the IPFIX\n      Messages.  Every Observation Point is associated\
    \ with an\n      Observation Domain.  It is RECOMMENDED that Observation Domain\
    \ IDs\n      also be unique per IPFIX Device.\n   Packet Treatment\n      \"Packet\
    \ Treatment\" refers to action(s) performed on a packet by a\n      forwarding\
    \ device or other middlebox, including forwarding,\n      dropping, delaying for\
    \ traffic-shaping purposes, etc.\n   Traffic Flow or Flow\n      There are several\
    \ definitions of the term 'flow' being used by the\n      Internet community.\
    \  Within the context of IPFIX, we use the\n      following definition:\n    \
    \  A Flow is defined as a set of packets or frames passing an\n      Observation\
    \ Point in the network during a certain time interval.\n      All packets belonging\
    \ to a particular Flow have a set of common\n      properties.  Each property\
    \ is defined as the result of applying a\n      function to the values of:\n \
    \     1. one or more packet header fields (e.g., destination IP\n         address),\
    \ transport header fields (e.g., destination port\n         number), or application\
    \ header fields (e.g., RTP header fields\n         [RFC3550]).\n      2. one or\
    \ more characteristics of the packet itself (e.g., number\n         of MPLS labels,\
    \ etc.).\n      3. one or more of the fields derived from Packet Treatment (e.g.,\n\
    \         next-hop IP address, the output interface, etc.).\n      A packet is\
    \ defined as belonging to a Flow if it completely\n      satisfies all the defined\
    \ properties of the Flow.\n      Note that the set of packets represented by a\
    \ Flow may be empty;\n      that is, a Flow may represent zero or more packets.\
    \  As sampling\n      is a Packet Treatment, this definition includes packets\
    \ selected\n      by a sampling mechanism.\n   Flow Key\n      Each of the fields\
    \ that:\n      1. belong to the packet header (e.g., destination IP address),\
    \ or\n      2. are a property of the packet itself (e.g., packet length), or\n\
    \      3. are derived from Packet Treatment (e.g., Autonomous System (AS)\n  \
    \       number),\n      and that are used to define a Flow (i.e., are the properties\n\
    \      common to all packets in the Flow) are termed Flow Keys.  As an\n     \
    \ example, the traditional '5-tuple' Flow Key of source and\n      destination\
    \ IP address, source and destination transport port, and\n      transport protocol,\
    \ groups together all packets belonging to a\n      single direction of communication\
    \ on a single socket.\n   Flow Record\n      A Flow Record contains information\
    \ about a specific Flow that was\n      observed at an Observation Point.  A Flow\
    \ Record contains measured\n      properties of the Flow (e.g., the total number\
    \ of bytes for all\n      the Flow's packets) and usually contains characteristic\
    \ properties\n      of the Flow (e.g., source IP address).\n   Metering Process\n\
    \      The Metering Process generates Flow Records.  Inputs to the\n      process\
    \ are packet headers, characteristics, and Packet Treatment\n      observed at\
    \ one or more Observation Points.\n      The Metering Process consists of a set\
    \ of functions that includes\n      packet header capturing, timestamping, sampling,\
    \ classifying, and\n      maintaining Flow Records.\n      The maintenance of\
    \ Flow Records may include creating new records,\n      updating existing ones,\
    \ computing Flow statistics, deriving\n      further Flow properties, detecting\
    \ Flow expiration, passing Flow\n      Records to the Exporting Process, and deleting\
    \ Flow Records.\n   Exporting Process\n      The Exporting Process sends IPFIX\
    \ Messages to one or more\n      Collecting Processes.  The Flow Records in the\
    \ Messages are\n      generated by one or more Metering Processes.\n   Exporter\n\
    \      A device that hosts one or more Exporting Processes is termed an\n    \
    \  Exporter.\n   IPFIX Device\n      An IPFIX Device hosts at least one Exporting\
    \ Process.  It may host\n      further Exporting Processes as well as arbitrary\
    \ numbers of\n      Observation Points and Metering Processes.\n   Collecting\
    \ Process\n      A Collecting Process receives IPFIX Messages from one or more\n\
    \      Exporting Processes.  The Collecting Process might process or\n      store\
    \ Flow Records received within these Messages, but such\n      actions are out\
    \ of scope for this document.\n   Collector\n      A device that hosts one or\
    \ more Collecting Processes is termed a\n      Collector.\n   Template\n     \
    \ A Template is an ordered sequence of <type, length> pairs used to\n      completely\
    \ specify the structure and semantics of a particular set\n      of information\
    \ that needs to be communicated from an IPFIX Device\n      to a Collector.  Each\
    \ Template is uniquely identifiable by means\n      of a Template ID.\n   IPFIX\
    \ Message\n      An IPFIX Message is a message that originates at the Exporting\n\
    \      Process and carries the IPFIX records of this Exporting Process,\n    \
    \  and whose destination is a Collecting Process.  An IPFIX Message\n      is\
    \ encapsulated at the transport layer.\n   Message Header\n      The Message Header\
    \ is the first part of an IPFIX Message; the\n      Message Header provides basic\
    \ information about the message, such\n      as the IPFIX version, length of the\
    \ message, message sequence\n      number, etc.\n   Template Record\n      A Template\
    \ Record defines the structure and interpretation of\n      fields in a Data Record.\n\
    \   Data Record\n      A Data Record is a record that contains values of the parameters\n\
    \      corresponding to a Template Record.\n   Options Template Record\n     \
    \ An Options Template Record is a Template Record that defines the\n      structure\
    \ and interpretation of fields in a Data Record, including\n      defining how\
    \ to scope the applicability of the Data Record.\n   Set\n      A Set is a collection\
    \ of records that have a similar structure,\n      prefixed by a header.  In an\
    \ IPFIX Message, zero or more Sets\n      follow the Message Header.  There are\
    \ three different types of\n      Sets: Template Sets, Options Template Sets,\
    \ and Data Sets.\n   Template Set\n      A Template Set is a collection of one\
    \ or more Template Records\n      that have been grouped together in an IPFIX\
    \ Message.\n   Options Template Set\n      An Options Template Set is a collection\
    \ of one or more Options\n      Template Records that have been grouped together\
    \ in an IPFIX\n      Message.\n   Data Set\n      A Data Set is one or more Data\
    \ Records, of the same type, that are\n      grouped together in an IPFIX Message.\
    \  Each Data Record is\n      previously defined by a Template Record or an Options\
    \ Template\n      Record.\n   Information Element\n      An Information Element\
    \ is a protocol- and encoding-independent\n      description of an attribute that\
    \ may appear in an IPFIX Record.\n      Information Elements are defined in the\
    \ IANA \"IPFIX Information\n      Elements\" registry [IANA-IPFIX].  The type\
    \ associated with an\n      Information Element indicates constraints on what\
    \ it may contain\n      and also determines the valid encoding mechanisms for\
    \ use in\n      IPFIX.\n   Transport Session\n      In the Stream Control Transmission\
    \ Protocol (SCTP), the Transport\n      Session is known as the SCTP association,\
    \ which is uniquely\n      identified by the SCTP endpoints [RFC4960]; in TCP,\
    \ the Transport\n      Session is known as the TCP connection, which is uniquely\n\
    \      identified by the combination of IP addresses and TCP ports used.\n   \
    \   In UDP, the Transport Session is known as the UDP session, which\n      is\
    \ uniquely identified by the combination of IP addresses and UDP\n      ports\
    \ used.\n"
- title: 2.1.  Terminology Summary Table
  contents:
  - "2.1.  Terminology Summary Table\n   Figure A shows a summary of IPFIX terminology.\n\
    \    +------------------+---------------------------------------------+\n    |\
    \                  |                 Contents                    |\n    |    \
    \              +--------------------+------------------------+\n    |       Set\
    \        |      Template      |         Record         |\n    +------------------+--------------------+------------------------+\n\
    \    |     Data Set     |          /         |     Data Record(s)     |\n    +------------------+--------------------+------------------------+\n\
    \    |   Template Set   | Template Record(s) |           /            |\n    +------------------+--------------------+------------------------+\n\
    \    | Options Template |  Options Template  |           /            |\n    |\
    \       Set        |      Record(s)     |                        |\n    +------------------+--------------------+------------------------+\n\
    \                    Figure A: Terminology Summary Table\n   A Data Set is composed\
    \ of Data Record(s).  No Template Record is\n   included.  A Template Record or\
    \ an Options Template Record defines\n   the Data Record.\n   A Template Set contains\
    \ only Template Record(s).\n   An Options Template Set contains only Options Template\
    \ Record(s).\n"
- title: 3.  IPFIX Message Format
  contents:
  - "3.  IPFIX Message Format\n   An IPFIX Message consists of a Message Header, followed\
    \ by zero or\n   more Sets.  The Sets can be any of these three possible types:\n\
    \   Data Set, Template Set, or Options Template Set.\n   The format of the IPFIX\
    \ Message is shown in Figure B.\n         +----------------------------------------------------+\n\
    \         | Message Header                                     |\n         +----------------------------------------------------+\n\
    \         | Set                                                |\n         +----------------------------------------------------+\n\
    \         | Set                                                |\n         +----------------------------------------------------+\n\
    \           ...\n         +----------------------------------------------------+\n\
    \         | Set                                                |\n         +----------------------------------------------------+\n\
    \                      Figure B: IPFIX Message Format\n   Following are some examples\
    \ of IPFIX Messages:\n   1. An IPFIX Message consisting of interleaved Template,\
    \ Data, and\n      Options Template Sets, as shown in Figure C.  Here, Template\
    \ and\n      Options Template Sets are transmitted \"on demand\", before the\n\
    \      first Data Set whose structure they define.\n     +--------+--------------------------------------------------------+\n\
    \     |        | +----------+ +---------+     +-----------+ +---------+ |\n  \
    \   |Message | | Template | | Data    |     | Options   | | Data    | |\n    \
    \ | Header | | Set      | | Set     | ... | Template  | | Set     | |\n     |\
    \        | |          | |         |     | Set       | |         | |\n     |  \
    \      | +----------+ +---------+     +-----------+ +---------+ |\n     +--------+--------------------------------------------------------+\n\
    \                     Figure C: IPFIX Message: Example 1\n   2. An IPFIX Message\
    \ consisting entirely of Data Sets, sent after the\n      appropriate Template\
    \ Records have been defined and transmitted to\n      the Collecting Process,\
    \ as shown in Figure D.\n       +--------+----------------------------------------------+\n\
    \       |        | +---------+     +---------+      +---------+ |\n       |Message\
    \ | | Data    |     | Data    |      | Data    | |\n       | Header | | Set  \
    \   | ... | Set     | ...  | Set     | |\n       |        | +---------+     +---------+\
    \      +---------+ |\n       +--------+----------------------------------------------+\n\
    \                    Figure D: IPFIX Message: Example 2\n   3. An IPFIX Message\
    \ consisting entirely of Template and Options\n      Template Sets, as shown in\
    \ Figure E.  Such a message can be used\n      to define or redefine Templates\
    \ and Options Templates in bulk.\n      +--------+-------------------------------------------------+\n\
    \      |        | +----------+     +----------+      +----------+ |\n      |Message\
    \ | | Template |     | Template |      | Options  | |\n      | Header | | Set\
    \      | ... | Set      | ...  | Template | |\n      |        | |          | \
    \    |          |      | Set      | |\n      |        | +----------+     +----------+\
    \      +----------+ |\n      +--------+-------------------------------------------------+\n\
    \                    Figure E: IPFIX Message: Example 3\n"
- title: 3.1.  Message Header Format
  contents:
  - "3.1.  Message Header Format\n   The format of the IPFIX Message Header is shown\
    \ in Figure F.\n      0                   1                   2              \
    \     3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ |       Version Number          |            Length             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                           Export Time                         |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                     Sequence Number                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                    Observation Domain ID                      |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \           Figure F: IPFIX Message Header Format\n   Each Message Header field\
    \ is exported in network byte order.  The\n   fields are defined as follows:\n\
    \   Version\n      Version of IPFIX to which this Message conforms.  The value\
    \ of\n      this field is 0x000a for the current version, incrementing by one\n\
    \      the version used in the NetFlow services export version 9\n      [RFC3954].\n\
    \   Length\n      Total length of the IPFIX Message, measured in octets, including\n\
    \      Message Header and Set(s).\n   Export Time\n      Time at which the IPFIX\
    \ Message Header leaves the Exporter,\n      expressed in seconds since the UNIX\
    \ epoch of 1 January 1970 at\n      00:00 UTC, encoded as an unsigned 32-bit integer.\n\
    \   Sequence Number\n      Incremental sequence counter modulo 2^32 of all IPFIX\
    \ Data Records\n      sent in the current stream from the current Observation\
    \ Domain by\n      the Exporting Process.  Each SCTP Stream counts sequence numbers\n\
    \      separately, while all messages in a TCP connection or UDP session\n   \
    \   are considered to be part of the same stream.  This value can be\n      used\
    \ by the Collecting Process to identify whether any IPFIX Data\n      Records\
    \ have been missed.  Template and Options Template Records\n      do not increase\
    \ the Sequence Number.\n   Observation Domain ID\n      A 32-bit identifier of\
    \ the Observation Domain that is locally\n      unique to the Exporting Process.\
    \  The Exporting Process uses the\n      Observation Domain ID to uniquely identify\
    \ to the Collecting\n      Process the Observation Domain that metered the Flows.\
    \  It is\n      RECOMMENDED that this identifier also be unique per IPFIX Device.\n\
    \      Collecting Processes SHOULD use the Transport Session and the\n      Observation\
    \ Domain ID field to separate different export streams\n      originating from\
    \ the same Exporter.  The Observation Domain ID\n      SHOULD be 0 when no specific\
    \ Observation Domain ID is relevant for\n      the entire IPFIX Message, for example,\
    \ when exporting the\n      Exporting Process Statistics, or in the case of a\
    \ hierarchy of\n      Collectors when aggregated Data Records are exported.\n"
- title: 3.2.  Field Specifier Format
  contents:
  - "3.2.  Field Specifier Format\n   Vendors need the ability to define proprietary\
    \ Information Elements,\n   because, for example, they are delivering a pre-standards\
    \ product, or\n   the Information Element is in some way commercially sensitive.\
    \  This\n   section describes the Field Specifier format for both IANA-registered\n\
    \   Information Elements [IANA-IPFIX] and enterprise-specific Information\n  \
    \ Elements.\n   The Information Elements are identified by the Information Element\n\
    \   identifier.  When the Enterprise bit is set to 0, the corresponding\n   Information\
    \ Element appears in [IANA-IPFIX], and the Enterprise\n   Number MUST NOT be present.\
    \  When the Enterprise bit is set to 1, the\n   corresponding Information Element\
    \ identifier identified an\n   enterprise-specific Information Element; the Enterprise\
    \ Number MUST\n   be present.  An example of this is shown in Appendix A.2.2.\n\
    \   The Field Specifier format is shown in Figure G.\n     0                 \
    \  1                   2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |E|  Information Element ident. |        Field Length           |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                    Enterprise Number                        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure G: Field Specifier Format\n   Where:\n   E\n    \
    \  Enterprise bit.  This is the first bit of the Field Specifier.  If\n      this\
    \ bit is zero, the Information Element identifier identifies an\n      Information\
    \ Element in [IANA-IPFIX], and the four-octet Enterprise\n      Number field MUST\
    \ NOT be present.  If this bit is one, the\n      Information Element identifier\
    \ identifies an enterprise-specific\n      Information Element, and the Enterprise\
    \ Number field MUST be\n      present.\n   Information Element identifier\n  \
    \    A numeric value that represents the Information Element.  Refer to\n    \
    \  [IANA-IPFIX].\n   Field Length\n      The length of the corresponding encoded\
    \ Information Element, in\n      octets.  Refer to [IANA-IPFIX].  The Field Length\
    \ may be smaller\n      than that listed in [IANA-IPFIX] if the reduced-size encoding\
    \ is\n      used (see Section 6.2).  The value 65535 is reserved for variable-\n\
    \      length Information Elements (see Section 7).\n   Enterprise Number\n  \
    \    IANA enterprise number [IANA-PEN] of the authority defining the\n      Information\
    \ Element identifier in this Template Record.\n"
- title: 3.3.  Set and Set Header Format
  contents:
  - "3.3.  Set and Set Header Format\n   A Set is a generic term for a collection\
    \ of records that have a\n   similar structure.  There are three different types\
    \ of Sets: Template\n   Sets, Options Template Sets, and Data Sets.  Each of these\
    \ Sets\n   consists of a Set Header and one or more records.  The Set Format and\n\
    \   the Set Header Format are defined in the following sections.\n"
- title: 3.3.1.  Set Format
  contents:
  - "3.3.1.  Set Format\n   A Set has the format shown in Figure H.  The record types\
    \ can be\n   either Template Records, Options Template Records, or Data Records.\n\
    \   The record types MUST NOT be mixed within a Set.\n           +--------------------------------------------------+\n\
    \           | Set Header                                       |\n           +--------------------------------------------------+\n\
    \           | record                                           |\n           +--------------------------------------------------+\n\
    \           | record                                           |\n           +--------------------------------------------------+\n\
    \            ...\n           +--------------------------------------------------+\n\
    \           | record                                           |\n           +--------------------------------------------------+\n\
    \           | Padding (opt.)                                   |\n           +--------------------------------------------------+\n\
    \                           Figure H: Set Format\n   Set Header\n      The Set\
    \ Header Format is defined in Section 3.3.2.\n   Record\n      One of the record\
    \ formats: Template Record, Options Template\n      Record, or Data Record format.\n\
    \   Padding\n      The Exporting Process MAY insert some padding octets, so that\
    \ the\n      subsequent Set starts at an aligned boundary.  For security\n   \
    \   reasons, the padding octet(s) MUST be composed of octets with\n      value\
    \ zero (0).  The padding length MUST be shorter than any\n      allowable record\
    \ in this Set.  If padding of the IPFIX Message is\n      desired in combination\
    \ with very short records, then the padding\n      Information Element 'paddingOctets'\
    \ can be used for padding\n      records such that their length is increased to\
    \ a multiple of 4 or\n      8 octets.  Because Template Sets are always 4-octet\
    \ aligned by\n      definition, padding is only needed in the case of other\n\
    \      alignments, e.g., on 8-octet boundaries.\n"
- title: 3.3.2.  Set Header Format
  contents:
  - "3.3.2.  Set Header Format\n   Every Set contains a common header.  This header\
    \ is defined in\n   Figure I.\n      0                   1                   2\
    \                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |          Set ID               |          Length               |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \                Figure I: Set Header Format\n   Each Set Header field is exported\
    \ in network format.  The fields are\n   defined as follows:\n   Set ID\n    \
    \  Identifies the Set.  A value of 2 is reserved for Template Sets.\n      A value\
    \ of 3 is reserved for Options Template Sets.  Values from 4\n      to 255 are\
    \ reserved for future use.  Values 256 and above are used\n      for Data Sets.\
    \  The Set ID values of 0 and 1 are not used, for\n      historical reasons [RFC3954].\n\
    \   Length\n      Total length of the Set, in octets, including the Set Header,\
    \ all\n      records, and the optional padding.  Because an individual Set MAY\n\
    \      contain multiple records, the Length value MUST be used to\n      determine\
    \ the position of the next Set.\n"
- title: 3.4.  Record Format
  contents:
  - "3.4.  Record Format\n   IPFIX defines three record formats, as defined in the\
    \ next sections:\n   the Template Record format, the Options Template Record format,\
    \ and\n   the Data Record format.\n"
- title: 3.4.1.  Template Record Format
  contents:
  - "3.4.1.  Template Record Format\n   One of the essential elements in the IPFIX\
    \ record format is the\n   Template Record.  Templates greatly enhance the flexibility\
    \ of the\n   record format because they allow the Collecting Process to process\n\
    \   IPFIX Messages without necessarily knowing the interpretation of all\n   Data\
    \ Records.  A Template Record contains any combination of IANA-\n   assigned and/or\
    \ enterprise-specific Information Element identifiers.\n   The format of the Template\
    \ Record is shown in Figure J.  It consists\n   of a Template Record Header and\
    \ one or more Field Specifiers.  Field\n   Specifiers are defined in Figure G\
    \ above.\n           +--------------------------------------------------+\n  \
    \         | Template Record Header                           |\n           +--------------------------------------------------+\n\
    \           | Field Specifier                                  |\n           +--------------------------------------------------+\n\
    \           | Field Specifier                                  |\n           +--------------------------------------------------+\n\
    \            ...\n           +--------------------------------------------------+\n\
    \           | Field Specifier                                  |\n           +--------------------------------------------------+\n\
    \                     Figure J: Template Record Format\n   The format of the Template\
    \ Record Header is shown in Figure K.\n     0                   1            \
    \       2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |      Template ID (> 255)      |         Field Count           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure K: Template Record Header Format\n   The Template Record\
    \ Header Field definitions are as follows:\n   Template ID\n      Each Template\
    \ Record is given a unique Template ID in the range\n      256 to 65535.  This\
    \ uniqueness is local to the Transport Session\n      and Observation Domain that\
    \ generated the Template ID.  Since\n      Template IDs are used as Set IDs in\
    \ the Sets they describe (see\n      Section 3.4.3), values 0-255 are reserved\
    \ for special Set types\n      (e.g., Template Sets themselves), and Templates\
    \ and Options\n      Templates (see Section 3.4.2) cannot share Template IDs within\
    \ a\n      Transport Session and Observation Domain.  There are no\n      constraints\
    \ regarding the order of the Template ID allocation.  As\n      Exporting Processes\
    \ are free to allocate Template IDs as they see\n      fit, Collecting Processes\
    \ MUST NOT assume incremental Template\n      IDs, or anything about the contents\
    \ of a Template based on its\n      Template ID alone.\n   Field Count\n     \
    \ Number of fields in this Template Record.\n   The example in Figure L shows\
    \ a Template Set with mixed IANA-assigned\n   and enterprise-specific Information\
    \ Elements.  It consists of a Set\n   Header, a Template Header, and several Field\
    \ Specifiers.\n      0                   1                   2               \
    \    3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ |          Set ID = 2           |          Length               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |      Template ID = 256        |         Field Count = N       |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |1|\
    \ Information Element id. 1.1 |        Field Length 1.1       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                    Enterprise Number  1.1                     |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |0|\
    \ Information Element id. 1.2 |        Field Length 1.2       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |             ...               |              ...              |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |1|\
    \ Information Element id. 1.N |        Field Length 1.N       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                    Enterprise Number  1.N                     |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \    Template ID = 257        |         Field Count = M       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |0| Information Element id. 2.1 |        Field Length 2.1       |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |1|\
    \ Information Element id. 2.2 |        Field Length 2.2       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                    Enterprise Number  2.2                     |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \           ...               |              ...              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |1| Information Element id. 2.M |        Field Length 2.M       |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                  Enterprise Number  2.M                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                          Padding (opt)                        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \              Figure L: Template Set Example\n   Information Element id.s 1.2\
    \ and 2.1 appear in [IANA-IPFIX]\n   (Enterprise bit = 0) and therefore do not\
    \ need an Enterprise Number\n   to identify them.\n"
- title: 3.4.2.  Options Template Record Format
  contents:
  - "3.4.2.  Options Template Record Format\n   Thanks to the notion of scope, The\
    \ Options Template Record gives the\n   Exporter the ability to provide additional\
    \ information to the\n   Collector that would not be possible with Flow Records\
    \ alone.\n   See Section 4 for specific Options Templates used for reporting\n\
    \   metadata about IPFIX Exporting and Metering Processes.\n"
- title: 3.4.2.1.  Scope
  contents:
  - "3.4.2.1.  Scope\n   The scope, which is only available in the Options Template\
    \ Set, gives\n   the context of the reported Information Elements in the Data\
    \ Records.\n   The scope is one or more Information Elements, specified in the\n\
    \   Options Template Record.  At a minimum, Collecting Processes SHOULD\n   support\
    \ as scope the observationDomainId, exportingProcessId,\n   meteringProcessId,\
    \ templateId, lineCardId, exporterIPv4Address,\n   exporterIPv6Address, and ingressInterface\
    \ Information Elements.  The\n   IPFIX protocol doesn't prevent the use of any\
    \ Information Elements\n   for scope.  However, some Information Element types\
    \ don't make sense\n   if specified as scope (for example, the counter Information\n\
    \   Elements).\n   The IPFIX Message Header already contains the Observation Domain\
    \ ID.\n   If not zero, this Observation Domain ID can be considered as an\n  \
    \ implicit scope for the Data Records in the IPFIX Message.\n   Multiple Scope\
    \ Fields MAY be present in the Options Template Record,\n   in which case the\
    \ composite scope is the combination of the scopes.\n   For example, if the two\
    \ scopes are meteringProcessId and templateId,\n   the combined scope is this\
    \ Template for this Metering Process.  If a\n   different order of Scope Fields\
    \ would result in a Record having a\n   different semantic meaning, then the order\
    \ of Scope Fields MUST be\n   preserved by the Exporting Process.  For example,\
    \ in the context of\n   PSAMP [RFC5476], if the first scope defines the filtering\
    \ function,\n   while the second scope defines the sampling function, the order\
    \ of\n   the scope is important.  Applying the sampling function first,\n   followed\
    \ by the filtering function, would lead to potentially\n   different Data Records\
    \ than applying the filtering function first,\n   followed by the sampling function.\n"
- title: 3.4.2.2.  Options Template Record Format
  contents:
  - "3.4.2.2.  Options Template Record Format\n   An Options Template Record contains\
    \ any combination of IANA-assigned\n   and/or enterprise-specific Information\
    \ Element identifiers.\n   The format of the Options Template Record is shown\
    \ in Figure M.  It\n   consists of an Options Template Record Header and one or\
    \ more Field\n   Specifiers.  Field Specifiers are defined in Figure G above.\n\
    \           +--------------------------------------------------+\n           |\
    \ Options Template Record Header                   |\n           +--------------------------------------------------+\n\
    \           | Field Specifier                                  |\n           +--------------------------------------------------+\n\
    \           | Field Specifier                                  |\n           +--------------------------------------------------+\n\
    \            ...\n           +--------------------------------------------------+\n\
    \           | Field Specifier                                  |\n           +--------------------------------------------------+\n\
    \                 Figure M: Options Template Record Format\n   The format of the\
    \ Options Template Record Header is shown in\n   Figure N.\n      0          \
    \         1                   2                   3\n      0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |         Template ID (> 255)   |         Field Count           |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \    Scope Field Count        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \          Figure N: Options Template Record Header Format\n   The Options Template\
    \ Record Header Field definitions are as follows:\n   Template ID\n      Each\
    \ Options Template Record is given a unique Template ID in the\n      range 256\
    \ to 65535.  This uniqueness is local to the Transport\n      Session and Observation\
    \ Domain that generated the Template ID.\n      Since Template IDs are used as\
    \ Set IDs in the sets they describe\n      (see Section 3.4.3), values 0-255 are\
    \ reserved for special Set\n      types (e.g., Template Sets themselves), and\
    \ Templates and Options\n      Templates cannot share Template IDs within a Transport\
    \ Session and\n      Observation Domain.  There are no constraints regarding the\
    \ order\n      of the Template ID allocation.  As Exporting Processes are free\
    \ to\n      allocate Template IDs as they see fit, Collecting Processes MUST\n\
    \      NOT assume incremental Template IDs, or anything about the\n      contents\
    \ of an Options Template based on its Template ID alone.\n   Field Count\n   \
    \   Number of all fields in this Options Template Record, including\n      the\
    \ Scope Fields.\n   Scope Field Count\n      Number of scope fields in this Options\
    \ Template Record.  The Scope\n      Fields are normal Fields, except that they\
    \ are interpreted as\n      scope at the Collector.  A scope field count of N\
    \ specifies that\n      the first N Field Specifiers in the Template Record are\
    \ Scope\n      Fields.  The Scope Field Count MUST NOT be zero.\n   The example\
    \ in Figure O shows an Options Template Set with mixed\n   IANA-assigned and enterprise-specific\
    \ Information Elements.  It\n   consists of a Set Header, an Options Template\
    \ Header, and several\n   Field Specifiers.\n      0                   1     \
    \              2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |          Set ID = 3           |          Length               |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \       Template ID = 258     |         Field Count = N + M   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Scope Field Count = N     |0|  Scope 1 Infor. Element id. |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \   Scope 1 Field Length      |0|  Scope 2 Infor. Element id. |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Scope 2 Field Length      |             ...               |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \          ...                |1|  Scope N Infor. Element id. |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Scope N Field Length      |   Scope N Enterprise Number  ...\n   \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    ...\
    \  Scope N Enterprise Number   |1| Option 1 Infor. Element id. |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    Option 1 Field Length      |  Option 1 Enterprise Number  ...\n   \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    ...\
    \ Option 1 Enterprise Number   |              ...              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |             ...               |0| Option M Infor. Element id. |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \   Option M Field Length     |      Padding (optional)       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure O: Options Template Set Example\n"
- title: 3.4.3.  Data Record Format
  contents:
  - "3.4.3.  Data Record Format\n   The Data Records are sent in Data Sets.  The format\
    \ of the Data\n   Record is shown in Figure P.  It consists only of one or more\
    \ Field\n   Values.  The Template ID to which the Field Values belong is encoded\n\
    \   in the Set Header field \"Set ID\", i.e., \"Set ID\" = \"Template ID\".\n\
    \           +--------------------------------------------------+\n           |\
    \ Field Value                                      |\n           +--------------------------------------------------+\n\
    \           | Field Value                                      |\n           +--------------------------------------------------+\n\
    \            ...\n           +--------------------------------------------------+\n\
    \           | Field Value                                      |\n           +--------------------------------------------------+\n\
    \                       Figure P: Data Record Format\n   Note that Field Values\
    \ do not necessarily have a length of 16 bits.\n   Field Values are encoded according\
    \ to their data type as specified in\n   [RFC7012].\n   Interpretation of the\
    \ Data Record format can be done only if the\n   Template Record corresponding\
    \ to the Template ID is available at the\n   Collecting Process.\n   The example\
    \ in Figure Q shows a Data Set.  It consists of a Set\n   Header and several Field\
    \ Values.\n     0                   1                   2                   3\n\
    \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |   Set ID = Template ID        |          Length               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |   Record 1 - Field Value 1    |   Record 1 - Field Value 2    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |   Record 1 - Field Value 3    |             ...               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |   Record 2 - Field Value 1    |   Record 2 - Field Value 2    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |   Record 2 - Field Value 3    |             ...               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |   Record 3 - Field Value 1    |   Record 3 - Field Value 2    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |   Record 3 - Field Value 3    |             ...               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |              ...              |      Padding (optional)       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure Q: Data Set, Containing Data Records\n"
- title: 4.  Specific Reporting Requirements
  contents:
  - "4.  Specific Reporting Requirements\n   Some specific Options Templates and Options\
    \ Template Records are\n   necessary to provide extra information about the Flow\
    \ Records and\n   about the Metering Process.\n   The Options Template and Options\
    \ Template Records defined in these\n   subsections, which impose some constraints\
    \ on the Metering Process\n   and Exporting Process implementations, MAY be implemented.\
    \  If\n   implemented, the specific Options Templates SHOULD be implemented as\n\
    \   specified in these subsections.\n   The minimum set of Information Elements\
    \ is always specified in these\n   Specific IPFIX Options Templates.  Nevertheless,\
    \ extra Information\n   Elements may be used in these specific Options Templates.\n\
    \   The Collecting Process MUST check the possible combinations of\n   Information\
    \ Elements within the Options Template Records to correctly\n   interpret the\
    \ following Options Templates.\n"
- title: 4.1.  The Metering Process Statistics Options Template
  contents:
  - "4.1.  The Metering Process Statistics Options Template\n   The Metering Process\
    \ Statistics Options Template specifies the\n   structure of a Data Record for\
    \ reporting Metering Process statistics.\n   It SHOULD contain the following Information\
    \ Elements, as defined in\n   [IANA-IPFIX]:\n      (scope) observationDomainId\n\
    \         This Information Element MUST be defined as a Scope Field and\n    \
    \     MUST be present, unless the Observation Domain ID of the\n         enclosing\
    \ Message is non-zero.\n      (scope) meteringProcessId\n         If present,\
    \ this Information Element MUST be defined as a Scope\n         Field.\n     \
    \ exportedMessageTotalCount\n      exportedFlowRecordTotalCount\n      exportedOctetTotalCount\n\
    \   The Exporting Process SHOULD export the Data Record specified by the\n   Metering\
    \ Process Statistics Options Template on a regular basis or\n   based on some\
    \ export policy.  This periodicity or export policy\n   SHOULD be configurable.\n\
    \   Note that if several Metering Processes are available on the Exporter\n  \
    \ Observation Domain, the Information Element meteringProcessId MUST be\n   specified\
    \ as an additional Scope Field.\n"
- title: 4.2.  The Metering Process Reliability Statistics Options Template
  contents:
  - "4.2.  The Metering Process Reliability Statistics Options Template\n   The Metering\
    \ Process Reliability Statistics Options Template\n   specifies the structure\
    \ of a Data Record for reporting lack of\n   reliability in the Metering Process.\
    \  It SHOULD contain the following\n   Information Elements, as defined in [IANA-IPFIX]:\n\
    \      (scope) observationDomainId\n         This Information Element MUST be\
    \ defined as a Scope Field and\n         MUST be present, unless the Observation\
    \ Domain ID of the\n         enclosing Message is non-zero.\n      (scope) meteringProcessId\n\
    \         If present, this Information Element MUST be defined as a Scope\n  \
    \       Field.\n      ignoredPacketTotalCount\n      ignoredOctetTotalCount\n\
    \      time first packet ignored\n         The timestamp of the first packet that\
    \ was ignored by the\n         Metering Process.  For this timestamp, any of the\
    \ following\n         timestamp Information Elements can be used:\n          \
    \  observationTimeSeconds,\n            observationTimeMilliseconds,\n       \
    \     observationTimeMicroseconds, or\n            observationTimeNanoseconds.\n\
    \      time last packet ignored\n         The timestamp of the last packet that\
    \ was ignored by the\n         Metering Process.  For this timestamp, any of the\
    \ following\n         timestamp Information Elements can be used:\n          \
    \  observationTimeSeconds,\n            observationTimeMilliseconds,\n       \
    \     observationTimeMicroseconds, or\n            observationTimeNanoseconds.\n\
    \   The Exporting Process SHOULD export the Data Record specified by the\n   Metering\
    \ Process Reliability Statistics Options Template on a regular\n   basis or based\
    \ on some export policy.  This periodicity or export\n   policy SHOULD be configurable.\n\
    \   Note that if several Metering Processes are available on the Exporter\n  \
    \ Observation Domain, the Information Element meteringProcessId MUST be\n   specified\
    \ as an additional Scope Field.\n   Since the Metering Process Reliability Statistics\
    \ Options Template\n   contains two identical timestamp Information Elements,\
    \ and since the\n   order of the Information Elements in the Template Records\
    \ is not\n   guaranteed, the Collecting Process interprets the time interval of\n\
    \   ignored packets as the range between the two values; see Section 5.2\n   for\
    \ wraparound considerations.\n"
- title: 4.3.  The Exporting Process Reliability Statistics Options Template
  contents:
  - "4.3.  The Exporting Process Reliability Statistics Options Template\n   The Exporting\
    \ Process Reliability Statistics Options Template\n   specifies the structure\
    \ of a Data Record for reporting lack of\n   reliability in the Exporting Process.\
    \  It SHOULD contain the\n   following Information Elements, as defined in [IANA-IPFIX]:\n\
    \      (scope) Exporting Process Identifier\n         The identifier of the Exporting\
    \ Process for which reliability\n         is reported.  Any of the exporterIPv4Address,\n\
    \         exporterIPv6Address, or exportingProcessId Information Elements\n  \
    \       can be used for this field.  This Information Element MUST be\n      \
    \   defined as a Scope Field.\n      notSentFlowTotalCount\n      notSentPacketTotalCount\n\
    \      notSentOctetTotalCount\n      time first flow dropped\n         The time\
    \ at which the first Flow Record was dropped by the\n         Exporting Process.\
    \  For this timestamp, any of the following\n         timestamp Information Elements\
    \ can be used:\n            observationTimeSeconds,\n            observationTimeMilliseconds,\n\
    \            observationTimeMicroseconds, or\n            observationTimeNanoseconds.\n\
    \      time last flow dropped\n         The time at which the last Flow Record\
    \ was dropped by the\n         Exporting Process.  For this timestamp, any of\
    \ the following\n         timestamp Information Elements can be used:\n      \
    \      observationTimeSeconds,\n            observationTimeMilliseconds,\n   \
    \         observationTimeMicroseconds, or\n            observationTimeNanoseconds.\n\
    \   The Exporting Process SHOULD export the Data Record specified by the\n   Exporting\
    \ Process Reliability Statistics Options Template on a\n   regular basis or based\
    \ on some export policy.  This periodicity or\n   export policy SHOULD be configurable.\n\
    \   Since the Exporting Process Reliability Statistics Options Template\n   contains\
    \ two identical timestamp Information Elements, and since the\n   order of the\
    \ Information Elements in the Template Records is not\n   guaranteed, the Collecting\
    \ Process interprets the time interval of\n   dropped packets as the range between\
    \ the two values; see Section 5.2\n   for wraparound considerations.\n"
- title: 4.4.  The Flow Keys Options Template
  contents:
  - "4.4.  The Flow Keys Options Template\n   The Flow Keys Options Template specifies\
    \ the structure of a Data\n   Record for reporting the Flow Keys of reported Flows.\
    \  A Flow Keys\n   Data Record extends a particular Template Record that is referenced\n\
    \   by its templateId.  The Template Record is extended by specifying\n   which\
    \ of the Information Elements contained in the corresponding Data\n   Records\
    \ describe Flow properties that serve as Flow Keys of the\n   reported Flow.\n\
    \   The Flow Keys Options Template SHOULD contain the following\n   Information\
    \ Elements, as defined in [IANA-IPFIX]:\n      (scope) templateId\n         This\
    \ Information Element MUST be defined as a Scope Field.\n      flowKeyIndicator\n"
- title: 5.  Timing Considerations
  contents:
  - '5.  Timing Considerations

    '
- title: 5.1.  IPFIX Message Header Export Time and Flow Record Time
  contents:
  - "5.1.  IPFIX Message Header Export Time and Flow Record Time\n   The IPFIX Message\
    \ Header Export Time field is the time at which the\n   IPFIX Message Header leaves\
    \ the Exporter, using the same encoding as\n   the dateTimeSeconds abstract data\
    \ type [RFC7012], i.e., expressed in\n   seconds since the UNIX epoch, 1 January\
    \ 1970 at 00:00 UTC, encoded as\n   an unsigned 32-bit integer.\n   Certain time-related\
    \ Information Elements may be expressed as an\n   offset from this Export Time.\
    \  For example, Data Records requiring a\n   microsecond precision can export\
    \ the flow start and end times with\n   the flowStartMicroseconds and flowEndMicroseconds\
    \ Information\n   Elements, which encode the absolute time in microseconds in\
    \ terms of\n   the NTP epoch, 1 January 1900 at 00:00 UTC, in a 64-bit field.\
    \  An\n   alternate solution is to export the flowStartDeltaMicroseconds and\n\
    \   flowEndDeltaMicroseconds Information Elements in the Data Record,\n   which\
    \ respectively report the flow start and end time as negative\n   offsets from\
    \ the Export Time, as an unsigned 32-bit integer.  This\n   latter solution lowers\
    \ the export bandwidth requirement, saving\n   four bytes per timestamp, while\
    \ increasing the load on the Exporter,\n   as the Exporting Process must calculate\
    \ the\n   flowStartDeltaMicroseconds and flowEndDeltaMicroseconds of every\n \
    \  single Data Record before exporting the IPFIX Message.\n   It must be noted\
    \ that timestamps based on the Export Time impose some\n   time constraints on\
    \ the Data Records contained within the IPFIX\n   Message.  In the example of\
    \ flowStartDeltaMicroseconds and\n   flowEndDeltaMicroseconds Information Elements,\
    \ the Data Record can\n   only contain records with timestamps within 71 minutes\
    \ of the Export\n   Time.  Otherwise, the 32-bit counter would not be sufficient\
    \ to\n   contain the flow start time offset.\n"
- title: 5.2.  Supporting Timestamp Wraparound
  contents:
  - "5.2.  Supporting Timestamp Wraparound\n   The dateTimeSeconds abstract data type\
    \ [RFC7012] and the Export Time\n   Message Header field (Section 3.1) are encoded\
    \ as 32-bit unsigned\n   integers, expressed as seconds since the UNIX epoch,\
    \ 1 January 1970\n   at 00:00 UTC, as defined in [POSIX.1].  These values will\
    \ wrap around\n   on 7 February 2106 at 06:28:16 UTC.\n   In order to support\
    \ continued use of the IPFIX protocol beyond this\n   date, Exporting Processes\
    \ SHOULD export dateTimeSeconds values and\n   the Export Time Message Header\
    \ field as the number of seconds since\n   the UNIX epoch, 1 January 1970 at 00:00\
    \ UTC, modulo 2^32.  Collecting\n   Processes SHOULD use the current date, or\
    \ other contextual\n   information, to properly interpret dateTimeSeconds values\
    \ and the\n   Export Time Message Header field.\n   There are similar considerations\
    \ for the NTP-based\n   dateTimeMicroseconds and dateTimeNanoseconds abstract\
    \ data types\n   [RFC7012].  Exporting Processes SHOULD export dateTimeMicroseconds\n\
    \   and dateTimeNanoseconds values as if the NTP era [RFC5905] is\n   implicit;\
    \ Collecting Processes SHOULD use the current date, or other\n   contextual information,\
    \ to determine the NTP era in order to properly\n   interpret dateTimeMicroseconds\
    \ and dateTimeNanoseconds values in\n   received Data Records.\n   The dateTimeMilliseconds\
    \ abstract data type will wrap around in\n   approximately 500 billion years;\
    \ the specification of the behavior of\n   this abstract data type after that\
    \ time is left as a subject of a\n   future revision of this specification.\n\
    \   The long-term storage of files [RFC5655] for archival purposes is\n   affected\
    \ by timestamp wraparound, as the use of the current date to\n   interpret timestamp\
    \ values in files stored on the order of multiple\n   decades in the past may\
    \ lead to incorrect values; therefore, it is\n   RECOMMENDED that such files be\
    \ stored with contextual information to\n   assist in the interpretation of these\
    \ timestamps.\n"
- title: 6.  Linkage with the Information Model
  contents:
  - "6.  Linkage with the Information Model\n   As with values in the IPFIX Message\
    \ Header and Set Header, values of\n   all Information Elements [RFC7012], except\
    \ for those of the string\n   and octetArray data types, are encoded in canonical\
    \ format in network\n   byte order (also known as big-endian byte ordering).\n"
- title: 6.1.  Encoding of IPFIX Data Types
  contents:
  - "6.1.  Encoding of IPFIX Data Types\n   The following sections define the encoding\
    \ of the data types\n   specified in [RFC7012].\n"
- title: 6.1.1.  Integral Data Types
  contents:
  - "6.1.1.  Integral Data Types\n   Integral data types -- unsigned8, unsigned16,\
    \ unsigned32, unsigned64,\n   signed8, signed16, signed32, and signed64 -- MUST\
    \ be encoded using\n   the default canonical format in network byte order.  Signed\
    \ integral\n   data types are represented in two's complement notation.\n"
- title: 6.1.2.  Address Types
  contents:
  - "6.1.2.  Address Types\n   Address types -- macAddress, ipv4Address, and ipv6Address\
    \ -- MUST be\n   encoded the same way as the integral data types, as six, four,\
    \ and\n   sixteen octets in network byte order, respectively.\n"
- title: 6.1.3.  float32
  contents:
  - "6.1.3.  float32\n   The float32 data type MUST be encoded as an IEEE binary32\
    \ floating\n   point type as specified in [IEEE.754.2008], in network byte order\
    \ as\n   specified in Section 3.6 of [RFC1014].  Note that on little-endian\n\
    \   machines, byte swapping of the native representation is necessary\n   before\
    \ export.  Note that the method for doing this may be\n   implementation platform\
    \ dependent.\n"
- title: 6.1.4.  float64
  contents:
  - "6.1.4.  float64\n   The float64 data type MUST be encoded as an IEEE binary64\
    \ floating\n   point type as specified in [IEEE.754.2008], in network byte order\
    \ as\n   specified in Section 3.7 of [RFC1014].  Note that on little-endian\n\
    \   machines, byte swapping of the native representation is necessary\n   before\
    \ export.  Note that the method for doing this may be\n   implementation platform\
    \ dependent.\n"
- title: 6.1.5.  boolean
  contents:
  - "6.1.5.  boolean\n   The boolean data type is specified according to the TruthValue\
    \ in\n   [RFC2579].  It is encoded as a single-octet integer per\n   Section 6.1.1,\
    \ with the value 1 for true and value 2 for false.\n   Every other value is undefined.\n"
- title: 6.1.6.  string and octetArray
  contents:
  - "6.1.6.  string and octetArray\n   The \"string\" data type represents a finite-length\
    \ string of valid\n   characters of the Unicode character encoding set.  The string\
    \ data\n   type MUST be encoded in UTF-8 [RFC3629] format.  The string is sent\n\
    \   as an array of zero or more octets using an Information Element of\n   fixed\
    \ or variable length.  IPFIX Exporting Processes MUST NOT send\n   IPFIX Messages\
    \ containing ill-formed UTF-8 string values for\n   Information Elements of the\
    \ string data type; Collecting Processes\n   SHOULD detect and ignore such values.\
    \  See [UTF8-EXPLOIT] for\n   background on this issue.\n   The octetArray data\
    \ type has no encoding rules; it represents a raw\n   array of zero or more octets,\
    \ with the interpretation of the octets\n   defined in the Information Element\
    \ definition.\n"
- title: 6.1.7.  dateTimeSeconds
  contents:
  - "6.1.7.  dateTimeSeconds\n   The dateTimeSeconds data type is an unsigned 32-bit\
    \ integer in\n   network byte order containing the number of seconds since the\
    \ UNIX\n   epoch, 1 January 1970 at 00:00 UTC, as defined in [POSIX.1].\n   dateTimeSeconds\
    \ is encoded identically to the IPFIX Message Header\n   Export Time field.  It\
    \ can represent dates between 1 January 1970 and\n   7 February 2106 without wraparound;\
    \ see Section 5.2 for wraparound\n   considerations.\n"
- title: 6.1.8.  dateTimeMilliseconds
  contents:
  - "6.1.8.  dateTimeMilliseconds\n   The dateTimeMilliseconds data type is an unsigned\
    \ 64-bit integer in\n   network byte order containing the number of milliseconds\
    \ since the\n   UNIX epoch, 1 January 1970 at 00:00 UTC, as defined in [POSIX.1].\
    \  It\n   can represent dates beginning on 1 January 1970 and for approximately\n\
    \   the next 500 billion years without wraparound.\n"
- title: 6.1.9.  dateTimeMicroseconds
  contents:
  - "6.1.9.  dateTimeMicroseconds\n   The dateTimeMicroseconds data type is a 64-bit\
    \ field encoded\n   according to the NTP Timestamp format as defined in Section\
    \ 6 of\n   [RFC5905].  This field is made up of two unsigned 32-bit integers in\n\
    \   network byte order: Seconds and Fraction.  The Seconds field is the\n   number\
    \ of seconds since the NTP epoch, 1 January 1900 at 00:00 UTC.\n   The Fraction\
    \ field is the fractional number of seconds in units of\n   1/(2^32) seconds (approximately\
    \ 233 picoseconds).  It can represent\n   dates between 1 January 1900 and 8 February\
    \ 2036 in the current\n   NTP era; see Section 5.2 for wraparound considerations.\n\
    \   Note that dateTimeMicroseconds and dateTimeNanoseconds share an\n   identical\
    \ encoding.  The dateTimeMicroseconds data type is intended\n   only to represent\
    \ timestamps of microsecond precision.  Therefore,\n   the bottom 11 bits of the\
    \ Fraction field SHOULD be zero and MUST\n   be ignored for all Information Elements\
    \ of this data type\n   (as 2^11 x 233 picoseconds = .477 microseconds).\n"
- title: 6.1.10.  dateTimeNanoseconds
  contents:
  - "6.1.10.  dateTimeNanoseconds\n   The dateTimeNanoseconds data type is a 64-bit\
    \ field encoded according\n   to the NTP Timestamp format as defined in Section\
    \ 6 of [RFC5905].\n   This field is made up of two unsigned 32-bit integers in\
    \ network byte\n   order: Seconds and Fraction.  The Seconds field is the number\
    \ of\n   seconds since the NTP epoch, 1 January 1900 at 00:00 UTC.  The\n   Fraction\
    \ field is the fractional number of seconds in units of\n   1/(2^32) seconds (approximately\
    \ 233 picoseconds).  It can represent\n   dates between 1 January 1900 and 8 February\
    \ 2036 in the current\n   NTP era; see Section 5.2 for wraparound considerations.\n\
    \   Note that dateTimeMicroseconds and dateTimeNanoseconds share an\n   identical\
    \ encoding.  There is no restriction on the interpretation of\n   the Fraction\
    \ field for the dateTimeNanoseconds data type.\n"
- title: 6.2.  Reduced-Size Encoding
  contents:
  - "6.2.  Reduced-Size Encoding\n   Information Elements encoded as signed, unsigned,\
    \ or float data types\n   MAY be encoded using fewer octets than those implied\
    \ by their type in\n   the information model definition, based on the assumption\
    \ that the\n   smaller size is sufficient to carry any value the Exporter may\
    \ need\n   to deliver.  This reduces the network bandwidth requirement between\n\
    \   the Exporter and the Collector.  Note that the Information Element\n   definitions\
    \ [IANA-IPFIX] always define the maximum encoding size.\n   For instance, the\
    \ information model defines octetDeltaCount as an\n   unsigned64 type, which would\
    \ require 64 bits.  However, if the\n   Exporter will never locally encounter\
    \ the need to send a value larger\n   than 4294967295, it may choose to send the\
    \ value as unsigned32\n   instead.\n   This behavior is indicated by the Exporter\
    \ by specifying a size in\n   the Template with a smaller length than that associated\
    \ with the\n   assigned type of the Information Element.  In the example above,\
    \ the\n   Exporter would place a length of 4 versus 8 in the Template.\n   Reduced-size\
    \ encoding MAY be applied to the following integer types:\n   unsigned64, signed64,\
    \ unsigned32, signed32, unsigned16, and signed16.\n   The signed versus unsigned\
    \ property of the reported value MUST be\n   preserved.  The reduction in size\
    \ can be to any number of octets\n   smaller than the original type if the data\
    \ value still fits, i.e., so\n   that only leading zeroes are dropped.  For example,\
    \ an unsigned64 can\n   be reduced in size to 7, 6, 5, 4, 3, 2, or 1 octet(s).\n\
    \   Reduced-size encoding MAY be used to reduce float64 to float32.  The\n   float32\
    \ not only has a reduced number range but, due to the smaller\n   mantissa, is\
    \ also less precise.  In this case, the float64 would be\n   reduced in size to\
    \ 4 octets.\n   Reduced-size encoding MUST NOT be applied to any other data type\n\
    \   defined in [RFC7012] that implies a fixed length, as these types\n   either\
    \ have internal structure (such as ipv4Address or\n   dateTimeMicroseconds) or\
    \ restricted ranges that are not suitable for\n   reduced-size encoding (such\
    \ as dateTimeMilliseconds).\n   Information Elements of type octetArray and string\
    \ may be exported\n   using any length, subject to restrictions on length specific\
    \ to each\n   Information Element, as noted in that Information Element's\n  \
    \ description.\n"
- title: 7.  Variable-Length Information Element
  contents:
  - "7.  Variable-Length Information Element\n   The IPFIX Template mechanism is optimized\
    \ for fixed-length\n   Information Elements [RFC7012].  Where an Information Element\
    \ has a\n   variable length, the following mechanism MUST be used to carry the\n\
    \   length information for both the IANA-assigned and enterprise-specific\n  \
    \ Information Elements.\n   In the Template Set, the Information Element Field\
    \ Length is recorded\n   as 65535.  This reserved length value notifies the Collecting\
    \ Process\n   that the length value of the Information Element will be carried\
    \ in\n   the Information Element content itself.\n   In most cases, the length\
    \ of the Information Element will be less\n   than 255 octets.  The following\
    \ length-encoding mechanism optimizes\n   the overhead of carrying the Information\
    \ Element length in this more\n   common case.  The length is carried in the octet\
    \ before the\n   Information Element, as shown in Figure R.\n      0         \
    \          1                   2                   3\n      0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Length (< 255)|          Information Element                  |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                    ... continuing as needed                 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Figure R: Variable-Length Information Element (IE)\n            \
    \               (Length < 255 Octets)\n   The length may also be encoded into\
    \ 3 octets before the Information\n   Element, allowing the length of the Information\
    \ Element to be greater\n   than or equal to 255 octets.  In this case, the first\
    \ octet of the\n   Length field MUST be 255, and the length is carried in the\
    \ second and\n   third octets, as shown in Figure S.\n     0                 \
    \  1                   2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |      255      |      Length (0 to 65535)      |       IE      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                      ... continuing as needed                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Figure S: Variable-Length Information Element (IE)\n            \
    \            (Length 0 to 65535 Octets)\n   The octets carrying the length (either\
    \ the first or the first\n   three octets) MUST NOT be included in the length\
    \ of the Information\n   Element.\n"
- title: 8.  Template Management
  contents:
  - "8.  Template Management\n   This section describes the management of Templates\
    \ and Options\n   Templates at the Exporting and Collecting Processes.  The goal\
    \ of\n   Template management is to ensure, to the extent possible, that the\n\
    \   Exporting Process and Collecting Process have a consistent view of\n   the\
    \ Templates and Options Templates used to encode and decode the\n   Records sent\
    \ from the Exporting Process to the Collecting Process.\n   Achieving this goal\
    \ is complicated somewhat by two factors: 1) the\n   need to support the reuse\
    \ of Template IDs within a Transport Session\n   and 2) the need to support unreliable\
    \ transmission for Templates when\n   UDP is used as the transport protocol for\
    \ IPFIX Messages.\n   The Template Management mechanisms defined in this section\
    \ apply to\n   the export of IPFIX Messages on SCTP, TCP, or UDP.  Additional\n\
    \   considerations specific to SCTP and UDP transport are given in\n   Sections\
    \ 8.3 and 8.4, respectively.\n   The Exporting Process assigns and maintains Template\
    \ IDs per\n   Transport Session and Observation Domain.  A newly created Template\n\
    \   Record is assigned an unused Template ID by the Exporting Process.\n   The\
    \ Collecting Process MUST store all received Template Record\n   information for\
    \ the duration of each Transport Session until reuse or\n   withdrawal as described\
    \ in Section 8.1, or expiry over UDP as\n   described in Section 8.4, so that\
    \ it can interpret the corresponding\n   Data Records.\n   The Collecting Process\
    \ MUST NOT assume that the Template IDs from a\n   given Exporting Process refer\
    \ to the same Templates as they did in\n   previous Transport Sessions from the\
    \ same Exporting Process; a\n   Collecting Process MUST NOT use Templates from\
    \ one Transport Session\n   to decode Data Sets in a subsequent Transport Session.\n\
    \   If a specific Information Element is required by a Template but is\n   not\
    \ present in observed packets, the Exporting Process MAY choose to\n   export\
    \ Flow Records without this Information Element in a Data Record\n   described\
    \ by a new Template.\n   If an Information Element is required more than once\
    \ in a Template,\n   the different occurrences of this Information Element SHOULD\
    \ follow\n   the logical order of their treatments by the Metering Process.  For\n\
    \   example, if a selected packet goes through two hash functions, and if\n  \
    \ the two hash values are sent within a single Template, the first\n   occurrence\
    \ of the hash value should belong to the first hash function\n   in the Metering\
    \ Process.  For example, when exporting the two source\n   IP addresses of an\
    \ IPv4-in-IPv4 packet, the first sourceIPv4Address\n   Information Element occurrence\
    \ should be the IPv4 address of the\n   outer header, while the second occurrence\
    \ should be the address of\n   the inner header.  Collecting Processes MUST properly\
    \ handle\n   Templates with multiple identical Information Elements.\n   The Exporting\
    \ Process SHOULD transmit the Template Set and Options\n   Template Set in advance\
    \ of any Data Sets that use that (Options)\n   Template ID, to help ensure that\
    \ the Collector has the Template\n   Record before receiving the first Data Record.\
    \  Data Records that\n   correspond to a Template Record MAY appear in the same\
    \ and/or\n   subsequent IPFIX Message(s).  However, a Collecting Process MUST\
    \ NOT\n   assume that the Data Set and the associated Template Set (or Options\n\
    \   Template Set) are exported in the same IPFIX Message.\n   Though a Collecting\
    \ Process normally receives Template Records from\n   the Exporting Process before\
    \ receiving Data Records, this is not\n   always the case, e.g., in the case of\
    \ reordering or Collecting\n   Process restart over UDP.  In these cases, the\
    \ Collecting Process MAY\n   buffer Data Records for which it has no Templates,\
    \ to wait for\n   Template Records describing them; however, note that in the\
    \ presence\n   of Template withdrawal and redefinition (Section 8.1) this may\
    \ lead\n   to incorrect interpretation of Data Records.\n   Different Observation\
    \ Domains within a Transport Session MAY use the\n   same Template ID value to\
    \ refer to different Templates; Collecting\n   Processes MUST properly handle\
    \ this case.\n   Options Templates and Templates that are related or interdependent\n\
    \   (e.g., by sharing common properties as described in [RFC5473]) SHOULD\n  \
    \ be sent together in the same IPFIX Message.\n"
- title: 8.1.  Template Withdrawal and Redefinition
  contents:
  - "8.1.  Template Withdrawal and Redefinition\n   Templates that will not be used\
    \ further by an Exporting Process MAY\n   be withdrawn by sending a Template Withdrawal.\
    \  After receiving a\n   Template Withdrawal, a Collecting Process MUST stop using\
    \ the\n   Template to interpret subsequently exported Data Sets.  Note that\n\
    \   this mechanism does not apply when UDP is used to transport IPFIX\n   Messages;\
    \ for that case, see Section 8.4.\n   A Template Withdrawal consists of a Template\
    \ Record for the Template\n   ID to be withdrawn, with a Field Count of 0.  The\
    \ format of a\n   Template Withdrawal is shown in Figure T.\n     0          \
    \         1                   2                   3\n     0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |       Set ID = (2 or 3)       |          Length = 16          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |          Template ID N        |        Field Count = 0        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |          Template ID ...      |        Field Count = 0        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |          Template ID M        |        Field Count = 0        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                   Figure T: Template Withdrawal Format\n   The Set ID field\
    \ MUST contain the value 2 for Template Set Withdrawal\n   or the value 3 for\
    \ Options Template Set Withdrawal.  Multiple\n   Template IDs MAY be withdrawn\
    \ with a single Template Withdrawal; in\n   that case, padding MAY be used.\n\
    \   Template Withdrawals MAY appear interleaved with Template Sets,\n   Options\
    \ Template Sets, and Data Sets within an IPFIX Message.  In\n   this case, the\
    \ Templates and Template Withdrawals shall be\n   interpreted as taking effect\
    \ in the order in which they appear in the\n   IPFIX Message.  An Exporting Process\
    \ SHOULD NOT send a Template\n   Withdrawal until sufficient time has elapsed\
    \ to allow receipt and\n   processing of any Data Records described by the withdrawn\
    \ Templates;\n   see Section 8.2 for details regarding the sequencing of Template\n\
    \   management actions.\n   The end of a Transport Session implicitly withdraws\
    \ all the Templates\n   used within the Transport Session, and Templates must\
    \ be resent\n   during subsequent Transport Sessions between an Exporting Process\
    \ and\n   Collecting Process.  This applies to SCTP and TCP only; see\n   Sections\
    \ 8.4 and 10.3.4 for discussions of Transport Session and\n   Template lifetime\
    \ over UDP.\n   All Templates for a given Observation Domain MAY also be withdrawn\n\
    \   using an All Templates Withdrawal, as shown in Figure U.  All Options\n  \
    \ Templates for a given Observation Domain MAY likewise be withdrawn\n   using\
    \ an All Options Templates Withdrawal, as shown in Figure V.\n      0        \
    \           1                   2                   3\n      0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |             Set ID = 2        |          Length = 8           |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \       Template ID = 2       |        Field Count = 0        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure U: All Templates Withdrawal Set Format\n      0       \
    \            1                   2                   3\n      0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |             Set ID = 3        |          Length = 8           |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \       Template ID = 3       |        Field Count = 0        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           Figure V: All Options Templates Withdrawal Set Format\n   Template\
    \ IDs MAY be reused for new Templates by sending a new\n   Template Record or\
    \ Options Template Record for a given Template ID\n   after withdrawing the Template.\n\
    \   If a Collecting Process receives a Template Withdrawal for a Template\n  \
    \ or Options Template it does not presently have stored, this indicates\n   a\
    \ malfunctioning or improperly implemented Exporting Process.  The\n   continued\
    \ receipt and interpretation of Data Records are still\n   possible, but the Collecting\
    \ Process MUST ignore the Template\n   Withdrawal and SHOULD log the error.\n\
    \   If a Collecting Process receives a new Template Record or Options\n   Template\
    \ Record for an already-allocated Template ID, and that\n   Template or Options\
    \ Template is identical to the already-received\n   Template or Options Template,\
    \ it SHOULD log the retransmission;\n   however, this is not an error condition,\
    \ as it does not affect the\n   interpretation of Data Records.\n   If a Collecting\
    \ Process receives a new Template Record or Options\n   Template Record for an\
    \ already-allocated Template ID, and that\n   Template or Options Template is\
    \ different from the already-received\n   Template or Options Template, this indicates\
    \ a malfunctioning or\n   improperly implemented Exporting Process.  The continued\
    \ receipt and\n   unambiguous interpretation of Data Records for this Template\
    \ ID are\n   no longer possible, and the Collecting Process SHOULD log the error.\n\
    \   Further Collecting Process actions are out of scope for this\n   specification.\n"
- title: 8.2.  Sequencing Template Management Actions
  contents:
  - "8.2.  Sequencing Template Management Actions\n   Since there is no guarantee\
    \ of the ordering of exported IPFIX\n   Messages across SCTP Streams or over UDP,\
    \ an Exporting Process MUST\n   sequence all Template management actions (i.e.,\
    \ Template Records\n   defining new Templates and Template Withdrawals withdrawing\
    \ them)\n   using the Export Time field in the IPFIX Message Header.\n   An Exporting\
    \ Process MUST NOT export a Data Set described by a new\n   Template in an IPFIX\
    \ Message with an Export Time before the Export\n   Time of the IPFIX Message\
    \ containing that Template.  If a new\n   Template and a Data Set described by\
    \ it appear in the same IPFIX\n   Message, the Template Set containing the Template\
    \ MUST appear before\n   the Data Set in the Message.\n   An Exporting Process\
    \ MUST NOT export any Data Sets described by a\n   withdrawn Template in IPFIX\
    \ Messages with an Export Time after the\n   Export Time of the IPFIX Message\
    \ containing the Template Withdrawal\n   withdrawing that Template.\n   Put another\
    \ way, a Template describes Data Records contained in IPFIX\n   Messages when\
    \ the Export Time of such messages is between a specific\n   start and end time,\
    \ inclusive.  The start time is the Export Time of\n   the IPFIX Message containing\
    \ the Template Record.  The end time is\n   one of two times: if the template\
    \ is withdrawn during the session,\n   then it is the Export Time of the IPFIX\
    \ Message containing the\n   Template Withdrawal for the template; otherwise,\
    \ it is the end of the\n   Transport Session.\n   Even if sent in order, IPFIX\
    \ Messages containing Template management\n   actions could arrive at the Collecting\
    \ Process out of order, i.e., if\n   sent via UDP or via different SCTP Streams.\
    \  Given this, Template\n   Withdrawals and subsequent reuse of Template IDs can\
    \ significantly\n   complicate the problem of determining Template lifetimes at\
    \ the\n   Collecting Process.  A Collecting Process MAY implement a buffer and\n\
    \   use Export Time information to disambiguate the order of Template\n   management\
    \ actions.  This buffer, if implemented, SHOULD be\n   configurable to impart\
    \ a delay on the order of the maximum reordering\n   delay experienced at the\
    \ Collecting Process.  Note, in this case,\n   that the Collecting Process's clock\
    \ is irrelevant: it is only\n   comparing the Export Times of Messages to each\
    \ other.\n"
- title: 8.3.  Additional Considerations for Template Management over SCTP
  contents:
  - "8.3.  Additional Considerations for Template Management over SCTP\n   The specifications\
    \ in this section apply only to SCTP; in cases of\n   contradiction with specifications\
    \ in Section 8 or Section 8.1, this\n   section takes precedence.\n   Template\
    \ Sets and Options Template Sets MAY be sent on any SCTP\n   Stream.  Data Sets\
    \ sent on a given SCTP Stream MAY be represented by\n   Template Records exported\
    \ on any SCTP Stream.\n   Template Sets and Options Template Sets MUST be sent\
    \ reliably, using\n   SCTP ordered delivery.\n   Template Withdrawals MAY be sent\
    \ on any SCTP Stream.  Template\n   Withdrawals MUST be sent reliably, using SCTP\
    \ ordered delivery.\n   Template IDs MAY be reused by sending a Template Withdrawal\
    \ and/or a\n   new Template Record on a different SCTP Stream than the stream\
    \ on\n   which the original Template was sent.\n   Additional Template Management\
    \ considerations are provided in\n   [RFC6526], which specifies an extension to\
    \ explicitly link Templates\n   with SCTP Streams.  In exchange for more restrictive\
    \ rules on the\n   assignment of Template Records to SCTP Streams, this extension\
    \ allows\n   fast, reliable reuse of Template IDs and estimation of Data Record\n\
    \   loss per Template.\n"
- title: 8.4.  Additional Considerations for Template Management over UDP
  contents:
  - "8.4.  Additional Considerations for Template Management over UDP\n   The specifications\
    \ in this section apply only to UDP; in cases of\n   contradiction with specifications\
    \ in Section 8 or Section 8.1, this\n   section takes precedence.\n   Since UDP\
    \ provides no method for reliable transmission of Templates,\n   Exporting Processes\
    \ using UDP as the transport protocol MUST\n   periodically retransmit each active\
    \ Template at regular intervals.\n   The Template retransmission interval MUST\
    \ be configurable via, for\n   example, the templateRefreshTimeout and optionsTemplateRefreshTimeout\n\
    \   parameters as defined in [RFC6728].  Default settings for these\n   values\
    \ are deployment- and application-specific.\n   Before exporting any Data Records\
    \ described by a given Template\n   Record or Options Template Record, especially\
    \ in the case of Template\n   ID reuse as described in Section 8.1, the Exporting\
    \ Process SHOULD\n   send multiple copies of the Template Record in a separate\
    \ IPFIX\n   Message, in order to help ensure that the Collecting Process has\n\
    \   received it.\n   In order to minimize resource requirements for Templates\
    \ that are no\n   longer being used by the Exporting Process, the Collecting Process\n\
    \   MAY associate a lifetime with each Template received in a Transport\n   Session.\
    \  Templates not refreshed by the Exporting Process within the\n   lifetime can\
    \ then be discarded by the Collecting Process.  The\n   Template lifetime at the\
    \ Collecting Process MAY be exposed by a\n   configuration parameter or MAY be\
    \ derived from observation of the\n   interval of periodic Template retransmissions\
    \ from the Exporting\n   Process.  In this latter case, the Template lifetime\
    \ SHOULD default\n   to at least 3 times the observed retransmission rate.\n \
    \  Template Withdrawals (Section 8.1) MUST NOT be sent by Exporting\n   Processes\
    \ exporting via UDP and MUST be ignored by Collecting\n   Processes collecting\
    \ via UDP.  Template IDs MAY be reused by\n   Exporting Processes by exporting\
    \ a new Template for the Template ID\n   after waiting at least 3 times the retransmission\
    \ delay.  Note that\n   Template ID reuse may lead to incorrect interpretation\
    \ of Data\n   Records if the retransmission and lifetime are not properly\n  \
    \ configured.\n   When a Collecting Process receives a new Template Record or\
    \ Options\n   Template Record via UDP for an already-allocated Template ID, and\n\
    \   that Template or Options Template is identical to the already-\n   received\
    \ Template or Options Template, it SHOULD NOT log the\n   retransmission, as this\
    \ is the normal operation of Template refresh\n   over UDP.\n   When a Collecting\
    \ Process receives a new Template Record or Options\n   Template Record for an\
    \ already-allocated Template ID, and that\n   Template or Options Template is\
    \ different from the already-received\n   Template or Options Template, the Collecting\
    \ Process MUST replace the\n   Template or Options Template for that Template\
    \ ID with the newly\n   received Template or Options Template.  This is the normal\
    \ operation\n   of Template ID reuse over UDP.\n   As Template IDs are unique\
    \ per UDP session and per Observation\n   Domain, at any given time, the Collecting\
    \ Process SHOULD maintain the\n   following for all the current Template Records\
    \ and Options Template\n   Records: <IPFIX Device, Exporter source UDP port, Collector\
    \ IP\n   address, Collector destination UDP port, Observation Domain ID,\n   Template\
    \ ID, Template Definition, Last Received>.\n"
- title: 9.  The Collecting Process's Side
  contents:
  - "9.  The Collecting Process's Side\n   This section describes the handling of\
    \ the IPFIX protocol at the\n   Collecting Process common to all transport protocols.\
    \  Additional\n   considerations for SCTP and UDP are provided in Sections 9.2\
    \ and 9.3,\n   respectively.  Template management at Collecting Processes is covered\n\
    \   in Section 8.\n   The Collecting Process MUST listen for association requests\
    \ /\n   connections to start new Transport Sessions from the Exporting\n   Process.\n\
    \   The Collecting Process MUST note the Information Element identifier\n   of\
    \ any Information Element that it does not understand and MAY\n   discard that\
    \ Information Element from received Data Records.\n   The Collecting Process MUST\
    \ accept padding in Data Records and\n   Template Records.  The padding size is\
    \ the Set Length minus the size\n   of the Set Header (4 octets for the Set ID\
    \ and the Set Length),\n   modulo the minimum Record size deduced from the Template\
    \ Record.\n   The IPFIX protocol has a Sequence Number field in the Export header\n\
    \   that increases with the number of IPFIX Data Records in the IPFIX\n   Message.\
    \  A Collector can detect out-of-sequence, dropped, or\n   duplicate IPFIX Messages\
    \ by tracking the Sequence Number.  A\n   Collector SHOULD provide a logging mechanism\
    \ for tracking out-of-\n   sequence IPFIX Messages.  Such out-of-sequence IPFIX\
    \ Messages may be\n   due to Exporter resource exhaustion where it cannot transmit\
    \ messages\n   at their creation rate, an Exporting Process reset, congestion\
    \ on the\n   network link between the Exporter and Collector, Collector resource\n\
    \   exhaustion where it cannot process the IPFIX Messages at their\n   arrival\
    \ rate, out-of-order packet reception, duplicate packet\n   reception, or an attacker\
    \ injecting false messages.\n"
- title: 9.1.  Collecting Process Handling of Malformed IPFIX Messages
  contents:
  - "9.1.  Collecting Process Handling of Malformed IPFIX Messages\n   If the Collecting\
    \ Process receives a malformed IPFIX Message, it MUST\n   discard the IPFIX Message\
    \ and SHOULD log the error.  A malformed\n   IPFIX Message is one that cannot\
    \ be interpreted due to nonsensical\n   length values (e.g., a variable-length\
    \ Information Element longer\n   than its enclosing Set, a Set longer than its\
    \ enclosing IPFIX\n   Message, or an IPFIX Message shorter than an IPFIX Message\
    \ Header) or\n   a reserved Version value (which may indicate that a future version\
    \ of\n   IPFIX is being used for export but in practice occurs most often when\n\
    \   non-IPFIX data is sent to an IPFIX Collecting Process).  Note that\n   non-zero\
    \ Set padding does not constitute a malformed IPFIX Message.\n   As the most likely\
    \ cause of malformed IPFIX Messages is a poorly\n   implemented Exporting Process,\
    \ or the sending of non-IPFIX data to an\n   IPFIX Collecting Process, human intervention\
    \ is likely necessary to\n   correct the issue.  In the meantime, the Collecting\
    \ Process MAY\n   attempt to rectify the situation any way it sees fit, including:\n\
    \   - terminating the TCP connection or SCTP connection\n   - using the receiver\
    \ window to reduce network load from the\n     malfunctioning Exporting Process\n\
    \   - buffering and saving malformed IPFIX Message(s) to assist in\n     diagnosis\n\
    \   - attempting to resynchronize the stream, e.g., as described in\n     Section\
    \ 10.3 of [RFC5655]\n   Resynchronization should only be attempted if the Collecting\
    \ Process\n   has reason to believe that the error is transient.  On the other\n\
    \   hand, the Collecting Process SHOULD stop processing IPFIX Messages\n   from\
    \ clearly malfunctioning Exporting Processes (e.g., those from\n   which the last\
    \ few IPFIX Messages have been malformed).\n"
- title: 9.2.  Additional Considerations for SCTP Collecting Processes
  contents:
  - "9.2.  Additional Considerations for SCTP Collecting Processes\n   As an Exporting\
    \ Process may request and support more than one stream\n   per SCTP association,\
    \ the Collecting Process MUST support the opening\n   of multiple SCTP Streams.\n"
- title: 9.3.  Additional Considerations for UDP Collecting Processes
  contents:
  - "9.3.  Additional Considerations for UDP Collecting Processes\n   A Transport\
    \ Session for IPFIX Messages transported over UDP is\n   defined from the point\
    \ of view of the Exporting Process and roughly\n   corresponds to the time during\
    \ which a given Exporting Process sends\n   IPFIX Messages over UDP to a given\
    \ Collecting Process.  Since this is\n   difficult to detect at the Collecting\
    \ Process, the Collecting Process\n   MAY discard all Transport Session state\
    \ after no IPFIX Messages are\n   received from a given Exporting Process within\
    \ a given Transport\n   Session during a configurable idle timeout.\n   The Collecting\
    \ Process SHOULD accept Data Records without the\n   associated Template Record\
    \ (or other definitions such as Common\n   Properties) required to decode the\
    \ Data Record.  If the Template\n   Records or other definitions have not been\
    \ received at the time Data\n   Records are received, the Collecting Process MAY\
    \ store the Data\n   Records for a short period of time and decode them after\
    \ the Template\n   Records or other definitions are received, comparing Export\
    \ Times of\n   IPFIX Messages containing the Template Records with those containing\n\
    \   the Data Records as discussed in Section 8.2.  Note that this\n   mechanism\
    \ may lead to incorrectly interpreted records in the presence\n   of Template\
    \ ID reuse or other identifiers with limited lifetimes.\n"
- title: 10.  Transport Protocol
  contents:
  - "10.  Transport Protocol\n   The IPFIX Protocol Specification has been designed\
    \ to be transport\n   protocol independent.  Note that the Exporter can export\
    \ to multiple\n   Collecting Processes using independent transport protocols.\n\
    \   The IPFIX Message Header 16-bit Length field limits the length of an\n   IPFIX\
    \ Message to 65535 octets, including the header.  A Collecting\n   Process MUST\
    \ be able to handle IPFIX Message lengths of up to\n   65535 octets.\n   While\
    \ an Exporting Process or Collecting Process may support multiple\n   transport\
    \ protocols, Transport Sessions are bound to a transport\n   protocol.  Transport\
    \ Session state MUST NOT be migrated by an\n   Exporting Process or Collecting\
    \ Process among Transport Sessions\n   using different transport protocols between\
    \ the same Exporting\n   Process and Collecting Process pair.  In other words,\
    \ an Exporting\n   Process supporting multiple transport protocols is conceptually\n\
    \   multiple Exporting Processes, one per supported transport protocol.\n   Likewise,\
    \ a Collecting Process supporting multiple transport\n   protocols is conceptually\
    \ multiple Collecting Processes, one per\n   supported transport protocol.\n"
- title: 10.1.  Transport Compliance and Transport Usage
  contents:
  - "10.1.  Transport Compliance and Transport Usage\n   SCTP [RFC4960] using the\
    \ Partially Reliable SCTP (PR-SCTP) extension\n   as specified in [RFC3758] MUST\
    \ be implemented by all compliant\n   implementations.  UDP [UDP] MAY also be\
    \ implemented by compliant\n   implementations.  TCP [TCP] MAY also be implemented\
    \ by compliant\n   implementations.\n   SCTP should be used in deployments where\
    \ Exporters and Collectors are\n   communicating over links that are susceptible\
    \ to congestion.  SCTP is\n   capable of providing any required degree of reliability\
    \ when used\n   with the PR-SCTP extension.\n   TCP may be used in deployments\
    \ where Exporters and Collectors\n   communicate over links that are susceptible\
    \ to congestion, but SCTP\n   is preferred, due to its ability to limit back pressure\
    \ on Exporters\n   and its message-versus-stream orientation.\n   UDP may be used,\
    \ although it is not a congestion-aware protocol.\n   However, in this case the\
    \ IPFIX traffic between the Exporter and\n   Collector must be separately contained\
    \ or provisioned to minimize the\n   risk of congestion-related loss.\n   By default,\
    \ the Collecting Process listens for connections on SCTP,\n   TCP, and/or UDP\
    \ port 4739.  By default, the Collecting Process\n   listens for secure connections\
    \ on SCTP, TCP, and/or UDP port 4740\n   (refer to the Security Considerations\
    \ section).  By default, the\n   Exporting Process attempts to connect to one\
    \ of these ports.  It MUST\n   be possible to configure both the Exporting and\
    \ Collecting Processes\n   to use different ports than the default.\n"
- title: 10.2.  SCTP
  contents:
  - "10.2.  SCTP\n   This section describes how IPFIX is transported over SCTP [RFC4960]\n\
    \   using the PR-SCTP [RFC3758] extension.\n"
- title: 10.2.1.  Congestion Avoidance
  contents:
  - "10.2.1.  Congestion Avoidance\n   SCTP provides the required level of congestion\
    \ avoidance by design.\n   SCTP detects congestion in the end-to-end path between\
    \ the IPFIX\n   Exporting Process and the IPFIX Collecting Process, and limits\
    \ the\n   transfer rate accordingly.  When an IPFIX Exporting Process has\n  \
    \ records to export but detects that transmission by SCTP is\n   temporarily impossible,\
    \ it can either wait until sending is possible\n   again or decide to drop the\
    \ record.  In the latter case, the dropped\n   export data SHOULD be accounted\
    \ for, so that the amount of dropped\n   export data can be reported using the\
    \ mechanism described in\n   Section 4.3.\n"
- title: 10.2.2.  Reliability
  contents:
  - "10.2.2.  Reliability\n   The SCTP transport protocol is by default reliable but\
    \ has the\n   capability to deliver messages with partial reliability [RFC3758].\n\
    \   Using reliable SCTP messages for IPFIX export is not in itself a\n   guarantee\
    \ that all Data Records will be delivered.  If there is\n   congestion on the\
    \ link from the Exporting Process to the Collecting\n   Process, or if a significant\
    \ number of retransmissions are required,\n   the send queues on the Exporting\
    \ Process may fill up; the Exporting\n   Process MAY either suspend, export, or\
    \ discard the IPFIX Messages.\n   If Data Records are discarded, the IPFIX Sequence\
    \ Numbers used for\n   export MUST reflect the loss of data.\n"
- title: 10.2.3.  MTU
  contents:
  - "10.2.3.  MTU\n   SCTP provides the required IPFIX Message fragmentation service\
    \ based\n   on Path MTU (PMTU) discovery.\n"
- title: 10.2.4.  Association Establishment and Shutdown
  contents:
  - "10.2.4.  Association Establishment and Shutdown\n   The IPFIX Exporting Process\
    \ initiates an SCTP association with the\n   IPFIX Collecting Process.  The Exporting\
    \ Process MAY establish more\n   than one association (connection \"bundle\" in\
    \ SCTP terminology) to the\n   Collecting Process.\n   An Exporting Process MAY\
    \ support more than one active association to\n   different Collecting Processes\
    \ (including the case of different\n   Collecting Processes on the same host).\n\
    \   When an Exporting Process is shut down, it SHOULD shut down the SCTP\n   association.\n\
    \   When a Collecting Process no longer wants to receive IPFIX Messages,\n   it\
    \ SHOULD shut down its end of the association.  The Collecting\n   Process SHOULD\
    \ continue to receive and process IPFIX Messages until\n   the Exporting Process\
    \ has closed its end of the association.\n   When a Collecting Process detects\
    \ that the SCTP association has been\n   abnormally terminated, it MUST continue\
    \ to listen for a new\n   association establishment.\n   When an Exporting Process\
    \ detects that the SCTP association to the\n   Collecting Process is abnormally\
    \ terminated, it SHOULD try to\n   re-establish the association.\n   Association\
    \ timeouts SHOULD be configurable.\n"
- title: 10.2.5.  Failover
  contents:
  - "10.2.5.  Failover\n   If the Collecting Process does not acknowledge an attempt\
    \ by the\n   Exporting Process to establish an association, SCTP will\n   automatically\
    \ retry association establishment using exponential\n   backoff.  The Exporter\
    \ MAY log an alarm if the underlying SCTP\n   association establishment times\
    \ out; this timeout should be\n   configurable on the Exporter.\n   The Exporting\
    \ Process MAY open a backup SCTP association to a\n   Collecting Process in advance,\
    \ if it supports Collecting Process\n   failover.\n"
- title: 10.2.6.  Streams
  contents:
  - "10.2.6.  Streams\n   An Exporting Process MAY request more than one SCTP Stream\
    \ per\n   association.  Each of these streams may be used for the transmission\n\
    \   of IPFIX Messages containing Data Sets, Template Sets, and/or Options\n  \
    \ Template Sets.\n   Depending on the requirements of the application, the Exporting\n\
    \   Process may send Data Sets with full or partial reliability, using\n   ordered\
    \ or out-of-order delivery, over any SCTP Stream established\n   during SCTP association\
    \ setup.\n   An IPFIX Exporting Process MAY use any PR-SCTP service definition\
    \ as\n   per Section 4 of the PR-SCTP specification [RFC3758] when using\n   partial\
    \ reliability to transmit IPFIX Messages containing only\n   Data Sets.\n   However,\
    \ Exporting Processes SHOULD mark such IPFIX Messages for\n   retransmission for\
    \ as long as resource or other constraints allow.\n"
- title: 10.3.  UDP
  contents:
  - "10.3.  UDP\n   This section describes how IPFIX is transported over UDP [UDP].\n"
- title: 10.3.1.  Congestion Avoidance
  contents:
  - "10.3.1.  Congestion Avoidance\n   UDP has no integral congestion-avoidance mechanism.\
    \  Its use over\n   congestion-sensitive network paths is therefore not recommended.\
    \  UDP\n   MAY be used in deployments where Exporters and Collectors always\n\
    \   communicate over dedicated links that are not susceptible to\n   congestion,\
    \ i.e., links that are over-provisioned compared to the\n   maximum export rate\
    \ from the Exporters.\n"
- title: 10.3.2.  Reliability
  contents:
  - "10.3.2.  Reliability\n   UDP is not a reliable transport protocol and cannot\
    \ guarantee\n   delivery of messages.  IPFIX Messages sent from the Exporting\
    \ Process\n   to the Collecting Process using UDP may therefore be lost.  UDP\
    \ MUST\n   NOT be used unless the application can tolerate some loss of IPFIX\n\
    \   Messages.\n   The Collecting Process SHOULD deduce the loss and reordering\
    \ of IPFIX\n   Data Records by looking at the discontinuities in the IPFIX Sequence\n\
    \   Number.  In the case of UDP, the IPFIX Sequence Number contains the\n   total\
    \ number of IPFIX Data Records sent for the Transport Session\n   prior to the\
    \ receipt of this IPFIX Message, modulo 2^32.  A Collector\n   SHOULD detect out-of-sequence,\
    \ dropped, or duplicate IPFIX Messages\n   by tracking the Sequence Number.\n\
    \   Exporting Processes exporting IPFIX Messages via UDP MUST include a\n   valid\
    \ UDP checksum [UDP] in UDP datagrams including IPFIX Messages.\n"
- title: 10.3.3.  MTU
  contents:
  - "10.3.3.  MTU\n   The maximum size of exported messages MUST be configured such\
    \ that\n   the total packet size does not exceed the PMTU.  If the PMTU is\n \
    \  unknown, a maximum packet size of 512 octets SHOULD be used.\n"
- title: 10.3.4.  Session Establishment and Shutdown
  contents:
  - "10.3.4.  Session Establishment and Shutdown\n   As UDP is a connectionless protocol,\
    \ there is no real session\n   establishment or shutdown for IPFIX over UDP. \
    \ An Exporting Process\n   starts sending IPFIX Messages to a Collecting Process\
    \ at one point in\n   time and stops sending them at another point in time.  This\
    \ can lead\n   to some complications in Template management, as outlined in\n\
    \   Section 8.4 above.\n"
- title: 10.3.5.  Failover and Session Duplication
  contents:
  - "10.3.5.  Failover and Session Duplication\n   Because UDP is not a connection-oriented\
    \ protocol, the Exporting\n   Process is unable to determine from the transport\
    \ protocol that the\n   Collecting Process is no longer able to receive the IPFIX\
    \ Messages.\n   Therefore, it cannot invoke a failover mechanism.  However, the\n\
    \   Exporting Process MAY duplicate the IPFIX Message to several\n   Collecting\
    \ Processes.\n"
- title: 10.4.  TCP
  contents:
  - "10.4.  TCP\n   This section describes how IPFIX is transported over TCP [TCP].\n"
- title: 10.4.1.  Congestion Avoidance
  contents:
  - "10.4.1.  Congestion Avoidance\n   TCP controls the rate at which data can be\
    \ sent from the Exporting\n   Process to the Collecting Process, using a mechanism\
    \ that takes into\n   account both congestion in the network and the capabilities\
    \ of the\n   receiver.\n   Therefore, an IPFIX Exporting Process may not be able\
    \ to send IPFIX\n   Messages at the rate that the Metering Process generates them,\
    \ either\n   because of congestion in the network or because the Collecting\n\
    \   Process cannot handle IPFIX Messages fast enough.  As long as\n   congestion\
    \ is transient, the Exporting Process can buffer IPFIX\n   Messages for transmission.\
    \  But such buffering is necessarily\n   limited, both because of resource limitations\
    \ and because of\n   timeliness requirements, so ongoing and/or severe congestion\
    \ may lead\n   to a situation where the Exporting Process is blocked.\n   When\
    \ an Exporting Process has Data Records to export but the\n   transmission buffer\
    \ is full, and it wants to avoid blocking, it can\n   decide to drop some Data\
    \ Records.  The dropped Data Records MUST be\n   accounted for, so that the number\
    \ of lost records can later be\n   reported as described in Section 4.3.\n"
- title: 10.4.2.  Reliability
  contents:
  - "10.4.2.  Reliability\n   TCP ensures reliable delivery of data from the Exporting\
    \ Process to\n   the Collecting Process.\n"
- title: 10.4.3.  MTU
  contents:
  - "10.4.3.  MTU\n   As TCP offers a stream service instead of a datagram or sequential\n\
    \   packet service, IPFIX Messages transported over TCP are instead\n   separated\
    \ using the Length field in the IPFIX Message Header.  The\n   Exporting Process\
    \ can choose any valid length for exported IPFIX\n   Messages, as TCP handles\
    \ segmentation.\n   Exporting Processes may choose IPFIX Message lengths lower\
    \ than the\n   maximum in order to ensure timely export of Data Records.\n"
- title: 10.4.4.  Connection Establishment and Shutdown
  contents:
  - "10.4.4.  Connection Establishment and Shutdown\n   The IPFIX Exporting Process\
    \ initiates a TCP connection to the\n   Collecting Process.  An Exporting Process\
    \ MAY support more than one\n   active connection to different Collecting Processes\
    \ (including the\n   case of different Collecting Processes on the same host).\
    \  An\n   Exporting Process MAY support more than one active connection to the\n\
    \   same Collecting Process to avoid head-of-line blocking across\n   Observation\
    \ Domains.\n   The Exporter MAY log an alarm if the underlying TCP connection\n\
    \   establishment times out; this timeout should be configurable on the\n   Exporter.\n\
    \   When an Exporting Process is shut down, it SHOULD shut down the TCP\n   connection.\n\
    \   When a Collecting Process no longer wants to receive IPFIX Messages,\n   it\
    \ SHOULD close its end of the connection.  The Collecting Process\n   SHOULD continue\
    \ to read IPFIX Messages until the Exporting Process\n   has closed its end.\n\
    \   When a Collecting Process detects that the TCP connection to the\n   Exporting\
    \ Process has terminated abnormally, it MUST continue to\n   listen for a new\
    \ connection.\n   When an Exporting Process detects that the TCP connection to\
    \ the\n   Collecting Process has terminated abnormally, it SHOULD try to\n   re-establish\
    \ the connection.  Connection timeouts and retry schedules\n   SHOULD be configurable.\
    \  In the default configuration, an Exporting\n   Process MUST NOT attempt to\
    \ establish a connection more frequently\n   than once per minute.\n"
- title: 10.4.5.  Failover
  contents:
  - "10.4.5.  Failover\n   If the Collecting Process does not acknowledge an attempt\
    \ by the\n   Exporting Process to establish a connection, TCP will automatically\n\
    \   retry connection establishment using exponential backoff.  The\n   Exporter\
    \ MAY log an alarm if the underlying TCP connection\n   establishment times out;\
    \ this timeout should be configurable on the\n   Exporter.\n   The Exporting Process\
    \ MAY open a backup TCP connection to a\n   Collecting Process in advance, if\
    \ it supports Collecting Process\n   failover.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   The security considerations for the IPFIX protocol\
    \ have been derived\n   from an analysis of potential security threats, as discussed\
    \ in the\n   Security Considerations section of the IPFIX requirements document\n\
    \   [RFC3917].  The requirements for IPFIX security are as follows:\n   1. IPFIX\
    \ must provide a mechanism to ensure the confidentiality of\n      IPFIX data\
    \ transferred from an Exporting Process to a Collecting\n      Process, in order\
    \ to prevent disclosure of Flow Records\n      transported via IPFIX.\n   2. IPFIX\
    \ must provide a mechanism to ensure the integrity of IPFIX\n      data transferred\
    \ from an Exporting Process to a Collecting\n      Process, in order to prevent\
    \ the injection of incorrect data or\n      control information (e.g., Templates),\
    \ or the duplication of\n      Messages, in an IPFIX Message stream.\n   3. IPFIX\
    \ must provide a mechanism to authenticate IPFIX Collecting\n      and Exporting\
    \ Processes, to prevent the collection of data from an\n      unauthorized Exporting\
    \ Process or the export of data to an\n      unauthorized Collecting Process.\n\
    \   Because IPFIX can be used to collect information for network\n   forensics\
    \ and billing purposes, attacks designed to confuse, disable,\n   or take information\
    \ from an IPFIX collection system may be seen as a\n   prime objective during\
    \ a sophisticated network attack.\n   An attacker in a position to inject false\
    \ messages into an IPFIX\n   Message stream can affect either the application\
    \ using IPFIX (by\n   falsifying data) or the IPFIX Collecting Process itself\
    \ (by modifying\n   or revoking Templates, or changing options); for this reason,\
    \ IPFIX\n   Message integrity is important.\n   The IPFIX Messages themselves\
    \ may also contain information of value\n   to an attacker, including information\
    \ about the configuration of the\n   network as well as end-user traffic and payload\
    \ data, so care must be\n   taken to confine their visibility to authorized users.\
    \  When an\n   Information Element containing end-user payload information is\n\
    \   exported, it SHOULD be transmitted to the Collecting Process using a\n   means\
    \ that secures its contents against eavesdropping.  Suitable\n   mechanisms include\
    \ the use of either a direct point-to-point\n   connection assumed to be unavailable\
    \ to attackers, or the use of an\n   encryption mechanism.  It is the responsibility\
    \ of the Collecting\n   Process to provide a satisfactory degree of security for\
    \ this\n   collected data, including, if necessary, encryption and/or\n   anonymization\
    \ of any reported data; see Section 11.8.\n"
- title: 11.1.  Applicability of TLS and DTLS
  contents:
  - "11.1.  Applicability of TLS and DTLS\n   Transport Layer Security (TLS) [RFC5246]\
    \ and Datagram Transport Layer\n   Security (DTLS) [RFC6347] were designed to\
    \ provide the\n   confidentiality, integrity, and authentication assurances required\
    \ by\n   the IPFIX protocol, without the need for pre-shared keys.\n   IPFIX Exporting\
    \ Processes and Collecting Processes using TCP MUST\n   support TLS version 1.1\
    \ and SHOULD support TLS version 1.2 [RFC5246],\n   including the mandatory ciphersuite(s)\
    \ specified in each version.\n   IPFIX Exporting Processes and Collecting Processes\
    \ using UDP or SCTP\n   MUST support DTLS version 1.0 and SHOULD support DTLS\
    \ version 1.2\n   [RFC6347], including the mandatory ciphersuite(s) specified\
    \ in each\n   version.\n   Note that DTLS is selected as the security mechanism\
    \ for SCTP.\n   Though TLS bindings to SCTP are defined in [RFC3436], they require\n\
    \   that all communication be over reliable, bidirectional streams, and\n   they\
    \ also require one TLS connection per stream.  This arrangement is\n   not compatible\
    \ with the rationale behind the choice of SCTP as an\n   IPFIX transport protocol.\n\
    \   Note that using DTLS has a man-in-the-middle vulnerability not\n   present\
    \ in TLS, allowing a message to be removed from the stream\n   without the knowledge\
    \ of either the sender or receiver.\n   Additionally, when using DTLS over SCTP,\
    \ an attacker could inject\n   SCTP control information and shut down the SCTP\
    \ association, causing\n   a loss of IPFIX Messages if those messages are buffered\
    \ outside of\n   the SCTP association.  Techniques such as those described in\n\
    \   [RFC6083] could be used to overcome these vulnerabilities.\n   When using\
    \ DTLS over SCTP, the Exporting Process MUST ensure that\n   each IPFIX Message\
    \ is sent over the same SCTP Stream that would be\n   used when sending the same\
    \ IPFIX Message directly over SCTP.  Note\n   that DTLS may send its own control\
    \ messages on stream 0 with full\n   reliability; however, this will not interfere\
    \ with the processing of\n   stream 0 IPFIX Messages at the Collecting Process,\
    \ because DTLS\n   consumes its own control messages before passing IPFIX Messages\
    \ up to\n   the application layer.\n   When using DTLS over SCTP or UDP, the Heartbeat\
    \ Extension [RFC6520]\n   SHOULD be used, especially on long-lived Transport Sessions,\
    \ to\n   ensure that the association remains active.\n   Exporting and Collecting\
    \ Processes MUST NOT request, offer, or use\n   any version of the Secure Socket\
    \ Layer (SSL), or any version of TLS\n   prior to 1.1, due to known security vulnerabilities\
    \ in prior versions\n   of TLS; see Appendix E of [RFC5246] for more information.\n"
- title: 11.2.  Usage
  contents:
  - "11.2.  Usage\n   The IPFIX Exporting Process initiates the communication to the\
    \ IPFIX\n   Collecting Process and acts as a TLS or DTLS client according to\n\
    \   [RFC5246] and [RFC6347], while the IPFIX Collecting Process acts as a\n  \
    \ TLS or DTLS server.  The DTLS client opens a secure connection on\n   SCTP port\
    \ 4740 of the DTLS server if SCTP is selected as the\n   transport protocol. \
    \ The TLS client opens a secure connection on TCP\n   port 4740 of the TLS server\
    \ if TCP is selected as the transport\n   protocol.  The DTLS client opens a secure\
    \ connection on UDP port 4740\n   of the DTLS server if UDP is selected as the\
    \ transport protocol.\n"
- title: 11.3.  Mutual Authentication
  contents:
  - "11.3.  Mutual Authentication\n   When using TLS or DTLS, IPFIX Exporting Processes\
    \ and IPFIX\n   Collecting Processes SHOULD be identified by a certificate containing\n\
    \   the DNS-ID as discussed in Section 6.4 of [RFC6125]; the inclusion of\n  \
    \ Common Names (CN-IDs) in certificates identifying IPFIX Exporting\n   Processes\
    \ or Collecting Processes is NOT RECOMMENDED.\n   To prevent man-in-the-middle\
    \ attacks from impostor Exporting or\n   Collecting Processes, the acceptance\
    \ of data from an unauthorized\n   Exporting Process, or the export of data to\
    \ an unauthorized\n   Collecting Process, mutual authentication MUST be used for\
    \ both TLS\n   and DTLS.  Exporting Processes MUST verify the reference identifiers\n\
    \   of the Collecting Processes to which they are exporting IPFIX\n   Messages\
    \ against those stored in the certificates.  Likewise,\n   Collecting Processes\
    \ MUST verify the reference identifiers of the\n   Exporting Processes from which\
    \ they are receiving IPFIX Messages\n   against those stored in the certificates.\
    \  Exporting Processes MUST\n   NOT export to non-verified Collecting Processes,\
    \ and Collecting\n   Processes MUST NOT accept IPFIX Messages from non-verified\
    \ Exporting\n   Processes.\n   Exporting Processes and Collecting Processes MUST\
    \ support the\n   verification of certificates against an explicitly authorized\
    \ list of\n   peer certificates identified by Common Name and SHOULD support the\n\
    \   verification of reference identifiers by matching the DNS-ID or CN-ID\n  \
    \ with a DNS lookup of the peer.\n   IPFIX Exporting Processes and Collecting\
    \ Processes MUST use non-NULL\n   ciphersuites for authentication, integrity,\
    \ and confidentiality.\n"
- title: 11.4.  Protection against DoS Attacks
  contents:
  - "11.4.  Protection against DoS Attacks\n   An attacker may mount a denial-of-service\
    \ (DoS) attack against an\n   IPFIX collection system either directly, by sending\
    \ large amounts of\n   traffic to a Collecting Process, or indirectly, by generating\
    \ large\n   amounts of traffic to be measured by a Metering Process.\n   Direct\
    \ DoS attacks can also involve state exhaustion, whether at the\n   transport\
    \ layer (e.g., by creating a large number of pending\n   connections) or within\
    \ the IPFIX Collecting Process itself (e.g., by\n   sending Flow Records pending\
    \ Template or scope information, or a\n   large amount of Options Template Records,\
    \ etc.).\n   SCTP mandates a cookie-exchange mechanism designed to defend against\n\
    \   SCTP state exhaustion DoS attacks.  Similarly, TCP provides the \"SYN\n  \
    \ cookie\" mechanism to mitigate state exhaustion; SYN cookies SHOULD be\n   used\
    \ by any Collecting Process accepting TCP connections.  DTLS also\n   provides\
    \ cookie exchange to protect against DTLS server state\n   exhaustion.\n   The\
    \ reader should note that there is no way to prevent fake IPFIX\n   Message processing\
    \ (and state creation) for UDP and SCTP\n   communication.  The use of TLS and\
    \ DTLS can obviously prevent the\n   creation of fake states, but they are themselves\
    \ prone to state\n   exhaustion attacks.  Therefore, Collector rate limiting SHOULD\
    \ be\n   used to protect TLS and DTLS (like limiting the number of new TLS or\n\
    \   DTLS sessions per second to a sensible number).\n   IPFIX state exhaustion\
    \ attacks can be mitigated by limiting the rate\n   at which new connections or\
    \ associations will be opened by the\n   Collecting Process; limiting the rate\
    \ at which IPFIX Messages will be\n   accepted by the Collecting Process; and\
    \ adaptively limiting the\n   amount of state kept, particularly for records waiting\
    \ for Templates.\n   These rate and state limits MAY be provided by a Collecting\
    \ Process,\n   and if provided, the limits SHOULD be user configurable.\n   Additionally,\
    \ an IPFIX Collecting Process can eliminate the risk of\n   state exhaustion attacks\
    \ from untrusted nodes by requiring TLS or\n   DTLS mutual authentication, causing\
    \ the Collecting Process to accept\n   IPFIX Messages only from trusted sources.\n\
    \   With respect to indirect denial of service, the behavior of IPFIX\n   under\
    \ overload conditions depends on the transport protocol in use.\n   For IPFIX\
    \ over TCP, TCP congestion control would cause the flow of\n   IPFIX Messages\
    \ to back off and eventually stall, blinding the IPFIX\n   system.  SCTP improves\
    \ upon this situation somewhat, as some IPFIX\n   Messages would continue to be\
    \ received by the Collecting Process due\n   to the avoidance of head-of-line\
    \ blocking by SCTP's multiple streams\n   and partial reliability features, possibly\
    \ affording some visibility\n   of the attack.  The situation is similar with\
    \ UDP, as some datagrams\n   may continue to be received at the Collecting Process,\
    \ effectively\n   applying sampling to the IPFIX Message stream and implying that\
    \ some\n   information about the attack will be available.\n   To minimize IPFIX\
    \ Message loss under overload conditions, some\n   mechanism for service differentiation\
    \ could be used to prioritize\n   IPFIX traffic over other traffic on the same\
    \ link.  Alternatively,\n   IPFIX Messages can be transported over a dedicated\
    \ network.  In this\n   case, care must be taken to ensure that the dedicated\
    \ network can\n   handle the expected peak IPFIX Message traffic.\n"
- title: 11.5.  When DTLS or TLS Is Not an Option
  contents:
  - "11.5.  When DTLS or TLS Is Not an Option\n   The use of DTLS or TLS might not\
    \ be possible in some cases, due to\n   performance issues or other operational\
    \ concerns.\n   Without TLS or DTLS mutual authentication, IPFIX Exporting Processes\n\
    \   and Collecting Processes can fall back on using IP source addresses\n   to\
    \ authenticate their peers.  A policy of allocating Exporting\n   Process and\
    \ Collecting Process IP addresses from specified address\n   ranges, and using\
    \ ingress filtering to prevent spoofing, can improve\n   the usefulness of this\
    \ approach.  Again, completely segregating IPFIX\n   traffic on a dedicated network,\
    \ where possible, can improve security\n   even further.  In any case, the use\
    \ of open Collecting Processes\n   (those that will accept IPFIX Messages from\
    \ any Exporting Process\n   regardless of IP address or identity) is discouraged.\n\
    \   Modern TCP and SCTP implementations are resistant to blind insertion\n   attacks\
    \ (see [RFC4960] and [RFC6528]); however, UDP offers no such\n   protection. \
    \ For this reason, IPFIX Message traffic transported via\n   UDP and not secured\
    \ via DTLS SHOULD be protected via segregation to a\n   dedicated network.\n"
- title: 11.6.  Logging an IPFIX Attack
  contents:
  - "11.6.  Logging an IPFIX Attack\n   IPFIX Collecting Processes MUST detect potential\
    \ IPFIX Message\n   insertion or loss conditions by tracking the IPFIX Sequence\
    \ Number\n   and SHOULD provide a logging mechanism for reporting out-of-sequence\n\
    \   messages.  Note that an attacker may be able to exploit the handling\n   of\
    \ out-of-sequence messages at the Collecting Process, so care should\n   be taken\
    \ in handling these conditions.  For example, a Collecting\n   Process that simply\
    \ resets the expected Sequence Number upon receipt\n   of a later Sequence Number\
    \ could be temporarily blinded by deliberate\n   injection of later Sequence Numbers.\n\
    \   IPFIX Exporting and Collecting Processes SHOULD log any connection\n   attempt\
    \ that fails due to authentication failure, whether due to\n   being presented\
    \ an unauthorized or mismatched certificate during TLS\n   or DTLS mutual authentication,\
    \ or due to a connection attempt from an\n   unauthorized IP address when TLS\
    \ or DTLS is not in use.\n   IPFIX Exporting and Collecting Processes SHOULD detect\
    \ and log any\n   SCTP association reset or TCP connection reset.\n"
- title: 11.7.  Securing the Collector
  contents:
  - "11.7.  Securing the Collector\n   The security of the Collector and its implementation\
    \ is important to\n   achieve overall security; however, a complete set of security\n\
    \   guidelines for Collector implementation is outside the scope of this\n   document.\n\
    \   As IPFIX uses length-prefix encodings, Collector implementors should\n   take\
    \ care to ensure the detection of inconsistent values that could\n   impact IPFIX\
    \ Message decoding, and proper operation in the presence\n   of such inconsistent\
    \ values.\n   Specifically, IPFIX Message, Set, and variable-length Information\n\
    \   Element lengths must be checked for consistency to avoid buffer-\n   sizing\
    \ vulnerabilities.\n   Collector implementors should also pay special attention\
    \ to UTF-8\n   encoding of string data types, as vulnerabilities may exist in\
    \ the\n   interpretation of ill-formed UTF-8 values; see Section 6.1.6.\n"
- title: 11.8.  Privacy Considerations for Collected Data
  contents:
  - "11.8.  Privacy Considerations for Collected Data\n   Flow data exported by Exporting\
    \ Processes and collected by Collecting\n   Processes typically contains information\
    \ about traffic on the\n   observed network.  This information may be personally\
    \ identifiable\n   and privacy-sensitive.  The storage of this data must be protected\n\
    \   via technical as well as policy means to ensure that the privacy of\n   the\
    \ users of the measured network is protected.  A complete\n   specification of\
    \ such means is out of scope for this document and is\n   specific to the application\
    \ and storage technology used.\n"
- title: 12.  Management Considerations
  contents:
  - "12.  Management Considerations\n   [RFC6615] specifies a MIB module that defines\
    \ managed objects for\n   monitoring IPFIX Devices, including basic configuration.\
    \  This MIB\n   can be used to measure the impact of IPFIX export on the monitoring\n\
    \   network; it contains tables covering:\n      Transport Session,\n      Cache\
    \ definition,\n      Observation Point definition,\n      Template and Options\
    \ Template definition,\n      export features (failover, load-balancing, duplicate),\
    \ and\n      export statistics per Process, Session, and Template\n   From an\
    \ operational aspect, an important function of this MIB module\n   is provided\
    \ by the Transport Session Statistical table, which\n   contains the rate (in\
    \ bytes per second) at which the Collector\n   receives or the Exporter sends\
    \ out IPFIX Messages.  Of particular\n   interest to operations, the Transport\
    \ Session Statistical table in\n   Section 5.8.1 of this MIB module exposes the\
    \ rate of collection or\n   export of IPFIX Messages, which allows the measurement\
    \ of the\n   bandwidth used by IPFIX export.\n   [RFC6727] describes extensions\
    \ to the IPFIX-SELECTOR-MIB module\n   specified in [RFC6615] and contains managed\
    \ objects for providing\n   information on applied packet selection functions\
    \ and their\n   parameters (filtering and sampling).\n   Since the IPFIX-SELECTOR-MIB\
    \ [RFC6615] and PSAMP-MIB [RFC6727]\n   modules only contain read-only objects,\
    \ they cannot be used for\n   configuration of IPFIX Devices.  [RFC6728] specifies\
    \ a configuration\n   data model for the IPFIX and PSAMP protocols, using the\
    \ Network\n   Configuration Protocol (NETCONF).  This data model covers Selection\n\
    \   Processes, Caches, Exporting Processes, and Collecting Processes on\n   IPFIX\
    \ and PSAMP Devices, and is defined using UML (Unified Modeling\n   Language)\
    \ class diagrams and formally specified using YANG.  The\n   configuration data\
    \ is encoded in Extensible Markup Language (XML).\n   A few mechanisms specified\
    \ alongside the IPFIX protocol can help\n   monitor and reduce bandwidth used\
    \ for IPFIX Export:\n   - a bandwidth-saving method for exporting redundant information\
    \ in\n     IPFIX [RFC5473]\n   - an efficient method for exporting bidirectional\
    \ flows [RFC5103]\n   - a method for the definition and export of complex data\
    \ structures\n     [RFC6313]\n   Alternatively, PSAMP [RFC5474] can be used to\
    \ export packets sampled\n   by statistical and other methods, which may be applicable\
    \ to many\n   monitoring areas for which IPFIX is also suited.  PSAMP also provides\n\
    \   control over the impact on the measured network through its sampling\n   rate.\
    \  The set of packet selection techniques (Sampling, Filtering,\n   and hashing)\
    \ standardized by PSAMP is described in [RFC5475].  PSAMP\n   also defines an\
    \ explicitly configurable export rate limit in\n   Section 8.4 of [RFC5474].\n"
- title: 13.  IANA Considerations
  contents:
  - "13.  IANA Considerations\n   IANA has updated the \"IPFIX Information Elements\"\
    \ registry\n   [IANA-IPFIX] so that all references that previously pointed to\n\
    \   RFC 5101 now point to this document instead.\n   IPFIX Messages use two fields\
    \ with assigned values.  These are the\n   IPFIX Version Number, indicating which\
    \ version of the IPFIX protocol\n   was used to export an IPFIX Message, and the\
    \ IPFIX Set ID, indicating\n   the type for each set of information within an\
    \ IPFIX Message.\n   The Information Elements used by IPFIX, and sub-registries\
    \ of\n   Information Element values, are managed by IANA [IANA-IPFIX], as are\n\
    \   the Private Enterprise Numbers used by enterprise-specific\n   Information\
    \ Elements [IANA-PEN].  This document makes no changes to\n   these registries.\n\
    \   The IPFIX Version Number value of 0x000a (10) is reserved for the\n   IPFIX\
    \ protocol specified in this document.  Set ID values of 0 and 1\n   are not used,\
    \ for historical reasons [RFC3954].  The Set ID value of\n   2 is reserved for\
    \ the Template Set.  The Set ID value of 3 is\n   reserved for the Options Template\
    \ Set.  All other Set ID values from\n   4 to 255 are reserved for future use.\
    \  Set ID values above 255 are\n   used for Data Sets.\n   New assignments in\
    \ either the \"IPFIX Version Number\" or \"IPFIX Set\n   IDs\" sub-registries\
    \ require a Standards Action [RFC5226], i.e., they\n   are to be made via Standards\
    \ Track RFCs approved by the IESG.\n"
- title: Appendix A.  IPFIX Encoding Examples
  contents:
  - "Appendix A.  IPFIX Encoding Examples\n   This appendix, which is a not a normative\
    \ reference, contains IPFIX\n   encoding examples.\n   Let's consider the example\
    \ of an IPFIX Message composed of a Template\n   Set, a Data Set (which contains\
    \ three Data Records), an Options\n   Template Set, and another Data Set (which\
    \ contains two Data Records\n   related to the previous Options Template Record).\n\
    \   IPFIX Message:\n    +--------+------------------------------------------.\
    \ . .\n    |        | +--------------+ +------------------+\n    |Message | |\
    \ Template     | | Data             |\n    | Header | | Set          | | Set \
    \             |   . . .\n    |        | | (1 Template) | | (3 Data Records) |\n\
    \    |        | +--------------+ +------------------+\n    +--------+------------------------------------------.\
    \ . .\n         . . .-------------------------------------------+\n          \
    \     +------------------+ +------------------+ |\n               | Options  \
    \        | | Data             | |\n        . . .  | Template Set     | | Set \
    \             | |\n               | (1 Template)     | | (2 Data Records) | |\n\
    \               +------------------+ +------------------+ |\n         . . .-------------------------------------------+\n"
- title: A.1.  Message Header Example
  contents:
  - "A.1.  Message Header Example\n   The Message Header is composed of:\n    0  \
    \                 1                   2                   3\n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Version = 0x000a          |         Length = 152          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Export Time                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Sequence Number                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Observation Domain ID                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: A.2.  Template Set Examples
  contents:
  - 'A.2.  Template Set Examples

    '
- title: A.2.1.  Template Set Using IANA Information Elements
  contents:
  - "A.2.1.  Template Set Using IANA Information Elements\n   We want to report the\
    \ following Information Elements:\n   - IPv4 source IP address: sourceIPv4Address\
    \ [IANA-IPFIX], with a\n     length of 4 octets\n   - IPv4 destination IP address:\
    \ destinationIPv4Address [IANA-IPFIX],\n     with a length of 4 octets\n   - Next-hop\
    \ IP address (IPv4): ipNextHopIPv4Address [IANA-IPFIX], with\n     a length of\
    \ 4 octets\n   - Number of packets of the Flow: packetDeltaCount [IANA-IPFIX],\
    \ with\n     a length of 4 octets\n   - Number of octets of the Flow: octetDeltaCount\
    \ [IANA-IPFIX], with a\n     length of 4 octets\n   Therefore, the Template Set\
    \ will be composed of the following:\n    0                   1              \
    \     2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Set ID = 2            |      Length = 28 octets       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Template ID 256         |       Field Count = 5         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|    sourceIPv4Address = 8    |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0| destinationIPv4Address = 12 |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|  ipNextHopIPv4Address = 15  |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|    packetDeltaCount = 2     |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|    octetDeltaCount = 1      |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: A.2.2.  Template Set Using Enterprise-Specific Information Elements
  contents:
  - "A.2.2.  Template Set Using Enterprise-Specific Information Elements\n   We want\
    \ to report the following Information Elements:\n   - IPv4 source IP address:\
    \ sourceIPv4Address [IANA-IPFIX], with a\n     length of 4 octets\n   - IPv4 destination\
    \ IP address: destinationIPv4Address [IANA-IPFIX],\n     with a length of 4 octets\n\
    \   - An enterprise-specific Information Element representing proprietary\n  \
    \   information, with a type of 15 and a length of 4 octets\n   - Number of packets\
    \ of the Flow: packetDeltaCount [IANA-IPFIX], with\n     a length of 4 octets\n\
    \   - Number of octets of the Flow: octetDeltaCount [IANA-IPFIX], with a\n   \
    \  length of 4 octets\n   Therefore, the Template Set will be composed of the\
    \ following:\n    0                   1                   2                  \
    \ 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Set ID = 2            |      Length = 32 octets       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Template ID 257         |       Field Count = 5         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|    sourceIPv4Address = 8    |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0| destinationIPv4Address = 12 |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1| Information Element id. = 15|       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Enterprise number                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|    packetDeltaCount = 2     |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|    octetDeltaCount = 1      |       Field Length = 4        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: A.3.  Data Set Example
  contents:
  - "A.3.  Data Set Example\n   In this example, we report the following three Flow\
    \ Records:\n     Src IP Addr. | Dst IP Addr.  | Next-Hop Addr. | Packet | Octets\n\
    \                  |               |                | Number | Number\n     ----------------------------------------------------------------\n\
    \     192.0.2.12   | 192.0.2.254   | 192.0.2.1      | 5009   | 5344385\n     192.0.2.27\
    \   | 192.0.2.23    | 192.0.2.2      | 748    | 388934\n     192.0.2.56   | 192.0.2.65\
    \    | 192.0.2.3      | 5      | 6534\n      0                   1           \
    \        2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |          Set ID = 256         |          Length = 64          |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                        192.0.2.12                           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                          192.0.2.254                          |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                        192.0.2.1                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                             5009                              |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                          5344385                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                          192.0.2.27                           |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                        192.0.2.23                           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                          192.0.2.2                            |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                            748                              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                             388934                            |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                        192.0.2.56                           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                          192.0.2.65                           |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                        192.0.2.3                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                               5                               |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                            6534                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Note that padding is not necessary in this example.\n"
- title: A.4.  Options Template Set Examples
  contents:
  - 'A.4.  Options Template Set Examples

    '
- title: A.4.1.  Options Template Set Using IANA Information Elements
  contents:
  - "A.4.1.  Options Template Set Using IANA Information Elements\n   Per line card\
    \ (the router being composed of two line cards), we want\n   to report the following\
    \ Information Elements:\n   - Total number of IPFIX Messages: exportedMessageTotalCount\n\
    \     [IANA-IPFIX], with a length of 2 octets\n   - Total number of exported Flows:\
    \ exportedFlowRecordTotalCount\n     [IANA-IPFIX], with a length of 2 octets\n\
    \   The line card, which is represented by the lineCardId Information\n   Element\
    \ [IANA-IPFIX], is used as the Scope Field.\n   Therefore, the Options Template\
    \ Set will be:\n      0                   1                   2              \
    \     3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ |         Set ID = 3            |          Length = 24          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |       Template ID 258         |        Field Count = 3        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \   Scope Field Count = 1     |0|     lineCardId = 141        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   Scope 1 Field Length = 4    |0|exportedMessageTotalCount=41 |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \     Field Length = 2        |0|exportedFlowRecordTotalCo.=42|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |       Field Length = 2        |           Padding             |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: A.4.2.  Options Template Set Using Enterprise-Specific Information
  contents:
  - "A.4.2.  Options Template Set Using Enterprise-Specific Information\n        Elements\n\
    \   Per line card (the router being composed of two line cards), we want\n   to\
    \ report the following Information Elements:\n   - Total number of IPFIX Messages:\
    \ exportedMessageTotalCount\n     [IANA-IPFIX], with a length of 2 octets\n  \
    \ - An enterprise-specific number of exported Flows, with a type of 42\n     and\
    \ a length of 4 octets\n   The line card, which is represented by the lineCardId\
    \ Information\n   Element [IANA-IPFIX], is used as the Scope Field.\n   The format\
    \ of the Options Template Set is as follows:\n      0                   1    \
    \               2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |         Set ID = 3            |          Length = 28          |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \     Template ID 259         |        Field Count = 3        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Scope Field Count = 1     |0|     lineCardId = 141        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \ Scope 1 Field Length = 4    |0|exportedMessageTotalCount=41 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |       Field Length = 2        |1|Information Element id. = 42 |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \     Field Length = 4        |       Enterprise number      ...\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...       Enterprise number      |           Padding             |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: A.4.3.  Options Template Set Using an Enterprise-Specific Scope
  contents:
  - "A.4.3.  Options Template Set Using an Enterprise-Specific Scope\n   In this example,\
    \ we want to export the same information as in the\n   example in Appendix A.4.1:\n\
    \   - Total number of IPFIX Messages: exportedMessageTotalCount\n     [IANA-IPFIX],\
    \ with a length of 2 octets\n   - Total number of exported Flows: exportedFlowRecordTotalCount\n\
    \     [IANA-IPFIX], with a length of 2 octets\n   But this time, the information\
    \ pertains to a proprietary scope,\n   identified by enterprise-specific Information\
    \ Element number 123.\n   The format of the Options Template Set is now as follows:\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |         Set ID = 3            |          Length = 28          |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \     Template ID 260         |        Field Count = 3        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Scope Field Count = 1     |1|Scope 1 Infor. El. id. = 123 |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \  Scope 1 Field Length = 4   |       Enterprise Number      ...\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...       Enterprise Number      |0|exportedMessageTotalCount=41 |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \     Field Length = 2        |0|exportedFlowRecordTotalCo.=42|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |       Field Length = 2        |           Padding             |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: A.4.4.  Data Set Using an Enterprise-Specific Scope
  contents:
  - "A.4.4.  Data Set Using an Enterprise-Specific Scope\n   In this example, we report\
    \ the following two Data Records:\n     Enterprise field 123   | IPFIX Message\
    \  | Exported Flow Records\n     ---------------------------------------------------------------\n\
    \     1                      | 345            | 10201\n     2                \
    \      | 690            | 20402\n     0                   1                  \
    \ 2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |      Set ID = 260             |         Length = 20           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                               1                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             345               |            10201              |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                               2                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             690               |            20402              |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: A.5.  Variable-Length Information Element Examples
  contents:
  - 'A.5.  Variable-Length Information Element Examples

    '
- title: A.5.1.  Example of Variable-Length Information Element with Length
  contents:
  - "A.5.1.  Example of Variable-Length Information Element with Length\n        Less\
    \ Than 255 Octets\n     0                   1                   2            \
    \       3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \   |       5       |          5-octet Information Element          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: A.5.2.  Example of Variable-Length Information Element with 3-Octet
  contents:
  - "A.5.2.  Example of Variable-Length Information Element with 3-Octet\n       \
    \ Length Encoding\n     0                   1                   2            \
    \       3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \   |      255      |             1000              |    IE ...     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                1000-octet Information Element                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    :                              ...                              :\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                             ... IE            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: Normative References
  contents:
  - "Normative References\n   [IANA-IPFIX]\n              IANA, \"IP Flow Information\
    \ Export (IPFIX) Entities\",\n              <http://www.iana.org/assignments/ipfix/>.\n\
    \   [RFC1014]  Sun Microsystems, Inc., \"XDR: External Data Representation\n \
    \             Standard\", RFC 1014, June 1987.\n   [RFC2119]  Bradner, S., \"\
    Key words for use in RFCs to Indicate\n              Requirement Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [RFC3436]  Jungmaier, A., Rescorla, E., and M.\
    \ Tuexen, \"Transport\n              Layer Security over Stream Control Transmission\
    \ Protocol\",\n              RFC 3436, December 2002.\n   [RFC3629]  Yergeau,\
    \ F., \"UTF-8, a transformation format of\n              ISO 10646\", STD 63,\
    \ RFC 3629, November 2003.\n   [RFC3758]  Stewart, R., Ramalho, M., Xie, Q., Tuexen,\
    \ M., and P.\n              Conrad, \"Stream Control Transmission Protocol (SCTP)\n\
    \              Partial Reliability Extension\", RFC 3758, May 2004.\n   [RFC4960]\
    \  Stewart, R., Ed., \"Stream Control Transmission Protocol\",\n             \
    \ RFC 4960, September 2007.\n   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines\
    \ for Writing an\n              IANA Considerations Section in RFCs\", BCP 26,\
    \ RFC 5226,\n              May 2008.\n   [RFC5246]  Dierks, T. and E. Rescorla,\
    \ \"The Transport Layer Security\n              (TLS) Protocol Version 1.2\",\
    \ RFC 5246, August 2008.\n   [RFC5905]  Mills, D., Martin, J., Ed., Burbank, J.,\
    \ and W. Kasch,\n              \"Network Time Protocol Version 4: Protocol and\
    \ Algorithms\n              Specification\", RFC 5905, June 2010.\n   [RFC6125]\
    \  Saint-Andre, P. and J. Hodges, \"Representation and\n              Verification\
    \ of Domain-Based Application Service Identity\n              within Internet\
    \ Public Key Infrastructure Using X.509\n              (PKIX) Certificates in\
    \ the Context of Transport Layer\n              Security (TLS)\", RFC 6125, March\
    \ 2011.\n   [RFC6347]  Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n\
    \              Security Version 1.2\", RFC 6347, January 2012.\n   [RFC6520] \
    \ Seggelmann, R., Tuexen, M., and M. Williams, \"Transport\n              Layer\
    \ Security (TLS) and Datagram Transport Layer Security\n              (DTLS) Heartbeat\
    \ Extension\", RFC 6520, February 2012.\n   [RFC7012]  Claise, B., Ed., and B.\
    \ Trammell, Ed., \"Information Model\n              for IP Flow Information Export\
    \ (IPFIX)\", RFC 7012,\n              September 2013.\n   [TCP]      Postel, J.,\
    \ \"Transmission Control Protocol\", STD 7,\n              RFC 793, September\
    \ 1981.\n   [UDP]      Postel, J., \"User Datagram Protocol\", STD 6, RFC 768,\n\
    \              August 1980.\n"
- title: Informative References
  contents:
  - "Informative References\n   [IEEE.754.2008]\n              Institute of Electrical\
    \ and Electronics Engineers, \"IEEE\n              Standard for Floating-Point\
    \ Arithmetic\", IEEE\n              Standard 754, August 2008.\n   [IPFIX-MED-PROTO]\n\
    \              Claise, B., Kobayashi, A., and B. Trammell, \"Operation of\n  \
    \            the IP Flow Information Export (IPFIX) Protocol on IPFIX\n      \
    \        Mediators\", Work in Progress, July 2013.\n   [IANA-PEN]\n          \
    \    IANA, \"Private Enterprise Numbers\",\n              <http://www.iana.org/assignments/enterprise-numbers/>.\n\
    \   [POSIX.1]  IEEE 1003.1-2008, \"IEEE Standard for Information\n           \
    \   Technology - Portable Operating System Interface\n              (POSIX(R))\"\
    , 2008.\n   [RFC2579]  McCloghrie, K., Ed., Perkins, D., Ed., and J.\n       \
    \       Schoenwaelder, Ed., \"Textual Conventions for SMIv2\",\n             \
    \ STD 58, RFC 2579, April 1999.\n   [RFC3550]  Schulzrinne, H., Casner, S., Frederick,\
    \ R., and V.\n              Jacobson, \"RTP: A Transport Protocol for Real-Time\n\
    \              Applications\", STD 64, RFC 3550, July 2003.\n   [RFC3917]  Quittek,\
    \ J., Zseby, T., Claise, B., and S. Zander,\n              \"Requirements for\
    \ IP Flow Information Export (IPFIX)\",\n              RFC 3917, October 2004.\n\
    \   [RFC3954]  Claise, B., Ed., \"Cisco Systems NetFlow Services Export\n    \
    \          Version 9\", RFC 3954, October 2004.\n   [RFC5101]  Claise, B., Ed.,\
    \ \"Specification of the IP Flow Information\n              Export (IPFIX) Protocol\
    \ for the Exchange of IP Traffic\n              Flow Information\", RFC 5101,\
    \ January 2008.\n   [RFC5103]  Trammell, B. and E. Boschi, \"Bidirectional Flow\
    \ Export\n              Using IP Flow Information Export (IPFIX)\", RFC 5103,\n\
    \              January 2008.\n   [RFC5153]  Boschi, E., Mark, L., Quittek, J.,\
    \ Stiemerling, M., and P.\n              Aitken, \"IP Flow Information Export\
    \ (IPFIX) Implementation\n              Guidelines\", RFC 5153, April 2008.\n\
    \   [RFC5470]  Sadasivan, G., Brownlee, N., Claise, B., and J. Quittek,\n    \
    \          \"Architecture for IP Flow Information Export\", RFC 5470,\n      \
    \        March 2009.\n   [RFC5471]  Schmoll, C., Aitken, P., and B. Claise, \"\
    Guidelines for IP\n              Flow Information Export (IPFIX) Testing\", RFC\
    \ 5471,\n              March 2009.\n   [RFC5472]  Zseby, T., Boschi, E., Brownlee,\
    \ N., and B. Claise, \"IP\n              Flow Information Export (IPFIX) Applicability\"\
    , RFC 5472,\n              March 2009.\n   [RFC5473]  Boschi, E., Mark, L., and\
    \ B. Claise, \"Reducing Redundancy\n              in IP Flow Information Export\
    \ (IPFIX) and Packet Sampling\n              (PSAMP) Reports\", RFC 5473, March\
    \ 2009.\n   [RFC5474]  Duffield, N., Ed., Chiou, D., Claise, B., Greenberg, A.,\n\
    \              Grossglauser, M., and J. Rexford, \"A Framework for Packet\n  \
    \            Selection and Reporting\", RFC 5474, March 2009.\n   [RFC5475]  Zseby,\
    \ T., Molina, M., Duffield, N., Niccolini, S., and F.\n              Raspall,\
    \ \"Sampling and Filtering Techniques for IP Packet\n              Selection\"\
    , RFC 5475, March 2009.\n   [RFC5476]  Claise, B., Ed., Johnson, A., and J. Quittek,\
    \ \"Packet\n              Sampling (PSAMP) Protocol Specifications\", RFC 5476,\n\
    \              March 2009.\n   [RFC5477]  Dietz, T., Claise, B., Aitken, P., Dressler,\
    \ F., and G.\n              Carle, \"Information Model for Packet Sampling Exports\"\
    ,\n              RFC 5477, March 2009.\n   [RFC5610]  Boschi, E., Trammell, B.,\
    \ Mark, L., and T. Zseby,\n              \"Exporting Type Information for IP Flow\
    \ Information Export\n              (IPFIX) Information Elements\", RFC 5610,\
    \ July 2009.\n   [RFC5655]  Trammell, B., Boschi, E., Mark, L., Zseby, T., and\
    \ A.\n              Wagner, \"Specification of the IP Flow Information Export\n\
    \              (IPFIX) File Format\", RFC 5655, October 2009.\n   [RFC6083]  Tuexen,\
    \ M., Seggelmann, R., and E. Rescorla, \"Datagram\n              Transport Layer\
    \ Security (DTLS) for Stream Control\n              Transmission Protocol (SCTP)\"\
    , RFC 6083, January 2011.\n   [RFC6183]  Kobayashi, A., Claise, B., Muenz, G.,\
    \ and K. Ishibashi,\n              \"IP Flow Information Export (IPFIX) Mediation:\
    \ Framework\",\n              RFC 6183, April 2011.\n   [RFC6313]  Claise, B.,\
    \ Dhandapani, G., Aitken, P., and S. Yates,\n              \"Export of Structured\
    \ Data in IP Flow Information Export\n              (IPFIX)\", RFC 6313, July\
    \ 2011.\n   [RFC6526]  Claise, B., Aitken, P., Johnson, A., and G. Muenz, \"IP\n\
    \              Flow Information Export (IPFIX) Per Stream Control\n          \
    \    Transmission Protocol (SCTP) Stream\", RFC 6526,\n              March 2012.\n\
    \   [RFC6528]  Gont, F. and S. Bellovin, \"Defending against Sequence\n      \
    \        Number Attacks\", RFC 6528, February 2012.\n   [RFC6615]  Dietz, T.,\
    \ Ed., Kobayashi, A., Claise, B., and G. Muenz,\n              \"Definitions of\
    \ Managed Objects for IP Flow Information\n              Export\", RFC 6615, June\
    \ 2012.\n   [RFC6727]  Dietz, T., Ed., Claise, B., and J. Quittek, \"Definitions\n\
    \              of Managed Objects for Packet Sampling\", RFC 6727,\n         \
    \     October 2012.\n   [RFC6728]  Muenz, G., Claise, B., and P. Aitken, \"Configuration\
    \ Data\n              Model for the IP Flow Information Export (IPFIX) and\n \
    \             Packet Sampling (PSAMP) Protocols\", RFC 6728,\n              October\
    \ 2012.\n   [UTF8-EXPLOIT]\n              Davis, M. and M. Suignard, \"Unicode\
    \ Technical Report #36:\n              Unicode Security Considerations\", The\
    \ Unicode Consortium,\n              July 2012.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   We would like to thank Ganesh Sadasivan for his significant\n\
    \   contribution during the initial phases of the protocol specification.\n  \
    \ Additional thanks go to Juergen Quittek for coordination between\n   IPFIX and\
    \ PSAMP; Nevil Brownlee, Dave Plonka, and Andrew Johnson for\n   the thorough\
    \ reviews; Randall Stewart and Peter Lei for their SCTP\n   expertise and contributions;\
    \ Martin Djernaes for the first essay on\n   the SCTP section; Michael Behringer\
    \ and Eric Vyncke for their advice\n   and knowledge in security; Michael Tuexen\
    \ for his help regarding the\n   DTLS section; Elisa Boschi for her contribution\
    \ regarding the\n   improvement of SCTP sections; Mark Fullmer, Sebastian Zander,\
    \ Jeff\n   Meyer, Maurizio Molina, Carter Bullard, Tal Givoly, Lutz Mark, David\n\
    \   Moore, Robert Lowe, Paul Calato, Andrew Feren, Gerhard Muenz, Sue\n   Hares,\
    \ and many more, for the technical reviews and feedback.\n   Finally, a special\
    \ mention to Adrian Farrel for his attention to\n   management and operational\
    \ aspects.\n"
- title: Contributors
  contents:
  - "Contributors\n   Stewart Bryant\n   Cisco Systems\n   10 New Square, Bedfont\
    \ Lakes\n   Feltham, Middlesex  TW18 8HA\n   United Kingdom\n   EMail: stbryant@cisco.com\n\
    \   Simon Leinen\n   SWITCH\n   Werdstrasse 2\n   P.O. Box 8021\n   Zurich\n \
    \  Switzerland\n   Phone: +41 44 268 1536\n   EMail: simon.leinen@switch.ch\n\
    \   Thomas Dietz\n   NEC Europe Ltd.\n   NEC Laboratories Europe\n   Network Research\
    \ Division\n   Kurfuersten-Anlage 36\n   69115 Heidelberg\n   Germany\n   Phone:\
    \ +49 6221 4342-128\n   EMail: Thomas.Dietz@nw.neclab.eu\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Benoit Claise (editor)\n   Cisco Systems, Inc.\n   De\
    \ Kleetlaan 6a b1\n   1831 Diegem\n   Belgium\n   Phone: +32 2 704 5622\n   EMail:\
    \ bclaise@cisco.com\n   Brian Trammell (editor)\n   Swiss Federal Institute of\
    \ Technology Zurich\n   Gloriastrasse 35\n   8092 Zurich\n   Switzerland\n   Phone:\
    \ +41 44 632 70 13\n   EMail: trammell@tik.ee.ethz.ch\n   Paul Aitken\n   Cisco\
    \ Systems, Inc.\n   96 Commercial Quay\n   Commercial Street, Edinburgh EH6 6LX\n\
    \   United Kingdom\n   Phone: +44 131 561 3616\n   EMail: paitken@cisco.com\n"
