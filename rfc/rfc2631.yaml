- title: __initial_text__
  contents:
  - '                  Diffie-Hellman Key Agreement Method

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document standardizes one particular Diffie-Hellman variant,\n\
    \   based on the ANSI X9.42 draft, developed by the ANSI X9F1 working\n   group.\
    \ Diffie-Hellman is a key agreement algorithm used by two\n   parties to agree\
    \ on a shared secret. An algorithm for converting the\n   shared secret into an\
    \ arbitrary amount of keying material is\n   provided. The resulting keying material\
    \ is used as a symmetric\n   encryption key.  The Diffie-Hellman variant described\
    \ requires the\n   recipient to have a certificate, but the originator may have\
    \ a static\n   key pair (with the public key placed in a certificate) or an\n\
    \   ephemeral key pair.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . .   2\n   1.1. Requirements Terminology  . . . . . . . . . . . . . . .\
    \ .   2\n   2. Overview Of Method  . . . . . . . . . . . . . . . . . . . .   2\n\
    \   2.1. Key Agreement . . . . . . . . . . . . . . . . . . . . . .   2\n   2.1.1.\
    \ Generation of ZZ  . . . . . . . . . . . . . . . . . . .   3\n   2.1.2. Generation\
    \ of Keying Material . . . . . . . . . . . . .   3\n   2.1.3. KEK Computation\
    \ . . . . . . . . . . . . . . . . . . . .   4\n   2.1.4. Keylengths for common\
    \ algorithms  . . . . . . . . . . .   5\n   2.1.5. Public Key Validation . . .\
    \ . . . . . . . . . . . . . .   5\n   2.1.6. Example 1 . . . . . . . . . . . .\
    \ . . . . . . . . . . .   5\n   2.1.7. Example 2 . . . . . . . . . . . . . . .\
    \ . . . . . . . .   6\n   2.2. Key and Parameter Requirements  . . . . . . . .\
    \ . . . . .   7\n   2.2.1. Group Parameter Generation  . . . . . . . . . . . .\
    \ . .   7\n   2.2.1.1. Generation of p, q  . . . . . . . . . . . . . . . . . \
    \  8\n   2.2.1.2. Generation of g . . . . . . . . . . . . . . . . . . .   9\n\
    \   2.2.2. Group Parameter Validation  . . . . . . . . . . . . . .   9\n   2.3.\
    \ Ephemeral-Static Mode . . . . . . . . . . . . . . . . . .  10\n   2.4. Static-Static\
    \ Mode  . . . . . . . . . . . . . . . . . . .  10\n   2.4. Acknowledgements  .\
    \ . . . . . . . . . . . . . . . . . . .  10\n   2.4. References  . . . . . . .\
    \ . . . . . . . . . . . . . . . .  11\n   Security Considerations  . . . . . .\
    \ . . . . . . . . . . . . .  12\n   Author's Address . . . . . . . . . . . . .\
    \ . . . . . . . . . .  12\n   Full Copyright Statement . . . . . . . . . . . .\
    \ . . . . . . .  13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In [DH76] Diffie and Hellman describe a means for two parties\
    \ to\n   agree upon a shared secret in such a way that the secret will be\n  \
    \ unavailable to eavesdroppers. This secret may then be converted into\n   cryptographic\
    \ keying material for other (symmetric) algorithms.  A\n   large number of minor\
    \ variants of this process exist. This document\n   describes one such variant,\
    \ based on the ANSI X9.42 specification.\n"
- title: 1.1.  Requirements Terminology
  contents:
  - "1.1.  Requirements Terminology\n   Keywords \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHOULD\", \"SHOULD NOT\" and\n   \"MAY\" that appear in this document are\
    \ to be interpreted as described\n   in [RFC2119].\n"
- title: 2.  Overview Of Method
  contents:
  - "2.  Overview Of Method\n   Diffie-Hellman key agreement requires that both the\
    \ sender and\n   recipient of a message have key pairs. By combining one's private\
    \ key\n   and the other party's public key, both parties can compute the same\n\
    \   shared secret number. This number can then be converted into\n   cryptographic\
    \ keying material.  That keying material is typically\n   used as a key-encryption\
    \ key (KEK) to encrypt (wrap) a content-\n   encryption key (CEK) which is in\
    \ turn used to encrypt the message\n   data.\n"
- title: 2.1.  Key Agreement
  contents:
  - "2.1.  Key Agreement\n   The first stage of the key agreement process is to compute\
    \ a shared\n   secret number, called ZZ.  When the same originator and recipient\n\
    \   public/private key pairs are used, the same ZZ value will result.\n   The\
    \ ZZ value is then converted into a shared symmetric cryptographic\n   key. When\
    \ the originator employs a static private/public key pair,\n   the introduction\
    \ of a public random value ensures that the resulting\n   symmetric key will be\
    \ different for each key agreement.\n"
- title: 2.1.1.  Generation of ZZ
  contents:
  - "2.1.1.  Generation of ZZ\n   X9.42 defines that the shared secret ZZ is generated\
    \ as follows:\n     ZZ = g ^ (xb * xa) mod p\n   Note that the individual parties\
    \ actually perform the computations:\n     ZZ = (yb ^ xa)  mod p  = (ya ^ xb)\
    \  mod p\n   where ^ denotes exponentiation\n         ya is party a's public key;\
    \ ya = g ^ xa mod p\n         yb is party b's public key; yb = g ^ xb mod p\n\
    \         xa is party a's private key\n         xb is party b's private key\n\
    \         p is a large prime\n         q is a large prime\n         g = h^{(p-1)/q}\
    \ mod p, where\n         h is any integer with 1 < h < p-1 such that h{(p-1)/q}\
    \ mod p > 1\n           (g has order q mod p; i.e. g^q mod p = 1 if g!=1)\n  \
    \       j a large integer such that p=qj + 1\n         (See Section 2.2 for criteria\
    \ for keys and parameters)\n   In [CMS], the recipient's key is identified by\
    \ the CMS\n   RecipientIdentifier, which points to the recipient's certificate.\n\
    \   The sender's public key is identified using the\n   OriginatorIdentifierOrKey\
    \ field, either by reference to the sender's\n   certificate or by inline inclusion\
    \ of a public key.\n"
- title: 2.1.2.  Generation of Keying Material
  contents:
  - "2.1.2.  Generation of Keying Material\n   X9.42 provides an algorithm for generating\
    \ an essentially arbitrary\n   amount of keying material from ZZ. Our algorithm\
    \ is derived from that\n   algorithm by mandating some optional fields and omitting\
    \ others.\n     KM = H ( ZZ || OtherInfo)\n   H is the message digest function\
    \ SHA-1 [FIPS-180] ZZ is the shared\n   secret value computed in Section 2.1.1.\
    \ Leading zeros MUST be\n   preserved, so that ZZ occupies as many octets as p.\
    \ For instance, if\n   p is 1024 bits, ZZ should be 128 bytes long.  OtherInfo\
    \ is the DER\n   encoding of the following structure:\n     OtherInfo ::= SEQUENCE\
    \ {\n       keyInfo KeySpecificInfo,\n       partyAInfo [0] OCTET STRING OPTIONAL,\n\
    \       suppPubInfo [2] OCTET STRING\n     }\n     KeySpecificInfo ::= SEQUENCE\
    \ {\n       algorithm OBJECT IDENTIFIER,\n       counter OCTET STRING SIZE (4..4)\
    \ }\n   Note that these ASN.1 definitions use EXPLICIT tagging. (In ASN.1,\n \
    \  EXPLICIT tagging is implicit unless IMPLICIT is explicitly\n   specified.)\n\
    \   algorithm is the ASN.1 algorithm OID of the CEK wrapping algorithm\n     with\
    \ which this KEK will be used. Note that this is NOT an\n     AlgorithmIdentifier,\
    \ but simply the OBJECT IDENTIFIER. No\n     parameters are used.\n   counter\
    \ is a 32 bit number, represented in network byte order. Its\n     initial value\
    \ is 1 for any ZZ, i.e. the byte sequence 00 00 00 01\n     (hex), and it is incremented\
    \ by one every time the above key\n     generation function is run for a given\
    \ KEK.\n   partyAInfo is a random string provided by the sender. In CMS, it is\n\
    \     provided as a parameter in the UserKeyingMaterial field (encoded as\n  \
    \   an OCTET STRING). If provided, partyAInfo MUST contain 512 bits.\n   suppPubInfo\
    \ is the length of the generated KEK, in bits, represented\n     as a 32 bit number\
    \ in network byte order. E.g. for 3DES it would be\n     the byte sequence 00\
    \ 00 00 C0.\n   To generate a KEK, one generates one or more KM blocks (incrementing\n\
    \   counter appropriately) until enough material has been generated.  The\n  \
    \ KM blocks are concatenated left to right I.e. KM(counter=1) ||\n   KM(counter=2)...\n\
    \   Note that the only source of secret entropy in this computation is\n   ZZ.\
    \  Even if a string longer than ZZ is generated, the effective key\n   space of\
    \ the KEK is limited by the size of ZZ, in addition to any\n   security level\
    \ considerations imposed by the parameters p and q.\n   However, if partyAInfo\
    \ is different for each message, a different KEK\n   will be generated for each\
    \ message. Note that partyAInfo MUST be used\n   in Static-Static mode, but MAY\
    \ appear in Ephemeral-Static mode.\n"
- title: 2.1.3.  KEK Computation
  contents:
  - "2.1.3.  KEK Computation\n   Each key encryption algorithm requires a specific\
    \ size key (n). The\n   KEK is generated by mapping the left n-most bytes of KM\
    \ onto the key.\n   For 3DES, which requires 192 bits of keying material, the\
    \ algorithm\n   must be run twice, once with a counter value of 1 (to generate\
    \ K1',\n   K2', and the first 32 bits of K3') and once with a counter value of\
    \ 2\n   (to generate the last 32 bits of K3). K1',K2' and K3' are then parity\n\
    \   adjusted to generate the 3 DES keys K1,K2 and K3.  For RC2-128, which\n  \
    \ requires 128 bits of keying material, the algorithm is run once, with\n   a\
    \ counter value of 1, and the left-most 128 bits are directly\n   converted to\
    \ an RC2 key. Similarly, for RC2-40, which requires 40\n   bits of keying material,\
    \ the algorithm is run once, with a counter\n   value of 1, and the leftmost 40\
    \ bits are used as the key.\n"
- title: 2.1.4.  Keylengths for common algorithms
  contents:
  - "2.1.4.  Keylengths for common algorithms\n   Some common key encryption algorithms\
    \ have KEKs of the following\n   lengths.\n     3-key 3DES      192 bits\n   \
    \  RC2-128        128 bits\n     RC2-40         40 bits\n   RC2 effective key\
    \ lengths are equal to RC2 real key lengths.\n"
- title: 2.1.5.  Public Key Validation
  contents:
  - "2.1.5.  Public Key Validation\n   The following algorithm MAY be used to validate\
    \ a received public key\n   y.\n     1. Verify that y lies within the interval\
    \ [2,p-1]. If it does not,\n        the key is invalid.\n     2. Compute y^q mod\
    \ p. If the result == 1, the key is valid.\n        Otherwise the key is invalid.\n\
    \   The primary purpose of public key validation is to prevent a small\n   subgroup\
    \ attack [LAW98] on the sender's key pair. If Ephemeral-Static\n   mode is used,\
    \ this check may not be necessary. See also [P1363] for\n   more information on\
    \ Public Key validation.\n   Note that this procedure may be subject to pending\
    \ patents.\n"
- title: 2.1.6.  Example 1
  contents:
  - "2.1.6.  Example 1\n   ZZ is the 20 bytes 00 01 02 03 04 05 06 07 08 09\n    \
    \                  0a 0b 0c 0d 0e 0f 10 11 12 13\n   The key wrap algorithm is\
    \ 3DES-EDE wrap.\n   No partyAInfo is used.\n   Consequently, the input to the\
    \ first invocation of SHA-1 is:\n   00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d\
    \ 0e 0f 10 11 12 13 ; ZZ\n   30 1d\n      30 13\n         06 0b 2a 86 48 86 f7\
    \ 0d 01 09 10 03 06          ; 3DES wrap OID\n         04 04\n            00 00\
    \ 00 01                                        ; Counter\n      a2 06\n      \
    \   04 04\n         00 00 00 c0                                        ; key length\n\
    \   And the output is the 20 bytes:\n   a0 96 61 39 23 76 f7 04 4d 90 52 a3 97\
    \ 88 32 46 b6 7f 5f 1e\n   The input to the second invocation of SHA-1 is:\n \
    \  00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 ; ZZ\n   30 1d\n\
    \      30 13\n         06 0b 2a 86 48 86 f7 0d 01 09 10 03 06          ; 3DES\
    \ wrap OID\n         04 04\n            00 00 00 02                          \
    \              ; Counter\n      a2 06\n         04 04\n         00 00 00 c0  \
    \                                      ; key length\n   And the output is the\
    \ 20 bytes:\n   f6 3e b5 fb 5f 56 d9 b6 a8 34 03 91 c2 d3 45 34 93 2e 11 30\n\
    \   Consequently,\n   K1'=a0 96 61 39 23 76 f7 04\n   K2'=4d 90 52 a3 97 88 32\
    \ 46\n   K3'=b6 7f 5f 1e f6 3e b5 fb\n   Note: These keys are not parity adjusted\n"
- title: 2.1.7.  Example 2
  contents:
  - "2.1.7.  Example 2\n   ZZ is the 20 bytes 00 01 02 03 04 05 06 07 08 09\n    \
    \                  0a 0b 0c 0d 0e 0f 10 11 12 13\n   The key wrap algorithm is\
    \ RC2-128 key wrap, so we need 128 bits (16\n   bytes) of keying material.\n \
    \  The partyAInfo used is the 64 bytes\n   01 23 45 67 89 ab cd ef fe dc ba 98\
    \ 76 54 32 01\n   01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 01\n   01 23 45\
    \ 67 89 ab cd ef fe dc ba 98 76 54 32 01\n   01 23 45 67 89 ab cd ef fe dc ba\
    \ 98 76 54 32 01\n   Consequently, the input to SHA-1 is:\n   00 01 02 03 04 05\
    \ 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 ; ZZ\n   30 61\n      30 13\n    \
    \     06 0b 2a 86 48 86 f7 0d 01 09 10 03 07           ; RC2 wrap OID\n      \
    \   04 04\n            00 00 00 01                                        ; Counter\n\
    \      a0 42\n         04 40\n            01 23 45 67 89 ab cd ef fe dc ba 98\
    \ 76 54 32 01 ; partyAInfo\n            01 23 45 67 89 ab cd ef fe dc ba 98 76\
    \ 54 32 01\n            01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 01\n    \
    \        01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 01\n      a2 06\n      \
    \   04 04\n            00 00 00 80                                     ; key length\n\
    \   And the output is the 20 bytes:\n   48 95 0c 46 e0 53 00 75 40 3c ce 72 88\
    \ 96 04 e0 3e 7b 5d e9\n   Consequently,\n   K=48 95 0c 46 e0 53 00 75 40 3c ce\
    \ 72 88 96 04 e0\n"
- title: 2.2.  Key and Parameter Requirements
  contents:
  - "2.2.  Key and Parameter Requirements\n   X9.42 requires that the group parameters\
    \ be of the form p=jq + 1\n   where q is a large prime of length m and j>=2. An\
    \ algorithm for\n   generating primes of this form (derived from the algorithms\
    \ in FIPS\n   PUB 186-1[FIPS-186] and [X942]can be found in appendix A.\n   X9.42\
    \ requires that the private key x be in the interval [2, (q -\n   2)].  x should\
    \ be randomly generated in this interval. y is then\n   computed by calculating\
    \ g^x mod p.  To comply with this memo, m MUST\n   be >=160 bits in length, (consequently,\
    \ q MUST be at least 160 bits\n   long). When symmetric ciphers stronger than\
    \ DES are to be used, a\n   larger m may be advisable. p must be a minimum of\
    \ 512 bits long.\n"
- title: 2.2.1.  Group Parameter Generation
  contents:
  - "2.2.1.  Group Parameter Generation\n   Agents SHOULD generate domain parameters\
    \ (g,p,q) using the following\n   algorithm, derived from [FIPS-186] and [X942].\
    \ When this algorithm is\n   used, the correctness of the generation procedure\
    \ can be verified by\n   a third party by the algorithm of 2.2.2.\n"
- title: 2.2.1.1.  Generation of p, q
  contents:
  - "2.2.1.1.  Generation of p, q\n   This algorithm generates a p, q pair where q\
    \ is of length m and p is\n   of length L.\n   1. Set m' = m/160 where / represents\
    \ integer division with rounding\n      upwards. I.e. 200/160 = 2.\n   2. Set\
    \ L'=  L/160\n   3. Set N'=  L/1024\n   4. Select an arbitrary bit string SEED\
    \ such that the length of SEED\n      >= m\n   5. Set U = 0\n   6. For i = 0 to\
    \ m' - 1\n        U = U + (SHA1[SEED + i] XOR SHA1[(SEED + m' + i)) * 2^(160 *\
    \ i)\n   Note that for m=160, this reduces to the algorithm of [FIPS-186]\n  \
    \      U = SHA1[SEED] XOR SHA1[(SEED+1) mod 2^160 ].\n   5. Form q from U by computing\
    \ U mod (2^m) and setting the most\n      significant bit (the 2^(m-1) bit) and\
    \ the least significant bit to\n      1. In terms of boolean operations, q = U\
    \ OR 2^(m-1) OR 1. Note\n      that 2^(m-1) < q < 2^m\n   6. Use a robust primality\
    \ algorithm to test whether q is prime.\n   7. If q is not prime then go to 4.\n\
    \   8. Let counter = 0\n   9. Set R = seed + 2*m' + (L' * counter)\n   10. Set\
    \ V = 0\n   12. For i = 0 to L'-1 do\n       V = V + SHA1(R + i) * 2^(160 * i)\n\
    \   13. Set W = V mod 2^L\n   14. Set X = W OR 2^(L-1)\n   Note that 0 <= W <\
    \ 2^(L-1) and hence X >= 2^(L-1)\n   15. Set p = X - (X mod (2*q)) + 1\n   6.\
    \ If p > 2^(L-1) use a robust primality test to test whether p is\n      prime.\
    \ Else go to 18.\n   17. If p is prime output p, q, seed, counter and stop.\n\
    \   18. Set counter = counter + 1\n   19. If counter < (4096 * N) then go to 8.\n\
    \   20. Output \"failure\"\n   Note: A robust primality test is one where the\
    \ probability of a non-\n   prime number passing the test is at most 2^-80. [FIPS-186]\
    \ provides a\n   suitable algorithm, as does [X942].\n"
- title: 2.2.1.2.  Generation of g
  contents:
  - "2.2.1.2.  Generation of g\n   This section gives an algorithm (derived from [FIPS-186])\
    \ for\n   generating g.\n   1. Let j = (p - 1)/q.\n   2. Set h = any integer,\
    \ where 1 < h < p - 1 and h differs\n      from any value previously tried.\n\
    \   3. Set g = h^j mod p\n   4. If g = 1 go to step 2\n"
- title: 2.2.2.  Group Parameter Validation
  contents:
  - "2.2.2.  Group Parameter Validation\n   The ASN.1 for DH keys in [PKIX] includes\
    \ elements j and validation-\n   Parms which MAY be used by recipients of a key\
    \ to verify that the\n   group parameters were correctly generated. Two checks\
    \ are possible:\n     1. Verify that p=qj + 1. This demonstrates that the parameters\
    \ meet\n        the X9.42 parameter criteria.\n     2. Verify that when the p,q\
    \ generation procedure of [FIPS-186]\n        Appendix 2 is followed with seed\
    \ 'seed', that p is found when\n        'counter' = pgenCounter.\n     This demonstrates\
    \ that the parameters were randomly chosen and\n     do not have a special form.\n\
    \   Whether agents provide validation information in their certificates\n   is\
    \ a local matter between the agents and their CA.\n"
- title: 2.3.  Ephemeral-Static Mode
  contents:
  - "2.3.  Ephemeral-Static Mode\n   In Ephemeral-Static mode, the recipient has a\
    \ static (and certified)\n   key pair, but the sender generates a new key pair\
    \ for each message\n   and sends it using the originatorKey production. If the\
    \ sender's key\n   is freshly generated for each message, the shared secret ZZ\
    \ will be\n   similarly different for each message and partyAInfo MAY be omitted,\n\
    \   since it serves merely to decouple multiple KEKs generated by the\n   same\
    \ set of pairwise keys. If, however, the same ephemeral sender key\n   is used\
    \ for multiple messages (e.g. it is cached as a performance\n   optimization)\
    \ then a separate partyAInfo MUST be used for each\n   message. All implementations\
    \ of this standard MUST implement\n   Ephemeral-Static mode.\n   In order to resist\
    \ small subgroup attacks, the recipient SHOULD\n   perform the check described\
    \ in 2.1.5. If an opponent cannot determine\n   success or failure of a decryption\
    \ operation by the recipient, the\n   recipient MAY choose to omit this check.\
    \ See also [LL97] for a method\n   of generating keys which are not subject to\
    \ small subgroup attack.\n"
- title: 2.4.  Static-Static Mode
  contents:
  - "2.4.  Static-Static Mode\n   In Static-Static mode, both the sender and the recipient\
    \ have a\n   static (and certified) key pair. Since the sender's and recipient's\n\
    \   keys are therefore the same for each message, ZZ will be the same for\n  \
    \ each message. Thus, partyAInfo MUST be used (and different for each\n   message)\
    \ in order to ensure that different messages use different\n   KEKs. Implementations\
    \ MAY implement Static-Static mode.\n   In order to prevent small subgroup attacks,\
    \ both originator and\n   recipient SHOULD either perform the validation step\
    \ described in\n   Section 2.1.5 or verify that the CA has properly verified the\n\
    \   validity of the key.  See also [LL97] for a method of generating keys\n  \
    \ which are not subject to small subgroup attack.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The Key Agreement method described in this document is based\
    \ on work\n   done by the ANSI X9F1 working group. The author wishes to extend\
    \ his\n   thanks for their assistance.\n   The author also wishes to thank Stephen\
    \ Henson, Paul Hoffman, Russ\n   Housley, Burt Kaliski, Brian Korver, John Linn,\
    \ Jim Schaad, Mark\n   Schertler, Peter Yee, and Robert Zuccherato for their expert\
    \ advice\n   and review.\n"
- title: References
  contents:
  - "References\n   [CMS]       Housley, R., \"Cryptographic Message Syntax\", RFC\
    \ 2630,\n               June 1999.\n   [FIPS-46-1] Federal Information Processing\
    \ Standards Publication\n               (FIPS PUB) 46-1, Data Encryption Standard,\
    \ Reaffirmed\n               1988 January 22 (supersedes FIPS PUB 46, 1977 January\n\
    \               15).\n   [FIPS-81]   Federal Information Processing Standards\
    \ Publication\n               (FIPS PUB) 81, DES Modes of Operation, 1980 December\
    \ 2.\n   [FIPS-180]  Federal Information Processing Standards Publication\n  \
    \             (FIPS PUB) 180-1, \"Secure Hash Standard\", 1995 April 17.\n   [FIPS-186]\
    \  Federal Information Processing Standards Publication\n               (FIPS\
    \ PUB) 186, \"Digital Signature Standard\", 1994 May\n               19.\n   [P1363]\
    \     \"Standard Specifications for Public Key Cryptography\",\n             \
    \  IEEE P1363 working group draft, 1998, Annex D.\n   [PKIX]      Housley, R.,\
    \ Ford, W., Polk, W. and D. Solo, \"Internet\n               X.509 Public Key\
    \ Infrastructure Certificate and CRL\n               Profile\", RFC 2459, January\
    \ 1999.\n   [LAW98]     L. Law, A. Menezes, M. Qu, J. Solinas and S. Vanstone,\n\
    \               \"An efficient protocol for authenticated key agreement\",\n \
    \              Technical report CORR 98-05, University of Waterloo,\n        \
    \       1998.\n   [LL97]      C.H. Lim and P.J. Lee, \"A key recovery attack on\
    \ discrete\n               log-based schemes using a prime order subgroup\", B.S.\n\
    \               Kaliski, Jr., editor, Advances in Cryptology - Crypto\n      \
    \         '97, Lecture Notes in Computer Science, vol. 1295, 1997,\n         \
    \      Springer-Verlag, pp. 249-263.\n   [RFC2119]   Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [X942]      \"Agreement Of Symmetric Keys Using Diffie-Hellman\
    \ and MQV\n               Algorithms\", ANSI draft, 1998.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   All the security in this system is provided by the\
    \ secrecy of the\n   private keying material. If either sender or recipient private\
    \ keys\n   are disclosed, all messages sent or received using that key are\n \
    \  compromised. Similarly, loss of the private key results in an\n   inability\
    \ to read messages sent using that key.\n   Static Diffie-Hellman keys are vulnerable\
    \ to a small subgroup attack\n   [LAW98]. In practice, this issue arises for both\
    \ sides in Static-\n   Static mode and for the receiver during Ephemeral-Static\
    \ mode.\n   Sections 2.3 and 2.4 describe appropriate practices to protect\n \
    \  against this attack. Alternatively, it is possible to generate keys\n   in\
    \ such a fashion that they are resistant to this attack. See [LL97]\n   The security\
    \ level provided by these methods depends on several\n   factors. It depends on\
    \ the length of the symmetric key (typically, a\n   2^l security level if the\
    \ length is l bits); the size of the prime q\n   (a 2^{m/2} security level); and\
    \ the size of the prime p (where the\n   security level grows as a subexponential\
    \ function of the size in\n   bits).  A good design principle is to have a balanced\
    \ system, where\n   all three security levels are approximately the same. If many\
    \ keys\n   are derived from a given pair of primes p and q, it may be prudent\
    \ to\n   have higher levels for the primes. In any case, the overall security\n\
    \   is limited by the lowest of the three levels.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Eric Rescorla\n   RTFM Inc.\n   30 Newell Road, #16\n  \
    \ East Palo Alto, CA 94303\n   EMail: ekr@rtfm.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
