- title: __initial_text__
  contents:
  - '                              Directed ARP

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  Discussion and suggestions for improvement are requested.\n  \
    \ Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   A router with an interface to two IP networks via the same link\
    \ level\n   interface could observe that the two IP networks share the same link\n\
    \   level network, and could advertise that information to hosts (via\n   ICMP\
    \ Redirects) and routers (via dynamic routing protocols).\n   However, a host\
    \ or router on only one of the IP networks could not\n   use that information\
    \ to communicate directly with hosts and routers\n   on the other IP network unless\
    \ it could resolve IP addresses on the\n   \"foreign\" IP network to their corresponding\
    \ link level addresses.\n   Directed ARP is a dynamic address resolution procedure\
    \ that enables\n   hosts and routers to resolve advertised potential next-hop\
    \ IP\n   addresses on foreign IP networks to their associated link level\n   addresses.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors are indebted to Joel Halpern of Network Systems\n\
    \   Corporation and David O'Leary who provided valuable comments and\n   insight\
    \ to the authors, as well as ongoing moral support as the\n   presentation of\
    \ this material evolved through many drafts.  Members\n   of the IPLPDN working\
    \ group also provided valuable comments during\n   presentations and through the\
    \ IPLPDN mailing list.  Chuck Hedrick of\n   Rutgers University, Paul Tsuchiya\
    \ of Bell Communications Research,\n   and Doris Tillman of AT&T Bell Laboratories\
    \ provided early insight as\n   well as comments on early drafts.\n"
- title: 1.  Terminology
  contents:
  - "1.  Terminology\n   A \"link level network\" is the upper layer of what is sometimes\n\
    \   referred to (e.g., OSI parlance) as the \"subnetwork\", i.e., the\n   layers\
    \ below IP.  The term \"link level\" is used to avoid potential\n   confusion\
    \ with the term \"IP sub-network\", and to identify addresses\n   (i.e., \"link\
    \ level address\") associated with the network used to\n   transport IP datagrams.\n\
    \   From the perspective of a host or router, an IP network is \"foreign\"\n \
    \  if the host or router does not have an address on the IP network.\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   Multiple IP networks may be administered on the same link\
    \ level\n   network (e.g., on a large public data network).  A router with a\n\
    \   single interface on two IP networks could use existing routing update\n  \
    \ procedures to advertise that the two IP networks shared the same link\n   level\
    \ network.  Cost/performance benefits could be achieved if hosts\n   and routers\
    \ that were not on the same IP network could use that\n   advertised information,\
    \ and exchange packets directly, rather than\n   through the dual addressed router.\
    \  But a host or router can not send\n   packets directly to an IP address without\
    \ first resolving the IP\n   address to its link level address.\n   IP address\
    \ resolution procedures are established independently for\n   each IP network.\
    \  For example, on an SMDS network [1], address\n   resolution may be achieved\
    \ using the Address Resolution Protocol\n   (ARP) [2], with a separate SMDS ARP\
    \ Request Address (e.g., an SMDS\n   Multicast Group Address) associated with\
    \ each IP network.  A host or\n   router that was not configured with the appropriate\
    \ ARP Request\n   Address would have no way to learn the ARP Request Address associated\n\
    \   with an IP network, and would not send an ARP Request to the\n   appropriate\
    \ ARP Request Address.  On an Ethernet network a host or\n   router might guess\
    \ that an IP address could be resolved by sending an\n   ARP Request to the broadcast\
    \ address.  But if the IP network used a\n   different address resolution procedure\
    \ (e.g., administered address\n   resolution tables), the ARP Request might go\
    \ unanswered.\n   Directed ARP is a procedure that enables a router advertising\
    \ that an\n   IP address is on a shared link level network to also aid in resolving\n\
    \   the IP address to its associated link level address.  By removing\n   address\
    \ resolution constraints, Directed ARP enables dynamic routing\n   protocols such\
    \ as BGP [3] and OSPF [4] to advertise and use routing\n   information that leads\
    \ to next-hop addresses on \"foreign\" IP\n   networks.  In addition, Directed\
    \ ARP enables routers to advertise\n   (via ICMP Redirects) next-hop addresses\
    \ that are \"foreign\" to hosts,\n   since the hosts can use Directed ARP to resolve\
    \ the \"foreign\" next-\n   hop addresses.\n"
- title: 3.  Directed ARP
  contents:
  - "3.  Directed ARP\n   Directed ARP uses the normal ARP packet format, and is consistent\n\
    \   with ARP procedures, as defined in [1] and [2], and with routers and\n   hosts\
    \ that implement those procedures.\n"
- title: 3.1  ARP Helper Address
  contents:
  - "3.1  ARP Helper Address\n   Hosts and routers maintain routing information, logically\
    \ organized\n   as a routing table.  Each routing table entry associates one or\
    \ more\n   destination IP addresses with a next-hop IP address and a physical\n\
    \   interface used to forward a packet to the next-hop IP address.  If\n   the\
    \ destination IP address is local (i.e., can be reached without the\n   aid of\
    \ a router), the next-hop IP address is NULL (or a logical\n   equivalent, such\
    \ as the IP address of the associated physical\n   interface).  Otherwise, the\
    \ next-hop IP address is the address of a\n   next-hop router.\n   A host or router\
    \ that implements Directed ARP procedures associates\n   an ARP Helper Address\
    \ with each routing table entry.  If the host or\n   router has been configured\
    \ to resolve the next-hop IP address to its\n   associated link level address\
    \ (or to resolve the destination IP\n   address, if the next-hop IP address is\
    \ NULL), the associated ARP\n   Helper Address is NULL.  Otherwise, the ARP Helper\
    \ Address is the IP\n   address of the router that provided the routing information\n\
    \   indicating that the next-hop address was on the same link level\n   network\
    \ as the associated physical interface.  Section 4 provides\n   detailed examples\
    \ of the determination of ARP Helper Addresses by\n   dynamic routing procedures.\n"
- title: 3.2  Address Resolution Procedures
  contents:
  - "3.2  Address Resolution Procedures\n   To forward an IP packet, a host or router\
    \ searches its routing table\n   for an entry that is the best match based on\
    \ the destination IP\n   address and perhaps other factors (e.g., Type of Service).\
    \  The\n   selected routing table entry includes the IP address of a next-hop\n\
    \   router (which may be NULL), the physical interface through which the\n   IP\
    \ packet should be forwarded, an ARP Helper Address (which may be\n   NULL), and\
    \ other information.  The routing function passes the next-\n   hop IP address,\
    \ the physical interface, and the ARP Helper Address to\n   the address resolution\
    \ function.  The address resolution function\n   must then resolve the next-hop\
    \ IP address (or destination IP address\n   if the next-hop IP address is NULL)\
    \ to its associated link level\n   address.  The IP packet, the link level address\
    \ to which the packet\n   should be forwarded, and the interface through which\
    \ the packet\n   should be forwarded are then passed to the link level driver\n\
    \   associated with the physical interface.  The link level driver\n   encapsulates\
    \ the IP packet in one or more link level frames (i.e.,\n   may do fragmentation)\
    \ addressed to the associated link level address,\n   and forwards the frame(s)\
    \ through the appropriate physical interface.\n   The details of the functions\
    \ performed are described via C pseudo-\n   code below.\n   The procedures are\
    \ organized as two functions, Route() and Resolve(),\n   corresponding to routing\
    \ and address resolution.  In addition, the\n   following low level functions\
    \ are also used:\n     Get_Route(IP_Add,Other) returns a pointer to the routing\
    \ table\n      entry with the destination field that best matches IP_Add.  If\
    \ no\n      matching entry is found, NULL is returned.  Other information such\n\
    \      as Type of Service may be considered in selecting the best route.\n   \
    \  Forward(Packet,Link_Level_Add,Phys_Int) fragments Packet (if\n      needed),\
    \ and encapsulates Packet in one or more Link Level Frames\n      addressed to\
    \ Link_Level_Add, and forwards the frame(s) through\n      interface, Phys_Int.\n\
    \     Look_Up_Add_Res_Table(IP_Add,Phys_Int) returns a pointer to the\n      link\
    \ level address associated with IP_Add in the address\n      resolution table\
    \ associated with interface, Phys_Int.  If IP_Add\n      is not found in the address\
    \ resolution table, NULL is returned.\n     Local_Add_Res(IP_Add,Phys_Int) returns\
    \ a pointer to the Link Level\n      address associated with IP_Add, using address\
    \ resolution\n      procedures associated with address, IP_Add, and interface,\n\
    \      Phys_Int.  If address resolution is unsuccessful, NULL is\n      returned.\
    \  Note that different address resolution procedures may\n      be used for different\
    \ IP networks.\n     Receive_ARP_Response(IP_Add,Phys_Int) returns a pointer to\
    \ an ARP\n      Response received through interface, Phys_Int, that resolves\n\
    \      IP_Add.  If no ARP response is received, NULL is returned.\n     Dest_IP_Add(IP_Packet)\
    \ returns the IP destination address from\n      IP_Packet.\n     Next_Hop(Entry)\
    \ returns the IP address in the next-hop field of\n      (routing table) Entry.\n\
    \     Interface(Entry) returns the physical interface field of (routing\n    \
    \  table) Entry.\n     ARP_Helper_Add(Entry) returns the IP address in the ARP\
    \ Helper\n      Address field of (routing table) Entry.\n     ARP_Request(IP_Add)\
    \ returns an ARP Request packet with IP_Add as\n      the Target IP address.\n\
    \     Source_Link_Level(ARP_Response) returns the link level address of\n    \
    \  the sender of ARP_Response.\n   ROUTE(IP_Packet)\n   {\n   Entry = Get_Route(Dest_IP_Add(IP_Packet),Other(IP_Packet));\n\
    \   If (Entry == NULL)  /* No matching entry in routing table */\n     Return;\
    \  /*  Discard IP_Packet */\n   else\n     {  /* Resolve next-hop IP address to\
    \ link level address */\n     If (Next_Hop(Entry) != NULL) /* Route packet via\
    \ next-hop router */\n       Next_IP = Next_Hop(Entry);\n     else  /* Destination\
    \ is local */\n       Next_IP = Dest_IP_Add(IP_Packet);\n     L_L_Add = Resolve(Next_IP,Interface(Entry),ARP_Helper_Add(Entry));\n\
    \     If (L_L_Add != NULL)\n       Forward(IP_Packet,L_L_Add,Interface(Entry));\n\
    \     else  /* Couldn't resolve next-hop IP address */\n       Return;  /* Discard\
    \ IP_Packet */\n     Return;\n     }\n   }\n   Figure 1:  C Pseudo-Code for the\
    \ Routing function.\n   Resolve(IP_Add,Interface,ARP_Help_Add)\n   {\n   If ((L_L_Add\
    \ = Look_Up_Add_Res_Table(IP_Add,Interface)) != NULL)\n     {   /* Found it in\
    \ Address Resolution Table */\n     Return L_L_Add;\n     }\n   else\n     {\n\
    \     If (ARP_Help_Add == NULL)\n       {  /* Do local Address Resolution Procedure\
    \ */\n       Return Local_Add_Res(IP_Add,Interface);\n       }\n     else  /*\
    \ ARP_Help_Add != NULL */\n       {\n       L_L_ARP_Help_Add = Look_Up_Add_Res_Table(ARP_Help_Add,Interface);\n\
    \       If (L_L_ARP_Help_Add == NULL)\n                              /* Not in\
    \ Address Resolution Table */\n         L_L_ARP_Help_Add = Local_Add_Res(ARP_Help_Add,Interface);\n\
    \       If (L_L_ARP_Help_Add == NULL)  /* Can't Resolve ARP Helper Add */\n  \
    \       Return NULL;  /*  Address Resolution Failed */\n       else\n        \
    \ {  /* ARP for IP_Add */\n         Forward(ARP_Request(IP_Add),L_L_ARP_Help_Add,Interface);\n\
    \         ARP_Resp = Receive_ARP_Response(IP_Add,Interface);\n         If (ARP_Resp\
    \ == NULL) /* No ARP Response (after persistence) */\n           Return NULL;\
    \  /* Address Resolution Failed */\n         else\n           Return Source_Link_Level(ARP_Resp);\n\
    \           }\n         }\n       }\n     }\n   }\n   Figure 2:  C Pseudo-Code\
    \ for Address Resolution function.\n"
- title: 3.3  Forwarding ARP Requests
  contents:
  - "3.3  Forwarding ARP Requests\n   A host that implements Directed ARP procedures\
    \ uses normal procedures\n   to process received ARP Requests.  That is, if the\
    \ Target IP address\n   is the host's address, the host uses normal procedures\
    \ to respond to\n   the ARP Request.  If the Target IP address is not the host's\
    \ address,\n   the host silently discards the ARP Request.\n   If the Target IP\
    \ address of an ARP Request received by a router is\n   the router's address,\
    \ the router uses normal procedures to respond to\n   the ARP Request.  But if\
    \ the Target IP address is not the router's\n   address, the router may forward\
    \ the ARP Request back through the same\n   interface it was received from, addressed\
    \ to a Link Level Address\n   that corresponds to an ARP Helper Address in the\
    \ router's routing\n   table.  The procedures used to process an ARP Request are\
    \ described\n   via C pseudo-code below.  The function Receive() describes procedures\n\
    \   followed by hosts and routers, and the function Direct() describes\n   additional\
    \ procedures followed by routers.  In addition, the\n   following low level functions\
    \ are also used:\n     Is_Local_IP_Add(IP_Add,Phys_Int) returns TRUE if Phys_Int\
    \ has been\n      assigned IP address, IP_Add.  Otherwise, returns FALSE.\n  \
    \   Do_ARP_Processing(ARP_Request,Interface) processes ARP_Request\n      using\
    \ ARP procedures described in [2].\n     I_Am_Router returns TRUE if device is\
    \ a router and False if device\n      is a host.\n     Target_IP(ARP_Request)\
    \ returns the Target IP address from\n      ARP_Request.\n     Filter(ARP_Request,Phys_Int)\
    \ returns TRUE if ARP_Request passes\n      filtering constraints, and FALSE if\
    \ filtering constraints are not\n      passed.  See section 3.4.\n     Forward(Packet,Link_Level_Add,Phys_Int)\
    \ fragments Packet (if\n      needed), and encapsulates Packet in one or more\
    \ Link Level Frames\n      addressed to Link_Level_Add, and forwards the frame(s)\
    \ through\n      interface, Phys_Int.\n     Look_Up_Next_Hop_Route_Table(IP_Add)\
    \ returns a pointer to the\n      routing table entry with the next-hop field\
    \ that matches IP_Add.\n      If no matching entry is found, NULL is returned.\n\
    \     Look_Up_Dest_Route_Table(IP_Add) returns a pointer to the routing\n    \
    \  table entry with the destination field that best matches IP_Add.\n      If\
    \ no matching entry is found, NULL is returned.\n     Link_Level_ARP_Req_Add(IP_Add,Phys_Int)\
    \ returns the link level\n      address to which an ARP Request to resolve IP_Add\
    \ should be\n      forwarded.  If ARP is not used to perform local address resolution\n\
    \      of IP_Add, NULL is returned.\n     Local_Add_Res(IP_Add,Phys_Int) returns\
    \ a pointer to the Link Level\n      address associated with IP_Add, using address\
    \ resolution\n      procedures associated with address, IP_Add, and interface,\n\
    \      Phys_Int.  If address resolution is unsuccessful, NULL is\n      returned.\
    \  Note that different address resolution procedures may\n      be used for different\
    \ IP networks.\n     Next_Hop(Entry) returns the IP address in the next-hop field\
    \ of\n      (routing table) Entry.\n     Interface(Entry) returns the physical\
    \ interface field of (routing\n      table) Entry.\n     ARP_Helper_Add(Entry)\
    \ returns the IP address in the ARP Helper\n      Address field of (routing table)\
    \ Entry.\n     Source_Link_Level(ARP_Request) returns the link level address of\n\
    \      the sender of ARP_Request.\n   Receive(ARP_Request,Interface)\n   {\n \
    \  If (Is_Local_IP_Add(Target_IP(ARP_Request),Interface))\n     Do_ARP_Processing(ARP_Request,Interface);\n\
    \   else  /*  Not my IP Address  */\n     If (I_Am_Router)  /*  Hosts don't Direct\
    \ ARP Requests  */\n       If (Filter(ARP_Request,Interface))  /*  Passes Filter\
    \ Test  */\n                                           /*  See Section 3.4  */\n\
    \         Direct(ARP_Request,Interface);  /*  Directed ARP Procedures  */\n  \
    \ Return;\n   }\n   Figure 3:  C Pseudo-Code for Receiving ARP Requests.\n   Direct(ARP_Request,Phys_Int)\n\
    \   {\n   Entry = Look_Up_Next_Hop_Route_Table(Target_IP(ARP_Request));\n   If\
    \ (Entry == NULL)  /* Target_IP Address is not a next-hop */\n     {         \
    \        /*  in Routing Table */\n     Entry = Look_Up_Dest_Route_Table(Target_IP(ARP_Request));\n\
    \       If (Entry == NULL)  /* Not a destination either */\n         Return; \
    \ /* Discard ARP Request */\n       else\n         If (Next_Hop(Entry) != NULL)\
    \ /* Not a next-hop and Not local */\n           Return;  /* Discard ARP Request\
    \ */\n     }\n   If (Interface(Entry) != Phys_Int)\n                         \
    \   /* Must be same physical interface */\n     Return;  /* Discard ARP Request\
    \ */\n   If (ARP_Helper_Add(Entry) != NULL)\n     {\n     L_L_ARP_Helper_Add =\
    \ Resolve(ARP_Helper_Add(Entry),Phys_Int,NULL);\n     If (L_L_ARP_Helper_Add !=\
    \ NULL)\n       Forward(ARP_Request,L_L_ARP_Helper_Add,Phys_Int);\n         /*\
    \  Forward ARP_Request to ARP Helper Address  */\n     Return;\n     }\n   else\
    \  /*  Do local address resolution.  */\n     {\n     L_L_ARP_Req_Add =\n    \
    \            Link_Level_ARP_Req_Add(Target_IP(ARP_Request),Phys_Int);\n     If\
    \ (L_L_ARP_Req_Add != NULL)\n       {  /*  Local address resolution procedure\
    \ is ARP. */\n          /*  Forward ARP_Request. */\n       Forward(ARP_Request,L_L_ARP_Req_Add,Phys_Int);\n\
    \       Return;\n       }\n     else\n       {  /*  Local address resolution procedure\
    \ is not ARP.  */\n          /*  Do \"published ARP\" on behalf of Target IP Address\
    \  */\n       Target_Link_Level =\n                      Local_Add_Res(Target_IP(ARP_Request),Phys_Int);\n\
    \       If (Target_Link_Level != NULL)  /*  Resolved Address  */\n         {\n\
    \         Forward(ARP_Response,Source_Link_Level(ARP_Request),Phys_Int);\n   \
    \      }\n       Return;\n       }\n     }\n   }\n   Figure 4:  C Pseudo_Code\
    \ for Directing ARP Requests.\n"
- title: 3.4  Filtering Procedures
  contents:
  - "3.4  Filtering Procedures\n   A router performing Directed ARP procedures must\
    \ filter the\n   propagation of ARP Request packets to constrain the scope of\n\
    \   potential \"ARP floods\" caused by misbehaving routers or hosts, and to\n\
    \   terminate potential ARP loops that may occur during periods of\n   routing\
    \ protocol instability or as a result of inappropriate manual\n   configurations.\
    \  Specific procedures to filter the propagation of ARP\n   Request packets are\
    \ beyond the scope of this document.  The following\n   procedures are suggested\
    \ as potential implementations that should be\n   sufficient.  Other procedures\
    \ may be better suited to a particular\n   implementation.\n   To control the\
    \ propagation of an \"ARP flood\", a router performing\n   Directed ARP procedures\
    \ could limit the number of identical ARP\n   Requests (i.e., same Source IP address\
    \ and same Target IP address)\n   that it would forward per small time interval\
    \ (e.g., no more than one\n   ARP Request per second).  This is consistent with\
    \ the procedure\n   suggested in [5] to prevent ARP flooding.\n   Forwarding of\
    \ ARP Request packets introduces the possibility of ARP\n   loops.  The procedures\
    \ used to control the scope of potential ARP\n   floods may terminate some ARP\
    \ loops, but additional procedures are\n   needed if the time required to traverse\
    \ a loop is longer than the\n   timer used to control ARP floods.  A router could\
    \ refuse to forward\n   more than N identical ARP Requests per T minutes, where\
    \ N and T are\n   administered numbers.  If T and N are chosen so that T/N minutes\
    \ is\n   greater than the maximum time required to traverse a loop, such a\n \
    \  filter would terminate the loop.  In some cases a host may send more\n   than\
    \ one ARP Request with the same Source IP address,Target IP\n   address pair (i.e.,\
    \ N should be greater than 1).  For example, the\n   first ARP Request might be\
    \ lost.  However, once an ARP Response is\n   received, a host would normally\
    \ save the associated information, and\n   therefore would not generate an identical\
    \ ARP Request for a period of\n   time on the order of minutes.  Therefore, T\
    \ may be large enough to\n   ensure that T/N is much larger than the time to traverse\
    \ any loop.\n   In some implementations the link level destination address of\
    \ a frame\n   used to transport an ARP Request to a router may be available to\
    \ the\n   router's Directed ARP filtering process.  An important class of\n  \
    \ simple ARP loops will be prevented from starting if a router never\n   forwards\
    \ an ARP Request to the same link level address to which the\n   received ARP\
    \ Request was addressed.  Of course, other procedures such\n   as the one described\
    \ in the paragraph above will stop all loops, and\n   are needed, even if filters\
    \ are implemented that prevent some loops\n   from starting.\n   Host requirements\
    \ [5] specify that \"the packet receive interface\n   between the IP layer and\
    \ the link layer MUST include a flag to\n   indicate whether the incoming packet\
    \ was addressed to a link-level\n   broadcast address.\"  An important class of\
    \ simple ARP floods can be\n   eliminated if routers never forward ARP Requests\
    \ that were addressed\n   to a link-level broadcast address.\n"
- title: 4.  Use of Directed ARP by Routing
  contents:
  - "4.  Use of Directed ARP by Routing\n   The exchange and use of routing information\
    \ is constrained by\n   available address resolution procedures.  A host or router\
    \ can not\n   use a next-hop IP address learned via dynamic routing procedures\
    \ if\n   it is unable to resolve the next-hop IP address to the associated\n \
    \  link level address.  Without compatible dynamic address resolution\n   procedures,\
    \ a router may not advertise a next-hop address that is not\n   on the same IP\
    \ network as the host or router receiving the\n   advertisement.  Directed ARP\
    \ is a procedure that enables a router\n   that advertises routing information\
    \ to make the routing information\n   useful by also providing assistance in resolving\
    \ the associated\n   next-hop IP addresses.\n   The following subsections describe\
    \ the use of Directed ARP to expand\n   the scope of ICMP Redirects [6], distance-vector\
    \ routing protocols\n   (e.g., BGP [3]), and link-state routing protocols (e.g.,\
    \ OSPF [4]).\n"
- title: 4.1  ICMP Redirect
  contents:
  - "4.1  ICMP Redirect\n   If a router forwards a packet to a next-hop address that\
    \ is on the\n   same link level network as the host that originated the packet,\
    \ the\n   router may send an ICMP Redirect to the host.  But a host can not use\n\
    \   a next-hop address advertised via an ICMP Redirect unless the host\n   has\
    \ a procedure to resolve the advertised next-hop address to its\n   associated\
    \ link level address.  Directed ARP is a procedure that a\n   host could use to\
    \ resolve an advertised next-hop address, even if the\n   host does not have an\
    \ address on the same IP network as the\n   advertised next-hop address.\n   A\
    \ host that implements Directed ARP procedures includes an ARP Helper\n   Address\
    \ with each routing table entry.  The ARP Helper Address\n   associated with an\
    \ entry learned via an ICMP Redirect is NULL if the\n   associated next-hop address\
    \ matches a routing table entry with a NULL\n   next-hop and a NULL ARP Helper\
    \ Address (i.e., the host already knows\n   how to resolve the next-hop address).\
    \  Otherwise, the ARP Helper\n   Address is the IP address of the router that\
    \ sent the ICMP Redirect.\n   Note that the router that sent the ICMP Redirect\
    \ is the current\n   next-hop to the advertised destination [5].  Therefore, the\
    \ host\n   should have an entry in its address resolution table for the new ARP\n\
    \   Helper Address.  If the host is unable to resolve the next-hop IP\n   address\
    \ advertised in the ICMP Redirect (e.g., because the associated\n   ARP Helper\
    \ Address is on a foreign IP network; i.e., was learned via\n   an old ICMP Redirect,\
    \ and the address resolution table entry for that\n   ARP Helper Address timed\
    \ out), the host must flush the associated\n   routing table entry.  Directed\
    \ ARP procedures do not recursively use\n   Directed ARP to resolve an ARP Helper\
    \ Address.\n   A router that performs Directed ARP procedures might advertise\
    \ a\n   foreign next-hop to a host that does not perform Directed ARP.\n   Following\
    \ existing procedures, the host would silently discard the\n   ICMP Redirect.\
    \  A router that does not implement Directed ARP should\n   not advertise a next-hop\
    \ on a foreign IP network, as specified by\n   existing procedures.  If it did,\
    \ and the ICMP Redirect was received\n   by a host that implemented Directed ARP\
    \ procedures, the host would\n   send an ARP Request for the foreign IP address\
    \ to the advertising\n   router, which would silently discard the ARP Request.\
    \  When address\n   resolution fails, the host should flush the associated entry\
    \ from its\n   routing table.\n   For various reasons a host may ignore an ICMP\
    \ Redirect and may\n   continue to forward packets to the same router that sent\
    \ the ICMP\n   Redirect.  For example, a host that does not implement Directed\
    \ ARP\n   procedures would silently discard an ICMP Redirect advertising a\n \
    \  next-hop address on a foreign IP network.  Routers should implement\n   constraints\
    \ to control the number of ICMP Redirects sent to hosts.\n   For example, a router\
    \ might limit the number of repeated ICMP\n   Redirects sent to a host to no more\
    \ than N ICMP Redirects per T\n   minutes, where N and T are administered values.\n"
- title: 4.2  Distance Vector Routing Protocol
  contents:
  - "4.2  Distance Vector Routing Protocol\n   A distance-vector routing protocol\
    \ provides procedures for a router\n   to advertise a destination address (e.g.,\
    \ an IP network), an\n   associated next-hop address, and other information (e.g.,\
    \ associated\n   metric).  But a router can not use an advertised route unless\
    \ the\n   router has a procedure to resolve the advertised next-hop address to\n\
    \   its associated link level address.  Directed ARP is a procedure that\n   a\
    \ router could use to resolve an advertised next-hop address, even if\n   the\
    \ router does not have an address on the same IP network as the\n   advertised\
    \ next-hop address.\n   The following procedures assume a router only accepts\
    \ routing updates\n   if it knows the IP address of the sender of the update,\
    \ can resolve\n   the IP address of the sender to its associated link level address,\n\
    \   and has an interface on the same link level network as the sender.\n   A router\
    \ that implements Directed ARP procedures includes an ARP\n   Helper Address with\
    \ each routing table entry.  The ARP Helper Address\n   associated with an entry\
    \ learned via a routing protocol update is\n   NULL if the associated next-hop\
    \ address matches a routing table entry\n   with a NULL next-hop and NULL ARP\
    \ Helper Address (i.e., the router\n   already knows how to resolve the next-hop\
    \ address).  Otherwise, the\n   ARP Helper Address is the IP address of the router\
    \ that sent the\n   routing update.\n   Some distance-vector routing protocols\
    \ (e.g., BGP [3]) provide syntax\n   that would permit a router to advertise an\
    \ address on a foreign IP\n   network as a next-hop.  If a router that implements\
    \ Directed ARP\n   procedures advertises a foreign next-hop IP address to a second\n\
    \   router that does not implement Directed ARP procedures, the second\n   router\
    \ can not use the advertised foreign next-hop.  Depending on the\n   details of\
    \ the routing protocol implementation, it might be\n   appropriate for the first\
    \ router to also advertise a next-hop that is\n   not on a foreign IP network\
    \ (e.g., itself), perhaps at a higher cost.\n   Or, if the routing relationship\
    \ is an administered connection (e.g.,\n   BGP relationships are administered\
    \ TCP/IP connections), the\n   administrative procedure could determine whether\
    \ foreign next-hop IP\n   addresses should be advertised.\n   A distance-vector\
    \ routing protocol could advertise that a destination\n   is directly reachable\
    \ by specifying that the router receiving the\n   advertisement is, itself, the\
    \ next-hop to the destination.  In\n   addition, the advertised metric for the\
    \ route might be zero.  If the\n   router did not already have a routing table\
    \ entry that specified the\n   advertised destination was local (i.e., NULL next-hop\
    \ address), the\n   router could add the new route with NULL next-hop, and the\
    \ IP address\n   of the router that sent the update as ARP Helper Address.\n"
- title: 4.3  Link State Routing Protocol
  contents:
  - "4.3  Link State Routing Protocol\n   A link-state routing protocol provides procedures\
    \ for routers to\n   identify links to other entities (e.g., other routers and\
    \ networks),\n   determine the state or cost of those links, reliably distribute\n\
    \   link-state information to other routers in the routing domain, and\n   calculate\
    \ routes based on link-state information received from other\n   routers.  A router\
    \ with an interface to two (or more) IP networks via\n   the same link level interface\
    \ is connected to those IP networks via a\n   single link, as described above.\
    \  If a router could advertise that it\n   used the same link to connect to two\
    \ (or more) IP networks, and would\n   perform Directed ARP procedures, routers\
    \ on either of the IP networks\n   could forward packets directly to hosts and\
    \ routers on both IP\n   networks, using Directed ARP procedures to resolve addresses\
    \ on the\n   foreign IP network.  With Directed ARP, the cost of the direct path\n\
    \   to the foreign IP network would be less than the cost of the path\n   through\
    \ the router with addresses on both IP networks.\n   To benefit from Directed\
    \ ARP procedures, the link-state routing\n   protocol must include procedures\
    \ for a router to advertise\n   connectivity to multiple IP networks via the same\
    \ link, and the\n   routing table calculation process must include procedures\
    \ to\n   calculate ARP Helper Addresses and procedures to accurately calculate\n\
    \   the reduced cost of the path to a foreign IP network reached directly\n  \
    \ via Directed ARP procedures.\n   The Shortest Path First algorithm for calculating\
    \ least cost routes\n   is based on work by Dijkstra [7], and was first used in\
    \ a routing\n   protocol by the ARPANET, as described by McQuillan [8].  A router\n\
    \   constructs its routing table by building a shortest path tree, with\n   itself\
    \ as root.  The process is iterative, starting with no entries\n   on the shortest\
    \ path tree, and the router, itself, as the only entry\n   in a list of candidate\
    \ vertices.  The router then loops on the\n   following two steps.\n     1.  Remove\
    \ the entry from the candidate list that is closest to\n         root, and add\
    \ it to the shortest path tree.\n     2.  Examine the link state advertisement\
    \ from the entry added to\n         the shortest path tree in step 1.  For each\
    \ neighbor (i.e.,\n         router or IP network to which a link connects)\n \
    \           - If the neighbor is already on the shortest path tree, do\n     \
    \         nothing.\n            - If the neighbor is on the candidate list, recalculate\
    \ the\n              distance from root to the neighbor.  Also recalculate the\n\
    \              next-hop(s) to the neighbor.\n            - If the neighbor is\
    \ not on the candidate list, calculate\n              the distance from root to\
    \ the neighbor and the next-hop(s)\n              from root to the neighbor, and\
    \ add the neighbor to the\n              candidate list.\n"
- title: The process terminates when there are no entries on the candidate list.
  contents:
  - 'The process terminates when there are no entries on the candidate list.

    '
- title: To take advantage of Directed ARP procedures, the link-state protocol
  contents:
  - 'To take advantage of Directed ARP procedures, the link-state protocol

    '
- title: must provide procedures to advertise that a router accesses two or more
  contents:
  - 'must provide procedures to advertise that a router accesses two or more

    '
- title: IP networks via the same link.  In addition, the Shortest Path First
  contents:
  - 'IP networks via the same link.  In addition, the Shortest Path First

    '
- title: calculation is modified to calculate ARP Helper Addresses and recognize
  contents:
  - 'calculation is modified to calculate ARP Helper Addresses and recognize

    '
- title: path cost reductions achieved via Directed ARP.
  contents:
  - "path cost reductions achieved via Directed ARP.\n     1.  If a neighbor under\
    \ consideration is an IP network, and its\n         parent (i.e., the entry added\
    \ to the shortest path tree in step\n         1, above) has advertised that the\
    \ neighbor is reached via the\n         same link as a network that is already\
    \ on the shortest path\n         tree, the distance from root and next-hop(s)\
    \ from root to the\n         neighbor are the same as the distance and next-hop(s)\n\
    \         associated with the network already on the shortest path tree.\n   \
    \      If the ARP Helper Address associated with the network that is\n       \
    \  already on the shortest path tree is not NULL, the neighbor\n         also\
    \ inherits the ARP Helper Address from the network that is\n         already on\
    \ the shortest path tree.\n     2.  If the calculated next-hop to the neighbor\
    \ is not NULL, the\n         neighbor inherits the ARP Helper Address from its\
    \ parent.\n         Otherwise, except as described in item 1, the ARP Helper\n\
    \         Address is the IP address of the next-hop to the neighbor's\n      \
    \   parent.  Note that the next-hop to root is NULL.\n   For each router or IP\
    \ network on the shortest path tree, the Shortest\n   Path First algorithm described\
    \ above must calculate one or more\n   next-hops that can be used to access the\
    \ router or IP network.  A\n   router that advertises a link to an IP network\
    \ must include an IP\n   address that can be used by other routers on the IP network\
    \ when\n   using the router as a next-hop.  A router might advertise that it was\n\
    \   connected to two IP networks via the same link by advertising the\n   same\
    \ next-hop IP address for access from both IP networks.  To\n   accommodate the\
    \ address resolution constraints of routers on both IP\n   networks the router\
    \ might advertise two IP addresses (one from each\n   IP network) as next-hop\
    \ IP addresses for access from both IP\n   networks.\n"
- title: 5.  Robustness
  contents:
  - "5.  Robustness\n   Hosts and routers can use Directed ARP to resolve third-party\
    \ next-\n   hop addresses; i.e., next-hop addresses learned from a routing\n \
    \  protocol peer or current next-hop router.  Undetected failure of a\n   third\
    \ party next-hop can result in a routing \"black hole\".  To avoid\n   \"black\
    \ holes\", host requirements [5] specify that a host \"...MUST be\n   able to\
    \ detect the failure of a 'next-hop' gateway that is listed in\n   its route cache\
    \ and to choose an alternate gateway.\"  A host may\n   receive feedback from\
    \ protocol layers above IP (e.g., TCP) that\n   indicates the status of a next-hop\
    \ router, and may use other\n   procedures (e.g., ICMP echo) to test the status\
    \ of a next-hop router.\n   But the complexity of routing is borne by routers,\
    \ whose routing\n   information must be consistent with the information known\
    \ to their\n   peers.  Routing protocols such as BGP [3], OSPF [4], and others,\n\
    \   require that routers must stand behind routing information that they\n   advertise.\
    \  Routers tag routing information with the IP address of\n   the router that\
    \ advertised the information.  If the information\n   becomes invalid, the router\
    \ that advertised the information must\n   advertise that the old information\
    \ is no longer valid.  If a source\n   of routing information becomes unavailable,\
    \ all information received\n   from that source must be marked as no longer valid.\
    \  The complexity\n   of dynamic routing protocols stems from procedures to ensure\
    \ routers\n   either receive routing updates sent by a peer, or are able to\n\
    \   determine that they did not receive the updates (e.g., because\n   connectivity\
    \ to the peer is no longer available).\n   Third-party next-hops can also result\
    \ in \"black holes\" if the\n   underlying link layer network connectivity is\
    \ not transitive.  For\n   example, SMDS filters [9] could be administered to\
    \ permit\n   communication between the SMDS addresses of router R1 and router\
    \ R2,\n   and between the SMDS addresses of router R2 and router R3, and to\n\
    \   block communication between the SMDS addresses of router R1 and\n   router\
    \ R3.  Router R2 could advertise router R3 as a next-hop to\n   router R1, but\
    \ SMDS filters would prevent direct communication\n   between router R1 and router\
    \ R3.  Non-symmetric filters might permit\n   router R3 to send packets to router\
    \ R1, but block packets sent by\n   router R1 addressed to router R3.\n   A host\
    \ or router could verify link level connectivity with a next-hop\n   router by\
    \ sending an ICMP echo to the link level address of the\n   next-hop router. \
    \ (Note that the ICMP echo is sent directly to the\n   link level address of the\
    \ next-hop router, and is not routed to the\n   IP address of the next-hop router.\
    \  If the ICMP echo is routed, it\n   may follow a path that does not verify link\
    \ level connectivity.) This\n   test could be performed before adding the associated\
    \ routing table\n   entry, or before the first use of the routing table entry.\
    \  Detection\n   of subsequent changes in link level connectivity is a dynamic\
    \ routing\n   protocol issue and is beyond the scope of this memo.\n"
- title: References
  contents:
  - "References\n   [1] Piscitello, D., and J. Lawrence, \"The Transmission of IP\n\
    \       Datagrams over the SMDS Service\", RFC 1209, Bell Communications\n   \
    \    Research, March 1991.\n   [2] Plummer, D., \"An Ethernet Address Resolution\
    \ Protocol - or -\n       Converting Network Protocol Addresses to 48.bit Ethernet\
    \ Address\n       for Transmission on Ethernet Hardware\", RFC 826, Symbolics,\
    \ Inc.,\n       November 1982.\n   [3] Lougheed, K. and Y. Rekhter, \"A Border\
    \ Gateway Protocol 3 (BGP-\n       3)\", RFC 1267, cisco Systems and IBM T. J.\
    \ Watson Research\n       Center, October 1991.\n   [4] Moy, J., \"OSPF Version\
    \ 2\", RFC 1247, Proteon, Inc., July 1991.\n   [5] Braden, R., editor, \"Requirements\
    \ for Internet Hosts --\n       Communication Layers\", STD 3, RFC 1122, USC/Information\
    \ Sciences\n       Institute, October 1989.\n   [6] Postel, J., \"Internet Control\
    \ Message Protocol - DARPA Internet\n       Program Protocol Specification\",\
    \ STD 5, RFC 792, USC/Information\n       Sciences Institute, September 1981.\n\
    \   [7] Dijkstra, E. W., \"A Note on Two Problems in Connection with\n       Graphs\"\
    , Numerische Mathematik, Vol. 1, pp. 269-271, 1959.\n   [8] McQuillan, J. M.,\
    \ I. Richer, and E. C. Rosen, \"The New Routing\n       Algorithm for the ARPANET\"\
    , IEEE Transactions on Communications,\n       Vol. COM-28, May 1980.\n   [9]\
    \ \"Generic System Requirements In Support of Switched Multi-\n       megabit\
    \ Data Service\", Technical Reference TR-TSV-000772, Bell\n       Communications\
    \ Research Technical Reference, Issue 1, May 1991.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   John Garrett\n   AT&T Bell Laboratories\n   184 Liberty\
    \ Corner Road\n   Warren, N.J. 07060-0906\n   Phone: (908) 580-4719\n   EMail:\
    \ jwg@garage.att.com\n   John Dotts Hagan\n   University of Pennsylvania\n   Suite\
    \ 221A\n   3401 Walnut Street\n   Philadelphia, PA 19104-6228\n   Phone: (215)\
    \ 898-9192\n   EMail: Hagan@UPENN.EDU\n   Jeffrey A. Wong\n   AT&T Bell Laboratories\n\
    \   184 Liberty Corner Road\n   Warren, N.J. 07060-0906\n   Phone: (908) 580-5361\n\
    \   EMail: jwong@garage.att.com\n"
