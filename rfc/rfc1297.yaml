- title: __initial_text__
  contents:
  - "             NOC Internal Integrated Trouble Ticket System\n                \
    \   Functional Specification Wishlist\n                        (\"NOC TT REQUIREMENTS\"\
    )\n"
- title: Status of the Memo
  contents:
  - "Status of the Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard.  Distribution of this memo is\n\
    \   unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   Professional quality handling of network problems requires some\
    \ kind\n   of problem tracking system, herein referred to as a \"trouble ticket\"\
    \n   system.  A basic trouble ticket system acts like a hospital chart,\n   coordinating\
    \ the work of multiple people who may need to work on the\n   problem.\n   Once\
    \ the basic trouble ticket system is in place, however, there are\n   many extensions\
    \ that can aid Network Operations efficiency.\n   Information in the tickets can\
    \ be used to produce statistical\n   reports.  Operator efficiency and accuracy\
    \ may be increased by\n   automating trouble ticket entry with information from\
    \ the network\n   Alert system.  The Alert system may be used to monitor trouble\
    \ ticket\n   progress.  Trouble tickets may be also used to communicate network\n\
    \   health information between NOCs, to telcom vendors, and to other\n   internal\
    \ sales and engineering audiences.\n   This document explores competing uses,\
    \ architectures, and desirable\n   features of integrated internal trouble ticket\
    \ systems for Network\n   and other Operations Centers.\n"
- title: Introduction
  contents:
  - "Introduction\n   This RFC describes general functions of a Trouble Ticket system\
    \ that\n   could be designed for Network Operations Centers.  The document is\n\
    \   being distributed to members of the Internet community in order to\n   stimulate\
    \ discussions of new production-oriented operator-level\n   application tools\
    \ for network operations.  Hopefully, this will\n   result both in more ideas\
    \ for improving NOC performance, and in more\n   available tools that incorporate\
    \ those ideas.\n"
- title: PURPOSES OF A NOC TROUBLE TICKET SYSTEM
  contents:
  - "PURPOSES OF A NOC TROUBLE TICKET SYSTEM\n   A good Network Operations Trouble\
    \ Ticket System should serve many\n   purposes:\n      1) SHORT-TERM MEMORY AND\
    \ COMMUNICATION (\"Hospital Chart\").  The\n      primary purpose of the trouble\
    \ ticket system is to act as short-\n      term memory about specific problems\
    \ for the NOC as a whole.  In a\n      multi-operator or multi-shift NOC, calls\
    \ and problem updates come\n      in without regard to who worked last on a particular\
    \ problem.\n      Problems extend over shifts, and problems may be addressed by\n\
    \      several different operators on the same shift.  The trouble ticket\n  \
    \    (like a hospital chart) provides a complete history of the\n      problem,\
    \ so that any operator can come up to speed on a problem\n      and take the next\
    \ appropriate step without having to consult with\n      other operators who are\
    \ working on something else, or have gone\n      home, or are on vacation.  In\
    \ single-room NOCs, an operator may\n      ask out loud if someone else knows\
    \ about or is working on a\n      problem, but the system should allow for more\
    \ formal communication\n      as well.\n      2) SCHEDULING and WORK ASSIGNMENT.\
    \  NOCs typically work with many\n      simultaneous problems with different priorities.\
    \  An on-line\n      trouble ticket system can provide real time (or even constantly\n\
    \      displayed and updated) lists of open problems, sorted by priority.\n  \
    \    This would allow operators to sort their work at the beginning of\n     \
    \ a shift, and to pick their next task during the shift.  It also\n      would\
    \ allow supervisors and operators to keep track of the current\n      NOC workload,\
    \ and to call in and assign additional staff as\n      appropriate.\n      It\
    \ may be useful to allow current priorities of tickets change\n      according\
    \ to time of day, or in response to timer alerts.\n      3) REFERRALS AND DISPATCHING.\
    \  If the trouble ticket system is\n      thoroughly enough integrated with a\
    \ mail system, or if the system\n      is used by Network Engineers as well as\
    \ Network Operators, then\n      some problems can be dispatched simply by placing\
    \ the appropriate\n      Engineer or Operator name in an \"assigned to\" field\
    \ of the trouble\n      ticket.\n      4) ALARM CLOCK.  Typically, most of the\
    \ time a trouble ticket is\n      open, it is waiting for something to happen.\
    \  There should almost\n      always be a timer associated with every wait.  If\
    \ a ticket is\n      referred to a phone company, there will be an escalation\
    \ time\n      before which the phone company is supposed to call back with an\n\
    \      update on the problem.  For tickets referred to remote site\n      personnel,\
    \ there may be other more arbitrary timeouts such as\n      \"Monday morning\"\
    .  Tickets referred to local engineers or\n      programmers should also have\
    \ timeouts (\"Check in a couple of days\n      if you don't hear back from me\"\
    ).  A good trouble ticket system\n      will allow a timeout to be set for each\
    \ ticket.  This alarm will\n      generate an alert for that ticket at the appropriate\
    \ time.\n      Preferably, the system should allow text to be attached to that\n\
    \      timer with a shorthand message about what the alert involves\n      (\"\
    Remind Site: TT xxx\") (The full story can always be found by\n      checking\
    \ the trouble ticket).  These alerts should feed into the\n      NOC's standard\
    \ alert system.\n      The Alarm Clock can also assist (or enforce!) administrative\n\
    \      escalation.  An escalation timer could automatically be set based\n   \
    \   on the type of network, severity of the problem, and the time the\n      outage\
    \ occurred.\n      5) OVERSIGHT BY ENGINEERS AND CUSTOMER/SITE REPRESENTATIVES.\
    \  NOCs\n      frequently operate more than one network, or at least have people\n\
    \      (engineers, customer representatives, etc) who are responsible for\n  \
    \    subsets of the total network.  For these individual\n      representatives,\
    \ summaries of trouble tickets can be filtered by\n      network or by node, and\
    \ delivered electronically to the various\n      engineers or site representatives.\
    \  Each of these reports includes\n      a summary of the previous day's trouble\
    \ tickets for those sites, a\n      listing of older trouble tickets still open,\
    \ and a section listing\n      recurrent problems.  These reports allow the site\
    \ reps to keep\n      aware the current outages and trends for their particular\
    \ sites.\n      The trouble ticket system also allows network access to the the\n\
    \      details of individual trouble tickets, so those receiving the\n      general\
    \ reports can get more detail on any of their problems by\n      referencing the\
    \ trouble ticket number.\n      6) STATISTICAL ANALYSIS.  The fixed-form fields\
    \ of trouble tickets\n      allow categorizations of tickets, which are useful\
    \ for analyzing\n      equipment and NOC performance.  These include, Mean Time\
    \ Between\n      Failure and Mean Time to Repair reports for specific equipment.\n\
    \      The fields may also be of use for generating statistical quality\n    \
    \  control reports, which allow deteriorating equipment to be\n      detected\
    \ and serviced before it fails completely.  Ticket\n      breakdowns by network\
    \ a NOC costs to be apportioned appropriately,\n      and help in developing staffing\
    \ and funding models.  A good\n      trouble ticket system should make this statistical\
    \ information in\n      a format suitable for spreadsheets and graphics programs.\n\
    \      7) FILTERING CURRENT ALERTS.  It would be possible to use network\n   \
    \   status information from the trouble ticket system to filter the\n      alerts\
    \ that are displayed on the alert system.  For instance, if\n      node XXX is\
    \ known to be down because the trouble ticket is\n      currently open on it,\
    \ the alert display for that node could\n      automatically be acknowledged.\
    \  Trouble tickets could potentially\n      contain much further information useful\
    \ for expert system analysis\n      of current network alert information.\n  \
    \    8) ACCOUNTABILITY (\"CYA\"), FACILITATING CUSTOMER FOLLOW-THROUGH,\n    \
    \  AND NOC IMAGE).  Keeping user-complaint tickets facilities the\n      kind\
    \ of follow through with end-users that generates happy clients\n      (and good\
    \ NOC image) for normal trouble-fixing situations.  But\n      also, by their\
    \ nature, NOCs deal with crises; they occasionally\n      find themselves with\
    \ major outages, and angry users or\n      administrators.  The trouble ticket\
    \ system documents the NOC's\n      (and the rest of the organization's) efforts\
    \ to solve problems in\n      case of complaints.\n"
- title: FIXED FIELDS, FREE-FORM FIELDS, and TT CONFIGURATION
  contents:
  - "FIXED FIELDS, FREE-FORM FIELDS, and TT CONFIGURATION\n   Information in trouble\
    \ tickets can be placed in either fixed or\n   freeform fields.  Fixed fields\
    \ have the advantage that they can be\n   used more easily for searches.  A series\
    \ of fixed fields also acts as\n   a template, either encouraging or requiring\
    \ the operators to fill in\n   certain standard data.  Fixed fields can facilitate\
    \ data verification\n   (e.g., making sure an entered name is in an attached contacts\n\
    \   database, or verifying that a phone number consists of ten numeric\n   characters).\
    \  Fixed fields are also appropriate for data that is\n   automatically entered\
    \ by the system, such as the operator's login id,\n   the name of the node that\
    \ was clicked on if the trouble ticket is\n   opened via an alert tool, or names\
    \ and phone numbers that are\n   automatically entered into the ticket based on\
    \ other entries (e.g.,\n   filling in a contact name and phone based on a machine\
    \ name).\n   Unfortunately, fixed fields work best where the problem-debugging\n\
    \   environment is uniform, well-understood, and stable; that is, trouble\n  \
    \ tickets work best when their fields are well tailored to the specific\n   problem\
    \ at hand.  It is easy to set up a large number of fields (or\n   even required\
    \ fields) that are irrelevant to a given problem; this\n   slows down and confuses\
    \ the operators.  Adding structure and validity\n   checking to a field tends\
    \ to make the data more consistent and\n   reliable, but it also tends to force\
    \ the operators into longer\n   procedures like menus to get the get the data\
    \ accepted by the system.\n   It also forces there to be more maintenance on those\
    \ verification\n   systems (adding new entries as they become new legal options),\
    \ and in\n   some ways it reduces the accuracy of the system by forcing operators\n\
    \   to choose \"canned\" or authorized responses that may not always\n   represent\
    \ the situation accurately.  Where statistical operational\n   reports are a primary\
    \ purpose of the trouble ticket system, several\n   fixed fields may be appropriate.\
    \  If the primary intent of the system\n   is to keep notes for individual problems\
    \ and to facilitate\n   communication between operators, then fixed fields may\
    \ tend to be a\n   hindrance.  One reasonable guideline would be that fixed fields\
    \ are\n   used ONLY where they are automatically filled in by the larger\n   system,\
    \ or where the information in that field is explicitly used in\n   a report or\
    \ standard search procedure.\n   Because of this close relationship between the\
    \ structure of the\n   ticket and the problem to be solved, it is very very useful\
    \ to be\n   able to define different ticket types for different classes of\n \
    \  problems.  This becomes even more true for those many NOCs whose\n   staff\
    \ are responsible for other types of operations: mainframe\n   operations, workstation\
    \ administration, help desk functions, or any\n   of the other real-time response\
    \ functions.  Network operations to\n   justify the expense of an operations center.\
    \  This kind of operation\n   makes economic sense, and is becoming more prevalent.\
    \  In these kinds\n   of situations it is vital that the same tools that are used\
    \ for\n   network operations also be available for the other operations.  This\n\
    \   means that the trouble ticket configurations need to be modifiable by\n  \
    \ local staff.  Commercial RDBMS forms builder and report generator\n   packages\
    \ and \"fourth-generation languages\" offer a good start at\n   this, although\
    \ it is sometimes difficult to integrate full trouble\n   ticket functionality\
    \ through these systems.\n"
- title: TROUBLE TICKET STRUCTURE
  contents:
  - "TROUBLE TICKET STRUCTURE\n   1) HEADERS.  Inevitably, a trouble ticket begins\
    \ with a number of\n   fixed fields.  These generally include:\n      Time and\
    \ Date of problem start.\n      Initials or signon of the operator opening the\
    \ ticket.\n      Severity of the problem  (possibly separating the \"customer\n\
    \      severity\" and the \"NOC priority\", since these could be different).\n\
    \      A one-line description of the problem for use in reports.\n   There can\
    \ be many other fixed fields for specific purposes.  There\n   may also be different\
    \ kinds of tickets for different problems, where\n   the ticket format differs\
    \ mainly in fixed fields.  These include:\n      Who reported the problem?  (Name,\
    \ organization, phone,\n                                                     \
    \ email address)\n      Machine(s) involved.\n      Network involved (for multi-network\
    \ NOCs).\n      User's machine address.\n      Destination machine address.\n\
    \      Next Action.\n      Time and date for alarm on this ticket.\n      Who\
    \ should the ticket be dispatched to?\n      Ticket \"owner\" (one person designated\
    \ to be responsible overall).\n   2) INCIDENT UPDATES.  The main body of trouble\
    \ tickets is usually a\n   series of freeform text fields.  Optimally, each of\
    \ these fields is\n   automatically marked with the time and date of the update,\
    \ and with\n   the signon of the operator making the update.  Since updates are\n\
    \   frequently recorded sometime after the problem is fixed, however, it\n   is\
    \ useful to allow the operators to override the current time stamp\n   with the\
    \ time the update was actually made.  (In some\n   implementations, both times\
    \ will be kept internally).\n   The first incident update usually is a description\
    \ of the problem.\n   Since the exact nature of the problem is usually not known\
    \ when the\n   ticket is first opened, this description may be complex and\n \
    \  imprecise.  For problems that are reported by electronic mail, it is\n   useful\
    \ to be able to paste the original message in the ticket,\n   particularly if\
    \ it contains cryptic or extensive information (such as\n   a user's traceroute\
    \ output).  At least one such arbitrarily-long\n   freeform field seems necessary\
    \ to contain this kind of output,\n   although it is better to allow arbitrarily\
    \ long messages at any stage\n   (e.g., so future complex messages can also be\
    \ archived in the\n   ticket).\n   Subsequent update fields may be as simple as\
    \ \"Called site;  no\n   answer\".  Some systems allow these kinds of updates\
    \ to be coded in\n   fixed fields; most use freeform text.\n   There should always\
    \ be an indication of what the next action for this\n   ticket ought to be.  Again,\
    \ this may be implemented as a special\n   fixed field, or by convention of using\
    \ the last line of text.\n   Advanced systems may also need a facility to allocate\
    \ the amount of\n   time a ticket is open between multiple sources.  A serious\
    \ NOC will\n   want to use its trouble ticket system to statistically track its\n\
    \   performance on responding to problems. (e.g., Mean Time Between\n   Failure\
    \ and Mean Time To Repair reports).  Frequently, though,\n   repairs are stopped\
    \ at the customer's request.  (\"It's not that\n   important a machine and I don't\
    \ feel like coming in--can you defer it\n   until Monday Morning?\").  In these\
    \ cases the ticket needs to remain\n   open, but there needs to be a notation\
    \ that the ticket is now in\n   \"customer time\" rather than \"NOC time\".  The\
    \ durations of \"customer\n   time\" need to be excluded from MTBF and MTTR reports.\
    \  Complicated\n   repairs could move back and forth between \"NOC time\" \"customer\
    \ time\"\n   repeatedly.  This probably implies that each Incident Update may\
    \ have\n   a time and date of status change, and that these status changes can\n\
    \   be read and aggregated by by reporting programs.\n   3) RESOLUTION DATA. \
    \ Once a problem is resolved, it is useful to\n   summarize the problem for future\
    \ statistical analysis.  The following\n   fields have been found to be useful:\n\
    \      - Time and Date of resulation (for outage duration).\n      - Durations\
    \ (can be calculated from time of resolution and\n        incident report \"customer/NOC\
    \ time\" stamps).\n      - Resolution (one line of description of what happened,\
    \ for\n        reports).\n      - Key component affected (for MTBF and similar\
    \ reports).\n      - Checked By -- a field for supervisors to sign off on ticket\n\
    \        review.\n      - Escalated to -- for reports on how many problems require\n\
    \        non-NOC help.\n      - Temp - a database field that can be used to store\
    \ temporary\n        \"check marks\" while making statistical investigations.\n"
- title: USER, TROUBLE, and ENGINEERING Ticket System(s)
  contents:
  - "USER, TROUBLE, and ENGINEERING Ticket System(s)\n   The primary level of an Network\
    \ Operations trouble ticket is the\n   \"problem\" or \"trouble\": a single malfunctioning\
    \ piece of hardware or\n   software that breaks at some time, has various efforts\
    \ to fix it, and\n   eventually is fixed at some given time.\n   The primary level\
    \ of an Network Information Center ticket, however,\n   might well be the \"user\
    \ complaint\".  A single network failure might\n   well produce a large number\
    \ of individual user phone calls and hence\n   \"user complaint\" tickets.  A\
    \ NIC may want to use tickets to track\n   each one of these calls, e.g., to make\
    \ sure each user is informed and\n   satisfied about the eventual resolution of\
    \ the single hardware\n   problem.\n   In addition, NOCs (or Engineering Staffs)\
    \ may want to track\n   systematic problems.  The staff may know, for instance,\
    \ that a\n   particular router is old and fragile, or that a particular section\
    \ of\n   their network doesn't have enough redundancy.  It may be useful to\n\
    \   open an \"Engineering Ticket\" on these known problems, providing a\n   place\
    \ to record history and notes about the problem, for use in\n   further engineering\
    \ or funding discussions.\n   Even further \"Meta\" tickets could be described,\
    \ having to do with\n   such issues as whether the current trouble ticket fields,\
    \ reports,\n   and operation procedures were sufficient to handle current problems.\n\
    \   It would be very convenient to be able to build all of these systems\n   on\
    \ the same platform, and to allow each type of ticket to easily\n   reference\
    \ other types.  Multiple \"user complaint\" tickets, then,\n   might might explicitly\
    \ point to a single \"trouble\" ticket.  Multiple\n   trouble tickets representing\
    \ independent failures would then point to\n   a single \"engineering\" ticket,\
    \ which described the systematic\n   problem.  Multiple engineering tickets could\
    \ point to a single \"meta\"\n   ticket, if appropriate.\n"
- title: ASSISTED ENTRY AND DATA VERIFICATION
  contents:
  - "ASSISTED ENTRY AND DATA VERIFICATION\n   Data (particularly in fixed fields)\
    \ is only useful for searching if\n   it is entered in consistent formats.  A\
    \ trouble ticket system needs\n   to help operators fill these fields with the\
    \ correct format of\n   information.  This can be done using assisted entry (menus\
    \ of\n   acceptable choices), verification routines which check against\n   internal\
    \ lists or external databases (see next section), or other\n   computer checking.\n\
    \   Some database systems allow a customized \"help\" screen to be\n   associated\
    \ with each field, helping new (and experienced) operators\n   by making context-sensitive\
    \ trouble ticket system documentation\n   available at every field.\n   Very complicated\
    \ help or operator-guidance systems can be built out\n   of Expert System technology.\
    \  This could be as simple as help\n   screens, or help screens with database\
    \ information inserted (e.g.,\n   site contact names and phone numbers).  Or it\
    \ could involve hints to\n   the operator, based on current network conditions.\
    \  Or it might even\n   ask the operator to run tests and to type in the results.\
    \  (See\n   EXPERT SYSTEMS, below).\n"
- title: INTEGRATION
  contents:
  - "INTEGRATION\n   To be maximally efficient and useful, a Trouble Ticket system\
    \ needs\n   to integrate well with most of the rest of the NOC tools.  These\n\
    \   include:\n      1) OPERATOR WINDOW ENVIRONMENT.  A NOC Operator needs access\
    \ to\n      many pieces of information simultaneously, and therefore is well\n\
    \      served by a good windowing environment.  The Trouble Ticket system\n  \
    \    needs to run within this larger windowing system, so that the\n      operator\
    \ can debug, consult databases, use Email, field alerts,\n      and keep an eye\
    \ out for other emergencies while working on a\n      trouble ticket.  It is also\
    \ useful to be able to run two trouble\n      ticket sessions simultaneously,\
    \ for example, to allow an operator\n      to search for related tickets while\
    \ he is in the middle of\n      updating another ticket.  Cut and Paste between\
    \ these various\n      screens is mandatory, to allow easy recording of technical\
    \ details\n      in the trouble tickets.\n      2) ALERT MONITORING SYSTEM.  Trouble\
    \ tickets are often opened in\n      response to machine alerts; it ought to be\
    \ easy to open a trouble\n      ticket directly from the alert tool.  When a ticket\
    \ is opened this\n      way, information about the alert and the machine involved\
    \ ought to\n      be automatically filled into the ticket.  (There are various\n\
    \      opinions about whether trouble tickets ought to be opened\n      automatically\
    \ without operator intervention.  This operator's\n      opinion is that an operator\
    \ acknowledgement should be required,\n      but this point is debated enough\
    \ that designers of a new system\n      probably should support either option).\n\
    \      The Alarm Clock feature of the trouble ticket system also\n      generates\
    \ alerts.  These alerts ought to feed gracefully into the\n      Alert Monitor\
    \ system, so that the operators will get all of their\n      alerts from one place.\n\
    \      3) DATABASE CONNECTIONS.  A good trouble ticketing system will\n      query\
    \ NOC databases to automatically fill out trouble ticket\n      fields where possible.\
    \  This can be used for:\n      - Filling out Network Operator information (e.g.,\
    \ phone number)\n        based on the NetOp's signon id.\n      - Filling in contact\
    \ information based on machine name.\n      - Filling in circuit numbers based\
    \ on link description.\n      - Filling in alarm clock or escalation time fields\
    \ based on the\n        machine or link name and on time of day.\n      - Filling\
    \ in machine serial numbers based on configuration database.\n      4) MACHINE\
    \ QUERYABLE INFORMATION.  It could also be possible for a\n      trouble ticket\
    \ system to make standard queries of the network\n      itself when a trouble\
    \ ticket is opened: e.g., the system could\n      request and store current machine\
    \ configurations whenever a ticket\n      was opened for that machine.  On some\
    \ systems, hardware serial\n      numbers are obtainable by software query directly\
    \ to the machine.\n      5) ELECTRONIC MAIL.  Problem notification often comes\
    \ via\n      electronic mail; it must be possible to easily open a ticket and\n\
    \      include the original mail message within the ticket as part of the\n  \
    \    initial problem description.  When extremely technical messages\n      come\
    \ in from network engineers, it is useful to allow those\n      messages to be\
    \ included verbatim, rather than forcing less\n      technical network operators\
    \ to rephrase the messages or to force\n      them into predefined formats.  Later\
    \ update messages should also\n      be easily includable.  Possibly: tickets\
    \ could be opened\n      automatically for mail messages to certain mailboxes.\
    \  A response\n      system saying \"Your request has been received and assigned\
    \ ticket\n      number ####\" might be desirable.\n      Information within trouble\
    \ tickets must also be easily available\n      (possibly just via the windowing\
    \ system) for inclusion in Email\n      messages to engineers and others.\n  \
    \    Scheduled (e.g., daily) reports must also be easily generated into\n    \
    \  the Email system.\n      6) DISPATCHING AND NOTIFICATION SYSTEMS.  An important\
    \ real-time\n      aspect of Network Operations is notifying users, technical\n\
    \      contacts, and administrators of various classes of problems.  The\n   \
    \   rules for who gets notified of what can be very arbitrary and\n      complex,\
    \ and can involve electronic mail, notices in computer\n      conferences, automatic\
    \ beeper pages, and synthesized voice\n      announcements.  It would be good\
    \ for a trouble ticket system to\n      provide for automatic (or operator initiated)\
    \ notification of the\n      appropriate channels for the current ticket (based\
    \ on network,\n      machine, severity of problem, duration of the problem, escalation\n\
    \      guidelines, etc).\n      Databases associated with the trouble ticket system\
    \ may also have\n      lists of specific people to contact about outages for particular\n\
    \      machines.  These \"who to inform\" lists can facilitate customized\n  \
    \    notification messages directly from the trouble ticket system.\n      It\
    \ may also be possible to dispatch experts directly from the\n      trouble tickets\
    \ system.  IBM's ECCO system allows allows customers\n      to directly dispatch\
    \ Service Engineers from machine interactions.\n      Many NOCs also use computer\
    \ hooked to modems to automatically page\n      engineers.  This kind of dispatching\
    \ should be available from\n      within the trouble ticket system (along with\
    \ an automatic note\n      into the trouble ticket that the engineer has been\
    \ dispatched).\n      7) OTHER TROUBLE TICKET SYSTEMS.  When the NOC generates\
    \ a trouble\n      ticket, it often immediately calls up a telco or another Internet\n\
    \      NOC, who proceed to open their own ticket.  The Internet\n      Engineering\
    \ Task Force User Connectivity Working Group is also\n      proposing a national\
    \ trouble ticket tracking system, which would\n      need updating from individual\
    \ NOC trouble ticket systems.  A\n      state-of-the-art trouble ticket system\
    \ could have provisions for\n      transferring tickets and ticket information\
    \ in and out of other\n      such systems.\n      8) NETWORK ACCESS.  Some older\
    \ trouble ticket systems assumed that\n      anyone with a need to access the\
    \ information would obtain a signon\n      and learn to use that system.  The\
    \ range of people with a need for\n      trouble ticket information is now too\
    \ great to allow this\n      assumption.  A good system now needs to be able to\
    \ support network\n      query for tickets and summary reports, as well as Email\
    \ delivery\n      of scheduled reports.\n      9) SUBROUTINE INTERFACE.  To allow\
    \ for ad-hoc and currently\n      unanticipated needs, the trouble ticket system\
    \ needs to support a\n      full-function set of subroutine calls.  These subroutines\
    \ will\n      allow construction of further trouble ticket functionality not yet\n\
    \      specified.\n      10) EXPERT SYSTEMS.  Network debugging is a very promising\
    \ area\n      for expert system and artificial intelligence applications.  But\n\
    \      such an algorithm should require access to the alert monitoring\n     \
    \ system, configuration and change control systems, to the network\n      itself,\
    \ and also to the information in the trouble ticket system.\n      A good future\
    \ system then needs to make this information available\n      (probably via the\
    \ subroutine interface mentioned above), and to\n      also allow the Network\
    \ Operators to invoke the artificially\n      intelligent debugging from within\
    \ a trouble ticket (including its\n      output as part of the ticket dialogue).\n\
    \      11) GRAPHICS/REPORT Capability.  Statistical and graphical\n      displays\
    \ about trouble ticket data need to be compatible with\n      tools used to generate\
    \ reports, news letters, etc.\n"
- title: 'OTHER CONSIDERATIONS:'
  contents:
  - "OTHER CONSIDERATIONS:\n      1) INTERACTIVE SPEED.  The system must be fast enough\
    \ to be used\n      interactively.  NetOps need to answer questions over the phone\
    \ in\n      real time; good answers cannot be given if every query takes a\n \
    \     couple of minutes.  More importantly, the NetOps need the trouble\n    \
    \  ticket system in order to get information necessary to fix the\n      network.\
    \  If looking for old or currently-open tickets takes more\n      than a few seconds,\
    \ it won't be done.  If updates take very long\n      to make, then updates won't\
    \ be recorded, or they will be recorded\n      long after the event (with corresponding\
    \ loss of accuracy).  (Our\n      Operators have asked for a single-line \"update\
    \ this ticket with\n      this message\" utility that would let them avoid even\
    \ retrieving\n      the ticket for simple updates!)  Any time spent waiting reduces\n\
    \      NetOp productivity and Network reliability.\n      2) BACKUPS AND RELIABILITY.\
    \  The trouble ticket system is\n      absolutely crucial to both immediate and\
    \ long-term operation of\n      the NOC.  Good systems could back up all data\
    \ several times an\n      hour to an auxiliary processor.  That processor should\
    \ be\n      accessible for immediate use in case of failure of the primary\n \
    \     system.\n      3) HISTORY AND ARCHIVING.  A trouble ticket system is a\n\
    \      constantly-growing database system.  Old tickets need to be\n      removed\
    \ from the system at some interval (a year?  several years?)\n      and archived.\
    \  These archives should also be restorable for long-\n      term history processing.\n\
    \      4) PRIVACY AND SECURITY.  The ability to enter, append, and modify\n  \
    \    tickets should be controlled by id and password.  Permissions\n      should\
    \ be specifiable on a per-field basis.  General read access\n      to tickets\
    \ (or portions of tickets) also needs to be restricted,\n      or else NetOps\
    \ will be reluctant to be full and candid in their\n      reporting.\n"
- title: UTILITY
  contents:
  - "UTILITY\n   There are quite a few ideas in this \"Wishlist\".  Ultimately, what\
    \ an\n   Operations Center needs is a totally integrated set of tools which\n\
    \   completely model all of its activities, and which integrates cleanly\n   with\
    \ all backup, peer, and vendor NOCs.  It is hard to imagine that\n   this whole\
    \ system could come out of a shrinkwrapped box, even without\n   the local configuration.\
    \  But most of these facilities do exist, now,\n   in some system.  Hopefully,\
    \ this document will foster an ongoing\n   discussion of ways in which NOC operator-level\
    \ tools are used in real\n   operations, and will encourage systems implementors\
    \ and vendors to\n   bring some of this functionality to the aid of real operations.\
    \  It\n   might even inspire current Operations Centers to add useful features\n\
    \   to their current operations.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   This paper does not pose specific new security issues.\
    \  The systems\n   described herein would be host database applications, however,\
    \ or\n   even distributed host database applications.  All of the normal\n   security\
    \ considerations for that kind of system would apply.\n   Multiple classes of\
    \ user access need to be specified for classes of\n   ticket data.  Possible security\
    \ threats include disclosure of network\n   information, disclosure of confidential\
    \ material (e.g., circuit\n   numbers or home phone numbers), and denial of service\
    \ to the Network\n   Operations Center leading to degradation of network service.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Dale S. Johnson\n   Merit NOC\n   1075 Beal Avenue\n   Ann\
    \ Arbor, MI 48109-2112\n   Phone:  (313) 936-2270\n   Email:  dsj@merit.edu\n\
    \   Discussion/comments may be sent to noc-tt-req@merit.edu.  The list\n   is\
    \ maintained by noc-tt-req-request@merit.edu.\n"
