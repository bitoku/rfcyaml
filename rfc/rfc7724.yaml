- contents:
  - '                       Active DHCPv4 Lease Query

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The Dynamic Host Configuration Protocol for IPv4 (DHCPv4) has been\n
    \  extended with a Leasequery capability that allows a requestor to\n   request
    information about DHCPv4 bindings (RFC 4388).  That mechanism\n   is limited to
    queries for individual bindings.  In some situations,\n   individual binding queries
    may not be efficient, or even possible.\n   In addition, continuous update of
    an external requestor with\n   Leasequery data is sometimes desired.  This document
    expands on the\n   DHCPv4 Leasequery protocol, and allows for active transfer
    of near\n   real-time DHCPv4 binding information data via TCP.  This document\n
    \  updates RFC 6926, \"DHCPv4 Bulk Leasequery\".\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7724.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    . . .   4\n   3.  Protocol Overview . . . . . . . . . . . . . . . . . . . . .
    .   6\n   4.  Interaction Between Active Leasequery and Bulk Leasequery . .   8\n
    \  5.  Message and Option Definitions  . . . . . . . . . . . . . . .   9\n     5.1.
    \ Message Framing for TCP . . . . . . . . . . . . . . . . .   9\n     5.2.  New
    or Changed Options  . . . . . . . . . . . . . . . . .   9\n       5.2.1.  dhcp-message-type
    . . . . . . . . . . . . . . . . . .  10\n       5.2.2.  dhcp-status-code  . .
    . . . . . . . . . . . . . . . .  10\n     5.3.  Connection and Transmission Parameters
    \ . . . . . . . . .  11\n   6.  Information Communicated by Active Leasequery
    . . . . . . . .  11\n   7.  Requestor Behavior  . . . . . . . . . . . . . . .
    . . . . . .  12\n     7.1.  General Processing  . . . . . . . . . . . . . . .
    . . . .  12\n     7.2.  Initiating a Connection . . . . . . . . . . . . . . .
    . .  13\n     7.3.  Forming an Active Leasequery  . . . . . . . . . . . . . .
    \ 14\n     7.4.  Processing Active Replies . . . . . . . . . . . . . . . .  15\n
    \      7.4.1.  Processing Replies from a Request Containing a\n               query-start-time
    \ . . . . . . . . . . . . . . . . . .  17\n     7.5.  Closing Connections . .
    . . . . . . . . . . . . . . . . .  19\n   8.  Server Behavior . . . . . . . .
    . . . . . . . . . . . . . . .  19\n     8.1.  Accepting Connections . . . . .
    . . . . . . . . . . . . .  19\n       8.1.1.  Update to RFC 6926  . . . . . .
    . . . . . . . . . . .  21\n     8.2.  Replying to an Active Leasequery  . . .
    . . . . . . . . .  21\n     8.3.  Multiple or Parallel Queries  . . . . . . .
    . . . . . . .  23\n     8.4.  Closing Connections . . . . . . . . . . . . . .
    . . . . .  24\n   9.  Security Considerations . . . . . . . . . . . . . . . .
    . . .  24\n   10. IANA Considerations . . . . . . . . . . . . . . . . . . . .
    .  25\n   11. References  . . . . . . . . . . . . . . . . . . . . . . . . .  26\n
    \    11.1.  Normative References . . . . . . . . . . . . . . . . . .  26\n     11.2.
    \ Informative References . . . . . . . . . . . . . . . . .  27\n   Acknowledgments
    . . . . . . . . . . . . . . . . . . . . . . . . .  27\n   Authors' Addresses  .
    . . . . . . . . . . . . . . . . . . . . . .  28\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The DHCPv4 Leasequery capability [RFC4388] extends the basic
    DHCPv4\n   capability [RFC2131] [RFC2132] to allow an external entity to query
    a\n   DHCPv4 server to recover lease state information about a particular\n   IPv4
    address or client in near real-time.\n   Continuous update of an external requestor
    with Leasequery data is\n   sometimes desired.  These requestors need to keep
    up with the current\n   binding activity of the DHCPv4 server.  Keeping up with
    these binding\n   activities is termed \"active\" leasequery.\n   The DHCPv4 Bulk
    Leasequery [RFC6926] capability can be used to\n   recover useful information
    from a DHCPv4 server when some external\n   entity starts up.  This entity could
    be one that is directly involved\n   in the DHCPv4 client-server transactions
    (e.g., a relay agent), or it\n   could be an external process that needs information
    present in the\n   DHCPv4 server's lease state database.\n   The Active Leasequery
    capability documented here is designed to allow\n   an entity not directly involved
    in DHCPv4 client-server transactions\n   to nevertheless keep current with the
    state of the DHCPv4 lease state\n   information in real-time.\n   This document
    updates DHCPv4 Bulk Leasequery [RFC6926] in that it\n   specifies the DHCPv4 server
    must close the TCP connection if it\n   receives a DHCPv4 message that is not
    allowed over the TCP connection\n   (for example, DHCPDISCOVER, DHCPLEASEQUERY).
    \ See Section 8.1.1.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n   This
    document uses the following terms:\n   o  \"Active Leasequery\"\n      Keeping
    up to date in real-time (or near real-time) with DHCPv4\n      binding activity.\n
    \  o  \"binding\"\n      The information that a DHCPv4 server keeps regarding
    the\n      relationship between a DHCPv4 client and an IPv4 address.  This\n      includes
    the identity of the DHCPv4 client and the expiration\n      time, if any, of any
    lease that client has on a particular IPv4\n      address.\n   o  \"Bulk Leasequery\"\n
    \     Requesting and receiving the information about all or some of the\n      existing
    DHCPv4 binding information in an efficient manner, as\n      defined by [RFC6926].\n
    \  o  \"blocked TCP connection\"\n      A TCP connection is considered blocked
    if the underlying TCP\n      transport will not accept new messages to be sent
    without blocking\n      the thread that is attempting to send the message.\n   o
    \ \"catch-up information\"\n      If a DHCPv4 Active Leasequery requestor sends
    in a query-start-\n      time option in a DHCPACTIVELEASEQUERY message, the DHCPv4
    server\n      will attempt to send the requestor the information that changed\n
    \     since the time specified in the query-start-time option.  The\n      binding
    information sent to satisfy this request is the catch-up\n      information.\n
    \  o  \"catch-up phase\"\n      The period while the catch-up information is being
    sent is the\n      catch-up phase.\n   o  \"clock skew\"\n      The difference
    between the absolute time on a DHCPv4 server and\n      the absolute time on the
    system where a requestor of an Active or\n      Bulk Leasequery is executing is
    termed the \"clock skew\" for that\n      Active or Bulk Leasequery connection.
    \ It is not absolutely\n      constant but is likely to vary only slowly.  While
    it is easy to\n      think that this can be calculated precisely after one packet
    is\n      received by a requestor from a DHCPv4 server, a more accurate\n      value
    is derived from continuously examining the instantaneous\n      value developed
    from each packet received from a DHCPv4 server and\n      using it to make small
    adjustments to the existing value held in\n      the requestor.\n   o  \"DHCPv4
    client\"\n      A DHCPv4 client is an IPv4 node using DHCP to obtain configuration\n
    \     parameters such as a network address.\n   o  \"DHCPv4 relay agent\"\n      A
    DHCPv4 relay agent is a third-party agent that transfers BOOTP\n      and DHCPv4
    messages between clients and servers residing on\n      different subnets, per
    [RFC951] and [RFC1542].\n   o  \"DHCPv4 server\"\n      A DHCPv4 server is an
    IPv4 node that returns configuration\n      parameters to DHCPv4 clients.\n   o
    \ \"insecure mode\"\n      When operating in insecure mode, the TCP connection
    between the\n      requestor and DHCPv4 server is not protected in any way.  In\n
    \     addition, the identity of the requestor is not validated by the\n      server
    nor is the identity of the server validated by the\n      requestor.\n   o  \"MAC
    address\"\n      In the context of a DHCP message, a Media Access Control (MAC)\n
    \     address consists of the fields: hardware type \"htype\", hardware\n      length
    \"hlen\", and client hardware address \"chaddr\".\n   o  \"requestor\"\n      The
    node that sends LEASEQUERY messages to one or more servers to\n      retrieve
    information on the bindings for a client.\n   o  \"secure mode\"\n      When operating
    in secure mode, the TCP connection between the\n      requestor and the DHCPv4
    server is protected by TLS [RFC5246].  In\n      addition, the requestor uses
    the certificates exchanged between it\n      and the DHCPv4 server while setting
    up the TLS connection to\n      validate the identity of the server.  The DHCPv4
    server also uses\n      these certificates to validate the identity of the requestor.\n"
  title: 2.  Terminology
- contents:
  - "3.  Protocol Overview\n   The Active Leasequery mechanism is modeled on the existing
    individual\n   Leasequery protocol in [RFC4388] as well as related work on DHCPv4\n
    \  Bulk Leasequery [RFC6926]; most differences arise from the long-term\n   nature
    of the TCP [RFC7414] connection required for Active\n   Leasequery.  In addition,
    a DHCPv4 server that supports Active\n   Leasequery must support Bulk Leasequery
    [RFC6926] as well.  See\n   Section 8.\n   An Active Leasequery requestor opens
    a TCP connection to a DHCPv4\n   Server, using the DHCPv4 port 67.  Note that
    this implies that the\n   Leasequery requestor has the server IPv4 address(es)
    available via\n   configuration or some other means, and that it has unicast IP\n
    \  reachability to the DHCPv4 server.  The message framing for TCP is\n   discussed
    in Section 5.1.  No relaying for Active Leasequery is\n   specified.\n   After
    establishing a connection, the requestor sends an\n   DHCPACTIVELEASEQUERY message
    over the connection.  In response, the\n   server sends updates to the requestor
    using DHCPLEASEACTIVE and\n   DHCPLEASEUNASSIGNED messages that are extensions
    of these messages as\n   defined in [RFC4388] and [RFC6926].  This response procedure
    is\n   similar to the procedure specified in [RFC6926], except that in the\n   case
    of Active Leasequery the server sends updates whenever some\n   activity occurs
    to change the binding state -- thus the need for the\n   long-lived connection.
    \ Additionally, the Active Leasequery server\n   should provide a mechanism to
    control which data is allowed to be\n   included in the messages sent to the requestor.
    \ See Section 8.2.\n   Since [RFC6926] did not specify what to do with an unknown
    message\n   type received over the DHCP TCP connection, system administrators\n
    \  SHOULD NOT allow a DHCPACTIVELEASEQUERY message to be sent over a\n   DHCP
    TCP connection to a DHCPv4 server that does not support Active\n   Leasequery.\n
    \  Active Leasequery is designed to provide continuous updates of DHCPv4\n   binding
    activity to an external entity.\n   Active Leasequery has features that allow
    this external entity to\n   lose its connection and then reconnect and receive
    the latest\n   information concerning any IPv4 bindings changed while it was not\n
    \  connected.\n   These capabilities are designed to allow the Active Leasequery\n
    \  requestor to efficiently become current with respect to the lease\n   state
    database after it has been restarted or the machine on which it\n   is running
    has been reinitialized.  It is easy to define a protocol\n   that works when the
    requestor is always connected to the DHCPv4\n   server.  Since that isn't sufficiently
    robust, much of the mechanism\n   in this document is designed to deal efficiently
    with situations that\n   occur when the Active Leasequery requestor becomes disconnected
    from\n   the DHCPv4 server from which it is receiving updates and then becomes\n
    \  reconnected to that server.\n   Central to this approach is the concept that,
    if the Active\n   Leasequery requestor loses service, it is allowed to specify
    the time\n   of its most recent update in a subsequent Active Leasequery request,\n
    \  and the DHCPv4 server will determine whether or not data was missed\n   while
    the Active Leasequery requestor was not connected.\n   The DHCP server processing
    the Active Leasequery request MAY limit\n   the amount of data saved, and methods
    exist for the DHCPv4 server to\n   inform the Active Leasequery requestor that
    more data was missed than\n   could be saved.  In this situation, the Active Leasequery
    requestor\n   would issue a Bulk Leasequery [RFC6926] to recover information not\n
    \  available through an Active Leasequery.\n   DHCPv4 servers are not required
    to keep any data corresponding to\n   data missed on an Active Leasequery connection,
    but will typically\n   choose to keep data corresponding to some recent activity
    available\n   for subsequent queries by a DHCPv4 Active Leasequery requestor whose\n
    \  connection was temporarily interrupted.\n   An Active Leasequery requestor
    would typically use Bulk Leasequery to\n   initialize its database with all current
    data when that database\n   contains no binding information.  In addition, it
    would use Bulk\n   Leasequery to recover missed information in the event that
    its\n   connection with the DHCPv4 server was lost for a longer time than the\n
    \  DHCPv4 server would keep track of the specific changes to the IPv4\n   binding
    information.\n   The messages sent by the server in response to an Active Leasequery\n
    \  request should be identical to the messages sent by the server to a\n   Bulk
    Leasequery request regarding the way the data is encoded into\n   the Active Leasequery
    responses.  In addition, the actions taken by\n   the Active Leasequery requestor
    to interpret the responses to an\n   Active Leasequery request should be identical
    to the way that the\n   requestor interprets the responses to a Bulk Leasequery
    request.\n   Thus, the handling of time, clock skew, data source, and other items\n
    \  discussed in the Bulk Leasequery specification [RFC6926] are to be\n   followed
    when implementing Active Leasequery, with the exception that\n   a server responding
    to an Active Leasequery request SHOULD be able to\n   be configured to prevent
    specific data items from being included in\n   the response to the requestor even
    if they were requested by\n   inclusion in the dhcp-parameter-request-list option.\n"
  title: 3.  Protocol Overview
- contents:
  - "4.  Interaction between Active Leasequery and Bulk Leasequery\n   Active Leasequery
    is an extension of the Bulk Leasequery protocol\n   [RFC6926].  The contents of
    messages returned to an Active Leasequery\n   requestor are identical to those
    defined for the Bulk Leasequery\n   protocol.\n   Applications that employ Active
    Leasequery to keep a database up to\n   date with respect to the DHCPv4 server's
    lease state database should\n   use an initial Bulk Leasequery to bring their
    database into\n   equivalence with that of the DHCPv4 server, and then use Active\n
    \  Leasequery to keep that database current with respect to the DHCPv4\n   server's
    lease state database.\n   There are several differences between the Active and
    Bulk Leasequery\n   protocols.  Active Leasequery defines only one qualifier (the
    query-\n   start-time) and no query types, while Bulk Leasequery defines several\n
    \  query types and qualifiers.  An Active Leasequery connection sends\n   all
    available updates to the requestor.\n   An Active Leasequery connection does not
    ever \"complete\", though the\n   DHCPv4 server can close the connection for a
    variety of reasons\n   associated with some sort of exception condition.\n"
  title: 4.  Interaction between Active Leasequery and Bulk Leasequery
- contents:
  - '5.  Message and Option Definitions

    '
  - contents:
    - "5.1.  Message Framing for TCP\n   The use of TCP for the Active Leasequery
      protocol permits one or more\n   DHCPv4 messages to be sent in response to a
      single Active Leasequery\n   request.  The receiver needs to be able to determine
      how large each\n   message is.  The same framing technique used for Bulk Leasequery\n
      \  [RFC6926] is used for Active Leasequery.\n   When using TLS to secure a connection
      [RFC5246], the message framing\n   for TLS uses the same format as that used
      for TCP.  One DHCP message\n   is carried in one TLS record.\n"
    title: 5.1.  Message Framing for TCP
  - contents:
    - "5.2.  New or Changed Options\n   The existing messages DHCPLEASEUNASSIGNED
      and DHCPLEASEACTIVE are\n   used as the value of the dhcp-message-type option
      to indicate an IPv4\n   address that is currently not leased or is currently
      leased to a\n   DHCPv4 client, respectively.\n   All of the message types and
      options defined for Bulk Leasequery\n   [RFC6926] are also used by Active Leasequery.
      \ In addition, new\n   message types and option types are defined for Active
      Leasequery, as\n   described below.\n"
    - contents:
      - "5.2.1.  dhcp-message-type\n   The message type option (option 53) from [RFC2132]
        requires\n   additional values.  The values of these message types are shown
        below\n   in an extension of the table from Section 9.6 of [RFC2132]:\n                     +-------+----------------------+\n
        \                    | Value | Message Type         |\n                     +-------+----------------------+\n
        \                    | 16    | DHCPACTIVELEASEQUERY |\n                     |
        17    | DHCPLEASEQUERYSTATUS |\n                     | 18    | DHCPTLS              |\n
        \                    +-------+----------------------+\n"
      title: 5.2.1.  dhcp-message-type
    - contents:
      - "5.2.2.  dhcp-status-code\n   The dhcp-status-code option defined in [RFC6926]
        allows greater\n   detail to be returned regarding the status of a DHCP request.
        \ While\n   specified in the Bulk Leasequery document, this DHCPv4 option
        is also\n   used in Active Leasequery.\n   This option has two possible scopes
        when used with Active Leasequery,\n   depending on the context in which it
        appears.  It refers to the\n   information in a single leasequery reply if
        the value of the dhcp-\n   message-type is DHCPLEASEACTIVE, DHCPLEASEUNASSIGNED,
        or DHCPTLS.  It\n   refers to the message stream related to an entire request
        if the\n   value of the dhcp-message-type is DHCPLEASEQUERYSTATUS.\n   Additional
        status codes defined for support of Active Leasequery are:\n   +----------------------+-------------+------------------------------+\n
        \  | Name                 | Status-Code | Description                  |\n
        \  +----------------------+-------------+------------------------------+\n
        \  | DataMissing          | 5           | Indicates that IPv4 binding  |\n
        \  |                      |             | information requested is not |\n
        \  |                      |             | available.                   |\n
        \  | ConnectionActive     | 6           | Indicates that this          |\n
        \  |                      |             | connection remains active.   |\n
        \  | CatchUpComplete      | 7           | Indicates that this Active   |\n
        \  |                      |             | Leasequery connection has    |\n
        \  |                      |             | completed sending all of the |\n
        \  |                      |             | saved data requested.        |\n
        \  | TLSConnectionRefused | 8           | Indicates that a TLS         |\n
        \  |                      |             | connection is not allowed.   |\n
        \  +----------------------+-------------+------------------------------+\n
        \  A dhcp-status-code option MAY appear in the options field of a DHCP\n   message.
        \ If the dhcp-status-code option does not appear, it is\n   assumed that the
        operation was successful.  The dhcp-status-code\n   option SHOULD NOT appear
        in a message that is successful unless it is\n   needed to convey some text
        message along with the Success status\n   code.\n"
      title: 5.2.2.  dhcp-status-code
    title: 5.2.  New or Changed Options
  - contents:
    - "5.3.  Connection and Transmission Parameters\n   Active Leasequery uses the
      same port configuration as DHCPv4 Bulk\n   Leasequery [RFC6926].  It also uses
      other transmission parameters\n   (BULK_LQ_DATA_TIMEOUT and BULK_LQ_MAX_CONNS)
      as defined in [RFC6926].\n   This section presents a table of values used to
      control Active\n   Leasequery behavior, including recommended defaults.  Implementations\n
      \  MAY make these values configurable.  However, configuring too-small\n   timeout
      values may lead to harmful behavior both to this application\n   as well as
      to other traffic in the network.  As a result, timeout\n   values smaller than
      the default values SHOULD NOT be used.\n   +------------------------+---------+-------------------------------+\n
      \  | Parameter              | Default | Description                   |\n   +------------------------+---------+-------------------------------+\n
      \  | ACTIVE_LQ_RCV_TIMEOUT  | 120 s   | Active Leasequery receive     |\n   |
      \                       |         | timeout                       |\n   | ACTIVE_LQ_SEND_TIMEOUT
      | 120 s   | Active Leasequery send        |\n   |                        |         |
      timeout                       |\n   | ACTIVE_LQ_IDLE_TIMEOUT | 60 s    | Active
      Leasequery idle        |\n   |                        |         | timeout                       |\n
      \  +------------------------+---------+-------------------------------+\n"
    title: 5.3.  Connection and Transmission Parameters
  title: 5.  Message and Option Definitions
- contents:
  - "6.  Information Communicated by Active Leasequery\n   While the information communicated
    by a Bulk Leasequery [RFC6926] is\n   taken directly from the DHCPv4 server's
    lease state database, the\n   information communicated by an Active Leasequery
    is real-time\n   information.  As such, it is the information that is currently\n
    \  associated with a particular binding in the DHCPv4 server's lease\n   state
    database.\n   This is of significance, because if the Active Leasequery requestor\n
    \  runs slowly or the requestor disconnects from the DHCPv4 server and\n   then
    reconnects with a query-start-time (signaling a catch-up\n   operation), the information
    communicated to the Active Leasequery\n   requestor is only the most current information
    from the DHCPv4\n   server's lease state database.\n   The requestor of an Active
    Leasequery MUST NOT assume that every\n   lease state change is communicated across
    an Active Leasequery\n   connection.  Even if the Active Leasequery requestor
    remains\n   connected, the DHCPv4 server is only required to transmit information\n
    \  about a binding that is current when the packet is created and handed\n   off
    to the TCP stack to send to the requestor.\n   If the TCP connection blocks and
    the DHCPv4 server is waiting to send\n   information down the connection, when
    the connection becomes\n   available to be written, the DHCPv4 server MAY create
    the packet to\n   send at this time.  The current state of the binding will be
    sent,\n   and any transition in state or other information that occurred while\n
    \  the TCP connection was blocked will be lost.\n   Thus, the Active Leasequery
    protocol does not allow the requestor to\n   build a complete history of every
    activity on every lease.  An\n   effective history of the important state changes
    for a lease can be\n   created if the parameters of the DHCPv4 server are tuned
    to take into\n   account the requirements of an Active Leasequery requestor.  For\n
    \  instance, the period after the expiration or release of a binding\n   could
    be configured long enough (say, several minutes, well more than\n   the receive
    timeout), so that an Active Leasequery requestor would\n   never miss any changes
    in the binding.\n"
  title: 6.  Information Communicated by Active Leasequery
- contents:
  - '7.  Requestor Behavior

    '
  - contents:
    - "7.1.  General Processing\n   A requestor attempts to establish a TCP connection
      to a DHCPv4 server\n   in order to initiate a Leasequery exchange.  If the attempt
      fails,\n   the Requestor MAY retry.  Retries should not be more frequent than\n
      \  one every ACTIVE_LQ_IDLE_TIMEOUT.  See Section 5.3.\n   If an Active Leasequery
      is terminated prematurely by a\n   DHCPLEASEQUERYDONE with a dhcp-message status-code
      of QueryTerminated\n   or by the failure of the connection over which it was
      being\n   submitted, the requestor MAY retry the request after the creation
      of\n   a new connection.  Retries should not be more frequent than one every\n
      \  ACTIVE_LQ_IDLE_TIMEOUT.  See Section 5.3.\n   Messages from the DHCPv4 server
      come as multiple responses to a\n   single DHCPACTIVELEASEQUERY message.  Thus,
      each DHCPACTIVELEASEQUERY\n   or DHCPBULKLEASEQUERY request must have an xid
      (transaction-id)\n   unique on the connection on which it is sent (see Section
      7.3), and\n   all of the messages that come as a response to it contain the
      same\n   xid as the request.\n   Only one DHCPACTIVELEASEQUERY is allowed on
      any one TCP connection at\n   a time.  Parallel DHCPACTIVELEASEQUERY requests
      on the same TCP\n   connection are not allowed.\n"
    title: 7.1.  General Processing
  - contents:
    - "7.2.  Initiating a Connection\n   A requestor SHOULD be able to operate in
      either insecure or secure\n   mode.  See Section 9.  This MAY be a feature that
      is administratively\n   controlled.\n   When operating in insecure mode, the
      requestor sends a\n   DHCPACTIVELEASEQUERY request after the establishment of
      a TCP\n   connection.\n   When operating in secure mode, the requestor MUST
      attempt to\n   negotiate a TLS [RFC5246] connection over the TCP connection.
      \ If\n   this negotiation fails, the requestor MUST close the TCP connection.\n
      \  The recommendations in [RFC7525] apply when negotiating this\n   connection.\n
      \  A requestor requests the establishment of a TLS connection by sending\n   the
      DHCPTLS message to the DHCPv4 server as the first message over\n   the TCP connection.
      \ The DHCPTLS message SHOULD be sent without any\n   options.  This message
      indicates to the DHCPv4 server that a TLS\n   connection over this TCP connection
      is desired.  There are four\n   possibilities after the requestor sends the
      DHCPTLS message to the\n   DHCPV4 server:\n   1.  No response from the DHCPv4
      server.\n   2.  The DHCPv4 server closes the TCP connection after it receives
      the\n       DHCPTLS message.\n   3.  DHCPv4 server responds with a DHCPTLS message
      with a dhcp-status-\n       code of TLSConnectionRefused.\n   4.  DHCPv4 server
      responds with DHCPTLS message with no dhcp-status-\n       code, indicating
      success.\n   In any of the first three possibilities, the DHCPv4 server can
      be\n   assumed to not support TLS.  In this case, the requestor MUST close\n
      \  the connection.\n   In the final possibility, where the DHCPv4 server has
      responded with\n   a DHCPTLS message with no dhcp-status-code in response to
      the\n   requestor's DHCPTLS message, the requestor SHOULD initiate the\n   exchange
      of the messages involved in a TLS handshake [RFC5246].\n   During the TLS handshake,
      the requestor MUST validate the DHCPv4\n   server's digital certificates.\n
      \  If the handshake exchange yields a functioning TLS connection, then\n   the
      requestor SHOULD transmit a DHCPACTIVELEASEQUERY message over\n   that TLS connection
      and use that TLS connection for all further\n   interactions in which it engages
      with the DHCPv4 server over this TCP\n   connection.\n   If the handshake exchange
      does not yield a functioning TLS\n   connection, then the requestor MUST close
      the TCP connection.\n"
    title: 7.2.  Initiating a Connection
  - contents:
    - "7.3.  Forming an Active Leasequery\n   The Active Leasequery is designed to
      create a long-lived connection\n   between the requestor and the DHCPv4 server
      processing the active\n   query.  The DHCPv4 server SHOULD send binding information
      back across\n   this connection with minimal delay after it learns of the binding\n
      \  information.  It will learn about the bindings either because it\n   makes
      the bindings itself or because it has received information\n   about a binding
      from another server.\n   An Active Leasequery is a DHCPv4 request with a dhcp-message-type
      of\n   DHCPACTIVELEASEQUERY.  The DHCPv4 request MUST NOT have a ciaddr, a\n
      \  chaddr, or a dhcp-client-identifier.  The DHCPv4 request MUST have an\n   xid
      (transaction-id) unique on the connection on which it is sent.\n   The DHCPv4
      request SHOULD have a dhcp-parameter-request-list to\n   inform the DHCPv4 server
      which DHCPv4 options are of interest to the\n   requestor sending the DHCPACTIVELEASEQUERY
      message.\n   An important capability of the Active Leasequery is that the\n
      \  requestor can specify that some recent data be sent immediately to\n   the
      requestor in parallel with the transmission of the ongoing\n   binding information
      in more or less real time.  This capability is\n   used in order to allow an
      Active Leasequery requestor to recover\n   missed information in the event that
      it temporarily loses\n   connectivity with the DHCPv4 server processing a previous
      Active\n   Leasequery.\n   This capability is enabled by the transmission of
      a 4-octet base-time\n   option with each Leasequery reply sent as the result
      of a previous\n   Active Leasequery.  The requestor SHOULD keep track of the
      highest\n   base-time received from a particular DHCPv4 server over an Active\n
      \  Leasequery connection, and in the event that the requestor finds it\n   necessary
      (for whatever reason) to reestablish an Active Leasequery\n   connection to
      that DHCPv4 server, the requestor should place this\n   highest base-time value
      into a query-start-time option in the new\n   DHCPACTIVELEASEQUERY request.
      \ (See Sections 6.2.5 and 7.2 of\n   [RFC6926] for information on the query-start-time
      option.)\n   Note that until all of the recent data (catch-up data) has been\n
      \  received, the requestor MUST NOT keep track of the base-time received\n   in
      Leasequery reply messages to use later in a subsequent Bulk\n   Leasequery or
      Active Leasequery request.\n   If the requestor doesn't wish to request an update
      of information\n   missed when it was not connected to the DHCPv4 server, then
      it does\n   not include the query-start-time option in the DHCPACTIVELEASEQUERY\n
      \  request.\n   If the TCP connection becomes blocked or stops being writable
      while\n   the requestor is sending its query, the requestor SHOULD terminate\n
      \  the connection after BULK_LQ_DATA_TIMEOUT.  We make this\n   recommendation
      to allow requestors to control the period of time they\n   are willing to wait
      before abandoning a connection, independent of\n   notifications from the TCP
      implementations they may be using.\n"
    title: 7.3.  Forming an Active Leasequery
  - contents:
    - "7.4.  Processing Active Replies\n   The Requestor attempts to read a DHCPv4
      leasequery reply message from\n   the TCP connection.\n   Note that the connection
      resulting from accepting a\n   DHCPACTIVELEASEQUERY request may be long-lived
      and may not have data\n   transferring continuously during its lifetime.  Therefore,
      the DHCPv4\n   server SHOULD send a DHCPLEASEQUERYSTATUS message with a dhcp-status-\n
      \  code of ConnectionActive every ACTIVE_LQ_IDLE_TIMEOUT seconds\n   (default
      60) in order for the requestor to know that the connection\n   remains alive.
      \ This approach is followed only when the connection is\n   idle (i.e., the
      server has no binding data to send).  During normal\n   binding data exchange,
      receiving DHCPLEASEACTIVE or\n   DHCPLEASEUNASSIGNED messages by the requestor
      itself signifies that\n   the connection is active.  Note that the default for\n
      \  ACTIVE_LQ_RCV_TIMEOUT is 120 seconds, twice the value of the\n   ACTIVE_LQ_IDLE_TIMEOUT's
      default of 60 seconds, which drives the\n   DHCPv4 server to send messages.
      \ Thus, ACTIVE_LQ_RCV_TIMEOUT controls\n   how sensitive the requestor is to
      be to delays by the DHCPv4 server\n   in sending updates or DHCPLEASEQUERYSTATUS
      messages.\n   If the stream of replies becomes blocked with no messages being\n
      \  received, the Requestor SHOULD terminate the connection after\n   ACTIVE_LQ_RCV_TIMEOUT,
      and MAY begin retry processing if configured\n   to do so.\n   A successful
      query that is returning binding data MUST include a non-\n   zero ciaddr.  It
      may also include a non-zero chaddr, htype, and hlen\n   as well as additional
      options.  If there are additional bindings to\n   be returned, they will be
      carried in additional Active Leasequery\n   messages.\n   Any requestor of an
      Active Leasequery operation MUST be prepared to\n   receive multiple copies
      of the binding information for a particular\n   IPv4 address.  See the Bulk
      Leasequery document [RFC6926] for\n   information on how to deal with this situation.\n
      \  A single Active Leasequery can and usually will result in a large\n   number
      of replies.  The Requestor MUST be prepared to receive more\n   than one reply
      with transaction-ids matching a single\n   DHCPACTIVELEASEQUERY message from
      a single DHCPv4 server.\n   A DHCPACTIVELEASEQUERY has two regimes -- during
      the catch-up phase,\n   if any, and after any catch-up phase.  If the DHCPACTIVELASEQUERY\n
      \  request had a query-start-time, then the DHCPACTIVELEASEQUERY starts\n   out
      in the catch-up phase.  See Section 7.4.1 for information on\n   processing
      during the catch-up phase, as well as how to determine\n   when the catch-up
      phase is complete.\n   After the catch-up phase, or during the entire series
      of messages\n   received as the response to a DHCPACTIVELEASEQUERY request with
      no\n   query-start-time (and therefore no catch-up phase), the base-time\n   option
      of the most recent message SHOULD be saved as a record of the\n   most recent
      time that data was received.  This base-time (in the\n   context of the DHCPv4
      server) can be used in a subsequent\n   DHCPACTIVELEASEQUERY message's query-start-time
      or in a\n   DHCPBULKLEASEQUERY message's query-start-time, if one is required,\n
      \  after a loss of the Active Leasequery connection.\n   The DHCPLEASEQUERYSTATUS
      message MAY unilaterally terminate a\n   successful DHCPACTIVELEASEQUERY request
      that is currently in progress\n   in the event that the DHCPv4 server determines
      that it cannot\n   continue processing a DHCPACTIVELEASEQUERY request.  For
      example,\n   when a server is requested to shut down, it SHOULD send a\n   DHCPLEASEQUERYSTATUS
      message with a dhcp-status-code of\n   QueryTerminated and include in the message
      a base-time.  This MUST be\n   the last message on that connection, and once
      the message has been\n   transmitted, the server MUST close the connection.\n
      \  After receiving DHCPLEASEQUERYSTATUS with a QueryTerminated status\n   from
      a server, the Requestor MAY close the TCP connection to that\n   server.\n   The
      DHCPv4 Leasequery protocol uses the associated-ip option as an\n   indicator
      that multiple bindings were present in response to a single\n   client-based
      query.  For Active Leasequery, client-based queries are\n   not supported, and
      so the associated-ip option is not used and MUST\n   NOT be present in replies.\n"
    - contents:
      - "7.4.1.  Processing Replies from a Request Containing a query-start-time\n
        \  If the DHCPACTIVELEASEQUERY was requested with a query-start-time,\n   the
        DHCPv4 server will attempt to send information about all bindings\n   that
        changed since the time specified in the query-start-time.  This\n   is the
        catch-up phase of the DHCPACTIVELEASEQUERY processing.  The\n   DHCPv4 server
        MAY also begin immediate updates over the same\n   connection of real-time
        binding information changes.  Thus, the\n   catch-up phase can run in parallel
        with the normal updates generated\n   by the DHCPACTIVELEASEQUERY request.\n
        \  A DHCPv4 server MAY keep only a limited amount of time-ordered\n   information
        available to respond to a DHCPACTIVELEASEQUERY request\n   containing a query-start-time.
        \ Thus, it is possible that the time\n   specified in the query-start-time
        represents a time not covered by\n   the time-ordered information kept by
        the DHCPv4 server.  In such\n   case, when there is not enough data saved
        in the DHCPv4 server to\n   satisfy the request specified by the query-start-time
        option, the\n   DHCPv4 server will reply immediately with a DHCPLEASEQUERYSTATUS\n
        \  message with a dhcp-status-code of DataMissing with a base-time\n   option
        equal to the server's current time.  This will signal the end\n   of the catch-up
        phase, and the only updates that will subsequently be\n   received on this
        connection are the real-time updates from the\n   DHCPACTIVELEASEQUERY request.\n
        \  If there is enough data saved to satisfy the request, then\n   DHCPLEASEACTIVE
        and DHCPLEASEUNASSIGNED messages will begin arrive\n   from the DHCPv4 server.
        \ Some of these messages will be related to\n   the query-start-time request
        and be part of the catch-up phase.  Some\n   of these messages will be real-time
        updates of binding changes taking\n   place in the DHCPv4 server.  In general,
        there is no way to determine\n   the source of each message.\n   The updates
        sent by the DHCPv4 server during the catch-up phase are\n   not in the order
        that the binding data was updated.  Therefore, until\n   the catch-up phase
        is complete, the latest base-time value received\n   from a DHCPv4 server
        processing an Active Leasequery request cannot\n   be reset from the incoming
        messages (and used in a subsequent Active\n   Leasequery's query-start-time
        option), because to do so would\n   compromise the ability to recover lost
        information if the\n   DHCPACTIVELEASEQUERY were to terminate prior to the
        completion of the\n   catch-up phase.\n   The requestor will know that the
        catch-up phase is complete because\n   the DHCPv4 server will transmit a DHCPLEASEQUERYSTATUS
        message with\n   the dhcp-status-code of CatchUpComplete (or, as discussed
        above,\n   DataMissing).  Once this message is transmitted, all additional\n
        \  DHCPLEASEACTIVE and DHCPLEASEUNASSIGNED messages will relate to real-\n
        \  time (\"new\") binding changes in the DHCPv4 server.\n   As discussed in
        Section 6.3, the requestor SHOULD keep track of the\n   latest base-time option
        value received over a particular connection,\n   to be used in a subsequent
        DHCPACTIVELEASEQUERY request -- but only\n   if the catch-up phase is complete.
        \ Prior to the completion of the\n   catch-up phase, if the connection should
        go away or if the requestor\n   receives a DHCPLEASEQUERYDONE message, then
        when it reconnects it\n   MUST use the base-time value from the previous connection
        and not any\n   base-time value received from the recently closed connection.\n
        \  In the event that there was enough data available to the DHCPv4\n   server
        to begin to satisfy the request implied by the query-start-\n   time option,
        but during the processing of that data the server found\n   that it was unable
        to continue (perhaps there was barely enough, the\n   connection was very
        slow, and the aging algorithm caused the saved\n   data to become unavailable),
        the DHCPv4 server will terminate the\n   catch-up phase of processing immediately
        by sending a\n   DHCPLEASEQUERYSTATUS message with a dhcp-status-code of DataMissing\n
        \  and with a base-time option of the current time.\n   The requestor must
        not assume that every individual state change of\n   every binding during
        the period from the time specified in the query-\n   start-time and the present
        is replicated in an Active Leasequery\n   reply message.  See Section 6.  The
        requestor MAY assume that at\n   least one Active Leasequery reply message
        will exist for every\n   binding that had one or more changes of state during
        the period\n   specified by the query-start-time and the current time.  The
        last\n   message for each binding will contain the state at the current time,\n
        \  and there can be one or more messages concerning a single binding\n   during
        the catch-up phase of processing.\n   Bindings can change multiple times while
        the requestor is not\n   connected.  The requestor will only receive information
        about the\n   current state of the binding, not information about each state
        change\n   that occurred during the period from the query-start-time to the\n
        \  present.\n   If the DHCPLEASEQUERYSTATUS message containing a dhcp-status-code
        of\n   DataMissing is received and the requestor is interested in keeping\n
        \  its database up to date with respect to the current state of the\n   bindings
        in the DHCPv4 server, then the requestor SHOULD issue a\n   DHCPBULKLEASEQUERY
        request to recover the information missing from\n   its database.  This DHCPBULKLEASEQUERY
        should include a query-start-\n   time option, set to the same value as the
        query-start-time option\n   previously included in the DHCPACTIVELEASEQUERY
        responses from the\n   DHCPv4 server, and a query-end-time option equal to
        the base-time\n   option returned by the DHCPv4 server in the DHCPLEASEQUERYSTATUS\n
        \  message with the dhcp-status-code of DataMissing.\n   Typically, the requestor
        would have one connection open to a DHCPv4\n   server for a DHCPACTIVELEASEQUERY
        request and possibly one additional\n   connection open for a DHCPBULKLEASEQUERY
        request to the same DHCPv4\n   server to fill in the data that might have
        been missed prior to the\n   initiation of the DHCPACTIVELEASEQUERY.  The
        Bulk Leasequery\n   connection would typically run to completion and be closed,
        leaving\n   one Active Leasequery connection open to a single DHCPv4 server.\n"
      title: 7.4.1.  Processing Replies from a Request Containing a query-start-time
    title: 7.4.  Processing Active Replies
  - contents:
    - "7.5.  Closing Connections\n   The Requestor or DHCPv4 leasequery server MAY
      close its end of the\n   TCP connection at any time.  The Requestor MAY choose
      to retain the\n   connection if it intends to issue additional queries.  Note
      that this\n   requestor behavior does not guarantee that the connection will
      be\n   available for additional queries: the server might decide to close\n
      \  the connection based on its own configuration.\n"
    title: 7.5.  Closing Connections
  title: 7.  Requestor Behavior
- contents:
  - "8.  Server Behavior\n   A DHCPv4 server that supports Active Leasequery MUST
    support Bulk\n   Leasequery [RFC6926] as well.\n"
  - contents:
    - "8.1.  Accepting Connections\n   DHCPv4 servers that implement DHCPv4 Active
      Leasequery listen for\n   incoming TCP connections.  The approach used in accepting
      the\n   requestor's connection is the same as specified in DHCPv4 Bulk\n   Leasequery
      [RFC6926], with the exception that support for Active\n   Leasequery MUST NOT
      be enabled by default, and MUST require an\n   explicit configuration step to
      be performed before it will operate.\n   DHCPv4 servers SHOULD be able to operate
      in either insecure or secure\n   mode.  See Section 9.  This MAY be a mode that
      is administratively\n   controlled, where the server will require a TLS connection
      to operate\n   or will only operate without a TLS connection.  In either case,\n
      \  operation in insecure mode MUST NOT be the default, even if operation\n   in
      secure mode is not supported.  Operation in insecure mode MUST\n   always require
      an explicit configuration step, separate from the\n   configuration step required
      to enable support for Active Leasequery.\n   When operating in insecure mode,
      the DHCPv4 server simply waits for\n   the requestor to send the Active Leasequery
      after the establishment\n   of TCP connection.  If it receives a DHCPTLS message,
      it will respond\n   with TLSConnectionRefused in a DHCPTLS message.\n   When
      operating in secure mode, DHCPv4 servers MUST support TLS\n   [RFC5246] to protect
      the integrity and privacy of the data\n   transmitted over the TCP connection.
      \ When operating in secure mode,\n   DHCPv4 servers MUST be configurable with
      regard to which requestors\n   they will communicate.  The certificate presented
      by a requestor when\n   initiating the TLS connection is used to distinguish
      between\n   acceptable and unacceptable requestors.\n   When operating in secure
      mode, a DHCPv4 server MUST begin to\n   negotiate a TLS connection with a requestor
      who asks for one, and\n   MUST close TCP connections that are not secured with
      TLS or for which\n   the requestor's certificate is deemed unacceptable.  The\n
      \  recommendations in [RFC7525] apply when negotiating a TLS connection.\n   A
      requestor will request a TLS connection by sending a DHCPTLS as the\n   first
      message over a newly created TCP connection.  If the DHCPv4\n   server supports
      TLS connections and has not been configured to not\n   allow them on this link,
      the DHCPv4 server MUST respond to this\n   DHCPTLS message by sending a DHCPTLS
      message with no dhcp-status-code\n   back to the requestor.  This indicates
      to the requestor that the\n   DHCPv4 server will support the negotiation of
      a TLS connection over\n   this existing TCP connection.\n   If a connection
      is to be rejected because of a limitation of the\n   number of open connections,
      the TCP connection itself should be\n   rejected, or the subsequent ACTIVELEASEQUERY
      message should be\n   rejected.  Capacity-related rejections SHOULD NOT affect
      the response\n   to the DHCPTLS message.\n   Any options appearing in a DHCPTLS
      message received by a DHCPv4\n   server SHOULD be ignored.  This is a \"SHOULD\"
      instead of a \"MUST\" in\n   order to allow use of the DHCPTLS message in later
      documents,\n   possibly with the use of options, without requiring those documents\n
      \  to update this document.\n   If for some reason the DHCPv4 server cannot
      support or has been\n   configured to not support a TLS connection, then it
      sends a DHCPTLS\n   message with a dhcp-status-code of TLSConnectionRefused
      back to the\n   requestor.\n   In the event that the DHCPv4 server sends a DHCPTLS
      message with no\n   dhcp-status-code option included (which indicates success),
      the\n   requestor is supposed to initiate a TLS handshake [RFC5246] (see\n   Section
      7.2).  During the TLS handshake, the DHCPv4 server MUST\n   validate the requestor's
      digital certificate.  In addition, the\n   digital certificate presented by
      the requestor is used to decide if\n   this requestor is allowed to perform
      an Active Leasequery.  If this\n   requestor's certificate is deemed unacceptable,
      the server MUST abort\n   the creation of the TLS connection.\n   All TLS connections
      established between a requestor and a DHCPv4\n   server for the purposes of
      supporting Active Leasequery MUST be\n   mutually authenticated.\n   If the
      TLS handshake is not successful in creating a TLS connection,\n   the server
      MUST close the TCP connection.\n   If the TCP connection becomes blocked while
      the server is accepting a\n   connection or reading a query, it SHOULD terminate
      the connection\n   after a BULK_LQ_DATA_TIMEOUT.  We make this recommendation
      to allow\n   servers to control the period of time they are willing to wait
      before\n   abandoning an inactive connection, independent of the TCP\n   implementations
      they may be using.\n"
    - contents:
      - "8.1.1.  Update to RFC 6926\n   In an update to the DHCPv4 Bulk Leasequery
        protocol [RFC6926] (which\n   didn't discuss this situation explicitly), if
        the DHCPv4 server\n   receives a DHCPv4 message containing a dhcp-message-type
        option with\n   a value that is not supported over a TCP connection, it MUST
        close\n   the TCP connection.\n"
      title: 8.1.1.  Update to RFC 6926
    title: 8.1.  Accepting Connections
  - contents:
    - "8.2.  Replying to an Active Leasequery\n   If the connection becomes blocked
      while the server is attempting to\n   send reply messages, the server SHOULD
      terminate the TCP connection\n   after ACTIVE_LQ_SEND_TIMEOUT.  This timeout
      governs how long the\n   DHCPv4 server is prepared to wait for the requestor
      to read and\n   process enough information to unblock the TCP connection.  The\n
      \  default is two minutes, which means that if more than two minutes\n   goes
      by without the requestor reading enough information to unblock\n   the TCP connection,
      the DHCPv4 server SHOULD close the TCP\n   connection.\n   If the DHCPv4 server
      encounters an error during processing of the\n   DHCPACTIVELEASEQUERY message,
      either during initial processing or\n   later during the message processing,
      it SHOULD send a\n   DHCPLEASEQUERYSTATUS containing an error code of some kind
      in a dhcp-\n   status-code option.  It SHOULD close the connection after this
      error\n   is signaled.\n   Every reply to a DHCPACTIVELEASEQUERY request MUST
      contain the\n   information specified in replies to a DHCPBULKLEASEQUERY request\n
      \  [RFC6926], with the exception that a server implementing Active\n   Leasequery
      SHOULD be able to be configured to prevent specific data\n   items from being
      sent to the requestor even if these data items were\n   requested in the dhcp-parameter-request-list
      option.\n   Some servers can be configured to respond to a DHCPv4 Leasequery\n
      \  [RFC4388] or a DHCPBULKLEASEQUERY [RFC6926] for an IPv4 binding that\n   is
      reserved in such a way that it appears that the IPv4 binding is\n   leased to
      the DHCP client for which it is reserved.  These servers\n   SHOULD also respond
      to a DHCPACTIVELEASEQUERY request with the same\n   information as they would
      to a DHCPBULKLEASEQUERY request when they\n   first determine that the IPv4
      binding is reserved to a DHCP client.\n   If a DHCPACTIVELEASEQUERY request
      contains a query-start-time option,\n   it indicates that the requestor would
      like the DHCPv4 server to send\n   it not only messages that correspond to DHCPv4
      binding activity that\n   occurs subsequent to the receipt of the DHCPLEASEACTIVE
      request, but\n   also messages that correspond to DHCPv4 binding activity that\n
      \  occurred prior to the DHCPACTIVELEASEQUERY request.\n   If a query-end-time
      option appears in a DHCPACTIVELEASEQUERY the\n   DHCPv4 server should send a
      DHCPLEASEQUERYSTATUS message with a dhcp-\n   status-code of MalformedQuery
      and terminate the connection.\n   In order to implement a meaningful response
      to this query, the DHCPv4\n   server MAY keep track of the binding activity
      and associate changes\n   with particular base-time values from the messages.
      \ Then, when\n   requested to do so by a DHCPACTIVELEASEQUERY request containing
      a\n   query-start-time option, the DHCPv4 server can respond with replies\n
      \  for all binding activity occurring on that query-start-time or later\n   times.\n
      \  These replies based on the query-start-time MAY be interleaved with\n   the
      messages generated due to current binding activity.\n   Once the transmission
      of the DHCPv4 Leasequery messages associated\n   with the query-start-time option
      are complete, a DHCPLEASEQUERYSTATUS\n   message MUST be sent with a dhcp-status-code
      value of\n   CatchUpComplete.\n   The DHCPv4 server SHOULD keep track of previous
      binding activity.  It\n   SHOULD limit the amount of previous binding activity
      it keeps track\n   of.  The DHCPv4 server MAY choose to only do this in the
      event that\n   it has received at least one DHCPACTIVELEASEQUERY request in
      the\n   past, as to do so will almost certainly entail some utilization of\n
      \  resources that would be wasted if there are no DHCPACTIVELEASEQUERY\n   requestors
      for this DHCPv4 server.  The DHCPv4 server SHOULD make the\n   amount of previous
      binding activity it retains configurable.  There\n   is no requirement on the
      DHCPv4 server to retain this information\n   over a server restart (or even
      to retain such information at all).\n   Unless there is an error or some requirement
      to cease processing a\n   DHCPACTIVELEASEQUERY request yielding a DHCPLEASEQUERYSTATUS
      message,\n   such as a server shutdown, there will be no DHCPLEASEQUERYSTATUS\n
      \  message at the conclusion of the DHCPACTIVELEASEQUERY processing\n   because
      that processing will not conclude but will continue until\n   either the requestor
      or the server closes the connection.\n   While the form of the data being sent
      by a DHCPACTIVELEASEQUERY is\n   essentially the same as that being sent by
      a DHCPBULKLEASEQUERY, the\n   reasons for sending information differs considerably
      between these\n   two capabilities.  In the DHCPBULKLEASEQUERY context, the
      entire\n   contents of the lease state database (subject to the constraints
      of\n   the various query options) are returned to the requestor.  In the\n   DHCPACTIVELEASEQUERY
      context, changes to the lease state database are\n   returned to the requestor
      essentially as they happen.  For instance,\n   when an IPv4 binding transitions
      from the leased state to some other\n   state, the DHCPACTIVELEASEQUERY will
      send a DHCPLEASEUNASSIGNED\n   packet with information regarding that binding.
      \ The server may then\n   entirely forget about that IPv4 binding (or not),
      but it is important\n   to tell the DHCPACTIVELEASEQUERY requestor that a binding
      has\n   transitioned away from the leased state.\n   The relationship between
      the time that the server replies to a DHCP\n   client request and the time that
      the DHCP server sends a reply to a\n   DHCPACTIVELEASEQUERY message is a matter
      of implementation (and thus\n   not defined by this document).  However, the
      server SHOULD NOT delay\n   responding to the DHCP client in order to transmit
      a reply to a\n   DHCPACTIVELEASEQUERY message, and the server SHOULD send the
      reply to\n   the DHCPACTIVELASEQUERY message as soon as possible after responding\n
      \  to the client.\n"
    title: 8.2.  Replying to an Active Leasequery
  - contents:
    - "8.3.  Multiple or Parallel Queries\n   Every Active Leasequery request MUST
      be made on a single TCP\n   connection where there is no other request active
      at the time the\n   request is made.  Note that this is different than what
      was allowed\n   in Section 7.7 of [RFC6926] for Bulk Leasequery requests.\n
      \  Typically, a requestor of an Active Leasequery would not need to send\n   a
      second Active Leasequery while the first is still active.  However,\n   sending
      an Active Leasequery and a Bulk Leasequery in parallel would\n   be possible
      and reasonable.  In case of parallel Active and Bulk\n   Leasequery requests,
      the requestor MUST use different connections.\n   This MAY be a feature that
      is administratively controlled.  Servers\n   that are able to process queries
      in parallel SHOULD offer\n   configuration that limits the number of simultaneous
      queries\n   permitted from any one requestor, in order to control resource use
      if\n   there are multiple requestors seeking service.\n"
    title: 8.3.  Multiple or Parallel Queries
  - contents:
    - "8.4.  Closing Connections\n   The server MAY end communication by sending a
      DHCPLEASEQUERYSTATUS\n   message and then immediately closing the TCP connection.\n
      \  Alternatively, the server MAY retain the connection and wait for\n   additional
      queries from the requestor.  The server SHOULD limit the\n   number of connections
      it maintains and SHOULD close idle connections\n   to enforce the limit.\n   The
      server MUST close its end of the TCP connection if it encounters\n   an error
      sending data on the connection.  The server MUST close its\n   end of the TCP
      connection if it finds that it has to abort an in-\n   process request.  A server
      aborting an in-process request SHOULD\n   attempt to signal that to its requestors
      by using the QueryTerminated\n   status code in the dhcp-status-code option
      in a DHCPLEASEQUERYSTATUS\n   message.  If the server detects that the requestor
      end has been\n   closed, the server MUST close its end of the connection.\n"
    title: 8.4.  Closing Connections
  title: 8.  Server Behavior
- contents:
  - "9.  Security Considerations\n   The Security Considerations section of [RFC2131]
    details the general\n   threats to DHCPv4.  The DHCPv4 Leasequery specification
    [RFC4388]\n   describes recommendations for the Leasequery protocol, especially\n
    \  with regard to relayed LEASEQUERY messages, mitigation of packet-\n   flooding
    DoS attacks, restriction to trusted requestors, and use of\n   IPsec [RFC4301].\n
    \  The use of TCP introduces some additional concerns.  Attacks that\n   attempt
    to exhaust the DHCPv4 server's available TCP connection\n   resources can compromise
    the ability of legitimate clients to receive\n   service.  Malicious requestors
    who succeed in establishing\n   connections, but who then send invalid queries,
    partial queries, or\n   no queries at all also can exhaust a server's pool of
    available\n   connections.\n   Two modes of operation exist for this protocol,
    insecure mode and\n   secure mode.  These two modes exist because there are essentially
    two\n   models of use for this protocol.  In one model, the requestor of an\n
    \  Active Leasequery is connected to the Internet in an arbitrary\n   location,
    and the information transmitted needs to be protected\n   during transmission.
    \ In addition, the identities of both requestor\n   and server need to be verified.
    \ For this model of use, the secure\n   mode is appropriate.\n   The other model
    of use is where the requestor of the Active\n   Leasequery resides in a network
    element that is essentially \"next to\"\n   the element containing the DHCP server,
    and both of these elements\n   are inside a protected environment.  For this model,
    the insecure\n   mode is sufficient since there are other, more global, protections
    in\n   place to protect this information.\n   When operating in secure mode, TLS
    [RFC5246] is used to secure the\n   connection.  The recommendations in [RFC7525]
    apply when negotiating\n   a TLS connection.\n   Operating in insecure mode (see
    Section 8.1) does not provide any way\n   to validate the authorization of requestors
    of a DHCPV4 Active\n   Leasequery request.\n   Servers SHOULD offer configuration
    parameters to limit the sources of\n   incoming connections through validation
    and use of the digital\n   certificates presented to create a TLS connection.
    \ They SHOULD also\n   limit the number of accepted connections and limit the
    period of time\n   during which an idle connection will be left open.\n   The
    data acquired by using an Active Leasequery is subject to the\n   same potential
    abuse as the data held by the DHCPv4 server from which\n   it was acquired and
    SHOULD be secured by mechanisms as strong as\n   those used for the data held
    by that DHCPv4 server.  The data\n   acquired by using an Active Leasequery SHOULD
    be deleted as soon as\n   possible after the use for which it was acquired has
    passed.\n   Servers that implement the Bulk Leasequery protocol [RFC6926] but
    do\n   not implement the Active Leasequery protocol SHOULD implement the\n   update
    to [RFC6926] discussed in Section 8.1.1.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  IANA Considerations\n   IANA has assigned the following new DHCP message
    types from the\n   registry \"DHCP Message Type 53 Values\" maintained at\n   <http://www.iana.org/assignments/bootp-dhcp-parameters>:\n
    \  1.  A dhcp-message-type of 16 for DHCPACTIVELEASEQUERY.\n   2.  A dhcp-message-type
    of 17 for DHCPLEASEQUERYSTATUS.\n   3.  A dhcp-message-type of 18 for DHCPTLS.\n
    \  IANA has assigned the following new DHCP status codes from the\n   registry
    \"DHCP Status Code Type 151 Values\" maintained at\n   <http://www.iana.org/assignments/bootp-dhcp-parameters>:\n
    \                 +----------------------+-------------+\n                  |
    Name                 | Status-Code |\n                  +----------------------+-------------+\n
    \                 | DataMissing          | 5           |\n                  |
    ConnectionActive     | 6           |\n                  | CatchUpComplete      |
    7           |\n                  | TLSConnectionRefused | 8           |\n                  +----------------------+-------------+\n"
  title: 10.  IANA Considerations
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC2131]  Droms, R., \"Dynamic Host Configuration Protocol\",\n              RFC
      2131, DOI 10.17487/RFC2131, March 1997,\n              <http://www.rfc-editor.org/info/rfc2131>.\n
      \  [RFC4388]  Woundy, R. and K. Kinnear, \"Dynamic Host Configuration\n              Protocol
      (DHCP) Leasequery\", RFC 4388,\n              DOI 10.17487/RFC4388, February
      2006,\n              <http://www.rfc-editor.org/info/rfc4388>.\n   [RFC5246]
      \ Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC6926]
      \ Kinnear, K., Stapp, M., Desetti, R., Joshi, B., Russell,\n              N.,
      Kurapati, P., and B. Volz, \"DHCPv4 Bulk Leasequery\",\n              RFC 6926,
      DOI 10.17487/RFC6926, April 2013,\n              <http://www.rfc-editor.org/info/rfc6926>.\n
      \  [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations
      for Secure Use of Transport Layer\n              Security (TLS) and Datagram
      Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,
      May\n              2015, <http://www.rfc-editor.org/info/rfc7525>.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [RFC951]   Croft, W. and J. Gilmore, \"Bootstrap
      Protocol\", RFC 951,\n              DOI 10.17487/RFC0951, September 1985,\n
      \             <http://www.rfc-editor.org/info/rfc951>.\n   [RFC1542]  Wimer,
      W., \"Clarifications and Extensions for the\n              Bootstrap Protocol\",
      RFC 1542, DOI 10.17487/RFC1542,\n              October 1993, <http://www.rfc-editor.org/info/rfc1542>.\n
      \  [RFC2132]  Alexander, S. and R. Droms, \"DHCP Options and BOOTP Vendor\n
      \             Extensions\", RFC 2132, DOI 10.17487/RFC2132, March 1997,\n              <http://www.rfc-editor.org/info/rfc2132>.\n
      \  [RFC4301]  Kent, S. and K. Seo, \"Security Architecture for the\n              Internet
      Protocol\", RFC 4301, DOI 10.17487/RFC4301,\n              December 2005, <http://www.rfc-editor.org/info/rfc4301>.\n
      \  [RFC7414]  Duke, M., Braden, R., Eddy, W., Blanton, E., and A.\n              Zimmermann,
      \"A Roadmap for Transmission Control Protocol\n              (TCP) Specification
      Documents\", RFC 7414,\n              DOI 10.17487/RFC7414, February 2015,\n
      \             <http://www.rfc-editor.org/info/rfc7414>.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Acknowledgments\n   The ideas in this document came in part from work in DHCPv6
    and\n   DHCPv4 Bulk Leasequery as well as from in depth discussions between\n
    \  the authors.  Useful review comments by Ted Lemon, Scott Bradner,\n   Francis
    Dupont, and Stephen Farrell on drafts for DHCPv6 Active\n   Leasequery were also
    included in this draft.  Brian Haberman's review\n   brought this document into
    much closer alignment with DHCPv6 Active\n   Leasequery.  Additional reviews by
    Alissa Cooper, Spencer Dawkins,\n   Christer Holmberg, and Ben Campbell added
    clarity to this document.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Kim Kinnear\n   Cisco Systems, Inc.\n   1414 Massachusetts
    Ave\n   Boxborough, MA  01719\n   United States\n   Email: kkinnear@cisco.com\n
    \  Mark Stapp\n   Cisco Systems, Inc.\n   1414 Massachusetts Ave\n   Boxborough,
    MA  01719\n   United States\n   Email: mjs@cisco.com\n   Bernie Volz\n   Cisco
    Systems, Inc.\n   1414 Massachusetts Ave\n   Boxborough, MA  01719\n   United
    States\n   Email: volz@cisco.com\n   Neil Russell\n   Staples\n   500 Staples
    Drive\n   Framingham, MA  01702\n   United States\n   Email: neil.e.russell@gmail.com\n"
  title: Authors' Addresses
