- title: __initial_text__
  contents:
  - '              UTF-8, a transformation format of ISO 10646

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   ISO/IEC 10646-1 defines a large character set called the Universal\n\
    \   Character Set (UCS) which encompasses most of the world's writing\n   systems.\
    \  The originally proposed encodings of the UCS, however, were\n   not compatible\
    \ with many current applications and protocols, and this\n   has led to the development\
    \ of UTF-8, the object of this memo.  UTF-8\n   has the characteristic of preserving\
    \ the full US-ASCII range,\n   providing compatibility with file systems, parsers\
    \ and other software\n   that rely on US-ASCII values but are transparent to other\
    \ values.\n   This memo obsoletes and replaces RFC 2279.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Notational conventions . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  UTF-8 definition . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   4.  Syntax of UTF-8 Byte Sequences . . . . . . . . . . . . .\
    \ . . .  5\n   5.  Versions of the standards  . . . . . . . . . . . . . . . .\
    \ . .  6\n   6.  Byte order mark (BOM)  . . . . . . . . . . . . . . . . . . .\
    \ .  6\n   7.  Examples . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  8\n   8.  MIME registration  . . . . . . . . . . . . . . . . . . . . . .  9\n\
    \   9.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 10\n  \
    \ 10. Security Considerations  . . . . . . . . . . . . . . . . . . . 10\n   11.\
    \ Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 11\n   12. Changes\
    \ from RFC 2279  . . . . . . . . . . . . . . . . . . . . 11\n   13. Normative\
    \ References . . . . . . . . . . . . . . . . . . . . . 12\n   14. Informative\
    \ References . . . . . . . . . . . . . . . . . . . . 12\n   15. URI's  . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 13\n   16. Intellectual Property\
    \ Statement  . . . . . . . . . . . . . . . 13\n   17. Author's Address . . . .\
    \ . . . . . . . . . . . . . . . . . . . 13\n   18. Full Copyright Statement .\
    \ . . . . . . . . . . . . . . . . . . 14\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   ISO/IEC 10646 [ISO.10646] defines a large character set called\
    \ the\n   Universal Character Set (UCS), which encompasses most of the world's\n\
    \   writing systems.  The same set of characters is defined by the\n   Unicode\
    \ standard [UNICODE], which further defines additional\n   character properties\
    \ and other application details of great interest\n   to implementers.  Up to\
    \ the present time, changes in Unicode and\n   amendments and additions to ISO/IEC\
    \ 10646 have tracked each other, so\n   that the character repertoires and code\
    \ point assignments have\n   remained in sync.  The relevant standardization committees\
    \ have\n   committed to maintain this very useful synchronism.\n   ISO/IEC 10646\
    \ and Unicode define several encoding forms of their\n   common repertoire: UTF-8,\
    \ UCS-2, UTF-16, UCS-4 and UTF-32.  In an\n   encoding form, each character is\
    \ represented as one or more encoding\n   units.  All standard UCS encoding forms\
    \ except UTF-8 have an encoding\n   unit larger than one octet, making them hard\
    \ to use in many current\n   applications and protocols that assume 8 or even\
    \ 7 bit characters.\n   UTF-8, the object of this memo, has a one-octet encoding\
    \ unit.  It\n   uses all bits of an octet, but has the quality of preserving the\
    \ full\n   US-ASCII [US-ASCII] range: US-ASCII characters are encoded in one\n\
    \   octet having the normal US-ASCII value, and any octet with such a\n   value\
    \ can only stand for a US-ASCII character, and nothing else.\n   UTF-8 encodes\
    \ UCS characters as a varying number of octets, where the\n   number of octets,\
    \ and the value of each, depend on the integer value\n   assigned to the character\
    \ in ISO/IEC 10646 (the character number,\n   a.k.a. code position, code point\
    \ or Unicode scalar value).  This\n   encoding form has the following characteristics\
    \ (all values are in\n   hexadecimal):\n   o  Character numbers from U+0000 to\
    \ U+007F (US-ASCII repertoire)\n      correspond to octets 00 to 7F (7 bit US-ASCII\
    \ values).  A direct\n      consequence is that a plain ASCII string is also a\
    \ valid UTF-8\n      string.\n   o  US-ASCII octet values do not appear otherwise\
    \ in a UTF-8 encoded\n      character stream.  This provides compatibility with\
    \ file systems\n      or other software (e.g., the printf() function in C libraries)\n\
    \      that parse based on US-ASCII values but are transparent to other\n    \
    \  values.\n   o  Round-trip conversion is easy between UTF-8 and other encoding\n\
    \      forms.\n   o  The first octet of a multi-octet sequence indicates the number\
    \ of\n      octets in the sequence.\n   o  The octet values C0, C1, F5 to FF never\
    \ appear.\n   o  Character boundaries are easily found from anywhere in an octet\n\
    \      stream.\n   o  The byte-value lexicographic sorting order of UTF-8 strings\
    \ is the\n      same as if ordered by character numbers.  Of course this is of\n\
    \      limited interest since a sort order based on character numbers is\n   \
    \   almost never culturally valid.\n   o  The Boyer-Moore fast search algorithm\
    \ can be used with UTF-8 data.\n   o  UTF-8 strings can be fairly reliably recognized\
    \ as such by a\n      simple algorithm, i.e., the probability that a string of\n\
    \      characters in any other encoding appears as valid UTF-8 is low,\n     \
    \ diminishing with increasing string length.\n   UTF-8 was devised in September\
    \ 1992 by Ken Thompson, guided by design\n   criteria specified by Rob Pike, with\
    \ the objective of defining a UCS\n   transformation format usable in the Plan9\
    \ operating system in a non-\n   disruptive manner.  Thompson's design was stewarded\
    \ through\n   standardization by the X/Open Joint Internationalization Group XOJIG\n\
    \   (see [FSS_UTF]), bearing the names FSS-UTF (variant FSS/UTF), UTF-2\n   and\
    \ finally UTF-8 along the way.\n"
- title: 2.  Notational conventions
  contents:
  - "2.  Notational conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   UCS characters are designated by the U+HHHH notation, where\
    \ HHHH is a\n   string of from 4 to 6 hexadecimal digits representing the character\n\
    \   number in ISO/IEC 10646.\n"
- title: 3.  UTF-8 definition
  contents:
  - "3.  UTF-8 definition\n   UTF-8 is defined by the Unicode Standard [UNICODE].\
    \  Descriptions and\n   formulae can also be found in Annex D of ISO/IEC 10646-1\
    \ [ISO.10646]\n   In UTF-8, characters from the U+0000..U+10FFFF range (the UTF-16\n\
    \   accessible range) are encoded using sequences of 1 to 4 octets.  The\n   only\
    \ octet of a \"sequence\" of one has the higher-order bit set to 0,\n   the remaining\
    \ 7 bits being used to encode the character number.  In a\n   sequence of n octets,\
    \ n>1, the initial octet has the n higher-order\n   bits set to 1, followed by\
    \ a bit set to 0.  The remaining bit(s) of\n   that octet contain bits from the\
    \ number of the character to be\n   encoded.  The following octet(s) all have\
    \ the higher-order bit set to\n   1 and the following bit set to 0, leaving 6\
    \ bits in each to contain\n   bits from the character to be encoded.\n   The table\
    \ below summarizes the format of these different octet types.\n   The letter x\
    \ indicates bits available for encoding bits of the\n   character number.\n  \
    \ Char. number range  |        UTF-8 octet sequence\n      (hexadecimal)    |\
    \              (binary)\n   --------------------+---------------------------------------------\n\
    \   0000 0000-0000 007F | 0xxxxxxx\n   0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n\
    \   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n   0001 0000-0010 FFFF |\
    \ 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n   Encoding a character to UTF-8 proceeds\
    \ as follows:\n   1.  Determine the number of octets required from the character\
    \ number\n       and the first column of the table above.  It is important to\
    \ note\n       that the rows of the table are mutually exclusive, i.e., there\
    \ is\n       only one valid way to encode a given character.\n   2.  Prepare the\
    \ high-order bits of the octets as per the second\n       column of the table.\n\
    \   3.  Fill in the bits marked x from the bits of the character number,\n   \
    \    expressed in binary.  Start by putting the lowest-order bit of\n       the\
    \ character number in the lowest-order position of the last\n       octet of the\
    \ sequence, then put the next higher-order bit of the\n       character number\
    \ in the next higher-order position of that octet,\n       etc.  When the x bits\
    \ of the last octet are filled in, move on to\n       the next to last octet,\
    \ then to the preceding one, etc. until all\n       x bits are filled in.\n  \
    \ The definition of UTF-8 prohibits encoding character numbers between\n   U+D800\
    \ and U+DFFF, which are reserved for use with the UTF-16\n   encoding form (as\
    \ surrogate pairs) and do not directly represent\n   characters.  When encoding\
    \ in UTF-8 from UTF-16 data, it is necessary\n   to first decode the UTF-16 data\
    \ to obtain character numbers, which\n   are then encoded in UTF-8 as described\
    \ above.  This contrasts with\n   CESU-8 [CESU-8], which is a UTF-8-like encoding\
    \ that is not meant for\n   use on the Internet.  CESU-8 operates similarly to\
    \ UTF-8 but encodes\n   the UTF-16 code values (16-bit quantities) instead of\
    \ the character\n   number (code point).  This leads to different results for\
    \ character\n   numbers above 0xFFFF; the CESU-8 encoding of those characters\
    \ is NOT\n   valid UTF-8.\n   Decoding a UTF-8 character proceeds as follows:\n\
    \   1.  Initialize a binary number with all bits set to 0.  Up to 21 bits\n  \
    \     may be needed.\n   2.  Determine which bits encode the character number\
    \ from the number\n       of octets in the sequence and the second column of the\
    \ table\n       above (the bits marked x).\n   3.  Distribute the bits from the\
    \ sequence to the binary number, first\n       the lower-order bits from the last\
    \ octet of the sequence and\n       proceeding to the left until no x bits are\
    \ left.  The binary\n       number is now equal to the character number.\n   Implementations\
    \ of the decoding algorithm above MUST protect against\n   decoding invalid sequences.\
    \  For instance, a naive implementation may\n   decode the overlong UTF-8 sequence\
    \ C0 80 into the character U+0000,\n   or the surrogate pair ED A1 8C ED BE B4\
    \ into U+233B4.  Decoding\n   invalid sequences may have security consequences\
    \ or cause other\n   problems.  See Security Considerations (Section 10) below.\n"
- title: 4.  Syntax of UTF-8 Byte Sequences
  contents:
  - "4.  Syntax of UTF-8 Byte Sequences\n   For the convenience of implementors using\
    \ ABNF, a definition of UTF-8\n   in ABNF syntax is given here.\n   A UTF-8 string\
    \ is a sequence of octets representing a sequence of UCS\n   characters.  An octet\
    \ sequence is valid UTF-8 only if it matches the\n   following syntax, which is\
    \ derived from the rules for encoding UTF-8\n   and is expressed in the ABNF of\
    \ [RFC2234].\n   UTF8-octets = *( UTF8-char )\n   UTF8-char   = UTF8-1 / UTF8-2\
    \ / UTF8-3 / UTF8-4\n   UTF8-1      = %x00-7F\n   UTF8-2      = %xC2-DF UTF8-tail\n\
    \   UTF8-3      = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) /\n        \
    \         %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )\n   UTF8-4      = %xF0\
    \ %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) /\n                 %xF4 %x80-8F\
    \ 2( UTF8-tail )\n   UTF8-tail   = %x80-BF\n   NOTE -- The authoritative definition\
    \ of UTF-8 is in [UNICODE].  This\n   grammar is believed to describe the same\
    \ thing Unicode describes, but\n   does not claim to be authoritative.  Implementors\
    \ are urged to rely\n   on the authoritative source, rather than on this ABNF.\n"
- title: 5.  Versions of the standards
  contents:
  - "5.  Versions of the standards\n   ISO/IEC 10646 is updated from time to time\
    \ by publication of\n   amendments and additional parts; similarly, new versions\
    \ of the\n   Unicode standard are published over time.  Each new version obsoletes\n\
    \   and replaces the previous one, but implementations, and more\n   significantly\
    \ data, are not updated instantly.\n   In general, the changes amount to adding\
    \ new characters, which does\n   not pose particular problems with old data. \
    \ In 1996, Amendment 5 to\n   the 1993 edition of ISO/IEC 10646 and Unicode 2.0\
    \ moved and expanded\n   the Korean Hangul block, thereby making any previous\
    \ data containing\n   Hangul characters invalid under the new version.  Unicode\
    \ 2.0 has the\n   same difference from Unicode 1.1.  The justification for allowing\n\
    \   such an incompatible change was that there were no major\n   implementations\
    \ and no significant amounts of data containing Hangul.\n   The incident has been\
    \ dubbed the \"Korean mess\", and the relevant\n   committees have pledged to\
    \ never, ever again make such an\n   incompatible change (see Unicode Consortium\
    \ Policies [1]).\n   New versions, and in particular any incompatible changes,\
    \ have\n   consequences regarding MIME charset labels, to be discussed in MIME\n\
    \   registration (Section 8).\n"
- title: 6.  Byte order mark (BOM)
  contents:
  - "6.  Byte order mark (BOM)\n   The UCS character U+FEFF \"ZERO WIDTH NO-BREAK\
    \ SPACE\" is also known\n   informally as \"BYTE ORDER MARK\" (abbreviated \"\
    BOM\").  This character\n   can be used as a genuine \"ZERO WIDTH NO-BREAK SPACE\"\
    \ within text, but\n   the BOM name hints at a second possible usage of the character:\
    \  to\n   prepend a U+FEFF character to a stream of UCS characters as a\n   \"\
    signature\".  A receiver of such a serialized stream may then use the\n   initial\
    \ character as a hint that the stream consists of UCS\n   characters and also\
    \ to recognize which UCS encoding is involved and,\n   with encodings having a\
    \ multi-octet encoding unit, as a way to\n   recognize the serialization order\
    \ of the octets.  UTF-8 having a\n   single-octet encoding unit, this last function\
    \ is useless and the BOM\n   will always appear as the octet sequence EF BB BF.\n\
    \   It is important to understand that the character U+FEFF appearing at\n   any\
    \ position other than the beginning of a stream MUST be interpreted\n   with the\
    \ semantics for the zero-width non-breaking space, and MUST\n   NOT be interpreted\
    \ as a signature.  When interpreted as a signature,\n   the Unicode standard suggests\
    \ than an initial U+FEFF character may be\n   stripped before processing the text.\
    \  Such stripping is necessary in\n   some cases (e.g., when concatenating two\
    \ strings, because otherwise\n   the resulting string may contain an unintended\
    \ \"ZERO WIDTH NO-BREAK\n   SPACE\" at the connection point), but might affect\
    \ an external process\n   at a different layer (such as a digital signature or\
    \ a count of the\n   characters) that is relying on the presence of all characters\
    \ in the\n   stream.  It is therefore RECOMMENDED to avoid stripping an initial\n\
    \   U+FEFF interpreted as a signature without a good reason, to ignore it\n  \
    \ instead of stripping it when appropriate (such as for display) and to\n   strip\
    \ it only when really necessary.\n   U+FEFF in the first position of a stream\
    \ MAY be interpreted as a\n   zero-width non-breaking space, and is not always\
    \ a signature.  In an\n   attempt at diminishing this uncertainty, Unicode 3.2\
    \ adds a new\n   character, U+2060 \"WORD JOINER\", with exactly the same semantics\
    \ and\n   usage as U+FEFF except for the signature function, and strongly\n  \
    \ recommends its exclusive use for expressing word-joining semantics.\n   Eventually,\
    \ following this recommendation will make it all but\n   certain that any initial\
    \ U+FEFF is a signature, not an intended \"ZERO\n   WIDTH NO-BREAK SPACE\".\n\
    \   In the meantime, the uncertainty unfortunately remains and may affect\n  \
    \ Internet protocols.  Protocol specifications MAY restrict usage of\n   U+FEFF\
    \ as a signature in order to reduce or eliminate the potential\n   ill effects\
    \ of this uncertainty.  In the interest of striking a\n   balance between the\
    \ advantages (reduction of uncertainty) and\n   drawbacks (loss of the signature\
    \ function) of such restrictions, it\n   is useful to distinguish a few cases:\n\
    \   o  A protocol SHOULD forbid use of U+FEFF as a signature for those\n     \
    \ textual protocol elements that the protocol mandates to be always\n      UTF-8,\
    \ the signature function being totally useless in those\n      cases.\n   o  A\
    \ protocol SHOULD also forbid use of U+FEFF as a signature for\n      those textual\
    \ protocol elements for which the protocol provides\n      character encoding\
    \ identification mechanisms, when it is expected\n      that implementations of\
    \ the protocol will be in a position to\n      always use the mechanisms properly.\
    \  This will be the case when\n      the protocol elements are maintained tightly\
    \ under the control of\n      the implementation from the time of their creation\
    \ to the time of\n      their (properly labeled) transmission.\n   o  A protocol\
    \ SHOULD NOT forbid use of U+FEFF as a signature for\n      those textual protocol\
    \ elements for which the protocol does not\n      provide character encoding identification\
    \ mechanisms, when a ban\n      would be unenforceable, or when it is expected\
    \ that\n      implementations of the protocol will not be in a position to\n \
    \     always use the mechanisms properly.  The latter two cases are\n      likely\
    \ to occur with larger protocol elements such as MIME\n      entities, especially\
    \ when implementations of the protocol will\n      obtain such entities from file\
    \ systems, from protocols that do not\n      have encoding identification mechanisms\
    \ for payloads (such as FTP)\n      or from other protocols that do not guarantee\
    \ proper\n      identification of character encoding (such as HTTP).\n   When\
    \ a protocol forbids use of U+FEFF as a signature for a certain\n   protocol element,\
    \ then any initial U+FEFF in that protocol element\n   MUST be interpreted as\
    \ a \"ZERO WIDTH NO-BREAK SPACE\".  When a\n   protocol does NOT forbid use of\
    \ U+FEFF as a signature for a certain\n   protocol element, then implementations\
    \ SHOULD be prepared to handle a\n   signature in that element and react appropriately:\
    \ using the\n   signature to identify the character encoding as necessary and\n\
    \   stripping or ignoring the signature as appropriate.\n"
- title: 7.  Examples
  contents:
  - "7.  Examples\n   The character sequence U+0041 U+2262 U+0391 U+002E \"A<NOT IDENTICAL\n\
    \   TO><ALPHA>.\" is encoded in UTF-8 as follows:\n       --+--------+-----+--\n\
    \       41 E2 89 A2 CE 91 2E\n       --+--------+-----+--\n   The character sequence\
    \ U+D55C U+AD6D U+C5B4 (Korean \"hangugeo\",\n   meaning \"the Korean language\"\
    ) is encoded in UTF-8 as follows:\n       --------+--------+--------\n       ED\
    \ 95 9C EA B5 AD EC 96 B4\n       --------+--------+--------\n   The character\
    \ sequence U+65E5 U+672C U+8A9E (Japanese \"nihongo\",\n   meaning \"the Japanese\
    \ language\") is encoded in UTF-8 as follows:\n       --------+--------+--------\n\
    \       E6 97 A5 E6 9C AC E8 AA 9E\n       --------+--------+--------\n   The\
    \ character U+233B4 (a Chinese character meaning 'stump of tree'),\n   prepended\
    \ with a UTF-8 BOM, is encoded in UTF-8 as follows:\n       --------+-----------\n\
    \       EF BB BF F0 A3 8E B4\n       --------+-----------\n"
- title: 8.  MIME registration
  contents:
  - "8.  MIME registration\n   This memo serves as the basis for registration of the\
    \ MIME charset\n   parameter for UTF-8, according to [RFC2978].  The charset parameter\n\
    \   value is \"UTF-8\".  This string labels media types containing text\n   consisting\
    \ of characters from the repertoire of ISO/IEC 10646\n   including all amendments\
    \ at least up to amendment 5 of the 1993\n   edition (Korean block), encoded to\
    \ a sequence of octets using the\n   encoding scheme outlined above.  UTF-8 is\
    \ suitable for use in MIME\n   content types under the \"text\" top-level type.\n\
    \   It is noteworthy that the label \"UTF-8\" does not contain a version\n   identification,\
    \ referring generically to ISO/IEC 10646.  This is\n   intentional, the rationale\
    \ being as follows:\n   A MIME charset label is designed to give just the information\
    \ needed\n   to interpret a sequence of bytes received on the wire into a sequence\n\
    \   of characters, nothing more (see [RFC2045], section 2.2).  As long as\n  \
    \ a character set standard does not change incompatibly, version\n   numbers serve\
    \ no purpose, because one gains nothing by learning from\n   the tag that newly\
    \ assigned characters may be received that one\n   doesn't know about.  The tag\
    \ itself doesn't teach anything about the\n   new characters, which are going\
    \ to be received anyway.\n   Hence, as long as the standards evolve compatibly,\
    \ the apparent\n   advantage of having labels that identify the versions is only\
    \ that,\n   apparent.  But there is a disadvantage to such version-dependent\n\
    \   labels: when an older application receives data accompanied by a\n   newer,\
    \ unknown label, it may fail to recognize the label and be\n   completely unable\
    \ to deal with the data, whereas a generic, known\n   label would have triggered\
    \ mostly correct processing of the data,\n   which may well not contain any new\
    \ characters.\n   Now the \"Korean mess\" (ISO/IEC 10646 amendment 5) is an incompatible\n\
    \   change, in principle contradicting the appropriateness of a version\n   independent\
    \ MIME charset label as described above.  But the\n   compatibility problem can\
    \ only appear with data containing Korean\n   Hangul characters encoded according\
    \ to Unicode 1.1 (or equivalently\n   ISO/IEC 10646 before amendment 5), and there\
    \ is arguably no such data\n   to worry about, this being the very reason the\
    \ incompatible change\n   was deemed acceptable.\n   In practice, then, a version-independent\
    \ label is warranted, provided\n   the label is understood to refer to all versions\
    \ after Amendment 5,\n   and provided no incompatible change actually occurs.\
    \  Should\n   incompatible changes occur in a later version of ISO/IEC 10646,\
    \ the\n   MIME charset label defined here will stay aligned with the previous\n\
    \   version until and unless the IETF specifically decides otherwise.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   The entry for UTF-8 in the IANA charset registry\
    \ has been updated to\n   point to this memo.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   Implementers of UTF-8 need to consider the security\
    \ aspects of how\n   they handle illegal UTF-8 sequences.  It is conceivable that\
    \ in some\n   circumstances an attacker would be able to exploit an incautious\n\
    \   UTF-8 parser by sending it an octet sequence that is not permitted by\n  \
    \ the UTF-8 syntax.\n   A particularly subtle form of this attack can be carried\
    \ out against\n   a parser which performs security-critical validity checks against\
    \ the\n   UTF-8 encoded form of its input, but interprets certain illegal octet\n\
    \   sequences as characters.  For example, a parser might prohibit the\n   NUL\
    \ character when encoded as the single-octet sequence 00, but\n   erroneously\
    \ allow the illegal two-octet sequence C0 80 and interpret\n   it as a NUL character.\
    \  Another example might be a parser which\n   prohibits the octet sequence 2F\
    \ 2E 2E 2F (\"/../\"), yet permits the\n   illegal octet sequence 2F C0 AE 2E\
    \ 2F.  This last exploit has\n   actually been used in a widespread virus attacking\
    \ Web servers in\n   2001; thus, the security threat is very real.\n   Another\
    \ security issue occurs when encoding to UTF-8: the ISO/IEC\n   10646 description\
    \ of UTF-8 allows encoding character numbers up to\n   U+7FFFFFFF, yielding sequences\
    \ of up to 6 bytes.  There is therefore\n   a risk of buffer overflow if the range\
    \ of character numbers is not\n   explicitly limited to U+10FFFF or if buffer\
    \ sizing doesn't take into\n   account the possibility of 5- and 6-byte sequences.\n\
    \   Security may also be impacted by a characteristic of several\n   character\
    \ encodings, including UTF-8: the \"same thing\" (as far as a\n   user can tell)\
    \ can be represented by several distinct character\n   sequences.  For instance,\
    \ an e with acute accent can be represented\n   by the precomposed U+00E9 E ACUTE\
    \ character or by the canonically\n   equivalent sequence U+0065 U+0301 (E + COMBINING\
    \ ACUTE).  Even though\n   UTF-8 provides a single byte sequence for each character\
    \ sequence,\n   the existence of multiple character sequences for \"the same thing\"\
    \n   may have security consequences whenever string matching, indexing,\n   searching,\
    \ sorting, regular expression matching and selection are\n   involved.  An example\
    \ would be string matching of an identifier\n   appearing in a credential and\
    \ in access control list entries.  This\n   issue is amenable to solutions based\
    \ on Unicode Normalization Forms,\n   see [UAX15].\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   The following have participated in the drafting and\
    \ discussion of\n   this memo: James E. Agenbroad, Harald Alvestrand, Andries\
    \ Brouwer,\n   Mark Davis, Martin J. Duerst, Patrick Faltstrom, Ned Freed, David\n\
    \   Goldsmith, Tony Hansen, Edwin F. Hart, Paul Hoffman, David Hopwood,\n   Simon\
    \ Josefsson, Kent Karlsson, Dan Kohn, Markus Kuhn, Michael Kung,\n   Alain LaBonte,\
    \ Ira McDonald, Alexey Melnikov, MURATA Makoto, John\n   Gardiner Myers, Chris\
    \ Newman, Dan Oscarsson, Roozbeh Pournader,\n   Murray Sargent, Markus Scherer,\
    \ Keld Simonsen, Arnold Winkler,\n   Kenneth Whistler and Misha Wolf.\n"
- title: 12.  Changes from RFC 2279
  contents:
  - "12.  Changes from RFC 2279\n   o  Restricted the range of characters to 0000-10FFFF\
    \ (the UTF-16\n      accessible range).\n   o  Made Unicode the source of the\
    \ normative definition of UTF-8,\n      keeping ISO/IEC 10646 as the reference\
    \ for characters.\n   o  Straightened out terminology.  UTF-8 now described in\
    \ terms of an\n      encoding form of the character number.  UCS-2 and UCS-4 almost\n\
    \      disappeared.\n   o  Turned the note warning against decoding of invalid\
    \ sequences into\n      a normative MUST NOT.\n   o  Added a new section about\
    \ the UTF-8 BOM, with advice for\n      protocols.\n   o  Removed suggested UNICODE-1-1-UTF-8\
    \ MIME charset registration.\n   o  Added an ABNF syntax for valid UTF-8 octet\
    \ sequences\n   o  Expanded Security Considerations section, in particular impact\
    \ of\n      Unicode normalization\n"
- title: 13.  Normative References
  contents:
  - "13.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [ISO.10646] International Organization for Standardization,\n    \
    \           \"Information Technology - Universal Multiple-octet coded\n      \
    \         Character Set (UCS)\", ISO/IEC Standard 10646,  comprised\n        \
    \       of ISO/IEC 10646-1:2000, \"Information technology --\n               Universal\
    \ Multiple-Octet Coded Character Set (UCS) --\n               Part 1: Architecture\
    \ and Basic Multilingual Plane\",\n               ISO/IEC 10646-2:2001, \"Information\
    \ technology --\n               Universal Multiple-Octet Coded Character Set (UCS)\
    \ --\n               Part 2:  Supplementary Planes\" and ISO/IEC 10646-\n    \
    \           1:2000/Amd 1:2002, \"Mathematical symbols and other\n            \
    \   characters\".\n   [UNICODE]   The Unicode Consortium, \"The Unicode Standard\
    \ -- Version\n               4.0\",  defined by The Unicode Standard, Version\
    \ 4.0\n               (Boston, MA, Addison-Wesley, 2003.  ISBN 0-321-18578-1),\n\
    \               April 2003, <http://www.unicode.org/unicode/standard/\n      \
    \         versions/enumeratedversions.html#Unicode_4_0_0>.\n"
- title: 14.  Informative References
  contents:
  - "14.  Informative References\n   [CESU-8]    Phipps, T., \"Unicode Technical Report\
    \ #26: Compatibility\n               Encoding Scheme for UTF-16: 8-Bit (CESU-8)\"\
    , UTR 26,\n               April 2002,\n               <http://www.unicode.org/unicode/reports/tr26/>.\n\
    \   [FSS_UTF]   X/Open Company Ltd., \"X/Open Preliminary Specification --\n \
    \              File System Safe UCS Transformation Format (FSS-UTF)\",\n     \
    \          May 1993, <http://wwwold.dkuug.dk/jtc1/sc22/wg20/docs/\n          \
    \     N193-FSS-UTF.pdf>.\n   [RFC2045]   Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n               Extensions (MIME) Part One: Format of Internet\
    \ Message\n               Bodies\", RFC 2045, November 1996.\n   [RFC2234]   Crocker,\
    \ D. and P. Overell, \"Augmented BNF for Syntax\n               Specifications:\
    \ ABNF\", RFC 2234, November 1997.\n   [RFC2978]   Freed, N. and J. Postel, \"\
    IANA Charset Registration\n               Procedures\", BCP 19, RFC 2978, October\
    \ 2000.\n   [UAX15]     Davis, M. and M. Duerst, \"Unicode Standard Annex #15:\n\
    \               Unicode Normalization Forms\",  An integral part of The\n    \
    \           Unicode Standard, Version 4.0.0, April 2003, <http://\n          \
    \     www.unicode.org/unicode/reports/tr15>.\n   [US-ASCII]  American National\
    \ Standards Institute, \"Coded Character\n               Set - 7-bit American\
    \ Standard Code for Information\n               Interchange\", ANSI X3.4, 1986.\n"
- title: 15.  URIs
  contents:
  - "15.  URIs\n   [1]  <http://www.unicode.org/unicode/standard/policies.html>\n"
- title: 16.  Intellectual Property Statement
  contents:
  - "16.  Intellectual Property Statement\n   The IETF takes no position regarding\
    \ the validity or scope of any\n   intellectual property or other rights that\
    \ might be claimed to\n   pertain to the implementation or use of the technology\
    \ described in\n   this document or the extent to which any license under such\
    \ rights\n   might or might not be available; neither does it represent that it\n\
    \   has made any effort to identify any such rights.  Information on the\n   IETF's\
    \ procedures with respect to rights in standards-track and\n   standards-related\
    \ documentation can be found in BCP-11.  Copies of\n   claims of rights made available\
    \ for publication and any assurances of\n   licenses to be made available, or\
    \ the result of an attempt made to\n   obtain a general license or permission\
    \ for the use of such\n   proprietary rights by implementors or users of this\
    \ specification can\n   be obtained from the IETF Secretariat.\n   The IETF invites\
    \ any interested party to bring to its attention any\n   copyrights, patents or\
    \ patent applications, or other proprietary\n   rights which may cover technology\
    \ that may be required to practice\n   this standard.  Please address the information\
    \ to the IETF Executive\n   Director.\n"
- title: 17.  Author's Address
  contents:
  - "17.  Author's Address\n   Francois Yergeau\n   Alis Technologies\n   100, boul.\
    \ Alexis-Nihon, bureau 600\n   Montreal, QC  H4M 2P2\n   Canada\n   Phone: +1\
    \ 514 747 2547\n   Fax:   +1 514 747 2561\n   EMail: fyergeau@alis.com\n"
- title: 18.  Full Copyright Statement
  contents:
  - "18.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
