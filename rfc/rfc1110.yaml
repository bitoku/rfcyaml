- title: __initial_text__
  contents:
  - '                A Problem with the TCP Big Window Option

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo comments on the TCP Big Window option described\
    \ in RFC\n   1106.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The TCP Big Window option discussed in RFC 1106 will not work\n\
    \   properly in an Internet environment which has both a high bandwidth *\n  \
    \ delay product and the possibility of disordering and duplicating\n   packets.\
    \  In such networks, the window size must not be increased\n   without a similar\
    \ increase in the sequence number space.  Therefore,\n   a different approach\
    \ to big windows should be taken in the Internet.\n"
- title: Discussion
  contents:
  - "Discussion\n   TCP was designed to work in a packet store-and-forward environment\n\
    \   characterized by the possibility of packet loss, packet disordering,\n   and\
    \ packet duplication.  Packet loss can occur, for example, by a\n   congested\
    \ network element discarding a packet.  Packet disordering\n   can occur, for\
    \ example, by packets of a TCP connection being\n   arbitrarily transmitted partially\
    \ over a low bandwidth terrestrial\n   path and partially over a high bandwidth\
    \ satellite path.  Packet\n   duplication can occur, for example, when two directly-connected\n\
    \   network elements use a reliable link protocol and the link goes down\n   after\
    \ the receiver correctly receives a packet but before the\n   transmitter receives\
    \ an acknowledgement for the packet; the\n   transmitter and receiver now each\
    \ take responsibility for attempting\n   to deliver the same packet to its ultimate\
    \ destination.\n   TCP has the task of recreating at the destination an exact\
    \ copy of\n   the data stream generated at the source, in the same order and with\n\
    \   no gaps or duplicates.  The mechanism used to accomplish this task is\n  \
    \ to assign a \"unique\" sequence number to each byte of data at its\n   source,\
    \ and to sort the bytes at the destination according to the\n   sequence number.\
    \  The sorting operation corrects any disordering.  An\n   acknowledgement, timeout,\
    \ and retransmission scheme corrects for data\n   loss.  The uniqueness of the\
    \ sequence number corrects for data\n   duplication.\n   As a practical matter,\
    \ however, the sequence number is not unique; it\n   is contained in a 32-bit\
    \ field and therefore \"wraps around\" after the\n   transmission of 2**32 bytes\
    \ of data.  Two additional mechanisms are\n   used to insure the effective uniqueness\
    \ of sequence numbers; these\n   are the TCP transmission window and bounds on\
    \ packet lifetime within\n   the Internet, including the IP Time-to-Live (TTL).\
    \  The transmission\n   window specifies the maximum number of bytes which may\
    \ be sent by the\n   source in one source-destination roundtrip time.  Since the\
    \ TCP\n   transmission window is specified by 16 bits, which is 1/65536 of the\n\
    \   sequence number space, a sequence number will not be reused (used to\n   number\
    \ another byte) for 65,536 roundtrip times.  So long as the\n   combination of\
    \ gateway action on the IP TTL and holding times within\n   the individual networks\
    \ which interconnect the gateways do not allow\n   a packet's lifetime to exceed\
    \ 65,536 roundtrip times, each sequence\n   number is effectively unique.  It\
    \ was believed by the TCP designers\n   that the networks and gateways forming\
    \ the internet would meet this\n   constraint, and such has been the case.\n \
    \  The proposed TCP Big Window option, as described in RFC 1106, expands\n   the\
    \ size of the window specification to 30 bits, while leaving the\n   sequence\
    \ number space unchanged.  Thus, a sequence number can be\n   reused after 4 roundtrip\
    \ times.  Further, the Nak option allows a\n   packet to be retransmitted (i.e.,\
    \ potentially duplicated) by the\n   source after only one roundtrip time.  Thus,\
    \ if a packet becomes\n   \"lost\" in the Internet for only about 5 roundtrip\
    \ times it may be\n   delivered when its sequence number again lies within the\
    \ window,\n   albeit a later cycle of the window.  In this case, TCP will not\n\
    \   necessarily recreate at the destination an exact copy of the data\n   stream\
    \ generated at the source; it may replace some data with earlier\n   data.\n \
    \  Of course, the problem described above results from the storage of\n   the\
    \ \"lost\" packet within the net, and its subsequent out-of-order\n   delivery.\
    \  RFC 1106 seems to describe use of the proposed options in\n   an isolated satellite\
    \ network.  We may hypothesize that this network\n   is memoryless, and thus cannot\
    \ deliver packets out of order; it\n   either delivers a packet in order or loses\
    \ it.  If this is the case,\n   then there is no problem with the proposed options.\
    \  The Internet,\n   however, can deliver packets out of order, and this will\
    \ likely\n   continue to be true even if gigabit links become part of the\n  \
    \ Internet.  Therefore, the approach described in RFC 1106 cannot be\n   adopted\
    \ for general Internet use.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Alex McKenzie\n   Bolt Beranek and Newman Inc.\n   10 Moulton\
    \ Street\n   Cambridge, MA 02238\n   Phone: (617) 873-2962\n   EMail: MCKENZIE@BBN.COM\n"
