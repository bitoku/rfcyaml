- title: __initial_text__
  contents:
  - '                  Security Concerns with IP Tunneling

    '
- title: Abstract
  contents:
  - "Abstract\n   A number of security concerns with IP tunnels are documented in\
    \ this\n   memo.  The intended audience of this document includes network\n  \
    \ administrators and future protocol developers.  The primary intent of\n   this\
    \ document is to raise the awareness level regarding the security\n   issues with\
    \ IP tunnels as deployed and propose strategies for the\n   mitigation of those\
    \ issues.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6169.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Tunnels May Bypass Security .....................................3\n  \
    \    2.1. Network Security Bypass ....................................3\n    \
    \  2.2. IP Ingress and Egress Filtering Bypass .....................5\n      2.3.\
    \ Source Routing after the Tunnel Client .....................6\n   3. Challenges\
    \ in Inspecting and Filtering Content of\n      Tunneled Data Packets ...........................................7\n\
    \      3.1. Inefficiency of Selective Network Filtering of All\n           Tunneled\
    \ Packets ...........................................7\n      3.2. Problems with\
    \ Deep Packet Inspection of Tunneled\n           Data Packets ...............................................8\n\
    \   4. Increased Exposure Due to Tunneling .............................9\n  \
    \    4.1. NAT Holes Increase Attack Surface ..........................9\n    \
    \  4.2. Exposure of a NAT Hole ....................................11\n      4.3.\
    \ Public Tunnels Widen Holes in Restricted NATs .............12\n   5. Tunnel\
    \ Address Concerns ........................................13\n      5.1. Feasibility\
    \ of Guessing Tunnel Addresses ..................13\n      5.2. Profiling Targets\
    \ Based on Tunnel Address .................14\n   6. Additional Security Concerns\
    \ ...................................15\n      6.1. Attacks Facilitated by Changing\
    \ Tunnel Server Setting .....15\n   7. Mechanisms to Secure the Use of Tunnels\
    \ ........................17\n   8. Acknowledgments ................................................18\n\
    \   9. Security Considerations ........................................18\n  \
    \ 10. Informative References ........................................18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   With NAT devices becoming increasingly more prevalent, there\
    \ have\n   recently been many tunneling protocols developed that go through NAT\n\
    \   devices or firewalls by tunneling over UDP or TCP.  For example,\n   Teredo\
    \ [RFC4380], Layer Two Tunneling Protocol Version 2 (L2TPv2)\n   [RFC2661], and\
    \ Layer Two Tunneling Protocol Version 3 (L2TPv3)\n   [RFC3931] all tunnel IP\
    \ packets over UDP.  Similarly, many Secure\n   Socket Layer (SSL) VPN solutions\
    \ that tunnel IP packets over HTTP\n   (and hence over TCP) are deployed today.\n\
    \   This document discusses security concerns with tunneling IP packets\n   and\
    \ includes recommendations where relevant.\n   The primary intent of this document\
    \ is to help improve security\n   deployments using tunnel protocols.  In addition,\
    \ the document aims\n   to provide information that can be used in any new or\
    \ updated tunnel\n   protocol specification.  The intended audience of this document\n\
    \   includes network administrators and future protocol developers.\n"
- title: 2.  Tunnels May Bypass Security
  contents:
  - '2.  Tunnels May Bypass Security

    '
- title: 2.1.  Network Security Bypass
  contents:
  - '2.1.  Network Security Bypass

    '
- title: 2.1.1.  Problem
  contents:
  - "2.1.1.  Problem\n   Tunneled IP traffic may not receive the intended level of\
    \ inspection\n   or policy application by network-based security devices unless\
    \ such\n   devices are specifically tunnel aware.  This reduces defense in depth\n\
    \   and may cause security gaps.  This applies to all network-located\n   devices\
    \ and to any end-host-based firewalls whose existing hooking\n   mechanism(s)\
    \ would not show them the IP packet stream after the\n   tunnel client does decapsulation\
    \ or before it does encapsulation.\n"
- title: 2.1.2.  Discussion
  contents:
  - "2.1.2.  Discussion\n   Evasion by tunneling is often a problem for network-based\
    \ security\n   devices such as network firewalls, intrusion detection and prevention\n\
    \   systems, and router controls.  To provide such functionality in the\n   presence\
    \ of tunnels, the developer of such devices must add support\n   for parsing each\
    \ new protocol.  There is typically a significant lag\n   between when the security\
    \ developer recognizes that a tunnel will be\n   used (or will be remotely usable)\
    \ to a significant degree and when\n   the parsing can be implemented in a product\
    \ update, the update can be\n   tested and released, and customers can begin using\
    \ the update.  Late\n   changes in the protocol specification or in the way it\
    \ is implemented\n   can cause additional delays.  This becomes a significant\
    \ security\n   concern when a delay in applied coverage is occurring frequently.\n\
    \   One way to cut down on this lag is for security developers to follow\n   the\
    \ progress of new IETF protocols, but this will still not account\n   for any\
    \ new proprietary protocols.\n   For example, for L2TP or Teredo, an unaware network\
    \ security device\n   would inspect or regulate the outer IP and the IP-based\
    \ UDP layer as\n   normal, but it would not recognize that there is an additional\
    \ IP\n   layer contained inside the UDP payload to which it needs to apply the\n\
    \   same controls as it would to a native packet.  (Of course, if the\n   device\
    \ discards the packet due to something in the IP or UDP header,\n   such as referring\
    \ to an unknown protocol, the embedded packet is no\n   longer a concern.)  In\
    \ addition, if the tunnel does encryption, the\n   network-based security device\
    \ may not be able to do much, just as if\n   IPsec end-to-end encryption were\
    \ used without tunneling.\n   Network security controls not being applied must\
    \ be a concern to\n   those that set them up, since those controls are supposed\
    \ to provide\n   an additional layer of defense against external attackers.  If\n\
    \   network controls are being bypassed due to the use of tunneling, the\n   strength\
    \ of the defense (i.e., the number of layers of defense) is\n   reduced.  Since\
    \ security administrators may have a significantly\n   reduced level of confidence\
    \ without this layer, this becomes a\n   concern to them.\n   One implication\
    \ of the security control bypass is that defense in\n   depth has been reduced,\
    \ perhaps down to zero unless a local firewall\n   is in use as recommended in\
    \ [RFC4380].  However, even if there are\n   host-based security controls that\
    \ recognize tunnels and all controls\n   that were maintained by the network are\
    \ available on the host,\n   security administrators may not have configured them\
    \ with full\n   security control parity.  Thus, there may be gaps in desired\n\
    \   coverage.\n   Compounding this is that, unlike what would be the case for\
    \ native\n   IP, some network administrators will not even be aware that their\n\
    \   hosts are globally reachable if the tunnel provides connectivity\n   to/from\
    \ the Internet; for example, they may not be expecting this for\n   hosts behind\
    \ a stateful firewall.  In addition, Section 3.2 discusses\n   how it may not\
    \ be efficient to find all tunneled traffic for network\n   devices to examine.\n"
- title: 2.1.3.  Recommendations
  contents:
  - "2.1.3.  Recommendations\n   Security administrators who do not consider tunneling\
    \ an acceptable\n   risk should disable tunnel functionality either on the end\
    \ nodes\n   (hosts) or on the network nodes at the perimeter of their network.\n\
    \   However, there may be an awareness gap.  Thus, due to the possible\n   negative\
    \ security consequences, tunneling functionality should be\n   easy to disable\
    \ on the host and through a central management facility\n   if one is provided.\n\
    \   To minimize security exposure due to tunnels, we recommend that a\n   tunnel\
    \ be an interface of last resort, independent of IP version.\n   Specifically,\
    \ we suggest that when both native and tunneled access to\n   a remote host is\
    \ available, the native access be used in preference\n   to tunneled access except\
    \ when the tunnel endpoint is known to not\n   bypass security (e.g., an IPsec\
    \ tunnel to a gateway provided by the\n   security administrator of the network).\
    \  This should also promote\n   greater efficiency and reliability.\n   Note that\
    \ although Rule 7 of [RFC3484], Section 6 will prefer native\n   connectivity\
    \ over tunnels, this rule is only a tie-breaker when a\n   choice is not made\
    \ by earlier rules; hence, tunneling mechanisms that\n   are tied to a particular\
    \ range of IP address space will be decided\n   based on the prefix precedence.\
    \  For example, using the prefix policy\n   mechanism of [RFC3484], Section 2.1,\
    \ Teredo might have a precedence\n   of 5 so that native IPv4 is preferred over\
    \ Teredo.\n"
- title: 2.2.  IP Ingress and Egress Filtering Bypass
  contents:
  - '2.2.  IP Ingress and Egress Filtering Bypass

    '
- title: 2.2.1.  Problem
  contents:
  - "2.2.1.  Problem\n   IP addresses inside tunnels are not subject to ingress and\
    \ egress\n   filtering in the network they tunnel over, unless extraordinary\n\
    \   measures are taken.  Only the tunnel endpoints can do such filtering.\n"
- title: 2.2.2.  Discussion
  contents:
  - "2.2.2.  Discussion\n   Ingress filtering (sanity-checking incoming destination\
    \ addresses)\n   and egress filtering (sanity-checking outgoing source addresses)\
    \ are\n   done to mitigate attacks and to make it easier to identify the source\n\
    \   of a packet and are considered to be a good practice.  For example,\n   ingress\
    \ filtering at the network perimeter should not allow packets\n   with a source\
    \ address that belongs to the network to enter the\n   network from outside the\
    \ network.  This function is most naturally\n   (and in the general case, by requirement)\
    \ done at network boundaries.\n   Tunneled IP traffic bypassing this network control\
    \ is a specific case\n   of Section 2.1, but is illustrative.\n"
- title: 2.2.3.  Recommendations
  contents:
  - "2.2.3.  Recommendations\n   Tunnel servers can apply ingress and egress controls\
    \ to tunneled IP\n   addresses passing through them to and from tunnel clients.\n\
    \   Tunnel clients could make an effort to conduct ingress and egress\n   filtering.\n\
    \   Implementations of protocols that embed an IPv4 address in a tunneled\n  \
    \ IPv6 address directly between peers should perform filtering based on\n   checking\
    \ the correspondence.\n   Implementations of protocols that accept tunneled packets\
    \ directly\n   from a server, relay, or protocol peer do filtering the same way\
    \ as\n   it would be done on a native link with traffic from a router.\n   Some\
    \ protocols such as 6to4 [RFC3056], Teredo, and the Intra-Site\n   Automatic Tunnel\
    \ Addressing Protocol (ISATAP) [RFC5214] allow both\n   other hosts and a router\
    \ over a common tunnel.  To perform host-based\n   filtering with such protocols,\
    \ a host would need to know the outer IP\n   address of each router from which\
    \ it could receive traffic, so that\n   packets from hosts beyond the router will\
    \ be accepted even though the\n   source address would not embed the router's\
    \ IP address.  Router\n   addresses might be learned via SEcure Neighbor Discovery\
    \ (SEND)\n   [RFC3971] or some other mechanism (e.g., [RFC5214], Section 8.3.2).\n"
- title: 2.3.  Source Routing after the Tunnel Client
  contents:
  - '2.3.  Source Routing after the Tunnel Client

    '
- title: 2.3.1.  Problem
  contents:
  - "2.3.1.  Problem\n   If the encapsulated IP packet specifies source routing beyond\
    \ the\n   recipient tunnel client, the host may forward the IP packet to the\n\
    \   specified next hop.  This may be unexpected and contrary to\n   administrator\
    \ wishes and may have bypassed network-based source-\n   routing controls.\n"
- title: 2.3.2.  Discussion
  contents:
  - "2.3.2.  Discussion\n   A detailed discussion of issues related to source routing\
    \ can be\n   found in [RFC5095] and [SECA-IP].\n"
- title: 2.3.3.  Recommendations
  contents:
  - "2.3.3.  Recommendations\n   Tunnel clients should by default discard tunneled\
    \ IP packets that\n   specify additional routing, as recommended in [RFC5095]\
    \ and\n   [SECA-IP], though they may also allow the user to configure what\n \
    \  source-routing types are allowed.  All pre-existing source-routing\n   controls\
    \ should be upgraded to apply these controls to tunneled IP\n   packets as well.\n"
- title: 3.  Challenges in Inspecting and Filtering Content of Tunneled Data
  contents:
  - "3.  Challenges in Inspecting and Filtering Content of Tunneled Data\n    Packets\n"
- title: 3.1.  Inefficiency of Selective Network Filtering of All Tunneled
  contents:
  - "3.1.  Inefficiency of Selective Network Filtering of All Tunneled\n      Packets\n"
- title: 3.1.1.  Problem
  contents:
  - "3.1.1.  Problem\n   There is no mechanism that both efficiently and immediately\
    \ filters\n   all tunneled packets (other than the obviously faulty method of\n\
    \   filtering all packets).  This limits the ability to prevent tunnel\n   use\
    \ on a network.\n"
- title: 3.1.2.  Discussion
  contents:
  - "3.1.2.  Discussion\n   Given concerns about tunnel security or a network's lack\
    \ of\n   preparedness for tunnels, a network administrator may wish to simply\n\
    \   block all use of tunnels that bypass security policies.  He or she\n   may\
    \ wish to do so using network controls; this could be either due to\n   not having\
    \ the capability to disable tunneling on all hosts attached\n   to the network\
    \ or due to wanting an extra layer of prevention.\n   One simple method of doing\
    \ this easily for many tunnel protocols is\n   to block outbound packets to the\
    \ UDP or TCP port used (e.g.,\n   destination UDP port is 3544 for Teredo, UDP\
    \ port 1701 for L2TP,\n   etc.).  This prevents a tunnel client from establishing\
    \ a new tunnel.\n   However, existing tunnels will not necessarily be affected\
    \ if the\n   blocked port is used only for initial setup.  In addition, if the\n\
    \   blocking is applied on the outside of the client's NAT device, the\n   NAT\
    \ device will retain the port mapping for the client.  In some\n   cases, however,\
    \ blocking all traffic to a given outbound port (e.g.,\n   port 80) may interfere\
    \ with non-tunneled traffic so this should be\n   used with caution.\n   Another\
    \ simple alternative, if the tunnel server addresses are well-\n   known, is to\
    \ filter out all traffic to/from such addresses.\n   The other approach is to\
    \ find all packets to block in the same way as\n   would be done for inspecting\
    \ all packets (Section 3.2).  However,\n   this presents difficulties in terms\
    \ of efficiency of filtering, as is\n   discussed in Section 3.2.\n"
- title: 3.1.3.  Recommendations
  contents:
  - "3.1.3.  Recommendations\n   Developers of protocols that tunnel over UDP or TCP\
    \ (including HTTP)\n   to reach the Internet should disable their protocols in\
    \ networks that\n   wish to enforce security policies on the user traffic.  (Windows,\
    \ for\n   example, disables Teredo by default if it detects that it is within\n\
    \   an enterprise network that contains a Windows domain controller.)\n   Administrators\
    \ of such networks may wish to filter all tunneled\n   traffic at the boundaries\
    \ of their networks.  It is sufficient to\n   filter out the tunneled connection\
    \ requests (if they can be\n   identified) to stop further tunneled traffic. \
    \ The easiest mechanism\n   for this would be to filter out outgoing traffic sent\
    \ to the\n   destination port defined by the tunneling protocol and incoming\n\
    \   traffic with that source port.  Similarly, in certain cases, it is\n   also\
    \ possible to use the IP protocol field to identify and filter\n   tunneled packets.\
    \  For example, 6to4 [RFC3056] is a tunneling\n   mechanism that uses IPv4 packets\
    \ to carry encapsulated IPv6 packets\n   and can be identified by the IPv4 protocol\
    \ type 41.\n"
- title: 3.2.  Problems with Deep Packet Inspection of Tunneled Data Packets
  contents:
  - '3.2.  Problems with Deep Packet Inspection of Tunneled Data Packets

    '
- title: 3.2.1.  Problem
  contents:
  - "3.2.1.  Problem\n   There is no efficient mechanism for network-based devices,\
    \ which are\n   not the tunnel endpoint, to inspect the contents of all tunneled\
    \ data\n   packets the way they can for native packets.  This makes it difficult\n\
    \   to apply the same controls as they do to native IP.\n"
- title: 3.2.2.  Discussion
  contents:
  - "3.2.2.  Discussion\n   Some tunnel protocols are easy to identify, such as if\
    \ all data\n   packets are encapsulated using a well-known UDP or TCP port that\
    \ is\n   unique to the protocol.\n   Other protocols, however, either use dynamic\
    \ ports for data traffic\n   or else share ports with other protocols (e.g., tunnels\
    \ over HTTP).\n   The implication of this is that network-based devices that wish\
    \ to\n   passively inspect (and perhaps selectively apply policy to) all\n   encapsulated\
    \ traffic must inspect all TCP or UDP packets (or at least\n   all packets not\
    \ part of a session that is known not to be a tunnel).\n   This is imperfect since\
    \ a heuristic must then be applied to determine\n   if a packet is indeed part\
    \ of a tunnel.  This may be too slow to make\n   use of in practice, especially\
    \ if it means that all TCP or UDP\n   packets must be taken off of the device's\
    \ \"fast path\".\n   One heuristic that can be used on packets to determine if\
    \ they are\n   tunnel-related or not is as follows.  For each known tunnel protocol,\n\
    \   attempt parsing the packet as if it were a packet of that protocol\n   destined\
    \ to the local host (i.e., where the local host has the\n   destination address\
    \ in the inner IP header, if any).  If all syntax\n   checks pass, up to and including\
    \ the inner IP header (if the tunnel\n   does not use encryption), then treat\
    \ the packet as if it were a\n   tunneled packet of that protocol.\n   It is possible\
    \ that non-tunneled packets will be treated as if they\n   were tunneled packets\
    \ using this heuristic, but tunneled packets (of\n   the known types of tunnels)\
    \ should not escape inspection, absent\n   implementation bugs.\n   For some protocols,\
    \ it may be possible to monitor setup exchanges to\n   know to expect that data\
    \ will be exchanged on certain ports later.\n   (Note that this does not necessarily\
    \ apply to Teredo, for example,\n   since communicating with another Teredo client\
    \ behind a cone NAT\n   [RFC5389] device does not require such signaling.  In\
    \ such cases this\n   control will not work.  However, deprecation of the cone\
    \ bit as\n   discussed in [RFC5991] means this technique may indeed work with\n\
    \   updated Teredo implementations.)\n"
- title: 3.2.3.  Recommendations
  contents:
  - "3.2.3.  Recommendations\n   As illustrated above, it should be clear that inspecting\
    \ the contents\n   of tunneled data packets is highly complex and often impractical.\n\
    \   For this reason, if a network wishes to monitor IP traffic, tunneling\n  \
    \ across, as opposed to tunneling to, the security boundary is not\n   recommended.\
    \  For example, to provide an IPv6 transition solution,\n   the network should\
    \ provide native IPv6 connectivity or a tunnel\n   solution (e.g., ISATAP or 6over4\
    \ [RFC2529]) that encapsulates data\n   packets between hosts and a router within\
    \ the network.\n"
- title: 4.  Increased Exposure Due to Tunneling
  contents:
  - '4.  Increased Exposure Due to Tunneling

    '
- title: 4.1.  NAT Holes Increase Attack Surface
  contents:
  - '4.1.  NAT Holes Increase Attack Surface

    '
- title: 4.1.1.  Problem
  contents:
  - "4.1.1.  Problem\n   If the tunnel allows inbound access from the public Internet,\
    \ the\n   opening created in a NAT device due to a tunnel client increases its\n\
    \   Internet attack surface area.  If vulnerabilities are present, this\n   increased\
    \ exposure can be used by attackers and their programs.\n   If the tunnel allows\
    \ inbound access only from a private network\n   (e.g., a remote network to which\
    \ one has VPNed), the opening created\n   in the NAT device still increases its\
    \ attack surface area, although\n   not as much as in the public Internet case.\n"
- title: 4.1.2.  Discussion
  contents:
  - "4.1.2.  Discussion\n   When a tunnel is active, a mapped port is maintained on\
    \ the NAT\n   device through which remote hosts can send packets and perhaps\n\
    \   establish connections.  The following sequence is intended to sketch\n   out\
    \ the processing on the tunnel client host that can be reached\n   through this\
    \ mapped port; the actual processing for a given host may\n   be somewhat different.\n\
    \   1.  Link-layer protocol processing\n   2.  (Outer) IP host firewall processing\n\
    \   3.  (Outer) IP processing by stack\n   4.  UDP/TCP processing by stack\n \
    \  5.  Tunnel client processing\n   6.  (Inner) IP host firewall processing\n\
    \   7.  (Inner) IP processing by stack\n   8.  Various upper layer processing\
    \ may follow\n   The inner firewall (and other security) processing may or may\
    \ not be\n   present, but if it is, some of the inner IP processing may be\n \
    \  filtered.  (For example, [RFC4380], Section 7.1 recommends that an\n   IPv6\
    \ host firewall be used on all Teredo clients.)\n   (By the virtue of the tunnel\
    \ being active, we can infer that the\n   inner host firewall is unlikely to do\
    \ any filtering based on the\n   outer IP.)  Any of this processing may expose\
    \ vulnerabilities an\n   attacker can exploit; similarly, these may expose information\
    \ to an\n   attacker.  Thus, even if firewall filtering is in place (as is\n \
    \  prudent) and filters all incoming packets, the exposed area is larger\n   than\
    \ if a native IP Internet connection were in place, due to the\n   processing\
    \ that takes place before the inner IP is reached\n   (specifically, the UDP/TCP\
    \ processing, the tunnel client processing,\n   and additional IP processing,\
    \ especially if one is IPv4 and the other\n   is IPv6).\n   One possibility is\
    \ that a layer 3 (L3) targeted worm makes use of a\n   vulnerability in the exposed\
    \ processing.  The main benefit tunneling\n   provides to worms is enabling L3\
    \ reachability to the end host.  Even\n   a thoroughly firewalled host could be\
    \ subject to a worm that spreads\n   with a single UDP packet if the right remote\
    \ code vulnerability is\n   present.\n"
- title: 4.1.3.  Recommendation
  contents:
  - "4.1.3.  Recommendation\n   This problem seems inherent in tunneling being active\
    \ on a host, so\n   the solution seems to be to minimize tunneling use.\n   For\
    \ example, tunneling can be active only when it is really needed\n   and only\
    \ for as long as needed.  So, the tunnel interface can be\n   initially not configured\
    \ and only used when it is entirely the last\n   resort.  The interface should\
    \ then be deactivated (ideally,\n   automatically) again as soon as possible.\
    \  Note, however, that the\n   hole will remain in the NAT device for some amount\
    \ of time after\n   this, so some processing of incoming packets is inevitable\
    \ unless the\n   client's native IP address behind the NAT device is changed.\n"
- title: 4.2.  Exposure of a NAT Hole
  contents:
  - '4.2.  Exposure of a NAT Hole

    '
- title: 4.2.1.  Problem
  contents:
  - "4.2.1.  Problem\n   Attackers are more likely to know about a tunnel client's\
    \ NAT hole\n   than a typical hole in the NAT device.  If they know about the\
    \ hole,\n   they could try to use it.\n"
- title: 4.2.2.  Discussion
  contents:
  - "4.2.2.  Discussion\n   There are at least three reasons why an attacker may be\
    \ more likely\n   to learn of the tunnel client's exposed port than a typical\
    \ NAT\n   exposed port:\n   1.  The NAT mapping for a tunnel is typically held\
    \ open for a\n       significant period of time and kept stable.  This increases\
    \ the\n       chance of it being discovered.\n   2.  In some protocols (e.g.,\
    \ Teredo), the external IP address and\n       port are contained in the client's\
    \ address that is used end-to-\n       end and possibly even advertised in a name\
    \ resolution system.\n       While the tunnel protocol itself might only distribute\
    \ this\n       address in IP headers, peers, routers, and other on-path nodes\n\
    \       still see the client's IP address.  Although this point does not\n   \
    \    apply directly to protocols that do not construct the inner IP\n       address\
    \ based on the outer IP address (e.g., L2TP), the inner IP\n       address is\
    \ still known to peers, routers, etc., and can still be\n       reached by attackers\
    \ without their knowing the external IP\n       address or port.\n   3.  Sending\
    \ packets over a tunnel often results in more message\n       exchanges due to\
    \ the tunneling protocol, as well as messages\n       being seen by more parties\
    \ (e.g., due to a longer path length),\n       than sending packets natively,\
    \ offering more chances for\n       visibility into the port and address in use.\n"
- title: 4.2.3.  Recommendation
  contents:
  - "4.2.3.  Recommendation\n   The recommendation from Section 4.1 seems to apply\
    \ here as well:\n   minimize tunnel use.\n"
- title: 4.3.  Public Tunnels Widen Holes in Restricted NATs
  contents:
  - '4.3.  Public Tunnels Widen Holes in Restricted NATs

    '
- title: 4.3.1.  Problem
  contents:
  - "4.3.1.  Problem\n   Tunnels that allow inbound connectivity from the Internet\
    \ (e.g.,\n   Teredo, tunnel brokers, etc.) essentially disable the filtering\n\
    \   behavior of the NAT for all tunnel client ports.  This eliminates NAT\n  \
    \ devices filtering for such ports and may eliminate the need for an\n   attacker\
    \ to spoof an address.\n"
- title: 4.3.2.  Discussion
  contents:
  - "4.3.2.  Discussion\n   NATs that implement Address-Dependent or Address and Port-Dependent\n\
    \   Filtering [RFC4787] limit the source of incoming packets to just\n   those\
    \ that are a previous destination.  This poses a problem for\n   tunnels that\
    \ intend to allow inbound connectivity from the Internet.\n   Various protocols\
    \ (e.g., Teredo, Session Traversal Utilities for NAT\n   (STUN) [RFC5389], etc.)\
    \ provide a facility for peers, upon request,\n   to become a previous destination.\
    \  This works by sending a \"bubble\"\n   packet via a server, which is passed\
    \ to the client and then sent by\n   the client (through the NAT) to the originator.\n\
    \   This removes any NAT-based barrier to attackers sending packets in\n   through\
    \ the client's service port.  In particular, an attacker would\n   no longer need\
    \ to either be an actual previous destination or forge\n   its addresses as a\
    \ previous destination.  When forging, the attacker\n   would have had to learn\
    \ of a previous destination and then would face\n   more challenges in seeing\
    \ any returned traffic.\n"
- title: 4.3.3.  Recommendations
  contents:
  - "4.3.3.  Recommendations\n   If the tunnel can provide connectivity to the Internet,\
    \ the tunnel\n   client should run a host firewall on the tunnel interface.  Also,\n\
    \   minimizing public tunnel use (see Section 4.1.3) would lower the\n   attack\
    \ opportunity related to this exposure.\n"
- title: 5.  Tunnel Address Concerns
  contents:
  - '5.  Tunnel Address Concerns

    '
- title: 5.1.  Feasibility of Guessing Tunnel Addresses
  contents:
  - '5.1.  Feasibility of Guessing Tunnel Addresses

    '
- title: 5.1.1.  Problem
  contents:
  - "5.1.1.  Problem\n   For some types of tunneling protocols, it may be feasible\
    \ to guess IP\n   addresses assigned to tunnels, either when looking for a specific\n\
    \   client or when looking for an arbitrary client.  This is in contrast\n   to\
    \ native IPv6 addresses in general but is no worse than for native\n   IPv4 addresses\
    \ today.\n   For example, some protocols (e.g., 6to4 and Teredo) use well-defined\n\
    \   address ranges.  As another example, using well-known public servers\n   for\
    \ Teredo or tunnel brokers also implies using a well-known address\n   range.\n"
- title: 5.1.2.  Discussion
  contents:
  - "5.1.2.  Discussion\n   Several tunnel protocols use endpoint addresses that can\
    \ be\n   algorithmically derived from some known values.  These addresses are\n\
    \   structured, and the fields contained in them can be fairly\n   predictable.\
    \  This reduces the search space for an attacker and\n   reduces the resistance\
    \ of the address to scanning attacks.\n"
- title: 5.1.3.  Recommendations
  contents:
  - "5.1.3.  Recommendations\n   It is recommended that tunnel protocol developers\
    \ use tunnel endpoint\n   addresses that are not easily guessable.  When the tunnel\
    \ endpoint\n   addresses are structured and fairly guessable, it is recommended\
    \ that\n   the implementation use any unused fields in the address to provide\n\
    \   additional entropy to the address in order to reduce the address-\n   scanning\
    \ risks.  For example, this could be done by setting these\n   unused fields to\
    \ some random values.\n"
- title: 5.2.  Profiling Targets Based on Tunnel Address
  contents:
  - '5.2.  Profiling Targets Based on Tunnel Address

    '
- title: 5.2.1.  Problem
  contents:
  - "5.2.1.  Problem\n   An attacker encountering an address associated with a particular\n\
    \   tunneling protocol or well-known tunnel server has the opportunity to\n  \
    \ infer certain relevant pieces of information that can be used to\n   profile\
    \ the host before sending any packets.  This can reduce the\n   attacker's footprint\
    \ and increase the attacker's efficiency.\n"
- title: 5.2.2.  Discussion
  contents:
  - "5.2.2.  Discussion\n   The tunnel address reveals some information about the\
    \ nature of the\n   client:\n   o  That a host has a tunnel address associated\
    \ with a given protocol\n      means that the client is running on some platform\
    \ for which there\n      exists a tunnel client implementation of that protocol.\
    \  In\n      addition, if some platforms have that protocol installed by\n   \
    \   default and if the host's default rules for using it make it\n      susceptible\
    \ to being in use, then the protocol is more likely to\n      be running on such\
    \ a platform than on one where it is not used by\n      default.  For example,\
    \ as of this writing, seeing a Teredo address\n      suggests that the host it\
    \ is on is probably running Windows.\n   o  Similarly, the use of an address associated\
    \ with a particular\n      tunnel server also suggests some information.  Tunnel\
    \ client\n      software is often deployed, installed, and/or configured using\n\
    \      some degree of automation.  It seems likely that the majority of\n    \
    \  the time, the tunnel server that results from the initial\n      configuration\
    \ will go unchanged from the initial setting.\n      Moreover, the server that\
    \ is configured for use may be associated\n      with a particular means of installation,\
    \ which often suggests the\n      platform.  For example, if the server field\
    \ in a Teredo address is\n      one of the IPv4 addresses to which teredo.ipv6.microsoft.com\n\
    \      resolves, the host is likely running Windows.\n   o  The external IPv4\
    \ address of a NAT device can, of course, be\n      readily associated with a\
    \ particular organization or at least an\n      ISP; hence, putting this address\
    \ in an IPv6 address reveals this\n      information.  However, this is no different\
    \ than using a native IP\n      address and is therefore not new with tunneling.\n\
    \   o  It is also possible that external client port numbers may be more\n   \
    \   often associated with particular client software or the platform\n      on\
    \ which it is running.  The usefulness of this for platform\n      determination\
    \ is, however, reduced by the different NAT port\n      number assignment behaviors.\
    \  In addition, the same observations\n      would apply to use of UDP or TCP\
    \ over native IP as well; hence,\n      this is not new with tunneling.\n   The\
    \ platform, tunnel client software, or organization information can\n   be used\
    \ by an attacker to target attacks more carefully.  For\n   example, an attacker\
    \ may decide to attack an address only if it is\n   likely to be associated with\
    \ a particular platform or tunnel client\n   software with a known vulnerability.\
    \  (This is similar to the ability\n   to guess some platforms based on the Organizationally\
    \ Unique\n   Identifier (OUI) in the Extended Unique Identifier (EUI)-64 portion\n\
    \   of an IPv6 address generated from a Media Access Control (MAC)\n   address,\
    \ since some platforms are commonly used with interface cards\n   from particular\
    \ vendors.)\n"
- title: 5.2.3.  Recommendations
  contents:
  - "5.2.3.  Recommendations\n   If installation programs randomize the server setting,\
    \ they would\n   reduce the extent to which they can be profiled.  Similarly,\n\
    \   administrators can choose to change the default setting to reduce the\n  \
    \ degree to which they can be profiled ahead of time.\n   Randomizing the tunnel\
    \ client port in use would mitigate any\n   profiling that can be done based on\
    \ the external port, especially if\n   multiple tunnel clients did this.  Further\
    \ discussion on randomizing\n   ports can be found at [RFC6056].\n   It is recommended\
    \ that tunnel protocols minimize the propagation of\n   knowledge about whether\
    \ the NAT is a cone NAT.\n"
- title: 6.  Additional Security Concerns
  contents:
  - '6.  Additional Security Concerns

    '
- title: 6.1.  Attacks Facilitated by Changing Tunnel Server Setting
  contents:
  - '6.1.  Attacks Facilitated by Changing Tunnel Server Setting

    '
- title: 6.1.1.  Problem
  contents:
  - "6.1.1.  Problem\n   If an attacker could change either a tunnel client's server\
    \ setting\n   or the IP addresses to which a configured host name resolves (e.g.,\n\
    \   by intercepting DNS queries) AND if the tunnel is not authenticated,\n   the\
    \ attacker would become a man in the middle.  This would allow them\n   to at\
    \ least monitor peer communication and at worst to impersonate\n   the remote\
    \ peer.\n"
- title: 6.1.2.  Discussion
  contents:
  - "6.1.2.  Discussion\n   A client's server has good visibility into the client's\
    \ communication\n   with IP peers.  If the server were switched to one that records\
    \ this\n   information and makes it available to third parties (e.g.,\n   advertisers,\
    \ competitors, spouses, etc.), then sensitive information\n   would be disclosed,\
    \ especially if the client's host prefers the\n   tunnel over native IP.  Assuming\
    \ the server provides good service,\n   the user would not have reason to suspect\
    \ the change.\n   Full interception of IP traffic could also be arranged (including\n\
    \   pharming), which would allow any number of deception or monitoring\n   attacks,\
    \ including phishing.  We illustrate this with an example\n   phishing attack\
    \ scenario.\n   It is often assumed that the tunnel server is a trusted entity.\
    \  It\n   may be possible for malware or a malicious user to quietly change the\n\
    \   client's tunnel server setting and have the user be unaware that\n   their\
    \ trust has been misplaced for an indefinite period of time.\n   However, malware\
    \ or a malicious user can do much worse than this, so\n   this is not a significant\
    \ concern.  Hence, it is only important that\n   an attacker on the network cannot\
    \ change the client's server setting.\n   1.  A phisher sets up a malicious tunnel\
    \ server (or tampers with a\n       legitimate one).  This server, for the most\
    \ part, provides\n       correct service.\n   2.  An attacker, by some means,\
    \ switches the host's tunnel server\n       setting or spoofs a DNS reply to point\
    \ to the above server.  If\n       neither DNS nor the tunnel setup is secured\
    \ (i.e., if the client\n       does not authenticate the information), then the\
    \ attacker's\n       tunnel server is seen as legitimate.\n   3.  A user on the\
    \ victim host types their bank's URL into his/her\n       browser.\n   4.  The\
    \ bank's hostname resolves to one or more IP addresses, and the\n       tunnel\
    \ is selected for socket connection for whatever reason\n       (e.g., the tunnel\
    \ provides IPv6 connectivity, and the bank has an\n       IPv6 address).\n   5.\
    \  The tunnel client uses the server for help in connecting to the\n       bank's\
    \ IP address.  Some tunneling protocols use a separate\n       channel for signaling\
    \ versus data, but this still allows the\n       server to place itself in the\
    \ data path by an appropriate signal\n       to the client.  For example, in Teredo,\
    \ the client sends a ping\n       request through a server, which is expected\
    \ to come back through\n       a data relay, and a malicious server can simply\
    \ send it back\n       itself to indicate that is a data relay for the communication.\n\
    \   6.  The rest works pretty much like any normal phishing transaction,\n   \
    \    except that the attacker acts as a tunnel server (or data relay,\n      \
    \ for protocols such as Teredo) and a host with the bank's IP\n       address.\n\
    \   This pharming-type attack is not unique to tunneling.  Switching DNS\n   server\
    \ settings to a malicious DNS server or DNS cache poisoning in a\n   recursive\
    \ DNS resolver could have a similar effect.\n"
- title: 6.1.3.  Recommendations
  contents:
  - "6.1.3.  Recommendations\n   In general, anti-phishing and anti-fraud provisions\
    \ should help with\n   aspects of this, as well as software that specifically\
    \ monitors for\n   tunnel server changes.\n   Perhaps the best way to mitigate\
    \ tunnel-specific attacks is to have\n   the client authenticate either the tunnel\
    \ server or at least the\n   means by which the tunnel server's IP address is\
    \ determined.  For\n   example, SSL VPNs use https URLs and hence authenticate\
    \ the server as\n   being the expected one.  When IPv6 Router Advertisements are\
    \ sent\n   over the tunnel, another mechanism is to use SEcure Neighbor\n   Discovery\
    \ (SEND) [RFC3971] to verify that the client trusts the\n   server.\n   On the\
    \ host, it should require an appropriate level of privilege in\n   order to change\
    \ the tunnel server setting (as well as other non-\n   tunnel-specific settings\
    \ such as the DNS server setting, etc.).\n   Making it easy to see the current\
    \ tunnel server setting (e.g., not\n   requiring privilege for this) should help\
    \ detection of changes.\n   The scope of the attack can also be reduced by limiting\
    \ tunneling use\n   in general but especially in preferring native IPv4 to tunneled\
    \ IPv6\n   when connecting to peers who are accessible over IPv4, as doing so\n\
    \   helps mitigate attacks that are facilitated by changing the tunnel\n   server\
    \ setting.  Please refer to Section 3 of [TUNNEL-LOOPS] for a\n   detailed description\
    \ and mitigation measures for a class of attacks\n   based on IPv6 automatic tunnels.\n"
- title: 7.  Mechanisms to Secure the Use of Tunnels
  contents:
  - "7.  Mechanisms to Secure the Use of Tunnels\n   This document described several\
    \ security issues with tunnels.  This\n   does not mean that tunnels need to be\
    \ avoided at any cost.  On the\n   contrary, tunnels can be very useful if deployed,\
    \ operated, and used\n   properly.  The threats against IP tunnels are documented\
    \ here.  If\n   the threats can be mitigated, network administrators can efficiently\n\
    \   and securely use tunnels in their network.  Several measures can be\n   taken\
    \ in order to secure the operation of IPv6 tunnels:\n   o  Operating on-premise\
    \ tunnel servers/relays so that the tunneled\n      traffic does not cross border\
    \ routers.\n   o  Setting up internal routing to steer traffic to these servers/\n\
    \      relays\n   o  Setting up of firewalls [RFC2979] to allow known and controllable\n\
    \      tunneling mechanisms and disallow unknown tunnels.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The authors would like to thank Remi Denis-Courmont,\
    \ Fred Templin,\n   Jordi Palet Martinez, James Woodyatt, Christian Huitema, Brian\n\
    \   Carpenter, Nathan Ward, Kurt Zeilenga, Joel Halpern, Erik Kline,\n   Alfred\
    \ Hoenes, and Fernando Gont for reviewing earlier versions of\n   the document\
    \ and providing comments to make this document better.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This entire document discusses security concerns\
    \ with tunnels.\n"
- title: 10.  Informative References
  contents:
  - "10.  Informative References\n   [RFC2529]  Carpenter, B. and C. Jung, \"Transmission\
    \ of IPv6 over IPv4\n              Domains without Explicit Tunnels\", RFC 2529,\
    \ March 1999.\n   [RFC2661]  Townsley, W., Valencia, A., Rubens, A., Pall, G.,\
    \ Zorn,\n              G., and B. Palter, \"Layer Two Tunneling Protocol \"L2TP\"\
    \",\n              RFC 2661, August 1999.\n   [RFC2979]  Freed, N., \"Behavior\
    \ of and Requirements for Internet\n              Firewalls\", RFC 2979, October\
    \ 2000.\n   [RFC3056]  Carpenter, B. and K. Moore, \"Connection of IPv6 Domains\n\
    \              via IPv4 Clouds\", RFC 3056, February 2001.\n   [RFC3484]  Draves,\
    \ R., \"Default Address Selection for Internet\n              Protocol version\
    \ 6 (IPv6)\", RFC 3484, February 2003.\n   [RFC3931]  Lau, J., Ed., Townsley,\
    \ M., Ed., and I. Goyret, Ed.,\n              \"Layer Two Tunneling Protocol -\
    \ Version 3 (L2TPv3)\", RFC\n              3931, March 2005.\n   [RFC3971]  Arkko,\
    \ J., Ed., Kempf, J., Zill, B., and P. Nikander,\n              \"SEcure Neighbor\
    \ Discovery (SEND)\", RFC 3971, March 2005.\n   [RFC4380]  Huitema, C., \"Teredo:\
    \ Tunneling IPv6 over UDP through\n              Network Address Translations\
    \ (NATs)\", RFC 4380, February\n              2006.\n   [RFC4787]  Audet, F.,\
    \ Ed., and C. Jennings, \"Network Address\n              Translation (NAT) Behavioral\
    \ Requirements for Unicast\n              UDP\", BCP 127, RFC 4787, January 2007.\n\
    \   [RFC5095]  Abley, J., Savola, P., and G. Neville-Neil, \"Deprecation\n   \
    \           of Type 0 Routing Headers in IPv6\", RFC 5095, December\n        \
    \      2007.\n   [RFC5214]  Templin, F., Gleeson, T., and D. Thaler, \"Intra-Site\n\
    \              Automatic Tunnel Addressing Protocol (ISATAP)\", RFC 5214,\n  \
    \            March 2008.\n   [RFC5389]  Rosenberg, J., Mahy, R., Matthews, P.,\
    \ and D. Wing,\n              \"Session Traversal Utilities for NAT (STUN)\",\
    \ RFC 5389,\n              October 2008.\n   [RFC5991]  Thaler, D., Krishnan,\
    \ S., and J. Hoagland, \"Teredo\n              Security Updates\", RFC 5991, September\
    \ 2010.\n   [RFC6056]  Larsen, M. and F. Gont, \"Recommendations for Transport-\n\
    \              Protocol Port Randomization\", BCP 156, RFC 6056, January\n   \
    \           2011.\n   [SECA-IP]  Gont, F., \"Security Assessment of the Internet\
    \ Protocol\n              version 4\", Work in Progress, April 2011.\n   [TUNNEL-LOOPS]\n\
    \              Nakibly, G. and F. Templin, \"Routing Loop Attack using\n     \
    \         IPv6 Automatic Tunnels: Problem Statement and Proposed\n           \
    \   Mitigations\", Work in Progress, March 2011.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Suresh Krishnan\n   Ericsson\n   8400 Decarie Blvd.\n\
    \   Town of Mount Royal, QC\n   Canada\n   Phone: +1 514 345 7900 x42871\n   EMail:\
    \ suresh.krishnan@ericsson.com\n   Dave Thaler\n   Microsoft Corporation\n   One\
    \ Microsoft Way\n   Redmond, WA  98052\n   USA\n   Phone: +1 425 703 8835\n  \
    \ EMail: dthaler@microsoft.com\n   James Hoagland\n   Symantec Corporation\n \
    \  350 Ellis St.\n   Mountain View, CA  94043\n   USA\n   EMail: Jim_Hoagland@symantec.com\n\
    \   URI:   http://symantec.com/\n"
