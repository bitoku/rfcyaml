Abstract The Public Key Infrastructure using X.509 (PKIX) certificate format, and many associated formats, are expressed using ASN.1.
The current ASN.1 modules conform to the 1988 version of ASN.1.
This document updates those ASN.1 modules to conform to the 2002 version of ASN.1.
There are no bits on the wire changes to any of the formats; this is simply a change to the syntax.
Some developers would like the IETF to use the latest version of ASN.1 in its standards.
Most of the RFCs that relate to security protocols still use ASN.1 from the 1988 standard, which has been deprecated.
This is particularly true for the standards that relate to PKIX, Cryptographic Message Syntax (CMS), and S/MIME.
This document updates the following RFCs to use ASN.1 modules that conform to the 2002 version of ASN.1 [ASN1 2002].
Note that not all the modules are updated; some are included to simply make the set complete.
RFC 2560, PKIX Online Certificate Status Protocol (OCSP)
#10 certificate request [RFC2986]  RFC 3279, PKIX algorithms and identifier
[RFC3279]  RFC 3852, contains PKIX attribute certificates, version 1 [RFC3852]  RFC 4055, Additional Algorithms and Identifiers for RSA Cryptography [RFC4055]  RFC 4210, PKIX CMP (Certificate Management Protocol)
[RFC4210]  RFC 4211, PKIX CRMF (Certificate Request Message Format)
RFC 5055, PKIX SCVP (Server based Certificate Validation Protocol)
[RFC5055]  RFC 5272, Certificate Management over CMS (CMC)
RFC 5280, PKIX certificate and Certificate Revocation List (CRL)
(both the implicit and explicit modules)
RFC 5755, PKIX attribute certificates, version 2
Note that some of the modules in this document get some of their definitions from places different than the modules in the original RFCs.
The idea is that these modules, when combined with the modules in [RFC5911] can stand on their own and do not need to import definitions from anywhere else.
Also note that the ASN.1 modules in this document have references in their text comments that need to be looked up in original RFCs, and that some of those references may have already been superseded by later RFCs.
The document also includes a module of common definitions called "PKIX CommonTypes".
These definitions are used here and in [RFC5911].
The document also includes a module of common definitions called "AlgorithmInformation".
These definitions are used here and in [RFC5911].
The modules in this document use the object model available in the 2002 ASN.1 documents to a great extent.
Objects for each of the different algorithm types are defined.
Also, all of the places where the 1988 ASN.1 syntax had ANY holes to allow for variable syntax now use objects.
Much like the way that the PKIX and S/MIME working groups use the prefix of i
d  for object identifiers, this document has also adopted a set of two , three , and four letter prefixes to allow for quick identification of the type of an object based on its name.
This allows, for example, the same back half of the name to be used for the different objects.
Thus, "id sha1" is the object identifier, while "mda sha1" is the message digest object for "sha1".
One or more object sets for the different types of algorithms are defined.
A single consistent name for each different algorithm type is used.
For example, an object set named PublicKeys contains the public keys defined in that module.
If no public keys are defined, then the object set is not created.
When importing these object sets into an ASN.1 module, one needs to be able to distinguish between the different object sets with the same name.
This is done by using both the module name (as specified in the IMPORT statement) and the object set name.
This section contains a module that is imported by many other modules in this document and in [RFC5911].
This module does not come from any existing RFC.
Currently we are using two different prefixes for attributes.
aa  for CMS attributes   ATTRIBUTE ::
WITH SYNTAX { [TYPE &Type]
[EQUALITY MATCHING RULE &equality match]
[MAX &maxCount]] IDENTIFIED BY &i
Specification of MATCHING RULE information object class
WITH SYNTAX { [PARENT &ParentMatchingRules] [SYNTAX &AssertionType] [UNIQUE MATCH INDICATOR &uniqueMatchIndicator
Used for a single valued attribute
d  OBJECT IDENTIFIER UNIQUE, &ExtnType, &Critical    BOOLEAN DEFAULT {TRUE   FALSE } }
WITH SYNTAX { SYNTAX &ExtnType IDENTIFIED BY &i
The parameter contains the set of legal extensions that can    occur in this sequence.
Used for a single extension
The restriction on the critical field has been commented out    the authors are not completely sure it is correct.
The restriction could be done using custom code rather than    compiler generated code, however.
We move this here from RFC 3281 so that    they will use a common single object class to express this    information.
This section contains a module that is imported by many other modules in this document.
Note that this module is also given in [RFC5911].
This module does not come from any existing RFC.
AlgorithmInformation 2009 {iso(1) identified organization(3) dod(6)
kda    Key Derivation Algorithms    maca   Message Authentication Code Algorithms    pk
Public Key    cea    Content (symmetric)
WITH SYNTAX { IDENTIFIER &id [PARAMS [TYPE &Params] ARE &paramPresence ] }
Describes the basic properties of a signature
PUBLIC KEYS { pk rsa
WITH SYNTAX { IDENTIFIER &id [VALUE &Value]
[PARAMS [TYPE &Params] ARE &paramPresence ]
pk rsa pss PUBLIC KEY :
WITH SYNTAX { IDENTIFIER &id [KEY &KeyValue]
[PARAMS [TYPE &Params] ARE &paramPresence]
d contains the OID identifying
WITH SYNTAX { IDENTIFIER &id [PARAMS [TYPE &Params] ARE &paramPresence] [PUBLIC KEYS &PublicKeySet]
Describes the basic properties of a key agreement
&id contains the OID identifying the key agreement
PARAMS TYPE DHDomainParameters ARE inheritable
WITH SYNTAX { IDENTIFIER &id [PARAMS [TYPE &Params] ARE &paramPresence] [PUBLIC KEYS &PublicKeySet]
[UKM [TYPE &Ukm] ARE &ukmPresence]
WITH SYNTAX { IDENTIFIER &id [PARAMS [TYPE &Params] ARE &paramPresence]
WITH SYNTAX { IDENTIFIER &id [PARAMS [TYPE &Params] ARE &paramPresence]
Some parameters that perhaps should have been added would be    fields with the minimum and maximum MAC lengths for
those MAC algorithms that allow truncations.
PARAMS TYPE NULL ARE preferredAbsent
WITH SYNTAX { IDENTIFIER &id [PARAMS [TYPE &Params]
Describes the basic properties of a content encryption
&id contains the OID identifying the content
WITH SYNTAX { IDENTIFIER &id [PARAMS [TYPE &Params] ARE &paramPresence]
This would be used for cases where an algorithm of an unknown    type is used.
WITH SYNTAX { IDENTIFIER &id [PARAMS [TYPE &Params] ARE &paramPresence]
ALGORITHM TYPE.&id({AlgorithmSet}), parameters  ALGORITHM TYPE.
We have moved the SMIME CAPS from the module for RFC 3851 to here    because it is used in RFC 4262 (X.509 Certificate Extension for    S/MIME Capabilities)
This class is used to represent an S/MIME capability.
S/MIME    capabilities are used to represent what algorithm capabilities    an individual has.
The classic example was the content encryption    algorithm RC2 where the algorithm id and the RC2 key lengths    supported needed to be advertised, but the IV used is not fixed.
Another example where information needs to be shown is for    RSA OAEP where only specific hash functions or mask generation    functions are supported, but the saltLength is specified by the    sender and not the recipient.
This class is used to associate the type that describes the    capabilities with the object identifier.
WITH SYNTAX { [TYPE &Type] IDENTIFIED
Define a single S/MIME capability encoding SMIMECapability{SMIME
ASN.1 Module for RFC 2560 OCSP 2009 {iso(1) identified organization(3)
IMPORTS Extensions{}, EXTENSION, ATTRIBUTE FROM PKIX CommonTypes 2009 {iso(1) identified
} AlgorithmIdentifier{}, DIGEST ALGORITHM, SIGNATURE ALGORITHM FROM AlgorithmInformation 2009 {iso(1) identified organization(3)
)} AuthorityInfoAccessSyntax, GeneralName, CrlEntryExtensions FROM PKIX1Implicit 2009 {
id mod pkix1 implicit 02(59)
, id ad ocsp, Certificate FROM PKIX1Explicit 2009 {iso(1) identified organization(3) dod(6)
id mod pkix1 explicit 02(51)
} sa dsaWithSHA1, sa rsaWithMD2, sa rsaWithMD5, sa rsaWithSHA1 FROM PKIXAlgs 2009 {iso(1) identified organization(3) dod(6)
EXPLICIT SEQUENCE OF Certificate OPTIONAL }
Hash of Issuer's DN issuerKeyHash
{ BasicOCSPResponse IDENTIFIED BY id pkix ocsp
hash of responder's public key   (excluding the tag and length fields)
d pkix ocsp response } re ocsp service locator EXTENSION :
d pkix ocsp service locator }
{ SYNTAX CrlID IDENTIFIED BY
pkix ocsp crl } re ocsp archive cutoff EXTENSION ::
id pkix ocsp archive cutoff }
{ id pkix ocsp 2 }
{ id pkix ocsp 3 }
{ id pkix ocsp 4 }
{ id pkix ocsp 5 }
id pkix ocsp archive cutoff
{ id pkix ocsp 6 }
id pkix ocsp service locator OBJECT IDENTIFIER ::
{ id pkix ocsp 7 } END 5.
ASN.1 Module for RFC 2986 PKCS 10 {iso(1) identified organization(3)
id mod pkcs10 2009(69)} DEFINITIONS IMPLICIT TAGS ::
BEGIN IMPORTS AlgorithmIdentifier{}, DIGEST ALGORITHM, SIGNATURE ALGORITHM, PUBLIC KEY FROM AlgorithmInformation 2009 {
)} ATTRIBUTE, Name FROM PKIX1Explicit 2009 {iso(1) identified organization(3)
id mod pkix1 explicit 02(51)
add any locally defined algorithms here
add any locally defined attributes here
ASN.1 Module for RFC 3279 Note that this module also contains information from RFC 5480
PKIXAlgs 2009 { iso(1) identified organization(3)
CAPS FROM AlgorithmInformation 2009 {
mod algorithmInformation 02(58)} mda sha224, mda sha256, mda sha384, mda sha512
S/MIME CAPS for algorithms in this document
For all of the algorithms laid out in this document, the   parameters field for the S/MIME capabilities is defined as   ABSENT as there are no specific values that need to be known   by the receiver for negotiation.
PARAMS TYPE NULL ARE absent
Private key format not in this module   CERT
KEY USAGE {digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyCertSign, cRLSign} }
DSA PK Algorithm, Parameters, and Keys
pk dsa PUBLIC KEY ::
{ IDENTIFIER id dsa KEY
PARAMS TYPE DSA Params ARE inheritable
Private key format not in this module   CERT
KEY USAGE { digitalSignature, nonRepudiation,
iso(1) member body(2) us(840) x9 57(10040)
PARAMS TYPE DomainParameters ARE inheritable
Private key format not in this module
Private key format not in this module
OCTET STRING   Elliptic Curve (EC)
(Section 2.1.1 of RFC 5480)
ECParameters ARE required   Private key format not in this module   CERT
STRING   see RFC 5480 for syntax and restrictions
(Section 2.1.2 of RFC 5480)
EC Diffie Hellman Algorithm ID pk ecDH PUBLIC KEY ::
ecDH KEY ECPoint PARAMS TYPE ECParameters ARE required   Private key format not in this module
Menezes Qu Vanstone Algorithm ID
ECParameters ARE required   Private key format not in this module
implicitCurve MUST NOT be used in PKIX
specifiedCurve MUST NOT be used in
PKIX   Details for specifiedCurve can be found in [X9.62]
Any future additions to this CHOICE should be coordinated   with ANSI X.9. }
If you need to be able to decode ANSI X.9 parameter structures,
uncomment the implicitCurve and specifiedCurve above, and also   uncomment
the following:  (WITH COMPONENTS {namedCurve PRESENT})
WITH SYNTAX { ID &i
the curves are referred to as 'ansiX9' as   opposed to 'sec'.
For example, secp192r1 is the same curve as   ansix9p192r1.
Note that in [PKI ALG]
the secp192r1 curve was referred to as   prime192v1 and the secp256r1 curve was referred to as   prime256v1.
Note that [FIPS186 3] refers to secp192r1
as P 384,   and secp521r1
{ IDENTIFIER md2WithRSAEncryption PARAMS TYPE NULL ARE required HASHES { mda md2 } PUBLIC KEYS { pk rsa } SMIME CAPS { IDENTIFIED BY md2WithRSAEncryption }
SHA 1 sa rsaWithSHA1 SIGNATURE ALGORITHM ::
{ IDENTIFIER sha1WithRSAEncryption PARAMS TYPE NULL
) rsadsi(113549) pkcs(1) pkcs 1(1)
ARE absent HASHES { mda sha1 }
iso(1) member body(2) us(840) x9 57(10040)
PARAMS TYPE NULL ARE absent HASHES { mda sha224
PARAMS TYPE NULL ARE absent HASHES { mda sha1 }
PARAMS TYPE NULL ARE absent HASHES { mda sha224
PARAMS TYPE NULL ARE absent HASHES { mda sha256 }
r  INTEGER, s  INTEGER }
md2 PARAMS TYPE NULL ARE preferredAbsent } id
MD 5 mda md5 DIGEST ALGORITHM ::
{ IDENTIFIER id md5 PARAMS TYPE NULL ARE preferredAbsent }
sha1 PARAMS TYPE NULL ARE preferredAbsent }
ASN.1 Module for RFC 3852 (Attribute Certificate v1)
AttributeCertificateVersion1 2009 {iso(1) member body(2) us(840)
} DEFINITIONS EXPLICIT TAGS ::
IMPORTS SIGNATURE ALGORITHM, ALGORITHM, AlgorithmIdentifier{} FROM AlgorithmInformation 2009 {
)} AttributeSet{}, Extensions{}, EXTENSION, ATTRIBUTE FROM PKIX CommonTypes 2009 {iso(1) identified organization(3) dod(6)
} CertificateSerialNumber, UniqueIdentifier, SIGNED{} FROM PKIX1Explicit 2009 { iso(1) identified organization(3) dod(6)
id mod pkix1 explicit 02(51)
} GeneralNames FROM PKIX1Implicit 2009 { iso(1) identified organization(3) dod(6)
id mod pkix1 implicit 02(59)
} AttCertValidityPeriod, IssuerSerial FROM PKIXAttributeCertificate 2009 { iso(1) identified organization(3)
[X.509 97], but   different type names are used to avoid collisions.
ASN.1 Module for RFC 4055
PKIX1 PSS OAEP Algorithms 2009 {
id mod pkix1 rsa pkalgs 02(54)
} id sha1, mda sha1, pk rsa, RSAPublicKey FROM PKIXAlgs 2009 {iso(1) identified organization(3) dod(6)
These objects would be included as part    of an Object Set to restrict the set of legal values.
KEY RSAPublicKey PARAMS TYPE RSASSA PSS params ARE optional
Private key format not in this module   CERT
d RSASSA PSS PARAMS TYPE RSASSA PSS params ARE required HASHES { mda sha1   mda
PARAMS TYPE NULL ARE required HASHES { mda sha224 } PUBLIC KEYS { pk rsa } SMIME CAPS { IDENTIFIED BY sha224WithRSAEncryption
} sa sha384WithRSAEncryption SIGNATURE ALGORITHM :
{ IDENTIFIER sha384WithRSAEncryption PARAMS TYPE NULL ARE required HASHES { mda sha384 } PUBLIC KEYS { pk rsa } SMIME CAPS { IDENTIFIED BY sha384WithRSAEncryption }
PARAMS TYPE NULL ARE required HASHES { mda sha512 } PUBLIC KEYS { pk rsa } SMIME CAPS { IDENTIFIED BY sha512WithRSAEncryption }
PARAMS TYPE RSAES OAEP params ARE optional   Private key format not in this module
IDENTIFIER id RSAES OAEP PARAMS TYPE RSAES OAEP params ARE required PUBLIC KEYS { pk rsa
pk rsaES OAEP } SMIME CAPS { TYPE RSAES OAEP params IDENTIFIED BY
When rsaEncryption is used in an AlgorithmIdentifier, the   parameters MUST be present and MUST be NULL.
When id RSAES OAEP is used in an AlgorithmIdentifier,   and the parameters field is present, it MUST be   RSAES OAEP params.
When id mgf1 is used in an AlgorithmIdentifier, the parameters   MUST be present and MUST be a HashAlgorithm.
When id pSpecified is used in an AlgorithmIdentifier, the   parameters MUST be an OCTET STRING.
When id RSASSA PSS is used in an AlgorithmIdentifier, and the   parameters field is present, it MUST be RSASSA PSS params.
When the following OIDs are used in an AlgorithmIdentifier, the   parameters SHOULD be absent, but if the parameters are present,   they MUST be NULL.
id sha1 is imported from RFC 3279.
Additionally, the v1.5   signature algorithms (i.e., rsaWithSHA256) are now solely placed   in that module.
PARAMS TYPE NULL ARE preferredAbsent }
PARAMS TYPE NULL ARE preferredAbsent }
PARAMS TYPE NULL ARE preferredAbsent }
sha512 PARAMS TYPE NULL ARE preferredAbsent }
sha1 PARAMS TYPE NULL ARE preferredPresent }
PARAMS TYPE NULL ARE preferredPresent }
sha256 PARAMS TYPE NULL ARE preferredPresent }
PARAMS TYPE NULL ARE preferredPresent }
sha512 PARAMS TYPE NULL ARE preferredPresent
We have a default algorithm create the value here
If the identifier is i
Define the set of known source algorithms for PSS
{ algorithm id pSpecified, parameters
Note that the tags in this Sequence are explicit.
The hash algorithm in hashAlgorithm and in
AlgorithmIdentifier parameters for id RSAES OAEP.
Note that the tags in this Sequence are explicit.
The hash algorithm in hashFunc and in   maskGenFunc should be the same.
[1] MaskGenAlgorithm DEFAULT mgf1SHA1, pSourceFunc
[2] PSourceAlgorithm DEFAULT pSpecifiedEmpty } END 9.
ASN.1 Module for RFC 4210 PKIXCMP 2009 { iso(1) identified organization(3)
Extensions{}, EXTENSION, ATTRIBUTE FROM PKIX CommonTypes 2009 {iso(1) identified organization(3)
} AlgorithmIdentifier{}, SIGNATURE ALGORITHM, ALGORITHM, DIGEST ALGORITHM, MAC ALGORITHM FROM AlgorithmInformation 2009 {iso(1) identified organization(3)
)} Certificate, CertificateList FROM PKIX1Explicit 2009 {iso(1) identified organization(3)
explicit 02(51)} GeneralName, KeyIdentifier FROM PKIX1Implicit 2009 {iso(1) identified organization(3) dod(6)
id mod pkix1 implicit 02(59)
} CertTemplate, PKIPublicationInfo, EncryptedValue, CertId, CertReqMessages FROM PKIXCRMF 2009 { iso(1) identified organization(3)
}   see also the behavioral clarifications to CRMF codified in   Appendix C of this specification CertificationRequest FROM PKCS 10 {
This syntax, while bits on the wire compatible with the   standard X.509 definition of "Certificate", allows the   possibility of future certificate types (such as X.509   attribute certificates, WAP WTLS certificates, or other kinds   of certificates) within this certificate management protocol,   should a need ever arise to support such generality.
Those   implementations that do not foresee a need to ever support   other certificate types MAY, if they wish, comment out the   above structure and "uncomment" the following one prior to   compiling this ASN.1 module.
(Note that interoperability   with implementations that don't do this will be unaffected by   this change.)
, senderNonce   is inserted by the creator of this message; recipNonce   is a nonce previously inserted in a related message by   the intended recipient of this message freeText
this may be used to convey context specific information
(this field not primarily intended for human consumption) }
text encoded as UTF 8 String [RFC3629]
each   UTF8String MAY include an [RFC3066] language tag   to indicate the language of the contained text;
CA Key Update Ann. cann
implementations MAY wish to limit acceptable sizes   of this string to values appropriate for their environment   in order to reduce the risk of denial of service attacks
INTEGER,   number of times the OWF is applied
response MAY use the polling req
/rep PKIMessages specified   in Section 5.3.22;
alternatively, polling in the underlying   transport layer MAY have some utility in this regard)
More codes may be added in the future if/when required.
,   integrity check failed (e.g., signature did not verify)
transaction not permitted or supported
no certificate could be found matching
hashVal is calculated over the DER encoding of the   self signed certificate with the identifier certID. }
One Challenge per encryption key certification request (in the   same order as these requests appear in CertReqMessages).
(if   omitted, then the owf used in the immediately preceding   Challenge is to be used).
[Note that a different   INTEGER MUST be used for each Challenge.]
the encryption (under the public key for which the cert.
One INTEGER per encryption key certification request (in the   same order as these requests appear in CertReqMessages).
The   retrieved INTEGER A (above) is returned to the sender of the   corresponding Challenge.
[RFC4211] for comment on encoding publicationInfo [1]
[1] EncryptedValue } KeyRecRepContent ::
for which revocation is requested   (e.g., for cases in which serialNumber is not available)
[0] SEQUENCE SIZE (1..MAX) OF CertId OPTIONAL,
IDs for which revocation was requested   (
SEQUENCE SIZE (1..MAX) OF CertificateList OPTIONAL
extra CRL details (e.g., crl number, reason, location, etc.)
This construct MAY also be used to define new PKIX Certificate   Management Protocol request and response messages, or general    purpose (e.g., announcement) messages for future needs or for   specific environments.
May be sent by EE, RA, or CA (depending on message content).
The OPTIONAL infoValue parameter of InfoTypeAndValue will   typically be omitted for some of the examples given above.
The receiver is free to ignore any contained OBJECT IDs that it   does not recognize.
If sent from EE to CA, the empty set   indicates that the CA may send   any/all information that it wishes.
MAY ignore any contained OIDs that it does not   recognize.
PKIFreeText OPTIONAL } END 10.
ASN.1 Module for RFC 4211 PKIXCRMF 2009 {iso(1) identified organization(3)
Extensions{}, EXTENSION, ATTRIBUTE, SingleAttribute{} FROM PKIX CommonTypes 2009 {iso(1) identified organization(3)
} AlgorithmIdentifier{}, SIGNATURE ALGORITHM, ALGORITHM, DIGEST ALGORITHM, MAC ALGORITHM, PUBLIC KEY FROM AlgorithmInformation 2009 {iso(1) identified organization(3)
)} Version, Name, Time, SubjectPublicKeyInfo, UniqueIdentifier, id pkix, SignatureAlgorithms FROM PKIX1Explicit 2009 {iso(1) identified organization(3)
explicit 02(51)} GeneralName, CertExtensions FROM PKIX1Implicit 2009 {iso(1) identified organization(3)
id mod pkix1 implicit 02(59)
} EnvelopedData, CONTENT TYPE FROM CryptographicMessageSyntax 2009 {
id mod cms 2004 02(41)
d mod cmsalg 2001 02(37) }
mda sha1 FROM PKIXAlgs 2009 {
at least one MUST be present
If the CertReqMsg   certReq CertTemplate contains the subject and publicKey values,   then poposkInput MUST be omitted and the signature MUST be   computed over the DER encoded value of CertReqMsg certReq.
If   the CertReqMsg certReq CertTemplate does not contain both the   public key and subject values (i.e., if it contains only one   of these, or neither), then poposkInput MUST be present and   MUST be signed.
based MAC   on the DER encoded value of
PasswordBasedMac PARAMS TYPE PBMParameter ARE required
The modules containing the ASN.1 for the DES and 3DES
algorithms have not been updated at the time that this is   being published.
Users of this module should define the   appropriate MAC ALGORITHM objects and
uncomment the   following lines if they support these MAC algorithms.
SubsequentMessage,   possession will be proven in a subsequent message dhMAC
requests that CA engage in challenge response exchange with   end entity in order to prove private key possession
ct encKeyWithID content type used as the content type for the   EnvelopedData in POPOPrivKey.
It contains both a private key and an identifier for key escrow   agents to check against recovery requestors.
{id ct 21} EncKeyWithID ::
d regCtrl regToken } id regCtrl
id regCtrl pkiPublicationInfo } i
{ TYPE PKIArchiveOptions IDENTIFIED BY
EncryptedKey,   the actual value of the private key keyGenParameters
[1] KeyGenParameters,   parameters that allow the private key
The encrypted private key MUST be placed in the envelopedData   encryptedContentInfo encryptedContent OCTET STRING.
the symmetric algorithm used to encrypt the value encSymmKey
symmetric key used to encrypt the value keyAlg
If encValue contains some other format/encoding   for the private key, the first octet of valueHint MAY be used   to indicate the format/encoding (but note that the possible values   of this octet are not specified at this time).
In all cases, the   intendedAlg field MUST be used to indicate at least the OID of   the intended algorithm of the private key, unless this information   is known a priori to both sender and receiver by some other means.
{ TYPE OldCertId IDENTIFIED BY id
d regCtrl protocolEncrKey } i
{ id regCtrl 6 } ProtocolEncrKey ::
d regInfo utf8Pairs } id regInfo
1 }  with syntax UTF8Pairs ::
ASN.1 Module for RFC 5055 SCVP 2009 { iso(1) identified organization(3)
IMPORTS Extensions{}, EXTENSION, ATTRIBUTE FROM PKIX CommonTypes 2009 {iso(1) identified
} AlgorithmIdentifier{}, SIGNATURE ALGORITHM, PUBLIC KEY, KEY AGREE, DIGEST ALGORITHM, KEY DERIVATION, MAC ALGORITHM FROM AlgorithmInformation 2009 {iso(1) identified organization(3)
mod algorithmInformation 02(58)} Certificate, CertificateList, CertificateSerialNumber, SignatureAlgorithms, SubjectPublicKeyInfo FROM PKIX1Explicit 2009 {
id mod pkix1 explicit 02(51)
} GeneralNames, GeneralName, KeyUsage, KeyPurposeId FROM PKIX1Implicit 2009 { iso(1) identified organization(3) dod(6)
id mod pkix1 implicit 02(59)
} AttributeCertificate FROM PKIXAttributeCertificate 2009 { iso(1) identified organization(3)
} OCSPResponse FROM OCSP 2009 { iso(1) identified organization(3) dod(6)
id mod ocsp 02(48) } ContentInfo, CONTENT TYPE FROM CryptographicMessageSyntax 2009 {
id mod cms 2004 02(41)
} mda sha1 FROM PKIXAlgs 2009 {
{ id ct 10 }
SCVP Certificate Validation Request CVRequest ::
OCTET STRING, issuerSerial    SCVPIssuerSerial, hashAlgorithm
HashAlgorithm DEFAULT { algorithm mda sha1.&id
[1] SEQUENCE SIZE (1..MAX) OF OBJECT IDENTIFIER OPTIONAL, inhibitPolicyMapping
[2] BOOLEAN OPTIONAL, requireExplicitPolicy  [3] BOOLEAN OPTIONAL,
[1] BOOLEAN DEFAULT TRUE, protectResponse
This document defines no extensions
UTF8String OPTIONAL } CVStatusCode ::
[0] HashValue,   hash of CVRequest fullRequest
SEQUENCE { check    OBJECT IDENTIFIER (
ct scvp valPolRequest OBJECT IDENTIFIER ::
ct scvp valPolResponse CONTENT TYPE ::
id stc build valid pkc path
id stc build aa path
id stc build valid aa path
id stc build status checked aa path
id stc status check ac and build status checked aa path }
id stc build valid aa path
swb pkc best cert path
swb pkc public key info
swb pkc all cert paths
swb pkc ee revocation info
swb aa revocation info   swb ac revocation info }
id swb pkc best cert path }
id swb pkc best cert path
id swb pkc revocation info }
id swb pkc revocation info
d swb pkc public key info }
id swb pkc public key info
{ id swb 4 } swb aa cert path WANT
d swb aa cert path }
id swb aa cert path
id swb aa revocation info
id swb ac revocation info }
id swb ac revocation info
all cert paths WANT BACK
d swb pkc all cert paths }
{ RevInfoWantBack IDENTIFIED BY i
d swb pkc ee revocation info }
id swb pkc ee revocation info
id swb pkc CAs revocation info
id swb ac cert }
{IDENTIFIED BY id svp basicValAlg }
SCVP Basic Validation Algorithm Errors
id bvae not yet valid
{ id bvae 3 }
{ id bvae 4 }
{ id bvae 9 }
{ id bvae 10 }
SCVP Name Validation Algorithm Identifier svp nameValAlg POLICY :
SCVP Name Validation Algorithm Errors
id svp nameValAlg NameValidationErrorSet OBJECT IDENTIFIER ::
{ id nvae name mismatch
id nvae bad name type
id nvae mixed names }
{ id nvae 3 }
{ id nvae 4 }
id nvae bad name type
{ id nvae 6 }
id kp scvpClient } id kp scvpServer
{ id kp 15 } id
ASN.1 Module for RFC 5272
} DEFINITIONS IMPLICIT TAGS ::
IMPORTS AttributeSet{}, Extension{}, EXTENSION, ATTRIBUTE FROM PKIX CommonTypes 2009 {iso(1) identified organization(3)
} AlgorithmIdentifier{}, DIGEST ALGORITHM, KEY WRAP, KEY DERIVATION, MAC ALGORITHM, SIGNATURE ALGORITHM, PUBLIC KEY FROM AlgorithmInformation 2009 {iso(1) identified organization(3)
mod algorithmInformation 02(58)} CertificateSerialNumber, GeneralName, CRLReason, ReasonFlags, CertExtensions FROM PKIX1Implicit 2009 {
id mod pkix1 implicit 02(59)
} Name, id pkix, PublicKeyAlgorithms, SignatureAlgorithms FROM PKIX1Explicit 2009 {iso(1) identified organization(3)
} ContentInfo, IssuerAndSerialNumber, CONTENT TYPE FROM CryptographicMessageSyntax 2009 {
id mod cms 2004 02(41)
} CertReqMsg, PKIPublicationInfo, CertTemplate FROM PKIXCRMF 2009 {iso(1) identified organization(3)
} mda sha1 FROM PKIXAlgs 2009 { iso(1) identified organization(3)
} kda PBKDF2, maca hMAC SHA1 FROM CryptographicMessageSyntaxAlgorithms 2009 {
d mod cmsalg 2001 02(37) } mda sha256 FROM PKIX1 PSS
} Cmc Control Set CMC CONTROL :
No other messages currently defined OtherMsgSet
This defines the response message in the protocol ct
{ PKIResponse IDENTIFIED BY id cct PKIResponse }
} cmc dataReturn CMC CONTROL ::
BY id cmc dataReturn }
4} cmc regInfo CMC CONTROL :
18} cmc responseInfo CMC CONTROL ::
{ OCTET STRING IDENTIFIED BY
The following controls have the type UTF8String
cmc identification CMC CONTROL ::
d cmc transactionId } id cmc
The following controls have the type OCTET
{ OCTET STRING IDENTIFIED BY
} cmc recipientNonce CMC CONTROL ::
Used to return status in a response cmc statusInfo CMC CONTROL :
PendInfo } OPTIONAL } PendInfo ::
The spelling of unsupportedExt is corrected in this version.
In RFC 2797, it was unsuportedExt.
d cmc addExtensions } id cmc addExtensions
{ EncryptedPOP IDENTIFIED BY id cmc encryptedPOP
{ LraPopWitness IDENTIFIED BY i
cmc lraPOPWitness } id cmc
cmc revokeRequest CMC CONTROL ::
OPTIONAL } cmc confirmCertAcceptance CMC CONTROL ::
Unauthenticated attribute to carry removable data.
id aa(2)} aa cmc unsignedData ATTRIBUTE
{ PublishTrustAnchors IDENTIFIED BY id
cmc authData } id cmc authData
These two items use BodyPartList cmc batchRequests
{ BodyPartList IDENTIFIED BY id
{ BodyPartList IDENTIFIED BY id
d cmc publishCert } id cmc
} cmc modCertTemplate CMC CONTROL ::
{ ModCertTemplate IDENTIFIED BY id cmc modCertTemplate } id cmc
cmc identityProofV2 CMC CONTROL ::
{ IdentityProofV2 IDENTIFIED BY id
ASN.1 Module for RFC 5755 PKIXAttributeCertificate 2009 {iso(1) identified organization(3)
Extensions{}, SecurityCategory{}, EXTENSION, ATTRIBUTE, SECURITY CATEGORY FROM PKIX CommonTypes 2009 {iso(1) identified organization(3)
} AlgorithmIdentifier{}, SIGNATURE ALGORITHM, DIGEST ALGORITHM FROM AlgorithmInformation 2009 {iso(1) identified organization(3)
module OIDs MAY change if [PKIXPROF] changes   PKIX
SignatureAlgorithms FROM PKIX1Explicit 2009 {iso(1) identified organization(3)
explicit 02(51)} GeneralName, GeneralNames, id ce,
ext AuthorityKeyIdentifier, ext AuthorityInfoAccess, ext CRLDistributionPoints FROM PKIX1Implicit 2009 {iso(1) identified organization(3)
id mod pkix1 implicit 02(59)
} ContentInfo FROM CryptographicMessageSyntax 2009 { iso(1) member
{ SYNTAX NULL IDENTIFIED BY id
ce noRevAvail} ext ac proxying EXTENSION ::
aca authenticationInfo} at accesIdentity ATTRIBUTE :
id aca chargingIdentity} at group ATTRIBUTE ::
BY id aca group} at role ATTRIBUTE :
OIDs used by Attribute Certificate Extensions
{ id pe 10 }
id aca 5 } is reserved i
Uncomment the following declaration and comment the above line if   using the id at clearance attribute as defined in [RFC3281]
{ joint iso ccitt(2) ds(5)
the name of the claimant or role
[2] ObjectDigestInfo OPTIONAL   used to directly authenticate the   holder
otherObjectTypes MUST NOT   be used in this profile otherObjectTypeID
issuerName MUST be present in this profile
SEQUENCE { pathLenConstraint INTEGER (0..MAX) OPTIONAL,
AttrSpec OPTIONAL, permitUnSpecified BOOLEAN DEFAULT TRUE
Syntax used by Attribute Certificate Attributes
the following lines to support deprecated clearance   syntax and comment out previous Clearance.
[2] SET OF SecurityCategory rfc3281 {{SupportedSecurityCategories}} OPTIONAL } ClassList
ASN.1 Module for RFC 5280, Explicit and Implicit Note that many of the changes in this module are similar or the same as the changes made in more recent versions of X.509 itself.
PKIX1Explicit 2009 {iso(1) identified organization(3)
id mod pkix1 explicit 02(51)
IMPORTS Extensions{}, EXTENSION, ATTRIBUTE, SingleAttribute{} FROM PKIX CommonTypes 2009 {iso(1) identified
} AlgorithmIdentifier{}, PUBLIC KEY, SIGNATURE ALGORITHM FROM AlgorithmInformation 2009 {iso(1) identified organization(3)
} CertExtensions, CrlExtensions, CrlEntryExtensions FROM PKIX1Implicit 2009 {
id mod pkix1 implicit 02(59)
} SignatureAlgs, PublicKeys FROM PKIXAlgs 2009 {iso(1) identified organization(3) dod(6)
56} SignatureAlgs, PublicKeys FROM PKIX1 PSS OAEP Algorithms 2009 {
id mod pkix1 rsa pkalgs 02(54)
} ORAddress FROM PKIX X400Address 2009 {
{ id pkix 1 }
arc for private certificate extensions
arc for policy qualifier types
policyQualifierIds for Internet policy qualifiers
}   OID for CPS qualifier
Arc for standard naming attributes
{ TYPE X520name IDENTIFIED BY id at name }
{ id at 4 } at surname ATTRIBUTE ::
{ TYPE X520name IDENTIFIED BY id at surname
{ TYPE X520name IDENTIFIED BY id at givenName
} id at generationQualifier AttributeType ::
{ id at 44 } at generationQualifier ATTRIBUTE ::
{ TYPE X520name IDENTIFIED BY id at generationQualifier }
Naming attributes of type X520CommonName
{ id at 3 } at x520CommonName ATTRIBUTE ::
id at commonName } X520CommonName
{ TYPE DirectoryString {ub state name} IDENTIFIED BY id at
Naming attributes of type X520OrganizationName
id at organizationName  AttributeType ::
{ id at 10 } at x520OrganizationName ATTRIBUTE ::
{ TYPE DirectoryString {ub organization name} IDENTIFIED BY id at organizationName } X520OrganizationName ::
X520OrganizationalUnitName id at organizationalUnitName AttributeType ::
TYPE DirectoryString  {ub organizational unit name}
IDENTIFIED BY id at organizationalUnitName
Naming attributes of type X520Title
IDENTIFIED BY id at title }
Naming attributes of type X520dnQualifier
Naming attributes of type X520countryName (digraph from IS 3166)
{ id at 6 } at x520countryName ATTRIBUTE :
Naming attributes of type X520Pseudonym
Naming attributes of type DomainComponent (from RFC 2247)
25 } at domainComponent ATTRIBUTE ::
SET SIZE (1 .. MAX) OF SingleAttribute { {SupportedAttributes} }
Certificate  and CRL specific structures begin here
Version, Time, CertificateSerialNumber, and Extensions were   defined earlier for use in the certificate structure
The two object sets below should be expanded to include    those algorithms which are supported by the system.
PKIX1 PSS OAEP Algorithms 2009.SignatureAlgs }
PKIX1 PSS OAEP Algorithms 2009.PublicKeys}
Note upper bounds on string types, such as TeletexString, are   measured in characters.
Excepting PrintableString or IA5String, a   significantly greater number of octets will be required to hold   such a value.
As a minimum, 16 octets or twice the specified
upper bound, whichever is the larger, should be allowed for   TeletexString.
For UTF8String or UniversalString, at least four   times the upper bound should be allowed.
Information object classes used in the definition   of certificates and CRLs
id mod pkix1 implicit 02(59)
} id pe, id kp
id qt cps, ORAddress, Name, RelativeDistinguishedName, CertificateSerialNumber, DirectoryString{}, SupportedAttributes FROM PKIX1Explicit 2009 {iso(1) identified organization(3)
id mod pkix1 explicit 02(51)
Shared arc for standard certificate and CRL extensions
subject key identifier OID and syntax ext
{ SYNTAX KeyIdentifier IDENTIFIED BY id ce
{ SYNTAX KeyUsage IDENTIFIED BY id ce keyUsage }
id ce keyUsage OBJECT IDENTIFIER ::
id ce 16 } PrivateKeyUsagePeriod ::
certificate policies extension OID and syntax ext
} pqid cps CERT POLICY QUALIFIER ::
} pqid unotice CERT POLICY QUALIFIER ::
CPS pointer qualifier CPSuri ::
subject alternative name extension OID and syntax ext SubjectAltName EXTENSION
} ext SubjectDirectoryAttributes EXTENSION ::
{ SYNTAX SubjectDirectoryAttributes IDENTIFIED BY i
This is a constraint in the issued certificates by CAs, but is    not a requirement on EEs.
ce policyConstraints OBJECT IDENTIFIER ::
{SYNTAX SkipCerts IDENTIFIED BY i
issuing distribution point extension OID and syntax ext IssuingDistributionPoint
[1] BOOLEAN DEFAULT FALSE, onlyContainsCACerts
[2] BOOLEAN DEFAULT FALSE, onlySomeReasons
{ SYNTAX GeneralNames IDENTIFIED BY
Upper bounds ubMax INTEGER :
This module is used to isolate all the X.400 naming information.
There is no reason to expect this to occur in a PKIX certificate.
X.400 address syntax starts here
SEQUENCE { built in standard attributes BuiltInStandardAttributes, built in domain defined attributes BuiltInDomainDefinedAttributes OPTIONAL,   see also teletex domain defined attributes extension attributes ExtensionAttributes
[1] IMPLICIT TerminalIdentifier OPTIONAL, private domain name
[2] PrivateDomainName OPTIONAL, organization name
IMPLICIT OrganizationName OPTIONAL,   see also teletex organization name numeric user identifier
[4] IMPLICIT NumericUserIdentifier OPTIONAL, personal name
[5] IMPLICIT PersonalName OPTIONAL,   see also teletex personal name organizational unit names [6] IMPLICIT OrganizationalUnitNames OPTIONAL }
alpha2 code  PrintableString (SIZE (ub country name alpha length))
NumericString (SIZE (1..ub numeric user id length))
IMPLICIT PrintableString (SIZE (1..ub surname length)), given name  [1] IMPLICIT PrintableString (SIZE (1..
IMPLICIT PrintableString (SIZE (1..ub initials length))
Built in Domain defined Attributes
ub domain defined attribute type length)), value PrintableString (SIZE (1..ub domain defined attribute value length)) }
:   SEQUENCE { extension attribute type [0] IMPLICIT EXTENSION ATTRIBUTE. &id({SupportedExtensionAttributes}), extension attribute value [1] EXTENSION ATTRIBUTE. &Type({SupportedExtensionAttributes} {@extension attribute type})
Extension types and attribute values ea
ub surname length)), given name  [1] IMPLICIT TeletexString (SIZE (1..
OPTIONAL, generation qualifier [3] IMPLICIT TeletexString (SIZE (1..ub generation qualifier length)) OPTIONAL } IDENTIFIED BY 4 } ea teletexOrganizationalUnitNames
NumericString (SIZE (ub country name numeric length)), iso 3166
alpha2 code PrintableString (SIZE (ub country name alpha length))
} IDENTIFIED BY 8 } ea postalCode
{ PDSParameter IDENTIFIED BY 10 } ea
{PDSParameter IDENTIFIED BY 11 } ea extensionORAddressComponents
{PDSParameter IDENTIFIED BY 12 } ea physicalDeliveryPersonalName
{PDSParameter IDENTIFIED BY 14 } ea extensionPhysicalDeliveryAddressComponents
ub pds physical address lines) OF PrintableString (SIZE (1..ub pds parameter length)) OPTIONAL, teletex string
OPTIONAL } IDENTIFIED BY 16 } ea streetAddress EXTENSION ATTRIBUTE ::
{PDSParameter IDENTIFIED BY 17 } ea
{PDSParameter IDENTIFIED BY 18 } ea posteRestanteAddress EXTENSION ATTRIBUTE ::
{PDSParameter IDENTIFIED BY 19 } ea uniquePostalName
{ PDSParameter IDENTIFIED BY 20 } ea
OPTIONAL } ea extendedNetworkAddress EXTENSION
ub e163 4 number length)), sub address [1]
ub e163 4 sub address length)) OPTIONAL }, psap address [0]
IMPLICIT PresentationAddress } IDENTIFIED BY 22
EXPLICIT SET SIZE (1..MAX) OF OCTET STRING }
(0..ub integer options) IDENTIFIED BY 23 }
Extension Domain defined Attributes ea teletexDomainDefinedAttributes
SEQUENCE { type TeletexString (SIZE (1..
ub domain defined attribute type length)), value TeletexString (SIZE (1..
ub domain defined attribute value length))
2 ub country name numeric length INTEGER :
8 ub domain defined attribute value length INTEGER ::
128 ub domain name length INTEGER ::
16 ub extension attributes INTEGER ::
256 ub e163 4 number length INTEGER ::
15 ub e163 4 sub address length INTEGER ::
40 ub generation qualifier length INTEGER ::
3 ub given name length INTEGER :
Note upper bounds on string types, such as TeletexString, are   measured in characters.
Excepting PrintableString or IA5String, a   significantly greater number of octets will be required to hold   such a value.
As a minimum, 16 octets or twice the specified
upper bound, whichever is the larger, should be allowed for   TeletexString.
For UTF8String or UniversalString, at least four   times the upper bound should be allowed.
Security Considerations Even though all the RFCs in this document are security related, the document itself does not have any security considerations.
The ASN.1 modules keep the same bits on the wire as the modules that they replace.
