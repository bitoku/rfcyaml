- title: __initial_text__
  contents:
  - "                X.509 Internet Public Key Infrastructure\n               Online\
    \ Certificate Status Protocol - OCSP\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a protocol useful in determining the current\n\
    \   status of a digital certificate without requiring Certificate\n   Revocation\
    \ Lists (CRLs).  Additional mechanisms addressing PKIX\n   operational requirements\
    \ are specified in separate documents.  This\n   document obsoletes RFCs 2560\
    \ and 6277.  It also updates RFC 5912.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6960.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Requirements Language ......................................5\n  \
    \ 2. Protocol Overview ...............................................5\n    \
    \  2.1. Request ....................................................5\n      2.2.\
    \ Response ...................................................6\n      2.3. Exception\
    \ Cases ............................................8\n      2.4. Semantics of\
    \ thisUpdate, nextUpdate, and producedAt ........9\n      2.5. Response Pre-Production\
    \ ....................................9\n      2.6. OCSP Signature Authority Delegation\
    \ .......................10\n      2.7. CA Key Compromise .........................................10\n\
    \   3. Functional Requirements ........................................10\n  \
    \    3.1. Certificate Content .......................................10\n    \
    \  3.2. Signed Response Acceptance Requirements ...................10\n   4. Details\
    \ of the Protocol ........................................11\n      4.1. Request\
    \ Syntax ............................................11\n           4.1.1. ASN.1\
    \ Specification of the OCSP Request ............11\n           4.1.2. Notes on\
    \ OCSP Requests .............................13\n      4.2. Response Syntax ...........................................14\n\
    \           4.2.1. ASN.1 Specification of the OCSP Response ...........14\n  \
    \         4.2.2. Notes on OCSP Responses ............................16\n    \
    \              4.2.2.1. Time ......................................16\n      \
    \            4.2.2.2. Authorized Responders .....................16\n        \
    \                   4.2.2.2.1. Revocation Checking of\n                      \
    \                an Authorized Responder ........17\n                  4.2.2.3.\
    \ Basic Response ............................18\n      4.3. Mandatory and Optional\
    \ Cryptographic Algorithms ...........19\n      4.4. Extensions ................................................19\n\
    \           4.4.1. Nonce ..............................................20\n  \
    \         4.4.2. CRL References .....................................20\n    \
    \       4.4.3. Acceptable Response Types ..........................20\n      \
    \     4.4.4. Archive Cutoff .....................................21\n        \
    \   4.4.5. CRL Entry Extensions ...............................21\n          \
    \ 4.4.6. Service Locator ....................................22\n           4.4.7.\
    \ Preferred Signature Algorithms .....................22\n                  4.4.7.1.\
    \ Extension Syntax ..........................23\n                  4.4.7.2. Responder\
    \ Signature Algorithm Selection ...24\n                           4.4.7.2.1. Dynamic\
    \ Response ...............24\n                           4.4.7.2.2. Static Response\
    \ ................25\n           4.4.8. Extended Revoked Definition ........................25\n\
    \   5. Security Considerations ........................................26\n  \
    \    5.1. Preferred Signature Algorithms ............................27\n    \
    \       5.1.1. Use of Insecure Algorithms .........................27\n      \
    \     5.1.2. Man-in-the-Middle Downgrade Attack .................27\n        \
    \   5.1.3. Denial-of-Service Attack ...........................28\n   6. IANA\
    \ Considerations ............................................28\n   7. References\
    \ .....................................................28\n      7.1. Normative\
    \ References ......................................28\n      7.2. Informative\
    \ References ....................................29\n   8. Acknowledgements ...............................................29\n\
    \   Appendix A. OCSP over HTTP ........................................30\n  \
    \   A.1. Request ....................................................30\n    \
    \ A.2. Response ...................................................30\n   Appendix\
    \ B. ASN.1 Modules .........................................30\n     B.1. OCSP\
    \ in ASN.1 - 1998 Syntax ................................31\n     B.2. OCSP in\
    \ ASN.1 - 2008 Syntax ................................34\n   Appendix C. MIME\
    \ Registrations ....................................39\n     C.1. application/ocsp-request\
    \ ...................................39\n     C.2. application/ocsp-response ..................................40\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies a protocol useful in determining\
    \ the current\n   status of a digital certificate without requiring CRLs.  Additional\n\
    \   mechanisms addressing PKIX operational requirements are specified in\n   separate\
    \ documents.\n   This specification obsoletes [RFC2560] and [RFC6277].  The primary\n\
    \   reason for the publication of this document is to address ambiguities\n  \
    \ that have been found since the publication of RFC 2560.  This\n   document differs\
    \ from RFC 2560 in only a few areas:\n   o  Section 2.2 extends the use of the\
    \ \"revoked\" response to allow\n      this response status for certificates that\
    \ have never been issued.\n   o  Section 2.3 extends the use of the \"unauthorized\"\
    \ error response,\n      as specified in [RFC5019].\n   o  Sections 4.2.1 and\
    \ 4.2.2.3 state that a response may include\n      revocation status information\
    \ for certificates that were not\n      included in the request, as permitted\
    \ in [RFC5019].\n   o  Section 4.2.2.2 clarifies when a responder is considered\
    \ an\n      Authorized Responder.\n   o  Section 4.2.2.3 clarifies that the ResponderID\
    \ field corresponds\n      to the OCSP responder signer certificate.\n   o  Section\
    \ 4.3 changes the set of cryptographic algorithms that\n      clients must support\
    \ and the set of cryptographic algorithms that\n      clients should support as\
    \ specified in [RFC6277].\n   o  Section 4.4.1 specifies, for the nonce extension,\
    \ ASN.1 syntax\n      that was missing in RFC 2560.\n   o  Section 4.4.7 specifies\
    \ a new extension that may be included in a\n      request message to specify\
    \ signature algorithms the client would\n      prefer the server use to sign the\
    \ response as specified in\n      [RFC6277].\n   o  Section 4.4.8 specifies a\
    \ new extension that indicates that the\n      responder supports the extended\
    \ use of the \"revoked\" response for\n      non-issued certificates defined in\
    \ Section 2.2.\n   o  Appendix B.2 provides an ASN.1 module using the 2008 syntax\
    \ of\n      ASN.1, which updates [RFC5912].\n   An overview of the protocol is\
    \ provided in Section 2.  Functional\n   requirements are specified in Section\
    \ 3.  Details of the protocol are\n   discussed in Section 4.  We cover security\
    \ issues with the protocol\n   in Section 5.  Appendix A defines OCSP over HTTP,\
    \ Appendix B provides\n   ASN.1 syntactic elements, and Appendix C specifies the\
    \ MIME types for\n   the messages.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Protocol Overview
  contents:
  - "2.  Protocol Overview\n   In lieu of, or as a supplement to, checking against\
    \ a periodic CRL,\n   it may be necessary to obtain timely information regarding\
    \ the\n   revocation status of certificates (cf. [RFC5280], Section 3.3).\n  \
    \ Examples include high-value funds transfers or large stock trades.\n   The Online\
    \ Certificate Status Protocol (OCSP) enables applications to\n   determine the\
    \ (revocation) state of identified certificates.  OCSP\n   may be used to satisfy\
    \ some of the operational requirements of\n   providing more timely revocation\
    \ information than is possible with\n   CRLs and may also be used to obtain additional\
    \ status information.\n   An OCSP client issues a status request to an OCSP responder\
    \ and\n   suspends acceptance of the certificates in question until the\n   responder\
    \ provides a response.\n   This protocol specifies the data that needs to be exchanged\
    \ between\n   an application checking the status of one or more certificates and\n\
    \   the server providing the corresponding status.\n"
- title: 2.1.  Request
  contents:
  - "2.1.  Request\n   An OCSP request contains the following data:\n   - protocol\
    \ version\n   - service request\n   - target certificate identifier\n   - optional\
    \ extensions, which MAY be processed by the OCSP responder\n   Upon receipt of\
    \ a request, an OCSP responder determines if:\n   1. the message is well formed,\n\
    \   2. the responder is configured to provide the requested service, and\n   3.\
    \ the request contains the information needed by the responder.\n   If any one\
    \ of these conditions is not met, the OCSP responder\n   produces an error message;\
    \ otherwise, it returns a definitive\n   response.\n"
- title: 2.2.  Response
  contents:
  - "2.2.  Response\n   OCSP responses can be of various types.  An OCSP response\
    \ consists of\n   a response type and the bytes of the actual response.  There\
    \ is one\n   basic type of OCSP response that MUST be supported by all OCSP\n\
    \   servers and clients.  The rest of this section pertains only to this\n   basic\
    \ response type.\n   All definitive response messages SHALL be digitally signed.\
    \  The key\n   used to sign the response MUST belong to one of the following:\n\
    \   - the CA who issued the certificate in question\n   - a Trusted Responder\
    \ whose public key is trusted by the requestor\n   - a CA Designated Responder\
    \ (Authorized Responder, defined in\n     Section 4.2.2.2) who holds a specially\
    \ marked certificate issued\n     directly by the CA, indicating that the responder\
    \ may issue OCSP\n     responses for that CA\n   A definitive response message\
    \ is composed of:\n   - version of the response syntax\n   - identifier of the\
    \ responder\n   - time when the response was generated\n   - responses for each\
    \ of the certificates in a request\n   - optional extensions\n   - signature algorithm\
    \ OID\n   - signature computed across a hash of the response\n   The response\
    \ for each of the certificates in a request consists of:\n   - target certificate\
    \ identifier\n   - certificate status value\n   - response validity interval\n\
    \   - optional extensions\n   This specification defines the following definitive\
    \ response\n   indicators for use in the certificate status value:\n   - good\n\
    \   - revoked\n   - unknown\n   The \"good\" state indicates a positive response\
    \ to the status inquiry.\n   At a minimum, this positive response indicates that\
    \ no certificate\n   with the requested certificate serial number currently within\
    \ its\n   validity interval is revoked.  This state does not necessarily mean\n\
    \   that the certificate was ever issued or that the time at which the\n   response\
    \ was produced is within the certificate's validity interval.\n   Response extensions\
    \ may be used to convey additional information on\n   assertions made by the responder\
    \ regarding the status of the\n   certificate, such as a positive statement about\
    \ issuance, validity,\n   etc.\n   The \"revoked\" state indicates that the certificate\
    \ has been revoked,\n   either temporarily (the revocation reason is certificateHold)\
    \ or\n   permanently.  This state MAY also be returned if the associated CA\n\
    \   has no record of ever having issued a certificate with the\n   certificate\
    \ serial number in the request, using any current or\n   previous issuing key\
    \ (referred to as a \"non-issued\" certificate in\n   this document).\n   The\
    \ \"unknown\" state indicates that the responder doesn't know about\n   the certificate\
    \ being requested, usually because the request\n   indicates an unrecognized issuer\
    \ that is not served by this\n   responder.\n   NOTE: The \"revoked\" status indicates\
    \ that a certificate with the\n         requested serial number should be rejected,\
    \ while the \"unknown\"\n         status indicates that the status could not be\
    \ determined by\n         this responder, thereby allowing the client to decide\
    \ whether\n         it wants to try another source of status information (such\
    \ as a\n         CRL).  This makes the \"revoked\" response suitable for\n   \
    \      non-issued certificates (as defined above) where the intention\n      \
    \   of the responder is to cause the client to reject the\n         certificate\
    \ rather than trying another source of status\n         information.  The \"revoked\"\
    \ status is still optional for\n         non-issued certificates in order to maintain\
    \ backwards\n         compatibility with deployments of RFC 2560.  For example,\
    \ the\n         responder may not have any knowledge about whether a requested\n\
    \         serial number has been assigned to any issued certificate, or\n    \
    \     the responder may provide pre-produced responses in accordance\n       \
    \  with RFC 5019 and, for that reason, is not capable of providing\n         a\
    \ signed response for all non-issued certificate serial\n         numbers.\n \
    \  When a responder sends a \"revoked\" response to a status request for a\n \
    \  non-issued certificate, the responder MUST include the extended\n   revoked\
    \ definition response extension (Section 4.4.8) in the\n   response, indicating\
    \ that the OCSP responder supports the extended\n   definition of the \"revoked\"\
    \ state to also cover non-issued\n   certificates.  In addition, the SingleResponse\
    \ related to this\n   non-issued certificate:\n   - MUST specify the revocation\
    \ reason certificateHold (6),\n   - MUST specify the revocationTime January 1,\
    \ 1970, and\n   - MUST NOT include a CRL references extension (Section 4.4.2)\
    \ or any\n     CRL entry extensions (Section 4.4.5).\n"
- title: 2.3.  Exception Cases
  contents:
  - "2.3.  Exception Cases\n   In case of errors, the OCSP responder may return an\
    \ error message.\n   These messages are not signed.  Errors can be of the following\
    \ types:\n   - malformedRequest\n   - internalError\n   - tryLater\n   - sigRequired\n\
    \   - unauthorized\n   A server produces the \"malformedRequest\" response if\
    \ the request\n   received does not conform to the OCSP syntax.\n   The response\
    \ \"internalError\" indicates that the OCSP responder\n   reached an inconsistent\
    \ internal state.  The query should be retried,\n   potentially with another responder.\n\
    \   In the event that the OCSP responder is operational but unable to\n   return\
    \ a status for the requested certificate, the \"tryLater\"\n   response can be\
    \ used to indicate that the service exists but is\n   temporarily unable to respond.\n\
    \   The response \"sigRequired\" is returned in cases where the server\n   requires\
    \ that the client sign the request in order to construct a\n   response.\n   The\
    \ response \"unauthorized\" is returned in cases where the client is\n   not authorized\
    \ to make this query to this server or the server is not\n   capable of responding\
    \ authoritatively (cf. [RFC5019], Section 2.2.3).\n"
- title: 2.4.  Semantics of thisUpdate, nextUpdate, and producedAt
  contents:
  - "2.4.  Semantics of thisUpdate, nextUpdate, and producedAt\n   Responses defined\
    \ in this document can contain four times --\n   thisUpdate, nextUpdate, producedAt,\
    \ and revocationTime.  The\n   semantics of these fields are:\n   thisUpdate \
    \     The most recent time at which the status being\n                   indicated\
    \ is known by the responder to have been\n                   correct.\n   nextUpdate\
    \      The time at or before which newer information will be\n               \
    \    available about the status of the certificate.\n   producedAt      The time\
    \ at which the OCSP responder signed this\n                   response.\n   revocationTime\
    \  The time at which the certificate was revoked or\n                   placed\
    \ on hold.\n"
- title: 2.5.  Response Pre-Production
  contents:
  - "2.5.  Response Pre-Production\n   OCSP responders MAY pre-produce signed responses\
    \ specifying the\n   status of certificates at a specified time.  The time at\
    \ which the\n   status was known to be correct SHALL be reflected in the thisUpdate\n\
    \   field of the response.  The time at or before which newer information\n  \
    \ will be available is reflected in the nextUpdate field, while the\n   time at\
    \ which the response was produced will appear in the producedAt\n   field of the\
    \ response.\n"
- title: 2.6.  OCSP Signature Authority Delegation
  contents:
  - "2.6.  OCSP Signature Authority Delegation\n   The key that signs a certificate's\
    \ status information need not be the\n   same key that signed the certificate.\
    \  A certificate's issuer\n   explicitly delegates OCSP signing authority by issuing\
    \ a certificate\n   containing a unique value for the extended key usage extension\n\
    \   (defined in [RFC5280], Section 4.2.1.12) in the OCSP signer's\n   certificate.\
    \  This certificate MUST be issued directly to the\n   responder by the cognizant\
    \ CA.  See Section 4.2.2.2 for details.\n"
- title: 2.7.  CA Key Compromise
  contents:
  - "2.7.  CA Key Compromise\n   If an OCSP responder knows that a particular CA's\
    \ private key has\n   been compromised, it MAY return the \"revoked\" state for\
    \ all\n   certificates issued by that CA.\n"
- title: 3.  Functional Requirements
  contents:
  - '3.  Functional Requirements

    '
- title: 3.1.  Certificate Content
  contents:
  - "3.1.  Certificate Content\n   In order to convey to OCSP clients a well-known\
    \ point of information\n   access, CAs SHALL provide the capability to include\
    \ the authority\n   information access extension (defined in [RFC5280], Section\
    \ 4.2.2.1)\n   in certificates that can be checked using OCSP.  Alternatively,\
    \ the\n   accessLocation for the OCSP provider may be configured locally at the\n\
    \   OCSP client.\n   CAs that support an OCSP service, either hosted locally or\
    \ provided\n   by an Authorized Responder, MUST provide for the inclusion of a\
    \ value\n   for a Uniform Resource Identifier (URI) [RFC3986] accessLocation and\n\
    \   the OID value id-ad-ocsp for the accessMethod in the\n   AccessDescription\
    \ SEQUENCE.\n   The value of the accessLocation field in the subject certificate\n\
    \   defines the transport (e.g., HTTP) used to access the OCSP responder\n   and\
    \ may contain other transport-dependent information (e.g., a URL).\n"
- title: 3.2.  Signed Response Acceptance Requirements
  contents:
  - "3.2.  Signed Response Acceptance Requirements\n   Prior to accepting a signed\
    \ response for a particular certificate as\n   valid, OCSP clients SHALL confirm\
    \ that:\n   1. The certificate identified in a received response corresponds to\n\
    \      the certificate that was identified in the corresponding request;\n   2.\
    \ The signature on the response is valid;\n   3. The identity of the signer matches\
    \ the intended recipient of the\n      request;\n   4. The signer is currently\
    \ authorized to provide a response for the\n      certificate in question;\n \
    \  5. The time at which the status being indicated is known to be\n      correct\
    \ (thisUpdate) is sufficiently recent;\n   6. When available, the time at or before\
    \ which newer information will\n      be available about the status of the certificate\
    \ (nextUpdate) is\n      greater than the current time.\n"
- title: 4.  Details of the Protocol
  contents:
  - "4.  Details of the Protocol\n   The ASN.1 syntax imports terms defined in [RFC5280].\
    \  For signature\n   calculation, the data to be signed is encoded using the ASN.1\n\
    \   distinguished encoding rules (DER) [X.690].\n   ASN.1 EXPLICIT tagging is\
    \ used as a default unless specified\n   otherwise.\n   The terms imported from\
    \ elsewhere are Extensions,\n   CertificateSerialNumber, SubjectPublicKeyInfo,\
    \ Name,\n   AlgorithmIdentifier, and CRLReason.\n"
- title: 4.1.  Request Syntax
  contents:
  - "4.1.  Request Syntax\n   This section specifies the ASN.1 specification for a\
    \ confirmation\n   request.  The actual formatting of the message could vary,\
    \ depending\n   on the transport mechanism used (HTTP, SMTP, LDAP, etc.).\n"
- title: 4.1.1.  ASN.1 Specification of the OCSP Request
  contents:
  - "4.1.1.  ASN.1 Specification of the OCSP Request\n   The ASN.1 structure corresponding\
    \ to the OCSPRequest is:\n   OCSPRequest     ::=     SEQUENCE {\n       tbsRequest\
    \                  TBSRequest,\n       optionalSignature   [0]     EXPLICIT Signature\
    \ OPTIONAL }\n   TBSRequest      ::=     SEQUENCE {\n       version          \
    \   [0]     EXPLICIT Version DEFAULT v1,\n       requestorName       [1]     EXPLICIT\
    \ GeneralName OPTIONAL,\n       requestList                 SEQUENCE OF Request,\n\
    \       requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }\n   Signature\
    \       ::=     SEQUENCE {\n       signatureAlgorithm      AlgorithmIdentifier,\n\
    \       signature               BIT STRING,\n       certs               [0] EXPLICIT\
    \ SEQUENCE OF Certificate\n   OPTIONAL}\n   Version         ::=             INTEGER\
    \  {  v1(0) }\n   Request         ::=     SEQUENCE {\n       reqCert         \
    \            CertID,\n       singleRequestExtensions     [0] EXPLICIT Extensions\
    \ OPTIONAL }\n   CertID          ::=     SEQUENCE {\n       hashAlgorithm    \
    \   AlgorithmIdentifier,\n       issuerNameHash      OCTET STRING, -- Hash of\
    \ issuer's DN\n       issuerKeyHash       OCTET STRING, -- Hash of issuer's public\
    \ key\n       serialNumber        CertificateSerialNumber }\n   The fields in\
    \ OCSPRequest have the following meanings:\n   o  tbsRequest is the optionally\
    \ signed OCSP request.\n   o  optionalSignature contains the algorithm identifier\
    \ and any\n      associated algorithm parameters in signatureAlgorithm; the\n\
    \      signature value in signature; and, optionally, certificates the\n     \
    \ server needs to verify the signed response (normally up to but not\n      including\
    \ the client's root certificate).\n   The contents of TBSRequest include the following\
    \ fields:\n   o  version indicates the version of the protocol, which for this\n\
    \      document is v1(0).\n   o  requestorName is OPTIONAL and indicates the name\
    \ of the OCSP\n      requestor.\n   o  requestList contains one or more single\
    \ certificate status\n      requests.\n   o  requestExtensions is OPTIONAL and\
    \ includes extensions applicable\n      to the requests found in reqCert.  See\
    \ Section 4.4.\n   The contents of Request include the following fields:\n   o\
    \  reqCert contains the identifier of a target certificate.\n   o  singleRequestExtensions\
    \ is OPTIONAL and includes extensions\n      applicable to this single certificate\
    \ status request.  See\n      Section 4.4.\n   The contents of CertID include\
    \ the following fields:\n   o  hashAlgorithm is the hash algorithm used to generate\
    \ the\n      issuerNameHash and issuerKeyHash values.\n   o  issuerNameHash is\
    \ the hash of the issuer's distinguished name\n      (DN).  The hash shall be\
    \ calculated over the DER encoding of the\n      issuer's name field in the certificate\
    \ being checked.\n   o  issuerKeyHash is the hash of the issuer's public key.\
    \  The hash\n      shall be calculated over the value (excluding tag and length)\
    \ of\n      the subject public key field in the issuer's certificate.\n   o  serialNumber\
    \ is the serial number of the certificate for which\n      status is being requested.\n"
- title: 4.1.2.  Notes on OCSP Requests
  contents:
  - "4.1.2.  Notes on OCSP Requests\n   The primary reason to use the hash of the\
    \ CA's public key in addition\n   to the hash of the CA's name to identify the\
    \ issuer is that it is\n   possible that two CAs may choose to use the same Name\
    \ (uniqueness in\n   the Name is a recommendation that cannot be enforced).  Two\
    \ CAs will\n   never, however, have the same public key unless the CAs either\n\
    \   explicitly decided to share their private key or the key of one of\n   the\
    \ CAs was compromised.\n   Support for any specific extension is OPTIONAL.  The\
    \ critical flag\n   SHOULD NOT be set for any of them.  Section 4.4 suggests several\n\
    \   useful extensions.  Additional extensions MAY be defined in\n   additional\
    \ RFCs.  Unrecognized extensions MUST be ignored (unless\n   they have the critical\
    \ flag set and are not understood).\n   The requestor MAY choose to sign the OCSP\
    \ request.  In that case, the\n   signature is computed over the tbsRequest structure.\
    \  If the request\n   is signed, the requestor SHALL specify its name in the requestorName\n\
    \   field.  Also, for signed requests, the requestor MAY include\n   certificates\
    \ that help the OCSP responder verify the requestor's\n   signature in the certs\
    \ field of Signature.\n"
- title: 4.2.  Response Syntax
  contents:
  - "4.2.  Response Syntax\n   This section specifies the ASN.1 specification for\
    \ a confirmation\n   response.  The actual formatting of the message could vary,\
    \ depending\n   on the transport mechanism used (HTTP, SMTP, LDAP, etc.).\n"
- title: 4.2.1.  ASN.1 Specification of the OCSP Response
  contents:
  - "4.2.1.  ASN.1 Specification of the OCSP Response\n   An OCSP response at a minimum\
    \ consists of a responseStatus field\n   indicating the processing status of the\
    \ prior request.  If the value\n   of responseStatus is one of the error conditions,\
    \ the responseBytes\n   field is not set.\n   OCSPResponse ::= SEQUENCE {\n  \
    \    responseStatus         OCSPResponseStatus,\n      responseBytes         \
    \ [0] EXPLICIT ResponseBytes OPTIONAL }\n   OCSPResponseStatus ::= ENUMERATED\
    \ {\n       successful            (0),  -- Response has valid confirmations\n\
    \       malformedRequest      (1),  -- Illegal confirmation request\n       internalError\
    \         (2),  -- Internal error in issuer\n       tryLater              (3),\
    \  -- Try again later\n                                   -- (4) is not used\n\
    \       sigRequired           (5),  -- Must sign the request\n       unauthorized\
    \          (6)   -- Request unauthorized\n   }\n   The value for responseBytes\
    \ consists of an OBJECT IDENTIFIER and a\n   response syntax identified by that\
    \ OID encoded as an OCTET STRING.\n   ResponseBytes ::=       SEQUENCE {\n   \
    \    responseType   OBJECT IDENTIFIER,\n       response       OCTET STRING }\n\
    \   For a basic OCSP responder, responseType will be id-pkix-ocsp-basic.\n   id-pkix-ocsp\
    \           OBJECT IDENTIFIER ::= { id-ad-ocsp }\n   id-pkix-ocsp-basic     OBJECT\
    \ IDENTIFIER ::= { id-pkix-ocsp 1 }\n   OCSP responders SHALL be capable of producing\
    \ responses of the\n   id-pkix-ocsp-basic response type.  Correspondingly, OCSP\
    \ clients\n   SHALL be capable of receiving and processing responses of the\n\
    \   id-pkix-ocsp-basic response type.\n   The value for response SHALL be the\
    \ DER encoding of\n   BasicOCSPResponse.\n   BasicOCSPResponse       ::= SEQUENCE\
    \ {\n      tbsResponseData      ResponseData,\n      signatureAlgorithm   AlgorithmIdentifier,\n\
    \      signature            BIT STRING,\n      certs            [0] EXPLICIT SEQUENCE\
    \ OF Certificate OPTIONAL }\n   The value for signature SHALL be computed on the\
    \ hash of the DER\n   encoding of ResponseData.  The responder MAY include certificates\
    \ in\n   the certs field of BasicOCSPResponse that help the OCSP client verify\n\
    \   the responder's signature.  If no certificates are included, then\n   certs\
    \ SHOULD be absent.\n   ResponseData ::= SEQUENCE {\n      version           \
    \   [0] EXPLICIT Version DEFAULT v1,\n      responderID              ResponderID,\n\
    \      producedAt               GeneralizedTime,\n      responses            \
    \    SEQUENCE OF SingleResponse,\n      responseExtensions   [1] EXPLICIT Extensions\
    \ OPTIONAL }\n   ResponderID ::= CHOICE {\n      byName               [1] Name,\n\
    \      byKey                [2] KeyHash }\n   KeyHash ::= OCTET STRING -- SHA-1\
    \ hash of responder's public key\n   (excluding the tag and length fields)\n \
    \  SingleResponse ::= SEQUENCE {\n      certID                       CertID,\n\
    \      certStatus                   CertStatus,\n      thisUpdate            \
    \       GeneralizedTime,\n      nextUpdate         [0]       EXPLICIT GeneralizedTime\
    \ OPTIONAL,\n      singleExtensions   [1]       EXPLICIT Extensions OPTIONAL }\n\
    \   CertStatus ::= CHOICE {\n       good        [0]     IMPLICIT NULL,\n     \
    \  revoked     [1]     IMPLICIT RevokedInfo,\n       unknown     [2]     IMPLICIT\
    \ UnknownInfo }\n   RevokedInfo ::= SEQUENCE {\n       revocationTime        \
    \      GeneralizedTime,\n       revocationReason    [0]     EXPLICIT CRLReason\
    \ OPTIONAL }\n   UnknownInfo ::= NULL\n"
- title: 4.2.2.  Notes on OCSP Responses
  contents:
  - '4.2.2.  Notes on OCSP Responses

    '
- title: 4.2.2.1.  Time
  contents:
  - "4.2.2.1.  Time\n   Responses can contain four times -- thisUpdate, nextUpdate,\n\
    \   producedAt, and revocationTime.  The semantics of these fields are\n   defined\
    \ in Section 2.4.  The format for GeneralizedTime is as\n   specified in Section\
    \ 4.1.2.5.2 of [RFC5280].\n   The thisUpdate and nextUpdate fields define a recommended\
    \ validity\n   interval.  This interval corresponds to the {thisUpdate, nextUpdate}\n\
    \   interval in CRLs.  Responses whose nextUpdate value is earlier than\n   the\
    \ local system time value SHOULD be considered unreliable.\n   Responses whose\
    \ thisUpdate time is later than the local system time\n   SHOULD be considered\
    \ unreliable.\n   If nextUpdate is not set, the responder is indicating that newer\n\
    \   revocation information is available all the time.\n"
- title: 4.2.2.2.  Authorized Responders
  contents:
  - "4.2.2.2.  Authorized Responders\n   The key that signs a certificate's status\
    \ information need not be the\n   same key that signed the certificate.  It is\
    \ necessary, however, to\n   ensure that the entity signing this information is\
    \ authorized to do\n   so.  Therefore, a certificate's issuer MUST do one of the\
    \ following:\n   - sign the OCSP responses itself, or\n   - explicitly designate\
    \ this authority to another entity\n   OCSP signing delegation SHALL be designated\
    \ by the inclusion of\n   id-kp-OCSPSigning in an extended key usage certificate\
    \ extension\n   included in the OCSP response signer's certificate.  This certificate\n\
    \   MUST be issued directly by the CA that is identified in the request.\n   The\
    \ CA SHOULD use the same issuing key to issue a delegation\n   certificate as\
    \ that used to sign the certificate being checked for\n   revocation.  Systems\
    \ relying on OCSP responses MUST recognize a\n   delegation certificate as being\
    \ issued by the CA that issued the\n   certificate in question only if the delegation\
    \ certificate and the\n   certificate being checked for revocation were signed\
    \ by the same key.\n   Note: For backwards compatibility with RFC 2560 [RFC2560],\
    \ it is not\n         prohibited to issue a certificate for an Authorized Responder\n\
    \         using a different issuing key than the key used to issue the\n     \
    \    certificate being checked for revocation.  However, such a\n         practice\
    \ is strongly discouraged, since clients are not\n         required to recognize\
    \ a responder with such a certificate as an\n         Authorized Responder.\n\
    \   id-kp-OCSPSigning OBJECT IDENTIFIER ::= {id-kp 9}\n   Systems or applications\
    \ that rely on OCSP responses MUST be capable\n   of detecting and enforcing the\
    \ use of the id-kp-OCSPSigning value as\n   described above.  They MAY provide\
    \ a means of locally configuring one\n   or more OCSP signing authorities and\
    \ specifying the set of CAs for\n   which each signing authority is trusted. \
    \ They MUST reject the\n   response if the certificate required to validate the\
    \ signature on the\n   response does not meet at least one of the following criteria:\n\
    \   1. Matches a local configuration of OCSP signing authority for the\n     \
    \ certificate in question, or\n   2. Is the certificate of the CA that issued\
    \ the certificate in\n      question, or\n   3. Includes a value of id-kp-OCSPSigning\
    \ in an extended key usage\n      extension and is issued by the CA that issued\
    \ the certificate in\n      question as stated above.\n   Additional acceptance\
    \ or rejection criteria may apply to either the\n   response itself or to the\
    \ certificate used to validate the signature\n   on the response.\n"
- title: 4.2.2.2.1.  Revocation Checking of an Authorized Responder
  contents:
  - "4.2.2.2.1.  Revocation Checking of an Authorized Responder\n   Since an authorized\
    \ OCSP responder provides status information for\n   one or more CAs, OCSP clients\
    \ need to know how to check that an\n   Authorized Responder's certificate has\
    \ not been revoked.  CAs may\n   choose to deal with this problem in one of three\
    \ ways:\n   - A CA may specify that an OCSP client can trust a responder for the\n\
    \     lifetime of the responder's certificate.  The CA does so by\n     including\
    \ the extension id-pkix-ocsp-nocheck.  This SHOULD be a\n     non-critical extension.\
    \  The value of the extension SHALL be NULL.\n     CAs issuing such a certificate\
    \ should realize that a compromise of\n     the responder's key is as serious\
    \ as the compromise of a CA key\n     used to sign CRLs, at least for the validity\
    \ period of this\n     certificate.  CAs may choose to issue this type of certificate\
    \ with\n     a very short lifetime and renew it frequently.\n     id-pkix-ocsp-nocheck\
    \ OBJECT IDENTIFIER ::= { id-pkix-ocsp 5 }\n   - A CA may specify how the responder's\
    \ certificate is to be checked\n     for revocation.  This can be done by using\
    \ CRL Distribution Points\n     if the check should be done using CRLs, or by\
    \ using Authority\n     Information Access if the check should be done in some\
    \ other way.\n     Details for specifying either of these two mechanisms are available\n\
    \     in [RFC5280].\n   - A CA may choose not to specify any method of revocation\
    \ checking\n     for the responder's certificate, in which case it would be up\
    \ to\n     the OCSP client's local security policy to decide whether that\n  \
    \   certificate should be checked for revocation or not.\n"
- title: 4.2.2.3.  Basic Response
  contents:
  - "4.2.2.3.  Basic Response\n   The basic response type contains:\n   o  the version\
    \ of the response syntax, which MUST be v1 (value is 0)\n      for this version\
    \ of the basic response syntax;\n   o  either the name of the responder or a hash\
    \ of the responder's\n      public key as the ResponderID;\n   o  the time at\
    \ which the response was generated;\n   o  responses for each of the certificates\
    \ in a request;\n   o  optional extensions;\n   o  a signature computed across\
    \ a hash of the response; and\n   o  the signature algorithm OID.\n   The purpose\
    \ of the ResponderID information is to allow clients to\n   find the certificate\
    \ used to sign a signed OCSP response.  Therefore,\n   the information MUST correspond\
    \ to the certificate that was used to\n   sign the response.\n   The responder\
    \ MAY include certificates in the certs field of\n   BasicOCSPResponse that help\
    \ the OCSP client verify the responder's\n   signature.\n   The response for each\
    \ of the certificates in a request consists of:\n   o  an identifier of the certificate\
    \ for which revocation status\n      information is being provided (i.e., the\
    \ target certificate);\n   o  the revocation status of the certificate (good,\
    \ revoked, or\n      unknown); if revoked, it indicates the time at which the\n\
    \      certificate was revoked and, optionally, the reason why it was\n      revoked;\n\
    \   o  the validity interval of the response; and\n   o  optional extensions.\n\
    \   The response MUST include a SingleResponse for each certificate in\n   the\
    \ request.  The response SHOULD NOT include any additional\n   SingleResponse\
    \ elements, but, for example, OCSP responders that\n   pre-generate status responses\
    \ might include additional SingleResponse\n   elements if necessary to improve\
    \ response pre-generation performance\n   or cache efficiency (according to [RFC5019],\
    \ Section 2.2.1).\n"
- title: 4.3.  Mandatory and Optional Cryptographic Algorithms
  contents:
  - "4.3.  Mandatory and Optional Cryptographic Algorithms\n   Clients that request\
    \ OCSP services SHALL be capable of processing\n   responses signed using RSA\
    \ with SHA-256 (identified by the\n   sha256WithRSAEncryption OID specified in\
    \ [RFC4055]).  Clients SHOULD\n   also be capable of processing responses signed\
    \ using RSA with SHA-1\n   (identified by the sha1WithRSAEncryption OID specified\
    \ in [RFC3279])\n   and the Digital Signature Algorithm (DSA) with SHA-1 (identified\
    \ by\n   the id-dsa-with-sha1 OID specified in [RFC3279]).  Clients MAY\n   support\
    \ other algorithms.\n"
- title: 4.4.  Extensions
  contents:
  - "4.4.  Extensions\n   This section defines some standard extensions, based on\
    \ the extension\n   model employed in X.509 version 3 certificates (see [RFC5280]).\n\
    \   Support for all extensions is optional for both clients and\n   responders.\
    \  For each extension, the definition indicates its syntax,\n   processing performed\
    \ by the OCSP responder, and any extensions that\n   are included in the corresponding\
    \ response.\n"
- title: 4.4.1.  Nonce
  contents:
  - "4.4.1.  Nonce\n   The nonce cryptographically binds a request and a response\
    \ to prevent\n   replay attacks.  The nonce is included as one of the\n   requestExtensions\
    \ in requests, while in responses it would be\n   included as one of the responseExtensions.\
    \  In both the request and\n   the response, the nonce will be identified by the\
    \ object identifier\n   id-pkix-ocsp-nonce, while the extnValue is the value of\
    \ the nonce.\n     id-pkix-ocsp           OBJECT IDENTIFIER ::= { id-ad-ocsp }\n\
    \     id-pkix-ocsp-nonce     OBJECT IDENTIFIER ::= { id-pkix-ocsp 2 }\n     Nonce\
    \ ::= OCTET STRING\n"
- title: 4.4.2.  CRL References
  contents:
  - "4.4.2.  CRL References\n   It may be desirable for the OCSP responder to indicate\
    \ the CRL on\n   which a revoked or onHold certificate is found.  This can be\
    \ useful\n   where OCSP is used between repositories, and also as an auditing\n\
    \   mechanism.  The CRL may be specified by a URL (the URL at which the\n   CRL\
    \ is available), a number (CRL number), or a time (the time at\n   which the relevant\
    \ CRL was created).  These extensions will be\n   specified as singleExtensions.\
    \  The identifier for this extension\n   will be id-pkix-ocsp-crl, while the value\
    \ will be CrlID.\n     id-pkix-ocsp-crl       OBJECT IDENTIFIER ::= { id-pkix-ocsp\
    \ 3 }\n     CrlID ::= SEQUENCE {\n        crlUrl               [0]     EXPLICIT\
    \ IA5String OPTIONAL,\n        crlNum               [1]     EXPLICIT INTEGER OPTIONAL,\n\
    \        crlTime              [2]     EXPLICIT GeneralizedTime OPTIONAL }\n  \
    \ For the choice crlUrl, the IA5String will specify the URL at which\n   the CRL\
    \ is available.  For crlNum, the INTEGER will specify the value\n   of the CRL\
    \ number extension of the relevant CRL.  For crlTime, the\n   GeneralizedTime\
    \ will indicate the time at which the relevant CRL was\n   issued.\n"
- title: 4.4.3.  Acceptable Response Types
  contents:
  - "4.4.3.  Acceptable Response Types\n   An OCSP client MAY wish to specify the\
    \ kinds of response types it\n   understands.  To do so, it SHOULD use an extension\
    \ with the OID\n   id-pkix-ocsp-response and the value AcceptableResponses.  This\n\
    \   extension is included as one of the requestExtensions in requests.\n   The\
    \ OIDs included in AcceptableResponses are the OIDs of the various\n   response\
    \ types this client can accept (e.g., id-pkix-ocsp-basic).\n     id-pkix-ocsp-response\
    \  OBJECT IDENTIFIER ::= { id-pkix-ocsp 4 }\n     AcceptableResponses ::= SEQUENCE\
    \ OF OBJECT IDENTIFIER\n   As noted in Section 4.2.1, OCSP responders SHALL be\
    \ capable of\n   responding with responses of the id-pkix-ocsp-basic response\
    \ type.\n   Correspondingly, OCSP clients SHALL be capable of receiving and\n\
    \   processing responses of the id-pkix-ocsp-basic response type.\n"
- title: 4.4.4.  Archive Cutoff
  contents:
  - "4.4.4.  Archive Cutoff\n   An OCSP responder MAY choose to retain revocation\
    \ information beyond\n   a certificate's expiration.  The date obtained by subtracting\
    \ this\n   retention interval value from the producedAt time in a response is\n\
    \   defined as the certificate's \"archive cutoff\" date.\n   OCSP-enabled applications\
    \ would use an OCSP archive cutoff date to\n   contribute to a proof that a digital\
    \ signature was (or was not)\n   reliable on the date it was produced even if\
    \ the certificate needed\n   to validate the signature has long since expired.\n\
    \   OCSP servers that provide support for such a historical reference\n   SHOULD\
    \ include an archive cutoff date extension in responses.  If\n   included, this\
    \ value SHALL be provided as an OCSP singleExtensions\n   extension identified\
    \ by id-pkix-ocsp-archive-cutoff and of syntax\n   GeneralizedTime.\n     id-pkix-ocsp-archive-cutoff\
    \ OBJECT IDENTIFIER ::= {id-pkix-ocsp 6}\n     ArchiveCutoff ::= GeneralizedTime\n\
    \   To illustrate, if a server is operated with a 7-year retention\n   interval\
    \ policy and status was produced at time t1, then the value\n   for ArchiveCutoff\
    \ in the response would be (t1 - 7 years).\n"
- title: 4.4.5.  CRL Entry Extensions
  contents:
  - "4.4.5.  CRL Entry Extensions\n   All the extensions specified as CRL entry extensions\
    \ -- in\n   Section 5.3 of [RFC5280] -- are also supported as singleExtensions.\n"
- title: 4.4.6.  Service Locator
  contents:
  - "4.4.6.  Service Locator\n   An OCSP server may be operated in a mode whereby\
    \ the server receives\n   a request and routes it to the OCSP server that is known\
    \ to be\n   authoritative for the identified certificate.  The serviceLocator\n\
    \   request extension is defined for this purpose.  This extension is\n   included\
    \ as one of the singleRequestExtensions in requests.\n     id-pkix-ocsp-service-locator\
    \ OBJECT IDENTIFIER ::= {id-pkix-ocsp 7}\n     ServiceLocator ::= SEQUENCE {\n\
    \         issuer    Name,\n         locator   AuthorityInfoAccessSyntax OPTIONAL\
    \ }\n   Values for these fields are obtained from the corresponding fields in\n\
    \   the subject certificate.\n"
- title: 4.4.7.  Preferred Signature Algorithms
  contents:
  - "4.4.7.  Preferred Signature Algorithms\n   Since algorithms other than the mandatory-to-implement\
    \ algorithms are\n   allowed, and since a client currently has no mechanism to\
    \ indicate\n   its algorithm preferences, there is always a risk that a server\n\
    \   choosing a non-mandatory algorithm will generate a response that the\n   client\
    \ may not support.\n   While an OCSP responder may apply rules for algorithm selection,\n\
    \   e.g., using the signature algorithm employed by the CA for signing\n   CRLs\
    \ and certificates, such rules may fail in common situations:\n   o  The algorithm\
    \ used to sign the CRLs and certificates may not be\n      consistent with the\
    \ key pair being used by the OCSP responder to\n      sign responses.\n   o  A\
    \ request for an unknown certificate provides no basis for a\n      responder\
    \ to select from among multiple algorithm options.\n   The last criterion cannot\
    \ be resolved through the information\n   available from in-band signaling using\
    \ the RFC 2560 [RFC2560]\n   protocol without modifying the protocol.\n   In addition,\
    \ an OCSP responder may wish to employ different signature\n   algorithms than\
    \ the one used by the CA to sign certificates and CRLs\n   for two reasons:\n\
    \   o  The responder may employ an algorithm for certificate status\n      response\
    \ that is less computationally demanding than for signing\n      the certificate\
    \ itself.\n   o  An implementation may wish to guard against the possibility of\
    \ a\n      compromise resulting from a signature algorithm compromise by\n   \
    \   employing two separate signature algorithms.\n   This section describes:\n\
    \   o  An extension that allows a client to indicate the set of preferred\n  \
    \    signature algorithms.\n   o  Rules for signature algorithm selection that\
    \ maximize the\n      probability of successful operation in the case that no\
    \ supported\n      preferred algorithm(s) are specified.\n"
- title: 4.4.7.1.  Extension Syntax
  contents:
  - "4.4.7.1.  Extension Syntax\n   A client MAY declare a preferred set of algorithms\
    \ in a request by\n   including a preferred signature algorithms extension in\n\
    \   requestExtensions of the OCSPRequest.\n     id-pkix-ocsp-pref-sig-algs OBJECT\
    \ IDENTIFIER ::= { id-pkix-ocsp 8 }\n     PreferredSignatureAlgorithms ::= SEQUENCE\
    \ OF\n                                      PreferredSignatureAlgorithm\n    \
    \ PreferredSignatureAlgorithm ::= SEQUENCE {\n        sigIdentifier        AlgorithmIdentifier,\n\
    \        pubKeyAlgIdentifier  SMIMECapability OPTIONAL\n        }\n   The syntax\
    \ of AlgorithmIdentifier is defined in Section 4.1.1.2 of\n   RFC 5280 [RFC5280].\
    \  The syntax of SMIMECapability is defined in\n   RFC 5751 [RFC5751].\n   sigIdentifier\
    \ specifies the signature algorithm the client prefers,\n   e.g., algorithm=ecdsa-with-sha256.\
    \  Parameters are absent for most\n   common signature algorithms.\n   pubKeyAlgIdentifier\
    \ specifies the subject public key algorithm\n   identifier the client prefers\
    \ in the server's certificate used to\n   validate the OCSP response, e.g., algorithm=id-ecPublicKey\
    \ and\n   parameters= secp256r1.\n   pubKeyAlgIdentifier is OPTIONAL and provides\
    \ a means to specify\n   parameters necessary to distinguish among different usages\
    \ of a\n   particular algorithm, e.g., it may be used by the client to specify\n\
    \   what curve it supports for a given elliptic curve algorithm.\n   The client\
    \ MUST support each of the specified preferred signature\n   algorithms, and the\
    \ client MUST specify the algorithms in the order\n   of preference, from the\
    \ most preferred to the least preferred.\n   Section 4.4.7.2 of this document\
    \ describes how a server selects an\n   algorithm for signing OCSP responses to\
    \ the requesting client.\n"
- title: 4.4.7.2.  Responder Signature Algorithm Selection
  contents:
  - "4.4.7.2.  Responder Signature Algorithm Selection\n   RFC 2560 [RFC2560] did\
    \ not specify a mechanism for deciding the\n   signature algorithm to be used\
    \ in an OCSP response.  This does not\n   provide a sufficient degree of certainty\
    \ as to the algorithm selected\n   to facilitate interoperability.\n"
- title: 4.4.7.2.1.  Dynamic Response
  contents:
  - "4.4.7.2.1.  Dynamic Response\n   A responder MAY maximize the potential for ensuring\
    \ interoperability\n   by selecting a supported signature algorithm using the\
    \ following\n   order of precedence, as long as the selected algorithm meets all\n\
    \   security requirements of the OCSP responder, where the first\n   selection\
    \ mechanism has the highest precedence:\n   1. Select an algorithm specified as\
    \ a preferred signature algorithm\n      in the client request.\n   2. Select\
    \ the signature algorithm used to sign a certificate\n      revocation list (CRL)\
    \ issued by the certificate issuer providing\n      status information for the\
    \ certificate specified by CertID.\n   3. Select the signature algorithm used\
    \ to sign the OCSPRequest.\n   4. Select a signature algorithm that has been advertised\
    \ as being the\n      default signature algorithm for the signing service using\
    \ an\n      out-of-band mechanism.\n   5. Select a mandatory or recommended signature\
    \ algorithm specified\n      for the version of OCSP in use.\n   A responder SHOULD\
    \ always apply the lowest-numbered selection\n   mechanism that results in the\
    \ selection of a known and supported\n   algorithm that meets the responder's\
    \ criteria for cryptographic\n   algorithm strength.\n"
- title: 4.4.7.2.2.  Static Response
  contents:
  - "4.4.7.2.2.  Static Response\n   For purposes of efficiency, an OCSP responder\
    \ is permitted to\n   generate static responses in advance of a request.  The\
    \ case may not\n   permit the responder to make use of the client request data\
    \ during\n   the response generation; however, the responder SHOULD still use\
    \ the\n   client request data during the selection of the pre-generated\n   response\
    \ to be returned.  Responders MAY use the historical client\n   requests as part\
    \ of the input to the decisions of what different\n   algorithms should be used\
    \ to sign the pre-generated responses.\n"
- title: 4.4.8.  Extended Revoked Definition
  contents:
  - "4.4.8.  Extended Revoked Definition\n   This extension indicates that the responder\
    \ supports the extended\n   definition of the \"revoked\" status to also include\
    \ non-issued\n   certificates according to Section 2.2.  One of its main purposes\
    \ is\n   to allow audits to determine the responder's type of operation.\n   Clients\
    \ do not have to parse this extension in order to determine the\n   status of\
    \ certificates in responses.\n   This extension MUST be included in the OCSP response\
    \ when that\n   response contains a \"revoked\" status for a non-issued certificate.\n\
    \   This extension MAY be present in other responses to signal that the\n   responder\
    \ implements the extended revoked definition.  When included,\n   this extension\
    \ MUST be placed in responseExtensions, and it MUST NOT\n   appear in singleExtensions.\n\
    \   This extension is identified by the object identifier\n   id-pkix-ocsp-extended-revoke.\n\
    \     id-pkix-ocsp-extended-revoke OBJECT IDENTIFIER ::= {id-pkix-ocsp 9}\n  \
    \ The value of the extension SHALL be NULL.  This extension MUST NOT be\n   marked\
    \ critical.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   For this service to be effective, certificate-using\
    \ systems must\n   connect to the certificate status service provider.  In the\
    \ event\n   such a connection cannot be obtained, certificate-using systems could\n\
    \   implement CRL processing logic as a fall-back position.\n   A vulnerability\
    \ to denial of service is evident with respect to a\n   flood of queries.  The\
    \ production of a cryptographic signature\n   significantly affects response generation\
    \ cycle time, thereby\n   exacerbating the situation.  Unsigned error responses\
    \ open up the\n   protocol to another denial-of-service attack, where the attacker\n\
    \   sends false error responses.\n   The use of precomputed responses allows replay\
    \ attacks in which an\n   old (good) response is replayed prior to its expiration\
    \ date but\n   after the certificate has been revoked.  Deployments of OCSP should\n\
    \   carefully evaluate the benefit of precomputed responses against the\n   probability\
    \ of a replay attack and the costs associated with its\n   successful execution.\n\
    \   Requests do not contain the responder they are directed to.  This\n   allows\
    \ an attacker to replay a request to any number of OCSP\n   responders.\n   The\
    \ reliance of HTTP caching in some deployment scenarios may result\n   in unexpected\
    \ results if intermediate servers are incorrectly\n   configured or are known\
    \ to possess cache management faults.\n   Implementors are advised to take the\
    \ reliability of HTTP cache\n   mechanisms into account when deploying OCSP over\
    \ HTTP.\n   Responding with a \"revoked\" state to a certificate that has never\n\
    \   been issued may enable someone to obtain a revocation response for a\n   certificate\
    \ that is not yet issued, but soon will be issued, if the\n   certificate serial\
    \ number of the certificate that will be issued can\n   be predicted or guessed\
    \ by the requestor.  Such a prediction is easy\n   for a CA that issues certificates\
    \ using sequential certificate serial\n   number assignment.  This risk is handled\
    \ in the specification by\n   requiring compliant implementations to use the certificateHold\
    \ reason\n   code, which avoids permanently revoking the serial number.  For CAs\n\
    \   that support \"revoked\" responses to status requests for non-issued\n   certificates,\
    \ one way to completely avoid this issue is to assign\n   random certificate serial\
    \ number values with high entropy.\n"
- title: 5.1.  Preferred Signature Algorithms
  contents:
  - "5.1.  Preferred Signature Algorithms\n   The mechanism used to choose the response\
    \ signing algorithm MUST be\n   considered to be sufficiently secure against cryptanalytic\
    \ attack for\n   the intended application.\n   In most applications, it is sufficient\
    \ for the signing algorithm to\n   be at least as secure as the signing algorithm\
    \ used to sign the\n   original certificate whose status is being queried.  However,\
    \ this\n   criterion may not hold in long-term archival applications, in which\n\
    \   the status of a certificate is being queried for a date in the\n   distant\
    \ past, long after the signing algorithm has ceased being\n   considered trustworthy.\n"
- title: 5.1.1.  Use of Insecure Algorithms
  contents:
  - "5.1.1.  Use of Insecure Algorithms\n   It is not always possible for a responder\
    \ to generate a response that\n   the client is expected to understand and that\
    \ meets contemporary\n   standards for cryptographic security.  In such cases,\
    \ an OCSP\n   responder operator MUST balance the risk of employing a compromised\n\
    \   security solution and the cost of mandating an upgrade, including the\n  \
    \ risk that the alternative chosen by end users will offer even less\n   security\
    \ or no security.\n   In archival applications, it is quite possible that an OCSP\
    \ responder\n   might be asked to report the validity of a certificate on a date\
    \ in\n   the distant past.  Such a certificate might employ a signing method\n\
    \   that is no longer considered acceptably secure.  In such\n   circumstances,\
    \ the responder MUST NOT generate a signature using a\n   signing mechanism that\
    \ is not considered acceptably secure.\n   A client MUST accept any signing algorithm\
    \ in a response that it\n   specified as a preferred signing algorithm in the\
    \ request.  It\n   follows, therefore, that a client MUST NOT specify as a preferred\n\
    \   signing algorithm any algorithm that is either not supported or not\n   considered\
    \ acceptably secure.\n"
- title: 5.1.2.  Man-in-the-Middle Downgrade Attack
  contents:
  - "5.1.2.  Man-in-the-Middle Downgrade Attack\n   The mechanism to support client\
    \ indication of preferred signature\n   algorithms is not protected against a\
    \ man-in-the-middle downgrade\n   attack.  This constraint is not considered to\
    \ be a significant\n   security concern, since the OCSP responder MUST NOT sign\
    \ OCSP\n   responses using weak algorithms even if requested by the client.  In\n\
    \   addition, the client can reject OCSP responses that do not meet its\n   own\
    \ criteria for acceptable cryptographic security no matter what\n   mechanism\
    \ is used to determine the signing algorithm of the response.\n"
- title: 5.1.3.  Denial-of-Service Attack
  contents:
  - "5.1.3.  Denial-of-Service Attack\n   Algorithm agility mechanisms defined in\
    \ this document introduce a\n   slightly increased attack surface for denial-of-service\
    \ attacks where\n   the client request is altered to require algorithms that are\
    \ not\n   supported by the server.  Denial-of-service considerations as\n   discussed\
    \ in RFC 4732 [RFC4732] are relevant for this document.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document includes media type registrations (in\
    \ Appendix C) for\n   ocsp-request and ocsp-response that were registered when\
    \ RFC 2560 was\n   published.  Because this document obsoletes RFC 2560, IANA\
    \ has\n   updated the references in the \"Application Media Types\" registry for\n\
    \   ocsp-request and ocsp-response to point to this document.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n   \
    \           Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n       \
    \       Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC3279]  Bassham,\
    \ L., Polk, W., and R. Housley, \"Algorithms and\n              Identifiers for\
    \ the Internet X.509 Public Key\n              Infrastructure Certificate and\
    \ Certificate Revocation List\n              (CRL) Profile\", RFC 3279, April\
    \ 2002.\n   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n\
    \              Resource Identifier (URI): Generic Syntax\", STD 66,\n        \
    \      RFC 3986, January 2005.\n   [RFC4055]  Schaad, J., Kaliski, B., and R.\
    \ Housley, \"Additional\n              Algorithms and Identifiers for RSA Cryptography\
    \ for use in\n              the Internet X.509 Public Key Infrastructure Certificate\n\
    \              and Certificate Revocation List (CRL) Profile\", RFC 4055,\n  \
    \            June 2005.\n   [RFC5280]  Cooper, D., Santesson, S., Farrell, S.,\
    \ Boeyen, S.,\n              Housley, R., and W. Polk, \"Internet X.509 Public\
    \ Key\n              Infrastructure Certificate and Certificate Revocation List\n\
    \              (CRL) Profile\", RFC 5280, May 2008.\n   [RFC5751]  Ramsdell, B.\
    \ and S. Turner, \"Secure/Multipurpose Internet\n              Mail Extensions\
    \ (S/MIME) Version 3.2 Message\n              Specification\", RFC 5751, January\
    \ 2010.\n   [RFC6277]  Santesson, S. and P. Hallam-Baker, \"Online Certificate\n\
    \              Status Protocol Algorithm Agility\", RFC 6277, June 2011.\n   [X.690]\
    \    ITU-T Recommendation X.690 (2008) | ISO/IEC 8825-1:2008,\n              \"\
    Information Technology - ASN.1 encoding rules:\n              Specification of\
    \ Basic Encoding Rules (BER), Canonical\n              Encoding Rules (CER) and\
    \ Distinguished Encoding Rules\n              (DER)\", November 2008.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC2560]  Myers, M., Ankney, R., Malpani, A.,\
    \ Galperin, S., and C.\n              Adams, \"X.509 Internet Public Key Infrastructure\
    \ Online\n              Certificate Status Protocol - OCSP\", RFC 2560, June 1999.\n\
    \   [RFC4732]  Handley, M., Ed., Rescorla, E., Ed., and IAB, \"Internet\n    \
    \          Denial-of-Service Considerations\", RFC 4732,\n              December\
    \ 2006.\n   [RFC5019]  Deacon, A. and R. Hurst, \"The Lightweight Online\n   \
    \           Certificate Status Protocol (OCSP) Profile for High-Volume\n     \
    \         Environments\", RFC 5019, September 2007.\n   [RFC5912]  Hoffman, P.\
    \ and J. Schaad, \"New ASN.1 Modules for the\n              Public Key Infrastructure\
    \ Using X.509 (PKIX)\", RFC 5912,\n              June 2010.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   Development of this document has been made possible\
    \ thanks to\n   extensive inputs from members of the PKIX working group.\n   Jim\
    \ Schaad provided valuable support by compiling and checking the\n   ASN.1 modules\
    \ of this specification.\n"
- title: Appendix A.  OCSP over HTTP
  contents:
  - "Appendix A.  OCSP over HTTP\n   This section describes the formatting that will\
    \ be done to the\n   request and response to support HTTP [RFC2616].\n"
- title: A.1.  Request
  contents:
  - "A.1.  Request\n   HTTP-based OCSP requests can use either the GET or the POST\
    \ method to\n   submit their requests.  To enable HTTP caching, small requests\
    \ (that\n   after encoding are less than 255 bytes) MAY be submitted using GET.\n\
    \   If HTTP caching is not important or if the request is greater than\n   255\
    \ bytes, the request SHOULD be submitted using POST.  Where privacy\n   is a requirement,\
    \ OCSP transactions exchanged using HTTP MAY be\n   protected using either Transport\
    \ Layer Security/Secure Socket Layer\n   (TLS/SSL) or some other lower-layer protocol.\n\
    \   An OCSP request using the GET method is constructed as follows:\n   GET {url}/{url-encoding\
    \ of base-64 encoding of the DER encoding of\n   the OCSPRequest}\n   where {url}\
    \ may be derived from the value of the authority\n   information access extension\
    \ in the certificate being checked for\n   revocation, or other local configuration\
    \ of the OCSP client.\n   An OCSP request using the POST method is constructed\
    \ as follows: The\n   Content-Type header has the value \"application/ocsp-request\"\
    , while\n   the body of the message is the binary value of the DER encoding of\n\
    \   the OCSPRequest.\n"
- title: A.2.  Response
  contents:
  - "A.2.  Response\n   An HTTP-based OCSP response is composed of the appropriate\
    \ HTTP\n   headers, followed by the binary value of the DER encoding of the\n\
    \   OCSPResponse.  The Content-Type header has the value\n   \"application/ocsp-response\"\
    .  The Content-Length header SHOULD\n   specify the length of the response.  Other\
    \ HTTP headers MAY be\n   present and MAY be ignored if not understood by the\
    \ requestor.\n"
- title: Appendix B.  ASN.1 Modules
  contents:
  - "Appendix B.  ASN.1 Modules\n   This appendix includes the ASN.1 modules for OCSP.\
    \  Appendix B.1\n   includes an ASN.1 module that conforms to the 1998 version\
    \ of ASN.1\n   for all syntax elements of OCSP, including the preferred signature\n\
    \   algorithms extension that was defined in [RFC6277].  This module\n   replaces\
    \ the modules in Appendix B of [RFC2560] and Appendix A.2 of\n   [RFC6277].  Appendix\
    \ B.2 includes an ASN.1 module, corresponding to\n   the module present in B.1,\
    \ that conforms to the 2008 version of\n   ASN.1.  This module replaces the modules\
    \ in Section 12 of [RFC5912]\n   and Appendix A.1 of [RFC6277].  Although a 2008\
    \ ASN.1 module is\n   provided, the module in Appendix B.1 remains the normative\
    \ module as\n   per the policy of the PKIX working group.\n"
- title: B.1.  OCSP in ASN.1 - 1998 Syntax
  contents:
  - 'B.1.  OCSP in ASN.1 - 1998 Syntax

    '
- title: OCSP-2013-88
  contents:
  - "OCSP-2013-88\n      {iso(1) identified-organization(3) dod(6) internet(1)\n \
    \     security(5) mechanisms(5) pkix(7) id-mod(0)\n      id-mod-ocsp-2013-88(81)}\n"
- title: DEFINITIONS EXPLICIT TAGS ::=
  contents:
  - 'DEFINITIONS EXPLICIT TAGS ::=

    '
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n   -- PKIX Certificate Extensions\n      AuthorityInfoAccessSyntax,\
    \ CRLReason, GeneralName\n      FROM PKIX1Implicit88 { iso(1) identified-organization(3)\n\
    \           dod(6) internet(1) security(5) mechanisms(5) pkix(7)\n           id-mod(0)\
    \ id-pkix1-implicit(19) }\n      Name, CertificateSerialNumber, Extensions,\n\
    \      id-kp, id-ad-ocsp, Certificate, AlgorithmIdentifier\n      FROM PKIX1Explicit88\
    \ { iso(1) identified-organization(3)\n           dod(6) internet(1) security(5)\
    \ mechanisms(5) pkix(7)\n           id-mod(0) id-pkix1-explicit(18) };\n"
- title: OCSPRequest ::= SEQUENCE {
  contents:
  - "OCSPRequest ::= SEQUENCE {\n   tbsRequest              TBSRequest,\n   optionalSignature\
    \   [0] EXPLICIT Signature OPTIONAL }\n"
- title: TBSRequest ::= SEQUENCE {
  contents:
  - "TBSRequest ::= SEQUENCE {\n   version             [0] EXPLICIT Version DEFAULT\
    \ v1,\n   requestorName       [1] EXPLICIT GeneralName OPTIONAL,\n   requestList\
    \             SEQUENCE OF Request,\n   requestExtensions   [2] EXPLICIT Extensions\
    \ OPTIONAL }\n"
- title: Signature ::= SEQUENCE {
  contents:
  - "Signature ::= SEQUENCE {\n   signatureAlgorithm      AlgorithmIdentifier,\n \
    \  signature               BIT STRING,\n   certs               [0] EXPLICIT SEQUENCE\
    \ OF Certificate OPTIONAL }\n"
- title: Version ::= INTEGER { v1(0) }
  contents:
  - 'Version ::= INTEGER { v1(0) }

    '
- title: Request ::= SEQUENCE {
  contents:
  - "Request ::= SEQUENCE {\n   reqCert                     CertID,\n   singleRequestExtensions\
    \ [0] EXPLICIT Extensions OPTIONAL }\n"
- title: CertID ::= SEQUENCE {
  contents:
  - "CertID ::= SEQUENCE {\n   hashAlgorithm           AlgorithmIdentifier,\n   issuerNameHash\
    \          OCTET STRING, -- Hash of issuer's DN\n   issuerKeyHash           OCTET\
    \ STRING, -- Hash of issuer's public key\n   serialNumber            CertificateSerialNumber\
    \ }\n"
- title: OCSPResponse ::= SEQUENCE {
  contents:
  - "OCSPResponse ::= SEQUENCE {\n   responseStatus          OCSPResponseStatus,\n\
    \   responseBytes       [0] EXPLICIT ResponseBytes OPTIONAL }\n"
- title: OCSPResponseStatus ::= ENUMERATED {
  contents:
  - "OCSPResponseStatus ::= ENUMERATED {\n   successful          (0),  -- Response\
    \ has valid confirmations\n   malformedRequest    (1),  -- Illegal confirmation\
    \ request\n   internalError       (2),  -- Internal error in issuer\n   tryLater\
    \            (3),  -- Try again later\n                             -- (4) is\
    \ not used\n   sigRequired         (5),  -- Must sign the request\n   unauthorized\
    \        (6)   -- Request unauthorized\n"
- title: '}'
  contents:
  - '}

    '
- title: ResponseBytes ::= SEQUENCE {
  contents:
  - "ResponseBytes ::= SEQUENCE {\n   responseType            OBJECT IDENTIFIER,\n\
    \   response                OCTET STRING }\n"
- title: BasicOCSPResponse ::= SEQUENCE {
  contents:
  - "BasicOCSPResponse ::= SEQUENCE {\n  tbsResponseData          ResponseData,\n\
    \  signatureAlgorithm       AlgorithmIdentifier,\n  signature                BIT\
    \ STRING,\n  certs                [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL\
    \ }\n"
- title: ResponseData ::= SEQUENCE {
  contents:
  - "ResponseData ::= SEQUENCE {\n   version             [0] EXPLICIT Version DEFAULT\
    \ v1,\n   responderID             ResponderID,\n   producedAt              GeneralizedTime,\n\
    \   responses               SEQUENCE OF SingleResponse,\n   responseExtensions\
    \  [1] EXPLICIT Extensions OPTIONAL }\n"
- title: ResponderID ::= CHOICE {
  contents:
  - "ResponderID ::= CHOICE {\n   byName              [1] Name,\n   byKey        \
    \       [2] KeyHash }\n"
- title: KeyHash ::= OCTET STRING -- SHA-1 hash of responder's public key
  contents:
  - "KeyHash ::= OCTET STRING -- SHA-1 hash of responder's public key\n          \
    \               -- (i.e., the SHA-1 hash of the value of the\n               \
    \          -- BIT STRING subjectPublicKey [excluding\n                       \
    \  -- the tag, length, and number of unused\n                         -- bits]\
    \ in the responder's certificate)\n"
- title: SingleResponse ::= SEQUENCE {
  contents:
  - "SingleResponse ::= SEQUENCE {\n   certID                  CertID,\n   certStatus\
    \              CertStatus,\n   thisUpdate              GeneralizedTime,\n   nextUpdate\
    \          [0] EXPLICIT GeneralizedTime OPTIONAL,\n   singleExtensions    [1]\
    \ EXPLICIT Extensions OPTIONAL }\n"
- title: CertStatus ::= CHOICE {
  contents:
  - "CertStatus ::= CHOICE {\n   good                [0] IMPLICIT NULL,\n   revoked\
    \             [1] IMPLICIT RevokedInfo,\n   unknown             [2] IMPLICIT UnknownInfo\
    \ }\n"
- title: RevokedInfo ::= SEQUENCE {
  contents:
  - "RevokedInfo ::= SEQUENCE {\n   revocationTime          GeneralizedTime,\n   revocationReason\
    \    [0] EXPLICIT CRLReason OPTIONAL }\n"
- title: UnknownInfo ::= NULL
  contents:
  - 'UnknownInfo ::= NULL

    '
- title: ArchiveCutoff ::= GeneralizedTime
  contents:
  - 'ArchiveCutoff ::= GeneralizedTime

    '
- title: AcceptableResponses ::= SEQUENCE OF OBJECT IDENTIFIER
  contents:
  - 'AcceptableResponses ::= SEQUENCE OF OBJECT IDENTIFIER

    '
- title: ServiceLocator ::= SEQUENCE {
  contents:
  - "ServiceLocator ::= SEQUENCE {\n   issuer                  Name,\n   locator \
    \                AuthorityInfoAccessSyntax }\n"
- title: CrlID ::= SEQUENCE {
  contents:
  - "CrlID ::= SEQUENCE {\n    crlUrl               [0]     EXPLICIT IA5String OPTIONAL,\n\
    \    crlNum               [1]     EXPLICIT INTEGER OPTIONAL,\n    crlTime    \
    \          [2]     EXPLICIT GeneralizedTime OPTIONAL }\n"
- title: PreferredSignatureAlgorithms ::= SEQUENCE OF PreferredSignatureAlgorithm
  contents:
  - 'PreferredSignatureAlgorithms ::= SEQUENCE OF PreferredSignatureAlgorithm

    '
- title: PreferredSignatureAlgorithm ::= SEQUENCE {
  contents:
  - "PreferredSignatureAlgorithm ::= SEQUENCE {\n   sigIdentifier   AlgorithmIdentifier,\n\
    \   certIdentifier  AlgorithmIdentifier OPTIONAL }\n"
- title: -- Object Identifiers
  contents:
  - '-- Object Identifiers

    '
- title: id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }
  contents:
  - 'id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }

    '
- title: id-pkix-ocsp                 OBJECT IDENTIFIER ::= { id-ad-ocsp }
  contents:
  - 'id-pkix-ocsp                 OBJECT IDENTIFIER ::= { id-ad-ocsp }

    '
- title: id-pkix-ocsp-basic           OBJECT IDENTIFIER ::= { id-pkix-ocsp 1 }
  contents:
  - 'id-pkix-ocsp-basic           OBJECT IDENTIFIER ::= { id-pkix-ocsp 1 }

    '
- title: id-pkix-ocsp-nonce           OBJECT IDENTIFIER ::= { id-pkix-ocsp 2 }
  contents:
  - 'id-pkix-ocsp-nonce           OBJECT IDENTIFIER ::= { id-pkix-ocsp 2 }

    '
- title: id-pkix-ocsp-crl             OBJECT IDENTIFIER ::= { id-pkix-ocsp 3 }
  contents:
  - 'id-pkix-ocsp-crl             OBJECT IDENTIFIER ::= { id-pkix-ocsp 3 }

    '
- title: id-pkix-ocsp-response        OBJECT IDENTIFIER ::= { id-pkix-ocsp 4 }
  contents:
  - 'id-pkix-ocsp-response        OBJECT IDENTIFIER ::= { id-pkix-ocsp 4 }

    '
- title: id-pkix-ocsp-nocheck         OBJECT IDENTIFIER ::= { id-pkix-ocsp 5 }
  contents:
  - 'id-pkix-ocsp-nocheck         OBJECT IDENTIFIER ::= { id-pkix-ocsp 5 }

    '
- title: id-pkix-ocsp-archive-cutoff  OBJECT IDENTIFIER ::= { id-pkix-ocsp 6 }
  contents:
  - 'id-pkix-ocsp-archive-cutoff  OBJECT IDENTIFIER ::= { id-pkix-ocsp 6 }

    '
- title: id-pkix-ocsp-service-locator OBJECT IDENTIFIER ::= { id-pkix-ocsp 7 }
  contents:
  - 'id-pkix-ocsp-service-locator OBJECT IDENTIFIER ::= { id-pkix-ocsp 7 }

    '
- title: id-pkix-ocsp-pref-sig-algs   OBJECT IDENTIFIER ::= { id-pkix-ocsp 8 }
  contents:
  - 'id-pkix-ocsp-pref-sig-algs   OBJECT IDENTIFIER ::= { id-pkix-ocsp 8 }

    '
- title: id-pkix-ocsp-extended-revoke OBJECT IDENTIFIER ::= { id-pkix-ocsp 9 }
  contents:
  - 'id-pkix-ocsp-extended-revoke OBJECT IDENTIFIER ::= { id-pkix-ocsp 9 }

    '
- title: END
  contents:
  - 'END

    '
- title: B.2.  OCSP in ASN.1 - 2008 Syntax
  contents:
  - 'B.2.  OCSP in ASN.1 - 2008 Syntax

    '
- title: OCSP-2013-08
  contents:
  - "OCSP-2013-08\n    {iso(1) identified-organization(3) dod(6) internet(1) security(5)\n\
    \    mechanisms(5) pkix(7) id-mod(0) id-mod-ocsp-2013-08(82)}\n"
- title: DEFINITIONS EXPLICIT TAGS ::=
  contents:
  - 'DEFINITIONS EXPLICIT TAGS ::=

    '
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: IMPORTS
  contents:
  - 'IMPORTS

    '
- title: Extensions{}, EXTENSION, ATTRIBUTE
  contents:
  - 'Extensions{}, EXTENSION, ATTRIBUTE

    '
- title: FROM PKIX-CommonTypes-2009 -- From [RFC5912]
  contents:
  - "FROM PKIX-CommonTypes-2009 -- From [RFC5912]\n    {iso(1) identified-organization(3)\
    \ dod(6) internet(1) security(5)\n    mechanisms(5) pkix(7) id-mod(0) id-mod-pkixCommon-02(57)}\n"
- title: AlgorithmIdentifier{}, DIGEST-ALGORITHM, SIGNATURE-ALGORITHM, PUBLIC-KEY
  contents:
  - 'AlgorithmIdentifier{}, DIGEST-ALGORITHM, SIGNATURE-ALGORITHM, PUBLIC-KEY

    '
- title: FROM AlgorithmInformation-2009 -- From [RFC5912]
  contents:
  - "FROM AlgorithmInformation-2009 -- From [RFC5912]\n    {iso(1) identified-organization(3)\
    \ dod(6) internet(1) security(5)\n    mechanisms(5) pkix(7) id-mod(0)\n    id-mod-algorithmInformation-02(58)}\n"
- title: AuthorityInfoAccessSyntax, GeneralName, CrlEntryExtensions
  contents:
  - 'AuthorityInfoAccessSyntax, GeneralName, CrlEntryExtensions

    '
- title: FROM PKIX1Implicit-2009 -- From [RFC5912]
  contents:
  - "FROM PKIX1Implicit-2009 -- From [RFC5912]\n    {iso(1) identified-organization(3)\
    \ dod(6) internet(1) security(5)\n    mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-implicit-02(59)}\n"
- title: Name, CertificateSerialNumber, id-kp, id-ad-ocsp, Certificate
  contents:
  - 'Name, CertificateSerialNumber, id-kp, id-ad-ocsp, Certificate

    '
- title: FROM PKIX1Explicit-2009 -- From [RFC5912]
  contents:
  - "FROM PKIX1Explicit-2009 -- From [RFC5912]\n    {iso(1) identified-organization(3)\
    \ dod(6) internet(1) security(5)\n    mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-explicit-02(51)}\n"
- title: sa-dsaWithSHA1, sa-rsaWithMD2, sa-rsaWithMD5, sa-rsaWithSHA1
  contents:
  - 'sa-dsaWithSHA1, sa-rsaWithMD2, sa-rsaWithMD5, sa-rsaWithSHA1

    '
- title: FROM PKIXAlgs-2009 -- From [RFC5912]
  contents:
  - "FROM PKIXAlgs-2009 -- From [RFC5912]\n    {iso(1) identified-organization(3)\
    \ dod(6) internet(1) security(5)\n    mechanisms(5) pkix(7) id-mod(0)\n    id-mod-pkix1-algorithms2008-02(56)};\n"
- title: OCSPRequest     ::=     SEQUENCE {
  contents:
  - "OCSPRequest     ::=     SEQUENCE {\n    tbsRequest                  TBSRequest,\n\
    \    optionalSignature   [0]     EXPLICIT Signature OPTIONAL }\n"
- title: TBSRequest      ::=     SEQUENCE {
  contents:
  - "TBSRequest      ::=     SEQUENCE {\n    version             [0] EXPLICIT Version\
    \ DEFAULT v1,\n    requestorName       [1] EXPLICIT GeneralName OPTIONAL,\n  \
    \  requestList             SEQUENCE OF Request,\n    requestExtensions   [2] EXPLICIT\
    \ Extensions {{re-ocsp-nonce |\n                     re-ocsp-response, ...,\n\
    \                     re-ocsp-preferred-signature-algorithms}} OPTIONAL }\n"
- title: Signature       ::=     SEQUENCE {
  contents:
  - "Signature       ::=     SEQUENCE {\n    signatureAlgorithm   AlgorithmIdentifier\n\
    \                             { SIGNATURE-ALGORITHM, {...}},\n    signature  \
    \          BIT STRING,\n    certs            [0] EXPLICIT SEQUENCE OF Certificate\
    \ OPTIONAL }\n"
- title: Version  ::=  INTEGER  {  v1(0) }
  contents:
  - 'Version  ::=  INTEGER  {  v1(0) }

    '
- title: Request ::=     SEQUENCE {
  contents:
  - "Request ::=     SEQUENCE {\n    reqCert                    CertID,\n    singleRequestExtensions\
    \    [0] EXPLICIT Extensions\n                                       { {re-ocsp-service-locator,\n\
    \                                              ...}} OPTIONAL }\n"
- title: CertID ::= SEQUENCE {
  contents:
  - "CertID ::= SEQUENCE {\n    hashAlgorithm            AlgorithmIdentifier\n   \
    \                              {DIGEST-ALGORITHM, {...}},\n    issuerNameHash\
    \     OCTET STRING, -- Hash of issuer's DN\n    issuerKeyHash      OCTET STRING,\
    \ -- Hash of issuer's public key\n    serialNumber       CertificateSerialNumber\
    \ }\n"
- title: OCSPResponse ::= SEQUENCE {
  contents:
  - "OCSPResponse ::= SEQUENCE {\n   responseStatus         OCSPResponseStatus,\n\
    \   responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }\n"
- title: OCSPResponseStatus ::= ENUMERATED {
  contents:
  - "OCSPResponseStatus ::= ENUMERATED {\n    successful            (0), -- Response\
    \ has valid confirmations\n    malformedRequest      (1), -- Illegal confirmation\
    \ request\n    internalError         (2), -- Internal error in issuer\n    tryLater\
    \              (3), -- Try again later\n                               -- (4)\
    \ is not used\n    sigRequired           (5), -- Must sign the request\n    unauthorized\
    \          (6)  -- Request unauthorized\n"
- title: '}'
  contents:
  - '}

    '
- title: RESPONSE ::= TYPE-IDENTIFIER
  contents:
  - 'RESPONSE ::= TYPE-IDENTIFIER

    '
- title: ResponseSet RESPONSE ::= {basicResponse, ...}
  contents:
  - 'ResponseSet RESPONSE ::= {basicResponse, ...}

    '
- title: ResponseBytes ::=       SEQUENCE {
  contents:
  - "ResponseBytes ::=       SEQUENCE {\n    responseType        RESPONSE.\n     \
    \                       &id ({ResponseSet}),\n    response            OCTET STRING\
    \ (CONTAINING RESPONSE.\n                            &Type({ResponseSet}{@responseType}))}\n"
- title: basicResponse RESPONSE ::=
  contents:
  - "basicResponse RESPONSE ::=\n    { BasicOCSPResponse IDENTIFIED BY id-pkix-ocsp-basic\
    \ }\n"
- title: BasicOCSPResponse       ::= SEQUENCE {
  contents:
  - "BasicOCSPResponse       ::= SEQUENCE {\n   tbsResponseData      ResponseData,\n\
    \   signatureAlgorithm   AlgorithmIdentifier{SIGNATURE-ALGORITHM,\n          \
    \                  {sa-dsaWithSHA1 | sa-rsaWithSHA1 |\n                      \
    \           sa-rsaWithMD5 | sa-rsaWithMD2, ...}},\n   signature            BIT\
    \ STRING,\n   certs            [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\n"
- title: ResponseData ::= SEQUENCE {
  contents:
  - "ResponseData ::= SEQUENCE {\n   version              [0] EXPLICIT Version DEFAULT\
    \ v1,\n   responderID              ResponderID,\n   producedAt               GeneralizedTime,\n\
    \   responses                SEQUENCE OF SingleResponse,\n   responseExtensions\
    \   [1] EXPLICIT Extensions\n                               {{re-ocsp-nonce, ...,\n\
    \                                 re-ocsp-extended-revoke}} OPTIONAL }\n"
- title: ResponderID ::= CHOICE {
  contents:
  - "ResponderID ::= CHOICE {\n   byName   [1] Name,\n   byKey    [2] KeyHash }\n"
- title: KeyHash ::= OCTET STRING -- SHA-1 hash of responder's public key
  contents:
  - "KeyHash ::= OCTET STRING -- SHA-1 hash of responder's public key\n          \
    \               -- (excluding the tag and length fields)\n"
- title: SingleResponse ::= SEQUENCE {
  contents:
  - "SingleResponse ::= SEQUENCE {\n   certID                       CertID,\n   certStatus\
    \                   CertStatus,\n   thisUpdate                   GeneralizedTime,\n\
    \   nextUpdate           [0]     EXPLICIT GeneralizedTime OPTIONAL,\n   singleExtensions\
    \     [1]     EXPLICIT Extensions{{re-ocsp-crl |\n                           \
    \                  re-ocsp-archive-cutoff |\n                                \
    \             CrlEntryExtensions, ...}\n                                     \
    \        } OPTIONAL }\n"
- title: CertStatus ::= CHOICE {
  contents:
  - "CertStatus ::= CHOICE {\n    good                [0]     IMPLICIT NULL,\n   \
    \ revoked             [1]     IMPLICIT RevokedInfo,\n    unknown             [2]\
    \     IMPLICIT UnknownInfo }\n"
- title: RevokedInfo ::= SEQUENCE {
  contents:
  - "RevokedInfo ::= SEQUENCE {\n    revocationTime              GeneralizedTime,\n\
    \    revocationReason    [0]     EXPLICIT CRLReason OPTIONAL }\n"
- title: UnknownInfo ::= NULL
  contents:
  - 'UnknownInfo ::= NULL

    '
- title: ArchiveCutoff ::= GeneralizedTime
  contents:
  - 'ArchiveCutoff ::= GeneralizedTime

    '
- title: AcceptableResponses ::= SEQUENCE OF RESPONSE.&id({ResponseSet})
  contents:
  - 'AcceptableResponses ::= SEQUENCE OF RESPONSE.&id({ResponseSet})

    '
- title: ServiceLocator ::= SEQUENCE {
  contents:
  - "ServiceLocator ::= SEQUENCE {\n    issuer    Name,\n    locator   AuthorityInfoAccessSyntax\
    \ }\n"
- title: CrlID ::= SEQUENCE {
  contents:
  - "CrlID ::= SEQUENCE {\n    crlUrl               [0]     EXPLICIT IA5String OPTIONAL,\n\
    \    crlNum               [1]     EXPLICIT INTEGER OPTIONAL,\n    crlTime    \
    \          [2]     EXPLICIT GeneralizedTime OPTIONAL }\n"
- title: PreferredSignatureAlgorithms ::= SEQUENCE OF PreferredSignatureAlgorithm
  contents:
  - 'PreferredSignatureAlgorithms ::= SEQUENCE OF PreferredSignatureAlgorithm

    '
- title: PreferredSignatureAlgorithm ::= SEQUENCE {
  contents:
  - "PreferredSignatureAlgorithm ::= SEQUENCE {\n   sigIdentifier  AlgorithmIdentifier{SIGNATURE-ALGORITHM,\
    \ {...}},\n   certIdentifier AlgorithmIdentifier{PUBLIC-KEY, {...}} OPTIONAL\n"
- title: '}'
  contents:
  - '}

    '
- title: -- Certificate Extensions
  contents:
  - '-- Certificate Extensions

    '
- title: ext-ocsp-nocheck EXTENSION ::= { SYNTAX NULL IDENTIFIED
  contents:
  - "ext-ocsp-nocheck EXTENSION ::= { SYNTAX NULL IDENTIFIED\n                   \
    \              BY id-pkix-ocsp-nocheck }\n"
- title: -- Request Extensions
  contents:
  - '-- Request Extensions

    '
- title: re-ocsp-nonce EXTENSION ::= { SYNTAX OCTET STRING IDENTIFIED
  contents:
  - "re-ocsp-nonce EXTENSION ::= { SYNTAX OCTET STRING IDENTIFIED\n              \
    \                BY id-pkix-ocsp-nonce }\n"
- title: re-ocsp-response EXTENSION ::= { SYNTAX AcceptableResponses IDENTIFIED
  contents:
  - "re-ocsp-response EXTENSION ::= { SYNTAX AcceptableResponses IDENTIFIED\n    \
    \                             BY id-pkix-ocsp-response }\n"
- title: re-ocsp-service-locator EXTENSION ::= { SYNTAX ServiceLocator
  contents:
  - "re-ocsp-service-locator EXTENSION ::= { SYNTAX ServiceLocator\n             \
    \                           IDENTIFIED BY\n                                  \
    \      id-pkix-ocsp-service-locator }\n"
- title: re-ocsp-preferred-signature-algorithms EXTENSION ::= {
  contents:
  - "re-ocsp-preferred-signature-algorithms EXTENSION ::= {\n   SYNTAX PreferredSignatureAlgorithms\n\
    \   IDENTIFIED BY id-pkix-ocsp-pref-sig-algs  }\n"
- title: -- Response Extensions
  contents:
  - '-- Response Extensions

    '
- title: re-ocsp-crl EXTENSION ::= { SYNTAX CrlID IDENTIFIED BY
  contents:
  - "re-ocsp-crl EXTENSION ::= { SYNTAX CrlID IDENTIFIED BY\n                    \
    \            id-pkix-ocsp-crl }\n"
- title: re-ocsp-archive-cutoff EXTENSION ::= { SYNTAX ArchiveCutoff
  contents:
  - "re-ocsp-archive-cutoff EXTENSION ::= { SYNTAX ArchiveCutoff\n               \
    \                        IDENTIFIED BY\n                                     \
    \  id-pkix-ocsp-archive-cutoff }\n"
- title: re-ocsp-extended-revoke EXTENSION ::= { SYNTAX NULL IDENTIFIED BY
  contents:
  - "re-ocsp-extended-revoke EXTENSION ::= { SYNTAX NULL IDENTIFIED BY\n         \
    \                               id-pkix-ocsp-extended-revoke }\n"
- title: -- Object Identifiers
  contents:
  - '-- Object Identifiers

    '
- title: id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }
  contents:
  - 'id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }

    '
- title: id-pkix-ocsp                 OBJECT IDENTIFIER ::= id-ad-ocsp
  contents:
  - 'id-pkix-ocsp                 OBJECT IDENTIFIER ::= id-ad-ocsp

    '
- title: id-pkix-ocsp-basic           OBJECT IDENTIFIER ::= { id-pkix-ocsp 1 }
  contents:
  - 'id-pkix-ocsp-basic           OBJECT IDENTIFIER ::= { id-pkix-ocsp 1 }

    '
- title: id-pkix-ocsp-nonce           OBJECT IDENTIFIER ::= { id-pkix-ocsp 2 }
  contents:
  - 'id-pkix-ocsp-nonce           OBJECT IDENTIFIER ::= { id-pkix-ocsp 2 }

    '
- title: id-pkix-ocsp-crl             OBJECT IDENTIFIER ::= { id-pkix-ocsp 3 }
  contents:
  - 'id-pkix-ocsp-crl             OBJECT IDENTIFIER ::= { id-pkix-ocsp 3 }

    '
- title: id-pkix-ocsp-response        OBJECT IDENTIFIER ::= { id-pkix-ocsp 4 }
  contents:
  - 'id-pkix-ocsp-response        OBJECT IDENTIFIER ::= { id-pkix-ocsp 4 }

    '
- title: id-pkix-ocsp-nocheck         OBJECT IDENTIFIER ::= { id-pkix-ocsp 5 }
  contents:
  - 'id-pkix-ocsp-nocheck         OBJECT IDENTIFIER ::= { id-pkix-ocsp 5 }

    '
- title: id-pkix-ocsp-archive-cutoff  OBJECT IDENTIFIER ::= { id-pkix-ocsp 6 }
  contents:
  - 'id-pkix-ocsp-archive-cutoff  OBJECT IDENTIFIER ::= { id-pkix-ocsp 6 }

    '
- title: id-pkix-ocsp-service-locator OBJECT IDENTIFIER ::= { id-pkix-ocsp 7 }
  contents:
  - 'id-pkix-ocsp-service-locator OBJECT IDENTIFIER ::= { id-pkix-ocsp 7 }

    '
- title: id-pkix-ocsp-pref-sig-algs   OBJECT IDENTIFIER ::= { id-pkix-ocsp 8 }
  contents:
  - 'id-pkix-ocsp-pref-sig-algs   OBJECT IDENTIFIER ::= { id-pkix-ocsp 8 }

    '
- title: id-pkix-ocsp-extended-revoke OBJECT IDENTIFIER ::= { id-pkix-ocsp 9 }
  contents:
  - 'id-pkix-ocsp-extended-revoke OBJECT IDENTIFIER ::= { id-pkix-ocsp 9 }

    '
- title: END
  contents:
  - 'END

    '
- title: Appendix C.  MIME Registrations
  contents:
  - 'Appendix C.  MIME Registrations

    '
- title: C.1.  application/ocsp-request
  contents:
  - "C.1.  application/ocsp-request\n   To: ietf-types@iana.org\n   Subject: Registration\
    \ of MIME media type application/ocsp-request\n   MIME media type name: application\n\
    \   MIME subtype name: ocsp-request\n   Required parameters: None\n   Optional\
    \ parameters: None\n   Encoding considerations: binary\n   Security considerations:\
    \ Carries a request for information.  This\n      request may optionally be cryptographically\
    \ signed.\n   Interoperability considerations: None\n   Published specification:\
    \ IETF PKIX Working Group document on the\n      Online Certificate Status Protocol\
    \ - OCSP\n   Applications which use this media type: OCSP clients\n   Additional\
    \ information:\n      Magic number(s): None\n      File extension(s): .ORQ\n \
    \     Macintosh File Type Code(s): none\n   Person & email address to contact\
    \ for further information:\n      Stefan Santesson <sts@aaa-sec.com>\n   Intended\
    \ usage: COMMON\n   Author/Change controller: IETF\n"
- title: C.2.  application/ocsp-response
  contents:
  - "C.2.  application/ocsp-response\n   To: ietf-types@iana.org\n   Subject: Registration\
    \ of MIME media type application/ocsp-response\n   MIME media type name: application\n\
    \   MIME subtype name: ocsp-response\n   Required parameters: None\n   Optional\
    \ parameters: None\n   Encoding considerations: binary\n   Security considerations:\
    \ Carries a cryptographically signed response.\n   Interoperability considerations:\
    \ None\n   Published specification: IETF PKIX Working Group document on the\n\
    \      Online Certificate Status Protocol - OCSP\n   Applications which use this\
    \ media type: OCSP servers\n   Additional information:\n      Magic number(s):\
    \ None\n      File extension(s): .ORS\n      Macintosh File Type Code(s): none\n\
    \   Person & email address to contact for further information:\n      Stefan Santesson\
    \ <sts@aaa-sec.com>\n   Intended usage: COMMON\n   Author/Change controller: IETF\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Stefan Santesson\n   3xA Security AB\n   Scheelev. 17\n\
    \   223 70 Lund\n   Sweden\n   EMail: sts@aaa-sec.com\n   Michael Myers\n   TraceRoute\
    \ Security\n   EMail: mmyers@fastq.com\n   Rich Ankney\n   Ambarish Malpani\n\
    \   CA Technologies\n   455 West Maude Ave.  Suite 210\n   Sunnyvale, CA  94085\n\
    \   United States\n   EMail: ambarish@gmail.com\n   Slava Galperin\n   A9.com\
    \ Inc.\n   130 Lytton Ave.  Suite 300\n   Palo Alto, CA  94301\n   United States\n\
    \   EMail: slava.galperin@gmail.com\n   Carlisle Adams\n   University of Ottawa\n\
    \   800 King Edward Avenue\n   Ottawa ON K1N 6N5\n   Canada\n   EMail: cadams@eecs.uottawa.ca\n"
