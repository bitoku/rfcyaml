- title: __initial_text__
  contents:
  - '                         TCP Congestion Control

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines TCP's four intertwined congestion control\n\
    \   algorithms: slow start, congestion avoidance, fast retransmit, and\n   fast\
    \ recovery.  In addition, the document specifies how TCP should\n   begin transmission\
    \ after a relatively long idle period, as well as\n   discussing various acknowledgment\
    \ generation methods.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document specifies four TCP [Pos81] congestion control\n\
    \   algorithms: slow start, congestion avoidance, fast retransmit and\n   fast\
    \ recovery.  These algorithms were devised in [Jac88] and [Jac90].\n   Their use\
    \ with TCP is standardized in [Bra89].\n   This document is an update of [Ste97].\
    \  In addition to specifying the\n   congestion control algorithms, this document\
    \ specifies what TCP\n   connections should do after a relatively long idle period,\
    \ as well as\n   specifying and clarifying some of the issues pertaining to TCP\
    \ ACK\n   generation.\n   Note that [Ste94] provides examples of these algorithms\
    \ in action and\n   [WS95] provides an explanation of the source code for the\
    \ BSD\n   implementation of these algorithms.\n   This document is organized as\
    \ follows.  Section 2 provides various\n   definitions which will be used throughout\
    \ the document.  Section 3\n   provides a specification of the congestion control\
    \ algorithms.\n   Section 4 outlines concerns related to the congestion control\n\
    \   algorithms and finally, section 5 outlines security considerations.\n   The\
    \ key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n\
    \   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in [Bra97].\n"
- title: 2. Definitions
  contents:
  - "2. Definitions\n   This section provides the definition of several terms that\
    \ will be\n   used throughout the remainder of this document.\n   SEGMENT:\n \
    \     A segment is ANY TCP/IP data or acknowledgment packet (or both).\n   SENDER\
    \ MAXIMUM SEGMENT SIZE (SMSS):  The SMSS is the size of the\n      largest segment\
    \ that the sender can transmit.  This value can be\n      based on the maximum\
    \ transmission unit of the network, the path\n      MTU discovery [MD90] algorithm,\
    \ RMSS (see next item), or other\n      factors.  The size does not include the\
    \ TCP/IP headers and\n      options.\n   RECEIVER MAXIMUM SEGMENT SIZE (RMSS):\
    \  The RMSS is the size of the\n      largest segment the receiver is willing\
    \ to accept.  This is the\n      value specified in the MSS option sent by the\
    \ receiver during\n      connection startup.  Or, if the MSS option is not used,\
    \ 536 bytes\n      [Bra89].  The size does not include the TCP/IP headers and\n\
    \      options.\n   FULL-SIZED SEGMENT: A segment that contains the maximum number\
    \ of\n      data bytes permitted (i.e., a segment containing SMSS bytes of\n \
    \     data).\n   RECEIVER WINDOW (rwnd) The most recently advertised receiver\
    \ window.\n   CONGESTION WINDOW (cwnd):  A TCP state variable that limits the\n\
    \      amount of data a TCP can send.  At any given time, a TCP MUST NOT\n   \
    \   send data with a sequence number higher than the sum of the\n      highest\
    \ acknowledged sequence number and the minimum of cwnd and\n      rwnd.\n   INITIAL\
    \ WINDOW (IW):  The initial window is the size of the sender's\n      congestion\
    \ window after the three-way handshake is completed.\n   LOSS WINDOW (LW):  The\
    \ loss window is the size of the congestion\n      window after a TCP sender detects\
    \ loss using its retransmission\n      timer.\n   RESTART WINDOW (RW):  The restart\
    \ window is the size of the\n      congestion window after a TCP restarts transmission\
    \ after an idle\n      period (if the slow start algorithm is used; see section\
    \ 4.1 for\n      more discussion).\n   FLIGHT SIZE:  The amount of data that has\
    \ been sent but not yet\n      acknowledged.\n"
- title: 3. Congestion Control Algorithms
  contents:
  - "3. Congestion Control Algorithms\n   This section defines the four congestion\
    \ control algorithms: slow\n   start, congestion avoidance, fast retransmit and\
    \ fast recovery,\n   developed in [Jac88] and [Jac90].  In some situations it\
    \ may be\n   beneficial for a TCP sender to be more conservative than the\n  \
    \ algorithms allow, however a TCP MUST NOT be more aggressive than the\n   following\
    \ algorithms allow (that is, MUST NOT send data when the\n   value of cwnd computed\
    \ by the following algorithms would not allow\n   the data to be sent).\n"
- title: 3.1 Slow Start and Congestion Avoidance
  contents:
  - "3.1 Slow Start and Congestion Avoidance\n   The slow start and congestion avoidance\
    \ algorithms MUST be used by a\n   TCP sender to control the amount of outstanding\
    \ data being injected\n   into the network.  To implement these algorithms, two\
    \ variables are\n   added to the TCP per-connection state.  The congestion window\
    \ (cwnd)\n   is a sender-side limit on the amount of data the sender can transmit\n\
    \   into the network before receiving an acknowledgment (ACK), while the\n   receiver's\
    \ advertised window (rwnd) is a receiver-side limit on the\n   amount of outstanding\
    \ data.  The minimum of cwnd and rwnd governs\n   data transmission.\n   Another\
    \ state variable, the slow start threshold (ssthresh), is used\n   to determine\
    \ whether the slow start or congestion avoidance algorithm\n   is used to control\
    \ data transmission, as discussed below.\n   Beginning transmission into a network\
    \ with unknown conditions\n   requires TCP to slowly probe the network to determine\
    \ the available\n   capacity, in order to avoid congesting the network with an\n\
    \   inappropriately large burst of data.  The slow start algorithm is\n   used\
    \ for this purpose at the beginning of a transfer, or after\n   repairing loss\
    \ detected by the retransmission timer.\n   IW, the initial value of cwnd, MUST\
    \ be less than or equal to 2*SMSS\n   bytes and MUST NOT be more than 2 segments.\n\
    \   We note that a non-standard, experimental TCP extension allows that a\n  \
    \ TCP MAY use a larger initial window (IW), as defined in equation 1\n   [AFP98]:\n\
    \      IW = min (4*SMSS, max (2*SMSS, 4380 bytes))           (1)\n   With this\
    \ extension, a TCP sender MAY use a 3 or 4 segment initial\n   window, provided\
    \ the combined size of the segments does not exceed\n   4380 bytes.  We do NOT\
    \ allow this change as part of the standard\n   defined by this document.  However,\
    \ we include discussion of (1) in\n   the remainder of this document as a guideline\
    \ for those experimenting\n   with the change, rather than conforming to the present\
    \ standards for\n   TCP congestion control.\n   The initial value of ssthresh\
    \ MAY be arbitrarily high (for example,\n   some implementations use the size\
    \ of the advertised window), but it\n   may be reduced in response to congestion.\
    \  The slow start algorithm\n   is used when cwnd < ssthresh, while the congestion\
    \ avoidance\n   algorithm is used when cwnd > ssthresh.  When cwnd and ssthresh\
    \ are\n   equal the sender may use either slow start or congestion avoidance.\n\
    \   During slow start, a TCP increments cwnd by at most SMSS bytes for\n   each\
    \ ACK received that acknowledges new data.  Slow start ends when\n   cwnd exceeds\
    \ ssthresh (or, optionally, when it reaches it, as noted\n   above) or when congestion\
    \ is observed.\n   During congestion avoidance, cwnd is incremented by 1 full-sized\n\
    \   segment per round-trip time (RTT).  Congestion avoidance continues\n   until\
    \ congestion is detected.  One formula commonly used to update\n   cwnd during\
    \ congestion avoidance is given in equation 2:\n      cwnd += SMSS*SMSS/cwnd \
    \                    (2)\n   This adjustment is executed on every incoming non-duplicate\
    \ ACK.\n   Equation (2) provides an acceptable approximation to the underlying\n\
    \   principle of increasing cwnd by 1 full-sized segment per RTT.  (Note\n   that\
    \ for a connection in which the receiver acknowledges every data\n   segment,\
    \ (2) proves slightly more aggressive than 1 segment per RTT,\n   and for a receiver\
    \ acknowledging every-other packet, (2) is less\n   aggressive.)\n   Implementation\
    \ Note: Since integer arithmetic is usually used in TCP\n   implementations, the\
    \ formula given in equation 2 can fail to increase\n   cwnd when the congestion\
    \ window is very large (larger than\n   SMSS*SMSS).  If the above formula yields\
    \ 0, the result SHOULD be\n   rounded up to 1 byte.\n   Implementation Note: older\
    \ implementations have an additional\n   additive constant on the right-hand side\
    \ of equation (2).  This is\n   incorrect and can actually lead to diminished\
    \ performance [PAD+98].\n   Another acceptable way to increase cwnd during congestion\
    \ avoidance\n   is to count the number of bytes that have been acknowledged by\
    \ ACKs\n   for new data.  (A drawback of this implementation is that it requires\n\
    \   maintaining an additional state variable.)  When the number of bytes\n   acknowledged\
    \ reaches cwnd, then cwnd can be incremented by up to SMSS\n   bytes.  Note that\
    \ during congestion avoidance, cwnd MUST NOT be\n   increased by more than the\
    \ larger of either 1 full-sized segment per\n   RTT, or the value computed using\
    \ equation 2.\n   Implementation Note: some implementations maintain cwnd in units\
    \ of\n   bytes, while others in units of full-sized segments.  The latter will\n\
    \   find equation (2) difficult to use, and may prefer to use the\n   counting\
    \ approach discussed in the previous paragraph.\n   When a TCP sender detects\
    \ segment loss using the retransmission\n   timer, the value of ssthresh MUST\
    \ be set to no more than the value\n   given in equation 3:\n      ssthresh =\
    \ max (FlightSize / 2, 2*SMSS)            (3)\n   As discussed above, FlightSize\
    \ is the amount of outstanding data in\n   the network.\n   Implementation Note:\
    \ an easy mistake to make is to simply use cwnd,\n   rather than FlightSize, which\
    \ in some implementations may\n   incidentally increase well beyond rwnd.\n  \
    \ Furthermore, upon a timeout cwnd MUST be set to no more than the loss\n   window,\
    \ LW, which equals 1 full-sized segment (regardless of the\n   value of IW). \
    \ Therefore, after retransmitting the dropped segment\n   the TCP sender uses\
    \ the slow start algorithm to increase the window\n   from 1 full-sized segment\
    \ to the new value of ssthresh, at which\n   point congestion avoidance again\
    \ takes over.\n"
- title: 3.2 Fast Retransmit/Fast Recovery
  contents:
  - "3.2 Fast Retransmit/Fast Recovery\n   A TCP receiver SHOULD send an immediate\
    \ duplicate ACK when an out-\n   of-order segment arrives.  The purpose of this\
    \ ACK is to inform the\n   sender that a segment was received out-of-order and\
    \ which sequence\n   number is expected.  From the sender's perspective, duplicate\
    \ ACKs\n   can be caused by a number of network problems.  First, they can be\n\
    \   caused by dropped segments.  In this case, all segments after the\n   dropped\
    \ segment will trigger duplicate ACKs.  Second, duplicate ACKs\n   can be caused\
    \ by the re-ordering of data segments by the network (not\n   a rare event along\
    \ some network paths [Pax97]).  Finally, duplicate\n   ACKs can be caused by replication\
    \ of ACK or data segments by the\n   network.  In addition, a TCP receiver SHOULD\
    \ send an immediate ACK\n   when the incoming segment fills in all or part of\
    \ a gap in the\n   sequence space.  This will generate more timely information\
    \ for a\n   sender recovering from a loss through a retransmission timeout, a\n\
    \   fast retransmit, or an experimental loss recovery algorithm, such as\n   NewReno\
    \ [FH98].\n   The TCP sender SHOULD use the \"fast retransmit\" algorithm to detect\n\
    \   and repair loss, based on incoming duplicate ACKs.  The fast\n   retransmit\
    \ algorithm uses the arrival of 3 duplicate ACKs (4\n   identical ACKs without\
    \ the arrival of any other intervening packets)\n   as an indication that a segment\
    \ has been lost.  After receiving 3\n   duplicate ACKs, TCP performs a retransmission\
    \ of what appears to be\n   the missing segment, without waiting for the retransmission\
    \ timer to\n   expire.\n   After the fast retransmit algorithm sends what appears\
    \ to be the\n   missing segment, the \"fast recovery\" algorithm governs the\n\
    \   transmission of new data until a non-duplicate ACK arrives.  The\n   reason\
    \ for not performing slow start is that the receipt of the\n   duplicate ACKs\
    \ not only indicates that a segment has been lost, but\n   also that segments\
    \ are most likely leaving the network (although a\n   massive segment duplication\
    \ by the network can invalidate this\n   conclusion).  In other words, since the\
    \ receiver can only generate a\n   duplicate ACK when a segment has arrived, that\
    \ segment has left the\n   network and is in the receiver's buffer, so we know\
    \ it is no longer\n   consuming network resources.  Furthermore, since the ACK\
    \ \"clock\"\n   [Jac88] is preserved, the TCP sender can continue to transmit\
    \ new\n   segments (although transmission must continue using a reduced cwnd).\n\
    \   The fast retransmit and fast recovery algorithms are usually\n   implemented\
    \ together as follows.\n   1.  When the third duplicate ACK is received, set ssthresh\
    \ to no more\n       than the value given in equation 3.\n   2.  Retransmit the\
    \ lost segment and set cwnd to ssthresh plus 3*SMSS.\n       This artificially\
    \ \"inflates\" the congestion window by the number\n       of segments (three)\
    \ that have left the network and which the\n       receiver has buffered.\n  \
    \ 3.  For each additional duplicate ACK received, increment cwnd by\n       SMSS.\
    \  This artificially inflates the congestion window in order\n       to reflect\
    \ the additional segment that has left the network.\n   4.  Transmit a segment,\
    \ if allowed by the new value of cwnd and the\n       receiver's advertised window.\n\
    \   5.  When the next ACK arrives that acknowledges new data, set cwnd to\n  \
    \     ssthresh (the value set in step 1).  This is termed \"deflating\"\n    \
    \   the window.\n       This ACK should be the acknowledgment elicited by the\n\
    \       retransmission from step 1, one RTT after the retransmission\n       (though\
    \ it may arrive sooner in the presence of significant out-\n       of-order delivery\
    \ of data segments at the receiver).\n       Additionally, this ACK should acknowledge\
    \ all the intermediate\n       segments sent between the lost segment and the\
    \ receipt of the\n       third duplicate ACK, if none of these were lost.\n  \
    \ Note: This algorithm is known to generally not recover very\n   efficiently\
    \ from multiple losses in a single flight of packets\n   [FF96].  One proposed\
    \ set of modifications to address this problem\n   can be found in [FH98].\n"
- title: 4. Additional Considerations
  contents:
  - '4. Additional Considerations

    '
- title: 4.1 Re-starting Idle Connections
  contents:
  - "4.1 Re-starting Idle Connections\n   A known problem with the TCP congestion\
    \ control algorithms described\n   above is that they allow a potentially inappropriate\
    \ burst of traffic\n   to be transmitted after TCP has been idle for a relatively\
    \ long\n   period of time.  After an idle period, TCP cannot use the ACK clock\n\
    \   to strobe new segments into the network, as all the ACKs have drained\n  \
    \ from the network.  Therefore, as specified above, TCP can potentially\n   send\
    \ a cwnd-size line-rate burst into the network after an idle\n   period.\n   [Jac88]\
    \ recommends that a TCP use slow start to restart transmission\n   after a relatively\
    \ long idle period.  Slow start serves to restart\n   the ACK clock, just as it\
    \ does at the beginning of a transfer.  This\n   mechanism has been widely deployed\
    \ in the following manner.  When TCP\n   has not received a segment for more than\
    \ one retransmission timeout,\n   cwnd is reduced to the value of the restart\
    \ window (RW) before\n   transmission begins.\n   For the purposes of this standard,\
    \ we define RW = IW.\n   We note that the non-standard experimental extension\
    \ to TCP defined\n   in [AFP98] defines RW = min(IW, cwnd), with the definition\
    \ of IW\n   adjusted per equation (1) above.\n   Using the last time a segment\
    \ was received to determine whether or\n   not to decrease cwnd fails to deflate\
    \ cwnd in the common case of\n   persistent HTTP connections [HTH98].  In this\
    \ case, a WWW server\n   receives a request before transmitting data to the WWW\
    \ browser.  The\n   reception of the request makes the test for an idle connection\
    \ fail,\n   and allows the TCP to begin transmission with a possibly\n   inappropriately\
    \ large cwnd.\n   Therefore, a TCP SHOULD set cwnd to no more than RW before beginning\n\
    \   transmission if the TCP has not sent data in an interval exceeding\n   the\
    \ retransmission timeout.\n"
- title: 4.2 Generating Acknowledgments
  contents:
  - "4.2 Generating Acknowledgments\n   The delayed ACK algorithm specified in [Bra89]\
    \ SHOULD be used by a\n   TCP receiver.  When used, a TCP receiver MUST NOT excessively\
    \ delay\n   acknowledgments.  Specifically, an ACK SHOULD be generated for at\n\
    \   least every second full-sized segment, and MUST be generated within\n   500\
    \ ms of the arrival of the first unacknowledged packet.\n   The requirement that\
    \ an ACK \"SHOULD\" be generated for at least every\n   second full-sized segment\
    \ is listed in [Bra89] in one place as a\n   SHOULD and another as a MUST.  Here\
    \ we unambiguously state it is a\n   SHOULD.  We also emphasize that this is a\
    \ SHOULD, meaning that an\n   implementor should indeed only deviate from this\
    \ requirement after\n   careful consideration of the implications.  See the discussion\
    \ of\n   \"Stretch ACK violation\" in [PAD+98] and the references therein for\
    \ a\n   discussion of the possible performance problems with generating ACKs\n\
    \   less frequently than every second full-sized segment.\n   In some cases, the\
    \ sender and receiver may not agree on what\n   constitutes a full-sized segment.\
    \  An implementation is deemed to\n   comply with this requirement if it sends\
    \ at least one acknowledgment\n   every time it receives 2*RMSS bytes of new data\
    \ from the sender,\n   where RMSS is the Maximum Segment Size specified by the\
    \ receiver to\n   the sender (or the default value of 536 bytes, per [Bra89],\
    \ if the\n   receiver does not specify an MSS option during connection\n   establishment).\
    \  The sender may be forced to use a segment size less\n   than RMSS due to the\
    \ maximum transmission unit (MTU), the path MTU\n   discovery algorithm or other\
    \ factors.  For instance, consider the\n   case when the receiver announces an\
    \ RMSS of X bytes but the sender\n   ends up using a segment size of Y bytes (Y\
    \ < X) due to path MTU\n   discovery (or the sender's MTU size).  The receiver\
    \ will generate\n   stretch ACKs if it waits for 2*X bytes to arrive before an\
    \ ACK is\n   sent.  Clearly this will take more than 2 segments of size Y bytes.\n\
    \   Therefore, while a specific algorithm is not defined, it is desirable\n  \
    \ for receivers to attempt to prevent this situation, for example by\n   acknowledging\
    \ at least every second segment, regardless of size.\n   Finally, we repeat that\
    \ an ACK MUST NOT be delayed for more than 500\n   ms waiting on a second full-sized\
    \ segment to arrive.\n   Out-of-order data segments SHOULD be acknowledged immediately,\
    \ in\n   order to accelerate loss recovery.  To trigger the fast retransmit\n\
    \   algorithm, the receiver SHOULD send an immediate duplicate ACK when\n   it\
    \ receives a data segment above a gap in the sequence space.  To\n   provide feedback\
    \ to senders recovering from losses, the receiver\n   SHOULD send an immediate\
    \ ACK when it receives a data segment that\n   fills in all or part of a gap in\
    \ the sequence space.\n   A TCP receiver MUST NOT generate more than one ACK for\
    \ every incoming\n   segment, other than to update the offered window as the receiving\n\
    \   application consumes new data [page 42, Pos81][Cla82].\n"
- title: 4.3 Loss Recovery Mechanisms
  contents:
  - "4.3 Loss Recovery Mechanisms\n   A number of loss recovery algorithms that augment\
    \ fast retransmit and\n   fast recovery have been suggested by TCP researchers.\
    \  While some of\n   these algorithms are based on the TCP selective acknowledgment\
    \ (SACK)\n   option [MMFR96], such as [FF96,MM96a,MM96b], others do not require\n\
    \   SACKs [Hoe96,FF96,FH98].  The non-SACK algorithms use \"partial\n   acknowledgments\"\
    \ (ACKs which cover new data, but not all the data\n   outstanding when loss was\
    \ detected) to trigger retransmissions.\n   While this document does not standardize\
    \ any of the specific\n   algorithms that may improve fast retransmit/fast recovery,\
    \ these\n   enhanced algorithms are implicitly allowed, as long as they follow\n\
    \   the general principles of the basic four algorithms outlined above.\n   Therefore,\
    \ when the first loss in a window of data is detected,\n   ssthresh MUST be set\
    \ to no more than the value given by equation (3).\n   Second, until all lost\
    \ segments in the window of data in question are\n   repaired, the number of segments\
    \ transmitted in each RTT MUST be no\n   more than half the number of outstanding\
    \ segments when the loss was\n   detected.  Finally, after all loss in the given\
    \ window of segments\n   has been successfully retransmitted, cwnd MUST be set\
    \ to no more than\n   ssthresh and congestion avoidance MUST be used to further\
    \ increase\n   cwnd.  Loss in two successive windows of data, or the loss of a\n\
    \   retransmission, should be taken as two indications of congestion and,\n  \
    \ therefore, cwnd (and ssthresh) MUST be lowered twice in this case.\n   The algorithms\
    \ outlined in [Hoe96,FF96,MM96a,MM6b] follow the\n   principles of the basic four\
    \ congestion control algorithms outlined\n   in this document.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document requires a TCP to diminish its\
    \ sending rate in the\n   presence of retransmission timeouts and the arrival\
    \ of duplicate\n   acknowledgments.  An attacker can therefore impair the performance\
    \ of\n   a TCP connection by either causing data packets or their\n   acknowledgments\
    \ to be lost, or by forging excessive duplicate\n   acknowledgments.  Causing\
    \ two congestion control events back-to-back\n   will often cut ssthresh to its\
    \ minimum value of 2*SMSS, causing the\n   connection to immediately enter the\
    \ slower-performing congestion\n   avoidance phase.\n   The Internet to a considerable\
    \ degree relies on the correct\n   implementation of these algorithms in order\
    \ to preserve network\n   stability and avoid congestion collapse.  An attacker\
    \ could cause TCP\n   endpoints to respond more aggressively in the face of congestion\
    \ by\n   forging excessive duplicate acknowledgments or excessive\n   acknowledgments\
    \ for new data.  Conceivably, such an attack could\n   drive a portion of the\
    \ network into congestion collapse.\n"
- title: 6.  Changes Relative to RFC 2001
  contents:
  - "6.  Changes Relative to RFC 2001\n   This document has been extensively rewritten\
    \ editorially and it is\n   not feasible to itemize the list of changes between\
    \ the two\n   documents. The intention of this document is not to change any of\
    \ the\n   recommendations given in RFC 2001, but to further clarify cases that\n\
    \   were not discussed in detail in 2001. Specifically, this document\n   suggests\
    \ what TCP connections should do after a relatively long idle\n   period, as well\
    \ as specifying and clarifying some of the issues\n   pertaining to TCP ACK generation.\
    \  Finally, the allowable upper bound\n   for the initial congestion window has\
    \ also been raised from one to\n   two segments.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The four algorithms that are described were developed by\
    \ Van\n   Jacobson.\n   Some of the text from this document is taken from \"TCP/IP\n\
    \   Illustrated, Volume 1: The Protocols\" by W. Richard Stevens\n   (Addison-Wesley,\
    \ 1994) and \"TCP/IP Illustrated, Volume 2: The\n   Implementation\" by Gary R.\
    \ Wright and W.  Richard Stevens (Addison-\n   Wesley, 1995).  This material is\
    \ used with the permission of\n   Addison-Wesley.\n   Neal Cardwell, Sally Floyd,\
    \ Craig Partridge and Joe Touch contributed\n   a number of helpful suggestions.\n"
- title: References
  contents:
  - "References\n   [AFP98]  Allman, M., Floyd, S. and C. Partridge, \"Increasing\
    \ TCP's\n            Initial Window Size, RFC 2414, September 1998.\n   [Bra89]\
    \  Braden, R., \"Requirements for Internet Hosts --\n            Communication\
    \ Layers\", STD 3, RFC 1122, October 1989.\n   [Bra97]  Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n            Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [Cla82]  Clark, D., \"Window and Acknowledgment Strategy in\
    \ TCP\", RFC\n            813, July 1982.\n   [FF96]   Fall, K. and S. Floyd,\
    \ \"Simulation-based Comparisons of\n            Tahoe, Reno and SACK TCP\", Computer\
    \ Communication Review,\n            July 1996. ftp://ftp.ee.lbl.gov/papers/sacks.ps.Z.\n\
    \   [FH98]   Floyd, S. and T. Henderson, \"The NewReno Modification to\n     \
    \       TCP's Fast Recovery Algorithm\", RFC 2582, April 1999.\n   [Flo94]  Floyd,\
    \ S., \"TCP and Successive Fast Retransmits. Technical\n            report\",\
    \ October 1994.\n            ftp://ftp.ee.lbl.gov/papers/fastretrans.ps.\n   [Hoe96]\
    \  Hoe, J., \"Improving the Start-up Behavior of a Congestion\n            Control\
    \ Scheme for TCP\", In ACM SIGCOMM, August 1996.\n   [HTH98]  Hughes, A., Touch,\
    \ J. and J. Heidemann, \"Issues in TCP\n            Slow-Start Restart After Idle\"\
    , Work in Progress.\n   [Jac88]  Jacobson, V., \"Congestion Avoidance and Control\"\
    , Computer\n            Communication Review, vol. 18, no. 4, pp. 314-329, Aug.\n\
    \            1988.  ftp://ftp.ee.lbl.gov/papers/congavoid.ps.Z.\n   [Jac90]  Jacobson,\
    \ V., \"Modified TCP Congestion Avoidance Algorithm\",\n            end2end-interest\
    \ mailing list, April 30, 1990.\n            ftp://ftp.isi.edu/end2end/end2end-interest-1990.mail.\n\
    \   [MD90]   Mogul, J. and S. Deering, \"Path MTU Discovery\", RFC 1191,\n   \
    \         November 1990.\n   [MM96a]  Mathis, M. and J. Mahdavi, \"Forward Acknowledgment:\
    \ Refining\n            TCP Congestion Control\", Proceedings of SIGCOMM'96, August,\n\
    \            1996, Stanford, CA.  Available\n            fromhttp://www.psc.edu/networking/papers/papers.html\n\
    \   [MM96b]  Mathis, M. and J. Mahdavi, \"TCP Rate-Halving with Bounding\n   \
    \         Parameters\", Technical report.  Available from\n            http://www.psc.edu/networking/papers/FACKnotes/current.\n\
    \   [MMFR96] Mathis, M., Mahdavi, J., Floyd, S. and A. Romanow, \"TCP\n      \
    \      Selective Acknowledgement Options\", RFC 2018, October 1996.\n   [PAD+98]\
    \ Paxson, V., Allman, M., Dawson, S., Fenner, W., Griner, J.,\n            Heavens,\
    \ I., Lahey, K., Semke, J. and B. Volz, \"Known TCP\n            Implementation\
    \ Problems\", RFC 2525, March 1999.\n   [Pax97]  Paxson, V., \"End-to-End Internet\
    \ Packet Dynamics\",\n            Proceedings of SIGCOMM '97, Cannes, France,\
    \ Sep. 1997.\n   [Pos81]  Postel, J., \"Transmission Control Protocol\", STD 7,\
    \ RFC 793,\n            September 1981.\n   [Ste94]  Stevens, W., \"TCP/IP Illustrated,\
    \ Volume 1: The Protocols\",\n            Addison-Wesley, 1994.\n   [Ste97]  Stevens,\
    \ W., \"TCP Slow Start, Congestion Avoidance, Fast\n            Retransmit, and\
    \ Fast Recovery Algorithms\", RFC 2001, January\n            1997.\n   [WS95]\
    \   Wright, G. and W. Stevens, \"TCP/IP Illustrated, Volume 2:\n            The\
    \ Implementation\", Addison-Wesley, 1995.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mark Allman\n   NASA Glenn Research Center/Sterling Software\n\
    \   Lewis Field\n   21000 Brookpark Rd.  MS 54-2\n   Cleveland, OH  44135\n  \
    \ 216-433-6586\n   EMail: mallman@grc.nasa.gov\n   http://roland.grc.nasa.gov/~mallman\n\
    \   Vern Paxson\n   ACIRI / ICSI\n   1947 Center Street\n   Suite 600\n   Berkeley,\
    \ CA 94704-1198\n   Phone: +1 510/642-4274 x302\n   EMail: vern@aciri.org\n  \
    \ W. Richard Stevens\n   1202 E. Paseo del Zorro\n   Tucson, AZ  85718\n   520-297-9416\n\
    \   EMail: rstevens@kohala.com\n   http://www.kohala.com/~rstevens\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
