- title: __initial_text__
  contents:
  - '            MIME Encapsulation of Macintosh files - MacMIME

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes the format to use when sending Apple Macintosh\n\
    \   files via MIME [BORE93].  The format is compatible with existing\n   mechanisms\
    \ for distributing Macintosh files, while allowing non-\n   Macintosh systems\
    \ access to data in standardized formats.\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   Files on the Macintosh consists of two parts, called forks:\n\
    \   Data fork:       The actual data included in the file.  The Data\n       \
    \             fork is typically the only meaningful part of a\n              \
    \      Macintosh file on a non-Macintosh computer system.\n                  \
    \  For example, if a Macintosh user wants to send a\n                    file\
    \ of data to a user on an IBM-PC, she would only\n                    send the\
    \ Data fork.\n   Resource fork:   Contains a collection of arbitrary attribute/value\n\
    \                    pairs, including program segments, icon bitmaps,\n      \
    \              and parametric values.\n   Additional information regarding Macintosh\
    \ files is stored by the\n   Finder in a hidden file, called the \"Desktop Database\"\
    .\n   Because of the complications in storing different parts of a\n   Macintosh\
    \ file in a non-Macintosh filesystem that only handles\n   consecutive data in\
    \ one part, it is common to convert the Macintosh\n   file into some other format\
    \ before transferring it over the network.\n   The two styles of use are [APPL90]:\n\
    \   AppleSingle:   Apple's standard format for encoding Macintosh files\n    \
    \              as one byte stream.\n   AppleDouble:   Similar to AppleSingle except\
    \ that the Data fork is\n                  separated from the Macintosh-specific\
    \ parts by the\n                  AppleDouble encoding.\n   AppleDouble is the\
    \ preferred format for a Macintosh file that is to\n   be included in an Internet\
    \ mail message, because it provides\n   recipients with Macintosh computers the\
    \ entire document, including\n   Icons and other Macintosh specific information,\
    \ while other users\n   easily can extract the Data fork (the actual data) as\
    \ it is separated\n   from the AppleDouble encoding.\n"
- title: 2.  MIME format for Apple/Macintosh-specific file information
  contents:
  - "2.  MIME format for Apple/Macintosh-specific file information\n   2a.  APPLICATION/APPLEFILE\n\
    \      MIME type-name:            APPLICATION\n      MIME subtype name:      \
    \   APPLEFILE\n      Required parameters:       none\n      Optional parameters:\
    \       NAME, which must be a \"value\" as\n                                 defined\
    \ in RFC-1521 [BORE93].\n      Encoding considerations:   The presence of binary\
    \ data will\n                                 typically require use of\n     \
    \                            Content-Transfer-Encoding: BASE64\n      Security\
    \ considerations:   See separate section in the document\n      Published specification:\
    \   Apple-single & Apple-double [APPL90]\n      Rationale:                 Permits\
    \ MIME-based transmission of\n                                 data with Apple/Macintosh\
    \ specific\n                                 information, while allowing general\n\
    \                                 access to non-specific user data.\n   2b.  MULTIPART/APPLEDOUBLE\n\
    \      MIME type-name:            MULTIPART\n      MIME subtype name:        \
    \ APPLEDOUBLE\n      Required parameters:       none\n      Optional parameters:\
    \       NAME, which must be a \"value\" as\n                                 defined\
    \ in RFC-1521 [BORE93].\n      Encoding considerations:   none\n      Security\
    \ considerations:   See separate section in the document\n      Published specification:\
    \   Apple-single & Apple-double [APPL90]\n      Rationale:                 Permits\
    \ MIME-based transmission of\n                                 data with Apple/Macintosh\
    \ specific\n                                 information, while allowing general\n\
    \                                 access to non-specific user data.\n   2c.  Detail\
    \ specific to MIME-based usage\n      Macintosh documents do not always need to\
    \ be sent in a special\n      format.  Those documents with well-known MIME types\
    \ and\n      non-existent or trivial resource forks can be sent as regular\n \
    \     MIME body parts, without use of AppleSingle or AppleDouble.\n      Documents\
    \ which lack a data fork must be sent as AppleSingle.\n      Unless there are\
    \ strong reasons not to, all other documents\n      should normally be sent as\
    \ AppleDouble.  This includes documents\n      with non-trivial resource forks,\
    \ and documents without\n      corresponding well-known MIME types.\n      It\
    \ may be valuable in some cases to allow the user to choose one\n      format\
    \ over another, either because he disagrees with the\n      implementor's definition\
    \ of \"trivial\" resource forks, or for\n      reasons of his own.\n"
- title: 3.  AppleSingle
  contents:
  - "3.  AppleSingle\n   An AppleSingle, version 2 file, is sent as one consecutive\
    \ stream of\n   bytes.  The format is described in [APPL90] with a brief summary\
    \ in\n   Appendix A. The one and only part of the file is sent in an\n   application/applefile\
    \ message.\n   The first four bytes of an AppleSingle header are, in hexadecimal:\n\
    \   00, 05, 16, 00.\n   The AppleSingle file is binary data.  Hence, it may be\
    \ necessary to\n   perform a Content-Transfer-Encoding for transmission, depending\
    \ on\n   the underlying email transport environment.  The safest encoding is\n\
    \   Base64, since it permits transfer over the most restricted channels.\n   Even\
    \ though an AppleSingle file includes the original Macintosh\n   filename, it\
    \ is recommended that a name parameter be included on the\n   Content-Type header\
    \ to give the recipient a hint as to what file is\n   attached.  The value of\
    \ the name parameter must be a \"value\" as\n   defined by RFC-1521 [BORE93].\
    \  Note that this restricts the value to\n    seven-bit US-ASCII characters.\n\
    \   3a.  AppleSingle example\n      Content-Type: application/applefile; name=\"\
    Computers-1/2-93\"\n          [The AppleSingle file goes here]\n"
- title: 4.  AppleDouble
  contents:
  - "4.  AppleDouble\n   An AppleDouble, version 2, file is divided in two parts:\n\
    \   Header:      including the Macintosh resource fork and desktop\n         \
    \       information and\n   Data fork:   containing the Macintosh data fork.\n\
    \   The AppleDouble format is described in [APPL90] with a brief summary\n   in\
    \ Appendix B.\n   The AppleDouble file itself is sent as a multipart/appledouble\
    \ MIME\n   body-part, which may have only two sub-parts.  The header is sent as\n\
    \   application/applefile and the data fork as whatever best describes\n   it.\
    \  For example, is the data for is actually a GIF image, it should\n   be sent\
    \ as image/gif.  If no appropriate Content-Type has been\n   registered for the\
    \ data type, it should be sent as an\n   application/octet-stream.\n   The first\
    \ four bytes of an AppleDouble header are, in hexadecimal:\n   00, 05, 16, 07.\n\
    \   The AppleDouble header is binary data.  Hence, it may be necessary to\n  \
    \ perform a Content-Transfer-Encoding for transmission, depending on\n   the underlying\
    \ email transport environment.  The safest encoding is\n   Base64, since it permits\
    \ transfer over the most restrictive channels.\n   Even though an AppleDouble\
    \ file includes the original Macintosh\n   filename, it is recommended that a\
    \ name parameter be included on the\n   Content-Type header of both the header\
    \ and data parts of the\n   AppleDouble file to give the recipient a hint as to\
    \ what file is\n   attached.  The value of the name parameter must be a \"value\"\
    \ as\n   defined by RFC-1521 [BORE93].  Note that this restricts the value to\n\
    \   seven-bit US-ASCII characters.\n   4a.  AppleDouble example\n      Content-Type:\
    \ multipart/appledouble; boundary=mac-part\n      --mac-part\n      Content-Type:\
    \ application/applefile; name=\"My-new-car\"\n          [The AppleDouble header\
    \ goes here]\n      --mac-part\n      Content-Type: image/gif;\n          [The\
    \ data fork goes here]\n      --mac-part--\n"
- title: 5.  References
  contents:
  - "5.  References\n   BORE93   Borenstein N., and N. Freed, MIME (Multipurpose Internet\n\
    \            Mail Extensions): Mechanisms for Specifying and Describing\n    \
    \        the Format of Internet Message Bodies, RFC 1521, Bellcore,\n        \
    \    Innosoft, September 1993.\n   APPL90   AppleSingle/AppleDouble Formats for\
    \ Foreign Files\n            Developer's Note, Apple Computer, Inc., 1990\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   To the extent that application/applefile facilitates\
    \ the transmission\n   of operating-system sensitive data, it may open a door\
    \ for easier\n   relaxation of security rules than is intended either by the sender\
    \ of\n   the administrator of the sender's system.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   Thanks to all of the people on the ietf-822 list who\
    \ have provided\n   much meaningful input for this document.  Some of them must\
    \ though be\n   remembered by name, because they have almost crushed my mailbox\
    \ with\n   a very nice and interesting debate:\n      Johan Berglund, Steve Dorner,\
    \ David Gelhar, David Herron, Lee\n      Jones, Raymond Lau, Jamey Maze, John\
    \ B. Melby, Jan Michael\n      Rynning, Rens Troost and Peter Svanberg.\n"
- title: 10.  Authors' Addresses
  contents:
  - "10.  Authors' Addresses\n   Patrik Faltstrom\n   Department of Numerical Analysis\
    \ and Computing Science\n   Royal Institute of Technology\n   S-100 44 Stockholm\n\
    \   Sweden\n   EMail: paf@nada.kth.se\n   Dave Crocker\n   Brandenburg Consulting\n\
    \   675 Spruce Dr.\n   Sunnyvale, CA  94086\n   EMail: dcrocker@mordor.stanford.edu\n\
    \   Erik E. Fair\n   Engineering Computer Operations\n   Apple Computer Inc.\n\
    \   EMail: fair@apple.com\n"
- title: Appendix A.  The AppleSingle format
  contents:
  - "Appendix A.  The AppleSingle format\n   In the AppleSingle format, a file's contents\
    \ and attributes are\n   stored in a single file in the foreign file system. \
    \ For example,\n   both forks of a Macintosh file, the Finder information, and\
    \ an\n   associated comment are arranged in a single file with a simple\n   structure.\n\
    \   An AppleSingle file consists of a header followed by one or more data\n  \
    \ entries.  The header consists of several fixed fields and a list of\n   entry\
    \ descriptors, each pointing to a data entry.  Each entry is\n   optional and\
    \ may or may not appear in the file.\n    AppleSingle file header:\n   Field \
    \              Length\n   Magic number         4 bytes\n   Version number    \
    \   4 bytes\n   Filler              16 bytes\n   Number of entries    2 bytes\n\
    \    Entry descriptor for each entry:\n   Entry ID             4 bytes\n   Offset\
    \               4 bytes\n   Length               4 bytes\n   Byte ordering in\
    \ the file fields follows MC68000 conventions, most\n   significant byte first.\
    \  The fields in the header file follow the\n   conventions described in the following\
    \ sections.\n   Magic number\n      This field, modelled after the UNIX magic\
    \ number feature,\n      specifies the file's format.  Apple has defined the magic\
    \ number\n      for the AppleSingle format as $00051600 or 0x00051600.\n   Version\
    \ number\n      This field denotes the version of AppleSingle format in the event\n\
    \      the format evolves (more fields may be added to the header).  The\n   \
    \   version described in this note is version $00020000 or\n      0x00020000.\n\
    \   Filler\n      This field is all zeros ($00 or 0x00).\n   Number of entries\n\
    \      This field specifies how many different entries are included in\n     \
    \ the file.  It is an unsigned 16-bit number.  If the number of\n      entries\
    \ is any number other than 0, then that number of entry\n      descriptors immediately\
    \ follows the number of entries field.\n   Entry descriptors\n      The entry\
    \ descriptor is made up of the following three fields:\n      Entry ID:   an unsigned\
    \ 32-bit number, defines what the entry is.\n                  Entry IDs range\
    \ from 1 to $FFFFFFFF. Entry ID 0 is\n                  invalid.\n      Offset:\
    \     an unsigned 32-bit number, shows the offset from the\n                 \
    \ beginning of the file to the beginning of the entry's\n                  data.\n\
    \      Length:     an unsigned 32-bit number, shows the length of the\n      \
    \            data in bytes.  The length can be 0.\n   Predefined entry ID's\n\
    \      Apple has defined a set of entry IDs and their values as follows:\n   \
    \   Data Fork              1 Data fork\n      Resource Fork          2 Resource\
    \ fork\n      Real Name              3 File's name as created on home file\n \
    \                              system\n      Comment                4 Standard\
    \ Macintosh comment\n      Icon, B&W              5 Standard Macintosh black and\
    \ white icon\n      Icon, Colour           6 Macintosh colour icon\n      File\
    \ Dates Info        8 File creation date, modification date,\n               \
    \                and so on\n      Finder Info            9 Standard Macintosh\
    \ Finder information\n      Macintosh File Info   10 Macintosh file information,\
    \ attributes\n                               and so on\n      ProDOS File Info\
    \      11 ProDOS file information, attributes and\n                          \
    \     so on\n      MS-DOS File Info      12 MS-DOS file information, attributes\
    \ and\n                               so on\n      Short Name            13 AFP\
    \ short name\n      AFP File Info         14 AFP file, information, attributes\
    \ and so\n                               on\n      Directory ID          15 AFP\
    \ directory ID\n      Apple reserves the range of entry IDs from 1 to $7FFFFFFF.\
    \ The\n      rest of the range is available for applications to define their\n\
    \      own entries.  Apple does not arbitrate the use of the rest of the\n   \
    \   range.\n"
- title: Appendix B.  The AppleDouble format
  contents:
  - "Appendix B.  The AppleDouble format\n   The AppleDouble format uses two files\
    \ to store data, resources and\n   attributes.  The AppleDouble Data file contains\
    \ the data fork and the\n   AppleDouble Header file contains the resource fork.\n\
    \   The AppleDouble Data file contains the standard Macintosh data fork\n   with\
    \ no additional header.  The AppleDouble Header file has exactly\n   the same\
    \ format as the AppleSingle file, except that it does not\n   contain a Data fork\
    \ entry.  The magic number in the AppleDouble\n   Header file differs from the\
    \ magic number in the AppleSingle Header\n   file so that an application can tell\
    \ whether it needs to look in\n   another file for the data fork.  The magic number\
    \ for the AppleDouble\n   format is $00051607 or 0x00051607.\n   The entries in\
    \ the AppleDouble Header file can appear in any order;\n   however, since the\
    \ resource fork is the entry that is most commonly\n   extended (after the data\
    \ fork), Apple recommends that the resource\n   fork entry to be placed last in\
    \ the file.  The data fork is easily\n   extended because it resides by itself\
    \ in the AppleDouble Data file.\n"
- title: Appendix C.  applefile.h
  contents:
  - "Appendix C.  applefile.h\n   This is an example of a header file for the language\
    \ C which can be\n   used when parsing the data in either an AppleSingle file\
    \ or\n   AppleDouble header.\n   The file is written by Lee Jones.  Distribution\
    \ is unlimited.\n   /* applefile.h - Data structures used by AppleSingle/AppleDouble\n\
    \    * file format\n    *\n    * Written by Lee Jones, 22-Oct-1993\n    *\n  \
    \  * For definitive information, see \"AppleSingle/AppleDouble\n    * Formats\
    \ for Foreign Files Developer's Note\"; Apple Computer\n    * Inc.; (c) 1990.\n\
    \    *\n    * Other details were added from:\n    *   Inside Macintosh [old version],\
    \ volumes II to VI,\n    *   Apple include files supplied with Think C 5.0.1,\n\
    \    *   Microsoft MS-DOS Programmer's Reference, version 5, and\n    *   Microsoft\
    \ C 6.00a's dos.h include file.\n    *\n    * I don't have ProDOS or AFP Server\
    \ documentation so related\n    * entries may be a bit skimpy.\n    *\n    * Edit\
    \ history:\n    *\n    * when       who  why\n    * ---------  ---  ------------------------------------------\n\
    \    * 22-Oct-93  LMJ  Pull together from Inside Macintosh,\n    *           \
    \      Developer's Note, etc\n    * 26-Oct-93  LMJ  Finish writing first version\
    \ and list\n    *                 references\n    * 06-Feb-94  EEF  Very minor\
    \ cleanup\n    */\n   /* Following items define machine specific size (for porting).\
    \ */\n   typedef char            xchar8;         /* 8-bit field */\n   typedef\
    \ char            schar8;         /* signed 8-bit field */\n   typedef unsigned\
    \ char   uchar8;         /* unsigned 8-bit field */\n   typedef short        \
    \   xint16;         /* 16-bit field */\n   typedef unsigned short  uint16;   \
    \      /* unsigned 16-bit field */\n   typedef long            xint32;       \
    \  /* 32-bit field */\n   typedef long            sint32;         /* signed 32-bit\
    \ field */\n   typedef unsigned long   uint32;         /* unsigned 32-bit field\
    \ */\n   /* REMINDER: the Motorola 680x0 is a big-endian architecture! */\n  \
    \ typedef uint32 OSType;                  /* 32 bit field */\n   /* In the QuickDraw\
    \ coordinate plane, each coordinate is\n    * -32767..32767. Each point is at\
    \ the intersection of a\n    * horizontal grid line and a vertical grid line.\
    \  Horizontal\n    * coordinates increase from left to right. Vertical\n    *\
    \ coordinates increase from top to bottom. This is the way\n    * both a TV screen\
    \ and page of English text are scanned:\n    * from top left to bottom right.\n\
    \    */\n   struct Point /* spot in QuickDraw 2-D grid */\n   {\n       xint16\
    \ v; /* vertical coordinate */\n       xint16 h; /* horizontal coordinate */\n\
    \   }; /* Point */\n   typedef struct Point Point;\n   /* See older Inside Macintosh,\
    \ Volume II page 84 or Volume IV\n    * page 104.\n    */\n   struct FInfo /*\
    \ Finder information */\n   {\n       OSType fdType; /* File type, 4 ASCII chars\
    \ */\n       OSType fdCreator; /* File's creator, 4 ASCII chars */\n       uint16\
    \ fdFlags; /* Finder flag bits */\n       Point  fdLocation; /* file's location\
    \ in folder */\n       xint16 fdFldr; /* file 's folder (aka window) */\n   };\
    \ /* FInfo */\n   typedef struct FInfo FInfo;\n   /*\n    * Masks for finder flag\
    \ bits (field fdFlags in struct\n    * FInfo).\n    */\n   #define F_fOnDesk \
    \      0x0001 /* file is on desktop (HFS only) */\n   #define F_maskColor    \
    \ 0x000E /* color coding (3 bits) */\n   /*                      0x0010 /* reserved\
    \ (System 7) */\n   #define F_fSwitchLaunch 0x0020 /* reserved (System 7) */\n\
    \   #define F_fShared       0x0040 /* appl available to multiple users */\n  \
    \ #define F_fNoINITs      0x0080 /* file contains no INIT resources */\n   #define\
    \ F_fBeenInited   0x0100 /* Finder has loaded bundle res. */\n   /*          \
    \            0x0200  /* reserved (System 7) */\n   #define F_fCustomIcom   0x0400\
    \ /* file contains custom icon */\n   #define F_fStationary   0x0800 /* file is\
    \ a stationary pad */\n   #define F_fNameLocked   0x1000 /* file can't be renamed\
    \ by Finder */\n   #define F_fHasBundle    0x2000 /* file has a bundle */\n  \
    \ #define F_fInvisible    0x4000 /* file's icon is invisible */\n   #define F_fAlias\
    \        0x8000 /* file is an alias file (System 7) */\n   /* See older Inside\
    \ Macintosh, Volume IV, page 105.\n    */\n   struct FXInfo /* Extended finder\
    \ information */\n   {\n       xint16 fdIconID; /* icon ID number */\n       xint16\
    \ fdUnused[3]; /* spare */\n       schar8 fdScript; /* scrip flag and code */\n\
    \       schar8 fdXFlags; /* reserved */\n       xint16 fdComment; /* comment ID\
    \ number */\n       xint32 fdPutAway; /* home directory ID */\n   }; /* FXInfo\
    \ */\n   typedef struct FXInfo FXInfo;\n   /* Pieces used by AppleSingle & AppleDouble\
    \ (defined later). */\n   struct ASHeader /* header portion of AppleSingle */\n\
    \   {\n               /* AppleSingle = 0x00051600; AppleDouble = 0x00051607 */\n\
    \       uint32 magicNum; /* internal file type tag */\n       uint32 versionNum;\
    \ /* format version: 2 = 0x00020000 */\n       uchar8 filler[16]; /* filler, currently\
    \ all bits 0 */\n       uint16 numEntries; /* number of entries which follow */\n\
    \   }; /* ASHeader */\n   typedef struct ASHeader ASHeader;\n   struct ASEntry\
    \ /* one AppleSingle entry descriptor */\n   {\n       uint32 entryID; /* entry\
    \ type: see list, 0 invalid */\n       uint32 entryOffset; /* offset, in octets,\
    \ from beginning */\n                                   /* of file to this entry's\
    \ data */\n       uint32 entryLength; /* length of data in octets */\n   }; /*\
    \ ASEntry */\n   typedef struct ASEntry ASEntry;\n   /* Apple reserves the range\
    \ of entry IDs from 1 to 0x7FFFFFFF.\n    * Entry ID 0 is invalid.  The rest of\
    \ the range is available\n    * for applications to define their own entry types.\
    \  \"Apple does\n    * not arbitrate the use of the rest of the range.\"\n   \
    \ */\n   #define AS_DATA         1 /* data fork */\n   #define AS_RESOURCE   \
    \  2 /* resource fork */\n   #define AS_REALNAME     3 /* File's name on home\
    \ file system */\n   #define AS_COMMENT      4 /* standard Mac comment */\n  \
    \ #define AS_ICONBW       5 /* Mac black & white icon */\n   #define AS_ICONCOLOR\
    \    6 /* Mac color icon */\n           /*              7       /* not used */\n\
    \   #define AS_FILEDATES    8 /* file dates; create, modify, etc */\n   #define\
    \ AS_FINDERINFO   9 /* Mac Finder info & extended info */\n   #define AS_MACINFO\
    \      10 /* Mac file info, attributes, etc */\n   #define AS_PRODOSINFO   11\
    \ /* Pro-DOS file info, attrib., etc */\n   #define AS_MSDOSINFO    12 /* MS-DOS\
    \ file info, attributes, etc */\n   #define AS_AFPNAME      13 /* Short name on\
    \ AFP server */\n   #define AS_AFPINFO      14 /* AFP file info, attrib., etc\
    \ */\n   #define AS_AFPDIRID     15 /* AFP directory ID */\n   /* matrix of entry\
    \ types and their usage:\n    *\n    *                   Macintosh    Pro-DOS\
    \    MS-DOS    AFP server\n    *                   ---------    -------    ------\
    \    ----------\n    *  1   AS_DATA         xxx         xxx       xxx        \
    \ xxx\n    *  2   AS_RESOURCE     xxx         xxx\n    *  3   AS_REALNAME    \
    \ xxx         xxx       xxx         xxx\n    *\n    *  4   AS_COMMENT      xxx\n\
    \    *  5   AS_ICONBW       xxx\n    *  6   AS_ICONCOLOR    xxx\n    *\n    *\
    \  8   AS_FILEDATES    xxx         xxx       xxx         xxx\n    *  9   AS_FINDERINFO\
    \   xxx\n    * 10   AS_MACINFO      xxx\n    *\n    * 11   AS_PRODOSINFO     \
    \          xxx\n    * 12   AS_MSDOSINFO                          xxx\n    *\n\
    \    * 13   AS_AFPNAME                                        xxx\n    * 14  \
    \ AS_AFPINFO                                        xxx\n    * 15   AS_AFPDIRID\
    \                                       xxx\n    */\n   /* entry ID 1, data fork\
    \ of file - arbitrary length octet string */\n   /* entry ID 2, resource fork\
    \ - arbitrary length opaque octet string;\n    *              as created and managed\
    \ by Mac O.S. resoure manager\n    */\n   /* entry ID 3, file's name as created\
    \ on home file system - arbitrary\n    *              length octet string; usually\
    \ short, printable ASCII\n    */\n   /* entry ID 4, standard Macintosh comment\
    \ - arbitrary length octet\n    *              string; printable ASCII, claimed\
    \ 200 chars or less\n    */\n   /* This is probably a simple duplicate of the\
    \ 128 octet bitmap\n    * stored as the 'ICON' resource or the icon element from\
    \ an 'ICN#'\n    * resource.\n    */\n   struct ASIconBW /* entry ID 5, standard\
    \ Mac black and white icon */\n   {\n       uint32 bitrow[32]; /* 32 rows of 32\
    \ 1-bit pixels */\n   }; /* ASIconBW */\n   typedef struct ASIconBW ASIconBW;\n\
    \   /* entry ID 6, \"standard\" Macintosh color icon - several competing\n   \
    \ *              color icons are defined.  Given the copyright dates\n    * of\
    \ the Inside Macintosh volumes, the 'cicn' resource predominated\n    * when the\
    \ AppleSingle Developer's Note was written (most probable\n    * candidate). \
    \ See Inside Macintosh, Volume V, pages 64 & 80-81 for\n    * a description of\
    \ 'cicn' resources.\n    *\n    * With System 7, Apple introduced icon families.\
    \  They consist of:\n    *      large (32x32) B&W icon, 1-bit/pixel,    type 'ICN#',\n\
    \    *      small (16x16) B&W icon, 1-bit/pixel,    type 'ics#',\n    *      large\
    \ (32x32) color icon, 4-bits/pixel, type 'icl4',\n    *      small (16x16) color\
    \ icon, 4-bits/pixel, type 'ics4',\n    *      large (32x32) color icon, 8-bits/pixel,\
    \ type 'icl8', and\n    *      small (16x16) color icon, 8-bits/pixel, type 'ics8'.\n\
    \    * If entry ID 6 is one of these, take your pick.  See Inside\n    * Macintosh,\
    \ Volume VI, pages 2-18 to 2-22 and 9-9 to 9-13, for\n    * descriptions.\n  \
    \  */\n   /* entry ID 7, not used */\n   /* Times are stored as a \"signed number\
    \ of seconds before of after\n    * 12:00 a.m. (midnight), January 1, 2000 Greenwich\
    \ Mean Time (GMT).\n    * Applications must convert to their native date and time\n\
    \    * conventions.\" Any unknown entries are set to 0x80000000\n    * (earliest\
    \ reasonable time).\n    */\n   struct ASFileDates      /* entry ID 8, file dates\
    \ info */\n   {\n       sint32 create; /* file creation date/time */\n       sint32\
    \ modify; /* last modification date/time */\n       sint32 backup; /* last backup\
    \ date/time */\n       sint32 access; /* last access date/time */\n   }; /* ASFileDates\
    \ */\n   typedef struct ASFileDates ASFileDates;\n   /* See older Inside Macintosh,\
    \ Volume II, page 115 for\n    * PBGetFileInfo(), and Volume IV, page 155, for\
    \ PBGetCatInfo().\n    */\n   /* entry ID 9, Macintosh Finder info & extended\
    \ info */\n   struct ASFinderInfo\n   {\n       FInfo ioFlFndrInfo; /* PBGetFileInfo()\
    \ or PBGetCatInfo() */\n       FXInfo ioFlXFndrInfo; /* PBGetCatInfo() (HFS only)\
    \ */\n   }; /* ASFinderInfo */\n   typedef struct ASFinderInfo ASFinderInfo;\n\
    \   struct ASMacInfo        /* entry ID 10, Macintosh file information */\n  \
    \ {\n       uchar8 filler[3]; /* filler, currently all bits 0 */\n       uchar8\
    \ ioFlAttrib; /* PBGetFileInfo() or PBGetCatInfo() */\n   }; /* ASMacInfo */\n\
    \   typedef struct ASMacInfo ASMacInfo;\n   #define AS_PROTECTED    0x0002 /*\
    \ protected bit */\n   #define AS_LOCKED       0x0001 /* locked bit */\n   /*\
    \ NOTE: ProDOS-16 and GS/OS use entire fields.  ProDOS-8 uses low\n    * order\
    \ half of each item (low byte in access & filetype, low word\n    * in auxtype);\
    \ remainder of each field should be zero filled.\n    */\n   struct ASProdosInfo\
    \     /* entry ID 11, ProDOS file information */\n   {\n       uint16 access;\
    \ /* access word */\n       uint16 filetype; /* file type of original file */\n\
    \       uint32 auxtype; /* auxiliary type of the orig file */\n   }; /* ASProDosInfo\
    \ */\n   typedef struct ASProdosInfo ASProdosInfo;\n   /* MS-DOS file attributes\
    \ occupy 1 octet; since the Developer Note\n    * is unspecific, I've placed them\
    \ in the low order portion of the\n    * field (based on example of other ASMacInfo\
    \ & ASProdosInfo).\n    */\n   struct ASMsdosInfo      /* entry ID 12, MS-DOS\
    \ file information */\n   {\n       uchar8 filler; /* filler, currently all bits\
    \ 0 */\n       uchar8 attr; /* _dos_getfileattr(), MS-DOS */\n               \
    \                    /* interrupt 21h function 4300h */\n   }; /* ASMsdosInfo\
    \ */\n   typedef struct ASMsdosInfo ASMsdosInfo;\n   #define AS_DOS_NORMAL   0x00\
    \ /* normal file (all bits clear) */\n   #define AS_DOS_READONLY 0x01 /* file\
    \ is read-only */\n   #define AS_DOS_HIDDEN   0x02 /* hidden file (not shown by\
    \ DIR) */\n   #define AS_DOS_SYSTEM   0x04 /* system file (not shown by DIR) */\n\
    \   #define AS_DOS_VOLID    0x08 /* volume label (only in root dir) */\n   #define\
    \ AS_DOS_SUBDIR   0x10 /* file is a subdirectory */\n   #define AS_DOS_ARCHIVE\
    \  0x20 /* new or modified (needs backup) */\n   /* entry ID 13, short file name\
    \ on AFP server - arbitrary length\n    *              octet string; usualy printable\
    \ ASCII starting with\n    *              '!' (0x21)\n    */\n   struct ASAfpInfo\
    \   /* entry ID 12, AFP server file information */\n   {\n       uchar8 filler[3];\
    \ /* filler, currently all bits 0 */\n       uchar8 attr; /* file attributes */\n\
    \   }; /* ASAfpInfo */\n   typedef struct ASAfpInfo ASAfpInfo;\n   #define AS_AFP_Invisible\
    \    0x01 /* file is invisible */\n   #define AS_AFP_MultiUser    0x02 /* simultaneous\
    \ access allowed */\n   #define AS_AFP_System       0x04 /* system file */\n \
    \  #define AS_AFP_BackupNeeded 0x40 /* new or modified (needs backup) */\n   struct\
    \ ASAfpDirId       /* entry ID 15, AFP server directory ID */\n   {\n       uint32\
    \ dirid; /* file's directory ID on AFP server */\n   }; /* ASAfpDirId */\n   typedef\
    \ struct ASAfpDirId ASAfpDirId;\n   /*\n    * The format of an AppleSingle/AppleDouble\
    \ header\n    */\n   struct AppleSingle /* format of disk file */\n   {\n    \
    \   ASHeader header; /* AppleSingle header part */\n       ASEntry  entry[1];\
    \ /* array of entry descriptors */\n   /* uchar8  filedata[];          /* followed\
    \ by rest of file */\n   }; /* AppleSingle */\n   typedef struct AppleSingle AppleSingle;\n\
    \   /*\n    * FINAL REMINDER: the Motorola 680x0 is a big-endian architecture!\n\
    \    */\n   /* End of applefile.h */\n"
