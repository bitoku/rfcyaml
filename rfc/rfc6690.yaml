- contents:
  - '          Constrained RESTful Environments (CoRE) Link Format

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This specification defines Web Linking using a link format for use
    by\n   constrained web servers to describe hosted resources, their\n   attributes,
    and other relationships between links.  Based on the HTTP\n   Link Header field
    defined in RFC 5988, the Constrained RESTful\n   Environments (CoRE) Link Format
    is carried as a payload and is\n   assigned an Internet media type.  \"RESTful\"
    refers to the\n   Representational State Transfer (REST) architecture.  A well-known\n
    \  URI is defined as a default entry point for requesting the links\n   hosted
    by a server.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6690.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Web Linking in CoRE ........................................3\n      1.2.
    Use Cases ..................................................4\n           1.2.1.
    Discovery ...........................................4\n           1.2.2. Resource
    Collections ................................5\n           1.2.3. Resource Directory
    ..................................5\n      1.3. Terminology ................................................6\n
    \  2. Link Format .....................................................6\n      2.1.
    Target and Context URIs ....................................8\n      2.2. Link
    Relations .............................................8\n      2.3. Use of Anchors
    .............................................9\n   3. CoRE Link Attributes ............................................9\n
    \     3.1. Resource Type 'rt' Attribute ...............................9\n      3.2.
    Interface Description 'if' Attribute ......................10\n      3.3. Maximum
    Size Estimate 'sz' Attribute ......................10\n   4. Well-Known Interface
    ...........................................10\n      4.1. Query Filtering ...........................................12\n
    \  5. Examples .......................................................13\n   6.
    Security Considerations ........................................15\n   7. IANA
    Considerations ............................................16\n      7.1. Well-Known
    'core' URI .....................................16\n      7.2. New 'hosts' Relation
    Type .................................16\n      7.3. New 'link-format' Internet
    Media Type .....................17\n      7.4. Constrained RESTful Environments
    (CoRE) Parameters\n           Registry ..................................................18\n
    \  8. Acknowledgments ................................................19\n   9.
    References .....................................................20\n      9.1.
    Normative References ......................................20\n      9.2. Informative
    References ....................................20\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Constrained RESTful Environments (CoRE) realizes the\n
    \  Representational State Transfer (REST) architecture [REST] in a\n   suitable
    form for the most constrained nodes (e.g., 8-bit\n   microcontrollers with limited
    memory) and networks (e.g., IPv6 over\n   Low-Power Wireless Personal Area Networks
    (6LoWPANs) [RFC4919]).\n   CoRE is aimed at Machine-to-Machine (M2M) applications
    such as smart\n   energy and building automation.\n   The discovery of resources
    hosted by a constrained server is very\n   important in machine-to-machine applications
    where there are no\n   humans in the loop and static interfaces result in fragility.
    \ The\n   discovery of resources provided by an HTTP [RFC2616] web server is\n
    \  typically called \"Web Discovery\" and the description of relations\n   between
    resources is called \"Web Linking\" [RFC5988].  In the present\n   specification,
    we refer to the discovery of resources hosted by a\n   constrained web server,
    their attributes, and other resource\n   relations as CoRE Resource Discovery.\n
    \  The main function of such a discovery mechanism is to provide\n   Universal
    Resource Identifiers (URIs, called links) for the resources\n   hosted by the
    server, complemented by attributes about those\n   resources and possible further
    link relations.  In CoRE, this\n   collection of links is carried as a resource
    of its own (as opposed\n   to HTTP headers delivered with a specific resource).
    \ This document\n   specifies a link format for use in CoRE Resource Discovery
    by\n   extending the HTTP Link Header format [RFC5988] to describe these\n   link
    descriptions.  The CoRE Link Format is carried as a payload and\n   is assigned
    an Internet media type.  A well-known relative URI\n   \"/.well-known/core\" is
    defined as a default entry point for\n   requesting the list of links about resources
    hosted by a server and\n   thus performing CoRE Resource Discovery.  This specification
    is\n   applicable for use with Constrained Application Protocol (CoAP)\n   [COAP],
    HTTP, or any other suitable web transfer protocol.  The link\n   format can also
    be saved in file format.\n"
  - contents:
    - "1.1.  Web Linking in CoRE\n   Technically, the CoRE Link Format is a serialization
      of a typed link\n   as specified in [RFC5988], used to describe relationships
      between\n   resources, so-called \"Web Linking\".  In this specification, Web\n
      \  Linking is extended with specific constrained M2M attributes; links\n   are
      carried as a message payload rather than in an HTTP Link Header\n   field, and
      a default interface is defined to discover resources\n   hosted by a server.
      \ This specification also defines a new relation\n   type \"hosts\" (from the
      verb \"to host\"), which indicates that the\n   resource is hosted by the server
      from which the link document was\n   requested.\n   In HTTP, the Link Header
      can be used to carry link information about\n   a resource along with an HTTP
      response.  This works well for the\n   typical use case for a web server and
      browser, where further\n   information about a particular resource is useful
      after accessing it.\n   In CoRE, the main use case for Web Linking is the discovery
      of which\n   resources a server hosts in the first place.  Although some resources\n
      \  may have further links associated with them, this is expected to be\n   an
      exception.  For that reason, the CoRE Link Format serialization is\n   carried
      as a resource representation of a well-known URI.  The CoRE\n   Link Format
      does reuse the format of the HTTP Link Header\n   serialization defined in [RFC5988].\n"
    title: 1.1.  Web Linking in CoRE
  - contents:
    - "1.2.  Use Cases\n   Typical use cases for Web Linking on today's web include,
      e.g.,\n   describing the author of a web page or describing relations between\n
      \  web pages (next chapter, previous chapter, etc.).  Web Linking can\n   also
      be applied to M2M applications, where typed links are used to\n   assist a machine
      client in finding and understanding how to use\n   resources on a server.  In
      this section a few use cases are described\n   for how the CoRE Link Format
      could be used in M2M applications.  For\n   further technical examples, see
      Section 5.  As there is a large range\n   of M2M applications, these use cases
      are purposely generic.  This\n   specification assumes that different deployments
      or application\n   domains will define the appropriate REST Interface Descriptions
      along\n   with Resource Types to make discovery meaningful.\n"
    - contents:
      - "1.2.1.  Discovery\n   In M2M applications, for example, home or building
        automation, there\n   is a need for local clients and servers to find and
        interact with\n   each other without human intervention.  The CoRE Link Format
        can be\n   used by servers in such environments to enable Resource Discovery
        of\n   the resources hosted by the server.\n   Resource Discovery can be performed
        either unicast or multicast.\n   When a server's IP address is already known,
        either a priori or\n   resolved via the Domain Name System (DNS) [RFC1034][RFC1035],
        unicast\n   discovery is performed in order to locate the entry point to the\n
        \  resource of interest.  In this specification, this is performed using\n
        \  a GET to \"/.well-known/core\" on the server, which returns a payload\n
        \  in the CoRE Link Format.  A client would then match the appropriate\n   Resource
        Type, Interface Description, and possible media type\n   [RFC2045] for its
        application.  These attributes may also be included\n   in the query string
        in order to filter the number of links returned\n   in a response.\n   Multicast
        Resource Discovery is useful when a client needs to locate\n   a resource
        within a limited scope, and that scope supports IP\n   multicast.  A GET request
        to the appropriate multicast address is\n   made for \"/.well-known/core\".
        \ In order to limit the number and size\n   of responses, a query string is
        recommended with the known\n   attributes.  Typically, a resource would be
        discovered based on its\n   Resource Type and/or Interface Description, along
        with possible\n   application-specific attributes.\n"
      title: 1.2.1.  Discovery
    - contents:
      - "1.2.2.  Resource Collections\n   RESTful designs of M2M interfaces often
        make use of collections of\n   resources.  For example, an index of temperature
        sensors on a data\n   collection node or a list of alarms on a home security
        controller.\n   The CoRE Link Format can be used to make it possible to find
        the\n   entry point to a collection and traverse its members.  The entry\n
        \  point of a collection would always be included in \"/.well-known/core\"\n
        \  to enable its discovery.  The members of the collection can be\n   defined
        either through the Interface Description of the resource\n   along with a
        parameter resource for the size of the collection or by\n   using the link
        format to describe each resource in the collection.\n   These links could
        be located under \"/.well-known/core\" or hosted, for\n   example, in the
        root resource of the collection.\n"
      title: 1.2.2.  Resource Collections
    - contents:
      - "1.2.3.  Resource Directory\n   In many deployment scenarios, for example,
        constrained networks with\n   sleeping servers or large M2M deployments with
        bandwidth limited\n   access networks, it makes sense to deploy resource directory
        entities\n   that store links to resources stored on other servers.  Think
        of this\n   as a limited search engine for constrained M2M resources.\n   The
        CoRE Link Format can be used by a server to register resources\n   with a
        resource directory or to allow a resource directory to poll\n   for resources.
        \ Resource registration can be achieved by having each\n   server POST their
        resources to \"/.well-known/core\" on the resource\n   directory.  This, in
        turn, adds links to the resource directory under\n   an appropriate resource.
        \ These links can then be discovered by any\n   client by making a request
        to a resource directory lookup interface.\n"
      title: 1.2.3.  Resource Directory
    title: 1.2.  Use Cases
  - contents:
    - "1.3.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   specification are to be interpreted as described in
      [RFC2119].\n   This specification makes use of the Augmented Backus-Naur Form
      (ABNF)\n   [RFC5234] notation, including the core rules defined in Appendix
      B of\n   that document.\n   This specification requires readers to be familiar
      with all the terms\n   and concepts that are discussed in [RFC5988] and [RFC6454].
      \ In\n   addition, this specification makes use of the following terminology:\n
      \  Web Linking\n      A framework for indicating the relationships between web\n
      \     resources.\n   Link\n      Also called \"typed links\" in [RFC5988].  A
      link is a typed\n      connection between two resources identified by URI and
      is made up\n      of a context URI, a link relation type, a target URI, and
      optional\n      target attributes.\n   Link Format\n      A particular serialization
      of typed links.\n   CoRE Link Format\n      A particular serialization of typed
      links based on the HTTP Link\n      Header field serialization defined in Section
      5 of [RFC5988] but\n      carried as a resource representation with a media
      type.\n   Attribute\n      Properly called \"Target Attribute\" in [RFC5988].
      \ A key/value pair\n      that describes the link or its target.\n   CoRE Resource
      Discovery\n      When a client discovers the list of resources hosted by a server,\n
      \     their attributes, and other link relations by accessing\n      \"/.well-known/core\".\n"
    title: 1.3.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Link Format\n   The CoRE Link Format extends the HTTP Link Header field specified
    in\n   [RFC5988].  The format does not require special XML or binary\n   parsing,
    is fairly compact, and is extensible -- all important\n   characteristics for
    CoRE.  It should be noted that this link format\n   is just one serialization
    of typed links defined in [RFC5988]; others\n   include HTML links, Atom feed
    links [RFC4287], or HTTP Link Header\n   fields.  It is expected that resources
    discovered in the CoRE Link\n   Format may also be made available in alternative
    formats on the\n   greater Internet.  The CoRE Link Format is only expected to
    be\n   supported in constrained networks and M2M systems.\n   Section 5 of [RFC5988]
    did not require an Internet media type for the\n   defined link format, as it
    was defined to be carried in an HTTP\n   header.  This specification thus defines
    the Internet media type\n   'application/link-format' for the CoRE Link Format
    (see Section 7.3).\n   Whereas the HTTP Link Header field depends on [RFC2616]
    for its\n   encoding, the CoRE Link Format is encoded as UTF-8 [RFC3629].  A\n
    \  decoder of the format is not expected to validate UTF-8 encoding (but\n   is
    not prohibited from doing so) and doesn't need to perform any\n   UTF-8 normalization.
    \ UTF-8 data can be compared bitwise, which\n   allows values to contain UTF-8
    data without any added complexity for\n   constrained nodes.\n   The CoRE Link
    Format is equivalent to the [RFC5988] link format;\n   however, the ABNF in the
    present specification is repeated with\n   improvements to be compliant with [RFC5234]
    and includes new link\n   parameters.  The link parameter \"href\" is reserved
    for use as a query\n   parameter for filtering in this specification (see Section
    4.1) and\n   MUST NOT be defined as a link parameter.  As in [RFC5988], multiple\n
    \  link descriptions are separated by commas.  Note that commas can also\n   occur
    in quoted strings and URIs but do not end a description.  In\n   order to convert
    an HTTP Link Header field to this link format, first\n   the \"Link:\" HTTP header
    is removed, any linear whitespace (LWS) is\n   removed, the header value is converted
    to UTF-8, and any percent-\n   encodings are decoded.\n    Link            = link-value-list\n
    \   link-value-list = [ link-value *[ \",\" link-value ]]\n    link-value     =
    \"<\" URI-Reference \">\" *( \";\" link-param )\n    link-param     = ( ( \"rel\"
    \"=\" relation-types )\n                   / ( \"anchor\" \"=\" DQUOTE URI-Reference
    DQUOTE )\n                   / ( \"rev\" \"=\" relation-types )\n                   /
    ( \"hreflang\" \"=\" Language-Tag )\n                   / ( \"media\" \"=\" (
    MediaDesc\n                          / ( DQUOTE MediaDesc DQUOTE ) ) )\n                   /
    ( \"title\" \"=\" quoted-string )\n                   / ( \"title*\" \"=\" ext-value
    )\n                   / ( \"type\" \"=\" ( media-type / quoted-mt ) )\n                   /
    ( \"rt\" \"=\" relation-types )\n                   / ( \"if\" \"=\" relation-types
    )\n                   / ( \"sz\" \"=\" cardinal )\n                   / ( link-extension
    ) )\n    link-extension = ( parmname [ \"=\" ( ptoken / quoted-string ) ] )\n
    \                  / ( ext-name-star \"=\" ext-value )\n    ext-name-star  = parmname
    \"*\" ; reserved for RFC-2231-profiled\n                                  ; extensions.
    \ Whitespace NOT\n                                  ; allowed in between.\n    ptoken
    \        = 1*ptokenchar\n    ptokenchar     = \"!\" / \"#\" / \"$\" / \"%\" /
    \"&\" / \"'\" / \"(\"\n                   / \")\" / \"*\" / \"+\" / \"-\" / \".\"
    / \"/\" / DIGIT\n                   / \":\" / \"<\" / \"=\" / \">\" / \"?\" /
    \"@\" / ALPHA\n                   / \"[\" / \"]\" / \"^\" / \"_\" / \"`\" / \"{\"
    / \"|\"\n                   / \"}\" / \"~\"\n    media-type     = type-name \"/\"
    subtype-name\n    quoted-mt      = DQUOTE media-type DQUOTE\n    relation-types
    = relation-type\n                   / DQUOTE relation-type *( 1*SP relation-type
    ) DQUOTE\n    relation-type  = reg-rel-type / ext-rel-type\n    reg-rel-type   =
    LOALPHA *( LOALPHA / DIGIT / \".\" / \"-\" )\n    ext-rel-type   = URI\n    cardinal
    \      = \"0\" / ( %x31-39 *DIGIT )\n    LOALPHA        = %x61-7A   ; a-z\n    quoted-string
    \ = <defined in [RFC2616]>\n    URI            = <defined in [RFC3986]>\n    URI-Reference
    \ = <defined in [RFC3986]>\n    type-name      = <defined in [RFC4288]>\n    subtype-name
    \  = <defined in [RFC4288]>\n    MediaDesc      = <defined in [W3C.HTML.4.01]>\n
    \   Language-Tag   = <defined in [RFC5646]>\n    ext-value      = <defined in
    [RFC5987]>\n    parmname       = <defined in [RFC5987]>\n"
  - contents:
    - "2.1.  Target and Context URIs\n   Each link conveys one target URI as a URI-reference
      inside angle\n   brackets (\"<>\").  The context URI of a link (also called
      the base URI\n   in [RFC3986]) is determined by the following rules in this\n
      \  specification:\n   (a)  The context URI is set to the anchor parameter, when
      specified.\n   (b)  Origin of the target URI, when specified.\n   (c)  Origin
      of the link format resource's base URI.\n"
    title: 2.1.  Target and Context URIs
  - contents:
    - "2.2.  Link Relations\n   Since links in the CoRE Link Format are typically
      used to describe\n   resources hosted by a server, the new relation type \"hosts\"
      is\n   assumed in the absence of the relation parameter (see Section 7.2).\n
      \  The \"hosts\" relation type (from the verb \"to host\") indicates that\n
      \  the target URI is a resource hosted by the server (i.e., server hosts\n   resource)
      indicated by the context URI.  The target URI MUST be a\n   relative URI of
      the context URI for this relation type.\n   To express other relations, links
      can make use of any registered\n   relation by including the relation parameter.
      \ The context of a\n   relation can be defined using the anchor parameter.  In
      this way,\n   relations between resources hosted on a server or between hosted\n
      \  resources and external resources can be expressed.\n"
    title: 2.2.  Link Relations
  - contents:
    - "2.3.  Use of Anchors\n   As per Section 5.2 of [RFC5988], a link description
      MAY include an\n   \"anchor\" parameter, in which case the context is the URI
      included in\n   that attribute.  This is used to describe a relationship between
      two\n   resources.  A consuming implementation can, however, choose to ignore\n
      \  such links.  It is not expected that all implementations will be able\n   to
      derive useful information from explicitly anchored links.\n"
    title: 2.3.  Use of Anchors
  title: 2.  Link Format
- contents:
  - "3.  CoRE Link Attributes\n   The following CoRE-specific target attributes are
    defined in addition\n   to those already defined in [RFC5988].  These attributes
    describe\n   information useful in accessing the target link of the relation and,\n
    \  in some cases, can use the syntactical form of a URI.  Such a URI MAY\n   be
    dereferenced (for instance, to obtain a description of the link\n   relation),
    but that is not part of the protocol and MUST NOT be done\n   automatically on
    link evaluation.  When the values of attributes are\n   compared, they MUST be
    compared as strings.\n"
  - contents:
    - "3.1.  Resource Type 'rt' Attribute\n   The Resource Type 'rt' attribute is
      an opaque string used to assign\n   an application-specific semantic type to
      a resource.  One can think\n   of this as a noun describing the resource.  In
      the case of a\n   temperature resource, this could be, e.g., an application-specific\n
      \  semantic type like \"outdoor-temperature\" or a URI referencing a\n   specific
      concept in an ontology like\n   \"http://sweet.jpl.nasa.gov/2.0/phys.owl#Temperature\".
      \ Multiple\n   Resource Types MAY be included in the value of this parameter,
      each\n   separated by a space, similar to the relation attribute.  The\n   registry
      for Resource Type values is defined in Section 7.4.\n   The Resource Type attribute
      is not meant to be used to assign a\n   human-readable name to a resource.  The
      \"title\" attribute defined in\n   [RFC5988] is meant for that purpose.  The
      Resource Type attribute\n   MUST NOT appear more than once in a link.\n"
    title: 3.1.  Resource Type 'rt' Attribute
  - contents:
    - "3.2.  Interface Description 'if' Attribute\n   The Interface Description 'if'
      attribute is an opaque string used to\n   provide a name or URI indicating a
      specific interface definition used\n   to interact with the target resource.
      \ One can think of this as\n   describing verbs usable on a resource.  The Interface
      Description\n   attribute is meant to describe the generic REST interface to
      interact\n   with a resource or a set of resources.  It is expected that an\n
      \  Interface Description will be reused by different Resource Types.\n   For
      example, the Resource Types \"outdoor-temperature\", \"dew-point\",\n   and
      \"rel-humidity\" could all be accessible using the Interface\n   Description
      \"http://www.example.org/myapp.wadl#sensor\".  Multiple\n   Interface Descriptions
      MAY be included in the value of this\n   parameter, each separated by a space,
      similar to the relation\n   attribute.  The registry for Interface Description
      values is defined\n   in Section 7.4.\n   The Interface Description could be,
      for example, the URI of a Web\n   Application Description Language (WADL) [WADL]
      definition of the\n   target resource \"http://www.example.org/myapp.wadl#sensor\",
      a URN\n   indicating the type of interface to the resource \"urn:myapp:sensor\",\n
      \  or an application-specific name \"sensor\".  The Interface Description\n
      \  attribute MUST NOT appear more than once in a link.\n"
    title: 3.2.  Interface Description 'if' Attribute
  - contents:
    - "3.3.  Maximum Size Estimate 'sz' Attribute\n   The maximum size estimate attribute
      'sz' gives an indication of the\n   maximum size of the resource representation
      returned by performing a\n   GET on the target URI.  For links to CoAP resources,
      this attribute\n   is not expected to be included for small resources that can\n
      \  comfortably be carried in a single Maximum Transmission Unit (MTU)\n   but
      SHOULD be included for resources larger than that.  The maximum\n   size estimate
      attribute MUST NOT appear more than once in a link.\n   Note that there is no
      defined upper limit to the value of the 'sz'\n   attributes.  Implementations
      MUST be prepared to accept large values.\n   One implementation strategy is
      to convert any value larger than a\n   reasonable size limit for this implementation
      to a special value\n   \"Big\", which in further processing would indicate that
      a size value\n   was given that was so big that it cannot be processed by this\n
      \  implementation.\n"
    title: 3.3.  Maximum Size Estimate 'sz' Attribute
  title: 3.  CoRE Link Attributes
- contents:
  - "4.  Well-Known Interface\n   Resource discovery in CoRE is accomplished through
    the use of a well-\n   known resource URI that returns a list of links about resources\n
    \  hosted by that server and other link relations.  Well-known resources\n   have
    a path component that begins with \"/.well-known/\" as specified\n   in [RFC5785].
    \ This specification defines a new well-known resource\n   for CoRE Resource Discovery:
    \"/.well-known/core\".\n   A server implementing this specification MUST support
    this resource\n   on the default port appropriate for the protocol for the purpose
    of\n   resource discovery.  It is, however, up to the application which\n   links
    are included and how they are organized.  The resource\n   \"/.well-known/core\"
    is meant to be used to return links to the entry\n   points of resource interfaces
    on a server.  More sophisticated link\n   organization can be achieved by including
    links to CoRE Link Format\n   resources located elsewhere on the server, for example,
    to achieve an\n   index.  In the absence of any links, a zero-length payload is\n
    \  returned.  The resource representation of this resource MUST be the\n   CoRE
    Link Format described in Section 2.\n   The CoRE resource discovery interface
    supports the following\n   interactions:\n   o  Performing a GET on \"/.well-known/core\"
    to the default port\n      returns a set of links available from the server (if
    any) in the\n      CoRE Link Format.  These links might describe resources hosted
    on\n      that server or on other servers or express other kinds of link\n      relations
    as described in Section 2.\n   o  Filtering may be performed on any of the link
    format attributes\n      using a query string as specified in Section 4.1.  For
    example,\n      [GET /.well-known/core?rt=temperature-c] would request resources\n
    \     with the Resource Type temperature-c.  A server is not, however,\n      required
    to support filtering.\n   o  More capable servers such as proxies could support
    a resource\n      directory by requesting the resource descriptions of other end-\n
    \     points or allowing servers to POST requests to \"/.well-known/\n      core\".
    \ The details of such resource directory functionality is,\n      however, out
    of the scope of this specification and is expected to\n      be specified separately.\n"
  - contents:
    - "4.1.  Query Filtering\n   A server implementing this specification MAY recognize
      the query part\n   of a resource discovery URI as a filter on the resources
      to be\n   returned.  The path and query components together should conform to\n
      \  the following level-4 URI Template [RFC6570]:\n       /.well-known/core{?search*}\n
      \  where the variable \"search\" is a 1-element list that has a single\n   name/value
      pair, where\n   o  name is either \"href\", a link-param name defined in this\n
      \     specification, or any other link-extension name, and\n   o  value is either
      a Complete Value String that does not end in an\n      \"*\" (%2A), or a Prefix
      Value String followed by an \"*\" (%2A).\n   The search name \"href\" refers
      to the URI-reference between the \"<\"\n   and \">\" characters of a link.  Both
      Value Strings match a target\n   attribute only if it exists.  Value Strings
      are percent-decoded\n   ([RFC3986], Section 2.1) before matching; similarly,
      any target\n   attributes notated as quoted-string are interpreted as defined
      in\n   Section 2.2 of [RFC2616].  After these steps, a Complete Value String\n
      \  matches a target attribute if it is bitwise identical.  A Prefix\n   Value
      String matches a target attribute if it is a bitwise prefix of\n   the target
      attribute (where any string is a prefix of itself).  Empty\n   Prefix Value
      Strings are allowed; by the definition above, they match\n   any target attribute
      that does exist.  Note that relation-type target\n   attributes can contain
      multiple values, and each value MUST be\n   treated as a separate target attribute
      when matching.\n   It is not expected that very constrained nodes support filtering.\n
      \  Implementations not supporting filtering MUST simply ignore the query\n   string
      and return the whole resource for unicast requests.\n   When using a transfer
      protocol like the Constrained Application\n   Protocol (CoAP) that supports
      multicast requests, special care needs\n   to be taken.  A multicast request
      with a query string SHOULD NOT be\n   responded to if filtering is not supported
      or if the filter does not\n   match (to avoid a needless response storm).  The
      exception is in\n   cases where the IP stack interface is not able to indicate
      that the\n   destination address was multicast.\n   The following are examples
      of valid query URIs:\n   o  ?href=/foo matches a link-value that is anchored
      at /foo\n   o  ?href=/foo* matches a link-value that is anchored at a URI that\n
      \     starts with /foo\n   o  ?foo=bar matches a link-value that has a target
      attribute named\n      foo with the exact value bar\n   o  ?foo=bar* matches
      a link-value that has a target attribute named\n      foo, the value of which
      starts with bar, e.g., bar or barley\n   o  ?foo=* matches a link-value that
      has a target attribute named foo\n"
    title: 4.1.  Query Filtering
  title: 4.  Well-Known Interface
- contents:
  - "5.  Examples\n   A few examples of typical link descriptions in this format follows.\n
    \  Multiple resource descriptions in a representation are separated by\n   commas.
    \ Linefeeds are also included in these examples for\n   readability.  Although
    the following examples use CoAP response\n   codes, the examples are applicable
    to HTTP as well (the corresponding\n   response code would be 200 OK).\n   This
    example includes links to two different sensors sharing the same\n   Interface
    Description.  Note that the default relation type for this\n   link format is
    \"hosts\" in links with no rel= target attribute.  Thus,\n   the links in this
    example tell that the Origin server from which\n   /.well-known/core was requested
    (the context) hosts the resources\n   /sensors/temp and /sensors/light (each a
    target).\n   REQ: GET /.well-known/core\n   RES: 2.05 Content\n   </sensors/temp>;if=\"sensor\",\n
    \  </sensors/light>;if=\"sensor\"\n   Without the linefeeds inserted here for
    readability, the format\n   actually looks as follows.\n   </sensors/temp>;if=\"sensor\",</sensors/light>;if=\"sensor\"\n
    \  This example arranges link descriptions hierarchically, with the\n   entry
    point including a link to a sub-resource containing links about\n   the sensors.\n
    \  REQ: GET /.well-known/core\n   RES: 2.05 Content\n   </sensors>;ct=40\n   REQ:
    GET /sensors\n   RES: 2.05 Content\n   </sensors/temp>;rt=\"temperature-c\";if=\"sensor\",\n
    \  </sensors/light>;rt=\"light-lux\";if=\"sensor\"\n   An example query filter
    may look like:\n   REQ: GET /.well-known/core?rt=light-lux\n   RES: 2.05 Content\n
    \  </sensors/light>;rt=\"light-lux\";if=\"sensor\"\n   Note that relation-type
    attributes like 'rt', 'if', and 'rel' can\n   have multiple values separated by
    spaces.  A query filter parameter\n   can match any one of those values, as in
    this example:\n   REQ: GET /.well-known/core?rt=light-lux\n   RES: 2.05 Content\n
    \  </sensors/light>;rt=\"light-lux core.sen-light\";if=\"sensor\"\n   This example
    shows the use of an \"anchor\" attribute to relate the\n   temperature sensor
    resource to an external description and to an\n   alternative URI.\n   REQ: GET
    /.well-known/core\n   RES: 2.05 Content\n   </sensors>;ct=40;title=\"Sensor Index\",\n
    \  </sensors/temp>;rt=\"temperature-c\";if=\"sensor\",\n   </sensors/light>;rt=\"light-lux\";if=\"sensor\",\n
    \  <http://www.example.com/sensors/t123>;anchor=\"/sensors/temp\"\n   ;rel=\"describedby\",\n
    \  </t>;anchor=\"/sensors/temp\";rel=\"alternate\"\n   If a client is interested
    in finding relations about a particular\n   resource, it can perform a query on
    the anchor parameter:\n   REQ: GET /.well-known/core?anchor=/sensors/temp\n   RES:
    2.05 Content\n   <http://www.example.com/sensors/temp123>;anchor=\"/sensors/temp\"\n
    \  ;rel=\"describedby\",\n   </t>;anchor=\"/sensors/temp\";rel=\"alternate\"\n
    \  The following example shows a large firmware resource with a size\n   attribute.
    \ The consumer of this link would use the 'sz' attribute to\n   determine if the
    resource representation is too large and if block\n   transfer would be required
    to request it.  In this case, a client\n   with only a 64 KiB flash might only
    support a 16-bit integer for\n   storing the 'sz' attribute.  Thus, a special
    flag or value should be\n   used to indicate \"Big\" (larger than 64 KiB).\n   REQ:
    GET /.well-known/core?rt=firmware\n   RES: 2.05 Content\n   </firmware/v2.1>;rt=\"firmware\";sz=262144\n"
  title: 5.  Examples
- contents:
  - "6.  Security Considerations\n   This specification has the same security considerations
    as described\n   in Section 7 of [RFC5988].  The \"/.well-known/core\" resource
    MAY be\n   protected, e.g., using Datagram Transport Layer Security (DTLS) when\n
    \  hosted on a CoAP server as per [COAP], Section 9.1.\n   Some servers might
    provide resource discovery services to a mix of\n   clients that are trusted to
    different levels.  For example, a\n   lighting control system might allow any
    client to read state\n   variables, but only certain clients to write state (turn
    lights on or\n   off).  Servers that have authentication and authorization features\n
    \  SHOULD support authentication features of the underlying transport\n   protocols
    (HTTP or DTLS/TLS) and allow servers to return different\n   lists of links based
    on a client's identity and authorization.  While\n   such servers might not return
    all links to all requesters, not\n   providing the link does not, by itself, control
    access to the\n   relevant resource -- a bad actor could know or guess the right
    URIs.\n   Servers can also lie about the resources available.  If it is\n   important
    for a client to only get information from a known source,\n   then that source
    needs to be authenticated.\n   Multicast requests using CoAP for the well-known
    link-format\n   resources could be used to perform denial of service on a constrained\n
    \  network.  A multicast request SHOULD only be accepted if the request\n   is
    sufficiently authenticated and secured using, e.g., IPsec or an\n   appropriate
    object security mechanism.\n   CoRE Link Format parsers should be aware that a
    link description may\n   be cyclical, i.e., contain a link to itself.  These cyclical
    links\n   could be direct or indirect (i.e., through referenced link\n   resources).
    \ Care should be taken when parsing link descriptions and\n   accessing cyclical
    links.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  IANA Considerations

    '
  - contents:
    - "7.1.  Well-Known 'core' URI\n   This memo registers the 'core' well-known URI
      in the Well-Known URIs\n   registry as defined by [RFC5785].\n   URI suffix:
      core\n   Change controller: IETF\n   Specification document(s): RFC 6690\n   Related
      information: None\n"
    title: 7.1.  Well-Known 'core' URI
  - contents:
    - "7.2.  New 'hosts' Relation Type\n   This memo registers the new \"hosts\" Web
      Linking relation type as per\n   [RFC5988].\n   Relation Name: hosts\n   Description:
      Refers to a resource hosted by the server indicated by\n   the link context.\n
      \  Reference: RFC 6690\n   Notes: This relation is used in CoRE where links
      are retrieved as a\n   \"/.well-known/core\" resource representation and is
      the default\n   relation type in the CoRE Link Format.\n   Application Data:
      None\n"
    title: 7.2.  New 'hosts' Relation Type
  - contents:
    - "7.3.  New 'link-format' Internet Media Type\n   This memo registers the a new
      Internet media type for the CoRE Link\n   Format, 'application/link-format'.\n
      \  Type name: application\n   Subtype name: link-format\n   Required parameters:
      None\n   Optional parameters: None\n   Encoding considerations: Binary data
      (UTF-8)\n   Security considerations:\n   Multicast requests using CoAP for the
      well-known link-format\n   resources could be used to perform denial of service
      on a constrained\n   network.  A multicast request SHOULD only be accepted if
      the request\n   is sufficiently authenticated and secured using, e.g., IPsec
      or an\n   appropriate object security mechanism.\n   CoRE Link Format parsers
      should be aware that a link description may\n   be cyclical, i.e., contain a
      link to itself.  These cyclical links\n   could be direct or indirect (i.e.,
      through referenced link\n   resources).  Care should be taken when parsing link
      descriptions and\n   accessing cyclical links.\n   Interoperability considerations:
      None\n   Published specification: RFC 6690\n   Applications that use this media
      type: CoAP server and client\n   implementations for resource discovery and
      HTTP applications that use\n   the link-format as a payload.\n   Additional
      information:\n   Magic number(s):\n   File extension(s): *.wlnk\n   Macintosh
      file type code(s):\n   Intended usage: COMMON\n   Restrictions on usage: None\n
      \  Author: CoRE WG\n   Change controller: IETF\n"
    title: 7.3.  New 'link-format' Internet Media Type
  - contents:
    - "7.4.  Constrained RESTful Environments (CoRE) Parameters Registry\n   This
      specification establishes a new Constrained RESTful Environments\n   (CoRE)
      Parameters registry, which contains two new sub-registries of\n   Link Target
      Attribute values (defined in [RFC5988]), one for Resource\n   Type (rt=) Link
      Target Attribute values and the other for Interface\n   Description (if=) Link
      Target Attribute values.  No initial entries\n   are defined by this specification
      for either sub-registry.\n   For both sub-registries, values starting with the
      characters \"core\"\n   are registered using the IETF Review registration policy
      [RFC5226].\n   All other values are registered using the Specification Required\n
      \  policy, which requires review by a designated expert appointed by the\n   IESG
      or their delegate.\n   The designated expert will enforce the following requirements:\n
      \  o  Registration values MUST be related to the intended purpose of\n      these
      attributes as described in Section 3.\n   o  Registered values MUST conform
      to the ABNF reg-rel-type definition\n      of Section 2, meaning that the value
      starts with a lowercase\n      alphabetic character, followed by a sequence
      of lowercase\n      alphabetic, numeric, \".\", or \"-\" characters, and contains
      no white\n      space.\n   o  It is recommended that the period \".\" character
      be used for\n      dividing name segments and that the dash \"-\" character
      be used for\n      making a segment more readable.  Example Interface Description\n
      \     values might be \"core.batch\" and \"core.link-batch\".\n   o  URIs are
      reserved for free use as extension values for these\n      attributes and MUST
      NOT be registered.\n   Registration requests consist of the completed registration
      template\n   below, with the reference pointing to the required specification.
      \ To\n   allow for the allocation of values prior to publication, the\n   designated
      expert may approve registration once they are satisfied\n   that a specification
      will be published.\n   Note that Link Target Attribute Values can be registered
      by third\n   parties if the Designated Expert determines that an unregistered
      Link\n   Target Attribute Value is widely deployed and not likely to be\n   registered
      in a timely manner.\n   The registration template for both sub-registries is:\n
      \  o  Attribute Value:\n   o  Description:\n   o  Reference:\n   o  Notes: [optional]\n
      \  Registration requests should be sent to the core-parameters@ietf.org\n   mailing
      list, marked clearly in the subject line (e.g., \"NEW RESOURCE\n   TYPE - example\"
      to register an \"example\" relation type or \"NEW\n   INTERFACE DESCRIPTION
      - example\" to register an \"example\" Interface\n   Description).\n   Within
      at most 14 days of the request, the Designated Expert(s) will\n   either approve
      or deny the registration request, communicating this\n   decision to the review
      list and IANA.  Denials should include an\n   explanation and, if applicable,
      suggestions as to how to make the\n   request successful.\n   Decisions (or
      lack thereof) made by the Designated Expert can be\n   first appealed to Application
      Area Directors (contactable using the\n   app-ads@tools.ietf.org email address
      or directly by looking up their\n   email addresses on http://www.iesg.org/
      website) and, if the\n   appellant is not satisfied with the response, to the
      full IESG (using\n   the iesg@ietf.org mailing list).\n"
    title: 7.4.  Constrained RESTful Environments (CoRE) Parameters Registry
  title: 7.  IANA Considerations
- contents:
  - "8.  Acknowledgments\n   Special thanks to Peter Bigot, who has made a considerable
    number of\n   reviews and text contributions that greatly improved the document.\n
    \  In particular, Peter is responsible for early improvements to the\n   ABNF
    descriptions and the idea for a new 'hosts' relation type.\n   Thanks to Mark
    Nottingham and Eran Hammer-Lahav for the discussions\n   and ideas that led to
    this document, and to Carsten Bormann, Martin\n   Thomson, Alexey Melnikov, Julian
    Reschke, Joel Halpern, Richard\n   Barnes, Barry Leiba, and Peter Saint-Andre
    for extensive comments and\n   contributions that improved the text.\n   Thanks
    to Michael Stuber, Richard Kelsey, Cullen Jennings, Guido\n   Moritz, Peter Van
    Der Stok, Adriano Pezzuto, Lisa Dussealt, Alexey\n   Melnikov, Gilbert Clark,
    Salvatore Loreto, Petri Mutka, Szymon Sasin,\n   Robert Quattlebaum, Robert Cragie,
    Angelo Castellani, Tom Herbst, Ed\n   Beroset, Gilman Tolle, Robby Simpson, Colin
    O'Flynn, and David Ryan\n   for helpful comments and discussions that have shaped
    the document.\n"
  title: 8.  Acknowledgments
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter,
      L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol
      -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC3629]  Yergeau, F., \"UTF-8, a transformation
      format of ISO\n              10646\", STD 63, RFC 3629, November 2003.\n   [RFC3986]
      \ Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource
      Identifier (URI): Generic Syntax\", STD 66,\n              RFC 3986, January
      2005.\n   [RFC4288]  Freed, N. and J. Klensin, \"Media Type Specifications and\n
      \             Registration Procedures\", BCP 13, RFC 4288, December 2005.\n
      \  [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n
      \  [RFC5234]  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:
      ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5646]  Phillips, A. and M. Davis,
      \"Tags for Identifying\n              Languages\", BCP 47, RFC 5646, September
      2009.\n   [RFC5987]  Reschke, J., \"Character Set and Language Encoding for\n
      \             Hypertext Transfer Protocol (HTTP) Header Field\n              Parameters\",
      RFC 5987, August 2010.\n   [RFC5988]  Nottingham, M., \"Web Linking\", RFC 5988,
      October 2010.\n   [RFC6570]  Gregorio, J., Fielding, R., Hadley, M., Nottingham,
      M.,\n              and D. Orchard, \"URI Template\", RFC 6570, March 2012.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [COAP]     Shelby, Z., Hartke, K., Bormann,
      C., and B. Frank,\n              \"Constrained Application Protocol (CoAP)\",
      Work in\n              Progress, July 2012.\n   [REST]     Fielding, R., \"Architectural
      Styles and the Design of\n              Network-based Software Architectures\",
      2000,\n              <http://www.ics.uci.edu/~fielding/pubs/dissertation/\n
      \             top.htm>.\n   [RFC1034]  Mockapetris, P., \"Domain names - concepts
      and facilities\",\n              STD 13, RFC 1034, November 1987.\n   [RFC1035]
      \ Mockapetris, P., \"Domain names - implementation and\n              specification\",
      STD 13, RFC 1035, November 1987.\n   [RFC2045]  Freed, N. and N. Borenstein,
      \"Multipurpose Internet Mail\n              Extensions (MIME) Part One: Format
      of Internet Message\n              Bodies\", RFC 2045, November 1996.\n   [RFC2231]
      \ Freed, N. and K. Moore, \"MIME Parameter Value and Encoded\n              Word
      Extensions: Character Sets, Languages, and\n              Continuations\", RFC
      2231, November 1997.\n   [RFC4287]  Nottingham, M., Ed. and R. Sayre, Ed., \"The
      Atom\n              Syndication Format\", RFC 4287, December 2005.\n   [RFC4919]
      \ Kushalnagar, N., Montenegro, G., and C. Schumacher, \"IPv6\n              over
      Low-Power Wireless Personal Area Networks (6LoWPANs):\n              Overview,
      Assumptions, Problem Statement, and Goals\",\n              RFC 4919, August
      2007.\n   [RFC5785]  Nottingham, M. and E. Hammer-Lahav, \"Defining Well-Known\n
      \             Uniform Resource Identifiers (URIs)\", RFC 5785,\n              April
      2010.\n   [RFC6454]  Barth, A., \"The Web Origin Concept\", RFC 6454,\n              December
      2011.\n   [W3C.HTML.4.01]\n              Raggett, D., Le Hors, A., and I. Jacobs,
      \"HTML 4.01\n              Specification\", World Wide Web Consortium\n              Recommendation
      REC-html401-19991224, December 1999,\n              <http://www.w3.org/TR/1999/REC-html401-19991224>.\n
      \  [WADL]     Hadley, M., \"Web Application Description Language (WADL)\",\n
      \             2009, <http://java.net/projects/wadl/sources/svn/content/\n              trunk/www/wadl20090202.pdf>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Author's Address\n   Zach Shelby\n   Sensinode\n   Kidekuja 2\n   Vuokatti  88600\n
    \  Finland\n   Phone: +358407796297\n   EMail: zach@sensinode.com\n"
  title: Author's Address
