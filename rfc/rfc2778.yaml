- title: __initial_text__
  contents:
  - '               A Model for Presence and Instant Messaging

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines an abstract model for a presence and instant\n\
    \   messaging system. It defines the various entities involved, defines\n   terminology,\
    \ and outlines the services provided by the system. The\n   goal is to provide\
    \ a common vocabulary for further work on\n   requirements for protocols and markup\
    \ for presence and instant\n   messaging.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   A presence and instant messaging system allows users to subscribe\
    \ to\n   each other and be notified of changes in state, and for users to send\n\
    \   each other short instant messages. To facilitate development of a\n   suite\
    \ of protocols to provide this service, we believe that it is\n   valuable to\
    \ first develop a model for the system. The model consists\n   of the various\
    \ entities involved, descriptions of the basic functions\n   they provide, and\
    \ most importantly, definition of a vocabulary which\n   can be used to facilitate\
    \ discussion.\n   We note that the purpose of this model is to be descriptive\
    \ and\n   universal: we want the model to map reasonably onto all of the\n   systems\
    \ that are informally described as presence or instant\n   messaging systems.\
    \ The model is not intended to be prescriptive or\n   achieve interoperability:\
    \ an element that appears in the model will\n   not necessarily be an element\
    \ of an interoperable protocol, and may\n   not even be a good idea.\n   In this\
    \ document, each element of the model appears in upper case\n   (e.g., PRESENCE\
    \ SERVICE). No term in lower case or mixed case is\n   intended to be a term of\
    \ the model.\n   The first part of this document is intended as an overview of\
    \ the\n   model.  The overview includes diagrams, and terms are presented in an\n\
    \   order that is intended to help the reader understand the relationship\n  \
    \ between elements. The second part of the document is the actual\n   definition\
    \ of the model, with terms presented in alphabetical order\n   for ease of reference.\n\
    \   The overview is intended to be helpful but is not definitive; it may\n   contain\
    \ inadvertent differences from the definitions in the model.\n   For any such\
    \ difference, the definition(s) in the model are taken to\n   be correct, rather\
    \ than the explanation(s) in the overview.\n"
- title: 2. Overview
  contents:
  - "2. Overview\n   The model is intended to provide a means for understanding,\n\
    \   comparing, and describing systems that support the services typically\n  \
    \ referred to as presence and instant messaging. It consists of a\n   number of\
    \ named entities that appear, in some form, in existing\n   systems. No actual\
    \ implementation is likely to have every entity of\n   the model as a distinct\
    \ part. Instead, there will almost always be\n   parts of the implementation that\
    \ embody two or more entities of the\n   model. However, different implementations\
    \ may combine entities in\n   different ways.\n   The model defines two services:\
    \ a PRESENCE SERVICE and an INSTANT\n   MESSAGE SERVICE. The PRESENCE SERVICE\
    \ serves to accept information,\n   store it, and distribute it.  The information\
    \ stored is\n   (unsurprisingly) PRESENCE INFORMATION. The INSTANT MESSAGE SERVICE\n\
    \   serves to accept and deliver INSTANT MESSAGES to INSTANT INBOXES.\n"
- title: 2.1 PRESENCE SERVICE
  contents:
  - "2.1 PRESENCE SERVICE\n   The PRESENCE SERVICE has two distinct sets of \"clients\"\
    \ (remember,\n   these may be combined in an implementation, but treated separately\
    \ in\n   the model).  One set of clients, called PRESENTITIES, provides\n   PRESENCE\
    \ INFORMATION to be stored and distributed.  The other set of\n   clients, called\
    \ WATCHERS, receives PRESENCE INFORMATION from the\n   service.\n            \
    \        +---------------------------+\n                    |     PRESENCE SERVICE\
    \      |\n                    |                           |\n                \
    \    +---------------------------+\n                        ^                \
    \ |\n                        |                 |\n                        |  \
    \               v\n                 +------------+       +------------+\n    \
    \             | PRESENTITY |       |  WATCHER   |\n                 +------------+\
    \       +------------+\n                 Fig. 1: Overview of Presence Service\n\
    \   There are two kinds of WATCHERS, called FETCHERS and SUBSCRIBERS. A\n   FETCHER\
    \ simply requests the current value of some PRESENTITY's\n   PRESENCE INFORMATION\
    \ from the PRESENCE SERVICE. In contrast, a\n   SUBSCRIBER requests notification\
    \ from the PRESENCE SERVICE of\n   (future) changes in some PRESENTITY's PRESENCE\
    \ INFORMATION.  A\n   special kind of FETCHER is one that fetches information\
    \ on a regular\n   basis.  This is called a POLLER.\n              +----------------WATCHER---------------+\n\
    \              |                                      |\n              |  +----FETCHER---+\
    \  +--SUBSCRIBER--+  |\n              |  |              |  |              |  |\n\
    \              |  | +--POLLER--+ |  |              |  |\n              |  | |\
    \          | |  |              |  |\n              |  | +----------+ |  |    \
    \          |  |\n              |  +--------------+  +--------------+  |\n    \
    \          +--------------------------------------+\n                   Fig. 2:\
    \ Varieties of WATCHER\n   The PRESENCE SERVICE also has WATCHER INFORMATION about\
    \ WATCHERS and\n   their activities in terms of fetching or subscribing to PRESENCE\n\
    \   INFORMATION.  The PRESENCE SERVICE may also distribute WATCHER\n   INFORMATION\
    \ to some WATCHERS, using the same mechanisms that are\n   available for distributing\
    \ PRESENCE INFORMATION.\n   Changes to PRESENCE INFORMATION are distributed to\
    \ SUBSCRIBERS via\n   NOTIFICATIONS. Figures 3a through 3c show the flow of information\
    \ as\n   a piece of PRESENCE INFORMATION is changed from P1 to P2.\n         \
    \          +---------------------------+\n                   |     PRESENCE SERVICE\
    \      |\n                   |            P1             |\n                 \
    \  +---------------------------+\n                +------------+       +------------+\n\
    \                |   P1->P2   |       |     P1     |\n                | PRESENTITY\
    \ |       | SUBSCRIBER |\n                +------------+       +------------+\n\
    \                   Fig. 3a: NOTIFICATION (Step 1)\n                   +---------------------------+\n\
    \                   |     PRESENCE SERVICE      |\n                   |      \
    \    P1->P2           |\n                   +---------------------------+\n  \
    \                     ^\n                       |P2\n                +------------+\
    \       +------------+\n                |     P2     |       |    P1      |\n\
    \                | PRESENTITY |       | SUBSCRIBER |\n                +------------+\
    \       +------------+\n                   Fig. 3b: NOTIFICATION (Step 2)\n  \
    \                 +---------------------------+\n                   |     PRESENCE\
    \ SERVICE      |\n                   |            P2             |\n         \
    \          +---------------------------+\n                                   \
    \        |P2\n                                           v\n                +------------+\
    \       +------------+\n                |     P2     |       |   P1->P2   |\n\
    \                | PRESENTITY |       | SUBSCRIBER |\n                +------------+\
    \       +------------+\n                   Fig. 3c: NOTIFICATION (Step 3)\n"
- title: 2.2 INSTANT MESSAGE SERVICE
  contents:
  - "2.2 INSTANT MESSAGE SERVICE\n   The INSTANT MESSAGE SERVICE also has two distinct\
    \ sets of \"clients\":\n   SENDERS and INSTANT INBOXES. A SENDER provides INSTANT\
    \ MESSAGES to\n   the INSTANT MESSAGE SERVICE for delivery. Each INSTANT MESSAGE\
    \ is\n   addressed to a particular INSTANT INBOX ADDRESS, and the INSTANT\n  \
    \ MESSAGE SERVICE attempts to deliver the message to a corresponding\n   INSTANT\
    \ INBOX.\n                 +---------------------------+\n                 | \
    \ INSTANT MESSAGE SERVICE  |\n                 |                           |\n\
    \                 +---------------------------+\n                     ^      \
    \           |\n                     |                 |\n                    \
    \ |                 v\n              +------------+       +---------------+\n\
    \              |   SENDER   |       | INSTANT INBOX |\n              +------------+\
    \       +---------------+\n            Fig. 4: Overview of Instant Message Service\n"
- title: 2.3 Protocols
  contents:
  - "2.3 Protocols\n   A PRESENCE PROTOCOL defines the interaction between PRESENCE\
    \ SERVICE,\n   PRESENTITIES, and WATCHERS. PRESENCE INFORMATION is carried by\
    \ the\n   PRESENCE PROTOCOL.\n   An INSTANT MESSAGE PROTOCOL defines the interaction\
    \ between INSTANT\n   MESSAGE SERVICE, SENDERS, and INSTANT INBOXES. INSTANT MESSAGES\
    \ are\n   carried by the INSTANT MESSAGE PROTOCOL.\n   In terms of this model,\
    \ we believe that the IMPP working group is\n   planning to develop detailed requirements\
    \ and specifications for the\n   structure and formats of the PRESENCE PROTOCOL,\
    \ PRESENCE INFORMATION,\n   INSTANT MESSAGE PROTOCOL, and INSTANT MESSAGES.\n"
- title: 2.4 Formats
  contents:
  - "2.4 Formats\n   The model defines the PRESENCE INFORMATION to consist of an arbitrary\n\
    \   number of elements, called PRESENCE TUPLES. Each such element\n   consists\
    \ of a STATUS marker (which might convey information such as\n   online/offline/busy/away/do\
    \ not disturb), an optional COMMUNICATION\n   ADDRESS, and optional OTHER PRESENCE\
    \ MARKUP.  A COMMUNICATION ADDRESS\n   includes a COMMUNICATION MEANS and a CONTACT\
    \ ADDRESS. One type of\n   COMMUNICATION MEANS, and the only one defined by this\
    \ model, is\n   INSTANT MESSAGE SERVICE.  One type of CONTACT ADDRESS, and the\
    \ only\n   one defined by this model, is INSTANT INBOX ADDRESS. However, other\n\
    \   possibilities exist: a COMMUNICATION MEANS might indicate some form\n   of\
    \ telephony, for example, with the corresponding CONTACT ADDRESS\n   containing\
    \ a telephone number.\n      +------------------------------------+\n      | PRESENCE\
    \ INFORMATION               |\n      +------------------------------------+\n\
    \       | +-------------------------------+\n       =>| PRESENCE TUPLE       \
    \         |\n       | +-------------------------------+\n       |   | +-------------------------+\n\
    \       |   =>| STATUS                  |\n       |   | +-------------------------+\n\
    \       |   | +-------------------------+\n       |   =>| COMMUNICATION ADDRESS\
    \   |\n       |   | +-------------------------+\n       |   |     | +-----------------+\n\
    \       |   |     =>| CONTACT MEANS   |\n       |   |     | +-----------------+\n\
    \       |   |     | +-----------------+\n       |   |     =>| CONTACT ADDRESS\
    \ |\n       |   |       +-----------------+\n       |   | +-------------------------+\n\
    \       |   =>| OTHER MARKUP            |\n       |     +-------------------------+\n\
    \       | +-------------------------------+\n       =>| PRESENCE TUPLE       \
    \         |\n       | +-------------------------------+\n       |   | +-------------------------+\n\
    \       |   =>| STATUS                  |\n       |   | +-------------------------+\n\
    \       |   | +-------------------------+\n       |   =>| COMMUNICATION ADDRESS\
    \   |\n       |   | +-------------------------+\n       |   |     | +-----------------+\n\
    \       |   |     =>| CONTACT MEANS   |\n       |   |     | +-----------------+\n\
    \       |   |     | +-----------------+\n       |   |     =>| CONTACT ADDRESS\
    \ |\n       |   |       +-----------------+\n       |   | +-------------------------+\n\
    \       |   =>| OTHER MARKUP            |\n       |     +-------------------------+\n\
    \       | +-------------------------------+\n       =>| PRESENCE TUPLE       \
    \         |\n       | +-------------------------------+\n       |    ...\n   \
    \     Fig. 5: The structure of PRESENCE INFORMATION\n   STATUS is further defined\
    \ by the model to have at least two states\n   that interact with INSTANT MESSAGE\
    \ delivery -- OPEN, in which INSTANT\n   MESSAGES will be accepted, and CLOSED,\
    \ in which INSTANT MESSAGES will\n   not be accepted. OPEN and CLOSED may also\
    \ be applicable to other\n   COMMUNICATION MEANS -- OPEN mapping to some state\
    \ meaning \"available\"\n   or \"open for business\" while CLOSED means \"unavailable\"\
    \ or \"closed to\n   business.\" The model allows STATUS to include other values,\
    \ which may\n   be interpretable by programs or only by persons.  The model also\n\
    \   allows STATUS to consist of single or multiple values.\n"
- title: 2.5 Presence and its effect on Instant Messages
  contents:
  - "2.5 Presence and its effect on Instant Messages\n   An INSTANT INBOX is a receptacle\
    \ for INSTANT MESSAGES. Its INSTANT\n   INBOX ADDRESS is the information that\
    \ can be included in PRESENCE\n   INFORMATION to define how an INSTANT MESSAGE\
    \ should be delivered to\n   that INSTANT INBOX. As noted above, certain values\
    \ of the STATUS\n   marker indicate whether INSTANT MESSAGES will be accepted\
    \ at the\n   INSTANT INBOX.  The model does not otherwise constrain the delivery\n\
    \   mechanism or format for instant messages. Reasonable people can\n   disagree\
    \ about whether this omission is a strength or a weakness of\n   this model.\n"
- title: 2.6 PRINCIPALS and their agents
  contents:
  - "2.6 PRINCIPALS and their agents\n   This model includes other elements that are\
    \ useful in characterizing\n   how the protocol and markup work. PRINCIPALS are\
    \ the people, groups,\n   and/or software in the \"real world\" outside the system\
    \ that use the\n   system as a means of coordination and communication. It is\
    \ entirely\n   outside the model how the real world maps onto PRINCIPALS -- the\n\
    \   system of model entities knows only that two distinct PRINCIPALS are\n   distinct,\
    \ and two identical PRINCIPALS are identical.\n   A PRINCIPAL interacts with the\
    \ system via one of several user agents\n   (INBOX USER AGENT; SENDER USER AGENT;\
    \ PRESENCE USER AGENT; WATCHER\n   USER AGENT). As usual, the different kinds\
    \ of user agents are split\n   apart in this model even though most implementations\
    \ will combine at\n   least some of them. A user agent is purely coupling between\
    \ a\n   PRINCIPAL and some core entity of the system (respectively, INSTANT\n\
    \   INBOX; SENDER; PRESENTITY; WATCHER).\n                   +---------------------------+\n\
    \                   |     PRESENCE SERVICE      |\n                   +---------------------------+\n\
    \                       ^                   |\n                       | PRESENCE\
    \ PROTOCOL |\n                       |                   v\n                +------------+\
    \       +------------+\n                | PRESENTITY |       |  WATCHER   |\n\
    \                +------------+       +------------+\n                      ^\
    \                   ^\n                      |                   |\n         \
    \             |                   |\n        o      +--------------+      +-------------+\
    \      o\n       /|\\  -->| PRESENCE UA  |      | WATCHER UA  |<--  /|\\\n   \
    \     X      +--------------+      +-------------+      X\n   (PRINCIPAL)    \
    \                                    (PRINCIPAL)\n                    Fig. 6:\
    \ A presence system\n                  +---------------------------+\n       \
    \           |  INSTANT MESSAGE SERVICE  |\n                  +---------------------------+\n\
    \                      ^                    |\n                    IM|   INSTANT\
    \ MESSAGE  |IM\n                      |       PROTOCOL     v\n               +------------+\
    \        +---------------+\n               |   SENDER   |        | INSTANT INBOX\
    \ |\n               +------------+        +---------------+\n                \
    \     ^                      ^\n                     |                      |\n\
    \                     |                      |\n       o      +-------------+\
    \       +------------------+      o\n      /|\\  -->|  SENDER UA  |       |  INBOX\
    \ UA        |<--  /|\\\n       X      +-------------+       +------------------+\
    \      X\n   (PRINCIPAL)                                           (PRINCIPAL)\n\
    \                Fig. 7: An instant messaging system\n"
- title: 2.7 Examples
  contents:
  - "2.7 Examples\n   A simple example of applying the model is to describe a generic\n\
    \   \"buddy list\" application. These applications typically expose the\n   user's\
    \ presence to others, and make it possible to see the presence\n   of others.\
    \ So we could describe a buddy list as the combination of a\n   PRESENCE USER\
    \ AGENT and WATCHER USER AGENT for a single PRINCIPAL,\n   using a single PRESENTITY\
    \ and a single SUBSCRIBER.\n   We could then extend our example to instant messaging\
    \ and describe a\n   generic \"instant messenger\" as essentially a buddy list\
    \ with\n   additional capabilities for sending and receiving instant messages.\n\
    \   So an instant messenger would be the combination of a PRESENCE USER\n   AGENT,\
    \ WATCHER USER AGENT, INBOX USER AGENT, and SENDER USER AGENT\n   for a single\
    \ PRINCIPAL, using a single PRESENTITY, single SUBSCRIBER,\n   and single INSTANT\
    \ INBOX, with the PRESENTITY's PRESENCE INFORMATION\n   including an INSTANT INBOX\
    \ ADDRESS that leads to the INSTANT INBOX.\n"
- title: 3. Model
  contents:
  - "3. Model\n   ACCESS RULES: constraints on how a PRESENCE SERVICE makes PRESENCE\n\
    \      INFORMATION available to WATCHERS. For each PRESENTITY's PRESENCE\n   \
    \   INFORMATION, the applicable ACCESS RULES are manipulated by the\n      PRESENCE\
    \ USER AGENT of a PRINCIPAL that controls the PRESENTITY.\n      Motivation: We\
    \ need some way of talking about hiding presence\n      information from people.\n\
    \   CLOSED: a distinguished value of the STATUS marker. In the context of\n  \
    \    INSTANT MESSAGES, this value means that the associated INSTANT\n      INBOX\
    \ ADDRESS, if any, corresponds to an INSTANT INBOX that is\n      unable to accept\
    \ an INSTANT MESSAGE.  This value may have an\n      analogous meaning for other\
    \ COMMUNICATION MEANS, but any such\n      meaning is not defined by this model.\
    \ Contrast with OPEN.\n   COMMUNICATION ADDRESS: consists of COMMUNICATION MEANS\
    \ and CONTACT\n      ADDRESS.\n   COMMUNICATION MEANS: indicates a method whereby\
    \ communication can\n      take place. INSTANT MESSAGE SERVICE is one example\
    \ of a\n      COMMUNICATION MEANS.\n   CONTACT ADDRESS: a specific point of contact\
    \ via some COMMUNICATION\n      MEANS. When using an INSTANT MESSAGE SERVICE,\
    \ the CONTACT ADDRESS\n      is an INSTANT INBOX ADDRESS.\n   DELIVERY RULES:\
    \ constraints on how an INSTANT MESSAGE SERVICE\n      delivers received INSTANT\
    \ MESSAGES to INSTANT INBOXES. For each\n      INSTANT INBOX, the applicable DELIVERY\
    \ RULES are manipulated by\n      the INBOX USER AGENT of a PRINCIPAL that controls\
    \ the INSTANT\n      INBOX.\n      Motivation: We need a way of talking about\
    \ filtering instant\n      messages.\n   FETCHER: a form of WATCHER that has asked\
    \ the PRESENCE SERVICE to for\n      the PRESENCE INFORMATION of one or more PRESENTITIES,\
    \ but has not\n      asked for a SUBSCRIPTION to be created.\n   INBOX USER AGENT:\
    \ means for a PRINCIPAL to manipulate zero or more\n      INSTANT INBOXES controlled\
    \ by that PRINCIPAL.\n      Motivation: This is intended to isolate the core functionality\
    \ of\n      an INSTANT INBOX from how it might appear to be manipulated by a\n\
    \      product. This manipulation includes fetching messages, deleting\n     \
    \ messages, and setting DELIVERY RULES. We deliberately take no\n      position\
    \ on whether the INBOX USER AGENT, INSTANT INBOX, and\n      INSTANT MESSAGE SERVICE\
    \ are colocated or distributed across\n      machines.\n   INSTANT INBOX: receptacle\
    \ for INSTANT MESSAGES intended to be read by\n      the INSTANT INBOX's PRINCIPAL.\n\
    \   INSTANT INBOX ADDRESS: indicates whether and how the PRESENTITY's\n      PRINCIPAL\
    \ can receive an INSTANT MESSAGE in an INSTANT INBOX. The\n      STATUS and INSTANT\
    \ INBOX ADDRESS information are sufficient to\n      determine whether the PRINCIPAL\
    \ appears ready to accept the\n      INSTANT MESSAGE.\n      Motivation: The definition\
    \ is pretty loose about exactly how any\n      of this works, even leaving open\
    \ the possibility of reusing parts\n      of the email infrastructure for instant\
    \ messaging.\n   INSTANT MESSAGE: an identifiable unit of data, of small size,\
    \ to be\n      sent to an INSTANT INBOX.\n      Motivation: We do not define \"\
    small\" but we seek in this\n      definition to avoid the possibility of transporting\
    \ an arbitrary-\n      length stream labelled as an \"instant message.\"\n   INSTANT\
    \ MESSAGE PROTOCOL: The messages that can be exchanged between\n      a SENDER\
    \ USER AGENT and an INSTANT MESSAGE SERVICE, or between an\n      INSTANT MESSAGE\
    \ SERVICE and an INSTANT INBOX.\n   INSTANT MESSAGE SERVICE: accepts and delivers\
    \ INSTANT MESSAGES.\n      -- May require authentication of SENDER USER AGENTS\
    \ and/or INSTANT\n         INBOXES.\n      -- May have different authentication\
    \ requirements for different\n         INSTANT INBOXES, and may also have different\
    \ authentication\n         requirements for different INSTANT INBOXES controlled\
    \ by a\n         single PRINCIPAL.\n      -- May have an internal structure involving\
    \ multiple SERVERS\n         and/or PROXIES. There may be complex patterns of\
    \ redirection\n         and/or proxying while retaining logical connectivity to\
    \ a\n         single INSTANT MESSAGE SERVICE. Note that an INSTANT MESSAGE\n \
    \        SERVICE does not require having a distinct SERVER -- the\n         service\
    \ may be implemented as direct communication between\n         SENDER and INSTANT\
    \ INBOX.\n      -- May have an internal structure involving other INSTANT MESSAGE\n\
    \         SERVICES, which may be independently accessible in their own\n     \
    \    right as well as being reachable through the initial INSTANT\n         MESSAGE\
    \ SERVICE.\n   NOTIFICATION: a message sent from the PRESENCE SERVICE to a\n \
    \        SUBSCRIBER when there is a change in the PRESENCE INFORMATION\n     \
    \    of some PRESENTITY of interest, as recorded in one or more\n         SUBSCRIPTIONS.\n\
    \         Motivation: We deliberately take no position on what part of\n     \
    \    the changed information is included in a NOTIFICATION.\n   OPEN: a distinguished\
    \ value of the STATUS marker. In the context of\n      INSTANT MESSAGES, this\
    \ value means that the associated INSTANT\n      INBOX ADDRESS, if any, corresponds\
    \ to an INSTANT INBOX that is\n      ready to accept an INSTANT MESSAGE.  This\
    \ value may have an\n      analogous meaning for other COMMUNICATION MEANS, but\
    \ any such\n      meaning is not defined by this model. Contrast with CLOSED.\n\
    \   OTHER PRESENCE MARKUP: any additional information included in the\n      PRESENCE\
    \ INFORMATION of a PRESENTITY. The model does not define\n      this further.\n\
    \   POLLER: a FETCHER that requests PRESENCE INFORMATION on a regular\n      basis.\n\
    \   PRESENCE INFORMATION: consists of one or more PRESENCE TUPLES.\n   PRESENCE\
    \ PROTOCOL: The messages that can be exchanged between a\n      PRESENTITY and\
    \ a PRESENCE SERVICE, or a WATCHER and a PRESENCE\n      SERVICE.\n   PRESENCE\
    \ SERVICE: accepts, stores, and distributes PRESENCE\n      INFORMATION.\n   \
    \   -- May require authentication of PRESENTITIES, and/or WATCHERS.\n      --\
    \ May have different authentication requirements for different\n         PRESENTITIES.\n\
    \      -- May have different authentication requirements for different\n     \
    \    WATCHERS, and may also have different authentication\n         requirements\
    \ for different PRESENTITIES being watched by a\n         single WATCHER.\n  \
    \    -- May have an internal structure involving multiple SERVERS\n         and/or\
    \ PROXIES. There may be complex patterns of redirection\n         and/or proxying\
    \ while retaining logical connectivity to a\n         single PRESENCE SERVICE.\
    \ Note that a PRESENCE SERVICE does not\n         require having a distinct SERVER\
    \ -- the service may be\n         implemented as direct communication among PRESENTITY\
    \ and\n         WATCHERS.\n      -- May have an internal structure involving other\
    \ PRESENCE\n         SERVICES, which may be independently accessible in their\
    \ own\n         right as well as being reachable through the initial PRESENCE\n\
    \         SERVICE.\n   PRESENCE TUPLE: consists of a STATUS, an optional COMMUNICATION\n\
    \      ADDRESS, and optional OTHER PRESENCE MARKUP.\n   PRESENCE USER AGENT: means\
    \ for a PRINCIPAL to manipulate zero or more\n      PRESENTITIES.\n      Motivation:\
    \ This is essentially a \"model/view\" distinction: the\n      PRESENTITY is the\
    \ model of the presence being exposed, and is\n      independent of its manifestation\
    \ in any user interface. In\n      addition, we deliberately take no position\
    \ on how the PRESENCE\n      USER AGENT, PRESENTITY, and PRESENCE SERVICE are\
    \ colocated or\n      distributed across machines.\n   PRESENTITY (presence entity):\
    \ provides PRESENCE INFORMATION to a\n      PRESENCE SERVICE.\n      Motivation:\
    \ We don't like to coin new words, but \"presentity\"\n      seemed worthwhile\
    \ so as to have an unambiguous term for the entity\n      of interest to a presence\
    \ service. Note that the presentity is not\n      (usually) located in the presence\
    \ service: the presence service\n      only has a recent version of the presentity's\
    \ presence\n      information.  The presentity initiates changes in the presence\n\
    \      information to be distributed by the presence service.\n   PRINCIPAL: human,\
    \ program, or collection of humans and/or programs\n      that chooses to appear\
    \ to the PRESENCE SERVICE as a single actor,\n      distinct from all other PRINCIPALS.\n\
    \      Motivation: We need a clear notion of the actors outside the\n      system.\
    \ \"Principal\" seems as good a term as any.\n   PROXY: a SERVER that communicates\
    \ PRESENCE INFORMATION, INSTANT\n      MESSAGES, SUBSCRIPTIONS and/or NOTIFICATIONS\
    \ to another SERVER.\n      Sometimes a PROXY acts on behalf of a PRESENTITY,\
    \ WATCHER, or\n      INSTANT INBOX.\n   SENDER: source of INSTANT MESSAGES to\
    \ be delivered by the INSTANT\n      MESSAGE SERVICE.\n   SENDER USER AGENT: means\
    \ for a PRINCIPAL to manipulate zero or more\n      SENDERS.\n   SERVER: an indivisible\
    \ unit of a PRESENCE SERVICE or INSTANT MESSAGE\n      SERVICE.\n   SPAM: unwanted\
    \ INSTANT MESSAGES.\n   SPOOFING: a PRINCIPAL improperly imitating another PRINCIPAL.\n\
    \   STALKING: using PRESENCE INFORMATION to infer the whereabouts of a\n     \
    \ PRINCIPAL, especially for malicious or illegal purposes.\n   STATUS: a distinguished\
    \ part of the PRESENCE INFORMATION of a\n      PRESENTITY. STATUS has at least\
    \ the mutually-exclusive values OPEN\n      and CLOSED, which have meaning for\
    \ the acceptance of INSTANT\n      MESSAGES, and may have meaning for other COMMUNICATION\
    \ MEANS.\n      There may be other values of STATUS that do not imply anything\n\
    \      about INSTANT MESSAGE acceptance. These other values of STATUS may\n  \
    \    be combined with OPEN and CLOSED or they may be mutually-exclusive\n    \
    \  with those values.\n      Some implementations may combine STATUS with other\
    \ entities. For\n      example, an implementation might make an INSTANT INBOX\
    \ ADDRESS\n      visible only when the INSTANT INBOX can accept an INSTANT MESSAGE.\n\
    \      Then, the existence of an INSTANT INBOX ADDRESS implies OPEN,\n      while\
    \ its absence implies CLOSED.\n   SUBSCRIBER: a form of WATCHER that has asked\
    \ the PRESENCE SERVICE to\n      notify it immediately of changes in the PRESENCE\
    \ INFORMATION of\n      one or more PRESENTITIES.\n   SUBSCRIPTION: the information\
    \ kept by the PRESENCE SERVICE about a\n      SUBSCRIBER's request to be notified\
    \ of changes in the PRESENCE\n      INFORMATION of one or more PRESENTITIES.\n\
    \   VISIBILITY RULES: constraints on how a PRESENCE SERVICE makes WATCHER\n  \
    \    INFORMATION available to WATCHERS. For each WATCHER's WATCHER\n      INFORMATION,\
    \ the applicable VISIBILITY RULES are manipulated by\n      the WATCHER USER AGENT\
    \ of a PRINCIPAL that controls the WATCHER.\n      Motivation: We need a way of\
    \ talking about hiding watcher\n      information from people.\n   WATCHER: requests\
    \ PRESENCE INFORMATION about a PRESENTITY, or WATCHER\n      INFORMATION about\
    \ a WATCHER, from the PRESENCE SERVICE. Special\n      types of WATCHER are FETCHER,\
    \ POLLER, and SUBSCRIBER.\n   WATCHER INFORMATION: information about WATCHERS\
    \ that have received\n      PRESENCE INFORMATION about a particular PRESENTITY\
    \ within a\n      particular recent span of time. WATCHER INFORMATION is maintained\n\
    \      by the PRESENCE SERVICE, which may choose to present it in the\n      same\
    \ form as PRESENCE INFORMATION; that is, the service may choose\n      to make\
    \ WATCHERS look like a special form of PRESENTITY.\n      Motivation: If a PRESENTITY\
    \ wants to know who knows about it, it\n      is not enough to examine only information\
    \ about SUBSCRIPTIONS. A\n      WATCHER might repeatedly fetch information without\
    \ ever\n      subscribing. Alternately, a WATCHER might repeatedly subscribe,\n\
    \      then cancel the SUBSCRIPTION.  Such WATCHERS should be visible to\n   \
    \   the PRESENTITY if the PRESENCE SERVICE offers WATCHER INFORMATION,\n     \
    \ but will not be appropriately visible if the WATCHER INFORMATION\n      includes\
    \ only SUBSCRIPTIONS.\n   WATCHER USER AGENT: means for a PRINCIPAL to manipulate\
    \ zero or more\n      WATCHERS controlled by that PRINCIPAL.\n      Motivation:\
    \ As with PRESENCE USER AGENT and PRESENTITY, the\n      distinction here is intended\
    \ to isolate the core functionality of\n      a WATCHER from how it might appear\
    \ to be manipulated by a product.\n      As previously, we deliberately take no\
    \ position on whether the\n      WATCHER USER AGENT, WATCHER, and PRESENCE SERVICE\
    \ are colocated or\n      distributed across machines.\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   This document provides a model and vocabulary\
    \ for systems with\n   certain intrinsic security issues. In particular, presence\
    \ and\n   instant messaging systems must deal with \"the three S's\": STALKING,\n\
    \   SPOOFING, and SPAM. ACCESS RULES, VISIBILITY RULES, and WATCHER\n   INFORMATION\
    \ are intended to deal with STALKING.  The several kinds of\n   authentication\
    \ mentioned for INSTANT MESSAGE SERVICE and PRESENCE\n   SERVICE are intended\
    \ to deal with SPOOFING. DELIVERY RULES are\n   intended to deal with SPAM.\n"
- title: 5. Conclusion
  contents:
  - "5. Conclusion\n   This document has provided a model for a presence and instant\n\
    \   messaging system. The purpose of the model is to provide a common\n   vocabulary\
    \ for the further work of defining and implementing\n   interoperable presence\
    \ and instant messaging protocols.\n"
- title: 6. Acknowledgements
  contents:
  - "6. Acknowledgements\n   This document has been improved by comments from Jesse\
    \ Vincent and\n   Colin Benson, by the participants in the Cambridge, MA meeting\
    \ on\n   June 11, 1999, and by Roy Salisbury, who contributed the original\n \
    \  version of Figure 5. The authors gratefully acknowledge their\n   assistance.\n"
- title: 7. Authors' Addresses
  contents:
  - "7. Authors' Addresses\n   Mark Day\n   SightPath, Inc.\n   135 Beaver Street\n\
    \   Waltham, MA 02452\n   USA\n   EMail: mday@alum.mit.edu\n   (Formerly Mark_Day@lotus.com)\n\
    \   Jonathan Rosenberg\n   dynamicsoft\n   200 Executive Drive\n   Suite 120\n\
    \   West Orange, NJ 07046\n   Email: jdrosen@dynamicsoft.com\n   Hiroyasu Sugano\n\
    \   Fujitsu Laboratories Ltd.\n   64 Nishiwaki, Ohkubo-cho\n   Akashi 674-8555\n\
    \   Japan\n   EMail: suga@flab.fujitsu.co.jp\n"
- title: 8. Full Copyright Statement
  contents:
  - "8. Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
