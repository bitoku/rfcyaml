- title: __initial_text__
  contents:
  - '      Session Initiation Protocol Service Example -- Music on Hold

    '
- title: Abstract
  contents:
  - "Abstract\n   \"Music on hold\" is one of the features of telephone systems that\
    \ is\n   most desired by buyers of business telephone systems.  Music on hold\n\
    \   means that when one party to a call has the call \"on hold\", that\n   party's\
    \ telephone provides an audio stream (often music) to be heard\n   by the other\
    \ party.  Architectural features of SIP make it difficult\n   to implement music\
    \ on hold in a way that is fully standards-\n   compliant.  The implementation\
    \ of music on hold described in this\n   document is fully effective, is standards-compliant,\
    \ and has a number\n   of advantages over the methods previously documented. \
    \ In particular,\n   it is less likely to produce peculiar user interface effects\
    \ and more\n   likely to work in systems that perform authentication than the\
    \ music-\n   on-hold method described in Section 2.3 of RFC 5359.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7088.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Requirements Language ......................................4\n  \
    \ 2. Technique .......................................................4\n    \
    \  2.1. Placing a Call on Hold and Establishing an External\n           Media\
    \ Stream ...............................................5\n      2.2. Taking a\
    \ Call off Hold and Terminating the External\n           Media Stream ...............................................6\n\
    \      2.3. Example Message Flow .......................................6\n  \
    \    2.4. Receiving Re-INVITE and UPDATE from the Remote UA .........17\n    \
    \  2.5. Receiving INVITE with Replaces ............................17\n      2.6.\
    \ Receiving REFER from the Remote UA ........................19\n      2.7. Receiving\
    \ Re-INVITE and UPDATE from the\n           Music-on-Hold Source ......................................21\n\
    \      2.8. Handling Payload Type Numbers .............................22\n  \
    \         2.8.1. Analysis ...........................................22\n    \
    \       2.8.2. Solution to the Problem ............................23\n      \
    \     2.8.3. Example of the Solution ............................24\n      2.9.\
    \ Dialog/Session Timers .....................................28\n      2.10. When\
    \ the Media Stream Directionality is \"inactive\" .......28\n      2.11. Multiple\
    \ Media Streams ...................................28\n   3. Advantages .....................................................29\n\
    \   4. Caveats ........................................................30\n  \
    \    4.1. Offering All Available Media Formats ......................30\n    \
    \  4.2. Handling Re-INVITES in a B2BUA ............................31\n   5. Security\
    \ Considerations ........................................31\n      5.1. Network\
    \ Security ..........................................31\n      5.2. SIP (Signaling)\
    \ Security ..................................32\n      5.3. RTP (Media) Security\
    \ ......................................32\n      5.4. Media Filtering ...........................................32\n\
    \   6. Acknowledgments ................................................33\n  \
    \ 7. References .....................................................34\n    \
    \  7.1. Normative References ......................................34\n      7.2.\
    \ Informative References ....................................34\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Within systems based on SIP [RFC3261], it is desirable to\
    \ be able to\n   provide features that are similar to those provided by traditional\n\
    \   telephony systems.  A frequently requested feature is \"music on\n   hold\"\
    : with this feature, when one party to a call has the call \"on\n   hold\", that\
    \ party's telephone provides an audio stream (often music)\n   to be heard by\
    \ the other party.\n   Architectural features of SIP make it difficult to implement\
    \ music on\n   hold in a way that is fully standards-compliant.  The purpose of\
    \ this\n   document is to describe a method that is reasonably simple yet fully\n\
    \   effective and standards-compliant.  This method has significant\n   advantages\
    \ over other methods now in use, as described in Section 3.\n   All current methods\
    \ of implementing music on hold interoperate with\n   each other, in that the\
    \ two user agents in a call can use different\n   methods for implementing music\
    \ on hold with the same functionality as\n   if either of the methods was used\
    \ by both user agents.  Thus, there\n   is no loss of functionality if different\
    \ music-on-hold methods are\n   used by different user agents within a telephone\
    \ system or if a\n   single user agent uses different methods within different\
    \ calls or at\n   different times within one call.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Technique
  contents:
  - "2.  Technique\n   The essence of the technique is that when the executing user\
    \ agent\n   (UA) (the user's UA) performs a re-INVITE of the remote UA (the other\n\
    \   user's UA) to establish the hold state, it provides no Session\n   Description\
    \ Protocol (SDP) [RFC4566] offer [RFC3264] [RFC6337], thus\n   compelling the\
    \ remote UA to provide an SDP offer.  The executing UA\n   then extracts the offer\
    \ SDP from the remote UA's 2xx response and\n   uses that as the offer SDP in\
    \ a new INVITE to the external media\n   source.  The external media source is\
    \ thus directed to provide media\n   directly to the remote UA.  The media source's\
    \ answer SDP is returned\n   to the remote UA in the ACK to the re-INVITE.\n"
- title: 2.1.  Placing a Call on Hold and Establishing an External Media Stream
  contents:
  - "2.1.  Placing a Call on Hold and Establishing an External Media Stream\n   1.\
    \  The executing user instructs the executing UA to put the dialog\n       on\
    \ hold.\n   2.  The executing UA sends a re-INVITE without SDP to the remote UA,\n\
    \       which forces the remote UA to provide an SDP offer in its 2xx\n      \
    \ response.  The Contact header of the re-INVITE includes the\n       '+sip.rendering=\"\
    no\"' field parameter to indicate that it is\n       putting the call on hold\
    \ ([RFC4235], Section 5.2).\n   3.  The remote UA sends a 2xx to the re-INVITE\
    \ and includes an SDP\n       offer giving its own listening address/port.  If\
    \ the remote UA\n       understands the sip.rendering feature parameter, the offer\
    \ may\n       indicate that it will not send media by specifying the media\n \
    \      directionalities as \"recvonly\" (the reverse of \"on hold\") or\n    \
    \   \"inactive\".  But the remote UA may offer to send media.\n   4.  The executing\
    \ UA uses this offer to derive the offer SDP of an\n       initial INVITE that\
    \ it sends to the configured music-on-hold\n       (MOH) source.  The SDP in this\
    \ request is largely copied from the\n       SDP returned by the remote UA in\
    \ the previous step, particularly\n       regarding the provided listening address/port\
    \ and payload type\n       numbers.  But the media directionalities are restricted\
    \ to\n       \"recvonly\" or \"inactive\" as appropriate.  The executing UA may\n\
    \       want or need to change the \"o=\" line.  In addition, some\n       \"\
    a=rtpmap\" lines may need to be added to control the assignment\n       of RTP\
    \ payload type numbers (Section 2.8).\n   5.  The MOH source sends a 2xx response\
    \ to the INVITE, which contains\n       an SDP answer that should include its\
    \ media source address as its\n       listening address/port.  This SDP must necessarily\
    \ specify\n       \"sendonly\" or \"inactive\" as the directionality for all media\n\
    \       streams [RFC3264].\n       Although this address/port should receive no\
    \ RTP, the specified\n       port determines the port for receiving the RTP Control\
    \ Protocol\n       (RTCP) (and conventionally, for sending RTCP [RFC4961]).\n\
    \       By convention, UAs use their declared RTP listening ports as\n       their\
    \ RTP source ports as well [RFC4961].  The answer SDP will\n       reach the remote\
    \ UA, thus informing it of the address/port from\n       which the MOH media will\
    \ come and presumably preventing the\n       remote UA from ignoring the MOH media\
    \ if the remote UA filters\n       media packets based on the source address.\
    \  This functionality\n       requires the SDP answer to contain the sending address\
    \ in the\n       \"c=\" line, even though the MOH source does not receive RTP.\n\
    \   6.  The executing UA sends this SDP answer as its SDP answer in the\n    \
    \   ACK for the re-INVITE to the remote UA.  The \"o=\" line in the\n       answer\
    \ must be modified to be within the sequence of \"o=\" lines\n       previously\
    \ generated by the executing UA in the dialog.  Any\n       dynamic payload type\
    \ number assignments that have been created in\n       the answer must be recorded\
    \ in the state of the original dialog.\n   7.  Due to the sip.rendering feature\
    \ parameter in the Contact header\n       of the re-INVITE and the media directionality\
    \ in the SDP answer\n       contained in the ACK, the on-hold state of the dialog\
    \ is\n       established (at the executing end).\n   8.  After this point, the\
    \ MOH source generates RTP containing the\n       music-on-hold media and sends\
    \ it directly to the listening\n       address/port of the remote UA.  The executing\
    \ UA maintains two\n       dialogs (one to the remote UA, one to the MOH source)\
    \ but does\n       not see or handle the MOH RTP.\n"
- title: 2.2.  Taking a Call off Hold and Terminating the External Media Stream
  contents:
  - "2.2.  Taking a Call off Hold and Terminating the External Media Stream\n   1.\
    \  The executing user instructs the executing UA to take the dialog\n       off\
    \ hold.\n   2.  The executing UA sends a re-INVITE to the remote UA with SDP that\n\
    \       requests to receive media.  The Contact header of the re-INVITE\n    \
    \   does not include the '+sip.rendering=\"no\"' field parameter.  (It\n     \
    \  may contain a sip.rendering field parameter with value \"yes\" or\n       \"\
    unknown\", or it may omit the field parameter.)  Thus, this\n       re-INVITE\
    \ removes the on-hold state of the dialog (at the\n       executing end).  (Note\
    \ that the version in \"o=\" line of the\n       offered SDP must account for\
    \ the SDP versions that were passed\n       through from the MOH source.  Also\
    \ note that any payload type\n       numbers that were assigned in SDP provided\
    \ by the MOH source must\n       be respected.)\n   3.  When the remote UA sends\
    \ a 2xx response to the re-INVITE, the\n       executing UA sends a BYE request\
    \ in the dialog to the MOH source.\n   4.  After this point, the MOH source does\
    \ not generate RTP and\n       ordinary RTP flow is reestablished in the original\
    \ dialog.\n"
- title: 2.3.  Example Message Flow
  contents:
  - "2.3.  Example Message Flow\n   This section shows a message flow that is an example\
    \ of this\n   technique.  The scenario is as follows.  Alice establishes a call\n\
    \   with Bob.  Bob then places the call on hold, with music on hold\n   provided\
    \ from an external source.  Bob then takes the call off hold.\n   In this scenario,\
    \ Bob's user agent is the executing UA, while Alice's\n   UA is the remote UA.\
    \  Note that this is just one possible message\n   flow that illustrates this\
    \ technique; numerous variations on these\n   operations are allowed by the applicable\
    \ standards.\n   Alice             Bob       Music Source\n   Alice establishes\
    \ the call:\n     |                |              |\n     |    INVITE F1   | \
    \             |\n     |--------------->|              |\n     | 180 Ringing F2\
    \ |              |\n     |<---------------|              |\n     |    200 OK F3\
    \   |              |\n     |<---------------|              |\n     |     ACK F4\
    \     |              |\n     |--------------->|              |\n     |       RTP\
    \      |              |\n     |<==============>|              |\n     |      \
    \          |              |\n   Bob places Alice on hold, compelling Alice's UA\
    \ to provide SDP:\n     |                |              |\n     |   INVITE F5\
    \    |              |\n     |   (no SDP)     |              |\n     |<---------------|\
    \              |\n     |   200 OK F6    |              |\n     |   (SDP offer)\
    \  |              |\n     |--------------->|              |\n     |          \
    \      |              |\n   Bob's UA initiates music on hold:\n     |        \
    \        |              |\n     |                |  INVITE F7   |\n     |    \
    \            |  (SDP offer, |\n     |                |   rev. hold) |\n     |\
    \                |------------->|\n     |                | 200 OK F8    |\n  \
    \   |                | (SDP answer, |\n     |                |  hold)       |\n\
    \     |                |<-------------|\n     |                |    ACK F9   \
    \ |\n     |                |------------->|\n     |                |         \
    \     |\n   Bob's UA provides an SDP answer containing the address/port\n   of\
    \ Music Source:\n     |                |              |\n     | ACK F10      \
    \  |              |\n     | (SDP answer,   |              |\n     |  hold)   \
    \      |              |\n     |<---------------|              |\n     |    no\
    \ RTP      |              |\n     |<..............>|              |\n     |  \
    \   Music-on-hold RTP         |\n     |<==============================|\n    \
    \ |                |              |\n   The music on hold is active.\n   Bob takes\
    \ Alice off hold:\n     |                |              |\n     |  INVITE F11\
    \    |              |\n     |  (SDP offer)   |              |\n     |<---------------|\
    \              |\n     |   200 OK F12   |              |\n     |   (SDP answer)\
    \ |              |\n     |--------------->|              |\n     |     ACK F13\
    \    |              |\n     |<---------------|              |\n     |        \
    \        |    BYE F14   |\n     |                |------------->|\n     |    \
    \            |    200 F15   |\n     |                |<-------------|\n     |\
    \       RTP      |              |\n     |<==============>|              |\n  \
    \   |                |              |\n   The normal media session between Alice\
    \ and Bob is resumed.\n   /* Alice calls Bob. */\n   F1 INVITE Alice -> Bob\n\
    \   INVITE sips:bob@biloxi.example.com SIP/2.0\n   Via: SIP/2.0/TLS atlanta.example.com:5061\n\
    \    ;branch=z9hG4bK74bf9\n   Max-Forwards: 70\n   From: Alice <sips:alice@atlanta.example.com>;tag=1234567\n\
    \   To: Bob <sips:bob@biloxi.example.com>\n   Call-ID: 12345600@atlanta.example.com\n\
    \   CSeq: 1 INVITE\n   Contact: <sips:a8342043f@atlanta.example.com;gr>\n   Allow:\
    \ INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY\n   Supported: replaces, gruu\n\
    \   Content-Type: application/sdp\n   Content-Length: [omitted]\n   v=0\n   o=alice\
    \ 2890844526 2890844526 IN IP4 atlanta.example.com\n   s=\n   c=IN IP4 atlanta.example.com\n\
    \   t=0 0\n   m=audio 49170 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n   F2 180 Ringing\
    \ Bob -> Alice\n   SIP/2.0 180 Ringing\n   Via: SIP/2.0/TLS atlanta.example.com:5061\n\
    \    ;branch=z9hG4bK74bf9\n    ;received=192.0.2.103\n   From: Alice <sips:alice@atlanta.example.com>;tag=1234567\n\
    \   To: Bob <sips:bob@biloxi.example.com>;tag=23431\n   Call-ID: 12345600@atlanta.example.com\n\
    \   CSeq: 1 INVITE\n   Contact: <sips:bob@biloxi.example.com>\n   Content-Length:\
    \ 0\n   F3 200 OK Bob -> Alice\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TLS atlanta.example.com:5061\n\
    \    ;branch=z9hG4bK74bf9\n    ;received=192.0.2.103\n   From: Alice <sips:alice@atlanta.example.com>;tag=1234567\n\
    \   To: Bob <sips:bob@biloxi.example.com>;tag=23431\n   Call-ID: 12345600@atlanta.example.com\n\
    \   CSeq: 1 INVITE\n   Contact: <sips:bob@biloxi.example.com>\n   Allow: INVITE,\
    \ ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY\n   Supported: replaces\n   Content-Type:\
    \ application/sdp\n   Content-Length: [omitted]\n   v=0\n   o=bob 2890844527 2890844527\
    \ IN IP4 biloxi.example.com\n   s=\n   c=IN IP4 biloxi.example.com\n   t=0 0\n\
    \   m=audio 3456 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n   F4 ACK Alice -> Bob\n\
    \   ACK sips:bob@biloxi.example.com SIP/2.0\n   Via: SIP/2.0/TLS atlanta.example.com:5061\n\
    \    ;branch=z9hG4bK74bfd\n   Max-Forwards: 70\n   From: Alice <sips:alice@atlanta.example.com>;tag=1234567\n\
    \   To: Bob <sips:bob@biloxi.example.com>;tag=23431\n   Call-ID: 12345600@atlanta.example.com\n\
    \   CSeq: 1 ACK\n   Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY\n\
    \   Supported: replaces\n   Content-Length: 0\n   /* Bob places Alice on hold.\
    \ */\n   /* The re-INVITE contains no SDP, thus compelling Alice's UA\n      to\
    \ provide an offer. */\n   F5 INVITE Bob -> Alice\n   INVITE sips:a8342043f@atlanta.example.com;gr\
    \ SIP/2.0\n   Via: SIP/2.0/TLS biloxi.example.com:5061\n    ;branch=z9hG4bK874bk\n\
    \   To: Alice <sips:alice@atlanta.example.com>;tag=1234567\n   From: Bob <sips:bob@biloxi.example.com>;tag=23431\n\
    \   Call-ID: 12345600@atlanta.example.com\n   CSeq: 712 INVITE\n   Contact: <sips:bob@biloxi.example.com>;+sip.rendering=\"\
    no\"\n   Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY\n   Supported:\
    \ replaces\n   Content-Length: 0\n   /* Alice's UA provides an SDP offer.\n  \
    \    Since it does not know that it is being put on hold,\n      the offer is\
    \ the same as the original offer and describes\n      bidirectional media. */\n\
    \   F6 200 OK Alice -> Bob\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TLS biloxi.example.com:5061\n\
    \    ;branch=z9hG4bK874bk\n    ;received=192.0.2.105\n   To: Alice <sips:alice@atlanta.example.com>;tag=1234567\n\
    \   From: Bob <sips:bob@biloxi.example.com>;tag=23431\n   Call-ID: 12345600@atlanta.example.com\n\
    \   CSeq: 712 INVITE\n   Contact: <sips:a8342043f@atlanta.example.com;gr>\n  \
    \ Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY\n   Supported: replaces,\
    \ gruu\n   Content-Type: application/sdp\n   Content-Length: [omitted]\n   v=0\n\
    \   o=alice 2890844526 2890844526 IN IP4 atlanta.example.com\n   s=\n   c=IN IP4\
    \ atlanta.example.com\n   t=0 0\n   m=audio 49170 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n\
    \   a=active\n   /* Bob's UA initiates music on hold. */\n   /* This INVITE contains\
    \ Alice's offer, but with the media\n      direction set to \"reverse hold\",\
    \ receive-only. */\n   F7 INVITE Bob -> Music Source\n   INVITE sips:music@source.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TLS biloxi.example.com:5061\n    ;branch=z9hG4bKnashds9\n\
    \   Max-Forwards: 70\n   From: Bob <sips:bob@biloxi.example.com>;tag=02134\n \
    \  To: Music Source <sips:music@source.example.com>\n   Call-ID: 4802029847@biloxi.example.com\n\
    \   CSeq: 1 INVITE\n   Contact: <sips:bob@biloxi.example.com>\n   Allow: INVITE,\
    \ ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY\n   Supported: replaces, gruu\n   Content-Type:\
    \ application/sdp\n   Content-Length: [omitted]\n   v=0\n   o=bob 2890844534 2890844534\
    \ IN IP4 atlanta.example.com\n   s=\n   c=IN IP4 atlanta.example.com\n   t=0 0\n\
    \   m=audio 49170 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n   a=recvonly\n   F8 200\
    \ OK Music Source -> Bob\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TLS biloxi.example.com:5061\n\
    \    ;branch=z9hG4bKnashds9\n    ;received=192.0.2.105\n   From: Bob <sips:bob@biloxi.example.com>;tag=02134\n\
    \   To: Music Source <sips:music@source.example.com>;tag=56323\n   Call-ID: 4802029847@biloxi.example.com\n\
    \   Contact: <sips:music@source.example.com>;automaton\n        ;+sip.byeless;+sip.rendering=\"\
    no\"\n   CSeq: 1 INVITE\n   Content-Length: [omitted]\n   v=0\n   o=MusicSource\
    \ 2890844576 2890844576 IN IP4 source.example.com\n   s=\n   c=IN IP4 source.example.com\n\
    \   t=0 0\n   m=audio 49170 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n   a=sendonly\n\
    \   F9 ACK Bob -> Music Source\n   ACK sips:music@source.example.com SIP/2.0\n\
    \   Via: SIP/2.0/TLS source.example.com:5061\n    ;branch=z9hG4bK74bT6\n   From:\
    \ Bob <sips:bob@biloxi.example.com>;tag=02134\n   To: Music Source <sips:music@source.example.com>;tag=56323\n\
    \   Max-Forwards: 70\n   Call-ID: 4802029847@biloxi.example.com\n   CSeq: 1 ACK\n\
    \   Content-Length: 0\n   /* Bob's UA now sends the ACK that completes the re-INVITE\n\
    \      to Alice and completes the SDP offer/answer.\n      The ACK contains the\
    \ SDP received from Music Source and thus\n      contains the address/port from\
    \ which Music Source will send media,\n      and implies the address/port that\
    \ Music\n      Source will use to send/receive RTCP. */\n   F10 ACK Bob -> Alice\n\
    \   ACK sips:a8342043f@atlanta.example.com;gr SIP/2.0\n   Via: SIP/2.0/TLS biloxi.example.com:5061\n\
    \    ;branch=z9hG4bKq874b\n   To: Alice <sips:alice@atlanta.example.com>;tag=1234567\n\
    \   From: Bob <sips:bob@biloxi.example.com>;tag=23431\n   Call-ID: 12345600@atlanta.example.com\n\
    \   CSeq: 712 ACK\n   Contact: <sips:bob@biloxi.example.com>;+sip.rendering=\"\
    no\"\n   Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY\n   Supported:\
    \ replaces\n   Content-Length: [omitted]\n   v=0\n   o=bob 2890844527 2890844528\
    \ IN IP4 biloxi.example.com\n   s=\n   c=IN IP4 source.example.com\n   t=0 0\n\
    \   m=audio 49170 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n   a=sendonly\n   /* Bob\
    \ picks up the call by sending a re-INVITE to Alice. */\n   F11 INVITE Bob ->\
    \ Alice\n   INVITE sips:a8342043f@atlanta.example.com;gr SIP/2.0\n   Via: SIP/2.0/TLS\
    \ biloxi.example.com:5061\n    ;branch=z9hG4bK874bk\n   To: Alice <sips:alice@atlanta.example.com>;tag=1234567\n\
    \   From: Bob <sips:bob@biloxi.example.com>;tag=23431\n   Call-ID: 12345600@atlanta.example.com\n\
    \   CSeq: 713 INVITE\n   Contact: <sips:bob@biloxi.example.com>\n   Allow: INVITE,\
    \ ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY\n   Supported: replaces\n   Content-Type:\
    \ application/sdp\n   Content-Length: [omitted]\n   v=0\n   o=bob 2890844527 2890844529\
    \ IN IP4 biloxi.example.com\n   s=\n   c=IN IP4 biloxi.example.com\n   t=0 0\n\
    \   m=audio 3456 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n   F12 200 OK Alice -> Bob\n\
    \   SIP/2.0 200 OK\n   Via: SIP/2.0/TLS biloxi.example.com:5061\n    ;branch=z9hG4bK874bk\n\
    \    ;received=192.0.2.105\n   To: Alice <sips:alice@atlanta.example.com>;tag=1234567\n\
    \   From: Bob <sips:bob@biloxi.example.com>;tag=23431\n   Call-ID: 12345600@atlanta.example.com\n\
    \   CSeq: 713 INVITE\n   Contact: <sips:a8342043f@atlanta.example.com;gr>\n  \
    \ Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY\n   Supported: replaces,\
    \ gruu\n   Content-Type: application/sdp\n   Content-Length: [omitted]\n   v=0\n\
    \   o=alice 2890844526 2890844527 IN IP4 atlanta.example.com\n   s=\n   c=IN IP4\
    \ atlanta.example.com\n   t=0 0\n   m=audio 49170 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n\
    \   F13 ACK Bob -> Alice\n   ACK sips:a8342043f@atlanta.example.com;gr SIP/2.0\n\
    \   Via: SIP/2.0/TLS biloxi.example.com:5061\n    ;branch=z9hG4bKq874b\n   To:\
    \ Alice <sips:alice@atlanta.example.com>;tag=1234567\n   From: Bob <sips:bob@biloxi.example.com>;tag=23431\n\
    \   Call-ID: 12345600@atlanta.example.com\n   CSeq: 713 ACK\n   Contact: <sips:bob@biloxi.example.com>\n\
    \   Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY\n   Supported: replaces\n\
    \   Content-Length: 0\n   F14 BYE Bob -> Music Source\n   BYE sips:music@source.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TLS biloxi.example.com:5061\n    ;branch=z9hG4bK74rf\n\
    \   Max-Forwards: 70\n   From: Bob <sips:bob@biloxi.example.com>;tag=02134\n \
    \  To: Music Source <sips:music@source.example.com>;tag=56323\n   Call-ID: 4802029847@biloxi.example.com\n\
    \   CSeq: 2 BYE\n   Contact: <sips:bob@biloxi.example.com>\n   Allow: INVITE,\
    \ ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY\n   Supported: replaces, gruu\n   Content-Length:\
    \ [omitted]\n   F15 200 OK Music Source -> Bob\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TLS\
    \ atlanta.example.com:5061\n    ;branch=z9hG4bK74rf\n    ;received=192.0.2.103\n\
    \   From: Bob <sips:bob@biloxi.example.com>;tag=02134\n   To: Music Source <sips:music@source.example.com>;tag=56323\n\
    \   Call-ID: 4802029847@biloxi.example.com\n   Contact: <sips:music@source.example.com>;automaton\n\
    \        ;+sip.byeless;+sip.rendering=\"no\"\n   CSeq: 2 BYE\n   Content-Length:\
    \ 0\n   /* Normal media session between Alice and Bob is resumed. */\n"
- title: 2.4.  Receiving Re-INVITE and UPDATE from the Remote UA
  contents:
  - "2.4.  Receiving Re-INVITE and UPDATE from the Remote UA\n   While the call is\
    \ on hold, the remote UA can send a request to modify\n   the SDP or the feature\
    \ parameters of its Contact header.  This can be\n   done with either an INVITE\
    \ or UPDATE method, both of which have much\n   the same effect in regard to MOH.\n\
    \   A common reason for a re-INVITE is when the remote UA desires to put\n   the\
    \ dialog on hold on its end.  And because of the need to support\n   this case,\
    \ an implementation must process INVITEs and UPDATEs during\n   the on-hold state\
    \ as described below.\n   The executing UA handles these requests by echoing requests\
    \ and\n   responses: an incoming request from the remote UA causes the\n   executing\
    \ UA to send a similar request to the MOH source, and an\n   incoming response\
    \ from the MOH source causes the executing UA to send\n   a similar response to\
    \ the remote UA.  In all cases, SDP offers or\n   answers that are received are\
    \ added as bodies to the stimulated\n   request or response to the other UA.\n\
    \   The passed-through SDP will usually need its \"o=\" line modified.  The\n\
    \   directionality attributes may need to be restricted by changing\n   \"active\"\
    \ to \"recvonly\" and \"sendonly\" to \"inactive\", as the executing\n   UA will\
    \ not render media from the remote UA.  (If all passed-through\n   directionality\
    \ attributes are \"inactive\", the optimization described\n   in Section 2.10\
    \ may be applied.)  In regard to payload type numbers,\n   since the mapping has\
    \ already been established within the MOH dialog,\n   \"a=rtpmap\" lines need\
    \ not be added.\n"
- title: 2.5.  Receiving INVITE with Replaces
  contents:
  - "2.5.  Receiving INVITE with Replaces\n   The executing UA must be prepared to\
    \ receive an INVITE request with a\n   Replaces header that specifies the dialog\
    \ with the remote UA.  If the\n   executing UA wants to create this new dialog\
    \ in the on-hold state, it\n   creates a new dialog with the MOH source to obtain\
    \ MOH.  The\n   executing UA negotiates the SDP within the dialog created by the\n\
    \   INVITE with Replaces by passing the offer through to the new MOH\n   dialog\
    \ (if the INVITE contains an offer) or by creating the new MOH\n   dialog with\
    \ an offerless INVITE (if the INVITE does not contain an\n   offer).\n   Continuing\
    \ the example of Section 2.3, the executing UA receives an\n   INVITE with Replaces\
    \ that contains an offer:\n   Alice             Bob       Music Source       \
    \   Carol\n   (For example, Alice has called Carol and initiates an attended\n\
    \   transfer by sending a REFER to Carol, causing Carol to send an\n   INVITE\
    \ with Replaces to Bob.)\n   Bob receives INVITE with Replaces from Carol:\n \
    \    |                |              |                 |\n     |             \
    \   |              | INVITE/Replaces |\n     |                |              |\
    \ From: Carol     |\n     |                |              | To: Bob         |\n\
    \     |                |              | (SDP offer)     |\n     |            \
    \    |<-------------------------------|\n     |                | INVITE      \
    \ |                 |\n     |                | From: Bob    |                \
    \ |\n     |                | To: Music Source               |\n     |        \
    \        | (SDP offer,  |                 |\n     |                |  rev. hold)\
    \  |                 |\n     |                |------------->|               \
    \  |\n     |                | 200 OK       |                 |\n     |       \
    \         | From: Bob    |                 |\n     |                | To: Music\
    \ Source               |\n     |                | (SDP answer, |             \
    \    |\n     |                |  hold)       |                 |\n     |     \
    \           |<-------------|                 |\n     |                | ACK  \
    \        |                 |\n     |                | From: Bob    |         \
    \        |\n     |                | To: Music Source               |\n     | \
    \               |------------->|                 |\n     |                |  \
    \            | 200 OK          |\n     |                |              | From:\
    \ Carol     |\n     |                |              | To: Bob         |\n    \
    \ |                |              | (SDP answer,    |\n     |                |\
    \              |  hold)          |\n     |                |------------------------------->|\n\
    \     |                |              | ACK             |\n     |            \
    \    |              | From: Carol     |\n     |                |             \
    \ | To: Bob         |\n     |                |<-------------------------------|\n\
    \     |                |              | Music-on-hold RTP\n     |            \
    \    |              |================>|\n     |                |             \
    \ |                 |\n   Bob terminates the previous dialog with Alice:\n   \
    \  |                |              |                 |\n     | BYE           \
    \ |              |                 |\n     | From: Bob      |              | \
    \                |\n     | To: Alice      |              |                 |\n\
    \     |<---------------|              |                 |\n     | 200 OK     \
    \    |              |                 |\n     | From: Bob      |             \
    \ |                 |\n     | To: Alice      |              |                \
    \ |\n     |--------------->|              |                 |\n     |        \
    \        |              |                 |\n   Bob terminates the MOH dialog\
    \ for the dialog with Alice:\n     |                |              |         \
    \        |\n     |                | BYE          |                 |\n     | \
    \               | From: Bob    |                 |\n     |                | To:\
    \ Music Source               |\n     |                |------------->|       \
    \          |\n     |                | 200 OK       |                 |\n     |\
    \                | From: Music Source             |\n     |                | To:\
    \ Bob      |                 |\n     |                |<-------------|       \
    \          |\n     |                |              |                 |\n   The\
    \ new session continues on hold, between Bob and Carol.\n"
- title: 2.6.  Receiving REFER from the Remote UA
  contents:
  - "2.6.  Receiving REFER from the Remote UA\n   The executing UA must be prepared\
    \ to receive a REFER request within\n   the dialog with the remote UA.  The SDP\
    \ within the dialog created by\n   the REFER is negotiated by sending an offerless\
    \ INVITE (or offerless\n   re-INVITE) to the MOH source to obtain an offer and\
    \ then using that\n   offer in the INVITE to the refer target.\n   Similar processing\
    \ is used for an out-of-dialog REFER whose Target-\n   Dialog header refers to\
    \ the dialog with the remote UA.\n   Continuing the example of Section 2.3, the\
    \ executing UA receives an\n   INVITE with Replaces that contains an offer:\n\
    \   Alice             Bob       Music Source          Carol\n   (For example,\
    \ Alice initiates an unattended transfer of the call to\n   Carol by sending a\
    \ REFER to Bob.)\n   Bob receives REFER from Alice:\n     |                | \
    \             |                 |\n     | REFER          |              |    \
    \             |\n     | From: Bob      |              |                 |\n  \
    \   | To: Alice      |              |                 |\n     | Refer-To: Carol|\
    \              |                 |\n     |--------------->|              |   \
    \              |\n     |                | re-INVITE    |                 |\n \
    \    |                | From: Bob    |                 |\n     |             \
    \   | To: Music Source               |\n     |                | (no SDP)     |\
    \                 |\n     |                |------------->|                 |\n\
    \     |                | 200 OK       |                 |\n     |            \
    \    | From: Bob    |                 |\n     |                | To: Music Source\
    \               |\n     |                | (SDP offer,  |                 |\n\
    \     |                |  hold)       |                 |\n     |            \
    \    |<-------------|                 |\n     |                |             \
    \ | INVITE          |\n     |                |              | From: Bob      \
    \ |\n     |                |              | To: Carol       |\n     |        \
    \        |              | (SDP offer,     |\n     |                |         \
    \     |  hold)          |\n     |                |------------------------------->|\n\
    \     |                |              | 200 OK          |\n     |            \
    \    |              | From: Bob       |\n     |                |             \
    \ | To: Carol       |\n     |                |              | (SDP answer,   \
    \ |\n     |                |              |  rev. hold)     |\n     |        \
    \        |------------------------------->|\n     |                | ACK     \
    \     |                 |\n     |                | From: Bob    |            \
    \     |\n     |                | To: Music Source               |\n     |    \
    \            | (SDP answer, |                 |\n     |                |  rev.\
    \ hold)  |                 |\n     |                |------------->|         \
    \        |\n     |                |              | ACK             |\n     | \
    \               |              | From: Bob       |\n     |                |  \
    \            | To: Carol       |\n     |                |------------------------------->|\n\
    \     |                |              | Music-on-hold RTP\n     |            \
    \    |              |================>|\n     |                |             \
    \ |                 |\n   Bob terminates the previous dialog with Alice:\n   \
    \  |                |              |                 |\n     | BYE           \
    \ |              |                 |\n     | From: Bob      |              | \
    \                |\n     | To: Alice      |              |                 |\n\
    \     |<---------------|              |                 |\n     | 200 OK     \
    \    |              |                 |\n     | From: Bob      |             \
    \ |                 |\n     | To: Alice      |              |                \
    \ |\n     |--------------->|              |                 |\n     |        \
    \        |              |                 |\n"
- title: 2.7.  Receiving Re-INVITE and UPDATE from the Music-on-Hold Source
  contents:
  - "2.7.  Receiving Re-INVITE and UPDATE from the Music-on-Hold Source\n   It is\
    \ possible for the MOH source to send a re-INVITE or UPDATE\n   request, and the\
    \ executing UA can support doing so in similar manner\n   as requests from the\
    \ remote UA.  However, if the MOH source is within\n   the same administrative\
    \ domain as the executing UA, the executing UA\n   may have knowledge that the\
    \ MOH source will not (or need not) make\n   such requests and so can respond\
    \ to any such request with a failure\n   response, avoiding the need to pass the\
    \ request through.  The 403\n   (Forbidden) response is suitable for this purpose\
    \ because [RFC3261]\n   specifies that this response indicates \"the request SHOULD\
    \ NOT be\n   repeated\".\n   However, in an environment in which Interactive Connectivity\n\
    \   Establishment (ICE) [RFC5245] is supported, the MOH source may need\n   to\
    \ send requests as part of ICE negotiation with the remote UA.\n   Hence, in environments\
    \ that support ICE, the executing UA must be\n   able to pass through requests\
    \ from the MOH source as well as requests\n   from the remote UA.\n   Again, as\
    \ SDP is passed through, its \"o=\" line will need to be\n   modified.  In some\
    \ cases, the directionality attributes will need to\n   be restricted.\n"
- title: 2.8.  Handling Payload Type Numbers
  contents:
  - '2.8.  Handling Payload Type Numbers

    '
- title: 2.8.1.  Analysis
  contents:
  - "2.8.1.  Analysis\n   In this technique, the MOH source generates an SDP answer\
    \ that the\n   executing UA presents to the remote UA as an answer within the\n\
    \   original dialog.  In basic functionality, this presents no problem,\n   because\
    \ [RFC3264], Section 6.1 (at the very end) specifies that the\n   payload type\
    \ numbers used in either direction of RTP are the ones\n   specified in the SDP\
    \ sent by the recipient of the RTP.  Thus, the MOH\n   source will send RTP to\
    \ the remote UA using the payload type numbers\n   specified in the offer SDP\
    \ it received (ultimately) from the remote\n   UA.\n   But strict compliance to\
    \ [RFC3264], Section 8.3.2 requires that\n   payload type numbers used in SDP\
    \ may only duplicate the payload type\n   numbers used in any previous SDP sent\
    \ in the same direction if the\n   payload type numbers represent the same media\
    \ format (codec) as they\n   did previously.  However, the MOH source has no knowledge\
    \ of the\n   payload type numbers previously used in the original dialog, and\
    \ it\n   may accidentally specify a different media format for a previously\n\
    \   used payload type number in its answer (or in a subsequently\n   generated\
    \ INVITE or UPDATE).  This would cause no problem with media\n   decoding, as\
    \ it cannot send any format that was not in the remote\n   UA's offer, but it\
    \ would violate [RFC3264].\n   Strictly speaking, it is impossible to avoid this\
    \ problem because the\n   generator of a first answer in its dialog can choose\
    \ the payload\n   numbers independently of the payload numbers in the offer, and\
    \ the\n   MOH server believes that its answer is first in the dialog.  Thus,\n\
    \   the only absolute solution is to have the executing UA rewrite the\n   SDP\
    \ that passes through it to reassign payload type numbers, which\n   would also\
    \ require it to rewrite the payload type numbers in the RTP\n   packets -- a very\
    \ undesirable solution.\n   The difficulty solving this problem (and similar problems\
    \ in other\n   situations) argues that strict adherence should not be required\
    \ to\n   the rule that payload type numbers not be reused for different\n   codecs.\n\
    \   If an implementation of this technique were to interact with a remote\n  \
    \ UA that requires strict compliance to [RFC3264], the remote UA might\n   reject\
    \ the SDP provided by the MOH server.  (In Section 2.3, this SDP\n   is in message\
    \ F10.)  As a result, the MOH session will not be\n   established, and the call\
    \ will remain in its initial state.\n   Implementors that wish to avoid this situation\
    \ need to implement the\n   solution in Section 2.8.2.\n"
- title: 2.8.2.  Solution to the Problem
  contents:
  - "2.8.2.  Solution to the Problem\n   We can construct a technique that will strictly\
    \ adhere to the payload\n   type rule by exploiting a SHOULD-level requirement\
    \ in [RFC3264],\n   Section 6.1: \"In the case of RTP, if a particular codec was\n\
    \   referenced with a specific payload type number in the offer, that\n   same\
    \ payload type number SHOULD be used for that codec in the\n   answer\".  Or rather,\
    \ we exploit the \"implied requirement\" that if a\n   specific payload number\
    \ in the offer is used for a particular codec,\n   then the answer should not\
    \ use that payload number for a different\n   codec.  If the MOH source obeys\
    \ this restriction, the executing UA\n   can modify the offer SDP to \"reserve\"\
    \ all payload type numbers that\n   have ever been offered by the executing UA\
    \ to prevent the MOH source\n   from using them for different media formats.\n\
    \   When the executing UA is composing the INVITE to the MOH source, it\n   compiles\
    \ a list of all the (dynamically assigned) payload type\n   numbers and associated\
    \ media formats that have been used by it (or by\n   MOH sources on its behalf)\
    \ in the original dialog.  (The executing UA\n   must maintain a list of all previously\
    \ used payload type numbers\n   anyway, in order to comply with [RFC3264].)\n\
    \   Any payload type number that is present in the offer but has been\n   used\
    \ previously by the executing UA in the original dialog for a\n   different media\
    \ format is rewritten to describe a dummy media format.\n   (One dummy media format\
    \ name can be used for many payload type\n   numbers as multiple payload type\
    \ numbers can refer to the same media\n   format.)  A payload type number is added\
    \ to describe the deleted\n   media format, the number being either previously\
    \ unused or previously\n   used by the executing UA for that media format.\n \
    \  Any further payload type numbers that have been used by the executing\n   UA\
    \ in the original dialog but that are not mapped to a media format\n   in the\
    \ current offer are then mapped to a dummy media format.\n   The result is that\
    \ the modified offer SDP:\n   1.  offers the same set of media formats (ignoring\
    \ dummies) as the\n       original offer SDP (though possibly with different payload\
    \ type\n       numbers),\n   2.  associates every payload type number either with\
    \ a dummy media\n       format or with the media format that the executing UA\
    \ has\n       previously used it for, and\n   3.  provides a (real or dummy) media\
    \ format for every payload type\n       number that the executing UA has previously\
    \ used.\n   These properties are sufficient to force an MOH server that obeys\
    \ the\n   implied requirement to generate an answer that is a correct answer to\n\
    \   the original offer and is also compatible with previous SDP from the\n   executing\
    \ UA.\n   Note that any re-INVITEs from the remote UA that the executing UA\n\
    \   passes through to the MOH server require similar modification, as\n   payload\
    \ type numbers that the MOH server receives in past offers are\n   not absolutely\
    \ reserved against its use (as they have not been sent\n   in SDP by the MOH server)\
    \ nor is there a SHOULD-level proscription\n   against using them in the current\
    \ answer (as they do not appear in\n   the current offer).\n   This should provide\
    \ an adequate solution to the problems with payload\n   type numbers, as it will\
    \ fail only if (1) the remote UA is particular\n   that other UAs follow the rule\
    \ about not redefining payload type\n   numbers, and (2) the MOH server does not\
    \ follow the implied\n   requirement of [RFC3264], Section 6.1.\n"
- title: 2.8.3.  Example of the Solution
  contents:
  - "2.8.3.  Example of the Solution\n   Let us show how this process works by modifying\
    \ the example of\n   Section 2.3 with this specific assignment of supported codecs:\n\
    \      Alice supports formats X and Y.\n      Bob supports formats X and Z.\n\
    \      Music Source supports formats Y and Z.\n   In this case, the SDP exchanges\
    \ are:\n      F1 offers X and Y, F3 answers X and Z.  (Only X can be used.)\n\
    \      F6 offers X and Y, but F7 offers X, Y, and a place-holder to block\n  \
    \    use of type 92.\n      F8/F10 answers Y.\n   The messages that are changed\
    \ from Section 2.3 are:\n    F1 INVITE Alice -> Bob\n    INVITE sips:bob@biloxi.example.com\
    \ SIP/2.0\n    Via: SIP/2.0/TLS atlanta.example.com:5061\n     ;branch=z9hG4bK74bf9\n\
    \    Max-Forwards: 70\n    From: Alice <sips:alice@atlanta.example.com>;tag=1234567\n\
    \    To: Bob <sips:bob@biloxi.example.com>\n    Call-ID: 12345600@atlanta.example.com\n\
    \    CSeq: 1 INVITE\n    Contact: <sips:a8342043f@atlanta.example.com;gr>\n  \
    \  Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY\n    Supported: replaces,\
    \ gruu\n    Content-Type: application/sdp\n    Content-Length: [omitted]\n   \
    \ v=0\n    o=alice 2890844526 2890844526 IN IP4 atlanta.example.com\n    s=\n\
    \    c=IN IP4 atlanta.example.com\n    t=0 0\n    m=audio 49170 RTP/AVP 90 91\n\
    \    a=rtpmap:90 X/8000\n    a=rtpmap:91 Y/8000\n    F3 200 OK Bob -> Alice\n\
    \    SIP/2.0 200 OK\n    Via: SIP/2.0/TLS atlanta.example.com:5061\n     ;branch=z9hG4bK74bf9\n\
    \     ;received=192.0.2.103\n    From: Alice <sips:alice@atlanta.example.com>;tag=1234567\n\
    \    To: Bob <sips:bob@biloxi.example.com>;tag=23431\n    Call-ID: 12345600@atlanta.example.com\n\
    \    CSeq: 1 INVITE\n    Contact: <sips:bob@biloxi.example.com>\n    Allow: INVITE,\
    \ ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY\n    Supported: replaces\n    Content-Type:\
    \ application/sdp\n    Content-Length: [omitted]\n    v=0\n    o=bob 2890844527\
    \ 2890844527 IN IP4 biloxi.example.com\n    s=\n    c=IN IP4 biloxi.example.com\n\
    \    t=0 0\n    m=audio 3456 RTP/AVP 90 92\n    a=rtpmap:90 X/8000\n    a=rtpmap:92\
    \ Z/8000\n    F6 200 OK Alice -> Bob\n    SIP/2.0 200 OK\n    Via: SIP/2.0/TLS\
    \ biloxi.example.com:5061\n     ;branch=z9hG4bK874bk\n     ;received=192.0.2.105\n\
    \    To: Alice <sips:alice@atlanta.example.com>;tag=1234567\n    From: Bob <sips:bob@biloxi.example.com>;tag=23431\n\
    \    Call-ID: 12345600@atlanta.example.com\n    CSeq: 712 INVITE\n    Contact:\
    \ <sips:a8342043f@atlanta.example.com;gr>\n    Allow: INVITE, ACK, CANCEL, OPTIONS,\
    \ BYE, REFER, NOTIFY\n    Supported: replaces, gruu\n    Content-Type: application/sdp\n\
    \    Content-Length: [omitted]\n    v=0\n    o=alice 2890844526 2890844526 IN\
    \ IP4 atlanta.example.com\n    s=\n    c=IN IP4 atlanta.example.com\n    t=0 0\n\
    \    m=audio 49170 RTP/AVP 90 91\n    a=rtpmap:90 X/8000\n    a=rtpmap:91 Y/8000\n\
    \    a=active\n    F7 INVITE Bob -> Music Source\n    INVITE sips:music@source.example.com\
    \ SIP/2.0\n    Via: SIP/2.0/TLS biloxi.example.com:5061\n     ;branch=z9hG4bKnashds9\n\
    \    Max-Forwards: 70\n    From: Bob <sips:bob@biloxi.example.com>;tag=02134\n\
    \    To: Music Source <sips:music@source.example.com>\n    Call-ID: 4802029847@biloxi.example.com\n\
    \    CSeq: 1 INVITE\n    Contact: <sips:bob@biloxi.example.com>\n    Allow: INVITE,\
    \ ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY\n    Supported: replaces, gruu\n  \
    \  Content-Type: application/sdp\n    Content-Length: [omitted]\n    v=0\n   \
    \ o=bob 2890844534 2890844534 IN IP4 atlanta.example.com\n    s=\n    c=IN IP4\
    \ atlanta.example.com\n    t=0 0\n    m=audio 49170 RTP/AVP 90 91 92\n    a=rtpmap:90\
    \ X/8000\n    a=rtpmap:91 Y/8000\n    a=rtpmap:92 x-reserved/8000\n    a=recvonly\n\
    \    F8 200 OK Music Source -> Bob\n    SIP/2.0 200 OK\n    Via: SIP/2.0/TLS biloxi.example.com:5061\n\
    \     ;branch=z9hG4bKnashds9\n     ;received=192.0.2.105\n    From: Bob <sips:bob@biloxi.example.com>;tag=02134\n\
    \    To: Music Source <sips:music@source.example.com>;tag=56323\n    Call-ID:\
    \ 4802029847@biloxi.example.com\n    Contact: <sips:music@source.example.com>;automaton\n\
    \         ;+sip.byeless;+sip.rendering=\"no\"\n    CSeq: 1 INVITE\n    Content-Length:\
    \ [omitted]\n    v=0\n    o=MusicSource 2890844576 2890844576 IN IP4 source.example.com\n\
    \    s=\n    c=IN IP4 source.example.com\n    t=0 0\n    m=audio 49170 RTP/AVP\
    \ 91\n    a=rtpmap:91 Y/8000\n    a=sendonly\n"
- title: 2.9.  Dialog/Session Timers
  contents:
  - "2.9.  Dialog/Session Timers\n   The executing UA may discover that either the\
    \ remote UA or the MOH\n   source wishes to use dialog/session liveness timers\
    \ [RFC4028].  Since\n   the timers verify the liveness of dialogs, not sessions\
    \ (despite the\n   terminology of [RFC4028]), the executing UA can support the\
    \ timers on\n   each dialog (to the remote UA and to the MOH source) independently.\n\
    \   (If the executing UA becomes obliged to initiate a refresh\n   transaction,\
    \ it must send an offerless UPDATE or re-INVITE, as if it\n   sends an offer,\
    \ the remote element has the opportunity to provide an\n   answer that is different\
    \ from its previous SDP, which could not\n   easily be conveyed to the other remote\
    \ element.)\n"
- title: 2.10.  When the Media Stream Directionality is "inactive"
  contents:
  - "2.10.  When the Media Stream Directionality is \"inactive\"\n   The directionality\
    \ of the media stream in the SDP offer in an INVITE\n   or re-INVITE to the music\
    \ source can be \"inactive\" if the SDP offer\n   from the remote UA was \"sendonly\"\
    \ or \"inactive\".  Generally, this\n   happens when the remote UA also has put\
    \ the call on hold and provided\n   a directionality of \"sendonly\".  In this\
    \ situation, the executing UA\n   can omit establishing the dialog with the music\
    \ source (or can\n   terminate the existing dialog with the music source).\n \
    \  If the executing UA uses this optimization, it creates the SDP answer\n   itself,\
    \ with directionality \"inactive\" and using its own RTP/RTCP\n   ports, and returns\
    \ that answer to the remote UA.\n   The executing UA must be prepared for the\
    \ remote UA to send a\n   re-INVITE with directionality \"active\" or \"recvonly\"\
    , in which case\n   the executing UA must initiate a dialog with the music source,\
    \ as\n   described above.\n"
- title: 2.11.  Multiple Media Streams
  contents:
  - "2.11.  Multiple Media Streams\n   There may be multiple media streams (multiple\
    \ \"m=\" lines) in any of\n   the SDPs involved in the dialogs.  As the SDPs are\
    \ manipulated, each\n   media description (each starting with an \"m=\" line)\
    \ is manipulated as\n   described above for a single media stream, largely independently\
    \ of\n   the manipulation of the other media streams.  But there are some\n  \
    \ elaborations that the executing UA may implement to achieve specific\n   effects.\n\
    \   If the executing UA desires to present only certain media types as\n   on-hold\
    \ media, when passing the offer SDP through, it can reject any\n   particular\
    \ media streams by setting the port number in the \"m=\" line\n   to zero [RFC3264].\
    \  This ensures that the answer SDP will also have a\n   rejection for that \"\
    m=\" line.\n   If the executing UA wishes to provide its own on-hold media for\
    \ a\n   particular \"m=\" line, it can do so by providing the answer\n   information\
    \ for that \"m=\" line.  The executing UA may decide to do\n   this when the offer\
    \ SDP is received (by modifying the \"m=\" line to\n   rejected state when sending\
    \ it to the music source) or upon receiving\n   the answer from the music source\
    \ and discovering that the \"m=\" line\n   has been rejected.\n   The executing\
    \ UA may not want to pass a rejected \"m=\" line from the\n   music source to\
    \ the remote UA (when the remote UA provided a non-\n   rejected \"m=\" line)\
    \ and may instead provide an answer with\n   directionality \"inactive\" (and\
    \ specifying its own RTP/RTCP ports).\n"
- title: 3.  Advantages
  contents:
  - "3.  Advantages\n   This technique for providing music on hold has advantages\
    \ over other\n   methods now in use, including:\n   1.  The original dialog is\
    \ not transferred to another UA, so the\n       \"remote endpoint URI\" displayed\
    \ by the remote endpoint's user\n       interface and dialog event package [RFC4235]\
    \ does not change\n       during the call, as contrasted to the method in [RFC5359],\n\
    \       Section 2.3.  This URI is usually displayed to the user as the\n     \
    \  name and number of the other party on the call, and it is\n       desirable\
    \ for it not to change to that of the MOH server.\n   2.  Compared to [RFC5359],\
    \ this method does not require use of an\n       out-of-dialog REFER, which is\
    \ not otherwise used much in SIP.\n       Out-of-dialog REFERs may not be routed\
    \ correctly, since neither\n       the From nor Contact URI of the original dialog\
    \ may route\n       correctly to the remote UA.  Also, out-of-dialog requests\
    \ to UA\n       URIs may not be handled correctly by authorization mechanisms.\n\
    \   3.  The music-on-hold media are sent directly from the music-on-hold\n   \
    \    source to the remote UA, rather than being relayed through the\n       executing\
    \ UA.  This reduces the computational load on the\n       executing UA and can\
    \ reduce the load on the network (by\n       eliminating \"hairpinning\" of the\
    \ media through the link serving\n       the executing UA).\n   4.  The remote\
    \ UA sees, in the incoming SDP, the address/port that\n       the MOH source will\
    \ send MOH media from (assuming that the MOH\n       source follows the convention\
    \ of sending its media from its\n       advertised media-listening address/port).\
    \  Thus, the remote UA\n       will render the MOH media even if it is filtering\
    \ incoming media\n       based on originating address as a media security measure.\n\
    \   5.  The technique requires relatively simple manipulation of SDP; in\n   \
    \    particular, (1) it does not require a SIP element to modify\n       unrelated\
    \ SDP to be acceptable to be sent within an already\n       established sequence\
    \ of SDP (a problem with [SIP-SERV-EX],\n       Section 2.3), and (2) it does\
    \ not require converting an SDP\n       answer into an SDP offer (which was a\
    \ problem with the initial\n       draft version of this document, as well as\
    \ with [SIP-SERV-EX]).\n"
- title: 4.  Caveats
  contents:
  - '4.  Caveats

    '
- title: 4.1.  Offering All Available Media Formats
  contents:
  - "4.1.  Offering All Available Media Formats\n   Unnecessary failures can happen\
    \ if SDP offerers do not always offer\n   all media formats that they support.\
    \  Doing so is considered best\n   practice ([RFC6337], Sections 5.1 and 5.3),\
    \ but some SIP elements\n   offer only formats that have already been in use in\
    \ the dialog.\n   An example of how omitting media formats in an offer can lead\
    \ to\n   failure is as follows.  Suppose that the UAs in Section 2.3 each\n  \
    \ support the following media formats:\n      Alice supports formats X and Y.\n\
    \      Bob supports formats X and Z.\n      Music Source supports formats Y and\
    \ Z.\n   In this case, the SDP exchanges are:\n   1.  Alice calls Bob:\n     \
    \  Alice offers X and Y (message F1).\n       Bob answers X (F3).\n   2.  Bob\
    \ puts Alice on hold:\n       Alice (via Bob) offers X and Y (F6 and F7).\n  \
    \     Music Source (via Bob) answers Y (F8 and F10).\n   3.  Bob takes Alice off\
    \ hold:\n       Bob offers X and Z (F11).\n       Alice answers X (F12).\n   Note\
    \ that in exchange 2, if Alice assumes that because only format X\n   is currently\
    \ in use that she should offer only X, the exchange fails.\n   In exchange 3,\
    \ Bob offers formats X and Z, even though neither is in\n   use at the time (because\
    \ Bob is not involved in the media streams).\n"
- title: 4.2.  Handling Re-INVITES in a B2BUA
  contents:
  - "4.2.  Handling Re-INVITES in a B2BUA\n   Many UAs provide MOH in the interval\
    \ during which it is processing a\n   blind transfer, between receiving the REFER\
    \ and receiving the final\n   response to the stimulated INVITE.  This process\
    \ involves switching\n   the user's interface between three media sources: (1)\
    \ the session of\n   the original dialog, (2) the session with the MOH server,\
    \ and (3) the\n   session of the new dialog.  It also involves a number of race\n\
    \   conditions that must be handled correctly.  If the UA is a back-to-\n   back\
    \ user agent (B2BUA) whose \"other side\" is maintaining a single\n   dialog with\
    \ another UA, each switching of media sources potentially\n   causes a re-INVITE\
    \ transaction within the other-side dialog.  Since\n   re-INVITEs take time and\
    \ must be sequenced correctly ([RFC3261],\n   Section 14), such a B2BUA must allow\
    \ the events on each side to be\n   non-synchronous and must coordinate them correctly.\
    \  Failing to do so\n   will lead to \"glare\" errors (491 or 500), leaving the\
    \ other-side UA\n   not rendering the correct session.\n"
- title: 5.  Security Considerations
  contents:
  - '5.  Security Considerations

    '
- title: 5.1.  Network Security
  contents:
  - "5.1.  Network Security\n   Some mechanism outside the scope of this document\
    \ must inform the\n   executing UA of the MOH server that it should use.  Care\
    \ must be\n   exercised in selecting the MOH server, because signaling information\n\
    \   that is part of the original dialog will be transmitted along the\n   path\
    \ from the executing UA to the server.  If the path between the\n   executing\
    \ UA and the server is not entirely contained within every\n   network domain\
    \ that contains the executing UA, the signaling between\n   the UA and the server\
    \ may be protected by different network security\n   than is applied to the original\
    \ dialog.\n   Care must also be exercised because media information that is part\
    \ of\n   the original dialog will be transmitted along the path between the\n\
    \   remote UA and the server.  If the path between the remote UA and the\n   server\
    \ does not pass through the same network domains as the path\n   between the remote\
    \ UA and the executing UA, the media between the UA\n   and the server may be\
    \ protected by different network security than is\n   applied to the original\
    \ dialog.\n   These requirements may be satisfied by selecting an MOH server that\n\
    \   is in the same administrative and network domain as the executing UA\n   and\
    \ whose path to all external addresses is the same as the UA's path\n   to those\
    \ addresses.\n"
- title: 5.2.  SIP (Signaling) Security
  contents:
  - "5.2.  SIP (Signaling) Security\n   The executing UA and the MOH server will usually\
    \ be within the same\n   administrative domain, and the SIP signaling path between\
    \ them will\n   lie entirely within that domain.  In this case, the administrator\
    \ of\n   the domain should configure the UA and server to apply to the dialog\n\
    \   between them a level of security that is appropriate for the\n   administrative\
    \ domain.\n   If the executing UA and the MOH server are not within the same\n\
    \   administrative domain, the SIP signaling between them should be at\n   least\
    \ as secure as the SIP signaling between the executing UA and the\n   remote UA.\
    \  Thus, the MOH server should support all of the SIP\n   security facilities\
    \ that are supported by the executing UA, and the\n   executing UA should use\
    \ in its dialog with the MOH server all SIP\n   security facilities that are used\
    \ in its dialog with the remote UA.\n"
- title: 5.3.  RTP (Media) Security
  contents:
  - "5.3.  RTP (Media) Security\n   The RTP for the MOH media will pass directly between\
    \ the MOH server\n   and the remote UA and thus may pass outside the administrative\
    \ domain\n   of the executing UA.  While it is uncommon for the contents of the\n\
    \   MOH media to be sensitive (and the remote UA will not usually be\n   generating\
    \ RTP when it is on hold), the MOH RTP should be at least as\n   secure as the\
    \ RTP between the executing UA and the remote UA.  In\n   order to make this possible,\
    \ the MOH server should support all of the\n   RTP security facilities that are\
    \ supported by the executing UA.\n   It is possible that the remote UA and the\
    \ MOH server support an RTP\n   security facility that the executing UA does not\
    \ support and that it\n   is desirable to use this facility for the MOH RTP. \
    \ To enable doing\n   so, the executing UA should pass the SDP between the remote\
    \ UA and\n   the MOH server completely, not omitting elements that it does not\n\
    \   understand.\n"
- title: 5.4.  Media Filtering
  contents:
  - "5.4.  Media Filtering\n   Some UAs filter incoming RTP based on the address of\
    \ origin as a\n   media security measure, refusing to render the contents of RTP\n\
    \   packets that originate from an address that is not shown in the\n   remote\
    \ SDP as an RTP destination address.  The remote UA in the\n   original dialog\
    \ may use this form of media filtering, and if the\n   executing UA does not update\
    \ the SDP to inform the remote UA of the\n   source address of the MOH media,\
    \ the remote UA may not render the MOH\n   media.  Note that the executing UA\
    \ has no means for detecting that\n   the remote UA uses media filtering, so the\
    \ executing UA must assume\n   that any remote UA uses media filtering.\n   The\
    \ technique described in this document ensures that any UA that\n   should render\
    \ MOH media will be informed of the source address of the\n   media via the SDP\
    \ that it receives.  This allows such UAs to filter\n   media without interfering\
    \ with MOH operation.\n"
- title: 6.  Acknowledgments
  contents:
  - "6.  Acknowledgments\n   The original version of this proposal was derived from\
    \ Section 2.3 of\n   [SIP-SERV-EX] and the similar implementation of MOH in the\
    \ snom UA.\n   Significant improvements to the sequence of operations, allowing\n\
    \   improvements to the SDP handling, were suggested by Venkatesh\n   [VENKATESH].\n\
    \   John Elwell [ELWELL] pointed out the need for the executing UA to\n   pass\
    \ through re-INVITEs/UPDATEs in order to allow ICE negotiation,\n   suggested\
    \ mentioning the role of RTCP listening ports, suggested the\n   possibility of\
    \ omitting the dialog to the music source if the\n   directionality would be \"\
    inactive\", and pointed out that if there are\n   multiple media streams, the\
    \ executing UA may want to select which\n   streams receive MOH.\n   Paul Kyzivat\
    \ [KYZIVAT-1] [KYZIVAT-2] pointed out the difficulties\n   regarding reuse of\
    \ payload type numbers and considerations that could\n   be used to avoid those\
    \ difficulties, leading to the writing of\n   Section 2.8.\n   Paul Kyzivat suggested\
    \ adding Section 4.1 showing why offerers should\n   always include all supported\
    \ formats.\n   M. Ranganathan pointed out the difficulties experienced by a B2BUA\n\
    \   (Section 4.2) due to the multiple changes of media source.\n   Section 4.1\
    \ was significantly clarified based on advice from Attila\n   Sipos [SIPOS].\n\
    \   The need to discuss dialog/session timers (Section 2.9) was pointed\n   out\
    \ by Rifaat Shekh-Yusef [SHEKH-YUSEF].\n   Robert Sparks clarified the purpose\
    \ of the \"Best Current Practice\"\n   status, leading to revising the intended\
    \ status of this document to\n   \"Informational\".\n   In his SecDir review,\
    \ Stephen Kent pointed out that the Security\n   Considerations should discuss\
    \ the use of SIP and SDP security\n   features by the MOH server.\n   Numerous\
    \ improvements to the text were due to reviewers, including\n   Rifaat Shekh-Yusef\
    \ and Richard Barnes.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n\
    \              A., Peterson, J., Sparks, R., Handley, M., and E.\n           \
    \   Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n              June\
    \ 2002.\n   [RFC3264]  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n\
    \              with Session Description Protocol (SDP)\", RFC 3264, June\n   \
    \           2002.\n   [RFC4028]  Donovan, S. and J. Rosenberg, \"Session Timers\
    \ in the\n              Session Initiation Protocol (SIP)\", RFC 4028, April 2005.\n\
    \   [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n   \
    \           Description Protocol\", RFC 4566, July 2006.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC4235]  Rosenberg, J., Schulzrinne, H., and\
    \ R. Mahy, \"An INVITE-\n              Initiated Dialog Event Package for the\
    \ Session Initiation\n              Protocol (SIP)\", RFC 4235, November 2005.\n\
    \   [RFC4961]  Wing, D., \"Symmetric RTP / RTP Control Protocol (RTCP)\",\n  \
    \            BCP 131, RFC 4961, July 2007.\n   [RFC5245]  Rosenberg, J., \"Interactive\
    \ Connectivity Establishment\n              (ICE): A Protocol for Network Address\
    \ Translator (NAT)\n              Traversal for Offer/Answer Protocols\", RFC\
    \ 5245, April\n              2010.\n   [RFC5359]  Johnston, A., Sparks, R., Cunningham,\
    \ C., Donovan, S., and\n              K. Summers, \"Session Initiation Protocol\
    \ Service\n              Examples\", BCP 144, RFC 5359, October 2008.\n   [RFC6337]\
    \  Okumura, S., Sawada, T., and P. Kyzivat, \"Session\n              Initiation\
    \ Protocol (SIP) Usage of the Offer/Answer\n              Model\", RFC 6337, August\
    \ 2011.\n   [ELWELL]   Elwell, J., \"Subject: [Sipping] RE: I-D Action:draft-\n\
    \              worley-service-example-00.txt\", message to the IETF\n        \
    \      Sipping mailing list, November 2007,\n              <http://www1.ietf.org/mail-\n\
    \              archive/web/sipping/current/msg14678.html>.\n   [KYZIVAT-1]\n \
    \             Kyzivat, P., \"Subject: Re: [Sipping] I-D ACTION:draft-\n      \
    \        ietf-sipping-service-examples-11.txt\", message to the IETF\n       \
    \       Sipping mailing list, October 2006, <http://www1.ietf.org/\n         \
    \     mail-archive/web/sipping/current/msg12181.html>.\n   [KYZIVAT-2]\n     \
    \         Kyzivat, P., \"Subject: [Sip-implementors] draft-worley-\n         \
    \     service-example-02\", message to the sip-implementors\n              mailing\
    \ list, September 2008,\n              <http://lists.cs.columbia.edu/pipermail/sip-implementors/\n\
    \              2008-September/020394.html>.\n   [SHEKH-YUSEF]\n              Shekh-Yusef,\
    \ R., \"Subject: [sipcore] draft-worley-service-\n              example-03\",\
    \ message to the IETF Sipcore mailing list,\n              July 2009, <http://www.ietf.org/mail-archive/web/sipcore/\n\
    \              current/msg00580.html>.\n   [SIPOS]    Sipos, A., \"Subject: [Sip-implementors]\
    \ draft-worley-\n              service-example-02\", message to the sip-implementors\n\
    \              mailing list, March 2009, <http://lists.cs.columbia.edu/\n    \
    \          pipermail/sip-implementors/2009-March/021970.html>.\n   [SIP-SERV-EX]\n\
    \              Johnston, A., Sparks, R., Cunningham, C., Donovan, S., and\n  \
    \            K. Summers, \"Session Initiation Protocol Service\n             \
    \ Examples\", Work in Progress, October 2006.\n   [VENKATESH]\n              Venkatesh,\
    \ \"Subject: Re: [Sipping] I-D ACTION:draft-\n              ietf-sipping-service-examples-11.txt\"\
    , message to the IETF\n              Sipping mailing list, October 2006, <http://www1.ietf.org/\n\
    \              mail-archive/web/sipping/current/msg12180.html>.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Dale R. Worley\n   Ariadne Internet Services, Inc.\n   738\
    \ Main St.\n   Waltham, MA  02451\n   US\n   Phone: +1 781 647 9199\n   EMail:\
    \ worley@ariadne.com\n"
