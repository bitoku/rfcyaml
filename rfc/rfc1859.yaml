- title: __initial_text__
  contents:
  - "    ISO Transport Class 2 Non-use of Explicit Flow Control over TCP\n       \
    \                    RFC1006 extension\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1. Introduction - General recommendations
  contents:
  - "1. Introduction - General recommendations\n   This document is an extension to\
    \ STD35, RFC1006, a standard for the\n   Internet community. The document does\
    \ not duplicate the protocol\n   definitions contained in RFC1006 and in International\
    \ Standard ISO\n   8073.  It supplements that information with the description\
    \ of how to\n   implement ISO Transport Class 2 Non-use of Explicit Flow Control\
    \ on\n   top of TCP.\n   The document should be used in conjunction with the RFC1006\
    \ and ISO\n   8073.\n   The RFC1006 standard defines how to implement ISO 8073\
    \ Transport\n   Class 0 on top of TCP. This memo defines how to implement ISO\
    \ 8073\n   Transport Class 2 Non-use of Explicit Flow Control on top of TCP.\n\
    \   Like ISO Transport Class 0, Class 2 Non-use of Explicit Flow Control\n   provides\
    \ basic connection with minimal overhead.\n   A Transport protocol class is selected\
    \ for a particular Transport\n   connection based upon the characteristics of\
    \ the lower layers and the\n   requirements of the upper layer. Use of class 2\
    \ Non-use of Explicit\n   Flow Control is suitable when the use of separate virtual\
    \ data\n   channels for normal and expedited Data are desirable or when an\n \
    \  explicit disconnection of the Transport connection is desirable.\n   Hosts\
    \ which choose to implement this extension are expected to listen\n   on the well-known\
    \ TCP port number 399.\n   It is recommended that the well-known RFC1006 TCP port\
    \ 102 not be\n   used. This recommendation is done to minimise impact to an existing\n\
    \   RFC1006 implementation.\n   The memo also describes the use of this extension\
    \ within the DIGITAL\n   Network Architecture (DNA).\n"
- title: 2. The protocol
  contents:
  - "2. The protocol\n   The protocol specified by this memo is fundamentally equivalent\
    \ to\n   the protocol ISO 8073 Transport Class 2 Non-use of Explicit Flow\n  \
    \ Control, with the following extensions:\n   - Expedited Data service is supported.\n\
    \   - Splitting and Recombining may be used for Expedited Data\n     transmission.\n\
    \   - The Network Service used is provided by TCP.\n   The ISO 8073 Transport\
    \ protocol Class 2 allows Multiplexing. It is\n   recommended that this capability\
    \ not be use for performance reasons.\n   The ISO 8073 Transport protocol exchanges\
    \ information between peers\n   in discrete units of information called transport\
    \ protocol data units\n   (TPDUs).  The protocol defined in this memo encapsulates\
    \ these TPDUs\n   in discrete units called TPKTs.  The structure of these TPKTs\
    \ and\n   their relationship to TPDUs are discussed in the next sections.\n"
- title: 2.1 TCP service as a Network Service - The Primitives
  contents:
  - "2.1 TCP service as a Network Service - The Primitives\n   The mapping between\
    \ the TCP service primitives and the service\n   primitives expected by ISO 8073\
    \ Transport when operation over\n   Connection-oriented network service is straightforward.\n\
    \   Note: The following description of the mapping is a repeat from the\n   RFC1006\
    \ standard.\n   network service                 TCP\n   ---------------      \
    \           ---\n   CONNECTION ESTABLISHMENT\n           N-CONNECT.REQUEST   \
    \    open completes\n           N-CONNECT.INDICATION    listen (PASSIVE open)\
    \ finishes\n           N-CONNECT.RESPONSE      listen completes\n           N-CONNECT.CONFIRMATION\
    \  open (ACTIVE open) finishes\n   DATA TRANSFER\n           N-DATA.REQUEST  \
    \        send data\n           N-DATA.INDICATION       data ready followed by\
    \ read data\n   CONNECTION RELEASE\n           N-DISCONNECT.REQUEST    close\n\
    \           N-DISCONNECT.INDICATION connection closes or errors\n   Mapping parameters\
    \ between the TCP service and the network service is\n   also straightforward:\n\
    \   network service                 TCP\n   ---------------                 ---\n\
    \   CONNECTION ESTABLISHMENT\n           Called address          server's IP address\
    \ (4 octets)\n           Calling address         client's IP address (4 octets)\n\
    \           all others              ignored\n   DATA TRANSFER\n           NS-user\
    \ data (NSDU)     data\n   CONNECTION RELEASE\n           all parameters     \
    \     ignored\n"
- title: 2.2 Connection Establishment
  contents:
  - "2.2 Connection Establishment\n   The principles used in connection establishment\
    \ are based upon those\n   described in ISO 8073, with the following extensions.\n\
    \   - Connection Request and Connection Confirmation TPDUs may negotiate\n   \
    \  the use of Expedited Data transfer using the negotiation mechanism\n     specified\
    \ in ISO 8073.\n   - Connection Request and Connection Confirmation TPDUs must\
    \ not\n     negotiate the Use of Explicit Flow Control.\n   To perform an N-CONNECT.REQUEST\
    \ action, the TS-peer performs an\n   active open to the desired IP address using\
    \ the well know TCP port\n   399.  When the TCP signals either success or failure,\
    \ this results in\n   an N-CONNECT.INDICATION action.\n   To await an N-CONNECT.INDICATION\
    \ event, a server listens on the well\n   know TCP port 399.  When a client successfully\
    \ connects to this port,\n   the event occurs and an implicit N-CONNECT.RESPONSE\
    \ action is\n   performed.\n"
- title: 2.3 Data Transfer
  contents:
  - "2.3 Data Transfer\n   The elements of procedure used during transfer are based\
    \ upon those\n   presented in ISO 8073, with the two following extensions.\n \
    \  - Expedited Data may be supported (if negotiated during connection\n     establishment).\n\
    \     In Non-Use of Explicit Flow Control Expedited Data requires no\n     Expedited\
    \ Data Acknowledgement.\n   - Splitting and Recombining may be used for Expedited\
    \ Data\n     transmission.\n     The procedure of Splitting and Recombining allows\
    \ a transport\n     connection to make use of multiple TCP connections.\n    \
    \ TCP connections created for Splitting purposes should also use\n     the primitives\
    \ described in 2.1.\n     It is recommended to only create a second TCP connection\
    \ for\n     Expedited Data when transmission of Expedited Data is requested.\n\
    \     Expedited Data must only be sent over an outgoing TCP connection.\n    \
    \ This second TCP connection must not be shared among transport\n     connections\
    \ and must remain established until the transport\n     connection is terminated,\
    \ at which time it must be closed.\n   Implementors note: The procedure of Splitting\
    \ and Recombining for\n   Expedited Data transmission guaranties that a congested\
    \ Normal Data\n   TCP connection cannot block an Expedited Data TCP connection.\
    \ It also\n   ensures independence of the Normal Data TCP connection from the\n\
    \   Expedited Data TCP connection.\n   To perform an N-DATA.REQUEST action, the\
    \ TS-peer constructs the\n   desired TPKT and uses the TCP send data primitive.\n\
    \   To trigger an N-DATA.INDICATION action, the TCP indicates that data\n   is\
    \ ready and a TPKT is read using the TCP read data primitive.\n"
- title: 2.4 Connection Release
  contents:
  - "2.4 Connection Release\n   The elements of procedure used during a connection\
    \ release are\n   identical to those presented in ISO 8073.\n   A connection can\
    \ be terminated by the user in one of two ways:\n   - Abort Disconnect specifies\
    \ that all messages at the source are not\n     required to be sent to the destination\
    \ before the connection is\n     disconnected.\n   - Synchronous Disconnect specifies\
    \ that all messages at the source\n     must be sent to the destination, and that\
    \ all messages at the\n     destination must be delivered, before the connection\
    \ is\n     disconnected.\n   Disconnect Request and Disconnect Confirmation TPDUs\
    \ are exchanged in\n   both cases. The Disconnect Request TPDU carries a code\
    \ indicating the\n   reason for the disconnection.\n   In the case of a Synchronous\
    \ Disconnect the Disconnect Request reason\n   code is normal (80 hex). For an\
    \ Abort Disconnect the Disconnect\n   Request reason code is normal with additional\
    \ information parameter\n   value set to (c0 hex).\n   Upon receipt of a Disconnect\
    \ Confirmation TPDU a N-DISCONNECT.REQUEST\n   action is performed to close the\
    \ TCP connection.\n   If the TCP connection fails for some other reason, this\
    \ generates an\n   N-DISCONNECT.INDICATION event.\n"
- title: 3. Packet Format
  contents:
  - "3. Packet Format\n   A fundamental difference between TCP and the network service\
    \ expected\n   by ISO transport is that TCP manages a continuous stream of octets,\n\
    \   with no explicit boundaries.\n   The protocol described in RFC1006 uses a\
    \ simple packetization scheme\n   in order to delimit TPDUs. Each packet, termed\
    \ a TPKT, consists of\n   two parts: a packet-header and a TPDU.\n   We use the\
    \ same scheme described in RFC1006 for this extension.\n   There is no need to\
    \ change the version number. The ISO transport TPDU\n   sufficiently describes\
    \ the transport protocol class being used.\n   The format of the packet-header\
    \ described below is a repeat from\n   RFC1006.\n       0                   1\
    \                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      vrsn     |    reserved   |          packet length        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \   where:\n         vrsn                         8 bits\n         This field\
    \ is always 3 for the version of the protocol\n         described in this memo.\n\
    \         packet length                16 bits (min=7, max=65535)\n         The\
    \ packet length is the length of the entire packet in\n         octets, including\
    \ packet-header.\n   The format of the ISO transport TPDU is defined in ISO 8073.\n"
- title: 4. DIGITAL DECnet over TCP/IP
  contents:
  - "4. DIGITAL DECnet over TCP/IP\n   DECnet over TCP/IP is implemented using the\
    \ DECnet Session Control\n   layer over this RFC1006 extension protocol.\n   The\
    \ informational RFC defined in this document provides the Transport\n   Service\
    \ functionality required by DECnet Applications while operating\n   over TCP/IP.\n\
    \   The next paragraph is a brief summary of the role of the DECnet\n   Session\
    \ Control Layer. For further details, refer to the DIGITAL DNA\n   Session Control\
    \ Layer Specification.\n   The DECnet Session Control Layer makes a Transport\
    \ Service available\n   to End Users of a network. This layer is concerned with\
    \ system-\n   dependent functions related to creating, maintaining, and destroying\n\
    \   Transport Connections.  Separate virtual data channels, known  as\n   \"Normal\"\
    \  and  \"Expedited\",  are provided to End Users. DECnet\n   Session Control\
    \ must be guaranteed independence of these channels by\n   the Transport Layer.\
    \ Expedited Data transmission cannot be blocked by\n   a congested normal data\
    \ channel. DECnet Session Control requires that\n   all data in transit be delivered\
    \ before initiating the release of the\n   Transport Connection.\n   DECnet, DNA,\
    \ and the DIGITAL logo are trademarks of Digital Equipment\n   Corporation.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Bill Duane, Jim Bound, David Sullivan, Mike Dyer, Matt Thomas,\
    \ Dan\n   Harrington and many other members of the DECnet engineering team.\n"
- title: References
  contents:
  - "References\n   [ISO8072]  ISO. \"International Standard 8072.  Information\n\
    \              Processing Systems -- Open Systems Interconnection:\n         \
    \     Transport Service Definition.\"\n   [ISO8073]  ISO. \"International Standard\
    \ 8073.  Information\n              Processing Systems -- Open Systems Interconnection:\n\
    \              Transport Protocol Specification.\"\n   [ISO8327]  ISO. \"International\
    \ Standard 8327.  Information\n              Processing Systems -- Open Systems\
    \ Interconnection:\n              Session Protocol Specification.\"\n   [RFC791]\
    \   Postel, J., \"Internet Protocol - DARPA Internet Program\n              Protocol\
    \ Specification\", STD 5, RFC 791,\n              USC/Information Sciences Institute,\
    \ September 1981.\n   [RFC793]   Postel, J., \"Transmission Control Protocol -\
    \ DARPA\n              Internet Program Protocol Specification\", STD 7, RFC\n\
    \              793, USC/Information Sciences Institute, September 1981.\n   [RFC1006]\
    \  Rose, M., and D. Cass, \"ISO Transport Services on Top of\n              the\
    \ TCP - Version: 3\", STD 35, RFC 1006, Northrop\n              Research and Technology\
    \ Center, May 1987.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Yanick Pouffary\n   End Systems Networking\n   Digital Equipment\
    \ Corporation\n   Centre Technique (Europe)\n   B.P. 027\n   950 Routes des colles\n\
    \   06901 Sophia antipolis, France\n   Phone: +33 92-95-62-85\n   Fax:   +33 92-95-62-32\n\
    \   EMail: pouffary@taec.enet.dec.com\n"
