Abstract An ENUM domain name is tightly coupled with the underlying E.164 number.
The process of verifying whether the Registrant of an ENUM domain name is identical to the Assignee of the corresponding E.164 number is commonly called "validation".
This document describes a signed XML data format
the Validation Token   with which Validation Entities can convey successful completion of a validation procedure in a secure fashion.
In the case where an ENUM (E.164 Number Mapping [1])
domain name corresponds to an existing E.164 number [2], the delegation of this domain needs to be authorized by the Assignee of the corresponding E.164 number.
In the role model described in [15], the entity that performs this check is called the Validation Entity (VE).
By conveying an ENUM Validation Token   a signed XML document   to the Registry, a VE certifies that delegation requirements have been met and are current.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [3].
In this model, the Token is the only piece of data passed from the VE to the Registry.
Therefore, the Token needs to contain at least as much information as the Registry requires to grant the delegation of the requested ENUM domain according to its registration policy.
As such, the Registry will need confirmation that:  the Token was created by an accredited VE,  the Token's duration of validity conforms to the policy,  the validation procedure employed has met minimum requirements as set forth by policy,  and that the Token is protected against tampering and replay attacks.
Beyond such mandatory information, the Token may optionally include number holder information, in particular, to simplify future revalidations.
For example, if initial validation requires the steps "Check the identity of the Registrant" and "Check the ownership of an E.164 number", then a later revalidation only needs to re check the ownership as the identity of the Registrant does not change.
As the Token will be included (see e.g., [16]) in XML based Registry/ Registrar protocols like the Extensible Provisioning Protocol (EPP) [13], it is a natural choice to use XML to encode Validation Tokens.
According to the architecture model the propriety of an ENUM delegation depends on the trust relationship between the Registry and the VE.
In general, an untrusted link between the Registry and VE should be assumed (for instance, the Token is passed along with the registration request by a Registrar, who might have no role in asserting the right to use).
Therefore, the Token must be protected against forgery, tampering, and replay attacks.
A digital signature on the token:  asserts that the token was indeed generated by the indicated VE (authenticity).
guarantees that the token was not tampered with in transit (integrity).
enables auditing the validation process (non repudiation).
The cryptographic signature on the token follows RFC 3275 (XML DSIG [4]).
As tokens might be transmitted as part of an already XML based protocol, the exclusive XML canonicalization [9] MUST be used.
This transform guarantees that namespace declarations inherited from the surrounding XML do not invalidate the signature.
In order to make the signature an integral part of the token, the "enveloped" signature mode is employed.
The signature covers all information contained in the Token.
XML DSIG offers a number of cryptographic algorithms for digesting and signing documents and recommends SHA1/RSA SHA1.
Recent advances in cryptanalysis have cast doubt on the security of SHA1, thus rendering this recommendation obsolete (see e.g., the Security Considerations of [14]).
[5] defines how additional algorithms can be used with XML DSIG.
Validation Entities MUST be able to sign tokens according to XML DSIG, MUST support RSA SHA1 and RSA SHA256 [5], MUST support RSA key sizes of 1024 and 2048 bits, and MUST be able to embed X.509 [10] certificates.
The Registry MUST define which signature algorithms and key sizes it will accept in Validation Tokens as part of its local policy.
The choice of a RSA based signature does not require a public key infrastructure.
Whether the Registry acts as a certification authority, accepts certs from a public certification authority, or only accepts pre registered keys is a local policy choice.
The Validation Token is structured into three parts: the basic validation information, additional information about the Registrant, and the digital signature.
The XML schema can be found in Section 6.
Element A token MUST contain a <validation> element that contains the following:  A single validation "serial" attribute identifying a validation token for a certain VE.
It must be unique per VE.
> element containing the underlying E.164 number in fully qualified (international) format.
If present, it indicates that the whole number block starting with <E164Number> up to and including <lastE164Number
To avoid ambiguity, both numbers MUST be of the same length.
A single <validationEntityID> element identifying the VE.
> element identifying the Registrar on whose behalf the validation was performed.
A single <methodID> element identifying the method used by the VE for validation.
A single <executionDate> attribute containing the date of validation formatted as "full date" according to RFC 3339 [6].
> attribute marking the expiration date of the validation token formatted as "full date" according to RFC 3339.
The Registry will automatically revoke the delegation at this date unless a new Token has been submitted that extends the lifetime of the validation.
A missing <expirationDate> indicates infinite validity of the Token.
The format and the uniqueness constraints of these IDs is left to the local policy of the Registry.
Element A token may contain a <tokendata> section containing information about the number holder, consisting of the following elements:  A single <organization> element containing the full name of the organization to which the Registrant is affiliated.
If the Registrant is a company, then this field can be used to uniquely identify this company by its official registration number within the local country.
The interpretation of this field is thus country specific.
A single <address> section containing the following elements:
Up to 10 <phone> elements containing full E.164 numbers.
Up to 10 <fax> elements containing full E.164 numbers.
Up to 10 <email> elements.
All elements directly under <tokendata> are optional.
The <ISOcountryCode> element specifies the country using the alpha 2 country code from ISO 3166 1:2006 [11] (including updates published by the 3166 Maintenance Agency).
The definition of the first five elements within the <address> element conforms to the second version of the E.115 Computerized Directory Assistance [17].
Unsigned Token without Registrant Information
This basic Token without any information about the Registrant and without the cryptographic signature shows the basic layout of the Token.
xml version "1.0" encoding "utf 8" standalone "no" ?
Id "TOKEN" xmlns:xsi "http://www.w3.org/2001/XMLSchema instance"
enum token 1.0 enum token 1.0.xsd"> <validation serial "acmeve 000002"> <E164Number
> <expirationDate>2007 11 01</expirationDate> </validation
This example uses an X.509 based signature that includes the certificate of the signing validation entity.
Thus, the validity of the signature can be verified without the need for a key server.
A valid signature is a necessary, but not sufficient, condition for a valid Token.
Any entity evaluating a Token needs to check other factors as well, e.g., the certificate and the XML schema. <?
xml version "1.0" encoding "utf 8" standalone "no" ?
Id "TOKEN" xmlns:xsi "http://www.w3.org/2001/XMLSchema instance"
enum token 1.0 enum token 1.0.xsd"> <validation serial "acmeve 000001">
08</executionDate> </validation> <tokendata xmlns "urn:ietf:params:xml:ns:
enum tokendata 1.0 enum tokendata 1.0.xsd
<CanonicalizationMethod Algorithm "http://www.w3.org/2001/10/xml exc c14n#"/
> <SignatureMethod Algorithm "http://www.w3.org/2001/04/xmldsig more#rsa sha256"/
> <Transforms> <Transform Algorithm  "
<Transform Algorithm "http://www.w3.org/2001/10/xml exc c14n
> <InclusiveNamespaces xmlns "http://www.w3.org/2001/10/xml exc c14n
#" PrefixList "enum token enum
> <DigestValue >VxqsBxSNPFwPAUlCHts3g3DehcexnB1dqUz GypLZ0k </DigestValue
QKqphKRNPokVZFbenje HZZV RLrNweGnlWBw7ngAtH rtuslR8LhMLmC4DlBb9V HvKItl 7zLGm3VgYsqfHH8q3jCl1mFxUIuLlIPqtpJs
Q0VSVFMuYm9maC5wcml2LmF0MSEwHwYJKoZIhvcNAQkBFhJjZXJ0c0Bib2ZoLnBy aXYuYXQwHhcNMDQwNzIwMTMxNTA5WhcNMDUwNzIwMTMxNTA5WjB/MQswCQYDVQQG EwJBVDEKMAgGA1UECBMBLTEPMA0GA1UEBxMGVmllbm5hMR0wGwYDVQQKExRBY21l IEVOVU0gVmFsaWRhdGlvbjEQMA4GA1UEAxMHYWNtZS1WRTEiMCAGCSqGSIb3DQEJ ARYTbm9ib2R5QGVudW0tYWNtZS5hdDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkC gYEArJPcjMFc54/zwztSdQXGxUtodJT9r1qGI2lQPNjLvtPJg93 7o5SIOsZGSpg
zWbztDAV5qc7PHZWUVIyf6MbM5qSgQDVrjNRhTosNtyqmwi23BH52SKkX3P7eGit LmqEkiUZRxZhZ6upRbtcqvKSwmXitvW4zXZhkVHYJZ2HuMcCAwEAAaOB/DCB TAJ BgNVHRMEAjAAMCwGCWCGSAGG EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0 aWZpY2F0ZTAdBgNVHQ4EFgQUyK4otTQtvv6KdSlMBOPT5Ve18JgwgZ4GA1UdIwSB
ljCBk4AUvfPadpm0HhmZx2iAVumQTwgnG2eheKR2MHQxCzAJBgNVBAYTAkFUMQ8w DQYDVQQHEwZWaWVubmExFDASBgNVBAoTC0JPRkggQ2VydHMuMRswGQYDVQQDExJD RVJUUy5ib2ZoLnByaXYuYXQxITAfBgkqhkiG9w0BCQEWEmNlcnRzQGJvZmgucHJp di5hdIIBADANBgkqhkiG9w0BAQQFAAOBgQCB9CHBnIUhrdic4h5Ar4hdxjHSQkDH sJWd
The formal syntax of the validation token is specified using XML schema notation [7] [8].
Two schemas are defined: The "token core schema" contains mandatory attribute definitions, and the "token data schema" defines the format of the optional "tokendata" section.
The BEGIN and END tags are not part of the schema; they are used to note the beginning and ending of the schema for URI registration purposes.
Token Core Schema BEGIN <?
xml version "1.0" encoding "UTF 8"?
enum token 1.0" xmlns:enum token "urn:ietf:
ds "http://www.w3.org/2000/09/xmldsig#" xmlns "http://www.w3.org/2001/XMLSchema" elementFormDefault
<import namespace "http://www.w3.org/2000/09/xmldsig#" schemaLocation "xmldsig core schema.xsd"/
<documentation> Validation Token core schema </documentation> </annotation>
<simpleType name "e164numberType"> <restriction base "token"> <maxLength value "20"/
<complexType name "validationDataType"> <sequence> <element name "E164Number
<element name "validationEntityID" type "enum token:shortTokenType"/>
<element name "registrarID" type "enum token:
<element name "methodID" type "enum token:
<attribute name "serial" type "enum token:shortTokenType" use "required"/
<element name "validation" type "enum token:
> </sequence> <attribute name "Id" type "ID" use "
Token Data Schema BEGIN <?
xml version "1.0" encoding "UTF 8"?
> <all> <element name "streetName
> <group name "tokenContactBaseGroup"> <sequence> <element name "organisation"
<element name "phone" type "enum tokendata:TokenType" minOccurs "0" maxOccurs "10" /
> <element name "fax"   type "enum tokendata:TokenType" minOccurs "0" maxOccurs "10" />
<element name "email" type "enum tokendata:
TokenType" minOccurs "0" maxOccurs "10" /
> </group> <complexType name "contactType"
<element name "contact" type "enum tokendata:contactType"/
Other Applications of the Token Concept
The concept of the validation token may be useful in other registry type applications where the proof of an underlying right is a condition for a valid registration.
An example is a Top Level Domain (TLD) where registration is subject to proof of some precondition, like a trade mark or the right in a name.
Such situations often arise during the introduction of a new TLD, e.g., during a "sunrise" phase.
A Number Portability (NP) database faces very similar verification issues.
An NP system based on the Token concept could potentially be superior to current methods, and aid in the convergence of NP and ENUM.
This document uses Uniform Resource Names (URNs) to describe XML namespaces and XML schemas conforming to a registry mechanism described in RFC 3688 [12].
IANA has made the following four URI assignments.
Registration for the Token namespace:
enum token 1.0    Registrant Contact:
See the "Author's Address" section of this document.
Namespace URIs do not represent an XML specification.
Registration for the Token XML schema:
enum token 1.0    Registrant Contact:
See the "Author's Address" section of this document.
See Section 6.1 of this document.
Registration for the Token Data namespace:
enum tokendata 1.0    Registrant Contact
: See the "Author's Address" section of this document.
Namespace URIs do not represent an XML specification.
Registration for the Token Data XML schema:
enum tokendata 1.0    Registrant Contact
: See the "Author's Address" section of this document.
See Section 6.2 of this document.
The IDs used in the validationEntityID, RegistrarID, and methodID elements are subject to local policy and thus do not require IANA registration.
The security of the Validation Token depends on the security of the underlying XML DSIG algorithms.
As such, all the security considerations from [4] apply here as well.
Two points from [4] merit repetition: Transforms are used to select the relevant data for signing and discarding irrelevant information (e.g., pretty printing and name space local names).
The <Reference URI "#TOKEN"> element and attribute combined with the Id "TOKEN" attribute in <token> specifies that the signature should cover the complete token.
Moving the Id "TOKEN" attribute to e.g., the <tokendata> element would make the signature worthless.
It is thus critical that the Registry not only checks whether the Token passes a generic XML DSIG signature check, but also that: 1.
the signature uses approved transforms and cryptographic algorithms.
the signature references the <token> element.
the key used in the signature belongs to an accredited VE.
The Token content is not encrypted.
If local policy dictates that the information contained within the token should be confidential, then this has to be handled through a different mechanism.
When processing a delegation request, the Registry MUST verify that the information contained in the Token matches the delegation request.
The <registrarID> element in the Token prevents a malicious second Registrar from using an eavesdropped Token to register a domain in his name.
The Registry MUST verify that the <expirationDate> given (including the case of no given expiration date) conforms to the Registry's policy.
To avert replay attacks, local policy MUST specify how long after <executionDate>
the Token can be used to authorize a delegation.
