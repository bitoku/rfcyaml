- contents:
  - '     The Datagram Congestion Control Protocol (DCCP) Service Codes

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes the usage of Service Codes by the Datagram\n
    \  Congestion Control Protocol, RFC 4340.  It motivates the setting of a\n   Service
    Code by applications.  Service Codes provide a method to\n   identify the intended
    service/application to process a DCCP\n   connection request.  This provides improved
    flexibility in the use\n   and assignment of port numbers for connection multiplexing.
    \ The use\n   of a DCCP Service Code can also enable more explicit coordination
    of\n   services with middleboxes (e.g., network address translators and\n   firewalls).
    \ This document updates the specification provided in RFC\n   4340.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright and License Notice\n   Copyright (c) 2009 IETF Trust and the persons
    identified as the\n   document authors.  All rights reserved.\n   This document
    is subject to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF
    Documents\n   (http://trustee.ietf.org/license-info) in effect on the date of\n
    \  publication of this document.  Please review these documents\n   carefully,
    as they describe your rights and restrictions with respect\n   to this document.
    \ Code Components extracted from this document must\n   include Simplified BSD
    License text as described in Section 4.e of\n   the Trust Legal Provisions and
    are provided without warranty as\n   described in the BSD License.\n   This document
    may contain material from IETF Documents or IETF\n   Contributions published or
    made publicly available before November\n   10, 2008.  The person(s) controlling
    the copyright in some of this\n   material may not have granted the IETF Trust
    the right to allow\n   modifications of such material outside the IETF Standards
    Process.\n   Without obtaining an adequate license from the person(s) controlling\n
    \  the copyright in such materials, this document may not be modified\n   outside
    the IETF Standards Process, and derivative works of it may\n   not be created
    outside the IETF Standards Process, except to format\n   it for publication as
    an RFC or to translate it into languages other\n   than English.\n"
  title: Copyright and License Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. History ....................................................3\n      1.2.
    Conventions Used in This Document ..........................6\n   2. An Architecture
    for Service Codes ...............................6\n      2.1. IANA Port Numbers
    ..........................................6\n      2.2. DCCP Service Code Values
    ...................................7\n           2.2.1. New Versions of Applications
    or Protocols ...........8\n      2.3. Service Code Registry ......................................8\n
    \     2.4. Zero Service Code ..........................................9\n      2.5.
    Invalid Service Code .......................................9\n      2.6. SDP
    for Describing Service Codes ...........................9\n      2.7. A Method
    to Hash the Service Code to a Dynamic Port ........9\n   3. Use of the DCCP Service
    Code ...................................10\n      3.1. Setting Service Codes at
    the Client .......................11\n      3.2. Using Service Codes in the Network
    ........................11\n      3.3. Using Service Codes at the Server .........................12\n
    \          3.3.1. Reception of a DCCP-Request ........................13\n           3.3.2.
    Multiple Associations of a Service Code\n                  with Ports .........................................14\n
    \          3.3.3. Automatically Launching a Server ...................14\n   4.
    Security Considerations ........................................14\n      4.1.
    Server Port Number Reuse ..................................15\n      4.2. Association
    of Applications with Service Codes ............15\n      4.3. Interactions with
    IPsec ...................................15\n   5. IANA Considerations ............................................16\n
    \  6. Acknowledgments ................................................16\n   7.
    References .....................................................17\n      7.1.
    Normative References ......................................17\n      7.2. Informative
    References ....................................17\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   DCCP specifies a Service Code as a 4-byte value (32 bits)
    that\n   describes the application-level service to which a client application\n
    \  wishes to connect ([RFC4340], Section 8.1.2).  A Service Code\n   identifies
    the protocol (or the standard profile, e.g., [RTP-DCCP])\n   to be used at the
    application layer.  It is not intended to be used\n   to specify a variant of
    an application or a specific variant of a\n   protocol (Section 2.2).\n   The
    Service Code mechanism allows an application to declare the set\n   of services
    that are associated with server port numbers.  This can\n   affect how an application
    interacts with DCCP.  It also allows\n   decoupling of the role of port numbers
    to indicate a desired service\n   from the role of port numbers in demultiplexing
    and state management.\n   A DCCP application identifies the requested service
    by the Service\n   Code value in a DCCP-Request packet.  Each application therefore\n
    \  associates one or more Service Codes with each listening port\n   ([RFC4340],
    Section 8.1.2).\n   The use of Service Codes can assist in identifying the intended\n
    \  service by a firewall and may assist other middleboxes (e.g., a proxy\n   server
    or network address translator (NAT) [RFC2663]).  Middleboxes\n   that desire to
    identify the type of data a flow claims to transport\n   should utilize the Service
    Code for this purpose.  When consistently\n   used, the Service Code can provide
    a more specific indication of the\n   actual service (e.g., indicating the type
    of multimedia flow or\n   intended application behaviour) than deriving this information
    from\n   the server port value.\n   The more flexible use of server ports can
    also offer benefits to\n   applications where servers need to handle very large
    numbers of\n   simultaneous-open ports to the same service.\n   RFC 4340 omits
    a description of the motivation behind Service Codes,\n   and it does not properly
    describe how Well Known and Registered\n   server ports relate to Service Codes.
    \ The intent of this document is\n   to clarify these issues.\n   RFC 4340 states
    that Service Codes are not intended to be DCCP-\n   specific.  Service Codes,
    or similar concepts, may therefore also be\n   useful to other IETF transport
    protocols.\n"
  - contents:
    - "1.1.  History\n   It is simplest to understand the motivation for defining
      Service\n   Codes by describing the history of the DCCP protocol.\n   Most current
      Internet transport protocols (TCP [RFC793], UDP\n   [RFC768], SCTP (the Stream
      Control Transmission Protocol) [RFC4960],\n   and UDP-Lite [RFC3828]) use \"Published\"
      port numbers from the Well\n   Known or Registered number spaces [RFC814].  These
      16-bit values\n   indicate the application service associated with a connection
      or\n   message.  The server port must be known to the client to allow a\n   connection
      to be established.  This may be achieved using out-of-band\n   signalling (e.g.,
      described using SDP [RFC4566]), but more commonly a\n   Published port is allocated
      to a particular protocol or application;\n   for example, HTTP commonly uses
      port 80 and SMTP commonly uses port\n   25.  Making a port number Published
      [RFC1122] involves registration\n   with the Internet Assigned Numbers Authority
      (IANA), which includes\n   defining a service by a unique keyword and reserving
      a port number\n   from among a fixed pool [IANA].\n   In the earliest draft
      of DCCP, the authors wanted to address the\n   issue of Published ports in a
      future-proof manner, since this method\n   suffers from several problems:\n
      \  o  The port space is not sufficiently large for ports to be easily\n      allocated
      (e.g., in an unregulated manner).  Thus, many\n      applications operate using
      unregistered ports, possibly colliding\n      with use by other applications.\n
      \  o  The use of port-based firewalls encourages application writers to\n      disguise
      one application as another in an attempt to bypass\n      firewall filter rules.
      \ This motivates firewall writers to use\n      deep packet inspection in an
      attempt to identify the service\n      associated with a port number.\n   o
      \ ISPs often deploy transparent proxies, primarily to improve\n      performance
      and reduce costs.  For example, TCP requests destined\n      to TCP port 80
      are often redirected to a web proxy.\n   These issues are coupled.  When applications
      collide on the same\n   Published-but-unregistered port, there is no simple
      way for network\n   security equipment to tell them apart, and thus it is likely
      that\n   problems will be introduced through the interaction of features.\n
      \  There is little that a transport protocol designer can do about\n   applications
      that attempt to masquerade as other applications.  For\n   ones that are not
      attempting to hide, the problem may be simply that\n   they cannot trivially
      obtain a Published port.  Ideally, it should be\n   sufficiently easy that every
      application writer can request a Well\n   Known or Registered port and receive
      one instantly with no questions\n   asked.  The 16-bit port space traditionally
      used is not large enough\n   to support such a trivial allocation of ports.\n
      \  Thus, the designers of DCCP sought an alternative solution.  The idea\n   was
      simple.  A 32-bit server port space should be sufficiently large\n   to enable
      use of very simple allocation policies.  However, overhead\n   considerations
      made a 32-bit port value undesirable (DCCP needed to\n   be useful for low-rate
      applications).\n   The solution in DCCP to this problem was to use a 32-bit
      Service Code\n   [RFC4340] that is included only in the DCCP-Request packet.
      \ The use\n   of a 32-bit value was intended to make it trivially simple to
      obtain\n   a unique value for each application.  Placing the value in a DCCP-\n
      \  Request packet requires no additional overhead for the actual data\n   flow.
      \ It is however sufficient for both the end systems, and\n   provides any stateful
      middleboxes along the path with additional\n   information to understand what
      applications are being used.\n   Early discussion of the DCCP protocol considered
      an alternative to\n   the use of traditional ports; instead, it was suggested
      that a client\n   use a 32-bit identifier to uniquely identify each connection
      and that\n   the server listen on a socket bound only to a Service Code.  This\n
      \  solution was unambiguous; the Service Code was the only identifier\n   for
      a listening socket at the server side.  The DCCP client included\n   a Service
      Code in the request, allowing it to reach the corresponding\n   listening application.
      \ One downside was that this prevented\n   deployment of two servers for the
      same service on a single machine,\n   something that is trivial with ports.
      \ The design also suffered from\n   the downside of being sufficiently different
      from existing protocols\n   that there were concerns that it would hinder the
      use of DCCP through\n   NATs and other middleboxes.\n   RFC 4340 abandoned the
      use of a 32-bit connection identifier in favor\n   of two traditional 16-bit
      port values, one chosen by the server and\n   one by the client.  This allows
      middleboxes to utilize similar\n   techniques for DCCP, UDP, TCP, etc.  However,
      it introduced a new\n   problem: \"How does the server port relate to the Service
      Code?\"  The\n   intent was that the Service Code identified the application
      or\n   protocol using DCCP, providing middleboxes with information about the\n
      \  intended use of a connection, and that the pair of ports effectively\n   formed
      a 32-bit connection identifier, which was unique between a\n   pair of end systems.\n
      \  The large number of available, unique Service Code values allows all\n   applications
      to be assigned a unique Service Code.  However, there\n   remained a problem:
      the server port was chosen by the server, but the\n   client needed to know
      this port to establish a connection.  It was\n   undesirable to mandate out-of-band
      communication to discover the\n   server port.  The chosen solution was to register
      DCCP server ports.\n   The limited availability of DCCP server ports appears
      to contradict\n   the benefits of DCCP Service Codes because, although it may
      be\n   trivial to obtain a Service Code, it has not traditionally been\n   trivial
      to obtain a Registered port from IANA and, in the long-run,\n   it may not be
      possible to allocate a unique Registered DCCP port to\n   new applications.
      \ As port numbers become scarce, this motivates the\n   need to associate more
      than one Service Code with a listening port\n   (e.g., two different applications
      could be assigned the same server\n   port and need to run on the same host
      at the same time,\n   differentiated by their different associated Service Codes).\n
      \  Service Codes provide flexibility in the way clients identify the\n   server
      application to which they wish to communicate.  The mechanism\n   allows a server
      to associate a set of server ports with a service.\n   The set may be common
      with other services available at the same\n   server host, allowing a larger
      number of concurrent connections for a\n   particular service than possible
      when the service is identified by a\n   single Published port number.\n"
    title: 1.1.  History
  - contents:
    - "1.2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in RFC 2119 [RFC2119].\n"
    title: 1.2.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  An Architecture for Service Codes\n   DCCP defines the use of a combination
    of ports and Service Codes to\n   identify the server application ([RFC4340],
    Section 8.1.2).  These\n   are described in the following sections.\n"
  - contents:
    - "2.1.  IANA Port Numbers\n   In DCCP, the packets belonging to a connection
      are demultiplexed\n   based on a combination of four values {source IP address,
      source\n   port, dest IP address, dest port}, as in TCP.  An endpoint address
      is\n   associated with a port number (e.g., forming a socket) and a pair of\n
      \  associations uniquely identifies each connection.  Ports provide the\n   fundamental
      per-packet demultiplexing function.\n   The Internet Assigned Numbers Authority
      currently manages the set of\n   globally reserved port numbers [IANA].  The
      source port associated\n   with a connection request, often known as the \"ephemeral
      port\", is\n   traditionally in the range 49152-65535 and also includes the
      range\n   1024-49151.  The value used for the ephemeral port is usually chosen\n
      \  by the client operating system.  It has been suggested that a\n   randomized
      choice port number value can help defend against \"blind\"\n   attacks [Rand]
      in TCP.  This method may be applicable to other IETF-\n   defined transport
      protocols, including DCCP.\n   Traditionally, the destination (server) port
      value associated with a\n   service is determined either by an operating system
      index that points\n   to a copy of the IANA table (e.g., getportbyname() in
      Unix, which\n   indexes the /etc/services file) or by the application specifying
      a\n   direct mapping.\n   The UDP and TCP port number space: 0..65535, is split
      into three\n   ranges [RFC2780]:\n   o  0..1023 \"Well Known\", also called
      \"system\" ports,\n   o  1024..49151 \"Registered\", also called \"user\" ports,
      and\n   o  49152..65535 \"Dynamic\", also called \"private\" ports.\n   DCCP
      supports Well Known and Registered ports.  These are allocated\n   in the DCCP
      IANA Port Numbers registry ([RFC4340], Section 19.9).\n   Each Registered DCCP
      port MUST be associated with at least one pre-\n   defined Service Code.\n   Applications
      that do not need to use a server port in the Well Known\n   or Registered range
      SHOULD use a Dynamic server port (i.e., one not\n   required to be registered
      in the DCCP Port registry).  Clients can\n   identify the server port value
      for the services to which they wish to\n   connect using a range of methods.
      \ One common method is by reception\n   of an SDP record (Section 2.6) exchanged
      out-of-band (e.g., using SIP\n   [RFC3261] or the Real Time Streaming Protocol
      (RTSP) [RFC2326]).  DNS\n   SRV resource records also provide a way to identify
      a server port for\n   a particular service based on the service's string name
      [RFC2782].\n   Applications that do not use out-of-band signalling can still\n
      \  communicate, provided that both client and server agree on the port\n   value
      to be used.  This eliminates the need for each registered\n   Service Code to
      be allocated to an IANA-assigned server port (see\n   also Section 2.7).\n"
    title: 2.1.  IANA Port Numbers
  - contents:
    - "2.2.  DCCP Service Code Values\n   DCCP specifies a 4-byte Service Code ([RFC4340],
      Section 8.1.2)\n   represented in one of three forms: a decimal number (the
      canonical\n   method), a 4-character ASCII string [ANSI.X3-4.1986], or an 8-digit\n
      \  hexadecimal number.  All standards assigned Service Codes, including\n   all
      values assigned by IANA, are required to use a value that may be\n   represented
      using a subset of the ASCII character set.  Private\n   Service Codes do not
      need to follow this convention, although RFC\n   4340 suggests that users choose
      Service Codes that may also be\n   represented in ASCII.\n   The Service Code
      identifies the application-level service to which a\n   client application wishes
      to connect.  For example, services have\n   been defined for the Real-Time Protocol
      (RTP) [RTP-DCCP].  In a\n   different example, Datagram Transport Layer Security
      (DTLS) [RFC5238]\n   provides a transport-service (not an application-layer
      service);\n   therefore, applications using DTLS are individually identified
      by a\n   set of corresponding Service Code values.\n   Endpoints MUST associate
      a Service Code with every DCCP socket\n   [RFC4340], both actively and passively
      opened.  The application will\n   generally supply this Service Code.  A single
      passive-listening port\n   may be associated with more than one Service Code
      value.  The set of\n   Service Codes could be associated with one or more server\n
      \  applications.  This permits a more flexible correspondence between\n   services
      and port numbers than is possible using the corresponding\n   socket pair (4-tuple
      of layer-3 addresses and layer-4 ports).  In the\n   currently defined set of
      packet types, the Service Code value is\n   present only in DCCP-Request ([RFC4340],
      Section 5.2) and DCCP-\n   Response packets ([RFC4340], Section 5.3).  Note
      that new DCCP packet\n   types (e.g., [RFC5596]) could also carry a Service
      Code value.\n"
    - contents:
      - "2.2.1.  New Versions of Applications or Protocols\n   Applications/protocols
        that provide version negotiation or indication\n   in the protocol operating
        over DCCP do not require a new server port\n   or new Service Code for each
        new protocol version.  New versions of\n   such applications/protocols SHOULD
        continue to use the same Service\n   Code.  If the application developers
        feel that the new version\n   provides significant new capabilities (e.g.,
        that will change the\n   behavior of middleboxes), they MAY allocate a new
        Service Code\n   associated with the same or different set of Well Known ports.
        \ If\n   the new Service Code is associated with a Well Known or Registered\n
        \  port, the DCCP Ports registry MUST also be updated to include the new\n
        \  Service Code value, but MAY share the same server port assignment(s).\n"
      title: 2.2.1.  New Versions of Applications or Protocols
    title: 2.2.  DCCP Service Code Values
  - contents:
    - "2.3.  Service Code Registry\n   The set of registered Service Codes specified
      for use within the\n   general Internet are defined in an IANA-controlled name
      space.  IANA\n   manages new allocations of Service Codes in this space [RFC4340].\n
      \  Private Service Codes are not centrally allocated and are denoted by\n   the
      decimal range 1056964608-1073741823 (i.e., 32-bit values with the\n   high-order
      byte equal to a value of 63, corresponding to the ASCII\n   character '?').\n
      \  Associations of Service Code with Well Known ports are also defined\n   in
      the IANA DCCP Port registry (Section 2.1).\n"
    title: 2.3.  Service Code Registry
  - contents:
    - "2.4.  Zero Service Code\n   A Service Code of zero is \"permanently reserved
      (it represents the\n   absence of a meaningful Service Code)\" [RFC4340].  This
      indicates\n   that no application information was provided.  RFC 4340 states
      that\n   applications MAY be associated with this Service Code in the same way\n
      \  as other Service Code values.  This use is permitted for any server\n   port.\n
      \  This document clarifies Section 19.8 of RFC 4340 by adding the\n   following:\n
      \     Applications SHOULD NOT use a Service Code of zero.\n      Application
      writers that need a temporary Service Code value\n      SHOULD choose a value
      from the private range (Section 2.3).\n      Applications intended for deployment
      in the Internet are\n      encouraged to use an IANA-defined Service Code.  If
      no specific\n      Service Code exists, they SHOULD request a new assignment
      from the\n      IANA.\n"
    title: 2.4.  Zero Service Code
  - contents:
    - "2.5.  Invalid Service Code\n   RFC 4340 defines the Service Code value of 4294967295
      in decimal\n   (0xFFFFFFFF) as \"invalid\".  This is provided so implementations
      can\n   use a special 4-byte value to indicate \"no valid Service Code\".\n
      \  Implementations MUST NOT accept a DCCP-Request with this value, and\n   SHOULD
      NOT allow applications to bind to this Service Code value\n   [RFC4340].\n"
    title: 2.5.  Invalid Service Code
  - contents:
    - "2.6.  SDP for Describing Service Codes\n   Methods that currently signal destination
      port numbers, such as the\n   Session Description Protocol (SDP) [RFC4566],
      require an extension to\n   support DCCP Service Codes [RTP-DCCP].\n"
    title: 2.6.  SDP for Describing Service Codes
  - contents:
    - "2.7.  A Method to Hash the Service Code to a Dynamic Port\n   Applications
      that do not use out-of-band signalling or an IANA-\n   assigned port still require
      both the client and server to agree on\n   the server port value to be used.
      \ This section describes an optional\n   method that allows an application to
      derive a default server port\n   number from the Service Code.  The returned
      value is in the Dynamic\n   port range [RFC4340]:\n     int s_port; /* server
      port */\n     s_port = ((sc[0]<<7)^(sc[1]<<5)^(sc[2]<<3)^sc[3]) | 0xC000;\n
      \    if (s_port==0xFFFF) {s_port = 0xC000;}\n   where sc[] represents the 4
      bytes of the Service Code, and sc[3] is\n   the least significant byte.  For
      example, this function associates\n   SC:fdpz with the server port 64634.\n
      \  This algorithm has the following properties:\n   o  It identifies a default
      server port for each service.\n   o  It seeks to assign different Service Codes
      to different ports, but\n      does not guarantee an assignment is unique.\n
      \  o  It preserves the 4 lowest bits of the final bytes of the Service\n      Code,
      which allows many common series of Service Codes to be\n      mapped to a set
      of adjacent port numbers, e.g., Foo1, and Foo2;\n      Fooa and Foob would be
      assigned adjacent ports.  (Note: this\n      consecutive numbering only applies
      to characters in the range 0-9\n      and A-O and P-Z.  When the characters
      cross a range boundary, the\n      algorithm introduces a discontinuity, resulting
      in mapping to\n      non-consecutive ports.  Hence, Fooo and Foop respectively
      map to\n      the decimal values of 65015 and 65000).\n   o  It avoids the port
      0xFFFF, which is not accessible on all host\n      platforms.\n   Applications
      and higher-layer protocols that have been assigned a\n   Service Code (or use
      a Service Code from the unassigned private\n   space) may use this method.  It
      does not preclude other applications\n   using the selected server port, since
      DCCP servers are differentiated\n   by the Service Code value.\n"
    title: 2.7.  A Method to Hash the Service Code to a Dynamic Port
  title: 2.  An Architecture for Service Codes
- contents:
  - "3.  Use of the DCCP Service Code\n   The basic operation of Service Codes is
    as follows:\n   A client initiating a connection:\n      -  issues a DCCP-Request
    with a Service Code and chooses a\n         destination (server) port number that
    is expected to be\n         associated with the specified Service Code at the
    destination.\n   A server that receives a DCCP-Request:\n      -  determines whether
    an available service matching the Service\n         Code is supported for the
    specified destination server port.\n         The session is associated with the
    Service Code and a\n         corresponding server.  A DCCP-Response is returned.\n
    \     -  if the service is not available, the session is rejected and a\n         DCCP-Reset
    packet is returned.\n"
  - contents:
    - "3.1.  Setting Service Codes at the Client\n   A client application MUST associate
      every DCCP connection (and hence\n   every DCCP active socket) with a single
      Service Code value\n   [RFC4340]).  This value is used in the corresponding
      DCCP-Request\n   packet.\n"
    title: 3.1.  Setting Service Codes at the Client
  - contents:
    - "3.2.  Using Service Codes in the Network\n   DCCP connections identified by
      the Service Code continue to use IP\n   addresses and ports, although neither
      port number may be Published.\n   Port numbers and IP addresses are the traditional
      methods to identify\n   a flow within an IP network.  Middlebox [RFC3234] implementors\n
      \  therefore need to note that new DCCP connections are identified by\n   the
      pair of server port and Service Code in addition to the IP\n   address.  This
      means that the IANA may allocate a server port to more\n   than one DCCP application
      [RFC4340].\n   Network address and port translators, known collectively as NATs\n
      \  [RFC2663], may interpret DCCP ports ([RFC2993] and [RFC5597]).  They\n   may
      also interpret DCCP Service Codes.  Interpreting DCCP Service\n   Codes can
      reduce the need to correctly interpret port numbers,\n   leading to new opportunities
      for network address and port\n   translators.  Although it is encouraged to
      associate specific\n   delivery properties with the Service Code, e.g., to identify
      the\n   real-time nature of a flow that claims to be using RTP, there is no\n
      \  guarantee that the actual connection data corresponds to the\n   associated
      Service Code.  A middlebox implementor may still use deep\n   packet inspection,
      and other means, in an attempt to verify the\n   content of a connection.\n
      \  The use of the DCCP Service Code can potentially lead to interactions\n   with
      other protocols that interpret or modify DCCP port numbers\n   [RFC3234].  The
      following additional clarifications update the\n   description provided in Section
      16 of RFC 4340:\n      o  A middlebox that intends to differentiate applications
      SHOULD\n         test the Service Code in addition to the destination or source\n
      \        port of a DCCP-Request or DCCP-Response packet.\n      o  A middlebox
      that does not modify the intended application\n         (e.g., NATs [RFC5597]
      and Firewalls) MUST NOT change the\n         Service Code.\n      o  A middlebox
      MAY send a DCCP-Reset in response to a packet with\n         a Service Code
      that is considered unsuitable.\n"
    title: 3.2.  Using Service Codes in the Network
  - contents:
    - "3.3.  Using Service Codes at the Server\n   The combination of the Service
      Code and server port disambiguates\n   incoming DCCP-Requests received by a
      server.  The Service Code is\n   used to associate a new DCCP connection with
      the corresponding\n   application service.  Four cases can arise when two DCCP
      server\n   applications passively listen on the same host:\n      o  The simplest
      case arises when two servers are associated with\n         different Service
      Codes and are bound to different server ports\n         (Section 3.3.1).\n      o
      \ Two servers may be associated with the same DCCP Service Code\n         value
      but be bound to different server ports (Section 3.3.2).\n      o  Two servers
      could use different DCCP Service Code values and be\n         bound to the same
      server port (Section 3.3.1).\n      o  Two servers could attempt to use the
      same DCCP Service Code and\n         bind to the same server port.  A DCCP implementation
      MUST\n         disallow this, since there is no way for the DCCP host to\n         direct
      a new connection to the correct server application.\n   RFC 4340 (Section 8.1.2)
      states that an implementation:\n      o  MUST associate each active socket with
      exactly one Service Code\n         on a specified server port.\n   In addition,
      Section 8.1.2 of RFC 4340 also states:\n      o  Passive sockets MAY, at the
      implementation's discretion, be\n         associated with more than one Service
      Code; this might let\n         multiple applications, or multiple versions of
      the same\n         application, listen on the same port, differentiated by Service\n
      \        Code.\n   This document updates the above text from RFC 4340 by replacing
      it\n   with the following:\n      o  An implementation SHOULD allow more than
      one Service Code to be\n         associated with a passive server port, enabling
      multiple\n         applications, or multiple versions of an application, to
      listen\n         on the same port, differentiated by the associated Service\n
      \        Code.\n   It also adds:\n      o  An implementation SHOULD provide
      a method that informs a server\n         of the Service Code value that was
      selected by an active\n         connection.\n   A single passively opened (listening)
      port MAY therefore be\n   associated with multiple Service Codes, although an
      active (open)\n   connection can only be associated with a single Service Code.
      \ A\n   single application may wish to accept connections for more than one\n
      \  Service Code using the same server port.  This may allow a server to\n   offer
      more than the limit of 65,536 services depending on the size of\n   the Port
      field.  The upper limit is based solely on the number of\n   unique connections
      between two hosts (i.e., 4,294,967,296).\n"
    - contents:
      - "3.3.1.  Reception of a DCCP-Request\n   When a DCCP-Request is received and
        the specified destination port is\n   not bound to a server, the host MUST
        reject the connection by issuing\n   a DCCP-Reset with the Reset Code \"Connection
        Refused\".  A host MAY\n   also use the Reset Code \"Too Busy\" ([RFC4340],
        Section 8.1.3).\n   When the requested destination port is bound to a server,
        the host\n   MUST also verify that the server port is associated with the\n
        \  specified Service Code (there could be multiple Service Code values\n   associated
        with the same server port).  Two cases can occur:\n   o  If the receiving
        host is listening on a server port and the DCCP-\n      Request uses a Service
        Code that is associated with the port, the\n      host accepts the connection.
        \ Once connected, the server returns a\n      copy of the Service Code in
        the DCCP-Response packet, completing\n      the initial handshake [RFC4340].\n
        \  o  If the server port is not associated with the requested Service\n      Code,
        the server SHOULD reject the request by sending a DCCP-Reset\n      packet
        with the Reset Code 8, \"Bad Service Code\" ([RFC4340],\n      Section 8.1.2),
        but MAY use the reason \"Connection Refused\".\n   After a connection has
        been accepted, the protocol control block is\n   associated with a pair of
        ports, a pair of IP addresses, and a single\n   Service Code value.\n"
      title: 3.3.1.  Reception of a DCCP-Request
    - contents:
      - "3.3.2.  Multiple Associations of a Service Code with Ports\n   DCCP Service
        Codes are not restricted to specific ports, although\n   they may be associated
        with a specific Well Known port.  This allows\n   the same DCCP Service Code
        value to be associated with more than one\n   server port (in either the active
        or passive state).\n"
      title: 3.3.2.  Multiple Associations of a Service Code with Ports
    - contents:
      - "3.3.3.  Automatically Launching a Server\n   A host implementation may permit
        a service to be associated with a\n   server port (or range of ports) that
        is not permanently running at\n   the server.  In this case, the arrival of
        a DCCP-Request may require\n   a method to associate a DCCP-Request with a
        server that handles the\n   corresponding Service Code.  This operation could
        resemble that of\n   \"inetd\" [inetd].\n   As in the previous section, when
        the specified Service Code is not\n   associated with the specified server
        port, the connection MUST be\n   aborted and a DCCP Reset message sent [RFC4340].\n"
      title: 3.3.3.  Automatically Launching a Server
    title: 3.3.  Using Service Codes at the Server
  title: 3.  Use of the DCCP Service Code
- contents:
  - "4.  Security Considerations\n   The security considerations of RFC 4340 identify
    and offer guidance\n   on security issues relating to DCCP.  This document discusses
    the\n   usage of Service Codes.  It does not describe new protocol functions.\n
    \  All IPsec modes protect the integrity of the DCCP header.  This\n   protects
    the Service Code field from undetected modification within\n   the network.  In
    addition, the IPsec Encapsulated Security Payload\n   (ESP) mode may be used to
    encrypt the Service Code field, hiding the\n   Service Code value within the network
    and also preventing\n   interpretation by middleboxes.  The DCCP header is not
    protected by\n   application-layer security (e.g., the use of DTLS [RFC5238] as\n
    \  specified in DTLS/DCCP [RFC4347]).\n   There are four areas of security that
    are important:\n   1. Server Port number reuse (Section 4.1).\n   2. Interaction
    with NATs and firewalls (Section 3.2 describes\n      middlebox behavior).  Requirements
    relating to DCCP are described\n      in [RFC5597].\n   3. Interpretation of DCCP
    Service Codes overriding traditional use of\n      reserved/Well Known port numbers
    (Section 4.2).\n   4. Interaction with IPsec and DTLS security (Section 4.3).\n"
  - contents:
    - "4.1.  Server Port Number Reuse\n   Service Codes are used in addition to ports
      when demultiplexing\n   incoming connections.  This changes the service model
      to be used by\n   applications and middleboxes.  The Port Numbers registry already\n
      \  contains instances of multiple application registrations for a single\n   port
      number for TCP and UDP.  These are relatively rare.  Since the\n   DCCP Service
      Code allows multiple applications to safely share the\n   same port number,
      even on the same host, server port number reuse in\n   DCCP may be more common
      than in TCP and UDP.\n"
    title: 4.1.  Server Port Number Reuse
  - contents:
    - "4.2.  Association of Applications with Service Codes\n   The use of Service
      Codes provides more ready feedback that a concrete\n   service is associated
      with a given port on a server than for a\n   service that does not employ Service
      Codes.  By responding to an\n   inbound connection request, systems not using
      these codes may\n   indicate that some service is, or is not, available on a
      given port,\n   but systems using this mechanism immediately provide confirmation
      (or\n   denial) that a particular service is present.  This may have\n   implications
      in terms of port scanning and reconnaissance.\n   Care needs to be exercised
      when interpreting the mapping of a Service\n   Code value to the corresponding
      service.  The same service\n   (application) may be accessed using more than
      one Service Code.\n   Examples include the use of separate Service Codes for
      an application\n   layered directly upon DCCP and one using DTLS transport over
      DCCP\n   [RFC5238].  Other possibilities include the use of a private Service\n
      \  Code to map to an application that has already been assigned an IANA-\n   defined
      Service Code value, or multiple Service Code values that map\n   to a single
      application providing more than one service.  Different\n   versions of a service
      (application) may also be mapped to a\n   corresponding set of Service Code
      values.\n   Processing of Service Codes may imply more processing than currently\n
      \  associated with incoming port numbers.  Implementors need to guard\n   against
      increasing opportunities for Denial of Service attacks.\n"
    title: 4.2.  Association of Applications with Service Codes
  - contents:
    - "4.3.  Interactions with IPsec\n   The Internet Key Exchange protocol (IKEv2)
      does not currently specify\n   a method to use DCCP Service Codes as a part
      of the information used\n   to set up an IPsec security association.\n   IPsec
      uses port numbers to perform access control in transport mode\n   [RFC4301].
      \ Security policies can define port-specific access control\n   (PROTECT, BYPASS,
      DISCARD) as well as port-specific algorithms and\n   keys.  Similarly, firewall
      policies allow or block traffic based on\n   port numbers.\n   Use of port numbers
      in IPsec selectors and firewalls may assume that\n   the numbers correspond
      to Well Known services.  It is useful to note\n   that there is no such requirement;
      any service may run on any port,\n   subject to mutual agreement between the
      endpoint hosts.  Use of the\n   Service Code may interfere with this assumption
      both within IPsec and\n   within other firewall systems, but it does not add
      a new\n   vulnerability.  New implementations of IPsec and firewall systems
      may\n   interpret the Service Code when implementing policy rules, but should\n
      \  not rely on either port numbers or Service Codes to indicate a\n   specific
      service.\n"
    title: 4.3.  Interactions with IPsec
  title: 4.  Security Considerations
- contents:
  - "5.  IANA Considerations\n   This document does not update the IANA allocation
    procedures for the\n   DCCP Port Number and DCCP Service Codes Registries as defined
    in RFC\n   4340.\n   For completeness, the document notes that it is not required
    to\n   supply an approved document (e.g., a published RFC) to support an\n   application
    for a DCCP Service Code or port number value, although\n   RFCs may be used to
    request Service Code values via the IANA\n   Considerations section.  A specification
    is however required to\n   allocate a Service Code that uses a combination of
    ASCII digits,\n   uppercase letters, and character space, '-', '.', and '/') [RFC4340].\n"
  title: 5.  IANA Considerations
- contents:
  - "6.  Acknowledgments\n   This work has been supported by the EC IST SatSix Project.\n
    \  Significant contributions to this document resulted from discussion\n   with
    Joe Touch, and this is gratefully acknowledged.  The author also\n   thanks Ian
    McDonald, Fernando Gont, Eddie Kohler, and the DCCP WG for\n   helpful comments
    on this topic, and Gerrit Renker for his help in\n   determining DCCP behavior
    and review of this document.  Mark Handley\n   provided significant input to the
    text on the definition of Service\n   Codes and their usage.  He also contributed
    much of the material that\n   has formed the historical background section.\n"
  title: 6.  Acknowledgments
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC1122]  Braden, R., Ed., \"Requirements for
      Internet Hosts -\n              Communication Layers\", STD 3, RFC 1122, October
      1989.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n
      \             Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC4340]
      \ Kohler, E., Handley, M., and S. Floyd, \"Datagram\n              Congestion
      Control Protocol (DCCP)\", RFC 4340, March 2006.\n   [RFC5597]  Denis-Courmont,
      R., \"Network Address Translation (NAT)\n              Behavioral Requirements
      for the Datagram Congestion\n              Control Protocol\", BCP 150, RFC
      5597, September 2009.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [ANSI.X3-4.1986]\n              American National
      Standards Institute, \"Coded Character\n              Set - 7-bit American Standard
      Code for Information\n              Interchange\", ANSI X3.4, 1986.\n   [IANA]
      \    Internet Assigned Numbers Authority, www.iana.org.\n   [RTP-DCCP] Perkins,
      C., \"RTP and the Datagram Congestion Control\n              Protocol (DCCP)\",
      Work in Progress, June 2007.\n   [Rand]     Larsen, M. and F. Gont, \"Port Randomization\",
      Work in\n              Progress, March 2009.\n   [inetd]    The extended inetd
      project, http://xinetd.org.\n   [RFC768]   Postel, J., \"User Datagram Protocol\",
      STD 6, RFC 768,\n              August 1980.\n   [RFC793]   Postel, J., \"Transmission
      Control Protocol\", STD 7, RFC\n              793, September 1981.\n   [RFC814]
      \  Clark, D., \"Name, addresses, ports, and routes\", RFC 814,\n              July
      1982.\n   [RFC2326]  Schulzrinne, H., Rao, A., and R. Lanphier, \"Real Time\n
      \             Streaming Protocol (RTSP)\", RFC 2326, April 1998.\n   [RFC2663]
      \ Srisuresh, P. and M. Holdrege, \"IP Network Address\n              Translator
      (NAT) Terminology and Considerations\", RFC\n              2663, August 1999.\n
      \  [RFC2780]  Bradner, S. and V. Paxson, \"IANA Allocation Guidelines For\n
      \             Values In the Internet Protocol and Related Headers\", BCP\n              37,
      RFC 2780, March 2000.\n   [RFC2782]  Gulbrandsen, A., Vixie, P., and L. Esibov,
      \"A DNS RR for\n              specifying the location of services (DNS SRV)\",
      RFC 2782,\n              February 2000.\n   [RFC2993]  Hain, T., \"Architectural
      Implications of NAT\", RFC 2993,\n              November 2000.\n   [RFC3234]
      \ Carpenter, B. and S. Brim, \"Middleboxes: Taxonomy and\n              Issues\",
      RFC 3234, February 2002.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo,
      G., Johnston,\n              A., Peterson, J., Sparks, R., Handley, M., and
      E.\n              Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n
      \             June 2002.\n   [RFC3828]  Larzon, L-A., Degermark, M., Pink, S.,
      Jonsson, L-E., Ed.,\n              and G. Fairhurst, Ed., \"The Lightweight
      User Datagram\n              Protocol (UDP-Lite)\", RFC 3828, July 2004.\n   [RFC4301]
      \ Kent, S. and K. Seo, \"Security Architecture for the\n              Internet
      Protocol\", RFC 4301, December 2005.\n   [RFC4347]  Rescorla, E. and N. Modadugu,
      \"Datagram Transport Layer\n              Security\", RFC 4347, April 2006.\n
      \  [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n              Description
      Protocol\", RFC 4566, July 2006.\n   [RFC4960]  Stewart, R., Ed., \"Stream Control
      Transmission Protocol\",\n              RFC 4960, September 2007.\n   [RFC5238]
      \ Phelan, T., \"Datagram Transport Layer Security (DTLS) over\n              the
      Datagram Congestion Control Protocol (DCCP)\", RFC\n              5238, May
      2008.\n   [RFC5596]  Fairhurst, G., \"Datagram Congestion Control Protocol\n
      \             (DCCP) Simultaneous-Open Technique to Facilitate\n              NAT/Middlebox
      Traversal\", RFC 5596, September 2009.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Author's Address\n   Godred Fairhurst,\n   School of Engineering,\n   University
    of Aberdeen,\n   Kings College,\n   Aberdeen, AB24 3UE,\n   UK\n   EMail: gorry@erg.abdn.ac.uk\n
    \  URL:   http://www.erg.abdn.ac.uk/users/gorry\n"
  title: Author's Address
