- title: __initial_text__
  contents:
  - ''
- title: NAT Behavior Discovery Using Session Traversal Utilities for NAT (STUN)
  contents:
  - 'NAT Behavior Discovery Using Session Traversal Utilities for NAT (STUN)

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification defines an experimental usage of the Session\n\
    \   Traversal Utilities for NAT (STUN) Protocol that discovers the\n   presence\
    \ and current behavior of NATs and firewalls between the STUN\n   client and the\
    \ STUN server.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5780.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Applicability  . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n     1.1.  Requirements Language  . . . . . . . . . . . . .\
    \ . . . . .  5\n   2.  Introduction . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  6\n     2.1.  Example Diagnostic Use . . . . . . . . . . . . . . .\
    \ . . .  6\n     2.2.  Example Use with P2P Overlays  . . . . . . . . . . . .\
    \ . .  7\n     2.3.  Experimental Goals . . . . . . . . . . . . . . . . . . .\
    \ .  8\n   3.  Overview of Operations . . . . . . . . . . . . . . . . . . . .\
    \  9\n     3.1.  Determining NAT Mapping  . . . . . . . . . . . . . . . . . 10\n\
    \     3.2.  Determining NAT Filtering  . . . . . . . . . . . . . . . . 10\n  \
    \   3.3.  Binding Lifetime Discovery . . . . . . . . . . . . . . . . 10\n    \
    \ 3.4.  Diagnosing NAT Hairpinning . . . . . . . . . . . . . . . . 11\n     3.5.\
    \  Determining Fragment Handling  . . . . . . . . . . . . . . 11\n     3.6.  Detecting\
    \ a Generic Application Level Gateway (ALG)  . . . 11\n   4.  Discovery Process\
    \  . . . . . . . . . . . . . . . . . . . . . . 11\n     4.1.  Source Port Selection\
    \  . . . . . . . . . . . . . . . . . . 12\n     4.2.  Checking for UDP Connectivity\
    \ with the STUN Server . . . . 13\n     4.3.  Determining NAT Mapping Behavior\
    \ . . . . . . . . . . . . . 14\n     4.4.  Determining NAT Filtering Behavior\
    \ . . . . . . . . . . . . 14\n     4.5.  Combining and Ordering Tests . . . .\
    \ . . . . . . . . . . . 15\n     4.6.  Binding Lifetime Discovery . . . . . .\
    \ . . . . . . . . . . 15\n   5.  Client Behavior  . . . . . . . . . . . . . .\
    \ . . . . . . . . . 17\n     5.1.  Discovery  . . . . . . . . . . . . . . . .\
    \ . . . . . . . . 17\n     5.2.  Security . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . 18\n   6.  Server Behavior  . . . . . . . . . . . . . . . . .\
    \ . . . . . . 18\n     6.1.  Preparing the Response . . . . . . . . . . . . .\
    \ . . . . . 18\n   7.  New Attributes . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 20\n     7.1.  Representing Transport Addresses . . . . . . . . . .\
    \ . . . 21\n     7.2.  CHANGE-REQUEST . . . . . . . . . . . . . . . . . . . .\
    \ . . 21\n     7.3.  RESPONSE-ORIGIN  . . . . . . . . . . . . . . . . . . . .\
    \ . 21\n     7.4.  OTHER-ADDRESS  . . . . . . . . . . . . . . . . . . . . . .\
    \ 22\n     7.5.  RESPONSE-PORT  . . . . . . . . . . . . . . . . . . . . . . 22\n\
    \     7.6.  PADDING  . . . . . . . . . . . . . . . . . . . . . . . . . 22\n  \
    \ 8.  IAB Considerations . . . . . . . . . . . . . . . . . . . . . . 23\n    \
    \ 8.1.  Problem Definition . . . . . . . . . . . . . . . . . . . . 23\n     8.2.\
    \  Exit Strategy  . . . . . . . . . . . . . . . . . . . . . . 23\n     8.3.  Brittleness\
    \ Introduced by STUN NAT Behavior Discovery  . . 24\n     8.4.  Requirements for\
    \ a Long-Term Solution  . . . . . . . . . . 24\n     8.5.  Issues with Existing\
    \ NAPT Boxes  . . . . . . . . . . . . . 24\n   9.  IANA Considerations  . . .\
    \ . . . . . . . . . . . . . . . . . . 25\n     9.1.  STUN Attribute Registry \
    \ . . . . . . . . . . . . . . . . . 25\n     9.2.  Port Numbers and SRV Registry\
    \  . . . . . . . . . . . . . . 25\n   10. Security Considerations  . . . . . .\
    \ . . . . . . . . . . . . . 25\n   11. Acknowledgements . . . . . . . . . . .\
    \ . . . . . . . . . . . . 26\n   12. References . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . 26\n     12.1. Normative References . . . . . . . . .\
    \ . . . . . . . . . . 26\n     12.2. Informative References . . . . . . . . .\
    \ . . . . . . . . . 27\n"
- title: 1.  Applicability
  contents:
  - "1.  Applicability\n   This experimental NAT Behavior Discovery STUN usage provides\n\
    \   information about a NAT device's observable transient behavior; it\n   determines\
    \ a NAT's behavior with regard to the STUN server used and\n   the particular\
    \ client ports used at the instant the test is run.\n   This STUN usage does not\
    \ allow an application behind a NAT to make an\n   absolute determination of the\
    \ NAT's characteristics.  NAT devices do\n   not behave consistently enough to\
    \ predict future behavior with any\n   guarantee.  Applications requiring reliable\
    \ reach between two\n   particular endpoints must establish a communication channel\
    \ through\n   NAT using another technique.  IETF has proposed standards including\n\
    \   [RFC5245] and [RFC5626] for establishing communication channels when\n   a\
    \ publicly accessible rendezvous service is available.\n   The uses envisioned\
    \ for the STUN attributes included in this document\n   are diagnostics and real-time\
    \ tuning of applications.  For example,\n   determining what may work and should\
    \ be tried first compared to more\n   expensive methods.  The attributes can also\
    \ be used to observe\n   behaviors that causes an application's communication\
    \ to fail, thus\n   enabling better selection of methods of recovery.  The STUN\n\
    \   attributes could also be a basis for a network technician's\n   diagnostics\
    \ tool to observe NAT behavior.\n   This document proposes experimental usage\
    \ of these attributes for\n   real-time optimization of parameters for protocols\
    \ in situations\n   where a publicly accessible rendezvous service is not available.\n\
    \   Such a use of these techniques is only possible when the results are\n   applied\
    \ as an optimization and a reliable fallback is available in\n   case the NAT's\
    \ behavior becomes more restrictive than determined by\n   the Behavior Discovery\
    \ tests.  One possible application is role\n   selection in peer-to-peer (P2P)\
    \ networks based on statistical\n   experience with establishing direct connections\
    \ and diagnosing NAT\n   behavior with a variety of peers.  The experimental question\
    \ is\n   whether such a test is useful.  Consider a node that tries to join an\n\
    \   overlay as a full peer when its NAT prevents sufficient connectivity;\n  \
    \ joining and withdrawing from the overlay might be expensive and/or\n   lead\
    \ to unreliable or poorly performing operations.  Even if the\n   behavior discovery\
    \ check is only \"correct\" 75% of the time, its\n   relative cheapness may make\
    \ it very useful for optimizing the\n   behavior of the overlay network.  Section\
    \ 2.2 describes this\n   experimental application in more detail and discusses\
    \ how to evaluate\n   its success or failure.\n   The applications of this STUN\
    \ usage differ from the original use of\n   STUN (originally RFC 3489 [RFC3489],\
    \ now RFC 5389 [RFC5389]).  This\n   specification acknowledges that the information\
    \ gathered in this\n   usage is not, and cannot be, correct 100% of the time,\
    \ whereas STUN\n   focused only on getting information that could be known to\
    \ be correct\n   and static.\n   This specification can also be compared to ICE.\
    \  ICE requires a\n   fallback to TURN be available whereas RFC 3489 based applications\n\
    \   tried to determine in advance whether they would need a relay and\n   what\
    \ their peer reflexive address will be, which is not generally\n   achievable.\n\
    \   This STUN usage requires an application using it to have a fallback.\n   However,\
    \ unlike ICE's focus on the problems inherent in VoIP\n   sessions, this STUN\
    \ usage doesn't assume that it will be used to\n   establish a connection between\
    \ a single pair of machines, so\n   alternative fallback mechanisms may be available.\n\
    \   For example, in a P2P application it may be possible to simply switch\n  \
    \ out of the role where such connections need to be established or to\n   select\
    \ an alternative indirect route if the peer discovers that, in\n   practice, 10%\
    \ of its connection attempts fail.\n   It is submitted to the Internet community\
    \ as an experimental protocol\n   that, when applied with appropriate statistical\
    \ underpinnings and\n   application behavior that is ultimately based on experienced\n\
    \   connectivity patterns, can lead to more stability and increased\n   performance\
    \ than is available without the knowledge it provides.\n   If a Standards Track\
    \ document specifies the use of any portion of\n   this STUN usage, that document\
    \ MUST describe how incorrect\n   information derived using these methods will\
    \ be managed, either\n   through identifying when a NAT's behavior changed or\
    \ because the\n   protocol uses such knowledge as an optimization but remains\n\
    \   functional when the NAT's behavior changes.  The referencing document\n  \
    \ MUST also define when the fallback mechanism will be invoked.\n   Applications\
    \ in different domains may vary greatly in how\n   aggressively the fallback mechanism\
    \ is utilized, so there must be a\n   clear definition of when the fallback mechanism\
    \ is invoked.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   \"Session Traversal Utilities for NAT (STUN)\" [RFC5389]\
    \ provides a\n   mechanism to discover the reflexive transport address toward\
    \ the STUN\n   server, using the Binding Request.  This specification defines\
    \ the\n   NAT Behavior Discovery STUN usage, which allows a STUN client to\n \
    \  probe the current behavior of the NAT/firewall (NAT/FW) devices\n   between\
    \ the client and the STUN server.  This usage defines new STUN\n   attributes\
    \ for the Binding Request and Binding Response.\n   Many NAT/FW devices do not\
    \ behave consistently and will change their\n   behavior under load and over time.\
    \  Applications requiring high\n   reliability must be prepared for the NAT's\
    \ behavior to become more\n   restrictive.  Specifically, it has been found that\
    \ under load NATs\n   may transition to the most restrictive filtering and mapping\
    \ behavior\n   and shorten the lifetime of new and existing bindings.  In short,\n\
    \   applications can discover how bad things currently are, but not how\n   bad\
    \ things will get.\n   Despite this limitation, instantaneous observations are\
    \ often quite\n   useful in troubleshooting network problems, and repeated tests\
    \ over\n   time, or in known load situations, may be used to characterize a\n\
    \   NAT's behavior.  In particular, in the hands of a person\n   knowledgeable\
    \ about the needs of an application and the nodes an\n   application needs to\
    \ communicate with, it can be a powerful tool.\n"
- title: 2.1.  Example Diagnostic Use
  contents:
  - "2.1.  Example Diagnostic Use\n   Applications that work well in the lab, but\
    \ fail in a deployment, are\n   notoriously common within distributed systems.\
    \  There are few systems\n   developers who have not had the experience of searching\
    \ to determine\n   the difference in the environments for insight as to what real-\n\
    \   network behavior was missed in the testing lab.  The Behavior\n   Discovery\
    \ usage offers a powerful tool that can be used to check NAT\n   and firewall\
    \ behavior as the application is running.  For example, an\n   application could\
    \ be designed to perform Behavior Discovery tests\n   whenever it experiences\
    \ significant communications problems when\n   running.  Such analysis might be\
    \ included as part of the diagnostic\n   information logged by the application.\n\
    \   As they are being used to detect instantaneous behavior for analysis\n   by\
    \ an experienced developer or administrator, there are relatively\n   few concerns\
    \ about this application of the NAT Behavior Discovery\n   STUN usage.  However,\
    \ the user should be aware that\n   o  adding new traffic to new destinations\
    \ (STUN servers) has the\n      potential to itself change the behavior of a NAT\
    \ and\n   o  the user must be careful to select a STUN server that is\n      appropriately\
    \ located, ideally collocated (or even integrated)\n      with the communication\
    \ partners of the application in question,\n      for the results to be applicable\
    \ to the network conditions\n      experienced by the application.\n"
- title: 2.2.  Example Use with P2P Overlays
  contents:
  - "2.2.  Example Use with P2P Overlays\n   An application could use Behavior Discovery\
    \ in a P2P protocol to\n   determine if a particular endpoint is a reasonable\
    \ candidate to\n   participate as a peer or supernode (defined here as a peer\
    \ in the\n   overlay that offers services, including message routing, to other\n\
    \   members or clients of the overlay network).  This P2P network\n   application\
    \ is willing to select supernodes that might be located\n   behind NATs to avoid\
    \ the cost of dedicated servers.  A supernode\n   candidate requires that its\
    \ NAT or NATs offer Endpoint-Independent\n   Filtering.  It might periodically\
    \ re-run tests and would remove\n   itself as a supernode if its NAT/FW chain\
    \ lost this characteristic.\n   These tests could be run with other supernodes\
    \ acting as STUN servers\n   as well as with dedicated STUN servers.  As many\
    \ P2P algorithms\n   tolerate non-transitive connectivity between a portion of\
    \ their\n   peers, guaranteed pair-wise reliable reach might be sacrificed in\n\
    \   order to distribute the P2P overlay's load across peers that can be\n   directly\
    \ contacted by the majority of users.\n   Consider an example from a hypothetical\
    \ P2P protocol in more detail:\n   when P2P node A starts up, it tests its NAT(s)\
    \ relative to other\n   peers already in the overlay.  If the results of its testing\
    \ indicate\n   A is behind a \"good\" NAT (with Endpoint-Independent Mapping and\n\
    \   Filtering), A will join the overlay and establish connections with\n   appropriate\
    \ peers in the overlay to join the overlay's topology.\n   Although A is reachable\
    \ by routing messages across the overlay\n   topology, A will also include in\
    \ its communication with other nodes\n   that they may reach it directly using\
    \ its reflexive IP address (or\n   addresses) that A discovered in its initial\
    \ testing.  Suppose that\n   later, node B wants to send a message to A, and B\
    \ is not a neighbor\n   of A in the overlay topology.  B may send the message\
    \ directly to A's\n   IP address and start a timer.  If B doesn't receive a response\
    \ within\n   a certain amount of time, then it routes the message to A across\
    \ the\n   overlay instead and includes a flag that indicates a direct\n   connection\
    \ was attempted but failed.  (Alternatively, B could\n   simultaneously send the\
    \ message to A's IP address across the overlay,\n   which guarantees minimum response\
    \ latency, but can waste bandwidth.)\n   Over time, A observes the percentage\
    \ of successful direct messages it\n   receives out of those attempted.  If the\
    \ percentage of successful\n   direct connections is below some threshold (perhaps\
    \ 75%), then A may\n   stop advertising for direct connections because it has\
    \ determined in\n   practice that its NATs are not providing sufficiently reliable\n\
    \   connectivity to justify the cost of attempting the direct message.\n   But\
    \ if the percentage is high enough, A continues to advertise\n   because the successful\
    \ direct connections are improving the overlay's\n   performance by reducing the\
    \ routing load imposed on the overlay.  If\n   at some point, A's NAT or NATs\
    \ change behavior, A will notice a\n   change in its percentage of successful\
    \ direct connections and may re-\n   evaluate its decision to advertise a public\
    \ address.  In this\n   hypothetical example, behavior discovery is used for A's\
    \ initial\n   operating mode selection, but the actual decision for whether to\n\
    \   continue advertising that public IP/port pair is made based on actual\n  \
    \ operating data.  The results of the Behavior Discovery usage are also\n   used\
    \ as a performance optimization, as A is at all times able to\n   establish connectivity\
    \ through the overlay if the attempted direct\n   connection fails.\n   Use of\
    \ behavior discovery for such an application requires:\n   o  Use of a protocol\
    \ capable of offering reliable end-user\n      performance while using unreliable\
    \ links between pairs of nodes.\n   o  A protocol offering a reliable fallback\
    \ to connections attempted\n      based on the results of Behavior Discovery probing.\n\
    \   o  The application is deployed behind NATs that provide Endpoint-\n      Independent\
    \ Filtering and that remain in this mode for an amount\n      of time sufficient\
    \ for the application to identify their behavior,\n      distribute this information\
    \ to the rest of the overlay, and\n      provide useful work for the application.\n\
    \   This document is experimental as applications implementing open\n   protocols\
    \ have yet to be deployed in such environments to demonstrate\n   that these three\
    \ requirements have been met.  However, anecdotal\n   evidence suggests that NATs\
    \ targeted at households and small\n   businesses have stable behavior, especially\
    \ when there are few\n   clients behind them.  Numerous P2P applications have\
    \ been deployed\n   that appear to have these properties, although their protocols\
    \ have\n   not yet been subjected to rigorous evaluation by standards bodies.\n"
- title: 2.3.  Experimental Goals
  contents:
  - "2.3.  Experimental Goals\n   The criteria for an application to successfully\
    \ demonstrate use of\n   the NAT Behavior Discovery STUN usage would include:\n\
    \   o  An implementation that relies on this usage to determine its run-\n   \
    \   time behavior, most likely using it to determine an initial choice\n     \
    \ of options that are then adjusted based on experience with its\n      network\
    \ connections.\n   o  The implementation must either demonstrate its applicability\
    \ in\n      environments where it is realistic to expect a provider to deploy\n\
    \      dedicated STUN servers with multiple IP addresses, or it must\n      demonstrate\
    \ duplicating the behavior of such a dedicated STUN\n      server with two nodes\
    \ that share the role of providing the\n      address-changing operations required\
    \ by this usage.\n   o  Experimental evidence that the application of this usage\
    \ results\n      in improved behavior of the application in real-world conditions.\n\
    \      The exact metrics for this improvement may vary, some\n      possibilities\
    \ include: faster convergence to the proper\n      parameters, less work to set\
    \ up initial connections, fewer\n      reconfigurations required after startup,\
    \ etc.\n   o  A protocol specification that defines how the implementation\n \
    \     applies this usage.\n   The P2P scenario described above is a likely experimental\
    \ test case\n   for this usage, but others applications are possible as well.\n"
- title: 3.  Overview of Operations
  contents:
  - "3.  Overview of Operations\n   In a typical configuration, a STUN client is connected\
    \ to a private\n   network and through one or more NATs to the public Internet.\
    \  The\n   client is configured with the address of a STUN server on the public\n\
    \   Internet.  The Behavior Discovery usage makes use of SRV records so\n   that\
    \ a server may use a different transport address for this usage\n   than for other\
    \ usages.  This usage does not provide backward\n   compatibility with RFC 3489\
    \ [RFC3489] for either clients or servers.\n   Implementors of clients that wish\
    \ to be compliant with RFC 3489\n   servers should see that specification.  Implementors\
    \ of servers\n   SHOULD NOT include support for RFC 3489 clients, as the original\
    \ uses\n   of that protocol have been deprecated.\n   Because STUN forbids a server\
    \ from creating a new TCP or TCP/TLS\n   connection to the client, many tests\
    \ apply only to UDP.  The\n   applicability of the various tests is indicated\
    \ below.\n   The STUN NAT Behavior Discovery usage defines new attributes on the\n\
    \   STUN Binding Request and STUN Binding Response that allow these\n   messages\
    \ to be used to diagnose the current behavior of the NAT(s)\n   between the client\
    \ and server.\n   This section provides a descriptive overview of the typical\
    \ use of\n   these attributes.  Normative behavior is described in Sections 5,\
    \ 6,\n   and 7.\n"
- title: 3.1.  Determining NAT Mapping
  contents:
  - "3.1.  Determining NAT Mapping\n   A client behind a NAT wishes to determine if\
    \ that NAT is currently\n   using Endpoint-Independent, Address-Dependent, or\
    \ Address and Port-\n   Dependent Mapping [RFC4787].  The client performs a series\
    \ of tests\n   that make use of the OTHER-ADDRESS attribute; these tests are\n\
    \   described in detail in Section 4.  These tests send binding requests\n   to\
    \ the alternate address and port of the STUN server to determine\n   mapping behavior.\
    \  These tests can be used for UDP, TCP, or TCP/TLS\n   connections.\n"
- title: 3.2.  Determining NAT Filtering
  contents:
  - "3.2.  Determining NAT Filtering\n   A client behind a NAT wishes to determine\
    \ if that NAT is currently\n   using Endpoint-Independent, Address-Dependent,\
    \ or Address and Port-\n   Dependent Filtering [RFC4787].  The client performs\
    \ a series of tests\n   that make use of the OTHER-ADDRESS and CHANGE-REQUEST\
    \ attributes;\n   these tests are described in Section 4.  These tests request\n\
    \   responses from the alternate address and port of the STUN server; a\n   precondition\
    \ to these tests is that no binding be established to the\n   alternate address\
    \ and port.  See below for more information.  Because\n   the NAT does not know\
    \ that the alternate address and port belong to\n   the same server as the primary\
    \ address and port, it treats these\n   responses the same as it would those from\
    \ any other host on the\n   Internet.  Therefore, the success of the binding responses\
    \ sent from\n   the alternate address and port indicate whether the NAT is currently\n\
    \   performing Endpoint-Independent Filtering, Address-Dependent\n   Filtering,\
    \ or Address and Port-Dependent Filtering.  This test\n   applies only to UDP\
    \ datagrams.\n"
- title: 3.3.  Binding Lifetime Discovery
  contents:
  - "3.3.  Binding Lifetime Discovery\n   Many systems, such as VoIP, rely on being\
    \ able to keep a connection\n   open between a client and server or between peers\
    \ of a P2P system.\n   Because NAT bindings expire over time, keepalive messages\
    \ must be\n   sent across the connection to preserve it.  Because keepalives impose\n\
    \   some overhead on the network and servers, reducing the frequency of\n   keepalives\
    \ can be useful.\n   A normal request-response protocol cannot be used to test\
    \ binding\n   lifetime because the initial request resets the binding timer.\n\
    \   Behavior discovery defines the RESPONSE-PORT attribute to allow the\n   client\
    \ and server to set up a \"control channel\" using one port on the\n   client\
    \ that is used to test the binding lifetime of a different port\n   allocated\
    \ on the client.  More generally, RESPONSE-PORT allows the\n   client to allocate\
    \ two ports and request that responses to queries\n   sent from one port be delivered\
    \ to the other.  The client uses its\n   second port and the STUN server's alternate\
    \ address to check if an\n   existing binding that hasn't had traffic sent on\
    \ it is still open\n   after time T.  This approach is described in detail in\
    \ Section 4.6.\n   This test applies only to UDP datagrams.\n"
- title: 3.4.  Diagnosing NAT Hairpinning
  contents:
  - "3.4.  Diagnosing NAT Hairpinning\n   STUN Binding Requests allow a client to\
    \ determine whether it is\n   behind a NAT that supports hairpinning of connections.\
    \  To perform\n   this test, the client first sends a Binding Request to its STUN\n\
    \   server to determine its mapped address.  The client then sends a STUN\n  \
    \ Binding Request to this mapped address from a different port.  If the\n   client\
    \ receives its own request, the NAT hairpins connections.  This\n   test applies\
    \ to UDP, TCP, or TCP/TLS connections.\n"
- title: 3.5.  Determining Fragment Handling
  contents:
  - "3.5.  Determining Fragment Handling\n   Some NATs exhibit different behavior\
    \ when forwarding fragments than\n   when forwarding a single-frame datagram.\
    \  In particular, some NATs do\n   not hairpin fragments at all and some platforms\
    \ discard fragments\n   under load.  To diagnose this behavior, STUN messages\
    \ may be sent\n   with the PADDING attribute, which simply inserts additional\
    \ space\n   into the message.  By forcing the STUN message to be divided into\n\
    \   multiple fragments, the NAT's behavior can be observed.\n   All of the previous\
    \ tests can be performed with PADDING if a NAT's\n   fragment behavior is important\
    \ for an application, or only those\n   tests that are most interesting to the\
    \ application can be retested.\n   PADDING only applies to UDP datagrams.  PADDING\
    \ can not be used with\n   RESPONSE-PORT.\n"
- title: 3.6.  Detecting a Generic Application Level Gateway (ALG)
  contents:
  - "3.6.  Detecting a Generic Application Level Gateway (ALG)\n   A number of NAT\
    \ boxes are now being deployed into the market that try\n   to provide \"generic\"\
    \ ALG functionality.  These generic ALGs hunt for\n   IP addresses, either in\
    \ text or binary form within a packet, and\n   rewrite them if they match a binding.\
    \  This behavior can be detected\n   because the STUN server returns both the\
    \ MAPPED-ADDRESS and XOR-\n   MAPPED-ADDRESS in the same response.  If the result\
    \ in the two does\n   not match, there is a NAT with a generic ALG in the path.\
    \  This test\n   apples to UDP and TCP, but not TLS over TCP connections.\n"
- title: 4.  Discovery Process
  contents:
  - "4.  Discovery Process\n   This section provides a descriptive overview of how\
    \ the NAT Behavior\n   Discovery usage primitives allow checks to be made to discover\
    \ the\n   current behavior of the NAT or NATs an application is behind.  These\n\
    \   tests can only give the instantaneous behavior of a NAT; it has been\n   found\
    \ that NATs can change behavior under load and over time.  The\n   results of\
    \ these tests therefore can be regarded as upper bounds --\n   an application\
    \ must assume that NAT behavior can become more\n   restrictive at any time. \
    \ Results from tests performed using a\n   particular port on the client may also\
    \ not indicate the behavior\n   experienced by a different port, as described\
    \ in Section 4.1.\n   Definitions for NAT filtering and mapping behavior are from\n\
    \   [RFC4787].  The tests described here are for UDP connectivity, NAT\n   mapping\
    \ behavior, NAT filtering behavior, and NAT binding lifetime\n   discovery; additional\
    \ tests could be designed using this usage's\n   mechanisms.  The tests described\
    \ below include only tests that can be\n   performed using a client with a single\
    \ IP address.  A client with\n   multiple IP addresses (or multiple clients collaborating)\
    \ behind the\n   same NAT can combine their probes to test additional aspects\
    \ of NAT\n   behavior, such as port overloading.  This section provides a\n  \
    \ descriptive overview of how the primitives provided by the STUN\n   attributes\
    \ in this specification may be used to perform behavior\n   tests.\n   Normative\
    \ specifications for the attributes are defined in later\n   sections.\n"
- title: 4.1.  Source Port Selection
  contents:
  - "4.1.  Source Port Selection\n   Proper source port selection is important to\
    \ ensuring the usefulness\n   and accuracy of the Behavior Discovery tests.  There\
    \ are two\n   preconditions for tests:\n   o  Because mapping behavior can vary\
    \ on a port-by-port basis, an\n      application should perform its tests using\
    \ the source port\n      intended for use by the application whenever possible.\
    \  If it\n      intends to use multiple source ports, it should repeat these tests\n\
    \      for each source port.  Such tests should be performed sequentially\n  \
    \    to reduce load on the NAT.\n   o  Because the results of some diagnostic\
    \ checks depend on previous\n      state in the NAT created by prior traffic,\
    \ the tests should be\n      performed using a source port that has not generated\
    \ recent\n      traffic.  Therefore, the application should use a random source\n\
    \      port or ensure that no traffic has previously occurred on the\n      selected\
    \ port prior to performing tests, generally by allocating a\n      port and holding\
    \ it unused for at least 15 minutes prior to the\n      tests.\n   Ensuring both\
    \ of these preconditions can be challenging, particularly\n   for a device or\
    \ application wishing to perform Behavior Discovery\n   tests at startup.  The\
    \ following guidelines are suggested for\n   reducing the likelihood of problems:\n\
    \   o  An application intended to operate behind a NAT should not attempt\n  \
    \    to allocate a specific or well-known port.  Because such software\n     \
    \ must be designed to interoperate using whatever port is mapped to\n      it\
    \ by the NAT, the specific port is unnecessary.  Instead, on\n      startup, a\
    \ random port should be selected (see below for\n      recommended ranges).  An\
    \ application, particularly on an embedded\n      device, should not rely on the\
    \ host operating system to select the\n      next available port because that\
    \ might result in the application\n      receiving the same port on each restart.\
    \  An application using the\n      same port between restarts may not receive\
    \ accurate results from\n      Behavior Discovery tests that are intended to test\
    \ state-related\n      behavior of NATs, such as filtering and binding lifetime.\n\
    \   o  An application requiring multiple ports, such as separate ports\n     \
    \ for control and media, should allocate those ports on startup when\n      possible.\
    \  Even if there is no immediate need for media flow, if\n      Behavior Discovery\
    \ tests will be run on those ports, allocating\n      them early will allow them\
    \ to be left idle, increasing the chance\n      of obtaining accurate results\
    \ from Behavior Discovery tests.\n   o  Although the most reliable results are\
    \ obtained when performing\n      tests with the specific ports that the application\
    \ will use, in\n      many cases an application will need to allocate and use\
    \ ports\n      without being able to perform complete Behavior Discovery tests\
    \ on\n      those ports.  In those cases, an application should randomly\n   \
    \   select its ports from a range likely to receive the same treatment\n     \
    \ by the NAT.  This document recommends ranges of 32768-49151, which\n      is\
    \ the upper end of IANA's Registered Ports range, and 49152-\n      65535, which\
    \ is IANA's Dynamic and/or Private port range, for\n      random selection.  To\
    \ attempt to characterize a NAT's general\n      treatment of ports in these ranges,\
    \ a small number of ports within\n      a range can be randomly selected and characterized.\n\
    \   Those tests particularly sensitive to prior state on a NAT will be\n   indicated\
    \ below.\n"
- title: 4.2.  Checking for UDP Connectivity with the STUN Server
  contents:
  - "4.2.  Checking for UDP Connectivity with the STUN Server\n   The client sends\
    \ a STUN Binding Request to a server.  This causes the\n   server to send the\
    \ response back to the address and port that the\n   request came from.  If this\
    \ test yields no response, the client knows\n   right away that it does not have\
    \ UDP connectivity with the STUN\n   server.  This test requires only STUN [RFC5389]\
    \ functionality.\n"
- title: 4.3.  Determining NAT Mapping Behavior
  contents:
  - "4.3.  Determining NAT Mapping Behavior\n   This will require at most three tests.\
    \  In test I, the client\n   performs the UDP connectivity test.  The server will\
    \ return its\n   alternate address and port in OTHER-ADDRESS in the binding response.\n\
    \   If OTHER-ADDRESS is not returned, the server does not support this\n   usage\
    \ and this test cannot be run.  The client examines the XOR-\n   MAPPED-ADDRESS\
    \ attribute.  If this address and port are the same as\n   the local IP address\
    \ and port of the socket used to send the request,\n   the client knows that it\
    \ is not NATed and the effective mapping will\n   be Endpoint-Independent.\n \
    \  In test II, the client sends a Binding Request to the alternate\n   address,\
    \ but primary port.  If the XOR-MAPPED-ADDRESS in the Binding\n   Response is\
    \ the same as test I the NAT currently has Endpoint-\n   Independent Mapping.\
    \  If not, test III is performed: the client sends\n   a Binding Request to the\
    \ alternate address and port.  If the XOR-\n   MAPPED-ADDRESS matches test II,\
    \ the NAT currently has Address-\n   Dependent Mapping; if it doesn't match it\
    \ currently has Address and\n   Port-Dependent Mapping.\n"
- title: 4.4.  Determining NAT Filtering Behavior
  contents:
  - "4.4.  Determining NAT Filtering Behavior\n   This will also require at most three\
    \ tests.  These tests are\n   sensitive to prior state on the NAT.\n   In test\
    \ I, the client performs the UDP connectivity test.  The server\n   will return\
    \ its alternate address and port in OTHER-ADDRESS in the\n   binding response.\
    \  If OTHER-ADDRESS is not returned, the server does\n   not support this usage\
    \ and this test cannot be run.\n   In test II, the client sends a binding request\
    \ to the primary address\n   of the server with the CHANGE-REQUEST attribute set\
    \ to change-port\n   and change-IP.  This will cause the server to send its response\
    \ from\n   its alternate IP address and alternate port.  If the client receives\n\
    \   a response, the current behavior of the NAT is Endpoint-Independent\n   Filtering.\n\
    \   If no response is received, test III must be performed to distinguish\n  \
    \ between Address-Dependent Filtering and Address and Port-Dependent\n   Filtering.\
    \  In test III, the client sends a binding request to the\n   original server\
    \ address with CHANGE-REQUEST set to change-port.  If\n   the client receives\
    \ a response, the current behavior is Address-\n   Dependent Filtering; if no\
    \ response is received, the current behavior\n   is Address and Port-Dependent\
    \ Filtering.\n"
- title: 4.5.  Combining and Ordering Tests
  contents:
  - "4.5.  Combining and Ordering Tests\n   Clients may wish to combine and parallelize\
    \ these tests to reduce the\n   number of packets sent and speed the discovery\
    \ process.  For example,\n   test I of the filtering and mapping tests also checks\
    \ if UDP is\n   blocked.  Furthermore, an application or user may not need as\
    \ much\n   detail as these sample tests provide.  For example, establishing\n\
    \   connectivity between nodes becomes significantly more difficult if a\n   NAT\
    \ has any behavior other than Endpoint-Independent Mapping, which\n   requires\
    \ only test I and II of Section 4.3.  An application that\n   determines its NAT\
    \ does not always provide Endpoint-Independent\n   Mapping might notify the user\
    \ if no relay is configured, whereas an\n   application behind a NAT that provides\
    \ Endpoint-Independent Mapping\n   might not notify the user until a subsequent\
    \ connection actually\n   fails or might provide a less urgent notification that\
    \ no relay is\n   configured.  Such a test does not alleviate the need for [RFC5245],\n\
    \   but it does provide some information regarding whether ICE is likely\n   to\
    \ be successful establishing non-relayed connections.\n   Care must be taken when\
    \ combining and parallelizing tests, due to the\n   sensitivity of certain tests\
    \ to prior state on the NAT and because\n   some NAT devices have an upper limit\
    \ on how quickly bindings will be\n   allocated.  Section 5 restricts the rate\
    \ at which clients may begin\n   new STUN transactions.\n"
- title: 4.6.  Binding Lifetime Discovery
  contents:
  - "4.6.  Binding Lifetime Discovery\n   STUN can also be used to probe the lifetimes\
    \ of the bindings created\n   by the NAT.  Such tests are sensitive to prior state\
    \ on the NAT.  For\n   many NAT devices, an absolute refresh interval cannot be\
    \ determined;\n   bindings might be closed more quickly under heavy load or might\
    \ not\n   behave as the tests suggest.  For this reason, applications that\n \
    \  require reliable bindings must send keepalives as frequently as\n   required\
    \ by all NAT devices that will be encountered.  Suggested\n   refresh intervals\
    \ are outside the scope of this document.  [RFC5245]\n   and OUTBOUND [RFC5626]\
    \ have suggested refresh intervals.\n   Determining the binding lifetime relies\
    \ on two separate source ports\n   being used to send STUN Binding Requests to\
    \ the STUN server.  The\n   general approach is that the client uses a source\
    \ port X to send a\n   single Binding Request.  After a period of time during\
    \ which source\n   port X is not used, the client uses a second source port Y\
    \ to send a\n   Binding Request to the STUN server that indicates the response\
    \ should\n   be sent to the binding established to port X.  If the binding for\n\
    \   port X has timed out, that response will not be received.  By varying\n  \
    \ the time between the original Binding Request sent from X and the\n   subsequent\
    \ request sent from Y, the client can determine the binding\n   lifetime.\n  \
    \ To determine the binding lifetime, the client first sends a Binding\n   Request\
    \ to the server from a particular source port, X.  This creates\n   a binding\
    \ in the NAT.  The response from the server contains a\n   MAPPED-ADDRESS attribute,\
    \ providing the public address and port on\n   the NAT.  Call this Pa and Pp,\
    \ respectively.  The client then starts\n   a timer with a value of T seconds.\
    \  When this timer fires, the client\n   sends another Binding Request to the\
    \ server, using the same\n   destination address and port, but from a different\
    \ source port, Y.\n   This request contains an RESPONSE-PORT attribute, set to\
    \ Pp, to\n   request the response be delivered to (Pa, Pp).  This will create\
    \ a\n   new binding on the NAT, and cause the STUN server to send a Binding\n\
    \   Response that would match the old binding, (Pa, Pp), if it still\n   exists.\
    \  If the client receives the Binding Response on port X, it\n   knows that the\
    \ binding has not expired.  If the client receives the\n   Binding Response on\
    \ port Y (which is possible if the old binding\n   expired, and the NAT allocated\
    \ the same public address and port to\n   the new binding), or receives no response\
    \ at all, it knows that the\n   binding has expired.\n   Because some NATs only\
    \ refresh bindings when outbound traffic is\n   sent, the client must resend a\
    \ binding request from the original\n   source port before beginning a second\
    \ test with a different value of\n   T.  The client can find the value of the\
    \ binding lifetime by doing a\n   binary search through T, arriving eventually\
    \ at the value where the\n   response is not received for any timer greater than\
    \ T, but is\n   received for any timer less than T.  Note also that the binding\n\
    \   refresh behavior (outbound only or all traffic) can be determined by\n   sending\
    \ multiple Binding Requests from port Y without refreshes from\n   the original\
    \ source port X.\n   This discovery process takes quite a bit of time and is something\n\
    \   that will typically be run in the background on a device once it\n   boots.\n\
    \   It is possible that the client can get inconsistent results each time\n  \
    \ this process is run.  For example, if the NAT should reboot, or be\n   reset\
    \ for some reason, the process may discover a lifetime that is\n   shorter than\
    \ the actual one.  Binding lifetime may also be dependent\n   on the traffic load\
    \ on the NAT.  For this reason, implementations are\n   encouraged to run the\
    \ test numerous times and be prepared to get\n   inconsistent results.\n   Like\
    \ the other diagnostics, this test is inherently unstable.  In\n   particular,\
    \ an overloaded NAT might reduce binding lifetime to shed\n   load.  A client\
    \ might find this diagnostic useful at startup, for\n   example, setting the initial\
    \ keepalive interval on its connection to\n   the server to 10 seconds while beginning\
    \ this check.  After\n   determining the current lifetime, the keepalive interval\
    \ used by the\n   connection to the server can be set to this appropriate value.\n\
    \   Subsequent checks of the binding lifetime can then be performed using\n  \
    \ the keepalives in the server connection.  The STUN Keepalive Usage\n   [RFC5626]\
    \ provides a response that confirms the connection is open\n   and allows the\
    \ client to check that its mapped address has not\n   changed.  As that provides\
    \ both the keepalive action and diagnostic\n   that it is working, it should be\
    \ preferred over any attempt to\n   characterize the connection by a secondary\
    \ technique.\n"
- title: 5.  Client Behavior
  contents:
  - "5.  Client Behavior\n   Unless otherwise specified here, all procedures for preparing,\n\
    \   sending, and processing messages as described in the STUN Binding\n   Usage\
    \ [RFC5389] are followed.\n   As support for RESPONSE-PORT is optional, a client\
    \ MUST be prepared\n   to receive a 420 (Unknown Attribute) error to requests\
    \ that include\n   RESPONSE-PORT.  Support for OTHER-ADDRESS and CHANGE-REQUEST\
    \ is\n   optional, but MUST be supported by servers advertised via SRV, as\n \
    \  described below.  This is to allow the use of PADDING and RESPONSE-\n   PORT\
    \ in applications where servers do not have multiple IP addresses.\n   Clients\
    \ MUST be prepared to receive a 420 for requests that include\n   CHANGE-REQUEST\
    \ when OTHER-ADDRESS was not received in Binding\n   Response messages from the\
    \ server.\n   If an application makes use of the NAT Behavior Discovery STUN usage\n\
    \   by multiplexing it in a flow with application traffic, a FINGERPRINT\n   attribute\
    \ SHOULD be included unless it is always possible to\n   distinguish a STUN message\
    \ from an application message based on their\n   header.\n   When PADDING is used,\
    \ it SHOULD be equal to the MTU of the outgoing\n   interface.\n   Clients SHOULD\
    \ ignore an ALTERNATE-SERVER attribute in a response\n   unless they are using\
    \ authentication with a provider of STUN servers\n   that is aware of the topology\
    \ requirements of the tests being\n   performed.\n   A client SHOULD NOT generate\
    \ more than ten new STUN transactions per\n   second and SHOULD pace them such\
    \ that the retransmission timeouts\n   (RTOs) do not synchronize the retransmissions\
    \ of each transaction.\n"
- title: 5.1.  Discovery
  contents:
  - "5.1.  Discovery\n   Unless the user or application is aware of the transport\
    \ address of a\n   STUN server supporting the NAT Behavior Discovery usage through\
    \ other\n   means, a client is configured with the domain name of the provider\
    \ of\n   the STUN servers.  The domain is resolved to a transport address\n  \
    \ using SRV procedures [RFC2782].  The mechanism for configuring the\n   client\
    \ with the domain name of the STUN servers or of acquiring a\n   specific transport\
    \ address is out of scope for this document.\n   For the Behavior Discovery usage,\
    \ the service name is \"stun-behavior\"\n   for UDP and TCP.  The service name\
    \ is \"stun-behaviors\" for TLS over\n   TCP.  Only \"tcp\" is defined as a protocol\
    \ for \"stun-behaviors\".\n   Other aspects of handling failures and default ports\
    \ are followed as\n   described in STUN [RFC5389].\n"
- title: 5.2.  Security
  contents:
  - "5.2.  Security\n   Servers MAY require authentication before allowing a client\
    \ to make\n   use of its services.  The method for obtaining these credentials,\n\
    \   should the server require them, is outside the scope of this usage.\n   Presumably,\
    \ the administrator or application relying on this usage\n   should have its own\
    \ method for obtaining credentials.  If the client\n   receives a 401 (Unauthorized)\
    \ Response to a Request, then it must\n   either acquire the appropriate credential\
    \ from the application before\n   retrying or report a permanent failure.  Procedures\
    \ for encoding the\n   MESSAGE-INTEGRITY attribute for a request are described\
    \ in STUN\n   [RFC5389].\n"
- title: 6.  Server Behavior
  contents:
  - "6.  Server Behavior\n   Unless otherwise specified here, all procedures for preparing,\n\
    \   sending, and processing messages as described for the STUN Binding\n   Usage\
    \ of STUN [RFC5389] are followed.\n   A server implementing the NAT Behavior Discovery\
    \ usage SHOULD be\n   configured with two separate IP addresses on the public\
    \ Internet.  On\n   startup, the server SHOULD allocate a pair of ports for each\
    \ of the\n   UDP, TCP, and TCP/TLS transport protocols, such that it can send\
    \ and\n   receive datagrams using the same ports on each IP address (normally\
    \ a\n   wildcard binding accomplishes this).  TCP and TCP/TLS MUST use\n   different\
    \ ports.  If a server cannot allocate the same ports on two\n   different IP address,\
    \ then it MUST NOT include an OTHER-ADDRESS\n   attribute in any Response and\
    \ MUST respond with a 420 (Unknown\n   Attribute) to any Request with a CHANGE-REQUEST\
    \ attribute.  A server\n   with only one IP address MUST NOT be advertised using\
    \ the SRV service\n   name \"stun-behavior\" or \"stun-behaviors\".\n"
- title: 6.1.  Preparing the Response
  contents:
  - "6.1.  Preparing the Response\n   After performing all authentication and verification\
    \ steps, the\n   server begins processing specific to this Usage if the Binding\n\
    \   Request contains any request attributes defined in this document:\n   RESPONSE-PORT,\
    \ CHANGE-REQUEST, or PADDING.  If the Binding Request\n   does not contain any\
    \ attributes from this document, OTHER-ADDRESS and\n   RESPONSE-ORIGIN are still\
    \ included in the Binding Response.\n   The server MUST include both MAPPED-ADDRESS\
    \ and XOR-MAPPED-ADDRESS in\n   its Response.\n   If the Request contains the\
    \ CHANGE-REQUEST attribute and the server\n   does not have an alternate address\
    \ and port as described above, the\n   server MUST generate an error response\
    \ of type 420.\n   The source address and port of the Binding Response depend\
    \ on the\n   value of the CHANGE-REQUEST attribute and on the address and port\
    \ on\n   which the Binding Request was received; this is summarized in\n   Table\
    \ 1.\n   Let A1 and A2 be the two IP addresses used by the server, and P1 and\n\
    \   P2 be the ports used by the server.  Let Da represent the destination\n  \
    \ IP address of the Binding Request (which will be either A1 or A2),\n   and Dp\
    \ represent the destination port of the Binding Request (which\n   will be either\
    \ P1 or P2).  Let Ca represent the other address, so\n   that if Da is A1, Ca\
    \ is A2.  If Da is A2, Ca is A1.  Similarly, let\n   Cp represent the other port,\
    \ so that if Dp is P1, Cp is P2.  If Dp is\n   P2, Cp is P1.  If the \"change\
    \ port\" flag was set in the CHANGE-\n   REQUEST attribute of the Binding Request,\
    \ and the \"change IP\" flag\n   was not set, the source IP address of the Binding\
    \ Response MUST be Da\n   and the source port of the Binding Response MUST be\
    \ Cp.  If the\n   \"change IP\" flag was set in the Binding Request, and the \"\
    change\n   port\" flag was not set, the source IP address of the Binding Response\n\
    \   MUST be Ca and the source port of the Binding Response MUST be Dp.\n   When\
    \ both flags are set, the source IP address of the Binding\n   Response MUST be\
    \ Ca and the source port of the Binding Response MUST\n   be Cp.  If neither flag\
    \ is set, or if the CHANGE-REQUEST attribute is\n   absent entirely, the source\
    \ IP address of the Binding Response MUST\n   be Da and the source port of the\
    \ Binding Response MUST be Dp.\n   +--------------------+----------------+-------------+---------------+\n\
    \   | Flags              | Source Address | Source Port | OTHER-ADDRESS |\n  \
    \ +--------------------+----------------+-------------+---------------+\n   |\
    \ none               | Da             | Dp          | Ca:Cp         |\n   | Change\
    \ IP          | Ca             | Dp          | Ca:Cp         |\n   | Change port\
    \        | Da             | Cp          | Ca:Cp         |\n   | Change IP and\
    \      | Ca             | Cp          | Ca:Cp         |\n   | Change port    \
    \    |                |             |               |\n   +--------------------+----------------+-------------+---------------+\n\
    \        Table 1: Impact of Flags on Packet Source and OTHER-ADDRESS\n   The server\
    \ MUST add a RESPONSE-ORIGIN attribute to the Binding\n   Response, containing\
    \ the source address and port used to send the\n   Binding Response.\n   If the\
    \ server supports an alternate address and port, the server MUST\n   add an OTHER-ADDRESS\
    \ attribute to the Binding Response.  This\n   contains the source IP address\
    \ and port that would be used if the\n   client had set the \"change IP\" and\
    \ \"change port\" flags in the Binding\n   Request.  As summarized in Table 1,\
    \ these are Ca and Cp,\n   respectively, regardless of the value of the CHANGE-REQUEST\
    \ flags.\n   If the Request contained a PADDING attribute, PADDING MUST be\n \
    \  included in the Binding Response.  The server SHOULD use a length of\n   PADDING\
    \ equal to the MTU on the outgoing interface, rounded up to an\n   even multiple\
    \ of four bytes.  If the Request also contains the\n   RESPONSE-PORT attribute\
    \ the server MUST return an error response of\n   type 400.\n   Following that,\
    \ the server completes the remainder of the processing\n   from STUN [RFC5389].\
    \  If authentication is being required, the server\n   MUST include a MESSAGE-INTEGRITY\
    \ and associated attributes as\n   appropriate.  A FINGERPRINT attribute is only\
    \ required if the STUN\n   messages are being multiplexed with application traffic\
    \ that requires\n   use of a FINGERPRINT to distinguish STUN messages.\n   An\
    \ ALTERNATE-SERVER attribute MUST NOT be included with any other\n   attribute\
    \ defined in this specification.\n   When the server sends the Response, it is\
    \ sent from the source\n   address as determined above and to the source address\
    \ of the Request.\n   If RESPONSE-PORT is present, the server sends the response\
    \ to that\n   port instead of the originating port.\n"
- title: 7.  New Attributes
  contents:
  - "7.  New Attributes\n   This document defines several STUN attributes that are\
    \ required for\n   NAT Behavior Discovery.  These attributes are all used only\
    \ with\n   Binding Requests and Binding Responses.  CHANGE-REQUEST was\n   originally\
    \ defined in RFC 3489 [RFC3489] but is redefined here as\n   that document is\
    \ obsoleted by [RFC5389].\n     Comprehension-required range (0x0000-0x7FFF):\n\
    \       0x0003: CHANGE-REQUEST\n       0x0026: PADDING\n       0x0027: RESPONSE-PORT\n\
    \     Comprehension-optional range (0x8000-0xFFFF):\n       0x802b: RESPONSE-ORIGIN\n\
    \       0x802c: OTHER-ADDRESS\n"
- title: 7.1.  Representing Transport Addresses
  contents:
  - "7.1.  Representing Transport Addresses\n   Whenever an attribute contains a transport\
    \ IP address and port, it\n   has the same format as MAPPED-ADDRESS.  Similarly,\
    \ the XOR-\n   attributes have the same format as XOR-MAPPED-ADDRESS [RFC5389].\n"
- title: 7.2.  CHANGE-REQUEST
  contents:
  - "7.2.  CHANGE-REQUEST\n   The CHANGE-REQUEST attribute contains two flags to control\
    \ the IP\n   address and port that the server uses to send the response.  These\n\
    \   flags are called the \"change IP\" and \"change port\" flags.  The\n   CHANGE-REQUEST\
    \ attribute is allowed only in the Binding Request.  The\n   \"change IP\" and\
    \ \"change port\" flags are useful for determining the\n   current filtering behavior\
    \ of a NAT.  They instruct the server to\n   send the Binding Responses from the\
    \ alternate source IP address\n   and/or alternate port.  The CHANGE-REQUEST attribute\
    \ is optional in\n   the Binding Request.\n   The attribute is 32 bits long, although\
    \ only two bits (A and B) are\n   used:\n    0                   1           \
    \        2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 A B 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The meanings of the flags are:\n   A: This is the \"change IP\" flag.  If\
    \ true, it requests the server to\n      send the Binding Response with a different\
    \ IP address than the one\n      the Binding Request was received on.\n   B: This\
    \ is the \"change port\" flag.  If true, it requests the server\n      to send\
    \ the Binding Response with a different port than the one\n      the Binding Request\
    \ was received on.\n"
- title: 7.3.  RESPONSE-ORIGIN
  contents:
  - "7.3.  RESPONSE-ORIGIN\n   The RESPONSE-ORIGIN attribute is inserted by the server\
    \ and indicates\n   the source IP address and port the response was sent from.\
    \  It is\n   useful for detecting double NAT configurations.  It is only present\n\
    \   in Binding Responses.\n"
- title: 7.4.  OTHER-ADDRESS
  contents:
  - "7.4.  OTHER-ADDRESS\n   The OTHER-ADDRESS attribute is used in Binding Responses.\
    \  It informs\n   the client of the source IP address and port that would be used\
    \ if\n   the client requested the \"change IP\" and \"change port\" behavior.\n\
    \   OTHER-ADDRESS MUST NOT be inserted into a Binding Response unless the\n  \
    \ server has a second IP address.\n   OTHER-ADDRESS uses the same attribute number\
    \ as CHANGED-ADDRESS from\n   RFC 3489 [RFC3489] because it is simply a new name\
    \ with the same\n   semantics as CHANGED-ADDRESS.  It has been renamed to more\
    \ clearly\n   indicate its function.\n"
- title: 7.5.  RESPONSE-PORT
  contents:
  - "7.5.  RESPONSE-PORT\n   The RESPONSE-PORT attribute contains a port.  The RESPONSE-PORT\n\
    \   attribute can be present in the Binding Request and indicates which\n   port\
    \ the Binding Response will be sent to.  For servers which support\n   the RESPONSE-PORT\
    \ attribute, the Binding Response MUST be transmitted\n   to the source IP address\
    \ of the Binding Request and the port\n   contained in RESPONSE-PORT.  It is used\
    \ in tests such as Section 4.6.\n   When not present, the server sends the Binding\
    \ Response to the source\n   IP address and port of the Binding Request.  The\
    \ server MUST NOT\n   process a request containing a RESPONSE-PORT and a PADDING\
    \ attribute.\n   The RESPONSE-PORT attribute is optional in the Binding Request.\n\
    \   Server support for RESPONSE-PORT is optional.\n   RESPONSE-PORT is a 16-bit\
    \ unsigned integer in network byte order\n   followed by 2 bytes of padding. \
    \ Allowable values of RESPONSE-PORT\n   are 0-65536.\n"
- title: 7.6.  PADDING
  contents:
  - "7.6.  PADDING\n   The PADDING attribute allows for the entire message to be padded\
    \ to\n   force the STUN message to be divided into IP fragments.  PADDING\n  \
    \ consists entirely of a free-form string, the value of which does not\n   matter.\
    \  PADDING can be used in either Binding Requests or Binding\n   Responses.\n\
    \   PADDING MUST NOT be longer than the length that brings the total IP\n   datagram\
    \ size to 64K.  It SHOULD be equal in length to the MTU of the\n   outgoing interface,\
    \ rounded up to an even multiple of four bytes.\n   Because STUN messages with\
    \ PADDING are intended to test the behavior\n   of UDP fragments, they are an\
    \ exception to the usual rule that STUN\n   messages be less than the MTU of the\
    \ path.\n"
- title: 8.  IAB Considerations
  contents:
  - "8.  IAB Considerations\n   The IAB has studied the problem of \"Unilateral Self-Address\
    \ Fixing\"\n   (UNSAF), which is the general process by which a client attempts\
    \ to\n   determine its address in another realm on the other side of a NAT\n \
    \  through a collaborative protocol reflection mechanism [RFC3424].  The\n   STUN\
    \ NAT Behavior Discovery usage is an example of a protocol that\n   performs this\
    \ type of function.  The IAB has mandated that any\n   protocols developed for\
    \ this purpose document a specific set of\n   considerations.  This section meets\
    \ those requirements.\n"
- title: 8.1.  Problem Definition
  contents:
  - "8.1.  Problem Definition\n   From RFC 3424 [RFC3424], any UNSAF proposal must\
    \ provide:\n      Precise definition of a specific, limited-scope problem that\
    \ is to\n      be solved with the UNSAF proposal.  A short term fix should not\
    \ be\n      generalized to solve other problems.  Such generalizations lead to\n\
    \      the prolonged dependence on and usage of the supposed short term\n    \
    \  fix -- meaning that it is no longer accurate to call it \"short\n      term\"\
    .\n   The specific problem being solved by the STUN NAT Behavior Discovery\n \
    \  usage is for a client, which may be located behind a NAT of any type,\n   to\
    \ determine the instantaneous characteristics of that NAT.  This\n   determination\
    \ allows either the diagnosis of the cause of problems\n   experienced by that\
    \ or other applications or the modification of an\n   application's behavior based\
    \ on the current behavior of the NAT and\n   an appropriate statistical model\
    \ of the behavior required for the\n   application to succeed.\n"
- title: 8.2.  Exit Strategy
  contents:
  - "8.2.  Exit Strategy\n   From [RFC3424], any UNSAF proposal must provide:\n  \
    \    Description of an exit strategy/transition plan.  The better short\n    \
    \  term fixes are the ones that will naturally see less and less use\n      as\
    \ the appropriate technology is deployed.\n   The STUN NAT Behavior Discovery\
    \ usage does not itself provide an exit\n   strategy for v4 NATs.  At the time\
    \ of this writing, it appears some\n   sort of NAT will be necessary between v6\
    \ clients and v4 servers, but\n   this specification will not be necessary with\
    \ those v6-to-v4 NATs\n   because the IETF is planning to adequately describe\
    \ their operation.\n   This specification will be of no interest for v6-to-v6\
    \ connectivity.\n"
- title: 8.3.  Brittleness Introduced by STUN NAT Behavior Discovery
  contents:
  - "8.3.  Brittleness Introduced by STUN NAT Behavior Discovery\n   From [RFC3424],\
    \ any UNSAF proposal must provide:\n      Discussion of specific issues that may\
    \ render systems more\n      \"brittle\".  For example, approaches that involve\
    \ using data at\n      multiple network layers create more dependencies, increase\n\
    \      debugging challenges, and make it harder to transition.\n   The STUN NAT\
    \ Behavior Discovery usage allows a client to determine\n   the current behavior\
    \ of a NAT.  This information can be quite useful\n   to a developer or network\
    \ administrator outside of an application,\n   and as such can be used to diagnose\
    \ the brittleness induced in\n   another application.  When used within an application\
    \ itself, STUN\n   NAT Behavior Discovery allows the application to adjust its\
    \ behavior\n   according to the current behavior of the NAT.  This document is\n\
    \   experimental because the extent to which brittleness is introduced to\n  \
    \ an application relying on the Behavior Discovery usage is unclear and\n   must\
    \ be carefully evaluated by the designers of the protocol making\n   use of it.\
    \  The experimental test for this protocol is essentially\n   determining whether\
    \ an application can be made less brittle through\n   the use of behavior-discovery\
    \ information than it would be if\n   attempted to make use of the network without\
    \ any awareness of the\n   NATs its traffic must pass through.\n"
- title: 8.4.  Requirements for a Long-Term Solution
  contents:
  - "8.4.  Requirements for a Long-Term Solution\n   From [RFC3424], any UNSAF proposal\
    \ must provide:\n      Identify requirements for longer-term, sound technical\
    \ solutions\n      -- contribute to the process of finding the right longer-term\n\
    \      solution.\n   As long as v4 NATs are present, means of adapting to their\
    \ presence\n   will be required.  As described above, well-behaved v6 to v4 NATs\
    \ and\n   direct v6 to v6 connections will not require behavior\n   characterization.\n"
- title: 8.5.  Issues with Existing NAPT Boxes
  contents:
  - "8.5.  Issues with Existing NAPT Boxes\n   From [RFC3424], any UNSAF proposal\
    \ must provide:\n      Discussion of the impact of the noted practical issues\
    \ with\n      existing deployed NATs and experience reports.\n   This usage provides\
    \ a set of generic attributes that can be assembled\n   to test many types of\
    \ NAT behavior.  While tests for the most\n   commonly known NAT box behaviors\
    \ are described, the BEHAVE mailing\n   list regularly has descriptions of new\
    \ behaviors, some of which may\n   not be readily detected using the tests described\
    \ herein.  However,\n   the techniques described in this usage can be assembled\
    \ in different\n   combinations to test NAT behaviors not now known or envisioned.\n"
- title: 9.  IANA Considerations
  contents:
  - '9.  IANA Considerations

    '
- title: 9.1.  STUN Attribute Registry
  contents:
  - "9.1.  STUN Attribute Registry\n   This specification defines several new STUN\
    \ attributes.  IANA has\n   added these new protocol elements to the \"STUN Attributes\"\
    \ registry.\n   0x0003: CHANGE-REQUEST\n   0x0027: RESPONSE-PORT\n   0x0026: PADDING\n\
    \   0x8027: CACHE-TIMEOUT\n   0x802b: RESPONSE-ORIGIN\n   0x802c: OTHER-ADDRESS\n"
- title: 9.2.  Port Numbers and SRV Registry
  contents:
  - "9.2.  Port Numbers and SRV Registry\n   By default, the STUN NAT Behavior Discovery\
    \ usage runs on the same\n   ports as STUN: 3478 over UDP and TCP, and 5349 for\
    \ TCP over TLS.\n   However, the Behavior Discovery usage has its own set of Service\n\
    \   Record (SRV) names: \"stun-behavior\" for UDP and TCP, and \"stun-\n   behaviors\"\
    \ for TLS.  Either the SRV procedures or the ALTERNATE-\n   SERVER procedures,\
    \ subject to the recommendations of Section 5, can\n   be used to run Behavior\
    \ Discovery on a different port.\n   This specification defines the \"stun-behavior\"\
    \ and \"stun-behaviors\"\n   SRV service names. \"stun-behavior\" may be used\
    \ with SRV protocol\n   specifiers \"udp\" and \"tcp\". \"stun-behaviors\" may\
    \ only be specified\n   with \"tcp\".  Thus, the allowable SRV queries are:\n\
    \   _stun-behavior._udp            UDP\n   _stun-behavior._tcp            TCP\n\
    \   _stun-behaviors._tcp           TLS over TCP\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   This usage inherits the security considerations\
    \ of STUN [RFC5389].\n   This usage adds several new attributes; security considerations\
    \ for\n   those are detailed here.\n   OTHER-ADDRESS does not permit any new attacks;\
    \ it provides another\n   place where an attacker can impersonate a STUN server\
    \ but it is not\n   an interesting attack.  An attacker positioned where it can\n\
    \   compromise the Binding Response can completely hide the STUN server\n   from\
    \ the client.\n   o  Requests containing both RESPONSE-PORT and PADDING are rejected\
    \ by\n      the server.  This prevents an amplification attack that is\n     \
    \ targeted at the originating address.\n   The only attack possible with the PADDING\
    \ attribute is to have a\n   large padding length that could cause a server to\
    \ allocate a large\n   amount of memory.  As servers will ignore any padding length\
    \ greater\n   than 64K so the scope of this attack is limited.  In general, servers\n\
    \   should not allocate more memory than the size of the received\n   datagram.\
    \  This attack would only affect non-compliant\n   implementations.\n   RESPONSE-ORIGIN\
    \ and RESPONSE-PORT do not provide any additional\n   attacks.\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   The authors would like to thank the authors of the\
    \ original STUN\n   specification [RFC3489] from which many of the ideas, attributes,\
    \ and\n   description in this document originated.  Thanks to Dan Wing, Cullen\n\
    \   Jennings, and Magnus Westerlund for detailed comments.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2782]  Gulbrandsen, A., Vixie, P., and L. Esibov, \"A DNS RR for\n\
    \              specifying the location of services (DNS SRV)\", RFC 2782,\n  \
    \            February 2000.\n   [RFC4787]  Audet, F. and C. Jennings, \"Network\
    \ Address Translation\n              (NAT) Behavioral Requirements for Unicast\
    \ UDP\", BCP 127,\n              RFC 4787, January 2007.\n   [RFC5389]  Rosenberg,\
    \ J., Mahy, R., Matthews, P., and D. Wing,\n              \"Session Traversal\
    \ Utilities for NAT (STUN)\", RFC 5389,\n              October 2008.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [RFC3424]  Daigle, L. and IAB, \"IAB Considerations\
    \ for UNilateral\n              Self-Address Fixing (UNSAF) Across Network Address\n\
    \              Translation\", RFC 3424, November 2002.\n   [RFC3489]  Rosenberg,\
    \ J., Weinberger, J., Huitema, C., and R. Mahy,\n              \"STUN - Simple\
    \ Traversal of User Datagram Protocol (UDP)\n              Through Network Address\
    \ Translators (NATs)\", RFC 3489,\n              March 2003.\n   [RFC5245]  Rosenberg,\
    \ J., \"Interactive Connectivity Establishment\n              (ICE): A Protocol\
    \ for Network Address Translator (NAT)\n              Traversal for Offer/Answer\
    \ Protocols\", RFC 5245,\n              April 2010.\n   [RFC5626]  Jennings, C.,\
    \ Mahy, R., and F. Audet, \"Managing Client-\n              Initiated Connections\
    \ in the Session Initiation Protocol\n              (SIP)\", RFC 5626, October\
    \ 2009.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Derek C. MacDonald\n   Skype\n   Palo Alto, CA\n   USA\n\
    \   EMail: derek.macdonald@gmail.com\n   Bruce B. Lowekamp\n   Skype\n   Palo\
    \ Alto, CA\n   USA\n   EMail: bbl@lowekamp.net\n"
