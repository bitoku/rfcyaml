- title: __initial_text__
  contents:
  - '               A YANG Data Model for Interface Management

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines a YANG data model for the management of network\n\
    \   interfaces.  It is expected that interface-type-specific data models\n   augment\
    \ the generic interfaces data model defined in this document.\n   The data model\
    \ includes configuration data and state data (status\n   information and counters\
    \ for the collection of statistics).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7223.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Terminology ................................................3\n  \
    \    1.2. Tree Diagrams ..............................................4\n   2.\
    \ Objectives ......................................................4\n   3. Interfaces\
    \ Data Model ...........................................5\n      3.1. The Interface\
    \ Lists ........................................6\n      3.2. Interface References\
    \ .......................................7\n      3.3. Interface Layering .........................................7\n\
    \   4. Relationship to the IF-MIB ......................................8\n  \
    \ 5. Interfaces YANG Module .........................................11\n   6.\
    \ IANA Considerations ............................................26\n   7. Security\
    \ Considerations ........................................26\n   8. Acknowledgments\
    \ ................................................27\n   9. References .....................................................27\n\
    \      9.1. Normative References ......................................27\n  \
    \    9.2. Informative References ....................................28\n   Appendix\
    \ A. Example: Ethernet Interface Module ....................29\n   Appendix B.\
    \ Example: Ethernet Bonding Interface Module ............30\n   Appendix C. Example:\
    \ VLAN Interface Module ........................31\n   Appendix D. Example: NETCONF\
    \ <get> Reply ..........................32\n   Appendix E. Examples: Interface\
    \ Naming Schemes ....................35\n     E.1. Router with Restricted Interface\
    \ Names .....................35\n     E.2. Router with Arbitrary Interface Names\
    \ ......................36\n     E.3. Ethernet Switch with Restricted Interface\
    \ Names ............37\n     E.4. Generic Host with Restricted Interface Names\
    \ ...............38\n     E.5. Generic Host with Arbitrary Interface Names ................39\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines a YANG [RFC6020] data model for the\
    \ management\n   of network interfaces.  It is expected that interface-type-specific\n\
    \   data models augment the generic interfaces data model defined in this\n  \
    \ document.\n   Network interfaces are central to the management of many Internet\n\
    \   protocols.  Thus, it is important to establish a common data model\n   for\
    \ how interfaces are identified, configured, and monitored.\n   The data model\
    \ includes configuration data and state data (status\n   information and counters\
    \ for the collection of statistics).\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119].\n   The following terms are used within\
    \ this document:\n   o  system-controlled interface: An interface is said to be\
    \ system-\n      controlled if the system creates and deletes the interface\n\
    \      independently of what has been explicitly configured.  Examples\n     \
    \ are interfaces representing physical hardware that appear and\n      disappear\
    \ when hardware (e.g., a line card or hot-pluggable\n      wireless interface)\
    \ is added or removed.  System-controlled\n      interfaces may also appear if\
    \ a certain functionality is enabled\n      (e.g., a loopback interface might\
    \ appear if the IP protocol stack\n      is enabled).\n   o  user-controlled interface:\
    \ An interface is said to be user-\n      controlled if the creation of the interface\
    \ is controlled by\n      adding explicit interface configuration to the running\n\
    \      configuration datastore and the removal of the interface is\n      controlled\
    \ by removing explicit interface configuration from the\n      running configuration\
    \ datastore.  Examples are VLAN interfaces\n      configured on a system-controlled\
    \ Ethernet interface.\n   The following terms are defined in [RFC6241] and are\
    \ not redefined\n   here:\n   o  client\n   o  configuration data\n   o  server\n\
    \   o  state data\n   The following terms are defined in [RFC6020] and are not\
    \ redefined\n   here:\n   o  augment\n   o  data model\n   o  data node\n   o\
    \  presence container\n"
- title: 1.2.  Tree Diagrams
  contents:
  - "1.2.  Tree Diagrams\n   A simplified graphical representation of the data model\
    \ is used in\n   this document.  The meaning of the symbols in these diagrams\
    \ is as\n   follows:\n   o  Brackets \"[\" and \"]\" enclose list keys.\n   o\
    \  Abbreviations before data node names: \"rw\" means configuration\n      (read-write),\
    \ and \"ro\" means state data (read-only).\n   o  Symbols after data node names:\
    \ \"?\" means an optional node, \"!\"\n      means a presence container, and \"\
    *\" denotes a list and leaf-list.\n   o  Parentheses enclose choice and case nodes,\
    \ and case nodes are also\n      marked with a colon (\":\").\n   o  Ellipsis\
    \ (\"...\") stands for contents of subtrees that are not\n      shown.\n"
- title: 2.  Objectives
  contents:
  - "2.  Objectives\n   This section describes some of the design objectives for the\
    \ model\n   presented in Section 5.\n   o  It is recognized that existing implementations\
    \ will have to map\n      the interface data model defined in this memo to their\
    \ proprietary\n      native data model.  To facilitate such mappings, the data\
    \ model\n      should be simple.\n   o  The data model should be suitable for\
    \ new implementations to use\n      as is, without requiring a mapping to a different\
    \ native model.\n   o  References to interfaces should be as simple as possible,\n\
    \      preferably by using a single leafref.\n   o  The mapping to ifIndex [RFC2863]\
    \ used by the Simple Network\n      Management Protocol (SNMP) to identify interfaces\
    \ must be clear.\n   o  The model must support interface layering: both (1) simple\n\
    \      layering, where one interface is layered on top of exactly one\n      other\
    \ interface, and (2) more complex scenarios, where one\n      interface results\
    \ from the aggregation of N other interfaces or\n      when N interfaces are multiplexed\
    \ over one other interface.\n   o  The data model should support the pre-provisioning\
    \ of interface\n      configuration, i.e., it should be possible to configure\
    \ an\n      interface whose physical interface hardware is not present on the\n\
    \      device.  It is recommended that devices that support dynamic\n      addition\
    \ and removal of physical interfaces also support\n      pre-provisioning.\n \
    \  o  The data model should support physical interfaces as well as\n      logical\
    \ interfaces.\n   o  The data model should include read-only counters in order\
    \ to\n      gather statistics for sent and received octets and packets,\n    \
    \  received packets with errors, and packets that could not be sent\n      due\
    \ to errors.\n"
- title: 3.  Interfaces Data Model
  contents:
  - "3.  Interfaces Data Model\n   This document defines the YANG module \"ietf-interfaces\"\
    , which has\n   the following structure:\n      +--rw interfaces\n      |  +--rw\
    \ interface* [name]\n      |     +--rw name                        string\n  \
    \    |     +--rw description?                string\n      |     +--rw type  \
    \                      identityref\n      |     +--rw enabled?               \
    \     boolean\n      |     +--rw link-up-down-trap-enable?   enumeration\n   \
    \   +--ro interfaces-state\n         +--ro interface* [name]\n            +--ro\
    \ name               string\n            +--ro type               identityref\n\
    \            +--ro admin-status       enumeration\n            +--ro oper-status\
    \        enumeration\n            +--ro last-change?       yang:date-and-time\n\
    \            +--ro if-index           int32\n            +--ro phys-address? \
    \     yang:phys-address\n            +--ro higher-layer-if*   interface-state-ref\n\
    \            +--ro lower-layer-if*    interface-state-ref\n            +--ro speed?\
    \             yang:gauge64\n            +--ro statistics\n               +--ro\
    \ discontinuity-time    yang:date-and-time\n               +--ro in-octets?  \
    \          yang:counter64\n               +--ro in-unicast-pkts?      yang:counter64\n\
    \               +--ro in-broadcast-pkts?    yang:counter64\n               +--ro\
    \ in-multicast-pkts?    yang:counter64\n               +--ro in-discards?    \
    \      yang:counter32\n               +--ro in-errors?            yang:counter32\n\
    \               +--ro in-unknown-protos?    yang:counter32\n               +--ro\
    \ out-octets?           yang:counter64\n               +--ro out-unicast-pkts?\
    \     yang:counter64\n               +--ro out-broadcast-pkts?   yang:counter64\n\
    \               +--ro out-multicast-pkts?   yang:counter64\n               +--ro\
    \ out-discards?         yang:counter32\n               +--ro out-errors?     \
    \      yang:counter32\n"
- title: 3.1.  The Interface Lists
  contents:
  - "3.1.  The Interface Lists\n   The data model for interfaces presented in this\
    \ document uses a flat\n   list of interfaces.  Each interface in the list is\
    \ identified by its\n   name.  Furthermore, each interface has a mandatory \"\
    type\" leaf.\n   The \"iana-if-type\" module [RFC7224] defines YANG identities\
    \ for the\n   interface types in the IANA-maintained \"ifType definitions\" registry.\n\
    \   There is one list of configured interfaces (\"/interfaces/interface\"),\n\
    \   and a separate list for the operational state of all interfaces\n   (\"/interfaces-state/interface\"\
    ).\n   It is expected that interface-type-specific data models augment the\n \
    \  interface lists and possibly use the \"type\" leaf to make the\n   augmentation\
    \ conditional.\n   As an example of such an interface-type-specific augmentation,\n\
    \   consider this YANG snippet.  For a more complete example, see\n   Appendix\
    \ A.\n     import interfaces {\n         prefix \"if\";\n     }\n     import iana-if-type\
    \ {\n       prefix ianaift;\n     }\n     augment \"/if:interfaces/if:interface\"\
    \ {\n         when \"if:type = 'ianaift:ethernetCsmacd'\";\n         container\
    \ ethernet {\n             leaf duplex {\n                 ...\n             }\n\
    \         }\n     }\n   For system-controlled interfaces, the \"name\" is the\
    \ device-specific\n   name of the interface.  The 'config false' list\n   \"/interfaces-state/interface\"\
    \ contains all existing interfaces on the\n   device.\n   If the device supports\
    \ arbitrarily named user-controlled interfaces,\n   the Network Configuration\
    \ Protocol (NETCONF) server advertises the\n   \"arbitrary-names\" feature.  If\
    \ the device does not advertise this\n   feature, the names of user-controlled\
    \ interfaces MUST match the\n   device's naming scheme.  How a client can learn\
    \ the naming scheme of\n   such devices is outside the scope of this document.\
    \  See Appendices\n   E.1 and E.2 for examples.\n   When a system-controlled interface\
    \ is created by the system, the\n   system tries to apply the interface configuration\
    \ in \"/interfaces/\n   interface\" with the same name as the new interface. \
    \ If no such\n   interface configuration is found, or if the configured type does\
    \ not\n   match the real interface type, the system creates the interface\n  \
    \ without applying explicit configuration.\n   When a user-controlled interface\
    \ is created, the configuration\n   determines the name of the interface.\n  \
    \ Depending on the operating system and the physical attachment point\n   to which\
    \ a network interface may be attached or removed, it may be\n   impossible for\
    \ an implementation to provide predictable and\n   consistent names for system-controlled\
    \ interfaces across insertion/\n   removal cycles as well as in anticipation of\
    \ initial insertion.  The\n   ability to provide configurations for such interfaces\
    \ is therefore\n   dependent on the implementation and cannot be assumed in all\
    \ cases.\n"
- title: 3.2.  Interface References
  contents:
  - "3.2.  Interface References\n   An interface is identified by its name, which\
    \ is unique within the\n   server.  This property is captured in the \"interface-ref\"\
    \ and\n   \"interface-state-ref\" typedefs, which other YANG modules SHOULD use\n\
    \   when they need to reference a configured interface or operationally\n   used\
    \ interface, respectively.\n"
- title: 3.3.  Interface Layering
  contents:
  - "3.3.  Interface Layering\n   There is no generic mechanism for how an interface\
    \ is configured to\n   be layered on top of some other interface.  It is expected\
    \ that\n   interface-type-specific models define their own data nodes for\n  \
    \ interface layering by using \"interface-ref\" types to reference\n   lower layers.\n\
    \   Below is an example of a model with such nodes.  For a more complete\n   example,\
    \ see Appendix B.\n     import interfaces {\n         prefix \"if\";\n     }\n\
    \     import iana-if-type {\n       prefix ianaift;\n     }\n     augment \"/if:interfaces/if:interface\"\
    \ {\n         when \"if:type = 'ianaift:ieee8023adLag'\";\n         leaf-list\
    \ slave-if {\n             type if:interface-ref;\n             must \"/if:interfaces/if:interface[if:name\
    \ = current()]\"\n                + \"/if:type = 'ianaift:ethernetCsmacd'\" {\n\
    \                 description\n                     \"The type of a slave interface\
    \ must be\n                      'ethernetCsmacd'.\";\n             }\n      \
    \   }\n         // other bonding config params, failover times, etc.\n     }\n\
    \   While the interface layering is configured in interface-type-specific\n  \
    \ models, two generic state data leaf-lists, \"higher-layer-if\" and\n   \"lower-layer-if\"\
    , represent a read-only view of the interface\n   layering hierarchy.\n"
- title: 4.  Relationship to the IF-MIB
  contents:
  - "4.  Relationship to the IF-MIB\n   If the device implements the IF-MIB [RFC2863],\
    \ each entry in the \"/\n   interfaces-state/interface\" list is typically mapped\
    \ to one ifEntry.\n   The \"if-index\" leaf MUST contain the value of the corresponding\n\
    \   ifEntry's ifIndex.\n   In most cases, the \"name\" of an \"/interfaces-state/interface\"\
    \ entry\n   is mapped to ifName.  The IF-MIB allows two different ifEntries to\n\
    \   have the same ifName.  Devices that support this feature and also\n   support\
    \ the data model defined in this document cannot have a 1-1\n   mapping between\
    \ the \"name\" leaf and ifName.\n   The configured \"description\" of an \"interface\"\
    \ has traditionally been\n   mapped to ifAlias in some implementations.  This\
    \ document allows this\n   mapping, but implementers should be aware of the differences\
    \ in the\n   value space and persistence for these objects.  See the YANG module\n\
    \   definition of the leaf \"description\" in Section 5 for details.\n   The IF-MIB\
    \ also defines the writable object ifPromiscuousMode.  Since\n   this object typically\
    \ is not implemented as a configuration object by\n   SNMP agents, it is not mapped\
    \ to the \"ietf-interfaces\" module.\n   The ifMtu object from the IF-MIB is not\
    \ mapped to the\n   \"ietf-interfaces\" module.  It is expected that interface-type-\n\
    \   specific YANG modules provide interface-type-specific MTU leafs by\n   augmenting\
    \ the \"ietf-interfaces\" model.\n   There are a number of counters in the IF-MIB\
    \ that exist in two\n   versions: one with 32 bits and one with 64 bits.  The\
    \ 64-bit versions\n   were added to support high-speed interfaces with a data\
    \ rate greater\n   than 20,000,000 bits/second.  Today's implementations generally\n\
    \   support such high-speed interfaces, and hence only 64-bit counters\n   are\
    \ provided in this data model.  Note that NETCONF and SNMP may\n   differ in the\
    \ time granularity in which they provide access to the\n   counters.  For example,\
    \ it is common that SNMP implementations cache\n   counter values for some time.\n\
    \   The objects ifDescr and ifConnectorPresent from the IF-MIB are not\n   mapped\
    \ to the \"ietf-interfaces\" module.\n   The following tables list the YANG data\
    \ nodes with corresponding\n   objects in the IF-MIB.\n   +--------------------------------------+----------------------------+\n\
    \   | YANG data node in /interfaces-       | IF-MIB object              |\n  \
    \ | state/interface                      |                            |\n   +--------------------------------------+----------------------------+\n\
    \   | name                                 | ifName                     |\n  \
    \ | type                                 | ifType                     |\n   |\
    \ admin-status                         | ifAdminStatus              |\n   | oper-status\
    \                          | ifOperStatus               |\n   | last-change  \
    \                        | ifLastChange               |\n   | if-index       \
    \                      | ifIndex                    |\n   | link-up-down-trap-enable\
    \             | ifLinkUpDownTrapEnable     |\n   | phys-address              \
    \           | ifPhysAddress              |\n   | higher-layer-if and lower-layer-if\
    \   | ifStackTable               |\n   | speed                               \
    \ | ifSpeed and ifHighSpeed    |\n   | discontinuity-time                   |\
    \ ifCounterDiscontinuityTime |\n   | in-octets                            | ifHCInOctets\
    \               |\n   | in-unicast-pkts                      | ifHCInUcastPkts\
    \            |\n   | in-broadcast-pkts                    | ifHCInBroadcastPkts\
    \        |\n   | in-multicast-pkts                    | ifHCInMulticastPkts  \
    \      |\n   | in-discards                          | ifInDiscards           \
    \    |\n   | in-errors                            | ifInErrors               \
    \  |\n   | in-unknown-protos                    | ifInUnknownProtos          |\n\
    \   | out-octets                           | ifHCOutOctets              |\n  \
    \ | out-unicast-pkts                     | ifHCOutUcastPkts           |\n   |\
    \ out-broadcast-pkts                   | ifHCOutBroadcastPkts       |\n   | out-multicast-pkts\
    \                   | ifHCOutMulticastPkts       |\n   | out-discards        \
    \                 | ifOutDiscards              |\n   | out-errors            \
    \               | ifOutErrors                |\n   +--------------------------------------+----------------------------+\n\
    \             YANG State Data Nodes and Related IF-MIB Objects\n        +-----------------------------------------+---------------+\n\
    \        | YANG data node in /interfaces/interface | IF-MIB object |\n       \
    \ +-----------------------------------------+---------------+\n        | description\
    \                             | ifAlias       |\n        +-----------------------------------------+---------------+\n\
    \             YANG Config Data Nodes and Related IF-MIB Objects\n"
- title: 5.  Interfaces YANG Module
  contents:
  - "5.  Interfaces YANG Module\n   This YANG module imports typedefs from [RFC6991].\n\
    \   <CODE BEGINS> file \"ietf-interfaces@2014-05-08.yang\"\n   module ietf-interfaces\
    \ {\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-interfaces\";\n     prefix\
    \ if;\n     import ietf-yang-types {\n       prefix yang;\n     }\n     organization\n\
    \       \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n    \
    \ contact\n       \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n        WG List:\
    \  <mailto:netmod@ietf.org>\n        WG Chair: Thomas Nadeau\n               \
    \   <mailto:tnadeau@lucidvision.com>\n        WG Chair: Juergen Schoenwaelder\n\
    \                  <mailto:j.schoenwaelder@jacobs-university.de>\n        Editor:\
    \   Martin Bjorklund\n                  <mailto:mbj@tail-f.com>\";\n     description\n\
    \       \"This module contains a collection of YANG definitions for\n        managing\
    \ network interfaces.\n        Copyright (c) 2014 IETF Trust and the persons identified\
    \ as\n        authors of the code.  All rights reserved.\n        Redistribution\
    \ and use in source and binary forms, with or\n        without modification, is\
    \ permitted pursuant to, and subject\n        to the license terms contained in,\
    \ the Simplified BSD License\n        set forth in Section 4.c of the IETF Trust's\
    \ Legal Provisions\n        Relating to IETF Documents\n        (http://trustee.ietf.org/license-info).\n\
    \        This version of this YANG module is part of RFC 7223; see\n        the\
    \ RFC itself for full legal notices.\";\n     revision 2014-05-08 {\n       description\n\
    \         \"Initial revision.\";\n       reference\n         \"RFC 7223: A YANG\
    \ Data Model for Interface Management\";\n     }\n     /*\n      * Typedefs\n\
    \      */\n     typedef interface-ref {\n       type leafref {\n         path\
    \ \"/if:interfaces/if:interface/if:name\";\n       }\n       description\n   \
    \      \"This type is used by data models that need to reference\n          configured\
    \ interfaces.\";\n     }\n     typedef interface-state-ref {\n       type leafref\
    \ {\n         path \"/if:interfaces-state/if:interface/if:name\";\n       }\n\
    \       description\n         \"This type is used by data models that need to\
    \ reference\n          the operationally present interfaces.\";\n     }\n    \
    \ /*\n      * Identities\n      */\n     identity interface-type {\n       description\n\
    \         \"Base identity from which specific interface types are\n          derived.\"\
    ;\n     }\n     /*\n      * Features\n      */\n     feature arbitrary-names {\n\
    \       description\n         \"This feature indicates that the device allows\
    \ user-controlled\n          interfaces to be named arbitrarily.\";\n     }\n\
    \     feature pre-provisioning {\n       description\n         \"This feature\
    \ indicates that the device supports\n          pre-provisioning of interface\
    \ configuration, i.e., it is\n          possible to configure an interface whose\
    \ physical interface\n          hardware is not present on the device.\";\n  \
    \   }\n     feature if-mib {\n       description\n         \"This feature indicates\
    \ that the device implements\n          the IF-MIB.\";\n       reference\n   \
    \      \"RFC 2863: The Interfaces Group MIB\";\n     }\n     /*\n      * Configuration\
    \ data nodes\n      */\n     container interfaces {\n       description\n    \
    \     \"Interface configuration parameters.\";\n       list interface {\n    \
    \     key \"name\";\n         description\n           \"The list of configured\
    \ interfaces on the device.\n            The operational state of an interface\
    \ is available in the\n            /interfaces-state/interface list.  If the configuration\
    \ of a\n            system-controlled interface cannot be used by the system\n\
    \            (e.g., the interface hardware present does not match the\n      \
    \      interface type), then the configuration is not applied to\n           \
    \ the system-controlled interface shown in the\n            /interfaces-state/interface\
    \ list.  If the configuration\n            of a user-controlled interface cannot\
    \ be used by the system,\n            the configured interface is not instantiated\
    \ in the\n            /interfaces-state/interface list.\";\n        leaf name\
    \ {\n           type string;\n           description\n             \"The name\
    \ of the interface.\n              A device MAY restrict the allowed values for\
    \ this leaf,\n              possibly depending on the type of the interface.\n\
    \              For system-controlled interfaces, this leaf is the\n          \
    \    device-specific name of the interface.  The 'config false'\n            \
    \  list /interfaces-state/interface contains the currently\n              existing\
    \ interfaces on the device.\n              If a client tries to create configuration\
    \ for a\n              system-controlled interface that is not present in the\n\
    \              /interfaces-state/interface list, the server MAY reject\n     \
    \         the request if the implementation does not support\n              pre-provisioning\
    \ of interfaces or if the name refers to\n              an interface that can\
    \ never exist in the system.  A\n              NETCONF server MUST reply with\
    \ an rpc-error with the\n              error-tag 'invalid-value' in this case.\n\
    \              If the device supports pre-provisioning of interface\n        \
    \      configuration, the 'pre-provisioning' feature is\n              advertised.\n\
    \              If the device allows arbitrarily named user-controlled\n      \
    \        interfaces, the 'arbitrary-names' feature is advertised.\n          \
    \    When a configured user-controlled interface is created by\n             \
    \ the system, it is instantiated with the same name in the\n              /interface-state/interface\
    \ list.\";\n         }\n         leaf description {\n           type string;\n\
    \           description\n             \"A textual description of the interface.\n\
    \              A server implementation MAY map this leaf to the ifAlias\n    \
    \          MIB object.  Such an implementation needs to use some\n           \
    \   mechanism to handle the differences in size and characters\n             \
    \ allowed between this leaf and ifAlias.  The definition of\n              such\
    \ a mechanism is outside the scope of this document.\n              Since ifAlias\
    \ is defined to be stored in non-volatile\n              storage, the MIB implementation\
    \ MUST map ifAlias to the\n              value of 'description' in the persistently\
    \ stored\n              datastore.\n              Specifically, if the device\
    \ supports ':startup', when\n              ifAlias is read the device MUST return\
    \ the value of\n              'description' in the 'startup' datastore, and when\
    \ it is\n              written, it MUST be written to the 'running' and 'startup'\n\
    \              datastores.  Note that it is up to the implementation to\n    \
    \          decide whether to modify this single leaf in 'startup' or\n       \
    \       perform an implicit copy-config from 'running' to\n              'startup'.\n\
    \              If the device does not support ':startup', ifAlias MUST\n     \
    \         be mapped to the 'description' leaf in the 'running'\n             \
    \ datastore.\";\n           reference\n             \"RFC 2863: The Interfaces\
    \ Group MIB - ifAlias\";\n         }\n         leaf type {\n           type identityref\
    \ {\n             base interface-type;\n           }\n           mandatory true;\n\
    \           description\n             \"The type of the interface.\n         \
    \     When an interface entry is created, a server MAY\n              initialize\
    \ the type leaf with a valid value, e.g., if it\n              is possible to\
    \ derive the type from the name of the\n              interface.\n           \
    \   If a client tries to set the type of an interface to a\n              value\
    \ that can never be used by the system, e.g., if the\n              type is not\
    \ supported or if the type does not match the\n              name of the interface,\
    \ the server MUST reject the request.\n              A NETCONF server MUST reply\
    \ with an rpc-error with the\n              error-tag 'invalid-value' in this\
    \ case.\";\n           reference\n             \"RFC 2863: The Interfaces Group\
    \ MIB - ifType\";\n         }\n         leaf enabled {\n           type boolean;\n\
    \           default \"true\";\n           description\n             \"This leaf\
    \ contains the configured, desired state of the\n              interface.\n  \
    \            Systems that implement the IF-MIB use the value of this\n       \
    \       leaf in the 'running' datastore to set\n              IF-MIB.ifAdminStatus\
    \ to 'up' or 'down' after an ifEntry\n              has been initialized, as described\
    \ in RFC 2863.\n              Changes in this leaf in the 'running' datastore\
    \ are\n              reflected in ifAdminStatus, but if ifAdminStatus is\n   \
    \           changed over SNMP, this leaf is not affected.\";\n           reference\n\
    \             \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      \
    \   }\n         leaf link-up-down-trap-enable {\n           if-feature if-mib;\n\
    \           type enumeration {\n             enum enabled {\n               value\
    \ 1;\n             }\n             enum disabled {\n               value 2;\n\
    \             }\n           }\n           description\n             \"Controls\
    \ whether linkUp/linkDown SNMP notifications\n              should be generated\
    \ for this interface.\n              If this node is not configured, the value\
    \ 'enabled' is\n              operationally used by the server for interfaces\
    \ that do\n              not operate on top of any other interface (i.e., there\
    \ are\n              no 'lower-layer-if' entries), and 'disabled' otherwise.\"\
    ;\n           reference\n             \"RFC 2863: The Interfaces Group MIB -\n\
    \                        ifLinkUpDownTrapEnable\";\n         }\n       }\n   \
    \  }\n     /*\n      * Operational state data nodes\n      */\n     container\
    \ interfaces-state {\n       config false;\n       description\n         \"Data\
    \ nodes for the operational state of interfaces.\";\n       list interface {\n\
    \         key \"name\";\n         description\n           \"The list of interfaces\
    \ on the device.\n            System-controlled interfaces created by the system\
    \ are\n            always present in this list, whether they are configured or\n\
    \            not.\";\n         leaf name {\n           type string;\n        \
    \   description\n             \"The name of the interface.\n              A server\
    \ implementation MAY map this leaf to the ifName\n              MIB object.  Such\
    \ an implementation needs to use some\n              mechanism to handle the differences\
    \ in size and characters\n              allowed between this leaf and ifName.\
    \  The definition of\n              such a mechanism is outside the scope of this\
    \ document.\";\n           reference\n             \"RFC 2863: The Interfaces\
    \ Group MIB - ifName\";\n         }\n         leaf type {\n           type identityref\
    \ {\n             base interface-type;\n           }\n           mandatory true;\n\
    \           description\n             \"The type of the interface.\";\n      \
    \     reference\n             \"RFC 2863: The Interfaces Group MIB - ifType\"\
    ;\n         }\n         leaf admin-status {\n           if-feature if-mib;\n \
    \          type enumeration {\n             enum up {\n               value 1;\n\
    \               description\n                 \"Ready to pass packets.\";\n  \
    \           }\n             enum down {\n               value 2;\n           \
    \    description\n                 \"Not ready to pass packets and not in some\
    \ test mode.\";\n             }\n             enum testing {\n               value\
    \ 3;\n               description\n                 \"In some test mode.\";\n \
    \            }\n           }\n           mandatory true;\n           description\n\
    \             \"The desired state of the interface.\n              This leaf has\
    \ the same read semantics as ifAdminStatus.\";\n           reference\n       \
    \      \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n         }\n \
    \        leaf oper-status {\n           type enumeration {\n             enum\
    \ up {\n               value 1;\n               description\n                \
    \ \"Ready to pass packets.\";\n             }\n             enum down {\n    \
    \           value 2;\n               description\n                 \"The interface\
    \ does not pass any packets.\";\n             }\n             enum testing {\n\
    \               value 3;\n               description\n                 \"In some\
    \ test mode.  No operational packets can\n                  be passed.\";\n  \
    \           }\n             enum unknown {\n               value 4;\n        \
    \       description\n                 \"Status cannot be determined for some reason.\"\
    ;\n             }\n             enum dormant {\n               value 5;\n    \
    \           description\n                 \"Waiting for some external event.\"\
    ;\n             }\n             enum not-present {\n               value 6;\n\
    \               description\n                 \"Some component (typically hardware)\
    \ is missing.\";\n             }\n             enum lower-layer-down {\n     \
    \          value 7;\n               description\n                 \"Down due to\
    \ state of lower-layer interface(s).\";\n             }\n           }\n      \
    \     mandatory true;\n           description\n             \"The current operational\
    \ state of the interface.\n              This leaf has the same semantics as ifOperStatus.\"\
    ;\n           reference\n             \"RFC 2863: The Interfaces Group MIB - ifOperStatus\"\
    ;\n         }\n         leaf last-change {\n           type yang:date-and-time;\n\
    \           description\n             \"The time the interface entered its current\
    \ operational\n              state.  If the current state was entered prior to\
    \ the\n              last re-initialization of the local network management\n\
    \              subsystem, then this node is not present.\";\n           reference\n\
    \             \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n       \
    \  }\n         leaf if-index {\n           if-feature if-mib;\n           type\
    \ int32 {\n             range \"1..2147483647\";\n           }\n           mandatory\
    \ true;\n           description\n             \"The ifIndex value for the ifEntry\
    \ represented by this\n              interface.\";\n           reference\n   \
    \          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n         }\n   \
    \      leaf phys-address {\n           type yang:phys-address;\n           description\n\
    \             \"The interface's address at its protocol sub-layer.  For\n    \
    \          example, for an 802.x interface, this object normally\n           \
    \   contains a Media Access Control (MAC) address.  The\n              interface's\
    \ media-specific modules must define the bit\n              and byte ordering\
    \ and the format of the value of this\n              object.  For interfaces that\
    \ do not have such an address\n              (e.g., a serial line), this node\
    \ is not present.\";\n           reference\n             \"RFC 2863: The Interfaces\
    \ Group MIB - ifPhysAddress\";\n         }\n         leaf-list higher-layer-if\
    \ {\n           type interface-state-ref;\n           description\n          \
    \   \"A list of references to interfaces layered on top of this\n            \
    \  interface.\";\n           reference\n             \"RFC 2863: The Interfaces\
    \ Group MIB - ifStackTable\";\n         }\n         leaf-list lower-layer-if {\n\
    \           type interface-state-ref;\n           description\n             \"\
    A list of references to interfaces layered underneath this\n              interface.\"\
    ;\n           reference\n             \"RFC 2863: The Interfaces Group MIB - ifStackTable\"\
    ;\n         }\n         leaf speed {\n           type yang:gauge64;\n        \
    \   units \"bits/second\";\n           description\n               \"An estimate\
    \ of the interface's current bandwidth in bits\n                per second.  For\
    \ interfaces that do not vary in\n                bandwidth or for those where\
    \ no accurate estimation can\n                be made, this node should contain\
    \ the nominal bandwidth.\n                For interfaces that have no concept\
    \ of bandwidth, this\n                node is not present.\";\n           reference\n\
    \             \"RFC 2863: The Interfaces Group MIB -\n                       \
    \ ifSpeed, ifHighSpeed\";\n         }\n         container statistics {\n     \
    \      description\n             \"A collection of interface-related statistics\
    \ objects.\";\n           leaf discontinuity-time {\n             type yang:date-and-time;\n\
    \             mandatory true;\n             description\n               \"The\
    \ time on the most recent occasion at which any one or\n                more of\
    \ this interface's counters suffered a\n                discontinuity.  If no\
    \ such discontinuities have occurred\n                since the last re-initialization\
    \ of the local management\n                subsystem, then this node contains\
    \ the time the local\n                management subsystem re-initialized itself.\"\
    ;\n           }\n           leaf in-octets {\n             type yang:counter64;\n\
    \             description\n               \"The total number of octets received\
    \ on the interface,\n                including framing characters.\n         \
    \       Discontinuities in the value of this counter can occur\n             \
    \   at re-initialization of the management system, and at\n                other\
    \ times as indicated by the value of\n                'discontinuity-time'.\"\
    ;\n             reference\n               \"RFC 2863: The Interfaces Group MIB\
    \ - ifHCInOctets\";\n           }\n           leaf in-unicast-pkts {\n       \
    \      type yang:counter64;\n             description\n               \"The number\
    \ of packets, delivered by this sub-layer to a\n                higher (sub-)layer,\
    \ that were not addressed to a\n                multicast or broadcast address\
    \ at this sub-layer.\n                Discontinuities in the value of this counter\
    \ can occur\n                at re-initialization of the management system, and\
    \ at\n                other times as indicated by the value of\n             \
    \   'discontinuity-time'.\";\n             reference\n               \"RFC 2863:\
    \ The Interfaces Group MIB - ifHCInUcastPkts\";\n           }\n           leaf\
    \ in-broadcast-pkts {\n             type yang:counter64;\n             description\n\
    \               \"The number of packets, delivered by this sub-layer to a\n  \
    \              higher (sub-)layer, that were addressed to a broadcast\n      \
    \          address at this sub-layer.\n                Discontinuities in the\
    \ value of this counter can occur\n                at re-initialization of the\
    \ management system, and at\n                other times as indicated by the value\
    \ of\n                'discontinuity-time'.\";\n             reference\n     \
    \          \"RFC 2863: The Interfaces Group MIB -\n                          ifHCInBroadcastPkts\"\
    ;\n           }\n           leaf in-multicast-pkts {\n             type yang:counter64;\n\
    \             description\n               \"The number of packets, delivered by\
    \ this sub-layer to a\n                higher (sub-)layer, that were addressed\
    \ to a multicast\n                address at this sub-layer.  For a MAC-layer\
    \ protocol,\n                this includes both Group and Functional addresses.\n\
    \                Discontinuities in the value of this counter can occur\n    \
    \            at re-initialization of the management system, and at\n         \
    \       other times as indicated by the value of\n                'discontinuity-time'.\"\
    ;\n             reference\n               \"RFC 2863: The Interfaces Group MIB\
    \ -\n                          ifHCInMulticastPkts\";\n           }\n        \
    \   leaf in-discards {\n             type yang:counter32;\n             description\n\
    \               \"The number of inbound packets that were chosen to be\n     \
    \           discarded even though no errors had been detected to\n           \
    \     prevent their being deliverable to a higher-layer\n                protocol.\
    \  One possible reason for discarding such a\n                packet could be\
    \ to free up buffer space.\n                Discontinuities in the value of this\
    \ counter can occur\n                at re-initialization of the management system,\
    \ and at\n                other times as indicated by the value of\n         \
    \       'discontinuity-time'.\";\n             reference\n               \"RFC\
    \ 2863: The Interfaces Group MIB - ifInDiscards\";\n           }\n           leaf\
    \ in-errors {\n             type yang:counter32;\n             description\n \
    \              \"For packet-oriented interfaces, the number of inbound\n     \
    \           packets that contained errors preventing them from being\n       \
    \         deliverable to a higher-layer protocol.  For character-\n          \
    \      oriented or fixed-length interfaces, the number of\n                inbound\
    \ transmission units that contained errors\n                preventing them from\
    \ being deliverable to a higher-layer\n                protocol.\n           \
    \     Discontinuities in the value of this counter can occur\n               \
    \ at re-initialization of the management system, and at\n                other\
    \ times as indicated by the value of\n                'discontinuity-time'.\"\
    ;\n             reference\n               \"RFC 2863: The Interfaces Group MIB\
    \ - ifInErrors\";\n           }\n           leaf in-unknown-protos {\n       \
    \      type yang:counter32;\n             description\n               \"For packet-oriented\
    \ interfaces, the number of packets\n                received via the interface\
    \ that were discarded because\n                of an unknown or unsupported protocol.\
    \  For\n                character-oriented or fixed-length interfaces that\n \
    \               support protocol multiplexing, the number of\n               \
    \ transmission units received via the interface that were\n                discarded\
    \ because of an unknown or unsupported protocol.\n                For any interface\
    \ that does not support protocol\n                multiplexing, this counter is\
    \ not present.\n                Discontinuities in the value of this counter can\
    \ occur\n                at re-initialization of the management system, and at\n\
    \                other times as indicated by the value of\n                'discontinuity-time'.\"\
    ;\n             reference\n               \"RFC 2863: The Interfaces Group MIB\
    \ - ifInUnknownProtos\";\n           }\n           leaf out-octets {\n       \
    \      type yang:counter64;\n             description\n               \"The total\
    \ number of octets transmitted out of the\n                interface, including\
    \ framing characters.\n                Discontinuities in the value of this counter\
    \ can occur\n                at re-initialization of the management system, and\
    \ at\n                other times as indicated by the value of\n             \
    \   'discontinuity-time'.\";\n             reference\n               \"RFC 2863:\
    \ The Interfaces Group MIB - ifHCOutOctets\";\n           }\n           leaf out-unicast-pkts\
    \ {\n             type yang:counter64;\n             description\n           \
    \    \"The total number of packets that higher-level protocols\n             \
    \   requested be transmitted, and that were not addressed\n                to\
    \ a multicast or broadcast address at this sub-layer,\n                including\
    \ those that were discarded or not sent.\n                Discontinuities in the\
    \ value of this counter can occur\n                at re-initialization of the\
    \ management system, and at\n                other times as indicated by the value\
    \ of\n                'discontinuity-time'.\";\n             reference\n     \
    \          \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n      \
    \     }\n           leaf out-broadcast-pkts {\n             type yang:counter64;\n\
    \             description\n               \"The total number of packets that higher-level\
    \ protocols\n                requested be transmitted, and that were addressed\
    \ to a\n                broadcast address at this sub-layer, including those\n\
    \                that were discarded or not sent.\n                Discontinuities\
    \ in the value of this counter can occur\n                at re-initialization\
    \ of the management system, and at\n                other times as indicated by\
    \ the value of\n                'discontinuity-time'.\";\n             reference\n\
    \               \"RFC 2863: The Interfaces Group MIB -\n                     \
    \     ifHCOutBroadcastPkts\";\n           }\n           leaf out-multicast-pkts\
    \ {\n             type yang:counter64;\n             description\n           \
    \    \"The total number of packets that higher-level protocols\n             \
    \   requested be transmitted, and that were addressed to a\n                multicast\
    \ address at this sub-layer, including those\n                that were discarded\
    \ or not sent.  For a MAC-layer\n                protocol, this includes both\
    \ Group and Functional\n                addresses.\n                Discontinuities\
    \ in the value of this counter can occur\n                at re-initialization\
    \ of the management system, and at\n                other times as indicated by\
    \ the value of\n                'discontinuity-time'.\";\n             reference\n\
    \               \"RFC 2863: The Interfaces Group MIB -\n                     \
    \     ifHCOutMulticastPkts\";\n           }\n           leaf out-discards {\n\
    \             type yang:counter32;\n             description\n               \"\
    The number of outbound packets that were chosen to be\n                discarded\
    \ even though no errors had been detected to\n                prevent their being\
    \ transmitted.  One possible reason\n                for discarding such a packet\
    \ could be to free up buffer\n                space.\n                Discontinuities\
    \ in the value of this counter can occur\n                at re-initialization\
    \ of the management system, and at\n                other times as indicated by\
    \ the value of\n                'discontinuity-time'.\";\n             reference\n\
    \               \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n    \
    \       }\n           leaf out-errors {\n             type yang:counter32;\n \
    \            description\n               \"For packet-oriented interfaces, the\
    \ number of outbound\n                packets that could not be transmitted because\
    \ of errors.\n                For character-oriented or fixed-length interfaces,\
    \ the\n                number of outbound transmission units that could not be\n\
    \                transmitted because of errors.\n                Discontinuities\
    \ in the value of this counter can occur\n                at re-initialization\
    \ of the management system, and at\n                other times as indicated by\
    \ the value of\n                'discontinuity-time'.\";\n             reference\n\
    \               \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n      \
    \     }\n         }\n       }\n     }\n   }\n   <CODE ENDS>\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document registers a URI in the \"IETF XML Registry\"\
    \ [RFC3688].\n   Following the format in RFC 3688, the following registration\
    \ has been\n   made.\n      URI: urn:ietf:params:xml:ns:yang:ietf-interfaces\n\
    \      Registrant Contact: The IESG.\n      XML: N/A, the requested URI is an\
    \ XML namespace.\n   This document registers a YANG module in the \"YANG Module\
    \ Names\"\n   registry [RFC6020].\n      name:         ietf-interfaces\n     \
    \ namespace:    urn:ietf:params:xml:ns:yang:ietf-interfaces\n      prefix:   \
    \    if\n      reference:    RFC 7223\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The YANG module defined in this memo is designed\
    \ to be accessed via\n   the NETCONF protocol [RFC6241].  The lowest NETCONF layer\
    \ is the\n   secure transport layer and the mandatory-to-implement secure\n  \
    \ transport is SSH [RFC6242].  The NETCONF access control model\n   [RFC6536]\
    \ provides the means to restrict access for particular\n   NETCONF users to a\
    \ pre-configured subset of all available NETCONF\n   protocol operations and content.\n\
    \   There are a number of data nodes defined in the YANG module which are\n  \
    \ writable/creatable/deletable (i.e., config true, which is the\n   default).\
    \  These data nodes may be considered sensitive or vulnerable\n   in some network\
    \ environments.  Write operations (e.g., <edit-config>)\n   to these data nodes\
    \ without proper protection can have a negative\n   effect on network operations.\
    \  These are the subtrees and data nodes\n   and their sensitivity/vulnerability:\n\
    \   /interfaces/interface:  This list specifies the configured interfaces\n  \
    \    on a device.  Unauthorized access to this list could cause the\n      device\
    \ to ignore packets it should receive and process.\n   /interfaces/interface/enabled:\
    \  This leaf controls whether an\n      interface is enabled or not.  Unauthorized\
    \ access to this leaf\n      could cause the device to ignore packets it should\
    \ receive and\n      process.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The author wishes to thank Alexander Clemm, Per Hedeland,\
    \ Ladislav\n   Lhotka, and Juergen Schoenwaelder for their helpful comments.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2863]  McCloghrie, K. and F. Kastenholz, \"The Interfaces Group\n\
    \              MIB\", RFC 2863, June 2000.\n   [RFC3688]  Mealling, M., \"The\
    \ IETF XML Registry\", BCP 81, RFC 3688,\n              January 2004.\n   [RFC6020]\
    \  Bjorklund, M., \"YANG - A Data Modeling Language for the\n              Network\
    \ Configuration Protocol (NETCONF)\", RFC 6020,\n              October 2010.\n\
    \   [RFC6991]  Schoenwaelder, J., \"Common YANG Data Types\", RFC 6991,\n    \
    \          July 2013.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC6241]  Enns, R., Bjorklund, M., Schoenwaelder,\
    \ J., and A.\n              Bierman, \"Network Configuration Protocol (NETCONF)\"\
    ,\n              RFC 6241, June 2011.\n   [RFC6242]  Wasserman, M., \"Using the\
    \ NETCONF Protocol over Secure\n              Shell (SSH)\", RFC 6242, June 2011.\n\
    \   [RFC6536]  Bierman, A. and M. Bjorklund, \"Network Configuration\n       \
    \       Protocol (NETCONF) Access Control Model\", RFC 6536,\n              March\
    \ 2012.\n   [RFC7224]  Bjorklund, M., \"IANA Interface Type YANG Module\",\n \
    \             RFC 7224, May 2014.\n"
- title: 'Appendix A.  Example: Ethernet Interface Module'
  contents:
  - "Appendix A.  Example: Ethernet Interface Module\n   This section gives a simple\
    \ example of how an Ethernet interface\n   module could be defined.  It demonstrates\
    \ how media-specific\n   configuration parameters can be conditionally augmented\
    \ to the\n   generic interface list.  It also shows how operational state\n  \
    \ parameters can be conditionally augmented to the operational\n   interface list.\
    \  The example is not intended as a complete module for\n   Ethernet configuration.\n\
    \   module ex-ethernet {\n     namespace \"http://example.com/ethernet\";\n  \
    \   prefix \"eth\";\n     import ietf-interfaces {\n       prefix if;\n     }\n\
    \     import iana-if-type {\n       prefix ianaift;\n     }\n     // configuration\
    \ parameters for Ethernet interfaces\n     augment \"/if:interfaces/if:interface\"\
    \ {\n       when \"if:type = 'ianaift:ethernetCsmacd'\";\n       container ethernet\
    \ {\n         choice transmission-params {\n           case auto {\n         \
    \    leaf auto-negotiate {\n               type empty;\n             }\n     \
    \      }\n           case manual {\n             leaf duplex {\n             \
    \  type enumeration {\n                 enum \"half\";\n                 enum\
    \ \"full\";\n               }\n             }\n             leaf speed {\n   \
    \            type enumeration {\n                 enum \"10Mb\";\n           \
    \      enum \"100Mb\";\n                 enum \"1Gb\";\n                 enum\
    \ \"10Gb\";\n               }\n             }\n           }\n         }\n    \
    \     // other Ethernet-specific params...\n       }\n     }\n     // operational\
    \ state parameters for Ethernet interfaces\n     augment \"/if:interfaces-state/if:interface\"\
    \ {\n       when \"if:type = 'ianaift:ethernetCsmacd'\";\n       container ethernet\
    \ {\n         leaf duplex {\n           type enumeration {\n             enum\
    \ \"half\";\n             enum \"full\";\n           }\n         }\n         //\
    \ other Ethernet-specific params...\n       }\n     }\n   }\n"
- title: 'Appendix B.  Example: Ethernet Bonding Interface Module'
  contents:
  - "Appendix B.  Example: Ethernet Bonding Interface Module\n   This section gives\
    \ an example of how interface layering can be\n   defined.  An Ethernet bonding\
    \ interface that bonds several Ethernet\n   interfaces into one logical interface\
    \ is defined.\n   module ex-ethernet-bonding {\n     namespace \"http://example.com/ethernet-bonding\"\
    ;\n     prefix \"bond\";\n     import ietf-interfaces {\n       prefix if;\n \
    \    }\n     import iana-if-type {\n       prefix ianaift;\n     }\n     augment\
    \ \"/if:interfaces/if:interface\" {\n       when \"if:type = 'ianaift:ieee8023adLag'\"\
    ;\n       leaf-list slave-if {\n         type if:interface-ref;\n         must\
    \ \"/if:interfaces/if:interface[if:name = current()]\"\n            + \"/if:type\
    \ = 'ianaift:ethernetCsmacd'\" {\n           description\n             \"The type\
    \ of a slave interface must be 'ethernetCsmacd'.\";\n         }\n       }\n  \
    \     leaf bonding-mode {\n         type enumeration {\n           enum round-robin;\n\
    \           enum active-backup;\n           enum broadcast;\n         }\n    \
    \   }\n       // other bonding config params, failover times, etc.\n     }\n \
    \  }\n"
- title: 'Appendix C.  Example: VLAN Interface Module'
  contents:
  - "Appendix C.  Example: VLAN Interface Module\n   This section gives an example\
    \ of how a VLAN interface module can be\n   defined.\n   module ex-vlan {\n  \
    \   namespace \"http://example.com/vlan\";\n     prefix \"vlan\";\n     import\
    \ ietf-interfaces {\n       prefix if;\n     }\n     import iana-if-type {\n \
    \      prefix ianaift;\n     }\n     augment \"/if:interfaces/if:interface\" {\n\
    \       when \"if:type = 'ianaift:ethernetCsmacd' or\n             if:type = 'ianaift:ieee8023adLag'\"\
    ;\n       leaf vlan-tagging {\n         type boolean;\n         default false;\n\
    \       }\n     }\n     augment \"/if:interfaces/if:interface\" {\n       when\
    \ \"if:type = 'ianaift:l2vlan'\";\n       leaf base-interface {\n         type\
    \ if:interface-ref;\n         must \"/if:interfaces/if:interface[if:name = current()]\"\
    \n            + \"/vlan:vlan-tagging = 'true'\" {\n           description\n  \
    \           \"The base interface must have VLAN tagging enabled.\";\n        \
    \ }\n       }\n       leaf vlan-id {\n         type uint16 {\n           range\
    \ \"1..4094\";\n         }\n         must \"../base-interface\" {\n          \
    \ description\n             \"If a vlan-id is defined, a base-interface must\n\
    \              be specified.\";\n         }\n       }\n     }\n   }\n"
- title: 'Appendix D.  Example: NETCONF <get> Reply'
  contents:
  - "Appendix D.  Example: NETCONF <get> Reply\n   This section gives an example of\
    \ a reply to the NETCONF <get> request\n   for a device that implements the example\
    \ data models above.\n   <rpc-reply\n       xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    \n       message-id=\"101\">\n     <data>\n       <interfaces\n           xmlns=\"\
    urn:ietf:params:xml:ns:yang:ietf-interfaces\"\n           xmlns:ianaift=\"urn:ietf:params:xml:ns:yang:iana-if-type\"\
    \n           xmlns:vlan=\"http://example.com/vlan\">\n         <interface>\n \
    \          <name>eth0</name>\n           <type>ianaift:ethernetCsmacd</type>\n\
    \           <enabled>false</enabled>\n         </interface>\n         <interface>\n\
    \           <name>eth1</name>\n           <type>ianaift:ethernetCsmacd</type>\n\
    \           <enabled>true</enabled>\n           <vlan:vlan-tagging>true</vlan:vlan-tagging>\n\
    \         </interface>\n         <interface>\n           <name>eth1.10</name>\n\
    \           <type>ianaift:l2vlan</type>\n           <enabled>true</enabled>\n\
    \           <vlan:base-interface>eth1</vlan:base-interface>\n           <vlan:vlan-id>10</vlan:vlan-id>\n\
    \         </interface>\n         <interface>\n           <name>lo1</name>\n  \
    \         <type>ianaift:softwareLoopback</type>\n           <enabled>true</enabled>\n\
    \         </interface>\n       </interfaces>\n       <interfaces-state\n     \
    \      xmlns=\"urn:ietf:params:xml:ns:yang:ietf-interfaces\"\n           xmlns:ianaift=\"\
    urn:ietf:params:xml:ns:yang:iana-if-type\">\n         <interface>\n          \
    \ <name>eth0</name>\n           <type>ianaift:ethernetCsmacd</type>\n        \
    \   <admin-status>down</admin-status>\n           <oper-status>down</oper-status>\n\
    \           <if-index>2</if-index>\n           <phys-address>00:01:02:03:04:05</phys-address>\n\
    \           <statistics>\n             <discontinuity-time>\n               2013-04-01T03:00:00+00:00\n\
    \             </discontinuity-time>\n             <!-- counters now shown here\
    \ -->\n           </statistics>\n         </interface>\n         <interface>\n\
    \           <name>eth1</name>\n           <type>ianaift:ethernetCsmacd</type>\n\
    \           <admin-status>up</admin-status>\n           <oper-status>up</oper-status>\n\
    \           <if-index>7</if-index>\n           <phys-address>00:01:02:03:04:06</phys-address>\n\
    \           <higher-layer-if>eth1.10</higher-layer-if>\n           <statistics>\n\
    \             <discontinuity-time>\n               2013-04-01T03:00:00+00:00\n\
    \             </discontinuity-time>\n             <!-- counters now shown here\
    \ -->\n           </statistics>\n         </interface>\n         <interface>\n\
    \           <name>eth1.10</name>\n           <type>ianaift:l2vlan</type>\n   \
    \        <admin-status>up</admin-status>\n           <oper-status>up</oper-status>\n\
    \           <if-index>9</if-index>\n           <lower-layer-if>eth1</lower-layer-if>\n\
    \           <statistics>\n             <discontinuity-time>\n               2013-04-01T03:00:00+00:00\n\
    \             </discontinuity-time>\n             <!-- counters now shown here\
    \ -->\n           </statistics>\n         </interface>\n         <!-- This interface\
    \ is not configured -->\n         <interface>\n           <name>eth2</name>\n\
    \           <type>ianaift:ethernetCsmacd</type>\n           <admin-status>down</admin-status>\n\
    \           <oper-status>down</oper-status>\n           <if-index>8</if-index>\n\
    \           <phys-address>00:01:02:03:04:07</phys-address>\n           <statistics>\n\
    \             <discontinuity-time>\n               2013-04-01T03:00:00+00:00\n\
    \             </discontinuity-time>\n             <!-- counters now shown here\
    \ -->\n           </statistics>\n         </interface>\n         <interface>\n\
    \           <name>lo1</name>\n           <type>ianaift:softwareLoopback</type>\n\
    \           <admin-status>up</admin-status>\n           <oper-status>up</oper-status>\n\
    \           <if-index>1</if-index>\n           <statistics>\n             <discontinuity-time>\n\
    \               2013-04-01T03:00:00+00:00\n             </discontinuity-time>\n\
    \             <!-- counters now shown here -->\n           </statistics>\n   \
    \      </interface>\n       </interfaces-state>\n     </data>\n   </rpc-reply>\n"
- title: 'Appendix E.  Examples: Interface Naming Schemes'
  contents:
  - "Appendix E.  Examples: Interface Naming Schemes\n   This section gives examples\
    \ of some implementation strategies.\n   The examples make use of the example\
    \ data model \"ex-vlan\" (see\n   Appendix C) to show how user-controlled interfaces\
    \ can be configured.\n"
- title: E.1.  Router with Restricted Interface Names
  contents:
  - "E.1.  Router with Restricted Interface Names\n   In this example, a router has\
    \ support for 4 line cards, each with 8\n   ports.  The slots for the cards are\
    \ physically numbered from 0 to 3,\n   and the ports on each card from 0 to 7.\
    \  Each card has Fast Ethernet\n   or Gigabit Ethernet ports.\n   The device-specific\
    \ names for these physical interfaces are\n   \"fastethernet-N/M\" or \"gigabitethernet-N/M\"\
    .\n   The name of a VLAN interface is restricted to the form\n   \"<physical-interface-name>.<subinterface-number>\"\
    .\n   It is assumed that the operator is aware of this naming scheme.  The\n \
    \  implementation auto-initializes the value for \"type\" based on the\n   interface\
    \ name.\n   The NETCONF server does not advertise the \"arbitrary-names\" feature\n\
    \   in the <hello> message.\n   An operator can configure a physical interface\
    \ by sending an\n   <edit-config> containing:\n     <interface nc:operation=\"\
    create\">\n       <name>fastethernet-1/0</name>\n     </interface>\n   When the\
    \ server processes this request, it will set the leaf \"type\"\n   to \"ianaift:ethernetCsmacd\"\
    .  Thus, if the client performs a\n   <get-config> right after the <edit-config>\
    \ above, it will get:\n     <interface>\n       <name>fastethernet-1/0</name>\n\
    \       <type>ianaift:ethernetCsmacd</type>\n     </interface>\n   The client\
    \ can configure a VLAN interface by sending an <edit-config>\n   containing:\n\
    \     <interface nc:operation=\"create\">\n       <name>fastethernet-1/0.10005</name>\n\
    \       <type>ianaift:l2vlan</type>\n       <vlan:base-interface>fastethernet-1/0</vlan:base-interface>\n\
    \       <vlan:vlan-id>5</vlan:vlan-id>\n     </interface>\n   If the client tries\
    \ to change the type of the physical interface with\n   an <edit-config> containing:\n\
    \     <interface nc:operation=\"merge\">\n       <name>fastethernet-1/0</name>\n\
    \       <type>ianaift:tunnel</type>\n     </interface>\n   then the server will\
    \ reply with an \"invalid-value\" error, since the\n   new type does not match\
    \ the name.\n"
- title: E.2.  Router with Arbitrary Interface Names
  contents:
  - "E.2.  Router with Arbitrary Interface Names\n   In this example, a router has\
    \ support for 4 line cards, each with 8\n   ports.  The slots for the cards are\
    \ physically numbered from 0 to 3,\n   and the ports on each card from 0 to 7.\
    \  Each card has Fast Ethernet\n   or Gigabit Ethernet ports.\n   The device-specific\
    \ names for these physical interfaces are\n   \"fastethernet-N/M\" or \"gigabitethernet-N/M\"\
    .\n   The implementation does not restrict the user-controlled interface\n   names.\
    \  This allows an operator to more easily apply the interface\n   configuration\
    \ to a different interface.  However, the additional\n   level of indirection\
    \ also makes it a bit more complex to map\n   interface names found in other protocols\
    \ to configuration entries.\n   The NETCONF server advertises the \"arbitrary-names\"\
    \ feature in the\n   <hello> message.\n   Physical interfaces are configured as\
    \ in Appendix E.1.\n   An operator can configure a VLAN interface by sending an\n\
    \   <edit-config> containing:\n     <interface nc:operation=\"create\">\n    \
    \   <name>acme-interface</name>\n       <type>ianaift:l2vlan</type>\n       <vlan:base-interface>fastethernet-1/0</vlan:base-interface>\n\
    \       <vlan:vlan-id>5</vlan:vlan-id>\n     </interface>\n   If necessary, the\
    \ operator can move the configuration named\n   \"acme-interface\" over to a different\
    \ physical interface with an\n   <edit-config> containing:\n     <interface nc:operation=\"\
    merge\">\n       <name>acme-interface</name>\n       <vlan:base-interface>fastethernet-1/1</vlan:base-interface>\n\
    \     </interface>\n"
- title: E.3.  Ethernet Switch with Restricted Interface Names
  contents:
  - "E.3.  Ethernet Switch with Restricted Interface Names\n   In this example, an\
    \ Ethernet switch has a number of ports, each\n   identified by a simple port\
    \ number.\n   The device-specific names for the physical interfaces are numbers\n\
    \   that match the physical port number.\n   An operator can configure a physical\
    \ interface by sending an\n   <edit-config> containing:\n     <interface nc:operation=\"\
    create\">\n       <name>6</name>\n     </interface>\n   When the server processes\
    \ this request, it will set the leaf \"type\"\n   to \"ianaift:ethernetCsmacd\"\
    .  Thus, if the client performs a\n   <get-config> right after the <edit-config>\
    \ above, it will get:\n     <interface>\n       <name>6</name>\n       <type>ianaift:ethernetCsmacd</type>\n\
    \     </interface>\n"
- title: E.4.  Generic Host with Restricted Interface Names
  contents:
  - "E.4.  Generic Host with Restricted Interface Names\n   In this example, a generic\
    \ host has interfaces named by the kernel.\n   The system identifies the physical\
    \ interface by the name assigned by\n   the operating system to the interface.\n\
    \   The name of a VLAN interface is restricted to the form\n   \"<physical-interface-name>:<vlan-number>\"\
    .\n   The NETCONF server does not advertise the \"arbitrary-names\" feature\n\
    \   in the <hello> message.\n   An operator can configure an interface by sending\
    \ an <edit-config>\n   containing:\n     <interface nc:operation=\"create\">\n\
    \       <name>eth8</name>\n     </interface>\n   When the server processes this\
    \ request, it will set the leaf \"type\"\n   to \"ianaift:ethernetCsmacd\".  Thus,\
    \ if the client performs a\n   <get-config> right after the <edit-config> above,\
    \ it will get:\n     <interface>\n       <name>eth8</name>\n       <type>ianaift:ethernetCsmacd</type>\n\
    \     </interface>\n   The client can configure a VLAN interface by sending an\
    \ <edit-config>\n   containing:\n     <interface nc:operation=\"create\">\n  \
    \     <name>eth8:5</name>\n       <type>ianaift:l2vlan</type>\n       <vlan:base-interface>eth8</vlan:base-interface>\n\
    \       <vlan:vlan-id>5</vlan:vlan-id>\n     </interface>\n"
- title: E.5.  Generic Host with Arbitrary Interface Names
  contents:
  - "E.5.  Generic Host with Arbitrary Interface Names\n   In this example, a generic\
    \ host has interfaces named by the kernel.\n   The system identifies the physical\
    \ interface by the name assigned by\n   the operating system to the interface.\n\
    \   The implementation does not restrict the user-controlled interface\n   names.\
    \  This allows an operator to more easily apply the interface\n   configuration\
    \ to a different interface.  However, the additional\n   level of indirection\
    \ also makes it a bit more complex to map\n   interface names found in other protocols\
    \ to configuration entries.\n   The NETCONF server advertises the \"arbitrary-names\"\
    \ feature in the\n   <hello> message.\n   Physical interfaces are configured as\
    \ in Appendix E.4.\n   An operator can configure a VLAN interface by sending an\n\
    \   <edit-config> containing:\n     <interface nc:operation=\"create\">\n    \
    \   <name>acme-interface</name>\n       <type>ianaift:l2vlan</type>\n       <vlan:base-interface>eth8</vlan:base-interface>\n\
    \       <vlan:vlan-id>5</vlan:vlan-id>\n     </interface>\n   If necessary, the\
    \ operator can move the configuration named\n   \"acme-interface\" over to a different\
    \ physical interface with an\n   <edit-config> containing:\n     <interface nc:operation=\"\
    merge\">\n       <name>acme-interface</name>\n       <vlan:base-interface>eth3</vlan:base-interface>\n\
    \     </interface>\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Martin Bjorklund\n   Tail-f Systems\n   EMail: mbj@tail-f.com\n"
