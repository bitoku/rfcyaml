- title: __initial_text__
  contents:
  - '                A Media Type for Reputation Interchange

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines the format of reputation response data\n \
    \  (\"reputons\"), the media type for packaging it, and definition of a\n   registry\
    \ for the names of reputation applications and response sets.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7071.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Terminology and Definitions .....................................3\n  \
    \    2.1. Reputon ....................................................3\n    \
    \  2.2. Key Words ..................................................3\n      2.3.\
    \ Other Definitions ..........................................3\n   3. Description\
    \ .....................................................3\n      3.1. Reputon Attributes\
    \ .........................................4\n   4. Ratings .........................................................5\n\
    \   5. Caching .........................................................5\n  \
    \ 6. Reputons ........................................................6\n    \
    \  6.1. Syntax .....................................................6\n      6.2.\
    \ Formal Definition ..........................................6\n           6.2.1.\
    \ Imported JSON Terms .................................6\n           6.2.2. Reputon\
    \ Structure ...................................7\n      6.3. Examples ...................................................9\n\
    \   7. IANA Considerations ............................................11\n  \
    \    7.1. application/reputon+json Media Type Registration ..........11\n    \
    \  7.2. Reputation Applications Registry ..........................13\n   8. Security\
    \ Considerations ........................................15\n   9. References\
    \ .....................................................15\n      9.1. Normative\
    \ References ......................................15\n      9.2. Informative\
    \ References ....................................15\n   Appendix A. Acknowledgments\
    \ .......................................16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines a data object for use when answering\
    \ a\n   reputation query.  It also defines a media type to carry the response\n\
    \   set data when using a transport method that follows the media type\n   framework,\
    \ such as the query method based on the HyperText Transfer\n   Protocol (HTTP)\
    \ defined in [RFC7072].  Any future query methods that\n   might be developed\
    \ are expected to use the same data object.\n   Also included is the specification\
    \ for an IANA registry to contain\n   definitions and symbolic names for known\
    \ reputation applications and\n   corresponding response sets.\n"
- title: 2.  Terminology and Definitions
  contents:
  - "2.  Terminology and Definitions\n   This section defines terms used in the rest\
    \ of the document.\n"
- title: 2.1.  Reputon
  contents:
  - "2.1.  Reputon\n   A \"reputon\" is a single independent object containing reputation\n\
    \   information.  A particular query about a subject of interest will\n   receive\
    \ one or more reputons in response, depending on the nature of\n   the data collected\
    \ and reported by the server.\n"
- title: 2.2.  Key Words
  contents:
  - "2.2.  Key Words\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [KEYWORDS].\n"
- title: 2.3.  Other Definitions
  contents:
  - "2.3.  Other Definitions\n   Other terms of importance in this document are defined\
    \ in [RFC7070],\n   the base document in this document series.\n"
- title: 3.  Description
  contents:
  - "3.  Description\n   The meta-format selected for the representation of a reputon\
    \ is\n   JavaScript Object Notation (JSON), defined in [JSON].  Accordingly, a\n\
    \   new media type, \"application/reputon+json\", is defined for the JSON\n  \
    \ representation of reputational data, typically in response to a\n   client making\
    \ a request for such data about some subject.  This media\n   type takes no parameters.\n\
    \   The body of the media type consists of a JSON document that contains\n   the\
    \ reputation information requested.  A detailed description of the\n   expected\
    \ structure of the reply is provided below.\n   The media type comprises a single\
    \ member indicating the name of the\n   application context (see Section 5.1 of\
    \ [RFC7070]) in which the\n   reputational data are being returned.  The application\
    \ name refers to\n   a registration as described in Section 7.2, which defines\
    \ the valid\n   assertions and any extensions that might also be valid (i.e.,\
    \ the\n   response set) for that application.\n"
- title: 3.1.  Reputon Attributes
  contents:
  - "3.1.  Reputon Attributes\n   The key pieces of data found in a reputon for all\
    \ reputation\n   applications are defined as follows:\n   rater:  The identity\
    \ of the entity aggregating, computing, and\n      providing the reputation information,\
    \ typically expressed as a DNS\n      domain name.\n   assertion:  A key word\
    \ indicating the specific assertion or claim\n      being rated.\n   rated:  The\
    \ identity of the entity being rated.  The nature of this\n      field is application\
    \ specific; it could be domain names, email\n      addresses, driver's license\
    \ numbers, or anything that uniquely\n      identifies the entity being rated.\
    \  Documents that define specific\n      reputation applications are required\
    \ to define syntax and\n      semantics for this field.\n   rating:  The overall\
    \ rating score for that entity, expressed as a\n      floating-point number between\
    \ 0.0 and 1.0 inclusive.  See\n      Section 4 for discussion.\n   The following\
    \ are OPTIONAL for all applications, to be used in\n   contexts where they are\
    \ appropriate:\n   confidence:  the level of certainty the reputation provider\
    \ has that\n      the value presented is appropriate, expressed as a floating-point\n\
    \      number between 0.0 and 1.0 inclusive.\n   normal-rating:  An indication\
    \ of what the reputation provider would\n      normally expect as a rating for\
    \ the subject.  This allows the\n      client to note that the current rating\
    \ is or is not in line with\n      expectations.\n   sample-size:  The number\
    \ of data points used to compute the rating,\n      possibly an approximation.\
    \  Expressed as an unsigned 64-bit\n      integer.  Consumers can assume that\
    \ the count refers to distinct\n      data points rather than a count of aggregations\
    \ (for example,\n      individual votes rather than aggregated vote counts) unless\
    \ it is\n      specified out-of-band that some other interpretation is more\n\
    \      appropriate.  The units are deliberately not normatively\n      specified,\
    \ since not all reputation service providers will collect\n      data the same\
    \ way.\n   generated:  A timestamp indicating when this value was generated.\n\
    \      Expressed as the number of seconds since January 1, 1970 00:00\n      UTC.\n\
    \   expires:  A timestamp indicating a time beyond which the score\n      reported\
    \ is likely not to be valid.  Expressed as the number of\n      seconds since\
    \ January 1, 1970 00:00 UTC.  See Section 5 for\n      discussion.\n   A particular\
    \ application that registers itself with IANA (per\n   Section 7.2, below) can\
    \ define additional application-specific\n   attribute/value pairs beyond these\
    \ standard ones.\n   An application service provider might operate with an enhanced\
    \ form\n   of common services, which might in turn prompt development and\n  \
    \ reporting of specialized reputation information.  The details of the\n   enhancements\
    \ and specialized information are beyond the scope of this\n   document, except\
    \ that the underlying JSON syntax is extensible for\n   encoding such provider-specific\
    \ information.\n"
- title: 4.  Ratings
  contents:
  - "4.  Ratings\n   The score presented as the value in the rating attribute appears\
    \ as a\n   floating-point value between 0.0 and 1.0 inclusive.  The intent is\n\
    \   that the definition of an assertion within an application will\n   declare\
    \ what the anchor values 0.0 and 1.0 specifically mean.\n   Generally speaking,\
    \ 1.0 implies full agreement with the assertion,\n   while 0.0 indicates no support\
    \ for the assertion.\n   The definition will also specify the type of scale in\
    \ use when\n   generating scores, to which all reputation service providers for\
    \ that\n   application space must adhere.  Further discussion can be found in\n\
    \   [RFC7070].\n"
- title: 5.  Caching
  contents:
  - "5.  Caching\n   A reputon can contain an \"expires\" field indicating a timestamp\
    \ after\n   which the client SHOULD NOT use the rating it contains and SHOULD\n\
    \   issue a new query.\n   This specification does not mandate any caching of\
    \ ratings on the\n   part of the client, but there are obvious operational benefits\
    \ to\n   doing so.  In the context of reputation, a cached (and hence, stale)\n\
    \   rating can cause desirable traffic to be identified as undesirable,\n   or\
    \ vice versa.\n   Reputation data is typically most volatile when the subject\
    \ of the\n   reputation is young.  Accordingly, if a service chooses to include\n\
    \   expiration timestamps as part a reply, these values SHOULD be lower\n   for\
    \ subjects about which little data has been collected.\n"
- title: 6.  Reputons
  contents:
  - '6.  Reputons

    '
- title: 6.1.  Syntax
  contents:
  - "6.1.  Syntax\n   A reputon expressed in JSON is a set of key-value pairs, where\
    \ the\n   keys are the names of particular attributes that comprise a reputon\n\
    \   (as listed above, or as provided with specific applications), and\n   values\
    \ are the content associated with those keys.  The set of keys\n   that make up\
    \ a reputon within a given application are known as that\n   application's \"\
    response set\".\n   A reputon object typically contains a reply corresponding\
    \ to the\n   assertion for which a client made a specific request.  For example,\
    \ a\n   client asking for assertion \"sends-spam\" about domain \"example.com\"\
    \n   would expect a reply consisting of a reputon making a \"sends-spam\"\n  \
    \ assertion about \"example.com\" and nothing more.  If a client makes a\n   request\
    \ about a subject but does not specify an assertion of\n   interest, the server\
    \ can return reputons about any assertion for\n   which it has data; in effect,\
    \ the client has asked for any available\n   information about the subject.  A\
    \ client that receives an irrelevant\n   reputon simply ignores it.\n   An empty\
    \ reputon is an acknowledgment by the server that the request\n   has been received,\
    \ and serves as a positive indication that the\n   server does not have the information\
    \ requested.  This is semantically\n   equivalent to returning a reputon with\
    \ a \"sample-size\" of zero.\n"
- title: 6.2.  Formal Definition
  contents:
  - "6.2.  Formal Definition\n   [JSON] defines the structure of JSON objects and\
    \ arrays using a set\n   of primitive elements.  Those elements will be used to\
    \ describe the\n   JSON structure of a reputation object.\n"
- title: 6.2.1.  Imported JSON Terms
  contents:
  - "6.2.1.  Imported JSON Terms\n   OBJECT:  a JSON object, defined in Section 2.2\
    \ of [JSON]\n   MEMBER:  a member of a JSON object, defined in Section 2.2 of\
    \ [JSON]\n   MEMBER-NAME:  the name of a MEMBER, defined as a \"string\" in\n\
    \      Section 2.2 of [JSON]\n   MEMBER-VALUE:  the value of a MEMBER, defined\
    \ as a \"value\" in\n      Section 2.2 of [JSON]\n   ARRAY:  an array, defined\
    \ in Section 2.3 of [JSON]\n   ARRAY-VALUE:  an element of an ARRAY, defined in\
    \ Section 2.3 of\n      [JSON]\n   NUMBER:  a \"number\" as defined in Section\
    \ 2.4 of [JSON]\n   INTEGER:  an \"integer\" as defined in Section 2.4 of [JSON]\n\
    \   STRING:  a \"string\" as defined in Section 2.5 of [JSON]\n"
- title: 6.2.2.  Reputon Structure
  contents:
  - "6.2.2.  Reputon Structure\n   Using the above terms for the JSON structures,\
    \ the syntax of a\n   reputation object is defined as follows:\n   reputation-object:\
    \  an OBJECT containing a MEMBER reputation-context\n      and a MEMBER reputon-list\n\
    \   reputation-context:  a MEMBER with MEMBER-NAME \"application\" and\n     \
    \ MEMBER-VALUE a STRING (see Section 3)\n   reputon-list:  a MEMBER with MEMBER-NAME\
    \ \"reputons\" and MEMBER-VALUE\n      a reputon-array\n   reputon-array:  an\
    \ ARRAY, where each ARRAY-VALUE is a reputon\n   reputon:  an OBJECT, where each\
    \ MEMBER is a reputon-element\n   reputon-element:  one of the following, defined\
    \ below: rater-value,\n      assertion-value, rated-value, rating-value, conf-value,\
    \ normal-\n      value, sample-value, gen-value, expire-value, ext-value; note\
    \ the\n      following:\n      *  The order of reputon-element members is not\
    \ significant.\n      *  A specific reputon-element MUST NOT appear more than\
    \ once.\n      *  rater-value, assertion-value, rated-value, and rating-value\
    \ are\n         REQUIRED.\n   rater-value:  a MEMBER with MEMBER-NAME \"rater\"\
    \ and MEMBER-VALUE a\n      STRING (see \"rater\" in Section 3.1)\n   assertion-value:\
    \  a MEMBER with MEMBER-NAME \"assertion\" and MEMBER-\n      VALUE a STRING (see\
    \ \"assertion\" in Section 3.1)\n   rated-value:  a MEMBER with MEMBER-NAME \"\
    rated\" and MEMBER-VALUE a\n      STRING (see \"rated\" in Section 3.1)\n   rating-value:\
    \  a MEMBER with MEMBER-NAME \"rating\" and MEMBER-VALUE a\n      NUMBER between\
    \ 0.0 and 1.0 inclusive (see \"rating\" in\n      Section 3.1); the number SHOULD\
    \ NOT not have more than three\n      decimal places of precision\n   conf-value:\
    \  a MEMBER with MEMBER-NAME \"confidence\" and MEMBER-VALUE\n      a NUMBER between\
    \ 0.0 and 1.0 inclusive (see \"confidence\" in\n      Section 3.1); the number\
    \ SHOULD NOT not have more than three\n      decimal places of precision\n   normal-value:\
    \  a MEMBER with MEMBER-NAME \"normal-rating\" and MEMBER-\n      VALUE a NUMBER\
    \ between 0.0 and 1.0 inclusive (see \"normal\" in\n      Section 3.1); the number\
    \ SHOULD NOT not have more than three\n      decimal places of precision\n   sample-value:\
    \  a MEMBER with MEMBER-NAME \"sample-size\" and MEMBER-\n      VALUE a non-negative\
    \ INTEGER (see \"sample-size\" in \"normal\" in\n      Section 3.1)\n   gen-value:\
    \  a MEMBER with MEMBER-NAME \"generated\" and MEMBER-VALUE a\n      non-negative\
    \ INTEGER (see \"generated\" in Section 3.1)\n   expire-value:  a MEMBER with\
    \ MEMBER-NAME \"expires\" and MEMBER-VALUE a\n      non-negative INTEGER (see\
    \ \"expires\" in Section 3.1)\n   ext-value:  a MEMBER, for extension purposes;\
    \ MEMBER-NAME and MEMBER-\n      VALUE will be defined in separate application\
    \ registrations\n"
- title: 6.3.  Examples
  contents:
  - "6.3.  Examples\n   The following simple example:\n     Content-Type: application/reputon+json\n\
    \     {\n       \"application\": \"baseball\",\n       \"reputons\": [\n     \
    \    {\n           \"rater\": \"RatingsRUs.example.com\",\n           \"assertion\"\
    : \"is-good\",\n           \"rated\": \"Alex Rodriguez\",\n           \"rating\"\
    : 0.99,\n           \"sample-size\": 50000\n         }\n       ]\n     }\n   ...indicates\
    \ to the client that \"RatingsRUs.example.com\" consolidated\n   50000 data points\
    \ (perhaps from everyone in Yankee Stadium) and\n   concluded that Alex Rodriguez\
    \ is very, very good (0.99) at something.\n   It doesn't tell us what he's good\
    \ at, and while it might be playing\n   baseball, it could just as well be paying\
    \ his taxes on time.\n   A more sophisticated usage would define a baseball application\
    \ with a\n   response set of specific assertions, so that this example:\n    \
    \ Content-Type: application/reputon+json\n     {\n       \"application\": \"baseball\"\
    ,\n       \"reputons:\" [\n         {\n           \"rater\": \"baseball-reference.example.com\"\
    ,\n           \"assertion\": \"hits-for-power\",\n           \"rated\": \"Alex\
    \ Rodriguez\",\n           \"rating\": 0.99,\n           \"sample-size\": 50000\n\
    \         }\n       ]\n     }\n   ...would indicate that 50000 fans polled by\
    \ the entity baseball-\n   reference.example.com rate Alex Rodriguez very highly\
    \ in hitting for\n   power, whereas this example:\n     Content-Type: application/reputon+json\n\
    \     {\n       \"application\": \"baseball\",\n       \"reputons\": [\n     \
    \    {\n           \"rater\": \"baseball-reference.example.com\",\n          \
    \ \"assertion\": \"strong-hitter\",\n           \"rated\": \"Alex Rodriguez\"\
    ,\n           \"rating\": 0.4,\n           \"confidence\": 0.2,\n           \"\
    sample-size\": 50000\n         }\n       ]\n     }\n   ...would indicate that\
    \ a similar poll indicated a somewhat weak\n   consensus that Alex Rodriguez tends\
    \ to fail in critical batting\n   situations during baseball games.\n   The following\
    \ is an example reputon generated using this schema,\n   including the media type\
    \ definition line that identifies a specific\n   reputation application context.\
    \  Here, reputation agent\n   \"rep.example.net\" is asserting within the context\
    \ of the \"email-id\"\n   application (see [RFC7073]) that \"example.com\" appears\
    \ to be\n   associated with spam 1.2% of the time, based on just short of 17\n\
    \   million messages analyzed or reported to date.  The \"email-id\"\n   application\
    \ has declared the extension key \"email-id-identity\" to\n   indicate how the\
    \ subject identifier was used in the observed data,\n   establishing some more-specific\
    \ semantics for the \"rating\" value.  In\n   this case, the extension is used\
    \ to show the identity \"example.com\",\n   the subject of the query, is extracted\
    \ from the analyzed messages\n   using the DomainKeys Identified Mail [DKIM] \"\
    d=\" parameter for\n   messages where signatures validate.  The reputation agent\
    \ is 95%\n   confident of this result.  A second reputon is also present\n   indicating\
    \ similar information for the same domain as it is used in\n   the context of\
    \ Sender Policy Framework [SPF] evaluations.  (See\n   [RFC7073] for details about\
    \ the registered email identifiers\n   application.)\n     Content-Type: application/reputon+json\n\
    \     {\n       \"application\": \"email-id\",\n       \"reputons\": [\n     \
    \    {\n           \"rater\": \"rep.example.net\",\n           \"assertion\":\
    \ \"spam\",\n           \"identity\": \"dkim\",\n           \"rated\": \"example.com\"\
    ,\n           \"confidence\": 0.95,\n           \"rating\": 0.012,\n         \
    \  \"sample-size\": 16938213,\n           \"updated\": 1317795852\n         },\n\
    \         {\n           \"rater\": \"rep.example.net\",\n           \"assertion\"\
    : \"spam\",\n           \"identity\": \"spf\",\n           \"rated\": \"example.com\"\
    ,\n           \"confidence\": 0.98,\n           \"rating\": 0.023,\n         \
    \  \"sample-size\": 16938213,\n           \"updated\": 1317795852\n         }\n\
    \       ]\n     }\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document presents two actions for IANA -- namely,\
    \ the creation\n   of the new media type \"application/reputon+json\" and the\
    \ creation of\n   a registry for reputation application types.  Another document\
    \ in\n   this series creates an initial registry entry for the latter.\n"
- title: 7.1.  application/reputon+json Media Type Registration
  contents:
  - "7.1.  application/reputon+json Media Type Registration\n   This section provides\
    \ the media type registration application from\n   [MIME-REG] for processing by\
    \ IANA.\n   To:  media-types@iana.org\n   Subject:  Registration of media type\
    \ application/reputon+json\n   Type name:  application\n   Subtype name:  reputon+json\n\
    \   Required parameters:  none\n   Optional parameters:  none\n   Encoding considerations:\
    \  \"7bit\" encoding is sufficient and is used\n      to maintain readability\
    \ when viewed by non-MIME mail readers.\n   Security considerations:  See Section\
    \ 8 of [RFC7071].\n   Interoperability considerations:  Implementers may encounter\
    \ \"app\"\n      values, attribute/value pairs, or response set items that they\
    \ do\n      not support, which are to be ignored.\n   Published specification:\
    \  [RFC7071]\n   Applications that use this media type:  Any application that\
    \ wishes\n      to query a service that provides reputation data using the form\n\
    \      defined in [RFC7072].  The example application is one that\n      provides\
    \ reputation data about DNS domain names and other\n      identifiers found in\
    \ email messages.\n   Fragment identifier considerations:  N/A\n   Additional\
    \ information:  The value of the \"app\" parameter is\n      registered with IANA.\n\
    \      Deprecated alias names for this type:  N/A\n      Magic number(s):  N/A\n\
    \      File extension(s):  N/A\n      Macintosh file type code(s):  N/A\n   Person\
    \ and email address to contact for further information:\n      Murray S. Kucherawy\
    \ <superuser@gmail.com>\n   Intended usage:  COMMON\n   Restrictions on usage:\
    \  N/A\n   Author:\n      Nathaniel Borenstein\n      Murray S. Kucherawy\n  \
    \ Change controller:  IESG\n   Provisional registration?:  no\n"
- title: 7.2.  Reputation Applications Registry
  contents:
  - "7.2.  Reputation Applications Registry\n   IANA has created the \"Reputation\
    \ Applications\" registry.  This\n   registry contains names of applications used\
    \ with the\n   application/reputon+json media type (and other media types that\
    \ carry\n   reputons), as defined by this document.\n   New registrations or updates\
    \ are published in accordance with either\n   the \"IETF Review\" or \"Specification\
    \ Required\" guidelines as described\n   in [IANA-CONSIDERATIONS].\n   New registrations\
    \ and updates are to contain the following\n   information:\n   1.  Symbolic name\
    \ of the application being registered or updated.\n       Valid names conform\
    \ to the ABNF construction \"token\" as defined\n       in Multipurpose Internet\
    \ Mail Extensions (MIME) Part One [MIME]\n   2.  Short description of the application\
    \ (i.e., the class of entity\n       about which it reports reputation data)\n\
    \   3.  The document in which the application is defined\n   4.  New or updated\
    \ status, which is to be one of:\n       current:  The application is in current\
    \ use\n       deprecated:  The application is in current use but its use is\n\
    \             discouraged\n       historic:  The application is no longer in current\
    \ use\n   A specification for an application space needs to be specific and\n\
    \   clear enough to allow interoperability, and include at least the\n   following\
    \ details:\n   o  The application's symbolic name, as it appears in the registration\n\
    \      (see above)\n   o  A description of the subject of a query within this\
    \ reputation,\n      and a legal syntax for the same\n   o  An optional table\
    \ of query parameters that are specific to this\n      application; each table\
    \ entry must include:\n      Name: Name of the query parameter\n      Status:\
    \  (as above)\n      Description:  A short description of the purpose of this\
    \ parameter\n      Syntax:  A reference to a description of valid syntax for the\n\
    \            parameter's value\n      Required:  \"yes\" if the parameter is mandatory;\
    \ \"no\" otherwise\n   o  A list of one or more assertions registered within this\n\
    \      application; each table entry is to include:\n      Name: Name of the assertion\n\
    \      Description:  A short description of the assertion, with specific\n   \
    \         meanings for values of 0.0 and 1.0\n      Scale:  A short description\
    \ of the scale used in computing the\n            value (see Section 4 of this\
    \ document)\n   o  An optional list of one or more response set extension keys\
    \ for\n      use within this application; each table entry is to include:\n  \
    \    Name: Name of the extension key\n      Description:  A short description\
    \ of the key's intended meaning\n      Syntax:  A description of valid values\
    \ that can appear associated\n            with the key\n   The names of attributes\
    \ registered should be prefixed by the name of\n   the application itself (e.g.,\
    \ the \"foo\" application registering a\n   \"bar\" attribute should call it \"\
    foo-bar\") to avoid namespace\n   collisions.\n   For registrations qualifying\
    \ under \"Specification Required\" rules,\n   the Designated Expert [IANA-CONSIDERATIONS]\
    \ should confirm the\n   document meets the minima described above and otherwise\
    \ looks\n   generally acceptable, and then approve the registration.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This document is primarily an IANA action registering\
    \ a media type.\n   It does not describe a new protocol that might introduce security\n\
    \   considerations.\n   Discussion of the security and operational impacts of\
    \ using\n   reputation services in general can be found throughout\n   [CONSIDERATIONS].\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [JSON]     Crockford, D., \"The application/json\
    \ Media Type for\n              JavaScript Object Notation (JSON)\", RFC 4627,\
    \ July 2006.\n   [KEYWORDS] Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC7070]\
    \  Borenstein, N., Kucherawy, M., and A. Sullivan, \"An\n              Architecture\
    \ for Reputation Reporting\", RFC 7070, November\n              2013.\n   [RFC7072]\
    \  Borenstein, N. and M. Kucherawy, \"A Reputation Query\n              Protocol\"\
    , RFC 7072, November 2013.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [CONSIDERATIONS]\n              Kucherawy, M.,\
    \ \"Operational Considerations Regarding\n              Reputation Services\"\
    , Work in Progress, May 2013.\n   [DKIM]     Crocker, D., Ed., Hansen, T., Ed.,\
    \ and M. Kucherawy, Ed.,\n              \"DomainKeys Identified Mail (DKIM) Signatures\"\
    , STD 76,\n              RFC 6376, September 2011.\n   [IANA-CONSIDERATIONS]\n\
    \              Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n   \
    \           IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n       \
    \       May 2008.\n   [MIME-REG] Freed, N., Klensin, J., and T. Hansen, \"Media\
    \ Type\n              Specifications and Registration Procedures\", BCP 13, RFC\n\
    \              6838, January 2013.\n   [MIME]     Freed, N. and N. Borenstein,\
    \ \"Multipurpose Internet Mail\n              Extensions (MIME) Part One: Format\
    \ of Internet Message\n              Bodies\", RFC 2045, November 1996.\n   [RFC7073]\
    \  Borenstein, N. and M. Kucherawy, \"A Reputation Response\n              Set\
    \ for Email Identifiers\", RFC 7073, November 2013.\n   [SPF]      Wong, M. and\
    \ W. Schlitt, \"Sender Policy Framework (SPF)\n              for Authorizing Use\
    \ of Domains in E-Mail, Version 1\", RFC\n              4408, April 2006.\n"
- title: Appendix A.  Acknowledgments
  contents:
  - "Appendix A.  Acknowledgments\n   The authors wish to acknowledge the contributions\
    \ of the following to\n   this specification: Frank Ellermann, Tony Hansen, Jeff\
    \ Hodges, Simon\n   Hunt, John Levine, David F. Skoll, and Mykyta Yevstifeyev.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Nathaniel Borenstein\n   Mimecast\n   203 Crescent St.,\
    \ Suite 303\n   Waltham, MA 02453\n   USA\n   Phone: +1 781 996 5340\n   EMail:\
    \ nsb@guppylake.com\n   Murray S. Kucherawy\n   270 Upland Drive\n   San Francisco,\
    \ CA 94127\n   USA\n   EMail: superuser@gmail.com\n"
