- title: __initial_text__
  contents:
  - '                  MPLS using LDP and ATM VC Switching

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Multiprotocol Label Switching (MPLS) Architecture [1] discusses\
    \ a\n   way in which Asynchronous Transfer Mode (ATM) switches may be used as\n\
    \   Label Switching Routers.  The ATM switches run network layer routing\n   algorithms\
    \ (such as Open Shortest Path First (OSPF), Intermediate\n   System to Intermediate\
    \ System (IS-IS), etc.), and their data\n   forwarding is based on the results\
    \ of these routing algorithms.  No\n   ATM-specific routing or addressing is needed.\
    \  ATM switches used in\n   this way are known as ATM-LSRs (Label Switching Routers).\n\
    \   This document extends and clarifies the relevant portions of [1] and\n   [2]\
    \ by specifying in more detail the procedures which to be used when\n   distributing\
    \ labels to or from ATM-LSRs, when those labels represent\n   Forwarding Equivalence\
    \ Classes (FECs, see [1]) for which the routes\n   are determined on a hop-by-hop\
    \ basis by network layer routing\n   algorithms.\n   This document also specifies\
    \ the MPLS encapsulation to be used when\n   sending labeled packets to or from\
    \ ATM-LSRs, and in that respect is a\n   companion document to [3].\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n    1      Introduction  ...........................................\
    \   2\n    2      Specification of Requirements  ..........................  \
    \ 3\n    3      Definitions  ............................................   3\n\
    \    4      Special Characteristics of ATM Switches  ................   4\n  \
    \  5      Label Switching Control Component for ATM  ..............   5\n    6\
    \      Hybrid Switches (Ships in the Night)  ...................   5\n    7  \
    \    Use of  VPI/VCIs  .......................................   5\n    7.1  \
    \  Direct Connections  .....................................   6\n    7.2    Connections\
    \ via an ATM VP  ..............................   7\n    7.3    Connections via\
    \ an ATM SVC  .............................   7\n    8      Label Distribution\
    \ and Maintenance Procedures  ..........   7\n    8.1    Edge LSR Behavior  ......................................\
    \   8\n    8.2    Conventional ATM Switches (non-VC-merge)  ...............  \
    \ 9\n    8.3    VC-merge-capable ATM Switches  ..........................  11\n\
    \    9      Encapsulation  ..........................................  12\n  \
    \ 10      TTL Manipulation  .......................................  13\n   11\
    \      Optional Loop Detection: Distributing Path Vectors  .....  15\n   11.1\
    \    When to Send Path Vectors Downstream  ...................  15\n   11.2  \
    \  When to Send Path Vectors Upstream  .....................  16\n   12      Security\
    \ Considerations  ................................  17\n   13      Intellectual\
    \ Property Considerations  ...................  17\n   14      References  .............................................\
    \  18\n   15      Acknowledgments  ........................................  18\n\
    \   16      Authors' Addresses  .....................................  18\n  \
    \ 17      Full Copyright Statement  ...............................  20\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The MPLS Architecture [1] discusses the way in which ATM\
    \ switches may\n   be used as Label Switching Routers.  The ATM switches run network\n\
    \   layer routing algorithms (such as OSPF, IS-IS, etc.), and their data\n   forwarding\
    \ is based on the results of these routing algorithms. No\n   ATM-specific routing\
    \ or addressing is needed.  ATM switches used in\n   this way are known as ATM-LSRs.\n\
    \   This document extends and clarifies the relevant portions of [1] and\n   [2]\
    \ by specifying in more detail the procedures which are to be used\n   for distributing\
    \ labels to or from ATM-LSRs, when those labels\n   represent Forwarding Equivalence\
    \ Classes (FECs, see [1]) for which\n   the routes are determined on a hop-by-hop\
    \ basis by network layer\n   routing algorithms.  The label distribution technique\
    \ described here\n   is referred to in [1] as \"downstream-on-demand\".  This\
    \ label\n   distribution technique MUST be used by ATM-LSRs that are not capable\n\
    \   of \"VC merge\" (defined in section 3), and is OPTIONAL for ATM-LSRs\n   that\
    \ are capable of VC merge.\n   This document does NOT specify the label distribution\
    \ techniques to\n   be used in the following cases:\n      -  the routes are explicitly\
    \ chosen before label distribution\n         begins, instead of being chosen on\
    \ a hop-by-hop basis as label\n         distribution proceeds,\n      -  the routes\
    \ are intended to diverge in any way from the routes\n         chosen by the conventional\
    \ hop-by-hop routing at any time,\n      -  the labels represent FECs that consist\
    \ of multicast packets,\n      -  the LSRs use \"VP merge\".\n   Further statements\
    \ made in this document about ATM-LSR label\n   distribution do not necessarily\
    \ apply in these cases.\n   This document also specifies the MPLS encapsulation\
    \ to be used when\n   sending labeled packets to or from ATM-LSRs, and in that\
    \ respect is a\n   companion document to [3].  The specified encapsulation is\
    \ to be used\n   for multicast or explicitly routed labeled packets as well.\n\
    \   This document uses terminology from [1].\n"
- title: 2. Specification of Requirements
  contents:
  - "2. Specification of Requirements\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119.\n"
- title: 3. Definitions
  contents:
  - "3. Definitions\n   A Label Switching Router (LSR) is a device which implements\
    \ the label\n   switching control and forwarding components described in [1].\n\
    \   A label switching controlled ATM (LC-ATM) interface is an ATM\n   interface\
    \ controlled by the label switching control component.  When\n   a packet traversing\
    \ such an interface is received, it is treated as a\n   labeled packet.  The packet's\
    \ top label is inferred either from the\n   contents of the VCI field or the combined\
    \ contents of the VPI and VCI\n   fields.  Any two LDP peers which are connected\
    \ via an LC-ATM\n   interface will use LDP negotiations to determine which of\
    \ these cases\n   is applicable to that interface.\n   An ATM-LSR is a LSR with\
    \ a number of LC-ATM interfaces which forwards\n   cells between these interfaces,\
    \ using labels carried in the VCI or\n   VPI/VCI field, without reassembling the\
    \ cells into frames before\n   forwarding.\n   A frame-based LSR is a LSR which\
    \ forwards complete frames between its\n   interfaces.  Note that such a LSR may\
    \ have zero, one or more LC-ATM\n   interfaces.\n   Sometimes a single box may\
    \ behave as an ATM-LSR with respect to\n   certain pairs of interfaces, but may\
    \ behave as a frame-based LSR with\n   respect to other pairs.  For example, an\
    \ ATM switch with an ethernet\n   interface may function as an ATM-LSR when forwarding\
    \ cells between\n   its LC-ATM interfaces, but may function as a frame-based LSR\
    \ when\n   forwarding frames from its ethernet to one of its LC-ATM interfaces.\n\
    \   In such cases, one can consider the two functions (ATM-LSR and\n   frame-based\
    \ LSR) as being coresident in a single box.\n   It is intended that an LC-ATM\
    \ interface be used to connect two ATM-\n   LSRs, or to connect an ATM-LSR to\
    \ a frame-based LSR.  The use of an\n   LC-ATM interface to connect two frame-based\
    \ LSRs is not considered in\n   this document.\n   An ATM-LSR domain is a set\
    \ of ATM-LSRs which are mutually\n   interconnected by LC-ATM interfaces.\n  \
    \ The Edge Set of an ATM-LSR domain is the set of frame-based LSRs\n   which are\
    \ connected to members of the domain by LC-ATM interfaces.  A\n   frame-based\
    \ LSR which is a member of an Edge Set of an ATM-LSR domain\n   may be called\
    \ an Edge LSR.\n   VC-merge is the process by which a switch receives cells on\
    \ several\n   incoming VCIs and transmits them on a single outgoing VCI without\n\
    \   causing the cells of different AAL5 PDUs to become interleaved.\n"
- title: 4. Special Characteristics of ATM Switches
  contents:
  - "4. Special Characteristics of ATM Switches\n   While the MPLS architecture permits\
    \ considerable flexibility in LSR\n   implementation, an ATM-LSR is constrained\
    \ by the capabilities of the\n   (possibly pre-existing) hardware and the restrictions\
    \ on such matters\n   as cell format imposed by ATM standards.  Because of these\n\
    \   constraints, some special procedures are required for ATM-LSRs.\n   Some of\
    \ the key features of ATM switches that affect their behavior\n   as LSRs are:\n\
    \      -  the label swapping function is performed on fields (the VCI\n      \
    \   and/or VPI) in the cell header; this dictates the size and\n         placement\
    \ of the label(s) in a packet.\n      -  multipoint-to-point and multipoint-to-multipoint\
    \ VCs are\n         generally not supported.  This means that most switches cannot\n\
    \         support 'VC-merge' as defined above.\n      -  there is generally no\
    \ capability to perform a 'TTL-decrement'\n         function as is performed on\
    \ IP headers in routers.\n   This document describes ways of applying label switching\
    \ to ATM\n   switches which work within these constraints.\n"
- title: 5. Label Switching Control Component for ATM
  contents:
  - "5. Label Switching Control Component for ATM\n   To support label switching an\
    \ ATM switch MUST implement the control\n   component of label switching.  This\
    \ consists primarily of label\n   allocation, distribution, and maintenance procedures.\
    \  Label binding\n   information is communicated by several mechanisms, notably\
    \ the Label\n   Distribution Protocol (LDP) [2].  This document imposes certain\n\
    \   requirements on the LDP.\n   This document considers only the case where the\
    \ label switching\n   control component uses information learned directly from\
    \ network\n   layer routing protocols.  It is presupposed that the switch\n  \
    \ participates as a peer in these protocols (e.g., OSPF, IS-IS).\n   In some cases,\
    \ LSRs make use of other protocols (e.g., RSVP, PIM,\n   BGP) to distribute label\
    \ bindings.  In these cases, an ATM-LSR would\n   need to participate in these\
    \ protocols.  However, these are not\n   explicitly considered in this document.\n\
    \   Support of label switching on an ATM switch does NOT require the\n   switch\
    \ to support the ATM control component defined by the ITU and\n   ATM Forum (e.g.,\
    \ UNI, PNNI).  An ATM-LSR may OPTIONALLY respond to\n   OAM cells.\n"
- title: 6. Hybrid Switches (Ships in the Night)
  contents:
  - "6. Hybrid Switches (Ships in the Night)\n   The existence of the label switching\
    \ control component on an ATM\n   switch does not preclude the ability to support\
    \ the ATM control\n   component defined by the ITU and ATM Forum on the same switch\
    \ and the\n   same interfaces.  The two control components, label switching and\
    \ the\n   ITU/ATM Forum defined, would operate independently.\n   Definition of\
    \ how such a device operates is beyond the scope of this\n   document.  However,\
    \ only a small amount of information needs to be\n   consistent between the two\
    \ control components, such as the portions\n   of the VPI/VCI space which are\
    \ available to each component.\n"
- title: 7. Use of  VPI/VCIs
  contents:
  - "7. Use of  VPI/VCIs\n   Label switching is accomplished by associating labels\
    \ with Forwarding\n   Equivalence Classes, and using the label value to forward\
    \ packets,\n   including determining the value of any replacement label.  See\
    \ [1]\n   for further details.  In an ATM-LSR, the label is carried in the\n \
    \  VPI/VCI field, or, when two ATM-LSRs are connected via an ATM\n   \"Virtual\
    \ Path\", in the VCI field.\n   Labeled packets MUST be transmitted using the\
    \ null encapsulation, as\n   defined in Section 6.1 of RFC 2684 [5].\n   In addition,\
    \ if two LDP peers are connected via an LC-ATM interface,\n   a non-MPLS connection,\
    \ capable of carrying unlabelled IP packets,\n   MUST be available.  This non-MPLS\
    \ connection is used to carry LDP\n   packets between the two peers, and MAY also\
    \ be used (but is not\n   required to be used) for other unlabeled packets (such\
    \ as OSPF\n   packets, etc.).  The LLC/SNAP encapsulation of RFC 2684 [5] MUST\
    \ be\n   used on the non-MPLS connection.\n   It SHOULD be possible to configure\
    \ an LC-ATM interface with\n   additional VPI/VCIs that are used to carry control\
    \ information or\n   non-labelled packets.  In that case, the VCI values MUST\
    \ NOT be in\n   the 0-32 range.  These may use either the null encapsulation,\
    \ as\n   defined in Section 6.1 of RFC 2684 [5], or the LLC/SNAP\n   encapsulation,\
    \ as defined in Section 5.1 of RFC 2684 [5].\n"
- title: 7.1. Direct Connections
  contents:
  - "7.1. Direct Connections\n   We say that two LSRs are \"directly connected\" over\
    \ an LC-ATM\n   interface if all cells transmitted out that interface by one LSR\
    \ will\n   reach the other, and there are no ATM switches between the two LSRs.\n\
    \   When two LSRs are directly connected via an LC-ATM interface, they\n   jointly\
    \ control the allocation of VPIs/VCIs on the interface\n   connecting them.  They\
    \ may agree to use the VPI/VCI field to encode a\n   single label.\n   The default\
    \ VPI/VCI value for the non-MPLS connection is VPI 0, VCI\n   32.  Other values\
    \ can be configured, as long as both parties are\n   aware of the configured value.\n\
    \   A VPI/VCI value whose VCI part is in the range 0-32 inclusive MUST\n   NOT\
    \ be used as the encoding of a label.\n   With the exception of these reserved\
    \ values, the VPI/VCI values used\n   in the two directions of the link MAY be\
    \ treated as independent\n   spaces.\n   The allowable ranges of VCIs are communicated\
    \ through LDP.\n"
- title: 7.2. Connections via an ATM VP
  contents:
  - "7.2. Connections via an ATM VP\n   Sometimes it can be useful to treat two LSRs\
    \ as adjacent (in some\n   LSP) across an LC-ATM interface, even though the connection\
    \ between\n   them is made through an ATM \"cloud\" via an ATM Virtual Path. \
    \ In this\n   case, the VPI field is not available to MPLS, and the label MUST\
    \ be\n   encoded entirely within the VCI field.\n   In this case, the default\
    \ VCI value of the non-MPLS connection\n   between the LSRs is 32.  Other values\
    \ can be configured, as long as\n   both parties are aware of the configured value.\
    \  The VPI is set to\n   whatever is required to make use of the Virtual Path.\n\
    \   A VPI/VCI value whose VCI part is in the range 0-32 inclusive MUST\n   NOT\
    \ be used as the encoding of a label.\n   With the exception of these reserved\
    \ values, the VPI/VCI values used\n   in the two directions of the link MAY be\
    \ treated as independent\n   spaces.\n   The allowable ranges of VPI/VCIs are\
    \ communicated through LDP.  If\n   more than one VPI is used for label switching,\
    \ the allowable range of\n   VCIs may be different for each VPI, and each range\
    \ is communicated\n   through LDP.\n"
- title: 7.3. Connections via an ATM SVC
  contents:
  - "7.3. Connections via an ATM SVC\n   Sometimes it may be useful to treat two LSRs\
    \ as adjacent (in some\n   LSP) across an LC-ATM interface, even though the connection\
    \ between\n   them is made through an ATM \"cloud\" via a set of ATM Switched\
    \ Virtual\n   Circuits.\n   The current document does not specify the procedure\
    \ for handling this\n   case.  Such procedures can be found in [4].  The procedures\
    \ described\n   in [4] allow a VCID to be assigned to each such VC, and specify\
    \ how\n   LDP can be used used to bind a VCID to a FEC.  The top label of a\n\
    \   received packet would then be inferred (via a one-to-one mapping)\n   from\
    \ the virtual circuit on which the packet arrived.  There would\n   not be a default\
    \ VPI or VCI value for the non-MPLS connection.\n"
- title: 8. Label Distribution and Maintenance Procedures
  contents:
  - "8. Label Distribution and Maintenance Procedures\n   This document discusses\
    \ the use of \"downstream-on-demand\" label\n   distribution (see [1]) by ATM-LSRs.\
    \  These label distribution\n   procedures MUST be used by ATM-LSRs that do not\
    \ support VC-merge, and\n   MAY also be used by ATM-LSRs that do support VC-merge.\
    \  The\n   procedures differ somewhat in the two cases, however.  We therefore\n\
    \   describe the two scenarios in turn.  We begin by describing the\n   behavior\
    \ of members of the Edge Set of an ATM-LSR domain; these \"Edge\n   LSRs\" are\
    \ not themselves ATM-LSRs, and their behavior is the same\n   whether the domain\
    \ contains VC-merge capable LSRs or not.\n"
- title: 8.1. Edge LSR Behavior
  contents:
  - "8.1. Edge LSR Behavior\n   Consider a member of the Edge Set of an ATM-LSR domain.\
    \  Assume that,\n   as a result of its routing calculations, it selects an ATM-LSR\
    \ as the\n   next hop of a certain FEC, and that the next hop is reachable via\
    \ a\n   LC-ATM interface.  The Edge LSR uses LDP to request a label binding\n\
    \   for that FEC from the next hop.  The hop count field in the request\n   is\
    \ set to 1 (but see the next paragraph).  Once the Edge LSR receives\n   the label\
    \ binding information, it may use MPLS forwarding procedures\n   to transmit packets\
    \ in the specified FEC, using the specified label\n   as an outgoing label.  (Or\
    \ using the VPI/VCI that corresponds to the\n   specified VCID as the outgoing\
    \ label, if the VCID technique of [4] is\n   being used.)\n   Note: if the Edge\
    \ LSR's previous hop is using downstream-on-demand\n   label distribution to request\
    \ a label from the Edge LSR for a\n   particular FEC, and if the Edge LSR is not\
    \ merging the LSP from that\n   previous hop with any other LSP, and if the request\
    \ from the previous\n   hop has a hop count of h, then the hop count in the request\
    \ issued by\n   the Edge LSR should not be set to 1, but rather to h+1.\n   The\
    \ binding received by the edge LSR may contain a hop count, which\n   represents\
    \ the number of hops a packet will take to cross the ATM-LSR\n   domain when using\
    \ this label.  If there is a hop count associated\n   with the binding, the ATM-LSR\
    \ SHOULD adjust a data packet's TTL by\n   this amount before transmitting the\
    \ packet.  In any event, it MUST\n   adjust a data packet's TTL by at least one\
    \ before transmitting it.\n   The procedures for doing so (in the case of IP packets)\
    \ are specified\n   in section 10.  The procedures for encapsulating the packets\
    \ are\n   specified in section 9.\n   When a member of the Edge Set of the ATM-LSR\
    \ domain receives a label\n   binding request from an ATM-LSR, it allocates a\
    \ label, and returns\n   (via LDP) a binding containing the allocated label back\
    \ to the peer\n   that originated the request.  It sets the hop count in the binding\
    \ to\n   1.\n   When a routing calculation causes an Edge LSR to change the next\
    \ hop\n   for a particular FEC, and the former next hop was in the ATM-LSR\n \
    \  domain, the Edge LSR SHOULD notify the former next hop (via LDP) that\n   the\
    \ label binding associated with the FEC is no longer needed.\n"
- title: 8.2. Conventional ATM Switches (non-VC-merge)
  contents:
  - "8.2. Conventional ATM Switches (non-VC-merge)\n   When an ATM-LSR receives (via\
    \ LDP) a label binding request for a\n   certain FEC from a peer connected to\
    \ the ATM-LSR over a LC-ATM\n   interface, the ATM-LSR takes the following actions:\n\
    \      -  it allocates a label,\n      -  it requests (via LDP) a label binding\
    \ from the next hop for\n         that FEC;\n      -  it returns (via LDP) a binding\
    \ containing the allocated\n         incoming label back to the peer that originated\
    \ the request.\n   For purposes of this procedure, we define a maximum hop count\
    \ value\n   MAXHOP.  MAXHOP has a default value of 255, but may be configured\
    \ to\n   a different value.\n   The hop count field in the request that the ATM-LSR\
    \ sends (to the\n   next hop LSR) MUST be set to one more than the hop count field\
    \ in the\n   request that it received from the upstream LSR.  If the resulting\
    \ hop\n   count exceeds MAXHOP, the request MUST NOT be sent to the next hop,\n\
    \   and the ATM-LSR MUST notify the upstream neighbor that its binding\n   request\
    \ cannot be satisfied.\n   Otherwise, once the ATM-LSR receives the binding from\
    \ the next hop,\n   it begins using that label.\n   The ATM-LSR MAY choose to\
    \ wait for the request to be satisfied from\n   downstream before returning the\
    \ binding upstream.  This is a form of\n   \"ordered control\" (as defined in\
    \ [1] and [2]), in particular\n   \"ingress-initiated ordered control\".  In this\
    \ case, as long as the\n   ATM-LSR receives from downstream a hop count which\
    \ is greater than 0\n   and less than MAXHOP, it MUST increment the hop count\
    \ it receives\n   from downstream and MUST include the result in the binding it\
    \ returns\n   upstream.  However, if the hop count exceeds MAXHOP, a label binding\n\
    \   MUST NOT be passed upstream.  Rather, the upstream LDP peer MUST be\n   informed\
    \ that the requested label binding cannot be satisfied.  If\n   the hop count\
    \ received from downstream is 0, the hop count passed\n   upstream should also\
    \ be 0; this indicates that the actual hop count\n   is unknown.\n   Alternatively,\
    \ the ATM-LSR MAY return the binding upstream without\n   waiting for a binding\
    \ from downstream (\"independent\" control, as\n   defined in [1] and [2]).  In\
    \ this case, it specifies a hop count of 0\n   in the binding, indicating that\
    \ the true hop count is unknown.  The\n   correct value for hop count will be\
    \ returned later, as described\n   below.\n   Note that an ATM-LSR, or a member\
    \ of the edge set of an ATM-LSR\n   domain, may receive multiple binding requests\
    \ for the same FEC from\n   the same ATM-LSR.  It MUST generate a new binding\
    \ for each request\n   (assuming adequate resources to do so), and retain any\
    \ existing\n   binding(s).  For each request received, an ATM-LSR MUST also generate\n\
    \   a new binding request toward the next hop for the FEC.\n   When a routing\
    \ calculation causes an ATM-LSR to change the next hop\n   for a FEC, the ATM-LSR\
    \ MUST notify the former next hop (via LDP) that\n   the label binding associated\
    \ with the FEC is no longer needed.\n   When a LSR receives a notification that\
    \ a particular label binding is\n   no longer needed, the LSR MAY deallocate the\
    \ label associated with\n   the binding, and destroy the binding.  In the case\
    \ where an ATM-LSR\n   receives such notification and destroys the binding, it\
    \ MUST notify\n   the next hop for the FEC that the label binding is no longer\
    \ needed.\n   If a LSR does not destroy the binding, it may re-use the binding\
    \ only\n   if it receives a request for the same FEC with the same hop count as\n\
    \   the request that originally caused the binding to be created.\n   When a route\
    \ changes, the label bindings are re-established from the\n   point where the\
    \ route diverges from the previous route.   LSRs\n   upstream of that point are\
    \ (with one exception, noted below)\n   oblivious to the change.\n   Whenever\
    \ a LSR changes its next hop for a particular FEC, if the new\n   next hop is\
    \ reachable via an LC-ATM interface, then for each label\n   that it has bound\
    \ to that FEC, and distributed upstream, it MUST\n   request a new label binding\
    \ from the new next hop.\n   When an ATM-LSR receives a label binding for a particular\
    \ FEC from a\n   downstream neighbor, it may already have provided a corresponding\n\
    \   label binding for this FEC to an upstream neighbor, either because it\n  \
    \ is using independent control, or because the new binding from\n   downstream\
    \ is the result of a routing change.  In this case, unless\n   the hop count is\
    \ 0, it MUST extract the hop count from the new\n   binding and increment it by\
    \ one.  If the new hop count is different\n   from that which was previously conveyed\
    \ to the upstream neighbor\n   (including the case where the upstream neighbor\
    \ was given the value\n   'unknown') the ATM-LSR MUST notify the upstream neighbor\
    \ of the\n   change.  Each ATM-LSR in turn MUST increment the hop count and pass\n\
    \   it upstream until it reaches the ingress Edge LSR.  If at any point\n   the\
    \ value of the hop count equals MAXHOP, the ATM-LSR SHOULD withdraw\n   the binding\
    \ from the upstream neighbor.  A hop count of 0 MUST be\n   passed upstream unchanged.\n\
    \   Whenever an ATM-LSR originates a label binding request to its next\n   hop\
    \ LSR as a result of receiving a label binding request from another\n   (upstream)\
    \ LSR, and the request to the next hop LSR is not satisfied,\n   the ATM-LSR SHOULD\
    \ destroy the binding created in response to the\n   received request, and notify\
    \ the requester (via LDP).\n   If an ATM-LSR receives a binding request containing\
    \ a hop count that\n   exceeds MAXHOP, it MUST not establish a binding, and it\
    \ MUST return\n   an error to the requester.\n   When a LSR determines that it\
    \ has lost its LDP session with another\n   LSR, the following actions are taken.\
    \  Any binding information\n   learned via this connection MUST be discarded.\
    \  For any label\n   bindings that were created as a result of receiving label\
    \ binding\n   requests from the peer, the LSR MAY destroy these bindings (and\n\
    \   deallocate labels associated with these binding).\n   An ATM-LSR SHOULD use\
    \ 'split-horizon' when it satisfies binding\n   requests from its neighbors. \
    \ That is, if it receives a request for a\n   binding to a particular FEC and\
    \ the LSR making that request is,\n   according to this ATM-LSR, the next hop\
    \ for that FEC, it should not\n   return a binding for that route.\n   It is expected\
    \ that non-merging ATM-LSRs would generally use\n   \"conservative label retention\
    \ mode\" [1].\n"
- title: 8.3. VC-merge-capable ATM Switches
  contents:
  - "8.3. VC-merge-capable ATM Switches\n   Relatively minor changes are needed to\
    \ accommodate ATM-LSRs which\n   support VC-merge.  The primary difference is\
    \ that a VC-merge-capable\n   ATM-LSR needs only one outgoing label per FEC, even\
    \ if multiple\n   requests for label bindings to that FEC are received from upstream\n\
    \   neighbors.\n   When a VC-merge-capable ATM-LSR receives a binding request\
    \ from an\n   upstream LSR for a certain FEC, and it does not already have an\n\
    \   outgoing label binding for that FEC (or an outstanding request for\n   such\
    \ a label binding), it MUST issue a bind request to its next hop\n   just as it\
    \ would do if it were not merge-capable.  If, however, it\n   already has an outgoing\
    \ label binding for that FEC, it does not need\n   to issue a downstream binding\
    \ request.  Instead, it may simply\n   allocate an incoming label, and return\
    \ that label in a binding to the\n   upstream requester.  When packets with that\
    \ label as top label are\n   received from the requester, the top label value\
    \ will be replaced\n   with the existing outgoing label value that corresponds\
    \ to the same\n   FEC.\n   If the ATM-LSR does not have an outgoing label binding\
    \ for the FEC,\n   but does have an outstanding request for one, it need not issue\n\
    \   another request.\n   When sending a label binding upstream, the hop count\
    \ associated with\n   the corresponding binding from downstream MUST be incremented\
    \ by 1,\n   and the result transmitted upstream as the hop count associated with\n\
    \   the new binding.  However, there are two exceptions: a hop count of 0\n  \
    \ MUST be passed upstream unchanged, and if the hop count is already at\n   MAXHOP,\
    \ the ATM-LSR MUST NOT pass a binding upstream, but instead\n   MUST send an error\
    \ upstream.\n   Note that, just like conventional ATM-LSRs and members of the\
    \ edge\n   set of the ATM-LSR domain, a VC-merge-capable ATM-LSR MUST issue a\n\
    \   new binding every time it receives a request from upstream, since\n   there\
    \ may be switches upstream which do not support VC-merge.\n   However, it only\
    \ needs to issue a corresponding binding request\n   downstream if it does not\
    \ already have a label binding for the\n   appropriate route.\n   When a change\
    \ in the routing table of a VC-merge-capable ATM-LSR\n   causes it to select a\
    \ new next hop for one of its FECs, it MAY\n   optionally release the binding\
    \ for that route from the former next\n   hop.  If it doesn't already have a corresponding\
    \ binding for the new\n   next hop, it must request one.  (The choice between\
    \ conservative and\n   liberal label retention mode [1] is an implementation option.)\n\
    \   If a new binding is obtained, which contains a hop count that differs\n  \
    \ from that which was received in the old binding, then the ATM-LSR\n   must take\
    \ the new hop count, increment it by one, and notify any\n   upstream neighbors\
    \ who have label bindings for this FEC of the new\n   value.  Just as with conventional\
    \ ATM-LSRs, this enables the new hop\n   count to propagate back towards the ingress\
    \ of the ATM-LSR domain.\n   If at any point the hop count exceeds MAXHOP, then\
    \ the label bindings\n   for this route must be withdrawn from all upstream neighbors\
    \ to whom\n   a binding was previously provided.  This ensures that any loops\n\
    \   caused by routing transients will be detected and broken.\n"
- title: 9. Encapsulation
  contents:
  - "9. Encapsulation\n   The procedures described in this section affect only the\
    \ Edge LSRs of\n   the ATM-LSR domain.  The ATM-LSRs themselves do not modify\
    \ the\n   encapsulation in any way.\n   Labeled packets MUST be transmitted using\
    \ the null encapsulation of\n   Section 6.1 of RFC 2684 [5].\n   Except in certain\
    \ circumstances specified below, when a labeled\n   packet is transmitted on an\
    \ LC-ATM interface, where the VPI/VCI (or\n   VCID) is interpreted as the top\
    \ label in the label stack, the packet\n   MUST also contain a \"shim header\"\
    \ [3].\n   If the packet has a label stack with n entries, it MUST carry a shim\n\
    \   with n entries.  The actual value of the top label is encoded in the\n   VPI/VCI\
    \ field.  The label value of the top entry in the shim (which\n   is just a \"\
    placeholder\" entry) MUST be set to 0 upon transmission,\n   and MUST be ignored\
    \ upon reception.  The packet's outgoing TTL, and\n   its CoS, are carried in\
    \ the TTL and CoS fields respectively of the\n   top stack entry in the shim.\n\
    \   Note that if a packet has a label stack with only one entry, this\n   requires\
    \ it to have a single-entry shim (4 bytes), even though the\n   actual label value\
    \ is encoded into the VPI/VCI field.  This is done\n   to ensure that the packet\
    \ always has a shim.  Otherwise, there would\n   be no way to determine whether\
    \ it had one or not, i.e., no way to\n   determine whether there are additional\
    \ label stack entries.\n   The only ways to eliminate this extra overhead are:\n\
    \      -  through apriori knowledge that packets have only a single label\n  \
    \       (e.g., perhaps the network only supports one level of label)\n      -\
    \  by using two VCs per FEC, one for those packets which have only\n         a\
    \ single label, and one for those packets which have more than\n         one label\n\
    \   The second technique would require that there be some way of\n   signalling\
    \ via LDP that the VC is carrying only packets with a single\n   label, and is\
    \ not carrying a shim.  When supporting VC merge, one\n   would also have to take\
    \ care not to merge a VC on which the shim  is\n   not used into a VC on which\
    \ it is used, or vice versa.\n   While either of these techniques is permitted,\
    \ it is doubtful that\n   they have any practical utility.  Note that if the shim\
    \ header is not\n   present, the outgoing TTL is carried in the TTL field of the\
    \ network\n   layer header.\n"
- title: 10. TTL Manipulation
  contents:
  - "10. TTL Manipulation\n   The procedures described in this section affect only\
    \ the Edge LSRs of\n   the ATM-LSR domain.  The ATM-LSRs themselves do not modify\
    \ the TTL in\n   any way.\n   The details of the TTL adjustment procedure are\
    \ as follows.  If a\n   packet was received by the Edge LSR as an unlabeled packet,\
    \ the\n   \"incoming TTL\" comes from the IP header.  (Procedures for other\n\
    \   network layer protocols are for further study.) If a packet was\n   received\
    \ by the Edge LSR as a labeled packet, using the encapsulation\n   specified in\
    \ [3], the \"incoming TTL\" comes from the entry at the top\n   of the label stack.\n\
    \   If a hop count has been associated with the label binding that is\n   used\
    \ when the packet is forwarded, the \"outgoing TTL\" is set to the\n   larger\
    \ of (a) 0 or (b) the difference between the incoming TTL and\n   the hop count.\
    \  If a hop count has not been associated with the label\n   binding that is used\
    \ when the packet is forwarded, the \"outgoing TTL\"\n   is set to the larger\
    \ of (a) 0 or (b) one less than the incoming TTL.\n   If this causes the outgoing\
    \ TTL to become zero, the packet MUST NOT\n   be transmitted as a labeled packet\
    \ using the specified label.  The\n   packet can be treated in one of two ways:\n\
    \      -  it may be treated as having expired; this may cause an ICMP\n      \
    \   message to be transmitted;\n      -  the packet may be forwarded, as an unlabeled\
    \ packet, with a TTL\n         that is 1 less than the incoming TTL; such forwarding\
    \ would\n         need to be done over a non-MPLS connection.\n   Of course, if\
    \ the incoming TTL is 1, only the first of these two\n   options is applicable.\n\
    \   If the packet is forwarded as a labeled packet, the outgoing TTL is\n   carried\
    \ as specified in section 9.\n   When an Edge LSR receives a labeled packet over\
    \ an LC-ATM interface,\n   it obtains the incoming TTL from the top label stack\
    \ entry of the\n   generic encapsulation, or, if that encapsulation is not present,\
    \ from\n   the IP header.\n   If the packet's next hop is an ATM-LSR, the outgoing\
    \ TTL is formed\n   using the procedures described in this section.  Otherwise\
    \ the\n   outgoing TTL is formed using the procedures described in [3].\n   The\
    \ procedures in this section are intended to apply only to unicast\n   packets.\n"
- title: '11. Optional Loop Detection: Distributing Path Vectors'
  contents:
  - "11. Optional Loop Detection: Distributing Path Vectors\n   Every ATM-LSR MUST\
    \ implement, as a configurable option, the following\n   procedure for detecting\
    \ forwarding loops.  We refer to this as the\n   LDPV (Loop Detection via Path\
    \ Vectors) procedure.  This procedure\n   does not prevent the formation of forwarding\
    \ loops, but does ensure\n   that any such loops are detected.  If this option\
    \ is not enabled,\n   loops are detected by the hop count mechanism previously\
    \ described.\n   If this option is enabled, loops will be detected more quickly,\
    \ but\n   at a higher cost in overhead.\n"
- title: 11.1. When to Send Path Vectors Downstream
  contents:
  - "11.1. When to Send Path Vectors Downstream\n   Suppose an LSR R sends a request\
    \ for a label binding, for a\n   particular LSP, to its next hop.  Then if R does\
    \ not support VC-\n   merging, and R is configured to use the LDPV procedure:\n\
    \      -  If R is sending the request because it is an ingress node for\n    \
    \     that LSP, or because it has acquired a new next hop, then R\n         MUST\
    \ include a path vector object with the request, and the\n         path vector\
    \ object MUST contain only R's own address.\n      -  If R is sending the request\
    \ as a result of having received a\n         request from an upstream LSR, then:\n\
    \         *  if the received request has a path vector object, R MUST add\n  \
    \          its own address to the received path vector object, and MUST\n    \
    \        pass the resulting path vector object to its next hop along\n       \
    \     with the label binding request;\n         *  if the received request does\
    \ not have a path vector object,\n            R MUST include a path vector object\
    \ with the request it\n            sends, and the path vector object MUST contain\
    \ only R's own\n            address.\n   An LSR which supports VC-merge SHOULD\
    \ NOT include a path vector\n   object in the requests that it sends to its next\
    \ hop.\n   If an LSR receives a label binding request whose path vector object\n\
    \   contains the address of the node itself, the LSR concludes that the\n   label\
    \ binding requests have traveled in a loop.  The LSR MUST act as\n   it would\
    \ in the case where the hop count exceeds MAXHOP (see section\n   8.2).\n   This\
    \ procedure detects the case where the request messages loop\n   though a sequence\
    \ of non-merging ATM-LSRs.\n"
- title: 11.2. When to Send Path Vectors Upstream
  contents:
  - "11.2. When to Send Path Vectors Upstream\n   As specified in section 8, there\
    \ are circumstances in which an LSR R\n   must inform its upstream neighbors,\
    \ via a label binding response\n   message, of a change in hop count for a particular\
    \ LSP.  If the\n   following conditions all hold:\n      -  R is configured for\
    \ the LDPV procedure,\n      -  R supports VC-merge,\n      -  R is not the egress\
    \ for that LSP, and\n      -  R is not informing its neighbors of a decrease in\
    \ the hop\n         count,\n   then R MUST include a path vector object in the\
    \ response message.\n   If the change in hop count is a result of R's having been\
    \ informed by\n   its next hop, S, of a change in hop count, and the message from\
    \ S to\n   R included a path vector object, then if the above conditions hold,\
    \ R\n   MUST add itself to this object and pass the result upstream.\n   Otherwise,\
    \ if the above conditions hold, R MUST create a new object\n   with only its own\
    \ address.\n   If R is configured for the LDPV procedure, and R supports VC merge,\n\
    \   then it MAY include a path vector object in any label binding\n   response\
    \ message that it sends upstream.  In particular, at any time\n   that R receives\
    \ a label binding response from its next hop, if that\n   response contains a\
    \ path vector, R MAY (if configured for the LDPV\n   procedure) send a response\
    \ to its upstream neighbors, containing the\n   path vector object formed by adding\
    \ its own address to the received\n   path vector.\n   If R does not support VC\
    \ merge, it SHOULD NOT send a path vector\n   object upstream.\n   If an LSR \
    \ receives a message from  its next hop, with a  path vector\n   object containing\
    \ its own address, then  LSR  MUST act as it would if\n   it received a message\
    \ with a hop count equal to MAXHOP.\n   LSRs which are configured for the LDPV\
    \ procedure SHOULD NOT store a\n   path vector once the corresponding path vector\
    \ object has been\n   transmitted.\n   Note that if the ATM-LSR domain consists\
    \ entirely of non-merging\n   ATM-LSRs, path vectors need not ever be sent upstream,\
    \ since any\n   loops will be detected by means of the path vectors traveling\n\
    \   downstream.\n   By not sending path vectors unless the hop count increases,\
    \ one\n   avoids sending them in many situations when there is no loop.  The\n\
    \   cost is that in some situations in which there is a loop, the time to\n  \
    \ detect the loop may be lengthened.\n"
- title: 12. Security Considerations
  contents:
  - "12. Security Considerations\n   The encapsulation and procedures specified in\
    \ this document do not\n   interfere in any way with the application of authentication\
    \ and/or\n   encryption to network layer packets (such as the application of IPSEC\n\
    \   to IP datagrams).\n   The procedures described in this document do not protect\
    \ against the\n   alteration (either accidental or malicious) of MPLS labels.\
    \  Such\n   alteration could cause misforwarding.\n   The procedures described\
    \ in this document do not enable a receiving\n   LSR to authenticate the transmitting\
    \ LSR.\n   A discussion of the security considerations applicable to the label\n\
    \   distribution mechanism can be found in [2].\n"
- title: 13. Intellectual Property Considerations
  contents:
  - "13. Intellectual Property Considerations\n   The IETF has been notified of intellectual\
    \ property rights claimed in\n   regard to some or all of the specification contained\
    \ in this\n   document.  For more information consult the online list of claimed\n\
    \   rights.\n   The IETF takes no position regarding the validity or scope of\
    \ any\n   intellectual property or other rights that might be claimed to\n   pertain\
    \ to the implementation or use of the technology described in\n   this document\
    \ or the extent to which any license under such rights\n   might or might not\
    \ be available; neither does it represent that it\n   has made any effort to identify\
    \ any such rights.  Information on the\n   IETF's procedures with respect to rights\
    \ in standards-track and\n   standards-related documentation can be found in BCP-11.\
    \  Copies of\n   claims of rights made available for publication and any assurances\
    \ of\n   licenses to be made available, or the result of an attempt made to\n\
    \   obtain a general license or permission for the use of such\n   proprietary\
    \ rights by implementors or users of this specification can\n   be obtained from\
    \ the IETF Secretariat.\n   The IETF invites any interested party to bring to\
    \ its attention any\n   copyrights, patents or patent applications, or other proprietary\n\
    \   rights which may cover technology that may be required to practice\n   this\
    \ standard.  Please address the information to the IETF Executive\n   Director.\n"
- title: 14. References
  contents:
  - "14. References\n   [1] Rosen, E., Viswanathan, A. and R. Callon \"Multi-Protocol\
    \ Label\n       Switching Architecture\", RFC 3031, January 2001.\n   [2] Andersson\
    \ L., Doolan P., Feldman N., Fredette A. and R. Thomas,\n       \"LDP Specification\"\
    , RFC 3036, January 2001.\n   [3] Rosen, E., Rekhter, Y., Tappan, D., Farinacci,\
    \ D., Fedorkow, G.,\n       Li, T. and A. Conta, \"MPLS Label Stack Encoding\"\
    , RFC 3032,\n       January 2001.\n   [4] Nagami, K., Demizu N., Esaki H. and\
    \ P. Doolan, \"VCID Notification\n       over ATM Link for LDP\", RFC 3038, January\
    \ 2001.\n   [5] Grossman, D., Heinanen, J., \"Multiprotocol Encapsulation over\
    \ ATM\n       Adaptation Layer 5\", RFC 2684, September 1999.\n"
- title: 15. Acknowledgments
  contents:
  - "15. Acknowledgments\n   Significant contributions to this work have been made\
    \ by Anthony\n   Alles, Fred Baker, Dino Farinacci, Guy Fedorkow, Arthur Lin,\
    \ Morgan\n   Littlewood and Dan Tappan.  We thank Alex Conta for his comments.\n"
- title: 16. Authors' Addresses
  contents:
  - "16. Authors' Addresses\n   Bruce Davie\n   Cisco Systems, Inc.\n   250 Apollo\
    \ Drive\n   Chelmsford, MA, 01824\n   EMail: bsd@cisco.com\n   Paul Doolan\n \
    \  Ennovate Networks Inc.\n   60 Codman Hill Rd\n   Boxborough, MA 01719\n   EMail:\
    \ pdoolan@ennovatenetworks.com\n   Jeremy Lawrence\n   Cisco Systems, Inc.\n \
    \  99 Walker St.\n   North Sydney, NSW, Australia\n   EMail: jlawrenc@cisco.com\n\
    \   Keith McCloghrie\n   Cisco Systems, Inc.\n   170 Tasman Drive\n   San Jose,\
    \ CA, 95134\n   EMail: kzm@cisco.com\n   Yakov Rekhter\n   Juniper Networks\n\
    \   1194 N. Mathilda Avenue\n   Sunnyvale, CA 94089\n   EMail: yakov@juniper.net\n\
    \   Eric Rosen\n   Cisco Systems, Inc.\n   250 Apollo Drive\n   Chelmsford, MA,\
    \ 01824\n   EMail: erosen@cisco.com\n   George Swallow\n   Cisco Systems, Inc.\n\
    \   250 Apollo Drive\n   Chelmsford, MA, 01824\n   EMail: swallow@cisco.com\n"
- title: 17.  Full Copyright Statement
  contents:
  - "17.  Full Copyright Statement\n   Copyright (C) The Internet Society (2001).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
