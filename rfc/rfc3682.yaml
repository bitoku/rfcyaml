- title: __initial_text__
  contents:
  - '             The Generalized TTL Security Mechanism (GTSM)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The use of a packet's Time to Live (TTL) (IPv4) or Hop Limit (IPv6)\n\
    \   to protect a protocol stack from CPU-utilization based attacks has\n   been\
    \ proposed in many settings (see for example, RFC 2461).  This\n   document generalizes\
    \ these techniques for use by other protocols such\n   as BGP (RFC 1771), Multicast\
    \ Source Discovery Protocol (MSDP),\n   Bidirectional Forwarding Detection, and\
    \ Label Distribution Protocol\n   (LDP) (RFC 3036).  While the Generalized TTL\
    \ Security Mechanism\n   (GTSM) is most effective in protecting directly connected\
    \ protocol\n   peers, it can also provide a lower level of protection to multi-hop\n\
    \   sessions.  GTSM is not directly applicable to protocols employing\n   flooding\
    \ mechanisms (e.g., multicast), and use of multi-hop GTSM\n   should be considered\
    \ on a case-by-case basis.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Assumptions Underlying GTSM. . . . . . . . . . . . .\
    \ . . . . .  2\n       2.1.  GTSM Negotiation . . . . . . . . . . . . . . . .\
    \ . . . .  3\n       2.2.  Assumptions on Attack Sophistication . . . . . . .\
    \ . . .  3\n   3.  GTSM Procedure . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  3\n       3.1.  Multi-hop Scenarios. . . . . . . . . . . . . . . . . .\
    \ .  4\n             3.1.1.  Intra-domain Protocol Handling . . . . . . . . .\
    \  5\n   4.  Acknowledgments. . . . . . . . . . . . . . . . . . . . . . . .  5\n\
    \   5.  Security Considerations. . . . . . . . . . . . . . . . . . . .  5\n  \
    \     5.1.  TTL (Hop Limit) Spoofing . . . . . . . . . . . . . . . .  5\n    \
    \   5.2.  Tunneled Packets . . . . . . . . . . . . . . . . . . . .  6\n      \
    \       5.2.1.  IP in IP . . . . . . . . . . . . . . . . . . . .  6\n        \
    \     5.2.2.  IP in MPLS . . . . . . . . . . . . . . . . . . .  7\n       5.3.\
    \  Multi-Hop Protocol Sessions. . . . . . . . . . . . . . .  8\n   6.  IANA Considerations.\
    \ . . . . . . . . . . . . . . . . . . . . .  8\n   7.  References . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . .  8\n       7.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . .  8\n       7.2.  Informative References\
    \ . . . . . . . . . . . . . . . . .  9\n   8.  Authors' Addresses . . . . . .\
    \ . . . . . . . . . . . . . . . . 10\n   9.  Full Copyright Statement . . . .\
    \ . . . . . . . . . . . . . . . 11\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Generalized TTL Security Mechanism (GTSM) is designed\
    \ to protect\n   a router's TCP/IP based control plane from CPU-utilization based\n\
    \   attacks.  In particular, while cryptographic techniques can protect\n   the\
    \ router-based infrastructure (e.g., BGP [RFC1771], [RFC1772]) from\n   a wide\
    \ variety of attacks, many attacks based on CPU overload can be\n   prevented\
    \ by the simple mechanism described in this document.  Note\n   that the same\
    \ technique protects against other scarce-resource\n   attacks involving a router's\
    \ CPU, such as attacks against\n   processor-line card bandwidth.\n   GTSM is\
    \ based on the fact that the vast majority of protocol peerings\n   are established\
    \ between routers that are adjacent [PEERING].  Thus\n   most protocol peerings\
    \ are either directly between connected\n   interfaces or at the worst case, are\
    \ between loopback and loopback,\n   with static routes to loopbacks.  Since TTL\
    \ spoofing is considered\n   nearly impossible, a mechanism based on an expected\
    \ TTL value can\n   provide a simple and reasonably robust defense from infrastructure\n\
    \   attacks based on forged protocol packets.\n   Finally, the GTSM mechanism\
    \ is equally applicable to both TTL (IPv4)\n   and Hop Limit (IPv6), and from\
    \ the perspective of GTSM, TTL and Hop\n   Limit have identical semantics.  As\
    \ a result, in the remainder of\n   this document the term \"TTL\" is used to\
    \ refer to both TTL or Hop\n   Limit (as appropriate).\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to\
    \ be interpreted as described in BCP 14, RFC 2119\n   [RFC2119].\n"
- title: 2.  Assumptions Underlying GTSM
  contents:
  - "2.  Assumptions Underlying GTSM\n   GTSM is predicated upon the following assumptions:\n\
    \   (i)    The vast majority of protocol peerings are between adjacent\n     \
    \     routers [PEERING].\n   (ii)   It is common practice for many service providers\
    \ to ingress\n          filter (deny) packets that have the provider's loopback\n\
    \          addresses as the source IP address.\n   (iii)  Use of GTSM is OPTIONAL,\
    \ and can be configured on a per-peer\n          (group) basis.\n   (iv)   The\
    \ router supports a method of classifying traffic destined\n          for the\
    \ route processor into interesting/control and\n          not-control queues.\n\
    \   (iv)   The peer routers both implement GTSM.\n"
- title: 2.1.  GTSM Negotiation
  contents:
  - "2.1.  GTSM Negotiation\n   This document assumes that GTSM will be manually configured\
    \ between\n   protocol peers.  That is, no automatic GTSM capability negotiation,\n\
    \   such as is envisioned by RFC 2842 [RFC2842] is assumed or defined.\n"
- title: 2.2.  Assumptions on Attack Sophistication
  contents:
  - "2.2.  Assumptions on Attack Sophistication\n   Throughout this document, we assume\
    \ that potential attackers have\n   evolved in both sophistication and access\
    \ to the point that they can\n   send control traffic to a protocol session, and\
    \ that this traffic\n   appears to be valid control traffic (i.e., has the source/destination\n\
    \   of configured peer routers).\n   We also assume that each router in the path\
    \ between the attacker and\n   the victim protocol speaker decrements TTL properly\
    \ (clearly, if\n   either the path or the adjacent peer is compromised, then there\
    \ are\n   worse problems to worry about).\n   Since the vast majority of our peerings\
    \ are between adjacent routers,\n   we can set the TTL on the protocol packets\
    \ to 255 (the maximum\n   possible for IP) and then reject any protocol packets\
    \ that come in\n   from configured peers which do NOT have an inbound TTL of 255.\n\
    \   GTSM can be disabled for applications such as route-servers and other\n  \
    \ large diameter multi-hop peerings.  In the event that an the attack\n   comes\
    \ in from a compromised multi-hop peering, that peering can be\n   shut down (a\
    \ method to reduce exposure to multi-hop attacks is\n   outlined below).\n"
- title: 3.  GTSM Procedure
  contents:
  - "3.  GTSM Procedure\n   GTSM SHOULD NOT be enabled by default.  The following\
    \ process\n   describes the per-peer behavior:\n    (i)   If GTSM is enabled,\
    \ an implementation performs the following\n          procedure:\n          (a)\
    \  For directly connected routers,\n              o Set the outbound TTL for the\
    \ protocol connection to 255.\n              o For each configured protocol peer:\n\
    \                Update the receive path Access Control List (ACL) or\n      \
    \          firewall to only allow protocol packets to pass onto the\n        \
    \        Route Processor (RP) that have the correct <source,\n               \
    \ destination, TTL> tuple.  The TTL must either be 255\n                (for a\
    \ directly connected peer), or 255-(configured-\n                range-of-acceptable-hops)\
    \ for a multi-hop peer.  We\n                specify a range here to achieve some\
    \ robustness to\n                changes in topology.  Any directly connected\
    \ check MUST\n                be disabled for such peerings.\n               \
    \ It is assumed that a receive path ACL is an ACL that is\n                designed\
    \ to control which packets are allowed to go to\n                the RP.  This\
    \ procedure will only allow protocol packets\n                from adjacent router\
    \ to pass onto the RP.\n          (b)  If the inbound TTL is 255 (for a directly\
    \ connected\n               peer), or 255-(configured-range-of-acceptable-hops)\
    \ (for\n               multi-hop peers), the packet is NOT processed.  Rather,\n\
    \               the packet is placed into a low priority queue, and\n        \
    \       subsequently logged and/or silently discarded.  In this\n            \
    \   case, an ICMP message MUST NOT be generated.\n    (ii)  If GTSM is not enabled,\
    \ normal protocol behavior is followed.\n"
- title: 3.1.  Multi-hop Scenarios
  contents:
  - "3.1.  Multi-hop Scenarios\n   When a multi-hop protocol session is required,\
    \ we set the expected\n   TTL value to be 255-(configured-range-of-acceptable-hops).\
    \  This\n   approach provides a qualitatively lower degree of security for the\n\
    \   protocol implementing GTSM (i.e., a DoS attack could theoretically be\n  \
    \ launched by compromising some box in the path).  However, GTSM will\n   still\
    \ catch the vast majority of observed DDoS attacks against a\n   given protocol.\
    \  Note that since the number of hops can change\n   rapidly in real network situations,\
    \ it is considered that GTSM may\n   not be able to handle this scenario adequately\
    \ and an implementation\n   MAY provide OPTIONAL support.\n"
- title: 3.1.1.  Intra-domain Protocol Handling
  contents:
  - "3.1.1.  Intra-domain Protocol Handling\n   In general, GTSM is not used for intra-domain\
    \ protocol peers or\n   adjacencies.  The special case of iBGP peers can be protected\
    \ by\n   filtering at the network edge for any packet that has a source\n   address\
    \ of one of the loopback addresses used for the intra-domain\n   peering.  In\
    \ addition, the current best practice is to further\n   protect such peers or\
    \ adjacencies with an MD5 signature [RFC2385].\n"
- title: 4.  Acknowledgments
  contents:
  - "4.  Acknowledgments\n   The use of the TTL field to protect BGP originated with\
    \ many\n   different people, including Paul Traina and Jon Stewart.  Ryan\n  \
    \ McDowell also suggested a similar idea.  Steve Bellovin, Jay\n   Borkenhagen,\
    \ Randy Bush, Vern Paxon, Pekka Savola, and Robert Raszuk\n   also provided useful\
    \ feedback on earlier versions of this document.\n   David Ward provided insight\
    \ on the generalization of the original\n   BGP-specific idea.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   GTSM is a simple procedure that protects single\
    \ hop protocol\n   sessions, except in those cases in which the peer has been\n\
    \   compromised.\n"
- title: 5.1.  TTL (Hop Limit) Spoofing
  contents:
  - "5.1.  TTL (Hop Limit) Spoofing\n   The approach described here is based on the\
    \ observation that a TTL\n   (or Hop Limit) value of 255 is non-trivial to spoof,\
    \ since as the\n   packet passes through routers towards the destination, the\
    \ TTL is\n   decremented by one.  As a result, when a router receives a packet,\
    \ it\n   may not be able to determine if the packet's IP address is valid, but\n\
    \   it can determine how many router hops away it is (again, assuming\n   none\
    \ of the routers in the path are compromised in such a way that\n   they would\
    \ reset the packet's TTL).\n   Note, however, that while engineering a packet's\
    \ TTL such that it has\n   a particular value when sourced from an arbitrary location\
    \ is\n   difficult (but not impossible), engineering a TTL value of 255 from\n\
    \   non-directly connected locations is not possible (again, assuming\n   none\
    \ of the directly connected neighbors are compromised, the packet\n   hasn't been\
    \ tunneled to the decapsulator, and the intervening routers\n   are operating\
    \ in accordance with RFC 791 [RFC791]).\n"
- title: 5.2.  Tunneled Packets
  contents:
  - "5.2.  Tunneled Packets\n   An exception to the observation that a packet with\
    \ TTL of 255 is\n   difficult to spoof occurs when a protocol packet is tunneled\
    \ to a\n   decapsulator who then forwards the packet to a directly connected\n\
    \   protocol peer.  In this case the decapsulator (tunnel endpoint) can\n   either\
    \ be the penultimate hop, or the last hop itself.  A related\n   case arises when\
    \ the protocol packet is tunneled directly to the\n   protocol peer (the protocol\
    \ peer is the decapsulator).\n   When the protocol packet is encapsulated in IP,\
    \ it is possible to\n   spoof the TTL.  It may also be impossible to legitimately\
    \ get the\n   packet to the protocol peer with a TTL of 255, as in the IP in MPLS\n\
    \   cases described below.\n   Finally, note that the security of any tunneling\
    \ technique depends\n   heavily on authentication at the tunnel endpoints, as\
    \ well as how the\n   tunneled packets are protected in flight.  Such mechanisms\
    \ are,\n   however, beyond the scope of this memo.\n"
- title: 5.2.1.  IP in IP
  contents:
  - "5.2.1.  IP in IP\n   Protocol packets may be tunneled over IP directly to a protocol\
    \ peer,\n   or to a decapsulator (tunnel endpoint) that then forwards the packet\n\
    \   to a directly connected protocol peer (e.g., in IP-in-IP [RFC2003],\n   GRE\
    \ [RFC2784], or various forms of IPv6-in-IPv4 [RFC2893]).  These\n   cases are\
    \ depicted below.\n    Peer router ---------- Tunnel endpoint router and peer\n\
    \     TTL=255     [tunnel]   [TTL=255 at ingress]\n                          \
    \  [TTL=255 at egress]\n    Peer router ---------- Tunnel endpoint router -----\
    \ On-link peer\n     TTL=255     [tunnel]   [TTL=255 at ingress]  [TTL=254 at\
    \ ingress]\n                            [TTL=254 at egress]\n   In the first case,\
    \ in which the encapsulated packet is tunneled\n   directly to the protocol peer,\
    \ the encapsulated packet's TTL can be\n   set arbitrary value.  In the second\
    \ case, in which the encapsulated\n   packet is tunneled to a decapsulator (tunnel\
    \ endpoint) which then\n   forwards it to a directly connected protocol peer,\
    \ RFC 2003 specifies\n   the following behavior:\n      When encapsulating a datagram,\
    \ the TTL in the inner IP header is\n      decremented by one if the tunneling\
    \ is being done as part of\n      forwarding the datagram; otherwise, the inner\
    \ header TTL is not\n      changed during encapsulation.  If the resulting TTL\
    \ in the inner\n      IP header is 0, the datagram is discarded and an ICMP Time\n\
    \      Exceeded message SHOULD be returned to the sender.  An\n      encapsulator\
    \ MUST NOT encapsulate a datagram with TTL = 0.\n   Hence the inner IP packet\
    \ header's TTL, as seen by the decapsulator,\n   can be set to an arbitrary value\
    \ (in particular, 255).  As a result,\n   it may not be possible to deliver the\
    \ protocol packet to the peer\n   with a TTL of 255.\n"
- title: 5.2.2.  IP in MPLS
  contents:
  - "5.2.2.  IP in MPLS\n   Protocol packets may also be tunneled over MPLS to a protocol\
    \ peer\n   which either the penultimate hop (when the penultimate hop popping\n\
    \   (PHP) is employed [RFC3032]), or one hop beyond the penultimate hop.\n   These\
    \ cases are depicted below.\n    Peer router ---------- Penultimate Hop (PH) and\
    \ peer\n     TTL=255     [tunnel]   [TTL=255 at ingress]\n                   \
    \         [TTL<=254 at egress]\n    Peer router ---------- Penultimate Hop  --------\
    \ On-link peer\n     TTL=255     [tunnel]   [TTL=255 at ingress]  [TTL <=254 at\
    \ ingress]\n                            [TTL<=254 at egress]\n   TTL handling\
    \ for these cases is described in RFC 3032.  RFC 3032\n   states that when the\
    \ IP packet is first labeled:\n      ... the TTL field of the label stack entry\
    \ MUST BE set to the\n      value of the IP TTL field.  (If the IP TTL field needs\
    \ to be\n      decremented, as part of the IP processing, it is assumed that\n\
    \      this has already been done.)\n   When the label is popped:\n      When\
    \ a label is popped, and the resulting label stack is empty,\n      then the value\
    \ of the IP TTL field SHOULD BE replaced with the\n      outgoing TTL value, as\
    \ defined above.  In IPv4 this also requires\n      modification of the IP header\
    \ checksum.\n   where the definition of \"outgoing TTL\" is:\n      The \"incoming\
    \ TTL\" of a labeled packet is defined to be the value\n      of the TTL field\
    \ of the top label stack entry when the packet is\n      received.\n   The \"\
    outgoing TTL\" of a labeled packet is defined to be the larger\n   of:\n     \
    \ a) one less than the incoming TTL,\n      b) zero.\n   In either of these cases,\
    \ the minimum value by which the TTL could be\n   decremented would be one (the\
    \ network operator prefers to hide its\n   infrastructure by decrementing the\
    \ TTL by the minimum number of LSP\n   hops, one, rather than decrementing the\
    \ TTL as it traverses its MPLS\n   domain).  As a result, the maximum TTL value\
    \ at egress from the MPLS\n   cloud is 254 (255-1), and as a result the check\
    \ described in section\n   3 will fail.\n"
- title: 5.3.  Multi-Hop Protocol Sessions
  contents:
  - "5.3.  Multi-Hop Protocol Sessions\n   While the GTSM method is less effective\
    \ for multi-hop protocol\n   sessions, it does close the window on several forms\
    \ of attack.\n   However, in the multi-hop scenario GTSM is an OPTIONAL extension.\n\
    \   Protection of the protocol infrastructure beyond what is provided by\n   the\
    \ GTSM method will likely require cryptographic machinery such as\n   is envisioned\
    \ by Secure BGP (S-BGP) [SBGP1,SBGP2], and/or other\n   extensions.  Finally,\
    \ note that in the multi-hop case described\n   above, we specify a range of acceptable\
    \ TTLs in order to achieve some\n   robustness to topology changes.  This robustness\
    \ to topological\n   change comes at the cost of the loss of some robustness to\
    \ different\n   forms of attack.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document creates no new requirements on IANA\
    \ namespaces\n   [RFC2434].\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC791]   Postel, J., \"Internet Protocol Specification\"\
    , STD 5, RFC\n              791, September 1981.\n   [RFC1771]  Rekhter, Y. and\
    \ T. Li (Editors), \"A Border Gateway\n              Protocol (BGP-4)\", RFC 1771,\
    \ March 1995.\n   [RFC1772]  Rekhter, Y. and P. Gross, \"Application of the Border\n\
    \              Gateway Protocol in the Internet\", RFC 1772, March 1995.\n   [RFC2003]\
    \  Perkins, C., \"IP Encapsulation with IP\", RFC 2003, October\n            \
    \  1996.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2385]\
    \  Heffernan, A., \"Protection of BGP Sessions via the TCP MD5\n             \
    \ Signature Option\", RFC 2385, August 1998.\n   [RFC2461]  Narten, T., Nordmark,\
    \ E. and W. Simpson, \"Neighbor\n              Discover for IP Version 6 (IPv6)\"\
    , RFC 2461, December\n              1998.\n   [RFC2784]  Farinacci, D., \"Generic\
    \ Routing Encapsulation (GRE)\", RFC\n              2784, March 2000.\n   [RFC2842]\
    \  Chandra, R. and J. Scudder, \"Capabilities Advertisement\n              with\
    \ BGP-4\", RFC 2842, May 2000.\n   [RFC2893]  Gilligan, R. and E. Nordmark, \"\
    Transition Mechanisms for\n              IPv6 Hosts and Routers\", RFC 2893, August\
    \ 2000.\n   [RFC3032]  Rosen, E. Tappan, D., Fedorkow, G., Rekhter, Y.,\n    \
    \          Farinacci, D., Li, T. and A. Conta, \"MPLS Label Stack\n          \
    \    Encoding\", RFC 3032, January 2001.\n   [RFC3036]  Andersson, L., Doolan,\
    \ P., Feldman, N., Fredette, A. and\n              B. Thomas, \"LDP Specification\"\
    , RFC 3036, January 2001.\n   [RFC3392]  Chandra, R. and J. Scudder, \"Capabilities\
    \ Advertisement\n              with BGP-4\", RFC 3392, November 2002.\n   [SBGP1]\
    \    Kent, S., C. Lynn, and K. Seo, \"Secure Border Gateway\n              Protocol\
    \ (Secure-BGP)\", IEEE Journal on Selected Areas in\n              Communications,\
    \ volume 18, number 4, April, 2000.\n   [SBGP2]    Kent, S., C. Lynn, J. Mikkelson,\
    \ and K. Seo, \"Secure\n              Border Gateway Protocol (S-BGP) -- Real\
    \ World Performance\n              and Deployment Issues\", Proceedings of the\
    \ IEEE Network\n              and Distributed System Security Symposium, February,\
    \ 2000.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [BFD]      Katz, D. and D. Ward, \"Bidirectional\
    \ Forwarding\n              Detection\", Work in Progress, June 2003.\n   [PEERING]\
    \  Empirical data gathered from the Sprint and AOL backbones,\n              October,\
    \ 2002.\n   [RFC2028]  Hovey, R. and S. Bradner, \"The Organizations Involved\
    \ in\n              the IETF Standards Process\", BCP 11, RFC 2028, October\n\
    \              1996.\n   [RFC2434]  Narten, T., and H. Alvestrand, \"Guidelines\
    \ for Writing an\n              IANA Considerations Section in RFCs\", BCP 26,\
    \ RFC 2434,\n              October 1998.\n   [RFC3618]  Meyer, D. and W. Fenner,\
    \ Eds., \"The Multicast Source\n              Discovery Protocol (MSDP)\", RFC\
    \ 3618, October 2003.\n"
- title: 8.  Authors' Addresses
  contents:
  - "8.  Authors' Addresses\n   Vijay Gill\n   EMail: vijay@umbc.edu\n   John Heasley\n\
    \   EMail: heas@shrubbery.net\n   David Meyer\n   EMail: dmm@1-4-5.net\n"
- title: 9.  Full Copyright Statement
  contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
