- title: __initial_text__
  contents:
  - "            Elliptic Curve-Based Certificateless Signatures\n               \
    \  for Identity-Based Encryption (ECCSI)\n"
- title: Abstract
  contents:
  - "Abstract\n   Many signature schemes currently in use rely on certificates for\n\
    \   authentication of identity.  In Identity-based cryptography, this\n   adds\
    \ unnecessary overhead and administration.  The Elliptic Curve-\n   based Certificateless\
    \ Signatures for Identity-based Encryption\n   (ECCSI) signature scheme described\
    \ in this document is\n   certificateless.  This scheme has the additional advantages\
    \ of low\n   bandwidth and low computational requirements.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It has been approved for\
    \ publication by the Internet\n   Engineering Steering Group (IESG).  Not all\
    \ documents approved by the\n   IESG are a candidate for any level of Internet\
    \ Standard; see Section\n   2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6507.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Requirements Terminology ...................................3\n  \
    \ 2. Architecture ....................................................3\n   3.\
    \ Notation ........................................................5\n      3.1.\
    \ Arithmetic .................................................5\n      3.2. Representations\
    \ ............................................6\n      3.3. Format of Material\
    \ .........................................6\n   4. Parameters ......................................................7\n\
    \      4.1. Static Parameters ..........................................7\n  \
    \    4.2. Community Parameters .......................................8\n   5.\
    \ Algorithms ......................................................8\n      5.1.\
    \ User Key Material ..........................................8\n           5.1.1.\
    \ Algorithm for Constructing (SSK,PVT) Pair ...........8\n           5.1.2. Algorithm\
    \ for Validating a Received SSK .............9\n      5.2. Signatures .................................................9\n\
    \           5.2.1. Algorithm for Signing ...............................9\n  \
    \         5.2.2. Algorithm for Verifying ............................10\n   6.\
    \ Security Considerations ........................................11\n   7. References\
    \ .....................................................13\n      7.1. Normative\
    \ References ......................................13\n      7.2. Informative\
    \ References ....................................13\n   Appendix A. Test Data..............................................14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Digital signatures provide authentication services across\
    \ a wide\n   range of applications.  A chain of trust for such signatures is\n\
    \   usually provided by certificates.  However, in low-bandwidth or other\n  \
    \ resource-constrained environments, the use of certificates might be\n   undesirable.\
    \  This document describes an efficient scheme, ECCSI, for\n   elliptic curve-based\
    \ certificateless signatures, primarily intended\n   for use with Identity-Based\
    \ Encryption (IBE) schemes such as\n   described in [RFC6508].  As certificates\
    \ are not needed, the need to\n   transmit or store them to authenticate each\
    \ communication is\n   obviated.  The algorithm has been developed by drawing\
    \ on ideas set\n   out by Arazi [BA] and is originally based upon the Elliptic\
    \ Curve\n   Digital Signature Algorithm [ECDSA], one of the most commonly used\n\
    \   signature algorithms.\n   The algorithm is for use in the following context:\n\
    \      *  where there are two parties, a Signer and a Verifier;\n      *  where\
    \ short unambiguous Identifier strings are naturally\n         associated to each\
    \ of these parties;\n      *  where a message is to be signed and then verified\
    \ (e.g., for\n         authenticating the initiating party during an Identity-based\n\
    \         key establishment);\n      *  where a common Key Management Service\
    \ (KMS) provides a root of\n         trust for both parties.\n   The scheme does\
    \ not rely on any web of trust between users.\n   Authentication is provided in\
    \ a single simplex transmission without\n   per-session reference to any third\
    \ party.  Thus, the scheme is\n   particularly suitable in situations where the\
    \ receiving party need\n   not be active (or even enrolled) when the message to\
    \ be authenticated\n   is sent, or where the number of transmissions is to be\
    \ minimized for\n   efficiency.\n   Instead of having a certificate, the Signer\
    \ has an Identifier, to\n   which his Secret Signing Key (SSK) (see Section 2)\
    \ will have been\n   cryptographically bound by means of a Public Validation Token\
    \ (PVT)\n   (see Section 2) by the KMS.  Unlike a traditional public key, this\n\
    \   PVT requires no further explicit certification.\n   The verification primitive\
    \ within this scheme can be implemented\n   using projective representation of\
    \ elliptic curve points, without\n   arithmetic field divisions, and without explicitly\
    \ using the size of\n   the underlying cryptographic group.\n"
- title: 1.1.  Requirements Terminology
  contents:
  - "1.1.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Architecture
  contents:
  - "2.  Architecture\n   A KMS provisions key material for a set of communicating\
    \ devices (a\n   \"user community\").  Each device within the user community MUST\
    \ have\n   an Identifier (ID), which can be formed by its peers.  These\n   Identifiers\
    \ MUST be unique to devices (or users), and MAY change over\n   time.  As such,\
    \ all applications of this signature scheme MUST define\n   an unambiguous format\
    \ for Identifiers.  We consider the situation\n   where one device (the Signer)\
    \ wishes to sign a message that it is\n   sending to another (the Verifier). \
    \ Only the Signer's ID is used in\n   the signature scheme.\n   In advance, the\
    \ KMS chooses its KMS Secret Authentication Key (KSAK),\n   which is the root\
    \ of trust for all other key material in the scheme.\n   From this, the KMS derives\
    \ the KMS Public Authentication Key (KPAK),\n   which all devices will require\
    \ in order to verify signatures.  This\n   will be the root of trust for verification.\n\
    \   Before verification of any signatures, members of the user community\n   are\
    \ supplied with the KPAK.  The supply of the KPAK MUST be\n   authenticated by\
    \ the KMS, and this authentication MUST be verified by\n   each member of the\
    \ user community.  Confidentiality protection MAY\n   also be applied.\n   In\
    \ the description of the algorithms in this document, it is assumed\n   that there\
    \ is one KMS, one user community, and hence one KPAK.\n   Applications MAY support\
    \ multiple KPAKs, and some KPAKs could in fact\n   be \"private\" to certain communities\
    \ in certain circumstances.  The\n   method for determining which KPAK to use\
    \ (when more than one is\n   available) is out of scope.\n   The KMS generates\
    \ and provisions key material for each device.  It\n   MUST supply an SSK along\
    \ with a PVT to all devices that are to send\n   signed messages.  The mechanism\
    \ by which these SSKs are provided MUST\n   be secure, as the security of the\
    \ authentication provided by ECCSI\n   signatures is no stronger than the security\
    \ of this supply channel.\n   Before using the supplied key material (SSK, KPAK)\
    \ to form\n   signatures, the Sender MUST verify the key material (SSK) against\
    \ the\n   root of trust (KPAK) and against its own ID and its PVT, using the\n\
    \   algorithm defined in Section 5.1.2.\n   During the signing process, once the\
    \ Signer has formed its message,\n   it signs the message using its SSK.  It transmits\
    \ the Signature\n   (including the PVT), and MAY also transmit the message (in\
    \ cases\n   where the message is not known to the Verifier).  The Verifier MUST\n\
    \   then use the message, Signature, and Sender ID in verification\n   against\
    \ the KPAK.\n   This document specifies\n      *  an algorithm for creating a\
    \ KPAK from a KSAK, for a given\n         elliptic curve;\n      *  a format for\
    \ transporting a KPAK;\n      *  an algorithm for creating an SSK and a PVT from\
    \ a Signer's ID,\n         using the KSAK;\n      *  an algorithm for verifying\
    \ an SSK and a PVT against a Signer's\n         ID and KPAK;\n      *  an algorithm\
    \ for creating a Signature from a message, using a\n         Signer's ID with\
    \ a matching SSK and PVT;\n      *  a format for transporting a Signature;\n \
    \     *  an algorithm for verifying a Signature for a message, using a\n     \
    \    Signer's ID with the matching KPAK.\n   This document does not specify (but\
    \ comments on)\n      *  how to choose a valid and secure elliptic curve;\n  \
    \    *  which hash function to use;\n      *  how to format a Signer's ID;\n \
    \     *  how to format a message for signing;\n      *  how to manage and install\
    \ a KPAK;\n      *  how to transport or install an SSK.\n   As used in [RFC6509],\
    \ the elliptic curve and hash function are\n   specified in Section 2.1.1 of [RFC6509],\
    \ the format of Identifiers is\n   specified in Section 3.2 of [RFC6509], and\
    \ messages for signing are\n   formatted as specified in [RFC3830].\n"
- title: 3.  Notation
  contents:
  - '3.  Notation

    '
- title: 3.1.  Arithmetic
  contents:
  - "3.1.  Arithmetic\n   ECCSI relies on elliptic curve arithmetic.  If P and Q are\
    \ two\n   elliptic curve points, their addition is denoted P + Q.  Moreover,\n\
    \   the addition of P with itself k times is denoted [k]P.\n   F_p denotes the\
    \ finite field of p elements, where p is prime.  All\n   elliptic curve points\
    \ will be defined over F_p.\n   The curve is defined by the equation y^2 = x^3\
    \ - 3*x + B modulo p,\n   where B is an element of F_p.  Elliptic curve points,\
    \ other than the\n   group identity (0), are represented in the format P = (Px,Py),\
    \ where\n   Px and Py are the affine coordinates in F_p satisfying the above\n\
    \   equation.  In particular, a point P = (Px,Py) is said to lie on an\n   elliptic\
    \ curve if Py^2 - Px^3 + 3*Px - B = 0 modulo p.  The identity\n   point 0 will\
    \ require no representation.\n"
- title: 3.2.  Representations
  contents:
  - "3.2.  Representations\n   This section provides canonical representations of\
    \ values that MUST\n   be used to ensure interoperability of implementations.\
    \  The following\n   representations MUST be used for input into hash functions\
    \ and for\n   transmission.  In this document, concatenation of octet strings\
    \ s and\n   t is denoted s || t.  The logarithm base 2 of a real number a is\n\
    \   denoted lg(a).\n   Integers           Integers MUST be represented as an octet\
    \ string,\n                      with bit length a multiple of 8.  To achieve\
    \ this,\n                      the integer is represented most significant bit\n\
    \                      first, and padded with zero bits on the left until\n  \
    \                    an octet string of the necessary length is\n            \
    \          obtained.  This is the octet string representation\n              \
    \        described in Section 6 of [RFC6090].  There will\n                  \
    \    be no need to represent negative integers.  When\n                      transmitted\
    \ or hashed, such octet strings MUST\n                      have length N = Ceiling(lg(p)/8).\n\
    \   F_p elements       Elements of F_p MUST be represented as integers in\n  \
    \                    the range 0 to p-1 using the octet string\n             \
    \         representation defined above.  For use in ECCSI,\n                 \
    \     such octet strings MUST have length N =\n                      Ceiling(lg(p)/8).\n\
    \   Points on E        Elliptic curve points MUST be represented in\n        \
    \              uncompressed form (\"affine coordinates\") as\n               \
    \       defined in Section 2.2 of [RFC5480].  For an\n                      elliptic\
    \ curve point (x,y) with x and y in F_p,\n                      this representation\
    \ is given by 0x04 || x' || y',\n                      where x' is the N-octet\
    \ string representing x and\n                      y' is the N-octet string representing\
    \ y.\n"
- title: 3.3.  Format of Material
  contents:
  - "3.3.  Format of Material\n   This section describes the subfields of the different\
    \ objects used\n   within the protocol.\n   Signature = r || s || PVT   where\
    \ r and s are octet strings of length\n                               N = Ceiling(lg(p)/8)\
    \ representing\n                               integers, and PVT is an octet string\
    \ of\n                               length 2N+1 representing an elliptic\n  \
    \                             curve point, yielding a total signature\n      \
    \                         length of 4N+1 octets.  (Note that r and\n         \
    \                      s represent integers rather than elements\n           \
    \                    of F_p, and therefore it is possible that\n             \
    \                  either or both of them could equal or\n                   \
    \            exceed p.)\n"
- title: 4.  Parameters
  contents:
  - '4.  Parameters

    '
- title: 4.1.  Static Parameters
  contents:
  - "4.1.  Static Parameters\n   The following static parameters are fixed for each\
    \ implementation.\n   They are not intended to change frequently, and MUST be\
    \ specified for\n   each user community.  Note that these parameters MAY be shared\
    \ across\n   multiple KMSs.\n      n                  A security parameter; the\
    \ size in bits of the\n                         prime p over which elliptic curve\
    \ cryptography\n                         is to be performed.\n      N = Ceiling(n/8)\
    \   The number of octets used to represent fields r\n                        \
    \ and s in a Signature.  Also the number of\n                         octets output\
    \ by the hash function (see below).\n      p                  A prime number of\
    \ size n bits.  The finite\n                         field with p elements is\
    \ denoted F_p.\n      E                  An elliptic curve defined over F_p, having\
    \ a\n                         subgroup of prime order q.\n      B            \
    \      An element of F_p, where E is defined by the\n                        \
    \ formula y^2 = x^3 - 3*x + B modulo p.\n      G                  A point on the\
    \ elliptic curve E that generates\n                         the subgroup of order\
    \ q.\n      q                  The prime q is defined to be the order of G in\n\
    \                         E over F_p.\n      Hash               A cryptographic\
    \ hash function mapping arbitrary\n                         strings to strings\
    \ of N octets.  If a, b, c,\n                         ... are strings, then hash(\
    \ a || b || c || ...)\n                         denotes the result obtained by\
    \ hashing the\n                         concatenation of these strings.\n    \
    \  Identifiers        The method for deriving user Identifiers.  The\n       \
    \                  format of Identifiers MUST be specified by each\n         \
    \                implementation.  It MUST be possible for each\n             \
    \            device to derive the Identifier for every\n                     \
    \    device with which it needs to communicate.  In\n                        \
    \ this document, ID will denote the correctly\n                         formatted\
    \ Identifier string of the Signer.\n                         ECCSI makes use of\
    \ the Signer Identifier only,\n                         though an implementation\
    \ MAY make use of other\n                         Identifiers when constructing\
    \ the message to be\n                         signed.  Identifier formats MAY\
    \ include a\n                         timestamp to allow for automatic expiration\
    \ of\n                         key material.\n   It is RECOMMENDED that p, E,\
    \ and G are chosen to be standardized\n   values.  In particular, it is RECOMMENDED\
    \ that the curves and base\n   points defined in [FIPS186-3] be used.\n"
- title: 4.2.  Community Parameters
  contents:
  - "4.2.  Community Parameters\n   The following community parameter MUST be supplied\
    \ to devices each\n   time the root of trust is changed.\n      KPAK  The KMS\
    \ Public Authentication Key (KPAK) is the root of\n            trust for authentication.\
    \  It is derived from the KSAK in\n            the KMS.  This value MUST be provisioned\
    \ in a trusted\n            fashion, such that each device that receives it has\n\
    \            assurance that it is the genuine KPAK belonging to its KMS.\n   \
    \         Before use, each device MUST check that the supplied KPAK\n        \
    \    lies on the elliptic curve E.\n   The KMS MUST fix the KPAK to be KPAK =\
    \ [KSAK]G, where the KSAK MUST\n   be chosen to be a random secret non-zero integer\
    \ modulo q.  The value\n   of the KSAK MUST be kept secret to the KMS.\n"
- title: 5.  Algorithms
  contents:
  - '5.  Algorithms

    '
- title: 5.1.  User Key Material
  contents:
  - "5.1.  User Key Material\n   To create signatures, each Signer requires a Secret\
    \ Signing Key (SSK)\n   and a Public Validation Token (PVT).  The SSK is an integer,\
    \ and the\n   PVT is an elliptic curve point.  The SSK MUST be kept secret (to\
    \ the\n   Signer and KMS), but the PVT need not be kept secret.  A different\n\
    \   (SSK,PVT) pair will be needed for each Signer ID.\n"
- title: 5.1.1.  Algorithm for Constructing (SSK,PVT) Pair
  contents:
  - "5.1.1.  Algorithm for Constructing (SSK,PVT) Pair\n   The KMS constructs a (SSK,PVT)\
    \ pair from the Signer's ID, the KMS\n   secret (KSAK), and the root of trust\
    \ (KPAK).  To do this, the KMS\n   MUST perform the following procedure:\n   \
    \   1) Choose v, a random (ephemeral) non-zero element of F_q;\n      2) Compute\
    \ PVT = [v]G (this MUST be represented canonically -- see\n         Section 3.2);\n\
    \      3) Compute a hash value HS = hash( G || KPAK || ID || PVT ),\n        \
    \ an N-octet integer;\n      4) Compute SSK = ( KSAK + HS * v ) modulo q;\n  \
    \    5) If either the SSK or HS is zero modulo q, the KMS MUST erase\n       \
    \  the SSK and abort or restart the procedure with a fresh value\n         of\
    \ v;\n      6) Output the (SSK,PVT) pair.  The KMS MUST then erase the value\n\
    \         v.\n   The method for transporting the SSK to the legitimate Signer\
    \ device\n   is out of scope for this document, but the SSK MUST be provisioned\
    \ by\n   the KMS using a method that protects its confidentiality.\n   If necessary,\
    \ the KMS MAY create multiple (SSK,PVT) pairs for the\n   same Identifier.\n"
- title: 5.1.2.  Algorithm for Validating a Received SSK
  contents:
  - "5.1.2.  Algorithm for Validating a Received SSK\n   Every SSK MUST be validated\
    \ before being installed as a signing key.\n   The Signer uses its ID and the\
    \ KPAK to validate a received (SSK,PVT)\n   pair.  To do this validation, the\
    \ Signer MUST perform the following\n   procedure, passing all checks:\n     \
    \ 1) Validate that the PVT lies on the elliptic curve E;\n      2) Compute HS\
    \ = hash( G || KPAK || ID || PVT ), an N-octet\n         integer.  The integer\
    \ HS SHOULD be stored with the SSK for\n         later use;\n      3) Validate\
    \ that KPAK = [SSK]G - [HS]PVT.\n"
- title: 5.2.  Signatures
  contents:
  - '5.2.  Signatures

    '
- title: 5.2.1.  Algorithm for Signing
  contents:
  - "5.2.1.  Algorithm for Signing\n   To sign a message (M), the Signer requires\n\
    \      *  the KMS Public Authentication Key, KPAK;\n      *  the Signer's own\
    \ Identifier, ID;\n      *  its Secret Signing Key, SSK;\n      *  its Public\
    \ Validation Token, PVT = (PVTx,PVTy).\n   These values, with the exception of\
    \ ID, MUST have been provided by\n   the KMS.  The value of ID is derived by the\
    \ Signer using the\n   community-defined method for formatting Identifiers.\n\
    \   The following procedure MUST be used by the Signer to compute the\n   signature:\n\
    \      1) Choose a random (ephemeral) non-zero value j in F_q;\n      2) Compute\
    \ J = [j]G (this MUST be represented canonically).\n         Viewing J in affine\
    \ coordinates J = (Jx,Jy), assign to r the\n         N-octet integer representing\
    \ Jx;\n      3) Recall (or recompute) HS, and use it to compute a hash value\n\
    \         HE = hash( HS || r || M );\n      4) Verify that HE + r * SSK is non-zero\
    \ modulo q; if this check\n         fails, the Signer MUST abort or restart this\
    \ procedure with a\n         fresh value of j;\n      5) Compute s' = ( (( HE\
    \ + r * SSK )^-1) * j ) modulo q; the Signer\n         MUST then erase the value\
    \ j;\n      6) If s' is too big to fit within an N-octet integer, then set the\n\
    \         N-octet integer s = q - s'; otherwise, set the N-octet integer\n   \
    \      s = s' (note that since p is less than 2^n, by Hasse's theorem\n      \
    \   on elliptic curves, q < 2^n + 2^(n/2 + 1) + 1.  Therefore, if\n         s'\
    \ > 2^n, we have q - s' < 2(n/2 + 1) + 1.  Thus, s is\n         guaranteed to\
    \ fit within an N-octet integer);\n      7) Output the signature as Signature\
    \ = ( r || s || PVT ).\n   Note that step 6) is necessary because it is possible\
    \ for q (and\n   hence for elements of F_q) to be too big to fit within N octets.\
    \  The\n   Signer MAY instead elect to set s to be the least integer of s' and\n\
    \   q - s', represented in N octets.\n"
- title: 5.2.2.  Algorithm for Verifying
  contents:
  - "5.2.2.  Algorithm for Verifying\n   The algorithm provided assumes that the Verifier\
    \ computes points on\n   elliptic curves using affine coordinates.  However, the\
    \ Verifier MAY\n   perform elliptic curve operations using any appropriate\n \
    \  representation of points that achieves the equivalent operations.\n   To verify\
    \ a Signature ( r || s || PVT ) against a Signer's Identifier\n   (ID), a message\
    \ (M), and a pre-installed root of trust (KPAK), the\n   Verifier MUST perform\
    \ a procedure equivalent to the following:\n      1) The Verifier MUST check that\
    \ the PVT lies on the elliptic\n         curve E;\n      2) Compute HS = hash(\
    \ G || KPAK || ID || PVT );\n      3) Compute HE = hash( HS || r || M );\n   \
    \   4) Y = [HS]PVT + KPAK;\n      5) Compute J = [s]( [HE]G + [r]Y );\n      6)\
    \ Viewing J in affine coordinates (Jx,Jy), the Verifier MUST\n         check that\
    \ Jx = r modulo p, and that Jx modulo p is non-zero,\n         before accepting\
    \ the Signature as valid.\n   It is anticipated that the ID, message (M), and\
    \ KPAK will be\n   implicitly understood due to context, but any of these values\
    \ MAY\n   also be included in signaling.\n   Note that the parameter q is not\
    \ needed during verification.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The ECCSI cryptographic algorithm is based upon\
    \ [ECDSA].  In fact,\n   step 5) in the verification algorithm above is the same\
    \ as the\n   verification stage in ECDSA.  The only difference between ECDSA and\n\
    \   ECCSI is that in ECCSI the 'public key', Y, is derived from the\n   Signer\
    \ ID by the Verifier (whereas in ECDSA the public key is fixed).\n   It is therefore\
    \ assumed that the security of ECCSI depends entirely\n   on the secrecy of the\
    \ secret keys.  In addition, to recover secret\n   keys, one will need to perform\
    \ computationally intensive\n   cryptanalytic attacks.\n   The KSAK provides the\
    \ security for each device provisioned by the\n   KMS.  It MUST NOT be revealed\
    \ to any entity other than the KMS that\n   holds it.  Each user's SSK authenticates\
    \ the user as being associated\n   with the ID to which the SSK is assigned by\
    \ the KMS.  This key MUST\n   NOT be revealed to any entity other than the KMS\
    \ and the authorized\n   user.\n   The order of the base point G used in ECCSI\
    \ MUST be a large prime q.\n   If k bits of symmetric security are needed, Ceiling(lg(q))\
    \ MUST be at\n   least 2*k.\n   It is RECOMMENDED that the curves and base points\
    \ defined in\n   [FIPS186-3] be used, since these curves are suitable for\n  \
    \ cryptographic use.  However, if other curves are used, the security\n   of the\
    \ curves MUST be assessed.\n   In order to ensure that the SSK is only received\
    \ by an authorized\n   device, it MUST be provided through a secure channel. \
    \ The strength\n   of the authentication offered by this signature scheme is no\
    \ greater\n   than the security provided by this delivery channel.\n   Identifiers\
    \ MUST be defined unambiguously by each application of\n   ECCSI.  Note that it\
    \ is not necessary to use a hash function to\n   compose an Identifier string.\
    \  In this way, any weaknesses that might\n   otherwise be caused by collisions\
    \ in hash functions can be avoided\n   without reliance on the structure of the\
    \ Identifier format.\n   Applications of ECCSI MAY include a time/date component\
    \ in their\n   Identifier format to ensure that Identifiers (and hence SSKs) are\n\
    \   only valid for a fixed period of time.\n   The use of the ephemeral value\
    \ r in the hash HE significantly reduces\n   the scope for offline attacks, improving\
    \ the overall security, as\n   compared to [ECDSA].  Furthermore, if Identifiers\
    \ are specified to\n   contain date-stamps, then all Identifiers, SSKs, signatures,\
    \ and hash\n   values will periodically become deprecated automatically, reducing\n\
    \   the need for revocation and other additional management methods.\n   The randomness\
    \ of values stipulated to be selected at random, as\n   described in this document,\
    \ is essential to the security provided by\n   ECCSI.  If the value of the KSAK\
    \ can be predicted, then any\n   signatures can be forged.  Similarly, if the\
    \ value of v used by the\n   KMS to create a user's SSK can be predicted, then\
    \ the value of the\n   KSAK could be recovered, which would allow signatures to\
    \ be forged.\n   If the value of j used by a user is predictable, then the value\
    \ of\n   his SSK could be recovered.  This would allow that user's signatures\n\
    \   to be forged.  Guidance on the generation of random values for\n   security\
    \ can be found in [RFC4086].\n   Note that in most instances, the value s in the\
    \ Signature can be\n   replaced by q - s.  Thus, the malleability of ECCSI signatures\
    \ is\n   similar to that in [ECDSA]; malleability is available but also very\n\
    \   limited.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [ECDSA]      X9.62-2005, \"Public Key Cryptography\
    \ for the Financial\n                Services Industry: The Elliptic Curve Digital\
    \ Signature\n                Algorithm (ECDSA)\", November 2005.\n   [FIPS186-3]\
    \  Federal Information Processing Standards Publication\n                (FIPS\
    \ PUB) 186-3, \"Digital Signature Standard (DSS)\",\n                June 2009.\n\
    \   [RFC2119]    Bradner, S., \"Key words for use in RFCs to Indicate\n      \
    \          Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC5480] \
    \   Turner, S., Brown, D., Yiu, K., Housley, R., and T.\n                Polk,\
    \ \"Elliptic Curve Cryptography Subject Public Key\n                Information\"\
    , RFC 5480, March 2009.\n   [RFC6090]    McGrew, D., Igoe, K., and M. Salter,\
    \ \"Fundamental\n                Elliptic Curve Cryptography Algorithms\", RFC\
    \ 6090,\n                February 2011.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [BA]         Arazi, Benjamin, \"Certification\
    \ of DL/EC Keys\", paper\n                submitted to P1363 meeting, August 1998,\n\
    \                <http://grouper.ieee.org/groups/1363/StudyGroup/\n          \
    \      contributions/arazi.doc>.\n   [FIPS180-3]  Federal Information Processing\
    \ Standards Publication\n                (FIPS PUB) 180-3, \"Secure Hash Standard\
    \ (SHS)\",\n                October 2008.\n   [RFC3830]    Arkko, J., Carrara,\
    \ E., Lindholm, F., Naslund, M., and\n                K. Norrman, \"MIKEY: Multimedia\
    \ Internet KEYing\",\n                RFC 3830, August 2004.\n   [RFC4086]   \
    \ Eastlake 3rd, D., Schiller, J., and S. Crocker,\n                \"Randomness\
    \ Requirements for Security\", BCP 106,\n                RFC 4086, June 2005.\n\
    \   [RFC6508]    Groves, M., \"Sakai-Kasahara Key Encryption (SAKKE)\",\n    \
    \            RFC 6508, February 2012.\n   [RFC6509]    Groves, M., \"MIKEY-SAKKE:\
    \ Sakai-Kasahara Key Encryption\n                in Multimedia Internet KEYing\
    \ (MIKEY)\", RFC 6509,\n                February 2012.\n"
- title: Appendix A.  Test Data
  contents:
  - "Appendix A.  Test Data\n   This appendix provides test data built from the NIST\
    \ P-256 curve and\n   base point.  SHA-256 (as defined in [FIPS180-3]) is used\
    \ as the hash\n   function.  The keys and ephemerals -- KSAK, v, and j -- are\
    \ arbitrary\n   and for illustration only.\n      // --------------------------------------------------------\n\
    \      // Global parameters\n      n       := 256;\n      N       := 32;\n   \
    \   p       := 0x   FFFFFFFF 00000001 00000000 00000000\n                    \
    \  00000000 FFFFFFFF FFFFFFFF FFFFFFFF;\n      Hash    := SHA-256;\n      // --------------------------------------------------------\n\
    \      // Community parameters\n      B       := 0x   5AC635D8 AA3A93E7 B3EBBD55\
    \ 769886BC\n                      651D06B0 CC53B0F6 3BCE3C3E 27D2604B;\n     \
    \ q       := 0x   FFFFFFFF 00000000 FFFFFFFF FFFFFFFF\n                      BCE6FAAD\
    \ A7179E84 F3B9CAC2 FC632551;\n      G       := 0x   04\n                    \
    \  6B17D1F2 E12C4247 F8BCE6E5 63A440F2\n                      77037D81 2DEB33A0\
    \ F4A13945 D898C296\n                      4FE342E2 FE1A7F9B 8EE7EB4A 7C0F9E16\n\
    \                      2BCE3357 6B315ECE CBB64068 37BF51F5;\n      KSAK    :=\
    \ 0x   12345;\n      KPAK    := 0x   04\n                      50D4670B DE75244F\
    \ 28D2838A 0D25558A\n                      7A72686D 4522D4C8 273FB644 2AEBFA93\n\
    \                      DBDD3755 1AFD263B 5DFD617F 3960C65A\n                 \
    \     8C298850 FF99F203 66DCE7D4 367217F4;\n      // --------------------------------------------------------\n\
    \      // Signer ID\n      ID      := \"2011-02\\0tel:+447700900123\\0\",\n  \
    \             = 0x   3230 31312D30 32007465 6C3A2B34\n                      34373730\
    \ 30393030 31323300;\n      // --------------------------------------------------------\n\
    \      // Creating SSK and PVT\n      v       := 0x   23456;\n      PVT     :=\
    \ 0x   04\n                      758A1427 79BE89E8 29E71984 CB40EF75\n       \
    \               8CC4AD77 5FC5B9A3 E1C8ED52 F6FA36D9\n                      A79D2476\
    \ 92F4EDA3 A6BDAB77 D6AA6474\n                      A464AE49 34663C52 65BA7018\
    \ BA091F79;\n      HS      := hash( 0x 04\n                          6B17D1F2\
    \ E12C4247 F8BCE6E5 63A440F2\n                          77037D81 2DEB33A0 F4A13945\
    \ D898C296\n                          4FE342E2 FE1A7F9B 8EE7EB4A 7C0F9E16\n  \
    \                        2BCE3357 6B315ECE CBB64068 37BF51F5\n               \
    \           04\n                          50D4670B DE75244F 28D2838A 0D25558A\n\
    \                          7A72686D 4522D4C8 273FB644 2AEBFA93\n             \
    \             DBDD3755 1AFD263B 5DFD617F 3960C65A\n                          8C298850\
    \ FF99F203 66DCE7D4 367217F4\n                          32303131 2D303200 74656C3A\
    \ 2B343437\n                          37303039 30303132 3300\n               \
    \           04\n                          758A1427 79BE89E8 29E71984 CB40EF75\n\
    \                          8CC4AD77 5FC5B9A3 E1C8ED52 F6FA36D9\n             \
    \             A79D2476 92F4EDA3 A6BDAB77 D6AA6474\n                          A464AE49\
    \ 34663C52 65BA7018 BA091F79 ),\n               = 0x       490F3FEB BC1C902F 6289723D\
    \ 7F8CBF79\n                          DB889308 49D19F38 F0295B5C 276C14D1;\n \
    \     SSK     := 0x       23F374AE 1F4033F3 E9DBDDAA EF20F4CF\n              \
    \            0B86BBD5 A138A5AE 9E7E006B 34489A0D;\n      // --------------------------------------------------------\n\
    \      // Creating a Signature\n      M       := \"message\\0\",\n           \
    \    = 0x   6D657373 61676500;\n      j       := 0x   34567;\n      J       :=\
    \ 0x   04\n                      269D4C8F DEB66A74 E4EF8C0D 5DCC597D\n       \
    \               DFE6029C 2AFFC493 6008CD2C C1045D81\n                      6DDA6A13\
    \ 10F4B067 BD5DABDA D741B7CE\n                      F36457E1 96B1BFA9 7FD5F8FB\
    \ B3926ADB;\n      r       := 0x   269D4C8F DEB66A74 E4EF8C0D 5DCC597D\n     \
    \                 DFE6029C 2AFFC493 6008CD2C C1045D81;\n      HE      := hash(\
    \ 0x\n                      490F3FEB BC1C902F 6289723D 7F8CBF79\n            \
    \          DB889308 49D19F38 F0295B5C 276C14D1\n                      269D4C8F\
    \ DEB66A74 E4EF8C0D 5DCC597D\n                      DFE6029C 2AFFC493 6008CD2C\
    \ C1045D81\n                      6D657373 61676500 ),\n               = 0x  \
    \ 111F90EA E8271C96 DF9B3D67 26768D9E\n                      E9B18145 D7EC152C\
    \ FA9C23D1 C4F02285;\n      s'      := 0x   E09B528D 0EF8D6DF 1AA3ECBF 80110CFC\n\
    \                      EC9FC682 52CEBB67 9F413484 6940CCFD;\n      s       :=\
    \ 0x   E09B528D 0EF8D6DF 1AA3ECBF 80110CFC\n                      EC9FC682 52CEBB67\
    \ 9F413484 6940CCFD;\n      Sig     := 0x   269D4C8F DEB66A74 E4EF8C0D 5DCC597D\n\
    \                      DFE6029C 2AFFC493 6008CD2C C1045D81\n                 \
    \     E09B528D 0EF8D6DF 1AA3ECBF 80110CFC\n                      EC9FC682 52CEBB67\
    \ 9F413484 6940CCFD\n                      04\n                      758A1427\
    \ 79BE89E8 29E71984 CB40EF75\n                      8CC4AD77 5FC5B9A3 E1C8ED52\
    \ F6FA36D9\n                      A79D2476 92F4EDA3 A6BDAB77 D6AA6474\n      \
    \                A464AE49 34663C52 65BA7018 BA091F79;\n      // --------------------------------------------------------\n\
    \      // Verifying a Signature\n      Y       := 0x   04\n                  \
    \    833898D9 39C0013B B0502728 6F95CCE0\n                      37C11BD2 5799423C\
    \ 76E48362 A4959978\n                      95D0473A 1CD6186E E9F0C104 B472499E\n\
    \                      1A24D6CE 3D85173F 02EBBD94 5C25F604;\n      J       :=\
    \ 0x   04\n                      269D4C8F DEB66A74 E4EF8C0D 5DCC597D\n       \
    \               DFE6029C 2AFFC493 6008CD2C C1045D81\n                      6DDA6A13\
    \ 10F4B067 BD5DABDA D741B7CE\n                      F36457E1 96B1BFA9 7FD5F8FB\
    \ B3926ADB;\n      Jx      := 0x   269D4C8F DEB66A74 E4EF8C0D 5DCC597D\n     \
    \                 DFE6029C 2AFFC493 6008CD2C C1045D81;\n      Jx = r  modulo p\n\
    \      // --------------------------------------------------------\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Michael Groves\n   CESG\n   Hubble Road\n   Cheltenham\n\
    \   GL51 8HJ\n   UK\n   EMail: Michael.Groves@cesg.gsi.gov.uk\n"
