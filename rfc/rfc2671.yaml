- title: __initial_text__
  contents:
  - '                  Extension Mechanisms for DNS (EDNS0)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Domain Name System's wire protocol includes a number of fixed\n\
    \   fields whose range has been or soon will be exhausted and does not\n   allow\
    \ clients to advertise their capabilities to servers.  This\n   document describes\
    \ backward compatible mechanisms for allowing the\n   protocol to grow.\n"
- title: 1 - Rationale and Scope
  contents:
  - '1 - Rationale and Scope

    '
- title: 1.1. DNS (see [RFC1035]) specifies a Message Format and within such
  contents:
  - "1.1. DNS (see [RFC1035]) specifies a Message Format and within such\n     messages\
    \ there are standard formats for encoding options, errors,\n     and name compression.\
    \  The maximum allowable size of a DNS Message\n     is fixed.  Many of DNS's\
    \ protocol limits are too small for uses\n     which are or which are desired\
    \ to become common.  There is no way\n     for implementations to advertise their\
    \ capabilities.\n"
- title: 1.2. Existing clients will not know how to interpret the protocol
  contents:
  - "1.2. Existing clients will not know how to interpret the protocol\n     extensions\
    \ detailed here.  In practice, these clients will be\n     upgraded when they\
    \ have need of a new feature, and only new\n     features will make use of the\
    \ extensions.  We must however take\n     account of client behaviour in the face\
    \ of extra fields, and design\n     a fallback scheme for interoperability with\
    \ these clients.\n"
- title: 2 - Affected Protocol Elements
  contents:
  - '2 - Affected Protocol Elements

    '
- title: 2.1. The DNS Message Header's (see [RFC1035 4.1.1]) second full 16-bit
  contents:
  - "2.1. The DNS Message Header's (see [RFC1035 4.1.1]) second full 16-bit\n    \
    \ word is divided into a 4-bit OPCODE, a 4-bit RCODE, and a number of\n     1-bit\
    \ flags.  The original reserved Z bits have been allocated to\n     various purposes,\
    \ and most of the RCODE values are now in use.\n     More flags and more possible\
    \ RCODEs are needed.\n"
- title: 2.2. The first two bits of a wire format domain label are used to denote
  contents:
  - "2.2. The first two bits of a wire format domain label are used to denote\n  \
    \   the type of the label.  [RFC1035 4.1.4] allocates two of the four\n     possible\
    \ types and reserves the other two.  Proposals for use of\n     the remaining\
    \ types far outnumber those available.  More label\n     types are needed.\n"
- title: 2.3. DNS Messages are limited to 512 octets in size when sent over UDP.
  contents:
  - "2.3. DNS Messages are limited to 512 octets in size when sent over UDP.\n   \
    \  While the minimum maximum reassembly buffer size still allows a\n     limit\
    \ of 512 octets of UDP payload, most of the hosts now connected\n     to the Internet\
    \ are able to reassemble larger datagrams.  Some\n     mechanism must be created\
    \ to allow requestors to advertise larger\n     buffer sizes to responders.\n"
- title: 3 - Extended Label Types
  contents:
  - '3 - Extended Label Types

    '
- title: 3.1. The "0 1" label type will now indicate an extended label type,
  contents:
  - "3.1. The \"0 1\" label type will now indicate an extended label type,\n     whose\
    \ value is encoded in the lower six bits of the first octet of\n     a label.\
    \  All subsequently developed label types should be encoded\n     using an extended\
    \ label type.\n"
- title: 3.2. The "1 1 1 1 1 1" extended label type will be reserved for future
  contents:
  - "3.2. The \"1 1 1 1 1 1\" extended label type will be reserved for future\n  \
    \   expansion of the extended label type code space.\n"
- title: 4 - OPT pseudo-RR
  contents:
  - '4 - OPT pseudo-RR

    '
- title: 4.1. One OPT pseudo-RR can be added to the additional data section of
  contents:
  - "4.1. One OPT pseudo-RR can be added to the additional data section of\n     either\
    \ a request or a response.  An OPT is called a pseudo-RR\n     because it pertains\
    \ to a particular transport level message and not\n     to any actual DNS data.\
    \  OPT RRs shall never be cached, forwarded,\n     or stored in or loaded from\
    \ master files.  The quantity of OPT\n     pseudo-RRs per message shall be either\
    \ zero or one, but not\n     greater.\n"
- title: 4.2. An OPT RR has a fixed part and a variable set of options expressed
  contents:
  - "4.2. An OPT RR has a fixed part and a variable set of options expressed\n   \
    \  as {attribute, value} pairs.  The fixed part holds some DNS meta\n     data\
    \ and also a small collection of new protocol elements which we\n     expect to\
    \ be so popular that it would be a waste of wire space to\n     encode them as\
    \ {attribute, value} pairs.\n"
- title: '4.3. The fixed part of an OPT RR is structured as follows:'
  contents:
  - "4.3. The fixed part of an OPT RR is structured as follows:\n     Field Name \
    \  Field Type     Description\n     ------------------------------------------------------\n\
    \     NAME         domain name    empty (root domain)\n     TYPE         u_int16_t\
    \      OPT\n     CLASS        u_int16_t      sender's UDP payload size\n     TTL\
    \          u_int32_t      extended RCODE and flags\n     RDLEN        u_int16_t\
    \      describes RDATA\n     RDATA        octet stream   {attribute,value} pairs\n"
- title: 4.4. The variable part of an OPT RR is encoded in its RDATA and is
  contents:
  - "4.4. The variable part of an OPT RR is encoded in its RDATA and is\n     structured\
    \ as zero or more of the following:\n                +0 (MSB)                \
    \            +1 (LSB)\n     +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \  0: |                          OPTION-CODE                          |\n    \
    \ +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n  2: |  \
    \                       OPTION-LENGTH                         |\n     +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \  4: |                                                               |\n    \
    \ /                          OPTION-DATA                          /\n     /  \
    \                                                             /\n     +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   OPTION-CODE    (Assigned by IANA.)\n   OPTION-LENGTH  Size (in octets) of\
    \ OPTION-DATA.\n   OPTION-DATA    Varies per OPTION-CODE.\n"
- title: 4.5. The sender's UDP payload size (which OPT stores in the RR CLASS
  contents:
  - "4.5. The sender's UDP payload size (which OPT stores in the RR CLASS\n     field)\
    \ is the number of octets of the largest UDP payload that can\n     be reassembled\
    \ and delivered in the sender's network stack.  Note\n     that path MTU, with\
    \ or without fragmentation, may be smaller than\n     this.\n"
- title: 4.5.1. Note that a 512-octet UDP payload requires a 576-octet IP
  contents:
  - "4.5.1. Note that a 512-octet UDP payload requires a 576-octet IP\n       reassembly\
    \ buffer.  Choosing 1280 on an Ethernet connected\n       requestor would be reasonable.\
    \  The consequence of choosing too\n       large a value may be an ICMP message\
    \ from an intermediate\n       gateway, or even a silent drop of the response\
    \ message.\n"
- title: 4.5.2. Both requestors and responders are advised to take account of the
  contents:
  - "4.5.2. Both requestors and responders are advised to take account of the\n  \
    \     path's discovered MTU (if already known) when considering message\n    \
    \   sizes.\n"
- title: 4.5.3. The requestor's maximum payload size can change over time, and
  contents:
  - "4.5.3. The requestor's maximum payload size can change over time, and\n     \
    \  should therefore not be cached for use beyond the transaction in\n       which\
    \ it is advertised.\n"
- title: 4.5.4. The responder's maximum payload size can change over time, but
  contents:
  - "4.5.4. The responder's maximum payload size can change over time, but\n     \
    \  can be reasonably expected to remain constant between two\n       sequential\
    \ transactions; for example, a meaningless QUERY to\n       discover a responder's\
    \ maximum UDP payload size, followed\n       immediately by an UPDATE which takes\
    \ advantage of this size.\n       (This is considered preferrable to the outright\
    \ use of TCP for\n       oversized requests, if there is any reason to suspect\
    \ that the\n       responder implements EDNS, and if a request will not fit in\
    \ the\n       default 512 payload size limit.)\n"
- title: 4.5.5. Due to transaction overhead, it is unwise to advertise an
  contents:
  - "4.5.5. Due to transaction overhead, it is unwise to advertise an\n       architectural\
    \ limit as a maximum UDP payload size.  Just because\n       your stack can reassemble\
    \ 64KB datagrams, don't assume that you\n       want to spend more than about\
    \ 4KB of state memory per ongoing\n       transaction.\n"
- title: 4.6. The extended RCODE and flags (which OPT stores in the RR TTL field)
  contents:
  - "4.6. The extended RCODE and flags (which OPT stores in the RR TTL field)\n  \
    \   are structured as follows:\n                 +0 (MSB)                    \
    \        +1 (LSB)\n      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   0: |         EXTENDED-RCODE        |            VERSION            |\n   \
    \   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n   2: |\
    \                               Z                               |\n      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   EXTENDED-RCODE  Forms upper 8 bits of extended 12-bit RCODE.  Note\n     \
    \              that EXTENDED-RCODE value \"0\" indicates that an\n           \
    \        unextended RCODE is in use (values \"0\" through \"15\").\n   VERSION\
    \         Indicates the implementation level of whoever sets\n               \
    \    it.  Full conformance with this specification is\n                   indicated\
    \ by version \"0.\"  Requestors are encouraged\n                   to set this\
    \ to the lowest implemented level capable\n                   of expressing a\
    \ transaction, to minimize the\n                   responder and network load\
    \ of discovering the\n                   greatest common implementation level\
    \ between\n                   requestor and responder.  A requestor's version\n\
    \                   numbering strategy should ideally be a run time\n        \
    \           configuration option.\n                   If a responder does not\
    \ implement the VERSION level\n                   of the request, then it answers\
    \ with RCODE=BADVERS.\n                   All responses will be limited in format\
    \ to the\n                   VERSION level of the request, but the VERSION of\
    \ each\n                   response will be the highest implementation level of\n\
    \                   the responder.  In this way a requestor will learn\n     \
    \              the implementation level of a responder as a side\n           \
    \        effect of every response, including error responses,\n              \
    \     including RCODE=BADVERS.\n   Z               Set to zero by senders and\
    \ ignored by receivers,\n                   unless modified in a subsequent specification.\n"
- title: 5 - Transport Considerations
  contents:
  - '5 - Transport Considerations

    '
- title: 5.1. The presence of an OPT pseudo-RR in a request should be taken as an
  contents:
  - "5.1. The presence of an OPT pseudo-RR in a request should be taken as an\n  \
    \   indication that the requestor fully implements the given version of\n    \
    \ EDNS, and can correctly understand any response that conforms to\n     that\
    \ feature's specification.\n"
- title: 5.2. Lack of use of these features in a request must be taken as an
  contents:
  - "5.2. Lack of use of these features in a request must be taken as an\n     indication\
    \ that the requestor does not implement any part of this\n     specification and\
    \ that the responder may make no use of any\n     protocol extension described\
    \ here in its response.\n"
- title: 5.3. Responders who do not understand these protocol extensions are
  contents:
  - "5.3. Responders who do not understand these protocol extensions are\n     expected\
    \ to send a response with RCODE NOTIMPL, FORMERR, or\n     SERVFAIL.  Therefore\
    \ use of extensions should be \"probed\" such that\n     a responder who isn't\
    \ known to support them be allowed a retry with\n     no extensions if it responds\
    \ with such an RCODE.  If a responder's\n     capability level is cached by a\
    \ requestor, a new probe should be\n     sent periodically to test for changes\
    \ to responder capability.\n"
- title: 6 - Security Considerations
  contents:
  - "6 - Security Considerations\n     Requestor-side specification of the maximum\
    \ buffer size may open a\n     new DNS denial of service attack if responders\
    \ can be made to send\n     messages which are too large for intermediate gateways\
    \ to forward,\n     thus leading to potential ICMP storms between gateways and\n\
    \     responders.\n"
- title: 7 - IANA Considerations
  contents:
  - "7 - IANA Considerations\n     The IANA has assigned RR type code 41 for OPT.\n\
    \     It is the recommendation of this document and its working group\n     that\
    \ IANA create a registry for EDNS Extended Label Types, for EDNS\n     Option\
    \ Codes, and for EDNS Version Numbers.\n     This document assigns label type\
    \ 0b01xxxxxx as \"EDNS Extended Label\n     Type.\"  We request that IANA record\
    \ this assignment.\n     This document assigns extended label type 0bxx111111\
    \ as \"Reserved\n     for future extended label types.\"  We request that IANA\
    \ record this\n     assignment.\n     This document assigns option code 65535\
    \ to \"Reserved for future\n     expansion.\"\n     This document expands the\
    \ RCODE space from 4 bits to 12 bits.  This\n     will allow IANA to assign more\
    \ than the 16 distinct RCODE values\n     allowed in [RFC1035].\n     This document\
    \ assigns EDNS Extended RCODE \"16\" to \"BADVERS\".\n     IESG approval should\
    \ be required to create new entries in the EDNS\n     Extended Label Type or EDNS\
    \ Version Number registries, while any\n     published RFC (including Informational,\
    \ Experimental, or BCP)\n     should be grounds for allocation of an EDNS Option\
    \ Code.\n"
- title: 8 - Acknowledgements
  contents:
  - "8 - Acknowledgements\n     Paul Mockapetris, Mark Andrews, Robert Elz, Don Lewis,\
    \ Bob Halley,\n     Donald Eastlake, Rob Austein, Matt Crawford, Randy Bush, and\
    \ Thomas\n     Narten were each instrumental in creating and refining this\n \
    \    specification.\n"
- title: 9 - References
  contents:
  - "9 - References\n    [RFC1035]  Mockapetris, P., \"Domain Names - Implementation\
    \ and\n               Specification\", STD 13, RFC 1035, November 1987.\n"
- title: 10 - Author's Address
  contents:
  - "10 - Author's Address\n   Paul Vixie\n   Internet Software Consortium\n   950\
    \ Charter Street\n   Redwood City, CA 94063\n   Phone: +1 650 779 7001\n   EMail:\
    \ vixie@isc.org\n"
- title: 11 - Full Copyright Statement
  contents:
  - "11 - Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
