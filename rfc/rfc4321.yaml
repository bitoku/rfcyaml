- title: __initial_text__
  contents:
  - "                Problems Identified Associated with the\n       Session Initiation\
    \ Protocol's (SIP) Non-INVITE Transaction\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes several problems that have been identified\n\
    \   with the Session Initiation Protocol's (SIP) non-INVITE transaction.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Problems under the Current Specifications .......................2\n\
    \      1.1. NITs must complete immediately or risk losing a race .......2\n  \
    \    1.2. Provisional responses can delay recovery from lost\n           final\
    \ responses ............................................3\n      1.3. Delayed\
    \ responses will temporarily blacklist an element ....4\n      1.4. 408 for non-INVITE\
    \ is not useful ...........................6\n      1.5. Non-INVITE timeouts doom\
    \ forking proxies ...................7\n      1.6. Mismatched timer values make\
    \ winning the race harder .......7\n   2. Security Considerations .........................................8\n\
    \   3. Acknowledgements ................................................8\n  \
    \ 4. Informative References ..........................................9\n"
- title: 1.  Problems under the Current Specifications
  contents:
  - "1.  Problems under the Current Specifications\n   There are a number of unpleasant\
    \ edge conditions created by the SIP\n   non-INVITE transaction (NIT) model's\
    \ fixed duration.  The negative\n   aspects of some of these are exacerbated by\
    \ the effect that\n   provisional responses have on the non-INVITE transaction\
    \ state\n   machines as currently defined.\n"
- title: 1.1.  NITs must complete immediately or risk losing a race
  contents:
  - "1.1.  NITs must complete immediately or risk losing a race\n   The non-INVITE\
    \ transaction defined in RFC 3261 [1] is designed to\n   have a fixed and finite\
    \ duration (dependent on T1).  A consequence of\n   this design is that participants\
    \ must strive to complete the\n   transaction as quickly as possible.  Consider\
    \ the race condition\n   shown in Figure 1.\n                         UAC    \
    \       UAS\n                          |   request   |\n                     ---\
    \  |---.         |\n                      ^   |    `---.    |\n              \
    \        |   |         `-->|  ---\n                      |   |             | \
    \  ^\n                      |   |             |   |\n                    64*T1\
    \ |             |   |\n                      |   |             |   |\n       \
    \               |   |             | 64*T1\n                      |   |       \
    \      |   |\n                      |   |             |   |\n                \
    \      v   |             |   |\n        timeout <=== ---  |   200 OK    |   |\n\
    \                          |         .---|   v\n                          |  \
    \  .---'    |  ---\n                          |<--'         |\n              \
    \  Figure 1: Non-Invite Race Condition\n   The User Agent Server (UAS) in this\
    \ figure believes it has responded\n   to the request in time, and that the request\
    \ succeeded.  The User\n   Agent Client (UAC), on the other hand, believes the\
    \ request has\n   timed-out, hence failed.  No longer having a matching client\n\
    \   transaction, the UAC core will ignore what it believes to be a\n   spurious\
    \ response.  As far as the UAC is concerned, it received no\n   response at all\
    \ to its request.  The ultimate result is that the UAS\n   and UAC have conflicting\
    \ views of the outcome of the transaction.\n   Therefore, a UAS cannot wait until\
    \ the last possible moment to send a\n   final response within a NIT.  It must,\
    \ instead, send its response so\n   that it will arrive at the UAC before that\
    \ UAC times out.\n   Unfortunately, the UAS has no way to accurately measure the\n\
    \   propagation time of the request or predict the propagation time of\n   the\
    \ response.  The uncertainty it faces is compounded by each proxy\n   that participates\
    \ in the transaction.  Thus, the UAS's only choice is\n   to send its final response\
    \ as soon as it possibly can and hope for\n   the best.\n   This result constrains\
    \ the set of problems that can be solved with a\n   single NIT.  Any delay introduced\
    \ during processing of a request\n   increases the probability of losing the race.\
    \  If the timing\n   characteristics of that processing are not predictable and\n\
    \   controllable, a single NIT is an inappropriate model for handling the\n  \
    \ request.  One viable alternative is to accept the request with a 202\n   and\
    \ send the ultimate results in a new request in the reciprocal\n   direction.\n\
    \   In specialized networks, a UAS might have some reliable knowledge of\n   inter-hop\
    \ latency and could use that knowledge to determine if it has\n   time to delay\
    \ its final response in order to perform some processing\n   such as a database\
    \ lookup while mitigating its risk of losing the\n   race in Figure 1.  Establishing\
    \ this knowledge across arbitrary\n   networks (perhaps using resource reservation\
    \ techniques and\n   deterministic transports) is not currently feasible.\n"
- title: 1.2.  Provisional responses can delay recovery from lost final responses
  contents:
  - "1.2.  Provisional responses can delay recovery from lost final responses\n  \
    \ The non-INVITE client transaction state machine provides reliability\n   for\
    \ NITs over unreliable transports (UDP) through retransmission of\n   the request\
    \ message.  Timer E is set to T1 when a request is\n   initially transmitted.\
    \  As long as the machine remains in the Trying\n   state, each time Timer E fires,\
    \ it will be reset to twice its\n   previous value (capping at T2) and the request\
    \ is retransmitted.\n   If the non-INVITE client transaction state machine sees\
    \ a provisional\n    response, it transitions to the Proceeding state, where\n\
    \   retransmission continues, but the algorithm for resetting Timer E is\n   simply\
    \ to use T2 instead of doubling at each firing.  (Note that\n   Timer E is not\
    \ altered during the transition to Proceeding.)\n   Making the transition to the\
    \ Proceeding state before Timer E is reset\n   to T2 can cause recovery from a\
    \ lost final response to take extra\n   time.  Figure 2 shows recovery from a\
    \ lost final response with and\n   without a provisional message during this window.\
    \  Recovery occurs\n   within 2*T1 in the case without the provisional.  With\
    \ the\n   provisional, recovery is delayed until T2, which by default is 8*T1.\n\
    \   In practical terms, a provisional response to a NIT in currently\n   deployed\
    \ networks can delay transaction completion by up to 3.5\n   seconds.\n      \
    \           UAC       UAS               UAC        UAS\n                  |  \
    \       |                 |          |\n            ---   |----.    |        \
    \    ---  |----.     |\n             ^    |     `-->|             ^   |     `--->|\n\
    \         E = T1   |         |         E = T1  |    .-----|(provisional)\n   \
    \          v    |         |             v   |<--'      |\n            ---   |----.\
    \    |            ---  |----.     |\n             ^    |     `-->|           \
    \  ^   |     `--->|\n             |    |   X<----|(lost final) |   |   X<-----|(lost\
    \ final)\n             |    |         |             |   |          |\n       \
    \  E = 2*T1 |         |             |   |          |\n             |    |    \
    \     |             |   |          |\n             |    |         |          \
    \   |   |          |\n             v    |         |             |   |        \
    \  |\n            ---   |----.    |             |   |          |\n           \
    \       |     `-->|             |   |          |\n                  |   .-----|(final)\
    \      |   |          |\n                  |<-'      |             |   |     \
    \     |\n                  |         |             |   |          |\n        \
    \         \\/\\       /\\/           /\\/ /\\/        /\\/\n                 \
    \                     E = T2\n                 \\/\\       /\\/           /\\\
    / /\\/        /\\/\n                  |         |             |   |          |\n\
    \                  |         |             v   |          |\n                \
    \  |         |            ---  |----.     |\n                  |         |   \
    \              |     `--->|\n                  |         |                 | \
    \   .-----|(final)\n                  |         |                 |<--'      |\n\
    \                  |         |                 |          |\n                \
    \   Figure 2: Provisionals Can Harm Recovery\n   No additional delay is introduced\
    \ if the first provisional response\n   is received after Timer E has reached\
    \ its maximum reset interval of\n   T2.\n"
- title: 1.3.  Delayed responses will temporarily blacklist an element
  contents:
  - "1.3.  Delayed responses will temporarily blacklist an element\n   A SIP element's\
    \ use of DNS Service Record Resource Records [3] is\n   specified in RFC 3263\
    \ [2].  That specification discusses how SIP\n   ensures high availability by\
    \ having upstream elements detect failure\n   of downstream elements.  It proceeds\
    \ to define several types of\n   failure detection and instructions for failover.\
    \  Two of the\n   behaviors it describes are important to this document:\n   o\
    \  Within a transaction, transport failure is detected either through\n      an\
    \ explicit report from the transport layer or through timeout.\n      Note specifically\
    \ that timeout will indicates transport failure\n      regardless of the transport\
    \ in use.  When transport failure is\n      detected, the request is retried at\
    \ the next element from the\n      sorted results of the SRV query.\n   o  Between\
    \ transactions, locations reporting temporary failure\n      (through 503/Retry-After,\
    \ for example) are not used until their\n      requested black-out period expires.\n\
    \   The specification notes the benefit of caching locations that are\n   successfully\
    \ contacted, but does not discuss how such a cache is\n   maintained.  It is unclear\
    \ whether an element should stop using\n   (temporarily blacklist) a location\
    \ returned in the SRV query that\n   results in a transport error.  If it does,\
    \ when should such a\n   location be removed from the blacklist?\n   Without such\
    \ a blacklist (or equivalent mechanism), the intended\n   availability mechanism\
    \ fails miserably.  Consider traffic between two\n   domains.  Proxy pA in domain\
    \ A needs to forward a sequence of non-\n   INVITE requests to domain B.  Through\
    \ DNS SRV, pA discovers pB1 and\n   pB2, and the ordering rules of [2] and [3]\
    \ indicate it should use pB1\n   first.  The first request to pB1 times out. \
    \ Since pA is a proxy and\n   a NIT has a fixed duration, pA has no opportunity\
    \ to retry the\n   request at pB2.  If pA does not remember pB1's failure, the\
    \ second\n   request (and all subsequent non-INVITE requests until pB1 recovers)\n\
    \   are doomed to the same failure.  Caching would allow the subsequent\n   requests\
    \ to be tried at pB2.\n   Since miserable failure is not acceptable in deployed\
    \ networks, we\n   should anticipate that elements will, in fact, cache timeout\
    \ failures\n   between transactions.  Then the race in Figure 1 becomes important.\n\
    \   If an element fails to respond \"soon enough\", it has effectively not\n \
    \  responded at all and will be blacklisted at its peer for some period\n   of\
    \ time.\n   (Note that even with caching, the first request timeout results in\
    \ a\n   timeout failure all the way back to the original submitter.  The\n   failover\
    \ mechanisms in [2] work well to increase the resiliency of a\n   given INVITE\
    \ transaction, but do nothing for a given non-INVITE\n   transaction.)\n"
- title: 1.4.  408 for non-INVITE is not useful
  contents:
  - "1.4.  408 for non-INVITE is not useful\n   Consider the race condition in Figure\
    \ 1 when the final response is\n   408 instead of 200.  Under the current specification,\
    \ the race is\n   guaranteed to be lost.  Most existing endpoints will emit a\
    \ 408 for a\n   non-INVITE request 64*T1 after receiving the request if they have\
    \ not\n   emitted an earlier final response.  Such a 408 is guaranteed to\n  \
    \ arrive at the next upstream element too late to be useful.  In fact,\n   in\
    \ the presence of proxies, these messages are even harmful.  When\n   the 408\
    \ arrives, each proxy will have already terminated its\n   associated client transaction\
    \ due to timeout.  Therefore, each proxy\n   must forward the 408 upstream statelessly.\
    \  This, in turn, is\n   guaranteed to arrive too late.  As Figure 3 shows, this\
    \ can\n   ultimately result in bombarding the original requester with spurious\n\
    \   408s.  (Note that the proxy's client transaction state machine never\n   enters\
    \ the Completed state, so Timer K does not enter into play.)\n               \
    \      UAC        P1         P2         P3         UAS\n                     \
    \ |          |          |          |          |\n                ---  ===---.\
    \     |          |          |          |\n                 ^    |     `-->===---.\
    \     |          |          |\n                 |    |          |     `-->===---.\
    \     |          |\n                 |    |          |          |     `-->===---.\
    \     |\n               64*T1  |          |          |          |     `-->===\n\
    \                 |    |          |          |          |          |\n       \
    \          |    |          |          |          |          |\n              \
    \   v    |          |          |          |          |\n      (timeout) ---  ===\
    \         |          |          |          |\n                      |    .-408===\
    \         |          |          |\n                      |<--'      |    .-408===\
    \         |          |\n                      |    .-408-|<--'      |    .-408===\
    \         |\n                      |<--'      |    .-408-|<--'      |    .-408===\n\
    \                      |    .-408-|<--'      |    .-408-|<--'      |\n       \
    \               |<--'      |    .-408-|<--'      |          |\n              \
    \        |    .-408-|<--'      |          |          |\n                     \
    \ |<--'      |          |          |          |\n                      |     \
    \     |          |          |          |\n                     Figure 3: Late\
    \ 408s to Non-INVITEs\n   This response bombardment is not limited to the 408\
    \ response, though\n   it only exists when participating client transaction state\
    \ machines\n   are timing out.  Figure 4 generalizes Figure 1 to include multiple\n\
    \   hops.  Note that even though the UAS responds \"in time\" to P3, the\n   response\
    \ is too late for P2, P1, and the UAC.\n                     UAC        P1   \
    \      P2         P3         UAS\n                      |          |         \
    \ |          |          |\n                ---  ===---.     |          |     \
    \     |          |\n                 ^    |     `-->===---.     |          | \
    \         |\n                 |    |          |     `-->===---.     |        \
    \  |\n                 |    |          |          |     `-->===---.     |\n  \
    \             64*T1  |          |          |          |     `-->===\n        \
    \         |    |          |          |          |          |\n               \
    \  |    |          |          |          |          |\n                 v    |\
    \          |          |          |          |\n      (timeout) ---  ===      \
    \   |          |          |          |\n                      |    .-408===  \
    \       |          |    .-200-|\n                      |<--'      |    .-408===\
    \   .-200-|<--'      |\n                      |    .-408-|<--'.-200-|<--'    \
    \ ===         |\n                      |<--'.-200-|<--'      |          |    \
    \     ===\n                      |<--'      |          |          |          |\n\
    \                      |          |          |          |          |\n       \
    \           Figure 4: Additional Timeout-Related Error\n"
- title: 1.5.  Non-INVITE timeouts doom forking proxies
  contents:
  - "1.5.  Non-INVITE timeouts doom forking proxies\n   A single branch with a delayed\
    \ or missing final response will\n   dominate the processing at proxy that receives\
    \ no 2xx responses to a\n   forked non-INVITE request.  This proxy is required\
    \ to allow all of\n   its client transactions to terminate before choosing a \"\
    best\n   response\".  This forces the proxy's server transaction to lose the\n\
    \   race in Figure 1.  Any response it ultimately forwards (a 401, for\n   example)\
    \ will arrive at the upstream elements too late to be used.\n   Thus, if no element\
    \ among the branches would return a 2xx response,\n   failure of a single element\
    \ (or its transport) dooms the proxy to\n   failure.\n"
- title: 1.6.  Mismatched timer values make winning the race harder
  contents:
  - "1.6.  Mismatched timer values make winning the race harder\n   There are many\
    \ failure scenarios due to misconfiguration or\n   misbehavior that the SIP specification\
    \ does not discuss.  One is\n   placing two elements with different configured\
    \ values for T1 and T2\n   on the same network.  Review of Figure 1 illustrates\
    \ that the race\n   failure is only made more likely in this misconfigured state\
    \ (it may\n   appear that shortening T1 at the element behaving as a UAS improves\n\
    \   this particular situation, but remember that these elements may trade\n  \
    \ roles on the next request).  Since the protocol provides no mechanism\n   for\
    \ discovering/negotiating a peer's timer values, exceptional care\n   must be\
    \ taken when deploying systems with non-defaults to ensure that\n   they will\
    \ never directly communicate with elements with default\n   values.\n"
- title: 2.  Security Considerations
  contents:
  - "2.  Security Considerations\n   This document describes some problems in the\
    \ core SIP specification\n   [1] related to the SIP non-INVITE requests, the messages\
    \ other than\n   INVITE that begin transactions.  A few of the problems lead to\n\
    \   flooding or forgery risk, and could possibly be exploited by an\n   adversary\
    \ in a denial of service attack.  Solutions are defined in\n   the companion document\
    \ [4].\n   One solution there prohibits proxies and User Agents from sending 408\n\
    \   responses to non-INVITE transactions.  Without this change, proxies\n   automatically\
    \ generate a storm of useless responses.  An attacker\n   could capitalize on\
    \ this by enticing User Agents to send non-INVITE\n   requests to a black hole\
    \ (through social engineering or DNS\n   poisoning) or by selectively dropping\
    \ responses.\n   Another solution prohibits proxies from forwarding late responses.\n\
    \   Without this change, an attacker could easily forge messages which\n   appear\
    \ to be late responses.  All proxies compliant with RFC 3261 are\n   required\
    \ to forward these responses, wasting bandwidth and CPU and\n   potentially overwhelming\
    \ target User Agents (especially those with\n   low speed connections).\n"
- title: 3.  Acknowledgements
  contents:
  - "3.  Acknowledgements\n   This document captures many conversations about non-INVITE\
    \ issues.\n   Significant contributers include Ben Campbell, Gonzalo Camarillo,\n\
    \   Steve Donovan, Rohan Mahy, Dan Petrie, Adam Roach, Jonathan\n   Rosenberg,\
    \ and Dean Willis.\n"
- title: 4. Informative References
  contents:
  - "4. Informative References\n   [1]  Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston, A.,\n        Peterson, J., Sparks, R., Handley, M., and E. Schooler,\
    \ \"SIP:\n        Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]\
    \  Rosenberg, J. and H. Schulzrinne, \"Session Initiation Protocol\n        (SIP):\
    \ Locating SIP Servers\", RFC 3263, June 2002.\n   [3]  Gulbrandsen, A., Vixie,\
    \ P., and L. Esibov, \"A DNS RR for\n        specifying the location of services\
    \ (DNS SRV)\", RFC 2782,\n        February 2000.\n   [4]  Sparks, R., \"Actions\
    \ Addressing Identified Issues with the\n        Session Initiation Protocol's\
    \ (SIP) Non-INVITE Transaction\", RFC\n        4320, January 2006.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Robert J. Sparks\n   Estacado Systems\n   17210 Campbell\
    \ Road\n   Suite 250\n   Dallas, TX 75252-4203\n   EMail: rjsparks@estacado.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
