- title: __initial_text__
  contents:
  - "               Inter-Entity Communication - An Experiment\n   This note is an\
    \ attempt to be a status report concerning an\n   experiment based on the desire\
    \ of users, at their consoles, to\n   converse with one another, and perhaps to\
    \ get some debugging\n   assistance.  The user might ask: \"who can I talk to\"\
    ; \"can I show him\n   what I have done\", and \"can I let him run my program?\"\
    \  Many time\n   sharing systems provide capabilities such as these, within the\
    \ bounds\n   of their system.  Almost all systems have a \"WHO\" or \"SYSTAT\"\
    , many\n   have commands like \"LINK\" or \"TALK\", and some support more esoteric\n\
    \   capabilities like controlling another user's program.  At the last\n   formal\
    \ meeting of the Network Working Group, in October of 1971 at\n   MIT, a group\
    \ got together to talk about these features for Inter\n   Entity Communications\
    \ (IEC), and how they might be extended to span\n   across Host boundaries.\n\
    \   Subsequent development has proceeded in an ad hoc manner.  The\n   general\
    \ design philosophy paralleled that of TELNET in terms of\n   having both server\
    \ and user programs.  The server program would\n   handle commands like \"connect\
    \ to user FOO\", \"where is user BAR\", or\n   \"who is on your system?\"  An\
    \ initial implementation of a server and\n   user was brought up at MIT-DMCG,\
    \ using a completely arbitrary\n   protocol.  Soon after that, in an effort to\
    \ increase its usefulness,\n   the protocol was modified to be compatible with\
    \ that being used by\n   the Resource Sharing Executive being developed at BBN-TENEX.\n\
    \   The MIT user program used the concept of \"ports\" to help identify\n   character\
    \ streams entering and leaving an object.  A pictorial\n   diagram follows (FIGURE\
    \ 1) showing a user teletype, his job and two\n   consultants with whom he is\
    \ conversing.\n              +------+\n              | USER |\n              |\
    \ TTY  |\n              +------+\n                |   |\n   -------------|---|--------------+\n\
    \                |   |              |               +-------+\n        +------------------+\
    \       |               | HOST  |\n        |     COMMAND      |       |      \
    \         |   A   |\n        |   INTERPRETER    |       |               +-------+\n\
    \        +---+-+-------+-+--+       |                   |\n        TTY |_|   \
    \    |_| TTY      |                   |\n    OUT-PORT ^         | IN-PORT   |\
    \                   |\n             |         |           |                  \
    \ |\n             |         V           | +--------------+  |\n              \
    \                   +-|-+              |  |\n                            <----|\
    \ |IN-PORT         |--+\n                                 +-|-+              |\n\
    \                                   | |  CONSULTANT  |\n                     \
    \              | |     #1       |\n                                 +-|-+    \
    \          |\n               I.E.C.         ---->| |OUT-PORT      |\n        \
    \                         +-|-+              |\n                             \
    \      | +--------------+\n                                   |\n            \
    \                       | +--------------+\n                                 +-|-+\
    \              |\n                            <----| |IN-PORT         |--+\n \
    \                                +-|-+              |  |\n                   \
    \                | |  CONSULTANT  |  |\n                                   | |\
    \     #2       |  |\n                                 +-|-+              |  |\n\
    \           ^          |     ---->| |OUT-PORT        |  |\n           |      \
    \    |          +-|-+              |  |\n   JOB     |          V  JOB       |\
    \ +--------------+  |\n   IN-PORT+--+       +--+OUT-PORT  |                  \
    \ |\n     -----|--|-------|--|----------+                   |\n     +----+  +-------+\
    \  +---------+                    |\n     |                            |     \
    \            +------+\n     |      USER     JOB          |                 | HOST\
    \ |\n                                                    |  B   |\n          \
    \                                          +------+\n   The user now has the option\
    \ of opening or closing any of the ports he\n   wishes.  While in conversation\
    \ mode, he might turn off the ports\n   leading to the JOB.  If he wished consultant\
    \ 1 to control the job, he\n   might turn off the input ports from his own TTY\
    \ and from consultant\n   2.\n   Towards this goal, the user interface provides\
    \ the following set of\n   commands:\n   WHO         user supplies which host,\
    \ and given a list of [user,\n               teletype, jobs].\n   WHERE      \
    \ user supplies identification of another user, and program\n               tries\
    \ to find him on all the servers it knows about (for\n               1 server,\
    \ that code was very easy to write!)\n   OPEN or CLOSE     user specifies which\
    \ port to turn on or turn off.\n   PORT MAP    gives the user a picture of all\
    \ his ports.\n   CONNECT     user specifies host, user, and port identification.\
    \  If\n               successful, results in an open connection to the\n     \
    \          specified user.\n   DISCONNECT  user specifies port, and connection\
    \ is cleanly broken.\n   The above description applies to the program at MIT-DMCG.\
    \  Similar\n   ones will soon be available on the other ITS systems.\n   From\
    \ TENEX, the user interface is through the RSEXEC subsystem.  To\n   the user,\
    \ the RSEXEC looks much like the standard TENEX EXEC, but not\n   limited to just\
    \ the local system. With the exception of the concept\n   of PORTS, the command\
    \ structure is similar to that previously\n   described:\n   @ WHERE   (is user)\
    \ THOMAS\n             Lists each \"currently active\" job of user Thomas.  Each\
    \ job\n             is identified by its network site, job I.D. and attached\n\
    \             terminals.\n   @ SITES   (of user) BRESSLER\n             Lists\
    \ all of the (currently accessible) network sites where\n             user Bressler\
    \ has an account.\n   @ LINK    (to TTY0 103 (AT SITE) UTAH-10\n             Links\
    \ the user's terminal to terminal 106 at the UTAH PDP-\n             10.\n   @\
    \ WHO     Lists the users currently logged in at each (accessible)\n         \
    \    network site. (WHO has options for specifying selected\n             sites.)\n\
    \   Supplementing the above services, the TENEX RSEXEC program provides a\n  \
    \ set of files system tools. It is planned to integrate these services\n   with\
    \ the FTP type protocols, and make these services available on\n   other non-TENEX\
    \ systems.\n   Socket 245 (decimal) has been assigned to this experiment. As\n\
    \   mentioned above, these services are now (or will soon be) available\n   on\
    \ many ITS and TENEX systems. In addition, at least one of these\n   services\
    \ will be available on a non login basis. This will enable TIP\n   users to avail\
    \ themselves of these communication facilities.\n   Further participation in this\
    \ experiment is of course invited. It is\n   hoped that a service like this can\
    \ play an important role in network\n   development. Sites are invited to experiment\
    \ with the \"conferencing\"\n   possibilities of this experiment. We would be\
    \ interested in knowing\n   what drawbacks are encountered. The protocol design\
    \ will remain\n   flexible, and can be expanded to meet short comings that use\
    \ will\n   discover. Areas of experimentation include integration with the mail\n\
    \   protocol, conference scheduling, and incorporating a picture oriented\n  \
    \ graphics protocol, for graphics users to share screens.\n   Attached is a copy\
    \ of the protocol currently used. At first glance,\n   it may appear hostile to\
    \ non PDP-10s, but this was not intentional.\n   A new and more general protocol\
    \ is being developed, but since this\n   one is operational, it seems useful to\
    \ try using it.\n                             INTERIM PROTOCOL\n   There are two\
    \ parts to the RSEXEC protocol:\n   1. an initial connection protocol which specifies\
    \ how a user program\n      connects to the server program, and\n   2. a command\
    \ protocol which specifies how the user process talks to\n      the server process\
    \ to get service.\n   Initial Connection Protocol\n   To connect to the server\
    \ the user process connects to socket number\n   365 (octal) connection byte size\
    \ = 32. The server program then\n   transmits two bytes and breaks the connection:\n\
    \      byte 1 = socket number = X\n      byte 2 = transaction number (meaningful\
    \ to server)\n   The server and user programs complete the ICP by opening two\
    \ 36 bit\n   \"working\" connections:\n      U + 3 --> X\n      U + 2 --> X +\
    \ 1\n      where U = the socket used by the user program to initiate the ICP.\n\
    \   After the two working connections are established the server is ready\n  \
    \ to accept commands.\n   Note that the RSEXEC ICP is virtually identical to the\
    \ official\n   ARPANET ICP, the single difference being transmission of the\n\
    \   transaction number.\n   Command Protocol\n   [Note on terminology:\n   ASCII\
    \       7 bit characters, packed 5 to a 36 bit word, with the low\n          \
    \     order bit 0.  In all following examples the contents of a\n            \
    \   string are delimited with \"/\".\n   ASCIZ       ASCII, terminated with a\
    \ character (7 bits) of zero.\n   SIXBIT      6 bit characters, packed 6 to a\
    \ 36 bit word.  A sixbit\n               character + 60 (octal) = the equivalent\
    \ ASCII character.\n   byte        unless otherwise stated is 36 bits.\n   XWD\
    \ A,B     Half words.  18 high order bits = A, 18 low order bits =\n         \
    \      B.]\n   USINF\n   To obtain information about a user at the server's site\n\
    \   1. user sends:\n     byte 1: ASCII /USINF/\n     byte 2->k: ASCIZ /USERNAME/\n\
    \   2. server responds:\n     neg ack: 1 byte = XWD 0, error #  ;no such user\n\
    \     pos ack: byte 1:    -1\n              byte 2->n: XWD job #, tty #\n    \
    \                        where tty # = -1 if job detached\n              byte\
    \ n+1:  -1\n   SSTAT\n   To obtain the active users at the server's site\n   1.\
    \ user sends:\n     byte 1: ASCII /SSTAT/\n   2. server responds:\n     neg ack:\
    \ 1 byte =  0\n     pos ack: 1 byte =  -1\n              followed by data blocks\
    \ of the form\n              a. 1 byte = -1    ;means end of transmission\n  \
    \            or\n              b. byte 1:       XWD job #,tty #\n            \
    \     byte 2:       SIXBIT /subsys name/\n                 byte 3->n:    ASCIZ\
    \ /USERNAME/\n   LINK\n   To link to a user terminal at the server site\n   1.\
    \ user sends:\n     byte 1: ASCII /LINK/\n     byte 2: terminal #\n   2. server\
    \ responds:\n     neg ack: 1 byte = 0\n     pos ack: 1 byte = number N   ;means\
    \ server will attempt link\n   3. if positive acknowledgement server and user\
    \ try to establish the two\n      8 bit connections:\n         N + 1 --> U\n \
    \        N     --> U + 1\n     where U is the socket used by the user to initiate\
    \ the ICP.\n   These connections are to be used to carry text to and from the\
    \ linked\n   tty at the server's site.\n   4. server responds (a second time):\n\
    \     neg ack: 1 byte = 0   ;means can't establish connections or\n          \
    \                 ;couldn't make the link\n     pos ack: 1 byte = -1  ;means link\
    \ to tty established and\n                           ;anything transmitted over\
    \ the\n                           ;connections will go to linked tty.\n   BREAK\n\
    \   To break a link previously established to a terminal at the server\n   site:\n\
    \   1. user sends:\n     byte 1: ASCII /BREAK/\n   2. server responds:\n     neg\
    \ ack: 1 byte = XWD 0,error #\n     pos ack: 1 byte = -1   ;link successfully\
    \ broken\n   TERMINATE\n   To terminate connection with the server the user can\
    \ either send a\n   single byte = 0 or just close the connections.  The former\
    \ is\n   preferred.  The server responds by breaking the connections.\n      \
    \    [This RFC was put into machine readable form for entry]\n      [into the\
    \ online RFC archives by Hlne Morin, Viagnie, 12/99]\n"
