- title: __initial_text__
  contents:
  - '                 Secure Zero Touch Provisioning (SZTP)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document presents a technique to securely provision a networking\n\
    \   device when it is booting in a factory-default state.  Variations in\n   the\
    \ solution enable it to be used on both public and private\n   networks.  The\
    \ provisioning steps are able to update the boot image,\n   commit an initial\
    \ configuration, and execute arbitrary scripts to\n   address auxiliary needs.\
    \  The updated device is subsequently able to\n   establish secure connections\
    \ with other systems.  For instance, a\n   device may establish NETCONF (RFC 6241)\
    \ and/or RESTCONF (RFC 8040)\n   connections with deployment-specific network\
    \ management systems.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8572.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   5\n     1.1.  Use Cases . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   5\n     1.2.  Terminology . . . . . . . . . . . . . . . . . . . .\
    \ . . .   6\n     1.3.  Requirements Language . . . . . . . . . . . . . . . .\
    \ . .   8\n     1.4.  Tree Diagrams . . . . . . . . . . . . . . . . . . . . .\
    \ .   8\n   2.  Types of Conveyed Information . . . . . . . . . . . . . . . .\
    \   8\n     2.1.  Redirect Information  . . . . . . . . . . . . . . . . . .  \
    \ 8\n     2.2.  Onboarding Information  . . . . . . . . . . . . . . . . .   9\n\
    \   3.  Artifacts . . . . . . . . . . . . . . . . . . . . . . . . . .  10\n  \
    \   3.1.  Conveyed Information  . . . . . . . . . . . . . . . . . .  10\n    \
    \ 3.2.  Owner Certificate . . . . . . . . . . . . . . . . . . . .  12\n     3.3.\
    \  Ownership Voucher . . . . . . . . . . . . . . . . . . . .  13\n     3.4.  Artifact\
    \ Encryption . . . . . . . . . . . . . . . . . . .  13\n     3.5.  Artifact Groupings\
    \  . . . . . . . . . . . . . . . . . . .  14\n   4.  Sources of Bootstrapping\
    \ Data . . . . . . . . . . . . . . . .  15\n     4.1.  Removable Storage . . .\
    \ . . . . . . . . . . . . . . . . .  15\n     4.2.  DNS Server  . . . . . . .\
    \ . . . . . . . . . . . . . . . .  16\n     4.3.  DHCP Server . . . . . . . .\
    \ . . . . . . . . . . . . . . .  20\n     4.4.  Bootstrap Server  . . . . . .\
    \ . . . . . . . . . . . . . .  21\n   5.  Device Details  . . . . . . . . . .\
    \ . . . . . . . . . . . . .  22\n     5.1.  Initial State . . . . . . . . . .\
    \ . . . . . . . . . . . .  22\n     5.2.  Boot Sequence . . . . . . . . . . .\
    \ . . . . . . . . . . .  24\n     5.3.  Processing a Source of Bootstrapping Data\
    \ . . . . . . . .  25\n     5.4.  Validating Signed Data  . . . . . . . . . .\
    \ . . . . . . .  27\n     5.5.  Processing Redirect Information . . . . . . .\
    \ . . . . . .  28\n     5.6.  Processing Onboarding Information . . . . . . .\
    \ . . . . .  28\n   6.  The Conveyed Information Data Model . . . . . . . . .\
    \ . . . .  32\n     6.1.  Data Model Overview . . . . . . . . . . . . . . . .\
    \ . . .  32\n     6.2.  Example Usage . . . . . . . . . . . . . . . . . . . .\
    \ . .  32\n     6.3.  YANG Module . . . . . . . . . . . . . . . . . . . . . .\
    \ .  34\n   7.  The SZTP Bootstrap Server API . . . . . . . . . . . . . . . .\
    \  41\n     7.1.  API Overview  . . . . . . . . . . . . . . . . . . . . . .  41\n\
    \     7.2.  Example Usage . . . . . . . . . . . . . . . . . . . . . .  42\n  \
    \   7.3.  YANG Module . . . . . . . . . . . . . . . . . . . . . . .  45\n   8.\
    \  DHCP Options  . . . . . . . . . . . . . . . . . . . . . . . .  56\n     8.1.\
    \  DHCPv4 SZTP Redirect Option . . . . . . . . . . . . . . .  56\n     8.2.  DHCPv6\
    \ SZTP Redirect Option . . . . . . . . . . . . . . .  58\n     8.3.  Common Field\
    \ Encoding . . . . . . . . . . . . . . . . . .  59\n   9.  Security Considerations\
    \ . . . . . . . . . . . . . . . . . . .  59\n     9.1.  Clock Sensitivity . .\
    \ . . . . . . . . . . . . . . . . . .  59\n     9.2.  Use of IDevID Certificates\
    \  . . . . . . . . . . . . . . .  60\n     9.3.  Immutable Storage for Trust Anchors\
    \ . . . . . . . . . . .  60\n     9.4.  Secure Storage for Long-Lived Private\
    \ Keys  . . . . . . .  60\n     9.5.  Blindly Authenticating a Bootstrap Server\
    \ . . . . . . . .  60\n     9.6.  Disclosing Information to Untrusted Servers\
    \ . . . . . . .  60\n     9.7.  Sequencing Sources of Bootstrapping Data  . .\
    \ . . . . . .  61\n     9.8.  Safety of Private Keys Used for Trust . . . . .\
    \ . . . . .  62\n     9.9.  Increased Reliance on Manufacturers . . . . . . .\
    \ . . . .  62\n     9.10. Concerns with Trusted Bootstrap Servers . . . . . .\
    \ . . .  63\n     9.11. Validity Period for Conveyed Information  . . . . . .\
    \ . .  63\n     9.12. Cascading Trust via Redirects . . . . . . . . . . . . .\
    \ .  64\n     9.13. Possible Reuse of Private Keys  . . . . . . . . . . . . .\
    \  65\n     9.14. Non-issue with Encrypting Signed Artifacts  . . . . . . .  65\n\
    \     9.15. The \"ietf-sztp-conveyed-info\" YANG Module . . . . . . . .  65\n\
    \     9.16. The \"ietf-sztp-bootstrap-server\" YANG Module  . . . . . .  66\n\
    \   10. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  67\n  \
    \   10.1.  The IETF XML Registry  . . . . . . . . . . . . . . . . .  67\n    \
    \ 10.2.  The YANG Module Names Registry . . . . . . . . . . . . .  67\n     10.3.\
    \  The SMI Security for S/MIME CMS Content Type Registry  .  68\n     10.4.  The\
    \ BOOTP Vendor Extensions and DHCP Options Registry  .  68\n     10.5.  The Dynamic\
    \ Host Configuration Protocol for IPv6\n            (DHCPv6) Registry  . . . .\
    \ . . . . . . . . . . . . . . .  68\n     10.6.  The Service Name and Transport\
    \ Protocol Port Number\n            Registry . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  69\n     10.7.  The Underscored and Globally Scoped DNS Node\
    \ Names\n            Registry . . . . . . . . . . . . . . . . . . . . . . . .\
    \  69\n   11. References  . . . . . . . . . . . . . . . . . . . . . . . . .  69\n\
    \     11.1.  Normative References . . . . . . . . . . . . . . . . . .  69\n  \
    \   11.2.  Informative References . . . . . . . . . . . . . . . . .  71\n   Appendix\
    \ A.  Example Device Data Model  . . . . . . . . . . . . .  74\n     A.1.  Data\
    \ Model Overview . . . . . . . . . . . . . . . . . . .  74\n     A.2.  Example\
    \ Usage . . . . . . . . . . . . . . . . . . . . . .  75\n     A.3.  YANG Module\
    \ . . . . . . . . . . . . . . . . . . . . . . .  75\n   Appendix B.  Promoting\
    \ a Connection from Untrusted to Trusted . .  79\n   Appendix C.  Workflow Overview\
    \  . . . . . . . . . . . . . . . . .  80\n     C.1.  Enrollment and Ordering Devices\
    \ . . . . . . . . . . . . .  80\n     C.2.  Owner Stages the Network for Bootstrap\
    \  . . . . . . . . .  83\n     C.3.  Device Powers On  . . . . . . . . . . . .\
    \ . . . . . . . .  85\n   Acknowledgements  . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  87\n   Authors' Addresses  . . . . . . . . . . . . . . . . .\
    \ . . . . . .  87\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A fundamental business requirement for any network operator\
    \ is to\n   reduce costs where possible.  For network operators, deploying\n \
    \  devices to many locations can be a significant cost, as sending\n   trained\
    \ specialists to each site for installations is both cost\n   prohibitive and\
    \ does not scale.\n   This document defines Secure Zero Touch Provisioning (SZTP),\
    \ a\n   bootstrapping strategy enabling devices to securely obtain\n   bootstrapping\
    \ data with no installer action beyond physical placement\n   and connecting network\
    \ and power cables.  As such, SZTP enables non-\n   technical personnel to bring\
    \ up devices in remote locations without\n   the need for any operator input.\n\
    \   The SZTP solution includes updating the boot image, committing an\n   initial\
    \ configuration, and executing arbitrary scripts to address\n   auxiliary needs.\
    \  The updated device is subsequently able to\n   establish secure connections\
    \ with other systems.  For instance, a\n   device may establish NETCONF [RFC6241]\
    \ and/or RESTCONF [RFC8040]\n   connections with deployment-specific network management\
    \ systems.\n   This document primarily regards physical devices, where the setting\n\
    \   of the device's initial state (described in Section 5.1) occurs\n   during\
    \ the device's manufacturing process.  The SZTP solution may be\n   extended to\
    \ support virtual machines or other such logical\n   constructs, but details for\
    \ how this can be accomplished is left for\n   future work.\n"
- title: 1.1.  Use Cases
  contents:
  - "1.1.  Use Cases\n   o  Device connecting to a remotely administered network\n\
    \         This use case involves scenarios, such as a remote branch\n        \
    \ office or convenience store, whereby a device connects as an\n         access\
    \ gateway to an ISP's network.  Assuming it is not\n         possible to customize\
    \ the ISP's network to provide any\n         bootstrapping support, and with no\
    \ other nearby device to\n         leverage, the device has no recourse but to\
    \ reach out to an\n         Internet-based bootstrap server to bootstrap from.\n\
    \   o  Device connecting to a locally administered network\n         This use\
    \ case covers all other scenarios and differs only in\n         that the device\
    \ may additionally leverage nearby devices, which\n         may direct it to use\
    \ a local service to bootstrap from.  If no\n         such information is available,\
    \ or the device is unable to use\n         the information provided, it can then\
    \ reach out to the network\n         just as it would for the remotely administered\
    \ network use\n         case.\n   Conceptual workflows for how SZTP might be deployed\
    \ are provided in\n   Appendix C.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   This document uses the following terms (sorted alphabetically):\n\
    \   Artifact:  The term \"artifact\" is used throughout this document to\n   \
    \    represent any of the three artifacts defined in Section 3\n       (conveyed\
    \ information, ownership voucher, and owner certificate).\n       These artifacts\
    \ collectively provide all the bootstrapping data a\n       device may use.\n\
    \   Bootstrapping Data:  The term \"bootstrapping data\" is used throughout\n\
    \       this document to refer to the collection of data that a device\n     \
    \  may obtain during the bootstrapping process.  Specifically, it\n       refers\
    \ to the three artifacts defined in Section 3 (conveyed\n       information, owner\
    \ certificate, and ownership voucher).\n   Bootstrap Server:  The term \"bootstrap\
    \ server\" is used within this\n       document to mean any RESTCONF server implementing\
    \ the YANG module\n       defined in Section 7.3.\n   Conveyed Information:  The\
    \ term \"conveyed information\" is used herein\n       to refer to either redirect\
    \ information or onboarding\n       information.  Conveyed information is one\
    \ of the three\n       bootstrapping artifacts described in Section 3.\n   Device:\
    \  The term \"device\" is used throughout this document to refer\n       to a\
    \ network element that needs to be bootstrapped.  See\n       Section 5 for more\
    \ information about devices.\n   Manufacturer:  The term \"manufacturer\" is used\
    \ herein to refer to the\n       manufacturer of a device or a delegate of the\
    \ manufacturer.\n   Network Management System (NMS):  The acronym \"NMS\" is used\n\
    \       throughout this document to refer to the deployment-specific\n       management\
    \ system that the bootstrapping process is responsible\n       for introducing\
    \ devices to.  From a device's perspective, when\n       the bootstrapping process\
    \ has completed, the NMS is a NETCONF or\n       RESTCONF client.\n   Onboarding\
    \ Information:  The term \"onboarding information\" is used\n       herein to\
    \ refer to one of the two types of \"conveyed information\"\n       defined in\
    \ this document, the other being \"redirect information\".\n       Onboarding\
    \ information is formally defined by the \"onboarding-\n       information\" container\
    \ within the \"conveyed-information\" yang-\n       data structure in Section\
    \ 6.3.\n   Onboarding Server:  The term \"onboarding server\" is used herein to\n\
    \       refer to a bootstrap server that only returns onboarding\n       information.\n\
    \   Owner:  The term \"owner\" is used throughout this document to refer to\n\
    \       the person or organization that purchased or otherwise owns a\n      \
    \ device.\n   Owner Certificate:  The term \"owner certificate\" is used in this\n\
    \       document to represent an X.509 certificate that binds an owner\n     \
    \  identity to a public key, which a device can use to validate a\n       signature\
    \ over the conveyed information artifact.  The owner\n       certificate may be\
    \ communicated along with its chain of\n       intermediate certificates leading\
    \ up to a known trust anchor.\n       The owner certificate is one of the three\
    \ bootstrapping artifacts\n       described in Section 3.\n   Ownership Voucher:\
    \  The term \"ownership voucher\" is used in this\n       document to represent\
    \ the voucher artifact defined in [RFC8366].\n       The ownership voucher is\
    \ used to assign a device to an owner.\n       The ownership voucher is one of\
    \ the three bootstrapping artifacts\n       described in Section 3.\n   Redirect\
    \ Information:  The term \"redirect information\" is used herein\n       to refer\
    \ to one of the two types of \"conveyed information\"\n       defined in this\
    \ document, the other being \"onboarding\n       information\".  Redirect information\
    \ is formally defined by the\n       \"redirect-information\" container within\
    \ the \"conveyed-\n       information\" yang-data structure in Section 6.3.\n\
    \   Redirect Server:  The term \"redirect server\" is used to refer to a\n   \
    \    bootstrap server that only returns redirect information.  A\n       redirect\
    \ server is particularly useful when hosted by a\n       manufacturer, as a well-known\
    \ (e.g., Internet-based) resource to\n       redirect devices to deployment-specific\
    \ bootstrap servers.\n   Signed Data:  The term \"signed data\" is used throughout\
    \ to mean\n       conveyed information that has been signed, specifically by a\n\
    \       private key possessed by a device's owner.\n   Unsigned Data:  The term\
    \ \"unsigned data\" is used throughout to mean\n       conveyed information that\
    \ has not been signed.\n"
- title: 1.3.  Requirements Language
  contents:
  - "1.3.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 1.4.  Tree Diagrams
  contents:
  - "1.4.  Tree Diagrams\n   Tree diagrams used in this document follow the notation\
    \ defined in\n   [RFC8340].\n"
- title: 2.  Types of Conveyed Information
  contents:
  - "2.  Types of Conveyed Information\n   This document defines two types of conveyed\
    \ information that devices\n   can access during the bootstrapping process.  These\
    \ conveyed\n   information types are described in this section.  Examples are\n\
    \   provided in Section 6.2.\n"
- title: 2.1.  Redirect Information
  contents:
  - "2.1.  Redirect Information\n   Redirect information redirects a device to another\
    \ bootstrap server.\n   Redirect information encodes a list of bootstrap servers,\
    \ each\n   specifying the bootstrap server's hostname (or IP address), an\n  \
    \ optional port, and an optional trust anchor certificate that the\n   device\
    \ can use to authenticate the bootstrap server with.\n   Redirect information\
    \ is YANG-modeled data formally defined by the\n   \"redirect-information\" container\
    \ in the YANG module presented in\n   Section 6.3.  This container has the tree\
    \ diagram shown below.\n               +--:(redirect-information)\n          \
    \        +-- redirect-information\n                     +-- bootstrap-server*\
    \ [address]\n                        +-- address         inet:host\n         \
    \               +-- port?           inet:port-number\n                       \
    \ +-- trust-anchor?   cms\n   Redirect information may be trusted or untrusted.\
    \  The redirect\n   information is trusted whenever it is obtained via a secure\n\
    \   connection to a trusted bootstrap server or whenever it is signed by\n   the\
    \ device's owner.  In all other cases, the redirect information is\n   untrusted.\n\
    \   Trusted redirect information is useful for enabling a device to\n   establish\
    \ a secure connection to a specified bootstrap server, which\n   is possible when\
    \ the redirect information includes the bootstrap\n   server's trust anchor certificate.\n\
    \   Untrusted redirect information is useful for directing a device to a\n   bootstrap\
    \ server where signed data has been staged for it to obtain.\n   Note that, when\
    \ the redirect information is untrusted, devices\n   discard any potentially included\
    \ trust anchor certificates.\n   How devices process redirect information is described\
    \ in Section 5.5.\n"
- title: 2.2.  Onboarding Information
  contents:
  - "2.2.  Onboarding Information\n   Onboarding information provides data necessary\
    \ for a device to\n   bootstrap itself and establish secure connections with other\
    \ systems.\n   As defined in this document, onboarding information can specify\n\
    \   details about the boot image a device must be running, an initial\n   configuration\
    \ the device must commit, and scripts that the device\n   must successfully execute.\n\
    \   Onboarding information is YANG-modeled data formally defined by the\n   \"\
    onboarding-information\" container in the YANG module presented in\n   Section\
    \ 6.3.  This container has the tree diagram shown below.\n            +--:(onboarding-information)\n\
    \               +-- onboarding-information\n                  +-- boot-image\n\
    \                  |  +-- os-name?              string\n                  |  +--\
    \ os-version?           string\n                  |  +-- download-uri*       \
    \  inet:uri\n                  |  +-- image-verification* [hash-algorithm]\n \
    \                 |     +-- hash-algorithm    identityref\n                  |\
    \     +-- hash-value        yang:hex-string\n                  +-- configuration-handling?\
    \      enumeration\n                  +-- pre-configuration-script?    script\n\
    \                  +-- configuration?               binary\n                 \
    \ +-- post-configuration-script?   script\n   Onboarding information must be trusted\
    \ for it to be of any use to a\n   device.  There is no option for a device to\
    \ process untrusted\n   onboarding information.\n   Onboarding information is\
    \ trusted whenever it is obtained via a\n   secure connection to a trusted bootstrap\
    \ server or whenever it is\n   signed by the device's owner.  In all other cases,\
    \ the onboarding\n   information is untrusted.\n   How devices process onboarding\
    \ information is described in\n   Section 5.6.\n"
- title: 3.  Artifacts
  contents:
  - "3.  Artifacts\n   This document defines three artifacts that can be made available\
    \ to\n   devices while they are bootstrapping.  Each source of bootstrapping\n\
    \   data specifies how it provides the artifacts defined in this section\n   (see\
    \ Section 4).\n"
- title: 3.1.  Conveyed Information
  contents:
  - "3.1.  Conveyed Information\n   The conveyed information artifact encodes the\
    \ essential bootstrapping\n   data for the device.  This artifact is used to encode\
    \ the redirect\n   information and onboarding information types discussed in Section\
    \ 2.\n   The conveyed information artifact is a Cryptographic Message Syntax\n\
    \   (CMS) structure, as described in [RFC5652], encoded using ASN.1\n   distinguished\
    \ encoding rules (DER), as specified in ITU-T X.690\n   [ITU.X690.2015].  The\
    \ CMS structure MUST contain content conforming\n   to the YANG module specified\
    \ in Section 6.3.\n   The conveyed information CMS structure may encode signed\
    \ or unsigned\n   bootstrapping data.  When the bootstrapping data is signed,\
    \ it may\n   also be encrypted, but from a terminology perspective, it is still\n\
    \   \"signed data\"; see Section 1.2.\n   When the conveyed information artifact\
    \ is unsigned and unencrypted,\n   as it might be when communicated over trusted\
    \ channels, the CMS\n   structure's topmost content type MUST be one of the OIDs\
    \ described in\n   Section 10.3 (i.e., id-ct-sztpConveyedInfoXML or\n   id-ct-sztpConveyedInfoJSON)\
    \ or the OID id-data\n   (1.2.840.113549.1.7.1).  When the OID id-data is used,\
    \ the encoding\n   (JSON, XML, etc.) SHOULD be communicated externally.  In either\
    \ case,\n   the associated content is an octet string containing\n   \"conveyed-information\"\
    \ data in the expected encoding.\n   When the conveyed information artifact is\
    \ unsigned and encrypted, as\n   it might be when communicated over trusted channels\
    \ but, for some\n   reason, the operator wants to ensure that only the device\
    \ is able to\n   see the contents, the CMS structure's topmost content type MUST\
    \ be\n   the OID id-envelopedData (1.2.840.113549.1.7.3).  Furthermore, the\n\
    \   encryptedContentInfo's content type MUST be one of the OIDs described\n  \
    \ in Section 10.3 (i.e., id-ct-sztpConveyedInfoXML or\n   id-ct-sztpConveyedInfoJSON)\
    \ or the OID id-data\n   (1.2.840.113549.1.7.1).  When the OID id-data is used,\
    \ the encoding\n   (JSON, XML, etc.)  SHOULD be communicated externally.  In either\n\
    \   case, the associated content is an octet string containing\n   \"conveyed-information\"\
    \ data in the expected encoding.\n   When the conveyed information artifact is\
    \ signed and unencrypted, as\n   it might be when communicated over untrusted\
    \ channels, the CMS\n   structure's topmost content type MUST be the OID id-signedData\n\
    \   (1.2.840.113549.1.7.2).  Furthermore, the inner eContentType MUST be\n   one\
    \ of the OIDs described in Section 10.3 (i.e.,\n   id-ct-sztpConveyedInfoXML or\
    \ id-ct-sztpConveyedInfoJSON) or the OID\n   id-data (1.2.840.113549.1.7.1). \
    \ When the OID id-data is used, the\n   encoding (JSON, XML, etc.)  SHOULD be\
    \ communicated externally.  In\n   either case, the associated content or eContent\
    \ is an octet string\n   containing \"conveyed-information\" data in the expected\
    \ encoding.\n   When the conveyed information artifact is signed and encrypted,\
    \ as it\n   might be when communicated over untrusted channels and privacy is\n\
    \   important, the CMS structure's topmost content type MUST be the OID\n   id-envelopedData\
    \ (1.2.840.113549.1.7.3).  Furthermore, the\n   encryptedContentInfo's content\
    \ type MUST be the OID id-signedData\n   (1.2.840.113549.1.7.2), whose eContentType\
    \ MUST be one of the OIDs\n   described in Section 10.3 (i.e., id-ct-sztpConveyedInfoXML\
    \ or\n   id-ct-sztpConveyedInfoJSON), or the OID id-data\n   (1.2.840.113549.1.7.1).\
    \  When the OID id-data is used, the encoding\n   (JSON, XML, etc.) SHOULD be\
    \ communicated externally.  In either case,\n   the associated content or eContent\
    \ is an octet string containing\n   \"conveyed-information\" data in the expected\
    \ encoding.\n"
- title: 3.2.  Owner Certificate
  contents:
  - "3.2.  Owner Certificate\n   The owner certificate artifact is an X.509 certificate\
    \ [RFC5280] that\n   is used to identify an \"owner\" (e.g., an organization).\
    \  The owner\n   certificate can be signed by any certificate authority (CA).\
    \  The\n   owner certificate MUST have no Key Usage specified, or the Key Usage\n\
    \   MUST, at a minimum, set the \"digitalSignature\" bit.  The values for\n  \
    \ the owner certificate's \"subject\" and/or \"subjectAltName\" are not\n   constrained\
    \ by this document.\n   The owner certificate is used by a device to verify the\
    \ signature\n   over the conveyed information artifact (Section 3.1) that the\
    \ device\n   should have also received, as described in Section 3.5.  In\n   particular,\
    \ the device verifies the signature using the public key in\n   the owner certificate\
    \ over the content contained within the conveyed\n   information artifact.\n \
    \  The owner certificate artifact is formally a CMS structure, as\n   specified\
    \ by [RFC5652], encoded using ASN.1 DER, as specified in\n   ITU-T X.690 [ITU.X690.2015].\n\
    \   The owner certificate CMS structure MUST contain the owner\n   certificate\
    \ itself, as well as all intermediate certificates leading\n   to the \"pinned-domain-cert\"\
    \ certificate specified in the ownership\n   voucher.  The owner certificate artifact\
    \ MAY optionally include the\n   \"pinned-domain-cert\" as well.\n   In order\
    \ to support devices deployed on private networks, the owner\n   certificate CMS\
    \ structure MAY also contain suitably fresh, as\n   determined by local policy,\
    \ revocation objects (e.g., Certificate\n   Revocation Lists (CRLs) [RFC5280]\
    \ and OCSP Responses [RFC6960]).\n   Having these revocation objects stapled to\
    \ the owner certificate may\n   obviate the need for the device to have to download\
    \ them dynamically\n   using the CRL distribution point or an Online Certificate\
    \ Status\n   Protocol (OCSP) responder specified in the associated certificates.\n\
    \   When unencrypted, the topmost content type of the owner certificate\n   artifact's\
    \ CMS structure MUST be the OID id-signedData\n   (1.2.840.113549.1.7.2).  The\
    \ inner SignedData structure is the\n   degenerate form, whereby there are no\
    \ signers, that is commonly used\n   to disseminate certificates and revocation\
    \ objects.\n   When encrypted, the topmost content type of the owner certificate\n\
    \   artifact's CMS structure MUST be the OID id-envelopedData\n   (1.2.840.113549.1.7.3),\
    \ and the encryptedContentInfo's content type\n   MUST be the OID id-signedData\
    \ (1.2.840.113549.1.7.2), whereby the\n   inner SignedData structure is the degenerate\
    \ form that has no signers\n   commonly used to disseminate certificates and revocation\
    \ objects.\n"
- title: 3.3.  Ownership Voucher
  contents:
  - "3.3.  Ownership Voucher\n   The ownership voucher artifact is used to securely\
    \ identify a\n   device's owner, as it is known to the manufacturer.  The ownership\n\
    \   voucher is signed by the device's manufacturer.\n   The ownership voucher\
    \ is used to verify the owner certificate\n   (Section 3.2) that the device should\
    \ have also received, as described\n   in Section 3.5.  In particular, the device\
    \ verifies that the owner\n   certificate has a chain of trust leading to the\
    \ trusted certificate\n   included in the ownership voucher (\"pinned-domain-cert\"\
    ).  Note that\n   this relationship holds even when the owner certificate is a\
    \ self-\n   signed certificate and hence also the pinned-domain-cert.\n   When\
    \ unencrypted, the ownership voucher artifact is as defined in\n   [RFC8366].\
    \  As described, it is a CMS structure whose topmost content\n   type MUST be\
    \ the OID id-signedData (1.2.840.113549.1.7.2), whose\n   eContentType MUST be\
    \ OID id-ct-animaJSONVoucher\n   (1.2.840.113549.1.9.16.1), or the OID id-data\
    \ (1.2.840.113549.1.7.1).\n   When the OID id-data is used, the encoding (JSON,\
    \ XML, etc.) SHOULD\n   be communicated externally.  In either case, the associated\
    \ content\n   is an octet string containing ietf-voucher data in the expected\n\
    \   encoding.\n   When encrypted, the topmost content type of the ownership voucher\n\
    \   artifact's CMS structure MUST be the OID id-envelopedData\n   (1.2.840.113549.1.7.3),\
    \ and the encryptedContentInfo's content type\n   MUST be the OID id-signedData\
    \ (1.2.840.113549.1.7.2), whose\n   eContentType MUST be OID id-ct-animaJSONVoucher\n\
    \   (1.2.840.113549.1.9.16.1), or the OID id-data (1.2.840.113549.1.7.1).\n  \
    \ When the OID id-data is used, the encoding (JSON, XML, etc.) SHOULD\n   be communicated\
    \ externally.  In either case, the associated content\n   is an octet string containing\
    \ ietf-voucher data in the expected\n   encoding.\n"
- title: 3.4.  Artifact Encryption
  contents:
  - "3.4.  Artifact Encryption\n   Each of the three artifacts MAY be individually\
    \ encrypted.\n   Encryption may be important in some environments where the content\
    \ is\n   considered sensitive.\n   Each of the three artifacts are encrypted in\
    \ the same way, by the\n   unencrypted form being encapsulated inside a CMS EnvelopedData\
    \ type.\n   As a consequence, both the conveyed information and ownership voucher\n\
    \   artifacts are signed and then encrypted; they are never encrypted and\n  \
    \ then signed.\n   This sequencing has the following advantages: shrouding the\
    \ signer's\n   certificate and ensuring that the owner knows the content being\n\
    \   signed.  This sequencing further enables the owner to inspect an\n   unencrypted\
    \ voucher obtained from a manufacturer and then encrypt the\n   voucher later\
    \ themselves, perhaps while also stapling in current\n   revocation objects, when\
    \ ready to place the artifact in an unsafe\n   location.\n   When encrypted, the\
    \ CMS MUST be encrypted using a secure device\n   identity certificate for the\
    \ device.  This certificate MAY be the\n   same as the TLS-level client certificate\
    \ the device uses when\n   connecting to bootstrap servers.  The owner must possess\
    \ the device's\n   identity certificate at the time of encrypting the data.  How\
    \ the\n   owner comes to posses the device's identity certificate for this\n \
    \  purpose is outside the scope of this document.\n"
- title: 3.5.  Artifact Groupings
  contents:
  - "3.5.  Artifact Groupings\n   The previous sections discussed the bootstrapping\
    \ artifacts, but only\n   certain groupings of these artifacts make sense to return\
    \ in the\n   various bootstrapping situations described in this document.  These\n\
    \   groupings are:\n      Unsigned Data:  This artifact grouping is useful for\
    \ cases when\n         transport-level security can be used to convey trust (e.g.,\n\
    \         HTTPS) or when the conveyed information can be processed in a\n    \
    \     provisional manner (i.e., unsigned redirect information).\n      Signed\
    \ Data, without revocations:  This artifact grouping is\n         useful when\
    \ signed data is needed (i.e., because the data is\n         obtained from an\
    \ untrusted source and it cannot be processed\n         provisionally) and revocations\
    \ either are not needed or can be\n         obtained dynamically.\n      Signed\
    \ Data, with revocations:  This artifact grouping is useful\n         when signed\
    \ data is needed (i.e., because the data is obtained\n         from an untrusted\
    \ source and it cannot be processed\n         provisionally) and when revocations\
    \ are needed but the\n         revocations cannot be obtained dynamically.\n \
    \  The presence of each artifact and any distinguishing characteristics\n   are\
    \ identified for each artifact grouping in the table below (\"yes\"\n   and \"\
    no\" indicate whether or not the artifact is present in the\n   artifact grouping):\n\
    \   +---------------------+---------------+--------------+--------------+\n  \
    \ | Artifact            | Conveyed      | Ownership    | Owner        |\n   |\
    \ Grouping            | Information   | Voucher      | Certificate  |\n   +=====================+===============+==============+==============+\n\
    \   | Unsigned Data       | Yes, no sig   | No           | No           |\n  \
    \ +---------------------+---------------+--------------+--------------+\n   |\
    \ Signed Data,        | Yes, with sig | Yes, without | Yes, without |\n   | without\
    \ revocations |               | revocations  | revocations  |\n   +---------------------+---------------+--------------+--------------+\n\
    \   | Signed Data,        | Yes, with sig | Yes, with    | Yes, with    |\n  \
    \ | with revocations    |               | revocations  | revocations  |\n   +---------------------+---------------+--------------+--------------+\n"
- title: 4.  Sources of Bootstrapping Data
  contents:
  - "4.  Sources of Bootstrapping Data\n   This section defines some sources for bootstrapping\
    \ data that a\n   device can access.  The list of sources defined here is not\
    \ meant to\n   be exhaustive.  It is left to future documents to define additional\n\
    \   sources for obtaining bootstrapping data.\n   For each source of bootstrapping\
    \ data defined in this section,\n   details are given for how the three artifacts\
    \ listed in Section 3 are\n   provided.\n"
- title: 4.1.  Removable Storage
  contents:
  - "4.1.  Removable Storage\n   A directly attached removable storage device (e.g.,\
    \ a USB flash\n   drive) MAY be used as a source of SZTP bootstrapping data.\n\
    \   Use of a removable storage device is compelling, as it does not\n   require\
    \ any external infrastructure to work.  It is notable that the\n   raw boot image\
    \ file can also be located on the removable storage\n   device, enabling a removable\
    \ storage device to be a fully self-\n   standing bootstrapping solution.\n  \
    \ To use a removable storage device as a source of bootstrapping data,\n   a device\
    \ need only detect if the removable storage device is plugged\n   in and mount\
    \ its filesystem.\n   A removable storage device is an untrusted source of bootstrapping\n\
    \   data.  This means that the information stored on the removable\n   storage\
    \ device either MUST be signed or MUST be information that can\n   be processed\
    \ provisionally (e.g., unsigned redirect information).\n   From an artifact perspective,\
    \ since a removable storage device\n   presents itself as a filesystem, the bootstrapping\
    \ artifacts need to\n   be presented as files.  The three artifacts defined in\
    \ Section 3 are\n   mapped to files below.\n   Artifact to File Mapping:\n   \
    \   Conveyed Information:  Mapped to a file containing the binary\n         artifact\
    \ described in Section 3.1 (e.g., conveyed-\n         information.cms).\n    \
    \  Owner Certificate:  Mapped to a file containing the binary\n         artifact\
    \ described in Section 3.2 (e.g., owner-\n         certificate.cms).\n      Ownership\
    \ Voucher:  Mapped to a file containing the binary\n         artifact described\
    \ in Section 3.3 (e.g., ownership-voucher.cms\n         or ownership-voucher.vcj).\n\
    \   The format of the removable storage device's filesystem and the\n   naming\
    \ of the files are outside the scope of this document.  However,\n   in order\
    \ to facilitate interoperability, it is RECOMMENDED that\n   devices support open\
    \ and/or standards-based filesystems.  It is also\n   RECOMMENDED that devices\
    \ assume a file naming convention that enables\n   more than one instance of bootstrapping\
    \ data (i.e., for different\n   devices) to exist on a removable storage device.\
    \  The file naming\n   convention SHOULD additionally be unique to the manufacturer,\
    \ in\n   order to enable bootstrapping data from multiple manufacturers to\n \
    \  exist on a removable storage device.\n"
- title: 4.2.  DNS Server
  contents:
  - "4.2.  DNS Server\n   A DNS server MAY be used as a source of SZTP bootstrapping\
    \ data.\n   Using a DNS server may be a compelling option for deployments having\n\
    \   existing DNS infrastructure, as it enables a touchless bootstrapping\n   option\
    \ that does not entail utilizing an Internet-based resource\n   hosted by a third\
    \ party.\n   DNS is an untrusted source of bootstrapping data.  Even if DNSSEC\n\
    \   [RFC6698] is used to authenticate the various DNS resource records\n   (e.g.,\
    \ A, AAAA, CERT, TXT, and TLSA), the device cannot be sure that\n   the domain\
    \ returned to it, e.g., from a DHCP server, belongs to its\n   rightful owner.\
    \  This means that the information stored in the DNS\n   records either MUST be\
    \ signed (per this document, not DNSSEC) or MUST\n   be information that can be\
    \ processed provisionally (e.g., unsigned\n   redirect information).\n"
- title: 4.2.1.  DNS Queries
  contents:
  - "4.2.1.  DNS Queries\n   Devices claiming to support DNS as a source of bootstrapping\
    \ data\n   MUST first query for device-specific DNS records and then, only if\n\
    \   doing so does not result in a successful bootstrap, MUST query for\n   device-independent\
    \ DNS records.\n   For each of the device-specific and device-independent queries,\n\
    \   devices MUST first query using multicast DNS [RFC6762] and then, only\n  \
    \ if doing so does not result in a successful bootstrap, MUST query\n   again\
    \ using unicast DNS [RFC1035] [RFC7766].  This assumes the\n   address of a DNS\
    \ server is known, such as it may be using techniques\n   similar to those described\
    \ in Section 11 of [RFC6763].\n   When querying for device-specific DNS records,\
    \ devices MUST query for\n   TXT records [RFC1035] under \"<serial-number>._sztp\"\
    , where <serial-\n   number> is the device's serial number (the same value as\
    \ in the\n   device's secure device identity certificate), and \"_sztp\" is the\n\
    \   globally scoped DNS attribute registered per this document (see\n   Section\
    \ 10.7).\n   Example device-specific DNS record queries:\n      TXT in <serial-number>._sztp.local.\
    \  (multicast)\n      TXT in <serial-number>._sztp.<domain>.  (unicast)\n   When\
    \ querying for device-independent DNS records, devices MUST query\n   for SRV\
    \ records [RFC2782] under \"_sztp._tcp\", where \"_sztp\" is the\n   service name\
    \ registered per this document (see Section 10.6), and\n   \"_tcp\" is the globally\
    \ scoped DNS attribute registered per [RFC8552].\n   Note that a device-independent\
    \ response is only able to encode\n   unsigned data anyway, since signed data\
    \ necessitates the use of a\n   device-specific ownership voucher.  Use of SRV\
    \ records maximumly\n   leverages existing DNS standards.  A response containing\
    \ multiple SRV\n   records is comparable to an unsigned redirect information's\
    \ list of\n   bootstrap servers.\n   Example device-independent DNS record queries:\n\
    \      SRV in _sztp._tcp.local.  (multicast)\n      SRV in _sztp._tcp.<domain>.\
    \  (unicast)\n"
- title: 4.2.2.  DNS Response for Device-Specific Queries
  contents:
  - "4.2.2.  DNS Response for Device-Specific Queries\n   For device-specific queries,\
    \ the three bootstrapping artifacts\n   defined in Section 3 are encoded into\
    \ the TXT records using key/value\n   pairs, similar to the technique described\
    \ in Section 6.3 of\n   [RFC6763].\n   Artifact to TXT Record Mapping:\n     \
    \ Conveyed Information:  Mapped to a TXT record having the key \"ci\"\n      \
    \   and the value being the binary artifact described in\n         Section 3.1.\n\
    \      Owner Certificate:  Mapped to a TXT record having the key \"oc\" and\n\
    \         the value being the binary artifact described in Section 3.2.\n    \
    \  Ownership Voucher:  Mapped to a TXT record having the key \"ov\" and\n    \
    \     the value being the binary artifact described in Section 3.3.\n   Devices\
    \ MUST ignore any other keys that may be returned.\n   Note that, despite the\
    \ name, TXT records can and SHOULD (per\n   Section 6.5 of [RFC6763]) encode binary\
    \ data.\n   Following is an example of a device-specific response, as it might\
    \ be\n   presented by a user agent, containing signed data.  This example\n  \
    \ assumes that the device's serial number is \"<serial-number>\", the\n   domain\
    \ is \"example.com\", and \"<binary data>\" represents the binary\n   artifact:\n\
    \     <serial-number>._sztp.example.com. 3600 IN TXT \"ci=<binary data>\"\n  \
    \   <serial-number>._sztp.example.com. 3600 IN TXT \"oc=<binary data>\"\n    \
    \ <serial-number>._sztp.example.com. 3600 IN TXT \"ov=<binary data>\"\n   Note\
    \ that, in the case that \"ci\" encodes unsigned data, the \"oc\" and\n   \"ov\"\
    \ keys would not be present in the response.\n"
- title: 4.2.3.  DNS Response for Device-Independent Queries
  contents:
  - "4.2.3.  DNS Response for Device-Independent Queries\n   For device-independent\
    \ queries, the three bootstrapping artifacts\n   defined in Section 3 are encoded\
    \ into the SVR records as follows.\n   Artifact to SRV Record Mapping:\n     \
    \ Conveyed Information:  This artifact is not supported directly.\n         Instead,\
    \ the essence of unsigned redirect information is mapped\n         to SVR records\
    \ per [RFC2782].\n      Owner Certificate:  Not supported.  Device-independent\
    \ responses\n         never encode signed data; hence, there is no need for an\
    \ owner\n         certificate artifact.\n      Ownership Voucher:  Not supported.\
    \  Device-independent responses\n         never encode signed data; hence, there\
    \ is no need for an\n         ownership voucher artifact.\n   Following is an\
    \ example of a device-independent response, as it might\n   be presented by a\
    \ user agent, containing (effectively) unsigned\n   redirect information to four\
    \ bootstrap servers.  This example assumes\n   that the domain is \"example.com\"\
    \ and that there are four bootstrap\n   servers \"sztp[1-4]\":\n      _sztp._tcp.example.com.\
    \ 1800 IN SRV 0 0 443 sztp1.example.com.\n      _sztp._tcp.example.com. 1800 IN\
    \ SRV 1 0 443 sztp2.example.com.\n      _sztp._tcp.example.com. 1800 IN SRV 2\
    \ 0 443 sztp3.example.com.\n      _sztp._tcp.example.com. 1800 IN SRV 2 0 443\
    \ sztp4.example.com.\n   Note that, in this example, \"sztp3\" and \"sztp4\" have\
    \ equal priority\n   and hence effectively represent a clustered pair of bootstrap\n\
    \   servers.  While \"sztp1\" and \"sztp2\" only have a single SRV record\n  \
    \ each, it may be that the record points to a load balancer fronting a\n   cluster\
    \ of bootstrap servers.\n   While this document does not use DNS-SD [RFC6763],\
    \ per Section 12.2\n   of that RFC, Multicast DNS (mDNS) responses SHOULD also\
    \ include all\n   address records (type \"A\" and \"AAAA\") named in the SRV rdata.\n"
- title: 4.2.4.  Size of Signed Data
  contents:
  - "4.2.4.  Size of Signed Data\n   The signed data artifacts are large by DNS conventions.\
    \  In the\n   smallest-footprint scenario, they are each a few kilobytes in size.\n\
    \   However, onboarding information can easily be several kilobytes in\n   size\
    \ and has the potential to be many kilobytes in size.\n   All resource records,\
    \ including TXT records, have an upper size limit\n   of 65535 bytes, since \"\
    RDLENGTH\" is a 16-bit field (Section 3.2.1 of\n   [RFC1035]).  If it is ever\
    \ desired to encode onboarding information\n   that exceeds this limit, the DNS\
    \ records returned should instead\n   encode redirect information, to direct the\
    \ device to a bootstrap\n   server from which the onboarding information can be\
    \ obtained.\n   Given the expected size of the TXT records, it is unlikely that\n\
    \   signed data will fit into a UDP-based DNS packet, even with the\n   Extension\
    \ Mechanisms for DNS (EDNS(0)) extensions [RFC6891] enabled.\n   Depending on\
    \ content, signed data may also not fit into a multicast\n   DNS packet, which\
    \ bounds the size to 9000 bytes, per Section 17 of\n   [RFC6762].  Thus, it is\
    \ expected that DNS Transport over TCP\n   [RFC7766] will be required in order\
    \ to return signed data.\n"
- title: 4.3.  DHCP Server
  contents:
  - "4.3.  DHCP Server\n   A DHCP server MAY be used as a source of SZTP bootstrapping\
    \ data.\n   Using a DHCP server may be a compelling option for deployments having\n\
    \   existing DHCP infrastructure, as it enables a touchless bootstrapping\n  \
    \ option that does not entail utilizing an Internet-based resource\n   hosted\
    \ by a third party.\n   A DHCP server is an untrusted source of bootstrapping\
    \ data.  Thus,\n   the information stored on the DHCP server either MUST be signed\
    \ or\n   MUST be information that can be processed provisionally (e.g.,\n   unsigned\
    \ redirect information).\n   However, unlike other sources of bootstrapping data\
    \ described in this\n   document, the DHCP protocol (especially DHCP for IPv4)\
    \ is very\n   limited in the amount of data that can be conveyed, to the extent\n\
    \   that signed data cannot be communicated.  This means that only\n   unsigned\
    \ redirect information can be conveyed via DHCP.\n   Since the redirect information\
    \ is unsigned, it SHOULD NOT include the\n   optional trust anchor certificate,\
    \ as it takes up space in the DHCP\n   message, and the device would have to discard\
    \ it anyway.  For this\n   reason, the DHCP options defined in Section 8 do not\
    \ enable the trust\n   anchor certificate to be encoded.\n   From an artifact\
    \ perspective, the three artifacts defined in\n   Section 3 are mapped to the\
    \ DHCP fields specified in Section 8 as\n   follows.\n   Artifact to DHCP Option\
    \ Fields Mapping:\n      Conveyed Information:  This artifact is not supported\
    \ directly.\n         Instead, the essence of unsigned redirect information is\
    \ mapped\n         to the DHCP options described in Section 8.\n      Owner Certificate:\
    \  Not supported.  There is not enough space in\n         the DHCP packet to hold\
    \ an owner certificate artifact.\n      Ownership Voucher:  Not supported.  There\
    \ is not enough space in\n         the DHCP packet to hold an ownership voucher\
    \ artifact.\n"
- title: 4.4.  Bootstrap Server
  contents:
  - "4.4.  Bootstrap Server\n   A bootstrap server MAY be used as a source of SZTP\
    \ bootstrapping\n   data.  A bootstrap server is defined as a RESTCONF [RFC8040]\
    \ server\n   implementing the YANG module provided in Section 7.\n   Using a bootstrap\
    \ server as a source of bootstrapping data is a\n   compelling option as it MAY\
    \ use transport-level security, obviating\n   the need for signed data, which\
    \ may be easier to deploy in some\n   situations.\n   Unlike any other source\
    \ of bootstrapping data described in this\n   document, a bootstrap server is\
    \ not only a source of data, but it can\n   also receive data from devices using\
    \ the YANG-defined \"report-\n   progress\" RPC defined in the YANG module provided\
    \ in Section 7.3.\n   The \"report-progress\" RPC enables visibility into the\
    \ bootstrapping\n   process (e.g., warnings and errors) and provides potentially\
    \ useful\n   information upon completion (e.g., the device's Secure Shell (SSH)\n\
    \   host keys and/or TLS trust anchor certificates).\n   A bootstrap server may\
    \ be a trusted or an untrusted source of\n   bootstrapping data, depending on\
    \ if the device learned about the\n   bootstrap server's trust anchor from a trusted\
    \ source.  When a\n   bootstrap server is trusted, the conveyed information returned\
    \ from\n   it MAY be signed.  When the bootstrap server is untrusted, the\n  \
    \ conveyed information either MUST be signed or MUST be information\n   that can\
    \ be processed provisionally (e.g., unsigned redirect\n   information).\n   From\
    \ an artifact perspective, since a bootstrap server presents data\n   conforming\
    \ to a YANG data model, the bootstrapping artifacts need to\n   be mapped to YANG\
    \ nodes.  The three artifacts defined in Section 3\n   are mapped to \"output\"\
    \ nodes of the \"get-bootstrapping-data\" RPC\n   defined in Section 7.3.\n  \
    \ Artifact to Bootstrap Server Mapping:\n      Conveyed Information:  Mapped to\
    \ the \"conveyed-information\" leaf\n         in the output of the \"get-bootstrapping-data\"\
    \ RPC.\n      Owner Certificate:  Mapped to the \"owner-certificate\" leaf in\
    \ the\n         output of the \"get-bootstrapping-data\" RPC.\n      Ownership\
    \ Voucher:  Mapped to the \"ownership-voucher\" leaf in the\n         output of\
    \ the \"get-bootstrapping-data\" RPC.\n   SZTP bootstrap servers have only two\
    \ endpoints: one for the\n   \"get-bootstrapping-data\" RPC and one for the \"\
    report-progress\" RPC.\n   These RPCs use the authenticated RESTCONF username\
    \ to isolate the\n   execution of the RPC from other devices.\n"
- title: 5.  Device Details
  contents:
  - "5.  Device Details\n   Devices supporting the bootstrapping strategy described\
    \ in this\n   document MUST have the pre-configured state and bootstrapping logic\n\
    \   described in the following sections.\n"
- title: 5.1.  Initial State
  contents:
  - "5.1.  Initial State\n      +-------------------------------------------------------------+\n\
    \      |                          <device>                           |\n     \
    \ |                                                             |\n      | +---------------------------------------------------------+\
    \ |\n      | |                   <read/write storage>                  | |\n \
    \     | |                                                         | |\n      |\
    \ | 1.  flag to enable SZTP bootstrapping set to \"true\"     | |\n      | +---------------------------------------------------------+\
    \ |\n      |                                                             |\n \
    \     | +---------------------------------------------------------+ |\n      |\
    \ |                   <read-only storage>                   | |\n      | |   \
    \                                                      | |\n      | | 2.  TLS\
    \ client cert & related intermediate certificates | |\n      | | 3.  list of trusted\
    \ well-known bootstrap servers        | |\n      | | 4.  list of trust anchor\
    \ certs for bootstrap servers    | |\n      | | 5.  list of trust anchor certs\
    \ for ownership vouchers   | |\n      | +---------------------------------------------------------+\
    \ |\n      |                                                             |\n \
    \     |   +-----------------------------------------------------+   |\n      |\
    \   |                 <secure storage>                    |   |\n      |   | \
    \                                                    |   |\n      |   |  6.  private\
    \ key for TLS client certificate         |   |\n      |   |  7.  private key for\
    \ decrypting SZTP artifacts      |   |\n      |   +-----------------------------------------------------+\
    \   |\n      |                                                             |\n\
    \      +-------------------------------------------------------------+\n   Each\
    \ numbered item below corresponds to a numbered item in the\n   diagram above.\n\
    \   1.  Devices MUST have a configurable variable that is used to enable/\n  \
    \     disable SZTP bootstrapping.  This variable MUST be enabled by\n       default\
    \ in order for SZTP bootstrapping to run when the device\n       first powers\
    \ on.  Because it is a goal that the configuration\n       installed by the bootstrapping\
    \ process disables SZTP\n       bootstrapping, and because the configuration may\
    \ be merged into\n       the existing configuration, using a configuration node\
    \ that\n       relies on presence is NOT RECOMMENDED, as it cannot be removed\
    \ by\n       the merging process.\n   2.  Devices that support loading bootstrapping\
    \ data from bootstrap\n       servers (see Section 4.4) SHOULD possess a TLS-level\
    \ client\n       certificate and any intermediate certificates leading to the\n\
    \       certificate's well-known trust anchor.  The well-known trust\n       anchor\
    \ certificate may be an intermediate certificate or a self-\n       signed root\
    \ certificate.  To support devices not having a client\n       certificate, devices\
    \ MAY, alternatively or in addition to,\n       identify and authenticate themselves\
    \ to the bootstrap server\n       using an HTTP authentication scheme, as allowed\
    \ by Section 2.5 of\n       [RFC8040]; however, this document does not define\
    \ a mechanism for\n       operator input enabling, for example, the entering of\
    \ a password.\n   3.  Devices that support loading bootstrapping data from well-known\n\
    \       bootstrap servers MUST possess a list of the well-known bootstrap\n  \
    \     servers.  Consistent with redirect information (Section 2.1),\n       each\
    \ bootstrap server can be identified by its hostname or IP\n       address and\
    \ an optional port.\n   4.  Devices that support loading bootstrapping data from\
    \ well-known\n       bootstrap servers MUST also possess a list of trust anchor\n\
    \       certificates that can be used to authenticate the well-known\n       bootstrap\
    \ servers.  For each trust anchor certificate, if it is\n       not itself a self-signed\
    \ root certificate, the device SHOULD also\n       possess the chain of intermediate\
    \ certificates leading up to and\n       including the self-signed root certificate.\n\
    \   5.  Devices that support loading signed data (see Section 1.2) MUST\n    \
    \   possess the trust anchor certificates for validating ownership\n       vouchers.\
    \  For each trust anchor certificate, if it is not itself\n       a self-signed\
    \ root certificate, the device SHOULD also possess\n       the chain of intermediate\
    \ certificates leading up to and\n       including the self-signed root certificate.\n\
    \   6.  Devices that support using a TLS-level client certificate to\n       identify\
    \ and authenticate themselves to a bootstrap server MUST\n       possess the private\
    \ key that corresponds to the public key\n       encoded in the TLS-level client\
    \ certificate.  This private key\n       SHOULD be securely stored, ideally in\
    \ a cryptographic processor,\n       such as a trusted platform module (TPM) chip.\n\
    \   7.  Devices that support decrypting SZTP artifacts MUST posses the\n     \
    \  private key that corresponds to the public key encoded in the\n       secure\
    \ device identity certificate used when encrypting the\n       artifacts.  This\
    \ private key SHOULD be securely stored, ideally\n       in a cryptographic processor,\
    \ such as a trusted platform module\n       (TPM) chip.  This private key MAY\
    \ be the same as the one\n       associated to the TLS-level client certificate\
    \ used when\n       connecting to bootstrap servers.\n   A YANG module representing\
    \ this data is provided in Appendix A.\n"
- title: 5.2.  Boot Sequence
  contents:
  - "5.2.  Boot Sequence\n   A device claiming to support the bootstrapping strategy\
    \ defined in\n   this document MUST support the boot sequence described in this\n\
    \   section.\n        Power On\n            |\n            v                 \
    \          No\n    1.  SZTP bootstrapping configured ------> Boot normally\n \
    \           |\n            | Yes\n            v\n    2.  For each supported source\
    \ of bootstrapping data,\n        try to load bootstrapping data from the source\n\
    \            |\n            |\n            v                               Yes\n\
    \    3.  Able to bootstrap from any source? -----> Run with new config\n     \
    \       |\n            | No\n            v\n    4.  Loop back to Step 1\n    Note:\
    \ At any time, the device MAY be configured via an alternate\n          provisioning\
    \ mechanism (e.g., command-line interface (CLI)).\n   Each numbered item below\
    \ corresponds to a numbered item in the\n   diagram above.\n   1.  When the device\
    \ powers on, it first checks to see if SZTP\n       bootstrapping is configured,\
    \ as is expected to be the case for\n       the device's pre-configured initial\
    \ state.  If SZTP bootstrapping\n       is not configured, then the device boots\
    \ normally.\n   2.  The device iterates over its list of sources for bootstrapping\n\
    \       data (Section 4).  Details for how to process a source of\n       bootstrapping\
    \ data are provided in Section 5.3.\n   3.  If the device is able to bootstrap\
    \ itself from any of the sources\n       of bootstrapping data, it runs with the\
    \ new bootstrapped\n       configuration.\n   4.  Otherwise, the device MUST loop\
    \ back through the list of\n       bootstrapping sources again.\n   This document\
    \ does not limit the simultaneous use of alternate\n   provisioning mechanisms.\
    \  Such mechanisms may include, for instance,\n   a CLI, a web-based user interface,\
    \ or even another bootstrapping\n   protocol.  Regardless of how it is configured,\
    \ the configuration\n   SHOULD unset the flag enabling SZTP bootstrapping as discussed\
    \ in\n   Section 5.1.\n"
- title: 5.3.  Processing a Source of Bootstrapping Data
  contents:
  - "5.3.  Processing a Source of Bootstrapping Data\n   This section describes a\
    \ recursive algorithm that devices can use to,\n   ultimately, obtain onboarding\
    \ information.  The algorithm is\n   recursive because sources of bootstrapping\
    \ data may return redirect\n   information, which causes the algorithm to run\
    \ again, for the newly\n   discovered sources of bootstrapping data.  An expression\
    \ that\n   captures all possible successful sequences of bootstrapping data is:\n\
    \   zero or more redirect information responses, followed by one\n   onboarding\
    \ information response.\n   An important aspect of the algorithm is knowing when\
    \ data needs to be\n   signed or not.  The following figure provides a summary\
    \ of options:\n                                    Untrusted Source  Trusted Source\n\
    \       Kind of Bootstrapping Data     Can Provide?     Can Provide?\n       Unsigned\
    \ Redirect Info     :       Yes+             Yes\n       Signed Redirect Info\
    \       :       Yes              Yes*\n       Unsigned Onboarding Info   :   \
    \     No              Yes\n       Signed Onboarding Info     :       Yes     \
    \         Yes*\n       The '+' above denotes that the source redirected to MUST\n\
    \       return signed data or more unsigned redirect information.\n       The\
    \ '*' above denotes that, while possible, it is generally\n       unnecessary\
    \ for a trusted source to return signed data.\n   The recursive algorithm uses\
    \ a conceptual globally scoped variable\n   called \"trust-state\".  The trust-state\
    \ variable is initialized to\n   FALSE.  The ultimate goal of this algorithm is\
    \ for the device to\n   process onboarding information (Section 2.2) while the\
    \ trust-state\n   variable is TRUE.\n   If the source of bootstrapping data (Section\
    \ 4) is a bootstrap server\n   (Section 4.4), and the device is able to authenticate\
    \ the bootstrap\n   server using X.509 certificate path validation ([RFC6125],\
    \ Section 6)\n   to one of the device's pre-configured trust anchors, or to a\
    \ trust\n   anchor that it learned from a previous step, then the device MUST\
    \ set\n   trust-state to TRUE.\n   When establishing a connection to a bootstrap\
    \ server, whether trusted\n   or untrusted, the device MUST identify and authenticate\
    \ itself to the\n   bootstrap server using a TLS-level client certificate and/or\
    \ an HTTP\n   authentication scheme, per Section 2.5 of [RFC8040].  If both\n\
    \   authentication mechanisms are used, they MUST both identify the same\n   serial\
    \ number.\n   When sending a client certificate, the device MUST also send all\
    \ of\n   the intermediate certificates leading up to, and optionally\n   including,\
    \ the client certificate's well-known trust anchor\n   certificate.\n   For any\
    \ source of bootstrapping data (e.g., Section 4), if any\n   artifact obtained\
    \ is encrypted, the device MUST first decrypt it\n   using the private key associated\
    \ with the device certificate used to\n   encrypt the artifact.\n   If the conveyed\
    \ information artifact is signed, and the device is\n   able to validate the signed\
    \ data using the algorithm described in\n   Section 5.4, then the device MUST\
    \ set trust-state to TRUE; otherwise,\n   if the device is unable to validate\
    \ the signed data, the device MUST\n   set trust-state to FALSE.  Note that this\
    \ is worded to cover the\n   special case when signed data is returned even from\
    \ a trusted source\n   of bootstrapping data.\n   If the conveyed information\
    \ artifact contains redirect information,\n   the device MUST, within limits of\
    \ how many recursive loops the device\n   allows, process the redirect information\
    \ as described in Section 5.5.\n   Implementations MUST limit the maximum number\
    \ of recursive redirects\n   allowed; the maximum number of recursive redirects\
    \ allowed SHOULD be\n   no more than ten.  This is the recursion step; it will\
    \ cause the\n   device to reenter this algorithm, but this time the data source\
    \ will\n   definitely be a bootstrap server, as redirect information is only\n\
    \   able to redirect devices to bootstrap servers.\n   If the conveyed information\
    \ artifact contains onboarding information,\n   and trust-state is FALSE, the\
    \ device MUST exit the recursive\n   algorithm (as this is not allowed; see the\
    \ figure above), returning\n   to the bootstrapping sequence described in Section\
    \ 5.2.  Otherwise,\n   the device MUST attempt to process the onboarding information\
    \ as\n   described in Section 5.6.  Whether the processing of the onboarding\n\
    \   information succeeds or fails, the device MUST exit the recursive\n   algorithm,\
    \ returning to the bootstrapping sequence described in\n   Section 5.2; the only\
    \ difference is how it responds to the \"Able to\n   bootstrap from any source?\"\
    \ conditional described in the figure in\n   that section.\n"
- title: 5.4.  Validating Signed Data
  contents:
  - "5.4.  Validating Signed Data\n   Whenever a device is presented signed data,\
    \ it MUST validate the\n   signed data as described in this section.  This includes\
    \ the case\n   where the signed data is provided by a trusted source.\n   Whenever\
    \ there is signed data, the device MUST also be provided an\n   ownership voucher\
    \ and an owner certificate.  How all the needed\n   artifacts are provided for\
    \ each source of bootstrapping data is\n   described in Section 4.\n   In order\
    \ to validate signed data, the device MUST first authenticate\n   the ownership\
    \ voucher by validating its signature to one of its pre-\n   configured trust\
    \ anchors (see Section 5.1), which may entail using\n   additional intermediate\
    \ certificates attached to the ownership\n   voucher.  If the device has an accurate\
    \ clock, it MUST verify that\n   the ownership voucher was created in the past\
    \ (i.e., \"created-on\" <\n   now), and if the \"expires-on\" leaf is present,\
    \ the device MUST verify\n   that the ownership voucher has not yet expired (i.e.,\
    \ now < \"expires-\n   on\").  The device MUST verify that the ownership voucher's\n\
    \   \"assertion\" value is acceptable (e.g., some devices may only accept\n  \
    \ the assertion value \"verified\").  The device MUST verify that the\n   ownership\
    \ voucher specifies the device's serial number in the\n   \"serial-number\" leaf.\
    \  If the \"idevid-issuer\" leaf is present, the\n   device MUST verify that the\
    \ value is set correctly.  If the\n   authentication of the ownership voucher\
    \ is successful, the device\n   extracts the \"pinned-domain-cert\" node, an X.509\
    \ certificate, that is\n   needed to verify the owner certificate in the next\
    \ step.\n   The device MUST next authenticate the owner certificate by performing\n\
    \   X.509 certificate path verification to the trusted certificate\n   extracted\
    \ from the ownership voucher's \"pinned-domain-cert\" node.\n   This verification\
    \ may entail using additional intermediate\n   certificates attached to the owner\
    \ certificate artifact.  If the\n   ownership voucher's \"domain-cert-revocation-checks\"\
    \ node's value is\n   set to \"true\", the device MUST verify the revocation status\
    \ of the\n   certificate chain used to sign the owner certificate, and if a\n\
    \   suitably fresh revocation status is unattainable or if it is\n   determined\
    \ that a certificate has been revoked, the device MUST NOT\n   validate the owner\
    \ certificate.\n   Finally, the device MUST verify that the conveyed information\n\
    \   artifact was signed by the validated owner certificate.\n   If any of these\
    \ steps fail, the device MUST invalidate the signed\n   data and not perform any\
    \ subsequent steps.\n"
- title: 5.5.  Processing Redirect Information
  contents:
  - "5.5.  Processing Redirect Information\n   In order to process redirect information\
    \ (Section 2.1), the device\n   MUST follow the steps presented in this section.\n\
    \   Processing redirect information is straightforward; the device\n   sequentially\
    \ steps through the list of provided bootstrap servers\n   until it can find one\
    \ it can bootstrap from.\n   If a hostname is provided, and the hostname's DNS\
    \ resolution is to\n   more than one IP address, the device MUST attempt to connect\
    \ to all\n   of the DNS resolved addresses at least once, before moving on to\
    \ the\n   next bootstrap server.  If the device is able to obtain bootstrapping\n\
    \   data from any of the DNS resolved addresses, it MUST immediately\n   process\
    \ that data, without attempting to connect to any of the other\n   DNS resolved\
    \ addresses.\n   If the redirect information is trusted (e.g., trust-state is\
    \ TRUE),\n   and the bootstrap server entry contains a trust anchor certificate,\n\
    \   then the device MUST authenticate the specified bootstrap server's\n   TLS\
    \ server certificate using X.509 certificate path validation\n   ([RFC6125], Section\
    \ 6) to the specified trust anchor.  If the\n   bootstrap server entry does not\
    \ contain a trust anchor certificate\n   device, the device MUST establish a provisional\
    \ connection to the\n   bootstrap server (i.e., by blindly accepting its server\
    \ certificate)\n   and set trust-state to FALSE.\n   If the redirect information\
    \ is untrusted (e.g., trust-state is\n   FALSE), the device MUST discard any trust\
    \ anchors provided by the\n   redirect information and establish a provisional\
    \ connection to the\n   bootstrap server (i.e., by blindly accepting its TLS server\n\
    \   certificate).\n"
- title: 5.6.  Processing Onboarding Information
  contents:
  - "5.6.  Processing Onboarding Information\n   In order to process onboarding information\
    \ (Section 2.2), the device\n   MUST follow the steps presented in this section.\n\
    \   When processing onboarding information, the device MUST first process\n  \
    \ the boot image information (if any), then execute the pre-\n   configuration\
    \ script (if any), then commit the initial configuration\n   (if any), and then\
    \ execute the post-configuration script (if any), in\n   that order.\n   When\
    \ the onboarding information is obtained from a trusted bootstrap\n   server,\
    \ the device MUST send the \"bootstrap-initiated\" progress\n   report and send\
    \ a terminating \"boot-image-installed-rebooting\",\n   \"bootstrap-complete\"\
    , or error-specific progress report.  If the\n   \"reporting-level\" node of the\
    \ bootstrap server's \"get-bootstrapping-\n   data\" RPC-reply is the value \"\
    verbose\", the device MUST additionally\n   send all appropriate non-terminating\
    \ progress reports (e.g.,\n   initiated, warning, complete, etc.).  Regardless\
    \ of the reporting\n   level requested by the bootstrap server, the device MAY\
    \ send progress\n   reports beyond those required by the reporting level.\n  \
    \ When the onboarding information is obtained from an untrusted\n   bootstrap\
    \ server, the device MUST NOT send any progress reports to\n   the bootstrap server,\
    \ even though the onboarding information was,\n   necessarily, signed and authenticated.\
    \  Please be aware that\n   bootstrap servers are recommended to promote untrusted\
    \ connections to\n   trusted connections, in the last paragraph of Section 9.6,\
    \ so as to,\n   in part, be able to collect progress reports from devices.\n \
    \  If the device encounters an error at any step, it MUST stop\n   processing\
    \ the onboarding information and return to the bootstrapping\n   sequence described\
    \ in Section 5.2.  In the context of a recursive\n   algorithm, the device MUST\
    \ return to the enclosing loop, not back to\n   the very beginning.  Some state\
    \ MAY be retained from the\n   bootstrapping process (e.g., updated boot image,\
    \ logs, remnants from\n   a script, etc.).  However, the retained state MUST NOT\
    \ be active in\n   any way (e.g., no new configuration or running of software)\
    \ and MUST\n   NOT hinder the ability for the device to continue the bootstrapping\n\
    \   sequence (i.e., process onboarding information from another bootstrap\n  \
    \ server).\n   At this point, the specific ordered sequence of actions the device\n\
    \   MUST perform is described.\n   If the onboarding information is obtained from\
    \ a trusted bootstrap\n   server, the device MUST send a \"bootstrap-initiated\"\
    \ progress report.\n   It is an error if the device does not receive back the\
    \ \"204 No\n   Content\" HTTP status line.  If an error occurs, the device MUST\
    \ try\n   to send a \"bootstrap-error\" progress report before exiting.\n   The\
    \ device MUST parse the provided onboarding information document,\n   to extract\
    \ values used in subsequent steps.  Whether using a stream-\n   based parser or\
    \ not, if there is an error when parsing the onboarding\n   information, and the\
    \ device is connected to a trusted bootstrap\n   server, the device MUST try to\
    \ send a \"parsing-error\" progress report\n   before exiting.\n   If boot image\
    \ criteria are specified, the device MUST first determine\n   if the boot image\
    \ it is running satisfies the specified boot image\n   criteria.  If the device\
    \ is already running the specified boot image,\n   then it skips the remainder\
    \ of this step.  If the device is not\n   running the specified boot image, then\
    \ it MUST download, verify, and\n   install, in that order, the specified boot\
    \ image, and then reboot.\n   If connected to a trusted bootstrap server, the\
    \ device MAY try to\n   send a \"boot-image-mismatch\" progress report.  To download\
    \ the boot\n   image, the device MUST only use the URIs supplied by the onboarding\n\
    \   information.  To verify the boot image, the device MUST use either\n   one\
    \ of the verification fingerprints supplied by the onboarding\n   information\
    \ or a cryptographic signature embedded into the boot image\n   itself using a\
    \ mechanism not described by this document.  Before\n   rebooting, if connected\
    \ to a trusted bootstrap server, the device\n   MUST try to send a \"boot-image-installed-rebooting\"\
    \ progress report.\n   Upon rebooting, the bootstrapping process runs again, which\
    \ will\n   eventually come to this step again, but then the device will be\n \
    \  running the specified boot image and thus will move to processing the\n   next\
    \ step.  If an error occurs at any step while the device is\n   connected to a\
    \ trusted bootstrap server (i.e., before the reboot),\n   the device MUST try\
    \ to send a \"boot-image-error\" progress report\n   before exiting.\n   If a\
    \ pre-configuration script has been specified, the device MUST\n   execute the\
    \ script, capture any output emitted from the script, and\n   check if the script\
    \ had any warnings or errors.  If an error occurs\n   while the device is connected\
    \ to a trusted bootstrap server, the\n   device MUST try to send a \"pre-script-error\"\
    \ progress report before\n   exiting.\n   If an initial configuration has been\
    \ specified, the device MUST\n   atomically commit the provided initial configuration,\
    \ using the\n   approach specified by the \"configuration-handling\" leaf.  If\
    \ an error\n   occurs while the device is connected to a trusted bootstrap server,\n\
    \   the device MUST try to send a \"config-error\" progress report before\n  \
    \ exiting.\n   If a post-configuration script has been specified, the device MUST\n\
    \   execute the script, capture any output emitted from the script, and\n   check\
    \ if the script had any warnings or errors.  If an error occurs\n   while the\
    \ device is connected to a trusted bootstrap server, the\n   device MUST try to\
    \ send a \"post-script-error\" progress report before\n   exiting.\n   If the\
    \ onboarding information was obtained from a trusted bootstrap\n   server, and\
    \ the result of the bootstrapping process did not disable\n   the \"flag to enable\
    \ SZTP bootstrapping\" described in Section 5.1, the\n   device SHOULD send an\
    \ \"bootstrap-warning\" progress report.\n   If the onboarding information was\
    \ obtained from a trusted bootstrap\n   server, the device MUST send a \"bootstrap-complete\"\
    \ progress report.\n   It is an error if the device does not receive back the\
    \ \"204 No\n   Content\" HTTP status line.  If an error occurs, the device MUST\
    \ try\n   to send a \"bootstrap-error\" progress report before exiting.\n   At\
    \ this point, the device has completely processed the bootstrapping\n   data.\n\
    \   The device is now running its initial configuration.  Notably, if\n   NETCONF\
    \ Call Home or RESTCONF Call Home [RFC8071] is configured, the\n   device initiates\
    \ trying to establish the call home connections at\n   this time.\n   Implementation\
    \ Notes:\n      Implementations may vary in how to ensure no unwanted state is\n\
    \      retained when an error occurs.\n      If the implementation chooses to\
    \ undo previous steps, the\n      following guidelines apply:\n      *  When an\
    \ error occurs, the device must rollback the current step\n         and any previous\
    \ steps.\n      *  Most steps are atomic.  For example, the processing of a\n\
    \         configuration is atomic (as specified above), and the\n         processing\
    \ of scripts is atomic (as specified in the \"ietf-\n         sztp-conveyed-info\"\
    \ YANG module).\n      *  In case the error occurs after the initial configuration\
    \ was\n         committed, the device must restore the configuration to the\n\
    \         configuration that existed prior to the configuration being\n      \
    \   committed.\n      *  In case the error occurs after a script had executed\n\
    \         successfully, it may be helpful for the implementation to\n        \
    \ define scripts as being able to take a conceptual input\n         parameter\
    \ indicating that the script should remove its\n         previously set state.\n"
- title: 6.  The Conveyed Information Data Model
  contents:
  - "6.  The Conveyed Information Data Model\n   This section defines a YANG 1.1 [RFC7950]\
    \ module that is used to\n   define the data model for the conveyed information\
    \ artifact described\n   in Section 3.1.  This data model uses the \"yang-data\"\
    \ extension\n   statement defined in [RFC8040].  Examples illustrating this data\n\
    \   model are provided in Section 6.2.\n"
- title: 6.1.  Data Model Overview
  contents:
  - "6.1.  Data Model Overview\n   The following tree diagram provides an overview\
    \ of the data model for\n   the conveyed information artifact.\n         module:\
    \ ietf-sztp-conveyed-info\n           yang-data conveyed-information:\n      \
    \       +-- (information-type)\n                +--:(redirect-information)\n \
    \               |  +-- redirect-information\n                |     +-- bootstrap-server*\
    \ [address]\n                |        +-- address         inet:host\n        \
    \        |        +-- port?           inet:port-number\n                |    \
    \    +-- trust-anchor?   cms\n                +--:(onboarding-information)\n \
    \                  +-- onboarding-information\n                      +-- boot-image\n\
    \                      |  +-- os-name?              string\n                 \
    \     |  +-- os-version?           string\n                      |  +-- download-uri*\
    \         inet:uri\n                      |  +-- image-verification* [hash-algorithm]\n\
    \                      |     +-- hash-algorithm    identityref\n             \
    \         |     +-- hash-value        yang:hex-string\n                      +--\
    \ configuration-handling?      enumeration\n                      +-- pre-configuration-script?\
    \    script\n                      +-- configuration?               binary\n \
    \                     +-- post-configuration-script?   script\n"
- title: 6.2.  Example Usage
  contents:
  - "6.2.  Example Usage\n   The following example illustrates how redirect information\n\
    \   (Section 2.1) can be encoded using JSON [RFC8259].\n   {\n     \"ietf-sztp-conveyed-info:redirect-information\"\
    \ : {\n       \"bootstrap-server\" : [\n         {\n           \"address\" : \"\
    sztp1.example.com\",\n           \"port\" : 8443,\n           \"trust-anchor\"\
    \ : \"base64encodedvalue==\"\n         },\n         {\n           \"address\"\
    \ : \"sztp2.example.com\",\n           \"port\" : 8443,\n           \"trust-anchor\"\
    \ : \"base64encodedvalue==\"\n         },\n         {\n           \"address\"\
    \ : \"sztp3.example.com\",\n           \"port\" : 8443,\n           \"trust-anchor\"\
    \ : \"base64encodedvalue==\"\n         }\n       ]\n     }\n   }\n   The following\
    \ example illustrates how onboarding information\n   (Section 2.2) can be encoded\
    \ using JSON [RFC8259].\n   [Note: '\\' line wrapping for formatting only]\n \
    \  {\n     \"ietf-sztp-conveyed-info:onboarding-information\" : {\n       \"boot-image\"\
    \ : {\n         \"os-name\" : \"VendorOS\",\n         \"os-version\" : \"17.2R1.6\"\
    ,\n         \"download-uri\" : [ \"https://example.com/path/to/image/file\" ],\n\
    \         \"image-verification\" : [\n           {\n             \"hash-algorithm\"\
    \ : \"ietf-sztp-conveyed-info:sha-256\",\n             \"hash-value\" : \"ba:ec:cf:a5:67:82:b4:10:77:c6:67:a6:22:ab:\\\
    \n   7d:50:04:a7:8b:8f:0e:db:02:8b:f4:75:55:fb:c1:13:b2:33\"\n           }\n \
    \        ]\n       },\n       \"configuration-handling\" : \"merge\",\n      \
    \ \"pre-configuration-script\" : \"base64encodedvalue==\",\n       \"configuration\"\
    \ : \"base64encodedvalue==\",\n       \"post-configuration-script\" : \"base64encodedvalue==\"\
    \n     }\n   }\n"
- title: 6.3.  YANG Module
  contents:
  - "6.3.  YANG Module\n   The conveyed information data model is defined by the YANG\
    \ module\n   presented in this section.\n   This module uses data types defined\
    \ in [RFC5280], [RFC5652],\n   [RFC6234], and [RFC6991]; an extension statement\
    \ from [RFC8040]; and\n   an encoding defined in [ITU.X690.2015].\n  <CODE BEGINS>\
    \ file \"ietf-sztp-conveyed-info@2019-04-30.yang\"\n  module ietf-sztp-conveyed-info\
    \ {\n    yang-version 1.1;\n    namespace \"urn:ietf:params:xml:ns:yang:ietf-sztp-conveyed-info\"\
    ;\n    prefix sztp-info;\n    import ietf-yang-types {\n      prefix yang;\n \
    \     reference\n        \"RFC 6991: Common YANG Data Types\";\n    }\n    import\
    \ ietf-inet-types {\n      prefix inet;\n      reference\n        \"RFC 6991:\
    \ Common YANG Data Types\";\n    }\n    import ietf-restconf {\n      prefix rc;\n\
    \      reference\n        \"RFC 8040: RESTCONF Protocol\";\n    }\n    organization\n\
    \      \"IETF NETCONF (Network Configuration) Working Group\";\n    contact\n\
    \      \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n       WG List:\
    \  <mailto:netconf@ietf.org>\n       Author:   Kent Watsen <mailto:kent+ietf@watsen.net>\"\
    ;\n    description\n      \"This module defines the data model for the conveyed\n\
    \       information artifact defined in RFC 8572 ('Secure Zero Touch\n       Provisioning\
    \ (SZTP)').\n       The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',\n \
    \      'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',\n       'NOT RECOMMENDED',\
    \ 'MAY', and 'OPTIONAL' in this document\n       are to be interpreted as described\
    \ in BCP 14 (RFC 2119)\n       (RFC 8174) when, and only when, they appear in\
    \ all\n       capitals, as shown here.\n       Copyright (c) 2019 IETF Trust and\
    \ the persons identified as\n       authors of the code.  All rights reserved.\n\
    \       Redistribution and use in source and binary forms, with or\n       without\
    \ modification, is permitted pursuant to, and subject\n       to the license terms\
    \ contained in, the Simplified BSD License\n       set forth in Section 4.c of\
    \ the IETF Trust's Legal Provisions\n       Relating to IETF Documents\n     \
    \  (https://trustee.ietf.org/license-info).\n       This version of this YANG\
    \ module is part of RFC 8572; see the\n       RFC itself for full legal notices.\"\
    ;\n    revision 2019-04-30 {\n      description\n        \"Initial version\";\n\
    \      reference\n        \"RFC 8572: Secure Zero Touch Provisioning (SZTP)\"\
    ;\n    }\n    // identities\n    identity hash-algorithm {\n      description\n\
    \        \"A base identity for hash algorithm verification.\";\n    }\n    identity\
    \ sha-256 {\n      base hash-algorithm;\n      description\n        \"The SHA-256\
    \ algorithm.\";\n      reference\n        \"RFC 6234: US Secure Hash Algorithms\"\
    ;\n    }\n    // typedefs\n    typedef cms {\n      type binary;\n      description\n\
    \        \"A ContentInfo structure, as specified in RFC 5652,\n         encoded\
    \ using ASN.1 distinguished encoding rules (DER),\n         as specified in ITU-T\
    \ X.690.\";\n      reference\n        \"RFC 5652:\n           Cryptographic Message\
    \ Syntax (CMS)\n         ITU-T X.690:\n           Information technology - ASN.1\
    \ encoding rules:\n           Specification of Basic Encoding Rules (BER),\n \
    \          Canonical Encoding Rules (CER) and Distinguished\n           Encoding\
    \ Rules (DER)\";\n    }\n    // yang-data\n    rc:yang-data conveyed-information\
    \ {\n      choice information-type {\n        mandatory true;\n        description\n\
    \          \"This choice statement ensures the response contains\n           redirect-information\
    \ or onboarding-information.\";\n        container redirect-information {\n  \
    \        description\n            \"Redirect information is described in Section\
    \ 2.1 of\n             RFC 8572.  Its purpose is to redirect a device to\n   \
    \          another bootstrap server.\";\n          reference\n            \"RFC\
    \ 8572: Secure Zero Touch Provisioning (SZTP)\";\n          list bootstrap-server\
    \ {\n            key \"address\";\n            min-elements 1;\n            description\n\
    \              \"A bootstrap server entry.\";\n            leaf address {\n  \
    \            type inet:host;\n              mandatory true;\n              description\n\
    \                \"The IP address or hostname of the bootstrap server the\n  \
    \               device should redirect to.\";\n            }\n            leaf\
    \ port {\n              type inet:port-number;\n              default \"443\"\
    ;\n              description\n                \"The port number the bootstrap\
    \ server listens on.  If no\n                 port is specified, the IANA-assigned\
    \ port for 'https'\n                 (443) is used.\";\n            }\n      \
    \      leaf trust-anchor {\n              type cms;\n              description\n\
    \                \"A CMS structure that MUST contain the chain of\n          \
    \       X.509 certificates needed to authenticate the TLS\n                 certificate\
    \ presented by this bootstrap server.\n                 The CMS MUST only contain\
    \ a single chain of\n                 certificates.  The bootstrap server MUST\
    \ only\n                 authenticate to last intermediate CA certificate\n  \
    \               listed in the chain.\n                 In all cases, the chain\
    \ MUST include a self-signed\n                 root certificate.  In the case\
    \ where the root\n                 certificate is itself the issuer of the bootstrap\n\
    \                 server's TLS certificate, only one certificate\n           \
    \      is present.\n                 If needed by the device, this CMS structure\
    \ MAY\n                 also contain suitably fresh revocation objects\n     \
    \            with which the device can verify the revocation\n               \
    \  status of the certificates.\n                 This CMS encodes the degenerate\
    \ form of the SignedData\n                 structure that is commonly used to\
    \ disseminate X.509\n                 certificates and revocation objects (RFC\
    \ 5280).\";\n              reference\n                \"RFC 5280:\n          \
    \         Internet X.509 Public Key Infrastructure Certificate\n             \
    \      and Certificate Revocation List (CRL) Profile\";\n            }\n     \
    \     }\n        }\n        container onboarding-information {\n          description\n\
    \            \"Onboarding information is described in Section 2.2 of\n       \
    \      RFC 8572.  Its purpose is to provide the device everything\n          \
    \   it needs to bootstrap itself.\";\n          reference\n            \"RFC 8572:\
    \ Secure Zero Touch Provisioning (SZTP)\";\n          container boot-image {\n\
    \            description\n              \"Specifies criteria for the boot image\
    \ the device MUST\n               be running, as well as information enabling\
    \ the device\n               to install the required boot image.\";\n        \
    \    leaf os-name {\n              type string;\n              description\n \
    \               \"The name of the operating system software the device\n     \
    \            MUST be running in order to not require a software\n            \
    \     image upgrade (e.g., VendorOS).\";\n            }\n            leaf os-version\
    \ {\n              type string;\n              description\n                \"\
    The version of the operating system software the\n                 device MUST\
    \ be running in order to not require a\n                 software image upgrade\
    \ (e.g., 17.3R2.1).\";\n            }\n            leaf-list download-uri {\n\
    \              type inet:uri;\n              ordered-by user;\n              description\n\
    \                \"An ordered list of URIs to where the same boot image\n    \
    \             file may be obtained.  How the URI schemes (http, ftp,\n       \
    \          etc.) a device supports are known is vendor specific.\n           \
    \      If a secure scheme (e.g., https) is provided, a device\n              \
    \   MAY establish an untrusted connection to the remote\n                 server,\
    \ by blindly accepting the server's end-entity\n                 certificate,\
    \ to obtain the boot image.\";\n            }\n            list image-verification\
    \ {\n              must '../download-uri' {\n                description\n   \
    \               \"Download URIs must be provided if an image is to\n         \
    \          be verified.\";\n              }\n              key \"hash-algorithm\"\
    ;\n              description\n                \"A list of hash values that a device\
    \ can use to verify\n                 boot image files with.\";\n            \
    \  leaf hash-algorithm {\n                type identityref {\n               \
    \   base hash-algorithm;\n                }\n                description\n   \
    \               \"Identifies the hash algorithm used.\";\n              }\n  \
    \            leaf hash-value {\n                type yang:hex-string;\n      \
    \          mandatory true;\n                description\n                  \"\
    The hex-encoded value of the specified hash\n                   algorithm over\
    \ the contents of the boot image\n                   file.\";\n              }\n\
    \            }\n          }\n          leaf configuration-handling {\n       \
    \     type enumeration {\n              enum merge {\n                description\n\
    \                  \"Merge configuration into the running datastore.\";\n    \
    \          }\n              enum replace {\n                description\n    \
    \              \"Replace the existing running datastore with the\n           \
    \        passed configuration.\";\n              }\n            }\n          \
    \  must '../configuration';\n            description\n              \"This enumeration\
    \ indicates how the server should process\n               the provided configuration.\"\
    ;\n          }\n          leaf pre-configuration-script {\n            type script;\n\
    \            description\n              \"A script that, when present, is executed\
    \ before the\n               configuration has been processed.\";\n          }\n\
    \          leaf configuration {\n            type binary;\n            must '../configuration-handling';\n\
    \            description\n              \"Any configuration known to the device.\
    \  The use of\n               the 'binary' type enables content (e.g., XML) to\
    \ be\n               embedded into a JSON document.  The exact encoding\n    \
    \           of the content, as with the scripts, is vendor\n               specific.\"\
    ;\n          }\n          leaf post-configuration-script {\n            type script;\n\
    \            description\n              \"A script that, when present, is executed\
    \ after the\n               configuration has been processed.\";\n          }\n\
    \        }\n      }\n    }\n    typedef script {\n      type binary;\n      description\n\
    \        \"A device-specific script that enables the execution of\n         commands\
    \ to perform actions not possible thru configuration\n         alone.\n      \
    \   No attempt is made to standardize the contents, running\n         context,\
    \ or programming language of the script, other than\n         that it can indicate\
    \ if any warnings or errors occurred and\n         can emit output.  The contents\
    \ of the script are considered\n         specific to the vendor, product line,\
    \ and/or model of the\n         device.\n         If the script execution indicates\
    \ that a warning occurred,\n         then the device MUST assume that the script\
    \ had a soft error\n         that the script believes will not affect manageability.\n\
    \         If the script execution indicates that an error occurred,\n        \
    \ the device MUST assume the script had a hard error that the\n         script\
    \ believes will affect manageability.  In this case,\n         the script is required\
    \ to gracefully exit, removing any\n         state that might hinder the device's\
    \ ability to continue\n         the bootstrapping sequence (e.g., process onboarding\n\
    \         information obtained from another bootstrap server).\";\n    }\n  }\n\
    \  <CODE ENDS>\n"
- title: 7.  The SZTP Bootstrap Server API
  contents:
  - "7.  The SZTP Bootstrap Server API\n   This section defines the API for bootstrap\
    \ servers.  The API is\n   defined as that produced by a RESTCONF [RFC8040] server\
    \ that supports\n   the YANG 1.1 [RFC7950] module defined in this section.\n"
- title: 7.1.  API Overview
  contents:
  - "7.1.  API Overview\n   The following tree diagram provides an overview for the\
    \ bootstrap\n   server RESTCONF API.\n   module: ietf-sztp-bootstrap-server\n\
    \     rpcs:\n       +---x get-bootstrapping-data\n       |  +---w input\n    \
    \   |  |  +---w signed-data-preferred?   empty\n       |  |  +---w hw-model? \
    \               string\n       |  |  +---w os-name?                 string\n \
    \      |  |  +---w os-version?              string\n       |  |  +---w nonce?\
    \                   binary\n       |  +--ro output\n       |     +--ro reporting-level?\
    \    enumeration {onboarding-server}?\n       |     +--ro conveyed-information\
    \    cms\n       |     +--ro owner-certificate?      cms\n       |     +--ro ownership-voucher?\
    \      cms\n       +---x report-progress {onboarding-server}?\n          +---w\
    \ input\n             +---w progress-type         enumeration\n             +---w\
    \ message?              string\n             +---w ssh-host-keys\n           \
    \  |  +---w ssh-host-key* []\n             |     +---w algorithm    string\n \
    \            |     +---w key-data     binary\n             +---w trust-anchor-certs\n\
    \                +---w trust-anchor-cert*   cms\n"
- title: 7.2.  Example Usage
  contents:
  - "7.2.  Example Usage\n   This section presents three examples illustrating the\
    \ bootstrap\n   server's API.  Two examples are provided for the \"get-bootstrapping-\n\
    \   data\" RPC (one to an untrusted bootstrap server and the other to a\n   trusted\
    \ bootstrap server), and one example is provided for the\n   \"report-progress\"\
    \ RPC.\n   The following example illustrates a device using the API to fetch its\n\
    \   bootstrapping data from an untrusted bootstrap server.  In this\n   example,\
    \ the device sends the \"signed-data-preferred\" input parameter\n   and receives\
    \ signed data in the response.\n   REQUEST\n   [Note: '\\' line wrapping for formatting\
    \ only]\n   POST /restconf/operations/ietf-sztp-bootstrap-server:get-bootstrappi\\\
    \n   ng-data HTTP/1.1\n   HOST: example.com\n   Content-Type: application/yang.data+xml\n\
    \   <input\n     xmlns=\"urn:ietf:params:xml:ns:yang:ietf-sztp-bootstrap-server\"\
    >\n     <signed-data-preferred/>\n   </input>\n   RESPONSE\n   HTTP/1.1 200 OK\n\
    \   Date: Sat, 31 Oct 2015 17:02:40 GMT\n   Server: example-server\n   Content-Type:\
    \ application/yang.data+xml\n   <output\n     xmlns=\"urn:ietf:params:xml:ns:yang:ietf-sztp-bootstrap-server\"\
    >\n     <conveyed-information>base64encodedvalue==</conveyed-information>\n  \
    \   <owner-certificate>base64encodedvalue==</owner-certificate>\n     <ownership-voucher>base64encodedvalue==</ownership-voucher>\n\
    \   </output>\n   The following example illustrates a device using the API to\
    \ fetch its\n   bootstrapping data from a trusted bootstrap server.  In this example,\n\
    \   the device sends additional input parameters to the bootstrap server,\n  \
    \ which it may use when formulating its response to the device.\n   REQUEST\n\
    \   [Note: '\\' line wrapping for formatting only]\n   POST /restconf/operations/ietf-sztp-bootstrap-server:get-bootstrappi\\\
    \n   ng-data HTTP/1.1\n   HOST: example.com\n   Content-Type: application/yang.data+xml\n\
    \   <input\n     xmlns=\"urn:ietf:params:xml:ns:yang:ietf-sztp-bootstrap-server\"\
    >\n     <hw-model>model-x</hw-model>\n     <os-name>vendor-os</os-name>\n    \
    \ <os-version>17.3R2.1</os-version>\n     <nonce>extralongbase64encodedvalue=</nonce>\n\
    \   </input>\n   RESPONSE\n   HTTP/1.1 200 OK\n   Date: Sat, 31 Oct 2015 17:02:40\
    \ GMT\n   Server: example-server\n   Content-Type: application/yang.data+xml\n\
    \   <output\n     xmlns=\"urn:ietf:params:xml:ns:yang:ietf-sztp-bootstrap-server\"\
    >\n     <reporting-level>verbose</reporting-level>\n     <conveyed-information>base64encodedvalue==</conveyed-information>\n\
    \   </output>\n   The following example illustrates a device using the API to\
    \ post a\n   progress report to a bootstrap server.  Illustrated below is the\n\
    \   \"bootstrap-complete\" message, but the device may send other progress\n \
    \  reports to the server while bootstrapping.  In this example, the\n   device\
    \ is sending both its SSH host keys and a TLS server\n   certificate, which the\
    \ bootstrap server may, for example, pass to an\n   NMS, as discussed in Appendix\
    \ C.3.\n   REQUEST\n   [Note: '\\' line wrapping for formatting only]\n   POST\
    \ /restconf/operations/ietf-sztp-bootstrap-server:report-progress\\\n    HTTP/1.1\n\
    \   HOST: example.com\n   Content-Type: application/yang.data+xml\n   <input\n\
    \     xmlns=\"urn:ietf:params:xml:ns:yang:ietf-sztp-bootstrap-server\">\n    \
    \ <progress-type>bootstrap-complete</progress-type>\n     <message>example message</message>\n\
    \     <ssh-host-keys>\n       <ssh-host-key>\n         <algorithm>ssh-rsa</algorithm>\n\
    \         <key-data>base64encodedvalue==</key-data>\n       </ssh-host-key>\n\
    \       <ssh-host-key>\n         <algorithm>rsa-sha2-256</algorithm>\n       \
    \  <key-data>base64encodedvalue==</key-data>\n       </ssh-host-key>\n     </ssh-host-keys>\n\
    \     <trust-anchor-certs>\n       <trust-anchor-cert>base64encodedvalue==</trust-anchor-cert>\n\
    \     </trust-anchor-certs>\n   </input>\n   RESPONSE\n   HTTP/1.1 204 No Content\n\
    \   Date: Sat, 31 Oct 2015 17:02:40 GMT\n   Server: example-server\n"
- title: 7.3.  YANG Module
  contents:
  - "7.3.  YANG Module\n   The bootstrap server's device-facing API is normatively\
    \ defined by\n   the YANG module defined in this section.\n   This module uses\
    \ data types defined in [RFC4253], [RFC5652],\n   [RFC5280], and [RFC8366]; uses\
    \ an encoding defined in\n   [ITU.X690.2015]; and makes a reference to [RFC4250],\
    \ [RFC6187], and\n   [Std-802.1AR].\n   <CODE BEGINS> file \"ietf-sztp-bootstrap-server@2019-04-30.yang\"\
    \n   module ietf-sztp-bootstrap-server {\n     yang-version 1.1;\n     namespace\
    \ \"urn:ietf:params:xml:ns:yang:ietf-sztp-bootstrap-server\";\n     prefix sztp-svr;\n\
    \     organization\n       \"IETF NETCONF (Network Configuration) Working Group\"\
    ;\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n\
    \        WG List:  <mailto:netconf@ietf.org>\n        Author:   Kent Watsen <mailto:kent+ietf@watsen.net>\"\
    ;\n     description\n       \"This module defines an interface for bootstrap servers,\
    \ as\n        defined by RFC 8572 ('Secure Zero Touch Provisioning (SZTP)').\n\
    \        The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',\n        'SHALL\
    \ NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',\n        'NOT RECOMMENDED', 'MAY',\
    \ and 'OPTIONAL' in this document\n        are to be interpreted as described\
    \ in BCP 14 (RFC 2119)\n        (RFC 8174) when, and only when, they appear in\
    \ all\n        capitals, as shown here.\n        Copyright (c) 2019 IETF Trust\
    \ and the persons identified as\n        authors of the code.  All rights reserved.\n\
    \        Redistribution and use in source and binary forms, with or\n        without\
    \ modification, is permitted pursuant to, and subject\n        to the license\
    \ terms contained in, the Simplified BSD License\n        set forth in Section\
    \ 4.c of the IETF Trust's Legal Provisions\n        Relating to IETF Documents\n\
    \        (https://trustee.ietf.org/license-info).\n        This version of this\
    \ YANG module is part of RFC 8572; see the\n        RFC itself for full legal\
    \ notices.\";\n     revision 2019-04-30 {\n       description\n         \"Initial\
    \ version\";\n       reference\n         \"RFC 8572: Secure Zero Touch Provisioning\
    \ (SZTP)\";\n     }\n     // features\n     feature redirect-server {\n      \
    \ description\n         \"The server supports being a 'redirect server'.\";\n\
    \     }\n     feature onboarding-server {\n       description\n         \"The\
    \ server supports being an 'onboarding server'.\";\n     }\n     // typedefs\n\
    \     typedef cms {\n       type binary;\n       description\n         \"A CMS\
    \ structure, as specified in RFC 5652, encoded using\n          ASN.1 distinguished\
    \ encoding rules (DER), as specified in\n          ITU-T X.690.\";\n       reference\n\
    \         \"RFC 5652:\n            Cryptographic Message Syntax (CMS)\n      \
    \    ITU-T X.690:\n            Information technology - ASN.1 encoding rules:\n\
    \            Specification of Basic Encoding Rules (BER),\n            Canonical\
    \ Encoding Rules (CER) and Distinguished\n            Encoding Rules (DER)\";\n\
    \     }\n     // RPCs\n     rpc get-bootstrapping-data {\n       description\n\
    \         \"This RPC enables a device, as identified by the RESTCONF\n       \
    \   username, to obtain bootstrapping data that has been made\n          available\
    \ for it.\";\n       input {\n         leaf signed-data-preferred {\n        \
    \   type empty;\n           description\n             \"This optional input parameter\
    \ enables a device to\n              communicate to the bootstrap server that\
    \ it prefers\n              to receive signed data.  Devices SHOULD always send\n\
    \              this parameter when the bootstrap server is untrusted.\n      \
    \        Upon receiving this input parameter, the bootstrap\n              server\
    \ MUST return either signed data or unsigned\n              redirect information;\
    \ the bootstrap server MUST NOT\n              return unsigned onboarding information.\"\
    ;\n         }\n         leaf hw-model {\n           type string;\n           description\n\
    \             \"This optional input parameter enables a device to\n          \
    \    communicate to the bootstrap server its vendor-specific\n              hardware\
    \ model number.  This parameter may be needed,\n              for instance, when\
    \ a device's IDevID certificate does\n              not include the 'hardwareModelName'\
    \ value in its\n              subjectAltName field, as is allowed by 802.1AR.\"\
    ;\n           reference\n             \"IEEE 802.1AR: IEEE Standard for Local\
    \ and\n                metropolitan area networks - Secure\n                Device\
    \ Identity\";\n         }\n         leaf os-name {\n           type string;\n\
    \           description\n             \"This optional input parameter enables\
    \ a device to\n              communicate to the bootstrap server the name of its\n\
    \              operating system.  This parameter may be useful if\n          \
    \    the device, as identified by its serial number, can\n              run more\
    \ than one type of operating system (e.g.,\n              on a white-box system.\"\
    ;\n         }\n         leaf os-version {\n           type string;\n         \
    \  description\n             \"This optional input parameter enables a device\
    \ to\n              communicate to the bootstrap server the version of its\n \
    \             operating system.  This parameter may be used by a\n           \
    \   bootstrap server to return an operating-system-specific\n              response\
    \ to the device, thus negating the need for a\n              potentially expensive\
    \ boot image update.\";\n         }\n         leaf nonce {\n           type binary\
    \ {\n             length \"16..32\";\n           }\n           description\n \
    \            \"This optional input parameter enables a device to\n           \
    \   communicate to the bootstrap server a nonce value.\n              This may\
    \ be especially useful for devices lacking\n              an accurate clock, as\
    \ then the bootstrap server\n              can dynamically obtain from the manufacturer\
    \ a\n              voucher with the nonce value in it, as described\n        \
    \      in RFC 8366.\";\n           reference\n             \"RFC 8366:\n     \
    \           A Voucher Artifact for Bootstrapping Protocols\";\n         }\n  \
    \     }\n       output {\n         leaf reporting-level {\n           if-feature\
    \ \"onboarding-server\";\n           type enumeration {\n             enum minimal\
    \ {\n               description\n                 \"Send just the progress reports\
    \ required by RFC 8572.\";\n               reference\n                 \"RFC 8572:\
    \ Secure Zero Touch Provisioning (SZTP)\";\n             }\n             enum\
    \ verbose {\n               description\n                 \"Send additional progress\
    \ reports that might help\n                  troubleshooting an SZTP bootstrapping\
    \ issue.\";\n             }\n           }\n           default \"minimal\";\n \
    \          description\n             \"Specifies the reporting level for progress\
    \ reports the\n              bootstrap server would like to receive when processing\n\
    \              onboarding information.  Progress reports are not sent\n      \
    \        when processing redirect information or when the\n              bootstrap\
    \ server is untrusted (e.g., device sent the\n              '<signed-data-preferred>'\
    \ input parameter).\";\n         }\n         leaf conveyed-information {\n   \
    \        type cms;\n           mandatory true;\n           description\n     \
    \        \"An SZTP conveyed information artifact, as described in\n          \
    \    Section 3.1 of RFC 8572.\";\n           reference\n             \"RFC 8572:\
    \ Secure Zero Touch Provisioning (SZTP)\";\n         }\n         leaf owner-certificate\
    \ {\n           type cms;\n           must '../ownership-voucher' {\n        \
    \     description\n               \"An ownership voucher must be present whenever\
    \ an owner\n                certificate is presented.\";\n           }\n     \
    \      description\n             \"An owner certificate artifact, as described\
    \ in Section\n              3.2 of RFC 8572.  This leaf is optional because it\
    \ is\n              only needed when the conveyed information artifact is\n  \
    \            signed.\";\n           reference\n             \"RFC 8572: Secure\
    \ Zero Touch Provisioning (SZTP)\";\n         }\n         leaf ownership-voucher\
    \ {\n           type cms;\n           must '../owner-certificate' {\n        \
    \     description\n               \"An owner certificate must be present whenever\
    \ an\n                ownership voucher is presented.\";\n           }\n     \
    \      description\n             \"An ownership voucher artifact, as described\
    \ by Section\n              3.3 of RFC 8572.  This leaf is optional because it\
    \ is\n              only needed when the conveyed information artifact is\n  \
    \            signed.\";\n           reference\n             \"RFC 8572: Secure\
    \ Zero Touch Provisioning (SZTP)\";\n         }\n       }\n     }\n     rpc report-progress\
    \ {\n       if-feature \"onboarding-server\";\n       description\n         \"\
    This RPC enables a device, as identified by the RESTCONF\n          username,\
    \ to report its bootstrapping progress to the\n          bootstrap server.  This\
    \ RPC is expected to be used when\n          the device obtains onboarding-information\
    \ from a trusted\n          bootstrap server.\";\n       input {\n         leaf\
    \ progress-type {\n           type enumeration {\n             enum bootstrap-initiated\
    \ {\n               description\n                 \"Indicates that the device\
    \ just used the\n                  'get-bootstrapping-data' RPC.  The 'message'\
    \ node\n                  below MAY contain any additional information that\n\
    \                  the manufacturer thinks might be useful.\";\n             }\n\
    \             enum parsing-initiated {\n               description\n         \
    \        \"Indicates that the device is about to start parsing\n             \
    \     the onboarding information.  This progress type is\n                  only\
    \ for when parsing is implemented as a distinct\n                  step.\";\n\
    \             }\n             enum parsing-warning {\n               description\n\
    \                 \"Indicates that the device had a non-fatal error when\n   \
    \               parsing the response from the bootstrap server.  The\n       \
    \           'message' node below SHOULD indicate the specific\n              \
    \    warning that occurred.\";\n             }\n             enum parsing-error\
    \ {\n               description\n                 \"Indicates that the device\
    \ encountered a fatal error\n                  when parsing the response from\
    \ the bootstrap server.\n                  For instance, this could be due to\
    \ malformed encoding,\n                  the device expecting signed data when\
    \ only unsigned\n                  data is provided, the ownership voucher not\
    \ listing\n                  the device's serial number, or because the signature\n\
    \                  didn't match.  The 'message' node below SHOULD\n          \
    \        indicate the specific error.  This progress type\n                  also\
    \ indicates that the device has abandoned trying\n                  to bootstrap\
    \ off this bootstrap server.\";\n             }\n             enum parsing-complete\
    \ {\n               description\n                 \"Indicates that the device\
    \ successfully completed\n                  parsing the onboarding information.\
    \  This progress\n                  type is only for when parsing is implemented\
    \ as a\n                  distinct step.\";\n             }\n             enum\
    \ boot-image-initiated {\n               description\n                 \"Indicates\
    \ that the device is about to start\n                  processing the boot image\
    \ information.\";\n             }\n             enum boot-image-warning {\n  \
    \             description\n                 \"Indicates that the device encountered\
    \ a non-fatal\n                  error condition when trying to install a boot\
    \ image.\n                  A possible reason might include a need to reformat\
    \ a\n                  partition causing loss of data.  The 'message' node\n \
    \                 below SHOULD indicate any warning messages that were\n     \
    \             generated.\";\n             }\n             enum boot-image-error\
    \ {\n               description\n                 \"Indicates that the device\
    \ encountered an error when\n                  trying to install a boot image,\
    \ which could be for\n                  reasons such as a file server being unreachable,\n\
    \                  file not found, signature mismatch, etc.  The\n           \
    \       'message' node SHOULD indicate the specific error\n                  that\
    \ occurred.  This progress type also indicates\n                  that the device\
    \ has abandoned trying to bootstrap\n                  off this bootstrap server.\"\
    ;\n             }\n             enum boot-image-mismatch {\n               description\n\
    \                 \"Indicates that the device has determined that\n          \
    \        it is not running the correct boot image.  This\n                  message\
    \ SHOULD precipitate trying to download\n                  a boot image.\";\n\
    \             }\n             enum boot-image-installed-rebooting {\n        \
    \       description\n                 \"Indicates that the device successfully\
    \ installed\n                  a new boot image and is about to reboot.  After\n\
    \                  sending this progress type, the device is not\n           \
    \       expected to access the bootstrap server again\n                  for this\
    \ bootstrapping attempt.\";\n             }\n             enum boot-image-complete\
    \ {\n               description\n                 \"Indicates that the device\
    \ believes that it is\n                  running the correct boot image.\";\n\
    \             }\n             enum pre-script-initiated {\n               description\n\
    \                 \"Indicates that the device is about to execute the\n      \
    \            'pre-configuration-script'.\";\n             }\n             enum\
    \ pre-script-warning {\n               description\n                 \"Indicates\
    \ that the device obtained a warning from the\n                  'pre-configuration-script'\
    \ when it was executed.  The\n                  'message' node below SHOULD capture\
    \ any output the\n                  script produces.\";\n             }\n    \
    \         enum pre-script-error {\n               description\n              \
    \   \"Indicates that the device obtained an error from the\n                 \
    \ 'pre-configuration-script' when it was executed.  The\n                  'message'\
    \ node below SHOULD capture any output the\n                  script produces.\
    \  This progress type also indicates\n                  that the device has abandoned\
    \ trying to bootstrap\n                  off this bootstrap server.\";\n     \
    \        }\n             enum pre-script-complete {\n               description\n\
    \                 \"Indicates that the device successfully executed the\n    \
    \              'pre-configuration-script'.\";\n             }\n             enum\
    \ config-initiated {\n               description\n                 \"Indicates\
    \ that the device is about to commit the\n                  initial configuration.\"\
    ;\n             }\n             enum config-warning {\n               description\n\
    \                 \"Indicates that the device obtained warning messages\n    \
    \              when it committed the initial configuration.  The\n           \
    \       'message' node below SHOULD indicate any warning\n                  messages\
    \ that were generated.\";\n             }\n             enum config-error {\n\
    \               description\n                 \"Indicates that the device obtained\
    \ error messages\n                  when it committed the initial configuration.\
    \  The\n                  'message' node below SHOULD indicate the error\n   \
    \               messages that were generated.  This progress type\n          \
    \        also indicates that the device has abandoned trying\n               \
    \   to bootstrap off this bootstrap server.\";\n             }\n             enum\
    \ config-complete {\n               description\n                 \"Indicates\
    \ that the device successfully committed\n                  the initial configuration.\"\
    ;\n             }\n             enum post-script-initiated {\n               description\n\
    \                 \"Indicates that the device is about to execute the\n      \
    \            'post-configuration-script'.\";\n             }\n             enum\
    \ post-script-warning {\n               description\n                 \"Indicates\
    \ that the device obtained a warning from the\n                  'post-configuration-script'\
    \ when it was executed.  The\n                  'message' node below SHOULD capture\
    \ any output the\n                  script produces.\";\n             }\n    \
    \         enum post-script-error {\n               description\n             \
    \    \"Indicates that the device obtained an error from the\n                \
    \  'post-configuration-script' when it was executed.  The\n                  'message'\
    \ node below SHOULD capture any output the\n                  script produces.\
    \  This progress type also indicates\n                  that the device has abandoned\
    \ trying to bootstrap\n                  off this bootstrap server.\";\n     \
    \        }\n             enum post-script-complete {\n               description\n\
    \                 \"Indicates that the device successfully executed the\n    \
    \              'post-configuration-script'.\";\n             }\n             enum\
    \ bootstrap-warning {\n               description\n                 \"Indicates\
    \ that a warning condition occurred for which\n                  no other 'progress-type'\
    \ enumeration is deemed\n                  suitable.  The 'message' node below\
    \ SHOULD describe\n                  the warning.\";\n             }\n       \
    \      enum bootstrap-error {\n               description\n                 \"\
    Indicates that an error condition occurred for which\n                  no other\
    \ 'progress-type' enumeration is deemed\n                  suitable.  The 'message'\
    \ node below SHOULD describe\n                  the error.  This progress type\
    \ also indicates that\n                  the device has abandoned trying to bootstrap\
    \ off\n                  this bootstrap server.\";\n             }\n         \
    \    enum bootstrap-complete {\n               description\n                 \"\
    Indicates that the device successfully processed\n                  all 'onboarding-information'\
    \ provided and that it\n                  is ready to be managed.  The 'message'\
    \ node below\n                  MAY contain any additional information that the\n\
    \                  manufacturer thinks might be useful.  After sending\n     \
    \             this progress type, the device is not expected to\n            \
    \      access the bootstrap server again.\";\n             }\n             enum\
    \ informational {\n               description\n                 \"Indicates any\
    \ additional information not captured\n                  by any of the other progress\
    \ types.  For instance,\n                  a message indicating that the device\
    \ is about to\n                  reboot after having installed a boot image could\n\
    \                  be provided.  The 'message' node below SHOULD\n           \
    \       contain information that the manufacturer thinks\n                  might\
    \ be useful.\";\n             }\n           }\n           mandatory true;\n  \
    \         description\n             \"The type of progress report provided.\"\
    ;\n         }\n         leaf message {\n           type string;\n           description\n\
    \             \"An optional arbitrary value.\";\n         }\n         container\
    \ ssh-host-keys {\n           when \"../progress-type = 'bootstrap-complete'\"\
    \ {\n             description\n               \"SSH host keys are only sent when\
    \ the progress type\n                is 'bootstrap-complete'.\";\n           }\n\
    \           description\n             \"A list of SSH host keys an NMS may use\
    \ to authenticate\n              subsequent SSH-based connections to this device\
    \ (e.g.,\n              netconf-ssh, netconf-ch-ssh).\";\n           list ssh-host-key\
    \ {\n             description\n               \"An SSH host key an NMS may use\
    \ to authenticate\n                subsequent SSH-based connections to this device\n\
    \                (e.g., netconf-ssh and netconf-ch-ssh).\";\n             reference\n\
    \               \"RFC 4253: The Secure Shell (SSH) Transport Layer\n         \
    \                 Protocol\";\n             leaf algorithm {\n               type\
    \ string;\n               mandatory true;\n               description\n      \
    \           \"The public key algorithm name for this SSH key.\n              \
    \    Valid values are listed in the 'Public Key Algorithm\n                  Names'\
    \ subregistry of the 'Secure Shell (SSH) Protocol\n                  Parameters'\
    \ registry maintained by IANA.\";\n               reference\n                \
    \ \"RFC 4250: The Secure Shell (SSH) Protocol Assigned\n                     \
    \       Numbers\n                  IANA URL: <https://www.iana.org/assignments/ssh-para\\\
    \\\n                            meters>\n                            ('\\\\' added\
    \ for formatting reasons)\";\n             }\n             leaf key-data {\n \
    \              type binary;\n               mandatory true;\n               description\n\
    \                 \"The binary public key data for this SSH key, as\n        \
    \          specified by RFC 4253, Section 6.6; that is:\n                    string\
    \    certificate or public key format\n                              identifier\n\
    \                    byte[n]   key/certificate data.\";\n               reference\n\
    \                 \"RFC 4253: The Secure Shell (SSH) Transport Layer\n       \
    \                     Protocol\";\n             }\n           }\n         }\n\
    \         container trust-anchor-certs {\n           when \"../progress-type =\
    \ 'bootstrap-complete'\" {\n             description\n               \"Trust anchors\
    \ are only sent when the progress type\n                is 'bootstrap-complete'.\"\
    ;\n           }\n           description\n             \"A list of trust anchor\
    \ certificates an NMS may use to\n              authenticate subsequent certificate-based\
    \ connections\n              to this device (e.g., restconf-tls, netconf-tls,\
    \ or\n              even netconf-ssh with X.509 support from RFC 6187).\n    \
    \          In practice, trust anchors for IDevID certificates do\n           \
    \   not need to be conveyed using this mechanism.\";\n           reference\n \
    \            \"RFC 6187: X.509v3 Certificates for Secure Shell\n             \
    \           Authentication\";\n           leaf-list trust-anchor-cert {\n    \
    \         type cms;\n             description\n               \"A CMS structure\
    \ whose topmost content type MUST be the\n                signed-data content\
    \ type, as described by Section 5 of\n                RFC 5652.\n            \
    \    The CMS MUST contain the chain of X.509 certificates\n                needed\
    \ to authenticate the certificate presented by\n                the device.\n\
    \                The CMS MUST contain only a single chain of\n               \
    \ certificates.  The last certificate in the chain\n                MUST be the\
    \ issuer for the device's end-entity\n                certificate.\n         \
    \       In all cases, the chain MUST include a self-signed\n                root\
    \ certificate.  In the case where the root\n                certificate is itself\
    \ the issuer of the device's\n                end-entity certificate, only one\
    \ certificate is\n                present.\n                This CMS encodes the\
    \ degenerate form of the SignedData\n                structure that is commonly\
    \ used to disseminate X.509\n                certificates and revocation objects\
    \ (RFC 5280).\";\n             reference\n               \"RFC 5280: Internet\
    \ X.509 Public Key Infrastructure\n                          Certificate and Certificate\
    \ Revocation List\n                          (CRL) Profile\n                RFC\
    \ 5652: Cryptographic Message Syntax (CMS)\";\n           }\n         }\n    \
    \   }\n     }\n   }\n   <CODE ENDS>\n"
- title: 8.  DHCP Options
  contents:
  - "8.  DHCP Options\n   This section defines two DHCP options: one for DHCPv4 and\
    \ one for\n   DHCPv6.  These two options are semantically the same, though\n \
    \  syntactically different.\n"
- title: 8.1.  DHCPv4 SZTP Redirect Option
  contents:
  - "8.1.  DHCPv4 SZTP Redirect Option\n   The DHCPv4 SZTP Redirect Option is used\
    \ to provision the client with\n   one or more URIs for bootstrap servers that\
    \ can be contacted to\n   attempt further configuration.\n             0     \
    \                        1\n             0  1  2  3  4  5  6  7  8  9  0  1  2\
    \  3  4  5\n            +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  \
    \          |   option-code (143)   |     option-length     |\n            +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \            .                                               .\n            .\
    \    bootstrap-server-list (variable length)    .\n            .             \
    \                                  .\n            +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \            * option-code: OPTION_V4_SZTP_REDIRECT (143)\n            * option-length:\
    \ The option length in octets.\n            * bootstrap-server-list: A list of\
    \ servers for the\n               client to attempt contacting, in order to obtain\n\
    \               further bootstrapping data, in the format shown\n            \
    \   in Section 8.3.\n                      DHCPv4 SZTP Redirect Option\n   DHCPv4\
    \ Client Behavior\n   Clients MAY request the OPTION_V4_SZTP_REDIRECT option by\
    \ including\n   its option code in the Parameter Request List (55) in DHCP request\n\
    \   messages.\n   On receipt of a DHCPv4 Reply message that contains the\n   OPTION_V4_SZTP_REDIRECT\
    \ option, the client processes the response\n   according to Section 5.5, with\
    \ the understanding that the \"address\"\n   and \"port\" values are encoded in\
    \ the URIs.\n   Any invalid URI entries received in the uri-data field are ignored\
    \ by\n   the client.  If the received OPTION_V4_SZTP_REDIRECT option does not\n\
    \   contain at least one valid URI entry in the uri-data field, then the\n   client\
    \ MUST discard the option.\n   As the list of URIs may exceed the maximum allowed\
    \ length of a single\n   DHCPv4 option (255 octets), the client MUST implement\
    \ the decoding\n   agent behavior described in [RFC3396], to correctly process\
    \ a URI\n   list split across a number of received OPTION_V4_SZTP_REDIRECT option\n\
    \   instances.\n   DHCPv4 Server Behavior\n   The DHCPv4 server MAY include a\
    \ single instance of the\n   OPTION_V4_SZTP_REDIRECT option in DHCP messages it\
    \ sends.  Servers\n   MUST NOT send more than one instance of the OPTION_V4_SZTP_REDIRECT\n\
    \   option.\n   The server's DHCP message MUST contain only a single instance\
    \ of the\n   OPTION_V4_SZTP_REDIRECT's 'bootstrap-server-list' field.  However,\n\
    \   the list of URIs in this field may exceed the maximum allowed length\n   of\
    \ a single DHCPv4 option (per [RFC3396]).\n   If the length of 'bootstrap-server-list'\
    \ is small enough to fit into\n   a single instance of OPTION_V4_SZTP_REDIRECT,\
    \ the server MUST NOT\n   send more than one instance of this option.\n   If the\
    \ length of the 'bootstrap-server-list' field is too large to\n   fit into a single\
    \ option, then OPTION_V4_SZTP_REDIRECT MUST be split\n   into multiple instances\
    \ of the option according to the process\n   described in [RFC3396].\n"
- title: 8.2.  DHCPv6 SZTP Redirect Option
  contents:
  - "8.2.  DHCPv6 SZTP Redirect Option\n   The DHCPv6 SZTP Redirect Option is used\
    \ to provision the client with\n   one or more URIs for bootstrap servers that\
    \ can be contacted to\n   attempt further configuration.\n      0            \
    \       1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |       option-code (136)       |          option-length        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     .  \
    \         bootstrap-server-list (variable length)             .\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     * option-code: OPTION_V6_SZTP_REDIRECT (136)\n     * option-length: The\
    \ option length in octets.\n     * bootstrap-server-list: A list of servers for\
    \ the client to\n       attempt contacting, in order to obtain further bootstrapping\n\
    \       data, in the format shown in Section 8.3.\n                      DHCPv6\
    \ SZTP Redirect Option\n   DHCPv6 Client Behavior\n   Clients MAY request OPTION_V6_SZTP_REDIRECT\
    \ using the process defined\n   in [RFC8415], Sections 18.2.1, 18.2.2, 18.2.4,\
    \ 18.2.5, 18.2.6, and\n   21.7.  As a convenience to the reader, we mention here\
    \ that the\n   client includes requested option codes in the Option Request option.\n\
    \   On receipt of a DHCPv6 Reply message that contains the\n   OPTION_V6_SZTP_REDIRECT\
    \ option, the client processes the response\n   according to Section 5.5, with\
    \ the understanding that the \"address\"\n   and \"port\" values are encoded in\
    \ the URIs.\n   Any invalid URI entries received in the uri-data field are ignored\
    \ by\n   the client.  If the received OPTION_V6_SZTP_REDIRECT option does not\n\
    \   contain at least one valid URI entry in the uri-data field, then the\n   client\
    \ MUST discard the option.\n   DHCPv6 Server Behavior\n   Section 18.3 of [RFC8415]\
    \ governs server operation in regard to\n   option assignment.  As a convenience\
    \ to the reader, we mention here\n   that the server will send a particular option\
    \ code only if configured\n   with specific values for that option code and if\
    \ the client requested\n   it.\n   The OPTION_V6_SZTP_REDIRECT option is a singleton.\
    \  Servers MUST NOT\n   send more than one instance of this option.\n"
- title: 8.3.  Common Field Encoding
  contents:
  - "8.3.  Common Field Encoding\n   Both of the DHCPv4 and DHCPv6 options defined\
    \ in this section encode\n   a list of bootstrap server URIs.  The \"URI\" structure\
    \ is a DHCP\n   option that can contain multiple URIs (see [RFC7227], Section\
    \ 5.7).\n   Each URI entry in the bootstrap-server-list is structured as follows:\n\
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+\n    |\
    \       uri-length              |          URI                  |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+\n\
    \    * uri-length: 2 octets long; specifies the length of the URI data.\n    *\
    \ URI: URI of the SZTP bootstrap server.\n   The URI of the SZTP bootstrap server\
    \ MUST use the \"https\" URI scheme\n   defined in Section 2.7.2 of [RFC7230],\
    \ and it MUST be in form\n   \"https://<ip-address-or-hostname>[:<port>]\".\n"
- title: 9.  Security Considerations
  contents:
  - '9.  Security Considerations

    '
- title: 9.1.  Clock Sensitivity
  contents:
  - "9.1.  Clock Sensitivity\n   The solution in this document relies on TLS certificates,\
    \ owner\n   certificates, and ownership vouchers, all of which require an\n  \
    \ accurate clock in order to be processed correctly (e.g., to test\n   validity\
    \ dates and revocation status).  Implementations SHOULD ensure\n   devices have\
    \ an accurate clock when shipped from manufacturing\n   facilities and take steps\
    \ to prevent clock tampering.\n   If it is not possible to ensure clock accuracy,\
    \ it is RECOMMENDED\n   that implementations disable the aspects of the solution\
    \ having clock\n   sensitivity.  In particular, such implementations should assume\
    \ that\n   TLS certificates, ownership vouchers, and owner certificates never\n\
    \   expire and are not revocable.  From an ownership voucher perspective,\n  \
    \ manufacturers SHOULD issue a single ownership voucher for the\n   lifetime of\
    \ such devices.\n   Implementations SHOULD NOT rely on NTP for time, as NTP is\
    \ not a\n   secure protocol at this time.  Note that there is an IETF document\n\
    \   that focuses on securing NTP [NTS-NTP].\n"
- title: 9.2.  Use of IDevID Certificates
  contents:
  - "9.2.  Use of IDevID Certificates\n   IDevID certificates, as defined in [Std-802.1AR],\
    \ are RECOMMENDED,\n   both for the TLS-level client certificate used by devices\
    \ when\n   connecting to a bootstrap server, as well as for the device identity\n\
    \   certificate used by owners when encrypting the SZTP bootstrapping\n   data\
    \ artifacts.\n"
- title: 9.3.  Immutable Storage for Trust Anchors
  contents:
  - "9.3.  Immutable Storage for Trust Anchors\n   Devices MUST ensure that all their\
    \ trust anchor certificates,\n   including those for connecting to bootstrap servers\
    \ and verifying\n   ownership vouchers, are protected from external modification.\n\
    \   It may be necessary to update these certificates over time (e.g., the\n  \
    \ manufacturer wants to delegate trust to a new CA).  It is therefore\n   expected\
    \ that devices MAY update these trust anchors when needed\n   through a verifiable\
    \ process, such as a software upgrade using signed\n   software images.\n"
- title: 9.4.  Secure Storage for Long-Lived Private Keys
  contents:
  - "9.4.  Secure Storage for Long-Lived Private Keys\n   Manufacturer-generated device\
    \ identifiers may have very long\n   lifetimes.  For instance, [Std-802.1AR] recommends\
    \ using the\n   \"notAfter\" value 99991231235959Z in IDevID certificates.  Given\
    \ the\n   long-lived nature of these private keys, it is paramount that they\n\
    \   are stored so as to resist discovery, such as in a secure\n   cryptographic\
    \ processor (e.g., a trusted platform module (TPM) chip).\n"
- title: 9.5.  Blindly Authenticating a Bootstrap Server
  contents:
  - "9.5.  Blindly Authenticating a Bootstrap Server\n   This document allows a device\
    \ to blindly authenticate a bootstrap\n   server's TLS certificate.  It does so\
    \ to allow for cases where the\n   redirect information may be obtained in an\
    \ unsecured manner, which is\n   desirable to support in some cases.\n   To compensate\
    \ for this, this document requires that devices, when\n   connected to an untrusted\
    \ bootstrap server, assert that data\n   downloaded from the server is signed.\n"
- title: 9.6.  Disclosing Information to Untrusted Servers
  contents:
  - "9.6.  Disclosing Information to Untrusted Servers\n   This document allows devices\
    \ to establish connections to untrusted\n   bootstrap servers.  However, since\
    \ the bootstrap server is untrusted,\n   it may be under the control of an adversary;\
    \ therefore, devices\n   SHOULD be cautious about the data they send to the bootstrap\
    \ server\n   in such cases.\n   Devices send different data to bootstrap servers\
    \ at each of the\n   protocol layers: TCP, TLS, HTTP, and RESTCONF.\n   At the\
    \ TCP protocol layer, devices may relay their IP address,\n   subject to network\
    \ translations.  Disclosure of this information is\n   not considered a security\
    \ risk.\n   At the TLS protocol layer, devices may use a client certificate to\n\
    \   identify and authenticate themselves to untrusted bootstrap servers.\n   At\
    \ a minimum, the client certificate must disclose the device's\n   serial number\
    \ and may disclose additional information such as the\n   device's manufacturer,\
    \ hardware model, public key, etc.  Knowledge of\n   this information may provide\
    \ an adversary with details needed to\n   launch an attack.  It is RECOMMENDED\
    \ that secrecy of the network\n   constituency not be relied on for security.\n\
    \   At the HTTP protocol layer, devices may use an HTTP authentication\n   scheme\
    \ to identify and authenticate themselves to untrusted bootstrap\n   servers.\
    \  At a minimum, the authentication scheme must disclose the\n   device's serial\
    \ number and, concerningly, may, depending on the\n   authentication mechanism\
    \ used, reveal a secret that is only supposed\n   to be known to the device (e.g.,\
    \ a password).  Devices SHOULD NOT use\n   an HTTP authentication scheme (e.g.,\
    \ HTTP Basic) with an untrusted\n   bootstrap server that reveals a secret that\
    \ is only supposed to be\n   known to the device.\n   At the RESTCONF protocol\
    \ layer, devices use the \"get-bootstrapping-\n   data\" RPC, but not the \"report-progress\"\
    \ RPC, when connected to an\n   untrusted bootstrap server.  The \"get-bootstrapping-data\"\
    \ RPC allows\n   additional input parameters to be passed to the bootstrap server\n\
    \   (e.g., \"os-name\", \"os-version\", and \"hw-model\").  It is RECOMMENDED\n\
    \   that devices only pass the \"signed-data-preferred\" input parameter to\n\
    \   an untrusted bootstrap server.  While it is okay for a bootstrap\n   server\
    \ to immediately return signed onboarding information, it is\n   RECOMMENDED that\
    \ bootstrap servers instead promote the untrusted\n   connection to a trusted\
    \ connection, as described in Appendix B, thus\n   enabling the device to use\
    \ the \"report-progress\" RPC while processing\n   the onboarding information.\n"
- title: 9.7.  Sequencing Sources of Bootstrapping Data
  contents:
  - "9.7.  Sequencing Sources of Bootstrapping Data\n   For devices supporting more\
    \ than one source for bootstrapping data,\n   no particular sequencing order has\
    \ to be observed for security\n   reasons, as the solution for each source is\
    \ considered equally\n   secure.  However, from a privacy perspective, it is RECOMMENDED\
    \ that\n   devices access local sources before accessing remote sources.\n"
- title: 9.8.  Safety of Private Keys Used for Trust
  contents:
  - "9.8.  Safety of Private Keys Used for Trust\n   The solution presented in this\
    \ document enables bootstrapping data to\n   be trusted in two ways: through either\
    \ transport-level security or\n   the signing of artifacts.\n   When transport-level\
    \ security (i.e., a trusted bootstrap server) is\n   used, the private key for\
    \ the end-entity certificate must be online\n   in order to establish the TLS\
    \ connection.\n   When artifacts are signed, the signing key is required to be\
    \ online\n   only when the bootstrap server is returning a dynamically generated\n\
    \   signed-data response.  For instance, a bootstrap server, upon\n   receiving\
    \ the \"signed-data-preferred\" input parameter to the\n   \"get-bootstrapping-data\"\
    \ RPC, may dynamically generate a response\n   that is signed.\n   Bootstrap server\
    \ administrators are RECOMMENDED to follow best\n   practices to protect the private\
    \ key used for any online operation.\n   For instance, use of a hardware security\
    \ module (HSM) is RECOMMENDED.\n   If an HSM is not used, frequent private key\
    \ refreshes are\n   RECOMMENDED, assuming all bootstrapping devices have an accurate\n\
    \   clock (see Section 9.1).\n   For best security, it is RECOMMENDED that owners\
    \ only provide\n   bootstrapping data that has been signed (using a protected\
    \ private\n   key) and encrypted (using the device's public key from its secure\n\
    \   device identity certificate).\n"
- title: 9.9.  Increased Reliance on Manufacturers
  contents:
  - "9.9.  Increased Reliance on Manufacturers\n   The SZTP bootstrapping protocol\
    \ presented in this document shifts\n   some control of initial configuration\
    \ away from the rightful owner of\n   the device and towards the manufacturer\
    \ and its delegates.\n   The manufacturer maintains the list of well-known bootstrap\
    \ servers\n   its devices will trust.  By design, if no bootstrapping data is\
    \ found\n   via other methods first, the device will try to reach out to the\n\
    \   well-known bootstrap servers.  There is no mechanism to prevent this\n   from\
    \ occurring other than by using an external firewall to block such\n   connections.\
    \  Concerns related to trusted bootstrap servers are\n   discussed in Section\
    \ 9.10.\n   Similarly, the manufacturer maintains the list of voucher-signing\n\
    \   authorities its devices will trust.  The voucher-signing authorities\n   issue\
    \ the vouchers that enable a device to trust an owner's domain\n   certificate.\
    \  It is vital that manufacturers ensure the integrity of\n   these voucher-signing\
    \ authorities, so as to avoid incorrect\n   assignments.\n   Operators should\
    \ be aware that this system assumes that they trust\n   all the pre-configured\
    \ bootstrap servers and voucher-signing\n   authorities designated by the manufacturers.\
    \  While operators may use\n   points in the network to block access to the well-known\
    \ bootstrap\n   servers, operators cannot prevent voucher-signing authorities\
    \ from\n   generating vouchers for their devices.\n"
- title: 9.10.  Concerns with Trusted Bootstrap Servers
  contents:
  - "9.10.  Concerns with Trusted Bootstrap Servers\n   Trusted bootstrap servers,\
    \ whether well-known or discovered, have the\n   potential to cause problems,\
    \ such as the following.\n   o  A trusted bootstrap server that has been compromised\
    \ may be\n      modified to return unsigned data of any sort.  For instance, a\n\
    \      bootstrap server that is only supposed to return redirect\n      information\
    \ might be modified to return onboarding information.\n      Similarly, a bootstrap\
    \ server that is only supposed to return\n      signed data may be modified to\
    \ return unsigned data.  In both\n      cases, the device will accept the response,\
    \ unaware that it wasn't\n      supposed to be any different.  It is RECOMMENDED\
    \ that maintainers\n      of trusted bootstrap servers ensure that their systems\
    \ are not\n      easily compromised and, in case of compromise, have mechanisms\
    \ in\n      place to detect and remediate the compromise as expediently as\n \
    \     possible.\n   o  A trusted bootstrap server hosting data that is either\
    \ unsigned or\n      signed but not encrypted may disclose information to unwanted\n\
    \      parties (e.g., an administrator of the bootstrap server).  This is\n  \
    \    a privacy issue only, but it could reveal information that might\n      be\
    \ used in a subsequent attack.  Disclosure of redirect\n      information has\
    \ limited exposure (it is just a list of bootstrap\n      servers), whereas disclosure\
    \ of onboarding information could be\n      highly revealing (e.g., network topology,\
    \ firewall policies,\n      etc.).  It is RECOMMENDED that operators encrypt the\
    \ bootstrapping\n      data when its contents are considered sensitive, even to\
    \ the point\n      of hiding it from the administrators of the bootstrap server,\n\
    \      which may be maintained by a third party.\n"
- title: 9.11.  Validity Period for Conveyed Information
  contents:
  - "9.11.  Validity Period for Conveyed Information\n   The conveyed information\
    \ artifact does not specify a validity period.\n   For instance, neither redirect\
    \ information nor onboarding information\n   enable \"not-before\" or \"not-after\"\
    \ values to be specified, and\n   neither artifact alone can be revoked.\n   For\
    \ unsigned data provided by an untrusted source of bootstrapping\n   data, it\
    \ is not meaningful to discuss its validity period when the\n   information itself\
    \ has no authenticity and may have come from\n   anywhere.\n   For unsigned data\
    \ provided by a trusted source of bootstrapping data\n   (i.e., a bootstrap server),\
    \ the availability of the data is the only\n   measure of it being current.  Since\
    \ the untrusted data comes from a\n   trusted source, its current availability\
    \ is meaningful, and since\n   bootstrap servers use TLS, the contents of the\
    \ exchange cannot be\n   modified or replayed.\n   For signed data, whether provided\
    \ by an untrusted or trusted source\n   of bootstrapping data, the validity is\
    \ constrained by the validity of\n   both the ownership voucher and owner certificate\
    \ used to authenticate\n   it.\n   The ownership voucher's validity is primarily\
    \ constrained by the\n   ownership voucher's \"created-on\" and \"expires-on\"\
    \ nodes.  While\n   [RFC8366] recommends short-lived vouchers (see Section 6.1),\
    \ the\n   \"expires-on\" node may be set to any point in the future or omitted\n\
    \   altogether to indicate that the voucher never expires.  The ownership\n  \
    \ voucher's validity is secondarily constrained by the manufacturer's\n   PKI\
    \ used to sign the voucher; whilst an ownership voucher cannot be\n   revoked\
    \ directly, the PKI used to sign it may be.\n   The owner certificate's validity\
    \ is primarily constrained by the\n   X.509's validity field, the \"notBefore\"\
    \ and \"notAfter\" values, as\n   specified by the certificate authority that\
    \ signed it.  The owner\n   certificate's validity is secondarily constrained\
    \ by the validity of\n   the PKI used to sign the voucher.  Owner certificates\
    \ may be revoked\n   directly.\n   For owners that wish to have maximum flexibility\
    \ in their ability to\n   specify and constrain the validity of signed data, it\
    \ is RECOMMENDED\n   that a unique owner certificate be created for each signed\
    \ artifact.\n   Not only does this enable a validity period to be specified, for\
    \ each\n   artifact, but it also enables the validity of each artifact to be\n\
    \   revoked.\n"
- title: 9.12.  Cascading Trust via Redirects
  contents:
  - "9.12.  Cascading Trust via Redirects\n   Redirect information (Section 2.1),\
    \ by design, instructs a\n   bootstrapping device to initiate an HTTPS connection\
    \ to the specified\n   bootstrap servers.\n   When the redirect information is\
    \ trusted, the redirect information\n   can encode a trust anchor certificate\
    \ used by the device to\n   authenticate the TLS end-entity certificate presented\
    \ by each\n   bootstrap server.\n   As a result, any compromise in an interaction\
    \ providing redirect\n   information may result in compromise of all subsequent\
    \ interactions.\n"
- title: 9.13.  Possible Reuse of Private Keys
  contents:
  - "9.13.  Possible Reuse of Private Keys\n   This document describes two uses for\
    \ secure device identity\n   certificates.\n   The primary use is for when the\
    \ device authenticates itself to a\n   bootstrap server, using its private key\
    \ for TLS-level client-\n   certificate-based authentication.\n   A secondary\
    \ use is for when the device needs to decrypt provided\n   bootstrapping artifacts,\
    \ using its private key to decrypt the data\n   or, more precisely, per Section\
    \ 6 of [RFC5652], decrypt a symmetric\n   key used to decrypt the data.\n   Section\
    \ 3.4 of this document allows for the possibility that the same\n   secure device\
    \ identity certificate is utilized for both uses, as\n   [Std-802.1AR] states\
    \ that a DevID certificate MAY have the\n   \"keyEncipherment\" KeyUsage bit,\
    \ in addition to the \"digitalSignature\"\n   KeyUsage bit, set.\n   While it\
    \ is understood that it is generally frowned upon to reuse\n   private keys, this\
    \ document views such reuse acceptable as there are\n   not any known ways to\
    \ cause a signature made in one context to be\n   (mis)interpreted as valid in\
    \ the other context.\n"
- title: 9.14.  Non-issue with Encrypting Signed Artifacts
  contents:
  - "9.14.  Non-issue with Encrypting Signed Artifacts\n   This document specifies\
    \ the encryption of signed objects, as opposed\n   to the signing of encrypted\
    \ objects, as might be expected given well-\n   publicized oracle attacks (e.g.,\
    \ the padding oracle attack).\n   This document does not view such attacks as\
    \ feasible in the context\n   of the solution because the decrypted text never\
    \ leaves the device.\n"
- title: 9.15.  The "ietf-sztp-conveyed-info" YANG Module
  contents:
  - "9.15.  The \"ietf-sztp-conveyed-info\" YANG Module\n   The \"ietf-sztp-conveyed-info\"\
    \ module defined in this document defines\n   a data structure that is always\
    \ wrapped by a CMS structure.  When\n   accessed by a secure mechanism (e.g.,\
    \ protected by TLS), then the CMS\n   structure may be unsigned.  However, when\
    \ accessed by an insecure\n   mechanism (e.g., a removable storage device), the\
    \ CMS structure must\n   be signed, in order for the device to trust it.\n   Implementations\
    \ should be aware that signed bootstrapping data only\n   protects the data from\
    \ modification and that the content is still\n   visible to others.  This doesn't\
    \ affect security so much as privacy.\n   That the contents may be read by unintended\
    \ parties when accessed by\n   insecure mechanisms is considered next.\n   The\
    \ \"ietf-sztp-conveyed-info\" module defines a top-level \"choice\"\n   statement\
    \ that declares the content is either redirect-information or\n   onboarding-information.\
    \  Each of these two cases are now considered.\n   When the content of the CMS\
    \ structure is redirect-information, an\n   observer can learn about the bootstrap\
    \ servers the device is being\n   directed to, their IP addresses or hostnames,\
    \ ports, and trust anchor\n   certificates.  Knowledge of this information could\
    \ provide an\n   observer some insight into a network's inner structure.\n   When\
    \ the content of the CMS structure is onboarding-information, an\n   observer\
    \ could learn considerable information about how the device is\n   to be provisioned.\
    \  This information includes the operating system\n   version, initial configuration,\
    \ and script contents.  This\n   information should be considered sensitive, and\
    \ precautions should be\n   taken to protect it (e.g., encrypt the artifact using\
    \ the device's\n   public key).\n"
- title: 9.16.  The "ietf-sztp-bootstrap-server" YANG Module
  contents:
  - "9.16.  The \"ietf-sztp-bootstrap-server\" YANG Module\n   The \"ietf-sztp-bootstrap-server\"\
    \ module defined in this document\n   specifies an API for a RESTCONF [RFC8040].\
    \  The lowest RESTCONF layer\n   is HTTPS, and the mandatory-to-implement secure\
    \ transport is TLS\n   [RFC8446].\n   The NETCONF Access Control Model (NACM)\
    \ [RFC8341] provides the means\n   to restrict access for particular users to\
    \ a pre-configured subset of\n   all available protocol operations and content.\n\
    \   This module presents no data nodes (only RPCs).  There is no need to\n   discuss\
    \ the sensitivity of data nodes.\n   This module defines two RPC operations that\
    \ may be considered\n   sensitive in some network environments.  These are the\
    \ operations and\n   their sensitivity/vulnerability:\n   get-bootstrapping-data:\
    \  This RPC is used by devices to obtain their\n       bootstrapping data.  By\
    \ design, each device, as identified by its\n       authentication credentials\
    \ (e.g., client certificate), can only\n       obtain its own data.  NACM is not\
    \ needed to further constrain\n       access to this RPC.\n   report-progress:\
    \  This RPC is used by devices to report their\n       bootstrapping progress.\
    \  By design, each device, as identified by\n       its authentication credentials\
    \ (e.g., client certificate), can\n       only report data for itself.  NACM is\
    \ not needed to further\n       constrain access to this RPC.\n"
- title: 10.  IANA Considerations
  contents:
  - '10.  IANA Considerations

    '
- title: 10.1.  The IETF XML Registry
  contents:
  - "10.1.  The IETF XML Registry\n   IANA has registered two URIs in the \"ns\" subregistry\
    \ of the \"IETF XML\n   Registry\" [RFC3688] maintained at <https://www.iana.org/assignments/\n\
    \   xml-registry>.  The following registrations have been made per the\n   format\
    \ in [RFC3688]:\n      URI: urn:ietf:params:xml:ns:yang:ietf-sztp-conveyed-info\n\
    \      Registrant Contact: The NETCONF WG of the IETF.\n      XML: N/A, the requested\
    \ URI is an XML namespace.\n      URI: urn:ietf:params:xml:ns:yang:ietf-sztp-bootstrap-server\n\
    \      Registrant Contact: The NETCONF WG of the IETF.\n      XML: N/A, the requested\
    \ URI is an XML namespace.\n"
- title: 10.2.  The YANG Module Names Registry
  contents:
  - "10.2.  The YANG Module Names Registry\n   IANA has registered two YANG modules\
    \ in the \"YANG Module Names\"\n   registry [RFC6020] maintained at <https://www.iana.org/assignments/\n\
    \   yang-parameters>.  The following registrations have been made per the\n  \
    \ format in [RFC6020]:\n      name:      ietf-sztp-conveyed-info\n      namespace:\
    \ urn:ietf:params:xml:ns:yang:ietf-sztp-conveyed-info\n      prefix:    sztp-info\n\
    \      reference: RFC 8572\n      name:      ietf-sztp-bootstrap-server\n    \
    \  namespace: urn:ietf:params:xml:ns:yang:ietf-sztp-bootstrap-server\n      prefix:\
    \    sztp-svr\n      reference: RFC 8572\n"
- title: 10.3.  The SMI Security for S/MIME CMS Content Type Registry
  contents:
  - "10.3.  The SMI Security for S/MIME CMS Content Type Registry\n   IANA has registered\
    \ two subordinate object identifiers in the \"SMI\n   Security for S/MIME CMS\
    \ Content Type (1.2.840.113549.1.9.16.1)\"\n   registry maintained at <https://www.iana.org/assignments/\n\
    \   smi-numbers>.  The following registrations have been made per the\n   format\
    \ in Section 3.4 of [RFC7107]:\n      Decimal   Description                  References\n\
    \      -------   --------------------------   ----------\n      42        id-ct-sztpConveyedInfoXML\
    \    RFC 8572\n      43        id-ct-sztpConveyedInfoJSON   RFC 8572\n   id-ct-sztpConveyedInfoXML\
    \ indicates that the \"conveyed-information\"\n   is encoded using XML.  id-ct-sztpConveyedInfoJSON\
    \ indicates that the\n   \"conveyed-information\" is encoded using JSON.\n"
- title: 10.4.  The BOOTP Vendor Extensions and DHCP Options Registry
  contents:
  - "10.4.  The BOOTP Vendor Extensions and DHCP Options Registry\n   IANA has registered\
    \ one DHCP code point in the \"BOOTP Vendor\n   Extensions and DHCP Options\"\
    \ registry maintained at\n   <https://www.iana.org/assignments/bootp-dhcp-parameters>:\n\
    \      Tag:         143\n      Name:        OPTION_V4_SZTP_REDIRECT\n      Data\
    \ Length: N\n      Meaning:     This option provides a list of URIs\n        \
    \           for SZTP bootstrap servers\n      Reference:   RFC 8572\n"
- title: 10.5.  The Dynamic Host Configuration Protocol for IPv6 (DHCPv6)
  contents:
  - "10.5.  The Dynamic Host Configuration Protocol for IPv6 (DHCPv6)\n       Registry\n\
    \   IANA has registered one DHCP code point in the \"Option Codes\"\n   subregistry\
    \ of the \"Dynamic Host Configuration Protocol for IPv6\n   (DHCPv6)\" registry\
    \ maintained at <https://www.iana.org/assignments/\n   dhcpv6-parameters>:\n \
    \     Value:            136\n      Description:      OPTION_V6_SZTP_REDIRECT\n\
    \      Client ORO:       Yes\n      Singleton Option: Yes\n      Reference:  \
    \      RFC 8572\n"
- title: 10.6.  The Service Name and Transport Protocol Port Number Registry
  contents:
  - "10.6.  The Service Name and Transport Protocol Port Number Registry\n   IANA\
    \ has registered one service name in the \"Service Name and\n   Transport Protocol\
    \ Port Number Registry\" [RFC6335] maintained at\n   <https://www.iana.org/assignments/service-names-port-numbers>.\
    \  The\n   following registration has been made per the format in Section 8.1.1\n\
    \   of [RFC6335]:\n     Service Name:            sztp\n     Transport Protocol(s):\
    \   TCP\n     Assignee:                IESG <iesg@ietf.org>\n     Contact:   \
    \              IETF Chair <chair@ietf.org>\n     Description:             This\
    \ service name is used to construct the\n                              SRV service\
    \ label \"_sztp\" for discovering\n                              SZTP bootstrap\
    \ servers.\n     Reference:               RFC 8572\n     Port Number:        \
    \     N/A\n     Service Code:            N/A\n     Known Unauthorized Uses: N/A\n\
    \     Assignment Notes:        This protocol uses HTTPS as a substrate.\n"
- title: 10.7.  The Underscored and Globally Scoped DNS Node Names Registry
  contents:
  - "10.7.  The Underscored and Globally Scoped DNS Node Names Registry\n   IANA has\
    \ registered one service name in the \"Underscored and Globally\n   Scoped DNS\
    \ Node Names\" subregistry [RFC8552] of the \"Domain Name\n   System (DNS) Parameters\"\
    \ registry maintained at\n   <https://www.iana.org/assignments/dns-parameters>.\
    \  The following\n   registration has been made per the format in Section 3 of\
    \ [RFC8552]:\n      RR Type:            TXT\n      _NODE NAME:         _sztp\n\
    \      Reference:          RFC 8572\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [ITU.X690.2015]\n              International\
    \ Telecommunication Union, \"Information\n              Technology - ASN.1 encoding\
    \ rules: Specification of Basic\n              Encoding Rules (BER), Canonical\
    \ Encoding Rules (CER) and\n              Distinguished Encoding Rules (DER)\"\
    , ITU-T Recommendation\n              X.690, ISO/IEC 8825-1, August 2015,\n  \
    \            <https://www.itu.int/rec/T-REC-X.690/>.\n   [RFC1035]  Mockapetris,\
    \ P., \"Domain names - implementation and\n              specification\", STD\
    \ 13, RFC 1035, DOI 10.17487/RFC1035,\n              November 1987, <https://www.rfc-editor.org/info/rfc1035>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2782]\
    \  Gulbrandsen, A., Vixie, P., and L. Esibov, \"A DNS RR for\n              specifying\
    \ the location of services (DNS SRV)\", RFC 2782,\n              DOI 10.17487/RFC2782,\
    \ February 2000,\n              <https://www.rfc-editor.org/info/rfc2782>.\n \
    \  [RFC3396]  Lemon, T. and S. Cheshire, \"Encoding Long Options in the\n    \
    \          Dynamic Host Configuration Protocol (DHCPv4)\", RFC 3396,\n       \
    \       DOI 10.17487/RFC3396, November 2002,\n              <https://www.rfc-editor.org/info/rfc3396>.\n\
    \   [RFC4253]  Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n    \
    \          Transport Layer Protocol\", RFC 4253, DOI 10.17487/RFC4253,\n     \
    \         January 2006, <https://www.rfc-editor.org/info/rfc4253>.\n   [RFC5280]\
    \  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,\
    \ R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate\
    \ and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI\
    \ 10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n\
    \   [RFC5652]  Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n\
    \              RFC 5652, DOI 10.17487/RFC5652, September 2009,\n             \
    \ <https://www.rfc-editor.org/info/rfc5652>.\n   [RFC6020]  Bjorklund, M., Ed.,\
    \ \"YANG - A Data Modeling Language for\n              the Network Configuration\
    \ Protocol (NETCONF)\", RFC 6020,\n              DOI 10.17487/RFC6020, October\
    \ 2010,\n              <https://www.rfc-editor.org/info/rfc6020>.\n   [RFC6125]\
    \  Saint-Andre, P. and J. Hodges, \"Representation and\n              Verification\
    \ of Domain-Based Application Service Identity\n              within Internet\
    \ Public Key Infrastructure Using X.509\n              (PKIX) Certificates in\
    \ the Context of Transport Layer\n              Security (TLS)\", RFC 6125, DOI\
    \ 10.17487/RFC6125, March\n              2011, <https://www.rfc-editor.org/info/rfc6125>.\n\
    \   [RFC6762]  Cheshire, S. and M. Krochmal, \"Multicast DNS\", RFC 6762,\n  \
    \            DOI 10.17487/RFC6762, February 2013,\n              <https://www.rfc-editor.org/info/rfc6762>.\n\
    \   [RFC6991]  Schoenwaelder, J., Ed., \"Common YANG Data Types\",\n         \
    \     RFC 6991, DOI 10.17487/RFC6991, July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n\
    \   [RFC7227]  Hankins, D., Mrugalski, T., Siodelski, M., Jiang, S., and\n   \
    \           S. Krishnan, \"Guidelines for Creating New DHCPv6 Options\",\n   \
    \           BCP 187, RFC 7227, DOI 10.17487/RFC7227, May 2014,\n             \
    \ <https://www.rfc-editor.org/info/rfc7227>.\n   [RFC7230]  Fielding, R., Ed.\
    \ and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1):\
    \ Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,\
    \ June 2014,\n              <https://www.rfc-editor.org/info/rfc7230>.\n   [RFC7950]\
    \  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n            \
    \  RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n\
    \   [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n       \
    \       Protocol\", RFC 8040, DOI 10.17487/RFC8040, January 2017,\n          \
    \    <https://www.rfc-editor.org/info/rfc8040>.\n   [RFC8174]  Leiba, B., \"Ambiguity\
    \ of Uppercase vs Lowercase in RFC\n              2119 Key Words\", BCP 14, RFC\
    \ 8174, DOI 10.17487/RFC8174,\n              May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n\
    \   [RFC8366]  Watsen, K., Richardson, M., Pritikin, M., and T. Eckert,\n    \
    \          \"A Voucher Artifact for Bootstrapping Protocols\",\n             \
    \ RFC 8366, DOI 10.17487/RFC8366, May 2018,\n              <https://www.rfc-editor.org/info/rfc8366>.\n\
    \   [RFC8415]  Mrugalski, T., Siodelski, M., Volz, B., Yourtchenko, A.,\n    \
    \          Richardson, M., Jiang, S., Lemon, T., and T. Winters,\n           \
    \   \"Dynamic Host Configuration Protocol for IPv6 (DHCPv6)\",\n             \
    \ RFC 8415, DOI 10.17487/RFC8415, November 2018,\n              <https://www.rfc-editor.org/info/rfc8415>.\n\
    \   [RFC8552]  Crocker, D., \"Scoped Interpretation of DNS Resource\n        \
    \      Records through \"Underscored\" Naming of Attribute Leaves\",\n       \
    \       BCP 222, RFC 8552, DOI 10.17487/RFC8552, March 2019,\n              <https://www.rfc-editor.org/info/rfc8552>.\n\
    \   [Std-802.1AR]\n              IEEE, \"IEEE Standard for Local and metropolitan\
    \ area\n              networks - Secure Device Identity\", IEEE 802.1AR.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [NTS-NTP]  Franke, D., Sibold, D., Teichel,\
    \ K., Dansarie, M., and\n              R. Sundblad, \"Network Time Security for\
    \ the Network Time\n              Protocol\", Work in Progress, draft-ietf-ntp-using-nts-for-\n\
    \              ntp-18, April 2019.\n   [RFC3688]  Mealling, M., \"The IETF XML\
    \ Registry\", BCP 81, RFC 3688,\n              DOI 10.17487/RFC3688, January 2004,\n\
    \              <https://www.rfc-editor.org/info/rfc3688>.\n   [RFC4250]  Lehtinen,\
    \ S. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n              Protocol Assigned\
    \ Numbers\", RFC 4250,\n              DOI 10.17487/RFC4250, January 2006,\n  \
    \            <https://www.rfc-editor.org/info/rfc4250>.\n   [RFC6187]  Igoe, K.\
    \ and D. Stebila, \"X.509v3 Certificates for Secure\n              Shell Authentication\"\
    , RFC 6187, DOI 10.17487/RFC6187,\n              March 2011, <https://www.rfc-editor.org/info/rfc6187>.\n\
    \   [RFC6234]  Eastlake 3rd, D. and T. Hansen, \"US Secure Hash Algorithms\n \
    \             (SHA and SHA-based HMAC and HKDF)\", RFC 6234,\n              DOI\
    \ 10.17487/RFC6234, May 2011,\n              <https://www.rfc-editor.org/info/rfc6234>.\n\
    \   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n  \
    \            and A. Bierman, Ed., \"Network Configuration Protocol\n         \
    \     (NETCONF)\", RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC6335]  Cotton, M., Eggert, L., Touch, J., Westerlund, M., and\n      \
    \        S. Cheshire, \"Internet Assigned Numbers Authority (IANA)\n         \
    \     Procedures for the Management of the Service Name and\n              Transport\
    \ Protocol Port Number Registry\", BCP 165,\n              RFC 6335, DOI 10.17487/RFC6335,\
    \ August 2011,\n              <https://www.rfc-editor.org/info/rfc6335>.\n   [RFC6698]\
    \  Hoffman, P. and J. Schlyter, \"The DNS-Based Authentication\n             \
    \ of Named Entities (DANE) Transport Layer Security (TLS)\n              Protocol:\
    \ TLSA\", RFC 6698, DOI 10.17487/RFC6698, August\n              2012, <https://www.rfc-editor.org/info/rfc6698>.\n\
    \   [RFC6763]  Cheshire, S. and M. Krochmal, \"DNS-Based Service\n           \
    \   Discovery\", RFC 6763, DOI 10.17487/RFC6763, February 2013,\n            \
    \  <https://www.rfc-editor.org/info/rfc6763>.\n   [RFC6891]  Damas, J., Graff,\
    \ M., and P. Vixie, \"Extension Mechanisms\n              for DNS (EDNS(0))\"\
    , STD 75, RFC 6891,\n              DOI 10.17487/RFC6891, April 2013,\n       \
    \       <https://www.rfc-editor.org/info/rfc6891>.\n   [RFC6960]  Santesson, S.,\
    \ Myers, M., Ankney, R., Malpani, A.,\n              Galperin, S., and C. Adams,\
    \ \"X.509 Internet Public Key\n              Infrastructure Online Certificate\
    \ Status Protocol - OCSP\",\n              RFC 6960, DOI 10.17487/RFC6960, June\
    \ 2013,\n              <https://www.rfc-editor.org/info/rfc6960>.\n   [RFC7107]\
    \  Housley, R., \"Object Identifier Registry for the S/MIME\n              Mail\
    \ Security Working Group\", RFC 7107,\n              DOI 10.17487/RFC7107, January\
    \ 2014,\n              <https://www.rfc-editor.org/info/rfc7107>.\n   [RFC7766]\
    \  Dickinson, J., Dickinson, S., Bellis, R., Mankin, A., and\n              D.\
    \ Wessels, \"DNS Transport over TCP - Implementation\n              Requirements\"\
    , RFC 7766, DOI 10.17487/RFC7766, March 2016,\n              <https://www.rfc-editor.org/info/rfc7766>.\n\
    \   [RFC8071]  Watsen, K., \"NETCONF Call Home and RESTCONF Call Home\",\n   \
    \           RFC 8071, DOI 10.17487/RFC8071, February 2017,\n              <https://www.rfc-editor.org/info/rfc8071>.\n\
    \   [RFC8259]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n \
    \             Interchange Format\", STD 90, RFC 8259,\n              DOI 10.17487/RFC8259,\
    \ December 2017,\n              <https://www.rfc-editor.org/info/rfc8259>.\n \
    \  [RFC8340]  Bjorklund, M. and L. Berger, Ed., \"YANG Tree Diagrams\",\n    \
    \          BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018,\n            \
    \  <https://www.rfc-editor.org/info/rfc8340>.\n   [RFC8341]  Bierman, A. and M.\
    \ Bjorklund, \"Network Configuration\n              Access Control Model\", STD\
    \ 91, RFC 8341,\n              DOI 10.17487/RFC8341, March 2018,\n           \
    \   <https://www.rfc-editor.org/info/rfc8341>.\n   [RFC8446]  Rescorla, E., \"\
    The Transport Layer Security (TLS) Protocol\n              Version 1.3\", RFC\
    \ 8446, DOI 10.17487/RFC8446, August 2018,\n              <https://www.rfc-editor.org/info/rfc8446>.\n\
    \   [YANG-CRYPTO-TYPES]\n              Watsen, K. and H. Wang, \"Common YANG Data\
    \ Types for\n              Cryptography\", Work in Progress, draft-ietf-netconf-\n\
    \              crypto-types-05, March 2019.\n   [YANG-TRUST-ANCHORS]\n       \
    \       Watsen, K., \"YANG Data Model for Global Trust Anchors\",\n          \
    \    Work in Progress, draft-ietf-netconf-trust-anchors-03,\n              March\
    \ 2019.\n"
- title: Appendix A.  Example Device Data Model
  contents:
  - "Appendix A.  Example Device Data Model\n   This section defines a non-normative\
    \ data model that enables the\n   configuration of SZTP bootstrapping and the\
    \ discovery of what\n   parameters are used by a device's bootstrapping logic.\n"
- title: A.1.  Data Model Overview
  contents:
  - "A.1.  Data Model Overview\n   The following tree diagram provides an overview\
    \ for the SZTP device\n   data model.\n    module: example-device-data-model\n\
    \      +--rw sztp\n         +--rw enabled?                          boolean\n\
    \         +--ro idevid-certificate?               ct:end-entity-cert-cms\n   \
    \      |       {bootstrap-servers}?\n         +--ro bootstrap-servers {bootstrap-servers}?\n\
    \         |  +--ro bootstrap-server* [address]\n         |     +--ro address \
    \   inet:host\n         |     +--ro port?      inet:port-number\n         +--ro\
    \ bootstrap-server-trust-anchors {bootstrap-servers}?\n         |  +--ro reference*\
    \   ta:pinned-certificates-ref\n         +--ro voucher-trust-anchors {signed-data}?\n\
    \            +--ro reference*   ta:pinned-certificates-ref\n   In the above diagram,\
    \ notice that there is only one configurable\n   node: \"enabled\".  The expectation\
    \ is that this node would be set to\n   \"true\" in the device's factory default\
    \ configuration and that it\n   would be either set to \"false\" or deleted when\
    \ the SZTP bootstrapping\n   is longer needed.\n"
- title: A.2.  Example Usage
  contents:
  - "A.2.  Example Usage\n   Following is an instance example for this data model.\n\
    \   <sztp xmlns=\"https://example.com/sztp-device-data-model\">\n     <enabled>true</enabled>\n\
    \     <idevid-certificate>base64encodedvalue==</idevid-certificate>\n     <bootstrap-servers>\n\
    \       <bootstrap-server>\n         <address>sztp1.example.com</address>\n  \
    \       <port>8443</port>\n       </bootstrap-server>\n       <bootstrap-server>\n\
    \         <address>sztp2.example.com</address>\n         <port>8443</port>\n \
    \      </bootstrap-server>\n       <bootstrap-server>\n         <address>sztp3.example.com</address>\n\
    \         <port>8443</port>\n       </bootstrap-server>\n     </bootstrap-servers>\n\
    \     <bootstrap-server-trust-anchors>\n       <reference>manufacturers-root-ca-certs</reference>\n\
    \     </bootstrap-server-trust-anchors>\n     <voucher-trust-anchors>\n      \
    \ <reference>manufacturers-root-ca-certs</reference>\n     </voucher-trust-anchors>\n\
    \   </sztp>\n"
- title: A.3.  YANG Module
  contents:
  - "A.3.  YANG Module\n   The device model is defined by the YANG module defined\
    \ in this\n   section.\n   This module references [Std-802.1AR] and uses data\
    \ types defined in\n   [RFC6991], [YANG-CRYPTO-TYPES], and [YANG-TRUST-ANCHORS].\n\
    \   module example-device-data-model {\n     yang-version 1.1;\n     namespace\
    \ \"https://example.com/sztp-device-data-model\";\n     prefix sztp-ddm;\n   \
    \  import ietf-inet-types {\n       prefix inet;\n       reference \"RFC 6991:\
    \ Common YANG Data Types\";\n     }\n     import ietf-crypto-types {\n       prefix\
    \ ct;\n       revision-date 2019-03-09;\n       description\n        \"ietf-crypto-types\
    \ is defined in\n         draft-ietf-netconf-crypto-types\";\n       reference\n\
    \        \"draft-ietf-netconf-crypto-types-05:\n           Common YANG Data Types\
    \ for Cryptography\";\n     }\n     import ietf-trust-anchors {\n       prefix\
    \ ta;\n       revision-date 2019-03-09;\n       description\n        \"ietf-trust-anchors\
    \ is defined in\n         draft-ietf-netconf-trust-anchors.\";\n       reference\n\
    \        \"draft-ietf-netconf-trust-anchors-03:\n           YANG Data Model for\
    \ Global Trust Anchors\";\n     }\n     organization\n       \"Example Corporation\"\
    ;\n     contact\n       \"Author: Bootstrap Admin <mailto:admin@example.com>\"\
    ;\n     description\n       \"This module defines a data model to enable SZTP\n\
    \        bootstrapping and discover what parameters are used.\n        This module\
    \ assumes the use of an IDevID certificate,\n        as opposed to any other client\
    \ certificate, or the\n        use of an HTTP-based client authentication scheme.\"\
    ;\n     revision 2019-04-30 {\n       description\n         \"Initial version\"\
    ;\n       reference\n         \"RFC 8572: Secure Zero Touch Provisioning (SZTP)\"\
    ;\n     }\n     // features\n     feature bootstrap-servers {\n       description\n\
    \         \"The device supports bootstrapping off bootstrap servers.\";\n    \
    \ }\n     feature signed-data {\n       description\n         \"The device supports\
    \ bootstrapping off signed data.\";\n     }\n     // protocol accessible nodes\n\
    \     container sztp {\n       description\n         \"Top-level container for\
    \ the SZTP data model.\";\n       leaf enabled {\n         type boolean;\n   \
    \      default false;\n         description\n           \"The 'enabled' leaf controls\
    \ if SZTP bootstrapping is\n            enabled or disabled.  The default is 'false'\
    \ so that, when\n            not enabled, which is most of the time, no configuration\n\
    \            is needed.\";\n       }\n       leaf idevid-certificate {\n     \
    \    if-feature bootstrap-servers;\n         type ct:end-entity-cert-cms;\n  \
    \       config false;\n         description\n           \"This CMS structure contains\
    \ the IEEE 802.1AR\n            IDevID certificate itself and all intermediate\n\
    \            certificates leading up to, and optionally including,\n         \
    \   the manufacturer's well-known trust anchor certificate\n            for IDevID\
    \ certificates.  The well-known trust anchor\n            does not have to be\
    \ a self-signed certificate.\";\n         reference\n           \"IEEE 802.1AR:\n\
    \              IEEE Standard for Local and metropolitan area\n              networks\
    \ - Secure Device Identity\";\n       }\n       container bootstrap-servers {\n\
    \         if-feature bootstrap-servers;\n         config false;\n         description\n\
    \           \"List of bootstrap servers this device will attempt\n           \
    \ to reach out to when bootstrapping.\";\n         list bootstrap-server {\n \
    \          key \"address\";\n           description\n             \"A bootstrap\
    \ server entry.\";\n           leaf address {\n             type inet:host;\n\
    \             mandatory true;\n             description\n               \"The\
    \ IP address or hostname of the bootstrap server the\n                device should\
    \ redirect to.\";\n           }\n           leaf port {\n             type inet:port-number;\n\
    \             default \"443\";\n             description\n               \"The\
    \ port number the bootstrap server listens on.  If no\n                port is\
    \ specified, the IANA-assigned port for 'https'\n                (443) is used.\"\
    ;\n           }\n         }\n       }\n       container bootstrap-server-trust-anchors\
    \ {\n         if-feature bootstrap-servers;\n         config false;\n        \
    \ description \"Container for a list of trust anchor references.\";\n        \
    \ leaf-list reference {\n           type ta:pinned-certificates-ref;\n       \
    \    description\n             \"A reference to a list of pinned certificate authority\
    \ (CA)\n              certificates that the device uses to validate bootstrap\n\
    \              servers with.\";\n         }\n       }\n       container voucher-trust-anchors\
    \ {\n         if-feature signed-data;\n         config false;\n         description\
    \ \"Container for a list of trust anchor references.\";\n         leaf-list reference\
    \ {\n           type ta:pinned-certificates-ref;\n           description\n   \
    \          \"A reference to a list of pinned certificate authority (CA)\n    \
    \          certificates that the device uses to validate ownership\n         \
    \     vouchers with.\";\n         }\n       }\n     }\n   }\n"
- title: Appendix B.  Promoting a Connection from Untrusted to Trusted
  contents:
  - "Appendix B.  Promoting a Connection from Untrusted to Trusted\n   The following\
    \ diagram illustrates a sequence of bootstrapping\n   activities that promote\
    \ an untrusted connection to a bootstrap server\n   to a trusted connection to\
    \ the same bootstrap server.  This enables a\n   device to limit the amount of\
    \ information it might disclose to an\n   adversary hosting an untrusted bootstrap\
    \ server.\n                                                         +-----------+\n\
    \                                                         |Deployment-|\n    \
    \                                                     | Specific  |\n   +------+\
    \                                              | Bootstrap |\n   |Device|    \
    \                                          |  Server   |\n   +------+        \
    \                                      +-----------+\n      |                \
    \                                        |\n      | 1.  \"HTTPS\" Request (\"\
    signed-data-preferred\", nonce)   |\n      |------------------------------------------------------->|\n\
    \      | 2.  \"HTTPS\" Response (signed redirect information)     |\n      |<-------------------------------------------------------|\n\
    \      |                                                        |\n      |   \
    \                                                     |\n      | 3.  HTTPS Request\
    \ (os-name=xyz, os-version=123, etc.)  |\n      |------------------------------------------------------->|\n\
    \      | 4.  HTTPS Response (unsigned onboarding information    |\n      |<-------------------------------------------------------|\n\
    \      |                                                        |\n   The interactions\
    \ in the above diagram are described below.\n   1.  The device initiates an untrusted\
    \ connection to a bootstrap\n       server, as is indicated by putting \"HTTPS\"\
    \ in double quotes\n       above.  It is still an HTTPS connection, but the device\
    \ is unable\n       to authenticate the bootstrap server's TLS certificate.  Because\n\
    \       the device is unable to trust the bootstrap server, it sends the\n   \
    \    \"signed-data-preferred\" input parameter, and optionally also the\n    \
    \   \"nonce\" input parameter, in the \"get-bootstrapping-data\" RPC.\n      \
    \ The \"signed-data-preferred\" parameter informs the bootstrap\n       server\
    \ that the device does not trust it and may be holding back\n       some additional\
    \ input parameters from the server (e.g., other\n       input parameters, progress\
    \ reports, etc.).  The \"nonce\" input\n       parameter enables the bootstrap\
    \ server to dynamically obtain an\n       ownership voucher from a Manufacturer\
    \ Authorized Signing\n       Authority (MASA), which may be important for devices\
    \ that do not\n       have a reliable clock.\n   2.  The bootstrap server, seeing\
    \ the \"signed-data-preferred\" input\n       parameter, knows that it can send\
    \ either unsigned redirect\n       information or signed data of any type.  But,\
    \ in this case, the\n       bootstrap server has the ability to sign data and\
    \ chooses to\n       respond with signed redirect information, not signed onboarding\n\
    \       information as might be expected, securely redirecting the device\n  \
    \     back to it again.  Not displayed but, if the \"nonce\" input\n       parameter\
    \ was passed, the bootstrap server could dynamically\n       connect to a MASA\
    \ and download a voucher having the nonce value\n       in it.  Details regarding\
    \ a protocol enabling this integration is\n       outside the scope of this document.\n\
    \   3.  Upon validating the signed redirect information, the device\n       establishes\
    \ a secure connection to the bootstrap server.\n       Unbeknownst to the device,\
    \ it is the same bootstrap server it was\n       connected to previously, but\
    \ because the device is able to\n       authenticate the bootstrap server this\
    \ time, it sends its normal\n       \"get-bootstrapping-data\" request (i.e.,\
    \ with additional input\n       parameters) as well as its progress reports (not\
    \ depicted).\n   4.  This time, because the \"signed-data-preferred\" parameter\
    \ was not\n       passed, having access to all of the device's input parameters,\n\
    \       the bootstrap server returns, in this example, unsigned\n       onboarding\
    \ information to the device.  Note also that, because\n       the bootstrap server\
    \ is now trusted, the device will send\n       progress reports to the server.\n"
- title: Appendix C.  Workflow Overview
  contents:
  - "Appendix C.  Workflow Overview\n   The solution presented in this document is\
    \ conceptualized to be\n   composed of the non-normative workflows described in\
    \ this section.\n   Implementation details are expected to vary.  Each diagram\
    \ is\n   followed by a detailed description of the steps presented in the\n  \
    \ diagram, with further explanation on how implementations may vary.\n"
- title: C.1.  Enrollment and Ordering Devices
  contents:
  - "C.1.  Enrollment and Ordering Devices\n   The following diagram illustrates key\
    \ interactions that may occur\n   from when a prospective owner enrolls in a manufacturer's\
    \ SZTP\n   program to when the manufacturer ships devices for an order placed\
    \ by\n   the prospective owner.\n                                  +-----------+\n\
    \   +------------+                 |Prospective|                    +---+\n  \
    \ |Manufacturer|                 |   Owner   |                    |NMS|\n   +------------+\
    \                 +-----------+                    +---+\n         |         \
    \                     |                            |\n         |             \
    \                 |                            |\n         |  1. initiate enrollment\
    \      |                            |\n         #<-----------------------------|\
    \                            |\n         #                              |    \
    \                        |\n         #                              |        \
    \                    |\n         #     IDevID trust anchor      |            \
    \                |\n         #----------------------------->#  set IDevID trust\
    \ anchor   |\n         #                              #--------------------------->|\n\
    \         #                              |                            |\n    \
    \     #     bootstrap server         |                            |\n        \
    \ #     account credentials      |                            |\n         #----------------------------->#\
    \  set credentials           |\n         |                              #--------------------------->|\n\
    \         |                              |                            |\n    \
    \     |                              |                            |\n        \
    \ |  2. set owner certificate trust anchor                    |\n         |<----------------------------------------------------------|\n\
    \         |                              |                            |\n    \
    \     |                              |                            |\n        \
    \ |  3. place device order       |                            |\n         |<-----------------------------#\
    \  model devices             |\n         |                              #--------------------------->|\n\
    \         |                              |                            |\n    \
    \     |  4. ship devices and send    |                            |\n        \
    \ |     device identifiers and   |                            |\n         |  \
    \   ownership vouchers       |                            |\n         |----------------------------->#\
    \  set device identifiers    |\n         |                              #  and\
    \ ownership vouchers    |\n         |                              #--------------------------->|\n\
    \         |                              |                            |\n   Each\
    \ numbered item below corresponds to a numbered item in the\n   diagram above.\n\
    \   1.  A prospective owner of a manufacturer's devices initiates an\n       enrollment\
    \ process with the manufacturer.  This process includes\n       the following:\n\
    \       *  Regardless of how the prospective owner intends to bootstrap\n    \
    \      their devices, they will always obtain from the manufacturer\n        \
    \  the trust anchor certificate for the IDevID certificates.\n          This certificate\
    \ is installed on the prospective owner's NMS\n          so that the NMS can authenticate\
    \ the IDevID certificates when\n          they are presented to subsequent steps.\n\
    \       *  If the manufacturer hosts an Internet-based bootstrap server\n    \
    \      (e.g., a redirect server) such as described in Section 4.4,\n         \
    \ then credentials necessary to configure the bootstrap server\n          would\
    \ be provided to the prospective owner.  If the bootstrap\n          server is\
    \ configurable through an API (outside the scope of\n          this document),\
    \ then the credentials might be installed on the\n          prospective owner's\
    \ NMS so that the NMS can subsequently\n          configure the manufacturer-hosted\
    \ bootstrap server directly.\n   2.  If the manufacturer's devices are able to\
    \ validate signed data\n       (Section 5.4), and assuming that the prospective\
    \ owner's NMS is\n       able to prepare and sign the bootstrapping data itself,\
    \ the\n       prospective owner's NMS might set a trust anchor certificate onto\n\
    \       the manufacturer's bootstrap server, using the credentials\n       provided\
    \ in the previous step.  This certificate is the trust\n       anchor certificate\
    \ that the prospective owner would like the\n       manufacturer to place into\
    \ the ownership vouchers it generates,\n       thereby enabling devices to trust\
    \ the owner's owner certificate.\n       How this trust anchor certificate is\
    \ used to enable devices to\n       validate signed bootstrapping data is described\
    \ in Section 5.4.\n   3.  Some time later, the prospective owner places an order\
    \ with the\n       manufacturer, perhaps with a special flag checked for SZTP\n\
    \       handling.  At this time, or perhaps before placing the order, the\n  \
    \     owner may model the devices in their NMS, creating virtual\n       objects\
    \ for the devices with no real-world device associations.\n       For instance,\
    \ the model can be used to simulate the device's\n       location in the network\
    \ and the configuration it should have when\n       fully operational.\n   4.\
    \  When the manufacturer fulfills the order, shipping the devices to\n       their\
    \ intended locations, they may notify the owner of the\n       devices' serial\
    \ numbers and shipping destinations, which the\n       owner may use to stage\
    \ the network for when the devices power on.\n       Additionally, the manufacturer\
    \ may send one or more ownership\n       vouchers, cryptographically assigning\
    \ ownership of those devices\n       to the owner.  The owner may set this information\
    \ on their NMS,\n       perhaps binding specific modeled devices to the serial\
    \ numbers\n       and ownership vouchers.\n"
- title: C.2.  Owner Stages the Network for Bootstrap
  contents:
  - "C.2.  Owner Stages the Network for Bootstrap\n   The following diagram illustrates\
    \ how an owner might stage the\n   network for bootstrapping devices.\n      \
    \       +-----------+ +-------------+\n             |Deployment-| |Manufacturer-|\
    \ +------+ +------+\n             | Specific  | |   Hosted    | | Local| | Local|\
    \ +---------+\n       +---+ | Bootstrap | |  Bootstrap  | |  DNS | | DHCP | |Removable|\n\
    \       |NMS| |  Server   | |   Server    | |Server| |Server| | Storage |\n  \
    \     +---+ +-----------+ +-------------+ +------+ +------+ +---------+\n    \
    \     |        |             |            |        |         |\n 1.      |   \
    \     |             |            |        |         |\n activate|        |   \
    \          |            |        |         |\n modeled |        |            \
    \ |            |        |         |\n device  |        |             |       \
    \     |        |         |\n ------->|        |             |            |   \
    \     |         |\n         | 2. (optional)        |            |        |   \
    \      |\n         |    configure         |            |        |         |\n\
    \         |    bootstrap         |            |        |         |\n         |\
    \    server            |            |        |         |\n         |------->|\
    \             |            |        |         |\n         |        |         \
    \    |            |        |         |\n         | 3. (optional) configure   \
    \        |        |         |\n         |    bootstrap server  |            |\
    \        |         |\n         |--------------------->|            |        |\
    \         |\n         |        |             |            |        |         |\n\
    \         |        |             |            |        |         |\n         |\
    \ 4. (optional) configure DNS server|        |         |\n         |---------------------------------->|\
    \        |         |\n         |        |             |            |        |\
    \         |\n         |        |             |            |        |         |\n\
    \         | 5. (optional) configure DHCP server        |         |\n         |------------------------------------------->|\
    \         |\n         |        |             |            |        |         |\n\
    \         |        |             |            |        |         |\n         |\
    \ 6. (optional) store bootstrapping artifacts on media |\n         |----------------------------------------------------->|\n\
    \         |        |             |            |        |         |\n         |\
    \        |             |            |        |         |\n   Each numbered item\
    \ below corresponds to a numbered item in the\n   diagram above.\n   1.  Having\
    \ previously modeled the devices, including setting their\n       fully operational\
    \ configurations and associating device serial\n       numbers and (optionally)\
    \ ownership vouchers, the owner might\n       \"activate\" one or more modeled\
    \ devices.  That is, the owner tells\n       the NMS to perform the steps necessary\
    \ to prepare for when the\n       real-world devices power up and initiate the\
    \ bootstrapping\n       process.  Note that, in some deployments, this step might\
    \ be\n       combined with the last step from the previous workflow.  Here, it\n\
    \       is depicted that an NMS performs the steps, but they may be\n       performed\
    \ manually or through some other mechanism.\n   2.  If it is desired to use a\
    \ deployment-specific bootstrap server,\n       it must be configured to provide\
    \ the bootstrapping data for the\n       specific devices.  Configuring the bootstrap\
    \ server may occur via\n       a programmatic API not defined by this document.\
    \  Illustrated\n       here as an external component, the bootstrap server may\
    \ be\n       implemented as an internal component of the NMS itself.\n   3.  If\
    \ it is desired to use a manufacturer-hosted bootstrap server,\n       it must\
    \ be configured to provide the bootstrapping data for the\n       specific devices.\
    \  The configuration must be either redirect or\n       onboarding information.\
    \  That is, the manufacturer-hosted\n       bootstrap server will either redirect\
    \ the device to another\n       bootstrap server or provide the device with the\
    \ onboarding\n       information itself.  The types of bootstrapping data the\n\
    \       manufacturer-hosted bootstrap server supports may vary by\n       implementation;\
    \ some implementations may support only redirect\n       information or only onboarding\
    \ information, while others may\n       support both redirect and onboarding information.\
    \  Configuring\n       the bootstrap server may occur via a programmatic API not\
    \ defined\n       by this document.\n   4.  If it is desired to use a DNS server\
    \ to supply bootstrapping\n       data, a DNS server needs to be configured. \
    \ If multicast DNS is\n       desired, then the DNS server must reside on the\
    \ local network;\n       otherwise, the DNS server may reside on a remote network.\
    \  Please\n       see Section 4.2 for more information about how to configure\
    \ DNS\n       servers.  Configuring the DNS server may occur via a programmatic\n\
    \       API not defined by this document.\n   5.  If it is desired to use a DHCP\
    \ server to supply bootstrapping\n       data, a DHCP server needs to be configured.\
    \  The DHCP server may\n       be accessed directly or via a DHCP relay.  Please\
    \ see Section 4.3\n       for more information about how to configure DHCP servers.\n\
    \       Configuring the DHCP server may occur via a programmatic API not\n   \
    \    defined by this document.\n   6.  If it is desired to use a removable storage\
    \ device (e.g., a USB\n       flash drive) to supply bootstrapping data, the data\
    \ would need to\n       be placed onto it.  Please see Section 4.1 for more information\n\
    \       about how to configure a removable storage device.\n"
- title: C.3.  Device Powers On
  contents:
  - "C.3.  Device Powers On\n   The following diagram illustrates the sequence of\
    \ activities that\n   occur when a device powers on.\n                       \
    \                             +-----------+\n                                \
    \     +-----------+  |Deployment-|\n                                     | Source\
    \ of |  | Specific  |\n  +------+                           | Bootstrap |  | Bootstrap\
    \ |  +---+\n  |Device|                           |   Data    |  |  Server   |\
    \  |NMS|\n  +------+                           +-----------+  +-----------+  +---+\n\
    \     |                                     |              |          |\n    \
    \ |                                     |              |          |\n     | 1.\
    \ if SZTP bootstrap service        |              |          |\n     |    is not\
    \ enabled, then exit.       |              |          |\n     |              \
    \                       |              |          |\n     | 2. for each source\
    \ supported, check |              |          |\n     |    for bootstrapping data.\
    \          |              |          |\n     |------------------------------------>|\
    \              |          |\n     |                                     |    \
    \          |          |\n     | 3. if onboarding information is     |        \
    \      |          |\n     |    found, initialize self and, only |            \
    \  |          |\n     |    if source is a trusted bootstrap |              | \
    \         |\n     |    server, send progress reports.   |              |     \
    \     |\n     |------------------------------------>#              |         \
    \ |\n     |                                     # webhook      |          |\n\
    \     |                                     #------------------------>|\n    \
    \ |                                                    |          |\n     | 4.\
    \ else, if redirect information is found, for     |          |\n     |    each\
    \ bootstrap server specified, check for data.|          |\n     |-+------------------------------------------------->|\
    \          |\n     | |                                                  |    \
    \      |\n     | | if more redirect information is found, recurse   |        \
    \  |\n     | | (not depicted); else, if onboarding information  |          |\n\
    \     | | is found, initialize self and post progress      |          |\n    \
    \ | | reports.                                         |          |\n     | +------------------------------------------------->#\
    \          |\n     |                                                    # webhook\
    \  |\n     |                                                    #--------->|\n\
    \     |\n     | 5. retry sources and/or wait for manual provisioning.\n     |\n\
    \   The interactions in the above diagram are described below.\n   1.  Upon power\
    \ being applied, the device checks to see if SZTP\n       bootstrapping is configured,\
    \ such as must be the case when\n       running its \"factory default\" configuration.\
    \  If SZTP\n       bootstrapping is not configured, then the bootstrapping logic\n\
    \       exits and none of the following interactions occur.\n   2.  For each source\
    \ of bootstrapping data the device supports,\n       preferably in order of closeness\
    \ to the device (e.g., removable\n       storage before Internet-based servers),\
    \ the device checks to see\n       if there is any bootstrapping data for it there.\n\
    \   3.  If onboarding information is found, the device initializes itself\n  \
    \     accordingly (e.g., installing a boot image and committing an\n       initial\
    \ configuration).  If the source is a bootstrap server, and\n       the bootstrap\
    \ server can be trusted (i.e., TLS-level\n       authentication), the device also\
    \ sends progress reports to the\n       bootstrap server.\n       *  The contents\
    \ of the initial configuration should configure an\n          administrator account\
    \ on the device (e.g., username, SSH\n          public key, etc.), should configure\
    \ the device to either\n          listen for NETCONF or RESTCONF connections or\
    \ initiate call\n          home connections [RFC8071], and should disable the\
    \ SZTP\n          bootstrapping service (e.g., the \"enabled\" leaf in data model\n\
    \          presented in Appendix A).\n       *  If the bootstrap server supports\
    \ forwarding device progress\n          reports to external systems (e.g., via\
    \ a webhook), a\n          \"bootstrap-complete\" progress report (Section 7.3)\
    \ informs the\n          external system to know when it can, for instance, initiate\
    \ a\n          connection to the device.  To support this scenario further,\n\
    \          the \"bootstrap-complete\" progress report may also relay the\n   \
    \       device's SSH host keys and/or TLS certificates, which the\n          external\
    \ system can use to authenticate subsequent connections\n          to the device.\n\
    \       If the device successfully completes the bootstrapping process,\n    \
    \   it exits the bootstrapping logic without considering any\n       additional\
    \ sources of bootstrapping data.\n   4.  Otherwise, if redirect information is\
    \ found, the device iterates\n       through the list of specified bootstrap servers,\
    \ checking to see\n       if the bootstrap server has bootstrapping data for the\
    \ device.\n       If the bootstrap server returns more redirect information, then\n\
    \       the device processes it recursively.  Otherwise, if the bootstrap\n  \
    \     server returns onboarding information, the device processes it\n       following\
    \ the description provided in (3) above.\n   5.  After having tried all supported\
    \ sources of bootstrapping data,\n       the device may retry again all the sources\
    \ and/or provide\n       manageability interfaces for manual configuration (e.g.,\
    \ CLI,\n       HTTP, NETCONF, etc.).  If manual configuration is allowed, and\n\
    \       such configuration is provided, the configuration should also\n      \
    \ disable the SZTP bootstrapping service, as the need for\n       bootstrapping\
    \ would no longer be present.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank the following for lively\
    \ discussions\n   on list and in the halls (ordered by last name): Michael Behringer,\n\
    \   Martin Bjorklund, Dean Bogdanovic, Joe Clarke, Dave Crocker, Toerless\n  \
    \ Eckert, Stephen Farrell, Stephen Hanna, Wes Hardaker, David\n   Harrington,\
    \ Benjamin Kaduk, Radek Krejci, Suresh Krishnan, Mirja\n   Kuehlewind, David Mandelberg,\
    \ Alexey Melnikov, Russ Mundy, Reinaldo\n   Penno, Randy Presuhn, Max Pritikin,\
    \ Michael Richardson, Adam Roach,\n   Juergen Schoenwaelder, and Phil Shafer.\n\
    \   Special thanks goes to Steve Hanna, Russ Mundy, and Wes Hardaker for\n   brainstorming\
    \ the original solution during the IETF 87 meeting in\n   Berlin.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Kent Watsen\n   Watsen Networks\n   Email: kent+ietf@watsen.net\n\
    \   Ian Farrer\n   Deutsche Telekom AG\n   Email: ian.farrer@telekom.de\n   Mikael\
    \ Abrahamsson\n   T-Systems\n   Email: mikael.abrahamsson@t-systems.se\n"
