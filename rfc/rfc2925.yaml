- title: __initial_text__
  contents:
  - "    Definitions of Managed Objects for Remote Ping, Traceroute, and\n       \
    \                    Lookup Operations\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines Management Information Bases (MIBs) for performing\n\
    \   remote ping, traceroute and lookup operations at a remote host.  When\n  \
    \ managing a network it is useful to be able to initiate and retrieve\n   the\
    \ results of ping or traceroute operations when performed at a\n   remote host.\
    \  A Lookup capability is defined in order to enable\n   resolving of either an\
    \ IP address to an DNS name or an DNS name to an\n   IP address at a remote host.\n\
    \   Currently, there are several enterprise-specific MIBs for performing\n   remote\
    \ ping or traceroute operations.  The purpose of this memo is to\n   define a\
    \ standards-based solution to enable interoperability.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.0  Introduction  . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.0  The SNMP Network Management Framework   . . . . . .\
    \ . . . . .  4\n   3.0  Structure of the MIBs   . . . . . . . . . . . . . . .\
    \ . . . .  5\n   3.1  Ping MIB  . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  6\n     3.1.1  pingMaxConcurrentRequests   . . . . . . . . . . . . .\
    \ . .  6\n     3.1.2  pingCtlTable  . . . . . . . . . . . . . . . . . . . . .\
    \ .  6\n     3.1.3  pingResultsTable  . . . . . . . . . . . . . . . . . . . .\
    \  7\n     3.1.4  pingProbeHistoryTable   . . . . . . . . . . . . . . . . .  7\n\
    \   3.2  Traceroute MIB  . . . . . . . . . . . . . . . . . . . . . . .  8\n  \
    \   3.2.1  traceRouteMaxConcurrentRequests   . . . . . . . . . . . .  8\n    \
    \ 3.2.2  traceRouteCtlTable  . . . . . . . . . . . . . . . . . . .  8\n     3.2.3\
    \  traceRouteResultsTable  . . . . . . . . . . . . . . . . .  9\n     3.2.4  traceRouteProbeHistoryTable\
    \   . . . . . . . . . . . . . .  9\n     3.2.5  traceRouteHopsTable   . . . .\
    \ . . . . . . . . . . . . . . 10\n   3.3  Lookup MIB  . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . 10\n     3.3.1  lookupMaxConcurrentRequests and lookupPurgeTime\
    \   . . . . 10\n     3.3.2  lookupCtlTable  . . . . . . . . . . . . . . . . .\
    \ . . . . 10\n     3.3.3  lookupResultsTable  . . . . . . . . . . . . . . . .\
    \ . . . 11\n   4.0  Definitions   . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 12\n   4.1  DISMAN-PING-MIB   . . . . . . . . . . . . . . . . . . . . .\
    \ . 12\n   4.2  DISMAN-TRACEROUTE-MIB   . . . . . . . . . . . . . . . . . . .\
    \ 36\n   4.3  DISMAN-NSLOOKUP-MIB   . . . . . . . . . . . . . . . . . . . . 63\n\
    \   5.0  Security Considerations   . . . . . . . . . . . . . . . . . . 73\n  \
    \ 6.0  Intellectual Property   . . . . . . . . . . . . . . . . . . . 74\n   7.0\
    \  Acknowledgments   . . . . . . . . . . . . . . . . . . . . . . 74\n   8.0  References\
    \  . . . . . . . . . . . . . . . . . . . . . . . . . 74\n   9.0  Author's Address\
    \  . . . . . . . . . . . . . . . . . . . . . . 76\n   10.0  Full Copyright Statement\
    \   . . . . . . . . . . . . . . . . . 77\n"
- title: 1.0  Introduction
  contents:
  - "1.0  Introduction\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119, reference\n   [13].\n   This document is a product of the Distributed\
    \ Management (DISMAN)\n   Working Group.  Its purpose is to define standards-based\
    \ MIB modules\n   for performing specific remote operations.  The remote operations\n\
    \   defined by this document consist of the ping, traceroute and lookup\n   functions.\n\
    \   Ping and traceroute are two very useful functions for managing\n   networks.\
    \  Ping is typically used to determine if a path exists\n   between two hosts\
    \ while traceroute shows an actual path.  Ping is\n   usually implemented using\
    \ the Internet Control Message Protocol\n   (ICMP) \"ECHO\" facility.  It is also\
    \ possible to implement a ping\n   capability using alternate methods, some of\
    \ which are:\n   o   Using the UDP echo port (7), if supported.\n       This is\
    \ defined by RFC 862 [2].\n   o   Timing an SNMP query.\n   o   Timing a TCP connect\
    \ attempt.\n   In general, almost any request/response flow can be used to generate\n\
    \   a round-trip time.  Often many of the non-ICMP ECHO facility methods\n   stand\
    \ a better chance of yielding a good response (not timing out for\n   example)\
    \ since some routers don't honor Echo Requests (timeout\n   situation) or they\
    \ are handled at lower priority, hence possibly\n   giving false indications of\
    \ round trip times.\n   It must be noted that almost any of the various methods\
    \ used for\n   generating a round-trip time can be considered a form of system\n\
    \   attack when used excessively.  Sending a system requests too often\n   can\
    \ negatively effect its performance.  Attempting to connect to what\n   is supposed\
    \ to be an unused port can be very unpredictable.  There\n   are tools that attempt\
    \ to connect to a range of TCP ports to test\n   that any receiving server can\
    \ handle erroneous connection attempts.\n   It also is important to the management\
    \ application using a remote\n   ping capability to know which method is being\
    \ used.  Different\n   methods will yield different response times since the protocol\
    \ and\n   resulting processing will be different.  It is RECOMMENDED that the\n\
    \   ping capability defined within this memo be implemented using the\n   ICMP\
    \ Echo Facility.\n   Traceroute is usually implemented by transmitting a series\
    \ of probe\n   packets with increasing time-to-live values.  A probe packet is\
    \ a UDP\n   datagram encapsulated into an IP packet.  Each hop in a path to the\n\
    \   target (destination) host rejects the probe packet (probe's TTL too\n   small)\
    \ until its time-to-live value becomes large enough for the\n   probe to be forwarded.\
    \  Each hop in a traceroute path returns an ICMP\n   message that is used to discover\
    \ the hop and to calculate a round\n   trip time.  Some systems use ICMP probes\
    \ (ICMP Echo request packets)\n   instead of UDP ones to implement traceroute.\
    \  In both cases\n   traceroute relies on the probes being rejected via an ICMP\
    \ message to\n   discover the hops taken along a path to the final destination.\
    \  Both\n   probe types, UDP and ICMP, are encapsulated into an IP packet and\n\
    \   thus have a TTL field that can be used to cause a path rejection.\n   Implementations\
    \ of the remote traceroute capability as defined within\n   this memo SHOULD be\
    \ done using UDP packets to a (hopefully) unused\n   port.  ICMP probes (ICMP\
    \ Echo Request packets) SHOULD NOT be used.\n   Many PC implementations of traceroute\
    \ use the ICMP probe method,\n   which they should not, since this implementation\
    \ method has been\n   known to have a high probability of failure.  Intermediate\
    \ hops\n   become invisible when a router either refuses to send an ICMP TTL\n\
    \   expired message in response to an incoming ICMP packet or simply\n   tosses\
    \ ICMP echo requests altogether.\n   The behavior of some routers not to return\
    \ a TTL expired message in\n   response to an ICMP Echo request is due in part\
    \ to the following text\n   extracted from RFC 792 [20]:\n   \"The ICMP messages\
    \ typically report errors in the processing of\n   datagrams.  To avoid the infinite\
    \ regress of messages about messages\n   etc., no ICMP messages are sent about\
    \ ICMP messages.\"\n   Both ping and traceroute yield round-trip times measured\
    \ in\n   milliseconds.  These times can be used as a rough approximation for\n\
    \   network transit time.\n   The Lookup operation enables the equivalent of either\
    \ a\n   gethostbyname() or a gethostbyaddr() call being performed at a remote\n\
    \   host.  The Lookup gethostbyname() capability can be used to determine\n  \
    \ the symbolic name of a hop in a traceroute path.\n   Consider the following\
    \ diagram:\n"
- title: +--------------------------------------------------------------------+
  contents:
  - '+--------------------------------------------------------------------+

    '
- title: '|                                                                    |'
  contents:
  - '|                                                                    |

    '
- title: '|           Remote ping, traceroute,  Actual ping, traceroute,       |'
  contents:
  - '|           Remote ping, traceroute,  Actual ping, traceroute,       |

    '
- title: '|       +-----+or Lookup op.    +------+or Lookup op.    +------+    |'
  contents:
  - '|       +-----+or Lookup op.    +------+or Lookup op.    +------+    |

    '
- title: '|       |Local|---------------->|Remote|---------------->|Target|    |'
  contents:
  - '|       |Local|---------------->|Remote|---------------->|Target|    |

    '
- title: '|       | Host|                 | Host |                 | Host |    |'
  contents:
  - '|       | Host|                 | Host |                 | Host |    |

    '
- title: '|       +-----+                 +------+                 +------+    |'
  contents:
  - '|       +-----+                 +------+                 +------+    |

    '
- title: '|                                                                    |'
  contents:
  - '|                                                                    |

    '
- title: '|                                                                    |'
  contents:
  - '|                                                                    |

    '
- title: +--------------------------------------------------------------------+
  contents:
  - "+--------------------------------------------------------------------+\n   A\
    \ local host is the host from which the remote ping, traceroute, or\n   Lookup\
    \ operation is initiated using an SNMP request.  The remote host\n   is a host\
    \ where the MIBs defined by this memo are implemented that\n   receives the remote\
    \ operation via SNMP and performs the actual ping,\n   traceroute, or lookup function.\n"
- title: 2.0  The SNMP Network Management Framework
  contents:
  - "2.0  The SNMP Network Management Framework\n   The SNMP Management Framework\
    \ presently consists of five major\n   components:\n   o   An overall architecture,\
    \ described in RFC 2571 [7].\n   o   Mechanisms for describing and naming objects\
    \ and events for the\n       purpose of management.  The first version of this\
    \ Structure of\n       Management Information (SMI) is called SMIv1 and described\
    \ in STD\n       16, RFC 1155 [14], STD 16, RFC 1212 [15] and RFC 1215 [16]. \
    \ The\n       second version, called SMIv2, is described in STD 58, RFC 2578\n\
    \       [3], STD 58, RFC 2579 [4] and STD 58, RFC 2580 [5].\n   o   Message protocols\
    \ for transferring management information.  The\n       first version of the SNMP\
    \ message protocol is called SNMPv1 and\n       described in STD 15, RFC 1157\
    \ [1].  A second version of the SNMP\n       message protocol, which is not an\
    \ Internet standards track\n       protocol, is called SNMPv2c and described in\
    \ RFC 1901 [17] and\n       RFC 1906 [18].  The third version of the message protocol\
    \ is\n       called SNMPv3 and described in RFC 1906 [18], RFC 2572 [8] and\n\
    \       RFC 2574 [10].\n   o   Protocol operations for accessing management information.\
    \  The\n       first set of protocol operations and associated PDU formats is\n\
    \       described in STD 15, RFC 1157 [1].  A second set of protocol\n       operations\
    \ and associated PDU formats is described in RFC 1905\n       [6].\n   o   A set\
    \ of fundamental applications described in RFC 2573 [9] and\n       the view-based\
    \ access control mechanism described in RFC 2575\n       [11].\n   Managed objects\
    \ are accessed via a virtual information store, termed\n   the Management Information\
    \ Base or MIB.  Objects in the MIB are\n   defined using the mechanisms defined\
    \ in the SMI.\n   This memo specifies MIB modules that are compliant to the SMIv2.\
    \  A\n   MIB conforming to the SMIv1 can be produced through the appropriate\n\
    \   translations.  The resulting translated MIB must be semantically\n   equivalent,\
    \ except where objects or events are omitted because no\n   translation is possible\
    \ (use of Counter64).  Some machine readable\n   information in SMIv2 will be\
    \ converted into textual descriptions in\n   SMIv1 during the translation process.\
    \  However, this loss of machine\n   readable information is not considered to\
    \ change the semantics of the\n   MIB.\n"
- title: 3.0  Structure of the MIBs
  contents:
  - "3.0  Structure of the MIBs\n   This document defines three MIB modules:\n   o\
    \   DISMAN-PING-MIB\n       Defines a ping MIB.\n   o   DISMAN-TRACEROUTE-MIB\n\
    \       Defines a traceroute MIB.\n   o   DISMAN-NSLOOKUP-MIB\n       Provides\
    \ access to the resolver gethostbyname() and\n       gethostbyaddr() functions\
    \ at a remote host.\n   The ping and traceroute MIBs are structured to allow creation\
    \ of ping\n   or traceroute tests that can be set up to periodically issue a series\n\
    \   of operations and generate NOTIFICATIONs to report on test results.\n   Many\
    \ network administrators have in the past written UNIX shell\n   scripts or command\
    \ batch files to operate in fashion similar to the\n   functionality provided\
    \ by the ping and traceroute MIBs defined within\n   this memo.  The intent of\
    \ this document is to acknowledge the\n   importance of these functions and to\
    \ provide a standards-based\n   solution.\n"
- title: 3.1  Ping MIB
  contents:
  - "3.1  Ping MIB\n   The DISMAN-PING-MIB consists of the following components:\n\
    \   o   pingMaxConcurrentRequests\n   o   pingCtlTable\n   o   pingResultsTable\n\
    \   o   pingProbeHistoryTable\n"
- title: 3.1.1  pingMaxConcurrentRequests
  contents:
  - "3.1.1  pingMaxConcurrentRequests\n   The object pingMaxConcurrentRequests enables\
    \ control of the maximum\n   number of concurrent active requests that an agent\
    \ implementation\n   supports.  It is permissible for an agent either to limit\
    \ the maximum\n   upper range allowed for this object or to implement this object\
    \ as\n   read-only with an implementation limit expressed as its value.\n"
- title: 3.1.2  pingCtlTable
  contents:
  - "3.1.2  pingCtlTable\n   A remote ping test is started by setting pingCtlAdminStatus\
    \ to\n   enabled(1).  The corresponding pingCtlEntry MUST have been created\n\
    \   and its pingCtlRowStatus set to active(1) prior to starting the test.\n  \
    \ A single SNMP PDU can be used to create and start a remote ping test.\n   Within\
    \ the PDU, pingCtlTargetAddress should be set to the target\n   host's address\
    \ (pingCtlTargetAddressType will default to ipv4(1)),\n   pingCtlAdminStatus to\
    \ enabled(1), and pingCtlRowStatus to\n   createAndGo(4).\n   The first index\
    \ element, pingCtlOwnerIndex, is of type\n   SnmpAdminString, a textual convention\
    \ that allows for use of the\n   SNMPv3 View-Based Access Control Model (RFC 2575\
    \ [11], VACM) and\n   allows a management application to identify its entries.\
    \  The send\n   index, pingCtlTestName (also an SnmpAdminString), enables the\
    \ same\n   management application to have multiple requests outstanding.\n   Using\
    \ the maximum value for the parameters defined within a pingEntry\n   can result\
    \ in a single remote ping test taking at most 15 minutes\n   (pingCtlTimeOut times\
    \ pingCtlProbeCount) plus whatever time it takes\n   to send the ping request\
    \ and receive its response over the network\n   from the target host.  Use of\
    \ the defaults for pingCtlTimeOut and\n   pingCtlProbeCount yields a maximum of\
    \ 3 seconds to perform a \"normal\"\n   ping test.\n   A management application\
    \ can delete an active remote ping request by\n   setting the corresponding pingCtlRowStatus\
    \ object to destroy(6).\n   The contents of the pingCtlTable is preserved across\
    \ reIPLs (Initial\n   Program Loads) of its agent according the values of each\
    \ of the\n   pingCtlStorageType objects.\n"
- title: 3.1.3  pingResultsTable
  contents:
  - "3.1.3  pingResultsTable\n   An entry in the pingResultsTable is created for a\
    \ corresponding\n   pingCtlEntry once the test defined by this entry is started.\n"
- title: 3.1.4  pingProbeHistoryTable
  contents:
  - "3.1.4  pingProbeHistoryTable\n   The results of past ping probes can be stored\
    \ in this table on a per\n   pingCtlEntry basis.  This table is initially indexed\
    \ by\n   pingCtlOwnerIndex and pingCtlTestName in order for the results of a\n\
    \   probe to relate to the pingCtlEntry that caused it.  The maximum\n   number\
    \ of entries stored in this table per pingCtlEntry is determined\n   by the value\
    \ of pingCtlMaxRows.\n   An implementation of this MIB will remove the oldest\
    \ entry in the\n   pingProbeHistoryTable to allow the addition of an new entry\
    \ once the\n   number of rows in the pingProbeHistoryTable reaches the value\n\
    \   specified by pingCtlMaxRows.  An implementation MUST start assigning\n   pingProbeHistoryIndex\
    \ values at 1 and wrap after exceeding the\n   maximum possible value as defined\
    \ by the limit of this object\n   ('ffffffff'h).\n"
- title: 3.2  Traceroute MIB
  contents:
  - "3.2  Traceroute MIB\n   The DISMAN-TRACEROUTE-MIB consists of the following components:\n\
    \   o   traceRouteMaxConcurrentRequests\n   o   traceRouteCtlTable\n   o   traceRouteResultsTable\n\
    \   o   traceRouteProbeHistoryTable\n   o   traceRouteHopsTable\n"
- title: 3.2.1  traceRouteMaxConcurrentRequests
  contents:
  - "3.2.1  traceRouteMaxConcurrentRequests\n   The object traceRouteMaxConcurrentRequests\
    \ enables control of the\n   maximum number of concurrent active requests that\
    \ an agent\n   implementation supports.  It is permissible for an agent either\
    \ to\n   limit the maximum upper range allowed for this object or to implement\n\
    \   this object as read-only with an implementation limit expressed as\n   its\
    \ value.\n"
- title: 3.2.2  traceRouteCtlTable
  contents:
  - "3.2.2  traceRouteCtlTable\n   A remote traceroute test is started by setting\n\
    \   traceRouteCtlAdminStatus to enabled(1).  The corresponding\n   traceRouteCtlEntry\
    \ MUST have been created and its\n   traceRouteCtlRowStatus set to active(1) prior\
    \ to starting the test.\n   A single SNMP PDU can be used to create and start\
    \ a remote traceroute\n   test.  Within the PDU, traceRouteCtlTargetAddress should\
    \ be set to\n   the target host's address (traceRouteCtlTargetAddressType will\n\
    \   default to ipv4(1)), traceRouteCtlAdminStatus to enabled(1), and\n   traceRouteCtlRowStatus\
    \ to createAndGo(4).\n   The first index element, traceRouteCtlOwnerIndex, is\
    \ of type\n   SnmpAdminString, a textual convention that allows for use of the\n\
    \   SNMPv3 View-Based Access Control Model (RFC 2575 [11], VACM) and\n   allows\
    \ a management application to identify its entries.  The second\n   index, traceRouteCtlTestName\
    \ (also an SnmpAdminString), enables the\n   same management application to have\
    \ multiple requests outstanding.\n   Traceroute has a much longer theoretical\
    \ maximum time for completion\n   than ping. Basically 42 hours and 30 minutes\
    \ (the product of\n   traceRouteCtlTimeOut, traceRouteCtlProbesPerHop, and\n \
    \  traceRouteCtlMaxTtl) plus some network transit time!  Use of the\n   defaults\
    \ defined within an traceRouteCtlEntry yields a maximum of 4\n   minutes and 30\
    \ seconds for a default traceroute operation.  Clearly\n   42 plus hours is too\
    \ long to wait for a traceroute operation to\n   complete.\n   The maximum TTL\
    \ value in effect for traceroute determines how long\n   the traceroute function\
    \ will keep increasing the TTL value in the\n   probe it transmits hoping to reach\
    \ the target host.  The function\n   ends whenever the maximum TTL is exceeded\
    \ or the target host is\n   reached.  The object traceRouteCtlMaxFailures was\
    \ created in order to\n   impose a throttle for how long traceroute continues\
    \ to increase the\n   TTL field in a probe without receiving any kind of response\n\
    \   (timeouts).  It is RECOMMENDED that agent implementations impose a\n   time\
    \ limit for how long it allows a traceroute operation to take\n   relative to\
    \ how the function is implemented.  For example, an\n   implementation that can't\
    \ process multiple traceroute operations at\n   the same time SHOULD impose a\
    \ shorter maximum allowed time period.\n   A management application can delete\
    \ an active remote traceroute\n   request by setting the corresponding traceRouteCtlRowStatus\
    \ object to\n   destroy(6).\n   The contents of the traceRouteCtlTable is preserved\
    \ across reIPLs\n   (Initial Program Loads) of its agent according to the values\
    \ of each\n   of the traceRouteCtlStorageType objects.\n"
- title: 3.2.3  traceRouteResultsTable
  contents:
  - "3.2.3  traceRouteResultsTable\n   An entry in the traceRouteResultsTable is created\
    \ upon determining\n   the results of a specific traceroute operation.  Entries\
    \ in this\n   table relate back to the traceRouteCtlEntry that caused the\n  \
    \ corresponding traceroute operation to occur.  The objects\n   traceRouteResultsCurHopCount\
    \ and traceRouteResultsCurProbeCount can\n   be examined to determine how far\
    \ the current remote traceroute\n   operation has reached.\n"
- title: 3.2.4  traceRouteProbeHistoryTable
  contents:
  - "3.2.4  traceRouteProbeHistoryTable\n   The results of past traceroute probes\
    \ can be stored in this table on\n   a per traceRouteCtlEntry basis.  This table\
    \ is initially indexed by\n   traceRouteCtlOwnerIndex and traceRouteCtlTestName\
    \ in order for the\n   results of a probe to relate to the traceRouteCtlEntry\
    \ that caused\n   it.  The number of entries stored in this table per\n   traceRouteCtlEntry\
    \ is determined by the value of\n   traceRouteCtlMaxRows.\n   An implementation\
    \ of this MIB will remove the oldest entry in the\n   traceRouteProbeHistoryTable\
    \ to allow the addition of an new entry\n   once the number of rows in the traceRouteProbeHistoryTable\
    \ reaches\n   the value of traceRouteCtlMaxRows.  An implementation MUST start\n\
    \   assigning traceRouteProbeHistoryIndex values at 1 and wrap after\n   exceeding\
    \ the maximum possible value as defined by the limit of this\n   object ('ffffffff'h).\n"
- title: 3.2.5  traceRouteHopsTable
  contents:
  - "3.2.5  traceRouteHopsTable\n   The current traceroute path can be stored in this\
    \ table on a per\n   traceRouteCtlEntry basis.  This table is initially indexed\
    \ by\n   traceRouteCtlOwnerIndex and traceRouteCtlTestName in order for a\n  \
    \ traceroute path to relate to the traceRouteCtlEntry that caused it.\n   A third\
    \ index, traceRouteHopsHopIndex, enables keeping one\n   traceRouteHopsEntry per\
    \ traceroute hop.  Creation of\n   traceRouteHopsTable entries is enabled by setting\
    \ the corresponding\n   traceRouteCtlCreateHopsEntries object to true(1).\n"
- title: 3.3  Lookup MIB
  contents:
  - "3.3  Lookup MIB\n   The DISMAN-NSLOOKUP-MIB consists of the following components:\n\
    \   o   lookupMaxConcurrentRequests, and lookupPurgeTime\n   o   lookupCtlTable\n\
    \   o   lookupResultsTable\n"
- title: 3.3.1  lookupMaxConcurrentRequests and lookupPurgeTime
  contents:
  - "3.3.1  lookupMaxConcurrentRequests and lookupPurgeTime\n   The object lookupMaxConcurrentRequests\
    \ enables control of the maximum\n   number of concurrent active requests that\
    \ an agent implementation is\n   structured to support.  It is permissible for\
    \ an agent either to\n   limit the maximum upper range allowed for this object\
    \ or to implement\n   this object as read-only with an implementation limit expressed\
    \ as\n   its value.\n   The object lookupPurgeTime provides a method for entries\
    \ in the\n   lookupCtlTable and lookupResultsTable to be automatically deleted\n\
    \   after the corresponding operation completes.\n"
- title: 3.3.2  lookupCtlTable
  contents:
  - "3.3.2  lookupCtlTable\n   A remote lookup operation is initiated by performing\
    \ an SNMP SET\n   request on lookupCtlRowStatus.  A single SNMP PDU can be used\
    \ to\n   create and start a remote lookup operation.  Within the PDU,\n   lookupCtlTargetAddress\
    \ should be set to the entity to be resolved\n   (lookupCtlTargetAddressType will\
    \ default to ipv4(1)) and\n   lookupCtlRowStatus to createAndGo(4).  The object\
    \ lookupCtlOperStatus\n   can be examined to determine the state of an lookup\
    \ operation.  A\n   management application can delete an active remote lookup\
    \ request by\n   setting the corresponding lookupCtlRowStatus object to destroy(6).\n\
    \   An lookupCtlEntry is initially indexed by lookupCtlOwnerIndex, which\n   is\
    \ of type SnmpAdminString, a textual convention that allows for use\n   of the\
    \ SNMPv3 View-Based Access Control Model (RFC 2575 [11], VACM)\n   and also allows\
    \ for a management application to identify its entries.\n   The lookupCtlOwnerIndex\
    \ portion of the index is then followed by\n   lookupCtlOperationName.  The lookupCtlOperationName\
    \ index enables the\n   same lookupCtlOwnerIndex entity to have multiple outstanding\n\
    \   requests.\n   The value of lookupCtlTargetAddressType determines which lookup\n\
    \   function to perform.  Specification of dns(16) as the value of this\n   index\
    \ implies that the gethostbyname function should be performed to\n   determine\
    \ the numeric addresses associated with a symbolic name via\n   lookupResultsTable\
    \ entries.  Use of a value of either ipv4(1) or\n   ipv6(2) implies that the gethostbyaddr\
    \ function should be performed\n   to determine the symbolic name(s) associated\
    \ with a numeric address\n   at a remote host.\n"
- title: 3.3.3  lookupResultsTable
  contents:
  - "3.3.3  lookupResultsTable\n   The lookupResultsTable is used to store the results\
    \ of lookup\n   operations.  The lookupResultsTable is initially indexed by the\
    \ same\n   index elements that the lookupCtlTable contains (lookupCtlOwnerIndex\n\
    \   and lookupCtlOperationName) but has a third index element,\n   lookupResultsIndex\
    \ (Unsigned32 textual convention), in order to\n   associate multiple results\
    \ with the same lookupCtlEntry.\n   Both the gethostbyname and gethostbyaddr functions\
    \ typically return a\n   pointer to a hostent structure after being called.  The\
    \ hostent\n   structure is defined as:\n      struct hostent {\n         char\
    \  *h_name;      /* official host name       */\n         char  *h_aliases[];\
    \ /* list of other aliases    */\n         int    h_addrtype;  /* host address\
    \ type        */\n         int    h_length;    /* length of host address   */\n\
    \         char **h_addr_list; /* list of address for host */\n      };\n   The\
    \ hostent structure is listed here in order to address the fact\n   that a remote\
    \ host can be multi-homed and can have multiple symbolic\n   (DNS) names.  It\
    \ is not intended to imply that implementations of the\n   DISMAN-LOOKUP-MIB are\
    \ limited to systems where the hostent structure\n   is supported.\n   The gethostbyaddr\
    \ function is called with a host address as its\n   parameter and is used primarily\
    \ to determine a symbolic name to\n   associate with the host address.  Entries\
    \ in the lookupResultsTable\n   MUST be made for each host name returned.  The\
    \ official host name\n   MUST be assigned a lookupResultsIndex of 1.\n   The gethostbyname\
    \ function is called with a symbolic host name and is\n   used primarily to retrieve\
    \ a host address.  Normally, the first\n   h_addr_list host address is considered\
    \ to be the primary address and\n   as such is associated with the symbolic name\
    \ passed on the call.\n   Entries MUST be stored in the lookupResultsTable in\
    \ the order that\n   they are retrieved.  Values assigned to lookupResultsIndex\
    \ MUST start\n   at 1 and increase in order.\n   An implementation SHOULD NOT\
    \ retain SNMP-created entries in the\n   lookupTable across reIPLs (Initial Program\
    \ Loads) of its agent, since\n   management applications need to see consistent\
    \ behavior with respect\n   to the persistence of the table entries that they\
    \ create.\n"
- title: 4.0  Definitions
  contents:
  - '4.0  Definitions

    '
- title: 4.1  DISMAN-PING-MIB
  contents:
  - '4.1  DISMAN-PING-MIB

    '
- title: DISMAN-PING-MIB DEFINITIONS ::= BEGIN
  contents:
  - 'DISMAN-PING-MIB DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n    MODULE-IDENTITY, OBJECT-TYPE, Integer32,\n    Unsigned32, mib-2,\n\
    \    NOTIFICATION-TYPE, OBJECT-IDENTITY\n        FROM SNMPv2-SMI             \
    \     -- RFC2578\n    TEXTUAL-CONVENTION, RowStatus,\n    StorageType, DateAndTime,\
    \ TruthValue\n        FROM SNMPv2-TC                   -- RFC2579\n    MODULE-COMPLIANCE,\
    \ OBJECT-GROUP,\n    NOTIFICATION-GROUP\n        FROM SNMPv2-CONF            \
    \     -- RFC2580\n    InterfaceIndexOrZero                 -- RFC2863\n      \
    \  FROM IF-MIB\n    SnmpAdminString\n        FROM SNMP-FRAMEWORK-MIB         \
    \ -- RFC2571\n    InetAddressType, InetAddress\n        FROM INET-ADDRESS-MIB;\
    \           -- RFC2851\n pingMIB MODULE-IDENTITY\n    LAST-UPDATED \"200009210000Z\"\
    \         -- 21 September 2000\n    ORGANIZATION \"IETF Distributed Management\
    \ Working Group\"\n    CONTACT-INFO\n        \"Kenneth White\n        International\
    \ Business Machines Corporation\n        Network Computing Software Division\n\
    \        Research Triangle Park, NC, USA\n        E-mail: wkenneth@us.ibm.com\"\
    \n    DESCRIPTION\n        \"The Ping MIB (DISMAN-PING-MIB) provides the capability\
    \ of\n        controlling the use of the ping function at a remote\n        host.\"\
    \n     --  Revision history\n     REVISION     \"200009210000Z\"         -- 21\
    \ September 2000\n     DESCRIPTION\n         \"Initial version, published as RFC\
    \ 2925.\"\n    ::= { mib-2 80 }\n -- Textual Conventions\n  OperationResponseStatus\
    \ ::= TEXTUAL-CONVENTION\n    STATUS  current\n    DESCRIPTION\n        \"Used\
    \ to report the result of an operation:\n         responseReceived(1) - Operation\
    \ completes successfully.\n         unknown(2) - Operation failed due to unknown\
    \ error.\n         internalError(3) - An implementation detected an error\n  \
    \            in its own processing that caused an operation\n              to\
    \ fail.\n         requestTimedOut(4) - Operation failed to receive a\n       \
    \       valid reply within the time limit imposed on it.\n         unknownDestinationAddress(5)\
    \ - Invalid destination\n              address.\n         noRouteToTarget(6) -\
    \ Could not find a route to target.\n         interfaceInactiveToTarget(7) - The\
    \ interface to be\n              used in sending a probe is inactive without an\n\
    \              alternate route existing.\n         arpFailure(8) - Unable to resolve\
    \ a target address to a\n              media specific address.\n         maxConcurrentLimitReached(9)\
    \ - The maximum number of\n              concurrent active operations would have\
    \ been exceeded\n              if the corresponding operation was allowed.\n \
    \        unableToResolveDnsName(10) - The DNS name specified was\n           \
    \   unable to be mapped to an IP address.\n         invalidHostAddress(11) - The\
    \ IP address for a host\n              has been determined to be invalid.  Examples\
    \ of this\n              are broadcast or multicast addresses.\"\n    SYNTAX INTEGER\
    \ {\n                 responseReceived(1),\n                 unknown(2),\n   \
    \              internalError(3),\n                 requestTimedOut(4),\n     \
    \            unknownDestinationAddress(5),\n                 noRouteToTarget(6),\n\
    \                 interfaceInactiveToTarget(7),\n                 arpFailure(8),\n\
    \                 maxConcurrentLimitReached(9),\n                 unableToResolveDnsName(10),\n\
    \                 invalidHostAddress(11)\n              }\n -- Top level structure\
    \ of the MIB\n pingNotifications              OBJECT IDENTIFIER ::= { pingMIB\
    \ 0 }\n pingObjects                    OBJECT IDENTIFIER ::= { pingMIB 1 }\n pingConformance\
    \                OBJECT IDENTIFIER ::= { pingMIB 2 }\n -- The registration node\
    \ (point) for ping implementation types\n pingImplementationTypeDomains  OBJECT\
    \ IDENTIFIER ::= { pingMIB 3 }\n pingIcmpEcho OBJECT-IDENTITY\n    STATUS    \
    \  current\n    DESCRIPTION\n        \"Indicates that an implementation is using\
    \ the Internet\n        Control Message Protocol (ICMP) 'ECHO' facility.\"\n \
    \   ::= { pingImplementationTypeDomains 1 }\n pingUdpEcho OBJECT-IDENTITY\n  \
    \  STATUS      current\n    DESCRIPTION\n        \"Indicates that an implementation\
    \ is using the UDP echo\n        port (7).\"\n    REFERENCE\n        \"RFC 862,\
    \ 'Echo Protocol'.\"\n    ::= { pingImplementationTypeDomains 2 }\n pingSnmpQuery\
    \ OBJECT-IDENTITY\n    STATUS      current\n    DESCRIPTION\n        \"Indicates\
    \ that an implementation is an SNMP query to\n        calculate a round trip time.\"\
    \n    ::= { pingImplementationTypeDomains 3 }\n pingTcpConnectionAttempt OBJECT-IDENTITY\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Indicates that an implementation\
    \ is attempting to\n        connect to a TCP port in order to calculate a round\n\
    \        trip time.\"\n    ::= { pingImplementationTypeDomains 4 }\n -- Simple\
    \ Object Definitions\n pingMaxConcurrentRequests OBJECT-TYPE\n    SYNTAX     \
    \ Unsigned32\n    UNITS       \"requests\"\n    MAX-ACCESS  read-write\n    STATUS\
    \      current\n    DESCRIPTION\n       \"The maximum number of concurrent active\
    \ ping requests\n       that are allowed within an agent implementation.  A value\n\
    \       of 0 for this object implies that there is no limit for\n       the number\
    \ of concurrent active requests in effect.\"\n    DEFVAL { 10 }\n    ::= { pingObjects\
    \ 1 }\n -- Ping Control Table\n pingCtlTable OBJECT-TYPE\n    SYNTAX      SEQUENCE\
    \ OF PingCtlEntry\n    MAX-ACCESS  not-accessible\n    STATUS      current\n \
    \   DESCRIPTION\n        \"Defines the ping Control Table for providing, via SNMP,\n\
    \        the capability of performing ping operations at\n        a remote host.\
    \  The results of these operations are\n        stored in the pingResultsTable\
    \ and the\n        pingProbeHistoryTable.\"\n   ::= { pingObjects 2 }\n pingCtlEntry\
    \ OBJECT-TYPE\n    SYNTAX      PingCtlEntry\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Defines an entry in the pingCtlTable.\
    \  The first index\n        element, pingCtlOwnerIndex, is of type SnmpAdminString,\n\
    \        a textual convention that allows for use of the SNMPv3\n        View-Based\
    \ Access Control Model (RFC 2575 [11], VACM)\n        and allows an management\
    \ application to identify its\n        entries.  The second index, pingCtlTestName\
    \ (also an\n        SnmpAdminString), enables the same management\n        application\
    \ to have multiple outstanding requests.\"\n    INDEX {\n             pingCtlOwnerIndex,\n\
    \             pingCtlTestName\n          }\n    ::= { pingCtlTable 1 }\n PingCtlEntry\
    \ ::=\n    SEQUENCE {\n        pingCtlOwnerIndex             SnmpAdminString,\n\
    \        pingCtlTestName               SnmpAdminString,\n        pingCtlTargetAddressType\
    \      InetAddressType,\n        pingCtlTargetAddress          InetAddress,\n\
    \        pingCtlDataSize               Unsigned32,\n        pingCtlTimeOut   \
    \             Unsigned32,\n        pingCtlProbeCount             Unsigned32,\n\
    \        pingCtlAdminStatus            INTEGER,\n        pingCtlDataFill     \
    \          OCTET STRING,\n        pingCtlFrequency              Unsigned32,\n\
    \        pingCtlMaxRows                Unsigned32,\n        pingCtlStorageType\
    \            StorageType,\n        pingCtlTrapGeneration         BITS,\n     \
    \   pingCtlTrapProbeFailureFilter Unsigned32,\n        pingCtlTrapTestFailureFilter\
    \  Unsigned32,\n        pingCtlType                   OBJECT IDENTIFIER,\n   \
    \     pingCtlDescr                  SnmpAdminString,\n        pingCtlSourceAddressType\
    \      InetAddressType,\n        pingCtlSourceAddress          InetAddress,\n\
    \        pingCtlIfIndex                InterfaceIndexOrZero,\n        pingCtlByPassRouteTable\
    \       TruthValue,\n        pingCtlDSField                Unsigned32,\n     \
    \   pingCtlRowStatus              RowStatus\n    }\n pingCtlOwnerIndex OBJECT-TYPE\n\
    \    SYNTAX      SnmpAdminString (SIZE(0..32))\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n       \"To facilitate the provisioning\
    \ of access control by a\n       security administrator using the View-Based Access\n\
    \       Control Model (RFC 2575, VACM) for tables in which\n       multiple users\
    \ may need to independently create or\n       modify entries, the initial index\
    \ is used as an 'owner\n       index'.  Such an initial index has a syntax of\n\
    \       SnmpAdminString, and can thus be trivially mapped to a\n       securityName\
    \ or groupName as defined in VACM, in\n       accordance with a security policy.\n\
    \       When used in conjunction with such a security policy all\n       entries\
    \ in the table belonging to a particular user (or\n       group) will have the\
    \ same value for this initial index.\n       For a given user's entries in a particular\
    \ table, the\n       object identifiers for the information in these entries\n\
    \       will have the same subidentifiers (except for the 'column'\n       subidentifier)\
    \ up to the end of the encoded owner index.\n       To configure VACM to permit\
    \ access to this portion of the\n       table, one would create vacmViewTreeFamilyTable\
    \ entries\n       with the value of vacmViewTreeFamilySubtree including\n    \
    \   the owner index portion, and vacmViewTreeFamilyMask\n       'wildcarding'\
    \ the column subidentifier.  More elaborate\n       configurations are possible.\"\
    \n    ::= { pingCtlEntry 1 }\n pingCtlTestName OBJECT-TYPE\n    SYNTAX      SnmpAdminString\
    \ (SIZE(0..32))\n    MAX-ACCESS  not-accessible\n    STATUS      current\n   \
    \ DESCRIPTION\n        \"The name of the ping test.  This is locally unique, within\n\
    \        the scope of an pingCtlOwnerIndex.\"\n    ::= { pingCtlEntry 2 }\n pingCtlTargetAddressType\
    \ OBJECT-TYPE\n    SYNTAX      InetAddressType\n    MAX-ACCESS  read-create\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Specifies the type of host\
    \ address to be used at a remote\n        host for performing a ping operation.\"\
    \n    DEFVAL { unknown }\n    ::= { pingCtlEntry 3 }\n pingCtlTargetAddress OBJECT-TYPE\n\
    \    SYNTAX      InetAddress\n    MAX-ACCESS  read-create\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Specifies the host address to be used at a remote\
    \ host for\n        performing a ping operation.  The host address type is\n \
    \       determined by the object value of corresponding\n        pingCtlTargetAddressType.\n\
    \        A value for this object MUST be set prior to transitioning\n        its\
    \ corresponding pingCtlEntry to active(1) via\n        pingCtlRowStatus.\"\n \
    \   DEFVAL { ''H }\n    ::= { pingCtlEntry 4 }\n pingCtlDataSize OBJECT-TYPE\n\
    \    SYNTAX      Unsigned32 (0..65507)\n    UNITS       \"octets\"\n    MAX-ACCESS\
    \  read-create\n    STATUS      current\n    DESCRIPTION\n        \"Specifies\
    \ the size of the data portion to be\n        transmitted in a ping operation\
    \ in octets.  A ping\n        request is usually an ICMP message encoded\n   \
    \     into an IP packet.  An IP packet has a maximum size\n        of 65535 octets.\
    \  Subtracting the size of the ICMP\n        or UDP header (both 8 octets) and\
    \ the size of the IP\n        header (20 octets) yields a maximum size of 65507\n\
    \        octets.\"\n    DEFVAL { 0 }\n    ::= { pingCtlEntry 5 }\n pingCtlTimeOut\
    \ OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..60)\n    UNITS       \"seconds\"\
    \n    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n    \
    \    \"Specifies the time-out value, in seconds, for a\n        remote ping operation.\"\
    \n    DEFVAL { 3 }\n    ::= { pingCtlEntry 6 }\n pingCtlProbeCount OBJECT-TYPE\n\
    \    SYNTAX      Unsigned32 (1..15)\n    UNITS       \"probes\"\n    MAX-ACCESS\
    \  read-create\n    STATUS      current\n    DESCRIPTION\n        \"Specifies\
    \ the number of times to perform a ping\n        operation at a remote host.\"\
    \n    DEFVAL { 1 }\n    ::= { pingCtlEntry 7 }\n pingCtlAdminStatus OBJECT-TYPE\n\
    \    SYNTAX      INTEGER {\n                          enabled(1), -- test should\
    \ be started\n                          disabled(2) -- test should be stopped\n\
    \                        }\n    MAX-ACCESS  read-create\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Reflects the desired state that a pingCtlEntry should\
    \ be\n        in:\n           enabled(1)  - Attempt to activate the test as defined\
    \ by\n                         this pingCtlEntry.\n           disabled(2) - Deactivate\
    \ the test as defined by this\n                         pingCtlEntry.\n      \
    \  Refer to the corresponding pingResultsOperStatus to\n        determine the\
    \ operational state of the test defined by\n        this entry.\"\n     DEFVAL\
    \ { disabled }\n    ::= { pingCtlEntry 8 }\n pingCtlDataFill  OBJECT-TYPE\n  \
    \  SYNTAX      OCTET STRING (SIZE(0..1024))\n    MAX-ACCESS  read-create\n   \
    \ STATUS      current\n    DESCRIPTION\n        \"The content of this object is\
    \ used together with the\n        corresponding pingCtlDataSize value to determine\
    \ how to\n        fill the data portion of a probe packet.  The option of\n  \
    \      selecting a data fill pattern can be useful when links\n        are compressed\
    \ or have data pattern sensitivities. The\n        contents of pingCtlDataFill\
    \ should be repeated in a ping\n        packet when the size of the data portion\
    \ of the ping\n        packet is greater than the size of pingCtlDataFill.\"\n\
    \    DEFVAL { '00'H }\n    ::= { pingCtlEntry 9 }\n pingCtlFrequency  OBJECT-TYPE\n\
    \    SYNTAX      Unsigned32\n    UNITS       \"seconds\"\n    MAX-ACCESS  read-create\n\
    \    STATUS      current\n    DESCRIPTION\n        \"The number of seconds to\
    \ wait before repeating a ping test\n        as defined by the value of the various\
    \ objects in the\n        corresponding row.\n        A single ping test consists\
    \ of a series of ping probes.\n        The number of probes is determined by the\
    \ value of the\n        corresponding pingCtlProbeCount object.  After a single\n\
    \        test completes the number of seconds as defined by the\n        value\
    \ of pingCtlFrequency MUST elapse before the\n        next ping test is started.\n\
    \        A value of 0 for this object implies that the test\n        as defined\
    \ by the corresponding entry will not be\n        repeated.\"\n    DEFVAL { 0\
    \ }\n    ::= { pingCtlEntry 10 }\n pingCtlMaxRows OBJECT-TYPE\n    SYNTAX    \
    \  Unsigned32\n    UNITS       \"rows\"\n    MAX-ACCESS  read-create\n    STATUS\
    \      current\n    DESCRIPTION\n        \"The maximum number of entries allowed\
    \ in the\n        pingProbeHistoryTable.  An implementation of this\n        MIB\
    \ will remove the oldest entry in the\n        pingProbeHistoryTable to allow\
    \ the addition of an\n        new entry once the number of rows in the\n     \
    \   pingProbeHistoryTable reaches this value.\n        Old entries are not removed\
    \ when a new test is\n        started.  Entries are added to the pingProbeHistoryTable\n\
    \        until pingCtlMaxRows is reached before entries begin to\n        be removed.\n\
    \        A value of 0 for this object disables creation of\n        pingProbeHistoryTable\
    \ entries.\"\n    DEFVAL      { 50 }\n    ::= { pingCtlEntry 11 }\n pingCtlStorageType\
    \ OBJECT-TYPE\n    SYNTAX      StorageType\n    MAX-ACCESS  read-create\n    STATUS\
    \      current\n    DESCRIPTION\n        \"The storage type for this conceptual\
    \ row.\n        Conceptual rows having the value 'permanent' need not\n      \
    \  allow write-access to any columnar objects in the row.\"\n    DEFVAL { nonVolatile\
    \ }\n    ::= { pingCtlEntry 12 }\n pingCtlTrapGeneration OBJECT-TYPE\n    SYNTAX\
    \      BITS {\n                   probeFailure(0),\n                   testFailure(1),\n\
    \                   testCompletion(2)\n                  }\n    MAX-ACCESS  read-create\n\
    \    STATUS      current\n    DESCRIPTION\n        \"The value of this object\
    \ determines when and if\n        to generate a notification for this entry:\n\
    \        probeFailure(0)   - Generate a pingProbeFailed\n            notification\
    \ subject to the value of\n            pingCtlTrapProbeFailureFilter.  The object\n\
    \            pingCtlTrapProbeFailureFilter can be used\n            to specify\
    \ the number of successive probe failures\n            that are required before\
    \ a pingProbeFailed\n            notification can be generated.\n        testFailure(1)\
    \    - Generate a pingTestFailed\n            notification. In this instance the\
    \ object\n            pingCtlTrapTestFailureFilter can be used to\n          \
    \  determine the number of probe failures that\n            signal when a test\
    \ fails.\n        testCompletion(2) - Generate a pingTestCompleted\n         \
    \   notification.\n        The value of this object defaults to zero, indicating\n\
    \        that none of the above options have been selected.\"\n    ::= { pingCtlEntry\
    \ 13 }\n pingCtlTrapProbeFailureFilter OBJECT-TYPE\n    SYNTAX      Unsigned32\
    \ (0..15)\n    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n\
    \        \"The value of this object is used to determine when\n        to generate\
    \ a pingProbeFailed NOTIFICATION.\n        Setting pingCtlTrapGeneration\n   \
    \     to probeFailure(0) implies that a pingProbeFailed\n        NOTIFICATION\
    \ is generated only when the number of\n        successive probe failures as indicated\
    \ by the\n        value of pingCtlTrapPrbefailureFilter fail within\n        a\
    \ given ping test.\"\n    DEFVAL { 1 }\n    ::= { pingCtlEntry 14 }\n pingCtlTrapTestFailureFilter\
    \ OBJECT-TYPE\n    SYNTAX      Unsigned32 (0..15)\n    MAX-ACCESS  read-create\n\
    \    STATUS      current\n    DESCRIPTION\n        \"The value of this object\
    \ is used to determine when\n        to generate a pingTestFailed NOTIFICATION.\n\
    \        Setting pingCtlTrapGeneration to testFailure(1)\n        implies that\
    \ a pingTestFailed NOTIFICATION is\n        generated only when the number of\
    \ ping failures\n        within a test exceed the value of\n        pingCtlTrapTestFailureFilter.\"\
    \n    DEFVAL { 1 }\n    ::= { pingCtlEntry 15 }\n pingCtlType OBJECT-TYPE\n  \
    \  SYNTAX      OBJECT IDENTIFIER\n    MAX-ACCESS  read-create\n    STATUS    \
    \  current\n    DESCRIPTION\n        \"The value of this object is used to either\
    \ report or\n        select the implementation method to be used for\n       \
    \ calculating a ping response time.  The value of this\n        object MAY be\
    \ selected from pingImplementationTypeDomains.\n        Additional implementation\
    \ types SHOULD be allocated as\n        required by implementers of the DISMAN-PING-MIB\
    \ under\n        their enterprise specific registration point and not\n      \
    \  beneath pingImplementationTypeDomains.\"\n    DEFVAL { pingIcmpEcho }\n   \
    \ ::= { pingCtlEntry 16 }\n pingCtlDescr OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n\
    \    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n     \
    \   \"The purpose of this object is to provide a\n        descriptive name of\
    \ the remote ping test.\"\n    DEFVAL { '00'H }\n    ::= { pingCtlEntry 17 }\n\
    \ pingCtlSourceAddressType OBJECT-TYPE\n    SYNTAX      InetAddressType\n    MAX-ACCESS\
    \  read-create\n    STATUS      current\n    DESCRIPTION\n        \"Specifies\
    \ the type of the source address,\n        pingCtlSourceAddress, to be used at\
    \ a remote host\n        when performing a ping operation.\"\n    DEFVAL { ipv4\
    \ }\n    ::= { pingCtlEntry 18 }\n  pingCtlSourceAddress OBJECT-TYPE\n    SYNTAX\
    \      InetAddress\n    MAX-ACCESS  read-create\n    STATUS      current\n   \
    \ DESCRIPTION\n        \"Use the specified IP address (which must be given\n \
    \       in numeric form, not as a hostname) as the source\n        address in\
    \ outgoing probe packets.  On hosts with\n        more than one IP address, this\
    \ option can be used\n        to force the source address to be something other\n\
    \        than the primary IP address of the interface the\n        probe packet\
    \ is sent on.  If the IP address is not\n        one of this machine's interface\
    \ addresses, an error\n        is returned and nothing is sent.  A zero length\n\
    \        octet string value for this object disables source\n        address specification.\n\
    \        The address type (InetAddressType) that relates to\n        this object\
    \ is specified by the corresponding value\n        of pingCtlSourceAddressType.\"\
    \n    DEFVAL { ''H }\n    ::= { pingCtlEntry 19 }\n pingCtlIfIndex OBJECT-TYPE\n\
    \    SYNTAX      InterfaceIndexOrZero\n    MAX-ACCESS  read-create\n    STATUS\
    \      current\n    DESCRIPTION\n        \"Setting this object to an interface's\
    \ ifIndex prior\n        to starting a remote ping operation directs\n       \
    \ the ping probes to be transmitted over the\n        specified interface.  A\
    \ value of zero for this object\n        means that this option is not enabled.\"\
    \n    DEFVAL { 0 }\n    ::= { pingCtlEntry 20 }\n pingCtlByPassRouteTable OBJECT-TYPE\n\
    \    SYNTAX TruthValue\n    MAX-ACCESS  read-create\n    STATUS      current\n\
    \    DESCRIPTION\n       \"The purpose of this object is to optionally enable\n\
    \       bypassing the route table.  If enabled, the remote\n       host will bypass\
    \ the normal routing tables and send\n       directly to a host on an attached\
    \ network.  If the\n       host is not on a directly-attached network, an\n  \
    \     error is returned.  This option can be used to perform\n       the ping\
    \ operation to a local host through an\n       interface that has no route defined\
    \ (e.g., after the\n       interface was dropped by routed).\"\n    DEFVAL { false\
    \ }\n    ::= { pingCtlEntry 21 }\n pingCtlDSField OBJECT-TYPE\n    SYNTAX    \
    \  Unsigned32 (0..255)\n    MAX-ACCESS  read-create\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Specifies the value to store in the Differentiated\n\
    \        Services (DS) Field in the IP packet used to\n        encapsulate the\
    \ ping probe.  The DS Field is defined\n        as the Type of Service (TOS) octet\
    \ in a IPv4 header\n        or as the Traffic Class octet in a IPv6 header.\n\
    \        The value of this object must be a decimal integer\n        in the range\
    \ from 0 to 255.  This option can be used\n        to determine what effect an\
    \ explicit DS Field setting\n        has on a ping response.  Not all values are\
    \ legal or\n        meaningful.  A value of 0 means that the function\n     represented\
    \ by this option is not supported.  DS Field\n     usage is often not supported\
    \ by IP implementations and\n     not all values are supported.  Refer to RFC\
    \ 2474 for\n     guidance on usage of this field.\"\n    REFERENCE\n        \"\
    Refer to RFC 2474 for the definition of the\n        Differentiated Services Field\
    \ and to RFC 1812\n        Section 5.3.2 for Type of Service (TOS).\"\n    DEFVAL\
    \ { 0 }\n    ::= { pingCtlEntry 22 }\n pingCtlRowStatus OBJECT-TYPE\n    SYNTAX\
    \      RowStatus\n    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n\
    \        \"This object allows entries to be created and deleted\n        in the\
    \ pingCtlTable.  Deletion of an entry in this\n        table results in all corresponding\
    \ (same\n        pingCtlOwnerIndex and pingCtlTestName index values)\n       \
    \ pingResultsTable and pingProbeHistoryTable entries\n        being deleted.\n\
    \        A value MUST be specified for pingCtlTargetAddress\n        prior to\
    \ a transition to active(1) state being\n        accepted.\n        Activation\
    \ of a remote ping operation is controlled\n        via pingCtlAdminStatus and\
    \ not by changing\n        this object's value to active(1).\n        Transitions\
    \ in and out of active(1) state are not\n        allowed while an entry's pingResultsOperStatus\
    \ is\n        active(1) with the exception that deletion of\n        an entry\
    \ in this table by setting its RowStatus\n        object to destroy(6) will stop\
    \ an active\n        ping operation.\n        The operational state of a ping\
    \ operation\n        can be determined by examination of its\n        pingResultsOperStatus\
    \ object.\"\n    REFERENCE\n        \"See definition of RowStatus in RFC 2579,\
    \ 'Textual\n        Conventions for SMIv2.'\"\n    ::= { pingCtlEntry 23 }\n"
- title: -- Ping Results Table
  contents:
  - "-- Ping Results Table\n pingResultsTable OBJECT-TYPE\n    SYNTAX      SEQUENCE\
    \ OF PingResultsEntry\n    MAX-ACCESS  not-accessible\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Defines the Ping Results Table for providing\n   \
    \     the capability of performing ping operations at\n        a remote host.\
    \  The results of these operations are\n        stored in the pingResultsTable\
    \ and the pingPastProbeTable.\n        An entry is added to the pingResultsTable\
    \ when an\n        pingCtlEntry is started by successful transition\n        of\
    \ its pingCtlAdminStatus object to enabled(1).\n        An entry is removed from\
    \ the pingResultsTable when\n        its corresponding pingCtlEntry is deleted.\"\
    \n   ::= { pingObjects 3 }\n pingResultsEntry OBJECT-TYPE\n    SYNTAX      PingResultsEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"Defines an entry in the pingResultsTable.  The\n        pingResultsTable\
    \ has the same indexing as the\n        pingCtlTable in order for a pingResultsEntry\
    \ to\n        correspond to the pingCtlEntry that caused it to\n        be created.\"\
    \n    INDEX {\n             pingCtlOwnerIndex,\n             pingCtlTestName\n\
    \          }\n    ::= { pingResultsTable 1 }\n PingResultsEntry ::=\n    SEQUENCE\
    \ {\n        pingResultsOperStatus          INTEGER,\n        pingResultsIpTargetAddressType\
    \ InetAddressType,\n        pingResultsIpTargetAddress     InetAddress,\n    \
    \    pingResultsMinRtt              Unsigned32,\n        pingResultsMaxRtt   \
    \           Unsigned32,\n        pingResultsAverageRtt          Unsigned32,\n\
    \        pingResultsProbeResponses      Unsigned32,\n        pingResultsSentProbes\
    \          Unsigned32,\n        pingResultsRttSumOfSquares     Unsigned32,\n \
    \       pingResultsLastGoodProbe       DateAndTime\n     }\n pingResultsOperStatus\
    \ OBJECT-TYPE\n    SYNTAX      INTEGER {\n                          enabled(1),\
    \  -- test is in progress\n                          disabled(2)  -- test has\
    \ stopped\n                        }\n    MAX-ACCESS  read-only\n    STATUS  \
    \    current\n    DESCRIPTION\n        \"Reflects the operational state of a pingCtlEntry:\n\
    \           enabled(1)   - Test is active.\n           disabled(2)  - Test has\
    \ stopped.\"\n    ::= { pingResultsEntry 1 }\n pingResultsIpTargetAddressType\
    \ OBJECT-TYPE\n    SYNTAX      InetAddressType\n    MAX-ACCESS  read-only\n  \
    \  STATUS      current\n    DESCRIPTION\n        \"This objects indicates the\
    \ type of address stored\n        in the corresponding pingResultsIpTargetAddress\n\
    \        object.\"\n    DEFVAL { unknown }\n    ::= { pingResultsEntry 2 }\n pingResultsIpTargetAddress\
    \ OBJECT-TYPE\n    SYNTAX      InetAddress\n    MAX-ACCESS  read-only\n    STATUS\
    \      current\n    DESCRIPTION\n        \"This objects reports the IP address\
    \ associated\n        with a pingCtlTargetAddress value when the destination\n\
    \        address is specified as a DNS name.  The value of\n        this object\
    \ should be a zero length octet string\n        when a DNS name is not specified\
    \ or when a\n        specified DNS name fails to resolve.\"\n    DEFVAL { ''H\
    \ }\n    ::= { pingResultsEntry 3 }\n pingResultsMinRtt OBJECT-TYPE\n    SYNTAX\
    \      Unsigned32\n    UNITS       \"milliseconds\"\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n        \"The minimum ping round-trip-time\
    \ (RTT) received.  A value\n        of 0 for this object implies that no RTT has\
    \ been received.\"\n    ::= { pingResultsEntry 4 }\n pingResultsMaxRtt OBJECT-TYPE\n\
    \    SYNTAX      Unsigned32\n    UNITS       \"milliseconds\"\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n        \"The maximum\
    \ ping round-trip-time (RTT) received.  A value\n        of 0 for this object\
    \ implies that no RTT has been received.\"\n    ::= { pingResultsEntry 5 }\n \
    \ pingResultsAverageRtt OBJECT-TYPE\n    SYNTAX      Unsigned32\n    UNITS   \
    \    \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n  \
    \  DESCRIPTION\n        \"The current average ping round-trip-time (RTT).\"\n\
    \    ::= { pingResultsEntry 6 }\n  pingResultsProbeResponses OBJECT-TYPE\n   \
    \ SYNTAX      Unsigned32\n    UNITS       \"responses\"\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Number of responses received\
    \ for the corresponding\n        pingCtlEntry and pingResultsEntry.  The value\
    \ of this object\n        MUST be reported as 0 when no probe responses have been\n\
    \        received.\"\n    ::= { pingResultsEntry 7 }\n  pingResultsSentProbes\
    \ OBJECT-TYPE\n    SYNTAX      Unsigned32\n    UNITS       \"probes\"\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n        \"The value of\
    \ this object reflects the number of probes sent\n        for the corresponding\
    \ pingCtlEntry and pingResultsEntry.\n        The value of this object MUST be\
    \ reported as 0 when no probes\n        have been sent.\"\n    ::= { pingResultsEntry\
    \ 8 }\n  pingResultsRttSumOfSquares OBJECT-TYPE\n    SYNTAX      Unsigned32\n\
    \    UNITS       \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS     \
    \ current\n    DESCRIPTION\n        \"This object contains the sum of the squares\
    \ for all ping\n        responses received.  Its purpose is to enable standard\n\
    \        deviation calculation.  The value of this object MUST\n        be reported\
    \ as 0 when no ping responses have been\n        received.\"\n    ::= { pingResultsEntry\
    \ 9 }\n pingResultsLastGoodProbe OBJECT-TYPE\n    SYNTAX      DateAndTime\n  \
    \  MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n        \"\
    Date and time when the last response was received for\n        a probe.\"\n  \
    \  ::= { pingResultsEntry 10 }\n -- Ping Probe History Table\n pingProbeHistoryTable\
    \ OBJECT-TYPE\n    SYNTAX      SEQUENCE OF PingProbeHistoryEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"Defines\
    \ a table for storing the results of a ping\n        operation.  Entries in this\
    \ table are limited by\n        the value of the corresponding pingCtlMaxRows\n\
    \        object.\n        An entry in this table is created when the result of\n\
    \        a ping probe is determined.  The initial 2 instance\n        identifier\
    \ index values identify the pingCtlEntry\n        that a probe result (pingProbeHistoryEntry)\
    \ belongs\n        to.  An entry is removed from this table when\n        its\
    \ corresponding pingCtlEntry is deleted.\n        An implementation of this MIB\
    \ will remove the oldest\n        entry in the pingProbeHistoryTable to allow\
    \ the\n        addition of an new entry once the number of rows in\n        the\
    \ pingProbeHistoryTable reaches the value specified\n        by pingCtlMaxRows.\"\
    \n   ::= { pingObjects 4 }\n pingProbeHistoryEntry OBJECT-TYPE\n    SYNTAX   \
    \   PingProbeHistoryEntry\n    MAX-ACCESS  not-accessible\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Defines an entry in the pingProbeHistoryTable.\n \
    \       The first two index elements identify the\n        pingCtlEntry that a\
    \ pingProbeHistoryEntry belongs\n        to.  The third index element selects\
    \ a single\n        probe result.\"\n    INDEX {\n             pingCtlOwnerIndex,\n\
    \             pingCtlTestName,\n             pingProbeHistoryIndex\n         \
    \  }\n    ::= { pingProbeHistoryTable 1 }\n PingProbeHistoryEntry ::=\n    SEQUENCE\
    \ {\n        pingProbeHistoryIndex         Unsigned32,\n        pingProbeHistoryResponse\
    \      Unsigned32,\n        pingProbeHistoryStatus        OperationResponseStatus,\n\
    \        pingProbeHistoryLastRC        Integer32,\n        pingProbeHistoryTime\
    \          DateAndTime\n    }\n pingProbeHistoryIndex OBJECT-TYPE\n    SYNTAX\
    \      Unsigned32 (1..'ffffffff'h)\n    MAX-ACCESS  not-accessible\n    STATUS\
    \      current\n    DESCRIPTION\n        \"An entry in this table is created when\
    \ the result of\n        a ping probe is determined.  The initial 2 instance\n\
    \        identifier index values identify the pingCtlEntry\n        that a probe\
    \ result (pingProbeHistoryEntry) belongs\n        to.\n        An implementation\
    \ MUST start assigning\n        pingProbeHistoryIndex values at 1 and wrap after\n\
    \        exceeding the maximum possible value as defined by\n        the limit\
    \ of this object ('ffffffff'h).\"\n    ::= { pingProbeHistoryEntry 1 }\n pingProbeHistoryResponse\
    \ OBJECT-TYPE\n    SYNTAX      Unsigned32\n    UNITS       \"milliseconds\"\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"The amount of time measured in milliseconds from when\n        a probe was\
    \ sent to when its response was received or\n        when it timed out.  The value\
    \ of this object is reported\n        as 0 when it is not possible to transmit\
    \ a probe.\"\n    ::= { pingProbeHistoryEntry 2 }\n pingProbeHistoryStatus OBJECT-TYPE\n\
    \    SYNTAX      OperationResponseStatus\n    MAX-ACCESS  read-only\n    STATUS\
    \      current\n    DESCRIPTION\n        \"The result of a particular probe done\
    \ by a remote host.\"\n    ::= { pingProbeHistoryEntry 3 }\n pingProbeHistoryLastRC\
    \        OBJECT-TYPE\n    SYNTAX      Integer32\n    MAX-ACCESS  read-only\n \
    \   STATUS      current\n    DESCRIPTION\n        \"The last implementation method\
    \ specific reply code received.\n        If the ICMP Echo capability is being\
    \ used then a successful\n        probe ends when an ICMP response is received\
    \ that contains\n        the code ICMP_ECHOREPLY(0).  The ICMP responses are defined\n\
    \        normally in the ip_icmp include file.\"\n    ::= { pingProbeHistoryEntry\
    \ 4 }\n pingProbeHistoryTime OBJECT-TYPE\n    SYNTAX      DateAndTime\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n        \"Timestamp for\
    \ when this probe result was determined.\"\n    ::= { pingProbeHistoryEntry 5\
    \ }\n -- Notification Definition section\n pingProbeFailed NOTIFICATION-TYPE\n\
    \      OBJECTS {\n        pingCtlTargetAddressType,\n        pingCtlTargetAddress,\n\
    \        pingResultsOperStatus,\n        pingResultsIpTargetAddressType,\n   \
    \     pingResultsIpTargetAddress,\n        pingResultsMinRtt,\n        pingResultsMaxRtt,\n\
    \        pingResultsAverageRtt,\n        pingResultsProbeResponses,\n        pingResultsSentProbes,\n\
    \        pingResultsRttSumOfSquares,\n        pingResultsLastGoodProbe\n     \
    \ }\n      STATUS  current\n      DESCRIPTION\n          \"Generated when a probe\
    \ failure is detected when the\n          corresponding pingCtlTrapGeneration\
    \ object is set to\n          probeFailure(0) subject to the value of\n      \
    \    pingCtlTrapProbeFailureFilter.  The object\n          pingCtlTrapProbeFailureFilter\
    \ can be used to specify the\n          number of successive probe failures that\
    \ are required\n          before this notification can be generated.\"\n     \
    \ ::= { pingNotifications 1 }\n pingTestFailed NOTIFICATION-TYPE\n      OBJECTS\
    \ {\n        pingCtlTargetAddressType,\n        pingCtlTargetAddress,\n      \
    \  pingResultsOperStatus,\n        pingResultsIpTargetAddressType,\n        pingResultsIpTargetAddress,\n\
    \        pingResultsMinRtt,\n        pingResultsMaxRtt,\n        pingResultsAverageRtt,\n\
    \        pingResultsProbeResponses,\n        pingResultsSentProbes,\n        pingResultsRttSumOfSquares,\n\
    \        pingResultsLastGoodProbe\n      }\n      STATUS  current\n      DESCRIPTION\n\
    \          \"Generated when a ping test is determined to have failed\n       \
    \   when the corresponding pingCtlTrapGeneration object is\n          set to testFailure(1).\
    \  In this instance\n          pingCtlTrapTestFailureFilter should specify the\
    \ number of\n          probes in a test required to have failed in order to\n\
    \          consider the test as failed.\"\n      ::= { pingNotifications 2 }\n\
    \ pingTestCompleted NOTIFICATION-TYPE\n      OBJECTS {\n        pingCtlTargetAddressType,\n\
    \        pingCtlTargetAddress,\n        pingResultsOperStatus,\n        pingResultsIpTargetAddressType,\n\
    \        pingResultsIpTargetAddress,\n        pingResultsMinRtt,\n        pingResultsMaxRtt,\n\
    \        pingResultsAverageRtt,\n        pingResultsProbeResponses,\n        pingResultsSentProbes,\n\
    \        pingResultsRttSumOfSquares,\n        pingResultsLastGoodProbe\n     \
    \ }\n      STATUS  current\n      DESCRIPTION\n          \"Generated at the completion\
    \ of a ping test when the\n          corresponding pingCtlTrapGeneration object\
    \ is set to\n          testCompletion(4).\"\n      ::= { pingNotifications 3 }\n\
    \ -- Conformance information\n -- Compliance statements\n pingCompliances OBJECT\
    \ IDENTIFIER ::= { pingConformance 1 }\n pingGroups      OBJECT IDENTIFIER ::=\
    \ { pingConformance 2 }\n -- Compliance statements\n pingCompliance MODULE-COMPLIANCE\n\
    \    STATUS  current\n    DESCRIPTION\n            \"The compliance statement\
    \ for the DISMAN-PING-MIB.\"\n    MODULE  -- this module\n        MANDATORY-GROUPS\
    \ {\n                            pingGroup,\n                            pingNotificationsGroup\n\
    \                          }\n        GROUP pingTimeStampGroup\n        DESCRIPTION\n\
    \            \"This group is mandatory for implementations that have\n       \
    \     access to a system clock and are capable of setting\n            the values\
    \ for DateAndTime objects.  It is RECOMMENDED\n            that when this group\
    \ is not supported that the values\n            for the objects in this group\
    \ be reported as\n            '0000000000000000'H.\"\n        OBJECT pingMaxConcurrentRequests\n\
    \        MIN-ACCESS  read-only\n        DESCRIPTION\n            \"The agent is\
    \ not required to support set\n            operations to this object.\"\n    \
    \    OBJECT pingCtlStorageType\n        MIN-ACCESS  read-only\n        DESCRIPTION\n\
    \            \"Write access is not required.  It is also allowed\n           \
    \ for implementations to support only the volatile\n            StorageType enumeration.\"\
    \n        OBJECT pingCtlType\n        MIN-ACCESS  read-only\n        DESCRIPTION\n\
    \            \"Write access is not required.  In addition, the only\n        \
    \    value that MUST be supported by an implementation is\n            pingIcmpEcho.\"\
    \n        OBJECT pingCtlByPassRouteTable\n        MIN-ACCESS  read-only\n    \
    \    DESCRIPTION\n            \"This object is not required by implementations\
    \ that\n            are not capable of its implementation.  The function\n   \
    \         represented by this object is implementable if the\n            setsockopt\
    \ SOL_SOCKET SO_DONTROUTE option is\n            supported.\"\n        OBJECT\
    \ pingCtlSourceAddressType\n        SYNTAX  InetAddressType { unknown(0), ipv4(1),\
    \ ipv6(2) }\n        MIN-ACCESS  read-only\n        DESCRIPTION\n            \"\
    This object is not required by implementations that\n            are not capable\
    \ of binding the send socket with a\n            source address. An implementation\
    \ is only required to\n            support IPv4 and IPv6 addresses.\"\n      \
    \  OBJECT pingCtlSourceAddress\n        SYNTAX  InetAddress (SIZE(0|4|16))\n \
    \       MIN-ACCESS  read-only\n        DESCRIPTION\n            \"This object\
    \ is not required by implementations that\n            are not capable of binding\
    \ the send socket with a\n            source address. An implementation is only\
    \ required to\n            support IPv4 and globally unique IPv6 addresses.\"\n\
    \        OBJECT pingCtlIfIndex\n        MIN-ACCESS  read-only\n        DESCRIPTION\n\
    \            \"Write access is not required.   When write access is\n        \
    \    not supported return a 0 as the value of this object.\n            A value\
    \ of 0 means that the function represented by\n            this option is not\
    \ supported.\"\n        OBJECT pingCtlDSField\n        MIN-ACCESS  read-only\n\
    \        DESCRIPTION\n            \"Write access is not required.   When write\
    \ access is\n            not supported return a 0 as the value of this object.\n\
    \            A value of 0 means that the function represented by\n           \
    \ this option is not supported.\"\n        OBJECT pingResultsIpTargetAddressType\n\
    \        SYNTAX  InetAddressType { unknown(0), ipv4(1), ipv6(2) }\n        DESCRIPTION\n\
    \            \"An implementation is only required to\n            support IPv4\
    \ and IPv6 addresses.\"\n        OBJECT pingResultsIpTargetAddress\n        SYNTAX\
    \  InetAddress (SIZE(0|4|16))\n        DESCRIPTION\n            \"An implementation\
    \ is only required to\n            support IPv4 and globally unique IPv6 addresses.\"\
    \n    ::= { pingCompliances 1 }\n -- MIB groupings\n pingGroup OBJECT-GROUP\n\
    \   OBJECTS {\n             pingMaxConcurrentRequests,\n             pingCtlTargetAddressType,\n\
    \             pingCtlTargetAddress,\n             pingCtlDataSize,\n         \
    \    pingCtlTimeOut,\n             pingCtlProbeCount,\n             pingCtlAdminStatus,\n\
    \             pingCtlDataFill,\n             pingCtlFrequency,\n             pingCtlMaxRows,\n\
    \             pingCtlStorageType,\n             pingCtlTrapGeneration,\n     \
    \        pingCtlTrapProbeFailureFilter,\n             pingCtlTrapTestFailureFilter,\n\
    \             pingCtlType,\n             pingCtlDescr,\n             pingCtlByPassRouteTable,\n\
    \             pingCtlSourceAddressType,\n             pingCtlSourceAddress,\n\
    \             pingCtlIfIndex,\n             pingCtlDSField,\n             pingCtlRowStatus,\n\
    \             pingResultsOperStatus,\n             pingResultsIpTargetAddressType,\n\
    \             pingResultsIpTargetAddress,\n             pingResultsMinRtt,\n \
    \            pingResultsMaxRtt,\n             pingResultsAverageRtt,\n       \
    \      pingResultsProbeResponses,\n             pingResultsSentProbes,\n     \
    \        pingResultsRttSumOfSquares,\n             pingProbeHistoryResponse,\n\
    \             pingProbeHistoryStatus,\n             pingProbeHistoryLastRC\n \
    \          }\n   STATUS  current\n   DESCRIPTION\n       \"The group of objects\
    \ that comprise the remote ping\n       capability.\"\n    ::= { pingGroups 1\
    \ }\n pingTimeStampGroup OBJECT-GROUP\n   OBJECTS {\n             pingResultsLastGoodProbe,\n\
    \             pingProbeHistoryTime\n           }\n   STATUS  current\n   DESCRIPTION\n\
    \       \"The group of DateAndTime objects.\"\n    ::= { pingGroups 2 }\n pingNotificationsGroup\
    \ NOTIFICATION-GROUP\n   NOTIFICATIONS {\n             pingProbeFailed,\n    \
    \         pingTestFailed,\n             pingTestCompleted\n          }\n   STATUS\
    \        current\n   DESCRIPTION\n       \"The notification which are required\
    \ to be supported by\n       implementations of this MIB.\"\n   ::= { pingGroups\
    \ 3 }\n"
- title: END
  contents:
  - 'END

    '
- title: 4.2  DISMAN-TRACEROUTE-MIB
  contents:
  - '4.2  DISMAN-TRACEROUTE-MIB

    '
- title: DISMAN-TRACEROUTE-MIB DEFINITIONS ::= BEGIN
  contents:
  - 'DISMAN-TRACEROUTE-MIB DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n    MODULE-IDENTITY, OBJECT-TYPE, Integer32,\n    Gauge32, Unsigned32,\
    \ mib-2,\n    NOTIFICATION-TYPE,\n    OBJECT-IDENTITY\n        FROM SNMPv2-SMI\
    \                  -- RFC2578\n    RowStatus, StorageType,\n    TruthValue, DateAndTime\n\
    \        FROM SNMPv2-TC                   -- RFC2579\n    MODULE-COMPLIANCE, OBJECT-GROUP,\n\
    \    NOTIFICATION-GROUP\n        FROM SNMPv2-CONF                 -- RFC2580\n\
    \    SnmpAdminString\n        FROM SNMP-FRAMEWORK-MIB          -- RFC2571\n  \
    \  InterfaceIndexOrZero                 -- RFC2863\n        FROM IF-MIB\n    InetAddressType,\
    \ InetAddress\n        FROM INET-ADDRESS-MIB            -- RFC2851\n    OperationResponseStatus\n\
    \        FROM DISMAN-PING-MIB;            -- RFC2925\n traceRouteMIB MODULE-IDENTITY\n\
    \    LAST-UPDATED \"200009210000Z\"         -- 21 September 2000\n    ORGANIZATION\
    \ \"IETF Distributed Management Working Group\"\n    CONTACT-INFO\n        \"\
    Kenneth White\n        International Business Machines Corporation\n        Network\
    \ Computing Software Division\n        Research Triangle Park, NC, USA\n     \
    \   E-mail: wkenneth@us.ibm.com\"\n    DESCRIPTION\n        \"The Traceroute MIB\
    \ (DISMAN-TRACEROUTE-MIB) provides\n        access to the traceroute capability\
    \ at a remote host.\"\n     --  Revision history\n     REVISION     \"200009210000Z\"\
    \         -- 21 September 2000\n     DESCRIPTION\n         \"Initial version,\
    \ published as RFC 2925.\"\n    ::= { mib-2 81 }\n -- Top level structure of the\
    \ MIB\n traceRouteNotifications  OBJECT IDENTIFIER ::= { traceRouteMIB 0 }\n traceRouteObjects\
    \        OBJECT IDENTIFIER ::= { traceRouteMIB 1 }\n traceRouteConformance   \
    \ OBJECT IDENTIFIER ::= { traceRouteMIB 2 }\n -- The registration node (point)\
    \ for traceroute implementation types\n traceRouteImplementationTypeDomains OBJECT\
    \ IDENTIFIER\n ::= { traceRouteMIB 3 }\n traceRouteUsingUdpProbes OBJECT-IDENTITY\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Indicates that an implementation\
    \ is using UDP probes to\n        perform the traceroute operation.\"\n    ::=\
    \ { traceRouteImplementationTypeDomains 1 }\n -- Simple Object Definitions\n traceRouteMaxConcurrentRequests\
    \ OBJECT-TYPE\n    SYNTAX      Unsigned32\n    UNITS       \"requests\"\n    MAX-ACCESS\
    \  read-write\n    STATUS      current\n    DESCRIPTION\n       \"The maximum\
    \ number of concurrent active traceroute requests\n       that are allowed within\
    \ an agent implementation.  A value\n       of 0 for this object implies that\
    \ there is no limit for\n       the number of concurrent active requests in effect.\"\
    \n    DEFVAL { 10 }\n    ::= { traceRouteObjects 1 }\n  -- Traceroute Control\
    \ Table\n traceRouteCtlTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF TraceRouteCtlEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"Defines the Remote Operations Traceroute Control Table for\n        providing\
    \ the capability of invoking traceroute from a remote\n        host.  The results\
    \ of traceroute operations can be stored in\n        the traceRouteResultsTable,\
    \ traceRouteProbeHistoryTable, and\n        the traceRouteHopsTable.\"\n   ::=\
    \ { traceRouteObjects 2 }\n traceRouteCtlEntry OBJECT-TYPE\n    SYNTAX      TraceRouteCtlEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"Defines an entry in the traceRouteCtlTable.  The first\n        index\
    \ element, traceRouteCtlOwnerIndex, is of type\n        SnmpAdminString, a textual\
    \ convention that allows for\n        use of the SNMPv3 View-Based Access Control\
    \ Model\n        (RFC 2575 [11], VACM) and allows an management\n        application\
    \ to identify its entries.  The second index,\n        traceRouteCtlTestName (also\
    \ an SnmpAdminString),\n        enables the same management application to have\n\
    \        multiple requests outstanding.\"\n    INDEX {\n            traceRouteCtlOwnerIndex,\n\
    \            traceRouteCtlTestName\n          }\n    ::= { traceRouteCtlTable\
    \ 1 }\n TraceRouteCtlEntry ::=\n    SEQUENCE {\n      traceRouteCtlOwnerIndex\
    \         SnmpAdminString,\n      traceRouteCtlTestName           SnmpAdminString,\n\
    \      traceRouteCtlTargetAddressType  InetAddressType,\n      traceRouteCtlTargetAddress\
    \      InetAddress,\n      traceRouteCtlByPassRouteTable   TruthValue,\n     \
    \ traceRouteCtlDataSize           Unsigned32,\n      traceRouteCtlTimeOut    \
    \        Unsigned32,\n      traceRouteCtlProbesPerHop       Unsigned32,\n    \
    \  traceRouteCtlPort               Unsigned32,\n      traceRouteCtlMaxTtl    \
    \         Unsigned32,\n      traceRouteCtlDSField            Unsigned32,\n   \
    \   traceRouteCtlSourceAddressType  InetAddressType,\n      traceRouteCtlSourceAddress\
    \      InetAddress,\n      traceRouteCtlIfIndex            InterfaceIndexOrZero,\n\
    \      traceRouteCtlMiscOptions        SnmpAdminString,\n      traceRouteCtlMaxFailures\
    \        Unsigned32,\n      traceRouteCtlDontFragment       TruthValue,\n    \
    \  traceRouteCtlInitialTtl         Unsigned32,\n      traceRouteCtlFrequency \
    \         Unsigned32,\n      traceRouteCtlStorageType        StorageType,\n  \
    \    traceRouteCtlAdminStatus        INTEGER,\n      traceRouteCtlMaxRows    \
    \        Unsigned32,\n      traceRouteCtlTrapGeneration     BITS,\n      traceRouteCtlDescr\
    \              SnmpAdminString,\n      traceRouteCtlCreateHopsEntries  TruthValue,\n\
    \      traceRouteCtlType               OBJECT IDENTIFIER,\n      traceRouteCtlRowStatus\
    \          RowStatus\n    }\n traceRouteCtlOwnerIndex OBJECT-TYPE\n    SYNTAX\
    \      SnmpAdminString (SIZE(0..32))\n    MAX-ACCESS  not-accessible\n    STATUS\
    \      current\n    DESCRIPTION\n       \"To facilitate the provisioning of access\
    \ control by a\n       security administrator using the View-Based Access\n  \
    \     Control Model (RFC 2575, VACM) for tables in which\n       multiple users\
    \ may need to independently create or\n       modify entries, the initial index\
    \ is used as an 'owner\n       index'.  Such an initial index has a syntax of\n\
    \       SnmpAdminString, and can thus be trivially mapped to a\n       securityName\
    \ or groupName as defined in VACM, in\n       accordance with a security policy.\n\
    \       When used in conjunction with such a security policy\n       all entries\
    \ in the table belonging to a particular user\n       (or group) will have the\
    \ same value for this initial\n       index.  For a given user's entries in a\
    \ particular\n       table, the object identifiers for the information in\n  \
    \     these entries will have the same subidentifiers (except\n       for the\
    \ 'column' subidentifier) up to the end of the\n       encoded owner index. To\
    \ configure VACM to permit access\n       to this portion of the table, one would\
    \ create\n       vacmViewTreeFamilyTable entries with the value of\n       vacmViewTreeFamilySubtree\
    \ including the owner index\n       portion, and vacmViewTreeFamilyMask 'wildcarding'\
    \ the\n       column subidentifier.  More elaborate configurations\n       are\
    \ possible.\"\n    ::= { traceRouteCtlEntry 1 }\n  traceRouteCtlTestName OBJECT-TYPE\n\
    \    SYNTAX      SnmpAdminString (SIZE(0..32))\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n        \"The name of a traceroute\
    \ test.  This is locally unique,\n        within the scope of an traceRouteCtlOwnerIndex.\"\
    \n    ::= { traceRouteCtlEntry 2 }\n traceRouteCtlTargetAddressType OBJECT-TYPE\n\
    \    SYNTAX      InetAddressType\n    MAX-ACCESS  read-create\n    STATUS    \
    \  current\n    DESCRIPTION\n        \"Specifies the type of host address to be\
    \ used on the\n        traceroute request at the remote host.\"\n    DEFVAL {\
    \ ipv4 }\n    ::= { traceRouteCtlEntry 3 }\n traceRouteCtlTargetAddress OBJECT-TYPE\n\
    \    SYNTAX      InetAddress\n    MAX-ACCESS  read-create\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Specifies the host address used on the\n        traceroute\
    \ request at the remote host.  The\n        host address type can be determined\
    \ by the\n        examining the value of the corresponding\n        traceRouteCtlTargetAddressType\
    \ index element.\n        A value for this object MUST be set prior to\n     \
    \   transitioning its corresponding traceRouteCtlEntry to\n        active(1) via\
    \ traceRouteCtlRowStatus.\"\n    ::= { traceRouteCtlEntry 4 }\n traceRouteCtlByPassRouteTable\
    \ OBJECT-TYPE\n    SYNTAX TruthValue\n    MAX-ACCESS  read-create\n    STATUS\
    \      current\n    DESCRIPTION\n       \"The purpose of this object is to optionally\
    \ enable\n       bypassing the route table.  If enabled, the remote\n       host\
    \ will bypass the normal routing tables and send\n       directly to a host on\
    \ an attached network.  If the\n       host is not on a directly-attached network,\
    \ an\n       error is returned.  This option can be used to perform\n       the\
    \ traceroute operation to a local host through an\n       interface that has no\
    \ route defined (e.g., after the\n       interface was dropped by routed).\"\n\
    \    DEFVAL { false }\n    ::= { traceRouteCtlEntry 5 }\n traceRouteCtlDataSize\
    \ OBJECT-TYPE\n    SYNTAX      Unsigned32 (0..65507)\n    UNITS       \"octets\"\
    \n    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n    \
    \    \"Specifies the size of the data portion of a traceroute\n        request\
    \ in octets.  A traceroute request is essentially\n        transmitted by encoding\
    \ a UDP datagram into a\n        IP packet. So subtracting the size of a UDP header\n\
    \        (8 octets) and the size of a IP header (20 octets)\n        yields a\
    \ maximum of 65507 octets.\"\n    DEFVAL { 0 }\n    ::= { traceRouteCtlEntry 6\
    \ }\n traceRouteCtlTimeOut OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..60)\n \
    \   UNITS       \"seconds\"\n    MAX-ACCESS  read-create\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Specifies the time-out value, in seconds, for\n  \
    \      a traceroute request.\"\n    DEFVAL { 3 }\n    ::= { traceRouteCtlEntry\
    \ 7 }\n traceRouteCtlProbesPerHop OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..10)\n\
    \    UNITS       \"probes\"\n    MAX-ACCESS  read-create\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Specifies the number of times to reissue a traceroute\n\
    \        request with the same time-to-live (TTL) value.\"\n    DEFVAL { 3 }\n\
    \    ::= { traceRouteCtlEntry 8 }\n traceRouteCtlPort OBJECT-TYPE\n    SYNTAX\
    \      Unsigned32 (1..65535)\n    UNITS       \"UDP Port\"\n    MAX-ACCESS  read-create\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Specifies the UDP port to\
    \ send the traceroute\n        request to.  Need to specify a port that is not\
    \ in\n        use at the destination (target) host.  The default\n        value\
    \ for this object is the IANA assigned port,\n        33434, for the traceroute\
    \ function.\"\n    DEFVAL { 33434 }\n    ::= { traceRouteCtlEntry 9 }\n traceRouteCtlMaxTtl\
    \ OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..255)\n    UNITS       \"time-to-live\
    \ value\"\n    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Specifies the maximum time-to-live value.\"\n    DEFVAL { 30 }\n  \
    \  ::= { traceRouteCtlEntry 10 }\n traceRouteCtlDSField OBJECT-TYPE\n    SYNTAX\
    \      Unsigned32 (0..255)\n    MAX-ACCESS  read-create\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Specifies the value to store in the Differentiated\n\
    \        Services (DS) Field in the IP packet used to\n        encapsulate the\
    \ traceroute probe.  The DS Field is\n        defined as the Type of Service (TOS)\
    \ octet in a IPv4\n        header or as the Traffic Class octet in a IPv6 header.\n\
    \        The value of this object must be a decimal integer\n        in the range\
    \ from 0 to 255.  This option can be used\n        to determine what effect an\
    \ explicit DS Field setting\n        has on a traceroute response.  Not all values\
    \ are legal\n        or meaningful.  DS Field usage is often not supported\n \
    \       by IP implementations.  A value of 0 means that the\n     function represented\
    \ by this option is not supported.\n     Useful TOS octet values are probably\
    \ '16' (low delay)\n     and '8' ( high throughput).\"\n    REFERENCE\n      \
    \  \"Refer to RFC 2474 for the definition of the\n        Differentiated Services\
    \ Field and to RFC 1812\n        Section 5.3.2 for Type of Service (TOS).\"\n\
    \    DEFVAL { 0 }\n    ::= { traceRouteCtlEntry 11 }\n traceRouteCtlSourceAddressType\
    \ OBJECT-TYPE\n    SYNTAX      InetAddressType\n    MAX-ACCESS  read-create\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Specifies the type of the\
    \ source address,\n        traceRouteCtlSourceAddress, to be used at a remote\
    \ host\n        when performing a traceroute operation.\"\n    DEFVAL { unknown\
    \ }\n    ::= { traceRouteCtlEntry 12 }\n traceRouteCtlSourceAddress OBJECT-TYPE\n\
    \    SYNTAX      InetAddress\n    MAX-ACCESS  read-create\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Use the specified IP address (which must be given\n\
    \        as an IP number, not a hostname) as the source\n        address in outgoing\
    \ probe packets. On hosts with\n        more than one IP address, this option\
    \ can be used\n        to force the source address to be something other\n   \
    \     than the primary IP address of the interface the\n        probe packet is\
    \ sent on.  If the IP address is not\n        one of this machine's interface\
    \ addresses, an error\n        is returned and nothing is sent.  A zero length\n\
    \        octet string value for this object disables source\n        address specification.\n\
    \        The address type (InetAddressType) that relates to\n        this object\
    \ is specified by the corresponding value\n        of traceRouteCtlSourceAddressType.\"\
    \n    DEFVAL { ''H }\n    ::= { traceRouteCtlEntry 13 }\n traceRouteCtlIfIndex\
    \ OBJECT-TYPE\n    SYNTAX      InterfaceIndexOrZero\n    MAX-ACCESS  read-create\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Setting this object to an\
    \ interface's ifIndex prior\n        to starting a remote traceroute operation\
    \ directs\n        the traceroute probes to be transmitted over the\n        specified\
    \ interface.  A value of zero for this object\n        implies that this option\
    \ is not enabled.\"\n    DEFVAL { 0 }\n    ::= { traceRouteCtlEntry 14 }\n traceRouteCtlMiscOptions\
    \ OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS  read-create\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Enables an application to\
    \ specify implementation\n        dependent options.\"\n    DEFVAL { ''H }\n \
    \   ::= { traceRouteCtlEntry 15 }\n traceRouteCtlMaxFailures OBJECT-TYPE\n   \
    \ SYNTAX      Unsigned32 (0..255)\n    UNITS       \"timeouts\"\n    MAX-ACCESS\
    \  read-create\n    STATUS      current\n    DESCRIPTION\n        \"The value\
    \ of this object indicates the maximum number\n        of consecutive timeouts\
    \ allowed before terminating\n        a remote traceroute request.  A value of\
    \ either 255 (maximum\n        hop count/possible TTL value) or a 0 indicates\
    \ that the\n        function of terminating a remote traceroute request when a\n\
    \        specific number of successive timeouts are detected is\n        disabled.\"\
    \n    DEFVAL { 5 }\n    ::= { traceRouteCtlEntry 16 }\n traceRouteCtlDontFragment\
    \ OBJECT-TYPE\n    SYNTAX         TruthValue\n    MAX-ACCESS     read-create\n\
    \    STATUS         current\n    DESCRIPTION\n        \"This object enables setting\
    \ of the don't fragment flag (DF)\n        in the IP header for a probe.  Use\
    \ of this object enables\n        performing a manual PATH MTU test.\"\n    DEFVAL\
    \  { false }\n    ::= { traceRouteCtlEntry 17 }\n traceRouteCtlInitialTtl OBJECT-TYPE\n\
    \    SYNTAX         Unsigned32 (0..255)\n    MAX-ACCESS     read-create\n    STATUS\
    \         current\n    DESCRIPTION\n        \"The value of this object specifies\
    \ the initial TTL value to\n        use.  This enables bypassing the initial (often\
    \ well known)\n        portion of a path.\"\n    DEFVAL { 1 }\n    ::= { traceRouteCtlEntry\
    \ 18 }\n traceRouteCtlFrequency  OBJECT-TYPE\n    SYNTAX      Unsigned32\n   \
    \ UNITS       \"seconds\"\n    MAX-ACCESS  read-create\n    STATUS      current\n\
    \    DESCRIPTION\n        \"The number of seconds to wait before repeating a\n\
    \        traceroute test as defined by the value of the\n        various objects\
    \ in the corresponding row.\n        The number of hops in a single traceroute\
    \ test\n        is determined by the value of the corresponding\n        traceRouteCtlProbesPerHop\
    \ object.  After a\n        single test completes the number of seconds as defined\n\
    \        by the value of traceRouteCtlFrequency MUST elapse\n        before the\
    \ next traceroute test is started.\n        A value of 0 for this object implies\
    \ that the test\n        as defined by the corresponding entry will not be\n \
    \       repeated.\"\n    DEFVAL { 0 }\n    ::= { traceRouteCtlEntry 19 }\n traceRouteCtlStorageType\
    \ OBJECT-TYPE\n    SYNTAX      StorageType\n    MAX-ACCESS  read-create\n    STATUS\
    \      current\n    DESCRIPTION\n        \"The storage type for this conceptual\
    \ row.\n        Conceptual rows having the value 'permanent' need not\n      \
    \  allow write-access to any columnar objects in the row.\"\n    DEFVAL { nonVolatile\
    \ }\n    ::= { traceRouteCtlEntry 20 }\n traceRouteCtlAdminStatus OBJECT-TYPE\n\
    \    SYNTAX      INTEGER {\n                          enabled(1), -- operation\
    \ should be started\n                          disabled(2) -- operation should\
    \ be stopped\n                        }\n    MAX-ACCESS  read-create\n    STATUS\
    \      current\n    DESCRIPTION\n        \"Reflects the desired state that an\
    \ traceRouteCtlEntry\n        should be in:\n           enabled(1)  - Attempt\
    \ to activate the test as defined by\n                         this traceRouteCtlEntry.\n\
    \           disabled(2) - Deactivate the test as defined by this\n           \
    \              traceRouteCtlEntry.\n        Refer to the corresponding traceRouteResultsOperStatus\
    \ to\n        determine the operational state of the test defined by\n       \
    \ this entry.\"\n     DEFVAL { disabled }\n    ::= { traceRouteCtlEntry 21 }\n\
    \ traceRouteCtlDescr OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-create\n    STATUS      current\n    DESCRIPTION\n        \"The purpose\
    \ of this object is to provide a\n        descriptive name of the remote traceroute\n\
    \        test.\"\n    DEFVAL { '00'H }\n    ::= { traceRouteCtlEntry 22 }\n traceRouteCtlMaxRows\
    \ OBJECT-TYPE\n    SYNTAX      Unsigned32\n    UNITS       \"rows\"\n    MAX-ACCESS\
    \  read-create\n    STATUS      current\n    DESCRIPTION\n        \"The maximum\
    \ number of entries allowed in the\n        traceRouteProbeHistoryTable.  An implementation\
    \ of\n        this MIB will remove the oldest entry in the\n        traceRouteProbeHistoryTable\
    \ to allow the addition\n        of an new entry once the number of rows in the\n\
    \        traceRouteProbeHistoryTable reaches this value.\n        Old entries\
    \ are not removed when a new test is\n        started.  Entries are added to the\n\
    \        traceRouteProbeHistoryTable until traceRouteCtlMaxRows\n        is reached\
    \ before entries begin to be removed.\n        A value of 0 for this object disables\
    \ creation of\n        traceRouteProbeHistoryTable entries.\"\n    DEFVAL    \
    \  { 50 }\n    ::= { traceRouteCtlEntry 23 }\n traceRouteCtlTrapGeneration OBJECT-TYPE\n\
    \    SYNTAX      BITS {\n                  pathChange(0),\n                  testFailure(1),\n\
    \                  testCompletion(2)\n                }\n    MAX-ACCESS  read-create\n\
    \    STATUS      current\n    DESCRIPTION\n        \"The value of this object\
    \ determines when and if to\n        to generate a notification for this entry:\n\
    \        pathChange(0)     - Generate a traceRoutePathChange\n            notification\
    \ when the current path varies from a\n            previously determined path.\n\
    \        testFailure(1)    - Generate a traceRouteTestFailed\n            notification\
    \ when the full path to a target\n            can't be determined.\n        testCompletion(2)\
    \ - Generate a traceRouteTestCompleted\n            notification when the path\
    \ to a target has been\n            determined.\n        The value of this object\
    \ defaults to zero, indicating\n        that none of the above options have been\
    \ selected.\"\n    ::= { traceRouteCtlEntry 24 }\n traceRouteCtlCreateHopsEntries\
    \ OBJECT-TYPE\n    SYNTAX      TruthValue\n    MAX-ACCESS  read-create\n    STATUS\
    \      current\n    DESCRIPTION\n        \"The current path for a traceroute test\
    \ is kept in the\n        traceRouteHopsTable on a per hop basis when the value\
    \ of\n        this object is true(1).\"\n    DEFVAL { false }\n    ::= { traceRouteCtlEntry\
    \ 25 }\n traceRouteCtlType OBJECT-TYPE\n    SYNTAX      OBJECT IDENTIFIER\n  \
    \  MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"The value of this object is used either to report or\n        select the implementation\
    \ method to be used for\n        performing a traceroute operation. The value\
    \ of this\n        object may be selected from\n        traceRouteImplementationTypeDomains.\n\
    \        Additional implementation types should be allocated as\n        required\
    \ by implementers of the DISMAN-TRACEROUTE-MIB\n        under their enterprise\
    \ specific registration point and\n        not beneath traceRouteImplementationTypeDomains.\"\
    \n    DEFVAL { traceRouteUsingUdpProbes }\n    ::= { traceRouteCtlEntry 26 }\n\
    \ traceRouteCtlRowStatus OBJECT-TYPE\n    SYNTAX      RowStatus\n    MAX-ACCESS\
    \  read-create\n    STATUS      current\n    DESCRIPTION\n        \"This object\
    \ allows entries to be created and deleted\n        in the traceRouteCtlTable.\
    \  Deletion of an entry in\n        this table results in all corresponding (same\n\
    \        traceRouteCtlOwnerIndex and traceRouteCtlTestName\n        index values)\
    \ traceRouteResultsTable,\n        traceRouteProbeHistoryTable, and traceRouteHopsTable\n\
    \        entries being deleted.\n        A value MUST be specified for traceRouteCtlTargetAddress\n\
    \        prior to a transition to active(1) state being\n        accepted.\n \
    \       Activation of a remote traceroute operation is\n        controlled via\
    \ traceRouteCtlAdminStatus and not\n        by transitioning of this object's\
    \ value to active(1).\n        Transitions in and out of active(1) state are not\n\
    \        allowed while an entry's traceRouteResultsOperStatus\n        is active(1)\
    \ with the exception that deletion of\n        an entry in this table by setting\
    \ its RowStatus\n        object to destroy(6) will stop an active\n        traceroute\
    \ operation.\n        The operational state of an traceroute operation\n     \
    \   can be determined by examination of the corresponding\n        traceRouteResultsOperStatus\
    \ object.\"\n    REFERENCE\n        \"See definition of RowStatus in RFC 2579,\
    \ 'Textual\n        Conventions for SMIv2.'\"\n    ::= { traceRouteCtlEntry 27\
    \ }\n -- Traceroute Results Table\n traceRouteResultsTable OBJECT-TYPE\n    SYNTAX\
    \      SEQUENCE OF TraceRouteResultsEntry\n    MAX-ACCESS  not-accessible\n  \
    \  STATUS      current\n    DESCRIPTION\n        \"Defines the Remote Operations\
    \ Traceroute Results Table for\n        keeping track of the status of a traceRouteCtlEntry.\n\
    \        An entry is added to the traceRouteResultsTable when an\n        traceRouteCtlEntry\
    \ is started by successful transition\n        of its traceRouteCtlAdminStatus\
    \ object to enabled(1).\n        An entry is removed from the traceRouteResultsTable\
    \ when\n        its corresponding traceRouteCtlEntry is deleted.\"\n   ::= { traceRouteObjects\
    \ 3 }\n traceRouteResultsEntry OBJECT-TYPE\n    SYNTAX      TraceRouteResultsEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"Defines an entry in the traceRouteResultsTable.  The\n        traceRouteResultsTable\
    \ has the same indexing as the\n        traceRouteCtlTable in order for a traceRouteResultsEntry\n\
    \        to correspond to the traceRouteCtlEntry that caused it to\n        be\
    \ created.\"\n    INDEX {\n            traceRouteCtlOwnerIndex,\n            traceRouteCtlTestName\n\
    \          }\n    ::= { traceRouteResultsTable 1 }\n TraceRouteResultsEntry ::=\n\
    \    SEQUENCE {\n      traceRouteResultsOperStatus       INTEGER,\n      traceRouteResultsCurHopCount\
    \      Gauge32,\n      traceRouteResultsCurProbeCount    Gauge32,\n      traceRouteResultsIpTgtAddrType\
    \    InetAddressType,\n      traceRouteResultsIpTgtAddr        InetAddress,\n\
    \      traceRouteResultsTestAttempts     Unsigned32,\n      traceRouteResultsTestSuccesses\
    \    Unsigned32,\n      traceRouteResultsLastGoodPath     DateAndTime\n    }\n\
    \ traceRouteResultsOperStatus OBJECT-TYPE\n    SYNTAX      INTEGER {\n       \
    \                   enabled(1), -- test is in progress\n                     \
    \     disabled(2) -- test has stopped\n                        }\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n        \"Reflects the\
    \ operational state of an traceRouteCtlEntry:\n           enabled(1)  - Test is\
    \ active.\n           disabled(2) - Test has stopped.\"\n    ::= { traceRouteResultsEntry\
    \ 1 }\n traceRouteResultsCurHopCount OBJECT-TYPE\n    SYNTAX      Gauge32\n  \
    \  UNITS       \"hops\"\n    MAX-ACCESS  read-only\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Reflects the current TTL value (range from 1 to\n\
    \        255) for a remote traceroute operation.\n        Maximum TTL value is\
    \ determined by\n        traceRouteCtlMaxTtl.\"\n    ::= { traceRouteResultsEntry\
    \ 2 }\n traceRouteResultsCurProbeCount OBJECT-TYPE\n    SYNTAX      Gauge32\n\
    \    UNITS       \"probes\"\n    MAX-ACCESS  read-only\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Reflects the current probe count (1..10) for\n   \
    \     a remote traceroute operation. The maximum\n        probe count is determined\
    \ by\n        traceRouteCtlProbesPerHop.\"\n    ::= { traceRouteResultsEntry 3\
    \ }\n traceRouteResultsIpTgtAddrType OBJECT-TYPE\n    SYNTAX      InetAddressType\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"This objects indicates the type of address stored\n        in the corresponding\
    \ traceRouteResultsIpTgtAddr\n        object.\"\n    ::= { traceRouteResultsEntry\
    \ 4 }\n traceRouteResultsIpTgtAddr OBJECT-TYPE\n    SYNTAX      InetAddress\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"This objects reports the IP address associated\n        with a traceRouteCtlTargetAddress\
    \ value when the\n        destination address is specified as a DNS name.\n  \
    \      The value of this object should be a zero length\n        octet string\
    \ when a DNS name is not specified or\n        when a specified DNS name fails\
    \ to resolve.\"\n    ::= { traceRouteResultsEntry 5 }\n traceRouteResultsTestAttempts\
    \ OBJECT-TYPE\n    SYNTAX      Unsigned32\n    UNITS       \"tests\"\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n        \"The current\
    \ number of attempts to determine a path\n        to a target.  The value of this\
    \ object MUST be started\n        at 0.\"\n    ::= { traceRouteResultsEntry 6\
    \ }\n traceRouteResultsTestSuccesses OBJECT-TYPE\n    SYNTAX      Unsigned32\n\
    \    UNITS       \"tests\"\n    MAX-ACCESS  read-only\n    STATUS      current\n\
    \    DESCRIPTION\n        \"The current number of attempts to determine a path\n\
    \        to a target that have succeeded.  The value of this\n        object MUST\
    \ be reported as 0 when no attempts have\n        succeeded.\"\n    ::= { traceRouteResultsEntry\
    \ 7 }\n traceRouteResultsLastGoodPath OBJECT-TYPE\n    SYNTAX      DateAndTime\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"The date and time when the last complete path\n        was determined.\"\n\
    \    ::= { traceRouteResultsEntry 8 }\n -- Trace Route Probe History Table\n traceRouteProbeHistoryTable\
    \ OBJECT-TYPE\n    SYNTAX      SEQUENCE OF TraceRouteProbeHistoryEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"Defines\
    \ the Remote Operations Traceroute Results Table for\n        storing the results\
    \ of a traceroute operation.\n        An implementation of this MIB will remove\
    \ the oldest\n        entry in the traceRouteProbeHistoryTable to allow the\n\
    \        addition of an new entry once the number of rows in\n        the traceRouteProbeHistoryTable\
    \ reaches the value specified\n        by traceRouteCtlMaxRows.\"\n   ::= { traceRouteObjects\
    \ 4 }\n traceRouteProbeHistoryEntry OBJECT-TYPE\n    SYNTAX      TraceRouteProbeHistoryEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"Defines a table for storing the results of a traceroute\n        operation.\
    \  Entries in this table are limited by\n        the value of the corresponding\
    \ traceRouteCtlMaxRows\n        object.\n        The first two index elements\
    \ identify the\n        traceRouteCtlEntry that a traceRouteProbeHistoryEntry\n\
    \        belongs to.  The third index element selects a single\n        traceroute\
    \ operation result.  The fourth and fifth indexes\n        select the hop and\
    \ the probe for a particular\n        traceroute operation.\"\n    INDEX {\n \
    \            traceRouteCtlOwnerIndex,\n             traceRouteCtlTestName,\n \
    \            traceRouteProbeHistoryIndex,\n             traceRouteProbeHistoryHopIndex,\n\
    \             traceRouteProbeHistoryProbeIndex\n          }\n    ::= { traceRouteProbeHistoryTable\
    \ 1 }\n TraceRouteProbeHistoryEntry ::=\n    SEQUENCE {\n      traceRouteProbeHistoryIndex\
    \         Unsigned32,\n      traceRouteProbeHistoryHopIndex      Unsigned32,\n\
    \      traceRouteProbeHistoryProbeIndex    Unsigned32,\n      traceRouteProbeHistoryHAddrType\
    \     InetAddressType,\n      traceRouteProbeHistoryHAddr         InetAddress,\n\
    \      traceRouteProbeHistoryResponse      Unsigned32,\n      traceRouteProbeHistoryStatus\
    \        OperationResponseStatus,\n      traceRouteProbeHistoryLastRC        Integer32,\n\
    \      traceRouteProbeHistoryTime          DateAndTime\n    }\n traceRouteProbeHistoryIndex\
    \ OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..'ffffffff'h)\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n        \"An entry in this table is\
    \ created when the result of\n        a traceroute probe is determined.  The initial\
    \ 2 instance\n        identifier index values identify the traceRouteCtlEntry\n\
    \        that a probe result (traceRouteProbeHistoryEntry) belongs\n        to.\
    \  An entry is removed from this table when\n        its corresponding traceRouteCtlEntry\
    \ is deleted.\n        An implementation MUST start assigning\n        traceRouteProbeHistoryIndex\
    \ values at 1 and wrap after\n        exceeding the maximum possible value as\
    \ defined by the\n        limit of this object ('ffffffff'h).\"\n    ::= { traceRouteProbeHistoryEntry\
    \ 1 }\n traceRouteProbeHistoryHopIndex OBJECT-TYPE\n    SYNTAX      Unsigned32\
    \ (1..255)\n    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n\
    \       \"Indicates which hop in a traceroute path that the probe's\n       results\
    \ are for.  The value of this object is initially\n       determined by the value\
    \ of traceRouteCtlInitialTtl.\"\n    ::= { traceRouteProbeHistoryEntry 2 }\n traceRouteProbeHistoryProbeIndex\
    \ OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..10)\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n       \"Indicates the index of a probe\
    \ for a particular\n       hop in a traceroute path.  The number of probes per\n\
    \       hop is determined by the value of the corresponding\n       traceRouteCtlProbesPerHop\
    \ object.\"\n    ::= { traceRouteProbeHistoryEntry 3 }\n traceRouteProbeHistoryHAddrType\
    \ OBJECT-TYPE\n    SYNTAX      InetAddressType\n    MAX-ACCESS  read-only\n  \
    \  STATUS      current\n    DESCRIPTION\n        \"This objects indicates the\
    \ type of address stored\n        in the corresponding traceRouteProbeHistoryHAddr\n\
    \        object.\"\n    ::= { traceRouteProbeHistoryEntry 4 }\n traceRouteProbeHistoryHAddr\
    \ OBJECT-TYPE\n    SYNTAX      InetAddress\n    MAX-ACCESS  read-only\n    STATUS\
    \      current\n    DESCRIPTION\n       \"The address of a hop in a traceroute\
    \ path.  This object\n       is not allowed to be a DNS name.  The value of the\n\
    \       corresponding object, traceRouteProbeHistoryHAddrType,\n       indicates\
    \ this object's IP address type.\"\n    ::= { traceRouteProbeHistoryEntry 5 }\n\
    \ traceRouteProbeHistoryResponse OBJECT-TYPE\n    SYNTAX      Unsigned32\n   \
    \ UNITS       \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n\
    \    DESCRIPTION\n        \"The amount of time measured in milliseconds from when\n\
    \        a probe was sent to when its response was received or\n        when it\
    \ timed out.  The value of this object is reported\n        as 0 when it is not\
    \ possible to transmit a probe.\"\n    ::= { traceRouteProbeHistoryEntry 6 }\n\
    \ traceRouteProbeHistoryStatus OBJECT-TYPE\n    SYNTAX      OperationResponseStatus\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"The result of a traceroute operation made by a remote\n        host for a\
    \ particular probe.\"\n    ::= { traceRouteProbeHistoryEntry 7 }\n traceRouteProbeHistoryLastRC\
    \ OBJECT-TYPE\n    SYNTAX      Integer32\n    MAX-ACCESS  read-only\n    STATUS\
    \      current\n    DESCRIPTION\n        \"The last implementation method specific\
    \ reply code received.\n        Traceroute is usually implemented by transmitting\
    \ a series of\n        probe packets with increasing time-to-live values.  A probe\n\
    \        packet is a UDP datagram encapsulated into an IP packet.\n        Each\
    \ hop in a path to the target (destination) host rejects\n        the probe packets\
    \ (probe's TTL too small, ICMP reply) until\n        either the maximum TTL is\
    \ exceeded or the target host is\n        received.\"\n    ::= { traceRouteProbeHistoryEntry\
    \ 8 }\n traceRouteProbeHistoryTime OBJECT-TYPE\n    SYNTAX      DateAndTime\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Timestamp for when this probe results were determined.\"\n    ::= { traceRouteProbeHistoryEntry\
    \ 9 }\n -- Traceroute Hop Results Table\n traceRouteHopsTable OBJECT-TYPE\n  \
    \  SYNTAX      SEQUENCE OF TraceRouteHopsEntry\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Defines the Remote Operations\
    \ Traceroute Hop Table for\n        keeping track of the results of traceroute\
    \ tests on a\n        per hop basis.\"\n    ::= { traceRouteObjects 5 }\n traceRouteHopsEntry\
    \ OBJECT-TYPE\n    SYNTAX      TraceRouteHopsEntry\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Defines an entry in the traceRouteHopsTable.\n\
    \        The first two index elements identify the\n        traceRouteCtlEntry\
    \ that a traceRouteHopsEntry\n        belongs to.  The third index element,\n\
    \        traceRouteHopsHopIndex, selects a\n        hop in a traceroute path.\"\
    \n    INDEX {\n            traceRouteCtlOwnerIndex,\n            traceRouteCtlTestName,\n\
    \            traceRouteHopsHopIndex\n          }\n    ::= { traceRouteHopsTable\
    \ 1 }\n TraceRouteHopsEntry ::=\n    SEQUENCE {\n        traceRouteHopsHopIndex\
    \         Unsigned32,\n        traceRouteHopsIpTgtAddressType InetAddressType,\n\
    \        traceRouteHopsIpTgtAddress     InetAddress,\n        traceRouteHopsMinRtt\
    \           Unsigned32,\n        traceRouteHopsMaxRtt           Unsigned32,\n\
    \        traceRouteHopsAverageRtt       Unsigned32,\n        traceRouteHopsRttSumOfSquares\
    \  Unsigned32,\n        traceRouteHopsSentProbes       Unsigned32,\n        traceRouteHopsProbeResponses\
    \   Unsigned32,\n        traceRouteHopsLastGoodProbe    DateAndTime\n      }\n\
    \ traceRouteHopsHopIndex OBJECT-TYPE\n    SYNTAX      Unsigned32\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"Specifies\
    \ the hop index for a traceroute hop.  Values\n        for this object with respect\
    \ to the same\n        traceRouteCtlOwnerIndex and traceRouteCtlTestName\n   \
    \     MUST start at 1 and increase monotonically.\n        The traceRouteHopsTable\
    \ keeps the current traceroute\n        path per traceRouteCtlEntry if enabled\
    \ by\n        setting the corresponding traceRouteCtlCreateHopsEntries\n     \
    \   to true(1).\n        All hops (traceRouteHopsTable entries) in a traceroute\n\
    \        path MUST be updated at the same time when a traceroute\n        operation\
    \ completes.  Care needs to be applied when either\n        a path changes or\
    \ can't be determined.  The initial portion\n        of the path, up to the first\
    \ hop change, MUST retain the\n        same traceRouteHopsHopIndex values.  The\
    \ remaining portion\n        of the path SHOULD be assigned new traceRouteHopsHopIndex\n\
    \        values.\"\n    ::= { traceRouteHopsEntry 1 }\n traceRouteHopsIpTgtAddressType\
    \ OBJECT-TYPE\n    SYNTAX      InetAddressType\n    MAX-ACCESS  read-only\n  \
    \  STATUS      current\n    DESCRIPTION\n        \"This objects indicates the\
    \ type of address stored\n        in the corresponding traceRouteHopsIpTargetAddress\n\
    \        object.\"\n    ::= { traceRouteHopsEntry 2 }\n traceRouteHopsIpTgtAddress\
    \ OBJECT-TYPE\n    SYNTAX      InetAddress\n    MAX-ACCESS  read-only\n    STATUS\
    \      current\n    DESCRIPTION\n        \"This object reports the IP address\
    \ associated with\n        the hop.  A value for this object should be reported\n\
    \        as a numeric IP address and not as a DNS name.\"\n    ::= { traceRouteHopsEntry\
    \ 3 }\n traceRouteHopsMinRtt OBJECT-TYPE\n    SYNTAX      Unsigned32\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n        \"The minimum\
    \ traceroute round-trip-time (RTT) received for\n        this hop.  A value of\
    \ 0 for this object implies that no\n        RTT has been received.\"\n    ::=\
    \ { traceRouteHopsEntry 4 }\n traceRouteHopsMaxRtt OBJECT-TYPE\n    SYNTAX   \
    \   Unsigned32\n    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n\
    \        \"The maximum traceroute round-trip-time (RTT) received for\n       \
    \ this hop.  A value of 0 for this object implies that no\n        RTT has been\
    \ received.\"\n    ::= { traceRouteHopsEntry 5 }\n traceRouteHopsAverageRtt OBJECT-TYPE\n\
    \    SYNTAX      Unsigned32\n    MAX-ACCESS  read-only\n    STATUS      current\n\
    \    DESCRIPTION\n        \"The current average traceroute round-trip-time (RTT)\
    \ for\n        this hop.\"\n    ::= { traceRouteHopsEntry 6 }\n traceRouteHopsRttSumOfSquares\
    \ OBJECT-TYPE\n    SYNTAX      Unsigned32\n    MAX-ACCESS  read-only\n    STATUS\
    \      current\n    DESCRIPTION\n        \"This object contains the sum of all\
    \ traceroute responses\n        received for this hop.  Its purpose is to enable\
    \ standard\n        deviation calculation.\"\n    ::= { traceRouteHopsEntry 7\
    \ }\n traceRouteHopsSentProbes OBJECT-TYPE\n    SYNTAX      Unsigned32\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n        \"The value of\
    \ this object reflects the number of probes sent\n        for this hop during\
    \ this traceroute test.  The value of this\n        object should start at 0.\"\
    \n    ::= { traceRouteHopsEntry 8 }\n traceRouteHopsProbeResponses OBJECT-TYPE\n\
    \    SYNTAX      Unsigned32\n    MAX-ACCESS  read-only\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Number of responses received for this hop during this\n\
    \        traceroute test.  This value of this object should start\n        at\
    \ 0.\"\n    ::= { traceRouteHopsEntry 9 }\n traceRouteHopsLastGoodProbe OBJECT-TYPE\n\
    \    SYNTAX      DateAndTime\n    MAX-ACCESS  read-only\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Date and time was the last response was received for\
    \ a probe\n        for this hop during this traceroute test.\"\n    ::= { traceRouteHopsEntry\
    \ 10 }\n -- Notification Definition section\n traceRoutePathChange NOTIFICATION-TYPE\n\
    \      OBJECTS {\n        traceRouteCtlTargetAddressType,\n        traceRouteCtlTargetAddress,\n\
    \        traceRouteResultsIpTgtAddrType,\n        traceRouteResultsIpTgtAddr\n\
    \      }\n      STATUS  current\n      DESCRIPTION\n          \"The path to a\
    \ target has changed.\"\n      ::= { traceRouteNotifications 1 }\n traceRouteTestFailed\
    \ NOTIFICATION-TYPE\n      OBJECTS {\n        traceRouteCtlTargetAddressType,\n\
    \        traceRouteCtlTargetAddress,\n        traceRouteResultsIpTgtAddrType,\n\
    \        traceRouteResultsIpTgtAddr\n      }\n      STATUS  current\n      DESCRIPTION\n\
    \          \"Could not determine the path to a target.\"\n      ::= { traceRouteNotifications\
    \ 2 }\n traceRouteTestCompleted NOTIFICATION-TYPE\n      OBJECTS {\n        traceRouteCtlTargetAddressType,\n\
    \        traceRouteCtlTargetAddress,\n        traceRouteResultsIpTgtAddrType,\n\
    \        traceRouteResultsIpTgtAddr\n      }\n      STATUS  current\n      DESCRIPTION\n\
    \          \"The path to a target has just been determined.\"\n      ::= { traceRouteNotifications\
    \ 3 }\n -- Conformance information\n -- Compliance statements\n traceRouteCompliances\
    \ OBJECT IDENTIFIER ::= { traceRouteConformance 1 }\n traceRouteGroups      OBJECT\
    \ IDENTIFIER ::= { traceRouteConformance 2 }\n -- Compliance statements\n traceRouteCompliance\
    \ MODULE-COMPLIANCE\n    STATUS  current\n    DESCRIPTION\n            \"The compliance\
    \ statement for the DISMAN-TRACEROUTE-MIB.\"\n    MODULE  -- this module\n   \
    \     MANDATORY-GROUPS {\n                            traceRouteGroup\n      \
    \                    }\n        GROUP traceRouteTimeStampGroup\n        DESCRIPTION\n\
    \            \"This group is mandatory for implementations that have\n       \
    \     access to a system clock and are capable of setting\n            the values\
    \ for DateAndTime objects.\"\n        GROUP traceRouteNotificationsGroup\n   \
    \     DESCRIPTION\n            \"This group defines a collection of optional\n\
    \            notifications.\"\n        GROUP traceRouteHopsTableGroup\n      \
    \  DESCRIPTION\n            \"This group lists the objects that make up a\n  \
    \          traceRouteHopsEntry.  Support of the traceRouteHopsTable\n        \
    \    is optional.\"\n        OBJECT traceRouteMaxConcurrentRequests\n        MIN-ACCESS\
    \  read-only\n        DESCRIPTION\n            \"The agent is not required to\
    \ support SET\n            operations to this object.\"\n        OBJECT traceRouteCtlByPassRouteTable\n\
    \        MIN-ACCESS  read-only\n        DESCRIPTION\n            \"This object\
    \ is not required by implementations that\n            are not capable of its\
    \ implementation.  The function\n            represented by this object is implementable\
    \ if the\n            setsockopt SOL_SOCKET SO_DONTROUTE option is\n         \
    \   supported.\"\n        OBJECT traceRouteCtlSourceAddressType\n        SYNTAX\
    \  InetAddressType { unknown(0), ipv4(1), ipv6(2) }\n        MIN-ACCESS  read-only\n\
    \        DESCRIPTION\n            \"This object is not required by implementations\
    \ that\n            are not capable of binding the send socket with a\n      \
    \      source address. An implementation is only required to\n            support\
    \ IPv4 and IPv6 addresses.\"\n        OBJECT traceRouteCtlSourceAddress\n    \
    \    SYNTAX  InetAddress (SIZE(0|4|16))\n        MIN-ACCESS  read-only\n     \
    \   DESCRIPTION\n            \"This object is not required by implementations\
    \ that\n            are not capable of binding the send socket with a\n      \
    \      source address. An implementation is only required to\n            support\
    \ IPv4 and globally unique IPv6 addresses.\"\n        OBJECT traceRouteCtlIfIndex\n\
    \        MIN-ACCESS  read-only\n        DESCRIPTION\n            \"Write access\
    \ is not required.  When write access is\n            not supported return a 0\
    \ as the value of this object.\n            A value of 0 implies that the function\
    \ represented by\n            this option is not supported.\"\n        OBJECT\
    \ traceRouteCtlMiscOptions\n        MIN-ACCESS  read-only\n        DESCRIPTION\n\
    \            \"Support of this object is optional.  When not\n            supporting\
    \ do not allow write access and return a\n            zero length octet string\
    \ as the value of the object.\"\n        OBJECT traceRouteCtlStorageType\n   \
    \     MIN-ACCESS  read-only\n        DESCRIPTION\n            \"Write access is\
    \ not required.  It is also allowed\n            for implementations to support\
    \ only the volatile\n            StorageType enumeration.\"\n        OBJECT traceRouteCtlDSField\n\
    \        MIN-ACCESS  read-only\n        DESCRIPTION\n            \"Write access\
    \ is not required.   When write access is\n            not supported return a\
    \ 0 as the value of this object.\n            A value of 0 implies that the function\
    \ represented by\n            this option is not supported.\"\n        OBJECT\
    \ traceRouteCtlType\n        MIN-ACCESS  read-only\n        DESCRIPTION\n    \
    \        \"Write access is not required.  In addition, the only\n            value\
    \ that is RECOMMENDED to be supported by an\n            implementation is traceRouteUsingUdpProbes.\"\
    \n        OBJECT traceRouteResultsIpTgtAddrType\n        SYNTAX  InetAddressType\
    \ { unknown(0), ipv4(1), ipv6(2) }\n        DESCRIPTION\n            \"An implementation\
    \ should only support IPv4 and\n            globally unique IPv6 address values\
    \ for this object.\"\n        OBJECT traceRouteResultsIpTgtAddr\n        SYNTAX\
    \  InetAddress (SIZE(0|4|16))\n        DESCRIPTION\n            \"An implementation\
    \ should only support IPv4 and\n            globally unique IPv6 address values\
    \ for this object.\"\n        OBJECT traceRouteProbeHistoryHAddrType\n       \
    \ SYNTAX  InetAddressType { unknown(0), ipv4(1), ipv6(2) }\n        DESCRIPTION\n\
    \            \"An implementation should only support IPv4 and\n            globally\
    \ unique IPv6 address values for this object.\"\n        OBJECT traceRouteProbeHistoryHAddr\n\
    \        SYNTAX  InetAddress (SIZE(0|4|16))\n        DESCRIPTION\n           \
    \ \"An implementation should only support IPv4 and\n            globally unique\
    \ IPv6 address values for this object.\"\n        OBJECT traceRouteHopsIpTgtAddressType\n\
    \        SYNTAX  InetAddressType { unknown(0), ipv4(1), ipv6(2) }\n        DESCRIPTION\n\
    \            \"An implementation should only support IPv4 and\n            globally\
    \ unique IPv6 address values for this object.\"\n        OBJECT traceRouteHopsIpTgtAddress\n\
    \        SYNTAX  InetAddress (SIZE(0|4|16))\n        DESCRIPTION\n           \
    \ \"An implementation should only support IPv4 and\n            globally unique\
    \ IPv6 address values for this object.\"\n    ::= { traceRouteCompliances 1 }\n\
    \ -- MIB groupings\n traceRouteGroup OBJECT-GROUP\n   OBJECTS {\n            \
    \ traceRouteMaxConcurrentRequests,\n             traceRouteCtlTargetAddressType,\n\
    \             traceRouteCtlTargetAddress,\n             traceRouteCtlByPassRouteTable,\n\
    \             traceRouteCtlDataSize,\n             traceRouteCtlTimeOut,\n   \
    \          traceRouteCtlProbesPerHop,\n             traceRouteCtlPort,\n     \
    \        traceRouteCtlMaxTtl,\n             traceRouteCtlDSField,\n          \
    \   traceRouteCtlSourceAddressType,\n             traceRouteCtlSourceAddress,\n\
    \             traceRouteCtlIfIndex,\n             traceRouteCtlMiscOptions,\n\
    \             traceRouteCtlMaxFailures,\n             traceRouteCtlDontFragment,\n\
    \             traceRouteCtlInitialTtl,\n             traceRouteCtlFrequency,\n\
    \             traceRouteCtlStorageType,\n             traceRouteCtlAdminStatus,\n\
    \             traceRouteCtlMaxRows,\n             traceRouteCtlTrapGeneration,\n\
    \             traceRouteCtlDescr,\n             traceRouteCtlCreateHopsEntries,\n\
    \             traceRouteCtlType,\n             traceRouteCtlRowStatus,\n     \
    \        traceRouteResultsOperStatus,\n             traceRouteResultsCurHopCount,\n\
    \             traceRouteResultsCurProbeCount,\n             traceRouteResultsIpTgtAddrType,\n\
    \             traceRouteResultsIpTgtAddr,\n             traceRouteResultsTestAttempts,\n\
    \             traceRouteResultsTestSuccesses,\n             traceRouteProbeHistoryHAddrType,\n\
    \             traceRouteProbeHistoryHAddr,\n             traceRouteProbeHistoryResponse,\n\
    \             traceRouteProbeHistoryStatus,\n             traceRouteProbeHistoryLastRC\n\
    \          }\n   STATUS  current\n   DESCRIPTION\n       \"The group of objects\
    \ that comprise the remote traceroute\n       operation.\"\n   ::= { traceRouteGroups\
    \ 1 }\n traceRouteTimeStampGroup OBJECT-GROUP\n   OBJECTS {\n             traceRouteResultsLastGoodPath,\n\
    \             traceRouteProbeHistoryTime\n           }\n   STATUS  current\n \
    \  DESCRIPTION\n       \"The group of DateAndTime objects.\"\n    ::= { traceRouteGroups\
    \ 2 }\n traceRouteNotificationsGroup NOTIFICATION-GROUP\n   NOTIFICATIONS {\n\
    \             traceRoutePathChange,\n             traceRouteTestFailed,\n    \
    \         traceRouteTestCompleted\n          }\n   STATUS   current\n   DESCRIPTION\n\
    \       \"The notifications which are required to be supported by\n       implementations\
    \ of this MIB.\"\n   ::= { traceRouteGroups 3 }\n traceRouteHopsTableGroup OBJECT-GROUP\n\
    \   OBJECTS {\n             traceRouteHopsIpTgtAddressType,\n             traceRouteHopsIpTgtAddress,\n\
    \             traceRouteHopsMinRtt,\n             traceRouteHopsMaxRtt,\n    \
    \         traceRouteHopsAverageRtt,\n             traceRouteHopsRttSumOfSquares,\n\
    \             traceRouteHopsSentProbes,\n             traceRouteHopsProbeResponses,\n\
    \             traceRouteHopsLastGoodProbe\n           }\n    STATUS   current\n\
    \    DESCRIPTION\n        \"The group of objects that comprise the traceRouteHopsTable.\"\
    \n  ::= { traceRouteGroups 4 }\n"
- title: END
  contents:
  - 'END

    '
- title: 4.3  DISMAN-NSLOOKUP-MIB
  contents:
  - '4.3  DISMAN-NSLOOKUP-MIB

    '
- title: DISMAN-NSLOOKUP-MIB DEFINITIONS ::= BEGIN
  contents:
  - 'DISMAN-NSLOOKUP-MIB DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n    MODULE-IDENTITY, OBJECT-TYPE,\n    Unsigned32, mib-2, Integer32\n\
    \        FROM SNMPv2-SMI                  -- RFC2578\n    RowStatus\n        FROM\
    \ SNMPv2-TC                   -- RFC2579\n    MODULE-COMPLIANCE, OBJECT-GROUP\n\
    \        FROM SNMPv2-CONF                 -- RFC2580\n    SnmpAdminString\n  \
    \      FROM SNMP-FRAMEWORK-MIB          -- RFC2571\n    InetAddressType, InetAddress\n\
    \        FROM INET-ADDRESS-MIB;           -- RFC2851\n lookupMIB MODULE-IDENTITY\n\
    \    LAST-UPDATED \"200009210000Z\"         -- 21 September 2000\n    ORGANIZATION\
    \ \"IETF Distributed Management Working Group\"\n    CONTACT-INFO\n        \"\
    Kenneth White\n        International Business Machines Corporation\n        Network\
    \ Computing Software Division\n        Research Triangle Park, NC, USA\n     \
    \   E-mail: wkenneth@us.ibm.com\"\n    DESCRIPTION\n        \"The Lookup MIB (DISMAN-NSLOOKUP-MIB)\
    \ enables determination\n        of either the name(s) corresponding to a host\
    \ address or of\n        the address(es) associated with a host name at a remote\
    \ host.\"\n     --  Revision history\n     REVISION     \"200009210000Z\"    \
    \     -- 21 September 2000\n     DESCRIPTION\n         \"Initial version, published\
    \ as RFC 2925.\"\n    ::= { mib-2 82 }\n -- Top level structure of the MIB\n lookupObjects\
    \        OBJECT IDENTIFIER ::= { lookupMIB 1 }\n lookupConformance    OBJECT IDENTIFIER\
    \ ::= { lookupMIB 2 }\n -- Simple Object Definitions\n lookupMaxConcurrentRequests\
    \ OBJECT-TYPE\n    SYNTAX      Unsigned32\n    UNITS       \"requests\"\n    MAX-ACCESS\
    \  read-write\n    STATUS      current\n    DESCRIPTION\n       \"The maximum\
    \ number of concurrent active lookup requests\n       that are allowed within\
    \ an agent implementation.  A value\n       of 0 for this object implies that\
    \ there is no limit for\n       the number of concurrent active requests in effect.\"\
    \n    DEFVAL { 10 }\n    ::= { lookupObjects 1 }\n lookupPurgeTime OBJECT-TYPE\n\
    \    SYNTAX      Unsigned32 (0..86400)\n    UNITS       \"seconds\"\n    MAX-ACCESS\
    \  read-write\n    STATUS      current\n    DESCRIPTION\n       \"The amount of\
    \ time to wait before automatically\n       deleting an entry in the lookupCtlTable\
    \ and any\n       dependent lookupResultsTable entries\n       after the lookup\
    \ operation represented by an\n       lookupCtlEntry has completed.\n       An\
    \ lookupCtEntry is considered complete\n       when its lookupCtlOperStatus object\
    \ has a\n       value of completed(3).\"\n    DEFVAL { 900 }  -- 15 minutes as\
    \ default\n    ::= { lookupObjects 2 }\n -- Lookup Control Table\n lookupCtlTable\
    \ OBJECT-TYPE\n    SYNTAX      SEQUENCE OF LookupCtlEntry\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Defines the Lookup Control\
    \ Table for providing\n        the capability of performing a lookup operation,\n\
    \        gethostbyname or gethostbyaddr, from a remote host.\"\n   ::= { lookupObjects\
    \ 3 }\n lookupCtlEntry OBJECT-TYPE\n    SYNTAX      LookupCtlEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"Defines\
    \ an entry in the lookupCtlTable.  A\n        lookupCtlEntry is initially indexed\
    \ by\n        lookupCtlOwnerIndex, which is of type SnmpAdminString,\n       \
    \ a textual convention that allows for use of the SNMPv3\n        View-Based Access\
    \ Control Model (RFC 2575 [11], VACM)\n        and also allows an management application\
    \ to identify\n        its entries.  The second index element,\n        lookupCtlOperationName,\
    \ enables the same\n        lookupCtlOwnerIndex entity to have multiple outstanding\n\
    \        requests.\n        The value of lookupCtlTargetAddressType determines\
    \ which\n        lookup function to perform.  Specification of dns(16)\n     \
    \   as the value of this index implies that the gethostbyname\n        function\
    \ should be performed to determine the numeric\n        addresses associated with\
    \ a symbolic name via\n        lookupResultsTable entries.  Use of a value of\
    \ either\n        ipv4(1) or ipv6(2) implies that the gethostbyaddr function\n\
    \        should be performed to determine the symbolic name(s)\n        associated\
    \ with a numeric address at a remote host.\"\n    INDEX {\n             lookupCtlOwnerIndex,\n\
    \             lookupCtlOperationName\n          }\n    ::= { lookupCtlTable 1\
    \ }\n LookupCtlEntry ::=\n    SEQUENCE {\n        lookupCtlOwnerIndex        \
    \ SnmpAdminString,\n        lookupCtlOperationName      SnmpAdminString,\n   \
    \     lookupCtlTargetAddressType  InetAddressType,\n        lookupCtlTargetAddress\
    \      InetAddress,\n        lookupCtlOperStatus         INTEGER,\n        lookupCtlTime\
    \               Unsigned32,\n        lookupCtlRc                 Integer32,\n\
    \        lookupCtlRowStatus          RowStatus\n    }\n lookupCtlOwnerIndex OBJECT-TYPE\n\
    \    SYNTAX      SnmpAdminString (SIZE(0..32))\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n       \"To facilitate the provisioning\
    \ of access control by a\n       security administrator using the View-Based Access\n\
    \       Control Model (RFC 2575, VACM) for tables in which\n       multiple users\
    \ may need to independently create or\n       modify entries, the initial index\
    \ is used as an 'owner\n       index'.  Such an initial index has a syntax of\n\
    \       SnmpAdminString, and can thus be trivially mapped to a\n       securityName\
    \ or groupName as defined in VACM, in\n       accordance with a security policy.\n\
    \       When used in conjunction with such a security policy all\n       entries\
    \ in the table belonging to a particular user (or\n       group) will have the\
    \ same value for this initial index.\n       For a given user's entries in a particular\
    \ table, the\n       object identifiers for the information in these entries\n\
    \       will have the same subidentifiers (except for the\n       'column' subidentifier)\
    \ up to the end of the encoded\n       owner index. To configure VACM to permit\
    \ access to this\n       portion of the table, one would create\n       vacmViewTreeFamilyTable\
    \ entries with the value of\n       vacmViewTreeFamilySubtree including the owner\
    \ index\n       portion, and vacmViewTreeFamilyMask 'wildcarding' the\n      \
    \ column subidentifier.  More elaborate configurations\n       are possible.\"\
    \n    ::= { lookupCtlEntry 1 }\n lookupCtlOperationName OBJECT-TYPE\n    SYNTAX\
    \      SnmpAdminString (SIZE(0..32))\n    MAX-ACCESS  not-accessible\n    STATUS\
    \      current\n    DESCRIPTION\n        \"The name of a lookup operation.  This\
    \ is locally unique,\n        within the scope of an lookupCtlOwnerIndex.\"\n\
    \    ::= { lookupCtlEntry 2 }\n lookupCtlTargetAddressType OBJECT-TYPE\n    SYNTAX\
    \      InetAddressType\n    MAX-ACCESS  read-create\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Specifies the type of address for either performing\
    \ a\n        gethostbyname or a gethostbyaddr function at a remote host.\n   \
    \     Specification of dns(16) as the value for this object\n        means that\
    \ the gethostbyname function should be performed\n        to return one or more\
    \ numeric addresses.  Use of a value\n        of either ipv4(1) or ipv6(2) means\
    \ that the gethostbyaddr\n        function should be used to return the symbolic\
    \ names\n        associated with a remote host.\"\n    ::= { lookupCtlEntry 3\
    \ }\n lookupCtlTargetAddress OBJECT-TYPE\n    SYNTAX      InetAddress\n    MAX-ACCESS\
    \  read-create\n    STATUS      current\n    DESCRIPTION\n        \"Specifies\
    \ the address used for a resolver lookup at a\n        remote host.  The corresponding\
    \ lookupCtlAddressType\n        objects determines its type as well as the function\n\
    \        that can be requested.\n        A value for this object MUST be set prior\
    \ to\n        transitioning its corresponding lookupCtlEntry to\n        active(1)\
    \ via lookupCtlRowStatus.\"\n    ::= { lookupCtlEntry 4 }\n lookupCtlOperStatus\
    \ OBJECT-TYPE\n    SYNTAX      INTEGER {\n                   notStarted(2), --\
    \ operation has not started\n                   completed(3)   -- operation is\
    \ done\n                }\n    MAX-ACCESS  read-only\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Reflects the operational state of an lookupCtlEntry:\n\
    \           enabled(1)    - Operation is active.\n           notStarted(2) - Operation\
    \ has not been enabled.\n           completed(3)  - Operation has completed.\n\
    \         An operation is automatically enabled(1) when its\n         lookupCtlRowStatus\
    \ object is transitioned to active(1)\n         status.  Until this occurs lookupCtlOperStatus\
    \ MUST\n         report a value of notStarted(2).  After the lookup\n        \
    \ operation completes (success or failure) the value\n         for lookupCtlOperStatus\
    \ MUST be transitioned to\n         completed(3).\"\n    ::= { lookupCtlEntry\
    \ 5 }\n lookupCtlTime OBJECT-TYPE\n    SYNTAX      Unsigned32\n    UNITS     \
    \  \"milliseconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Reports the number of milliseconds that a lookup\n        operation\
    \ required to be completed at a remote host.\n        Completed means operation\
    \ failure as well as\n        success.\"\n    ::= { lookupCtlEntry 6 }\n lookupCtlRc\
    \ OBJECT-TYPE\n    SYNTAX      Integer32\n    MAX-ACCESS  read-only\n    STATUS\
    \      current\n    DESCRIPTION\n        \"The system specific return code from\
    \ a lookup\n        operation.  All implementations MUST return a value\n    \
    \    of 0 for this object when the remote lookup\n        operation succeeds.\
    \  A non-zero value for this\n        objects indicates failure.  It is recommended\
    \ that\n        implementations that support errno use it as the\n        value\
    \ of this object to aid a management\n        application in determining the cause\
    \ of failure.\"\n    ::= { lookupCtlEntry 7 }\n lookupCtlRowStatus OBJECT-TYPE\n\
    \    SYNTAX      RowStatus\n    MAX-ACCESS  read-create\n    STATUS      current\n\
    \    DESCRIPTION\n        \"This object allows entries to be created and deleted\n\
    \        in the lookupCtlTable.\n        A remote lookup operation is started\
    \ when an\n        entry in this table is created via an SNMP SET\n        request\
    \ and the entry is activated.  This\n        occurs by setting the value of this\
    \ object\n        to CreateAndGo(4) during row creation or\n        by setting\
    \ this object to active(1) after\n        the row is created.\n        A value\
    \ MUST be specified for lookupCtlTargetAddress\n        prior to a transition\
    \ to active(1) state being\n        accepted.\n        A remote lookup operation\
    \ starts when its entry\n        first becomes active(1).  Transitions in and\n\
    \        out of active(1) state have no effect on the\n        operational behavior\
    \ of a remote lookup\n        operation, with the exception that deletion of\n\
    \        an entry in this table by setting its RowStatus\n        object to destroy(6)\
    \ will stop an active\n        remote lookup operation.\n        The operational\
    \ state of a remote lookup operation\n        can be determined by examination\
    \ of its\n        lookupCtlOperStatus object.\"\n    REFERENCE\n        \"See\
    \ definition of RowStatus in RFC 2579,\n        'Textual Conventions for SMIv2.'\"\
    \n    ::= { lookupCtlEntry 8 }\n"
- title: -- Lookup Results Table
  contents:
  - "-- Lookup Results Table\n lookupResultsTable OBJECT-TYPE\n    SYNTAX      SEQUENCE\
    \ OF LookupResultsEntry\n    MAX-ACCESS  not-accessible\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Defines the Lookup Results Table for providing\n \
    \       the capability of determining the results of a\n        operation at a\
    \ remote host.\n        One or more entries are added to the\n        lookupResultsTable\
    \ when a lookup operation,\n        as reflected by an lookupCtlEntry, completes\n\
    \        successfully.  All entries related to a\n        successful lookup operation\
    \ MUST be added\n        to the lookupResultsTable at the same time\n        that\
    \ the associating lookupCtlOperStatus\n        object is transitioned to completed(2).\n\
    \        The number of entries added depends on the\n        results determined\
    \ for a particular lookup\n        operation.  All entries associated with an\n\
    \        lookupCtlEntry are removed when the\n        lookupCtlEntry is deleted.\n\
    \        A remote host can be multi-homed and have more\n        than one IP address\
    \ associated with it\n        (gethostbyname results) and/or it can have more\n\
    \        than one symbolic name (gethostbyaddr results).\n        The gethostbyaddr\
    \ function is called with a\n        host address as its parameter and is used\n\
    \        primarily to determine a symbolic name to\n        associate with the\
    \ host address.  Entries in\n        the lookupResultsTable MUST be made for each\n\
    \        host name returned.  The official host name MUST\n        be assigned\
    \ a lookupResultsIndex of 1.\n        The gethostbyname function is called with\
    \ a\n        symbolic host name and is used primarily to\n        retrieve a host\
    \ address.  If possible the\n        primary host address SHOULD be assigned a\n\
    \        lookupResultsIndex of 1.\"\n   ::= { lookupObjects 4 }\n lookupResultsEntry\
    \ OBJECT-TYPE\n    SYNTAX      LookupResultsEntry\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Defines an entry in the lookupResultsTable.\
    \  The\n        first two index elements identify the\n        lookupCtlEntry\
    \ that a lookupResultsEntry belongs\n        to.  The third index element selects\
    \ a single\n        lookup operation result.\"\n    INDEX {\n             lookupCtlOwnerIndex,\n\
    \             lookupCtlOperationName,\n             lookupResultsIndex\n     \
    \     }\n    ::= { lookupResultsTable 1 }\n LookupResultsEntry ::=\n    SEQUENCE\
    \ {\n        lookupResultsIndex        Unsigned32,\n        lookupResultsAddressType\
    \  InetAddressType,\n        lookupResultsAddress      InetAddress\n     }\n lookupResultsIndex\
    \ OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..'ffffffff'h)\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Entries in the lookupResultsTable\
    \ are created when\n        the result of a lookup operation is determined.\n\
    \        Entries MUST be stored in the lookupResultsTable in\n        the order\
    \ that they are retrieved.  Values assigned\n        to lookupResultsIndex MUST\
    \ start at 1 and increase\n        in order.\"\n    ::= { lookupResultsEntry 1\
    \ }\n lookupResultsAddressType OBJECT-TYPE\n    SYNTAX      InetAddressType\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"Indicates the type of result of a remote lookup\n        operation.  A value\
    \ of unknown(0) implies that\n        either the operation hasn't been started\
    \ or that\n        it has failed.\"\n    ::= { lookupResultsEntry 2 }\n lookupResultsAddress\
    \ OBJECT-TYPE\n    SYNTAX      InetAddress\n    MAX-ACCESS  read-only\n    STATUS\
    \      current\n    DESCRIPTION\n        \"Reflects a result for a remote lookup\
    \ operation\n        as per the value of lookupResultsAddressType.\"\n    ::=\
    \ { lookupResultsEntry 3 }\n -- Conformance information\n -- Compliance statements\n\
    \ lookupCompliances OBJECT IDENTIFIER ::= { lookupConformance 1 }\n lookupGroups\
    \      OBJECT IDENTIFIER ::= { lookupConformance 2 }\n -- Compliance statements\n\
    \ lookupCompliance MODULE-COMPLIANCE\n    STATUS  current\n    DESCRIPTION\n \
    \           \"The compliance statement for the DISMAN-NSLOOKUP-MIB.\"\n    MODULE\
    \  -- this module\n        MANDATORY-GROUPS {\n                            lookupGroup\n\
    \                          }\n        OBJECT lookupMaxConcurrentRequests\n   \
    \     MIN-ACCESS  read-only\n        DESCRIPTION\n            \"The agent is not\
    \ required to support SET\n            operations to this object.\"\n        OBJECT\
    \ lookupPurgeTime\n        MIN-ACCESS  read-only\n        DESCRIPTION\n      \
    \      \"The agent is not required to support a SET\n            operation to\
    \ this object.\"\n    ::= { lookupCompliances 1 }\n -- MIB groupings\n lookupGroup\
    \ OBJECT-GROUP\n   OBJECTS {\n             lookupMaxConcurrentRequests,\n    \
    \         lookupPurgeTime,\n             lookupCtlOperStatus,\n             lookupCtlTargetAddressType,\n\
    \             lookupCtlTargetAddress,\n             lookupCtlTime,\n         \
    \    lookupCtlRc,\n             lookupCtlRowStatus,\n             lookupResultsAddressType,\n\
    \             lookupResultsAddress\n           }\n   STATUS  current\n   DESCRIPTION\n\
    \       \"The group of objects that comprise the remote\n       Lookup operation.\"\
    \n    ::= { lookupGroups 1 }\n"
- title: END
  contents:
  - 'END

    '
- title: 5.0  Security Considerations
  contents:
  - "5.0  Security Considerations\n   Certain management information in the MIBs defined\
    \ by this document\n   may be considered sensitive in some network environments.\
    \  Therefore,\n   authentication of received SNMP requests and controlled access\
    \ to\n   management information SHOULD be employed in such environments.  The\n\
    \   method for this authentication is a function of the SNMP\n   Administrative\
    \ Framework, and has not been expanded by this MIB.\n   To facilitate the provisioning\
    \ of access control by a security\n   administrator using the View-Based Access\
    \ Control Model (VACM)\n   defined in RFC 2575 [11] for tables in which multiple\
    \ users may need\n   to independently create or modify entries, the initial index\
    \ is used\n   as an \"owner index\".  Such an initial index has a syntax of\n\
    \   SnmpAdminString, and can thus be trivially mapped to a securityName\n   or\
    \ groupName as defined in VACM, in accordance with a security\n   policy.\n  \
    \ All entries in related tables belonging to a particular user will\n   have the\
    \ same value for this initial index.  For a given user's\n   entries in a particular\
    \ table, the object identifiers for the\n   information in these entries will\
    \ have the same subidentifiers\n   (except for the \"column\" subidentifier) up\
    \ to the end of the encoded\n   owner index. To configure VACM to permit access\
    \ to this portion of\n   the table, one would create vacmViewTreeFamilyTable entries\
    \ with the\n   value of vacmViewTreeFamilySubtree including the owner index portion,\n\
    \   and vacmViewTreeFamilyMask \"wildcarding\" the column subidentifier.\n   More\
    \ elaborate configurations are possible.  The VACM access control\n   mechanism\
    \ described above provides control.\n   In general, both the ping and traceroute\
    \ functions when used\n   excessively are considered a form of system attack.\
    \  In the case of\n   ping sending a system requests too often can negatively\
    \ effect its\n   performance or attempting to connect to what is supposed to be\
    \ an\n   unused port can be very unpredictable.  Excessive use of the\n   traceroute\
    \ capability can like ping negatively affect system\n   performance.  In insecure\
    \ environments it is RECOMMENDED that the\n   MIBs defined within this memo not\
    \ be supported.\n"
- title: 6.0  Intellectual Property
  contents:
  - "6.0  Intellectual Property\n   The IETF takes no position regarding the validity\
    \ or scope of any\n   intellectual property or other rights that might be claimed\
    \ to\n   pertain to the implementation or use of the technology described in\n\
    \   this document or the extent to which any license under such rights\n   might\
    \ or might not be available; neither does it represent that it\n   has made any\
    \ effort to identify any such rights.  Information on the\n   IETF's procedures\
    \ with respect to rights in standards-track and\n   standards-related documentation\
    \ can be found in BCP-11.  Copies of\n   claims of rights made available for publication\
    \ and any assurances of\n   licenses to be made available, or the result of an\
    \ attempt made to\n   obtain a general license or permission for the use of such\n\
    \   proprietary rights by implementers or users of this specification can\n  \
    \ be obtained from the IETF Secretariat.\n   The IETF invites any interested party\
    \ to bring to its attention any\n   copyrights, patents or patent applications,\
    \ or other proprietary\n   rights which may cover technology that may be required\
    \ to practice\n   this standard.  Please address the information to the IETF Executive\n\
    \   Director.\n"
- title: 7.0  Acknowledgments
  contents:
  - "7.0  Acknowledgments\n   This document is a product of the DISMAN Working Group.\n"
- title: 8.0  References
  contents:
  - "8.0  References\n   [1]  Case, J., Fedor, M., Schoffstall, M. and J. Davin, \"\
    Simple\n        Network Management Protocol\", STD 15, RFC 1157, May 1990.\n \
    \  [2]  Postel, J., \"Echo Protocol\", STD 20, RFC 862, May 1983.\n   [3]  McCloghrie,\
    \ K., Perkins, D., Schoenwaelder, J., Case, J., Rose,\n        M. and S. Waldbusser,\
    \ \"Structure of Management Information\n        Version 2 (SMIv2)\", STD 58,\
    \ RFC 2578, April 1999.\n   [4]  McCloghrie, K., Perkins, D., Schoenwaelder, J.,\
    \ Case, J., Rose,\n        M. and S. Waldbusser, \"Textual Conventions for SMIv2\"\
    , STD 58,\n        RFC 2579, April 1999.\n   [5]  McCloghrie, K., Perkins, D.,\
    \ Schoenwaelder, J., Case, J., Rose,\n        M. and S. Waldbusser, \"Conformance\
    \ Statements for SMIv2\", STD\n        58, RFC 2580, April 1999.\n   [6]  Case,\
    \ J., McCloghrie, K., Rose, M. and S. Waldbusser, \"Protocol\n        Operations\
    \ for Version 2 of the Simple Network Management\n        Protocol (SNMPv2)\"\
    , RFC 1905, January 1996.\n   [7]  Harrington D., Presuhn, R. and B. Wijnen, \"\
    An Architecture for\n        Describing SNMP Management Frameworks\", RFC 2571,\
    \ April 1999.\n   [8]  Case, J., Harrington D., Presuhn, R. and B. Wijnen, \"\
    Message\n        Processing and Dispatching for the Simple Network Management\n\
    \        Protocol (SNMP)\", RFC 2572, April 1999.\n   [9]  Levi D., Meyer, P.\
    \ and B. Stewart, \"SNMPv3 Applications\", RFC\n        2573, April 1999.\n  \
    \ [10] Blumenthal, U. and B. Wijnen, \"User-based Security Model (USM)\n     \
    \   for version 3 of the Simple Network Management Protocol\n        (SNMPv3)\"\
    , RFC 2574, April 1999.\n   [11] Wijnen, B., Presuhn, R. and K. McCloghrie, \"\
    View-based Access\n        Control Model (VACM) for the Simple Network Management\
    \ Protocol\n        (SNMP)\", RFC 2575, April 1999.\n   [12] Hovey, R. and S.\
    \ Bradner, \"The Organizations Involved in the\n        IETF Standards Process\"\
    , BCP 11, RFC 2028, October 1996.\n   [13] Bradner, S., \"Key words for use in\
    \ RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [14] Rose, M. and K. McCloghrie, \"Structure and Identification of\n     \
    \   Management Information for TCP/IP-based Internets\", RFC 1155,\n        May\
    \ 1990.\n   [15] Rose, M. and K. McCloghrie, \"Concise MIB Definitions\", RFC\
    \ 1212,\n        March 1991.\n   [16] Rose, M., \"A Convention for Defining Traps\
    \ for use with the\n        SNMP\", RFC 1215, March 1991.\n   [17] Case, J., McCloghrie,\
    \ K., Rose, M. and S. Waldbusser,\n        \"Introduction to Community-based SNMPv2\"\
    , RFC 1901, January\n        1996.\n   [18] Case, J., McCloghrie, K., Rose, M.\
    \ and S. Waldbusser, \"Transport\n        Mappings for Version 2 of the Simple\
    \ Network Management Protocol\n        (SNMPv2)\", RFC 1906, January 1996.\n \
    \  [19] Bradner, S., \"The Internet Standards Process -- Revision 3\", RFC\n \
    \       2026, BCP 9, October 1996.\n   [20] Postel, J., \"Internet Control Message\
    \ Protocol\", RFC 792,\n        September 1981.\n   [21] Nichols, K., Blake, S.,\
    \ Baker, F. and D. Black, \"Definition of\n        the Differentiated Services\
    \ Field (DS Field) in the IPv4 and\n        IPv6 Headers\", RFC 2474, December\
    \ 1998.\n   [22] Daniele, M., Haberman, B., Routhier, S. and J. Schoenwaelder,\n\
    \        \"Textual Conventions for Internet Network Addresses\", RFC 2851,\n \
    \       June 2000.\n   [23] McCloghrie, K. and F. Kastenholz, \"The Interfaces\
    \ Group MIB\",\n        RFC 2863, June 2000.\n"
- title: 9.0  Author's Address
  contents:
  - "9.0  Author's Address\n   Kenneth D. White\n   Dept. BRQA/Bldg. 501/G114\n  \
    \ IBM Corporation\n   P.O.Box 12195\n   3039 Cornwallis\n   Research Triangle\
    \ Park, NC 27709, USA\n   EMail: wkenneth@us.ibm.com\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
