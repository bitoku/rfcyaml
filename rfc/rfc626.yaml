- title: __initial_text__
  contents:
  - "                \"On a Possible Lockup Condition in the\n                 IMP\
    \ Subnet Due to Message Sequencing\"\nLockup or deadlock conditions are one of\
    \ the most serious system malfunctions\nthat can occur in a computer system or\
    \ network.  Communication protocols have \nto be designed very carefully to avoid\
    \ the occurrence of these lockups.  Their\ncommon characteristic is that they\
    \ occur only under unusual circumstances which\nwere not foreseen or deemed too\
    \ unlikely to occur by the protocol designers.  \n(However, these designers often\
    \ are not the ones in a position to evaluate\nsuch likelihoods quantitatively.)\n\
    The best known lockup that has occurred in the ARPANET is the reassembly\nlockup\
    \ [1].  The store-and-forward lockup, also described in Reference 1, has\nbeen\
    \ avoided in the new IMPSYS by carefully observing Kahn's heuristics [1].  \n\
    The last lockup in the subnet we know of occurred on December 21, 1973 \n(Christmas\
    \ lockup\").  This dormant lockup conditions was brought to light\nby collecting\
    \ snapshot measurement messages from all sites simultaneously.\nThe Christmas\
    \ lockup happened when snapshot messages arrived at ther UCLA IMP\nwhich had allocated\
    \ reassembly storage for them and no reassembly blocks were\nfree.  (A reassembly\
    \ block is a piece of storage used in the actual process\nof reassembling packets\
    \ back into messages) [2]. \nDeadlock conditions have not only been observed in\
    \ the subnet but also in\nhigher level protocols.  The original design of the\
    \ ICP, for example, had a\nflaw that was discovered only after a few months of\
    \ use [3,4].  More recently\nBBN reported a deadlock problem involving the exchange\
    \ of HOST status\ninformation by the RSEXEC server (RSSER) programs [5].\nAs long\
    \ as it is not possible to design practical communication protocols\nwhich guarantee\
    \ deadlock-free operation it is vital to continually check those\nprotocols that\
    \ are currently in use for any such failures - even if they appear\n\"very unlikely\"\
    \ to occur.  In this RFC we comment on a possible deadlock\ncondition in the IMP\
    \ subnet which, to our knowledge, has not yet occurred,\nneither has it been identified.\
    \  Though we have never seen this problem \nactually happen it may occur in the\
    \ future if no precautions are taken.  This\npossible lockup condition is due\
    \ to the sequencing of messages in the subset.\nTo avoid the occurrence of reassembly\
    \ lockup, the flow control mechanism in\nthe subnet was modified in some significant\
    \ ways.  Currently there is a limit\nof four messages that can simultaneously\
    \ be in transmission between any pair of\nsource and destination IMPs.  As a result\
    \ of removing the link-handling from\nthe old IMPSYS, it became necessary to introduce\
    \ a message sequencing \nmechanism.\nMessages leave the destination IMP in the\
    \ same order as they entered the source\nIMP.  (Note that the sequencing is done\
    \ on an IMP-to-IMP basis, not a HOST-to-\nHost basis.  This may introduce undesirable\
    \ \"sequencing delay\" if two HOSTs \nattached to the same destination IMP receive\
    \ messages from the same source \nIMP).\nSequencing of messages has, in general,\
    \ the potential of introducing deadlock\nconditions.  The reason for this is that\
    \ any message, say message (n+1), which\nis out of order (and therefore cannot\
    \ be delivered to its destination HOST)\nmay use up resources that are required\
    \ by message (n) which must be delivered\nnext.  Therefore, message (n) cannot\
    \ reach its destination IMP which, in turn,\nprevents the other messages (n+1),\
    \ etc) that are out of order from being \ndelivered to their destination HOST(s).\
    \  For this reason one has to be very\ncareful not to allocate too many resources\
    \ (e.g., buffers) to messages that\nare out of order.\nTo avoid lockup conditions\
    \ the current IMPSYS takes the following two\nprecautions:\n\t1.  Requests for\
    \ buffer allocation are always services in order\n\t    of message number; i.e.,\
    \ no 'ALLOCATE' is returned for \n\t    message (n+1) if message (n) (or a request\
    \ for buffer\n\t    allocation for message (n)) has not yet been received and\n\
    \t    serviced.\n\t2.  Single packet messages (regular and priority) that arrive\n\
    \t    at the destination IMP out of order are not accepted unless\n\t    they\
    \ were retransmitted in response to a previous buffer\n\t    allocation.  These\
    \ messages are treated rather as a request \n\t    for the allocation of one buffer\
    \ (according to 1 above) and\n\t    then discarded.\nWith these two precautions\
    \ a deadlock condition appears to be impossible to\noccur.  However, there is\
    \ a second buffer allocation mechanism that is not\ntried to the message sequencing,\
    \ namely the 'ALLOCATE' that is piggy-backed\non the RFNM for a multiple-packet\
    \ message.  The piggy-backed ALLOCATE\nrepresents a buffer allocation for the\
    \ next multiple-packet message, and NOT\nfor the next message in sequence.  Thus,\
    \ if the next message in sequence is\na single-packet message, the piggy-backed\
    \ ALLOCATE in effect allocates\nbuffers to a message that is out of order.\nLet\
    \ us see how this situation can lead to a deadlock condition.  Assume there\n\
    is a maximum number of 24 reassembly buffers in each IMP.\nLet IMPs A, B, and\
    \ C continually transmit 8-packet messages to the same\ndestination IMP D such\
    \ that all 24 reassembly buffers in IMP D are used up by\nthis transmission of\
    \ multiple packet messages.  If now, in the stream of\n8-packet messages, IMP\
    \ A sends a single-packet message it will generally not\nbe accepted by destination\
    \ IMP D since there is no reassembly buffer space\navailable.  (There may be a\
    \ free reassembly buffer if the single-packet message\nhappens to arrive during\
    \ the time one of the three 8-packet messages is being\ntransmitted to its HOST).\
    \  The single-packet message will therefore be treated\nas a request for buffer\
    \ allocation.  This request will not be serviced before\nthe RFNM of the previous\
    \ multiple-packet message is sent.  At this time, \nhowever, all the free reassembly\
    \ buffers have already been allocated to the\nnext multiple-packet message via\
    \ the piggy-backed ALLOCATE mechanism.  The\nonly chance for the single-packet\
    \ message to get its allocation request\nsatisfied is to grab a reassembly buffer\
    \ from one of the other two 8-packet\nmessages.  This attempt may be unsuccessful\
    \ because it depends on the timing\nof events in the IMP. A deadlock condition\
    \ can occur if IMP B and IMP C\nalso send a single-packet message in their stream\
    \ of 8-packet measures which\ncannot be serviced for the same reason.  In this\
    \ case, the three 8-packet\nmessages that will arrive later at IMP D cannot be\
    \ delivered to their\ndestination HOST(s) because they are out of order.  The\
    \ three single-packet \nmessages that should be delivered next, however, will\
    \ never reach the\ndestination IMP since there is no reassembly space available.\n\
    A possible sequence of event that leads to a deadlock condition can be\ndescribed\
    \ as follows:\n  Examples for Notation:\n\tevent:  A8 arrives  ->\t\tall 8 packets\
    \ of the 8-packet message\n\t\t\t\t\tfrom IMP A have arrived at IMP D\n\tevent:\
    \  C1 arrives  ->\t\ta single packet message from IMP C has\n\t\t\t\t\tarrived\
    \ at IMP D (and is treated as a\n\t\t\t\t\trequest for buffer allocation)\n\t\
    event:  B8 complete ->\t\tthe last packet of the 8-packet\n\t\t\t\t\tmessage from\
    \ IMP B has been received\n\t\t\t\t\tby its destination HOST\n\tevent:  A8 RFNM/ALL\
    \ ->\t\ta RFNM with the piggy-backed ALLOCATE\n\t\t\t\t\tis sent to IMP A\n\t\t\
    \    # of Allocated\t# of Reassembly\t\t# of Free\n\t\t     Reassembly\t\t   Buffers\t\
    \tReassembly\n\t\t      Buffers              in Use\t\t Buffers\n     Initially\t\
    \t24\t\t      0\t\t\t    0\n 1.  A8 arrives\t\t16\t\t      8\t\t\t    0\n 2. \
    \ B8 arrives\t\t 8\t\t     16\t\t\t    0\n 3.  C8 arrives\t\t 0\t\t     24\t\t\
    \t    0\n 4.  Al arrives\t\t 0\t\t     24\t\t\t    0\n 5.  B1\tarrives\t\t 0\t\
    \t     24\t\t\t    0\n 6.  C1 arrives\t\t 0\t\t     24\t\t\t    0\n 7.  A8 complete\t\
    \ 0\t\t     16\t\t\t    8\n 8.  B8 complete\t 0\t\t      8\t\t\t   16\n 9.  C8\
    \ complete\t 0\t\t      0\t\t\t   24\n10.  A8 RFNM/ALL\t 8\t\t      0\t\t\t  \
    \ 16\n11.  B8 RFNM/ALL\t16\t\t      0\t\t\t    8\n12.  C8 RFNM/ALL\t24\t\t   \
    \   0\t\t\t    0\n13.  A8 arrives\t\t16\t\t      8\t\t\t    0\n14.  B8 arrives\t\
    \t 8\t\t     16\t\t\t    0\n15.  C8 arrives\t\t 0\t\t     24\t\t\t    0\n16. \
    \ - deadlock -\nNote that an ALLOCATE for one of the single-packet messages A1,\
    \ B1 and C1 can\nonly be returned to source IMP A, B, and C, respectively, after\
    \ the RFNM\n(with its piggy-backed ALLOCATE) for the previous 8-packet message\
    \ has been\nsent.  If these RFNMs are sent in sequence, i.e., without an ALLOCATE\
    \ for\none of the single-packet messages in between, the temporarily freed reassembly\n\
    storage (events (7) through (9) is implicitly allocated to the next multiple-\n\
    packet messages (events (10) through (12) and not to any of the single-packet\n\
    messages.  The next 8-packet messages are, however, out of order and\ncannot be\
    \ delivered to their destination HOST(s).\nRight now it looks as if such a lockup\
    \ can only occur if the number of\nreassembly buffers is a multiple of eight.\
    \  Indeed, the probability of a \nlockup in this latter case is much higher. \
    \ However, deadlocks can also occur\nif the number of reassembly buffers is not\
    \ a multiple of eight.\nLet us assume there are 26 instead of 24 reassembly buffers.\
    \  Assume also that,\ndue to alternate paths, line failure, or retransmission,\
    \ the second packet of\na 2-packet message arrives at IMP D before a single-packet\
    \ message from the \nsame source IMP A.  The single-packet message has a smaller\
    \ sequence number \nand must therefore be delivered to its destination HOST before\
    \ the 2-packet\nmessage.  When the second packet of the 2-packet message arrives\
    \ at IMP D the\nIMP realizes that only 2 of the allocated 8 buffers will be needed.\
    \  Therefore\n6 buffers are returned to the pool of free reassembly buffers. \
    \ If there were\n26-3x8=2 buffers in the pool before, the pool size is increased\
    \ by 6 to 8\nbuffers.  These 8 buffers, however, are just enough to send out another\n\
    piggy-backed ALLOCATE.  The single-packet message will therefore find the pool\n\
    of free reassembly buffers empty although the total number of reassembly\nbuffers\
    \ is not a multiple of eight.  The 2-packet message cannot be delivered\nto its\
    \ destination HOST because it is out of order.  Therefore the deadlock\ncondition\
    \ we described before may occur again.\nWe agree that the above mentioned sequence\
    \ of events is unlikely to occur\n(otherwise one would have observed it already).\
    \  This is particularly true\nsince the current maximum number of reassembly buffers\
    \ (58) is much larger\nthan 24.  Judging from past experience with computer systems\
    \ and networks,\nhowever, we know that even very unlikely events have a tendency\
    \ to occur in the\nlong run.  Also, the probability of this deadlock condition\
    \ increases with \nincreasing traffic in the net.  Therefore, it is certainly\
    \ worthwhile to\nmodify the IMPSYS in such a way that this deadlock cannot occur.\
    \  It turns out\nthat a minor modification already achieves the desired effect.\
    \  Recall that \nthat described deadlock can only occur because single- and multiple-packet\
    \ \nmessages use the same pool of reassembly buffers.  If we set aside a single\n\
    reassembly buffer (or one for each destination HOST) that can be used only by\
    \ \nsingle-packet messages this lockup condition due to message sequencing cannot\n\
    occur.\nAnother solution to this problem is, of course, to more the message sequencing\n\
    from the IMP to the HOST level.  This does not mean that similar lockup\nproblems\
    \ cannot occur on the HOST level.  Also, it is currently much easier\nto resolve\
    \ this problem by a slight modification of the IMPSYS rather than\nhaving to coordinate\
    \ all the various HOSTs.  Another alternative is to\ndiscontinue the use of multiple-packet\
    \ messages.  However, this also involves\nmuch more drastic changes which require\
    \ careful consideration.\n                              REFERENCES\n1.  Kahn,\
    \ R. E. and W. R. Crowther, \"Flow Control in a Resource-Sharing\n    Computer\
    \ Network,\" IEEE Transactions on Communication, Volume COM-20,3\n    June 1972.\n\
    2.  BBN Report No. 2717, \"Interface Message Processors for the ARPA Computer\n\
    \    Network,\" Quarterly Technical Report No. 4, January 1974.\n3.  Naylor, W.,\
    \ J. Wong, C. Kline, and J. Postel, \"Regarding Proffered\n    Official ICP,\"\
    \ RFC 143, NIC 6728.\n4.  Postel, J. B. \"A Graph Model Analysis of Computer Communications\n\
    \    Protocols,\" PhD dissertation, University of California, Los Angeles.\n5.\
    \  BBN Report No. 2670.  \"Natural Communication with Computers IV,\"  Quarterly\n\
    \    Progress Report No. 12, October 1973.\n"
