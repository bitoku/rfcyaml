- title: __initial_text__
  contents:
  - '                    Extensible Binary Meta Language

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines the Extensible Binary Meta Language (EBML)\n\
    \   format as a binary container format designed for audio/video storage.\n  \
    \ EBML is designed as a binary equivalent to XML and uses a storage-\n   efficient\
    \ approach to build nested Elements with identifiers,\n   lengths, and values.\
    \  Similar to how an XML Schema defines the\n   structure and semantics of an\
    \ XML Document, this document defines how\n   EBML Schemas are created to convey\
    \ the semantics of an EBML Document.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8794.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Notation and Conventions\n   3.\
    \  Structure\n   4.  Variable-Size Integer\n     4.1.  VINT_WIDTH\n     4.2. \
    \ VINT_MARKER\n     4.3.  VINT_DATA\n     4.4.  VINT Examples\n   5.  Element\
    \ ID\n   6.  Element Data Size\n     6.1.  Data Size Format\n     6.2.  Unknown\
    \ Data Size\n     6.3.  Data Size Values\n   7.  EBML Element Types\n     7.1.\
    \  Signed Integer Element\n     7.2.  Unsigned Integer Element\n     7.3.  Float\
    \ Element\n     7.4.  String Element\n     7.5.  UTF-8 Element\n     7.6.  Date\
    \ Element\n     7.7.  Master Element\n     7.8.  Binary Element\n   8.  EBML Document\n\
    \     8.1.  EBML Header\n     8.2.  EBML Body\n   9.  EBML Stream\n   10. EBML\
    \ Versioning\n     10.1.  EBML Header Version\n     10.2.  EBML Document Version\n\
    \   11. Elements semantics\n     11.1.  EBML Schema\n       11.1.1.  EBML Schema\
    \ Example\n       11.1.2.  \"<EBMLSchema>\" Element\n       11.1.3.  \"<EBMLSchema>\"\
    \ Namespace\n       11.1.4.  \"<EBMLSchema>\" Attributes\n       11.1.5.  \"<element>\"\
    \ Element\n       11.1.6.  \"<element>\" Attributes\n       11.1.7.  \"<documentation>\"\
    \ Element\n       11.1.8.  \"<documentation>\" Attributes\n       11.1.9.  \"\
    <implementation_note>\" Element\n       11.1.10. \"<implementation_note>\" Attributes\n\
    \       11.1.11. \"<restriction>\" Element\n       11.1.12. \"<enum>\" Element\n\
    \       11.1.13. \"<enum>\" Attributes\n       11.1.14. \"<extension>\" Element\n\
    \       11.1.15. \"<extension>\" Attributes\n       11.1.16. XML Schema for EBML\
    \ Schema\n       11.1.17. Identically Recurring Elements\n       11.1.18. Textual\
    \ expression of floats\n       11.1.19. Note on the use of default attributes\
    \ to define\n               Mandatory EBML Elements\n     11.2.  EBML Header Elements\n\
    \       11.2.1.  EBML Element\n       11.2.2.  EBMLVersion Element\n       11.2.3.\
    \  EBMLReadVersion Element\n       11.2.4.  EBMLMaxIDLength Element\n       11.2.5.\
    \  EBMLMaxSizeLength Element\n       11.2.6.  DocType Element\n       11.2.7.\
    \  DocTypeVersion Element\n       11.2.8.  DocTypeReadVersion Element\n      \
    \ 11.2.9.  DocTypeExtension Element\n       11.2.10. DocTypeExtensionName Element\n\
    \       11.2.11. DocTypeExtensionVersion Element\n     11.3.  Global Elements\n\
    \       11.3.1.  CRC-32 Element\n       11.3.2.  Void Element\n   12. Considerations\
    \ for Reading EBML Data\n   13. Terminating Elements\n   14. Guidelines for Updating\
    \ Elements\n     14.1.  Reducing Element Data in Size\n       14.1.1.  Adding\
    \ a Void Element\n       14.1.2.  Extending the Element Data Size\n       14.1.3.\
    \  Terminating Element Data\n     14.2.  Considerations when Updating Elements\
    \ with Cyclic\n            Redundancy Check (CRC)\n   15. Backward and Forward\
    \ Compatibility\n     15.1.  Backward Compatibility\n     15.2.  Forward Compatibility\n\
    \   16. Security Considerations\n   17. IANA Considerations\n     17.1.  EBML\
    \ Element IDs Registry\n     17.2.  EBML DocTypes Registry\n   18. Normative References\n\
    \   19. Informative References\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   EBML, short for Extensible Binary Meta Language, specifies\
    \ a binary\n   format aligned with octets (bytes) and inspired by the principle\
    \ of\n   XML (a framework for structuring data).\n   The goal of this document\
    \ is to define a generic, binary, space-\n   efficient format that can be used\
    \ to define more complex formats\n   using an EBML Schema.  EBML is used by the\
    \ multimedia container,\n   Matroska [Matroska].  The applicability of EBML for\
    \ other use cases\n   is beyond the scope of this document.\n   The definition\
    \ of the EBML format recognizes the idea behind HTML and\n   XML as a good one:\
    \ separate structure and semantics allowing the same\n   structural layer to be\
    \ used with multiple, possibly widely differing,\n   semantic layers.  Except\
    \ for the EBML Header and a few Global\n   Elements, this specification does not\
    \ define particular EBML format\n   semantics; however, this specification is\
    \ intended to define how\n   other EBML-based formats can be defined, such as\
    \ the audio/video\n   container formats Matroska and WebM [WebM].\n   EBML uses\
    \ a simple approach of building Elements upon three pieces of\n   data (tag, length,\
    \ and value), as this approach is well known, easy\n   to parse, and allows selective\
    \ data parsing.  The EBML structure\n   additionally allows for hierarchical arrangement\
    \ to support complex\n   structural formats in an efficient manner.\n   A typical\
    \ EBML file has the following structure:\n   EBML Header (master)\n     + DocType\
    \ (string)\n     + DocTypeVersion (unsigned integer)\n   EBML Body Root (master)\n\
    \     + ElementA (utf-8)\n     + Parent (master)\n       + ElementB (integer)\n\
    \     + Parent (master)\n       + ElementB (integer)\n"
- title: 2.  Notation and Conventions
  contents:
  - "2.  Notation and Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n   This document defines specific terms\
    \ in order to define the format\n   and application of \"EBML\".  Specific terms\
    \ are defined below:\n   \"EBML\":  Extensible Binary Meta Language\n   \"EBML\
    \ Document Type\":  A name provided by an \"EBML Schema\" to\n      designate\
    \ a particular implementation of \"EBML\" for a data format\n      (e.g., Matroska\
    \ and WebM).\n   \"EBML Schema\":  A standardized definition for the structure\
    \ of an\n      \"EBML Document Type\".\n   \"EBML Document\":  A datastream comprised\
    \ of only two components, an\n      \"EBML Header\" and an \"EBML Body\".\n  \
    \ \"EBML Reader\":  A data parser that interprets the semantics of an\n      \"\
    EBML Document\" and creates a way for programs to use \"EBML\".\n   \"EBML Stream\"\
    :  A file that consists of one or more \"EBML Documents\"\n      that are concatenated\
    \ together.\n   \"EBML Header\":  A declaration that provides processing instructions\n\
    \      and identification of the \"EBML Body\".  The \"EBML Header\" is\n    \
    \  analogous to an XML Declaration [XML] (see Section 2.8 on \"Prolog\n      and\
    \ Document Type Declaration\").\n   \"EBML Body\":  All data of an \"EBML Document\"\
    \ following the \"EBML\n      Header\".\n   \"Variable-Size Integer\":  A compact\
    \ variable-length binary value that\n      defines its own length.\n   \"VINT\"\
    :  Also known as \"Variable-Size Integer\".\n   \"EBML Element\":  A foundation\
    \ block of data that contains three\n      parts: an \"Element ID\", an \"Element\
    \ Data Size\", and \"Element\n      Data\".\n   \"Element ID\":  A binary value,\
    \ encoded as a \"Variable-Size Integer\",\n      used to uniquely identify a defined\
    \ \"EBML Element\" within a\n      specific \"EBML Schema\".\n   \"Element Data\
    \ Size\":  An expression, encoded as a \"Variable-Size\n      Integer\", of the\
    \ length in octets of \"Element Data\".\n   \"VINTMAX\":  The maximum possible\
    \ value that can be stored as \"Element\n      Data Size\".\n   \"Unknown-Sized\
    \ Element\":  An \"Element\" with an unknown \"Element Data\n      Size\".\n \
    \  \"Element Data\":  The value(s) of the \"EBML Element\", which is\n      identified\
    \ by its \"Element ID\" and \"Element Data Size\".  The form\n      of the \"\
    Element Data\" is defined by this document and the\n      corresponding \"EBML\
    \ Schema\" of the Element's \"EBML Document Type\".\n   \"Root Level\":  The starting\
    \ level in the hierarchy of an \"EBML\n      Document\".\n   \"Root Element\"\
    :  A mandatory, nonrepeating \"EBML Element\" that occurs\n      at the top level\
    \ of the path hierarchy within an \"EBML Body\" and\n      contains all other\
    \ \"EBML Elements\" of the \"EBML Body\", excepting\n      optional \"Void Elements\"\
    .\n   \"Top-Level Element\":  An \"EBML Element\" defined to only occur as a\n\
    \      \"Child Element\" of the \"Root Element\".\n   \"Master Element\":  The\
    \ \"Master Element\" contains zero, one, or many\n      other \"EBML Elements\"\
    .\n   \"Child Element\":  A \"Child Element\" is a relative term to describe\n\
    \      the \"EBML Elements\" immediately contained within a \"Master\n      Element\"\
    .\n   \"Parent Element\":  A relative term to describe the \"Master Element\"\n\
    \      that contains a specified element.  For any specified \"EBML\n      Element\"\
    \ that is not at \"Root Level\", the \"Parent Element\" refers\n      to the \"\
    Master Element\" in which that \"EBML Element\" is directly\n      contained.\n\
    \   \"Descendant Element\":  A relative term to describe any \"EBML\n      Elements\"\
    \ contained within a \"Master Element\", including any of\n      the \"Child Elements\"\
    \ of its \"Child Elements\", and so on.\n   \"Void Element\":  An \"Element\"\
    \ used to overwrite data or reserve space\n      within a \"Master Element\" for\
    \ later use.\n   \"Element Name\":  The human-readable name of the \"EBML Element\"\
    .\n   \"Element Path\":  The hierarchy of \"Parent Element\" where the \"EBML\n\
    \      Element\" is expected to be found in the \"EBML Body\".\n   \"Empty Element\"\
    :  An \"EBML Element\" that has an \"Element Data Size\"\n      with all \"VINT_DATA\"\
    \ bits set to zero, which indicates that the\n      \"Element Data\" of the \"\
    Element\" is zero octets in length.\n"
- title: 3.  Structure
  contents:
  - "3.  Structure\n   EBML uses a system of Elements to compose an EBML Document.\
    \  EBML\n   Elements incorporate three parts: an Element ID, an Element Data\n\
    \   Size, and Element Data.  The Element Data, which is described by the\n   Element\
    \ ID, includes either binary data, one or more other EBML\n   Elements, or both.\n"
- title: 4.  Variable-Size Integer
  contents:
  - "4.  Variable-Size Integer\n   The Element ID and Element Data Size are both encoded\
    \ as a Variable-\n   Size Integer.  The Variable-Size Integer is composed of a\
    \ VINT_WIDTH,\n   VINT_MARKER, and VINT_DATA, in that order.  Variable-Size Integers\n\
    \   MUST left-pad the VINT_DATA value with zero bits so that the whole\n   Variable-Size\
    \ Integer is octet aligned.  The Variable-Size Integer\n   will be referred to\
    \ as VINT for shorthand.\n"
- title: 4.1.  VINT_WIDTH
  contents:
  - "4.1.  VINT_WIDTH\n   Each Variable-Size Integer starts with a VINT_WIDTH followed\
    \ by a\n   VINT_MARKER.  VINT_WIDTH is a sequence of zero or more bits of value\n\
    \   \"0\" and is terminated by the VINT_MARKER, which is a single bit of\n   value\
    \ \"1\".  The total length in bits of both VINT_WIDTH and\n   VINT_MARKER is the\
    \ total length in octets in of the Variable-Size\n   Integer.\n   The single bit\
    \ \"1\" starts a Variable-Size Integer with a length of\n   one octet.  The sequence\
    \ of bits \"01\" starts a Variable-Size Integer\n   with a length of two octets.\
    \ \"001\" starts a Variable-Size Integer\n   with a length of three octets, and\
    \ so on, with each additional \"0\"\n   bit adding one octet to the length of\
    \ the Variable-Size Integer.\n"
- title: 4.2.  VINT_MARKER
  contents:
  - "4.2.  VINT_MARKER\n   The VINT_MARKER serves as a separator between the VINT_WIDTH\
    \ and\n   VINT_DATA.  Each Variable-Size Integer MUST contain exactly one\n  \
    \ VINT_MARKER.  The VINT_MARKER is one bit in length and contain a bit\n   with\
    \ a value of one.  The first bit with a value of one within the\n   Variable-Size\
    \ Integer is the VINT_MARKER.\n"
- title: 4.3.  VINT_DATA
  contents:
  - "4.3.  VINT_DATA\n   The VINT_DATA portion of the Variable-Size Integer includes\
    \ all data\n   following (but not including) the VINT_MARKER until end of the\n\
    \   Variable-Size Integer whose length is derived from the VINT_WIDTH.\n   The\
    \ bits required for the VINT_WIDTH and the VINT_MARKER use one out\n   of every\
    \ eight bits of the total length of the Variable-Size Integer.\n   Thus, a Variable-Size\
    \ Integer of 1-octet length supplies 7 bits for\n   VINT_DATA, a 2-octet length\
    \ supplies 14 bits for VINT_DATA, and a\n   3-octet length supplies 21 bits for\
    \ VINT_DATA.  If the number of bits\n   required for VINT_DATA is less than the\
    \ bit size of VINT_DATA, then\n   VINT_DATA MUST be zero-padded to the left to\
    \ a size that fits.  The\n   VINT_DATA value MUST be expressed as a big-endian\
    \ unsigned integer.\n"
- title: 4.4.  VINT Examples
  contents:
  - "4.4.  VINT Examples\n   Table 1 shows examples of Variable-Size Integers with\
    \ lengths from 1\n   to 5 octets.  The \"Usable Bits\" column refers to the number\
    \ of bits\n   that can be used in the VINT_DATA.  The \"Representation\" column\n\
    \   depicts a binary expression of Variable-Size Integers where\n   VINT_WIDTH\
    \ is depicted by \"0\", the VINT_MARKER as \"1\", and the\n   VINT_DATA as \"\
    x\".\n      | Octet Length | Usable Bits | Representation                |\n \
    \     | 1            | 7           | 1xxx xxxx                     |\n      |\
    \ 2            | 14          | 01xx xxxx xxxx xxxx           |\n      | 3    \
    \        | 21          | 001x xxxx xxxx xxxx xxxx xxxx |\n      | 4          \
    \  | 28          | 0001 xxxx xxxx xxxx xxxx xxxx |\n      | 5            | 35\
    \          | 0000 1xxx xxxx xxxx xxxx xxxx |\n               Table 1: VINT examples\
    \ depicting usable bits\n   A Variable-Size Integer may be rendered at octet lengths\
    \ larger than\n   needed to store the data in order to facilitate overwriting\
    \ it at a\n   later date -- e.g., when its final size isn't known in advance.\
    \  In\n   Table 2, an integer \"2\" (with a corresponding binary value of 0b10)\n\
    \   is shown encoded as different Variable-Size Integers with lengths\n   from\
    \ one octet to four octets.  All four encoded examples have\n   identical semantic\
    \ meaning, though the VINT_WIDTH and the padding of\n   the VINT_DATA vary.\n\
    \   | Integer | Octet        |   As Represented in |  As Represented in |\n  \
    \ |         | Length       |       VINT (binary) | VINT (hexadecimal) |\n   |\
    \ 2       | 1            |           1000 0010 |               0x82 |\n   | 2\
    \       | 2            | 0100 0000 0000 0010 |             0x4002 |\n   | 2  \
    \     | 3            | 0010 0000 0000 0000 |           0x200002 |\n   | 2    \
    \   | 4            | 0001 0000 0000 0000 |         0x10000002 |\n   |        \
    \ |              | 0000 0000 0000 0010 |                    |\n      Table 2:\
    \ VINT examples depicting the same integer value rendered\n                  \
    \       at different VINT lengths\n"
- title: 5.  Element ID
  contents:
  - "5.  Element ID\n   An Element ID is a Variable-Size Integer.  By default, Element\
    \ IDs\n   are from one octet to four octets in length, although Element IDs of\n\
    \   greater lengths MAY be used if the EBMLMaxIDLength Element of the\n   EBML\
    \ Header is set to a value greater than four (see Section 11.2.4).\n   The bits\
    \ of the VINT_DATA component of the Element ID MUST NOT be all\n   \"0\" values\
    \ or all \"1\" values.  The VINT_DATA component of the Element\n   ID MUST be\
    \ encoded at the shortest valid length.  For example, an\n   Element ID with binary\
    \ encoding of \"1011 1111\" is valid, whereas an\n   Element ID with binary encoding\
    \ of \"0100 0000 0011 1111\" stores a\n   semantically equal VINT_DATA but is\
    \ invalid, because a shorter VINT\n   encoding is possible.  Additionally, an\
    \ Element ID with binary\n   encoding of \"1111 1111\" is invalid, since the VINT_DATA\
    \ section is\n   set to all one values, whereas an Element ID with binary encoding\
    \ of\n   \"0100 0000 0111 1111\" stores a semantically equal VINT_DATA and is\n\
    \   the shortest-possible VINT encoding.\n   Table 3 details these specific examples\
    \ further:\n    | VINT_WIDTH | VINT_MARKER |      VINT_DATA | Element ID Status\
    \  |\n    |            |           1 |        0000000 | Invalid: VINT_DATA |\n\
    \    |          0 |           1 | 00000000000000 | Invalid: VINT_DATA |\n    |\
    \            |           1 |        0000001 | Valid              |\n    |    \
    \      0 |           1 | 00000000000001 | Invalid: A shorter |\n    |        \
    \    |           1 |        0111111 | Valid              |\n    |          0 |\
    \           1 | 00000000111111 | Invalid: A shorter |\n    |            |    \
    \       1 |        1111111 | Invalid: VINT_DATA |\n    |          0 |        \
    \   1 | 00000001111111 | Valid              |\n            Table 3: Examples of\
    \ valid and invalid Element IDs\n   The range and count of possible Element IDs\
    \ are determined by their\n   octet length.  Examples of this are provided in\
    \ Table 4.\n      | Element ID Octet Length | Range of Valid | Number of Valid\
    \ |\n      |            1            |  0x81 - 0xFE   |             126 |\n  \
    \    |            2            |    0x407F -    |          16,256 |\n      | \
    \           3            |   0x203FFF -   |       2,080,768 |\n      |       \
    \     4            |  0x101FFFFF -  |     268,338,304 |\n         Table 4: Examples\
    \ of count and range for Element IDs at\n                          various octet\
    \ lengths\n"
- title: 6.  Element Data Size
  contents:
  - '6.  Element Data Size

    '
- title: 6.1.  Data Size Format
  contents:
  - "6.1.  Data Size Format\n   The Element Data Size expresses the length in octets\
    \ of Element Data.\n   The Element Data Size itself is encoded as a Variable-Size\
    \ Integer.\n   By default, Element Data Sizes can be encoded in lengths from one\n\
    \   octet to eight octets, although Element Data Sizes of greater lengths\n  \
    \ MAY be used if the octet length of the longest Element Data Size of\n   the\
    \ EBML Document is declared in the EBMLMaxSizeLength Element of the\n   EBML Header\
    \ (see Section 11.2.5).  Unlike the VINT_DATA of the\n   Element ID, the VINT_DATA\
    \ component of the Element Data Size is not\n   mandated to be encoded at the\
    \ shortest valid length.  For example, an\n   Element Data Size with binary encoding\
    \ of 1011 1111 or a binary\n   encoding of 0100 0000 0011 1111 are both valid\
    \ Element Data Sizes and\n   both store a semantically equal value (both 0b00000000111111\
    \ and\n   0b0111111, the VINT_DATA sections of the examples, represent the\n \
    \  integer 63).\n   Although an Element ID with all VINT_DATA bits set to zero\
    \ is\n   invalid, an Element Data Size with all VINT_DATA bits set to zero is\n\
    \   allowed for EBML Element Types that do not mandate a nonzero length\n   (see\
    \ Section 7).  An Element Data Size with all VINT_DATA bits set to\n   zero indicates\
    \ that the Element Data is zero octets in length.  Such\n   an EBML Element is\
    \ referred to as an Empty Element.  If an Empty\n   Element has a default value\
    \ declared, then the EBML Reader MUST\n   interpret the value of the Empty Element\
    \ as the default value.  If an\n   Empty Element has no default value declared,\
    \ then the EBML Reader\n   MUST use the value of the Empty Element for the corresponding\
    \ EBML\n   Element Type of the Element ID, 0 for numbers and an empty string for\n\
    \   strings.\n"
- title: 6.2.  Unknown Data Size
  contents:
  - "6.2.  Unknown Data Size\n   An Element Data Size with all VINT_DATA bits set\
    \ to one is reserved\n   as an indicator that the size of the EBML Element is\
    \ unknown.  The\n   only reserved value for the VINT_DATA of Element Data Size\
    \ is all\n   bits set to one.  An EBML Element with an unknown Element Data Size\n\
    \   is referred to as an Unknown-Sized Element.  Only a Master Element is\n  \
    \ allowed to be of unknown size, and it can only be so if the\n   \"unknownsizeallowed\"\
    \ attribute of its EBML Schema is set to true (see\n   Section 11.1.6.10).\n \
    \  The use of Unknown-Sized Elements allows an EBML Element to be\n   written\
    \ and read before the size of the EBML Element is known.\n   Unknown-Sized Elements\
    \ MUST only be used if the Element Data Size is\n   not known before the Element\
    \ Data is written, such as in some cases\n   of datastreaming.  The end of an\
    \ Unknown-Sized Element is determined\n   by whichever comes first:\n   *  Any\
    \ EBML Element that is a valid Parent Element of the Unknown-\n      Sized Element\
    \ according to the EBML Schema, Global Elements\n      excluded.\n   *  Any valid\
    \ EBML Element according to the EBML Schema, Global\n      Elements excluded,\
    \ that is not a Descendant Element of the\n      Unknown-Sized Element but shares\
    \ a common direct parent, such as a\n      Top-Level Element.\n   *  Any EBML\
    \ Element that is a valid Root Element according to the\n      EBML Schema, Global\
    \ Elements excluded.\n   *  The end of the Parent Element with a known size has\
    \ been reached.\n   *  The end of the EBML Document, either when reaching the\
    \ end of the\n      file or because a new EBML Header started.\n   Consider an\
    \ Unknown-Sized Element whose EBML path is\n   \"\\root\\level1\\level2\\elt\"\
    .  When reading a new Element ID, assuming\n   the EBML Path of that new Element\
    \ is valid, here are some possible\n   and impossible ways that this new Element\
    \ is ending \"elt\":\n     | EBML Path of new element         | Status       \
    \              |\n     | \\root\\level1\\level2              | Ends the Unknown-Sized\
    \     |\n     | \\root\\level1                     | Ends the Unknown-Sized  \
    \   |\n     | \\root                            | Ends the Unknown-Sized     |\n\
    \     | \\root2                           | Ends the Unknown-Sized     |\n   \
    \  | \\root\\level1\\level2\\other        | Ends the Unknown-Sized     |\n   \
    \  | \\root\\level1\\level2\\elt          | Ends the Unknown-Sized     |\n   \
    \  | \\root\\level1\\level2\\elt\\inside   | Doesn't end the Unknown-   |\n  \
    \   | \\root\\level1\\level2\\elt\\<global> | Global Element is valid;   |\n \
    \    | \\root\\level1\\level2\\<global>     | Global Element cannot be   |\n \
    \       Table 5: Examples of determining the end of an Unknown-Sized\n"
- title: 6.3.  Data Size Values
  contents:
  - "6.3.  Data Size Values\n   For Element Data Sizes encoded at octet lengths from\
    \ one to eight,\n   Table 6 depicts the range of possible values that can be encoded\
    \ as\n   an Element Data Size.  An Element Data Size with an octet length of 8\n\
    \   is able to express a size of 2^(56)-2 or 72,057,594,037,927,934\n   octets\
    \ (or about 72 petabytes).  The maximum possible value that can\n   be stored\
    \ as Element Data Size is referred to as VINTMAX.\n                  | Octet Length\
    \ | Possible Value Range |\n                  | 1            | 0 to 2^(7) - 2\
    \       |\n                  | 2            | 0 to 2^(14) - 2      |\n       \
    \           | 3            | 0 to 2^(21) - 2      |\n                  | 4   \
    \         | 0 to 2^(28) - 2      |\n                  | 5            | 0 to 2^(35)\
    \ - 2      |\n                  | 6            | 0 to 2^(42) - 2      |\n    \
    \              | 7            | 0 to 2^(49) - 2      |\n                  | 8\
    \            | 0 to 2^(56) - 2      |\n                     Table 6: Possible\
    \ range of values\n                      that can be stored in VINTs, by\n   If\
    \ the length of Element Data equals 2^(n*7)-1, then the octet length\n   of the\
    \ Element Data Size MUST be at least n+1.  This rule prevents an\n   Element Data\
    \ Size from being expressed as the unknown-size value.\n   Table 7 clarifies this\
    \ rule by showing a valid and invalid expression\n   of an Element Data Size with\
    \ a VINT_DATA of 127 (which is equal to\n   2^(1*7)-1) and 16,383 (which is equal\
    \ to 2^(2*7)-1).\n    | VINT_WIDTH | VINT_MARKER |             VINT_DATA | Element\
    \ Data |\n    |            |           1 |               1111111 | Reserved  \
    \   |\n    |          0 |           1 |        00000001111111 | Valid        |\n\
    \    |         00 |           1 | 000000000000001111111 | Valid        |\n   \
    \ |          0 |           1 |        11111111111111 | Reserved     |\n    | \
    \        00 |           1 | 000000011111111111111 | Valid        |\n        Table\
    \ 7: Demonstration of VINT_DATA reservation for VINTs of\n"
- title: 7.  EBML Element Types
  contents:
  - "7.  EBML Element Types\n   EBML Elements are defined by an EBML Schema (see Section\
    \ 11.1), which\n   MUST declare one of the following EBML Element Types for each\
    \ EBML\n   Element.  An EBML Element Type defines a concept of storing data\n\
    \   within an EBML Element that describes such characteristics as length,\n  \
    \ endianness, and definition.\n   EBML Elements that are defined as a Signed Integer\
    \ Element, Unsigned\n   Integer Element, Float Element, or Date Element use big-endian\n\
    \   storage.\n"
- title: 7.1.  Signed Integer Element
  contents:
  - "7.1.  Signed Integer Element\n   A Signed Integer Element MUST declare a length\
    \ from zero to eight\n   octets.  If the EBML Element is not defined to have a\
    \ default value,\n   then a Signed Integer Element with a zero-octet length represents\
    \ an\n   integer value of zero.\n   A Signed Integer Element stores an integer\
    \ (meaning that it can be\n   written without a fractional component) that could\
    \ be negative,\n   positive, or zero.  Signed Integers are stored with two's complement\n\
    \   notation with the leftmost bit being the sign bit.  Because EBML\n   limits\
    \ Signed Integers to 8 octets in length, a Signed Integer\n   Element stores a\
    \ number from -9,223,372,036,854,775,808 to\n   +9,223,372,036,854,775,807.\n"
- title: 7.2.  Unsigned Integer Element
  contents:
  - "7.2.  Unsigned Integer Element\n   An Unsigned Integer Element MUST declare a\
    \ length from zero to eight\n   octets.  If the EBML Element is not defined to\
    \ have a default value,\n   then an Unsigned Integer Element with a zero-octet\
    \ length represents\n   an integer value of zero.\n   An Unsigned Integer Element\
    \ stores an integer (meaning that it can be\n   written without a fractional component)\
    \ that could be positive or\n   zero.  Because EBML limits Unsigned Integers to\
    \ 8 octets in length,\n   an Unsigned Integer Element stores a number from 0 to\n\
    \   18,446,744,073,709,551,615.\n"
- title: 7.3.  Float Element
  contents:
  - "7.3.  Float Element\n   A Float Element MUST declare a length of either zero\
    \ octets (0 bit),\n   four octets (32 bit), or eight octets (64 bit).  If the\
    \ EBML Element\n   is not defined to have a default value, then a Float Element\
    \ with a\n   zero-octet length represents a numerical value of zero.\n   A Float\
    \ Element stores a floating-point number in the 32-bit and\n   64-bit binary interchange\
    \ format, as defined in [IEEE.754].\n"
- title: 7.4.  String Element
  contents:
  - "7.4.  String Element\n   A String Element MUST declare a length in octets from\
    \ zero to\n   VINTMAX.  If the EBML Element is not defined to have a default value,\n\
    \   then a String Element with a zero-octet length represents an empty\n   string.\n\
    \   A String Element MUST either be empty (zero-length) or contain\n   printable\
    \ ASCII characters [RFC0020] in the range of 0x20 to 0x7E,\n   with an exception\
    \ made for termination (see Section 13).\n"
- title: 7.5.  UTF-8 Element
  contents:
  - "7.5.  UTF-8 Element\n   A UTF-8 Element MUST declare a length in octets from\
    \ zero to VINTMAX.\n   If the EBML Element is not defined to have a default value,\
    \ then a\n   UTF-8 Element with a zero-octet length represents an empty string.\n\
    \   A UTF-8 Element contains only a valid Unicode string as defined in\n   [RFC3629],\
    \ with an exception made for termination (see Section 13).\n"
- title: 7.6.  Date Element
  contents:
  - "7.6.  Date Element\n   A Date Element MUST declare a length of either zero octets\
    \ or eight\n   octets.  If the EBML Element is not defined to have a default value,\n\
    \   then a Date Element with a zero-octet length represents a timestamp\n   of\
    \ 2001-01-01T00:00:00.000000000 UTC [RFC3339].\n   The Date Element stores an\
    \ integer in the same format as the Signed\n   Integer Element that expresses\
    \ a point in time referenced in\n   nanoseconds from the precise beginning of\
    \ the third millennium of the\n   Gregorian Calendar in Coordinated Universal\
    \ Time (also known as\n   2001-01-01T00:00:00.000000000 UTC).  This provides a\
    \ possible\n   expression of time from 1708-09-11T00:12:44.854775808 UTC to\n\
    \   2293-04-11T11:47:16.854775807 UTC.\n"
- title: 7.7.  Master Element
  contents:
  - "7.7.  Master Element\n   A Master Element MUST declare a length in octets from\
    \ zero to VINTMAX\n   or be of unknown length.  See Section 6 for rules that apply\
    \ to\n   elements of unknown length.\n   The Master Element contains zero or more\
    \ other elements.  EBML\n   Elements contained within a Master Element MUST have\
    \ the\n   EBMLParentPath of their Element Path equal to the EBMLFullPath of the\n\
    \   Master Element Element Path (see Section 11.1.6.2).  Element Data\n   stored\
    \ within Master Elements SHOULD only consist of EBML Elements\n   and SHOULD NOT\
    \ contain any data that is not part of an EBML Element.\n   The EBML Schema identifies\
    \ what Element IDs are valid within the\n   Master Elements for that version of\
    \ the EBML Document Type.  Any data\n   contained within a Master Element that\
    \ is not part of a Child Element\n   MUST be ignored.\n"
- title: 7.8.  Binary Element
  contents:
  - "7.8.  Binary Element\n   A Binary Element MUST declare a length in octets from\
    \ zero to\n   VINTMAX.\n   The contents of a Binary Element should not be interpreted\
    \ by the\n   EBML Reader.\n"
- title: 8.  EBML Document
  contents:
  - "8.  EBML Document\n   An EBML Document is composed of only two components, an\
    \ EBML Header\n   and an EBML Body.  An EBML Document MUST start with an EBML\
    \ Header\n   that declares significant characteristics of the entire EBML Body.\n\
    \   An EBML Document consists of EBML Elements and MUST NOT contain any\n   data\
    \ that is not part of an EBML Element.\n"
- title: 8.1.  EBML Header
  contents:
  - "8.1.  EBML Header\n   The EBML Header is a declaration that provides processing\n\
    \   instructions and identification of the EBML Body.  The EBML Header of\n  \
    \ an EBML Document is analogous to the XML Declaration of an XML\n   Document.\n\
    \   The EBML Header documents the EBML Schema (also known as the EBML\n   DocType)\
    \ that is used to semantically interpret the structure and\n   meaning of the\
    \ EBML Document.  Additionally, the EBML Header\n   documents the versions of\
    \ both EBML and the EBML Schema that were\n   used to write the EBML Document\
    \ and the versions required to read the\n   EBML Document.\n   The EBML Header\
    \ MUST contain a single Master Element with an Element\n   Name of \"EBML\" and\
    \ Element ID of \"0x1A45DFA3\" (see Section 11.2.1);\n   the Master Element may\
    \ have any number of additional EBML Elements\n   within it.  The EBML Header\
    \ of an EBML Document that uses an\n   EBMLVersion of 1 MUST only contain EBML\
    \ Elements that are defined as\n   part of this document.\n   Elements within\
    \ an EBML Header can be at most 4 octets long, except\n   for the EBML Element\
    \ with Element Name \"EBML\" and Element ID\n   \"0x1A45DFA3\" (see Section 11.2.1);\
    \ this Element can be up to 8 octets\n   long.\n"
- title: 8.2.  EBML Body
  contents:
  - "8.2.  EBML Body\n   All data of an EBML Document following the EBML Header is\
    \ the EBML\n   Body.  The end of the EBML Body, as well as the end of the EBML\n\
    \   Document that contains the EBML Body, is reached at whichever comes\n   first:\
    \ the beginning of a new EBML Header at the Root Level or the\n   end of the file.\
    \  This document defines precisely which EBML Elements\n   are to be used within\
    \ the EBML Header but does not name or define\n   which EBML Elements are to be\
    \ used within the EBML Body.  The\n   definition of which EBML Elements are to\
    \ be used within the EBML Body\n   is defined by an EBML Schema.\n   Within the\
    \ EBML Body, the maximum octet length allowed for any\n   Element ID is set by\
    \ the EBMLMaxIDLength Element of the EBML Header,\n   and the maximum octet length\
    \ allowed for any Element Data Size is set\n   by the EBMLMaxSizeLength Element\
    \ of the EBML Header.\n"
- title: 9.  EBML Stream
  contents:
  - "9.  EBML Stream\n   An EBML Stream is a file that consists of one or more EBML\
    \ Documents\n   that are concatenated together.  An occurrence of an EBML Header\
    \ at\n   the Root Level marks the beginning of an EBML Document.\n"
- title: 10.  EBML Versioning
  contents:
  - "10.  EBML Versioning\n   An EBML Document handles 2 different versions: the version\
    \ of the\n   EBML Header and the version of the EBML Body.  Both versions are\n\
    \   meant to be backward compatible.\n"
- title: 10.1.  EBML Header Version
  contents:
  - "10.1.  EBML Header Version\n   The version of the EBML Header is found in EBMLVersion.\
    \  An EBML\n   parser can read an EBML Header if it can read either the EBMLVersion\n\
    \   version or a version equal or higher than the one found in\n   EBMLReadVersion.\n"
- title: 10.2.  EBML Document Version
  contents:
  - "10.2.  EBML Document Version\n   The version of the EBML Body is found in EBMLDocTypeVersion.\
    \  A\n   parser for the particular DocType format can read the EBML Document\n\
    \   if it can read either the EBMLDocTypeVersion version of that format\n   or\
    \ a version equal or higher than the one found in\n   EBMLDocTypeReadVersion.\n"
- title: 11.  Elements semantics
  contents:
  - '11.  Elements semantics

    '
- title: 11.1.  EBML Schema
  contents:
  - "11.1.  EBML Schema\n   An EBML Schema is a well-formed XML Document [XML] that\
    \ defines the\n   properties, arrangement, and usage of EBML Elements that compose\
    \ a\n   specific EBML Document Type.  The relationship of an EBML Schema to\n\
    \   an EBML Document is analogous to the relationship of an XML Schema\n   [XML-SCHEMA]\
    \ to an XML Document [XML].  An EBML Schema MUST be\n   clearly associated with\
    \ one or more EBML Document Types.  An EBML\n   Document Type is identified by\
    \ a string stored within the EBML Header\n   in the DocType Element -- for example,\
    \ Matroska or WebM (see\n   Section 11.2.6).  The DocType value for an EBML Document\
    \ Type MUST be\n   unique, persistent, and described in the IANA registry (see\n\
    \   Section 17.2).\n   An EBML Schema MUST declare exactly one EBML Element at\
    \ Root Level\n   (referred to as the Root Element) that occurs exactly once within\
    \ an\n   EBML Document.  The Void Element MAY also occur at Root Level but is\n\
    \   not a Root Element (see Section 11.3.2).\n   The EBML Schema MUST document\
    \ all Elements of the EBML Body.  The\n   EBML Schema does not document Global\
    \ Elements that are defined by\n   this document (namely, the Void Element and\
    \ the CRC-32 Element).\n   The EBML Schema MUST NOT use the Element ID \"0x1A45DFA3\"\
    , which is\n   reserved for the EBML Header for the purpose of resynchronization.\n\
    \   An EBML Schema MAY constrain the use of EBML Header Elements (see\n   Section\
    \ 11.2) by adding or constraining that Element's \"range\"\n   attribute.  For\
    \ example, an EBML Schema MAY constrain the\n   EBMLMaxSizeLength to a maximum\
    \ value of \"8\" or MAY constrain the\n   EBMLVersion to only support a value\
    \ of \"1\".  If an EBML Schema adopts\n   the EBML Header Element as is, then\
    \ it is not required to document\n   that Element within the EBML Schema.  If\
    \ an EBML Schema constrains\n   the range of an EBML Header Element, then that\
    \ Element MUST be\n   documented within an \"<element>\" node of the EBML Schema.\
    \  This\n   document provides an example of an EBML Schema; see Section 11.1.1.\n"
- title: 11.1.1.  EBML Schema Example
  contents:
  - "11.1.1.  EBML Schema Example\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n\
    \   <EBMLSchema xmlns=\"urn:ietf:rfc:8794\"\n     docType=\"files-in-ebml-demo\"\
    \ version=\"1\">\n    <!-- constraints to the range of two EBML Header Elements\
    \ -->\n    <element name=\"EBMLReadVersion\" path=\"\\EBML\\EBMLReadVersion\"\n\
    \      id=\"0x42F7\" minOccurs=\"1\" maxOccurs=\"1\" range=\"1\" default=\"1\"\
    \n      type=\"uinteger\"/>\n    <element name=\"EBMLMaxSizeLength\"\n      path=\"\
    \\EBML\\EBMLMaxSizeLength\" id=\"0x42F3\" minOccurs=\"1\"\n      maxOccurs=\"\
    1\" range=\"8\" default=\"8\" type=\"uinteger\"/>\n    <!-- Root Element-->\n\
    \    <element name=\"Files\" path=\"\\Files\" id=\"0x1946696C\"\n      type=\"\
    master\">\n     <documentation lang=\"en\"\n       purpose=\"definition\">Container\
    \ of data and\n     attributes representing one or many files.</documentation>\n\
    \    </element>\n    <element name=\"File\" path=\"\\Files\\File\" id=\"0x6146\"\
    \n      type=\"master\" minOccurs=\"1\">\n     <documentation lang=\"en\" purpose=\"\
    definition\">\n       An attached file.\n     </documentation>\n    </element>\n\
    \    <element name=\"FileName\" path=\"\\Files\\File\\FileName\"\n      id=\"\
    0x614E\" type=\"utf-8\"\n      minOccurs=\"1\">\n     <documentation lang=\"en\"\
    \ purpose=\"definition\">\n       Filename of the attached file.\n     </documentation>\n\
    \    </element>\n    <element name=\"MimeType\" path=\"\\Files\\File\\MimeType\"\
    \n      id=\"0x464D\" type=\"string\"\n        minOccurs=\"1\">\n     <documentation\
    \ lang=\"en\" purpose=\"definition\">\n       MIME type of the file.\n     </documentation>\n\
    \    </element>\n    <element name=\"ModificationTimestamp\"\n      path=\"\\\
    Files\\File\\ModificationTimestamp\" id=\"0x4654\"\n      type=\"date\" minOccurs=\"\
    1\">\n     <documentation lang=\"en\" purpose=\"definition\">\n       Modification\
    \ timestamp of the file.\n     </documentation>\n    </element>\n    <element\
    \ name=\"Data\" path=\"\\Files\\File\\Data\" id=\"0x4664\"\n      type=\"binary\"\
    \ minOccurs=\"1\">\n     <documentation lang=\"en\" purpose=\"definition\">\n\
    \       The data of the file.\n     </documentation>\n    </element>\n   </EBMLSchema>\n"
- title: 11.1.2.  "<EBMLSchema>" Element
  contents:
  - "11.1.2.  \"<EBMLSchema>\" Element\n   Within an EBML Schema, the XPath [XPath]\
    \ of the \"<EBMLSchema>\"\n   element is \"/EBMLSchema\".\n   When used as an\
    \ XML Document, the EBML Schema MUST use \"<EBMLSchema>\"\n   as the top-level\
    \ element.  The \"<EBMLSchema>\" element can contain\n   \"<element>\" subelements.\n"
- title: 11.1.3.  "<EBMLSchema>" Namespace
  contents:
  - "11.1.3.  \"<EBMLSchema>\" Namespace\n   The namespace URI for elements of the\
    \ EBML Schema is a URN as defined\n   by [RFC8141] that uses the namespace identifier\
    \ 'ietf' defined by\n   [RFC2648] and extended by [RFC3688].  This URN is\n  \
    \ \"urn:ietf:rfc:8794\".\n"
- title: 11.1.4.  "<EBMLSchema>" Attributes
  contents:
  - "11.1.4.  \"<EBMLSchema>\" Attributes\n   Within an EBML Schema, the \"<EBMLSchema>\"\
    \ element uses the following\n   attributes to define an EBML Element:\n"
- title: 11.1.4.1.  docType
  contents:
  - "11.1.4.1.  docType\n   Within an EBML Schema, the XPath of the \"@docType\" attribute\
    \ is\n   \"/EBMLSchema/@docType\".\n   The docType lists the official name of\
    \ the EBML Document Type that is\n   defined by the EBML Schema; for example,\
    \ \"<EBMLSchema\n   docType=\"matroska\">\".\n   The \"docType\" attribute is\
    \ REQUIRED within the \"<EBMLSchema>\"\n   Element.\n"
- title: 11.1.4.2.  version
  contents:
  - "11.1.4.2.  version\n   Within an EBML Schema, the XPath of the \"@version\" attribute\
    \ is\n   \"/EBMLSchema/@version\".\n   The version lists a nonnegative integer\
    \ that specifies the version of\n   the docType documented by the EBML Schema.\
    \  Unlike XML Schemas, an\n   EBML Schema documents all versions of a docType's\
    \ definition rather\n   than using separate EBML Schemas for each version of a\
    \ docType.  EBML\n   Elements may be introduced and deprecated by using the \"\
    minver\" and\n   \"maxver\" attributes of \"<element>\".\n   The \"version\" attribute\
    \ is REQUIRED within the \"<EBMLSchema>\"\n   Element.\n"
- title: 11.1.4.3.  ebml
  contents:
  - "11.1.4.3.  ebml\n   Within an EBML Schema, the XPath of the \"@ebml\" attribute\
    \ is\n   \"/EBMLSchema/@ebml\".\n   The \"ebml\" attribute is a positive integer\
    \ that specifies the version\n   of the EBML Header (see Section 11.2.2) used\
    \ by the EBML Schema.  If\n   the attribute is omitted, the EBML Header version\
    \ is 1.\n"
- title: 11.1.5.  "<element>" Element
  contents:
  - "11.1.5.  \"<element>\" Element\n   Within an EBML Schema, the XPath of the \"\
    <element>\" element is\n   \"/EBMLSchema/element\".\n   Each \"<element>\" defines\
    \ one EBML Element through the use of several\n   attributes that are defined\
    \ in Section 11.1.6.  EBML Schemas MAY\n   contain additional attributes to extend\
    \ the semantics but MUST NOT\n   conflict with the definitions of the \"<element>\"\
    \ attributes defined\n   within this document.\n   The \"<element>\" nodes contain\
    \ a description of the meaning and use of\n   the EBML Element stored within one\
    \ or more \"<documentation>\"\n   subelements, followed by optional \"<implementation_note>\"\
    \n   subelements, followed by zero or one \"<restriction>\" subelement,\n   followed\
    \ by optional \"<extension>\" subelements.  All \"<element>\"\n   nodes MUST be\
    \ subelements of the \"<EBMLSchema>\".\n"
- title: 11.1.6.  "<element>" Attributes
  contents:
  - "11.1.6.  \"<element>\" Attributes\n   Within an EBML Schema, the \"<element>\"\
    \ uses the following attributes\n   to define an EBML Element:\n"
- title: 11.1.6.1.  name
  contents:
  - "11.1.6.1.  name\n   Within an EBML Schema, the XPath of the \"@name\" attribute\
    \ is\n   \"/EBMLSchema/element/@name\".\n   The name provides the human-readable\
    \ name of the EBML Element.  The\n   value of the name MUST be in the form of\
    \ characters \"A\" to \"Z\", \"a\"\n   to \"z\", \"0\" to \"9\", \"-\", and \"\
    .\".  The first character of the name\n   MUST be in the form of an \"A\" to \"\
    Z\", \"a\" to \"z\", or \"0\" to \"9\"\n   character.\n   The \"name\" attribute\
    \ is REQUIRED.\n"
- title: 11.1.6.2.  path
  contents:
  - "11.1.6.2.  path\n   Within an EBML Schema, the XPath of the \"@path\" attribute\
    \ is\n   \"/EBMLSchema/element/@path\".\n   The path defines the allowed storage\
    \ locations of the EBML Element\n   within an EBML Document.  This path MUST be\
    \ defined with the full\n   hierarchy of EBML Elements separated with a \"\\\"\
    .  The top EBML\n   Element in the path hierarchy is the first in the value. \
    \ The syntax\n   of the \"path\" attribute is defined using this Augmented Backus-Naur\n\
    \   Form (ABNF) [RFC5234] with the case-sensitive update [RFC7405]\n   notation:\n\
    \   The \"path\" attribute is REQUIRED.\n   EBMLFullPath           = EBMLParentPath\
    \ EBMLElement\n   EBMLParentPath         = PathDelimiter [EBMLParents]\n   EBMLParents\
    \            = 0*IntermediatePathAtom EBMLLastParent\n   IntermediatePathAtom\
    \   = EBMLPathAtom / GlobalPlaceholder\n   EBMLLastParent         = EBMLPathAtom\
    \ / GlobalPlaceholder\n   EBMLPathAtom           = [IsRecursive] EBMLAtomName\
    \ PathDelimiter\n   EBMLElement            = [IsRecursive] EBMLAtomName\n   PathDelimiter\
    \          = \"\\\"\n   IsRecursive            = \"+\"\n   EBMLAtomName      \
    \     = ALPHA / DIGIT 0*EBMLNameChar\n   EBMLNameChar           = ALPHA / DIGIT\
    \ / \"-\" / \".\"\n   GlobalPlaceholder      = \"(\" GlobalParentOccurrence \"\
    \\)\"\n   GlobalParentOccurrence = [PathMinOccurrence] \"-\" [PathMaxOccurrence]\n\
    \   PathMinOccurrence      = 1*DIGIT ; no upper limit\n   PathMaxOccurrence  \
    \    = 1*DIGIT ; no upper limit\n   The \"*\", \"(\", and \")\" symbols are interpreted\
    \ as defined in\n   [RFC5234].\n   The EBMLAtomName of the EBMLElement part MUST\
    \ be equal to the \"@name\"\n   attribute of the EBML Schema.  If the EBMLElement\
    \ part contains an\n   IsRecursive part, the EBML Element can occur within itself\n\
    \   recursively (see Section 11.1.6.11).\n   The starting PathDelimiter of EBMLParentPath\
    \ corresponds to the root\n   of the EBML Document.\n   The \"@path\" value MUST\
    \ be unique within the EBML Schema.  The \"@id\"\n   value corresponding to this\
    \ \"@path\" MUST NOT be defined for use\n   within another EBML Element with the\
    \ same EBMLParentPath as this\n   \"@path\".\n   A path with a GlobalPlaceholder\
    \ as the EBMLLastParent defines a\n   Global Element; see Section 11.3.  If the\
    \ element has no\n   EBMLLastParent part, or the EBMLLastParent part is not a\n\
    \   GlobalPlaceholder, then the Element is not a Global Element.\n   The GlobalParentOccurrence\
    \ part is interpreted as the number of valid\n   EBMLPathAtom parts that can replace\
    \ the GlobalPlaceholder in the\n   path.  PathMinOccurrence represents the minimum\
    \ number of\n   EBMLPathAtoms required to replace the GlobalPlaceholder.\n   PathMaxOccurrence\
    \ represents the maximum number of EBMLPathAtoms\n   possible to replace the GlobalPlaceholder.\n\
    \   If PathMinOccurrence is not present, then that GlobalParentOccurrence\n  \
    \ has a PathMinOccurrence value of 0.  If PathMaxOccurrence is not\n   present,\
    \ then there is no upper bound for the permitted number of\n   EBMLPathAtoms possible\
    \ to replace the GlobalPlaceholder.\n   PathMaxOccurrence MUST NOT have the value\
    \ 0, as it would mean no\n   EBMLPathAtom can replace the GlobalPlaceholder, and\
    \ the EBMLFullPath\n   would be the same without that GlobalPlaceholder part.\n\
    \   PathMaxOccurrence MUST be bigger than, or equal to,\n   PathMinOccurrence.\n\
    \   For example, in \"\\a\\(0-1\\)global\", the Element path \"\\a\\x\\global\"\
    \n   corresponds to an EBMLPathAtom occurrence of 1.  The Element\n   \"\\a\\\
    x\\y\\global\" corresponds to an EBMLPathAtom occurrence of 2, etc.\n   In those\
    \ cases, \"\\a\\x\" or \"\\a\\x\\y\" MUST be valid paths to be able to\n   contain\
    \ the element \"global\".\n   Consider another EBML Path, \"\\a\\(1-\\)global\"\
    .  There has to be at\n   least one EBMLPathAtom between the \"\\a\\\" part and\
    \ \"global\".  So the\n   \"global\" EBML Element cannot be found inside the \"\
    \\a\" EBML Element,\n   as it means the resulting path \"\\a\\global\" has no\
    \ EBMLPathAtom\n   between the \"\\a\\\" and \"global\".  However, the \"global\"\
    \ EBML Element\n   can be found inside the \"\\a\\b\" EBML Element, because the\
    \ resulting\n   path, \"\\a\\b\\global\", has one EBMLPathAtom between the \"\\\
    a\\\" and\n   \"global\".  Alternatively, it can be found inside the \"\\a\\b\\\
    c\" EBML\n   Element (two EBMLPathAtom), or inside the \"\\a\\b\\c\\d\" EBML Element\n\
    \   (three EBMLPathAtom), etc.\n   Consider another EBML Path, \"\\a\\(0-1\\)global\"\
    .  There has to be at\n   most one EBMLPathAtom between the \"\\a\\\" part and\
    \ \"global\".  So the\n   \"global\" EBML Element can be found inside either the\
    \ \"\\a\" EBML\n   Element (0 EBMLPathAtom replacing GlobalPlaceholder) or the\
    \ \"\\a\\b\"\n   EBML Element (one replacement EBMLPathAtom).  But it cannot be\
    \ found\n   inside the \"\\a\\b\\c\" EBML Element, because the resulting path,\n\
    \   \"\\a\\b\\c\\global\", has two EBMLPathAtom between \"\\a\\\" and \"global\"\
    .\n"
- title: 11.1.6.3.  id
  contents:
  - "11.1.6.3.  id\n   Within an EBML Schema, the XPath of the \"@id\" attribute is\n\
    \   \"/EBMLSchema/element/@id\".\n   The Element ID is encoded as a Variable-Size\
    \ Integer.  It is read and\n   stored in big-endian order.  In the EBML Schema,\
    \ it is expressed in\n   hexadecimal notation prefixed by a 0x.  To reduce the\
    \ risk of false\n   positives while parsing EBML Streams, the Element IDs of the\
    \ Root\n   Element and Top-Level Elements SHOULD be at least 4 octets in length.\n\
    \   Element IDs defined for use at Root Level or directly under the Root\n   Level\
    \ MAY use shorter octet lengths to facilitate padding and\n   optimize edits to\
    \ EBML Documents; for instance, the Void Element uses\n   an Element ID with a\
    \ length of one octet to allow its usage in more\n   writing and editing scenarios.\n\
    \   The Element ID of any Element found within an EBML Document MUST only\n  \
    \ match a single \"@path\" value of its corresponding EBML Schema, but a\n   separate\
    \ instance of that Element ID value defined by the EBML Schema\n   MAY occur within\
    \ a different \"@path\".  If more than one Element is\n   defined to use the same\
    \ \"@id\" value, then the \"@path\" values of those\n   Elements MUST NOT share\
    \ the same EBMLParentPath.  Elements MUST NOT\n   be defined to use the same \"\
    @id\" value if one of their common Parent\n   Elements could be an Unknown-Sized\
    \ Element.\n   The \"id\" attribute is REQUIRED.\n"
- title: 11.1.6.4.  minOccurs
  contents:
  - "11.1.6.4.  minOccurs\n   Within an EBML Schema, the XPath of the \"@minOccurs\"\
    \ attribute is\n   \"/EBMLSchema/element/@minOccurs\".\n   \"minOccurs\" is a\
    \ nonnegative integer expressing the minimum permitted\n   number of occurrences\
    \ of this EBML Element within its Parent Element.\n   Each instance of the Parent\
    \ Element MUST contain at least this many\n   instances of this EBML Element.\
    \  If the EBML Element has an empty\n   EBMLParentPath, then \"minOccurs\" refers\
    \ to constraints on the\n   occurrence of the EBML Element within the EBML Document.\
    \  EBML\n   Elements with \"minOccurs\" set to \"1\" that also have a default\
    \ value\n   (see Section 11.1.6.8) declared are not REQUIRED to be stored but\
    \ are\n   REQUIRED to be interpreted; see Section 11.1.19.\n   An EBML Element\
    \ defined with a \"minOccurs\" value greater than zero is\n   called a Mandatory\
    \ EBML Element.\n   The \"minOccurs\" attribute is OPTIONAL.  If the \"minOccurs\"\
    \ attribute\n   is not present, then that EBML Element has a \"minOccurs\" value\
    \ of 0.\n   The semantic meaning of \"minOccurs\" within an EBML Schema is\n \
    \  analogous to the meaning of \"minOccurs\" within an XML Schema.\n"
- title: 11.1.6.5.  maxOccurs
  contents:
  - "11.1.6.5.  maxOccurs\n   Within an EBML Schema, the XPath of the \"@maxOccurs\"\
    \ attribute is\n   \"/EBMLSchema/element/@maxOccurs\".\n   \"maxOccurs\" is a\
    \ nonnegative integer expressing the maximum permitted\n   number of occurrences\
    \ of this EBML Element within its Parent Element.\n   Each instance of the Parent\
    \ Element MUST contain at most this many\n   instances of this EBML Element, including\
    \ the unwritten mandatory\n   element with a default value; see Section 11.1.19.\
    \  If the EBML\n   Element has an empty EBMLParentPath, then \"maxOccurs\" refers\
    \ to\n   constraints on the occurrence of the EBML Element within the EBML\n \
    \  Document.\n   The \"maxOccurs\" attribute is OPTIONAL.  If the \"maxOccurs\"\
    \ attribute\n   is not present, then there is no upper bound for the permitted\
    \ number\n   of occurrences of this EBML Element within its Parent Element or\n\
    \   within the EBML Document, depending on whether or not the\n   EBMLParentPath\
    \ of the EBML Element is empty.\n   The semantic meaning of \"maxOccurs\" within\
    \ an EBML Schema is\n   analogous to the meaning of \"maxOccurs\" within an XML\
    \ Schema; when it\n   is not present, it's similar to xml:maxOccurs=\"unbounded\"\
    \ in an XML\n   Schema.\n"
- title: 11.1.6.6.  range
  contents:
  - "11.1.6.6.  range\n   Within an EBML Schema, the XPath of the \"@range\" attribute\
    \ is\n   \"/EBMLSchema/element/@range\".\n   A numerical range for EBML Elements\
    \ that are of numerical types\n   (Unsigned Integer, Signed Integer, Float, and\
    \ Date).  If specified,\n   the value of the EBML Element MUST be within the defined\
    \ range.  See\n   Section 11.1.6.6.1 for rules applied to expression of range\
    \ values.\n   The \"range\" attribute is OPTIONAL.  If the \"range\" attribute\
    \ is not\n   present, then any value legal for the \"type\" attribute is valid.\n"
- title: 11.1.6.6.1.  Expression of range
  contents:
  - "11.1.6.6.1.  Expression of range\n   The \"range\" attribute MUST only be used\
    \ with EBML Elements that are\n   either signed integer, unsigned integer, float,\
    \ or date.  The\n   expression defines the upper, lower, exact, or excluded value\
    \ of the\n   EBML Element and optionally an upper boundary value combined with\
    \ a\n   lower boundary.  The range expression may contain whitespace (using\n\
    \   the ASCII 0x20 character) for readability, but whitespace within a\n   range\
    \ expression MUST NOT convey meaning.\n   To set a fixed value for the range,\
    \ the value is used as the\n   attribute value.  For example, \"1234\" means the\
    \ EBML element always\n   has the value 1234.  The value can be prefixed with\
    \ \"not\" to indicate\n   that the fixed value MUST NOT be used for that Element.\
    \  For example,\n   \"not 1234\" means the Element can use all values of its type\
    \ except\n   1234.\n   The \">\" sign is used for an exclusive lower boundary,\
    \ and the \">=\"\n   sign is used for an inclusive lower boundary.  For example,\
    \ \">3\"\n   means the Element value MUST be greater than 3, and \">=0x1p+0\"\
    \ means\n   the Element value MUST be greater than or equal to the floating value\n\
    \   1.0; see Section 11.1.18.\n   The \"<\" sign is used for an exclusive upper\
    \ boundary, and the \"<=\"\n   sign is used for an inclusive upper boundary. \
    \ For example, \"<-2\"\n   means the Element value MUST be less than -2, and \"\
    <=10\" means the\n   Element value MUST be less than or equal to 10.\n   The lower\
    \ and upper bounds can be combined into an expression to form\n   a closed boundary.\
    \  The lower boundary comes first, followed by the\n   upper boundary, separated\
    \ by a comma.  For example, \">3,<= 20\" means\n   the Element value MUST be greater\
    \ than 3 and less than or equal to\n   20.\n   A special form of lower and upper\
    \ bounds using the \"-\" separator is\n   possible, meaning the Element value\
    \ MUST be greater than, or equal\n   to, the first value and MUST be less than\
    \ or equal to the second\n   value.  For example, \"1-10\" is equivalent to \"\
    >=1,<=10\".  If the\n   upper boundary is negative, the \"range\" attribute MUST\
    \ only use the\n   latter form.\n"
- title: 11.1.6.7.  length
  contents:
  - "11.1.6.7.  length\n   Within an EBML Schema, the XPath of the \"@length\" attribute\
    \ is\n   \"/EBMLSchema/element/@length\".\n   The \"length\" attribute is a value\
    \ to express the valid length of the\n   Element Data as written, measured in\
    \ octets.  The length provides a\n   constraint in addition to the Length value\
    \ of the definition of the\n   corresponding EBML Element Type.  This length MUST\
    \ be expressed as\n   either a nonnegative integer or a range (see Section 11.1.6.6.1)\
    \ that\n   consists of only nonnegative integers and valid operators.\n   The\
    \ \"length\" attribute is OPTIONAL.  If the \"length\" attribute is not\n   present\
    \ for that EBML Element, then that EBML Element is only limited\n   in length\
    \ by the definition of the associated EBML Element Type.\n"
- title: 11.1.6.8.  default
  contents:
  - "11.1.6.8.  default\n   Within an EBML Schema, the XPath of the \"@default\" attribute\
    \ is\n   \"/EBMLSchema/element/@default\".\n   If an Element is mandatory (has\
    \ a \"minOccurs\" value greater than\n   zero) but not written within its Parent\
    \ Element or stored as an Empty\n   Element, then the EBML Reader of the EBML\
    \ Document MUST semantically\n   interpret the EBML Element as present with this\
    \ specified default\n   value for the EBML Element.  An unwritten mandatory Element\
    \ with a\n   declared default value is semantically equivalent to that Element\
    \ if\n   written with the default value stored as the Element Data.  EBML\n  \
    \ Elements that are Master Elements MUST NOT declare a default value.\n   EBML\
    \ Elements with a \"minOccurs\" value greater than 1 MUST NOT\n   declare a default\
    \ value.\n   The default attribute is OPTIONAL.\n"
- title: 11.1.6.9.  type
  contents:
  - "11.1.6.9.  type\n   Within an EBML Schema, the XPath of the \"@type\" attribute\
    \ is\n   \"/EBMLSchema/element/@type\".\n   The type MUST be set to one of the\
    \ following values: \"integer\"\n   (signed integer), \"uinteger\" (unsigned integer),\
    \ \"float\", \"string\",\n   \"date\", \"utf-8\", \"master\", or \"binary\". \
    \ The content of each type is\n   defined in Section 7.\n   The \"type\" attribute\
    \ is REQUIRED.\n"
- title: 11.1.6.10.  unknownsizeallowed
  contents:
  - "11.1.6.10.  unknownsizeallowed\n   Within an EBML Schema, the XPath of the \"\
    @unknownsizeallowed\"\n   attribute is \"/EBMLSchema/element/@unknownsizeallowed\"\
    .\n   This attribute is a boolean to express whether an EBML Element is\n   permitted\
    \ to be an Unknown-Sized Element (having all VINT_DATA bits\n   of Element Data\
    \ Size set to 1).  EBML Elements that are not Master\n   Elements MUST NOT set\
    \ \"unknownsizeallowed\" to true.  An EBML Element\n   that is defined with an\
    \ \"unknownsizeallowed\" attribute set to 1 MUST\n   also have the \"unknownsizeallowed\"\
    \ attribute of its Parent Element\n   set to 1.\n   An EBML Element with the \"\
    unknownsizeallowed\" attribute set to 1 MUST\n   NOT have its \"recursive\" attribute\
    \ set to 1.\n   The \"unknownsizeallowed\" attribute is OPTIONAL.  If the\n  \
    \ \"unknownsizeallowed\" attribute is not used, then that EBML Element is\n  \
    \ not allowed to use an unknown Element Data Size.\n"
- title: 11.1.6.11.  recursive
  contents:
  - "11.1.6.11.  recursive\n   Within an EBML Schema, the XPath of the \"@recursive\"\
    \ attribute is\n   \"/EBMLSchema/element/@recursive\".\n   This attribute is a\
    \ boolean to express whether an EBML Element is\n   permitted to be stored recursively.\
    \  If it is allowed, the EBML\n   Element MAY be stored within another EBML Element\
    \ that has the same\n   Element ID, which itself can be stored in an EBML Element\
    \ that has\n   the same Element ID, and so on.  EBML Elements that are not Master\n\
    \   Elements MUST NOT set recursive to true.\n   If the EBMLElement part of the\
    \ \"@path\" contains an IsRecursive part,\n   then the \"recursive\" value MUST\
    \ be true; otherwise, it MUST be false.\n   An EBML Element with the \"recursive\"\
    \ attribute set to 1 MUST NOT have\n   its \"unknownsizeallowed\" attribute set\
    \ to 1.\n   The \"recursive\" attribute is OPTIONAL.  If the \"recursive\" attribute\n\
    \   is not present, then the EBML Element MUST NOT be used recursively.\n"
- title: 11.1.6.12.  recurring
  contents:
  - "11.1.6.12.  recurring\n   Within an EBML Schema, the XPath of the \"@recurring\"\
    \ attribute is\n   \"/EBMLSchema/element/@recurring\".\n   This attribute is a\
    \ boolean to express whether or not an EBML Element\n   is defined as an Identically\
    \ Recurring Element; see Section 11.1.17.\n   The \"recurring\" attribute is OPTIONAL.\
    \  If the \"recurring\" attribute\n   is not present, then the EBML Element is\
    \ not an Identically Recurring\n   Element.\n"
- title: 11.1.6.13.  minver
  contents:
  - "11.1.6.13.  minver\n   Within an EBML Schema, the XPath of the \"@minver\" attribute\
    \ is\n   \"/EBMLSchema/element/@minver\".\n   The \"minver\" (minimum version)\
    \ attribute stores a nonnegative integer\n   that represents the first version\
    \ of the docType to support the EBML\n   Element.\n   The \"minver\" attribute\
    \ is OPTIONAL.  If the \"minver\" attribute is not\n   present, then the EBML\
    \ Element has a minimum version of \"1\".\n"
- title: 11.1.6.14.  maxver
  contents:
  - "11.1.6.14.  maxver\n   Within an EBML Schema, the XPath of the \"@maxver\" attribute\
    \ is\n   \"/EBMLSchema/element/@maxver\".\n   The \"maxver\" (maximum version)\
    \ attribute stores a nonnegative integer\n   that represents the last or most\
    \ recent version of the docType to\n   support the element. \"maxver\" MUST be\
    \ greater than or equal to\n   \"minver\".\n   The \"maxver\" attribute is OPTIONAL.\
    \  If the \"maxver\" attribute is not\n   present, then the EBML Element has a\
    \ maximum version equal to the\n   value stored in the \"version\" attribute of\
    \ \"<EBMLSchema>\".\n"
- title: 11.1.7.  "<documentation>" Element
  contents:
  - "11.1.7.  \"<documentation>\" Element\n   Within an EBML Schema, the XPaths of\
    \ the \"<documentation>\" elements\n   are \"/EBMLSchema/element/documentation\"\
    \ and\n   \"/EBMLSchema/element/restriction/enum/documentation\".\n   The \"<documentation>\"\
    \ element provides additional information about\n   EBML Elements or enumeration\
    \ values.  Within the \"<documentation>\"\n   element, the following XHTML [XHTML]\
    \ elements MAY be used: \"<a>\",\n   \"<br>\", and \"<strong>\".\n"
- title: 11.1.8.  "<documentation>" Attributes
  contents:
  - '11.1.8.  "<documentation>" Attributes

    '
- title: 11.1.8.1.  lang
  contents:
  - "11.1.8.1.  lang\n   Within an EBML Schema, the XPath of the \"@lang\" attribute\
    \ is\n   \"/EBMLSchema/element/documentation/@lang\".\n   The \"lang\" attribute\
    \ is set to the value from [RFC5646] of the\n   language of the element's documentation.\n\
    \   The \"lang\" attribute is OPTIONAL.\n"
- title: 11.1.8.2.  purpose
  contents:
  - "11.1.8.2.  purpose\n   Within an EBML Schema, the XPath of the \"@purpose\" attribute\
    \ is\n   \"/EBMLSchema/element/documentation/@purpose\".\n   A \"purpose\" attribute\
    \ distinguishes the meaning of the documentation.\n   Values for the \"<documentation>\"\
    \ subelement's \"purpose\" attribute\n   MUST include one of the values listed\
    \ in Table 8.\n     | value of   | definition                                \
    \      |\n     | \"purpose\"  |                                              \
    \   |\n     | attribute  |                                                 |\n\
    \     | definition | A \"definition\" is recommended for every defined |\n   \
    \  |            | EBML Element.  This documentation explains the  |\n     |  \
    \          | semantic meaning of the EBML Element.           |\n     | rationale\
    \  | An explanation about the reason or catalyst for |\n     |            | the\
    \ definition of the Element.                  |\n     | usage      | Recommended\
    \ practices or guidelines for both    |\n     | notes      | reading, writing,\
    \ or interpreting the Element.  |\n     | references | Informational references\
    \ to support the         |\n     |            | contextualization and understanding\
    \ of the      |\n     |            | value of the Element.                   \
    \        |\n           Table 8: Definitions of the permitted values for the\n\
    \             \"purpose\" attribute of the documentation Element\n   The \"purpose\"\
    \ attribute is REQUIRED.\n"
- title: 11.1.9.  "<implementation_note>" Element
  contents:
  - "11.1.9.  \"<implementation_note>\" Element\n   Within an EBML Schema, the XPath\
    \ of the \"<implementation_note>\"\n   element is \"/EBMLSchema/element/implementation_note\"\
    .\n   In some cases within an EBML Document Type, the attributes of the\n   \"\
    <element>\" element are not sufficient to clearly communicate how the\n   defined\
    \ EBML Element is intended to be implemented.  For instance,\n   one EBML Element\
    \ might only be mandatory if another EBML Element is\n   present.  As another\
    \ example, the default value of an EBML Element\n   might be derived from a related\
    \ Element's content.  In these cases\n   where the Element's definition is conditional\
    \ or advanced\n   implementation notes are needed, one or many \"<implementation_note>\"\
    \n   elements can be used to store that information.  The\n   \"<implementation_note>\"\
    \ refers to a specific attribute of the parent\n   \"<element>\" as expressed\
    \ by the \"note_attribute\" attribute (see\n   Section 11.1.10.1).\n"
- title: 11.1.10.  "<implementation_note>" Attributes
  contents:
  - '11.1.10.  "<implementation_note>" Attributes

    '
- title: 11.1.10.1.  note_attribute
  contents:
  - "11.1.10.1.  note_attribute\n   Within an EBML Schema, the XPath of the \"@note_attribute\"\
    \ attribute\n   is \"/EBMLSchema/element/implementation_note/@note_attribute\"\
    .\n   The \"note_attribute\" attribute references which of the attributes of\n\
    \   the \"<element>\" the \"<implementation_note>\" relates to.  The\n   \"note_attribute\"\
    \ attribute MUST be set to one of the following values\n   (corresponding to that\
    \ attribute of the parent \"<element>\"):\n   \"minOccurs\", \"maxOccurs\", \"\
    range\", \"length\", \"default\", \"minver\", or\n   \"maxver\".  The \"<implementation_note>\"\
    \ SHALL supersede the parent\n   \"<element>\"'s attribute that is named in the\
    \ \"note_attribute\"\n   attribute.  An \"<element>\" SHALL NOT have more than\
    \ one\n   \"<implementation_note>\" of the same \"note_attribute\".\n   The \"\
    note_attribute\" attribute is REQUIRED.\n"
- title: 11.1.10.2.  "<implementation_note>" Example
  contents:
  - "11.1.10.2.  \"<implementation_note>\" Example\n   The following fragment of an\
    \ EBML Schema demonstrates how an\n   \"<implementation_note>\" is used.  In this\
    \ case, an EBML Schema\n   documents a list of items that are described with an\
    \ optional cost.\n   The Currency Element uses an \"<implementation_note>\" to\
    \ say that the\n   Currency Element is REQUIRED if the Cost Element is set, otherwise\n\
    \   not.\n   <element name=\"Items\" path=\"\\Items\" id=\"0x4025\" type=\"master\"\
    \n     minOccurs=\"1\" maxOccurs=\"1\">\n     <documentation lang=\"en\" purpose=\"\
    definition\">\n       A set of items.\n     </documentation>\n   </element>\n\
    \   <element name=\"Item\" path=\"\\Items\\Item\" id=\"0x4026\"\n     type=\"\
    master\">\n     <documentation lang=\"en\" purpose=\"definition\">\n       An\
    \ item.\n     </documentation>\n   </element>\n   <element name=\"Cost\" path=\"\
    \\Items\\Item\\Cost\" id=\"0x4024\"\n     type=\"float\" maxOccurs=\"1\">\n  \
    \   <documentation lang=\"en\" purpose=\"definition\">\n       The cost of the\
    \ item, if any.\n     </documentation>\n   </element>\n   <element name=\"Currency\"\
    \ path=\"\\Items\\Item\\Currency\" id=\"0x403F\"\n     type=\"string\" maxOccurs=\"\
    1\">\n     <documentation lang=\"en\" purpose=\"definition\">\n       The currency\
    \ of the item's cost.\n     </documentation>\n     <implementation_note note_attribute=\"\
    minOccurs\">\n       Currency MUST be set (minOccurs=1) if the associated Item\
    \ stores\n       a Cost, else Currency MAY be unset (minOccurs=0).\n     </implementation_note>\n\
    \   </element>\n"
- title: 11.1.11.  "<restriction>" Element
  contents:
  - "11.1.11.  \"<restriction>\" Element\n   Within an EBML Schema, the XPath of the\
    \ \"<restriction>\" element is\n   \"/EBMLSchema/element/restriction\".\n   The\
    \ \"<restriction>\" element provides information about restrictions\n   to the\
    \ allowable values for the EBML Element, which are listed in\n   \"<enum>\" elements.\n"
- title: 11.1.12.  "<enum>" Element
  contents:
  - "11.1.12.  \"<enum>\" Element\n   Within an EBML Schema, the XPath of the \"<enum>\"\
    \ element is\n   \"/EBMLSchema/element/restriction/enum\".\n   The \"<enum>\"\
    \ element stores a list of values allowed for storage in\n   the EBML Element.\
    \  The values MUST match the type of the EBML Element\n   (for example, \"<enum\
    \ value=\"Yes\">\" cannot be a valid value for an\n   EBML Element that is defined\
    \ as an unsigned integer).  An \"<enum>\"\n   element MAY also store \"<documentation>\"\
    \ elements to further describe\n   the \"<enum>\".\n"
- title: 11.1.13.  "<enum>" Attributes
  contents:
  - '11.1.13.  "<enum>" Attributes

    '
- title: 11.1.13.1.  label
  contents:
  - "11.1.13.1.  label\n   Within an EBML Schema, the XPath of the \"@label\" attribute\
    \ is\n   \"/EBMLSchema/element/restriction/enum/@label\".\n   The label provides\
    \ a concise expression for human consumption that\n   describes what the value\
    \ of \"<enum>\" represents.\n   The \"label\" attribute is OPTIONAL.\n"
- title: 11.1.13.2.  value
  contents:
  - "11.1.13.2.  value\n   Within an EBML Schema, the XPath of the \"@value\" attribute\
    \ is\n   \"/EBMLSchema/element/restriction/enum/@value\".\n   The value represents\
    \ data that MAY be stored within the EBML Element.\n   The \"value\" attribute\
    \ is REQUIRED.\n"
- title: 11.1.14.  "<extension>" Element
  contents:
  - "11.1.14.  \"<extension>\" Element\n   Within an EBML Schema, the XPath of the\
    \ \"<extension>\" element is\n   \"/EBMLSchema/element/extension\".\n   The \"\
    <extension>\" element provides an unconstrained element to\n   contain information\
    \ about the associated EBML \"<element>\", which is\n   undefined by this document\
    \ but MAY be defined by the associated EBML\n   Document Type.  The \"<extension>\"\
    \ element MUST contain a \"type\"\n   attribute and also MAY contain any other\
    \ attribute or subelement as\n   long as the EBML Schema remains as a well-formed\
    \ XML Document.  All\n   \"<extension>\" elements MUST be subelements of the \"\
    <element>\".\n"
- title: 11.1.15.  "<extension>" Attributes
  contents:
  - '11.1.15.  "<extension>" Attributes

    '
- title: 11.1.15.1.  type
  contents:
  - "11.1.15.1.  type\n   Within an EBML Schema, the XPath of the \"@type\" attribute\
    \ is\n   \"/EBMLSchema/element/extension/@type\".\n   The \"type\" attribute should\
    \ reference a name or identifier of the\n   project or authority associated with\
    \ the contents of the\n   \"<extension>\" element.\n   The \"type\" attribute\
    \ is REQUIRED.\n"
- title: 11.1.16.  XML Schema for EBML Schema
  contents:
  - "11.1.16.  XML Schema for EBML Schema\n   The following provides an XML Schema\
    \ [XML-SCHEMA] for facilitating\n   verification of an EBML Schema described in\
    \ Section 11.1.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xs:schema\
    \ xmlns=\"urn:ietf:rfc:8794\"\n     targetNamespace=\"urn:ietf:rfc:8794\"\n  \
    \   xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n     xmlns:xhtml=\"http://www.w3.org/1999/xhtml\"\
    \n     elementFormDefault=\"qualified\" version=\"01\">\n     <!-- for HTML in\
    \ comments -->\n     <xs:import namespace=\"http://www.w3.org/1999/xhtml\"\n \
    \      schemaLocation=\"http://www.w3.org/MarkUp/SCHEMA/xhtml11.xsd\"/>\n    \
    \ <xs:element name=\"EBMLSchema\" type=\"EBMLSchemaType\"/>\n     <xs:complexType\
    \ name=\"EBMLSchemaType\">\n       <xs:sequence>\n         <xs:element name=\"\
    element\" type=\"elementType\"\n           minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n       </xs:sequence>\n       <xs:attribute name=\"docType\" use=\"required\"\
    />\n       <xs:attribute name=\"version\" use=\"required\" type=\"xs:integer\"\
    />\n       <xs:attribute name=\"ebml\" type=\"xs:positiveInteger\"\n         default=\"\
    1\"/>\n     </xs:complexType>\n     <xs:complexType name=\"elementType\">\n  \
    \     <xs:sequence>\n         <xs:element name=\"documentation\" type=\"documentationType\"\
    \n           minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n         <xs:element name=\"\
    implementation_note\" type=\"noteType\"\n           minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n         <xs:element name=\"restriction\" type=\"restrictionType\"\
    \n           minOccurs=\"0\" maxOccurs=\"1\"/>\n         <xs:element name=\"extension\"\
    \ type=\"extensionType\"\n           minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n\
    \       </xs:sequence>\n       <xs:attribute name=\"name\" use=\"required\">\n\
    \         <xs:simpleType>\n           <xs:restriction base=\"xs:string\">\n  \
    \           <xs:pattern value=\"[0-9A-Za-z.-]([0-9A-Za-z.-])*\"/>\n          \
    \ </xs:restriction>\n         </xs:simpleType>\n       </xs:attribute>\n     \
    \  <xs:attribute name=\"path\" use=\"required\">\n         <!-- <xs:simpleType>\n\
    \           <xs:restriction base=\"xs:integer\">\n             <xs:pattern value=\"\
    [0-9]*\\*[0-9]*()\"/>\n           </xs:restriction>\n         </xs:simpleType>\
    \ -->\n       </xs:attribute>\n       <xs:attribute name=\"id\" use=\"required\"\
    >\n         <xs:simpleType>\n           <xs:restriction base=\"xs:string\">\n\
    \             <xs:pattern value=\"0x([0-9A-F][0-9A-F])+\"/>\n           </xs:restriction>\n\
    \         </xs:simpleType>\n       </xs:attribute>\n       <xs:attribute name=\"\
    minOccurs\" default=\"0\">\n         <xs:simpleType>\n           <xs:restriction\
    \ base=\"xs:integer\">\n             <xs:minInclusive value=\"0\"/>\n        \
    \   </xs:restriction>\n         </xs:simpleType>\n       </xs:attribute>\n   \
    \    <xs:attribute name=\"maxOccurs\" default=\"1\">\n         <xs:simpleType>\n\
    \           <xs:restriction base=\"xs:integer\">\n             <xs:minInclusive\
    \ value=\"0\"/>\n           </xs:restriction>\n         </xs:simpleType>\n   \
    \    </xs:attribute>\n       <xs:attribute name=\"range\"/>\n       <xs:attribute\
    \ name=\"length\"/>\n       <xs:attribute name=\"default\"/>\n       <xs:attribute\
    \ name=\"type\" use=\"required\">\n         <xs:simpleType>\n           <xs:restriction\
    \ base=\"xs:string\">\n             <xs:enumeration value=\"integer\"/>\n    \
    \         <xs:enumeration value=\"uinteger\"/>\n             <xs:enumeration value=\"\
    float\"/>\n             <xs:enumeration value=\"string\"/>\n             <xs:enumeration\
    \ value=\"date\"/>\n             <xs:enumeration value=\"utf-8\"/>\n         \
    \    <xs:enumeration value=\"master\"/>\n             <xs:enumeration value=\"\
    binary\"/>\n           </xs:restriction>\n         </xs:simpleType>\n       </xs:attribute>\n\
    \       <xs:attribute name=\"unknownsizeallowed\" type=\"xs:boolean\"\n      \
    \   default=\"false\"/>\n       <xs:attribute name=\"recursive\" type=\"xs:boolean\"\
    \n         default=\"false\"/>\n       <xs:attribute name=\"recurring\" type=\"\
    xs:boolean\"\n         default=\"false\"/>\n       <xs:attribute name=\"minver\"\
    \ default=\"1\">\n         <xs:simpleType>\n           <xs:restriction base=\"\
    xs:integer\">\n             <xs:minInclusive value=\"0\"/>\n           </xs:restriction>\n\
    \         </xs:simpleType>\n       </xs:attribute>\n       <xs:attribute name=\"\
    maxver\">\n         <xs:simpleType>\n           <xs:restriction base=\"xs:integer\"\
    >\n             <xs:minInclusive value=\"0\"/>\n           </xs:restriction>\n\
    \         </xs:simpleType>\n       </xs:attribute>\n     </xs:complexType>\n \
    \    <xs:complexType name=\"restrictionType\">\n       <xs:sequence>\n       \
    \  <xs:element name=\"enum\" type=\"enumType\"\n           minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n       </xs:sequence>\n     </xs:complexType>\n     <xs:complexType\
    \ name=\"extensionType\">\n       <xs:sequence>\n         <xs:any processContents=\"\
    skip\"\n           minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       </xs:sequence>\n\
    \       <xs:attribute name=\"type\" use=\"required\"/>\n       <xs:anyAttribute\
    \ processContents=\"skip\"/>\n     </xs:complexType>\n     <xs:complexType name=\"\
    enumType\">\n       <xs:sequence>\n         <xs:element name=\"documentation\"\
    \ type=\"documentationType\"\n           minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n       </xs:sequence>\n       <xs:attribute name=\"label\"/>\n       <xs:attribute\
    \ name=\"value\" use=\"required\"/>\n     </xs:complexType>\n     <xs:complexType\
    \ name=\"documentationType\" mixed=\"true\">\n       <xs:sequence>\n         <xs:element\
    \ name=\"a\"      type=\"xhtml:xhtml.a.type\"\n           minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n         <xs:element name=\"br\"     type=\"xhtml:xhtml.br.type\"\
    \n           minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n         <xs:element name=\"\
    strong\" type=\"xhtml:xhtml.strong.type\"\n           minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n       </xs:sequence>\n       <xs:attribute name=\"lang\"/>\n \
    \      <xs:attribute name=\"purpose\" use=\"required\">\n         <xs:simpleType>\n\
    \           <xs:restriction base=\"xs:string\">\n             <xs:enumeration\
    \ value=\"definition\"/>\n             <xs:enumeration value=\"rationale\"/>\n\
    \             <xs:enumeration value=\"references\"/>\n             <xs:enumeration\
    \ value=\"usage notes\"/>\n           </xs:restriction>\n         </xs:simpleType>\n\
    \       </xs:attribute>\n     </xs:complexType>\n     <xs:complexType name=\"\
    noteType\">\n       <xs:simpleContent>\n         <xs:extension base=\"xs:string\"\
    >\n           <xs:attribute name=\"note_attribute\" use=\"required\">\n      \
    \       <xs:simpleType>\n               <xs:restriction base=\"xs:string\">\n\
    \                 <xs:enumeration value=\"minOccurs\"/>\n                 <xs:enumeration\
    \ value=\"maxOccurs\"/>\n                 <xs:enumeration value=\"range\"/>\n\
    \                 <xs:enumeration value=\"length\"/>\n                 <xs:enumeration\
    \ value=\"default\"/>\n                 <xs:enumeration value=\"minver\"/>\n \
    \                <xs:enumeration value=\"maxver\"/>\n               </xs:restriction>\n\
    \             </xs:simpleType>\n           </xs:attribute>\n         </xs:extension>\n\
    \       </xs:simpleContent>\n     </xs:complexType>\n   </xs:schema>\n"
- title: 11.1.17.  Identically Recurring Elements
  contents:
  - "11.1.17.  Identically Recurring Elements\n   An Identically Recurring Element\
    \ is an EBML Element that MAY occur\n   within its Parent Element more than once,\
    \ but each recurrence of it\n   within that Parent Element MUST be identical both\
    \ in storage and\n   semantics.  Identically Recurring Elements are permitted\
    \ to be stored\n   multiple times within the same Parent Element in order to increase\n\
    \   data resilience and optimize the use of EBML in transmission.  For\n   instance,\
    \ a pertinent Top-Level Element could be periodically resent\n   within a datastream\
    \ so that an EBML Reader that starts reading the\n   stream from the middle could\
    \ better interpret the contents.\n   Identically Recurring Elements SHOULD include\
    \ a CRC-32 Element as a\n   Child Element; this is especially recommended when\
    \ EBML is used for\n   long-term storage or transmission.  If a Parent Element\
    \ contains more\n   than one copy of an Identically Recurring Element that includes\
    \ a\n   CRC-32 Element as a Child Element, then the first instance of the\n  \
    \ Identically Recurring Element with a valid CRC-32 value should be\n   used for\
    \ interpretation.  If a Parent Element contains more than one\n   copy of an Identically\
    \ Recurring Element that does not contain a\n   CRC-32 Element, or if CRC-32 Elements\
    \ are present but none are valid,\n   then the first instance of the Identically\
    \ Recurring Element should\n   be used for interpretation.\n"
- title: 11.1.18.  Textual expression of floats
  contents:
  - "11.1.18.  Textual expression of floats\n   When a float value is represented\
    \ textually in an EBML Schema, such\n   as within a default or range value, the\
    \ float values MUST be\n   expressed as Hexadecimal Floating-Point Constants as\
    \ defined in the\n   C11 standard [ISO9899] (see Section 6.4.4.2 on Floating Constants).\n\
    \   Table 9 provides examples of expressions of float ranges.\n      | as decimal\
    \        | as Hexadecimal Floating-Point Constants |\n      | 0.0            \
    \   | 0x0p+1                                  |\n      | 0.0-1.0           | 0x0p+1-0x1p+0\
    \                           |\n      | 1.0-256.0         | 0x1p+0-0x1p+8     \
    \                      |\n      | 0.857421875       | 0x1.b7p-1              \
    \                 |\n      | -1.0--0.857421875 | -0x1p+0--0x1.b7p-1          \
    \            |\n          Table 9: Example of Floating-Point values and ranges\
    \ as\n              decimal and Hexadecimal Floating-Point Constants\n   Within\
    \ an expression of a float range, as in an integer range, the -\n   (hyphen) character\
    \ is the separator between the minimum and maximum\n   values permitted by the\
    \ range.  Hexadecimal Floating-Point Constants\n   also use a - (hyphen) when\
    \ indicating a negative binary power.\n   Within a float range, when a - (hyphen)\
    \ is immediately preceded by a\n   letter p, then the - (hyphen) is a part of\
    \ the Hexadecimal Floating-\n   Point Constant that notes negative binary power.\
    \  Within a float\n   range, when a - (hyphen) is not immediately preceded by\
    \ a letter p,\n   then the - (hyphen) represents the separator between the minimum\
    \ and\n   maximum values permitted by the range.\n"
- title: 11.1.19.  Note on the use of default attributes to define Mandatory EBML
  contents:
  - "11.1.19.  Note on the use of default attributes to define Mandatory EBML\n  \
    \        Elements\n   If a Mandatory EBML Element has a default value declared\
    \ by an EBML\n   Schema and the value of the EBML Element is equal to the declared\n\
    \   default value, then that EBML Element is not required to be present\n   within\
    \ the EBML Document if its Parent Element is present.  In this\n   case, the default\
    \ value of the Mandatory EBML Element MUST be read by\n   the EBML Reader, although\
    \ the EBML Element is not present within its\n   Parent Element.\n   If a Mandatory\
    \ EBML Element has no default value declared by an EBML\n   Schema and its Parent\
    \ Element is present, then the EBML Element MUST\n   be present, as well.  If\
    \ a Mandatory EBML Element has a default value\n   declared by an EBML Schema,\
    \ and its Parent Element is present, and\n   the value of the EBML Element is\
    \ NOT equal to the declared default\n   value, then the EBML Element MUST be present.\n\
    \   Table 10 clarifies whether a Mandatory EBML Element MUST be written,\n   according\
    \ to whether the default value is declared, the value of the\n   EBML Element\
    \ is equal to the declared default value, and/or the\n   Parent Element is used.\n\
    \   |  Is the default |    Is the   | Is the Parent | Then is storing  |\n   |\
    \ value declared? | value equal |    Element    | the EBML Element |\n   |   \
    \              | to default? |    present?   |    REQUIRED?     |\n   |      \
    \ Yes       |     Yes     |      Yes      |        No        |\n   |       Yes\
    \       |     Yes     |       No      |        No        |\n   |       Yes   \
    \    |      No     |      Yes      |       Yes        |\n   |       Yes      \
    \ |      No     |       No      |        No        |\n   |        No       | \
    \    n/a     |      Yes      |       Yes        |\n   |        No       |    \
    \ n/a     |       No      |        No        |\n     Table 10: Demonstration of\
    \ the conditional requirements of VINT\n"
- title: 11.2.  EBML Header Elements
  contents:
  - "11.2.  EBML Header Elements\n   This document contains definitions of all EBML\
    \ Elements of the EBML\n   Header.\n"
- title: 11.2.1.  EBML Element
  contents:
  - "11.2.1.  EBML Element\n   name:  EBML\n   path:  \"\\EBML\"\n   id:  0x1A45DFA3\n\
    \   minOccurs:  1\n   maxOccurs:  1\n   type:  Master Element\n   description:\
    \  Set the EBML characteristics of the data to follow.\n      Each EBML Document\
    \ has to start with this.\n"
- title: 11.2.2.  EBMLVersion Element
  contents:
  - "11.2.2.  EBMLVersion Element\n   name:  EBMLVersion\n   path:  \"\\EBML\\EBMLVersion\"\
    \n   id:  0x4286\n   minOccurs:  1\n   maxOccurs:  1\n   range:  not 0\n   default:\
    \  1\n   type:  Unsigned Integer\n   description:  The version of EBML specifications\
    \ used to create the\n      EBML Document.  The version of EBML defined in this\
    \ document is 1,\n      so EBMLVersion SHOULD be 1.\n"
- title: 11.2.3.  EBMLReadVersion Element
  contents:
  - "11.2.3.  EBMLReadVersion Element\n   name:  EBMLReadVersion\n   path:  \"\\EBML\\\
    EBMLReadVersion\"\n   id:  0x42F7\n   minOccurs:  1\n   maxOccurs:  1\n   range:\
    \  1\n   default:  1\n   type:  Unsigned Integer\n   description:  The minimum\
    \ EBML version an EBML Reader has to support\n      to read this EBML Document.\
    \  The EBMLReadVersion Element MUST be\n      less than or equal to EBMLVersion.\n"
- title: 11.2.4.  EBMLMaxIDLength Element
  contents:
  - "11.2.4.  EBMLMaxIDLength Element\n   name:  EBMLMaxIDLength\n   path:  \"\\EBML\\\
    EBMLMaxIDLength\"\n   id:  0x42F2\n   minOccurs:  1\n   maxOccurs:  1\n   range:\
    \  >=4\n   default:  4\n   type:  Unsigned Integer\n   description:  The EBMLMaxIDLength\
    \ Element stores the maximum\n      permitted length in octets of the Element\
    \ IDs to be found within\n      the EBML Body.  An EBMLMaxIDLength Element value\
    \ of four is\n      RECOMMENDED, though larger values are allowed.\n"
- title: 11.2.5.  EBMLMaxSizeLength Element
  contents:
  - "11.2.5.  EBMLMaxSizeLength Element\n   name:  EBMLMaxSizeLength\n   path:  \"\
    \\EBML\\EBMLMaxSizeLength\"\n   id:  0x42F3\n   minOccurs:  1\n   maxOccurs: \
    \ 1\n   range:  not 0\n   default:  8\n   type:  Unsigned Integer\n   description:\
    \  The EBMLMaxSizeLength Element stores the maximum\n      permitted length in\
    \ octets of the expressions of all Element Data\n      Sizes to be found within\
    \ the EBML Body.  The EBMLMaxSizeLength\n      Element documents an upper bound\
    \ for the \"length\" of all Element\n      Data Size expressions within the EBML\
    \ Body and not an upper bound\n      for the \"value\" of all Element Data Size\
    \ expressions within the\n      EBML Body.  EBML Elements that have an Element\
    \ Data Size\n      expression that is larger in octets than what is expressed\
    \ by\n      EBMLMaxSizeLength Element are invalid.\n"
- title: 11.2.6.  DocType Element
  contents:
  - "11.2.6.  DocType Element\n   name:  DocType\n   path:  \"\\EBML\\DocType\"\n\
    \   id:  0x4282\n   minOccurs:  1\n   maxOccurs:  1\n   length:  >0\n   type:\
    \  String\n   description:  A string that describes and identifies the content\
    \ of\n      the EBML Body that follows this EBML Header.\n"
- title: 11.2.7.  DocTypeVersion Element
  contents:
  - "11.2.7.  DocTypeVersion Element\n   name:  DocTypeVersion\n   path:  \"\\EBML\\\
    DocTypeVersion\"\n   id:  0x4287\n   minOccurs:  1\n   maxOccurs:  1\n   range:\
    \  not 0\n   default:  1\n   type:  Unsigned Integer\n   description:  The version\
    \ of DocType interpreter used to create the\n      EBML Document.\n"
- title: 11.2.8.  DocTypeReadVersion Element
  contents:
  - "11.2.8.  DocTypeReadVersion Element\n   name:  DocTypeReadVersion\n   path: \
    \ \"\\EBML\\DocTypeReadVersion\"\n   id:  0x4285\n   minOccurs:  1\n   maxOccurs:\
    \  1\n   range:  not 0\n   default:  1\n   type:  Unsigned Integer\n   description:\
    \  The minimum DocType version an EBML Reader has to\n      support to read this\
    \ EBML Document.  The value of the\n      DocTypeReadVersion Element MUST be less\
    \ than or equal to the value\n      of the DocTypeVersion Element.\n"
- title: 11.2.9.  DocTypeExtension Element
  contents:
  - "11.2.9.  DocTypeExtension Element\n   name:  DocTypeExtension\n   path:  \"\\\
    EBML\\DocTypeExtension\"\n   id:  0x4281\n   minOccurs:  0\n   type:  Master Element\n\
    \   description:  A DocTypeExtension adds extra Elements to the main\n      DocType+DocTypeVersion\
    \ tuple it's attached to.  An EBML Reader MAY\n      know these extra Elements\
    \ and how to use them.  A DocTypeExtension\n      MAY be used to iterate between\
    \ experimental Elements before they\n      are integrated into a regular DocTypeVersion.\
    \  Reading one\n      DocTypeExtension version of a DocType+DocTypeVersion tuple\
    \ doesn't\n      imply one should be able to read upper versions of this\n   \
    \   DocTypeExtension.\n"
- title: 11.2.10.  DocTypeExtensionName Element
  contents:
  - "11.2.10.  DocTypeExtensionName Element\n   name:  DocTypeExtensionName\n   path:\
    \  \"\\EBML\\DocTypeExtension\\DocTypeExtensionName\"\n   id:  0x4283\n   minOccurs:\
    \  1\n   maxOccurs:  1\n   length:  >0\n   type:  String\n   description:  The\
    \ name of the DocTypeExtension to differentiate it\n      from other DocTypeExtensions\
    \ of the same DocType+DocTypeVersion\n      tuple.  A DocTypeExtensionName value\
    \ MUST be unique within the\n      EBML Header.\n"
- title: 11.2.11.  DocTypeExtensionVersion Element
  contents:
  - "11.2.11.  DocTypeExtensionVersion Element\n   name:  DocTypeExtensionVersion\n\
    \   path:  \"\\EBML\\DocTypeExtension\\DocTypeExtensionVersion\"\n   id:  0x4284\n\
    \   minOccurs:  1\n   maxOccurs:  1\n   range:  not 0\n   type:  Unsigned Integer\n\
    \   description:  The version of the DocTypeExtension.  Different\n      DocTypeExtensionVersion\
    \ values of the same DocType +\n      DocTypeVersion + DocTypeExtensionName tuple\
    \ MAY contain completely\n      different sets of extra Elements.  An EBML Reader\
    \ MAY support\n      multiple versions of the same tuple, only one version of\
    \ the\n      tuple, or not support the tuple at all.\n"
- title: 11.3.  Global Elements
  contents:
  - "11.3.  Global Elements\n   EBML allows some special Elements to be found within\
    \ more than one\n   parent in an EBML Document or optionally at the Root Level\
    \ of an EBML\n   Body.  These Elements are called Global Elements.  There are\
    \ two\n   Global Elements that can be found in any EBML Document: the CRC-32\n\
    \   Element and the Void Element.  An EBML Schema MAY add other Global\n   Elements\
    \ to the format it defines.  These extra elements apply only\n   to the EBML Body,\
    \ not the EBML Header.\n   Global Elements are EBML Elements whose EBMLLastParent\
    \ part of the\n   path has a GlobalPlaceholder.  Because it is the last Parent\
    \ part of\n   the path, a Global Element might also have EBMLParentPath parts\
    \ in\n   its path.  In this case, the Global Element can only be found within\n\
    \   this EBMLParentPath path -- i.e., it's not fully \"global\".\n   A Global\
    \ Element can be found in many Parent Elements, allowing the\n   same number of\
    \ occurrences in each Parent where this Element is\n   found.\n"
- title: 11.3.1.  CRC-32 Element
  contents:
  - "11.3.1.  CRC-32 Element\n   name:  CRC-32\n   path:  \"\\(1-\\)CRC-32\"\n   id:\
    \  0xBF\n   minOccurs:  0\n   maxOccurs:  1\n   length:  4\n   type:  Binary\n\
    \   description:  The CRC-32 Element contains a 32-bit Cyclic Redundancy\n   \
    \   Check value of all the Element Data of the Parent Element as\n      stored\
    \ except for the CRC-32 Element itself.  When the CRC-32\n      Element is present,\
    \ the CRC-32 Element MUST be the first ordered\n      EBML Element within its\
    \ Parent Element for easier reading.  All\n      Top-Level Elements of an EBML\
    \ Document that are Master Elements\n      SHOULD include a CRC-32 Element as\
    \ a Child Element.  The CRC in\n      use is the IEEE-CRC-32 algorithm as used\
    \ in the [ISO3309] standard\n      and in Section 8.1.1.6.2 of [ITU.V42], with\
    \ initial value of\n      0xFFFFFFFF.  The CRC value MUST be computed on a little-endian\n\
    \      bytestream and MUST use little-endian storage.\n"
- title: 11.3.2.  Void Element
  contents:
  - "11.3.2.  Void Element\n   name:  Void\n   path:  \"\\(-\\)Void\"\n   id:  0xEC\n\
    \   minOccurs:  0\n   type:  Binary\n   description:  Used to void data or to\
    \ avoid unexpected behaviors when\n      using damaged data.  The content is discarded.\
    \  Also used to\n      reserve space in a subelement for later use.\n"
- title: 12.  Considerations for Reading EBML Data
  contents:
  - "12.  Considerations for Reading EBML Data\n   The following scenarios describe\
    \ events to consider when reading EBML\n   Documents, as well as the recommended\
    \ design of an EBML Reader.\n   If a Master Element contains a CRC-32 Element\
    \ that doesn't validate,\n   then the EBML Reader MAY ignore all contained data\
    \ except for\n   Descendant Elements that contain their own valid CRC-32 Element.\n\
    \   In the following XML representation of a simple, hypothetical EBML\n   fragment,\
    \ a Master Element called CONTACT contains two Child\n   Elements, NAME and ADDRESS.\
    \  In this example, some data within the\n   NAME Element had been altered so\
    \ that the CRC-32 of the NAME Element\n   does not validate, and thus any Ancestor\
    \ Element with a CRC-32 would\n   therefore also no longer validate.  However,\
    \ even though the CONTACT\n   Element has a CRC-32 that does not validate (because\
    \ of the changed\n   data within the NAME Element), the CRC-32 of the ADDRESS\
    \ Element does\n   validate, and thus the contents and semantics of the ADDRESS\
    \ Element\n   MAY be used.\n   <CONTACT>\n       <CRC-32>c119a69b</CRC-32><!--\
    \ does not validate -->\n       <NAME>\n           <CRC-32>1f59ee2b</CRC-32><!--\
    \ does not validate -->\n           <FIRST-NAME>invalid data</FIRST-NAME>\n  \
    \         <LAST-NAME>invalid data</LAST-NAME>\n       </NAME>\n       <ADDRESS>\n\
    \           <CRC-32>df941cc9</CRC-32><!-- validates -->\n           <STREET>valid\
    \ data</STREET>\n           <CITY>valid data</CITY>\n       </ADDRESS>\n   </CONTACT>\n\
    \   If a Master Element contains more occurrences of a Child Master\n   Element\
    \ than permitted according to the \"maxOccurs\" and \"recurring\"\n   attributes\
    \ of the definition of that Element, then the occurrences in\n   addition to \"\
    maxOccurs\" MAY be ignored.\n   If a Master Element contains more occurrences\
    \ of a Child Element than\n   permitted according to the \"maxOccurs\" attribute\
    \ of the definition of\n   that Element, then all instances of that Element after\
    \ the first\n   \"maxOccurs\" occurrences from the beginning of its Parent Element\n\
    \   SHOULD be ignored.\n"
- title: 13.  Terminating Elements
  contents:
  - "13.  Terminating Elements\n   Null Octets, which are octets with all bits set\
    \ to zero, MAY follow\n   the value of a String Element or UTF-8 Element to serve\
    \ as a\n   terminator.  An EBML Writer MAY terminate a String Element or UTF-8\n\
    \   Element with Null Octets in order to overwrite a stored value with a\n   new\
    \ value of lesser length while maintaining the same Element Data\n   Size; this\
    \ can prevent the need to rewrite large portions of an EBML\n   Document.  Otherwise,\
    \ the use of Null Octets within a String Element\n   or UTF-8 Element is NOT RECOMMENDED.\
    \  The Element Data of a UTF-8\n   Element MUST be a valid UTF-8 string up to\
    \ whichever comes first: the\n   end of the Element or the first occurring Null\
    \ octet.  Within the\n   Element Data of a String or UTF-8 Element, any Null octet\
    \ itself and\n   any following data within that Element SHOULD be ignored.  A\
    \ string\n   value and a copy of that string value terminated by one or more Null\n\
    \   Octets are semantically equal.\n   Table 11 shows examples of semantics and\
    \ validation for the use of\n   Null Octets.  Values to represent Stored Values\
    \ and the Semantic\n   Meaning as represented as hexadecimal values.\n       \
    \        | Stored Value        | Semantic Meaning    |\n               | 0x65\
    \ 0x62 0x6D 0x6C | 0x65 0x62 0x6D 0x6C |\n               | 0x65 0x62 0x00 0x6C\
    \ | 0x65 0x62           |\n               | 0x65 0x62 0x00 0x00 | 0x65 0x62  \
    \         |\n               | 0x65 0x62           | 0x65 0x62           |\n  \
    \                Table 11: Examples of semantics for Null\n                  \
    \          Octets in VINT_DATA\n"
- title: 14.  Guidelines for Updating Elements
  contents:
  - "14.  Guidelines for Updating Elements\n   An EBML Document can be updated without\
    \ requiring that the entire\n   EBML Document be rewritten.  These recommendations\
    \ describe\n   strategies for changing the Element Data of a written EBML Element\n\
    \   with minimal disruption to the rest of the EBML Document.\n"
- title: 14.1.  Reducing Element Data in Size
  contents:
  - "14.1.  Reducing Element Data in Size\n   There are three methods to reduce the\
    \ size of Element Data of a\n   written EBML Element.\n"
- title: 14.1.1.  Adding a Void Element
  contents:
  - "14.1.1.  Adding a Void Element\n   When an EBML Element is changed to reduce\
    \ its total length by more\n   than one octet, an EBML Writer SHOULD fill the\
    \ freed space with a\n   Void Element.\n"
- title: 14.1.2.  Extending the Element Data Size
  contents:
  - "14.1.2.  Extending the Element Data Size\n   The same value for Element Data\
    \ Size MAY be written in various\n   lengths, so for minor reductions of the Element\
    \ Data, the Element\n   Size MAY be written to a longer octet length to fill the\
    \ freed space.\n   For example, the first row of Table 12 depicts a String Element\
    \ that\n   stores an Element ID (3 octets), Element Data Size (1 octet), and\n\
    \   Element Data (4 octets).  If the Element Data is changed to reduce\n   the\
    \ length by one octet, and if the current length of the Element\n   Data Size\
    \ is less than its maximum permitted length, then the Element\n   Data Size of\
    \ that Element MAY be rewritten to increase its length by\n   one octet.  Thus,\
    \ before and after the change, the EBML Element\n   maintains the same length\
    \ of 8 octets, and data around the Element\n   does not need to be moved.\n  \
    \    | Status      | Element ID | Element Data Size | Element Data |\n      |\
    \ Before edit | 0x3B4040   | 0x84              | 0x65626D6C   |\n      | After\
    \ edit  | 0x3B4040   | 0x4003            | 0x6D6B76     |\n          Table 12:\
    \ Example of editing a VINT to reduce VINT_DATA\n                            length\
    \ by one octet\n   This method is RECOMMENDED when the Element Data is reduced\
    \ by a\n   single octet; for reductions by two or more octets, it is RECOMMENDED\n\
    \   to fill the freed space with a Void Element.\n   Note that if the Element\
    \ Data length needs to be rewritten as\n   shortened by one octet and the Element\
    \ Data Size could be rewritten\n   as a shorter VINT, then it is RECOMMENDED to\
    \ rewrite the Element Data\n   Size as one octet shorter, shorten the Element\
    \ Data by one octet, and\n   follow that Element with a Void Element.  For example,\
    \ Table 13\n   depicts a String Element that stores an Element ID (3 octets),\n\
    \   Element Data Size (2 octets, but could be rewritten in one octet),\n   and\
    \ Element Data (3 octets).  If the Element Data is to be rewritten\n   to a two-octet\
    \ length, then another octet can be taken from Element\n   Data Size so that there\
    \ is enough space to add a two-octet Void\n   Element.\n   | Status | Element\
    \ ID | Element Data Size | Element Data | Void    |\n   | Before | 0x3B4040  \
    \ | 0x4003            | 0x6D6B76     |         |\n   | After  | 0x3B4040   | 0x82\
    \              | 0x6869       | 0xEC80  |\n      Table 13: Example of editing\
    \ a VINT to reduce VINT_DATA length\n                          by more than one\
    \ octet\n"
- title: 14.1.3.  Terminating Element Data
  contents:
  - "14.1.3.  Terminating Element Data\n   For String Elements and UTF-8 Elements,\
    \ the length of Element Data\n   could be reduced by adding Null Octets to terminate\
    \ the Element Data\n   (see Section 13).\n   In Table 14, Element Data four octets\
    \ long is changed to a value\n   three octets long, followed by a Null Octet;\
    \ the Element Data Size\n   includes any Null Octets used to terminate Element\
    \ Data and therefore\n   remains unchanged.\n      | Status      | Element ID\
    \ | Element Data Size | Element Data |\n      | Before edit | 0x3B4040   | 0x84\
    \              | 0x65626D6C   |\n      | After edit  | 0x3B4040   | 0x84     \
    \         | 0x6D6B7600   |\n           Table 14: Example of terminating VINT_DATA\
    \ with a Null\n               Octet when reducing VINT length during an edit\n\
    \   Note that this method is NOT RECOMMENDED.  For reductions of one\n   octet,\
    \ the method for Extending the Element Data Size SHOULD be used.\n   For reduction\
    \ by more than one octet, the method for Adding a Void\n   Element SHOULD be used.\n"
- title: 14.2.  Considerations when Updating Elements with Cyclic Redundancy
  contents:
  - "14.2.  Considerations when Updating Elements with Cyclic Redundancy\n       Check\
    \ (CRC)\n   If the Element to be changed is a Descendant Element of any Master\n\
    \   Element that contains a CRC-32 Element (see Section 11.3.1), then the\n  \
    \ CRC-32 Element MUST be verified before permitting the change.\n   Additionally,\
    \ the CRC-32 Element value MUST be subsequently updated\n   to reflect the changed\
    \ data.\n"
- title: 15.  Backward and Forward Compatibility
  contents:
  - "15.  Backward and Forward Compatibility\n   Elements of an EBML format SHOULD\
    \ be designed with backward and\n   forward compatibility in mind.\n"
- title: 15.1.  Backward Compatibility
  contents:
  - "15.1.  Backward Compatibility\n   Backward compatibility of new EBML Elements\
    \ can be achieved by using\n   default values for mandatory elements.  The default\
    \ value MUST\n   represent the state that was assumed for previous versions of\
    \ the\n   EBML Schema, without this new EBML Element.  If such a state doesn't\n\
    \   make sense for previous versions, then the new EBML Element SHOULD\n   NOT\
    \ be mandatory.\n   Non-mandatory EBML Elements can be added in a new EBMLDocTypeVersion.\n\
    \   Since they are not mandatory, they won't be found in older versions\n   of\
    \ the EBMLDocTypeVersion, just as they might not be found in newer\n   versions.\
    \  This causes no compatibility issue.\n"
- title: 15.2.  Forward Compatibility
  contents:
  - "15.2.  Forward Compatibility\n   EBML Elements MAY be marked as deprecated in\
    \ a new EBMLDocTypeVersion\n   using the \"maxver\" attribute of the EBML Schema.\
    \  If such an Element\n   is found in an EBML Document with a newer version of\
    \ the\n   EBMLDocTypeVersion, it SHOULD be discarded.\n"
- title: 16.  Security Considerations
  contents:
  - "16.  Security Considerations\n   EBML itself does not offer any kind of security\
    \ and does not provide\n   confidentiality.  EBML does not provide any kind of\
    \ authorization.\n   EBML only offers marginally useful and effective data integrity\n\
    \   options, such as CRC elements.\n   Even if the semantic layer offers any kind\
    \ of encryption, EBML itself\n   could leak information at both the semantic layer\
    \ (as declared via\n   the DocType Element) and within the EBML structure (the\
    \ presence of\n   EBML Elements can be derived even with an unknown semantic layer\n\
    \   using a heuristic approach -- not without errors, of course, but with\n  \
    \ a certain degree of confidence).\n   An EBML Document that has the following\
    \ issues may still be handled\n   by the EBML Reader and the data accepted as\
    \ such, depending on how\n   strict the EBML Reader wants to be:\n   *  Invalid\
    \ Element IDs that are longer than the limit stated in the\n      EBMLMaxIDLength\
    \ Element of the EBML Header.\n   *  Invalid Element IDs that are not encoded\
    \ in the shortest-possible\n      way.\n   *  Invalid Element Data Size values\
    \ that are longer than the limit\n      stated in the EBMLMaxSizeLength Element\
    \ of the EBML Header.\n   Element IDs that are unknown to the EBML Reader MAY\
    \ be accepted as\n   valid EBML IDs in order to skip such elements.\n   EBML Elements\
    \ with a string type may contain extra data after the\n   first 0x00.  These data\
    \ MUST be discarded according to the Section 13\n   rules.\n   An EBML Reader\
    \ may discard some or all data if the following errors\n   are found in the EBML\
    \ Document:\n   *  Invalid Element Data Size values (e.g., extending the length\
    \ of\n      the EBML Element beyond the scope of the Parent Element, possibly\n\
    \      triggering access-out-of-bounds issues).\n   *  Very high lengths in order\
    \ to force out-of-memory situations\n      resulting in a denial of service, access-out-of-bounds\
    \ issues,\n      etc.\n   *  Missing EBML Elements that are mandatory in a Master\
    \ Element and\n      have no declared default value, making the semantic invalid\
    \ at\n      that Master Element level.\n   *  Usage of invalid UTF-8 encoding\
    \ in EBML Elements of UTF-8 type\n      (e.g., in order to trigger access-out-of-bounds\
    \ or buffer-overflow\n      issues).\n   *  Usage of invalid data in EBML Elements\
    \ with a date type,\n      triggering bogus date accesses.\n   *  The CRC-32 Element\
    \ (see Section 11.3.1) of a Master Element\n      doesn't match the rest of the\
    \ content of that Master Element.\n   Side-channel attacks could exploit:\n  \
    \ *  The semantic equivalence of the same string stored in a String\n      Element\
    \ or UTF-8 Element with and without zero-bit padding, making\n      comparison\
    \ at the semantic level invalid.\n   *  The semantic equivalence of VINT_DATA\
    \ within Element Data Size\n      with two different lengths due to left-padding\
    \ zero bits, making\n      comparison at the semantic level invalid.\n   *  Data\
    \ contained within a Master Element that is not itself part of\n      a Child\
    \ Element, which can trigger incorrect parsing behavior in\n      EBML Readers.\n\
    \   *  Extraneous copies of Identically Recurring Element, making parsing\n  \
    \    unnecessarily slow to the point of not being usable.\n   *  Copies of Identically\
    \ Recurring Element within a Parent Element\n      that contain invalid CRC-32\
    \ Elements.  EBML Readers not checking\n      the CRC-32 might use the version\
    \ of the element with mismatching\n      CRC-32s.\n   *  Use of Void Elements\
    \ that could be used to hide content or create\n      bogus resynchronization\
    \ points seen by some EBML Readers and not\n      others.\n"
- title: 17.  IANA Considerations
  contents:
  - '17.  IANA Considerations

    '
- title: 17.1.  EBML Element IDs Registry
  contents:
  - "17.1.  EBML Element IDs Registry\n   This document creates a new IANA registry\
    \ called the \"EBML Element\n   IDs\" registry.\n   Element IDs are described\
    \ in Section 5.  Element IDs are encoded\n   using the VINT mechanism described\
    \ in Section 4 and can be between\n   one and five octets long.  Five-octet-long\
    \ Element IDs are possible\n   only if declared in the header.\n   This IANA registry\
    \ only applies to Elements that can be contained in\n   the EBML Header, thus\
    \ including Global Elements.  Elements only found\n   in the EBML Body have their\
    \ own set of independent Element IDs and\n   are not part of this IANA registry.\n\
    \   One-octet Element IDs MUST be between 0x81 and 0xFE.  These items are\n  \
    \ valuable because they are short, and they need to be used for\n   commonly repeated\
    \ elements.  Element IDs are to be allocated within\n   this range according to\
    \ the \"RFC Required\" policy [RFC8126].\n   The following one-octet Element IDs\
    \ are RESERVED: 0xFF and 0x80.\n   Values in the one-octet range of 0x00 to 0x7F\
    \ are not valid for use\n   as an Element ID.\n   Two-octet Element IDs MUST be\
    \ between 0x407F and 0x7FFE.  Element IDs\n   are to be allocated within this\
    \ range according to the \"Specification\n   Required\" policy [RFC8126].\n  \
    \ The following two-octet Element IDs are RESERVED: 0x7FFF and 0x4000.\n   Values\
    \ in the two-octet ranges of 0x0000 to 0x3FFF and 0x8000 to\n   0xFFFF are not\
    \ valid for use as an Element ID.\n   Three-octet Element IDs MUST be between\
    \ 0x203FFF and 0x3FFFFE.\n   Element IDs are to be allocated within this range\
    \ according to the\n   \"First Come First Served\" policy [RFC8126].\n   The following\
    \ three-octet Element IDs are RESERVED: 0x3FFFFF and\n   0x200000.\n   Values\
    \ in the three-octet ranges of 0x000000 to 0x1FFFFF and 0x400000\n   to 0xFFFFFF\
    \ are not valid for use as an Element ID.\n   Four-octet Element IDs MUST be between\
    \ 0x101FFFFF and 0x1FFFFFFE.\n   Four-octet Element IDs are somewhat special in\
    \ that they are useful\n   for resynchronizing to major structures in the event\
    \ of data\n   corruption or loss.  As such, four-octet Element IDs are split into\n\
    \   two categories.  Four-octet Element IDs whose lower three octets (as\n   encoded)\
    \ would make printable 7-bit ASCII values (0x20 to 0x7E,\n   inclusive) MUST be\
    \ allocated by the \"Specification Required\" policy.\n   Sequential allocation\
    \ of values is not required: specifications\n   SHOULD include a specific request\
    \ and are encouraged to do early\n   allocations.\n   To be clear about the above\
    \ category: four-octet Element IDs always\n   start with hex 0x10 to 0x1F, and\
    \ that octet may be chosen so that the\n   entire VINT has some desirable property,\
    \ such as a specific CRC.  The\n   other three octets, when ALL having values\
    \ between 0x20 (32, ASCII\n   Space) and 0x7E (126, ASCII \"~\"), fall into this\
    \ category.\n   Other four-octet Element IDs may be allocated by the \"First Come\n\
    \   First Served\" policy.\n   The following four-octet Element IDs are RESERVED:\
    \ 0x1FFFFFFF and\n   0x10000000.\n   Values in the four-octet ranges of 0x00000000\
    \ to 0x0FFFFFFF and\n   0x20000000 to 0xFFFFFFFF are not valid for use as an Element\
    \ ID.\n   Five-octet Element IDs (values from 0x080FFFFFFF to 0x0FFFFFFFFE) are\n\
    \   RESERVED according to the \"Experimental Use\" policy [RFC8126]: they\n  \
    \ may be used by anyone at any time, but there is no coordination.\n   ID Values\
    \ found in this document are assigned as initial values as\n   follows:\n    \
    \    | Element ID | Element Name            | Reference       |\n        | 0x1A45DFA3\
    \ | EBML                    | Described in    |\n        |     0x4286 | EBMLVersion\
    \             | Described in    |\n        |     0x42F7 | EBMLReadVersion    \
    \     | Described in    |\n        |     0x42F2 | EBMLMaxIDLength         | Described\
    \ in    |\n        |     0x42F3 | EBMLMaxSizeLength       | Described in    |\n\
    \        |     0x4282 | DocType                 | Described in    |\n        |\
    \     0x4287 | DocTypeVersion          | Described in    |\n        |     0x4285\
    \ | DocTypeReadVersion      | Described in    |\n        |     0x4281 | DocTypeExtension\
    \        | Described in    |\n        |     0x4283 | DocTypeExtensionName    |\
    \ Described in    |\n        |     0x4284 | DocTypeExtensionVersion | Described\
    \ in    |\n        |       0xBF | CRC-32                  | Described in    |\n\
    \        |       0xEC | Void                    | Described in    |\n        \
    \  Table 15: IDs and Names for EBML Elements assigned by\n                   \
    \           this document\n"
- title: 17.2.  EBML DocTypes Registry
  contents:
  - "17.2.  EBML DocTypes Registry\n   This document creates a new IANA registry called\
    \ the \"EBML DocTypes\"\n   registry.\n   To register a new DocType in this registry,\
    \ one needs a DocType name,\n   a Description of the DocType, a Change Controller\
    \ (IESG or email of\n   registrant), and an optional Reference to a document describing\
    \ the\n   DocType.\n   DocType values are described in Section 11.1.4.1.  DocTypes\
    \ are ASCII\n   strings, defined in Section 7.4, which label the official name\
    \ of the\n   EBML Document Type.  The strings may be allocated according to the\n\
    \   \"First Come First Served\" policy.\n   The use of ASCII corresponds to the\
    \ types and code already in use;\n   the value is not meant to be visible to the\
    \ user.\n   DocType string values of \"matroska\" and \"webm\" are RESERVED to\
    \ the\n   IETF for future use.  These can be assigned via the \"IESG Approval\"\
    \n   or \"RFC Required\" policies [RFC8126].\n"
- title: 18.  Normative References
  contents:
  - "18.  Normative References\n   [IEEE.754] IEEE, \"IEEE Standard for Binary Floating-Point\n\
    \              Arithmetic\", 13 June 2019,\n              <https://standards.ieee.org/standard/754-2019.html>.\n\
    \   [ISO3309]  International Organization for Standardization, \"Data\n      \
    \        communication -- High-level data link control procedures\n          \
    \    -- Frame structure\", ISO 3309, 3rd Edition, October 1984,\n            \
    \  <https://www.iso.org/standard/8558.html>.\n   [ISO9899]  International Organization\
    \ for Standardization,\n              \"Information technology -- Programming\
    \ languages -- C\",\n              ISO/IEC 9899:2011, 2011,\n              <https://www.iso.org/standard/57853.html>.\n\
    \   [ITU.V42]  International Telecommunications Union, \"Error-correcting\n  \
    \            procedures for DCEs using asynchronous-to-synchronous\n         \
    \     conversion\", ITU-T Recommendation V.42, March 2002,\n              <https://www.itu.int/rec/T-REC-V.42>.\n\
    \   [RFC0020]  Cerf, V., \"ASCII format for network interchange\", STD 80,\n \
    \             RFC 20, DOI 10.17487/RFC0020, October 1969,\n              <https://www.rfc-editor.org/info/rfc20>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2648]\
    \  Moats, R., \"A URN Namespace for IETF Documents\", RFC 2648,\n            \
    \  DOI 10.17487/RFC2648, August 1999,\n              <https://www.rfc-editor.org/info/rfc2648>.\n\
    \   [RFC3339]  Klyne, G. and C. Newman, \"Date and Time on the Internet:\n   \
    \           Timestamps\", RFC 3339, DOI 10.17487/RFC3339, July 2002,\n       \
    \       <https://www.rfc-editor.org/info/rfc3339>.\n   [RFC3629]  Yergeau, F.,\
    \ \"UTF-8, a transformation format of ISO\n              10646\", STD 63, RFC\
    \ 3629, DOI 10.17487/RFC3629, November\n              2003, <https://www.rfc-editor.org/info/rfc3629>.\n\
    \   [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n  \
    \            DOI 10.17487/RFC3688, January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n\
    \   [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n \
    \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <https://www.rfc-editor.org/info/rfc5234>.\n  \
    \ [RFC5646]  Phillips, A., Ed. and M. Davis, Ed., \"Tags for Identifying\n   \
    \           Languages\", BCP 47, RFC 5646, DOI 10.17487/RFC5646,\n           \
    \   September 2009, <https://www.rfc-editor.org/info/rfc5646>.\n   [RFC7405] \
    \ Kyzivat, P., \"Case-Sensitive String Support in ABNF\",\n              RFC 7405,\
    \ DOI 10.17487/RFC7405, December 2014,\n              <https://www.rfc-editor.org/info/rfc7405>.\n\
    \   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n      \
    \        Writing an IANA Considerations Section in RFCs\", BCP 26,\n         \
    \     RFC 8126, DOI 10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n\
    \   [RFC8141]  Saint-Andre, P. and J. Klensin, \"Uniform Resource Names\n    \
    \          (URNs)\", RFC 8141, DOI 10.17487/RFC8141, April 2017,\n           \
    \   <https://www.rfc-editor.org/info/rfc8141>.\n   [RFC8174]  Leiba, B., \"Ambiguity\
    \ of Uppercase vs Lowercase in RFC\n              2119 Key Words\", BCP 14, RFC\
    \ 8174, DOI 10.17487/RFC8174,\n              May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n\
    \   [XHTML]    McCarron, S., \"XHTML(tm) Basic 1.1 -- Second Edition\",\n    \
    \          Latest version available\n              at https://www.w3.org/TR/xhtml-basic,\
    \ 27 March 2018,\n              <https://www.w3.org/TR/2018/SPSD-xhtml-basic-20180327/>.\n\
    \   [XML]      Bray, T., Ed., Paoli, J., Ed., Sperberg-McQueen, C.M.,\n      \
    \        Ed., Maler, E., Ed., and F. Yergeau, Ed., \"Extensible\n            \
    \  Markup Language (XML) 1.0 (Fifth Edition)\", Latest version\n             \
    \ available at https://www.w3.org/TR/xml/, 26 November 2008,\n              <https://www.w3.org/TR/2008/REC-xml-20081126/>.\n\
    \   [XML-SCHEMA]\n              Fallside, D.C. and P. Walmsley, \"XML Schema Part\
    \ 0: Primer\n              Second Edition\", Latest version available at \n  \
    \            http://www.w3.org/TR/xmlschema-0/, 28 October 2004,\n           \
    \   <https://www.w3.org/TR/2004/REC-xmlschema-0-20041028/>.\n"
- title: 19.  Informative References
  contents:
  - "19.  Informative References\n   [Matroska] Lhomme, S., Bunkus, M., and D. Rice,\
    \ \"Matroska Media\n              Container Format Specifications\", Work in Progress,\n\
    \              Internet-Draft, draft-ietf-cellar-matroska-05, 17 April\n     \
    \         2020, <https://tools.ietf.org/html/draft-ietf-cellar-\n            \
    \  matroska-05>.\n   [WebM]     The WebM Project, \"WebM Container Guidelines\"\
    , 28 November\n              2017, <https://www.webmproject.org/docs/container/>.\n\
    \   [XPath]    Clark, J., Ed. and S. DeRose, \"XML Path Language (XPath)\n   \
    \           Version 1.0\", Latest version available\n              at https://www.w3.org/TR/xpath,\
    \ 16 November 1999,\n              <https://www.w3.org/TR/1999/REC-xpath-19991116>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Steve Lhomme\n   Email: slhomme@matroska.org\n   Dave\
    \ Rice\n   Email: dave@dericed.com\n"
