- title: __initial_text__
  contents:
  - '                Charting Networks in the X.500 Directory

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   There is a need for a framework wherein the infrastructural and\n\
    \   service related information about communication networks can be made\n   accessible\
    \ from all places and at all times in a reasonably efficient\n   manner and with\
    \ reasonable accuracy.  This document presents a model\n   in which a communication\
    \ network with all its related details and\n   descriptions can be represented\
    \ in the X.500 Directory. Schemas of\n   objects and their attributes which may\
    \ be used for this purpose are\n   presented.  The model envisages physical objects\
    \ and several logical\n   abstractions of the physical objects.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      1. Introduction                                    \
    \   2\n      2. Infrastructural information requirements           2\n      3.\
    \ The Nature of the Network Map - The X.500 Solution 4\n      4. The hierarchical\
    \ model of a network                5\n      4.1 Network maps                \
    \                      5\n      4.2 Representation in the X.500 Directory    \
    \         6\n      5. Position in The Directory Information Tree(DIT)    7\n \
    \     6. Proposed Schemes                                   8\n      6.1 Communication\
    \ Object Classes                      9\n      6.2 Physical elements         \
    \                       10\n      6.2.1 Network                              \
    \          10\n      6.2.2 Node                                           11\n\
    \      6.2.3 NetworkInterface                               12\n      6.3 Logical\
    \ Elements                                 12\n      6.3.1 Network           \
    \                             13\n      6.3.2 Node                           \
    \                13\n      6.3.3 NetworkInterface                            \
    \   13\n      7. Security Considerations                           14\n      8.\
    \ Authors' Addresses                                14\n      9. References  \
    \                                      15\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The rapid and widespread use of computer networking has highlighted\n\
    \   the importance of holding and servicing information about the\n   networking\
    \ infrastructure itself.  The growing and active interest in\n   network management,\
    \ which has concentrated mainly in the areas of\n   fault and performance management\
    \ on a local scale, is severely\n   constrained by the lack of any organized pool\
    \ of information about\n   the network infrastructure itself. Some attempts have\
    \ been made, on a\n   piecemeal basis, to provide a larger view of some particular\
    \ aspect\n   of the network (WHOIS, DNS, .. in the case of the Internet; [1],\n\
    \   [2]).  But to date, little or no effort has been made in setting up\n   the\
    \ infrastructural framework, for such an information pool. In this\n   work we\
    \ explore the possibility of setting up a framework to hold and\n   serve the\
    \ infrastructural information of a network.\n"
- title: 2. Infrastructural information requirements
  contents:
  - "2. Infrastructural information requirements\n   Network operation and management\
    \ requires information about the\n   structure of the network, the nodes, links\
    \ and their properties.\n   Further, with current networks extending literally\
    \ beyond bounds, the\n   scope of the information covers networks beyond the span\
    \ of local\n   domain of authority or administration.  When the Network was\n\
    \   relatively small and simple the map was already known to the\n   knowledgable\
    \ network administrator.  Based on this knowledge the\n   course of the packets\
    \ to different destinations would be charted. But\n   presently the size of the\
    \ Network is already beyond such usages. The\n   current growth of the Network\
    \ is near explosive. This is giving rise\n   to the urgent necessity of having\
    \ infrastructural and service related\n   information made accessible from all\
    \ places and at all times in a\n   reasonably efficient manner and with reasonable\
    \ accuracy. In the rest\n   of this work a network is the media for transmitting\
    \ information.\n   Network elements are equipment with one or more network interfaces\n\
    \   whereby it is possible to exchange information with the network.\n   Network\
    \ elements with multiple interfaces e.g.,\n   gateways/routers/bridges/repeaters...\
    \  may be used to connect\n   networks.  Network related information, referred\
    \ to as 'network map'\n   in the rest of this paper, should\n   1. Show the interconnection\
    \ between the various network\n      elements. This will basically represent the\
    \ Network as a graph\n      where vertices represent objects like gateways/workstations/\n\
    \      subnetworks and edges indicate the connections.\n   2. Show properties\
    \ and functions of the various network elements\n      and the interconnections.\
    \ Attributes of vertices will represent\n      various properties of the objects\
    \ e.g., speed, charge, protocol, OS,\n      etc. Functions include services offered\
    \ by a network element.\n   3. Contain various name and address information of\
    \ the networks\n      and network elements\n   4. Contain information about various\
    \ administrative and management\n      details related to the networks and network\
    \ elements.\n   5. Contain the policy related information, part of which may be\n\
    \      private while the other part may be made public.\n   Using this map the\
    \ following services may be provided\n   1. Configuration management:\n      -\
    \ Display the physical configuration of a network,\n        i.e., nodes and their\
    \ physical interconnections\n      - Display the logical configuration of a network,\n\
    \        i.e., nodes and their logical interconnections.\n   2. Route management:\n\
    \      - Find alternate routes by referring to the physical\n        and logical\
    \ configurations.\n      - Generate routing tables considering local policy and\n\
    \        policy of transit domains\n      - Check routing tables for routing loops,\n\
    \        non-optimality, incorrect paths, etc.\n   3. Fault management: In case\
    \ of network failures\n      alternatives may be found and used to bypass the\n\
    \      problem node or link.\n   4. Service management: Locate various services\
    \ and\n      servers in the Network.\n   5. Optimization: The information available\
    \ can be used\n      to carry out various optimizations, for example cost,\n \
    \     traffic, response-time, etc.\n   6. Provide mappings between the various\
    \ names and\n      addresses of elements\n   7. Depict administrative/autonomous\
    \ domains.\n   8. Network Administration and Management: References to\n     \
    \ people responsible for administering and technically\n      maintaining a network\
    \ will be useful.\n   Examples of such usages are described in [3], [4].\n"
- title: 3. The Nature of the Network Map - The X.500 solution
  contents:
  - "3. The Nature of the Network Map - The X.500 solution\n   Implementing and maintaining\
    \ a detailed map of the network poses a\n   serious problem.  The scope of the\
    \ map is global and the network\n   itself is expanding.  Some of the problems\
    \ that are peculiar to the\n   network map are listed below.\n   o The Network\
    \ configuration is quasi-static. Nodes,\n     links and networks are being added,updated\
    \ and deleted\n     someplace or the other.\n   o The Network is huge and geographically\
    \ distributed.\n   o The network spans several political and administrative\n\
    \     areas. The related information is also controlled and\n     maintained in\
    \ a distributed fashion.\n   In short, global network configuration information\
    \ is unwieldy and\n   growing continuously.  It is impossible to service such\
    \ information\n   in a centralized fashion. There is need for a distributed framework\n\
    \   which allows users and applications to access information about\n   users,\
    \ services, networks, ... easily and globally.  The OSI X.500\n   Directory services\
    \ [5] provides a rich framework to support a\n   globally distributed information\
    \ service system.  The X.500 Directory\n   is intended to be a very large and\
    \ highly distributed database. It is\n   structured hierarchically with entries\
    \ arranged in the form of a tree\n   in which each object corresponds to a node\
    \ or an entry. Information\n   is stored about an object as a set of attributes.\n"
- title: 4. The hierarchical model of a network
  contents:
  - "4. The hierarchical model of a network\n   For representing networks in the Directory\
    \ we use the following\n   hierarchical model.\n   A network is the media for\
    \ transmitting information with zero or more\n   network elements each having\
    \ at least one network interface on the\n   media. The media may be any kind of\
    \ a line (physical circuit/virtual\n   circuit), or a collection of interconnected\
    \ networks.\n       <  The postscript version of this document  >\n       <  has\
    \ a figure here. However, the figure   >\n       <is too complex to be drawn in\
    \ simple ASCII.>\n Figure 1:  Simple and composite networks and their mapping\
    \ to the DIT.\n   The model allows hierarchy of subnetworks.  Network elements\
    \ with\n   multiple interfaces may act as external gateways to the attached\n\
    \   network and to networks higher up in the hierarchy.  Thus, a gateway\n   may\
    \ be the external gateway of several networks which are either\n   interconnected\
    \ or have a hierarchical relationship.\n   A network may be simple consisting\
    \ of zero or more network elements\n   or composite consisting of several sub-networks.\
    \  Examples of simple\n   networks are ethernets, optical fiber/copper cables,\
    \ free space, .. .\n"
- title: 4.1 Network Maps
  contents:
  - "4.1 Network Maps\n   Using the above model it is straight forward to draw the\
    \ topological\n   graph of the network where the vertices represent the components\
    \ of\n   the network and edges indicate the connections.  For visual\n   representation\
    \ the graph may be translated to a more \"physical\"\n   illustration (figure\
    \ 1).\n   Just as there are several maps of the same geographical domain\n   (political,\
    \ natural...)  one can envisage several views of the same\n   network and its\
    \ components. A view (called \"image\" in the remainder)\n   could pertain to\
    \ a particular protocol suite (IP/OSI/...), an\n   administrative domain or purpose.\
    \  Using images, several abstractions\n   of the same object are possible.\n"
- title: 4.2 Representation in the X.500 Directory
  contents:
  - "4.2 Representation in the X.500 Directory\n   To represent the various images\
    \ of networks and its components along\n   with the real-image relationship among\
    \ the various objects we\n   introduce the following classes of objects:\n   o\
    \ Communication Object Class (CO): All objects defined\n     furtheron in this\
    \ document belong to this class.\n     Common attributes for all communication\
    \ objects are\n     defined in section 6.\n   o Physical Communication Object\
    \ Class (PCO): A subclass\n     of CO-class, this class defines common properties\
    \ for\n     all objects representing physical communication objects.\n   o Image\
    \ Communication Object Class (ICO): A subclass of\n     CO-class, this class defines\
    \ common properties for all\n     objects representing images of communication\
    \ objects.\n   The above classes sort communication objects into physical or image\n\
    \   object.  As is implied in the nomenclature a physical object will\n   have\
    \ several attributes describing it physical properties - location,\n   weight,\
    \ size, ....  etc.  An image object will have an Image-of\n   attribute. The Image-of\
    \ attribute will point to a physical object or\n   to another image object.\n\
    \   Using this schema it is possible to represent the case of several\n   logical\
    \ network systems (running different protocol stacks - IP, XNS,\n   SNA, OSI,\
    \ ...) which coexist on the same physical network.\n   Information related to\
    \ different types of networks, no matter what\n   the underlying communication\
    \ protocol is, will reside in the\n   Directory in harmony.  Also, their interrelation\
    \ will be represented\n   and accessed in a fashion independent of the source/destination\n\
    \   network, namely, using the OSI X.500 protocol.\n   Schemes for physical networks\
    \ and logical images of physical networks\n   are defined in section 6.\n   All\
    \ objects are defined in section 6.\n                                        \
    \      ...............\n                                             :       \
    \       :\n                                             :   IP    OSI  :\n   \
    \                                          :  +-+    +-+  :\n                \
    \                             :  |A|    |B|  :\n                             NetWork\
    \  -----> :  +-+    +-+  :\n                             /    \\          :  \
    \ |      |   :\n                            /      \\         : ============ :\n\
    \                           /        \\        :      |       :\n            \
    \              /          \\       :     +-+      :\n                        \
    \ /            \\      :     |C|      :\n                        /           \
    \   \\     :     +-+      :\n                   OSI-image        IP-image :  \
    \ IP + OSI   :\n                       |                |    +..............+\n\
    \                       V                V\n                     ........    \
    \   ........\n                     :      :      :       :\n                 IP\
    \  : OSI  :      :   IP  : OSI\n                +-+  : +-+  :      :  +-+  : +-+\n\
    \                |A|  : |B|  :      :  |A|  : |B|\n                +-+  : +-+\
    \  :      :  +-+  : +-+\n             ....|...:  |   :      :   |   :..|...\n\
    \             : ============ :      : ============ :\n             :      |  \
    \     :      :      |       :\n             :     +-+      :      :     +-+  \
    \    :\n             :     |C|      :      :     |C|      :\n             :  \
    \   +-+      :      :     +-+      :\n             :   IP + OSI   :      :   IP\
    \ + OSI   :\n             +..............+      +..............+\n      Figure\
    \ 2: Several logical views of the same physical network\n"
- title: 5. Position in the Directory Information Tree (DIT)
  contents:
  - "5. Position in the Directory Information Tree (DIT)\n   Information about networks\
    \ usually will be contained in the DIT as\n   subordinate of the organization\
    \ maintaining the network. The network\n   model gets mapped into a tree structure\
    \ for network elements.  There\n   is one network object giving general descriptions\
    \ of the network.\n   Subordinates of this network object are node objects for\
    \ each node\n   element present in the network.  Node objects hold networkInterface\n\
    \   objects as subordinates.  A network can be physically or logically\n   subdivided\
    \ into several (sub)networks.  In this case, a network entry\n   will have network\
    \ objects as subordinates which again build the same\n   structure.  These entries\
    \ may be kept as subordinates of\n   organizationalUnit entries as well, with\
    \ pointers from the \"root\"\n   network.\n   This structure holds for physical\
    \ and logical elements.  Physical\n   elements are named network, node and networkInterface,\
    \ and logical\n   elements are named networkImage, nodeImage and networkInterfaceImage.\n\
    \                          _root_\n                         /      \\\n      \
    \                  /        \\\n                       /          \\\n       \
    \           country          \\\n                     /              \\\n    \
    \                /            organization\n                   /             /\
    \    |     \\\n                  /             /     |      \\\n             \
    \    /             /      |       \\\n                /             /       |\
    \        \\\n               /  organizationalUnit* |         \\\n            \
    \  /   /             \\ \\   |          \\\n             /   /               \\\
    \ \\__|_________  \\\n            /   /                 \\   |         \\  \\\n\
    \           Person                 Network*<====>NetworkImage*\n             \
    \                         |             |\n                                  \
    \    |             |\n                                     Node      NodeImage\n\
    \                                      |             |\n                     \
    \                 |             |\n                           NetworkInterface\
    \   NetworkInterfaceImage\n           Legends: * the object may recursively contain\
    \ objects of\n                    same class as children\n           Figure 3:\
    \ Part of the Directory Information Tree,\n          showing relations of White\
    \ Pages and network objects\n"
- title: 6. Proposed Schemes
  contents:
  - "6. Proposed Schemes\n   A physical network comprises of wires and machines. The\
    \ physical map\n   of the network will show the interconnections of these nodes\
    \ by these\n   circuits.\n   For each physical network element, one or more images\
    \ may exist.\n   Similarly, an image may be attached to one or more physical objects.\n\
    \   The types of images can grow along with the requirements.\n   Relationship\
    \ between elements (physical or logical) are expressed by\n   attributes or the\
    \ position in the Directory tree.\n   Problems that are addressed in the schema:\n\
    \   1. Avoiding data duplication\n   2. Preserving administrative boundaries/controls.\n\
    \   3. Simple representation (minimal number of pointers)\n   4. Security: Though\
    \ no special emphasis has been placed\n      in this work we believe the X.500\
    \ access control policies\n      policies will provide a reasonable secure framework\
    \ for security\n      and privacy.\n   Problems that are not addressed:\n   1.\
    \ Caching policies, etc.: to be decided locally\n"
- title: 6.1 Communication Object Classes
  contents:
  - "6.1 Communication Object Classes\n   The object classes introduced in section\
    \ 4 are defined as follows:\n   CommunicationObject OBJECT CLASS\n    SUBCLASS\
    \ of top\n    MAY CONTAIN {\n     description :: CaseIgnoreStringSyntax,\n   \
    \   /* can contain any information about the object,\n         however, wherever\
    \ an appropriate attribute\n         exists, this should be used first to hold\n\
    \         information */\n     adminContact :: distinguishedNameSyntax,\n    \
    \  /* points to the person which is responsible for\n         the administration\
    \ of the instance this object\n         describes;\n         This refers to the\
    \ instance only in the context\n         of the concrete object class */\n   \
    \  technContact :: distinguishedNameSyntax,\n      /* points to the person which\
    \ is responsible for\n         the technical maintenance of the instance this\n\
    \         object describes;\n         This refers to the instance only in the\
    \ context\n         of the concrete object class;\n         Availability (e.g.\
    \ hours of service) is not\n         covered by this attribute. */\n    }\n  \
    \ PhysicalCommunicationObject OBJECT CLASS\n    SUBCLASS of CommunicationObject\n\
    \    MAY CONTAIN{\n     owner :: distinguishedNameSyntax,\n      /* refers to\
    \ organization or person owning the\n        physical element;\n        Note that\
    \ more detailed information (like lease,\n        rental, etc.) can be covered\
    \ in a specific image\n        (ownerImage) of this element */\n     localityName\
    \ :: CaseIgnoreStringSyntax\n      /* where the object is located;\n         can\
    \ be used freely to \"spot\" a network element,\n         e.g. state/city/street/building/floor/room/\n\
    \         desk/... */\n     ICO :: distinguishedNameSyntax\n      /* points to\
    \ image object the physical object\n         is related to;\n            might\
    \ have several values if physical object is\n            used for several applications\
    \ at the same time */\n           }\n   ImageCommunicationObject OBJECT CLASS\n\
    \    SUBCLASS of CommunicationObject\n    MAY CONTAIN{\n     type :: caseIgnoreStringSyntax,\n\
    \      /* expresses the view this object refers to, e.g.\n         view of provider/user/IP/OSI/...;\n\
    \            Note that this information can be covered by\n            the object\
    \ class in some cases\n            (e.g. ipNetworkImage gives the IP view) */\n\
    \     imageOf :: distinguishedNameSyntax,\n      /* points to physical/image object\
    \ the image\n         is related to;\n            might have several values if\
    \ view applies to\n            several physical objects at the same time */\n\
    \    }\n"
- title: 6.2 Physical elements
  contents:
  - "6.2 Physical elements\n   The following objects describe network elements without\
    \ saying\n   anything about their usage.  All objects inherit properties of the\n\
    \   PhysicalCommunicationObject class.\n"
- title: 6.2.1 Network
  contents:
  - "6.2.1 Network\n   The network object supplies general descriptions which are\
    \ common for\n   a set of nodes and circuits comprising one network.  This includes\n\
    \   information about the type of circuits (medium, broadcast or point-\n   to-\
    \ point, etc.) and properties (speed etc.).\n   network OBJECT CLASS\n    SUBCLASS\
    \ of PhysicalCommunicationObject\n    MUST CONTAIN  {\n     networkName :: caseIgnoreStringSyntax\
    \ }\n    MAY CONTAIN {\n     externalGateway :: distinguishedNameSyntax,\n   \
    \   /* points to one or more nodes that connect\n         this network to neighbor\
    \ networks;\n            whether a node actually is used as gateway\n        \
    \    for one or the other protocol, is defined\n            in a related networkImageObject\
    \ */\n     nwType :: caseIgnoreStringSyntax,\n      /* type of this network;\n\
    \         either \"composite\" (if consisting of subnetworks)\n         or type\
    \ of a line:\n         bus, ring, star, mesh, point-to-point */\n     media ::\
    \ caseIgnoreStringSyntax,\n      /* if network is not composite,\n         describes\
    \ physical media:\n         copper, fiber optic, etc. */\n     speed :: numericStringSyntax,\n\
    \      /* nominal bandwidth, e.g. 64 kbps */\n     traffic :: numericStringSyntax\n\
    \      /* (average) use in percent of nominal bandwidth\n            [ this needs\
    \ more specification later ] */\n     configurationDate ::  uTCTimeSyntax,\n \
    \     /* date when network was configured in current\n            shape */\n \
    \    configurationHistory :: caseIgnoreStringSyntax\n      /* list of configuration\
    \ changes, like:\n            added/removed nodes, lines */\n     }\n"
- title: 6.2.2 Node
  contents:
  - "6.2.2 Node\n   The node object describes any kind of device that is part of the\n\
    \   network, such as simple nodes, printer, bridges.\n   node OBJECT CLASS\n \
    \   SUBCLASS of PhysicalCommunicationObject\n    MUST CONTAIN{\n     nodeName\
    \ :: caseIgnoreStringSyntax }\n    MAY CONTAIN {\n     machineType :: caseIgnoreStringSyntax,\n\
    \      /* e.g. main frame, work station, PC, printer;\n         might include\
    \ manufacturer */\n     OS :: caseIgnoreStringSyntax,\n      /* e.g. VM, UNIX,\
    \ DOS; might include release */\n    }\n"
- title: 6.2.3 NetworkInterface
  contents:
  - "6.2.3 NetworkInterface\n   Each node object will have one or more networkInterface\
    \ objects as\n   subordinates.  NetworkInterface objects provide information about\n\
    \   interfaces of the node and connectivity.\n   networkInterface OBJECT CLASS\n\
    \    SUBCLASS of PhysicalCommunicationObject\n    MUST CONTAIN {\n     networkInterfaceName\
    \ :: caseIgnoreStringSyntax\n      /* It is suggested that the networkInterface\n\
    \         name is derived from the name of the logical\n         device this networkInterface\
    \ represents for\n         the operating system, e.g. le0, COM1 */\n     }\n \
    \   MAY CONTAIN {\n     networkInterfaceAddress  :: caseIgnoreStringSyntax,\n\
    \      /* this should contain a protocol-independent\n            interface address,\
    \ e.g. Ethernet board number */\n     connectedNetwork :: distinguishedNameSyntax,\n\
    \      /* pointer to object of network which this networkInterface is\n      \
    \   connected to */\n     }\n"
- title: 6.3 Logical Elements
  contents:
  - "6.3 Logical Elements\n   An abstract view of a physical element is called image\
    \ in this\n   document.  The word image gets appended to the object type, leading\n\
    \   to the new objects networkImage, nodeImage and networkInterfaceImage.\n  \
    \ Images will either build Directory trees of themselves or be stored\n   as part\
    \ of the physical network tree (see section 5).\n   Image objects inherit properties\
    \ of the ImageCommunicationObject\n   class.\n   Each image object has specific\
    \ attributes which vary depending on the\n   point of view (IP, OSI, ...). Also,\
    \ the user and provider of an image\n   will view an object differently; further\
    \ a user of an object may also\n   be providing the services of the same object\
    \ to another user.\n   Therefore, in the following a complete and general list\
    \ of attributes\n   cannot be given.  We recommend to define subclasses of Image\
    \ classes\n   for each logical view. These subclasses inherit all attributes\n\
    \   defined with the object classes below and add more specific\n   attributes.\
    \  Examples for an IP-view are given in [1].\n"
- title: 6.3.1 Network
  contents:
  - "6.3.1 Network\n   There may be several network images for one and the same physical\n\
    \   network: one for each protocol, application, etc.\n   networkImage OBJECT\
    \ CLASS\n    SUBCLASS of ImageCommunicationObject\n    MAY CONTAIN {\n     externalGateway\
    \ :: distinguishedNameSyntax,\n      /* points to one or more nodes that act\n\
    \         as gateway for the protocol application\n         this images refers\
    \ to */\n     speed :: numericStringSyntax,\n      /* nominal bandwidth for the\
    \ channel dedicated\n         to this protocol or application ,\n         e.g.\
    \ 64 kbps */\n     traffic :: numericStringSyntax,\n      /* (average) use in\
    \ percent of nominal bandwidth\n         [this needs more specification later\
    \ ] */\n     charge  :: numericStringSyntax\n      /* amount of money that has\
    \ to be paid to\n         service provider for usage;\n         [it is felt that\
    \ this needs further definition:\n          e.g. monetary unit / time unit, monetary\
    \ unit /\n          data unit ] */\n     }\n"
- title: 6.3.2 Node
  contents:
  - "6.3.2 Node\n   Name and functionality within the network might vary for a node\
    \ from\n   protocol to protocol considered.  In particular, a node might act as\n\
    \   gateway for one protocol but not for the other. Routing policy is\n   stored\
    \ in the case of policy gateways.\n   nodeImage OBJECT CLASS\n    SUBCLASS of\
    \ ImageCommunicationObject\n     /* no attributes common for all nodeImages have\
    \ been\n        defined yet */\n"
- title: 6.3.3 NetworkInterface
  contents:
  - "6.3.3 NetworkInterface\n   As with physical nodes, nodeImages have networkInterfaces\n\
    \   (networkInterfaceImages) which describe connectivity to other network\n  \
    \ elements. NetworkInterfaceImages are only given if the protocol is\n   establishing\
    \ connections via this networkInterface.\n   networkInterfaceImage OBJECT CLASS\n\
    \    SUBCLASS of ImageCommunicationObject\n    MAY CONTAIN {\n     networkInterfaceAddress\
    \ :: caseIgnoreStringSyntax,\n      /* the networkInterface address in the image\n\
    \         context, e.g. IP number, NSAP */\n     connectedNetwork   :: distinguishedNameSyntax\n\
    \      /* pointer to networkImageObject that describes\n         the network this\
    \ networkInterface is attached\n         to in terms of the protocol or application\
    \ the\n         image indicates */\n     }\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 8. Authors' Addresses
  contents:
  - "8. Authors' Addresses\n   Glenn Mansfield\n   AIC Systems Laboratory\n   6-6-3\
    \ Minami Yoshinari\n   Aoba-ku, Sendai 989-32\n   Japan\n   Phone: +81 22 279-3310\n\
    \   EMail: glenn@aic.co.jp\n   Thomas Johannsen\n   Dresden University of Technology\n\
    \   Institute of\n   Communication Technology\n   D-01062 Dresden\n   Germany\n\
    \   Phone: +49 351 463-4621\n   EMail: Thomas.Johannsen@ifn.et.tu-dresden.de\n\
    \   Mark Knopper\n   Merit Network, Inc.\n   1071 Beal Avenue\n   Ann Arbor, MI\
    \ 48109\n   EMail: mak@merit.edu\n"
- title: 9. References
  contents:
  - "9. References\n  [1]  Harrenstein, K., Stahl, M., and E. Feinler, \"NICNAME/WHOIS\"\
    , RFC\n       954, SRI, October 1985.\n  [2]  Mockapetris, P., \"Domain Names\
    \ - Implementation and\n       Specification\", STD 13, RFC 1035, USC/Information\
    \ Sciences\n       Institute, November 1987.\n  [3]  Johannsen, T., Mansfield,\
    \ G., Kosters, M., and S. Sataluri,\n       \"Representing IP information in the\
    \ X.500 Directory\", RFC 1609,\n       Dresden University, AIC Systems Laboratory,\
    \ Network\n       Solutions,Inc., AT&T Bell Laboratories, March 1994.\n  [4] \
    \ Johannsen, T., and G. Mansfield, \"The Soft Pages Project\", OSI-DS\n      \
    \ WG document, OSI-DS-39, Dresden University, AIC Systems\n       Laboratory,\
    \ February 1993.\n  [5]  CCITT Blue Book, \"Data Communication Networks: Directory\"\
    ,\n       Recommendations X.500-X.521, December 1988.\n"
