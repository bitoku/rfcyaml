- title: __initial_text__
  contents:
  - '                  A Simple Gateway Monitoring Protocol

    '
- title: 1.  Status of this Memo
  contents:
  - "1.  Status of this Memo\n   This document is being distributed to members of\
    \ the Internet\n   community in order to solicit their reactions to the proposals\n\
    \   contained in it.  While the issues discussed may not be directly\n   relevant\
    \ to the research problems of the Internet, they may be\n   interesting to a number\
    \ of researchers and implementors.\n   This memo defines a simple application-layer\
    \ protocol by which\n   management information for a gateway may be inspected\
    \ or altered by\n   logically remote users.\n   This proposal is intended only\
    \ as an interim response to immediate\n   gateway monitoring needs while work\
    \ on more elaborate and robust\n   designs proceeds with the care and deliberation\
    \ appropriate to that\n   task.  Accordingly, long term use of the mechanisms\
    \ described here\n   should be seriously questioned as more comprehensive proposals\
    \ emerge\n   in the future.  Distribution of this memo is unlimited.\n"
- title: 2.  Protocol Design Strategy
  contents:
  - "2.  Protocol Design Strategy\n   The proposed protocol is shaped in large part\
    \ by the desire to\n   minimize the number and complexity of management functions\
    \ realized\n   by the gateway itself.  This goal is attractive in at least four\n\
    \   respects:\n   (1)  The development cost for gateway software necessary to\n\
    \        support the protocol is accordingly reduced.\n   (2)  The degree of management\
    \ function that is remotely\n        supported is accordingly increased, thereby\
    \ admitting\n        fullest use of internet resources in the management task.\n\
    \   (3)  The degree of management function that is remotely\n        supported\
    \ is accordingly increased, thereby imposing the\n        fewest possible restrictions\
    \ on the form and sophistication\n        of management tools.\n   (4)  A simplified\
    \ set of management functions is easily\n        understood and used by developers\
    \ of gateway management\n        tools.\n   A second design goal is that the functional\
    \ paradigm for monitoring\n   and control be sufficiently extensible to accommodate\
    \ additional,\n   possibly unanticipated aspects of gateway operation.\n   A third\
    \ goal is that the design be, as much as possible, independent\n   of the architecture\
    \ and mechanisms of particular hosts or particular\n   gateways.\n   Consistent\
    \ with the foregoing design goals are a number of decisions\n   regarding the\
    \ overall form of the protocol design.\n   One such decision is to model all gateway\
    \ management functions as\n   alterations or inspections of various parameter\
    \ values.  By this\n   model, a protocol entity on a logically remote host (possibly\
    \ the\n   gateway itself) interacts with a protocol entity resident on the\n \
    \  gateway in order to alter or retrieve named portions (variables) of\n   the\
    \ gateway state.  This design decision has at least two positive\n   consequences:\n\
    \   (1)  It has the effect of limiting the number of essential\n        management\
    \ functions realized by the gateway to two: one\n        operation to assign a\
    \ value to a specified configuration\n        parameter and another to retrieve\
    \ such a value.\n   (2)  A second effect of this decision is to avoid introducing\n\
    \        into the protocol definition support for imperative\n        management\
    \ commands: the number of such commands is in\n        practice ever-increasing,\
    \ and the semantics of such\n        commands are in general arbitrarily complex.\n\
    \   The exclusion of imperative commands from the set of explicitly\n   supported\
    \ management functions is unlikely to preclude any desirable\n   gateway management\
    \ operation.  Currently, most gateway commands are\n   requests either to set\
    \ the value of some gateway parameter or to\n   retrieve such a value, and the\
    \ function of the few imperative\n   commands currently supported is easily accommodated\
    \ in an\n   asynchronous mode by this management model.  In this scheme, an\n\
    \   imperative command might be realized as the setting of a parameter\n   value\
    \ that subsequently triggers the desired action.\n   A second design decision\
    \ is to realize any needed authentication\n   functionality in a distinct protocol\
    \ layer that provides services to\n   the monitoring protocol itself.  The most\
    \ important benefit of this\n   decision is a reduction in the complexity of the\
    \ individual protocol\n   layers - thereby easing the task of implementation.\n\
    \   Consistent with this layered design strategy is a third design\n   decision\
    \ that the identity of an application protocol entity is known\n   to its peers\
    \ only by the services of the underlying authentication\n   protocol.  Implicit\
    \ in this decision is a model of access control by\n   which access to variables\
    \ of a gateway configuration is managed in\n   terms of the association between\
    \ application entities and sessions of\n   the authentication protocol.  Thus,\
    \ multi-level access to gateway\n   variables is supported by multiple instances\
    \ of the application\n   protocol entity, each of which is characterized by:\n\
    \   (1)  the set of gateway variables known to said entity,\n   (2)  the mode\
    \ of access (READ-ONLY or READ-WRITE) afforded to\n        said set of variables,\
    \ and\n   (3)  the authentication protocol session to which belong the\n     \
    \   messages sent and received by said entity.\n   A fourth design decision is\
    \ to adopt the conventions of the CCITT\n   X.409 recommendation [1] for representing\
    \ the information exchanged\n   between protocol entities.  One cost of this decision\
    \ is a modest\n   increase in the complexity of the protocol implementation. \
    \ One\n   benefit of this decision is that protocol data are represented on the\n\
    \   network in a machine-independent, widely understood, and widely\n   accepted\
    \ form.  A second benefit of this decision is that the form of\n   the protocol\
    \ messages may be concisely and understandably described\n   in the X.409 language\
    \ defined for such purposes.\n   A fifth design decision, consistent with the\
    \ goal of minimizing\n   gateway complexity, is that the variables manipulated\
    \ by the protocol\n   assume only integer or octet string type values.\n   A sixth\
    \ design decision, also consistent with the goal of minimizing\n   gateway complexity,\
    \ is that the exchange of protocol messages\n   requires only an unreliable datagram\
    \ transport, and, furthermore,\n   that every protocol message is entirely and\
    \ independently\n   representable by a single transport datagram.  While this\
    \ document\n   specifies the exchange of protocol messages via the UDP protocol\
    \ [2],\n   the design proposed here is in general suitable for use with a wide\n\
    \   variety of transport mechanisms.\n   A seventh design decision, consistent\
    \ with the goals of simplicity\n   and extensibility, is that the variables manipulated\
    \ by the protocol\n   are named by octet string values.  While this decision departs\
    \ from\n   the architectural traditions of the Internet whereby objects are\n\
    \   identified by assigned integer values, the naming of variables by\n   octet\
    \ strings affords at least two valuable benefits.  Because the\n   set of octet\
    \ string values constitutes a variable name space that, as\n   convenient, manifests\
    \ either flat or hierarchical structure,\n   (1)  a single, simple mechanism can\
    \ provide both random access\n        to individual variables and sequential access\
    \ to\n        semantically related groups of variables, and\n   (2)  the variable\
    \ name space may be extended to accommodate\n        unforeseen needs without\
    \ compromising either the\n        relationships among existing variables or the\
    \ potential\n        for further extensions to the space.\n   An eighth design\
    \ decision is to minimize the number of unsolicited\n   messages required by the\
    \ protocol definition.  This decision is\n   consistent with the goal of simplicity\
    \ and motivated by the desire to\n   retain maximal control over the amount of\
    \ traffic generated by the\n   network management function - even at the expense\
    \ of additional\n   protocol overhead.  The strategy implicit in this decision\
    \ is that\n   the monitoring of network state at any significant level of detail\
    \ is\n   accomplished primarily by polling for appropriate information on the\n\
    \   part of the monitoring center.  In this context, the definition of\n   unsolicited\
    \ messages in the protocol is confined to those strictly\n   necessary to properly\
    \ guide a monitoring center regarding the timing\n   and focus of its polling.\n"
- title: 3.  The Gateway Monitoring Protocol
  contents:
  - "3.  The Gateway Monitoring Protocol\n   The gateway monitoring protocol is an\
    \ application protocol by which\n   the variables of a gateway's configuration\
    \ may be inspected or\n   altered.\n   Communication among application protocol\
    \ entities is by the exchange\n   of protocol messages using the services of the\
    \ authentication\n   protocol described elsewhere in this document.  Each such\
    \ message is\n   entirely and independently represented by a single message of\
    \ the\n   underlying authentication protocol.  An implementation of this\n   protocol\
    \ need not accept protocol messages whose length exceeds 484\n   octets.\n   The\
    \ form and function of the four message types recognized by a\n   protocol entity\
    \ is described below.  The type of a given protocol\n   message is indicated by\
    \ the value of the implicit type tag for the\n   data structure that is represented\
    \ by said message according to the\n   conventions of the CCITT X.409 recommendation.\n"
- title: 3.1.  The Get Request Message Type
  contents:
  - "3.1.  The Get Request Message Type\n   The form of a message of Get Request type\
    \ is described below in the\n   language defined in the CCITT X.409 recommendation:\n\
    \   var_value_type          ::=     CHOICE {\n                               \
    \    INTEGER,\n                                   OCTET STRING\n             \
    \                        }\n   var_name_type           :=      OCTET STRING\n\
    \   var_op_type             ::=     SEQUENCE {\n                           var_name\
    \                var_name_type,\n                           var_value        \
    \       var_value_type\n                           }\n   var_op_list_type    \
    \    ::=     SEQUENCE OF var_op_type\n   error_status_type       ::=     INTEGER\
    \ {\n                           gmp_err_noerror         (0),\n               \
    \            gmp_err_too_big         (1),\n                           gmp_err_nix_name\
    \        (2),\n                           gmp_err_bad_value       (3)\n      \
    \                     }\n   error_index_type        ::=     INTEGER\n   request_id_type\
    \         ::=     INTEGER\n   get_req_message_type    ::=     [ APPLICATION 1\
    \ ] IMPLICIT\n                           SEQUENCE {\n                        \
    \   request_id              request_id_type,\n                           error_status\
    \            error_status_type,\n                           error_index      \
    \       error_index_type,\n                           var_op_list            \
    \ var_op_list_type\n                           }\n   Upon receipt of a message\
    \ of this type, the receiving entity responds\n   according to any applicable\
    \ rule in the list below:\n   (1)  If, for some var_op_type component of the received\
    \ message, the\n        value of the var_name field does not lexicographically\
    \ precede\n        the name of some variable known to the receiving entity, then\n\
    \        the receiving entity sends to the originator of the received\n      \
    \  message a message of identical form except that the indicated\n        message\
    \ type is Get Response, the value of the error_status\n        field is gmp_err_nix_name,\
    \ and the value of the error_index\n        field is the unit-based index of said\
    \ var_op_type component in\n        the received message.\n   (2)  If the size\
    \ of the Get Response type message generated as\n        described below would\
    \ exceed the size of the largest message\n        for which the protocol definition\
    \ requires acceptance, then the\n        receiving entity sends to the originator\
    \ of the received message\n        a message of identical form except that the\
    \ indicated message\n        type is Get Response, the value of the error_status\
    \ field is\n        gmp_err_too_big, and the value of the error_index field is\
    \ zero.\n   If none of the foregoing rules apply, then the receiving entity sends\n\
    \   to the originator of the received message a Get Response type message\n  \
    \ such that, for each var_op_type component of the received message, a\n   corresponding\
    \ component of the generated message represents the name\n   and value of that\
    \ variable whose name is, in the lexicographical\n   ordering of the names of\
    \ all variables known to the receiving entity\n   together with the value of the\
    \ var_name field of the given component,\n   the immediate successor to that value.\
    \  The value of the error_status\n   field of the generated message is gmp_err_noerror\
    \ and the value of\n   the error_index field is zero.  The value of the request_id\
    \ field of\n   the generated message is that for the received message.\n   Messages\
    \ of the Get Request type are generated by a protocol entity\n   only at the request\
    \ of the application user.\n"
- title: 3.2.  The Get Response Message Type
  contents:
  - "3.2.  The Get Response Message Type\n   The form of messages of this type is\
    \ identical to that of Get Request\n   type messages except for the indication\
    \ of message type. In the CCITT\n   X.409 language,\n   get_rsp_message_type \
    \   ::=     [ APPLICATION 2 ] IMPLICIT\n                           SEQUENCE {\n\
    \                           request_id              request_id_type,\n       \
    \                    error_status            error_status_type,\n            \
    \               error_index             error_index_type,\n                  \
    \         var_op_list             var_op_list_type\n                         \
    \  }\n   The response of a protocol entity to a message of this type is to\n \
    \  present its contents to the application user.\n   Messages of the Get Response\
    \ type are generated by a protocol entity\n   only upon receipt of Set Request\
    \ or Get Request type messages as\n   described elsewhere in this document.\n"
- title: 3.3.  The Trap Request Message Type
  contents:
  - "3.3.  The Trap Request Message Type\n   The form of a message of this type is\
    \ described below in the language\n   defined in the CCITT X.409 recommendation:\n\
    \   val_list_type           ::=     SEQUENCE OF var_value_type\n   trap_type_type\
    \          ::=     INTEGER\n   trap_req_message_type   ::=     [ APPLICATION 3\
    \ ] IMPLICIT\n                           SEQUENCE {\n                        \
    \   trap_type               trap_type_type,\n                           val_list\
    \                val_list_type\n                           }\n   The response\
    \ of a protocol entity to a message of this type is to\n   present its contents\
    \ to the application user.\n   Messages of the Trap Request type are generated\
    \ by a protocol entity\n   only at the request of the application user.\n   The\
    \ significance of the val_list component of a Trap Request type\n   message is\
    \ implementation-specific.\n   Interpretations for negative values of the trap_type\
    \ field are\n   implementation-specific.  Interpretations for non-negative values\
    \ of\n   the trap_type field are defined below.\n"
- title: 3.3.1.  The Cold Start Trap Type
  contents:
  - "3.3.1.  The Cold Start Trap Type\n   A Trap Request type message for which the\
    \ value of the trap_type\n   field is 0, signifies that the sending protocol entity\
    \ is\n   reinitializing itself such that the gateway configuration or the\n  \
    \ protocol entity implementation may be altered.\n"
- title: 3.3.2.  The Warm Start Trap Type
  contents:
  - "3.3.2.  The Warm Start Trap Type\n   A Trap Request type message for which the\
    \ value of the trap_type\n   field is 1, signifies that the sending protocol entity\
    \ is\n   reinitializing itself such that neither the gateway configuration nor\n\
    \   the protocol entity implementation is altered.\n"
- title: 3.3.3.  The Link Failure Trap Type
  contents:
  - "3.3.3.  The Link Failure Trap Type\n   A Trap Request type message for which\
    \ the value of the trap_type\n   field is 2, signifies that the sending protocol\
    \ entity recognizes a\n   failure in one of the communication links represented\
    \ in the gateway\n   configuration.\n"
- title: 3.3.4.  The Authentication Failure Trap Type
  contents:
  - "3.3.4.  The Authentication Failure Trap Type\n   A Trap Request type message\
    \ for which the value of the trap_type\n   field is 3, signifies that the sending\
    \ protocol entity is the\n   addressee of a protocol message that is not properly\
    \ authenticated.\n"
- title: 3.3.5.  The EGP Neighbor Loss Trap Type
  contents:
  - "3.3.5.  The EGP Neighbor Loss Trap Type\n   A Trap Request type message for which\
    \ the value of the trap_type\n   field is 4, signifies that an EGP neighbor for\
    \ whom the sending\n   protocol entity was an EGP peer has been marked down and\
    \ the peer\n   relationship no longer obtains.\n"
- title: 3.4.  The Set Request Message Type
  contents:
  - "3.4.  The Set Request Message Type\n   The form of messages of this type is identical\
    \ to that of Get Request\n   type messages except for the indication of message\
    \ type.  In the\n   CCITT X.409 language:\n   set_req_message_type    ::=    \
    \ [ APPLICATION 4 ] IMPLICIT\n                           SEQUENCE {\n        \
    \                   request_id              request_id_type,\n               \
    \            error_status            error_status_type,\n                    \
    \       error_index             error_index_type,\n                          \
    \ var_op_list             var_op_list_type\n                           }\n   Upon\
    \ receipt of a message of this type, the receiving entity responds\n   according\
    \ to any applicable rule in the list below:\n   (1)  If, for some var_op_type\
    \ component of the received message, the\n        value of the var_name field\
    \ names no variable known to the\n        receiving entity, then the receiving\
    \ entity sends to the\n        originator of the received message a message of\
    \ identical form\n        except that the indicated message type is Get Response,\
    \ the\n        value of the error_status field is gmp_err_nix_name, and the\n\
    \        value of the error_index field is the unit-based index of said\n    \
    \    var_op_type component in the received message.\n   (2)  If, for some var_op_type\
    \ component of the received message, the\n        contents of the var_value field\
    \ does not, according to the CCITT\n        X.409 recommendation, manifest a type,\
    \ length, and value that is\n        consistent with that required for the variable\
    \ named by the\n        value of the var_name field, then the receiving entity\
    \ sends to\n        the originator of the received message a message of identical\n\
    \        form except that the indicated message type is Get Response, the\n  \
    \      value of the error_status field is gmp_err_bad_value, and the\n       \
    \ value of the error_index field is the unit-based index of said\n        var_op_type\
    \ component in the received message.\n   (3)  If the size of the Get Response\
    \ type message generated as\n        described below would exceed the size of\
    \ the largest message for\n        which the protocol definition requires acceptance,\
    \ then the\n        receiving entity sends to the originator of the received\n\
    \        message a message of identical form except that the indicated\n     \
    \   message type is Get Response, the value of the error_status\n        field\
    \ is gmp_err_too_big, and the value of the error_index field\n        is zero.\n\
    \   If none of the foregoing rules apply, then for each var_op_type\n   component\
    \ of the received message, according to the sequence of such\n   components represented\
    \ by said message, the value represented by the\n   var_value field of the given\
    \ component is assigned to the variable\n   named by the value of the var_name\
    \ field of that component.  The\n   receiving entity sends to the originator of\
    \ the received message a\n   message of identical form except that the indicated\
    \ message type is\n   Get Response, the value of the error_status field is gmp_err_noerror,\n\
    \   and the value of the error_index field is zero.\n   Messages of the Set Request\
    \ type are generated by a protocol entity\n   only at the request of the application\
    \ user.\n   Recognition and processing of Set Request type frames is not required\n\
    \   by the protocol definition.\n"
- title: 4.  The Authentication Protocol
  contents:
  - "4.  The Authentication Protocol\n   The authentication protocol is a session-layer\
    \ protocol by which\n   messages specified by a protocol user are selectively\
    \ delivered to\n   other protocol users.  The protocol definition precludes delivery\
    \ to\n   a protocol user of any user message for which the protocol\n   representation\
    \ lacks a specified \"authentic\" form.\n   Communication among authentication\
    \ protocol entities is accomplished\n   by the exchange of protocol messages,\
    \ each of which is entirely and\n   independently represented by a single UDP\
    \ datagram.  An\n   authentication protocol entity responds to protocol messages\
    \ received\n   at UDP port 153 on the host with which it is associated.\n   A\
    \ half-session of the authentication protocol is, for any ordered\n   pair of\
    \ protocol users, the set of messages sent from the first user\n   of the pair\
    \ to the second user of said pair.  A session of the\n   authentication protocol\
    \ is defined to be union of two complementary\n   half-sessions of the protocol\
    \ - that is, the set of messages\n   exchanged between a given pair of protocol\
    \ users.  Associated with\n   each protocol half-session is a triplet of functions:\n\
    \   (1)  The authentication function for a given half-session is a\n        boolean-valued\
    \ function that characterizes the set of\n        authentication protocol messages\
    \ that are of acceptable,\n        authentic form with respect to the set of all\
    \ possible\n        authentication protocol messages.\n   (2)  The message interpretation\
    \ function for a given half-\n        session is a mapping from the set of authentication\n\
    \        protocol messages accepted by the authentication function\n        for\
    \ said half-session to the set of all possible user\n        messages.\n   (3)\
    \  The message representation function for a given half-\n        session is a\
    \ mapping that is the inverse of the message\n        interpretation function\
    \ for said half-session.\n   The association between half-sessions of the authentication\
    \ protocol\n   and triplets of functions is not defined in this document.\n  \
    \ The form and function of the single message type recognized by a\n   protocol\
    \ entity is described below.  The type of a given protocol\n   message is indicated\
    \ by the value of the implicit type tag for the\n   data structure that is represented\
    \ by said message according to the\n   conventions of the CCITT X.409 recommendation.\n"
- title: 4.1.  The Data Request Message Type
  contents:
  - "4.1.  The Data Request Message Type\n   Messages of this type are represented\
    \ by a sequence of fields whose\n   form and interpretation are described below.\n"
- title: 4.1.1.  The Message Length Field
  contents:
  - "4.1.1.  The Message Length Field\n   The Message Length field of a given Data\
    \ Request message represents\n   the length of said message as an unsigned, 16-bit,\
    \ binary integer.\n   This value is encoded such that more significant bits precede\
    \ less\n   significant bits in the order of transmission and includes the length\n\
    \   of the Message Length field itself.\n"
- title: 4.1.2.  The Session ID Length Field
  contents:
  - "4.1.2.  The Session ID Length Field\n   The Session ID Length field of a given\
    \ Data Request message\n   represents the length, in octets, of the Session ID\
    \ field of said\n   message.  This value is encoded as an unsigned, 8-bit, binary\n\
    \   integer.\n"
- title: 4.1.3.  The Session ID Field
  contents:
  - "4.1.3.  The Session ID Field\n   The Session ID field of a given Data Request\
    \ message represents the\n   name of the protocol session to which said message\
    \ belongs.  The\n   value of this field is encoded as asequence of octets whose\
    \ length is\n   the value of the Session ID Length field for said message.\n"
- title: 4.1.4.  The User Data Field
  contents:
  - "4.1.4.  The User Data Field\n   The User Data field of a given Data Request message\
    \ represents a\n   message being passed from one protocol user to another.  The\
    \ value of\n   this field is encoded according to conventions implicit in the\n\
    \   message representation function for the appropriate half of the\n   protocol\
    \ session named by the value of the Session ID field for said\n   message.\n \
    \  Upon receipt of a Data Request type message, the receiving\n   authentication\
    \ protocol entity verifies the form of said message by\n   application of the\
    \ authentication function associated with its half\n   of the session named by\
    \ the value of the Session ID field in the\n   received message.  If the form\
    \ of the received message is accepted as\n   \"authentic\" by said function, then\
    \ the user message computed by the\n   application of the message interpretation\
    \ function for said half-\n   session to the value of the User Data field of the\
    \ received message\n   is presented to the protocol user together with an indication\
    \ of the\n   protocol session to which the received message belongs.\n   Otherwise,\
    \ the message is discarded and an indication of the receipt\n   of an unauthenticated\
    \ message is presented to the protocol user.\n   A message of this type is generated\
    \ only at the request of the\n   protocol user to communicate a message to another\
    \ user of the\n   protocol.  Such a request specifies the user message to be sent\
    \ as\n   well as the session of the authentication protocol to which said user\n\
    \   message belongs.  The value of the Session ID field of the generated\n   message\
    \ is the name of the session specified in the user request.\n   The value of the\
    \ User Data field of the generated message is computed\n   by applying the message\
    \ representation function for the appropriate\n   half of the specified session\
    \ to the specified user message.\n"
- title: 5.  Variable Names
  contents:
  - "5.  Variable Names\n   The variables retrieved or manipulated by the application\
    \ protocol\n   are named by octet string values.  Such values are represented\
    \ in\n   this document in two ways:\n   (1)  A variable name octet string may\
    \ be represented\n       numerically by a sequence of hexadecimal numbers, each\
    \ of\n       which denotes the value of the corresponding octet in\n       said\
    \ string.\n   (2)  A variable name octet string may be represented\n        symbolically\
    \ by a character string whose form reflects\n        the sequence of octets in\
    \ said name while at the same\n        time suggesting to a human reader the semantics\
    \ of the\n        named variable.\n   Variable name octet strings are represented\
    \ symbolically according to\n   the following two rules:\n   (1)  The symbolic\
    \ character string representation of the\n        variable name of zero length\
    \ is the character string of\n        zero length.\n   (2)  The symbolic character\
    \ string representation of a\n        variable name of non-zero length n is the\
    \ concatenation\n        of the symbolic character string representation of the\n\
    \        variable name formed by the first (n - 1) octets of the\n        given\
    \ name together with the underscore character (\"_\")\n        and a character\
    \ string that does not include the\n        underscore character, such that the\
    \ resulting character\n        string is unique among the symbolic character string\n\
    \        representations for all variable names of length n.\n   Thus, for example,\
    \ the variable names represented numerically as:\n                         01\
    \ 01 01,\n                         01 01 02,\n                         01 02 01,\n\
    \                         01 03 01 03 01,\n                         01 03 01 03\
    \ 02,\n                         01 03 01 04 01, and\n                        \
    \ 01 03 01 04 02\n   might be represented symbolically by the character strings:\n\
    \                         _GW_version_id,\n                         _GW_version_rev,\n\
    \                         _GW_cfg_nnets,\n                         _GW_net_if_type_net1,\n\
    \                         _GW_net_if_type_net2,\n                         _GW_net_if_speed_net1,\
    \ and\n                         _GW_net_if_speed_net2.\n   All variable names\
    \ are terminated by an implementation specific octet\n   string of non-zero length.\
    \  Thus, a complete variable name is not\n   specified for any of the variables\
    \ defined in this document.  Rather,\n   for each defined variable, some prefix\
    \ portion of its name is\n   specified, with the understanding that the rightmost\
    \ portion of its\n   name is specific to the protocol implementation.\n   Fullest\
    \ exploitation of the semantics of the Get Request type message\n   requires that\
    \ names for related variables be chosen so as to be\n   contiguous in the lexicographic\
    \ ordering of all variable names\n   recognized by an application protocol entity.\
    \  This principle is\n   observed in the naming of variables currently defined\
    \ by this\n   document, and it should be observed as well for variables defined\
    \ by\n   subsequent revisions of this document and for variables introduced by\n\
    \   particular implementations of the protocol.\n   A particular implementation\
    \ of a protocol entity may present\n   variables in addition to those defined\
    \ by this document, provided\n   that in no case will an implementation-specific\
    \ variable be presented\n   as having a name identical to that for one of the\
    \ variables defined\n   here.  By convention, the names of variables specific\
    \ to a particular\n   implementation share a common prefix that distinguishes\
    \ said\n   variables from those defined in this document and from those that may\n\
    \   be presented by other implementations of an application protocol\n   entity.\
    \  For example, variables specific to an implementation of this\n   protocol in\
    \ version 1.3 of the Squeaky gateway product of the\n   Swinging Gateway company\
    \ might have the names represented by:\n                 01 FF 01 01 13 01,\n\
    \                 01 FF 01 01 13 02, and\n                 01 FF 01 01 13 03,\n\
    \   for which the corresponding symbolic representations might be:\n         \
    \        _GW_impl_Swinging_Squeaky_v1.3_variableA,\n                 _GW_impl_Swinging_Squeaky_v1.3_variableB,\
    \ and\n                 _GW_impl_Swinging_Squeaky_v1.3_variableC.\n   The names\
    \ and semantics of implementation-specific variables are not\n   otherwise defined\
    \ by this document, although implementors are\n   encouraged to publish such definitions\
    \ either as appendices to this\n   document or by other appropriate means.\n \
    \  Variable names of which the initial portion is represented\n   numerically\
    \ as 02 and symbolically as \"_HOST\" are reserved for future\n   use.  Variable\
    \ names of which the initial portion is represented\n   numerically as 03 and\
    \ symbolically as \"_TS\" are similarly reserved.\n"
- title: 6.  Required Variables
  contents:
  - "6.  Required Variables\n   To the extent that the information represented by\
    \ a variable defined\n   in this section is also represented internally by a gateway\
    \ for which\n   this protocol is realized, access to that variable must be afforded\n\
    \   by at least one application protocol entity associated with said\n   gateway.\n"
- title: 6.1.  The _GW_version_id Variable
  contents:
  - "6.1.  The _GW_version_id Variable\n   The variable such that the initial portion\
    \ of its name is represented\n   symbolically as \"_GW_version_id\" and numerically\
    \ as:\n                 01 01 01\n   has an octet string value that identifies\
    \ the protocol entity\n   implementation (e.g., \"ACME Packet-Whiz Model II\"\
    ).\n"
- title: 6.2.  The _GW_version_rev Variable
  contents:
  - "6.2.  The _GW_version_rev Variable\n   The variable such that the initial portion\
    \ of its name is represented\n   symbolically as \"_GW_version_rev\" and numerically\
    \ as:\n                 01 01 02\n   has an integer value that identifies the\
    \ revision level of the entity\n   implementation.  The encoding of the revision\
    \ level as an integer\n   value is implementation-specific.\n"
- title: 6.3.  The _GW_cfg_nnets Variable
  contents:
  - "6.3.  The _GW_cfg_nnets Variable\n   The variable such that the initial portion\
    \ of its name is represented\n   symbolically as \"_GW_cfg_nnets\" and numerically\
    \ as:\n                 01 02 01\n   has an integer value that represents the\
    \ number of logical network\n   interfaces afforded by the configuration of the\
    \ gateway.\n"
- title: 6.4.  Network Interface Variables
  contents:
  - "6.4.  Network Interface Variables\n   This section describes a related set of\
    \ variables that represent\n   attributes of the logical network interfaces afforded\
    \ by the gateway\n   configuration.  Each such network interface is uniquely identified\
    \ by\n   an octet string.  The convention by which names are assigned to the\n\
    \   network interfaces of a gateway is implementation-specific.\n"
- title: 6.4.1.  The _GW_net_if_type Variable Class
  contents:
  - "6.4.1.  The _GW_net_if_type Variable Class\n   A variable such that the initial\
    \ portion of its name is represented\n   symbolically as \"_GW_net_if_type\" and\
    \ numerically as:\n                 01 03 01 03\n   has an integer value that\
    \ represents the type of the network\n   interface identified by the remainder\
    \ of the name for said variable.\n   The value of a variable of this class represents\
    \ network type\n   according to the conventions described in Appendix 1.\n"
- title: 6.4.2.  The _GW_net_if_speed Variable Class
  contents:
  - "6.4.2.  The _GW_net_if_speed Variable Class\n   A variable such that the initial\
    \ portion of its name is represented\n   symbolically as \"_GW_net_if_speed\"\
    \ and numerically as:\n                 01 03 01 04\n   has an integer value that\
    \ represents the estimated nominal bandwidth\n   in bits per second of the network\
    \ interface identified by the\n   remainder of the name for said variable.\n"
- title: 6.4.3.  The _GW_net_if_in_pkts Variable Class
  contents:
  - "6.4.3.  The _GW_net_if_in_pkts Variable Class\n   A variable such that the initial\
    \ portion of its name is represented\n   symbolically as \"_GW_net_if_in_pkts\"\
    \ and numerically as:\n                 01 03 01 01 01\n   has an integer value\
    \ that represents the number of packets received\n   by the gateway over the network\
    \ interface identified by the remainder\n   of the name for said variable.\n"
- title: 6.4.4.  The _GW_net_if_out_pkts Variable Class
  contents:
  - "6.4.4.  The _GW_net_if_out_pkts Variable Class\n   A variable such that the initial\
    \ portion of its name is represented\n   symbolically as \"_GW_net_if_out_pkts\"\
    \ and numerically as:\n                 01 03 01 02 01\n   has an integer value\
    \ that represents the number of packets\n   transmitted by the gateway over the\
    \ network interface identified by\n   the remainder of the name for said variable.\n"
- title: 6.4.5.  The _GW_net_if_in_bytes Variable Class
  contents:
  - "6.4.5.  The _GW_net_if_in_bytes Variable Class\n   A variable such that the initial\
    \ portion of its name is represented\n   symbolically as \"_GW_net_if_in_bytes\"\
    \ and numerically as:\n                 01 03 01 01 02\n   has an integer value\
    \ that represents the number of octets received by\n   the gateway over the network\
    \ interface identified by the remainder of\n   the name for said variable.\n"
- title: 6.4.6.  The _GW_net_if_out_bytes Variable Class
  contents:
  - "6.4.6.  The _GW_net_if_out_bytes Variable Class\n   A variable such that the\
    \ initial portion of its name is represented\n   symbolically as \"_GW_net_if_out_bytes\"\
    \ and numerically as:\n                 01 03 01 02 02\n   has an integer value\
    \ that represents the number of octets transmitted\n   by the gateway over the\
    \ network interface identified by the remainder\n   of the name for said variable.\n"
- title: 6.4.7.  The _GW_net_if_in_errors Variable Class
  contents:
  - "6.4.7.  The _GW_net_if_in_errors Variable Class\n   A variable such that the\
    \ initial portion of its name is represented\n   symbolically as \"_GW_net_if_in_errors\"\
    \ and numerically as:\n                 01 03 01 01 03\n   has an integer value\
    \ that represents the number of reception errors\n   encountered by the gateway\
    \ on the network interface identified by the\n   remainder of the name for said\
    \ variable.  The definition of a\n   reception error is implementation-specific\
    \ and may vary according to\n   network type.\n"
- title: 6.4.8.  The _GW_net_if_out_errors Variable Class
  contents:
  - "6.4.8.  The _GW_net_if_out_errors Variable Class\n   A variable such that the\
    \ initial portion of its name is represented\n   symbolically as \"_GW_net_if_out_errors\"\
    \ and numerically as:\n                01 03 01 02 03\n   has an integer value\
    \ that represents the number of transmission\n   errors encountered by the gateway\
    \ on the network interface identified\n   by the remainder of the name for said\
    \ variable.  The definition of a\n   transmission error is implementation-specific\
    \ and may vary according\n   to network type.\n"
- title: 6.4.9.  The _GW_net_if_status Variable Class
  contents:
  - "6.4.9.  The _GW_net_if_status Variable Class\n   A variable such that the initial\
    \ portion of its name is represented\n   symbolically as \"_GW_net_if_status\"\
    \ and numerically as:\n                 01 03 01 05\n   has an integer value that\
    \ represents the current status of the\n   network interface identified by the\
    \ remainder of the name for said\n   variable.  Network status is represented\
    \ according to the conventions\n   described in Appendix 2.\n"
- title: 6.5.  Internet Protocol Variables
  contents:
  - "6.5.  Internet Protocol Variables\n   This section describes variables that represent\
    \ information related\n   to protocols and mechanisms of the Internet Protocol\
    \ (IP) family [3].\n"
- title: 6.5.1.  Protocol Address Variable Classes
  contents:
  - "6.5.1.  Protocol Address Variable Classes\n   This section describes a related\
    \ set of variables that represent\n   attributes of the the IP interfaces presented\
    \ by a gateway on the\n   various networks to which it is attached.  Each such\
    \ protocol\n   interface is uniquely identified by an octet string.  The convention\n\
    \   by which names are assigned to the protocol interfaces for a gateway\n   is\
    \ implementation-specific.\n"
- title: 6.5.1.1.  The _GW_pr_in_addr_value Variable Class
  contents:
  - "6.5.1.1.  The _GW_pr_in_addr_value Variable Class\n   A variable such that the\
    \ initial portion of its name is represented\n   symbolically as \"_GW_pr_in_addr_value\"\
    \ and numerically as:\n                 01 04 01 01 01\n   has an octet string\
    \ value that literally represents the 32-bit\n   Internet address for the IP interface\
    \ identified by the remainder of\n   the name for said variable.\n"
- title: 6.5.1.2.  The _GW_pr_in_addr_scope Variable Class
  contents:
  - "6.5.1.2.  The _GW_pr_in_addr_scope Variable Class\n   A variable such that the\
    \ initial portion of its name is represented\n   symbolically as \"_GW_pr_in_addr_scope\"\
    \ and numerically as:\n                 01 04 01 01 02\n   has an octet string\
    \ value that names the network interface with which\n   the IP interface identified\
    \ by the remainder of the name for said\n   variable is associated.\n"
- title: 6.5.2.  Exterior Gateway Protocol (EGP) Variables
  contents:
  - "6.5.2.  Exterior Gateway Protocol (EGP) Variables\n   This section describes\
    \ variables that represent information related\n   to protocols and mechanisms\
    \ of the EGP protocol [4].\n"
- title: 6.5.2.1.  The _GW_pr_in_egp_core Variable
  contents:
  - "6.5.2.1.  The _GW_pr_in_egp_core Variable\n   A variable such that the initial\
    \ portion of its name is represented\n   symbolically as \"_GW_pr_in_egp_core\"\
    \ and numerically as:\n                 01 04 01 03 01\n   has an integer value\
    \ that characterizes the associated gateway with\n   respect to the set of INTERNET\
    \ core gateways.  A nonzero value\n   indicates that the associated gateway is\
    \ part of the INTERNET core.\n"
- title: 6.5.2.2.  The _GW_pr_in_egp_as Variable Class
  contents:
  - "6.5.2.2.  The _GW_pr_in_egp_as Variable Class\n   A variable such that the initial\
    \ portion of its name is represented\n   symbolically as \"_GW_pr_in_egp_as\"\
    \ and numerically as:\n                 01 04 01 03 02\n   has an integer value\
    \ that literally identifies an Autonomous System\n   to which this gateway belongs.\n"
- title: 6.5.2.3.  The EGP Neighbor Variable Classes
  contents:
  - "6.5.2.3.  The EGP Neighbor Variable Classes\n   This section describes a related\
    \ set of variables that represent\n   attributes of \"neighbors\" with which the\
    \ gateway may be associated by\n   EGP.  Each such EGP neighbor is uniquely identified\
    \ by an octet\n   string. The convention by which names are assigned to EGP neighbors\n\
    \   of a gateway is implementation-specific.\n"
- title: 6.5.2.3.1.  The _GW_pr_in_egp_neighbor_addr Variable Class
  contents:
  - "6.5.2.3.1.  The _GW_pr_in_egp_neighbor_addr Variable Class\n   A variable such\
    \ that the initial portion of its name is represented\n   symbolically as \"_GW_pr_in_egp_neighbor_addr\"\
    \ and numerically as:\n                 01 04 01 03 03 01\n   has an octet string\
    \ value that literally represents the 32-bit\n   Internet address for the EGP\
    \ neighbor identified by the remainder of\n   the name for said variable.\n"
- title: 6.5.2.3.2.  The _GW_pr_in_egp_neighbor_state Variable Class
  contents:
  - "6.5.2.3.2.  The _GW_pr_in_egp_neighbor_state Variable Class\n   A variable such\
    \ that the initial portion of its name is represented\n   symbolically as \"_GW_pr_in_egp_neighbor_state\"\
    \ and numerically as:\n                 01 04 01 03 03 02\n   has an octet string\
    \ value that represents the EGP protocol state of\n   the gateway with respect\
    \ to the EGP neighbor identified by the\n   remainder of the name for said variable.\
    \ The meaningful values for\n   such a variable are: \"IDLE,\" \"ACQUISITION,\"\
    \ \"DOWN,\" \"UP,\" and\n   \"CEASE.\"\n"
- title: 6.5.2.4.  The _GW_pr_in_egp_errors Variable
  contents:
  - "6.5.2.4.  The _GW_pr_in_egp_errors Variable\n   The variable such that the initial\
    \ portion of its name is represented\n   symbolically as \"_GW_pr_in_egp_errors\"\
    \ and numerically as:\n                 01 04 01 03 05\n   has an integer value\
    \ that represents the number of EGP protocol\n   errors.\n"
- title: 6.5.3.  Routing Variable Classes
  contents:
  - "6.5.3.  Routing Variable Classes\n   This section describes a related set of\
    \ variables that represent\n   attributes of the the IP routes by which a gateway\
    \ directs packets to\n   various destinations on the Internet.  Each such route\
    \ is uniquely\n   identified by an octet string that is the concatenation of the\n\
    \   literal 32-bit value of the Internet address for the destination of\n   said\
    \ route together with an implementation-specific octet string.\n   The convention\
    \ by which names are assigned to the Internet routes for\n   a gateway is in all\
    \ other respects implementation-specific.\n"
- title: 6.5.3.1.  The _GW_pr_in_rt_gateway Variable Class
  contents:
  - "6.5.3.1.  The _GW_pr_in_rt_gateway Variable Class\n   A variable such that the\
    \ initial portion of its name is represented\n   symbolically as \"_GW_pr_in_rt_gateway\"\
    \ and numerically as:\n                 01 04 01 02 01\n   has an octet string\
    \ value that literally represents the 32-bit\n   Internet address of the next\
    \ gateway to which traffic is directed by\n   the route identified by the remainder\
    \ of the name for said variable.\n"
- title: 6.5.3.2.  The _GW_pr_in_rt_type Variable Class
  contents:
  - "6.5.3.2.  The _GW_pr_in_rt_type Variable Class\n   A variable such that the initial\
    \ portion of its name is represented\n   symbolically as \"_GW_pr_in_rt_type\"\
    \ and numerically as:\n                 01 04 01 02 02\n   has an integer value\
    \ that represents the type of the route identified\n   by the remainder of the\
    \ name for said variable.  Route types are\n   identified according to the conventions\
    \ described in Appendix 3.\n"
- title: 6.5.3.3.  The _GW_pr_in_rt_how-learned Variable Class
  contents:
  - "6.5.3.3.  The _GW_pr_in_rt_how-learned Variable Class\n   A variable such that\
    \ the initial portion of its name is represented\n   symbolically as \"_GW_pr_in_rt_how-learned\"\
    \ and numerically as:\n                   01 04 01 02 03\n   has an octet string\
    \ value that represents the source of the\n   information from which the route\
    \ identified by the remainder of the\n   name for said variable is generated.\
    \ The meaningful values of such a\n   variable are: \"STATIC,\" \"EGP,\" and \"\
    RIP.\"\n"
- title: 6.5.3.4.  The _GW_pr_in_rt_metric0 Variable Class
  contents:
  - "6.5.3.4.  The _GW_pr_in_rt_metric0 Variable Class\n   A variable such that the\
    \ initial portion of its name is represented\n   symbolically as \"_GW_pr_in_rt_metric0\"\
    \ and numerically as:\n                 01 04 01 02 04\n   has an integer value\
    \ that represents the quality (in terms of cost,\n   distance from the ultimate\
    \ destination, or other metric) of the route\n   identified by the remainder of\
    \ the name for said variable.\n"
- title: 6.5.3.5.  The _GW_pr_in_rt_metric1 Variable Class
  contents:
  - "6.5.3.5.  The _GW_pr_in_rt_metric1 Variable Class\n   A variable such that the\
    \ initial portion of its name is represented\n   symbolically as \"_GW_pr_in_rt_metric1\"\
    \ and numerically as:\n                 01 04 01 02 05\n   has an integer value\
    \ that represents the quality (in terms of cost,\n   distance from the ultimate\
    \ destination, or other metric) of the route\n   identified by the remainder of\
    \ the name for said variable.\n"
- title: 6.6.  DECnet Protocol Variables
  contents:
  - "6.6.  DECnet Protocol Variables\n   This section describes variables that represent\
    \ information related\n   to protocols and mechanisms of the DEC Digital Network\
    \ Architecture.\n   DEC and DECnet are registered trademarks of Digital Equipment\n\
    \   Corporation.\n"
- title: 6.7.  XNS Protocol Variables
  contents:
  - "6.7.  XNS Protocol Variables\n   This section describes variables that represent\
    \ information related\n   to protocols and mechanisms of the Xerox Network System.\
    \  Xerox\n   Network System and XNS are registered trademarks of the XEROX\n \
    \  Corporation.\n"
- title: 7.  Implementation-Specific Variables
  contents:
  - "7.  Implementation-Specific Variables\n   Additional variables that may be presented\
    \ for inspection or\n   manipulation by particular protocol entity implementations\
    \ are\n   described in Appendices to this document.\n"
- title: 8.  References
  contents:
  - "8.  References\n   [1]  CCITT, \"Message Handling Systems: Presentation Transfer\n\
    \        Syntax and Notation\", Recommendation X.409, 1984.\n   [2]  Postel, J.,\
    \ \"User Datagram Protocol\", RFC-768,\n        USC/Information Sciences Institute,\
    \ August 1980.\n   [3]  Postel, J., \"Internet Protocol\", RFC-760, USC/Information\n\
    \        Sciences Institute, January 1980.\n   [4]  Rosen, E., \"Exterior Gateway\
    \ Protocol\", RFC-827, Bolt\n        Beranek and Newman, October 1982.\n"
- title: '9.  Appendix 1: Network Type Representation'
  contents:
  - '9.  Appendix 1: Network Type Representation

    '
- title: Numeric representations for various types of networks are presented
  contents:
  - "Numeric representations for various types of networks are presented\n   below:\n\
    \                         Value   Network Type\n                         ====================\n\
    \                         0       Unspecified\n                         1    \
    \   IEEE 802.3 MAC\n                         2       IEEE 802.4 MAC\n        \
    \                 3       IEEE 802.5 MAC\n                         4       Ethernet\n\
    \                         5       ProNET-80\n                         6      \
    \ ProNET-10\n                         7       FDDI\n                         8\
    \       X.25\n                         9       Point-to-Point Serial\n       \
    \                  10      Proprietary Point-to-Point Serial\n               \
    \          11      ARPA 1822 HDH\n                         12      ARPA 1822\n\
    \                         13      AppleTalk\n                         14     \
    \ StarLAN\n"
- title: '10.  Appendix 2: Network Status Representation'
  contents:
  - '10.  Appendix 2: Network Status Representation

    '
- title: Numeric representations for network status are presented below.
  contents:
  - "Numeric representations for network status are presented below.\n           \
    \              Value   Network Status\n                         ======================\n\
    \                         0       Interface Operating Normally\n             \
    \            1       Interface Not Present\n                         2       Interface\
    \ Disabled\n                         3       Interface Down\n                \
    \         4       Interface Attempting Link\n"
- title: '11.  Appendix 3: Route Type Representation'
  contents:
  - '11.  Appendix 3: Route Type Representation

    '
- title: Numeric representations for route types are presented below.
  contents:
  - "Numeric representations for route types are presented below.\n              \
    \           Value   Route Type\n                         ==================\n\
    \                         0       Route to Nowhere -- ignored\n              \
    \           1       Route to Directly Connected Network\n                    \
    \     2       Route to a Remote Host\n                         3       Route to\
    \ a Remote Network\n                         4       Route to a Sub-Network\n"
- title: '12.  Appendix 4: Initial Implementation Strategy'
  contents:
  - "12.  Appendix 4: Initial Implementation Strategy\n   The initial objective of\
    \ implementing the protocol specified in this\n   document is to provide a mechanism\
    \ for monitoring Internet gateways.\n   While the protocol design makes some provision\
    \ for gateway management\n   functions as well, this aspect of the design is not\
    \ fully developed\n   and needs further refinement before a generally useful implementation\n\
    \   could be produced.  Accordingly, initial implementations will not\n   generate\
    \ or respond to the optional Set Request message type.\n   The protocol defined\
    \ here may be subsequently refined based upon\n   experience with early implementations\
    \ or upon further study of the\n   problem of gateway management.  Moreover, it\
    \ may be superceded by\n   other proposals in the area of gateway monitoring and\
    \ control.\n   Implementations of the authentication protocol specified in this\n\
    \   document are likely to evolve in response to the particular security\n   and\
    \ privacy needs of its users.  While, in general, the association\n   between\
    \ particular half-sessions of the authentication protocol and\n   the described\
    \ triplets of functions is specific to an implementation\n   and beyond the scope\
    \ of this document, the desire for immediate\n   interoperability among initial\
    \ implementations of this protocol is\n   best served by the temporary adoption\
    \ of a common authentication\n   scheme.  Accordingly, initial implementations\
    \ will associate with\n   every possible half-session a triplet of functions that\
    \ realizes a\n   trivial authentication mechanism:\n   (1)  The authentication\
    \ function is defined to have the value\n        TRUE over the entire domain of\
    \ authentication protocol\n        messages.\n   (2)  The message interpretation\
    \ function is defined to be the\n        identity function.\n   (3)  The message\
    \ representation function is defined to be the\n        identity function.\n \
    \  Because this initial posture with respect to authentication is not\n   likely\
    \ to remain acceptable indefinitely, implementors are urged to\n   adopt designs\
    \ that isolate authentication mechanism as much as\n   possible from other components\
    \ of the implementation.\n"
- title: '13.  Appendix 5: Routing Information Propagation Variables'
  contents:
  - "13.  Appendix 5: Routing Information Propagation Variables\n   This section describes\
    \ a set of related variables that characterize\n   the sources and destinations\
    \ of routing information propagated by\n   various routing protocols. These variables\
    \ have meaning only for\n   those routing protocol implementations that afford\
    \ greater\n   flexibility in propagating routing information than is required\
    \ by\n   the various routing protocol specifications.\n   Each IP interface afforded\
    \ by the configuration of the gateway over\n   which routing information may propagate\
    \ via a routing protocol\n   (target interface) is named by a string of four octets\
    \ that literally\n   represents the IP address associated with said protocol interface.\n\
    \   Each IP protocol interface afforded by the configuration of the\n   gateway\
    \ over which routing information may arrive via any routing\n   protocol (source\
    \ interface) is named by a string of four octets that\n   literally represents\
    \ the IP address associated with said protocol\n   interface.\n   Each routing\
    \ protocol by which a gateway receives information that it\n   uses to route IP\
    \ traffic (source routing protocol) is named by a\n   single-octet string according\
    \ to the conventions set forth in\n   Appendix 6 of this document.\n   Each routing\
    \ protocol by which a gateway propagates routing\n   information used by other\
    \ hosts or gateways to route IP traffic\n   (target routing protocol) is named\
    \ by a single-octet string according\n   to the conventions set forth in Appendix\
    \ 6 of this document.\n   A variable such that the initial portion of its name\
    \ is the\n   concatenation of:\n   (1)  the octet string represented symbolically\
    \ as \"_GW_pr_in_rif\"\n        and numerically as 01 04 01 04 followed by:\n\
    \   (2)  the name of a target routing protocol followed by\n   (3)  the name of\
    \ a target interface followed by\n   (4)  the name of a source routing protocol\
    \ followed by\n   (5)  the name of a source interface\n   has an integer value\
    \ that characterizes the propagation of routing\n   information between the sources\
    \ and destinations of such information\n   that are identified by the initial\
    \ portion of that variable's name. A\n   non-zero value for such a variable indicates\
    \ that routing information\n   received via the source routing protocol named\
    \ by the fourth\n   component of the variable name on the source interface named\
    \ by its\n   fifth component is propagated via the target routing protocol named\n\
    \   by the second component of the variable name over the target\n   interface\
    \ named by its third component.  A zero value for such a\n   variable indicates\
    \ that routing information received via the source\n   routing protocol on the\
    \ source interface identified in the variable\n   name is NOT propagated via the\
    \ target routing protocol over the\n   target interface identified in the variable\
    \ name.\n"
- title: '14.  Appendix 6: Routing Protocol Representation'
  contents:
  - '14.  Appendix 6: Routing Protocol Representation

    '
- title: Numeric representations for routing protocols are presented below.
  contents:
  - "Numeric representations for routing protocols are presented below.\n        \
    \                Value   Routing Protocol\n                        ========================\n\
    \                        0       None -- Reserved\n                        1 \
    \      Berkeley RIP Version 1\n                        2       EGP\n         \
    \               3       GGP\n                        4       Hello\n         \
    \               5       Other IGRP\n"
- title: '15.  Appendix 7: Proteon p4200 Release 7.4 Variables'
  contents:
  - "15.  Appendix 7: Proteon p4200 Release 7.4 Variables\n   This section describes\
    \ implementation-specific variables presented by\n   the implementation of this\
    \ protocol in Software Release 7.4 for the\n   Proteon p4200 Internet Router.\
    \  These variable definitions are\n   subject to change without notice.\n"
- title: 15.1.  The Network Interface Variables
  contents:
  - "15.1.  The Network Interface Variables\n   This section describes a related set\
    \ of variables that represent\n   attributes of a network interface in the Proteon\
    \ p4200 Internet\n   Router gateway.  Each such network interface is uniquely\
    \ named by an\n   implementation-specific octet string of length 1.\n"
- title: 15.1.1.  The Generic Network Interface Variables
  contents:
  - "15.1.1.  The Generic Network Interface Variables\n   This section describes a\
    \ related set of variables that represent\n   attributes common to all network\
    \ interfaces in the Proteon p4200\n   Internet Router gateway.  Each generic network\
    \ interface of a p4200\n   configuration is uniquely named by the concatenation\
    \ of the octet\n   string represented symbolically as \"_GW_impl_Proteon_p4200-R7.4_net-\n\
    \   if\" and numerically as:\n                01 FF 01 01 01\n   followed by the\
    \ name of said network interface as described above.\n"
- title: 15.1.1.1.  The Generic _ovfl-in Variable Class
  contents:
  - "15.1.1.1.  The Generic _ovfl-in Variable Class\n   A variable such that the initial\
    \ portion of its name is the\n   concatenation of the name for a generic network\
    \ interface followed by\n   the octet string represented symbolically as \"_ovfl-in\"\
    \ and\n   numerically as 01, has an integer value that represents the number of\n\
    \   input packets dropped due to gateway congestion for the network\n   interface\
    \ identified by the initial portion of its name.\n"
- title: 15.1.1.2.  The Generic _ovfl-out Variable Class
  contents:
  - "15.1.1.2.  The Generic _ovfl-out Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for a generic\
    \ network interface followed by\n   the octet string represented symbolically\
    \ as \"_ovfl-out\" and\n   numerically as 02, has an integer value that represents\
    \ the number of\n   output packets dropped due to gateway congestion for the network\n\
    \   interface identified by the initial portion of its name.\n"
- title: 15.1.1.3.  The Generic _slftst-pass Variable Class          A variable
  contents:
  - "15.1.1.3.  The Generic _slftst-pass Variable Class          A variable\n   such\
    \ that the initial portion of its name is the concatenation of the\n   name for\
    \ a generic network interface followed by the octet string\n   represented symbolically\
    \ as \"_slftst-pass\" and numerically as 03, has\n   an integer value that represents\
    \ the number of times the interface\n   self-test procedure succeeded for the\
    \ network interface identified by\n   the initial portion of its name.\n"
- title: 15.1.1.4.  The Generic _slftst-fail Variable Class
  contents:
  - "15.1.1.4.  The Generic _slftst-fail Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for a generic\
    \ network interface followed by\n   the octet string represented symbolically\
    \ as \"_slftst-fail\" and\n   numerically as 04, has an integer value that represents\
    \ the number of\n   times the interface self-test procedure failed for the network\n\
    \   interface identified by the initial portion of its name.\n"
- title: 15.1.1.5.  The Generic _maint-fail Variable Class
  contents:
  - "15.1.1.5.  The Generic _maint-fail Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for a generic\
    \ network interface followed by\n   the octet string represented symbolically\
    \ as \"_maint-fail\" and\n   numerically as 06, has an integer value that represents\
    \ the number of\n   times the network maintenance procedure failed for the network\n\
    \   interface identified by the initial portion of its name.\n"
- title: 15.1.1.6.  The Generic _csr Variable Class
  contents:
  - "15.1.1.6.  The Generic _csr Variable Class\n   A variable such that the initial\
    \ portion of its name is the\n   concatenation of the name for a generic network\
    \ interface followed by\n   the octet string represented symbolically as \"_csr\"\
    \ and numerically\n   as 07, has an integer value that represents the internal\
    \ address of\n   the device CSR for the network interface identified by the initial\n\
    \   portion of its name.\n"
- title: 15.1.1.7.  The Generic _vec Variable Class
  contents:
  - "15.1.1.7.  The Generic _vec Variable Class\n   A variable such that the initial\
    \ portion of its name is the\n   concatenation of the name for a generic network\
    \ interface followed by\n   the octet string represented symbolically as \"_vec\"\
    \ and numerically\n   as 08, has an integer value that identifies the device interrupt\n\
    \   vector used by the network interface identified by the initial\n   portion\
    \ of its name.\n"
- title: 15.1.2.  The ProNET Network Interface Variables
  contents:
  - "15.1.2.  The ProNET Network Interface Variables\n   This section describes a\
    \ related set of variables that represent\n   attributes of a ProNET type network\
    \ interface in the Proteon p4200\n   Internet Router gateway.  Each network interface\
    \ of a p4200\n   configuration that supports ProNET media is uniquely named by\
    \ the\n   concatenation of the octet string represented symbolically as\n   \"\
    _GW_impl_Proteon_p4200-R7.4_devpn\" and numerically as:\n                 01 FF\
    \ 01 01 04\n   followed by the name of said network interface as described above.\n"
- title: 15.1.2.1.  The ProNET _node-number Variable Class
  contents:
  - "15.1.2.1.  The ProNET _node-number Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for a ProNET\
    \ type network interface\n   followed by the octet string represented symbolically\
    \ as \"_node-\n   number\" and numerically as 01, has an integer value that represents\n\
    \   the ProNET node number associated with the network interface\n   identified\
    \ by the initial portion of its name.\n"
- title: 15.1.2.2.  The ProNET _in-data-present Variable Class
  contents:
  - "15.1.2.2.  The ProNET _in-data-present Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for a ProNET\
    \ type network interface\n   followed by the octet string represented symbolically\
    \ as \"_in-data-\n   present\" and numerically as 02, has an integer value that\
    \ represents\n   the number of times that unread data was present in the input\
    \ packet\n   buffer for the network interface dentified by the initial portion\
    \ of\n   its name.\n"
- title: 15.1.2.3.  The ProNET _in-overrun Variable Class
  contents:
  - "15.1.2.3.  The ProNET _in-overrun Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for a ProNET\
    \ type network interface\n   followed by the octet string represented symbolically\
    \ as \"_in-\n   overrun\" and numerically as 03, has an integer value that represents\n\
    \   the number of times that a packet copied from the ring exceeded the\n   size\
    \ of the packet input buffer on the network interface identified\n   by the initial\
    \ portion of its name.\n"
- title: 15.1.2.4.  The ProNET _in-odd-byte-cnt Variable Class
  contents:
  - "15.1.2.4.  The ProNET _in-odd-byte-cnt Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for a ProNET\
    \ type network interface\n   followed by the octet string represented symbolically\
    \ as \"_in-odd-\n   byte-cnt\" and numerically as 04, has an integer value that\
    \ represents\n   the number of times that a packet was received with an odd number\
    \ of\n   bytes on the network interface identified by the initial portion of\n\
    \   its name.\n"
- title: 15.1.2.5.  The ProNET _in-parity-error Variable Class
  contents:
  - "15.1.2.5.  The ProNET _in-parity-error Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for a ProNET\
    \ type network interface\n   followed by the octet string represented symbolically\
    \ as \"_in-\n   parity-error\" and numerically as 05, has an integer value that\n\
    \   represents the number of times that a parity error was detected in a\n   packet\
    \ copied from the ring on the network interface identified by\n   the initial\
    \ portion of its name.\n"
- title: 15.1.2.6.  The ProNET _in-bad-format Variable Class
  contents:
  - "15.1.2.6.  The ProNET _in-bad-format Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for a ProNET\
    \ type network interface\n   followed by the octet string represented symbolically\
    \ as \"_in-bad-\n   format\" and numerically as 06, has an integer value that\
    \ represents\n   the number of times that a format error was detected in a packet\n\
    \   copied from the ring on the network interface identified by the\n   initial\
    \ portion of its name.\n"
- title: 15.1.2.7.  The ProNET _not-in-ring Variable Class
  contents:
  - "15.1.2.7.  The ProNET _not-in-ring Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for a ProNET\
    \ type network interface\n   followed by the octet string represented symbolically\
    \ as \"_not-in-\n   ring\" and numerically as 07, has an integer value that represents\
    \ the\n   number of times that the ProNET wire center relays were detected in\n\
    \   an unenergized state for the network interface identified by the\n   initial\
    \ portion of its name.\n"
- title: 15.1.2.8.  The ProNET _out-ring-inits Variable Class
  contents:
  - "15.1.2.8.  The ProNET _out-ring-inits Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for a ProNET\
    \ type network interface\n   followed by the octet string represented symbolically\
    \ as \"_out-ring-\n   inits\" and numerically as 08, has an integer value that\
    \ represents\n   the number of times that ring initialization has been attempted\
    \ on\n   the network interface identified by the initial portion of its name.\n"
- title: 15.1.2.9.  The ProNET _out-bad-format Variable Class
  contents:
  - "15.1.2.9.  The ProNET _out-bad-format Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for a ProNET\
    \ type network interface\n   followed by the octet string represented symbolically\
    \ as \"_out-bad-\n   format\" and numerically as 09, has an integer value that\
    \ represents\n   the number of times that an improperly formatted packet was detected\n\
    \   in the course of an output operation on the network interface\n   identified\
    \ by the initial portion of its name.\n"
- title: 15.1.2.10.  The ProNET _out-timeout Variable Class
  contents:
  - "15.1.2.10.  The ProNET _out-timeout Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for a ProNET\
    \ type network interface\n   followed by the octet string represented symbolically\
    \ as \"_out-\n   timeout\" and numerically as 0A, has an integer value that represents\n\
    \   the number of times that an attempt to originate a message has been\n   delayed\
    \ by more than 700 ms on the network interface identified by\n   the initial portion\
    \ of its name.\n"
- title: 15.1.3.  The Ethernet Network Interface Variables
  contents:
  - "15.1.3.  The Ethernet Network Interface Variables\n   This section describes\
    \ a related set of variables that represent\n   attributes of an Ethernet type\
    \ network interface in the Proteon p4200\n   Internet Router gateway.  Each network\
    \ interface of a p4200\n   configuration that supports Ethernet media is uniquely\
    \ named by the\n   concatenation of the octet string represented symbolically\
    \ as\n   \"_GW_impl_Proteon_p4200-R7.4_dev-ie\" and numerically as:\n        \
    \         01 FF 01 01 03\n   followed by the name of said network interface as\
    \ described above.\n"
- title: 15.1.3.1.  The Ethernet _phys-addr Variable Class
  contents:
  - "15.1.3.1.  The Ethernet _phys-addr Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for an Ethernet\
    \ type network interface\n   followed by the octet string represented symbolically\
    \ as \"_phys-addr\"\n   and numerically as 01 has an octet string value that literally\n\
    \   represents the Ethernet station address associated with the network\n   interface\
    \ identified by the initial portion of its name.\n"
- title: 15.1.3.2.  The Ethernet _input-ovfl Variable Class
  contents:
  - "15.1.3.2.  The Ethernet _input-ovfl Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for an Ethernet\
    \ type network interface\n   followed by the octet string represented symbolically\
    \ as \"_input-\n   ovfl\" and numerically as 02, has an integer value that represents\
    \ the\n   number of times the size of a received frame exceeded the maximum\n\
    \   allowable for the network interface identified by the initial portion\n  \
    \ of its name.\n"
- title: 15.1.3.3.  The Ethernet _input-dropped Variable Class
  contents:
  - "15.1.3.3.  The Ethernet _input-dropped Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for an\
    \ Ethernet type network interface\n   followed by the octet string represented0\
    \ symbolically as \"_input-\n   dropped\" and numerically as 03, has an integer\
    \ value that represents\n   the number of times the loss of one or more frames\
    \ was detected on\n   the network interface identified by the initial portion\
    \ of its name.\n"
- title: 15.1.3.4.  The Ethernet _output-retry Variable Class
  contents:
  - "15.1.3.4.  The Ethernet _output-retry Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for an\
    \ Ethernet type network interface\n   followed by the octet string represented\
    \ symbolically as \"_output-\n   retry\" and numerically as 04, has an integer\
    \ value that represents\n   the number of output operations retried as the result\
    \ of a\n   transmission failure on the network interface identified by the\n \
    \  initial portion of its name.\n"
- title: 15.1.3.5.  The Ethernet _output-fail Variable Class
  contents:
  - "15.1.3.5.  The Ethernet _output-fail Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for an\
    \ Ethernet type network interface\n   followed by the octet string represented\
    \ symbolically as \"_output-\n   fail\" and numerically as 05, has an integer\
    \ value that represents the\n   number of failed output operations detected on\
    \ the network interface\n   identified by the initial portion of its name.\n"
- title: 15.1.3.6.  The Ethernet _excess-coll Variable Class
  contents:
  - "15.1.3.6.  The Ethernet _excess-coll Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for an\
    \ Ethernet type network interface\n   followed by the octet string represented\
    \ symbolically as \"_excess-\n   coll\" and numerically as 06, has an integer\
    \ value that represents the\n   number of times a transmit frame incurred 16 successive\
    \ collisions\n   when attempting media access via the network interface identified\
    \ by\n   the initial portion of its name.\n"
- title: 15.1.3.7.  The Ethernet _frag-rcvd Variable Class
  contents:
  - "15.1.3.7.  The Ethernet _frag-rcvd Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for an Ethernet\
    \ type network interface\n   followed by the octet string represented symbolically\
    \ as \"_frag-rcvd\"\n   and numerically as 07, has an integer value that represents\
    \ the\n   number of collision fragments (i.e., \"runt packets\") that were\n \
    \  received and filtered by the controller for the network interface\n   identified\
    \ by the initial portion of its name.\n"
- title: 15.1.3.8.  The Ethernet _frames-lost Variable Class
  contents:
  - "15.1.3.8.  The Ethernet _frames-lost Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for an\
    \ Ethernet type network interface\n   followed by the octet string represented\
    \ symbolically as \"_frames-\n   lost\" and numerically as 08, has an integer\
    \ value that represents the\n   number of frames not accepted by the Receive FIFO\
    \ due to insufficient\n   space for the network interface identified by the initial\
    \ portion of\n   its name.\n"
- title: 15.1.3.9.  The Ethernet _multicst-accept Variable Class
  contents:
  - "15.1.3.9.  The Ethernet _multicst-accept Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for an\
    \ Ethernet type network interface\n   followed by the octet string represented\
    \ symbolically as \"_multicst-\n   accept\" and numerically as 09, has an integer\
    \ value that represents\n   the number of frames received with a multicast-group\
    \ destination\n   address that matches one of those assigned to the controller\
    \ for the\n   network interface identified by the initial portion of said variable\n\
    \   name.\n"
- title: 15.1.3.10.  The Ethernet _multicst-reject Variable Class
  contents:
  - "15.1.3.10.  The Ethernet _multicst-reject Variable Class\n   A variable such\
    \ that the initial portion of its name is the\n   concatenation of the name for\
    \ an Ethernet type network interface\n   followed by the octet string represented\
    \ symbolically as \"_multicst-\n   reject\" and numerically as 0A, has an integer\
    \ value that represents\n   the number of frames detected as having a multicast-group\
    \ destination\n   address that matches none of those assigned to the controller\
    \ for the\n   network interface identified by the initial portion of said variable\n\
    \   name.\n"
- title: 15.1.3.11.  The Ethernet _crc-error Variable Class
  contents:
  - "15.1.3.11.  The Ethernet _crc-error Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for an Ethernet\
    \ type network interface\n   followed by the octet string represented symbolically\
    \ as \"_crc-error\"\n   and numerically as 0B, has an integer value that represents\
    \ the\n   number of frames received with a CRC error on the network interface\n\
    \   identified by the initial portion of its name.\n"
- title: 15.1.3.12.  The Ethernet _alignmnt-error Variable Class
  contents:
  - "15.1.3.12.  The Ethernet _alignmnt-error Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for an\
    \ Ethernet type network interface\n   followed by the octet string represented\
    \ symbolically as \"_alignmnt-\n   error\" and numerically as 0C, has an integer\
    \ value that represents\n   the number of frames received with an alignment error\
    \ on the network\n   interface identified by the initial portion of its name.\
    \  A received\n   frame is said to have an alignment error if its received length\
    \ is\n   not an integral multiple of 8 bits.\n"
- title: 15.1.3.13.  The Ethernet _collisions Variable Class
  contents:
  - "15.1.3.13.  The Ethernet _collisions Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for an\
    \ Ethernet type network interface\n   followed by the octet string represented\
    \ symbolically as\n   \"_collisions\" and numerically as 0D, has an integer value\
    \ that\n   represents the number of collisions incurred during transmissions on\n\
    \   the network interface identified by the initial portion of its name.\n"
- title: 15.1.3.14.  The Ethernet _out-of-window-coll Variable Class
  contents:
  - "15.1.3.14.  The Ethernet _out-of-window-coll Variable Class\n   A variable such\
    \ that the initial portion of its name is the\n   concatenation of the name for\
    \ an Ethernet type network interface\n   followed by the octet string represented\
    \ symbolically as \"_out-of-\n   window-coll\" and numerically as 0E, has an integer\
    \ value that\n   represents the number of out-ofwindow collisions incurred during\n\
    \   transmissions on the network interface identified by the initial\n   portion\
    \ of its name.  Outof-window collisions are those occurring\n   after the first\
    \ 51.2 microseconds of slot time.\n"
- title: 15.1.4.  The Serial Network Interface Variables
  contents:
  - "15.1.4.  The Serial Network Interface Variables\n   This section describes a\
    \ related set of variables that represent\n   attributes of an serial line type\
    \ network interface in the Proteon\n   p4200 Internet Router gateway.  Each network\
    \ interface of a p4200\n   configuration that supports serial communications is\
    \ uniquely named\n   by the concatenation of the octet string represented symbolically\
    \ as\n   \"_GW_impl_Proteon_p4200-R7.4_dev-sl\" and numerically as:\n        \
    \         01 FF 01 01 05\n   followed by the name of said network interface as\
    \ described above.\n"
- title: 15.1.4.1.  The Serial _tx-pkts Variable Class
  contents:
  - "15.1.4.1.  The Serial _tx-pkts Variable Class\n   A variable such that the initial\
    \ portion of its name is the\n   concatenation of the name for a serial line type\
    \ network interface\n   followed by the octet string represented symbolically\
    \ as \"_tx-pkts\"\n   and numerically as 01, has an integer value that represents\
    \ the\n   number of packets transmitted on the network interface identified by\n\
    \   the initial portion of its name.\n"
- title: 15.1.4.2.  The Serial _tx-framing-error Variable Class
  contents:
  - "15.1.4.2.  The Serial _tx-framing-error Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for a serial\
    \ line type network interface\n   followed by the octet string represented symbolically\
    \ as \"_tx-\n   framing-error\" and numerically as 02, has an integer value that\n\
    \   represents the number of transmission framing errors for the network\n   interface\
    \ identified by the initial portion of its name.\n"
- title: 15.1.4.3.  The Serial _tx-underrns Variable Class
  contents:
  - "15.1.4.3.  The Serial _tx-underrns Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for a serial\
    \ line type network interface\n   followed by the octet string represented symbolically\
    \ as \"_tx-\n   underrns\" and numerically as 03, has an integer value that represents\n\
    \   the number of transmission underrun errors for the network interface\n   identified\
    \ by the initial portion of its name.\n"
- title: 15.1.4.4.  The Serial _tx-no-dcd Variable Class
  contents:
  - "15.1.4.4.  The Serial _tx-no-dcd Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for a serial\
    \ line type network interface\n   followed by the octet string represented symbolically\
    \ as \"_tx-no-dcd\"\n   and numerically as 04, has an integer value that represents\
    \ the\n   number of times transmission failed due to absence of the EIA Data\n\
    \   Carrier Detect signal on the network interface identified by the\n   initial\
    \ portion of its name.\n"
- title: 15.1.4.5.  The Serial _tx-no-cts Variable Class
  contents:
  - "15.1.4.5.  The Serial _tx-no-cts Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for a serial\
    \ line type network interface\n   followed by the octet string represented symbolically\
    \ as \"_tx-no-cts\"\n   and numerically as 05, has an integer value that represents\
    \ the\n   number of times transmission failed due to absence of the EIA Clear\n\
    \   To Send signal on the network interface identified by the initial\n   portion\
    \ of its name.\n"
- title: 15.1.4.6.  The Serial _tx-no-dsr Variable Class
  contents:
  - "15.1.4.6.  The Serial _tx-no-dsr Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for a serial\
    \ line type network interface\n   followed by the octet string represented symbolically\
    \ as \"_tx-no-dsr\"\n   and numerically as 06, has an integer value that represents\
    \ the\n   number of times transmission failed due to absence of the EIA Data\n\
    \   Set Ready signal on the network interface identified by the initial\n   portion\
    \ of its name.\n"
- title: 15.1.4.7.  The Serial _rx-pkts Variable Class
  contents:
  - "15.1.4.7.  The Serial _rx-pkts Variable Class\n   A variable such that the initial\
    \ portion of its name is the\n   concatenation of the name for a serial line type\
    \ network interface\n   followed by the octet string represented symbolically\
    \ as \"_rx-pkts\"\n   and numerically as 07, has an integer value that represents\
    \ the\n   number of packets received on the network interface identified by the\n\
    \   initial portion of its name.\n"
- title: 15.1.4.8.  The Serial _rx-framing-err Variable Class
  contents:
  - "15.1.4.8.  The Serial _rx-framing-err Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for a serial\
    \ line type network interface\n   followed by the octet string represented symbolically\
    \ as \"_rx-\n   framing-err\" and numerically as 08, has an integer value that\n\
    \   represents the number of receive framing errors on the network\n   interface\
    \ identified by the initial portion of its name.\n"
- title: 15.1.4.9.  The Serial _rx-overrns Variable Class
  contents:
  - "15.1.4.9.  The Serial _rx-overrns Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for a serial\
    \ line type network interface\n   followed by the octet string represented symbolically\
    \ as \"_rx-\n   overrns\" and numerically as 09, has an integer value that represents\n\
    \   the number of receive overrun errors on the network interface\n   identified\
    \ by the initial portion of its name.\n"
- title: 15.1.4.10.  The Serial _rx-aborts Variable Class
  contents:
  - "15.1.4.10.  The Serial _rx-aborts Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for a serial\
    \ line type network interface\n   followed by the octet string represented symbolically\
    \ as \"_rx-aborts\"\n   and numerically as 0A, has an integer value that represents\
    \ the\n   number of aborted frames received on the network interface identified\n\
    \   by the initial portion of its name.\n"
- title: 15.1.4.11.  The Serial _rx-crc-err Variable Class
  contents:
  - "15.1.4.11.  The Serial _rx-crc-err Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for a serial\
    \ line type network interface\n   followed by the octet string represented symbolically\
    \ as \"_rx-crc-\n   err\" and numerically as 0B, has an integer value that represents\
    \ the\n   number of frames received with CRC errors on the network interface\n\
    \   identified by the initial portion of its name.\n"
- title: 15.1.4.12.  The Serial _rx-buf-ovfl Variable Class
  contents:
  - "15.1.4.12.  The Serial _rx-buf-ovfl Variable Class\n   A variable such that the\
    \ initial portion of its name is the\n   concatenation of the name for a serial\
    \ line type network interface\n   followed by the octet string represented symbolically\
    \ as \"_rx-buf-\n   ovfl\" and numerically as 0C, has an integer value that represents\
    \ the\n   number of received frames whose size exceeded the maximum allowable\n\
    \   on the network interface identified by the initial portion of its\n   name.\n"
- title: 15.1.4.13.  The Serial _rx-buf-locked Variable Class
  contents:
  - "15.1.4.13.  The Serial _rx-buf-locked Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for a serial\
    \ line type network interface\n   followed by the octet string represented symbolically\
    \ as \"_rx-buf-\n   locked\" and numerically as 0D, has an integer value that\
    \ represents\n   the number of received frames lost for lack of an available buffer\
    \ on\n   the network interface identified by the initial portion of its name.\n"
- title: 15.1.4.14.  The Serial _rx-line-speed Variable Class
  contents:
  - "15.1.4.14.  The Serial _rx-line-speed Variable Class\n   A variable such that\
    \ the initial portion of its name is the\n   concatenation of the name for a serial\
    \ line type network interface\n   followed by the octet string represented symbolically\
    \ as \"_rx-line-\n   speed\" and numerically as 0E, has an integer value that\
    \ represents an\n   estimate of serial line bandwidth in bits per second for the\
    \ network\n   interface identified by the initial portion of its name.\n"
