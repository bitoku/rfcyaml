- title: __initial_text__
  contents:
  - '             Tunneling Multiplexed Compressed RTP (TCRTP)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a method to improve the bandwidth utilization\n\
    \   of RTP streams over network paths that carry multiple Real-time\n   Transport\
    \ Protocol (RTP) streams in parallel between two endpoints,\n   as in voice trunking.\
    \  The method combines standard protocols that\n   provide compression, multiplexing,\
    \ and tunneling over a network path\n   for the purpose of reducing the bandwidth\
    \ used when multiple RTP\n   streams are carried over that path.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Is Bandwidth Costly? .......................................3\n  \
    \    1.2. Overview of Protocols ......................................3\n    \
    \  1.3. Document Focus .............................................4\n      1.4.\
    \ Choice of Enhanced CRTP ....................................4\n      1.5. Reducing\
    \ TCRTP Overhead ....................................4\n   2. Protocol Operation\
    \ and Recommended Extensions ...................4\n      2.1. Models .....................................................5\n\
    \      2.2. Header Compression: ECRTP ..................................5\n  \
    \         2.2.1. Synchronizing ECRTP States ..........................5\n    \
    \       2.2.2. Out-of-Order Packets ................................6\n      2.3.\
    \ Multiplexing: PPP Multiplexing .............................6\n           2.3.1.\
    \ PPP Multiplex Transmitter Modifications for\n                  Tunneling ...........................................7\n\
    \           2.3.2. Tunneling Inefficiencies ............................8\n  \
    \    2.4. Tunneling: L2TP ............................................8\n    \
    \       2.4.1. Tunneling and DiffServ ..............................9\n      2.5.\
    \ Encapsulation Formats ......................................9\n   3. Bandwidth\
    \ Efficiency ...........................................10\n      3.1. Multiplexing\
    \ Gains ........................................10\n      3.2. Packet Loss Rate\
    \ ..........................................10\n      3.3. Bandwidth Calculation\
    \ for Voice and Video Applications ....10\n           3.3.1. Voice Bandwidth Calculation\
    \ Example ................12\n           3.3.2. Voice Bandwidth Comparison Table\
    \ ...................13\n           3.3.3. Video Bandwidth Calculation Example\
    \ ................13\n           3.3.4. TCRTP over ATM .....................................14\n\
    \           3.3.5. TCRTP over Non-ATM Networks ........................14\n  \
    \ 4. Example Implementation of TCRTP ................................15\n    \
    \  4.1. Suggested PPP and L2TP Negotiation for TCRTP ..............17\n      4.2.\
    \ PPP Negotiation TCRTP .....................................17\n           4.2.1.\
    \ LCP Negotiation ....................................17\n           4.2.2. IPCP\
    \ Negotiation ...................................18\n      4.3. L2TP Negotiation\
    \ ..........................................19\n           4.3.1. Tunnel Establishment\
    \ ...............................19\n           4.3.2. Session Establishment ..............................19\n\
    \           4.3.3. Tunnel Tear Down ...................................20\n  \
    \ 5. Security Considerations ........................................20\n   6.\
    \ Acknowledgements ...............................................21\n   7. References\
    \ .....................................................21\n      7.1. Normative\
    \ References ......................................21\n      7.2. Informative\
    \ References ....................................22\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes a way to combine existing protocols\
    \ for\n   compression, multiplexing, and tunneling to save bandwidth for some\n\
    \   RTP applications.\n"
- title: 1.1.  Is Bandwidth Costly?
  contents:
  - "1.1.  Is Bandwidth Costly?\n   On certain links, such as customer access links,\
    \ the cost of\n   bandwidth is widely acknowledged to be a significant concern.\n\
    \   protocols such as CRTP (Compressed RTP, [CRTP]) are well suited to\n   help\
    \ bandwidth inefficiencies of protocols such as VoIP over these\n   links.\n \
    \  Unacknowledged by many, however, is the cost of long-distance WAN\n   links.\
    \  While some voice-over-packet technologies such as Voice over\n   ATM (VoAAL2,\
    \ [I.363.2]) and Voice over MPLS provide bandwidth\n   efficiencies (because both\
    \ technologies lack IP, UDP, and RTP\n   headers), neither VoATM nor VoMPLS provide\
    \ direct access to voice-\n   over-packet services available to Voice over IP.\
    \  Thus, goals of WAN\n   link cost reduction are met at the expense of lost interconnection\n\
    \   opportunities to other networks.\n   TCRTP solves the VoIP bandwidth discrepancy,\
    \ especially for large,\n   voice-trunking applications.\n"
- title: 1.2.  Overview of Protocols
  contents:
  - "1.2.  Overview of Protocols\n   Header compression is accomplished using Enhanced\
    \ CRTP (ECRTP,\n   [ECRTP]).  ECRTP is an enhancement to classical CRTP [CRTP]\
    \ that\n   works better over long delay links, such as the end-to-end tunneling\n\
    \   links described in this document.  This header compression reduces\n   the\
    \ IP, UDP, and RTP headers.\n   Multiplexing is accomplished using PPP Multiplexing\
    \ [PPP-MUX].\n   Tunneling PPP is accomplished by using L2TP [L2TPv3].\n   CRTP\
    \ operates link-by-link; that is, to achieve compression over\n   multiple router\
    \ hops, CRTP must be employed twice on each router --\n   once on ingress, again\
    \ on egress.  In contrast, TCRTP described in\n   this document does not require\
    \ any additional per-router processing\n   to achieve header compression.  Instead,\
    \ headers are compressed end-\n   to-end, saving bandwidth on all intermediate\
    \ links.\n"
- title: 1.3.  Document Focus
  contents:
  - "1.3.  Document Focus\n   This document is primarily concerned with bandwidth\
    \ savings for Voice\n   over IP (VoIP) applications over high-delay networks.\
    \  However, the\n   combinations of protocols described in this document can be\
    \ used to\n   provide similar bandwidth savings for other RTP applications such\
    \ as\n   video, and bandwidth savings are included for a sample video\n   application.\n"
- title: 1.4.  Choice of Enhanced CRTP
  contents:
  - "1.4.  Choice of Enhanced CRTP\n   CRTP [CRTP] describes the use of RTP header\
    \ compression on an\n   unspecified link layer transport, but typically PPP is\
    \ used.  For\n   CRTP to compress headers, it must be implemented on each PPP\
    \ link.  A\n   lot of context is required to successfully run CRTP, and memory\
    \ and\n   processing requirements are high, especially if multiple hops must\n\
    \   implement CRTP to save bandwidth on each of the hops.  At higher line\n  \
    \ rates, CRTP's processor consumption becomes prohibitively expensive.\n   To\
    \ avoid the per-hop expense of CRTP, a simplistic solution is to use\n   CRTP\
    \ with L2TP to achieve end-to-end CRTP.  However, as described in\n   [ECRTP],\
    \ CRTP is only suitable for links with low delay and low loss.\n   However, once\
    \ multiple router hops are involved, CRTP's expectation\n   of low delay and low\
    \ loss can no longer be met.  Further, packets can\n   arrive out of order.\n\
    \   Therefore, this document describes the use of Enhanced CRTP [ECRTP],\n   which\
    \ supports high delay, both packet loss, and misordering between\n   the compressor\
    \ and decompressor.\n"
- title: 1.5.  Reducing TCRTP Overhead
  contents:
  - "1.5.  Reducing TCRTP Overhead\n   If only one stream is tunneled (L2TP) and compressed\
    \ (ECRTP), there\n   are little bandwidth savings.  Multiplexing is helpful to\
    \ amortize\n   the overhead of the tunnel header over many RTP payloads.  The\n\
    \   multiplexing format proposed by this document is PPP multiplexing\n   [PPP-MUX].\
    \  See Section 2.3 for details.\n"
- title: 2.  Protocol Operation and Recommended Extensions
  contents:
  - "2.  Protocol Operation and Recommended Extensions\n   This section describes\
    \ how to combine three protocols: Enhanced CRTP,\n   PPP Multiplexing, and L2TP\
    \ Tunneling, to save bandwidth for RTP\n   applications such as Voice over IP.\n"
- title: 2.1.  Models
  contents:
  - "2.1.  Models\n   TCRTP can typically be implemented in two ways.  The most\n\
    \   straightforward is to implement TCRTP in the gateways terminating the\n  \
    \ RTP streams:\n       [voice gateway]---[voice gateway]\n                   \
    \    ^\n                       |\n                 TCRTP over IP\n   Another way\
    \ TCRTP can be implemented is with an external\n   concentration device.  This\
    \ device could be placed at strategic\n   places in the network and could dynamically\
    \ create and destroy TCRTP\n   sessions without the participation of RTP-generating\
    \ endpoints.\n       [voice GW]\\                                   /[voice GW]\n\
    \       [voice GW]---[concentrator]---[concentrator]---[voice GW]\n       [voice\
    \ GW]/                                   \\[voice GW]\n                  ^   \
    \             ^                ^\n                  |                |       \
    \         |\n             RTP over IP     TCRTP over IP     RTP over IP\n   Such\
    \ a design also allows classical CRTP [CRTP] to be used on links\n   with only\
    \ a few active flows per link (where TCRTP isn't efficient;\n   see Section 3):\n\
    \       [voice GW]\\                                   /[voice GW]\n       [voice\
    \ GW]---[concentrator]---[concentrator]---[voice GW]\n       [voice GW]/     \
    \                              \\[voice GW]\n                  ^             \
    \   ^                ^\n                  |                |                |\n\
    \           CRTP over IP     TCRTP over IP     RTP over IP\n"
- title: '2.2.  Header Compression: ECRTP'
  contents:
  - "2.2.  Header Compression: ECRTP\n   As described in [ECRTP], classical CRTP [CRTP]\
    \ is not suitable over\n   long-delay WAN links commonly used when tunneling,\
    \ as proposed by\n   this document.  Thus, ECRTP should be used instead of CRTP.\n"
- title: 2.2.1.  Synchronizing ECRTP States
  contents:
  - "2.2.1.  Synchronizing ECRTP States\n   When the compressor receives an RTP packet\
    \ that has an unpredicted\n   change in the RTP header, the compressor should\
    \ send a COMPRESSED_UDP\n   packet (described in [ECRTP]) to synchronize the ECRTP\
    \ decompressor\n   state.  The COMPRESSED_UDP packet updates the RTP context in\
    \ the\n   decompressor.\n   To ensure delivery of updates of context variables,\
    \ COMPRESSED_UDP\n   packets should be delivered using the robust operation described\
    \ in\n   [ECRTP].\n   Because the \"twice\" algorithm described in [ECRTP] relies\
    \ on UDP\n   checksums, the IP stack on the RTP transmitter should transmit UDP\n\
    \   checksums.  If UDP checksums are not used, the ECRTP compressor\n   should\
    \ use the CRTP Headers checksum described in [ECRTP].\n"
- title: 2.2.2.  Out-of-Order Packets
  contents:
  - "2.2.2.  Out-of-Order Packets\n   Tunneled transport does not guarantee ordered\
    \ delivery of packets.\n   Therefore, the ECRTP decompressor must operate correctly\
    \ in the\n   presence of out of order packets.\n   The order of packets for RTP\
    \ is determined by the RTP sequence\n   number.  To add robustness in case of\
    \ packet loss or packet\n   reordering, ECRTP sends short deltas together with\
    \ the full value\n   when updating context variables, and repeats the updates\
    \ in N\n   packets, where N is an engineered constant tuned to the kind of pipe\n\
    \   ECRTP is used for.\n   By contrast, [ROHC] compresses out the sequence number\
    \ and another\n   layer is necessary for [ROHC] to handle out-of-order delivery\
    \ of\n   packets over a tunnel [REORDER].\n"
- title: '2.3.  Multiplexing: PPP Multiplexing'
  contents:
  - "2.3.  Multiplexing: PPP Multiplexing\n   Both CRTP and ECRTP require a layer\
    \ two protocol that allows\n   identifying different protocols.  [PPP] is suited\
    \ for this.\n   When CRTP is used inside of a tunnel, the header compression\n\
    \   associated with CRTP will reduce the size of the IP, UDP, and IP\n   headers\
    \ of the IP packet carried in the tunnel.  However, the tunnel\n   itself has\
    \ overhead due to its IP header and the tunnel header (the\n   information necessary\
    \ to identify the tunneled payload).  One way to\n   reduce the overhead of the\
    \ IP header and tunnel header is to\n   multiplex multiple RTP payloads in a single\
    \ tunneled packet.\n   [PPP-MUX] describes an encapsulation that combines multiple\
    \ PPP\n   payloads into one multiplexed payload.  PPP multiplexing allows any\n\
    \   supported PPP payload type to be multiplexed.  This multiplexed frame\n  \
    \ is then carried as a single PPPMUX payload in the IP tunnel.  This\n   allows\
    \ multiple RTP payloads to be carried in a single IP tunnel\n   packet and allows\
    \ the overhead of the uncompressed IP and tunnel\n   headers to be amortized over\
    \ multiple RTP payloads.\n   During PPP establishment of the TCRTP tunnel, only\
    \ LCP and IPCP (for\n   header compression) are required -- IP addresses do not\
    \ need to be\n   negotiated, nor is authentication necessary.  See Section 4.1\
    \ for\n   details.\n"
- title: 2.3.1.  PPP Multiplex Transmitter Modifications for Tunneling
  contents:
  - "2.3.1.  PPP Multiplex Transmitter Modifications for Tunneling\n   Section 1.2\
    \ of [PPP-MUX] describes an example transmitter procedure\n   that can be used\
    \ to implement a PPP Multiplex transmitter.  The\n   transmission procedure described\
    \ in this section includes a parameter\n   MAX-SF-LEN that is used to limit the\
    \ maximum size of a PPP Multiplex\n   frame.\n   There are two reasons for limiting\
    \ the size of a PPP Multiplex frame.\n   First, a PPPMUX frame should never exceed\
    \ the Maximum Receive Unit\n   (MRU) of a physical link.  Second, when a PPP session\
    \ and its\n   associated flow control are bound to a physical link, the MAX-SF-LEN\n\
    \   parameter forms an upper limit on the amount of time a multiplex\n   packet\
    \ can be held before being transmitted.  When flow control for\n   the PPP Multiplex\
    \ transmitter is bound to a physical link, the clock\n   rate of the physical\
    \ link can be used to pull frames from the PPP\n   Multiplex transmitter.\n  \
    \ This type of flow control limits the maximum amount of time a PPP\n   multiplex\
    \ frame can be held before being transmitted to MAX-SF-LEN /\n   Link Speed.\n\
    \   Tunnel interfaces are typically not bound to physical interfaces.\n   Because\
    \ of this, a tunnel interface has no well-known transmission\n   rate associated\
    \ with it.  This means that flow control in the PPPMUX\n   transmitter cannot\
    \ rely on the clock of a physical link to pull\n   frames from the multiplex transmitter.\
    \  Instead, a timer must be used\n   to limit the amount of time a PPPMUX frame\
    \ can be held before being\n   transmitted.  The timer along with the MAX-SF-LEN\
    \ parameter should be\n   used to limit the amount of time a PPPMUX frame is held\
    \ before being\n   transmitted.\n   The following extensions to the PPPMUX transmitter\
    \ logic should be\n   made for use with tunnels.  The flow control logic of the\
    \ PPP\n   transmitter should be modified to collect incoming payloads until one\n\
    \   of two events has occurred:\n          (1)  a specific number of octets, MAX-SF-LEN,\
    \ has arrived at\n               the multiplexer, or\n          (2)  a timer,\
    \ called T, has expired.\n   When either condition is satisfied, the multiplexed\
    \ PPP payload is\n   transmitted.\n   The purpose of MAX-SF-LEN is to ensure that\
    \ a PPPMUX payload does not\n   exceed the MTU size of any of the possible physical\
    \ links that the\n   tunnel can be associated with.  The value of MAX-SF-LEN should\
    \ be\n   less than or equal to the minimum of MRU-2 (maximum size of length\n\
    \   field) and 16,383 (14 bits) for all possible physical interfaces that\n  \
    \ the tunnel may be associated with.\n   The timer T provides an upper delay bound\
    \ for tunnel interfaces.\n   Timer T is reset whenever a multiplexed payload is\
    \ sent to the next\n   encapsulation layer.  The behavior of this timer is similar\
    \ to AAL2's\n   Timer_CU described in [I.363.2].  Each PPPMUX transmitter should\
    \ have\n   its own Timer T.\n   The optimal values for T will vary depending upon\
    \ the rate at which\n   payloads are expected to arrive at the multiplexer and\
    \ the delay\n   budget for the multiplexing function.  For voice applications,\
    \ the\n   value of T would typically be 5-10 milliseconds.\n"
- title: 2.3.2.  Tunneling Inefficiencies
  contents:
  - "2.3.2.  Tunneling Inefficiencies\n   To get reasonable bandwidth efficiency using\
    \ multiplexing within an\n   L2TP tunnel, multiple RTP streams should be active\
    \ between the source\n   and destination of an L2TP tunnel.\n   If the source\
    \ and destination of the L2TP tunnel are the same as the\n   source and destination\
    \ of the ECRTP sessions, then the source and\n   destination must have multiple\
    \ active RTP streams to get any benefit\n   from multiplexing.\n   Because of\
    \ this limitation, TCRTP is mostly useful for applications\n   where many RTP\
    \ sessions run between a pair of RTP endpoints.  The\n   number of simultaneous\
    \ RTP sessions required to reduce the header\n   overhead to the desired level\
    \ depends on the size of the L2TP header.\n   A smaller L2TP header will result\
    \ in fewer simultaneous RTP sessions\n   being required to produce bandwidth efficiencies\
    \ similar to CRTP.\n"
- title: '2.4.  Tunneling: L2TP'
  contents:
  - "2.4.  Tunneling: L2TP\n   L2TP tunnels should be used to tunnel the ECRTP payloads\
    \ end to end.\n   L2TP includes methods for tunneling messages used in PPP session\n\
    \   establishment, such as NCP.  This allows [IPCP-HC] to negotiate ECRTP\n  \
    \ compression/decompression parameters.\n"
- title: 2.4.1.  Tunneling and DiffServ
  contents:
  - "2.4.1.  Tunneling and DiffServ\n   RTP streams may be marked with Expedited Forwarding\
    \ (EF) bits, as\n   described in [EF-PHB].  When such a packet is tunneled, the\
    \ tunnel\n   header must also be marked for the same EF bits, as required by\n\
    \   [EF-PHB].  It is important to not mix EF and non-EF traffic in the\n   same\
    \ EF-marked multiplexed tunnel.\n"
- title: 2.5.  Encapsulation Formats
  contents:
  - "2.5.  Encapsulation Formats\n   The packet format for an RTP packet, compressed\
    \ with RTP header\n   compression as defined in ECRTP, is:\n        +---------+---------+-------------+-----------------------+\n\
    \        |         |   MSTI  |             |                       |\n       \
    \ | Context |         |     UDP     |                       |\n        |   ID\
    \    |   Link  |   Checksum  |       RTP Data        |\n        |         | Sequence|\
    \             |                       |\n        |  (1-2)  |   (1)   |     (0-2)\
    \   |                       |\n        +---------+---------+-------------+-----------------------+\n\
    \   The packet format of a multiplexed PPP packet as defined by [PPP-MUX]\n  \
    \ is:\n        +-------+---+------+-------+-----+   +---+------+-------+-----+\n\
    \        | Mux   |P L|      |       |     |   |P L|      |       |     |\n   \
    \     | PPP   |F X|Len1  |  PPP  |     |   |F X|LenN  |  PPP  |     |\n      \
    \  | Prot. |F T|      | Prot. |Info1| ~ |F T|      | Prot. |InfoN|\n        |\
    \ Field |          | Field1|     |   |          |FieldN |     |\n        | (1)\
    \   |1-2 octets| (0-2) |     |   |1-2 octets| (0-2) |     |\n        +-------+----------+-------+-----+\
    \   +----------+-------+-----+\n   The combined format used for TCRTP with a single\
    \ payload is all of\n   the above packets concatenated.  Here is an example with\
    \ one payload:\n        +------+-------+----------+-------+-------+-----+-------+----+\n\
    \        | IP   | Mux   |P L|      |       |       | MSTI|       |    |\n    \
    \    |header| PPP   |F X|Len1  |  PPP  |Context|     | UDP   |RTP |\n        |\
    \ (20) | Proto |F T|      | Proto |  ID   | Link| Cksum |Data|\n        |    \
    \  | Field |          | Field1|       | Seq |       |    |\n        |      | (1)\
    \   |1-2 octets| (0-2) | (1-2) | (1) | (0-2) |    |\n        +------+-------+----------+-------+-------+-----+-------+----+\n\
    \               |<------------- IP payload ------------------------->|\n     \
    \                  |<----- PPPmux payload --------------------->|\n   If the tunnel\
    \ contains multiplexed traffic, multiple \"PPPMux\n   payload\"s are transmitted\
    \ in one IP packet.\n"
- title: 3.  Bandwidth Efficiency
  contents:
  - "3.  Bandwidth Efficiency\n   The expected bandwidth efficiency attainable with\
    \ TCRTP depends upon\n   a number of factors.  These factors include multiplexing\
    \ gain,\n   expected packet loss rate across the network, and rates of change\
    \ of\n   specific fields within the IP and RTP headers.  This section also\n \
    \  describes how TCRTP significantly enhances bandwidth efficiency for\n   voice\
    \ over IP over ATM.\n"
- title: 3.1.  Multiplexing Gains
  contents:
  - "3.1.  Multiplexing Gains\n   Multiplexing reduces the overhead associated with\
    \ the layer 2 and\n   tunnel headers.  Increasing the number of CRTP payloads\
    \ combined into\n   one multiplexed PPP payload increases multiplexing gain. \
    \ As traffic\n   increases within a tunnel, more payloads are combined in one\n\
    \   multiplexed payload.  This will increase multiplexing gain.\n"
- title: 3.2.  Packet Loss Rate
  contents:
  - "3.2.  Packet Loss Rate\n   Loss of a multiplexed packet causes packet loss for\
    \ all of the flows\n   within the multiplexed packet.\n   When the expected loss\
    \ rate in a tunnel is relatively low (less than\n   perhaps 5%), the robust operation\
    \ (described in [ECRTP]) should be\n   sufficient to ensure delivery of state\
    \ changes.  This robust\n   operation is characterized by a parameter N, which\
    \ means that the\n   probability of more than N adjacent packets getting lost\
    \ on the\n   tunnel is small.\n   A value of N=1 will protect against the loss\
    \ of a single packet\n   within a compressed session, at the expense of bandwidth.\
    \  A value of\n   N=2 will protect against the loss of two packets in a row within\
    \ a\n   compressed session and so on.  Higher values of N have higher\n   bandwidth\
    \ penalties.\n   The optimal value of N will depend on the loss rate in the tunnel.\n\
    \   If the loss rate is high (above perhaps 5%), more advanced techniques\n  \
    \ must be employed.  Those techniques are beyond the scope of this\n   document.\n"
- title: 3.3.  Bandwidth Calculation for Voice and Video Applications
  contents:
  - "3.3.  Bandwidth Calculation for Voice and Video Applications\n   The following\
    \ formula uses the factors described above to model per-\n   flow bandwidth usage\
    \ for both voice and video applications.  These\n   variables are defined:\n \
    \  SOV-TCRTP, unit: octet.  Per-payload overhead of ECRTP and the\n          multiplexed\
    \ PPP header.  This value does not include\n          additional overhead for\
    \ updating IP ID or the RTP Time Stamp\n          fields (see [ECRTP] for details\
    \ on IP ID).  The value assumes\n          the use of the COMPRESSED_RTP payload\
    \ type.  It consists of 1\n          octet for the ECRTP context ID, 1 octet for\
    \ COMPRESSED_RTP\n          flags, 2 octets for the UDP checksum, 1 octet for\
    \ PPP protocol\n          ID, and 1 octet for the multiplexed PPP length field.\
    \  The\n          total is 6 octets.\n   POV-TCRTP, unit: octet.  Per-packet overhead\
    \ of tunneled ECRTP.  This\n          is the overhead for the tunnel header and\
    \ the multiplexed PPP\n          payload type.  This value is 20 octets for the\
    \ IP header, 4\n          octets for the L2TPv3 header and 1 octet for the multiplexed\n\
    \          PPP protocol ID.  The total is 25 octets.\n   TRANSMIT-LENGTH, unit:\
    \ milliseconds.  The average duration of a\n          transmission (such as a\
    \ talk spurt for voice streams).\n   SOV-TSTAMP, unit: octet.  Additional per-payload\
    \ overhead of the\n          COMPRESSED_UDP header that includes the absolute\
    \ time stamp\n          field.  This value includes 1 octet for the extra flags\
    \ field\n          in the COMPRESSED_UDP header and 4 octets for the absolute\n\
    \          time stamp, for a total of 5 octets.\n   SOV-IPID, unit: octet.  Additional\
    \ per-payload overhead of the\n          COMPRESSED_UDP header that includes the\
    \ absolute IPID field.\n          This value includes 2 octets for the absolute\
    \ IPID.  This\n          value also includes 1 octet for the extra flags field\
    \ in the\n          COMPRESSED_UDP header.  The total is 3 octets.\n   IPID-RATIO,\
    \ unit: integer values 0 or 1.  Indicates the frequency at\n          which IPID\
    \ will be updated by the compressor.  If IPID is\n          changing randomly\
    \ and thus always needs to be updated, then\n          the value is 1.  If IPID\
    \ is changing by a fixed constant\n          amount between payloads of a flow,\
    \ then IPID-RATIO will be 0.\n          The value of this variable does not consider\
    \ the IPID value at\n          the beginning of a voice or video transmission,\
    \ as that is\n          considered by the variable TRANSMIT-LENGTH.  The\n   \
    \       implementation of the sending IP stack and RTP application\n         \
    \ controls this behavior.  See Section 1.1.\n   NREP, unit: integer (usually a\
    \ number between 1 and 3).  This is the\n          number of times an update field\
    \ will be repeated in ECRTP\n          headers to increase the delivery rate between\
    \ the compressor\n          and decompressor.  For this example, we will assume\
    \ NREP=2.\n   PAYLOAD-SIZE, unit: octets.  The size of the RTP payload in octets.\n\
    \   MUX-SIZE, unit: count.  The number of PPP payloads multiplexed into\n    \
    \      one multiplexed PPP payload.\n   SAMPLE-PERIOD, unit: milliseconds.  The\
    \ average delay between\n          transmissions of voice or video payloads for\
    \ each flow in the\n          multiplex.  For example, in voice applications the\
    \ value of\n          this variable would be 10ms if all calls have a 10ms sample\n\
    \          period.\n   The formula is:\n     SOV-TOTAL = SOV-TCRTP + SOV-TSTAMP\
    \ * (NREP * SAMPLE-PERIOD /\n                 TRANSMIT-LENGTH) + SOV-IPID * IPID-RATIO\n\
    \     BANDWIDTH = ((PAYLOAD-SIZE + SOV-TOTAL + (POV-TCRTP / MUX-SIZE)) *\n   \
    \              8) / SAMPLE-PERIOD)\n   The results are:\n     BANDWIDTH, unit:\
    \ kilobits per second.  The average amount of\n               bandwidth used per\
    \ voice or video flow.\n     SOV-TOTAL = The total amount of per-payload overhead\
    \ associated\n                 with tunneled ECRTP.  It includes the per-payload\n\
    \                 overhead of ECRTP and PPP, timestamp update overhead,\n    \
    \             and IPID update overhead.\n"
- title: 3.3.1.  Voice Bandwidth Calculation Example
  contents:
  - "3.3.1.  Voice Bandwidth Calculation Example\n   To create an example for a voice\
    \ application using the above\n   formulas, we will assume the following usage\
    \ scenario.  Compressed\n   voice streams using G.729 compression with a 20 millisecond\n\
    \   packetization period.  In this scenario, VAD is enabled and the\n   average\
    \ talk spurt length is 1500 milliseconds.  The IPID field is\n   changing randomly\
    \ between payloads of streams.  There is enough\n   traffic in the tunnel to allow\
    \ 3 multiplexed payloads.  The following\n   values apply:\n        SAMPLE-PERIOD\
    \      = 20 milliseconds\n        TRANSMIT-LENGTH    = 1500 milliseconds\n   \
    \     IPID-RATIO         = 1\n        PAYLOAD-SIZE       = 20 octets\n       \
    \ MUX-SIZE           = 3\n   For this example, per call bandwidth is 16.4 kbits/sec.\
    \  Classical\n   CRTP over a single HDLC link using the same factors as above\
    \ yields\n   12.4 kbits/sec.\n   The effect of IPID can have a large effect on\
    \ per call bandwidth.  If\n   the above example is recalculated using an IPID-RATIO\
    \ of 0, then the\n   per call bandwidth is reduced to 13.8 kbits/sec.  Classical\
    \ CRTP over\n   a single HDLC link, using these same factors, yields 11.2 kbits/call.\n"
- title: 3.3.2.  Voice Bandwidth Comparison Table
  contents:
  - "3.3.2.  Voice Bandwidth Comparison Table\n   The bandwidth values are as follows\
    \ when using 5 simultaneous calls,\n   no voice activity detection (VAD), G.729\
    \ with 20ms packetization\n   interval, and not considering RTCP overhead:\n \
    \      Normal VoIP over PPP:            124 kbps\n       with classical CRTP on\
    \ a link:    50 kbps (savings: 59%)\n       with TCRTP over PPP:             \
    \ 62 kbps (savings: 50%)\n       with TCRTP over AAL5:             85 kbps (savings:\
    \ 31%)\n"
- title: 3.3.3.  Video Bandwidth Calculation Example
  contents:
  - "3.3.3.  Video Bandwidth Calculation Example\n   Since TCRTP can be used to save\
    \ bandwidth on any type of RTP\n   encapsulated flow, it can be used to save bandwidth\
    \ for video\n   applications.  This section documents an example of TCRTP-based\n\
    \   bandwidth savings for MPEG-2 encoded video.\n   To create an example for a\
    \ video application using the above\n   formulas, we will assume the following\
    \ usage scenario.  RTP\n   encapsulation of MPEG System and Transport Streams\
    \ is performed as\n   described in RFC 2250.  Frames for MPEG-2 encoded video\
    \ are sent\n   continuously, so the TRANSMIT-LENGTH variable in the bandwidth\n\
    \   formula is essentially infinite.  The IPID field is changing randomly\n  \
    \ between payloads of streams.  There is enough traffic in the tunnel\n   to allow\
    \ 3 multiplexed payloads.  The following values apply:\n        SAMPLE-PERIOD\
    \      = 2.8 milliseconds\n        TRANSMIT-LENGTH    = infinite\n        IPID-RATIO\
    \         = 1\n        PAYLOAD-SIZE       = 1316 octets\n        MUX-SIZE    \
    \       = 3\n   For this example, per flow bandwidth is 3.8 Mbits/sec.  MPEG video\n\
    \   with no header compression, using the same factors as above, yields\n   3.9\
    \ Mbits/sec.  While TCRTP does provide some bandwidth savings for\n   video, the\
    \ ratio of transmission headers to payload is so small that\n   the bandwidth\
    \ savings are insignificant.\n"
- title: 3.3.4.  TCRTP over ATM
  contents:
  - "3.3.4.  TCRTP over ATM\n   IP transport over AAL5 causes a quantizing effect\
    \ on bandwidth\n   utilization due to the packets always being multiples of ATM\
    \ cells.\n   For example, the payload size for G.729 using 10 millisecond\n  \
    \ packetization intervals is 10 octets.  This is much smaller than the\n   payload\
    \ size of an ATM cell (48 octets).  When classical CRTP [CRTP]\n   is used on\
    \ a link-by-link basis, the IP overhead to payload ratio is\n   quite good.  However,\
    \ AAL5 encapsulation and its cell padding always\n   force the minimum payload\
    \ size to be one ATM cell, which results in\n   poor bandwidth utilization.\n\
    \   Instead of wasting this padding, the multiplexing of TCRTP allows\n   this\
    \ previously wasted space in the ATM cell to contain useful data.\n   This is\
    \ one of the main reasons why multiplexing has such a large\n   effect on bandwidth\
    \ utilization with Voice over IP over ATM.\n   This multiplexing efficiency of\
    \ TCRTP is similar to AAL2 sub-cell\n   multiplexing described in [I.363.2]. \
    \ Unlike AAL2 sub-cell\n   multiplexing, however, TCRTP's multiplexing efficiency\
    \ isn't limited\n   to only ATM networks.\n"
- title: 3.3.5.  TCRTP over Non-ATM Networks
  contents:
  - "3.3.5.  TCRTP over Non-ATM Networks\n   When TCRTP is used with other layer 2\
    \ encapsulations that do not have\n   a minimum PDU size, the benefit of multiplexing\
    \ is not as great.\n   Depending upon the exact overhead of the layer 2 encapsulation,\
    \ the\n   benefit of multiplexing might be slightly better or worse than link-\n\
    \   by-link CRTP header compression.  The per-payload overhead of CRTP\n   tunneling\
    \ is either 4 or 6 octets.  If classical CRTP plus layer 2\n   overhead is greater\
    \ than this amount, TCRTP multiplexing will consume\n   less bandwidth than classical\
    \ CRTP when the outer IP header is\n   amortized over a large number of payloads.\n\
    \   The payload breakeven point can be determined by the following\n   formula:\n\
    \     POV-L2 * MUX-SIZE >= POV-L2 + POV-TUNNEL + POV-PPPMUX + SOV-PPPMUX\n   \
    \       * MUX-SIZE\n   Where:\n     POV-L2, unit: octet.  Layer 2 packet overhead:\
    \ 5 octets for HDLC\n          encapsulation\n     POV-TUNNEL, unit: octet.  Packet\
    \ overhead due to tunneling: 24\n          octets IP header and L2TPv3 header\n\
    \     POV-PPPMUX, unit: octet.  Packet overhead for the multiplexed PPP\n    \
    \      protocol ID: 1 octet\n     SOV-PPPMUX, unit: octet.  Per-payload overhead\
    \ of PPPMUX, which is\n          comprised of the payload length field and the\
    \ ECRTP protocol\n          ID.  The value of SOV-PPPMUX is typically 1, 2, or\
    \ 3.\n   If using HDLC as the layer 2 protocol, the breakeven point (using the\n\
    \   above formula) is when MUX-SIZE = 7.  Thus 7 voice or video flows\n   need\
    \ to be multiplexed to make TCRTP as bandwidth-efficient as link-\n   by-link\
    \ CRTP compression.\n"
- title: 4.  Example Implementation of TCRTP
  contents:
  - "4.  Example Implementation of TCRTP\n   This section describes an example implementation\
    \ of TCRTP.\n   Implementations of TCRTP may be done in many ways as long as the\n\
    \   requirements of the associated RFCs are met.\n   Here is the path an RTP packet\
    \ takes in this implementation:\n         +-------------------------------+  \
    \           ^\n         |          Application          |             |\n    \
    \     +-------------------------------+             |\n         |            \
    \  RTP              |             |\n         +-------------------------------+\
    \        Application and\n         |              UDP              |         \
    \   IP stack\n         +-------------------------------+             |\n     \
    \    |              IP               |             |\n         +-------------------------------+\
    \             V\n                         |\n                         |  IP forwarding\n\
    \                         |\n         +-------------------------------+      \
    \       ^\n         |             ECRTP             |             |\n        \
    \ +-------------------------------+             |\n         |            PPPMUX\
    \             |             |\n         +-------------------------------+    \
    \      Tunnel\n         |             PPP               |         Interface\n\
    \         +-------------------------------+             |\n         |        \
    \     L2TP              |             |\n         +-------------------------------+\
    \             |\n         |              IP               |             |\n  \
    \       +-------------------------------+             V\n                    \
    \     |\n                         |  IP forwarding\n                         |\n\
    \         +-------------------------------+             ^\n         |        \
    \    Layer 2            |             |\n         +-------------------------------+\
    \          Physical\n         |            Physical           |          Interface\n\
    \         +-------------------------------+             V\n   A protocol stack\
    \ is configured to create an L2TP tunnel interface to\n   a destination host.\
    \  The tunnel is configured to negotiate the PPP\n   connection (using NCP IPCP)\
    \ with ECRTP header compression and PPPMUX.\n   IP forwarding is configured to\
    \ route RTP packets to this tunnel.  The\n   destination UDP port number could\
    \ distinguish RTP packets from non-\n   RTP packets.\n   The transmitting application\
    \ gathers the RTP data from one source,\n   and formats an RTP packet.  Lower\
    \ level application layers add UDP\n   and IP headers to form a complete IP packet.\n\
    \   The RTP packets are routed to the tunnel interface where headers are\n   compressed,\
    \ payloads are multiplexed, and then the packets are\n   tunneled to the destination\
    \ host.\n   The operation of the receiving node is the same as the transmitting\n\
    \   node in reverse.\n"
- title: 4.1.  Suggested PPP and L2TP Negotiation for TCRTP
  contents:
  - "4.1.  Suggested PPP and L2TP Negotiation for TCRTP\n   This section describes\
    \ the necessary PPP and LT2P negotiations\n   necessary for establishing a PPP\
    \ connection and L2TP tunnel with L2TP\n   header compression.  The negotiation\
    \ is between two peers: Peer1 and\n   Peer2.\n"
- title: 4.2.  PPP Negotiation TCRTP
  contents:
  - "4.2.  PPP Negotiation TCRTP\n   The Point-to-Point Protocol is described in [PPP].\n"
- title: 4.2.1.  LCP Negotiation
  contents:
  - "4.2.1.  LCP Negotiation\n   Link Control Processing (LCP) is described in [PPP].\n"
- title: 4.2.1.1.  Link Establishment
  contents:
  - "4.2.1.1.  Link Establishment\n              Peer1                       Peer2\n\
    \              -----                       -----\n     Configure-Request (no options)\
    \ ->\n                                     <- Configure-Ack\n                \
    \                     <- Configure-Request (no options)\n     Configure-Ack  \
    \                ->\n"
- title: 4.2.1.2.  Link Tear Down
  contents:
  - "4.2.1.2.  Link Tear Down\n        Terminate-Request              ->\n       \
    \                                 <- Terminate-Ack\n"
- title: 4.2.2.  IPCP Negotiation
  contents:
  - "4.2.2.  IPCP Negotiation\n   The protocol exchange here is described in [IPHCOMP],\
    \ [PPP], and\n   [ECRTP].\n              Peer1                       Peer2\n \
    \             -----                       -----\n     Configure-Request      \
    \        ->\n       Options:\n       IP-Compression-Protocol\n         Use protocol\
    \ 0x61\n         and sub-parameters\n         as described in\n         [IPCP-HC]\
    \ and [ECRTP]\n                                     <- Configure-Ack\n       \
    \                              <- Configure-Request\n                        \
    \                  Options:\n                                          IP-Compression-Protocol\n\
    \                                            Use protocol 0x61\n             \
    \                               and sub-parameters\n                         \
    \                   as described in\n                                        \
    \    [IPCP-HC] and [ECRTP]\n     Configure-Ack                  ->\n"
- title: 4.3.  L2TP Negotiation
  contents:
  - "4.3.  L2TP Negotiation\n   L2TP is described in [L2TPv3].\n"
- title: 4.3.1.  Tunnel Establishment
  contents:
  - "4.3.1.  Tunnel Establishment\n              Peer1                       Peer2\n\
    \              -----                       -----\n     SCCRQ                 \
    \         ->\n       Mandatory AVP's:\n       Message Type\n       Protocol Version\n\
    \       Host Name\n       Framing Capabilities\n       Assigned Tunnel ID\n  \
    \                                   <- SCCRP\n                               \
    \           Mandatory AVP's:\n                                          Message\
    \ Type\n                                          Protocol Version\n         \
    \                                 Host Name\n                                \
    \          Framing Capabilities\n                                          Assigned\
    \ Tunnel ID\n     SCCCN                          ->\n     Mandatory AVP's:\n \
    \      Message Type\n                                     <- ZLB\n"
- title: 4.3.2.  Session Establishment
  contents:
  - "4.3.2.  Session Establishment\n              Peer1                       Peer2\n\
    \              -----                       -----\n     ICRQ                  \
    \         ->\n       Mandatory AVP's:\n       Message Type\n       Assigned Session\
    \ ID\n       Call Serial Number\n                                         <- ICRP\n\
    \                                          Mandatory AVP's:\n                \
    \                          Message Type\n                                    \
    \      Assigned Session ID\n     ICCN                           ->\n       Mandatory\
    \ AVP's:\n       Message Type\n       Tx (Connect Speed)\n       Framing Type\n\
    \                                     <- ZLB\n"
- title: 4.3.3.  Tunnel Tear Down
  contents:
  - "4.3.3.  Tunnel Tear Down\n              Peer1                       Peer2\n \
    \             -----                       -----\n     StopCCN                \
    \        ->\n       Mandatory AVP's:\n       Message Type\n       Assigned Tunnel\
    \ ID\n       Result Code\n                                     <- ZLB\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document describes a method for combining\
    \ several existing\n   protocols that implement compression, multiplexing, and\
    \ tunneling of\n   RTP streams.  Attacks on the component technologies of TCRTP\
    \ include\n   attacks on RTP/RTCP headers and payloads carried within a TCRTP\n\
    \   session, attacks on the compressed headers, attacks on the\n   multiplexing\
    \ layer, or attacks on the tunneling negotiation or\n   transport.  The security\
    \ issues associated individually with each of\n   those component technologies\
    \ are addressed in their respective\n   specifications, [ECRTP], [PPP-MUX], [L2TPv3],\
    \ along with the security\n   considerations for RTP itself [RTP].\n   However,\
    \ there may be additional security considerations arising from\n   the use of\
    \ these component technologies together.  For example, there\n   may be an increased\
    \ risk of unintended misdelivery of packets from\n   one stream in the multiplex\
    \ to another due to a protocol malfunction\n   or data error because the addressing\
    \ information is more condensed.\n   This is particularly true if the tunnel is\
    \ transmitted over a link-\n   layer protocol that allows delivery of packets\
    \ containing bit errors,\n   in combination with a tunnel transport layer option\
    \ that does not\n   checksum all of the payload.\n   The opportunity for malicious\
    \ misdirection may be increased, relative\n   to that for a single RTP stream\
    \ transported by itself, because\n   addressing information must be unencrypted\
    \ for the header compression\n   and multiplexing layers to function.\n   The\
    \ primary defense against misdelivery is to make the data unusable\n   to unintended\
    \ recipients through cryptographic techniques.  The basic\n   method for encryption\
    \ provided in the RTP specification [RTP] is not\n   suitable because it encrypts\
    \ the RTP and RTCP headers along with the\n   payload.  However, the RTP specification\
    \ also allows alternative\n   approaches to be defined in separate profile or\
    \ payload format\n   specifications wherein only the payload portion of the packet\
    \ would\n   be encrypted; therefore, header compression may be applied to the\n\
    \   encrypted packets.  One such profile, [SRTP], provides more\n   sophisticated\
    \ and complete methods for encryption and message\n   authentication than the\
    \ basic approach in [RTP].  Additional methods\n   may be developed in the future.\
    \  Appropriate cryptographic protection\n   should be incorporated into all TCRTP\
    \ applications.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   The authors would like to thank the authors of RFC 2508,\
    \ Stephen\n   Casner and Van Jacobson, and the authors of RFC 2507, Mikael\n \
    \  Degermark, Bjorn Nordgren, and Stephen Pink.\n   The authors would also like\
    \ to thank Dana Blair, Alex Tweedley, Paddy\n   Ruddy, Francois Le Faucheur, Tim\
    \ Gleeson, Matt Madison, Hussein\n   Salama, Mallik Tatipamula, Mike Thomas, Mark\
    \ Townsley, Andrew\n   Valencia, Herb Wildfeuer, J. Martin Borden, John Geevarghese,\
    \ and\n   Shoou Yiu.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [PPP-MUX] Pazhyannur, R., Ali, I., and C. Fox,\
    \ \"PPP Multiplexing\",\n             RFC 3153, August 2001.\n   [ECRTP]   Koren,\
    \ T., Casner, S., Geevarghese, J., Thompson, B., and\n             P. Ruddy, \"\
    Enhanced Compressed RTP (CRTP) for Links with\n             High Delay, Packet\
    \ Loss and Reordering\", RFC 3545, July\n             2003.\n   [CRTP]    Casner,\
    \ S. and V. Jacobson, \"Compressing IP/UDP/RTP Headers\n             for Low-Speed\
    \ Serial Links\", RFC 2508, February 1999.\n   [IPHCOMP] Degermark, M., Nordgren,\
    \ B., and S. Pink, \"IP Header\n             Compression\", RFC 2507, February\
    \ 1999.\n   [IPCP-HC] Engan, M., Casner, S., Bormann, C., and T. Koren, \"IP\n\
    \             Header Compression over PPP\", RFC 3544, July 2003.\n   [RTP]  \
    \   Schulzrinne, H.,  Casner, S., Frederick, R., and V.\n             Jacobson,\
    \ \"RTP: A Transport Protocol for Real-Time\n             Applications\", STD\
    \ 64, RFC 3550, July 2003.\n   [L2TPv3]  Lau, J., Townsley, M., and I. Goyret,\
    \ \"Layer Two Tunneling\n             Protocol - Version 3 (L2TPv3)\", RFC 3931,\
    \ March 2005.\n   [I.363.2] ITU-T, \"B-ISDN ATM Adaptation layer specification:\
    \ Type 2\n             AAL\", I.363.2, September 1997.\n   [EF-PHB]  Davie, B.,\
    \ Charny, A., Bennet, J.C., Benson, K., Le Boudec,\n             J., Courtney,\
    \ W., Davari, S., Firoiu, V., and D. Stiliadis,\n             \"An Expedited Forwarding\
    \ PHB (Per-Hop Behavior)\", RFC 3246,\n             March 2002.\n   [PPP]    \
    \ Simpson, W., \"The Point-to-Point Protocol (PPP)\", STD 51,\n             RFC\
    \ 1661, July 1994.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [SRTP]    Baugher, M., McGrew, D., Naslund,\
    \ M., Carrara, E., and K.\n             Norrman, \"The Secure Real-time Transport\
    \ Protocol (SRTP)\",\n             RFC 3711, March 2004.\n   [REORDER] G. Pelletier,\
    \ L. Jonsson, K. Sandlund, \"RObust Header\n             Compression (ROHC): ROHC\
    \ over Channels that can Reorder\n             Packets\", Work in Progress, June\
    \ 2004.\n   [ROHC]    Bormann, C., Burmeister, C., Degermark, M., Fukushima, H.,\n\
    \             Hannu, H., Jonsson, L-E., Hakenberg, R., Koren, T., Le, K.,\n  \
    \           Liu, Z., Martensson, A., Miyazaki, A., Svanbro, K., Wiebke,\n    \
    \         T., Yoshimura, T., and H. Zheng, \"RObust Header Compression\n     \
    \        (ROHC): Framework and four profiles: RTP, UDP, ESP, and\n           \
    \  uncompressed \", RFC 3095, July 2001.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Bruce Thompson\n   170 West Tasman Drive\n   San Jose,\
    \ CA  95134-1706\n   United States of America\n   Phone: +1 408 527 0446\n   EMail:\
    \ brucet@cisco.com\n   Tmima Koren\n   170 West Tasman Drive\n   San Jose, CA\
    \  95134-1706\n   United States of America\n   Phone: +1 408 527 6169\n   EMail:\
    \ tmima@cisco.com\n   Dan Wing\n   170 West Tasman Drive\n   San Jose, CA  95134-1706\n\
    \   United States of America\n   EMail: dwing@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
