- contents:
  - '         Registration Data Access Protocol (RDAP) Query Format

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes uniform patterns to construct HTTP URLs
    that\n   may be used to retrieve registration information from registries\n   (including
    both Regional Internet Registries (RIRs) and Domain Name\n   Registries (DNRs))
    using \"RESTful\" web access patterns.  These\n   uniform patterns define the
    query syntax for the Registration Data\n   Access Protocol (RDAP).\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7482.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n   2.  Conventions Used in This Document . . . . . . . . . . .
    . . .   4\n     2.1.  Acronyms and Abbreviations  . . . . . . . . . . . . . .
    .   4\n   3.  Path Segment Specification  . . . . . . . . . . . . . . . . .   4\n
    \    3.1.  Lookup Path Segment Specification . . . . . . . . . . . .   5\n       3.1.1.
    \ IP Network Path Segment Specification . . . . . . . .   6\n       3.1.2.  Autonomous
    System Path Segment Specification  . . . .   7\n       3.1.3.  Domain Path Segment
    Specification . . . . . . . . . .   7\n       3.1.4.  Nameserver Path Segment
    Specification . . . . . . . .   8\n       3.1.5.  Entity Path Segment Specification
    . . . . . . . . . .   9\n       3.1.6.  Help Path Segment Specification . . .
    . . . . . . . .   9\n     3.2.  Search Path Segment Specification . . . . . .
    . . . . . .   9\n       3.2.1.  Domain Search . . . . . . . . . . . . . . . .
    . . . .  10\n       3.2.2.  Nameserver Search . . . . . . . . . . . . . . . .
    . .  11\n       3.2.3.  Entity Search . . . . . . . . . . . . . . . . . . . .
    \ 12\n   4.  Query Processing  . . . . . . . . . . . . . . . . . . . . . .  13\n
    \    4.1.  Partial String Searching  . . . . . . . . . . . . . . . .  13\n     4.2.
    \ Associated Records  . . . . . . . . . . . . . . . . . . .  14\n   5.  Extensibility
    . . . . . . . . . . . . . . . . . . . . . . . .  14\n   6.  Internationalization
    Considerations . . . . . . . . . . . . .  15\n     6.1.  Character Encoding Considerations
    . . . . . . . . . . . .  15\n   7.  Security Considerations . . . . . . . . .
    . . . . . . . . . .  16\n   8.  References  . . . . . . . . . . . . . . . . .
    . . . . . . . .  17\n     8.1.  Normative References  . . . . . . . . . . . .
    . . . . . .  17\n     8.2.  Informative References  . . . . . . . . . . . . .
    . . . .  19\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .
    . .  19\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .
    \ 20\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document describes a specification for querying registration\n
    \  data using a RESTful web service and uniform query patterns.  The\n   service
    is implemented using the Hypertext Transfer Protocol (HTTP)\n   [RFC7230] and
    the conventions described in [RFC7480].  These uniform\n   patterns define the
    query syntax for the Registration Data Access\n   Protocol (RDAP).\n   The protocol
    described in this specification is intended to address\n   deficiencies with the
    WHOIS protocol [RFC3912] that have been\n   identified over time, including:\n
    \  o  lack of standardized command structures;\n   o  lack of standardized output
    and error structures;\n   o  lack of support for internationalization and localization;
    and\n   o  lack of support for user identification, authentication, and\n      access
    control.\n   The patterns described in this document purposefully do not encompass\n
    \  all of the methods employed in the WHOIS and other RESTful web\n   services
    used by the RIRs and DNRs.  The intent of the patterns\n   described here are
    to enable queries of:\n   o  networks by IP address;\n   o  Autonomous System
    (AS) numbers by number;\n   o  reverse DNS metadata by domain;\n   o  nameservers
    by name;\n   o  registrars by name; and\n   o  entities (such as contacts) by
    identifier.\n   Server implementations are free to support only a subset of these\n
    \  features depending on local requirements.  Servers MUST return an\n   HTTP
    501 (Not Implemented) [RFC7231] response to inform clients of\n   unsupported
    query types.  It is also envisioned that each registry\n   will continue to maintain
    WHOIS and/or other RESTful web services\n   specific to their needs and those
    of their constituencies, and the\n   information retrieved through the patterns
    described here may\n   reference such services.\n   Likewise, future IETF standards
    may add additional patterns for\n   additional query types.  A simple pattern
    namespacing scheme is\n   described in Section 5 to accommodate custom extensions
    that will not\n   interfere with the patterns defined in this document or patterns\n
    \  defined in future IETF standards.\n   WHOIS services, in general, are read-only
    services.  Therefore, URL\n   [RFC3986] patterns specified in this document are
    only applicable to\n   the HTTP [RFC7231] GET and HEAD methods.\n   This document
    does not describe the results or entities returned from\n   issuing the described
    URLs with an HTTP GET.  The specification of\n   these entities is described in
    [RFC7483].\n   Additionally, resource management, provisioning, and update functions\n
    \  are out of scope for this document.  Registries have various and\n   divergent
    methods covering these functions, and it is unlikely a\n   uniform approach is
    needed for interoperability.\n   HTTP contains mechanisms for servers to authenticate
    clients and for\n   clients to authenticate servers (from which authorization
    schemes may\n   be built), so such mechanisms are not described in this document.\n
    \  Policy, provisioning, and processing of authentication and\n   authorization
    are out of scope for this document as deployments will\n   have to make choices
    based on local criteria.  Supported\n   authentication mechanisms are described
    in [RFC7481].\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in [RFC2119].\n"
  - contents:
    - "2.1.  Acronyms and Abbreviations\n      IDN: Internationalized Domain Name\n
      \     IDNA: Internationalized Domain Names in Applications, a protocol\n      for
      the handling of IDNs.\n      DNR: Domain Name Registry\n      NFC: Unicode Normalization
      Form C [Unicode-UAX15]\n      NFKC: Unicode Normalization Form KC [Unicode-UAX15]\n
      \     RDAP: Registration Data Access Protocol\n      REST: Representational
      State Transfer.  The term was first\n      described in a doctoral dissertation
      [REST].\n      RESTful: An adjective that describes a service using HTTP and
      the\n      principles of REST.\n      RIR: Regional Internet Registry\n"
    title: 2.1.  Acronyms and Abbreviations
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  Path Segment Specification\n   The base URLs used to construct RDAP queries
    are maintained in an\n   IANA registry described in [RFC7484].  Queries are formed
    by\n   retrieving an appropriate base URL from the registry and appending a\n
    \  path segment specified in either Sections 3.1 or 3.2.  Generally, a\n   registry
    or other service provider will provide a base URL that\n   identifies the protocol,
    host, and port, and this will be used as a\n   base URL that the complete URL
    is resolved against, as per Section 5\n   of RFC 3986 [RFC3986].  For example,
    if the base URL is\n   \"https://example.com/rdap/\", all RDAP query URLs will
    begin with\n   \"https://example.com/rdap/\".\n   The bootstrap registry does
    not contain information for query objects\n   that are not part of a global namespace,
    including entities and help.\n   A base URL for an associated object is required
    to construct a\n   complete query.\n   For entities, a base URL is retrieved for
    the service (domain,\n   address, etc.) associated with a given entity.  The query
    URL is\n   constructed by concatenating the base URL to the entity path segment\n
    \  specified in either Sections 3.1.5 or 3.2.3.\n   For help, a base URL is retrieved
    for any service (domain, address,\n   etc.) for which additional information is
    required.  The query URL is\n   constructed by concatenating the base URL to the
    help path segment\n   specified in Section 3.1.6.\n"
  - contents:
    - "3.1.  Lookup Path Segment Specification\n   A simple lookup to determine if
      an object exists (or not) without\n   returning RDAP-encoded results can be
      performed using the HTTP HEAD\n   method as described in Section 4.1 of [RFC7480].\n
      \  The resource type path segments for exact match lookup are:\n   o  'ip':
      Used to identify IP networks and associated data referenced\n      using either
      an IPv4 or IPv6 address.\n   o  'autnum': Used to identify Autonomous System
      number registrations\n      and associated data referenced using an asplain
      Autonomous System\n      number.\n   o  'domain': Used to identify reverse DNS
      (RIR) or domain name (DNR)\n      information and associated data referenced
      using a fully qualified\n      domain name.\n   o  'nameserver': Used to identify
      a nameserver information query\n      using a host name.\n   o  'entity': Used
      to identify an entity information query using a\n      string identifier.\n"
    - contents:
      - "3.1.1.  IP Network Path Segment Specification\n   Syntax: ip/<IP address>
        or ip/<CIDR prefix>/<CIDR length>\n   Queries for information about IP networks
        are of the form /ip/XXX/...\n   or /ip/XXX/YY/...  where the path segment
        following 'ip' is either an\n   IPv4 dotted decimal or IPv6 [RFC5952] address
        (i.e., XXX) or an IPv4\n   or IPv6 Classless Inter-domain Routing (CIDR) [RFC4632]
        notation\n   address block (i.e., XXX/YY).  Semantically, the simpler form
        using\n   the address can be thought of as a CIDR block with a bitmask length\n
        \  of 32 for IPv4 and a bitmask length of 128 for IPv6.  A given\n   specific
        address or CIDR may fall within multiple IP networks in a\n   hierarchy of
        networks; therefore, this query targets the \"most-\n   specific\" or smallest
        IP network that completely encompasses it in a\n   hierarchy of IP networks.\n
        \  The IPv4 and IPv6 address formats supported in this query are\n   described
        in Section 3.2.2 of RFC 3986 [RFC3986] as IPv4address and\n   IPv6address
        ABNF definitions.  Any valid IPv6 text address format\n   [RFC4291] can be
        used.  This includes IPv6 addresses written using\n   with or without compressed
        zeros and IPv6 addresses containing\n   embedded IPv4 addresses.  The rules
        to write a text representation of\n   an IPv6 address [RFC5952] are RECOMMENDED.
        \ However, the zone_id\n   [RFC4007] is not appropriate in this context; therefore,
        the\n   corresponding syntax extension in RFC 6874 [RFC6874] MUST NOT be\n
        \  used, and servers are to ignore it if possible.\n   For example, the following
        URL would be used to find information for\n   the most specific network containing
        192.0.2.0:\n   https://example.com/rdap/ip/192.0.2.0\n   The following URL
        would be used to find information for the most\n   specific network containing
        192.0.2.0/24:\n   https://example.com/rdap/ip/192.0.2.0/24\n   The following
        URL would be used to find information for the most\n   specific network containing
        2001:db8::0:\n   https://example.com/rdap/ip/2001:db8::0\n"
      title: 3.1.1.  IP Network Path Segment Specification
    - contents:
      - "3.1.2.  Autonomous System Path Segment Specification\n   Syntax: autnum/<autonomous
        system number>\n   Queries for information regarding Autonomous System number\n
        \  registrations are of the form /autnum/XXX/... where XXX is an asplain\n
        \  Autonomous System number [RFC5396].  In some registries, registration\n
        \  of Autonomous System numbers is done on an individual number basis,\n   while
        other registries may register blocks of Autonomous System\n   numbers.  The
        semantics of this query are such that if a number falls\n   within a range
        of registered blocks, the target of the query is the\n   block registration
        and that individual number registrations are\n   considered a block of numbers
        with a size of 1.\n   For example, the following URL would be used to find
        information\n   describing Autonomous System number 12 (a number within a
        range of\n   registered blocks):\n   https://example.com/rdap/autnum/12\n
        \  The following URL would be used to find information describing 4-byte\n
        \  Autonomous System number 65538:\n   https://example.com/rdap/autnum/65538\n"
      title: 3.1.2.  Autonomous System Path Segment Specification
    - contents:
      - "3.1.3.  Domain Path Segment Specification\n   Syntax: domain/<domain name>\n
        \  Queries for domain information are of the form /domain/XXXX/...,\n   where
        XXXX is a fully qualified (relative to the root) domain name\n   (as specified
        in [RFC0952] and [RFC1123]) in either the in-addr.arpa\n   or ip6.arpa zones
        (for RIRs) or a fully qualified domain name in a\n   zone administered by
        the server operator (for DNRs).\n   Internationalized Domain Names (IDNs)
        represented in either A-label\n   or U-label format [RFC5890] are also valid
        domain names.  See\n   Section 6.1 for information on character encoding for
        the U-label\n   format.\n   IDNs SHOULD NOT be represented as a mixture of
        A-labels and U-labels;\n   that is, internationalized labels in an IDN SHOULD
        be either all\n   A-labels or all U-labels.  It is possible for an RDAP client
        to\n   assemble a query string from multiple independent data sources.  Such\n
        \  a client might not be able to perform conversions between A-labels\n   and
        U-labels.  An RDAP server that receives a query string with a\n   mixture
        of A-labels and U-labels MAY convert all the U-labels to\n   A-labels, perform
        IDNA processing, and proceed with exact-match\n   lookup.  In such cases,
        the response to be returned to the query\n   source may not match the input
        from the query source.  Alternatively,\n   the server MAY refuse to process
        the query.\n   The server MAY perform the match using either the A-label or
        U-label\n   form.  Using one consistent form for matching every label is likely\n
        \  to be more reliable.\n   The following URL would be used to find information
        describing the\n   zone serving the network 192.0.2/24:\n   https://example.com/rdap/domain/2.0.192.in-addr.arpa\n
        \  The following URL would be used to find information describing the\n   zone
        serving the network 2001:db8:1::/48:\n   https://example.com/rdap/domain/1.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa\n
        \  The following URL would be used to find information for the\n   blah.example.com
        domain name:\n   https://example.com/rdap/domain/blah.example.com\n   The
        following URL would be used to find information for the\n   xn--fo-5ja.example
        IDN:\n   https://example.com/rdap/domain/xn--fo-5ja.example\n"
      title: 3.1.3.  Domain Path Segment Specification
    - contents:
      - "3.1.4.  Nameserver Path Segment Specification\n   Syntax: nameserver/<nameserver
        name>\n   The <nameserver name> parameter represents a fully qualified host\n
        \  name as specified in [RFC0952] and [RFC1123].  Internationalized\n   names
        represented in either A-label or U-label format [RFC5890] are\n   also valid
        nameserver names.  IDN processing for nameserver names\n   uses the domain
        name processing instructions specified in\n   Section 3.1.3.  See Section
        6.1 for information on character encoding\n   for the U-label format.\n   The
        following URL would be used to find information for the\n   ns1.example.com
        nameserver:\n   https://example.com/rdap/nameserver/ns1.example.com\n   The
        following URL would be used to find information for the\n   ns1.xn--fo-5ja.example
        nameserver:\n   https://example.com/rdap/nameserver/ns1.xn--fo-5ja.example\n"
      title: 3.1.4.  Nameserver Path Segment Specification
    - contents:
      - "3.1.5.  Entity Path Segment Specification\n   Syntax: entity/<handle>\n   The
        <handle> parameter represents an entity (such as a contact,\n   registrant,
        or registrar) identifier whose syntax is specific to the\n   registration
        provider.  For example, for some DNRs, contact\n   identifiers are specified
        in [RFC5730] and [RFC5733].\n   The following URL would be used to find information
        for the entity\n   associated with handle XXXX:\n   https://example.com/rdap/entity/XXXX\n"
      title: 3.1.5.  Entity Path Segment Specification
    - contents:
      - "3.1.6.  Help Path Segment Specification\n   Syntax: help\n   The help path
        segment can be used to request helpful information\n   (command syntax, terms
        of service, privacy policy, rate-limiting\n   policy, supported authentication
        methods, supported extensions,\n   technical support contact, etc.) from an
        RDAP server.  The response\n   to \"help\" should provide basic information
        that a client needs to\n   successfully use the service.  The following URL
        would be used to\n   return \"help\" information:\n   https://example.com/rdap/help\n"
      title: 3.1.6.  Help Path Segment Specification
    title: 3.1.  Lookup Path Segment Specification
  - contents:
    - "3.2.  Search Path Segment Specification\n   Pattern matching semantics are
      described in Section 4.1.  The\n   resource type path segments for search are:\n
      \  o  'domains': Used to identify a domain name information search using\n      a
      pattern to match a fully qualified domain name.\n   o  'nameservers': Used to
      identify a nameserver information search\n      using a pattern to match a host
      name.\n   o  'entities': Used to identify an entity information search using
      a\n      pattern to match a string identifier.\n   RDAP search path segments
      are formed using a concatenation of the\n   plural form of the object being
      searched for and an HTTP query\n   string.  The HTTP query string is formed
      using a concatenation of the\n   question mark character ('?', US-ASCII value
      0x003F), the JSON object\n   value associated with the object being searched
      for, the equal sign\n   character ('=', US-ASCII value 0x003D), and the search
      pattern.\n   Search pattern query processing is described more fully in Section
      4.\n   For the domain, nameserver, and entity objects described in this\n   document,
      the plural object forms are \"domains\", \"nameservers\", and\n   \"entities\".\n
      \  Detailed results can be retrieved using the HTTP GET method and the\n   path
      segments specified here.\n"
    - contents:
      - "3.2.1.  Domain Search\n   Syntax: domains?name=<domain search pattern>\n
        \  Syntax: domains?nsLdhName=<domain search pattern>\n   Syntax: domains?nsIp=<domain
        search pattern>\n   Searches for domain information by name are specified
        using this\n   form:\n   domains?name=XXXX\n   XXXX is a search pattern representing
        a domain name in \"letters,\n   digits, hyphen\" (LDH) format [RFC5890] in
        a zone administered by the\n   server operator of a DNR.  The following URL
        would be used to find\n   DNR information for domain names matching the \"example*.com\"
        pattern:\n   https://example.com/rdap/domains?name=example*.com\n   IDNs in
        U-label format [RFC5890] can also be used as search patterns\n   (see Section
        4).  Searches for these names are of the form\n   /domains?name=XXXX, where
        XXXX is a search pattern representing a\n   domain name in U-label format
        [RFC5890].  See Section 6.1 for\n   information on character encoding for
        the U-label format.\n   Searches for domain information by nameserver name
        are specified\n   using this form:\n   domains?nsLdhName=YYYY\n   YYYY is
        a search pattern representing a host name in \"letters,\n   digits, hyphen\"
        format [RFC5890] in a zone administered by the server\n   operator of a DNR.
        \ The following URL would be used to search for\n   domains delegated to nameservers
        matching the \"ns1.example*.com\"\n   pattern:\n   https://example.com/rdap/domains?nsLdhName=ns1.example*.com\n
        \  Searches for domain information by nameserver IP address are\n   specified
        using this form:\n   domains?nsIp=ZZZZ\n   ZZZZ is a search pattern representing
        an IPv4 [RFC1166] or IPv6\n   [RFC5952] address.  The following URL would
        be used to search for\n   domains that have been delegated to nameservers
        that resolve to the\n   \"192.0.2.0\" address:\n   https://example.com/rdap/domains?nsIp=192.0.2.0\n"
      title: 3.2.1.  Domain Search
    - contents:
      - "3.2.2.  Nameserver Search\n   Syntax: nameservers?name=<nameserver search
        pattern>\n   Syntax: nameservers?ip=<nameserver search pattern>\n   Searches
        for nameserver information by nameserver name are specified\n   using this
        form:\n   nameservers?name=XXXX\n   XXXX is a search pattern representing
        a host name in \"letters,\n   digits, hyphen\" format [RFC5890] in a zone
        administered by the server\n   operator of a DNR.  The following URL would
        be used to find DNR\n   information for nameserver names matching the \"ns1.example*.com\"\n
        \  pattern:\n   https://example.com/rdap/nameservers?name=ns1.example*.com\n
        \  Internationalized nameserver names in U-label format [RFC5890] can\n   also
        be used as search patterns (see Section 4).  Searches for these\n   names
        are of the form /nameservers?name=XXXX, where XXXX is a search\n   pattern
        representing a nameserver name in U-label format [RFC5890].\n   See Section
        6.1 for information on character encoding for the U-label\n   format.\n   Searches
        for nameserver information by nameserver IP address are\n   specified using
        this form:\n   nameservers?ip=YYYY\n   YYYY is a search pattern representing
        an IPv4 [RFC1166] or IPv6\n   [RFC5952] address.  The following URL would
        be used to search for\n   nameserver names that resolve to the \"192.0.2.0\"
        address:\n   https://example.com/rdap/nameservers?ip=192.0.2.0\n"
      title: 3.2.2.  Nameserver Search
    - contents:
      - "3.2.3.  Entity Search\n   Syntax: entities?fn=<entity name search pattern>\n
        \  Syntax: entities?handle=<entity handle search pattern>\n   Searches for
        entity information by name are specified using this\n   form:\n   entities?fn=XXXX\n
        \  XXXX is a search pattern representing the \"FN\" property of an entity\n
        \  (such as a contact, registrant, or registrar) name as specified in\n   Section
        5.1 of [RFC7483].  The following URL would be used to find\n   information
        for entity names matching the \"Bobby Joe*\" pattern:\n   https://example.com/rdap/entities?fn=Bobby%20Joe*\n
        \  Searches for entity information by handle are specified using this\n   form:\n
        \  entities?handle=XXXX\n   XXXX is a search pattern representing an entity
        (such as a contact,\n   registrant, or registrar) identifier whose syntax
        is specific to the\n   registration provider.  The following URL would be
        used to find\n   information for entity handles matching the \"CID-40*\" pattern:\n
        \  https://example.com/rdap/entities?handle=CID-40*\n   URLs MUST be properly
        encoded according to the rules of [RFC3986].\n   In the example above, \"Bobby
        Joe*\" is encoded to \"Bobby%20Joe*\".\n"
      title: 3.2.3.  Entity Search
    title: 3.2.  Search Path Segment Specification
  title: 3.  Path Segment Specification
- contents:
  - "4.  Query Processing\n   Servers indicate the success or failure of query processing
    by\n   returning an appropriate HTTP response code to the client.  Response\n
    \  codes not specifically identified in this document are described in\n   [RFC7480].\n"
  - contents:
    - "4.1.  Partial String Searching\n   Partial string searching uses the asterisk
      ('*', US-ASCII value\n   0x002A) character to match zero or more trailing characters.
      \ A\n   character string representing multiple domain name labels MAY be\n   concatenated
      to the end of the search pattern to limit the scope of\n   the search.  For
      example, the search pattern \"exam*\" will match\n   \"example.com\" and \"example.net\".
      \ The search pattern \"exam*.com\" will\n   match \"example.com\".  If an asterisk
      appears in a search string, any\n   label that contains the non-asterisk characters
      in sequence plus zero\n   or more characters in sequence in place of the asterisk
      would match.\n   Additional pattern matching processing is beyond the scope
      of this\n   specification.\n   If a server receives a search request but cannot
      process the request\n   because it does not support a particular style of partial
      match\n   searching, it SHOULD return an HTTP 422 (Unprocessable Entity)\n   [RFC4918]
      response.  When returning a 422 error, the server MAY also\n   return an error
      response body as specified in Section 6 of [RFC7483]\n   if the requested media
      type is one that is specified in [RFC7480].\n   Partial matching is not feasible
      across combinations of Unicode\n   characters because Unicode characters can
      be combined with each\n   other.  Servers SHOULD NOT partially match combinations
      of Unicode\n   characters where a legal combination is possible.  It should
      be\n   noted, though, that it may not always be possible to detect cases\n   where
      a character could have been combined with another character,\n   but was not,
      because characters can be combined in many different\n   ways.\n   Clients should
      avoid submitting a partial match search of Unicode\n   characters where a Unicode
      character may be legally combined with\n   another Unicode character or characters.
      \ Partial match searches with\n   incomplete combinations of characters where
      a character must be\n   combined with another character or characters are invalid.
      \ Partial\n   match searches with characters that may be combined with another\n
      \  character or characters are to be considered non-combined characters\n   (that
      is, if character x may be combined with character y but\n   character y is not
      submitted in the search string, then character x\n   is a complete character
      and no combinations of character x are to be\n   searched).\n"
    title: 4.1.  Partial String Searching
  - contents:
    - "4.2.  Associated Records\n   Conceptually, any query-matching record in a server's
      database might\n   be a member of a set of related records, related in some
      fashion as\n   defined by the server -- for example, variants of an IDN.  The
      entire\n   set ought to be considered as candidates for inclusion when\n   constructing
      the response.  However, the construction of the final\n   response needs to
      be mindful of privacy and other data-releasing\n   policies when assembling
      the RDAP response set.\n   Note too that due to the nature of searching, there
      may be a list of\n   query-matching records.  Each one of those is subject to
      being a\n   member of a set as described in the previous paragraph.  What is\n
      \  ultimately returned in a response will be the union of all the sets\n   that
      has been filtered by whatever policies are in place.\n   Note that this model
      includes arrangements for associated names,\n   including those that are linked
      by policy mechanisms and names bound\n   together for some other purposes.  Note
      also that returning\n   information that was not explicitly selected by an exact-match\n
      \  lookup, including additional names that match a relatively fuzzy\n   search
      as well as lists of names that are linked together, may cause\n   privacy issues.\n
      \  Note that there might not be a single, static information return\n   policy
      that applies to all clients equally.  Client identity and\n   associated authorizations
      can be a relevant factor in determining how\n   broad the response set will
      be for any particular query.\n"
    title: 4.2.  Associated Records
  title: 4.  Query Processing
- contents:
  - "5.  Extensibility\n   This document describes path segment specifications for
    a limited\n   number of objects commonly registered in both RIRs and DNRs.  It
    does\n   not attempt to describe path segments for all of the objects\n   registered
    in all registries.  Custom path segments can be created\n   for objects not specified
    here using the process described in\n   Section 6 of \"HTTP Usage in the Registration
    Data Access Protocol\n   (RDAP)\" [RFC7480].\n   Custom path segments can be created
    by prefixing the segment with a\n   unique identifier followed by an underscore
    character (0x5F).  For\n   example, a custom entity path segment could be created
    by prefixing\n   \"entity\" with \"custom_\", producing \"custom_entity\".  Servers
    MUST\n   return an appropriate failure status code for a request with an\n   unrecognized
    path segment.\n"
  title: 5.  Extensibility
- contents:
  - "6.  Internationalization Considerations\n   There is value in supporting the
    ability to submit either a U-label\n   (Unicode form of an IDN label) or an A-label
    (US-ASCII form of an IDN\n   label) as a query argument to an RDAP service.  Clients
    capable of\n   processing non-US-ASCII characters may prefer a U-label since this
    is\n   more visually recognizable and familiar than A-label strings, but\n   clients
    using programmatic interfaces might find it easier to submit\n   and display A-labels
    if they are unable to input U-labels with their\n   keyboard configuration.  Both
    query forms are acceptable.\n   Internationalized domain and nameserver names
    can contain character\n   variants and variant labels as described in [RFC4290].
    \ Clients that\n   support queries for internationalized domain and nameserver
    names\n   MUST accept service provider responses that describe variants as\n   specified
    in \"JSON Responses for the Registration Data Access\n   Protocol (RDAP)\" [RFC7483].\n"
  - contents:
    - "6.1.  Character Encoding Considerations\n   Servers can expect to receive search
      patterns from clients that\n   contain character strings encoded in different
      forms supported by\n   HTTP.  It is entirely possible to apply filters and normalization\n
      \  rules to search patterns prior to making character comparisons, but\n   this
      type of processing is more typically needed to determine the\n   validity of
      registered strings than to match patterns.\n   An RDAP client submitting a query
      string containing non-US-ASCII\n   characters converts such strings into Unicode
      in UTF-8 encoding.  It\n   then performs any local case mapping deemed necessary.
      \ Strings are\n   normalized using Normalization Form C (NFC) [Unicode-UAX15];
      note\n   that clients might not be able to do this reliably.  UTF-8 encoded\n
      \  strings are then appropriately percent-encoded [RFC3986] in the query\n   URL.\n
      \  After parsing any percent-encoding, an RDAP server treats each query\n   string
      as Unicode in UTF-8 encoding.  If a string is not valid UTF-8,\n   the server
      can immediately stop processing the query and return an\n   HTTP 400 (Bad Request)
      response.\n   When processing queries, there is a difference in handling DNS
      names,\n   including those with putative U-labels, and everything else.  DNS\n
      \  names are treated according to the DNS matching rules as described in\n   Section
      3.1 of RFC 1035 [RFC1035] for Non-Reserved LDH (NR-LDH)\n   labels and the matching
      rules described in Section 5.4 of RFC 5891\n   [RFC5891] for U-labels.  Matching
      of DNS names proceeds one label at\n   a time because it is possible for a combination
      of U-labels and\n   NR-LDH labels to be found in a single domain or host name.
      \ The\n   determination of whether a label is a U-label or an NR-LDH label is\n
      \  based on whether the label contains any characters outside of the\n   US-ASCII
      letters, digits, or hyphen (the so-called LDH rule).\n   For everything else,
      servers map fullwidth and halfwidth characters\n   to their decomposition equivalents.
      \ Servers convert strings to the\n   same coded character set of the target
      data that is to be looked up\n   or searched, and each string is normalized
      using the same\n   normalization that was used on the target data.  In general,
      storage\n   of strings as Unicode is RECOMMENDED.  For the purposes of\n   comparison,
      Normalization Form KC (NFKC) [Unicode-UAX15] with case\n   folding is used to
      maximize predictability and the number of matches.\n   Note the use of case-folded
      NFKC as opposed to NFC in this case.\n"
    title: 6.1.  Character Encoding Considerations
  title: 6.  Internationalization Considerations
- contents:
  - "7.  Security Considerations\n   Security services for the operations specified
    in this document are\n   described in \"Security Services for the Registration
    Data Access\n   Protocol (RDAP)\" [RFC7481].\n   Search functionality typically
    requires more server resources (such\n   as memory, CPU cycles, and network bandwidth)
    when compared to basic\n   lookup functionality.  This increases the risk of server
    resource\n   exhaustion and subsequent denial of service due to abuse.  This risk\n
    \  can be mitigated by developing and implementing controls to restrict\n   search
    functionality to identified and authorized clients.  If those\n   clients behave
    badly, their search privileges can be suspended or\n   revoked.  Rate limiting
    as described in Section 5.5 of \"HTTP Usage in\n   the Registration Data Access
    Protocol (RDAP)\" [RFC7480] can also be\n   used to control the rate of received
    search requests.  Server\n   operators can also reduce their risk by restricting
    the amount of\n   information returned in response to a search request.\n   Search
    functionality also increases the privacy risk of disclosing\n   object relationships
    that might not otherwise be obvious.  For\n   example, a search that returns IDN
    variants [RFC6927] that do not\n   explicitly match a client-provided search pattern
    can disclose\n   information about registered domain names that might not be otherwise\n
    \  available.  Implementers need to consider the policy and privacy\n   implications
    of returning information that was not explicitly\n   requested.\n   Note that
    there might not be a single, static information return\n   policy that applies
    to all clients equally.  Client identity and\n   associated authorizations can
    be a relevant factor in determining how\n   broad the response set will be for
    any particular query.\n"
  title: 7.  Security Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC0952]  Harrenstien, K., Stahl, M., and E.
      Feinler, \"DoD Internet\n              host table specification\", RFC 952,
      October 1985,\n              <http://www.rfc-editor.org/info/rfc952>.\n   [RFC1035]
      \ Mockapetris, P., \"Domain names - implementation and\n              specification\",
      STD 13, RFC 1035, November 1987,\n              <http://www.rfc-editor.org/info/rfc1035>.\n
      \  [RFC1123]  Braden, R., Ed., \"Requirements for Internet Hosts -\n              Application
      and Support\", STD 3, RFC 1123, October 1989,\n              <http://www.rfc-editor.org/info/rfc1123>.\n
      \  [RFC1166]  Kirkpatrick, S., Stahl, M., and M. Recker, \"Internet\n              numbers\",
      RFC 1166, July 1990,\n              <http://www.rfc-editor.org/info/rfc1166>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource
      Identifier (URI): Generic Syntax\", STD 66, RFC\n              3986, January
      2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC4291]
      \ Hinden, R. and S. Deering, \"IP Version 6 Addressing\n              Architecture\",
      RFC 4291, February 2006,\n              <http://www.rfc-editor.org/info/rfc4291>.\n
      \  [RFC4632]  Fuller, V. and T. Li, \"Classless Inter-domain Routing\n              (CIDR):
      The Internet Address Assignment and Aggregation\n              Plan\", BCP 122,
      RFC 4632, August 2006,\n              <http://www.rfc-editor.org/info/rfc4632>.\n
      \  [RFC4918]  Dusseault, L., Ed., \"HTTP Extensions for Web Distributed\n              Authoring
      and Versioning (WebDAV)\", RFC 4918, June 2007,\n              <http://www.rfc-editor.org/info/rfc4918>.\n
      \  [RFC5396]  Huston, G. and G. Michaelson, \"Textual Representation of\n              Autonomous
      System (AS) Numbers\", RFC 5396, December 2008,\n              <http://www.rfc-editor.org/info/rfc5396>.\n
      \  [RFC5730]  Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\",\n
      \             STD 69, RFC 5730, August 2009,\n              <http://www.rfc-editor.org/info/rfc5730>.\n
      \  [RFC5733]  Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\n              Contact
      Mapping\", STD 69, RFC 5733, August 2009,\n              <http://www.rfc-editor.org/info/rfc5733>.\n
      \  [RFC5890]  Klensin, J., \"Internationalized Domain Names for\n              Applications
      (IDNA): Definitions and Document Framework\",\n              RFC 5890, August
      2010,\n              <http://www.rfc-editor.org/info/rfc5890>.\n   [RFC5891]
      \ Klensin, J., \"Internationalized Domain Names in\n              Applications
      (IDNA): Protocol\", RFC 5891, August 2010,\n              <http://www.rfc-editor.org/info/rfc5891>.\n
      \  [RFC5952]  Kawamura, S. and M. Kawashima, \"A Recommendation for IPv6\n              Address
      Text Representation\", RFC 5952, August 2010,\n              <http://www.rfc-editor.org/info/rfc5952>.\n
      \  [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n
      \             Protocol (HTTP/1.1): Message Syntax and Routing\", RFC\n              7230,
      June 2014, <http://www.rfc-editor.org/info/rfc7230>.\n   [RFC7231]  Fielding,
      R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1):
      Semantics and Content\", RFC 7231,\n              June 2014, <http://www.rfc-editor.org/info/rfc7231>.\n
      \  [RFC7480]  Newton, A., Ellacott, B., and N. Kong, \"HTTP Usage in the\n              Registration
      Data Access Protocol (RDAP)\", RFC 7480, March\n              2015, <http://www.rfc-editor.org/info/rfC7480>.\n
      \  [RFC7481]  Hollenbeck, S. and N. Kong, \"Security Services for the\n              Registration
      Data Access Protocol (RDAP)\", RFC 7481, March\n              2015, <http://www.rfc-editor.org/info/rfc7481>.\n
      \  [RFC7483]  Newton, A. and S. Hollenbeck, \"JSON Responses for the\n              Registration
      Data Access Protocol (RDAP)\", RFC 7483, March\n              2015, <http://www.rfc-editor.org/info/rfc7483>.\n
      \  [RFC7484]  Blanchet, M., \"Finding the Authoritative Registration Data\n
      \             (RDAP) Service\", RFC 7484, March 2015,\n              <http://www.rfc-editor.org/info/rfc7484>.\n
      \  [Unicode-UAX15]\n              The Unicode Consortium, \"Unicode Standard
      Annex #15:\n              Unicode Normalization Forms\", September 2013,\n              <http://www.unicode.org/reports/tr15/>.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [REST]     Fielding, R., \"Architectural Styles
      and the Design of\n              Network-based Software Architectures\", Ph.D.
      Dissertation,\n              University of California, Irvine, 2000,\n              <http://www.ics.uci.edu/~fielding/pubs/dissertation/\n
      \             fielding_dissertation.pdf>.\n   [RFC3912]  Daigle, L., \"WHOIS
      Protocol Specification\", RFC 3912,\n              September 2004, <http://www.rfc-editor.org/info/rfc3912>.\n
      \  [RFC4007]  Deering, S., Haberman, B., Jinmei, T., Nordmark, E., and\n              B.
      Zill, \"IPv6 Scoped Address Architecture\", RFC 4007,\n              March 2005,
      <http://www.rfc-editor.org/info/rfc4007>.\n   [RFC4290]  Klensin, J., \"Suggested
      Practices for Registration of\n              Internationalized Domain Names
      (IDN)\", RFC 4290, December\n              2005, <http://www.rfc-editor.org/info/rfc4290>.\n
      \  [RFC6874]  Carpenter, B., Cheshire, S., and R. Hinden, \"Representing\n              IPv6
      Zone Identifiers in Address Literals and Uniform\n              Resource Identifiers\",
      RFC 6874, February 2013,\n              <http://www.rfc-editor.org/info/rfc6874>.\n
      \  [RFC6927]  Levine, J. and P. Hoffman, \"Variants in Second-Level Names\n
      \             Registered in Top-Level Domains\", RFC 6927, May 2013,\n              <http://www.rfc-editor.org/info/rfc6927>.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Acknowledgements\n   This document is derived from original work on RIR query
    formats\n   developed by Byron J. Ellacott of APNIC, Arturo L. Servin of LACNIC,\n
    \  Kaveh Ranjbar of the RIPE NCC, and Andrew L. Newton of ARIN.\n   Additionally,
    this document incorporates DNR query formats originally\n   described by Francisco
    Arias and Steve Sheng of ICANN and Scott\n   Hollenbeck of Verisign Labs.\n   The
    authors would like to acknowledge the following individuals for\n   their contributions
    to this document: Francisco Arias, Marc Blanchet,\n   Ernie Dainow, Jean-Philippe
    Dionne, Byron J. Ellacott, Behnam\n   Esfahbod, John Klensin, John Levine, Edward
    Lewis, Mark Nottingham,\n   Kaveh Ranjbar, Arturo L. Servin, Steve Sheng, and
    Andrew Sullivan.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Andrew Lee Newton\n   American Registry for Internet Numbers\n
    \  3635 Concorde Parkway\n   Chantilly, VA  20151\n   United States\n   EMail:
    andy@arin.net\n   URI:   http://www.arin.net\n   Scott Hollenbeck\n   Verisign
    Labs\n   12061 Bluemont Way\n   Reston, VA  20190\n   United States\n   EMail:
    shollenbeck@verisign.com\n   URI:   http://www.verisignlabs.com/\n"
  title: Authors' Addresses
