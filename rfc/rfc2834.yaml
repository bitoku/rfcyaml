- title: __initial_text__
  contents:
  - '                  ARP and IP Broadcast over HIPPI-800

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a method for resolving IP addresses to ANSI\n\
    \   High-Performance Parallel Interface (HIPPI) hardware addresses and\n   for\
    \ emulating IP broadcast in a logical IP subnet (LIS) as a direct\n   extension\
    \ of HARP. This memo defines a HARP that will interoperate\n   between HIPPI-800\
    \ and HIPPI-6400 (also known as Gigabyte System\n   Network, GSN). This document\
    \ (when combined with RFC-2067 \"IP over\n   HIPPI\") obsoletes RFC-1374.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . .   2\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . .\
    \   3\n   3.  Definitions . . . . . . . . . . . . . . . . . . . . . . .   3\n\
    \       3.1 Global Concepts . . . . . . . . . . . . . . . . . . .   3\n      \
    \ 3.2 Glossary  . . . . . . . . . . . . . . . . . . . . . .   3\n   4.  IP Subnetwork\
    \ Configuration . . . . . . . . . . . . . . .   5\n       4.1 Background  . .\
    \ . . . . . . . . . . . . . . . . . . .   5\n       4.2 HIPPI LIS Requirements\
    \  . . . . . . . . . . . . . . .   6\n   5.  HIPPI Address Resolution Protocol\
    \ - HARP  . . . . . . . .   7\n       5.1 HARP Algorithm  . . . . . . . . . .\
    \ . . . . . . . . .   8\n           5.1.1 Selecting the authoritative HARP service\
    \  . . .   8\n           5.1.2 HARP registration phase . . . . . . . . . . . .\
    \   9\n           5.1.3 HARP operational phase  . . . . . . . . . . . .  10\n\
    \   5.2 HARP Client Operational Requirements  . . . . . . . . . .  11\n      \
    \ 5.3 Receiving Unknown HARP Messages . . . . . . . . . . .  12\n       5.4 HARP\
    \ Server Operational Requirements  . . . . . . . .  12\n       5.5 HARP and Permanent\
    \ ARP Table Entries  . . . . . . . .  14\n       5.6 HARP Table Aging  . . . .\
    \ . . . . . . . . . . . . . .  14\n   6.  HARP Message Encoding . . . . . . .\
    \ . . . . . . . . . . .  15\n       6.1 HIPPI-LE Header of HARP Messages  . .\
    \ . . . . . . . .  15\n           6.1.1 IEEE 802.2 LLC  . . . . . . . . . . .\
    \ . . . . .  16\n           6.1.2 SNAP  . . . . . . . . . . . . . . . . . . .\
    \ . .  16\n           6.1.3 Diagram . . . . . . . . . . . . . . . . . . . .  17\n\
    \       6.2 HIPPI Hardware Address Formats and Requirements . . .  18\n      \
    \     6.2.1 48-bit Universal LAN MAC Addresses  . . . . . .  18\n       6.3 HARP\
    \ and InHARP Message Formats . . . . . . . . . . .  19\n           6.3.1 Example\
    \ Message encodings . . . . . . . . . . .  22\n           6.3.2 HARP_NAK message\
    \ format . . . . . . . . . . . .  22\n           6.3.3 Combined HIPPI-LE and HARP\
    \ message addresses  .  22\n   7.  Broadcast and Multicast . . . . . . . . . .\
    \ . . . . . . .  23\n       7.1 Protocol for an IP Broadcast Emulation Server\
    \ - PIBES  23\n       7.2 IP Broadcast Address  . . . . . . . . . . . . . . .\
    \ .  24\n       7.3 IP Multicast Address  . . . . . . . . . . . . . . . .  24\n\
    \       7.4 A Note on Broadcast Emulation Performance . . . . . .  24\n   8. \
    \ HARP for Scheduled Transfer Protocol  . . . . . . . . . .  25\n   9.  Discovery\
    \ of One's Own Switch Address . . . . . . . . . .  25\n   10. Security Considerations\
    \ . . . . . . . . . . . . . . . . .  26\n   11. Open Issues . . . . . . . . .\
    \ . . . . . . . . . . . . . .  26\n   12. HARP Examples . . . . . . . . . . .\
    \ . . . . . . . . . . .  26\n       12.1 Registration Phase of Client Y on Non-broadcast\
    \ HW .  27\n       12.2 Registration Phase of Client Y on Broadcast Hardware \
    \ 28\n       12.3 Operational Phase (phase II) . . . . . . . . . . . .  28\n \
    \           12.3.1 Standard successful HARP_Resolve example  . .  29\n       \
    \     12.3.2 Standard non-successful HARP_Resolve example   30\n   13. References\
    \  . . . . . . . . . . . . . . . . . . . . . . .  31\n   14. Acknowledgments .\
    \ . . . . . . . . . . . . . . . . . . . .  32\n   15. Changes from RFC-1374 .\
    \ . . . . . . . . . . . . . . . . .  32\n   16. Author's Address  . . . . . .\
    \ . . . . . . . . . . . . . .  33\n   17. Full Copyright Statement  . . . . .\
    \ . . . . . . . . . . .  34\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The ANSI High-Performance Parallel Interface (HIPPI) is a\
    \ dual\n   simplex data channel.   HIPPI can send and receive data\n   simultaneously\
    \ at 800 or 1600 megabits per second. Between 1987 and\n   1997, the ANSI X3T11.1\
    \ HIPPI working group (now known as NCITS T11.1)\n   Standardized five documents\
    \ that bear on the use of HIPPI as a\n   network interface.  They cover the physical\
    \ and electrical\n   specification (HIPPI-PH [1]), the framing of a stream of\
    \ bytes\n   (HIPPI-FP [2]), encapsulation of IEEE 802.2 LLC (HIPPI-LE [3]), the\n\
    \   behavior of a physical layer switch (HIPPI-SC [4]) and the physical-\n   level\
    \ and optical specification (HIPPI-Serial [5]).  HIPPI-LE also\n   implies the\
    \ encapsulation of Internet Protocol[5].  The reader should\n   be familiar with\
    \ the ANSI HIPPI documents. Approved ANSI NCITS\n   standards are available from\
    \ ANSI (http://www.ansi.org). The working\n   documents of the T11.1 working group\
    \ may be obtained from the T11 web\n   page (http://www.t11.org/).\n   HIPPI switches\
    \ can be used to connect a variety of computers and\n   peripheral equipment for\
    \ many purposes, but the working group stopped\n   short of describing their use\
    \ as Local Area Networks.  RFC-2067 [15]\n   describes the encapsulation of IP\
    \ over HIPPI-800. This memo takes up\n   where the working group and RFC-2067\
    \ [15] left off and defines\n   address resolution and LIS IP broadcast emulation\
    \ for HIPPI-800\n   networks.\n   While investigating possible solutions for HARP\
    \ it became evident\n   that IP broadcast could easily be emulated for both HIPPI-800\
    \ and\n   HIPPI-6400 hardware types. This is useful since HIPPI switches are\n\
    \   not required to implement broadcast but many standard networking\n   protocols\
    \ rely on broadcast.  This memo therefore further addresses\n   the emulation\
    \ of LIS IP broadcast as an extension of HARP.\n"
- title: 2 Terminology
  contents:
  - "2 Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC-2119\
    \ [18].\n"
- title: 3. Definitions
  contents:
  - '3. Definitions

    '
- title: 3.1 Global concepts used
  contents:
  - "3.1 Global concepts used\n   In the following discussion, the terms \"requester\"\
    \ and \"target\" are\n   used to identify the port initiating the address resolution\
    \ request\n   and the port whose address it wishes to discover, respectively.\
    \  If\n   not all switches in the LIS support broadcast then there will be a\n\
    \   HARP server providing the address resolution service and it will be\n   the\
    \ source of the reply. If on the other hand all switches support\n   broadcast\
    \ then the source address of a reply will be the target's\n   target address.\n\
    \   Values are decimal unless otherwise noted. Formatting follows IEEE\n   802.1A\
    \ canonical bit order and and HIPPI-FP bit and byte order.\n"
- title: 3.2 Glossary
  contents:
  - "3.2 Glossary\n   Broadcast\n   A distribution mode which transmits a message\
    \ to all ports.\n   Particularly also the port sending the message.\n   Classical/Conventional\n\
    \   Both terms are used to refer to networks such as Ethernet, FDDI, and\n   other\
    \ 802 LAN types, as distinct from HIPPI-SC LANs.\n   Destination\n   The HIPPI\
    \ port that receives data from a HIPPI Source.\n   HARP\n   HARP describes the\
    \ whole set of HIPPI address resolution encodings\n   and algorithms defined in\
    \ this memo. HARP is a combination and\n   adaptation of the Internet Address\
    \ Resolution Protocol (ARP) RFC-826\n   [13] and Inverse ARP (InARP) [7] (see\
    \ section 5). HARP also describes\n   the HIPPI specific version of ARP [10] (i.e.\
    \ the protocol and the\n   HIPPI specific encoding).\n   HARP table\n   Each host\
    \ has a HARP table which contains the IP to hardware address\n   mapping of IP\
    \ members.\n   HIPPI-Serial\n   An implementation of HIPPI in serial fashion on\
    \ coaxial cable or\n   optical fiber. (see [5])\n   HRAL\n   The HARP Request\
    \ Address List.  A list of ULAs to which HARP messages\n   are sent when resolving\
    \ names to addresses (see section 4.2).\n   Hardware (HW) address\n   The hardware\
    \ address of a port consisting of an I-Field and an\n   optional ULA (see section\
    \ 6.2). Note: the term port as used in this\n   document refers to a HIPPI port\
    \ and is roughly equivalent to the term\n   \"interface\" as commonly used in\
    \ other IP documents.\n   Host\n   An entity, usually a computer system, that\
    \ may have one or more HIPPI\n   ports and which may serve as a client or a HARP\
    \ server.\n   Port\n   An entity consisting of one HIPPI Source/Destination dual\
    \ simplex\n   pair that is connected by parallel or serial HIPPI to a HIPPI-SC\n\
    \   switch and that transmits and receives IP datagrams.\n   PIBES\n   The Protocol\
    \ for Internet Broadcast Emulation Server (see section 7).\n   Switch Address\n\
    \   A value used as the address of a port on a HIPPI-SC network.  It is\n   transmitted\
    \ in the I-field.  HIPPI-SC switches map Switch Addresses\n   to physical switch\
    \ port numbers. The switch address is extended with\n   a mode byte to form an\
    \ I-Field (see [4] and 6.2.2)\n   Source\n   The HIPPI port that generates data\
    \ to send to a HIPPI Destination.\n   Universal LAN MAC Address (ULA)\n   A 48-bit\
    \ globally unique address, administered by the IEEE, assigned\n   to each port\
    \ on an Ethernet, FDDI, 802 network, or HIPPI-SC LAN.\n"
- title: 4.  IP Subnetwork Configuration
  contents:
  - '4.  IP Subnetwork Configuration

    '
- title: 4.1 Background
  contents:
  - "4.1 Background\n   ARP (address resolution protocol) as defined in [12] was meant\
    \ to\n   work on the 'local' cable. This definition gives the ARP protocol a\n\
    \   local logical IP subnet (LIS) scope. In the LIS scenario, each\n   separate\
    \ administrative entity configures its hosts and routers\n   within the LIS. Each\
    \ LIS operates and communicates independently of\n   other LIS's on the same HIPPI\
    \ network.\n   HARP has LIS scope only and serves all ports in the LIS.\n   Communication\
    \ to ports located outside of the local LIS is usually\n   provided via an IP\
    \ router. This router is a HIPPI port attached to\n   the HIPPI network that is\
    \ configured as a member of one or more\n   LIS's. This configuration MAY result\
    \ in a number of disjoint LIS's\n   operating over the same HIPPI network. Using\
    \ this model, ports of\n   different IP subnets SHOULD communicate via an intermediate\
    \ IP router\n   even though it may be possible to open a direct HIPPI connection\n\
    \   between the two IP members over the HIPPI network. This is a\n   consequence\
    \ of using IP and choosing to have multiple LIS's on the\n   same HIPPI fabric.\n\
    \   By default, the HARP method detailed in section 5 and the classical\n   LIS\
    \ routing model MUST be available to any IP member client in the\n   LIS.\n"
- title: 4.2 HIPPI LIS Requirements
  contents:
  - "4.2 HIPPI LIS Requirements\n   The requirement for IP members (hosts, routers)\
    \ operating in a HIPPI\n   LIS configuration is:\n   o  All members of the LIS\
    \ SHALL have the same IP network/subnet\n      address and address mask [6].\n\
    \   The following list identifies the set of HIPPI-specific parameters\n   that\
    \ MUST be implemented in each IP station connected to the HIPPI\n   network:\n\
    \   o  HIPPI Hardware Address:\n      The HIPPI hardware address of an individual\
    \ IP port MUST contain\n      the port's Switch Address (see section 9). The address\
    \ SHOULD also\n      contain a non-zero ULA address. If there is no ULA then that\
    \ field\n      MUST be zero.\n   o  HARP Request Address List (HRAL):\n      The\
    \ HRAL is an ordered list of two or more addresses identifying\n      the address\
    \ resolution service(s). All HARP clients MUST be\n      configured identically,\
    \ i.e. all ports MUST have the same\n      addresses(es) in the HRAL.\n      The\
    \ HRAL MUST contain at least two HIPPI HW addresses identifying\n      the individual\
    \ HARP service(s) that have authoritative\n      responsibility for resolving\
    \ HARP requests of all IP members\n      located within the LIS.\n      By default\
    \ the first address MUST be the reserved address for\n      broadcast, i.e. the\
    \ address for \"IP traffic conventionally\n      directed to the IEEE 802.1 broadcast\
    \ address: 0xFE1\" [4]. The ULA\n      for this HARP service entry SHALL be FF:FF:FF:FF:FF:FF.\n\
    \      It is REQUIRED that the second address be the address for\n      \"Messages\
    \ pertaining to (the) ... address  resolution requests:\n      0xFE0\" [4]. The\
    \ ULA for this HARP server entry is\n      00:00:00:00:00:00.\n"
- title: 'Therefore, the HRAL entries are sorted in the following order:'
  contents:
  - "Therefore, the HRAL entries are sorted in the following order:\n  1st **  : broadcast\
    \ address            (0x07000FE1 FF:FF:FF:FF:FF:FF),\n  2nd **  : official HARP\
    \ server address (0x07000FE0 00:00:00:00:00:00),\n  3rd & on: any additional HARP\
    \ server addresses will be sorted in\n            decreasing order of the 12bit\
    \ destination switch\n            address portion of their I-Field (see section\
    \ 6.2).\n  ** REQUIRED\n   Within the restrictions mentioned above and in Section\
    \ 6.2.2, local\n   administration choose address(es) for the additional HARP services\n\
    \   which they will put into the HRAL.\n   An example of such a list:\n      1st\
    \ entry: 0x07000FE1 FF:FF:FF:FF:FF:FF\n      2nd entry: 0x07000FE0 00:00:00:00:00:00\n\
    \      3rd entry: 0x07000001 <Alternate-HARP-server-ula>\n      ...\n   Manual\
    \ configuration of the addresses and address lists presented in\n   this section\
    \ is implementation dependent and beyond the scope of this\n   memo.\n"
- title: 5. HIPPI Address Resolution Protocol - HARP
  contents:
  - "5. HIPPI Address Resolution Protocol - HARP\n   Address resolution within the\
    \ HIPPI LIS SHALL make use of the HIPPI\n   Address Resolution Protocol (HARP)\
    \ and the Inverse HIPPI Address\n   Resolution Protocol (InHARP). HARP provides\
    \ the same functionality as\n   the Internet Address Resolution Protocol (ARP).\
    \ HARP is based on ARP\n   which is defined in RFC-826 [13]. Knowing the Internet\
    \ address,\n   conventional networks use ARP to discover another port's hardware\n\
    \   address. HARP presented in this section further specifies the\n   combination\
    \ of the original protocol definitions to form a coherent\n   address resolution\
    \ service that is independent of the hardware's\n   broadcast capability.\n  \
    \ InHARP is based on the original Inverse ARP (InARP) protocol\n   presented in\
    \ [7].  Knowing its hardware address, InARP is used to\n   discover the other\
    \ party's Internet address.\n   This memo further REQUIRES the PIBES (see section\
    \ 7 below) extension\n   to the HARP protocol, guaranteeing broadcast service\
    \ to upper layer\n   protocols like IP.\n   Internet addresses are assigned independent\
    \ of ULAs and switch\n   addresses.  Before using HARP, each port MUST know its\
    \ IP and its\n   hardware addresses. The ULA is optional but is RECOMMENDED if\n\
    \   bridging to conventional networks is desired.\n"
- title: 5.1 HARP Algorithm
  contents:
  - "5.1 HARP Algorithm\n   This section defines the behavior and requirements for\
    \ HARP\n   implementations on both broadcast and non-broadcast capable HIPPI-SC\n\
    \   networks. HARP creates a table in each port which maps the IP address\n  \
    \ of each port to a hardware address, so that when an application\n   requests\
    \ a connection to a remote port by its IP address, the\n   hardware address can\
    \ be determined, a correct HIPPI-LE header can be\n   built, and a connection\
    \ to the port can be established using the\n   correct Switch Address in the I-field.\n\
    \   HARP is a two phase protocol. The first phase is the registration\n   phase\
    \ and the second phase is the operational phase. In the\n   registration phase\
    \ the port detects if it is connected to broadcast\n   hardware or not.  The InHARP\
    \ protocol is used in the registration\n   phase.  In case of non-broadcast capable\
    \ hardware, the InHARP\n   Protocol will register and establish a table entry\
    \ with the server.\n   The operational phase works much like conventional ARP\
    \ with the\n   exception of the message format.\n"
- title: 5.1.1 Selecting the authoritative HARP service
  contents:
  - "5.1.1 Selecting the authoritative HARP service\n   Within the HIPPI LIS, there\
    \ SHALL be an authoritative HARP service.\n   At each point in time there is only\
    \ one authoritative HARP service.\n   To select the authoritative HARP service,\
    \ each port needs to\n   determine if it is connected to a broadcast network.\n\
    \   The port SHALL send an InHARP_REQUEST to the first address in its\n   HRAL\
    \ (0x07000FE1 FF:FF:FF:FF:FF:FF). If the port sees its own\n   InHARP_REQUEST,\
    \ then it is connected to a broadcast capable network.\n   In this case, the rest\
    \ of the HRAL is ignored and the authoritative\n   HARP service is the broadcast\
    \ entry.\n   If the port is connected to a non-broadcast capable network, then\
    \ the\n   port SHALL send the InHARP_REQUEST to all of the remaining entries in\n\
    \   the HRAL. Every address which sends an InHARP_REPLY is considered to\n   be\
    \ a responsive HARP server. The authoritative HARP service SHALL be\n   the HARP\
    \ server which appears first in the HRAL.\n   The sequence of the HRAL is only\
    \ important for deciding which address\n   will be the authoritative one. On a\
    \ non-broadcast network, the port\n   is REQUIRED to keep \"registered\" with\
    \ all HARP server addresses in\n   the HRAL (NOTE: not the broadcast address since\
    \ it is not a HARP\n   server address). If for instance the authoritative HARP\
    \ service is\n   non-responsive,  then the port will consider the next address\
    \ in the\n   HRAL as a candidate for the authoritative address and send an\n \
    \  InHARP_REQUEST.\n   The authoritative HARP server SHOULD be considered non-responsive\n\
    \   when it has failed to reply to: (1) one or more registration requests\n  \
    \ by the client (see section 5.1.2 and 5.2), (2) any two HARP_REQUESTs\n   in\
    \ the last 120 seconds or (3) if an external agent has detected\n   failure of\
    \ the authoritative HARP server. The details of such an\n   external agent and\
    \ its interaction with the HARP client are beyond\n   the scope of this document.\
    \ Should an authoritative HARP server\n   become non-responsive, then the registration\
    \ process SHOULD be\n   restarted. Alternative methods for choosing an authoritative\
    \ HARP\n   service are not prohibited.\n"
- title: 5.1.2 HARP registration phase
  contents:
  - "5.1.2 HARP registration phase\n   HARP clients SHALL initiate the registration\
    \ phase by sending an\n   InHARP_REQUEST message using the addresses in the HRAL\
    \ in order. The\n   client SHALL terminate the registration phase and transition\
    \ into the\n   operational phase, either when it receives its own InHARP_REQUEST\
    \ or\n   when it receives an InHARP_REPLY from at least one of the HARP\n   servers\
    \ and when it has determined the authoritative HARP service as\n   described in\
    \ section 5.1.1.\n   When ports are initiated they send an InHARP_REQUEST to the\n\
    \   authoritative address as described in section 5.1.2. The first\n   address\
    \ to be tried will be the broadcast address \"0x07000FE1\n   FF:FF:FF:FF:FF:FF\"\
    . There are two outcomes:\n   1. The port sees its own InHARP_REQUEST: then the\
    \ port is connected\n      to a broadcast capable network. The first address becomes\
    \ and\n      remains the authoritative address for the HARP service.\n   2. The\
    \ port does not receive its InHARP_REQUEST: then the port is\n      connected\
    \ to a non-broadcast capable network.\n   In the second case, the port SHALL choose\
    \ the next address in the\n   HRAL as a candidate for a authoritative address\
    \ and send an\n   InHARP_REQUEST to that address: (0x07000FE0 00:00:00:00:00:00).\n\
    \   o  If the port receives its own message, then the port itself is the\n   \
    \   HARP server and the port is REQUIRED to provide broadcast services\n     \
    \ using the PIBES (see section 7).\n   o  If the port receives an InHARP_REPLY,\
    \ then it is a HARP client and\n      not a HARP server.\n   In both cases, the\
    \ current candidate address becomes the\n   authoritative HARP service address.\n\
    \   If the client determines it is connected to a non-broadcast capable\n   network\
    \ then the client SHALL continue to retry each non-broadcast\n   HARP server address\
    \ in the HRAL at least once every 5 seconds until\n   one of these two termination\
    \ criteria are met for each address.\n   InHARP is an application of the InARP\
    \ protocol for a purpose not\n   originally intended.  The purpose is to accomplish\
    \ registration of\n   port IP address mappings with a HARP server if one exists\
    \ or detect\n   hardware broadcast capability.\n   If the HIPPI-SC LAN supports\
    \ broadcast, then the client will see its\n   own InHARP_REQUEST message and SHALL\
    \ complete the registration phase.\n   The client SHOULD further note that it\
    \ is connected to a broadcast\n   capable network and use this information for\
    \ aging the HARP server\n   entry and for IP broadcast emulation as specified\
    \ in sections 5.4 and\n   5.6 respectively.\n   If the client doesn't see its\
    \ own InHARP_REQUEST, then it SHALL await\n   an InHARP_REPLY before completing\
    \ the registration phase. This will\n   also provide the client with the protocol\
    \ address by which the HARP\n   server is addressable.  This will be the case\
    \ when the client happens\n   to be  connected to a non-broadcast capable HIPPI-SC\
    \ network.\n"
- title: 5.1.3 HARP operational phase
  contents:
  - "5.1.3 HARP operational phase\n   Once a HARP client has completed its registration\
    \ phase it enters the\n   operational phase. In this phase of the protocol, the\
    \ HARP client\n   SHALL gain and refresh its own HARP table which contains the\
    \ IP to HW\n   address mapping of IP members by sending HARP_REQUESTS to the\n\
    \   authoritative address in the HRAL and receiving HARP_REPLYs. The\n   client\
    \ is fully operational during the operational phase.\n   In the operational phase,\
    \ the client's behavior for requesting HARP\n   resolution is the same for broadcast\
    \ or non-broadcast networks.\n   The target of an address resolution request updates\
    \ its address\n   mapping tables with any new information it can find in the request.\n\
    \   If it is the target port it SHALL formulate and send a reply message.\n  \
    \ A port is the target of an address resolution request if at least ONE\n   of\
    \ the following statements is true of the request:\n   1. The port's IP address\
    \ is in the target protocol address field\n      (ar$tpa) of the HARP message.\n\
    \   2. The port's ULA (if non-zero), is in the ULA part of the Target\n      Hardware\
    \ Address field (ar$tha) of the message.\n   3. The port's switch address is in\
    \ the Target Switch Address field of\n      Target Hardware Address field (ar$tha)\
    \ of the message (see section\n      6.2.2).\n   4. The port is a HARP server.\n\
    \   NOTE: It is RECOMMENDED that all HARP servers run on a ports which\n   each\
    \ have a non-zero ULA.\n"
- title: 5.2 HARP Client Operational Requirements
  contents:
  - "5.2 HARP Client Operational Requirements\n   The HARP client is responsible for\
    \ contacting the HARP server(s) to\n   have its own HARP information registered\
    \ and to gain and refresh its\n   own HARP entry/information about other IP members.\
    \ This means, as\n   noted above, that HARP clients MUST be configured with the\
    \ hardware\n   address of the HARP server(s) in the HRAL.\n   HARP clients MUST:\n\
    \   1. When an interface is enabled (e.g. \"ifconfig <interface> up\" with\n \
    \     an IP address) or assigned the first or an additional IP address\n     \
    \ (i.e. an IP alias), the client SHALL initiate the registration\n      phase.\n\
    \   2. In the operational phase the client MUST respond to HARP_REQUEST\n    \
    \  and InHARP_REQUEST messages if it is the target port.  If an\n      interface\
    \ has multiple IP addresses (e.g., IP aliases) then the\n      client MUST cycle\
    \ through all the IP addresses and generate an\n      InHARP_REPLY for each such\
    \ address. In that case an InHARP_REQUEST\n      will have multiple replies. (Refer\
    \ to Section 7, \"Protocol\n      Operation\" in RFC-1293  [7].)\n   3. React\
    \ to address resolution reply messages appropriately to build\n      or refresh\
    \ its own client HARP table entries. All solicited and\n      unsolicited HARP_REPLYs\
    \ from the authoritative HARP server SHALL\n      be used to update and refresh\
    \ its own client HARP table entries.\n      Explanation: This allows the HARP\
    \ server to update the clients\n      when one of server's mappings change, similar\
    \ to what is\n      accomplished on Ethernet with gratuitous ARP.\n   4. Generate\
    \ and transmit InHARP_REQUEST messages as needed  and\n      process InHARP_REPLY\
    \ messages appropriately (see section 5.1.2 and\n      5.6). All InHARP_REPLY\
    \ messages SHALL be used by the client to\n      build or refresh its HARP table\
    \ entries.  (Refer to Section 7,\n      \"Protocol Operation\" in [7].)\n   If\
    \ the registration phase showed that the hardware does not support\n   broadcast,\
    \ then the client MUST refresh its own entry for the HARP\n   server, created\
    \ during the registration phase, at least once every 15\n   minutes. This can\
    \ be accomplished either through the exchange of a\n   HARP request/reply with\
    \ the HARP server or by repeating step 1. To\n   decrease the redundant network\
    \ traffic, this timeout SHOULD be reset\n   after each HARP_REQUEST/HARP_REPLY\
    \ exchange.\n   Explanation: The HARP_REQUEST shows the HARP server that the client\n\
    \   is still alive. Receiving a HARP_REPLY indicates to the client that\n   the\
    \ server must have seen the HARP_REQUEST.\n   If the registration phase shows\
    \ that the underlying network supports\n   broadcast, then periodic InHARP_REQUEST/InHARP_REPLY\
    \ operations of\n   step 4 are NOT REQUIRED.\n"
- title: 5.3 Receiving Unknown HARP Messages
  contents:
  - "5.3 Receiving Unknown HARP Messages\n   If a HARP client receives a HARP message\
    \ with an operation code\n   (ar$op) that it does not support, it MUST gracefully\
    \ discard the\n   message and continue normal operation.  A HARP client is NOT\
    \ REQUIRED\n   to return any message to the sender of the undefined message.\n"
- title: 5.4 HARP Server Operational Requirements
  contents:
  - "5.4 HARP Server Operational Requirements\n   A HARP server MUST accept HIPPI\
    \ connections from other HIPPI ports.\n   The HARP server expects an InHARP_REQUEST\
    \ as the first message from\n   the client. A server examines the IP source address,\
    \ the hardware\n   source address of the InHARP_REQUEST and adds or updates its\
    \ HARP\n   table entry <IP address(es), switch address, ULA>  as well as the\n\
    \   time stamp.\n   A HARP server SHALL reply to HARP_REQUESTs and InHARP_REQUESTs\
    \ based\n   on the information which it has in its HARP table.  The HARP server\n\
    \   SHALL reply with a HARP_REPLY or a InHARP_REPLY, if it has the\n   requested\
    \ information in its tables; otherwise it SHALL reply with a\n   HARP_NAK. The\
    \ HARP server replies SHALL contain the hardware type and\n   corresponding format\
    \ of the request (see also section 6).\n   The following table shows all possible\
    \ source address combinations on\n   an incoming message and the actions to be\
    \ taken. \"linked\" indicates\n   that an existing \"IP entry\" is linked to a\
    \ \"hardware entry\". It is\n   possible to have an existing \"IP entry\" and\
    \ to have an existing\n   \"hardware entry\" but neither is linked to the other.\n\
    \      +---+----------+----------+------------+---------------------+\n      |\
    \ # | IP entry | HW entry |  misc      |      Action         |\n      +---+----------+----------+------------+---------------------+\n\
    \      | 1 |  exists  |  exists  |     linked | *                   |\n      |\
    \ 2 |  exists  |  exists  | not linked | *, a, b,       e, f |\n      | 3 |  exists\
    \  |    new   | not linked | *, a, b,    d, e, f |\n      | 4 |   new    |  exists\
    \  | not linked | *,       c,    e, f |\n      | 5 |   new    |    new   | not\
    \ linked | *,       c, d, e, f |\n      +---+----------+----------+------------+---------------------+\n\
    \      Actions:\n      *: update timeout value\n      a: break the existing IP\
    \ -> hardware (HW) - old link\n      b: delete HW(old) -> IP link and decrement\
    \ HW(old) refcount, if\n         refcount = 0, delete HW(old)\n      c: create\
    \ new IP entry\n      d: create new HW entry\n      e: add new IP -> HW link to\
    \ IP entry\n      f: add new HW -> IP link to HW entry\n   Examples of when this\
    \ could happen (Numbers match lines in above\n   table):\n   1: supplemental message\n\
    \      Just update timer.\n   2: move an IP alias to an existing interface\n \
    \     If the IP source address of the InHARP_REQUEST duplicates a table\n    \
    \  entry IP address (e.g. IPa <-> HWa) and the InHARP_REQUEST\n      hardware\
    \ source address matches a hardware address entry (e.g. HWb\n      <-> IPb), but\
    \ they are not linked together, then:\n      -  HWa entry needs to have its reference\
    \ to the current IPa\n         address removed.\n      -  HWb needs to have a\
    \ new reference to IPa added\n      -  IPa needs to be linked to HWb\n   3: move\
    \ IP address to a new interface\n      If the InHARP_REQUEST requester's IP source\
    \ address duplicates a\n      table entry IP address and the InHARP_REQUEST hardware\
    \ source\n      address does not match the table entry hardware address, then\
    \ a\n      new HW entry SHALL be created. The requestor's IP address SHALL be\n\
    \      moved from the original HW entry to the new one (see above).\n   4: add\
    \  IP alias to table\n      If the InHARP_REQUEST requester's hardware source\
    \ address\n      duplicates a hardware source address entry, but there is no IP\n\
    \      entry matching the received IP address, then the IP address SHALL\n   \
    \   be added to the hardware entries previous IP address(es). (E.g.\n      adding\
    \ an IP alias).\n   5: fresh entry, add it\n      Standard case, create both entries\
    \ and link them.\n   A server MUST update the HARP table entry's timeout for each\n\
    \   HARP_REQUEST. Explanation: if the client is sending HARP requests to\n   the\
    \ server, then the server SHOULD note that the client is still\n   \"alive\" by\
    \ updating the timeout on the client's HARP table entry.\n   A HARP server SHOULD\
    \ use the PIBES (see section 7) to send out\n   HARP_REPLYs to all hardware addresses\
    \ in its table when the HARP\n   server table changes mappings. This feature decreases\
    \ the time of\n   stale entries in the clients.\n   If there are multiple addresses\
    \ in the HRAL, then a server needs to\n   act as a client to the other servers.\n"
- title: 5.5 HARP and Permanent ARP Table Entries
  contents:
  - "5.5 HARP and Permanent ARP Table Entries\n   An IP station MUST have a mechanism\
    \ (e.g. manual configuration) for\n   determining what permanent entries it has.\
    \ The details of the\n   mechanism are beyond the scope of this memo.  The permanent\
    \ entries\n   allow interoperability with legacy HIPPI adapters which do not yet\n\
    \   implement dynamic HARP and use a table-based static ARP. Permanent\n   entries\
    \ are not aged.\n   The HARP server SHOULD use the static entries to resolve incoming\n\
    \   HARP_REQUESTs from the clients. This feature eliminates the need for\n   maintaining\
    \ a static HARP table on the client ports.\n"
- title: 5.6 HARP Table Aging
  contents:
  - "5.6 HARP Table Aging\n   HARP table aging MUST be supported since IP addresses,\
    \ especially IP\n   aliases and also interfaces (with their ULA), are likely to\
    \ move.\n   When so doing the mapping in the clients own HARP table/cache becomes\n\
    \   invalid and stale.\n   o  When a client's HARP table entry ages beyond 15\
    \ minutes, a HARP\n      client MUST invalidate the table entry.\n   o  When a\
    \ server's HARP table entry ages beyond 20 minutes, the HARP\n      server MUST\
    \ delete the table entry.\n   NOTE: the client SHOULD revalidate a HARP table\
    \ entry before it ages,\n   thus restarting the aging time when the table entry\
    \ is successfully\n   revalidated.  The client MAY continue sending traffic to\
    \ the port\n   referred to by this entry while revalidation is in progress, as\
    \ long\n   as the table entry has not aged. The client MUST revalidate an aged\n\
    \   entry prior to transmitting any non-address-resolution traffic to the\n  \
    \ port referred to by this entry.\n   The client revalidates the entry by querying\
    \ the HARP server with a\n   HARP_REQUEST.  If a valid reply is received (e.g.\
    \ HARP_REPLY), the\n   entry is updated.  If the address resolution service cannot\
    \ resolve\n   the entry (e.g. HARP_NAK, \"host not found\"), the associated table\n\
    \   entry is removed.  If the address resolution service is not available\n  \
    \ (i.e. \"server failure\") the client MUST attempt to revalidate the\n   entry\
    \ by transmitting an InHARP_REQUEST to the hardware address of\n   the entry in\
    \ question and updating the  entry on receipt of an\n   InHARP_REPLY. If the InHARP_REQUEST\
    \ attempt fails to return an\n   InHARP_REPLY, the associated table entry is removed.\n"
- title: 6. HARP Message Encoding
  contents:
  - "6. HARP Message Encoding\n   The HARP Message is encapsulated over HIPPI-FP and\
    \ HIPPI-LE headers.\n   The HARP FP header values are to be set as defined in\
    \ RFC-2067 \"IP\n   over HIPPI\" [15]. The following sections detail the HIPPI-LE\
    \ field\n   contents and HARP message structure and contents. In a broadcast\n\
    \   capable network the client MAY also support Type 1 and 6, Ethernet\n   and\
    \ IEEE 802 ARP packet formats.\n"
- title: 6.1 HIPPI-LE Header of HARP Messages
  contents:
  - "6.1 HIPPI-LE Header of HARP Messages\n   The HIPPI message format for Internet\
    \ datagrams shall conform to the\n   HIPPI-FP [2] and HIPPI-LE [3] standards.\
    \  The length of a HIPPI\n   message, including trailing fill, shall be a multiple\
    \ of eight bytes\n   as required by HIPPI-LE.  The HIPPI-LE header fields of HARP\
    \ and\n   InHARP requests and replies SHALL be:\n   FC (3 bits) SHALL contain\
    \ zero.\n   Double-wide SHOULD be set according to HIPPI-LE [3]. This memo does\n\
    \   NOT address the implications on HARP when this bit is set to 1\n   indicating\
    \ the possibility of a port being able to accept 64-bit\n   HIPPI connections.\n\
    \   Message_Type SHALL contain 0 to indicate a data message. HARP\n   messages\
    \ are identified using the Ethertype and the message type in\n   the ar$op field\
    \ of the HARP message.\n   Destination_Switch_Address, SHALL be the Switch Address\
    \ of the\n   destination port.\n   Destination_IEEE_Address SHALL be the ULA of\
    \ the destination port, if\n   known, otherwise zero.\n   Destination_Address_Type\
    \ SHALL be 2, a 12-bit logical address.  The\n   behavior with type = 1, source\
    \ routing, is NOT defined in this\n   specification.\n   Source_Switch_Address\
    \ in requests SHALL be the sender's Switch\n   Address.\n   Source_IEEE_Address\
    \ SHALL be the sender's ULA if known, otherwise\n   zero.\n   Source_Address_Type\
    \ SHALL be 2, a 12-bit logical address. The\n   behavior with type = 1, source\
    \ routing, is NOT defined in this\n   specification.\n"
- title: 6.1.1 IEEE 802.2 LLC
  contents:
  - "6.1.1 IEEE 802.2 LLC\n   The IEEE 802.2 LLC Header SHALL begin in the first byte\
    \ of the\n   HIPPI-FP D2_Area.\n   The LLC value for SSAP-DSAP-CTL SHALL be 0xAA-AA-03\
    \ (3 bytes)\n   indicating the presence of a SNAP header.\n"
- title: 6.1.2 SNAP
  contents:
  - "6.1.2 SNAP\n   The OUI value for Organization Code SHALL be 0x00-00-00 (3 bytes)\n\
    \   indicating that the following two-bytes is an Ethertype.\n   The Ethertype\
    \ value SHALL be set as defined in Assigned Numbers [16]:\n   InHARP = InARP =\
    \ HARP = ARP = 2054 = 0x0806.\n   The total size of the LLC/SNAP header is fixed\
    \ at 8-bytes.\n"
- title: 6.1.3 HIPPI-LE header Diagram
  contents:
  - "6.1.3 HIPPI-LE header Diagram\n                   HIPPI-LE header for HARP/InHARP\
    \ PDUs:\n      31    28        23  21          15        10     7         2  \
    \ 0\n      +-----+---------+-+-+-----------+---------+-----+---------+-----+\n\
    \    0 | 04 = IP ULP   |1|0|         000         |      03       |  0  |\n   \
    \   +---------------+-+-+---------------------+---------------+-----+\n    1 |\
    \                            n + 8                              |\n      +-----+-+-------+-----------------------+-----------------------+\n\
    \    2 |[LA] |W|M_Type |          000          |  Dest. Switch Addr    |\n   \
    \   +-----+-+-------+-----------------------+-----------------------+\n    3 |\
    \ D_A_T | S_A_T |          000          | Source Switch Addr    |\n      +-------+-------+---------------+-------+-----------------------+\n\
    \    4 |             00 00             |                               |\n   \
    \   +-------------------------------+                               |\n    5 |\
    \                         Destination ULA                       |\n      +-------------------------------+-------------------------------+\n\
    \    6 |             [LA]              |                               |\n   \
    \   +-------------------------------+                               |\n    7 |\
    \                           Source ULA                          |\n      +===============+===============+===============+===============+\n\
    \    8 |       AA      |      AA       |       03      |       00      |\n   \
    \   +---------------+---------------+---------------+---------------+\n    9 |\
    \       00      |      00       |        Ethertype (2054)       |\n      +---------------+---------------+-------------------------------+\n\
    \   10 |Message byte 0 |Message byte 1 |Message byte 2 | . . .         |\n   \
    \   +---------------+---------------+---------------+---            |\n      |\
    \                            .  .  .                            |\n      +   ------------+---------------+---------------+---------------+\n\
    \      |         . . . |   byte (n-2)  |   byte (n-1)  |     FILL      |\n   \
    \   +---------------+---------------+---------------+---------------+\n   N-1|\
    \      FILL     |     FILL      |     FILL      |     FILL      |\n      +---------------+---------------+---------------+---------------+\n\
    \                            HIPPI Message Format\n      Words 0-1:  HIPPI-FP\
    \ Header\n      Words 2-7:  D1_Area (HIPPI-LE Header)\n      Words 8-9:  D2_Area\
    \ (IEEE 802.2 LLC/SNAP)\n      Words 10-(N-1):  D2_Area           (HARP message)\n\
    \      (n+8) is the nb of bytes in the  HARP message, incl. LLC/SNAP.\n      +====+\
    \ denotes the boundary between D1_Area and D2_Area.\n      [LA] fields are zero\
    \ unless used otherwise locally.\n      Abbreviations:\n       \"W\"      = Double_Wide\
    \ field        SHALL be 0\n       \"M_Type\" = Message_Type field       SHALL\
    \ be set according to\n                                                    HIPPI-LE\n\
    \       \"D_A_T\"  = Destination_Address_Type SHALL be 2\n       \"S_A_T\"  =\
    \ Source_Address_Type      SHALL be 2\n      [FILL] bytes complete the HIPPI message\
    \ to an even\n      number of 32 bit words.  The number of fill bytes\n      is\
    \ not counted in the data length.\n"
- title: 6.2 HIPPI Hardware Address Formats and Requirements
  contents:
  - "6.2 HIPPI Hardware Address Formats and Requirements\n   For HIPPI-800, the Hardware\
    \ Address is a 10-byte unit that SHALL\n   contain the Switch Address AND the\
    \ ULA. The format of a hardware\n   address is:\n   31              23       \
    \       15               7              0\n   +---------------+---------------+-------+-------+---------------+\n\
    \   |   Mode Byte   |      00       |   0   |  X    |      XX       |\n   +---------------+---------------+-------+-------+---------------+\n\
    \   |   ULA byte 0  |   ULA byte 1  |   ULA byte 2  |   ULA byte 3  |\n   +---------------+---------------+---------------+---------------+\n\
    \   |   ULA byte 4  |   ULA byte 5  |\n   +---------------+---------------+\n\
    \   Where \"XXX\" is the 12 bit HIPPI logical address defined in HIPPI-SC\n  \
    \ [4]. Details on ULA see next section.\n   Two switch addresses are considered\
    \ to be the same when they have the\n   same 12 bit destination HIPPI logical\
    \ address.\n   NOTE: In the case of HIPPI-6400, the hardware address is ONLY the\
    \ 6-\n   byte ULA. Therefore the length of the hardware address clearly\n   defines\
    \ which version of HIPPI is being used.\n"
- title: 6.2.1 48-bit Universal LAN MAC Addresses
  contents:
  - "6.2.1 48-bit Universal LAN MAC Addresses\n   IEEE Standard 802.1A [11] specifies\
    \ the Universal LAN MAC Address\n   format. The globally unique part of the 48-bit\
    \ space is administered\n   by the IEEE.  Each port on a HIPPI-SC LAN SHOULD be\
    \ assigned a ULA.\n   Multiple ULAs may be used if a port contains more than one\
    \ IEEE 802.2\n   LLC protocol entity.\n   The format of the HIPPI hardware address\
    \ within its HARP message\n   follows IEEE 802.1A canonical bit order and HIPPI-FP\
    \ bit and byte\n   order. For example the requester's ULA part of the HIPPI hardware\n\
    \   address would decompose to:\n   31              23              15       \
    \        7              0\n   +---------------+---------------+---------------+---------------+\n\
    \   |ULA byte 0 |L|G|   ULA byte 1  |   ULA byte 2  |   ULA byte 3  |\n   +---------------+---------------+---------------+---------------+\n\
    \   |   ULA byte 4  |   ULA byte 5  |\n   +---------------+---------------+\n\
    \                     Universal LAN MAC Address Format\n      L (U/L bit) = 1\
    \ for Locally administered addresses,\n                    0 for Universal.\n\
    \      G (I/G bit) = 1 for Group addresses,\n                    0 for Individual.\n\
    \   The use of ULAs is OPTIONAL, but RECOMMENDED. The use of ULAs is\n   REQUIRED\
    \ if a port wishes to interoperate with a conventional\n   network.\n   ULAs may\
    \ also be used by bridging devices that replace HIPPI hardware\n   headers with\
    \ the MAC headers of other LANs.\n"
- title: 6.3 HARP and InHARP Message Formats
  contents:
  - "6.3 HARP and InHARP Message Formats\n   The HARP protocols use the HIPARP hardware\
    \ type (ar$hrd) [16],\n   protocol type (ar$pro), and operation code (ar$op) data\
    \ formats as\n   the ARP, and InARP protocols [15,7]. In addition, HARP makes\
    \ use of\n   an additional operation code for ARP_NAK introduced with [12]. The\n\
    \   remainder of the HARP/InHARP message format is different than the\n   ARP/InARP\
    \ message format defined in [15,7,10] and it is also\n   different from the format\
    \ defined in the first \"IP and ARP on HIPPI\"\n   RFC-1374 [14].\n   HARP messages\
    \ SHALL be transmitted with the HIPARP hardware type code\n   of 28 (decimal).\
    \ Furthermore, HARP messages SHALL  be accepted if\n   received with hardware\
    \ type codes of either 28, 1 or 6 (decimal).\n   The HARP message has several\
    \ fields that have the following format\n   and values:\n   Data sizes and field\
    \ meaning:\n     ar$hrd  16 bits  Hardware type\n     ar$pro  16 bits  Protocol\
    \ type of the protocol fields below\n     ar$op   16 bits  Operation code (request,\
    \ reply, or NAK)\n     ar$pln   8 bits  byte length of each protocol address\n\
    \     ar$rhl   8 bits  requester's HIPPI hardware address length (q)\n     ar$thl\
    \   8 bits  target's HIPPI hardware address length (x)\n     ar$rpa  32 bits \
    \ requester's protocol address\n     ar$tpa  32 bits  target's protocol address\n\
    \     ar$rha  qbytes   requester's HIPPI Hardware address\n     ar$tha  xbytes\
    \   target's HIPPI Hardware address\n   Where :\n     ar$hrd  - SHALL contain\
    \ 28. (HIPARP)\n     ar$pro  - SHALL contain the IP protocol code 2048 (decimal).\n\
    \     ar$op   - SHALL contain the operational value (decimal):\n             \
    \  1  for   HARP_REQUESTs\n               2  for   HARP_REPLYs\n             \
    \  8  for InHARP_REQUESTs\n               9  for InHARP_REPLYs\n             \
    \  10 for   HARP_NAK\n     ar$pln  - SHALL contain 4.\n     ar$rln  - SHALL contain\
    \ 10 IF this is a HIPPI-800 HW address\n               ELSE, for HIPPI-6400, it\
    \ SHALL contain 6.\n     ar$thl  - SHALL contain 10 IF this is a HIPPI-800 HW\
    \ address\n               ELSE, for HIPPI-6400, it SHALL contain 6.\n     ar$rha\
    \  - in requests and NAKs it SHALL contain the requester's\n               HW\
    \ address. In replies it SHALL contain the target\n               port's HW address.\n\
    \     ar$rpa  - in requests and NAKs it SHALL contain the requester's IP\n   \
    \            address if known, otherwise zero.\n               In other replies\
    \ it SHALL contain the target\n               port's IP address.\n     ar$tha\
    \  - in requests and NAKs it SHALL contain the target's\n               HW address\
    \ if known, otherwise zero.\n               In other replies it SHALL contain\
    \ the requester's\n               HW addressA.\n     ar$tpa  - in requests and\
    \ NAKs it SHALL contain the\n               target's IP address if known, otherwise\
    \ zero.\n               In other replies it SHALL contain the requester's\n  \
    \             IP address.\n   The format of the six bytes of the ULA SHALL be\
    \ the same as required\n   in the HIPPI-LE header (see section 6.2), except for\
    \ the alignment of\n   the ULAs with respect to the 32-bit HIPPI word, which is\
    \ different\n   between ARP and HIPPI-LE.  No bit reversal is necessary as is\n\
    \   required with FDDI.\n      31    28        23  21          15        10  \
    \   7         2   0\n      +-----+---------+-+-+-----------+---------+-----+---------+-----+\n\
    \    0 |      04       |1|0|         000         |      03       |  0  |\n   \
    \   +---------------+-+-+---------------------+---------------+-----+\n    1 |\
    \                              45                               |\n      +-----+-+-------+-----------------------+-----------------------+\n\
    \    2 |[LA] |W|MsgT= 0|          000          |   Dest. Switch Addr   |\n   \
    \   +-----+-+-------+-----------------------+-----------------------+\n    3 |\
    \   2   |   2   |          000          |  Source Switch Addr   |\n      +---------------+---------------+-------+-----------------------+\n\
    \    4 |             00 00             |                               |\n   \
    \   +-------------------------------+                               |\n    5 |\
    \                      Destination ULA                          |\n      +-------------------------------+-------------------------------+\n\
    \    6 |             [LA]              |                               |\n   \
    \   +-------------------------------+                               |\n    7 |\
    \                         Source ULA                            |\n      +===============+===============+===============+===============+\n\
    \    8 |       AA      |      AA       |       03      |       00      |\n   \
    \   +---------------+---------------+---------------+---------------+\n    9 |\
    \       00      |      00       |        Ethertype (2054)       |\n      +---------------+---------------+-------------------------------+\n\
    \   10 |              hrd (28)         |           pro (2048)          |\n   \
    \   +---------------+---------------+---------------+---------------+\n   11 |\
    \             op (ar$op)        |     pln (6)   |   rhl (q)     |\n      +---------------+---------------+---------------+---------------+\n\
    \   12 |    thl = (x)  |   Requester IP Address upper  (24 bits)       |\n   \
    \   +---------------------------------------------------------------+\n   13 |\
    \ Req. IP lower |      Target IP Address upper  (24 bits)       |\n      +---------------+-----------------------------------------------+\n\
    \   14 | Tgt. IP lower | Requester HIPPI Hardware Address bytes 0 - 2  |\n   \
    \   +---------------+-----------------------------------------------+\n   15 |\
    \         Requester HIPPI Hardware Address bytes 3 - 6          |\n      +-----------------------------------------------+---------------+\n\
    \   16 |         Requester HW Address bytes 7 - q      | Tgt HW byte 0 |\n   \
    \   +---------------+---------------+---------------+---------------+\n   17 |\
    \          Target  HIPPI Hardware Address bytes 1 - 4           |\n      +---------------------------------------------------------------+\n\
    \   18 |          Target  HIPPI Hardware Address bytes 5 - 8           |\n   \
    \   +---------------+---------------+---------------+---------------+\n   19 |Tgt\
    \ HW byte 9-x|     FILL      |     FILL      |     FILL      |\n      +---------------+---------------+---------------+---------------+\n\
    \                           HARP - InHARP Message\n"
- title: '6.3.1 Example Message encodings:'
  contents:
  - "6.3.1 Example Message encodings:\n   HARP_REQUEST message\n         HARP ar$op\
    \   = 1 (HARP_REQUEST)\n         HARP ar$rpa  = IPy                HARP ar$tpa\
    \  = IPa\n         HARP ar$rha  = SWy ULAy           HARP ar$tha  = 0 **\n   \
    \      ** is what we would like to find out\n   HARP_REPLY message format\n  \
    \       HARP ar$op   = 2 (HARP_REPLY)\n         HARP ar$rpa  = IPa           \
    \     HARP ar$tpa  = IPy\n         HARP ar$rha  = SWa ULAa *         HARP ar$tha\
    \  = SWy ULAy\n         * answer we were looking for\n   InHARP_REQUEST message\
    \ format\n         HARP ar$op    = 8 (InHARP_REQUEST)\n         HARP ar$rpa  \
    \ = IPy               HARP ar$tpa   = 0 **\n         HARP ar$rha   = SWy ULAy\
    \          HARP ar$tha   = SWa ULAa\n         ** is what we would like to find\
    \ out\n   InHARP_REPLY message format\n         HARP ar$op    = 9 (InHARP_REPLY)\n\
    \         HARP ar$rpa   = IPs *             HARP ar$tpa   = IPy\n         HARP\
    \ ar$rha   = SWa ULAa          HARP ar$tha   = SWy ULAy\n         * answer we\
    \ were looking for\n"
- title: 6.3.2 HARP_NAK message format
  contents:
  - "6.3.2 HARP_NAK message format\n   The HARP_NAK message format is the same as\
    \ the received HARP_REQUEST\n   message format with the operation code set to\
    \ HARP_NAK; i.e. the\n   HARP_REQUEST message data is copied byte for byte for\
    \ transmission\n   with the HARP_REQUEST operation code changed to the HARP_NAK\
    \ value.\n   HARP makes use of an additional operation code for HARP_NAK. Hence,\n\
    \   HARP_NAK MUST be implemented.\n"
- title: 6.3.3 Combined HIPPI-LE and HARP message addresses
  contents:
  - "6.3.3 Combined HIPPI-LE and HARP message addresses\n   The combined HIPPI-LE/HARP\
    \ message contains ten addresses, two for\n   the destination and two for the\
    \ source of the message, three for the\n   requester and three for the target:\n\
    \      Destination Switch Address  (HIPPI-LE)\n      Destination ULA         \
    \    (HIPPI_LE)\n      Source Switch Address       (HIPPI-LE)\n      Source ULA\
    \                  (HIPPI-LE)\n      Requester IP Address        (HARP)\n    \
    \  Requester ULA               (HARP)\n      Requester Switch Address    (HARP)\n\
    \      Target IP Address           (HARP)\n      Target ULA                  (HARP)\n\
    \      Target Switch Address       (HARP)\n   Examples:\n   The following relations\
    \ are true for a HARP_REQUEST and\n   InHARP_REQUESTs.\n      LIS without broadcast\
    \ -  Dest SW Addr   = HARP server SW Addr\n      (with HARP server)       Dest\
    \ ULA       = HARP server ULA\n                               Source SW Addr =\
    \ Requester's SW Addr\n                               Source ULA     = Requester's\
    \ ULA\n"
- title: 7  Broadcast and Multicast
  contents:
  - "7  Broadcast and Multicast\n   HIPPI-SC does not require switches to support\
    \ broadcast. Broadcast\n   support has therefore been absent from many HIPPI networks.\n\
    \   During its registration phase, every port, including HARP server(s),\n   discover\
    \ if the underlying medium is capable of broadcast (see\n   section 5.1.2). Should\
    \ this not be the case, then the HARP server(s)\n   MUST emulate broadcast through\
    \ an IP broadcast emulation server.\n   A HIPPI IP broadcast server (PIBES) is\
    \ an extension to the HARP\n   server and only makes sense when the LIS does not\
    \ inherently support\n   broadcast. The PIBES allows common upper layer networking\
    \ protocols\n   (RIP, TCP, UDP, etc.) to access IP LIS broadcast.\n"
- title: 7.1 Protocol for an IP Broadcast Emulation Server - PIBES
  contents:
  - "7.1 Protocol for an IP Broadcast Emulation Server - PIBES\n   To emulate broadcast\
    \ within an LIS, a PIBES SHALL use the currently\n   valid HARP table of the HARP\
    \ server as a list of addresses called the\n   target list. The broadcast server\
    \ SHALL validate that all incoming\n   messages have a source address which corresponds\
    \ to an address in the\n   target list. Only messages addressed to the IP LIS\
    \ broadcast\n   addresses, multicast address or 255.255.255.255 are considered\
    \ valid\n   messages for broadcasting. Invalid messages MUST be dropped.  All\n\
    \   valid incoming messages shall be forwarded to all addresses in the\n   target\
    \ list.\n   It is RECOMMENDED that the broadcast server run on the same port as\n\
    \   the HARP server since this memo does not define the protocol for\n   exchanging\
    \ the valid HARP table. The default address to use for the\n   broadcast address\
    \ is the operational HARP server address.\n"
- title: 7.2 IP Broadcast Address
  contents:
  - "7.2 IP Broadcast Address\n   This memo only defines IP broadcast. It is independent\
    \ of the\n   underlying hardware addressing and broadcast capabilities. Any port\n\
    \   can differentiate between IP traffic directed to itself and a\n   broadcast\
    \ message sent to it by looking at the IP address. All IP\n   broadcast messages\
    \ SHALL use the IP LIS broadcast address or.\n   It is RECOMMENDED that the PIBES\
    \ run on the same port as the HARP\n   server. In that case, the PIBES SHALL use\
    \ the same address as the\n   HARP server.\n"
- title: 7.3 IP Multicast Address
  contents:
  - "7.3 IP Multicast Address\n   HIPPI does not directly support multicast address,\
    \ therefore there\n   are no mappings available from IP multicast addresses to\
    \ HIPPI\n   multicast services.  Current IP multicast implementations (i.e. MBONE\n\
    \   and IP tunneling, see [9]) will continue to operate over HIPPI-based\n   logical\
    \ IP subnets if all IP multicast packets are sent using the\n   same algorithm\
    \ as if the packet were being sent to 255.255.255.255.\n"
- title: 7.4 A Note on Broadcast Emulation Performance
  contents:
  - "7.4 A Note on Broadcast Emulation Performance\n   It is obvious that a broadcast\
    \ emulation service (as defined in\n   section 7.1) has an inherent performance\
    \ limit. In an LIS with n\n   ports, the upper bound on the bandwidth that such\
    \ a service can\n   broadcast is:\n                          (total bandwidth)/(n+1)\n\
    \   since each message must first enter the broadcast server, accounting\n   for\
    \ the additional 1, and then be sent to all n ports. The broadcast\n   server\
    \ could forward the message destined to the port on which it\n   runs internally,\
    \ thus reducing (n+1) to (n) in a first optimization.\n   This service is adequate\
    \ for the standard networking protocols such\n   as RIP, OSPF, NIS, etc. since\
    \ they usually use a small fraction of\n   the network bandwidth for broadcast.\
    \ For these purposes, the\n   broadcast emulation server as defined in this memo\
    \ allows the HIPPI\n   network to look similar to an Ethernet network to the higher\
    \ layers.\n   It is further obvious that such an emulation cannot be used to\n\
    \   broadcast high bandwidth traffic. For such a solution, hardware\n   support\
    \ for true broadcast is required.\n"
- title: 8 HARP for Scheduled Transfer Protocol[17]
  contents:
  - "8 HARP for Scheduled Transfer Protocol[17]\n   This RFC also applies for resolving\
    \ addresses used with Scheduled\n   Transfer (STP) over  HIPPI-800 instead of\
    \ IP. This RFC's message\n   types and algorithms can  be used for STP (since\
    \ STP uses Internet\n   Addresses) as long as there is also an IP over HIPPI implementation\n\
    \   on all of the ports.\n"
- title: 9 Discovery of One's Own Switch Address
  contents:
  - "9 Discovery of One's Own Switch Address\n   This HARP specification assumes that\
    \ each port has prior knowledge of\n   its own hardware address.  This address\
    \ may be manually configured,\n   by means outside the scope of this memo or a\
    \ port may discover its\n   own logical address through the algorithm described\
    \ below.\n   Ports are NOT REQUIRED to implement this switch address discovery\n\
    \   protocol but are encouraged to do so since it reduces the\n   administrative\
    \ overhead.  The algorithm presented in this section is\n   based on John Renwick's\
    \ work as detailed in RFC-1374 [14]. The\n   concept of the discovery process\
    \ is to scan all possible switch\n   addresses. The messages that are received\
    \ will be the ones containing\n   one of our switch addresses.\n   If a port implements\
    \ this algorithm it SHALL form a HIPPI-LE message\n   as defined in HIPPI-LE:\
    \ containing an Self_Address_Resolution_Request\n   (see [3]) PDU Type, a Source_IEEE_Address\
    \ and\n   Destination_IEEE_Address (set to the correct ULA for the sender), and\n\
    \   the Source_Switch_Address and Destination_Switch_Address.\n   This self address\
    \ resolution message uses the same HIPPI-LE message\n   format as described in\
    \ HIPPI-SC and HIPPI-LE: the Self Address\n   Resolution Request PDU and Self\
    \ Address Resolution Response PDU type\n   codes and no piggybacked ULP data.\
    \  The HIPPI-LE header contents for\n   the request are:\n      HIPPI-LE Message_Type\
    \ is            = 3, Self Addr. Resolution Request\n      HIPPI-LE Destination_Address_Type\
    \   = 0 (undefined)\n      HIPPI-LE Destination_Switch_Address = X (X element\
    \ scan range)\n      HIPPI-LE Source_Address_Type        = 0 (undefined)\n   \
    \   HIPPI-LE Source_Switch_Address      = 0 (unknown)\n      HIPPI-LE Destination_IEEE_Address\
    \   = 0\n      HIPPI-LE Source_IEEE_Address        = my ULA\n   There is no D2\
    \ data; the message contains only the HIPPI-FP header\n   and D1_Area with the\
    \ HIPPI-LE header.\n   Ports SHALL start the scan with a configurable logical\
    \ address\n   (default 0x000) and increment the value for by one for each\n  \
    \ subsequent try. The port SHALL continue until it sees its own self\n   address\
    \ resolution request or it has reached the end, which may be\n   another configurable\
    \ value (default 0xFFF). It is RECOMMENDED that\n   the range of addresses to\
    \ scan be configurable since some networks\n   have equipment that does not gracefully\
    \ handle HIPPI-LE messages.\n   After a port sends the[se] request[s], two positive\
    \ outcomes are\n   possible:\n   o  the port receives its own request(s), and\
    \ obtains one of its own\n      Switch Address, or\n   o  the port receives an\
    \ AR_S_Response with the\n      Destination_Switch_Address filled in.\n"
- title: 10 Security Considerations
  contents:
  - "10 Security Considerations\n   HARP messages are not authenticated which is a\
    \ potentially flaw that\n   could allow corrupt information to be introduced into\
    \ the server\n   system.\n   There are other known security issues relating to\
    \ port impersonation\n   via the address resolution protocols used in the Internet\
    \ [8].  No\n   special security mechanisms have been added to the address resolution\n\
    \   mechanism defined here for use with networks using HARP.\n   Not all of the\
    \ security issues relating to ARP over HIPPI are clearly\n   understood at this\
    \ time. However, given the security hole ARP allows,\n   other concerns are probably\
    \ minor.\n"
- title: 11 Open Issues
  contents:
  - "11 Open Issues\n   Synchronization and coordination of multiple HARP servers\
    \ and\n   multiple broadcast servers are left for further study.\n"
- title: 12 HARP Examples
  contents:
  - "12 HARP Examples\n   Assume a HIPPI-SC switch is installed with three connected\
    \ ports: x,\n   y, and a.  Each port has a unique hardware address that consists\
    \ of\n   Switch Address (e.g. SWx, SWy, SWa) and unique ULA (ULAx, ULAy and\n\
    \   ULAa, respectively). There is a HARP server connected to a switch\n   port\
    \ that is mapped to the address HWa (SWa, ULAa), this address is\n   the authoritative\
    \ HIPPI hardware address in the HRAL (HARP Request\n   Address List).\n   The\
    \ HARP server's table is empty. Ports X and Y each know their own\n   hardware\
    \ address.  Eventually they want to talk to each other; each\n   knows the other's\
    \ IP address (from the port database) but neither\n   knows the other's ULA or\
    \ Switch Address. Both ports X and Y have\n   their interfaces configured DOWN.\n\
    \   NOTE: The LLC, SNAP, Ethertype, HIPPI-LE Message Type, ar$hrd,\n   ar$pro,\
    \ ar$pln fields are left out from the examples below since they\n   are constant.\
    \ Likewise, ar$rhl = ar$thl = 9 are omitted since these\n   are all HIPPI-800\
    \ examples.\n"
- title: 12.1 Registration Phase of Client Y on Non-broadcast Hardware
  contents:
  - "12.1 Registration Phase of Client Y on Non-broadcast Hardware\n   Port Y starts:\
    \ its HARP table entry state for the server: PENDING\n   1. Port Y initiates its\
    \ interface and sends an InHARP_REQUEST to HWa\n      after starting a table entry\
    \ for HWa.\n      HIPPI-LE Destination_Switch_Address = SWa\n      HIPPI-LE Source_Switch_Address\
    \      = SWy\n      HIPPI-LE Destination_IEEE_Address   = ULAa\n      HIPPI-LE\
    \ Source_IEEE_Address        = ULAy\n      HARP ar$op                        \
    \  = 8 (InHARP_REQUEST)\n      HARP ar$rpa                         = IPy\n   \
    \   HARP ar$tpa                         = 0 **\n      HARP ar$rha            \
    \             = SWy ULAy\n      HARP ar$tha                         = SWa ULAa\n\
    \      ** is what we would like to find out\n   2. HARP server receives Y's InHARP_REQUEST,\
    \ it examines the source\n      addresses and scans its tables for a match. Since\
    \ this is the\n      first time Y connects to this server there is no entry and\
    \ one\n      will be created and time stamped with the information from the\n\
    \      InHARP_REQUEST. The HARP server will then send a InHARP_REPLY\n      including\
    \ its IP address.\n      HIPPI-LE Destination_Switch_Address = SWy\n      HIPPI-LE\
    \ Source_Switch_Address      = SWa\n      HIPPI-LE Destination_IEEE_Address  \
    \ = ULAy\n      HIPPI-LE Source_IEEE_Address        = ULAa\n      HARP ar$op \
    \                         = 9 (InHARP_REPLY)\n      HARP ar$rpa              \
    \           = IPs *\n      HARP ar$tpa                         = IPy\n      HARP\
    \ ar$rha                         = SWa ULAa\n      HARP ar$tha               \
    \          = SWy ULAy\n      * answer we were looking for\n   3. Port Y examines\
    \ the incoming InHARP_REPLY, completes its table\n      entry for the HARP server.\
    \ The client's HARP table entry for the\n      server now passes into the VALID\
    \ state and is usable for regular\n      HARP traffic. Receiving this reply ensures\
    \ that the HARP server\n      has properly registered the client.\n"
- title: 12.2 Registration Phase of Client Y on Broadcast Capable Hardware
  contents:
  - "12.2 Registration Phase of Client Y on Broadcast Capable Hardware\n   If there\
    \ is a broadcast capable network then the authoritative\n   address in the HRAL\
    \ would be mapped to the broadcast address, HWb =\n   SWb, ULAb (likely 0xFE1\
    \ and FF:FF:FF:FF:FF:FF).\n   Port Y starts: its HARP table entry state for HWa:\
    \ PENDING\n   1. Port Y initiates its interface and sends an InHARP_REQUEST to\
    \ HWa,\n      in this example the broadcast address, after starting a table\n\
    \      entry.\n      HIPPI-LE Destination_Switch_Address = SWb\n      HIPPI-LE\
    \ Source_Switch_Address      = SWy\n      HIPPI-LE Destination_IEEE_Address  \
    \ = ULAb\n      HIPPI-LE Source_IEEE_Address        = ULAy\n      HARP ar$op \
    \                         = 8 (InHARP_REQUEST)\n      HARP ar$rpa            \
    \             = IPy\n      HARP ar$tpa                         = 0 **\n      HARP\
    \ ar$rha                         = SWy ULAy\n      HARP ar$tha               \
    \          = SWb ULAb\n      ** is what we would like to find out\n   2. Since\
    \ the network is a broadcast network, client Y will receive a\n      copy of its\
    \ InHARP_REQUEST. Client Y examines the source\n      addresses.  Since they are\
    \ the same as what Y filled in the\n      InHARP_REQUEST, Y can deduce that it\
    \ is connected to a broadcast\n      medium.  Port Y completes its table entry\
    \ for HWa. This entry will\n      not timeout since it is considered unlikely\
    \ for a particular\n      underlying hardware type to change between broadcast\
    \ and non-\n      broadcast; therefore this mapping will never change.\n"
- title: 12.3 Operational Phase (phase II)
  contents:
  - "12.3 Operational Phase (phase II)\n   The Operational Phase of the HARP protocol\
    \ as specified in this memo\n   is the same for both broadcast and non-broadcast\
    \ capable HIPPI\n   hardware. The authoritative address in the HRAL for this example\
    \ will\n   be HWa: <SWa, ULAa> and IPs for simplicity reasons.\n"
- title: 12.3.1  Standard successful HARP_Resolve example
  contents:
  - "12.3.1  Standard successful HARP_Resolve example\n   Assume the same process\
    \ (steps 1-3 of section 10.1) happened for port\n   X. Then the state of X and\
    \ Y's tables is: the HARP server table entry\n   is in the VALID state. So lets\
    \ look at the message traffic when X\n   tries to send a message to Y. Since X\
    \ doesn't have an entry for Y,\n   1. Port X connects to the authoritative address\
    \ of the HRAL and sends\n      a HARP_REQUEST for Y's hardware address:\n    \
    \  HIPPI-LE Destination_Switch_Address = SWa\n      HIPPI-LE Source_Switch_Address\
    \      = SWx\n      HIPPI-LE Destination_IEEE_Address   = ULAa\n      HIPPI-LE\
    \ Source_IEEE_Address        = ULAx\n      HARP ar$op                        \
    \  = 1  (HARP_REQUEST)\n      HARP ar$rpa                         = IPx\n    \
    \  HARP ar$tpa                         = IPy\n      HARP ar$rha              \
    \           = SWx ULAx\n      HARP ar$tha                         = 0 **\n   \
    \   ** is what we would like to find out\n   2. The HARP server receives the HARP\
    \ request and updates its entry\n      for X if necessary. It then generates a\
    \ HARP_REPLY with Y's\n      hardware address information.\n      HIPPI-LE Destination_Switch_Address\
    \ = SWx\n      HIPPI-LE Source_Switch_Address      = SWa\n      HIPPI-LE Destination_IEEE_Address\
    \   = ULAx\n      HIPPI-LE Source_IEEE_Address        = ULAa\n      HARP ar$op\
    \                          = 2  (HARP_Reply)\n      HARP ar$rpa              \
    \           = IPy\n      HARP ar$tpa                         = IPx\n      HARP\
    \ ar$rha                         = SWy ULAy *\n      HARP ar$tha             \
    \            = SWx ULAx\n      * answer we were looking for\n   3. Port X connects\
    \ to port Y and transmits an IP message with the\n      following information\
    \ in the HIPPI-LE header:\n      HIPPI-LE Destination_Switch_Address = SWy\n \
    \     HIPPI-LE Source_Switch_Address      = SWx\n      HIPPI-LE Destination_IEEE_Address\
    \   = ULAy\n      HIPPI-LE Source_IEEE_Address        = ULAx\n   If there had\
    \ been a broadcast capable HIPPI network, the target ports\n   would themselves\
    \ have received the HARP_REQUEST of step 2 above and\n   responded to them in\
    \ the same way the HARP server did.\n"
- title: 12.3.2 Standard non-successful HARP_Resolve example
  contents:
  - "12.3.2 Standard non-successful HARP_Resolve example\n   Like in 12.3.1, assume\
    \ that X and Y are fully registered with the\n   HARP server. Then the state of\
    \ X and Y's HARP server table entry is:\n   VALID. So lets look at the message\
    \ traffic when X tries to send a\n   message to Q. Further assume that interface\
    \ Q is NOT configured UP,\n   i.e. it is DOWN.  Since X doesn't have an entry\
    \ for Q,\n   1. Port X connects to the HARP server switch address and sends a\n\
    \      HARP_REQUEST for Q's hardware address:\n      HIPPI-LE Destination_Switch_Address\
    \ = SWa\n      HIPPI-LE Source_Switch_Address      = SWx\n      HIPPI-LE Destination_IEEE_Address\
    \   = ULAa\n      HIPPI-LE Source_IEEE_Address        = ULAx\n      HARP ar$op\
    \                          = 1  (HARP_REQUEST)\n      HARP ar$rpa            \
    \             = IPx\n      HARP ar$tpa                         = IPq\n      HARP\
    \ ar$rha                         = SWx ULAx\n      HARP ar$tha               \
    \          = 0 **\n      ** is what we would like to find out\n   2. The HARP\
    \ server receives the HARP request and updates its entry\n      for X if necessary.\
    \ It then looks up IPq in its tables and doesn't\n      find it. The HARP server\
    \ then generates a HARP_NAK reply message.\n      HIPPI-LE Destination_Switch_Address\
    \ = SWx\n      HIPPI-LE Source_Switch_Address      = SWa\n      HIPPI-LE Destination_IEEE_Address\
    \   = ULAx\n      HIPPI-LE Source_IEEE_Address        = ULAa\n      HARP ar$op\
    \                          = 10  (HARP_NAK)\n      HARP ar$rpa               \
    \          = IPx\n      HARP ar$tpa                         = IPq\n      HARP\
    \ ar$rha                         = SWx ULAx\n      HARP ar$tha               \
    \          = 0 ***\n      *** No Answer, and notice that the fields do not get\
    \ swapped,\n          i.e. the HARP message is the same as the HARP_REQUEST\n\
    \          except for the operation code.\n   If there had been a broadcast capable\
    \ HIPPI network, then there would\n   not have been a reply.\n"
- title: 13 References
  contents:
  - "13 References\n   [1]  ANSI X3.183-1991(R1996), Information Technology - High-\n\
    \        Performance Parallel Interface - Mechanical, Electrical and\n       \
    \ Signaling Protocol Specification; (HIPPI-PH).\n   [2]  ANSI X3.210-1998, Information\
    \ Technology - High-Performance\n        Parallel Interface - Framing Protocol;\
    \ (HIPPI-FP).\n   [3]  ANSI X3.218-1993, Information Technology - High-Performance\n\
    \        Parallel Interface - Encapsulation of ISO 8802-2  (IEEE Std\n       \
    \ 802.2) Logical Link Control Protocol Data Units; (HIPPI-LE).\n   [4]  ANSI X3.222-1997,\
    \ Information Technology - High-Performance\n        Parallel Interface - Physical\
    \ Switch Control; (HIPPI-SC).\n   [5]  ANSI X3.300-1997, Information Technology\
    \ - High-Performance\n        Parallel Interface -  Serial Specification;  (HIPPI-Serial).\n\
    \   [6]  Braden, R., \"Requirements for Internet Hosts -- Communication\n    \
    \    Layers\", STD 3, RFC 1122, October 1989.\n   [7]  Bradely, T. and C. Brown,\
    \ \"Inverse Address Resolution Protocol\",\n        RFC 2390, September 1998.\n\
    \   [8]  Bellovin, Steven M., \"Security Problems in the TCP/IP Protocol\n   \
    \     Suite\", ACM Computer Communications Review, Vol. 19, Issue 2,\n       \
    \ pp. 32-48, 1989.\n   [9]  Deering, S, \"Host Extensions for IP Multicasting\"\
    , STD 5, RFC\n        1112, August 1989.\n   [10] Finlayson, R., Mann, T., Mogul,\
    \ J. and M. Theimer, \"A Reverse\n        Address Resolution Protocol\", RFC 903,\
    \ June 1984.\n   [11] ANSI/IEEE Std. 802.2-1989, Information Processing Systems\
    \ -\n        Local Area Networks - Logical Link Control, \"IEEE Standards for\n\
    \        Local Area Networks: Logical Link  Control\", IEEE, New York, New\n \
    \       York, 1985.\n   [12] Laubach, Mark., \"Classical IP and ARP over ATM\"\
    , RFC 2225, April\n        1998.\n   [13] Plummer, D., \"An Ethernet Address Resolution\
    \ Protocol - or -\n        Converting Network Addresses to 48-bit Ethernet Address\
    \ for\n        Transmission on Ethernet Hardware\", RFC 826, November 1982.\n\
    \   [14] Renwick, J. and A. Nicholson, \"IP and ARP on HIPPI\", RFC 1374,\n  \
    \      October 1992.\n   [15] Renwick, J., \"IP over HIPPI\", RFC 2067, January\
    \ 1997.\n   [16] Reynolds, J. and J. Postel, \"Assigned Numbers\", STD 2, RFC\
    \ 1700,\n        October 1994.\n   [17] ANSI NCITS xxx.199x, Project 1245-D, Scheduled\
    \ Transfer Protocol\n        ANSI NCITS, Scheduled Transfer Protocol draft standard.\n\
    \   [18] Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n  \
    \      Levels\", BCP 14, RFC 2119, March 1997.\n"
- title: 14 Acknowledgments
  contents:
  - "14 Acknowledgments\n   This memo could not have come into being without the critical\
    \ review\n   from Greg Chesson, Carlin Otto, the high performance interconnect\n\
    \   group of Silicon Graphics (specifically Jim Pinkerton, Brad Strand\n   and\
    \ Jeff Young) and the expertise of the ANSI T11.1 Task Group\n   responsible for\
    \ the HIPPI standards work.\n   This memo is based on the second part of [14],\
    \ written by John\n   Renwick. ARP [13] written by Dave Plummer and Inverse ARP\
    \ [7] written\n   by T. Bradley and C. Brown provide the fundamental algorithms\
    \ of HARP\n   as presented in this memo. Further, the HARP server is based on\n\
    \   concepts and models presented in [12], written by Mark Laubach who\n   laid\
    \ the structural groundwork for the HARP server.\n"
- title: 15 Changes from RFC-1374 [14]
  contents:
  - "15 Changes from RFC-1374 [14]\n   RFC-2067 obsoletes RFC-1374 but left ARP outside\
    \ of its scope because\n   there was not enough implementation experience. This\
    \ memo is an\n   effort to clarify and expand the definition of ARP over HIPPI\
    \ as\n   found in RFC-1374 such that implementations will be more readily\n  \
    \ possible, especially considering forward interoperability with\n   HIPPI-6400.\n\
    \   The changes from RFC-1374 [14] are:\n   o  A new message format to acknowledge\
    \ the HIPPI hardware address\n      format and to eliminate the requirement of\
    \ HIPPI-LE ARP for HARP\n      to function.\n   o  Explicit registration phase.\n\
    \   o  Additional message formats: InHARP requests and replies as well as\n  \
    \    HARP_NAKs.\n   o  Details about the IP subnetwork configuration.\n   o  Details\
    \ about table aging.\n   o  IP broadcast emulation.\n"
- title: 16 Author's Address
  contents:
  - "16 Author's Address\n   Jean-Michel Pittet\n   Silicon Graphics Inc\n   1600\
    \ Amphitheatre Parkway\n   Mountain View, CA 94043\n   Phone: 650-933-6149\n \
    \  Fax:   650-933-3542\n   EMail: jmp@sgi.com, jmp@acm.org\n"
- title: 17 Full Copyright Statement
  contents:
  - "17 Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
