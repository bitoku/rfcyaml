- title: __initial_text__
  contents:
  - '               The RPKI Repository Delta Protocol (RRDP)

    '
- title: Abstract
  contents:
  - "Abstract\n   In the Resource Public Key Infrastructure (RPKI), Certificate\n\
    \   Authorities (CAs) publish certificates, including end-entity\n   certificates,\
    \ Certificate Revocation Lists (CRLs), and RPKI signed\n   objects to repositories.\
    \  Relying Parties retrieve the published\n   information from those repositories.\
    \  This document specifies a new\n   RPKI Repository Delta Protocol (RRDP) for\
    \ this purpose.  RRDP was\n   specifically designed for scaling.  It relies on\
    \ an Update\n   Notification File which lists the current Snapshot and Delta Files\n\
    \   that can be retrieved using HTTPS (HTTP over Transport Layer Security\n  \
    \ (TLS)), and it enables the use of Content Distribution Networks\n   (CDNs) or\
    \ other caching infrastructures for the retrieval of these\n   files.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8182.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Requirements Notation . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  RPKI Repository Delta Protocol Implementation . . . . .\
    \ . . .   4\n     3.1.  Informal Overview . . . . . . . . . . . . . . . . . .\
    \ . .   4\n     3.2.  Certificate Authority Use . . . . . . . . . . . . . . .\
    \ .   5\n     3.3.  Repository Server Use . . . . . . . . . . . . . . . . . .\
    \   6\n       3.3.1.  Initialization  . . . . . . . . . . . . . . . . . . .  \
    \ 6\n       3.3.2.  Publishing Updates  . . . . . . . . . . . . . . . . .   6\n\
    \     3.4.  Relying Party Use . . . . . . . . . . . . . . . . . . . .   7\n  \
    \     3.4.1.  Processing the Update Notification File . . . . . . .   7\n    \
    \   3.4.2.  Processing Delta Files  . . . . . . . . . . . . . . .   9\n      \
    \ 3.4.3.  Processing a Snapshot File  . . . . . . . . . . . . .  10\n       3.4.4.\
    \  Polling the Update Notification File  . . . . . . . .  10\n       3.4.5.  Considerations\
    \ Regarding Operational Failures in RRDP  11\n     3.5.  File Definitions  . .\
    \ . . . . . . . . . . . . . . . . . .  11\n       3.5.1.  Update Notification\
    \ File  . . . . . . . . . . . . . .  11\n       3.5.2.  Snapshot File . . . .\
    \ . . . . . . . . . . . . . . . .  13\n       3.5.3.  Delta File  . . . . . .\
    \ . . . . . . . . . . . . . . .  15\n       3.5.4.  XML Schema  . . . . . . .\
    \ . . . . . . . . . . . . . .  17\n   4.  Operational Considerations  . . . .\
    \ . . . . . . . . . . . . .  18\n     4.1.  Compatibility with previous standards\
    \ . . . . . . . . . .  18\n     4.2.  Distribution Considerations . . . . . .\
    \ . . . . . . . . .  19\n     4.3.  HTTPS Considerations  . . . . . . . . . .\
    \ . . . . . . . .  19\n   5.  Security Considerations . . . . . . . . . . . .\
    \ . . . . . . .  20\n   6.  IANA Considerations . . . . . . . . . . . . . . .\
    \ . . . . . .  21\n   7.  References  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  22\n     7.1.  Normative References  . . . . . . . . . . . . . .\
    \ . . . .  22\n     7.2.  Informative References  . . . . . . . . . . . . . .\
    \ . . .  23\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  24\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . .\
    \ .  24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In the Resource Public Key Infrastructure (RPKI), Certificate\n\
    \   Authorities publish certificates [RFC6487], RPKI signed objects\n   [RFC6488],\
    \ manifests [RFC6486], and CRLs to repositories.  CAs may\n   have an embedded\
    \ mechanism to publish to these repositories, or they\n   may use a separate Repository\
    \ Server and publication protocol.  RPKI\n   repositories are currently accessible\
    \ using the rsync protocol\n   [RSYNC], allowing Relying Parties to synchronize\
    \ a local copy of the\n   RPKI repository used for validation with the remote\
    \ repositories\n   [RFC6481].\n   rsync [RSYNC] has proven valuable in the early\
    \ deployment of RPKI,\n   because it allowed operators to gain experience without\
    \ the need to\n   invent a custom protocol.  However, operational experience has\n\
    \   brought concerns to light that we wish to address here:\n   o  rsync [RSYNC]\
    \ is designed to limit the amount of data that needs\n      to be transferred\
    \ between client and server.  However, the server\n      needs to spend significant\
    \ resources in terms of CPU and memory\n      for every connection.  This is a\
    \ problem in an envisioned RPKI\n      deployment where thousands of Relying Parties\
    \ query a small number\n      of central repositories, and it makes these repositories\
    \ weak to\n      denial-of-service attacks.\n   o  A secondary concern is the\
    \ lack of supported rsync server and\n      client libraries.  In practice, all\
    \ implementations have to make\n      system calls to an rsync binary.  This is\
    \ inefficient; it\n      introduces fragility with regards to updates of this\
    \ binary, makes\n      it difficult to catch and report problems to operators,\
    \ and\n      complicates software development and testing.\n   This document specifies\
    \ an alternative repository access protocol\n   based on Update Notification,\
    \ Snapshot, and Delta Files that a\n   Relying Party can retrieve over the HTTPS\
    \ protocol.  This allows\n   Relying Parties to either perform a full (re-)synchronization\
    \ of\n   their local copy of the repository using Snapshot Files or use Delta\n\
    \   Files to keep their local repository updated after initial\n   synchronization.\
    \  We call this the RPKI Repository Delta Protocol, or\n   RRDP in short.\n  \
    \ RRDP was designed to support scaling in RPKI's asymmetric deployment.\n   It\
    \ is consistent (in terms of data structures) with the publication\n   protocol\
    \ [RFC8181] and treats publication events of one or more\n   repository objects\
    \ as discrete events that can be communicated to\n   Relying Parties.  This approach\
    \ helps to minimize the amount of data\n   that traverses the network and thus\
    \ helps minimize the amount of time\n   until repository convergence occurs. \
    \ RRDP also provides a standards-\n   based way to obtain consistent, point-in-time\
    \ views of a single\n   repository, eliminating a number of consistency-related\
    \ issues.\n   Finally, this approach allows these discrete events to be\n   communicated\
    \ as immutable files.  This enables Repository Servers to\n   pre-calculate these\
    \ files only once for all clients, thus limiting\n   the CPU and memory investments\
    \ required, and enables the use of a\n   caching infrastructure to reduce the\
    \ load on a Repository Server when\n   a large number of Relying Parties are querying\
    \ it.\n   This document allows the use of RRDP as an additional repository\n \
    \  distribution mechanism for RPKI.  In time, RRDP may replace rsync\n   [RSYNC]\
    \ as the only mandatory-to-implement repository distribution\n   mechanism.  However,\
    \ this transition is outside of the scope of this\n   document.\n"
- title: 2.  Requirements Notation
  contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 3.  RPKI Repository Delta Protocol Implementation
  contents:
  - '3.  RPKI Repository Delta Protocol Implementation

    '
- title: 3.1.  Informal Overview
  contents:
  - "3.1.  Informal Overview\n   Certification Authorities in the RPKI use a Repository\
    \ Server to\n   publish their RPKI products, such as manifests, CRLs, signed\n\
    \   certificates, and RPKI-signed objects.  This Repository Server may be\n  \
    \ remote or embedded in the Certificate Authority engine itself.\n   Certificates\
    \ in the RPKI that use a Repository Server that supports\n   RRDP include a special\
    \ Subject Information Access (SIA) pointer\n   referring to an Update Notification\
    \ File.\n   The Update Notification File includes a globally unique session_id\
    \ in\n   the form of a version 4 Universally Unique IDentifier (UUID)\n   [RFC4122]\
    \ and serial number that can be used by the Relying Party to\n   determine if\
    \ it and the repository are synchronized.  Furthermore, it\n   includes a link\
    \ to the most recent complete snapshot of current\n   objects that are published\
    \ by the Repository Server, and a list of\n   links to Delta Files, for each revision\
    \ starting at a point\n   determined by the Repository Server, up to the current\
    \ revision of\n   the repository.\n   A Relying Party that learns about an Update\
    \ Notification File\n   location for the first time can download it and then proceed\
    \ to\n   download the latest Snapshot File, thus creating a local copy of the\n\
    \   repository that is in sync with the Repository Server.  The Relying\n   Party\
    \ records the location of this Update Notification File, the\n   session_id, and\
    \ the current serial number.\n   Relying Parties are encouraged to re-fetch this\
    \ Update Notification\n   File at regular intervals, but not more often than once\
    \ per minute.\n   After re-fetching the Update Notification File, the Relying\
    \ Party may\n   find that there are one or more Delta Files available that allow\
    \ it\n   to synchronize its local repository with the current state of the\n \
    \  Repository Server.  If no contiguous chain of deltas from the Relying\n   Party's\
    \ serial to the latest repository serial is available, or if\n   the session_id\
    \ has changed, the Relying Party performs a full\n   resynchronization instead.\n\
    \   As soon as the Relying Party fetches new content in this way, it\n   could\
    \ start a validation process.  An example of a reason why a\n   Relying Party\
    \ may not choose to do this immediately is because it has\n   learned of more\
    \ than one notification location, and it prefers to\n   complete all its updates\
    \ before validating.\n   The Repository Server could use a caching infrastructure\
    \ to reduce\n   its load, particularly because snapshots and deltas for any given\n\
    \   session_id and serial number contain an immutable record of the state\n  \
    \ of the Repository Server at a certain point in time.  For this\n   reason, these\
    \ files can be cached indefinitely.  Update Notification\n   Files are polled\
    \ by Relying Parties to discover if updates exist; for\n   this reason, Update\
    \ Notification Files may not be cached for longer\n   than one minute.\n"
- title: 3.2.  Certificate Authority Use
  contents:
  - "3.2.  Certificate Authority Use\n   Certificate Authorities that use RRDP MUST\
    \ include an instance of an\n   SIA AccessDescription extension in resource certificates\
    \ they\n   produce, in addition to the ones defined in [RFC6487]:\n          \
    \   AccessDescription ::= SEQUENCE {\n               accessMethod OBJECT IDENTIFIER,\n\
    \               accessLocation GeneralName }\n   This extension MUST use an accessMethod\
    \ of id-ad-rpkiNotify; see\n   Section 6:\n     id-pkix OBJECT IDENTIFIER ::=\
    \ { iso(1) identified-organization(3)\n       dod(6) internet(1) security(5) mechanisms(5)\
    \ pkix(7) }\n     id-ad OBJECT IDENTIFIER ::= { id-pkix 48 }\n     id-ad-rpkiNotify\
    \ OBJECT IDENTIFIER ::= { id-ad 13 }\n   The accessLocation MUST be an HTTPS URI\
    \ as defined in [RFC7230] that\n   will point to the Update Notification File\
    \ for the Repository Server\n   that publishes the products of this Certificate\
    \ Authority\n   certificate.\n"
- title: 3.3.  Repository Server Use
  contents:
  - '3.3.  Repository Server Use

    '
- title: 3.3.1.  Initialization
  contents:
  - "3.3.1.  Initialization\n   When the Repository Server initializes, it performs\
    \ the following\n   actions:\n   o  The server MUST generate a new random version\
    \ 4 UUID (see\n      Section 4.1.3 of [RFC4122]) to be used as the session_id.\n\
    \   o  The server MUST then generate a Snapshot File for serial number\n     \
    \ ONE for this new session that includes all currently known\n      published\
    \ objects that the Repository Server is responsible for.\n      Note that this\
    \ Snapshot File may contain zero publish elements at\n      this point if no objects\
    \ have been submitted for publication yet.\n   o  This Snapshot File MUST be made\
    \ available at a URL that is unique\n      to this session_id and serial number,\
    \ so that it can be cached\n      indefinitely.  The format and caching concerns\
    \ for Snapshot Files\n      are explained in more detail in Section 3.5.2.\n \
    \  o  After the Snapshot File has been published, the Repository Server\n    \
    \  MUST publish a new Update Notification File that contains the new\n      session_id,\
    \ has serial number ONE, has one reference to the\n      Snapshot File that was\
    \ just published, and contains no delta\n      references.  The format and caching\
    \ concerns for Update\n      Notification Files are explained in more detail in\
    \ Section 3.5.1.\n"
- title: 3.3.2.  Publishing Updates
  contents:
  - "3.3.2.  Publishing Updates\n   Whenever the Repository Server receives updates\
    \ from a Certificate\n   Authority, it MUST generate new snapshot and Delta Files\
    \ within one\n   minute.  If a Repository Server services a large number of\n\
    \   Certificate Authorities, it MAY choose to combine updates from\n   multiple\
    \ CAs.  If a Repository Server combines updates in this way,\n   it MUST ensure\
    \ that publication never postponed for longer than one\n   minute for any of the\
    \ CAs involved.\n   Updates are processed as follows:\n   o  The new repository\
    \ serial number MUST be one greater than the\n      current repository serial\
    \ number.\n   o  A new Delta File MUST be generated for this new serial.  This\n\
    \      Delta File MUST include all new, replaced, and withdrawn objects\n    \
    \  for multiple CAs, if applicable, as a single change set.\n   o  This Delta\
    \ File MUST be made available at a URL that is unique to\n      the current session_id\
    \ and serial number, so that it can be cached\n      indefinitely.\n   o  The\
    \ format and caching concerns for Delta Files are explained in\n      more detail\
    \ in Section 3.5.3.\n   o  The Repository Server MUST also generate a new Snapshot\
    \ File for\n      this new serial.  This file MUST contain all \"publish\" elements\n\
    \      for all current objects.\n   o  The Snapshot File MUST be made available\
    \ at a URL that is unique\n      to this session and new serial, so that it can\
    \ be cached\n      indefinitely.\n   o  The format and caching concerns for Snapshot\
    \ Files are explained\n      in more detail in Section 3.5.2.\n   o  Any older\
    \ Delta Files that, when combined with all more recent\n      Delta Files, will\
    \ result in the total size of deltas exceeding the\n      size of the snapshot\
    \ MUST be excluded to avoid that Relying\n      Parties download more data than\
    \ necessary.\n   o  A new Update Notification File MUST now be created by the\n\
    \      Repository Server.  This new Update Notification File MUST include\n  \
    \    a reference to the new Snapshot File and all Delta Files selected\n     \
    \ in the previous steps.\n   o  The format and caching concerns for Update Notification\
    \ Files are\n      explained in more detail in Section 3.5.1.\n   If the Repository\
    \ Server is not capable of performing the above for\n   some reason, then it MUST\
    \ perform a full re-initialization, as\n   explained above in Section 3.3.1.\n"
- title: 3.4.  Relying Party Use
  contents:
  - '3.4.  Relying Party Use

    '
- title: 3.4.1.  Processing the Update Notification File
  contents:
  - "3.4.1.  Processing the Update Notification File\n   When a Relying Party performs\
    \ RPKI validation and learns about a\n   valid certificate with an SIA entry for\
    \ the RRDP protocol, it SHOULD\n   use this protocol as follows.\n   The Relying\
    \ Party MUST download the Update Notification File, unless\n   an Update Notification\
    \ File was already downloaded and processed from\n   the same location in this\
    \ validation run or a polling strategy was\n   used (see Section 3.4.4).\n   It\
    \ is RECOMMENDED that the Relying Party uses a \"User-Agent\" header\n   explained\
    \ in Section 5.5.3. of [RFC7231] to identify the name and\n   version of the Relying\
    \ Party software used.  It is useful to track\n   capabilities of Relying Parties\
    \ in the event of changes to the RPKI\n   standards.\n   When the Relying Party\
    \ downloads an Update Notification File, it MUST\n   verify the file format and\
    \ validation steps described in\n   Section 3.5.1.3.  If this verification fails,\
    \ the file MUST be\n   rejected and RRDP cannot be used.  See Section 3.4.5 for\n\
    \   considerations.\n   The Relying Party MUST verify whether the session_id matches\
    \ the last\n   known session_id for this Update Notification File location.  Note\n\
    \   that even though the session_id is a random UUID value, it alone MUST\n  \
    \ NOT be used by a Relying Party as a unique identifier of a session\n   but always\
    \ together with the location of the Update Notification\n   File.  The reason\
    \ for this is that a malicious server can use an\n   existing session_id from\
    \ another Repository Server.\n   If the session_id matches the last known session_id,\
    \ then a Relying\n   Party MAY download and process missing Delta Files as described\
    \ in\n   Section 3.4.2, provided that all Delta Files for serial numbers\n   between\
    \ the last processed serial number and the current serial\n   number in the Update\
    \ Notification File can be processed this way.\n   If the session_id matches the\
    \ last known session_id, but Delta Files\n   were not used, then the Relying Party\
    \ MUST download and process the\n   Snapshot File on the Update Notification File\
    \ as described in\n   Section 3.4.3.\n   If the session_id does not match the\
    \ last known session_id, the\n   Relying Party MUST update its last known session_id\
    \ to the value\n   specified in the downloaded Update Notification File.  The\
    \ Relying\n   Party MUST then download and process the Snapshot File specified\
    \ in\n   the downloaded Update Notification File as described in\n   Section 3.4.3.\n"
- title: 3.4.2.  Processing Delta Files
  contents:
  - "3.4.2.  Processing Delta Files\n   If an Update Notification File contains a\
    \ contiguous chain of links\n   to Delta Files from the last processed serial\
    \ number to the current\n   serial number, then Relying Parties MUST attempt to\
    \ download and\n   process all Delta Files in order of serial number as follows.\n\
    \   When the Relying Party downloads a Delta File, it MUST verify the\n   file\
    \ format and perform validation steps described in\n   Section 3.5.3.3.  If this\
    \ verification fails, the file MUST be\n   rejected.\n   Furthermore, the Relying\
    \ Party MUST verify that the hash of the\n   contents of this file matches the\
    \ hash on the Update Notification\n   File that referenced it.  In case of a mismatch\
    \ of this hash, the\n   file MUST be rejected.\n   If a Relying Party retrieved\
    \ a Delta File that is valid according to\n   the above criteria, it performs\
    \ the following actions:\n   o  The Relying Party MUST verify that the session_id\
    \ matches the\n      session_id of the Update Notification File.  If the session_id\n\
    \      values do not match, the file MUST be rejected.\n   o  The Relying Party\
    \ MUST verify that the serial number of this Delta\n      File is exactly one\
    \ greater than the last processed serial number\n      for this session_id, and\
    \ if not, this file MUST be rejected.\n   o  The Relying Party SHOULD add all\
    \ publish elements to a local\n      storage and update its last processed serial\
    \ number to the serial\n      number of this Delta File.\n   o  When a Relying\
    \ Party encounters a \"withdraw\" element, or a\n      \"publish\" element where\
    \ an object is replaced, in a delta that it\n      retrieves from a Repository\
    \ Server, it MUST verify that the object\n      to be withdrawn or replaced was\
    \ retrieved from this same\n      Repository Server before applying the appropriate\
    \ action.  Failing\n      to do so will leave the Relying Party vulnerable to\
    \ malicious\n      Repository Servers instructing it to delete or change arbitrary\n\
    \      objects.\n   If any Delta File is rejected, Relying Parties MUST process\
    \ the\n   current Snapshot File instead, as described in Section 3.4.3.\n"
- title: 3.4.3.  Processing a Snapshot File
  contents:
  - "3.4.3.  Processing a Snapshot File\n   Snapshot Files MUST only be used if Delta\
    \ Files are unavailable or\n   were rejected; for a description of the process,\
    \ see Section 3.4.1.\n   When the Relying Party downloads a Snapshot File, it\
    \ MUST verify the\n   file format and validation steps described in Section 3.5.2.3.\
    \  If\n   this verification fails, the file MUST be rejected.\n   Furthermore,\
    \ the Relying Party MUST verify that the hash of the\n   contents of this file\
    \ matches the hash on the Update Notification\n   File that referenced it.  In\
    \ case of a mismatch of this hash, the\n   file MUST be rejected.\n   If a Relying\
    \ Party retrieved a Snapshot File that is valid according\n   to the above criteria,\
    \ it performs the following actions:\n   o  The Relying Party MUST verify that\
    \ the session_id matches the\n      session_id of the Update Notification File.\
    \  If the session_id\n      values do not match, the file MUST be rejected.\n\
    \   o  The Relying Party MUST verify that the serial number of this\n      Snapshot\
    \ File is greater than the last processed serial number for\n      this session_id.\
    \  If this fails, the file MUST be rejected.\n   o  The Relying Party SHOULD then\
    \ add all publish elements to a local\n      storage and update its last processed\
    \ serial number to the serial\n      number of this Snapshot File.\n   If a Snapshot\
    \ File is rejected, it means that RRDP cannot be used.\n   See Section 3.4.5 for\
    \ considerations.\n"
- title: 3.4.4.  Polling the Update Notification File
  contents:
  - "3.4.4.  Polling the Update Notification File\n   Once a Relying Party has learned\
    \ about the location, session_id, and\n   last processed serial number of the\
    \ repository that uses the RRDP\n   protocol, the Relying Party MAY start polling\
    \ the Repository Server\n   for updates.  However, the Relying Party MUST NOT\
    \ poll for updates\n   more often than once every 1 minute, and in order to reduce\
    \ data\n   usage, Relying Parties MUST use the \"If-Modified-Since\" header\n\
    \   explained in Section 3.3 of [RFC7232] in requests.\n   If a Relying Party\
    \ finds that updates are available, it SHOULD\n   download and process the file\
    \ as described in Section 3.4.1 and\n   initiate a new RPKI object validation\
    \ process.  However, a detailed\n   description of the RPKI object validation\
    \ process itself is out of\n   scope of this document.\n"
- title: 3.4.5.  Considerations Regarding Operational Failures in RRDP
  contents:
  - "3.4.5.  Considerations Regarding Operational Failures in RRDP\n   If a Relying\
    \ Party experiences any issues with retrieving or\n   processing any of the files\
    \ used in this protocol, it will be unable\n   to retrieve new RPKI data from\
    \ the affected Repository Server.\n   Relying Parties could attempt to use alternative\
    \ repository access\n   mechanisms, if they are available, according to the accessMethod\n\
    \   element value(s) specified in the SIA of the associated certificate\n   (see\
    \ Section 4.8.8 of [RFC6487]).\n   Furthermore, Relying Parties may wish to employ\
    \ re-try strategies\n   while fetching RRDP files.  Relying Parties are also advised\
    \ to keep\n   old objects in their local cache so that validation can be done\
    \ using\n   old objects.\n   It is also recommendable that re-validation and retrieval\
    \ is\n   performed pro-actively before manifests or CRLs go stale, or\n   certificates\
    \ expire, to ensure that problems on the side of the\n   Relying Party can be\
    \ identified and resolved before they cause major\n   concerns.\n"
- title: 3.5.  File Definitions
  contents:
  - '3.5.  File Definitions

    '
- title: 3.5.1.  Update Notification File
  contents:
  - '3.5.1.  Update Notification File

    '
- title: 3.5.1.1.  Purpose
  contents:
  - "3.5.1.1.  Purpose\n   The Update Notification File is used by Relying Parties\
    \ to discover\n   whether any changes exist between the state of the repository\
    \ and the\n   Relying Party's cache.  It describes the location of the files\n\
    \   containing the snapshot and incremental deltas, which can be used by\n   the\
    \ Relying Party to synchronize with the repository.\n"
- title: 3.5.1.2.  Cache Concerns
  contents:
  - "3.5.1.2.  Cache Concerns\n   A Repository Server MAY use caching infrastructure\
    \ to cache the\n   Update Notification File and reduce the load of HTTPS requests.\n\
    \   However, since this file is used by Relying Parties to determine\n   whether\
    \ any updates are available, the Repository Server SHOULD\n   ensure that this\
    \ file is not cached for longer than 1 minute.  An\n   exception to this rule\
    \ is that it is better to serve a stale Update\n   Notification File rather than\
    \ no Update Notification File.\n   How this is achieved exactly depends on the\
    \ caching infrastructure\n   used.  In general, a Repository Server may find certain\
    \ HTTP headers\n   to be useful, such as: \"Cache-Control: max-age=60\" (see Section\
    \ 5.2\n   of [RFC7234]).  Another approach can be to have the Repository Server\n\
    \   push out new versions of the Update Notification File to the caching\n   infrastructure\
    \ when appropriate.\n   In case of a high load on a Repository Server or its distribution\n\
    \   network, the Cache-Control HTTP header, or a similar mechanism, MAY\n   be\
    \ used to suggest an optimal (for the Repository Server) poll\n   interval for\
    \ Relying Parties.  However, setting it to an interval\n   longer than 1 hour\
    \ is NOT RECOMMENDED.  Relying parties SHOULD align\n   the suggested interval\
    \ with their operational practices and the\n   expected update frequency of RPKI\
    \ repository data and MAY discard the\n   suggested value.\n"
- title: 3.5.1.3.  File Format and Validation
  contents:
  - "3.5.1.3.  File Format and Validation\n   Example Update Notification File:\n\
    \     <notification xmlns=\"http://www.ripe.net/rpki/rrdp\"\n           version=\"\
    1\"\n           session_id=\"9df4b597-af9e-4dca-bdda-719cce2c4e28\"\n        \
    \   serial=\"3\">\n       <snapshot uri=\"https://host/9d-8/3/snapshot.xml\" hash=\"\
    AB\"/>\n       <delta serial=\"3\" uri=\"https://host/9d-8/3/delta.xml\" hash=\"\
    CD\"/>\n       <delta serial=\"2\" uri=\"https://host/9d-8/2/delta.xml\" hash=\"\
    EF\"/>\n     </notification>\n   Note: URIs and hash values in this example are\
    \ shortened because of\n   formatting.\n   The following validation rules MUST\
    \ be observed when creating or\n   parsing Update Notification Files:\n   o  A\
    \ Relying Party MUST reject any Update Notification File that is\n      not well-formed\
    \ or does not conform to the RELAX NG schema\n      outlined in Section 3.5.4\
    \ of this document.\n   o  The XML namespace MUST be \"http://www.ripe.net/rpki/rrdp\"\
    .\n   o  The encoding MUST be \"US-ASCII\".\n   o  The version attribute in the\
    \ notification root element MUST be\n      \"1\".\n   o  The session_id attribute\
    \ MUST be a random version 4 UUID\n      [RFC4122], unique to this session.\n\
    \   o  The serial attribute MUST be an unbounded, unsigned positive\n      integer\
    \ in decimal format indicating the current version of the\n      repository.\n\
    \   o  The Update Notification File MUST contain exactly one 'snapshot'\n    \
    \  element for the current repository version.\n   o  If delta elements are included,\
    \ they MUST form a contiguous\n      sequence of serial numbers starting at a\
    \ revision determined by\n      the Repository Server, up to the serial number\
    \ mentioned in the\n      notification element.  Note that the elements may not\
    \ be ordered.\n   o  The hash attribute in snapshot and delta elements MUST be\
    \ the\n      hexadecimal encoding of the SHA-256 [SHS] hash of the referenced\n\
    \      file.  The Relying Party MUST verify this hash when the file is\n     \
    \ retrieved and reject the file if the hash does not match.\n"
- title: 3.5.2.  Snapshot File
  contents:
  - '3.5.2.  Snapshot File

    '
- title: 3.5.2.1.  Purpose
  contents:
  - "3.5.2.1.  Purpose\n   A snapshot is intended to reflect the complete and current\
    \ contents\n   of the repository for a specific session and version.  Therefore,\
    \ it\n   MUST contain all objects from the repository current as of the time\n\
    \   of the publication.\n"
- title: 3.5.2.2.  Cache Concerns
  contents:
  - "3.5.2.2.  Cache Concerns\n   A snapshot reflects the content of the repository\
    \ at a specific point\n   in time; for that reason, it can be considered immutable\
    \ data.\n   Snapshot Files MUST be published at a URL that is unique to the\n\
    \   specific session and serial.\n   Because these files never change, they MAY\
    \ be cached indefinitely.\n   However, in order to prevent these files from using\
    \ a lot of space in\n   the caching infrastructure, it is RECOMMENDED that a limited\
    \ interval\n   is used in the order of hours or days.\n   To avoid race conditions\
    \ where a Relying Party downloads an Update\n   Notification File moments before\
    \ it's updated, Repository Servers\n   SHOULD retain old Snapshot Files for at\
    \ least 5 minutes after a new\n   Update Notification File is published.\n"
- title: 3.5.2.3.  File Format and Validation
  contents:
  - "3.5.2.3.  File Format and Validation\n   Example Snapshot File:\n      <snapshot\
    \ xmlns=\"http://www.ripe.net/rpki/rrdp\"\n             version=\"1\"\n      \
    \       session_id=\"9df4b597-af9e-4dca-bdda-719cce2c4e28\"\n             serial=\"\
    2\">\n        <publish uri=\"rsync://rpki.ripe.net/Alice/Bob.cer\">\n        \
    \  ZXhhbXBsZTE=\n        </publish>\n        <publish uri=\"rsync://rpki.ripe.net/Alice/Alice.mft\"\
    >\n          ZXhhbXBsZTI=\n        </publish>\n        <publish uri=\"rsync://rpki.ripe.net/Alice/Alice.crl\"\
    >\n          ZXhhbXBsZTM=\n        </publish>\n      </snapshot>\n   The following\
    \ rules MUST be observed when creating or parsing\n   Snapshot Files:\n   o  A\
    \ Relying Party MUST reject any Snapshot File that is not well-\n      formed\
    \ or does not conform to the RELAX NG schema outlined in\n      Section 3.5.4\
    \ of this document.\n   o  The XML namespace MUST be \"http://www.ripe.net/rpki/rrdp\"\
    .\n   o  The encoding MUST be \"US-ASCII\".\n   o  The version attribute in the\
    \ notification root element MUST be\n      \"1\".\n   o  The session_id attribute\
    \ MUST match the expected session_id in the\n      reference in the Update Notification\
    \ File.\n   o  The serial attribute MUST match the expected serial in the\n  \
    \    reference in the Update Notification File.\n   o  Note that the publish element\
    \ is similar to the publish element\n      defined in the publication protocol\
    \ [RFC8181].  However, the \"tag\"\n      attribute is not used here because it\
    \ is not relevant to Relying\n      Parties.  The \"hash\" attribute is not used\
    \ here because this file\n      represents a complete current state of the repository;\
    \ therefore,\n      it is not relevant to know which existing RPKI object (if\
    \ any) is\n      updated.\n"
- title: 3.5.3.  Delta File
  contents:
  - '3.5.3.  Delta File

    '
- title: 3.5.3.1.  Purpose
  contents:
  - "3.5.3.1.  Purpose\n   An incremental Delta File contains all changes for exactly\
    \ one serial\n   increment of the Repository Server.  In other words, a single\
    \ delta\n   will typically include all the new objects, updated objects, and\n\
    \   withdrawn objects that a Certification Authority sent to the\n   Repository\
    \ Server.  In its simplest form, the update could concern\n   only a single object,\
    \ but it is RECOMMENDED that CAs send all changes\n   for one of their key pairs\
    \ (updated objects as well as a new manifest\n   and CRL) as one atomic update\
    \ message.\n"
- title: 3.5.3.2.  Cache Concerns
  contents:
  - "3.5.3.2.  Cache Concerns\n   Deltas reflect the difference between two consecutive\
    \ versions of a\n   repository for a given session.  For that reason, deltas can\
    \ be\n   considered immutable data.  Delta Files MUST be published at a URL\n\
    \   that is unique to the specific session and serial.\n   Because these files\
    \ never change, they MAY be cached indefinitely.\n   However, in order to prevent\
    \ these files from using a lot of space in\n   the caching infrastructure, it\
    \ is RECOMMENDED that a limited interval\n   is used in the order of hours or\
    \ days.\n   To avoid race conditions where a Relying Party downloads an Update\n\
    \   Notification File moments before it's updated, Repository Servers\n   SHOULD\
    \ retain old Delta Files for at least 5 minutes after they are\n   no longer included\
    \ in the latest Update Notification File.\n"
- title: 3.5.3.3.  File Format and Validation
  contents:
  - "3.5.3.3.  File Format and Validation\n   Example Delta File:\n     <delta xmlns=\"\
    http://www.ripe.net/rpki/rrdp\"\n            version=\"1\"\n            session_id=\"\
    9df4b597-af9e-4dca-bdda-719cce2c4e28\"\n            serial=\"3\">\n       <publish\
    \ uri=\"rsync://rpki.ripe.net/repo/Alice/Alice.mft\"\n                hash=\"\
    50d8...545c\">\n         ZXhhbXBsZTQ=\n       </publish>\n       <publish uri=\"\
    rsync://rpki.ripe.net/repo/Alice/Alice.crl\"\n                hash=\"5fb1...6a56\"\
    >\n         ZXhhbXBsZTU=\n       </publish>\n       <withdraw uri=\"rsync://rpki.ripe.net/repo/Alice/Bob.cer\"\
    \n                 hash=\"caeb...15c1\"/>\n     </delta>\n   Note that a formal\
    \ RELAX NG specification of this file format is\n   included later in this document.\
    \  A Relying Party MUST NOT process\n   any Delta File that is incomplete or not\
    \ well-formed.\n   The following validation rules MUST be observed when creating\
    \ or\n   parsing Delta Files:\n   o  A Relying Party MUST reject any Delta File\
    \ that is not well-formed\n      or does not conform to the RELAX NG schema outlined\
    \ in\n      Section 3.5.4 of this document.\n   o  The XML namespace MUST be \"\
    http://www.ripe.net/rpki/rrdp\".\n   o  The encoding MUST be \"US-ASCII\".\n \
    \  o  The version attribute in the delta root element MUST be \"1\".\n   o  The\
    \ session_id attribute MUST be a random version 4 UUID unique to\n      this session.\n\
    \   o  The session_id attribute MUST match the expected session_id in the\n  \
    \    reference in the Update Notification File.\n   o  The serial attribute MUST\
    \ match the expected serial in the\n      reference in the Update Notification\
    \ File.\n   o  Note that the publish element is similar to the publish element\n\
    \      defined in the publication protocol [RFC8181].  However, the \"tag\"\n\
    \      attribute is not used here because it is not relevant to Relying\n    \
    \  Parties.\n"
- title: 3.5.4.  XML Schema
  contents:
  - "3.5.4.  XML Schema\n   The following is a RELAX NG compact form schema describing\
    \ version 1\n   of this protocol.\n   #\n   # RELAX NG schema for the RPKI Repository\
    \ Delta Protocol (RRDP).\n   #\n   default namespace = \"http://www.ripe.net/rpki/rrdp\"\
    \n   version = xsd:positiveInteger   { maxInclusive=\"1\" }\n   serial  = xsd:positiveInteger\n\
    \   uri     = xsd:anyURI\n   uuid    = xsd:string            { pattern = \"[\\\
    -0-9a-fA-F]+\" }\n   hash    = xsd:string            { pattern = \"[0-9a-fA-F]+\"\
    \ }\n   base64  = xsd:base64Binary\n   # Notification File: lists current snapshots\
    \ and deltas.\n   start |= element notification {\n     attribute version    {\
    \ version },\n     attribute session_id { uuid },\n     attribute serial     {\
    \ serial },\n     element snapshot {\n       attribute uri  { uri },\n       attribute\
    \ hash { hash }\n     },\n     element delta {\n       attribute serial { serial\
    \ },\n       attribute uri    { uri },\n       attribute hash   { hash }\n   \
    \  }*\n   }\n   # Snapshot segment: think DNS AXFR.\n   start |= element snapshot\
    \ {\n     attribute version    { version },\n     attribute session_id { uuid\
    \ },\n     attribute serial     { serial },\n     element publish      {\n   \
    \    attribute uri { uri },\n       base64\n     }*\n   }\n   # Delta segment:\
    \ think DNS IXFR.\n   start |= element delta {\n     attribute version    { version\
    \ },\n     attribute session_id { uuid },\n     attribute serial     { serial\
    \ },\n     delta_element+\n   }\n   delta_element |= element publish  {\n    \
    \ attribute uri  { uri },\n     attribute hash { hash }?,\n     base64\n   }\n\
    \   delta_element |= element withdraw {\n     attribute uri  { uri },\n     attribute\
    \ hash { hash }\n   }\n   # Local Variables:\n   # indent-tabs-mode: nil\n   #\
    \ comment-start: \"# \"\n   # comment-start-skip: \"#[ \\t]*\"\n   # End:\n"
- title: 4.  Operational Considerations
  contents:
  - '4.  Operational Considerations

    '
- title: 4.1.  Compatibility with previous standards
  contents:
  - "4.1.  Compatibility with previous standards\n   This protocol has been designed\
    \ to replace rsync as a distribution\n   mechanism of an RPKI repository.  However,\
    \ it is also designed to\n   coexist with existing implementations based on rsync,\
    \ to enable\n   smooth transition from one distribution mechanism to another.\n\
    \   For every repository object listed in the Snapshot and Delta Files,\n   both\
    \ the hash of the object's content and the rsync URI [RFC5781] of\n   its location\
    \ in the repository are listed.  This makes it possible to\n   distribute the\
    \ same RPKI repository, represented by a set of files on\n   a filesystem, using\
    \ both rsync and RRDP.  It also enables Relying\n   Parties tools to query, combine,\
    \ and consequently validate objects\n   from repositories of different types.\n"
- title: 4.2.  Distribution Considerations
  contents:
  - "4.2.  Distribution Considerations\n   One of the design goals of RRDP was to\
    \ minimize load on a Repository\n   Server while serving clients.  To achieve\
    \ this, neither the content\n   nor the URLs of the Snapshot and Delta Files are\
    \ modified after they\n   have been published in the Update Notification File.\
    \  This allows\n   their effective distribution by using either a single HTTP\
    \ server or\n   a CDN.\n   The RECOMMENDED way for Relying Parties to keep up\
    \ with the\n   repository updates is to poll the Update Notification File for\n\
    \   changes.  The content of that file is updated with every new serial\n   version\
    \ of a repository (while its URL remains stable).  To\n   effectively implement\
    \ distribution of the Update Notification File,\n   an \"If-Modified-Since\" HTTP\
    \ request header is required to be present\n   in all requests for the Update\
    \ Notification File (see Section 3.4.4).\n   Therefore, it is RECOMMENDED that\
    \ Relying Party tools implement a\n   mechanism to keep track of a previous successful\
    \ fetch of an Update\n   Notification File.\n   Implementations of RRDP should\
    \ also take care of not producing new\n   versions of the repository (and subsequently,\
    \ new Update\n   Notification, Snapshot, and Delta Files) too often.  Usually\
    \ the\n   maintenance of the RPKI repository includes regular updates of\n   manifest\
    \ and CRL objects performed on a schedule.  This often results\n   in bursts of\
    \ repository updates during a short period of time.  Since\n   the Relying Parties\
    \ are required to poll for the Update Notification\n   File not more often than\
    \ once per minute (Section 3.4.4), it is not\n   practical to generate new serial\
    \ versions of the repository much more\n   often than 1 per minute.  It is allowed\
    \ to combine multiple updates,\n   possibly from different CAs, into a new serial\
    \ repository version\n   (Section 3.3.2).  This will significantly shorten the\
    \ size of the\n   Update Notification File and total amount of data distributed\
    \ to all\n   Relying Parties.\n"
- title: 4.3.  HTTPS Considerations
  contents:
  - "4.3.  HTTPS Considerations\n   Note that a Man in the Middle (MITM) cannot produce\
    \ validly signed\n   RPKI data but can perform withhold or replay attacks targeting\
    \ a\n   Relying Party and keep the Relying Party from learning about changes\n\
    \   in the RPKI.  Because of this, Relying Parties SHOULD do TLS\n   certificate\
    \ and host name validation when they fetch from an RRDP\n   Repository Server.\n\
    \   Relying Party tools SHOULD log any TLS certificate or host name\n   validation\
    \ issues found, so that an operator can investigate the\n   cause.  However, such\
    \ validation issues are often due to\n   configuration errors or a lack of a common\
    \ TLS trust anchor.  In\n   these cases, it is better if the Relying Party retrieves\
    \ the signed\n   RPKI data regardless and performs validation on it.  Therefore,\
    \ the\n   Relying Party MUST continue to retrieve the data in case of errors.\n\
    \   The Relying Party MAY choose to log encountered issues only when\n   fetching\
    \ the Update Notification File, but not when it subsequently\n   fetches Snapshot\
    \ or Delta Files from the same host.  Furthermore, the\n   Relying Party MAY provide\
    \ a way for operators to accept untrusted\n   connections for a given host, after\
    \ the cause has been identified.\n   It is RECOMMENDED that Relying Parties and\
    \ Repository Servers follow\n   the Best Current Practices outlined in [RFC7525]\
    \ on the use of HTTP\n   over TLS (HTTPS) [RFC7230].  Relying Parties SHOULD do\
    \ TLS\n   certificate and host name validation using subjectAltName dNSName\n\
    \   identities as described in [RFC6125].  The rules and guidelines\n   defined\
    \ in [RFC6125] apply here, with the following considerations:\n   o  Relying Parties\
    \ and Repository Servers SHOULD support the DNS-ID\n      identifier type.  The\
    \ DNS-ID identifier type SHOULD be present in\n      Repository Server certificates.\n\
    \   o  DNS names in Repository Server certificates SHOULD NOT contain the\n  \
    \    wildcard character \"*\".\n   o  A Common Name (CN) field may be present\
    \ in a Repository Server\n      certificate's subject name but SHOULD NOT be used\
    \ for\n      authentication within the rules described in [RFC6125].\n   o  This\
    \ protocol does not require the use of SRV-IDs.\n   o  This protocol does not\
    \ require the use of URI-IDs.\n   Note, however, that this validation is done\
    \ on a best-effort basis\n   and serves to highlight potential issues, but RPKI\
    \ object security\n   does not depend on this.  Therefore, Relying Parties MAY\
    \ deviate from\n   the validation steps listed above.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   RRDP deals exclusively with the transfer of RPKI\
    \ objects from a\n   Repository Server to a Relying Party.  The trust relation\
    \ between a\n   Certificate Authority and its Repository Server is out of scope\
    \ for\n   this document.  However, it should be noted that from a Relying Party\n\
    \   point of view, all RPKI objects (certificates, CRLs, and objects\n   wrapped\
    \ in Cryptographic Message Syntax (CMS)) are already covered by\n   object security\
    \ mechanisms including signed manifests.  This allows\n   validation of these\
    \ objects even though the Repository Server itself\n   is not trusted.  This document\
    \ makes no change to RPKI validation\n   procedures per se.\n   The original RPKI\
    \ transport protocol is rsync, which offers no\n   channel security mechanism.\
    \  RRDP replaces the use of rsync by HTTPS;\n   while the channel security mechanism\
    \ underlying RRDP (HTTPS) is not a\n   cure-all, it does make some forms of denial-of-service\
    \ attacks more\n   difficult for the attacker.  HTTPS issues are discussed in\
    \ more\n   detail in Section 4.3.\n   Supporting both RRDP and rsync necessarily\
    \ increases the number of\n   opportunities for a malicious RPKI Certificate Authority\
    \ to perform\n   denial-of-service attacks on Relying Parties, by expanding the\
    \ number\n   of URIs which the Relying Party may need to contact in order to\n\
    \   complete a validation run.  However, other than the relative cost of\n   HTTPS\
    \ versus rsync, adding RRDP to the mix does not change this\n   picture significantly:\
    \ with either RRDP or rsync a malicious\n   Certificate Authority can supply an\
    \ effectively infinite series of\n   URIs for the Relying Party to follow.  The\
    \ only real solution to this\n   is for the Relying Party to apply some kind of\
    \ bound to the amount of\n   work it is willing to do.  Note also that the attacker\
    \ in this\n   scenario must be an RPKI Certificate Authority; otherwise, the normal\n\
    \   RPKI object security checks would reject the malicious URIs.\n   Processing\
    \ costs for objects retrieved using RRDP may be somewhat\n   different from the\
    \ same objects retrieved using rsync: because RRDP\n   treats an entire set of\
    \ changes as a unit (one \"delta\"), it may not\n   be practical to start processing\
    \ any of the objects in the delta\n   until the entire delta has been received.\
    \  With rsync, by contrast,\n   incremental processing may be easy, but the overall\
    \ cost of transfer\n   may be higher, as may be the number of corner cases in\
    \ which the\n   Relying Party retrieves some but not all of the updated objects.\n\
    \   Overall, RRDP's behavior is closer to a proper transactional system,\n   which\
    \ (probably) leads to an overall reliability increase.\n   RRDP is designed to\
    \ scale much better than rsync.  In particular,\n   RRDP is designed to allow\
    \ use of an HTTPS caching infrastructure to\n   reduce load on primary Repository\
    \ Servers and increase resilience\n   against denial-of-service attacks on the\
    \ RPKI publication service.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   IANA has updated the reference for id-ad-rpkiNotify\
    \ to point to this\n   document in the \"SMI Security for PKIX Access Descriptor\"\
    \ registry\n   [IANA-AD-NUMBERS].\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC4122]  Leach, P., Mealling, M., and R. Salz, \"A Universally\n       \
    \       Unique IDentifier (UUID) URN Namespace\", RFC 4122,\n              DOI\
    \ 10.17487/RFC4122, July 2005,\n              <http://www.rfc-editor.org/info/rfc4122>.\n\
    \   [RFC5781]  Weiler, S., Ward, D., and R. Housley, \"The rsync URI\n       \
    \       Scheme\", RFC 5781, DOI 10.17487/RFC5781, February 2010,\n           \
    \   <http://www.rfc-editor.org/info/rfc5781>.\n   [RFC6125]  Saint-Andre, P. and\
    \ J. Hodges, \"Representation and\n              Verification of Domain-Based\
    \ Application Service Identity\n              within Internet Public Key Infrastructure\
    \ Using X.509\n              (PKIX) Certificates in the Context of Transport Layer\n\
    \              Security (TLS)\", RFC 6125, DOI 10.17487/RFC6125, March\n     \
    \         2011, <http://www.rfc-editor.org/info/rfc6125>.\n   [RFC6481]  Huston,\
    \ G., Loomans, R., and G. Michaelson, \"A Profile for\n              Resource\
    \ Certificate Repository Structure\", RFC 6481,\n              DOI 10.17487/RFC6481,\
    \ February 2012,\n              <http://www.rfc-editor.org/info/rfc6481>.\n  \
    \ [RFC6487]  Huston, G., Michaelson, G., and R. Loomans, \"A Profile for\n   \
    \           X.509 PKIX Resource Certificates\", RFC 6487,\n              DOI 10.17487/RFC6487,\
    \ February 2012,\n              <http://www.rfc-editor.org/info/rfc6487>.\n  \
    \ [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n   \
    \           Protocol (HTTP/1.1): Message Syntax and Routing\",\n             \
    \ RFC 7230, DOI 10.17487/RFC7230, June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n\
    \   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n      \
    \        DOI 10.17487/RFC7231, June 2014,\n              <http://www.rfc-editor.org/info/rfc7231>.\n\
    \   [RFC7232]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Conditional Requests\", RFC 7232,\n       \
    \       DOI 10.17487/RFC7232, June 2014,\n              <http://www.rfc-editor.org/info/rfc7232>.\n\
    \   [RFC7234]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n     \
    \         Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n        \
    \      RFC 7234, DOI 10.17487/RFC7234, June 2014,\n              <http://www.rfc-editor.org/info/rfc7234>.\n\
    \   [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations\
    \ for Secure Use of Transport Layer\n              Security (TLS) and Datagram\
    \ Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,\
    \ May\n              2015, <http://www.rfc-editor.org/info/rfc7525>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119\
    \ Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,\
    \ <http://www.rfc-editor.org/info/rfc8174>.\n   [RFC8181]  Weiler, S., Sonalker,\
    \ A., and R. Austein, \"A Publication\n              Protocol for the Resource\
    \ Public Key Infrastructure\n              (RPKI)\", DOI 10.17487/RFC8181, July\
    \ 2017,\n              <http://www.rfc-editor.org/info/rfc8181>.\n   [SHS]   \
    \   National Institute of Standards and Technology, \"Secure\n              Hash\
    \ Standard (SHS)\", FIPS PUB 180-4,\n              DOI 10.6028/NIST.FIPS.180-4,\
    \ August 2015,\n              <http://nvlpubs.nist.gov/nistpubs/FIPS/\n      \
    \        NIST.FIPS.180-4.pdf>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [IANA-AD-NUMBERS]\n              IANA, \"Structure\
    \ of Management Information (SMI) Numbers\n              (MIB Module Registrations)\"\
    ,\n              <http://www.iana.org/assignments/smi-numbers>.\n   [RFC6486]\
    \  Austein, R., Huston, G., Kent, S., and M. Lepinski,\n              \"Manifests\
    \ for the Resource Public Key Infrastructure\n              (RPKI)\", RFC 6486,\
    \ DOI 10.17487/RFC6486, February 2012,\n              <http://www.rfc-editor.org/info/rfc6486>.\n\
    \   [RFC6488]  Lepinski, M., Chi, A., and S. Kent, \"Signed Object\n         \
    \     Template for the Resource Public Key Infrastructure\n              (RPKI)\"\
    , RFC 6488, DOI 10.17487/RFC6488, February 2012,\n              <http://www.rfc-editor.org/info/rfc6488>.\n\
    \   [RSYNC]    \"rsync\", <https://rsync.samba.org>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank David Mandelberg for reviewing\
    \ this\n   document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tim Bruijnzeels\n   RIPE NCC\n   Email: tim@ripe.net\n\
    \   Oleg Muravskiy\n   RIPE NCC\n   Email: oleg@ripe.net\n   Bryan Weber\n   Cobenian\n\
    \   Email: bryan@cobenian.com\n   Rob Austein\n   Dragon Research Labs\n   Email:\
    \ sra@hactrn.net\n"
