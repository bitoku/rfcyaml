- title: __initial_text__
  contents:
  - '              Basic Forward Error Correction (FEC) Schemes

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides Forward Error Correction (FEC) Scheme\n \
    \  specifications according to the Reliable Multicast Transport (RMT)\n   FEC\
    \ building block for the Compact No-Code FEC Scheme, the Small\n   Block, Large\
    \ Block, and Expandable FEC Scheme, the Small Block\n   Systematic FEC Scheme,\
    \ and the Compact FEC Scheme.  This document\n   obsoletes RFC 3695 and assumes\
    \ responsibility for the FEC Schemes\n   defined in RFC 3452.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Requirements Notation  . . . . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  Compact No-Code FEC Scheme . . . . . . . . . . . . . .\
    \ . . . .  4\n     3.1.  Introduction . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n     3.2.  Formats and Codes  . . . . . . . . . . . . . . . . . .\
    \ . .  4\n       3.2.1.  FEC Payload ID(s)  . . . . . . . . . . . . . . . . .\
    \ .  4\n       3.2.2.  FEC Object Transmission Information  . . . . . . . . .\
    \  5\n     3.3.  Procedures . . . . . . . . . . . . . . . . . . . . . . . .  7\n\
    \     3.4.  FEC Code Specification . . . . . . . . . . . . . . . . . .  7\n  \
    \     3.4.1.  Source Block Logistics . . . . . . . . . . . . . . . .  7\n    \
    \   3.4.2.  Sending and Receiving a Source Block . . . . . . . . .  8\n   4. \
    \ Small Block, Large Block, and Expandable FEC Scheme  . . . . .  9\n     4.1.\
    \  Introduction . . . . . . . . . . . . . . . . . . . . . . .  9\n     4.2.  Formats\
    \ and Codes  . . . . . . . . . . . . . . . . . . . .  9\n       4.2.1.  FEC Payload\
    \ ID(s)  . . . . . . . . . . . . . . . . . .  9\n       4.2.2.  FEC Object Transmission\
    \ Information  . . . . . . . . . 10\n     4.3.  Procedures . . . . . . . . . .\
    \ . . . . . . . . . . . . . . 11\n     4.4.  FEC Code Specification . . . . .\
    \ . . . . . . . . . . . . . 12\n   5.  Small Block Systematic FEC Scheme  . .\
    \ . . . . . . . . . . . . 12\n     5.1.  Introduction . . . . . . . . . . . .\
    \ . . . . . . . . . . . 12\n     5.2.  Formats and Codes  . . . . . . . . . .\
    \ . . . . . . . . . . 12\n       5.2.1.  FEC Payload ID(s)  . . . . . . . . .\
    \ . . . . . . . . . 12\n       5.2.2.  FEC Object Transmission Information  .\
    \ . . . . . . . . 13\n     5.3.  Procedures . . . . . . . . . . . . . . . . .\
    \ . . . . . . . 14\n     5.4.  FEC Code Specification . . . . . . . . . . . .\
    \ . . . . . . 15\n   6.  Compact FEC Scheme . . . . . . . . . . . . . . . . .\
    \ . . . . . 15\n     6.1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . 15\n     6.2.  Formats and Codes  . . . . . . . . . . . . . . . . .\
    \ . . . 15\n       6.2.1.  FEC Payload ID(s)  . . . . . . . . . . . . . . . .\
    \ . . 15\n       6.2.2.  FEC Object Transmission Information  . . . . . . . .\
    \ . 15\n     6.3.  Procedures . . . . . . . . . . . . . . . . . . . . . . . .\
    \ 15\n     6.4.  FEC Code Specification . . . . . . . . . . . . . . . . . . 16\n\
    \   7.  Security Considerations  . . . . . . . . . . . . . . . . . . . 16\n  \
    \ 8.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 16\n   9.\
    \  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 16\n   10. Changes\
    \ from Schemes Defined in RFC 3452 and RFC 3695  . . . . 17\n   11. References\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n     11.1. Normative\
    \ References . . . . . . . . . . . . . . . . . . . 18\n     11.2. Informative\
    \ References . . . . . . . . . . . . . . . . . . 18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The document specifies the following FEC Schemes according\
    \ to the\n   specification requirements of the FEC building block [RFC5052]:\n\
    \   o  Compact No-Code FEC Scheme\n   o  Small Block, Large Block, and Expandable\
    \ FEC Scheme\n   o  Small Block Systematic FEC Scheme\n   o  Compact FEC Scheme\n\
    \   This document inherits the context, language, declarations and\n   restrictions\
    \ of the FEC building block [RFC5052].  This document also\n   uses the terminology\
    \ of the companion document [RFC3453], which\n   describes the use of FEC codes\
    \ within the context of reliable IP\n   multicast transport and provides an introduction\
    \ to some commonly\n   used FEC codes.\n   Building blocks are defined in [RFC3048].\
    \  This document follows the\n   general guidelines provided in [RFC3269].\n \
    \  [RFC3452] and [RFC3695] contain previous versions of the FEC Schemes\n   defined\
    \ in this specification.  These RFCs were published in the\n   \"Experimental\"\
    \ category.  It was the stated intent of the RMT working\n   group to re-submit\
    \ these specifications as an IETF Proposed Standard\n   in due course.  This document\
    \ obsoletes [RFC3695].  [RFC3452] has\n   already been obsoleted by [RFC5052],\
    \ and this document assumes\n   responsibility for aspects of [RFC3452] that were\
    \ not included in\n   [RFC5052].\n   This Proposed Standard specification is thus\
    \ based on and backwards\n   compatible with the FEC Schemes defined in [RFC3452]\
    \ and [RFC3695],\n   updated according to accumulated experience and growing protocol\n\
    \   maturity since their original publication.  Said experience applies\n   both\
    \ to this specification itself and to congestion control\n   strategies related\
    \ to the use of this specification.\n   The differences between the FEC Scheme\
    \ specifications in [RFC3452]\n   and [RFC3695] and this document are listed in\
    \ Section 10.\n   Integer fields specified in this document are all encoded in\
    \ network\n   byte order.\n"
- title: 2.  Requirements Notation
  contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Compact No-Code FEC Scheme
  contents:
  - '3.  Compact No-Code FEC Scheme

    '
- title: 3.1.  Introduction
  contents:
  - "3.1.  Introduction\n   The Compact No-code FEC Scheme is a Fully-Specified FEC\
    \ Scheme.  The\n   scheme requires no FEC coding and is specified primarily to\
    \ allow\n   simple interoperability testing between different implementations\
    \ of\n   protocol instantiations that use the FEC building block.\n"
- title: 3.2.  Formats and Codes
  contents:
  - '3.2.  Formats and Codes

    '
- title: 3.2.1.  FEC Payload ID(s)
  contents:
  - "3.2.1.  FEC Payload ID(s)\n   The FEC Payload ID for the Compact No-Code FEC\
    \ Scheme is composed of\n   a Source Block Number and an Encoding Symbol ID as\
    \ shown in Figure 1.\n        0                   1                   2      \
    \             3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |     Source Block Number       |      Encoding Symbol ID       |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \  Figure 1: FEC Payload ID Format for Compact No-Code FEC Scheme\n   The Source\
    \ Block Number (SBN) is a 16-bit unsigned integer that is\n   used to identify\
    \ from which source block of the object the encoding\n   symbol in the payload\
    \ of the packet is generated.  There are two\n   possible modes: in the unique\
    \ SBN mode, each source block within the\n   object has a unique Source Block\
    \ Number associated with it, and in\n   the non-unique SBN mode, the same Source\
    \ Block Number may be used for\n   more than one source block within the object.\
    \  Which mode is being\n   used for an object is outside the scope of this document\
    \ and MUST be\n   communicated, either explicitly or implicitly, out-of-band to\n\
    \   receivers.\n   If the unique SBN mode is used, then successive Source Block\
    \ Numbers\n   are associated with consecutive source blocks of the object starting\n\
    \   with Source Block Number 0 for the first source block of the object.\n   In\
    \ this case, there are at most 2^^16 source blocks in the object.\n   If the non-unique\
    \ SBN mode is used, then the mapping from source\n   blocks to Source Block Numbers\
    \ MUST be communicated out-of-band to\n   receivers, and how this is done is outside\
    \ the scope of this\n   document.  This mapping could be implicit, for example,\
    \ determined by\n   the transmission order of the source blocks.  In non-unique\
    \ SBN mode,\n   packets for two different source blocks mapped to the same Source\n\
    \   Block Number SHOULD NOT be sent within an interval of time that is\n   shorter\
    \ than the transport time of a source block.  The transport\n   time of a source\
    \ block includes the amount of time needed to process\n   the source block at\
    \ the sender transport layer, the network transit\n   time for packets, and the\
    \ amount of time needed to process the source\n   block at the receiver transport.\
    \  This allows the receiver to clearly\n   decide which packets belong to which\
    \ source block.\n   The Encoding Symbol ID is a 16-bit unsigned integer that identifies\n\
    \   which specific encoding symbol generated from the source block is\n   carried\
    \ in the packet payload.  The exact details of the\n   correspondence between\
    \ Encoding Symbol IDs and the encoding symbols\n   in the packet payload are specified\
    \ in Section 3.4.\n"
- title: 3.2.2.  FEC Object Transmission Information
  contents:
  - '3.2.2.  FEC Object Transmission Information

    '
- title: 3.2.2.1.  Mandatory
  contents:
  - "3.2.2.1.  Mandatory\n   The mandatory FEC Object Transmission Information element\
    \ for the\n   Compact No-Code FEC Scheme is:\n   o  FEC Encoding ID: zero (0)\n"
- title: 3.2.2.2.  Common
  contents:
  - "3.2.2.2.  Common\n   The Common FEC Object Transmission Information elements\
    \ and their\n   value ranges for the Compact No-Code FEC Scheme are:\n   Transfer-Length:\
    \  a non-negative integer, less than 2^^48, indicating\n      the length of the\
    \ object in octets.\n   Encoding-Symbol-Length:  a non-negative integer, less\
    \ than 2^^16,\n      indicating the length of each encoding symbol in octets.\n\
    \   Maximum-Source-Block-Length:  a non-negative integer, less than\n      2^^32,\
    \ indicating the maximum number of source symbols in a source\n      block.\n\
    \   The encoded Common FEC Object Transmission Information is defined in\n   Figure\
    \ 2.\n       0                   1                   2                   3\n \
    \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      | \
    \                     Transfer Length                          |\n      +    \
    \                           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |       \
    \                        |           Reserved            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Encoding Symbol Length     | Max. Source Block Length (MSB)|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Max. Source Block Length (LSB)|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \   Figure 2: Encoded Common FEC Object Transmission Information (OTI)\n     \
    \                 for Compact No-Code FEC Scheme\n   The Transfer Length, Encoding\
    \ Symbol Length, and Maximum Source Block\n   Length are encoded as unsigned integers,\
    \ of length 48 bits, 16 bits,\n   and 32 bits, respectively.\n   All Encoding\
    \ Symbols of a transport object MUST have length equal to\n   the length specified\
    \ in the Encoding Symbol Length element, with the\n   optional exception of the\
    \ last source symbol of the last source block\n   (so that redundant padding is\
    \ not mandatory in this last symbol).\n   This last source symbol MUST be logically\
    \ padded out with zeroes when\n   another Encoding Symbol is computed based on\
    \ this source symbol to\n   ensure the same interpretation of this Encoding Symbol\
    \ value by the\n   sender and receiver.  However, this padding does not actually\
    \ need to\n   be sent with the data of the last source symbol.\n   The \"Reserved\"\
    \ field in the Encoded FEC Object Transmission\n   Information MUST be set to\
    \ zero by senders and its value MUST be\n   ignored by receivers.\n      Note:\
    \ this FEC Scheme was first defined in [RFC3695], which did\n      not require\
    \ that the Encoding Symbol Length should be the same for\n      every source block.\
    \  This document introduces a general\n      requirement that the Encoding Symbol\
    \ Length be the same across\n      source blocks.  Since no protocols were defined\
    \ that support\n      variation in the Encoding Symbol Length between source blocks,\n\
    \      this can be done without introducing backwards compatibility\n      issues.\n"
- title: 3.2.2.3.  Scheme-Specific
  contents:
  - "3.2.2.3.  Scheme-Specific\n   No Scheme-Specific FEC Object Transmission Information\
    \ elements are\n   defined by this FEC Scheme.\n"
- title: 3.3.  Procedures
  contents:
  - "3.3.  Procedures\n   The algorithm defined in Section 9.1. of [RFC5052] MUST\
    \ be used to\n   partition the file into source blocks.\n"
- title: 3.4.  FEC Code Specification
  contents:
  - "3.4.  FEC Code Specification\n   The Compact No-Code FEC Scheme does not require\
    \ FEC encoding or\n   decoding.  Instead, each encoding symbol consists of consecutive\n\
    \   bytes of a source block of the object.\n   The following two subsections describe\
    \ the details of how the Compact\n   No-Code FEC Scheme operates for each source\
    \ block of an object.\n"
- title: 3.4.1.  Source Block Logistics
  contents:
  - "3.4.1.  Source Block Logistics\n   Let X > 0 be the length of a source block\
    \ in bytes.  Let L > 0 be the\n   length of the encoding symbol contained in the\
    \ payload of each\n   packet.  The value of X and L are part of the FEC Object\
    \ Transmission\n   Information, and how this information is communicated to a\
    \ receiver\n   is outside the scope of this document.\n   For a given source block\
    \ X bytes in length with Source Block Number\n   I, let N = X/L rounded up to\
    \ the nearest integer.  The encoding\n   symbol carried in the payload of a packet\
    \ consists of a consecutive\n   portion of the source block.  The source block\
    \ is logically\n   partitioned into N encoding symbols, each L bytes in length,\
    \ and the\n   corresponding Encoding Symbol IDs range from 0 through N-1 starting\n\
    \   at the beginning of the source block and proceeding to the end.\n   Thus,\
    \ the encoding symbol with Encoding Symbol ID Y consists of bytes\n   L*Y through\
    \ L*(Y+1)-1 of the source block, where the bytes of the\n   source block are numbered\
    \ from 0 through X-1.  If X/L is not integral\n   then the last encoding symbol\
    \ with Encoding Symbol ID = N-1 consists\n   of bytes L*(N-1) through the last\
    \ byte X-1 of the source block, and\n   the remaining L*N - X bytes of the encoding\
    \ symbol can by padded out\n   with zeroes.\n   As an example, suppose that the\
    \ source block length X = 20,400 and\n   encoding symbol length L = 1,000.  The\
    \ encoding symbol with Encoding\n   Symbol ID = 10 contains bytes 10,000 through\
    \ 10,999 of the source\n   block, and the encoding symbol with Encoding Symbol\
    \ ID = 20 contains\n   bytes 20,000 through the last byte 20,399 of the source\
    \ block and the\n   remaining 600 bytes of the encoding symbol can be padded with\
    \ zeroes.\n   There are no restrictions beyond the rules stated above on how a\n\
    \   sender generates encoding symbols to send from a source block.\n   However,\
    \ it is recommended that an implementor refer to the companion\n   document [RFC3452]\
    \ for general advice.\n   In the next subsection, a procedure is recommended for\
    \ sending and\n   receiving source blocks.\n"
- title: 3.4.2.  Sending and Receiving a Source Block
  contents:
  - "3.4.2.  Sending and Receiving a Source Block\n   The following carousel procedure\
    \ is RECOMMENDED for a sender to\n   generate packets containing FEC Payload IDs\
    \ and corresponding\n   encoding symbols for a source block with Source Block\
    \ Number I.  Set\n   the length in bytes of an encoding symbol to a fixed value\
    \ L, which\n   is reasonable for a packet payload (e.g., ensure that the total\n\
    \   packet size does not exceed the MTU) and that is smaller than the\n   source\
    \ block length X, e.g., L = 1,000 for X >= 1,000.  Initialize Y\n   to a value\
    \ randomly chosen in the interval [0..N-1].  Repeat the\n   following for each\
    \ packet of the source block to be sent.\n   o  If Y <= N-1, then generate the\
    \ encoding symbol Y.\n   o  Within the FEC Payload ID, set the Source Block Length\
    \ to X, set\n      the Source Block Number = I, set the Encoding Symbol ID = Y,\
    \ place\n      the FEC Payload ID and the encoding symbol into the packet to\n\
    \      send.\n   o  In preparation for the generation of the next packet: if Y\
    \ < N-1\n      then increment Y by one else if Y = N-1 then reset Y to zero.\n\
    \   The following procedure is RECOMMENDED for a receiver to recover the\n   source\
    \ block based on receiving packets for the source block from a\n   sender that\
    \ is using the carousel procedure described above.  The\n   receiver can determine\
    \ from which source block a received packet was\n   generated by the Source Block\
    \ Number carried in the FEC Payload ID.\n   Upon receipt of the first FEC Payload\
    \ ID for a source block, the\n   receiver uses the Source Block Length and Encoding\
    \ Symbol Length\n   received out-of-band as part of the FEC Object Transmission\n\
    \   Information to determine the length X in bytes of the source block\n   and\
    \ length L in bytes of each encoding symbol.  The receiver\n   allocates space\
    \ for the X bytes that the source block requires.  The\n   receiver also computes\
    \ the length of the encoding symbol in the\n   payload of the packet by subtracting\
    \ the packet header length from\n   the total length of the received packet. \
    \ The receiver checks that\n   this symbol length is equal to L, except in the\
    \ case that this is the\n   last symbol of the source block in which case the\
    \ symbol length in\n   the packet may be less than L.  After calculating N = X/L\
    \ rounded up\n   to the nearest integer, the receiver allocates a boolean array\n\
    \   RECEIVED[0..N-1] with all N entries initialized to false to track\n   received\
    \ encoding symbols.  The receiver keeps receiving packets for\n   the source block\
    \ as long as there is at least one entry in RECEIVED\n   still set to false or\
    \ until the application decides to give up on\n   this source block and move on\
    \ to other source blocks.  For each\n   received packet for the source block (including\
    \ the first packet),\n   the steps to be taken to help recover the source block\
    \ are as\n   follows.  Let Y be the value of the Encoding Symbol ID within the\
    \ FEC\n   Payload ID of the packet.  If Y <= N-1, then the receiver copies the\n\
    \   encoding symbol into the appropriate place within the space reserved\n   for\
    \ the source block and sets RECEIVED[Y] = true.  If all N entries\n   of RECEIVED\
    \ are true, then the receiver has recovered the entire\n   source block.\n"
- title: 4.  Small Block, Large Block, and Expandable FEC Scheme
  contents:
  - '4.  Small Block, Large Block, and Expandable FEC Scheme

    '
- title: 4.1.  Introduction
  contents:
  - "4.1.  Introduction\n   This section defines an Under-Specified FEC Scheme for\
    \ Small Block\n   FEC codes, Large Block FEC codes, and Expandable FEC codes as\n\
    \   described in [RFC3453].\n"
- title: 4.2.  Formats and Codes
  contents:
  - '4.2.  Formats and Codes

    '
- title: 4.2.1.  FEC Payload ID(s)
  contents:
  - "4.2.1.  FEC Payload ID(s)\n   The FEC Payload ID is composed of a Source Block\
    \ Number and an\n   Encoding Symbol ID structured as shown in Figure 3.\n    \
    \    0                   1                   2                   3\n        0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     Source Block Number                       |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                      Encoding Symbol ID                       |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     Figure\
    \ 3: FEC Payload ID Format for Small Block, Large Block, and\n               \
    \            Expandable FEC Codes\n   The Source Block Number is a 32-bit unsigned\
    \ integer that identifies\n   from which source block of the object the encoding\
    \ symbol(s) in the\n   payload are generated.  These blocks are numbered consecutively\
    \ from\n   0 to N-1, where N is the number of source blocks in the object.\n \
    \  The Encoding Symbol ID is a 32-bit unsigned integer that identifies\n   which\
    \ specific encoding symbol(s) generated from the source block are\n   carried\
    \ in the packet payload.  The exact details of the\n   correspondence between\
    \ Encoding Symbol IDs and the encoding symbol(s)\n   in the packet payload are\
    \ dependent on the particular FEC Scheme\n   instance used as identified by the\
    \ FEC Encoding ID and by the FEC\n   Instance ID, and these details may be proprietary.\n"
- title: 4.2.2.  FEC Object Transmission Information
  contents:
  - '4.2.2.  FEC Object Transmission Information

    '
- title: 4.2.2.1.  Mandatory
  contents:
  - "4.2.2.1.  Mandatory\n   The mandatory FEC Object Transmission Information element\
    \ for the\n   Small Block, Large Block, and Expandable FEC Scheme are:\n   o \
    \ FEC Encoding ID: 128\n"
- title: 4.2.2.2.  Common
  contents:
  - "4.2.2.2.  Common\n   The Common FEC Object Transmission Information elements\
    \ and their\n   value ranges for the Small Block, Large Block, and Expandable\
    \ FEC\n   Scheme are:\n   FEC Instance ID:  a non-negative integer less than 2^^16.\n\
    \   Transfer-Length:  a non-negative integer less than 2^^48, indicating\n   \
    \   the length of the object in octets.\n   Encoding-Symbol-Length:  a non-negative\
    \ integer less than 2^^16,\n      indicating the length of each encoding symbol\
    \ in octets.\n   Maximum-Source-Block-Length:  a non-negative integer less than\
    \ 2^^32,\n      indicating the maximum number of source symbols in a source block.\n\
    \   The encoded Common FEC Object Transmission Information is defined in\n   Figure\
    \ 4.\n       0                   1                   2                   3\n \
    \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      | \
    \                     Transfer Length                          |\n      +    \
    \                           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |       \
    \                        |         FEC Instance ID       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Encoding Symbol Length     | Max. Source Block Length (MSB)|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Max. Source Block Length (LSB)|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \   Figure 4: Encoded Common FEC OTI for Small Block, Large Block, and\n     \
    \                      Expandable FEC Scheme\n   The Transfer Length (48 bits),\
    \ FEC Instance ID (16 bits), Encoding\n   Symbol Length (16 bits), and Maximum\
    \ Source Block Length (32 bits)\n   are encoded as unsigned integers.\n"
- title: 4.2.2.3.  Scheme-Specific
  contents:
  - "4.2.2.3.  Scheme-Specific\n   The Scheme-Specific FEC Object Transmission Information\
    \ field for the\n   Small Block, Large Block, and Expandable FEC Scheme provides\
    \ for the\n   possibility of Instance-specific FEC Object Transmission Information.\n\
    \   The format of the Scheme-Specific FEC Object Transmission Information\n  \
    \ for this FEC Scheme is defined in Figure 5.\n       0                   1  \
    \                 2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Length    |           Instance-specific FEC OTI           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      |   \
    \            Instance-specific FEC OTI contd.                |\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     Figure 5: Encoded Scheme-Specific FEC OTI for Small Block, Large\n     \
    \                Block, and Expandable FEC Scheme\n   The Scheme-Specific FEC\
    \ Object Transmission Information field\n   contains the following sub-fields:\n\
    \   Length (1 octet):  an unsigned integer that specifies the length of\n    \
    \  the Scheme-Specific FEC OTI in four-octet words (including this\n      length\
    \ field), except that the value zero indicates that no\n      Instance-specific\
    \ FEC OTI Information is provided.  When the\n      Length is zero, three padding\
    \ bytes containing value zero SHALL\n      follow the Length field to maintain\
    \ 4-octet alignment.\n   Instance-specific FEC OTI Information:   the contents\
    \ of this field\n      are FEC Scheme Instance-specific.\n   Note that in the\
    \ case of a Content Delivery protocol that supports\n   external signaling of\
    \ the total FEC Object Transmission Information\n   length, then the Scheme-Specific\
    \ FEC OTI field defined here is\n   optional.  Otherwise, this field MUST be included.\n"
- title: 4.3.  Procedures
  contents:
  - "4.3.  Procedures\n   The algorithm defined in Section 9.1. of [RFC5052] MUST\
    \ be used to\n   partition the file into source blocks.\n"
- title: 4.4.  FEC Code Specification
  contents:
  - "4.4.  FEC Code Specification\n   The FEC code specification and the correspondence\
    \ of Encoding Symbols\n   IDs to encoding symbols are defined by specific instances\
    \ of this\n   scheme and so are out of scope of this document.\n"
- title: 5.  Small Block Systematic FEC Scheme
  contents:
  - '5.  Small Block Systematic FEC Scheme

    '
- title: 5.1.  Introduction
  contents:
  - "5.1.  Introduction\n   This section defines an Under-Specified FEC Scheme for\
    \ Small Block\n   Systematic FEC codes as described in [RFC3453].  For Small Block\n\
    \   Systematic FEC codes, each source block is of length at most 65535\n   source\
    \ symbols.\n   Although these codes can generally be accommodated by the FEC\n\
    \   Encoding ID described in Section 4, a specific FEC Encoding ID is\n   defined\
    \ for Small Block Systematic FEC codes to allow more\n   flexibility and to retain\
    \ header compactness.  The small source block\n   length and small expansion factor\
    \ that often characterize systematic\n   codes may require the data source to\
    \ frequently change the source\n   block length.  To allow the dynamic variation\
    \ of the source block\n   length and to communicate it to the receivers with low\
    \ overhead, the\n   block length is included in the FEC Payload ID.\n"
- title: 5.2.  Formats and Codes
  contents:
  - '5.2.  Formats and Codes

    '
- title: 5.2.1.  FEC Payload ID(s)
  contents:
  - "5.2.1.  FEC Payload ID(s)\n   The FEC Payload ID is composed of the Source Block\
    \ Number, Source\n   Block Length, and the Encoding Symbol ID structured as shown\
    \ in\n   Figure 6.\n        0                   1                   2        \
    \           3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     Source Block Number                       |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |      Source Block Length      |       Encoding Symbol ID      |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Figure\
    \ 6: FEC Payload ID Format for Small Block Systematic FEC Scheme\n   The Source\
    \ Block Number is a 32-bit unsigned integer that identifies\n   from which source\
    \ block of the object the encoding symbol(s) in the\n   payload are generated.\
    \  These blocks are numbered consecutively from\n   0 to N-1, where N is the number\
    \ of source blocks in the object.\n   The Source Block Length is a 16-bit unsigned\
    \ integer that specifies\n   the length in units of source symbols of the source\
    \ block identified\n   by the Source Block Number.\n   The Encoding Symbol ID\
    \ is a 16-bit unsigned integer that identifies\n   which specific encoding symbol(s)\
    \ generated from the source block are\n   carried in the packet payload.  Each\
    \ encoding symbol is either an\n   original source symbol or a redundant symbol\
    \ generated by the\n   encoder.  The exact details of the correspondence between\
    \ Encoding\n   Symbol IDs and the encoding symbol(s) in the packet payload are\n\
    \   dependent on the particular FEC Scheme instance used as identified by\n  \
    \ the FEC Instance ID, and these details may be proprietary.\n"
- title: 5.2.2.  FEC Object Transmission Information
  contents:
  - '5.2.2.  FEC Object Transmission Information

    '
- title: 5.2.2.1.  Mandatory
  contents:
  - "5.2.2.1.  Mandatory\n   The mandatory FEC Object Transmission Information element\
    \ for the\n   Small Block Systematic FEC Scheme is:\n   o  FEC Encoding ID: 129\n"
- title: 5.2.2.2.  Common
  contents:
  - "5.2.2.2.  Common\n   The Common FEC Object Transmission Information elements\
    \ and their\n   value ranges for the Small Block Systematic FEC Scheme are:\n\
    \   FEC Instance ID:  a non-negative integer less than 2^^16.\n   Transfer-Length:\
    \  a non-negative integer less than 2^^48, indicating\n      the length of the\
    \ object in octets.\n   Encoding-Symbol-Length:  a non-negative integer less than\
    \ 2^^16,\n      indicating the length of each encoding symbol in octets.\n   Maximum-Source-Block-Length:\
    \  a non-negative integer less than 2^^16,\n      indicating the maximum number\
    \ of source symbols in a source block.\n   Max-Number-of-Encoding-Symbols:  a\
    \ non-negative integer less than\n      2^^16, indicating the maximum number of\
    \ encoding symbols per block\n      (i.e., source plus repair symbols in the case\
    \ of a systematic\n      code).\n   The encoded Common FEC Object Transmission\
    \ Information is defined in\n   Figure 7.\n       0                   1      \
    \             2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      Transfer Length                          |\n   \
    \   +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                               |         FEC Instance ID       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Encoding Symbol Length     |  Maximum Source Block Length  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Max. Num. of Encoding Symbols |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \     Figure 7: FEC OTI Format for Small Block Systematic FEC Scheme\n   The Transfer\
    \ Length (48 bits), FEC Instance ID (16 bits), Encoding\n   Symbol Length (16\
    \ bits), Maximum Source Block Length (16 bits), and\n   Maximum Number of Encoding\
    \ Symbols (16 bits) are encoded as unsigned\n   integers.\n   All Encoding Symbols\
    \ of a transport object MUST have length equal to\n   the length specified in\
    \ the Encoding Symbol Length field, with the\n   optional exception of the last\
    \ source symbol of the last source block\n   (so that redundant padding is not\
    \ mandatory in this last symbol).\n   This last source symbol MUST be logically\
    \ padded out with zeroes when\n   another Encoding Symbol is computed based on\
    \ this source symbol to\n   ensure the same interpretation of this Encoding Symbol\
    \ value by the\n   sender and receiver.  However, this padding need not be actually\
    \ sent\n   with the data of the last source symbol.\n      Note: this FEC Scheme\
    \ was first defined in [RFC3452], which did\n      not require that the Encoding\
    \ Symbol Length should be the same for\n      every source block.  However, no\
    \ protocols have been defined that\n      support variation in the Encoding Symbol\
    \ Length between source\n      blocks, and thus introduction of a general requirement\
    \ that the\n      Encoding Symbol Length be the same across source blocks (as\n\
    \      defined here) should not cause backwards compatibility issues and\n   \
    \   will aid interoperability.\n"
- title: 5.2.2.3.  Scheme-Specific
  contents:
  - "5.2.2.3.  Scheme-Specific\n   The Scheme-Specific FEC Object Transmission Information\
    \ format\n   defined in Section 4.2.2.3 SHALL be used.\n"
- title: 5.3.  Procedures
  contents:
  - "5.3.  Procedures\n   The algorithm defined in Section 9.1. of [RFC5052] MAY be\
    \ used to\n   partition the file into source blocks.  Otherwise, the FEC Scheme\n\
    \   instance MUST specify the algorithm that is used.\n"
- title: 5.4.  FEC Code Specification
  contents:
  - "5.4.  FEC Code Specification\n   The FEC code specification and the correspondence\
    \ of Encoding Symbols\n   IDs to encoding symbols are defined by specific instances\
    \ of this\n   scheme and so are out of scope of this document.\n"
- title: 6.  Compact FEC Scheme
  contents:
  - '6.  Compact FEC Scheme

    '
- title: 6.1.  Introduction
  contents:
  - "6.1.  Introduction\n   The Compact FEC Scheme is an Under-Specified FEC Scheme.\
    \  This FEC\n   Scheme is similar in spirit to the Compact No-Code FEC Scheme,\
    \ except\n   that a non-trivial FEC encoding (that is Under-Specified) may be\
    \ used\n   to generate encoding symbol(s) placed in the payload of each packet\n\
    \   and a corresponding FEC decoder may be used to produce the source\n   block\
    \ from received packets.\n"
- title: 6.2.  Formats and Codes
  contents:
  - '6.2.  Formats and Codes

    '
- title: 6.2.1.  FEC Payload ID(s)
  contents:
  - "6.2.1.  FEC Payload ID(s)\n   The FEC Payload ID format defined in Section 3.2.1\
    \ SHALL be used.\n"
- title: 6.2.2.  FEC Object Transmission Information
  contents:
  - '6.2.2.  FEC Object Transmission Information

    '
- title: 6.2.2.1.  Mandatory
  contents:
  - "6.2.2.1.  Mandatory\n   The mandatory FEC Object Transmission Information element\
    \ for the\n   Compact No-Code FEC Scheme is:\n   o  FEC Encoding ID: 130\n"
- title: 6.2.2.2.  Common
  contents:
  - "6.2.2.2.  Common\n   The Common FEC Object Transmission Information elements\
    \ and their\n   encoding are the same as defined for the Small Block, Large Block,\n\
    \   and Expandable FEC Scheme in Figure 4.\n"
- title: 6.2.2.3.  Scheme-Specific
  contents:
  - "6.2.2.3.  Scheme-Specific\n   The Scheme-Specific FEC Object Transmission Information\
    \ format\n   defined in Section 4.2.2.3 SHALL be used.\n"
- title: 6.3.  Procedures
  contents:
  - "6.3.  Procedures\n   The algorithm defined in Section 9.1. of [RFC5052] MUST\
    \ be used to\n   partition the file into source blocks.\n"
- title: 6.4.  FEC Code Specification
  contents:
  - "6.4.  FEC Code Specification\n   The FEC code specification and the correspondence\
    \ of Encoding Symbols\n   IDs to encoding symbols are defined by specific instances\
    \ of this\n   scheme and so are out of scope of this document.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This specification does not introduce any further\
    \ security\n   considerations beyond those described in [RFC5052].\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   This document is substantially based on [RFC3695] by\
    \ Michael Luby and\n   Lorenzo Vicisano and [RFC3452] by Michael Luby, Lorenzo\
    \ Vicisano, Jim\n   Gemmell, Luigi Rizzo, Mark Handley, and Jon Crowcroft.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   FEC Encoding IDs 0 and 130 were first defined and\
    \ registered in the\n   ietf:rmt:fec:encoding namespace by [RFC3695].  This document\
    \ updates\n   and obsoletes the definitions from that specification.  References\
    \ to\n   that specification should be replaced with references to this\n   document.\n\
    \   FEC Encoding IDs 128 and 129 were first defined and registered in the\n  \
    \ ietf:rmt:fec:encoding namespace by [RFC3452].  This document updates\n   and\
    \ obsoletes the definitions from that specification.  References to\n   that specification\
    \ should be replaced with references to this\n   document.\n   Values of FEC Encoding\
    \ IDs and FEC Instance IDs are subject to IANA\n   registration.  For general\
    \ guidelines on IANA considerations as they\n   apply to this document, see [RFC5052].\n\
    \   This document assigns the Fully-Specified FEC Encoding ID 0 under the\n  \
    \ ietf:rmt:fec:encoding name-space (which was previously assigned by\n   [RFC3695],\
    \ which is obsoleted by this document) to \"Compact No-Code\"\n   as specified\
    \ in Section 3 above.\n   This document assigns the Under-Specified FEC Encoding\
    \ ID 128 under\n   the ietf:rmt:fec:encoding name-space (which was previously\
    \ assigned\n   by [RFC3452]) to \"Small Block, Large Block, and Please note that\
    \ we\n   have added a comma between large block and expandable throughout this\n\
    \   document (RFC Editor style is to include a comme before the last item\n  \
    \ of a series).  If you do not object, we will ask IANA to include this\n   comma\
    \ in their registry for consistency. --> Expandable FEC Codes\" as\n   specified\
    \ in Section 4 above.\n   This document assigns the Under-Specified FEC Encoding\
    \ ID 129 under\n   the ietf:rmt:fec:encoding name-space (which was previously\
    \ assigned\n   by [RFC3452]) to \"Small Block Systematic FEC Codes\" as specified\
    \ in\n   Section 5 above.\n   This document assigns the Under-Specified FEC Encoding\
    \ ID 130 under\n   the ietf:rmt:fec:encoding name-space (which was previously\
    \ assigned\n   by [RFC3695], which is obsoleted by this document) to \"Compact\
    \ FEC\"\n   as specified in Section 6 above.\n   As FEC Encoding IDs 128, 129,\
    \ and 130 are Under-Specified, \"FEC\n   Instance ID\" sub-name-spaces must be\
    \ established, in accordance to\n   [RFC5052].  Hence, this document also assumes\
    \ responsibility for the\n   \"FEC Instance ID\" registries named.\n      ietf:rmt:fec:encoding:instance:128,\
    \ scoped by ietf:rmt:fec:\n      encoding = 128\n      ietf:rmt:fec:encoding:instance:129,\
    \ scoped by ietf:rmt:fec:\n      encoding = 129\n      ietf:rmt:fec:encoding:instance:130,\
    \ scoped by ietf:rmt:fec:\n      encoding = 130\n   The values that can be assigned\
    \ within these namespaces are non-\n   negative numeric indices.  Assignment requests\
    \ are granted on a\n   \"First Come First Served\" basis.  [RFC5052] specifies\
    \ additional\n   criteria that MUST be met for the assignment within the generic\
    \ ietf:\n   rmt:fec:encoding:instance name-space.  These criteria also apply to\n\
    \   ietf:rmt:fec:encoding:instance:128, ietf:rmt:fec:encoding:instance:\n   129,\
    \ and ietf:rmt:fec:encoding:instance:130.\n"
- title: 10.  Changes from Schemes Defined in RFC 3452 and RFC 3695
  contents:
  - "10.  Changes from Schemes Defined in RFC 3452 and RFC 3695\n   This section describes\
    \ the changes between the Experimental versions\n   of these FEC Scheme specifications\
    \ contained in RFC 3452 [RFC3452]\n   and RFC 3695 [RFC3695] and those defined\
    \ in this specification:\n   o  Scheme definitions have been updated to meet the\
    \ requirements of\n      [RFC5052].\n   o  Complete encoding formats for the FEC\
    \ Object Transmission\n      Information for each scheme are defined here, instead\
    \ of within\n      content delivery protocol specifications, since the exact format\n\
    \      depends on the FEC Scheme.\n   o  The previous specifications for the Compact\
    \ No-Code and Small\n      Block Systematic FEC Schemes did not require that all\
    \ encoding\n      symbols of the object should have the same length.  This\n \
    \     requirement is introduced in this specification.  Since no\n      protocols\
    \ have been defined that support variation of the encoding\n      symbol length\
    \ within an object this should not cause backwards\n      compatibility issues.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC5052]  Watson, M., Luby, M., and L. Vicisano, \"Forward Error\n\
    \              Correction (FEC) Building Block\", RFC 5052, August 2007.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC3452]  Luby, M., Vicisano, L., Gemmell,\
    \ J., Rizzo, L., Handley,\n              M., and J. Crowcroft, \"Forward Error\
    \ Correction (FEC)\n              Building Block\", RFC 3452, December 2002.\n\
    \   [RFC3453]  Luby, M., Vicisano, L., Gemmell, J., Rizzo, L., Handley,\n    \
    \          M., and J. Crowcroft, \"The Use of Forward Error Correction\n     \
    \         (FEC) in Reliable Multicast\", RFC 3453, December 2002.\n   [RFC3269]\
    \  Kermode, R. and L. Vicisano, \"Author Guidelines for\n              Reliable\
    \ Multicast Transport (RMT) Building Blocks and\n              Protocol Instantiation\
    \ documents\", RFC 3269, April 2002.\n   [RFC3048]  Whetten, B., Vicisano, L.,\
    \ Kermode, R., Handley, M.,\n              Floyd, S., and M. Luby, \"Reliable\
    \ Multicast Transport\n              Building Blocks for One-to-Many Bulk-Data\
    \ Transfer\",\n              RFC 3048, January 2001.\n   [RFC3695]  Luby, M. and\
    \ L. Vicisano, \"Compact Forward Error\n              Correction (FEC) Schemes\"\
    , RFC 3695, February 2004.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Mark Watson\n   Digital Fountain\n   39141 Civic Center\
    \ Drive\n   Suite 300\n   Fremont, CA  94538\n   USA\n   EMail: mark@digitalfountain.com\n"
