- title: __initial_text__
  contents:
  - '   Internet Security Association and Key Management Protocol (ISAKMP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes a protocol utilizing security concepts necessary\n\
    \   for establishing Security Associations (SA) and cryptographic keys in\n  \
    \ an Internet environment.  A Security Association protocol that\n   negotiates,\
    \ establishes, modifies and deletes Security Associations\n   and their attributes\
    \ is required for an evolving Internet, where\n   there will be numerous security\
    \ mechanisms and several options for\n   each security mechanism.  The key management\
    \ protocol must be robust\n   in order to handle public key generation for the\
    \ Internet community\n   at large and private key requirements for those private\
    \ networks with\n   that requirement.  The Internet Security Association and Key\n\
    \   Management Protocol (ISAKMP) defines the procedures for\n   authenticating\
    \ a communicating peer, creation and management of\n   Security Associations,\
    \ key generation techniques, and threat\n   mitigation (e.g.  denial of service\
    \ and replay attacks).  All of\n   these are necessary to establish and maintain\
    \ secure communications\n   (via IP Security Service or any other security protocol)\
    \ in an\n   Internet environment.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1 Introduction                                        \
    \             4\n     1.1 Requirements Terminology  . . . . . . . . . . . . .\
    \ . . . .  5\n     1.2 The Need for Negotiation  . . . . . . . . . . . . . . .\
    \ . .  5\n     1.3 What can be Negotiated?   . . . . . . . . . . . . . . . . .\
    \  6\n     1.4 Security Associations and Management  . . . . . . . . . . .  7\n\
    \       1.4.1 Security Associations and Registration  . . . . . . . .  7\n   \
    \    1.4.2 ISAKMP Requirements   . . . . . . . . . . . . . . . . .  8\n     1.5\
    \ Authentication  . . . . . . . . . . . . . . . . . . . . . .  8\n       1.5.1\
    \ Certificate Authorities   . . . . . . . . . . . . . . .  9\n       1.5.2 Entity\
    \ Naming   . . . . . . . . . . . . . . . . . . . .  9\n       1.5.3 ISAKMP Requirements\
    \   . . . . . . . . . . . . . . . . . 10\n     1.6 Public Key Cryptography . .\
    \ . . . . . . . . . . . . . . . . 10\n       1.6.1 Key Exchange Properties   .\
    \ . . . . . . . . . . . . . . 11\n       1.6.2 ISAKMP Requirements   . . . . .\
    \ . . . . . . . . . . . . 12\n     1.7 ISAKMP Protection . . . . . . . . . . .\
    \ . . . . . . . . . . 12\n       1.7.1 Anti-Clogging (Denial of Service)   . .\
    \ . . . . . . . . 12\n       1.7.2 Connection Hijacking  . . . . . . . . . . .\
    \ . . . . . . 13\n       1.7.3 Man-in-the-Middle Attacks   . . . . . . . . . .\
    \ . . . . 13\n     1.8 Multicast Communications  . . . . . . . . . . . . . . .\
    \ . . 13\n   2 Terminology and Concepts                                      \
    \  14\n     2.1 ISAKMP Terminology  . . . . . . . . . . . . . . . . . . . . 14\n\
    \     2.2 ISAKMP Placement  . . . . . . . . . . . . . . . . . . . . . 16\n   \
    \  2.3 Negotiation Phases  . . . . . . . . . . . . . . . . . . . . 16\n     2.4\
    \ Identifying Security Associations . . . . . . . . . . . . . 17\n     2.5 Miscellaneous\
    \ . . . . . . . . . . . . . . . . . . . . . . . 20\n       2.5.1 Transport Protocol\
    \  . . . . . . . . . . . . . . . . . . 20\n       2.5.2 RESERVED Fields   . .\
    \ . . . . . . . . . . . . . . . . . 20\n       2.5.3 Anti-Clogging Token (\"Cookie\"\
    ) Creation   . . . . . . . 20\n   3 ISAKMP Payloads                          \
    \                       21\n     3.1 ISAKMP Header Format  . . . . . . . . . .\
    \ . . . . . . . . . 21\n     3.2 Generic Payload Header  . . . . . . . . . . .\
    \ . . . . . . . 25\n     3.3 Data Attributes . . . . . . . . . . . . . . . . .\
    \ . . . . . 25\n     3.4 Security Association Payload  . . . . . . . . . . . .\
    \ . . . 27\n     3.5 Proposal Payload  . . . . . . . . . . . . . . . . . . . .\
    \ . 28\n     3.6 Transform Payload . . . . . . . . . . . . . . . . . . . . . 29\n\
    \     3.7 Key Exchange Payload  . . . . . . . . . . . . . . . . . . . 31\n   \
    \  3.8 Identification Payload  . . . . . . . . . . . . . . . . . . 32\n     3.9\
    \ Certificate Payload . . . . . . . . . . . . . . . . . . . . 33\n     3.10 Certificate\
    \ Request Payload  . . . . . . . . . . . . . . . 34\n     3.11 Hash Payload  \
    \ . . . . . . . . . . . . . . . . . . . . . . 36\n     3.12 Signature Payload\
    \  . . . . . . . . . . . . . . . . . . . . 37\n     3.13 Nonce Payload  . . .\
    \ . . . . . . . . . . . . . . . . . . . 37\n     3.14 Notification Payload   .\
    \ . . . . . . . . . . . . . . . . . 38\n       3.14.1 Notify Message Types   .\
    \ . . . . . . . . . . . . . . . 40\n     3.15 Delete Payload   . . . . . . . .\
    \ . . . . . . . . . . . . . 41\n     3.16 Vendor ID Payload  . . . . . . . . .\
    \ . . . . . . . . . . . 43\n   4 ISAKMP Exchanges                            \
    \                    44\n     4.1 ISAKMP Exchange Types . . . . . . . . . . .\
    \ . . . . . . . . 45\n       4.1.1 Notation  . . . . . . . . . . . . . . . . .\
    \ . . . . . . 46\n     4.2 Security Association Establishment  . . . . . . . .\
    \ . . . . 46\n       4.2.1 Security Association Establishment Examples   . . .\
    \ . . 48\n     4.3 Security Association Modification . . . . . . . . . . . . .\
    \ 50\n     4.4 Base Exchange . . . . . . . . . . . . . . . . . . . . . . . 51\n\
    \     4.5 Identity Protection Exchange  . . . . . . . . . . . . . . . 52\n   \
    \  4.6 Authentication Only Exchange  . . . . . . . . . . . . . . . 54\n     4.7\
    \ Aggressive Exchange . . . . . . . . . . . . . . . . . . . . 55\n     4.8 Informational\
    \ Exchange  . . . . . . . . . . . . . . . . . . 57\n   5 ISAKMP Payload Processing\
    \                                       58\n     5.1 General Message Processing\
    \  . . . . . . . . . . . . . . . . 58\n     5.2 ISAKMP Header Processing  . .\
    \ . . . . . . . . . . . . . . . 59\n     5.3 Generic Payload Header Processing\
    \ . . . . . . . . . . . . . 61\n     5.4 Security Association Payload Processing\
    \ . . . . . . . . . . 62\n     5.5 Proposal Payload Processing . . . . . . . .\
    \ . . . . . . . . 63\n     5.6 Transform Payload Processing  . . . . . . . . .\
    \ . . . . . . 64\n     5.7 Key Exchange Payload Processing . . . . . . . . . .\
    \ . . . . 65\n     5.8 Identification Payload Processing . . . . . . . . . . .\
    \ . . 66\n     5.9 Certificate Payload Processing  . . . . . . . . . . . . . .\
    \ 66\n     5.10 Certificate Request Payload Processing   . . . . . . . . . 67\n\
    \     5.11 Hash Payload Processing  . . . . . . . . . . . . . . . . . 69\n   \
    \  5.12 Signature Payload Processing   . . . . . . . . . . . . . . 69\n     5.13\
    \ Nonce Payload Processing   . . . . . . . . . . . . . . . . 70\n     5.14 Notification\
    \ Payload Processing  . . . . . . . . . . . . . 71\n     5.15 Delete Payload Processing\
    \  . . . . . . . . . . . . . . . . 73\n   6 Conclusions                      \
    \                               75\n   A ISAKMP Security Association Attributes\
    \                          77\n     A.1 Background/Rationale  . . . . . . . .\
    \ . . . . . . . . . . . 77\n     A.2 Internet IP Security DOI Assigned Value .\
    \ . . . . . . . . . 77\n     A.3 Supported Security Protocols  . . . . . . . .\
    \ . . . . . . . 77\n     A.4 ISAKMP Identification Type Values . . . . . . . .\
    \ . . . . . 78\n       A.4.1 ID_IPV4_ADDR  . . . . . . . . . . . . . . . . . .\
    \ . . . 78\n       A.4.2 ID_IPV4_ADDR_SUBNET . . . . . . . . . . . . . . . . .\
    \ . 78\n       A.4.3 ID_IPV6_ADDR  . . . . . . . . . . . . . . . . . . . . . 78\n\
    \       A.4.4 ID_IPV6_ADDR_SUBNET   . . . . . . . . . . . . . . . . . 78\n   B\
    \ Defining a new Domain of Interpretation                         79\n     B.1\
    \ Situation . . . . . . . . . . . . . . . . . . . . . . . . . 79\n     B.2 Security\
    \ Policies . . . . . . . . . . . . . . . . . . . . . 80\n     B.3 Naming Schemes\
    \  . . . . . . . . . . . . . . . . . . . . . . 80\n     B.4 Syntax for Specifying\
    \ Security Services . . . . . . . . . . 80\n     B.5 Payload Specification . .\
    \ . . . . . . . . . . . . . . . . . 80\n     B.6 Defining new Exchange Types .\
    \ . . . . . . . . . . . . . . . 80\n   Security Considerations               \
    \                            81\n   IANA Considerations                      \
    \                         81\n   Domain of Interpretation                    \
    \                      81\n   Supported Security Protocols                   \
    \                   82\n   Acknowledgements                                  \
    \                82\n   References                                           \
    \             82\n   Authors' Addresses                                      \
    \          85\n   Full Copyright Statement                                   \
    \       86\n"
- title: List of Figures
  contents:
  - "List of Figures\n   1   ISAKMP Relationships  . . . . . . . . . . . . . . . .\
    \ . . . 16\n   2   ISAKMP Header Format  . . . . . . . . . . . . . . . . . . .\
    \ 22\n   3   Generic Payload Header  . . . . . . . . . . . . . . . . . . 25\n\
    \   4   Data Attributes . . . . . . . . . . . . . . . . . . . . . . 26\n   5 \
    \  Security Association Payload  . . . . . . . . . . . . . . . 27\n   6   Proposal\
    \ Payload Format . . . . . . . . . . . . . . . . . . 28\n   7   Transform Payload\
    \ Format  . . . . . . . . . . . . . . . . . 30\n   8   Key Exchange Payload Format\
    \ . . . . . . . . . . . . . . . . 31\n   9   Identification Payload Format . .\
    \ . . . . . . . . . . . . . 32\n   10  Certificate Payload Format  . . . . . .\
    \ . . . . . . . . . . 33\n   11  Certificate Request Payload Format  . . . . .\
    \ . . . . . . . 34\n   12  Hash Payload Format . . . . . . . . . . . . . . . .\
    \ . . . . 36\n   13  Signature Payload Format  . . . . . . . . . . . . . . . .\
    \ . 37\n   14  Nonce Payload Format  . . . . . . . . . . . . . . . . . . . 38\n\
    \   15  Notification Payload Format . . . . . . . . . . . . . . . . 39\n   16\
    \  Delete Payload Format . . . . . . . . . . . . . . . . . . . 42\n   17  Vendor\
    \ ID Payload Format  . . . . . . . . . . . . . . . . . 44\n"
- title: 1 Introduction
  contents:
  - "1 Introduction\n   This document describes an Internet Security Association and\
    \ Key\n   Management Protocol (ISAKMP). ISAKMP combines the security concepts\n\
    \   of authentication, key management, and security associations to\n   establish\
    \ the required security for government, commercial, and\n   private communications\
    \ on the Internet.\n   The Internet Security Association and Key Management Protocol\n\
    \   (ISAKMP) defines procedures and packet formats to establish,\n   negotiate,\
    \ modify and delete Security Associations (SA). SAs contain\n   all the information\
    \ required for execution of various network\n   security services, such as the\
    \ IP layer services (such as header\n   authentication and payload encapsulation),\
    \ transport or application\n   layer services, or self-protection of negotiation\
    \ traffic.  ISAKMP\n   defines payloads for exchanging key generation and authentication\n\
    \   data.  These formats provide a consistent framework for transferring\n   key\
    \ and authentication data which is independent of the key\n   generation technique,\
    \ encryption algorithm and authentication\n   mechanism.\n   ISAKMP is distinct\
    \ from key exchange protocols in order to cleanly\n   separate the details of\
    \ security association management (and key\n   management) from the details of\
    \ key exchange.  There may be many\n   different key exchange protocols, each\
    \ with different security\n   properties.  However, a common framework is required\
    \ for agreeing to\n   the format of SA attributes, and for negotiating, modifying,\
    \ and\n   deleting SAs.  ISAKMP serves as this common framework.\n   Separating\
    \ the functionality into three parts adds complexity to the\n   security analysis\
    \ of a complete ISAKMP implementation.  However, the\n   separation is critical\
    \ for interoperability between systems with\n   differing security requirements,\
    \ and should also simplify the\n   analysis of further evolution of a ISAKMP server.\n\
    \   ISAKMP is intended to support the negotiation of SAs for security\n   protocols\
    \ at all layers of the network stack (e.g., IPSEC, TLS, TLSP,\n   OSPF, etc.).\
    \  By centralizing the management of the security\n   associations, ISAKMP reduces\
    \ the amount of duplicated functionality\n   within each security protocol.  ISAKMP\
    \ can also reduce connection\n   setup time, by negotiating a whole stack of services\
    \ at once.\n   The remainder of section 1 establishes the motivation for security\n\
    \   negotiation and outlines the major components of ISAKMP, i.e.\n   Security\
    \ Associations and Management, Authentication, Public Key\n   Cryptography, and\
    \ Miscellaneous items.  Section 2 presents the\n   terminology and concepts associated\
    \ with ISAKMP. Section 3 describes\n   the different ISAKMP payload formats. \
    \ Section 4 describes how the\n   payloads of ISAKMP are composed together as\
    \ exchange types to\n   establish security associations and perform key exchanges\
    \ in an\n   authenticated manner.  Additionally, security association\n   modification,\
    \ deletion, and error notification are discussed.\n   Section 5 describes the\
    \ processing of each payload within the context\n   of ISAKMP exchanges, including\
    \ error handling and associated actions.\n   The appendices provide the attribute\
    \ values necessary for ISAKMP and\n   requirement for defining a new Domain of\
    \ Interpretation (DOI) within\n   ISAKMP.\n"
- title: 1.1 Requirements Terminology
  contents:
  - "1.1 Requirements Terminology\n   The keywords MUST, MUST NOT, REQUIRED, SHALL,\
    \ SHALL NOT, SHOULD,\n   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they\
    \ appear in this\n   document, are to be interpreted as described in [RFC-2119].\n"
- title: 1.2 The Need for Negotiation
  contents:
  - "1.2 The Need for Negotiation\n   ISAKMP extends the assertion in [DOW92] that\
    \ authentication and key\n   exchanges must be combined for better security to\
    \ include security\n   association exchanges.  The security services required\
    \ for\n   communications depends on the individual network configurations and\n\
    \   environments.  Organizations are setting up Virtual Private Networks\n   (VPN),\
    \ also known as Intranets, that will require one set of security\n   functions\
    \ for communications within the VPN and possibly many\n   different security functions\
    \ for communications outside the VPN to\n   support geographically separate organizational\
    \ components, customers,\n   suppliers, sub-contractors (with their own VPNs),\
    \ government, and\n   others.  Departments within large organizations may require\
    \ a number\n   of security associations to separate and protect data (e.g.\n \
    \  personnel data, company proprietary data, medical) on internal\n   networks\
    \ and other security associations to communicate within the\n   same department.\
    \  Nomadic users wanting to \"phone home\" represent\n   another set of security\
    \ requirements.  These requirements must be\n   tempered with bandwidth challenges.\
    \  Smaller groups of people may\n   meet their security requirements by setting\
    \ up \"Webs of Trust\".\n   ISAKMP exchanges provide these assorted networking\
    \ communities the\n   ability to present peers with the security functionality\
    \ that the\n   user supports in an authenticated and protected manner for agreement\n\
    \   upon a common set of security attributes, i.e.  an interoperable\n   security\
    \ association.\n"
- title: 1.3 What can be Negotiated?
  contents:
  - "1.3 What can be Negotiated?\n   Security associations must support different\
    \ encryption algorithms,\n   authentication mechanisms, and key establishment\
    \ algorithms for other\n   security protocols, as well as IP Security.  Security\
    \ associations\n   must also support host-oriented certificates for lower layer\n\
    \   protocols and user- oriented certificates for higher level protocols.\n  \
    \ Algorithm and mechanism independence is required in applications such\n   as\
    \ e-mail, remote login, and file transfer, as well as in session\n   oriented\
    \ protocols, routing protocols, and link layer protocols.\n   ISAKMP provides\
    \ a common security association and key establishment\n   protocol for this wide\
    \ range of security protocols, applications,\n   security requirements, and network\
    \ environments.\n   ISAKMP is not bound to any specific cryptographic algorithm,\
    \ key\n   generation technique, or security mechanism.  This flexibility is\n\
    \   beneficial for a number of reasons.  First, it supports the dynamic\n   communications\
    \ environment described above.  Second, the independence\n   from specific security\
    \ mechanisms and algorithms provides a forward\n   migration path to better mechanisms\
    \ and algorithms.  When improved\n   security mechanisms are developed or new\
    \ attacks against current\n   encryption algorithms, authentication mechanisms\
    \ and key exchanges\n   are discovered, ISAKMP will allow the updating of the\
    \ algorithms and\n   mechanisms without having to develop a completely new KMP\
    \ or patch\n   the current one.\n   ISAKMP has basic requirements for its authentication\
    \ and key exchange\n   components.  These requirements guard against denial of\
    \ service,\n   replay / reflection, man-in-the-middle, and connection hijacking\n\
    \   attacks.  This is important because these are the types of attacks\n   that\
    \ are targeted against protocols.  Complete Security Association\n   (SA) support,\
    \ which provides mechanism and algorithm independence,\n   and protection from\
    \ protocol threats are the strengths of ISAKMP.\n"
- title: 1.4 Security Associations and Management
  contents:
  - "1.4 Security Associations and Management\n   A Security Association (SA) is a\
    \ relationship between two or more\n   entities that describes how the entities\
    \ will utilize security\n   services to communicate securely.  This relationship\
    \ is represented\n   by a set of information that can be considered a contract\
    \ between the\n   entities.  The information must be agreed upon and shared between\
    \ all\n   the entities.  Sometimes the information alone is referred to as an\n\
    \   SA, but this is just a physical instantiation of the existing\n   relationship.\
    \  The existence of this relationship, represented by the\n   information, is\
    \ what provides the agreed upon security information\n   needed by entities to\
    \ securely interoperate.  All entities must\n   adhere to the SA for secure communications\
    \ to be possible.  When\n   accessing SA attributes, entities use a pointer or\
    \ identifier refered\n   to as the Security Parameter Index (SPI). [SEC-ARCH]\
    \ provides details\n   on IP Security Associations (SA) and Security Parameter\
    \ Index (SPI)\n   definitions.\n"
- title: 1.4.1 Security Associations and Registration
  contents:
  - "1.4.1 Security Associations and Registration\n   The SA attributes required and\
    \ recommended for the IP Security (AH,\n   ESP) are defined in [SEC-ARCH].  The\
    \ attributes specified for an IP\n   Security SA include, but are not limited\
    \ to, authentication\n   mechanism, cryptographic algorithm, algorithm mode, key\
    \ length, and\n   Initialization Vector (IV).  Other protocols that provide algorithm\n\
    \   and mechanism independent security MUST define their requirements for\n  \
    \ SA attributes.  The separation of ISAKMP from a specific SA\n   definition is\
    \ important to ensure ISAKMP can es tablish SAs for all\n   possible security\
    \ protocols and applications.\n   NOTE: See [IPDOI] for a discussion of SA attributes\
    \ that should be\n   considered when defining a security protocol or application.\n\
    \   In order to facilitate easy identification of specific attributes\n   (e.g.\
    \  a specific encryption algorithm) among different network\n   entites the attributes\
    \ must be assigned identifiers and these\n   identifiers must be registered by\
    \ a central authority.  The Internet\n   Assigned Numbers Authority (IANA) provides\
    \ this function for the\n   Internet.\n"
- title: 1.4.2 ISAKMP Requirements
  contents:
  - "1.4.2 ISAKMP Requirements\n   Security Association (SA) establishment MUST be\
    \ part of the key\n   management protocol defined for IP based networks.  The\
    \ SA concept is\n   required to support security protocols in a diverse and dynamic\n\
    \   networking environment.  Just as authentication and key exchange must\n  \
    \ be linked to provide assurance that the key is established with the\n   authenticated\
    \ party [DOW92], SA establishment must be linked with the\n   authentication and\
    \ the key exchange protocol.\n   ISAKMP provides the protocol exchanges to establish\
    \ a security\n   association between negotiating entities followed by the\n  \
    \ establishment of a security association by these negotiating entities\n   in\
    \ behalf of some protocol (e.g.  ESP/AH). First, an initial protocol\n   exchange\
    \ allows a basic set of security attributes to be agreed upon.\n   This basic\
    \ set provides protection for subsequent ISAKMP exchanges.\n   It also indicates\
    \ the authentication method and key exchange that\n   will be performed as part\
    \ of the ISAKMP protocol.  If a basic set of\n   security attributes is already\
    \ in place between the negotiating\n   server entities, the initial ISAKMP exchange\
    \ may be skipped and the\n   establishment of a security association can be done\
    \ directly.  After\n   the basic set of security attributes has been agreed upon,\
    \ initial\n   identity authenticated, and required keys generated, the established\n\
    \   SA can be used for subsequent communications by the entity that\n   invoked\
    \ ISAKMP.  The basic set of SA attributes that MUST be\n   implemented to provide\
    \ ISAKMP interoperability are defined in\n   Appendix A.\n"
- title: 1.5 Authentication
  contents:
  - "1.5 Authentication\n   A very important step in establishing secure network communications\n\
    \   is authentication of the entity at the other end of the\n   communication.\
    \  Many authentication mechanisms are available.\n   Authentication mechanisms\
    \ fall into two catagories of strength - weak\n   and strong.  Sending cleartext\
    \ keys or other unprotected\n   authenticating information over a network is weak,\
    \ due to the threat\n   of reading them with a network sniffer.  Additionally,\
    \ sending one-\n   way hashed poorly-chosen keys with low entropy is also weak,\
    \ due to\n   the threat of brute-force guessing attacks on the sniffed messages.\n\
    \   While passwords can be used for establishing identity, they are not\n   considered\
    \ in this context because of recent statements from the\n   Internet Architecture\
    \ Board [IAB].  Digital signatures, such as the\n   Digital Signature Standard\
    \ (DSS) and the Rivest-Shamir-Adleman (RSA)\n   signature, are public key based\
    \ strong authentication mechanisms.\n   When using public key digital signatures\
    \ each entity requires a\n   public key and a private key.  Certificates are an\
    \ essential part of\n   a digital signature authentication mechanism.  Certificates\
    \ bind a\n   specific entity's identity (be it host, network, user, or\n   application)\
    \ to its public keys and possibly other security-related\n   information such\
    \ as privileges, clearances, and compartments.\n   Authentication based on digital\
    \ signatures requires a trusted third\n   party or certificate authority to create,\
    \ sign and properly\n   distribute certificates.  For more detailed information\
    \ on digital\n   signatures, such as DSS and RSA, and certificates see [Schneier].\n"
- title: 1.5.1 Certificate Authorities
  contents:
  - "1.5.1 Certificate Authorities\n   Certificates require an infrastructure for\
    \ generation, verification,\n   revocation, management and distribution.  The\
    \ Internet Policy\n   Registration Authority (IPRA) [RFC-1422] has been established\
    \ to\n   direct this infrastructure for the IETF. The IPRA certifies Policy\n\
    \   Certification Authorities (PCA). PCAs control Certificate Authorities\n  \
    \ (CA) which certify users and subordinate entities.  Current\n   certificate\
    \ related work includes the Domain Name System (DNS)\n   Security Extensions [DNSSEC]\
    \ which will provide signed entity keys in\n   the DNS. The Public Key Infrastucture\
    \ (PKIX) working group is\n   specifying an Internet profile for X.509 certificates.\
    \  There is also\n   work going on in industry to develop X.500 Directory Services\
    \ which\n   would provide X.509 certificates to users.  The U.S. Post Office is\n\
    \   developing a (CA) hierarchy.  The NIST Public Key Infrastructure\n   Working\
    \ Group has also been doing work in this area.  The DOD Multi\n   Level Information\
    \ System Security Initiative (MISSI) program has\n   begun deploying a certificate\
    \ infrastructure for the U.S. Government.\n   Alternatively, if no infrastructure\
    \ exists, the PGP Web of Trust\n   certificates can be used to provide user authentication\
    \ and privacy\n   in a community of users who know and trust each other.\n"
- title: 1.5.2 Entity Naming
  contents:
  - "1.5.2 Entity Naming\n   An entity's name is its identity and is bound to its\
    \ public keys in\n   certificates.  The CA MUST define the naming semantics for\
    \ the\n   certificates it issues.  See the UNINETT PCA Policy Statements\n   [Berge]\
    \ for an example of how a CA defines its naming policy.  When\n   the certificate\
    \ is verified, the name is verified and that name will\n   have meaning within\
    \ the realm of that CA. An example is the DNS\n   security extensions which make\
    \ DNS servers CAs for the zones and\n   nodes they serve.  Resource records are\
    \ provided for public keys and\n   signatures on those keys.  The names associated\
    \ with the keys are IP\n   addresses and domain names which have meaning to entities\
    \ accessing\n   the DNS for this information.  A Web of Trust is another example.\n\
    \   When webs of trust are set up, names are bound with the public keys.\n   In\
    \ PGP the name is usually the entity's e-mail address which has\n   meaning to\
    \ those, and only those, who understand e-mail.  Another web\n   of trust could\
    \ use an entirely different naming scheme.\n"
- title: 1.5.3 ISAKMP Requirements
  contents:
  - "1.5.3 ISAKMP Requirements\n   Strong authentication MUST be provided on ISAKMP\
    \ exchanges.  Without\n   being able to authenticate the entity at the other end,\
    \ the Security\n   Association (SA) and session key established are suspect. \
    \ Without\n   authentication you are unable to trust an entity's identification,\n\
    \   which makes access control questionable.  While encryption (e.g.\n   ESP)\
    \ and integrity (e.g.  AH) will protect subsequent communications\n   from passive\
    \ eavesdroppers, without authentication it is possible\n   that the SA and key\
    \ may have been established with an adversary who\n   performed an active man-in-the-middle\
    \ attack and is now stealing all\n   your personal data.\n   A digital signature\
    \ algorithm MUST be used within ISAKMP's\n   authentication component.  However,\
    \ ISAKMP does not mandate a\n   specific signature algorithm or certificate authority\
    \ (CA). ISAKMP\n   allows an entity initiating communications to indicate which\
    \ CAs it\n   supports.  After selection of a CA, the protocol provides the\n \
    \  messages required to support the actual authentication exchange.  The\n   protocol\
    \ provides a facility for identification of different\n   certificate authorities,\
    \ certificate types (e.g.  X.509, PKCS #7,\n   PGP, DNS SIG and KEY records),\
    \ and the exchange of the certificates\n   identified.\n   ISAKMP utilizes digital\
    \ signatures, based on public key cryptography,\n   for authentication.  There\
    \ are other strong authentication systems\n   available, which could be specified\
    \ as additional optional\n   authentication mechanisms for ISAKMP. Some of these\
    \ authentication\n   systems rely on a trusted third party called a key distribution\n\
    \   center (KDC) to distribute secret session keys.  An example is\n   Kerberos,\
    \ where the trusted third party is the Kerberos server, which\n   holds secret\
    \ keys for all clients and servers within its network\n   domain.  A client's\
    \ proof that it holds its secret key provides\n   authenticaton to a server.\n\
    \   The ISAKMP specification does not specify the protocol for\n   communicating\
    \ with the trusted third parties (TTP) or certificate\n   directory services.\
    \  These protocols are defined by the TTP and\n   directory service themselves\
    \ and are outside the scope of this\n   specification.  The use of these additional\
    \ services and protocols\n   will be described in a Key Exchange specific document.\n"
- title: 1.6 Public Key Cryptography
  contents:
  - "1.6 Public Key Cryptography\n   Public key cryptography is the most flexible,\
    \ scalable, and efficient\n   way for users to obtain the shared secrets and session\
    \ keys needed to\n   support the large number of ways Internet users will interoperate.\n\
    \   Many key generation algorithms, that have different properties, are\n   available\
    \ to users (see [DOW92], [ANSI], and [Oakley]).  Properties\n   of key exchange\
    \ protocols include the key establishment method,\n   authentication, symmetry,\
    \ perfect forward secrecy, and back traffic\n   protection.\n   NOTE: Cryptographic\
    \ keys can protect information for a considerable\n   length of time.  However,\
    \ this is based on the assumption that keys\n   used for protection of communications\
    \ are destroyed after use and not\n   kept for any reason.\n"
- title: 1.6.1 Key Exchange Properties
  contents:
  - "1.6.1 Key Exchange Properties\n   Key Establishment (Key Generation / Key Transport):\
    \ The two common\n   methods of using public key cryptography for key establishment\
    \ are\n   key transport and key generation.  An example of key transport is the\n\
    \   use of the RSA algorithm to encrypt a randomly generated session key\n   (for\
    \ encrypting subsequent communications) with the recipient's\n   public key. \
    \ The encrypted random key is then sent to the recipient,\n   who decrypts it\
    \ using his private key.  At this point both sides have\n   the same session key,\
    \ however it was created based on input from only\n   one side of the communications.\
    \  The benefit of the key transport\n   method is that it has less computational\
    \ overhead than the following\n   method.  The Diffie-Hellman (D-H) algorithm\
    \ illustrates key\n   generation using public key cryptography.  The D-H algorithm\
    \ is begun\n   by two users exchanging public information.  Each user then\n \
    \  mathematically combines the other's public information along with\n   their\
    \ own secret information to compute a shared secret value.  This\n   secret value\
    \ can be used as a session key or as a key encryption key\n   for encrypting a\
    \ randomly generated session key.  This method\n   generates a session key based\
    \ on public and secret information held\n   by both users.  The benefit of the\
    \ D-H algorithm is that the key used\n   for encrypting messages is based on information\
    \ held by both users\n   and the independence of keys from one key exchange to\
    \ another\n   provides perfect forward secrecy.  Detailed descriptions of these\n\
    \   algorithms can be found in [Schneier].  There are a number of\n   variations\
    \ on these two key generation schemes and these variations\n   do not necessarily\
    \ interoperate.\n   Key Exchange Authentication: Key exchanges may be authenticated\n\
    \   during the protocol or after protocol completion.  Authentication of\n   the\
    \ key exchange during the protocol is provided when each party\n   provides proof\
    \ it has the secret session key before the end of the\n   protocol.  Proof can\
    \ be provided by encrypting known data in the\n   secret session key during the\
    \ protocol echange.  Authentication after\n   the protocol must occur in subsequent\
    \ commu nications.\n   Authentication during the protocol is preferred so subsequent\n\
    \   communications are not initiated if the secret session key is not\n   established\
    \ with the desired party.\n   Key Exchange Symmetry: A key exchange provides symmetry\
    \ if either\n   party can initiate the exchange and exchanged messages can cross\
    \ in\n   transit without affecting the key that is generated.  This is\n   desirable\
    \ so that computation of the keys does not require either\n   party to know who\
    \ initated the exchange.  While key exchange symmetry\n   is desirable, symmetry\
    \ in the entire key management protocol may\n   provide a vulnerablity to reflection\
    \ attacks.\n   Perfect Forward Secrecy: As described in [DOW92], an authenticated\n\
    \   key exchange protocol provides perfect forward secrecy if disclosure\n   of\
    \ longterm secret keying material does not compromise the secrecy of\n   the exchanged\
    \ keys from previous communications.  The property of\n   perfect forward secrecy\
    \ does not apply to key exchange without\n   authentication.\n"
- title: 1.6.2 ISAKMP Requirements
  contents:
  - "1.6.2 ISAKMP Requirements\n   An authenticated key exchange MUST be supported\
    \ by ISAKMP. Users\n   SHOULD choose additional key establishment algorithms based\
    \ on their\n   requirements.  ISAKMP does not specify a specific key exchange.\n\
    \   However, [IKE] describes a proposal for using the Oakley key exchange\n  \
    \ [Oakley] in conjunction with ISAKMP. Requirements that should be\n   evaluated\
    \ when choosing a key establishment algorithm include\n   establishment method\
    \ (generation vs.  transport), perfect forward\n   secrecy, computational overhead,\
    \ key escrow, and key strength.  Based\n   on user requirements, ISAKMP allows\
    \ an entity initiating\n   communications to indicate which key exchanges it supports.\
    \  After\n   selection of a key exchange, the protocol provides the messages\n\
    \   required to support the actual key establishment.\n"
- title: 1.7 ISAKMP Protection
  contents:
  - '1.7 ISAKMP Protection

    '
- title: 1.7.1 Anti-Clogging (Denial of Service)
  contents:
  - "1.7.1 Anti-Clogging (Denial of Service)\n   Of the numerous security services\
    \ available, protection against\n   denial of service always seems to be one of\
    \ the most difficult to\n   address.  A \"cookie\" or anti-clogging token (ACT)\
    \ is aimed at\n   protecting the computing resources from attack without spending\n\
    \   excessive CPU resources to determine its authenticity.  An exchange\n   prior\
    \ to CPU-intensive public key operations can thwart some denial\n   of service\
    \ attempts (e.g.  simple flooding with bogus IP source\n   addresses).  Absolute\
    \ protection against denial of service is\n   impossible, but this anti-clogging\
    \ token provides a technique for\n   making it easier to handle.  The use of an\
    \ anti-clogging token was\n   introduced by Karn and Simpson in [Karn].\n   It\
    \ should be noted that in the exchanges shown in section 4, the\n   anticlogging\
    \ mechanism should be used in conjuction with a garbage-\n   state collection\
    \ mechanism; an attacker can still flood a server\n   using packets with bogus\
    \ IP addresses and cause state to be created.\n   Such aggressive memory management\
    \ techniques SHOULD be employed by\n   protocols using ISAKMP that do not go through\
    \ an initial, anti-\n   clogging only phase, as was done in [Karn].\n"
- title: 1.7.2 Connection Hijacking
  contents:
  - "1.7.2 Connection Hijacking\n   ISAKMP prevents connection hijacking by linking\
    \ the authentication,\n   key exchange and security association exchanges.  This\
    \ linking\n   prevents an attacker from allowing the authentication to complete\
    \ and\n   then jumping in and impersonating one entity to the other during the\n\
    \   key and security association exchanges.\n"
- title: 1.7.3 Man-in-the-Middle Attacks
  contents:
  - "1.7.3 Man-in-the-Middle Attacks\n   Man-in-the-Middle attacks include interception,\
    \ insertion, deletion,\n   and modification of messages, reflecting messages back\
    \ at the sender,\n   replaying old messages and redirecting messages.  ISAKMP\
    \ features\n   prevent these types of attacks from being successful.  The linking\
    \ of\n   the ISAKMP exchanges prevents the insertion of messages in the\n   protocol\
    \ exchange.  The ISAKMP protocol state machine is defined so\n   deleted messages\
    \ will not cause a partial SA to be created, the state\n   machine will clear\
    \ all state and return to idle.  The state machine\n   also prevents reflection\
    \ of a message from causing harm.  The\n   requirement for a new cookie with time\
    \ variant material for each new\n   SA establishment prevents attacks that involve\
    \ replaying old\n   messages.  The ISAKMP strong authentication requirement prevents\
    \ an\n   SA from being established with anyone other than the intended party.\n\
    \   Messages may be redirected to a different destination or modified but\n  \
    \ this will be detected and an SA will not be established.  The ISAKMP\n   specification\
    \ defines where abnormal processing has occurred and\n   recommends notifying\
    \ the appropriate party of this abnormality.\n"
- title: 1.8 Multicast Communications
  contents:
  - "1.8 Multicast Communications\n   It is expected that multicast communications\
    \ will require the same\n   security services as unicast communications and may\
    \ introduce the\n   need for additional security services.  The issues of distributing\n\
    \   SPIs for multicast traffic are presented in [SEC-ARCH].  Multicast\n   security\
    \ issues are also discussed in [RFC-1949] and [BC].  A future\n   extension to\
    \ ISAKMP will support multicast key distribution.  For an\n   introduction to\
    \ the issues related to multicast security, consult the\n   Internet Drafts, [RFC-2094]\
    \ and [RFC-2093], describing Sparta's\n   research in this area.\n"
- title: 2 Terminology and Concepts
  contents:
  - '2 Terminology and Concepts

    '
- title: 2.1 ISAKMP Terminology
  contents:
  - "2.1 ISAKMP Terminology\n   Security Protocol: A Security Protocol consists of\
    \ an entity at a\n   single point in the network stack, performing a security\
    \ service for\n   network communication.  For example, IPSEC ESP and IPSEC AH\
    \ are two\n   different security protocols.  TLS is another example.  Security\n\
    \   Protocols may perform more than one service, for example providing\n   integrity\
    \ and confidentiality in one module.\n   Protection Suite: A protection suite\
    \ is a list of the security\n   services that must be applied by various security\
    \ protocols.  For\n   example, a protection suite may consist of DES encryption\
    \ in IP ESP,\n   and keyed MD5 in IP AH. All of the protections in a suite must\
    \ be\n   treated as a single unit.  This is necessary because security\n   services\
    \ in different security protocols can have subtle\n   interactions, and the effects\
    \ of a suite must be analyzed and\n   verified as a whole.\n   Security Association\
    \ (SA): A Security Association is a security-\n   protocol- specific set of parameters\
    \ that completely defines the\n   services and mechanisms necessary to protect\
    \ traffic at that security\n   protocol location.  These parameters can include\
    \ algorithm\n   identifiers, modes, cryptographic keys, etc.  The SA is referred\
    \ to\n   by its associated security protocol (for example, \"ISAKMP SA\", \"ESP\n\
    \   SA\", \"TLS SA\").\n   ISAKMP SA: An SA used by the ISAKMP servers to protect\
    \ their own\n   traffic.  Sections 2.3 and 2.4 provide more details about ISAKMP\
    \ SAs.\n   Security Parameter Index (SPI): An identifier for a Security\n   Assocation,\
    \ relative to some security protocol.  Each security\n   protocol has its own\
    \ \"SPI-space\".  A (security protocol, SPI) pair\n   may uniquely identify an\
    \ SA. The uniqueness of the SPI is\n   implementation dependent, but could be\
    \ based per system, per\n   protocol, or other options.  Depending on the DOI,\
    \ additional\n   information (e.g.  host address) may be necessary to identify\
    \ an SA.\n   The DOI will also determine which SPIs (i.e.  initiator's or\n  \
    \ responder's) are sent during communication.\n   Domain of Interpretation: A\
    \ Domain of Interpretation (DOI) defines\n   payload formats, exchange types,\
    \ and conventions for naming\n   security-relevant information such as security\
    \ policies or\n   cryptographic algorithms and modes.  A Domain of Interpretation\
    \ (DOI)\n   identifier is used to interpret the payloads of ISAKMP payloads. \
    \ A\n   system SHOULD support multiple Domains of Interpretation\n   simultaneously.\
    \  The concept of a DOI is based on previous work by\n   the TSIG CIPSO Working\
    \ Group, but extends beyond security label\n   interpretation to include naming\
    \ and interpretation of security\n   services.  A DOI defines:\n    o  A \"situation\"\
    :  the set of information that will be used to\n       determine the required\
    \ security services.\n    o  The set of security policies that must, and may,\
    \ be supported.\n    o  A syntax for the specification of proposed security services.\n\
    \    o  A scheme for naming security-relevant information, including\n       encryption\
    \ algorithms, key exchange algorithms, security policy\n       attributes, and\
    \ certificate authorities.\n    o  The specific formats of the various payload\
    \ contents.\n    o  Additional exchange types, if required.\n   The rules for\
    \ the IETF IP Security DOI are presented in [IPDOI].\n   Specifications of the\
    \ rules for customized DOIs will be presented in\n   separate documents.\n   Situation:\
    \ A situation contains all of the security-relevant\n   information that a system\
    \ considers necessary to decide the security\n   services required to protect\
    \ the session being negotiated.  The\n   situation may include addresses, security\
    \ classifications, modes of\n   operation (normal vs.  emergency), etc.\n   Proposal:\
    \ A proposal is a list, in decreasing order of preference, of\n   the protection\
    \ suites that a system considers acceptable to protect\n   traffic under a given\
    \ situation.\n   Payload: ISAKMP defines several types of payloads, which are\
    \ used to\n   transfer information such as security association data, or key\n\
    \   exchange data, in DOI-defined formats.  A payload consists of a\n   generic\
    \ payload header and a string of octects that is opaque to\n   ISAKMP. ISAKMP\
    \ uses DOI- specific functionality to synthesize and\n   interpret these payloads.\
    \  Multiple payloads can be sent in a single\n   ISAKMP message.  See section\
    \ 3 for more details on the payload types,\n   and [IPDOI] for the formats of\
    \ the IETF IP Security DOI payloads.\n   Exchange Type: An exchange type is a\
    \ specification of the number of\n   messages in an ISAKMP exchange, and the payload\
    \ types that are\n   contained in each of those messages.  Each exchange type\
    \ is designed\n   to provide a particular set of security services, such as anonymity\n\
    \   of the participants, perfect forward secrecy of the keying material,\n   authentication\
    \ of the participants, etc.  Section 4.1 defines the\n   default set of ISAKMP\
    \ exchange types.  Other exchange types can be\n   added to support additional\
    \ key exchanges, if required.\n"
- title: 2.2 ISAKMP Placement
  contents:
  - "2.2 ISAKMP Placement\n   Figure 1 is a high level view of the placement of ISAKMP\
    \ within a\n   system context in a network architecture.  An important part of\n\
    \   negotiating security services is to consider the entire \"stack\" of\n   individual\
    \ SAs as a unit.  This is referred to as a \"protection\n   suite\".\n     +------------+\
    \        +--------+                +--------------+\n     !     DOI    !     \
    \   !        !                !  Application !\n     ! Definition ! <----> ! ISAKMP\
    \ !                !    Process   !\n     +------------+    --> !        !   \
    \             !--------------!\n    +--------------+   !   +--------+        \
    \        ! Appl Protocol!\n    ! Key Exchange !   !     ^  ^                 \
    \   +--------------+\n    !  Definition  !<--      !  !                      \
    \     ^\n    +--------------+         !  !                           !\n     \
    \                        !  !                           !\n            !----------------!\
    \  !                           !\n            v                   !          \
    \                 !\n        +-------+               v                       \
    \    v\n        !  API  !        +---------------------------------------------+\n\
    \        +-------+        !                Socket Layer                 !\n  \
    \          !            !---------------------------------------------!\n    \
    \        v            !        Transport Protocol (TCP / UDP)       !\n     +----------+\
    \        !---------------------------------------------!\n     ! Security ! <---->\
    \ !                     IP                      !\n     ! Protocol !        !---------------------------------------------!\n\
    \     +----------+        !             Link Layer Protocol             !\n  \
    \                       +---------------------------------------------+\n    \
    \                 Figure 1:  ISAKMP Relationships\n"
- title: 2.3 Negotiation Phases
  contents:
  - "2.3 Negotiation Phases\n   ISAKMP offers two \"phases\" of negotiation.  In the\
    \ first phase, two\n   entities (e.g.  ISAKMP servers) agree on how to protect\
    \ further\n   negotiation traffic between themselves, establishing an ISAKMP SA.\n\
    \   This ISAKMP SA is then used to protect the negotiations for the\n   Protocol\
    \ SA being requested.  Two entities (e.g.  ISAKMP servers) can\n   negotiate (and\
    \ have active) multiple ISAKMP SAs.\n   The second phase of negotiation is used\
    \ to establish security\n   associations for other security protocols.  This second\
    \ phase can be\n   used to establish many security associations.  The security\n\
    \   associations established by ISAKMP during this phase can be used by a\n  \
    \ security protocol to protect many message/data exchanges.\n   While the two-phased\
    \ approach has a higher start-up cost for most\n   simple scenarios, there are\
    \ several reasons that it is beneficial for\n   most cases.\n   First, entities\
    \ (e.g.  ISAKMP servers) can amortize the cost of the\n   first phase across several\
    \ second phase negotiations.  This allows\n   multiple SAs to be established between\
    \ peers over time without having\n   to start over for each communication.\n \
    \  Second, security services negotiated during the first phase provide\n   security\
    \ properties for the second phase.  For example, after the\n   first phase of\
    \ negotiation, the encryption provided by the ISAKMP SA\n   can provide identity\
    \ protection, potentially allowing the use of\n   simpler second-phase exchanges.\
    \  On the other hand, if the channel\n   established during the first phase is\
    \ not adequate to protect\n   identities, then the second phase must negotiate\
    \ adequate security\n   mechanisms.\n   Third, having an ISAKMP SA in place considerably\
    \ reduces the cost of\n   ISAKMP management activity - without the \"trusted path\"\
    \ that an\n   ISAKMP SA gives you, the entities (e.g.  ISAKMP servers) would have\n\
    \   to go through a complete re-authentication for each error\n   notification\
    \ or deletion of an SA.\n   Negotiation during each phase is accomplished using\
    \ ISAKMP-defined\n   exchanges (see section 4) or exchanges defined for a key\
    \ exchange\n   within a DOI.\n   Note that security services may be applied differently\
    \ in each\n   negotiation phase.  For example, different parties are being\n \
    \  authenticated during each of the phases of negotiation.  During the\n   first\
    \ phase, the parties being authenticated may be the ISAKMP\n   servers/hosts,\
    \ while during the second phase, users or application\n   level programs are being\
    \ authenticated.\n"
- title: 2.4 Identifying Security Associations
  contents:
  - "2.4 Identifying Security Associations\n   While bootstrapping secure channels\
    \ between systems, ISAKMP cannot\n   assume the existence of security services,\
    \ and must provide some\n   protections for itself.  Therefore, ISAKMP considers\
    \ an ISAKMP\n   Security Association to be different than other types, and manages\n\
    \   ISAKMP SAs itself, in their own name space.  ISAKMP uses the two\n   cookie\
    \ fields in the ISAKMP header to identify ISAKMP SAs.  The\n   Message ID in the\
    \ ISAKMP Header and the SPI field in the Proposal\n   payload are used during\
    \ SA establishment to identify the SA for other\n   security protocols.  The interpretation\
    \ of these four fields is\n   dependent on the operation taking place.\n   The\
    \ following table shows the presence or absence of several fields\n   during SA\
    \ establishment.  The following fields are necessary for\n   various operations\
    \ associated with SA establishment: cookies in the\n   ISAKMP header, the ISAKMP\
    \ Header Message ID field, and the SPI field\n   in the Proposal payload.  An\
    \ 'X' in the column means the value MUST\n   be present.  An 'NA' in the column\
    \ means a value in the column is Not\n   Applicable to the operation.\n  #   \
    \          Operation            I-Cookie  R-Cookie  Message ID  SPI\n (1)  Start\
    \ ISAKMP SA negotiation    X         0         0           0\n (2)  Respond ISAKMP\
    \ SA negotiation  X         X         0           0\n (3)  Init other SA negotiation\
    \      X         X         X           X\n (4)  Respond other SA negotiation \
    \  X         X         X           X\n (5)  Other (KE, ID, etc.)           X \
    \        X         X/0         NA\n (6)  Security Protocol (ESP, AH)    NA   \
    \     NA        NA          X\n   In the first line (1) of the table, the initiator\
    \ includes the\n   Initiator Cookie field in the ISAKMP Header, using the procedures\n\
    \   outlined in sections 2.5.3 and 3.1.\n   In the second line (2) of the table,\
    \ the responder includes the\n   Initiator and Responder Cookie fields in the\
    \ ISAKMP Header, using the\n   procedures outlined in sections 2.5.3 and 3.1.\
    \  Additional messages\n   may be exchanged between ISAKMP peers, depending on\
    \ the ISAKMP\n   exchange type used during the phase 1 negotiation.  Once the\
    \ phase 1\n   exchange is completed, the Initiator and Responder cookies are\n\
    \   included in the ISAKMP Header of all subsequent communications\n   between\
    \ the ISAKMP peers.\n   During phase 1 negotiations, the initiator and responder\
    \ cookies\n   determine the ISAKMP SA. Therefore, the SPI field in the Proposal\n\
    \   payload is redundant and MAY be set to 0 or it MAY contain the\n   transmitting\
    \ entity's cookie.\n   In the third line (3) of the table, the initiator associates\
    \ a\n   Message ID with the Protocols contained in the SA Proposal.  This\n  \
    \ Message ID and the initiator's SPI(s) to be associated with each\n   protocol\
    \ in the Proposal are sent to the responder.  The SPI(s) will\n   be used by the\
    \ security protocols once the phase 2 negotiation is\n   completed.\n   In the\
    \ fourth line (4) of the table, the responder includes the same\n   Message ID\
    \ and the responder's SPI(s) to be associated with each\n   protocol in the accepted\
    \ Proposal.  This information is returned to\n   the initiator.\n   In the fifth\
    \ line (5) of the table, the initiator and responder use\n   the Message ID field\
    \ in the ISAKMP Header to keep track of the in-\n   progress protocol negotiation.\
    \  This is only applicable for a phase 2\n   exchange and the value MUST be 0\
    \ for a phase 1 exchange because the\n   combined cookies identify the ISAKMP\
    \ SA. The SPI field in the\n   Proposal payload is not applicable because the\
    \ Proposal payload is\n   only used during the SA negotiation message exchange\
    \ (steps 3 and 4).\n   In the sixth line (6) of the table, the phase 2 negotiation\
    \ is\n   complete.  The security protocols use the SPI(s) to determine which\n\
    \   security services and mechanisms to apply to the communication\n   between\
    \ them.  The SPI value shown in the sixth line (6) is not the\n   SPI field in\
    \ the Proposal payload, but the SPI field contained within\n   the security protocol\
    \ header.\n   During the SA establishment, a SPI MUST be generated.  ISAKMP is\n\
    \   designed to handle variable sized SPIs.  This is accomplished by\n   using\
    \ the SPI Size field within the Proposal payload during SA\n   establishment.\
    \  Handling of SPIs will be outlined by the DOI\n   specification (e.g.  [IPDOI]).\n\
    \   When a security association (SA) is initially established, one side\n   assumes\
    \ the role of initiator and the other the role of responder.\n   Once the SA is\
    \ established, both the original initiator and responder\n   can initiate a phase\
    \ 2 negotiation with the peer entity.  Thus,\n   ISAKMP SAs are bidirectional\
    \ in nature.\n   Additionally, ISAKMP allows both initiator and responder to have\
    \ some\n   control during the negotiation process.  While ISAKMP is designed to\n\
    \   allow an SA negotiation that includes multiple proposals, the\n   initiator\
    \ can maintain some control by only making one proposal in\n   accordance with\
    \ the initiator's local security policy.  Once the\n   initiator sends a proposal\
    \ containing more than one proposal (which\n   are sent in decreasing preference\
    \ order), the initiator relinquishes\n   control to the responder.  Once the responder\
    \ is controlling the SA\n   establishment, the responder can make its policy take\
    \ precedence over\n   the initiator within the context of the multiple options\
    \ offered by\n   the initiator.  This is accomplished by selecting the proposal\
    \ best\n   suited for the responder's local security policy and returning this\n\
    \   selection to the initiator.\n"
- title: 2.5 Miscellaneous
  contents:
  - '2.5 Miscellaneous

    '
- title: 2.5.1 Transport Protocol
  contents:
  - "2.5.1 Transport Protocol\n   ISAKMP can be implemented over any transport protocol\
    \ or over IP\n   itself.  Implementations MUST include send and receive capability\
    \ for\n   ISAKMP using the User Datagram Protocol (UDP) on port 500.  UDP Port\n\
    \   500 has been assigned to ISAKMP by the Internet Assigned Numbers\n   Authority\
    \ (IANA). Implementations MAY additionally support ISAKMP\n   over other transport\
    \ protocols or over IP itself.\n"
- title: 2.5.2 RESERVED Fields
  contents:
  - "2.5.2 RESERVED Fields\n   The existence of RESERVED fields within ISAKMP payloads\
    \ are used\n   strictly to preserve byte alignment.  All RESERVED fields in the\n\
    \   ISAKMP protocol MUST be set to zero (0) when a packet is issued.  The\n  \
    \ receiver SHOULD check the RESERVED fields for a zero (0) value and\n   discard\
    \ the packet if other values are found.\n"
- title: 2.5.3 Anti-Clogging Token ("Cookie") Creation
  contents:
  - "2.5.3 Anti-Clogging Token (\"Cookie\") Creation\n   The details of cookie generation\
    \ are implementation dependent, but\n   MUST satisfy these basic requirements\
    \ (originally stated by Phil Karn\n   in [Karn]):\n      1.    The cookie must\
    \ depend on the specific parties.  This\n            prevents an attacker from\
    \ obtaining a cookie using a real IP\n            address and UDP port, and then\
    \ using it to swamp the victim\n            with Diffie-Hellman requests from\
    \ randomly chosen IP\n            addresses or ports.\n      2.    It must not\
    \ be possible for anyone other than the issuing\n            entity to generate\
    \ cookies that will be accepted by that\n            entity.  This implies that\
    \ the issuing entity must use local\n            secret information in the generation\
    \ and subsequent\n            verification of a cookie.  It must not be possible\
    \ to deduce\n            this secret information from any particular cookie.\n\
    \      3.    The cookie generation function must be fast to thwart\n         \
    \   attacks intended to sabotage CPU resources.\n   Karn's suggested method for\
    \ creating the cookie is to perform a fast\n   hash (e.g.  MD5) over the IP Source\
    \ and Destination Address, the UDP\n   Source and Destination Ports and a locally\
    \ generated secret random\n   value.  ISAKMP requires that the cookie be unique\
    \ for each SA\n   establishment to help prevent replay attacks, therefore, the\
    \ date and\n   time MUST be added to the information hashed.  The generated cookies\n\
    \   are placed in the ISAKMP Header (described in section 3.1) Initiator\n   and\
    \ Responder cookie fields.  These fields are 8 octets in length,\n   thus, requiring\
    \ a generated cookie to be 8 octets.  Notify and Delete\n   messages (see sections\
    \ 3.14, 3.15, and 4.8) are uni-directional\n   transmissions and are done under\
    \ the protection of an existing ISAKMP\n   SA, thus, not requiring the generation\
    \ of a new cookie.  One\n   exception to this is the transmission of a Notify\
    \ message during a\n   Phase 1 exchange, prior to completing the establishment\
    \ of an SA.\n   Sections 3.14 and 4.8 provide additional details.\n"
- title: 3 ISAKMP Payloads
  contents:
  - "3 ISAKMP Payloads\n   ISAKMP payloads provide modular building blocks for constructing\n\
    \   ISAKMP messages.  The presence and ordering of payloads in ISAKMP is\n   defined\
    \ by and dependent upon the Exchange Type Field located in the\n   ISAKMP Header\
    \ (see Figure 2).  The ISAKMP payload types are discussed\n   in sections 3.4\
    \ through 3.15.  The descriptions of the ISAKMP\n   payloads, messages, and exchanges\
    \ (see Section 4) are shown using\n   network octet ordering.\n"
- title: 3.1 ISAKMP Header Format
  contents:
  - "3.1 ISAKMP Header Format\n   An ISAKMP message has a fixed header format, shown\
    \ in Figure 2,\n   followed by a variable number of payloads.  A fixed header\
    \ simplifies\n   parsing, providing the benefit of protocol parsing software that\
    \ is\n   less complex and easier to implement.  The fixed header contains the\n\
    \   information required by the protocol to maintain state, process\n   payloads\
    \ and possibly prevent denial of service or replay attacks.\n   The ISAKMP Header\
    \ fields are defined as follows:\n    o  Initiator Cookie (8 octets) - Cookie\
    \ of entity that initiated SA\n       establishment, SA notification, or SA deletion.\n\
    \    o  Responder Cookie (8 octets) - Cookie of entity that is responding\n  \
    \     to an SA establishment request, SA notification, or SA deletion.\n     \
    \                    1                   2                   3\n     0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    !                          Initiator                            !\n    !\
    \                            Cookie                             !\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    !                          Responder                            !\n    !\
    \                            Cookie                             !\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    !  Next Payload ! MjVer ! MnVer ! Exchange Type !     Flags     !\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    !                          Message ID                           !\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    !                            Length                             !\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 2:  ISAKMP Header Format\n    o  Next Payload (1 octet)\
    \ - Indicates the type of the first payload\n       in the message.  The format\
    \ for each payload is defined in\n       sections 3.4 through 3.16.  The processing\
    \ for the payloads is\n       defined in section 5.\n                        Next\
    \ Payload Type       Value\n                    NONE                         \
    \  0\n                    Security Association (SA)      1\n                 \
    \   Proposal (P)                   2\n                    Transform (T)      \
    \            3\n                    Key Exchange (KE)              4\n       \
    \             Identification (ID)            5\n                    Certificate\
    \ (CERT)             6\n                    Certificate Request (CR)       7\n\
    \                    Hash (HASH)                    8\n                    Signature\
    \ (SIG)                9\n                    Nonce (NONCE)                 10\n\
    \                    Notification (N)              11\n                    Delete\
    \ (D)                    12\n                    Vendor ID (VID)             \
    \  13\n                    RESERVED                   14 - 127\n             \
    \       Private USE               128 - 255\n    o  Major Version (4 bits) - indicates\
    \ the major version of the ISAKMP\n       protocol in use.  Implementations based\
    \ on this version of the\n       ISAKMP Internet-Draft MUST set the Major Version\
    \ to 1.\n       Implementations based on previous versions of ISAKMP Internet-\n\
    \       Drafts MUST set the Major Version to 0.  Implementations SHOULD\n    \
    \   never accept packets with a major version number larger than its\n       own.\n\
    \    o  Minor Version (4 bits) - indicates the minor version of the\n       ISAKMP\
    \ protocol in use.  Implementations based on this version of\n       the ISAKMP\
    \ Internet-Draft MUST set the Minor Version to 0.\n       Implementations based\
    \ on previous versions of ISAKMP Internet-\n       Drafts MUST set the Minor Version\
    \ to 1.  Implementations SHOULD\n       never accept packets with a minor version\
    \ number larger than its\n       own, given the major version numbers are identical.\n\
    \    o  Exchange Type (1 octet) - indicates the type of exchange being\n     \
    \  used.  This dictates the message and payload orderings in the\n       ISAKMP\
    \ exchanges.\n                            Exchange Type      Value\n         \
    \                NONE                    0\n                         Base    \
    \                1\n                         Identity Protection     2\n     \
    \                    Authentication Only     3\n                         Aggressive\
    \              4\n                         Informational           5\n       \
    \                  ISAKMP Future Use     6 - 31\n                         DOI\
    \ Specific Use     32 - 239\n                         Private Use         240\
    \ - 255\n    o  Flags (1 octet) - indicates specific options that are set for\
    \ the\n       ISAKMP exchange.  The flags listed below are specified in the\n\
    \       Flags field beginning with the least significant bit, i.e the\n      \
    \ Encryption bit is bit 0 of the Flags field, the Commit bit is bit\n       1\
    \ of the Flags field, and the Authentication Only bit is bit 2 of\n       the\
    \ Flags field.  The remaining bits of the Flags field MUST be\n       set to 0\
    \ prior to transmission.\n      --  E(ncryption Bit) (1 bit) - If set (1), all\
    \ payloads following\n          the header are encrypted using the encryption\
    \ algorithm\n          identified in the ISAKMP SA. The ISAKMP SA Identifier is\
    \ the\n          combination of the initiator and responder cookie.  It is\n \
    \         RECOMMENDED that encryption of communications be done as soon\n    \
    \      as possible between the peers.  For all ISAKMP exchanges\n          described\
    \ in section 4.1, the encryption SHOULD begin after\n          both parties have\
    \ exchanged Key Exchange payloads.  If the\n          E(ncryption Bit) is not\
    \ set (0), the payloads are not\n          encrypted.\n      -- C(ommit Bit) (1\
    \ bit) - This bit is used to signal key exchange\n          synchronization. \
    \ It is used to ensure that encrypted material\n          is not received prior\
    \ to completion of the SA establishment.\n          The Commit Bit can be set\
    \ (at anytime) by either party\n          participating in the SA establishment,\
    \ and can be used during\n          both phases of an ISAKMP SA establishment.\
    \  However, the value\n          MUST be reset after the Phase 1 negotiation.\
    \  If set(1), the\n          entity which did not set the Commit Bit MUST wait\
    \ for an\n          Informational Exchange containing a Notify payload (with the\n\
    \          CONNECTED Notify Message) from the entity which set the Commit\n  \
    \        Bit.  In this instance, the Message ID field of the\n          Informational\
    \ Exchange MUST contain the Message ID of the\n          original ISAKMP Phase\
    \ 2 SA negotiation.  This is done to\n          ensure that the Informational\
    \ Exchange with the CONNECTED\n          Notify Message can be associated with\
    \ the correct Phase 2 SA.\n          The receipt and processing of the Informational\
    \ Exchange\n          indicates that the SA establishment was successful and either\n\
    \          entity can now proceed with encrypted traffic communication.\n    \
    \      In addition to synchronizing key exchange, the Commit Bit can\n       \
    \   be used to protect against loss of transmissions over\n          unreliable\
    \ networks and guard against the need for multiple\n          re-transmissions.\n\
    \          NOTE: It is always possible that the final message of an\n        \
    \  exchange can be lost.  In this case, the entity expecting to\n          receive\
    \ the final message of an exchange would receive the\n          Phase 2 SA negotiation\
    \ message following a Phase 1 exchange or\n          encrypted traffic following\
    \ a Phase 2 exchange.  Handling of\n          this situation is not standardized,\
    \ but we propose the\n          following possibilities.  If the entity awaiting\
    \ the\n          Informational Exchange can verify the received message (i.e.\n\
    \          Phase 2 SA negotiation message or encrypted traffic), then\n      \
    \    they MAY consider the SA was established and continue\n          processing.\
    \  The other option is to retransmit the last ISAKMP\n          message to force\
    \ the other entity to retransmit the final\n          message.  This suggests\
    \ that implementations may consider\n          retaining the last message (locally)\
    \ until they are sure the\n          SA is established.\n      --  A(uthentication\
    \ Only Bit) (1 bit) - This bit is intended for\n          use with the Informational\
    \ Exchange with a Notify payload and\n          will allow the transmission of\
    \ information with integrity\n          checking, but no encryption (e.g.  \"\
    emergency mode\").  Section\n          4.8 states that a Phase 2 Informational\
    \ Exchange MUST be sent\n          under the protection of an ISAKMP SA. This\
    \ is the only\n          exception to that policy.  If the Authentication Only\
    \ bit is\n          set (1), only authentication security services will be applied\n\
    \          to the entire Notify payload of the Informational Exchange and\n  \
    \        the payload will not be encrypted.\n    o  Message ID (4 octets) - Unique\
    \ Message Identifier used to\n       identify protocol state during Phase 2 negotiations.\
    \  This value\n       is randomly generated by the initiator of the Phase 2\n\
    \       negotiation.  In the event of simultaneous SA establishments\n       (i.e.\
    \  collisions), the value of this field will likely be\n       different because\
    \ they are independently generated and, thus, two\n       security associations\
    \ will progress toward establishment.\n       However, it is unlikely there will\
    \ be absolute simultaneous\n       establishments.  During Phase 1 negotiations,\
    \ the value MUST be\n       set to 0.\n    o  Length (4 octets) - Length of total\
    \ message (header + payloads)\n       in octets.  Encryption can expand the size\
    \ of an ISAKMP message.\n"
- title: 3.2 Generic Payload Header
  contents:
  - "3.2 Generic Payload Header\n   Each ISAKMP payload defined in sections 3.4 through\
    \ 3.16 begins with\n   a generic header, shown in Figure 3, which provides a payload\n\
    \   \"chaining\" capability and clearly defines the boundaries of a\n   payload.\n\
    \                            1                   2                   3\n     \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       ! Next Payload  !   RESERVED    !         Payload Length        !\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \               Figure 3:  Generic Payload Header\n   The Generic Payload Header\
    \ fields are defined as follows:\n    o  Next Payload (1 octet) - Identifier for\
    \ the payload type of the\n       next payload in the message.  If the current\
    \ payload is the last\n       in the message, then this field will be 0.  This\
    \ field provides\n       the \"chaining\" capability.\n    o  RESERVED (1 octet)\
    \ - Unused, set to 0.\n    o  Payload Length (2 octets) - Length in octets of\
    \ the current\n       payload, including the generic payload header.\n"
- title: 3.3 Data Attributes
  contents:
  - "3.3 Data Attributes\n   There are several instances within ISAKMP where it is\
    \ necessary to\n   represent Data Attributes.  An example of this is the Security\n\
    \   Association (SA) Attributes contained in the Transform payload\n   (described\
    \ in section 3.6).  These Data Attributes are not an ISAKMP\n   payload, but are\
    \ contained within ISAKMP payloads.  The format of the\n   Data Attributes provides\
    \ the flexibility for representation of many\n   different types of information.\
    \  There can be multiple Data\n   Attributes within a payload.  The length of\
    \ the Data Attributes will\n   either be 4 octets or defined by the Attribute\
    \ Length field.  This is\n   done using the Attribute Format bit described below.\
    \  Specific\n   information about the attributes for each domain will be described\
    \ in\n   a DOI document, e.g.  IPSEC DOI [IPDOI].\n                          1\
    \                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     !A!       Attribute Type        !    AF=0  Attribute Length     !\n    \
    \ !F!                             !    AF=1  Attribute Value      !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     .                   AF=0  Attribute Value                       .\n    \
    \ .                   AF=1  Not Transmitted                       .\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 4:  Data Attributes\n   The Data Attributes fields\
    \ are defined as follows:\n    o  Attribute Type (2 octets) - Unique identifier\
    \ for each type of\n       attribute.  These attributes are defined as part of\
    \ the DOI-\n       specific information.\n       The most significant bit, or\
    \ Attribute Format (AF), indicates\n       whether the data attributes follow\
    \ the Type/Length/Value (TLV)\n       format or a shortened Type/Value (TV) format.\
    \  If the AF bit is a\n       zero (0), then the Data Attributes are of the Type/Length/Value\n\
    \       (TLV) form.  If the AF bit is a one (1), then the Data Attributes\n  \
    \     are of the Type/Value form.\n    o  Attribute Length (2 octets) - Length\
    \ in octets of the Attribute\n       Value.  When the AF bit is a one (1), the\
    \ Attribute Value is only\n       2 octets and the Attribute Length field is not\
    \ present.\n    o  Attribute Value (variable length) - Value of the attribute\n\
    \       associated with the DOI-specific Attribute Type.  If the AF bit\n    \
    \   is a zero (0), this field has a variable length defined by the\n       Attribute\
    \ Length field.  If the AF bit is a one (1), the\n       Attribute Value has a\
    \ length of 2 octets.\n"
- title: 3.4 Security Association Payload
  contents:
  - "3.4 Security Association Payload\n   The Security Association Payload is used\
    \ to negotiate security\n   attributes and to indicate the Domain of Interpretation\
    \ (DOI) and\n   Situation under which the negotiation is taking place.  Figure\
    \ 5\n   shows the format of the Security Association payload.\n              \
    \            1                   2                   3\n      0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     ! Next Payload  !   RESERVED    !         Payload Length        !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     !  \
    \            Domain of Interpretation  (DOI)                  !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     !                                                               !\n    \
    \ ~                           Situation                           ~\n     !  \
    \                                                             !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 5:  Security Association Payload\n    o  Next Payload (1\
    \ octet) - Identifier for the payload type of the\n       next payload in the\
    \ message.  If the current payload is the last\n       in the message, then this\
    \ field will be 0.  This field MUST NOT\n       contain the values for the Proposal\
    \ or Transform payloads as they\n       are considered part of the security association\
    \ negotiation.  For\n       example, this field would contain the value \"10\"\
    \ (Nonce payload)\n       in the first message of a Base Exchange (see Section\
    \ 4.4) and the\n       value \"0\" in the first message of an Identity Protect\
    \ Exchange\n       (see Section 4.5).\n    o  RESERVED (1 octet) - Unused, set\
    \ to 0.\n    o  Payload Length (2 octets) - Length in octets of the entire\n \
    \      Security Association payload, including the SA payload, all\n       Proposal\
    \ payloads, and all Transform payloads associated with the\n       proposed Security\
    \ Association.\n    o  Domain of Interpretation (4 octets) - Identifies the DOI\
    \ (as\n       described in Section 2.1) under which this negotiation is taking\n\
    \       place.  The DOI is a 32-bit unsigned integer.  A DOI value of 0\n    \
    \   during a Phase 1 exchange specifies a Generic ISAKMP SA which can\n      \
    \ be used for any protocol during the Phase 2 exchange.  The\n       necessary\
    \ SA Attributes are defined in A.4.  A DOI value of 1 is\n       assigned to the\
    \ IPsec DOI [IPDOI].  All other DOI values are\n       reserved to IANA for future\
    \ use.  IANA will not normally assign a\n       DOI value without referencing\
    \ some public specification, such as\n       an Internet RFC. Other DOI's can\
    \ be defined using the description\n       in appendix B.  This field MUST be\
    \ present within the Security\n       Association payload.\n    o  Situation (variable\
    \ length) - A DOI-specific field that\n       identifies the situation under which\
    \ this negotiation is taking\n       place.  The Situation is used to make policy\
    \ decisions regarding\n       the security attributes being negotiated.  Specifics\
    \ for the IETF\n       IP Security DOI Situation are detailed in [IPDOI].  This\
    \ field\n       MUST be present within the Security Association payload.\n"
- title: 3.5 Proposal Payload
  contents:
  - "3.5 Proposal Payload\n   The Proposal Payload contains information used during\
    \ Security\n   Association negotiation.  The proposal consists of security\n \
    \  mechanisms, or transforms, to be used to secure the communications\n   channel.\
    \  Figure 6 shows the format of the Proposal Payload.  A\n   description of its\
    \ use can be found in section 4.2.\n                          1              \
    \     2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     ! Next Payload  !   RESERVED    !         Payload Length        !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     !  Proposal\
    \ #   !  Protocol-Id  !    SPI Size   !# of Transforms!\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     !                        SPI (variable)                         !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \         Figure 6:  Proposal Payload Format\n   The Proposal Payload fields are\
    \ defined as follows:\n    o  Next Payload (1 octet) - Identifier for the payload\
    \ type of the\n       next payload in the message.  This field MUST only contain\
    \ the\n       value \"2\" or \"0\".  If there are additional Proposal payloads\
    \ in\n       the message, then this field will be 2.  If the current Proposal\n\
    \       payload is the last within the security association proposal,\n      \
    \ then this field will be 0.\n    o  RESERVED (1 octet) - Unused, set to 0.\n\
    \    o  Payload Length (2 octets) - Length in octets of the entire\n       Proposal\
    \ payload, including generic payload header, the Proposal\n       payload, and\
    \ all Transform payloads associated with this\n       proposal.  In the event\
    \ there are multiple proposals with the\n       same proposal number (see section\
    \ 4.2), the Payload Length field\n       only applies to the current Proposal\
    \ payload and not to all\n       Proposal payloads.\n    o  Proposal # (1 octet)\
    \ - Identifies the Proposal number for the\n       current payload.  A description\
    \ of the use of this field is found\n       in section 4.2.\n    o  Protocol-Id\
    \ (1 octet) - Specifies the protocol identifier for the\n       current negotiation.\
    \  Examples might include IPSEC ESP, IPSEC AH,\n       OSPF, TLS, etc.\n    o\
    \  SPI Size (1 octet) - Length in octets of the SPI as defined by\n       the\
    \ Protocol-Id.  In the case of ISAKMP, the Initiator and\n       Responder cookie\
    \ pair from the ISAKMP Header is the ISAKMP SPI,\n       therefore, the SPI Size\
    \ is irrelevant and MAY be from zero (0) to\n       sixteen (16).  If the SPI\
    \ Size is non-zero, the content of the\n       SPI field MUST be ignored.  If\
    \ the SPI Size is not a multiple of\n       4 octets it will have some impact\
    \ on the SPI field and the\n       alignment of all payloads in the message. \
    \ The Domain of\n       Interpretation (DOI) will dictate the SPI Size for other\n\
    \       protocols.\n    o  # of Transforms (1 octet) - Specifies the number of\
    \ transforms\n       for the Proposal.  Each of these is contained in a Transform\n\
    \       payload.\n    o  SPI (variable) - The sending entity's SPI. In the event\
    \ the SPI\n       Size is not a multiple of 4 octets, there is no padding applied\n\
    \       to the payload, however, it can be applied at the end of the\n       message.\n\
    \   The payload type for the Proposal Payload is two (2).\n"
- title: 3.6 Transform Payload
  contents:
  - "3.6 Transform Payload\n   The Transform Payload contains information used during\
    \ Security\n   Association negotiation.  The Transform payload consists of a\n\
    \   specific security mechanism, or transforms, to be used to secure the\n   communications\
    \ channel.  The Transform payload also contains the\n   security association attributes\
    \ associated with the specific\n   transform.  These SA attributes are DOI-specific.\
    \  Figure 7 shows the\n   format of the Transform Payload.  A description of its\
    \ use can be\n   found in section 4.2.\n                          1          \
    \         2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     ! Next Payload  !   RESERVED    !         Payload Length        !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     !  Transform\
    \ #  !  Transform-Id !           RESERVED2           !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     !                                                               !\n    \
    \ ~                        SA Attributes                          ~\n     !  \
    \                                                             !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 7:  Transform Payload Format\n   The Transform Payload\
    \ fields are defined as follows:\n    o  Next Payload (1 octet) - Identifier for\
    \ the payload type of the\n       next payload in the message.  This field MUST\
    \ only contain the\n       value \"3\" or \"0\".  If there are additional Transform\
    \ payloads in\n       the proposal, then this field will be 3.  If the current\n\
    \       Transform payload is the last within the proposal, then this\n       field\
    \ will be 0.\n    o  RESERVED (1 octet) - Unused, set to 0.\n    o  Payload Length\
    \ (2 octets) - Length in octets of the current\n       payload, including the\
    \ generic payload header, Transform values,\n       and all SA Attributes.\n \
    \   o  Transform # (1 octet) - Identifies the Transform number for the\n     \
    \  current payload.  If there is more than one transform proposed\n       for\
    \ a specific protocol within the Proposal payload, then each\n       Transform\
    \ payload has a unique Transform number.  A description\n       of the use of\
    \ this field is found in section 4.2.\n    o  Transform-Id (1 octet) - Specifies\
    \ the Transform identifier for\n       the protocol within the current proposal.\
    \  These transforms are\n       defined by the DOI and are dependent on the protocol\
    \ being\n       negotiated.\n    o  RESERVED2 (2 octets) - Unused, set to 0.\n\
    \    o  SA Attributes (variable length) - This field contains the\n       security\
    \ association attributes as defined for the transform\n       given in the Transform-Id\
    \ field.  The SA Attributes SHOULD be\n       represented using the Data Attributes\
    \ format described in section\n       3.3.  If the SA Attributes are not aligned\
    \ on 4-byte boundaries,\n       then subsequent payloads will not be aligned and\
    \ any padding will\n       be added at the end of the message to make the message\
    \ 4-octet\n       aligned.\n   The payload type for the Transform Payload is three\
    \ (3).\n"
- title: 3.7 Key Exchange Payload
  contents:
  - "3.7 Key Exchange Payload\n   The Key Exchange Payload supports a variety of key\
    \ exchange\n   techniques.  Example key exchanges are Oakley [Oakley], Diffie-\n\
    \   Hellman, the enhanced Diffie-Hellman key exchange described in X9.42\n   [ANSI],\
    \ and the RSA-based key exchange used by PGP. Figure 8 shows\n   the format of\
    \ the Key Exchange payload.\n   The Key Exchange Payload fields are defined as\
    \ follows:\n    o  Next Payload (1 octet) - Identifier for the payload type of\
    \ the\n       nextpayload in the message.  If the current payload is the last\n\
    \       in the message, then this field will be 0.\n                         \
    \ 1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     ! Next Payload  !   RESERVED    !         Payload Length        !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     !  \
    \                                                             !\n     ~      \
    \                 Key Exchange Data                       ~\n     !          \
    \                                                     !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 8:  Key Exchange Payload Format\n    o  RESERVED (1 octet)\
    \ - Unused, set to 0.\n    o  Payload Length (2 octets) - Length in octets of\
    \ the current\n       payload, including the generic payload header.\n    o  Key\
    \ Exchange Data (variable length) - Data required to generate a\n       session\
    \ key.  The interpretation of this data is specified by the\n       DOI and the\
    \ associated Key Exchange algorithm.  This field may\n       also contain pre-placed\
    \ key indicators.\n   The payload type for the Key Exchange Payload is four (4).\n"
- title: 3.8 Identification Payload
  contents:
  - "3.8 Identification Payload\n   The Identification Payload contains DOI-specific\
    \ data used to\n   exchange identification information.  This information is used\
    \ for\n   determining the identities of communicating peers and may be used for\n\
    \   determining authenticity of information.  Figure 9 shows the format\n   of\
    \ the Identification Payload.\n   The Identification Payload fields are defined\
    \ as follows:\n    o  Next Payload (1 octet) - Identifier for the payload type\
    \ of the\n       next payload in the message.  If the current payload is the last\n\
    \       in the message, then this field will be 0.\n    o  RESERVED (1 octet)\
    \ - Unused, set to 0.\n    o  Payload Length (2 octets) - Length in octets of\
    \ the current\n       payload, including the generic payload header.\n    o  ID\
    \ Type (1 octet) - Specifies the type of Identification being\n       used.\n\
    \                          1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     ! Next Payload  !   RESERVED    !         Payload Length        !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     !  \
    \ ID Type     !             DOI Specific ID Data              !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     !                                                               !\n    \
    \ ~                   Identification Data                         ~\n     !  \
    \                                                             !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 9:  Identification Payload Format\n       This field is\
    \ DOI-dependent.\n    o  DOI Specific ID Data (3 octets) - Contains DOI specific\n\
    \       Identification data.  If unused, then this field MUST be set to\n    \
    \   0.\n    o  Identification Data (variable length) - Contains identity\n   \
    \    information.  The values for this field are DOI-specific and the\n      \
    \ format is specified by the ID Type field.  Specific details for\n       the\
    \ IETF IP Security DOI Identification Data are detailed in\n       [IPDOI].\n\
    \   The payload type for the Identification Payload is five (5).\n"
- title: 3.9 Certificate Payload
  contents:
  - "3.9 Certificate Payload\n   The Certificate Payload provides a means to transport\
    \ certificates or\n   other certificate-related information via ISAKMP and can\
    \ appear in\n   any ISAKMP message.  Certificate payloads SHOULD be included in\
    \ an\n   exchange whenever an appropriate directory service (e.g.  Secure DNS\n\
    \   [DNSSEC]) is not available to distribute certificates.  The\n   Certificate\
    \ payload MUST be accepted at any point during an exchange.\n   Figure 10 shows\
    \ the format of the Certificate Payload.\n   NOTE: Certificate types and formats\
    \ are not generally bound to a DOI\n   - it is expected that there will only be\
    \ a few certificate types, and\n   that most DOIs will accept all of these types.\n\
    \   The Certificate Payload fields are defined as follows:\n    o  Next Payload\
    \ (1 octet) - Identifier for the payload type of the\n       next payload in the\
    \ message.  If the current payload is the last\n       in the message, then this\
    \ field will be 0.\n                          1                   2          \
    \         3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     ! Next Payload  !   RESERVED    !         Payload Length        !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     ! Cert\
    \ Encoding !                                               !\n     +-+-+-+-+-+-+-+-+\
    \                                               !\n     ~                    \
    \   Certificate Data                        ~\n     !                        \
    \                                       !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 10:  Certificate Payload Format\n    o  RESERVED (1 octet)\
    \ - Unused, set to 0.\n    o  Payload Length (2 octets) - Length in octets of\
    \ the current\n       payload, including the generic payload header.\n    o  Certificate\
    \ Encoding (1 octet) - This field indicates the type of\n       certificate or\
    \ certificate-related information contained in the\n       Certificate Data field.\n\
    \                          Certificate Type            Value\n               \
    \   NONE                                   0\n                  PKCS #7 wrapped\
    \ X.509 certificate      1\n                  PGP Certificate                \
    \        2\n                  DNS Signed Key                         3\n     \
    \             X.509 Certificate - Signature          4\n                  X.509\
    \ Certificate - Key Exchange       5\n                  Kerberos Tokens      \
    \                  6\n                  Certificate Revocation List (CRL)    \
    \  7\n                  Authority Revocation List (ARL)        8\n           \
    \       SPKI Certificate                       9\n                  X.509 Certificate\
    \ - Attribute         10\n                  RESERVED                         \
    \  11 - 255\n    o  Certificate Data (variable length) - Actual encoding of\n\
    \       certificate data.  The type of certificate is indicated by the\n     \
    \  Certificate Encoding field.\n   The payload type for the Certificate Payload\
    \ is six (6).\n"
- title: 3.10 Certificate Request Payload
  contents:
  - "3.10 Certificate Request Payload\n   The Certificate Request Payload provides\
    \ a means to request\n   certificates via ISAKMP and can appear in any message.\
    \  Certificate\n   Request payloads SHOULD be included in an exchange whenever\
    \ an\n   appropriate directory service (e.g.  Secure DNS [DNSSEC]) is not\n  \
    \ available to distribute certificates.  The Certificate Request\n   payload MUST\
    \ be accepted at any point during the exchange.  The\n   responder to the Certificate\
    \ Request payload MUST send its\n   certificate, if certificates are supported,\
    \ based on the values\n   contained in the payload.  If multiple certificates\
    \ are required,\n   then multiple Certificate Request payloads SHOULD be transmitted.\n\
    \   Figure 11 shows the format of the Certificate Request Payload.\n         \
    \                 1                   2                   3\n      0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     ! Next Payload  !   RESERVED    !         Payload Length        !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     !  Cert.\
    \ Type   !                                               !\n     +-+-+-+-+-+-+-+-+\
    \                                               !\n     ~                    Certificate\
    \ Authority                      ~\n     !                                   \
    \                            !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           Figure 11:  Certificate Request Payload Format\n   The Certificate\
    \ Payload fields are defined as follows:\n    o  Next Payload (1 octet) - Identifier\
    \ for the payload type of the\n       next payload in the message.  If the current\
    \ payload is the last\n       in the message, then this field will be 0.\n   \
    \ o  RESERVED (1 octet) - Unused, set to 0.\n    o  Payload Length (2 octets)\
    \ - Length in octets of the current\n       payload, including the generic payload\
    \ header.\n    o  Certificate Type (1 octet) - Contains an encoding of the type\
    \ of\n       certificate requested.  Acceptable values are listed in section\n\
    \       3.9.\n    o  Certificate Authority (variable length) - Contains an encoding\
    \ of\n       an acceptable certificate authority for the type of certificate\n\
    \       requested.  As an example, for an X.509 certificate this field\n     \
    \  would contain the Distinguished Name encoding of the Issuer Name\n       of\
    \ an X.509 certificate authority acceptable to the sender of\n       this payload.\
    \  This would be included to assist the responder in\n       determining how much\
    \ of the certificate chain would need to be\n       sent in response to this request.\
    \  If there is no specific\n       certificate authority requested, this field\
    \ SHOULD not be\n       included.\n   The payload type for the Certificate Request\
    \ Payload is seven (7).\n"
- title: 3.11 Hash Payload
  contents:
  - "3.11 Hash Payload\n   The Hash Payload contains data generated by the hash function\n\
    \   (selected during the SA establishment exchange), over some part of\n   the\
    \ message and/or ISAKMP state.  This payload may be used to verify\n   the integrity\
    \ of the data in an ISAKMP message or for authentication\n   of the negotiating\
    \ entities.  Figure 12 shows the format of the Hash\n   Payload.\n           \
    \               1                   2                   3\n      0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     ! Next Payload  !   RESERVED    !         Payload Length        !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     !  \
    \                                                             !\n     ~      \
    \                     Hash Data                           ~\n     !          \
    \                                                     !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 12:  Hash Payload Format\n   The Hash Payload fields\
    \ are defined as follows:\n    o  Next Payload (1 octet) - Identifier for the\
    \ payload type of the\n       next payload in the message.  If the current payload\
    \ is the last\n       in the message, then this field will be 0.\n    o  RESERVED\
    \ (1 octet) - Unused, set to 0.\n    o  Payload Length (2 octets) - Length in\
    \ octets of the current\n       payload, including the generic payload header.\n\
    \    o  Hash Data (variable length) - Data that results from applying the\n  \
    \     hash routine to the ISAKMP message and/or state.\n"
- title: 3.12 Signature Payload
  contents:
  - "3.12 Signature Payload\n   The Signature Payload contains data generated by the\
    \ digital\n   signature function (selected during the SA establishment exchange),\n\
    \   over some part of the message and/or ISAKMP state.  This payload is\n   used\
    \ to verify the integrity of the data in the ISAKMP message, and\n   may be of\
    \ use for non-repudiation services.  Figure 13 shows the\n   format of the Signature\
    \ Payload.\n                          1                   2                  \
    \ 3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n \
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     !\
    \ Next Payload  !   RESERVED    !         Payload Length        !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     !                                                               !\n    \
    \ ~                         Signature Data                        ~\n     !  \
    \                                                             !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 13:  Signature Payload Format\n   The Signature Payload\
    \ fields are defined as follows:\n    o  Next Payload (1 octet) - Identifier for\
    \ the payload type of the\n       next payload in the message.  If the current\
    \ payload is the last\n       in the message, then this field will be 0.\n   \
    \ o  RESERVED (1 octet) - Unused, set to 0.\n    o  Payload Length (2 octets)\
    \ - Length in octets of the current\n       payload, including the generic payload\
    \ header.\n    o  Signature Data (variable length) - Data that results from\n\
    \       applying the digital signature function to the ISAKMP message\n      \
    \ and/or state.\n   The payload type for the Signature Payload is nine (9).\n"
- title: 3.13 Nonce Payload
  contents:
  - "3.13 Nonce Payload\n   The Nonce Payload contains random data used to guarantee\
    \ liveness\n   during an exchange and protect against replay attacks.  Figure\
    \ 14\n   shows the format of the Nonce Payload.  If nonces are used by a\n   particular\
    \ key exchange, the use of the Nonce payload will be\n   dictated by the key exchange.\
    \  The nonces may be transmitted as part\n   of the key exchange data, or as a\
    \ separate payload.  However, this is\n   defined by the key exchange, not by\
    \ ISAKMP.\n                          1                   2                   3\n\
    \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     ! Next Payload  !   RESERVED    !         Payload Length        !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     !  \
    \                                                             !\n     ~      \
    \                      Nonce Data                         ~\n     !          \
    \                                                     !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 14:  Nonce Payload Format\n   The Nonce Payload fields\
    \ are defined as follows:\n    o  Next Payload (1 octet) - Identifier for the\
    \ payload type of the\n       next payload in the message.  If the current payload\
    \ is the last\n       in the message, then this field will be 0.\n    o  RESERVED\
    \ (1 octet) - Unused, set to 0.\n    o  Payload Length (2 octets) - Length in\
    \ octets of the current\n       payload, including the generic payload header.\n\
    \    o  Nonce Data (variable length) - Contains the random data generated\n  \
    \     by the transmitting entity.\n   The payload type for the Nonce Payload is\
    \ ten (10).\n"
- title: 3.14 Notification Payload
  contents:
  - "3.14 Notification Payload\n   The Notification Payload can contain both ISAKMP\
    \ and DOI-specific\n   data and is used to transmit informational data, such as\
    \ error\n   conditions, to an ISAKMP peer.  It is possible to send multiple\n\
    \   Notification payloads in a single ISAKMP message.  Figure 15 shows\n   the\
    \ format of the Notification Payload.\n   Notification which occurs during, or\
    \ is concerned with, a Phase 1\n   negotiation is identified by the Initiator\
    \ and Responder cookie pair\n   in the ISAKMP Header.  The Protocol Identifier,\
    \ in this case, is\n   ISAKMP and the SPI value is 0 because the cookie pair in\
    \ the ISAKMP\n   Header identifies the ISAKMP SA. If the notification takes place\n\
    \   prior to the completed exchange of keying information, then the\n   notification\
    \ will be unprotected.\n   Notification which occurs during, or is concerned with,\
    \ a Phase 2\n   negotiation is identified by the Initiator and Responder cookie\
    \ pair\n   in the ISAKMP Header and the Message ID and SPI associated with the\n\
    \   current negotiation.  One example for this type of notification is to\n  \
    \ indicate why a proposal was rejected.\n                          1         \
    \          2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     ! Next Payload  !   RESERVED    !         Payload Length        !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     !  \
    \            Domain of Interpretation  (DOI)                  !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     !  Protocol-ID  !   SPI Size    !      Notify Message Type      !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     !  \
    \                                                             !\n     ~      \
    \          Security Parameter Index (SPI)                 ~\n     !          \
    \                                                     !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     !                                                               !\n    \
    \ ~                       Notification Data                       ~\n     !  \
    \                                                             !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 15:  Notification Payload Format\n   The Notification Payload\
    \ fields are defined as follows:\n    o  Next Payload (1 octet) - Identifier for\
    \ the payload type of the\n       next payload in the message.  If the current\
    \ payload is the last\n       in the message, then this field will be 0.\n   \
    \ o  RESERVED (1 octet) - Unused, set to 0.\n    o  Payload Length (2 octets)\
    \ - Length in octets of the current\n       payload, including the generic payload\
    \ header.\n    o  Domain of Interpretation (4 octets) - Identifies the DOI (as\n\
    \       described in Section 2.1) under which this notification is taking\n  \
    \     place.  For ISAKMP this value is zero (0) and for the IPSEC DOI\n      \
    \ it is one (1).  Other DOI's can be defined using the description\n       in\
    \ appendix B.\n    o  Protocol-Id (1 octet) - Specifies the protocol identifier\
    \ for the\n       current notification.  Examples might include ISAKMP, IPSEC\
    \ ESP,\n       IPSEC AH, OSPF, TLS, etc.\n    o  SPI Size (1 octet) - Length in\
    \ octets of the SPI as defined by\n       the Protocol-Id.  In the case of ISAKMP,\
    \ the Initiator and\n       Responder cookie pair from the ISAKMP Header is the\
    \ ISAKMP SPI,\n       therefore, the SPI Size is irrelevant and MAY be from zero\
    \ (0) to\n       sixteen (16).  If the SPI Size is non-zero, the content of the\n\
    \       SPI field MUST be ignored.  The Domain of Interpretation (DOI)\n     \
    \  will dictate the SPI Size for other protocols.\n    o  Notify Message Type\
    \ (2 octets) - Specifies the type of\n       notification message (see section\
    \ 3.14.1).  Additional text, if\n       specified by the DOI, is placed in the\
    \ Notification Data field.\n    o  SPI (variable length) - Security Parameter\
    \ Index.  The receiving\n       entity's SPI. The use of the SPI field is described\
    \ in section\n       2.4.  The length of this field is determined by the SPI Size\n\
    \       field and is not necessarily aligned to a 4 octet boundary.\n    o  Notification\
    \ Data (variable length) - Informational or error data\n       transmitted in\
    \ addition to the Notify Message Type.  Values for\n       this field are DOI-specific.\n\
    \   The payload type for the Notification Payload is eleven (11).\n"
- title: 3.14.1 Notify Message Types
  contents:
  - "3.14.1 Notify Message Types\n   Notification information can be error messages\
    \ specifying why an SA\n   could not be established.  It can also be status data\
    \ that a process\n   managing an SA database wishes to communicate with a peer\
    \ process.\n   For example, a secure front end or security gateway may use the\n\
    \   Notify message to synchronize SA communication.  The table below\n   lists\
    \ the Nofitication messages and their corresponding values.\n   Values in the\
    \ Private Use range are expected to be DOI-specific\n   values.\n            \
    \          NOTIFY MESSAGES - ERROR TYPES\n                           Errors  \
    \             Value\n                 INVALID-PAYLOAD-TYPE             1\n   \
    \              DOI-NOT-SUPPORTED                2\n                 SITUATION-NOT-SUPPORTED\
    \          3\n                 INVALID-COOKIE                   4\n          \
    \       INVALID-MAJOR-VERSION            5\n                 INVALID-MINOR-VERSION\
    \            6\n                 INVALID-EXCHANGE-TYPE            7\n        \
    \         INVALID-FLAGS                    8\n                 INVALID-MESSAGE-ID\
    \               9\n                 INVALID-PROTOCOL-ID             10\n     \
    \            INVALID-SPI                     11\n                 INVALID-TRANSFORM-ID\
    \            12\n                 ATTRIBUTES-NOT-SUPPORTED        13\n       \
    \          NO-PROPOSAL-CHOSEN              14\n                 BAD-PROPOSAL-SYNTAX\
    \             15\n                 PAYLOAD-MALFORMED               16\n      \
    \           INVALID-KEY-INFORMATION         17\n                 INVALID-ID-INFORMATION\
    \          18\n                 INVALID-CERT-ENCODING           19\n         \
    \        INVALID-CERTIFICATE             20\n                 CERT-TYPE-UNSUPPORTED\
    \           21\n                 INVALID-CERT-AUTHORITY          22\n        \
    \         INVALID-HASH-INFORMATION        23\n                 AUTHENTICATION-FAILED\
    \           24\n                 INVALID-SIGNATURE               25\n        \
    \         ADDRESS-NOTIFICATION            26\n                 NOTIFY-SA-LIFETIME\
    \              27\n                 CERTIFICATE-UNAVAILABLE         28\n     \
    \            UNSUPPORTED-EXCHANGE-TYPE       29\n                 UNEQUAL-PAYLOAD-LENGTHS\
    \         30\n                 RESERVED (Future Use)        31 - 8191\n      \
    \           Private Use                8192 - 16383\n                      NOTIFY\
    \ MESSAGES - STATUS TYPES\n                          Status              Value\n\
    \                  CONNECTED                   16384\n                  RESERVED\
    \ (Future Use)   16385 - 24575\n                  DOI-specific codes     24576\
    \ - 32767\n                  Private Use            32768 - 40959\n          \
    \        RESERVED (Future Use)  40960 - 65535\n"
- title: 3.15 Delete Payload
  contents:
  - "3.15 Delete Payload\n   The Delete Payload contains a protocol-specific security\
    \ association\n   identifier that the sender has removed from its security association\n\
    \   database and is, therefore, no longer valid.  Figure 16 shows the\n   format\
    \ of the Delete Payload.  It is possible to send multiple SPIs\n   in a Delete\
    \ payload, however, each SPI MUST be for the same protocol.\n   Mixing of Protocol\
    \ Identifiers MUST NOT be performed with the Delete\n   payload.\n   Deletion\
    \ which is concerned with an ISAKMP SA will contain a\n   Protocol-Id of ISAKMP\
    \ and the SPIs are the initiator and responder\n   cookies from the ISAKMP Header.\
    \  Deletion which is concerned with a\n   Protocol SA, such as ESP or AH, will\
    \ contain the Protocol-Id of that\n   protocol (e.g.  ESP, AH) and the SPI is\
    \ the sending entity's SPI(s).\n   NOTE: The Delete Payload is not a request for\
    \ the responder to delete\n   an SA, but an advisory from the initiator to the\
    \ responder.  If the\n   responder chooses to ignore the message, the next communication\
    \ from\n   the responder to the initiator, using that security association, will\n\
    \   fail.  A responder is not expected to acknowledge receipt of a Delete\n  \
    \ payload.\n                          1                   2                  \
    \ 3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n \
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     !\
    \ Next Payload  !   RESERVED    !         Payload Length        !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     !              Domain of Interpretation  (DOI)                  !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     !  Protocol-Id\
    \  !   SPI Size    !           # of SPIs           !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     !                                                               !\n    \
    \ ~               Security Parameter Index(es) (SPI)              ~\n     !  \
    \                                                             !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 16:  Delete Payload Format\n   The Delete Payload fields\
    \ are defined as follows:\n    o  Next Payload (1 octet) - Identifier for the\
    \ payload type of the\n       next payload in the message.  If the current payload\
    \ is the last\n       in the message, then this field will be 0.\n    o  RESERVED\
    \ (1 octet) - Unused, set to 0.\n    o  Payload Length (2 octets) - Length in\
    \ octets of the current\n       payload, including the generic payload header.\n\
    \    o  Domain of Interpretation (4 octets) - Identifies the DOI (as\n       described\
    \ in Section 2.1) under which this deletion is taking\n       place.  For ISAKMP\
    \ this value is zero (0) and for the IPSEC DOI\n       it is one (1).  Other DOI's\
    \ can be defined using the description\n       in appendix B.\n    o  Protocol-Id\
    \ (1 octet) - ISAKMP can establish security\n       associations for various protocols,\
    \ including ISAKMP and IPSEC.\n       This field identifies which security association\
    \ database to\n       apply the delete request.\n    o  SPI Size (1 octet) - Length\
    \ in octets of the SPI as defined by\n       the Protocol-Id.  In the case of\
    \ ISAKMP, the Initiator and\n       Responder cookie pair is the ISAKMP SPI. In\
    \ this case, the SPI\n       Size would be 16 octets for each SPI being deleted.\n\
    \    o  # of SPIs (2 octets) - The number of SPIs contained in the Delete\n  \
    \     payload.  The size of each SPI is defined by the SPI Size field.\n    o\
    \  Security Parameter Index(es) (variable length) - Identifies the\n       specific\
    \ security association(s) to delete.  Values for this\n       field are DOI and\
    \ protocol specific.  The length of this field is\n       determined by the SPI\
    \ Size and # of SPIs fields.\n   The payload type for the Delete Payload is twelve\
    \ (12).\n"
- title: 3.16 Vendor ID Payload
  contents:
  - "3.16 Vendor ID Payload\n   The Vendor ID Payload contains a vendor defined constant.\
    \  The\n   constant is used by vendors to identify and recognize remote\n   instances\
    \ of their implementations.  This mechanism allows a vendor\n   to experiment\
    \ with new features while maintaining backwards\n   compatibility.  This is not\
    \ a general extension facility of ISAKMP.\n   Figure 17 shows the format of the\
    \ Vendor ID Payload.\n   The Vendor ID payload is not an announcement from the\
    \ sender that it\n   will send private payload types.  A vendor sending the Vendor\
    \ ID MUST\n   not make any assumptions about private payloads that it may send\n\
    \   unless a Vendor ID is received as well.  Multiple Vendor ID payloads\n   MAY\
    \ be sent.  An implementation is NOT REQUIRED to understand any\n   Vendor ID\
    \ payloads.  An implementation is NOT REQUIRED to send any\n   Vendor ID payload\
    \ at all.  If a private payload was sent without\n   prior agreement to send it,\
    \ a compliant implementation may reject a\n   proposal with a notify message of\
    \ type INVALID-PAYLOAD-TYPE.\n   If a Vendor ID payload is sent, it MUST be sent\
    \ during the Phase 1\n   negotiation.  Reception of a familiar Vendor ID payload\
    \ in the Phase\n   1 negotiation allows an implementation to make use of Private\
    \ USE\n   payload numbers (128-255), described in section 3.1 for vendor\n   specific\
    \ extensions during Phase 2 negotiations.  The definition of\n   \"familiar\"\
    \ is left to implementations to determine.  Some vendors may\n   wish to implement\
    \ another vendor's extension prior to\n   standardization.  However, this practice\
    \ SHOULD not be widespread and\n   vendors should work towards standardization\
    \ instead.\n   The vendor defined constant MUST be unique.  The choice of hash\
    \ and\n   text to hash is left to the vendor to decide.  As an example, vendors\n\
    \   could generate their vendor id by taking a plain (non-keyed) hash of\n   a\
    \ string containing the product name, and the version of the product.\n   A hash\
    \ is used instead of a vendor registry to avoid local\n   cryptographic policy\
    \ problems with having a list of \"approved\"\n   products, to keep away from\
    \ maintaining a list of vendors, and to\n   allow classified products to avoid\
    \ having to appear on any list.  For\n   instance:\n   \"Example Company IPsec.\
    \  Version 97.1\"\n   (not including the quotes) has MD5 hash:\n   48544f9b1fe662af98b9b39e50c01a5a,\
    \ when using MD5file.  Vendors may\n   include all of the hash, or just a portion\
    \ of it, as the payload\n   length will bound the data.  There are no security\
    \ implications of\n   this hash, so its choice is arbitrary.\n               \
    \           1                   2                   3\n      0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     ! Next Payload  !   RESERVED    !         Payload Length        !\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     !  \
    \                                                             !\n     ~      \
    \                  Vendor ID (VID)                        ~\n     !          \
    \                                                     !\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 17:  Vendor ID Payload Format\n   The Vendor ID Payload\
    \ fields are defined as follows:\n    o  Next Payload (1 octet) - Identifier for\
    \ the payload type of the\n       next payload in the message.  If the current\
    \ payload is the last\n       in the message, then this field will be 0.\n   \
    \ o  RESERVED (1 octet) - Unused, set to 0.\n    o  Payload Length (2 octets)\
    \ - Length in octets of the current\n       payload, including the generic payload\
    \ header.\n    o  Vendor ID (variable length) - Hash of the vendor string plus\n\
    \       version (as described above).\n   The payload type for the Vendor ID Payload\
    \ is thirteen (13).\n"
- title: 4 ISAKMP Exchanges
  contents:
  - "4 ISAKMP Exchanges\n   ISAKMP supplies the basic syntax of a message exchange.\
    \  The basic\n   building blocks for ISAKMP messages are the payload types described\n\
    \   in section 3.  This section describes the procedures for SA\n   establishment\
    \ and SA modification, followed by a default set of\n   exchanges that MAY be\
    \ used for initial interoperability.  Other\n   exchanges will be defined depending\
    \ on the DOI and key exchange.\n   [IPDOI] and [IKE] are examples of how this\
    \ is achieved.  Appendix B\n   explains the procedures for accomplishing these\
    \ additions.\n"
- title: 4.1 ISAKMP Exchange Types
  contents:
  - "4.1 ISAKMP Exchange Types\n   ISAKMP allows the creation of exchanges for the\
    \ establishment of\n   Security Associations and keying material.  There are currently\
    \ five\n   default Exchange Types defined for ISAKMP. Sections 4.4 through 4.8\n\
    \   describe these exchanges.  Exchanges define the content and ordering\n   of\
    \ ISAKMP messages during communications between peers.  Most\n   exchanges will\
    \ include all the basic payload types - SA, KE, ID, SIG\n   - and may include\
    \ others.  The primary difference between exchange\n   types is the ordering of\
    \ the messages and the payload ordering within\n   each message.  While the ordering\
    \ of payloads within messages is not\n   mandated, for processing efficiency it\
    \ is RECOMMENDED that the\n   Security Association payload be the first payload\
    \ within an exchange.\n   Processing of each payload within an exchange is described\
    \ in section\n   5.\n   Sections 4.4 through 4.8 provide a default set of ISAKMP\
    \ exchanges.\n   These exchanges provide different security protection for the\n\
    \   exchange itself and information exchanged.  The diagrams in each of\n   the\
    \ following sections show the message ordering for each exchange\n   type as well\
    \ as the payloads included in each message, and provide\n   basic notes describing\
    \ what has happened after each message exchange.\n   None of the examples include\
    \ any \"optional payloads\", like\n   certificate and certificate request.  Additionally,\
    \ none of the\n   examples include an initial exchange of ISAKMP Headers (containing\n\
    \   initiator and responder cookies) which would provide protection\n   against\
    \ clogging (see section 2.5.3).\n   The defined exchanges are not meant to satisfy\
    \ all DOI and key\n   exchange protocol requirements.  If the defined exchanges\
    \ meet the\n   DOI requirements, then they can be used as outlined.  If the defined\n\
    \   exchanges do not meet the security requirements defined by the DOI,\n   then\
    \ the DOI MUST specify new exchange type(s) and the valid\n   sequences of payloads\
    \ that make up a successful exchange, and how to\n   build and interpret those\
    \ payloads.  All ISAKMP implementations MUST\n   implement the Informational Exchange\
    \ and SHOULD implement the other\n   four exchanges.  However, this is dependent\
    \ on the definition of the\n   DOI and associated key exchange protocols.\n  \
    \ As discussed above, these exchange types can be used in either phase\n   of\
    \ negotiation.  However, they may provide different security\n   properties in\
    \ each of the phases.  With each of these exchanges, the\n   combination of cookies\
    \ and SPI fields identifies whether this\n   exchange is being used in the first\
    \ or second phase of a negotiation.\n"
- title: 4.1.1 Notation
  contents:
  - "4.1.1 Notation\n   The following notation is used to describe the ISAKMP exchange\
    \ types,\n   shown in the next section, with the message formats and associated\n\
    \   payloads:\n     HDR is an ISAKMP header whose exchange type defines the payload\n\
    \          orderings\n     SA is an SA negotiation payload with one or more Proposal\
    \ and\n          Transform payloads. An initiator MAY provide multiple proposals\n\
    \          for negotiation; a responder MUST reply with only one.\n     KE is\
    \ the key exchange payload.\n     IDx is the identity payload for \"x\". x can\
    \ be: \"ii\" or \"ir\"\n          for the ISAKMP initiator and responder, respectively,\
    \ or x can\n          be: \"ui\", \"ur\" (when the ISAKMP daemon is a proxy negotiator),\n\
    \          for the user initiator and responder, respectively.\n     HASH is the\
    \ hash payload.\n     SIG is the signature payload. The data to sign is exchange-specific.\n\
    \     AUTH is a generic authentication mechanism, such as HASH or SIG.\n     NONCE\
    \ is the nonce payload.\n     '*' signifies payload encryption after the ISAKMP\
    \ header. This\n          encryption MUST begin immediately after the ISAKMP header\
    \ and\n          all payloads following the ISAKMP header MUST be encrypted.\n\
    \     => signifies \"initiator to responder\" communication\n     <= signifies\
    \ \"responder to initiator\" communication\n"
- title: 4.2 Security Association Establishment
  contents:
  - "4.2 Security Association Establishment\n   The Security Association, Proposal,\
    \ and Transform payloads are used\n   to build ISAKMP messages for the negotiation\
    \ and establishment of\n   SAs.  An SA establishment message consists of a single\
    \ SA payload\n   followed by at least one, and possibly many, Proposal payloads\
    \ and at\n   least one, and possibly many, Transform payloads associated with\
    \ each\n   Proposal payload.  Because these payloads are considered together,\n\
    \   the SA payload will point to any following payloads and not to the\n   Proposal\
    \ payload included with the SA payload.  The SA Payload\n   contains the DOI and\
    \ Situation for the proposed SA. Each Proposal\n   payload contains a Security\
    \ Parameter Index (SPI) and ensures that\n   the SPI is associated with the Protocol-Id\
    \ in accordance with the\n   Internet Security Architecture [SEC-ARCH].  Proposal\
    \ payloads may or\n   may not have the same SPI, as this is implementation dependent.\
    \  Each\n   Transform Payload contains the specific security mechanisms to be\n\
    \   used for the designated protocol.  It is expected that the Proposal\n   and\
    \ Transform payloads will be used only during SA establishment\n   negotiation.\
    \  The creation of payloads for security association\n   negotiation and establishment\
    \ described here in this section are\n   applicable for all ISAKMP exchanges described\
    \ later in sections 4.4\n   through 4.8.  The examples shown in 4.2.1 contain\
    \ only the SA,\n   Proposal, and Transform payloads and do not contain other payloads\n\
    \   that might exist for a given ISAKMP exchange.\n   The Proposal payload provides\
    \ the initiating entity with the\n   capability to present to the responding entity\
    \ the security protocols\n   and associated security mechanisms for use with the\
    \ security\n   association being negotiated.  If the SA establishment negotiation\
    \ is\n   for a combined protection suite consisting of multiple protocols,\n \
    \  then there MUST be multiple Proposal payloads each with the same\n   Proposal\
    \ number.  These proposals MUST be considered as a unit and\n   MUST NOT be separated\
    \ by a proposal with a different proposal number.\n   The use of the same Proposal\
    \ number in multiple Proposal payloads\n   provides a logical AND operation, i.e.\
    \  Protocol 1 AND Protocol 2.\n   The first example below shows an ESP AND AH\
    \ protection suite.  If the\n   SA establishment negotiation is for different\
    \ protection suites, then\n   there MUST be multiple Proposal payloads each with\
    \ a monotonically\n   increasing Proposal number.  The different proposals MUST\
    \ be\n   presented in the initiator's preference order.  The use of different\n\
    \   Proposal numbers in multiple Proposal payloads provides a logical OR\n   operation,\
    \ i.e.  Proposal 1 OR Proposal 2, where each proposal may\n   have more than one\
    \ protocol.  The second example below shows either\n   an AH AND ESP protection\
    \ suite OR just an ESP protection suite.  Note\n   that the Next Payload field\
    \ of the Proposal payload points to another\n   Proposal payload (if it exists).\
    \  The existence of a Proposal payload\n   implies the existence of one or more\
    \ Transform payloads.\n   The Transform payload provides the initiating entity\
    \ with the\n   capability to present to the responding entity multiple mechanisms,\n\
    \   or transforms, for a given protocol.  The Proposal payload identifies\n  \
    \ a Protocol for which services and mechanisms are being negotiated.\n   The Transform\
    \ payload allows the initiating entity to present several\n   possible supported\
    \ transforms for that proposed protocol.  There may\n   be several transforms\
    \ associated with a specific Proposal payload\n   each identified in a separate\
    \ Transform payload.  The multiple\n   transforms MUST be presented with monotonically\
    \ increasing numbers in\n   the initiator's preference order.  The receiving entity\
    \ MUST select a\n   single transform for each protocol in a proposal or reject\
    \ the entire\n   proposal.  The use of the Transform number in multiple Transform\n\
    \   payloads provides a second level OR operation, i.e.  Transform 1 OR\n   Transform\
    \ 2 OR Transform 3.  Example 1 below shows two possible\n   transforms for ESP\
    \ and a single transform for AH. Example 2 below\n   shows one transform for AH\
    \ AND one transform for ESP OR two\n   transforms for ESP alone.  Note that the\
    \ Next Payload field of the\n   Transform payload points to another Transform\
    \ payload or 0.  The\n   Proposal payload delineates the different proposals.\n\
    \   When responding to a Security Association payload, the responder MUST\n  \
    \ send a Security Association payload with the selected proposal, which\n   may\
    \ consist of multiple Proposal payloads and their associated\n   Transform payloads.\
    \  Each of the Proposal payloads MUST contain a\n   single Transform payload associated\
    \ with the Protocol.  The responder\n   SHOULD retain the Proposal # field in\
    \ the Proposal payload and the\n   Transform # field in each Transform payload\
    \ of the selected Proposal.\n   Retention of Proposal and Transform numbers should\
    \ speed the\n   initiator's protocol processing by negating the need to compare\
    \ the\n   respondor's selection with every offered option.  These values enable\n\
    \   the initiator to perform the comparison directly and quickly.  The\n   initiator\
    \ MUST verify that the Security Association payload received\n   from the responder\
    \ matches one of the proposals sent initially.\n"
- title: 4.2.1 Security Association Establishment Examples
  contents:
  - "4.2.1 Security Association Establishment Examples\n   This example shows a Proposal\
    \ for a combined protection suite with\n   two different protocols.  The first\
    \ protocol is presented with two\n   transforms supported by the proposer.  The\
    \ second protocol is\n   presented with a single transform.  An example for this\
    \ proposal\n   might be: Protocol 1 is ESP with Transform 1 as 3DES and Transform\
    \ 2\n   as DES AND Protocol 2 is AH with Transform 1 as SHA. The responder\n \
    \  MUST select from the two transforms proposed for ESP. The resulting\n   protection\
    \ suite will be either (1) 3DES AND SHA OR (2) DES AND SHA,\n   depending on which\
    \ ESP transform was selected by the responder.  Note\n   this example is shown\
    \ using the Base Exchange.\n                            1                   2\
    \                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      /+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     / ! NP = Nonce    !   RESERVED    !         Payload Length        !\n  \
    \  /  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: SA Pay !                 Domain of Interpretation (DOI)                !
  contents:
  - "SA Pay !                 Domain of Interpretation (DOI)                !\n  \
    \  \\  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \  \\ !                           Situation                           !\n    \
    \  >+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     /\
    \ ! NP = Proposal !   RESERVED    !         Payload Length        !\n    /  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 'Prop 1 ! Proposal # = 1!  Protocol-Id  !    SPI Size   !# of Trans. = 2!'
  contents:
  - 'Prop 1 ! Proposal # = 1!  Protocol-Id  !    SPI Size   !# of Trans. = 2!

    '
- title: Prot 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - "Prot 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \   \\ !                         SPI (variable)                        !\n   \
    \   >+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     /\
    \ ! NP = Transform!   RESERVED    !         Payload Length        !\n    /  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 'Tran 1 ! Transform # 1 ! Transform ID  !           RESERVED2           !'
  contents:
  - "Tran 1 ! Transform # 1 ! Transform ID  !           RESERVED2           !\n  \
    \  \\  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \  \\ !                         SA Attributes                         !\n    \
    \  >+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     /\
    \ ! NP = 0        !   RESERVED    !         Payload Length        !\n    /  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 'Tran 2 ! Transform # 2 ! Transform ID  !           RESERVED2           !'
  contents:
  - "Tran 2 ! Transform # 2 ! Transform ID  !           RESERVED2           !\n  \
    \  \\  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \  \\ !                         SA Attributes                         !\n    \
    \  >+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     /\
    \ ! NP = 0        !   RESERVED    !         Payload Length        !\n    /  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 'Prop 1 ! Proposal # = 1!  Protocol ID  !    SPI Size   !# of Trans. = 1!'
  contents:
  - 'Prop 1 ! Proposal # = 1!  Protocol ID  !    SPI Size   !# of Trans. = 1!

    '
- title: Prot 2 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - "Prot 2 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \   \\ !                         SPI (variable)                        !\n   \
    \   >+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     /\
    \ ! NP = 0        !   RESERVED    !         Payload Length        !\n    /  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 'Tran 1 ! Transform # 1 ! Transform ID  !           RESERVED2           !'
  contents:
  - "Tran 1 ! Transform # 1 ! Transform ID  !           RESERVED2           !\n  \
    \  \\  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \  \\ !                         SA Attributes                         !\n    \
    \  \\+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   This\
    \ second example shows a Proposal for two different protection\n   suites.  The\
    \ SA Payload was omitted for space reasons.  The first\n   protection suite is\
    \ presented with one transform for the first\n   protocol and one transform for\
    \ the second protocol.  The second\n   protection suite is presented with two\
    \ transforms for a single\n   protocol.  An example for this proposal might be:\
    \  Proposal 1 with\n   Protocol 1 as AH with Transform 1 as MD5 AND Protocol 2\
    \ as ESP with\n   Transform 1 as 3DES. This is followed by Proposal 2 with Protocol\
    \ 1\n   as ESP with Transform 1 as DES and Transform 2 as 3DES. The responder\n\
    \   MUST select from the two different proposals.  If the second Proposal\n  \
    \ is selected, the responder MUST select from the two transforms for\n   ESP.\
    \ The resulting protection suite will be either (1) MD5 AND 3DES\n   OR the selection\
    \ between (2) DES OR (3) 3DES.\n                            1                \
    \   2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n      /+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     / ! NP = Proposal !   RESERVED    !         Payload Length        !\n  \
    \  /  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 'Prop 1 ! Proposal # = 1!  Protocol ID  !    SPI Size   !# of Trans. = 1!'
  contents:
  - 'Prop 1 ! Proposal # = 1!  Protocol ID  !    SPI Size   !# of Trans. = 1!

    '
- title: Prot 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - "Prot 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \   \\ !                         SPI (variable)                        !\n   \
    \   >+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     /\
    \ ! NP = 0        !   RESERVED    !         Payload Length        !\n    /  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 'Tran 1 ! Transform # 1 ! Transform ID  !           RESERVED2           !'
  contents:
  - "Tran 1 ! Transform # 1 ! Transform ID  !           RESERVED2           !\n  \
    \  \\  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \  \\ !                         SA Attributes                         !\n    \
    \  >+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     /\
    \ ! NP = Proposal !   RESERVED    !         Payload Length        !\n    /  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 'Prop 1 ! Proposal # = 1! Protocol ID   !    SPI Size   !# of Trans. = 1!'
  contents:
  - 'Prop 1 ! Proposal # = 1! Protocol ID   !    SPI Size   !# of Trans. = 1!

    '
- title: Prot 2 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - "Prot 2 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \   \\ !                         SPI (variable)                        !\n   \
    \   >+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     /\
    \ ! NP = 0        !   RESERVED    !         Payload Length        !\n    /  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 'Tran 1 ! Transform # 1 ! Transform ID  !           RESERVED2           !'
  contents:
  - "Tran 1 ! Transform # 1 ! Transform ID  !           RESERVED2           !\n  \
    \  \\  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \  \\ !                         SA Attributes                         !\n    \
    \  >+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     /\
    \ ! NP = 0        !   RESERVED    !         Payload Length        !\n    /  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 'Prop 2 ! Proposal # = 2! Protocol ID   !    SPI Size   !# of Trans. = 2!'
  contents:
  - 'Prop 2 ! Proposal # = 2! Protocol ID   !    SPI Size   !# of Trans. = 2!

    '
- title: Prot 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - "Prot 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \   \\ !                         SPI (variable)                        !\n   \
    \   >+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     /\
    \ ! NP = Transform!   RESERVED    !         Payload Length        !\n    /  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 'Tran 1 ! Transform # 1 ! Transform ID  !           RESERVED2           !'
  contents:
  - "Tran 1 ! Transform # 1 ! Transform ID  !           RESERVED2           !\n  \
    \  \\  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \  \\ !                         SA Attributes                         !\n    \
    \  >+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     /\
    \ ! NP = 0        !   RESERVED    !         Payload Length        !\n    /  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 'Tran 2 ! Transform # 2 ! Transform ID  !           RESERVED2           !'
  contents:
  - "Tran 2 ! Transform # 2 ! Transform ID  !           RESERVED2           !\n  \
    \  \\  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \  \\ !                         SA Attributes                         !\n    \
    \  \\+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 4.3 Security Association Modification
  contents:
  - "4.3 Security Association Modification\n   Security Association modification within\
    \ ISAKMP is accomplished by\n   creating a new SA and initiating communications\
    \ using that new SA.\n   Deletion of the old SA can be done anytime after the\
    \ new SA is\n   established.  Deletion of the old SA is dependent on local security\n\
    \   policy.  Modification of SAs by using a \"Create New SA followed by\n   Delete\
    \ Old SA\" method is done to avoid potential vulnerabilities in\n   synchronizing\
    \ modification of existing SA attributes.  The procedure\n   for creating new\
    \ SAs is outlined in section 4.2.  The procedure for\n   deleting SAs is outlined\
    \ in section 5.15.\n   Modification of an ISAKMP SA (phase 1 negotiation) follows\
    \ the same\n   procedure as creation of an ISAKMP SA. There is no relationship\n\
    \   between the two SAs and the initiator and responder cookie pairs\n   SHOULD\
    \ be different, as outlined in section 2.5.3.\n   Modification of a Protocol SA\
    \ (phase 2 negotiation) follows the same\n   procedure as creation of a Protocol\
    \ SA. The creation of a new SA is\n   protected by the existing ISAKMP SA. There\
    \ is no relationship between\n   the two Protocol SAs.  A protocol implementation\
    \ SHOULD begin using\n   the newly created SA for outbound traffic and SHOULD\
    \ continue to\n   support incoming traffic on the old SA until it is deleted or\
    \ until\n   traffic is received under the protection of the newly created SA.\
    \ As\n   stated previously in this section, deletion of an old SA is then\n  \
    \ dependent on local security policy.\n"
- title: 4.4 Base Exchange
  contents:
  - "4.4 Base Exchange\n   The Base Exchange is designed to allow the Key Exchange\
    \ and\n   Authentication related information to be transmitted together.\n   Combining\
    \ the Key Exchange and Authentication-related information\n   into one message\
    \ reduces the number of round-trips at the expense of\n   not providing identity\
    \ protection.  Identity protection is not\n   provided because identities are\
    \ exchanged before a common shared\n   secret has been established and, therefore,\
    \ encryption of the\n   identities is not possible.  The following diagram shows\
    \ the messages\n   with the possible payloads sent in each message and notes for\
    \ an\n   example of the Base Exchange.\n                         BASE EXCHANGE\n\
    \ #  Initiator Direction  Responder            NOTE\n"
- title: (1)  HDR; SA; NONCE  =>           Begin ISAKMP-SA or Proxy negotiation
  contents:
  - '(1)  HDR; SA; NONCE  =>           Begin ISAKMP-SA or Proxy negotiation

    '
- title: (2)                  <=  HDR; SA; NONCE
  contents:
  - "(2)                  <=  HDR; SA; NONCE\n                                  Basic\
    \ SA agreed upon\n"
- title: (3)  HDR; KE;        =>
  contents:
  - "(3)  HDR; KE;        =>\n     IDii; AUTH                   Key Generated (by\
    \ responder)\n                                  Initiator Identity Verified by\n\
    \                                  Responder\n"
- title: (4)                  <=  HDR; KE;
  contents:
  - "(4)                  <=  HDR; KE;\n                         IDir; AUTH\n    \
    \                              Responder Identity Verified by\n              \
    \                    Initiator Key Generated (by\n                           \
    \       initiator) SA established\n   In the first message (1), the initiator\
    \ generates a proposal it\n   considers adequate to protect traffic for the given\
    \ situation.  The\n   Security Association, Proposal, and Transform payloads are\
    \ included\n   in the Security Association payload (for notation purposes).  Random\n\
    \   information which is used to guarantee liveness and protect against\n   replay\
    \ attacks is also transmitted.  Random information provided by\n   both parties\
    \ SHOULD be used by the authentication mechanism to\n   provide shared proof of\
    \ participation in the exchange.\n   In the second message (2), the responder\
    \ indicates the protection\n   suite it has accepted with the Security Association,\
    \ Proposal, and\n   Transform payloads.  Again, random information which is used\
    \ to\n   guarantee liveness and protect against replay attacks is also\n   transmitted.\
    \  Random information provided by both parties SHOULD be\n   used by the authentication\
    \ mechanism to provide shared proof of\n   participation in the exchange.  Local\
    \ security policy dictates the\n   action of the responder if no proposed protection\
    \ suite is accepted.\n   One possible action is the transmission of a Notify payload\
    \ as part\n   of an Informational Exchange.\n   In the third (3) and fourth (4)\
    \ messages, the initiator and\n   responder, respectively, exchange keying material\
    \ used to arrive at a\n   common shared secret and identification information.\
    \  This\n   information is transmitted under the protection of the agreed upon\n\
    \   authentication function.  Local security policy dictates the action\n   if\
    \ an error occurs during these messages.  One possible action is the\n   transmission\
    \ of a Notify payload as part of an Informational\n   Exchange.\n"
- title: 4.5 Identity Protection Exchange
  contents:
  - "4.5 Identity Protection Exchange\n   The Identity Protection Exchange is designed\
    \ to separate the Key\n   Exchange information from the Identity and Authentication\
    \ related\n   information.  Separating the Key Exchange from the Identity and\n\
    \   Authentication related information provides protection of the\n   communicating\
    \ identities at the expense of two additional messages.\n   Identities are exchanged\
    \ under the protection of a previously\n   established common shared secret. \
    \ The following diagram shows the\n   messages with the possible payloads sent\
    \ in each message and notes\n   for an example of the Identity Protection Exchange.\n\
    \                    IDENTITY PROTECTION EXCHANGE\n #      Initiator       Direction\
    \    Responder      NOTE\n"
- title: (1)  HDR; SA               =>                       Begin ISAKMP-SA or
  contents:
  - "(1)  HDR; SA               =>                       Begin ISAKMP-SA or\n    \
    \                                                Proxy negotiation\n"
- title: (2)                        <=     HDR; SA
  contents:
  - "(2)                        <=     HDR; SA\n                                 \
    \                   Basic SA agreed upon\n"
- title: (3)  HDR; KE; NONCE        =>
  contents:
  - '(3)  HDR; KE; NONCE        =>

    '
- title: (4)                        <=     HDR; KE; NONCE
  contents:
  - "(4)                        <=     HDR; KE; NONCE\n                          \
    \                          Key Generated (by\n                               \
    \                     Initiator and\n                                        \
    \            Responder)\n"
- title: (5)  HDR*; IDii; AUTH      =>
  contents:
  - "(5)  HDR*; IDii; AUTH      =>\n                                             \
    \       Initiator Identity\n                                                 \
    \   Verified by\n                                                    Responder\n"
- title: (6)                        <=     HDR*; IDir; AUTH
  contents:
  - "(6)                        <=     HDR*; IDir; AUTH\n                        \
    \                            Responder Identity\n                            \
    \                        Verified by\n                                       \
    \             Initiator\n                                                    SA\
    \ established\n   In the first message (1), the initiator generates a proposal\
    \ it\n   considers adequate to protect traffic for the given situation.  The\n\
    \   Security Association, Proposal, and Transform payloads are included\n   in\
    \ the Security Association payload (for notation purposes).\n   In the second\
    \ message (2), the responder indicates the protection\n   suite it has accepted\
    \ with the Security Association, Proposal, and\n   Transform payloads.  Local\
    \ security policy dictates the action of the\n   responder if no proposed protection\
    \ suite is accepted.  One possible\n   action is the transmission of a Notify\
    \ payload as part of an\n   Informational Exchange.\n   In the third (3) and fourth\
    \ (4) messages, the initiator and\n   responder, respectively, exchange keying\
    \ material used to arrive at a\n   common shared secret and random information\
    \ which is used to\n   guarantee liveness and protect against replay attacks.\
    \  Random\n   information provided by both parties SHOULD be used by the\n   authentication\
    \ mechanism to provide shared proof of participation in\n   the exchange.  Local\
    \ security policy dictates the action if an error\n   occurs during these messages.\
    \  One possible action is the\n   transmission of a Notify payload as part of\
    \ an Informational\n   Exchange.\n   In the fifth (5) and sixth (6) messages,\
    \ the initiator and responder,\n   respectively, exchange identification information\
    \ and the results of\n   the agreed upon authentication function.  This information\
    \ is\n   transmitted under the protection of the common shared secret.  Local\n\
    \   security policy dictates the action if an error occurs during these\n   messages.\
    \  One possible action is the transmission of a Notify\n   payload as part of\
    \ an Informational Exchange.\n"
- title: 4.6 Authentication Only Exchange
  contents:
  - "4.6 Authentication Only Exchange\n   The Authentication Only Exchange is designed\
    \ to allow only\n   Authentication related information to be transmitted.  The\
    \ benefit of\n   this exchange is the ability to perform only authentication without\n\
    \   the computational expense of computing keys.  Using this exchange\n   during\
    \ negotiation, none of the transmitted information will be\n   encrypted.  However,\
    \ the information may be encrypted in other\n   places.  For example, if encryption\
    \ is negotiated during the first\n   phase of a negotiation and the authentication\
    \ only exchange is used\n   in the second phase of a negotiation, then the authentication\
    \ only\n   exchange will be encrypted by the ISAKMP SAs negotiated in the first\n\
    \   phase.  The following diagram shows the messages with possible\n   payloads\
    \ sent in each message and notes for an example of the\n   Authentication Only\
    \ Exchange.\n                     AUTHENTICATION ONLY EXCHANGE\n #      Initiator\
    \     Direction     Responder     NOTE\n"
- title: (1)  HDR; SA; NONCE      =>                       Begin ISAKMP-SA or
  contents:
  - "(1)  HDR; SA; NONCE      =>                       Begin ISAKMP-SA or\n      \
    \                                            Proxy negotiation\n"
- title: (2)                       <=     HDR; SA; NONCE;
  contents:
  - "(2)                       <=     HDR; SA; NONCE;\n                          \
    \       IDir; AUTH\n                                                  Basic SA\
    \ agreed upon\n                                                  Responder Identity\n\
    \                                                  Verified by Initiator\n"
- title: (3)  HDR; IDii; AUTH      =>
  contents:
  - "(3)  HDR; IDii; AUTH      =>\n                                              \
    \    Initiator Identity\n                                                  Verified\
    \ by Responder\n                                                  SA established\n\
    \   In the first message (1), the initiator generates a proposal it\n   considers\
    \ adequate to protect traffic for the given situation.  The\n   Security Association,\
    \ Proposal, and Transform payloads are included\n   in the Security Association\
    \ payload (for notation purposes).  Random\n   information which is used to guarantee\
    \ liveness and protect against\n   replay attacks is also transmitted.  Random\
    \ information provided by\n   both parties SHOULD be used by the authentication\
    \ mechanism to\n   provide shared proof of participation in the exchange.\n  \
    \ In the second message (2), the responder indicates the protection\n   suite\
    \ it has accepted with the Security Association, Proposal, and\n   Transform payloads.\
    \  Again, random information which is used to\n   guarantee liveness and protect\
    \ against replay attacks is also\n   transmitted.  Random information provided\
    \ by both parties SHOULD be\n   used by the authentication mechanism to provide\
    \ shared proof of\n   participation in the exchange.  Additionally, the responder\
    \ transmits\n   identification information.  All of this information is transmitted\n\
    \   under the protection of the agreed upon authentication function.\n   Local\
    \ security policy dictates the action of the responder if no\n   proposed protection\
    \ suite is accepted.  One possible action is the\n   transmission of a Notify\
    \ payload as part of an Informational\n   Exchange.\n   In the third message (3),\
    \ the initiator transmits identification\n   information.  This information is\
    \ transmitted under the protection of\n   the agreed upon authentication function.\
    \  Local security policy\n   dictates the action if an error occurs during these\
    \ messages.  One\n   possible action is the transmission of a Notify payload as\
    \ part of an\n   Informational Exchange.\n"
- title: 4.7 Aggressive Exchange
  contents:
  - "4.7 Aggressive Exchange\n   The Aggressive Exchange is designed to allow the\
    \ Security\n   Association, Key Exchange and Authentication related payloads to\
    \ be\n   transmitted together.  Combining the Security Association, Key\n   Exchange,\
    \ and Authentication-related information into one message\n   reduces the number\
    \ of round-trips at the expense of not providing\n   identity protection.  Identity\
    \ protection is not provided because\n   identities are exchanged before a common\
    \ shared secret has been\n   established and, therefore, encryption of the identities\
    \ is not\n   possible.  Additionally, the Aggressive Exchange is attempting to\n\
    \   establish all security relevant information in a single exchange.\n   The\
    \ following diagram shows the messages with possible payloads sent\n   in each\
    \ message and notes for an example of the Aggressive Exchange.\n             \
    \           AGGRESSIVE EXCHANGE\n #     Initiator   Direction      Responder \
    \     NOTE\n"
- title: (1)  HDR; SA; KE;      =>                        Begin ISAKMP-SA or
  contents:
  - "(1)  HDR; SA; KE;      =>                        Begin ISAKMP-SA or\n       \
    \                                          Proxy negotiation\n     NONCE; IDii\
    \                                 and Key Exchange\n"
- title: (2)                    <=     HDR; SA; KE;
  contents:
  - "(2)                    <=     HDR; SA; KE;\n                              NONCE;\
    \ IDir; AUTH\n                                                 Initiator Identity\n\
    \                                                 Verified by Responder\n    \
    \                                             Key Generated\n                \
    \                                 Basic SA agreed upon\n"
- title: (3)  HDR*; AUTH        =>
  contents:
  - "(3)  HDR*; AUTH        =>\n                                                 Responder\
    \ Identity\n                                                 Verified by Initiator\n\
    \                                                 SA established\n   In the first\
    \ message (1), the initiator generates a proposal it\n   considers adequate to\
    \ protect traffic for the given situation.  The\n   Security Association, Proposal,\
    \ and Transform payloads are included\n   in the Security Association payload\
    \ (for notation purposes).  There\n   can be only one Proposal and one Transform\
    \ offered (i.e.  no choices)\n   in order for the aggressive exchange to work.\
    \  Keying material used\n   to arrive at a common shared secret and random information\
    \ which is\n   used to guarantee liveness and protect against replay attacks are\n\
    \   also transmitted.  Random information provided by both parties SHOULD\n  \
    \ be used by the authentication mechanism to provide shared proof of\n   participation\
    \ in the exchange.  Additionally, the initiator transmits\n   identification information.\n\
    \   In the second message (2), the responder indicates the protection\n   suite\
    \ it has accepted with the Security Association, Proposal, and\n   Transform payloads.\
    \  Keying material used to arrive at a common\n   shared secret and random information\
    \ which is used to guarantee\n   liveness and protect against replay attacks is\
    \ also transmitted.\n   Random information provided by both parties SHOULD be\
    \ used by the\n   authentication mechanism to provide shared proof of participation\
    \ in\n   the exchange.  Additionally, the responder transmits identification\n\
    \   information.  All of this information is transmitted under the\n   protection\
    \ of the agreed upon authentication function.  Local\n   security policy dictates\
    \ the action of the responder if no proposed\n   protection suite is accepted.\
    \  One possible action is the\n   transmission of a Notify payload as part of\
    \ an Informational\n   Exchange.\n   In the third (3) message, the initiator transmits\
    \ the results of the\n   agreed upon authentication function.  This information\
    \ is transmitted\n   under the protection of the common shared secret.  Local\
    \ security\n   policy dictates the action if an error occurs during these messages.\n\
    \   One possible action is the transmission of a Notify payload as part\n   of\
    \ an Informational Exchange.\n"
- title: 4.8 Informational Exchange
  contents:
  - "4.8 Informational Exchange\n   The Informational Exchange is designed as a one-way\
    \ transmittal of\n   information that can be used for security association management.\n\
    \   The following diagram shows the messages with possible payloads sent\n   in\
    \ each message and notes for an example of the Informational\n   Exchange.\n \
    \                     INFORMATIONAL EXCHANGE\n    #   Initiator  Direction Responder\
    \  NOTE\n   (1)  HDR*; N/D     =>                Error Notification or Deletion\n\
    \   In the first message (1), the initiator or responder transmits an\n   ISAKMP\
    \ Notify or Delete payload.\n   If the Informational Exchange occurs prior to\
    \ the exchange of keying\n   meterial during an ISAKMP Phase 1 negotiation, there\
    \ will be no\n   protection provided for the Informational Exchange.  Once keying\n\
    \   material has been exchanged or an ISAKMP SA has been established, the\n  \
    \ Informational Exchange MUST be transmitted under the protection\n   provided\
    \ by the keying material or the ISAKMP SA.\n   All exchanges are similar in that\
    \ with the beginning of any exchange,\n   cryptographic synchronization MUST occur.\
    \  The Informational Exchange\n   is an exchange and not an ISAKMP message.  Thus,\
    \ the generation of an\n   Message ID (MID) for an Informational Exchange SHOULD\
    \ be independent\n   of IVs of other on-going communication.  This will ensure\n\
    \   cryptographic synchronization is maintained for existing\n   communications\
    \ and the Informational Exchange will be processed\n   correctly.  The only exception\
    \ to this is when the Commit Bit of the\n   ISAKMP Header is set.  When the Commit\
    \ Bit is set, the Message ID\n   field of the Informational Exchange MUST contain\
    \ the Message ID of\n   the original ISAKMP Phase 2 SA negotiation, rather than\
    \ a new Message\n   ID (MID). This is done to ensure that the Informational Exchange\
    \ with\n   the CONNECTED Notify Message can be associated with the correct Phase\n\
    \   2 SA. For a description of the Commit Bit, see section 3.1.\n"
- title: 5 ISAKMP Payload Processing
  contents:
  - "5 ISAKMP Payload Processing\n   Section 3 describes the ISAKMP payloads.  These\
    \ payloads are used in\n   the exchanges described in section 4 and can be used\
    \ in exchanges\n   defined for a specific DOI. This section describes the processing\
    \ for\n   each of the payloads.  This section suggests the logging of events to\n\
    \   a system audit file.  This action is controlled by a system security\n   policy\
    \ and is, therefore, only a suggested action.\n"
- title: 5.1 General Message Processing
  contents:
  - "5.1 General Message Processing\n   Every ISAKMP message has basic processing\
    \ applied to insure protocol\n   reliability, and to minimize threats, such as\
    \ denial of service and\n   replay attacks.  All processing SHOULD include packet\
    \ length checks\n   to insure the packet received is at least as long as the length\
    \ given\n   in the ISAKMP Header.  If the ISAKMP message length and the value\
    \ in\n   the Payload Length field of the ISAKMP Header are not the same, then\n\
    \   the ISAKMP message MUST be rejected.  The receiving entity (initiator\n  \
    \ or responder) MUST do the following:\n   1.  The event, UNEQUAL PAYLOAD LENGTHS,\
    \ MAY be logged in the\n       appropriate system audit file.\n   2.  An Informational\
    \ Exchange with a Notification payload containing\n       the UNEQUAL-PAYLOAD-LENGTHS\
    \ message type MAY be sent to the\n       transmitting entity.  This action is\
    \ dictated by a system\n       security policy.\n   When transmitting an ISAKMP\
    \ message, the transmitting entity\n   (initiator or responder) MUST do the following:\n\
    \   1.  Set a timer and initialize a retry counter.\n       NOTE: Implementations\
    \ MUST NOT use a fixed timer.  Instead,\n       transmission timer values should\
    \ be adjusted dynamically based on\n       measured round trip times.  In addition,\
    \ successive\n       retransmissions of the same packet should be separated by\n\
    \       increasingly longer time intervals (e.g., exponential backoff).\n   2.\
    \  If the timer expires, the ISAKMP message is resent and the retry\n       counter\
    \ is decremented.\n   3.  If the retry counter reaches zero (0), the event, RETRY\
    \ LIMIT\n       REACHED, MAY be logged in the appropriate system audit file.\n\
    \   4.  The ISAKMP protocol machine clears all states and returns to\n       IDLE.\n"
- title: 5.2 ISAKMP Header Processing
  contents:
  - "5.2 ISAKMP Header Processing\n   When creating an ISAKMP message, the transmitting\
    \ entity (initiator\n   or responder) MUST do the following:\n   1.  Create the\
    \ respective cookie.  See section 2.5.3 for details.\n   2.  Determine the relevant\
    \ security characteristics of the session\n       (i.e. DOI and situation).\n\
    \   3.  Construct an ISAKMP Header with fields as described in section\n     \
    \  3.1.\n   4.  Construct other ISAKMP payloads, depending on the exchange type.\n\
    \   5.  Transmit the message to the destination host as described in\n       section5.1.\n\
    \   When an ISAKMP message is received, the receiving entity (initiator\n   or\
    \ responder) MUST do the following:\n   1.  Verify the Initiator and Responder\
    \ \"cookies\".  If the cookie\n       validation fails, the message is discarded\
    \ and the following\n       actions are taken:\n       (a)  The event, INVALID\
    \ COOKIE, MAY be logged in the\n            appropriate system audit file.\n \
    \      (b)  An Informational Exchange with a Notification payload\n          \
    \  containing the INVALID-COOKIE message type MAY be sent to\n            the\
    \ transmitting entity.  This action is dictated by a\n            system security\
    \ policy.\n   2.  Check the Next Payload field to confirm it is valid.  If the\
    \ Next\n       Payload field validation fails, the message is discarded and the\n\
    \       following actions are taken:\n       (a)  The event, INVALID NEXT PAYLOAD,\
    \ MAY be logged in the\n            appropriate system audit file.\n       (b)\
    \  An Informational Exchange with a Notification payload\n            containing\
    \ the INVALID-PAYLOAD-TYPE message type MAY be sent\n            to the transmitting\
    \ entity.  This action is dictated by a\n            system security policy.\n\
    \   3.  Check the Major and Minor Version fields to confirm they are\n       correct\
    \ (see section 3.1).  If the Version field validation\n       fails, the message\
    \ is discarded and the following actions are\n       taken:\n       (a)  The event,\
    \ INVALID ISAKMP VERSION, MAY be logged in the\n            appropriate system\
    \ audit file.\n       (b)  An Informational Exchange with a Notification payload\n\
    \            containing the INVALID-MAJOR-VERSION or INVALID-MINOR-\n        \
    \    VERSION message type MAY be sent to the transmitting entity.\n          \
    \  This action is dictated by a system security policy.\n   4.  Check the Exchange\
    \ Type field to confirm it is valid.  If the\n       Exchange Type field validation\
    \ fails, the message is discarded\n       and the following actions are taken:\n\
    \       (a)  The event, INVALID EXCHANGE TYPE, MAY be logged in the\n        \
    \    appropriate system audit file.\n       (b)  An Informational Exchange with\
    \ a Notification payload\n            containing the INVALID-EXCHANGE-TYPE message\
    \ type MAY be\n            sent to the transmitting entity.  This action is dictated\
    \ by\n            a system security policy.\n   5.  Check the Flags field to ensure\
    \ it contains correct values.  If\n       the Flags field validation fails, the\
    \ message is discarded and\n       the following actions are taken:\n       (a)\
    \  The event, INVALID FLAGS, MAY be logged in the appropriate\n            systemaudit\
    \ file.\n       (b)  An Informational Exchange with a Notification payload\n \
    \           containing the INVALID-FLAGS message type MAY be sent to the\n   \
    \         transmitting entity.  This action is dictated by a system\n        \
    \    security policy.\n   6.  Check the Message ID field to ensure it contains\
    \ correct values.\n       If the Message ID validation fails, the message is discarded\
    \ and\n       the following actions are taken:\n       (a)  The event, INVALID\
    \ MESSAGE ID, MAY be logged in the\n            appropriate system audit file.\n\
    \       (b)  An Informational Exchange with a Notification payload\n         \
    \   containing the INVALID-MESSAGE-ID message type MAY be sent\n            to\
    \ the transmitting entity.  This action is dictated by a\n            system security\
    \ policy.\n   7.  Processing of the ISAKMP message continues using the value in\
    \ the\n       Next Payload field.\n"
- title: 5.3 Generic Payload Header Processing
  contents:
  - "5.3 Generic Payload Header Processing\n   When creating any of the ISAKMP Payloads\
    \ described in sections 3.4\n   through 3.15 a Generic Payload Header is placed\
    \ at the beginning of\n   these payloads.  When creating the Generic Payload Header,\
    \ the\n   transmitting entity (initiator or responder) MUST do the following:\n\
    \   1.  Place the value of the Next Payload in the Next Payload field.\n     \
    \  These values are described in section 3.1.\n   2.  Place the value zero (0)\
    \ in the RESERVED field.\n   3.  Place the length (in octets) of the payload in\
    \ the Payload Length\n       field.\n   4.  Construct the payloads as defined\
    \ in the remainder of this\n       section.\n   When any of the ISAKMP Payloads\
    \ are received, the receiving entity\n   (initiator or responder) MUST do the\
    \ following:\n   1.  Check the Next Payload field to confirm it is valid.  If\
    \ the Next\n       Payload field validation fails, the message is discarded and\
    \ the\n       following actions are taken:\n       (a)  The event, INVALID NEXT\
    \ PAYLOAD, MAY be logged in the\n            appropriate system audit file.\n\
    \       (b)  An Informational Exchange with a Notification payload\n         \
    \   containing the INVALID-PAYLOAD-TYPE message type MAY be sent\n           \
    \ to the transmitting entity.  This action is dictated by a\n            system\
    \ security policy.\n   2.  Verify the RESERVED field contains the value zero.\
    \  If the value\n       in the RESERVED field is not zero, the message is discarded\
    \ and\n       the following actions are taken:\n       (a)  The event, INVALID\
    \ RESERVED FIELD, MAY be logged in the\n            appropriate system audit file.\n\
    \       (b)  An Informational Exchange with a Notification payload\n         \
    \   containing the BAD-PROPOSAL-SYNTAX or PAYLOAD-MALFORMED\n            message\
    \ type MAY be sent to the transmitting entity.  This\n            action is dictated\
    \ by a system security policy.\n   3.  Process the remaining payloads as defined\
    \ by the Next Payload\n       field.\n"
- title: 5.4 Security Association Payload Processing
  contents:
  - "5.4 Security Association Payload Processing\n   When creating a Security Association\
    \ Payload, the transmitting entity\n   (initiator or responder) MUST do the following:\n\
    \   1.  Determine the Domain of Interpretation for which this negotiation\n  \
    \     is being performed.\n   2.  Determine the situation within the determined\
    \ DOI for which this\n       negotiation is being performed.\n   3.  Determine\
    \ the proposal(s) and transform(s) within the situation.\n       These are described,\
    \ respectively, in sections 3.5 and 3.6.\n   4.  Construct a Security Association\
    \ payload.\n   5.  Transmit the message to the receiving entity as described in\n\
    \       section 5.1.\n   When a Security Association payload is received, the\
    \ receiving entity\n   (initiator or responder) MUST do the following:\n   1.\
    \  Determine if the Domain of Interpretation (DOI) is supported.  If\n       the\
    \ DOI determination fails, the message is discarded and the\n       following\
    \ actions are taken:\n       (a)  The event, INVALID DOI, MAY be logged in the\
    \ appropriate\n            system audit file.\n       (b)  An Informational Exchange\
    \ with a Notification payload\n            containing the DOI-NOT-SUPPORTED message\
    \ type MAY be sent to\n            the transmitting entity.  This action is dictated\
    \ by a\n            system security policy.\n   2.  Determine if the given situation\
    \ can be protected.  If the\n       Situation determination fails, the message\
    \ is discarded and the\n       following actions are taken:\n       (a)  The event,\
    \ INVALID SITUATION, MAY be logged in the\n            appropriate system audit\
    \ file.\n       (b)  An Informational Exchange with a Notification payload\n \
    \           containing the SITUATION-NOT-SUPPORTED message type MAY be\n     \
    \       sent to the transmitting entity.  This action is dictated by\n       \
    \     a system security policy.\n   3.  Process the remaining payloads (i.e. \
    \ Proposal, Transform) of the\n       Security Association Payload.  If the Security\
    \ Association\n       Proposal (as described in sections 5.5 and 5.6) is not accepted,\n\
    \       then the following actions are taken:\n       (a)  The event, INVALID\
    \ PROPOSAL, MAY be logged in the\n            appropriate system audit file.\n\
    \       (b)  An Informational Exchange with a Notification payload\n         \
    \   containing the NO-PROPOSAL-CHOSEN message type MAY be sent\n            to\
    \ the transmitting entity.  This action is dictated by a\n            system security\
    \ policy.\n"
- title: 5.5 Proposal Payload Processing
  contents:
  - "5.5 Proposal Payload Processing\n   When creating a Proposal Payload, the transmitting\
    \ entity (initiator\n   or responder) MUST do the following:\n   1.  Determine\
    \ the Protocol for this proposal.\n   2.  Determine the number of proposals to\
    \ be offered for this protocol\n       and the number of transforms for each proposal.\
    \  Transforms are\n       described in section 3.6.\n   3.  Generate a unique\
    \ pseudo-random SPI.\n   4.  Construct a Proposal payload.\n   When a Proposal\
    \ payload is received, the receiving entity (initiator\n   or responder) MUST\
    \ do the following:\n   1.  Determine if the Protocol is supported.  If the Protocol-ID\
    \ field\n       is invalid, the payload is discarded and the following actions\n\
    \       are taken:\n       (a)  The event, INVALID PROTOCOL, MAY be logged in\
    \ the\n            appropriate system audit file.\n       (b)  An Informational\
    \ Exchange with a Notification payload\n            containing the INVALID-PROTOCOL-ID\
    \ message type MAY be sent\n            to the transmitting entity.  This action\
    \ is dictated by a\n            system security policy.\n   2.  Determine if the\
    \ SPI is valid.  If the SPI is invalid, the\n       payload is discarded and the\
    \ following actions are taken:\n       (a)  The event, INVALID SPI, MAY be logged\
    \ in the appropriate\n            system audit file.\n       (b)  An Informational\
    \ Exchange with a Notification payload\n            containing the INVALID-SPI\
    \ message type MAY be sent to the\n            transmitting entity.  This action\
    \ is dictated by a system\n            security policy.\n   3.  Ensure the Proposals\
    \ are presented according to the details given\n       in section 3.5 and 4.2.\
    \  If the proposals are not formed\n       correctly, the following actions are\
    \ taken:\n       (a)  Possible events, BAD PROPOSAL SYNTAX, INVALID PROPOSAL,\
    \ are\n            logged in the appropriate system audit file.\n       (b)  An\
    \ Informational Exchange with a Notification payload\n            containing the\
    \ BAD-PROPOSAL-SYNTAX or PAYLOAD-MALFORMED\n            message type MAY be sent\
    \ to the transmitting entity.  This\n            action is dictated by a system\
    \ security policy.\n   4.  Process the Proposal and Transform payloads as defined\
    \ by the\n       Next Payload field.  Examples of processing these payloads are\n\
    \       given in section 4.2.1.\n"
- title: 5.6 Transform Payload Processing
  contents:
  - "5.6 Transform Payload Processing\n   When creating a Transform Payload, the transmitting\
    \ entity (initiator\n   or responder) MUST do the following:\n   1.  Determine\
    \ the Transform # for this transform.\n   2.  Determine the number of transforms\
    \ to be offered for this\n       proposal.  Transforms are described in sections\
    \ 3.6.\n   3.  Construct a Transform payload.\n   When a Transform payload is\
    \ received, the receiving entity (initiator\n   or responder) MUST do the following:\n\
    \   1.  Determine if the Transform is supported.  If the Transform-ID\n      \
    \ field contains an unknown or unsupported value, then that\n       Transform\
    \ payload MUST be ignored and MUST NOT cause the\n       generation of an INVALID\
    \ TRANSFORM event.  If the Transform-ID\n       field is invalid, the payload\
    \ is discarded and the following\n       actions are taken:\n       (a)  The event,\
    \ INVALID TRANSFORM, MAY be logged in the\n            appropriate system audit\
    \ file.\n       (b)  An Informational Exchange with a Notification payload\n \
    \           containing the INVALID-TRANSFORM-ID message type MAY be sent\n   \
    \         to the transmitting entity.  This action is dictated by a\n        \
    \    system security policy.\n   2.  Ensure the Transforms are presented according\
    \ to the details\n       given in section 3.6 and 4.2.  If the transforms are\
    \ not formed\n       correctly, the following actions are taken:\n       (a) \
    \ Possible events, BAD PROPOSAL SYNTAX, INVALID TRANSFORM,\n            INVALID\
    \ ATTRIBUTES, are logged in the appropriate system\n            audit file.\n\
    \       (b)  An Informational Exchange with a Notification payload\n         \
    \   containing the BAD-PROPOSAL-SYNTAX, PAYLOAD-MALFORMED or\n            ATTRIBUTES-NOT-SUPPORTED\
    \ message type MAY be sent to the\n            transmitting entity.  This action\
    \ is dictated by a system\n            security policy.\n   3.  Process the subsequent\
    \ Transform and Proposal payloads as defined\n       by the Next Payload field.\
    \  Examples of processing these payloads\n       are given in section 4.2.1.\n"
- title: 5.7 Key Exchange Payload Processing
  contents:
  - "5.7 Key Exchange Payload Processing\n   When creating a Key Exchange Payload,\
    \ the transmitting entity\n   (initiator or responder) MUST do the following:\n\
    \   1.  Determine the Key Exchange to be used as defined by the DOI.\n   2.  Determine\
    \ the usage of the Key Exchange Data field as defined by\n       the DOI.\n  \
    \ 3.  Construct a Key Exchange payload.\n   4.  Transmit the message to the receiving\
    \ entity as described in\n       section 5.1.\n   When a Key Exchange payload\
    \ is received, the receiving entity\n   (initiator or responder) MUST do the following:\n\
    \   1.  Determine if the Key Exchange is supported.  If the Key Exchange\n   \
    \    determination fails, the message is discarded and the following\n       actions\
    \ are taken:\n       (a)  The event, INVALID KEY INFORMATION, MAY be logged in\
    \ the\n            appropriate system audit file.\n       (b)  An Informational\
    \ Exchange with a Notification payload\n            containing the INVALID-KEY-INFORMATION\
    \ message type MAY be\n            sent to the transmitting entity.  This action\
    \ is dictated by\n            a system security policy.\n"
- title: 5.8 Identification Payload Processing
  contents:
  - "5.8 Identification Payload Processing\n   When creating an Identification Payload,\
    \ the transmitting entity\n   (initiator or responder) MUST do the following:\n\
    \   1.  Determine the Identification information to be used as defined by\n  \
    \     the DOI (and possibly the situation).\n   2.  Determine the usage of the\
    \ Identification Data field as defined\n       by the DOI.\n   3.  Construct an\
    \ Identification payload.\n   4.  Transmit the message to the receiving entity\
    \ as described in\n       section 5.1.\n   When an Identification payload is received,\
    \ the receiving entity\n   (initiator or responder) MUST do the following:\n \
    \  1.  Determine if the Identification Type is supported.  This may be\n     \
    \  based on the DOI and Situation.  If the Identification\n       determination\
    \ fails, the message is discarded and the following\n       actions are taken:\n\
    \       (a)  The event, INVALID ID INFORMATION, MAY be logged in the\n       \
    \     appropriate system audit file.\n       (b)  An Informational Exchange with\
    \ a Notification payload\n            containing the INVALID-ID-INFORMATION message\
    \ type MAY be\n            sent to the transmitting entity.  This action is dictated\
    \ by\n            a system security policy.\n"
- title: 5.9 Certificate Payload Processing
  contents:
  - "5.9 Certificate Payload Processing\n   When creating a Certificate Payload, the\
    \ transmitting entity\n   (initiator or responder) MUST do the following:\n  \
    \ 1.  Determine the Certificate Encoding to be used.  This may be\n       specified\
    \ by the DOI.\n   2.  Ensure the existence of a certificate formatted as defined\
    \ by the\n       Certificate Encoding.\n   3.  Construct a Certificate payload.\n\
    \   4.  Transmit the message to the receiving entity as described in\n       section\
    \ 5.1.\n   When a Certificate payload is received, the receiving entity\n   (initiator\
    \ or responder) MUST do the following:\n   1.  Determine if the Certificate Encoding\
    \ is supported.  If the\n       Certificate Encoding is not supported, the payload\
    \ is discarded\n       and the following actions are taken:\n       (a)  The event,\
    \ INVALID CERTIFICATE TYPE, MAY be logged in the\n            appropriate system\
    \ audit file.\n       (b)  An Informational Exchange with a Notification payload\n\
    \            containing the INVALID-CERT-ENCODING message type MAY be\n      \
    \      sent to the transmitting entity.  This action is dictated by\n        \
    \    a system security policy.\n   2.  Process the Certificate Data field.  If\
    \ the Certificate Data is\n       invalid or improperly formatted, the payload\
    \ is discarded and the\n       following actions are taken:\n       (a)  The event,\
    \ INVALID CERTIFICATE, MAY be logged in the\n            appropriate system audit\
    \ file.\n       (b)  An Informational Exchange with a Notification payload\n \
    \           containing the INVALID-CERTIFICATE message type MAY be sent\n    \
    \        to the transmitting entity.  This action is dictated by a\n         \
    \   system security policy.\n"
- title: 5.10 Certificate Request Payload Processing
  contents:
  - "5.10 Certificate Request Payload Processing\n   When creating a Certificate Request\
    \ Payload, the transmitting entity\n   (initiator or responder) MUST do the following:\n\
    \   1.  Determine the type of Certificate Encoding to be requested.  This\n  \
    \     may be specified by the DOI.\n   2.  Determine the name of an acceptable\
    \ Certificate Authority which\n       is to be requested (if applicable).\n  \
    \ 3.  Construct a Certificate Request payload.\n   4.  Transmit the message to\
    \ the receiving entity as described in\n       section 5.1.\n   When a Certificate\
    \ Request payload is received, the receiving entity\n   (initiator or responder)\
    \ MUST do the following:\n   1.  Determine if the Certificate Encoding is supported.\
    \  If the\n       Certificate Encoding is invalid, the payload is discarded and\
    \ the\n       following actions are taken:\n       (a)  The event, INVALID CERTIFICATE\
    \ TYPE, MAY be logged in\n            the appropriate system audit file.\n   \
    \    (b)  An Informational Exchange with a Notification payload\n            containing\
    \ the INVALID-CERT-ENCODING message type MAY be\n            sent to the transmitting\
    \ entity.  This action is dictated by\n            a system security policy.\n\
    \       If the Certificate Encoding is not supported, the payload is\n       discarded\
    \ and the following actions are taken:\n       (a)  The event, CERTIFICATE TYPE\
    \ UNSUPPORTED, MAY be logged in\n            the appropriate system audit file.\n\
    \       (b)  An Informational Exchange with a Notification payload\n         \
    \   containing the CERT-TYPE-UNSUPPORTED message type MAY be\n            sent\
    \ to the transmitting entity.  This action is dictated by\n            a system\
    \ security policy.\n   2.  Determine if the Certificate Authority is supported\
    \ for the\n       specified Certificate Encoding.  If the Certificate Authority\
    \ is\n       invalid or improperly formatted, the payload is discarded and the\n\
    \       following actions are taken:\n       (a)  The event, INVALID CERTIFICATE\
    \ AUTHORITY, MAY be logged in\n            the appropriate system audit file.\n\
    \       (b)  An Informational Exchange with a Notification payload\n         \
    \   containing the INVALID-CERT-AUTHORITY message type MAY be\n            sent\
    \ to the transmitting entity.  This action is dictated by\n            a system\
    \ security policy.\n   3.  Process the Certificate Request.  If a requested Certificate\
    \ Type\n       with the specified Certificate Authority is not available, then\n\
    \       the payload is discarded and the following actions are taken:\n      \
    \ (a)  The event, CERTIFICATE-UNAVAILABLE, MAY be logged in the\n            appropriate\
    \ system audit file.\n       (b)  An Informational Exchange with a Notification\
    \ payload\n            containing the CERTIFICATE-UNAVAILABLE message type MAY\
    \ be\n            sent to the transmitting entity.  This action is dictated by\n\
    \            a system security policy.\n"
- title: 5.11 Hash Payload Processing
  contents:
  - "5.11 Hash Payload Processing\n   When creating a Hash Payload, the transmitting\
    \ entity (initiator or\n   responder) MUST do the following:\n   1.  Determine\
    \ the Hash function to be used as defined by the SA\n       negotiation.\n   2.\
    \  Determine the usage of the Hash Data field as defined by the DOI.\n   3.  Construct\
    \ a Hash payload.\n   4.  Transmit the message to the receiving entity as described\
    \ in\n       section 5.1.\n   When a Hash payload is received, the receiving entity\
    \ (initiator or\n   responder) MUST do the following:\n   1.  Determine if the\
    \ Hash is supported.  If the Hash determination\n       fails, the message is\
    \ discarded and the following actions are\n       taken:\n       (a)  The event,\
    \ INVALID HASH INFORMATION, MAY be logged in the\n            appropriate system\
    \ audit file.\n       (b)  An Informational Exchange with a Notification payload\n\
    \            containing the INVALID-HASH-INFORMATION message type MAY be\n   \
    \         sent to the transmitting entity.  This action is dictated by\n     \
    \       a system security policy.\n   2.  Perform the Hash function as outlined\
    \ in the DOI and/or Key\n       Exchange protocol documents.  If the Hash function\
    \ fails, the\n       message is discarded and the following actions are taken:\n\
    \       (a)  The event, INVALID HASH VALUE, MAY be logged in the\n           \
    \ appropriate system audit file.\n       (b)  An Informational Exchange with a\
    \ Notification payload\n            containing the AUTHENTICATION-FAILED message\
    \ type MAY be\n            sent to the transmitting entity.  This action is dictated\
    \ by\n            a system security policy.\n"
- title: 5.12 Signature Payload Processing
  contents:
  - "5.12 Signature Payload Processing\n   When creating a Signature Payload, the\
    \ transmitting entity (initiator\n   or responder) MUST do the following:\n  \
    \ 1.  Determine the Signature function to be used as defined by the SA\n     \
    \  negotiation.\n   2.  Determine the usage of the Signature Data field as defined\
    \ by the\n       DOI.\n   3.  Construct a Signature payload.\n   4.  Transmit\
    \ the message to the receiving entity as described in\n       section 5.1.\n \
    \  When a Signature payload is received, the receiving entity (initiator\n   or\
    \ responder) MUST do the following:\n   1.  Determine if the Signature is supported.\
    \  If the Signature\n       determination fails, the message is discarded and\
    \ the following\n       actions are taken:\n       (a)  The event, INVALID SIGNATURE\
    \ INFORMATION, MAY be logged in\n            the appropriate system audit file.\n\
    \       (b)  An Informational Exchange with a Notification payload\n         \
    \   containing the INVALID-SIGNATURE message type MAY be sent to\n           \
    \ the transmitting entity.  This action is dictated by a\n            system security\
    \ policy.\n   2.  Perform the Signature function as outlined in the DOI and/or\
    \ Key\n       Exchange protocol documents.  If the Signature function fails,\n\
    \       the message is discarded and the following actions are taken:\n      \
    \ (a)  The event, INVALID SIGNATURE VALUE, MAY be logged in the\n            appropriate\
    \ system audit file.\n       (b)  An Informational Exchange with a Notification\
    \ payload\n            containing the AUTHENTICATION-FAILED message type MAY be\n\
    \            sent to the transmitting entity.  This action is dictated by\n  \
    \          a system security policy.\n"
- title: 5.13 Nonce Payload Processing
  contents:
  - "5.13 Nonce Payload Processing\n   When creating a Nonce Payload, the transmitting\
    \ entity (initiator or\n   responder) MUST do the following:\n   1.  Create a\
    \ unique random value to be used as a nonce.\n   2.  Construct a Nonce payload.\n\
    \   3.  Transmit the message to the receiving entity as described in\n       section\
    \ 5.1.\n   When a Nonce payload is received, the receiving entity (initiator or\n\
    \   responder) MUST do the following:\n   1.  There are no specific procedures\
    \ for handling Nonce payloads.\n       The procedures are defined by the exchange\
    \ types (and possibly\n       the DOI and Key Exchange descriptions).\n"
- title: 5.14 Notification Payload Processing
  contents:
  - "5.14 Notification Payload Processing\n   During communications it is possible\
    \ that errors may occur.  The\n   Informational Exchange with a Notify Payload\
    \ provides a controlled\n   method of informing a peer entity that errors have\
    \ occurred during\n   protocol processing.  It is RECOMMENDED that Notify Payloads\
    \ be sent\n   in a separate Informational Exchange rather than appending a Notify\n\
    \   Payload to an existing exchange.\n   When creating a Notification Payload,\
    \ the transmitting entity\n   (initiator or responder) MUST do the following:\n\
    \   1.  Determine the DOI for this Notification.\n   2.  Determine the Protocol-ID\
    \ for this Notification.\n   3.  Determine the SPI size based on the Protocol-ID\
    \ field.  This\n       field is necessary because different security protocols\
    \ have\n       different SPI sizes.  For example, ISAKMP combines the Initiator\n\
    \       and Responder cookie pair (16 octets) as a SPI, while ESP and AH\n   \
    \    have 4 octet SPIs.\n   4.  Determine the Notify Message Type based on the\
    \ error or status\n       message desired.\n   5.  Determine the SPI which is\
    \ associated with this notification.\n   6.  Determine if additional Notification\
    \ Data is to be included.\n       This is additional information specified by\
    \ the DOI.\n   7.  Construct a Notification payload.\n   8.  Transmit the message\
    \ to the receiving entity as described in\n       section 5.1.\n   Because the\
    \ Informational Exchange with a Notification payload is a\n   unidirectional message\
    \ a retransmission will not be performed.  The\n   local security policy will\
    \ dictate the procedures for continuing.\n   However, we RECOMMEND that a NOTIFICATION\
    \ PAYLOAD ERROR event be\n   logged in the appropriate system audit file by the\
    \ receiving entity.\n   If the Informational Exchange occurs prior to the exchange\
    \ of keying\n   material during an ISAKMP Phase 1 negotiation there will be no\n\
    \   protection provided for the Informational Exchange.  Once the keying\n   material\
    \ has been exchanged or the ISAKMP SA has been established,\n   the Informational\
    \ Exchange MUST be transmitted under the protection\n   provided by the keying\
    \ material or the ISAKMP SA.\n   When a Notification payload is received, the\
    \ receiving entity\n   (initiator or responder) MUST do the following:\n   1.\
    \  Determine if the Informational Exchange has any protection\n       applied\
    \ to it by checking the Encryption Bit and the\n       Authentication Only Bit\
    \ in the ISAKMP Header.  If the Encryption\n       Bit is set, i.e.  the Informational\
    \ Exchange is encrypted, then\n       the message MUST be decrypted using the\
    \ (in-progress or\n       completed) ISAKMP SA. Once the decryption is complete\
    \ the\n       processing can continue as described below.  If the\n       Authentication\
    \ Only Bit is set, then the message MUST be\n       authenticated using the (in-progress\
    \ or completed) ISAKMP SA.\n       Once the authentication is completed, the processing\
    \ can continue\n       as described below.  If the Informational Exchange is not\n\
    \       encrypted or authentication, the payload processing can continue\n   \
    \    as described below.\n   2.  Determine if the Domain of Interpretation (DOI)\
    \ is supported.  If\n       the DOI determination fails, the payload is discarded\
    \ and the\n       following action is taken:\n       (a)  The event, INVALID DOI,\
    \ MAY be logged in the appropriate\n            system audit file.\n   3.  Determine\
    \ if the Protocol-Id is supported.  If the Protocol-Id\n       determination fails,\
    \ the payload is discarded and the following\n       action is taken:\n      \
    \ (a)  The event, INVALID PROTOCOL-ID, MAY be logged in the\n            appropriate\
    \ system audit file.\n   4.  Determine if the SPI is valid.  If the SPI is invalid,\
    \ the\n       payload is discarded and the following action is taken:\n      \
    \ (a)  The event, INVALID SPI, MAY be logged in the appropriate\n            system\
    \ audit file.\n   5.  Determine if the Notify Message Type is valid.  If the Notify\n\
    \       Message Type is invalid, the payload is discarded and the\n       following\
    \ action is taken:\n       (a)  The event, INVALID MESSAGE TYPE, MAY be logged\
    \ in the\n            appropriate system audit file.\n   6.  Process the Notification\
    \ payload, including additional\n       Notification Data, and take appropriate\
    \ action, according to\n       local security policy.\n"
- title: 5.15 Delete Payload Processing
  contents:
  - "5.15 Delete Payload Processing\n   During communications it is possible that\
    \ hosts may be compromised or\n   that information may be intercepted during transmission.\
    \  Determining\n   whether this has occurred is not an easy task and is outside\
    \ the\n   scope of this memo.  However, if it is discovered that transmissions\n\
    \   are being compromised, then it is necessary to establish a new SA and\n  \
    \ delete the current SA.\n   The Informational Exchange with a Delete Payload\
    \ provides a\n   controlled method of informing a peer entity that the transmitting\n\
    \   entity has deleted the SA(s).  Deletion of Security Associations MUST\n  \
    \ always be performed under the protection of an ISAKMP SA. The\n   receiving\
    \ entity SHOULD clean up its local SA database.  However,\n   upon receipt of\
    \ a Delete message the SAs listed in the Security\n   Parameter Index (SPI) field\
    \ of the Delete payload cannot be used with\n   the transmitting entity.  The\
    \ SA Establishment procedure must be\n   invoked to re-establish secure communications.\n\
    \   When creating a Delete Payload, the transmitting entity (initiator or\n  \
    \ responder) MUST do the following:\n   1.  Determine the DOI for this Deletion.\n\
    \   2.  Determine the Protocol-ID for this Deletion.\n   3.  Determine the SPI\
    \ size based on the Protocol-ID field.  This\n       field is necessary because\
    \ different security protocols have\n       different SPI sizes.  For example,\
    \ ISAKMP combines the Initiator\n       and Responder cookie pair (16 octets)\
    \ as a SPI, while ESP and AH\n       have 4 octet SPIs.\n   4.  Determine the\
    \ # of SPIs to be deleted for this protocol.\n   5.  Determine the SPI(s) which\
    \ is (are) associated with this\n       deletion.\n   6.  Construct a Delete payload.\n\
    \   7.  Transmit the message to the receiving entity as described in\n       section\
    \ 5.1.\n   Because the Informational Exchange with a Delete payload is a\n   unidirectional\
    \ message a retransmission will not be performed.  The\n   local security policy\
    \ will dictate the procedures for continuing.\n   However, we RECOMMEND that a\
    \ DELETE PAYLOAD ERROR event be logged in\n   the appropriate system audit file\
    \ by the receiving entity.\n   As described above, the Informational Exchange\
    \ with a Delete payload\n   MUST be transmitted under the protection provided\
    \ by an ISAKMP SA.\n   When a Delete payload is received, the receiving entity\
    \ (initiator or\n   responder) MUST do the following:\n   1.  Because the Informational\
    \ Exchange is protected by some security\n       service (e.g.  authentication\
    \ for an Auth-Only SA, encryption for\n       other exchanges), the message MUST\
    \ have these security services\n       applied using the ISAKMP SA. Once the security\
    \ service processing\n       is complete the processing can continue as described\
    \ below.  Any\n       errors that occur during the security service processing\
    \ will be\n       evident when checking information in the Delete payload.  The\n\
    \       local security policy SHOULD dictate any action to be taken as a\n   \
    \    result of security service processing errors.\n   2.  Determine if the Domain\
    \ of Interpretation (DOI) is supported.  If\n       the DOI determination fails,\
    \ the payload is discarded and the\n       following action is taken:\n      \
    \ (a)  The event, INVALID DOI, MAY be logged in the appropriate\n            system\
    \ audit file.\n   3.  Determine if the Protocol-Id is supported.  If the Protocol-Id\n\
    \       determination fails, the payload is discarded and the following\n    \
    \   action is taken:\n       (a)  The event, INVALID PROTOCOL-ID, MAY be logged\
    \ in the\n            appropriate system audit file.\n   4.  Determine if the\
    \ SPI is valid for each SPI included in the Delete\n       payload.  For each\
    \ SPI that is invalid, the following action is\n       taken:\n       (a)  The\
    \ event, INVALID SPI, MAY be logged in the appropriate\n            system audit\
    \ file.\n   5.  Process the Delete payload and take appropriate action, according\n\
    \       to local security policy.  As described above, one appropriate\n     \
    \  action SHOULD include cleaning up the local SA database.\n"
- title: 6 Conclusions
  contents:
  - "6 Conclusions\n   The Internet Security Association and Key Management Protocol\n\
    \   (ISAKMP) is a well designed protocol aimed at the Internet of the\n   future.\
    \  The massive growth of the Internet will lead to great\n   diversity in network\
    \ utilization, communications, security\n   requirements, and security mechanisms.\
    \  ISAKMP contains all the\n   features that will be needed for this dynamic and\
    \ expanding\n   communications environment.\n   ISAKMP's Security Association\
    \ (SA) feature coupled with\n   authentication and key establishment provides\
    \ the security and\n   flexibility that will be needed for future growth and diversity.\n\
    \   This security diversity of multiple key exchange techniques,\n   encryption\
    \ algorithms, authentication mechanisms, security services,\n   and security attributes\
    \ will allow users to select the appropriate\n   security for their network, communications,\
    \ and security needs.  The\n   SA feature allows users to specify and negotiate\
    \ security\n   requirements with other users.  An additional benefit of supporting\n\
    \   multiple techniques in a single protocol is that as new techniques\n   are\
    \ developed they can easily be added to the protocol.  This\n   provides a path\
    \ for the growth of Internet security services.  ISAKMP\n   supports both publicly\
    \ or privately defined SAs, making it ideal for\n   government, commercial, and\
    \ private communications.\n   ISAKMP provides the ability to establish SAs for\
    \ multiple security\n   protocols and applications.  These protocols and applications\
    \ may be\n   session-oriented or sessionless.  Having one SA establishment\n \
    \  protocol that supports multiple security protocols eliminates the\n   need\
    \ for multiple, nearly identical authentication, key exchange and\n   SA establishment\
    \ protocols when more than one security protocol is in\n   use or desired.  Just\
    \ as IP has provided the common networking layer\n   for the Internet, a common\
    \ security establishment protocol is needed\n   if security is to become a reality\
    \ on the Internet.  ISAKMP provides\n   the common base that allows all other\
    \ security protocols to\n   interoperate.\n   ISAKMP follows good security design\
    \ principles.  It is not coupled to\n   other insecure transport protocols, therefore\
    \ it is not vulnerable or\n   weakened by attacks on other protocols.  Also, when\
    \ more secure\n   transport protocols are developed, ISAKMP can be easily migrated\
    \ to\n   them.  ISAKMP also provides protection against protocol related\n   attacks.\
    \  This protection provides the assurance that the SAs and\n   keys established\
    \ are with the desired party and not with an attacker.\n   ISAKMP also follows\
    \ good protocol design principles.  Protocol\n   specific information only is\
    \ in the protocol header, following the\n   design principles of IPv6.  The data\
    \ transported by the protocol is\n   separated into functional payloads.  As the\
    \ Internet grows and\n   evolves, new payloads to support new security functionality\
    \ can be\n   added without modifying the entire protocol.\n"
- title: A ISAKMP Security Association Attributes
  contents:
  - 'A ISAKMP Security Association Attributes

    '
- title: A.1 Background/Rationale
  contents:
  - "A.1 Background/Rationale\n   As detailed in previous sections, ISAKMP is designed\
    \ to provide a\n   flexible and extensible framework for establishing and managing\n\
    \   Security Associations and cryptographic keys.  The framework provided\n  \
    \ by ISAKMP consists of header and payload definitions, exchange types\n   for\
    \ guiding message and payload exchanges, and general processing\n   guidelines.\
    \  ISAKMP does not define the mechanisms that will be used\n   to establish and\
    \ manage Security Associations and cryptographic keys\n   in an authenticated\
    \ and confidential manner.  The definition of\n   mechanisms and their application\
    \ is the purview of individual Domains\n   of Interpretation (DOIs).\n   This\
    \ section describes the ISAKMP values for the Internet IP Security\n   DOI, supported\
    \ security protocols, and identification values for\n   ISAKMP Phase 1 negotiations.\
    \  The Internet IP Security DOI is\n   MANDATORY to implement for IP Security.\
    \  [Oakley] and [IKE] describe,\n   in detail, the mechanisms and their application\
    \ for establishing and\n   managing Security Associations and cryptographic keys\
    \ for IP\n   Security.\n"
- title: A.2 Internet IP Security DOI Assigned Value
  contents:
  - "A.2 Internet IP Security DOI Assigned Value\n   As described in [IPDOI], the\
    \ Internet IP Security DOI Assigned Number\n   is one (1).\n"
- title: A.3 Supported Security Protocols
  contents:
  - "A.3 Supported Security Protocols\n   Values for supported security protocols\
    \ are specified in the most\n   recent \"Assigned Numbers\" RFC [STD-2].  Presented\
    \ in the following\n   table are the values for the security protocols supported\
    \ by ISAKMP\n   for the Internet IP Security DOI.\n                       Protocol\
    \ Assigned Value\n                       RESERVED        0\n                 \
    \      ISAKMP          1\n   All DOIs MUST reserve ISAKMP with a Protocol-ID of\
    \ 1.  All other\n   security protocols within that DOI will be numbered accordingly.\n\
    \   Security protocol values 2-15359 are reserved to IANA for future use.\n  \
    \ Values 15360-16383 are permanently reserved for private use amongst\n   mutually\
    \ consenting implementations.  Such private use values are\n   unlikely to be\
    \ interoperable across different implementations.\n"
- title: A.4 ISAKMP Identification Type Values
  contents:
  - "A.4 ISAKMP Identification Type Values\n   The following table lists the assigned\
    \ values for the Identification\n   Type field found in the Identification payload\
    \ during a generic Phase\n   1 exchange, which is not for a specific protocol.\n\
    \                              ID Type       Value\n                        ID_IPV4_ADDR\
    \          0\n                        ID_IPV4_ADDR_SUBNET   1\n              \
    \          ID_IPV6_ADDR          2\n                        ID_IPV6_ADDR_SUBNET\
    \   3\n"
- title: A.4.1 ID_IPV4_ADDR
  contents:
  - "A.4.1 ID_IPV4_ADDR\n   The ID_IPV4_ADDR type specifies a single four (4) octet\
    \ IPv4 address.\n"
- title: A.4.2 ID_IPV4_ADDR_SUBNET
  contents:
  - "A.4.2 ID_IPV4_ADDR_SUBNET\n   The ID_IPV4_ADDR_SUBNET type specifies a range\
    \ of IPv4 addresses,\n   represented by two four (4) octet values.  The first\
    \ value is an IPv4\n   address.  The second is an IPv4 network mask.  Note that\
    \ ones (1s) in\n   the network mask indicate that the corresponding bit in the\
    \ address\n   is fixed, while zeros (0s) indicate a \"wildcard\" bit.\n"
- title: A.4.3 ID_IPV6_ADDR
  contents:
  - "A.4.3 ID_IPV6_ADDR\n   The ID_IPV6_ADDR type specifies a single sixteen (16)\
    \ octet IPv6\n   address.\n"
- title: A.4.4 ID_IPV6_ADDR_SUBNET
  contents:
  - "A.4.4 ID_IPV6_ADDR_SUBNET\n   The ID_IPV6_ADDR_SUBNET type specifies a range\
    \ of IPv6 addresses,\n   represented by two sixteen (16) octet values.  The first\
    \ value is an\n   IPv6 address.  The second is an IPv6 network mask.  Note that\
    \ ones\n   (1s) in the network mask indicate that the corresponding bit in the\n\
    \   address is fixed, while zeros (0s) indicate a \"wildcard\" bit.\n"
- title: B Defining a new Domain of Interpretation
  contents:
  - "B Defining a new Domain of Interpretation\n   The Internet DOI may be sufficient\
    \ to meet the security requirements\n   of a large portion of the internet community.\
    \  However, some groups\n   may have a need to customize some aspect of a DOI,\
    \ perhaps to add a\n   different set of cryptographic algorithms, or perhaps because\
    \ they\n   want to make their security-relevant decisions based on something\n\
    \   other than a host id or user id.  Also, a particular group may have a\n  \
    \ need for a new exchange type, for example to support key management\n   for\
    \ multicast groups.\n   This section discusses guidelines for defining a new DOI.\
    \ The full\n   specification for the Internet DOI can be found in [IPDOI].\n \
    \  Defining a new DOI is likely to be a time-consuming process.  If at\n   all\
    \ possible, it is recommended that the designer begin with an\n   existing DOI\
    \ and customize only the parts that are unacceptable.\n   If a designer chooses\
    \ to start from scratch, the following MUST be\n   defined:\n    o  A \"situation\"\
    :  the set of information that will be used to\n       determine the required\
    \ security services.\n    o  The set of security policies that must be supported.\n\
    \    o  A scheme for naming security-relevant information, including\n       encryption\
    \ algorithms, key exchange algorithms, etc.\n    o  A syntax for the specification\
    \ of proposed security services,\n       attributes, and certificate authorities.\n\
    \    o  The specific formats of the various payload contents.\n    o  Additional\
    \ exchange types, if required.\n"
- title: B.1 Situation
  contents:
  - "B.1 Situation\n   The situation is the basis for deciding how to protect a\n\
    \   communications channel.  It must contain all of the data that will be\n  \
    \ used to determine the types and strengths of protections applied in\n   an SA.\
    \ For example, a US Department of Defense DOI would probably use\n   unpublished\
    \ algorithms and have additional special attributes to\n   negotiate.  These additional\
    \ security attributes would be included in\n   the situation.\n"
- title: B.2 Security Policies
  contents:
  - "B.2 Security Policies\n   Security policies define how various types of information\
    \ must be\n   categorized and protected.  The DOI must define the set of security\n\
    \   policies supported, because both parties in a negotiation must trust\n   that\
    \ the other party understands a situation, and will protect\n   information appropriately,\
    \ both in transit and in storage.  In a\n   corporate setting, for example, both\
    \ parties in a negotiation must\n   agree to the meaning of the term \"proprietary\
    \ information\" before\n   they can negotiate how to protect it.\n   Note that\
    \ including the required security policies in the DOI only\n   specifies that\
    \ the participating hosts understand and implement those\n   policies in a full\
    \ system context.\n"
- title: B.3 Naming Schemes
  contents:
  - "B.3 Naming Schemes\n   Any DOI must define a consistent way to name cryptographic\n\
    \   algorithms, certificate authorities, etc.  This can usually be done\n   by\
    \ using IANA naming conventions, perhaps with some private\n   extensions.\n"
- title: B.4 Syntax for Specifying Security Services
  contents:
  - "B.4 Syntax for Specifying Security Services\n   In addition to simply specifying\
    \ how to name entities, the DOI must\n   also specify the format for complete\
    \ proposals of how to protect\n   traffic under a given situation.\n"
- title: B.5 Payload Specification
  contents:
  - "B.5 Payload Specification\n   The DOI must specify the format of each of the\
    \ payload types.  For\n   several of the payload types, ISAKMP has included fields\
    \ that would\n   have to be present across all DOI (such as a certificate authority\
    \ in\n   the certificate payload, or a key exchange identifier in the key\n  \
    \ exchange payload).\n"
- title: B.6 Defining new Exchange Types
  contents:
  - "B.6 Defining new Exchange Types\n   If the basic exchange types are inadequate\
    \ to meet the requirements\n   within a DOI, a designer can define up to thirteen\
    \ extra exchange\n   types per DOI.  The designer creates a new exchange type\
    \ by choosing\n   an unused exchange type value, and defining a sequence of messages\n\
    \   composed of strings of the ISAKMP payload types.\n   Note that any new exchange\
    \ types must be rigorously analyzed for\n   vulnerabilities.  Since this is an\
    \ expensive and imprecise\n   undertaking, a new exchange type should only be\
    \ created when\n   absolutely necessary.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Cryptographic analysis techniques are improving at\
    \ a steady pace.\n   The continuing improvement in processing power makes once\n\
    \   computationally prohibitive cryptographic attacks more realistic.\n   New\
    \ cryptographic algorithms and public key generation techniques are\n   also being\
    \ developed at a steady pace.  New security services and\n   mechanisms are being\
    \ developed at an accelerated pace.  A consistent\n   method of choosing from\
    \ a variety of security services and mechanisms\n   and to exchange attributes\
    \ required by the mechanisms is important to\n   security in the complex structure\
    \ of the Internet.  However, a system\n   that locks itself into a single cryptographic\
    \ algorithm, key exchange\n   technique, or security mechanism will become increasingly\
    \ vulnerable\n   as time passes.\n   UDP is an unreliable datagram protocol and\
    \ therefore its use in\n   ISAKMP introduces a number of security considerations.\
    \  Since UDP is\n   unreliable, but a key management protocol must be reliable,\
    \ the\n   reliability is built into ISAKMP. While ISAKMP utilizes UDP as its\n\
    \   transport mechanism, it doesn't rely on any UDP information (e.g.\n   checksum,\
    \ length) for its processing.\n   Another issue that must be considered in the\
    \ development of ISAKMP is\n   the effect of firewalls on the protocol.  Many\
    \ firewalls filter out\n   all UDP packets, making reliance on UDP questionable\
    \ in certain\n   environments.\n   A number of very important security considerations\
    \ are presented in\n   [SEC-ARCH].  One bears repeating.  Once a private session\
    \ key is\n   created, it must be safely stored.  Failure to properly protect the\n\
    \   private key from access both internal and external to the system\n   completely\
    \ nullifies any protection provided by the IP Security\n   services.\n"
- title: IANA Considerations
  contents:
  - "IANA Considerations\n   This document contains many \"magic\" numbers to be maintained\
    \ by the\n   IANA.  This section explains the criteria to be used by the IANA\
    \ to\n   assign additional numbers in each of these lists.\n"
- title: Domain of Interpretation
  contents:
  - "Domain of Interpretation\n   The Domain of Interpretation (DOI) is a 32-bit field\
    \ which identifies\n   the domain under which the security association negotiation\
    \ is taking\n   place.  Requests for assignments of new DOIs must be accompanied\
    \ by a\n   standards-track RFC which describes the specific domain.\n"
- title: Supported Security Protocols
  contents:
  - "Supported Security Protocols\n   ISAKMP is designed to provide security association\
    \ negotiation and\n   key management for many security protocols.  Requests for\
    \ identifiers\n   for additional security protocols must be accompanied by a\n\
    \   standards-track RFC which describes the security protocol and its\n   relationship\
    \ to ISAKMP.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Dan Harkins, Dave Carrel, and Derrell Piper of Cisco Systems\
    \ provided\n   design assistance with the protocol and coordination for the [IKE]\n\
    \   and [IPDOI] documents.\n   Hilarie Orman, via the Oakley key exchange protocol,\
    \ has\n   significantly influenced the design of ISAKMP.\n   Marsha Gross, Bill\
    \ Kutz, Mike Oehler, Pete Sell, and Ruth Taylor\n   provided significant input\
    \ and review to this document.\n   Scott Carlson ported the TIS DNSSEC prototype\
    \ to FreeBSD for use with\n   the ISAKMP prototype.\n   Jeff Turner and Steve\
    \ Smalley contributed to the prototype\n   development and integration with ESP\
    \ and AH.\n   Mike Oehler and Pete Sell performed interoperability testing with\n\
    \   other ISAKMP implementors.\n   Thanks to Carl Muckenhirn of SPARTA, Inc. \
    \ for his assistance with\n   LaTeX.\n"
- title: References
  contents:
  - "References\n   [ANSI]     ANSI, X9.42:  Public Key Cryptography for the Financial\n\
    \              Services Industry -- Establishment of Symmetric Algorithm\n   \
    \           Keys Using Diffie-Hellman, Working Draft, April 19, 1996.\n   [BC]\
    \       Ballardie, A., and J. Crowcroft, Multicast-specific\n              Security\
    \ Threats and Countermeasures, Proceedings of 1995\n              ISOC Symposium\
    \ on Networks & Distributed Systems Security,\n              pp. 17-30, Internet\
    \ Society, San Diego, CA, February 1995.\n   [Berge]    Berge, N., \"UNINETT PCA\
    \ Policy Statements\", RFC 1875,\n              December 1995.\n   [CW87]    \
    \ Clark, D.D. and D.R. Wilson, A Comparison of Commercial\n              and Military\
    \ Computer Security Policies, Proceedings of\n              the IEEE Symposium\
    \ on Security & Privacy, Oakland, CA,\n              1987, pp. 184-193.\n   [DNSSEC]\
    \   D. Eastlake III, Domain Name System Protocol Security\n              Extensions,\
    \ Work in Progress.\n   [DOW92]    Diffie, W., M.Wiener, P. Van Oorschot, Authentication\
    \ and\n              Authenticated Key Exchanges, Designs, Codes, and\n      \
    \        Cryptography, 2, 107-125, Kluwer Academic Publishers,\n             \
    \ 1992.\n   [IAB]      Bellovin, S., \"Report of the IAB Security Architecture\n\
    \              Workshop\", RFC 2316, April 1998.\n   [IKE]      Harkins, D., and\
    \ D. Carrel, \"The Internet Key Exchange\n              (IKE)\", RFC 2409, November\
    \ 1998.\n   [IPDOI]    Piper, D., \"The Internet IP Security Domain of\n     \
    \         Interpretation for ISAKMP\", RFC 2407, November 1998.\n   [Karn]   \
    \  Karn, P., and B. Simpson, Photuris:  Session Key\n              Management\
    \ Protocol, Work in Progress.\n   [Kent94]   Steve Kent, IPSEC SMIB, e-mail to\
    \ ipsec@ans.net, August\n              10, 1994.\n   [Oakley]   Orman, H., \"\
    The Oakley Key Determination Protocol\",  RFC\n              2412, November 1998.\n\
    \   [RFC-1422] Kent, S., \"Privacy Enhancement for Internet Electronic\n     \
    \         Mail:  Part II: Certificate-Based Key Management\", RFC\n          \
    \    1422, February 1993.\n   [RFC-1949] Ballardie, A., \"Scalable Multicast Key\
    \ Distribution\", RFC\n              1949, May 1996.\n   [RFC-2093] Harney, H.,\
    \ and C. Muckenhirn, \"Group Key Management\n              Protocol (GKMP) Specification\"\
    , RFC 2093, July 1997.\n   [RFC-2094] Harney, H., and C. Muckenhirn, \"Group Key\
    \ Management\n              Protocol (GKMP) Architecture\", RFC 2094, July 1997.\n\
    \   [RFC-2119] Bradner, S., \"Key Words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [Schneier] Bruce\
    \ Schneier, Applied Cryptography - Protocols,\n              Algorithms, and Source\
    \ Code in C (Second Edition), John\n              Wiley & Sons, Inc., 1996.\n\
    \   [SEC-ARCH] Atkinson, R., and S. Kent, \"Security Architecture for the\n  \
    \            Internet Protocol\", RFC 2401, November 1998.\n   [STD-2]   Reynolds,\
    \ J., and J. Postel, \"Assigned Numbers\", STD 2, RFC\n              1700, October\
    \ 1994.  See also:\n              http://www.iana.org/numbers.html\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Douglas Maughan\n   National Security Agency\n   ATTN:\
    \ R23\n   9800 Savage Road\n   Ft.  Meade, MD. 20755-6000\n   Phone:  301-688-0847\n\
    \   EMail:wdm@tycho.ncsc.mil\n   Mark Schneider\n   National Security Agency\n\
    \   ATTN: R23\n   9800 Savage Road\n   Ft.  Meade, MD. 20755-6000\n   Phone: \
    \ 301-688-0851\n   EMail:mss@tycho.ncsc.mil\n   Mark Schertler\n   Securify, Inc.\n\
    \   2415-B Charleston Road\n   Mountain View, CA 94043\n   Phone:  650-934-9303\n\
    \   EMail:mjs@securify.com\n   Jeff Turner\n   RABA Technologies, Inc.\n   10500\
    \ Little Patuxent Parkway\n   Columbia, MD. 21044\n   Phone:  410-715-9399\n \
    \  EMail:jeff.turner@raba.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
