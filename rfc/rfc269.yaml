- title: __initial_text__
  contents:
  - "                   Some Experience with File Transfer\nAt UCLA-NMC we have recently\
    \ completed implementation of a program which\nutilizes UCSB's storage capability\
    \ via their Simple Minded File System\n(See RFC #122 by Jim White for a description\
    \ of SMFS).  The use of the\nprogram is detailed in Appendix A.\nWe learned a\
    \ number of things in the implementation effort and\nsubsequent usage.  We think\
    \ a number of these apply towards the\ndevelopment of a net- word-wide File Transfer\
    \ Protocol, and we hope to\nstimulate further dis- cussion of these issues.  We\
    \ discovered some\nthings in the UCSB protocol that we would like to see included\
    \ in the\nnetwork-wide protocol, and we see some things that are in the currently\n\
    proposed net protocol and are unfortunately absent from the UCSB\nprotocol.\n\
    In the first category, is the UCSB file retrieval procedure.  The user\nspecifies\
    \ among other things, a bit count of the number of bits to be\nretrieved in the\
    \ current request.\nSuccessive RTF commands yield successive pieces of the file.\
    \  Portions\nof the file can be spaced over by use of the SPF command.  We think\
    \ that\nthe ability of the user to specify the size of the \"chunks\" of the file\n\
    he is about to receive, along with the ability to access any part of the\nfile\
    \ without having to get the entire file, is definitely an advantage.\nIt makes\
    \ the user programs easier to write since the problem of parsing\nthe input stream\
    \ virtually disappears, as the user program knows exactly\nwhat to expect at all\
    \ times.  In addition, the one request, one response\nnature of the protocol avoids\
    \ the problem of sending a request and then\nreceiving pieces of data of unpredictable\
    \ size at unknown intervals.\nThe response to each RTF gives the comforting knowledge\
    \ that \"they're\nstill listening\".  This leads us to believe that there is much\
    \ to be\ngained by the adoption of a one request, one response type of protocol.\n\
    We might point out that for any significant file transfer, this does not\nseriously\
    \ cut down on the overall data transfer rate, since a\n\"defaulting\" type of\
    \ approach, as SMFS uses can be used to keep the\nrequest messages very small.\
    \  We also have found the mandatory password\nscheme of UCSB quite easily used,\
    \ and any server site, (i.e. a site\nspecifically advertising file storage) can\
    \ reasonably be expected, in\nour opinion, to require passwords (see also RFC\
    \ #238 by R. Braden).\nNIC #7817                                             \
    \  6 December 71\nAlmost immediately after starting to use SMFS we found a serious\
    \ lack in\none area.  There is no way for a user to ask \"what files do I have\n\
    there?\"  As a matter of fact, the author suspects that there are already\nseveral\
    \ files there which he has \"forgotten\" about!  It is reasonable,\nperhaps even\
    \ necessary, for any server to supply a nicely formatted\ncharacter string describing\
    \ the files stored there for this password, or\nuser, or whatever division is\
    \ used.  The listing should also contain\nother pertinent information, such as\
    \ date created, size etc.\nIn the meantime, UCSB is providing the SEX system with\
    \ valuable \"out-of-\nline on-line\" storage, and we look forward to the development\
    \ of a\nwidely accepted file transfer protocol, implemented on a large number\
    \ of\nserver sites, hopefully equipped with low cost bulk storage.\n         \
    \                        FXFER\nFXFER is a re-entrant program written in Symbol\
    \ which is used to send a\nreceive file from UCSB, using their Simple Minded File\
    \ System.  For the\ndescription of the Network interface to SMFS, see RFC #122\
    \ by Jim White.\nFiles are stored there in a paged format identical to the paged\
    \ format\nthat the tape process uses: <header><data page><data page>...  Thus\
    \ a\nfile which Master lists as having n pages will take 2048 n bytes of\nstorage\
    \ at UCSB.  The user's sign-on initials are used as both the\naccess and modification\
    \ passwords, so that if a file is sent under on\nuser's sign-on, they can only\
    \ be retrieved or deleted by him.\nCommands\nPA - Increments \"print All\" counter.\
    \  Different settings of this\n     counter yield different levels of program\
    \ trace output on\n     the console.\nNP - No print.  This sets the \"Print All\"\
    \ counter to zero.\nDF FOO - This deletes the file \"FOO\" located at UCSB.\n\
    PF FOO - This sends the file \"FOO\", pointed to by the user's root\n        \
    \ directory, to UCSB.  Only read access is needed to \"FOO\".\nGF FOO - The file\
    \ \"FOO\" located at UCSB is retrieved and put in the\n         user's root (with\
    \ write access).  Note that it must have been\n         sent by the user to have\
    \ the right password.\nRN FOO BAR - Rename the file \"FOO\" at UCSB to \"BAR\"\
    .  The same password\n             restrictions as with PF and GF apply.  (Not\
    \ yet implemented)\nST - Status.  Tells what program is doing and how much its\
    \ done.\nX - Exit Program.\nIf the system and/or UCSB is particularly slow, then\
    \ UCSBFIL may type a\ntime-out message.  At this point the user has the option\
    \ of continuing,\nor exiting the program.  The message is self-explanatory, as\
    \ are most of\nthe program's messages.\n       [ This RFC was put into machine\
    \ readable form for entry ]\n       [ into the online RFC archives by Nick Christenson\
    \ 10/97]\n"
