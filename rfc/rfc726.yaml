- contents:
  - "     Network Working Group             Jon Postel & Dave Crocker\n     Request
    for Comments: 726            SRI-ARC      UC Irvine\n     NIC: 39237                                     8
    March 1977\n       Remote Controlled Transmssion and Echoing Telnet Option\n     1.
    \ Command name and code:                                        2\n       RCTE
    7                                                         2a\n     2.  Command
    meanings:                                             3\n       IAC WILL RCTE
    \                                                 3a\n         The sender of this
    command REQUESTS or AGREES to use\n         the RCTE option, and will send instructions
    for\n         controlling the other side's terminal printer.              3a1\n
    \      IAC WON'T RCTE                                                 3b\n         The
    sender of this option REFUSES to send instructions\n         for controlling the
    other side's terminal printer.          3b1\n       IAC DO RCTE                                                    3c\n
    \        The sender REQUEST or AGREES to have the other side\n         (sender
    of WILL RCTE) issue commands which will control\n         his (sender of the DO)
    output to the terminal printer.      3c1\n       IAC DON'T RCTE                                                 3d\n
    \        The sender of this command REFUSES to allow the other\n         side
    to control his (sender of DON'T) terminal printer.     3d1\n       IAC SB RCTE
    <cmd> [BC1 BC2] [TC1 TC2] IAC SE                   3e\n         where:                                                      3e1\n
    \          <cmd> is one 8-bit byte having the following flags\n           (bits
    are counted from the right):                       3e1a\n           Bit  Meaning
    \                                            3e1b\n            0   0 = Ignore
    all other bits in this byte and\n                    repeat the last <cmd> that
    was sent. Equals\n                    a 'continue what you have been doing'.\n
    \               1 = Perform actions as indicated by other bits\n                    in
    this byte.                                   3e1c\n            1   0 = Print (echo)
    break character\n                1 = Skip (don't echo) break character               3e1d\n
    \           2   0 = Print (echo) text up to break character\n                1
    = Skip (don't echo) text up to break character    3e1e\n            3   0 = Continue
    using same classes of break\n                    characters.\n                1
    = The two 8-bit bytes following this byte\n                    contain flags for
    the new break classes.        3e1f\n            4   0 = Continue using same classes
    of transmit\n                    characters.\n                1 = Reset transmit
    classes according to the two\n                    bytes following 1) the break
    classes bytes,\n                    if the break classes are also being reset,\n
    \                   or 2) this byte, if the break classes are\n                    NOT
    also being reset.                           3e1g\n           Value (decimal) of
    the <cmd> byte and its meaning:       3e1h\n           0 = Continue what you have
    been doing                    3e1i\n           Even numbers greater than zero
    (i.e. numbers with the\n           right most bit off) are in error and should
    be\n           interpreted as equal to zero. When the <cmd> is an\n           even
    number greater than zero, classes bytes TC1 &\n           TC2 and/or BC1 & BC2
    must not be sent.                   3e1j\n           1 = Print (echo) up to AND
    INCLUDING break character     3e1k\n           3 = Print up to break character
    and SKIP (don't echo)\n               break character                                      3e1l\n
    \          5 = Skip text (don't echo) up to break character, but\n               PRINT
    break character                                3e1m\n           7 = Skip up to
    and including break character             3e1n\n           Add one of the previous
    non-zero values to one of the\n           following values, to get the total decimal
    value for\n           the byte (Note that classes may not be reset without\n           also
    resetting the printing action; so an odd number\n           is guaranteed):                                          3e1o\n
    \          8 = Set break classes (using the next two bytes [BC1\n               BC2])
    \                                               3e1p\n           16 = Set transmission
    classes (using the next two\n               bytes [TC1 TC2])                                     3e1q\n
    \          24 = Set break classes (using the next two bytes [BC1\n               BC2])
    and the transmission classes (using the two\n               bytes after that [TC1
    TC2]).                         3e1r\n         Sub-commands (IAC SB RCTE...) are
    only sent by the\n         controlling host and, in addition to other functions,\n
    \        functionally replace the Go-Ahead (IAC GA) Telnet\n         feature.
    RCTE also functionally replaces the Echo (IAC\n         ECHO) Telnet option. That
    is the Suppress Go-Ahead\n         option should be in force and the Echo option
    should\n         not be in force while the RCTE option is in use. The\n         echo
    mode on terminating use of the RCTE option should\n         be the default state,
    that is DON'T ECHO, WON'T ECHO.       3e2\n         Classes for break and transmission
    (the right-most bit\n         of the second byte (TC2 or BC2) represents class
    1; the\n         left-most bit of the first byte (TC1 or BC1) represents\n         the
    currently undefined class 16:                           3e3\n           1: Upper-Case
    Letter (A-Z)                               3e3a\n           2: Lower-case Letters
    (a-z)                              3e3b\n           3: Numbers (0-9)                                         3e3c\n
    \          4: Format Effectors (<BS> <CR> <LF> <FF> <HT> <VT>)      3e3d\n             The
    sequence <cr><lf> counts as one character when\n                processed as the
    Telnet end of line, and is a\n                single break character when class
    4 is set. The\n                sequence <cr><nul> counts as one character and\n
    \               is a break character if and only if <cr> is a\n                break
    character (i.e. class 4 is set).\n           5: Non-format Effector Control Characters
    including\n              <DEL> and <ESC>                                       3e3e\n
    \          6: . , ; : ? !                                           3e3f\n           7:
    { [ ( < > ) ] }                                       3e3g\n           8: ' \"
    \ / \\ % @ $ & # + - * = ^ _ | ~                    3e3h\n           9: <Space>
    \                                              3e3i\n           And Telnet commands
    (IAC . . .) sent by the user are\n           always to have the effect of a break
    character. That\n           is, every instance of an IAC is to be treated as a\n
    \          break character, except the sequence IAC IAC.            3e3j\n         The
    representation to be displayed when printing is\n         called for is the obvious
    one for the visible\n         characters (classes 1, 2, 3, 6, 7, and 8). Space
    (class\n         9) is represented by a blank space. The format\n         effectors
    (class 4) by their format effect. The\n         non-format effector controls (class
    5) print nothing\n         (no space).                                                 3e4\n
    \        Initially no break classes or transmission classes are\n         in effect.
    \                                                 3e5\n         Please note that
    if all the bits are set in a Telnet\n         subcommand argument byte such as
    TC2 or BC2 then that\n         byte must be preceeded by an <IAC> flag byte. This
    is\n         the common convention of doubling the escape character\n         to
    use its value as data.                                   3e6\n         Sub-commands
    (IAC SB RCTE...) are refered to as \"break\n         reset commands\".                                            3e7\n
    \    3.  Default:                                                      4\n       WON'T
    RCTE -- DON'T RCTE                                       4a\n         Neither
    host asserts special control over the other\n         host's terminal printer.
    \                                   4a1\n     4.  Motivation for the option:                                    5\n
    \      RFC's 1, 5 and 51 discuss Network and process efficiency\n       and smoothness.
    \                                               5a\n       RFC 357, by John Davidson,
    introduces the problem of\n       echoing delay that occurs when a remote user
    accesses a\n       full-duplex host, thru a satellite link. In order to save\n
    \      the many thousands of miles of transit time for each\n       echoed character,
    while still permitting full server\n       responsiveness and clean terminal output,
    an echo control\n       similar to that used by some time-sharing systems is\n
    \      suggested for the entire Network.                              5b\n         In
    effect, the option described in this document\n         involves making a using
    host carefully regulate the\n         local terminal printer according to explicit\n
    \        instructions from the remote (serving) host.                5b1\n       An
    important additional issue is efficient Network\n       transmission. Implementation
    of the Davidson Echoing\n       Scheme will eliminate almost all server-to-user
    echoing.       5c\n         The option described in this document also requests\n
    \        using hosts to buffer a terminal's input to the serving\n         host
    until it forms a useful unit (with \"useful unit\"\n         delimited by break
    or transmission characters as\n         described below). Therefore, fewer messages
    are sent on\n         the user-to-server path.                                    5c1\n
    \      N.B.:  This option is only intended for use with\n       full-duplex hosts.
    The Go-Ahead Telnet feature is\n       completely adequate for half-duplex server
    hosts. Also,\n       RCTE should be used in place of the ECHO Telnet option.\n
    \      That is the Suppress Go-Ahead option should be in force\n       and the
    Echo option should not be in force while the RCTE\n       option is in use.                                              5d\n
    \    5.  Explicit description of control mechanism:                    6\n       User
    Terminal Printing Action & Control Procedure              6a\n         Negotiate
    the use of the RCTE option. Once the option\n         is in force the user Telnet
    follows the following\n         procedure.                                                  6a1\n
    \        1) Read an item from the network.                           6a2\n           If
    the item is data, then print it and go to 1.          6a2a\n           If the
    item is a command, then set the classes and go\n           to 2.                                                    6a2b\n
    \        2) If the terminal input buffer is empty, then go to 3,\n         else
    go to 4.                                               6a3\n         3) Wait for
    an item to appear either from the terminal\n         or from the network.                                        6a4\n
    \          If an item appears from the terminal, then go to 4.      6a4a\n           If
    a data item appears from the network, then print\n           it and go to 3.                                          6a4b\n
    \          If a command appears from the network, then an error\n           has
    occured.                                             6a4c\n         4) Read an
    item from the terminal input buffer.             6a5\n           If the item is
    not a break, then print/skip it and go\n           to 2.                                                    6a5a\n
    \          If the item is a break, then print/skip it and go to\n           1.
    \                                                      6a5b\n         Note:  Output
    from the server host may occur at any\n         time, such \"spontaneous output\"
    is printed in step 3.       6a6\n       Explanation:                                                   6b\n
    \        Both Hosts agree to use the RCTE option. After that,\n         the using
    host (IAC DO RCTE) merely acts upon the\n         controlling (serving) host's
    commands and does not\n         issue any RCTE commands unless and until it (using\n
    \        host) decides to stop allowing use of the option (by\n         sending
    IAC DON'T RCTE).                                    6b1\n         1)  The using
    host is synchronized with the server by\n         initially and when ever it returns
    to step 1 suspending\n         terminal echo printing until it receives a command
    from\n         the server.                                                 6b2\n
    \        The server may send either output to the terminal\n         printer or
    a command, and usually sends a both.             6b3\n         The server may
    send output to the terminal printer\n         either in response to user input
    or spontaneously. In\n         the former case, the output is processed in step
    1. In\n         the latter case, the output is processed in step 3.         6b4\n
    \        Server sends an RCTE command. The command may redefine\n         break
    and transmission classes, action to be performed\n         on break characters,
    and action to be performed on\n         text. Each of these independent functions
    is controlled\n         by separate bits in the <cmd> byte.                         6b5\n
    \          A transmission character is one which RECOMMENDS that\n           the
    using host transmit all text accumulated up to\n           and including its occurrence.
    (For network\n           efficiency, using hosts are DISCOURAGED (but not\n           prohibited)
    from sending before the occurrence of a\n           transmission character, as
    defined at the moment the\n           character is typed).                                     6b5a\n
    \            If the transmission classes bit (bit 4) is on, the\n             two
    bytes following the two break classes bytes (or\n             immediately following
    the <cmd> byte, if the break\n             classes bit is not on) will indicate
    what classes\n             are to be enabled.\n             If the bit is OFF,
    the transmission classes remain\n             unchanged. When the RCTE option
    is first initiated,\n             NO CLASSES are in effect. That is, no character\n
    \            will be considered a transmission character. (As if\n             both
    TC1 and TC2 are zero.)\n           A break character REQUIRES that the using host\n
    \          transmit all text accumulated up to and including its\n           occurrence
    and also causes the using host to stop its\n           print/discard action upon
    the user's input text,\n           until directed to do otherwise by another IAC
    SB RCTE\n           <cmd> IAC SE command from the serving host. Break\n           characters
    therefore define printing units. \"Break\n           character\" as used in this
    document does NOT mean\n           Telnet Break character.                                  6b5b\n
    \            If the break classes bit (bit 3) is on, the two\n             bytes
    following <cmd> will indicate what classes\n             are to be enabled. There
    are currently nine (9)\n             classes defined, with room for expansion.\n
    \            If the bit is OFF, the break classes remain\n             unchanged.
    When the RCTE option is initiated, NO\n             CLASSES are to be in effect.
    That is, no\n             transmission will take place in the user to server\n
    \            direction until the first break reset command is\n             received
    by the user from the server.\n           The list of character classes, used to
    define break\n           and transmission classes are listed at the end of\n           this
    document, in the Tables Section.                    6b5c\n           Because break
    characters are special, the\n           print/discard action that should be performed
    upon\n           them is not always the same as should be performed\n           upon
    the rest of the input text.                         6b5d\n             For example,
    while typing a filename to TENEX, I\n             want the text of the filename
    to be printed\n             (echoed); but I do not want the <escape> (if I use\n
    \            the name completion feature) to be printed.\n             If bit
    1 is ON the break character is NOT to be\n             printed.\n           A
    separate bit (bit 2) signals whether or not the\n           text itself should
    be printed (echoed) to the\n           terminal. If bit 2 = 0, then the text IS
    to be\n           printed.                                                 6b5e\n
    \          Yet another bit (bit 0 - right-most bit) signals\n           whether
    or not any of the other bits of the command\n           should be checked. If
    this bit is OFF, then the\n           command should be interpreted to mean \"continue\n
    \          whatever echoing strategy you have been following,\n           using
    the same break and transmission classes.\"          6b5f\n         2)  The user
    Telnet now checks the terminal input\n         buffer, if it contains data it
    is processed in step 4,\n         otherwise the user Telnet waits in step 3 for
    further\n         developments.                                               6b6\n
    \        3)  The user Telnet waits until either the human user\n         enters
    some data in which case Telnet proceeeds to step\n         4, or an item is received
    from the network. If the item\n         from the network is data it is spontaneous
    output and\n         is printed, Telnet then continues to wait. If the item\n
    \        from the network is a command then an error has\n         occured. In
    this case the user Telnet may attempt to\n         resynchronize the use of RCTE
    as indicated below.           6b7\n         4)  Items from the terminal are processed
    with printing\n         controlled by the settings of the latest break reset\n
    \        command. When a break character is processed, the cycle\n         of
    control is complete and action re-commences at step\n         1.                                                          6b8\n
    \        Input from the terminal is (hopefully) buffered into\n         units
    ending with a transmission or break character;\n         and echoing of input
    text is suspended after the\n         occurrence of a break character and until
    receipt of a\n         break reset command from the serving host. The most\n         recent
    break reset command determines the break\n         actions.                                                    6b9\n
    \        In summary, what is required is that for every break\n         character
    sent in the user to server direction there be\n         a break reset command
    sent in the server to user\n         direction. The user host initially has no
    knowledge of\n         which characters are break characters and so starts in\n
    \        a state that assumes that there are no break characters\n         and
    also that no echoing is to be provided. The server\n         host is expected
    to send a break reset command to\n         establish the break classes and the
    echoing mode before\n         it receives any data from the user.                        6b10\n
    \      Synchronization and Resynchronization:                         6c\n         The
    serving and using hosts must carefully synchronize\n         break reset commands
    with the transmission of break\n         characters. Except at the beginning of
    an interaction,\n         the serving host may only send a break reset command
    in\n         response to the Using host's having sent a break\n         character
    as defined at that time. This should\n         establish a one-to-one correspondence
    between them.  (A\n         <cmd> value of zero, in this context, is interpreted
    as\n         a break classes reset to the same class(es) as before.)\n         The
    break reset command may be preceded by terminal\n         output.                                                     6c1\n
    \        The re-synchronization of the break characters and the\n         break
    reset commands is done via the exchange of the\n         Telnet signal Abort Output
    (AO) in the server to user\n         direction and the SYNCH in the user to server\n
    \        direction.                                                  6c2\n         Suppose
    the server wants to resynchronize the break\n         characters and the break
    reset commands.                    6c3\n           a.  The server should be sure
    all output to the\n           terminal has been printed by using, for example,
    the\n           Timing Mark Option.                                      6c3a\n
    \          b.  The server sends the AO signal.                      6c3b\n           c.
    \ The user receives the AO signal. The user flushes\n           all user to server
    data wheather it has been echoed\n           or not. The user sends a SYNCH to
    the server. [The\n           SYNCH consists of the Telnet Data Mark (DM) and the\n
    \          host-to-host interrupt (INS).] The user now enters\n           the
    initial state at step 1.                             6c3c\n           d.  The
    server receives the SYNCH and flushes any\n           data preceeding the DM (as
    always). The server now\n           sends a break reset command. (Actually the
    break\n           reset command could be sent at any time following the\n           AO.)
    \                                                    6c3d\n         Suppose the
    user wants to resynchronize the break\n         characters and the break reset
    commands.                    6c4\n           a.  The user should discard all user
    to server data\n           wheather it has been echoed or not.                      6c4a\n
    \          b.  The user sends the AO signal. The user now enters\n           the
    algorithm at step 1.                                 6c4b\n           c.  The
    server receives the AO signal. The server\n           discards all data buffered
    but not yet sent to the\n           user. The server sends a SYNCH to the user.
    The\n           server sends a break reset command to the user.          6c4c\n
    \      Notes and Comments:                                            6d\n         Even-numbered
    commands, greater than zero, are in\n         error, since they will have the
    low-order bit off. The\n         command should be interpreted as equal to zero,
    which\n         means that any classes reset bytes ([TC1 TC2] [BC1\n         BC2])
    will be in error. (The IAC SE, at the end of the\n         command, eliminates
    any parsing problems due to this\n         error.)                                                     6d1\n
    \        Serving hosts will generally instruct using hosts not\n         to echo
    break characters, even though it might be\n         alright to echo most break
    characters. For example,\n         <cr> is usually a safe character to echo but
    <esc> is\n         not. TENEX Exec is willing to accept either, during\n         filename
    specification. Therefore, the using host must\n         be instructed not to echo
    any break characters.             6d2\n           This is generally a tolerable
    problem, since the\n           serving host has to send an RCTE command at this\n
    \          point, anyhow. Adding an echo for the break character\n           to
    the message will not cause any extra network\n           traffic.                                                 6d2a\n
    \        The RCTE Option entails a rather large overhead. In a\n         true
    character-at-a-time situation, this overhead is\n         not justified. But on
    the average, it should result in\n         significant savings, both in network
    traffic and host\n         wake-ups.                                                   6d3\n
    \        Buffering Problems and Transmission vs. Printing\n         Constraints:
    \                                               6d4\n           There are NO mandatory
    transmission constraints. The\n           using host is allowed to send a character
    a time,\n           though this would be a waste of RCTE. The\n           transmission
    classes commands are GUIDELINES, so\n           deviating from them, as when the
    user's buffer gets\n           full, is allowed.                                        6d4a\n
    \          Additionally, the using host may send a break class\n           character,
    without knowing that it is one (as with\n           type-ahead).                                             6d4b\n
    \            If the user implementation is clever it may send\n             the
    user entered data to the server before it is\n             actually needed. This
    type ahead data may contain\n             break characters.\n             Assume
    that only space is a break character (that\n             is the last break reset
    command specified print up\n             to and including the break characters
    and set the\n             break classes to class 9). Suppose the user had\n             typed
    \"abc<space>def<esc>ghi<cr>\". The user side\n             RCTE could send it
    all to the server, but it could\n             print only \"abc<space>\", and would
    have to buffer\n             \"def<esc>ghi<cr>\" at least until a break reset\n
    \            command was received from the server. That break\n             reset
    command could change the break ckasses\n             requiring rescanning the
    buffered string.\n             For example suppose the break reset command set
    the\n             break characters to class 5 and the action to print\n             up
    to but not including the break character. The\n             user RCTE could then
    print \"def\" and discard the\n             <esc>, but whould have to continue
    to buffer the\n             \"ghi<cr>\".\n           The problem with buffering
    occurs when printing on\n           the user's terminal must be suspended, after
    the user\n           has typed a currently valid break character and until\n           a
    break reset command is received from the serving\n           host. During this
    time, the user may be typing\n           merrily along. The text being typed may
    be SENT, but\n           may not yet be PRINTED.                                  6d4c\n
    \          The more common problem of filling the transmission\n           buffer,
    while awaiting a host to host allocate from\n           the serving host, may
    also occur, but this problem is\n           well known to implementors and in
    no way special to\n           RCTE.                                                    6d4d\n
    \          In any case, when the buffer does fill and further\n           text
    typed by the user will be lost, the user should\n           be notified (perhaps
    by ringing the terminal bell).      6d4e\n         Text should be buffered by
    the using host until the\n         user types a character which belongs to the\n
    \        transmission class in force at the moment the character\n         is
    typed.                                                   6d5\n         Transmission
    class reset commands may be sent by the\n         serving host at any time. If
    they are frequently sent\n         separate from break class reset commands, it
    will\n         probably be better to exit from RCTE and enter regular\n         character
    at a time transmission.                           6d6\n         It is not immediately
    clear what the using host should\n         do with currently buffered text, when
    a transmission\n         classes reset command is received. The buffering is\n
    \        according to the previous transmission classes scheme.      6d7\n           The
    using host clearly should not simply wait until a\n           transmission character
    (according to the new scheme)\n           is typed.                                                6d7a\n
    \          Either the buffered text should be rescanned, under\n           the
    new scheme;                                          6d7b\n           Or the buffered
    text should simply be sent as a\n           group. This is the simpler approach,
    and probably\n           quite adequate.                                          6d7c\n
    \        It is possible to define NO BREAK CHARACTERS except\n         Telnet
    commands (IAC ...). This seems undesirable and\n         should not be done.                                         6d8\n
    \          If this situation were to occur the using host should\n           send
    a Telnet command to allow the server to know\n           when he may reset the
    break classes, but the\n           mechanism is awkward and this case should be
    avoided.    6d8a\n     6.  Sample Interaction:                                           7\n
    \      \"S:\" is sent from serving (WILL RCTE) host to using host.\n       \"U:\"
    is sent from using (DO RCTE) host to serving host.\n       \"T:\" is entered by
    the terminal user.\n       \"P:\" is printed on the terminal.\n       Text surrounded
    by square brackets ([]) is commentary.\n       Text surrounded by angle brackets
    (<>) is to be taken as\n       a single unit. E.g., carriage return is <cr>, and
    the\n       decimal value 27 is represented <27>.                          7a\n
    \      The following interaction shows a logon to a Tenex,\n       initiation
    of the DED editor, insertion of some text and\n       the return to the Exec level.
    \                                 7b\n         An attempt has been made to give
    some flavor of the\n         asynchrony of network I/O and the user's terminal\n
    \        input. Many other possible combinations, using the same\n         set
    of actions listed below, could be devised. The\n         actual order of events
    will depend upon network and\n         hosts' load and the user's typing speed.
    \                   7b1\n       We assume that the user's Telnet is also in an
    \"insert\n       linefeed\" mode. That is, whenever the user types carriage\n
    \      return <cr> the user Telnet sends both carriage return\n       and linefeed
    <cr><lf> (the Telnet end of line signal).\n       When space character occurs
    at the end of a line in the\n       example description it is shown explicitly
    by <sp> to\n       avoid confusion. Other uses of the space character are\n       not
    so marked to avoid destroying the readability of the\n       example.                                                       7c\n
    \      A Telnet connection has already been opened, but the\n       TENEX prompt
    has not yet been issued. The hosts first\n       discuss using the RCTE option:
    \                                7d\n         S: <IAC><WILL><RCTE>                                        7d1\n
    \        U: <IAC><DO><RCTE>                                          7d2\n         S:
    TENEX 1.31.18, TENEX EXEC 1.50.2<cr><lf>@\n            <IAC><SB><RCTE><11><1><24><IAC><SE>
    \                     7d3\n           [Print the herald and echo input text up
    to a break\n           character, but do not echo the break character.\n           Classes
    4 (Format Effectors), 5 (Non-format Effector\n           Controls and <DEL>),
    and 9 (<sp>) act as break\n           characters.]                                             7d3a\n
    \        P: TENEX 1.31.18, TENEX EXEC 1.50.2<cr><lf>@                7d4\n         T:
    LOGIN ARPA<cr>                                           7d5\n         P: LOGIN
    \                                                   7d6\n         U: LOGIN<sp>
    \                                               7d7\n         U: ARPA<cr><lf>
    \                                            7d8\n         S: <sp><IAC><SB><RCTE><0><IAC>SE>
    \                          7d9\n         P: <sp>ARPA                                                7d10\n
    \        S: <cr><lf>(PASSWORD): <IAC><SB><RCTE><7><IAC><SE>         7d11\n         P:
    <cr><lf>(PASSWORD):<sp>                                 7d12\n         T: WASHINGTON
    1000<cr>                                     7d13\n           [The password \"WASHINGTON\"
    is not echoed. Printing of\n           \"1000<cr>\" is withheld]                                 7d13a\n
    \        U: WASHINGTON<sp>                                          7d14\n         U:
    1000<cr><lf>                                            7d15\n         S: <sp><IAC><SB><RCTE><3><IAC><SE>
    \                        7d16\n         S: <cr><lf>JOB 17 ON TTY41 7-JUN-73 14:13<cr><lf>@\n
    \           <IAC><SB><RCTE><0><IAC><SE>                             7d17\n         P:
    <sp>1000                                                7d18\n           [Printing
    is slow at this point; so the account\n           number is not printed as soon
    as the server's command\n           for it is received.]                                    7d18a\n
    \        P: <cr><lf>JOB 17 ON TTY41 7-JUN-73 14:13<cr><lf>@         7d19\n         T:
    DED<esc><cr>                                            7d20\n         P: DED
    \                                                    7d21\n         U: DED<esc>
    \                                               7d22\n         S: .SAV;1<IAC><SB><RCTE><0><IAC><SE>
    \                      7d23\n         P: .SAV;1                                                  7d24\n
    \        U: <cr><lf>                                                7d25\n         S:
    <cr><lf><lf>DED    3/14/73 DRO,KRK<cr><lf>:\n            <IAC><SB><RCTE><15><1><IAC><255><IAC><SE>
    \              7d26\n           [The program is started and the DED prompt \":\"
    is\n           sent. At the command level, DED responds to every\n           character.
    The server sets the break classes to all\n           classes.]                                               7d26a\n
    \        P: <cr><lf><lf>DED    3/14/73 DRO,KRK<cr><lf>:             7d27\n         T:
    IThis is a test line.<cr>This is another test\n            line.<^Z>Q                                              7d28\n
    \          [\"I\" means Insert Text. The text follows, terminated\n           by
    a Control-Z. The \"Q\" instructs DED to Quit.]         7d28a\n         U: I                                                       7d29\n
    \        U: This is a test line.<cr><lf>                            7d30\n         S:
    I<cr><lf>*<IAC><SB><RCTE><11><0><24><IAC><SE>           7d31\n           [DED
    prompts the user, during text input, with an\n           asterisk at the beginning
    of every line. The server\n           sets the break classes to classes 4 and
    5, the format\n           effectors and the non-format effector controls.]        7d31a\n
    \        P: I<cr><lf>*This is a test line.                          7d32\n         S:
    <cr><lf>*<IAC><SB><RCTE><0><IAC><SE>                    7d33\n         P: <cr><lf>*This
    is another test line.                     7d34\n         U: This is another test
    line.<^Z>                          7d35\n         U: Q                                                       7d36\n
    \          [Note that the \"Q\" will not immediately be printed on\n           the
    terminal, since it must wait for authorization.]    7d36a\n         S: ^Z<cr><lf>:<IAC><SB><RCTE><15><1><IAC><255><IAC><SE>
    \   7d37\n           [The returned \"^Z\" is two characters, not the ASCII\n           Control-Z
    or <sub>.]                                    7d37a\n         S: Q<cr><lf>@<IAC><SB><RCTE><11><1><24><IAC><SE>
    \          7d38\n         P: Q<cr><lf>@                                              7d39\n
    \        And the user is returned to the Exec level.                7d40\n"
  title: __initial_text__
