- title: __initial_text__
  contents:
  - "      RTP Payload Format for Enhanced Variable Rate Codecs (EVRC)\n         \
    \          and Selectable Mode Vocoders (SMV)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the RTP payload format for Enhanced Variable\n\
    \   Rate Codec (EVRC) Speech and Selectable Mode Vocoder (SMV) Speech.\n   Two\
    \ sub-formats are specified for different application scenarios.  A\n   bundled/interleaved\
    \ format is included to reduce the effect of packet\n   loss on speech quality\
    \ and amortize the overhead of the RTP header\n   over more than one speech frame.\
    \  A non-bundled format is also\n   supported for conversational applications.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   5. Packet Table of Contents Entries and Codec Data Frame\
    \ Format ... 7\n   9. Implementation Issues .........................................\
    \ 12\n      9.1. Interleaving Length .......................................12\n\
    \      9.2. Validation of Received Packets ............................13\n  \
    \    9.3. Processing the Late Packets ...............................13\n   10.\
    \ Mode Request ................................................. 13\n   11. Storage\
    \ Format ............................................... 14\n   12. IANA Considerations\
    \ .......................................... 15\n      12.1. Registration of Media\
    \ Type EVRC ..........................15\n      12.2. Registration of Media Type\
    \ EVRC0 .........................16\n      12.3. Registration of Media Type SMV\
    \ ...........................17\n      12.4. Registration of Media Type SMV0 ..........................18\n\
    \   13. Mapping to SDP Parameters .................................... 19\n  \
    \ 14. Security Considerations ...................................... 20\n   15.\
    \ Adding Support of Other Frame-Based Vocoders ................. 20\n   16. Acknowledgements\
    \ ............................................. 21\n   17. References ...................................................\
    \ 21\n      17.1 Normative ................................................ 21\n\
    \      17.2 Informative .............................................. 22\n  \
    \ 18. Author's Address ............................................. 22\n   19.\
    \ Full Copyright Statement ..................................... 23\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document describes how speech compressed with EVRC [1]\
    \ or SMV\n   [2] may be formatted for use as an RTP payload type.  The format\
    \ is\n   also extensible to other codecs that generate a similar set of frame\n\
    \   types.  Two methods are provided to packetize the codec data frames\n   into\
    \ RTP packets: an interleaved/bundled format and a zero-header\n   format.  The\
    \ sender may choose the best format for each application\n   scenario, based on\
    \ network conditions, bandwidth availability, delay\n   requirements, and packet-loss\
    \ tolerance.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [3].\n"
- title: 2. Background
  contents:
  - "2. Background\n   The 3rd Generation Partnership Project 2 (3GPP2) has published\
    \ two\n   standards which define speech compression algorithms for CDMA\n   applications:\
    \ EVRC [1] and SMV [2].  EVRC is currently deployed in\n   millions of first and\
    \ second generation CDMA handsets.  SMV is the\n   preferred speech codec standard\
    \ for CDMA2000, and will be deployed in\n   third generation handsets in addition\
    \ to EVRC.  Improvements and new\n   codecs will keep emerging as technology improves,\
    \ and future handsets\n   will likely support multiple codecs.\n   The formats\
    \ of the EVRC and SMV codec frames are very similar.  Many\n   other vocoders\
    \ also share common characteristics, and have many\n   similar application scenarios.\
    \  This parallelism enables an RTP\n   payload format to be designed for EVRC\
    \ and SMV that may also support\n   other, similar vocoders with minimal additional\
    \ specification work.\n   This can simplify the protocol for transporting vocoder\
    \ data frames\n   through RTP and reduce the complexity of implementations.\n"
- title: 3. The Codecs Supported
  contents:
  - '3. The Codecs Supported

    '
- title: 3.1. EVRC
  contents:
  - "3.1. EVRC\n   The Enhanced Variable Rate Codec (EVRC) [1] compresses each 20\n\
    \   milliseconds of 8000 Hz, 16-bit sampled speech input into output\n   frames\
    \ in one of the three different sizes: Rate 1 (171 bits), Rate\n   1/2 (80 bits),\
    \ or Rate 1/8 (16 bits).  In addition, there are two\n   zero bit codec frame\
    \ types: null frames and erasure frames.  Null\n   frames are produced as a result\
    \ of the vocoder running at rate 0.\n   Null frames are zero bits long and are\
    \ normally not transmitted.\n   Erasure frames are the frames substituted by the\
    \ receiver to the\n   codec for the lost or damaged frames.  Erasure frames are\
    \ also zero\n   bits long and are normally not transmitted.\n   The codec chooses\
    \ the output frame rate based on analysis of the\n   input speech and the current\
    \ operating mode (either normal or one of\n   several reduced rate modes).  For\
    \ typical speech patterns, this\n   results in an average output of 4.2 kilobits/second\
    \ for normal mode\n   and a lower average output for reduced rate modes.\n"
- title: 3.2. SMV
  contents:
  - "3.2. SMV\n   The Selectable Mode Vocoder (SMV) [2] compresses each 20 milliseconds\n\
    \   of 8000 Hz, 16-bit sampled speech input into output frames of one of\n   the\
    \ four different sizes: Rate 1 (171 bits), Rate 1/2 (80 bits), Rate\n   1/4 (40\
    \ bits), or Rate 1/8 (16 bits).  In addition, there are two\n   zero bit codec\
    \ frame types: null frames and erasure frames.  Null\n   frames are produced as\
    \ a result of the vocoder running at rate 0.\n   Null frames are zero bits long\
    \ and are normally not transmitted.\n   Erasure frames are the frames substituted\
    \ by the receiver to the\n   codec for the lost or damaged frames.  Erasure frames\
    \ are also zero\n   bits long and are normally not transmitted.\n   The SMV codec\
    \ can operate in six modes.  Each mode may produce frames\n   of any of the rates\
    \ (full rate to 1/8 rate) for varying percentages\n   of time, based on the characteristics\
    \ of the speech samples and the\n   selected mode.  The SMV mode can change on\
    \ a\n   frame-by-frame basis.  The SMV codec does not need additional\n   information\
    \ other than the codec data frames to correctly decode the\n   data of various\
    \ modes; therefore, the mode of the encoder does not\n   need to be transmitted\
    \ with the encoded frames.\n   The SMV codec chooses the output frame rate based\
    \ on analysis of the\n   input speech and the current operating mode.  For typical\
    \ speech\n   patterns, this results in an average output of 4.2 kilobits/second\n\
    \   for Mode 0 in two way conversation (approximately 50% active speech\n   time\
    \ and 50% in eighth rate while listening) and lower for other\n   reduced rate\
    \ modes.  SMV is more bandwidth efficient than EVRC.  EVRC\n   is equivalent in\
    \ performance to SMV mode 1.\n"
- title: 3.3. Other Frame-Based Vocoders
  contents:
  - "3.3. Other Frame-Based Vocoders\n   Other frame-based vocoders can be carried\
    \ in the packet format\n   defined in this document, as long as they possess the\
    \ following\n   properties:\n      o The codec is frame-based;\n      o blank\
    \ and erasure frames are supported;\n      o the total number of rates is less\
    \ than 17;\n      o the maximum full rate frame can be transported in a single\
    \ RTP\n        packet using this specific format.\n   Vocoders with the characteristics\
    \ listed above can be transported\n   using the packet format specified in this\
    \ document with some\n   additional specification work; the pieces that must be\
    \ defined are\n   listed in Section 15.\n"
- title: 4. RTP/Vocoder Packet Format
  contents:
  - "4. RTP/Vocoder Packet Format\n   The vocoder speech data may be transmitted in\
    \ either of the two RTP\n   packet formats specified in the following two subsections,\
    \ as\n   appropriate for the application scenario.  In the packet format\n   diagrams\
    \ shown in this document, bit 0 is the most significant bit.\n"
- title: 4.1. Interleaved/Bundled Packet Format
  contents:
  - "4.1. Interleaved/Bundled Packet Format\n   This format is used to send one or\
    \ more vocoder frames per packet.\n   Interleaving or bundling MAY be used.  The\
    \ RTP packet for this format\n   is as follows:\n    0                   1   \
    \                2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      RTP Header [4]                           |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\
    \   |R|R| LLL | NNN | MMM |  Count  |  TOC  |  ...  |  TOC  |padding|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        one or more codec data frames, one per TOC entry       |\n   |  \
    \                           ....                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The RTP header has the expected values as described in the RTP\n   specification\
    \ [4].  The RTP timestamp is in 1/8000 of a second units\n   for EVRC and SMV.\
    \  For any other vocoders that use this packet\n   format, the timestamp unit\
    \ needs to be defined explicitly.  The M bit\n   should be set as specified in\
    \ the applicable RTP profile, for\n   example, RFC 3551 [5].  Note that RFC 3551\
    \ [5] specifies that if the\n   sender does not suppress silence, the M bit will\
    \ always be zero.\n   When multiple codec data frames are present in a single\
    \ RTP packet,\n   the timestamp is that of the oldest data represented in the\
    \ RTP\n   packet.  The assignment of an RTP payload type for this packet format\n\
    \   is outside the scope of this document; it is specified by the RTP\n   profile\
    \ under which this payload format is used.\n   The first octet of a Interleaved/Bundled\
    \ format packet is the\n   Interleave Octet.  The second octet contains the Mode\
    \ Request and\n   Frame Count fields.  The Table of Contents (ToC) field then\
    \ follows.\n   The fields are specified as follows:\n   Reserved (RR): 2 bits\n\
    \      Reserved bits.  MUST be set to zero by sender, SHOULD be ignored\n    \
    \  by receiver.\n   Interleave Length (LLL): 3 bits\n      Indicates the length\
    \ of interleave; a value of 0 indicates\n      bundling, a special case of interleaving.\
    \  See Section 6 and\n      Section 7 for more detailed discussion.\n   Interleave\
    \ Index (NNN): 3 bits\n      Indicates the index within an interleave group. \
    \ MUST have a value\n      less than or equal to the value of LLL.  Values of\
    \ NNN greater\n      than the value of LLL are invalid.  Packet with invalid NNN\
    \ values\n      SHOULD be ignored by the receiver.\n   Mode Request (MMM): 3 bits\n\
    \      The Mode Request field is used to signal Mode Request information.\n  \
    \    See Section 10 for details.\n   Frame Count (Count): 5 bits\n      The number\
    \ of ToC fields (and vocoder frames) present in the\n      packet is the value\
    \ of the frame count field plus one.  A value of\n      zero indicates that the\
    \ packet contains one ToC field, while a\n      value of 31 indicates that the\
    \ packet contains 32 ToC fields.\n   Padding (padding): 0 or 4 bits\n      This\
    \ padding ensures that codec data frames start on an octet\n      boundary.  When\
    \ the frame count is odd, the sender MUST add 4 bits\n      of padding following\
    \ the last TOC.  When the frame count is even,\n      the sender MUST NOT add\
    \ padding bits.  If padding is present, the\n      padding bits MUST be set to\
    \ zero by sender, and SHOULD be ignored\n      by receiver.\n   The Table of Contents\
    \ field (ToC) provides information on the codec\n   data frame(s) in the packet.\
    \  There is one ToC entry for each codec\n   data frame.  The detailed formats\
    \ of the ToC field and codec data\n   frames are specified in Section 5.\n   Multiple\
    \ data frames may be included within a Interleaved/Bundled\n   packet using interleaving\
    \ or bundling as described in Section 6 and\n   Section 7.\n"
- title: 4.2. Header-Free Packet Format
  contents:
  - "4.2. Header-Free Packet Format\n   The Header-Free Packet Format is designed\
    \ for maximum bandwidth\n   efficiency and low latency.  Only one codec data frame\
    \ can be sent in\n   each Header-Free format packet.  None of the payload header\
    \ fields\n   (LLL, NNN, MMM, Count) nor ToC entries are present.  The codec rate\n\
    \   for the data frame can be determined from the length of the codec\n   data\
    \ frame, since there is only one codec data frame in each\n   Header-Free packet.\n\
    \   Use of the RTP header fields for Header-Free RTP/Vocoder Packet\n   Format\
    \ is the same as described in Section 4.1 for\n   Interleaved/Bundled RTP/Vocoder\
    \ Packet Format.  The detailed format\n   of the codec data frame is specified\
    \ in Section 5.\n    0                   1                   2               \
    \    3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \                    RTP Header [4]                           |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\
    \   |                                                               |\n   +  \
    \        ONLY one codec data frame            +-+-+-+-+-+-+-+-+\n   |        \
    \                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 4.3. Determining the Format of Packets
  contents:
  - "4.3. Determining the Format of Packets\n   All receivers SHOULD be able to process\
    \ both packet formats.  The\n   sender MAY choose to use one or both packet formats.\n\
    \   A receiver MUST have prior knowledge of the packet format to\n   correctly\
    \ decode the RTP packets.  When packets of both formats are\n   used within the\
    \ same session, different RTP payload type values MUST\n   be used for each format\
    \ to distinguish the packet formats.  The\n   association of payload type number\
    \ with the packet format is done\n   out-of-band, for example by SDP during the\
    \ setup of a session.\n"
- title: 5. Packet Table of Contents Entries and Codec Data Frame Format
  contents:
  - '5. Packet Table of Contents Entries and Codec Data Frame Format

    '
- title: 5.1. Packet Table of Contents entries
  contents:
  - "5.1. Packet Table of Contents entries\n   Each codec data frame in a Interleaved/Bundled\
    \ packet has a\n   corresponding Table of Contents (ToC) entry.  The ToC entry\
    \ indicates\n   the rate of the codec frame.  (Header-Free packets MUST NOT have\
    \ a\n   ToC field.)\n   Each ToC entry is occupies four bits.  The format of the\
    \ bits is\n   indicated below:\n       0 1 2 3\n      +-+-+-+-+\n      |fr type|\n\
    \      +-+-+-+-+\n   Frame Type: 4 bits\n      The frame type indicates the type\
    \ of the corresponding codec data\n      frame in the RTP packet.\n   For EVRC\
    \ and SMV codecs, the frame type values and size of the\n   associated codec data\
    \ frame are described in the table below:\n   Value   Rate      Total codec data\
    \ frame size (in octets)\n   ---------------------------------------------------------\n\
    \     0     Blank      0    (0 bit)\n     1     1/8        2    (16 bits)\n  \
    \   2     1/4        5    (40 bits; not valid for EVRC)\n     3     1/2      \
    \ 10    (80 bits)\n     4     1         22    (171 bits; 5 padded at end with\
    \ zeros)\n     5     Erasure    0    (SHOULD NOT be transmitted by sender)\n \
    \  All values not listed in the above table MUST be considered reserved.\n   A\
    \ ToC entry with a reserved Frame Type value SHOULD be considered\n   invalid.\
    \  Note that the EVRC codec does not have 1/4 rate frames,\n   thus frame type\
    \ value 2 MUST be considered a reserved value when the\n   EVRC codec is in use.\n\
    \   Other vocoders that use this packet format need to specify their own\n   table\
    \ of frame types and corresponding codec data frames.\n"
- title: 5.2. Codec Data Frames
  contents:
  - "5.2. Codec Data Frames\n   The output of the vocoder MUST be converted into codec\
    \ data frames\n   for inclusion in the RTP payload.  The conversions for EVRC\
    \ and SMV\n   codecs are specified below.  (Note: Because the EVRC codec does\
    \ not\n   have Rate 1/4 frames, the specifications of 1/4 frames does not apply\n\
    \   to EVRC codec data frames).  Other vocoders that use this packet\n   format\
    \ need to specify how to convert vocoder output data into\n   frames.\n   The\
    \ codec output data bits as numbered in EVRC and SMV are packed\n   into octets.\
    \  The lowest numbered bit (bit 1 for Rate 1, Rate 1/2,\n   Rate 1/4 and Rate\
    \ 1/8) is placed in the most significant bit\n   (internet bit 0) of octet 1 of\
    \ the codec data frame, the second\n   lowest bit is placed in the second most\
    \ significant bit of the first\n   octet, the third lowest in the third most significant\
    \ bit of the\n   first octet, and so on.  This continues until all of the bits\
    \ have\n   been placed in the codec data frame.\n   The remaining unused bits\
    \ of the last octet of the codec data frame\n   MUST be set to zero.  Note that\
    \ in EVRC and SMV this is only\n   applicable to Rate 1 frames (171 bits) as the\
    \ Rate 1/2 (80 bits),\n   Rate 1/4 (40 bits, SMV only) and Rate 1/8 frames (16\
    \ bits) fit\n   exactly into a whole number of octets.\n   Following is a detailed\
    \ listing showing a Rate 1 EVRC/SMV codec\n   output frame converted into a codec\
    \ data frame:\n   The codec data frame for a EVRC/SMV codec Rate 1 frame is 22\
    \ octets\n   long.  Bits 1 through 171 from the EVRC/SMV codec Rate 1 frame are\n\
    \   placed as indicated, with bits marked with \"Z\" set to zero.  EVRC/SMV\n\
    \   codec Rate 1/8, Rate 1/4 and Rate 1/2 frames are converted similarly,\n  \
    \ but do not require zero padding because they align on octet\n   boundaries.\n\
    \                        Rate 1 codec data frame\n    0                   1  \
    \                 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|\n   |0|0|0|0|0|0|0|0|0|1|1|1|1|1|1|1|1|1|1|2|2|2|2|2|2|2|2|2|2|3|3|3|\n\
    \   |1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                                                               :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1| | | | | |\n   |4|4|4|4|4|5|5|5|5|5|5|5|5|5|5|6|6|6|6|6|6|6|6|6|6|7|7|Z|Z|Z|Z|Z|\n\
    \   |5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1| | | | | |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 6. Interleaving Codec Data Frames
  contents:
  - "6. Interleaving Codec Data Frames\n   As indicated in Section 4.1, more than\
    \ one codec data frame MAY be\n   included in a single Interleaved/Bundled packet\
    \ by a sender.  This is\n   accomplished by interleaving or bundling.\n   Bundling\
    \ is used to spread the transmission overhead of the RTP and\n   payload header\
    \ over multiple vocoder frames.  Interleaving\n   additionally reduces the listener's\
    \ perception of data loss by\n   spreading such loss over non-consecutive vocoder\
    \ frames.  EVRC, SMV,\n   and similar vocoders are able to compensate for an occasional\
    \ lost\n   frame, but speech quality degrades exponentially with consecutive\n\
    \   frame loss.\n   Bundling is signaled by setting the LLL field to zero and\
    \ the Count\n   field to greater than zero.  Interleaving is indicated by setting\
    \ the\n   LLL field to a value greater than zero.\n   The discussions on general\
    \ interleaving apply to the bundling (which\n   can be viewed as a reduced case\
    \ of interleaving) with reduced\n   complexity.  The bundling case is discussed\
    \ in detail in Section 7.\n   Senders MAY support interleaving and/or bundling.\
    \  All receivers that\n   support Interleave/Bundling packet format MUST support\
    \ both\n   interleaving and bundling.\n   Given a time-ordered sequence of output\
    \ frames from the codec\n   numbered 0..n, a bundling value B (the value in the\
    \ Count field plus\n   one), and an interleave length L where n = B * (L+1) -\
    \ 1, the output\n   frames are placed into RTP packets as follows (the values\
    \ of the\n   fields LLL and NNN are indicated for each RTP packet):\n   First\
    \ RTP Packet in Interleave group:\n      LLL=L, NNN=0\n      Frame 0, Frame L+1,\
    \ Frame 2(L+1), Frame 3(L+1), ... for a total of\n      B frames\n   Second RTP\
    \ Packet in Interleave group:\n      LLL=L, NNN=1\n      Frame 1, Frame 1+L+1,\
    \ Frame 1+2(L+1), Frame 1+3(L+1), ... for a\n      total of B frames\n   This\
    \ continues to the last RTP packet in the interleave group:\n   L+1 RTP Packet\
    \ in Interleave group:\n      LLL=L, NNN=L\n      Frame L, Frame L+L+1, Frame\
    \ L+2(L+1), Frame L+3(L+1), ... for a\n      total of B frames\n   Within each\
    \ interleave group, the RTP packets making up the\n   interleave group MUST be\
    \ transmitted in value-increasing order of the\n   NNN field.  While this does\
    \ not guarantee reduced end-to-end delay on\n   the receiving end, when packets\
    \ are delivered in order by the\n   underlying transport, delay will be reduced\
    \ to the minimum possible.\n   Receivers MAY signal the maximum number of codec\
    \ data frames (i.e.,\n   the maximum acceptable bundling value B) they can handle\
    \ in a single\n   RTP packet using the OPTIONAL maxptime RTP mode parameter identified\n\
    \   in Section 12.\n   Receivers MAY signal the maximum interleave length (i.e.,\
    \ the maximum\n   acceptable LLL value in the Interleaving Octet) they will accept\n\
    \   using the OPTIONAL maxinterleave RTP mode parameter identified in\n   Section\
    \ 12.\n   The parameters maxptime and maxinterleave are exchanged at the\n   initial\
    \ setup of the session.  In one-to-one sessions, the sender\n   MUST respect these\
    \ values set be the receiver, and MUST NOT\n   interleave/bundle more packets\
    \ than what the receiver signals that it\n   can handle.  This ensures that the\
    \ receiver can allocate a known\n   amount of buffer space that will be sufficient\
    \ for all\n   interleaving/bundling used in that session.  During the session,\
    \ the\n   sender may decrease the bundling value or interleaving length (so\n\
    \   that less buffer space is required at the receiver), but never exceed\n  \
    \ the maximum value set by the receiver.  This prevents the situation\n   where\
    \ a receiver needs to allocate more buffer space in the middle of\n   a session\
    \ but is unable to do so.\n   Additionally, senders have the following restrictions:\n\
    \   o  MUST NOT bundle more codec data frames in a single RTP packet than\n  \
    \    indicated by maxptime (see Section 12) if it is signaled.\n   o  SHOULD NOT\
    \ bundle more codec data frames in a single RTP packet\n      than will fit in\
    \ the MTU of the underlying network.\n   o  Once beginning a session with a given\
    \ maximum interleaving value\n      set by maxinterleave in Section 12, MUST NOT\
    \ increase the\n      interleaving value (LLL) to exceed the maximum interleaving\
    \ value\n      that is signaled.\n   o  MAY change the interleaving value, but\
    \ MUST do so only between\n      interleave groups.\n   o  Silence suppression\
    \ MUST only be used between interleave groups.\n      A ToC with Frame Type 0\
    \ (Blank Frame, Section 5.1) MUST be used\n      within interleaving groups if\
    \ the codec outputs a blank frame.\n      The M bit in the RTP header is not set\
    \ for these blank frames, as\n      the stream is continuous in time.  Because\
    \ there is only one time\n      stamp for each RTP packet, silence suppression\
    \ used within an\n      interleave group would cause ambiguities when reconstructing\
    \ the\n      speech at the receiver side, and thus is prohibited.\n   Given an\
    \ RTP packet with sequence number S, interleave length (field\n   LLL) L, interleave\
    \ index value (field NNN) N, and bundling value B,\n   the interleave group consists\
    \ of this RTP packet and other RTP\n   packets with sequence numbers from S-N\
    \ mod 65536 to S-N+L mod 65536\n   inclusive.  In other words, the interleave\
    \ group always consists of\n   L+1 RTP packets with sequential sequence numbers.\
    \  The bundling value\n   for all RTP packets in an interleave group MUST be the\
    \ same.\n   The receiver determines the expected bundling value for all RTP\n\
    \   packets in an interleave group by the number of codec data frames\n   bundled\
    \ in the first RTP packet of the interleave group received.\n   Note that this\
    \ may not be the first RTP packet of the interleave\n   group if packets are delivered\
    \ out of order by the underlying\n   transport.\n"
- title: 7. Bundling Codec Data Frames
  contents:
  - "7. Bundling Codec Data Frames\n   As discussed in Section 6, the bundling of\
    \ codec data frames is a\n   special reduced case of interleaving with LLL value\
    \ in the Interleave\n   Octet set to 0.\n   Bundling codec data frames indicates\
    \ that multiple data frames are\n   included consecutively in a packet, because\
    \ the interleaving length\n   (LLL) is 0.  The interleaving group is thus reduced\
    \ to a single RTP\n   packet, and the reconstruction of the codec data frames\
    \ from RTP\n   packets becomes a much simpler process.\n   Furthermore, the additional\
    \ restrictions on senders are reduced to:\n   o  MUST NOT bundle more codec data\
    \ frames in a single RTP packet than\n      indicated by maxptime (see Section\
    \ 12) if it is signaled.\n   o  SHOULD NOT bundle more codec data frames in a\
    \ single RTP packet\n      than will fit in the MTU of the underlying network.\n"
- title: 8. Handling Missing Codec Data Frames
  contents:
  - "8. Handling Missing Codec Data Frames\n   The vocoders covered by this payload\
    \ format support erasure frames as\n   an indication when frames are not available.\
    \  The erasure frames are\n   normally used internally by a receiver to advance\
    \ the state of the\n   voice decoder by exactly one frame time for each missing\
    \ frame.\n   Using the information from packet sequence number, time stamp, and\n\
    \   the M bit, the receiver can detect missing codec data frames from RTP\n  \
    \ packet loss and/or silence suppression, and generate corresponding\n   erasure\
    \ frames.  Erasure frames MUST also be used in storage format\n   to record missing\
    \ frames.\n"
- title: 9. Implementation Issues
  contents:
  - '9. Implementation Issues

    '
- title: 9.1. Interleaving Length
  contents:
  - "9.1. Interleaving Length\n   The vocoder interpolates the missing speech content\
    \ when given an\n   erasure frame.  However, the best quality is perceived by\
    \ the\n   listener when erasure frames are not consecutive.  This makes\n   interleaving\
    \ desirable as it increases speech quality when packet\n   loss occurs.\n   On\
    \ the other hand, interleaving can greatly increase the end-to-end\n   delay.\
    \  Where an interactive session is desired, either\n   Interleaved/Bundled packet\
    \ format with interleaving length (field\n   LLL) 0 or Header-Free packet format\
    \ is RECOMMENDED.\n   When end-to-end delay is not a primary concern, an interleaving\n\
    \   length (field LLL) of 4 or 5 is RECOMMENDED as it offers a reasonable\n  \
    \ compromise between robustness and latency.\n"
- title: 9.2. Validation of Received Packets
  contents:
  - "9.2. Validation of Received Packets\n   When receiving an RTP packet, the receiver\
    \ SHOULD check the validity\n   of the ToC fields and match the length of the\
    \ packet with what is\n   indicated by the ToC fields.  If any invalidity or mismatch\
    \ is\n   detected, it is RECOMMENDED to discard the received packet to avoid\n\
    \   potential severe degradation of the speech quality.  The discarded\n   packet\
    \ is treated following the same procedure as a lost packet, and\n   the discarded\
    \ data will be replaced with erasure frames.\n   On receipt of an RTP packet with\
    \ an invalid value of the LLL or NNN\n   fields, the RTP packet SHOULD be treated\
    \ as lost by the receiver for\n   the purpose of generating erasure frames as\
    \ described in Section 8.\n   On receipt of an RTP packet in an interleave group\
    \ with other than\n   the expected frame count value, the receiver MAY discard\
    \ codec data\n   frames off the end of the RTP packet or add erasure codec data\
    \ frames\n   to the end of the packet in order to manufacture a substitute packet\n\
    \   with the expected bundling value.  The receiver MAY instead choose to\n  \
    \ discard the whole interleave group.\n"
- title: 9.3. Processing the Late Packets
  contents:
  - "9.3. Processing the Late Packets\n   Assume that the receiver has begun playing\
    \ frames from an interleave\n   group.  The time has come to play frame x from\
    \ packet n of the\n   interleave group.  Further assume that packet n of the interleave\n\
    \   group has not been received.  As described in Section 8, an erasure\n   frame\
    \ will be sent to the receiving vocoder.\n   Now, assume that packet n of the\
    \ interleave group arrives before\n   frame x+1 of that packet is needed.  Receivers\
    \ should use frame x+1\n   of the newly received packet n rather than substituting\
    \ an erasure\n   frame.  In other words, just because packet n was not available\
    \ the\n   first time it was needed to reconstruct the interleaved speech, the\n\
    \   receiver should not assume it is not available when it is\n   subsequently\
    \ needed for interleaved speech reconstruction.\n"
- title: 10.  Mode Request
  contents:
  - "10.  Mode Request\n   The Mode Request signal requests a particular encoding\
    \ mode for the\n   speech encoding in the reverse direction.  All implementations\
    \ are\n   RECOMMENDED to honor the Mode Request signal.  The Mode Request\n  \
    \ signal SHOULD only be used in one-to-one sessions.  In multi-party\n   sessions,\
    \ any received Mode Request signals SHOULD be ignored.\n   In addition, the Mode\
    \ Request signal MAY also be sent through non-RTP\n   means, which is out of the\
    \ scope of this specification.\n   The three-bit Mode Request field is used to\
    \ signal the receiver to\n   set a particular encoding mode to its audio encoder.\
    \  If the Mode\n   Request field is set to a valid value in RTP packets from node\
    \ A to\n   node B, it is a request for node B to change to the requested\n   encoding\
    \ mode for its audio encoder and therefore the bit rate of the\n   RTP stream\
    \ from node B to node A.  Once a node sets this field to a\n   value, it SHOULD\
    \ continue to set the field to the same value in\n   subsequent packets until\
    \ the requested mode is different.  This\n   design helps to eliminate the scenario\
    \ of getting the codec stuck in\n   an unintended state if one of the packets\
    \ that carries the Mode\n   Request is lost.  An otherwise silent node MAY send\
    \ an RTP packet\n   containing a blank frame in order to send a Mode Request.\n\
    \   Each codec type using this format SHOULD define its own\n   interpretation\
    \ of the Mode Request field.  Codecs SHOULD follow the\n   convention that higher\
    \ values of the three-bit field correspond to an\n   equal or lower average output\
    \ bit rate.\n   For the EVRC codec, the Mode Request field MUST be interpreted\n\
    \   according to Tables 2.2.1.2-1 and 2.2.1.2-2 of the EVRC codec\n   specifications\
    \ [1].\n   For SMV codec, the Mode Request field MUST be interpreted according\n\
    \   to Table 2.2-2 of the SMV codec specifications [2].\n"
- title: 11.  Storage Format
  contents:
  - "11.  Storage Format\n   The storage format is used for storing speech frames,\
    \ e.g., as a file\n   or e-mail attachment.\n   The file begins with a magic number\
    \ to identify the vocoder that is\n   used.  The magic number for EVRC corresponds\
    \ to the ASCII character\n   string \"#!EVRC\\n\", i.e., \"0x23 0x21 0x45 0x56\
    \ 0x52 0x43 0x0A\".  The\n   magic number for SMV corresponds to the ASCII character\
    \ string\n   \"#!SMV\\n\", i.e., \"0x23 0x21 0x53 0x4d 0x56 0x0a\".\n   The codec\
    \ data frames are stored in consecutive order, with a single\n   TOC entry field,\
    \ extended to one octet, prefixing each codec data\n   frame.  The ToC field is\
    \ extended to one octet by setting the four\n   most significant bits of the octet\
    \ to zero.  For example, a ToC value\n   of 4 (a full-rate frame) is stored as\
    \ 0x04.\n   Speech frames lost in transmission and non-received frames MUST be\n\
    \   stored as erasure frames (frame type 5, see definition in Section\n   5.1)\
    \ to maintain synchronization with the original media.\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   Four new MIME sub-types as described in this section\
    \ have been\n   registered by the IANA.\n   The MIME-names for the EVRC and SMV\
    \ codec are allocated from the IETF\n   tree since all the vocoders covered are\
    \ expected to be widely used\n   for Voice-over-IP applications.\n"
- title: 12.1.  Registration of Media Type EVRC
  contents:
  - "12.1.  Registration of Media Type EVRC\n   Media Type Name:           audio\n\
    \   Media Subtype Name:        EVRC\n   Required Parameter:        none\n   Optional\
    \ parameters:\n      The following parameters apply to RTP transfer only.\n  \
    \    ptime:    Defined as usual for RTP audio (see RFC 2327).\n      maxptime:\
    \ The maximum amount of media which can be encapsulated in\n         each packet,\
    \ expressed as time in milliseconds.  The time SHALL\n         be calculated as\
    \ the sum of the time the media present in the\n         packet represents.  The\
    \ time SHOULD be a multiple of the\n         duration of a single codec data frame\
    \ (20 msec).  If not\n         signaled, the default maxptime value SHALL be 200\
    \ milliseconds.\n      maxinterleave: Maximum number for interleaving length (field\
    \ LLL\n         in the Interleaving Octet).  The interleaving lengths used in\n\
    \         the entire session MUST NOT exceed this maximum value.  If not\n   \
    \      signaled, the maxinterleave length SHALL be 5.\n   Encoding considerations:\n\
    \      This type is defined for transfer of EVRC-encoded data via RTP\n      using\
    \ the Interleaved/Bundled packet format specified in Sections\n      4.1, 6, and\
    \ 7 of RFC 3558.  It is also defined for other transfer\n      methods using the\
    \ storage format specified in Section 11 of RFC\n      3558.\n   Security considerations:\n\
    \      See Section 14 \"Security Considerations\" of RFC 3558.\n   Public specification:\n\
    \      The EVRC vocoder is specified in 3GPP2 C.S0014.  Transfer methods\n   \
    \   are specified in RFC 3558.\n   Additional information:\n      The following\
    \ information applies for storage format only.\n      Magic number: #!EVRC\\n\
    \ (see Section 11 of RFC 3558)\n      File extensions: evc, EVC\n      Macintosh\
    \ file type code: none\n      Object identifier or OID: none\n   Intended usage:\n\
    \      COMMON.  It is expected that many VoIP applications (as well as\n     \
    \ mobile applications) will use this type.\n   Person & email address to contact\
    \ for further information:\n      Adam Li\n      adamli@icsl.ucla.edu\n   Author/Change\
    \ controller:\n      Adam Li\n      adamli@icsl.ucla.edu\n      IETF Audio/Video\
    \ Transport Working Group\n"
- title: 12.2. Registration of Media Type EVRC0
  contents:
  - "12.2. Registration of Media Type EVRC0\n   Media Type Name:           audio\n\
    \   Media Subtype Name:        EVRC0\n   Required Parameters:       none\n   Optional\
    \ parameters:       none\n   Encoding considerations:   none\n      This type\
    \ is only defined for transfer of EVRC-encoded data via\n      RTP using the Header-Free\
    \ packet format specified in Section 4.2\n      of RFC 3558.\n   Security considerations:\n\
    \      See Section 14 \"Security Considerations\" of RFC 3558.\n   Public specification:\n\
    \      The EVRC vocoder is specified in 3GPP2 C.S0014.  Transfer methods\n   \
    \   are specified in RFC 3558.\n   Additional information:    none\n   Intended\
    \ usage:\n      COMMON.  It is expected that many VoIP applications (as well as\n\
    \      mobile applications) will use this type.\n   Person & email address to\
    \ contact for further information:\n      Adam Li\n      adamli@icsl.ucla.edu\n\
    \   Author/Change controller:\n      Adam Li\n      adamli@icsl.ucla.edu\n   \
    \   IETF Audio/Video Transport Working Group\n"
- title: 12.3. Registration of Media Type SMV
  contents:
  - "12.3. Registration of Media Type SMV\n   Media Type Name:           audio\n \
    \  Media Subtype Name:        SMV\n   Required Parameter:        none\n   Optional\
    \ parameters:\n   The following parameters apply to RTP transfer only.\n     \
    \ ptime:    Defined as usual for RTP audio (see RFC 2327).\n      maxptime: The\
    \ maximum amount of media which can be encapsulated\n         in each packet,\
    \ expressed as time in milliseconds.  The time\n         SHALL be calculated as\
    \ the sum of the time the media present\n         in the packet represents.  The\
    \ time SHOULD be a multiple of the\n         duration of a single codec data frame\
    \ (20 msec).  If not\n         signaled, the default maxptime value SHALL be 200\n\
    \         milliseconds.\n      maxinterleave: Maximum number for interleaving\
    \ length (field LLL\n         in the Interleaving Octet).  The interleaving lengths\
    \ used in\n         the entire session MUST NOT exceed this maximum value.  If\
    \ not\n         signaled, the maxinterleave length SHALL be 5.\n   Encoding considerations:\n\
    \      This type is defined for transfer of SMV-encoded data via RTP\n      using\
    \ the Interleaved/Bundled packet format specified in Section\n      4.1, 6, and\
    \ 7 of RFC 3558.  It is also defined for other transfer\n      methods using the\
    \ storage format specified in Section 11 of RFC\n      3558.\n   Security considerations:\n\
    \      See Section 14 \"Security Considerations\" of RFC 3558.\n   Public specification:\n\
    \      The SMV vocoder is specified in 3GPP2 C.S0030-0 v2.0.\n      Transfer methods\
    \ are specified in RFC 3558.\n   Additional information:\n      The following\
    \ information applies to storage format only.\n      Magic number: #!SMV\\n (see\
    \ Section 11 of RFC 3558)\n      File extensions: smv, SMV\n      Macintosh file\
    \ type code: none\n      Object identifier or OID: none\n   Intended usage:\n\
    \      COMMON.  It is expected that many VoIP applications (as well as\n     \
    \ mobile applications) will use this type.\n   Person & email address to contact\
    \ for further information:\n      Adam Li\n      adamli@icsl.ucla.edu\n   Author/Change\
    \ controller:\n      Adam Li\n      adamli@icsl.ucla.edu\n      IETF Audio/Video\
    \ Transport Working Group\n"
- title: 12.4. Registration of Media Type SMV0
  contents:
  - "12.4. Registration of Media Type SMV0\n   Media Type Name:           audio\n\
    \   Media Subtype Name:        SMV0\n   Required Parameter:        none\n   Optional\
    \ parameters:       none\n   Encoding considerations:   none\n      This type\
    \ is only defined for transfer of SMV-encoded data via RTP\n      using the Header-Free\
    \ packet format specified in Section 4.2 of\n      RFC 3558.\n   Security considerations:\n\
    \      See Section 14 \"Security Considerations\" of RFC 3558.\n   Public specification:\n\
    \      The SMV vocoder is specified in 3GPP2 C.S0030-0 v2.0.  Transfer\n     \
    \ methods are specified in RFC 3558.\n   Additional information:    none\n   Intended\
    \ usage:\n      COMMON.  It is expected that many VoIP applications (as well as\n\
    \      mobile applications) will use this type.\n   Person & email address to\
    \ contact for further information:\n      Adam Li\n      adamli@icsl.ucla.edu\n\
    \   Author/Change controller:\n      Adam Li\n      adamli@icsl.ucla.edu\n   \
    \   IETF Audio/Video Transport Working Group\n"
- title: 13.  Mapping to SDP Parameters
  contents:
  - "13.  Mapping to SDP Parameters\n   Please note that this section applies to the\
    \ RTP transfer only.\n   The information carried in the MIME media type specification\
    \ has a\n   specific mapping to fields in the Session Description Protocol (SDP)\n\
    \   [6], which is commonly used to describe RTP sessions.  When SDP is\n   used\
    \ to specify sessions employing the EVRC or EMV codec, the mapping\n   is as follows:\n\
    \      o  The MIME type (\"audio\") goes in SDP \"m=\" as the media name.\n  \
    \    o  The MIME subtype (payload format name) goes in SDP \"a=rtpmap\"\n    \
    \     as the encoding name.\n      o  The parameters \"ptime\" and \"maxptime\"\
    \ go in the SDP \"a=ptime\"\n         and \"a=maxptime\" attributes, respectively.\n\
    \      o  The parameter \"maxinterleave\" goes in the SDP \"a=fmtp\"\n       \
    \  attribute by copying it directly from the MIME media type\n         string\
    \ as \"maxinterleave=value\".\n   Some examples of SDP session descriptions for\
    \ EVRC and SMV encodings\n   follow below.\n   Example of usage of EVRC:\n   \
    \   m=audio 49120 RTP/AVP 97\n      a=rtpmap:97 EVRC/8000\n      a=fmtp:97 maxinterleave=2\n\
    \      a=maxptime:80\n   Example of usage of SMV\n      m=audio 49122 RTP/AVP\
    \ 99\n      a=rtpmap:99 SMV0/8000\n      a=fmtp:99\n   Note that the payload format\
    \ (encoding) names are commonly shown in\n   upper case.  MIME subtypes are commonly\
    \ shown in lower case.  These\n   names are case-insensitive in both places. \
    \ Similarly, parameter\n   names are case-insensitive both in MIME types and in\
    \ the default\n   mapping to the SDP a=fmtp attribute.\n"
- title: 14.  Security Considerations
  contents:
  - "14.  Security Considerations\n   RTP packets using the payload format defined\
    \ in this specification\n   are subject to the security considerations discussed\
    \ in the RTP\n   specification [4], and any appropriate profile (for example [5]).\n\
    \   This implies that confidentiality of the media streams is achieved by\n  \
    \ encryption.  Because the data compression used with this payload\n   format\
    \ is applied end-to-end, encryption may be performed after\n   compression so\
    \ there is no conflict between the two operations.\n   A potential denial-of-service\
    \ threat exists for data encoding using\n   compression techniques that have non-uniform\
    \ receiver-end\n   computational load.  The attacker can inject pathological datagrams\n\
    \   into the stream which are complex to decode and cause the receiver to\n  \
    \ become overloaded.  However, the encodings covered in this document\n   do not\
    \ exhibit any significant non-uniformity.\n   As with any IP-based protocol, in\
    \ some circumstances, a receiver may\n   be overloaded simply by the receipt of\
    \ too many packets, either\n   desired or undesired.  Network-layer authentication\
    \ may be used to\n   discard packets from undesired sources, but the processing\
    \ cost of\n   the authentication itself may be too high.  In a multicast\n   environment,\
    \ pruning of specific sources may be implemented in future\n   versions of IGMP\
    \ [7] and in multicast routing protocols to allow a\n   receiver to select which\
    \ sources are allowed to reach it.\n   Interleaving may affect encryption.  Depending\
    \ on the used encryption\n   scheme there may be restrictions on, for example,\
    \ the time when keys\n   can be changed.  Specifically, the key change may need\
    \ to occur at\n   the boundary between interleave groups.\n"
- title: 15.  Adding Support of Other Frame-Based Vocoders
  contents:
  - "15.  Adding Support of Other Frame-Based Vocoders\n   As described above, the\
    \ RTP packet format defined in this document is\n   very flexible and designed\
    \ to be usable by other frame-based\n   vocoders.\n   Additional vocoders using\
    \ this format MUST have properties as\n   described in Section 3.3.\n   For an\
    \ eligible vocoder to use the payload format mechanisms defined\n   in this document,\
    \ a new RTP payload format document needs to be\n   published as a standards track\
    \ RFC.  That document can simply refer\n   to this document and then specify the\
    \ following parameters:\n      o Define the unit used for RTP time stamp;\n  \
    \    o Define the meaning of the Mode Request bits;\n      o Define corresponding\
    \ codec data frame type values for ToC;\n      o Define the conversion procedure\
    \ for vocoders output data frame;\n      o Define a magic number for storage format,\
    \ and complete the\n        corresponding MIME registration.\n"
- title: 16.  Acknowledgements
  contents:
  - "16.  Acknowledgements\n   The following authors have made significant contributions\
    \ to this\n   document: Adam H. Li, John D. Villasenor, Dong-Seek Park, Jeong-Hoon\n\
    \   Park, Keith Miller, S. Craig Greer, David Leon, Nikolai Leung,\n   Marcello\
    \ Lioy, Kyle J. McKay, Magdalena L. Espelien, Randall Gellens,\n   Tom Hiller,\
    \ Peter J. McCann, Stinson S. Mathai, Michael D. Turner,\n   Ajay Rajkumar, Dan\
    \ Gal, Magnus Westerlund, Lars-Erik Jonsson, Greg\n   Sherwood, and Thomas Zeng.\n"
- title: 17.  References
  contents:
  - '17.  References

    '
- title: 17.1 Normative
  contents:
  - "17.1 Normative\n   [1]  3GPP2 C.S0014, \"Enhanced Variable Rate Codec, Speech\
    \ Service\n        Option 3 for Wideband Spread Spectrum Digital Systems\", January\n\
    \        1997.\n   [2]  3GPP2 C.S0030-0 v2.0, \"Selectable Mode Vocoder, Service\
    \ Option\n        for Wideband Spread Spectrum Communication Systems\", May 2002.\n\
    \   [3]  Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n  \
    \      Levels\", BCP 14, RFC 2119, March 1997.\n   [4]  Schulzrinne, H., Casner,\
    \ S., Jacobson, V. and R. Frederick,\n        \"RTP: A Transport Protocol for\
    \ Real-Time Applications\", RFC\n        3550, July 2003.\n   [5]  Schulzrinne,\
    \ H. and S. Casner, \"RTP Profile for Audio and Video\n        Conferences with\
    \ Minimal Control\", RFC 3551, July 2003.\n   [6]  Handley, M. and V. Jacobson,\
    \ \"SDP: Session Description\n        Protocol\", RFC 2327, April 1998.\n"
- title: 17.2 Informative
  contents:
  - "17.2 Informative\n   [7]  Deering, S., \"Host Extensions for IP Multicasting\"\
    , STD 5, RFC\n        1112, August 1989.\n"
- title: 18.  Author's Address
  contents:
  - "18.  Author's Address\n   Adam H. Li\n   Image Communication Lab\n   Electrical\
    \ Engineering Department\n   University of California\n   Los Angeles, CA 90095\n\
    \   USA\n   Phone: +1 310 825 5178\n   EMail: adamli@icsl.ucla.edu\n"
- title: 19.  Full Copyright Statement
  contents:
  - "19.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
