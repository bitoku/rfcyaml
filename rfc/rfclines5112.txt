Abstract The Session Initiation Protocol (SIP) is a text based protocol for initiating and managing communication sessions.
The protocol is extended by the SIP events notification framework to provide subscriptions and notifications of SIP events.
One example of such event notification mechanism is presence, which is expressed in XML documents called presence documents.
SIP can be compressed by using Signaling Compression (SigComp), which is enhanced by using the SIP/ Session Description Protocol (SDP) dictionary to achieve better compression rates.
However, the SIP/SDP dictionary is not able to increase the compression factor of (typically lengthy) presence documents.
This memo defines the presence specific static dictionary that SigComp can use in order to compress presence documents to achieve higher efficiency.
The dictionary is compression algorithm independent.
The Session Initiation Protocol (SIP) [4] is extended by the SIP events framework [5] to provide subscriptions and notifications of SIP events.
One example of such an event notification mechanism is presence.
The presence information is typically carried in Extensible Markup Language (XML)
[22] documents that are compliant with a given XML schema [23].
The Presence Information Data Format (PIDF) [8] defines the format for the basic presence document that supplies presence information.
Typically, PIDF is used in combination with other extensions to provide a richer user experience, among others:  the Presence Data Model [10], Rich Presence Extensions to PIDF (RPID) [11], Contact Information in PIDF (CIPID) [12], the SIP Event Notification Extension for Resource Lists [19] and the SIP User Agent Capability Extensions to PIDF
[20], or the Location Object in PIDF
Typically, presence documents can contain large amounts of data.
The size of this data is dependent on the number of presentities that a watcher is subscribed to and the amount of information supplied by the presentity.
This can impose a problem in environments where resources are scarce (e.g., low bandwidth links with high latency) and the presence service is offered at low or no cost.
This is the case, e.g., of some wireless networks and devices.
It is reasonable to try to minimize the impact of bringing the presence service to wireless networks under these circumstances.
Work has been done to mitigate the impact of transferring large amounts of presence documents between endpoints.
For example, the Partial PIDF [15] reduces the amount of data transferred between the endpoints.
On the other hand, the signaling compression mechanisms specified in the SigComp framework (RFC 3320) [2] provide a multiple compression/ decompression algorithm framework to compress and decompress text based protocols, such as SIP.
When compression is used in SIP, the compression achieves its maximum rate once a few message exchanges have taken place.
This is due to the fact that the first message the compressor sends to the decompressor is only partially compressed, as there is not a previously stored state to compress against.
As the goal is to compress as much as possible, it seems sensible to investigate a mechanism to boost the compression rate from the first message.
RFC 3485 [7] defines a static dictionary for SIP [4] and SDP [9].
The dictionary is to be used in conjunction with SIP [4], SDP [9], and SigComp [2].
The static SIP/SDP dictionary constitutes a SigComp state that can be referenced in the first SIP message that the compressor sends out.
The dictionary boosts the compression of SIP and SDP, but unfortunately does not have any effect in XML based presence documents.
It sounds reasonable to define a presence specific static dictionary that can be used in conjunction with SIP and Sigcomp.
This dictionary can coexist with the static SIP/SDP dictionary defined in RFC 3485 [7].
Sigcomp endpoints will initially announce the availability of one or both dictionaries until the other end acknowledges that it has received the announcement.
Our initial simulations when developing this dictionary reveal that once the current mitigation mechanisms are applied (e.g., Sigcomp, partial notification, partial publication), a further compression factor of 10% can be achieved when Sigcomp uses the presence specific static dictionary.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14, RFC 2119 [1] and indicate requirement levels for compliant implementations.
The presence specific static dictionary is a collection of well known strings that appear in most of the presence documents used by SIP.
The dictionary is not a comprehensive list of reserved words, but it includes many of the strings that appear in presence documents.
The presence static dictionary is unique and MAY be available in SigComp implementations for SIP that support the presence service.
The dictionary is not intended to evolve as presence evolves.
It is defined once, and it stays as is forever.
This solves the problems of updating, upgrading, and finding out the dictionary that is supported at the remote end when several versions of the same dictionary coexist.
Appendix A contains the collection of strings that were contributed to the presence static dictionary.
The appendix also includes references to the documents that define those strings.
While this appendix is of an informative nature, Section 4 gives the normative binary form of the presence specific static dictionary.
This is the dictionary that is included in the SigComp implementation.
This dictionary has been formed from the collection of individual dictionaries given in Appendix A.
The input set is a collection of UTF 8 [6] encoded character strings.
The appendix provides a table where each row represents an entry.
Each entry contains the string that actually occurs in the dictionary, its priority (see below), its offset from the first octet and its length (both in hexadecimal), and one or more references that elucidate why this string is expected to occur in presence documents.
Note: Length in this document always refers to octets.
The columns in the table are described as follows:
String: represents the UTF 8 string that is inserted into the dictionary.
Pr: indicates the priority of this string within the dictionary.
Some compression algorithms, such as DEFLATE [3], offer an increased efficiency when the most commonly used strings are located at the bottom of the dictionary.
To facilitate generating a dictionary that has the most frequently occurring strings farther down at the bottom, we have decided to allocate a priority to each string in the dictionary.
Priorities range from 1 to 5.
A low value in the priority column (e.g., 1) indicates that we believe there is a high probability of finding the string in a presence document.
A high value in the priority column (e.g., 5) indicates lower probability of finding the string in a presence document.
This is typically the case for less frequent extensions or optional, infrequent XML elements or attributes.
Off: indicates the hexadecimal offset of the entry with respect to the first octet in the dictionary.
Note that several strings in the collections can share space in the dictionary if they exhibit suitable common substrings.
Len: the length of the string in octets in hexadecimal.
References: contains one or more references to the specification and the section within the specification where the string is defined.
Note that the strings stored in the dictionary are case sensitive.
There are a few design considerations that require a bit more explanation:
Due to the fact that most compression algorithms have a break even point around three or four characters, we have selected those static strings of characters that consist of four or more characters.
Whenever there is an enumerated string, the string does not contain quotes, following the same pattern as any other input string.
In a few cases, we have decided to split a string that appears a few times into a few substrings.
This is the case of Uniform Resource Names (URNs) in the IETF address space, because this allows the dictionary to reuse the same substring in various URN strings.
Binary Representation of the Presence Specific Static Dictionary
This section contains the binary form of the presence specific static dictionary that is loaded into SigComp as a state.
The binary SigComp dictionary is composed of two parts, the concatenation of which serves as the state value of the state item: A string subset, which contains all strings in the contributing collections as a substring (roughly ordered such that strings with low priority numbers occur at the end), and a table subset, which contains pairs of length and offset values for all the strings in the contributing collections.
In each of these pairs, the length is stored as a one byte value, and the offset is stored as a two byte value that has had 1024 added to the offset (this allows direct referencing from the stored value if the dictionary state has been loaded at address 1024).
The intention is that all compression algorithms will be able to use the (or part of the) string subset, and some compression methods, notably those that are related to the LZ78 family, will also use the table in order to form an initial set of tokens for that compression method.
The text below therefore gives examples for referencing both the table subset and the string subset of the dictionary state item.
As defined in Section 3.3.3 in the Signaling Compression specification [2], a SigComp state is characterized by a certain set of information.
For the presence specific static dictionary, the information in the following table, Table 2, fully characterizes the state item.
Note that the string subset of the dictionary can be accessed using:
STATE ACCESS (%ps, 6, 0, 0x0955, %sa, 0), and
the table subset can be accessed using: STATE ACCESS (%ps, 6, 0x0955, 0x043E, %sa, 0), where %ps points to Universal Decompressor Virtual Machine (UDVM) memory containing
and %sa is the desired destination address in UDVM memory with UDVM byte copying rules applied.
If only a subset of the dictionary up to a specific priority is desired (e.g., to save UDVM space), the values for the third and forth operand in these STATE ACCESS instructions can be changed to:
(not relevant for the dictionary)
(not relevant for the dictionary)
696e 666f  rejectedhistinfo 0100  6666 6963 6572 656d
6f76 653d 6172 656e  fficeremove aren 0110
abled REFEREGIST 0120  4552 7761 6974
6e6b 6e6f 776e 7061 726b
5341 4745 776f 7272 6965
6468 756d 626c  SAGEworriedhumbl 0190
616d 617a 6564  ngrycrankyamazed 01C0
6272 6176  prisonin awebrav 0200
min awaymax meal 0240  6275
6372 6962 6566  orefersubscribef 0290
alloweduration s 02B0  7562 7363 7269
7661 7465 6469  assedeactivatedi 0380
7365 6c66 696c 7465 7265
6765 2d72  flirtatiousage r 03B0
696e 676e 6573 7370 6563
sidencevent pack 0430  6167 6573
e :timed status  04C0  6963
ortoobrightrigge 0520  7265 736f 7572
6f63 2d73 6574 7469 6e67
xm 0560  6c3a 7072 733a 7069 6466
6e74 6174 696f 6e6f 6973 793a
6e61 6d65 6574  informationameet 05C0
2d65 7870 6972 793a  etention expiry:
666f 722d 776f 726b 696e
6174 6368  for workingwatch 0610
e :capsleepingui 0680  6c74 7969
6173 7469 636f 6e74 656e  essarcasticonten 0730
7661 6c75 653d 3a72 7069 6475
6565  atch opsec agree 07D0
6f6e 6574 776f 726b 2d61
7072 696f  onoresource prio 0830
2d61  ons bindingsdp a 0880
6170 706f  ing areason appo
3d61 7373 6f63  intmentity assoc 08E0
6961 7465 6e63 6f64 696e
a705 0aac 040a ba04 07dc
390c 0934 070a 2109 087d
05b4 0704 5609 0417 0c0a
0705 8405 097a 0506 0109
d104 0624 090c 4004 04ce
0508 050e 0805 5808 04b6
Binary Representation of the Dictionary 5.
This document defines a presence specific static dictionary for the Sigcomp framework [2].
Therefore, the security considerations of RFC 3320 [2] apply.
This memo does not introduce any known additional security risk.
Appendix A.  Input Strings to the Presence Specific Static
[8] 4.4 [10] 5.1 [11] 5 [12] 5 [13]
[8] 4.4 [10] 5.1 [11] 5
1 094F 0006 [8] 4.4, [21
[11] 5 "on the phone"
5 01C0 0006 [11] 5
3 0529 000A [16] 2.2.5 ":basicPolicy"
