- title: __initial_text__
  contents:
  - '                      Network Time Protocol (NTP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC suggests a proposed protocol for the ARPA-Internet\n\
    \   community, and requests discussion and suggestions for improvements.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.      Introduction\n   2.      Service Model\n   3. \
    \     Protocol Overview\n   4.      State Variables and Formats\n   5.      Protocol\
    \ Operation\n   5.1.    Protocol Modes\n   5.2.    Message Processing\n   5.3.\
    \    Network Considerations\n   5.4.    Leap Seconds\n   6.      References\n\
    \   Appendix A. UDP Header Format\n   Appendix B. NTP Data Format\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes the Network Time Protocol (NTP),\
    \ a protocol\n   for synchronizing a set of network clocks using a set of distributed\n\
    \   clients and servers.  NTP is built on the User Datagram Protocol\n   (UDP)\
    \ [13], which provides a connectionless transport mechanism.  It\n   is evolved\
    \ from the Time Protocol [7] and the ICMP Timestamp message\n   [6] and is a suitable\
    \ replacement for both.\n   NTP provides the protocol mechanisms to synchronize\
    \ time in principle\n   to precisions in the order of nanoseconds while preserving\
    \ a\n   non-ambiguous date, at least for this century.  The protocol includes\n\
    \   provisions to specify the precision and estimated error of the local\n   clock\
    \ and the characteristics of the reference clock to which it may\n   be synchronized.\
    \  However, the protocol itself specifies only the\n   data representation and\
    \ message formats and does not specify the\n   synchronizing algorithms or filtering\
    \ mechanisms.\n   Other mechanisms have been specified in the Internet protocol\
    \ suite\n   to record and transmit the time at which an event takes place,\n \
    \  including the Daytime protocol [8] and IP Timestamp option [9].  The\n   NTP\
    \ is not meant to displace either of these mechanisms.  Additional\n   information\
    \ on network time synchronization can be found in the\n"
- title: RFC 958                                                        September
  contents:
  - 'RFC 958                                                        September

    '
- title: Network Time Protocol
  contents:
  - "Network Time Protocol\n   References at the end of this document.  An earlier\
    \ synchronization\n   protocol is discussed in [3] and synchronization algorithms\
    \ in [2],\n   [5], [10] and [12]. Experimental results on measured roundtrip delays\n\
    \   and clock offsets in the Internet are discussed in [4] and [11].  A\n   comprehensive\
    \ mathematical treatment of clock synchronization can be\n   found in [1].\n"
- title: 2.  Service Model
  contents:
  - "2.  Service Model\n   The intent of the service for which this protocol is designed\
    \ is to\n   connect a few primary reference clocks, synchronized by wire or radio\n\
    \   to national standards, to centrally accessable resources such as\n   gateways.\
    \ These gateways would use NTP between them to cross-check\n   the primary clocks\
    \ and mitigate errors due to equipment or\n   propagation failures. Some number\
    \ of local-net hosts, serving as\n   secondary reference clocks, would run NTP\
    \ with one or more of these\n   gateways.  In order to reduce the protocol overhead,\
    \ these hosts\n   would redistribute time to the remaining local-net hosts.  In\
    \ the\n   interest of reliability selected hosts might be equipped with less\n\
    \   accurate but less expensive radio clocks and used for backup in case\n   of\
    \ failure of the primary and/or secondary clocks or communication\n   paths between\
    \ them.\n   In the normal configuration a subnetwork of primary and secondary\n\
    \   clocks will assume a hierarchical organization with the more accurate\n  \
    \ clocks near the top and the less accurate below.  NTP provides\n   information\
    \ that can be used to organize this hierarchy on the basis\n   of precision or\
    \ estimated error and even to serve as a rudimentary\n   routing algorithm to\
    \ organize the subnetwork itself.  However, the\n   NTP protocol does not include\
    \ a specification of the algorithms for\n   doing this, which is left as a topic\
    \ for further study.\n"
- title: 3.  Protocol Overview
  contents:
  - "3.  Protocol Overview\n   There is no provision for peer discovery, acquisition,\
    \ or\n   authentication in NTP.  Data integrity is provided by the IP and UDP\n\
    \   checksums.  No reachability, circuit-management, duplicate-detection\n   or\
    \ retransmission facilities are provided or necessary.  The service\n   can operate\
    \ in a symmetric mode, in which servers and clients are\n   indistinguishable\
    \ yet maintain a small amount of state information,\n   or in an unsymmetric mode\
    \ in which servers need maintain no client\n   state other than that contained\
    \ in the client request.  Moreover,\n   only a single NTP message format is necessary,\
    \ which simplifies\n   implementation and can be used in a variety of solicited\
    \ or\n   unsolicited polling mechanisms.\n   In what may be the most common (unsymmetric)\
    \ mode a client sends an\n"
- title: RFC 958                                                        September
  contents:
  - 'RFC 958                                                        September

    '
- title: Network Time Protocol
  contents:
  - "Network Time Protocol\n   NTP message to one or more servers and processes the\
    \ replies as\n   received.  The server interchanges addresses and ports, fills\
    \ in or\n   overwrites certain fields in the message, recalculates the checksum\n\
    \   and returns it immediately.  Information included in the NTP message\n   allows\
    \ each client/server peer to determine the timekeeping\n   characteristics of\
    \ its other peers, including the expected accuracies\n   of their clocks. Using\
    \ this information each peer is able to select\n   the best time from possibly\
    \ several other clocks, update the local\n   clock and estimate its accuracy.\n\
    \   It should be recognized that clock synchronization requires by its\n   nature\
    \ long periods and multiple comparisons in order to maintain\n   accurate timekeeping.\
    \  While only a few comparisons are usually\n   adequate to maintain local time\
    \ to within a second, primarily to\n   protect against broken hardware or synchronization\
    \ failure, periods\n   of hours or days and tens or hundreds of comparisons are\
    \ required to\n   maintain local time to within a few tens of milliseconds.\n\
    \   Fortunately, the frequency of comparisons can be quite small and\n   almost\
    \ always non-intrusive to normal network operations.\n"
- title: 4.  State Variables and Formats
  contents:
  - "4.  State Variables and Formats\n   NTP timestamps are represented as a 64-bit\
    \ fixed-point number, in\n   seconds relative to 0000 UT on 1 January 1900.  The\
    \ integer part is\n   in the first 32 bits and the fraction part in the last 32\
    \ bits, as\n   shown in the following diagram.\n       0                   1 \
    \                  2                   3   \n       0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 \n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         Integer Part                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Fraction Part                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   This format allows convenient multiple-precision arithmetic and\n   conversion\
    \ to Time Protocol representation (seconds), but does\n   complicate the conversion\
    \ to ICMP Timestamp message representation\n   (milliseconds).  The low-order\
    \ fraction bit increments at about\n   0.2-nanosecond intervals, so a free-running\
    \ one-millisecond clock\n   will be in error only a small fraction of one part\
    \ per million, or\n   less than a second per year.\n   In some cases a particular\
    \ timestamp may not be available, such as\n   when the protocol first starts up.\
    \  In these cases the 64-bit field\n   is set to zero, indicating the value is\
    \ invalid or undefined.\n"
- title: RFC 958                                                        September
  contents:
  - 'RFC 958                                                        September

    '
- title: Network Time Protocol
  contents:
  - "Network Time Protocol\n   Following is a description of the various data items\
    \ used in the\n   protocol.  Details of packet formats are presented in the Appendices.\n\
    \   Leap Indicator\n      This is a two-bit code warning of an impending leap-second\
    \ to be\n      inserted in the internationally coordinated Standard Time\n   \
    \   broadcasts.  A leap-second is occasionally added or subtracted\n      from\
    \ Standard Time, which is based on atomic clocks, to maintain\n      agreement\
    \ with Earth rotation.  When necessary, the corrections\n      are notified in\
    \ advance and executed at the end of the last day of\n      the month in which\
    \ notified, usually June or December.  When a\n      correction is executed the\
    \ first minute of the following day will\n      have either 59 or 61 seconds.\n\
    \   Status\n      This is a six-bit code indicating the status of the local clock.\n\
    \      Values are assigned to indicate whether it is operating correctly\n   \
    \   or in one of several error states.\n   Reference Clock Type\n      This is\
    \ an eight-bit code identifying the type of reference clock\n      used to set\
    \ the local clock.  Values are assigned for primary\n      clocks (locally synchronized\
    \ to Standard Time), secondary clocks\n      (remotely synchronized via various\
    \ network protocols) and even\n      eyeball-and-wristwatch.\n   Precision\n \
    \     This is a 16-bit signed integer indicating the precision of the\n      local\
    \ clock, in seconds to the nearest power of two.  For\n      instance, a 60-Hz\
    \ line-frequency clock would be assigned the value\n      -6, while a 1000-Hz\
    \ crystal clock would be assigned the value -10.\n   Estimated Error\n      This\
    \ is a 32-bit fixed-point number indicating the estimated error\n      of the\
    \ local clock at the time last set.  The value is in seconds,\n      with fraction\
    \ point between bits 15 and 16, and is computed by the\n      sender based on\
    \ the reported error of the reference clock, the\n      precision and drift rate\
    \ of the local clock and the time the local\n      clock was last set.  For statistical\
    \ purposes this quantity can be\n      assumed equal to the estimated or computed\
    \ standard deviation, as\n      described in [12].\n"
- title: RFC 958                                                        September
  contents:
  - 'RFC 958                                                        September

    '
- title: Network Time Protocol
  contents:
  - "Network Time Protocol\n   Estimated Drift Rate\n      This is a 32-bit signed\
    \ fixed-point number indicating the\n      estimated drift rate of the local clock.\
    \  The value is\n      dimensionless, with fraction point to the left of the high-order\n\
    \      bit.  While for most purposes this value can be estimated based on\n  \
    \    the hardware characteristics, it is possible to compute it quite\n      accurately,\
    \ as described in [12].\n   Reference Clock Identifier\n      This is a 32-bit\
    \ code identifying the particular reference clock.\n      The interpretation of\
    \ its value depends on value of Reference\n      Clock Type.  In the case of a\
    \ primary clock locally synchronized\n      to Standard Time (type 1), the value\
    \ is an ASCII string\n      identifying the clock.  In the case of a secondary\
    \ clock remotely\n      synchronized to an Internet host via NTP (type 2), the\
    \ value is\n      the 32-bit Internet address of that host.  In other cases the\n\
    \      value is undefined.\n   Reference Timestamp\n      This is a 64-bit timestamp\
    \ established by the server or client\n      host as the timestamp (presumably\
    \ obtained from a reference clock)\n      most recently used to update the local\
    \ clock.  If the local clock\n      has never been synchronized, the value is\
    \ zero.\n   Originate Timestamp\n      This is a 64-bit timestamp established\
    \ by the client host and\n      specifying the local time at which the request\
    \ departed for the\n      service host.  It will always have a nonzero value.\n\
    \   Receive Timestamp\n      This is a 64-bit timestamp established by the server\
    \ host and\n      specifying the local time at which the request arrived from\
    \ the\n      client host.  If no request has ever arrived from the client the\n\
    \      value is zero.\n   Transmit Timestamp\n      This is a 64-bit timestamp\
    \ established by the server host and\n      specifying the local time at which\
    \ the reply departed for the\n      client host.  If no request has ever arrived\
    \ from the client the\n      value is zero.\n"
- title: RFC 958                                                        September
  contents:
  - 'RFC 958                                                        September

    '
- title: Network Time Protocol
  contents:
  - 'Network Time Protocol

    '
- title: 5.  Protocol Operation
  contents:
  - "5.  Protocol Operation\n   The intent of this document is to specify a standard\
    \ for data\n   representation and message format which can be used for a variety\
    \ of\n   synchronizing algorithms and filtering mechanisms.  Accordingly, the\n\
    \   information in this section should be considered a guide, rather than\n  \
    \ a concise specification.  Nevertheless, it is expected that a\n   standard Internet\
    \ distributed timekeeping protocol with concisely\n   specified synchronizing\
    \ and filtering algorithms can be evolved from\n   the information in this section.\n\
    \   5.1.  Protocol Modes\n      The distinction between client and server is significant\
    \ only in\n      the way they interact in the request/response interchange.  The\n\
    \      same NTP message format is used by each peer and contains the same\n  \
    \    data relative to the other peer.  In the unsymmetric mode the\n      client\
    \ periodically sends an NTP message to the server, which then\n      responds\
    \ within some interval.  Usually, the server simply\n      interchanges addresses\
    \ and ports, fills in the required\n      information and sends the message right\
    \ back. Servers operating in\n      the unsymmetric mode then need retain no state\
    \ information between\n      client requests.\n      In the symmetric mode the\
    \ client/server distinction disappears.\n      Each peer maintains a table with\
    \ as many entries as active peers,\n      each entry including a code uniquely\
    \ identifying the peer (e.g.\n      Internet address), together with status information\
    \ and a copy of\n      the Originate Timestamp and Receive Timestamp values last\
    \ received\n      from that peer. The peer periodically sends an NTP message to\
    \ each\n      of these peers including the latest copy of these timestamps.  The\n\
    \      interval between sending NTP messages is managed solely by the\n      sending\
    \ peer and is unaffected by the arrival of NTP messages from\n      other peers.\n\
    \      The mode assumed by a peer can be determined by inspection of the\n   \
    \   UDP Source Port and Destination Port fields (see Appendix A).  If\n      both\
    \ of these fields contain the NTP service-port number 123, the\n      peer is\
    \ operating in symmetric mode.  If they are different and\n      the Destination\
    \ Port field contains 123, this is a client request\n      and the receiver is\
    \ expected to reply in the manner described\n      above.  If they are different\
    \ and the Source Port field contains\n      123, this is a server reply to a previously\
    \ sent client request.\n"
- title: RFC 958                                                        September
  contents:
  - 'RFC 958                                                        September

    '
- title: Network Time Protocol
  contents:
  - "Network Time Protocol\n   5.2.  Message Processing\n      The significant events\
    \ of interest in NTP occur usually near the\n      times the NTP messages depart\
    \ and arrive the client/server.  In\n      order to maintain the highest accuracy\
    \ it is important that the\n      timestamps associated with these events be computed\
    \ as close as\n      possible to the hardware or software driver associated with\
    \ the\n      communications link and, in particular, that departure timestamps\n\
    \      be recomputed for each retransmission, if used at the link level.\n   \
    \   An NTP message is constructed as follows (see Appendix B).  The\n      source\
    \ peer constructs the UDP header and the LI, Status,\n      Reference Clock Type\
    \ and Precision fields in the NTP data portion.\n      Next, it determines the\
    \ current synchronizing source and\n      constructs the Type and Reference Clock\
    \ Identifier fields.  From\n      its timekeeping algorithm (see [12] for examples)\
    \ it determines\n      the Reference Timestamp, Estimated Error and Estimated\
    \ Drift Rate\n      fields.  Then it copies into the Receive Timestamp and Transmit\n\
    \      Timestamp fields the data saved from the latest message received\n    \
    \  from the destination peer and, finally, computes the Originate\n      Timestamp\
    \ field.\n      The destination peer calculates the roundtrip delay and clock\n\
    \      offset relative to the source peer as follows.  Let t1, t2 and t3\n   \
    \   represent the contents of the Originate Timestamp, Receive\n      Timestamp\
    \ and Transmit Timestamp fields and t4 the local time the\n      NTP message is\
    \ received.  Then the roundtrip delay d and clock\n      offset c is:\n      \
    \   d = (t4 - t1) - (t3 - t2)  and  c = (t2 - t1 + t3 - t4)/2 .\n      The implicit\
    \ assumption in the above is that the one-way delay is\n      statistically half\
    \ the roundtrip delay and that the intrinsic\n      drift rates of both the client\
    \ and server clocks are small and\n      close to the same value.\n   5.3.  Network\
    \ Considerations\n      The client/server peers have an opportunity to learn a\
    \ good deal\n      about each other in the NTP message exchange.  For instance,\
    \ each\n      can learn about the characteristics of the other clocks and select\n\
    \      among them the most accurate to use as reference clock, compute\n     \
    \ the estimated error and drift rate and use this information to\n      manage\
    \ the dynamics of the subnetwork of clocks.  An outline of a\n      suggested\
    \ mechanism is as follows:\n      Included in the table of timestamps for each\
    \ peer are state\n"
- title: RFC 958                                                        September
  contents:
  - 'RFC 958                                                        September

    '
- title: Network Time Protocol
  contents:
  - "Network Time Protocol\n      variables to indicate the precision, as well as\
    \ the current\n      estimated delay, offset, error and drift rate of its local\
    \ clock.\n      These variables are updated for each NTP message received from\
    \ the\n      peer, after which the estimated error is periodically recomputed\n\
    \      on the basis of elapsed time and estimated drift rate.\n      Assuming\
    \ symmetric mode, a polling interval is established for\n      each peer, depending\
    \ upon its normal synchronization source,\n      precision and intrinsic accuracy,\
    \ which might be determined in\n      advance or even as the result of observation.\
    \  The delay and\n      clock-offset samples obtained can be filtered using\n\
    \      maximum-likelihood techniques and algorithms described in [12].\n     \
    \ From time to time a local-clock correction is computed from the\n      offset\
    \ data accumulated as above, perhaps using algorithms\n      described in [10]\
    \ and [12].  The correction causes the local clock\n      to run slightly fast\
    \ or slow to the corrected time or to jump\n      instantaneously to the correct\
    \ time, depending on the magnitude of\n      the correction.  See [5] and [11]\
    \ for a discussion of local-clock\n      implementation models and synchronizing\
    \ algorithms.  Note that the\n      expectation here is that all network clocks\
    \ are maintained by\n      these algorithms, so that manual intervention is not\
    \ normally\n      required.\n      As a byproduct of the above operations an estimate\
    \ of local-clock\n      error and drift rate can be computed.  Note that the magnitude\
    \ of\n      the error estimate must always be greater than that of the\n     \
    \ selected reference clock by at least the inherent precision of the\n      local\
    \ clock. It does not take a leap of imagination to see that\n      the estimated\
    \ error, delay or precision, or some combination of\n      them, can be used as\
    \ a metric for a simple min-hop-type routing\n      algorithm to organize the\
    \ subnetwork so as to provide the most\n      accurate time to all peers and to\
    \ provide automatic fallback to\n      alternate sources in case of failures.\n\
    \      A variety of network configurations can be included in the above\n    \
    \  scenario.  In the case of networks supporting a broadcast\n      function,\
    \ for example, NTP messages can be broadcast from one or\n      more server hosts\
    \ and picked up by client hosts sharing the same\n      cable.  Since typical\
    \ networks of this type have a very low\n      propagation delay, the roundtrip-delay\
    \ calculation can be omitted\n      and the clients need not broadcast in return.\
    \  Thus, the\n      requirement to save per-peer timestamps is removed, so that\
    \ the\n      Receive Timestamp and Transmit Timestamp fields can be set to zero\n\
    \      and the local-clock offset becomes simply the difference between\n    \
    \  the Originate Timestamp and the local time upon arrival.  In the\n      case\
    \ of long-delay satellite networks with broadcast capabilities,\n"
- title: RFC 958                                                        September
  contents:
  - 'RFC 958                                                        September

    '
- title: Network Time Protocol
  contents:
  - "Network Time Protocol\n      an accurate measure of roundtrip delay is usually\
    \ available from\n      the channel-scheduling algorithm, so the per-peer timestamps\
    \ again\n      can be avoided.\n   5.4.  Leap Seconds\n      A standard mechanism\
    \ to effect leap-second correction is not a\n      part of this specification.\
    \  It is expected that the Leap\n      Indicator bits would be set by hand in\
    \ the primary reference\n      clocks, then trickle down to all other clocks in\
    \ the network,\n      which would execute the correction at the specified time\
    \ and reset\n      the bits.\n"
- title: RFC 958                                                        September
  contents:
  - 'RFC 958                                                        September

    '
- title: Network Time Protocol
  contents:
  - 'Network Time Protocol

    '
- title: 6.  References
  contents:
  - "6.  References\n   1.  Lindsay, W.C., and A.V.  Kantak.  Network Synchronization\
    \ of\n       Random Signals.  IEEE Trans.  Comm.  COM-28, 8 (August 1980),\n \
    \      1260-1266.\n   2.  Mills, D.L.  Time Synchronization in DCNET Hosts.  DARPA\
    \ Internet\n       Project Report IEN-173, COMSAT Laboratories, February 1981.\n\
    \   3.  Mills, D.L.  DCNET Internet Clock Service.  DARPA Network Working\n  \
    \     Group Report RFC-778, COMSAT Laboratories, April 1981.\n   4.  Mills, D.L.\
    \  Internet Delay Experiments.  DARPA Network Working\n       Group Report RFC-889,\
    \ M/A-COM Linkabit, December 1983.\n   5.  Mills, D.L.  DCN Local-Network Protocols.\
    \  DARPA Network Working\n       Group Report RFC-891, M/A-COM Linkabit, December\
    \ 1983.\n   6.  Postel, J.  Internet Control Message Protocol.  DARPA Network\n\
    \       Working Group Report RFC-792, USC Information Sciences Institute,\n  \
    \     September 1981.\n   7.  Postel, J.  Time Protocol.  DARPA Network Working\
    \ Group Report\n       RFC-868, USC Information Sciences Institute, May 1983.\n\
    \   8.  Postel, J.  Daytime Protocol.  DARPA Network Working Group Report\n  \
    \     RFC-867, USC Information Sciences Institute, May 1983.\n   9.  Su, Z.  A\
    \ Specification of the Internet Protocol (IP) Timestamp\n       Option.  DARPA\
    \ Network Working Group Report RFC-781.  SRI\n       International, May 1981.\n\
    \   10. Marzullo, K., and S.  Owicki.  Maintaining the Time in a\n       Distributed\
    \ System.  ACM Operating Systems Review 19, 3 (July\n       1985), 44-54.\n  \
    \ 11. Mills, D.L.  Experiments in Network Clock Synchronization.  DARPA\n    \
    \   Network Working Group Report RFC-957, M/A-COM Linkabit, August\n       1985.\n\
    \   12. Mills, D.L.  Algorithms for Synchronizing Network Clocks.  DARPA\n   \
    \    Network Working Group Report RFC-956, M/A-COM Linkabit, September\n     \
    \  1985.\n   13. Postel, J.  User Datagram Protocol.  DARPA Network Working Group\n\
    \       Report RFC-768, USC Information Sciences Institute, August 1980.\n"
- title: RFC 958                                                        September
  contents:
  - 'RFC 958                                                        September

    '
- title: Network Time Protocol
  contents:
  - 'Network Time Protocol

    '
- title: Appendix A.  UDP Header Format
  contents:
  - "Appendix A.  UDP Header Format\n   An NTP packet consists of the UDP header followed\
    \ by the NTP data\n   portion.  The format of the UDP header and the interpretation\
    \ of its\n   fields are described in [13] and are not part of the NTP\n   specification.\
    \  They are shown below for completeness.\n    0                   1         \
    \          2                   3   \n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Source Port          |       Destination Port        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Length             |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Source Port\n      UDP source port number. In the case of unsymmetric mode\
    \ and a\n      client request this field is assigned by the client host, while\n\
    \      for a server reply it is copied from the Destination Port field of\n  \
    \    the client request.  In the case of symmetric mode, both the\n      Source\
    \ Port and Destination Port fields are assigned the NTP\n      service-port number\
    \ 123.\n   Destination Port\n      UDP destination port number. In the case of\
    \ unsymmetric mode and a\n      client request this field is assigned the NTP\
    \ service-port number\n      123, while for a server reply it is copied form the\
    \ Source Port\n      field of the client request.  In the case of symmetric mode,\
    \ both\n      the Source Port and Destination Port fields are assigned the NTP\n\
    \      service-port number 123.\n   Length\n      Length of the request or reply,\
    \ including UDP header, in octets.\n   Checksum\n      Standard UDP checksum.\n"
- title: RFC 958                                                        September
  contents:
  - 'RFC 958                                                        September

    '
- title: Network Time Protocol
  contents:
  - 'Network Time Protocol

    '
- title: Appendix B.  NTP Data Format
  contents:
  - "Appendix B.  NTP Data Format\n   The format of the NTP data portion, which immediately\
    \ follows the UDP\n   header, is shown below along with a description of its fields.\n\
    \    0                   1                   2                   3   \n    0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |LI |   Status  |      Type     |           Precision           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Estimated Error                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Estimated Drift Rate                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Reference Clock Identifier                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \               Reference Timestamp (64 bits)                 |\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \               Originate Timestamp (64 bits)                 |\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                Receive Timestamp (64 bits)                  |\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                Transmit Timestamp (64 bits)                 |\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Leap Indicator (LI)\n      Code warning of impending leap-second to be inserted\
    \ at the end of\n      the last day of the current month. Bits are coded as follows:\n\
    \         00      no warning\n         01      +1 second (following minute has\
    \ 61 seconds)\n         10      -1 second (following minute has 59 seconds)\n\
    \         11      reserved for future use\n   Status\n      Code indicating status\
    \ of local clock. Values are defined as\n      follows:\n"
- title: RFC 958                                                        September
  contents:
  - 'RFC 958                                                        September

    '
- title: Network Time Protocol
  contents:
  - "Network Time Protocol\n         0       clock operating correctly\n         1\
    \       carrier loss\n         2       synch loss\n         3       format error\n\
    \         4       interface (Type 1) or link (Type 2) failure\n         (additional\
    \ codes reserved for future use)\n   Reference Clock Type\n   (Type)\n      Code\
    \ identifying the type of reference clock. Values are defined\n      as follows:\n\
    \         0       unspecified\n         1       primary reference (e.g. radio\
    \ clock)\n         2       secondary reference using an Internet host via NTP\n\
    \         3       secondary reference using some other host or protocol\n    \
    \     4       eyeball-and-wristwatch\n         (additional codes reserved for\
    \ future use)\n   Precision\n      Signed integer in the range +32 to -32 indicating\
    \ the precision of\n      the local clock, in seconds to the nearest power of\
    \ two.\n   Estimated Error\n      Fixed-point number indicating the estimated\
    \ error of the local\n      clock at the time last set, in seconds with fraction\
    \ point between\n      bits 15 and 16.\n   Estimated Drift Rate\n      Signed\
    \ fixed-point number indicating the estimated drift rate of\n      the local clock,\
    \ in dimensionless units with fraction point to the\n      left of the high-order\
    \ bit.\n   Reference Clock\n   Identifier\n      Code identifying the particular\
    \ reference clock. In the case of\n      type 1 (primary reference), this is a\
    \ left-justified, zero-filled\n      ASCII string identifying the clock, for example:\n\
    \         WWVB    WWVB radio clock (60 KHz)\n"
- title: RFC 958                                                        September
  contents:
  - 'RFC 958                                                        September

    '
- title: Network Time Protocol
  contents:
  - "Network Time Protocol\n         GOES    GOES satellite clock (468 HMz)\n    \
    \     WWV     WWV radio clock (2.5/5/10/15/20 MHz)\n         (and others as necessary)\n\
    \      In the case of type 2 (secondary reference) this is the 32-bit\n      Internet\
    \ address of the reference host. In other cases this field\n      is reserved\
    \ for future use and should be set to zero.\n   Reference Timestamp\n      Local\
    \ time at which the local clock was last set or corrected.\n   Originate Timestamp\n\
    \      Local time at which the request departed the client host for the\n    \
    \  service host.\n   Receive Timestamp\n      Local time at which the request\
    \ arrived at the service host.\n   Transmit Timestamp\n      Local time at which\
    \ the reply departed the service host for the\n      client host.\n"
