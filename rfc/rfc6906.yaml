- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                          E. Wilde
  contents:
  - "Independent Submission                                          E. Wilde\n  \
    \                  The 'profile' Link Relation Type\n"
- title: Abstract
  contents:
  - "Abstract\n   This specification defines the 'profile' link relation type that\n\
    \   allows resource representations to indicate that they are following\n   one\
    \ or more profiles.  A profile is defined not to alter the\n   semantics of the\
    \ resource representation itself, but to allow clients\n   to learn about additional\
    \ semantics (constraints, conventions,\n   extensions) that are associated with\
    \ the resource representation, in\n   addition to those defined by the media type\
    \ and possibly other\n   mechanisms.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6906.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Profiles ........................................................3\n    \
    \  3.1. Profiles and Media Types ...................................4\n      3.2.\
    \ Profile Context ............................................5\n   4. IANA Considerations\
    \ .............................................5\n   5. Examples ........................................................6\n\
    \      5.1. hCard ......................................................6\n  \
    \    5.2. Dublin Core ................................................6\n    \
    \  5.3. Podcasts ...................................................7\n   6. Security\
    \ Considerations .........................................7\n   7. Acknowledgements\
    \ ................................................7\n   8. References ......................................................7\n\
    \      8.1. Normative References .......................................7\n  \
    \    8.2. Informative References .....................................7\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   One of the foundations of the Internet and web architecture\
    \ is the\n   fact that resource representations communicated through protocols,\n\
    \   such as SMTP or HTTP, are labeled with a 'media type', which allows a\n  \
    \ client to understand at run time what 'type' of resource\n   representation\
    \ it is handling.  Sometimes, it would be useful for\n   servers and clients to\
    \ include additional information about the\n   nature of the resource.  This would\
    \ allow a client understanding this\n   additional information to react in a way\
    \ specific to that\n   specialization of the resource, where the specialization\
    \ can be about\n   constraints, conventions, extensions, or any other aspects\
    \ that do\n   not alter the basic media type semantics.  HTML 4 [HTML401] has\
    \ such\n   a mechanism built into the language, which is the 'profile' attribute\n\
    \   of the 'head' element.  However, this mechanism is specific to HTML\n   alone;\
    \ at the time of writing, it seems as if HTML 5 will drop\n   support for this\
    \ mechanism entirely.\n   RFC 5988 [RFC5988] \"defines a framework for typed links\
    \ that isn't\n   specific to a particular serialisation or application.  It does\
    \ so by\n   redefining the link relation registry established by Atom to have\
    \ a\n   broader domain, and adding to it the relations that are defined by\n \
    \  HTML.\"\n   This specification registers a 'profile' link relation type according\n\
    \   to the rules of RFC 5988 [RFC5988].  Links with this relation type\n   can\
    \ be used in representations that support typed links as well as in\n   HTTP Link\
    \ headers.  The profile link relation type is independent of\n   the context in\
    \ which it is used and does not constrain, in any way,\n   the target of the linked\
    \ URI.  In fact, for the purpose of this\n   specification, the target URI does\
    \ not necessarily have to identify a\n   dereferencable resource (or even use\
    \ a dereferencable URI scheme).\n   Clients can treat the occurrence of a specific\
    \ URI in the same way as\n   an XML namespace URI and invoke specific behavior\
    \ based on the\n   assumption that a specific profile target URI signals that\
    \ a resource\n   representation follows a specific profile.  Note that, at the\
    \ same\n   time, it is possible for profile target URIs to use dereferencable\n\
    \   URIs and to use a representation (which is outside the scope of this\n   specification)\
    \ that represents the information about the profile in a\n   human- or machine-readable\
    \ way.\n   As one example, consider the case of podcasts, where a specific kind\n\
    \   of feed uses additional fields for media-related metadata.  Using a\n   'profile'\
    \ link, it would be easily possible for clients to understand\n   that a specific\
    \ feed is supposed to be a podcast feed, and that it\n   may contain entries using\
    \ podcast-specific fields.  This may allow a\n   client to behave differently\
    \ when handling such a feed (such as\n   rendering a podcast-specific UI), even\
    \ when the current set of\n   entries in the feed may not contain any podcast\
    \ entries.  (Section\n   5.3 gives more details for this example.)\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n"
- title: 3.  Profiles
  contents:
  - "3.  Profiles\n   The concept of a profile has no strict definition on the Internet\
    \ or\n   on the web.  For the purpose of this specification, a profile can be\n\
    \   described as additional semantics that can be used to process a\n   resource\
    \ representation, such as constraints, conventions,\n   extensions, or any other\
    \ aspects that do not alter the basic media\n   type semantics.  A profile MUST\
    \ NOT change the semantics of the\n   resource representation when processed without\
    \ profile knowledge, so\n   that clients both with and without knowledge of a\
    \ profiled resource\n   can safely use the same representation.  While this specification\n\
    \   associates profiles with resource representations, creators and users\n  \
    \ of profiles MAY define and manage them in a way that allows them to\n   be used\
    \ across media types; thus, they could be associated with a\n   resource, independent\
    \ of their representations (i.e., using the same\n   profile URI for different\
    \ media types).  However, such a design is\n   outside of the scope of this specification,\
    \ and clients SHOULD treat\n   profiles as being associated with a resource representation.\n\
    \   Profiles can be combined, meaning that a single resource\n   representation\
    \ can conform to zero or any number of profiles.\n   Depending on the profile\
    \ support of clients, it is possible that the\n   same resource representation,\
    \ when linked to a number of profiles,\n   can be processed with different sets\
    \ of processing rules, based on\n   the profile support of the clients.\n   Profiles\
    \ are identified by URI.  However, as is the case with, for\n   example, XML namespace\
    \ URIs, the URI in this case only serves as an\n   identifier, meaning that the\
    \ presence of a specific URI has to be\n   sufficient for a client to assert that\
    \ a resource representation\n   conforms to a profile.  Thus, clients SHOULD treat\
    \ profile URIs as\n   identifiers and not as links, but profiles MAY be defined\
    \ in a way\n   that the URIs do identify retrievable profile description and thus\n\
    \   can be accessed by clients by dereferencing the profile URI.  For\n   profiles\
    \ intended for use in environments where clients may encounter\n   unknown profile\
    \ URIs, profile maintainers SHOULD consider to make the\n   profile URI dereferencable\
    \ and provide useful documentation at that\n   URI.  The design and representation\
    \ of such profile descriptions,\n   however, is outside the scope of this specification.\n"
- title: 3.1.  Profiles and Media Types
  contents:
  - "3.1.  Profiles and Media Types\n   A media type defines both the semantics and\
    \ the serialization of a\n   specific type of content.  In many cases, media types\
    \ have some\n   built-in extensibility or openness, so that specific instances\
    \ of the\n   media type can layer additional semantics on top of the media type's\n\
    \   foundation.  In this case, a profile is the appropriate mechanism to\n   signal\
    \ that the original semantics and processing model of the media\n   type still\
    \ apply, but that an additional processing model can be used\n   to extract additional\
    \ semantics.  This is in contrast to a new media\n   type that, instead of just\
    \ adding processing rules and semantics\n   defines a complete set of processing\
    \ rules and semantics in most\n   cases.  As an example, XHTML is not a profile\
    \ of XML but a new media\n   type because it introduces a complete new perspective\
    \ of the\n   underlying XML structures, and from the XHTML point of view, exposing\n\
    \   the raw XML is not all that useful for clients.  However, hCard (see\n   Section\
    \ 5.1) is a profile of (X)HTML because it adds processing rules\n   that allow\
    \ a client to extract additional semantics from a\n   representation, without\
    \ changing any of the processing rules and\n   semantics of (X)HTML itself.  While\
    \ the line between a media type and\n   a profile might not always be easy to\
    \ draw, the intention of profiles\n   is not to replace media types, but to add\
    \ a more lightweight and\n   runtime-capable mechanism that allows servers and\
    \ clients to be more\n   explicit in how a specific instance of a media type represents\n\
    \   concepts that are not defined by the media type itself, but by\n   additional\
    \ conventions (the profile processing rules and semantics).\n   The objective\
    \ of profiles is that they allow instances to clearly\n   identify what kind of\
    \ mechanism they are using for expressing\n   additional semantics, should they\
    \ follow a well-defined framework for\n   doing so (see Section 5 for examples).\
    \  While this allows servers and\n   clients to represent the use of profiles,\
    \ it does not make the\n   profile information visible outside of the representation\
    \ itself, if\n   the representation is using embedded typed links.  For newly\
    \ defined\n   media types that may be used with profiles, it is therefore\n  \
    \ recommended that they SHOULD define a media type parameter called\n   'profile'\
    \ and specify that this media type parameter follows the\n   semantics of a profile\
    \ as laid out in this document.  This way,\n   clients can use this media type\
    \ parameter to request a certain\n   profile when interacting, for example, with\
    \ an HTTP server and\n   setting the Accept header.  Representations using a 'profile'\
    \ media\n   type parameter still SHOULD include that value in the representation\n\
    \   using the 'profile' link relation, since the media type label of a\n   representation\
    \ can easily get lost when it is taken out of its\n   conversational context.\n\
    \   Since a representation can link to more than one profile, the same\n   has\
    \ to be possible for the corresponding media type parameter (if a\n   media type\
    \ defines such a parameter).  Media types defining a\n   'profile' parameter SHOULD\
    \ define it as a whitespace-separated list\n   of profile URIs.\n"
- title: 3.2.  Profile Context
  contents:
  - "3.2.  Profile Context\n   Profile links convey information about the use of profiles\
    \ for a\n   media type.  If they are used within a media type, they apply to the\n\
    \   context specified by that media type.  This means, for example, that\n   profile\
    \ links in the head element of an HTML document apply to the\n   document as a\
    \ whole.  The context of a profile extends to the scope\n   of where it is being\
    \ used, which means that profiles used in profile\n   media type parameters (as\
    \ described in Section 3.1) or used in HTTP\n   Link headers extend to the scope\
    \ of the protocol in which they are\n   being used.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   The link relation type below has been registered\
    \ by IANA per Section\n   6.2.1 of RFC 5988 [RFC5988]:\n      Relation Name: profile\n\
    \      Description: Identifying that a resource representation conforms\n    \
    \  to a certain profile, without affecting the non-profile semantics\n      of\
    \ the resource representation.\n      Reference: [RFC6906]\n      Notes: Profile\
    \ URIs are primarily intended to be used as\n      identifiers, and thus clients\
    \ SHOULD NOT indiscriminately access\n      profile URIs.\n"
- title: 5.  Examples
  contents:
  - "5.  Examples\n   This section lists some examples of profiles that are already\
    \ defined\n   (and thus could be readily used with a 'profile' link) and of some\n\
    \   potential additional profiles.  So far, profiles have been mostly\n   limited\
    \ to HTML (because of the support of profiles in HTML).  The\n   two examples\
    \ of existing profiles are HTML profiles, and the one\n   hypothetical example\
    \ is a non-HTML example that is based on feeds.\n"
- title: 5.1.  hCard
  contents:
  - "5.1.  hCard\n   The hCard profile uses http://microformats.org/profile/hcard\
    \ as its\n   defining URI and is essentially a mechanism on how vCard [RFC6350]\n\
    \   information can be embedded in an HTML page using the mechanisms\n   provided\
    \ by microformats.  It is thus a good example for how profiles\n   might, on the\
    \ one hand, define a model-based extension of the\n   original media type (in\
    \ this case, adding vCard fields), and how they\n   also have to define specific\
    \ ways of how that model extension is then\n   represented in the media type (in\
    \ this case, using microformats).\n   Alternatively, it would be possible to represent\
    \ vCard information\n   through the mechanisms of RDF in Attributes (RDFa) or\
    \ microdata, but\n   since these would be different conventions that a client\
    \ would need\n   to follow to extract the vCard data, they would be identified\
    \ by\n   different profiles.\n"
- title: 5.2.  Dublin Core
  contents:
  - "5.2.  Dublin Core\n   Dublin Core metadata identified by the profile\n   http://dublincore.org/documents/2008/08/04/dc-html/\
    \ can be used to\n   embed Dublin Core metadata in an HTML page.  In contrast\
    \ to hCard,\n   which uses microformats as its foundation, the Dublin Core profile\n\
    \   defines its own way of embedding metadata into HTML, and it does so\n   using\
    \ HTML <link> elements.  The interesting difference to hCard is\n   that Dublin\
    \ Core not only defines metadata to be embedded in HTML, it\n   also allows links\
    \ to be added as metadata.  In which case, the\n   profile not only describes\
    \ additional data to be found within the\n   representation, but also allows the\
    \ representation to be linked to\n   additional resources.\n"
- title: 5.3.  Podcasts
  contents:
  - "5.3.  Podcasts\n   Podcasts are an extension of feed formats and define a substantial\n\
    \   set of additional attributes to reflect the fact that the resources\n   in\
    \ podcast feeds are time-based media formats, such as audio and\n   video.  While\
    \ there is no profile URI for podcasts, the current\n   definition (maintained\
    \ by Apple) at\n   http://www.apple.com/itunes/podcasts/specs.html could serve\
    \ as such a\n   URI, or it could by updated to include such a URI.  Podcasts are\n\
    \   feeds with special behavior; and while it is possible to follow a\n   podcast\
    \ feed using a generic feed reader, a podcast-aware feed reader\n   will be able\
    \ to extract additional information from the feed, and\n   thus can implement\
    \ more sophisticated services or present a more\n   sophisticated UI for podcast\
    \ feeds.  The Apple page referenced above\n   describes the implementation of\
    \ one such specialized podcast feed\n   reader, Apple iTunes.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The 'profile' relation type is not known to introduce\
    \ any new\n   security issues not already discussed in RFC 5988 [RFC5988] for\n\
    \   generic use of Web linking mechanisms.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   Thanks for comments and suggestions provided by Erlend\
    \ Hamnaberg,\n   Markus Lanthaler, Simon Mayer, Mark Nottingham, Julian Reschke,\
    \ James\n   Snell, Herbert Van de Sompel, and Tim Williams.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC5988]  Nottingham, M., \"Web Linking\", RFC 5988, October 2010.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [HTML401]  Le Hors, A., Raggett, D., and I.\
    \ Jacobs, \"HTML 4.01\n              Specification\", World Wide Web Consortium\
    \ Recommendation\n              REC-html401-19991224, December 1999,\n       \
    \       <http://www.w3.org/TR/1999/REC-html401-19991224>.\n   [RFC6350]  Perreault,\
    \ S., \"vCard Format Specification\", RFC 6350,\n              August 2011.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Erik Wilde\n   EMC Corporation\n   6801 Koll Center Parkway\n\
    \   Pleasanton, CA 94566\n   U.S.A.\n   Phone: +1-925-6006244\n   EMail: erik.wilde@emc.com\n\
    \   URI:   http://dret.net/netdret/\n"
