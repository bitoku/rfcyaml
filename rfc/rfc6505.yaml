- title: __initial_text__
  contents:
  - '    A Mixer Control Package for the Media Control Channel Framework

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines a Media Control Channel Framework Package\
    \ for\n   managing mixers for media conferences and connections.  The package\n\
    \   defines request elements for managing conference mixers, managing\n   mixers\
    \ between conferences and/or connections, as well as associated\n   responses\
    \ and notifications.  The package also defines elements for\n   auditing package\
    \ capabilities and mixers.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6505.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n   2.  Conventions and Terminology  . . . . . . . . . . . .\
    \ . . . . .  5\n   3.  Control Package Definition . . . . . . . . . . . . . .\
    \ . . . .  6\n     3.1.  Control Package Name . . . . . . . . . . . . . . . .\
    \ . . .  6\n     3.2.  Framework Message Usage  . . . . . . . . . . . . . . .\
    \ . .  6\n     3.3.  Common XML Support . . . . . . . . . . . . . . . . . . .\
    \ .  7\n     3.4.  CONTROL Message Body . . . . . . . . . . . . . . . . . . .\
    \  7\n     3.5.  REPORT Message Body  . . . . . . . . . . . . . . . . . . .  7\n\
    \     3.6.  Audit  . . . . . . . . . . . . . . . . . . . . . . . . . .  8\n  \
    \   3.7.  Examples . . . . . . . . . . . . . . . . . . . . . . . . .  8\n   4.\
    \  Element Definitions  . . . . . . . . . . . . . . . . . . . . .  8\n     4.1.\
    \  <mscmixer> . . . . . . . . . . . . . . . . . . . . . . . .  9\n     4.2.  Mixer\
    \ Elements . . . . . . . . . . . . . . . . . . . . . . 11\n       4.2.1.  Conference\
    \ Elements  . . . . . . . . . . . . . . . . . 12\n         4.2.1.1.  <createconference>\
    \ . . . . . . . . . . . . . . . . 12\n         4.2.1.2.  <modifyconference> .\
    \ . . . . . . . . . . . . . . . 14\n         4.2.1.3.  <destroyconference>  .\
    \ . . . . . . . . . . . . . . 16\n         4.2.1.4.  Conference Configuration\
    \ . . . . . . . . . . . . . 16\n           4.2.1.4.1.  <audio-mixing> . . . .\
    \ . . . . . . . . . . . . 16\n           4.2.1.4.2.  <video-layouts>  . . . .\
    \ . . . . . . . . . . . 17\n             4.2.1.4.2.1.  <video-layout> . . . .\
    \ . . . . . . . . . . 18\n           4.2.1.4.3.  <video-switch> . . . . . . .\
    \ . . . . . . . . . 24\n             4.2.1.4.3.1.  Priority Assignment  . . .\
    \ . . . . . . . . 26\n           4.2.1.4.4.  <subscribe>  . . . . . . . . . .\
    \ . . . . . . . 27\n             4.2.1.4.4.1.  <active-talkers-sub> . . . . .\
    \ . . . . . . 27\n       4.2.2.  Joining Elements . . . . . . . . . . . . . .\
    \ . . . . . 28\n         4.2.2.1.  Joining Model  . . . . . . . . . . . . . .\
    \ . . . . 28\n         4.2.2.2.  <join> . . . . . . . . . . . . . . . . . . .\
    \ . . . 29\n         4.2.2.3.  <modifyjoin> . . . . . . . . . . . . . . . . .\
    \ . . 32\n         4.2.2.4.  <unjoin> . . . . . . . . . . . . . . . . . . . .\
    \ . 34\n         4.2.2.5.  <stream> . . . . . . . . . . . . . . . . . . . . .\
    \ 35\n           4.2.2.5.1.  <volume> . . . . . . . . . . . . . . . . . . . 37\n\
    \           4.2.2.5.2.  <clamp>  . . . . . . . . . . . . . . . . . . . 38\n  \
    \         4.2.2.5.3.  <region> . . . . . . . . . . . . . . . . . . . 38\n    \
    \       4.2.2.5.4.  <priority> . . . . . . . . . . . . . . . . . . 38\n      \
    \ 4.2.3.  <response> . . . . . . . . . . . . . . . . . . . . . . 38\n       4.2.4.\
    \  <event>  . . . . . . . . . . . . . . . . . . . . . . . 39\n         4.2.4.1.\
    \  <active-talkers-notify>  . . . . . . . . . . . . . 39\n           4.2.4.1.1.\
    \  <active-talker>  . . . . . . . . . . . . . . . 40\n         4.2.4.2.  <unjoin-notify>\
    \  . . . . . . . . . . . . . . . . . 40\n         4.2.4.3.  <conferenceexit> .\
    \ . . . . . . . . . . . . . . . . 41\n     4.3.  Audit Elements . . . . . . .\
    \ . . . . . . . . . . . . . . . 42\n       4.3.1.  <audit>  . . . . . . . . .\
    \ . . . . . . . . . . . . . . 43\n       4.3.2.  <auditresponse>  . . . . . .\
    \ . . . . . . . . . . . . . 44\n         4.3.2.1.  <capabilities> . . . . . .\
    \ . . . . . . . . . . . . 46\n         4.3.2.2.  <mixers> . . . . . . . . . .\
    \ . . . . . . . . . . . 46\n           4.3.2.2.1.  <conferenceaudit>  . . . .\
    \ . . . . . . . . . . 47\n             4.3.2.2.1.1.  <participants> . . . . .\
    \ . . . . . . . . . 47\n               4.3.2.2.1.1.1.  <participant>  . . . .\
    \ . . . . . . . . 48\n           4.3.2.2.2.  <joinaudit>  . . . . . . . . . .\
    \ . . . . . . . 48\n     4.4.  <codecs> . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 48\n       4.4.1.  <codec>  . . . . . . . . . . . . . . . . . .\
    \ . . . . . 49\n     4.5.  <params> . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 50\n       4.5.1.  <param>  . . . . . . . . . . . . . . . . . . . .\
    \ . . . 50\n     4.6.  Response Status Codes  . . . . . . . . . . . . . . . .\
    \ . . 51\n     4.7.  Type Definitions . . . . . . . . . . . . . . . . . . . .\
    \ . 55\n   5.  Formal Syntax  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ 56\n   6.  Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . 75\n\
    \     6.1.  AS-MS Framework Interaction Examples . . . . . . . . . . . 75\n  \
    \     6.1.1.  Creating a Conference Mixer and Joining a\n               Participant\
    \  . . . . . . . . . . . . . . . . . . . . . 75\n       6.1.2.  Receiving Active\
    \ Talker Notifications  . . . . . . . . 76\n       6.1.3.  Conference Termination\
    \ . . . . . . . . . . . . . . . . 76\n     6.2.  Mixing Examples  . . . . . .\
    \ . . . . . . . . . . . . . . . 76\n       6.2.1.  Audio Conferencing . . . .\
    \ . . . . . . . . . . . . . . 77\n       6.2.2.  Bridging Connections . . . .\
    \ . . . . . . . . . . . . . 79\n       6.2.3.  Video Conferencing . . . . . .\
    \ . . . . . . . . . . . . 80\n   7.  Security Considerations  . . . . . . . .\
    \ . . . . . . . . . . . 81\n   8.  IANA Considerations  . . . . . . . . . . .\
    \ . . . . . . . . . . 84\n     8.1.  Control Package Registration . . . . . .\
    \ . . . . . . . . . 84\n     8.2.  URN Sub-Namespace Registration . . . . . .\
    \ . . . . . . . . 84\n     8.3.  XML Schema Registration  . . . . . . . . . .\
    \ . . . . . . . 85\n     8.4.  MIME Media Type Registration for\n           'application/msc-mixer+xml'\
    \  . . . . . . . . . . . . . . . 85\n     8.5.  Mixer Control Package Status Code\
    \ Registration . . . . . . 86\n   9.  Contributors . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . 86\n   10. Acknowledgments  . . . . . . . . . . . . .\
    \ . . . . . . . . . . 87\n   11. References . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . 87\n     11.1. Normative References . . . . . . . . . . .\
    \ . . . . . . . . 87\n     11.2. Informative References . . . . . . . . . . .\
    \ . . . . . . . 88\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Media Control Channel Framework [RFC6230] provides a\
    \ generic\n   approach for establishment and reporting capabilities of remotely\n\
    \   initiated commands.  The Control Framework -- an equivalent term for\n   the\
    \ Media Control Channel Framework -- utilizes many functions\n   provided by the\
    \ Session Initiation Protocol (SIP) [RFC3261] for the\n   rendezvous and establishment\
    \ of a reliable channel for control\n   interactions.  The Control Framework also\
    \ introduces the concept of a\n   Control Package.  A Control Package is an explicit\
    \ usage of the\n   Control Framework for a particular interaction set.  This\n\
    \   specification defines a package for media conference mixers and media\n  \
    \ connection mixers.\n   This package defines mixer management elements for creating,\n\
    \   modifying, and deleting conference mixers, elements for joining,\n   modifying,\
    \ and unjoining media streams between connections and\n   conferences (including\
    \ mixers between connections), as well as\n   associated responses and notifications.\
    \  The package also defines\n   elements for auditing package capabilities and\
    \ mixers.\n   This package has been designed to satisfy media-mixing requirements\n\
    \   documented in the Media Server Control Protocol Requirements document\n  \
    \ [RFC5167]; more specifically REQ-MCP-22, REQ-MCP-23, REQ-MCP-24,\n   REQ-MCP-25,\
    \ REQ-MCP-26, and REQ-MCP-27.\n   The package provides the major conferencing\
    \ functionality of SIP\n   media server languages such as MSCML [RFC5022] and\
    \ MSML [RFC5707].  A\n   key differentiator is that this package provides such\
    \ functionality\n   using the Media Control Channel Framework.\n   Out of scope\
    \ for this mixer package are more advanced functions\n   including personalized\
    \ video mixes for conference participants,\n   support for floor control protocols,\
    \ as well as support for video\n   overlays and text insertion.  Such functionality\
    \ can be addressed by\n   extensions to this package (through addition of foreign\
    \ elements or\n   attributes from another namespace) or use of other Control Packages\n\
    \   that could build upon this package.\n   The functionality of this package\
    \ is defined by messages, containing\n   XML [XML] elements and transported using\
    \ the Media Control Channel\n   Framework.  The XML elements can be divided into\
    \ two types: mixer\n   management elements and audit elements (for auditing package\n\
    \   capabilities and mixers managed by the package).\n   The document is organized\
    \ as follows.  Section 3 describes how this\n   Control Package fulfills the requirements\
    \ for a Media Control Channel\n   Framework Control Package.  Section 4 describes\
    \ the syntax and\n   semantics of defined elements, including mixer management\n\
    \   (Section 4.2) and audit elements (Section 4.3).  Section 5 describes\n   an\
    \ XML schema for these elements and provides extensibility by\n   allowing attributes\
    \ and elements from other namespaces.  Section 6\n   provides examples of package\
    \ usage.  Section 7 describes important\n   security considerations for use of\
    \ this Control Package.  Section 8\n   provides information on IANA registration\
    \ of this Control Package,\n   including its name, XML namespace, and MIME media\
    \ type.\n"
- title: 2.  Conventions and Terminology
  contents:
  - "2.  Conventions and Terminology\n   In this document, BCP 14 [RFC2119] defines\
    \ the key words \"MUST\",\n   \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    , \"SHOULD\", \"SHOULD NOT\",\n   \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\".  In\n   addition, BCP 15 indicates requirement levels for\
    \ compliant\n   implementations.\n   The following additional terms are defined\
    \ for use in this document:\n   Application Server:  A SIP [RFC3261] application\
    \ server (AS) is a\n      control client that hosts and executes services such\
    \ as\n      interactive media and conferencing in an operator's network.  An\n\
    \      AS controls the media server (MS), influencing and impacting the\n    \
    \  SIP sessions terminating on an MS, which the AS can have\n      established,\
    \ for example, using SIP third-party call control.\n   Media Server:  A media\
    \ server (MS) processes media streams on behalf\n      of an AS by offering functionality\
    \ such as interactive media,\n      conferencing, and transcoding to the end user.\
    \  Interactive media\n      functionality is realized by way of dialogs, which\
    \ are identified\n      by a URI and initiated by the application server.\n  \
    \ MS Conference:  An MS Conference provides the media-related mixing\n      resources\
    \ and services for conferences.  In this document, an MS\n      Conference is\
    \ often referred to simply as a conference.\n   MS Connection:  An MS connection\
    \ represents the termination on a\n      media server of one or more RTP [RFC3550]\
    \ sessions that are\n      associated to a single SIP dialog.  A media server\
    \ receives media\n      from the output(s) of a connection, and it transmits media\
    \ on the\n      input(s) of a connection.\n   Media Stream:  A media stream on\
    \ a media server represents a media\n      flow between either a connection and\
    \ a conference, between two\n      connections, or between two conferences.  Streams\
    \ can be audio or\n      video and can be bidirectional or unidirectional.\n"
- title: 3.  Control Package Definition
  contents:
  - "3.  Control Package Definition\n   This section fulfills the mandatory requirement\
    \ for information that\n   MUST be specified during the definition of a Control\
    \ Framework\n   Package, as detailed in Section 8 of [RFC6230].\n"
- title: 3.1.  Control Package Name
  contents:
  - "3.1.  Control Package Name\n   The Control Framework requires a Control Package\
    \ definition to\n   specify and register a unique name.  The name and version\
    \ of this\n   Control Package is \"msc-mixer/1.0\" (Media Server Control - Mixer\
    \ -\n   version 1.0).  Its IANA registration is specified in Section 8.1.\n  \
    \ Since this is the initial (\"1.0\") version of the Control Package,\n   there\
    \ are no backwards compatibility issues to address.\n"
- title: 3.2.  Framework Message Usage
  contents:
  - "3.2.  Framework Message Usage\n   The Control Framework requires a Control Package\
    \ to explicitly detail\n   the control messages that can be used as well as provide\
    \ an\n   indication of directionality between entities.  This will include\n \
    \  which role type is allowed to initiate a request type.\n   This package specifies\
    \ CONTROL and response messages in terms of XML\n   elements defined in Section\
    \ 4, where the message bodies have the MIME\n   media type defined in Section\
    \ 8.4.  These elements describe requests,\n   responses, and notifications, and\
    \ all are contained within a root\n   <mscmixer> element (Section 4.1).\n   In\
    \ this package, the MS operates as a Control Server in receiving\n   requests\
    \ from, and sending responses to, the AS (operating as a\n   Control Client).\
    \  Mixer management requests and responses are defined\n   in Section 4.2.  Audit\
    \ requests and responses are defined in\n   Section 4.3.  Mixer management and\
    \ audit responses are carried in a\n   framework 200 response or REPORT message\
    \ bodies.  This package's\n   response codes are defined in Section 4.6.\n   Note\
    \ that package responses are different from framework response\n   codes.  Framework\
    \ error response codes (see Section 7 of [RFC6230])\n   are used when the request\
    \ or event notification is invalid, for\n   example, a request is invalid XML\
    \ (400) or not understood (500).\n   The MS also operates as a Control Client\
    \ in sending event\n   notification to the AS (Control Server).  Event notifications\n\
    \   (Section 4.2.4) are carried in CONTROL message bodies.  The AS MUST\n   respond\
    \ with a Control Framework 200 response.\n"
- title: 3.3.  Common XML Support
  contents:
  - "3.3.  Common XML Support\n   The Control Framework requires a Control Package\
    \ definition to\n   specify if the attributes for media dialog or conference references\n\
    \   are required.\n   This package requires that the XML schema in Appendix A.1\
    \ of\n   [RFC6230] MUST be supported for media dialogs and conferences.\n   The\
    \ package uses 'connectionid' and 'conferenceid' attributes for\n   various element\
    \ definitions (Section 4).  The XML schema (Section 5)\n   imports the definitions\
    \ of these attributes from the framework\n   schema.\n"
- title: 3.4.  CONTROL Message Body
  contents:
  - "3.4.  CONTROL Message Body\n   The Control Framework requires a Control Package\
    \ to define the\n   control body that can be contained within a CONTROL command\
    \ request\n   and to indicate the location of detailed syntax definitions and\n\
    \   semantics for the appropriate body types.\n   When operating as a Control\
    \ Server, the MS receives CONTROL messages\n   with the MIME media type defined\
    \ in Section 8.4 and a body containing\n   a <mscmixer> element (Section 4.1)\
    \ with either a mixer management or\n   audit request child element.\n   The following\
    \ mixer management request elements are carried in\n   CONTROL message bodies\
    \ to MS: <createconference> (Section 4.2.1.1),\n   <modifyconference> (Section\
    \ 4.2.1.2), <destroyconference>\n   (Section 4.2.1.3), <join> (Section 4.2.2.2),\
    \ <modifyjoin>\n   (Section 4.2.2.3), and <unjoin> (Section 4.2.2.4) elements.\n\
    \   The <audit> request element (Section 4.3.1) is also carried in\n   CONTROL\
    \ message bodies.\n   When operating as a Control Client, the MS sends CONTROL\
    \ messages\n   with the MIME media type defined in Section 8.4 and a body containing\n\
    \   a <mscmixer> element (Section 4.1) with a notification <event> child\n   element\
    \ (Section 4.2.4).\n"
- title: 3.5.  REPORT Message Body
  contents:
  - "3.5.  REPORT Message Body\n   The Control Framework requires a Control Package\
    \ definition to define\n   the REPORT body that can be contained within a REPORT\
    \ command\n   request, or to indicate that no report package body is required.\n\
    \   This section indicates the location of detailed syntax definitions\n   and\
    \ semantics for the appropriate body types.\n   When operating as a Control Server,\
    \ the MS sends REPORT bodies with\n   the MIME media type defined in Section 8.4\
    \ and a <mscmixer> element\n   with a response child element.  The response element\
    \ for mixer\n   management requests is a <response> element (Section 4.2.3). \
    \ The\n   response element for an audit request is a <auditresponse> element\n\
    \   (Section 4.3.2).\n"
- title: 3.6.  Audit
  contents:
  - "3.6.  Audit\n   The Control Framework encourages Control Packages to specify\
    \ whether\n   auditing is available, how it is triggered, as well as the query/\n\
    \   response formats.\n   This Control Package supports auditing of package capabilities\
    \ and\n   mixers on the MS.  An audit request is carried in a CONTROL message\n\
    \   and an audit response in a REPORT message (or a 200 response to the\n   CONTROL\
    \ if it can execute the audit in time).\n   The syntax and semantics of audit\
    \ request and response elements are\n   defined in Section 4.3.\n"
- title: 3.7.  Examples
  contents:
  - "3.7.  Examples\n   The Control Framework recommends Control Packages to provide\
    \ a range\n   of message flows that represent common flows using the package and\n\
    \   this framework document.\n   This Control Package provides examples of such\
    \ message flows in\n   Section 6.\n"
- title: 4.  Element Definitions
  contents:
  - "4.  Element Definitions\n   This section defines the XML elements for this package.\
    \  The elements\n   are defined in the XML namespace specified in Section 8.2.\n\
    \   The root element is <mscmixer> (Section 4.1).  All other XML elements\n  \
    \ (requests, responses, and notification elements) are contained within\n   it.\
    \  Child elements describe mixer management (Section 4.2) and audit\n   (Section\
    \ 4.3) functionality.  Response status codes are defined in\n   Section 4.6 and\
    \ type definitions in Section 4.7.\n   Implementation of this Control Package\
    \ MUST address the security\n   considerations described in Section 7.\n   Implementation\
    \ of this Control Package MUST adhere to the syntax and\n   semantics of XML elements\
    \ defined in this section and the schema\n   (Section 5).  The XML schema supports\
    \ extensibility by allowing\n   attributes and elements from other namespaces.\
    \  Implementations MAY\n   support attributes and elements from other (foreign)\
    \ namespaces.  If\n   an MS implementation receives a <mscmixer> element containing\n\
    \   attributes or elements from another namespace, which it does not\n   support,\
    \ the MS sends a 428 response (Section 4.6).\n   Extensible attributes and elements\
    \ are not described in this section.\n   In all other cases where there is a difference\
    \ in constraints between\n   the XML schema and the textual description of elements\
    \ in this\n   section, the textual definition takes priority.\n   Some elements\
    \ in this Control Package contain attributes whose value\n   is descriptive text\
    \ primarily for diagnostic use.  The implementation\n   can indicated the language\
    \ used in the descriptive text by means of a\n   'desclang' attribute [RFC2277].\
    \  The 'desclang' attribute can appear\n   on the root element as well as selected\
    \ subordinate elements (see\n   Section 4.1).  The 'desclang' attribute value\
    \ on the root element\n   applies to all 'desclang' attributes in subordinate\
    \ elements unless\n   the subordinate element has an explicit 'desclang' attribute\
    \ that\n   overrides it.\n   Usage examples are provided in Section 6.\n"
- title: 4.1.  <mscmixer>
  contents:
  - "4.1.  <mscmixer>\n   The <mscmixer> element has the following attributes (in\
    \ addition to\n   standard XML namespace attributes such as 'xmlns'):\n   version:\
    \  a string specifying the mscmixer package version.  The\n      value is fixed\
    \ as \"1.0\" for this version of the package.  The\n      attribute is mandatory.\n\
    \   desclang:  specifies the language used in descriptive text attributes\n  \
    \    of subordinate elements (unless the subordinate element provides a\n    \
    \  'desclang' attribute that overrides the value for its descriptive\n      text\
    \ attributes).  The descriptive text attributes on subordinate\n      elements\
    \ include: the 'reason' attribute on <response>\n      (Section 4.2.3), <unjoin-notify>\
    \ (Section 4.2.4.2),\n      <conferenceexit> (Section 4.2.4.3), and <auditresponse>\n\
    \      (Section 4.3.2).  A valid value is a language identifier\n      (Section\
    \ 4.7.7).  The attribute is optional.  The default value is\n      \"i-default\"\
    \ (BCP 47 [RFC5646]).\n   The <mscmixer> element has the following defined child\
    \ elements, only\n   one of which can occur:\n   1.  mixer management elements\
    \ defined in Section 4.2:\n       <createconference>:  create and configure a\
    \ new conference mixer.\n          See Section 4.2.1.1\n       <modifyconference>:\
    \  modify the configuration of an existing\n          conference mixer.  See Section\
    \ 4.2.1.2\n       <destroyconference>:  destroy an existing conference mixer.\
    \  See\n          Section 4.2.1.3\n       <join>:  create and configure media\
    \ streams between connections\n          and/or conferences (for example, add\
    \ a participant to a\n          conference).  See Section 4.2.2.2\n       <modifyjoin>:\
    \  modify the configuration of joined media streams.\n          See Section 4.2.2.3\n\
    \       <unjoin>:  delete a media stream (for example, remove a\n          participant\
    \ from a conference).  See Section 4.2.2.4\n       <response>:  response to a\
    \ mixer request.  See Section 4.2.3\n       <event>:  mixer or subscription notification.\
    \  See Section 4.2.4\n   2.  audit elements defined in Section 4.3:\n       <audit>:\
    \  audit package capabilities and managed mixers.  See\n          Section 4.3.1\n\
    \       <auditresponse>:  response to an audit request.  See\n          Section\
    \ 4.3.2\n   For example, a request to the MS to create a conference mixer is as\n\
    \   follows:\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n    <createconference/>\n   </mscmixer>\n   And a response from the MS that\
    \ the conference was successfully\n   created is as follows:\n   <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\n     desclang=\"en\">\n    <response\
    \ status=\"200\" conferenceid=\"conference1\"\n      reason=\"conference created\"\
    />\n   </mscmixer>\n"
- title: 4.2.  Mixer Elements
  contents:
  - "4.2.  Mixer Elements\n   This section defines the mixer management XML elements\
    \ for this\n   Control Package.  These elements are divided into requests,\n \
    \  responses, and notifications.\n   Request elements are sent to the MS to request\
    \ a specific mixer\n   operation to be executed.  The following request elements\
    \ are\n   defined:\n   <createconference>:  create and configure a new a conference\
    \ mixer.\n      See Section 4.2.1.1\n   <modifyconference>:  modify the configuration\
    \ of an existing\n      conference mixer.  See Section 4.2.1.2\n   <destroyconference>:\
    \  destroy an existing conference mixer.  See\n      Section 4.2.1.3\n   <join>:\
    \  create and configure media streams between connections\n      and/or conferences\
    \ (for example, add a participant to a\n      conference).  See Section 4.2.2.2\n\
    \   <modifyjoin>:  modify the configuration of joined media streams.  See\n  \
    \    Section 4.2.2.3\n   <unjoin>:  delete a media stream (for example, remove\
    \ a participant\n      from a conference).  See Section 4.2.2.4\n   Responses\
    \ from the MS describe the status of the requested operation.\n   Responses are\
    \ specified in a <response> element (Section 4.2.3) that\n   includes a mandatory\
    \ attribute describing the status in terms of a\n   numeric code.  Response status\
    \ codes are defined in Section 4.6.  The\n   MS MUST respond to a request message\
    \ with a response message.  If the\n   MS is not able to process the request and\
    \ carry out the mixer\n   operation (in whole or in part), then the request has\
    \ failed: the MS\n   MUST ensure that no part of the requested mixer operation\
    \ is carried\n   out, and the MS MUST indicate the class of failure using an\n\
    \   appropriate 4xx response code.  Unless an error response code is\n   specified\
    \ for a class of error within this section, implementations\n   follow Section\
    \ 4.6 in determining the appropriate status code for the\n   response.\n   Notifications\
    \ are sent from the MS to provide updates on the status\n   of a mixer operation\
    \ or subscription.  Notifications are specified in\n   an <event> element (Section\
    \ 4.2.4).\n"
- title: 4.2.1.  Conference Elements
  contents:
  - '4.2.1.  Conference Elements

    '
- title: 4.2.1.1.  <createconference>
  contents:
  - "4.2.1.1.  <createconference>\n   The <createconference> element is sent to the\
    \ MS to request creation\n   of a new conference (multiparty) mixer.\n   The <createconference>\
    \ element has the following attributes:\n   conferenceid:  string indicating a\
    \ unique name for the new\n      conference.  If this attribute is not specified,\
    \ the MS MUST\n      create a unique name for the conference.  The value is used\
    \ in\n      subsequent references to the conference (e.g., as conferenceid in\n\
    \      a <response>).  The attribute is optional.  There is no default\n     \
    \ value.\n   reserved-talkers:  indicates the requested number of guaranteed\n\
    \      speaker slots to be reserved for the conference.  A valid value is\n  \
    \    a non-negative integer (see Section 4.7.2).  The attribute is\n      optional.\
    \  The default value is 0.\n   reserved-listeners:  indicates the requested number\
    \ of guaranteed\n      listener slots to be reserved for the conference.  A valid\
    \ value\n      is a non-negative integer (see Section 4.7.2).  The attribute is\n\
    \      optional.  The default value is 0.\n   The <createconference> element has\
    \ the following sequence of child\n   elements:\n   <codecs>:  an element to configure\
    \ the codecs supported by the\n      conference (see Section 4.4).  If codecs\
    \ are specified, then they\n      impose limitations on media capability when\
    \ the MS attempts to\n      join the conference to other entities (see Sections\
    \ 4.2.2.2 and\n      4.2.2.3).  The element is optional.\n   <audio-mixing>: \
    \ an element to configure the audio mixing\n      characteristics of a conference\
    \ (see Section 4.2.1.4.1).  The\n      element is optional.\n   <video-layouts>:\
    \  an element to configure the video layouts of a\n      conference (see Section\
    \ 4.2.1.4.2).  The element is optional.\n   <video-switch>:  an element to configure\
    \ the video switch policy for\n      the layout of a conference (see Section 4.2.1.4.3).\
    \  The element\n      is optional.\n   <subscribe>:  an element to request subscription\
    \ to conference\n      events. (see Section 4.2.1.4.4).  The element is optional.\n\
    \   If the 'conferenceid' attribute specifies a value that is already\n   used\
    \ by an existing conference, the MS reports an error (405) and\n   MUST NOT create\
    \ a new conference and MUST NOT affect the existing\n   conference.\n   If the\
    \ MS is unable to configure the conference according to\n   specified 'reserved-talkers'\
    \ or 'reserved-listeners' attributes, the\n   MS reports an error (420) and MUST\
    \ NOT create the conference.\n   If the MS is unable to configure the conference\
    \ according to a\n   specified <audio-mixing> element, the MS reports an error\
    \ (421) and\n   MUST NOT create the conference.\n   If the MS is unable to configure\
    \ the conference according to a\n   specified <video-layouts> element, the MS\
    \ reports an error (423) and\n   MUST NOT create the conference.\n   If the MS\
    \ is unable to configure the conference according to a\n   specified <video-switch>\
    \ element, the MS reports an error (424) and\n   MUST NOT create the conference.\n\
    \   If the MS is unable to configure the conference according to a\n   specified\
    \ <codecs> element, the MS reports an error (425) and MUST\n   NOT create the\
    \ conference.\n   When a MS has finished processing a <createconference> request,\
    \ it\n   MUST reply with an appropriate <response> element (Section 4.2.3).\n\
    \   For example, a request to create an audio video conference mixer with\n  \
    \ specified codecs, video layout, video switch, and subscription is as\n   follows:\n\
    \   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n  \
    \  <createconference conferenceid=\"conference1\"\n          reserved-talkers=\"\
    1\" reserved-listeners=\"10\">\n      <codecs>\n       <codec name=\"video\">\n\
    \        <subtype>H264</subtype>\n       </codec>\n       <codec name=\"audio\"\
    >\n        <subtype>PCMA</subtype>\n       </codec>\n      </codecs>\n      <audio-mixing\
    \ type=\"nbest\"/>\n      <video-layouts>\n       <video-layout min-participants=\"\
    1\"><single-view/></video-layout>\n       <video-layout min-participants=\"2\"\
    ><dual-view/></video-layout>\n       <video-layout min-participants=\"3\"><quad-view/></video-layout>\n\
    \      </video-layouts>\n      <video-switch interval=\"5\"><vas/></video-switch>\n\
    \      <subscribe>\n       <active-talkers-sub interval=\"4\"/>\n      </subscribe>\n\
    \    </createconference>\n   </mscmixer>\n   A response from the MS if the conference\
    \ was successfully created is\n   as follows:\n   <mscmixer version=\"1.0\" xmlns=\"\
    urn:ietf:params:xml:ns:msc-mixer\">\n    <response status=\"200\" conferenceid=\"\
    conference1\"/>\n   </mscmixer>\n   Alternatively, a response if the MS could\
    \ not create the conference\n   due to a lack of support for the H264 codec is\
    \ as follows:\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n    <response status=\"425\" conferenceid=\"conference1\"\n              reason=\"\
    H264 codec not supported\"/>\n   </mscmixer>\n"
- title: 4.2.1.2.  <modifyconference>
  contents:
  - "4.2.1.2.  <modifyconference>\n   The <modifyconference> element is sent to the\
    \ MS to request\n   modification of an existing conference.\n   The <modifyconference>\
    \ element has the following attribute:\n   conferenceid:  string indicating the\
    \ name of the conference to\n      modify.  This attribute is mandatory.\n   The\
    \ <modifyconference> element has the following sequence of child\n   elements\
    \ (one or more):\n   <codecs>:  an element to configure the codecs supported by\
    \ the\n      conference (see Section 4.4).  If codecs are specified, then they\n\
    \      impose limitations in media capability when the MS attempts to\n      join\
    \ the conference to other entities (see Sections 4.2.2.2 and\n      4.2.2.3).\
    \  Existing conference participants are unaffected by any\n      policy change.\
    \  The element is optional.\n   <audio-mixing>:  an element to configure the audio\
    \ mixing\n      characteristics of a conference (see Section 4.2.1.4.1).  The\n\
    \      element is optional.\n   <video-layouts>:  an element to configure the\
    \ video layouts of a\n      conference (see Section 4.2.1.4.2).  The element is\
    \ optional.\n   <video-switch>:  an element to configure the video switch policy\
    \ for\n      the layout of a conference (see Section 4.2.1.4.3).  The element\n\
    \      is optional.\n   <subscribe>:  an element to request subscription to conference\n\
    \      events. (see Section 4.2.1.4.4).  The element is optional.\n   If the 'conferenceid'\
    \ attribute specifies the name of a conference\n   that does not exist, the MS\
    \ reports an error (406).\n   If the MS is unable to configure the conference\
    \ according to a\n   specified <audio-mixing> element, the MS reports an error\
    \ (421) and\n   MUST NOT modify the conference in any way.\n   If the MS is unable\
    \ to configure the conference according to a\n   specified <video-layouts> element,\
    \ the MS reports an error (423) and\n   MUST NOT modify the conference in any\
    \ way.\n   If the MS is unable to configure the conference according to a\n  \
    \ specified <video-switch> element, the MS reports an error (424) and\n   MUST\
    \ NOT modify the conference in any way.\n   If the MS is unable to configure the\
    \ conference according to a\n   specified <codecs> element, the MS reports an\
    \ error (425) and MUST\n   NOT modify the conference.\n   When a MS has finished\
    \ processing a <modifyconference> request, it\n   MUST reply with an appropriate\
    \ <response> element (Section 4.2.3).\n"
- title: 4.2.1.3.  <destroyconference>
  contents:
  - "4.2.1.3.  <destroyconference>\n   The <destroyconference> element is sent to\
    \ the MS to request\n   destruction of an existing conference.\n   The <destroyconference>\
    \ element has the following attribute:\n   conferenceid:  string indicating the\
    \ name of the conference to\n      destroy.  This attribute is mandatory.\n  \
    \ The <destroyconference> element does not specify any child elements.\n   If\
    \ the 'conferenceid' attribute specifies the name of a conference\n   that does\
    \ not exist, the MS reports an error (406).\n   When a MS has finished processing\
    \ a <destroyconference> request, it\n   MUST reply with an appropriate <response>\
    \ element (Section 4.2.3).\n   Successfully destroying the conference (status\
    \ code 200) will result\n   in all connection or conference participants being\
    \ removed from the\n   conference mixer, <unjoin-notify> notification events\n\
    \   (Section 4.2.4.2) being sent for each conference participant, and a\n   <conferenceexit>\
    \ notification event (Section 4.2.4.3) indicating that\n   conference has exited.\
    \  A <response> with any other status code\n   indicates that the conference mixer\
    \ still exists and participants are\n   still joined to the mixer.\n"
- title: 4.2.1.4.  Conference Configuration
  contents:
  - "4.2.1.4.  Conference Configuration\n   The elements in this section are used\
    \ to establish and modify the\n   configuration of conferences.\n"
- title: 4.2.1.4.1.  <audio-mixing>
  contents:
  - "4.2.1.4.1.  <audio-mixing>\n   The <audio-mixing> element defines the configuration\
    \ of the\n   conference audio mix.\n   The <audio-mixing> element has the following\
    \ attributes:\n   type:  is a string indicating the audio stream mixing policy.\n\
    \      Defined values are: \"nbest\" (where the N best (loudest)\n      participant\
    \ signals are mixed) and \"controller\" (where the\n      contributing participant(s)\
    \ is/are selected by the controlling AS\n      via an external floor control protocol).\
    \  The attribute is\n      optional.  The default value is \"nbest\".\n   n: indicates\
    \ the number of eligible participants included in the\n      conference audio\
    \ mix.  An eligible participant is a participant\n      who contributes audio\
    \ to the conference.  Inclusion is based on\n      having the greatest audio energy.\
    \  A valid value is a non-negative\n      integer (see Section 4.7.2).  A value\
    \ of 0 indicates that all\n      participants contributing audio to the conference\
    \ are included in\n      the audio mix.  The default value is 0.  The element\
    \ is optional.\n   If the 'type' attribute does not have the value \"nbest\",\
    \ the MS\n   ignores the 'n' attribute.\n   The <audio-mixing> element has no\
    \ child elements.\n   For example, a fragment where the audio-mixing policy is\
    \ set to\n   \"nbest\" with 3 participants to be included is as follows:\n   \
    \   <audio-mixing type=\"nbest\" n=\"3\"/>\n   If the conference had 200 participants\
    \ of whom 30 contributed audio,\n   then there would be 30 eligible participants\
    \ for the audio mix.  Of\n   these, the 3 loudest participants would have their\
    \ audio included in\n   the conference.\n"
- title: 4.2.1.4.2.  <video-layouts>
  contents:
  - "4.2.1.4.2.  <video-layouts>\n   The <video-layouts> element describes the video\
    \ presentation layout\n   configuration for participants providing a video input\
    \ stream to the\n   conference.  This element allows multiple video layouts to\
    \ be\n   specified so that the MS automatically changes layout depending on\n\
    \   the number of video-enabled participants.\n   The <video-layouts> element\
    \ has no attributes.\n   The <video-layouts> element has the following sequence\
    \ of child\n   elements (one or more):\n   <video-layout>:  element describing\
    \ a video layout\n      (Section 4.2.1.4.2.1).\n   If the MS does not support\
    \ video conferencing at all, or does not\n   support multiple video layouts, or\
    \ does not support a specific video\n   layout, the MS reports an 423 error in\
    \ the response to the request\n   element containing the <video-layouts> element.\n\
    \   An MS MAY support more than one <video-layout> element, although only\n  \
    \ one layout can be active at a time.  A <video-layout> is active if\n   the number\
    \ of participants in the conference is equal to or greater\n   than the value\
    \ of its 'min-participants' attribute, but less than the\n   value of the 'min-participants'\
    \ attribute for any other <video-\n   layout> element.  An MS reports an error\
    \ (400) if more than one\n   <video-layout> has the same value for the 'min-participants'\n\
    \   attribute.  When the number of regions within the active layout is\n   greater\
    \ than the number of participants in the conference, the\n   display of unassigned\
    \ regions is implementation-specific.\n   The assignment of participant video\
    \ streams to regions within the\n   layout is according to the video switch policy\
    \ specified by the\n   <video-switch> element (Section 4.2.1.4.3).\n   For example,\
    \ a fragment describing a single layout is as follows:\n   <video-layouts>\n \
    \    <video-layout><single-view/></video-layout>\n   </video-layouts>\n   A fragment\
    \ describing a sequence of layouts is as follows:\n   <video-layouts>\n     <video-layout\
    \ min-participants=\"1\"><single-view/></video-layout>\n     <video-layout min-participants=\"\
    2\"><dual-view/></video-layout>\n     <video-layout min-participants=\"3\"><quad-view/></video-layout>\n\
    \     <video-layout min-participants=\"5\"><multiple-3x3/></video-layout>\n  \
    \ </video-layouts>\n   When the conference has one participant providing a video\
    \ input\n   stream to the conference, then the single-view format is used.  When\n\
    \   the conference has two such participants, the dual-view layout is\n   used.\
    \  When the conference has three or four participants, the quad-\n   view layout\
    \ is used.  When the conference has five or more\n   participants, the multiple-3x3\
    \ layout is used.\n"
- title: 4.2.1.4.2.1.  <video-layout>
  contents:
  - "4.2.1.4.2.1.  <video-layout>\n   The <video-layout> element describes a video\
    \ layout containing one or\n   more regions in which participant video input streams\
    \ are displayed.\n   The <video-layout> element has the following attribute:\n\
    \   min-participants:  the minimum number of conference participants\n      needed\
    \ to allow this layout to be active.  A valid value is a\n      positive integer\
    \ (see Section 4.7.3).  The attribute is optional.\n      The default value is\
    \ 1.\n   The <video-layout> element has one child element specifying the video\n\
    \   layout.  An MS MAY support the predefined video layouts defined in\n   the\
    \ conference information data model for centralized conferencing\n   (XCON) [RFC6501]:\
    \ <single-view>, <dual-view>, <dual-view-crop>,\n   <dual-view-2x1>, <dual-view-2x1-crop>,\
    \ <quad-view>, <multiple-3x3>,\n   <multiple-4x4>, and <multiple-5x1>.\n   The\
    \ MS MAY support other video layouts.  Non-XCON layouts MUST be\n   specified\
    \ using an element from a namespace other than the one used\n   in this specification,\
    \ for example:\n   <video-layout>\n    <mylayout xmlns='http://example.com/foo'>my-single-view</mylayout>\n\
    \   </video-layout>\n   If the MS does not support the specified video layout\
    \ configuration,\n   then the MS reports a 423 error (Section 4.6) in the response\
    \ to the\n   request element containing the <video-layout> element.\n   Each video\
    \ layout has associated with it one or more regions.  The\n   XCON layouts are\
    \ associated with the following named regions:\n   <single-view/>:  layout with\
    \ one stream in a single region as shown\n      in Figure 1.\n               \
    \                +-----------+\n                               |           |\n\
    \                               |           |\n                              \
    \ |     1     |\n                               |           |\n              \
    \                 |           |\n                               +-----------+\n\
    \                      Figure 1: single-view video layout\n   <dual-view/>:  layout\
    \ presenting two streams side-by-side in two\n      regions as shown in Figure\
    \ 2.  The MS MUST NOT alter the aspect\n      ratio of each stream to fit the\
    \ region, and hence the MS might\n      need to blank out part of each region.\n\
    \                         +-----------+-----------+\n                        \
    \ |           |           |\n                         |           |          \
    \ |\n                         |     1     |     2     |\n                    \
    \     |           |           |\n                         |           |      \
    \     |\n                         +-----------+-----------+\n                \
    \       Figure 2: dual-view video layout\n   <dual-view-crop/>:  layout presenting\
    \ two streams side-by-side in two\n      regions as shown in Figure 3.  The MS\
    \ MUST alter the aspect ratio\n      of each stream to fit its region so that\
    \ no blanking is required.\n                         +-----------+-----------+\n\
    \                         |           |           |\n                        \
    \ |           |           |\n                         |     1     |     2    \
    \ |\n                         |           |           |\n                    \
    \     |           |           |\n                         +-----------+-----------+\n\
    \                    Figure 3: dual-view-crop video layout\n   <dual-view-2x1/>:\
    \  layout presenting two streams, one above the\n      other, in two regions as\
    \ shown in Figure 4.  The MS MUST NOT alter\n      the aspect ratio of each stream\
    \ to fit its region, and hence the\n      MS might need to blank out part of each\
    \ region.\n                               +-----------+\n                    \
    \           |           |\n                               |           |\n    \
    \                           |     1     |\n                               |  \
    \         |\n                               |           |\n                  \
    \             +-----------+\n                               |           |\n  \
    \                             |           |\n                               |\
    \     2     |\n                               |           |\n                \
    \               |           |\n                               +-----------+\n\
    \                     Figure 4: dual-view-2x1 video layout\n   <dual-view-2x1-crop/>:\
    \  layout presenting two streams one above the\n      other in two regions as\
    \ shown in Figure 5.  The MS MUST alter the\n      aspect ratio of each stream\
    \ to fit its region so that no blanking\n      is required.\n                \
    \               +-----------+\n                               |           |\n\
    \                               |           |\n                              \
    \ |     1     |\n                               |           |\n              \
    \                 |           |\n                               +-----------+\n\
    \                               |           |\n                              \
    \ |           |\n                               |     2     |\n              \
    \                 |           |\n                               |           |\n\
    \                               +-----------+\n                  Figure 5: dual-view-2x1-crop\
    \ video layout\n   <quad-view/>:  layout presenting four equal-sized regions in\
    \ a 2x2\n      layout as shown in Figure 6.  Typically, the aspect ratio of the\n\
    \      streams is preserved, so blanking is required.\n                      \
    \   +-----------+-----------+\n                         |           |        \
    \   |\n                         |           |           |\n                  \
    \       |     1     |     2     |\n                         |           |    \
    \       |\n                         |           |           |\n              \
    \           +-----------+-----------+\n                         |           |\
    \           |\n                         |           |           |\n          \
    \               |     3     |     4     |\n                         |        \
    \   |           |\n                         |           |           |\n      \
    \                   +-----------+-----------+\n                       Figure 6:\
    \ quad-view video layout\n   <multiple-3x3/>:  layout presenting nine equal-sized\
    \ regions in a 3x3\n      layout as shown in Figure 7.  Typically, the aspect\
    \ ratio of the\n      streams is preserved, so blanking is required.\n       \
    \            +-----------+-----------+-----------+\n                   |     \
    \      |           |           |\n                   |           |           |\
    \           |\n                   |     1     |     2     |     3     |\n    \
    \               |           |           |           |\n                   |  \
    \         |           |           |\n                   +-----------+-----------+-----------+\n\
    \                   |           |           |           |\n                  \
    \ |           |           |           |\n                   |     4     |    \
    \ 5     |     6     |\n                   |           |           |          \
    \ |\n                   |           |           |           |\n              \
    \     +-----------+-----------+-----------+\n                   |           |\
    \           |           |\n                   |           |           |      \
    \     |\n                   |    7      |     8     |     9     |\n          \
    \         |           |           |           |\n                   |        \
    \   |           |           |\n                   +-----------+-----------+-----------+\n\
    \                     Figure 7: multiple-3x3 video layout\n   <multiple-4x4/>:\
    \  layout presenting 16 equal-sized regions in a 4x4\n      layout as shown in\
    \ Figure 8.  Typically, the aspect ratio of the\n      streams is preserved, so\
    \ blanking is required.\n             +-----------+-----------+-----------+-----------+\n\
    \             |           |           |           |           |\n            \
    \ |           |           |           |           |\n             |     1    \
    \ |     2     |     3     |     4     |\n             |           |          \
    \ |           |           |\n             |           |           |          \
    \ |           |\n             +-----------+-----------+-----------+-----------+\n\
    \             |           |           |           |           |\n            \
    \ |           |           |           |           |\n             |     5    \
    \ |     6     |     7     |     8     |\n             |           |          \
    \ |           |           |\n             |           |           |          \
    \ |           |\n             +-----------+-----------+-----------+-----------+\n\
    \             |           |           |           |           |\n            \
    \ |           |           |           |           |\n             |     9    \
    \ |    10     |    11     |    12     |\n             |           |          \
    \ |           |           |\n             |           |           |          \
    \ |           |\n             +-----------+-----------+-----------+-----------+\n\
    \             |           |           |           |           |\n            \
    \ |           |           |           |           |\n             |    13    \
    \ |    14     |    15     |    16     |\n             |           |          \
    \ |           |           |\n             |           |           |          \
    \ |           |\n             +-----------+-----------+-----------+-----------+\n\
    \                     Figure 8: multiple-4x4 video layout\n   <multiple-5x1/>:\
    \  layout presents a 5x1 layout as shown in Figure 9\n      where one region will\
    \ occupy 4/9 of the mixed video stream, while\n      the others will each occupy\
    \ 1/9 of the stream.  Typically, the\n      aspect ratio of the streams is preserved,\
    \ so blanking is required.\n                   +-----------------------+-----------+\n\
    \                   |                       |           |\n                  \
    \ |                       |           |\n                   |                \
    \       |     2     |\n                   |                       |          \
    \ |\n                   |                       |           |\n              \
    \     |           1           +-----------+\n                   |            \
    \           |           |\n                   |                       |      \
    \     |\n                   |                       |     3     |\n          \
    \         |                       |           |\n                   |        \
    \               |           |\n                   +-----------+-----------+-----------+\n\
    \                   |           |           |           |\n                  \
    \ |           |           |           |\n                   |    4      |    \
    \ 5     |     6     |\n                   |           |           |          \
    \ |\n                   |           |           |           |\n              \
    \     +-----------+-----------+-----------+\n                     Figure 9: multiple-5x1\
    \ video layout\n"
- title: 4.2.1.4.3.  <video-switch>
  contents:
  - "4.2.1.4.3.  <video-switch>\n   The <video-switch> element describes the configuration\
    \ of the\n   conference policy for how participants' input video streams are\n\
    \   assigned to regions within the active video layout.\n   The <video-switch>\
    \ element has the following child elements defined\n   (one child occurrence only)\
    \ to indicate the video-switching policy of\n   the conference:\n   <vas/>:  (Voice-Activated\
    \ Switching) enables automatic display of the\n      loudest speaker participant\
    \ that is contributing both audio and\n      video to the conference mix.  Participants\
    \ who do not provide an\n      audio stream are not considered for automatic display.\
    \  If a\n      participant provides more than one audio stream, then the policy\n\
    \      for inclusion of such a participant in the VAS is implementation-\n   \
    \   specific; an MS could select one stream, sum audio streams, or\n      ignore\
    \ the participant for VAS consideration.  If there is only\n      one region in\
    \ the layout, then the loudest speaker is displayed\n      there.  If more than\
    \ one region is available, then the loudest\n      speaker is displayed in the\
    \ largest region (if any), and then in\n      the first region from the top-left\
    \ corner of the layout.  The MS\n      assigns the remaining regions based on\
    \ the priority mechanism\n      described in Section 4.2.1.4.3.1.\n   <controller/>:\
    \  enables manual control over video switching.  The\n      controller AS determines\
    \ how the regions are assigned based on an\n      external floor control policy.\
    \  The MS receives <join>,\n      <modifyjoin>, and <unjoin> commands with a <stream>\
    \ element\n      (Section 4.2.2.5) indicating the region where the stream is\n\
    \      displayed.  If no explicit region is specified, the MS assigns the\n  \
    \    region based on the priority mechanism described in\n      Section 4.2.1.4.3.1.\n\
    \   An MS MAY support other video-switching policies.  Other policies\n   MUST\
    \ be specified using an element from a namespace other than the\n   one used in\
    \ this specification.  For example:\n   <video-switch>\n    <mypolicy xmlns='http://example.com/foo'/>\n\
    \   </video-switch>\n   The <video-switch> element has the following attributes:\n\
    \   interval:  specifies the period between video switches as a number of\n  \
    \    seconds.  In the case of <vas/> policy, a speaker needs to be the\n     \
    \ loudest speaker for the interval before the switch takes place.  A\n      valid\
    \ value is a non-negative integer (see Section 4.7.2).  A\n      value of 0 indicates\
    \ that switching is applied immediately.  The\n      attribute is optional.  The\
    \ default value is 3 (seconds).\n   activespeakermix:  indicates whether or not\
    \ the active (loudest)\n      speaker participant receives a video stream without\
    \ themselves\n      displayed in the case of the <vas/> switching policy.  If\
    \ enabled,\n      the MS needs to generate two video streams for each conference\n\
    \      mix: one for the active speaker participant without themselves\n      displayed\
    \ (details of this video layout are implementation-\n      specific) and one for\
    \ other participants (as described in the\n      <vas/> switching policy above).\
    \  A valid value is a boolean (see\n      Section 4.7.1).  A value of \"true\"\
    \ indicates that a separate video\n      mix is generated for the active speaker\
    \ without themselves being\n      displayed.  A value of \"false\" indicates that\
    \ all participants\n      receive the same video mix.  The attribute is optional.\
    \  The\n      default value is \"false\".  If the 'type' attribute is not set\
    \ to\n      <vas/>, the MS ignores this attribute.\n   If the MS does not support\
    \ the specified video-switching policy or\n   other configuration parameters (including\
    \ separate active speaker\n   video mixes), then the MS reports a 424 error (Section\
    \ 4.6) in the\n   response to the request element containing the <video-switch>\n\
    \   element.\n   If the MS receives a <join> or <modifyjoin> request containing\
    \ a\n   <stream> element (Section 4.2.2.5) that specifies a region and the\n \
    \  conference video-switching policy is set to <vas/>, then the MS\n   ignores\
    \ the region (i.e., conference-switching policy takes\n   precedence).\n   If\
    \ the MS receives a <join> or <modifyjoin> request containing a\n   <stream> element\
    \ (Section 4.2.2.5) specifying a region that is not\n   defined for the currently\
    \ active video layout, the MS MUST NOT report\n   an error.  Even though the participant\
    \ is not currently visible, the\n   MS displays the participant if the layout\
    \ changes to one that defines\n   the specified region.\n   For example, a fragment\
    \ specifying a <vas/> video-switching policy\n   with an interval of 2s\n    <video-switch\
    \ interval=\"2\"><vas/></video-switch>\n   For example, a fragment specifying\
    \ a <controller/> video-switching\n   policy where video switching takes place\
    \ immediately is as follows:\n    <video-switch interval=\"0\"><controller/></video-switch>\n"
- title: 4.2.1.4.3.1.  Priority Assignment
  contents:
  - "4.2.1.4.3.1.  Priority Assignment\n   In cases where the video-switching policy\
    \ does not explicitly\n   determine the region to which a participant is assigned,\
    \ the\n   following priority assignment mechanism applies:\n   1.  Each participant\
    \ has a (positive integer) priority value: the\n       lower the value, the higher\
    \ the priority.  The priority value is\n       determined by the <priority> child\
    \ element (Section 4.2.2.5.4) of\n       <stream>.  If not explicitly specified,\
    \ the default priority\n       value is 100.\n   2.  The MS uses priority values\
    \ to assign participants to regions in\n       the video layout which remain unfilled\
    \ after application of the\n       video-switching policy.  The MS MUST dedicate\
    \ larger and/or more\n       prominent portions of the layout to participants\
    \ with higher\n       priority values first (e.g., first, all participants with\n\
    \       priority 1, then those with 2, 3, etc.).\n   3.  The policy for displaying\
    \ participants with the same priority is\n       implementation-specific.\n  \
    \ The MS applies this priority policy each time the video layout is\n   changed\
    \ or updated.  It is RECOMMENDED that the MS does not move a\n   participant from\
    \ one region to another unless required by the video-\n   switching policy when\
    \ an active video layout is updated.\n   This model allows the MS to apply default\
    \ video layouts after\n   applying the video-switching policy.  For example, region\
    \ 2 is\n   statically assigned to Bob, so the priority mechanism only applies\
    \ to\n   regions 1, 3, 4, etc.\n"
- title: 4.2.1.4.4.  <subscribe>
  contents:
  - "4.2.1.4.4.  <subscribe>\n   The <subscribe> element is a container for specifying\
    \ conference\n   notification events to which a controlling entity subscribes.\n\
    \   Notifications of conference events are delivered using the <event>\n   element\
    \ (see Section 4.2.4).\n   The <subscribe> element has no attributes, but has\
    \ the following\n   child element:\n   <active-talkers-sub>:  subscription to\
    \ active talker events\n      (Section 4.2.1.4.4.1).  The element is optional.\n\
    \   The MS MUST support a <active-talkers-sub> subscription.  It MAY\n   support\
    \ other event subscriptions (specified using attributes and\n   child elements\
    \ from a foreign namespace).  If the MS does not support\n   a subscription specified\
    \ in a foreign namespace, it sends a\n   <response> with a 428 status code (see\
    \ Section 4.6).\n"
- title: 4.2.1.4.4.1.  <active-talkers-sub>
  contents:
  - "4.2.1.4.4.1.  <active-talkers-sub>\n   The <active-talkers-sub> element has the\
    \ following attribute:\n   interval:  the minimum amount of time (in seconds)\
    \ that elapses\n      before further active talker events can be generated.  A\
    \ valid\n      value is a non-negative integer (see Section 4.7.2).  A value of\
    \ 0\n      suppresses further notifications.  The attribute is optional.  The\n\
    \      default value is 3 (seconds).\n   The <active-talkers-sub> element has\
    \ no child elements.\n   Active talker notifications are delivered in the <active-talkers-\n\
    \   notify> element (Section 4.2.4.1).\n"
- title: 4.2.2.  Joining Elements
  contents:
  - "4.2.2.  Joining Elements\n   This section contains definitions of the joining\
    \ model\n   (Section 4.2.2.1) as well as the <join> (Section 4.2.2.2),\n   <modifyjoin>\
    \ (Section 4.2.2.3), <unjoin> (Section 4.2.2.4) and\n   <stream> (Section 4.2.2.5)\
    \ elements.\n"
- title: 4.2.2.1.  Joining Model
  contents:
  - "4.2.2.1.  Joining Model\n   The <join> operation creates a media stream between\
    \ a connection and\n   a conference, between connections, or between conferences.\
    \  This\n   section describes the model of conferences and connections and\n \
    \  specifies the behavior for join requests to targets that already have\n   an\
    \ associated media stream.\n   Conferences support multiple inputs and have resources\
    \ to mix them\n   together.  A media server conference in essence is a mixer that\n\
    \   combines media streams.  A simple audio mixer simply sums its input\n   audio\
    \ signals to create a single common output.  Conferences,\n   however, use a more\
    \ complex algorithm so that participants do not\n   hear themselves as part of\
    \ the mix.  That algorithm, sometimes called\n   an \"n-minus mix\", subtracts\
    \ each participants input signal from the\n   summed input signals, creating a\
    \ unique output for each contributing\n   participant.  Each <join> operation\
    \ to a conference uses one of the\n   conference's available inputs and/or outputs,\
    \ to the maximum number\n   of supported participants.\n   A connection is the\
    \ termination of one or more RTP sessions on a\n   media server.  It has a single\
    \ input and output for each media\n   session established by its SIP dialog. \
    \ The output of a connection\n   can feed several different inputs such as both\
    \ a conference mixer and\n   a recording of that participant's audio.\n   Joining\
    \ two connections that are not joined to anything else simply\n   creates a media\
    \ stream from the outputs(s) of one connection to the\n   corresponding inputs(s)\
    \ of the other connection.  It is not necessary\n   to combine media from multiple\
    \ sources in this case.  There are,\n   however, several common scenarios where\
    \ combining media from several\n   sources to create a single input to a connection\
    \ is needed.\n   In the first case, a connection can be receiving media from one\n\
    \   source (for example, a conference), and it is necessary to play an\n   announcement\
    \ to the connection so that both the conference audio and\n   announcement can\
    \ be heard by the conference participant.  This is\n   sometimes referred to as\
    \ a \"whisper announcement\".  An alternative to\n   a whisper announcement is\
    \ to have the announcement preempt the\n   conference media.\n   Another common\
    \ case is the call-center coaching scenario where a\n   supervisor can listen\
    \ to the conversation between an agent and a\n   customer, and provide hints to\
    \ the agent that are not heard by the\n   customer.\n   Both of these cases can\
    \ be solved by having the controlling AS create\n   one or more conferences for\
    \ audio mixing, and then join and unjoin\n   the media streams as required.  A\
    \ better solution is to have the\n   media server automatically mix media streams\
    \ that are requested to be\n   joined to a common input when only the simple summing\
    \ of audio\n   signals as described above is required.  This is the case for both\n\
    \   the use cases presented above.\n   Automatically mixing streams has several\
    \ benefits.  Conceptually, it\n   is straightforward and simple, requiring no\
    \ indirect requests on the\n   part of the controlling AS.  This increases transport\
    \ efficiency and\n   reduces the coordination complexity and the latency of the\
    \ overall\n   operation.  Therefore, it is RECOMMENDED that a media server be\
    \ able\n   to automatically mix at least two audio streams where only the simple\n\
    \   summing of signals is required.\n   When a media server receives a <join>\
    \ request, it MUST automatically\n   mix all of the media streams included in\
    \ the request with any streams\n   already joined to one of the entities identified\
    \ in the request, or\n   it MUST fail the request and MUST NOT join any of the\
    \ streams (and\n   MUST NOT change existing streams of the entities).  A controlling\
    \ AS\n   uses the <createconference> request for generic conferences where the\n\
    \   complex mixing algorithm is required.\n   Specifications that extend this\
    \ package to handle additional media\n   types such as text MUST define the semantics\
    \ of the join operation\n   when multiple streams are requested to be joined to\
    \ a single input,\n   such as that for a connection with a single RTP session\
    \ per media\n   type.\n"
- title: 4.2.2.2.  <join>
  contents:
  - "4.2.2.2.  <join>\n   The <join> element is sent to the MS to request creation\
    \ of one or\n   more media streams either between a connection and a conference,\n\
    \   between connections, or between conferences.  The two entities to\n   join\
    \ are specified by the attributes of <join>.\n   Streams can be of any media type\
    \ and can be bidirectional or\n   unidirectional.  A bidirectional stream is implicitly\
    \ composed of two\n   unidirectional streams that can be manipulated independently.\
    \  The\n   streams to be established are specified by child <stream> elements\n\
    \   (see Section 4.2.2.5).\n   The <join> element has the following attributes:\n\
    \   id1:  an identifier for either a connection or a conference.  The\n      identifier\
    \ MUST conform to the syntax defined in Appendix A.1 of\n      [RFC6230].  The\
    \ attribute is mandatory.\n   id2:  an identifier for either a connection or a\
    \ conference.  The\n      identifier MUST conform to the syntax defined in Appendix\
    \ A.1 of\n      [RFC6230].  The attribute is mandatory.\n   Note: Appendix A.1\
    \ of [RFC6230] defines the semantics for a\n   conference identifier but not its\
    \ syntax.  Media server\n   implementations need to distinguish between conferences\
    \ and\n   connections based upon the values of the 'id1' and 'id2' attributes.\n\
    \   If id1 or id2 specify a conference identifier and the conference does\n  \
    \ not exist on the MS, the MS reports an error (406).  If id1 or id2\n   specify\
    \ a connection identifier and the connection does not exist on\n   the MS, the\
    \ MS reports an error (412).\n   The <join> element has the following child element\
    \ (zero or more):\n   <stream>:   an element that both identifies the media streams\
    \ to join\n      and defines the way that they are to be joined (see\n      Section\
    \ 4.2.2.5).  The element is optional.\n   If no <stream> elements are specified,\
    \ then the default is to join\n   all streams between the entities according to\
    \ the media configuration\n   of the connection or conference.\n   One or more\
    \ <stream> elements can be specified so that individual\n   media streams can\
    \ be controlled independently.  For example, if a\n   connection supports both\
    \ audio and video streams, a <stream> element\n   could be used to indicate that\
    \ only the audio stream is used in\n   receive mode.  In cases where there are\
    \ multiple media streams of the\n   same type for a connection or conference,\
    \ the configuration MUST be\n   explicitly specified using <stream> elements.\n\
    \   Multiple <stream> elements can be specified for precise control over\n   the\
    \ media flow in different directions within the same media stream.\n   One <stream>\
    \ element can be specified for the receiving media flow\n   and another element\
    \ for the sending media flow, where each\n   independently controls features such\
    \ as volume (see child element of\n   <stream> in Section 4.2.2.5).  If there\
    \ is only one <stream> element\n   for a given media specifying a 'sendonly' or\
    \ 'recvonly' direction,\n   then the media flow in the opposite direction is inactive\n\
    \   (established but there's no actual flow of media) unless this leads\n   to\
    \ a stream conflict.\n   If the MS is unable to execute the join as specified\
    \ in <stream>\n   because a <stream> element is in conflict with (a) another <stream>\n\
    \   element, (b) specified connection or conference media capabilities\n   (including\
    \ supported or available codec information), or (c) an\n   Session Description\
    \ Protocol (SDP) label value as part of the\n   connection-id (see Appendix A.1\
    \ of [RFC6230]), then the MS reports an\n   error (407) and MUST NOT join the\
    \ entities and MUST NOT change\n   existing streams of the entities.\n   If the\
    \ MS is unable to execute the join as specified in <stream>\n   elements because\
    \ the MS does not support the media stream\n   configuration, the MS reports an\
    \ error (422) and MUST NOT join the\n   entities and MUST NOT change existing\
    \ streams of the entities.\n   If the MS is unable to join an entity to a conference\
    \ because it is\n   full, then the MS reports an error (410).\n   If the specified\
    \ entities are already joined, then the MS reports an\n   error (408).\n   If\
    \ the MS does not support joining two specified connections\n   together, the\
    \ MS reports an error (426).\n   If the MS does not support joining two specified\
    \ conferences\n   together, the MS reports an error (427).\n   If the MS is unable\
    \ to join the specified entities for any other\n   reason, the MS reports an error\
    \ (411).\n   When the MS has finished processing a <join> request, it MUST reply\n\
    \   with an <response> element (Section 4.2.3).\n   For example, a request to\
    \ join two connections together is as\n   follows:\n   <mscmixer version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n    <join id1=\"1536067209:913cd14c\"\
    \ id2=\"1536067209:913cd14c\"/>\n   </mscmixer>\n   The response if the MS doesn't\
    \ support joining media streams between\n   connections is as follows:\n   <mscmixer\
    \ version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n    <response status=\"\
    426\" reason=\"mixing connections not supported\"/>\n   </mscmixer>\n"
- title: 4.2.2.3.  <modifyjoin>
  contents:
  - "4.2.2.3.  <modifyjoin>\n   The <modifyjoin> element is sent to the MS to request\
    \ changes in the\n   configuration of media stream(s) that were previously established\n\
    \   between a connection and a conference, between two connections, or\n   between\
    \ two conferences.\n   The <modifyjoin> element has the following attributes:\n\
    \   id1:  an identifier for either a connection or a conference.  The\n      identifier\
    \ MUST conform to the syntax defined in Appendix A.1 of\n      [RFC6230].  The\
    \ attribute is mandatory.\n   id2:  an identifier for either a connection or a\
    \ conference.  The\n      identifier MUST conform to the syntax defined in Appendix\
    \ A.1 of\n      [RFC6230].  The attribute is mandatory.\n   The <modifyjoin> element\
    \ has the following child elements (one or\n   more):\n   <stream>:   an element\
    \ that both identifies the media streams to\n      modify and defines the way\
    \ that each stream is to be configured\n      from this point forward (see Section\
    \ 4.2.2.5).\n   The MS MUST support <modifyjoin> for any stream that was established\n\
    \   using <join>.\n   The MS MUST configure the streams that are included within\n\
    \   <modifyjoin> to that stated by the child elements.\n   If the MS is unable\
    \ to modify the join as specified in <stream>\n   elements because a <stream>\
    \ element is in conflict with (a) another\n   <stream> element, (b) specified\
    \ connection or conference media\n   capabilities (including supported or available\
    \ codec information), or\n   (c) a SDP label value as part of the connection-id\
    \ (see Appendix A.1\n   of [RFC6230]), then the MS reports an error (407) and\
    \ MUST NOT modify\n   the join between the entities and MUST NOT change existing\
    \ streams of\n   the entities.\n   If the MS is unable to modify the join as specified\
    \ in <stream>\n   elements because the MS does not support the media stream\n\
    \   configuration, the MS reports an error (422) and MUST NOT modify the\n   join\
    \ between the entities and MUST NOT change existing streams of the\n   entities.\n\
    \   If the specified entities are not already joined, then the MS reports\n  \
    \ an error (409).\n   If the MS is unable to modify the join between the specified\
    \ entities\n   for any other reason, the MS reports an error (411).\n   When an\
    \ MS has finished processing a <modifyjoin> request, it MUST\n   reply with an\
    \ appropriate <response> element (Section 4.2.3).\n   In cases where stream characteristics\
    \ are controlled independently\n   for each direction, then a <modifyjoin> request\
    \ needs to specify a\n   child element for each direction in order to retain the\
    \ original\n   stream directionality.  For the example, if a <join> request\n\
    \   establishes independent control for each direction of an audio stream\n  \
    \ (see Section 4.2.2.5):\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n    <join id1=\"1536067209:913cd14c\" id2=\"conference1\">\n     <stream media=\"\
    audio\" direction=\"sendonly\">\n      <volume controltype=\"setgain\" value=\"\
    -3\"/>\n     </stream>\n     <stream media=\"audio\" direction=\"recvonly\">\n\
    \      <volume controltype=\"setgain\" value=\"+3\"/>\n     </stream>\n    </join>\n\
    \   </mscmixer>\n   then the following <modifyjoin> request\n   <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n    <modifyjoin id1=\"1536067209:913cd14c\"\
    \ id2=\"conference1\">\n     <stream media=\"audio\" direction=\"sendonly\">\n\
    \       <volume controltype=\"setgain\" value=\"0\"/>\n     </stream>\n     </modifyjoin>\n\
    \   </mscmixer>\n   would cause, in addition to the modification of the sendonly\
    \ volume,\n   the overall stream directionality to change from sendrecv to sendonly\n\
    \   since there is no <stream> element in this <modifyjoin> request for\n   the\
    \ recvonly direction.  The following would change the sendonly\n   volume and\
    \ retain the recvonly stream together with its original\n   characteristics such\
    \ as volume:\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n    <modifyjoin id1=\"1536067209:913cd14c\" id2=\"conference1\">\n     <stream\
    \ media=\"audio\" direction=\"sendonly\">\n       <volume controltype=\"setgain\"\
    \ value=\"0\"/>\n     </stream>\n     <stream media=\"audio\" direction=\"recvonly\"\
    />\n     </modifyjoin>\n   </mscmixer>\n"
- title: 4.2.2.4.  <unjoin>
  contents:
  - "4.2.2.4.  <unjoin>\n   The <unjoin> element is sent to the MS to request removal\
    \ of\n   previously established media stream(s) from between a connection and\n\
    \   a conference, between two connections, or between two conferences.\n   The\
    \ <unjoin> element has the following attributes:\n   id1:  an identifier for either\
    \ a connection or a conference.  The\n      identifier MUST conform to the syntax\
    \ defined in Appendix A.1 of\n      [RFC6230].  The attribute is mandatory.\n\
    \   id2:  an identifier for either a connection or a conference.  The\n      identifier\
    \ MUST conform to the syntax defined in Section 15.1 of\n      [RFC6230].  The\
    \ attribute is mandatory.\n   The <unjoin> element has the following child element\
    \ (zero or more\n   occurrences):\n   <stream>:   an element that identifies the\
    \ media stream(s) to remove\n      (see Section 4.2.2.5).  The element is optional.\
    \  When not\n      present, all currently established streams between \"id1\"\
    \ and \"id2\"\n      are removed.\n   The MS MUST support <unjoin> for any stream\
    \ that was established\n   using <join> and that has not already been removed\
    \ by a previous\n   <unjoin> on the same stream.\n   If the MS is unable to terminate\
    \ the join as specified in <stream>\n   elements because a <stream> element is\
    \ in conflict with (a) another\n   <stream> element, (b) specified connection\
    \ or conference media\n   capabilities, or (c) a SDP label value as part of the\
    \ connection-id\n   (see Appendix A.1 of [RFC6230]), then the MS reports an error\
    \ (407)\n   and MUST NOT terminate the join between the entities and MUST NOT\n\
    \   change existing streams of the entities.\n   If the MS is unable to terminate\
    \ the join as specified in <stream>\n   elements because the MS does not support\
    \ the media stream\n   configuration, the MS reports an error (422) and MUST NOT\
    \ terminate\n   the join between the entities and MUST NOT change existing streams\
    \ of\n   the entities.\n   If the specified entities are not already joined, then\
    \ the MS reports\n   an error (409).\n   If the MS is unable to terminate the\
    \ join between the specified\n   entities for any other reason, the MS reports\
    \ an error (411).\n   When an MS has successfully processed a <unjoin> request,\
    \ it MUST\n   reply with a successful <response> element (Section 4.2.3).\n"
- title: 4.2.2.5.  <stream>
  contents:
  - "4.2.2.5.  <stream>\n   <join>, <modifyjoin>, and <unjoin> require the identification\
    \ and\n   manipulation of media streams.  Media streams represent the flow of\n\
    \   media between a participant connection and a conference, between two\n   connections,\
    \ or between two conferences.  The <stream> element is\n   used (as a child to\
    \ <join>, <modifyjoin>, and <unjoin>) to identify\n   the media stream(s) for\
    \ the request and to specify the configuration\n   of the media stream.\n   The\
    \ <stream> element has the following attributes:\n   media:  a string indicating\
    \ the type of media associated with the\n      stream.  A valid value is a MIME\
    \ type name as defined in Section\n      4.2 of [RFC4288].  The following values\
    \ MUST be used for common\n      types of media: \"audio\" for audio media, and\
    \ \"video\" for video\n      media.  See [IANA] for registered MIME type names.\
    \  The attribute\n      is mandatory.\n   label:  a string indicating the SDP\
    \ label associated with a media\n      stream [RFC4574].  The attribute is optional.\n\
    \   direction:  a string indicating the allowed media flow of the stream\n   \
    \   relative to the value of the 'id1' attribute of the parent\n      element.\
    \  Defined values are: \"sendrecv\" (media can be sent and\n      received), \"\
    sendonly\" (media can only be sent), \"recvonly\" (media\n      can only be received),\
    \ and \"inactive\" (stream established but no\n      media flow).  The default\
    \ value is \"sendrecv\".  The attribute is\n      optional.\n   The <stream> element\
    \ has the following sequence of child elements:\n   <volume>:  an element (Section\
    \ 4.2.2.5.1) to configure the volume or\n      gain of the media stream.  The\
    \ element is optional.\n   <clamp>:  an element (Section 4.2.2.5.2) to configure\
    \ filtering and\n      removal of tones from the media stream.  The element is\
    \ optional.\n   <region>:  an element (Section 4.2.2.5.3) to configure a region\n\
    \      within a video layout where the media stream is displayed.  The\n     \
    \ element is optional.\n   <priority>:  an element (Section 4.2.2.5.4) to configure\
    \ priority\n      associated with the stream in the media mix.  The element is\n\
    \      optional.\n   In each child element, the media stream affected is indicated\
    \ by the\n   value of the 'direction' attribute of the parent element.\n   If\
    \ the 'media' attribute does not have the value of \"audio\", then the\n   MS\
    \ ignores <volume> and <clamp> elements.\n   If the 'media' attribute does not\
    \ have the value of \"video\", then the\n   MS ignores a <region> element.\n \
    \  For example, a request to join a connection to conference in both\n   directions\
    \ with volume control is as follows:\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n    <join id1=\"1536067209:913cd14c\" id2=\"conference1\">\n     <stream media=\"\
    audio\" direction=\"sendrecv\">\n      <volume controltype=\"setgain\" value=\"\
    -3\"/>\n     </stream>\n    </join>\n   </mscmixer>\n   where audio flow from\
    \ the connection (id1) to the conference (id2)\n   has the volume lowered by 3\
    \ dB, and likewise the volume of the audio\n   flow from the conference to the\
    \ connection is lowered by 3 dB.\n   In this example, the volume is independently\
    \ controlled for each\n   direction.\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n    <join id1=\"1536067209:913cd14c\" id2=\"conference1\">\n     <stream media=\"\
    audio\" direction=\"sendonly\">\n      <volume controltype=\"setgain\" value=\"\
    -3\"/>\n     </stream>\n     <stream media=\"audio\" direction=\"recvonly\">\n\
    \      <volume controltype=\"setgain\" value=\"+3\"/>\n     </stream>\n    </join>\n\
    \   </mscmixer>\n   where audio flow from the connection (id1) to the conference\
    \ (id2)\n   has the volume lowered by 3 dB, but the volume of the audio flow from\n\
    \   the conference to the connection is raised by 3 dB.\n"
- title: 4.2.2.5.1.  <volume>
  contents:
  - "4.2.2.5.1.  <volume>\n   The <volume> element is used to configure the volume\
    \ of an audio\n   media stream.  It can be set to a specific gain amount, to\n\
    \   automatically adjust the gain to a desired target level, or to mute\n   the\
    \ volume.\n   The <volume> element has no child elements but has the following\n\
    \   attributes:\n   controltype:  a string indicating the type of volume control\
    \ to use\n      for the stream.  Defined values are: \"automatic\" (the volume\
    \ will\n      be adjusted automatically to the level specified by the 'value'\n\
    \      attribute), \"setgain\" (use the value of the 'value' attribute as a\n\
    \      specific gain measured in dB to apply), and \"setstate\" (set the\n   \
    \   state of the stream to \"mute\" or \"unmute\" as specified by the\n      value\
    \ of the 'value' attribute).  The attribute is mandatory.\n   value:  a string\
    \ specifying the amount or state for the volume\n      control defined by the\
    \ value of the 'controltype' attribute.  The\n      attribute is optional.  There\
    \ is no default value.\n   If the audio media stream is in a muted state, then\
    \ the MS also\n   changes automatically the state to unmuted with an \"automatic\"\
    \ or\n   \"setgain\" volume control.  For example, assume an audio stream has\n\
    \   been muted with <volume controltype=\"setstate\" value=\"mute\"/>.  If\n \
    \  the gain on the same stream is changed with <volume\n   controltype=\"setgain\"\
    \ value=\"+3\"/>, then the volume is increased and\n   stream state is also changed\
    \ to unmuted.\n"
- title: 4.2.2.5.2.  <clamp>
  contents:
  - "4.2.2.5.2.  <clamp>\n   The <clamp> element is used to configure whether tones\
    \ are filtered\n   and removed from a media stream.\n   The <clamp> element has\
    \ no child elements but has the following\n   attribute:\n   tones:  A space-separated\
    \ list of the tones to remove.  The attribute\n      is optional.  The default\
    \ value is \"1 2 3 4 5 6 7 8 9 0 * # A B C\n      D\" (i.e., all DTMF (Dual-Tone\
    \ Multi-Frequency) tones are removed).\n"
- title: 4.2.2.5.3.  <region>
  contents:
  - "4.2.2.5.3.  <region>\n   As described in Section 4.2.1.4.2.1, each <video-layout>\
    \ is composed\n   of one or more named regions (or areas) in which video media\
    \ can be\n   presented.  For example, the XCON layout <dual-view> has two regions\n\
    \   named \"1\" and \"2\", respectively.\n   The <region> element is used to explicitly\
    \ specify the name of the\n   area within a video layout where a video media stream\
    \ is displayed.\n   The <region> element has no attributes, and its content model\n\
    \   specifies the name of the region.\n"
- title: 4.2.2.5.4.  <priority>
  contents:
  - "4.2.2.5.4.  <priority>\n   The <priority> element is used to explicitly specify\
    \ the priority of\n   a participant.  The MS uses this priority to determine where\
    \ the\n   media stream is displayed within a video layout\n   (Section 4.2.1.4.3.1).\n\
    \   The <priority> element has no attributes, and its content model\n   specifies\
    \ a positive integer (see Section 4.7.3).  The lower the\n   value, the higher\
    \ the priority.\n"
- title: 4.2.3.  <response>
  contents:
  - "4.2.3.  <response>\n   Responses to requests are indicated by a <response> element.\n\
    \   The <response> element has following attributes:\n   status:  numeric code\
    \ indicating the response status.  Valid values\n      are defined in Section\
    \ 4.6.  The attribute is mandatory.\n   reason:  string specifying a reason for\
    \ the response status.  The\n      attribute is optional.\n   desclang:  specifies\
    \ the language used in the value of the 'reason'\n      attribute.  A valid value\
    \ is a language identifier\n      (Section 4.7.7).  The attribute is optional.\
    \  If not specified,\n      the value of the 'desclang' attribute on <mscmixer>\
    \ (Section 4.1)\n      applies.\n   conferenceid:  string identifying the conference\
    \ (see Appendix A.1 of\n      [RFC6230]).  The attribute is optional.\n   connectionid:\
    \  string identifying the SIP dialog connection (see\n      Appendix A.1 of [RFC6230]).\
    \  The attribute is optional.\n   For example, a response when a conference was\
    \ created successfully is\n   as follows:\n   <response code=\"200\"/>\n   If\
    \ conference creation failed due to the requested conference ID\n   already existing,\
    \ the response is:\n   <response code=\"405\" reason=\"Conference already exists\"\
    />\n"
- title: 4.2.4.  <event>
  contents:
  - "4.2.4.  <event>\n   When a mixer generates a notification event, the MS sends\
    \ the event\n   using an <event> element.\n   The <event> element has no attributes,\
    \ but has the following sequence\n   of child elements (zero or more instances\
    \ of each child):\n   <active-talkers-notify>:  specifies an active talkers notification\n\
    \      (Section 4.2.4.1).\n   <unjoin-notify>:  notifies that a connection or\
    \ conference has been\n      completely unjoined (Section 4.2.4.2).\n   <conferenceexit>:\
    \  notifies that a conference has exited\n      (Section 4.2.4.3).\n"
- title: 4.2.4.1.  <active-talkers-notify>
  contents:
  - "4.2.4.1.  <active-talkers-notify>\n   The <active-talkers-notify> element describes\
    \ zero or more speakers\n   that have been active in a conference during the specified\
    \ interval\n   (see Section 4.2.1.4.4.1).\n   The <active-talkers-notify> element\
    \ has the following attribute:\n   conferenceid:  string indicating the name of\
    \ the conference from\n      which the event originated.  This attribute is mandatory.\n\
    \   The <active-talkers-notify> element has the following sequence of\n   child\
    \ elements (zero or more occurrences):\n   <active-talker>:  element describing\
    \ an active talker\n      (Section 4.2.4.1.1).\n"
- title: 4.2.4.1.1.  <active-talker>
  contents:
  - "4.2.4.1.1.  <active-talker>\n   The <active-talker> element describes an active\
    \ talker, associated\n   with either a connection or conference participant in\
    \ a conference.\n   The <active-talker> element has the following attributes:\n\
    \   connectionid:  string indicating the connectionid of the active\n      talker.\
    \  This attribute is optional.  There is no default value.\n   conferenceid: \
    \ string indicating the conferenceid of the active\n      talker.  This attribute\
    \ is optional.  There is no default value.\n   Note that the element does not\
    \ describe an active talker if both the\n   'connectionid' and 'conferenceid'\
    \ attributes are specified, or if\n   neither attribute is specified.\n   The\
    \ <active-talker> element has no child elements.\n"
- title: 4.2.4.2.  <unjoin-notify>
  contents:
  - "4.2.4.2.  <unjoin-notify>\n   The <unjoin-notify> element describes a notification\
    \ event where a\n   connection and/or conference have been completely unjoined.\n\
    \   The <unjoin-notify> element has the following attributes:\n   status:  a status\
    \ code indicating why the unjoin occurred.  A valid\n      value is a non-negative\
    \ integer (see Section 4.7.2).  The MS MUST\n      support the following values:\n\
    \      0  indicates the join has been terminated by a <unjoin> request.\n    \
    \  1  indicates the join terminated due to an execution error.\n      2  indicates\
    \ that the join terminated because a connection or\n         conference has terminated.\n\
    \      All other valid but undefined values are reserved for future use,\n   \
    \   where new status codes are assigned using the Standards Action\n      process\
    \ defined in [RFC5226].  The AS MUST treat any status code\n      it does not\
    \ recognize as being equivalent to 1 (join execution\n      error).  The attribute\
    \ is mandatory.\n   reason:  a textual description providing a reason for the\
    \ status\n      code, e.g., details about an error.  A valid value is a string\n\
    \      (see Section 4.7.4).  The attribute is optional.  There is no\n      default\
    \ value.\n   desclang:  specifies the language used in the value of the 'reason'\n\
    \      attribute.  A valid value is a language identifier\n      (Section 4.7.7).\
    \  The attribute is optional.  If not specified,\n      the value of the 'desclang'\
    \ attribute on <mscmixer> (Section 4.1)\n      applies.\n   id1:  an identifier\
    \ for either a connection or a conference.  The\n      identifier MUST conform\
    \ to the syntax defined in Appendix A.1 of\n      [RFC6230].  The attribute is\
    \ mandatory.\n   id2:  an identifier for either a connection or a conference.\
    \  The\n      identifier MUST conform to the syntax defined in Appendix A.1 of\n\
    \      [RFC6230].  The attribute is mandatory.\n   The <unjoin-notify> element\
    \ has no child elements.\n"
- title: 4.2.4.3.  <conferenceexit>
  contents:
  - "4.2.4.3.  <conferenceexit>\n   The <conferenceexit> element indicates that a\
    \ conference has exited\n   because it has been terminated or because a error\
    \ occurred (for\n   example, a hardware error in the conference mixing unit).\
    \  This event\n   MUST be sent by the MS whenever a successfully created conference\n\
    \   exits.\n   The <conferenceexit> element has the following attributes:\n  \
    \ conferenceid:  string indicating the name of the conference.  This\n      attribute\
    \ is mandatory.\n   status:  a status code indicating why the conference exited.\
    \  A valid\n      value is a non-negative integer (see Section 4.7.2).  The MS\
    \ MUST\n      support the following values:\n      0  indicates the conference\
    \ has been terminated by a\n         <destroyconference> request.\n      1  indicates\
    \ the conference terminated due to an execution error.\n      2  indicates the\
    \ conference terminated due to exceeding the\n         maximum duration for a\
    \ conference.\n      All other valid but undefined values are reserved for future\
    \ use,\n      where new status codes are assigned using the Standards Action\n\
    \      process defined in [RFC5226].  The AS MUST treat any status code\n    \
    \  it does not recognize as being equivalent to 1 (conference\n      execution\
    \ error).  The attribute is mandatory.\n   reason:  a textual description providing\
    \ a reason for the status\n      code, e.g., details about an error.  A valid\
    \ value is a string\n      (see Section 4.7.4).  The attribute is optional.  There\
    \ is no\n      default value.\n   desclang:  specifies the language used in the\
    \ value of the 'reason'\n      attribute.  A valid value is a language identifier\n\
    \      (Section 4.7.7).  The attribute is optional.  If not specified,\n     \
    \ the value of the 'desclang' attribute on <mscmixer> (Section 4.1)\n      applies.\n\
    \   The <conferenceexit> element has no child elements.\n   When a MS sends a\
    \ <conferenceexit> event, the identifier for the\n   conference ('conferenceid'\
    \ attribute) is no longer valid on the MS\n   and can be reused for another conference.\n\
    \   For example, the following notification event would be sent from the\n   MS\
    \ when the conference with identifier \"conference99\" exits due to a\n   successful\
    \ <destroyconference/>:\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n    <event>\n     <conferenceexit conferenceid=\"conference99\"\n        status=\"\
    0\"/>\n    </event>\n   </mscmixer>\n"
- title: 4.3.  Audit Elements
  contents:
  - "4.3.  Audit Elements\n   The audit elements defined in this section allow the\
    \ MS to be audited\n   for package capabilities as well as mixers managed by the\
    \ package.\n   Auditing is particularly important for two use cases.  First, it\n\
    \   enables discovery of package capabilities supported on an MS before\n   an\
    \ AS creates a conference mixer or joins connections and\n   conferences.  The\
    \ AS can then use this information to create request\n   elements using supported\
    \ capabilities and, in the case of codecs, to\n   negotiate an appropriate SDP\
    \ for a user agent's connection.  Second,\n   auditing enables discovery of the\
    \ existence and status of mixers\n   currently managed by the package on the MS.\
    \  This could be used when\n   one AS takes over management of mixers if the AS\
    \ that created the\n   mixers fails or is no longer available (see the security\n\
    \   considerations in Section 7).\n"
- title: 4.3.1.  <audit>
  contents:
  - "4.3.1.  <audit>\n   The <audit> request element is sent to the MS to request\
    \ information\n   about the capabilities of, and mixers currently managed with,\
    \ this\n   Control Package.  Capabilities include supported conference codecs\n\
    \   and video layouts.  Mixer information includes the status of managed\n   mixers\
    \ as well as codecs.\n   The <audit> element has the following attributes:\n \
    \  capabilities:  indicates whether package capabilities are to be\n      audited.\
    \  A valid value is a boolean (see Section 4.7.1).  A value\n      of \"true\"\
    \ indicates that capability information is to be reported.\n      A value of \"\
    false\" indicates that capability information is not to\n      be reported.  The\
    \ attribute is optional.  The default value is\n      \"true\".\n   mixers:  indicates\
    \ whether mixers currently managed by the package\n      are to be audited.  A\
    \ valid value is a boolean (see\n      Section 4.7.1).  A value of \"true\" indicates\
    \ that mixer\n      information is to be reported.  A value of \"false\" indicates\
    \ that\n      mixer information is not to be reported.  The attribute is\n   \
    \   optional.  The default value is \"true\".\n   conferenceid:  string identifying\
    \ a specific conference mixer to\n      audit.  It is an error (406) if the 'conferenceid'\
    \ attribute is\n      specified and the conference identifier is not valid.  The\n\
    \      attribute is optional.  There is no default value.\n   If the 'mixers'\
    \ attribute has the value \"true\" and 'conferenceid'\n   attribute is specified,\
    \ then only audit information about the\n   specified conference mixer is reported.\
    \  If the 'mixers' attribute\n   has the value \"false\", then no mixer audit\
    \ information is reported\n   even if a 'conferenceid' attribute is specified.\n\
    \   The <audit> element has no child elements.\n   When the MS receives an <audit>\
    \ request, it MUST reply with a\n   <auditresponse> element (Section 4.3.2) that\
    \ includes a mandatory\n   attribute describing the status in terms of a numeric\
    \ code.  Response\n   status codes are defined in Section 4.6.  If the request\
    \ is\n   successful, the <auditresponse> contains (depending on attribute\n  \
    \ values) a <capabilities> element (Section 4.3.2.1) reporting package\n   capabilities\
    \ and a <mixers> element (Section 4.3.2.2) reporting\n   managed mixer information.\
    \  If the MS is not able to process the\n   request and carry out the audit operation,\
    \ the audit request has\n   failed and the MS MUST indicate the class of failure\
    \ using an\n   appropriate 4xx response code.  Unless an error response code is\n\
    \   specified for a class of error within this section, implementations\n   follow\
    \ Section 4.6 in determining the appropriate status code for the\n   response.\n\
    \   For example, a request to audit capabilities and mixers managed by\n   the\
    \ package is as follows:\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n     <audit/>\n   </mscmixer>\n   In this example, only capabilities are to\
    \ be audited:\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n     <audit mixers=\"false\"/>\n   </mscmixer>\n   With this example, only\
    \ a specific conference mixer is to be audited:\n   <mscmixer version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n     <audit capabilities=\"false\"\
    \ conferenceid=\"conf4\"/>\n   </mscmixer>\n"
- title: 4.3.2.  <auditresponse>
  contents:
  - "4.3.2.  <auditresponse>\n   The <auditresponse> element describes a response\
    \ to a <audit>\n   request.\n   The <auditresponse> element has the following\
    \ attributes:\n   status:  numeric code indicating the audit response status.\
    \  The\n      attribute is mandatory.  Valid values are defined in Section 4.6.\n\
    \   reason:  string specifying a reason for the status.  The attribute is\n  \
    \    optional.\n   desclang:  specifies the language used in the value of the\
    \ 'reason'\n      attribute.  A valid value is a language identifier\n      (Section\
    \ 4.7.7).  The attribute is optional.  If not specified,\n      the value of the\
    \ 'desclang' attribute on <mscmixer> (Section 4.1)\n      applies.\n   The <auditresponse>\
    \ element has the following sequence of child\n   elements:\n   <capabilities>:\
    \  element describing capabilities of the package (see\n      Section 4.3.2.1).\
    \  The element is optional.\n   <mixers>:  element describing information about\
    \ managed mixers (see\n      Section 4.3.2.2).  The element is optional.\n   For\
    \ example, a successful response to an <audit> request for\n   capabilities and\
    \ mixer information is as follows:\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n    <auditresponse status=\"200\">\n     <capabilities>\n      <codecs>\n \
    \      <codec name=\"video\">\n        <subtype>H263</subtype>\n       </codec>\n\
    \       <codec name=\"video\">\n        <subtype>H264</subtype>\n       </codec>\n\
    \       <codec name=\"audio\">\n        <subtype>PCMU</subtype>\n       </codec>\n\
    \       <codec name=\"audio\">\n        <subtype>PCMA</subtype>\n       </codec>\n\
    \      </codecs>\n     </capabilities>\n     <mixers>\n      <conferenceaudit\
    \ conferenceid=\"conf1\">\n       <codecs>\n        <codec name=\"audio\">\n \
    \        <subtype>PCMA</subtype>\n        </codec>\n       </codecs>\n       <participants>\n\
    \        <participant id=\"1536067209:913cd14c\"/>\n       </participants>\n \
    \     </conferenceaudit>\n      <joinaudit id1=\"1536067209:913cd14c\" id2=\"\
    conf1\"/>\n      <joinaudit id1=\"1636067209:113cd14c\" id2=\"1836067209:313cd14c\"\
    />\n      <joinaudit id1=\"1736067209:213cd14c\" id2=\"1936067209:413cd14c\"/>\n\
    \     </mixers>\n    </auditresponse>\n   </mscmixer>\n"
- title: 4.3.2.1.  <capabilities>
  contents:
  - "4.3.2.1.  <capabilities>\n   The <capabilities> element provides audit information\
    \ about package\n   capabilities.\n   The <capabilities> element has no attributes.\n\
    \   The <capabilities> element has the following sequence of child\n   elements:\n\
    \   <codecs>:  element (Section 4.4) describing codecs available to the\n    \
    \  package.  The element is mandatory.\n   For example, a fragment describing\
    \ capabilities is as follows:\n     <capabilities>\n      <codecs>\n       <codec\
    \ name=\"video\">\n        <subtype>H263</subtype>\n       </codec>\n       <codec\
    \ name=\"video\">\n        <subtype>H264</subtype>\n       </codec>\n       <codec\
    \ name=\"audio\">\n        <subtype>PCMU</subtype>\n       </codec>\n       <codec\
    \ name=\"audio\">\n        <subtype>PCMA</subtype>\n       </codec>\n      </codecs>\n\
    \     </capabilities>\n"
- title: 4.3.2.2.  <mixers>
  contents:
  - "4.3.2.2.  <mixers>\n   The <mixers> element provides audit information about\
    \ mixers.\n   The <mixers> element has no attributes.\n   The <mixers> element\
    \ has the following sequence of child elements\n   (zero or more occurrences,\
    \ any order):\n   <conferenceaudit>:  audit information for a conference mixer\n\
    \      (Section 4.3.2.2.1).  The element is optional.\n   <joinaudit>:  audit\
    \ information for a join mixer (Section 4.3.2.2.2).\n      The element is optional.\n"
- title: 4.3.2.2.1.  <conferenceaudit>
  contents:
  - "4.3.2.2.1.  <conferenceaudit>\n   The <conferenceaudit> element has the following\
    \ attribute:\n   conferenceid:  string identifying the conference (see Appendix\
    \ A.1 of\n      [RFC6230]).  The attribute is mandatory.\n   The <conferenceaudit>\
    \ element has the following sequence of child\n   elements:\n   <codecs>  element\
    \ describing codecs used in the conference.  See\n      Section 4.4.  The element\
    \ is optional.\n   <participants>  element listing connections or conferences\
    \ joined to\n      the conference.  See Section 4.3.2.2.1.1.  The element is\n\
    \      optional.\n   <video-layout>  element describing the active video layout\
    \ for the\n      conference.  See Section 4.2.1.4.2.1.  The element is optional.\n\
    \   For example, a fragment describing a conference that has been created\n  \
    \ but has no participants is as follows:\n   <conferenceaudit conferenceid=\"\
    conference1\"/>\n   A fragment when the same conference has three participants\
    \ (two\n   connections and another conference) joined to it is as follows:\n \
    \  <conferenceaudit conferenceid=\"conference1\">\n    <codecs>\n     <codec name=\"\
    audio\">\n      <subtype>PCMU</subtype>\n     </codec>\n    </codecs>\n    <participants>\n\
    \      <participant id=\"connection1\"/>\n      <participant id=\"connection2\"\
    />\n      <participant id=\"conference2\"/>\n    </participants>\n   </conferenceaudit>\n"
- title: 4.3.2.2.1.1.  <participants>
  contents:
  - "4.3.2.2.1.1.  <participants>\n   The <participants> element is a container for\
    \ <participant> elements\n   (Section 4.3.2.2.1.1.1).\n   The <participants> element\
    \ has no attributes, but the following child\n   elements are defined (zero or\
    \ more):\n   <participant>:  specifies a participant (Section 4.3.2.2.1.1.1).\n"
- title: 4.3.2.2.1.1.1.  <participant>
  contents:
  - "4.3.2.2.1.1.1.  <participant>\n   The <participant> element describes a participant.\n\
    \   The <participant> element has the following attribute:\n   id:  an identifier\
    \ for either a connection or a conference.  The\n      identifier MUST conform\
    \ to the syntax defined in Appendix A.1 of\n      [RFC6230].  The attribute is\
    \ mandatory.\n   The <participant> element has no children.\n"
- title: 4.3.2.2.2.  <joinaudit>
  contents:
  - "4.3.2.2.2.  <joinaudit>\n   The <joinaudit> element has the following attributes:\n\
    \   id1:  an identifier for either a connection or a conference.  The\n      identifier\
    \ MUST conform to the syntax defined in Appendix A.1 of\n      [RFC6230].  The\
    \ attribute is mandatory.\n   id2:  an identifier for either a connection or a\
    \ conference.  The\n      identifier MUST conform to the syntax defined in Appendix\
    \ A.1 of\n      [RFC6230].  The attribute is mandatory.\n   The <joinaudit> element\
    \ has no children.\n   For example, a fragment describing an audit of two join\
    \ mixers, one\n   between connections and the second between conferences, is as\n\
    \   follows:\n   <mixers>\n    <joinaudit id1=\"1536067209:913cd14\" id2=\"1636067209:413cd14\"\
    />\n    <joinaudit id1=\"conference1\" id2=\"conference2\"/>\n   </mixers>\n"
- title: 4.4.  <codecs>
  contents:
  - "4.4.  <codecs>\n   The <codecs> element is a container for one or more codec\n\
    \   definitions.  Codec definitions are used by an AS to specify the\n   codecs\
    \ allowed for a conference (e.g., when used as a child of\n   <createconference>\
    \ or <modifyconference).  Codec definitions are used\n   by an MS to provide audit\
    \ information about the codecs supported by\n   an MS and used in specific conferences.\n\
    \   The <codecs> element has no attributes.\n   The <codecs> element has the following\
    \ sequence of child elements\n   (zero or more occurrences):\n   <codec>:  defines\
    \ a codec and optionally its policy (Section 4.4.1).\n      The element is optional.\n\
    \   For example, a fragment describing two codecs is as follows:\n   <codecs>\n\
    \     <codec name=\"audio\">\n      <subtype>PCMA</subtype>\n     </codec>\n \
    \    <codec name=\"video\">\n       <subtype>H263</subtype>\n     </codec>\n \
    \  </codecs>\n"
- title: 4.4.1.  <codec>
  contents:
  - "4.4.1.  <codec>\n   The <codec> element describes a codec.  The element is modeled\
    \ on the\n   <codec> element in the XCON conference information data model\n \
    \  ([RFC6501]) and allows additional information (e.g., rate, speed,\n   etc.)\
    \ to be specified.\n   The <codec> element has the following attribute:\n   name:\
    \  indicates the type name of the codec's media format as defined\n      in [IANA].\
    \  A valid value is a \"type-name\" as defined in Section\n      4.2 of [RFC4288].\
    \  The attribute is mandatory.\n   The <codec> element has the following sequence\
    \ of child elements:\n   <subtype>:  element whose content model describes the\
    \ subtype of the\n      codec's media format as defined in [IANA].  A valid value\
    \ is a\n      \"subtype-name\" as defined in Section 4.2 of [RFC4288].  The\n\
    \      element is mandatory.\n   <params>:  element (Section 4.5) describing additional\
    \ information\n      about the codec.  This package is agnostic to the names and\
    \ values\n      of the codec parameters supported by an implementation.  The\n\
    \      element is optional.\n   For example, a fragment with a <codec> element\
    \ describing the H263\n   codec is as follows:\n   <codec name=\"video\">\n  \
    \  <subtype>H263</subtype>\n   </codec>\n   A fragment where the <codec> element\
    \ describes the H264 video codec\n   with additional information about the profile\
    \ level and packetization\n   mode is as follows:\n   <codec name=\"video\">\n\
    \    <subtype>H264</subtype>\n    <params>\n     <param name=\"profile-level-id\"\
    >42A01E</param>\n     <param name=\"packetization-mode\">0</param>\n    </params>\n\
    \   </codec>\n"
- title: 4.5.  <params>
  contents:
  - "4.5.  <params>\n   The <params> element is a container for <param> elements\n\
    \   (Section 4.5.1).\n   The <params> element has no attributes, but the following\
    \ child\n   elements are defined (zero or more):\n   <param>:  specifies a parameter\
    \ name and value (Section 4.5.1).\n"
- title: 4.5.1.  <param>
  contents:
  - "4.5.1.  <param>\n   The <param> element describes a parameter name and value.\n\
    \   The <param> element has the following attributes:\n   name:  a string indicating\
    \ the name of the parameter.  The attribute\n      is mandatory.\n   type:  specifies\
    \ a type indicating how the in-line value of the\n      parameter is to be interpreted.\
    \  A valid value is a MIME media\n      type (see Section 4.7.6).  The attribute\
    \ is optional.  The default\n      value is \"text/plain\".\n   encoding:  specifies\
    \ a content-transfer-encoding schema applied to\n      the in-line value of the\
    \ parameter on top of the MIME media type\n      specified with the 'type' attribute.\
    \  A valid value is a content-\n      transfer-encoding schema as defined by the\
    \ \"mechanism\" token in\n      Section 6.1 of [RFC2045].  The attribute is optional.\
    \  There is no\n      default value.\n   The <param> element content model is\
    \ the value of the parameter.\n   Note that a value that contains XML characters\
    \ (e.g., \"<\") needs to\n   be escaped following standard XML conventions.\n"
- title: 4.6.  Response Status Codes
  contents:
  - "4.6.  Response Status Codes\n   This section describes the response codes in\
    \ Table 1 for the 'status'\n   attribute of mixer management <response> (Section\
    \ 4.2.3) and\n   <auditresponse> (Section 4.3.2).  The MS MUST support the status\n\
    \   response codes defined here.  All other valid but undefined values\n   are\
    \ reserved for future use, where new status codes are assigned\n   using the Standards\
    \ Action process defined in [RFC5226].  The AS MUST\n   treat any responses it\
    \ does not recognize as being equivalent to the\n   x00 response code for all\
    \ classes.  For example, if an AS receives an\n   unrecognized response code of\
    \ 499, it can safely assume that there\n   was something wrong with its request\
    \ and treat the response as if it\n   had received a 400 (Syntax error) response\
    \ code.\n   4xx responses are definite failure responses from a particular MS.\n\
    \   The 'reason' attribute in the response SHOULD identify the failure in\n  \
    \ more detail, for example, \"Mandatory attribute missing: id2 join\n   element\"\
    \ for a 400 (Syntax error) response code.\n   The AS SHOULD NOT retry the same\
    \ request without modification (for\n   example, correcting a syntax error or\
    \ changing the conferenceid to\n   use one available on the MS).  However, the\
    \ same request to a\n   different MS might be successful, for example, if another\
    \ MS supports\n   a capability required in the request.\n   4xx failure responses\
    \ can be grouped into three classes: failure due\n   to a syntax error in the\
    \ request (400); failure due to an error\n   executing the request on the MS (405-419);\
    \ and failure due to the\n   request requiring a capability not supported by the\
    \ MS (420-435).\n   In cases where more than one request code could be reported\
    \ for a\n   failure, the MS SHOULD use the most specific error code of the\n \
    \  failure class for the detected error.  For example, if the MS detects\n   that\
    \ the conference identifier in the request is invalid, then it\n   uses a 406\
    \ status code.  However, if the MS merely detects that an\n   execution error\
    \ occurred, then 419 is used.\n   +-------+---------------+----------------------+--------------------+\n\
    \   | Code  | Summary       | Description          | Informational: AS  |\n  \
    \ |       |               |                      | Possible Recovery  |\n   |\
    \       |               |                      | Action             |\n   +-------+---------------+----------------------+--------------------+\n\
    \   | 200   | OK            | request has          |                    |\n  \
    \ |       |               | succeeded.           |                    |\n   |\
    \       |               |                      |                    |\n   | 400\
    \   | Syntax error  | request is           | Change the request |\n   |      \
    \ |               | syntactically        | so that it is      |\n   |       |\
    \               | invalid: it is not   | syntactically      |\n   |       |  \
    \             | valid with respect   | valid.             |\n   |       |    \
    \           | to the XML schema    |                    |\n   |       |      \
    \         | specified in         |                    |\n   |       |        \
    \       | Section 5 or it      |                    |\n   |       |          \
    \     | violates a           |                    |\n   |       |            \
    \   | co-occurrence        |                    |\n   |       |              \
    \ | constraint for a     |                    |\n   |       |               |\
    \ request element      |                    |\n   |       |               | defined\
    \ in           |                    |\n   |       |               | Section 4.\
    \           |                    |\n   |       |               |             \
    \         |                    |\n   | 405   | Conference    | request uses an\
    \      | Send an <audit>    |\n   |       | already       | identifier to create\
    \ | request            |\n   |       | exists        | a new conference     |\
    \ (Section 4.3.1)    |\n   |       |               | (Section 4.2.1.1)    | requesting\
    \ the     |\n   |       |               | that is already used | list of conference\
    \ |\n   |       |               | by another           | mixer identifiers  |\n\
    \   |       |               | conference on the    | already used by    |\n  \
    \ |       |               | MS.                  | the MS and then    |\n   |\
    \       |               |                      | use a conference   |\n   |  \
    \     |               |                      | identifier that is |\n   |    \
    \   |               |                      | not listed.        |\n   |      \
    \ |               |                      |                    |\n   | 406   |\
    \ Conference    | request uses an      | Send an <audit>    |\n   |       | does\
    \ not      | identifier for a     | request            |\n   |       | exist \
    \        | conference that does | (Section 4.3.1)    |\n   |       |         \
    \      | not exist on the MS. | requesting the     |\n   |       |           \
    \    |                      | list of conference |\n   |       |             \
    \  |                      | mixer identifiers  |\n   |       |               |\
    \                      | used by the MS and |\n   |       |               |  \
    \                    | then use a         |\n   |       |               |    \
    \                  | conference         |\n   |       |               |      \
    \                | identifier that is |\n   |       |               |        \
    \              | listed.            |\n   |       |               |          \
    \            |                    |\n   | 407   | Incompatible  | request specifies\
    \ a  | Change the media   |\n   |       | stream        | media stream       \
    \  | stream             |\n   |       | configuration | configuration that   |\
    \ configuration to   |\n   |       |               | is in conflict with  | match\
    \ the          |\n   |       |               | itself, the          | capabilities\
    \ of    |\n   |       |               | connection, or       | the connection\
    \ or  |\n   |       |               | conference           | conference.     \
    \   |\n   |       |               | capabilities (see    |                   \
    \ |\n   |       |               | Section 4.2.2.2).    |                    |\n\
    \   |       |               |                      |                    |\n  \
    \ | 408   | Joining       | request attempts to  | Send an <audit>    |\n   |\
    \       | entities      | create a join mixer  | request            |\n   |  \
    \     | already       | (Section 4.2.2.2)    | (Section 4.3.1)    |\n   |    \
    \   | joined        | where the entities   | requesting the     |\n   |      \
    \ |               | are already joined.  | list of join       |\n   |       |\
    \               |                      | mixers on the MS   |\n   |       |  \
    \             |                      | and then use       |\n   |       |    \
    \           |                      | entities that are  |\n   |       |      \
    \         |                      | not listed.        |\n   |       |        \
    \       |                      |                    |\n   | 409   | Joining  \
    \     | request attempts to  | Send an <audit>    |\n   |       | entities not\
    \  | manipulate a join    | request            |\n   |       | joined        |\
    \ mixer where the      | (Section 4.3.1)    |\n   |       |               | entities\
    \ are not     | requesting the     |\n   |       |               | joined.   \
    \           | list of join       |\n   |       |               |             \
    \         | mixers on the MS   |\n   |       |               |               \
    \       | and then use       |\n   |       |               |                 \
    \     | entities that are  |\n   |       |               |                   \
    \   | listed.            |\n   |       |               |                     \
    \ |                    |\n   | 410   | Unable to     | request attempts to  |\
    \                    |\n   |       | join -        | join a participant   |  \
    \                  |\n   |       | conference    | to a conference      |    \
    \                |\n   |       | full          | (Section 4.2.2.2)    |      \
    \              |\n   |       |               | but the conference   |        \
    \            |\n   |       |               | is already full.     |          \
    \          |\n   |       |               |                      |            \
    \        |\n   | 411   | Unable to     | request attempts to  |              \
    \      |\n   |       | perform join  | create, modify, or   |                \
    \    |\n   |       | mixer         | delete a join        |                  \
    \  |\n   |       | operation     | between entities but |                    |\n\
    \   |       |               | fails.               |                    |\n  \
    \ |       |               |                      |                    |\n   |\
    \ 412   | Connection    | request uses an      |                    |\n   |  \
    \     | does not      | identifier for a     |                    |\n   |    \
    \   | exist         | connection that does |                    |\n   |      \
    \ |               | not exist on the MS. |                    |\n   |       |\
    \               |                      |                    |\n   | 419   | Other\
    \         | requested operation  |                    |\n   |       | execution\
    \     | cannot be executed   |                    |\n   |       | error      \
    \   | by the MS.           |                    |\n   |       |              \
    \ |                      |                    |\n   | 420   | Conference    |\
    \ request to create a  |                    |\n   |       | reservation   | new\
    \ conference       |                    |\n   |       | failed        | (Section\
    \ 4.2.1.1)    |                    |\n   |       |               | failed due\
    \ to        |                    |\n   |       |               | unsupported \
    \         |                    |\n   |       |               | reservation of\
    \       |                    |\n   |       |               | talkers or      \
    \     |                    |\n   |       |               | listeners.        \
    \   |                    |\n   |       |               |                     \
    \ |                    |\n   | 421   | Unable to     | request to create or |\
    \                    |\n   |       | configure     | modify a conference  |  \
    \                  |\n   |       | audio mix     | failed due to        |    \
    \                |\n   |       |               | unsupported audio    |      \
    \              |\n   |       |               | mix.                 |        \
    \            |\n   |       |               |                      |          \
    \          |\n   | 422   | Unsupported   | request contains one |            \
    \        |\n   |       | media stream  | or more <stream>     |              \
    \      |\n   |       | configuration | elements             |                \
    \    |\n   |       |               | (Section 4.2.2.5)    |                  \
    \  |\n   |       |               | whose configuration  |                    |\n\
    \   |       |               | is not supported by  |                    |\n  \
    \ |       |               | the MS.              |                    |\n   |\
    \       |               |                      |                    |\n   | 423\
    \   | Unable to     | request to create or |                    |\n   |      \
    \ | configure     | modify a conference  |                    |\n   |       |\
    \ video layouts | failed due to        |                    |\n   |       |  \
    \             | unsupported video    |                    |\n   |       |    \
    \           | layout               |                    |\n   |       |      \
    \         | configuration.       |                    |\n   |       |        \
    \       |                      |                    |\n   | 424   | Unable to\
    \     | request to create or |                    |\n   |       | configure  \
    \   | modify a conference  |                    |\n   |       | video switch \
    \ | failed due to        |                    |\n   |       |               |\
    \ unsupported video    |                    |\n   |       |               | switch\
    \               |                    |\n   |       |               | configuration.\
    \       |                    |\n   |       |               |                 \
    \     |                    |\n   | 425   | Unable to     | request to create or\
    \ |                    |\n   |       | configure     | modify a conference  |\
    \                    |\n   |       | codecs        | failed due to        |  \
    \                  |\n   |       |               | unsupported codec.   |    \
    \                |\n   |       |               |                      |      \
    \              |\n   | 426   | Unable to     | request to join      |        \
    \            |\n   |       | join - mixing | connection entities  |          \
    \          |\n   |       | connections   | (Section 4.2.2.2)    |            \
    \        |\n   |       | not supported | failed due to lack   |              \
    \      |\n   |       |               | of support for       |                \
    \    |\n   |       |               | mixing connections.  |                  \
    \  |\n   |       |               |                      |                    |\n\
    \   | 427   | Unable to     | request to join      |                    |\n  \
    \ |       | join - mixing | conference entities  |                    |\n   |\
    \       | conferences   | (Section 4.2.2.2)    |                    |\n   |  \
    \     | not supported | failed due to lack   |                    |\n   |    \
    \   |               | of support for       |                    |\n   |      \
    \ |               | mixing conferences.  |                    |\n   |       |\
    \               |                      |                    |\n   | 428   | Unsupported\
    \   | the request contains |                    |\n   |       | foreign      \
    \ | attributes or        |                    |\n   |       | namespace     |\
    \ elements from        |                    |\n   |       | attribute or  | another\
    \ namespace    |                    |\n   |       | element       | that the MS\
    \ does not |                    |\n   |       |               | support.     \
    \        |                    |\n   |       |               |                \
    \      |                    |\n   | 435   | Other         | request requires \
    \    |                    |\n   |       | unsupported   | another capability \
    \  |                    |\n   |       | capability    | not supported by the |\
    \                    |\n   |       |               | MS.                  |  \
    \                  |\n   +-------+---------------+----------------------+--------------------+\n\
    \                           Table 1: Status Codes\n"
- title: 4.7.  Type Definitions
  contents:
  - "4.7.  Type Definitions\n   This section defines types referenced in attribute\
    \ definitions.\n"
- title: 4.7.1.  Boolean
  contents:
  - "4.7.1.  Boolean\n   The value space of boolean is the set {true, false, 1, 0}\
    \ as defined\n   in Section 3.2.2 of [XMLSchema:Part2].  In accordance with this\n\
    \   definition, the concept of false can be lexically represented by the\n   strings\
    \ \"0\" and \"false\" and the concept of true by the strings \"1\"\n   and \"\
    true\"; implementations MUST support both styles of lexical\n   representation.\n"
- title: 4.7.2.  Non-Negative Integer
  contents:
  - "4.7.2.  Non-Negative Integer\n   The value space of non-negative integer is the\
    \ infinite set\n   {0,1,2,...} as defined in Section 3.3.20 of [XMLSchema:Part2].\n"
- title: 4.7.3.  Positive Integer
  contents:
  - "4.7.3.  Positive Integer\n   The value space of positive integer is the infinite\
    \ set {1,2,...} as\n   defined in Section 3.3.25 of [XMLSchema:Part2].\n"
- title: 4.7.4.  String
  contents:
  - "4.7.4.  String\n   A string in the character encoding associated with the XML\
    \ element as\n   defined in Section 3.2.1 of [XMLSchema:Part2].\n"
- title: 4.7.5.  Time Designation
  contents:
  - "4.7.5.  Time Designation\n   A time designation consists of a non-negative real\
    \ number followed by\n   a time unit identifier.\n   The time unit identifiers\
    \ are: \"ms\" (milliseconds) and \"s\" (seconds).\n   Examples include: \"3s\"\
    , \"850ms\", \"0.7s\", \".5s\" and \"+1.5s\".\n"
- title: 4.7.6.  MIME Media Type
  contents:
  - "4.7.6.  MIME Media Type\n   A string formatted as an IANA MIME media type [MIME.mediatypes].\
    \  The\n   ABNF ([RFC5234]) production for the string is:\n   media-type = type-name\
    \ \"/\" subtype-name *(\";\" parameter)\n   parameter = parameter-name \"=\" value\n\
    \   where \"type-name\" and \"subtype-name\" are defined in Section 4.2 of\n \
    \  [RFC4288], \"parameter-name\" is defined in Section 4.3 of [RFC4288],\n   and\
    \ \"value\" is defined in Section 5.1 of [RFC2045].\n"
- title: 4.7.7.  Language Identifier
  contents:
  - "4.7.7.  Language Identifier\n   A language identifier labels information content\
    \ as being of a\n   particular human language variant.  Following the XML specification\n\
    \   for language identification [XML], a legal language identifier is\n   identified\
    \ by a [RFC5646] code and matched according to [RFC4647].\n"
- title: 5.  Formal Syntax
  contents:
  - "5.  Formal Syntax\n   This section defines the XML schema for the Mixer Control\
    \ Package.\n   The schema is normative.\n   The schema defines datatypes, attributes,\
    \ and mixer elements in the\n   urn:ietf:params:xml:ns:msc-mixer namespace.  In\
    \ most elements, the\n   order of child elements is significant.  The schema is\
    \ extensible:\n   elements allow attributes and child elements from other namespaces.\n\
    \   Elements from outside this package's namespace can occur after\n   elements\
    \ defined in this package.\n   The schema is dependent upon the schema (framework.xsd)\
    \ defined in\n   Appendix A.1 of the Control Framework [RFC6230].\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <xsd:schema targetNamespace=\"urn:ietf:params:xml:ns:msc-mixer\"\
    \n    xmlns:fw=\"urn:ietf:params:xml:ns:control:framework-attributes\"\n    elementFormDefault=\"\
    qualified\"\n    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n    xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    \n    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n    <xsd:annotation>\n\
    \     <xsd:documentation>\n      IETF MediaCtrl Mixer 1.0 (20110104)\n      This\
    \ is the schema of the Mixer Control Package.  It\n      defines request, response,\
    \ and notification elements for\n      mixing.\n      The schema namespace is\
    \ urn:ietf:params:xml:ns:msc-mixer\n     </xsd:documentation>\n    </xsd:annotation>\n\
    \    <!--\n     #############################################################\n\
    \     SCHEMA IMPORTS\n     #############################################################\n\
    \    -->\n    <xsd:import\n     namespace=\"urn:ietf:params:xml:ns:control:framework-attributes\"\
    \n     schemaLocation=\"framework.xsd\">\n     <xsd:annotation>\n      <xsd:documentation>\n\
    \       This import brings in the framework attributes for\n       conferenceid\
    \ and connectionid.\n      </xsd:documentation>\n     </xsd:annotation>\n    </xsd:import>\n\
    \    <!--\n     #####################################################\n     Extensible\
    \ core type\n     #####################################################\n    -->\n\
    \    <xsd:complexType name=\"Tcore\">\n     <xsd:annotation>\n      <xsd:documentation>\n\
    \       This type is extended by other (non-mixed) component types to\n      \
    \ allow attributes from other namespaces.\n      </xsd:documentation>\n     </xsd:annotation>\n\
    \     <xsd:sequence/>\n     <xsd:anyAttribute namespace=\"##other\" processContents=\"\
    lax\" />\n    </xsd:complexType>\n    <!--\n     #####################################################\n\
    \     TOP-LEVEL ELEMENT: mscmixer\n     #####################################################\n\
    \    -->\n    <xsd:complexType name=\"mscmixerType\">\n     <xsd:complexContent>\n\
    \      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n        <xsd:choice>\n\
    \         <xsd:element ref=\"createconference\" />\n         <xsd:element ref=\"\
    modifyconference\" />\n         <xsd:element ref=\"destroyconference\" />\n  \
    \       <xsd:element ref=\"join\" />\n         <xsd:element ref=\"unjoin\" />\n\
    \         <xsd:element ref=\"modifyjoin\" />\n         <xsd:element ref=\"response\"\
    \ />\n         <xsd:element ref=\"event\" />\n         <xsd:element ref=\"audit\"\
    \ />\n         <xsd:element ref=\"auditresponse\" />\n         <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n          maxOccurs=\"unbounded\" processContents=\"\
    lax\" />\n        </xsd:choice>\n       </xsd:sequence>\n       <xsd:attribute\
    \ name=\"version\" type=\"version.datatype\"\n        use=\"required\" />\n  \
    \     <xsd:attribute name=\"desclang\" type=\"xsd:language\"\n        default=\"\
    i-default\" />\n      </xsd:extension>\n     </xsd:complexContent>\n    </xsd:complexType>\n\
    \    <xsd:element name=\"mscmixer\" type=\"mscmixerType\" />\n    <!--\n     #####################################################\n\
    \     CONFERENCE MANAGEMENT TYPES\n     #####################################################\n\
    \    -->\n    <!--  createconference -->\n    <xsd:complexType name=\"createconferenceType\"\
    >\n     <xsd:complexContent>\n      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n\
    \        <xsd:element ref=\"codecs\" minOccurs=\"0\"\n         maxOccurs=\"1\"\
    \ />\n        <xsd:element ref=\"audio-mixing\" minOccurs=\"0\"\n         maxOccurs=\"\
    1\" />\n        <xsd:element ref=\"video-layouts\" minOccurs=\"0\"\n         maxOccurs=\"\
    1\" />\n        <xsd:element ref=\"video-switch\" minOccurs=\"0\"\n         maxOccurs=\"\
    1\" />\n        <xsd:element ref=\"subscribe\" minOccurs=\"0\"\n         maxOccurs=\"\
    1\" />\n        <xsd:any namespace=\"##other\"\n         processContents=\"lax\"\
    \ minOccurs=\"0\" maxOccurs=\"unbounded\" />\n       </xsd:sequence>\n       <xsd:attribute\
    \ name=\"conferenceid\" type=\"xsd:string\" />\n       <xsd:attribute name=\"\
    reserved-talkers\"\n        type=\"xsd:nonNegativeInteger\" default=\"0\" />\n\
    \       <xsd:attribute name=\"reserved-listeners\"\n        type=\"xsd:nonNegativeInteger\"\
    \ default=\"0\" />\n      </xsd:extension>\n     </xsd:complexContent>\n    </xsd:complexType>\n\
    \    <xsd:element name=\"createconference\" type=\"createconferenceType\" />\n\
    \    <!--  modifyconference -->\n    <xsd:complexType name=\"modifyconferenceType\"\
    >\n     <xsd:complexContent>\n      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n\
    \        <xsd:element ref=\"codecs\" minOccurs=\"0\"\n         maxOccurs=\"1\"\
    \ />\n        <xsd:element ref=\"audio-mixing\" minOccurs=\"0\"\n         maxOccurs=\"\
    1\" />\n        <xsd:element ref=\"video-layouts\" minOccurs=\"0\"\n         maxOccurs=\"\
    1\" />\n        <xsd:element ref=\"video-switch\" minOccurs=\"0\"\n         maxOccurs=\"\
    1\" />\n        <xsd:element ref=\"subscribe\" />\n        <xsd:any namespace=\"\
    ##other\"\n         processContents=\"lax\" minOccurs=\"0\" maxOccurs=\"unbounded\"\
    \ />\n       </xsd:sequence>\n       <xsd:attribute name=\"conferenceid\" type=\"\
    xsd:string\"\n        use=\"required\" />\n      </xsd:extension>\n     </xsd:complexContent>\n\
    \    </xsd:complexType>\n    <xsd:element name=\"modifyconference\" type=\"modifyconferenceType\"\
    \ />\n    <!--  destroyconference -->\n    <xsd:complexType name=\"destroyconferenceType\"\
    >\n    <xsd:complexContent>\n      <xsd:extension base=\"Tcore\">\n      <xsd:sequence>\n\
    \       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n         maxOccurs=\"\
    unbounded\" processContents=\"lax\" />\n       </xsd:sequence>\n      <xsd:attribute\
    \ name=\"conferenceid\" type=\"xsd:string\"\n      use=\"required\" />\n     \
    \ </xsd:extension>\n      </xsd:complexContent>\n    </xsd:complexType>\n    <xsd:element\
    \ name=\"destroyconference\"\n     type=\"destroyconferenceType\" />\n    <!--\n\
    \     #####################################################\n     JOIN TYPES\n\
    \     #####################################################\n    -->\n    <xsd:complexType\
    \ name=\"joinType\">\n     <xsd:complexContent>\n      <xsd:extension base=\"\
    Tcore\">\n       <xsd:sequence>\n        <xsd:element ref=\"stream\" minOccurs=\"\
    0\"\n         maxOccurs=\"unbounded\" />\n        <xsd:any namespace=\"##other\"\
    \n         processContents=\"lax\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n\
    \       </xsd:sequence>\n       <xsd:attribute name=\"id1\" type=\"xsd:string\"\
    \n        use=\"required\" />\n       <xsd:attribute name=\"id2\" type=\"xsd:string\"\
    \n        use=\"required\" />\n      </xsd:extension>\n     </xsd:complexContent>\n\
    \    </xsd:complexType>\n    <xsd:element name=\"join\" type=\"joinType\" />\n\
    \    <xsd:complexType name=\"modifyjoinType\">\n     <xsd:complexContent>\n  \
    \    <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n        <xsd:element\
    \ ref=\"stream\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\" />\n      \
    \  <xsd:any namespace=\"##other\"\n         processContents=\"lax\" minOccurs=\"\
    0\" maxOccurs=\"unbounded\" />\n       </xsd:sequence>\n       <xsd:attribute\
    \ name=\"id1\" type=\"xsd:string\"\n        use=\"required\" />\n       <xsd:attribute\
    \ name=\"id2\" type=\"xsd:string\"\n        use=\"required\" />\n      </xsd:extension>\n\
    \     </xsd:complexContent>\n    </xsd:complexType>\n    <xsd:element name=\"\
    modifyjoin\" type=\"modifyjoinType\" />\n    <xsd:complexType name=\"unjoinType\"\
    >\n     <xsd:complexContent>\n      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n\
    \        <xsd:element ref=\"stream\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\"\
    \ />\n        <xsd:any namespace=\"##other\"\n         processContents=\"lax\"\
    \ minOccurs=\"0\" maxOccurs=\"unbounded\" />\n       </xsd:sequence>\n       <xsd:attribute\
    \ name=\"id1\" type=\"xsd:string\"\n        use=\"required\" />\n       <xsd:attribute\
    \ name=\"id2\" type=\"xsd:string\"\n        use=\"required\" />\n      </xsd:extension>\n\
    \     </xsd:complexContent>\n    </xsd:complexType>\n    <xsd:element name=\"\
    unjoin\" type=\"unjoinType\" />\n    <!--\n     #####################################################\n\
    \     OTHER TYPES\n     #####################################################\n\
    \    -->\n    <xsd:complexType name=\"eventType\">\n     <xsd:complexContent>\n\
    \      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n        <xsd:choice>\n\
    \         <xsd:element ref=\"active-talkers-notify\"\n          minOccurs=\"0\"\
    \ maxOccurs=\"1\" />\n         <xsd:element ref=\"unjoin-notify\"\n          minOccurs=\"\
    0\" maxOccurs=\"1\" />\n         <xsd:element ref=\"conferenceexit\"\n       \
    \   minOccurs=\"0\" maxOccurs=\"1\" />\n         <xsd:any namespace=\"##other\"\
    \ minOccurs=\"0\"\n          maxOccurs=\"unbounded\" processContents=\"lax\" />\n\
    \        </xsd:choice>\n       </xsd:sequence>\n      </xsd:extension>\n     </xsd:complexContent>\n\
    \    </xsd:complexType>\n    <xsd:element name=\"event\" type=\"eventType\" />\n\
    \    <xsd:complexType name=\"activetalkersnotifyType\">\n     <xsd:complexContent>\n\
    \      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n        <xsd:element\
    \ ref=\"active-talker\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\" />\n\
    \        <xsd:any namespace=\"##other\" minOccurs=\"0\"\n         maxOccurs=\"\
    unbounded\" processContents=\"lax\" />\n       </xsd:sequence>\n       <xsd:attribute\
    \ name=\"conferenceid\" type=\"xsd:string\"\n        use=\"required\" />\n   \
    \   </xsd:extension>\n     </xsd:complexContent>\n    </xsd:complexType>\n   \
    \ <xsd:element name=\"active-talkers-notify\"\n     type=\"activetalkersnotifyType\"\
    \ />\n    <xsd:complexType name=\"activetalkerType\">\n     <xsd:complexContent>\n\
    \      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n        <xsd:any\
    \ namespace=\"##other\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\" processContents=\"\
    lax\" />\n       </xsd:sequence>\n       <xsd:attributeGroup ref=\"fw:framework-attributes\"\
    \ />\n      </xsd:extension>\n     </xsd:complexContent>\n    </xsd:complexType>\n\
    \    <xsd:element name=\"active-talker\" type=\"activetalkerType\" />\n    <xsd:complexType\
    \ name=\"unjoinnotifyType\">\n     <xsd:complexContent>\n      <xsd:extension\
    \ base=\"Tcore\">\n       <xsd:sequence>\n        <xsd:any namespace=\"##other\"\
    \ minOccurs=\"0\"\n         maxOccurs=\"unbounded\" processContents=\"lax\" />\n\
    \       </xsd:sequence>\n       <xsd:attribute name=\"status\" type=\"xsd:nonNegativeInteger\"\
    \n         use=\"required\" />\n       <xsd:attribute name=\"reason\" type=\"\
    xsd:string\" />\n         <xsd:attribute name=\"desclang\" type=\"xsd:language\"\
    />\n       <xsd:attribute name=\"id1\" type=\"xsd:string\"\n        use=\"required\"\
    \ />\n       <xsd:attribute name=\"id2\" type=\"xsd:string\"\n        use=\"required\"\
    \ />\n      </xsd:extension>\n     </xsd:complexContent>\n    </xsd:complexType>\n\
    \    <xsd:element name=\"unjoin-notify\" type=\"unjoinnotifyType\" />\n    <!--\
    \  conferenceexit-->\n    <xsd:complexType name=\"conferenceexitType\">\n    \
    \ <xsd:complexContent>\n      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n\
    \        <xsd:any namespace=\"##other\" minOccurs=\"0\"\n         maxOccurs=\"\
    unbounded\" processContents=\"lax\" />\n       </xsd:sequence>\n       <xsd:attribute\
    \ name=\"conferenceid\" type=\"xsd:string\"\n        use=\"required\" />\n   \
    \    <xsd:attribute name=\"status\"\n        type=\"xsd:nonNegativeInteger\" use=\"\
    required\" />\n       <xsd:attribute name=\"reason\" type=\"xsd:string\" />\n\
    \         <xsd:attribute name=\"desclang\" type=\"xsd:language\"/>\n      </xsd:extension>\n\
    \     </xsd:complexContent>\n    </xsd:complexType>\n    <xsd:element name=\"\
    conferenceexit\" type=\"conferenceexitType\" />\n    <xsd:complexType name=\"\
    responseType\">\n     <xsd:complexContent>\n      <xsd:extension base=\"Tcore\"\
    >\n      <xsd:sequence>\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\
    \n         maxOccurs=\"unbounded\" processContents=\"lax\" />\n       </xsd:sequence>\n\
    \       <xsd:attribute name=\"status\" type=\"status.datatype\"\n        use=\"\
    required\" />\n       <xsd:attribute name=\"reason\" type=\"xsd:string\" />\n\
    \         <xsd:attribute name=\"desclang\" type=\"xsd:language\"/>\n       <xsd:attributeGroup\
    \ ref=\"fw:framework-attributes\" />\n      </xsd:extension>\n     </xsd:complexContent>\n\
    \    </xsd:complexType>\n    <xsd:element name=\"response\" type=\"responseType\"\
    \ />\n    <xsd:complexType name=\"subscribeType\">\n     <xsd:complexContent>\n\
    \      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n        <xsd:element\
    \ ref=\"active-talkers-sub\"\n         minOccurs=\"0\" maxOccurs=\"1\" />\n  \
    \      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\"\
    \ processContents=\"lax\" />\n       </xsd:sequence>\n      </xsd:extension>\n\
    \     </xsd:complexContent>\n    </xsd:complexType>\n    <xsd:element name=\"\
    subscribe\" type=\"subscribeType\" />\n    <xsd:complexType name=\"activetalkerssubType\"\
    >\n     <xsd:complexContent>\n      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n\
    \        <xsd:any namespace=\"##other\" minOccurs=\"0\"\n         maxOccurs=\"\
    unbounded\" processContents=\"lax\" />\n       </xsd:sequence>\n       <xsd:attribute\
    \ name=\"interval\"\n        type=\"xsd:nonNegativeInteger\" default=\"3\" />\n\
    \      </xsd:extension>\n     </xsd:complexContent>\n    </xsd:complexType>\n\
    \    <xsd:element name=\"active-talkers-sub\"\n     type=\"activetalkerssubType\"\
    \ />\n    <xsd:complexType name=\"streamType\">\n     <xsd:complexContent>\n \
    \     <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n        <xsd:element\
    \ ref=\"volume\" minOccurs=\"0\"\n         maxOccurs=\"1\" />\n        <xsd:element\
    \ ref=\"clamp\" minOccurs=\"0\"\n         maxOccurs=\"1\" />\n        <xsd:element\
    \ ref=\"region\" minOccurs=\"0\"\n         maxOccurs=\"1\" />\n        <xsd:element\
    \ ref=\"priority\" minOccurs=\"0\"\n         maxOccurs=\"1\" />\n        <xsd:any\
    \ namespace=\"##other\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\" processContents=\"\
    lax\" />\n       </xsd:sequence>\n       <xsd:attribute name=\"media\" type=\"\
    media.datatype\"\n        use=\"required\" />\n       <xsd:attribute name=\"label\"\
    \ type=\"label.datatype\" />\n       <xsd:attribute name=\"direction\"\n     \
    \   type=\"direction.datatype\" default=\"sendrecv\" />\n      </xsd:extension>\n\
    \     </xsd:complexContent>\n    </xsd:complexType>\n    <xsd:element name=\"\
    stream\" type=\"streamType\" />\n    <xsd:complexType name=\"volumeType\">\n \
    \    <xsd:complexContent>\n      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n\
    \        <xsd:any namespace=\"##other\" minOccurs=\"0\"\n         maxOccurs=\"\
    unbounded\" processContents=\"lax\" />\n       </xsd:sequence>\n       <xsd:attribute\
    \ name=\"controltype\"\n        type=\"volumecontroltype.datatype\" use=\"required\"\
    \ />\n       <xsd:attribute name=\"value\" type=\"xsd:string\" />\n      </xsd:extension>\n\
    \     </xsd:complexContent>\n    </xsd:complexType>\n    <xsd:element name=\"\
    volume\" type=\"volumeType\" />\n    <xsd:complexType name=\"clampType\">\n  \
    \   <xsd:complexContent>\n      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n\
    \        <xsd:any namespace=\"##other\" minOccurs=\"0\"\n         maxOccurs=\"\
    unbounded\" processContents=\"lax\" />\n       </xsd:sequence>\n       <xsd:attribute\
    \ name=\"tones\" type=\"xsd:string\"\n        default=\"1 2 3 4 5 6 7 8 9 0 *\
    \ # A B C D\"/>\n      </xsd:extension>\n     </xsd:complexContent>\n    </xsd:complexType>\n\
    \    <xsd:element name=\"clamp\" type=\"clampType\" />\n    <!--  region  -->\n\
    \    <xsd:simpleType name=\"regionType\">\n     <xsd:restriction base=\"xsd:NMTOKEN\"\
    \ />\n    </xsd:simpleType>\n    <xsd:element name=\"region\" type=\"regionType\"\
    \ />\n    <!--  priority  -->\n    <xsd:simpleType name=\"priorityType\">\n  \
    \   <xsd:restriction base=\"xsd:positiveInteger\" />\n    </xsd:simpleType>\n\
    \    <xsd:element name=\"priority\" type=\"priorityType\" />\n    <xsd:complexType\
    \ name=\"audiomixingType\">\n     <xsd:complexContent>\n      <xsd:extension base=\"\
    Tcore\">\n      <xsd:sequence>\n        <xsd:any namespace=\"##other\" minOccurs=\"\
    0\"\n         maxOccurs=\"unbounded\" processContents=\"lax\" />\n       </xsd:sequence>\n\
    \       <xsd:attribute name=\"type\" type=\"audiomix.datatype\"\n        default=\"\
    nbest\" />\n       <xsd:attribute name=\"n\" type=\"xsd:nonNegativeInteger\"\n\
    \        default=\"0\" />\n      </xsd:extension>\n     </xsd:complexContent>\n\
    \    </xsd:complexType>\n    <xsd:element name=\"audio-mixing\" type=\"audiomixingType\"\
    \ />\n    <!-- video-switch -->\n    <xsd:complexType name=\"videoswitchType\"\
    >\n     <xsd:complexContent>\n      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n\
    \         <xsd:choice>\n          <xsd:element name=\"vas\" type=\"Tcore\"/>\n\
    \          <xsd:element name=\"controller\" type=\"Tcore\"/>\n          <xsd:any\
    \ namespace=\"##other\" processContents=\"lax\" />\n        </xsd:choice>\n  \
    \     </xsd:sequence>\n       <xsd:attribute name=\"interval\"\n        type=\"\
    xsd:nonNegativeInteger\" default=\"3\" />\n       <xsd:attribute name=\"activespeakermix\"\
    \n        type=\"xsd:boolean\" default=\"false\" />\n      </xsd:extension>\n\
    \     </xsd:complexContent>\n    </xsd:complexType>\n    <xsd:element name=\"\
    video-switch\" type=\"videoswitchType\" />\n    <!-- video-layouts -->\n    <xsd:complexType\
    \ name=\"videolayoutsType\">\n     <xsd:complexContent>\n      <xsd:extension\
    \ base=\"Tcore\">\n       <xsd:sequence>\n        <xsd:element ref=\"video-layout\"\
    \ minOccurs=\"0\"\n         maxOccurs=\"unbounded\" />\n        <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\" processContents=\"\
    lax\" />\n       </xsd:sequence>\n      </xsd:extension>\n     </xsd:complexContent>\n\
    \    </xsd:complexType>\n    <xsd:element name=\"video-layouts\" type=\"videolayoutsType\"\
    \ />\n    <!-- video-layout -->\n    <xsd:complexType name=\"videolayoutType\"\
    >\n    <xsd:complexContent>\n      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n\
    \        <xsd:choice>\n          <xsd:element name=\"single-view\" type=\"Tcore\"\
    />\n          <xsd:element name=\"dual-view\" type=\"Tcore\"/>\n          <xsd:element\
    \ name=\"dual-view-crop\" type=\"Tcore\"/>\n          <xsd:element name=\"dual-view-2x1\"\
    \ type=\"Tcore\"/>\n          <xsd:element name=\"dual-view-2x1-crop\" type=\"\
    Tcore\"/>\n          <xsd:element name=\"quad-view\" type=\"Tcore\"/>\n      \
    \    <xsd:element name=\"multiple-3x3\" type=\"Tcore\"/>\n          <xsd:element\
    \ name=\"multiple-4x4\" type=\"Tcore\"/>\n          <xsd:element name=\"multiple-5x1\"\
    \ type=\"Tcore\"/>\n          <xsd:any namespace=\"##other\" processContents=\"\
    lax\" />\n        </xsd:choice>\n       </xsd:sequence>\n      <xsd:attribute\
    \ name=\"min-participants\"\n        type=\"xsd:positiveInteger\" default=\"1\"\
    \ />\n      </xsd:extension>\n     </xsd:complexContent>\n    </xsd:complexType>\n\
    \    <xsd:element name=\"video-layout\" type=\"videolayoutType\" />\n    <xsd:complexType\
    \ name=\"auditType\">\n     <xsd:complexContent>\n      <xsd:extension base=\"\
    Tcore\">\n      <xsd:sequence>\n      <xsd:any namespace=\"##other\" minOccurs=\"\
    0\"\n       maxOccurs=\"unbounded\" processContents=\"lax\" />\n      </xsd:sequence>\n\
    \       <xsd:attribute name=\"capabilities\"\n        type=\"xsd:boolean\" default=\"\
    true\" />\n       <xsd:attribute name=\"mixers\" type=\"xsd:boolean\"\n      \
    \  default=\"true\" />\n       <xsd:attribute name=\"conferenceid\" type=\"xsd:string\"\
    \ />\n      </xsd:extension>\n     </xsd:complexContent>\n    </xsd:complexType>\n\
    \    <xsd:element name=\"audit\" type=\"auditType\" />\n    <xsd:complexType name=\"\
    auditresponseType\">\n     <xsd:complexContent>\n      <xsd:extension base=\"\
    Tcore\">\n       <xsd:sequence>\n        <xsd:element ref=\"capabilities\" minOccurs=\"\
    0\"\n         maxOccurs=\"1\" />\n        <xsd:element ref=\"mixers\" minOccurs=\"\
    0\"\n         maxOccurs=\"1\" />\n        <xsd:any namespace=\"##other\" minOccurs=\"\
    0\"\n         maxOccurs=\"unbounded\" processContents=\"lax\" />\n       </xsd:sequence>\n\
    \       <xsd:attribute name=\"status\" type=\"status.datatype\"\n        use=\"\
    required\" />\n       <xsd:attribute name=\"reason\" type=\"xsd:string\" />\n\
    \         <xsd:attribute name=\"desclang\" type=\"xsd:language\"/>\n      </xsd:extension>\n\
    \     </xsd:complexContent>\n    </xsd:complexType>\n    <xsd:element name=\"\
    auditresponse\" type=\"auditresponseType\" />\n    <!-- mixers -->\n    <xsd:complexType\
    \ name=\"mixersType\">\n     <xsd:complexContent>\n      <xsd:extension base=\"\
    Tcore\">\n       <xsd:sequence>\n        <xsd:element ref=\"conferenceaudit\"\
    \ minOccurs=\"0\"\n         maxOccurs=\"unbounded\" />\n        <xsd:element ref=\"\
    joinaudit\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\" />\n        <xsd:any\
    \ namespace=\"##other\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\" processContents=\"\
    lax\" />\n       </xsd:sequence>\n      </xsd:extension>\n     </xsd:complexContent>\n\
    \    </xsd:complexType>\n    <xsd:element name=\"mixers\" type=\"mixersType\"\
    \ />\n    <!--  joinaudit -->\n    <xsd:complexType name=\"joinauditType\">\n\
    \     <xsd:complexContent>\n      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n\
    \        <xsd:any namespace=\"##other\"\n         processContents=\"lax\" minOccurs=\"\
    0\" maxOccurs=\"unbounded\" />\n       </xsd:sequence>\n       <xsd:attribute\
    \ name=\"id1\" type=\"xsd:string\"\n        use=\"required\" />\n       <xsd:attribute\
    \ name=\"id2\" type=\"xsd:string\"\n        use=\"required\" />\n      </xsd:extension>\n\
    \     </xsd:complexContent>\n    </xsd:complexType>\n    <xsd:element name=\"\
    joinaudit\" type=\"joinauditType\" />\n    <!-- conferenceaudit -->\n    <xsd:complexType\
    \ name=\"conferenceauditType\">\n     <xsd:complexContent>\n      <xsd:extension\
    \ base=\"Tcore\">\n       <xsd:sequence>\n        <xsd:element ref=\"codecs\"\
    \ minOccurs=\"0\"\n         maxOccurs=\"1\" />\n        <xsd:element ref=\"participants\"\
    \ minOccurs=\"0\"\n         maxOccurs=\"1\" />\n        <xsd:element ref=\"video-layout\"\
    \ minOccurs=\"0\"\n         maxOccurs=\"1\" />\n        <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\" processContents=\"\
    lax\" />\n       </xsd:sequence>\n       <xsd:attribute name=\"conferenceid\"\
    \ type=\"xsd:string\"\n        use=\"required\" />\n      </xsd:extension>\n \
    \    </xsd:complexContent>\n    </xsd:complexType>\n    <xsd:element name=\"conferenceaudit\"\
    \ type=\"conferenceauditType\" />\n    <!-- participants -->\n    <xsd:complexType\
    \ name=\"participantsType\">\n     <xsd:complexContent>\n      <xsd:extension\
    \ base=\"Tcore\">\n       <xsd:sequence>\n        <xsd:element ref=\"participant\"\
    \ minOccurs=\"0\"\n         maxOccurs=\"unbounded\" />\n        <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\" processContents=\"\
    lax\" />\n       </xsd:sequence>\n      </xsd:extension>\n     </xsd:complexContent>\n\
    \    </xsd:complexType>\n    <xsd:element name=\"participants\" type=\"participantsType\"\
    \ />\n    <!-- participant -->\n    <xsd:complexType name=\"participantType\"\
    >\n     <xsd:complexContent>\n      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n\
    \        <xsd:any namespace=\"##other\" minOccurs=\"0\"\n         maxOccurs=\"\
    unbounded\" processContents=\"lax\" />\n       </xsd:sequence>\n       <xsd:attribute\
    \ name=\"id\" type=\"xsd:string\"\n        use=\"required\" />\n      </xsd:extension>\n\
    \     </xsd:complexContent>\n    </xsd:complexType>\n    <xsd:element name=\"\
    participant\" type=\"participantType\" />\n    <!-- capabilities -->\n    <xsd:complexType\
    \ name=\"capabilitiesType\">\n     <xsd:complexContent>\n      <xsd:extension\
    \ base=\"Tcore\">\n       <xsd:sequence>\n        <xsd:element ref=\"codecs\"\
    \ minOccurs=\"1\"\n         maxOccurs=\"1\" />\n        <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\" processContents=\"\
    lax\" />\n       </xsd:sequence>\n      </xsd:extension>\n     </xsd:complexContent>\n\
    \    </xsd:complexType>\n    <xsd:element name=\"capabilities\" type=\"capabilitiesType\"\
    \ />\n    <!-- codecs -->\n    <xsd:complexType name=\"codecsType\">\n     <xsd:complexContent>\n\
    \      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n        <xsd:element\
    \ ref=\"codec\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\" />\n       \
    \ <xsd:any namespace=\"##other\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\"\
    \ processContents=\"lax\" />\n       </xsd:sequence>\n      </xsd:extension>\n\
    \     </xsd:complexContent>\n    </xsd:complexType>\n    <xsd:element name=\"\
    codecs\" type=\"codecsType\" />\n    <!-- codec -->\n    <xsd:complexType name=\"\
    codecType\">\n     <xsd:complexContent>\n      <xsd:extension base=\"Tcore\">\n\
    \       <xsd:sequence>\n        <xsd:element ref=\"subtype\" minOccurs=\"1\"\n\
    \         maxOccurs=\"1\" />\n        <xsd:element ref=\"params\" minOccurs=\"\
    0\"\n         maxOccurs=\"1\" />\n        <xsd:any namespace=\"##other\" minOccurs=\"\
    0\"\n         maxOccurs=\"unbounded\" processContents=\"lax\" />\n       </xsd:sequence>\n\
    \        <xsd:attribute name=\"name\" type=\"xsd:string\"\n        use=\"required\"\
    \ />\n      </xsd:extension>\n     </xsd:complexContent>\n    </xsd:complexType>\n\
    \    <xsd:element name=\"codec\" type=\"codecType\" />\n    <!-- subtype -->\n\
    \    <xsd:simpleType name=\"subtypeType\">\n     <xsd:restriction base=\"xsd:string\"\
    \ />\n    </xsd:simpleType>\n    <xsd:element name=\"subtype\" type=\"subtypeType\"\
    \ />\n    <!-- params -->\n    <xsd:complexType name=\"paramsType\">\n     <xsd:complexContent>\n\
    \      <xsd:extension base=\"Tcore\">\n       <xsd:sequence>\n        <xsd:element\
    \ ref=\"param\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\" />\n       \
    \ <xsd:any namespace=\"##other\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\"\
    \ processContents=\"lax\" />\n       </xsd:sequence>\n      </xsd:extension>\n\
    \     </xsd:complexContent>\n    </xsd:complexType>\n    <xsd:element name=\"\
    params\" type=\"paramsType\" />\n    <!--  param -->\n       <!--  doesn't extend\
    \ tCore since its content model is mixed -->\n    <xsd:complexType name=\"paramType\"\
    \ mixed=\"true\">\n     <xsd:sequence/>\n     <xsd:attribute name=\"name\" type=\"\
    xsd:string\" use=\"required\" />\n     <xsd:attribute name=\"type\" type=\"mime.datatype\"\
    \n     default=\"text/plain\" />\n        <xsd:attribute name=\"encoding\" type=\"\
    xsd:string\"/>\n    </xsd:complexType>\n    <xsd:element name=\"param\" type=\"\
    paramType\" />\n    <!--\n     ####################################################\n\
    \     DATATYPES\n     ####################################################\n \
    \   -->\n   <xsd:simpleType name=\"version.datatype\">\n     <xsd:restriction\
    \ base=\"xsd:NMTOKEN\">\n      <xsd:enumeration value=\"1.0\" />\n     </xsd:restriction>\n\
    \    </xsd:simpleType>\n    <xsd:simpleType name=\"eventname.datatype\">\n   \
    \  <xsd:restriction base=\"xsd:NMTOKEN\">\n      <xsd:pattern value=\"[a-zA-Z0-9\\\
    .]+\" />\n     </xsd:restriction>\n    </xsd:simpleType>\n    <xsd:simpleType\
    \ name=\"audiomix.datatype\">\n     <xsd:restriction base=\"xsd:NMTOKEN\">\n \
    \     <xsd:enumeration value=\"nbest\" />\n      <xsd:enumeration value=\"controller\"\
    \ />\n     </xsd:restriction>\n    </xsd:simpleType>\n    <xsd:simpleType name=\"\
    media.datatype\">\n     <xsd:restriction base=\"xsd:string\" />\n    </xsd:simpleType>\n\
    \    <xsd:simpleType name=\"label.datatype\">\n     <xsd:restriction base=\"xsd:string\"\
    \ />\n    </xsd:simpleType>\n    <xsd:simpleType name=\"status.datatype\">\n \
    \    <xsd:restriction base=\"xsd:positiveInteger\">\n      <xsd:pattern value=\"\
    [0-9][0-9][0-9]\" />\n     </xsd:restriction>\n    </xsd:simpleType>\n    <xsd:simpleType\
    \ name=\"direction.datatype\">\n     <xsd:restriction base=\"xsd:NMTOKEN\">\n\
    \      <xsd:enumeration value=\"sendonly\" />\n      <xsd:enumeration value=\"\
    recvonly\" />\n      <xsd:enumeration value=\"sendrecv\" />\n      <xsd:enumeration\
    \ value=\"inactive\" />\n     </xsd:restriction>\n    </xsd:simpleType>\n    <xsd:simpleType\
    \ name=\"mime.datatype\">\n     <xsd:restriction base=\"xsd:string\" />\n    </xsd:simpleType>\n\
    \    <xsd:simpleType name=\"volumecontroltype.datatype\">\n     <xsd:restriction\
    \ base=\"xsd:NMTOKEN\">\n      <xsd:enumeration value=\"automatic\" />\n     \
    \ <xsd:enumeration value=\"setgain\" />\n      <xsd:enumeration value=\"setstate\"\
    \ />\n     </xsd:restriction>\n    </xsd:simpleType>\n   </xsd:schema>\n     \
    \               Figure 10: Mixer Package XML Schema\n"
- title: 6.  Examples
  contents:
  - "6.  Examples\n   This section provides examples of the Mixer Control Package.\n"
- title: 6.1.  AS-MS Framework Interaction Examples
  contents:
  - "6.1.  AS-MS Framework Interaction Examples\n   The following example assumes\
    \ a Control Channel has been established\n   and synced as described in the Media\
    \ Control Channel Framework\n   ([RFC6230]).\n   The XML messages are in angled\
    \ brackets (with the root <mscmixer> and\n   other details omitted for clarity);\
    \ the REPORT status is in\n   parentheses.  Other aspects of the protocol are\
    \ omitted for\n   readability.\n"
- title: 6.1.1.  Creating a Conference Mixer and Joining a Participant
  contents:
  - "6.1.1.  Creating a Conference Mixer and Joining a Participant\n   A conference\
    \ mixer is created successfully and a participant is\n   joined.\n           \
    \  Application Server (AS)                   Media Server (MS)\n             \
    \   |                                             |\n                |       (1)\
    \ CONTROL: <createconference>       |\n                |  ---------------------------------------->\
    \  |\n                |                                             |\n      \
    \          |       (2) 202                               |\n                |\
    \  <---------------------------------------   |\n                |           \
    \                                  |\n                |                      \
    \                       |\n                |       (3) REPORT: <response status=\"\
    200\"/>  |\n                |                   (terminate)               |\n\
    \                |  <----------------------------------------  |\n           \
    \     |                                             |\n                |     \
    \  (4) 200                               |\n                |  ---------------------------------------->\
    \  |\n                |                                             |\n      \
    \          |       (5) CONTROL: <join id1=.. id2=..>     |\n                |\
    \  ---------------------------------------->  |\n                |           \
    \                                  |\n                |       (6) 202        \
    \                       |\n                |  <---------------------------------------\
    \   |\n                |                                             |\n     \
    \           |       (7) REPORT: <response status=\"200\"/>  |\n              \
    \  |                   (terminate)               |\n                |  <----------------------------------------\
    \  |\n                |                                             |\n      \
    \          |       (8) 200                               |\n                |\
    \  ---------------------------------------->  |\n"
- title: 6.1.2.  Receiving Active Talker Notifications
  contents:
  - "6.1.2.  Receiving Active Talker Notifications\n   An active talker notification\
    \ event is sent by the MS.\n             Application Server (AS)             \
    \      Media Server (MS)\n                |                                  \
    \           |\n                |       (1) CONTROL: <event ...>              |\n\
    \                |  <---------------------------------------   |\n           \
    \     |                                             |\n                |     \
    \  (4) 200                               |\n                |  ---------------------------------------->\
    \  |\n                |                                             |\n"
- title: 6.1.3.  Conference Termination
  contents:
  - "6.1.3.  Conference Termination\n   The MS receives a request to terminate the\
    \ conference, resulting in\n   conferenceexit and participant unjoined notifications.\n\
    \             Application Server (AS)                   Media Server (MS)\n  \
    \              |                                             |\n             \
    \   |       (1) CONTROL: <destroyconference>      |\n                |  ---------------------------------------->\
    \  |\n                |                                             |\n      \
    \          |       (2) 200: <response status=\"200\"/>     |\n               \
    \ |  <---------------------------------------   |\n                |         \
    \                                    |\n                |       (3) CONTROL: <event\
    \ ..>               |\n                |                   (unjoin-notify)   \
    \        |\n                |  <----------------------------------------  |\n\
    \                |                                             |\n           \
    \     |       (4) 200                               |\n                |  ---------------------------------------->\
    \  |\n                |                                             |\n      \
    \          |       (5) CONTROL:  <event ..>              |\n                |\
    \                   (conferenceexit)          |\n                |  <----------------------------------------\
    \  |\n                |                                             |\n      \
    \          |       (6) 200                               |\n                |\
    \  ---------------------------------------->  |\n"
- title: 6.2.  Mixing Examples
  contents:
  - "6.2.  Mixing Examples\n   The following examples show how the mixing package\
    \ can be used to\n   create audio conferences, bridge connections, and video conferences.\n\
    \   The examples do not specify all messages between the AS and MS.\n"
- title: 6.2.1.  Audio Conferencing
  contents:
  - "6.2.1.  Audio Conferencing\n   The AS sends a request to create a conference\
    \ mixer:\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n    <createconference conferenceid=\"conf1\"\n     reserved-talkers=\"2\" reserved-listeners=\"\
    3\">\n     <audio-mixing type=\"nbest\"/>\n     <subscribe>\n      <active-talkers-sub\
    \ interval=\"5\"/>\n     </subscribe>\n    </createconference>\n   </mscmixer>\n\
    \   The request specifies that the conference is assigned the conference\n   id\
    \ \"conf1\" and is configured with 2 reserved talkers, 3 reserved\n   listener\
    \ slots, audio-mixing policy set to nbest, and with active\n   talkers notifications\
    \ set to 5 seconds.\n   If the MS is able to create this conference mixer, it\
    \ sends a 200\n   response:\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n    <response status=\"200\" reason=\"conference created\"\n              conferenceid=\"\
    conf1\"/>\n   </mscmixer>\n   The AS is now able to join connections to the conference\
    \ as\n   participants.  A participant able to contribute to the audio mix\n  \
    \ would be joined as follows:\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n    <join id1=\"1536067209:913cd14c\" id2=\"conf1\">\n     <stream media=\"\
    audio\" direction=\"sendrecv\"/>\n    </join>\n   </mscmixer>\n   If the MS can\
    \ join the participant 1536067209:913cd14c to the\n   conference conf1 with audio\
    \ in both directions, then it sends a\n   successful response:\n   <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n    <response status=\"200\"\
    \ reason=\"join successful\"/>\n   </mscmixer>\n   The AS could also join listener-only\
    \ participants to the conference\n   by setting the stream direction to receive\
    \ only:\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n    <join id1=\"9936067209:914cd14c\" id2=\"conf1\">\n     <stream media=\"\
    audio\" direction=\"recvonly\"/>\n    </join>\n   </mscmixer>\n   If the MS can\
    \ join the participant 9936067209:914cd14c to the\n   conference conf1, then it\
    \ would send a successful response (not\n   shown).\n   As the active talker changes,\
    \ the MS sends an active talker\n   notification to the AS:\n   <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n    <event>\n     <active-talkers-notify\
    \ conferenceid=\"conf1\">\n      <active-talker connectionid=\"1536067209:913cd14c\"\
    />\n     </active-talkers-notify>\n    </event>\n   </mscmixer>\n   The AS could\
    \ decide to change the status of a talker connection so\n   that they can only\
    \ listen:\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n    <modifyjoin id1=\"1536067209:913cd14c\" id2=\"conf1\">\n     <stream media=\"\
    audio\" direction=\"recvonly\"/>\n    </modifyjoin>\n   </mscmixer>\n   Where\
    \ the participant 1536067209:913cd14c is no longer able to\n   contribute to the\
    \ audio mix on the conference.  If the MS is able to\n   execute this request,\
    \ it would send a 200 response.\n   The AS could decide to remove this participant\
    \ from the conference:\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n    <unjoin id1=\"1536067209:913cd14c\" id2=\"conf1\"/>\n   </mscmixer>\n \
    \  Again, if the MS can execute this request, a 200 response would be\n   sent.\n\
    \   Finally, the AS terminates the conference:\n   <mscmixer version=\"1.0\" xmlns=\"\
    urn:ietf:params:xml:ns:msc-mixer\">\n    <destroyconference conferenceid=\"conf1\"\
    />\n   </mscmixer>\n   If the MS is able to destroy the conference conf1, it sends\
    \ a 200\n   response:\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n    <response status=\"200\" conferenceid=\"conf1\"/>\n   </mscmixer>\n   For\
    \ each participant attached to the conference when it is destroyed,\n   the MS\
    \ sends an unjoin notification event:\n   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"\
    >\n    <event>\n     <unjoin-notify status=\"2\" id1=\"9936067209:914cd14c\"\n\
    \         id2=\"conf1\"/>\n    </event>\n   </mscmixer>\n   And the MS sends a\
    \ conferenceexit notification event when the\n   conference finally exits:\n \
    \  <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n   \
    \ <event>\n     <conferenceexit status=\"0\" conferenceid=\"conf1\"/>\n    </event>\n\
    \   </mscmixer>\n"
- title: 6.2.2.  Bridging Connections
  contents:
  - "6.2.2.  Bridging Connections\n   The mixer package can be used to join connections\
    \ to one another.  In\n   a call-center scenario, for example, this package can\
    \ be used to set\n   up and modify connections between a caller, agent, and supervisor.\n\
    \   A caller is joined to an agent with bidirectional audio:\n   <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n    <join id1=\"caller:001\"\
    \ id2=\"agent:002\">\n     <stream media=\"audio\" direction=\"sendrecv\"/>\n\
    \    </join>\n   </mscmixer>\n   If the MS is able to establish this connection,\
    \ then it would send a\n   200 response:\n   <mscmixer version=\"1.0\" xmlns=\"\
    urn:ietf:params:xml:ns:msc-mixer\">\n    <response status=\"200\"/>\n   </mscmixer>\n\
    \   Now assume that the AS wants a supervisor to listen into the agent\n   conversation\
    \ with the caller and provide whispered guidance to the\n   agent.  First, the\
    \ AS would send a request to join the supervisor and\n   the caller connections:\n\
    \   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n  \
    \  <join  id1=\"supervisor:003\" id2=\"caller:001\">\n     <stream media=\"audio\"\
    \ direction=\"recvonly\"/>\n    </join>\n   </mscmixer>\n   If this request was\
    \ successful, audio output from the caller\n   connection would now be sent to\
    \ both the agent and the supervisor.\n   Second, the AS would send a request to\
    \ join the supervisor and the\n   agent connections:\n   <mscmixer version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n    <join id1=\"supervisor:001\"\
    \ id2=\"agent:002\">\n     <stream media=\"audio\" direction=\"sendrecv\"/>\n\
    \    </join>\n   </mscmixer>\n   If this request was successful, the audio mixing\
    \ would occur on both\n   the agent and supervisor connections: the agent would\
    \ hear the caller\n   and supervisor, and the supervisor would hear the agent\
    \ and caller.\n   The caller would only hear the agent.  If the MS is unable to\
    \ join\n   and mix connections in this way, it would send a 426 response.\n"
- title: 6.2.3.  Video Conferencing
  contents:
  - "6.2.3.  Video Conferencing\n   In this example, an audio-video conference is\
    \ created where the\n   loudest participant has the most prominent region in the\
    \ video\n   layout.\n   The AS sends a request to create an audio-video conference:\n\
    \   <mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\">\n  \
    \  <createconference conferenceid=\"conf2\">\n     <audio-mixing type=\"nbest\"\
    />\n     <video-layouts>\n      <video-layout min-participants=\"1\"><single-view/></video-layout>\n\
    \      <video-layout min-participants=\"2\"><dual-view/></video-layout>\n    \
    \  <video-layout min-participants=\"3\"><quad-view/></video-layout>\n      <video-layout\
    \ min-participants=\"5\"><multiple-5x1/></video-layout>\n     </video-layouts>\n\
    \     <video-switch><vas/></video-switch>\n    </createconference>\n   </mscmixer>\n\
    \   In this configuration, the conference uses a nbest audio mixing\n   policy\
    \ and a <vas/> video-switching policy, so that the loudest\n   speaker receives\
    \ the most prominent region in the layout.  Multiple\n   video layouts are specified\
    \ and the active one depends on the number\n   of participants.\n   Assume that\
    \ 4 participants are already joined to the conference.  In\n   that case, the\
    \ video layout will be quad-view (Figure 6) with the\n   most active speaker displayed\
    \ in region 1.  When a fifth participant\n   joins, the video layout automatically\
    \ switches to a multiple-5x1\n   layout (Figure 9), again with the most active\
    \ speaker in region 1.\n   The AS can manipulate which participants are displayed\
    \ in the\n   remaining regions.  For example, it could force an existing\n   conference\
    \ participant to be displayed in region 2:\n   <mscmixer version=\"1.0\" xmlns=\"\
    urn:ietf:params:xml:ns:msc-mixer\">\n    <modifyjoin id1=\"1536067209:913cd14c\"\
    \ id2=\"conf2\">\n     <stream media=\"video\">\n      <region>2</region>\n  \
    \   </stream>\n    </modifyjoin>\n   </mscmixer>\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   As this Control Package processes XML markup,\
    \ implementations MUST\n   address the security considerations of [RFC3023].\n\
    \   As a Control Package of the Media Control Channel Framework,\n   security,\
    \ confidentiality, and integrity of messages transported over\n   the Control\
    \ Channel MUST be addressed as described in Section 12 of\n   the Media Control\
    \ Channel Framework ([RFC6230]), including transport-\n   level protection, Control\
    \ Channel policy management, and session\n   establishment.  In addition, implementations\
    \ MUST address security,\n   confidentiality, and integrity of User Agent sessions\
    \ with the MS,\n   both in terms of SIP signaling and the associated RTP media\
    \ flow; see\n   [RFC6230] for further details on this topic.\n   Adequate transport\
    \ protection and authentication are critical,\n   especially when the implementation\
    \ is deployed in open networks.  If\n   the implementation fails to correctly\
    \ address these issues, it risks\n   exposure to malicious attacks, including\
    \ (but not limited to):\n   Denial of Service:  An attacker could insert a request\
    \ message into\n      the transport stream causing specific conferences or join\
    \ mixers\n      on the MS to be destroyed.  For example, <destroyconference\n\
    \      conferenceid=\"XXXX\">, where the value of \"XXXX\" could be guessed\n\
    \      or discovered by auditing active mixers on the MS using an <audit>\n  \
    \    request.  Likewise, an attacker could impersonate the MS and\n      insert\
    \ error responses into the transport stream thereby denying\n      the AS access\
    \ to package capabilities.\n   Resource Exhaustion:  An attacker could insert\
    \ into the Control\n      Channel new request messages (or modify existing ones)\
    \ with, for\n      instance, <createconference> elements causing large numbers\
    \ of\n      conference mixer resources to be allocated.  At some point, this\n\
    \      will exhaust the number of conference mixers that the MS is able\n    \
    \  to allocate.\n   The Media Control Channel Framework permits additional policy\n\
    \   management (beyond that specified for the Media Control Channel\n   Framework),\
    \ including resource access and Control Channel usage, to\n   be specified at\
    \ the Control Package level.  (See Section 12.3 of\n   [RFC6230].)\n   Since creation\
    \ of conference and join mixers is associated with\n   media-mixing resources\
    \ on the MS, the security policy for this\n   Control Package needs to address\
    \ how such mixers are securely managed\n   across more than one Control Channel.\
    \  Such a security policy is only\n   useful for secure, confidential, and integrity-protected\
    \ channels.\n   The identity of Control Channels is determined by the channel\n\
    \   identifier, i.e., the value of the 'cfw-id' attribute in the SDP and\n   Dialog-ID\
    \ header in the channel protocol (see [RFC6230]).  Channels\n   are the same if\
    \ they have the same identifier; otherwise, they are\n   different.  This Control\
    \ Package imposes the following additional\n   security policies:\n   Responses:\
    \  The MS MUST only send a response to a mixer management or\n      audit request\
    \ using the same Control Channel as the one used to\n      send the request.\n\
    \   Notifications:  The MS MUST only send notification events for\n      conference\
    \ and join mixers using the same Control Channel as it\n      received the request\
    \ creating the mixer.\n   Auditing:  The MS MUST only provide audit information\
    \ about\n      conference and join mixers that have been created on the same\n\
    \      Control Channel as the one upon which the <audit> request is sent.\n  \
    \    For example, if a join between two connections has been created on\n    \
    \  one channel, then a request on another channel to audit all mixers\n      --\
    \ <audit mixers=\"true\"/> -- would not report on this join mixer.\n   Rejection:\
    \  The MS SHOULD reject requests to audit or manipulate an\n      existing conference\
    \ or join mixer on the MS if the channel is not\n      the same as the one used\
    \ when the mixer was created.  The MS\n      rejects a request by sending a Control\
    \ Framework 403 response (see\n      Sections 7.4 and 12.3 of [RFC6230]).  For\
    \ example, if a channel\n      with identifier 'cfw1234' has been used to send\
    \ a request to\n      create a particular conference and the MS receives on channel\n\
    \      'cfw98969' a request to audit or destroy this particular\n      conference,\
    \ then the MS sends a Control Framework 403 response.\n   There can be valid reasons\
    \ why an implementation does not reject an\n   audit or mixer manipulation request\
    \ on a different channel from the\n   one that created the mixer.  For example,\
    \ a system administrator\n   might require a separate channel to audit mixer resources\
    \ created by\n   system users and to terminate mixers consuming excessive system\n\
    \   resources.  Alternatively, a system monitor or resource broker might\n   require\
    \ a separate channel to audit mixers managed by this package on\n   a MS.  However,\
    \ the full implications need to be understood by the\n   implementation and carefully\
    \ weighed before accepting these reasons\n   as valid.  If the reasons are not\
    \ valid in their particular\n   circumstances, the MS rejects such requests.\n\
    \   There can also be valid reasons for 'channel handover' including high\n  \
    \ availability support or when one AS needs to take over management of\n   mixers\
    \ after the AS that created them has failed.  This could be\n   achieved by the\
    \ Control Channels using the same channel identifier,\n   one after another. \
    \ For example, assume a channel is created with the\n   identifier 'cfw1234',\
    \ and the channel is used to create mixers on the\n   MS.  This channel (and associated\
    \ SIP dialog) then terminates due to\n   a failure on the AS.  As permitted by\
    \ the Control Framework, the\n   channel identifier 'cfw1234' could then be reused\
    \ so that another\n   channel is created with the same identifier 'cfw1234', allowing\
    \ it to\n   'take over' management of the mixers on the MS.  Again, the\n   implementation\
    \ needs to understand the full implications and\n   carefully weigh them before\
    \ accepting these reasons as valid.  If the\n   reasons are not valid for their\
    \ particular circumstances, the MS uses\n   the appropriate SIP mechanisms to\
    \ prevent session establishment when\n   the same channel identifier is used in\
    \ setting up another Control\n   Channel (see Section 4 of [RFC6230]).\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   Per this specification, IANA has registered a new\
    \ Media Control\n   Channel Framework Package, a new XML namespace, a new XML\
    \ schema, and\n   a new MIME type.\n   IANA has further created a new registry\
    \ for the response codes for\n   the MEDIACTRL Mixer Control Package, RFC 6505.\n"
- title: 8.1.  Control Package Registration
  contents:
  - "8.1.  Control Package Registration\n   This section registers a new Media Control\
    \ Channel Framework package,\n   per the instructions in Section 13.1 of [RFC6230].\n\
    \      To: ietf-sip-control@iana.org\n      Subject: Registration of new Channel\
    \ Framework package\n      Package Name: msc-mixer/1.0\n      Published Specification(s):\
    \ RFC 6505\n      Person & email address to contact for further information:\n\
    \         IETF MEDIACTRL working group (mediactrl@ietf.org),\n         Scott McGlashan\
    \ (smcg.stds01@mcglashan.org).\n"
- title: 8.2.  URN Sub-Namespace Registration
  contents:
  - "8.2.  URN Sub-Namespace Registration\n   This section registers a new XML namespace,\n\
    \   \"urn:ietf:params:xml:ns:msc-mixer\", per the guidelines in RFC 3688\n   [RFC3688].\n\
    \         URI: urn:ietf:params:xml:ns:msc-mixer\n         Registrant Contact:\n\
    \            IETF MEDIACTRL working group (mediactrl@ietf.org),\n            Scott\
    \ McGlashan (smcg.stds01@mcglashan.org).\n         XML:\n            BEGIN\n \
    \           <?xml version=\"1.0\"?>\n            <!DOCTYPE html PUBLIC \"-//W3C//DTD\
    \ XHTML 1.0 Strict//EN\"\n                \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\
    >\n             <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n\
    \              <head>\n               <title>Media Control Channel Framework Mixer\n\
    \                      Package attributes</title>\n              </head>\n   \
    \           <body>\n               <h1>Namespace for Media Control Channel\n \
    \                  Framework Mixer Package attributes</h1>\n               <h2>urn:ietf:params:xml:ns:msc-mixer</h2>\n\
    \           <p>See <a href=\"http://www.rfc-editor.org/rfc/rfc6505.txt\">\n  \
    \            RFC 6505</a>.</p>\n              </body>\n             </html>\n\
    \            END\n"
- title: 8.3.  XML Schema Registration
  contents:
  - "8.3.  XML Schema Registration\n   This section registers an XML schema as per\
    \ the guidelines in RFC\n   3688 [RFC3688].\n      URI:  urn:ietf:params:xml:schema:msc-mixer\n\
    \      Registrant Contact:\n         IETF MEDIACTRL working group (mediactrl@ietf.org),\n\
    \         Scott McGlashan (smcg.stds01@mcglashan.org).\n      Schema:  The XML\
    \ for this schema can be found in\n         Section 5 of this document.\n"
- title: 8.4.  MIME Media Type Registration for 'application/msc-mixer+xml'
  contents:
  - "8.4.  MIME Media Type Registration for 'application/msc-mixer+xml'\n   This section\
    \ registers the \"application/msc-mixer+xml\" MIME type.\n   To:  ietf-types@iana.org\n\
    \   Subject:  Registration of MIME media type\n             application/msc-mixer+xml\n\
    \   MIME media type name:  application\n   MIME subtype name:  msc-mixer+xml\n\
    \   Required parameters:  (none)\n   Optional parameters:  charset\n      Indicates\
    \ the character encoding of enclosed XML.  Default is\n      UTF-8.\n   Encoding\
    \ considerations:  Uses XML, which can employ 8-bit\n      characters, depending\
    \ on the character encoding used.  See RFC\n      3023 [RFC3023], Section 3.2.\n\
    \   Security considerations:  No known security considerations outside\n     \
    \ of those provided by the Media Control Channel Framework Mixer\n      Package.\n\
    \   Interoperability considerations:  This content type provides\n      constructs\
    \ for the Media Control Channel Framework Mixer Package.\n   Published specification:\
    \  RFC 6505\n   Applications that use this media type:  Implementations of\n \
    \     the Media Control Channel Framework Mixer package.\n   Additional Information:\n\
    \      Magic Number(s): (none)\n      File extension(s): (none)\n      Macintosh\
    \ File Type Code(s): (none)\n   Person & email address to contact for further\
    \ information:\n      Scott McGlashan <smcg.stds01@mcglashan.org>\n   Intended\
    \ usage:  LIMITED USE\n   Author/Change controller:  The IETF\n   Other information:\
    \  None.\n"
- title: 8.5.  Mixer Control Package Status Code Registration
  contents:
  - "8.5.  Mixer Control Package Status Code Registration\n   This section creates\
    \ an IANA registry for the response codes for the\n   MEDIACTRL Mixer Control\
    \ Package.  New status codes are assigned using\n   the Standards Action process\
    \ defined in RFC 5226 [RFC5226].  The\n   initial population of the registry is\
    \ defined in Section 4.6.\n   The format of this registry is as follows:\n   +----------+----------------+----------------+----------------------+\n\
    \   | Code     | Summary        | Description    | Reference            |\n  \
    \ +----------+----------------+----------------+----------------------+\n   |\
    \ status   | brief summary  | full           | reference document   |\n   | code\
    \     | of the status  | description of | defining the status  |\n   | number\
    \   | code           | the status     | code                 |\n   |         \
    \ |                | code           |                      |\n   +----------+----------------+----------------+----------------------+\n\
    \      Table 2: Fields for Mixer Control Package Status Code Registry\n"
- title: 9.  Contributors
  contents:
  - "9.  Contributors\n   Asher Shiratzky provided valuable support and contributions\
    \ to early\n   draft versions of this document.\n   The authors would like to\
    \ thank the Mixer design team consisting of\n   Roni Even, Lorenzo Miniero, Adnan\
    \ Saleem, Diego Besprosvan, and Mary\n   Barnes who provided valuable feedback,\
    \ input, diagrams, and text to\n   this document.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   The authors would like to thank Steve Buko and Stephane\
    \ Bastien for\n   expert reviews of this work.\n   Shawn Emery carried out a thorough\
    \ security review.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2045]          Freed, N. and N. Borenstein,\
    \ \"Multipurpose\n                      Internet Mail Extensions (MIME) Part One:\
    \ Format\n                      of Internet Message Bodies\", RFC 2045,\n    \
    \                  November 1996.\n   [RFC2119]          Bradner, S., \"Key words\
    \ for use in RFCs to\n                      Indicate Requirement Levels\", BCP\
    \ 14, RFC 2119,\n                      March 1997.\n   [RFC3023]          Murata,\
    \ M., St. Laurent, S., and D. Kohn, \"XML\n                      Media Types\"\
    , RFC 3023, January 2001.\n   [RFC3688]          Mealling, M., \"The IETF XML\
    \ Registry\", BCP 81,\n                      RFC 3688, January 2004.\n   [RFC4288]\
    \          Freed, N. and J. Klensin, \"Media Type\n                      Specifications\
    \ and Registration Procedures\",\n                      BCP 13, RFC 4288, December\
    \ 2005.\n   [RFC4574]          Levin, O. and G. Camarillo, \"The Session\n   \
    \                   Description Protocol (SDP) Label Attribute\",\n          \
    \            RFC 4574, August 2006.\n   [RFC4647]          Phillips, A. and M.\
    \ Davis, \"Matching of Language\n                      Tags\", BCP 47, RFC 4647,\
    \ September 2006.\n   [RFC5226]          Narten, T. and H. Alvestrand, \"Guidelines\
    \ for\n                      Writing an IANA Considerations Section in RFCs\"\
    ,\n                      BCP 26, RFC 5226, May 2008.\n   [RFC5234]          Crocker,\
    \ D. and P. Overell, \"Augmented BNF for\n                      Syntax Specifications:\
    \ ABNF\", STD 68, RFC 5234,\n                      January 2008.\n   [RFC5646]\
    \          Phillips, A. and M. Davis, \"Tags for Identifying\n               \
    \       Languages\", BCP 47, RFC 5646, September 2009.\n   [RFC6230]         \
    \ Boulton, C., Melanchuk, T., and S. McGlashan,\n                      \"Media\
    \ Control Channel Framework\", RFC 6230,\n                      May 2011.\n  \
    \ [RFC6501]          Novo, O., Camarillo, G., Morgan, D., and J.\n           \
    \           Urpalainen, \"Conference Information Data Model for\n            \
    \          Centralized Conferencing (XCON)\", RFC 6501,\n                    \
    \  March 2012.\n   [XML]              Bray, T., Paoli, J., Sperberg-McQueen, C.,\
    \ Maler,\n                      E., and F. Yergeau, \"Extensible Markup Language\n\
    \                      (XML) 1.0 (Fifth Edition)\", World Wide Web\n         \
    \             Consortium Recommendation REC-xml-20081126,\n                  \
    \    November 2008,\n                      <http://www.w3.org/TR/2008/REC-xml-20081126>.\n\
    \   [XMLSchema:Part2]  Biron, P. and A. Malhotra, \"XML Schema Part 2:\n     \
    \                 Datatypes Second Edition\", W3C Recommendation,\n          \
    \            October 2004.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [IANA]             IANA, \"RTP Payload Types\"\
    ,\n                      <http://www.iana.org/assignments/rtp-parameters>.\n \
    \  [MIME.mediatypes]  IANA, \"MIME Media Types\",\n                      <http://www.iana.org/assignments/media-types>.\n\
    \   [RFC2277]          Alvestrand, H., \"IETF Policy on Character Sets and\n \
    \                     Languages\", BCP 18, RFC 2277, January 1998.\n   [RFC3261]\
    \          Rosenberg, J., Schulzrinne, H., Camarillo, G.,\n                  \
    \    Johnston, A., Peterson, J., Sparks, R., Handley,\n                      M.,\
    \ and E. Schooler, \"SIP: Session Initiation\n                      Protocol\"\
    , RFC 3261, June 2002.\n   [RFC3550]          Schulzrinne, H., Casner, S., Frederick,\
    \ R., and V.\n                      Jacobson, \"RTP: A Transport Protocol for\
    \ Real-Time\n                      Applications\", STD 64, RFC 3550, July 2003.\n\
    \   [RFC5022]          Van Dyke, J., Burger, E., and A. Spitzer, \"Media\n   \
    \                   Server Control Markup Language (MSCML) and\n             \
    \         Protocol\", RFC 5022, September 2007.\n   [RFC5167]          Dolly,\
    \ M. and R. Even, \"Media Server Control\n                      Protocol Requirements\"\
    , RFC 5167, March 2008.\n   [RFC5707]          Saleem, A., Xin, Y., and G. Sharratt,\
    \ \"Media\n                      Server Markup Language (MSML)\", RFC 5707,\n\
    \                      February 2010.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Scott McGlashan\n   Hewlett-Packard\n   EMail: smcg.stds01@mcglashan.org\n\
    \   Tim Melanchuk\n   Rainwillow\n   EMail: timm@rainwillow.com\n   Chris Boulton\n\
    \   NS-Technologies\n   EMail: chris@ns-technologies.com\n"
