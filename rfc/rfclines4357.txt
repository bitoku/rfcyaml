Abstract This document describes the cryptographic algorithms and parameters supplementary to the original GOST specifications, GOST 28147 89, GOST R 34.10 94, GOST R 34.10 2001, and GOST R 34.11 94, for use in Internet applications.
Introduction Russian cryptographic standards that define the algorithms GOST 28147
[GOST28147], GOST R 34.10 94
[GOSTR341094], GOST R 34.10 2001 [GOSTR341001], and GOST R34.11 94 [GOSTR341194] provide basic information about how the algorithms work, but supplemental specifications are needed to effectively use the algorithms (a brief English technical description of these algorithms can be found in [Schneier95]).
This document is a proposal put forward by the CRYPTO PRO Company to provide supplemental information and specifications needed by the "Russian Cryptographic Software Compatibility Agreement" community.
In this document, the key words MUST, MUST NOT, REQUIRED, SHOULD, SHOULD NOT, RECOMMENDED, and
MAY are to be interpreted as described in [RFC2119].
^' stands for the power operator.
(K, D) is D, encrypted with key K using GOST 28147 89 in "prostaya zamena" (ECB) mode.
decryptECB (K, D) is D, decrypted with key K using GOST 28147 89 in ECB mode.
encryptCFB (IV, K, D) is D, encrypted with key K using GOST 28147 89 in "gammirovanie s obratnoj svyaziyu" (64 bit CFB) mode, and IV is used as the initialization vector.
encryptCNT (IV, K, D) is D, encrypted with key K using GOST 28147 89 in "gammirovanie" (counter) mode, and IV is used as the initialization vector.
gostR3411 (D) is the 256 bit result of the GOST R 34.11 94 hash function, used with zero initialization vector, and S Box parameter, defined by id GostR3411 94 CryptoProParamSet (see Section 11.2).
gost28147IMIT (IV, K, D) is the 32 bit result of the GOST 28147 89 in "imitovstavka" (MAC) mode, used with D as plaintext, K as key and IV as initialization vector.
Note that the standard specifies its use in this mode only with an initialization vector of zero.
When keys and initialization vectors are converted to/from byte arrays, little endian byte order is assumed.
This document defines four cipher properties that allow an implementer to vary cipher operations.
The four parameters are the cipher mode, the key meshing algorithm, the padding mode, and the S box.
[GOST28147] defines only three cipher modes for GOST 28147 89: ECB, CFB, and counter mode.
This document defines an additional cipher mode, CBC.
When GOST 28147 89 is used to process large amounts of data, a symmetric key should be protected by a key meshing algorithm.
Key meshing transforms a symmetric key after some amount of data has been processed.
This document defines the CryptoPro key meshing algorithm.
The cipher mode, key meshing algorithm, padding mode, and S box are specified by algorithm parameters.
This section provides the supplemental information for GOST 28147 89 (a block to block primitive) needed to operate in CBC mode.
Before each plaintext block is encrypted, it is combined with the cipher text of the previous block via a bitwise XOR operation.
This ensures that even if the plaintext contains many identical blocks, each block will encrypt to a different cipher text block.
The initialization vector is combined with the first plaintext block by a bitwise XOR operation before the block is encrypted.
This section provides the supplemental information for GOST 28147 89, needed to operate on plaintext where the length is not divisible by GOST 28147 89 block size (8 bytes).
Let x (0 < x <  8) be the number of bytes in the last, possibly incomplete, block of data.
There are three padding modes:
Zero padding: 8 x remaining bytes are filled with zero
PKCS#5 padding: 8 x remaining bytes are filled with the value of 8 x.
If there's no incomplete block, one extra block filled with value 8 is added.
Random padding: 8 x remaining bytes of the last block are set to random.
Algorithms Key meshing algorithms transform the key after processing a certain amount of data.
In applications that must be strictly robust to attacks based on timing and EMI analysis, one symmetric key should not be used for quantities of plaintext larger than 1024 octets.
A key meshing algorithm affects internal cipher state; it is not a protocol level feature.
Its role is similar to that of a cipher mode.
The choice of key meshing algorithm is usually dictated by the encryption algorithm parameters, but some protocols explicitly specify applicable key meshing algorithms.
All encryption parameter sets defined in this document specify the use of the CryptoPro key meshing algorithm, except for id Gost28147  89
TestParamSet, which specifies use of null key meshing algorithm.
The null key meshing algorithm never changes a key.
The identifier for this algorithm is:
There are no meaningful parameters to this algorithm.
If present, AlgorithmIdentifier.parameters MUST contain NULL.
The CryptoPro key meshing algorithm transforms the key and initialization vector every 1024 octets (8192 bits, or 256 64 bit blocks) of plaintext data.
This algorithm has the same drawback as OFB cipher mode: it is impossible to re establish crypto synch while decrypting a ciphertext if parts of encrypted data are corrupted, lost, or processed out of order.
Furthermore, it is impossible to re synch even if an IV for each data packet is provided explicitly.
Use of this algorithm in protocols such as IPsec ESP requires special care.
The identifier for this algorithm is:
} There are no meaningful parameters to this algorithm.
If present, AlgorithmIdentifier.parameters MUST contain NULL.
GOST 28147 89, in encrypt, decrypt, or MAC mode, starts with key K[0]
Let IVn[0] be the value of the initialization vector after processing the first 1024 octets of data.
Processing of the next 1024 octets will start with K[1] and IV0[1], which are calculated using the following formula:
K[i 1]   decryptECB (K[i], C)
Where C   {0x69, 0x00, 0x72, 0x22,   0x64, 0xC9, 0x04, 0x23, 0x8D, 0x3A, 0xDB, 0x96,
0x46, 0xE9, 0x2A, 0xC4, 0x18, 0xFE, 0xAC, 0x94,
and IV0[i 1] are calculated;   i is incremented;   Encryption or decryption of next 1024 bytes starts, using the new key and IV; The process is repeated until all the data has been processed.
(K,text) function is based on the hash function GOST R 34.11 94, as defined in [HMAC], with the following parameter values: B   32,
PRF GOSTR3411 PRF GOSTR3411 is a pseudorandom function, based on HMAC GOSTR3411.
It is calculated as P hash, defined in Section 5 of [TLS].
Key Derivation Algorithms Standards [GOSTR341094] and [GOSTR341001] do not define any key derivation algorithms.
Section 5.1 specifies algorithm VKO GOST R 34.10 94, which generates GOST KEK using two GOST R 34.10 94 keypairs.
Section 5.2 specifies algorithm VKO GOST R 34.10 2001, which generates GOST KEK using two GOST R 34.10 2001 keypairs and UKM.
Keypairs MUST have identical parameters.
VKO GOST R 34.10 94
This algorithm creates a key encryption key (KEK) using the sender's private key and the recipient's public key (or vice versa).
Exchange key KEK is a 256 bit hash of the 1024 bit shared secret that is generated using Diffie Hellman key agreement.
where x sender's private key, a^x sender's public key y recipient's private key, a^y recipient's public key a, p parameters 2) Calculate a 256 bit hash of K(x,y):
Keypairs (x,a^x) and (y,a^y) MUST comply with [GOSTR341094].
This algorithm MUST NOT be used when a^x   a (mod p) or a^y   a (mod p).
VKO GOST R 34.10 2001
This algorithm creates a key encryption key (KEK) using 64 bit UKM, the sender's private key, and the recipient's public key (or the reverse of the latter pair).
(y.P) (512 bit), where x sender's private key (256 bit)
P sender's public key (512 bit)
y recipient's private key (256 bit)
P recipient's public key (512 bit)
UKM non zero integer, produced as in step 2 p. 6.1
[GOSTR341001] P base point on the elliptic curve (two 256 bit coordinates) UKM x
x multiplied by UKM as integers
P a multiple point 2) Calculate a 256 bit hash of K(x,y,UKM):
P) MUST comply with [GOSTR341001].
This algorithm MUST NOT be used when x.
This document defines two key wrap algorithms:
GOST 28147 89 Key Wrap and CryptoPro Key Wrap.
These are used to encrypt a Content Encryption Key (CEK) with a Key Encryption Key (KEK).
89 CEK with a GOST 28147 89 KEK.
Note: This algorithm MUST NOT be used with a KEK produced by VKO GOST R 34.10 94, because such a KEK is constant for every sender recipient pair.
Encrypting many different content encryption keys on the same constant KEK may reveal that KEK.
The GOST 28147 89 key wrap algorithm is: 1)
For a unique symmetric KEK, generate 8 octets at random and call the result UKM.
For a KEK, produced by VKO GOST R 34.10 2001, use the UKM that was used for key derivation.
2) Compute a 4 byte checksum value, gost28147IMIT (UKM, KEK, CEK).
Call the result CEK MAC.
3) Encrypt the CEK in ECB mode using the KEK.
Call the ciphertext CEK ENC.
The wrapped content encryption key is (UKM
This algorithm decrypts GOST 28147 89 CEK with a GOST 28147 89 KEK.
The GOST 28147 89 key unwrap algorithm is: 1)
If the wrapped content encryption key is not 44 octets, then error.
2) Decompose the wrapped content encryption key into UKM, CEK ENC, and CEK MAC.
UKM is the most significant (first) 8 octets.
CEK ENC is next 32 octets, and CEK MAC is the least significant (last) 4 octets.
Decrypt CEK ENC in ECB mode using the KEK.
4) Compute a 4 byte checksum value, gost28147IMIT (UKM, KEK, CEK), compare the result with CEK MAC.
If they are not equal, then error.
89 CEK with a GOST 28147 89 KEK.
It can be used with any KEK (e.g., produced by VKO GOST R 34.10 94 or VKO GOST R 34.10 2001) because a unique UKM is used to diversify the KEK.
The CryptoPro key wrap algorithm is: 1)
For a unique symmetric KEK or a KEK produced by VKO GOST R 34.10 94, generate 8 octets at random.
For a KEK, produced by VKO GOST R 34.10 2001, use the UKM that was used for key derivation.
Diversify KEK, using the CryptoPro KEK Diversification Algorithm, described in Section 6.5.
3) Compute a 4 byte checksum value, gost28147IMIT (UKM, KEK(UKM), CEK).
Call the result CEK MAC.
Encrypt CEK in ECB mode using KEK(UKM).
Call the ciphertext CEK ENC.
The wrapped content encryption key is (UKM
89 CEK with a GOST 28147 89 KEK.
The CryptoPro key unwrap algorithm is: 1)
If the wrapped content encryption key is not 44 octets, then it is an error.
2) Decompose the wrapped content encryption key into UKM, CEK ENC, and CEK MAC.
UKM is the most significant (first) 8 octets.
CEK ENC is next 32 octets, and CEK MAC is the least significant (last) 4 octets.
Diversify KEK using the CryptoPro KEK Diversification Algorithm, described in section 6.5.
Decrypt CEK ENC in ECB mode using KEK(UKM).
5) Compute a 4 byte checksum value, gost28147IMIT (UKM, KEK(UKM), CEK), compare the result with CEK MAC.
If they are not equal, then it is an error.
Given a random 64 bit UKM and a GOST 28147 89 key K, this algorithm creates a new GOST 28147 89 key K(UKM).
K; 2) UKM is split into components a[i,j]:
K[8] are calculated by repeating the following algorithm eight times:
A) K[i] is split into components k[i,j]
(k[i,j] 32 bit integer) B)
i   1 5) Let K(UKM) be K[8].
This algorithm creates a GOST 28147 89 key Kd, given GOST R 34.10 94 or GOST R 34.10 2001 secret key K and diversification data D of size 4..40 bytes.
1) 40 byte blob B is created from D by cloning it enough times to fill all 40 bytes.
For example, if D is 40 bytes long, B   D; If D is 6 bytes long, B
2) B is split into 8 byte UKM and 32 byte SRCKEY (B   UKM SRCKEY).
The algorithm from Section 6.5 is used to create K(UKM) from key K and UKM, with two differences:
Instead of S[i], vector (0,0,0,UKM[i],ff,ff,ff,ff XOR UKM[i]) is used.
During each encryption step, only 8 out of 32 GOST 28147 89 rounds are done.
Kd is calculated: Kd   encryptCFB (UKM, K(UKM), SRCKEY).
Algorithm Parameters Standards [GOST28147], [GOST341194], [GOSTR341094], and [GOSTR341001] do not define specific values for algorithm parameters.
This document introduces the use of ASN.1 object identifiers (OIDs) to specify algorithm parameters.
Identifiers for all of the proposed parameter sets can be found in Appendix ASN.1 modules.
Corresponding parameter values for proposed parameter sets can be found in Section 11.
Encryption Algorithm Parameters GOST 28147
89 can be used in several modes; additional CBC mode is defined in Section 2.1.
It also has an S Box parameter.
(See the Algorithm Parameters part in [GOST28147] in Russian; for a description in English, see [Schneier95], ch.
This table contains the list of proposed parameter sets for GOST 28147 89: Gost28147 89
{ Gost28147 89 ParamSetParameters IDENTIFIED BY
{ Gost28147 89 ParamSetParameters IDENTIFIED BY
{ Gost28147 89 ParamSetParameters IDENTIFIED BY
{ Gost28147 89 ParamSetParameters IDENTIFIED BY
Parameters for GOST 28147 89 are presented in the following form: Gost28147 89
{ NULL IDENTIFIED BY i
GostR3411 94 ParamSetParameters IDENTIFIED BY
id GostR3411 94 CryptoProParamSet } }
Identifier values are in the Appendix ASN.1 modules, and corresponding parameters are in Section 11.2.
Parameters for [GOST341194] are presented in the following form:
94 Digest   start digest value }
{ GostR3410 94 ParamSetParameters IDENTIFIED BY id GostR3410 94
{ GostR3410 94 ParamSetParameters IDENTIFIED BY id GostR3410 94
{ GostR3410 94 ParamSetParameters IDENTIFIED BY id GostR3410 94
{ GostR3410 94 ParamSetParameters IDENTIFIED BY id GostR3410 94
Parameters for GOST R 34.10 94 are presented in the following form:
AlgorithmIdentifier {{ GostR3410 94 ValidationAlgorithms }} OPTIONAL }
Where t bit length of p (512 or 1024 bits); p modulus, prime number, 2^(t 1)<p<2^t; q order of cyclic group, prime number,
2^254<q<2^256, q is a factor of p 1; a generator, integer, 1<a<p 1, at that aq (mod p)   1; validationAlgorithm constant p, q and a calculating algorithm.
x0 seed; c  used for p and q generation; d  used for a generation.
This table contains the list of proposed parameter sets for GOST R 34.10 2001: GostR3410 2001 ParamSetAlgorithm
{ GostR3410 2001 ParamSetParameters IDENTIFIED BY id GostR3410 2001
Parameters for GOST R 34.10 2001 are presented in the following form:
a, b coefficients a and b of the elliptic curve E; p    prime number elliptic curve modulus; q    prime number order of cyclic group;
x, y base point p coordinates.
It is RECOMMENDED that software applications verify signature values and subject public keys and algorithm parameters to conform to [GOSTR341001] and [GOSTR341094] standards prior to their use.
Cryptographic algorithm parameters affect rigidity of algorithms.
The algorithm parameters proposed and described herein, except for the test parameter sets (id Gost28147 89
94 TestParamSet, id GostR3410 2001  TestParamSet), have been analyzed by a special certification laboratory of Scientific and Technical Center, "ATLAS", and by the Center of Certificational Investigations in appropriate levels of target of evaluation (TOE), according to [RFDSL], [RFLLIC], and [CRYPTOLIC].
Use of the test parameter sets or parameter sets not described herein is NOT RECOMMENDED.
When different parameters are used, it is RECOMMENDED that they be subjected to examination by an authorized agency with approved methods of cryptographic analysis.
Cryptographic Gost Useful Definitions Cryptographic Gost Useful Definitions { iso(1) member body(2
Other applications may use them for   their own purposes, but this will not constrain extensions and   modifications needed to maintain or improve the Russian   Cryptography service.
Crypto Pro OID branch id
} id CryptoPro ecc exchanges
id CryptoPro audit record types
id CryptoPro attributes OBJECT IDENTIFIER ::
{ id CryptoPro algorithms attributes(44) }
id CryptoPro name service types OBJECT
id CryptoPro modules cryptographic Gost Useful Definitions(0)
id CryptoPro modules gostR3411 94 DigestSyntax(1)
id CryptoPro modules gostR3411 94 ParamSetSyntax(7)
GOST R 34.10 94 gostR3410 94 PKISyntax OBJECT
id CryptoPro modules  gostR3410 94
id CryptoPro modules gostR3410 94 SignatureSyntax(3)
id CryptoPro modules gostR3410 EncryptionSyntax(5)
id CryptoPro modules  gostR3410 94 ParamSetSyntax(8)
id CryptoPro modules  gostR3410 2001 PKISyntax(9)
id CryptoPro modules gost28147 89 ParamSetSyntax(6)
}   Extended Key Usage for Crypto Pro gost
CryptoPro ExtendedKeyUsage OBJECT IDENTIFIER ::
{ id CryptoPro modules gost CryptoPro ExtendedKeyUsage(13)
{ id CryptoPro modules gost CryptoPro PrivateKey(14)
Pro Transport Layer Security structures gost
1 } gost CryptoPro Constants OBJECT
Useful types ALGORITHM IDENTIFIER ::
CLASS { &id    OBJECT IDENTIFIER UNIQUE, &Type  OPTIONAL }
d } END   Cryptographic Gost Useful Definitions 10.2.
EncryptionSyntax Gost28147 89 EncryptionSyntax {
1 } DEFINITIONS EXPLICIT TAGS ::
Other applications may use them for   their own purposes, but this will not constrain extensions and   modifications needed to maintain or improve the Russian   Cryptography service.
id CryptoPro encrypts, ALGORITHM IDENTIFIER, cryptographic Gost Useful Definitions FROM Cryptographic Gost Useful Definitions { iso(1) member body(2
89 OID id Gost28147 89
CryptoPro algorithms gost28147 89 MAC(22)
GOST 28147 89 cryptographic parameter sets OIDs
Oscar 1 1(5) } id Gost28147 89
CryptoPro RIC 1 ParamSet )
ParamSetSyntax Gost28147 89 ParamSetSyntax {
1 } DEFINITIONS EXPLICIT TAGS ::
Other applications may use them for   their own purposes, but this will not constrain extensions and   modifications needed to maintain or improve the Russian   Cryptography service.
CryptoPro algorithms, id CryptoPro encrypts, gost28147 89
EncryptionSyntax, ALGORITHM IDENTIFIER, cryptographic Gost Useful Definitions FROM Cryptographic Gost Useful Definitions { iso(1) member body(2
} Gost28147 89 UZ, Gost28147 89 ParamSet,
CryptoPro A ParamSet, id Gost28147 89
CryptoPro B ParamSet, id Gost28147 89
CryptoPro C ParamSet, id Gost28147 89
CryptoPro D ParamSet FROM Gost28147 89
EncryptionSyntax gost28147 89 EncryptionSyntax AlgorithmIdentifier FROM PKIX1Explicit88 {iso(1) identified organization(3) dod(6)
OIDs for parameter sets are imported from   Gost28147 89
{ Gost28147 89 ParamSetParameters IDENTIFIED BY
{ Gost28147 89 ParamSetParameters IDENTIFIED BY
{ Gost28147 89 ParamSetParameters IDENTIFIED BY
{ Gost28147 89 ParamSetParameters IDENTIFIED BY
) none(0) } Gost28147 89 KeyMeshingAlgorithms
{ NULL IDENTIFIED BY i
} END   Gost28147 89 ParamSetSyntax 10.4.
94 DigestSyntax GostR3411 94 DigestSyntax { iso(1) member body(2) ru(643)
Other applications may use them for   their own purposes, but this will not constrain extensions and   modifications needed to maintain or improve the Russian   Cryptography service.
id CryptoPro hashes, ALGORITHM IDENTIFIER, cryptographic Gost Useful Definitions FROM Cryptographic Gost Useful Definitions { iso(1) member body(2
id CryptoPro algorithms gostR3411 94(9) }
GOST R 34.11 94 cryptographic parameter set
GOST R 34.11 94 data types
GOST R 34.11 94 digest algorithm & parameters
id GostR3411 94 CryptoProParamSet )
94 CryptoProParamSet { GostR3411 94 DigestParameters IDENTIFIED BY
94 ParamSetSyntax GostR3411 94 ParamSetSyntax {
Other applications may use them for   their own purposes, but this will not constrain extensions and   modifications needed to maintain or improve the Russian   Cryptography service.
IMPORTS gost28147 89 EncryptionSyntax, gostR3411 94 DigestSyntax, ALGORITHM IDENTIFIER FROM Cryptographic Gost Useful Definitions {
1 } Gost28147 89 UZ FROM Gost28147 89
94 TestParamSet, id GostR3411 94 CryptoProParamSet, GostR3411 94 Digest FROM GostR3411 94 DigestSyntax gostR3411 94 DigestSyntax ;
GOST R 34.11 94 cryptographic parameter sets:
OIDs for parameter sets are imported from   GostR3411
GostR3411 94 Digest   initial digest value } GostR3411
GostR3411 94 ParamSetParameters IDENTIFIED BY
GostR3410 94 PKISyntax GostR3410 94 PKISyntax { iso(1) member body(2
Other applications may use them for   their own purposes, but this will not constrain extensions and   modifications needed to maintain or improve the Russian   Cryptography service.
EncryptionSyntax, gostR3411 94 DigestSyntax, ALGORITHM IDENTIFIER, cryptographic Gost Useful Definitions FROM Cryptographic Gost Useful Definitions { iso(1) member body(2
1 } Gost28147 89 ParamSet FROM Gost28147 89
94 TestParamSet, id GostR3411 94 CryptoProParamSet FROM GostR3411 94 DigestSyntax gostR3411 94 DigestSyntax ;
id GostR3411 94 with GostR3410 94 OBJECT
set OIDs id GostR3410 94
id CryptoPro signs test(0) }
IDENTIFIER ( id GostR3410 94
, digestParamSet OBJECT IDENTIFIER ( id GostR3411 94
id GostR3411 94 CryptoProParamSet ), encryptionParamSet Gost28147 89 ParamSet OPTIONAL } GostR3410 94
} } END   GostR3410 94 PKISyntax 10.7.
94 ParamSetSyntax GostR3410 94 ParamSetSyntax {
Other applications may use them for   their own purposes, but this will not constrain extensions and   modifications needed to maintain or improve the Russian   Cryptography service.
id CryptoPro signs, id CryptoPro exchanges, gostR3410 94 PKISyntax, ALGORITHM IDENTIFIER, cryptographic Gost Useful Definitions FROM Cryptographic Gost Useful Definitions { iso(1) member body(2
GostR3410 94 TestParamSet, id GostR3410 94
CryptoPro A ParamSet, id GostR3410 94
CryptoPro B ParamSet, id GostR3410 94
CryptoPro D ParamSet, id GostR3410 94
CryptoPro XchA ParamSet, id GostR3410 94
FROM GostR3410 94 PKISyntax gostR3410 94 PKISyntax AlgorithmIdentifier FROM PKIX1Explicit88 {
254 < q < 2
1 < a < p 1 < 2^
{ GostR3410 94 ParamSetParameters IDENTIFIED BY id GostR3410 94
{ GostR3410 94 ParamSetParameters IDENTIFIED BY id GostR3410 94
{ GostR3410 94 ParamSetParameters IDENTIFIED BY id GostR3410 94
{ GostR3410 94 ParamSetParameters IDENTIFIED BY id GostR3410 94
c    GostR3410 94 ValidationParameters c,
SEQUENCE { x0   GostR3410 94 ValidationBisParameters c, c    GostR3410 94 ValidationBisParameters c, d
1 < d < p 1 < 2^1024 1 } GostR3410
GostR3410 94 ValidationParameters IDENTIFIED BY id GostR3410 94 b
GostR3410 2001 PKISyntax GostR3410 2001 PKISyntax { iso(1) member body(2
Other applications may use them for   their own purposes, but this will not constrain extensions and   modifications needed to maintain or improve the Russian   Cryptography service.
, id CryptoPro ecc exchanges, gost28147 89
EncryptionSyntax, gostR3411 94 DigestSyntax, ALGORITHM IDENTIFIER, cryptographic Gost Useful Definitions FROM Cryptographic Gost Useful Definitions { iso(1) member body(2
1 } Gost28147 89 ParamSet FROM Gost28147 89
94 TestParamSet, id GostR3411 94 CryptoProParamSet FROM GostR3411 94 DigestSyntax gostR3411 94 DigestSyntax ;
id CryptoPro algorithms gostR3410 2001(19)
public key parameter set OIDs id GostR3410 2001
id CryptoPro ecc signs test(0)
CryptoPro ecc signs cryptopro A(1)
CryptoPro ecc signs cryptopro C(3)
{ id CryptoPro ecc exchanges cryptopro XchA(0) }
{ id CryptoPro ecc exchanges cryptopro XchB(1) }
GOST R 34.10 2001 Data Types GostR3410 2001
IDENTIFIER ( id GostR3410 2001
, digestParamSet OBJECT IDENTIFIER ( id GostR3411 94
id GostR3411 94 CryptoProParamSet ), encryptionParamSet Gost28147 89 ParamSet OPTIONAL } GostR3410 2001
2001 PublicKeyParameters IDENTIFIED BY id GostR3410 2001
} } END   GostR3410 2001 PKISyntax 10.9.
ParamSetSyntax { iso(1) member body(2
Other applications may use them for   their own purposes, but this will not constrain extensions and   modifications needed to maintain or improve the Russian   Cryptography service.
IMPORTS gostR3410 2001 PKISyntax, ALGORITHM IDENTIFIER, cryptographic Gost Useful Definitions FROM Cryptographic Gost Useful Definitions { iso(1) member body(2
1 } id GostR3410 2001, id GostR3410 2001
CryptoPro XchA ParamSet, id GostR3410 2001
FROM GostR3410 2001 PKISyntax gostR3410 2001 PKISyntax
< x < p < 2^
0 < y < p < 2^256
OIDs for parameter sets are imported from   GostR3410 2001 PKISyntax GostR3410 2001
{ GostR3410 2001 ParamSetParameters IDENTIFIED BY id GostR3410 2001
} } END   GostR3410 2001
Appendix Parameters Parameters here are given as SEQUENCE OF AlgorithmIdentifier in ASN.1 DER encoding [X.660], stored in the same format as the examples in [RFC4134], can be extracted using the same program.
The result is a valid Base64 blob that can be processed by any Base64 decoder.
Encryption Algorithm Parameters For each AlgorithmIdentifier in this sequence
, the parameters field contains Gost28147 89 ParamSetParameters. 0
SEQUENCE { 17 04   64:
4C DE 38 9C 29 89 EF B6 FF EB 56 C5 5E C2 9B 02 :
3F 89 60 03 97 0C 79 8A A1 D5 5D :
INTEGER 64 89 30    9:
SEQUENCE { 91 06    7:
SEQUENCE { 102 06    7:
E  E  B  3  1
B    6  7  4  7  5
F    2  9  2  C  9
C  9  5    8  8
A  C    1  F  D  3
E    7  0  8  9  0
E  7  8  6    4  2
C  B  0  F  C  8
A  E  B  D    5
1D 2F 29 2C 9C 95 :
88 BD 81 70 BA 31 D2 AC 1F D3 F0 6E
70 89 0B 08 :
A5 C0 E7 86 42 F2 45 C2 E6 5B 29
43 FC A4 34 59 :
CB 0F C8 F1 04 78 7F 37 DD 15 AE BD
51 96 66 E4 179 02    1:
INTEGER 64 185 30    9:
SEQUENCE { 187 06    7:
SEQUENCE { 209 04   64:
73 1C 7A E7 5A
41 42 A3 8C 07 D9 CF FF DF 06 :
34 6A 6F 68 6E 80
FD 76 19 E9 85 FE 48 35 EC 275 02    1:
INTEGER 1 278 02    1:
INTEGER 64 281 30    9:
SEQUENCE { 283 06    7:
} 292 30   94:  SEQUENCE { 294 06    7:
SEQUENCE { 305 04   64:
48 3B 97 FC 5E 72 33 36 8F C9 C6 51 EC D7 E5 BB :
A9 6E 6A 4D 7A EF F0 19 66 1C AF C3 33 B4 7D 78
388 30   94:  SEQUENCE { 390 06    7
SEQUENCE { 401 04   64:
31 C6 C5 C0 0A 23 BE 8F 66 A4 0C 93 F8 :
6C FA D2 1F 4F E7 25 EB 5E 60 AE 90 02
77 A6 71 DC 9D D2 3A 83 E8 4B 64 C5 D0 84 57 49 :
15 99 4C B7 BA 33 E9 AD 89 7F FD
SEQUENCE { 475 06    7:
Digest Algorithm Parameters For each AlgorithmIdentifier in this sequence
, the parameters field contains GostR3411 94 ParamSetParameters.
pi3 pi4 pi5 pi6 pi7
6B 09 66 F7 02
3C 8B 55 95 BF 28 39 B3 2E CC 82 04   32:
00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00
94 CryptoProParamSet 127 30  100:
SEQUENCE { 129 04   64:
A5 74 77 D1 4F FA 66 E3 54 C7 42 4A 60 EC B4 19 :
00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00
GOST R 34.10 94 Public Key Algorithm Parameters For each AlgorithmIdentifier in this sequence
85 45 10 E2 97 7A 4D 63
BC 97 32 2C E5 DC 33 :
86 EA 0A 12 B3 43 E9 19 0F
75 39 84 58 39 :
6B B0 C3 45 D1 65
97 6E F2 19 5E C9 B1 C3 79 :
BD C7 28 5D D5 0D 72 89 F0 AC 6F 49 DD :
B1 8E BE 2C D4 6A
C3 D8 49 5B 14 2A A6 CE 23 E2 :
00 B4 E2 5E FB 01 8E 3C 8B 87 50 5E 2A 67
78 41 8D 3D 85 1E DB 53 17 :
C4 87 1E 40 B0 42
1D 98 92 4E 92 55 61 BD
30 0B 9D DD 05 D2 47 :
24 32 A4 37 17 8B 30 BD 96 19 5B 77 37 89 :
AB 2F FF 15 59 4B 17 6D D1 75 B6 32 56 EE 5A F2 :
31 23 76 54 BB E4 1F 5F 1F
9E 5D 2E 62 A2 A2 :
07 50 91 2D F6 4F 79 95
2A DF 7D 40 B9 36 :
94 bBis 547 30   13:
SEQUENCE { 566 06    7:
00 C6 97 1F C5 75 24 B3 0C 90 18 C5 E6 21 DE 15 :
A6 F8 AE E6 5A 7A
40 46 32 B1 :
BC F0 34 9F FC AF CB 0A 10 31
25 C8 FD 12 AF F0 1B 1D :
06 4E 0A D6 FD E6 AB 91
59 16 6C B9 F2 FC
63 15 7F 3D 0B D9 6A 8E :
F3 50 2A D2 38 10 1B 05
11 63 34 F1 E5 B7 :
85 33 67 44 93 4F D2 EF
43 F9 ED 0B 74
AA 3E C8 D7 0C
AD 02 CC 3E 36 46 FF 2E 1A 18 DD 4B EB 3C 44 F7 :
F2 74 55 88 02 96 49 67 45 46 CC 91 87 C2 07 FB :
8F 2C EC E8 E2 29 3F
5C 47 04 AF 04 BA B5 881 30  110:
94 bBis 892 30   99:
BC 3C BB DB 7E
84 82 86 E1 9A D9 A2 7A 8E :
68 5C 55 30 46 14 7F 11 56 :
8C 4F DD F3 63 D9 D8
86 43 83 45 A6 2C 3B 75 96 :
65 46 AD FA BF
74 5C 7C DD 2A B9 :
EE 4A F3 C8 89 9E 84 7D E7 4A
33 78 3E A6 8B C3 :
05 88 BA 1F 73 8C 6A AF 8A B3
53 1F 18 54 C3 :
A6 C3 D5 85 B5 99 CF 69 5E D7 A3 :
C4 A9 3B 2B 94 7B 71 57 BB 1A 1C 04 3A B4 1E C8 :
56 6C 61 45 E9 38 A6 11 90 6D E0 D3 2E 56
9B DD 91 FE 12 4D F1 :
FA DD 19 7A BD 19 A1 B4 65 3E EC F7 EC A4 D6 :
A2 2B 1F 7F 89 3B 64 1F 90 16 41 FB B5 55
0A CA FF 79 6D :
65 AC 05 FA F0 24 A6 :
6E 7E 40 88 40 81 9E
96 2E 7E 5F 40 1A E3 1312 30   34
94 bBis 1323 30   23:
00 B5 0A 82 6D 1338 02    8:
SEQUENCE { 1352 06    7:
A1 91 9B 89 0C B6 52 C4 0E 05 4E 1E 93 06
02 00 1C D9 E1 A8 31 FE 8A :
16 3E ED 89 AB 07 CF 2A BE 82 42 AC 9D ED DD BF :
98 D6 2C DD D1 EA 4F 5F 15 D3 A4 2A
93 B2 42 60 C0 F2 7C 0F 1D 15 94 86 14 D5 67 B6 :
00 F0 F5 44 C4 18 AA C2 34 F6 83 F0 33 51 1B 65 :
51 A6 07 8B DA 2D 69 BB 9F 73 28 67 50 21 :
33 78 4C DE 5D BD 9A 14 :
A3 93 69 DF D9 9F A8 5C C0 D1 02 41 C4 01
94 bBis 1678 30   43:
00 A0 E9 DE 4B 1693 02   28:
2E EE 9F D4 63 17
D4 95 95 A9 E7 51 :
8E 6C 63 D8 F4 EB 4D 22 D1 0D 28 AF 0B
9E 48 50 C6 70 C7 B7 1C 0D F8 4C A3 E0 D6 C1 77 :
FE 9F 78 A9 D8 43 32 30 A8 83 CD 82 A2 B2 B5 C7 :
34 88 24 B0 C5 37 91 D5 3C 6A
CA E4 D8 5F 80 C1
47 70 4B 0C A4 8E 85 FB 00 :
A9 05 7A A4 AC C4
46 68 E1 7F 19 96 D7 15 26 90 :
4D E2 36 AA 8F BE EB 3F 1A DC C5 2C D4 38 53 :
77 7E 83 4A 6A 51 81 38 67 8A 8A DB D3 A5 5C 70 :
A7 EA B1 BA 7A 07
7F 7E C7 32 68 B6 A9 C0 8D
CA 39 C1 7B 17 F0 44 D1 E0 50 48 90 :
36 AB D3 81 C5 E6 BF
82 BA 35 2A 1A FF 13 66 01 :
GostR3410 94 bBis 2054 30   67:
SEQUENCE { 2056 02    5:
00 D0 5E 9F 14 2063 02    4:
INTEGER 1177570399 2069 02   52:
71 4C A3 26 DB 03 2D D6 75 19 95 CD B9
92 86 DB DA 91 EC CF C3 06
F1 E5 DB B4 98 9B 3D F1
36 59 B8 8C 0F 97 A3 C1 :
00 C9 66 E9 B3 B8 B7 CD D8 2F F0 F8 3A F8 70 36 :
C3 8F 42 23 8E C5 0A 87 6C D3 90 E4 3D 67 B6 01 :
E5 19 66 05 A5 5E 89
C3 19 0D AB F8 0B :
11 63 C9 79 FC D1 83 28 DA E5 E9
04 88 11 B3 :
94 bBis 2453 30   47:
7E C1 23 D1 61 47 77 62 83 8C 2B EA 9D BD F3 30 :
SEQUENCE { 2506 06    7:
B1 94 03 6A CE 14 13 9D 36
FC 4B 7D 65 D8 B3 40 71 13 66 CA 93
EE 63 7B E4 28 05 1D 86 61 26 70 AD 7B
1A 53 ED 25 2E 4D 8A 69 A2 03 76 E6 AD DB 3B DC :
D3 31 74 9A 49 1A 18 4B 8F DA 6D
84 C3 1C F0 5F :
91 19 B5 ED 35 24
6E A4 56 2D 85 92 8B A1 13
8D 0E 5A 7E 5C 76 4B A8 90 20 29 A1 33
4C 21 0F F2 62 BC CB 7D AE
36 78 42 59 CA 25 AA DE 5A 48 3F 64 C0 2A 20 CF :
4A 10 F9 C1 89 C4 33 DE FE 31 D2 63 E6 C9 76 46 :
60 A7 31 EC CA EC B7 4C 82 79 30 37 31 E8 CF 69 :
5A 70 BD F9 3E 5B B6 81 DA B4 EE B9 :
C7 33 CA AB 2F 67 3C
47 5E 0E CA 92
1D 29 78 2E 2821
94 bBis 2832 30   52:
97 45 EC 84 5E 4F 6D A4 62 60 6C 51
Public Key Algorithm Parameters For each AlgorithmIdentifier in this sequence
, the parameters field contains GostR3410
SEQUENCE { 4 30  156:  SEQUENCE { 7 06    7:   OBJECT IDENTIFIER :
00 80 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00
00 80 00 00 00 00 00 00 00 00 00 00 00
16 03 0E 16 D1 9C :
85 C9 7F 0A 9C A2
SEQUENCE { 166 06    7:
FF 6C 61 10 70 99 5A D1 00
INTEGER 1 290 02   33:
8D 91 E4 71 E0 98 9C DA 27 DF
SEQUENCE { 328 06    7:
3E 1A F4 19 A2 69 A5 F8 66 A7 D3 C2 5C 3D F8
25 93 73 FF 2B 18 2F 49 D4 CE 7E 1B BC 8B 409 02
00 80 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00
00 80 00 00 00 00 00 00 00 00 00 00 00
SEQUENCE { 519 06    7:
CryptoPro C ParamSet 528 30  147:
78 90 51 D3 79 98 F7 B9 02 2D 75 :
00 9B 9F 60 5F 5A 85
81 07 AB 1E C8 5E 6B 41 C8 :
6E 86 78 90 51 D3 79 98 F7 B9
00 9B 9F 60 5F 5A 85
81 07 AB 1E C8 5E 6B 41 C8 :
AA 58 2C A3 51 1E DD FB 74 F0 2F 3A 65 98 98 0B :
678 30  159:  SEQUENCE { 681 06    7
FF 6C 61 10 70 99 5A D1 00
8D 91 E4 71 E0 98 9C DA 27 DF
6E 86 78 90 51 D3 79 98 F7 B9
00 9B 9F 60 5F 5A 85
81 07 AB 1E C8 5E 6B 41 C8 :
6E 86 78 90 51 D3 79 98 F7 B9
00 9B 9F 60 5F 5A 85
81 07 AB 1E C8 5E 6B 41 C8 :
AA 58 2C A3 51 1E DD FB 74 F0 2F 3A 65 98 98 0B :
J99QWkU/K3Y1KU8t3yPjsSKsyZyenx4UMIGfBgcqhQMCAiQBMIGTAiEAm59gX1qF  gQerHshea0HIqs EboZ4kFHTeZj3uQItdZgCAwCAWgIhAJufYF9ahYEHqx7IXmtB  yKrPhG6GeJBR03mY97kCLXWbAiEAm59gX1qFgQerHshea0HIqlgso1Ee3ft08C86  ZZiYC7kCAQACIEHs5VdDcRqMPL83g80IwO5NTcRA1GQajzZuVQ39s7tn  <GostR3410 2001
