Abstract This document provides recommendations for the implementation of password based cryptography, covering key derivation functions, encryption schemes, message authentication schemes, and ASN.1 syntax identifying the techniques.
This document represents a republication of PKCS #5 v2.1 from RSA Laboratories' Public Key Cryptography Standards (PKCS) series.
By publishing this RFC, change control is transferred to the IETF.
This document also obsoletes RFC 2898.
This document provides recommendations for the implementation of password based cryptography, covering the following aspects:  key derivation functions  encryption schemes
ASN.1 syntax identifying the techniques
The recommendations are intended for general application within computer and communications systems and, as such, include a fair amount of flexibility.
They are particularly intended for the protection of sensitive information such as private keys as in PKCS #8 [PKCS8]
It is expected that application standards and implementation profiles based on these specifications may include additional constraints.
Other cryptographic techniques based on passwords, such as password  based key entity authentication and key establishment protocols [BELLOV]
[WU] are outside the scope of this document.
Guidelines for the selection of passwords are also outside the scope.
This document supersedes PKCS #5 version 2.0 [RFC2898] but includes compatible techniques.
This document represents a republication of PKCS #5 v2.1
[PKCS5 21] from RSA Laboratories' Public Key Cryptography Standards (PKCS) series.
: extracts octets i through j,
0 <  i <  j 3.
In many applications of public key cryptography, user security is ultimately dependent on one or more secret text values or passwords.
Since a password is not directly applicable as a key to any conventional cryptosystem, however, some processing of the password is required to perform cryptographic operations with it.
Moreover, as passwords are often chosen from a relatively small space, special care is required in that processing to defend against search attacks.
A general approach to password based cryptography, as described by Morris and Thompson [MORRIS] for the protection of password tables, is to combine a password with a salt to produce a key.
The salt can be viewed as an index into a large set of keys derived from the password and need not be kept secret.
Although it may be possible for an opponent to construct a table of possible passwords (a so  called "dictionary attack"), constructing a table of possible keys will be difficult, since there will be many possible keys for each password.
An opponent will thus be limited to searching through passwords separately for each salt.
Another approach to password based cryptography is to construct key derivation techniques that are relatively expensive, thereby increasing the cost of exhaustive search.
One way to do this is to include an iteration count in the key derivation technique, indicating how many times to iterate some underlying function by which keys are derived.
A modest number of iterations (say, 1000) is not likely to be a burden for legitimate parties when computing a key, but will be a significant burden for opponents.
Salt and iteration count formed the basis for password based encryption in PKCS #5 v2.0, and are adopted here as well for the various cryptographic operations.
Thus, password based key derivation as defined here is a function of a password, a salt, and an iteration count, where the latter two quantities need not be kept secret.
From a password based key derivation function, it is straightforward to define password based encryption and message authentication schemes.
As in PKCS #5 v2.0, the password based encryption schemes here are based on an underlying, conventional encryption scheme, where the key for the conventional scheme is derived from the password.
Similarly, the password based message authentication scheme is based on an underlying conventional scheme.
This two layered approach makes the password based techniques modular in terms of the underlying techniques they can be based on.
It is expected that the password based key derivation functions may find other applications than just the encryption and message authentication schemes defined here.
For instance, one might derive a set of keys with a single application of a key derivation function, rather than derive each key with a separate application of the function.
The keys in the set would be obtained as substrings of the output of the key derivation function.
This approach might be employed as part of key establishment in a session oriented protocol.
Another application is password checking, where the output of the key derivation function is stored (along with the salt and iteration count) for the purposes of subsequent verification of a password.
Throughout this document, a password is considered to be an octet string of arbitrary length whose interpretation as a text string is unspecified.
In the interest of interoperability, however, it is recommended that applications follow some common text encoding rules.
(ASCII is a subset of UTF 8.)
Although the selection of passwords is outside the scope of this document, guidelines have been published [NISTSP63] that may well be taken into account.
Salt and Iteration Count Inasmuch as salt and iteration count are central to the techniques defined in this document, some further discussion is warranted.
Salt A salt in password based cryptography has traditionally served the purpose of producing a large set of keys corresponding to a given password, one of which is selected at random according to the salt.
An individual key in the set is selected by applying a key derivation function KDF, as DK   KDF (P, S) where DK is the derived key, P is the password, and S is the salt.
This has two benefits: 1.
It is difficult for an opponent to precompute all the keys, or even the most likely keys, corresponding to a dictionary of passwords.
If the salt is 64 bits long, for instance, there will be as many as 2^64 keys for each password.
An opponent is thus limited to searching for passwords after a password  based operation has been performed and the salt is known.
It is unlikely that the same key will be selected twice.
Again, if the salt is 64 bits long, the chance of "collision" between keys does not become significant until about 2^32 keys have been produced, according to the Birthday Paradox.
The fact that collisions are unlikely addresses some concerns about interactions between multiple uses of the same key that may arise when using some encryption and authentication techniques.
In password based encryption, the party encrypting a message can gain assurance that these benefits are realized simply by selecting a large and sufficiently random salt when deriving an encryption key from a password.
A party generating a message authentication code can gain such assurance in a similar fashion.
The party decrypting a message or verifying a message authentication code, however, cannot be sure that a salt supplied by another party has actually been generated at random.
It is possible, for instance, that the salt may have been copied from another password based operation in an attempt to exploit interactions between multiple uses of the same key.
For instance, suppose two legitimate parties exchange an encrypted message, where the encryption key is an 80 bit key derived from a shared password with some salt.
An opponent could take the salt from that encryption and provide it to one of the parties as though it were for a 40 bit key.
If the party reveals the result of decryption with the 40 bit key, the opponent may be able to solve for the 40 bit key.
In the case that 40 bit key is the first half of the 80 bit key, the opponent can then readily solve for the remaining 40 bits of the 80 bit key.
To defend against such attacks, either the interaction between multiple uses of the same key should be carefully analyzed, or the salt should contain data that explicitly distinguishes between different operations.
For instance, the salt might have an additional, non random octet that specifies whether the derived key is for encryption, for message authentication, or for some other operation.
Based on this, the following is recommended for salt selection: 1.
If there is no concern about interactions between multiple uses of the same key (or a prefix of that key) with the password based encryption and authentication techniques supported for a given password, then the salt may be generated at random and need not be checked for a particular format by the party receiving the salt.
It should be at least eight octets (64 bits)
Otherwise, the salt should contain data that explicitly distinguishes between different operations and different key lengths, in addition to a random part that is at least eight octets long, and this data should be checked or regenerated by the party receiving the salt.
For instance, the salt could have an additional non random octet that specifies the purpose of the derived key.
Alternatively, it could be the encoding of a structure that specifies detailed information about the derived key, such as the encryption or authentication technique and a sequence number among the different keys derived from the password.
The particular format of the additional data is left to the application.
Note: If a random number generator or pseudorandom generator is not available, a deterministic alternative for generating the salt (or the random part of it) is to apply a password based key derivation function to the password and the message M to be processed.
For instance, the salt could be computed with a key derivation function as S   KDF (P, M).
This approach is not recommended if the message M is known to belong to a small message space (e.g., "Yes" or "No"), however, since then there will only be a small number of possible salts.
An iteration count has traditionally served the purpose of increasing the cost of producing keys from a password, thereby also increasing the difficulty of attack.
Mathematically, an iteration count of c will increase the security strength of a password by log2(c) bits against trial
based attacks like brute force or dictionary attacks.
Choosing a reasonable value for the iteration count depends on environment and circumstances, and varies from application to application.
This document follows the recommendations made in FIPS Special Publication 800 132 [NISTSP132], which says The iteration count shall be  selected as large as possible, as long as the time required to generate the key using the entered password is acceptable for the users.
A minimum iteration count of 1,000 is recommended.
For especially critical keys, or for very powerful systems or systems where user perceived performance is not critical, an iteration count of 10,000,000 may be appropriate.
A key derivation function produces a derived key from a base key and other parameters.
In a password based key derivation function, the base key is a password, and the other parameters are a salt value and an iteration count, as outlined in Section 3.
The primary application of the password based key derivation functions defined here is in the encryption schemes in Section 6 and the message authentication scheme in Section 7.
Other applications are certainly possible, hence the independent definition of these functions.
Two functions are specified in this section: PBKDF1 and PBKDF2.
PBKDF2 is recommended for new applications; PBKDF1 is included only for compatibility with existing applications and is not recommended for new applications.
A typical application of the key derivation functions defined here might include the following steps: 1.
Select a salt S and an iteration count c, as outlined in Section 4.
Select a length in octets for the derived key, dkLen.
Apply the key derivation function to the password, the salt, the iteration count and the key length to produce a derived key.
Any number of keys may be derived from a password by varying the salt, as described in Section 3.
PBKDF1 PBKDF1 applies a hash function, which shall be MD2 [RFC1319], MD5 [RFC1321], or SHA 1
The length of the derived key is bounded by the length of the hash function output, which is 16 octets for MD2 and MD5 and 20 octets for SHA 1.
PBKDF1 is compatible with the key derivation process in PKCS #5
PBKDF1 is recommended only for compatibility with existing applications since the keys it produces may not be large enough for some applications.
If dkLen > 16 for MD2 and MD5, or dkLen > 20 for SHA 1, output "derived key too long" and stop.
Apply the underlying hash function Hash for c iterations to the concatenation of the password P and the salt S, then extract the first dkLen octets to produce a derived key DK:
Hash (P    S) , T 2
Output the derived key DK.
PBKDF2 PBKDF2 applies a pseudorandom function (see Appendix B.1 for an example) to derive keys.
The length of the derived key is essentially unbounded.
(However, the maximum effective search space for the derived key may be limited by the structure of the underlying pseudorandom function.
See Appendix B.1 for further discussion.)
PBKDF2 is recommended for new applications.
PBKDF2 (P, S, c, dkLen) Options:
If dkLen > (2^32 1)   hLen, output "derived key too long" and stop.
Let l be the number of hLen octet blocks in the derived key, rounding up, and let r be the number of octets in the last block:
l   CEIL (dkLen / hLen)
Here, CEIL (x) is the "ceiling" function, i.e., the smallest integer greater than, or equal to, x. 3.
For each block of the derived key apply the function F defined below to the password P, the salt S, the iteration count c, and the block index to compute the block: T 1   F (P, S, c, 1) ,
T l   F (P, S, c, l) , where the function F is defined as the exclusive or sum of the first c iterates of the underlying pseudorandom function PRF applied to the password P and the concatenation of the salt S and the block index
i: F (P, S, c, i)
U 1 \xor U 2 \xor ...
U c   PRF (P, U {c 1}) .
Here, INT (i) is a four octet encoding of the integer i, most significant octet first.
Concatenate the blocks and extract the first dkLen octets to produce a derived key DK:
Output the derived key DK.
Note: The construction of the function F follows a "belt and  suspenders" approach.
U i are computed recursively to remove a degree of parallelism from an opponent; they are exclusive  ored together to reduce concerns about the recursion degenerating into a small set of values.
Encryption Schemes An encryption scheme
, in the symmetric setting, consists of an encryption operation and a decryption operation, where the encryption operation produces a ciphertext from a message under a key, and the decryption operation recovers the message from the ciphertext under the same key.
In a password based encryption scheme, the key is a password.
A typical application of a password based encryption scheme is a private key protection method, where the message contains private key information, as in PKCS #8.
The encryption schemes defined here would be suitable encryption algorithms in that context.
Two schemes are specified in this section: PBES1 and PBES2.
PBES2 is recommended for new applications; PBES1 is included only for compatibility with existing applications and is not recommended for new applications.
PBES1 PBES1 combines the PBKDF1 function (Section 5.1) with an underlying block cipher, which shall be either DES [NIST46] or RC2 [RFC2268] in cipher block chaining
PBES1 is compatible with the encryption scheme in PKCS #5
PBES1 is recommended only for compatibility with existing applications, since it supports only two underlying encryption schemes, each of which has a key size (56 or 64 bits) that may not be large enough for some applications.
The encryption operation for PBES1 consists of the following steps, which encrypt a message M under a password P to produce a ciphertext C: 1.
Select an eight octet salt S and an iteration count c, as outlined in Section 4.
Apply the PBKDF1 key derivation function (Section 5.1) to the password P, the salt S, and the iteration count c to produce a derived key DK of length
DK   PBKDF1 (P, S, c, 16) 3.
Separate the derived key DK into an encryption
key K consisting of the first eight octets of DK and an initialization vector IV consisting of the next eight octets:
Concatenate M and a padding string PS to form an encoded message EM:
EM   M    PS where the padding string PS consists of 8 (
mod 8) octets each with value 8
The padding string PS will satisfy one of the following statements: PS   01,
if   M   mod 8   7
The length in octets of the encoded message will be a multiple of eight, and it will be possible to recover the message M unambiguously from the encoded message.
(This padding rule is taken from RFC 1423 [RFC1423].)
the encoded message EM with the underlying block cipher (DES or RC2) in CBC mode under the encryption key K with initialization vector IV to produce the ciphertext C.
For DES, the key K shall be considered as a 64 bit encoding of a 56 bit DES key with parity bits ignored (see [NIST46]).
For RC2, the "effective key bits" shall be 64 bits.
The salt S and the iteration count c may be conveyed to the party performing decryption in an AlgorithmIdentifier value (see Appendix A.3).
The decryption operation for PBES1 consists of the following steps, which decrypt a ciphertext C under a password P to recover a message
Obtain the eight octet salt S and the iteration count c. 2.
Apply the PBKDF1 key derivation function (Section 5.1) to the password P, the salt S, and the iteration count c to produce a derived key DK of length
DK   PBKDF1 (P, S, c, 16) 3.
Separate the derived key DK into an encryption
key K consisting of the first eight octets of DK and an initialization vector IV consisting of the next eight octets: K   DK<0..7
Decrypt the ciphertext C with the underlying block cipher (DES or RC2) in CBC mode under the encryption key K with initialization vector IV to recover an encoded message EM.
If the length in octets of the ciphertext C is not a multiple of eight, output "decryption error" and stop.
Separate the encoded message EM into a message M and a padding string
EM   M    PS where the padding string PS consists of some number psLen octets each with value psLen, where psLen is between 1 and 8.
If it is not possible to separate the encoded message EM in this manner, output "decryption error" and stop.
Output the recovered message M. 6.2.
PBES2 PBES2 combines a password based key derivation function, which shall be PBKDF2 (Section 5.2) for this version of PKCS #5, with an underlying encryption scheme (see Appendix B.2 for examples).
The key length and any other parameters for the underlying encryption scheme depend on the scheme.
PBES2 is recommended for new applications.
The encryption operation for PBES2 consists of the following steps, which encrypt a message M under a password P to produce a ciphertext C, applying a selected key derivation function KDF and a selected underlying encryption scheme: 1.
Select a salt S and an iteration count c, as outlined in Section 4.
Select the length in octets, dkLen, for the derived key for the underlying encryption scheme.
Apply the selected key derivation function to the password P, the salt S, and the iteration count c to produce a derived key DK of length dkLen octets:
DK   KDF (P, S, c, dkLen) 4.
Encrypt the message M with the underlying encryption scheme under the derived key DK to produce a ciphertext C.
(This step may involve selection of parameters such as an initialization vector and padding, depending on the underlying scheme.)
The salt S, the iteration count c, the key length dkLen, and identifiers for the key derivation function and the underlying encryption scheme may be conveyed to the party performing decryption in an AlgorithmIdentifier value (see Appendix A.4).
The decryption operation for PBES2 consists of the following steps, which decrypt a ciphertext C under a password P to recover a message
Obtain the salt S for the operation.
Obtain the iteration count c for the key derivation function.
Obtain the key length in octets, dkLen, for the derived key for the underlying encryption scheme.
Apply the selected key derivation function to the password P, the salt S, and the iteration count c to produce a derived key DK of length dkLen octets:
DK   KDF (P, S, c, dkLen) 5.
Decrypt the ciphertext C with the underlying encryption scheme under the derived key DK to recover a message M.
If the decryption function outputs "decryption error", then output "decryption error" and stop.
Output the recovered message M. 7.
A message authentication scheme consists of a MAC (Message Authentication Code) generation operation and a MAC verification operation, where the MAC generation operation produces a MAC from a message under a key, and the MAC verification operation verifies the message authentication code under the same key.
In a password based message authentication scheme, the key is a password.
One scheme is specified in this section: PBMAC1.
PBMAC1 PBMAC1 combines a password based key derivation function, which shall be PBKDF2 (Section 5.2) for this version of PKCS #5, with an underlying message authentication scheme (see Appendix B.3 for an example).
The key length and any other parameters for the underlying message authentication scheme depend on the scheme.
The MAC generation operation for PBMAC1 consists of the following steps, which process a message M under a password P to generate a message authentication code T, applying a selected key derivation function KDF and a selected underlying message authentication scheme: 1.
Select a salt S and an iteration count c, as outlined in Section 4.
Select a key length in octets, dkLen, for the derived key for the underlying message authentication function.
Apply the selected key derivation function to the password P, the salt S, and the iteration count c to produce a derived key DK of length dkLen octets:
DK   KDF (P, S, c, dkLen) 4.
Process the message M with the underlying message authentication scheme under the derived key DK to generate a message authentication code
The salt S, the iteration count c, the key length dkLen, and identifiers for the key derivation function and underlying message authentication scheme may be conveyed to the party performing verification in an AlgorithmIdentifier value (see Appendix A.5).
The MAC verification operation for PBMAC1 consists of the following steps, which process a message M under a password P to verify a message authentication code T: 1.
Obtain the salt S and the iteration count c. 2.
Obtain the key length in octets, dkLen, for the derived key for the underlying message authentication scheme.
Apply the selected key derivation function to the password P, the salt S, and the iteration count c to produce a derived key DK of length dkLen octets:
DK   KDF (P, S, c, dkLen) 4.
Process the message M with the underlying message authentication scheme under the derived key DK to verify the message authentication code
If the message authentication code verifies, output "correct"; else output "incorrect".
Security Considerations Password based cryptography is generally limited in the security that it can provide, particularly for methods such as those defined in this document where offline password search is possible.
While the use of salt and iteration count can increase the complexity of attack (see Section 4 for recommendations), it is essential that passwords are selected well, and relevant guidelines (e.g., [NISTSP63]) should be taken into account.
It is also important that passwords be protected well if stored.
In general, different keys should be derived from a password for different uses to minimize the possibility of unintended interactions.
For password based encryption with a single algorithm, a random salt is sufficient to ensure that different keys will be produced.
In certain other situations, as outlined in Section 4, a structured salt is necessary.
The recommendations in Section 4 should thus be taken into account when selecting the salt value.
For information on security considerations for MD2 [RFC1319], see [RFC6149]; for MD5 [RFC1321], see [RFC6151]; and for SHA 1 [NIST180], see [RFC6194].
This section defines ASN.1 syntax for the key derivation functions, the encryption schemes, the message authentication scheme, and supporting techniques.
The intended application of these definitions includes PKCS #8 and other syntax for key management, encrypted data, and integrity protected data.
(Various aspects of ASN.1 are specified in several ISO/IEC standards [ISO8824 1]
The object identifier pkcs 5 identifies the arc of the OID tree from which the OIDs (specific to PKCS #5) in this section are derived:
No object identifier is given for PBKDF1, as the object identifiers for PBES1 are sufficient for existing applications, and PBKDF2 is recommended for new applications.
d PBKDF2 identifies the PBKDF2 key derivation function (Section 5.2).
The parameters field associated with this OID in an AlgorithmIdentifier shall have type PBKDF2 params
The fields of type PBKDF2 params have the following meanings:
salt specifies the salt value or the source of the salt value.
It shall either be an octet string or an algorithm ID with an OID in the set PBKDF2 SaltSources, which is reserved for future versions of PKCS #5.
The salt source approach is intended to indicate how the salt value is to be generated as a function of parameters in the algorithm ID, application data, or both.
For instance, it may indicate that the salt value is produced from the encoding of a structure that specifies detailed information about the derived key as suggested in Section 4.1.
Some of the information may be carried elsewhere, e.g., in the encryption algorithm ID.
However, such facilities are deferred to a future version of PKCS #5.
In this version, an application may achieve the benefits mentioned in Section 4.1 by choosing a particular interpretation of the salt value in the specified alternative.
iterationCount specifies the iteration count.
The maximum iteration count allowed depends on the implementation.
It is expected that implementation profiles may further constrain the bounds.
keyLength, an optional field, is the length in octets of the derived key.
The maximum key length allowed depends on the implementation; it is expected that implementation profiles may further constrain the bounds.
The field is provided for convenience only; the key length is not cryptographically protected.
If there is concern about interaction between operations with different key lengths for a given salt (see Section 4.1), the salt should distinguish among the different key lengths.
prf identifies the underlying pseudorandom function.
It shall be an algorithm ID with an OID in the set PBKDF2 PRFs, which for this version of PKCS #5 shall consist of i
(see Appendix B.1.1) and any other OIDs defined by the application.
, {NULL IDENTIFIED BY id hmacWithSHA224}, {NULL IDENTIFIED BY id hmacWithSHA256}, {NULL IDENTIFIED BY id hmacWithSHA384}, {NULL IDENTIFIED BY
, {NULL IDENTIFIED BY i
, {NULL IDENTIFIED BY i
The default pseudorandom function is HMAC SHA 1:
Different object identifiers identify the PBES1 encryption scheme (Section 6.1) according to the underlying hash function in the key derivation function and the underlying block cipher, as summarized in the following table:
The fields of type PBEParameter have the following meanings:
salt specifies the salt value, an eight octet string.
iterationCount specifies the iteration count.
d PBES2 identifies the PBES2 encryption scheme (Section 6.2).
The parameters field associated with this OID in an AlgorithmIdentifier shall have type PBES2 params:
The fields of type PBES2 params have the following meanings:  keyDerivationFunc identifies the underlying key derivation function.
It shall be an algorithm ID with an OID in the set PBES2 KDFs, which for this version of PKCS #5 shall consist of i
encryptionScheme identifies the underlying encryption scheme.
It shall be an algorithm ID with an OID in the set
PBES2 Encs, whose definition is left to the application.
Examples of underlying encryption schemes are given in Appendix B.2.
id PBMAC1 identifies the PBMAC1 message authentication scheme (Section 7.1).
The parameters field associated with this OID in an AlgorithmIdentifier shall have type PBMAC1 params:
} The keyDerivationFunc field has the same meaning as the corresponding field of PBES2 params (Appendix A.4) except that the set of OIDs is PBMAC1 KDFs.
The messageAuthScheme field identifies the underlying message authentication scheme.
It shall be an algorithm ID with an OID in the set PBMAC1 MACs, whose definition is left to the application.
Examples of underlying encryption schemes are given in Appendix B.3.
This section gives several examples of underlying functions and schemes supporting the password based schemes in Sections 5, 6, and 7.
While these supporting techniques are appropriate for applications to implement, none of them is required to be implemented.
that profiles for PKCS #5 will be developed that specify particular supporting techniques.
This section also gives object identifiers for the supporting techniques.
The object identifiers digestAlgorithm and encryptionAlgorithm identify the arcs from which certain algorithm OIDs referenced in this section are derived: digestAlgorithm OBJECT IDENTIFIER ::
Pseudorandom Functions Examples of pseudorandom function for PBKDF2 (Section 5.2) include HMAC with SHA 1, SHA 224, SHA 256, SHA 384, SHA 512, SHA 512/224, and SHA 512/256.
Applications may employ other schemes as well.
HMAC SHA 1 HMAC SHA 1 is the pseudorandom function corresponding to the HMAC message authentication code [RFC2104]
based on the SHA 1 hash function [NIST180].
The pseudorandom function is the same function by which the message authentication code is computed, with a full  length output.
(The first argument to the pseudorandom function PRF serves as HMAC's "key", and the second serves as HMAC's "text".
In the case of PBKDF2, the "key" is thus the password and the "text" is the salt.)
HMAC SHA 1 has a variable key length and a 20 octet (160 bit) output value.
Although the length of the key to HMAC SHA 1 is essentially unbounded, the effective search space for pseudorandom function outputs may be limited by the structure of the function.
In particular, when the key is longer than 512 bits, HMAC SHA 1 will first hash it to 160 bits.
Thus, even if a long derived key consisting of several pseudorandom function outputs is produced from a key, the effective search space for the derived key will be at most 160 bits.
Although the specific limitation for other key sizes depends on details of the HMAC construction, one should assume, to be conservative, that the effective search space is limited to 160 bits for other key sizes as well.
(The 160 bit limitation should not generally pose a practical limitation in the case of password based cryptography, since the search space for a password is unlikely to be greater than 160 bits.)
hmacWithSHA1 identifies the HMAC SHA 1 pseudorandom function:
The parameters field associated with this OID in an AlgorithmIdentifier shall have type NULL.
This object identifier is employed in the object set PBKDF2 PRFs (Appendix A.2).
Note: Although HMAC SHA 1 was designed as a message authentication code, its proof of security is readily modified to accommodate requirements for a pseudorandom function, under stronger assumptions.
A hash function may also meet the requirements of a pseudorandom function under certain assumptions.
For instance, the direct application of a hash function to the concatenation of the "key" and the "text" may be appropriate, provided that "text" has appropriate structure to prevent certain attacks.
HMAC SHA 1 is preferable, however, because it treats "key" and "text" as separate arguments and does not require "text" to have any structure.
During 2004 and 2005, there were a number of attacks on SHA 1 that reduced its perceived effective strength against collision attacks to 62 bits instead of the expected 80 bits (e.g., Wang et al.
[WANG], confirmed by M. Cochran [COCHRAN]).
However, since these attacks centered on finding collisions between values, they are not a direct security consideration here because the collision resistant property is not required by the HMAC authentication scheme.
HMAC SHA 2 HMAC SHA 2 refers to the set of pseudorandom functions corresponding to the HMAC message authentication code (now a FIPS standard [NIST198])
based on the new SHA 2 functions (FIPS 180 4 [NIST180]).
HMAC SHA 2 has a variable key length and variable output value depending on the hash function chosen (SHA 224, SHA 256, SHA 384, SHA 512, SHA 512/224, or SHA 512/256)
that is, 28, 32, 48, or 64 octets.
Using the new hash functions extends the search space for the produced keys.
Where SHA 1 limits the search space to 20 octets, SHA 2 sets new limits of 28, 32, 48, and 64 octets.
Object identifiers for HMAC are defined as follows:
An example encryption scheme for PBES2 (Section 6.2) is AES CBC Pad.
The schemes defined in PKCS #5 v2.0
[RFC2898], DES CBC Pad, DES EDE3 CBC Pad, RC2 CBC Pad, and RC5 CBC Pad, are still supported, but DES CBC Pad, DES EDE3 CBC Pad, RC2
CBC Pad are now considered legacy and should only be used for backwards compatibility reasons.
The object identifiers given in this section are intended to be employed in the object set
DES CBC Pad DES CBC Pad is single key DES [NIST46] in CBC mode [NIST81] with the padding operation specified in RFC 1423
(see Section 6.1.1 of this document).
DES CBC Pad has an eight octet encryption key and an eight octet initialization vector.
The key is considered as a 64 bit encoding of a 56 bit DES key with parity bits ignored.
} The parameters field associated with this OID in an AlgorithmIdentifier shall have type OCTET STRING (SIZE(8)), specifying the initialization vector for CBC mode.
DES EDE3 CBC Pad DES EDE3 CBC Pad is three key triple DES in CBC mode [ANSIX952] with the padding operation specified in RFC 1423 [RFC1423].
DES EDE3 CBC Pad has a 24 octet encryption key and an eight octet initialization vector.
The key is considered as the concatenation of three eight octet keys, each of which is a 64 bit encoding of a 56 bit DES key with parity bits ignored.
The object identifier des EDE3 CBC identifies the DES EDE3 CBC Pad encryption scheme:
The parameters field associated with this OID in an AlgorithmIdentifier shall have type OCTET STRING
(SIZE(8)), specifying the initialization vector for CBC mode.
Note: An OID for DES EDE3 CBC without padding is given in
ANSI X9.52 [ANSIX952]; the one given here is preferred since it specifies padding. B.2.3.
CBC Pad is the RC2 encryption algorithm [RFC2268] in CBC mode with the padding operation specified in RFC 1423 [RFC1423].
RC2 CBC Pad has a variable key length, from one to 128 octets, a separate "effective key bits" parameter from one to 1024 bits that limits the effective search space independent of the key length, and an eight octet initialization vector.
The object identifier rc2CBC identifies the RC2
The parameters field associated with OID in an AlgorithmIdentifier shall have type RC2 CBC Parameter
rc2ParameterVersion is a proprietary RSA Security Inc. encoding of the "effective key bits" for RC2.
If the rc2ParameterVersion field is omitted, the "effective key bits" defaults to 32.
(This is for backward compatibility with certain very old implementations.)
iv is the eight octet initialization vector.
RC5 CBC Pad RC5 CBC Pad is the RC5 encryption algorithm [RC5] in CBC mode with the padding operation specified in RFC 5652 [RFC5652], which is a generalization of the padding operation specified in RFC 1423 [RFC1423].
The scheme is fully specified in [RFC2040].
RC5 CBC Pad has a variable key length, from 0 to 256 octets, and supports both a 64 bit block size and a 128 bit block size.
For the former, it has an eight octet initialization vector, and for the latter, a 16 octet initialization vector.
RC5 CBC Pad also has a variable number of "rounds" in the encryption operation, from 8 to 127.
For RC5 with a 64 bit block size, the padding string is as defined in RFC 1423 [RFC1423].
For RC5 with a 128 bit block size, the padding string consists of 16 (
M   mod 16) octets each with value 16 (
The parameters field associated with this OID in an AlgorithmIdentifier shall have type RC5 CBC Parameters:
The fields of type RC5 CBC Parameters have the following meanings:  version is the version of the algorithm, which shall be v1 0.
rounds is the number of rounds in the encryption operation, which shall be between 8 and 127.
blockSizeInBits is the block size in bits, which shall be 64 or 128.
iv is the initialization vector, an eight octet string for 64 bit RC5 and a 16 octet string for 128 bit RC5.
The default is a string of the appropriate length consisting of zero octets.
AES CBC Pad AES CBC Pad is the AES encryption algorithm [NIST197] in CBC mode with the padding operation specified in RFC 5652 [RFC5652].
AES CBC Pad has a variable key length of 16, 24, or 32 octets and has a 16 octet block size.
It has a 16 octet initialization vector.
For AES, the padding string consists of 16 (
M   mod 16) octets each with value 16 (
For AES, object identifiers are defined depending on key size and operation mode.
For example, the 16 octet (128 bit) key AES encryption scheme in CBC mode would be aes128 CBC Pad identifying the AES CBC PAD encryption scheme using a 16 octet key:
The AES object identifier is defined in Appendix C.
The parameters field associated with this OID in an AlgorithmIdentifier shall have type OCTET STRING (
SIZE(16)), specifying the initialization vector for CBC mode.
An example message authentication scheme for PBMAC1 (Section 7.1) is HMAC SHA 1. B.3.1.
HMAC SHA 1 HMAC SHA 1 is the HMAC message authentication scheme [RFC2104] based on the SHA 1 hash function [NIST180].
HMAC SHA 1 has a variable key length and a 20 octet (160 bit) message authentication code.
(see Appendix B.1.1) identifies the HMAC SHA 1 message authentication scheme.
(The object identifier is the same for both the pseudorandom function and the message authentication scheme; the distinction is to be understood by context.)
This object identifier is intended to be employed in the object set PBMAC1
HMAC SHA 2 HMAC SHA 2 refers to the set of HMAC message authentication schemes [NIST198]
based on the SHA 2 functions [NIST180].
HMAC SHA 2 has a variable key length and a message authentication code whose length is based on the hash function chosen (SHA 224, SHA 256, SHA 384, SHA 512, SHA 512/224, or SHA 512/256)
that is, 28, 32, 48, or 64 octets.
(see Appendix B.1.2) identify the HMAC SHA 2 schemes.
The object identifiers are the same for both the pseudorandom functions and the message authentication schemes; the distinction is to be understood by context.
These object identifiers are intended to be employed in the object set PBMAC1
ASN.1 Module For reference purposes
, the ASN.1 syntax in the preceding sections is presented as an ASN.1 module here.
This module has been checked for conformance with the   ASN.1 standard by the OSS ASN.1
Tools PKCS5v2 1 { iso(1) member body(2
OPTIONAL } ALGORITHM IDENTIFIER ::
, {NULL IDENTIFIED BY id hmacWithSHA224}, {NULL IDENTIFIED BY id hmacWithSHA256}, {NULL IDENTIFIED BY id hmacWithSHA384}, {NULL IDENTIFIED BY
, {NULL IDENTIFIED BY i
, {NULL IDENTIFIED BY i
OCTET STRING (SIZE(8)) IDENTIFIED BY des EDE3 CBC
iv OCTET STRING OPTIONAL }
} END Appendix D.  Revision History of PKCS #5 Versions
1.0 1.3 Versions 1.0 1.3 were distributed to participants in RSA Data Security Inc.'s Public Key Cryptography Standards meetings in February and March 1991.
Version 1.4 Version 1.4 was part of the June 3, 1991 initial public release of PKCS.
Version 1.4 was published as NIST/OSI Implementors' Workshop document SEC SIG 91 20.
Version 1.5 Version 1.5 incorporated several editorial changes, including updates to the references and the addition of a revision history.
Version 2.0 Version 2.0 incorporates major editorial changes in terms of the document structure, and introduces the PBES2 encryption scheme, the PBMAC1 message authentication scheme, and independent password based key derivation functions.
This version continues to support the encryption process in version 1.5.
This document transfers PKCS #5 into the IETF and includes some minor changes from the authors for this submission.
Introduces AES/CBC as an encryption scheme for PBES2 and HMAC with the hash functions SHA 224, SHA 256, SHA 384, SHA 512, SHA 512/224, and SHA 512/256 as pseudorandom functions for PBKDF2 and message authentication schemes for PBMAC1.
Changes references for PKCS #5 to RFC 2898 and for PKCS #8 to RFCs 5208 and 5898.
Incorporates corrections of two editorial errata reported on PKCS #5 [RFC2898].
Added security considerations for MD2, MD5, and SHA 1.
The Public Key Cryptography Standards are specifications produced by RSA Laboratories in cooperation with secure systems developers worldwide for the purpose of accelerating the deployment of public  key cryptography.
First published in 1991 as a result of meetings with a small group of early adopters of public key technology, the PKCS documents have become widely referenced and implemented.
Contributions from the PKCS series have become part of many formal and de facto standards, including ANSI X9 documents, PKIX, Secure Electronic Transaction (SET), S/MIME, and SSL.
Further development of most PKCS documents occurs through the IETF.
Suggestions for improvement are welcome.
