- title: __initial_text__
  contents:
  - '                      WebNFS Server Specification

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the specifications for a server of WebNFS\n\
    \   clients.  WebNFS extends the semantics of versions 2 and 3 of the NFS\n  \
    \ protocols to allow clients to obtain filehandles more easily, without\n   recourse\
    \ to the portmap or MOUNT protocols.  In removing the need for\n   these protocols,\
    \ WebNFS clients see benefits in faster response to\n   requests, easy transit\
    \ of firewalls and better server scalability\n   This description is provided\
    \ to facilitate compatible implementations\n   of WebNFS servers.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.    Introduction . . . . . . . . . . . . . . . . . .\
    \ . . . . . 2\n   2.    TCP vs UDP . . . . . . . . . . . . .   . . . . . . . .\
    \ . . 2\n   3.    Well-known Port  . . . . . . . . . . . . . . . . . . . . . 2\n\
    \   4.    Server Port Monitoring . . . . . . . . . . . . . . . . . . 3\n   5.\
    \    Public Filehandle  . . . . . . . . . . . . . . . . . . . . 3\n   5.1    \
    \ Version 2 Public Filehandle  . . . . . . . . . . . . . . 3\n   5.2     Version\
    \ 3 Public Filehandle  . . . . . . . . . . . . . . 4\n   6.    Multi-component\
    \ Lookup . . . . . . . . . . . . . . . . . . 4\n   6.1     Canonical Path vs.\
    \ Native Path . . . . . . . . . . . . . 5\n   6.2     Symbolic Links . . . . .\
    \ . . . . . . . . . . . . . . . . 6\n   6.3     Export Spanning Pathnames  . .\
    \ . . . . . . . . . . . . . 6\n   7.    Location of Public Filehandle  . . . .\
    \ . . . . . . . . . . 7\n   8.    Index Files  . . . . . . . . . . . . . . . .\
    \ . . . . . . . 7\n   9.    Bibliography . . . . . . . . . . . . . . . . . . .\
    \ . . . . 8\n   10.   Security Considerations  . . . . . . . . . . . . . . . .\
    \ . 9\n   11.   Acknowledgements . . . . . . . . . . . . . . . . . . . . . 9\n\
    \   12.   Author's Address . . . . . . . . . . . . . . . . . . . . . 10\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The NFS protocol provides access to shared filesystems across\n\
    \   networks.  It is intended to be machine, operating system, network\n   architecture,\
    \ and transport independent.  The protocol currently\n   exists in two versions:\
    \ version 2 [RFC1094] and version 3 [RFC1813],\n   both built on Sun RPC [RFC1831]\
    \ and its associated eXternal Data\n   Representation (XDR) [RFC1832]. This document\
    \ assumes some\n   familiarity with the NFS protocol and underlying RPC protocols.\n\
    \   WebNFS servers implement semantic extensions to both versions of the\n   NFS\
    \ protocol to support a lightweight binding mechanism for\n   conventional or\
    \ web browser clients that need to communicate with NFS\n   servers across the\
    \ Internet. a WebNFS server supports the public\n   filehandle and multi-component\
    \ lookup features described herein, as\n   well as meeting some additional requirements.\n\
    \   For a description of WebNFS client requirements, read RFC 2054.\n"
- title: 2. TCP vs UDP
  contents:
  - "2. TCP vs UDP\n   The NFS protocol is most well known for its use of UDP which\
    \ performs\n   acceptably on local area networks.  However, on wide area networks\n\
    \   with error prone, high-latency connections and bandwidth contention,\n   TCP\
    \ is well respected for its congestion control and superior error\n   handling.\
    \  A growing number of NFS implementations now support the\n   NFS protocol over\
    \ TCP connections.\n   A WebNFS client will first attempt to connect to its server\
    \ with a\n   TCP connection.  If the server refuses the connection, the client\n\
    \   will attempt to use UDP.  All WebNFS servers should support client\n   use\
    \ of TCP and must support UDP.\n"
- title: 3. Well-known Port
  contents:
  - "3. Well-known Port\n   While Internet protocols are generally identified by registered\
    \ port\n   number assignments, RPC based protocols register a 32 bit program\n\
    \   number and a dynamically assigned port with the portmap service which\n  \
    \ is registered on the well-known port 111.  Since the NFS protocol is\n   RPC-based,\
    \ NFS servers register their port assignment with the\n   portmap service.\n \
    \  NFS servers are constrained by a requirement to re-register at the\n   same\
    \ port after a server crash and recovery so that clients can\n   recover simply\
    \ by retransmitting an RPC request until a response is\n   received.  This is\
    \ simpler than the alternative of having the client\n   repeatedly check with\
    \ the portmap service for a new port assignment.\n   NFS servers typically achieve\
    \ this port invariance by registering a\n   constant port assignment, 2049, for\
    \ both UDP and TCP.\n   To avoid the overhead of contacting the server's portmap\
    \ service, and\n   to facilitate transit through packet filtering firewalls, WebNFS\n\
    \   clients optimistically assume that WebNFS servers register on port\n   2049.\
    \  Most NFS servers use this port assignment already, so this\n   client optimism\
    \ is well justified.\n   A WebNFS server must register on UDP port 2049 and TCP\
    \ port 2049 if\n   TCP is supported.\n"
- title: 4. Server Port Monitoring
  contents:
  - "4. Server Port Monitoring\n   Some NFS servers accept requests only from reserved\
    \ UDP or TCP ports,\n   i.e. port numbers below 1024.  These \"privileged\" ports\
    \ are available\n   only to Unix processes with superuser permissions.  Requests\
    \ that do\n   not originate from the range of reserved ports are rejected.  This\
    \ an\n   optimistic way of preventing direct access to the server from user\n\
    \   processes that may attempt to spoof AUTH_UNIX RPC credentials.\n   Since WebNFS\
    \ clients are not required to use reserved ports, a WebNFS\n   server must not\
    \ check the originating port for requests to\n   filesystems made available to\
    \ WebNFS clients.\n"
- title: 5. Public Filehandle
  contents:
  - "5. Public Filehandle\n   The public filehandle is an NFS file handle with a reserved\
    \ value and\n   special semantics that allow an initial filehandle to be obtained.\
    \  A\n   WebNFS client can use the public filehandle as an initial filehandle\n\
    \   without using the MOUNT protocol.  Since NFS version 2 and version 3\n   have\
    \ different filehandle formats, the public filehandle is defined\n   differently\
    \ for each.\n   The public filehandle is a zero filehandle.  For NFS version 2\
    \ this\n   is a filehandle with 32 zero octets.  A version 3 public filehandle\n\
    \   has zero length.\n"
- title: 5.1 Version 2 Public Filehandle
  contents:
  - "5.1 Version 2 Public Filehandle\n   A version 2 filehandle is defined in RFC1094\
    \ as an opaque value\n   occupying 32 octets.  A version 2 public filehandle has\
    \ a zero in\n   each octet, i.e. all zeros.\n    1                           \
    \                                  32\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 5.2 Version 3 Public Filehandle
  contents:
  - "5.2 Version 3 Public Filehandle\n   A version 3 filehandle is defined in RFC1813\
    \ as a variable length\n   opaque value occupying up to 64 octets.  The length\
    \ of the filehandle\n   is indicated by an integer value contained in a 4 octet\
    \ value which\n   describes the number of valid octets that follow. A version\
    \ 3 public\n   filehandle has a length of zero.\n   +-+-+-+-+\n   |   0   |\n\
    \   +-+-+-+-+\n"
- title: 6. Multi-component Lookup
  contents:
  - "6. Multi-component Lookup\n   Normally the NFS LOOKUP request (versions 2 or\
    \ 3) takes a directory\n   file handle along with the name of a directory member,\
    \ and returns\n   the filehandle of the directory member.  If a client needs to\n\
    \   evaluate a pathname that contains a sequence of components, then\n   beginning\
    \ with the directory file handle of the first component it\n   must issue a series\
    \ of LOOKUP requests one component at a time.  For\n   instance, evaluation of\
    \ the Unix path \"a/b/c\" will generate separate\n   LOOKUP requests for each\
    \ component of the pathname \"a\", \"b\", and \"c\".\n   A LOOKUP request that\
    \ uses the public file handle can provide a\n   pathname containing multiple components.\
    \  The server is expected to\n   evaluate the entire pathname and return a filehandle\
    \ for the final\n   component. The pathname syntax is assumed to be understood\
    \ by the\n   server, but the client must not make assumptions of the pathname\n\
    \   syntax.\n   A Unix server, for instance, uses a slash \"/\" character to separate\n\
    \   components in a Unix pathname.\n   For example, rather than evaluate the path\
    \ \"a/b/c\" as:\n        LOOKUP  FH=0x0  \"a\"  --->\n                       \
    \      <---  FH=0x1\n        LOOKUP  FH=0x1  \"b\"  --->\n                   \
    \          <---  FH=0x2\n        LOOKUP  FH=0x2  \"c\"  --->\n               \
    \              <---  FH=0x3\n   Relative to the public filehandle these three\
    \ LOOKUP requests can be\n   replaced by a single multi-component lookup:\n  \
    \      LOOKUP  FH=0x0  \"a/b/c\"  --->\n                                 <---\
    \  FH=0x3\n   Multi-component lookup is supported only for LOOKUP requests relative\n\
    \   to the public filehandle.\n"
- title: 6.1 Canonical Path vs. Native Path
  contents:
  - "6.1 Canonical Path vs. Native Path\n   If the pathname in a multi-component LOOKUP\
    \ request begins with a\n   printable ASCII character, then it must be a canonical\
    \ path.  A\n   canonical path is a hierarchically-related, slash-separated sequence\n\
    \   of components, <directory>/<directory>/.../<name>.\n   Occurrences of the\
    \ \"/\" character within a component will be escaped\n   using the escape code\
    \ %2f.  Non-printable ascii characters (with\n   values in the range 00-1F and\
    \ 7f hexadecimal) will also be escaped\n   using the \"%\" character to introduce\
    \ a two digit hexadecimal code.\n   Occurrences of the \"%\" character that do\
    \ not introduce an encoded\n   character will themselves be encoded with %25.\n\
    \   If the first character of a canonical path is a slash, then the\n   canonical\
    \ path must be evaluated relative to the server's root\n   directory.  If the\
    \ first character is not a slash, then the path must\n   be evaluated relative\
    \ to the directory with which the public\n   filehandle is associated.\n   Not\
    \ all WebNFS servers can support arbitrary use of absolute paths.\n   Clearly,\
    \ the server cannot return a filehandle if the path identifies\n   a file or directory\
    \ that is not exported by the server.  In addition,\n   some servers will not\
    \ return a filehandle if the path names a file or\n   directory in an exported\
    \ filesystem different from the one that is\n   associated with the public filehandle.\n\
    \   If the first character of the path is 0x80 (non-ascii) then the\n   following\
    \ character is the first in a native path.  A native path\n   conforms to the\
    \ natural pathname syntax of the server. For example:\n        Lookup for Canonical\
    \ Path:\n                LOOKUP FH=0x0 \"/a/b/c\"\n        Lookup for Native Path:\n\
    \                LOOKUP FH=0x0  0x80 \"a:b:c\"\n   Other introductory characters\
    \ in the range 0x81 - 0xff may be added\n   in future specifications.  If the\
    \ server receives any character in\n   this range that it does not understand\
    \ then it must return an error\n   to the client: NFSERR_IO for NFS V2, NFS3ERR_IO\
    \ for NFS V3.\n"
- title: 6.2 Symbolic Links
  contents:
  - "6.2 Symbolic Links\n   Servers that support symbolic links may encounter pathname\
    \ components\n   that are symbolic links.  The server is expected to evaluate\
    \ these\n   symbolic links as a part of the normal pathname evaluation process.\n\
    \   This is a different semantic from that of conventional component-at-\n   a-time\
    \ pathname evaluation by NFS clients, where the client is\n   expected to do the\
    \ evaluation.\n   However, if the final component is a symbolic link, the server\
    \ must\n   return its filehandle and let the client evaluate it.\n"
- title: 6.3 Export Spanning Pathnames
  contents:
  - "6.3 Export Spanning Pathnames\n   The server may evaluate a pathname, either\
    \ through a multi-component\n   LOOKUP or as a symbolic link embedded in a pathname,\
    \ that references\n   a file or directory outside of the exported hierarchy.\n\
    \   Clearly, if the destination of the path is not in an exported\n   filesystem,\
    \ then the server must return an error to the client.\n   Many NFS server implementations\
    \ rely on the MOUNT protocol for\n   checking access to exported filesystems and\
    \ NFS server does no access\n   checking.  The NFS server assumes that the filehandle\
    \ does double\n   duty: identifying a file as well as being a security token.\
    \ Since\n   WebNFS clients do not normally use the MOUNT protocol, a server that\n\
    \   relies on MOUNT checking cannot automatically grant access to another\n  \
    \ exported filesystem at the destination of a spanning path. These\n   servers\
    \ must return an error.\n   For example: the server exports two filesystems. \
    \ One is associated\n   with the public filehandle.\n      /export/this   (public\
    \ filehandle)\n      /export/that\n   The server receives a LOOKUP request with\
    \ the public filehandle that\n   identifies a file or directory in the other exported\
    \ filesystem:\n      LOOKUP 0x0  \"../that/file\"\n   or\n      LOOKUP 0x0  \"\
    /export/that/file\"\n   Even though the pathname destination is in an exported\
    \ filesystem,\n   the server cannot return a filehandle without an assurance that\
    \ the\n   client's use of this filehandle will be authorized.\n   Servers that\
    \ check client access to an export on every NFS request\n   have more flexibility.\
    \  These servers can return filehandles for\n   paths that span exports since\
    \ the client's use of the filehandle for\n   the destination filesystem will be\
    \ checked by the NFS server.\n"
- title: 7. Location of Public Filehandle
  contents:
  - "7. Location of Public Filehandle\n   A server administrator can associate the\
    \ public filehandle with any\n   file or directory. For instance, a WebNFS server\
    \ administrator could\n   attach the public filehandle to the root of an anonymous\
    \ FTP archive,\n   so that anonymous FTP pathnames could be used to identify files\
    \ in\n   the FTP hierarchy, e.g.\n      # share -o ro,public  /export/ftp\n  \
    \ On servers that support spanning paths, the public filehandle need\n   not necessarily\
    \ be attached to an exported directory, though a\n   successful LOOKUP relative\
    \ to the public filehandle must identify a\n   file or directory that is exported.\n\
    \   For instance, if an NFS server exports a directory \"/export/foo\" and\n \
    \  the public filehandle is attached to the server's root directory,\n   then\
    \ a LOOKUP of \"export/foo\" relative to the public filehandle will\n   return\
    \ a valid file handle but a LOOKUP of \"export\" will return an\n   access error\
    \ since the server's \"/export\" directory is not exported.\n               /\
    \            (public filehandle is here)\n              /\\\n             /  \\\
    \n            /   export      (not exported)\n           /    /\\\n          /\
    \    /  \\\n         /    /   foo       (exported)\n      LOOKUP 0x0  \"export\"\
    \      (returns an error)\n      LOOKUP 0x0  \"export/foo\"  (returns an filehandle)\n"
- title: 8. Index Files
  contents:
  - "8. Index Files\n   Most HTTP servers support the concept of an index file.  If\
    \ a browser\n   references a directory that contains an index file, then the server\n\
    \   will return the contents of the index file rather than a directory\n   listing.\
    \  For instance if a browser requests \"a/b/c\" then the server\n   might return\
    \ the contents of \"a/b/c/index.html\".\n   A WebNFS server may choose to emulate\
    \ this feature for the benefit of\n   clients using the NFS protocol to browse\
    \ a Web hierarchy. On\n   receiving a multi-component lookup for a canonical path\
    \ that names a\n   directory, the server can check that directory for the presence\
    \ of an\n   index file.  If the file exists then the server may choose to return\n\
    \   the filehandle of the index file instead of the directory.  Index\n   files\
    \ are commonly called \"index.html\" though the name is usually\n   configurable.\n"
- title: 9. Bibliography
  contents:
  - "9. Bibliography\n   [RFC1831]       Srinivasan, R., \"RPC: Remote Procedure Call\n\
    \                   Protocol Specification Version 2\", RFC 1831,\n          \
    \         August 1995.\n                   http://www.internic.net/rfc/rfc1831.txt\n\
    \   [RFC1832]       Srinivasan, R., \"XDR: External Data Representation\n    \
    \               Standard,\" RFC 1832, August 1995.\n                   http://www.internic.net/rfc/rfc1832.txt\n\
    \   [RFC1833]       Srinivasan, R., \"Binding Protocols for ONC RPC\n        \
    \           Version 2\", RFC 1833, August 1995.\n                   http://www.internic.net/rfc/rfc1833.txt\n\
    \   [RFC1094]       Sun Microsystems, Inc., \"Network Filesystem\n           \
    \        Specification\", RFC 1094, March 1989.  NFS\n                   version\
    \ 2 protocol specification.\n                   http://www.internic.net/rfc/rfc1094.txt\n\
    \   [RFC1813]       Sun Microsystems, Inc., \"NFS Version 3 Protocol\n       \
    \            Specification\", RFC 1813, June 1995.  NFS version\n            \
    \       3 protocol specification.\n                   http://www.internic.net/rfc/rfc1813.txt\n\
    \   [RFC2054]       Callaghan, B., \"WebNFS Client Specification\",\n        \
    \           RFC 2054, October 1996.\n                   http://www.internic.net/rfc/rfc2054.txt\n\
    \   [Sandberg]      Sandberg, R., D. Goldberg, S. Kleiman, D. Walsh,\n       \
    \            B.  Lyon, \"Design and Implementation of the Sun\n              \
    \     Network Filesystem,\" USENIX Conference\n                   Proceedings,\
    \ USENIX Association, Berkeley, CA,\n                   Summer 1985.  The basic\
    \ paper describing the\n                   SunOS implementation of the NFS version\
    \ 2\n                   protocol, and discusses the goals, protocol\n        \
    \           specification and trade-offs.\n   [X/OpenNFS]     X/Open Company,\
    \ Ltd., X/Open CAE Specification:\n                   Protocols for X/Open Internetworking:\
    \ XNFS,\n                   X/Open Company, Ltd., Apex Plaza, Forbury Road,\n\
    \                   Reading Berkshire, RG1 1AX, United Kingdom,\n            \
    \       1991.  This is an indispensable reference for\n                   NFS\
    \ version 2 protocol and accompanying\n                   protocols, including\
    \ the Lock Manager and the\n                   Portmapper.\n   [X/OpenPCNFS] \
    \  X/Open Company, Ltd., X/Open CAE Specification:\n                   Protocols\
    \ for X/Open Internetworking: (PC)NFS,\n                   Developer's Specification,\
    \ X/Open Company, Ltd.,\n                   Apex Plaza, Forbury Road, Reading\
    \ Berkshire, RG1\n                   1AX, United Kingdom, 1991.  This is an\n\
    \                   indispensable reference for NFS version 2\n              \
    \     protocol and accompanying protocols, including\n                   the Lock\
    \ Manager and the Portmapper.\n"
- title: 10. Security Considerations
  contents:
  - "10. Security Considerations\n   Since the WebNFS server features are based on\
    \ NFS protocol versions 2\n   and 3, the RPC security considerations described\
    \ in RFC 1094, RFC\n   1813, and Appendix A of RFC 1831 apply here also.\n   Clients\
    \ and servers may separately negotiate secure connection\n   schemes for authentication,\
    \ data integrity, and privacy.\n   Implementors must note carefully the implications\
    \ of export spanning\n   pathnames as described in section 6.3.\n"
- title: 11. Acknowledgements
  contents:
  - "11. Acknowledgements\n   This specification was extensively reviewed by the NFS\
    \ group at\n   SunSoft and brainstormed by Michael Eisler.\n"
- title: 12. Author's Address
  contents:
  - "12. Author's Address\n   Address comments related to this document to:\n   nfs@eng.sun.com\n\
    \   Brent Callaghan\n   Sun Microsystems, Inc.\n   2550 Garcia Avenue\n   Mailstop\
    \ Mpk17-201\n   Mountain View, CA 94043-1100\n   Phone: 1-415-786-5067\n   Fax:\
    \   1-415-786-5896\n   EMail: brent.callaghan@eng.sun.com\n"
