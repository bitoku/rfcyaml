- title: __initial_text__
  contents:
  - '                            DNS Terminology

    '
- title: Abstract
  contents:
  - "Abstract\n   The DNS is defined in literally dozens of different RFCs.  The\n\
    \   terminology used by implementers and developers of DNS protocols, and\n  \
    \ by operators of DNS systems, has sometimes changed in the decades\n   since\
    \ the DNS was first defined.  This document gives current\n   definitions for\
    \ many of the terms used in the DNS in a single\n   document.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7719.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Names . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  DNS Header and Response Codes . . . . . . . . . . . . .\
    \ . . .   6\n   4.  Resource Records  . . . . . . . . . . . . . . . . . . . .\
    \ . .   7\n   5.  DNS Servers and Clients . . . . . . . . . . . . . . . . . .\
    \ .   9\n   6.  Zones . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  13\n   7.  Registration Model  . . . . . . . . . . . . . . . . . . . . .  17\n\
    \   8.  General DNSSEC  . . . . . . . . . . . . . . . . . . . . . . .  18\n  \
    \ 9.  DNSSEC States . . . . . . . . . . . . . . . . . . . . . . . .  20\n   10.\
    \ Security Considerations . . . . . . . . . . . . . . . . . . .  22\n   11. References\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  22\n     11.1.  Normative\
    \ References . . . . . . . . . . . . . . . . . .  22\n     11.2.  Informative\
    \ References . . . . . . . . . . . . . . . . .  24\n   Acknowledgements  . . .\
    \ . . . . . . . . . . . . . . . . . . . . .  27\n   Authors' Addresses  . . .\
    \ . . . . . . . . . . . . . . . . . . . .  27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Domain Name System (DNS) is a simple query-response\
    \ protocol\n   whose messages in both directions have the same format.  The protocol\n\
    \   and message format are defined in [RFC1034] and [RFC1035].  These\n   RFCs\
    \ defined some terms, but later documents defined others.  Some of\n   the terms\
    \ from RFCs 1034 and 1035 now have somewhat different\n   meanings than they did\
    \ in 1987.\n   This document collects a wide variety of DNS-related terms.  Some\
    \ of\n   them have been precisely defined in earlier RFCs, some have been\n  \
    \ loosely defined in earlier RFCs, and some are not defined in any\n   earlier\
    \ RFC at all.\n   Most of the definitions here are the consensus definition of\
    \ the DNS\n   community -- both protocol developers and operators.  Some of the\n\
    \   definitions differ from earlier RFCs, and those differences are\n   noted.\
    \  In this document, where the consensus definition is the same\n   as the one\
    \ in an RFC, that RFC is quoted.  Where the consensus\n   definition has changed\
    \ somewhat, the RFC is mentioned but the new\n   stand-alone definition is given.\n\
    \   It is important to note that, during the development of this\n   document,\
    \ it became clear that some DNS-related terms are interpreted\n   quite differently\
    \ by different DNS experts.  Further, some terms that\n   are defined in early\
    \ DNS RFCs now have definitions that are generally\n   agreed to, but that are\
    \ different from the original definitions.\n   Therefore, the authors intend to\
    \ follow this document with a\n   substantial revision in the not-distant future.\
    \  That revision will\n   probably have more in-depth discussion of some terms\
    \ as well as new\n   terms; it will also update some of the RFCs with new definitions.\n\
    \   The terms are organized loosely by topic.  Some definitions are for\n   new\
    \ terms for things that are commonly talked about in the DNS\n   community but\
    \ that never had terms defined for them.\n   Other organizations sometimes define\
    \ DNS-related terms their own way.\n   For example, the W3C defines \"domain\"\
    \ at\n   https://specs.webplatform.org/url/webspecs/develop/.\n   Note that there\
    \ is no single consistent definition of \"the DNS\".  It\n   can be considered\
    \ to be some combination of the following: a commonly\n   used naming scheme for\
    \ objects on the Internet; a distributed\n   database representing the names and\
    \ certain properties of these\n   objects; an architecture providing distributed\
    \ maintenance,\n   resilience, and loose coherency for this database; and a simple\n\
    \   query-response protocol (as mentioned below) implementing this\n   architecture.\n\
    \   Capitalization in DNS terms is often inconsistent among RFCs and\n   various\
    \ DNS practitioners.  The capitalization used in this document\n   is a best guess\
    \ at current practices, and is not meant to indicate\n   that other capitalization\
    \ styles are wrong or archaic.  In some\n   cases, multiple styles of capitalization\
    \ are used for the same term\n   due to quoting from different RFCs.\n"
- title: 2.  Names
  contents:
  - "2.  Names\n   Domain name:  Section 3.1 of [RFC1034] talks of \"the domain name\n\
    \      space\" as a tree structure.  \"Each node has a label, which is zero\n\
    \      to 63 octets in length. ... The domain name of a node is the list\n   \
    \   of the labels on the path from the node to the root of the tree.\n      ...\
    \ To simplify implementations, the total number of octets that\n      represent\
    \ a domain name (i.e., the sum of all label octets and\n      label lengths) is\
    \ limited to 255.\"  Any label in a domain name can\n      contain any octet value.\n\
    \   Fully qualified domain name (FQDN):  This is often just a clear way\n    \
    \  of saying the same thing as \"domain name of a node\", as outlined\n      above.\
    \  However, the term is ambiguous.  Strictly speaking, a\n      fully qualified\
    \ domain name would include every label, including\n      the final, zero-length\
    \ label of the root: such a name would be\n      written \"www.example.net.\"\
    \ (note the terminating dot).  But\n      because every name eventually shares\
    \ the common root, names are\n      often written relative to the root (such as\
    \ \"www.example.net\") and\n      are still called \"fully qualified\".  This\
    \ term first appeared in\n      [RFC819].  In this document, names are often written\
    \ relative to\n      the root.\n      The need for the term \"fully qualified\
    \ domain name\" comes from the\n      existence of partially qualified domain\
    \ names, which are names\n      where some of the right-most names are left off\
    \ and are understood\n      only by context.\n   Label:  The identifier of an\
    \ individual node in the sequence of nodes\n      identified by a fully qualified\
    \ domain name.\n   Host name:  This term and its equivalent, \"hostname\", have\
    \ been\n      widely used but are not defined in [RFC1034], [RFC1035],\n     \
    \ [RFC1123], or [RFC2181].  The DNS was originally deployed into the\n      Host\
    \ Tables environment as outlined in [RFC952], and it is likely\n      that the\
    \ term followed informally from the definition there.  Over\n      time, the definition\
    \ seems to have shifted.  \"Host name\" is often\n      meant to be a domain name\
    \ that follows the rules in Section 3.5 of\n      [RFC1034], the \"preferred name\
    \ syntax\".  Note that any label in a\n      domain name can contain any octet\
    \ value; hostnames are generally\n      considered to be domain names where every\
    \ label follows the rules\n      in the \"preferred name syntax\", with the amendment\
    \ that labels can\n      start with ASCII digits (this amendment comes from Section\
    \ 2.1 of\n      [RFC1123]).\n      People also sometimes use the term hostname\
    \ to refer to just the\n      first label of an FQDN, such as \"printer\" in\n\
    \      \"printer.admin.example.com\".  (Sometimes this is formalized in\n    \
    \  configuration in operating systems.)  In addition, people\n      sometimes\
    \ use this term to describe any name that refers to a\n      machine, and those\
    \ might include labels that do not conform to the\n      \"preferred name syntax\"\
    .\n   TLD:  A Top-Level Domain, meaning a zone that is one layer below the\n \
    \     root, such as \"com\" or \"jp\".  There is nothing special, from the\n \
    \     point of view of the DNS, about TLDs.  Most of them are also\n      delegation-centric\
    \ zones, and there are significant policy issues\n      around their operation.\
    \  TLDs are often divided into sub-groups\n      such as Country Code Top-Level\
    \ Domains (ccTLDs), Generic Top-Level\n      Domains (gTLDs), and others; the\
    \ division is a matter of policy,\n      and beyond the scope of this document.\n\
    \   IDN:  The common abbreviation for \"Internationalized Domain Name\".\n   \
    \   The IDNA protocol is the standard mechanism for handling domain\n      names\
    \ with non-ASCII characters in applications in the DNS.  The\n      current standard,\
    \ normally called \"IDNA2008\", is defined in\n      [RFC5890], [RFC5891], [RFC5892],\
    \ [RFC5893], and [RFC5894].  These\n      documents define many IDN-specific terms\
    \ such as \"LDH label\",\n      \"A-label\", and \"U-label\".  [RFC6365] defines\
    \ more terms that\n      relate to internationalization (some of which relate\
    \ to IDNs), and\n      [RFC6055] has a much more extensive discussion of IDNs,\
    \ including\n      some new terminology.\n   Subdomain:  \"A domain is a subdomain\
    \ of another domain if it is\n      contained within that domain.  This relationship\
    \ can be tested by\n      seeing if the subdomain's name ends with the containing\
    \ domain's\n      name.\"  (Quoted from [RFC1034], Section 3.1).  For example,\
    \ in the\n      host name \"nnn.mmm.example.com\", both \"mmm.example.com\" and\n\
    \      \"nnn.mmm.example.com\" are subdomains of \"example.com\".\n   Alias: \
    \ The owner of a CNAME resource record, or a subdomain of the\n      owner of\
    \ a DNAME resource record [RFC6672].  See also \"canonical\n      name\".\n  \
    \ Canonical name:  A CNAME resource record \"identifies its owner name\n     \
    \ as an alias, and specifies the corresponding canonical name in the\n      RDATA\
    \ section of the RR.\"  (Quoted from [RFC1034], Section 3.6.2)\n      This usage\
    \ of the word \"canonical\" is related to the mathematical\n      concept of \"\
    canonical form\".\n   CNAME:  \"It is traditional to refer to the owner of a CNAME\
    \ record as\n      'a CNAME'.  This is unfortunate, as 'CNAME' is an abbreviation\
    \ of\n      'canonical name', and the owner of a CNAME record is an alias, not\n\
    \      a canonical name.\"  (Quoted from [RFC2181], Section 10.1.1)\n   Public\
    \ suffix:  \"A domain that is controlled by a public registry.\"\n      (Quoted\
    \ from [RFC6265], Section 5.3) A common definition for this\n      term is a domain\
    \ under which subdomains can be registered, and on\n      which HTTP cookies ([RFC6265])\
    \ should not be set.  There is no\n      indication in a domain name whether it\
    \ is a public suffix; that\n      can only be determined by outside means.  In\
    \ fact, both a domain\n      and a subdomain of that domain can be public suffixes.\
    \  At the\n      time this document is published, the IETF DBOUND Working Group\n\
    \      [DBOUND] is dealing with issues concerning public suffixes.\n      There\
    \ is nothing inherent in a domain name to indicate whether it\n      is a public\
    \ suffix.  One resource for identifying public suffixes\n      is the Public Suffix\
    \ List (PSL) maintained by Mozilla\n      (http://publicsuffix.org/).\n      For\
    \ example, at the time this document is published, the \"com.au\"\n      domain\
    \ is listed as a public suffix in the PSL.  (Note that this\n      example might\
    \ change in the future.)\n      Note that the term \"public suffix\" is controversial\
    \ in the DNS\n      community for many reasons, and may be significantly changed\
    \ in\n      the future.  One example of the difficulty of calling a domain a\n\
    \      public suffix is that designation can change over time as the\n      registration\
    \ policy for the zone changes, such as the case of the\n      \"uk\" TLD around\
    \ the time this document is published.\n"
- title: 3.  DNS Header and Response Codes
  contents:
  - "3.  DNS Header and Response Codes\n   The header of a DNS message is its first\
    \ 12 octets.  Many of the\n   fields and flags in the header diagram in Sections\
    \ 4.1.1 through\n   4.1.3 of [RFC1035] are referred to by their names in that\
    \ diagram.\n   For example, the response codes are called \"RCODEs\", the data\
    \ for a\n   record is called the \"RDATA\", and the authoritative answer bit is\n\
    \   often called \"the AA flag\" or \"the AA bit\".\n   Some of response codes\
    \ that are defined in [RFC1035] have gotten\n   their own shorthand names.  Some\
    \ common response code names that\n   appear without reference to the numeric\
    \ value are \"FORMERR\",\n   \"SERVFAIL\", and \"NXDOMAIN\" (the latter of which\
    \ is also referred to\n   as \"Name Error\").  All of the RCODEs are listed at\n\
    \   http://www.iana.org/assignments/dns-parameters, although that site\n   uses\
    \ mixed-case capitalization, while most documents use all-caps.\n   NODATA:  \"\
    A pseudo RCODE which indicates that the name is valid for\n      the given class,\
    \ but there are no records of the given type.  A\n      NODATA response has to\
    \ be inferred from the answer.\"  (Quoted from\n      [RFC2308], Section 1.) \
    \ \"NODATA is indicated by an answer with the\n      RCODE set to NOERROR and\
    \ no relevant answers in the answer\n      section.  The authority section will\
    \ contain an SOA record, or\n      there will be no NS records there.\"  (Quoted\
    \ from [RFC2308],\n      Section 2.2.)  Note that referrals have a similar format\
    \ to NODATA\n      replies; [RFC2308] explains how to distinguish them.\n    \
    \  The term \"NXRRSET\" is sometimes used as a synonym for NODATA.\n      However,\
    \ this is a mistake, given that NXRRSET is a specific error\n      code defined\
    \ in [RFC2136].\n   Negative response:  A response that indicates that a particular\
    \ RRset\n      does not exist, or whose RCODE indicates the nameserver cannot\n\
    \      answer.  Sections 2 and 7 of [RFC2308] describe the types of\n      negative\
    \ responses in detail.\n   Referrals:  Data from the authority section of a non-authoritative\n\
    \      answer.  [RFC1035] Section 2.1 defines \"authoritative\" data.\n      However,\
    \ referrals at zone cuts (defined in Section 6) are not\n      authoritative.\
    \  Referrals may be zone cut NS resource records and\n      their glue records.\
    \  NS records on the parent side of a zone cut\n      are an authoritative delegation,\
    \ but are normally not treated as\n      authoritative data.  In general, a referral\
    \ is a way for a server\n      to send an answer saying that the server does not\
    \ know the answer,\n      but knows where the query should be directed in order\
    \ to get an\n      answer.  Historically, many authoritative servers answered\
    \ with a\n      referral to the root zone when queried for a name for which they\n\
    \      were not authoritative, but this practice has declined.\n"
- title: 4.  Resource Records
  contents:
  - "4.  Resource Records\n   RR:  An acronym for resource record.  ([RFC1034], Section\
    \ 3.6.)\n   RRset:  A set of resource records with the same label, class and\n\
    \      type, but with different data.  (Definition from [RFC2181]) Also\n    \
    \  spelled RRSet in some documents.  As a clarification, \"same label\"\n    \
    \  in this definition means \"same owner name\".  In addition,\n      [RFC2181]\
    \ states that \"the TTLs of all RRs in an RRSet must be the\n      same\".  (This\
    \ definition is definitely not the same as \"the\n      response one gets to a\
    \ query for QTYPE=ANY\", which is an\n      unfortunate misunderstanding.)\n \
    \  EDNS:  The extension mechanisms for DNS, defined in [RFC6891].\n      Sometimes\
    \ called \"EDNS0\" or \"EDNS(0)\" to indicate the version\n      number.  EDNS\
    \ allows DNS clients and servers to specify message\n      sizes larger than the\
    \ original 512 octet limit, to expand the\n      response code space, and potentially\
    \ to carry additional options\n      that affect the handling of a DNS query.\n\
    \   OPT:  A pseudo-RR (sometimes called a \"meta-RR\") that is used only to\n\
    \      contain control information pertaining to the question-and-answer\n   \
    \   sequence of a specific transaction.  (Definition from [RFC6891],\n      Section\
    \ 6.1.1) It is used by EDNS.\n   Owner:  The domain name where a RR is found ([RFC1034],\
    \ Section 3.6).\n      Often appears in the term \"owner name\".\n   SOA field\
    \ names:  DNS documents, including the definitions here,\n      often refer to\
    \ the fields in the RDATA of an SOA resource record\n      by field name.  Those\
    \ fields are defined in Section 3.3.13 of\n      [RFC1035].  The names (in the\
    \ order they appear in the SOA RDATA)\n      are MNAME, RNAME, SERIAL, REFRESH,\
    \ RETRY, EXPIRE, and MINIMUM.\n      Note that the meaning of MINIMUM field is\
    \ updated in Section 4 of\n      [RFC2308]; the new definition is that the MINIMUM\
    \ field is only\n      \"the TTL to be used for negative responses\".  This document\
    \ tends\n      to use field names instead of terms that describe the fields.\n\
    \   TTL:  The maximum \"time to live\" of a resource record.  \"A TTL value\n\
    \      is an unsigned number, with a minimum value of 0, and a maximum\n     \
    \ value of 2147483647.  That is, a maximum of 2^31 - 1.  When\n      transmitted,\
    \ the TTL is encoded in the less significant 31 bits of\n      the 32 bit TTL\
    \ field, with the most significant, or sign, bit set\n      to zero.\"  (Quoted\
    \ from [RFC2181], Section 8) (Note that [RFC1035]\n      erroneously stated that\
    \ this is a signed integer; that was fixed\n      by [RFC2181].)\n      The TTL\
    \ \"specifies the time interval that the resource record may\n      be cached\
    \ before the source of the information should again be\n      consulted\".  (Quoted\
    \ from [RFC1035], Section 3.2.1) Also: \"the\n      time interval (in seconds)\
    \ that the resource record may be cached\n      before it should be discarded\"\
    .  (Quoted from [RFC1035],\n      Section 4.1.3).  Despite being defined for a\
    \ resource record, the\n      TTL of every resource record in an RRset is required\
    \ to be the\n      same ([RFC2181], Section 5.2).\n      The reason that the TTL\
    \ is the maximum time to live is that a\n      cache operator might decide to\
    \ shorten the time to live for\n      operational purposes, such as if there is\
    \ a policy to disallow TTL\n      values over a certain number.  Also, if a value\
    \ is flushed from\n      the cache when its value is still positive, the value\
    \ effectively\n      becomes zero.  Some servers are known to ignore the TTL on\
    \ some\n      RRsets (such as when the authoritative data has a very short TTL)\n\
    \      even though this is against the advice in RFC 1035.\n      There is also\
    \ the concept of a \"default TTL\" for a zone, which can\n      be a configuration\
    \ parameter in the server software.  This is\n      often expressed by a default\
    \ for the entire server, and a default\n      for a zone using the $TTL directive\
    \ in a zone file.  The $TTL\n      directive was added to the master file format\
    \ by [RFC2308].\n   Class independent:  A resource record type whose syntax and\
    \ semantics\n      are the same for every DNS class.  A resource record type that\
    \ is\n      not class independent has different meanings depending on the DNS\n\
    \      class of the record, or the meaning is undefined for classes other\n  \
    \    than IN (class 1, the Internet).\n"
- title: 5.  DNS Servers and Clients
  contents:
  - "5.  DNS Servers and Clients\n   This section defines the terms used for the systems\
    \ that act as DNS\n   clients, DNS servers, or both.\n   Resolver:  A program\
    \ \"that extract[s] information from name servers\n      in response to client\
    \ requests.\"  (Quoted from [RFC1034],\n      Section 2.4) \"The resolver is located\
    \ on the same machine as the\n      program that requests the resolver's services,\
    \ but it may need to\n      consult name servers on other hosts.\"  (Quoted from\
    \ [RFC1034],\n      Section 5.1) A resolver performs queries for a name, type,\
    \ and\n      class, and receives answers.  The logical function is called\n  \
    \    \"resolution\".  In practice, the term is usually referring to some\n   \
    \   specific type of resolver (some of which are defined below), and\n      understanding\
    \ the use of the term depends on understanding the\n      context.\n   Stub resolver:\
    \  A resolver that cannot perform all resolution itself.\n      Stub resolvers\
    \ generally depend on a recursive resolver to\n      undertake the actual resolution\
    \ function.  Stub resolvers are\n      discussed but never fully defined in Section\
    \ 5.3.1 of [RFC1034].\n      They are fully defined in Section 6.1.3.1 of [RFC1123].\n\
    \   Iterative mode:  A resolution mode of a server that receives DNS\n      queries\
    \ and responds with a referral to another server.\n      Section 2.3 of [RFC1034]\
    \ describes this as \"The server refers the\n      client to another server and\
    \ lets the client pursue the query\".  A\n      resolver that works in iterative\
    \ mode is sometimes called an\n      \"iterative resolver\".\n   Recursive mode:\
    \  A resolution mode of a server that receives DNS\n      queries and either responds\
    \ to those queries from a local cache or\n      sends queries to other servers\
    \ in order to get the final answers\n      to the original queries.  Section 2.3\
    \ of [RFC1034] describes this\n      as \"The first server pursues the query for\
    \ the client at another\n      server\".  A server operating in recursive mode\
    \ may be thought of\n      as having a name server side (which is what answers\
    \ the query) and\n      a resolver side (which performs the resolution function).\
    \  Systems\n      operating in this mode are commonly called \"recursive servers\"\
    .\n      Sometimes they are called \"recursive resolvers\".  While strictly\n\
    \      the difference between these is that one of them sends queries to\n   \
    \   another recursive server and the other does not, in practice it is\n     \
    \ not possible to know in advance whether the server that one is\n      querying\
    \ will also perform recursion; both terms can be observed\n      in use interchangeably.\n\
    \   Full resolver:  This term is used in [RFC1035], but it is not defined\n  \
    \    there.  RFC 1123 defines a \"full-service resolver\" that may or may\n  \
    \    not be what was intended by \"full resolver\" in [RFC1035].  This\n     \
    \ term is not properly defined in any RFC.\n   Full-service resolver:  Section\
    \ 6.1.3.1 of [RFC1123] defines this\n      term to mean a resolver that acts in\
    \ recursive mode with a cache\n      (and meets other requirements).\n   Priming:\
    \  The mechanism used by a resolver to determine where to send\n      queries\
    \ before there is anything in the resolver's cache.  Priming\n      is most often\
    \ done from a configuration setting that contains a\n      list of authoritative\
    \ servers for the root zone.\n   Negative caching:  \"The storage of knowledge\
    \ that something does not\n      exist, cannot give an answer, or does not give\
    \ an answer.\"\n      (Quoted from [RFC2308], Section 1)\n   Authoritative server:\
    \  \"A server that knows the content of a DNS zone\n      from local knowledge,\
    \ and thus can answer queries about that zone\n      without needing to query\
    \ other servers.\"  (Quoted from [RFC2182],\n      Section 2.)  It is a system\
    \ that responds to DNS queries with\n      information about zones for which it\
    \ has been configured to answer\n      with the AA flag in the response header\
    \ set to 1.  It is a server\n      that has authority over one or more DNS zones.\
    \  Note that it is\n      possible for an authoritative server to respond to a\
    \ query without\n      the parent zone delegating authority to that server.\n\
    \      Authoritative servers also provide \"referrals\", usually to child\n  \
    \    zones delegated from them; these referrals have the AA bit set to\n     \
    \ 0 and come with referral data in the Authority and (if needed) the\n      Additional\
    \ sections.\n   Authoritative-only server:  A name server that only serves\n \
    \     authoritative data and ignores requests for recursion.  It will\n      \"\
    not normally generate any queries of its own.  Instead, it\n      answers non-recursive\
    \ queries from iterative resolvers looking for\n      information in zones it\
    \ serves.\"  (Quoted from [RFC4697],\n      Section 2.4)\n   Zone transfer:  The\
    \ act of a client requesting a copy of a zone and\n      an authoritative server\
    \ sending the needed information.  (See\n      Section 6 for a description of\
    \ zones.)  There are two common\n      standard ways to do zone transfers: the\
    \ AXFR (\"Authoritative\n      Transfer\") mechanism to copy the full zone (described\
    \ in\n      [RFC5936], and the IXFR (\"Incremental Transfer\") mechanism to copy\n\
    \      only parts of the zone that have changed (described in [RFC1995]).\n  \
    \    Many systems use non-standard methods for zone transfer outside\n      the\
    \ DNS protocol.\n   Secondary server:  \"An authoritative server which uses zone\
    \ transfer\n      to retrieve the zone\" (Quoted from [RFC1996], Section 2.1).\n\
    \      [RFC2182] describes secondary servers in detail.  Although early\n    \
    \  DNS RFCs such as [RFC1996] referred to this as a \"slave\", the\n      current\
    \ common usage has shifted to calling it a \"secondary\".\n      Secondary servers\
    \ are also discussed in [RFC1034].\n   Slave server:  See secondary server.\n\
    \   Primary server:  \"Any authoritative server configured to be the\n      source\
    \ of zone transfer for one or more [secondary] servers\"\n      (Quoted from [RFC1996],\
    \ Section 2.1) or, more specifically, \"an\n      authoritative server configured\
    \ to be the source of AXFR or IXFR\n      data for one or more [secondary] servers\"\
    \ (Quoted from [RFC2136]).\n      Although early DNS RFCs such as [RFC1996] referred\
    \ to this as a\n      \"master\", the current common usage has shifted to \"primary\"\
    .\n      Primary servers are also discussed in [RFC1034].\n   Master server: \
    \ See primary server.\n   Primary master:  \"The primary master is named in the\
    \ zone's SOA MNAME\n      field and optionally by an NS RR\".  (Quoted from [RFC1996],\n\
    \      Section 2.1).  [RFC2136] defines \"primary master\" as \"Master\n     \
    \ server at the root of the AXFR/IXFR dependency graph.  The primary\n      master\
    \ is named in the zone's SOA MNAME field and optionally by an\n      NS RR.  There\
    \ is by definition only one primary master server per\n      zone.\"  The idea\
    \ of a primary master is only used by [RFC2136],\n      and is considered archaic\
    \ in other parts of the DNS.\n   Stealth server:  This is \"like a slave server\
    \ except not listed in an\n      NS RR for the zone.\"  (Quoted from [RFC1996],\
    \ Section 2.1)\n   Hidden master:  A stealth server that is a master for zone\
    \ transfers.\n      \"In this arrangement, the master name server that processes\
    \ the\n      updates is unavailable to general hosts on the Internet; it is not\n\
    \      listed in the NS RRset.\"  (Quoted from [RFC6781], Section 3.4.3.)\n  \
    \    An earlier RFC, [RFC4641], said that the hidden master's name\n      appears\
    \ in the SOA RRs MNAME field, although in some setups, the\n      name does not\
    \ appear at all in the public DNS.  A hidden master\n      can be either a secondary\
    \ or a primary master.\n   Forwarding:  The process of one server sending a DNS\
    \ query with the\n      RD bit set to 1 to another server to resolve that query.\n\
    \      Forwarding is a function of a DNS resolver; it is different than\n    \
    \  simply blindly relaying queries.\n      [RFC5625] does not give a specific\
    \ definition for forwarding, but\n      describes in detail what features a system\
    \ that forwards need to\n      support.  Systems that forward are sometimes called\
    \ \"DNS proxies\",\n      but that term has not yet been defined (even in [RFC5625]).\n\
    \   Forwarder:  Section 1 of [RFC2308] describes a forwarder as \"a\n      nameserver\
    \ used to resolve queries instead of directly using the\n      authoritative nameserver\
    \ chain\".  [RFC2308] further says \"The\n      forwarder typically either has\
    \ better access to the internet, or\n      maintains a bigger cache which may\
    \ be shared amongst many\n      resolvers.\"  That definition appears to suggest\
    \ that forwarders\n      normally only query authoritative servers.  In current\
    \ use,\n      however, forwarders often stand between stub resolvers and\n   \
    \   recursive servers.  [RFC2308] is silent on whether a forwarder is\n      iterative-only\
    \ or can be a full-service resolver.\n   Policy-implementing resolver:  A resolver\
    \ acting in recursive mode\n      that changes some of the answers that it returns\
    \ based on policy\n      criteria, such as to prevent access to malware sites\
    \ or\n      objectionable content.  In general, a stub resolver has no idea\n\
    \      whether upstream resolvers implement such policy or, if they do,\n    \
    \  the exact policy about what changes will be made.  In some cases,\n      the\
    \ user of the stub resolver has selected the policy-implementing\n      resolver\
    \ with the explicit intention of using it to implement the\n      policies.  In\
    \ other cases, policies are imposed without the user\n      of the stub resolver\
    \ being informed.\n   Open resolver:  A full-service resolver that accepts and\
    \ processes\n      queries from any (or nearly any) stub resolver.  This is sometimes\n\
    \      also called a \"public resolver\", although the term \"public\n      resolver\"\
    \ is used more with open resolvers that are meant to be\n      open, as compared\
    \ to the vast majority of open resolvers that are\n      probably misconfigured\
    \ to be open.\n   View:  A configuration for a DNS server that allows it to provide\n\
    \      different answers depending on attributes of the query.\n      Typically,\
    \ views differ by the source IP address of a query, but\n      can also be based\
    \ on the destination IP address, the type of query\n      (such as AXFR), whether\
    \ it is recursive, and so on.  Views are\n      often used to provide more names\
    \ or different addresses to queries\n      from \"inside\" a protected network\
    \ than to those \"outside\" that\n      network.  Views are not a standardized\
    \ part of the DNS, but they\n      are widely implemented in server software.\n\
    \   Passive DNS:  A mechanism to collect large amounts of DNS data by\n      storing\
    \ DNS responses from servers.  Some of these systems also\n      collect the DNS\
    \ queries associated with the responses; this can\n      raise privacy issues.\
    \  Passive DNS databases can be used to answer\n      historical questions about\
    \ DNS zones such as which records were\n      available for them at what times\
    \ in the past.  Passive DNS\n      databases allow searching of the stored records\
    \ on keys other than\n      just the name, such as \"find all names which have\
    \ A records of a\n      particular value\".\n   Anycast:  \"The practice of making\
    \ a particular service address\n      available in multiple, discrete, autonomous\
    \ locations, such that\n      datagrams sent are routed to one of several available\
    \ locations.\"\n      (Quoted from [RFC4786], Section 2)\n"
- title: 6.  Zones
  contents:
  - "6.  Zones\n   This section defines terms that are used when discussing zones\
    \ that\n   are being served or retrieved.\n   Zone:  \"Authoritative information\
    \ is organized into units called\n      'zones', and these zones can be automatically\
    \ distributed to the\n      name servers which provide redundant service for the\
    \ data in a\n      zone.\"  (Quoted from [RFC1034], Section 2.4)\n   Child:  \"\
    The entity on record that has the delegation of the domain\n      from the Parent.\"\
    \  (Quoted from [RFC7344], Section 1.1)\n   Parent:  \"The domain in which the\
    \ Child is registered.\"  (Quoted from\n      [RFC7344], Section 1.1) Earlier,\
    \ \"parent name server\" was defined\n      in [RFC882] as \"the name server that\
    \ has authority over the place\n      in the domain name space that will hold\
    \ the new domain\".  (Note\n      that [RFC882] was obsoleted by [RFC1034] and\
    \ [RFC1035].)  [RFC819]\n      also has some description of the relationship between\
    \ parents and\n      children.\n   Origin:\n      (a) \"The domain name that appears\
    \ at the top of a zone (just below\n      the cut that separates the zone from\
    \ its parent).  The name of the\n      zone is the same as the name of the domain\
    \ at the zone's origin.\"\n      (Quoted from [RFC2181], Section 6.)  These days,\
    \ this sense of\n      \"origin\" and \"apex\" (defined below) are often used\n\
    \      interchangeably.\n      (b) The domain name within which a given relative\
    \ domain name\n      appears in zone files.  Generally seen in the context of\n\
    \      \"$ORIGIN\", which is a control entry defined in [RFC1035],\n      Section\
    \ 5.1, as part of the master file format.  For example, if\n      the $ORIGIN\
    \ is set to \"example.org.\", then a master file line for\n      \"www\" is in\
    \ fact an entry for \"www.example.org.\".\n   Apex:  The point in the tree at\
    \ an owner of an SOA and corresponding\n      authoritative NS RRset.  This is\
    \ also called the \"zone apex\".\n      [RFC4033] defines it as \"the name at\
    \ the child's side of a zone\n      cut\".  The \"apex\" can usefully be thought\
    \ of as a data-theoretic\n      description of a tree structure, and \"origin\"\
    \ is the name of the\n      same concept when it is implemented in zone files.\
    \  The\n      distinction is not always maintained in use, however, and one can\n\
    \      find uses that conflict subtly with this definition.  [RFC1034]\n     \
    \ uses the term \"top node of the zone\" as a synonym of \"apex\", but\n     \
    \ that term is not widely used.  These days, the first sense of\n      \"origin\"\
    \ (above) and \"apex\" are often used interchangeably.\n   Zone cut:  The delimitation\
    \ point between two zones where the origin\n      of one of the zones is the child\
    \ of the other zone.\n      \"Zones are delimited by 'zone cuts'.  Each zone cut\
    \ separates a\n      'child' zone (below the cut) from a 'parent' zone (above\
    \ the cut).\n      (Quoted from [RFC2181], Section 6; note that this is barely\
    \ an\n      ostensive definition.)  Section 4.2 of [RFC1034] uses \"cuts\" as\n\
    \      'zone cut'.\"\n   Delegation:  The process by which a separate zone is\
    \ created in the\n      name space beneath the apex of a given domain.  Delegation\
    \ happens\n      when an NS RRset is added in the parent zone for the child origin.\n\
    \      Delegation inherently happens at a zone cut.  The term is also\n      commonly\
    \ a noun: the new zone that is created by the act of\n      delegating.\n   Glue\
    \ records:  \"[Resource records] which are not part of the\n      authoritative\
    \ data [of the zone], and are address resource records\n      for the [name servers\
    \ in subzones].  These RRs are only necessary\n      if the name server's name\
    \ is 'below' the cut, and are only used as\n      part of a referral response.\"\
    \  Without glue \"we could be faced\n      with the situation where the NS RRs\
    \ tell us that in order to learn\n      a name server's address, we should contact\
    \ the server using the\n      address we wish to learn.\"  (Definition from [RFC1034],\n\
    \      Section 4.2.1)\n      A later definition is that glue \"includes any record\
    \ in a zone\n      file that is not properly part of that zone, including nameserver\n\
    \      records of delegated sub-zones (NS records), address records that\n   \
    \   accompany those NS records (A, AAAA, etc), and any other stray\n      data\
    \ that might appear\" ([RFC2181], Section 5.4.1).  Although glue\n      is sometimes\
    \ used today with this wider definition in mind, the\n      context surrounding\
    \ the [RFC2181] definition suggests it is\n      intended to apply to the use\
    \ of glue within the document itself\n      and not necessarily beyond.\n   In-bailiwick:\n\
    \      (a) An adjective to describe a name server whose name is either\n     \
    \ subordinate to or (rarely) the same as the zone origin.  In-\n      bailiwick\
    \ name servers require glue records in their parent zone\n      (using the first\
    \ of the definitions of \"glue records\" in the\n      definition above).\n  \
    \    (b) Data for which the server is either authoritative, or else\n      authoritative\
    \ for an ancestor of the owner name.  This sense of\n      the term normally is\
    \ used when discussing the relevancy of glue\n      records in a response.  For\
    \ example, the server for the parent\n      zone \"example.com\" might reply with\
    \ glue records for\n      \"ns.child.example.com\".  Because the \"child.example.com\"\
    \ zone is a\n      descendant of the \"example.com\" zone, the glue records are\
    \ in-\n      bailiwick.\n   Out-of-bailiwick:  The antonym of in-bailiwick.\n\
    \   Authoritative data:  \"All of the RRs attached to all of the nodes\n     \
    \ from the top node of the zone down to leaf nodes or nodes above\n      cuts\
    \ around the bottom edge of the zone.\"  (Quoted from [RFC1034],\n      Section\
    \ 4.2.1) It is noted that this definition might\n      inadvertently also include\
    \ any NS records that appear in the zone,\n      even those that might not truly\
    \ be authoritative because there are\n      identical NS RRs below the zone cut.\
    \  This reveals the ambiguity\n      in the notion of authoritative data, because\
    \ the parent-side NS\n      records authoritatively indicate the delegation, even\
    \ though they\n      are not themselves authoritative data.\n   Root zone:  The\
    \ zone whose apex is the zero-length label.  Also\n      sometimes called \"the\
    \ DNS root\".\n   Empty non-terminals:  \"Domain names that own no resource records\
    \ but\n      have subdomains that do.\"  (Quoted from [RFC4592], Section 2.2.2.)\n\
    \      A typical example is in SRV records: in the name\n      \"_sip._tcp.example.com\"\
    , it is likely that \"_tcp.example.com\" has\n      no RRsets, but that \"_sip._tcp.example.com\"\
    \ has (at least) an SRV\n      RRset.\n   Delegation-centric zone:  A zone that\
    \ consists mostly of delegations\n      to child zones.  This term is used in\
    \ contrast to a zone that\n      might have some delegations to child zones, but\
    \ also has many data\n      resource records for the zone itself and/or for child\
    \ zones.  The\n      term is used in [RFC4956] and [RFC5155], but is not defined\
    \ there.\n   Wildcard:  [RFC1034] defined \"wildcard\", but in a way that turned\
    \ out\n      to be confusing to implementers.  Special treatment is given to\n\
    \      RRs with owner names starting with the label \"*\".  \"Such RRs are\n \
    \     called 'wildcards'.  Wildcard RRs can be thought of as\n      instructions\
    \ for synthesizing RRs.\"  (Quoted from [RFC1034],\n      Section 4.3.3) For an\
    \ extended discussion of wildcards, including\n      clearer definitions, see\
    \ [RFC4592].\n   Occluded name:  \"The addition of a delegation point via dynamic\n\
    \      update will render all subordinate domain names to be in a limbo,\n   \
    \   still part of the zone, but not available to the lookup process.\n      The\
    \ addition of a DNAME resource record has the same impact.  The\n      subordinate\
    \ names are said to be 'occluded'.\"  (Quoted from\n      [RFC5936], Section 3.5)\n\
    \   Fast flux DNS:  This \"occurs when a domain is found in DNS using A\n    \
    \  records to multiple IP addresses, each of which has a very short\n      Time-to-Live\
    \ (TTL) value associated with it.  This means that the\n      domain resolves\
    \ to varying IP addresses over a short period of\n      time.\"  (Quoted from\
    \ [RFC6561], Section 1.1.5, with typo\n      corrected) It is often used to deliver\
    \ malware.  Because the\n      addresses change so rapidly, it is difficult to\
    \ ascertain all the\n      hosts.  It should be noted that the technique also\
    \ works with AAAA\n      records, but such use is not frequently observed on the\
    \ Internet\n      as of this writing.\n"
- title: 7.  Registration Model
  contents:
  - "7.  Registration Model\n   Registry:  The administrative operation of a zone\
    \ that allows\n      registration of names within that zone.  People often use\
    \ this\n      term to refer only to those organizations that perform\n      registration\
    \ in large delegation-centric zones (such as TLDs); but\n      formally, whoever\
    \ decides what data goes into a zone is the\n      registry for that zone.  This\
    \ definition of \"registry\" is from a\n      DNS point of view; for some zones,\
    \ the policies that determine\n      what can go in the zone are decided by superior\
    \ zones and not the\n      registry operator.\n   Registrant:  An individual or\
    \ organization on whose behalf a name in\n      a zone is registered by the registry.\
    \  In many zones, the registry\n      and the registrant may be the same entity,\
    \ but in TLDs they often\n      are not.\n   Registrar:  A service provider that\
    \ acts as a go-between for\n      registrants and registries.  Not all registrations\
    \ require a\n      registrar, though it is common to have registrars involved\
    \ in\n      registrations in TLDs.\n   EPP:  The Extensible Provisioning Protocol\
    \ (EPP), which is commonly\n      used for communication of registration information\
    \ between\n      registries and registrars.  EPP is defined in [RFC5730].\n  \
    \ WHOIS:  A protocol specified in [RFC3912], often used for querying\n      registry\
    \ databases.  WHOIS data is frequently used to associate\n      registration data\
    \ (such as zone management contacts) with domain\n      names.  The term \"WHOIS\
    \ data\" is often used as a synonym for the\n      registry database, even though\
    \ that database may be served by\n      different protocols, particularly RDAP.\
    \  The WHOIS protocol is\n      also used with IP address registry data.\n   RDAP:\
    \  The Registration Data Access Protocol, defined in [RFC7480],\n      [RFC7481],\
    \ [RFC7482], [RFC7483], [RFC7484], and [RFC7485].  The\n      RDAP protocol and\
    \ data format are meant as a replacement for\n      WHOIS.\n   DNS operator: \
    \ An entity responsible for running DNS servers.  For a\n      zone's authoritative\
    \ servers, the registrant may act as their own\n      DNS operator, or their registrar\
    \ may do it on their behalf, or\n      they may use a third-party operator.  For\
    \ some zones, the registry\n      function is performed by the DNS operator plus\
    \ other entities who\n      decide about the allowed contents of the zone.\n"
- title: 8.  General DNSSEC
  contents:
  - "8.  General DNSSEC\n   Most DNSSEC terms are defined in [RFC4033], [RFC4034],\
    \ [RFC4035], and\n   [RFC5155].  The terms that have caused confusion in the DNS\
    \ community\n   are highlighted here.\n   DNSSEC-aware and DNSSEC-unaware:  These\
    \ two terms, which are used in\n      some RFCs, have not been formally defined.\
    \  However, Section 2 of\n      [RFC4033] defines many types of resolvers and\
    \ validators,\n      including \"non-validating security-aware stub resolver\"\
    , \"non-\n      validating stub resolver\", \"security-aware name server\",\n\
    \      \"security-aware recursive name server\", \"security-aware resolver\",\n\
    \      \"security-aware stub resolver\", and \"security-oblivious\n      'anything'\"\
    .  (Note that the term \"validating resolver\", which is\n      used in some places\
    \ in DNSSEC-related documents, is also not\n      defined.)\n   Signed zone: \
    \ \"A zone whose RRsets are signed and that contains\n      properly constructed\
    \ DNSKEY, Resource Record Signature (RRSIG),\n      Next Secure (NSEC), and (optionally)\
    \ DS records.\"  (Quoted from\n      [RFC4033], Section 2.)  It has been noted\
    \ in other contexts that\n      the zone itself is not really signed, but all\
    \ the relevant RRsets\n      in the zone are signed.  Nevertheless, if a zone\
    \ that should be\n      signed contains any RRsets that are not signed (or opted\
    \ out),\n      those RRsets will be treated as bogus, so the whole zone needs\
    \ to\n      be handled in some way.\n      It should also be noted that, since\
    \ the publication of [RFC6840],\n      NSEC records are no longer required for\
    \ signed zones: a signed\n      zone might include NSEC3 records instead.  [RFC7129]\
    \ provides\n      additional background commentary and some context for the NSEC\
    \ and\n      NSEC3 mechanisms used by DNSSEC to provide authenticated denial-\n\
    \      of-existence responses.\n   Unsigned zone:  Section 2 of [RFC4033] defines\
    \ this as \"a zone that\n      is not signed\".  Section 2 of [RFC4035] defines\
    \ this as \"A zone\n      that does not include these records [properly constructed\
    \ DNSKEY,\n      Resource Record Signature (RRSIG), Next Secure (NSEC), and\n\
    \      (optionally) DS records] according to the rules in this section\".\n  \
    \    There is an important note at the end of Section 5.2 of [RFC4035]\n     \
    \ that defines an additional situation in which a zone is considered\n      unsigned:\
    \ \"If the resolver does not support any of the algorithms\n      listed in an\
    \ authenticated DS RRset, then the resolver will not be\n      able to verify\
    \ the authentication path to the child zone.  In this\n      case, the resolver\
    \ SHOULD treat the child zone as if it were\n      unsigned.\"\n   NSEC:  \"The\
    \ NSEC record allows a security-aware resolver to\n      authenticate a negative\
    \ reply for either name or type non-\n      existence with the same mechanisms\
    \ used to authenticate other DNS\n      replies.\"  (Quoted from [RFC4033], Section\
    \ 3.2.)  In short, an\n      NSEC record provides authenticated denial of existence.\n\
    \      \"The NSEC resource record lists two separate things: the next\n      owner\
    \ name (in the canonical ordering of the zone) that contains\n      authoritative\
    \ data or a delegation point NS RRset, and the set of\n      RR types present\
    \ at the NSEC RR's owner name.\"  (Quoted from\n      Section 4 of RFC 4034)\n\
    \   NSEC3:  Like the NSEC record, the NSEC3 record also provides\n      authenticated\
    \ denial of existence; however, NSEC3 records mitigate\n      against zone enumeration\
    \ and support Opt-Out.  NSEC3 resource\n      records are defined in [RFC5155].\n\
    \      Note that [RFC6840] says that [RFC5155] \"is now considered part of\n \
    \     the DNS Security Document Family as described by Section 10 of\n      [RFC4033]\"\
    .  This means that some of the definitions from earlier\n      RFCs that only\
    \ talk about NSEC records should probably be\n      considered to be talking about\
    \ both NSEC and NSEC3.\n   Opt-out:  \"The Opt-Out Flag indicates whether this\
    \ NSEC3 RR may cover\n      unsigned delegations.\"  (Quoted from [RFC5155], Section\
    \ 3.1.2.1.)\n      Opt-out tackles the high costs of securing a delegation to\
    \ an\n      insecure zone.  When using Opt-Out, names that are an insecure\n \
    \     delegation (and empty non-terminals that are only derived from\n      insecure\
    \ delegations) don't require an NSEC3 record or its\n      corresponding RRSIG\
    \ records.  Opt-Out NSEC3 records are not able\n      to prove or deny the existence\
    \ of the insecure delegations.\n      (Adapted from [RFC7129], Section 5.1)\n\
    \   Zone enumeration:  \"The practice of discovering the full content of a\n \
    \     zone via successive queries.\"  (Quoted from [RFC5155],\n      Section 1.3.)\
    \  This is also sometimes called \"zone walking\".  Zone\n      enumeration is\
    \ different from zone content guessing where the\n      guesser uses a large dictionary\
    \ of possible labels and sends\n      successive queries for them, or matches\
    \ the contents of NSEC3\n      records against such a dictionary.\n   Key signing\
    \ key (KSK):  DNSSEC keys that \"only sign the apex DNSKEY\n      RRset in a zone.\"\
    (Quoted from [RFC6781], Section 3.1)\n   Zone signing key (ZSK):  \"DNSSEC keys\
    \ that can be used to sign all\n      the RRsets in a zone that require signatures,\
    \ other than the apex\n      DNSKEY RRset.\"  (Quoted from [RFC6781], Section\
    \ 3.1) Note that the\n      roles KSK and ZSK are not mutually exclusive: a single\
    \ key can be\n      both KSK and ZSK at the same time.  Also note that a ZSK is\n\
    \      sometimes used to sign the apex DNSKEY RRset.\n   Combined signing key\
    \ (CSK):  \"In cases where the differentiation\n      between the KSK and ZSK\
    \ is not made, i.e., where keys have the\n      role of both KSK and ZSK, we talk\
    \ about a Single-Type Signing\n      Scheme.\"  (Quoted from [RFC6781], Section\
    \ 3.1) This is sometimes\n      called a \"combined signing key\" or CSK.  It\
    \ is operational\n      practice, not protocol, that determines whether a particular\
    \ key\n      is a ZSK, a KSK, or a CSK.\n   Secure Entry Point (SEP):  A flag\
    \ in the DNSKEY RDATA that \"can be\n      used to distinguish between keys that\
    \ are intended to be used as\n      the secure entry point into the zone when\
    \ building chains of\n      trust, i.e., they are (to be) pointed to by parental\
    \ DS RRs or\n      configured as a trust anchor.  Therefore, it is suggested that\
    \ the\n      SEP flag be set on keys that are used as KSKs and not on keys that\n\
    \      are used as ZSKs, while in those cases where a distinction between\n  \
    \    a KSK and ZSK is not made (i.e., for a Single-Type Signing\n      Scheme),\
    \ it is suggested that the SEP flag be set on all keys.\"\n      (Quoted from\
    \ [RFC6781], Section 3.2.3.)  Note that the SEP flag is\n      only a hint, and\
    \ its presence or absence may not be used to\n      disqualify a given DNSKEY\
    \ RR from use as a KSK or ZSK during\n      validation.\n   DNSSEC Policy (DP):\
    \  A statement that \"sets forth the security\n      requirements and standards\
    \ to be implemented for a DNSSEC-signed\n      zone.\"  (Quoted from [RFC6841],\
    \ Section 2)\n   DNSSEC Practice Statement (DPS):  \"A practices disclosure document\n\
    \      that may support and be a supplemental document to the DNSSEC\n      Policy\
    \ (if such exists), and it states how the management of a\n      given zone implements\
    \ procedures and controls at a high level.\"\n      (Quoted from [RFC6841], Section\
    \ 2)\n"
- title: 9.  DNSSEC States
  contents:
  - "9.  DNSSEC States\n   A validating resolver can determine that a response is\
    \ in one of four\n   states: secure, insecure, bogus, or indeterminate.  These\
    \ states are\n   defined in [RFC4033] and [RFC4035], although the two definitions\n\
    \   differ a bit.  This document makes no effort to reconcile the two\n   definitions,\
    \ and takes no position as to whether they need to be\n   reconciled.\n   Section\
    \ 5 of [RFC4033] says:\n      A validating resolver can determine the following\
    \ 4 states:\n      Secure: The validating resolver has a trust anchor, has a chain\n\
    \         of trust, and is able to verify all the signatures in the\n        \
    \ response.\n      Insecure: The validating resolver has a trust anchor, a chain\n\
    \         of trust, and, at some delegation point, signed proof of the\n     \
    \    non-existence of a DS record.  This indicates that subsequent\n         branches\
    \ in the tree are provably insecure.  A validating\n         resolver may have\
    \ a local policy to mark parts of the domain\n         space as insecure.\n  \
    \    Bogus: The validating resolver has a trust anchor and a secure\n        \
    \ delegation indicating that subsidiary data is signed, but\n         the response\
    \ fails to validate for some reason: missing\n         signatures, expired signatures,\
    \ signatures with unsupported\n         algorithms, data missing that the relevant\
    \ NSEC RR says\n         should be present, and so forth.\n      Indeterminate:\
    \ There is no trust anchor that would indicate that a\n         specific portion\
    \ of the tree is secure.  This is the default\n         operation mode.\n   Section\
    \ 4.3 of [RFC4035] says:\n      A security-aware resolver must be able to distinguish\
    \ between four\n      cases:\n      Secure: An RRset for which the resolver is\
    \ able to build a chain\n          of signed DNSKEY and DS RRs from a trusted\
    \ security anchor to\n          the RRset.  In this case, the RRset should be\
    \ signed and is\n          subject to signature validation, as described above.\n\
    \      Insecure: An RRset for which the resolver knows that it has no\n      \
    \   chain of signed DNSKEY and DS RRs from any trusted starting\n         point\
    \ to the RRset.  This can occur when the target RRset lies\n         in an unsigned\
    \ zone or in a descendent [sic] of an unsigned\n         zone.  In this case,\
    \ the RRset may or may not be signed, but\n         the resolver will not be able\
    \ to verify the signature.\n      Bogus: An RRset for which the resolver believes\
    \ that it ought to\n         be able to establish a chain of trust but for which\
    \ it is\n         unable to do so, either due to signatures that for some reason\n\
    \         fail to validate or due to missing data that the relevant\n        \
    \ DNSSEC RRs indicate should be present.  This case may indicate\n         an\
    \ attack but may also indicate a configuration error or some\n         form of\
    \ data corruption.\n      Indeterminate: An RRset for which the resolver is not\
    \ able to\n         determine whether the RRset should be signed, as the resolver\n\
    \         is not able to obtain the necessary DNSSEC RRs.  This can occur\n  \
    \       when the security-aware resolver is not able to contact\n         security-aware\
    \ name servers for the relevant zones.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   These definitions do not change any security\
    \ considerations for the\n   DNS.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC882]   Mockapetris, P., \"Domain names: Concepts\
    \ and facilities\",\n              RFC 882, DOI 10.17487/RFC0882, November 1983,\n\
    \              <http://www.rfc-editor.org/info/rfc882>.\n   [RFC1034]  Mockapetris,\
    \ P., \"Domain names - concepts and facilities\",\n              STD 13, RFC 1034,\
    \ DOI 10.17487/RFC1034, November 1987,\n              <http://www.rfc-editor.org/info/rfc1034>.\n\
    \   [RFC1035]  Mockapetris, P., \"Domain names - implementation and\n        \
    \      specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n            \
    \  November 1987, <http://www.rfc-editor.org/info/rfc1035>.\n   [RFC1123]  Braden,\
    \ R., Ed., \"Requirements for Internet Hosts -\n              Application and\
    \ Support\", STD 3, RFC 1123,\n              DOI 10.17487/RFC1123, October 1989,\n\
    \              <http://www.rfc-editor.org/info/rfc1123>.\n   [RFC1996]  Vixie,\
    \ P., \"A Mechanism for Prompt Notification of Zone\n              Changes (DNS\
    \ NOTIFY)\", RFC 1996, DOI 10.17487/RFC1996,\n              August 1996, <http://www.rfc-editor.org/info/rfc1996>.\n\
    \   [RFC2136]  Vixie, P., Ed., Thomson, S., Rekhter, Y., and J. Bound,\n     \
    \         \"Dynamic Updates in the Domain Name System (DNS UPDATE)\",\n      \
    \        RFC 2136, DOI 10.17487/RFC2136, April 1997,\n              <http://www.rfc-editor.org/info/rfc2136>.\n\
    \   [RFC2181]  Elz, R. and R. Bush, \"Clarifications to the DNS\n            \
    \  Specification\", RFC 2181, DOI 10.17487/RFC2181, July 1997,\n             \
    \ <http://www.rfc-editor.org/info/rfc2181>.\n   [RFC2182]  Elz, R., Bush, R.,\
    \ Bradner, S., and M. Patton, \"Selection\n              and Operation of Secondary\
    \ DNS Servers\", BCP 16, RFC 2182,\n              DOI 10.17487/RFC2182, July 1997,\n\
    \              <http://www.rfc-editor.org/info/rfc2182>.\n   [RFC2308]  Andrews,\
    \ M., \"Negative Caching of DNS Queries (DNS\n              NCACHE)\", RFC 2308,\
    \ DOI 10.17487/RFC2308, March 1998,\n              <http://www.rfc-editor.org/info/rfc2308>.\n\
    \   [RFC4033]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"DNS Security Introduction and Requirements\",\n            \
    \  RFC 4033, DOI 10.17487/RFC4033, March 2005,\n              <http://www.rfc-editor.org/info/rfc4033>.\n\
    \   [RFC4034]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"Resource Records for the DNS Security Extensions\",\n      \
    \        RFC 4034, DOI 10.17487/RFC4034, March 2005,\n              <http://www.rfc-editor.org/info/rfc4034>.\n\
    \   [RFC4035]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"Protocol Modifications for the DNS Security\n              Extensions\"\
    , RFC 4035, DOI 10.17487/RFC4035, March 2005,\n              <http://www.rfc-editor.org/info/rfc4035>.\n\
    \   [RFC4592]  Lewis, E., \"The Role of Wildcards in the Domain Name\n       \
    \       System\", RFC 4592, DOI 10.17487/RFC4592, July 2006,\n              <http://www.rfc-editor.org/info/rfc4592>.\n\
    \   [RFC5155]  Laurie, B., Sisson, G., Arends, R., and D. Blacka, \"DNS\n    \
    \          Security (DNSSEC) Hashed Authenticated Denial of\n              Existence\"\
    , RFC 5155, DOI 10.17487/RFC5155, March 2008,\n              <http://www.rfc-editor.org/info/rfc5155>.\n\
    \   [RFC5730]  Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\",\n \
    \             STD 69, RFC 5730, DOI 10.17487/RFC5730, August 2009,\n         \
    \     <http://www.rfc-editor.org/info/rfc5730>.\n   [RFC5936]  Lewis, E. and A.\
    \ Hoenes, Ed., \"DNS Zone Transfer Protocol\n              (AXFR)\", RFC 5936,\
    \ DOI 10.17487/RFC5936, June 2010,\n              <http://www.rfc-editor.org/info/rfc5936>.\n\
    \   [RFC6561]  Livingood, J., Mody, N., and M. O'Reirdan,\n              \"Recommendations\
    \ for the Remediation of Bots in ISP\n              Networks\", RFC 6561, DOI\
    \ 10.17487/RFC6561, March 2012,\n              <http://www.rfc-editor.org/info/rfc6561>.\n\
    \   [RFC6672]  Rose, S. and W. Wijngaards, \"DNAME Redirection in the\n      \
    \        DNS\", RFC 6672, DOI 10.17487/RFC6672, June 2012,\n              <http://www.rfc-editor.org/info/rfc6672>.\n\
    \   [RFC6781]  Kolkman, O., Mekking, W., and R. Gieben, \"DNSSEC\n           \
    \   Operational Practices, Version 2\", RFC 6781,\n              DOI 10.17487/RFC6781,\
    \ December 2012,\n              <http://www.rfc-editor.org/info/rfc6781>.\n  \
    \ [RFC6840]  Weiler, S., Ed. and D. Blacka, Ed., \"Clarifications and\n      \
    \        Implementation Notes for DNS Security (DNSSEC)\", RFC 6840,\n       \
    \       DOI 10.17487/RFC6840, February 2013,\n              <http://www.rfc-editor.org/info/rfc6840>.\n\
    \   [RFC6841]  Ljunggren, F., Eklund Lowinder, AM., and T. Okubo, \"A\n      \
    \        Framework for DNSSEC Policies and DNSSEC Practice\n              Statements\"\
    , RFC 6841, DOI 10.17487/RFC6841, January 2013,\n              <http://www.rfc-editor.org/info/rfc6841>.\n\
    \   [RFC6891]  Damas, J., Graff, M., and P. Vixie, \"Extension Mechanisms\n  \
    \            for DNS (EDNS(0))\", STD 75, RFC 6891,\n              DOI 10.17487/RFC6891,\
    \ April 2013,\n              <http://www.rfc-editor.org/info/rfc6891>.\n   [RFC7344]\
    \  Kumari, W., Gudmundsson, O., and G. Barwood, \"Automating\n              DNSSEC\
    \ Delegation Trust Maintenance\", RFC 7344,\n              DOI 10.17487/RFC7344,\
    \ September 2014,\n              <http://www.rfc-editor.org/info/rfc7344>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [DBOUND]   IETF, \"Domain Boundaries (dbound)\
    \ Working Group\", 2015,\n              <https://datatracker.ietf.org/wg/dbound/charter/>.\n\
    \   [RFC819]   Su, Z. and J. Postel, \"The Domain Naming Convention for\n    \
    \          Internet User Applications\", RFC 819,\n              DOI 10.17487/RFC0819,\
    \ August 1982,\n              <http://www.rfc-editor.org/info/rfc819>.\n   [RFC952]\
    \   Harrenstien, K., Stahl, M., and E. Feinler, \"DoD Internet\n             \
    \ host table specification\", RFC 952, DOI 10.17487/RFC0952,\n              October\
    \ 1985, <http://www.rfc-editor.org/info/rfc952>.\n   [RFC1995]  Ohta, M., \"Incremental\
    \ Zone Transfer in DNS\", RFC 1995,\n              DOI 10.17487/RFC1995, August\
    \ 1996,\n              <http://www.rfc-editor.org/info/rfc1995>.\n   [RFC3912]\
    \  Daigle, L., \"WHOIS Protocol Specification\", RFC 3912,\n              DOI\
    \ 10.17487/RFC3912, September 2004,\n              <http://www.rfc-editor.org/info/rfc3912>.\n\
    \   [RFC4641]  Kolkman, O. and R. Gieben, \"DNSSEC Operational Practices\",\n\
    \              RFC 4641, DOI 10.17487/RFC4641, September 2006,\n             \
    \ <http://www.rfc-editor.org/info/rfc4641>.\n   [RFC4697]  Larson, M. and P. Barber,\
    \ \"Observed DNS Resolution\n              Misbehavior\", BCP 123, RFC 4697, DOI\
    \ 10.17487/RFC4697,\n              October 2006, <http://www.rfc-editor.org/info/rfc4697>.\n\
    \   [RFC4786]  Abley, J. and K. Lindqvist, \"Operation of Anycast\n          \
    \    Services\", BCP 126, RFC 4786, DOI 10.17487/RFC4786,\n              December\
    \ 2006, <http://www.rfc-editor.org/info/rfc4786>.\n   [RFC4956]  Arends, R., Kosters,\
    \ M., and D. Blacka, \"DNS Security\n              (DNSSEC) Opt-In\", RFC 4956,\
    \ DOI 10.17487/RFC4956, July\n              2007, <http://www.rfc-editor.org/info/rfc4956>.\n\
    \   [RFC5625]  Bellis, R., \"DNS Proxy Implementation Guidelines\",\n        \
    \      BCP 152, RFC 5625, DOI 10.17487/RFC5625, August 2009,\n              <http://www.rfc-editor.org/info/rfc5625>.\n\
    \   [RFC5890]  Klensin, J., \"Internationalized Domain Names for\n           \
    \   Applications (IDNA): Definitions and Document Framework\",\n             \
    \ RFC 5890, DOI 10.17487/RFC5890, August 2010,\n              <http://www.rfc-editor.org/info/rfc5890>.\n\
    \   [RFC5891]  Klensin, J., \"Internationalized Domain Names in\n            \
    \  Applications (IDNA): Protocol\", RFC 5891,\n              DOI 10.17487/RFC5891,\
    \ August 2010,\n              <http://www.rfc-editor.org/info/rfc5891>.\n   [RFC5892]\
    \  Faltstrom, P., Ed., \"The Unicode Code Points and\n              Internationalized\
    \ Domain Names for Applications (IDNA)\",\n              RFC 5892, DOI 10.17487/RFC5892,\
    \ August 2010,\n              <http://www.rfc-editor.org/info/rfc5892>.\n   [RFC5893]\
    \  Alvestrand, H., Ed. and C. Karp, \"Right-to-Left Scripts\n              for\
    \ Internationalized Domain Names for Applications\n              (IDNA)\", RFC\
    \ 5893, DOI 10.17487/RFC5893, August 2010,\n              <http://www.rfc-editor.org/info/rfc5893>.\n\
    \   [RFC5894]  Klensin, J., \"Internationalized Domain Names for\n           \
    \   Applications (IDNA): Background, Explanation, and\n              Rationale\"\
    , RFC 5894, DOI 10.17487/RFC5894, August 2010,\n              <http://www.rfc-editor.org/info/rfc5894>.\n\
    \   [RFC6055]  Thaler, D., Klensin, J., and S. Cheshire, \"IAB Thoughts on\n \
    \             Encodings for Internationalized Domain Names\", RFC 6055,\n    \
    \          DOI 10.17487/RFC6055, February 2011,\n              <http://www.rfc-editor.org/info/rfc6055>.\n\
    \   [RFC6265]  Barth, A., \"HTTP State Management Mechanism\", RFC 6265,\n   \
    \           DOI 10.17487/RFC6265, April 2011,\n              <http://www.rfc-editor.org/info/rfc6265>.\n\
    \   [RFC6365]  Hoffman, P. and J. Klensin, \"Terminology Used in\n           \
    \   Internationalization in the IETF\", BCP 166, RFC 6365,\n              DOI\
    \ 10.17487/RFC6365, September 2011,\n              <http://www.rfc-editor.org/info/rfc6365>.\n\
    \   [RFC7129]  Gieben, R. and W. Mekking, \"Authenticated Denial of\n        \
    \      Existence in the DNS\", RFC 7129, DOI 10.17487/RFC7129,\n             \
    \ February 2014, <http://www.rfc-editor.org/info/rfc7129>.\n   [RFC7480]  Newton,\
    \ A., Ellacott, B., and N. Kong, \"HTTP Usage in the\n              Registration\
    \ Data Access Protocol (RDAP)\", RFC 7480,\n              DOI 10.17487/RFC7480,\
    \ March 2015,\n              <http://www.rfc-editor.org/info/rfc7480>.\n   [RFC7481]\
    \  Hollenbeck, S. and N. Kong, \"Security Services for the\n              Registration\
    \ Data Access Protocol (RDAP)\", RFC 7481,\n              DOI 10.17487/RFC7481,\
    \ March 2015,\n              <http://www.rfc-editor.org/info/rfc7481>.\n   [RFC7482]\
    \  Newton, A. and S. Hollenbeck, \"Registration Data Access\n              Protocol\
    \ (RDAP) Query Format\", RFC 7482,\n              DOI 10.17487/RFC7482, March\
    \ 2015,\n              <http://www.rfc-editor.org/info/rfc7482>.\n   [RFC7483]\
    \  Newton, A. and S. Hollenbeck, \"JSON Responses for the\n              Registration\
    \ Data Access Protocol (RDAP)\", RFC 7483,\n              DOI 10.17487/RFC7483,\
    \ March 2015,\n              <http://www.rfc-editor.org/info/rfc7483>.\n   [RFC7484]\
    \  Blanchet, M., \"Finding the Authoritative Registration Data\n             \
    \ (RDAP) Service\", RFC 7484, DOI 10.17487/RFC7484, March\n              2015,\
    \ <http://www.rfc-editor.org/info/rfc7484>.\n   [RFC7485]  Zhou, L., Kong, N.,\
    \ Shen, S., Sheng, S., and A. Servin,\n              \"Inventory and Analysis\
    \ of WHOIS Registration Objects\",\n              RFC 7485, DOI 10.17487/RFC7485,\
    \ March 2015,\n              <http://www.rfc-editor.org/info/rfc7485>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors gratefully acknowledge all of the authors of\
    \ DNS-related\n   RFCs that proceed this one.  Comments from Tony Finch, Stephane\n\
    \   Bortzmeyer, Niall O'Reilly, Colm MacCarthaigh, Ray Bellis, John\n   Kristoff,\
    \ Robert Edmonds, Paul Wouters, Shumon Huque, Paul Ebersman,\n   David Lawrence,\
    \ Matthijs Mekking, Casey Deccio, Bob Harold, Ed Lewis,\n   John Klensin, David\
    \ Black, and many others in the DNSOP Working Group\n   have helped shape this\
    \ document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Paul Hoffman\n   ICANN\n   Email: paul.hoffman@icann.org\n\
    \   Andrew Sullivan\n   Dyn\n   150 Dow Street, Tower 2\n   Manchester, NH  03101\n\
    \   United States\n   Email: asullivan@dyn.com\n   Kazunori Fujiwara\n   Japan\
    \ Registry Services Co., Ltd.\n   Chiyoda First Bldg. East 13F, 3-8-1 Nishi-Kanda\n\
    \   Chiyoda-ku, Tokyo  101-0065\n   Japan\n   Phone: +81 3 5215 8451\n   Email:\
    \ fujiwara@jprs.co.jp\n"
