- title: __initial_text__
  contents:
  - "                         Getting Rid of Marking\n      Though we realize that\
    \ this improvement is perhaps somewhat late\nto be implemented, we believe that\
    \ there exist better solutions than\nmarking and suggest a simple modification\
    \ to the IMP-HOST interface\nwhich would avoid it.\n1. The harm.\n      Marking\
    \ was introduced to suit the sending Host because it permits\nthe text of a message\
    \ to start on a word boundary, however, it does not\nsuit the receiving Host with\
    \ a different word length. Moreover,it\nintroduces in the message useless bits.\
    \ Let us illustrate this by the\nexample of our Sigma 7, a 32 bit machine.\n1.1\
    \ Inefficiency in Computation\n      Suppose we receive a message from an 18 bit\
    \ machine (figure 1.1)\ncoded in 8 bit ASCII characters which will eventually\
    \ become standard on\nthe network.  In order to translate this message into our\
    \ EBCDIC\ninternal code, for instance.\n0                        17          \
    \ 0                           31\n|        leader          |            |    \
    \       leader           |\n|               | 0 0 0 1|            | 0 0 0 1 |\
    \                  |\n| message                |            | message        \
    \            |\n                            figure 1.1\nwe first have to shift\
    \ the whole message. We must detect the firsl 1\nfollowing the leader, and from\
    \ this determine that we must shift the\nmessage 4 bits to the left. This takes\
    \ approximately 12 sec per double\nword, which makes 1,5 msec per full regular\
    \ message. This is not huge,\nbut still it is about one-third of the time it will\
    \ take to translate\nthe message in internal code.\n1.2 Inefficiency in transmission\n\
    \      More important is the inefficiency resulting from adding\nunnecessary bits\
    \ to the message, especially if it turns out that one\ncharacter messages are\
    \ used. Figure 1.2 shows the example of a 1\ncharacter text sent by the sigma\
    \ 7, which results in transmitting 112\nbits to carry 8 bits of information, thus\
    \ leading to an efficiency\nfactor of 0.07. Supression of marking would\n    \
    \                        -----------------------------------\n   Sigma 7     \
    \             |           leader                |\n                          \
    \  -----------------------------------\n   Message                  |00000000000000000000000000000001\
    \ |\n                            -----------------------------------\n       \
    \                     | text | 000000000000000000000000 |\n                  \
    \          -----------------------------------\n   16 bits of padding       |\
    \ 1000000000000000 |\n   added by sending IMP     --------------------\n     \
    \                           figure 1.2\nincrease this efficiency to 0.10. For\
    \ a 32 bit text (length of some\ncontrol commands), it would increase the efficiency\
    \ form 0.28 to 0.4.\nFor one packet messages, the efficiency would still be increased\
    \ by 3%.\n2. A remedy.\n      This is a suggested modification of the Host-Imp\
    \ users interface\nwhich has been tentatively sketched on diagrams extracted form\
    \ BBN 1822\nreport.\n2.1 Host to Imp\n      The modification consists of adding\
    \ a counter to 32, enabled\nas the beginning of a message, and incremented at\
    \ each bit passed to the\nIMP; when it reaches 32 it forces a \"word complete\"\
    \ signal asking for a\nnew word in the shift register and resetting the word length\
    \ counter;\nthus the unused bits in the last word of the leader are not transmitted\n\
    and the message starts with the next word (see figure 2.1)\n   0             \
    \                          23\n   ------------------------------------------\n\
    \   |             leader                     |\n   |                   ----------------------\n\
    \   |                   | XXXXXXXXXXXXXXXX   | <- contents of\n   |-----------------------------------------\
    \    sending Host memory\n   |                                        |    (24\
    \ bits)\n   |            Message                     |\n   |                 \
    \                       |\n   Corresponding message in the sending IMP memory\n\
    \   0                             15\n   --------------------------------\n  \
    \ |                              |\n   |                              |\n   |\
    \         leader               |\n   |                              |\n   --------------------------------\n\
    \   |                              |\n   |   message                    |\n  \
    \ |                              |\n                                figure 2.1\n\
    2.2 Imp to Host\n      The modification consists of adding a counter to 32. When\
    \ 32 bits\nhave entered the shift register form the Imp at the beginning of a\
    \ new\nmessage, the counter allows the register to be shifted up to the point\n\
    to be full (which is detected by the word length counter) without\nentering any\
    \ new bit from the Imp.\nThus, the next bit of the message which is the first\
    \ bit of text will be\nentered as the first bit of the next word (see figure 2.2).\n\
    Message in receiving IMP memory  Contents of receiving Host memory (35\nbits)\n\
    0                        15      0                                   35\n------------------------------\
    \   --------------------------------------\n|                            |   |\
    \                                    |\n|       leader               |   |   \
    \  leader                  | 0000 |\n------------------------------   --------------------------------------\n\
    |                            |   |                                    |\n| message\
    \                    |   | message                            |\n|           \
    \                 |   |                                    |\n|              \
    \              |   |                                    |\n                  \
    \             figure 2.2\nThough the accumulated cost of useless marking bits\
    \ sent over the\nnetwork plus computation to reshape received texts makes this\n\
    modification probably whorkwhile being considered, this decision is not\nof our\
    \ competence and we merely wanted to suggest a better solution then\nmarking.\n\
    \            Pages 5 and 6 contain a wire Diagram of a\n                    \"\
    IMP to Host\"\n                \"Host's special Interface\"\n       [ This RFC\
    \ was put into machine readable form for entry ]\n[ into the online RFC archives\
    \ by Gottfried Janik 2/98 ]\n"
