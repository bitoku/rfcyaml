- title: __initial_text__
  contents:
  - ''
- title: 'Requests for Comments: 2730                      Sun Microsystems, Inc.'
  contents:
  - "Requests for Comments: 2730                      Sun Microsystems, Inc.\n   \
    \  Multicast Address Dynamic Client Allocation Protocol (MADCAP)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a protocol, Multicast Address Dynamic Client\n\
    \   Allocation Protocol (MADCAP), that allows hosts to request multicast\n   addresses\
    \ from multicast address allocation servers.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Multicast Address Dynamic Client Allocation Protocol (MADCAP)\
    \ is a\n   protocol that allows hosts to request multicast address allocation\n\
    \   services from multicast address allocation servers. This protocol is\n   part\
    \ of the Multicast Address Allocation Architecture being defined\n   by the IETF\
    \ Multicast Address Allocation Working Group. However, it\n   may be used separately\
    \ from the rest of that architecture as\n   appropriate.\n"
- title: 1.1. Terminology
  contents:
  - "1.1. Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [9].\n   Constants used by this protocol are shown as [NAME-OF-CONSTANT],\
    \ and\n   summarized in Appendix B.\n"
- title: 1.2. Definitions
  contents:
  - "1.2. Definitions\n   This specification uses a number of terms that may not be\
    \ familiar to\n   the reader. This section defines some of these and refers to\
    \ other\n   documents for definitions of others.\n   MADCAP client or client\n\
    \     A host requesting multicast address allocation services via MADCAP.\n  \
    \ MADCAP server or server\n     A host providing multicast address allocation\
    \ services via MADCAP.\n   Multicast\n     IP Multicast, as defined in [11] and\
    \ modified in [12].\n   Multicast Address\n     An IP multicast address or group\
    \ address, as defined in [11] and\n     [13].  An identifier for a group of nodes.\n\
    \   Multicast Scope\n     A range of multicast addresses configured so that traffic\
    \ sent to\n     these addresses is limited to some subset of the internetwork.\
    \ See\n     [3] and [13].\n   Scope ID\n     The lowest numbered address in a\
    \ multicast scope. This definition\n     applies only within this document.\n\
    \   Scope Zone\n     One multicast scope may have several instances, which are\
    \ known as\n     Scope Zones or zones, for short.\n     For instance, an organization\
    \ may have multiple sites. Each site\n     might have its own site-local Scope\
    \ Zone, each of which would be an\n     instance of the site-local Scope. However,\
    \ a given interface on a\n     given host would only ever be in at most one instance\
    \ of a given\n     scope.  Messages sent by a host in a site-local Scope Zones\
    \ to an\n     address in the site-local Scope would be limited to the site-local\n\
    \     Scope Zone containing the host.\n   Zone Name\n     A human readable name\
    \ for a Scope Zone. An ISO 10646 character\n     string with an RFC 1766 [6] language\
    \ tag. One zone may have several\n     zone names, each in a different language.\
    \ For instance, a zone for\n     use within IBM's locations in Switzerland might\
    \ have the names \"IBM\n     Suisse\", \"IBM Switzerland\", \"IBM Schweiz\", and\
    \ \"IBM Svizzera\" with\n     language tags \"fr\", \"en\", \"de\", and \"it\"\
    .\n   Multicast Scope List\n     A list of multicast scope zones.\n     Since\
    \ it can be difficult to determine which multicast scope zones\n     are in effect,\
    \ MADCAP clients can ask MADCAP servers to supply a\n     Multicast Scope List\
    \ listing all of the zones available to the\n     client. For each scope zone,\
    \ the list includes the range of\n     multicast addresses for this scope, a maximum\
    \ TTL or hop count to\n     be used for this scope, and one or more zone names\
    \ for this scope\n     zone.\n     This definition applies only within this document.\n"
- title: 1.3. Motivation and Protocol Requirements
  contents:
  - "1.3. Motivation and Protocol Requirements\n   For multicast applications to be\
    \ deployed everywhere, there is a need\n   to define a protocol that any host\
    \ may use to allocate multicast\n   addresses. Here are the requirements for such\
    \ a protocol.\n   Quick response: The host should be able to allocate a multicast\n\
    \   address and begin to use it promptly.\n   Low network load: Hosts that are\
    \ not allocating or deallocating\n   multicast addresses at the present time should\
    \ not need to send or\n   receive any network traffic.\n   Support for intermittently\
    \ connected or power managed systems: Hosts\n   should be able to be disconnected\
    \ from the network, powered off, or\n   otherwise inaccessible except during the\
    \ brief period during which\n   they are allocating a multicast address.\n   Multicast\
    \ address scopes: The protocol must be able to allocate both\n   the administratively\
    \ scoped and globally scoped multicast addresses.\n   Efficient use of address\
    \ space: The multicast address space is fairly\n   small. The protocol should\
    \ make efficient use of this scarce\n   resource.\n   Authentication: Because\
    \ multicast addresses are scarce, it is\n   important to protect against hoarding\
    \ of these addresses. One way to\n   do this is by authenticating clients. This\
    \ is also a key prerequisite\n   for establishing policies.\n   Policy neutral:\
    \ Allocation policies (such as who can allocate\n   addresses) should not be dictated\
    \ by the protocol.\n   Conferencing support: When allocating an address for use\
    \ in a\n   conferencing environment, members of the conference should be able\
    \ to\n   modify a multicast address lease used for the conference.\n"
- title: 1.4. Relationship with DHCP
  contents:
  - "1.4. Relationship with DHCP\n   MADCAP was originally based on DHCP. There are\
    \ still some\n   similarities and it may be possible to share some code between\
    \ a DHCP\n   implementation and a MADCAP implementation. However, MADCAP is\n\
    \   completely separate from DHCP, with no dependencies between the two\n   and\
    \ many significant differences.\n"
- title: 1.5. Protocol Overview
  contents:
  - "1.5. Protocol Overview\n   MADCAP is built on a client-server model, where hosts\
    \ request address\n   allocation services from address allocation servers. When\
    \ a MADCAP\n   client wishes to request a service, it unicasts or multicasts a\n\
    \   message to one or more MADCAP servers, each of which optionally\n   responds\
    \ with a message unicast to the client.\n   All messages are UDP datagrams. The\
    \ UDP data contains a fixed length\n   header and a variable length options field.\
    \ Options are encoded in a\n   type-length-value format with two octets type and\
    \ value fields.  The\n   fixed fields are version, msgtype (message type), addrfamily\
    \ (address\n   family), and xid (transaction identifier).\n   Retransmission is\
    \ handled by the client. If a client sends a message\n   and does not receive\
    \ a response, it may retransmit its request a few\n   times using an exponential\
    \ backoff. To avoid executing the same\n   client request twice when a retransmitted\
    \ request is received,\n   servers cache responses for a short period of time\
    \ and resend cached\n   responses upon receiving retransmitted requests.\n   Each\
    \ request contains a msgtype, an xid, and a Lease Identifier\n   option.  Clients\
    \ must ensure that this triple is probably unique\n   across all MADCAP messages\
    \ received by a MADCAP server over a period\n   of [XID-REUSE-INTERVAL] (10 minutes).\
    \ This allows the MADCAP server\n   to use this triple as the key in its response\
    \ cache.\n   Messages sent by servers include the xid included in the original\n\
    \   request so that clients can match up responses with requests.\n   The msgtype\
    \ field is a single octet that defines the \"type\" of a\n   MADCAP message. Currently\
    \ defined message types are listed in Table\n   2. They are: DISCOVER, OFFER,\
    \ REQUEST, RENEW, ACK, NAK, RELEASE, and\n   GETINFO.  DISCOVER, REQUEST, RENEW,\
    \ RELEASE, and GETINFO messages are\n   only sent by a client. OFFER, ACK, and\
    \ NAK messages are only sent by\n   a server.\n   The REQUEST, RENEW, and RELEASE\
    \ messages are used to request, renew,\n   or release a lease on one or more multicast\
    \ addresses. A client\n   unicasts one of these messages to a server and the server\
    \ responds\n   with an ACK or a NAK.\n   The GETINFO message is used to request\
    \ information, such as the\n   multicast scope list, or to find MADCAP servers.\
    \ A client may unicast\n   an GETINFO message to a MADCAP server. However, it\
    \ may not know the\n   IP address of any MADCAP server. In that case, it will\
    \ multicast an\n   GETINFO message to a MADCAP Server Multicast Address and all\
    \ servers\n   that wish to respond will send a unicast ACK or NAK back to the\n\
    \   client.\n   Each multicast scope has an associated MADCAP Server Multicast\n\
    \   Address.  This address has been reserved by the IANA as the address\n   with\
    \ a relative offset of -1 from the last address of a multicast\n   scope. MADCAP\
    \ clients use this address to find MADCAP servers.\n   The DISCOVER message is\
    \ a message used to discover MADCAP servers\n   that can probably satisfy a REQUEST.\
    \ DISCOVER messages are always\n   multicast.  Servers that can probably satisfy\
    \ a REQUEST corresponding\n   to the parameters supplied in the DISCOVER message\
    \ temporarily\n   reserve the addresses needed and send a unicast OFFER back to\
    \ the\n   client. The client selects a server with which to continue and sends\n\
    \   a multicast REQUEST including the server's Server Identifier to the\n   same\
    \ multicast address used for the DISCOVER. The chosen server\n   responds with\
    \ an ACK or NAK and the other servers stop reserving the\n   addresses they were\
    \ temporarily holding.\n   For detailed descriptions of typical protocol exchanges,\
    \ consult\n   Appendix A.\n   MADCAP is a mechanism rather than a policy. MADCAP\
    \ allows local\n   system administrators to exercise control over configuration\n\
    \   parameters where desired. For example, MADCAP servers may be\n   configured\
    \ to limit the number of multicast addresses allocated to a\n   single client.\
    \ Properly enforcing such a limit requires cryptographic\n   security, as described\
    \ in the Security Consideration section.\n   MADCAP requests from a single host\
    \ may be sent on behalf of different\n   applications with different needs and\
    \ requirements. MADCAP servers\n   MUST NOT assume that because one request from\
    \ a MADCAP client\n   supports a particular optional feature (like Retry After),\
    \ future\n   requests from that client will also support that optional feature.\n"
- title: 2. Protocol Description
  contents:
  - "2. Protocol Description\n   The MADCAP protocol is a client-server protocol.\
    \ In general, the\n   client unicasts or multicasts a message to one or more servers,\
    \ which\n   optionally respond with messages unicast to the client.\n   A reserved\
    \ port number dedicated for MADCAP is used on the server\n   (port number 2535,\
    \ as assigned by IANA). Any port number may be used\n   on client machines. When\
    \ a MADCAP server sends a message to a MADCAP\n   client, it MUST use a destination\
    \ port number that matches the source\n   port number provided by the client in\
    \ the message that caused the\n   server to send its message.\n   The next few\
    \ sections describe the MADCAP message format and message\n   types. A full list\
    \ of MADCAP options is provided in section 3.\n"
- title: 2.1. Message Format
  contents:
  - "2.1. Message Format\n   Figure 1 gives the format of a MADCAP message and Table\
    \ 1 describes\n   each of the fields in the MADCAP message. The numbers in parentheses\n\
    \   indicate the size of each field in octets. The names for the fields\n   given\
    \ in the figure will be used throughout this document to refer to\n   the fields\
    \ in MADCAP messages.\n   All multi-octet quantities are in network byte-order.\n\
    \   Any message whose UDP data is too short to hold this format (at least\n  \
    \ 12 bytes) MUST be ignored.\n                +-+-+-+-+-+-+-+-+\n            \
    \    |  version (1)  |\n                +---------------+\n                | \
    \ msgtype (1)  |\n                +---------------+\n                |  addrfamily\
    \   |\n                |     (2)       |\n                +---------------+\n\
    \                |               |\n                |    xid (4)    |\n      \
    \          |               |\n                |               |\n            \
    \    +---------------+\n                |               |\n                | \
    \  options     |\n                |  (variable)   |\n                |      ...\
    \      |\n                +---------------+\n        Figure 1:  Format of a MADCAP\
    \ message\n  FIELD      OCTETS       DESCRIPTION\n  -----      ------       -----------\n\
    \  version       1  Protocol version number (zero for this specification)\n  msgtype\
    \       1  Message type (DISCOVER, GETINFO, etc.)\n  addrfamily    2  Address\
    \ family (IPv4, IPv6, etc.)\n  xid           4  Transaction ID\n  options    \
    \ var  Options field\n          Table 1:  Description of fields in a MADCAP message\n"
- title: 2.1.1. The version field
  contents:
  - "2.1.1. The version field\n   The version field must always be zero for this version\
    \ of the\n   protocol.  Any messages that include other values in this field MUST\n\
    \   be ignored.\n"
- title: 2.1.2. The msgtype field
  contents:
  - "2.1.2. The msgtype field\n   The msgtype field defines the \"type\" of the MADCAP\
    \ message.\n   For more information about this field, see section 2.2.\n"
- title: 2.1.3. The addrfamily field
  contents:
  - "2.1.3. The addrfamily field\n   The addrfamily field defines the default address\
    \ family (such as IPv4\n   or IPv6) for this MADCAP message, using the address\
    \ family numbers\n   defined in by the IANA (including those defined in [10]).\
    \ Unless\n   otherwise specified, all addresses included in the message will be\n\
    \   from this family.\n"
- title: 2.1.4. The xid field
  contents:
  - "2.1.4. The xid field\n   The xid field is a transaction identifier. This number\
    \ MUST be chosen\n   by the client so that the combination of xid, msgtype, and\
    \ Lease\n   Identifier is unique across all MADCAP messages received by a MADCAP\n\
    \   server over a period of [XID-REUSE-INTERVAL] (10 minutes).\n   The xid field\
    \ is used by the client and server to associate messages\n   and responses between\
    \ a client and a server. Before a client sends a\n   message, it chooses a number\
    \ to use as an xid. The technique used to\n   choose an xid is implementation-dependent,\
    \ but whatever technique is\n   used MUST make it unlikely that the same combination\
    \ of xid, msgtype,\n   and Lease Identifier will be used for two different messages\
    \ within\n   [XID-REUSE-INTERVAL] (even across multiple clients which do not\n\
    \   communicate among themselves).  This allows enough time for the\n   message\
    \ to be dropped from all server response caches (as described\n   in the next\
    \ few paragraphs) and for any network delays to be\n   accomodated.\n   The RECOMMENDED\
    \ technique for choosing an xid is to choose a random\n   four octet number as\
    \ the first xid in a session and increment this\n   value each time a new xid\
    \ is needed.  The random number chosen need\n   not be cryptographically random.\
    \ The random number may be chosen via\n   any suitable technique, such as the\
    \ one described in section A.6 of\n   RFC 1889 [14].\n   When a server responds\
    \ to a client message, it MUST use the same xid\n   value in the response that\
    \ the client used in the request. This\n   allows the client to associate responses\
    \ with the message that they\n   are responding to.\n   When retransmitting messages\
    \ (as described in section 2.3), the\n   client MUST retransmit them without changing\
    \ them, thereby using the\n   same xid and and Lease Identifier.\n   If a server\
    \ receives a message with the same xid, msgtype, and Lease\n   Identifier as one\
    \ received within [RESPONSE-CACHE-INTERVAL], it MUST\n   treat this message as\
    \ a retransmission of the previously received one\n   and retransmit the response,\
    \ if any. After [RESPONSE-CACHE-INTERVAL],\n   the server may forget about the\
    \ previously received message and treat\n   any retransmissions of this message\
    \ as if they were new messages. Of\n   course, a server need not cache a message\
    \ if it ends up ignoring that\n   message. However, performance gains may be achieved\
    \ by doing so.\n   This avoids retransmissions causing multiple allocations, since\n\
    \   requests are not idempotent.  An appropriate value for [RESPONSE-\n   CACHE-INTERVAL]\
    \ would be sixty seconds, but it may have any value\n   from zero seconds to 300\
    \ seconds (five minutes) and may be adjusted\n   dynamically according to resource\
    \ constraints on the server.\n   However, using a value less than sixty seconds\
    \ is NOT RECOMMENDED\n   because this is the normal client retransmission period.\n"
- title: 2.1.5. The options field
  contents:
  - "2.1.5. The options field\n   The options field consists of a list of tagged parameters\
    \ that are\n   called \"options\". All options consist of a two octet option code\
    \ and\n   a two octet option length, followed by the number of octets specified\n\
    \   by the option length. In the case of some options, the length field\n   is\
    \ a constant but must still be specified.\n   The option field MUST contain a\
    \ sequence of options with the last one\n   being the End option (option code\
    \ 0). Any message whose options field\n   does not conform to this syntax MUST\
    \ be ignored.\n   Any MADCAP client or server sending a MADCAP message MAY include\
    \ any\n   of the options listed in section 3, subject to the restrictions in\n\
    \   Table 5 and elsewhere in this document. They MAY also include other\n   MADCAP\
    \ options that are defined in the future. A MADCAP client or\n   server MUST NOT\
    \ include more than one option with the same option\n   type in one MADCAP message.\n\
    \   All MADCAP clients and servers MUST recognize all options listed in\n   this\
    \ document and behave in accordance with this document when\n   receiving and\
    \ processing any of these options. Any unrecognized\n   options MUST be ignored\
    \ and the rest of the message processed as if\n   the unknown options were not\
    \ present. If a MADCAP server receives a\n   message that does not conform to\
    \ the requirements of this document\n   (for instance, not including all required\
    \ options), an Invalid\n   Request error MUST be generated and processed in the\
    \ manner described\n   in section 2.6. If a MADCAP client receives a message that\
    \ does not\n   conform to the requirements of this document, it MUST ignore the\n\
    \   message.\n   The order of options within a message has no significance and\
    \ any\n   order MUST be supported in an equivalent manner, with the exception\n\
    \   that the End option must occur once per message, as the last option\n   in\
    \ the option field.\n   New MADCAP option codes may only be defined by IETF Consensus,\
    \ as\n   described in section 5.\n"
- title: 2.2. Message Types
  contents:
  - "2.2. Message Types\n   The msgtype field defines the \"type\" of a MADCAP message.\
    \ Legal\n   values for this field are:\n           Value   Message Type\n    \
    \       -----   ------------\n             1     DISCOVER\n             2    \
    \ OFFER\n             3     REQUEST\n             4     RENEW\n             5\
    \     ACK\n             6     NAK\n             7     RELEASE\n             8\
    \     GETINFO\n      Table 2:  MADCAP message types\n   Throughout this document,\
    \ MADCAP messages will be referred to by the\n   type of the message; e.g., a\
    \ MADCAP message with a message type of 8\n   will be referred to as an GETINFO\
    \ message.\n   Here are descriptions of the MADCAP message types.  Table 5, which\n\
    \   appears at the beginning of section 3, summarizes which options are\n   allowed\
    \ with each message type.\n   MADCAP clients and servers MUST handle all MADCAP\
    \ message types\n   defined in this document in a manner consistent with this\
    \ document.\n   If a MADCAP server receives a message whose message type it does\
    \ not\n   recognize, an Invalid Request error MUST be generated and processed\n\
    \   in the manner described in section 2.6. If a MADCAP client receives a\n  \
    \ message whose message type it does not recognize, it MUST ignore the\n   message.\n\
    \   Note, however, that under some circumstances this document requires\n   or\
    \ suggests that clients or servers ignore messages with certain\n   message types\
    \ even though they may be recognized. For instance,\n   clients that do not send\
    \ DISCOVER messages SHOULD ignore OFFER\n   messages.  Also, secure servers SHOULD\
    \ ignore DISCOVER messages and\n   all servers SHOULD ignore DISCOVER messages\
    \ that they cannot satisfy.\n   New MADCAP message types may only be defined by\
    \ IETF Consensus, as\n   described in section 5.\n"
- title: 2.2.1. GETINFO
  contents:
  - "2.2.1. GETINFO\n   The GETINFO message is used by a MADCAP client that wants\
    \ to acquire\n   configuration parameters, especially a multicast scope list.\
    \  This\n   message also allows a client to determine which servers are likely\
    \ to\n   be able to handle future requests.\n   The MADCAP client sends out an\
    \ GETINFO message. The message may be\n   unicast to a particular MADCAP server\
    \ or multicast to a MADCAP Server\n   Multicast Address. For more details about\
    \ the MADCAP Server Multicast\n   Address, see section 2.10.\n   If a server receives\
    \ an GETINFO message and it can process the\n   request successfully, it MUST\
    \ unicast an ACK message to the client.\n   All GETINFO messages MUST include\
    \ an Option Request List option. The\n   server SHOULD try to include the specified\
    \ options in its response,\n   but is not required to do so (especially if it\
    \ does not recognize\n   them).\n   If a server receives an GETINFO message and\
    \ it does not process the\n   request successfully, it MUST generate and process\
    \ an error in the\n   manner described in section 2.6.\n   If a client sends an\
    \ GETINFO message and does not receive any ACK\n   messages in response, it SHOULD\
    \ resend its GETINFO message, as\n   described in section 2.3.\n   When a MADCAP\
    \ client sends an GETINFO message, it MAY include the\n   Requested Language option,\
    \ which specifies which language the client\n   would prefer for the zone names\
    \ in the Multicast Scope List. The\n   proper way to handle this tag with respect\
    \ to zone names is discussed\n   in the definition of the Multicast Scope List\
    \ option.\n"
- title: 2.2.2. DISCOVER
  contents:
  - "2.2.2. DISCOVER\n   The DISCOVER message is a multicast message sent by a MADCAP\
    \ client\n   that wants to discover MADCAP servers that can probably satisfy a\n\
    \   REQUEST.\n   MADCAP clients are not required to use the DISCOVER message.\
    \  They\n   MAY employ other methods to find MADCAP servers, such as sending a\n\
    \   multicast GETINFO message, caching an IP address that worked in the\n   past\
    \ or being configured with an IP address. Using the DISCOVER\n   message has the\
    \ particular advantage that it allows clients to\n   receive responses from all\
    \ servers that can satisfy the request.\n   The MADCAP client begins by sending\
    \ a multicast DISCOVER message to a\n   MADCAP Server Multicast Address. Any servers\
    \ that wish to assist the\n   client respond by sending a unicast OFFER message\
    \ to the client. If a\n   server can only process the request with a shorter lease\
    \ time or\n   later start time than the client requested, it SHOULD send an OFFER\n\
    \   message with the lease time or start time that it can offer.\n   However,\
    \ it MUST NOT offer a lease time shorter than the minimum\n   lease time specified\
    \ by the client or a start time later than the\n   maximum start time specified\
    \ by the client.\n   For more details about the MADCAP Server Multicast Address,\
    \ see\n   section 2.10.\n   If a client sends a DISCOVER message and does not\
    \ receive any OFFER\n   messages in response, the client SHOULD retransmit its\
    \ DISCOVER\n   message, as described in section 2.3.\n   If a client sends a DISCOVER\
    \ message and receives one or more OFFER\n   messages in response, it SHOULD select\
    \ the server it wants to use (if\n   any) and send a multicast REQUEST message\
    \ identifying that server\n   within [DISCOVER-DELAY] after receiving the first\
    \ OFFER message.  See\n   section 2.2.4 for more information about the REQUEST\
    \ message.\n   The mechanism used by the client in selecting the server it wants\
    \ to\n   use is implementation dependent.  The client MAY choose the first\n \
    \  acceptable response or it MAY wait some period of time (no more than\n   [DISCOVER-DELAY])\
    \ and choose the best response received in that\n   period of time (if the first\
    \ response has a smaller lease time than\n   requested, for instance).\n   The\
    \ value of [DISCOVER-DELAY] is also implementation dependent, but\n   the RECOMMENDED\
    \ value is the current retransmit timer, as specified\n   in section 2.3. Waiting\
    \ too long (approaching [OFFER-HOLD]) may cause\n   servers to drop the addresses\
    \ they have reserved.\n   When a MADCAP client sends a DISCOVER message, it MAY\
    \ include the\n   Lease Time, Minimum Lease Time, Start Time, Maximum Start Time,\n\
    \   Number of Addresses Requested, and List of Address Ranges options,\n   describing\
    \ the addresses it wants to receive. However, it need not\n   include any of these\
    \ options. If one of these options is not\n   included, the server will provide\
    \ the appropriate default (maximum\n   available for Lease Time, no minimum for\
    \ Minimum Lease Time, as soon\n   as possible for Start Time, no maximum for Maximum\
    \ Start Time, one\n   for Number of Addresses Requested, and any addresses available\
    \ for\n   List of Address Ranges).  The Multicast Scope option MUST be included\n\
    \   in the DISCOVER message so that the server knows what scope should be\n  \
    \ used. The Current Time option MUST be included if the Start Time or\n   Maximum\
    \ Start Time options are included. The Lease Identifier option\n   MUST always\
    \ be included.\n"
- title: 2.2.3. OFFER
  contents:
  - "2.2.3. OFFER\n   The OFFER message is a unicast message sent by a MADCAP server\
    \ in\n   response to a DISCOVER message that it can probably satisfy.\n   A MADCAP\
    \ server is never required to send an OFFER message in\n   response to a DISCOVER\
    \ message. For instance, it may not be able to\n   satisfy the client's request\
    \ or it may have been configured to\n   respond only to certain types of DISCOVER\
    \ messages or not to respond\n   to DISCOVER messages at all.\n   If a MADCAP\
    \ server decides to send an OFFER message, it MUST include\n   the Lease Time\
    \ and Multicast Scope options, describing the addresses\n   it is willing to provide.\
    \ However, it need not include the List of\n   Address Ranges option. If the List\
    \ of Address Ranges Allocated option\n   is not included, it is assumed that the\
    \ server is willing to provide\n   the number of addresses that the client requested.\
    \ If the Start Time\n   option is not included, it is assumed that the server\
    \ is willing to\n   provide the start time requested by the client (if any). The\
    \ Current\n   Time option MUST be included if the Start Time option is included.\n\
    \   If a server can process the request with a shorter lease time or\n   later\
    \ start time than the client requested, it SHOULD send an OFFER\n   message with\
    \ the lease time or start time that it can offer.\n   However, it MUST NOT offer\
    \ a lease time shorter than the minimum\n   lease time specified by the client\
    \ or a start time later than the\n   maximum start time specified by the client.\n\
    \   If the server sends an OFFER message, it SHOULD attempt to hold\n   enough\
    \ addresses to complete the transaction. If it receives a\n   multicast REQUEST\
    \ message with the same Lease Identifier option as\n   the DISCOVER message for\
    \ which it is holding these addresses and a\n   Server Identifier option that\
    \ does not match its own, it SHOULD stop\n   holding the addresses.  The server\
    \ SHOULD also stop holding the\n   addresses after an appropriate delay [OFFER-HOLD]\
    \ if the transaction\n   is not completed. The value of this delay is implementation-specific,\n\
    \   but a value of at least 60 seconds is RECOMMENDED.\n   As with all messages\
    \ sent by the server, the xid field MUST match the\n   xid field included in the\
    \ client request to which this message is\n   responding. The Lease Identifier\
    \ option MUST be included, with the\n   value matching the one included in the\
    \ client request. The Server\n   Identifier option MUST be included, with the\
    \ value being the server's\n   IP address. And the packet MUST NOT be retransmitted.\n"
- title: 2.2.4. REQUEST
  contents:
  - "2.2.4. REQUEST\n   The REQUEST message is used by a MADCAP client that wants\
    \ to allocate\n   one or more multicast addresses. It is not used for renewing\
    \ an\n   existing lease. The RENEW message is used for that.\n   If a REQUEST\
    \ message is completing a transaction initiated by a\n   DISCOVER message, the\
    \ following procedure MUST be followed so that\n   all MADCAP servers know which\
    \ server was selected. The client MUST\n   multicast a REQUEST message to the\
    \ same MADCAP Server Multicast\n   Address that the DISCOVER message was sent\
    \ to. The same Lease\n   Identifier used in the DISCOVER message MUST be used\
    \ in the REQUEST\n   message.  Also, the Server Identifier option MUST be included,\
    \ using\n   the Server Identifier of the server selected.\n   If a REQUEST message\
    \ is not completing a transaction initiated by a\n   DISCOVER message, the REQUEST\
    \ message MUST be unicast to the MADCAP\n   server that the client wants to use.\
    \ In this case, the Server\n   Identifier option MAY be included, but need not\
    \ be.\n   If the selected server can process the request successfully, it\n  \
    \ SHOULD unicast an ACK message to the client. Otherwise, it SHOULD\n   generate\
    \ and process an error in the manner described in section 2.6.\n   If a server\
    \ can process the request with a shorter lease time or\n   later start time than\
    \ the client requested, it SHOULD send an ACK\n   message with the lease time\
    \ or start time that it can offer. However,\n   it MUST NOT offer a lease time\
    \ shorter than the minimum lease time\n   specified by the client or a start time\
    \ later than the maximum start\n   time specified by the client.\n   When a MADCAP\
    \ client sends a REQUEST message, it MAY include the\n   Lease Time, Minimum Lease\
    \ Time, Start Time, Maximum Start Time,\n   Number of Addresses Requested, and\
    \ List of Address Ranges options,\n   describing the addresses it wants to receive.\
    \ However, it need not\n   include any of these options. If one of these options\
    \ is not\n   included, the server will provide the appropriate default (maximum\n\
    \   available for Lease Time, no minimum for Minimum Lease Time, as soon\n   as\
    \ possible for Start Time, no maximum for Maximum Start Time, one\n   for Number\
    \ of Addresses Requested, and any addresses available for\n   List of Address\
    \ Ranges). The Multicast Scope option MUST be included\n   in the REQUEST message\
    \ so that the server knows what scope should be\n   used. The Current Time option\
    \ MUST be included if the Start Time or\n   Maximum Start Time options are included.\n\
    \   If a client sends a REQUEST message and does not receive any ACK or\n   NAK\
    \ messages in response, the client SHOULD resend its REQUEST\n   message, as described\
    \ in section 2.3.\n   If the server responds with a NAK or fails to respond within\
    \ a\n   reasonable (implementation-dependent) delay [NO-RESPONSE-DELAY], the\n\
    \   client MAY try to find another server by sending a DISCOVER message\n   with\
    \ another xid or sending a REQUEST message with another xid to\n   another server.\
    \ The RECOMMENDED value for [NO-RESPONSE-DELAY] is 60\n   seconds.\n"
- title: 2.2.5. ACK
  contents:
  - "2.2.5. ACK\n   The ACK message is used by a MADCAP server to respond affirmatively\n\
    \   to an GETINFO, REQUEST, or RELEASE message. The server unicasts the\n   ACK\
    \ message to the client from which it received the message to which\n   it is\
    \ responding.\n   The set of options included with an ACK message differs, depending\
    \ on\n   what sort of message it is responding to.\n   If the ACK message is responding\
    \ to an GETINFO message, it SHOULD\n   include any options requested by the client\
    \ using the Option Request\n   List option.\n   If the ACK message is responding\
    \ to a REQUEST message, it MUST\n   include Lease Time, Multicast Scope, and List\
    \ of Address Ranges\n   options.  It MAY include a Start Time option. If a Start\
    \ Time option\n   is included, a Current Time option MUST also be included. If\
    \ no Start\n   Time option is included, the lease is assumed to start immediately.\n\
    \   If the ACK message is responding to a RENEW message, it MUST include\n   Lease\
    \ Time, Multicast Scope, and List of Address Ranges options.  It\n   MAY include\
    \ a Start Time option. If a Start Time option is included,\n   a Current Time\
    \ option MUST also be included. If no Start Time option\n   is included, the lease\
    \ is assumed to start immediately.\n   If the ACK message is responding to a RELEASE\
    \ message, it MUST only\n   include Server Identifier and Lease Identifier options.\n\
    \   As with all messages sent by the server, the xid field MUST match the\n  \
    \ xid field included in the client request to which this message is\n   responding.\
    \ The Lease Identifier option MUST be included, with the\n   value matching the\
    \ one included in the client request. The Server\n   Identifier option MUST be\
    \ included, with the value being the server's\n   IP address. And the packet MUST\
    \ NOT be retransmitted.\n"
- title: 2.2.6. NAK
  contents:
  - "2.2.6. NAK\n   The NAK message is used by a MADCAP server to respond negatively\
    \ to a\n   message. The server unicasts the NAK message to the client from which\n\
    \   it received the message to which it is responding.\n   As with all messages\
    \ sent by the server, the xid field MUST match the\n   xid field included in the\
    \ client request to which this message is\n   responding. The Lease Identifier\
    \ option MUST be included, with the\n   value matching the one included in the\
    \ client request. The Server\n   Identifier option MUST be included, with the\
    \ value being the server's\n   IP address. The Error option MUST be included with\
    \ an error code\n   indicating what went wrong. And the packet MUST NOT be retransmitted.\n"
- title: 2.2.7. RENEW
  contents:
  - "2.2.7. RENEW\n   The RENEW message is used by a MADCAP client that wants to renew\
    \ a\n   multicast address lease, changing the lease time or start time.\n   The\
    \ client unicasts the RENEW message to a MADCAP server. If the\n   server can\
    \ process the request successfully, it SHOULD unicast an ACK\n   message to the\
    \ client. Otherwise, it MUST generate and process an\n   error in the manner described\
    \ in section 2.6.\n   The lease to be renewed is whichever one was allocated with\
    \ a Lease\n   Identifier option matching the one provided in the RENEW message.\n\
    \   When a MADCAP client sends a RENEW message, it MAY include the Lease\n   Time,\
    \ Minimum Lease Time, Start Time, and Maximum Start Time options,\n   describing\
    \ the new lease it wants to receive. However, it need not\n   include any of these\
    \ options. If one of these options is not\n   included, the server will provide\
    \ the appropriate default (maximum\n   available for Lease Time, no minimum for\
    \ Minimum Lease Time, as soon\n   as possible for Start Time, and no maximum for\
    \ Maximum Start Time).\n   The Current Time option MUST be included if the Start\
    \ Time or Maximum\n   Start Time options are included.\n   If a client sends a\
    \ RENEW message and does not receive any ACK or NAK\n   messages in response,\
    \ the client SHOULD resend its RENEW message, as\n   described in section 2.3.\n\
    \   If the server responds with a NAK or fails to respond within a\n   reasonable\
    \ (implementation-dependent) delay [NO-RESPONSE-DELAY], the\n   client MAY send\
    \ a RENEW message with another xid to another server,\n   provided that the Server\
    \ Mobility feature was used in the original\n   REQUEST message and that this\
    \ feature is required for the subsequent\n   RENEW message sent to another server.\
    \ For more information about the\n   Server Mobility feature, see section 2.13.1.\
    \ The RECOMMENDED value\n   for [NO-RESPONSE-DELAY] is 60 seconds.\n"
- title: 2.2.8. RELEASE
  contents:
  - "2.2.8. RELEASE\n   The RELEASE message is used by a MADCAP client that wants\
    \ to\n   deallocate one or more multicast addresses before their lease\n   expires.\n\
    \   The client unicasts the RELEASE message to the MADCAP server from\n   which\
    \ it allocated the addresses. If the selected server can process\n   the request\
    \ successfully, it MUST unicast an ACK message to the\n   client. Otherwise, it\
    \ MUST generate and process an error in the\n   manner described in section 2.6.\n\
    \   The lease to be released is whichever one was allocated with a Lease\n   Identifier\
    \ option matching the one provided in the RELEASE message.\n   It is not possible\
    \ to release only part of the addresses in a single\n   lease.\n   If a client\
    \ sends a RELEASE message and does not receive any ACK or\n   NAK messages in\
    \ response, the client SHOULD resend its RELEASE\n   message, as described in\
    \ section 2.3.\n   If the server responds with a NAK or fails to respond within\
    \ a\n   reasonable (implementation-dependent) delay [NO-RESPONSE-DELAY], the\n\
    \   client MAY send a RELEASE message with another xid to another server,\n  \
    \ provided that the Server Mobility feature was used in the original\n   REQUEST\
    \ message and that this feature is required for the subsequent\n   RELEASE message\
    \ sent to another server. For more information about\n   the Server Mobility feature,\
    \ see section 2.13.1. The RECOMMENDED\n   value for [NO-RESPONSE-DELAY] is 60\
    \ seconds.\n"
- title: 2.3. Retransmission
  contents:
  - "2.3. Retransmission\n   MADCAP clients are responsible for all message retransmission.\
    \ The\n   client MUST adopt a retransmission strategy that incorporates an\n \
    \  exponential backoff algorithm to determine the delay between\n   retransmissions.\
    \ The delay between retransmissions SHOULD be chosen\n   to allow sufficient time\
    \ for replies from the server to be delivered\n   based on the characteristics\
    \ of the internetwork between the client\n   and the server.\n   The RECOMMENDED\
    \ algorithm is to use a 4 second delay before the first\n   retransmission and\
    \ to double this delay for each successive\n   retransmission, with a maximum\
    \ delay of 16 seconds and a maximum of\n   three retransmissions. If an initial\
    \ transmission was sent at time\n   (in seconds) t and no responses were received,\
    \ subsequent\n   transmissions would be at t+4, t+12, and t+28. If no response\
    \ has\n   been received by t+60, the client would stop retransmitting and take\n\
    \   another course of action (such as logging an error or sending a\n   message\
    \ to another address.\n   The client MAY provide an indication of retransmission\
    \ attempts to\n   the user as an indication of the progress of the process. The\
    \ client\n   MAY halt retransmission at any point.\n"
- title: 2.4. The Lease Identifier
  contents:
  - "2.4. The Lease Identifier\n   The Lease Identifier option is included in each\
    \ MADCAP message.  Its\n   value is used to identify a lease and MUST be unique\
    \ across all\n   leases requested by all clients in a multicast address allocation\n\
    \   domain.\n   The first octet of the Lease Identifier is the Lease Identifier\
    \ type.\n   Table 3 lists the Lease Identifier types defined at this time and\n\
    \   sections 2.4.1 and 2.4.2 describe these Lease Identifier types.\n   New MADCAP\
    \ Lease Identifier types may only be defined by IETF\n   Consensus, as described\
    \ in section 5.\n           Lease Identifier Type   Name\n           ---------------------\
    \   ----\n                     0             Random Lease Identifier\n       \
    \              1             Address-Specific Lease Identifier\n      Table 3:\
    \  MADCAP Lease Identifier Types\n   The MADCAP server does not need to parse\
    \ the Lease Identifier. It\n   SHOULD use the Lease Identifier only as an opaque\
    \ identifier, which\n   must be unique for each lease. The purpose of defining\
    \ different\n   Lease Identifier types is to allow MADCAP clients that already\
    \ have a\n   globally unique address to avoid the possibility of Lease Identifier\n\
    \   collisions by using this address together with a client-specific\n   identifier.\
    \ MADCAP clients that do not have a globally unique address\n   SHOULD use Lease\
    \ Identifier type 0.\n   In addition to associating client and server messages\
    \ (along with the\n   msgtype and xid fields, as described in the next section),\
    \ the Lease\n   Identifier is used to determine which lease a RENEW or RELEASE\n\
    \   request refers to. MADCAP servers SHOULD match the Lease Identifier\n   included\
    \ in a RENEW or RELEASE message with the Lease Identifier used\n   in an initial\
    \ REQUEST message. If the Lease Identifier does not\n   match, a MADCAP server\
    \ MUST generate and process a Lease Identifier\n   Not Recognized error in the\
    \ manner described in section 2.6.\n   For conferencing applications, it may be\
    \ desirable to allow\n   conference participants to modify a lease used for the\
    \ conference.\n   The Shared Lease Identifier feature code is used to support\
    \ this\n   requirement.  If this feature code was requested by the client and\n\
    \   implemented by the server when the lease was allocated, the server\n   SHOULD\
    \ disable any authentication requirements and allow any client\n   that knows\
    \ the Lease Identifier to modify the lease.\n   As described in the Security Considerations\
    \ section, MADCAP security\n   is not terribly useful without admission control\
    \ in the multicast\n   routing infrastructure. However, if MADCAP security is\
    \ desired when\n   using the Shared Lease Identifier feature, the confidentiality\
    \ of the\n   Lease Identifier MUST be maintained by encrypting all messages that\n\
    \   contain it. A Lease Identifier that includes a long cryptographically\n  \
    \ random number (at least eight octets in length) MUST be used in this\n   circumstance\
    \ so that it is not easy to guess the Lease Identifier.\n"
- title: 2.4.1. Random Lease Identifier
  contents:
  - "2.4.1. Random Lease Identifier\n   The first octet of a Random Lease Identifier\
    \ is the Lease Identifier\n   type (0 to indicate Random Lease Identifier). After\
    \ this come a\n   sequence of octets, which SHOULD represent a long random number\
    \ (at\n   least 16 octets) from a decent random number generator.\n   A Random\
    \ Lease Identifier does not include any indication of its\n   length.  It is assumed\
    \ that this may be determined by external means,\n   such as a length field preceding\
    \ the Lease Identifier.\n    Lease ID\n      Type    Random Number\n   +---------+-------------...\n\
    \   |    0    |\n   +---------+-------------...\n"
- title: 2.4.2. Address-Specific Lease Identifier
  contents:
  - "2.4.2. Address-Specific Lease Identifier\n   The first octet of an Address-Specific\
    \ Lease Identifier is the Lease\n   Identifier type (1 to indicate Address-Specific\
    \ Lease Identifier).\n   After this comes a two octet IANA-defined address family\
    \ number\n   (including those defined in [10]), an address from the specified\n\
    \   address family, and a client-specific identifier (such as a sequence\n   number\
    \ or the current time).\n   An Address-Specific Lease Identifier does not include\
    \ any indication\n   of its length. It is assumed that this may be determined\
    \ by external\n   means, such as a length field preceding the Lease Identifier.\n\
    \    Lease ID     Address Family      Address    Client-specific\n      Type \
    \          Number                       Identifier\n   +---------+---------+---------+-----...-----+-----...-----+\n\
    \   |    1    |     addrfamily    |   address   | cli-spec id |\n   +---------+---------+---------+-----...-----+-----...-----+\n"
- title: 2.5. Associating Client and Server Messages
  contents:
  - "2.5. Associating Client and Server Messages\n   Messages between clients and\
    \ servers are associated with one another\n   using the Lease Identifier and the\
    \ xid field. As described in section\n   2.1.4, the client MUST choose an xid\
    \ so that it is unlikely that the\n   same combination of xid, msgtype, and Lease\
    \ Identifier will be used\n   for two different messages within [XID-REUSE-INTERVAL]\
    \ (even across\n   multiple clients which do not communicate among themselves).\
    \  The\n   Lease Identifier option, msgtype, and xid field MUST be included in\n\
    \   each message sent by the client or the server.\n   The client MUST check the\
    \ Lease Identifier option and xid field in\n   each incoming message to ensure\
    \ that they match the Lease Identifier\n   and xid for an outstanding transaction.\
    \ If not, the message MUST be\n   ignored. The server MUST check the Lease Identifier\
    \ option and xid\n   field in each incoming message to establish the proper context\
    \ for\n   the message. If a server cannot process a message because it is\n  \
    \ invalid for its context, the server MUST generate and process an\n   Invalid\
    \ Request error, as described in section 2.6.  A transaction\n   can be an attempt\
    \ to allocate a multicast address (consisting of\n   DISCOVER, OFFER, REQUEST,\
    \ ACK, and NAK messages), an attempt to renew\n   a lease (consisting of RENEW,\
    \ ACK, and NAK messages), an attempt to\n   release a previously allocated multicast\
    \ address (consisting of\n   RELEASE, ACK, and NAK messages), or an attempt to\
    \ acquire\n   configuration parameters (consisting of GETINFO, ACK, and NAK\n\
    \   messages).\n"
- title: 2.6. Processing Errors
  contents:
  - "2.6. Processing Errors\n   If a MADCAP server encounters an error while processing\
    \ a message,\n   there are two different ways to process this error. If it is\
    \ clear\n   that the message is not a NAK, the server SHOULD respond with a NAK\n\
    \   containing the appropriate Error option. However, the server MAY\n   decide\
    \ to completely ignore chronic offenders. If the message is a\n   NAK or it is\
    \ not clear whether the message is a NAK (for instance,\n   the message is garbled\
    \ or has an incorrect version number), the\n   server SHOULD ignore the message.\
    \ This avoids NAK loops.\n   If a MADCAP client encounters an error while processing\
    \ a message, it\n   MUST ignore the message.\n"
- title: 2.7. Multicast Scopes
  contents:
  - "2.7. Multicast Scopes\n   RFC 2365 [3] provides for dividing the multicast address\
    \ space into a\n   number of administrative scopes. Routers should be configured\
    \ so that\n   each scope corresponds to a particular partition of the network\
    \ into\n   disjoint regions. Messages sent to a multicast address that falls\n\
    \   within a certain administrative scope should only be delivered to\n   hosts\
    \ that have joined that multicast group *and* fall within the\n   same region\
    \ as the sender. For instance, packets sent to an address\n   in the organization-local\
    \ scope should only be delivered to hosts\n   that have joined that group and\
    \ fall within the same organization as\n   the sender.\n   Different sets of scopes\
    \ may be in effect at different places in the\n   network and at different times.\
    \ Before attempting to allocate an\n   address from an administrative scope (other\
    \ than global or link-level\n   scope, which are always in effect), a MADCAP client\
    \ SHOULD determine\n   that the scope is in effect at its location at this time.\
    \  Several\n   techniques that a MADCAP client may use to determine the set of\n\
    \   administrative scopes in effect (the scope list) are: manual\n   configuration\
    \ or configuration via MADCAP (using the Multicast Scope\n   List option).\n \
    \  If a MADCAP client is unable to determine its scope list using one of\n   these\
    \ techniques, it MAY temporarily assume a scope list consisting\n   of a single\
    \ scope. If it is using IPv4, it SHOULD use IPv4 Local\n   Scope (239.255.0.0/16),\
    \ with a maximum TTL of 16.  If it is using\n   IPv6, it SHOULD use SCOP 3, with\
    \ a maximum hop count of 16. Using\n   this temporary scope list, it MAY attempt\
    \ to contact a MADCAP server\n   that can provide a scope list for it.\n   When\
    \ a MADCAP client requests an address with a DISCOVER or REQUEST\n   message,\
    \ it MUST specify the administrative scope from which the\n   address should be\
    \ allocated. This scope is indicated with the\n   Multicast Scope option. Likewise,\
    \ the server MUST include the\n   Multicast Scope option in all OFFER messages\
    \ and all ACK messages\n   sent in response to REQUEST messages.\n"
- title: 2.8. Multicast TTL
  contents:
  - "2.8. Multicast TTL\n   Another way to limit propagation of multicast messages\
    \ is by using\n   TTL scoping. This technique has several disadvantages in comparison\n\
    \   to administratively scoped multicast addresses (as described in [3]),\n  \
    \ but it is currently in widespread usage.\n   With TTL scoping, areas of the\
    \ network are designated as scopes.\n   Routers on the edges of these areas are\
    \ configured with TTL\n   thresholds so that multicast packets are not forwarded\
    \ unless their\n   remaining TTL exceeds this threshold. A packet which should\
    \ be\n   restricted to a given TTL scope should have an initial TTL less than\n\
    \   that scope's TTL threshold. Similar techniques may be used with IPv6,\n  \
    \ using the Hop Count field instead of the TTL field.\n   MADCAP may be used in\
    \ an environment where administrative scoping is\n   not in use and TTL scoping\
    \ is. Under these circumstances, a MADCAP\n   server MAY return a scope list that\
    \ includes scopes with TTLs less\n   than 255. The MADCAP client MAY then allocate\
    \ addresses from these\n   scopes, but MUST NOT set the TTL field of any packet\
    \ sent to such an\n   address to a value greater than the maximum TTL indicated\
    \ in the\n   scope list. In such an environment, it is recommended that the MADCAP\n\
    \   Server Multicast Addresses associated with the IPv4 Local Scope (or\n   SCOP\
    \ 3 for IPv6) be configured using TTL thresholds so that packets\n   sent to these\
    \ addresses with TTL of 16 are not sent outside an\n   appropriate boundary. \
    \ This will allow MADCAP clients to use their\n   default behavior for finding\
    \ MADCAP servers.\n   In an environment where administrative scoping is in use,\
    \ the maximum\n   TTLs in the scope list SHOULD be 255. The admin scope zone boundary\n\
    \   routers will prevent leakage of MADCAP packets beyond appropriate\n   limits.\n"
- title: 2.9. Locating MADCAP Servers
  contents:
  - "2.9. Locating MADCAP Servers\n   There are several ways for a MADCAP client to\
    \ locate a MADCAP server.\n   For instance, the client may be configured with\
    \ an IP address.\n   The RECOMMENDED technique is for the client to send an GETINFO\n\
    \   message to a MADCAP Server Multicast Address and wait for ACK\n   responses.\
    \ This technique is described in more detail in the next\n   section.\n"
- title: 2.10. MADCAP Server Multicast Address
  contents:
  - "2.10. MADCAP Server Multicast Address\n   Each multicast scope has an associated\
    \ MADCAP Server Multicast\n   Address. This address has been reserved by the IANA\
    \ as the address\n   with a relative offset of -1 from the last address of a multicast\n\
    \   scope.\n   A MADCAP client looking for servers that can provide multicast\n\
    \   allocation services MAY send an GETINFO message to a MADCAP Server\n   Multicast\
    \ Address. Any MADCAP servers listening to this address\n   SHOULD respond with\
    \ a unicast ACK message to the client if they wish\n   to offer a response.\n\
    \   The MADCAP Server Multicast Address used by a client MAY be\n   established\
    \ by configuration. If a client has no such configuration,\n   it SHOULD use the\
    \ MADCAP Server Multicast Address associated with\n   IPv4 Local Scope (or SCOP\
    \ 3 for IPv6) with maximum TTL of 16, unless\n   otherwise configured.\n"
- title: 2.11. Going Beyond the Local Scope
  contents:
  - "2.11. Going Beyond the Local Scope\n   If a client receives no response to a\
    \ message sent to a MADCAP Server\n   Multicast Address (after retransmission),\
    \ it MAY send the message to\n   a larger scope and repeat this process as necessary.\
    \ However, the\n   client MUST NOT send a MADCAP message to the MADCAP Server\
    \ Multicast\n   Address associated with the global scope.\n   This technique allows\
    \ MADCAP servers to provide services for scopes\n   in which they do not reside.\
    \ However, this is a dangerous and\n   complicated technique and is NOT RECOMMENDED\
    \ at this time.\n   Therefore, MADCAP clients SHOULD only send multicast messages\
    \ to the\n   MADCAP Server Multicast Address corresponding to the IPv4 Local Scope\n\
    \   (or SCOP 3, if using IPv6), unless configured otherwise.\n   MADCAP servers\
    \ that wish to provide services for scopes in which they\n   do not reside MUST\
    \ make special efforts to ensure that their services\n   meet clients' needs for\
    \ largely conflict-free allocation and accurate\n   scope list information.  In\
    \ particular, coordinating with other\n   servers that provide services for this\
    \ scope may be difficult. Also,\n   establishing which scope the client is in\
    \ may be difficult. If a\n   MADCAP server is not prepared to provide services\
    \ for scopes in which\n   it does not reside, it SHOULD ignore DISCOVER and REQUEST\
    \ messages\n   whose scope does not match or enclose the scope of the MADCAP Server\n\
    \   Multicast Address on which the request was received. It SHOULD also\n   ignore\
    \ GETINFO messages that are not received on the MADCAP Server\n   Multicast Address\
    \ for IPv4 Local Scope.\n"
- title: 2.12. Clock Skew
  contents:
  - "2.12. Clock Skew\n   The Current Time option is used to detect and handle clock\
    \ skew\n   between MADCAP clients and servers. This option MUST be included in\n\
    \   any MADCAP message that includes an absolute time (such as the Start\n   Time\
    \ option). It MAY be included in any DISCOVER, OFFER, REQUEST,\n   RENEW, or ACK\
    \ message.\n   Clock skew is a situation where two systems have clocks that are\
    \ not\n   synchronized. Many protocols (such as DHCP) ignore clock skew by\n \
    \  using relative times. MADCAP could use a similar technique, but this\n   leads\
    \ to nasty situations due to the way multicast addresses are\n   used.\n   For\
    \ example, assume that at 1 PM UTC a client whose clock is one hour\n   fast requests\
    \ a lease for one hour starting in one hour. If we were\n   using relative times\
    \ for MADCAP, the server, whose clock is set\n   correctly, would reserve a multicast\
    \ address for 2 to 3 PM UTC and\n   grant the request. If the client was the only\
    \ one using the lease,\n   everything would be OK. The client would start using\
    \ the lease in one\n   hour and continue for one hour. This would coincide with\
    \ the time the\n   server had reserved (although the client would think it was\
    \ 3 to 4 PM\n   UTC).\n   However, multicast addresses are usually used by several\
    \ parties at\n   once.  The client would probably use SAP (or some other mechanism\
    \ for\n   conveying SDP) to advertise a session using the multicast address\n\
    \   just leased. SDP uses absolute times, since it may be sent via email,\n  \
    \ web, or other store-and-forward mechanisms. So the client would\n   advertise\
    \ the session as running from 3 to 4 PM UTC. Any clients\n   whose clocks are\
    \ set correctly would use the address during this\n   interval. Since the server\
    \ only reserved the address from 2 to 3 PM\n   UTC, this might cause the address\
    \ to be used for multiple sessions\n   simultaneously.\n   MADCAP cannot solve\
    \ all clock skew problems. That is the domain of\n   NTP [4].  However, it does\
    \ attempt to detect substantial clock skew\n   between MADCAP clients and servers\
    \ so that this clock skew does not\n   cause massive collisions in multicast address\
    \ usage later on.\n   The Current Time option contains the sender's opinion of\
    \ the current\n   time in UTC at or about the time the message was assembled.\
    \ Because\n   of delays in transmission and processing, this value will rarely\n\
    \   match the receiver's opinion of the current time at the time the\n   option\
    \ is processed by the receiver. However, difference greater than\n   a minute\
    \ or two probably indicate clock skew between the sender and\n   the receiver.\n\
    \   MADCAP servers SHOULD expect and tolerate a small amount of clock\n   skew\
    \ with their clients by ensuring that multicast addresses are\n   allocated for\
    \ an extra period of time [EXTRA-ALLOCATION-TIME] on\n   either side of the lease\
    \ given to the client. However, large amounts\n   of clock skew require special\
    \ handling. The value of [EXTRA-\n   ALLOCATION-TIME] MUST be a configurable parameter,\
    \ since local\n   circumstances may vary.  The RECOMMENDED default is one hour.\n\
    \   However, large amounts of clock skew will cause problems later when\n   sessions\
    \ are advertised. If a MADCAP server detects clock skew\n   greater than [CLOCK-SKEW-ALLOWANCE],\
    \ it MUST generate and process an\n   Excessive Clock Skew error, as described\
    \ in section 2.6. The server\n   MAY also log a message. The value of [CLOCK-SKEW-ALLOWANCE]\
    \ MUST be a\n   configurable parameter, since local circumstances may vary.  The\n\
    \   RECOMMENDED default is 30 minutes.\n"
- title: 2.13. Optional Features
  contents:
  - "2.13. Optional Features\n   Each MADCAP client or server MAY implement one or\
    \ more optional\n   features.  Optional features of MADCAP are identified with\
    \ a two\n   octet feature code.\n   A MADCAP client MAY request, require, or indicate\
    \ support for an\n   optional feature by including a Feature List option in a\
    \ message. For\n   more information about optional features, see the description\
    \ of the\n   Feature List option.\n   Table 4 lists the feature codes defined\
    \ at this time and sections\n   2.13.1 and 2.13.2 describe how these features\
    \ work.\n   New MADCAP feature codes may only be defined by IETF Consensus, as\n\
    \   described in section 5.\n           Feature Code   Feature Name\n        \
    \   ------------   ------------\n                0         Server Mobility\n \
    \               1         Retry After\n                2         Shared Lease\
    \ Identifier\n      Table 4:  MADCAP Feature Codes\n"
- title: 2.13.1. Server Mobility
  contents:
  - "2.13.1. Server Mobility\n   The Server Mobility feature allows an address allocated\
    \ on one MADCAP\n   server to be renewed or released on a different MADCAP server.\
    \ This\n   requires communication and coordination among MADCAP servers. The\n\
    \   primary benefits are immunity to the failure of a single MADCAP\n   server\
    \ and perhaps greater performance through load balancing.\n   In order to take\
    \ advantage of the Server Mobility feature, a MADCAP\n   client must ensure that\
    \ the feature is implemented by both the server\n   that is used for the original\
    \ allocation and the server that is used\n   for the renewal or release. The best\
    \ way to ensure this is to include\n   the Server Mobility feature in the required\
    \ list of a Feature List\n   option in the REQUEST message used to allocate the\
    \ address (and the\n   DISCOVER message, if one is used). When the time comes\
    \ to renew or\n   release the address, the client SHOULD send a unicast RENEW\
    \ or\n   RELEASE message to the server from which it allocated the address.\n\
    \   However, if this server is unavailable, the client MAY send the RENEW\n  \
    \ or RELEASE message to any other server that includes the Server\n   Mobility\
    \ feature in its list of supported features. The client can\n   find such a server\
    \ by (for instance) sending an GETINFO message with\n   an Option Request List\
    \ option that includes the Feature List option\n   code.\n   If the MADCAP client\
    \ does not want to require this feature when\n   allocating addresses, it may\
    \ include the feature in the requested\n   list of a Feature List option and see\
    \ if the server includes the\n   feature in the required list of a Feature List\
    \ option in the ACK\n   message.\n   Even if the Server Mobility feature is used,\
    \ there is no guarantee\n   that a server will be available to perform the renewal\
    \ or release or\n   that the renewal or release will succeed. Server connectivity\
    \ may\n   have failed, for instance.\n"
- title: 2.13.2. Retry After
  contents:
  - "2.13.2. Retry After\n   The Retry After feature allows a MADCAP server to ask\
    \ the MADCAP\n   client to retry its request later, as may be required when allocating\n\
    \   large numbers of addresses or allocating addresses for a long period\n   of\
    \ time.\n   For instance, if a MADCAP client requests 1000 addresses,\n   administrative\
    \ approval may be required or allocation of more\n   addresses from another MASC\
    \ domain may be necessary. This may take\n   several hours or several days.  If\
    \ the MADCAP client and server both\n   support the Retry After feature, the MADCAP\
    \ server can send back an\n   ACK message with a Retry Time option indicating\
    \ when the addresses\n   may be ready. The client can retry its request after\
    \ the Retry Time\n   to get the addresses.\n   If a MADCAP client includes the\
    \ Retry After feature in the supported\n   list of a Feature List option in a\
    \ REQUEST message, a MADCAP server\n   that supports the Retry After feature MAY\
    \ decide to begin a lengthy\n   allocation process. In this case, the MADCAP server\
    \ will include an\n   empty List of Address Ranges option in its ACK message,\
    \ a Feature\n   List option that includes the Retry After feature in the required\n\
    \   list, and a Retry Time option with a time after which the client\n   should\
    \ retry the REQUEST.\n   The client MUST NOT include the Retry After feature in\
    \ the requested\n   or required list of a Feature List option, since the decision\
    \ about\n   whether Retry After is desirable should be left to the MADCAP server.\n\
    \   At some later time (preferably after the time indicated in the Retry\n   Time\
    \ option), the client SHOULD send a REQUEST message with all the\n   same options\
    \ as the original REQUEST message (especially the Lease\n   Identifier option),\
    \ but with a new xid value.  The server MAY return\n   a normal ACK or NAK message\
    \ at this point or it MAY continue the\n   transaction to a later time by including\
    \ an empty List of Address\n   Ranges option in its ACK message, a Feature List\
    \ option that includes\n   the Retry After feature in the required list, and a\
    \ Retry Time option\n   with a later time after which the client should retry\
    \ the REQUEST.\n   At any point after receiving the initial ACK message with the\
    \ Retry\n   Time option, the client MAY terminate the allocation process and any\n\
    \   accompanying lease by sending to the server performing the allocation\n  \
    \ (or another server if the Server Mobility feature is also in effect)\n   a RELEASE\
    \ message with the Lease Identifier included in the original\n   REQUEST message.\n\
    \   The Retry After feature may also be used when renewing a lease.  In\n   this\
    \ case, the description above applies except that the client sends\n   a RENEW\
    \ message instead of a REQUEST message.\n   If a client sends a RENEW message\
    \ with a Lease Identifier that\n   matches a lease which is currently undergoing\
    \ allocation with the\n   Retry After feature in response to a REQUEST message,\
    \ the server MUST\n   generate and process an Invalid Request error in the manner\
    \ described\n   in section 2.6.  Also, if a client sends a RENEW message with\
    \ a Lease\n   Identifier that matches a lease which is currently undergoing\n\
    \   allocation with the Retry After feature in response to a RENEW\n   message,\
    \ but the options supplied with the two RENEW messages do not\n   match, the server\
    \ MUST generate and process an Invalid Request error\n   in the manner described\
    \ in section 2.6.\n   Note that the Retry After feature may complicate the application\
    \ API.\n   For this reason, a MADCAP client may request the Retry After feature\n\
    \   for some messages and not for others. This should not cause problems\n   for\
    \ a robust MADCAP server. In general, servers should not expect\n   consistent\
    \ behavior from clients except as required by this\n   specification. This also\
    \ applies to clients' expectations.\n"
- title: 2.13.3. Shared Lease Identifier
  contents:
  - "2.13.3. Shared Lease Identifier\n   For conferencing applications, it may be\
    \ desirable to allow\n   conference participants to modify a lease used for the\
    \ conference.\n   The Shared Lease Identifier feature code is used to support\
    \ this\n   requirement.\n   If this feature code was requested by the client and\
    \ implemented by\n   the server when the lease was allocated, the server SHOULD\
    \ disable\n   any authentication requirements pertaining to this lease, allowing\n\
    \   any client that knows the Lease Identifier to modify the lease.\n   A MADCAP\
    \ client wishing to use the Shared Lease Identifier feature\n   should include\
    \ this feature in the requested or required lists of the\n   Feature List option\
    \ of a REQUEST message when first allocating the\n   lease. If the feature was\
    \ required, the server SHOULD try to\n   implement it for this request and include\
    \ the feature in the required\n   list of the response. If the server can not\
    \ implement the feature for\n   this request, it MUST generate and process a Required\
    \ Feature Not\n   Supported error in the manner described in section 2.6. If the\n\
    \   feature was requested, the server SHOULD try to implement the feature\n  \
    \ and include the feature in the required list of the response.\n   However, if\
    \ the server cannot implement the feature, it may simply\n   skip it.\n   Subsequent\
    \ requests pertaining to a lease for which the Shared Lease\n   Identifier feature\
    \ was implemented at allocation time MAY include the\n   Shared Lease Identifier\
    \ feature in the requested or required lists of\n   the Feature List option. In\
    \ this case, the server SHOULD try to\n   implement the feature by disabling any\
    \ authentication requirements\n   pertaining to this lease, allowing any client\
    \ that knows the Lease\n   Identifier to modify the lease, and including the feature\
    \ in the\n   required list of the response.  If the server cannot implement the\n\
    \   feature, it SHOULD skip it if the feature was requested. But if the\n   feature\
    \ was required and the server cannot implement it, the server\n   MUST generate\
    \ and process a Required Feature Not Supported error in\n   the manner described\
    \ in section 2.6.\n"
- title: 3. MADCAP Options
  contents:
  - "3. MADCAP Options\n   As described earlier, each MADCAP message includes an options\
    \ field\n   consisting of a list of tagged parameters that are called \"options\"\
    .\n   All options consist of a two octet option code and a two octet option\n\
    \   length, followed by the number of octets specified by the option\n   length.\n\
    \   This section defines a set of option codes for use in MADCAP\n   messages.\
    \  New options may be defined using the process defined in\n   section 5. The\
    \ options are listed in numerical order.\n   Table 5 summarizes which options\
    \ are allowed with each message type.\n   Option                  GETINFO    \
    \    ACK (in response to GETINFO)\n   ------                  ------         ---------------------------\n\
    \   Lease Time              MUST NOT       MUST NOT\n   Server Identifier    \
    \   MUST NOT       MUST\n   Lease Identifier        MUST           MUST\n   Multicast\
    \ Scope         MUST NOT       MUST NOT\n   Option Request List     MUST     \
    \      MUST NOT\n   Start Time              MUST NOT       MUST NOT\n   Number\
    \ of Addresses\n     Requested             MUST NOT       MUST NOT\n   Requested\
    \ Language      MAY            MUST NOT\n   Multicast Scope List    MUST NOT \
    \      MAY\n   List of Address Ranges  MUST NOT       MUST NOT\n   Current Time\
    \            MUST NOT       MAY\n   Feature List            MAY            MAY\n\
    \   Retry Time              MUST NOT       MUST NOT\n   Minimum Lease Time   \
    \   MUST NOT       MUST NOT\n   Maximum Start Time      MUST NOT       MUST NOT\n\
    \   Error                   MUST NOT       MUST NOT\n   Option               \
    \   DISCOVER       OFFER\n   ------                  --------       -----\n  \
    \ Lease Time              MAY            MUST\n   Server Identifier       MUST\
    \ NOT       MUST\n   Lease Identifier        MUST           MUST\n   Multicast\
    \ Scope         MUST           MUST\n   Option Request List     MUST NOT     \
    \  MUST NOT\n   Start Time              MAY            MAY\n   Number of Addresses\n\
    \     Requested             MAY            MUST NOT\n   Requested Language   \
    \   MUST NOT       MUST NOT\n   Multicast Scope List    MUST NOT       MUST NOT\n\
    \   List of Address Ranges  MAY            MAY\n   Current Time            MAY\
    \            MAY\n   Feature List            MAY            MAY\n   Retry Time\
    \              MUST NOT       MUST NOT\n   Minimum Lease Time      MAY       \
    \     MUST NOT\n   Maximum Start Time      MAY            MUST NOT\n   Error \
    \                  MUST NOT       MUST NOT\n   Option                  REQUEST\
    \        ACK (in response to REQUEST)\n   ------                  -------    \
    \    ----------------------------\n   Lease Time              MAY            MUST\n\
    \   Server Identifier       MUST (if       MUST\n                            \
    \ multicast)\n   Lease Identifier        MUST           MUST\n   Multicast Scope\
    \         MUST           MUST\n   Option Request List     MUST NOT       MUST\
    \ NOT\n   Start Time              MAY            MAY\n   Number of Addresses\n\
    \     Requested             MAY            MUST NOT\n   Requested Language   \
    \   MUST NOT       MUST NOT\n   Multicast Scope List    MUST NOT       MUST NOT\n\
    \   List of Address Ranges  MAY            MUST\n   Current Time            MAY\
    \            MAY\n   Feature List            MAY            MAY\n   Retry Time\
    \              MUST NOT       MAY\n   Minimum Lease Time      MAY            MUST\
    \ NOT\n   Maximum Start Time      MAY            MUST NOT\n   Error          \
    \         MUST NOT       MUST NOT\n   Option                  RENEW          ACK\
    \ (in response to RENEW)\n   ------                  -----          --------------------------\n\
    \   Lease Time              MAY            MUST\n   Server Identifier       MUST\
    \ NOT       MUST\n   Lease Identifier        MUST           MUST\n   Multicast\
    \ Scope         MUST NOT       MUST\n   Option Request List     MUST NOT     \
    \  MUST NOT\n   Start Time              MAY            MAY\n   Number of Addresses\n\
    \     Requested             MUST NOT       MUST NOT\n   Requested Language   \
    \   MUST NOT       MUST NOT\n   Multicast Scope List    MUST NOT       MUST NOT\n\
    \   List of Address Ranges  MUST NOT       MUST\n   Current Time            MAY\
    \            MAY\n   Feature List            MAY            MAY\n   Retry Time\
    \              MUST NOT       MAY\n   Minimum Lease Time      MAY            MUST\
    \ NOT\n   Maximum Start Time      MAY            MUST NOT\n   Error          \
    \         MUST NOT       MUST NOT\n   Option                  RELEASE        ACK\
    \ (in response to RELEASE)\n   ------                  -------        ----------------------------\n\
    \   Lease Time              MUST NOT       MUST NOT\n   Server Identifier    \
    \   MUST NOT       MUST\n   Lease Identifier        MUST           MUST\n   Multicast\
    \ Scope         MUST NOT       MUST NOT\n   Option Request List     MUST NOT \
    \      MUST NOT\n   Start Time              MUST NOT       MUST NOT\n   Number\
    \ of Addresses\n     Requested             MUST NOT       MUST NOT\n   Requested\
    \ Language      MUST NOT       MUST NOT\n   Multicast Scope List    MUST NOT \
    \      MUST NOT\n   List of Address Ranges  MUST NOT       MUST NOT\n   Current\
    \ Time            MUST NOT       MUST NOT\n   Feature List            MAY    \
    \        MAY\n   Retry Time              MUST NOT       MUST NOT\n   Minimum Lease\
    \ Time      MUST NOT       MUST NOT\n   Maximum Start Time      MUST NOT     \
    \  MUST NOT\n   Error                   MUST NOT       MUST NOT\n   Option   \
    \               NAK\n   ------                  ---\n   Lease Time           \
    \   MUST NOT\n   Server Identifier       MUST\n   Lease Identifier        MUST\n\
    \   Multicast Scope         MUST NOT\n   Option Request List     MUST NOT\n  \
    \ Start Time              MUST NOT\n   Number of Addresses\n     Requested   \
    \          MUST NOT\n   Requested Language      MUST NOT\n   Multicast Scope List\
    \    MUST NOT\n   List of Address Ranges  MUST NOT\n   Current Time          \
    \  MUST NOT\n   Feature List            MAY\n   Retry Time              MUST NOT\n\
    \   Minimum Lease Time      MUST NOT\n   Maximum Start Time      MUST NOT\n  \
    \ Error                   MUST\n             Table 5:  Options allowed in MADCAP\
    \ messages\n"
- title: 3.1. End
  contents:
  - "3.1. End\n   The End option marks the end of valid information in the options\n\
    \   field. This option MUST be included at the end of the options field\n   in\
    \ each MADCAP message.\n   The code for this option is 0, and its length is 0.\n\
    \        Code        Len\n   +-----+-----+-----+-----+\n   |     0     |     0\
    \     |\n   +-----+-----+-----+-----+\n"
- title: 3.2. Lease Time
  contents:
  - "3.2. Lease Time\n   This option is used in a client request (DISCOVER, REQUEST,\
    \ or RENEW)\n   to allow the client to request a lease time for the multicast\n\
    \   address. In a server reply (OFFER or ACK), a MADCAP server uses this\n   option\
    \ to specify the lease time it is willing to offer.\n   The time is in units of\
    \ seconds, and is specified as a 32-bit\n   unsigned integer.\n   The code for\
    \ this option is 1, and its length is 4.\n        Code        Len            Lease\
    \ Time\n   +-----+-----+-----+-----+-----+-----+-----+-----+\n   |     1     |\
    \     4     |  t1 |  t2 |  t3 |  t4 |\n   +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \   3.3. Server Identifier\n   This option contains the IP address of a MADCAP\
    \ server. A two octet\n   address family number (as defined by IANA, including\
    \ those defined in\n   [10]) is stored first, followed by the address.  The address\
    \ family\n   for this address is not determined by the addrfamily field in the\n\
    \   fixed header so that addresses from one family may be allocated while\n  \
    \ communicating with a server via addresses of another family.\n   All messages\
    \ sent by a MADCAP server MUST include a Server Identifier\n   option with the\
    \ IP address of the server sending the message.\n   MADCAP clients MUST include\
    \ a Server Identifier option in multicast\n   REQUEST messages in order to indicate\
    \ which OFFER message has been\n   accepted.\n   The code for this option is 2,\
    \ and its minimum length is 3.\n           Code        Len    Address Family \
    \    Address\n   +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \   |     2     |     n     |   family  |  a1 |  ...            |\n   +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n"
- title: 3.4. Lease Identifier
  contents:
  - "3.4. Lease Identifier\n   This option is used by MADCAP clients to specify a\
    \ unique lease\n   identifier. For more information about this option and how\
    \ it is\n   used, see section 2.4.\n   The code for this option is 3, and its\
    \ minimum length is 1.\n           Code        Len     Lease Identifier\n   +-----+-----+-----+-----+-----+-----+---\n\
    \   |     3     |     n     |  i1 |  i2 | ...\n   +-----+-----+-----+-----+-----+-----+---\n"
- title: 3.5. Multicast Scope
  contents:
  - "3.5. Multicast Scope\n   The multicast scope option is used by the client to\
    \ indicate the\n   requested multicast scope in a DISCOVER or REQUEST message.\
    \ It is\n   also used by the MADCAP server to indicate the scope of an assigned\n\
    \   address.\n   The client may obtain the scope list through the Multicast Scope\
    \ List\n   option or using some other means. The Scope ID is the first multicast\n\
    \   address in the scope. The address family of the Scope ID is\n   determined\
    \ by the addrfamily field in the fixed header.\n   The code for this option is\
    \ 4, and its minimum length is 1.\n        Code        Len        Scope ID\n \
    \  +-----+-----+-----+-----+-----+-----\n   |     4     |     n     |  i1 |  ...\n\
    \   +-----+-----+-----+-----+-----+-----\n"
- title: 3.6. Option Request List
  contents:
  - "3.6. Option Request List\n   This option is used by a MADCAP client in an GETINFO\
    \ message to\n   request that certain options be included in the server's ACK\n\
    \   response. The server SHOULD try to include the specified options in\n   its\
    \ response, but is not required to do so.\n   The format of this option is a list\
    \ of option codes.\n   The code for this option is 5 and the minimum length is\
    \ 2.\n        Code        Len      Requested Options\n   +-----+-----+-----+-----+-----+-----+---...\n\
    \   |     5     |     n     |  Option1  |\n   +-----+-----+-----+-----+-----+-----+---...\n"
- title: 3.7. Start Time
  contents:
  - "3.7. Start Time\n   The Start Time option specifies the starting time for a multicast\n\
    \   address lease.\n   A client may include this option in a DISCOVER, RENEW,\
    \ or REQUEST\n   message to request a multicast address for use at a future time.\
    \ A\n   server may include this option in an OFFER message or in an ACK in\n \
    \  response to REQUEST or RENEW message to indicate that a lease has\n   been\
    \ granted which starts at a future time.\n   If the Start Time option is present,\
    \ the IP Address Lease Time option\n   specifies the duration of the lease beginning\
    \ at the Start Time\n   option value.\n   If the Start Time option is present,\
    \ the Current Time option MUST\n   also be present, as described in section 2.12.\n\
    \   The time value is an unsigned 32 bit integer in network byte order\n   giving\
    \ the number of seconds since 00:00 UTC, 1st January 1970. This\n   can be converted\
    \ to an NTP timestamp by adding decimal 2208988800.\n   This time format will\
    \ not wrap until the year 2106.\n   The code for this option is 6 and the length\
    \ is 4.\n           Code        Len      Time\n   +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \   |     6     |     4     | t1  | t2  | t3  | t4  |\n   +-----+-----+-----+-----+-----+-----+-----+-----+\n"
- title: 3.8. Number of Addresses Requested
  contents:
  - "3.8. Number of Addresses Requested\n   This option specifies the minimum and\
    \ desired number of addresses\n   requested by the client. It is only used in\
    \ DISCOVER and REQUEST\n   messages and is only sent by the client.\n   The minimum\
    \ and desired number of addresses requested are unsigned 16\n   bit integers in\
    \ network byte order. The minimum MUST be less than or\n   equal to the desired\
    \ number. If a message is received where this is\n   not the case, the MADCAP\
    \ server MUST generate and process an Invalid\n   Request error in the manner\
    \ described in section 2.6.\n   The client MAY obtain more than one address either\
    \ by repeating the\n   protocol for every address or by requesting several addresses\
    \ at the\n   same time via this option. When the client is requesting only one\n\
    \   address, this option SHOULD NOT be included. A MADCAP server\n   receiving\
    \ a DISCOVER or REQUEST packet including this option MUST\n   include between\
    \ the minimum and desired number of addresses in any\n   OFFER or ACK response.\n\
    \   The code for this option is 7 and the length is 4.\n           Code      \
    \  Len      Minimum     Desired\n   +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \   |     7     |     4     | min       | desired   |\n   +-----+-----+-----+-----+-----+-----+-----+-----+\n"
- title: 3.9. Requested Language
  contents:
  - "3.9. Requested Language\n   This option specifies the language in which the MADCAP\
    \ client would\n   like strings such as zone names to be returned. It is only\
    \ included\n   in an GETINFO message sent by the client. It is an RFC 1766 [6]\n\
    \   language tag. The proper way to handle this tag with respect to zone\n   names\
    \ is discussed further in the definition of the Multicast Scope\n   List option.\n\
    \   The code for this option is 8 and the minimum length is 0.\n           Code\
    \        Len      Language Tag\n   +-----+-----+-----+-----+-----+-...-+-----+\n\
    \   |     8     |     n     | L1  |     | Ln  |\n   +-----+-----+-----+-----+-----+-...-+-----+\n"
- title: 3.10. Multicast Scope List
  contents:
  - "3.10. Multicast Scope List\n   This option is sent by the server in an ACK message\
    \ in response to an\n   GETINFO message sent by the client.\n   If the client\
    \ did not include a Requested Language option in its\n   GETINFO message, the\
    \ MADCAP server SHOULD return all zone names for\n   each zone. If the client\
    \ included a Requested Language option in its\n   GETINFO message, the MADCAP\
    \ server MUST return no more than one zone\n   name for each zone. For each zone,\
    \ the MADCAP server SHOULD first\n   look for a zone name that matches the requested\
    \ language tag (using a\n   case-insensitive ASCII comparison). If any names match,\
    \ one of them\n   should be returned. Otherwise, the MADCAP server SHOULD choose\n\
    \   another zone name to return (if any are defined). It SHOULD give\n   preference\
    \ to zone names that are marked to be used if no name is\n   available in a desired\
    \ language.\n   The code for this option is 9 and the minimum length is 0.\n \
    \  The format of the multicast scope list option is:\n        Code        Len\
    \     Count  Scope List\n   +-----+-----+-----+-----+-----+-----+-...-+-----+\n\
    \   |     9     |     p     | m   | L1  |     | Lm  |\n   +-----+-----+-----+-----+-----+-----+-...-+-----+\n\
    \   The scope list is a list of m tuples, where each tuple is of the\n   form:\n\
    \       Scope ID      Last Address   TTL   Name  Encoded Name List\n         \
    \                                 Count\n   +---+--...--+---+---+--...--+---+-----+-----+-----+-...-+-----+\n\
    \   |  ... ID ...   | ... Last ...  | T   | n   | EN1 |     | ENn |\n   +---+--...--+---+---+--...--+---+-----+-----+-----+-...-+-----+\n\
    \   where Scope ID is the first multicast address in the scope, Last\n   Address\
    \ is the last multicast address in the scope, TTL is the\n   multicast TTL value\
    \ for the multicast addresses of the scope, and\n   Name Count is the number of\
    \ encoded names for this zone (which may be\n   zero). The address family of the\
    \ Scope ID and Last Address is\n   determined by the addrfamily field in the fixed\
    \ header.  Note that a\n   particular MADCAP server may be allocating addresses\
    \ out of some\n   subset of the scope.  For instance, the addresses in the scope\
    \ may be\n   divided among several servers in some way.\n   Each encoded name\
    \ is of the form\n    Name  Lang   Language Tag      Name   Name\n    Flags Length\
    \                   Length\n   +-----+-----+-----+-...-+-----+-----+-----+-...-+-----+\n\
    \   | F   | q   | L1  |     | Lq  | r   | N1  |     | Nr  |\n   +-----+-----+-----+-...-+-----+-----+-----+-...-+-----+\n\
    \   where Name Flags is a flags field with flags defined below, Lang\n   Length\
    \ is the length of the Language Tag in octets (which MUST NOT be\n   zero), Language\
    \ Tag is a language tag indicating the language of the\n   zone name (as described\
    \ in [6]), Name Length is the length of the\n   Name in octets (which MUST NOT\
    \ be zero), and Name is a UTF-8 [5]\n   string indicating the name given to the\
    \ scope zone.\n   The high bit of the Name Flags field is set if the following\
    \ name\n   should be used if no name is available in a desired language.\n   Otherwise,\
    \ this bit is cleared. All remaining bits in the octet\n   SHOULD be set to zero\
    \ and MUST be ignored.\n   The Scope IDs of entries in the list MUST be unique\
    \ and the scopes\n   SHOULD be listed from smallest (topologically speaking) to\
    \ largest.\n   This makes it easier to display a consistent user interface, with\n\
    \   scopes usually keeping the same order. However, scopes may not be\n   strictly\
    \ nested. In this circumstance, there is no strict ordering\n   from smallest\
    \ to largest and the server must use another technique\n   for ordering the scope\
    \ list.\n   Example:\n   There are two scopes supported by the multicast address\
    \ allocation\n   server: Inside abcd.com with addresses 239.192.0.0-239.195.255.255,\n\
    \   and world with addresses 224.0.1.0-238.255.255.255. Then this option\n   will\
    \ be given as:\n            Code        Len     Count\n       +-----+-----+-----+-----+-----+...\n\
    \       |     9     |     51    | 2   |\n       +-----+-----+-----+-----+-----+...\n\
    \           Scope ID     Last Address    TTL Name  Name  Lang   Language\n   \
    \                                         Count Flags Length Tag\n       +---+---+---+---+---+---+---+---+---+-----+-----+------+-...-+...\n\
    \       |239|192| 0 | 0 |239|195|255|255|10 | 1   | 128 |  2   | en  |\n     \
    \  +---+---+---+---+---+---+---+---+---+-----+-----+------+-...-+...\n       \
    \ Name\n        Length Name\n       +------+--+--+-...-+--+--+...\n       |  15\
    \  | Inside abcd.com |\n       +------+--+--+-...-+--+--+...\n           Scope\
    \ ID     Last Address    TTL Name  Name  Lang   Language\n                   \
    \                         Count Flags Length Tag\n       +---+---+---+---+---+---+---+---+---+-----+-----+------+-...-+...\n\
    \       |224| 0 | 1 | 0 |238|255|255|255|16 | 1   | 128 |  2   | en  |\n     \
    \  +---+---+---+---+---+---+---+---+---+-----+-----+------+-...-+...\n       \
    \ Name\n        Length Name\n       +------+--...--+\n       |  5   | world |\n\
    \       +------+--...--+\n"
- title: 3.11. List of Address Ranges
  contents:
  - "3.11. List of Address Ranges\n   This option is used by the server to provide\
    \ the list of all the\n   address ranges allocated to the client.\n   This option\
    \ is also used by the client when requesting a lease for a\n   specific set of\
    \ addresses. This feature should be needed only rarely,\n   such as when a lease\
    \ is accidentally allowed to expire and it needs\n   to be reallocated.\n   The\
    \ address family of the addresses is determined by the addrfamily\n   field.\n\
    \   The code for this option is 10 and the minimum length is 0.\n        Code\
    \        Len       Address Range List\n   +-----+-----+-----+-----+-----+-----+-...-+-----+\n\
    \   |    10     |     n     | L1  | L2  |     | Ln  |\n   +-----+-----+-----+-----+-----+-----+-...-+-----+\n\
    \   where the Address Range List is of the following format.\n           StartAddress1\
    \  BlockSize1 StartAddress2 BlockSize2 ...\n           +---+---+---+---+---+---+---+---+---+---+---+---+--...--+\n\
    \           |  ... S1 ...   |B11|B12|  ... S2 ...   |B21|B22|       |\n      \
    \     +---+---+---+---+---+---+---+---+---+---+---+---+--...--+\n"
- title: 3.12. Current Time
  contents:
  - "3.12. Current Time\n   This option is used to express what the sender thinks\
    \ the current\n   time is. This is useful for detecting clock skew. This option\
    \ MUST be\n   included if the Start Time or Maximum Start Time options are used,\
    \ as\n   described in section 2.12.\n   The time value is an unsigned 32 bit integer\
    \ in network byte order\n   giving the number of seconds since 00:00 UTC, 1st\
    \ January 1970. This\n   can be converted to an NTP [4] timestamp by adding decimal\n\
    \   2208988800. This time format will not wrap until the year 2106.\n   The code\
    \ for this option is 11 and the length is 4.\n        Code        Len        Time\n\
    \   +-----+-----+-----+-----+-----+-----+-----+-----+\n   |    11     |     4\
    \     | t1  | t2  | t3  | t4  |\n   +-----+-----+-----+-----+-----+-----+-----+-----+\n"
- title: 3.13. Feature List
  contents:
  - "3.13. Feature List\n   This option lists optional MADCAP features supported,\
    \ requested, or\n   required, by the sender. This option MAY be included in any\
    \ message\n   sent by a MADCAP server or client.\n   Optional features of MADCAP\
    \ are identified with a two octet feature\n   code.  New MADCAP feature codes\
    \ may only be defined by IETF\n   Consensus, as described in section 5.\n   The\
    \ Feature List option consists of three separate lists: supported\n   features,\
    \ requested features, and required features. Each list\n   consists of an unordered\
    \ list of feature codes. The supported list is\n   used by MADCAP clients or servers\
    \ to indicate the features that the\n   sender supports.  The requested and required\
    \ lists are used by MADCAP\n   clients to indicate which features are requested\
    \ of or required from\n   a MADCAP server.  The required list is used by MADCAP\
    \ servers to\n   indicate which features were implemented by the MADCAP server\
    \ in\n   processing this message. Messages sent by MADCAP servers MUST NOT\n \
    \  include any feature codes in the requested list.\n   If a MADCAP client includes\
    \ the Feature List option in a message, it\n   MAY include features in any of\
    \ the lists: supported, requested, and\n   required.  If a MADCAP server receives\
    \ a message containing the\n   Feature List option and it does not support all\
    \ of the features in\n   the required list, it MUST generate and process a Required\
    \ Feature\n   Not Supported error in the manner described in section 2.6. If the\n\
    \   server supports all of the features in the required list, it MUST\n   implement\
    \ them as appropriate for this message.  It SHOULD try to\n   implement the features\
    \ in the requested list and it MAY implement any\n   of the features in the supported\
    \ list. If an optional feature (such\n   as Retry After) is not included in any\
    \ part of the Feature List\n   option included in the client's message (or if\
    \ the client does not\n   include a Feature List option in its message), the server\
    \ MUST NOT\n   use that feature in its response.\n   If a MADCAP server does respond\
    \ to a client's message that includes a\n   Feature List option, the server MUST\
    \ include a Feature List option\n   with a supported features list that lists\
    \ the features that it\n   supports, a required features list that lists the features\
    \ that it\n   implemented in responding to this message (which must be included\
    \ in\n   the supported features list of the client's Feature List option), and\n\
    \   an empty requested features list.\n   The code for this option is 12 and the\
    \ minimum length is 6.\n           Code        Len      Supported   Requested\
    \   Required\n   +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \   |    12     |     n     |    FL1    |    FL2    |    FL3    |\n   +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \   where each of the Feature Lists is of the following format:\n          Feature\
    \     Feature           Feature\n           Count      Code 1            Code\
    \ m\n       +-----+-----+-----+-----+-...-+-----+-----+\n       |     m     |\
    \ FC1       |     |    FCm    |\n       +-----+-----+-----+-----+-...-+-----+-----+\n"
- title: 3.14. Retry Time
  contents:
  - "3.14. Retry Time\n   The Retry Time option specifies the time at which a client\
    \ should\n   retry a REQUEST or RENEW message when using the Retry After feature.\n\
    \   This option should only be sent by a MADCAP server in an ACK when\n   responding\
    \ to a REQUEST or RENEW message that includes the Retry\n   After feature in the\
    \ supported, requested, or required list. For more\n   discussion of Retry After,\
    \ see section 2.13.2.\n   If the Retry Time option is present, the Current Time\
    \ option MUST\n   also be present.\n   The time value is an unsigned 32 bit integer\
    \ in network byte order\n   giving the number of seconds since 00:00 UTC, 1st\
    \ January 1970. This\n   can be converted to an NTP timestamp by adding decimal\
    \ 2208988800.\n   This time format will not wrap until the year 2106.\n   The\
    \ code for this option is 13 and the length is 4.\n        Code        Len   \
    \   Time\n   +-----+-----+-----+-----+-----+-----+-----+-----+\n   |    13   \
    \  |     4     | t1  | t2  | t3  | t4  |\n   +-----+-----+-----+-----+-----+-----+-----+-----+\n"
- title: 3.15. Minimum Lease Time
  contents:
  - "3.15. Minimum Lease Time\n   This option is used in a client request (DISCOVER,\
    \ REQUEST, or RENEW)\n   to allow the client to specify a minimum lease time for\
    \ the multicast\n   address. If a server cannot meet this minimum lease time,\
    \ it MUST\n   generate and process a Valid Request Could Not Be Completed error\
    \ in\n   the manner described in section 2.6.\n   The time is in units of seconds,\
    \ and is specified as a 32-bit\n   unsigned integer.\n   The code for this option\
    \ is 14, and its length is 4.\n        Code        Len            Lease Time\n\
    \   +-----+-----+-----+-----+-----+-----+-----+-----+\n   |    14     |     4\
    \     |  t1 |  t2 |  t3 |  t4 |\n   +-----+-----+-----+-----+-----+-----+-----+-----+\n"
- title: 3.16. Maximum Start Time
  contents:
  - "3.16. Maximum Start Time\n   The Maximum Start Time option specifies the latest\
    \ starting time that\n   the client is willing to accept for a multicast address\
    \ lease.\n   A client may include this option in a DISCOVER, RENEW, or REQUEST\n\
    \   message to specify that it does not want to receive a lease with a\n   starting\
    \ time later than the specified value. If a server cannot meet\n   this maximum\
    \ start time, it MUST generate and process a Valid Request\n   Could Not Be Completed\
    \ error in the manner described in section 2.6.\n   If the Maximum Start Time\
    \ option is present, the Current Time option\n   MUST also be present, as described\
    \ in section 2.12.\n   The time value is an unsigned 32 bit integer in network\
    \ byte order\n   giving the number of seconds since 00:00 UTC, 1st January 1970.\
    \ This\n   can be converted to an NTP timestamp by adding decimal 2208988800.\n\
    \   This time format will not wrap until the year 2106.\n   The code for this\
    \ option is 15 and the length is 4.\n        Code        Len      Time\n   +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \   |    15     |     4     | t1  | t2  | t3  | t4  |\n   +-----+-----+-----+-----+-----+-----+-----+-----+\n"
- title: 3.17. Error
  contents:
  - "3.17. Error\n   A MADCAP server includes this option in a NAK message to indicate\
    \ why\n   the request failed. A MADCAP server MUST include an Error option in\n\
    \   each NAK message.\n   The first two octets of an Error option contain a MADCAP\
    \ error code.\n   Several MADCAP error codes are defined later in this section.\
    \  New\n   MADCAP error codes may only be defined by IETF Consensus, as\n   described\
    \ in section 5.\n   Any remaining octets in the Error option contain extra data\
    \ about the\n   error. The format of this data depends on the error code. The\n\
    \   definition of a MADCAP error code must include a definition of the\n   extra\
    \ data to be included with that error code.\n   A client that receives a NAK message\
    \ containing an Error option MAY\n   log or display a message indicating the error\
    \ code and extra data\n   received.  The client MUST NOT retransmit a message\
    \ once a NAK\n   response to that message has been received. The client MAY adjust\
    \ the\n   message to correct the error and send the corrected message or send\
    \ a\n   message to a different server.\n   The code for this option is 16, and\
    \ the minimum length is 2.\n        Code        Len      Error Code  Extra Data\n\
    \   +-----+-----+-----+-----+-----+-----+-----+-----+ ...\n   |    16     |  \
    \   n     |   ecode   |  d1    d2\n   +-----+-----+-----+-----+-----+-----+-----+-----+\
    \ ...\n"
- title: 3.17.1. Valid Request Could Not Be Completed
  contents:
  - "3.17.1. Valid Request Could Not Be Completed\n   MADCAP error code 0 indicates\
    \ that the request was valid, but could\n   not be completed with the available\
    \ addresses and the current\n   configuration.  The extra data is a two octet\
    \ option code indicating\n   which option caused the problem. A value of 0xFFFF\
    \ indicates that the\n   problem was not with a specific option.\n"
- title: 3.17.2. Invalid Request
  contents:
  - "3.17.2. Invalid Request\n   MADCAP error code 1 indicates that the request was\
    \ malformed or\n   invalid in some other manner. The extra data is a two octet\
    \ option\n   code indicating which option caused the problem. A value of 0xFFFF\n\
    \   indicates that the problem was not with a specific option.\n"
- title: 3.17.3. Excessive Clock Skew
  contents:
  - "3.17.3. Excessive Clock Skew\n   MADCAP error code 2 indicates excessive clock\
    \ skew (see section\n   2.12).  The extra data consists of a four octet time value\n\
    \   representing the server's idea of the current time, an unsigned 32\n   bit\
    \ integer in network byte order giving the number of seconds since\n   00:00 UTC,\
    \ 1st January 1970. This can be converted to an NTP\n   timestamp by adding decimal\
    \ 2208988800. This time format will not\n   wrap until the year 2106.\n"
- title: 3.17.4. Lease Identifier Not Recognized
  contents:
  - "3.17.4. Lease Identifier Not Recognized\n   MADCAP error code 3 indicates that\
    \ the Lease Identifier was not\n   recognized (usually in response to a RENEW\
    \ or RELEASE message). There\n   is no extra data.\n"
- title: 3.17.5. Required Feature Not Supported
  contents:
  - "3.17.5. Required Feature Not Supported\n   MADCAP error code 4 indicates that\
    \ at least one feature included in\n   the required list of the Feature List option\
    \ is not supported. The\n   extra data contains a list of the feature codes in\
    \ the required list\n   that are not supported.\n"
- title: 3.17.6. Experimental Use
  contents:
  - "3.17.6. Experimental Use\n   MADCAP error codes 1024-2047 are reserved for experimental\
    \ use. The\n   format of the extra data included with these error codes is not\n\
    \   defined.\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   MADCAP has relatively basic security requirements.\
    \ At present there\n   is no way of enforcing authorized use of multicast addresses\
    \ in the\n   multicast routing/management protocols.  Therefore, it is not\n \
    \  possible to identify unauthorized use of multicast address by an\n   adversary.\
    \ Moreover, a multicast address allocated to a user/system\n   can be used by\
    \ other systems without violating terms of the multicast\n   address allocation.\
    \ For example, a system may reserve an address to\n   be used for a work group\
    \ session where each and every member of the\n   work group is allowed to transmit\
    \ packets using the allocated group\n   address. In other words, the multicast\
    \ address allocation protocol\n   does not dictate how the address should be used,\
    \ it only dictates the\n   time period for which it can be used and who gets to\
    \ release it or\n   renew it. When an address is allocated to a system/user, it\
    \ basically\n   means that no other user/system (most likely) will be allocated\
    \ that\n   address for the time period, without any restrictions on its use.\n\
    \   To protect against rogue MADCAP servers (mis-configured servers and\n   intentional),\
    \ clients in certain situations would like to\n   authenticate the server. Similarly,\
    \ for auditing or book-keeping\n   purposes, the server may want to authenticate\
    \ clients. Moreover, in\n   some cases, the server may have certain policies in\
    \ place to restrict\n   the number of addresses that are allocated to a system\
    \ or a user.\n   This feature is of much value when a well behaved but naive user\
    \ or\n   client requests a large number of addresses, and therefore,\n   inadvertently\
    \ impacts other users or systems. Therefore, an\n   administrator may want to\
    \ exert a limited amount of control based on\n   the client identification.  The\
    \ client identification could be based\n   on the system or user identity. In\
    \ most practical situations, system\n   identification will suffice, however,\
    \ particularly in case of multi-\n   user systems, at times, user identification\
    \ will play an important\n   role. Therefore, authentication capabilities based\
    \ on user\n   identification may be desirable. As usual, data integrity is a strong\n\
    \   requirement and if not protected, can lead to many problems including\n  \
    \ denial of service attacks.\n   In the case of MADCAP, confidentiality is not\
    \ a strong requirement.\n   In most of the cases, at least when a multicast address\
    \ is in use, an\n   adversary will be able to determine information that was contained\
    \ in\n   the MADCAP messages. In some cases, the users/systems may want to\n \
    \  protect information in the MADCAP messages so that an adversary is\n   not\
    \ able to determine relevant information in advance and thus, plan\n   an attack\
    \ in advance. For example, if an adversary knows in advance\n   (based on MADCAP\
    \ messages) that a particular user has requested a\n   large number of address\
    \ for certain time period and scope, he may be\n   able to guess the purpose behind\
    \ such request and target an attack.\n   When the Shared Lease Identifier feature\
    \ is used, preserving the\n   confidentiality of MADCAP messages becomes more\
    \ important. Also,\n   there may be features added to the protocol in the future\
    \ that may\n   have stronger confidentiality requirements.\n   The IPSEC protocol\
    \ [8] meets client/server identification and\n   integrity protection requirements\
    \ stated above, requires no\n   modification to the MADCAP protocol, and leverages\
    \ extensive work in\n   IETF and industry. Therefore, when security is a strong\
    \ requirement,\n   IPSEC SHOULD be used for protecting all the unicast messages\
    \ of\n   MADCAP protocol. When IPSEC based security is in use, all the\n   multicast\
    \ packets except GETINFO MUST be dropped by the MADCAP\n   server.  The prevalent\
    \ implementations of IPSEC support client\n   identification in form of system\
    \ identification and do not support\n   user identification. However, when desired,\
    \ IPSEC with appropriate\n   API's may be required to support user identification.\n"
- title: 5. IANA Considerations
  contents:
  - "5. IANA Considerations\n   This document defines several number spaces (MADCAP\
    \ options, MADCAP\n   message types, MADCAP Lease Identifier types, MADCAP features,\
    \ and\n   MADCAP error codes).  For all of these number spaces, certain values\n\
    \   are defined in this specification. New values may only be defined by\n   IETF\
    \ Consensus, as described in [7]. Basically, this means that they\n   are defined\
    \ by RFCs approved by the IESG.\n"
- title: 6. Acknowledgments
  contents:
  - "6. Acknowledgments\n   The authors would like to thank Rajeev Byrisetty, Steve\
    \ Deering,\n   Peter Ford, Mark Handley, Van Jacobson, David Oran, Thomas Pfenning,\n\
    \   Dave Thaler, Ramesh Vyaghrapuri and the participants of the IETF for\n   their\
    \ assistance with this protocol.\n   Much of this document is based on [1] and\
    \ [2]. The authors of this\n   document would like to express their gratitude\
    \ to the authors of\n   these previous works. Any errors in this document are\
    \ solely the\n   fault of the authors of this document.\n"
- title: 7. References
  contents:
  - "7. References\n   [1]  Droms, R., \"Dynamic Host Configuration Protocol\", RFC\
    \ 2131,\n        March 1997.\n   [2]  Alexander, S. and R. Droms, \"DHCP Options\
    \ and BOOTP Vendor\n        Extensions\", RFC 2132, March 1997.\n   [3]  Meyer,\
    \ D., \"Administratively Scoped IP Multicast\", BCP 23, RFC\n        2365, July\
    \ 1998.\n   [4]  Mills, D., \"Network Time Protocol (Version 3) Specification,\n\
    \        Implementation and Analysis\", RFC 1305, March 1992.\n   [5]  Yergeau,\
    \ F., \"UTF-8, a transformation format of ISO 10646\", RFC\n        2279, January\
    \ 1998.\n   [6]  Alvestrand, H., \"Tags for the Identification of Languages\"\
    , RFC\n        1766, March 1995.\n   [7]  Alvestrand, H. and T. Narten, \"Guidelines\
    \ for Writing an IANA\n        Considerations Section in RFCs\", BCP 26, RFC 2434,\
    \ October 1998.\n   [8]  Atkinson, R. and S. Kent, \"Security Architecture for\
    \ the\n        Internet Protocol\", RFC 2401, November 1998.\n   [9]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [10] Reynolds, J. and J. Postel, \"Assigned Numbers\"\
    , STD 2, RFC 1700,\n        October 1994.\n   [11] Deering, S., \"Host Extensions\
    \ for IP Multicasting\", STD 5, RFC\n        1112, August 1989.\n   [12] Deering,\
    \ S. and R. Hinden, \"Internet Protocol, Version 6 (IPv6)\n        Specification\"\
    , RFC 2460, December 1998.\n   [13] Hinden, R. and S. Deering, \"IP Version 6\
    \ Addressing\n        Architecture\", RFC 2373, July 1998.\n   [14] Schulzrinne,\
    \ H., Casner, S., Frederick, R. and V. Jacobson,\n        \"RTP: A Transport Protocol\
    \ for Real-Time Applications\", RFC\n        1889, January 1996.\n"
- title: 8. Authors' Addresses
  contents:
  - "8. Authors' Addresses\n   Stephen R. Hanna\n   Sun Microsystems, Inc.\n   One\
    \ Network Drive\n   Burlington, MA 01803\n   Phone: +1.781.442.0166\n   EMail:\
    \ steve.hanna@sun.com\n   Baiju V. Patel\n   Intel Corp.\n   Mail Stop: AG2-201\n\
    \   5200 NE Elam Young Parkway\n   Hillsboro, OR 97124\n   Phone: 503 696 8192\n\
    \   EMail: baiju.v.patel@intel.com\n   Munil Shah\n   Microsoft Corporation\n\
    \   One Microsoft Way\n   Redmond, WA 98052\n   Phone: 425 703 3924\n   EMail:\
    \ munils@microsoft.com\n"
- title: 'APPENDIX A: Examples'
  contents:
  - "APPENDIX A: Examples\n   This appendix includes several examples of typical MADCAP\
    \ protocol\n   exchanges.\n"
- title: 1. Multicast Scope List Discovery
  contents:
  - "1. Multicast Scope List Discovery\n   In this example, a MADCAP client wants\
    \ to determine the scope list in\n   effect. The client is using IPv4, so it starts\
    \ by multicasting an\n   GETINFO packet to the MADCAP Server Multicast Address\
    \ corresponding\n   to IPv4 Local Scope. This packet includes the Lease Identifier\n\
    \   option, an Option Request List including the Multicast Scope List\n   option\
    \ code, and a Requested Language option containing the string\n   \"en\", since\
    \ the client is configured to prefer the English language.\n   Two MADCAP servers\
    \ respond by sending ACK messages. These ACK\n   messages include the Lease Identifier\
    \ option and xid supplied by the\n   client, the server's Server Identifier, and\
    \ the Multicast Scope List\n   with one name per scope (the one that most closely\
    \ matches the\n   language tag \"en\").\n   The following figure illustrates this\
    \ exchange.\n                    Server          Client          Server\n    \
    \                  v               v               v\n                      |\
    \               |               |\n                      |               |   \
    \            |\n                      | _____________/|\\_____________ |\n   \
    \                   |/   GETINFO    |    GETINFO   \\|\n                     \
    \ |               |               |\n                      |               | \
    \              |\n                      |\\              |  ____________/|\n \
    \                     | \\_________    | /   ACK       |\n                   \
    \   |      ACK  \\   |/              |\n                      |            \\\
    \  |               |\n                      |               |               |\n\
    \                      v               v               v\n         Figure 2: Timeline\
    \ diagram of messages exchanged\n                   in Multicast Scope List Discovery\
    \ example\n"
- title: 2. Multicast Discovery and Address Allocation
  contents:
  - "2. Multicast Discovery and Address Allocation\n   In this example, the MADCAP\
    \ client wants to allocate a multicast\n   address from the global scope for use\
    \ during the next two hours.\n   The client begins by multicasting a DISCOVER\
    \ packet to the MADCAP\n   Server Multicast Address associated with IPv4 Local\
    \ Scope.  This\n   packet includes the Lease Time, Lease Identifier, and Multicast\
    \ Scope\n   options.\n   Any servers that receive the DISCOVER packet and can\
    \ satisfy this\n   request temporarily reserve an address for the client and unicast\
    \ an\n   OFFER packet to the client. These packets contain the Lease Time,\n \
    \  Server Identifier, Lease Identifier, and Multicast Scope options.\n   After\
    \ an appropriate delay, the client multicasts a REQUEST packet to\n   the MADCAP\
    \ Server Multicast Address. This packet contains all of the\n   options included\
    \ in the DISCOVER packet, but also includes the Server\n   Identifier option,\
    \ indicating which server it has selected for the\n   request.\n   The server\
    \ whose Server Identifier matches the one specified by the\n   client responds\
    \ with an ACK packet containing the options included in\n   the OFFER packet,\
    \ as well as a List of Address Ranges option listing\n   the address allocated.\
    \ All the other servers that had sent OFFER\n   packets stop reserving an address\
    \ for the client and forget about the\n   whole exchange.\n   The client now has\
    \ a two hour \"lease\" on the multicast address.\n   If the client had not received\
    \ an ACK from the server, it would have\n   retransmitted its REQUEST packet for\
    \ a while. If it still received no\n   response, it would start over with a new\
    \ DISCOVER message.\n   The following figure illustrates this exchange.\n    \
    \                Server          Client          Server\n                (not\
    \ selected)                    (selected)\n                      v           \
    \    v               v\n                      |               |              \
    \ |\n                      |Begin multicast address request|\n               \
    \       |               |               |\n                      | _____________/|\\\
    _____________ |\n                      |/   DISCOVER   |   DISCOVER   \\|\n  \
    \                    |               |               |\n                  Reserves\
    \            |           Reserves\n                  Address             |   \
    \        Address\n                      |               |               |\n  \
    \                    |\\              |  ____________/|\n                    \
    \  | \\_________    | /    OFFER    |\n                      |     OFFER \\  \
    \ |/              |\n                      |            \\  |               |\n\
    \                      |       Collects replies        |\n                   \
    \   |              \\|               |\n                      |     Selects Server\
    \            |\n                      |               |               |\n    \
    \                  | _____________/|\\_____________ |\n                      |/\
    \   REQUEST    |    REQUEST   \\|\n                      |               |   \
    \            |\n                      |               |     Commits address\n\
    \                      |               |               |\n                   \
    \   |               | _____________/|\n                      |               |/\
    \    ACK       |\n                      |               |               |\n  \
    \                    |     assignment complete       |\n                     \
    \ |               |               |\n                      v               v \
    \              v\n         Figure 3: Timeline diagram of messages exchanged\n\
    \                   in Multicast Address Allocation example\n"
- title: 3. Lease Extension
  contents:
  - "3. Lease Extension\n   This is a continuation of the previous example. The client\
    \ has\n   already allocated a multicast address from the global scope for use\n\
    \   during the next two hours. Half way through this two hour period, it\n   decides\
    \ that it wants to extend its lease for another hour.\n   The client unicasts\
    \ a RENEW packet to the server from which it\n   allocated the address. This packet\
    \ includes the Lease Time and Lease\n   Identifier options. The Lease Identifier\
    \ matches the one used for the\n   original allocation. The time included in the\
    \ Lease Time is two\n   hours, since the client wants the lease to expire two\
    \ hours from the\n   current time.\n   The server responds with an ACK packet\
    \ indicating that the lease\n   extension has been granted. This packet includes\
    \ the Lease Time,\n   Server Identifier, Lease Identifier, Multicast Scope, and\
    \ List of\n   Address Ranges options.\n   If the server did not want to grant\
    \ the requested lease extension, it\n   would have responded with a NAK packet\
    \ with the Lease Identifier\n   option.\n   The following figure illustrates this\
    \ exchange.\n                    Client          Server\n                    \
    \  v               v\n                      |               |\n              \
    \        |\\_____________ |\n                      |    RENEW     \\|\n      \
    \                |               |\n                      |        Extends lease\n\
    \                      |               |\n                      | _____________/|\n\
    \                      |/    ACK       |\n                      |            \
    \   |\n                      |               |\n                      v      \
    \         v\n         Figure 4: Timeline diagram of messages exchanged\n     \
    \              in Lease Extension example\n"
- title: 4. Address Release
  contents:
  - "4. Address Release\n   This is a continuation of the previous example. The client\
    \ has\n   already allocated a multicast address and extended its lease for\n \
    \  another two hours. Half an hour later, the client finishes its use of\n   the\
    \ multicast address and wants to release it so it can be reused.\n   The client\
    \ unicasts a RELEASE packet to the server from which it\n   allocated the address.\
    \ This packet includes the Lease Identifier\n   option. The Lease Identifier matches\
    \ the one used for the original\n   allocation. When the server receives this\
    \ packet, it cancels the\n   client's lease on the address and sends an ACK packet\
    \ to the client\n   indicating that the lease has been released. This packet includes\
    \ the\n   Server Identifier and Lease Identifier options.\n   The following figure\
    \ illustrates this exchange.\n                    Client          Server\n   \
    \                   v               v\n                      |               |\n\
    \                      |\\_____________ |\n                      |    RELEASE\
    \   \\|\n                      |               |\n                      |    \
    \    Cancels lease\n                      |               |\n                \
    \      | _____________/|\n                      |/    ACK       |\n          \
    \            |               |\n                      v               v\n    \
    \     Figure 5: Timeline diagram of messages exchanged\n                   in\
    \ Address Release example\n"
- title: 5. Unicast Address Allocation
  contents:
  - "5. Unicast Address Allocation\n   This is a continuation of the previous example.\
    \ At some later time,\n   the client decides to allocate another multicast address.\
    \ Since it\n   has recently worked with a server, it decides to try sending a\n\
    \   unicast REQUEST to that server. If this doesn't work, it can always\n   try\
    \ a multicast DISCOVER, as illustrated in example 2.\n   The client unicasts a\
    \ REQUEST packet to the server from which it\n   wants to allocate the address.\
    \ This packet includes the Lease Time,\n   Lease Identifier, and Multicast Scope\
    \ options.\n   The server responds with an ACK packet containing the Lease Time,\n\
    \   Lease Identifier, and Multicast Scope options from the REQUEST\n   packet,\
    \ as well as the Server Identifier option and a List of Address\n   Ranges option\
    \ listing the address allocated.\n   The client now has a lease on the multicast\
    \ address.\n   If the client had not received an ACK from the server, it would\
    \ have\n   retransmitted its REQUEST packet for a while. If it still received\
    \ no\n   response, it would start over with a multicast DISCOVER message.\n  \
    \ The following figure illustrates this exchange.\n                    Client\
    \          Server\n                      v               v\n                 \
    \     |               |\n                      |\\_____________ |\n          \
    \            |    REQUEST   \\|\n                      |               |\n   \
    \                   |        Allocates address\n                      |      \
    \         |\n                      | _____________/|\n                      |/\
    \    ACK       |\n                      |               |\n                  \
    \    v               v\n         Figure 6: Timeline diagram of messages exchanged\n\
    \                   in Unicast Address Allocation example\n"
- title: 'APPENDIX B: Recommended Constant Values'
  contents:
  - "APPENDIX B: Recommended Constant Values\n   Table 6 lists recommended values\
    \ for constants defined in this\n   specification.\n       Constant Name     \
    \        Recommended Value\n       -------------             -----------------\n\
    \       [CLOCK-SKEW-ALLOWANCE]    30 minutes\n       [DISCOVER-DELAY]        \
    \  current retransmit delay\n       [EXTRA-ALLOCATION-TIME]   1 hour\n       [NO-RESPONSE-DELAY]\
    \       60 seconds\n       [OFFER-HOLD]              at least 60 seconds\n   \
    \    [RESPONSE-CACHE-INTERVAL] at least 60 seconds (5 minutes maximum)\n     \
    \  [XID-REUSE-INTERVAL]      10 minutes (required)\n          Table 6:  Recommended\
    \ Constant Values\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
