- title: __initial_text__
  contents:
  - '                    Cancel-Locks in Netnews Articles

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines an extension to the Netnews Article Format\
    \ that\n   may be used to authenticate the withdrawal of existing articles.\n\
    \   This document updates RFC 5537.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8315.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Conventions Used in This Document ..........................3\n  \
    \ 2. Header Fields ...................................................3\n    \
    \  2.1. Cancel-Lock ................................................4\n      2.2.\
    \ Cancel-Key .................................................4\n   3. Use .............................................................5\n\
    \      3.1. Adding an Initial Cancel-Lock Header Field to a\n           Proto-Article\
    \ ..............................................5\n      3.2. Extending the Cancel-Lock\
    \ Header Field of a Proto-Article ..6\n      3.3. Adding a Cancel-Key Header Field\
    \ to a Proto-Article ........6\n      3.4. Extending the Cancel-Key Header Field\
    \ of a Proto-Article ...7\n      3.5. Check a Cancel-Key Header Field ............................7\n\
    \   4. Calculating the Key Data ........................................8\n  \
    \ 5. Examples ........................................................9\n    \
    \  5.1. Without UID ................................................9\n      5.2.\
    \ With UID ..................................................10\n      5.3. Other\
    \ Examples ............................................11\n      5.4. Manual Checks\
    \ .............................................12\n   6. Obsolete Syntax ................................................12\n\
    \   7. Security Considerations ........................................13\n  \
    \ 8. IANA Considerations ............................................15\n    \
    \  8.1. Algorithm Name Registration Procedure .....................16\n      8.2.\
    \ Change Control ............................................16\n      8.3. Registration\
    \ of the Netnews Cancel-Lock Hash Algorithms ...17\n   9. References .....................................................18\n\
    \      9.1. Normative References ......................................18\n  \
    \    9.2. Informative References ....................................19\n   Acknowledgements\
    \ ..................................................20\n   Author's Address ..................................................20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The authentication system defined in this document is intended\
    \ to be\n   used as a simple method to verify that the withdrawal of an article\n\
    \   is valid; that is to say the poster, posting agent, moderator, or\n   injecting\
    \ agent that processed the original article has requested to\n   withdraw it via\
    \ the use of a cancel control article\n   ([RFC5537] Section 5.3) or a Supersedes\
    \ header field\n   ([RFC5537] Section 5.4).\n   This document defines two new\
    \ header fields: Cancel-Lock and\n   Cancel-Key.  The Cancel-Lock header field\
    \ contains hashes of secret\n   data.  The preimages can later be used in the\
    \ Cancel-Key header field\n   to authenticate a cancel or supersede request.\n\
    \   One property of this system is that it prevents tracking of\n   individual\
    \ users.\n   There are other authentication systems available with different\n\
    \   properties.  When everybody should be able to verify who the\n   originator\
    \ is, e.g., for control articles to add or remove newsgroups\n   ([RFC5537] Section\
    \ 5.2), an OpenPGP [RFC4880] signature is\n   appropriate.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   Any term not defined in this document\
    \ has the same meaning as it does\n   in [RFC5536] or [RFC5537].\n   The key words\
    \ \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\"\
    , \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\"\
    \ in this document are to be interpreted as described in\n   BCP 14 [RFC2119]\
    \ [RFC8174] when, and only when, they appear in all\n   capitals, as shown here.\n"
- title: 2.  Header Fields
  contents:
  - "2.  Header Fields\n   This section describes the formal syntax of the new header\
    \ fields\n   using ABNF [RFC5234].  Non-terminals not defined in this document\
    \ are\n   defined in Section 3 of [RFC5536].\n   The new header fields Cancel-Lock\
    \ and Cancel-Key are defined by this\n   document, extending the list of article\
    \ header fields defined in\n   [RFC5536].\n   Each of these header fields MUST\
    \ NOT occur more than once in an\n   article.\n   Both new header field bodies\
    \ contain lists of encoded values.  Every\n   entry is based on a <scheme>:\n\
    \      scheme       = \"sha256\" / \"sha512\" / 1*scheme-char / obs-scheme\n \
    \     scheme-char  = ALPHA / DIGIT / \"-\" / \"/\"\n   The hash algorithms for\
    \ <scheme> are defined in [RFC6234]; see also\n   [RFC1321] and [RFC6151] for\
    \ MD5, [RFC3174] for SHA1, and [SHA] for\n   the SHA2 family.  The Base64 encoding\
    \ used is defined in Section 4 of\n   [RFC4648].\n   This document defines two\
    \ values for <scheme>: \"sha256\" and \"sha512\".\n   The hash algorithm \"sha256\"\
    \ is mandatory to implement.\n   Because the hash algorithm for <scheme> cannot\
    \ be negotiated,\n   unnecessary proliferation of hash algorithms should be avoided.\
    \  The\n   hash algorithms \"sha224\" and \"sha384\" are only added to the \"\
    Netnews\n   Cancel-Lock Hash Algorithms\" registry (Section 8.3) because\n   implementations\
    \ exist that support them.  Implementations SHOULD NOT\n   use the hash algorithms\
    \ \"sha224\" and \"sha384\" to generate <scheme>.\n"
- title: 2.1.  Cancel-Lock
  contents:
  - "2.1.  Cancel-Lock\n      cancel-lock     = \"Cancel-Lock:\" SP c-lock-list CRLF\n\
    \      c-lock-list     = [CFWS] c-lock *(CFWS c-lock) [CFWS]\n      c-lock   \
    \       = scheme \":\" c-lock-string\n      c-lock-string   = *(4base64-char)\
    \ [base64-terminal]\n      base64-char     = ALPHA / DIGIT / \"+\" / \"/\"\n \
    \     base64-terminal = 2base64-char \"==\" / 3base64-char \"=\"\n   Comments\
    \ in CFWS (comments and/or folding whitespace) can cause\n   interoperability\
    \ problems, so comments SHOULD NOT be generated but\n   MUST be accepted.\n  \
    \ If <scheme> is not supported by an implementation, the corresponding\n   <c-lock>\
    \ element MUST be skipped and potential following <c-lock>\n   elements MUST NOT\
    \ be ignored.\n   <c-lock-string> is the Base64-encoded output of a hash operation\n\
    \   (defined by <scheme>) of the Base64-encoded key \"K\" that is intended\n \
    \  to authenticate the person or agent that created or processed\n   (respectively)\
    \ the proto-article up to injection (inclusively):\n      Base64(hash(Base64(K)))\n\
    \   Because of the one-way nature of the hash operation, the key \"K\" is\n  \
    \ not revealed.\n"
- title: 2.2.  Cancel-Key
  contents:
  - "2.2.  Cancel-Key\n      cancel-key   = \"Cancel-Key:\" SP c-key-list CRLF\n \
    \     c-key-list   = [CFWS] c-key *(CFWS c-key) [CFWS]\n      c-key        = scheme\
    \ \":\" c-key-string\n      c-key-string = c-lock-string / obs-c-key-string\n\
    \   Comments in CFWS can cause interoperability problems, so comments\n   SHOULD\
    \ NOT be generated but MUST be accepted.\n   If <scheme> is not supported by an\
    \ implementation, the corresponding\n   <c-key> element MUST be skipped and potential\
    \ following <c-key>\n   elements MUST NOT be ignored.\n   <c-key-string> is the\
    \ Base64-encoded key \"K\" that was used to create\n   the <c-lock> element in\
    \ the Cancel-Lock header field body (as defined\n   in Section 2.1 of this document)\
    \ of the original article:\n      Base64(K)\n   The relaxed syntax definition\
    \ of <c-key-string> above is required for\n   backward compatibility with implementations\
    \ that are not compliant\n   with this specification.  Compliant implementations\
    \ SHOULD generate\n   valid Base64 (that is to say the syntax of <c-lock-string>\
    \ as defined\n   in Section 2.1 of this document) and MUST accept strings of\n\
    \   <base64-octet> characters (that is to say the syntax of\n   <obs-c-key-string>\
    \ as defined in Section 6 of this document).\n"
- title: 3.  Use
  contents:
  - "3.  Use\n   Use cases:\n   o  The poster of an article wants to cancel or supersede\
    \ existing\n      articles.\n   o  A moderator wants the ability to cancel articles\
    \ after approving\n      them.\n   o  An injecting agent wants to act as a representative\
    \ for a posting\n      agent that has no support for the authentication system\
    \ described\n      in this document.\n   o  A news administrator wants the ability\
    \ to cancel articles that\n      were injected by its system (because, for example,\
    \ they violate\n      its abuse policy).\n"
- title: 3.1.  Adding an Initial Cancel-Lock Header Field to a Proto-Article
  contents:
  - "3.1.  Adding an Initial Cancel-Lock Header Field to a Proto-Article\n   A Cancel-Lock\
    \ header field MAY be added to a proto-article by the\n   poster or posting agent\
    \ and will include one or more <c-lock>\n   elements.\n   If the poster or posting\
    \ agent doesn't add a Cancel-Lock header field\n   to a proto-article, then an\
    \ injecting agent (or moderator) MAY add\n   one, including one or more <c-lock>\
    \ elements.\n   If multiple <c-lock> elements are added to the Cancel-Lock header\n\
    \   field by a single agent, each <c-lock> element MUST use a unique\n   key \"\
    K\" to improve security.\n   If an injecting agent (or moderator) wants to act\
    \ as a representative\n   for a posting agent without support for the authentication\
    \ system\n   described in this document, then it MUST be able to positively\n\
    \   authenticate the poster and MUST be able to automatically add a\n   working\
    \ Cancel-Key header field for all proto-articles with\n   cancelling or superseding\
    \ attempts from that poster.\n   Other agents MUST NOT add this header field to\
    \ articles or\n   proto-articles that they process.\n"
- title: 3.2.  Extending the Cancel-Lock Header Field of a Proto-Article
  contents:
  - "3.2.  Extending the Cancel-Lock Header Field of a Proto-Article\n   If a Cancel-Lock\
    \ header field has already been added to a\n   proto-article, then any agent further\
    \ processing the proto-article up\n   to the injecting agent (inclusively) MAY\
    \ append additional <c-lock>\n   elements to those already in the header field\
    \ body.\n   If multiple <c-lock> elements are appended to the Cancel-Lock header\n\
    \   field by a single agent, each <c-lock> element MUST use a unique\n   key \"\
    K\" to improve security.\n   If an injecting agent (or moderator) wants to act\
    \ as a representative\n   for a posting agent without support for the authentication\
    \ system\n   described in this document, then the same requirements apply as those\n\
    \   mentioned in Section 3.1.\n   Once an article is injected, then this header\
    \ field MUST NOT be\n   altered.  In particular, relaying agents beyond the injecting\
    \ agent\n   MUST NOT alter it.\n"
- title: 3.3.  Adding a Cancel-Key Header Field to a Proto-Article
  contents:
  - "3.3.  Adding a Cancel-Key Header Field to a Proto-Article\n   The Cancel-Key\
    \ header field contains one or more of the secret\n   strings that were used to\
    \ create the Cancel-Lock header field of the\n   original article.  Knowledge\
    \ of at least one of the secret strings is\n   required to create a match for\
    \ successful authentication.\n   A Cancel-Key header field MAY be added to a proto-article\
    \ containing\n   a Control or Supersedes header field by the poster or posting\
    \ agent\n   and will include one or more <c-key> elements.  They will correspond\n\
    \   to some or all of the <c-lock> elements in the article referenced by\n   the\
    \ Control (with a \"cancel\" command as defined in [RFC5537]) or\n   Supersedes\
    \ header field.\n   If, as mentioned in Section 3.1, an injecting agent or moderator\n\
    \   (acting as a representative for the posting agent) has added a\n   Cancel-Lock\
    \ header field to an article listed in the Control (with a\n   \"cancel\" command\
    \ as defined in [RFC5537]) or Supersedes header field,\n   then (given that it\
    \ authenticates the poster as being the same as the\n   poster of the original\
    \ article) it MUST add the Cancel-Key header\n   field with at least one <c-key>\
    \ element that corresponds to that\n   article.\n   Other agents MUST NOT alter\
    \ this header field.\n"
- title: 3.4.  Extending the Cancel-Key Header Field of a Proto-Article
  contents:
  - "3.4.  Extending the Cancel-Key Header Field of a Proto-Article\n   If a Cancel-Key\
    \ header field has already been added to a\n   proto-article, then any agent further\
    \ processing the proto-article\n   up to the injecting agent (inclusively) MAY\
    \ append additional <c-key>\n   elements to those already in the header field\
    \ body.\n   If, as mentioned in Section 3.2, an injecting agent or moderator\n\
    \   (acting as a representative for the posting agent) has extended the\n   Cancel-Lock\
    \ header field in an article listed in the Control (with a\n   \"cancel\" command\
    \ as defined in [RFC5537]) or Supersedes header field,\n   then (given that it\
    \ authenticates the poster as being the same as the\n   poster of the original\
    \ article) it MUST extend the Cancel-Key header\n   field body with at least one\
    \ <c-key> element that corresponds to that\n   article.\n   Once an article is\
    \ injected, then this header field MUST NOT be\n   altered.  In particular, relaying\
    \ agents beyond the injecting agent\n   MUST NOT alter it.\n"
- title: 3.5.  Check a Cancel-Key Header Field
  contents:
  - "3.5.  Check a Cancel-Key Header Field\n   When a relaying or serving agent receives\
    \ an article that attempts to\n   cancel or supersede a previous article via a\
    \ Control (with a \"cancel\"\n   command as defined in [RFC5537]) or Supersedes\
    \ header field, the\n   system defined in this document can be used for authentication.\
    \  The\n   general handling of articles containing such attempts as defined in\n\
    \   [RFC5537] is not changed by this document.\n   To process the authentication,\
    \ the received article must contain a\n   Cancel-Key header field and the original\
    \ article must contain a\n   Cancel-Lock header field.  If this is not the case,\
    \ the\n   authentication is not possible (failed).\n   For the authentication\
    \ check, every supported <c-key> element from\n   the received article is processed\
    \ as follows:\n   1.  The <c-key-string> part of the <c-key> element is hashed\
    \ using\n       the algorithm defined by its <scheme> part.\n   2.  For each <c-lock>\
    \ element with the same <scheme> in the original\n       article, its <c-lock-string>\
    \ part is compared to the calculated\n       hash.\n   3.  If a <c-lock-string>\
    \ part is equal to the calculated hash, the\n       authentication is passed and\
    \ the processing of further elements\n       can be aborted.\n   4.  If no match\
    \ was found and there are no more <c-key> elements to\n       process, the authentication\
    \ failed.\n"
- title: 4.  Calculating the Key Data
  contents:
  - "4.  Calculating the Key Data\n   The following algorithm is RECOMMENDED to calculate\
    \ the key \"K\" based\n   on a local secret <sec>.\n   The result of the function\n\
    \      K = HMAC(sec, uid+mid)\n   is the key \"K\" for an article with a Message-ID\
    \ <mid> that belongs to\n   the User-ID (or UID) <uid> (e.g., the login name of\
    \ the user).  The\n   Hashed Message Authentication Code (HMAC) is outlined in\
    \ [RFC2104].\n   The HMAC is computed over the data <uid+mid> (with \"+\" representing\n\
    \   the concatenation operation), using <sec> as a secret key held\n   locally\
    \ that can be used for multiple articles.  This method removes\n   the need for\
    \ a per-article database containing the keys used for\n   every article.\n   A\
    \ posting agent must add the Message-ID header field to the\n   proto-article\
    \ itself and use the content of the header field body as\n   <mid> (excluding\
    \ whitespace but including literal angle brackets).\n   The User-ID <uid> must\
    \ not contain angle brackets (to ensure that\n   concatenation of different <uid>\
    \ and <mid> elements cannot give the\n   same results).\n   A posting agent that\
    \ uses a dedicated local secret <sec> for every\n   user should use an empty string\
    \ for the <uid> part.\n   In general, different values for the secret <sec> must\
    \ be used if\n   multiple <c-lock> elements are added by a single agent.\n   The\
    \ local secret <sec> should have a length of at least the output\n   size of the\
    \ hash function that is used by the HMAC\n   (256 bits / 32 octets for SHA256)\
    \ and must be a cryptographically\n   random value [RFC4086].\n   Note that the\
    \ hash algorithm used as the base for the HMAC operation\n   is not required to\
    \ be the same as that specified by <scheme>.  An\n   agent that verifies a Cancel-Key\
    \ header field body simply checks\n   whether one of its <c-key> elements matches\
    \ one of the <c-lock>\n   elements with the same <scheme> in the Cancel-Lock header\
    \ field body\n   of the original article.\n   Common libraries like OpenSSL can\
    \ be used for the cryptographic\n   operations.\n"
- title: 5.  Examples
  contents:
  - '5.  Examples

    '
- title: 5.1.  Without UID
  contents:
  - "5.1.  Without UID\n   Example data for creation of a <c-lock> element with HMAC-SHA256\
    \ and\n   an empty string as <uid> (as recommended in Section 4 for posting\n\
    \   agents):\n      Message-ID: <12345@mid.example>\n      mid: <12345@mid.example>\n\
    \      sec: ExampleSecret\n      K  : HMAC-SHA256(sec, mid) ;mid used as data,\
    \ sec as secret key\n   Calculation of Base64(K) using the OpenSSL command-line\
    \ tools in a\n   POSIX shell:\n      $ printf \"%s\" \"<12345@mid.example>\" \\\
    \n        | openssl dgst -sha256 -hmac \"ExampleSecret\" -binary \\\n        |\
    \ openssl enc -base64\n      qv1VXHYiCGjkX/N1nhfYKcAeUn8bCVhrWhoKuBSnpMA=\n  \
    \ This can be used as <c-key-string> for cancelling or superseding the\n   article\
    \ <12345@mid.example>.\n   Calculation of Base64(SHA256(Base64(K))) required for\
    \ <c-lock-string>\n   using the OpenSSL command-line tools in a POSIX shell:\n\
    \      $ printf \"%s\" \"qv1VXHYiCGjkX/N1nhfYKcAeUn8bCVhrWhoKuBSnpMA=\" \\\n \
    \       | openssl dgst -sha256 -binary \\\n        | openssl enc -base64\n   \
    \   s/pmK/3grrz++29ce2/mQydzJuc7iqHn1nqcJiQTPMc=\n   Inserted into the Cancel-Lock\
    \ header field body of the article\n   <12345@mid.example>, it looks like this:\n\
    \      Cancel-Lock: sha256:s/pmK/3grrz++29ce2/mQydzJuc7iqHn1nqcJiQTPMc=\n   Inserted\
    \ into the Cancel-Key header field body of an article that\n   should cancel or\
    \ supersede the article <12345@mid.example>, it looks\n   like this:\n      Cancel-Key:\
    \ sha256:qv1VXHYiCGjkX/N1nhfYKcAeUn8bCVhrWhoKuBSnpMA=\n"
- title: 5.2.  With UID
  contents:
  - "5.2.  With UID\n   Example data for creation of a <c-lock> element with HMAC-SHA256\
    \ and\n   \"JaneDoe\" as <uid> (as recommended in Section 4):\n      Message-ID:\
    \ <12345@mid.example>\n      uid: JaneDoe\n      mid: <12345@mid.example>\n  \
    \    sec: AnotherSecret\n      K  : HMAC-SHA256(sec, uid+mid) ;uid+mid as data,\
    \ sec as secret key\n   Calculation of Base64(K) using the OpenSSL command-line\
    \ tools in a\n   POSIX shell:\n      $ printf \"%s\" \"JaneDoe<12345@mid.example>\"\
    \ \\\n        | openssl dgst -sha256 -hmac \"AnotherSecret\" -binary \\\n    \
    \    | openssl enc -base64\n      yM0ep490Fzt83CLYYAytm3S2HasHhYG4LAeAlmuSEys=\n\
    \   This can be used as <c-key-string> for cancelling or superseding the\n   article\
    \ <12345@mid.example>.\n   Calculation of Base64(SHA256(Base64(K))) required for\
    \ <c-lock-string>\n   using the OpenSSL command-line tools in a POSIX shell:\n\
    \      $ printf \"%s\" \"yM0ep490Fzt83CLYYAytm3S2HasHhYG4LAeAlmuSEys=\" \\\n \
    \       | openssl dgst -sha256 -binary \\\n        | openssl enc -base64\n   \
    \   NSBTz7BfcQFTCen+U4lQ0VS8VIlZao2b8mxD/xJaaeE=\n   Inserted into the Cancel-Lock\
    \ header field body of the article\n   <12345@mid.example>, it looks like this:\n\
    \      Cancel-Lock: sha256:NSBTz7BfcQFTCen+U4lQ0VS8VIlZao2b8mxD/xJaaeE=\n   Inserted\
    \ into the Cancel-Key header field body of an article that\n   should cancel or\
    \ supersede the article <12345@mid.example>, it looks\n   like this:\n      Cancel-Key:\
    \ sha256:yM0ep490Fzt83CLYYAytm3S2HasHhYG4LAeAlmuSEys=\n"
- title: 5.3.  Other Examples
  contents:
  - "5.3.  Other Examples\n   Another matching pair of Cancel-Lock and Cancel-Key\
    \ header fields:\n      Cancel-Lock: sha256:RrKLp7YCQc9T8HmgSbxwIDlnCDWsgy1awqtiDuhedRo=\n\
    \      Cancel-Key: sha256:sSkDke97Dh78/d+Diu1i3dQ2Fp/EMK3xE2GfEqZlvK8=\n   With\
    \ obsolete syntax (uses a <c-key-string> with invalid/missing\n   Base64 padding):\n\
    \      Cancel-Lock: sha1:bNXHc6ohSmeHaRHHW56BIWZJt+4=\n      Cancel-Key: ShA1:aaaBBBcccDDDeeeFFF\n\
    \   Let's assume that all the examples above are associated to the same\n   article\
    \ (e.g., created by different agents):\n      Cancel-Lock: sha256:s/pmK/3grrz++29ce2/mQydzJuc7iqHn1nqcJiQTPMc=\n\
    \                   sha256:NSBTz7BfcQFTCen+U4lQ0VS8VIlZao2b8mxD/xJaaeE=\n    \
    \               sha256:RrKLp7YCQc9T8HmgSbxwIDlnCDWsgy1awqtiDuhedRo=\n        \
    \           sha1:bNXHc6ohSmeHaRHHW56BIWZJt+4=\n      Cancel-Key: sha256:qv1VXHYiCGjkX/N1nhfYKcAeUn8bCVhrWhoKuBSnpMA=\n\
    \                  sha256:yM0ep490Fzt83CLYYAytm3S2HasHhYG4LAeAlmuSEys=\n     \
    \             sha256:sSkDke97Dh78/d+Diu1i3dQ2Fp/EMK3xE2GfEqZlvK8=\n          \
    \        ShA1:aaaBBBcccDDDeeeFFF\n   Remember that parsing for <scheme> must be\
    \ case insensitive.\n"
- title: 5.4.  Manual Checks
  contents:
  - "5.4.  Manual Checks\n   Manual checks using the OpenSSL command-line tools in\
    \ a POSIX shell:\n      $ printf \"%s\" \"qv1VXHYiCGjkX/N1nhfYKcAeUn8bCVhrWhoKuBSnpMA=\"\
    \ \\\n        | openssl dgst -sha256 -binary \\\n        | openssl enc -base64\n\
    \      s/pmK/3grrz++29ce2/mQydzJuc7iqHn1nqcJiQTPMc=\n      $ printf \"%s\" \"\
    yM0ep490Fzt83CLYYAytm3S2HasHhYG4LAeAlmuSEys=\" \\\n        | openssl dgst -sha256\
    \ -binary \\\n        | openssl enc -base64\n      NSBTz7BfcQFTCen+U4lQ0VS8VIlZao2b8mxD/xJaaeE=\n\
    \      $ printf \"%s\" \"sSkDke97Dh78/d+Diu1i3dQ2Fp/EMK3xE2GfEqZlvK8=\" \\\n \
    \       | openssl dgst -sha256 -binary \\\n        | openssl enc -base64\n   \
    \   RrKLp7YCQc9T8HmgSbxwIDlnCDWsgy1awqtiDuhedRo=\n      $ printf \"%s\" \"aaaBBBcccDDDeeeFFF\"\
    \ \\\n        | openssl dgst -sha1 -binary \\\n        | openssl enc -base64\n\
    \      bNXHc6ohSmeHaRHHW56BIWZJt+4=\n"
- title: 6.  Obsolete Syntax
  contents:
  - "6.  Obsolete Syntax\n   Implementations of earlier draft versions of this specification\n\
    \   defined a different value for <scheme> than this version.  The\n   following\
    \ value for <scheme> is now deprecated and SHOULD NOT be\n   generated anymore.\
    \  Serving agents SHOULD still accept it for a\n   transition period as long as\
    \ the corresponding hash function is not\n   considered unsafe (see Section 7\
    \ for details) or already marked as\n   OBSOLETE in the \"Netnews Cancel-Lock\
    \ Hash Algorithms\" registry\n   (Section 8.3).\n      obs-scheme = \"sha1\"\n\
    \   It is important for backward compatibility that the deprecated value\n   for\
    \ <scheme> is not phased out too early.  Security and compatibility\n   concerns\
    \ should be carefully weighed before choosing to remove\n   <obs-scheme> from\
    \ existing implementations (or not implementing it in\n   new ones).\n   Earlier\
    \ draft versions of this specification allowed more liberal\n   syntax for <c-key-string>:\n\
    \      obs-c-key-string = 1*base64-octet\n      base64-octet     = ALPHA / DIGIT\
    \ / \"+\" / \"/\" / \"=\"\n   <obs-c-key-string> SHOULD NOT be generated but MUST\
    \ be accepted.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The authentication system defined in this document\
    \ provides no\n   integrity-checking properties.  Arbitrary modifications can\
    \ be\n   applied to an article on its way through the network, regardless of\n\
    \   the presence of a Cancel-Key header field.  A serving agent that\n   receives\
    \ an article that contains a Cancel-Key header field with a\n   matching <c-key>\
    \ element only gets the information that the\n   withdrawal of the target article\
    \ was approved by a legitimate person\n   or agent.\n   Example: A valid <c-key>\
    \ element is extracted from a cancel control\n   article and inserted into a forged\
    \ supersede article.  All servers on\n   the network that receive the forged supersede\
    \ article before the\n   cancel control article should accept the forged supersede.\
    \  But\n   because everybody can post articles with forged identity information\n\
    \   in the header (same as with spam email), the same result can be\n   achieved\
    \ by sending a forged new article using no authentication\n   system at all.\n\
    \   For originator and integrity checks, a signature-based authentication\n  \
    \ system is required (normally, OpenPGP [RFC4880] is used for this\n   purpose).\
    \  Both systems can be combined.\n   The important property of the hash function\
    \ used for <scheme> is the\n   preimage resistance.  A successful preimage attack\
    \ either reveals the\n   real Cancel-Key (that was used to create the Cancel-Lock\
    \ of the\n   original article) or gives a different Cancel-Key (that matches a\n\
    \   Cancel-Lock too).  This would break the authentication system defined\n  \
    \ in this document.\n   Collision resistance of the hash function used for <scheme>\
    \ is less\n   important.  Finding two <c-key> elements for the Cancel-Key header\n\
    \   field that match to a <c-lock> element of an arbitrary Cancel-Lock\n   header\
    \ field is not helpful to break the authentication system\n   defined in this\
    \ document (if a specific article is defined as the\n   target).  Only collateral\
    \ damage by arbitrary cancel or supersede is\n   possible.\n   Currently, there\
    \ is no known practicable preimage and second preimage\n   attack against the\
    \ hash function SHA1.  Therefore, there is no hurry\n   to replace it.  The reasons\
    \ why this document specifies hash\n   functions from the SHA2 family are:\n \
    \  o  The previous specification of the authentication system defined in\n   \
    \   this document -- [USEFOR-CANCEL-LOCK] -- is nearly two decades\n      old.\
    \  The client-side implementations are moving forward extremely\n      slowly,\
    \ too (newsreaders from the last millennium are still in\n      heavy use).  What\
    \ is defined today should be strong enough for the\n      next two decades or\
    \ so.\n   o  The collision resistance of SHA1 is already broken; therefore, it\n\
    \      is now obsolete for digital signatures as used in Transport Layer\n   \
    \   Security (TLS).  It is intended that an implementation of the\n      authentication\
    \ system defined in this document can share the same\n      cryptographic library\
    \ functions that are used for TLS.\n   o  It is intended that the same hash function\
    \ can be used for\n      <scheme> and (as the base) for the HMAC that is recommended\
    \ in\n      Section 4.  See notes below for HMAC-MD5 and HMAC-SHA1.\n   o  The\
    \ SHA2 family of hash algorithms is widely supported by\n      cryptographic libraries.\
    \  In contrast, SHA3 is currently too\n      recent and has not been studied enough\
    \ to be considered more\n      secure than SHA2.\n   The operation HMAC(sec, uid+mid)\
    \ as recommended in Section 4 must be\n   able to protect the local secret <sec>.\
    \  The Message-ID <mid> is\n   public (in the Message-ID header field body), and\
    \ <uid> is optional.\n   An attacker who wants to steal/use a local secret only\
    \ needs to break\n   this algorithm (regardless of <scheme>), because Cancel-Key\
    \ header\n   fields are explicitly published for every request to cancel or\n\
    \   supersede existing articles.\n   Even if HMAC-MD5 and HMAC-SHA1 are not considered\
    \ broken today, it is\n   desired to have a greater margin for security here.\
    \  Breaking\n   <scheme> only allows the authentication of a single forged cancel\
    \ or\n   supersede request.  With <sec> in hand, it is possible to forge such\n\
    \   requests for all articles that contain Cancel-Lock header field\n   bodies\
    \ with elements that were generated with this <sec> in the past.\n   Changing\
    \ <sec> at regular intervals can be used to mitigate potential\n   damage.\n \
    \  If an agent adds or appends multiple <c-lock> elements, it must not\n   use\
    \ the same K for them (by using different secrets (<sec>)).  Adding\n   multiple\
    \ <c-lock> elements with the same <scheme> and the same K\n   makes no sense (because\
    \ it would result in identical <c-lock>\n   elements); therefore, the case of\
    \ different <scheme> values is\n   relevant: a preimage attack on the different\
    \ hash algorithms may be\n   easier if the attacker knows that the output of those\
    \ hash algorithms\n   was created with the same input.\n   If an implementation\
    \ chooses to not implement the key calculation\n   algorithm recommended in Section\
    \ 4 or to implement it with the HMAC\n   based on a different hash function than\
    \ <scheme>, the key size used\n   should match the output size of the hash function\
    \ used for <scheme>.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   IANA has registered the following header fields in\
    \ the \"Permanent\n   Message Header Field Names\" registry, in accordance with\
    \ the\n   procedures set out in [RFC3864]:\n      Header field name: Cancel-Lock\n\
    \      Applicable protocol: netnews\n      Status: standard\n      Author/change\
    \ controller: IETF\n      Specification document(s): RFC 8315\n      Header field\
    \ name: Cancel-Key\n      Applicable protocol: netnews\n      Status: standard\n\
    \      Author/change controller: IETF\n      Specification document(s): RFC 8315\n\
    \   The \"Netnews Cancel-Lock Hash Algorithms\" registry is maintained by\n  \
    \ IANA.\n   The registry is available at\n   <https://www.iana.org/assignments/netnews-parameters/>.\n"
- title: 8.1.  Algorithm Name Registration Procedure
  contents:
  - "8.1.  Algorithm Name Registration Procedure\n   IANA will register new Cancel-Lock\
    \ hash algorithm names on a First\n   Come First Served basis, as defined in BCP\
    \ 26 [RFC8126].  IANA has\n   the right to reject obviously bogus registration\
    \ requests but will\n   perform no review of claims made in the registration form.\n\
    \   Registration of a Netnews Cancel-Lock hash algorithm is requested by\n   filling\
    \ in the following template and sending it via electronic mail\n   to IANA at\
    \ <iana@iana.org>:\n      Subject: Registration of Netnews Cancel-Lock hash algorithm\
    \ X\n      Netnews Cancel-Lock hash algorithm name:\n      Security considerations:\n\
    \      Published specification (recommended):\n      Contact for further information:\n\
    \      Intended usage: (One of COMMON, LIMITED USE, or OBSOLETE)\n      Owner/Change\
    \ controller:\n      Note: (Any other information that the author deems relevant\
    \ may be\n         added here.)\n   Any name that conforms to the syntax of a\
    \ Netnews Cancel-Lock hash\n   algorithm (see the definition of <scheme> in Section\
    \ 2) can be used;\n   in particular, Netnews Cancel-Lock algorithms are named\
    \ by strings\n   consisting of letters, digits, hyphens, and/or slashes.\n   Authors\
    \ may seek community review by posting a specification of their\n   proposed algorithm\
    \ as an Internet-Draft.  Netnews Cancel-Lock hash\n   algorithms intended for\
    \ widespread use should be standardized through\n   the normal IETF process, when\
    \ appropriate.\n   The IESG is considered to be the owner of all Netnews Cancel-Lock\n\
    \   hash algorithms that are on the IETF Standards Track.\n"
- title: 8.2.  Change Control
  contents:
  - "8.2.  Change Control\n   Once a Netnews Cancel-Lock hash algorithm registration\
    \ has been\n   published by IANA, the owner may request a change to its definition.\n\
    \   The change request follows the same procedure as the initial\n   registration\
    \ request.\n   The owner of a Netnews Cancel-Lock hash algorithm may pass\n  \
    \ responsibility for the algorithm to another person or agency by\n   informing\
    \ IANA; this can be done without discussion or review.\n   The IESG may reassign\
    \ responsibility for a Netnews Cancel-Lock hash\n   algorithm.  The most common\
    \ reason for this would be to enable\n   changes to be made to algorithms where\
    \ the owner of the registration\n   has died, has moved out of contact, or is\
    \ otherwise unable to make\n   changes that are important to the community.\n\
    \   Netnews Cancel-Lock hash algorithm registrations MUST NOT be deleted.\n  \
    \ Algorithms that are no longer believed appropriate for use can be\n   declared\
    \ OBSOLETE by a change to their \"intended usage\" field; such\n   algorithms\
    \ will be clearly marked in the registry published by IANA.\n   The IESG is considered\
    \ to be the owner of all Netnews Cancel-Lock\n   hash algorithms that are on the\
    \ IETF Standards Track.\n"
- title: 8.3.  Registration of the Netnews Cancel-Lock Hash Algorithms
  contents:
  - "8.3.  Registration of the Netnews Cancel-Lock Hash Algorithms\n   This section\
    \ gives a formal definition of the Netnews Cancel-Lock\n   hash algorithms as\
    \ required by Section 8.1 for the IANA registry.\n      Netnews Cancel-Lock hash\
    \ algorithm name: md5\n      Security considerations: See Section 7 of this document\n\
    \      Published specification: RFC 8315\n      Contact for further information:\
    \ Author of this document\n      Intended usage: OBSOLETE\n      Owner/Change\
    \ controller: IESG <iesg@ietf.org>\n      Note: Do not use this algorithm anymore\n\
    \      Netnews Cancel-Lock hash algorithm name: sha1\n      Security considerations:\
    \ See Section 7 of this document\n      Published specification: RFC 8315\n  \
    \    Contact for further information: Author of this document\n      Intended\
    \ usage: LIMITED USE\n      Owner/Change controller: IESG <iesg@ietf.org>\n  \
    \    Note: This algorithm is intended for backward compatibility\n      Netnews\
    \ Cancel-Lock hash algorithm name: sha224\n      Security considerations: See\
    \ Section 7 of this document\n      Published specification: RFC 8315\n      Contact\
    \ for further information: Author of this document\n      Intended usage: LIMITED\
    \ USE\n      Owner/Change controller: IESG <iesg@ietf.org>\n      Note: sha256\
    \ should be used instead; this is a truncated variant\n      Netnews Cancel-Lock\
    \ hash algorithm name: sha256\n      Security considerations: See Section 7 this\
    \ document\n      Published specification: RFC 8315\n      Contact for further\
    \ information: Author of this document\n      Intended usage: COMMON\n      Owner/Change\
    \ controller: IESG <iesg@ietf.org>\n      Note: This algorithm is mandatory to\
    \ implement\n      Netnews Cancel-Lock hash algorithm name: sha384\n      Security\
    \ considerations: See Section 7 of this document\n      Published specification:\
    \ RFC 8315\n      Contact for further information: Author of this document\n \
    \     Intended usage: LIMITED USE\n      Owner/Change controller: IESG <iesg@ietf.org>\n\
    \      Note: sha512 should be used instead; this is a truncated variant\n    \
    \  Netnews Cancel-Lock hash algorithm name: sha512\n      Security considerations:\
    \ See Section 7 of this document\n      Published specification: RFC 8315\n  \
    \    Contact for further information: Author of this document\n      Intended\
    \ usage: COMMON\n      Owner/Change controller: IESG <iesg@ietf.org>\n      Note:\
    \ This algorithm is optional\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3864]  Klyne, G., Nottingham, M., and J. Mogul, \"Registration\n     \
    \         Procedures for Message Header Fields\", BCP 90, RFC 3864,\n        \
    \      DOI 10.17487/RFC3864, September 2004,\n              <https://www.rfc-editor.org/info/rfc3864>.\n\
    \   [RFC4086]  Eastlake 3rd, D., Schiller, J., and S. Crocker,\n             \
    \ \"Randomness Requirements for Security\", BCP 106, RFC 4086,\n             \
    \ DOI 10.17487/RFC4086, June 2005,\n              <https://www.rfc-editor.org/info/rfc4086>.\n\
    \   [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n        \
    \      Encodings\", RFC 4648, DOI 10.17487/RFC4648, October 2006,\n          \
    \    <https://www.rfc-editor.org/info/rfc4648>.\n   [RFC5234]  Crocker, D., Ed.,\
    \ and P. Overell, \"Augmented BNF for\n              Syntax Specifications: ABNF\"\
    , STD 68, RFC 5234,\n              DOI 10.17487/RFC5234, January 2008,\n     \
    \         <https://www.rfc-editor.org/info/rfc5234>.\n   [RFC5536]  Murchison,\
    \ K., Ed., Lindsey, C., and D. Kohn, \"Netnews\n              Article Format\"\
    , RFC 5536, DOI 10.17487/RFC5536,\n              November 2009, <https://www.rfc-editor.org/info/rfc5536>.\n\
    \   [RFC5537]  Allbery, R., Ed., and C. Lindsey, \"Netnews Architecture\n    \
    \          and Protocols\", RFC 5537, DOI 10.17487/RFC5537,\n              November\
    \ 2009, <https://www.rfc-editor.org/info/rfc5537>.\n   [RFC6234]  Eastlake 3rd,\
    \ D. and T. Hansen, \"US Secure Hash Algorithms\n              (SHA and SHA-based\
    \ HMAC and HKDF)\", RFC 6234,\n              DOI 10.17487/RFC6234, May 2011,\n\
    \              <https://www.rfc-editor.org/info/rfc6234>.\n   [RFC8126]  Cotton,\
    \ M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing an IANA\
    \ Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI 10.17487/RFC8126,\
    \ June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in\n              RFC 2119\
    \ Key Words\", BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174, May 2017,\n\
    \              <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC1321]  Rivest, R., \"The MD5 Message-Digest\
    \ Algorithm\", RFC 1321,\n              DOI 10.17487/RFC1321, April 1992,\n  \
    \            <https://www.rfc-editor.org/info/rfc1321>.\n   [RFC2104]  Krawczyk,\
    \ H., Bellare, M., and R. Canetti, \"HMAC:\n              Keyed-Hashing for Message\
    \ Authentication\", RFC 2104,\n              DOI 10.17487/RFC2104, February 1997,\n\
    \              <https://www.rfc-editor.org/info/rfc2104>.\n   [RFC3174]  Eastlake\
    \ 3rd, D. and P. Jones, \"US Secure Hash Algorithm 1\n              (SHA1)\",\
    \ RFC 3174, DOI 10.17487/RFC3174, September 2001,\n              <https://www.rfc-editor.org/info/rfc3174>.\n\
    \   [RFC4880]  Callas, J., Donnerhacke, L., Finney, H., Shaw, D., and R.\n   \
    \           Thayer, \"OpenPGP Message Format\", RFC 4880,\n              DOI 10.17487/RFC4880,\
    \ November 2007,\n              <https://www.rfc-editor.org/info/rfc4880>.\n \
    \  [RFC6151]  Turner, S. and L. Chen, \"Updated Security Considerations\n    \
    \          for the MD5 Message-Digest and the HMAC-MD5 Algorithms\",\n       \
    \       RFC 6151, DOI 10.17487/RFC6151, March 2011,\n              <https://www.rfc-editor.org/info/rfc6151>.\n\
    \   [SHA]      National Institute of Standards and Technology, \"Secure\n    \
    \          Hash Standard (SHS)\", FIPS 180-4,\n              DOI 10.6028/NIST.FIPS.180-4,\
    \ August 2015,\n              <http://nvlpubs.nist.gov/nistpubs/FIPS/\n      \
    \        NIST.FIPS.180-4.pdf>.\n   [USEFOR-CANCEL-LOCK]\n              Lyall,\
    \ S., \"Cancel-Locks in Usenet articles.\", Work in\n              Progress, draft-ietf-usefor-cancel-lock-01,\
    \ November 1998.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The author acknowledges the original author of the Cancel-Lock\n\
    \   authentication system, as documented in [USEFOR-CANCEL-LOCK]: Simon\n   Lyall.\
    \  Simon wrote the original document and approved the usage of\n   his work for\
    \ this document.  This document is mostly based on his\n   work.  (It was originally\
    \ intended as revision 02 but was renamed\n   because the USEFOR IETF WG is now\
    \ closed.)\n   The author would like to thank the following individuals for\n\
    \   contributing their ideas and reviewing this specification: Russ\n   Allbery,\
    \ Urs Janssen, Richard Kettlewell, Marcel Logen, Holger\n   Marzen, Dennis Preiser,\
    \ and Emil Schuster.  Thanks also to Peter\n   Faust and Alfred Peters for providing\
    \ statistical data about the\n   algorithms currently in use.\n   Special thanks\
    \ to the Document Shepherd, Julien Elie; and to the\n   responsible Area Director,\
    \ Alexey Melnikov.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Michael Baeuerle\n   STZ Elektronik\n   Hofener Weg 33C\n\
    \   Remseck, Baden-Wuerttemberg  71686\n   Germany\n   Fax:   +49 7146 999061\n\
    \   Email: michael.baeuerle@stz-e.de\n"
