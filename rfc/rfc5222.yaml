- title: __initial_text__
  contents:
  - '            LoST: A Location-to-Service Translation Protocol

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes an XML-based protocol for mapping service\n\
    \   identifiers and geodetic or civic location information to service\n   contact\
    \ URIs.  In particular, it can be used to determine the\n   location-appropriate\
    \ Public Safety Answering Point (PSAP) for\n   emergency services.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n  5.1.  The Mapping Data Source: 'source', 'sourceId', and\n\
    \  5.3.  Describing the Service with the <displayName> Element  .... 8\n  5.5.\
    \  Defining the Service Region with the <serviceBoundary>\n  5.6.  Service Boundaries\
    \ by Reference: The\n"
- title: '6.  Path of a Request: The <path> Element  ....................... 10'
  contents:
  - '6.  Path of a Request: The <path> Element  ....................... 10

    '
- title: '7.  Identifying the Location Element Used for Mapping:'
  contents:
  - "7.  Identifying the Location Element Used for Mapping:\n    <locationUsed> ...............................................\
    \ 11\n"
- title: '8.  Mapping a Location and Service to URLs: <findService>  ....... 11'
  contents:
  - "8.  Mapping a Location and Service to URLs: <findService>  ....... 11\n  8.1.\
    \  Overview ................................................. 11\n  8.2.  Examples\
    \ ................................................. 11\n    8.2.1.  Example Using\
    \ Geodetic Coordinates ................... 11\n    8.2.2.  Civic Address Mapping\
    \ Example  ....................... 13\n  8.3.  Components of the <findService>\
    \ Request  ................. 15\n    8.3.1.  The <location> Element ...............................\
    \ 15\n    8.3.2.  Identifying the Service:  The <service> Element  ..... 16\n\
    \    8.3.3.  Recursion and Iteration  ............................. 16\n    8.3.4.\
    \  Service Boundary ..................................... 16\n    8.3.5.  Requesting\
    \ Civic Location Validation ................. 16\n  8.4.  Components of the Mapping\
    \ Response\n        <findServiceResponse>  ...................................\
    \ 18\n    8.4.1.  Overview ............................................. 18\n\
    \    8.4.2.  Civic Address Validation: The <locationValidation>\n            Element\
    \  ............................................. 19\n"
- title: 9.  Retrieving the Service Boundary via <getServiceBoundary> ..... 19
  contents:
  - '9.  Retrieving the Service Boundary via <getServiceBoundary> ..... 19

    '
- title: '10. List Services: <listServices>  ............................... 21'
  contents:
  - '10. List Services: <listServices>  ............................... 21

    '
- title: '11. List Services By Location: <listServicesByLocation>  ......... 22'
  contents:
  - '11. List Services By Location: <listServicesByLocation>  ......... 22

    '
- title: 12. Location Profiles  ........................................... 24
  contents:
  - "12. Location Profiles  ........................................... 24\n  12.1.\
    \ Location Profile Usage ................................... 25\n  12.2. Two-Dimensional\
    \ Geodetic Profile ......................... 30\n  12.3. Basic Civic Profile \
    \ ..................................... 31\n"
- title: 13. Errors, Warnings, and Redirects  ............................. 32
  contents:
  - "13. Errors, Warnings, and Redirects  ............................. 32\n  13.1.\
    \ Errors ................................................... 32\n  13.2. Warnings\
    \ ................................................. 34\n  13.3. Redirects  ...............................................\
    \ 36\n"
- title: '14. LoST Transport: HTTP ......................................... 36'
  contents:
  - '14. LoST Transport: HTTP ......................................... 36

    '
- title: 15. Relax NG Schema  ............................................. 37
  contents:
  - '15. Relax NG Schema  ............................................. 37

    '
- title: 16. Internationalization Considerations  ......................... 44
  contents:
  - '16. Internationalization Considerations  ......................... 44

    '
- title: 17. IANA Considerations  ......................................... 44
  contents:
  - "17. IANA Considerations  ......................................... 44\n  17.1.\
    \ U-NAPTR Registrations  ................................... 44\n  17.2. Content-Type\
    \ Registration for 'application/lost+xml' ..... 44\n  17.3. LoST Relax NG Schema\
    \ Registration  ....................... 46\n  17.4. LoST Namespace Registration\
    \  ............................. 46\n  17.5. LoST Location Profile Registry ...........................\
    \ 47\n"
- title: 18. Security Considerations  ..................................... 47
  contents:
  - '18. Security Considerations  ..................................... 47

    '
- title: 19. Acknowledgments  ............................................. 48
  contents:
  - '19. Acknowledgments  ............................................. 48

    '
- title: 20. References ................................................... 51
  contents:
  - "20. References ................................................... 51\n  20.1.\
    \ Normative References ..................................... 51\n  20.2. Informative\
    \ References ................................... 52\n"
- title: Appendix A.  Non-Normative RELAX NG Schema in XML Syntax ......... 54
  contents:
  - 'Appendix A.  Non-Normative RELAX NG Schema in XML Syntax ......... 54

    '
- title: Appendix B.  Examples Online ..................................... 67
  contents:
  - 'Appendix B.  Examples Online ..................................... 67

    '
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Protocols such as Naming Authority Pointer (NAPTR) records\
    \ and the\n   Service Location Protocol (SLP) can be used to discover servers\n\
    \   offering a particular service.  However, for an important class of\n   services\
    \ the appropriate specific service instance depends both on\n   the identity of\
    \ the service and the geographic location of the entity\n   that needs to reach\
    \ it.  Emergency telecommunications services are an\n   important example; here,\
    \ the service instance is a Public Safety\n   Answering Point (PSAP) that has\
    \ jurisdiction over the location of the\n   user making the call.  The desired\
    \ PSAP isn't necessarily the one\n   that is topologically or even line-of-sight\
    \ closest to the caller;\n   rather, it is the one that serves the caller's location\
    \ based on\n   jurisdictional boundaries.\n   This document describes a protocol\
    \ for mapping a service identifier\n   and location information compatible with\
    \ the Presence Information\n   Data Format Location Object (PIDF-LO) [6] to one\
    \ or more service\n   URIs.  Service identifiers take the form of the service\
    \ URNs\n   described in [9].  Location information here includes revised civic\n\
    \   location information [10] and a subset of the PIDF-LO profile [13],\n   which\
    \ consequently includes the Geo-Shapes [12] defined for GML [11].\n   Example\
    \ service URI schemes include sip [14], xmpp [15], and tel\n   [16].  While the\
    \ initial focus is on providing mapping functions for\n   emergency services,\
    \ it is likely that the protocol is applicable to\n   other service URNs.  For\
    \ example, in the United States, the \"2-1-1\"\n   and \"3-1-1\" service numbers\
    \ follow a similar location-to-service\n   behavior as emergency services.\n \
    \  This document names this protocol \"LoST\", for Location-to-Service\n   Translation.\
    \  LoST satisfies the requirements [18] for mapping\n   protocols.  LoST provides\
    \ a number of operations, centered around\n   mapping locations and service URNs\
    \ to service URLs and associated\n   information.  LoST mapping queries can contain\
    \ either civic or\n   geodetic location information.  For civic addresses, LoST\
    \ can\n   indicate which parts of the civic address are known to be valid or\n\
    \   invalid, thus providing address validation, as described in Section\n   3.5\
    \ of [18].  LoST indicates errors in the location data to\n   facilitate debugging\
    \ and proper user feedback, but also provides\n   best-effort answers.\n   LoST\
    \ queries can be resolved recursively or iteratively.  To minimize\n   round trips\
    \ and to provide robustness against network failures, LoST\n   supports caching\
    \ of individual mappings and indicates the region for\n   which the same answer\
    \ would be returned (\"service region\").\n   As defined in this document, LoST\
    \ messages are carried in HTTP and\n   HTTPS protocol exchanges, facilitating\
    \ use of TLS for protecting the\n   integrity and confidentiality of requests\
    \ and responses.\n   This document focuses on the description of the protocol\
    \ between the\n   mapping client and the mapping server.  Other functions, such\
    \ as\n   discovery of mapping servers, data replication and the overall\n   mapping\
    \ server architecture are described in a separate document\n   [19].\n   The query\
    \ message carries location information and a service\n   identifier encoded as\
    \ a Uniform Resource Name (URN) (see [9]) from\n   the LoST client to the LoST\
    \ server.  The LoST server uses its\n   database to map the input values to one\
    \ or more Uniform Resource\n   Identifiers (URIs) and returns those URIs along\
    \ with optional\n   information, such as hints about the service boundary, in\
    \ a response\n   message to the LoST client.  If the server cannot resolve the\
    \ query\n   itself, it may in turn query another server or return the address\
    \ of\n   another LoST server, identified by a LoST server name.  In addition\n\
    \   to the mapping function described in Section 8, the protocol also\n   allows\
    \ to retrieve the service boundary (see Section 9) and to list\n   the services\
    \ available for a particular location (see Section 11) or\n   supported by a particular\
    \ server (see Section 10).\n"
- title: 2.  Terminology and Requirements Notation
  contents:
  - "2.  Terminology and Requirements Notation\n   The key words \"MUST\", \"MUST\
    \ NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted\
    \ as described in [1].\n   This document uses the following terms:\n   Mapping:\n\
    \      Mapping is a process that takes a location and a service\n      identifier\
    \ as inputs and returns one or more URIs.  Those URIs can\n      point either\
    \ to a host providing that service or to a host that in\n      turn routes the\
    \ request to the final destination.  This definition\n      is a generalization\
    \ of the term \"mapping\" as used in [18], because\n      LoST can be used for\
    \ non-emergency services.\n   LoST client:\n      A host acts as a LoST client\
    \ if it sends LoST query messages and\n      receives LoST response messages.\n\
    \   LoST server:\n      A host acts as a LoST server if it receives LoST query\
    \ messages\n      and sends LoST response messages.  In recursive operation, the\n\
    \      same entity may be both a client and a server.\n   Authoritative LoST server:\n\
    \      An authoritative server acts only as a server and successfully\n      resolves\
    \ the input location and service identifier to a URI or set\n      of URIs.\n\
    \   Service boundary:\n      A service boundary circumscribes the region within\
    \ which all\n      locations map to the same service URI or set of URIs for a\
    \ given\n      service.  A service boundary may consist of several non-contiguous\n\
    \      geometric shapes.\n   Validation:\n      The term \"validation\" describes\
    \ the behavior defined as \"location\n      validation\" in Section 3.5 of [18].\n\
    \   Additional emergency service terminology can be found in [18].\n"
- title: 3.  Overview of Protocol Usage
  contents:
  - "3.  Overview of Protocol Usage\n   The LoST protocol supports the following types\
    \ of queries and\n   responses:\n   <findService> and <findServiceResponse>\n\
    \      A LoST client retrieves contact URIs based on location information\n  \
    \    and a service identifier with this request and response.  The same\n    \
    \  query type may also ask for location validation and for service\n      numbers,\
    \ either combined with a mapping request or separately.\n      The details can\
    \ be found in Section 8.\n   <getServiceBoundary> and <getServiceBoundaryResponse>\n\
    \      A LoST client obtains a service boundary with this request and\n      response,\
    \ as described in Section 9.\n   <listServices> and <listServicesResponse>\n \
    \     With this request and response, a LoST client can find out which\n     \
    \ services a LoST server supports, as described in Section 10.\n   <listServicesByLocation>\
    \ and <listServicesByLocationResponse>\n      A LoST client can determine with\
    \ this request and response which\n      services are available for a specific\
    \ location region.  Section 11\n      describes the details.\n   LoST clients\
    \ may initiate any of the above queries at any time.\n   Among the common triggers\
    \ are:\n   1.  when the client initially starts up or attaches to a network;\n\
    \   2.  when the client detects that its location has changed\n       sufficiently\
    \ that it is outside the bounds of the service region;\n   3.  when a SIP message\
    \ arrives at a SIP proxy performing location-\n       based call routing;\n  \
    \ 4.  when cached mapping information has expired; and\n   5.  when invoking a\
    \ particular service.  At that time, a client may\n       omit requests for service\
    \ boundaries or other auxiliary\n       information.\n   A service-specific Best\
    \ Current Practice (BCP) document, such as\n   [21], governs whether a client\
    \ is expected to invoke the mapping\n   service just before needing the service\
    \ or whether to rely on cached\n   answers.  Cache entries expire at their expiration\
    \ time (see\n   Section 5.2), or they become invalid if the caller's device moves\n\
    \   beyond the boundaries of the service region.  Service-specific Best\n   Current\
    \ Practice documents may also provide guidance on the contact\n   URI schemes\
    \ most appropriate to the service.  As a general set of\n   guidelines, URI schemes\
    \ that do not provide mechanisms for actually\n   initiating a contact method\
    \ should be avoided (examples include data,\n   info, cid, and tag) as transforming\
    \ those references into contact\n   mechanisms requires a layer of indirection\
    \ that makes the overall\n   mechanism more fragile.  Provisionally registered\
    \ URI schemes should\n   also be carefully considered before use, because they\
    \ are subject to\n   change in core semantics.\n"
- title: 4.  LoST Servers and Their Resolution
  contents:
  - "4.  LoST Servers and Their Resolution\n   LoST servers are identified by U-NAPTR/DDDS\
    \ (URI-Enabled NAPTR/\n   Dynamic Delegation Discovery Service) [8] application\
    \ unique strings,\n   in the form of a DNS name.  An example is 'lostserver.example.com'.\n\
    \   Clients need to use the U-NAPTR [8] specification described below to\n   obtain\
    \ a URI (indicating host and protocol) for the applicable LoST\n   service.  In\
    \ this document, only the HTTP and HTTPS URL schemes are\n   defined.  Note that\
    \ the HTTP URL can be any valid HTTP URL, including\n   those containing path\
    \ elements.\n   The following two DNS entries show the U-NAPTR resolution for\n\
    \   \"example.com\" to the HTTPS URL https://lostserv.example.com/secure or\n\
    \   the HTTP URL http://lostserver.example.com, with the former being\n   preferred.\n\
    \       example.com.\n       IN NAPTR 100  10   \"u\"    \"LoST:https\"\n    \
    \        \"!.*!https://lostserver.example.com/secure!\"  \"\"\n       IN NAPTR\
    \ 200  10   \"u\"    \"LoST:http\"\n            \"!.*!http://lostserver.example.com!\"\
    \  \"\"\n   Clients learn the LoST server's host name by means beyond the scope\n\
    \   of this specification, such as SIP configuration and DHCP [25].\n"
- title: 5.  The <mapping> Element
  contents:
  - "5.  The <mapping> Element\n   The <mapping> element is the core data element\
    \ in LoST, describing a\n   service region and the associated service URLs.  Its\
    \ attributes and\n   elements are described in subsections below.\n"
- title: '5.1.  The Mapping Data Source: ''source'', ''sourceId'', and ''lastUpdated'''
  contents:
  - "5.1.  The Mapping Data Source: 'source', 'sourceId', and 'lastUpdated'\n    \
    \  Attributes\n   The 'source', 'sourceId', and 'lastUpdated' attributes uniquely\n\
    \   identify a particular mapping record.  They are created by the\n   authoritative\
    \ source for a mapping and are never modified when a\n   mapping is served from\
    \ a cache.  All three attributes are REQUIRED\n   for all <mapping> elements.\
    \  A receiver can replace a mapping with\n   another one having the same 'source'\
    \ and 'sourceId' and a more recent\n   time in 'lastUpdated'.\n   The 'source'\
    \ attribute contains a LoST application unique string\n   identifying the authoritative\
    \ generator of the mapping (Section 4).\n   The 'sourceId' attribute identifies\
    \ a particular mapping and contains\n   an opaque token that MUST be unique among\
    \ all different mappings\n   maintained by the authoritative source for that particular\
    \ service.\n   For example, a Universally Unique Identifier (UUID) is a suitable\n\
    \   format.\n   The 'lastUpdated' attribute describes when a specific instance\
    \ of\n   mapping, identified by the combination of 'source' and 'sourceId',\n\
    \   was last changed.  The contents of this attribute has the XML data\n   type\
    \ dateTime in its timezoned form, using the canonical UTC\n   representation with\
    \ the letter 'Z' as the timezone indicator.\n"
- title: '5.2.  Mapping Validity:  The ''expires'' Attribute'
  contents:
  - "5.2.  Mapping Validity:  The 'expires' Attribute\n   The 'expires' attribute\
    \ contains the absolute time at which the\n   mapping becomes invalid.  The contents\
    \ of this attribute is a\n   timezoned XML type dateTime, in canonical representation.\
    \  The\n   <mapping> element MUST include the 'expires' attribute.\n   Optionally,\
    \ this attribute may contain the values of 'NO-CACHE' and\n   'NO-EXPIRATION'\
    \ instead of a dateTime value.  The value 'NO-CACHE' is\n   an indication that\
    \ the mapping should not be cached.  The value of\n   'NO-EXPIRATION' is an indication\
    \ that the mapping does not expire.\n   On occasion, a server may be forced to\
    \ return an expired mapping if\n   it cannot reach the authoritative server or\
    \ the server fails to\n   return a usable answer.  Clients and servers MAY cache\
    \ the mapping so\n   that they have at least some information available.  Caching\
    \ servers\n   that have such stale information SHOULD re-attempt the query each\n\
    \   time a client requests a mapping.  Since the expired mapping will be\n   returned\
    \ to the client as a non-error/non-warning response, the\n   client MUST check\
    \ the 'expires' attribute; if the mapping has\n   expired, local policy at the\
    \ client determines whether it discards\n   the answer and tries again later or\
    \ uses the possibly stale response.\n"
- title: 5.3.  Describing the Service with the <displayName> Element
  contents:
  - "5.3.  Describing the Service with the <displayName> Element\n   Zero or more\
    \ <displayName> elements describe the service with a\n   string that is suitable\
    \ for display to human users, each annotated\n   with the 'xml:lang' attribute\
    \ that contains a language tag to aid in\n   the rendering of text.\n"
- title: '5.4.  The Mapped Service: The <service> Element'
  contents:
  - "5.4.  The Mapped Service: The <service> Element\n   The mandatory <service> element\
    \ identifies the service for which this\n   mapping applies.  Two cases need to\
    \ be distinguished when the LoST\n   server sets the <service> element in the\
    \ response message:\n   1.  If the requested service, identified by the service\
    \ URN [9] in\n       the <service> element of the request, exists for the location\n\
    \       indicated, then the LoST server copies the service URN from the\n    \
    \   request into the <service> element.\n   2.  If, however, the requested service,\
    \ identified by the service URN\n       [9] in the <service> element in the request,\
    \ does not exist for\n       the location indicated, the server either can return\
    \ a\n       <serviceNotImplemented> (Section 13.1) error or can provide an\n \
    \      alternate service that approximates the desired service for that\n    \
    \   location.  In the latter case, the server MUST include a\n       <service>\
    \ element with the alternative service URN.  The choice\n       of service URN\
    \ is left to local policy, but the alternate service\n       should be able to\
    \ satisfy the original service request.\n"
- title: 5.5.  Defining the Service Region with the <serviceBoundary> Element
  contents:
  - "5.5.  Defining the Service Region with the <serviceBoundary> Element\n   A response\
    \ MAY indicate the region for which the service URL returned\n   would be the\
    \ same as in the actual query, the so-called service\n   region.  The service\
    \ region can be indicated by value or by reference\n   (see Section 5.6).  If\
    \ a client moves outside the service area and\n   wishes to obtain current service\
    \ data, it sends a new query with its\n   current location.  The service region\
    \ is described by value in one or\n   more <serviceBoundary> elements, each formatted\
    \ according to a\n   specific location profile, identified by the 'profile' attribute\
    \ (see\n   Section 12). <serviceBoundary> elements formatted according to\n  \
    \ different location profiles are alternative representations of the\n   same\
    \ area, not additive to one another; this allows a client\n   understanding only\
    \ one of the profile types to be sure it has a\n   complete view of the serviceBoundary.\
    \  Within a serviceBoundary\n   element there may, however, be multiple locations\
    \ which are additive;\n   this is necessary because some <serviceBoundary> areas\
    \ could not be\n   easily expressed with a single shape or civic location.  If\
    \ included\n   in a response, the <serviceBoundary> element MUST contain at least\n\
    \   one service boundary that uses the same profile as the request.\n   A service\
    \ boundary is requested by the client, using the\n   'serviceBoundary' attribute\
    \ in the request with the value set to\n   \"value\".\n"
- title: '5.6.  Service Boundaries by Reference: The <serviceBoundaryReference>'
  contents:
  - "5.6.  Service Boundaries by Reference: The <serviceBoundaryReference>\n     \
    \ Element\n   Since geodetic service boundaries may contain thousands of points\
    \ and\n   can thus be quite large, clients may wish to conserve bandwidth by\n\
    \   requesting a reference to the service boundary instead of the value\n   described\
    \ in Section 5.5.  The identifier of the service boundary is\n   returned as an\
    \ attribute of the <serviceBoundaryReference> element,\n   along with a LoST application\
    \ unique string (see Section 4)\n   identifying the server from where it can be\
    \ retrieved.  The actual\n   value of the service boundary is then retrieved with\
    \ the\n   getServiceBoundary (Section 9) request.\n   A reference to a service\
    \ boundary is requested by the client using\n   the 'serviceBoundary' attribute\
    \ in the request with the value set to\n   \"reference\".  A LoST server may decide,\
    \ based on local policy, to\n   return the service boundary by value or to omit\
    \ the\n   <serviceBoundaryReference> element in the response.\n   The identifier\
    \ is a random token with at least 128 bits of entropy\n   and can be assumed to\
    \ be globally unique.  It uniquely references a\n   particular boundary.  If the\
    \ boundary changes, a new identifier MUST\n   be chosen.  Because of these properties,\
    \ a client receiving a mapping\n   response can simply check if it already has\
    \ a copy of the boundary\n   with that identifier.  If so, it can skip checking\
    \ with the server\n   whether the boundary has been updated.  Since service boundaries\
    \ are\n   likely to remain unchanged for extended periods of time, possibly\n\
    \   exceeding the normal lifetime of the service URL, this approach\n   avoids\
    \ unnecessarily refreshing the boundary information just because\n   the remainder\
    \ of the mapping has become invalid.\n"
- title: '5.7.  The Service Number: The <serviceNumber> Element'
  contents:
  - "5.7.  The Service Number: The <serviceNumber> Element\n   The service number\
    \ is returned in the optional <serviceNumber>\n   element.  It contains a string\
    \ of digits, * and # that a user on a\n   device with a 12-key dial pad could\
    \ use to reach that particular\n   service.\n"
- title: '5.8.  Service URLs: The <uri> Element'
  contents:
  - "5.8.  Service URLs: The <uri> Element\n   The response returns the service URLs\
    \ in one or more <uri> elements.\n   The URLs MUST be absolute URLs.  The ordering\
    \ of the URLs has no\n   particular significance.  Each URL scheme MUST only appear\
    \ at most\n   once, but it is permissible to include both secured and regular\n\
    \   versions of a protocol, such as both 'http' and 'https' or 'sip' and\n   'sips'.\n"
- title: '6.  Path of a Request: The <path> Element'
  contents:
  - "6.  Path of a Request: The <path> Element\n   To prevent loops and to allow tracing\
    \ of request and response paths,\n   all requests that allow recursion include\
    \ a <path> element that\n   contains one or more <via> elements, each possessing\
    \ an attribute\n   containing a LoST application unique string (see Section 4).\
    \  The\n   order of <via> elements corresponds to the order of LoST servers,\n\
    \   i.e., the first <via> element identifies the server that initially\n   received\
    \ the request from the client issuing the request.  Every\n   server in a recursive\
    \ query operation is included in the <path>\n   element, including the first server\
    \ to receive it.\n   The server that answers the request instead of forwarding\
    \ it, such as\n   the authoritative server, copies the <path> element verbatim\
    \ into the\n   response.  The <path> element is not modified in responses as the\n\
    \   responses traverses the server chain back to the querying client.\n   If a\
    \ query is answered iteratively, the querier includes all servers\n   that it\
    \ has already contacted.\n   When a cached mapping is returned, then the <path>\
    \ element cached\n   together with the mapping is returned.\n   The example in\
    \ Figure 4 indicates that the answer was given to the\n   client by the LoST server\
    \ at esgw.ueber-110.de.example, which got the\n   answer from the (authoritative)\
    \ LoST server at\n   polizei.muenchen.de.example.\n"
- title: '7.  Identifying the Location Element Used for Mapping: <locationUsed>'
  contents:
  - "7.  Identifying the Location Element Used for Mapping: <locationUsed>\n   Several\
    \ of the requests can provide one or more <location> elements,\n   among which\
    \ the server gets to choose.  It is useful for the client\n   to be able to determine\
    \ which one was actually used in producing the\n   result.  For that purpose,\
    \ the <location> tag MUST contain an 'id'\n   attribute that uniquely identifies\
    \ the <location> element.  The\n   format of the identifier is left to the client;\
    \ it could, for\n   example, use a hash of the location information.  The server\
    \ returns\n   the identifier for the <location> element it used in the\n   <locationUsed>\
    \ tag.\n"
- title: '8.  Mapping a Location and Service to URLs: <findService>'
  contents:
  - '8.  Mapping a Location and Service to URLs: <findService>

    '
- title: 8.1.  Overview
  contents:
  - "8.1.  Overview\n   The <findService> query constitutes the core of the LoST\n\
    \   functionality, mapping civic or geodetic locations to URLs and\n   associated\
    \ data.  After giving an example, we enumerate the elements\n   of the query and\
    \ response.\n"
- title: 8.2.  Examples
  contents:
  - '8.2.  Examples

    '
- title: 8.2.1.  Example Using Geodetic Coordinates
  contents:
  - "8.2.1.  Example Using Geodetic Coordinates\n   The following is an example of\
    \ mapping a service to a location using\n   geodetic coordinates, for the service\
    \ associated with the police\n   (urn:service:sos.police).\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <findService\n     xmlns=\"urn:ietf:params:xml:ns:lost1\"\
    \n     xmlns:p2=\"http://www.opengis.net/gml\"\n     serviceBoundary=\"value\"\
    \n     recursive=\"true\">\n     <location id=\"6020688f1ce1896d\" profile=\"\
    geodetic-2d\">\n       <p2:Point id=\"point1\" srsName=\"urn:ogc:def:crs:EPSG::4326\"\
    >\n          <p2:pos>37.775 -122.422</p2:pos>\n       </p2:Point>\n     </location>\n\
    \     <service>urn:service:sos.police</service>\n   </findService>\n         \
    \        Figure 1: A <findService> geodetic query\n   Given the query above, a\
    \ server would respond with a service, and\n   information related to that service.\
    \  In the example below, the\n   server has mapped the location given by the client\
    \ for a police\n   service to the New York City Police Department, instructing\
    \ the\n   client that it may contact them via the URIs \"sip:nypd@example.com\"\
    \n   and \"xmpp:nypd@example.com\".  The server has also given the client a\n\
    \   geodetic, two-dimensional boundary for this service.  The mapping was\n  \
    \ last updated on November 1, 2006 and expires on January 1, 2007.  If\n   the\
    \ client's location changes beyond the given service boundary or\n   the expiration\
    \ time has been reached, it may want to requery for this\n   information, depending\
    \ on the usage environment of LoST.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <findServiceResponse xmlns=\"urn:ietf:params:xml:ns:lost1\"\n     xmlns:p2=\"\
    http://www.opengis.net/gml\">\n     <mapping\n       expires=\"2007-01-01T01:44:33Z\"\
    \n       lastUpdated=\"2006-11-01T01:00:00Z\"\n       source=\"authoritative.example\"\
    \n       sourceId=\"7e3f40b098c711dbb6060800200c9a66\">\n       <displayName xml:lang=\"\
    en\">\n         New York City Police Department\n       </displayName>\n     \
    \  <service>urn:service:sos.police</service>\n       <serviceBoundary profile=\"\
    geodetic-2d\">\n         <p2:Polygon srsName=\"urn:ogc:def::crs:EPSG::4326\">\n\
    \           <p2:exterior>\n             <p2:LinearRing>\n               <p2:pos>37.775\
    \ -122.4194</p2:pos>\n               <p2:pos>37.555 -122.4194</p2:pos>\n     \
    \          <p2:pos>37.555 -122.4264</p2:pos>\n               <p2:pos>37.775 -122.4264</p2:pos>\n\
    \               <p2:pos>37.775 -122.4194</p2:pos>\n             </p2:LinearRing>\n\
    \           </p2:exterior>\n         </p2:Polygon>\n       </serviceBoundary>\n\
    \       <uri>sip:nypd@example.com</uri>\n       <uri>xmpp:nypd@example.com</uri>\n\
    \       <serviceNumber>911</serviceNumber>\n     </mapping>\n     <path>\n   \
    \    <via source=\"resolver.example\"/>\n       <via source=\"authoritative.example\"\
    />\n     </path>\n     <locationUsed id=\"6020688f1ce1896d\"/>\n   </findServiceResponse>\n\
    \             Figure 2: A <findServiceResponse> geodetic answer\n"
- title: 8.2.2.  Civic Address Mapping Example
  contents:
  - "8.2.2.  Civic Address Mapping Example\n   The example below shows how to map\
    \ a service to a location much like\n   the example in Section 8.2.1, but using\
    \ civic address location\n   information.  In this example, the client requests\
    \ the service\n   associated with police (urn:service:sos.police) along with a\
    \ specific\n   civic address (house number 6 on a street named Otto-Hahn-Ring\
    \ in\n   Munich, Germany).\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  \
    \ <findService xmlns=\"urn:ietf:params:xml:ns:lost1\"\n     recursive=\"true\"\
    \ serviceBoundary=\"value\">\n     <location id=\"627b8bf819d0bad4d\" profile=\"\
    civic\">\n       <civicAddress\n         xmlns=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\"\
    >\n         <country>DE</country>\n         <A1>Bavaria</A1>\n         <A3>Munich</A3>\n\
    \         <A6>Otto-Hahn-Ring</A6>\n         <HNO>6</HNO>\n         <PC>81675</PC>\n\
    \       </civicAddress>\n     </location>\n     <service>urn:service:sos.police</service>\n\
    \   </findService>\n               Figure 3: A <findService> civic address query\n\
    \   Given the query above, a server would respond with a service, and\n   information\
    \ related to that service.  In the example below, the\n   server has mapped the\
    \ location given by the client for a police\n   service to the Muenchen Polizei-Abteilung,\
    \ instructing the client\n   that it may contact them via the URIs sip:munich-police@example.com\n\
    \   and xmpp:munich-police@example.com.  The server has also given the\n   client\
    \ a civic address boundary (the city of Munich) for this\n   service.  The mapping\
    \ was last updated on November 1, 2006 by the\n   authoritative source \"polizei.muenchen.de.example\"\
    \ and expires on\n   January 1, 2007.  This instructs the client to requery for\
    \ the\n   information if its location changes beyond the given service boundary\n\
    \   (i.e., beyond the indicated district of Munich) or after January 1,\n   2007.\n\
    \    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <findServiceResponse xmlns=\"\
    urn:ietf:params:xml:ns:lost1\">\n      <mapping\n        expires=\"2007-01-01T01:44:33Z\"\
    \n        lastUpdated=\"2006-11-01T01:00:00Z\"\n        source=\"esgw.ueber-110.de.example\"\
    \n        sourceId=\"e8b05a41d8d1415b80f2cdbb96ccf109\">\n        <displayName\
    \ xml:lang=\"de\">\n          Muenchen Polizei-Abteilung\n        </displayName>\n\
    \        <service>urn:service:sos.police</service>\n        <serviceBoundary\n\
    \          profile=\"civic\">\n          <civicAddress\n            xmlns=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\"\
    >\n            <country>DE</country>\n            <A1>Bavaria</A1>\n         \
    \   <A3>Munich</A3>\n            <PC>81675</PC>\n          </civicAddress>\n \
    \       </serviceBoundary>\n        <uri>sip:munich-police@example.com</uri>\n\
    \        <uri>xmpp:munich-police@example.com</uri>\n        <serviceNumber>110</serviceNumber>\n\
    \      </mapping>\n      <path>\n        <via source=\"esgw.ueber-110.de.example\"\
    />\n        <via source=\"polizei.muenchen.de.example\"/>\n      </path>\n   \
    \   <locationUsed id=\"627b8bf819d0bad4d\"/>\n    </findServiceResponse>\n   \
    \       Figure 4: A <findServiceResponse> civic address answer\n"
- title: 8.3.  Components of the <findService> Request
  contents:
  - "8.3.  Components of the <findService> Request\n   The <findService> request includes\
    \ attributes and elements that\n   govern whether the request is handled iteratively\
    \ or recursively,\n   whether location validation is performed, and which elements\
    \ may be\n   contained in the response.\n"
- title: 8.3.1.  The <location> Element
  contents:
  - "8.3.1.  The <location> Element\n   The <findService> query communicates location\
    \ information using one\n   or more <location> elements, which MUST conform to\
    \ a location profile\n   (see Section 12).  There MUST NOT be more than one location\
    \ element\n   for each distinct location profile.  The order of location elements\n\
    \   is significant; the server uses the first location element where it\n   understands\
    \ the location profile.\n"
- title: '8.3.2.  Identifying the Service:  The <service> Element'
  contents:
  - "8.3.2.  Identifying the Service:  The <service> Element\n   The type of service\
    \ desired is specified by the <service> element.\n   It contains service URNs\
    \ from the registry established in [9].\n"
- title: 8.3.3.  Recursion and Iteration
  contents:
  - "8.3.3.  Recursion and Iteration\n   LoST can operate in either recursive or iterative\
    \ mode, on a request-\n   by-request basis.  In recursive mode, the LoST server\
    \ initiates\n   queries on behalf of the requester and returns the result to the\n\
    \   requester.\n   In iterative mode, the server contacted returns a redirection\n\
    \   response indicating the next server to be queried if the server\n   contacted\
    \ cannot provide an answer itself.\n   For the queries defined in this document,\
    \ only the LoST <findService>\n   and <listServicesByLocation> queries can be\
    \ recursive, as indicated\n   by the 'recursive' attribute.  A value of \"true\"\
    \ indicates a\n   recursive query, with the default being \"false\" when the attribute\
    \ is\n   omitted.  Regardless of the attribute, a server MAY always answer a\n\
    \   query by providing a LoST application unique string (see Section 4),\n   i.e.,\
    \ indirection; however, it MUST NOT recurse if the attribute is\n   \"false\"\
    .\n"
- title: 8.3.4.  Service Boundary
  contents:
  - "8.3.4.  Service Boundary\n   LoST <mapping> elements can describe the service\
    \ boundary either by\n   value or by reference.  Returning a service boundary\
    \ reference is\n   generally more space-efficient for geospatial (polygon) boundaries\n\
    \   and if the boundaries change rarely, but does incur an additional\n   <getServiceBoundary>\
    \ request.  The querier can express a preference\n   for one or the other modality\
    \ with the 'serviceBoundary' attribute in\n   the <findService> request, but the\
    \ server makes the final decision as\n   to whether to return a reference or a\
    \ value.\n"
- title: 8.3.5.  Requesting Civic Location Validation
  contents:
  - "8.3.5.  Requesting Civic Location Validation\n   Civic address validation is\
    \ requested by setting the optional\n   attribute 'validateLocation' to true.\
    \  If the attribute is omitted,\n   it is assumed to be false.  The response is\
    \ described in\n   Section 8.4.2.  The example in Figure 5 demonstrates address\n\
    \   validation.  If the server chooses a geodetic location among the\n   locations\
    \ provided in a request, the attribute is ignored.\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <findService\n     xmlns=\"urn:ietf:params:xml:ns:lost1\"\n    \
    \ recursive=\"true\"\n     validateLocation=\"true\"\n     serviceBoundary=\"\
    value\">\n     <location id=\"627b8bf819d0bad4d\" profile=\"civic\">\n       <civicAddress\n\
    \         xmlns=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\">\n       \
    \  <country>DE</country>\n         <A1>Bavaria</A1>\n         <A3>Munich</A3>\n\
    \         <A6>Otto-Hahn-Ring</A6>\n         <HNO>6</HNO>\n         <PC>81675</PC>\n\
    \       </civicAddress>\n     </location>\n     <service>urn:service:sos.police</service>\n\
    \   </findService>\n      Figure 5: A <findService> query with address validation\
    \ request\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <findServiceResponse\
    \ xmlns=\"urn:ietf:params:xml:ns:lost1\">\n     <mapping\n       expires=\"2007-01-01T01:44:33Z\"\
    \n       lastUpdated=\"2006-11-01T01:00:00Z\"\n       source=\"authoritative.example\"\
    \n       sourceId=\"4db898df52b84edfa9b6445ea8a0328e\">\n       <displayName xml:lang=\"\
    de\">\n         Muenchen Polizei-Abteilung\n       </displayName>\n       <service>urn:service:sos.police</service>\n\
    \       <serviceBoundary profile=\"civic\">\n         <civicAddress\n        \
    \   xmlns=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\">\n           <country>DE</country>\n\
    \           <A1>Bavaria</A1>\n           <A3>Munich</A3>\n           <PC>81675</PC>\n\
    \         </civicAddress>\n       </serviceBoundary>\n       <uri>sip:munich-police@example.com</uri>\n\
    \       <uri>xmpp:munich-police@example.com</uri>\n       <serviceNumber>110</serviceNumber>\n\
    \     </mapping>\n     <locationValidation>\n       <valid>country A1 A3 A6</valid>\n\
    \       <invalid>PC</invalid>\n       <unchecked>HNO</unchecked>\n     </locationValidation>\n\
    \     <path>\n       <via source=\"resolver.example\"/>\n       <via source=\"\
    authoritative.example\"/>\n     </path>\n     <locationUsed id=\"627b8bf819d0bad4d\"\
    />\n   </findServiceResponse>\n     Figure 6: A <findServiceResponse> message\
    \ with address validation\n                                information\n"
- title: 8.4.  Components of the Mapping Response <findServiceResponse>
  contents:
  - '8.4.  Components of the Mapping Response <findServiceResponse>

    '
- title: 8.4.1.  Overview
  contents:
  - "8.4.1.  Overview\n   Mapping responses consist of the <mapping> element (Section\
    \ 5)\n   describing the mapping itself, possibly followed by warnings\n   (Section\
    \ 13.2), location validation information (Section 8.4.2), and\n   an indication\
    \ of the path (Section 6) the response has taken.\n"
- title: '8.4.2.  Civic Address Validation: The <locationValidation> Element'
  contents:
  - "8.4.2.  Civic Address Validation: The <locationValidation> Element\n   A server\
    \ can indicate in its response which civic address elements it\n   has recognized\
    \ as valid, which ones it has ignored, and which ones it\n   has checked and found\
    \ to be invalid.  The server SHOULD include this\n   information if the 'validateLocation'\
    \ attribute in the request was\n   true, but local policy at the server may allow\
    \ this information to be\n   omitted.  Each element contains a list of tokens\
    \ separated by\n   whitespace, enumerating the civic location labels used in child\n\
    \   elements of the <civicAddress> element.  The <valid> element\n   enumerates\
    \ those civic address elements that have been recognized as\n   valid by the LoST\
    \ server and that have been used to determine the\n   mapping.  The <unchecked>\
    \ elements enumerates the civic address\n   elements that the server did not check\
    \ and that were not used in\n   determining the response.  The <invalid> element\
    \ enumerate civic\n   address elements that the server attempted to check, but\
    \ that did not\n   match the other civic address elements found in the <valid>\
    \ list.\n   Civic location tokens that are not listed in either the <valid>,\n\
    \   <invalid>, or <unchecked> element belong to the class of unchecked\n   tokens.\n\
    \   Note that the same address can yield different responses if parts of\n   the\
    \ civic address contradict each other.  For example, if the postal\n   code does\
    \ not match the city, local server policy determines whether\n   the postal code\
    \ or the city is considered valid.  The mapping\n   naturally corresponds to the\
    \ valid elements.\n   The example shown in Figure 5 and in Figure 6 indicates\
    \ that the\n   tokens 'country', 'A1', 'A3', and 'A6' have been validated by the\n\
    \   LoST server.  The server considered the postal code 81675 in the <PC>\n  \
    \ element as not valid for this location.  The 'HNO' token belongs to\n   the\
    \ class of unchecked location tokens.\n"
- title: 9.  Retrieving the Service Boundary via <getServiceBoundary>
  contents:
  - "9.  Retrieving the Service Boundary via <getServiceBoundary>\n   As discussed\
    \ in Section 5.5, the <findServiceResponse> can return a\n   globally unique identifier\
    \ in the 'serviceBoundary' attribute that\n   can be used to retrieve the service\
    \ boundary, rather than returning\n   the boundary by value.  This is shown in\
    \ the example in Figure 7 and\n   Figure 8.  The client can then retrieve the\
    \ boundary using the\n   <getServiceBoundary> request and obtains the boundary\
    \ in the\n   <getServiceBoundaryResponse>, illustrated in the example in Figure\
    \ 9\n   and Figure 10.  The client issues the request to the server\n   identified\
    \ in the 'server' attribute of the\n   <serviceBoundaryReference> element.  These\
    \ requests are always\n   directed to the authoritative server and do not recurse.\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <findService\n     xmlns=\"\
    urn:ietf:params:xml:ns:lost1\"\n     xmlns:p2=\"http://www.opengis.net/gml\"\n\
    \     recursive=\"true\"\n     serviceBoundary=\"reference\">\n     <location\
    \ id=\"6020688f1ce1896d\" profile=\"geodetic-2d\">\n       <p2:Point id=\"point1\"\
    \ srsName=\"urn:ogc:def:crs:EPSG::4326\">\n          <p2:pos>37.775 -122.422</p2:pos>\n\
    \       </p2:Point>\n     </location>\n     <service>urn:service:sos.police</service>\n\
    \   </findService>\n    Figure 7: <findService> request and response with service\
    \ boundary\n                                 reference\n   <?xml version=\"1.0\"\
    \ encoding=\"UTF-8\"?>\n   <findServiceResponse xmlns=\"urn:ietf:params:xml:ns:lost1\"\
    \n     xmlns:p2=\"http://www.opengis.net/gml\">\n     <mapping\n       expires=\"\
    2007-01-01T01:44:33Z\"\n       lastUpdated=\"2006-11-01T01:00:00Z\"\n       source=\"\
    authoritative.example\"\n       sourceId=\"7e3f40b098c711dbb6060800200c9a66\"\
    >\n       <displayName xml:lang=\"en\">\n         New York City Police Department\n\
    \       </displayName>\n       <service>urn:service:sos.police</service>\n   \
    \    <serviceBoundaryReference\n         source=\"authoritative.example\"\n  \
    \       key=\"7214148E0433AFE2FA2D48003D31172E\"/>\n       <uri>sip:nypd@example.com</uri>\n\
    \       <uri>xmpp:nypd@example.com</uri>\n       <serviceNumber>911</serviceNumber>\n\
    \     </mapping>\n     <path>\n       <via source=\"resolver.example\"/>\n   \
    \    <via source=\"authoritative.example\"/>\n     </path>\n     <locationUsed\
    \ id=\"6020688f1ce1896d\"/>\n   </findServiceResponse>\n       Figure 8: <findServiceResponse>\
    \ message with service boundary\n                                 reference\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <getServiceBoundary xmlns=\"\
    urn:ietf:params:xml:ns:lost1\"\n       key=\"7214148E0433AFE2FA2D48003D31172E\"\
    />\n     Figure 9: Requesting a service boundary with <getServiceBoundary>\n \
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <getServiceBoundaryResponse\n\
    \      xmlns=\"urn:ietf:params:xml:ns:lost1\">\n        <serviceBoundary profile=\"\
    geodetic-2d\">\n          <p2:Polygon srsName=\"urn:ogc:def::crs:EPSG::4326\"\
    >\n            <p2:exterior>\n              <p2:LinearRing>\n                <p2:pos>37.775\
    \ -122.4194</p2:pos>\n                <p2:pos>37.555 -122.4194</p2:pos>\n    \
    \            <p2:pos>37.555 -122.4264</p2:pos>\n                <p2:pos>37.775\
    \ -122.4264</p2:pos>\n                <p2:pos>37.775 -122.4194</p2:pos>\n    \
    \          </p2:LinearRing>\n            </p2:exterior>\n          </p2:Polygon>\n\
    \        </serviceBoundary>\n      <path>\n        <via source=\"resolver.example\"\
    />\n        <via source=\"authoritative.example\"/>\n      </path>\n    </getServiceBoundaryResponse>\n\
    \               Figure 10: Geodetic service boundary response\n"
- title: '10.  List Services: <listServices>'
  contents:
  - "10.  List Services: <listServices>\n   A LoST client can ask a LoST server for\
    \ the list of services that it\n   understands, primarily for diagnostic purposes.\
    \  The query does not\n   contain location information, as it simply provides\
    \ an indication of\n   which services the server can look up, not whether a particular\n\
    \   service is offered for a particular area.  Typically, only top-level\n   services\
    \ are included in the answer, implying support for all sub-\n   services.  Since\
    \ the query is answered by the queried server, there\n   is no notion of recursion\
    \ or indirection.  The\n   <listServicesByLocation> (Section 11) query below can\
    \ be used to find\n   out whether a particular service is offered for a specific\
    \ location.\n   An example request and response are shown in Figure 11.\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <listServices\n     xmlns=\"urn:ietf:params:xml:ns:lost1\"\
    >\n     <service>urn:service:sos</service>\n   </listServices>\n             \
    \   Figure 11: Example of <ListServices> query\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <listServicesResponse\n    xmlns=\"urn:ietf:params:xml:ns:lost1\"\
    >\n    <serviceList>\n     urn:service:sos.ambulance\n     urn:service:sos.animal-control\n\
    \     urn:service:sos.fire\n     urn:service:sos.gas\n     urn:service:sos.mountain\n\
    \     urn:service:sos.marine\n     urn:service:sos.physician\n     urn:service:sos.poison\n\
    \     urn:service:sos.police\n    </serviceList>\n    <path>\n     <via source=\"\
    authoritative.example\"/>\n    </path>\n   </listServicesResponse>\n         \
    \      Figure 12: Example of <ListServicesResponse>\n"
- title: '11.  List Services By Location: <listServicesByLocation>'
  contents:
  - "11.  List Services By Location: <listServicesByLocation>\n   A LoST client can\
    \ ask a LoST server for the list of services it knows\n   about for a particular\
    \ area.  The <listServicesByLocation> query\n   contains one or more <location>\
    \ elements, each from a different\n   location profile (Section 12), and may contain\
    \ the <service> element.\n   As for <findService>, the server selects the first\
    \ location element\n   that has a profile the server understands and it can operate\
    \ either\n   recursively or iteratively; <via> elements track the progress of\
    \ the\n   request.  The query indicates the services that the server can\n   enumerate\
    \ from within the forest structure of which it is a part.\n   Because LoST does\
    \ not presume a single, overarching organization of\n   all potential service\
    \ types, there may be services available within a\n   geographic area that could\
    \ be described by other LoST servers\n   connected to other forest structures.\
    \  As an example, the emergency\n   services forest for a region may be distinct\
    \ from the forests that\n   locate commercial services within the same region.\n\
    \   If the query contains the <service> element, the LoST server returns\n   only\
    \ immediate child services of the queried service that are\n   available for the\
    \ provided location.  If the <service> element is\n   absent, the LoST service\
    \ returns all top-level services available for\n   the provided location that\
    \ it knows about.\n   A server responds to this query with a\n   <listServicesByLocationResponse>\
    \ response.  This response MAY contain\n   <via> elements (see Section 6) and\
    \ MUST contain a <serviceList>\n   element, consisting of a whitespace-separated\
    \ list of service URNs.\n   The query and response are illustrated in Figure 13\
    \ and in Figure 14,\n   respectively.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <listServicesByLocation\n     xmlns=\"urn:ietf:params:xml:ns:lost1\"\n\
    \     xmlns:p2=\"http://www.opengis.net/gml\"\n     recursive=\"true\">\n    \
    \ <location id=\"3e19dfb3b9828c3\" profile=\"geodetic-2d\">\n       <p2:Point\
    \ srsName=\"urn:ogc:def:crs:EPSG::4326\">\n         <p2:pos>-34.407 150.883</p2:pos>\n\
    \       </p2:Point>\n     </location>\n     <service>urn:service:sos</service>\n\
    \   </listServicesByLocation>\n           Figure 13: Example of <ListServicesbyLocation>\
    \ query\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <listServicesByLocationResponse\n\
    \    xmlns=\"urn:ietf:params:xml:ns:lost1\">\n    <serviceList>\n     urn:service:sos.ambulance\n\
    \     urn:service:sos.animal-control\n     urn:service:sos.fire\n     urn:service:sos.gas\n\
    \     urn:service:sos.mountain\n     urn:service:sos.marine\n     urn:service:sos.physician\n\
    \     urn:service:sos.poison\n     urn:service:sos.police\n    </serviceList>\n\
    \    <path>\n     <via source=\"resolver.example\"/>\n     <via source=\"authoritative.example\"\
    />\n    </path>\n    <locationUsed id=\"3e19dfb3b9828c3\"/>\n   </listServicesByLocationResponse>\n\
    \      Figure 14: Example of <ListServicesByLocationResponse> response\n"
- title: 12.  Location Profiles
  contents:
  - "12.  Location Profiles\n   LoST uses location information in <location> elements\
    \ in requests and\n   <serviceBoundary> elements in responses.  Such location\
    \ information\n   may be expressed in a variety of ways.  This variety can cause\n\
    \   interoperability problems where a request or response contains\n   location\
    \ information in a format not understood by the server or the\n   client, respectively.\
    \  To achieve interoperability, this document\n   defines two mandatory-to-implement\
    \ baseline location profiles to\n   define the manner in which location information\
    \ is transmitted.  It\n   is possible to standardize other profiles in the future.\
    \  The\n   baseline profiles are:\n   geodetic-2d:\n      a profile for two-dimensional\
    \ geodetic location information, as\n      described in Section 12.2;.\n   civic:\n\
    \      a profile consisting of civic address location information, as\n      described\
    \ in Section 12.3.\n   Requests and responses containing <location> or <serviceBoundary>\n\
    \   elements MUST contain location information in exactly one of the two\n   baseline\
    \ profiles, in addition to zero or more additional profiles.\n   The ordering\
    \ of location information indicates a preference on the\n   part of the sender.\n\
    \   Standards action is required for defining new profiles.  A location\n   profile\
    \ MUST define:\n   1.  The token identifying it in the LoST location profile registry.\n\
    \   2.  The formal definition of the XML to be used in requests, i.e., an\n  \
    \     enumeration and definition of the XML child elements of the\n       <location>\
    \ element.\n   3.  The formal definition of the XML to be used in responses, i.e.,\n\
    \       an enumeration and definition of the XML child elements of the\n     \
    \  <serviceBoundary> element.\n   4.  The declaration of whether geodetic-2d or\
    \ civic is to be used as\n       the baseline profile.  It is necessary to explicitly\
    \ declare the\n       baseline profile as future profiles may be combinations\
    \ of\n       geodetic and civic location information.\n"
- title: 12.1.  Location Profile Usage
  contents:
  - "12.1.  Location Profile Usage\n   A location profile is identified by a token\
    \ in an IANA-maintained\n   registry (Section 17.5).  Clients send location information\
    \ compliant\n   with a location profile, and servers respond with location\n \
    \  information compliant with that same location profile.\n   When a LoST client\
    \ sends a <findService> request that provides\n   location information, it includes\
    \ one or more <location> elements.  A\n   <location> element carries an optional\
    \ 'profile' attribute that\n   indicates the location format of the child elements.\
    \  A client may\n   obtain location information that does not conform to a profile\
    \ it\n   recognizes, or it may not have the capability to map XML to profiles.\n\
    \   In that case, a client MAY omit the profile attribute and the server\n   should\
    \ interpret the XML location data to the best of its ability,\n   returning a\
    \ \"locationProfileUnrecognized\" error if it is unable to do\n   so.\n   The\
    \ concept of location profiles is described in Section 12.  With\n   the ability\
    \ to specify more than one <location> element, the client\n   is able to convey\
    \ location information for multiple location profiles\n   in the same request.\n\
    \   When a LoST server sends a response that contains location\n   information,\
    \ it uses the <serviceBoundary> elements much like the\n   client uses the <location>\
    \ elements.  Each <serviceBoundary> element\n   contains location information\
    \ conforming to the location profile\n   specified in the 'profile' attribute.\
    \  A response MAY contain\n   multiple mappings or boundaries for the different\
    \ <location>\n   elements, subject to the restrictions below.\n   Using the location\
    \ profiles defined in this document, the following\n   rules ensure interoperability\
    \ between clients and servers:\n   1.  A client MUST be capable of understanding\
    \ the response for the\n       baseline profiles it used in the request.\n   2.\
    \  If a client sends location information conformant to any location\n       profile\
    \ other than the ones described in this document, it MUST\n       also send, in\
    \ the same request, location information conformant\n       to one of the baseline\
    \ profiles.  Otherwise, the server might not\n       be able to understand the\
    \ request.\n   3.  A client MUST NOT send multiple <location> objects that are\n\
    \       derived from different baseline profiles.  In other words, a\n       client\
    \ MUST only send location objects according to the same\n       baseline profile\
    \ in a query, but it MAY contain a location\n       element following a baseline\
    \ profile in addition to some other\n       profile.\n   4.  If a client has both\
    \ location information primarily of geodetic\n       nature and location information\
    \ primarily of a civic nature, it\n       MUST send separate requests containing\
    \ each type of location\n       information.\n   5.  There can only be one instance\
    \ of each location profile in a\n       query.\n   6.  Servers MUST implement\
    \ all profiles described in this document.\n   7.  A server uses the first-listed\
    \ location profile that it\n       understands and ignores the others.\n   8.\
    \  If a server receives a request that only contains location\n       information\
    \ using profiles it does not understand, the server\n       responds with a <locationProfileError>\
    \ (Section 13.1).\n   9.  The <serviceBoundary> element MUST use the same location\
    \ profile\n       that was used to retrieve the answer and indicates which profile\n\
    \       has been used with the 'profile' attribute.\n   These rules enable the\
    \ use of location profiles not yet specified,\n   while ensuring baseline interoperability.\
    \  Take, for example, this\n   scenario illustrated in Figure 15 and 16.  Client\
    \ X has had its\n   firmware upgraded to support the 'not-yet-standardized-prism-profile'\n\
    \   location profile.  Client X sends location information to Server Y,\n   which\
    \ does not understand the 'not-yet-standardized-prism-profile'\n   location profile.\
    \  If Client X also sends location information using\n   the geodetic-2D baseline\
    \ profile, then Server Y will still be able to\n   understand the request and\
    \ provide an understandable response, though\n   with location information that\
    \ might not be as precise or expressive\n   as desired.  This is possible because\
    \ both Client X and Server Y\n   understand the baseline profile.\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <findService\n     xmlns=\"urn:ietf:params:xml:ns:lost1\"\
    \n     xmlns:gml=\"http://www.opengis.net/gml\"\n     xmlns:gs=\"http://www.opengis.net/pidflo/1.0\"\
    \n     recursive=\"true\"\n     serviceBoundary=\"value\">\n     <location id=\"\
    ABC 123\"\n         profile=\"not-yet-standardized-prism-profile\">\n       <gs:Prism\
    \ srsName=\"urn:ogc:def:crs:EPSG::4979\">\n         <gs:base>\n           <gml:Polygon>\n\
    \             <gml:exterior>\n               <gml:LinearRing>\n              \
    \   <gml:posList>\n                   42.556844 -73.248157 36.6\n            \
    \       42.656844 -73.248157 36.6\n                   42.656844 -73.348157 36.6\n\
    \                   42.556844 -73.348157 36.6\n                   42.556844 -73.248157\
    \ 36.6\n                 </gml:posList>\n               </gml:LinearRing>\n  \
    \           </gml:exterior>\n           </gml:Polygon>\n         </gs:base>\n\
    \         <gs:height uom=\"urn:ogc:def:uom:EPSG::9001\">\n           2.4\n   \
    \      </gs:height>\n       </gs:Prism>\n     </location>\n     <location id=\"\
    DEF 345\" profile=\"geodetic-2d\">\n       <gml:Point id=\"point1\" srsName=\"\
    urn:ogc:def:crs:EPSG:4326\">\n         <gml:pos>42.656844 -73.348157</gml:pos>\n\
    \       </gml:Point>\n     </location>\n     <service>urn:service:sos.police</service>\n\
    \   </findService>\n    Figure 15: Example of a <findServices> query with baseline\
    \ profile\n                             interoperability\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <findServiceResponse\n     xmlns=\"urn:ietf:params:xml:ns:lost1\"\
    \n     xmlns:p2=\"http://www.opengis.net/\">\n     <mapping\n       expires=\"\
    2007-01-01T01:44:33Z\"\n       lastUpdated=\"2006-11-01T01:00:00Z\"\n       source=\"\
    authoritative.example\"\n       sourceId=\"cf19bbb038fb4ade95852795f045387d\"\
    >\n       <displayName xml:lang=\"en\">\n         New York City Police Department\n\
    \       </displayName>\n       <service>urn:service:sos.police</service>\n   \
    \    <serviceBoundary profile=\"geodetic-2d\">\n         <p2:Polygon srsName=\"\
    urn:ogc:def::crs:EPSG::4326\">\n           <p2:exterior>\n             <p2:LinearRing>\n\
    \               <p2:pos>37.775 -122.4194</p2:pos>\n               <p2:pos>37.555\
    \ -122.4194</p2:pos>\n               <p2:pos>37.555 -122.4264</p2:pos>\n     \
    \          <p2:pos>37.775 -122.4264</p2:pos>\n               <p2:pos>37.775 -122.4194</p2:pos>\n\
    \             </p2:LinearRing>\n           </p2:exterior>\n         </p2:Polygon>\n\
    \       </serviceBoundary>\n       <uri>sip:nypd@example.com</uri>\n       <serviceNumber>911</serviceNumber>\n\
    \     </mapping>\n     <path>\n       <via source=\"resolver.example\"/>\n   \
    \    <via source=\"authoritative.example\"/>\n     </path>\n     <locationUsed\
    \ id=\"DEF 345\"/>\n   </findServiceResponse>\n    Figure 16: Example of a <findServiceResponse>\
    \ message with baseline\n                         profile interoperability\n"
- title: 12.2.  Two-Dimensional Geodetic Profile
  contents:
  - "12.2.  Two-Dimensional Geodetic Profile\n   The \"geodetic-2d\" location profile\
    \ is identified by the token\n   \"geodetic-2d\".  Clients and servers use this\
    \ profile by placing the\n   following location shapes into the <serviceBoundary>\
    \ or into the\n   <location> element (unless indicated otherwise):\n   Point:\n\
    \      The <Point> element is described in Section 5.2.1 of [13].\n      Section\
    \ 5.2.1 of [13] shows also the specification of a <Point>\n      with either a\
    \ two-dimensional position (latitude and longitude) or\n      three-dimensional\
    \ position (latitude, longitude, and altitude).  A\n      client MAY use the three-dimensional\
    \ position, and servers MAY\n      interpret a three-dimensional position as a\
    \ two-dimensional\n      position by ignoring the altitude value.  A <Point> element\
    \ is not\n      placed into a <serviceBoundary> element.\n   Polygon:\n      The\
    \ <Polygon> element is described in Section 5.2.2 of [13].  The\n      restriction\
    \ to 16 points for a polygon contained in Section 7.2.2\n      of [12] is not\
    \ applicable to this document.\n   Circle:\n      The <Circle> element is described\
    \ in Section 5.2.3 of [13].\n   Ellipse:\n      The <Ellipse> element is described\
    \ in Section 5.2.4 of [13].\n   ArcBand:\n      The <ArcBand> element is described\
    \ in Section 5.2.5 of [13].\n   When a client uses a <Polygon>, <Circle>, <Ellipse>,\
    \ or <ArcBand>\n   element within the <location> element, it is indicating that\
    \ it will\n   be satisfied by query results appropriate to any portion of the\n\
    \   shape.  It is left to the server to select an appropriate matching\n   algorithm.\
    \  A server MAY return multiple <mapping> elements if the\n   shape extends across\
    \ multiple service areas.  Servers are not\n   required to return all possible\
    \ <mapping> elements to avoid denial-\n   of-service attacks in which clients\
    \ present queries that span a very\n   large number of service boundaries (e.g.,\
    \ presenting a shape covering\n   all of the United States).\n   In the case where\
    \ the server does not return multiple <mapping>\n   elements, but the shape extends\
    \ across a service boundary, it is\n   possible that the matching algorithm selected\
    \ by the LoST server will\n   return results that match a portion of the shape\
    \ but do not match\n   those specific to a particular point.  A client may always\
    \ select a\n   point from within the shape to avoid this condition.  The cases\
    \ where\n   it does not are generally those where it knows its own position only\n\
    \   within the shape given.  In emergency service use cases, that may\n   result\
    \ in the PSAP contacted at the URI provided by LoST being\n   required to forward\
    \ a call to one of its neighbors; this is an\n   expected part of the overall\
    \ emergency response system.  In non-\n   emergency service use cases, the service\
    \ deployment model should take\n   into account this issue as part of the provisioning\
    \ model, as the\n   combination of the data in the LoST server and the algorithm\
    \ used for\n   mapping determine which contact URIs are returned when shapes are\n\
    \   used that overlap multiple service areas.\n   As a general guideline, any\
    \ deployed matching algorithm should ensure\n   that the algorithm used does not\
    \ needlessly return no results if\n   there are valid results for any portion\
    \ of the shape.  If an\n   authoritative server receives a query for which the\
    \ area in the query\n   overlaps the area for which the server has mapping information,\
    \ then\n   it MUST return either a mapping whose coverage area intersects the\n\
    \   query area or a redirect to another server whose coverage area is a\n   subset\
    \ of the server's coverage area.\n   When geodetic location information of this\
    \ location profile is placed\n   in the <serviceBoundary> element, then the elements\
    \ with geospatial\n   coordinates are alternative descriptions of the same service\
    \ region,\n   not additive geometries.\n"
- title: 12.3.  Basic Civic Profile
  contents:
  - "12.3.  Basic Civic Profile\n   The basic civic location profile is identified\
    \ by the token 'civic'.\n   Clients use this profile by placing a <civicAddress>\
    \ element, defined\n   in [10], within the <location> element.\n   Servers use\
    \ this profile by placing a <civicAddress> element, defined\n   in [10], within\
    \ the <serviceBoundary> element.\n   A response MAY contain more than one <serviceBoundary>\
    \ element with\n   profile 'civic'.  Each <serviceBoundary> element describes\
    \ a set of\n   civic addresses that fall within the service boundary, namely,\
    \ all\n   addresses that textually match the civic address elements provided,\n\
    \   regardless of the value of other address elements.  A location falls\n   within\
    \ the mapping's service boundary if it matches any of the\n   <serviceBoundary>\
    \ elements.  Hence, a response may contain multiple\n   <serviceBoundary> elements\
    \ with civic and/or geodetic location\n   profiles.\n"
- title: 13.  Errors, Warnings, and Redirects
  contents:
  - "13.  Errors, Warnings, and Redirects\n   When a LoST server cannot fulfill a\
    \ request completely, it can return\n   either an error or a warning, depending\
    \ on the severity of the\n   problem.  It returns an <errors> element if no useful\
    \ response can be\n   returned for the query.  It returns a <warnings> element\
    \ as part of\n   another response element if it was able to respond in part, but\
    \ the\n   response may not be quite what the client had desired.  For both\n \
    \  elements, the 'source' attribute names the server that originally\n   generated\
    \ the error or warning, such as the authoritative server.\n   Unless otherwise\
    \ noted, all elements below can be either an error or\n   a warning, depending\
    \ on whether a default response, such as a\n   mapping, is included.\n"
- title: 13.1.  Errors
  contents:
  - "13.1.  Errors\n   LoST defines a pattern for errors, defined as <errors> elements\
    \ in\n   the Relax NG schema.  This pattern defines a 'message' attribute\n  \
    \ containing human-readable text and an 'xml:lang' attribute denoting\n   the\
    \ language of the human-readable text.  One or more such error\n   elements are\
    \ contained in the <errors> element.\n   The following errors follow this basic\
    \ pattern:\n   badRequest\n      The server could not parse or otherwise understand\
    \ a request,\n      e.g., because the XML was malformed.\n   forbidden\n     \
    \ The server refused to send an answer.  This generally only occurs\n      for\
    \ recursive queries, namely, if the client tried to contact the\n      authoritative\
    \ server and was refused.\n   internalError\n      The server could not satisfy\
    \ a request due to misconfiguration or\n      other operational and non-protocol-related\
    \ reasons.\n   locationProfileUnrecognized\n      None of the profiles in the\
    \ request were recognized by the server\n      (see Section 12).\n   locationInvalid\n\
    \      The geodetic or civic location in the request was invalid.  For\n     \
    \ example, the longitude or latitude values fall outside the\n      acceptable\
    \ ranges.\n   SRSInvalid\n      The spatial reference system (SRS) contained in\
    \ the location\n      element was not recognized or does not match the location\
    \ profile.\n   loop\n      During a recursive query, the server was about to visit\
    \ a server\n      that was already in the server list in the <path> element,\n\
    \      indicating a request loop.\n   notFound\n      The server could not find\
    \ an answer to the query.\n   serverError\n      An answer was received from another\
    \ LoST server, but it could not\n      be parsed or otherwise understood.  This\
    \ error occurs only for\n      recursive queries.\n   serverTimeout\n      A time\
    \ out occurred before an answer was received.\n   serviceNotImplemented\n    \
    \  The requested service URN is not implemented and no substitution\n      was\
    \ available.\n   An example is below:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <errors xmlns=\"urn:ietf:params:xml:ns:lost1\"\n     source=\"resolver.example\"\
    >\n      <internalError message=\"Software bug.\" xml:lang=\"en\"/>\n   </errors>\n\
    \                  Figure 17: Example of an error response\n"
- title: 13.2.  Warnings
  contents:
  - "13.2.  Warnings\n   A response MAY contain zero or more warnings.  This pattern\
    \ defines a\n   'message' attribute containing human-readable text and an 'xml:lang'\n\
    \   attribute denoting the language of the human-readable text.  One or\n   more\
    \ such warning elements are contained in the <warnings> element.\n   To provide\
    \ human-readable text in an appropriate language, the HTTP\n   content negotiation\
    \ capabilities (see Section 14) MAY be utilized by\n   a server.\n   This version\
    \ of the specification defines the following warnings:\n   locationValidationUnavailable\n\
    \      The <locationValidationUnavailable> element MAY be returned when a\n  \
    \    server wishes to notify a client that it cannot fulfill a location\n    \
    \  validation request.  This warning allows a server to return\n      mapping\
    \ information while signaling this exception state.\n   serviceSubstitution\n\
    \      The <serviceSubstitution> element MAY be returned when a server\n     \
    \ was not able to fulfill a <findService> request for a given\n      service URN.\
    \  For example, a <findService> request with the\n      'urn:service:sos.police'\
    \ service URN for a location in Uruguay may\n      cause the LoST service to return\
    \ a mapping for the\n      'urn:service:sos' service URN since Uruguay does not\
    \ make use of\n      the sub-services police, fire, and ambulance.  If this warning\
    \ is\n      returned, then the <service> element in the response provides\n  \
    \    information about the service URN that refers to the mapping.\n   defaultMappingReturned\n\
    \      The <defaultMappingReturned> element MAY be returned when a server\n  \
    \    was not able to fulfill a <findService> request for a given\n      location\
    \ but is able to respond with a default URI.  For example,\n      a nearby PSAP\
    \ may be returned.\n   An example of a warning is shown below:\n    <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n    <findServiceResponse xmlns=\"urn:ietf:params:xml:ns:lost1\"\
    \n      xmlns:p2=\"http://www.opengis.net/\">\n      <mapping\n        expires=\"\
    2007-01-01T01:44:33Z\"\n        lastUpdated=\"2006-11-01T01:00:00Z\"\n       \
    \ source=\"authoritative.example\"\n        sourceId=\"fb8ed888433343b7b27865aeb38f3a99\"\
    >\n        <displayName xml:lang=\"en\">\n          New York City Police Department\n\
    \        </displayName>\n        <service>urn:service:sos.police</service>\n \
    \       <serviceBoundary profile=\"geodetic-2d\">\n          <p2:Polygon srsName=\"\
    urn:ogc:def::crs:EPSG::4326\">\n            <p2:exterior>\n              <p2:LinearRing>\n\
    \                <p2:pos>37.775 -122.4194</p2:pos>\n                <p2:pos>37.555\
    \ -122.4194</p2:pos>\n                <p2:pos>37.555 -122.4264</p2:pos>\n    \
    \            <p2:pos>37.775 -122.4264</p2:pos>\n                <p2:pos>37.775\
    \ -122.4194</p2:pos>\n              </p2:LinearRing>\n            </p2:exterior>\n\
    \          </p2:Polygon>\n        </serviceBoundary>\n        <uri>sip:nypd@example.com</uri>\n\
    \        <serviceNumber>911</serviceNumber>\n      </mapping>\n      <warnings\
    \ source=\"authoritative.example\">\n        <defaultMappingReturned\n       \
    \     message=\"Unable to determine PSAP for the given location;\n           \
    \     using default PSAP\"\n            xml:lang=\"en\"/>\n      </warnings>\n\
    \      <path>\n        <via source=\"resolver.example\"/>\n        <via source=\"\
    authoritative.example\"/>\n      </path>\n    </findServiceResponse>\n       \
    \          Figure 18: Example of a warning response\n"
- title: 13.3.  Redirects
  contents:
  - "13.3.  Redirects\n   A LoST server can respond indicating that the querier should\
    \ redirect\n   the query to another server, using the <redirect> element.  The\n\
    \   element includes a 'target' attribute indicating the LoST application\n  \
    \ unique string (see Section 4) that the client SHOULD be contacting\n   next,\
    \ as well as the 'source' attribute indicating the server that\n   generated the\
    \ redirect response and a 'message' attribute explaining\n   the reason for the\
    \ redirect response.  During a recursive query, a\n   server receiving a <redirect>\
    \ response can decide whether it wants to\n   follow the redirection or simply\
    \ return the response to its upstream\n   querier.  The \"expires\" value in the\
    \ response returned by the server\n   handling the redirected query indicates\
    \ the earliest time at which a\n   new query might be needed (see Section 5.2).\
    \  The query for the same\n   tuple of location and service SHOULD NOT be directed\
    \ to the server\n   that gave redirect prior to that time.\n   An example is below:\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <redirect xmlns=\"urn:ietf:params:xml:ns:lost1\"\
    \n     target=\"eastpsap.example\"\n     source=\"westpsap.example\"\n     message=\"\
    We have temporarily failed over.\" xml:lang=\"en\"/>\n                 Figure\
    \ 19: Example of a redirect response\n"
- title: '14.  LoST Transport: HTTP'
  contents:
  - "14.  LoST Transport: HTTP\n   LoST needs an underlying protocol transport mechanism\
    \ to carry\n   requests and responses.  This document defines the use of LoST\
    \ over\n   HTTP and LoST over HTTP-over-TLS.  Client and server developers are\n\
    \   reminded that full support of RFC 2616 HTTP facilities is expected.\n   If\
    \ LoST clients or servers re-implement HTTP, rather than using\n   available servers\
    \ or client code as a base, careful attention must be\n   paid to full interoperability.\
    \  Other transport mechanisms are left\n   to future documents.  The available\
    \ transport mechanisms are\n   determined through the use of the LoST U-NAPTR\
    \ application.  In\n   protocols that support content type indication, LoST uses\
    \ the media\n   type application/lost+xml.\n   When using HTTP [3] and HTTP-over-TLS\
    \ [4], LoST requests use the HTTP\n   POST method.  The HTTP request MUST use\
    \ the Cache-Control response\n   directive \"no-cache\" to disable HTTP-level\
    \ caching even by caches\n   that have been configured to return stale responses\
    \ to client\n   requests.\n   All LoST responses, including those indicating a\
    \ LoST warning or\n   error, are carried in 2xx responses, typically 200 (OK).\
    \  Other 2xx\n   responses, in particular 203 (Non-authoritative information),\
    \ may be\n   returned by HTTP caches that disregard the caching instructions.\
    \ 3xx,\n   4xx, and 5xx HTTP response codes indicate that the HTTP request\n \
    \  itself failed or was redirected; these responses do not contain any\n   LoST\
    \ XML elements.  The 3xx responses are distinct from the redirects\n   that are\
    \ described in Section 13.3; the redirect operation in\n   Section 13.3 occur\
    \ after a LoST server processes the request.  Where\n   an HTTP-layer redirect\
    \ will be general, a LoST server redirect as\n   described in Section 13.3 might\
    \ be specific to a specific service or\n   be the result of other processing by\
    \ the LoST server.\n   The HTTP URL is derived from the LoST server name via U-NAPTR\n\
    \   application, as discussed above.\n"
- title: 15.  Relax NG Schema
  contents:
  - "15.  Relax NG Schema\n   This section provides the Relax NG schema used by the\
    \ LoST protocol\n   in the compact form.  The verbose form is included in Appendix\
    \ A.\n"
- title: namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
  contents:
  - 'namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

    '
- title: default namespace ns1 = "urn:ietf:params:xml:ns:lost1"
  contents:
  - 'default namespace ns1 = "urn:ietf:params:xml:ns:lost1"

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       Location-to-Service Translation (LoST) Protocol'
  contents:
  - '##       Location-to-Service Translation (LoST) Protocol

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       A LoST XML instance has three request types, each with'
  contents:
  - '##       A LoST XML instance has three request types, each with

    '
- title: '##       a corresponding response type: find service, list services,'
  contents:
  - '##       a corresponding response type: find service, list services,

    '
- title: '##       and get service boundary.'
  contents:
  - '##       and get service boundary.

    '
- title: '##'
  contents:
  - '##

    '
- title: start =
  contents:
  - "start =\n  findService\n  | listServices\n  | listServicesByLocation\n  | getServiceBoundary\n\
    \  | findServiceResponse\n  | listServicesResponse\n  | listServicesByLocationResponse\n\
    \  | getServiceBoundaryResponse\n  | errors\n  | redirect\n"
- title: '##'
  contents:
  - '##

    '
- title: '##       The queries.'
  contents:
  - '##       The queries.

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  findService =\n    element findService {\n      requestLocation,\n \
    \     commonRequestPattern,\n      attribute validateLocation {\n        xsd:boolean\
    \ >> a:defaultValue [ \"false\" ]\n      }?,\n      attribute serviceBoundary\
    \ {\n        (\"reference\" | \"value\") >> a:defaultValue [ \"reference\" ]\n\
    \      }?,\n      attribute recursive { xsd:boolean >> a:defaultValue [ \"false\"\
    \ ] }?\n    }\n  listServices = element listServices { commonRequestPattern }\n\
    \  listServicesByLocation =\n    element listServicesByLocation {\n      requestLocation,\n\
    \      commonRequestPattern,\n      attribute recursive { xsd:boolean >> a:defaultValue\
    \ [ \"true\" ] }?\n    }\n  getServiceBoundary =\n    element getServiceBoundary\
    \ { serviceBoundaryKey, extensionPoint }\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       The responses.'
  contents:
  - '##       The responses.

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  findServiceResponse =\n    element findServiceResponse {\n      mapping+,\
    \ locationValidation?, commonResponsePattern, locationUsed\n    }\n  listServicesResponse\
    \ =\n    element listServicesResponse { serviceList, commonResponsePattern }\n\
    \  listServicesByLocationResponse =\n    element listServicesByLocationResponse\
    \ {\n      serviceList, commonResponsePattern, locationUsed\n    }\n  getServiceBoundaryResponse\
    \ =\n    element getServiceBoundaryResponse {\n      serviceBoundary, commonResponsePattern\n\
    \    }\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       A pattern common to some of the queries.'
  contents:
  - '##       A pattern common to some of the queries.

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  commonRequestPattern = service, path?, extensionPoint\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       A pattern common to responses.'
  contents:
  - '##       A pattern common to responses.

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  commonResponsePattern = warnings*, path, extensionPoint\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       Location in Requests'
  contents:
  - '##       Location in Requests

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  requestLocation =\n    element location {\n      attribute id { xsd:token\
    \ },\n      locationInformation\n    }+\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       Location Information'
  contents:
  - '##       Location Information

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  locationInformation =\n    extensionPoint+,\n    attribute profile {\
    \ xsd:NMTOKEN }?\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       Service Boundary'
  contents:
  - '##       Service Boundary

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  serviceBoundary = element serviceBoundary { locationInformation }+\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       Service Boundary Reference'
  contents:
  - '##       Service Boundary Reference

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  serviceBoundaryReference =\n    element serviceBoundaryReference {\n\
    \      source, serviceBoundaryKey, extensionPoint\n    }\n  serviceBoundaryKey\
    \ = attribute key { xsd:token }\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       Path -'
  contents:
  - '##       Path -

    '
- title: '##       Contains a list of via elements -'
  contents:
  - '##       Contains a list of via elements -

    '
- title: '##       places through which information flowed'
  contents:
  - '##       places through which information flowed

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  path =\n    element path {\n      element via { source, extensionPoint\
    \ }+\n    }\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       Location Used'
  contents:
  - '##       Location Used

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  locationUsed =\n    element locationUsed {\n      attribute id { xsd:token\
    \ }\n    }?\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       Expires pattern'
  contents:
  - '##       Expires pattern

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  expires =\n    attribute expires { xsd:dateTime | \"NO-CACHE\" | \"\
    NO-EXPIRATION\" }\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       A QName list'
  contents:
  - '##       A QName list

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  qnameList = list { xsd:QName* }\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       A location-to-service mapping.'
  contents:
  - '##       A location-to-service mapping.

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  mapping =\n    element mapping {\n      element displayName {\n    \
    \    xsd:string,\n        attribute xml:lang { xsd:language }\n      }*,\n   \
    \   service,\n      (serviceBoundary | serviceBoundaryReference)?,\n      element\
    \ uri { xsd:anyURI }*,\n      element serviceNumber {\n        xsd:token { pattern\
    \ = \"[0-9*#]+\" }\n      }?,\n      extensionPoint,\n      expires,\n      attribute\
    \ lastUpdated { xsd:dateTime },\n      source,\n      attribute sourceId { xsd:token\
    \ },\n      message\n    }\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       Location validation'
  contents:
  - '##       Location validation

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  locationValidation =\n    element locationValidation {\n      element\
    \ valid { qnameList }?,\n      element invalid { qnameList }?,\n      element\
    \ unchecked { qnameList }?,\n      extensionPoint\n    }\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       Errors and Warnings Container.'
  contents:
  - '##       Errors and Warnings Container.

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  exceptionContainer =\n    (badRequest?\n     & internalError?\n    \
    \ & serviceSubstitution?\n     & defaultMappingReturned?\n     & forbidden?\n\
    \     & notFound?\n     & loop?\n     & serviceNotImplemented?\n     & serverTimeout?\n\
    \     & serverError?\n     & locationInvalid?\n     & locationProfileUnrecognized?),\n\
    \    extensionPoint,\n    source\n  errors = element errors { exceptionContainer\
    \ }\n  warnings = element warnings { exceptionContainer }\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       Basic Exceptions'
  contents:
  - '##       Basic Exceptions

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  ##\n  ##         Exception pattern.\n  ##\n  basicException = message,\
    \ extensionPoint\n  badRequest = element badRequest { basicException }\n  internalError\
    \ = element internalError { basicException }\n  serviceSubstitution = element\
    \ serviceSubstitution { basicException }\n  defaultMappingReturned =\n    element\
    \ defaultMappingReturned { basicException }\n  forbidden = element forbidden {\
    \ basicException }\n  notFound = element notFound { basicException }\n  loop =\
    \ element loop { basicException }\n  serviceNotImplemented =\n    element serviceNotImplemented\
    \ { basicException }\n  serverTimeout = element serverTimeout { basicException\
    \ }\n  serverError = element serverError { basicException }\n  locationInvalid\
    \ = element locationInvalid { basicException }\n  locationValidationUnavailable\
    \ =\n    element locationValidationUnavailable { basicException }\n  locationProfileUnrecognized\
    \ =\n    element locationProfileUnrecognized {\n      attribute unsupportedProfiles\
    \ { xsd:NMTOKENS },\n      basicException\n    }\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       Redirect.'
  contents:
  - '##       Redirect.

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  ##\n  ##         Redirect pattern\n  ##\n  redirect =\n    element redirect\
    \ {\n      attribute target { appUniqueString },\n      source,\n      message,\n\
    \      extensionPoint\n    }\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       Some common patterns.'
  contents:
  - '##       Some common patterns.

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  message =\n    (attribute message { xsd:token },\n     attribute xml:lang\
    \ { xsd:language })?\n  service = element service { xsd:anyURI }?\n  appUniqueString\
    \ =\n    xsd:token { pattern = \"([a-zA-Z0-9\\-]+\\.)+[a-zA-Z0-9]+\" }\n  source\
    \ = attribute source { appUniqueString }\n  serviceList =\n    element serviceList\
    \ {\n      list { xsd:anyURI* }\n    }\n"
- title: '}'
  contents:
  - '}

    '
- title: '##'
  contents:
  - '##

    '
- title: '##       Patterns for inclusion of elements from schemas in'
  contents:
  - '##       Patterns for inclusion of elements from schemas in

    '
- title: '##       other namespaces.'
  contents:
  - '##       other namespaces.

    '
- title: '##'
  contents:
  - '##

    '
- title: div {
  contents:
  - "div {\n  ##\n  ##         Any element not in the LoST namespace.\n  ##\n  notLost\
    \ = element * - (ns1:* | ns1:*) { anyElement }\n  ##\n  ##         A wildcard\
    \ pattern for including any element\n  ##         from any other namespace.\n\
    \  ##\n  anyElement =\n    (element * { anyElement }\n     | attribute * { text\
    \ }\n     | text)*\n  ##\n  ##         A point where future extensions\n  ## \
    \        (elements from other namespaces)\n  ##         can be added.\n  ##\n\
    \  extensionPoint = notLost*\n"
- title: '}'
  contents:
  - "}\n                         Figure 20: RelaxNG schema\n"
- title: 16.  Internationalization Considerations
  contents:
  - "16.  Internationalization Considerations\n   The LoST protocol is mostly meant\
    \ for machine-to-machine\n   communications; as such, most of its elements are\
    \ tokens not meant\n   for direct human consumption.  If these tokens are presented\
    \ to the\n   end user, some localization may need to occur.  The content of the\n\
    \   <displayName> element and the 'message' attributes may be displayed\n   to\
    \ the end user, and they are thus complex types designed for this\n   purpose.\n\
    \   LoST exchanges information using XML.  All XML processors are\n   required\
    \ to understand UTF-8 and UTF-16 encodings, and therefore all\n   LoST clients\
    \ and servers MUST understand UTF-8 and UTF-16 encoded\n   XML.  Additionally,\
    \ LoST servers and clients MUST NOT encode XML with\n   encodings other than UTF-8\
    \ or UTF-16.\n"
- title: 17.  IANA Considerations
  contents:
  - '17.  IANA Considerations

    '
- title: 17.1.  U-NAPTR Registrations
  contents:
  - "17.1.  U-NAPTR Registrations\n   This document registers the following U-NAPTR\
    \ application service\n   tag:\n      Application Service Tag:  LoST\n      Defining\
    \ Publication:  The specification contained within this\n         document.\n\
    \   This document registers the following U-NAPTR application protocol\n   tags:\n\
    \   o  Application Protocol Tag: http\n      Defining Publication: RFC 2616 [3]\n\
    \   o  Application Protocol Tag: https\n      Defining Publication: RFC 2818 [4]\n"
- title: 17.2.  Content-Type Registration for 'application/lost+xml'
  contents:
  - "17.2.  Content-Type Registration for 'application/lost+xml'\n   This specification\
    \ requests the registration of a new MIME type\n   according to the procedures\
    \ of RFC 4288 [7] and guidelines in RFC\n   3023 [5].\n   MIME media type name:\
    \  application\n   MIME subtype name:  lost+xml\n   Mandatory parameters:  none\n\
    \   Optional parameters:  charset\n      Indicates the character encoding of enclosed\
    \ XML.\n   Encoding considerations:  Uses XML, which can employ 8-bit\n      characters,\
    \ depending on the character encoding used.  See RFC\n      3023 [5], Section\
    \ 3.2.\n   Security considerations:  This content type is designed to carry LoST\n\
    \      protocol payloads.\n   Interoperability considerations:  None\n   Published\
    \ specification:  RFC 5222\n   Applications that use this media type:  Emergency\
    \ and location-based\n      systems\n   Additional information:\n      Magic Number:\
    \  None\n      File Extension:  .lostxml\n      Macintosh file type code:  'TEXT'\n\
    \   Personal and email address for further information:\n      Hannes Tschofenig,\
    \ Hannes.Tschofenig@nsn.com\n   Intended usage:  LIMITED USE\n   Author:\n   \
    \   This specification is a work item of the IETF ECRIT working group,\n     \
    \ with mailing list address <ecrit@ietf.org>.\n   Change controller:\n      The\
    \ IESG <iesg@ietf.org>\n"
- title: 17.3.  LoST Relax NG Schema Registration
  contents:
  - "17.3.  LoST Relax NG Schema Registration\n   URI:  urn:ietf:params:xml:schema:lost1\n\
    \   Registrant Contact:  IETF ECRIT Working Group, Hannes Tschofenig\n      (Hannes.Tschofenig@nsn.com).\n\
    \   Relax NG Schema:  The Relax NG schema to be registered is contained\n    \
    \  in Section 15.  Its first line is\n   default namespace = \"urn:ietf:params:xml:ns:lost1\"\
    \n   and its last line is\n   }\n"
- title: 17.4.  LoST Namespace Registration
  contents:
  - "17.4.  LoST Namespace Registration\n   URI:  urn:ietf:params:xml:ns:lost1\n \
    \  Registrant Contact:  IETF ECRIT Working Group, Hannes Tschofenig\n      (Hannes.Tschofenig@nsn.com).\n\
    \   XML:\n"
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: <?xml version="1.0"?>
  contents:
  - '<?xml version="1.0"?>

    '
- title: <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.0//EN"
  contents:
  - "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.0//EN\"\n  \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\"\
    >\n"
- title: <html xmlns="http://www.w3.org/1999/xhtml">
  contents:
  - '<html xmlns="http://www.w3.org/1999/xhtml">

    '
- title: <head>
  contents:
  - "<head>\n  <meta http-equiv=\"content-type\"\n        content=\"text/html;charset=iso-8859-1\"\
    />\n  <title>LoST Namespace</title>\n"
- title: </head>
  contents:
  - '</head>

    '
- title: <body>
  contents:
  - "<body>\n  <h1>Namespace for LoST</h1>\n  <h2>urn:ietf:params:xml:ns:lost1</h2>\n"
- title: <p>See <a href="http://www.rfc-editor.org/rfc/rfc5222.txt">
  contents:
  - "<p>See <a href=\"http://www.rfc-editor.org/rfc/rfc5222.txt\">\n   RFC5222</a>.</p>\n"
- title: </body>
  contents:
  - '</body>

    '
- title: </html>
  contents:
  - '</html>

    '
- title: END
  contents:
  - 'END

    '
- title: 17.5.  LoST Location Profile Registry
  contents:
  - "17.5.  LoST Location Profile Registry\n   This document creates a registry of\
    \ location profile names for the\n   LoST protocol.  Profile names are XML tokens.\
    \  This registry will\n   operate in accordance with RFC 5226 [2], Standards Action.\n\
    \   geodetic-2d:\n      Defined in Section 12.2.\n   civic:\n      Defined in\
    \ Section 12.3.\n"
- title: 18.  Security Considerations
  contents:
  - "18.  Security Considerations\n   There are several threats to the overall system\
    \ of which service\n   mapping forms a part.  An attacker that can obtain service\
    \ contact\n   URIs can use those URIs to attempt to disrupt those services.  An\n\
    \   attacker that can prevent the lookup of contact URIs can impair the\n   reachability\
    \ of such services.  An attacker that can eavesdrop on the\n   communication requesting\
    \ this lookup can surmise the existence of an\n   emergency and possibly its nature,\
    \ and may be able to use this to\n   launch a physical attack on the caller.\n\
    \   To avoid an attacker modifying the query or its result, Transport\n   Layer\
    \ Security (TLS) MUST be implemented and SHOULD be used.  Use is\n   RECOMMENDED\
    \ both for clients' queries to servers and for queries\n   among servers; this\
    \ latter recommendation is to help avoid LoST cache\n   poisoning attacks by replacing\
    \ answers given to caching LoST servers.\n   The use of server identity checks\
    \ with TLS, as described in Section\n   3.1 of [4], is also RECOMMENDED.  Omitting\
    \ the server identity check\n   allows an attacker to masquerade as a LoST server,\
    \ so this approach\n   should be used only when getting any answer, even from\
    \ a potentially\n   malicious LoST server, is preferred over closing the connection\
    \ (and\n   thus not getting any answer at all).  The host name compared against\n\
    \   the server certificate is the host name in the URI, not the DNS name\n   used\
    \ as input to NAPTR resolution.\n   Note that the security considerations in [22]\
    \ recommend comparing the\n   input of NAPTR resolution to the certificate, not\
    \ the output (host\n   name in the URI).  This approach was not chosen because\
    \ in emergency\n   service use cases, it is likely that deployments will see a\
    \ large\n   number of inputs to the U-NAPTR algorithm resolving to a single\n\
    \   server, typically run by a local emergency services authority.  In\n   this\
    \ case, checking the input to the NAPTR resolution against the\n   certificates\
    \ provided by the LoST server would be impractical, as the\n   list of organizations\
    \ using it would be large, subject to rapid\n   change, and unknown to the LoST\
    \ server operator.\n   The use of server identity does leave open the possibility\
    \ of DNS-\n   based attacks, as the NAPTR records may be altered by an attacker.\n\
    \   The attacks include, for example, interception of DNS packets between\n  \
    \ the client and the recursive name server, DNS cache poisoning, and\n   intentional\
    \ modifications by the recursive name server; see [23] for\n   more comprehensive\
    \ discussion.\n   DNS Security (DNSSEC) [20] can be used to protect against these\n\
    \   threats.  While DNSSEC is incompletely deployed, users should be\n   aware\
    \ of the risk, particularly when they are requesting NAPTR\n   records in environments\
    \ where the local recursive name server, or the\n   network between the client\
    \ and the local recursive name server, is\n   not considered trustworthy.\n  \
    \ LoST deployments that are unable to use DNSSEC and unwilling to trust\n   DNS\
    \ resolution without DNSSEC cannot use the NATPR-based discovery of\n   LoST servers\
    \ as is.  When suitable configuration mechanisms are\n   available, one possibility\
    \ is to configure the LoST server URIs\n   (instead of the domain name to be used\
    \ for NAPTR resolution)\n   directly.  Future specifications for applying LoST\
    \ in non-emergency\n   services may also specify additional discovery mechanisms\
    \ and name\n   matching semantics.\n   Generally, LoST servers will not need to\
    \ authenticate or authorize\n   clients presenting mapping queries.  If they do,\
    \ an authentication of\n   the underlying transport mechanism, such as HTTP basic\
    \ and digest\n   authentication, MAY be used.  Basic authentication SHOULD only\
    \ be\n   used in combination with TLS.\n   A more detailed description of threats\
    \ and security requirements is\n   provided in [17].  The threats and security\
    \ requirements in non-\n   emergency service uses of LoST may be considerably\
    \ different from\n   those described here.  For example, an attacker might seek\
    \ monetary\n   benefit by returning service mapping information that directed\
    \ users\n   to specific service providers.  Before deploying LoST in new\n   contexts,\
    \ a thorough analysis of the threats and requirements\n   specific to that context\
    \ should be undertaken and decisions made on\n   the appropriate mitigations.\n"
- title: 19.  Acknowledgments
  contents:
  - "19.  Acknowledgments\n   We would like to the thank the following working group\
    \ members for\n   the detailed review of previous LoST document versions:\n  \
    \ o  Martin Thomson (Review July 2006)\n   o  Jonathan Rosenberg (Review July\
    \ 2006)\n   o  Leslie Daigle (Review September 2006)\n   o  Shida Schubert (Review\
    \ November 2006)\n   o  Martin Thomson (Review December 2006)\n   o  Barbara Stark\
    \ (Review January 2007)\n   o  Patrik Faltstrom (Review January 2007)\n   o  Shida\
    \ Schubert (Review January 2007 as a designated expert\n      reviewer)\n   o\
    \  Jonathan Rosenberg (Review February 2007)\n   o  Tom Taylor (Review February\
    \ 2007)\n   o  Theresa Reese (Review February 2007)\n   o  Shida Schubert (Review\
    \ February 2007)\n   o  James Winterbottom (Review July 2007)\n   o  Karl Heinz\
    \ Wolf (Review May and June 2007)\n   We would also like to thank the following\
    \ working group members for\n   their input to selected design aspects of the\
    \ LoST protocol:\n   o  Leslie Daigle and Martin Thomson (DNS-based LoST discovery\n\
    \      procedure)\n   o  John Schnizlein (authoritive LoST answers)\n   o  Rohan\
    \ Mahy (display names)\n   o  James Polk (error handling)\n   o  Ron Watro and\
    \ Richard Barnes (expiry of cached data)\n   o  Stephen Edge, Keith Drage, Tom\
    \ Taylor, Martin Thomson, and James\n      Winterbottom (indication of PSAP confidence\
    \ level)\n   o  Martin Thomson (service boundary references)\n   o  Martin Thomson\
    \ (service URN in LoST response message)\n   o  Clive D.W. Feather, Martin Thomson\
    \ (validation functionality)\n   o  Roger Marshall (PSAP preference in LoST response)\n\
    \   o  James Winterbottom, Marc Linsner, Keith Drage, Tom Taylor, Martin\n   \
    \   Thomson, John Schnizlein, Shida Schubert, Clive D.W. Feather,\n      Richard\
    \ Stastny, John Hearty, Roger Marshall, Jean-Francois Mule,\n      Pierre Desjardins\
    \ (location profiles)\n   o  Michael Hammer, Patrik Faltstrom, Richard Stastny,\
    \ Martin Thomson,\n      Roger Marshall, Tom Taylor, Spencer Dawkins, Keith Drage\
    \ (list\n      services functionality)\n   o  Martin Thomson, Michael Hammer (mapping\
    \ of services)\n   o  Shida Schubert, James Winterbottom, Keith Drage (default\
    \ service\n      URN)\n   o  Otmar Lendl (LoST aggregation)\n   o  Tom Taylor\
    \ (terminology)\n   Klaus Darilion and Marc Linsner provided miscellaneous input\
    \ to the\n   design of the protocol.  Finally, we would like to thank Brian Rosen,\n\
    \   who participated in almost every discussion thread.\n   Early implementation\
    \ efforts led to good feedback by two open source\n   implementation groups. \
    \ We would like to thank the implementers for\n   their work and for helping us\
    \ to improve the quality of the\n   specification:\n   o  Wonsang Song\n   o \
    \ Jong-Yul Kim\n   o  Anna Makarowska\n   o  Krzysztof Rzecki\n   o  Blaszczyk\
    \ Piotr\n   We would like to thank Jon Peterson, Dan Romascanu, Lisa Dusseault,\n\
    \   and Tim Polk for their IESG review comments.  Blocking IESG comments\n   were\
    \ also received from Pasi Eronen (succeeding Sam Hartman's review)\n   and Cullen\
    \ Jennings.  Adjustments have been made to several pieces of\n   text to satisfy\
    \ these requests for changes, most notably in the\n   Security Considerations\
    \ and in the discussion of redirection in the\n   presence of overlapping coverage\
    \ areas.\n"
- title: 20.  References
  contents:
  - '20.  References

    '
- title: 20.1.  Normative References
  contents:
  - "20.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [2]   Narten, T. and H. Alvestrand, \"Guidelines for Writing an IANA\n   \
    \      Considerations Section in RFCs\", BCP 26, RFC 5226, May 2008.\n   [3] \
    \  Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L.,\n         Leach,\
    \ P., and T. Berners-Lee, \"Hypertext Transfer Protocol --\n         HTTP/1.1\"\
    , RFC 2616, June 1999.\n   [4]   Rescorla, E., \"HTTP Over TLS\", RFC 2818, May\
    \ 2000.\n   [5]   Murata, M., St. Laurent, S., and D. Kohn, \"XML Media Types\"\
    ,\n         RFC 3023, January 2001.\n   [6]   Peterson, J., \"A Presence-based\
    \ GEOPRIV Location Object\n         Format\", RFC 4119, December 2005.\n   [7]\
    \   Freed, N. and J. Klensin, \"Media Type Specifications and\n         Registration\
    \ Procedures\", BCP 13, RFC 4288, December 2005.\n   [8]   Daigle, L., \"Domain-Based\
    \ Application Service Location Using\n         URIs and the Dynamic Delegation\
    \ Discovery Service (DDDS)\",\n         RFC 4848, April 2007.\n   [9]   Schulzrinne,\
    \ H., \"A Uniform Resource Name (URN) for Emergency\n         and Other Well-Known\
    \ Services\", RFC 5031, January 2008.\n   [10]  Thomson, M. and J. Winterbottom,\
    \ \"Revised Civic Location Format\n         for Presence Information Data Format\
    \ Location Object\n         (PIDF-LO)\", RFC 5139, February 2008.\n   [11]  Cox,\
    \ S., Daisey, P., Lake, R., Portele, C., and A. Whiteside,\n         \"Geographic\
    \ information - Geography Markup Language (GML)\", OGC\n         Standard OpenGIS\
    \ 03-105r1, April 2004.\n   [12]  Reed, C. and M. Thomson, \"GML 3.1.1 PIDF-LO\
    \ Shape Application\n         Schema for use by the Internet Engineering Task\
    \ Force (IETF)\",\n         Candidate OpenGIS Implementation Specification , December\
    \ 2006.\n"
- title: 20.2.  Informative References
  contents:
  - "20.2.  Informative References\n   [13]  Winterbottom, J., Thomson, M., and H.\
    \ Tschofenig, \"GEOPRIV\n         PIDF-LO Usage Clarification, Considerations\
    \ and\n         Recommendations\", Work in Progress, February 2008.\n   [14] \
    \ Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n         Peterson,\
    \ J., Sparks, R., Handley, M., and E. Schooler, \"SIP:\n         Session Initiation\
    \ Protocol\", RFC 3261, June 2002.\n   [15]  Saint-Andre, P., Ed., \"Extensible\
    \ Messaging and Presence\n         Protocol (XMPP): Instant Messaging and Presence\"\
    , RFC 3921,\n         October 2004.\n   [16]  Schulzrinne, H., \"The tel URI for\
    \ Telephone Numbers\", RFC 3966,\n         December 2004.\n   [17]  Taylor, T.,\
    \ Tschofenig, H., Schulzrinne, H., and M. Shanmugam,\n         \"Security Threats\
    \ and Requirements for Emergency Call Marking\n         and Mapping\", RFC 5069,\
    \ January 2008.\n   [18]  Schulzrinne, H. and R. Marshall, \"Requirements for\
    \ Emergency\n         Context Resolution with Internet Technologies\", RFC 5012,\n\
    \         January 2008.\n   [19]  Schulzrinne, H., \"Location-to-URL Mapping Architecture\
    \ and\n         Framework\", Work in Progress, September 2007.\n   [20]  Arends,\
    \ R., Austein, R., Larson, M., Massey, D., and S. Rose,\n         \"DNS Security\
    \ Introduction and Requirements\", RFC 4033,\n         March 2005.\n   [21]  Rosen,\
    \ B. and J. Polk, \"Best Current Practice for\n         Communications Services\
    \ in support of Emergency Calling\", Work\n         in Progress, February 2008.\n\
    \   [22]  Daigle, L. and A. Newton, \"Domain-Based Application Service\n     \
    \    Location Using SRV RRs and the Dynamic Delegation Discovery\n         Service\
    \ (DDDS)\", RFC 3958, January 2005.\n   [23]  Atkins, D. and R. Austein, \"Threat\
    \ Analysis of the Domain Name\n         System (DNS)\", RFC 3833, August 2004.\n\
    \   [24]  <http://www.tschofenig.priv.at/svn/draft-ietf-ecrit-lost/\n        \
    \ RelaxNG>.\n   [25]  Schulzrinne, H., Polk, J., and H. Tschofenig, \"Discovering\n\
    \         Location-to-Service Translation (LoST) Servers Using the\n         Dynamic\
    \ Host Configuration Protocol (DHCP)\", RFC 5223,\n         August 2008.\n"
- title: Appendix A.  Non-Normative RELAX NG Schema in XML Syntax
  contents:
  - "Appendix A.  Non-Normative RELAX NG Schema in XML Syntax\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <grammar ns=\"urn:ietf:params:xml:ns:lost1\"\n\
    \           xmlns=\"http://relaxng.org/ns/structure/1.0\"\n           xmlns:a=\"\
    http://relaxng.org/ns/compatibility/annotations/1.0\"\n           datatypeLibrary=\"\
    http://www.w3.org/2001/XMLSchema-datatypes\">\n           <start>\n       <a:documentation>\n\
    \         Location-to-Service Translation (LoST) Protocol\n         A LoST XML\
    \ instance has three request types, each with\n         a corresponding response\
    \ type: find service, list services,\n         and get service boundary.\n   \
    \    </a:documentation>\n       <choice>\n         <ref name=\"findService\"/>\n\
    \         <ref name=\"listServices\"/>\n         <ref name=\"listServicesByLocation\"\
    />\n         <ref name=\"getServiceBoundary\"/>\n         <ref name=\"findServiceResponse\"\
    />\n         <ref name=\"listServicesResponse\"/>\n         <ref name=\"listServicesByLocationResponse\"\
    />\n         <ref name=\"getServiceBoundaryResponse\"/>\n         <ref name=\"\
    errors\"/>\n         <ref name=\"redirect\"/>\n       </choice>\n           </start>\n\
    \     <div>\n       <a:documentation>\n         The queries.\n       </a:documentation>\n\
    \       <define name=\"findService\">\n         <element name=\"findService\"\
    >\n           <ref name=\"requestLocation\"/>\n           <ref name=\"commonRequestPattern\"\
    />\n           <optional>\n             <attribute name=\"validateLocation\">\n\
    \               <data type=\"boolean\"/>\n               <a:defaultValue>false</a:defaultValue>\n\
    \             </attribute>\n           </optional>\n           <optional>\n  \
    \           <attribute name=\"serviceBoundary\">\n               <choice>\n  \
    \               <value>reference</value>\n                 <value>value</value>\n\
    \               </choice>\n               <a:defaultValue>reference</a:defaultValue>\n\
    \             </attribute>\n           </optional>\n           <optional>\n  \
    \           <attribute name=\"recursive\">\n               <data type=\"boolean\"\
    />\n                 <a:defaultValue>false</a:defaultValue>\n             </attribute>\n\
    \           </optional>\n         </element>\n       </define>\n       <define\
    \ name=\"listServices\">\n         <element name=\"listServices\">\n         \
    \  <ref name=\"commonRequestPattern\"/>\n         </element>\n       </define>\n\
    \       <define name=\"listServicesByLocation\">\n         <element name=\"listServicesByLocation\"\
    >\n           <ref name=\"requestLocation\"/>\n           <ref name=\"commonRequestPattern\"\
    />\n           <optional>\n             <attribute name=\"recursive\">\n     \
    \          <data type=\"boolean\"/>\n               <a:defaultValue>true</a:defaultValue>\n\
    \             </attribute>\n           </optional>\n         </element>\n    \
    \   </define>\n       <define name=\"getServiceBoundary\">\n         <element\
    \ name=\"getServiceBoundary\">\n           <ref name=\"serviceBoundaryKey\"/>\n\
    \           <ref name=\"extensionPoint\"/>\n         </element>\n       </define>\n\
    \     </div>\n     <div>\n       <a:documentation>\n         The responses.\n\
    \       </a:documentation>\n       <define name=\"findServiceResponse\">\n   \
    \      <element name=\"findServiceResponse\">\n           <oneOrMore>\n      \
    \       <ref name=\"mapping\"/>\n           </oneOrMore>\n           <optional>\n\
    \             <ref name=\"locationValidation\"/>\n           </optional>\n   \
    \        <ref name=\"commonResponsePattern\"/>\n           <ref name=\"locationUsed\"\
    />\n         </element>\n       </define>\n       <define name=\"listServicesResponse\"\
    >\n         <element name=\"listServicesResponse\">\n           <ref name=\"serviceList\"\
    />\n           <ref name=\"commonResponsePattern\"/>\n         </element>\n  \
    \     </define>\n       <define name=\"listServicesByLocationResponse\">\n   \
    \      <element name=\"listServicesByLocationResponse\">\n           <ref name=\"\
    serviceList\"/>\n           <ref name=\"commonResponsePattern\"/>\n          \
    \ <ref name=\"locationUsed\"/>\n         </element>\n       </define>\n      \
    \ <define name=\"getServiceBoundaryResponse\">\n         <element name=\"getServiceBoundaryResponse\"\
    >\n           <ref name=\"serviceBoundary\"/>\n           <ref name=\"commonResponsePattern\"\
    />\n         </element>\n       </define>\n     </div>\n     <div>\n       <a:documentation>\n\
    \         A pattern common to some of the queries.\n       </a:documentation>\n\
    \       <define name=\"commonRequestPattern\">\n         <ref name=\"service\"\
    />\n         <optional>\n           <ref name=\"path\"/>\n         </optional>\n\
    \         <ref name=\"extensionPoint\"/>\n       </define>\n     </div>\n    \
    \ <div>\n       <a:documentation>\n         A pattern common to responses.\n \
    \      </a:documentation>\n       <define name=\"commonResponsePattern\">\n  \
    \       <zeroOrMore>\n           <ref name=\"warnings\"/>\n         </zeroOrMore>\n\
    \         <ref name=\"path\"/>\n         <ref name=\"extensionPoint\"/>\n    \
    \   </define>\n     </div>\n     <div>\n       <a:documentation>\n         Location\
    \ in Requests\n       </a:documentation>\n       <define name=\"requestLocation\"\
    >\n         <oneOrMore>\n           <element name=\"location\">\n            \
    \ <attribute name=\"id\">\n               <data type=\"token\"/>\n           \
    \  </attribute>\n             <ref name=\"locationInformation\"/>\n          \
    \ </element>\n         </oneOrMore>\n       </define>\n     </div>\n     <div>\n\
    \       <a:documentation>\n         Location Information\n       </a:documentation>\n\
    \       <define name=\"locationInformation\">\n         <oneOrMore>\n        \
    \   <ref name=\"extensionPoint\"/>\n         </oneOrMore>\n         <optional>\n\
    \           <attribute name=\"profile\">\n             <data type=\"NMTOKEN\"\
    />\n           </attribute>\n         </optional>\n       </define>\n     </div>\n\
    \     <div>\n       <a:documentation>\n         Service Boundary\n       </a:documentation>\n\
    \       <define name=\"serviceBoundary\">\n         <oneOrMore>\n           <element\
    \ name=\"serviceBoundary\">\n             <ref name=\"locationInformation\"/>\n\
    \           </element>\n         </oneOrMore>\n       </define>\n     </div>\n\
    \     <div>\n       <a:documentation>\n         Service Boundary Reference\n \
    \      </a:documentation>\n       <define name=\"serviceBoundaryReference\">\n\
    \         <element name=\"serviceBoundaryReference\">\n           <ref name=\"\
    source\"/>\n           <ref name=\"serviceBoundaryKey\"/>\n           <ref name=\"\
    extensionPoint\"/>\n         </element>\n       </define>\n       <define name=\"\
    serviceBoundaryKey\">\n         <attribute name=\"key\">\n           <data type=\"\
    token\"/>\n         </attribute>\n       </define>\n     </div>\n     <div>\n\
    \       <a:documentation>\n         Path -\n         Contains a list of via elements\
    \ -\n         places through which information flowed\n       </a:documentation>\n\
    \       <define name=\"path\">\n         <element name=\"path\">\n           <oneOrMore>\n\
    \             <element name=\"via\">\n               <ref name=\"source\"/>\n\
    \               <ref name=\"extensionPoint\"/>\n             </element>\n    \
    \       </oneOrMore>\n         </element>\n       </define>\n     </div>\n   \
    \  <div>\n       <a:documentation>\n         Location Used\n       </a:documentation>\n\
    \       <define name=\"locationUsed\">\n         <optional>\n           <element\
    \ name=\"locationUsed\">\n             <attribute name=\"id\">\n             \
    \  <data type=\"token\"/>\n             </attribute>\n           </element>\n\
    \         </optional>\n       </define>\n     </div>\n     <div>\n       <a:documentation>\n\
    \         Expires pattern\n       </a:documentation>\n       <define name=\"expires\"\
    >\n         <attribute name=\"expires\">\n           <choice>\n             <data\
    \ type=\"dateTime\"/>\n             <value>NO-CACHE</value>\n             <value>NO-EXPIRATION</value>\n\
    \           </choice>\n         </attribute>\n       </define>\n     </div>\n\
    \     <div>\n       <a:documentation>\n         A QName list\n       </a:documentation>\n\
    \       <define name=\"qnameList\">\n         <list>\n           <zeroOrMore>\n\
    \             <data type=\"QName\"/>\n           </zeroOrMore>\n         </list>\n\
    \       </define>\n     </div>\n     <div>\n       <a:documentation>\n       \
    \  A location-to-service mapping.\n       </a:documentation>\n       <define name=\"\
    mapping\">\n         <element name=\"mapping\">\n           <zeroOrMore>\n   \
    \          <element name=\"displayName\">\n               <data type=\"string\"\
    />\n               <attribute name=\"xml:lang\">\n                 <data type=\"\
    language\"/>\n               </attribute>\n             </element>\n         \
    \  </zeroOrMore>\n           <ref name=\"service\"/>\n           <optional>\n\
    \             <choice>\n               <ref name=\"serviceBoundary\"/>\n     \
    \          <ref name=\"serviceBoundaryReference\"/>\n             </choice>\n\
    \           </optional>\n           <zeroOrMore>\n             <element name=\"\
    uri\">\n               <data type=\"anyURI\"/>\n             </element>\n    \
    \       </zeroOrMore>\n           <optional>\n             <element name=\"serviceNumber\"\
    >\n               <data type=\"token\">\n                 <param name=\"pattern\"\
    >[0-9*#]+</param>\n               </data>\n             </element>\n         \
    \  </optional>\n           <ref name=\"extensionPoint\"/>\n           <ref name=\"\
    expires\"/>\n           <attribute name=\"lastUpdated\">\n             <data type=\"\
    dateTime\"/>\n           </attribute>\n           <ref name=\"source\"/>\n   \
    \        <attribute name=\"sourceId\">\n             <data type=\"token\"/>\n\
    \           </attribute>\n           <ref name=\"message\"/>\n         </element>\n\
    \       </define>\n     </div>\n     <div>\n       <a:documentation>\n       \
    \  Location validation\n       </a:documentation>\n       <define name=\"locationValidation\"\
    >\n         <element name=\"locationValidation\">\n           <optional>\n   \
    \          <element name=\"valid\">\n               <ref name=\"qnameList\"/>\n\
    \             </element>\n           </optional>\n           <optional>\n    \
    \         <element name=\"invalid\">\n               <ref name=\"qnameList\"/>\n\
    \             </element>\n           </optional>\n           <optional>\n    \
    \         <element name=\"unchecked\">\n               <ref name=\"qnameList\"\
    />\n             </element>\n           </optional>\n           <ref name=\"extensionPoint\"\
    />\n         </element>\n       </define>\n     </div>\n     <div>\n       <a:documentation>\n\
    \         Errors and Warnings Container.\n       </a:documentation>\n       <define\
    \ name=\"exceptionContainer\">\n         <interleave>\n           <optional>\n\
    \             <ref name=\"badRequest\"/>\n           </optional>\n           <optional>\n\
    \             <ref name=\"internalError\"/>\n           </optional>\n        \
    \   <optional>\n             <ref name=\"serviceSubstitution\"/>\n           </optional>\n\
    \           <optional>\n             <ref name=\"defaultMappingReturned\"/>\n\
    \           </optional>\n           <optional>\n             <ref name=\"forbidden\"\
    />\n           </optional>\n           <optional>\n             <ref name=\"notFound\"\
    />\n           </optional>\n           <optional>\n             <ref name=\"loop\"\
    />\n           </optional>\n           <optional>\n             <ref name=\"serviceNotImplemented\"\
    />\n           </optional>\n           <optional>\n             <ref name=\"serverTimeout\"\
    />\n           </optional>\n           <optional>\n             <ref name=\"serverError\"\
    />\n           </optional>\n           <optional>\n             <ref name=\"locationInvalid\"\
    />\n           </optional>\n           <optional>\n             <ref name=\"locationProfileUnrecognized\"\
    />\n           </optional>\n         </interleave>\n         <ref name=\"extensionPoint\"\
    />\n         <ref name=\"source\"/>\n       </define>\n       <define name=\"\
    errors\">\n         <element name=\"errors\">\n           <ref name=\"exceptionContainer\"\
    />\n         </element>\n       </define>\n       <define name=\"warnings\">\n\
    \         <element name=\"warnings\">\n           <ref name=\"exceptionContainer\"\
    />\n         </element>\n       </define>\n     </div>\n     <div>\n       <a:documentation>\n\
    \         Basic Exceptions\n       </a:documentation>\n       <define name=\"\
    basicException\">\n         <a:documentation>\n           Exception pattern.\n\
    \         </a:documentation>\n         <ref name=\"message\"/>\n         <ref\
    \ name=\"extensionPoint\"/>\n       </define>\n       <define name=\"badRequest\"\
    >\n         <element name=\"badRequest\">\n           <ref name=\"basicException\"\
    />\n         </element>\n       </define>\n       <define name=\"internalError\"\
    >\n         <element name=\"internalError\">\n           <ref name=\"basicException\"\
    />\n         </element>\n       </define>\n       <define name=\"serviceSubstitution\"\
    >\n         <element name=\"serviceSubstitution\">\n           <ref name=\"basicException\"\
    />\n         </element>\n       </define>\n       <define name=\"defaultMappingReturned\"\
    >\n         <element name=\"defaultMappingReturned\">\n           <ref name=\"\
    basicException\"/>\n         </element>\n       </define>\n       <define name=\"\
    forbidden\">\n         <element name=\"forbidden\">\n           <ref name=\"basicException\"\
    />\n         </element>\n       </define>\n       <define name=\"notFound\">\n\
    \         <element name=\"notFound\">\n           <ref name=\"basicException\"\
    />\n         </element>\n       </define>\n       <define name=\"loop\">\n   \
    \      <element name=\"loop\">\n           <ref name=\"basicException\"/>\n  \
    \       </element>\n       </define>\n       <define name=\"serviceNotImplemented\"\
    >\n         <element name=\"serviceNotImplemented\">\n           <ref name=\"\
    basicException\"/>\n         </element>\n       </define>\n       <define name=\"\
    serverTimeout\">\n         <element name=\"serverTimeout\">\n           <ref name=\"\
    basicException\"/>\n         </element>\n       </define>\n       <define name=\"\
    serverError\">\n         <element name=\"serverError\">\n           <ref name=\"\
    basicException\"/>\n         </element>\n       </define>\n       <define name=\"\
    locationInvalid\">\n         <element name=\"locationInvalid\">\n           <ref\
    \ name=\"basicException\"/>\n         </element>\n       </define>\n       <define\
    \ name=\"locationValidationUnavailable\">\n         <element name=\"locationValidationUnavailable\"\
    >\n           <ref name=\"basicException\"/>\n         </element>\n       </define>\n\
    \       <define name=\"locationProfileUnrecognized\">\n         <element name=\"\
    locationProfileUnrecognized\">\n           <attribute name=\"unsupportedProfiles\"\
    >\n             <data type=\"NMTOKENS\"/>\n           </attribute>\n         \
    \  <ref name=\"basicException\"/>\n         </element>\n       </define>\n   \
    \  </div>\n     <div>\n       <a:documentation>\n         Redirect.\n       </a:documentation>\n\
    \       <define name=\"redirect\">\n         <a:documentation>\n           Redirect\
    \ pattern\n         </a:documentation>\n         <element name=\"redirect\">\n\
    \           <attribute name=\"target\">\n             <ref name=\"appUniqueString\"\
    />\n           </attribute>\n           <ref name=\"source\"/>\n           <ref\
    \ name=\"message\"/>\n           <ref name=\"extensionPoint\"/>\n         </element>\n\
    \       </define>\n     </div>\n     <div>\n       <a:documentation>\n       \
    \  Some common patterns.\n       </a:documentation>\n       <define name=\"message\"\
    >\n         <optional>\n           <group>\n             <attribute name=\"message\"\
    >\n               <data type=\"token\"/>\n             </attribute>\n        \
    \     <attribute name=\"xml:lang\">\n               <data type=\"language\"/>\n\
    \             </attribute>\n           </group>\n         </optional>\n      \
    \ </define>\n       <define name=\"service\">\n         <optional>\n         \
    \  <element name=\"service\">\n             <data type=\"anyURI\"/>\n        \
    \   </element>\n         </optional>\n       </define>\n       <define name=\"\
    appUniqueString\">\n         <data type=\"token\">\n           <param name=\"\
    pattern\">([a-zA-Z0-9\\-]+\\.)+[a-zA-Z0-9]+</param>\n         </data>\n      \
    \ </define>\n       <define name=\"source\">\n         <attribute name=\"source\"\
    >\n           <ref name=\"appUniqueString\"/>\n         </attribute>\n       </define>\n\
    \       <define name=\"serviceList\">\n         <element name=\"serviceList\"\
    >\n           <list>\n             <zeroOrMore>\n               <data type=\"\
    anyURI\"/>\n             </zeroOrMore>\n           </list>\n         </element>\n\
    \       </define>\n     </div>\n     <div>\n       <a:documentation>\n       \
    \  Patterns for inclusion of elements from schemas in\n         other namespaces.\n\
    \       </a:documentation>\n       <define name=\"notLost\">\n         <a:documentation>\n\
    \           Any element not in the LoST namespace.\n         </a:documentation>\n\
    \         <element>\n           <anyName>\n             <except>\n           \
    \    <nsName ns=\"urn:ietf:params:xml:ns:lost1\"/>\n               <nsName/>\n\
    \             </except>\n           </anyName>\n           <ref name=\"anyElement\"\
    />\n         </element>\n       </define>\n       <define name=\"anyElement\"\
    >\n         <a:documentation>\n           A wildcard pattern for including any\
    \ element\n           from any other namespace.\n         </a:documentation>\n\
    \         <zeroOrMore>\n           <choice>\n             <element>\n        \
    \       <anyName/>\n               <ref name=\"anyElement\"/>\n             </element>\n\
    \             <attribute>\n               <anyName/>\n             </attribute>\n\
    \             <text/>\n           </choice>\n         </zeroOrMore>\n       </define>\n\
    \       <define name=\"extensionPoint\">\n         <a:documentation>\n       \
    \    A point where future extensions\n           (elements from other namespaces)\n\
    \           can be added.\n         </a:documentation>\n         <zeroOrMore>\n\
    \           <ref name=\"notLost\"/>\n         </zeroOrMore>\n       </define>\n\
    \     </div>\n   </grammar>\n                                 Figure 21\n"
- title: Appendix B.  Examples Online
  contents:
  - "Appendix B.  Examples Online\n   The XML examples and Relax NG schemas may be\
    \ found online [24].\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ted Hardie\n   Qualcomm, Inc.\n   EMail: hardie@qualcomm.com\n\
    \   Andrew Newton\n   American Registry for Internet Numbers\n   3635 Concorde\
    \ Parkway, Suite 200\n   Chantilly, VA  20151\n   US\n   Phone: +1 703 227 9894\n\
    \   EMail: andy@hxr.us\n   Henning Schulzrinne\n   Columbia University\n   Department\
    \ of Computer Science\n   450 Computer Science Building\n   New York, NY  10027\n\
    \   US\n   Phone: +1 212 939 7004\n   EMail: hgs+ecrit@cs.columbia.edu\n   URI:\
    \   http://www.cs.columbia.edu\n   Hannes Tschofenig\n   Nokia Siemens Networks\n\
    \   Linnoitustie 6\n   Espoo  02600\n   Finland\n   Phone: +358 (50) 4871445\n\
    \   EMail: Hannes.Tschofenig@nsn.com\n   URI:   http://www.tschofenig.priv.at\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
