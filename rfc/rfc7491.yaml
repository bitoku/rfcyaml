- title: __initial_text__
  contents:
  - '   A PCE-Based Architecture for Application-Based Network Operations

    '
- title: Abstract
  contents:
  - "Abstract\n   Services such as content distribution, distributed databases, or\n\
    \   inter-data center connectivity place a set of new requirements on the\n  \
    \ operation of networks.  They need on-demand and application-specific\n   reservation\
    \ of network connectivity, reliability, and resources (such\n   as bandwidth)\
    \ in a variety of network applications (such as point-to-\n   point connectivity,\
    \ network virtualization, or mobile back-haul) and\n   in a range of network technologies\
    \ from packet (IP/MPLS) down to\n   optical.  An environment that operates to\
    \ meet these types of\n   requirements is said to have Application-Based Network\
    \ Operations\n   (ABNO).  ABNO brings together many existing technologies and\
    \ may be\n   seen as the use of a toolbox of existing components enhanced with\
    \ a\n   few new elements.\n   This document describes an architecture and framework\
    \ for ABNO,\n   showing how these components fit together.  It provides a cookbook\
    \ of\n   existing technologies to satisfy the architecture and meet the needs\n\
    \   of the applications.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7491.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Scope ......................................................5\n  \
    \ 2. Application-Based Network Operations (ABNO) .....................6\n    \
    \  2.1. Assumptions ................................................6\n      2.2.\
    \ Implementation of the Architecture .........................6\n      2.3. Generic\
    \ ABNO Architecture ..................................7\n           2.3.1. ABNO\
    \ Components .....................................8\n           2.3.2. Functional\
    \ Interfaces ..............................15\n   3. ABNO Use Cases .................................................24\n\
    \      3.1. Inter-AS Connectivity .....................................24\n  \
    \    3.2. Multi-Layer Networking ....................................30\n    \
    \       3.2.1. Data Center Interconnection across\n                  Multi-Layer\
    \ Networks ...............................34\n      3.3. Make-before-Break .........................................37\n\
    \           3.3.1. Make-before-Break for Reoptimization ...............37\n  \
    \         3.3.2. Make-before-Break for Restoration ..................38\n    \
    \       3.3.3. Make-before-Break for Path Test and Selection ......40\n      3.4.\
    \ Global Concurrent Optimization ............................42\n           3.4.1.\
    \ Use Case: GCO with MPLS LSPs .......................43\n      3.5. Adaptive\
    \ Network Management (ANM) .........................45\n           3.5.1. ANM\
    \ Trigger ........................................46\n           3.5.2. Processing\
    \ Request and GCO Computation .............46\n           3.5.3. Automated Provisioning\
    \ Process .....................47\n      3.6. Pseudowire Operations and Management\
    \ ......................48\n           3.6.1. Multi-Segment Pseudowires ..........................48\n\
    \           3.6.2. Path-Diverse Pseudowires ...........................50\n  \
    \         3.6.3. Path-Diverse Multi-Segment Pseudowires .............51\n    \
    \       3.6.4. Pseudowire Segment Protection ......................52\n      \
    \     3.6.5. Applicability of ABNO to Pseudowires ...............52\n      3.7.\
    \ Cross-Stratum Optimization (CSO) ..........................53\n           3.7.1.\
    \ Data Center Network Operation ......................53\n           3.7.2. Application\
    \ of the ABNO Architecture ...............56\n      3.8. ALTO Server ...............................................58\n\
    \      3.9. Other Potential Use Cases .................................61\n  \
    \         3.9.1. Traffic Grooming and Regrooming ....................61\n    \
    \       3.9.2. Bandwidth Scheduling ...............................62\n   4. Survivability\
    \ and Redundancy within the ABNO Architecture ......62\n   5. Security Considerations\
    \ ........................................63\n   6. Manageability Considerations\
    \ ...................................63\n   7. Informative References .........................................64\n\
    \   Appendix A. Undefined Interfaces ..................................69\n  \
    \ Acknowledgements ..................................................70\n   Contributors\
    \ ......................................................71\n   Authors' Addresses\
    \ ................................................71\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Networks today integrate multiple technologies allowing\
    \ network\n   infrastructure to deliver a variety of services to support the\n\
    \   different characteristics and demands of applications.  There is an\n   increasing\
    \ demand to make the network responsive to service requests\n   issued directly\
    \ from the application layer.  This differs from the\n   established model where\
    \ services in the network are delivered in\n   response to management commands\
    \ driven by a human user.\n   These application-driven requests and the services\
    \ they establish\n   place a set of new requirements on the operation of networks.\
    \  They\n   need on-demand and application-specific reservation of network\n \
    \  connectivity, reliability, and resources (such as bandwidth) in a\n   variety\
    \ of network applications (such as point-to-point connectivity,\n   network virtualization,\
    \ or mobile back-haul) and in a range of\n   network technologies from packet\
    \ (IP/MPLS) down to optical.  An\n   environment that operates to meet this type\
    \ of application-aware\n   requirement is said to have Application-Based Network\
    \ Operations\n   (ABNO).\n   The Path Computation Element (PCE) [RFC4655] was\
    \ developed to provide\n   path computation services for GMPLS- and MPLS-controlled\
    \ networks.\n   The applicability of PCEs can be extended to provide path computation\n\
    \   and policy enforcement capabilities for ABNO platforms and services.\n   ABNO\
    \ can provide the following types of service to applications by\n   coordinating\
    \ the components that operate and manage the network:\n   - Optimization of traffic\
    \ flows between applications to create an\n     overlay network for communication\
    \ in use cases such as file\n     sharing, data caching or mirroring, media streaming,\
    \ or real-time\n     communications described as Application-Layer Traffic Optimization\n\
    \     (ALTO) [RFC5693].\n   - Remote control of network components allowing coordinated\n\
    \     programming of network resources through such techniques as\n     Forwarding\
    \ and Control Element Separation (ForCES) [RFC3746],\n     OpenFlow [ONF], and\
    \ the Interface to the Routing System (I2RS)\n     [I2RS-Arch], or through the\
    \ control plane coordinated through the\n     PCE Communication Protocol (PCEP)\
    \ [PCE-Init-LSP].\n   - Interconnection of Content Delivery Networks (CDNi) [RFC6707]\n\
    \     through the establishment and resizing of connections between\n     content\
    \ distribution networks.  Similarly, ABNO can coordinate\n     inter-data center\
    \ connections.\n   - Network resource coordination to automate provisioning, and\
    \ to\n     facilitate traffic grooming and regrooming, bandwidth scheduling,\n\
    \     and Global Concurrent Optimization using PCEP [RFC5557].\n   - Virtual Private\
    \ Network (VPN) planning in support of deployment of\n     new VPN customers and\
    \ to facilitate inter-data center connectivity.\n   This document outlines the\
    \ architecture and use cases for ABNO, and\n   shows how the ABNO architecture\
    \ can be used for coordinating control\n   system and application requests to\
    \ compute paths, enforce policies,\n   and manage network resources for the benefit\
    \ of the applications that\n   use the network.  The examination of the use cases\
    \ shows the ABNO\n   architecture as a toolkit comprising many existing components\
    \ and\n   protocols, and so this document looks like a cookbook.  ABNO is\n  \
    \ compatible with pre-existing Network Management System (NMS) and\n   Operations\
    \ Support System (OSS) deployments as well as with more\n   recent developments\
    \ in programmatic networks such as Software-Defined\n   Networking (SDN).\n"
- title: 1.1.  Scope
  contents:
  - "1.1.  Scope\n   This document describes a toolkit.  It shows how existing functional\n\
    \   components described in a large number of separate documents can be\n   brought\
    \ together within a single architecture to provide the function\n   necessary\
    \ for ABNO.\n   In many cases, existing protocols are known to be good enough\
    \ or\n   almost good enough to satisfy the requirements of interfaces between\n\
    \   the components.  In these cases, the protocols are called out as\n   suitable\
    \ candidates for use within an implementation of ABNO.\n   In other cases, it\
    \ is clear that further work will be required, and\n   in those cases a pointer\
    \ to ongoing work that may be of use is\n   provided.  Where there is no current\
    \ work that can be identified by\n   the authors, a short description of the missing\
    \ interface protocol is\n   given in Appendix A.\n   Thus, this document may be\
    \ seen as providing an applicability\n   statement for existing protocols, and\
    \ guidance for developers of new\n   protocols or protocol extensions.\n"
- title: 2.  Application-Based Network Operations (ABNO)
  contents:
  - '2.  Application-Based Network Operations (ABNO)

    '
- title: 2.1.  Assumptions
  contents:
  - "2.1.  Assumptions\n   The principal assumption underlying this document is that\
    \ existing\n   technologies should be used where they are adequate for the task.\n\
    \   Furthermore, when an existing technology is almost sufficient, it is\n   assumed\
    \ to be preferable to make minor extensions rather than to\n   invent a whole\
    \ new technology.\n   Note that this document describes an architecture.  Functional\n\
    \   components are architectural concepts and have distinct and clear\n   responsibilities.\
    \  Pairs of functional components interact over\n   functional interfaces that\
    \ are, themselves, architectural concepts.\n"
- title: 2.2.  Implementation of the Architecture
  contents:
  - "2.2.  Implementation of the Architecture\n   It needs to be strongly emphasized\
    \ that this document describes a\n   functional architecture.  It is not a software\
    \ design.  Thus, it is\n   not intended that this architecture constrain implementations.\n\
    \   However, the separation of the ABNO functions into separate\n   functional\
    \ components with clear interfaces between them enables\n   implementations to\
    \ choose which features to include and allows\n   different functions to be distributed\
    \ across distinct processes or\n   even processors.\n   An implementation of this\
    \ architecture may make several important\n   decisions about the functional components:\n\
    \   - Multiple functional components may be grouped together into one\n     software\
    \ component such that all of the functions are bundled and\n     only the external\
    \ interfaces are exposed.  This may have distinct\n     advantages for fast paths\
    \ within the software and can reduce\n     interprocess communication overhead.\n\
    \     For example, an Active, Stateful PCE could be implemented as a\n     single\
    \ server combining the ABNO components of the PCE, the Traffic\n     Engineering\
    \ Database, the Label Switched Path Database, and the\n     Provisioning Manager\
    \ (see Section 2.3).\n   - The functional components could be distributed across\
    \ separate\n     processes, processors, or servers so that the interfaces are\n\
    \     exposed as external protocols.\n     For example, the Operations, Administration,\
    \ and Maintenance (OAM)\n     Handler (see Section 2.3.1.6) could be presented\
    \ on a dedicated\n     server in the network that consumes all status reports\
    \ from the\n     network, aggregates them, correlates them, and then dispatches\n\
    \     notifications to other servers that need to understand what has\n     happened.\n\
    \   - There could be multiple instances of any or each of the components.\n  \
    \   That is, the function of a functional component could be\n     partitioned\
    \ across multiple software components with each\n     responsible for handling\
    \ a specific feature or a partition of the\n     network.\n     For example, there\
    \ may be multiple Traffic Engineering Databases\n     (see Section 2.3.1.8) in\
    \ an implementation, with each holding the\n     topology information of a separate\
    \ network domain (such as a\n     network layer or an Autonomous System).  Similarly,\
    \ there could be\n     multiple PCE instances, each processing a different Traffic\n\
    \     Engineering Database, and potentially distributed on different\n     servers\
    \ under different management control.  As a final example,\n     there could be\
    \ multiple ABNO Controllers, each with capability to\n     support different classes\
    \ of application or application service.\n   The purpose of the description of\
    \ this architecture is to facilitate\n   different implementations while offering\
    \ interoperability between\n   implementations of key components, and easy interaction\
    \ with the\n   applications and with the network devices.\n"
- title: 2.3.  Generic ABNO Architecture
  contents:
  - "2.3.  Generic ABNO Architecture\n   Figure 1 illustrates the ABNO architecture.\
    \  The components and\n   functional interfaces are discussed in Sections 2.3.1\
    \ and 2.3.2,\n   respectively.  The use cases described in Section 3 show how\n\
    \   different components are used selectively to provide different\n   services.\
    \  It is important to understand that the relationships and\n   interfaces shown\
    \ between components in this figure are illustrative\n   of some of the common\
    \ or likely interactions; however, this figure\n   does not preclude other interfaces\
    \ and relationships as necessary to\n   realize specific functionality.\n    +----------------------------------------------------------------+\n\
    \    |          OSS / NMS / Application Service Coordinator           |\n    +-+---+---+----+-----------+---------------------------------+---+\n\
    \      |   |   |    |           |                                 |\n   ...|...|...|....|...........|.................................|......\n\
    \   :  |   |   |    |      +----+----------------------+          |     :\n  \
    \ :  |   |   | +--+---+  |                           |      +---+---+ :\n   :\
    \  |   |   | |Policy+--+     ABNO Controller       +------+       | :\n   :  |\
    \   |   | |Agent |  |                           +--+   |  OAM  | :\n   :  |  \
    \ |   | +-+--+-+  +-+------------+----------+-+  |   |Handler| :\n   :  |   |\
    \   |   |  |      |            |          |    |   |       | :\n   :  |   | +-+---++\
    \ | +----+-+  +-------+-------+  |    |   +---+---+ :\n   :  |   | |ALTO  | +-+\
    \ VNTM |--+               |  |    |       |     :\n   :  |   | |Server|   +--+-+-+\
    \  |               |  | +--+---+   |     :\n   :  |   | +--+---+      | |    |\
    \      PCE      |  | | I2RS |   |     :\n   :  |   |    |  +-------+ |    |  \
    \             |  | |Client|   |     :\n   :  |   |    |  |         |    |    \
    \           |  | +-+--+-+   |     :\n   :  | +-+----+--+-+       |    |      \
    \         |  |   |  |     |     :\n   :  | | Databases +-------:----+        \
    \       |  |   |  |     |     :\n   :  | |   TED     |       |    +-+---+----+----+\
    \  |   |  |     |     :\n   :  | |  LSP-DB   |       |      |   |    |       |\
    \   |  |     |     :\n   :  | +-----+--+--+     +-+---------------+-------+-+\
    \ |  |     |     :\n   :  |       |  |        |    Provisioning Manager   | |\
    \  |     |     :\n   :  |       |  |        +-----------------+---+-----+ |  |\
    \     |     :\n   ...|.......|..|.................|...|....|...|.......|..|.....|......\n\
    \      |       |  |                 |   |    |   |       |  |     |\n      | \
    \    +-+--+-----------------+--------+-----------+----+   |\n      +----/    \
    \           Client Network Layer               \\--+\n      |   +----------------------------------------------------+\
    \ |\n      |      |                         |        |          |     |\n    \
    \ ++------+-------------------------+--------+----------+-----+-+\n    /     \
    \                 Server Network Layers                    \\\n   +-----------------------------------------------------------------+\n\
    \                    Figure 1: Generic ABNO Architecture\n"
- title: 2.3.1.  ABNO Components
  contents:
  - "2.3.1.  ABNO Components\n   This section describes the functional components\
    \ shown as boxes in\n   Figure 1.  The interactions between those components,\
    \ the functional\n   interfaces, are described in Section 2.3.2.\n"
- title: 2.3.1.1.  NMS and OSS
  contents:
  - "2.3.1.1.  NMS and OSS\n   A Network Management System (NMS) or an Operations\
    \ Support System\n   (OSS) can be used to control, operate, and manage a network.\
    \  Within\n   the ABNO architecture, an NMS or OSS may issue high-level service\n\
    \   requests to the ABNO Controller.  It may also establish policies for\n   the\
    \ activities of the components within the architecture.\n   The NMS and OSS can\
    \ be consumers of network events reported through\n   the OAM Handler and can\
    \ act on these reports as well as displaying\n   them to users and raising alarms.\
    \  The NMS and OSS can also access\n   the Traffic Engineering Database (TED)\
    \ and Label Switched Path\n   Database (LSP-DB) to show the users the current\
    \ state of the network.\n   Lastly, the NMS and OSS may utilize a direct programmatic\
    \ or\n   configuration interface to interact with the network elements within\n\
    \   the network.\n"
- title: 2.3.1.2.  Application Service Coordinator
  contents:
  - "2.3.1.2.  Application Service Coordinator\n   In addition to the NMS and OSS,\
    \ services in the ABNO architecture may\n   be requested by or on behalf of applications.\
    \  In this context, the\n   term \"application\" is very broad.  An application\
    \ may be a program\n   that runs on a host or server and that provides services\
    \ to a user,\n   such as a video conferencing application.  Alternatively, an\n\
    \   application may be a software tool that a user uses to make requests\n   to\
    \ the network to set up specific services such as end-to-end\n   connections or\
    \ scheduled bandwidth reservations.  Finally, an\n   application may be a sophisticated\
    \ control system that is responsible\n   for arranging the provision of a more\
    \ complex network service such as\n   a virtual private network.\n   For the sake\
    \ of this architecture, all of these concepts of an\n   application are grouped\
    \ together and are shown as the Application\n   Service Coordinator, since they\
    \ are all in some way responsible for\n   coordinating the activity of the network\
    \ to provide services for use\n   by applications.  In practice, the function\
    \ of the Application\n   Service Coordinator may be distributed across multiple\
    \ applications\n   or servers.\n   The Application Service Coordinator communicates\
    \ with the ABNO\n   Controller to request operations on the network.\n"
- title: 2.3.1.3.  ABNO Controller
  contents:
  - "2.3.1.3.  ABNO Controller\n   The ABNO Controller is the main gateway to the\
    \ network for the NMS,\n   OSS, and Application Service Coordinator for the provision\
    \ of\n   advanced network coordination and functions.  The ABNO Controller\n \
    \  governs the behavior of the network in response to changing network\n   conditions\
    \ and in accordance with application network requirements\n   and policies.  It\
    \ is the point of attachment, and it invokes the\n   right components in the right\
    \ order.\n   The use cases in Section 3 provide a clearer picture of how the ABNO\n\
    \   Controller interacts with the other components in the ABNO\n   architecture.\n"
- title: 2.3.1.4.  Policy Agent
  contents:
  - "2.3.1.4.  Policy Agent\n   Policy plays a very important role in the control\
    \ and management of\n   the network.  It is, therefore, significant in influencing\
    \ how the\n   key components of the ABNO architecture operate.\n   Figure 1 shows\
    \ the Policy Agent as a component that is configured by\n   the NMS/OSS with the\
    \ policies that it applies.  The Policy Agent is\n   responsible for propagating\
    \ those policies into the other components\n   of the system.\n   Simplicity in\
    \ the figure necessitates leaving out many of the policy\n   interactions that\
    \ will take place.  Although the Policy Agent is only\n   shown interacting with\
    \ the ABNO Controller, the ALTO Server, and the\n   Virtual Network Topology Manager\
    \ (VNTM), it will also interact with a\n   number of other components and the\
    \ network elements themselves.  For\n   example, the Path Computation Element\
    \ (PCE) will be a Policy\n   Enforcement Point (PEP) [RFC2753] as described in\
    \ [RFC5394], and the\n   Interface to the Routing System (I2RS) Client will also\
    \ be a PEP as\n   noted in [I2RS-Arch].\n"
- title: 2.3.1.5.  Interface to the Routing System (I2RS) Client
  contents:
  - "2.3.1.5.  Interface to the Routing System (I2RS) Client\n   The Interface to\
    \ the Routing System (I2RS) is described in\n   [I2RS-Arch].  The interface provides\
    \ a programmatic way to access\n   (for read and write) the routing state and\
    \ policy information on\n   routers in the network.\n   The I2RS Client is introduced\
    \ in [I2RS-PS].  Its purpose is to manage\n   information requests across a number\
    \ of routers (each of which runs\n   an I2RS Agent) and coordinate setting or\
    \ gathering state to/from\n   those routers.\n"
- title: 2.3.1.6.  OAM Handler
  contents:
  - "2.3.1.6.  OAM Handler\n   Operations, Administration, and Maintenance (OAM) plays\
    \ a critical\n   role in understanding how a network is operating, detecting faults,\n\
    \   and taking the necessary action to react to problems in the network.\n   Within\
    \ the ABNO architecture, the OAM Handler is responsible for\n   receiving notifications\
    \ (often called alerts) from the network about\n   potential problems, for correlating\
    \ them, and for triggering other\n   components of the system to take action to\
    \ preserve or recover the\n   services that were established by the ABNO Controller.\
    \  The OAM\n   Handler also reports network problems and, in particular, service-\n\
    \   affecting problems to the NMS, OSS, and Application Service\n   Coordinator.\n\
    \   Additionally, the OAM Handler interacts with the devices in the\n   network\
    \ to initiate OAM actions within the data plane, such as\n   monitoring and testing.\n"
- title: 2.3.1.7.  Path Computation Element (PCE)
  contents:
  - "2.3.1.7.  Path Computation Element (PCE)\n   PCE is introduced in [RFC4655].\
    \  It is a functional component that\n   services requests to compute paths across\
    \ a network graph.  In\n   particular, it can generate traffic-engineered routes\
    \ for MPLS-TE and\n   GMPLS Label Switched Paths (LSPs).  The PCE may receive\
    \ these\n   requests from the ABNO Controller, from the Virtual Network Topology\n\
    \   Manager, or from network elements themselves.\n   The PCE operates on a view\
    \ of the network topology stored in the\n   Traffic Engineering Database (TED).\
    \  A more sophisticated computation\n   may be provided by a Stateful PCE that\
    \ enhances the TED with a\n   database (the LSP-DB -- see Section 2.3.1.8.2) containing\
    \ information\n   about the LSPs that are provisioned and operational within the\n\
    \   network as described in [RFC4655] and [Stateful-PCE].\n   Additional functionality\
    \ in an Active PCE allows a functional\n   component that includes a Stateful\
    \ PCE to make provisioning requests\n   to set up new services or to modify in-place\
    \ services as described in\n   [Stateful-PCE] and [PCE-Init-LSP].  This function\
    \ may directly access\n   the network elements or may be channeled through the\
    \ Provisioning\n   Manager.\n   Coordination between multiple PCEs operating on\
    \ different TEDs can\n   prove useful for performing path computation in multi-domain\
    \ or\n   multi-layer networks.  A domain in this case might be an Autonomous\n\
    \   System (AS), thus enabling inter-AS path computation.\n   Since the PCE is\
    \ a key component of the ABNO architecture, a better\n   view of its role can\
    \ be gained by examining the use cases described\n   in Section 3.\n"
- title: 2.3.1.8.  Databases
  contents:
  - "2.3.1.8.  Databases\n   The ABNO architecture includes a number of databases\
    \ that contain\n   information stored for use by the system.  The two main databases\
    \ are\n   the TED and the LSP Database (LSP-DB), but there may be a number of\n\
    \   other databases used to contain information about topology (ALTO\n   Server),\
    \ policy (Policy Agent), services (ABNO Controller), etc.\n   In the text that\
    \ follows, specific key components that are consumers\n   of the databases are\
    \ highlighted.  It should be noted that the\n   databases are available for inspection\
    \ by any of the ABNO components.\n   Updates to the databases should be handled\
    \ with some care, since\n   allowing multiple components to write to a database\
    \ can be the cause\n   of a number of contention and sequencing problems.\n"
- title: 2.3.1.8.1.  Traffic Engineering Database (TED)
  contents:
  - "2.3.1.8.1.  Traffic Engineering Database (TED)\n   The TED is a data store of\
    \ topology information about a network that\n   may be enhanced with capability\
    \ data (such as metrics or bandwidth\n   capacity) and active status information\
    \ (such as up/down status or\n   residual unreserved bandwidth).\n   The TED may\
    \ be built from information supplied by the network or from\n   data (such as\
    \ inventory details) sourced through the NMS/OSS.\n   The principal use of the\
    \ TED in the ABNO architecture is to provide\n   the raw data on which the Path\
    \ Computation Element operates.  But the\n   TED may also be inspected by users\
    \ at the NMS/OSS to view the current\n   status of the network and may provide\
    \ information to application\n   services such as Application-Layer Traffic Optimization\
    \ (ALTO)\n   [RFC5693].\n"
- title: 2.3.1.8.2.  LSP Database
  contents:
  - "2.3.1.8.2.  LSP Database\n   The LSP-DB is a data store of information about\
    \ LSPs that have been\n   set up in the network or that could be established.\
    \  The information\n   stored includes the paths and resource usage of the LSPs.\n\
    \   The LSP-DB may be built from information generated locally.  For\n   example,\
    \ when LSPs are provisioned, the LSP-DB can be updated.  The\n   database can\
    \ also be constructed from information gathered from the\n   network by polling\
    \ or reading the state of LSPs that have already\n   been set up.\n   The main\
    \ use of the LSP-DB within the ABNO architecture is to enhance\n   the planning\
    \ and optimization of LSPs.  New LSPs can be established\n   to be path-disjoint\
    \ from other LSPs in order to offer protected\n   services; LSPs can be rerouted\
    \ in order to put them on more optimal\n   paths or to make network resources\
    \ available for other LSPs; LSPs can\n   be rapidly repaired when a network failure\
    \ is reported; LSPs can be\n   moved onto other paths in order to avoid resources\
    \ that have planned\n   maintenance outages.  A Stateful PCE (see Section 2.3.1.7)\
    \ is a\n   primary consumer of the LSP-DB.\n"
- title: 2.3.1.8.3.  Shared Risk Link Group (SRLG) Databases
  contents:
  - "2.3.1.8.3.  Shared Risk Link Group (SRLG) Databases\n   The TED may, itself,\
    \ be supplemented by SRLG information that assigns\n   to each network resource\
    \ one or more identifiers that associate the\n   resource with other resources\
    \ in the same TED that share the same\n   risk of failure.\n   While this information\
    \ can be highly useful, it may be supplemented\n   by additional detailed information\
    \ maintained in a separate database\n   and indexed using the SRLG identifier\
    \ from the TED.  Such a database\n   can interpret SRLG information provided by\
    \ other networks (such as\n   server networks), can provide failure probabilities\
    \ associated with\n   each SRLG, can offer prioritization when SRLG-disjoint paths\
    \ cannot\n   be found, and can correlate SRLGs between different server networks\n\
    \   or between different peer networks.\n"
- title: 2.3.1.8.4.  Other Databases
  contents:
  - "2.3.1.8.4.  Other Databases\n   There may be other databases that are built within\
    \ the ABNO system\n   and that are referenced when operating the network.  These\
    \ databases\n   might include information about, for example, traffic flows and\n\
    \   demands, predicted or scheduled traffic demands, link and node\n   failure\
    \ and repair history, network resources such as packet labels\n   and physical\
    \ labels (i.e., MPLS and GMPLS labels), etc.\n   As mentioned in Section 2.3.1.8.1,\
    \ the TED may be enhanced by\n   inventory information.  It is quite likely in\
    \ many networks that such\n   an inventory is held in a separate database (the\
    \ Inventory Database)\n   that includes details of the manufacturer, model, installation\
    \ date,\n   etc.\n"
- title: 2.3.1.9.  ALTO Server
  contents:
  - "2.3.1.9.  ALTO Server\n   The ALTO Server provides network information to the\
    \ application layer\n   based on abstract maps of a network region.  This information\n\
    \   provides a simplified view, but it is useful to steer application-\n   layer\
    \ traffic.  ALTO services enable service providers to share\n   information about\
    \ network locations and the costs of paths between\n   them.  The selection criteria\
    \ to choose between two locations may\n   depend on information such as maximum\
    \ bandwidth, minimum cross-domain\n   traffic, lower cost to the user, etc.\n\
    \   The ALTO Server generates ALTO views to share information with the\n   Application\
    \ Service Coordinator so that it can better select paths in\n   the network to\
    \ carry application-layer traffic.  The ALTO views are\n   computed based on information\
    \ from the network databases, from\n   policies configured by the Policy Agent,\
    \ and through the algorithms\n   used by the PCE.\n   Specifically, the base ALTO\
    \ protocol [RFC7285] defines a single-node\n   abstract view of a network to the\
    \ Application Service Coordinator.\n   Such a view consists of two maps: a network\
    \ map and a cost map.  A\n   network map defines multiple Provider-defined Identifiers\
    \ (PIDs),\n   which represent entrance points to the network.  Each node in the\n\
    \   application layer is known as an End Point (EP), and each EP is\n   assigned\
    \ to a PID, because PIDs are the entry points of the\n   application in the network.\
    \  As defined in [RFC7285], a PID can\n   denote a subnet, a set of subnets, a\
    \ metropolitan area, a Point of\n   Presence (PoP), etc.  Each such network region\
    \ can be a single domain\n   or multiple networks; it is just the view that the\
    \ ALTO Server is\n   exposing to the application layer.  A cost map provides costs\
    \ between\n   EPs and/or PIDs.  The criteria that the Application Service\n  \
    \ Coordinator uses to choose application routes between two locations\n   may\
    \ depend on attributes such as maximum bandwidth, minimum cross-\n   domain traffic,\
    \ lower cost to the user, etc.\n"
- title: 2.3.1.10.  Virtual Network Topology Manager (VNTM)
  contents:
  - "2.3.1.10.  Virtual Network Topology Manager (VNTM)\n   A Virtual Network Topology\
    \ (VNT) is defined in [RFC5212] as a set of\n   one or more LSPs in one or more\
    \ lower-layer networks that provides\n   information for efficient path handling\
    \ in an upper-layer network.\n   For instance, a set of LSPs in a wavelength division\
    \ multiplexed\n   (WDM) network can provide connectivity as virtual links in a\
    \ higher-\n   layer packet-switched network.\n   The VNT enhances the physical/dedicated\
    \ links that are available in\n   the upper-layer network and is configured by\
    \ setting up or tearing\n   down the lower-layer LSPs and by advertising the changes\
    \ into the\n   higher-layer network.  The VNT can be adapted to traffic demands\
    \ so\n   that capacity in the higher-layer network can be created or released\n\
    \   as needed.  Releasing unwanted VNT resources makes them available in\n   the\
    \ lower-layer network for other uses.\n   The creation of virtual topology for\
    \ inclusion in a network is not a\n   simple task.  Decisions must be made about\
    \ which nodes in the upper\n   layer it is best to connect, in which lower-layer\
    \ network to\n   provision LSPs to provide the connectivity, and how to route\
    \ the LSPs\n   in the lower-layer network.  Furthermore, some specific actions\
    \ have\n   to be taken to cause the lower-layer LSPs to be provisioned and the\n\
    \   connectivity in the upper-layer network to be advertised.\n   [RFC5623] describes\
    \ how the VNTM may instantiate connections in the\n   server layer in support\
    \ of connectivity in the client layer.  Within\n   the ABNO architecture, the\
    \ creation of new connections may be\n   delegated to the Provisioning Manager\
    \ as discussed in\n   Section 2.3.1.11.\n   All of these actions and decisions\
    \ are heavily influenced by policy,\n   so the VNTM component that coordinates\
    \ them takes input from the\n   Policy Agent.  The VNTM is also closely associated\
    \ with the PCE for\n   the upper-layer network and each of the PCEs for the lower-layer\n\
    \   networks.\n"
- title: 2.3.1.11.  Provisioning Manager
  contents:
  - "2.3.1.11.  Provisioning Manager\n   The Provisioning Manager is responsible for\
    \ making or channeling\n   requests for the establishment of LSPs.  This may be\
    \ instructions to\n   the control plane running in the networks or may involve\
    \ the\n   programming of individual network devices.  In the latter case, the\n\
    \   Provisioning Manager may act as an OpenFlow Controller [ONF].\n   See Section\
    \ 2.3.2.6 for more details of the interactions between the\n   Provisioning Manager\
    \ and the network.\n"
- title: 2.3.1.12.  Client and Server Network Layers
  contents:
  - "2.3.1.12.  Client and Server Network Layers\n   The client and server networks\
    \ are shown in Figure 1 as illustrative\n   examples of the fact that the ABNO\
    \ architecture may be used to\n   coordinate services across multiple networks\
    \ where lower-layer\n   networks provide connectivity in upper-layer networks.\n\
    \   Section 3.2 describes a set of use cases for multi-layer networking.\n"
- title: 2.3.2.  Functional Interfaces
  contents:
  - "2.3.2.  Functional Interfaces\n   This section describes the interfaces between\
    \ functional components\n   that might be externalized in an implementation allowing\
    \ the\n   components to be distributed across platforms.  Where existing\n   protocols\
    \ might provide all or most of the necessary capabilities,\n   they are noted.\
    \  Appendix A notes the interfaces where more protocol\n   specification may be\
    \ needed.\n   As noted at the top of Section 2.3, it is important to understand\n\
    \   that the relationships and interfaces shown between components in\n   Figure\
    \ 1 are illustrative of some of the common or likely\n   interactions; however,\
    \ this figure and the descriptions in the\n   subsections below do not preclude\
    \ other interfaces and relationships\n   as necessary to realize specific functionality.\
    \  Thus, some of the\n   interfaces described below might not be visible as specific\n\
    \   relationships in Figure 1, but they can nevertheless exist.\n"
- title: 2.3.2.1.  Configuration and Programmatic Interfaces
  contents:
  - "2.3.2.1.  Configuration and Programmatic Interfaces\n   The network devices may\
    \ be configured or programmed directly from the\n   NMS/OSS.  Many protocols already\
    \ exist to perform these functions,\n   including the following:\n   - SNMP [RFC3412]\n\
    \   - The Network Configuration Protocol (NETCONF) [RFC6241]\n   - RESTCONF [RESTCONF]\n\
    \   - The General Switch Management Protocol (GSMP) [RFC3292]\n   - ForCES [RFC5810]\n\
    \   - OpenFlow [ONF]\n   - PCEP [PCE-Init-LSP]\n   The TeleManagement Forum (TMF)\
    \ Multi-Technology Operations Systems\n   Interface (MTOSI) standard [TMF-MTOSI]\
    \ was developed to facilitate\n   application-to-application interworking and\
    \ provides network-level\n   management capabilities to discover, configure, and\
    \ activate\n   resources.  Initially, the MTOSI information model was only capable\n\
    \   of representing connection-oriented networks and resources.  In later\n  \
    \ releases, support was added for connectionless networks.  MTOSI is,\n   from\
    \ the NMS perspective, a north-bound interface and is based on\n   SOAP web services.\n\
    \   From the ABNO perspective, network configuration is a pass-through\n   function.\
    \  It can be seen represented on the left-hand side of\n   Figure 1.\n"
- title: 2.3.2.2.  TED Construction from the Networks
  contents:
  - "2.3.2.2.  TED Construction from the Networks\n   As described in Section 2.3.1.8,\
    \ the TED provides details of the\n   capabilities and state of the network for\
    \ use by the ABNO system and\n   the PCE in particular.\n   The TED can be constructed\
    \ by participating in the IGP-TE protocols\n   run by the networks (for example,\
    \ OSPF-TE [RFC3630] and IS-IS TE\n   [RFC5305]).  Alternatively, the TED may be\
    \ fed using link-state\n   distribution extensions to BGP [BGP-LS].\n   The ABNO\
    \ system may maintain a single TED unified across multiple\n   networks or may\
    \ retain a separate TED for each network.\n   Additionally, an ALTO Server [RFC5693]\
    \ may provide an abstracted\n   topology from a network to build an application-level\
    \ TED that can be\n   used by a PCE to compute paths between servers and application-layer\n\
    \   entities for the provision of application services.\n"
- title: 2.3.2.3.  TED Enhancement
  contents:
  - "2.3.2.3.  TED Enhancement\n   The TED may be enhanced by inventory information\
    \ supplied from the\n   NMS/OSS.  This may supplement the data collected as described\
    \ in\n   Section 2.3.2.2 with information that is not normally distributed\n \
    \  within the network, such as node types and capabilities, or the\n   characteristics\
    \ of optical links.\n   No protocol is currently identified for this interface,\
    \ but the\n   protocol developed or adopted to satisfy the requirements of the\n\
    \   Interface to the Routing System (I2RS) [I2RS-Arch] may be a suitable\n   candidate\
    \ because it is required to be able to distribute bulk\n   routing state information\
    \ in a well-defined encoding language.\n   Another candidate protocol may be NETCONF\
    \ [RFC6241] passing data\n   encoded using YANG [RFC6020].\n   Note that, in general,\
    \ any combination of protocol and encoding that\n   is suitable for presenting\
    \ the TED as described in Section 2.3.2.4\n   will likely be suitable (or could\
    \ be made suitable) for enabling\n   write-access to the TED as described in this\
    \ section.\n"
- title: 2.3.2.4.  TED Presentation
  contents:
  - "2.3.2.4.  TED Presentation\n   The TED may be presented north-bound from the\
    \ ABNO system for use by\n   an NMS/OSS or by the Application Service Coordinator.\
    \  This allows\n   users and applications to get a view of the network topology\
    \ and the\n   status of the network resources.  It also allows planning and\n\
    \   provisioning of application services.\n   There are several protocols available\
    \ for exporting the TED north-\n   bound:\n   - The ALTO protocol [RFC7285] is\
    \ designed to distribute the\n     abstracted topology used by an ALTO Server\
    \ and may prove useful for\n     exporting the TED.  The ALTO Server provides\
    \ the cost between EPs\n     or between PIDs, so the application layer can select\
    \ which is the\n     most appropriate connection for the information exchange\
    \ between\n     its application end points.\n   - The same protocol used to export\
    \ topology information from the\n     network can be used to export the topology\
    \ from the TED [BGP-LS].\n   - The I2RS [I2RS-Arch] will require a protocol that\
    \ is capable of\n     handling bulk routing information exchanges that would be\
    \ suitable\n     for exporting the TED.  In this case, it would make sense to\
    \ have a\n     standardized representation of the TED in a formal data modeling\n\
    \     language such as YANG [RFC6020] so that an existing protocol such\n    \
    \ as NETCONF [RFC6241] or the Extensible Messaging and Presence\n     Protocol\
    \ (XMPP) [RFC6120] could be used.\n   Note that export from the TED can be a full\
    \ dump of the content\n   (expressed in a suitable abstraction language) as described\
    \ above, or\n   it could be an aggregated or filtered set of data based on policies\n\
    \   or specific requirements.  Thus, the relationships shown in Figure 1\n   may\
    \ be a little simplistic in that the ABNO Controller may also be\n   involved\
    \ in preparing and presenting the TED information over a\n   north-bound interface.\n"
- title: 2.3.2.5.  Path Computation Requests from the Network
  contents:
  - "2.3.2.5.  Path Computation Requests from the Network\n   As originally specified\
    \ in the PCE architecture [RFC4655], network\n   elements can make path computation\
    \ requests to a PCE using PCEP\n   [RFC5440].  This facilitates the network setting\
    \ up LSPs in response\n   to simple connectivity requests, and it allows the network\
    \ to\n   reoptimize or repair LSPs.\n"
- title: 2.3.2.6.  Provisioning Manager Control of Networks
  contents:
  - "2.3.2.6.  Provisioning Manager Control of Networks\n   As described in Section\
    \ 2.3.1.11, the Provisioning Manager makes or\n   channels requests to provision\
    \ resources in the network.  These\n   operations can take place at two levels:\
    \ there can be requests to\n   program/configure specific resources in the data\
    \ or forwarding\n   planes, and there can be requests to trigger a set of actions\
    \ to be\n   programmed with the assistance of a control plane.\n   A number of\
    \ protocols already exist to provision network resources,\n   as follows:\n  \
    \ o  Program/configure specific network resources\n      - ForCES [RFC5810] defines\
    \ a protocol for separation of the\n        control element (the Provisioning\
    \ Manager) from the forwarding\n        elements in each node in the network.\n\
    \      - The General Switch Management Protocol (GSMP) [RFC3292] is an\n     \
    \   asymmetric protocol that allows one or more external switch\n        controllers\
    \ (such as the Provisioning Manager) to establish and\n        maintain the state\
    \ of a label switch such as an MPLS switch.\n      - OpenFlow [ONF] is a communications\
    \ protocol that gives an\n        OpenFlow Controller (such as the Provisioning\
    \ Manager) access to\n        the forwarding plane of a network switch or router\
    \ in the\n        network.\n      - Historically, other configuration-based mechanisms\
    \ have been\n        used to set up the forwarding/switching state at individual\n\
    \        nodes within networks.  Such mechanisms have ranged from\n        non-standard\
    \ command line interfaces (CLIs) to various\n        standards-based options such\
    \ as Transaction Language 1 (TL1)\n        [TL1] and SNMP [RFC3412].  These mechanisms\
    \ are not designed for\n        rapid operation of a network and are not easily\
    \ programmatic.\n        They are not proposed for use by the Provisioning Manager\
    \ as\n        part of the ABNO architecture.\n      - NETCONF [RFC6241] provides\
    \ a more active configuration protocol\n        that may be suitable for bulk\
    \ programming of network resources.\n        Its use in this way is dependent\
    \ on suitable YANG modules being\n        defined for the necessary options. \
    \ Early work in the IETF's\n        NETMOD working group is focused on a higher\
    \ level of routing\n        function more comparable with the function discussed\
    \ in\n        Section 2.3.2.8; see [YANG-Rtg].\n      - The [TMF-MTOSI] specification\
    \ provides provisioning, activation,\n        deactivation, and release of resources\
    \ via the Service\n        Activation Interface (SAI).  The Common Communication\
    \ Vehicle\n        (CCV) is the middleware required to implement MTOSI.  The CCV\
    \ is\n        then used to provide middleware abstraction in combination with\n\
    \        the Web Services Description Language (WSDL) to allow MTOSIs to\n   \
    \     be bound to different middleware technologies as needed.\n   o  Trigger\
    \ actions through the control plane\n      - LSPs can be requested using a management\
    \ system interface to the\n        head end of the LSP using tools such as CLIs,\
    \ TL1 [TL1], or SNMP\n        [RFC3412].  Configuration at this granularity is\
    \ not as time-\n        critical as when individual network resources are programmed,\n\
    \        because the main task of programming end-to-end connectivity is\n   \
    \     devolved to the control plane.  Nevertheless, these mechanisms\n       \
    \ remain unsuitable for programmatic control of the network and\n        are not\
    \ proposed for use by the Provisioning Manager as part of\n        the ABNO architecture.\n\
    \      - As noted above, NETCONF [RFC6241] provides a more active\n        configuration\
    \ protocol.  This may be particularly suitable for\n        requesting the establishment\
    \ of LSPs.  Work would be needed to\n        complete a suitable YANG module.\n\
    \      - The PCE Communication Protocol (PCEP) [RFC5440] has been\n        proposed\
    \ as a suitable protocol for requesting the establishment\n        of LSPs [PCE-Init-LSP].\
    \  This works well, because the protocol\n        elements necessary are exactly\
    \ the same as those used to respond\n        to a path computation request.\n\
    \        The functional element that issues PCEP requests to establish\n     \
    \   LSPs is known as an \"Active PCE\"; however, it should be noted\n        that\
    \ the ABNO functional component responsible for requesting\n        LSPs is the\
    \ Provisioning Manager.  Other controllers like the\n        VNTM and the ABNO\
    \ Controller use the services of the\n        Provisioning Manager to isolate\
    \ the twin functions of computing\n        and requesting paths from the provisioning\
    \ mechanisms in place\n        with any given network.\n   Note that I2RS does\
    \ not provide a mechanism for control of network\n   resources at this level,\
    \ as it is designed to provide control of\n   routing state in routers, not forwarding\
    \ state in the data plane.\n"
- title: 2.3.2.7.  Auditing the Network
  contents:
  - "2.3.2.7.  Auditing the Network\n   Once resources have been provisioned or connections\
    \ established in\n   the network, it is important that the ABNO system can determine\
    \ the\n   state of the network.  Similarly, when provisioned resources are\n \
    \  modified or taken out of service, the changes in the network need to\n   be\
    \ understood by the ABNO system.  This function falls into four\n   categories:\n\
    \   - Updates to the TED are gathered as described in Section 2.3.2.2.\n   - Explicit\
    \ notification of the successful establishment and the\n     subsequent state\
    \ of the LSP can be provided through extensions to\n     PCEP as described in\
    \ [Stateful-PCE] and [PCE-Init-LSP].\n   - OAM can be commissioned and the results\
    \ inspected by the OAM\n     Handler as described in Section 2.3.2.14.\n   - A\
    \ number of ABNO components may make inquiries and inspect network\n     state\
    \ through a variety of techniques, including I2RS, NETCONF, or\n     SNMP.\n"
- title: 2.3.2.8.  Controlling the Routing System
  contents:
  - "2.3.2.8.  Controlling the Routing System\n   As discussed in Section 2.3.1.5,\
    \ the Interface to the Routing System\n   (I2RS) provides a programmatic way to\
    \ access (for read and write) the\n   routing state and policy information on\
    \ routers in the network.  The\n   I2RS Client issues requests to routers in the\
    \ network to establish or\n   retrieve routing state.  Those requests utilize\
    \ the I2RS protocol,\n   which will be based on a combination of NETCONF [RFC6241]\
    \ and\n   RESTCONF [RESTCONF] with some additional features.\n"
- title: 2.3.2.9.  ABNO Controller Interface to PCE
  contents:
  - "2.3.2.9.  ABNO Controller Interface to PCE\n   The ABNO Controller needs to be\
    \ able to consult the PCE to determine\n   what services can be provisioned in\
    \ the network.  There is no reason\n   why this interface cannot be based on standard\
    \ PCEP as defined in\n   [RFC5440].\n"
- title: 2.3.2.10.  VNTM Interface to and from PCE
  contents:
  - "2.3.2.10.  VNTM Interface to and from PCE\n   There are two interactions between\
    \ the Virtual Network Topology\n   Manager and the PCE:\n   The first interaction\
    \ is used when VNTM wants to determine what LSPs\n   can be set up in a network:\
    \ in this case, it uses the standard PCEP\n   interface [RFC5440] to make path\
    \ computation requests.\n   The second interaction arises when a PCE determines\
    \ that it cannot\n   compute a requested path or notices that (according to some\n\
    \   configured policy) a network is low on resources (for example, the\n   capacity\
    \ on some key link is nearly exhausted).  In this case, the\n   PCE may notify\
    \ the VNTM, which may (again according to policy) act to\n   construct more virtual\
    \ topology.  This second interface is not\n   currently specified, although it\
    \ may be that the protocol selected or\n   designed to satisfy I2RS will provide\
    \ suitable features (see\n   Section 2.3.2.8); alternatively, an extension to\
    \ the PCEP Notify\n   message (PCNtf) [RFC5440] could be made.\n"
- title: 2.3.2.11.  ABNO Control Interfaces
  contents:
  - "2.3.2.11.  ABNO Control Interfaces\n   The north-bound interface from the ABNO\
    \ Controller is used by the\n   NMS, OSS, and Application Service Coordinator\
    \ to request services in\n   the network in support of applications.  The interface\
    \ will also need\n   to be able to report the asynchronous completion of service\
    \ requests\n   and convey changes in the status of services.\n   This interface\
    \ will also need strong capabilities for security,\n   authentication, and policy.\n\
    \   This interface is not currently specified.  It needs to be a\n   transactional\
    \ interface that supports the specification of abstract\n   services with adequate\
    \ flexibility to facilitate easy extension and\n   yet be concise and easily parsable.\n\
    \   It is possible that the protocol designed to satisfy I2RS will\n   provide\
    \ suitable features (see Section 2.3.2.8).\n"
- title: 2.3.2.12.  ABNO Provisioning Requests
  contents:
  - "2.3.2.12.  ABNO Provisioning Requests\n   Under some circumstances, the ABNO\
    \ Controller may make requests\n   directly to the Provisioning Manager.  For\
    \ example, if the\n   Provisioning Manager is acting as an SDN Controller, then\
    \ the ABNO\n   Controller may use one of the APIs defined to allow requests to\
    \ be\n   made to the SDN Controller (such as the Floodlight REST API [Flood]).\n\
    \   Alternatively, since the Provisioning Manager may also receive\n   instructions\
    \ from a Stateful PCE, the use of PCEP extensions might be\n   appropriate in\
    \ some cases [PCE-Init-LSP].\n"
- title: 2.3.2.13.  Policy Interfaces
  contents:
  - "2.3.2.13.  Policy Interfaces\n   As described in Section 2.3.1.4 and throughout\
    \ this document, policy\n   forms a critical component of the ABNO architecture.\
    \  The role of\n   policy will include enforcing the following rules and requirements:\n\
    \   - Adding resources on demand should be gated by the authorized\n     capability.\n\
    \   - Client microflows should not trigger server-layer setup or\n     allocation.\n\
    \   - Accounting capabilities should be supported.\n   - Security mechanisms for\
    \ authorization of requests and capabilities\n     are required.\n   Other policy-related\
    \ functionality in the system might include the\n   policy behavior of the routing\
    \ and forwarding system, such as:\n   - ECMP behavior\n   - Classification of\
    \ packets onto LSPs or QoS categories.\n   Various policy-capable architectures\
    \ have been defined, including a\n   framework for using policy with a PCE-enabled\
    \ system [RFC5394].\n   However, the take-up of the IETF's Common Open Policy\
    \ Service\n   protocol (COPS) [RFC2748] has been poor.\n   New work will be needed\
    \ to define all of the policy interfaces within\n   the ABNO architecture.  Work\
    \ will also be needed to determine which\n   are internal interfaces and which\
    \ may be external and so in need of a\n   protocol specification.  There is some\
    \ discussion that the I2RS\n   protocol may support the configuration and manipulation\
    \ of policies.\n"
- title: 2.3.2.14.  OAM and Reporting
  contents:
  - "2.3.2.14.  OAM and Reporting\n   The OAM Handler must interact with the network\
    \ to perform several\n   actions:\n   - Enabling OAM function within the network.\n\
    \   - Performing proactive OAM operations in the network.\n   - Receiving notifications\
    \ of network events.\n   Any of the configuration and programmatic interfaces\
    \ described in\n   Section 2.3.2.1 may serve this purpose.  NETCONF notifications\
    \ are\n   described in [RFC5277], and OpenFlow supports a number of\n   asynchronous\
    \ event notifications [ONF].  Additionally, Syslog\n   [RFC5424] is a protocol\
    \ for reporting events from the network, and IP\n   Flow Information Export (IPFIX)\
    \ [RFC7011] is designed to allow\n   network statistics to be aggregated and reported.\n\
    \   The OAM Handler also correlates events reported from the network and\n   reports\
    \ them onward to the ABNO Controller (which can apply the\n   information to the\
    \ recovery of services that it has provisioned) and\n   to the NMS, OSS, and Application\
    \ Service Coordinator.  The reporting\n   mechanism used here can be essentially\
    \ the same as the mechanism used\n   when events are reported from the network;\
    \ no new protocol is needed,\n   although new data models may be required for\
    \ technology-independent\n   OAM reporting.\n"
- title: 3.  ABNO Use Cases
  contents:
  - "3.  ABNO Use Cases\n   This section provides a number of examples of how the\
    \ ABNO\n   architecture can be applied to provide application-driven and\n   NMS/OSS-driven\
    \ network operations.  The purpose of these examples is\n   to give some concrete\
    \ material to demonstrate the architecture so\n   that it may be more easily comprehended,\
    \ and to illustrate that the\n   application of the architecture is achieved by\
    \ \"profiling\" and by\n   selecting only the relevant components and interfaces.\n\
    \   Similarly, it is not the intention that this section contain a\n   complete\
    \ list of all possible applications of ABNO.  The examples are\n   intended to\
    \ broadly cover a number of applications that are commonly\n   discussed, but\
    \ this does not preclude other use cases.\n   The descriptions in this section\
    \ are not fully detailed applicability\n   statements for ABNO.  It is anticipated\
    \ that such applicability\n   statements, for the use cases described and for\
    \ other use cases,\n   could be suitable material for separate documents.\n"
- title: 3.1.  Inter-AS Connectivity
  contents:
  - "3.1.  Inter-AS Connectivity\n   The following use case describes how the ABNO\
    \ framework can be used\n   to set up an end-to-end MPLS service across multiple\
    \ Autonomous\n   Systems (ASes).  Consider the simple network topology shown in\n\
    \   Figure 2.  The three ASes (ASa, ASb, and ASc) are connected at AS\n   Border\
    \ Routers (ASBRs) a1, a2, b1 through b4, c1, and c2.  A source\n   node (s) located\
    \ in ASa is to be connected to a destination node (d)\n   located in ASc.  The\
    \ optimal path for the LSP from s to d must be\n   computed, and then the network\
    \ must be triggered to set up the LSP.\n          +--------------+ +-----------------+\
    \ +--------------+\n          |ASa           | |       ASb       | |         \
    \ ASc |\n          |         +--+ | | +--+       +--+ | | +--+         |\n   \
    \       |         |a1|-|-|-|b1|       |b3|-|-|-|c1|         |\n          | +-+\
    \     +--+ | | +--+       +--+ | | +--+     +-+ |\n          | |s|          |\
    \ |                 | |          |d| |\n          | +-+     +--+ | | +--+    \
    \   +--+ | | +--+     +-+ |\n          |         |a2|-|-|-|b2|       |b4|-|-|-|c2|\
    \         |\n          |         +--+ | | +--+       +--+ | | +--+         |\n\
    \          |              | |                 | |              |\n          +--------------+\
    \ +-----------------+ +--------------+\n   Figure 2: Inter-AS Domain Topology\
    \ with Hierarchical PCE (Parent PCE)\n   The following steps are performed to\
    \ deliver the service within the\n   ABNO architecture:\n   1. Request Management\n\
    \      As shown in Figure 3, the NMS/OSS issues a request to the ABNO\n      Controller\
    \ for a path between s and d.  The ABNO Controller\n      verifies that the NMS/OSS\
    \ has sufficient rights to make the\n      service request.\n                \
    \                 +---------------------+\n                                 |\
    \       NMS/OSS       |\n                                 +----------+----------+\n\
    \                                            |\n                             \
    \               V\n                  +--------+    +-----------+-------------+\n\
    \                  | Policy +-->-+     ABNO Controller     |\n               \
    \   | Agent  |    |                         |\n                  +--------+  \
    \  +-------------------------+\n                      Figure 3: ABNO Request Management\n\
    \   2. Service Path Computation with Hierarchical PCE\n      The ABNO Controller\
    \ needs to determine an end-to-end path for the\n      LSP.  Since the ASes will\
    \ want to maintain a degree of\n      confidentiality about their internal resources\
    \ and topology, they\n      will not share a TED and each will have its own PCE.\
    \  In such a\n      situation, the Hierarchical PCE (H-PCE) architecture described\
    \ in\n      [RFC6805] is applicable.\n      As shown in Figure 4, the ABNO Controller\
    \ sends a request to the\n      parent PCE for an end-to-end path.  As described\
    \ in [RFC6805], the\n      parent PCE consults its TED, which shows the connectivity\
    \ between\n      ASes.  This helps it understand that the end-to-end path must\n\
    \      cross each of ASa, ASb, and ASc, so it sends individual path\n      computation\
    \ requests to each of PCEs a, b, and c to determine the\n      best options for\
    \ crossing the ASes.\n      Each child PCE applies policy to the requests it receives\
    \ to\n      determine whether the request is to be allowed and to select the\n\
    \      types of network resources that can be used in the computation\n      result.\
    \  For confidentiality reasons, each child PCE may supply\n      its computation\
    \ responses using a path key [RFC5520] to hide the\n      details of the path\
    \ segment it has computed.\n                           +-----------------+\n \
    \                          | ABNO Controller |\n                           +----+-------+----+\n\
    \                                |       A\n                                V\
    \       |\n                             +--+-------+--+   +--------+\n       \
    \        +--------+    |             |   |        |\n               | Policy +-->-+\
    \ Parent PCE  +---+ AS TED |\n               | Agent  |    |             |   |\
    \        |\n               +--------+    +-+----+----+-+   +--------+\n      \
    \                        /     |     \\\n                             /      |\
    \      \\\n                      +-----+-+ +---+---+ +-+-----+\n             \
    \         |       | |       | |       |\n                      | PCE a | | PCE\
    \ b | | PCE c |\n                      |       | |       | |       |\n       \
    \               +---+---+ +---+---+ +---+---+\n                          |   \
    \      |         |\n                       +--+--+   +--+--+   +--+--+\n     \
    \                  | TEDa|   | TEDb|   | TEDc|\n                       +-----+\
    \   +-----+   +-----+\n           Figure 4: Path Computation Request with Hierarchical\
    \ PCE\n      The parent PCE collates the responses from the children and\n   \
    \   applies its own policy to stitch them together into the best\n      end-to-end\
    \ path, which it returns as a response to the ABNO\n      Controller.\n   3. Provisioning\
    \ the End-to-End LSP\n      There are several options for how the end-to-end LSP\
    \ gets\n      provisioned in the ABNO architecture.  Some of these are described\n\
    \      below.\n      3a. Provisioning from the ABNO Controller with a Control\
    \ Plane\n          Figure 5 shows how the ABNO Controller makes a request through\n\
    \          the Provisioning Manager to establish the end-to-end LSP.  As\n   \
    \       described in Section 2.3.2.6, these interactions can use the\n       \
    \   NETCONF protocol [RFC6241] or the extensions to PCEP described\n         \
    \ in [PCE-Init-LSP].  In either case, the provisioning request\n          is sent\
    \ to the head-end Label Switching Router (LSR), and that\n          LSR signals\
    \ in the control plane (using a protocol such as\n          RSVP-TE [RFC3209])\
    \ to cause the LSP to be established.\n                            +-----------------+\n\
    \                            | ABNO Controller |\n                           \
    \ +--------+--------+\n                                     |\n              \
    \                       V\n                              +------+-------+\n  \
    \                            | Provisioning |\n                              |\
    \ Manager      |\n                              +------+-------+\n           \
    \                          |\n                                     V\n       \
    \         +--------------------+------------------------+\n               /  \
    \                Network                      \\\n              +-------------------------------------------------+\n\
    \                    Figure 5: Provisioning the End-to-End LSP\n      3b. Provisioning\
    \ through Programming Network Resources\n          Another option is that the\
    \ LSP is provisioned hop by hop from\n          the Provisioning Manager using\
    \ a mechanism such as ForCES\n          [RFC5810] or OpenFlow [ONF] as described\
    \ in Section 2.3.2.6.\n          In this case, the picture is the same as that\
    \ shown in\n          Figure 5.  The interaction between the ABNO Controller and\
    \ the\n          Provisioning Manager will be PCEP or NETCONF as described in\n\
    \          option 3a, and the Provisioning Manager will be responsible\n     \
    \     for fanning out the requests to the individual network\n          elements.\n\
    \      3c. Provisioning with an Active Parent PCE\n          The Active PCE is\
    \ described in Section 2.3.1.7, based on the\n          concepts expressed in\
    \ [PCE-Init-LSP].  In this approach, the\n          process described in option\
    \ 3a is modified such that the PCE\n          issues a direct PCEP command to\
    \ the network, without a\n          response being first returned to the ABNO\
    \ Controller.\n          This situation is shown in Figure 6 and could be modified\
    \ so\n          that the Provisioning Manager still programs the individual\n\
    \          network elements as described in option 3b.\n                  +-----------------+\n\
    \                  | ABNO Controller |\n                  +----+------------+\n\
    \                       |\n                       V\n                    +--+----------+\
    \         +--------------+\n      +--------+    |             |         | Provisioning\
    \ |\n      | Policy +-->-+ Parent PCE  +---->----+ Manager      |\n      | Agent\
    \  |    |             |         |              |\n      +--------+    +-+----+----+-+\
    \         +-----+--------+\n                     /     |     \\              \
    \  |\n                    /      |      \\               |\n             +-----+-+\
    \ +---+---+ +-+-----+        V\n             |       | |       | |       |   \
    \     |\n             | PCE a | | PCE b | | PCE c |        |\n             | \
    \      | |       | |       |        |\n             +-------+ +-------+ +-------+\
    \        |\n                                                  |\n            \
    \     +--------------------------------+------------+\n                /     \
    \             Network                      \\\n               +-------------------------------------------------+\n\
    \               Figure 6: LSP Provisioning with an Active PCE\n      3d. Provisioning\
    \ with Active Child PCEs and Segment Stitching\n          A mixture of the approaches\
    \ described in options 3b and 3c can\n          result in a combination of mechanisms\
    \ to program the network\n          to provide the end-to-end LSP.  Figure 7 shows\
    \ how each child\n          PCE can be an Active PCE responsible for setting up\
    \ an edge-\n          to-edge LSP segment across one of the ASes.  The ABNO\n\
    \          Controller then uses the Provisioning Manager to program the\n    \
    \      inter-AS connections using ForCES or OpenFlow, and the LSP\n          segments\
    \ are stitched together following the ideas described\n          in [RFC5150].\
    \  Philosophers may debate whether the parent PCE\n          in this model is\
    \ active (instructing the children to provision\n          LSP segments) or passive\
    \ (requesting path segments that the\n          children provision).\n       \
    \                    +-----------------+\n                           | ABNO Controller\
    \ +-------->--------+\n                           +----+-------+----+        \
    \         |\n                                |       A                      |\n\
    \                                V       |                      |\n          \
    \                   +--+-------+--+                   |\n               +--------+\
    \    |             |                   |\n               | Policy +-->-+ Parent\
    \ PCE  |                   |\n               | Agent  |    |             |   \
    \                |\n               +--------+    ++-----+-----++             \
    \      |\n                             /      |      \\                   |\n\
    \                            /       |       \\                  |\n         \
    \              +---+-+   +--+--+   +-+---+             |\n                   \
    \    |     |   |     |   |     |             |\n                       |PCE a|\
    \   |PCE b|   |PCE c|             |\n                       |     |   |     |\
    \   |     |             V\n                       +--+--+   +--+--+   +---+-+\
    \             |\n                          |         |          |            \
    \   |\n                          V         V          V               |\n    \
    \           +----------+-+ +------------+ +-+----------+    |\n              \
    \ |Provisioning| |Provisioning| |Provisioning|    |\n               |Manager \
    \    | |Manager     | |Manager     |    |\n               +-+----------+ +-----+------+\
    \ +-----+------+    |\n                 |                  |              |  \
    \         |\n                 V                  V              V           |\n\
    \              +--+-----+       +----+---+       +--+-----+     |\n          \
    \   /   AS a   \\=====/   AS b   \\=====/   AS c   \\    |\n            +------------+\
    \ A +------------+ A +------------+   |\n                           |        \
    \        |                  |\n                     +-----+----------------+-----+\
    \            |\n                     |    Provisioning Manager    +----<-------+\n\
    \                     +----------------------------+\n      Figure 7: LSP Provisioning\
    \ with Active Child PCEs and Stitching\n   4. Verification of Service\n      The\
    \ ABNO Controller will need to ascertain that the end-to-end LSP\n      has been\
    \ set up as requested.  In the case of a control plane\n      being used to establish\
    \ the LSP, the head-end LSR may send a\n      notification (perhaps using PCEP)\
    \ to report successful setup, but\n      to be sure that the LSP is up, the ABNO\
    \ Controller will request\n      the OAM Handler to perform Continuity Check OAM\
    \ in the data plane\n      and report back that the LSP is ready to carry traffic.\n\
    \   5. Notification of Service Fulfillment\n      Finally, when the ABNO Controller\
    \ is satisfied that the requested\n      service is ready to carry traffic, it\
    \ will notify the NMS/OSS.\n      The delivery of the service may be further checked\
    \ through\n      auditing the network, as described in Section 2.3.2.7.\n"
- title: 3.2.  Multi-Layer Networking
  contents:
  - "3.2.  Multi-Layer Networking\n   Networks are typically constructed using multiple\
    \ layers.  These\n   layers represent separations of administrative regions or\
    \ of\n   technologies and may also represent a distinction between client and\n\
    \   server networking roles.\n   It is preferable to coordinate network resource\
    \ control and\n   utilization (i.e., consideration and control of multiple layers),\n\
    \   rather than controlling and optimizing resources at each layer\n   independently.\
    \  This facilitates network efficiency and network\n   automation and may be defined\
    \ as inter-layer traffic engineering.\n   The PCE architecture supports inter-layer\
    \ traffic engineering\n   [RFC5623] and, in combination with the ABNO architecture,\
    \ provides a\n   suite of capabilities for network resource coordination across\n\
    \   multiple layers.\n   The following use case demonstrates ABNO used to coordinate\n\
    \   allocation of server-layer network resources to create virtual\n   topology\
    \ in a client-layer network in order to satisfy a request for\n   end-to-end client-layer\
    \ connectivity.  Consider the simple multi-\n   layer network in Figure 8.\n \
    \     +--+   +--+   +--+                    +--+   +--+   +--+\n      |P1|---|P2|---|P3|\
    \                    |P4|---|P5|---|P6|\n      +--+   +--+   +--+            \
    \        +--+   +--+   +--+\n                        \\                  /\n \
    \                        \\                /\n                          +--+ \
    \ +--+  +--+\n                          |L1|--|L2|--|L3|\n                   \
    \       +--+  +--+  +--+\n                       Figure 8: Multi-Layer Network\n\
    \   There are six packet-layer routers (P1 through P6) and three optical-\n  \
    \ layer lambda switches (L1 through L3).  There is connectivity in the\n   packet\
    \ layer between routers P1, P2, and P3, and also between routers\n   P4, P5, and\
    \ P6, but there is no packet-layer connectivity between\n   these two islands\
    \ of routers, perhaps because of a network failure or\n   perhaps because all\
    \ existing bandwidth between the islands has\n   already been used up.  However,\
    \ there is connectivity in the optical\n   layer between switches L1, L2, and\
    \ L3, and the optical network is\n   connected out to routers P3 and P4 (they\
    \ have optical line cards).\n   In this example, a packet-layer connection (an\
    \ MPLS LSP) is desired\n   between P1 and P6.\n   In the ABNO architecture, the\
    \ following steps are performed to\n   deliver the service.\n   1. Request Management\n\
    \      As shown in Figure 9, the Application Service Coordinator issues a\n  \
    \    request for connectivity from P1 to P6 in the packet-layer\n      network.\
    \  That is, the Application Service Coordinator requests an\n      MPLS LSP with\
    \ a specific bandwidth to carry traffic for its\n      application.  The ABNO\
    \ Controller verifies that the Application\n      Service Coordinator has sufficient\
    \ rights to make the service\n      request.\n                             +---------------------------+\n\
    \                             |    Application Service    |\n                \
    \             |        Coordinator        |\n                             +-------------+-------------+\n\
    \                                           |\n                              \
    \             V\n                   +------+   +------------+------------+\n \
    \                  |Policy+->-+     ABNO Controller     |\n                  \
    \ |Agent |   |                         |\n                   +------+   +-------------------------+\n\
    \         Figure 9: Application Service Coordinator Request Management\n   2.\
    \ Service Path Computation in the Packet Layer\n      The ABNO Controller sends\
    \ a path computation request to the\n      packet-layer PCE to compute a suitable\
    \ path for the requested LSP,\n      as shown in Figure 10.  The PCE uses the\
    \ appropriate policy for\n      the request and consults the TED for the packet\
    \ layer.  It\n      determines that no path is immediately available.\n      \
    \                       +-----------------+\n                             | ABNO\
    \ Controller |\n                             +----+------------+\n           \
    \                       |\n                                  V\n             \
    \   +--------+     +--+-----------+   +--------+\n                | Policy +-->--+\
    \ Packet-Layer +---+ Packet |\n                | Agent  |     |      PCE     |\
    \   |   TED  |\n                +--------+     +--------------+   +--------+\n\
    \                     Figure 10: Path Computation Request\n   3. Invocation of\
    \ VNTM and Path Computation in the Optical Layer\n      After the path computation\
    \ failure in step 2, instead of notifying\n      the ABNO Controller of the failure,\
    \ the PCE invokes the VNTM to\n      see whether it can create the necessary link\
    \ in the virtual\n      network topology to bridge the gap.\n      As shown in\
    \ Figure 11, the packet-layer PCE reports the\n      connectivity problem to the\
    \ VNTM, and the VNTM consults policy to\n      determine what it is allowed to\
    \ do.  Assuming that the policy\n      allows it, the VNTM asks the optical-layer\
    \ PCE to find a path\n      across the optical network that could be provisioned\
    \ to provide a\n      virtual link for the packet layer.  In addressing this request,\n\
    \      the optical-layer PCE consults a TED for the optical-layer\n      network.\n\
    \                                 +------+\n                  +--------+     |\
    \      |     +--------------+\n                  | Policy +-->--+ VNTM +--<--+\
    \ Packet-Layer |\n                  | Agent  |     |      |     |      PCE   \
    \  |\n                  +--------+     +---+--+     +--------------+\n       \
    \                              |\n                                     V\n   \
    \                            +---------------+   +---------+\n               \
    \                | Optical-Layer +---+ Optical |\n                           \
    \    |      PCE      |   |   TED   |\n                               +---------------+\
    \   +---------+\n       Figure 11: Invocation of VNTM and Optical-Layer Path Computation\n\
    \   4. Provisioning in the Optical Layer\n      Once a path has been found across\
    \ the optical-layer network, it\n      needs to be provisioned.  The options follow\
    \ those in step 3 of\n      Section 3.1.  That is, provisioning can be initiated\
    \ by the\n      optical-layer PCE or by its user, the VNTM.  The command can be\n\
    \      sent to the head end of the optical LSP (P3) so that the control\n    \
    \  plane (for example, GMPLS RSVP-TE [RFC3473]) can be used to\n      provision\
    \ the LSP.  Alternatively, the network resources can be\n      provisioned directly,\
    \ using any of the mechanisms described in\n      Section 2.3.2.6.\n   5. Creation\
    \ of Virtual Topology in the Packet Layer\n      Once the LSP has been set up\
    \ in the optical layer, it can be made\n      available in the packet layer as\
    \ a virtual link.  If the GMPLS\n      signaling used the mechanisms described\
    \ in [RFC6107], this process\n      can be automated within the control plane;\
    \ otherwise, it may\n      require a specific instruction to the head-end router\
    \ of the\n      optical LSP (for example, through I2RS).\n      Once the virtual\
    \ link is created as shown in Figure 12, it is\n      advertised in the IGP for\
    \ the packet-layer network, and the link\n      will appear in the TED for the\
    \ packet-layer network.\n                     +--------+\n                   \
    \  | Packet |\n                     |   TED  |\n                     +------+-+\n\
    \                            A\n                            |\n              \
    \             +--+                    +--+\n                           |P3|....................|P4|\n\
    \                           +--+                    +--+\n                   \
    \            \\                  /\n                                \\       \
    \         /\n                                 +--+  +--+  +--+\n             \
    \                    |L1|--|L2|--|L3|\n                                 +--+ \
    \ +--+  +--+\n                Figure 12: Advertisement of a New Virtual Link\n\
    \   6. Path Computation Completion and Provisioning in the Packet Layer\n    \
    \  Now there are sufficient resources in the packet-layer network.\n      The\
    \ PCE for the packet layer can complete its work, and the MPLS\n      LSP can\
    \ be provisioned as described in Section 3.1.\n   7. Verification and Notification\
    \ of Service Fulfillment\n      As discussed in Section 3.1, the ABNO Controller\
    \ will need to\n      verify that the end-to-end LSP has been correctly established\n\
    \      before reporting service fulfillment to the Application Service\n     \
    \ Coordinator.\n      Furthermore, it is highly likely that service verification\
    \ will be\n      necessary before the optical-layer LSP can be put into service\
    \ as\n      a virtual link.  Thus, the VNTM will need to coordinate with the\n\
    \      OAM Handler to ensure that the LSP is ready for use.\n"
- title: 3.2.1.  Data Center Interconnection across Multi-Layer Networks
  contents:
  - "3.2.1.  Data Center Interconnection across Multi-Layer Networks\n   In order\
    \ to support new and emerging cloud-based applications, such\n   as real-time\
    \ data backup, virtual machine migration, server\n   clustering, or load reorganization,\
    \ the dynamic provisioning and\n   allocation of IT resources and the interconnection\
    \ of multiple,\n   remote Data Centers (DCs) is a growing requirement.\n   These\
    \ operations require traffic being delivered between data\n   centers, and, typically,\
    \ the connections providing such inter-DC\n   connectivity are provisioned using\
    \ static circuits or dedicated\n   leased lines, leading to an inefficiency in\
    \ terms of resource\n   utilization.  Moreover, a basic requirement is that such\
    \ a group of\n   remote DCs can be operated logically as one.\n   In such environments,\
    \ the data plane technology is operator and\n   provider dependent.  Their customers\
    \ may rent lambda switch capable\n   (LSC), packet switch capable (PSC), or time\
    \ division multiplexing\n   (TDM) services, and the application and usage of the\
    \ ABNO\n   architecture and Controller enable the required dynamic end-to-end\n\
    \   network service provisioning, regardless of underlying service and\n   transport\
    \ layers.\n   Consequently, the interconnection of DCs may involve the operation,\n\
    \   control, and management of heterogeneous environments: each DC site\n   and\
    \ the metro-core network segment used to interconnect them, with\n   regard to\
    \ not only the underlying data plane technology but also the\n   control plane.\
    \  For example, each DC site or domain could be\n   controlled locally in a centralized\
    \ way (e.g., via OpenFlow [ONF]),\n   whereas the metro-core transport infrastructure\
    \ is controlled by\n   GMPLS.  Although OpenFlow is specially adapted to single-domain\n\
    \   intra-DC networks (packet-level control, lots of routing exceptions),\n  \
    \ a standardized GMPLS-based architecture would enable dynamic optical\n   resource\
    \ allocation and restoration in multi-domain (e.g., multi-\n   vendor) core networks\
    \ interconnecting distributed data centers.\n   The application of an ABNO architecture\
    \ and related procedures would\n   involve the following aspects:\n   1. Request\
    \ from the Application Service Coordinator or NMS\n      As shown in Figure 13,\
    \ the ABNO Controller receives a request from\n      the Application Service Coordinator\
    \ or from the NMS, in order to\n      create a new end-to-end connection between\
    \ two end points.  The\n      actual addressing of these end points is discussed\
    \ in the next\n      section.  The ABNO Controller asks the PCE for a path between\n\
    \      these two end points, after considering any applicable policy as\n    \
    \  defined by the Policy Agent (see Figure 1).\n                             +---------------------------+\n\
    \                             |    Application Service    |\n                \
    \             |     Coordinator or NMS    |\n                             +-------------+-------------+\n\
    \                                           |\n                              \
    \             V\n                   +------+   +------------+------------+\n \
    \                  |Policy+->-+     ABNO Controller     |\n                  \
    \ |Agent |   |                         |\n                   +------+   +-------------------------+\n\
    \        Figure 13: Application Service Coordinator Request Management\n   2.\
    \ Address Mapping\n      In order to compute an end-to-end path, the PCE needs\
    \ to have a\n      unified view of the overall topology, which means that it has\
    \ to\n      consider and identify the actual end points with regard to the\n \
    \     client network addresses.  The ABNO Controller and/or the PCE may\n    \
    \  need to translate or map addresses from different address spaces.\n      Depending\
    \ on how the topology information is disseminated and\n      gathered, there are\
    \ two possible scenarios:\n      2a. The Application Layer Knows the Client Network\
    \ Layer\n          Entities belonging to the application layer may have an\n \
    \         interface with the TED or with an ALTO Server allowing those\n     \
    \     entities to map the high-level end points to network\n          addresses.\
    \  The mechanism used to enable this address\n          correlation is out of\
    \ scope for this document but relies on\n          direct interfaces to other\
    \ ABNO components in addition to the\n          interface to the ABNO Controller.\n\
    \          In this scenario, the request from the NMS or Application\n       \
    \   Service Coordinator contains addresses in the client-layer\n          network.\
    \  Therefore, when the ABNO Controller requests the PCE\n          to compute\
    \ a path between two end points, the PCE is able to\n          use the supplied\
    \ addresses, compute the path, and continue the\n          workflow in communication\
    \ with the Provisioning Manager.\n      2b. The Application Layer Does Not Know\
    \ the Client Network Layer\n          In this case, when the ABNO Controller receives\
    \ a request from\n          the NMS or Application Service Coordinator, the request\n\
    \          contains only identifiers from the application-layer address\n    \
    \      space.  In order for the PCE to compute an end-to-end path,\n         \
    \ these identifiers must be converted to addresses in the\n          client-layer\
    \ network.  This translation can be performed by\n          the ABNO Controller,\
    \ which can access the TED and ALTO\n          databases allowing the path computation\
    \ request that it sends\n          to the PCE to simply be contained within one\
    \ network and TED.\n          Alternatively, the computation request could use\
    \ the\n          application-layer identifiers, leaving the job of address\n \
    \         mapping to the PCE.\n          Note that in order to avoid any confusion\
    \ both approaches in\n          this scenario require clear identification of\
    \ the address\n          spaces that are in use.\n   3. Provisioning Process\n\
    \      Once the path has been obtained, the Provisioning Manager receives\n  \
    \    a high-level provisioning request to provision the service.\n      Since,\
    \ in the considered use case, the network elements are not\n      necessarily\
    \ configured using the same protocol, the end-to-end\n      path is split into\
    \ segments, and the ABNO Controller coordinates\n      or orchestrates the establishment\
    \ by adapting and/or translating\n      the abstract provisioning request to concrete\
    \ segment requests by\n      means of a VNTM or PCE that issues the corresponding\
    \ commands or\n      instructions.  The provisioning may involve configuring the\
    \ data\n      plane elements directly or delegating the establishment of the\n\
    \      underlying connection to a dedicated control plane instance\n      responsible\
    \ for that segment.\n      The Provisioning Manager could use a number of mechanisms\
    \ to\n      program the network elements, as shown in Figure 14.  It learns\n\
    \      which technology is used for the actual provisioning at each\n      segment\
    \ by either manual configuration or discovery.\n                             \
    \     +-----------------+\n                                  | ABNO Controller\
    \ |\n                                  +-------+---------+\n                 \
    \                         |\n                                          |\n   \
    \                                       V\n                      +------+    \
    \ +------+-------+\n                      | VNTM +--<--+     PCE      |\n    \
    \                  +---+--+     +------+-------+\n                          |\
    \               |\n                          V               V\n             \
    \       +-----+---------------+------------+\n                    |       Provisioning\
    \ Manager       |\n                    +----------------------------------+\n\
    \                      |       |       |       |       |\n                   \
    \   V       |       V       |       V\n                    OpenFlow  V    ForCES\
    \     V      PCEP\n                           NETCONF          SNMP\n        \
    \               Figure 14: Provisioning Process\n   4. Verification and Notification\
    \ of Service Fulfillment\n      Once the end-to-end connectivity service has been\
    \ provisioned, and\n      after the verification of the correct operation of the\
    \ service,\n      the ABNO Controller needs to notify the Application Service\n\
    \      Coordinator or NMS.\n"
- title: 3.3.  Make-before-Break
  contents:
  - "3.3.  Make-before-Break\n   A number of different services depend on the establishment\
    \ of a new\n   LSP so that traffic supported by an existing LSP can be switched\
    \ with\n   little or no disruption.  This section describes those use cases,\n\
    \   presents a generic model for make-before-break within the ABNO\n   architecture,\
    \ and shows how each use case can be supported by using\n   elements of the generic\
    \ model.\n"
- title: 3.3.1.  Make-before-Break for Reoptimization
  contents:
  - "3.3.1.  Make-before-Break for Reoptimization\n   Make-before-break is a mechanism\
    \ supported in RSVP-TE signaling where\n   a new LSP is set up before the LSP\
    \ it replaces is torn down\n   [RFC3209].  This process has several benefits in\
    \ situations such as\n   reoptimization of in-service LSPs.\n   The process is\
    \ simple, and the example shown in Figure 15 utilizes a\n   Stateful PCE [Stateful-PCE]\
    \ to monitor the network and take\n   reoptimization actions when necessary. \
    \ In this process, a service\n   request is made to the ABNO Controller by a requester\
    \ such as the\n   OSS.  The service request indicates that the LSP should be\n\
    \   reoptimized under specific conditions according to policy.  This\n   allows\
    \ the ABNO Controller to manage the sequence and prioritization\n   of reoptimizing\
    \ multiple LSPs using elements of Global Concurrent\n   Optimization (GCO) as\
    \ described in Section 3.4, and applying policies\n   across the network so that,\
    \ for instance, LSPs for delay-sensitive\n   services are reoptimized first.\n\
    \   The ABNO Controller commissions the PCE to compute and set up the\n   initial\
    \ path.\n   Over time, the PCE monitors the changes in the network as reflected\n\
    \   in the TED, and according to the configured policy may compute and\n   set\
    \ up a replacement path, using make-before-break within the\n   network.\n   Once\
    \ the new path has been set up and the network reports that it is\n   being used\
    \ correctly, the PCE tears down the old path and may report\n   the reoptimization\
    \ event to the ABNO Controller.\n             +---------------------------------------------+\n\
    \             | OSS / NMS / Application Service Coordinator |\n             +----------------------+----------------------+\n\
    \                                    |\n                       +------------+------------+\n\
    \                       |     ABNO Controller     |\n                       +------------+------------+\n\
    \                                    |\n               +------+     +-------+-------+\
    \     +-----+\n               |Policy+-----+      PCE      +-----+ TED |\n   \
    \            |Agent |     +-------+-------+     +-----+\n               +------+\
    \             |\n                                    |\n             +----------------------+----------------------+\n\
    \            /                    Network                    \\\n           +-------------------------------------------------+\n\
    \                 Figure 15: The Make-before-Break Process\n"
- title: 3.3.2.  Make-before-Break for Restoration
  contents:
  - "3.3.2.  Make-before-Break for Restoration\n   Make-before-break may also be used\
    \ to repair a failed LSP where there\n   is a desire to retain resources along\
    \ some of the path, and where\n   there is the potential for other LSPs to \"\
    steal\" the resources if the\n   failed LSP is torn down first.  Unlike the example\
    \ in Section 3.3.1,\n   this case addresses a situation where the service is interrupted,\
    \ but\n   this interruption arises from the break in service introduced by the\n\
    \   network failure.  Obviously, in the case of a point-to-multipoint\n   LSP,\
    \ the failure might only affect part of the tree and the\n   disruption will only\
    \ be to a subset of the destination leaves so that\n   a make-before-break restoration\
    \ approach will not cause disruption to\n   the leaves that were not affected\
    \ by the original failure.\n   Figure 16 shows the components that interact for\
    \ this use case.  A\n   service request is made to the ABNO Controller by a requester\
    \ such as\n   the OSS.  The service request indicates that the LSP may be restored\n\
    \   after failure and should attempt to reuse as much of the original\n   path\
    \ as possible.\n   The ABNO Controller commissions the PCE to compute and set\
    \ up the\n   initial path.  The ABNO Controller also requests the OAM Handler\
    \ to\n   initiate OAM on the LSP and to monitor the results.\n   At some point,\
    \ the network reports a fault to the OAM Handler, which\n   notifies the ABNO\
    \ Controller.\n   The ABNO Controller commissions the PCE to compute a new path,\n\
    \   reusing as much of the original path as possible, and the PCE sets up\n  \
    \ the new LSP.\n   Once the new path has been set up and the network reports that\
    \ it is\n   being used correctly, the ABNO Controller instructs the PCE to tear\n\
    \   down the old path.\n             +---------------------------------------------+\n\
    \             | OSS / NMS / Application Service Coordinator |\n             +----------------------+----------------------+\n\
    \                                    |\n                       +------------+------------+\
    \   +-------+\n                       |     ABNO Controller     +---+  OAM  |\n\
    \                       +------------+------------+   |Handler|\n            \
    \                        |                +---+---+\n                        \
    \    +-------+-------+            |\n                            |      PCE  \
    \    |            |\n                            +-------+-------+           \
    \ |\n                                    |                    |\n            \
    \ +----------------------+--------------------+-+\n            /             \
    \       Network                    \\\n           +-------------------------------------------------+\n\
    \           Figure 16: The Make-before-Break Restoration Process\n"
- title: 3.3.3.  Make-before-Break for Path Test and Selection
  contents:
  - "3.3.3.  Make-before-Break for Path Test and Selection\n   In a more complicated\
    \ use case, an LSP may be monitored for a number\n   of attributes, such as delay\
    \ and jitter.  When the LSP falls below a\n   threshold, the traffic may be moved\
    \ to another LSP that offers the\n   desired (or at least a better) quality of\
    \ service.  To achieve this,\n   it is necessary to establish the new LSP and\
    \ test it, and because the\n   traffic must not be interrupted, make-before-break\
    \ must be used.\n   Moreover, it may be the case that no new LSP can provide the\
    \ desired\n   attributes and that a number of LSPs need to be tested so that the\n\
    \   best can be selected.  Furthermore, even when the original LSP is set\n  \
    \ up, it could be desirable to test a number of LSPs before deciding\n   which\
    \ should be used to carry the traffic.\n   Figure 17 shows the components that\
    \ interact for this use case.\n   Because multiple LSPs might exist at once, a\
    \ distinct action is\n   needed to coordinate which one carries the traffic, and\
    \ this is the\n   job of the I2RS Client acting under the control of the ABNO\n\
    \   Controller.\n   The OAM Handler is responsible for initiating tests on the\
    \ LSPs and\n   for reporting the results back to the ABNO Controller.  The OAM\n\
    \   Handler can also check end-to-end connectivity test results across a\n   multi-domain\
    \ network even when each domain runs a different\n   technology.  For example,\
    \ an end-to-end path might be achieved by\n   stitching together an MPLS segment,\
    \ an Ethernet/VLAN segment, another\n   IP segment, etc.\n   Otherwise, the process\
    \ is similar to that for reoptimization as\n   discussed in Section 3.3.1.\n \
    \            +---------------------------------------------+\n             | OSS\
    \ / NMS / Application Service Coordinator |\n             +----------------------+----------------------+\n\
    \                                    |\n            +------+   +------------+------------+\
    \    +-------+\n            |Policy+---+     ABNO Controller     +----+  OAM \
    \ |\n            |Agent |   |                         +--+ |Handler|\n       \
    \     +------+   +------------+------------+  | +---+---+\n                  \
    \                  |               |     |\n                            +-------+-------+\
    \    +--+---+ |\n                            |      PCE      |    | I2RS | |\n\
    \                            +-------+-------+    |Client| |\n               \
    \                     |            +--+---+ |\n                              \
    \      |               |     |\n            +-----------------------+---------------+-----+-+\n\
    \           /                     Network                     \\\n          +---------------------------------------------------+\n\
    \     Figure 17: The Make-before-Break Path Test and Selection Process\n   The\
    \ pseudocode that follows gives an indication of the interactions\n   between\
    \ ABNO components.\n      OSS requests quality-assured service\n      :Label1\n\
    \      DoWhile not enough LSPs (ABNO Controller)\n        Instruct PCE to compute\
    \ and provision the LSP (ABNO Controller)\n        Create the LSP (PCE)\n    \
    \  EndDo\n      :Label2\n      DoFor each LSP (ABNO Controller)\n        Test\
    \ LSP (OAM Handler)\n        Report results to ABNO Controller (OAM Handler)\n\
    \      EndDo\n      Evaluate results of all tests (ABNO Controller)\n      Select\
    \ preferred LSP and instruct I2RS Client (ABNO Controller)\n      Put traffic\
    \ on preferred LSP (I2RS Client)\n      DoWhile too many LSPs (ABNO Controller)\n\
    \        Instruct PCE to tear down unwanted LSP (ABNO Controller)\n        Tear\
    \ down unwanted LSP (PCE)\n      EndDo\n      DoUntil trigger (OAM Handler, ABNO\
    \ Controller, Policy Agent)\n        keep sending traffic (Network)\n        Test\
    \ LSP (OAM Handler)\n      EndDo\n      If there is already a suitable LSP (ABNO\
    \ Controller)\n        GoTo Label2\n      Else\n        GoTo Label1\n      EndIf\n"
- title: 3.4.  Global Concurrent Optimization
  contents:
  - "3.4.  Global Concurrent Optimization\n   Global Concurrent Optimization (GCO)\
    \ is defined in [RFC5557] and\n   represents a key technology for maximizing network\
    \ efficiency by\n   computing a set of traffic-engineered paths concurrently.\
    \  A GCO path\n   computation request will simultaneously consider the entire\
    \ topology\n   of the network, and the complete set of new LSPs together with\
    \ their\n   respective constraints.  Similarly, GCO may be applied to recompute\n\
    \   the paths of a set of existing LSPs.\n   GCO may be requested in a number\
    \ of scenarios.  These include:\n   o  Routing of new services where the PCE should\
    \ consider other\n      services or network topology.\n   o  A reoptimization\
    \ of existing services due to fragmented network\n      resources or suboptimized\
    \ placement of sequentially computed\n      services.\n   o  Recovery of connectivity\
    \ for bulk services in the event of a\n      catastrophic network failure.\n \
    \  A service provider may also want to compute and deploy new bulk\n   services\
    \ based on a predicted traffic matrix.  The GCO functionality\n   and capability\
    \ to perform concurrent computation provide a\n   significant network optimization\
    \ advantage, thus utilizing network\n   resources optimally and avoiding blocking.\n\
    \   The following use case shows how the ABNO architecture and components\n  \
    \ are used to achieve concurrent optimization across a set of services.\n"
- title: '3.4.1.  Use Case: GCO with MPLS LSPs'
  contents:
  - "3.4.1.  Use Case: GCO with MPLS LSPs\n   When considering the GCO path computation\
    \ problem, we can split the\n   GCO objective functions into three optimization\
    \ categories:\n   o  Minimize aggregate Bandwidth Consumption (MBC).\n   o  Minimize\
    \ the load of the Most Loaded Link (MLL).\n   o  Minimize Cumulative Cost of a\
    \ set of paths (MCC).\n   This use case assumes that the GCO request will be offline\
    \ and be\n   initiated from an NMS/OSS; that is, it may take significant time\
    \ to\n   compute the service, and the paths reported in the response may want\n\
    \   to be verified by the user before being provisioned within the\n   network.\n\
    \   1. Request Management\n      The NMS/OSS issues a request for new service\
    \ connectivity for bulk\n      services.  The ABNO Controller verifies that the\
    \ NMS/OSS has\n      sufficient rights to make the service request and apply a\
    \ GCO\n      attribute with a request to Minimize aggregate Bandwidth\n      Consumption\
    \ (MBC), as shown in Figure 18.\n                                 +---------------------+\n\
    \                                 |       NMS/OSS       |\n                  \
    \               +----------+----------+\n                                    \
    \        |\n                                            V\n                  +--------+\
    \    +-----------+-------------+\n                  | Policy +-->-+     ABNO Controller\
    \     |\n                  | Agent  |    |                         |\n       \
    \           +--------+    +-------------------------+\n                  Figure\
    \ 18: NMS Request to ABNO Controller\n      1a. Each service request has a source,\
    \ destination, and bandwidth\n          request.  These service requests are sent\
    \ to the ABNO\n          Controller and categorized as GCO requests.  The PCE\
    \ uses the\n          appropriate policy for each request and consults the TED\
    \ for\n          the packet layer.\n   2. Service Path Computation in the Packet\
    \ Layer\n      To compute a set of services for the GCO application, PCEP\n  \
    \    supports synchronization vector (SVEC) lists for synchronized\n      dependent\
    \ path computations as defined in [RFC5440] and described\n      in [RFC6007].\n\
    \      2a. The ABNO Controller sends the bulk service request to the\n       \
    \   GCO-capable packet-layer PCE using PCEP messaging.  The PCE\n          uses\
    \ the appropriate policy for the request and consults the\n          TED for the\
    \ packet layer, as shown in Figure 19.\n                               +-----------------+\n\
    \                               | ABNO Controller |\n                        \
    \       +----+------------+\n                                    |\n         \
    \                           V\n                  +--------+     +--+-----------+\
    \   +--------+\n                  |        |     |              |   |        |\n\
    \                  | Policy +-->--+ GCO-Capable  +---+ Packet |\n            \
    \      | Agent  |     | Packet-Layer |   |  TED   |\n                  |     \
    \   |     |     PCE      |   |        |\n                  +--------+     +--------------+\
    \   +--------+\n             Figure 19: Path Computation Request from GCO-Capable\
    \ PCE\n      2b. Upon receipt of the bulk (GCO) service requests, the PCE\n  \
    \        applies the MBC objective function and computes the services\n      \
    \    concurrently.\n      2c. Once the requested GCO service path computation\
    \ completes, the\n          PCE sends the resulting paths back to the ABNO Controller.\n\
    \          The response includes a fully computed explicit path for each\n   \
    \       service (TE LSP).\n   3. The concurrently computed solution received from\
    \ the PCE is sent\n      back to the NMS/OSS by the ABNO Controller as a PCEP\
    \ response, as\n      shown in Figure 20.  The NMS/OSS user can then check the\
    \ candidate\n      paths and either provision the new services or save the solution\n\
    \      for deployment in the future.\n                         +---------------------+\n\
    \                         |       NMS/OSS       |\n                         +----------+----------+\n\
    \                                    ^\n                                    |\n\
    \                         +----------+----------+\n                         |\
    \    ABNO Controller  |\n                         |                     |\n  \
    \                       +---------------------+\n               Figure 20: ABNO\
    \ Sends Solution to the NMS/OSS\n"
- title: 3.5.  Adaptive Network Management (ANM)
  contents:
  - "3.5.  Adaptive Network Management (ANM)\n   The ABNO architecture provides the\
    \ capability for reactive network\n   control of resources relying on classification,\
    \ profiling, and\n   prediction based on current demands and resource utilization.\n\
    \   Server-layer transport network resources, such as Optical Transport\n   Network\
    \ (OTN) time-slicing [G.709], or the fine granularity grid of\n   wavelengths\
    \ with variable spectral bandwidth (flexi-grid) [G.694.1],\n   can be manipulated\
    \ to meet current and projected demands in a model\n   called Elastic Optical\
    \ Networks (EON) [EON].\n   EON provides spectrum-efficient and scalable transport\
    \ by introducing\n   flexible granular traffic grooming in the optical frequency\
    \ domain.\n   This is achieved using arbitrary contiguous concatenation of the\n\
    \   optical spectrum that allows the creation of custom-sized bandwidth.\n   This\
    \ bandwidth is defined in slots of 12.5 GHz.\n   Adaptive Network Management (ANM)\
    \ with EON allows appropriately sized\n   optical bandwidth to be allocated to\
    \ an end-to-end optical path.  In\n   flexi-grid, the allocation is performed\
    \ according to the traffic\n   volume, optical modulation format, and associated\
    \ reach, or following\n   user requests, and can be achieved in a highly spectrum-efficient\
    \ and\n   scalable manner.  Similarly, OTN provides for flexible and granular\n\
    \   provisioning of bandwidth on top of Wavelength Switched Optical\n   Networks\
    \ (WSONs).\n   To efficiently use optical resources, a system is required that\
    \ can\n   monitor network resources and decide the optimal network\n   configuration\
    \ based on the status, bandwidth availability, and user\n   service.  We call\
    \ this ANM.\n"
- title: 3.5.1.  ANM Trigger
  contents:
  - "3.5.1.  ANM Trigger\n   There are different reasons to trigger an adaptive network\
    \ management\n   process; these include:\n   o  Measurement: Traffic measurements\
    \ can be used in order to cause\n      spectrum allocations that fit the traffic\
    \ needs as efficiently as\n      possible.  This function may be influenced by\
    \ measuring the IP\n      router traffic flows, by examining traffic engineering\
    \ or link\n      state databases, by usage thresholds for critical links in the\n\
    \      network, or by requests from external entities.  Nowadays, network\n  \
    \    operators have active monitoring probes in the network that store\n     \
    \ their results in the OSS.  The OSS or OAM Handler components\n      activate\
    \ this measurement-based trigger, so the ABNO Controller\n      would not be directly\
    \ involved in this case.\n   o  Human: Operators may request ABNO to run an adaptive\
    \ network\n      planning process via an NMS.\n   o  Periodic: An adaptive network\
    \ planning process can be run\n      periodically to find an optimum configuration.\n\
    \   An ABNO Controller would receive a request from an OSS or NMS to run\n   an\
    \ adaptive network manager process.\n"
- title: 3.5.2.  Processing Request and GCO Computation
  contents:
  - "3.5.2.  Processing Request and GCO Computation\n   Based on the human or periodic\
    \ trigger requests described in the\n   previous section, the OSS or NMS will\
    \ send a request to the ABNO\n   Controller to perform EON-based GCO.  The ABNO\
    \ Controller will select\n   a set of services to be reoptimized and choose an\
    \ objective function\n   that will deliver the best use of network resources.\
    \  In making these\n   choices, the ABNO Controller is guided by network-wide\
    \ policy on the\n   use of resources, the definition of optimization, and the\
    \ level of\n   perturbation to existing services that is tolerable.\n   This request\
    \ for GCO is passed to the PCE, along the lines of the\n   description in Section\
    \ 3.4.  The PCE can then consider the end-to-end\n   paths and every channel's\
    \ optimal spectrum assignment in order to\n   satisfy traffic demands and optimize\
    \ the optical spectrum consumption\n   within the network.\n   The PCE will operate\
    \ on the TED but is likely to also be stateful so\n   that it knows which LSPs\
    \ correspond to which waveband allocations on\n   which links in the network.\
    \  Once the PCE arrives at an answer, it\n   returns a set of potential paths\
    \ to the ABNO Controller, which passes\n   them on to the NMS or OSS to supervise/select\
    \ the subsequent path\n   setup/modification process.\n   This exchange is shown\
    \ in Figure 21.  Note that the figure does not\n   show the interactions used\
    \ by the OSS/NMS for establishing or\n   modifying LSPs in the network.\n    \
    \                       +---------------------------+\n                      \
    \     |        OSS or NMS         |\n                           +-----------+---+-----------+\n\
    \                                       |   ^\n                              \
    \         V   |\n                 +------+   +----------+---+----------+\n   \
    \              |Policy+->-+     ABNO Controller     |\n                 |Agent\
    \ |   |                         |\n                 +------+   +----------+---+----------+\n\
    \                                       |   ^\n                              \
    \         V   |\n                                 +-----+---+----+\n         \
    \                        +      PCE     |\n                                 +--------------+\n\
    \      Figure 21: Adaptive Network Management with Human Intervention\n"
- title: 3.5.3.  Automated Provisioning Process
  contents:
  - "3.5.3.  Automated Provisioning Process\n   Although most network operations are\
    \ supervised by the operator,\n   there are some actions that may not require\
    \ supervision, like a\n   simple modification of a modulation format in a Bit-rate\
    \ Variable\n   Transponder (BVT) (to increase the optical spectrum efficiency\
    \ or\n   reduce energy consumption).  In this process, where human\n   intervention\
    \ is not required, the PCE sends the Provisioning Manager\n   a new configuration\
    \ to configure the network elements, as shown in\n   Figure 22.\n            \
    \             +------------------------+\n                         |       OSS\
    \ or NMS       |\n                         +-----------+------------+\n      \
    \                               |\n                                     V\n  \
    \             +------+   +----------+------------+\n               |Policy+->-+\
    \     ABNO Controller   |\n               |Agent |   |                       |\n\
    \               +------+   +----------+------------+\n                       \
    \              |\n                                     V\n                   \
    \           +------+------+\n                              +     PCE     |\n \
    \                             +------+------+\n                              \
    \       |\n                                     V\n                     +----------------------------------+\n\
    \                     |       Provisioning Manager       |\n                 \
    \    +----------------------------------+\n     Figure 22: Adaptive Network Management\
    \ without Human Intervention\n"
- title: 3.6.  Pseudowire Operations and Management
  contents:
  - "3.6.  Pseudowire Operations and Management\n   Pseudowires in an MPLS network\
    \ [RFC3985] operate as a form of layered\n   network over the connectivity provided\
    \ by the MPLS network.  The\n   pseudowires are carried by LSPs operating as transport\
    \ tunnels, and\n   planning is necessary to determine how those tunnels are placed\
    \ in\n   the network and which tunnels are used by any pseudowire.\n   This section\
    \ considers four use cases: multi-segment pseudowires,\n   path-diverse pseudowires,\
    \ path-diverse multi-segment pseudowires, and\n   pseudowire segment protection.\
    \  Section 3.6.5 describes the\n   applicability of the ABNO architecture to these\
    \ four use cases.\n"
- title: 3.6.1.  Multi-Segment Pseudowires
  contents:
  - "3.6.1.  Multi-Segment Pseudowires\n   [RFC5254] describes the architecture for\
    \ multi-segment pseudowires.\n   An end-to-end service, as shown in Figure 23,\
    \ can consist of a series\n   of stitched segments shown in the figure as AC,\
    \ PW1, PW2, PW3, and\n   AC.  Each pseudowire segment is stitched at a \"stitching\
    \ Provider\n   Edge\" (S-PE): for example, PW1 is stitched to PW2 at S-PE1.  Each\n\
    \   access circuit (AC) is stitched to a pseudowire segment at a\n   \"terminating\
    \ PE\" (T-PE): for example, PW1 is stitched to the AC at\n   T-PE1.\n   Each pseudowire\
    \ segment is carried across the MPLS network in an LSP\n   operating as a transport\
    \ tunnel: for example, PW1 is carried in LSP1.\n   The LSPs between PE nodes may\
    \ traverse different MPLS networks with\n   the PEs as border nodes, or the PEs\
    \ may lie within the network such\n   that each LSP spans only part of the network.\n\
    \              -----         -----         -----         -----\n     ---     |T-PE1|\
    \  LSP1 |S-PE1|  LSP2 |S-PE3|  LSP3 |T-PE2|    +---+\n    |   | AC |     |=======|\
    \     |=======|     |=======|     | AC |   |\n    |CE1|----|........PW1........|..PW2........|..PW3........|----|CE2|\n\
    \    |   |    |     |=======|     |=======|     |=======|     |    |   |\n   \
    \  ---     |     |       |     |       |     |       |     |    +---+\n      \
    \        -----         -----         -----         -----\n                   \
    \ Figure 23: Multi-Segment Pseudowire\n   While the topology shown in Figure 23\
    \ is easy to navigate, the\n   reality of a deployed network can be considerably\
    \ more complex.  The\n   topology in Figure 24 shows a small mesh of PEs.  The\
    \ links between\n   the PEs are not physical links but represent the potential\
    \ of MPLS\n   LSPs between the PEs.\n   When establishing the end-to-end service\
    \ between Customer Edge nodes\n   (CEs) CE1 and CE2, some choice must be made\
    \ about which PEs to use.\n   In other words, a path computation must be made\
    \ to determine the\n   pseudowire segment \"hops\", and then the necessary LSP\
    \ tunnels must be\n   established to carry the pseudowire segments that will be\
    \ stitched\n   together.\n   Of course, each LSP may itself require a path computation\
    \ decision to\n   route it through the MPLS network between PEs.\n   The choice\
    \ of path for the multi-segment pseudowire will depend on\n   such issues as:\n\
    \   - MPLS connectivity\n   - MPLS bandwidth availability\n   - pseudowire stitching\
    \ capability and capacity at PEs\n   - policy and confidentiality considerations\
    \ for use of PEs\n                                   -----\n                 \
    \                 |S-PE5|\n                                  /-----\\\n     ---\
    \      -----         -----/       \\-----         -----      ---\n    |CE1|----|T-PE1|-------|S-PE1|-------|S-PE3|-------|T-PE2|----|CE2|\n\
    \     ---      -----\\        -----\\        -----        /-----      ---\n  \
    \                  \\         |   -------   |         /\n                    \
    \ \\      -----        \\-----      /\n                      -----|S-PE2|-------|S-PE4|-----\n\
    \                            -----         -----\n           Figure 24: Multi-Segment\
    \ Pseudowire Network Topology\n"
- title: 3.6.2.  Path-Diverse Pseudowires
  contents:
  - "3.6.2.  Path-Diverse Pseudowires\n   The connectivity service provided by a pseudowire\
    \ may need to be\n   resilient to failure.  In many cases, this function is provided\
    \ by\n   provisioning a pair of pseudowires carried by path-diverse LSPs\n   across\
    \ the network, as shown in Figure 25 (the terminology is\n   inherited directly\
    \ from [RFC3985]).  Clearly, in this case, the\n   challenge is to keep the two\
    \ LSPs (LSP1 and LSP2) disjoint within the\n   MPLS network.  This problem is\
    \ not different from the normal MPLS\n   path-diversity problem.\n           \
    \       -------                         -------\n                 |  PE1  |  \
    \        LSP1         |  PE2  |\n            AC   |       |=======================|\
    \       |   AC\n             ----...................PW1...................----\n\
    \     --- -  /    |       |=======================|       |    \\  -----\n   \
    \ |     |/     |       |                       |       |     \\|     |\n    |\
    \ CE1 +      |       |      MPLS Network     |       |      + CE2 |\n    |   \
    \  |\\     |       |                       |       |     /|     |\n     --- -\
    \  \\    |       |=======================|       |    /  -----\n             ----...................PW2...................----\n\
    \            AC   |       |=======================|       |   AC\n           \
    \      |       |          LSP2         |       |\n                  -------  \
    \                       -------\n                    Figure 25: Path-Diverse Pseudowires\n\
    \   The path-diverse pseudowire is developed in Figure 26 by the\n   \"dual-homing\"\
    \ of each CE through more than one PE.  The requirement\n   for LSP path diversity\
    \ is exactly the same, but it is complicated by\n   the LSPs having distinct end\
    \ points.  In this case, the head-end\n   router (e.g., PE1) cannot be relied\
    \ upon to maintain the path\n   diversity through the signaling protocol because\
    \ it is aware of the\n   path of only one of the LSPs.  Thus, some form of coordinated\
    \ path\n   computation approach is needed.\n                  -------        \
    \                 -------\n                 |  PE1  |          LSP1         |\
    \  PE2  |\n             AC  |       |=======================|       |  AC\n  \
    \            ---...................PW1...................---\n             / \
    \  |       |=======================|       |   \\\n     -----  /    |       |\
    \                       |       |    \\  -----\n    |     |/      -------    \
    \                     -------      \\|     |\n    | CE1 +                    \
    \ MPLS Network                    + CE2 |\n    |     |\\      -------        \
    \                 -------      /|     |\n     -----  \\    |  PE3  |         \
    \              |  PE4  |    /  -----\n             \\   |       |=======================|\
    \       |   /\n              ---...................PW2...................---\n\
    \             AC  |       |=======================|       |  AC\n            \
    \     |       |          LSP2         |       |\n                  -------   \
    \                      -------\n           Figure 26: Path-Diverse Pseudowires\
    \ with Disjoint PEs\n"
- title: 3.6.3.  Path-Diverse Multi-Segment Pseudowires
  contents:
  - "3.6.3.  Path-Diverse Multi-Segment Pseudowires\n   Figure 27 shows how the services\
    \ in the previous two sections may be\n   combined to offer end-to-end diverse\
    \ paths in a multi-segment\n   environment.  To offer end-to-end resilience to\
    \ failure, two entirely\n   diverse, end-to-end multi-segment pseudowires may\
    \ be needed.\n                                   -----                -----\n\
    \                                  |S-PE5|--------------|T-PE4|\n            \
    \                      /-----\\               ----- \\\n              -----  \
    \       -----/       \\-----         -----  \\ ---\n             |T-PE1|-------|S-PE1|-------|S-PE3|-------|T-PE2|--|CE2|\n\
    \       ---  / -----\\        -----\\        -----        /-----    ---\n    \
    \  |CE1|<        -------   |   -------   |         /\n       ---  \\ -----   \
    \     \\-----        \\-----      /\n             |T-PE3|-------|S-PE2|-------|S-PE4|-----\n\
    \              -----         -----         -----\n     Figure 27: Path-Diverse\
    \ Multi-Segment Pseudowire Network Topology\n   Just as in any diverse-path computation,\
    \ the selection of the first\n   path needs to be made with awareness of the fact\
    \ that a second, fully\n   diverse path is also needed.  If a sequential computation\
    \ was applied\n   to the topology in Figure 27, the first path CE1,T-PE1,S-PE1,\n\
    \   S-PE3,T-PE2,CE2 would make it impossible to find a second path that\n   was\
    \ fully diverse from the first.\n   But the problem is complicated by the multi-layer\
    \ nature of the\n   network.  It is not enough that the PEs are chosen to be diverse\n\
    \   because the LSP tunnels between them might share links within the\n   MPLS\
    \ network.  Thus, a multi-layer planning solution is needed to\n   achieve the\
    \ desired level of service.\n"
- title: 3.6.4.  Pseudowire Segment Protection
  contents:
  - "3.6.4.  Pseudowire Segment Protection\n   An alternative to the end-to-end pseudowire\
    \ protection service\n   enabled by the mechanism described in Section 3.6.3 can\
    \ be achieved\n   by protecting individual pseudowire segments or PEs.  For example,\
    \ in\n   Figure 27, the pseudowire between S-PE1 and S-PE5 may be protected by\n\
    \   a pair of stitched segments running between S-PE1 and S-PE5, and\n   between\
    \ S-PE5 and S-PE3.  This is shown in detail in Figure 28.\n             -------\
    \              -------              -------\n            | S-PE1 |    LSP1   \
    \ | S-PE5 |    LSP3    | S-PE3 |\n            |       |============|       |============|\
    \       |\n            |   .........PW1..................PW3..........   | Outgoing\n\
    \   Incoming |  :    |============|       |============|    :  | Segment\n   Segment\
    \  |  :    |             -------             |    :..........\n    ...........:\
    \    |                                 |    :  |\n            |  :    |      \
    \                           |    :  |\n            |  :    |=================================|\
    \    :  |\n            |   .........PW2...............................   |\n \
    \           |       |=================================|       |\n            |\
    \       |    LSP2                         |       |\n             -------    \
    \                               -------\n    Figure 28: Fragment of a Segment-Protected\
    \ Multi-Segment Pseudowire\n   The determination of pseudowire protection segments\
    \ requires\n   coordination and planning, and just as in Section 3.6.5, this\n\
    \   planning must be cognizant of the paths taken by LSPs through the\n   underlying\
    \ MPLS networks.\n"
- title: 3.6.5.  Applicability of ABNO to Pseudowires
  contents:
  - "3.6.5.  Applicability of ABNO to Pseudowires\n   The ABNO architecture lends\
    \ itself well to the planning and control\n   of pseudowires in the use cases\
    \ described above.  The user or\n   application needs a single point at which\
    \ it requests services: the\n   ABNO Controller.  The ABNO Controller can ask\
    \ a PCE to draw on the\n   topology of pseudowire stitching-capable PEs as well\
    \ as additional\n   information regarding PE capabilities, such as load on PEs\
    \ and\n   administrative policies, and the PCE can use a series of TEDs or\n \
    \  other PCEs for the underlying MPLS networks to determine the paths of\n   the\
    \ LSP tunnels.  At the time of this writing, PCEP does not support\n   path computation\
    \ requests and responses concerning pseudowires, but\n   the concepts are very\
    \ similar to existing uses and the necessary\n   extensions would be very small.\n\
    \   Once the paths have been computed, a number of different provisioning\n  \
    \ systems can be used to instantiate the LSPs and provision the\n   pseudowires\
    \ under the control of the Provisioning Manager.  The ABNO\n   Controller will\
    \ use the I2RS Client to instruct the network devices\n   about what traffic should\
    \ be placed on which pseudowires and, in\n   conjunction with the OAM Handler,\
    \ can ensure that failure events are\n   handled correctly, that service quality\
    \ levels are appropriate, and\n   that service protection levels are maintained.\n\
    \   In many respects, the pseudowire network forms an overlay network\n   (with\
    \ its own TED and provisioning mechanisms) carried by underlying\n   packet networks.\
    \  Further client networks (the pseudowire payloads)\n   may be carried by the\
    \ pseudowire network.  Thus, the problem space\n   being addressed by ABNO in\
    \ this case is a classic multi-layer\n   network.\n"
- title: 3.7.  Cross-Stratum Optimization (CSO)
  contents:
  - "3.7.  Cross-Stratum Optimization (CSO)\n   Considering the term \"stratum\" to\
    \ broadly differentiate the layers of\n   most concern to the application and\
    \ to the network in general, the\n   need for Cross-Stratum Optimization (CSO)\
    \ arises when the application\n   stratum and network stratum need to be coordinated\
    \ to achieve\n   operational efficiency as well as resource optimization in both\n\
    \   application and network strata.\n   Data center-based applications can provide\
    \ a wide variety of services\n   such as video gaming, cloud computing, and grid\
    \ applications.  High-\n   bandwidth video applications are also emerging, such\
    \ as remote\n   medical surgery, live concerts, and sporting events.\n   This\
    \ use case for the ABNO architecture is mainly concerned with data\n   center\
    \ applications that make substantial bandwidth demands either in\n   aggregate\
    \ or individually.  In addition, these applications may need\n   specific bounds\
    \ on QoS-related parameters such as latency and jitter.\n"
- title: 3.7.1.  Data Center Network Operation
  contents:
  - "3.7.1.  Data Center Network Operation\n   Data centers come in a wide variety\
    \ of sizes and configurations, but\n   all contain compute servers, storage, and\
    \ application control.  Data\n   centers offer application services to end-users,\
    \ such as video\n   gaming, cloud computing, and others.  Since the data centers\
    \ used to\n   provide application services may be distributed around a network,\
    \ the\n   decisions about the control and management of application services,\n\
    \   such as where to instantiate another service instance or to which\n   data\
    \ center a new client is assigned, can have a significant impact\n   on the state\
    \ of the network.  Conversely, the capabilities and state\n   of the network can\
    \ have a major impact on application performance.\n   These decisions are typically\
    \ made by applications with very little\n   or no information concerning the underlying\
    \ network.  Hence, such\n   decisions may be suboptimal from the application's\
    \ point of view or\n   considering network resource utilization and quality of\
    \ service.\n   Cross-Stratum Optimization is the process of optimizing both the\n\
    \   application experience and the network utilization by coordinating\n   decisions\
    \ in the application stratum and the network stratum.\n   Application resources\
    \ can be roughly categorized into computing\n   resources (i.e., servers of various\
    \ types and granularities, such as\n   Virtual Machines (VMs), memory, and storage)\
    \ and content (e.g.,\n   video, audio, databases, and large data sets).  By \"\
    network stratum\"\n   we mean the IP layer and below (e.g., MPLS, Synchronous\
    \ Digital\n   Hierarchy (SDH), OTN, WDM).  The network stratum has resources that\n\
    \   include routers, switches, and links.  We are particularly interested\n  \
    \ in further unleashing the potential presented by MPLS and GMPLS\n   control\
    \ planes at the lower network layers in response to the high\n   aggregate or\
    \ individual demands from the application layer.\n   This use case demonstrates\
    \ that the ABNO architecture can allow\n   cross-stratum application/network optimization\
    \ for the data center\n   use case.  Other forms of Cross-Stratum Optimization\
    \ (for example,\n   for peer-to-peer applications) are out of scope.\n"
- title: 3.7.1.1.  Virtual Machine Migration
  contents:
  - "3.7.1.1.  Virtual Machine Migration\n   A key enabler for data center cost savings,\
    \ consolidation,\n   flexibility, and application scalability has been the technology\
    \ of\n   compute virtualization provided through Virtual Machines (VMs).  To\n\
    \   the software application, a VM looks like a dedicated processor with\n   dedicated\
    \ memory and a dedicated operating system.\n   VMs not only offer a unit of compute\
    \ power but also provide an\n   \"application environment\" that can be replicated,\
    \ backed up, and\n   moved.  Different VM configurations may be offered that are\
    \ optimized\n   for different types of processing (e.g., memory intensive, throughput\n\
    \   intensive).\n   VMs may be moved between compute resources in a data center\
    \ and could\n   be moved between data centers.  VM migration serves to balance\
    \ load\n   across data center resources and has several modes:\n     (i) scheduled\
    \ vs. dynamic;\n    (ii) bulk vs. sequential;\n   (iii) point-to-point vs. point-to-multipoint\n\
    \   While VM migration may solve problems of load or planned maintenance\n   within\
    \ a data center, it can also be effective to reduce network load\n   around the\
    \ data center.  But the act of migrating VMs, especially\n   between data centers,\
    \ can impact the network and other services that\n   are offered.\n   For certain\
    \ applications such as disaster recovery, bulk migration is\n   required on the\
    \ fly, which may necessitate concurrent computation and\n   path setup dynamically.\n\
    \   Thus, application stratum operations must also take into account the\n   situation\
    \ in the network stratum, even as the application stratum\n   actions may be driven\
    \ by the status of the network stratum.\n"
- title: 3.7.1.2.  Load Balancing
  contents:
  - "3.7.1.2.  Load Balancing\n   Application servers may be instantiated in many\
    \ data centers located\n   in different parts of the network.  When an end-user\
    \ makes an\n   application request, a decision has to be made about which data\n\
    \   center should host the processing and storage required to meet the\n   request.\
    \  One of the major drivers for operating multiple data\n   centers (rather than\
    \ one very large data center) is so that the\n   application will run on a machine\
    \ that is closer to the end-users and\n   thus improve the user experience by\
    \ reducing network latency.\n   However, if the network is congested or the data\
    \ center is\n   overloaded, this strategy can backfire.\n   Thus, the key factors\
    \ to be considered in choosing the server on\n   which to instantiate a VM for\
    \ an application include:\n   - The utilization of the servers in the data center\n\
    \   - The network load conditions within a data center\n   - The network load\
    \ conditions between data centers\n   - The network conditions between the end-user\
    \ and data center\n   Again, the choices made in the application stratum need\
    \ to consider\n   the situation in the network stratum.\n"
- title: 3.7.2.  Application of the ABNO Architecture
  contents:
  - "3.7.2.  Application of the ABNO Architecture\n   This section shows how the ABNO\
    \ architecture is applicable to the\n   cross-stratum data center issues described\
    \ in Section 3.7.1.\n   Figure 29 shows a diagram of an example data center-based\n\
    \   application.  A carrier network provides access for an end-user\n   through\
    \ PE4.  Three data centers (DC1, DC2, and DC3) are accessed\n   through different\
    \ parts of the network via PE1, PE2, and PE3.\n   The Application Service Coordinator\
    \ receives information from the\n   end-user about the desired services and converts\
    \ this information to\n   service requests that it passes to the ABNO Controller.\
    \  The\n   end-users may already know which data center they wish to use, or the\n\
    \   Application Service Coordinator may be able to make this\n   determination;\
    \ otherwise, the task of selecting the data center must\n   be performed by the\
    \ ABNO Controller, and this may utilize a further\n   database (see Section 2.3.1.8)\
    \ to contain information about server\n   loads and other data center parameters.\n\
    \   The ABNO Controller examines the network resources using information\n   gathered\
    \ from the other ABNO components and uses those components to\n   configure the\
    \ network to support the end-user's needs.\n   +----------+    +---------------------------------+\n\
    \   | End-User |--->| Application Service Coordinator |\n   +----------+    +---------------------------------+\n\
    \         |                          |\n         |                          v\n\
    \         |                 +-----------------+\n         |                 |\
    \ ABNO Controller |\n         |                 +-----------------+\n        \
    \ |                          |\n         |                          v\n      \
    \   |               +---------------------+       +--------------+\n         |\
    \               |Other ABNO Components|       | o o o   DC 1 |\n         |   \
    \            +---------------------+       |  \\|/         |\n         |     \
    \                     |            ------|---O          |\n         |        \
    \                  v           |      |              |\n         |           \
    \ --------------------------|--    +--------------+\n         |           / Carrier\
    \ Network      PE1 |  \\\n         |          /      .....................O  \
    \ \\   +--------------+\n         |         |      .                         \
    \ |  | o o o   DC 2 |\n         |         | PE4 .                      PE2  |\
    \  |  \\|/         |\n          ---------|----O........................O---|--|---O\
    \          |\n                   |     .                           |  |      \
    \        |\n                   |      .                    PE3   |  +--------------+\n\
    \                    \\      .....................O   /\n                    \
    \ \\                          |  /   +--------------+\n                      --------------------------|--\
    \    | o o o   DC 3 |\n                                                |     \
    \ |  \\|/         |\n                                                 ------|---O\
    \          |\n                                                       |       \
    \       |\n                                                       +--------------+\n\
    \            Figure 29: The ABNO Architecture in the Context of\n            \
    \    Cross-Stratum Optimization for Data Centers\n"
- title: 3.7.2.1.  Deployed Applications, Services, and Products
  contents:
  - "3.7.2.1.  Deployed Applications, Services, and Products\n   The ABNO Controller\
    \ will need to utilize a number of components to\n   realize the CSO functions\
    \ described in Section 3.7.1.\n   The ALTO Server provides information about topological\
    \ proximity and\n   appropriate geographical location to servers with respect\
    \ to the\n   underlying networks.  This information can be used to optimize the\n\
    \   selection of peer location, which will help reduce the path of IP\n   traffic\
    \ or can contain it within specific service providers'\n   networks.  ALTO in\
    \ conjunction with the ABNO Controller and the\n   Application Service Coordinator\
    \ can address general problems such as\n   the selection of application servers\
    \ based on resource availability\n   and usage of the underlying networks.\n \
    \  The ABNO Controller can also formulate a view of current network load\n   from\
    \ the TED and from the OAM Handler (for example, by running\n   diagnostic tools\
    \ that measure latency, jitter, and packet loss).\n   This view obviously influences\
    \ not just how paths from the end-user\n   to the data center are provisioned\
    \ but can also guide the selection\n   of which data center should provide the\
    \ service and possibly even the\n   points of attachment to be used by the end-user\
    \ and to reach the\n   chosen data center.  A view of how the PCE can fit in with\
    \ CSO is\n   provided in [CSO-PCE], on which the content of Figure 29 is based.\n\
    \   As already discussed, the combination of the ABNO Controller and the\n   Application\
    \ Service Coordinator will need to be able to select (and\n   possibly migrate)\
    \ the location of the VM that provides the service\n   for the end-user.  Since\
    \ a common technique used to direct the\n   end-user to the correct VM/server\
    \ is to employ DNS redirection, an\n   important capability of the ABNO Controller\
    \ will be the ability to\n   program the DNS servers accordingly.\n   Furthermore,\
    \ as already noted in other sections of this document, the\n   ABNO Controller\
    \ can coordinate the placement of traffic within the\n   network to achieve load\
    \ balancing and to provide resilience to\n   failures.  These features can be\
    \ used in conjunction with the\n   functions discussed above, to ensure that the\
    \ placement of new VMs,\n   the traffic that they generate, and the load caused\
    \ by VM migration\n   can be carried by the network and do not disrupt existing\
    \ services.\n"
- title: 3.8.  ALTO Server
  contents:
  - "3.8.  ALTO Server\n   The ABNO architecture allows use cases with joint network\
    \ and\n   application-layer optimization.  In such a use case, an application\n\
    \   is presented with an abstract network topology containing only\n   information\
    \ relevant to the application.  The application computes\n   its application-layer\
    \ routing according to its application objective.\n   The application may interact\
    \ with the ABNO Controller to set up\n   explicit LSPs to support its application-layer\
    \ routing.\n   The following steps are performed to illustrate such a use case.\n\
    \   1. Application Request of Application-Layer Topology\n      Consider the network\
    \ shown in Figure 30.  The network consists of\n      five nodes and six links.\n\
    \      The application, which has end points hosted at N0, N1, and N2,\n     \
    \ requests network topology so that it can compute its application-\n      layer\
    \ routing, for example, to maximize the throughput of content\n      replication\
    \ among end points at the three sites.\n                 +----+       L0 Wt=10\
    \ BW=50       +----+\n                 | N0 |............................| N3\
    \ |\n                 +----+                            +----+\n             \
    \      |   \\    L4                        |\n                   |    \\   Wt=7\
    \                      |\n                   |     \\  BW=40                 \
    \    |\n                   |      \\                           |\n           \
    \  L1    |       +----+                     |\n             Wt=10 |       | N4\
    \ |               L2    |\n             BW=45 |       +----+               Wt=12\
    \ |\n                   |      /                     BW=30 |\n               \
    \    |     /  L5                        |\n                   |    /   Wt=10 \
    \                    |\n                   |   /    BW=45                    \
    \ |\n                 +----+                            +----+\n             \
    \    | N1 |............................| N2 |\n                 +----+       L3\
    \ Wt=15 BW=35       +----+\n                      Figure 30: Raw Network Topology\n\
    \      The request arrives at the ABNO Controller, which forwards the\n      request\
    \ to the ALTO Server component.  The ALTO Server consults\n      the Policy Agent,\
    \ the TED, and the PCE to return an abstract,\n      application-layer topology.\n\
    \      For example, the policy may specify that the bandwidth exposed to\n   \
    \   an application may not exceed 40 Mbps.  The network has\n      precomputed\
    \ that the route from N0 to N2 should use the path\n      N0->N3->N2, according\
    \ to goals such as GCO (see Section 3.4).  The\n      ALTO Server can then produce\
    \ a reduced topology for the\n      application, such as the topology shown in\
    \ Figure 31.\n                      +----+\n                      | N0 |............\n\
    \                      +----+            \\\n                        |   \\  \
    \          \\\n                        |    \\            \\\n               \
    \         |     \\            \\\n                        |      |           \
    \ \\   AL0M2\n                  L1    |      | AL4M5       \\  Wt=22\n       \
    \           Wt=10 |      | Wt=17        \\ BW=30\n                  BW=40 |  \
    \    | BW=40         \\\n                        |      |                \\\n\
    \                        |     /                  \\\n                       \
    \ |    /                    \\\n                        |   /                \
    \      \\\n                      +----+                        +----+\n      \
    \                | N1 |........................| N2 |\n                      +----+\
    \   L3 Wt=15 BW=35       +----+\n           Figure 31: Reduced Graph for a Particular\
    \ Application\n      The ALTO Server uses the topology and existing routing to\
    \ compute\n      an abstract network map consisting of three PIDs.  The pair-wise\n\
    \      bandwidth as well as shared bottlenecks will be computed from the\n   \
    \   internal network topology and reflected in cost maps.\n   2. Application Computes\
    \ Application Overlay\n      Using the abstract topology, the application computes\
    \ an\n      application-layer routing.  For concreteness, the application may\n\
    \      compute a spanning tree to maximize the total bandwidth from N0 to\n  \
    \    N2.  Figure 32 shows an example of application-layer routing,\n      using\
    \ a route of N0->N1->N2 for 35 Mbps and N0->N2 for 30 Mbps,\n      for a total\
    \ of 65 Mbps.\n               +----+\n               | N0 |----------------------------------+\n\
    \               +----+        AL0M2 BW=30               |\n                 |\
    \                                     |\n                 |                  \
    \                   |\n                 |                                    \
    \ |\n                 |                                     |\n              \
    \   | L1                                  |\n                 |              \
    \                       |\n                 | BW=35                          \
    \     |\n                 |                                     |\n          \
    \       |                                     |\n                 |          \
    \                           |\n                 V                            \
    \         V\n               +----+        L3 BW=35                +----+\n   \
    \            | N1 |...............................>| N2 |\n               +----+\
    \                                +----+\n                Figure 32: Application-Layer\
    \ Spanning Tree\n   3. Application Path Set Up by the ABNO Controller\n      The\
    \ application may submit its application routes to the ABNO\n      Controller\
    \ to set up explicit LSPs to support its operation.  The\n      ABNO Controller\
    \ consults the ALTO maps to map the application-\n      layer routing back to\
    \ internal network topology and then instructs\n      the Provisioning Manager\
    \ to set up the paths.  The ABNO Controller\n      may re-trigger GCO to reoptimize\
    \ network traffic engineering.\n"
- title: 3.9.  Other Potential Use Cases
  contents:
  - "3.9.  Other Potential Use Cases\n   This section serves as a placeholder for\
    \ other potential use cases\n   that might get documented in future documents.\n"
- title: 3.9.1.  Traffic Grooming and Regrooming
  contents:
  - "3.9.1.  Traffic Grooming and Regrooming\n   This use case could cover the following\
    \ scenarios:\n   - Nested LSPs\n   - Packet Classification (IP flows into LSPs\
    \ at edge routers)\n   - Bucket Stuffing\n   - IP Flows into ECMP Hash Bucket\n"
- title: 3.9.2.  Bandwidth Scheduling
  contents:
  - "3.9.2.  Bandwidth Scheduling\n   Bandwidth scheduling consists of configuring\
    \ LSPs based on a given\n   time schedule.  This can be used to support maintenance\
    \ or\n   operational schedules or to adjust network capacity based on traffic\n\
    \   pattern detection.\n   The ABNO framework provides the components to enable\
    \ bandwidth\n   scheduling solutions.\n"
- title: 4.  Survivability and Redundancy within the ABNO Architecture
  contents:
  - "4.  Survivability and Redundancy within the ABNO Architecture\n   The ABNO architecture\
    \ described in this document is presented in\n   terms of functional units.  Each\
    \ unit could be implemented separately\n   or bundled with other units into single\
    \ programs or products.\n   Furthermore, each implemented unit or bundle could\
    \ be deployed on a\n   separate device (for example, a network server) or on a\
    \ separate\n   virtual machine (for example, in a data center), or groups of\n\
    \   programs could be deployed on the same processor.  From the point of\n   view\
    \ of the architectural model, these implementation and deployment\n   choices\
    \ are entirely unimportant.\n   Similarly, the realization of a functional component\
    \ of the ABNO\n   architecture could be supported by more than one instance of\
    \ an\n   implementation, or by different instances of different\n   implementations\
    \ that provide the same or similar function.  For\n   example, the PCE component\
    \ might have multiple instantiations for\n   sharing the processing load of a\
    \ large number of computation\n   requests, and different instances might have\
    \ different algorithmic\n   capabilities so that one instance might serve parallel\
    \ computation\n   requests for disjoint paths, while another instance might have\
    \ the\n   capability to compute optimal point-to-multipoint paths.\n   This ability\
    \ to have multiple instances of ABNO components also\n   enables resiliency within\
    \ the model, since in the event of the\n   failure of one instance of one component\
    \ (because of software\n   failure, hardware failure, or connectivity problems)\
    \ other instances\n   can take over.  In some circumstances, synchronization between\n\
    \   instances of components may be needed in order to facilitate seamless\n  \
    \ resiliency.\n   How these features are achieved in an ABNO implementation or\n\
    \   deployment is outside the scope of this document.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The ABNO architecture describes a network system,\
    \ and security must\n   play an important part.\n   The first consideration is\
    \ that the external protocols (those shown\n   as entering or leaving the big\
    \ box in Figure 1) must be appropriately\n   secured.  This security will include\
    \ authentication and authorization\n   to control access to the different functions\
    \ that the ABNO system can\n   perform, to enable different policies based on\
    \ identity, and to\n   manage the control of the network devices.\n   Secondly,\
    \ the internal protocols that are used between ABNO\n   components must also have\
    \ appropriate security, particularly when the\n   components are implemented on\
    \ separate network nodes.\n   Considering that the ABNO system contains a lot\
    \ of data about the\n   network, the services carried by the network, and the\
    \ services\n   delivered to customers, access to information held in the system\
    \ must\n   be carefully managed.  Since such access will be largely through the\n\
    \   external protocols, the policy-based controls enabled by\n   authentication\
    \ will be powerful.  But it should also be noted that\n   any data sent from the\
    \ databases in the ABNO system can reveal\n   details of the network and should,\
    \ therefore, be considered as a\n   candidate for encryption.  Furthermore, since\
    \ ABNO components can\n   access the information stored in the database, care\
    \ is required to\n   ensure that all such components are genuine and to consider\n\
    \   encrypting data that flows between components when they are\n   implemented\
    \ at remote nodes.\n   The conclusion is that all protocols used to realize the\
    \ ABNO\n   architecture should have rich security features.\n"
- title: 6.  Manageability Considerations
  contents:
  - "6.  Manageability Considerations\n   The whole of the ABNO architecture is essentially\
    \ about managing the\n   network.  In this respect, there is very little extra\
    \ to say.  ABNO\n   provides a mechanism to gather and collate information about\
    \ the\n   network, reporting it to management applications, storing it for\n \
    \  future inspection, and triggering actions according to configured\n   policies.\n\
    \   The ABNO system will, itself, need monitoring and management.  This\n   can\
    \ be seen as falling into several categories:\n   - Management of external protocols\n\
    \   - Management of internal protocols\n   - Management and monitoring of ABNO\
    \ components\n   - Configuration of policy to be applied across the ABNO system\n"
- title: 7.  Informative References
  contents:
  - "7.  Informative References\n   [BGP-LS]   Gredler, H., Medved, J., Previdi, S.,\
    \ Farrel, A., and S.\n              Ray, \"North-Bound Distribution of Link-State\
    \ and TE\n              Information using BGP\", Work in Progress, draft-ietf-idr-\n\
    \              ls-distribution-10, January 2015.\n   [CSO-PCE]  Dhody, D., Lee,\
    \ Y., Contreras, LM., Gonzalez de Dios, O.,\n              and N. Ciulli, \"Cross\
    \ Stratum Optimization enabled Path\n              Computation\", Work in Progress,\
    \ draft-dhody-pce-cso-\n              enabled-path-computation-07, January 2015.\n\
    \   [EON]      Gerstel, O., Jinno, M., Lord, A., and S.J.B. Yoo, \"Elastic\n \
    \             optical networking: a new dawn for the optical layer?\",\n     \
    \         IEEE Communications Magazine, Volume 50, Issue 2,\n              ISSN\
    \ 0163-6804, February 2012.\n   [Flood]    Project Floodlight, \"Floodlight REST\
    \ API\",\n              <http://www.projectfloodlight.org>.\n   [G.694.1]  ITU-T\
    \ Recommendation G.694.1, \"Spectral grids for WDM\n              applications:\
    \ DWDM frequency grid\", February 2012.\n   [G.709]    ITU-T Recommendation G.709,\
    \ \"Interface for the optical\n              transport network\", February 2012.\n\
    \   [I2RS-Arch]\n              Atlas, A., Halpern, J., Hares, S., Ward, D., and\
    \ T.\n              Nadeau, \"An Architecture for the Interface to the Routing\n\
    \              System\", Work in Progress, draft-ietf-i2rs-\n              architecture-09,\
    \ March 2015.\n   [I2RS-PS]  Atlas, A., Ed., Nadeau, T., Ed., and D. Ward, \"\
    Interface\n              to the Routing System Problem Statement\", Work in\n\
    \              Progress, draft-ietf-i2rs-problem-statement-06,\n             \
    \ January 2015.\n   [ONF]      Open Networking Foundation, \"OpenFlow Switch Specification\n\
    \              Version 1.4.0 (Wire Protocol 0x05)\", October 2013.\n   [PCE-Init-LSP]\n\
    \              Crabbe, E., Minei, I., Sivabalan, S., and R. Varga, \"PCEP\n  \
    \            Extensions for PCE-initiated LSP Setup in a Stateful PCE\n      \
    \        Model\", Work in Progress, draft-ietf-pce-pce-initiated-\n          \
    \    lsp-03, March 2015.\n   [RESTCONF] Bierman, A., Bjorklund, M., and K. Watsen,\
    \ \"RESTCONF\n              Protocol\", Work in Progress, draft-ietf-netconf-\n\
    \              restconf-04, January 2015.\n   [RFC2748]  Durham, D., Ed., Boyle,\
    \ J., Cohen, R., Herzog, S., Rajan,\n              R., and A. Sastry, \"The COPS\
    \ (Common Open Policy Service)\n              Protocol\", RFC 2748, January 2000,\n\
    \              <http://www.rfc-editor.org/info/rfc2748>.\n   [RFC2753]  Yavatkar,\
    \ R., Pendarakis, D., and R. Guerin, \"A Framework\n              for Policy-based\
    \ Admission Control\", RFC 2753,\n              January 2000, <http://www.rfc-editor.org/info/rfc2753>.\n\
    \   [RFC3209]  Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan, V.,\n   \
    \           and G. Swallow, \"RSVP-TE: Extensions to RSVP for LSP\n          \
    \    Tunnels\", RFC 3209, December 2001,\n              <http://www.rfc-editor.org/info/rfc3209>.\n\
    \   [RFC3292]  Doria, A., Hellstrand, F., Sundell, K., and T. Worster,\n     \
    \         \"General Switch Management Protocol (GSMP) V3\", RFC 3292,\n      \
    \        June 2002, <http://www.rfc-editor.org/info/rfc3292>.\n   [RFC3412]  Case,\
    \ J., Harrington, D., Presuhn, R., and B. Wijnen,\n              \"Message Processing\
    \ and Dispatching for the Simple Network\n              Management Protocol (SNMP)\"\
    , STD 62, RFC 3412,\n              December 2002, <http://www.rfc-editor.org/info/rfc3412>.\n\
    \   [RFC3473]  Berger, L., Ed., \"Generalized Multi-Protocol Label\n         \
    \     Switching (GMPLS) Signaling Resource ReserVation Protocol-\n           \
    \   Traffic Engineering (RSVP-TE) Extensions\", RFC 3473,\n              January\
    \ 2003, <http://www.rfc-editor.org/info/rfc3473>.\n   [RFC3630]  Katz, D., Kompella,\
    \ K., and D. Yeung, \"Traffic Engineering\n              (TE) Extensions to OSPF\
    \ Version 2\", RFC 3630,\n              September 2003, <http://www.rfc-editor.org/info/rfc3630>.\n\
    \   [RFC3746]  Yang, L., Dantu, R., Anderson, T., and R. Gopal,\n            \
    \  \"Forwarding and Control Element Separation (ForCES)\n              Framework\"\
    , RFC 3746, April 2004,\n              <http://www.rfc-editor.org/info/rfc3746>.\n\
    \   [RFC3985]  Bryant, S., Ed., and P. Pate, Ed., \"Pseudo Wire Emulation\n  \
    \            Edge-to-Edge (PWE3) Architecture\", RFC 3985, March 2005,\n     \
    \         <http://www.rfc-editor.org/info/rfc3985>.\n   [RFC4655]  Farrel, A.,\
    \ Vasseur, J.-P., and J. Ash, \"A Path\n              Computation Element (PCE)-Based\
    \ Architecture\", RFC 4655,\n              August 2006, <http://www.rfc-editor.org/info/rfc4655>.\n\
    \   [RFC5150]  Ayyangar, A., Kompella, K., Vasseur, JP., and A. Farrel,\n    \
    \          \"Label Switched Path Stitching with Generalized\n              Multiprotocol\
    \ Label Switching Traffic Engineering (GMPLS\n              TE)\", RFC 5150, February\
    \ 2008,\n              <http://www.rfc-editor.org/info/rfc5150>.\n   [RFC5212]\
    \  Shiomoto, K., Papadimitriou, D., Le Roux, JL., Vigoureux,\n              M.,\
    \ and D. Brungard, \"Requirements for GMPLS-Based Multi-\n              Region\
    \ and Multi-Layer Networks (MRN/MLN)\", RFC 5212,\n              July 2008, <http://www.rfc-editor.org/info/rfc5212>.\n\
    \   [RFC5254]  Bitar, N., Ed., Bocci, M., Ed., and L. Martini, Ed.,\n        \
    \      \"Requirements for Multi-Segment Pseudowire Emulation Edge-\n         \
    \     to-Edge (PWE3)\", RFC 5254, October 2008,\n              <http://www.rfc-editor.org/info/rfc5254>.\n\
    \   [RFC5277]  Chisholm, S. and H. Trevino, \"NETCONF Event\n              Notifications\"\
    , RFC 5277, July 2008,\n              <http://www.rfc-editor.org/info/rfc5277>.\n\
    \   [RFC5305]  Li, T. and H. Smit, \"IS-IS Extensions for Traffic\n          \
    \    Engineering\", RFC 5305, October 2008,\n              <http://www.rfc-editor.org/info/rfc5305>.\n\
    \   [RFC5394]  Bryskin, I., Papadimitriou, D., Berger, L., and J. Ash,\n     \
    \         \"Policy-Enabled Path Computation Framework\", RFC 5394,\n         \
    \     December 2008, <http://www.rfc-editor.org/info/rfc5394>.\n   [RFC5424] \
    \ Gerhards, R., \"The Syslog Protocol\", RFC 5424, March 2009,\n             \
    \ <http://www.rfc-editor.org/info/rfc5424>.\n   [RFC5440]  Vasseur, JP., Ed.,\
    \ and JL. Le Roux, Ed., \"Path Computation\n              Element (PCE) Communication\
    \ Protocol (PCEP)\", RFC 5440,\n              March 2009, <http://www.rfc-editor.org/info/rfc5440>.\n\
    \   [RFC5520]  Bradford, R., Ed., Vasseur, JP., and A. Farrel,\n             \
    \ \"Preserving Topology Confidentiality in Inter-Domain Path\n              Computation\
    \ Using a Path-Key-Based Mechanism\", RFC 5520,\n              April 2009, <http://www.rfc-editor.org/info/rfc5520>.\n\
    \   [RFC5557]  Lee, Y., Le Roux, JL., King, D., and E. Oki, \"Path\n         \
    \     Computation Element Communication Protocol (PCEP)\n              Requirements\
    \ and Protocol Extensions in Support of Global\n              Concurrent Optimization\"\
    , RFC 5557, July 2009,\n              <http://www.rfc-editor.org/info/rfc5557>.\n\
    \   [RFC5623]  Oki, E., Takeda, T., Le Roux, JL., and A. Farrel,\n           \
    \   \"Framework for PCE-Based Inter-Layer MPLS and GMPLS\n              Traffic\
    \ Engineering\", RFC 5623, September 2009,\n              <http://www.rfc-editor.org/info/rfc5623>.\n\
    \   [RFC5693]  Seedorf, J. and E. Burger, \"Application-Layer Traffic\n      \
    \        Optimization (ALTO) Problem Statement\", RFC 5693,\n              October\
    \ 2009, <http://www.rfc-editor.org/info/rfc5693>.\n   [RFC5810]  Doria, A., Ed.,\
    \ Hadi Salim, J., Ed., Haas, R., Ed.,\n              Khosravi, H., Ed., Wang,\
    \ W., Ed., Dong, L., Gopal, R., and\n              J.  Halpern, \"Forwarding and\
    \ Control Element Separation\n              (ForCES) Protocol Specification\"\
    , RFC 5810, March 2010,\n              <http://www.rfc-editor.org/info/rfc5810>.\n\
    \   [RFC6007]  Nishioka, I. and D. King, \"Use of the Synchronization\n      \
    \        VECtor (SVEC) List for Synchronized Dependent Path\n              Computations\"\
    , RFC 6007, September 2010,\n              <http://www.rfc-editor.org/info/rfc6007>.\n\
    \   [RFC6020]  Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n   \
    \           the Network Configuration Protocol (NETCONF)\", RFC 6020,\n      \
    \        October 2010, <http://www.rfc-editor.org/info/rfc6020>.\n   [RFC6107]\
    \  Shiomoto, K., Ed., and A. Farrel, Ed., \"Procedures for\n              Dynamically\
    \ Signaled Hierarchical Label Switched Paths\",\n              RFC 6107, February\
    \ 2011,\n              <http://www.rfc-editor.org/info/rfc6107>.\n   [RFC6120]\
    \  Saint-Andre, P., \"Extensible Messaging and Presence\n              Protocol\
    \ (XMPP): Core\", RFC 6120, March 2011,\n              <http://www.rfc-editor.org/info/rfc6120>.\n\
    \   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n  \
    \            and A. Bierman, Ed., \"Network Configuration Protocol\n         \
    \     (NETCONF)\", RFC 6241, June 2011,\n              <http://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC6707]  Niven-Jenkins, B., Le Faucheur, F., and N. Bitar, \"Content\n \
    \             Distribution Network Interconnection (CDNI) Problem\n          \
    \    Statement\", RFC 6707, September 2012,\n              <http://www.rfc-editor.org/info/rfc6707>.\n\
    \   [RFC6805]  King, D., Ed., and A. Farrel, Ed., \"The Application of the\n \
    \             Path Computation Element Architecture to the Determination\n   \
    \           of a Sequence of Domains in MPLS and GMPLS\", RFC 6805,\n        \
    \      November 2012, <http://www.rfc-editor.org/info/rfc6805>.\n   [RFC7011]\
    \  Claise, B., Ed., Trammell, B., Ed., and P. Aitken,\n              \"Specification\
    \ of the IP Flow Information Export (IPFIX)\n              Protocol for the Exchange\
    \ of Flow Information\", STD 77,\n              RFC 7011, September 2013,\n  \
    \            <http://www.rfc-editor.org/info/rfc7011>.\n   [RFC7285]  Alimi, R.,\
    \ Ed., Penno, R., Ed., Yang, Y., Ed., Kiesel, S.,\n              Previdi, S.,\
    \ Roome, W., Shalunov, S., and R. Woundy,\n              \"Application-Layer Traffic\
    \ Optimization (ALTO) Protocol\",\n              RFC 7285, September 2014,\n \
    \             <http://www.rfc-editor.org/info/rfc7285>.\n   [RFC7297]  Boucadair,\
    \ M., Jacquenet, C., and N. Wang, \"IP\n              Connectivity Provisioning\
    \ Profile (CPP)\", RFC 7297,\n              July 2014, <http://www.rfc-editor.org/info/rfc7297>.\n\
    \   [Stateful-PCE]\n              Crabbe, E., Minei, I., Medved, J., and R. Varga,\
    \ \"PCEP\n              Extensions for Stateful PCE\", Work in Progress,\n   \
    \           draft-ietf-pce-stateful-pce-10, October 2014.\n   [TL1]      Telcorida,\
    \ \"Operations Application Messages - Language For\n              Operations Application\
    \ Messages\", GR-831, November 1996.\n   [TMF-MTOSI]\n              TeleManagement\
    \ Forum, \"Multi-Technology Operations Systems\n              Interface (MTOSI)\"\
    ,\n              <https://www.tmforum.org/MTOSI/2319/home.html>.\n   [YANG-Rtg]\
    \ Lhotka, L. and A. Lindem, \"A YANG Data Model for Routing\n              Management\"\
    , Work in Progress, draft-ietf-netmod-routing-\n              cfg-17, March 2015.\n"
- title: Appendix A.  Undefined Interfaces
  contents:
  - "Appendix A.  Undefined Interfaces\n   This appendix provides a brief list of\
    \ interfaces that are not yet\n   defined at the time of this writing.  Interfaces\
    \ where there is a\n   choice of existing protocols are not listed.\n   o  An\
    \ interface for adding additional information to the Traffic\n      Engineering\
    \ Database is described in Section 2.3.2.3.  No protocol\n      is currently identified\
    \ for this interface, but candidates\n      include:\n      - The protocol developed\
    \ or adopted to satisfy the requirements of\n        I2RS [I2RS-Arch]\n      -\
    \ NETCONF [RFC6241]\n   o  The protocol to be used by the Interface to the Routing\
    \ System is\n      described in Section 2.3.2.8.  The I2RS working group has\n\
    \      determined that this protocol will be based on a combination of\n     \
    \ NETCONF [RFC6241] and RESTCONF [RESTCONF] with further additions\n      and\
    \ modifications as deemed necessary to deliver the desired\n      function.  The\
    \ details of the protocol are still to be determined.\n   o  As described in Section\
    \ 2.3.2.10, the Virtual Network Topology\n      Manager needs an interface that\
    \ can be used by a PCE or the ABNO\n      Controller to inform it that a client\
    \ layer needs more virtual\n      topology.  It is possible that the protocol\
    \ identified for use\n      with I2RS will satisfy this requirement, or this could\
    \ be achieved\n      using extensions to the PCEP Notify message (PCNtf).\n  \
    \ o  The north-bound interface from the ABNO Controller is used by the\n     \
    \ NMS, OSS, and Application Service Coordinator to request services\n      in\
    \ the network in support of applications as described in\n      Section 2.3.2.11.\n\
    \      - It is possible that the protocol selected or designed to satisfy\n  \
    \      I2RS will address the requirement.\n      - A potential approach for this\
    \ type of interface is described in\n        [RFC7297] for a simple use case.\n\
    \   o  As noted in Section 2.3.2.14, there may be layer-independent data\n   \
    \   models for offering common interfaces to control, configure, and\n      report\
    \ OAM.\n   o  As noted in Section 3.6, the ABNO model could be applied to\n  \
    \    placing multi-segment pseudowires in a network topology made up of\n    \
    \  S-PEs and MPLS tunnels.  The current definition of PCEP [RFC5440]\n      and\
    \ associated extensions that are works in progress do not\n      include all of\
    \ the details to request such paths, so some work\n      might be necessary, although\
    \ the general concepts will be easily\n      reusable.  Indeed, such work may\
    \ be necessary for the wider\n      applicability of PCEs in many networking scenarios.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks for discussions and review are due to Ken Gray, Jan\
    \ Medved,\n   Nitin Bahadur, Diego Caviglia, Joel Halpern, Brian Field, Ori\n\
    \   Gerstel, Daniele Ceccarelli, Cyril Margaria, Jonathan Hardwick, Nico\n   Wauters,\
    \ Tom Taylor, Qin Wu, and Luis Contreras.  Thanks to George\n   Swallow for suggesting\
    \ the existence of the SRLG database.  Tomonori\n   Takeda and Julien Meuric provided\
    \ valuable comments as part of their\n   Routing Directorate reviews.  Tina Tsou\
    \ provided comments as part of\n   her Operational Directorate review.\n   This\
    \ work received funding from the European Union's Seventh\n   Framework Programme\
    \ for research, technological development, and\n   demonstration, through the\
    \ PACE project under grant agreement\n   number 619712 and through the IDEALIST\
    \ project under grant agreement\n   number 317999.\n"
- title: Contributors
  contents:
  - "Contributors\n   Quintin Zhao\n   Huawei Technologies\n   125 Nagog Technology\
    \ Park\n   Acton, MA  01719\n   United States\n   EMail: qzhao@huawei.com\n  \
    \ Victor Lopez\n   Telefonica I+D\n   EMail: vlopez@tid.es\n   Ramon Casellas\n\
    \   CTTC\n   EMail: ramon.casellas@cttc.es\n   Yuji Kamite\n   NTT Communications\
    \ Corporation\n   EMail: y.kamite@ntt.com\n   Yosuke Tanaka\n   NTT Communications\
    \ Corporation\n   EMail: yosuke.tanaka@ntt.com\n   Young Lee\n   Huawei Technologies\n\
    \   EMail: leeyoung@huawei.com\n   Y. Richard Yang\n   Yale University\n   EMail:\
    \ yry@cs.yale.edu\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Daniel King\n   Old Dog Consulting\n   EMail: daniel@olddog.co.uk\n\
    \   Adrian Farrel\n   Juniper Networks\n   EMail: adrian@olddog.co.uk\n"
