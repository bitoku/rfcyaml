- title: __initial_text__
  contents:
  - '                  Reuse of CMS Content Encryption Keys

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a way to include a key identifier in a CMS\n\
    \   (Cryptographic Message Syntax) enveloped data structure, so that the\n   content\
    \ encryption key can be re-used for further enveloped data\n   packets.\n"
- title: Table Of Contents
  contents:
  - "Table Of Contents\n   1. Introduction...................................................\
    \  2\n   2. Applicability..................................................  2\n\
    \   3. How to do it...................................................  3\n  \
    \ 4. Using different CEK and KEK algorithms.........................  4\n   5.\
    \ Conformance....................................................  5\n   6. Security\
    \ Considerations........................................  5\n   7. References.....................................................\
    \  6\n   Authors' Addresses................................................  6\n\
    \   Appendix A: ASN.1 Module..........................................  7\n  \
    \ Full Copyright Statement.......................................... 10\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   CMS [CMS] specifies EnvelopedData.  EnvelopedData supports\
    \ data\n   encryption using either symmetric or asymmetric key management\n  \
    \ techniques.  Since asymmetric key establishment is relatively\n   expensive,\
    \ it is desirable in some environments to re-use a shared\n   content-encryption\
    \ key established using asymmetric mechanisms for\n   encryption operations in\
    \ subsequent messages.\n   The basic idea here is to reuse the content-encryption\
    \ key (CEK) from\n   a message (say MSG1) to derive the key-encryption key (KEK)\
    \ for a\n   later message, (MSG2), by including a reference value for the CEK\
    \ in\n   message 1, and that same value as the KEKIdentifier for message 2.\n\
    \   The CEK from message 1 is called the \"referenced CEK\".\n   The key words\
    \ \"MUST\", \"REQUIRED\", \"SHOULD\", \"RECOMMENDED\", and \"MAY\"\n   in this\
    \ document are to be interpreted as described in [RFC2119].\n"
- title: 2. Applicability
  contents:
  - "2. Applicability\n   This specification is intended to be used to provide more\
    \ efficient\n   selective field confidentiality between communicating peers, in\n\
    \   particular in the cases where:\n   -  The originator is a client that wishes\
    \ to send a number of fields\n      to a server (the recipient) in a single transaction,\
    \ where the\n      referenced CEK is used for the separate encryption of each\
    \ field.\n   -  The originator and recipient are servers that communicate very\n\
    \      frequently and use this specification purely for efficiency.\n   This specification\
    \ is not intended to be applicable in all cases.  It\n   is suited for use where:\n\
    \   -  Its use is further scoped: that is, this specification doesn't\n      define\
    \ a protocol but merely a trick that can be used in a larger\n      context and\
    \ additional specification will be needed for each such\n      case.  In particular,\
    \ in order to use this specification, it is\n      REQUIRED to define the originators'\
    \ and recipients' behavior where\n      a referenced CEK has been \"lost\".\n\
    \   -  This specification is not suitable for general group key\n      management.\n\
    \   -  The underlying cryptographic API is suitable: it is very likely\n     \
    \ that any cryptographic API that completely \"hides\" the bits of\n      cryptographic\
    \ keys from the CMS layer will prevent reuse of a\n      referenced CEK (since\
    \ they won't have a primitive that allows\n      MSG1.CEK to be transformed to\
    \ MSG2.KEK).\n   -  The algorithms for content and key encryption have compatible\
    \ key\n      values and strengths, that is, if MSG1.contentEncryptionAlgorithm\n\
    \      is a 40bit cipher and MSG2.keyEncryptionAlgorithm requires 168\n      bits\
    \ of keying material, then this specification SHOULD NOT be\n      used.\n   There\
    \ are other ways that could be envisaged to establish the\n   required symmetric\
    \ keying material, e.g., by leveraging a group\n   keying scheme or by defining\
    \ a content type that contains a KEK\n   value.  Although this scheme is much\
    \ simpler than generic group key\n   management, if an implementation already\
    \ supports group key\n   management then this scheme doesn't add value.  This\
    \ scheme is also\n   suitable for inclusion in CMS libraries (though the addition\
    \ of new\n   state might be a problem for some implementations), which can offer\n\
    \   some advantages over application layer schemes (e.g., where the\n   content\
    \ includes MSG2.KEK).\n"
- title: 3. How to do it
  contents:
  - "3. How to do it\n   In order to reference the content-encryption key (CEK) used\
    \ in an\n   EnvelopedData, a key identifier can be included in the\n   unprotectedAttrs\
    \ field of MSG1.  This key can then be used to derive\n   the key-encryption key\
    \ (KEK) for other instances of EnvelopedData or\n   for other purposes.  If the\
    \ CEK from MSG1 is to be used to derive the\n   KEK for MSG2 then MSG1 MUST contain\
    \ an unprotectedAttrs Attribute of\n   type id-aa-CEKReference with a single value\
    \ using the CEKReference\n   syntax.\n   MSG2.KEK is to be derived by reversing\
    \ the bytes of MSG1.CEK.  The\n   byte reversal is to avoid an attack where the\
    \ attacker has a known\n   plaintext and the related ciphertext (encrypted with\
    \ MSG1.CEK) that\n   (otherwise) could be directly used as a MSG2.KEK.\n   The\
    \ application MUST ensure that the relevant algorithms are\n   compatible.  That\
    \ is, a CEKReference attribute alone can only be used\n   where the content-encryption\
    \ algorithm from MSG1 employs the same\n   type of symmetric key as the key-encryption\
    \ algorithm from MSG2.\n   Notes:\n   1) There is nothing to prevent inclusion\
    \ of a CEKReference attribute\n      in MSG2 as well as in MSG1.  That is, an\
    \ originator could \"roll\"\n      the referenced CEK with every message.\n  \
    \ 2) The CEKReference attribute can occur with any of the choices for\n      RecipientInfo:\
    \ ktri, kari or kekri.  Implementors MUST NOT assume\n      that CEKReference\
    \ can only occur where ktri or kari is used.\n   id-aa-CEKReference OBJECT IDENTIFIER\
    \ ::= { id-aa 30 }\n   CEKReference ::= OCTET STRING\n   id-aa is an object identifier\
    \ defined in [CMS-MSG].\n   In order to allow the originator of MSG1 to indicate\
    \ the \"lifetime\"\n   of the CEK, the originator MAY include a CEKMaxDecrypts\
    \ attribute,\n   also in the unprotectedAttrs field of EnvelopedData.  This attribute\n\
    \   has an INTEGER syntax (the value MUST be >=1 and maximally 2^31), and\n  \
    \ indicates to the recipient the maximum number of messages (excluding\n   MSG1)\
    \ that will use the referenced CEK.  This Attribute MUST only be\n   sent when\
    \ a CEKReference attribute is also included.\n   The recipient SHOULD maintain\
    \ the CEKReference information (minimally\n   the key identifier and the CEK value)\
    \ while less than maxDecrypt\n   messages have been successfully received.  Recipients\
    \ SHOULD delete\n   the CEKReference information after some locally configured\
    \ period.\n   When this attribute is not present, originators and recipients SHOULD\n\
    \   behave as if a value of one had been sent.\n   id-aa-CEKMaxDecrypts OBJECT\
    \ IDENTIFIER ::= { id-aa 31 }\n   CEKMaxDecrypts ::= INTEGER\n   If CEKMaxDecrypts\
    \ is missing, or has the value one, then each CEK\n   will be re-used once as\
    \ the KEK for the next message.  This means\n   that MSG[n].KEK is the byte-reversal\
    \ of MSG[n-1].CEK; subsequently\n   MSG[n+1].KEK will be the byte-reversal of\
    \ MSG[n].CEK.  Note that\n   MSG[n-1].CEK has no impact whatsoever to MSG[n+1],\
    \ so long as CEKs\n   are generated randomly (and not e.g., derived from KEKs\
    \ somehow).\n"
- title: 4. Using different CEK and KEK algorithms
  contents:
  - "4. Using different CEK and KEK algorithms\n   Where MSG1.content-encryption algorithm\
    \ and MSG2.key-encryption\n   algorithm are the same then the MSG2.KEK is the\
    \ byte-reverse of\n   MSG1.CEK.  However, in general, these algorithms MAY differ,\
    \ e.g.,\n   requiring different key lengths.  This section specifies a generic\n\
    \   way to derive MSG2.KEK for such cases.\n   Note: In some sense, the CEK and\
    \ KEK algorithms are never the \"same\",\n   e.g., id-alg-CMS3DESwrap and des-ede3-cbc\
    \ differ.  However, for the\n   purposes of this specification, all we care about\
    \ is that the\n   algorithms use the same format and size of keying material (see\
    \ also\n   security considerations) and that they do not differ significantly\
    \ in\n   terms of the resulting cryptographic \"strength.\"  In that sense the\n\
    \   two algorithms in the example above are the \"same.\"\n   Implementations\
    \ MAY include this functionality.\n   The basic approach is to use the PBKDF2\
    \ key derivation function\n   defined in PKCS#5 [RFC2898], but using MSG1.CEK\
    \ as input instead of a\n   password.  The output of the PBKDF2 function is MSG2.KEK.\
    \  To this\n   end, a new attribute type is defined which allows passing of the\n\
    \   required parameters.\n   id-aa-KEKDerivationAlg OBJECT IDENTIFIER ::= { id-aa\
    \ 32 }\n   KEKDerivationAlgorithm ::= SEQUENCE {\n         kekAlg          AlgorithmIdentifier,\n\
    \         pbkdf2Param     PBKDF2-params\n   }\n   kekAlg is the algorithm identifier\
    \ (and associated parameters, if\n   any), for the MSG2 key encryption algorithm.\
    \  Note that it is not\n   necessary to protect this field since modification\
    \ of keyAlg only\n   represents a denial-of-service attack.\n   The PBKDF2 algorithm\
    \ parameters are to be handled as follows:\n   -  The salt MUST use the \"specified\"\
    \ element of the CHOICE.\n   -  The message originator selects the iterationCount.\n\
    \   -  The value of keyLength is determined by the kekAlg and MUST be\n      present.\n\
    \   -  The prf field MUST use the default algorithm specified in\n      [RFC2898]\
    \ which is algid-hmacWithSHA1 (and so the prf field MUST\n      be omitted).\n"
- title: 5. Conformance
  contents:
  - "5. Conformance\n   This specification only applies to messages where the CEKReference\n\
    \   attribute is present.  All attributes specified here SHOULD be\n   ignored\
    \ unless they are present in a message containing a valid, new\n   or recognized,\
    \ existing value of CEKReference.  The CEKMaxDecrypts\n   attribute is to be treated\
    \ by the recipient as a hint, but MUST be\n   honored by the originator.\n   The\
    \ optional to implement KEKDerivationAlgorithm attribute MUST only\n   be present\
    \ when MSG1.content-encryption algorithm differs from\n   MSG2.key-encryption\
    \ algorithm, in which case it MUST be present.\n   Implementations that recognize\
    \ this attribute, but do not support the\n   functionality SHOULD ignore the attribute.\n\
    \   Ignoring attributes as discussed above, will lead to decryption\n   failures.\
    \  CMS implementations SHOULD be able to signal the\n   particular reason for\
    \ this failure to the calling application.\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   Encryption does not provide authentication, for\
    \ example, if the\n   encryptedContent is essentially random then recipients MUST\
    \ NOT\n   assume that \"knowing\" a CEKReference value proves anything - anyone\n\
    \   could have created the EnvelopedData.  This is relevant both for\n   security\
    \ (the recovered plaintext should not be entirely random) and\n   for avoiding\
    \ denial of service (the recipient MUST NOT assume that\n   using the right CEKReference\
    \ means that message originator is\n   genuine).\n   Similarly, using the correct\
    \ CEKReference does not mean that a\n   message has not been replayed or inserted,\
    \ and recipients MUST NOT\n   assume that replay has been avoided.\n   The maxDecrypts\
    \ field presents a potential denial-of-service attack\n   if a very large value\
    \ is included by an originator in an attempt to\n   get a recipient to consume\
    \ memory by storing the referenced CEKs for\n   a long period or if the originator\
    \ never sends the indicated number\n   of ciphertexts.  Recipients SHOULD therefore\
    \ drop referenced CEKs\n   where the maxDecrypts value is too large (according\
    \ to local\n   configuration) or the referenced CEK has been held for too long\
    \ a\n   period.\n   Suppose MSG1 is sent to a set S1 of users.  In the case where\
    \ MSG2 is\n   sent to only a subset of users in S1, all users from S1 will still\
    \ be\n   able to decrypt MSG2 (since MSG2.KEK is computed only from MSG1.CEK).\n\
    \   Implementers should be aware that in such cases, all members of the\n   original\
    \ set of recipients (S1) can access the plaintext of MSG2 and\n   subsequent messages.\n\
    \   The reason for the byte reversal is as follows: without the byte\n   reversal,\
    \ an attacker knowing some of MSG1.plaintext (a prefix in a\n   field for instance)\
    \ can use the corresponding ciphertext block as the\n   next encrypted CEK, i.e.,\
    \ as MSG2.KEKRecipientInfo.encryptedKey.  Now\n   the attacker knows the next\
    \ CEK.  This attacks something this note is\n   not claiming to protect (origin\
    \ authentication), but is easily\n   avoided using the byte reversal.  Byte-reversal\
    \ was chosen over bit-\n   reversal since bit-reversal would cause parity bits\
    \ from MSG1.CEK to\n   be used as keying bits for MSG2.KEK for DES-based algorithms.\
    \  Note\n   that byte reversal would similarly affect parity if parity checks\n\
    \   spanned more than one octet, however no well-known algorithms operate\n  \
    \ in this way.\n   Implementations should be very careful with this scheme if\
    \ MSG[n].KEK\n   is used to derive MSG[n].CEK, e.g., if MSG[n].CEK were the byte-\n\
    \   reversal of MSG[n].KEK, then this scheme could result in a fixed key\n   being\
    \ unexpectedly used.\n"
- title: 7. References
  contents:
  - "7. References\n   [CMS]     Housley, R., \"Cryptographic Message Syntax\", RFC\
    \ 2630, June\n             1999.\n   [CMS-MSG] Ramsdell, B. \"S/MIME Version 3\
    \ Message Specification\", RFC\n             2633, June 1999.\n   [RFC2898] Kaliski,\
    \ B., \"PKCS #5: Password-Based Cryptography\n             Specification Version\
    \ 2.0\", RFC 2898, September 2000.\n   [RFC2026] Bradner, S., \"The Internet Standards\
    \ Process -- Revision\n             3\", BCP 9, RFC 2026, October 1996.\n   [RFC2119]\
    \ Bradner, S., \"Key words for use in RFCs to Indicate\n             Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Stephen Farrell,\n   Baltimore Technologies,\n   39 Parkgate\
    \ Street,\n   Dublin 8\n   IRELAND\n   Phone: +353-1-881-6000\n   EMail: stephen.farrell@baltimore.ie\n\
    \   Sean Turner\n   IECA, Inc.\n   9010 Edgepark Road\n   Vienna, VA 22182\n \
    \  USA\n   Phone: +1.703.628.3180\n   EMail: turners@ieca.com\n"
- title: 'Appendix A: ASN.1 Module'
  contents:
  - "Appendix A: ASN.1 Module\n   SMIMERcek\n      { iso(1) member-body(2) us(840)\
    \ rsadsi(113549) pkcs(1) pkcs-9(9)\n        smime(16) modules(0) rcek(13) }\n\
    \     -- This module contains the definitions of the attributes\n     -- used\
    \ for re-using the content encryption key from a\n     -- message in further messages.\n\
    \     DEFINITIONS IMPLICIT TAGS ::=\n     BEGIN\n     -- EXPORTS ALL --\n    \
    \ IMPORTS\n       AlgorithmIdentifier FROM\n            AuthenticationFramework\
    \ { joint-iso-itu-t ds(5)\n                  module(1) authenticationFramework(7)\
    \ 3 } ;\n       -- [RFC2898] uses 1993 ASN.1 to define PBKDF2-params.  Since\n\
    \       -- this specification only uses 1988 ASN.1, the definition is\n      \
    \ -- repeated here for completeness.\n       -- The DEFAULT prf field value, MUST\
    \ be used for this\n       -- specification\n       digestAlgorithm OBJECT IDENTIFIER\
    \ ::=\n            { iso(1) member-body(2) us(840) rsadsi(113549) 2}\n       id-hmacWithSHA1\
    \ OBJECT IDENTIFIER ::= {digestAlgorithm 7}\n       -- [RFC2898] defines PBKDF2-params\
    \ using 1993 ASN.1, which\n       -- results in the same encoding as produced\
    \ by the definition\n       -- below.  See [RFC2898] for that definition.\n  \
    \     PBKDF2-params ::= SEQUENCE {\n         salt CHOICE {\n             specified\
    \ OCTET STRING, -- MUST BE USED\n             otherSource AlgorithmIdentifier\
    \ -- DO NOT USE THIS FIELD\n         },\n         iterationCount INTEGER (1..MAX),\n\
    \         keyLength INTEGER (1..MAX) OPTIONAL\n       }\n        -- id-aa is the\
    \ arc with all new authenticated and\n        -- unauthenticated attributes produced\
    \ the by S/MIME\n        -- Working Group.  It is also defined in [CMS-MSG]\n\
    \        id-aa OBJECT IDENTIFIER ::=\n                {iso(1) member-body(2) usa(840)\
    \ rsadsi(113549)\n                 pkcs(1) pkcs-9(9) smime(16) attributes(2)}\n\
    \        -- This attribute contains what will be the key identifier\n        --\
    \ for subsequent messages\n        id-aa-CEKReference OBJECT IDENTIFIER ::= {\
    \ id-aa 30 }\n        CEKReference ::= OCTET STRING\n        -- This attribute\
    \ contains a \"hint\" to the recipient\n        -- indicating how many times the\
    \ originator will use\n        -- the re-used CEK\n        id-aa-CEKMaxDecrypts\
    \      OBJECT IDENTIFIER ::= { id-aa 31 }\n        CEKMaxDecrypts ::= INTEGER\n\
    \        -- This attribute specifies the key derivation function\n        -- to\
    \ be used when the default byte reversal operation cannot\n        -- be used.\n\
    \        id-aa-KEKDerivationAlg     OBJECT IDENTIFIER ::= { id-aa 32 }\n     \
    \   KEKDerivationAlgorithm ::= SEQUENCE {\n            kekAlg          AlgorithmIdentifier,\n\
    \            pbkdf2Param     PBKDF2-params }\n     END\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
