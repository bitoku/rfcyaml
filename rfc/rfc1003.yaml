- title: __initial_text__
  contents:
  - '        Issues in Defining an Equations Representation Standard

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n    This memo is intended to identify and explore issues\
    \ in defining a\n    standard for the exchange of mathematical equations.  No\
    \ attempt is\n    made at a complete definition and more questions are asked than\
    \ are\n    answered.  Questions about the user interface are only addressed to\n\
    \    the extent that they affect interchange issues.  Comments are\n    welcome.\
    \  Distribution of this memo is unlimited.\n"
- title: I.  Introduction
  contents:
  - "I.  Introduction\n    Since the early days of the Arpanet, electronic mail has\
    \ been in\n    wide use and many regard it as an essential tool.  Numerous mailing\n\
    \    lists and newsgroups have sprung up over the years, allowing large\n    numbers\
    \ of people all over the world to participate remotely in\n    discussions on\
    \ a variety of topics.  More recently, multimedia mail\n    systems have been\
    \ developed which allow users to not only send and\n    receive text messages,\
    \ but also those containing voice, bitmaps,\n    graphics, and other electronic\
    \ media.\n    Most of us in the Internet community take electronic mail for\n\
    \    granted, but for the rest of the world, it is a brand new\n    capability.\
    \  Many are not convinced that electronic mail will be\n    useful for them and\
    \ may also feel it is just an infinite time sink\n    (as we all know, this is\
    \ actually true).  In particular, most\n    scientists (apart from computer scientists)\
    \ do not yet use, or are\n    just beginning to use, electronic mail.\n    The\
    \ current NSF supercomputer initiative may change this.  Its\n    primary purpose\
    \ is to provide remote supercomputer access to a much\n    greater number of scientists\
    \ across the country.  However, doing\n    this will involve the interconnection\
    \ of many university-wide\n    networks to NSF supercomputer sites and therefore\
    \ to the NSF\n    backbone network.  Thus, in the very near future we will have\
    \ a\n    large number of scientists in the country suddenly able to\n    communicate\
    \ via electronic mail.\n    Generally, text-only mail has sufficed up until now.\
    \  One can dream\n    of the day (not so far in the future) when everyone will\
    \ have\n    bitmapped display workstations with multimedia mail systems, but we\n\
    \    can get by without it for now.  I believe, however, that the new NSF\n  \
    \  user community will find one other capability almost essential in\n    making\
    \ electronic mail useful to them, and that is the ability to\n    include equations\
    \ in messages.\n    A glance through any scientific journal will demonstrate the\n\
    \    importance of equations in scientific communication.  Indeed, papers\n  \
    \  in some fields seem to contain more mathematics than English.  It is\n    hard\
    \ to imagine that when people in these fields are connected into\n    an electronic\
    \ mail community they will be satisfied with a mail\n    system which doesn't\
    \ allow equations.  Indeed, with the advent of\n    the NSF's Experimental Research\
    \ in Electronic Submission (EXPRESS)\n    project, scientists will begin submitting\
    \ manuscripts and project\n    proposals directly through electronic mail and\
    \ the ability to handle\n    equations will be essential.\n    Currently, there\
    \ exists no standard for the representation of\n    equations.  In fact, there\
    \ is not even agreement on what it is that\n    ought to be represented.  Users\
    \ of particular equation systems (such\n    as LaTex or EQN) sometimes advocate\
    \ just including source files of\n    that system in messages, but this may not\
    \ be a good long-term\n    solution.  With the new NSF community coming on line\
    \ in the near\n    future, I feel the time is now right to try to define a standard\n\
    \    which will meet the present and future needs of the user community.\n   \
    \ Such a standard should allow the interchange of equations via\n    electronic\
    \ mail as well as be compatible with as many existing\n    systems as possible.\
    \  It should be as general as possible, but still\n    efficiently represent those\
    \ aspects of equations which are most\n    commonly used.  One point to be kept\
    \ in mind is that most equations\n    typesetting is currently being done by secretaries\
    \ and professional\n    typesetters who do not know what the equations mean, only\
    \ what they\n    look like.  Although this is mainly a user interface consideration,\n\
    \    any proposed standard must not require the user to understand an\n    equation\
    \ in order to type it in.  We are not interested here in\n    representing mathematics,\
    \ only displayed equations.\n    In this memo, I will try to raise issues that\
    \ will need to be\n    considered in defining such a standard and to get a handle\
    \ on what\n    it is that needs to be represented.  Hopefully, this  will form\
    \ the\n    basis of a discussion leading eventually to a definition.  Before\n\
    \    examining what it is that could be or should be represented in the\n    standard,\
    \ we will first review the characteristics of some existing\n    systems.\n"
- title: 2.  Existing Systems
  contents:
  - "2.  Existing Systems\n    There currently exist many incompatible systems which\
    \ can handle\n    equations to a certain extent. Most of these are extensions\
    \ to text\n    formatting systems to allow the inclusion of equations.  As such,\n\
    \    general representation and standards considerations were not a major\n  \
    \  concern when these systems were initially designed.  We will examine\n    the\
    \ three main types of systems: Directive systems, Symbolic\n    Language systems,\
    \ and Full Display systems.\n    Some text editing facilities simply allow an\
    \ expanded font set which\n    includes those symbols typically used in mathematics.\
    \  I do not\n    consider these systems as truly able to handle equations since\
    \ much\n    of mathematics cannot be represented.  It takes more than the Greek\n\
    \    alphabet and an integral and square root symbol to make an equations\n  \
    \  system.\n    Directive systems are those which represent equations and formating\n\
    \    information in terms of directives embedded in the text.  LaTex and\n   \
    \ EQN are two examples.  LaTex is a more friendly version of Knuth's\n    Tex\
    \ system, while EQN is a preprocessor for Troff, a document\n    preparation system\
    \ available under Unix.\n    With these Directive systems, it is usually necessary\
    \ to actually\n    print out the document to see what the equations and formatted\
    \ text\n    will look like, although there are on-screen previewers which run\
    \ on\n    workstations such as the Sun.  Directive systems have the advantage\n\
    \    that the source files are just text and can be edited with standard\n   \
    \ text editors (such as Emacs) and transferred as text in standard\n    electronic\
    \ messages (a big advantage considering existing mail\n    interconnectivity of\
    \ the various user communities).  Also, it is\n    relatively easy to make global\
    \ changes with the help of your\n    favorite text editor (for example, to change\
    \ all Greek letter\n    alpha's to beta's or all integrals to summation signs\
    \ in a document.\n    This is generally impossible with the other types of systems\n\
    \    described below).\n    The primary disadvantage of these systems is that\
    \ writing an\n    equation corresponds to writing a portion of a computer program.\n\
    \    The equations are sometimes hard to read, generally hard to edit,\n    and\
    \ one may make syntax errors which are hard to identify.  Also,\n    people who\
    \ are not used to programming, and typesetters who do not\n    actually know what\
    \ an equation means, only what it should look like,\n    find specifying an equation\
    \ in this language very difficult and may\n    not be willing to put up with it.\n\
    \    Full Display Systems are those such as Xerox STAR and VIEWPOINT.\n    The\
    \ user enters an equation using the keyboard and sees exactly that\n    equation\
    \ displayed as it is typed.  At all times, what is displayed\n    is exactly how\
    \ things will look when it is printed out.\n    Unfortunately, VIEWPOINT does\
    \ not allow the user to place any symbol\n    anywhere on the page.  There are\
    \ many things (such as putting dots\n    on indices) which are not possible. \
    \ For those things which are\n    implemented, it works rather nicely.\n    Hockney's\
    \ Egg is a display system which was developed at the UCLA\n    Physics Department\
    \ and runs on the IBM PC.  It has the advantage of\n    being able to put any\
    \ character of any font anywhere on the screen,\n    thus allowing not only equations,\
    \ but things like chemical diagrams.\n    Interleaf's Workstation Publishing Software\
    \ system is not strictly\n    speaking an equations system, but equations may\
    \ be entered via a cut\n    and paste method.  At all times, what one sees is\
    \ what will be\n    printed out and one may put any symbol anywhere on the page.\
    \  The\n    problem with this system is that one HAS TO put everything in a\n\
    \    certain place.  It sometimes takes an enormous amount of work to get\n  \
    \  things to be positioned correctly and to look nice.\n    Generally, Full Display\
    \ Systems are specific to a particular piece\n    of hardware and the internal\
    \ representation of the equations is not\n    only hidden from the user, but is\
    \ in many cases proprietary.\n    Symbolic Language systems, such as Macsyma and\
    \ Reduce, also allow\n    the entry of equations.  These are in the form of program\
    \ function\n    calls.  These are systems that actually know some mathematics.\
    \  One\n    can only enter the particular type of mathematics that the system\n\
    \    knows.\n    We next will look at what should be represented in an equations\n\
    \    system.  We will want a representation standard general enough to\n    allow\
    \ (almost) anything which comes up to be represented, but does\n    not require\
    \ vast amounts of storage.\n"
- title: 3.  What Could be Represented?
  contents:
  - "3.  What Could be Represented?\n    We will first examine what it is that could\
    \ be represented.  At the\n    most primative level, one could simply store a\
    \ bitmap of each\n    printed equation (expensive in terms of storage).  At the\
    \ other end\n    of the spectrum, one could represent the actual mathematical\n\
    \    information that the equation itself represents (as in the input to\n   \
    \ Macsyma).  In between, one could represent the mathematical symbols\n    and\
    \ where they are, or represent a standard set of mathematical\n    notation, as\
    \ in EQN.\n    It is useful to think of an analogy with printed text.  Suppose\
    \ we\n    have text printed in a certain font.  How could it be represented?\n\
    \    Well, we could store a bitmap of the printed text, store characters\n   \
    \ and fonts, store words, or at the most abstract, we could store the\n    meaning\
    \ behind the words.\n    What we actually do, of course, is store characters (in\
    \ ordinary\n    text) and sometimes fonts (in text intended to be printed).  We\
    \ do\n    not attempt to represent the meaning of words, or even represent the\n\
    \    notion of a word.  We generally only have characters, separated by\n    spaces\
    \ or carriage returns (which are also characters).  Even when\n    we specify\
    \ fonts, if a slightly different one happened to be printed\n    out it would\
    \ not matter greatly.\n    Equations may be considered an extension of ordinary\
    \ text, together\n    with particular fonts.  However, the choice of font may\
    \ be extremely\n    important.  If the wrong font happens to be printed out, the\
    \ meaning\n    of the equation may be completely changed.  There are also items,\n\
    \    such as growing parentheses, fractions, and matrices, which are\n    particular\
    \ to equations.\n    We are not interested in representing the meaning of an equation,\n\
    \    even if we knew how to in general, but in representing a picture of\n   \
    \ the equation.  Thus, we will not further consider the types of\n    representations\
    \ made in the Symbolic Language systems.  We still\n    have Directive systems\
    \ and the Full Display systems.  We shall\n    assume that both of these will\
    \ continue to exist and that the\n    defined standard should be able to deal\
    \ with existing systems of\n    either type.\n    Assuming we do not want to just\
    \ store a bitmap of the equation\n    (which would not allow any easy editing\
    \ or interfacing with existing\n    systems), we are now left with the following\
    \ possibilities:\n         1.   Store characters, fonts and positions only.  Allow\n\
    \              anything to be anywhere (this is what Interleaf does).\n      \
    \   2.   Store characters, fonts, and positions, but only allow\n            \
    \  discrete positions.  This makes it easier to place\n              subscripts\
    \ and superscripts correctly (this is what\n              Hockney's Egg does).\n\
    \         3.   Use a language similar to EQN or LaTex, which has ideas\n     \
    \         such as subscripts, superscripts, fractions, and growing\n         \
    \     parentheses.  Generally positioning is done automatically\n            \
    \  when the typesetting occurs, but it is possible to do a\n              sort\
    \ of relative positioning of symbols with some work.\n         4.   Use a language\
    \ such as Troff or Tex, which is what EQN and\n              Latex is translated\
    \ into.\n         5.   Some combination of the above.\n    In the next section,\
    \ I will argue for a particular combination of\n    the above as a tentative choice.\
    \  It may turn out, with more\n    information and experience, that this choice\
    \ should be modified.\n"
- title: 4.  What I Think Should be Represented
  contents:
  - "4.  What I Think Should be Represented\n    Let us now take a stab at what sort\
    \ of standard we should have.\n    First of all, we would like our standard if\
    \ at all possible to be\n    compatible with all of the existing systems described\
    \ previously.\n    If the standard becomes widely accepted, it should be general\
    \ enough\n    not to constrain severely the design of new user interfaces.  Thus,\n\
    \    while we should provide for efficiently representing those aspects\n    of\
    \ equations which are commonly used (subscripts, parentheses, etc.)\n    we would\
    \ like extensions to be possible which enable the\n    representation of any symbol\
    \ anywhere.\n    We would like standard mathematical symbols, as well as all Greek\n\
    \    and Latin letters to be available.  We would also like any required\n   \
    \ typesetting knowledge to be in programs and not required of the\n    user.\n\
    \    I feel that the exact position of a subscript or superscript should\n   \
    \ not have to be specified by the user or be represented (unless the\n    user\
    \ specifically wants it to be).  It is nice to be able to place\n    any symbol\
    \ anywhere (and indeed the standard ought to allow for\n    this), but having\
    \ to do this for everything is not good.  The\n    standard should be able to\
    \ represent the idea of a subscript,\n    superscript, or growing fraction with\
    \ no more specification.\n    My suggestion, therefore, is for something like\
    \ EQN, but with\n    extensions to allow positioning of symbols in some kind of\
    \ absolute\n    coordinates as well as relative positioning (EQN does allow some\n\
    \    positioning relative to where the next symbol would normally go).\n    This\
    \ has the advantage that the representation is in ordinary text,\n    which can\
    \ be sent in messages, the Directive systems can map almost\n    directly into\
    \ it, and it should allow representation for Full\n    Display systems.  The ideas\
    \ of subscript and superscripts (without\n    having to specify a position), growing\
    \ parentheses, fractions, and\n    matrices, and special fonts are already there.\n\
    \    Most equations can be specified very compactly within EQN, and if\n    positioning\
    \ is provided as an extension, exceptions can be handled.\n    (The same could\
    \ be said for LaTex, however, I consider the syntax\n    there to be somewhat\
    \ unreadable and prefer EQN.  Essentially, either\n    will do).\n    User interfaces\
    \ should be able to be easily constructed which would\n    allow one to type in\
    \ an EQN style specification and have the\n    equation appear immediately on\
    \ the screen.  For non-specialists, it\n    may be better to use existing Full\
    \ Display systems which are then\n    translated in this EQN like standard (perhaps\
    \ using a lot of the\n    absolute positioning facility).\n"
- title: 5.  Conclusions
  contents:
  - "5.  Conclusions\n    In summary:\n       1.   A standard for the efficient representation\
    \ of mathematical\n            equations should be defined as soon as possible\
    \ in order to\n            allow the interchange of equations in documents and\
    \ mail\n            messages and the transfer of equations between various\n \
    \           existing internal representations.\n       2.   Most equations entry\
    \ is currently done by people who do not\n            know what the equations\
    \ mean, and are not programmers.  It\n            may be that the optimal user\
    \ interface for these people is\n            different than for those who do know\
    \ mathematics and/or are\n            programmers.  An equations standard should\
    \ not preclude\n            this.\n       3.   The standard should easily handle\
    \ those aspects of equations\n            which are common, such as the set of\
    \ things provided in EQN.\n       4.   It should also be possible, however, to\
    \ place any defined\n            symbol anywhere and the standard should allow\
    \ this type of\n            specification when needed.\n       5.   As many of\
    \ the existing systems (all of them if possible)\n            should be able to\
    \ be translated into the standard.\n       6.   The standard should not make requirements\
    \ on the user\n            interface such that the user must have much typesetting\n\
    \            knowledge.  This knowledge should be in the user interface\n    \
    \        or printing routines.\n       7.   Full Display systems may be best for\
    \ non-specialists and for\n            non-programmers.  Directive systems, perhaps\
    \ with the\n            ability to preview the final equation on one's screen,\
    \ may\n            be best for the rest.\n       8.   A distinction should be\
    \ made between the representation of\n            an equation (which we are dealing\
    \ with here) and the\n            mathematical knowledge it represents.\n    I\
    \ suggest something like EQN as a standard with extensions to allow\n    positioning\
    \ of symbols in some kind of absolute coordinates as well\n    as relative positioning.\
    \  This has the advantage that the\n    representation is in ordinary text, which\
    \ can be sent in messages,\n    the Directive systems can map almost directly\
    \ into it, and it should\n    allow representation for Full Display systems. \
    \ The ideas of\n    subscript and superscripts (without having to specify a position),\n\
    \    growing parentheses, fractions, and matrices, and special fonts are\n   \
    \ already there.\n"
