- contents:
  - '              A Protocol for Remotely Managing Sieve Scripts

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Sieve scripts allow users to filter incoming email.  Message stores\n
    \  are commonly sealed servers so users cannot log into them, yet users\n   must
    be able to update their scripts on them.  This document\n   describes a protocol
    \"ManageSieve\" for securely managing Sieve\n   scripts on a remote server.  This
    protocol allows a user to have\n   multiple scripts, and also alerts a user to
    syntactically flawed\n   scripts.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5804.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Commands and Responses .....................................3\n      1.2.
    Syntax .....................................................3\n      1.3. Response
    Codes .............................................3\n      1.4. Active Script
    ..............................................6\n      1.5. Quotas .....................................................6\n
    \     1.6. Script Names ...............................................6\n      1.7.
    Capabilities ...............................................7\n      1.8. Transport
    ..................................................9\n      1.9. Conventions Used
    in This Document .........................10\n   2. Commands .......................................................10\n
    \     2.1. AUTHENTICATE Command ......................................11\n           2.1.1.
    Use of SASL PLAIN Mechanism over TLS ...............16\n      2.2. STARTTLS Command
    ..........................................16\n           2.2.1. Server Identity
    Check ..............................17\n      2.3. LOGOUT Command ............................................20\n
    \     2.4. CAPABILITY Command ........................................20\n      2.5.
    HAVESPACE Command .........................................20\n      2.6. PUTSCRIPT
    Command .........................................21\n      2.7. LISTSCRIPTS Command
    .......................................23\n      2.8. SETACTIVE Command .........................................24\n
    \     2.9. GETSCRIPT Command .........................................25\n      2.10.
    DELETESCRIPT Command .....................................25\n      2.11. RENAMESCRIPT
    Command .....................................26\n      2.12. CHECKSCRIPT Command
    ......................................27\n      2.13. NOOP Command .............................................28\n
    \     2.14. Recommended Extensions ...................................28\n           2.14.1.
    UNAUTHENTICATE Command ............................28\n   3. Sieve URL Scheme
    ...............................................29\n   4. Formal Syntax ..................................................31\n
    \  5. Security Considerations ........................................37\n   6.
    IANA Considerations ............................................38\n      6.1.
    ManageSieve Capability Registration Template ..............39\n      6.2. Registration
    of Initial ManageSieve Capabilities ..........39\n      6.3. ManageSieve Response
    Code Registration Template ...........41\n      6.4. Registration of Initial ManageSieve
    Response Codes ........41\n   7. Internationalization Considerations ............................46\n
    \  8. Acknowledgements ...............................................46\n   9.
    References .....................................................47\n      9.1.
    Normative References ......................................47\n      9.2. Informative
    References ....................................48\n"
  title: Table of Contents
- contents:
  - '1.  Introduction

    '
  - contents:
    - "1.1.  Commands and Responses\n   A ManageSieve connection consists of the establishment
      of a client/\n   server network connection, an initial greeting from the server,
      and\n   client/server interactions.  These client/server interactions consist\n
      \  of a client command, server data, and a server completion result\n   response.\n
      \  All interactions transmitted by client and server are in the form of\n   lines,
      that is, strings that end with a CRLF.  The protocol receiver\n   of a ManageSieve
      client or server is either reading a line or reading\n   a sequence of octets
      with a known count followed by a line.\n"
    title: 1.1.  Commands and Responses
  - contents:
    - "1.2.  Syntax\n   ManageSieve is a line-oriented protocol much like [IMAP] or
      [ACAP],\n   which runs over TCP.  There are three data types: atoms, numbers
      and\n   strings.  Strings may be quoted or literal.  See [ACAP] for detailed\n
      \  descriptions of these types.\n   Each command consists of an atom (the command
      name) followed by zero\n   or more strings and numbers terminated by CRLF.\n
      \  All client queries are replied to with either an OK, NO, or BYE\n   response.
      \ Each response may be followed by a response code (see\n   Section 1.3) and
      by a string consisting of human-readable text in the\n   local language (as
      returned by the LANGUAGE capability; see\n   Section 1.7), encoded in UTF-8
      [UTF-8].  The contents of the string\n   SHOULD be shown to the user ,and implementations
      MUST NOT attempt to\n   parse the message for meaning.\n   The BYE response
      SHOULD be used if the server wishes to close the\n   connection.  A server may
      wish to do this because the client was idle\n   for too long or there were too
      many failed authentication attempts.\n   This response can be issued at any
      time and should be immediately\n   followed by a server hang-up of the connection.
      \ If a server has an\n   inactivity timeout resulting in client autologout,
      it MUST be no less\n   than 30 minutes after successful authentication.  The
      inactivity\n   timeout MAY be less before authentication.\n"
    title: 1.2.  Syntax
  - contents:
    - "1.3.  Response Codes\n   An OK, NO, or BYE response from the server MAY contain
      a response\n   code to describe the event in a more detailed machine-parsable\n
      \  fashion.  A response code consists of data inside parentheses in the\n   form
      of an atom, possibly followed by a space and arguments.\n   Response codes are
      defined when there is a specific action that a\n   client can take based upon
      the additional information.  In order to\n   support future extension, the response
      code is represented as a\n   slash-separated (Solidus, %x2F) hierarchy with
      each level of\n   hierarchy representing increasing detail about the error.
      \ Response\n   codes MUST NOT start with the Solidus character.  Clients MUST\n
      \  tolerate additional hierarchical response code detail that they don't\n   understand.
      \ For example, if the client supports the \"QUOTA\" response\n   code, but doesn't
      understand the \"QUOTA/MAXSCRIPTS\" response code, it\n   should treat \"QUOTA/MAXSCRIPTS\"
      as \"QUOTA\".\n   Client implementations MUST tolerate (ignore) response codes
      that\n   they do not recognize.\n   The currently defined response codes are
      the following:\n   AUTH-TOO-WEAK\n   This response code is returned in the NO
      or BYE response from an\n   AUTHENTICATE command.  It indicates that site security
      policy forbids\n   the use of the requested mechanism for the specified authentication\n
      \  identity.\n   ENCRYPT-NEEDED\n   This response code is returned in the NO
      or BYE response from an\n   AUTHENTICATE command.  It indicates that site security
      policy\n   requires the use of a strong encryption mechanism for the specified\n
      \  authentication identity and mechanism.\n   QUOTA\n   If this response code
      is returned in the NO/BYE response, it means\n   that the command would have
      placed the user above the site-defined\n   quota constraints.  If this response
      code is returned in the OK\n   response, it can mean that the user's storage
      is near its quota, or\n   it can mean that the account exceeded its quota but
      that the\n   condition is being allowed by the server (the server supports\n
      \  so-called soft quotas).  The QUOTA response code has two more\n   detailed
      variants: \"QUOTA/MAXSCRIPTS\" (the maximum number of per-user\n   scripts)
      and \"QUOTA/MAXSIZE\" (the maximum script size).\n   REFERRAL\n   This response
      code may be returned with a BYE result from any\n   command, and includes a
      mandatory parameter that indicates what\n   server to access to manage this
      user's Sieve scripts.  The server\n   will be specified by a Sieve URL (see
      Section 3).  The scriptname\n   portion of the URL MUST NOT be specified.  The
      client should\n   authenticate to the specified server and use it for all further\n
      \  commands in the current session.\n   SASL\n   This response code can occur
      in the OK response to a successful\n   AUTHENTICATE command and includes the
      optional final server response\n   data from the server as specified by [SASL].\n
      \  TRANSITION-NEEDED\n   This response code occurs in a NO response of an AUTHENTICATE\n
      \  command.  It indicates that the user name is valid, but the entry in\n   the
      authentication database needs to be updated in order to permit\n   authentication
      with the specified mechanism.  This is typically done\n   by establishing a
      secure channel using TLS, verifying server identity\n   as specified in Section
      2.2.1, and finally authenticating once using\n   the [PLAIN] authentication
      mechanism.  The selected mechanism SHOULD\n   then work for authentications
      in subsequent sessions.\n   This condition can happen if a user has an entry
      in a system\n   authentication database such as Unix /etc/passwd, but does not
      have\n   credentials suitable for use by the specified mechanism.\n   TRYLATER\n
      \  A command failed due to a temporary server failure.  The client MAY\n   continue
      using local information and try the command later.  This\n   response code only
      makes sense when returned in a NO/BYE response.\n   ACTIVE\n   A command failed
      because it is not allowed on the active script, for\n   example, DELETESCRIPT
      on the active script.  This response code only\n   makes sense when returned
      in a NO/BYE response.\n   NONEXISTENT\n   A command failed because the referenced
      script name doesn't exist.\n   This response code only makes sense when returned
      in a NO/BYE\n   response.\n   ALREADYEXISTS\n   A command failed because the
      referenced script name already exists.\n   This response code only makes sense
      when returned in a NO/BYE\n   response.\n   TAG\n   This response code name
      is followed by a string specified in the\n   command.  See Section 2.13 for
      a possible use case.\n   WARNINGS\n   This response code MAY be returned by
      the server in the OK response\n   (but it might be returned with the NO/BYE
      response as well) and\n   signals the client that even though the script is
      syntactically\n   valid, it might contain errors not intended by the script
      writer.\n   This response code is typically returned in response to PUTSCRIPT\n
      \  and/or CHECKSCRIPT commands.  A client seeing such response code\n   SHOULD
      present the returned warning text to the user.\n"
    title: 1.3.  Response Codes
  - contents:
    - "1.4.  Active Script\n   A user may have multiple Sieve scripts on the server,
      yet only one\n   script may be used for filtering of incoming messages.  This
      is the\n   active script.  Users may have zero or one active script and MUST
      use\n   the SETACTIVE command described below for changing the active script\n
      \  or disabling Sieve processing.  For example, users may have an\n   everyday
      script they normally use and a special script they use when\n   they go on vacation.
      \ Users can change which script is being used\n   without having to download
      and upload a script stored somewhere else.\n"
    title: 1.4.  Active Script
  - contents:
    - "1.5.  Quotas\n   Servers SHOULD impose quotas to prevent malicious users from\n
      \  overflowing available storage.  If a command would place a user over\n   a
      quota setting, servers that impose such quotas MUST reply with a NO\n   response
      containing the QUOTA response code.  Client implementations\n   MUST be able
      to handle commands failing because of quota\n   restrictions.\n"
    title: 1.5.  Quotas
  - contents:
    - "1.6.  Script Names\n   A Sieve script name is a sequence of Unicode characters
      encoded in\n   UTF-8 [UTF-8].  A script name MUST comply with Net-Unicode Definition\n
      \  (Section 2 of [NET-UNICODE]), with the additional restriction of\n   prohibiting
      the following Unicode characters:\n   o  0000-001F; [CONTROL CHARACTERS]\n   o
      \ 007F; DELETE\n   o  0080-009F; [CONTROL CHARACTERS]\n   o  2028; LINE SEPARATOR\n
      \  o  2029; PARAGRAPH SEPARATOR\n   Sieve script names MUST be at least one
      octet (and hence Unicode\n   character) long.  Zero octets script name has a
      special meaning (see\n   Section 2.8).  Servers MUST allow names of up to 128
      Unicode\n   characters in length (which can take up to 512 bytes when encoded
      in\n   UTF-8, not counting the terminating NUL), and MAY allow longer names.\n
      \  A server that receives a script name longer than its internal limit\n   MUST
      reject the corresponding operation, in particular it MUST NOT\n   truncate the
      script name.\n"
    title: 1.6.  Script Names
  - contents:
    - "1.7.  Capabilities\n   Server capabilities are sent automatically by the server
      upon a\n   client connection, or after successful STARTTLS and AUTHENTICATE\n
      \  (which establishes a Simple Authentication and Security Layer (SASL))\n   commands.
      \ Capabilities may change immediately after a successfully\n   completed STARTTLS
      command, and/or immediately after a successfully\n   completed AUTHENTICATE
      command, and/or after a successfully completed\n   UNAUTHENTICATE command (see
      Section 2.14.1).  Capabilities MUST\n   remain static at all other times.\n
      \  Clients MAY request the capabilities at a later time by issuing the\n   CAPABILITY
      command described later.  The capabilities consist of a\n   series of lines
      each with one or two strings.  The first string is\n   the name of the capability,
      which is case-insensitive.  The second\n   optional string is the value associated
      with that capability.  Order\n   of capabilities is arbitrary, but each capability
      name can appear at\n   most once.\n   The following capabilities are defined
      in this document:\n   IMPLEMENTATION - Name of implementation and version.  This
      capability\n   MUST always be returned by the server.\n   SASL - List of SASL
      mechanisms supported by the server, each\n   separated by a space.  This list
      can be empty if and only if STARTTLS\n   is also advertised.  This means that
      the client must negotiate TLS\n   encryption with STARTTLS first, at which point
      the SASL capability\n   will list a non-empty list of SASL mechanisms.\n   SIEVE
      - List of space-separated Sieve extensions (as listed in Sieve\n   \"require\"
      action [SIEVE]) supported by the Sieve engine.  This\n   capability MUST always
      be returned by the server.\n   STARTTLS - If TLS [TLS] is supported by this
      implementation.  Before\n   advertising this capability a server MUST verify
      to the best of its\n   ability that TLS can be successfully negotiated by a
      client with\n   common cipher suites.  Specifically, a server should verify
      that a\n   server certificate has been installed and that the TLS subsystem
      has\n   successfully initialized.  This capability SHOULD NOT be advertised\n
      \  once STARTTLS or AUTHENTICATE command completes successfully.  Client\n   and
      server implementations MUST implement the STARTTLS extension.\n   MAXREDIRECTS
      - Specifies the limit on the number of Sieve \"redirect\"\n   actions a script
      can perform during a single evaluation.  Note that\n   this is different from
      the total number of \"redirect\" actions a\n   script can contain.  The value
      is a non-negative number represented\n   as a ManageSieve string.\n   NOTIFY
      - A space-separated list of URI schema parts for supported\n   notification
      methods.  This capability MUST be specified if the Sieve\n   implementation
      supports the \"enotify\" extension [NOTIFY].\n   LANGUAGE - The language (<Language-Tag>
      from [RFC5646]) currently\n   used for human-readable error messages.  If this
      capability is not\n   returned, the \"i-default\" [RFC2277] language is assumed.
      \ Note that\n   the current language MAY be per-user configurable (i.e., it
      MAY\n   change after authentication).\n   OWNER - The canonical name of the
      logged-in user (SASL \"authorization\n   identity\") encoded in UTF-8.  This
      capability MUST NOT be returned in\n   unauthenticated state and SHOULD be returned
      once the AUTHENTICATE\n   command succeeds.\n   VERSION - This capability MUST
      be returned by servers compliant with\n   this document or its successor.  For
      servers compliant with this\n   document, the capability value is the string
      \"1.0\".  Lack of this\n   capability means that the server predates this specification
      and thus\n   doesn't support the following commands: RENAMESCRIPT, CHECKSCRIPT,\n
      \  and NOOP.\n   Section 2.14 defines some additional ManageSieve extensions
      and their\n   respective capabilities.\n   A server implementation MUST return
      SIEVE, IMPLEMENTATION, and\n   VERSION capabilities.\n   A client implementation
      MUST ignore any listed capabilities that it\n   does not understand.\n       Example:\n
      \      S: \"IMPlemENTATION\" \"Example1 ManageSieved v001\"\n       S: \"SASl\"
      \"DIGEST-MD5 GSSAPI\"\n       S: \"SIeVE\" \"fileinto vacation\"\n       S:
      \"StaRTTLS\"\n       S: \"NOTIFY\" \"xmpp mailto\"\n       S: \"MAXREdIRECTS\"
      \"5\"\n       S: \"VERSION\" \"1.0\"\n       S: OK\n   After successful authentication,
      this might look like this:\n       Example:\n       S: \"IMPlemENTATION\" \"Example1
      ManageSieved v001\"\n       S: \"SASl\" \"DIGEST-MD5 GSSAPI\"\n       S: \"SIeVE\"
      \"fileinto vacation\"\n       S: \"NOTIFY\" \"xmpp mailto\"\n       S: \"OWNER\"
      \"alexey@example.com\"\n       S: \"MAXREdIRECTS\" \"5\"\n       S: \"VERSION\"
      \"1.0\"\n       S: OK\n"
    title: 1.7.  Capabilities
  - contents:
    - "1.8.  Transport\n   The ManageSieve protocol assumes a reliable data stream
      such as that\n   provided by TCP.  When TCP is used, a ManageSieve server typically\n
      \  listens on port 4190.\n   Before opening the TCP connection, the ManageSieve
      client first MUST\n   resolve the Domain Name System (DNS) hostname associated
      with the\n   receiving entity and determine the appropriate TCP port for\n   communication
      with the receiving entity.  The process is as follows:\n   1.  Attempt to resolve
      the hostname using a [DNS-SRV] Service of\n       \"sieve\" and a Proto of \"tcp\"
      for the target domain (e.g.,\n       \"example.net\"), resulting in resource
      records such as\n       \"_sieve._tcp.example.net.\".  The result of the SRV
      lookup, if\n       successful, will be one or more combinations of a port and\n
      \      hostname; the ManageSieve client MUST resolve the returned\n       hostnames
      to IPv4/IPv6 addresses according to returned SRV record\n       weight.  IP
      addresses from the first successfully resolved\n       hostname (with the corresponding
      port number returned by SRV\n       lookup) are used to connect to the server.
      \ If connection using\n       one of the IP addresses fails, the next resolved
      IP address is\n       used to connect.  If connection to all resolved IP addresses\n
      \      fails, then the resolution/connect is repeated for the next\n       hostname
      returned by SRV lookup.\n   2.  If the SRV lookup fails, the fallback SHOULD
      be a normal IPv4 or\n       IPv6 address record resolution to determine the
      IP address, where\n       the port used is the default ManageSieve port of 4190.\n"
    title: 1.8.  Transport
  - contents:
    - "1.9.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in [KEYWORDS].\n   In examples, \"C:\" and \"S:\" indicate lines
      sent by the client and\n   server respectively.  Line breaks that do not start
      a new \"C:\" or\n   \"S:\" exist for editorial reasons.\n   Examples of authentication
      in this document are using DIGEST-MD5\n   [DIGEST-MD5] and GSSAPI [GSSAPI] SASL
      mechanisms.\n"
    title: 1.9.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  Commands\n   This section and its subsections describe valid ManageSieve
    commands.\n   Upon initial connection to the server, the client's session is in\n
    \  non-authenticated state.  Prior to successful authentication, only\n   the
    AUTHENTICATE, CAPABILITY, STARTTLS, LOGOUT, and NOOP (see Section\n   2.13) commands
    are valid.  ManageSieve extensions MAY define other\n   commands that are valid
    in non-authenticated state.  Servers MUST\n   reject all other commands with a
    NO response.  Clients may pipeline\n   commands (send more than one command at
    a time without waiting for\n   completion of the first command).  However, a group
    of commands sent\n   together MUST NOT have an AUTHENTICATE (*), a STARTTLS, or
    a\n   HAVESPACE command anywhere but the last command in the list.\n   (*) - The
    only exception to this rule is when the AUTHENTICATE\n   command contains an initial
    response for a SASL mechanism that allows\n   clients to send data first, the
    mechanism is known to complete in one\n   round trip, and the mechanism doesn't
    negotiate a SASL security\n   layer.  Two examples of such SASL mechanisms are
    PLAIN [PLAIN] and\n   EXTERNAL [SASL].\n"
  - contents:
    - "2.1.  AUTHENTICATE Command\n   Arguments:  String - mechanism\n               String
      - initial data (optional)\n   The AUTHENTICATE command indicates a SASL [SASL]
      authentication\n   mechanism to the server.  If the server supports the requested\n
      \  authentication mechanism, it performs an authentication protocol\n   exchange
      to identify and authenticate the user.  Optionally, it also\n   negotiates a
      security layer for subsequent protocol interactions.  If\n   the requested authentication
      mechanism is not supported, the server\n   rejects the AUTHENTICATE command
      by sending the NO response.\n   The authentication protocol exchange consists
      of a series of server\n   challenges and client responses that are specific
      to the selected\n   authentication mechanism.  A server challenge consists of
      a string\n   (quoted or literal) followed by a CRLF.  The contents of the string\n
      \  is a base-64 encoding [BASE64] of the SASL data.  A client response\n   consists
      of a string (quoted or literal) with the base-64 encoding of\n   the SASL data
      followed by a CRLF.  If the client wishes to cancel the\n   authentication exchange,
      it issues a string containing a single \"*\".\n   If the server receives such
      a response, it MUST reject the\n   AUTHENTICATE command by sending a NO reply.\n
      \  Note that an empty challenge/response is sent as an empty string.  If\n   the
      mechanism dictates that the final response is sent by the server,\n   this data
      MAY be placed within the data portion of the SASL response\n   code to save
      a round trip.\n   The optional initial-response argument to the AUTHENTICATE
      command is\n   used to save a round trip when using authentication mechanisms
      that\n   are defined to send no data in the initial challenge.  When the\n   initial-response
      argument is used with such a mechanism, the initial\n   empty challenge is not
      sent to the client and the server uses the\n   data in the initial-response
      argument as if it were sent in response\n   to the empty challenge.  If the
      initial-response argument to the\n   AUTHENTICATE command is used with a mechanism
      that sends data in the\n   initial challenge, the server MUST reject the AUTHENTICATE
      command by\n   sending the NO response.\n   The service name specified by this
      protocol's profile of SASL is\n   \"sieve\".\n   Reauthentication is not supported
      by ManageSieve protocol's profile\n   of SASL.  That is, after a successfully
      completed AUTHENTICATE\n   command, no more AUTHENTICATE commands may be issued
      in the same\n   session.  After a successful AUTHENTICATE command completes,
      a server\n   MUST reject any further AUTHENTICATE commands with a NO reply.\n
      \  However, note that a server may implement the UNAUTHENTICATE\n   extension
      described in Section 2.14.1.\n   If a security layer is negotiated through the
      SASL authentication\n   exchange, it takes effect immediately following the
      CRLF that\n   concludes the successful authentication exchange for the client,
      and\n   the CRLF of the OK response for the server.\n   When a security layer
      takes effect, the ManageSieve protocol is reset\n   to the initial state (the
      state in ManageSieve after a client has\n   connected to the server).  The server
      MUST discard any knowledge\n   obtained from the client that was not obtained
      from the SASL (or TLS)\n   negotiation itself.  Likewise, the client MUST discard
      any knowledge\n   obtained from the server, such as the list of ManageSieve
      extensions,\n   that was not obtained from the SASL (and/or TLS) negotiation
      itself.\n   (Note that a client MAY compare the advertised SASL mechanisms before\n
      \  and after authentication in order to detect an active down-\n   negotiation
      attack.  See below.)\n   Once a SASL security layer is established, the server
      MUST re-issue\n   the capability results, followed by an OK response.  This
      is\n   necessary to protect against man-in-the-middle attacks that alter the\n
      \  capabilities list prior to SASL negotiation.  The capability results\n   MUST
      include all SASL mechanisms the server was capable of\n   negotiating with that
      client.  This is done in order to allow the\n   client to detect an active down-negotiation
      attack.  If a user-\n   oriented client detects such a down-negotiation attack,
      it SHOULD\n   either notify the user (it MAY give the user the opportunity to\n
      \  continue with the ManageSieve session in this case) or close the\n   transport
      connection and indicate that a down-negotiation attack\n   might be in progress.
      \ If an automated client detects a down-\n   negotiation attack, it SHOULD return
      or log an error indicating that\n   a possible attack might be in progress and/or
      SHOULD close the\n   transport connection.\n   When both [TLS] and SASL security
      layers are in effect, the TLS\n   encoding MUST be applied (when sending data)
      after the SASL encoding.\n   Server implementations SHOULD support SASL proxy
      authentication so\n   that an administrator can administer a user's scripts.
      \ Proxy\n   authentication is when a user authenticates as herself/himself but\n
      \  requests the server to act (authorize) as another user.\n   The authorization
      identity generated by this [SASL] exchange is a\n   \"simple username\" (in
      the sense defined in [SASLprep]), and both\n   client and server MUST use the
      [SASLprep] profile of the [StringPrep]\n   algorithm to prepare these names
      for transmission or comparison.  If\n   preparation of the authorization identity
      fails or results in an\n   empty string (unless it was transmitted as the empty
      string), the\n   server MUST fail the authentication.\n   If an AUTHENTICATE
      command fails with a NO response, the client MAY\n   try another authentication
      mechanism by issuing another AUTHENTICATE\n   command.  In other words, the
      client may request authentication types\n   in decreasing order of preference.\n
      \  Note that a failed (NO) response to the AUTHENTICATE command may\n   contain
      one of the following response codes: AUTH-TOO-WEAK, ENCRYPT-\n   NEEDED, or
      TRANSITION-NEEDED.  See Section 1.3 for detailed\n   description of the relevant
      conditions.\n   To ensure interoperability, both client and server implementations
      of\n   the ManageSieve protocol MUST implement the SCRAM-SHA-1 [SCRAM] SASL\n
      \  mechanism, as well as [PLAIN] over [TLS].\n   Note: use of PLAIN over TLS
      reflects current use of PLAIN over TLS in\n   other email-related protocols;
      however, a longer-term goal is to\n   migrate email-related protocols from using
      PLAIN over TLS to SCRAM-\n   SHA-1 mechanism.\n   Examples (Note that long lines
      are folded for readability and are not\n   part of protocol exchange):\n       S:
      \"IMPLEMENTATION\" \"Example1 ManageSieved v001\"\n       S: \"SASL\" \"DIGEST-MD5
      GSSAPI\"\n       S: \"SIEVE\" \"fileinto vacation\"\n       S: \"STARTTLS\"\n
      \      S: \"VERSION\" \"1.0\"\n       S: OK\n       C: Authenticate \"DIGEST-MD5\"\n
      \      S: \"cmVhbG09ImVsd29vZC5pbm5vc29mdC5leGFtcGxlLmNvbSIsbm9uY2U9Ik\n          9BNk1HOXRFUUdtMmhoIixxb3A9ImF1dGgiLGFsZ29yaXRobT1tZDUtc2Vz\n
      \         cyxjaGFyc2V0PXV0Zi04\"\n       C: \"Y2hhcnNldD11dGYtOCx1c2VybmFtZT0iY2hyaXMiLHJlYWxtPSJlbHdvb2\n
      \         QuaW5ub3NvZnQuZXhhbXBsZS5jb20iLG5vbmNlPSJPQTZNRzl0RVFHbTJo\n          aCIsbmM9MDAwMDAwMDEsY25vbmNlPSJPQTZNSFhoNlZxVHJSayIsZGlnZX\n
      \         N0LXVyaT0ic2lldmUvZWx3b29kLmlubm9zb2Z0LmV4YW1wbGUuY29tIixy\n          ZXNwb25zZT1kMzg4ZGFkOTBkNGJiZDc2MGExNTIzMjFmMjE0M2FmNyxxb3\n
      \         A9YXV0aA==\"\n       S: OK (SASL \"cnNwYXV0aD1lYTQwZjYwMzM1YzQyN2I1NTI3Yjg0ZGJhYmNkZ\n
      \         mZmZA==\")\n   A slightly different variant of the same authentication
      exchange is:\n       S: \"IMPLEMENTATION\" \"Example1 ManageSieved v001\"\n
      \      S: \"SASL\" \"DIGEST-MD5 GSSAPI\"\n       S: \"SIEVE\" \"fileinto vacation\"\n
      \      S: \"VERSION\" \"1.0\"\n       S: \"STARTTLS\"\n       S: OK\n       C:
      Authenticate \"DIGEST-MD5\"\n       S: {136}\n       S: cmVhbG09ImVsd29vZC5pbm5vc29mdC5leGFtcGxlLmNvbSIsbm9uY2U9Ik\n
      \         9BNk1HOXRFUUdtMmhoIixxb3A9ImF1dGgiLGFsZ29yaXRobT1tZDUtc2Vz\n          cyxjaGFyc2V0PXV0Zi04\n
      \      C: {300+}\n       C: Y2hhcnNldD11dGYtOCx1c2VybmFtZT0iY2hyaXMiLHJlYWxtPSJlbHdvb2\n
      \         QuaW5ub3NvZnQuZXhhbXBsZS5jb20iLG5vbmNlPSJPQTZNRzl0RVFHbTJo\n          aCIsbmM9MDAwMDAwMDEsY25vbmNlPSJPQTZNSFhoNlZxVHJSayIsZGlnZX\n
      \         N0LXVyaT0ic2lldmUvZWx3b29kLmlubm9zb2Z0LmV4YW1wbGUuY29tIixy\n          ZXNwb25zZT1kMzg4ZGFkOTBkNGJiZDc2MGExNTIzMjFmMjE0M2FmNyxxb3\n
      \         A9YXV0aA==\n       S: {56}\n       S: cnNwYXV0aD1lYTQwZjYwMzM1YzQyN2I1NTI3Yjg0ZGJhYmNkZmZmZA==\n
      \      C: \"\"\n       S: OK\n   Another example demonstrating use of SASL PLAIN
      mechanism under TLS\n   follows.  This example also demonstrate use of SASL
      \"initial\n   response\" (the second parameter to the Authenticate command):\n
      \      S: \"IMPLEMENTATION\" \"Example1 ManageSieved v001\"\n       S: \"VERSION\"
      \"1.0\"\n       S: \"SASL\" \"\"\n       S: \"SIEVE\" \"fileinto vacation\"\n
      \      S: \"STARTTLS\"\n       S: OK\n       C: STARTTLS\n       S: OK\n       <TLS
      negotiation, further commands are under TLS layer>\n       S: \"IMPLEMENTATION\"
      \"Example1 ManageSieved v001\"\n       S: \"VERSION\" \"1.0\"\n       S: \"SASL\"
      \"PLAIN\"\n       S: \"SIEVE\" \"fileinto vacation\"\n       S: OK\n       C:
      Authenticate \"PLAIN\" \"QJIrweAPyo6Q1T9xu\"\n       S: NO\n       C: Authenticate
      \"PLAIN\" \"QJIrweAPyo6Q1T9xz\"\n       S: NO\n       C: Authenticate \"PLAIN\"
      \"QJIrweAPyo6Q1T9xy\"\n       S: BYE \"Too many failed authentication attempts\"\n
      \      <Server closes connection>\n   The following example demonstrates use
      of SASL \"initial response\".\n   It also demonstrates that an empty response
      can be sent as a literal\n   and that negotiating a SASL security layer results
      in the server\n   re-issuing server capabilities:\n       C: AUTHENTICATE \"GSSAPI\"
      {1488+}\n       C: YIIE[...1480 octets here ...]dA==\n       S: {208}\n       S:
      YIGZBgkqhkiG9xIBAgICAG+BiTCBhqADAgEFoQMCAQ+iejB4oAMCARKic\n          [...114
      octets here ...]\n          /yzpAy9p+Y0LanLskOTvMc0MnjgAa4YEr3eJ6\n       C:
      {0+}\n       C:\n       S: {44}\n       S: BQQF/wAMAAwAAAAAYRGFAo6W0vIHti8i1UXODgEAEAA=\n
      \      C: {44+}\n       C: BQQE/wAMAAwAAAAAIsT1iv9UkZApw471iXt6cwEAAAE=\n       S:
      OK\n       <Further commands/responses are under SASL security layer>\n       S:
      \"IMPLEMENTATION\" \"Example1 ManageSieved v001\"\n       S: \"VERSION\" \"1.0\"\n
      \      S: \"SASL\" \"PLAIN DIGEST-MD5 GSSAPI\"\n       S: \"SIEVE\" \"fileinto
      vacation\"\n       S: \"LANGUAGE\" \"ru\"\n       S: \"MAXREDIRECTS\" \"3\"\n
      \      S: ok\n"
    - contents:
      - "2.1.1.  Use of SASL PLAIN Mechanism over TLS\n   This section is normative
        for ManageSieve client implementations that\n   support SASL [PLAIN] over
        [TLS].\n   If a ManageSieve client is willing to use SASL PLAIN over TLS to\n
        \  authenticate to the ManageSieve server, the client MUST verify the\n   server
        identity (see Section 2.2.1).  If the server identity can't be\n   verified
        (e.g., the server has not provided any certificate, or if\n   the certificate
        verification fails), the client MUST NOT attempt to\n   authenticate using
        the SASL PLAIN mechanism.\n"
      title: 2.1.1.  Use of SASL PLAIN Mechanism over TLS
    title: 2.1.  AUTHENTICATE Command
  - contents:
    - "2.2.  STARTTLS Command\n   Support for STARTTLS command in servers is optional.
      \ Its\n   availability is advertised with \"STARTTLS\" capability as described
      in\n   Section 1.7.\n   The STARTTLS command requests commencement of a TLS
      [TLS]\n   negotiation.  The negotiation begins immediately after the CRLF in\n
      \  the OK response.  After a client issues a STARTTLS command, it MUST\n   NOT
      issue further commands until a server response is seen and the\n   TLS negotiation
      is complete.\n   The STARTTLS command is only valid in non-authenticated state.
      \ The\n   server remains in non-authenticated state, even if client credentials\n
      \  are supplied during the TLS negotiation.  The SASL [SASL] EXTERNAL\n   mechanism
      MAY be used to authenticate once TLS client credentials are\n   successfully
      exchanged, but servers supporting the STARTTLS command\n   are not required
      to support the EXTERNAL mechanism.\n   After the TLS layer is established, the
      server MUST re-issue the\n   capability results, followed by an OK response.
      \ This is necessary to\n   protect against man-in-the-middle attacks that alter
      the capabilities\n   list prior to STARTTLS.  This capability result MUST NOT
      include the\n   STARTTLS capability.\n   The client MUST discard cached capability
      information and replace it\n   with the new information.  The server MAY advertise
      different\n   capabilities after STARTTLS.\n       Example:\n       C: StartTls\n
      \      S: oK\n       <TLS negotiation, further commands are under TLS layer>\n
      \      S: \"IMPLEMENTATION\" \"Example1 ManageSieved v001\"\n       S: \"SASL\"
      \"PLAIN DIGEST-MD5 GSSAPI\"\n       S: \"SIEVE\" \"fileinto vacation\"\n       S:
      \"VERSION\" \"1.0\"\n       S: \"LANGUAGE\" \"fr\"\n       S: ok\n"
    - contents:
      - "2.2.1.  Server Identity Check\n   During the TLS negotiation, the ManageSieve
        client MUST check its\n   understanding of the server hostname/IP address
        against the server's\n   identity as presented in the server Certificate message,
        in order to\n   prevent man-in-the-middle attacks.  In this section, the client's\n
        \  understanding of the server's identity is called the \"reference\n   identity\".\n
        \  Checking is performed according to the following rules:\n   o  If the reference
        identity is a hostname:\n      1.  If a subjectAltName extension of the SRVName
        [X509-SRV],\n          dNSName [X509] (in that order of preference) type is
        present\n          in the server's certificate, then it SHOULD be used as
        the\n          source of the server's identity.  Matching is performed as\n
        \         described in Section 2.2.1.1, with the exception that no\n          wildcard
        matching is allowed for SRVName type.  If the\n          certificate contains
        multiple names (e.g., more than one\n          dNSName field), then a match
        with any one of the fields is\n          considered acceptable.\n      2.
        \ The client MAY use other types of subjectAltName for\n          performing
        comparison.\n      3.  The server's identity MAY also be verified by comparing
        the\n          reference identity to the Common Name (CN) [RFC4519] value
        in\n          the leaf Relative Distinguished Name (RDN) of the subjectName\n
        \         field of the server's certificate.  This comparison is\n          performed
        using the rules for comparison of DNS names in\n          Section 2.2.1.1,
        below.  Although the use of the Common Name\n          value is existing practice,
        it is deprecated, and\n          Certification Authorities are encouraged
        to provide\n          subjectAltName values instead.  Note that the TLS\n
        \         implementation may represent DNs in certificates according to\n
        \         X.500 or other conventions.  For example, some X.500\n          implementations
        order the RDNs in a DN using a left-to-right\n          (most significant
        to least significant) convention instead of\n          LDAP's right-to-left
        convention.\n   o  When the reference identity is an IP address, the iPAddress\n
        \     subjectAltName SHOULD be used by the client for comparison.  The\n      comparison
        is performed as described in Section 2.2.1.2.\n   If the server identity check
        fails, user-oriented clients SHOULD\n   either notify the user (clients MAY
        give the user the opportunity to\n   continue with the ManageSieve session
        in this case) or close the\n   transport connection and indicate that the
        server's identity is\n   suspect.  Automated clients SHOULD return or log
        an error indicating\n   that the server's identity is suspect and/or SHOULD
        close the\n   transport connection.  Automated clients MAY provide a configuration\n
        \  setting that disables this check, but MUST provide a setting that\n   enables
        it.\n   Beyond the server identity check described in this section, clients\n
        \  should be prepared to do further checking to ensure that the server\n   is
        authorized to provide the service it is requested to provide.  The\n   client
        may need to make use of local policy information in making\n   this determination.\n"
      - contents:
        - "2.2.1.1.  Comparison of DNS Names\n   If the reference identity is an internationalized
          domain name,\n   conforming implementations MUST convert it to the ASCII
          Compatible\n   Encoding (ACE) format as specified in Section 4 of RFC 3490
          [RFC3490]\n   before comparison with subjectAltName values of type dNSName.\n
          \  Specifically, conforming implementations MUST perform the conversion\n
          \  operation specified in Section 4 of [RFC3490] as follows:\n   o  in step
          1, the domain name SHALL be considered a \"stored string\";\n   o  in step
          3, set the flag called \"UseSTD3ASCIIRules\";\n   o  in step 4, process
          each label with the \"ToASCII\" operation; and\n   o  in step 5, change
          all label separators to U+002E (full stop).\n   After performing the \"to-ASCII\"
          conversion, the DNS labels and names\n   MUST be compared for equality according
          to the rules specified in\n   Section 3 of [RFC3490]; i.e., once all label
          separators are replaced\n   with U+002E (dot) they are compared in the case-insensitive
          manner.\n   The '*' (ASCII 42) wildcard character is allowed in subjectAltName\n
          \  values of type dNSName, and then only as the left-most (least\n   significant)
          DNS label in that value.  This wildcard matches any\n   left-most DNS label
          in the server name.  That is, the subject\n   *.example.com matches the
          server names a.example.com and\n   b.example.com, but does not match example.com
          or a.b.example.com.\n"
        title: 2.2.1.1.  Comparison of DNS Names
      - contents:
        - "2.2.1.2.  Comparison of IP Addresses\n   When the reference identity is
          an IP address, the identity MUST be\n   converted to the \"network byte
          order\" octet string representation\n   [RFC791][RFC2460].  For IP Version
          4, as specified in RFC 791, the\n   octet string will contain exactly four
          octets.  For IP Version 6, as\n   specified in RFC 2460, the octet string
          will contain exactly sixteen\n   octets.  This octet string is then compared
          against subjectAltName\n   values of type iPAddress.  A match occurs if
          the reference identity\n   octet string and value octet strings are identical.\n"
        title: 2.2.1.2.  Comparison of IP Addresses
      - contents:
        - "2.2.1.3.  Comparison of Other subjectName Types\n   Client implementations
          MAY support matching against subjectAltName\n   values of other types as
          described in other documents.\n"
        title: 2.2.1.3.  Comparison of Other subjectName Types
      title: 2.2.1.  Server Identity Check
    title: 2.2.  STARTTLS Command
  - contents:
    - "2.3.  LOGOUT Command\n   The client sends the LOGOUT command when it is finished
      with a\n   connection and wishes to terminate it.  The server MUST reply with
      an\n   OK response.  The server MUST ignore commands issued by the client\n
      \  after the LOGOUT command.\n   The client SHOULD wait for the OK response
      before closing the\n   connection.  This avoids the TCP connection going into
      the TIME_WAIT\n   state on the server.  In order to avoid going into the TIME_WAIT
      TCP\n   state, the server MAY wait for a short while for the client to close\n
      \  the TCP connection first.  Whether or not the server waits for the\n   client
      to close the connection, it MUST then close the connection\n   itself.\n       Example:\n
      \      C: Logout\n       S: Ok\n       <connection is terminated>\n"
    title: 2.3.  LOGOUT Command
  - contents:
    - "2.4.  CAPABILITY Command\n   The CAPABILITY command requests the server capabilities
      as described\n   earlier in this document.  It has no parameters.\n       Example:\n
      \      C: CAPABILITY\n       S: \"IMPLEMENTATION\" \"Example1 ManageSieved v001\"\n
      \      S: \"VERSION\" \"1.0\"\n       S: \"SASL\" \"PLAIN SCRAM-SHA-1 GSSAPI\"\n
      \      S: \"SIEVE\" \"fileinto vacation\"\n       S: \"STARTTLS\"\n       S:
      OK\n"
    title: 2.4.  CAPABILITY Command
  - contents:
    - "2.5.  HAVESPACE Command\n   Arguments:  String - name\n               Number
      - script size\n   The HAVESPACE command is used to query the server for available\n
      \  space.  Clients specify the name they wish to save the script as and\n   its
      size in octets.  Both parameters can be used by the server to see\n   if the
      script with the specified name and size is within a user's\n   quota(s).  For
      example, the server MAY use the script name to check\n   if a script would be
      replaced or a new one would be created.  Servers\n   respond with a NO if storing
      a script with that name and size would\n   fail or OK otherwise.  Clients SHOULD
      issue this command before\n   attempting to place a script on the server.\n
      \  Note that the OK response from the HAVESPACE command does not\n   constitute
      a guarantee of success as server disk space conditions\n   could change between
      the client issuing the HAVESPACE and the client\n   issuing the PUTSCRIPT commands.
      \ A QUOTA response code (see\n   Section 1.3) remains a possible (albeit unlikely)
      response to a\n   subsequent PUTSCRIPT with the same name and size.\n       Example:\n
      \      C: HAVESPACE \"myscript\" 999999\n       S: NO (QUOTA/MAXSIZE) \"Quota
      exceeded\"\n       C: HAVESPACE \"foobar\" 435\n       S: OK\n"
    title: 2.5.  HAVESPACE Command
  - contents:
    - "2.6.  PUTSCRIPT Command\n   Arguments:  String - Script name\n               String
      - Script content\n   The PUTSCRIPT command is used by the client to submit a
      Sieve script\n   to the server.\n   If the script already exists, upon success
      the old script will be\n   overwritten.  The old script MUST NOT be overwritten
      if PUTSCRIPT\n   fails in any way.  A script of zero length SHOULD be disallowed.\n
      \  This command places the script on the server.  It does not affect\n   whether
      the script is processed on incoming mail, unless it replaces\n   the script
      that is already active.  The SETACTIVE command is used to\n   mark a script
      as active.\n   When submitting large scripts, clients SHOULD use the HAVESPACE\n
      \  command beforehand to query if the server is willing to accept a\n   script
      of that size.\n   The server MUST check the submitted script for validity, which\n
      \  includes checking that the script complies with the Sieve grammar\n   [SIEVE]
      and that all Sieve extensions mentioned in the script's\n   \"require\" statement(s)
      are supported by the Sieve interpreter.  (Note\n   that if the Sieve interpreter
      supports the Sieve \"ihave\" extension\n   [I-HAVE], any unrecognized/unsupported
      extension mentioned in the\n   \"ihave\" test MUST NOT cause the validation
      failure.)  Other checks\n   such as validating the supplied command arguments
      for each command\n   MAY be performed.  Essentially, the performed validation
      SHOULD be\n   the same as performed when compiling the script for execution.\n
      \  Implementations that use a binary representation to store compiled\n   scripts
      can extend the validation to a full compilation, in order to\n   avoid validating
      uploaded scripts multiple times.\n   If the script fails the validation, the
      server MUST reply with a NO\n   response.  Any script that fails the validity
      test MUST NOT be stored\n   on the server.  The message given with a NO response
      MUST be human\n   readable and SHOULD contain a specific error message giving
      the line\n   number of the first error.  Implementors should strive to produce\n
      \  helpful error messages similar to those given by programming language\n   compilers.
      \ Client implementations should note that this may be a\n   multiline literal
      string with more than one error message separated\n   by CRLFs.  The human-readable
      message is in the language returned in\n   the latest LANGUAGE capability (or
      in \"i-default\"; see Section 1.7),\n   encoded in UTF-8 [UTF-8].\n   An OK
      response MAY contain the WARNINGS response code.  In such a\n   case the human-readable
      message that follows the OK response SHOULD\n   contain a specific warning message
      (or messages) giving the line\n   number(s) in the script that might contain
      errors not intended by the\n   script writer.  The human-readable message is
      in the language\n   returned in the latest LANGUAGE capability (or in \"i-default\";
      see\n   Section 1.7), encoded in UTF-8 [UTF-8].  A client seeing such a\n   response
      code SHOULD present the message to the user.\n       Examples:\n       C: Putscript
      \"foo\" {31+}\n       C: #comment\n       C: InvalidSieveCommand\n       C:\n
      \      S: NO \"line 2: Syntax error\"\n       C: Putscript \"mysievescript\"
      {110+}\n       C: require [\"fileinto\"];\n       C:\n       C: if envelope
      :contains \"to\" \"tmartin+sent\" {\n       C:   fileinto \"INBOX.sent\";\n
      \      C: }\n       S: OK\n       C: Putscript \"myforwards\" {190+}\n       C:
      redirect \"111@example.net\";\n       C:\n       C: if size :under 10k {\n       C:
      \    redirect \"mobile@cell.example.com\";\n       C: }\n       C:\n       C:
      if envelope :contains \"to\" \"tmartin+lists\" {\n       C:     redirect \"lists@groups.example.com\";\n
      \      C: }\n       S: OK (WARNINGS) \"line 8: server redirect action\n               limit
      is 2, this redirect might be ignored\"\n"
    title: 2.6.  PUTSCRIPT Command
  - contents:
    - "2.7.  LISTSCRIPTS Command\n   This command lists the scripts the user has on
      the server.  Upon\n   success, a list of CRLF-separated script names (each represented
      as a\n   quoted or literal string) is returned followed by an OK response.  If\n
      \  there exists an active script, the atom ACTIVE is appended to the\n   corresponding
      script name.  The atom ACTIVE MUST NOT appear on more\n   than one response
      line.\n       Example:\n       C: Listscripts\n       S: \"summer_script\"\n
      \      S: \"vacation_script\"\n       S: {13}\n       S: clever\"script\n       S:
      \"main_script\" ACTIVE\n       S: OK\n       C: listscripts\n       S: \"summer_script\"\n
      \      S: \"main_script\" active\n       S: OK\n"
    title: 2.7.  LISTSCRIPTS Command
  - contents:
    - "2.8.  SETACTIVE Command\n   Arguments:  String - script name\n   This command
      sets a script active.  If the script name is the empty\n   string (i.e., \"\"),
      then any active script is disabled.  Disabling an\n   active script when there
      is no script active is not an error and MUST\n   result in an OK reply.\n   If
      the script does not exist on the server, then the server MUST\n   reply with
      a NO response.  Such a reply SHOULD contain the\n   NONEXISTENT response code.\n
      \      Examples:\n       C: Setactive \"vacationscript\"\n       S: Ok\n       C:
      Setactive \"\"\n       S: Ok\n       C: Setactive \"baz\"\n       S: No (NONEXISTENT)
      \"There is no script by that name\"\n       C: Setactive \"baz\"\n       S:
      No (NONEXISTENT) {31}\n       S: There is no script by that name\n"
    title: 2.8.  SETACTIVE Command
  - contents:
    - "2.9.  GETSCRIPT Command\n   Arguments:  String - script name\n   This command
      gets the contents of the specified script.  If the\n   script does not exist,
      the server MUST reply with a NO response.\n   Such a reply SHOULD contain the
      NONEXISTENT response code.\n   Upon success, a string with the contents of the
      script is returned\n   followed by an OK response.\n       Example:\n       C:
      Getscript \"myscript\"\n       S: {54}\n       S: #this is my wonderful script\n
      \      S: reject \"I reject all\";\n       S:\n       S: OK\n"
    title: 2.9.  GETSCRIPT Command
  - contents:
    - "2.10.  DELETESCRIPT Command\n   Arguments:  String - script name\n   This command
      is used to delete a user's Sieve script.  Servers MUST\n   reply with a NO response
      if the script does not exist.  Such\n   responses SHOULD include the NONEXISTENT
      response code.\n   The server MUST NOT allow the client to delete an active
      script, so\n   the server MUST reply with a NO response if attempted.  Such
      a\n   response SHOULD contain the ACTIVE response code.  If a client wishes\n
      \  to delete an active script, it should use the SETACTIVE command to\n   disable
      the script first.\n       Example:\n       C: Deletescript \"foo\"\n       S:
      Ok\n       C: Deletescript \"baz\"\n       S: No (ACTIVE) \"You may not delete
      an active script\"\n"
    title: 2.10.  DELETESCRIPT Command
  - contents:
    - "2.11.  RENAMESCRIPT Command\n   Arguments:  String - Old Script name\n               String
      - New Script name\n   This command is used to rename a user's Sieve script.
      \ Servers MUST\n   reply with a NO response if the old script does not exist
      (in which\n   case the NONEXISTENT response code SHOULD be included), or a script\n
      \  with the new name already exists (in which case the ALREADYEXISTS\n   response
      code SHOULD be included).  Renaming the active script is\n   allowed; the renamed
      script remains active.\n       Example:\n       C: Renamescript \"foo\" \"bar\"\n
      \      S: Ok\n       C: Renamescript \"baz\" \"bar\"\n       S: No \"bar already
      exists\"\n   If the server doesn't support the RENAMESCRIPT command, the client\n
      \  can emulate it by performing the following steps:\n   1.  List available
      scripts with LISTSCRIPTS.  If the script with the\n       new script name exists,
      then the client should ask the user\n       whether to abort the operation,
      to replace the script (by issuing\n       the DELETESCRIPT <newname> after that),
      or to choose a different\n       name.\n   2.  Download the old script with
      GETSCRIPT <oldname>.\n   3.  Upload the old script with the new name: PUTSCRIPT
      <newname>.\n   4.  If the old script was active (as reported by LISTSCRIPTS
      in step\n       1), then make the new script active: SETACTIVE <newname>.\n
      \  5.  Delete the old script: DELETESCRIPT <oldname>.\n   Note that these steps
      don't describe how to handle various other\n   error conditions (for example,
      NO response containing QUOTA response\n   code in step 3).  Error handling is
      left as an exercise for the\n   reader.\n"
    title: 2.11.  RENAMESCRIPT Command
  - contents:
    - "2.12.  CHECKSCRIPT Command\n   Arguments:  String - Script content\n   The
      CHECKSCRIPT command is used by the client to verify Sieve script\n   validity
      without storing the script on the server.\n   The server MUST check the submitted
      script for syntactic validity,\n   which includes checking that all Sieve extensions
      mentioned in Sieve\n   script \"require\" statement(s) are supported by the
      Sieve interpreter.\n   (Note that if the Sieve interpreter supports the Sieve
      \"ihave\"\n   extension [I-HAVE], any unrecognized/unsupported extension mentioned\n
      \  in the \"ihave\" test MUST NOT cause the syntactic validation failure.)\n
      \  If the script fails this test, the server MUST reply with a NO\n   response.
      \ The message given with a NO response MUST be human\n   readable and SHOULD
      contain a specific error message giving the line\n   number of the first error.
      \ Implementors should strive to produce\n   helpful error messages similar to
      those given by programming language\n   compilers.  Client implementations should
      note that this may be a\n   multiline literal string with more than one error
      message separated\n   by CRLFs.  The human-readable message is in the language
      returned in\n   the latest LANGUAGE capability (or in \"i-default\"; see Section
      1.7),\n   encoded in UTF-8 [UTF-8].\n       Examples:\n       C: CheckScript
      {31+}\n       C: #comment\n       C: InvalidSieveCommand\n       C:\n       S:
      NO \"line 2: Syntax error\"\n   A ManageSieve server supporting this command
      MUST NOT check if the\n   script will put the current user over its quota limit.\n
      \  An OK response MAY contain the WARNINGS response code.  In such a\n   case,
      the human-readable message that follows the OK response SHOULD\n   contain a
      specific warning message (or messages) giving the line\n   number(s) in the
      script that might contain errors not intended by the\n   script writer.  The
      human-readable message is in the language\n   returned in the latest LANGUAGE
      capability (or in \"i-default\"; see\n   Section 1.7), encoded in UTF-8 [UTF-8].
      \ A client seeing such a\n   response code SHOULD present the message to the
      user.\n"
    title: 2.12.  CHECKSCRIPT Command
  - contents:
    - "2.13.  NOOP Command\n   Arguments:  String - tag to echo back (optional)\n
      \  The NOOP command does nothing, beyond returning a response to the\n   client.
      \ It may be used by clients for protocol re-synchronization or\n   to reset
      any inactivity auto-logout timer on the server.\n   The response to the NOOP
      command is always OK, followed by the TAG\n   response code together with the
      supplied string.  If no string was\n   supplied in the NOOP command, the TAG
      response code MUST NOT be\n   included.\n       Examples:\n       C: NOOP\n
      \      S: OK \"NOOP completed\"\n       C: NOOP \"STARTTLS-SYNC-42\"\n       S:
      OK (TAG {16}\n       S: STARTTLS-SYNC-42) \"Done\"\n"
    title: 2.13.  NOOP Command
  - contents:
    - "2.14.  Recommended Extensions\n   The UNAUTHENTICATE extension (advertised
      as the \"UNAUTHENTICATE\"\n   capability with no parameters) defines a new UNAUTHENTICATE
      command,\n   which allows a client to return the server to non-authenticated\n
      \  state.  Support for this extension is RECOMMENDED.\n"
    - contents:
      - "2.14.1.  UNAUTHENTICATE Command\n   The UNAUTHENTICATE command returns the
        server to the\n   non-authenticated state.  It doesn't affect any previously\n
        \  established TLS [TLS] or SASL (Section 2.1) security layer.\n   The UNAUTHENTICATE
        command is only valid in authenticated state.  If\n   issued in a wrong state,
        the server MUST reject it with a NO\n   response.\n   The UNAUTHENTICATE command
        has no parameters.\n   When issued in the authenticated state, the UNAUTHENTICATE
        command\n   MUST NOT fail (i.e., it must never return anything other than
        OK or\n   BYE).\n"
      title: 2.14.1.  UNAUTHENTICATE Command
    title: 2.14.  Recommended Extensions
  title: 2.  Commands
- contents:
  - "3.  Sieve URL Scheme\n   URI scheme name: sieve\n   Status: permanent\n   URI
    scheme syntax: Described using ABNF [ABNF].  Some ABNF\n   productions not defined
    below are from [URI-GEN].\n         sieveurl = sieveurl-server / sieveurl-list-scripts
    /\n                    sieveurl-script\n         sieveurl-server = \"sieve://\"
    authority\n         sieveurl-list-scripts = \"sieve://\" authority [\"/\"]\n         sieveurl-script
    = \"sieve://\" authority \"/\"\n                           [owner \"/\"] scriptname\n
    \        authority = <defined in [URI-GEN]>\n         owner         = *ochar\n
    \                        ;; %-encoded version of [SASL] authorization\n                         ;;
    identity (script owner) or \"userid\".\n                         ;;\n                         ;;
    Empty owner is used to reference\n                         ;; global scripts.\n
    \                        ;;\n                         ;; Note that ASCII characters
    such as \" \", \";\",\n                         ;; \"&\", \"=\", \"/\" and \"?\"
    must be %-encoded\n                         ;; as per rule specified in [URI-GEN].\n
    \        scriptname    = 1*ochar\n                         ;; %-encoded version
    of UTF-8 representation\n                         ;; of the script name.\n                         ;;
    Note that ASCII characters such as \" \", \";\",\n                         ;;
    \"&\", \"=\", \"/\" and \"?\" must be %-encoded\n                         ;; as
    per rule specified in [URI-GEN].\n         ochar         = unreserved / pct-encoded
    / sub-delims-sh /\n                         \":\" / \"@\"\n                         ;;
    Same as [URI-GEN] 'pchar',\n                         ;; but without \";\", \"&\"
    and \"=\".\n         unreserved = <defined in [URI-GEN]>\n         pct-encoded
    = <defined in [URI-GEN]>\n         sub-delims-sh = \"!\" / \"$\" / \"'\" / \"(\"
    / \")\" /\n                         \"*\" / \"+\" / \",\"\n                         ;;
    Same as [URI-GEN] sub-delims,\n                         ;; but without \";\",
    \"&\" and \"=\".\n   URI scheme semantics:\n      A Sieve URL identifies a Sieve
    server or a Sieve script on a Sieve\n      server.  The latter form is associated
    with the application/sieve\n      MIME type defined in [SIEVE].  There is no MIME
    type associated\n      with the former form of Sieve URI.\n      The server form
    is used in the REFERRAL response code (see Section\n      1.3) in order to designate
    another server where the client should\n      perform its operations.\n      The
    script form allows to retrieve (GETSCRIPT), update\n      (PUTSCRIPT), delete
    (DELETESCRIPT), or activate (SETACTIVE) the\n      named script; however, the
    most typical action would be to\n      retrieve the script.  If the script name
    is empty (omitted), the\n      URI requests that the client lists available scripts
    using the\n      LISTSCRIPTS command.\n   Encoding considerations:\n      The
    script name and/or the owner, if present, is in UTF-8.  Non--\n      US-ASCII
    UTF-8 octets MUST be percent-encoded as described in\n      [URI-GEN].  US-ASCII
    characters such as \" \" (space), \";\", \"&\",\n      \"=\", \"/\" and \"?\"
    \ MUST be %-encoded as described in [URI-GEN].\n      Note that \"&\" and \"?\"
    are in this list in order to allow for\n      future extensions.\n      Note that
    the empty owner (e.g., sieve://example.com//script) is\n      different from the
    missing owner (e.g.,\n      sieve://example.com/script) and is reserved for referencing
    global\n      scripts.\n      The user name (in the \"authority\" part), if present,
    is in UTF-8.\n      Non-US-ASCII UTF-8 octets MUST be percent-encoded as described
    in\n      [URI-GEN].\n   Applications/protocols that use this URI scheme name:\n
    \  ManageSieve [RFC5804] clients and servers.  Clients that can store\n   user
    preferences in protocols such as [LDAP] or [ACAP].\n   Interoperability considerations:
    None.\n   Security considerations:\n   The <scriptname> part of a ManageSieve
    URL might potentially disclose\n   some confidential information about the author
    of the script or,\n   depending on a ManageSieve implementation, about configuration
    of the\n   mail system.  The latter might be used to prepare for a more complex\n
    \  attack on the mail system.\n   Clients resolving ManageSieve URLs that wish
    to achieve data\n   confidentiality and/or integrity SHOULD use the STARTTLS command
    (if\n   supported by the server) before starting authentication, or use a\n   SASL
    mechanism, such as GSSAPI, that provides a confidentiality\n   security layer.\n
    \  Contact: Alexey Melnikov <alexey.melnikov@isode.com>\n   Author/Change controller:
    IESG.\n   References: This document and RFC 5228 [SIEVE].\n"
  title: 3.  Sieve URL Scheme
- contents:
  - "4.  Formal Syntax\n   The following syntax specification uses the Augmented Backus-Naur\n
    \  Form (BNF) notation as specified in [ABNF].  This uses the ABNF core\n   rules
    as specified in Appendix A of the ABNF specification [ABNF].\n   \"UTF8-2\", \"UTF8-3\",
    and \"UTF8-4\" non-terminal are defined in [UTF-8].\n   Except as noted otherwise,
    all alphabetic characters are case-\n   insensitive.  The use of upper- or lowercase
    characters to define\n   token strings is for editorial clarity only.  Implementations
    MUST\n   accept these strings in a case-insensitive fashion.\n    SAFE-CHAR             =
    %x01-09 / %x0B-0C / %x0E-21 / %x23-5B /\n                            %x5D-7F\n
    \                           ;; any TEXT-CHAR except QUOTED-SPECIALS\n    QUOTED-CHAR
    \          = SAFE-UTF8-CHAR / \"\\\" QUOTED-SPECIALS\n    QUOTED-SPECIALS       =
    DQUOTE / \"\\\"\n    SAFE-UTF8-CHAR        = SAFE-CHAR / UTF8-2 / UTF8-3 / UTF8-4\n
    \                           ;; <UTF8-2>, <UTF8-3>, and <UTF8-4>\n                            ;;
    are defined in [UTF-8].\n    ATOM-CHAR             = \"!\" / %x23-27 / %x2A-5B
    / %x5D-7A / %x7C-7E\n                            ;; Any CHAR except ATOM-SPECIALS\n
    \   ATOM-SPECIALS         = \"(\" / \")\" / \"{\" / SP / CTL / QUOTED-SPECIALS\n
    \   NZDIGIT               = %x31-39\n                            ;; 1-9\n    atom
    \                 = 1*1024ATOM-CHAR\n    iana-token            = atom\n                            ;;
    MUST be registered with IANA\n    auth-type             = DQUOTE auth-type-name
    DQUOTE\n    auth-type-name        = iana-token\n                            ;;
    as defined in SASL [SASL]\n    command               = (command-any / command-auth
    /\n                             command-nonauth) CRLF\n                            ;;
    Modal based on state\n    command-any           = command-capability / command-logout
    /\n                            command-noop\n                            ;; Valid
    in all states\n    command-auth          = command-getscript / command-setactive
    /\n                            command-listscripts / command-deletescript /\n
    \                           command-putscript / command-checkscript /\n                            command-havespace
    /\n                            command-renamescript /\n                            command-unauthenticate\n
    \                           ;; Valid only in Authenticated state\n    command-nonauth
    \      = command-authenticate / command-starttls\n                            ;;
    Valid only when in Non-Authenticated\n                            ;; state\n    command-authenticate
    \ = \"AUTHENTICATE\" SP auth-type [SP string]\n                            *(CRLF
    string)\n    command-capability    = \"CAPABILITY\"\n    command-deletescript
    \ = \"DELETESCRIPT\" SP sieve-name\n    command-getscript     = \"GETSCRIPT\"
    SP sieve-name\n    command-havespace     = \"HAVESPACE\" SP sieve-name SP number\n
    \   command-listscripts   = \"LISTSCRIPTS\"\n    command-noop          = \"NOOP\"
    [SP string]\n    command-logout        = \"LOGOUT\"\n    command-putscript     =
    \"PUTSCRIPT\" SP sieve-name SP sieve-script\n    command-checkscript   = \"CHECKSCRIPT\"
    SP sieve-script\n    sieve-script          = string\n    command-renamescript
    \ = \"RENAMESCRIPT\" SP old-sieve-name SP\n                            new-sieve-name\n
    \   old-sieve-name        = sieve-name\n    new-sieve-name        = sieve-name\n
    \   command-setactive     = \"SETACTIVE\" SP active-sieve-name\n    command-starttls
    \     = \"STARTTLS\"\n    command-unauthenticate= \"UNAUTHENTICATE\"\n    extend-token
    \         = atom\n                            ;; MUST be defined by a Standards
    Track or\n                            ;; IESG-approved experimental protocol\n
    \                           ;; extension\n    extension-data        = extension-item
    *(SP extension-item)\n    extension-item        = extend-token / string / number
    /\n                            \"(\" [extension-data] \")\"\n    literal-c2s           =
    \"{\" number \"+}\" CRLF *OCTET\n                            ;; The number represents
    the number of\n                            ;; octets.\n                            ;;
    This type of literal can only be sent\n                            ;; from the
    client to the server.\n    literal-s2c           = \"{\" number \"}\" CRLF *OCTET\n
    \                           ;; Almost identical to literal-c2s,\n                            ;;
    but with no '+' character.\n                            ;; The number represents
    the number of\n                            ;; octets.\n                            ;;
    This type of literal can only be sent\n                            ;; from the
    server to the client.\n    number                = (NZDIGIT *DIGIT) / \"0\"\n
    \                           ;; A 32-bit unsigned number\n                            ;;
    with no extra leading zeros.\n                            ;; (0 <= n < 4,294,967,296)\n
    \   number-str            = string\n                            ;; <number> encoded
    as a <string>.\n    quoted                = DQUOTE *1024QUOTED-CHAR DQUOTE\n                            ;;
    limited to 1024 octets between the <\">s\n    resp-code             = \"AUTH-TOO-WEAK\"
    / \"ENCRYPT-NEEDED\" / \"QUOTA\"\n                            [\"/\" (\"MAXSCRIPTS\"
    / \"MAXSIZE\")] /\n                            resp-code-sasl /\n                            resp-code-referral
    /\n                            \"TRANSITION-NEEDED\" / \"TRYLATER\" /\n                            \"ACTIVE\"
    / \"NONEXISTENT\" /\n                            \"ALREADYEXISTS\" / \"WARNINGS\"
    /\n                            \"TAG\" SP string /\n                            resp-code-ext\n
    \   resp-code-referral    = \"REFERRAL\" SP sieveurl\n    resp-code-sasl        =
    \"SASL\" SP string\n    resp-code-name        = iana-token\n                            ;;
    The response code name is hierarchical,\n                            ;; separated
    by '/'.\n                            ;; The response code name MUST NOT start\n
    \                           ;; with '/'.\n    resp-code-ext         = resp-code-name
    [SP extension-data]\n                            ;; unknown response codes MUST
    be tolerated\n                            ;; by the client.\n    response              =
    response-authenticate /\n                            response-logout /\n                            response-getscript
    /\n                            response-setactive /\n                            response-listscripts
    /\n                            response-deletescript /\n                            response-putscript
    /\n                            response-checkscript /\n                            response-capability
    /\n                            response-havespace /\n                            response-starttls
    /\n                            response-renamescript /\n                            response-noop
    /\n                            response-unauthenticate\n    response-authenticate
    = *(string CRLF)\n                            ((response-ok [response-capability])
    /\n                             response-nobye)\n                            ;;
    <response-capability> is REQUIRED if a\n                            ;; SASL security
    layer was negotiated and\n                            ;; MUST be omitted otherwise.\n
    \   response-capability   = *(single-capability) response-oknobye\n    single-capability
    \    = capability-name [SP string] CRLF\n    capability-name       = string\n
    \                           ;; Note that literal-s2c is allowed.\n    initial-capabilities
    \ = DQUOTE \"IMPLEMENTATION\" DQUOTE SP string /\n                            DQUOTE
    \"SASL\" DQUOTE SP sasl-mechs /\n                            DQUOTE \"SIEVE\"
    DQUOTE SP sieve-extensions /\n                            DQUOTE \"MAXREDIRECTS\"
    DQUOTE SP number-str /\n                            DQUOTE \"NOTIFY\" DQUOTE SP
    notify-mechs /\n                            DQUOTE \"STARTTLS\" DQUOTE /\n                            DQUOTE
    \"LANGUAGE\" DQUOTE SP language /\n                            DQUOTE \"VERSION\"
    DQUOTE SP version /\n                            DQUOTE \"OWNER\" DQUOTE SP string\n
    \                           ;; Each capability conforms to\n                            ;;
    the syntax for single-capability.\n                            ;; Also, note that
    the capability name\n                            ;; can be returned as either
    literal-s2c\n                            ;; or quoted, even though only \"quoted\"\n
    \                           ;; string is shown above.\n    version = ( DQUOTE
    \"1.0\" DQUOTE ) / version-ext\n    version-ext = DQUOTE ver-major \".\" ver-minor
    DQUOTE\n                 ; Future versions specified in updates\n                 ;
    to this document.  An increment to\n                 ; the ver-major means a backward-incompatible\n
    \                ; change to the protocol, e.g., \"3.5\" (ver-major \"3\")\n                 ;
    is not backward-compatible with any \"2.X\" version.\n                 ; Any version
    \"Z.W\" MUST be backward compatible\n                 ; with any version \"Z.Q\",
    where Q < W.\n                 ; For example, version \"2.4\" is backward compatible\n
    \                ; with version \"2.0\", \"2.1\", \"2.2\", and \"2.3\".\n    ver-major
    = number\n    ver-minor = number\n    sasl-mechs = string\n                 ;
    Space-separated list of SASL mechanisms,\n                 ; each SASL mechanism
    name complies with rules\n                 ; specified in [SASL].\n                 ;
    Can be empty.\n    sieve-extensions = string\n                 ; Space-separated
    list of supported SIEVE extensions.\n                 ; Can be empty.\n    language
    \    = string\n                 ; Contains <Language-Tag> from [RFC5646].\n    notify-mechs
    = string\n                 ; Space-separated list of URI schema parts\n                 ;
    for supported notification [NOTIFY] methods.\n                 ; MUST NOT be empty.\n
    \   response-deletescript = response-oknobye\n    response-getscript    = (sieve-script
    CRLF response-ok) /\n                            response-nobye\n    response-havespace
    \   = response-oknobye\n    response-listscripts  = *(sieve-name [SP \"ACTIVE\"]
    CRLF)\n                            response-oknobye\n                            ;;
    ACTIVE may only occur with one sieve-name\n    response-logout       = response-oknobye\n
    \   response-unauthenticate= response-oknobye\n                             ;;
    \"NO\" response can only be returned when\n                             ;; the
    command is issued in a wrong state\n                             ;; or has a wrong
    number of parameters\n    response-ok           = \"OK\" [SP \"(\" resp-code \")\"]\n
    \                           [SP string] CRLF\n                            ;; The
    string contains human-readable text\n                            ;; encoded as
    UTF-8.\n    response-nobye        = (\"NO\" / \"BYE\") [SP \"(\" resp-code \")\"]\n
    \                           [SP string] CRLF\n                            ;; The
    string contains human-readable text\n                            ;; encoded as
    UTF-8.\n    response-oknobye      = response-ok / response-nobye\n    response-noop
    \        = response-ok\n    response-putscript    = response-oknobye\n    response-checkscript
    \ = response-oknobye\n    response-renamescript = response-oknobye\n    response-setactive
    \   = response-oknobye\n    response-starttls     = (response-ok response-capability)
    /\n                            response-nobye\n    sieve-name            = string\n
    \                           ;; See Section 1.6 for the full list of\n                            ;;
    prohibited characters.\n                            ;; Empty string is not allowed.\n
    \   active-sieve-name     = string\n                            ;; See Section
    1.6 for the full list of\n                            ;; prohibited characters.\n
    \                           ;; This is similar to <sieve-name>, but\n                            ;;
    empty string is allowed and has a special\n                            ;; meaning.\n
    \   string                = quoted / literal-c2s / literal-s2c\n                            ;;
    literal-c2s is only allowed when sent\n                            ;; from the
    client to the server.\n                            ;; literal-s2c is only allowed
    when sent\n                            ;; from the server to the client.\n                            ;;
    quoted is allowed in either direction.\n"
  title: 4.  Formal Syntax
- contents:
  - "5.  Security Considerations\n   The AUTHENTICATE command uses SASL [SASL] to
    provide authentication\n   and authorization services.  Integrity and privacy
    services can be\n   provided by [SASL] and/or [TLS].  When a SASL mechanism is
    used, the\n   security considerations for that mechanism apply.\n   This protocol's
    transactions are susceptible to passive observers or\n   man-in-the-middle attacks
    that alter the data, unless the optional\n   encryption and integrity services
    of the SASL (via the AUTHENTICATE\n   command) and/or [TLS] (via the STARTTLS
    command) are enabled, or an\n   external security mechanism is used for protection.
    \ It may be useful\n   to allow configuration of both clients and servers to refuse
    to\n   transfer sensitive information in the absence of strong encryption.\n   If
    an implementation supports SASL mechanisms that are vulnerable to\n   passive
    eavesdropping attacks (such as [PLAIN]), then the\n   implementation MUST support
    at least one configuration where these\n   SASL mechanisms are not advertised
    or used without the presence of an\n   external security layer such as [TLS].\n
    \  Some response codes returned on failed AUTHENTICATE command may\n   disclose
    whether or not the username is valid (e.g., TRANSITION-\n   NEEDED), so server
    implementations SHOULD provide the ability to\n   disable these features (or make
    them not conditional on a per-user\n   basis) for sites concerned about such disclosure.
    \ In the case of\n   ENCRYPT-NEEDED, if it is applied to all identities then no
    extra\n   information is disclosed, but if it is applied on a per-user basis it\n
    \  can disclose information.\n   A compromised or malicious server can use the
    TRANSITION-NEEDED\n   response code to force the client that is configured to
    use a\n   mechanism that does not disclose the user's password to the server\n
    \  (e.g., Kerberos), to send the bare password to the server.  Clients\n   SHOULD
    have the ability to disable the password transition feature,\n   or disclose that
    risk to the user and offer the user an option of how\n   to proceed.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   IANA has reserved TCP port number 4190 for use with
    the ManageSieve\n   protocol described in this document.\n   IANA has registered
    the \"sieve\" URI scheme defined in Section 3 of\n   this document.\n   IANA has
    registered \"sieve\" in the \"GSSAPI/Kerberos/SASL Service\n   Names\" registry.\n
    \  IANA has created a new registry for ManageSieve capabilities.  The\n   registration
    template for ManageSieve capabilities is specified in\n   Section 6.1.  ManageSieve
    protocol capabilities MUST be specified in\n   a Standards-Track or IESG-approved
    Experimental RFC.\n   IANA has created a new registry for ManageSieve response
    codes.  The\n   registration template for ManageSieve response codes is specified
    in\n   Section 6.3.  ManageSieve protocol response codes MUST be specified\n   in
    a Standards-Track or IESG-approved Experimental RFC.\n"
  - contents:
    - "6.1.  ManageSieve Capability Registration Template\n   To: iana@iana.org\n
      \  Subject: ManageSieve Capability Registration\n   Please register the following
      ManageSieve capability:\n   Capability name:\n   Description:\n   Relevant publications:\n
      \  Person & email address to contact for further information:\n   Author/Change
      controller:\n"
    title: 6.1.  ManageSieve Capability Registration Template
  - contents:
    - "6.2.  Registration of Initial ManageSieve Capabilities\n   To: iana@iana.org\n
      \  Subject: ManageSieve Capability Registration\n   Please register the following
      ManageSieve capabilities:\n   Capability name:  IMPLEMENTATION\n   Description:
      \  Its value contains the name of the server\n                  implementation
      and its version.\n   Relevant publications:  this RFC, Section 1.7.\n   Person
      & email address to contact for further information:\n                  Alexey
      Melnikov <alexey.melnikov@isode.com>\n   Author/Change controller:  IESG.\n
      \  Capability name:  SASL\n   Description:   Its value contains a space-separated
      list of SASL\n                  mechanisms supported by the server.\n   Relevant
      publications:  this RFC, Sections 1.7 and 2.1.\n   Person & email address to
      contact for further information:\n                  Alexey Melnikov <alexey.melnikov@isode.com>\n
      \  Author/Change controller:  IESG.\n   Capability name:  SIEVE\n   Description:
      \  Its value contains a space-separated list of supported\n                  SIEVE
      extensions.\n   Relevant publications:  this RFC, Section 1.7.  Also [SIEVE].\n
      \  Person & email address to contact for further information:\n                  Alexey
      Melnikov <alexey.melnikov@isode.com>\n   Author/Change controller:  IESG.\n
      \  Capability name:  STARTTLS\n   Description:   This capability is returned
      if the server supports TLS\n                  (STARTTLS command).\n   Relevant
      publications:  this RFC, Sections 1.7 and 2.2.\n   Person & email address to
      contact for further information:\n                  Alexey Melnikov <alexey.melnikov@isode.com>\n
      \  Author/Change controller:  IESG.\n   Capability name:  NOTIFY\n   Description:
      \  This capability is returned if the server supports the\n                  'enotify'
      [NOTIFY] Sieve extension.\n   Relevant publications:  this RFC, Section 1.7.\n
      \  Person & email address to contact for further information:\n                  Alexey
      Melnikov <alexey.melnikov@isode.com>\n   Author/Change controller:  IESG.\n
      \  Capability name:  MAXREDIRECTS\n   Description:   This capability returns
      the limit on the number of\n                  Sieve \"redirect\" actions a script
      can perform during a\n                  single evaluation.  The value is a non-negative
      number\n                  represented as a ManageSieve string.\n   Relevant
      publications:  this RFC, Section 1.7.\n   Person & email address to contact
      for further information:\n                  Alexey Melnikov <alexey.melnikov@isode.com>\n
      \  Author/Change controller:  IESG.\n   Capability name:  LANGUAGE\n   Description:
      \  The language (<Language-Tag> from [RFC5646]) currently\n                  used
      for human-readable error messages.\n   Relevant publications:  this RFC, Section
      1.7.\n   Person & email address to contact for further information:\n                  Alexey
      Melnikov <alexey.melnikov@isode.com>\n   Author/Change controller:  IESG.\n
      \  Capability name:  OWNER\n   Description:   Its value contains the UTF-8-encoded
      name of the\n                  currently logged-in user (\"authorization identity\"\n
      \                 according to RFC 4422).\n   Relevant publications:  this RFC,
      Section 1.7.\n   Person & email address to contact for further information:\n
      \                 Alexey Melnikov <alexey.melnikov@isode.com>\n   Author/Change
      controller:  IESG.\n   Capability name:  VERSION\n   Description:   This capability
      is returned if the server is compliant\n                  with RFC 5804; i.e.,
      that it supports RENAMESCRIPT,\n                  CHECKSCRIPT, and NOOP commands.\n
      \  Relevant publications:  this RFC, Sections 2.11, 2.12, and 2.13.\n   Person
      & email address to contact for further information:\n                  Alexey
      Melnikov <alexey.melnikov@isode.com>\n   Author/Change controller:  IESG.\n"
    title: 6.2.  Registration of Initial ManageSieve Capabilities
  - contents:
    - "6.3.  ManageSieve Response Code Registration Template\n   To: iana@iana.org\n
      \  Subject: ManageSieve Response Code Registration\n   Please register the following
      ManageSieve response code:\n      Response Code:\n      Arguments (use ABNF
      to specify syntax, or the word NONE if none\n      can be specified):\n      Purpose:\n
      \     Published Specification(s):\n      Person & email address to contact for
      further information:\n      Author/Change controller:\n"
    title: 6.3.  ManageSieve Response Code Registration Template
  - contents:
    - "6.4.  Registration of Initial ManageSieve Response Codes\n   To: iana@iana.org\n
      \  Subject: ManageSieve Response Code Registration\n   Please register the following
      ManageSieve response codes:\n   Response Code: AUTH-TOO-WEAK\n   Arguments (use
      ABNF to specify syntax, or the word NONE if none can\n   be specified):  NONE\n
      \  Purpose:       This response code is returned in the NO response from\n                  an
      AUTHENTICATE command.  It indicates that site\n                  security policy
      forbids the use of the requested\n                  mechanism for the specified
      authentication identity.\n   Published Specification(s):  [RFC5804]\n   Person
      & email address to contact for further information:\n                  Alexey
      Melnikov <alexey.melnikov@isode.com>\n   Author/Change controller:  IESG.\n
      \  Response Code: ENCRYPT-NEEDED\n   Arguments (use ABNF to specify syntax,
      or the word NONE if none can\n   be specified):  NONE\n   Purpose:       This
      response code is returned in the NO response from\n                  an AUTHENTICATE
      command.  It indicates that site\n                  security policy requires
      the use of a strong\n                  encryption mechanism for the specified
      authentication\n                  identity and mechanism.\n   Published Specification(s):
      \ [RFC5804]\n   Person & email address to contact for further information:\n
      \                 Alexey Melnikov <alexey.melnikov@isode.com>\n   Author/Change
      controller:  IESG.\n   Response Code: QUOTA\n   Arguments (use ABNF to specify
      syntax, or the word NONE if none can\n   be specified):  NONE\n   Purpose:       If
      this response code is returned in the NO/BYE\n                  response, it
      means that the command would have placed\n                  the user above the
      site-defined quota constraints.  If\n                  this response code is
      returned in the OK response, it\n                  can mean that the user is
      near its quota or that the\n                  user exceeded its quota, but the
      server supports soft\n                  quotas.\n   Published Specification(s):
      \ [RFC5804]\n   Person & email address to contact for further information:\n
      \                 Alexey Melnikov <alexey.melnikov@isode.com>\n   Author/Change
      controller:  IESG.\n   Response Code: QUOTA/MAXSCRIPTS\n   Arguments (use ABNF
      to specify syntax, or the word NONE if none can\n   be specified):  NONE\n   Purpose:
      \      If this response code is returned in the NO/BYE\n                  response,
      it means that the command would have placed\n                  the user above
      the site-defined limit on the number of\n                  Sieve scripts.  If
      this response code is returned in\n                  the OK response, it can
      mean that the user is near its\n                  quota or that the user exceeded
      its quota, but the\n                  server supports soft quotas.  This response
      code is a\n                  more specific version of the QUOTA response code.\n
      \  Published Specification(s):  [RFC5804]\n   Person & email address to contact
      for further information:\n                  Alexey Melnikov <alexey.melnikov@isode.com>\n
      \  Author/Change controller:  IESG.\n   Response Code: QUOTA/MAXSIZE\n   Arguments
      (use ABNF to specify syntax, or the word NONE if none can\n   be specified):
      \ NONE\n   Purpose:       If this response code is returned in the NO/BYE\n
      \                 response, it means that the command would have placed\n                  the
      user above the site-defined maximum script size.\n                  If this
      response code is returned in the OK response,\n                  it can mean
      that the user is near its quota or that\n                  the user exceeded
      its quota, but the server supports\n                  soft quotas.  This response
      code is a more specific\n                  version of the QUOTA response code.\n
      \  Published Specification(s):  [RFC5804]\n   Person & email address to contact
      for further information:\n                  Alexey Melnikov <alexey.melnikov@isode.com>\n
      \  Author/Change controller:  IESG.\n   Response Code: REFERRAL\n   Arguments
      (use ABNF to specify syntax, or the word NONE if none can\n   be specified):
      \ <sieveurl>\n   Purpose:       This response code may be returned with a BYE
      result\n                  from any command, and includes a mandatory parameter\n
      \                 that indicates what server to access to manage this\n                  user's
      Sieve scripts.  The server will be specified by\n                  a Sieve URL
      (see Section 3).  The scriptname portion\n                  of the URL MUST
      NOT be specified.  The client should\n                  authenticate to the
      specified server and use it for\n                  all further commands in the
      current session.\n   Published Specification(s):  [RFC5804]\n   Person & email
      address to contact for further information:\n                  Alexey Melnikov
      <alexey.melnikov@isode.com>\n   Author/Change controller:  IESG.\n   Response
      Code: SASL\n   Arguments (use ABNF to specify syntax, or the word NONE if none
      can\n   be specified):  <string>\n   Purpose:       This response code can occur
      in the OK response to a\n                  successful AUTHENTICATE command and
      includes the\n                  optional final server response data from the
      server as\n                  specified by [SASL].\n   Published Specification(s):
      \ [RFC5804]\n   Person & email address to contact for further information:\n
      \                 Alexey Melnikov <alexey.melnikov@isode.com>\n   Author/Change
      controller:  IESG.\n   Response Code: TRANSITION-NEEDED\n   Arguments (use ABNF
      to specify syntax, or the word NONE if none can\n   be specified):  NONE\n   Purpose:
      \      This response code occurs in a NO response of an\n                  AUTHENTICATE
      command.  It indicates that the user name\n                  is valid, but the
      entry in the authentication database\n                  needs to be updated
      in order to permit authentication\n                  with the specified mechanism.
      \ This is typically done\n                  by establishing a secure channel
      using TLS, followed\n                  by authenticating once using the [PLAIN]\n
      \                 authentication mechanism.  The selected mechanism\n                  SHOULD
      then work for authentications in subsequent\n                  sessions.\n   Published
      Specification(s):  [RFC5804]\n   Person & email address to contact for further
      information:\n                  Alexey Melnikov <alexey.melnikov@isode.com>\n
      \  Author/Change controller:  IESG.\n   Response Code: TRYLATER\n   Arguments
      (use ABNF to specify syntax, or the word NONE if none can\n   be specified):
      \ NONE\n   Purpose:       A command failed due to a temporary server failure.\n
      \                 The client MAY continue using local information and\n                  try
      the command later.  This response code only make\n                  sense when
      returned in a NO/BYE response.\n   Published Specification(s):  [RFC5804]\n
      \  Person & email address to contact for further information:\n                  Alexey
      Melnikov <alexey.melnikov@isode.com>\n   Author/Change controller:  IESG.\n
      \  Response Code: ACTIVE\n   Arguments (use ABNF to specify syntax, or the word
      NONE if none can\n   be specified):  NONE\n   Purpose:       A command failed
      because it is not allowed on the\n                  active script, for example,
      DELETESCRIPT on the active\n                  script.  This response code only
      makes sense when\n                  returned in a NO/BYE response.\n   Published
      Specification(s):  [RFC5804]\n   Person & email address to contact for further
      information:\n                  Alexey Melnikov <alexey.melnikov@isode.com>\n
      \  Author/Change controller:  IESG.\n   Response Code: NONEXISTENT\n   Arguments
      (use ABNF to specify syntax, or the word NONE if none can\n   be specified):
      \ NONE\n   Purpose:       A command failed because the referenced script name\n
      \                 doesn't exist.  This response code only makes sense\n                  when
      returned in a NO/BYE response.\n   Published Specification(s):  [RFC5804]\n
      \  Person & email address to contact for further information:\n                  Alexey
      Melnikov <alexey.melnikov@isode.com>\n   Author/Change controller:  IESG.\n
      \  Response Code: ALREADYEXISTS\n   Arguments (use ABNF to specify syntax, or
      the word NONE if none can\n   be specified):  NONE\n   Purpose:       A command
      failed because the referenced script name\n                  already exists.
      \ This response code only makes sense\n                  when returned in a
      NO/BYE response.\n   Published Specification(s):  [RFC5804]\n   Person & email
      address to contact for further information:\n                  Alexey Melnikov
      <alexey.melnikov@isode.com>\n   Author/Change controller:  IESG.\n   Response
      Code: WARNINGS\n   Arguments (use ABNF to specify syntax, or the word NONE if
      none can\n   be specified):  NONE\n   Purpose:       This response code MAY
      be returned by the server in\n                  the OK response (but it might
      be returned with the NO/\n                  BYE response as well) and signals
      the client that even\n                  though the script is syntactically valid,
      it might\n                  contain errors not intended by the script writer.\n
      \  Published Specification(s):  [RFC5804]\n   Person & email address to contact
      for further information:\n                  Alexey Melnikov <alexey.melnikov@isode.com>\n
      \  Author/Change controller:  IESG.\n   Response Code: TAG\n   Arguments (use
      ABNF to specify syntax, or the word NONE if none can\n   be specified):  string\n
      \  Purpose:       This response code name is followed by a string\n                  specified
      in the command that caused this response.\n                  It is typically
      used for client state synchronization.\n   Published Specification(s):  [RFC5804]\n
      \  Person & email address to contact for further information:\n                  Alexey
      Melnikov <alexey.melnikov@isode.com>\n   Author/Change controller:  IESG.\n"
    title: 6.4.  Registration of Initial ManageSieve Response Codes
  title: 6.  IANA Considerations
- contents:
  - "7.  Internationalization Considerations\n   The LANGUAGE capability (see Section
    1.7) allows a client to discover\n   the current language used in all human-readable
    responses that might\n   be returned at the end of any OK/NO/BYE response.  Human-readable\n
    \  text in OK responses typically doesn't need to be shown to the user,\n   unless
    it is returned in response to a PUTSCRIPT or CHECKSCRIPT\n   command that also
    contains the WARNINGS response code (Section 1.3).\n   Human-readable text from
    NO/BYE responses is intended be shown to the\n   user, unless the client can automatically
    handle failure of the\n   command that caused such a response.  Clients SHOULD
    use response\n   codes (Section 1.3) for automatic error handling.  Response codes
    MAY\n   also be used by the client to present error messages in a language\n   understood
    by the user, for example, if the LANGUAGE capability\n   doesn't return a language
    understood by the user.\n   Note that the human-readable text from OK (WARNINGS)
    or NO/BYE\n   responses for PUTSCRIPT/CHECKSCRIPT commands is intended for advanced\n
    \  users that understand Sieve language.  Such advanced users are often\n   sophisticated
    enough to be able to handle whatever language the\n   server is using, even if
    it is not their preferred language, and will\n   want to see error/warning text
    no matter what language the server\n   puts it in.\n   A client that generates
    Sieve script automatically, for example, if\n   the script is generated without
    user intervention or from a UI that\n   presents an abstract list of conditions
    and corresponding actions,\n   SHOULD NOT present warning/error messages to the
    user, because the\n   user might not even be aware that the client is using Sieve\n
    \  underneath.  However, if the client has a debugging mode, such\n   warnings/errors
    SHOULD be available in the debugging mode.\n   Note that this document doesn't
    provide a way to modify the currently\n   used language.  It is expected that
    a future extension will address\n   that.\n"
  title: 7.  Internationalization Considerations
- contents:
  - "8.  Acknowledgements\n   Thanks to Simon Josefsson, Larry Greenfield, Allen Johnson,
    Chris\n   Newman, Lyndon Nerenberg, Tim Showalter, Sarah Robeson, Walter Wong,\n
    \  Barry Leiba, Arnt Gulbrandsen, Stephan Bosch, Ken Murchison, Phil\n   Pennock,
    Ned Freed, Jeffrey Hutzelman, Mark E. Mallett, Dilyan\n   Palauzov, Dave Cridland,
    Aaron Stone, Robert Burrell Donkin, Patrick\n   Ben Koetter, Bjoern Hoehrmann,
    Martin Duerst, Pasi Eronen, Magnus\n   Westerlund, Tim Polk, and Julien Coloos
    for help with this document.\n   Special thank you to Phil Pennock for providing
    text for the NOOP\n   command, as well as finding various bugs in the document.\n"
  title: 8.  Acknowledgements
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [ABNF]         Crocker, D. and P. Overell, \"Augmented
      BNF for Syntax\n                  Specifications: ABNF\", STD 68, RFC 5234,
      January 2008.\n   [ACAP]         Newman, C. and J. Myers, \"ACAP -- Application\n
      \                 Configuration Access Protocol\", RFC 2244, November\n                  1997.\n
      \  [BASE64]       Josefsson, S., \"The Base16, Base32, and Base64 Data\n                  Encodings\",
      RFC 4648, October 2006.\n   [DNS-SRV]      Gulbrandsen, A., Vixie, P., and L.
      Esibov, \"A DNS RR\n                  for specifying the location of services
      (DNS SRV)\",\n                  RFC 2782, February 2000.\n   [KEYWORDS]     Bradner,
      S., \"Key words for use in RFCs to Indicate\n                  Requirement Levels\",
      BCP 14, RFC 2119, March 1997.\n   [NET-UNICODE]  Klensin, J. and M. Padlipsky,
      \"Unicode Format for\n                  Network Interchange\", RFC 5198, March
      2008.\n   [NOTIFY]       Melnikov, A., Leiba, B., Segmuller, W., and T. Martin,\n
      \                 \"Sieve Email Filtering: Extension for Notifications\",\n
      \                 RFC 5435, January 2009.\n   [RFC2277]      Alvestrand, H.,
      \"IETF Policy on Character Sets and\n                  Languages\", BCP 18,
      RFC 2277, January 1998.\n   [RFC2460]      Deering, S. and R. Hinden, \"Internet
      Protocol, Version\n                  6 (IPv6) Specification\", RFC 2460, December
      1998.\n   [RFC3490]      Faltstrom, P., Hoffman, P., and A. Costello,\n                  \"Internationalizing
      Domain Names in Applications\n                  (IDNA)\", RFC 3490, March 2003.\n
      \  [RFC4519]      Sciberras, A., \"Lightweight Directory Access Protocol\n                  (LDAP):
      Schema for User Applications\", RFC 4519, June\n                  2006.\n   [RFC5646]
      \     Phillips, A. and M. Davis, \"Tags for Identifying\n                  Languages\",
      BCP 47, RFC 5646, September 2009.\n   [RFC791]       Postel, J., \"Internet
      Protocol\", STD 5, RFC 791,\n                  September 1981.\n   [SASL]         Melnikov,
      A. and K. Zeilenga, \"Simple Authentication\n                  and Security
      Layer (SASL)\", RFC 4422, June 2006.\n   [SASLprep]     Zeilenga, K., \"SASLprep:
      Stringprep Profile for User\n                  Names and Passwords\", RFC 4013,
      February 2005.\n   [SCRAM]        Menon-Sen, A., Melnikov, A., Newman, C., and
      N.\n                  Williams, \"Salted Challenge Response Authentication\n
      \                 Mechanism (SCRAM) SASL and GSS-API Mechanisms\", RFC\n                  5802,
      July 2010.\n   [SIEVE]        Guenther, P. and T. Showalter, \"Sieve: An Email\n
      \                 Filtering Language\", RFC 5228, January 2008.\n   [StringPrep]
      \  Hoffman, P. and M. Blanchet, \"Preparation of\n                  Internationalized
      Strings (\"stringprep\")\", RFC 3454,\n                  December 2002.\n   [TLS]
      \         Dierks, T. and E. Rescorla, \"The Transport Layer\n                  Security
      (TLS) Protocol Version 1.2\", RFC 5246, August\n                  2008.\n   [URI-GEN]
      \     Berners-Lee, T., Fielding, R., and L. Masinter,\n                  \"Uniform
      Resource Identifier (URI): Generic Syntax\",\n                  STD 66, RFC
      3986, January 2005.\n   [UTF-8]        Yergeau, F., \"UTF-8, a transformation
      format of ISO\n                  10646\", STD 63, RFC 3629, November 2003.\n
      \  [X509]         Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n                  Housley,
      R., and W. Polk, \"Internet X.509 Public Key\n                  Infrastructure
      Certificate and Certificate Revocation\n                  List (CRL) Profile\",
      RFC 5280, May 2008.\n   [X509-SRV]     Santesson, S., \"Internet X.509 Public
      Key\n                  Infrastructure Subject Alternative Name for Expression\n
      \                 of Service Name\", RFC 4985, August 2007.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [DIGEST-MD5]   Leach, P. and C. Newman, \"Using
      Digest Authentication\n                  as a SASL Mechanism\", RFC 2831, May
      2000.\n   [GSSAPI]       Melnikov, A., \"The Kerberos V5 (\"GSSAPI\") Simple\n
      \                 Authentication and Security Layer (SASL) Mechanism\",\n                  RFC
      4752, November 2006.\n   [I-HAVE]       Freed, N., \"Sieve Email Filtering:
      Ihave Extension\",\n                  RFC 5463, March 2009.\n   [IMAP]         Crispin,
      M., \"INTERNET MESSAGE ACCESS PROTOCOL -\n                  VERSION 4rev1\",
      RFC 3501, March 2003.\n   [LDAP]         Zeilenga, K., \"Lightweight Directory
      Access Protocol\n                  (LDAP): Technical Specification Road Map\",
      RFC 4510,\n                  June 2006.\n   [PLAIN]        Zeilenga, K., \"The
      PLAIN Simple Authentication and\n                  Security Layer (SASL) Mechanism\",
      RFC 4616, August\n                  2006.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Authors' Addresses\n   Alexey Melnikov (editor)\n   Isode Limited\n   5 Castle
    Business Village\n   36 Station Road\n   Hampton, Middlesex  TW12 2BX\n   UK\n
    \  EMail: Alexey.Melnikov@isode.com\n   Tim Martin\n   BeThereBeSquare, Inc.\n
    \  672 Haight st.\n   San Francisco, CA  94117\n   USA\n   Phone: +1 510 260-4175\n
    \  EMail: timmartin@alumni.cmu.edu\n"
  title: Authors' Addresses
