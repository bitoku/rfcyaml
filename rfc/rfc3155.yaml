- title: __initial_text__
  contents:
  - '        End-to-end Performance Implications of Links with Errors

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document discusses the specific TCP mechanisms that are\n \
    \  problematic in environments with high uncorrected error rates, and\n   discusses\
    \ what can be done to mitigate the problems without\n   introducing intermediate\
    \ devices into the connection.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      1.3 Relationship of this recommendation to Link Layer\n"
- title: 1.0 Introduction
  contents:
  - "1.0 Introduction\n   The rapidly-growing Internet is being accessed by an increasingly\n\
    \   wide range of devices over an increasingly wide variety of links.  At\n  \
    \ least some of these links do not provide the degree of reliability\n   that\
    \ hosts expect, and this expansion into unreliable links causes\n   some Internet\
    \ protocols, especially TCP [RFC793], to perform poorly.\n   Specifically, TCP\
    \ congestion control [RFC2581], while appropriate for\n   connections that lose\
    \ traffic primarily because of congestion and\n   buffer exhaustion, interacts\
    \ badly with uncorrected errors when TCP\n   connections traverse links with high\
    \ uncorrected error rates.  The\n   result is that sending TCPs may spend an excessive\
    \ amount of time\n   waiting for acknowledgement that do not arrive, and then,\
    \ although\n   these losses are not due to congestion-related buffer exhaustion,\
    \ the\n   sending TCP transmits at substantially reduced traffic levels as it\n\
    \   probes the network to determine \"safe\" traffic levels.\n   This document\
    \ does not address issues with other transport protocols,\n   for example, UDP.\n\
    \   Congestion avoidance in the Internet is based on an assumption that\n   most\
    \ packet losses are due to congestion.  TCP's congestion avoidance\n   strategy\
    \ treats the absence of acknowledgement as a congestion\n   signal.  This has\
    \ worked well since it was introduced in 1988 [VJ-\n   DCAC], because most links\
    \ and subnets have relatively low error rates\n   in normal operation, and congestion\
    \ is the primary cause of loss in\n   these environments.  However, links and\
    \ subnets that do not enjoy low\n   uncorrected error rates are becoming more\
    \ prevalent in parts of the\n   Internet.  In particular, these include terrestrial\
    \ and satellite\n   wireless links.  Users relying on traffic traversing these\
    \ links may\n   see poor performance because their TCP connections are spending\n\
    \   excessive time in congestion avoidance and/or slow start procedures\n   triggered\
    \ by packet losses due to transmission errors.\n   The recommendations in this\
    \ document aim at improving utilization of\n   available path capacity over such\
    \ high error-rate links in ways that\n   do not threaten the stability of the\
    \ Internet.\n   Applications use TCP in very different ways, and these have\n\
    \   interactions with TCP's behavior [RFC2861].  Nevertheless, it is\n   possible\
    \ to make some basic assumptions about TCP flows.\n   Accordingly, the mechanisms\
    \ discussed here are applicable to all uses\n   of TCP, albeit in varying degrees\
    \ according to different scenarios\n   (as noted where appropriate).\n   This\
    \ recommendation is based on the explicit assumption that major\n   changes to\
    \ the entire installed base of routers and hosts are not a\n   practical possibility.\
    \  This constrains any changes to hosts that are\n   directly affected by errored\
    \ links.\n"
- title: 1.1 Should you be reading this recommendation?
  contents:
  - "1.1 Should you be reading this recommendation?\n   All known subnetwork technologies\
    \ provide an \"imperfect\" subnetwork\n   service - the bit error rate is non-zero.\
    \  But there's no obvious way\n   for end stations to tell the difference between\
    \ packets discarded due\n   to congestion and losses due to transmission errors.\n\
    \   If a directly-attached subnetwork is reporting transmission errors to\n  \
    \ a host, these reports matter, but we can't rely on explicit\n   transmission\
    \ error reports to both hosts.\n   Another way of deciding if a subnetwork should\
    \ be considered to have\n   a \"high error rate\" is by appealing to mathematics.\n\
    \   An approximate formula for the TCP Reno response function is given in\n  \
    \ [PFTK98]:\n                                s\n   T = --------------------------------------------------\n\
    \       RTT*sqrt(2p/3) + tRTO*(3*sqrt(3p/8))*p*(1 + 32p**2)\n   where\n      \
    \ T = the sending rate in bytes per second\n       s = the packet size in bytes\n\
    \       RTT = round-trip time in seconds\n       tRTO = TCP retransmit timeout\
    \ value in seconds\n       p = steady-state packet loss rate\n   If one plugs\
    \ in an observed packet loss rate, does the math and then\n   sees predicted bandwidth\
    \ utilization that is greater than the link\n   speed, the connection will not\
    \ benefit from recommendations in this\n   document, because the level of packet\
    \ losses being encountered won't\n   affect the ability of TCP to utilize the\
    \ link.  If, however, the\n   predicted bandwidth is less than the link speed,\
    \ packet losses are\n   affecting the ability of TCP to utilize the link.\n  \
    \ If further investigation reveals a subnetwork with significant\n   transmission\
    \ error rates, the recommendations in this document will\n   improve the ability\
    \ of TCP to utilize the link.\n   A few caveats are in order, when doing this\
    \ calculation:\n   (1)   the RTT is the end-to-end RTT, not the link RTT.\n  \
    \ (2)   Max(1.0, 4*RTT) can be substituted as a simplification for\n         tRTO.\n\
    \   (3)   losses may be bursty - a loss rate measured over an interval\n     \
    \    that includes multiple bursty loss events may understate the\n         impact\
    \ of these loss events on the sending rate.\n"
- title: 1.2 Relationship of this recommendation to PEPs
  contents:
  - "1.2 Relationship of this recommendation to PEPs\n   This document discusses end-to-end\
    \ mechanisms that do not require\n   TCP-level awareness by intermediate nodes.\
    \  This places severe\n   limitations on what the end nodes can know about the\
    \ nature of losses\n   that are occurring between the end nodes.  Attempts to\
    \ apply\n   heuristics to distinguish between congestion and transmission error\n\
    \   have not been successful [BV97, BV98, BV98a].  This restriction is\n   relaxed\
    \ in an informational document on Performance Enhancing Proxies\n   (PEPs) [RFC3135].\
    \ Because PEPs can be placed on boundaries where\n   network characteristics change\
    \ dramatically, PEPs have an additional\n   opportunity to improve performance\
    \ over links with uncorrected\n   errors.\n   However, generalized use of PEPs\
    \ contravenes the end-to-end principle\n   and is highly undesirable given their\
    \ deleterious implications, which\n   include the following: lack of fate sharing\
    \ (a PEP adds a third point\n   of failure besides the endpoints themselves),\
    \ end-to-end reliability\n   and diagnostics, preventing end-to-end security (particularly\
    \ network\n   layer security such as IPsec), mobility (handoffs are much more\n\
    \   complex because state must be transferred), asymmetric routing (PEPs\n   typically\
    \ require being on both the forward and reverse paths of a\n   connection), scalability\
    \ (PEPs add more state to maintain), QoS\n   transparency and guarantees.\n  \
    \ Not every type of PEP has all the drawbacks listed above.\n   Nevertheless,\
    \ the use of PEPs may have very serious consequences\n   which must be weighed\
    \ carefully.\n"
- title: 1.3 Relationship of this recommendation to Link Layer Mechanisms
  contents:
  - "1.3 Relationship of this recommendation to Link Layer Mechanisms\n   This recommendation\
    \ is for use with TCP over subnetwork technologies\n   (link layers) that have\
    \ already been deployed.  Subnetworks that are\n   intended to carry Internet\
    \ protocols, but have not been completely\n   specified are the subject of a best\
    \ common practices (BCP) document\n   which has been developed or is under development\
    \ by the Performance\n   Implications of Link Characteristics WG (PILC) [PILC-WEB].\
    \  This last\n   document is aimed at designers who still have the opportunity\
    \ to\n   reduce the number of uncorrected errors TCP will encounter.\n"
- title: 2.0 Errors and Interactions with TCP Mechanisms
  contents:
  - "2.0 Errors and Interactions with TCP Mechanisms\n   A TCP sender adapts its use\
    \ of network path capacity based on\n   feedback from the TCP receiver.  As TCP\
    \ is not able to distinguish\n   between losses due to congestion and losses due\
    \ to uncorrected\n   errors, it is not able to accurately determine available\
    \ path\n   capacity in the presence of significant uncorrected errors.\n"
- title: 2.1 Slow Start and Congestion Avoidance [RFC2581]
  contents:
  - "2.1 Slow Start and Congestion Avoidance [RFC2581]\n   Slow Start and Congestion\
    \ Avoidance [RFC2581] are essential to the\n   current stability of the Internet.\
    \  These mechanisms were designed to\n   accommodate networks that do not provide\
    \ explicit congestion\n   notification.  Although experimental mechanisms such\
    \ as [RFC2481] are\n   moving in the direction of explicit congestion notification,\
    \ the\n   effect of ECN on ECN-aware TCPs is essentially the same as the effect\n\
    \   of implicit congestion notification through congestion-related loss,\n   except\
    \ that ECN provides this notification before packets are lost,\n   and must then\
    \ be retransmitted.\n   TCP connections experiencing high error rates on their\
    \ paths interact\n   badly with Slow Start and with Congestion Avoidance, because\
    \ high\n   error rates make the interpretation of losses ambiguous - the sender\n\
    \   cannot know whether detected losses are due to congestion or to data\n   corruption.\
    \  TCP makes the \"safe\" choice and assumes that the losses\n   are due to congestion.\n\
    \      -  Whenever sending TCPs receive three out-of-order\n         acknowledgement,\
    \ they assume the network is mildly congested\n         and invoke fast retransmit/fast\
    \ recovery (described below).\n      -  Whenever TCP's retransmission timer expires,\
    \ the sender assumes\n         that the network is congested and invokes slow\
    \ start.\n      -  Less-reliable link layers often use small link MTUs.  This\n\
    \         slows the rate of increase in the sender's window size during\n    \
    \     slow start, because the sender's window is increased in units\n        \
    \ of segments.  Small link MTUs alone don't improve reliability.\n         Path\
    \ MTU discovery [RFC1191] must also be used to prevent\n         fragmentation.\
    \  Path MTU discovery allows the most rapid\n         opening of the sender's\
    \ window size during slow start, but a\n         number of round trips may still\
    \ be required to open the window\n         completely.\n   Recommendation: Any\
    \ standards-conformant TCP will implement Slow\n   Start and Congestion Avoidance,\
    \ which are MUSTs in STD 3 [RFC1122].\n   Recommendations in this document will\
    \ not interfere with these\n   mechanisms.\n"
- title: 2.2 Fast Retransmit and Fast Recovery [RFC2581]
  contents:
  - "2.2 Fast Retransmit and Fast Recovery [RFC2581]\n   TCP provides reliable delivery\
    \ of data as a byte-stream to an\n   application, so that when a segment is lost\
    \ (whether due to either\n   congestion or transmission loss), the receiver TCP\
    \ implementation\n   must wait to deliver data to the receiving application until\
    \ the\n   missing data is received.  The receiver TCP implementation detects\n\
    \   missing segments by segments arriving with out-of-order sequence\n   numbers.\n\
    \   TCPs should immediately send an acknowledgement when data is received\n  \
    \ out-of-order [RFC2581], providing the next expected sequence number\n   with\
    \ no delay, so that the sender can retransmit the required data as\n   quickly\
    \ as possible and the receiver can resume delivery of data to\n   the receiving\
    \ application.  When an acknowledgement carries the same\n   expected sequence\
    \ number as an acknowledgement that has already been\n   sent for the last in-order\
    \ segment received, these acknowledgement\n   are called \"duplicate ACKs\".\n\
    \   Because IP networks are allowed to reorder packets, the receiver may\n   send\
    \ duplicate acknowledgments for segments that arrive out of order\n   due to routing\
    \ changes, link-level retransmission, etc.  When a TCP\n   sender receives three\
    \ duplicate ACKs, fast retransmit [RFC2581]\n   allows it to infer that a segment\
    \ was lost.  The sender retransmits\n   what it considers to be this lost segment\
    \ without waiting for the\n   full retransmission timeout, thus saving time.\n\
    \   After a fast retransmit, a sender halves its congestion window and\n   invokes\
    \ the fast recovery [RFC2581] algorithm, whereby it invokes\n   congestion avoidance\
    \ from a halved congestion window, but does not\n   invoke slow start from a one-segment\
    \ congestion window as it would do\n   after a retransmission timeout.  As the\
    \ sender is still receiving\n   dupacks, it knows the receiver is receiving packets\
    \ sent, so the full\n   reduction after a timeout when no communication has been\
    \ received is\n   not called for.  This relatively safe optimization also saves\
    \ time.\n   It is important to be realistic about the maximum throughput that\
    \ TCP\n   can have over a connection that traverses a high error-rate link.  In\n\
    \   general, TCP will increase its congestion window beyond the delay-\n   bandwidth\
    \ product.  TCP's congestion avoidance strategy is additive-\n   increase, multiplicative-decrease,\
    \ which means that if additional\n   errors are encountered before the congestion\
    \ window recovers\n   completely from a 50-percent reduction, the effect can be\
    \ a \"downward\n   spiral\" of the congestion window due to additional 50-percent\n\
    \   reductions.  Even using Fast Retransmit/Fast Recovery, the sender\n   will\
    \ halve the congestion window each time a window contains one or\n   more segments\
    \ that are lost, and will re-open the window by one\n   additional segment for\
    \ each congestion window's worth of\n   acknowledgement received.\n   If a connection's\
    \ path traverses a link that loses one or more\n   segments during this recovery\
    \ period, the one-half reduction takes\n   place again, this time on a reduced\
    \ congestion window - and this\n   downward spiral will continue to hold the congestion\
    \ window below\n   path capacity until the connection is able to recover completely\
    \ by\n   additive increase without experiencing loss.\n   Of course, no downward\
    \ spiral occurs if the error rate is constantly\n   high and the congestion window\
    \ always remains small; the\n   multiplicative-increase \"slow start\" will be\
    \ exited early, and the\n   congestion window remains low for the duration of\
    \ the TCP connection.\n   In links with high error rates, the TCP window may remain\
    \ rather\n   small for long periods of time.\n   Not all causes of small windows\
    \ are related to errors.  For example,\n   HTTP/1.0 commonly closes TCP connections\
    \ to indicate boundaries\n   between requested resources.  This means that these\
    \ applications are\n   constantly closing \"trained\" TCP connections and opening\
    \ \"untrained\"\n   TCP connections which will execute slow start, beginning with\
    \ one or\n   two segments.  This can happen even with HTTP/1.1, if webmasters\n\
    \   configure their HTTP/1.1 servers to close connections instead of\n   waiting\
    \ to see if the connection will be useful again.\n   A small window - especially\
    \ a window of less than four segments -\n   effectively prevents the sender from\
    \ taking advantage of Fast\n   Retransmits.  Moreover, efficient recovery from\
    \ multiple losses\n   within a single window requires adoption of new proposals\
    \ (NewReno\n   [RFC2582]).\n   Recommendation: Implement Fast Retransmit and Fast\
    \ Recovery at this\n   time.  This is a widely-implemented optimization and is\
    \ currently at\n   Proposed Standard level.  [RFC2488] recommends implementation\
    \ of Fast\n   Retransmit/Fast Recovery in satellite environments.\n"
- title: 2.3 Selective Acknowledgements [RFC2018, RFC2883]
  contents:
  - "2.3 Selective Acknowledgements [RFC2018, RFC2883]\n   Selective Acknowledgements\
    \ [RFC2018] allow the repair of multiple\n   segment losses per window without\
    \ requiring one (or more) round-trips\n   per loss.\n   [RFC2883] proposes a minor\
    \ extension to SACK that allows receiving\n   TCPs to provide more information\
    \ about the order of delivery of\n   segments, allowing \"more robust operation\
    \ in an environment of\n   reordered packets, ACK loss, packet replication, and/or\
    \ early\n   retransmit timeouts\".  Unless explicitly stated otherwise, in this\n\
    \   document, \"Selective Acknowledgements\" (or \"SACK\") refers to the\n   combination\
    \ of [RFC2018] and [RFC2883].\n   Selective acknowledgments are most useful in\
    \ LFNs (\"Long Fat\n   Networks\") because of the long round trip times that may\
    \ be\n   encountered in these environments, according to Section 1.1 of\n   [RFC1323],\
    \ and are especially useful if large windows are required,\n   because there is\
    \ a higher probability of multiple segment losses per\n   window.\n   On the other\
    \ hand, if error rates are generally low but occasionally\n   higher due to channel\
    \ conditions, TCP will have the opportunity to\n   increase its window to larger\
    \ values during periods of improved\n   channel conditions between bursts of errors.\
    \  When bursts of errors\n   occur, multiple losses within a window are likely\
    \ to occur.  In this\n   case, SACK would provide benefits in speeding the recovery\
    \ and\n   preventing unnecessary reduction of the window size.\n   Recommendation:\
    \ Implement SACK as specified in [RFC2018] and updated\n   by [RFC2883], both\
    \ Proposed Standards.  In cases where SACK cannot be\n   enabled for both sides\
    \ of a connection, TCP senders may use NewReno\n   [RFC2582] to better handle\
    \ partial ACKs and multiple losses within a\n   single window.\n"
- title: 3.0 Summary of Recommendations
  contents:
  - "3.0 Summary of Recommendations\n   The Internet does not provide a widely-available\
    \ loss feedback\n   mechanism that allows TCP to distinguish between congestion\
    \ loss and\n   transmission error.  Because congestion affects all traffic on\
    \ a path\n   while transmission loss affects only the specific traffic\n   encountering\
    \ uncorrected errors, avoiding congestion has to take\n   precedence over quickly\
    \ repairing transmission errors.  This means\n   that the best that can be achieved\
    \ without new feedback mechanisms is\n   minimizing the amount of time that is\
    \ spent unnecessarily in\n   congestion avoidance.\n   The Fast Retransmit/Fast\
    \ Recovery mechanism allows quick repair of\n   loss without giving up the safety\
    \ of congestion avoidance.  In order\n   for Fast Retransmit/Fast Recovery to\
    \ work, the window size must be\n   large enough to force the receiver to send\
    \ three duplicate\n   acknowledgments before the retransmission timeout interval\
    \ expires,\n   forcing full TCP slow-start.\n   Selective Acknowledgements (SACK)\
    \ extend the benefit of Fast\n   Retransmit/Fast Recovery to situations where\
    \ multiple segment losses\n   in the window need to be repaired more quickly than\
    \ can be\n   accomplished by executing Fast Retransmit for each segment loss,\
    \ only\n   to discover the next segment loss.\n   These mechanisms are not limited\
    \ to wireless environments.  They are\n   usable in all environments.\n"
- title: 4.0 Topics For Further Work
  contents:
  - "4.0 Topics For Further Work\n   \"Limited Transmit\" [RFC3042] has been specified\
    \ as an optimization\n   extending Fast Retransmit/Fast Recovery for TCP connections\
    \ with\n   small congestion windows that will not trigger three duplicate\n  \
    \ acknowledgments.  This specification is deemed safe, and it also\n   provides\
    \ benefits for TCP connections that experience a large amount\n   of packet (data\
    \ or ACK) loss.  Implementors should evaluate this\n   standards track specification\
    \ for TCP in loss environments.\n   Delayed Duplicate Acknowledgements [MV97,\
    \ VMPM99] attempts to prevent\n   TCP-level retransmission when link-level retransmission\
    \ is still in\n   progress, adding additional traffic to the network.  This proposal\
    \ is\n   worthy of additional study, but is not recommended at this time,\n  \
    \ because we don't know how to calculate appropriate amounts of delay\n   for\
    \ an arbitrary network topology.\n   It is not possible to use explicit congestion\
    \ notification [RFC2481]\n   as a surrogate for explicit transmission error notification\
    \ (no\n   matter how much we wish it was!).  Some mechanism to provide explicit\n\
    \   notification of transmission error would be very helpful.  This might\n  \
    \ be more easily provided in a PEP environment, especially when the PEP\n   is\
    \ the \"first hop\" in a connection path, because current checksum\n   mechanisms\
    \ do not distinguish between transmission error to a payload\n   and transmission\
    \ error to the header.  Furthermore, if the header is\n   damaged, sending explicit\
    \ transmission error notification to the\n   right endpoint is problematic.\n\
    \   Losses that take place on the ACK stream, especially while a TCP is\n   learning\
    \ network characteristics, can make the data stream quite\n   bursty (resulting\
    \ in losses on the data stream, as well).  Several\n   ways of limiting this burstiness\
    \ have been proposed, including TCP\n   transmit pacing at the sender and ACK\
    \ rate control within the\n   network.\n   \"Appropriate Byte Counting\" (ABC)\
    \ [ALL99], has been proposed as a way\n   of opening the congestion window based\
    \ on the number of bytes that\n   have been successfully transfered to the receiver,\
    \ giving more\n   appropriate behavior for application protocols that initiate\n\
    \   connections with relatively short packets.  For SMTP [RFC2821], for\n   instance,\
    \ the client might send a short HELO packet, a short MAIL\n   packet, one or more\
    \ short RCPT packets, and a short DATA packet -\n   followed by the entire mail\
    \ body sent as maximum-length packets.  An\n   ABC TCP sender would not use ACKs\
    \ for each of these short packets to\n   increase the congestion window to allow\
    \ additional full-length\n   packets.  ABC is worthy of additional study, but\
    \ is not recommended\n   at this time, because ABC can lead to increased burstiness\
    \ when\n   acknowledgments are lost.\n"
- title: 4.1 Achieving, and maintaining, large windows
  contents:
  - "4.1 Achieving, and maintaining, large windows\n   The recommendations described\
    \ in this document will aid TCPs in\n   injecting packets into ERRORed connections\
    \ as fast as possible\n   without destabilizing the Internet, and so optimizing\
    \ the use of\n   available bandwidth.\n   In addition to these TCP-level recommendations,\
    \ there is still\n   additional work to do at the application level, especially\
    \ with the\n   dominant application protocol on the World Wide Web, HTTP.\n  \
    \ HTTP/1.0 (and earlier versions) closes TCP connections to signal a\n   receiver\
    \ that all of a requested resource had been transmitted.\n   Because WWW objects\
    \ tend to be small in size [MOGUL], TCPs carrying\n   HTTP/1.0 traffic experience\
    \ difficulty in \"training\" on available\n   path capacity (a substantial portion\
    \ of the transfer has already\n   happened by the time TCP exits slow start).\n\
    \   Several HTTP modifications have been introduced to improve this\n   interaction\
    \ with TCP (\"persistent connections\" in HTTP/1.0, with\n   improvements in HTTP/1.1\
    \ [RFC2616]).  For a variety of reasons, many\n   HTTP interactions are still\
    \ HTTP/1.0-style - relatively short-lived.\n   Proposals which reuse TCP congestion\
    \ information across connections,\n   like TCP Control Block Interdependence [RFC2140],\
    \ or the more recent\n   Congestion Manager [BS00] proposal, will have the effect\
    \ of making\n   multiple parallel connections impact the network as if they were\
    \ a\n   single connection, \"trained\" after a single startup transient.  These\n\
    \   proposals are critical to the long-term stability of the Internet,\n   because\
    \ today's users always have the choice of clicking on the\n   \"reload\" button\
    \ in their browsers and cutting off TCP's exponential\n   backoff - replacing\
    \ connections which are building knowledge of the\n   available bandwidth with\
    \ connections with no knowledge at all.\n"
- title: 5.0 Security Considerations
  contents:
  - "5.0 Security Considerations\n   A potential vulnerability introduced by Fast\
    \ Retransmit/Fast Recovery\n   is (as pointed out in [RFC2581]) that an attacker\
    \ may force TCP\n   connections to grind to a halt, or, more dangerously, behave\
    \ more\n   aggressively.  The latter possibility may lead to congestion\n   collapse,\
    \ at least in some regions of the network.\n   Selective acknowledgments is believed\
    \ to neither strengthen nor\n   weaken TCP's current security properties [RFC2018].\n\
    \   Given that the recommendations in this document are performed on an\n   end-to-end\
    \ basis, they continue working even in the presence of end-\n   to-end IPsec.\
    \  This is in direct contrast with mechanisms such as\n   PEP's which are implemented\
    \ in intermediate nodes (section 1.2).\n"
- title: 6.0 IANA Considerations
  contents:
  - "6.0 IANA Considerations\n   This document is a pointer to other, existing IETF\
    \ standards.  There\n   are no new IANA considerations.\n"
- title: 7.0 Acknowledgements
  contents:
  - "7.0 Acknowledgements\n   This recommendation has grown out of RFC 2757, \"Long\
    \ Thin Networks\",\n   which was in turn based on work done in the IETF TCPSAT\
    \ working\n   group.  The authors are indebted to the active members of the PILC\n\
    \   working group.  In particular, Mark Allman and Lloyd Wood gave us\n   copious\
    \ and insightful feedback, and Dan Grossman and Jamshid Mahdavi\n   provided text\
    \ replacements.\n"
- title: References
  contents:
  - "References\n   [ALL99]    M. Allman, \"TCP Byte Counting Refinements,\" ACM Computer\n\
    \              Communication Review, Volume 29, Number 3, July 1999.\n       \
    \       http://www.acm.org/sigcomm/ccr/archive/ccr-toc/ccr-toc-\n            \
    \  99.html\n   [BS00]     Balakrishnan, H. and S. Seshan, \"The Congestion Manager\"\
    ,\n              RFC 3124, June 2001.\n   [BV97]     S. Biaz and N. Vaidya, \"\
    Using End-to-end Statistics to\n              Distinguish Congestion and Corruption\
    \ Losses: A Negative\n              Result,\" Texas A&M University, Technical\
    \ Report 97-009,\n              August 18, 1997.\n   [BV98]     S. Biaz and N.\
    \ Vaidya, \"Sender-Based heuristics for\n              Distinguishing Congestion\
    \ Losses from Wireless\n              Transmission Losses,\" Texas A&M University,\
    \ Technical\n              Report 98-013, June 1998.\n   [BV98a]    S. Biaz and\
    \ N. Vaidya, \"Discriminating Congestion Losses\n              from Wireless Losses\
    \ using Inter-Arrival Times at the\n              Receiver,\" Texas A&M University,\
    \ Technical Report 98-014,\n              June 1998.\n   [MOGUL]    \"The Case\
    \ for Persistent-Connection HTTP\", J. C. Mogul,\n              Research Report\
    \ 95/4, May 1995. Available as\n              http://www.research.digital.com/wrl/techreports/abstracts/\n\
    \              95.4.html\n   [MV97]     M. Mehta and N. Vaidya, \"Delayed Duplicate-\n\
    \              Acknowledgements:  A Proposal to Improve Performance of\n     \
    \         TCP on Wireless Links,\" Texas A&M University, December 24,\n      \
    \        1997.  Available at\n              http://www.cs.tamu.edu/faculty/vaidya/mobile.html\n\
    \   [PILC-WEB] http://pilc.grc.nasa.gov/\n   [PFTK98]   Padhye, J., Firoiu, V.,\
    \ Towsley, D. and J.Kurose, \"TCP\n              Throughput: A simple model and\
    \ its empirical validation\",\n              SIGCOMM Symposium on Communications\
    \ Architectures and\n              Protocols, August 1998.\n   [RFC793]   Postel,\
    \ J., \"Transmission Control Protocol\", STD 7, RFC\n              793, September\
    \ 1981.\n   [RFC2821]  Klensin, J., Editor, \"Simple Mail Transfer Protocol\"\
    , RFC\n              2821, April 2001.\n   [RFC1122]  Braden, R., \"Requirements\
    \ for Internet Hosts --\n              Communication Layers\", STD 3, RFC 1122,\
    \ October 1989.\n   [RFC1191]  Mogul J., and S. Deering, \"Path MTU Discovery\"\
    , RFC 1191,\n              November 1990.\n   [RFC1323]  Jacobson, V., Braden,\
    \ R. and D. Borman. \"TCP Extensions\n              for High Performance\", RFC\
    \ 1323, May 1992.\n   [RFC2018]  Mathis, M., Mahdavi, J., Floyd, S. and A. Romanow\
    \ \"TCP\n              Selective Acknowledgment Options\", RFC 2018, October 1996.\n\
    \   [RFC2140]  Touch, J., \"TCP Control Block Interdependence\", RFC 2140,\n \
    \             April 1997.\n   [RFC2309]  Braden, B., Clark, D., Crowcrfot, J.,\
    \ Davie, B., Deering,\n              S., Estrin, D., Floyd, S., Jacobson, V.,\
    \ Minshall, G.,\n              Partridge, C., Peterson, L., Ramakrishnan, K.,\
    \ Shecker,\n              S., Wroclawski, J. and L, Zhang, \"Recommendations on\
    \ Queue\n              Management and Congestion Avoidance in the Internet\",\
    \ RFC\n              2309, April 1998.\n   [RFC2481]  Ramakrishnan K. and S. Floyd,\
    \ \"A Proposal to add Explicit\n              Congestion Notification (ECN) to\
    \ IP\", RFC 2481, January\n              1999.\n   [RFC2488]  Allman, M., Glover,\
    \ D. and L. Sanchez. \"Enhancing TCP Over\n              Satellite Channels using\
    \ Standard Mechanisms\", BCP 28, RFC\n              2488, January 1999.\n   [RFC2581]\
    \  Allman, M., Paxson, V. and W. Stevens, \"TCP Congestion\n              Control\"\
    , RFC 2581, April 1999.\n   [RFC2582]  Floyd, S. and T. Henderson, \"The NewReno\
    \ Modification to\n              TCP's Fast Recovery Algorithm\", RFC 2582, April\
    \ 1999.\n   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n   \
    \           Masinter, L., Leach P. and T. Berners-Lee, \"Hypertext\n         \
    \     Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC2861]  Handley,\
    \ H., Padhye, J. and S., Floyd, \"TCP Congestion\n              Window Validation\"\
    , RFC 2861, June 2000.\n   [RFC2883]  Floyd, S., Mahdavi, M., Mathis, M. and M.\
    \ Podlosky, \"An\n              Extension to the Selective Acknowledgement (SACK)\
    \ Option\n              for TCP\", RFC 2883, August 1999.\n   [RFC2923]  Lahey,\
    \ K., \"TCP Problems with Path MTU Discovery\", RFC\n              2923, September\
    \ 2000.\n   [RFC3042]  Allman, M., Balakrishnan, H. and S. Floyd, \"Enhancing\n\
    \              TCP's Loss Recovery Using Limited Transmit\", RFC 3042,\n     \
    \         January, 2001.\n   [RFC3135]  Border, J., Kojo, M., Griner, J., Montenegro,\
    \ G. and Z.\n              Shelby, \"Performance Enhancing Proxies Intended to\n\
    \              Mitigate Link-Related Degradations\", RFC 3135, June 2001.\n  \
    \ [VJ-DCAC]  Jacobson, V., \"Dynamic Congestion Avoidance / Control\" e-\n   \
    \           mail dated February 11, 1988, available from\n              http://www.kohala.com/~rstevens/vanj.88feb11.txt\n\
    \   [VMPM99]   N. Vaidya, M. Mehta, C. Perkins, and G. Montenegro,\n         \
    \     \"Delayed Duplicate Acknowledgements: A TCP-Unaware\n              Approach\
    \ to Improve Performance of TCP over Wireless,\"\n              Technical Report\
    \ 99-003, Computer Science Dept., Texas A&M\n              University, February\
    \ 1999. Also, to appear in Journal of\n              Wireless Communications and\
    \ Wireless Computing (Special\n              Issue on Reliable Transport Protocols\
    \ for Mobile\n              Computing).\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Questions about this document may be directed to:\n  \
    \ Spencer Dawkins\n   Fujitsu Network Communications\n   2801 Telecom Parkway\n\
    \   Richardson, Texas 75082\n   Phone: +1-972-479-3782\n   EMail: spencer.dawkins@fnc.fujitsu.com\n\
    \   Gabriel E. Montenegro\n   Sun Microsystems\n   Laboratories, Europe\n   29,\
    \ chemin du Vieux Chene\n   38240 Meylan\n   FRANCE\n   Phone: +33 476 18 80 45\n\
    \   EMail: gab@sun.com\n   Markku Kojo\n   Department of Computer Science\n  \
    \ University of Helsinki\n   P.O. Box 26 (Teollisuuskatu 23)\n   FIN-00014 HELSINKI\n\
    \   Finland\n   Phone: +358-9-1914-4179\n   EMail: kojo@cs.helsinki.fi\n   Vincent\
    \ Magret\n   Alcatel Internetworking, Inc.\n   26801 W. Agoura road\n   Calabasas,\
    \ CA, 91301\n   Phone: +1 818 878 4485\n   EMail: vincent.magret@alcatel.com\n\
    \   Nitin H. Vaidya\n   458 Coodinated Science Laboratory, MC-228\n   1308 West\
    \ Main Street\n   Urbana, IL 61801\n   Phone: 217-265-5414\n   E-mail: nhv@crhc.uiuc.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
