- title: __initial_text__
  contents:
  - "               Internet X.509 Public Key Infrastructure\n                 Certificate\
    \ Management Protocol (CMP)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Internet X.509 Public Key Infrastructure\n\
    \   (PKI) Certificate Management Protocol (CMP).  Protocol messages are\n   defined\
    \ for X.509v3 certificate creation and management.  CMP\n   provides on-line interactions\
    \ between PKI components, including an\n   exchange between a Certification Authority\
    \ (CA) and a client system.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................5\n\
    \   2. Requirements ....................................................5\n  \
    \ 3. PKI Management Overview .........................................5\n    \
    \  3.1. PKI Management Model .......................................6\n      \
    \     3.1.1. Definitions of PKI Entities .........................6\n        \
    \          3.1.1.1. Subjects and End Entities ..................6\n          \
    \        3.1.1.2. Certification Authority ....................7\n            \
    \      3.1.1.3. Registration Authority .....................7\n           3.1.2.\
    \ PKI Management Requirements .........................8\n           3.1.3. PKI\
    \ Management Operations ..........................10\n   4. Assumptions and Restrictions\
    \ ...................................14\n      4.1. End Entity Initialization\
    \ .................................14\n      4.2. Initial Registration/Certification\
    \ ........................14\n           4.2.1. Criteria Used ......................................15\n\
    \                  4.2.1.1. Initiation of Registration/Certification ..15\n  \
    \                4.2.1.2. End Entity Message Origin Authentication ..15\n    \
    \              4.2.1.3. Location of Key Generation ................15\n      \
    \            4.2.1.4. Confirmation of Successful Certification ..16\n        \
    \   4.2.2. Mandatory Schemes ..................................16\n          \
    \        4.2.2.1. Centralized Scheme ........................16\n            \
    \      4.2.2.2. Basic Authenticated Scheme ................17\n      4.3. Proof-of-Possession\
    \ (POP) of Private Key ..................17\n           4.3.1. Signature Keys\
    \ .....................................18\n           4.3.2. Encryption Keys ....................................18\n\
    \           4.3.3. Key Agreement Keys .................................19\n  \
    \    4.4. Root CA Key Update ........................................19\n    \
    \       4.4.1. CA Operator Actions ................................20\n      \
    \     4.4.2. Verifying Certificates .............................21\n        \
    \          4.4.2.1. Verification in Cases 1, 4, 5, and 8 ......22\n          \
    \        4.4.2.2. Verification in Case 2 ....................22\n            \
    \      4.4.2.3. Verification in Case 3 ....................23\n              \
    \    4.4.2.4. Failure of Verification in Case 6 .........23\n                \
    \  4.4.2.5. Failure of Verification in Case 7 .........23\n           4.4.3. Revocation\
    \ - Change of CA Key ......................23\n   5. Data Structures ................................................24\n\
    \      5.1. Overall PKI Message .......................................24\n  \
    \         5.1.1. PKI Message Header .................................24\n    \
    \              5.1.1.1. ImplicitConfirm ...........................27\n      \
    \            5.1.1.2. ConfirmWaitTime ...........................27\n        \
    \   5.1.2. PKI Message Body ...................................27\n          \
    \ 5.1.3. PKI Message Protection .............................28\n            \
    \      5.1.3.1. Shared Secret Information .................29\n              \
    \    5.1.3.2. DH Key Pairs ..............................30\n                \
    \  5.1.3.3. Signature .................................30\n                  5.1.3.4.\
    \ Multiple Protection .......................30\n      5.2. Common Data Structures\
    \ ....................................31\n           5.2.1. Requested Certificate\
    \ Contents .....................31\n           5.2.2. Encrypted Values ...................................31\n\
    \           5.2.3. Status codes and Failure Information for\n                \
    \  PKI Messages .......................................32\n           5.2.4. Certificate\
    \ Identification .........................33\n           5.2.5. Out-of-band root\
    \ CA Public Key .....................33\n           5.2.6. Archive Options ....................................34\n\
    \           5.2.7. Publication Information ............................34\n  \
    \         5.2.8. Proof-of-Possession Structures .....................34\n    \
    \              5.2.8.1. Inclusion of the Private Key ..............35\n      \
    \            5.2.8.2. Indirect Method ...........................35\n        \
    \          5.2.8.3. Challenge-Response Protocol ...............35\n          \
    \        5.2.8.4. Summary of PoP Options ....................37\n      5.3. Operation-Specific\
    \ Data Structures ........................38\n           5.3.1. Initialization\
    \ Request .............................38\n           5.3.2. Initialization Response\
    \ ............................39\n           5.3.3. Certification Request ..............................39\n\
    \           5.3.4. Certification Response .............................39\n  \
    \         5.3.5. Key Update Request Content .........................40\n    \
    \       5.3.6. Key Update Response Content ........................41\n      \
    \     5.3.7. Key Recovery Request Content .......................41\n        \
    \   5.3.8. Key Recovery Response Content ......................41\n          \
    \ 5.3.9. Revocation Request Content .........................41\n           5.3.10.\
    \ Revocation Response Content .......................42\n           5.3.11. Cross\
    \ Certification Request Content ...............42\n           5.3.12. Cross Certification\
    \ Response Content ..............42\n           5.3.13. CA Key Update Announcement\
    \ Content ................42\n           5.3.14. Certificate Announcement ..........................43\n\
    \           5.3.15. Revocation Announcement ...........................43\n  \
    \         5.3.16. CRL Announcement ..................................43\n    \
    \       5.3.17. PKI Confirmation Content ..........................43\n      \
    \     5.3.18. Certificate Confirmation Content ..................44\n        \
    \   5.3.19. PKI General Message Content .......................44\n          \
    \        5.3.19.1. CA Protocol Encryption Certificate .......44\n            \
    \      5.3.19.2. Signing Key Pair Types ...................45\n              \
    \    5.3.19.3. Encryption/Key Agreement Key Pair Types ..45\n                \
    \  5.3.19.4. Preferred Symmetric Algorithm ............45\n                  5.3.19.5.\
    \ Updated CA Key Pair ......................45\n                  5.3.19.6. CRL\
    \ ......................................46\n                  5.3.19.7. Unsupported\
    \ Object Identifiers ...........46\n                  5.3.19.8. Key Pair Parameters\
    \ ......................46\n                  5.3.19.9. Revocation Passphrase\
    \ ....................46\n                  5.3.19.10. ImplicitConfirm .........................46\n\
    \                  5.3.19.11. ConfirmWaitTime .........................47\n  \
    \                5.3.19.12. Original PKIMessage .....................47\n    \
    \              5.3.19.13. Supported Language Tags .................47\n      \
    \     5.3.20. PKI General Response Content ......................47\n        \
    \   5.3.21. Error Message Content .............................47\n          \
    \ 5.3.22. Polling Request and Response ......................48\n   6. Mandatory\
    \ PKI Management Functions .............................51\n      6.1. Root CA\
    \ Initialization ....................................51\n      6.2. Root CA Key\
    \ Update ........................................51\n      6.3. Subordinate CA\
    \ Initialization .............................51\n      6.4. CRL production ............................................52\n\
    \      6.5. PKI Information Request ...................................52\n  \
    \    6.6. Cross Certification .......................................52\n    \
    \       6.6.1. One-Way Request-Response Scheme: ...................52\n      6.7.\
    \ End Entity Initialization .................................54\n           6.7.1.\
    \ Acquisition of PKI Information .....................54\n           6.7.2. Out-of-Band\
    \ Verification of Root-CA Key ............55\n      6.8. Certificate Request .......................................55\n\
    \      6.9. Key Update ................................................55\n  \
    \ 7. Version Negotiation ............................................56\n    \
    \  7.1. Supporting RFC 2510 Implementations .......................56\n      \
    \     7.1.1. Clients Talking to RFC 2510 Servers ................56\n        \
    \   7.1.2. Servers Receiving Version cmp1999 PKIMessages ......57\n   8. Security\
    \ Considerations ........................................57\n      8.1. Proof-Of-Possession\
    \ with a Decryption Key .................57\n      8.2. Proof-Of-Possession by\
    \ Exposing the Private Key ...........57\n      8.3. Attack Against Diffie-Hellman\
    \ Key Exchange ................57\n   9. IANA Considerations ............................................58\n\
    \   Normative References ..............................................58\n  \
    \ Informative References ............................................59\n   A.\
    \ Reasons for the Presence of RAs ................................61\n   B. The\
    \ Use of Revocation Passphrase ...............................61\n   C. Request\
    \ Message Behavioral Clarifications ......................63\n   D. PKI Management\
    \ Message Profiles (REQUIRED) .....................65\n      D.1. General Rules\
    \ for Interpretation of These Profiles ........65\n      D.2. Algorithm Use Profile\
    \ .....................................66\n      D.3. Proof-of-Possession Profile\
    \ ...............................68\n      D.4. Initial Registration/Certification\
    \ (Basic\n           Authenticated Scheme) .....................................68\n\
    \      D.5. Certificate Request .......................................74\n  \
    \    D.6. Key Update Request ........................................75\n   E.\
    \ PKI Management Message Profiles (OPTIONAL) .....................75\n      E.1.\
    \ General Rules for Interpretation of These Profiles ........76\n      E.2. Algorithm\
    \ Use Profile .....................................76\n      E.3. Self-Signed\
    \ Certificates ..................................76\n      E.4. Root CA Key Update\
    \ ........................................77\n      E.5. PKI Information Request/Response\
    \ ..........................77\n      E.6. Cross Certification Request/Response\
    \ (1-way) ..............79\n      E.7. In-Band Initialization Using External Identity\n\
    \           Certificate  ..............................................82\n  \
    \ F. Compilable ASN.1 Definitions ...................................83\n   G.\
    \ Acknowledgements ...............................................93\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes the Internet X.509 Public Key Infrastructure\n\
    \   (PKI) Certificate Management Protocol (CMP).  Protocol messages are\n   defined\
    \ for certificate creation and management.  The term\n   \"certificate\" in this\
    \ document refers to an X.509v3 Certificate as\n   defined in [X509].\n   This\
    \ specification obsoletes RFC 2510.  This specification differs\n   from RFC 2510\
    \ in the following areas:\n      The PKI management message profile section is\
    \ split to two\n      appendices: the required profile and the optional profile.\
    \  Some\n      of the formerly mandatory functionality is moved to the optional\n\
    \      profile.\n      The message confirmation mechanism has changed substantially.\n\
    \      A new polling mechanism is introduced, deprecating the old polling\n  \
    \    method at the CMP transport level.\n      The CMP transport protocol issues\
    \ are handled in a separate\n      document [CMPtrans], thus the Transports section\
    \ is removed.\n      A new implicit confirmation method is introduced to reduce\
    \ the\n      number of protocol messages exchanged in a transaction.\n      The\
    \ new specification contains some less prominent protocol\n      enhancements\
    \ and improved explanatory text on several issues.\n"
- title: 2.  Requirements
  contents:
  - "2.  Requirements\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHOULD\"\
    , \"SHOULD NOT\",\n   \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document\
    \ (in uppercase,\n   as shown) are to be interpreted as described in [RFC2119].\n"
- title: 3.  PKI Management Overview
  contents:
  - "3.  PKI Management Overview\n   The PKI must be structured to be consistent with\
    \ the types of\n   individuals who must administer it.  Providing such administrators\n\
    \   with unbounded choices not only complicates the software required,\n   but\
    \ also increases the chances that a subtle mistake by an\n   administrator or\
    \ software developer will result in broader\n   compromise.  Similarly, restricting\
    \ administrators with cumbersome\n   mechanisms will cause them not to use the\
    \ PKI.\n   Management protocols are REQUIRED to support on-line interactions\n\
    \   between Public Key Infrastructure (PKI) components.  For example, a\n   management\
    \ protocol might be used between a Certification Authority\n   (CA) and a client\
    \ system with which a key pair is associated, or\n   between two CAs that issue\
    \ cross-certificates for each other.\n"
- title: 3.1.  PKI Management Model
  contents:
  - "3.1.  PKI Management Model\n   Before specifying particular message formats and\
    \ procedures, we first\n   define the entities involved in PKI management and\
    \ their interactions\n   (in terms of the PKI management functions required).\
    \  We then group\n   these functions in order to accommodate different identifiable\
    \ types\n   of end entities.\n"
- title: 3.1.1.  Definitions of PKI Entities
  contents:
  - "3.1.1.  Definitions of PKI Entities\n   The entities involved in PKI management\
    \ include the end entity (i.e.,\n   the entity to whom the certificate is issued)\
    \ and the certification\n   authority (i.e., the entity that issues the certificate).\
    \  A\n   registration authority MAY also be involved in PKI management.\n"
- title: 3.1.1.1.  Subjects and End Entities
  contents:
  - "3.1.1.1.  Subjects and End Entities\n   The term \"subject\" is used here to\
    \ refer to the entity to whom the\n   certificate is issued, typically named in\
    \ the subject or\n   subjectAltName field of a certificate.  When we wish to distinguish\n\
    \   the tools and/or software used by the subject (e.g., a local\n   certificate\
    \ management module), we will use the term \"subject\n   equipment\".  In general,\
    \ the term \"end entity\" (EE), rather than\n   \"subject\", is preferred in order\
    \ to avoid confusion with the field\n   name.  It is important to note that the\
    \ end entities here will\n   include not only human users of applications, but\
    \ also applications\n   themselves (e.g., for IP security).  This factor influences\
    \ the\n   protocols that the PKI management operations use; for example,\n   application\
    \ software is far more likely to know exactly which\n   certificate extensions\
    \ are required than are human users.  PKI\n   management entities are also end\
    \ entities in the sense that they are\n   sometimes named in the subject or subjectAltName\
    \ field of a\n   certificate or cross-certificate.  Where appropriate, the term\
    \ \"end-\n   entity\" will be used to refer to end entities who are not PKI\n\
    \   management entities.\n   All end entities require secure local access to some\
    \ information --\n   at a minimum, their own name and private key, the name of\
    \ a CA that\n   is directly trusted by this entity, and that CA's public key (or\
    \ a\n   fingerprint of the public key where a self-certified version is\n   available\
    \ elsewhere).  Implementations MAY use secure local storage\n   for more than\
    \ this minimum (e.g., the end entity's own certificate or\n   application-specific\
    \ information).  The form of storage will also\n   vary -- from files to tamper-resistant\
    \ cryptographic tokens.  The\n   information stored in such local, trusted storage\
    \ is referred to here\n   as the end entity's Personal Security Environment (PSE).\n\
    \   Though PSE formats are beyond the scope of this document (they are\n   very\
    \ dependent on equipment, et cetera), a generic interchange format\n   for PSEs\
    \ is defined here: a certification response message MAY be\n   used.\n"
- title: 3.1.1.2.  Certification Authority
  contents:
  - "3.1.1.2.  Certification Authority\n   The certification authority (CA) may or\
    \ may not actually be a real\n   \"third party\" from the end entity's point of\
    \ view.  Quite often, the\n   CA will actually belong to the same organization\
    \ as the end entities\n   it supports.\n   Again, we use the term \"CA\" to refer\
    \ to the entity named in the\n   issuer field of a certificate.  When it is necessary\
    \ to distinguish\n   the software or hardware tools used by the CA, we use the\
    \ term \"CA\n   equipment\".\n   The CA equipment will often include both an \"\
    off-line\" component and\n   an \"on-line\" component, with the CA private key\
    \ only available to the\n   \"off-line\" component.  This is, however, a matter\
    \ for implementers\n   (though it is also relevant as a policy issue).\n   We\
    \ use the term \"root CA\" to indicate a CA that is directly trusted\n   by an\
    \ end entity; that is, securely acquiring the value of a root CA\n   public key\
    \ requires some out-of-band step(s).  This term is not meant\n   to imply that\
    \ a root CA is necessarily at the top of any hierarchy,\n   simply that the CA\
    \ in question is trusted directly.\n   A \"subordinate CA\" is one that is not\
    \ a root CA for the end entity in\n   question.  Often, a subordinate CA will\
    \ not be a root CA for any\n   entity, but this is not mandatory.\n"
- title: 3.1.1.3.  Registration Authority
  contents:
  - "3.1.1.3.  Registration Authority\n   In addition to end-entities and CAs, many\
    \ environments call for the\n   existence of a Registration Authority (RA) separate\
    \ from the\n   Certification Authority.  The functions that the registration\n\
    \   authority may carry out will vary from case to case but MAY include\n   personal\
    \ authentication, token distribution, revocation reporting,\n   name assignment,\
    \ key generation, archival of key pairs, et cetera.\n   This document views the\
    \ RA as an OPTIONAL component: when it is not\n   present, the CA is assumed to\
    \ be able to carry out the RA's functions\n   so that the PKI management protocols\
    \ are the same from the end-\n   entity's point of view.\n   Again, we distinguish,\
    \ where necessary, between the RA and the tools\n   used (the \"RA equipment\"\
    ).\n   Note that an RA is itself an end entity.  We further assume that all\n\
    \   RAs are in fact certified end entities and that RAs have private keys\n  \
    \ that are usable for signing.  How a particular CA equipment\n   identifies some\
    \ end entities as RAs is an implementation issue (i.e.,\n   this document specifies\
    \ no special RA certification operation).  We\n   do not mandate that the RA is\
    \ certified by the CA with which it is\n   interacting at the moment (so one RA\
    \ may work with more than one CA\n   whilst only being certified once).\n   In\
    \ some circumstances, end entities will communicate directly with a\n   CA even\
    \ where an RA is present.  For example, for initial\n   registration and/or certification,\
    \ the subject may use its RA, but\n   communicate directly with the CA in order\
    \ to refresh its certificate.\n"
- title: 3.1.2.  PKI Management Requirements
  contents:
  - "3.1.2.  PKI Management Requirements\n   The protocols given here meet the following\
    \ requirements on PKI\n   management\n   1.   PKI management must conform to the\
    \ ISO/IEC 9594-8/ITU-T X.509\n        standards.\n   2.   It must be possible\
    \ to regularly update any key pair without\n        affecting any other key pair.\n\
    \   3.   The use of confidentiality in PKI management protocols must be\n    \
    \    kept to a minimum in order to ease acceptance in environments\n        where\
    \ strong confidentiality might cause regulatory problems.\n   4.   PKI management\
    \ protocols must allow the use of different\n        industry-standard cryptographic\
    \ algorithms (specifically\n        including RSA, DSA, MD5, and SHA-1).  This\
    \ means that any given\n        CA, RA, or end entity may, in principle, use whichever\n\
    \        algorithms suit it for its own key pair(s).\n   5.   PKI management protocols\
    \ must not preclude the generation of key\n        pairs by the end-entity concerned,\
    \ by an RA, or by a CA.  Key\n        generation may also occur elsewhere, but\
    \ for the purposes of PKI\n        management we can regard key generation as\
    \ occurring wherever\n        the key is first present at an end entity, RA, or\
    \ CA.\n   6.   PKI management protocols must support the publication of\n    \
    \    certificates by the end-entity concerned, by an RA, or by a CA.\n       \
    \ Different implementations and different environments may choose\n        any\
    \ of the above approaches.\n   7.   PKI management protocols must support the\
    \ production of\n        Certificate Revocation Lists (CRLs) by allowing certified\
    \ end\n        entities to make requests for the revocation of certificates.\n\
    \        This must be done in such a way that the denial-of-service\n        attacks,\
    \ which are possible, are not made simpler.\n   8.   PKI management protocols\
    \ must be usable over a variety of\n        \"transport\" mechanisms, specifically\
    \ including mail, http,\n        TCP/IP and ftp.\n   9.   Final authority for\
    \ certification creation rests with the CA.\n        No RA or end-entity equipment\
    \ can assume that any certificate\n        issued by a CA will contain what was\
    \ requested; a CA may alter\n        certificate field values or may add, delete,\
    \ or alter extensions\n        according to its operating policy.  In other words,\
    \ all PKI\n        entities (end-entities, RAs, and CAs) must be capable of\n\
    \        handling responses to requests for certificates in which the\n      \
    \  actual certificate issued is different from that requested (for\n        example,\
    \ a CA may shorten the validity period requested).  Note\n        that policy\
    \ may dictate that the CA must not publish or\n        otherwise distribute the\
    \ certificate until the requesting entity\n        has reviewed and accepted the\
    \ newly-created certificate\n        (typically through use of the certConf message).\n\
    \   10.  A graceful, scheduled change-over from one non-compromised CA\n     \
    \   key pair to the next (CA key update) must be supported (note\n        that\
    \ if the CA key is compromised, re-initialization must be\n        performed for\
    \ all entities in the domain of that CA).  An end\n        entity whose PSE contains\
    \ the new CA public key (following a CA\n        key update) must also be able\
    \ to verify certificates verifiable\n        using the old public key.  End entities\
    \ who directly trust the\n        old CA key pair must also be able to verify\
    \ certificates signed\n        using the new CA private key (required for situations\
    \ where the\n        old CA public key is \"hardwired\" into the end entity's\n\
    \        cryptographic equipment).\n   11.  The functions of an RA may, in some\
    \ implementations or\n        environments, be carried out by the CA itself. \
    \ The protocols\n        must be designed so that end entities will use the same\
    \ protocol\n        regardless of whether the communication is with an RA or CA.\n\
    \        Naturally, the end entity must use the correct RA of CA public\n    \
    \    key to protect the communication.\n   12.  Where an end entity requests a\
    \ certificate containing a given\n        public key value, the end entity must\
    \ be ready to demonstrate\n        possession of the corresponding private key\
    \ value.  This may be\n        accomplished in various ways, depending on the\
    \ type of\n        certification request.  See Section 4.3 for details of the\
    \ in-\n        band methods defined for the PKIX-CMP (i.e., Certificate\n    \
    \    Management Protocol) messages.\n"
- title: 3.1.3.  PKI Management Operations
  contents:
  - "3.1.3.  PKI Management Operations\n   The following diagram shows the relationship\
    \ between the entities\n   defined above in terms of the PKI management operations.\
    \  The letters\n   in the diagram indicate \"protocols\" in the sense that a defined\
    \ set\n   of PKI management messages can be sent along each of the lettered\n\
    \   lines.\n     +---+     cert. publish        +------------+      j\n     |\
    \   |  <---------------------  | End Entity | <-------\n     | C |           \
    \  g            +------------+      \"out-of-band\"\n     | e |              \
    \              | ^                loading\n     | r |                        \
    \    | |      initial\n     | t |                          a | | b     registration/\n\
    \     |   |                            | |       certification\n     | / |   \
    \                         | |      key pair recovery\n     |   |             \
    \               | |      key pair update\n     | C |                         \
    \   | |      certificate update\n     | R |  PKI \"USERS\"               V | \
    \     revocation request\n     | L | -------------------+-+-----+-+------+-+-------------------\n\
    \     |   |  PKI MANAGEMENT    | ^              | ^\n     |   |    ENTITIES  \
    \    a | | b          a | | b\n     | R |                    V |             \
    \ | |\n     | e |             g   +------+    d       | |\n     | p |   <------------\
    \ | RA   | <-----+    | |\n     | o |      cert.      |      | ----+ |    | |\n\
    \     | s |       publish   +------+   c | |    | |\n     | i |              \
    \                | |    | |\n     | t |                              V |    V\
    \ |\n     | o |          g                 +------------+   i\n     | r |   <------------------------|\
    \     CA     |------->\n     | y |          h                 +------------+ \
    \ \"out-of-band\"\n     |   |      cert. publish              | ^         publication\n\
    \     |   |      CRL publish                | |\n     +---+                  \
    \               | |    cross-certification\n                                 \
    \        e | | f  cross-certificate\n                                        \
    \   | |       update\n                                           | |\n       \
    \                                    V |\n                                   \
    \      +------+\n                                         | CA-2 |\n         \
    \                                +------+\n   Figure 1 - PKI Entities\n     At\
    \ a high level, the set of operations for which management\n     messages are\
    \ defined can be grouped as follows.\n   1.  CA establishment: When establishing\
    \ a new CA, certain steps are\n       required (e.g., production of initial CRLs,\
    \ export of CA public\n       key).\n   2.  End entity initialization: this includes\
    \ importing a root CA\n       public key and requesting information about the\
    \ options supported\n       by a PKI management entity.\n   3.  Certification:\
    \ various operations result in the creation of new\n       certificates:\n   \
    \    1.  initial registration/certification: This is the process\n           whereby\
    \ an end entity first makes itself known to a CA or RA,\n           prior to the\
    \ CA issuing a certificate or certificates for\n           that end entity.  The\
    \ end result of this process (when it is\n           successful) is that a CA\
    \ issues a certificate for an end\n           entity's public key, and returns\
    \ that certificate to the end\n           entity and/or posts that certificate\
    \ in a public repository.\n           This process may, and typically will, involve\
    \ multiple\n           \"steps\", possibly including an initialization of the\
    \ end\n           entity's equipment.  For example, the end entity's equipment\n\
    \           must be securely initialized with the public key of a CA, to\n   \
    \        be used in validating certificate paths.  Furthermore, an end\n     \
    \      entity typically needs to be initialized with its own key\n           pair(s).\n\
    \       2.  key pair update: Every key pair needs to be updated regularly\n  \
    \         (i.e., replaced with a new key pair), and a new certificate\n      \
    \     needs to be issued.\n       3.  certificate update: As certificates expire,\
    \ they may be\n           \"refreshed\" if nothing relevant in the environment\
    \ has\n           changed.\n       4.  CA key pair update: As with end entities,\
    \ CA key pairs need\n           to be updated regularly; however, different mechanisms\
    \ are\n           required.\n       5.  cross-certification request: One CA requests\
    \ issuance of a\n           cross-certificate from another CA.  For the purposes\
    \ of this\n           standard, the following terms are defined.  A \"cross-\n\
    \           certificate\" is a certificate in which the subject CA and the\n \
    \          issuer CA are distinct and SubjectPublicKeyInfo contains a\n      \
    \     verification key (i.e., the certificate has been issued for\n          \
    \ the subject CA's signing key pair).  When it is necessary to\n           distinguish\
    \ more finely, the following terms may be used: a\n           cross-certificate\
    \ is called an \"inter-domain cross-\n           certificate\" if the subject\
    \ and issuer CAs belong to\n           different administrative domains; it is\
    \ called an \"intra-\n           domain cross-certificate\" otherwise.\n     \
    \      1.  Note 1.  The above definition of \"cross-certificate\"\n          \
    \     aligns with the defined term \"CA-certificate\" in X.509.\n            \
    \   Note that this term is not to be confused with the X.500\n               \"\
    cACertificate\" attribute type, which is unrelated.\n           2.  Note 2.  In\
    \ many environments, the term \"cross-\n               certificate\", unless further\
    \ qualified, will be\n               understood to be synonymous with \"inter-domain\
    \ cross-\n               certificate\" as defined above.\n           3.  Note\
    \ 3.  Issuance of cross-certificates may be, but is\n               not necessarily,\
    \ mutual; that is, two CAs may issue\n               cross-certificates for each\
    \ other.\n       6.  cross-certificate update: Similar to a normal certificate\n\
    \           update, but involving a cross-certificate.\n   4.  Certificate/CRL\
    \ discovery operations: some PKI management\n       operations result in the publication\
    \ of certificates or CRLs:\n       1.  certificate publication: Having gone to\
    \ the trouble of\n           producing a certificate, some means for publishing\
    \ it is\n           needed.  The \"means\" defined in PKIX MAY involve the messages\n\
    \           specified in Sections 5.3.13 to 5.3.16, or MAY involve other\n   \
    \        methods (LDAP, for example) as described in [RFC2559],\n           [RFC2585]\
    \ (the \"Operational Protocols\" documents of the PKIX\n           series of specifications).\n\
    \       2.  CRL publication: As for certificate publication.\n   5.  Recovery\
    \ operations: some PKI management operations are used when\n       an end entity\
    \ has \"lost\" its PSE:\n       1.  key pair recovery: As an option, user client\
    \ key materials\n           (e.g., a user's private key used for decryption purposes)\
    \ MAY\n           be backed up by a CA, an RA, or a key backup system\n      \
    \     associated with a CA or RA.  If an entity needs to recover\n           these\
    \ backed up key materials (e.g., as a result of a\n           forgotten password\
    \ or a lost key chain file), a protocol\n           exchange may be needed to\
    \ support such recovery.\n   6.  Revocation operations: some PKI operations result\
    \ in the creation\n       of new CRL entries and/or new CRLs:\n       1.  revocation\
    \ request: An authorized person advises a CA of an\n           abnormal situation\
    \ requiring certificate revocation.\n   7.  PSE operations: whilst the definition\
    \ of PSE operations (e.g.,\n       moving a PSE, changing a PIN, etc.) are beyond\
    \ the scope of this\n       specification, we do define a PKIMessage (CertRepMessage)\
    \ that\n       can form the basis of such operations.\n   Note that on-line protocols\
    \ are not the only way of implementing the\n   above operations.  For all operations,\
    \ there are off-line methods of\n   achieving the same result, and this specification\
    \ does not mandate\n   use of on-line protocols.  For example, when hardware tokens\
    \ are\n   used, many of the operations MAY be achieved as part of the physical\n\
    \   token delivery.\n   Later sections define a set of standard messages supporting\
    \ the above\n   operations.  Transport protocols for conveying these exchanges\
    \ in\n   different environments (file-based, on-line, E-mail, and WWW) are\n \
    \  beyond the scope of this document and are specified separately.\n"
- title: 4.  Assumptions and Restrictions
  contents:
  - '4.  Assumptions and Restrictions

    '
- title: 4.1.  End Entity Initialization
  contents:
  - "4.1.  End Entity Initialization\n   The first step for an end entity in dealing\
    \ with PKI management\n   entities is to request information about the PKI functions\
    \ supported\n   and to securely acquire a copy of the relevant root CA public\
    \ key(s).\n"
- title: 4.2.  Initial Registration/Certification
  contents:
  - "4.2.  Initial Registration/Certification\n   There are many schemes that can\
    \ be used to achieve initial\n   registration and certification of end entities.\
    \  No one method is\n   suitable for all situations due to the range of policies\
    \ that a CA\n   may implement and the variation in the types of end entity which\
    \ can\n   occur.\n   However, we can classify the initial registration/certification\n\
    \   schemes that are supported by this specification.  Note that the word\n  \
    \ \"initial\", above, is crucial: we are dealing with the situation where\n  \
    \ the end entity in question has had no previous contact with the PKI.\n   Where\
    \ the end entity already possesses certified keys, then some\n   simplifications/alternatives\
    \ are possible.\n   Having classified the schemes that are supported by this\n\
    \   specification we can then specify some as mandatory and some as\n   optional.\
    \  The goal is that the mandatory schemes cover a sufficient\n   number of the\
    \ cases that will arise in real use, whilst the optional\n   schemes are available\
    \ for special cases that arise less frequently.\n   In this way, we achieve a\
    \ balance between flexibility and ease of\n   implementation.\n   We will now\
    \ describe the classification of initial\n   registration/certification schemes.\n"
- title: 4.2.1.  Criteria Used
  contents:
  - '4.2.1.  Criteria Used

    '
- title: 4.2.1.1.  Initiation of Registration/Certification
  contents:
  - "4.2.1.1.  Initiation of Registration/Certification\n   In terms of the PKI messages\
    \ that are produced, we can regard the\n   initiation of the initial registration/certification\
    \ exchanges as\n   occurring wherever the first PKI message relating to the end\
    \ entity\n   is produced.  Note that the real-world initiation of the\n   registration/certification\
    \ procedure may occur elsewhere (e.g., a\n   personnel department may telephone\
    \ an RA operator).\n   The possible locations are at the end entity, an RA, or\
    \ a CA.\n"
- title: 4.2.1.2.  End Entity Message Origin Authentication
  contents:
  - "4.2.1.2.  End Entity Message Origin Authentication\n   The on-line messages produced\
    \ by the end entity that requires a\n   certificate may be authenticated or not.\
    \  The requirement here is to\n   authenticate the origin of any messages from\
    \ the end entity to the\n   PKI (CA/RA).\n   In this specification, such authentication\
    \ is achieved by the PKI\n   (CA/RA) issuing the end entity with a secret value\
    \ (initial\n   authentication key) and reference value (used to identify the secret\n\
    \   value) via some out-of-band means.  The initial authentication key\n   can\
    \ then be used to protect relevant PKI messages.\n   Thus, we can classify the\
    \ initial registration/certification scheme\n   according to whether or not the\
    \ on-line end entity -> PKI messages\n   are authenticated or not.\n   Note 1:\
    \ We do not discuss the authentication of the PKI -> end entity\n   messages here,\
    \ as this is always REQUIRED.  In any case, it can be\n   achieved simply once\
    \ the root-CA public key has been installed at the\n   end entity's equipment\
    \ or it can be based on the initial\n   authentication key.\n   Note 2: An initial\
    \ registration/certification procedure can be secure\n   where the messages from\
    \ the end entity are authenticated via some\n   out-of-band means (e.g., a subsequent\
    \ visit).\n"
- title: 4.2.1.3.  Location of Key Generation
  contents:
  - "4.2.1.3.  Location of Key Generation\n   In this specification, \"key generation\"\
    \ is regarded as occurring\n   wherever either the public or private component\
    \ of a key pair first\n   occurs in a PKIMessage.  Note that this does not preclude\
    \ a\n   centralized key generation service; the actual key pair MAY have been\n\
    \   generated elsewhere and transported to the end entity, RA, or CA\n   using\
    \ a (proprietary or standardized) key generation request/response\n   protocol\
    \ (outside the scope of this specification).\n   Thus, there are three possibilities\
    \ for the location of \"key\n   generation\":  the end entity, an RA, or a CA.\n"
- title: 4.2.1.4.  Confirmation of Successful Certification
  contents:
  - "4.2.1.4.  Confirmation of Successful Certification\n   Following the creation\
    \ of an initial certificate for an end entity,\n   additional assurance can be\
    \ gained by having the end entity\n   explicitly confirm successful receipt of\
    \ the message containing (or\n   indicating the creation of) the certificate.\
    \  Naturally, this\n   confirmation message must be protected (based on the initial\n\
    \   authentication key or other means).\n   This gives two further possibilities:\
    \ confirmed or not.\n"
- title: 4.2.2.  Mandatory Schemes
  contents:
  - "4.2.2.  Mandatory Schemes\n   The criteria above allow for a large number of\
    \ initial\n   registration/certification schemes.  This specification mandates\
    \ that\n   conforming CA equipment, RA equipment, and EE equipment MUST support\n\
    \   the second scheme listed below (Section 4.2.2.2).  Any entity MAY\n   additionally\
    \ support other schemes, if desired.\n"
- title: 4.2.2.1.  Centralized Scheme
  contents:
  - "4.2.2.1.  Centralized Scheme\n   In terms of the classification above, this scheme\
    \ is, in some ways,\n   the simplest possible, where:\n   o  initiation occurs\
    \ at the certifying CA;\n   o  no on-line message authentication is required;\n\
    \   o  \"key generation\" occurs at the certifying CA (see Section\n      4.2.1.3);\n\
    \   o  no confirmation message is required.\n   In terms of message flow, this\
    \ scheme means that the only message\n   required is sent from the CA to the end\
    \ entity.  The message must\n   contain the entire PSE for the end entity.  Some\
    \ out-of-band means\n   must be provided to allow the end entity to authenticate\
    \ the message\n   received and to decrypt any encrypted values.\n"
- title: 4.2.2.2.  Basic Authenticated Scheme
  contents:
  - "4.2.2.2.  Basic Authenticated Scheme\n   In terms of the classification above,\
    \ this scheme is where:\n   o  initiation occurs at the end entity;\n   o  message\
    \ authentication is REQUIRED;\n   o  \"key generation\" occurs at the end entity\
    \ (see Section 4.2.1.3);\n   o  a confirmation message is REQUIRED.\n   In terms\
    \ of message flow, the basic authenticated scheme is as\n   follows:\n     End\
    \ entity                                          RA/CA\n     ==========     \
    \                                 =============\n          out-of-band distribution\
    \ of Initial Authentication\n          Key (IAK) and reference value (RA/CA ->\
    \ EE)\n     Key generation\n     Creation of certification request\n     Protect\
    \ request with IAK\n                   -->>-- certification request -->>--\n \
    \                                                   verify request\n         \
    \                                           process request\n                \
    \                                    create response\n                   --<<--\
    \ certification response --<<--\n     handle response\n     create confirmation\n\
    \                   -->>-- cert conf message      -->>--\n                   \
    \                                 verify confirmation\n                      \
    \                              create response\n                   --<<-- conf\
    \ ack (optional)    --<<--\n     handle response\n   (Where verification of the\
    \ cert confirmation message fails, the RA/CA\n   MUST revoke the newly issued\
    \ certificate if it has been published or\n   otherwise made available.)\n"
- title: 4.3.  Proof-of-Possession (POP) of Private Key
  contents:
  - "4.3.  Proof-of-Possession (POP) of Private Key\n   In order to prevent certain\
    \ attacks and to allow a CA/RA to properly\n   check the validity of the binding\
    \ between an end entity and a key\n   pair, the PKI management operations specified\
    \ here make it possible\n   for an end entity to prove that it has possession\
    \ of (i.e., is able\n   to use) the private key corresponding to the public key\
    \ for which a\n   certificate is requested.  A given CA/RA is free to choose how\
    \ to\n   enforce POP (e.g., out-of-band procedural means versus PKIX-CMP\n   in-band\
    \ messages) in its certification exchanges (i.e., this may be a\n   policy issue).\
    \  However, it is REQUIRED that CAs/RAs MUST enforce POP\n   by some means because\
    \ there are currently many non-PKIX operational\n   protocols in use (various\
    \ electronic mail protocols are one example)\n   that do not explicitly check\
    \ the binding between the end entity and\n   the private key.  Until operational\
    \ protocols that do verify the\n   binding (for signature, encryption, and key\
    \ agreement key pairs)\n   exist, and are ubiquitous, this binding can only be\
    \ assumed to have\n   been verified by the CA/RA.  Therefore, if the binding is\
    \ not\n   verified by the CA/RA, certificates in the Internet Public-Key\n   Infrastructure\
    \ end up being somewhat less meaningful.\n   POP is accomplished in different\
    \ ways depending upon the type of key\n   for which a certificate is requested.\
    \  If a key can be used for\n   multiple purposes (e.g., an RSA key) then any\
    \ appropriate method MAY\n   be used (e.g., a key that may be used for signing,\
    \ as well as other\n   purposes, SHOULD NOT be sent to the CA/RA in order to prove\n\
    \   possession).\n   This specification explicitly allows for cases where an end\
    \ entity\n   supplies the relevant proof to an RA and the RA subsequently attests\n\
    \   to the CA that the required proof has been received (and validated!).\n  \
    \ For example, an end entity wishing to have a signing key certified\n   could\
    \ send the appropriate signature to the RA, which then simply\n   notifies the\
    \ relevant CA that the end entity has supplied the\n   required proof.  Of course,\
    \ such a situation may be disallowed by\n   some policies (e.g., CAs may be the\
    \ only entities permitted to verify\n   POP during certification).\n"
- title: 4.3.1.  Signature Keys
  contents:
  - "4.3.1.  Signature Keys\n   For signature keys, the end entity can sign a value\
    \ to prove\n   possession of the private key.\n"
- title: 4.3.2.  Encryption Keys
  contents:
  - "4.3.2.  Encryption Keys\n   For encryption keys, the end entity can provide the\
    \ private key to\n   the CA/RA, or can be required to decrypt a value in order\
    \ to prove\n   possession of the private key (see Section 5.2.8).  Decrypting\
    \ a\n   value can be achieved either directly or indirectly.\n   The direct method\
    \ is for the RA/CA to issue a random challenge to\n   which an immediate response\
    \ by the EE is required.\n   The indirect method is to issue a certificate that\
    \ is encrypted for\n   the end entity (and have the end entity demonstrate its\
    \ ability to\n   decrypt this certificate in the confirmation message).  This\
    \ allows a\n   CA to issue a certificate in a form that can only be used by the\n\
    \   intended end entity.\n   This specification encourages use of the indirect\
    \ method because it\n   requires no extra messages to be sent (i.e., the proof\
    \ can be\n   demonstrated using the {request, response, confirmation} triple of\n\
    \   messages).\n"
- title: 4.3.3.  Key Agreement Keys
  contents:
  - "4.3.3.  Key Agreement Keys\n   For key agreement keys, the end entity and the\
    \ PKI management entity\n   (i.e., CA or RA) must establish a shared secret key\
    \ in order to prove\n   that the end entity has possession of the private key.\n\
    \   Note that this need not impose any restrictions on the keys that can\n   be\
    \ certified by a given CA.  In particular, for Diffie-Hellman keys\n   the end\
    \ entity may freely choose its algorithm parameters provided\n   that the CA can\
    \ generate a short-term (or one-time) key pair with the\n   appropriate parameters\
    \ when necessary.\n"
- title: 4.4.  Root CA Key Update
  contents:
  - "4.4.  Root CA Key Update\n   This discussion only applies to CAs that are directly\
    \ trusted by some\n   end entities.  Self-signed CAs SHALL be considered as directly\n\
    \   trusted CAs.  Recognizing whether a non-self-signed CA is supposed to\n  \
    \ be directly trusted for some end entities is a matter of CA policy\n   and is\
    \ thus beyond the scope of this document.\n   The basis of the procedure described\
    \ here is that the CA protects its\n   new public key using its previous private\
    \ key and vice versa.  Thus,\n   when a CA updates its key pair it must generate\
    \ two extra\n   cACertificate attribute values if certificates are made available\n\
    \   using an X.500 directory (for a total of four: OldWithOld,\n   OldWithNew,\
    \ NewWithOld, and NewWithNew).\n   When a CA changes its key pair, those entities\
    \ who have acquired the\n   old CA public key via \"out-of-band\" means are most\
    \ affected.  It is\n   these end entities who will need access to the new CA public\
    \ key\n   protected with the old CA private key.  However, they will only\n  \
    \ require this for a limited period (until they have acquired the new\n   CA public\
    \ key via the \"out-of-band\" mechanism).  This will typically\n   be easily achieved\
    \ when these end entities' certificates expire.\n   The data structure used to\
    \ protect the new and old CA public keys is\n   a standard certificate (which\
    \ may also contain extensions).  There\n   are no new data structures required.\n\
    \   Note 1.  This scheme does not make use of any of the X.509 v3\n   extensions\
    \ as it must be able to work even for version 1\n   certificates.  The presence\
    \ of the KeyIdentifier extension would make\n   for efficiency improvements.\n\
    \   Note 2.  While the scheme could be generalized to cover cases where\n   the\
    \ CA updates its key pair more than once during the validity period\n   of one\
    \ of its end entities' certificates, this generalization seems\n   of dubious\
    \ value.  Not having this generalization simply means that\n   the validity periods\
    \ of certificates issued with the old CA key pair\n   cannot exceed the end of\
    \ the OldWithNew validity period.\n   Note 3.  This scheme ensures that end entities\
    \ will acquire the new\n   CA public key, at the latest by the expiry of the last\
    \ certificate\n   they owned that was signed with the old CA private key (via\
    \ the\n   \"out-of-band\" means).  Certificate and/or key update operations\n\
    \   occurring at other times do not necessarily require this (depending\n   on\
    \ the end entity's equipment).\n"
- title: 4.4.1.  CA Operator Actions
  contents:
  - "4.4.1.  CA Operator Actions\n   To change the key of the CA, the CA operator\
    \ does the following:\n   1.  Generate a new key pair;\n   2.  Create a certificate\
    \ containing the old CA public key signed with\n       the new private key (the\
    \ \"old with new\" certificate);\n   3.  Create a certificate containing the new\
    \ CA public key signed with\n       the old private key (the \"new with old\"\
    \ certificate);\n   4.  Create a certificate containing the new CA public key\
    \ signed with\n       the new private key (the \"new with new\" certificate);\n\
    \   5.  Publish these new certificates via the repository and/or other\n     \
    \  means (perhaps using a CAKeyUpdAnn message);\n   6.  Export the new CA public\
    \ key so that end entities may acquire it\n       using the \"out-of-band\" mechanism\
    \ (if required).\n   The old CA private key is then no longer required.  However,\
    \ the old\n   CA public key will remain in use for some time.  The old CA public\n\
    \   key is no longer required (other than for non-repudiation) when all\n   end\
    \ entities of this CA have securely acquired the new CA public key.\n   The \"\
    old with new\" certificate must have a validity period starting\n   at the generation\
    \ time of the old key pair and ending at the expiry\n   date of the old public\
    \ key.\n   The \"new with old\" certificate must have a validity period starting\n\
    \   at the generation time of the new key pair and ending at the time by\n   which\
    \ all end entities of this CA will securely possess the new CA\n   public key\
    \ (at the latest, the expiry date of the old public key).\n   The \"new with new\"\
    \ certificate must have a validity period starting\n   at the generation time\
    \ of the new key pair and ending at or before\n   the time by which the CA will\
    \ next update its key pair.\n"
- title: 4.4.2.  Verifying Certificates
  contents:
  - "4.4.2.  Verifying Certificates\n   Normally when verifying a signature, the verifier\
    \ verifies (among\n   other things) the certificate containing the public key\
    \ of the\n   signer.  However, once a CA is allowed to update its key there are\
    \ a\n   range of new possibilities.  These are shown in the table below.\n   \
    \             Repository contains NEW     Repository contains only OLD\n     \
    \             and OLD public keys        public key (due to, e.g.,\n         \
    \                                     delay in publication)\n                \
    \   PSE      PSE Contains  PSE Contains    PSE Contains\n                Contains\
    \     OLD public    NEW public      OLD public\n               NEW public    \
    \   key            key            key\n                   key\n    Signer's  \
    \ Case 1:      Case 3:       Case 5:        Case 7:\n    certifi-   This is  \
    \    In this case  Although the   In this case\n    cate is    the          the\
    \ verifier  CA operator    the CA\n    protected  standard     must access   has\
    \ not        operator  has\n    using NEW  case where   the           updated\
    \ the    not updated\n    public     the          repository in repository the\
    \ the repository\n    key        verifier     order to get  verifier can   and\
    \ so the\n               can          the value of  verify the     verification\n\
    \               directly     the NEW       certificate    will FAIL\n        \
    \       verify the   public key    directly -\n               certificate    \
    \            this is thus\n               without                    the same\
    \ as\n               using the                  case 1.\n               repository\n\
    \    Signer's   Case 2:      Case 4:       Case 6:        Case 8:\n    certifi-\
    \   In this      In this case  The verifier   Although the\n    cate is    case\
    \ the     the verifier  thinks this    CA operator\n    protected  verifier  \
    \   can directly  is the         has not\n    using OLD  must         verify the\
    \    situation of   updated the\n    public     access the   certificate   case\
    \ 2 and     repository the\n    key        repository   without       will access\
    \    verifier can\n               in order     using the     the            verify\
    \ the\n               to get the   repository    repository;    certificate\n\
    \               value of                   however, the   directly -\n       \
    \        the OLD                    verification   this is thus\n            \
    \   public key                 will FAIL      the same as\n                  \
    \                                       case 4.\n"
- title: 4.4.2.1.  Verification in Cases 1, 4, 5, and 8
  contents:
  - "4.4.2.1.  Verification in Cases 1, 4, 5, and 8\n   In these cases, the verifier\
    \ has a local copy of the CA public key\n   that can be used to verify the certificate\
    \ directly.  This is the\n   same as the situation where no key change has occurred.\n\
    \   Note that case 8 may arise between the time when the CA operator has\n   generated\
    \ the new key pair and the time when the CA operator stores\n   the updated attributes\
    \ in the repository.  Case 5 can only arise if\n   the CA operator has issued\
    \ both the signer's and verifier's\n   certificates during this \"gap\" (the CA\
    \ operator SHOULD avoid this as\n   it leads to the failure cases described below)\n"
- title: 4.4.2.2.  Verification in Case 2
  contents:
  - "4.4.2.2.  Verification in Case 2\n   In case 2, the verifier must get access\
    \ to the old public key of the\n   CA.  The verifier does the following:\n   1.\
    \  Look up the caCertificate attribute in the repository and pick\n       the\
    \ OldWithNew certificate (determined based on validity periods;\n       note that\
    \ the subject and issuer fields must match);\n   2.  Verify that this is correct\
    \ using the new CA key (which the\n       verifier has locally);\n   3.  If correct,\
    \ check the signer's certificate using the old CA key.\n   Case 2 will arise when\
    \ the CA operator has issued the signer's\n   certificate, then changed the key,\
    \ and then issued the verifier's\n   certificate; so it is quite a typical case.\n"
- title: 4.4.2.3.  Verification in Case 3
  contents:
  - "4.4.2.3.  Verification in Case 3\n   In case 3, the verifier must get access\
    \ to the new public key of the\n   CA.  The verifier does the following:\n   1.\
    \  Look up the CACertificate attribute in the repository and pick\n       the\
    \ NewWithOld certificate (determined based on validity periods;\n       note that\
    \ the subject and issuer fields must match);\n   2.  Verify that this is correct\
    \ using the old CA key (which the\n       verifier has stored locally);\n   3.\
    \  If correct, check the signer's certificate using the new CA key.\n   Case 3\
    \ will arise when the CA operator has issued the verifier's\n   certificate, then\
    \ changed the key, and then issued the signer's\n   certificate; so it is also\
    \ quite a typical case.\n"
- title: 4.4.2.4.  Failure of Verification in Case 6
  contents:
  - "4.4.2.4.  Failure of Verification in Case 6\n   In this case, the CA has issued\
    \ the verifier's PSE, which contains\n   the new key, without updating the repository\
    \ attributes.  This means\n   that the verifier has no means to get a trustworthy\
    \ version of the\n   CA's old key and so verification fails.\n   Note that the\
    \ failure is the CA operator's fault.\n"
- title: 4.4.2.5.  Failure of Verification in Case 7
  contents:
  - "4.4.2.5.  Failure of Verification in Case 7\n   In this case, the CA has issued\
    \ the signer's certificate protected\n   with the new key without updating the\
    \ repository attributes.  This\n   means that the verifier has no means to get\
    \ a trustworthy version of\n   the CA's new key and so verification fails.\n \
    \  Note that the failure is again the CA operator's fault.\n"
- title: 4.4.3.  Revocation - Change of CA Key
  contents:
  - "4.4.3.  Revocation - Change of CA Key\n   As we saw above, the verification of\
    \ a certificate becomes more\n   complex once the CA is allowed to change its\
    \ key.  This is also true\n   for revocation checks as the CA may have signed\
    \ the CRL using a newer\n   private key than the one within the user's PSE.\n\
    \   The analysis of the alternatives is the same as for certificate\n   verification.\n"
- title: 5.  Data Structures
  contents:
  - "5.  Data Structures\n   This section contains descriptions of the data structures\
    \ required\n   for PKI management messages.  Section 6 describes constraints on\n\
    \   their values and the sequence of events for each of the various PKI\n   management\
    \ operations.\n"
- title: 5.1.  Overall PKI Message
  contents:
  - "5.1.  Overall PKI Message\n   All of the messages used in this specification\
    \ for the purposes of\n   PKI management use the following structure:\n      PKIMessage\
    \ ::= SEQUENCE {\n         header           PKIHeader,\n         body        \
    \     PKIBody,\n         protection   [0] PKIProtection OPTIONAL,\n         extraCerts\
    \   [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate\n                          OPTIONAL\n\
    \     }\n     PKIMessages ::= SEQUENCE SIZE (1..MAX) OF PKIMessage\n   The PKIHeader\
    \ contains information that is common to many PKI\n   messages.\n   The PKIBody\
    \ contains message-specific information.\n   The PKIProtection, when used, contains\
    \ bits that protect the PKI\n   message.\n   The extraCerts field can contain\
    \ certificates that may be useful to\n   the recipient.  For example, this can\
    \ be used by a CA or RA to\n   present an end entity with certificates that it\
    \ needs to verify its\n   own new certificate (if, for example, the CA that issued\
    \ the end\n   entity's certificate is not a root CA for the end entity).  Note\
    \ that\n   this field does not necessarily contain a certification path; the\n\
    \   recipient may have to sort, select from, or otherwise process the\n   extra\
    \ certificates in order to use them.\n"
- title: 5.1.1.  PKI Message Header
  contents:
  - "5.1.1.  PKI Message Header\n   All PKI messages require some header information\
    \ for addressing and\n   transaction identification.  Some of this information\
    \ will also be\n   present in a transport-specific envelope.  However, if the\
    \ PKI\n   message is protected, then this information is also protected (i.e.,\n\
    \   we make no assumption about secure transport).\n   The following data structure\
    \ is used to contain this information:\n     PKIHeader ::= SEQUENCE {\n      \
    \   pvno                INTEGER     { cmp1999(1), cmp2000(2) },\n         sender\
    \              GeneralName,\n         recipient           GeneralName,\n     \
    \    messageTime     [0] GeneralizedTime         OPTIONAL,\n         protectionAlg\
    \   [1] AlgorithmIdentifier     OPTIONAL,\n         senderKID       [2] KeyIdentifier\
    \           OPTIONAL,\n         recipKID        [3] KeyIdentifier           OPTIONAL,\n\
    \         transactionID   [4] OCTET STRING            OPTIONAL,\n         senderNonce\
    \     [5] OCTET STRING            OPTIONAL,\n         recipNonce      [6] OCTET\
    \ STRING            OPTIONAL,\n         freeText        [7] PKIFreeText      \
    \       OPTIONAL,\n         generalInfo     [8] SEQUENCE SIZE (1..MAX) OF\n  \
    \                           InfoTypeAndValue     OPTIONAL\n     }\n     PKIFreeText\
    \ ::= SEQUENCE SIZE (1..MAX) OF UTF8String\n   The pvno field is fixed (at 2)\
    \ for this version of this\n   specification.\n   The sender field contains the\
    \ name of the sender of the PKIMessage.\n   This name (in conjunction with senderKID,\
    \ if supplied) should be\n   sufficient to indicate the key to use to verify the\
    \ protection on the\n   message.  If nothing about the sender is known to the\
    \ sending entity\n   (e.g., in the init. req. message, where the end entity may\
    \ not know\n   its own Distinguished Name (DN), e-mail name, IP address, etc.),\
    \ then\n   the \"sender\" field MUST contain a \"NULL\" value; that is, the SEQUENCE\n\
    \   OF relative distinguished names is of zero length.  In such a case,\n   the\
    \ senderKID field MUST hold an identifier (i.e., a reference\n   number) that\
    \ indicates to the receiver the appropriate shared secret\n   information to use\
    \ to verify the message.\n   The recipient field contains the name of the recipient\
    \ of the\n   PKIMessage.  This name (in conjunction with recipKID, if supplied)\n\
    \   should be usable to verify the protection on the message.\n   The protectionAlg\
    \ field specifies the algorithm used to protect the\n   message.  If no protection\
    \ bits are supplied (note that PKIProtection\n   is OPTIONAL) then this field\
    \ MUST be omitted; if protection bits are\n   supplied, then this field MUST be\
    \ supplied.\n   senderKID and recipKID are usable to indicate which keys have\
    \ been\n   used to protect the message (recipKID will normally only be required\n\
    \   where protection of the message uses Diffie-Hellman (DH) keys).\n   These\
    \ fields MUST be used if required to uniquely identify a key\n   (e.g., if more\
    \ than one key is associated with a given sender name)\n   and SHOULD be omitted\
    \ otherwise.\n   The transactionID field within the message header is to be used\
    \ to\n   allow the recipient of a message to correlate this with an ongoing\n\
    \   transaction.  This is needed for all transactions that consist of\n   more\
    \ than just a single request/response pair.  For transactions that\n   consist\
    \ of a single request/response pair, the rules are as follows.\n   A client MAY\
    \ populate the transactionID field of the request.  If a\n   server receives such\
    \ a request that has the transactionID field set,\n   then it MUST set the transactionID\
    \ field of the response to the same\n   value.  If a server receives such request\
    \ with a missing\n   transactionID field, then it MAY set transactionID field\
    \ of the\n   response.\n   For transactions that consist of more than just a single\n\
    \   request/response pair, the rules are as follows.  Clients SHOULD\n   generate\
    \ a transactionID for the first request.  If a server receives\n   such a request\
    \ that has the transactionID field set, then it MUST set\n   the transactionID\
    \ field of the response to the same value.  If a\n   server receives such request\
    \ with a missing transactionID field, then\n   it MUST populate the transactionID\
    \ field of the response with a\n   server-generated ID.  Subsequent requests and\
    \ responses MUST all set\n   the transactionID field to the thus established value.\
    \  In all cases\n   where a transactionID is being used, a given client MUST NOT\
    \ have\n   more than one transaction with the same transactionID in progress at\n\
    \   any time (to a given server).  Servers are free to require uniqueness\n  \
    \ of the transactionID or not, as long as they are able to correctly\n   associate\
    \ messages with the corresponding transaction.  Typically,\n   this means that\
    \ a server will require the {client, transactionID}\n   tuple to be unique, or\
    \ even the transactionID alone to be unique, if\n   it cannot distinguish clients\
    \ based on transport-level information.\n   A server receiving the first message\
    \ of a transaction (which requires\n   more than a single request/response pair)\
    \ that contains a\n   transactionID that does not allow it to meet the above constraints\n\
    \   (typically because the transactionID is already in use) MUST send\n   back\
    \ an ErrorMsgContent with a PKIFailureInfo of transactionIdInUse.\n   It is RECOMMENDED\
    \ that the clients fill the transactionID field with\n   128 bits of (pseudo-)\
    \ random data for the start of a transaction to\n   reduce the probability of\
    \ having the transactionID in use at the\n   server.\n   The senderNonce and recipNonce\
    \ fields protect the PKIMessage against\n   replay attacks.  The senderNonce will\
    \ typically be 128 bits of\n   (pseudo-) random data generated by the sender,\
    \ whereas the recipNonce\n   is copied from the senderNonce of the previous message\
    \ in the\n   transaction.\n   The messageTime field contains the time at which\
    \ the sender created\n   the message.  This may be useful to allow end entities\
    \ to\n   correct/check their local time for consistency with the time on a\n \
    \  central system.\n   The freeText field may be used to send a human-readable\
    \ message to\n   the recipient (in any number of languages).  The first language\
    \ used\n   in this sequence indicates the desired language for replies.\n   The\
    \ generalInfo field may be used to send machine-processable\n   additional data\
    \ to the recipient.  The following generalInfo\n   extensions are defined and\
    \ MAY be supported.\n"
- title: 5.1.1.1.  ImplicitConfirm
  contents:
  - "5.1.1.1.  ImplicitConfirm\n   This is used by the EE to inform the CA that it\
    \ does not wish to send\n   a certificate confirmation for issued certificates.\n\
    \         implicitConfirm OBJECT IDENTIFIER ::= {id-it 13}\n         ImplicitConfirmValue\
    \ ::= NULL\n   If the CA grants the request to the EE, it MUST put the same\n\
    \   extension in the PKIHeader of the response.  If the EE does not find\n   the\
    \ extension in the response, it MUST send the certificate\n   confirmation.\n"
- title: 5.1.1.2.  ConfirmWaitTime
  contents:
  - "5.1.1.2.  ConfirmWaitTime\n   This is used by the CA to inform the EE how long\
    \ it intends to wait\n   for the certificate confirmation before revoking the\
    \ certificate and\n   deleting the transaction.\n         confirmWaitTime OBJECT\
    \ IDENTIFIER ::= {id-it 14}\n         ConfirmWaitTimeValue ::= GeneralizedTime\n"
- title: 5.1.2.  PKI Message Body
  contents:
  - "5.1.2.  PKI Message Body\n        PKIBody ::= CHOICE {\n          ir       [0]\
    \  CertReqMessages,       --Initialization Req\n          ip       [1]  CertRepMessage,\
    \        --Initialization Resp\n          cr       [2]  CertReqMessages,     \
    \  --Certification Req\n          cp       [3]  CertRepMessage,        --Certification\
    \ Resp\n          p10cr    [4]  CertificationRequest,  --PKCS #10 Cert.  Req.\n\
    \          popdecc  [5]  POPODecKeyChallContent --pop Challenge\n          popdecr\
    \  [6]  POPODecKeyRespContent, --pop Response\n          kur      [7]  CertReqMessages,\
    \       --Key Update Request\n          kup      [8]  CertRepMessage,        --Key\
    \ Update Response\n          krr      [9]  CertReqMessages,       --Key Recovery\
    \ Req\n          krp      [10] KeyRecRepContent,      --Key Recovery Resp\n  \
    \        rr       [11] RevReqContent,         --Revocation Request\n         \
    \ rp       [12] RevRepContent,         --Revocation Response\n          ccr  \
    \    [13] CertReqMessages,       --Cross-Cert.  Request\n          ccp      [14]\
    \ CertRepMessage,        --Cross-Cert.  Resp\n          ckuann   [15] CAKeyUpdAnnContent,\
    \    --CA Key Update Ann.\n          cann     [16] CertAnnContent,        --Certificate\
    \ Ann.\n          rann     [17] RevAnnContent,         --Revocation Ann.\n   \
    \       crlann   [18] CRLAnnContent,         --CRL Announcement\n          pkiconf\
    \  [19] PKIConfirmContent,     --Confirmation\n          nested   [20] NestedMessageContent,\
    \  --Nested Message\n          genm     [21] GenMsgContent,         --General\
    \ Message\n          genp     [22] GenRepContent,         --General Response\n\
    \          error    [23] ErrorMsgContent,       --Error Message\n          certConf\
    \ [24] CertConfirmContent,    --Certificate confirm\n          pollReq  [25] PollReqContent,\
    \        --Polling request\n          pollRep  [26] PollRepContent         --Polling\
    \ response\n          }\n   The specific types are described in Section 5.3 below.\n"
- title: 5.1.3.  PKI Message Protection
  contents:
  - "5.1.3.  PKI Message Protection\n   Some PKI messages will be protected for integrity.\
    \  (Note that if an\n   asymmetric algorithm is used to protect a message and\
    \ the relevant\n   public component has been certified already, then the origin\
    \ of the\n   message can also be authenticated.  On the other hand, if the public\n\
    \   component is uncertified, then the message origin cannot be\n   automatically\
    \ authenticated, but may be authenticated via out-of-band\n   means.)\n   When\
    \ protection is applied, the following structure is used:\n        PKIProtection\
    \ ::= BIT STRING\n   The input to the calculation of PKIProtection is the DER\
    \ encoding of\n   the following data structure:\n        ProtectedPart ::= SEQUENCE\
    \ {\n            header    PKIHeader,\n            body      PKIBody\n       \
    \ }\n   There MAY be cases in which the PKIProtection BIT STRING is\n   deliberately\
    \ not used to protect a message (i.e., this OPTIONAL field\n   is omitted) because\
    \ other protection, external to PKIX, will be\n   applied instead.  Such a choice\
    \ is explicitly allowed in this\n   specification.  Examples of such external\
    \ protection include PKCS #7\n   [PKCS7] and Security Multiparts [RFC1847] encapsulation\
    \ of the\n   PKIMessage (or simply the PKIBody (omitting the CHOICE tag), if the\n\
    \   relevant PKIHeader information is securely carried in the external\n   mechanism).\
    \  It is noted, however, that many such external mechanisms\n   require that the\
    \ end entity already possesses a public-key\n   certificate, and/or a unique Distinguished\
    \ Name, and/or other such\n   infrastructure-related information.  Thus, they\
    \ may not be\n   appropriate for initial registration, key-recovery, or any other\n\
    \   process with \"boot-strapping\" characteristics.  For those cases it\n   may\
    \ be necessary that the PKIProtection parameter be used.  In the\n   future, if/when\
    \ external mechanisms are modified to accommodate\n   boot-strapping scenarios,\
    \ the use of PKIProtection may become rare or\n   non-existent.\n   Depending\
    \ on the circumstances, the PKIProtection bits may contain a\n   Message Authentication\
    \ Code (MAC) or signature.  Only the following\n   cases can occur:\n"
- title: 5.1.3.1.  Shared Secret Information
  contents:
  - "5.1.3.1.  Shared Secret Information\n   In this case, the sender and recipient\
    \ share secret information\n   (established via out-of-band means or from a previous\
    \ PKI management\n   operation).  PKIProtection will contain a MAC value and the\n\
    \   protectionAlg will be the following (see also Appendix D.2):\n     id-PasswordBasedMac\
    \ OBJECT IDENTIFIER ::= {1 2 840 113533 7 66 13}\n     PBMParameter ::= SEQUENCE\
    \ {\n       salt                OCTET STRING,\n       owf                 AlgorithmIdentifier,\n\
    \       iterationCount      INTEGER,\n       mac                 AlgorithmIdentifier\n\
    \     }\n   In the above protectionAlg, the salt value is appended to the shared\n\
    \   secret input.  The OWF is then applied iterationCount times, where\n   the\
    \ salted secret is the input to the first iteration and, for each\n   successive\
    \ iteration, the input is set to be the output of the\n   previous iteration.\
    \  The output of the final iteration (called\n   \"BASEKEY\" for ease of reference,\
    \ with a size of \"H\") is what is used\n   to form the symmetric key.  If the\
    \ MAC algorithm requires a K-bit key\n   and K <= H, then the most significant\
    \ K bits of BASEKEY are used.  If\n   K > H, then all of BASEKEY is used for the\
    \ most significant H bits of\n   the key, OWF(\"1\" || BASEKEY) is used for the\
    \ next most significant H\n   bits of the key, OWF(\"2\" || BASEKEY) is used for\
    \ the next most\n   significant H bits of the key, and so on, until all K bits\
    \ have been\n   derived.  [Here \"N\" is the ASCII byte encoding the number N\
    \ and \"||\"\n   represents concatenation.]\n   Note: it is RECOMMENDED that the\
    \ fields of PBMParameter remain\n   constant throughout the messages of a single\
    \ transaction (e.g.,\n   ir/ip/certConf/pkiConf) in order to reduce the overhead\
    \ associated\n   with PasswordBasedMac computation).\n"
- title: 5.1.3.2.  DH Key Pairs
  contents:
  - "5.1.3.2.  DH Key Pairs\n   Where the sender and receiver possess Diffie-Hellman\
    \ certificates\n   with compatible DH parameters, in order to protect the message\
    \ the\n   end entity must generate a symmetric key based on its private DH key\n\
    \   value and the DH public key of the recipient of the PKI message.\n   PKIProtection\
    \ will contain a MAC value keyed with this derived\n   symmetric key and the protectionAlg\
    \ will be the following:\n        id-DHBasedMac OBJECT IDENTIFIER ::= {1 2 840\
    \ 113533 7 66 30}\n        DHBMParameter ::= SEQUENCE {\n            owf     \
    \            AlgorithmIdentifier,\n            -- AlgId for a One-Way Function\
    \ (SHA-1 recommended)\n            mac                 AlgorithmIdentifier\n \
    \           -- the MAC AlgId (e.g., DES-MAC, Triple-DES-MAC [PKCS11],\n      \
    \  }   -- or HMAC [RFC2104, RFC2202])\n   In the above protectionAlg, OWF is applied\
    \ to the result of the\n   Diffie-Hellman computation.  The OWF output (called\
    \ \"BASEKEY\" for\n   ease of reference, with a size of \"H\") is what is used\
    \ to form the\n   symmetric key.  If the MAC algorithm requires a K-bit key and\
    \ K <= H,\n   then the most significant K bits of BASEKEY are used.  If K > H,\
    \ then\n   all of BASEKEY is used for the most significant H bits of the key,\n\
    \   OWF(\"1\" || BASEKEY) is used for the next most significant H bits of\n  \
    \ the key, OWF(\"2\" || BASEKEY) is used for the next most significant H\n   bits\
    \ of the key, and so on, until all K bits have been derived.\n   [Here \"N\" is\
    \ the ASCII byte encoding the number N and \"||\" represents\n   concatenation.]\n"
- title: 5.1.3.3.  Signature
  contents:
  - "5.1.3.3.  Signature\n   In this case, the sender possesses a signature key pair\
    \ and simply\n   signs the PKI message.  PKIProtection will contain the signature\n\
    \   value and the protectionAlg will be an AlgorithmIdentifier for a\n   digital\
    \ signature (e.g., md5WithRSAEncryption or dsaWithSha-1).\n"
- title: 5.1.3.4.  Multiple Protection
  contents:
  - "5.1.3.4.  Multiple Protection\n   In cases where an end entity sends a protected\
    \ PKI message to an RA,\n   the RA MAY forward that message to a CA, attaching\
    \ its own protection\n   (which MAY be a MAC or a signature, depending on the\
    \ information and\n   certificates shared between the RA and the CA).  This is\
    \ accomplished\n   by nesting the entire message sent by the end entity within\
    \ a new PKI\n   message.  The structure used is as follows.\n          NestedMessageContent\
    \ ::= PKIMessages\n   (The use of PKIMessages, a SEQUENCE OF PKIMessage, lets\
    \ the RA batch\n   the requests of several EEs in a single new message.  For simplicity,\n\
    \   all messages in the batch MUST be of the same type (e.g., ir).)  If\n   the\
    \ RA wishes to modify the message(s) in some way (e.g., add\n   particular field\
    \ values or new extensions), then it MAY create its\n   own desired PKIBody. \
    \ The original PKIMessage from the EE MAY be\n   included in the generalInfo field\
    \ of PKIHeader (to accommodate, for\n   example, cases in which the CA wishes\
    \ to check POP or other\n   information on the original EE message).  The infoType\
    \ to be used in\n   this situation is {id-it 15} (see Section 5.3.19 for the value\
    \ of\n   id-it) and the infoValue is PKIMessages (contents MUST be in the same\n\
    \   order as the requests in PKIBody).\n"
- title: 5.2.  Common Data Structures
  contents:
  - "5.2.  Common Data Structures\n   Before specifying the specific types that may\
    \ be placed in a PKIBody,\n   we define some data structures that are used in\
    \ more than one case.\n"
- title: 5.2.1.  Requested Certificate Contents
  contents:
  - "5.2.1.  Requested Certificate Contents\n   Various PKI management messages require\
    \ that the originator of the\n   message indicate some of the fields that are\
    \ required to be present\n   in a certificate.  The CertTemplate structure allows\
    \ an end entity or\n   RA to specify as much as it wishes about the certificate\
    \ it requires.\n   CertTemplate is identical to a Certificate, but with all fields\n\
    \   optional.\n   Note that even if the originator completely specifies the contents\
    \ of\n   a certificate it requires, a CA is free to modify fields within the\n\
    \   certificate actually issued.  If the modified certificate is\n   unacceptable\
    \ to the requester, the requester MUST send back a\n   certConf message that either\
    \ does not include this certificate (via a\n   CertHash), or does include this\
    \ certificate (via a CertHash) along\n   with a status of \"rejected\".  See Section\
    \ 5.3.18 for the definition\n   and use of CertHash and the certConf message.\n\
    \   See Appendix C and [CRMF] for CertTemplate syntax.\n"
- title: 5.2.2.  Encrypted Values
  contents:
  - "5.2.2.  Encrypted Values\n   Where encrypted values (restricted, in this specification,\
    \ to be\n   either private keys or certificates) are sent in PKI messages, the\n\
    \   EncryptedValue data structure is used.\n   See [CRMF] for EncryptedValue syntax.\n\
    \   Use of this data structure requires that the creator and intended\n   recipient\
    \ be able to encrypt and decrypt, respectively.  Typically,\n   this will mean\
    \ that the sender and recipient have, or are able to\n   generate, a shared secret\
    \ key.\n   If the recipient of the PKIMessage already possesses a private key\n\
    \   usable for decryption, then the encSymmKey field MAY contain a\n   session\
    \ key encrypted using the recipient's public key.\n"
- title: 5.2.3.  Status codes and Failure Information for PKI Messages
  contents:
  - "5.2.3.  Status codes and Failure Information for PKI Messages\n   All response\
    \ messages will include some status information.  The\n   following values are\
    \ defined.\n        PKIStatus ::= INTEGER {\n            accepted            \
    \   (0),\n            grantedWithMods        (1),\n            rejection     \
    \         (2),\n            waiting                (3),\n            revocationWarning\
    \      (4),\n            revocationNotification (5),\n            keyUpdateWarning\
    \       (6)\n        }\n   Responders may use the following syntax to provide\
    \ more information\n   about failure cases.\n        PKIFailureInfo ::= BIT STRING\
    \ {\n            badAlg              (0),\n            badMessageCheck     (1),\n\
    \            badRequest          (2),\n            badTime             (3),\n\
    \            badCertId           (4),\n            badDataFormat       (5),\n\
    \            wrongAuthority      (6),\n            incorrectData       (7),\n\
    \            missingTimeStamp    (8),\n            badPOP              (9),\n\
    \            certRevoked         (10),\n            certConfirmed       (11),\n\
    \            wrongIntegrity      (12),\n            badRecipientNonce   (13),\n\
    \            timeNotAvailable    (14),\n            unacceptedPolicy    (15),\n\
    \            unacceptedExtension (16),\n            addInfoNotAvailable (17),\n\
    \            badSenderNonce      (18),\n            badCertTemplate     (19),\n\
    \            signerNotTrusted    (20),\n            transactionIdInUse  (21),\n\
    \            unsupportedVersion  (22),\n            notAuthorized       (23),\n\
    \            systemUnavail       (24),\n            systemFailure       (25),\n\
    \            duplicateCertReq    (26)\n        }\n        PKIStatusInfo ::= SEQUENCE\
    \ {\n            status        PKIStatus,\n            statusString  PKIFreeText\
    \     OPTIONAL,\n            failInfo      PKIFailureInfo  OPTIONAL\n        }\n"
- title: 5.2.4.  Certificate Identification
  contents:
  - "5.2.4.  Certificate Identification\n   In order to identify particular certificates,\
    \ the CertId data\n   structure is used.\n   See [CRMF] for CertId syntax.\n"
- title: 5.2.5.  Out-of-band root CA Public Key
  contents:
  - "5.2.5.  Out-of-band root CA Public Key\n   Each root CA must be able to publish\
    \ its current public key via some\n   \"out-of-band\" means.  While such mechanisms\
    \ are beyond the scope of\n   this document, we define data structures that can\
    \ support such\n   mechanisms.\n   There are generally two methods available:\
    \ either the CA directly\n   publishes its self-signed certificate, or this information\
    \ is\n   available via the Directory (or equivalent) and the CA publishes a\n\
    \   hash of this value to allow verification of its integrity before use.\n  \
    \      OOBCert ::= Certificate\n   The fields within this certificate are restricted\
    \ as follows:\n   o  The certificate MUST be self-signed (i.e., the signature\
    \ must be\n      verifiable using the SubjectPublicKeyInfo field);\n   o  The\
    \ subject and issuer fields MUST be identical;\n   o  If the subject field is\
    \ NULL, then both subjectAltNames and\n      issuerAltNames extensions MUST be\
    \ present and have exactly the\n      same value;\n   o  The values of all other\
    \ extensions must be suitable for a self-\n      signed certificate (e.g., key\
    \ identifiers for subject and issuer\n      must be the same).\n        OOBCertHash\
    \ ::= SEQUENCE {\n            hashAlg     [0] AlgorithmIdentifier     OPTIONAL,\n\
    \            certId      [1] CertId                  OPTIONAL,\n            hashVal\
    \         BIT STRING\n        }\n   The intention of the hash value is that anyone\
    \ who has securely\n   received the hash value (via the out-of-band means) can\
    \ verify a\n   self-signed certificate for that CA.\n"
- title: 5.2.6.  Archive Options
  contents:
  - "5.2.6.  Archive Options\n   Requesters may indicate that they wish the PKI to\
    \ archive a private\n   key value using the PKIArchiveOptions structure.\n   See\
    \ [CRMF] for PKIArchiveOptions syntax.\n"
- title: 5.2.7.  Publication Information
  contents:
  - "5.2.7.  Publication Information\n   Requesters may indicate that they wish the\
    \ PKI to publish a\n   certificate using the PKIPublicationInfo structure.\n \
    \  See [CRMF] for PKIPublicationInfo syntax.\n"
- title: 5.2.8.  Proof-of-Possession Structures
  contents:
  - "5.2.8.  Proof-of-Possession Structures\n   If the certification request is for\
    \ a signing key pair (i.e., a\n   request for a verification certificate), then\
    \ the proof-of-possession\n   of the private signing key is demonstrated through\
    \ use of the\n   POPOSigningKey structure.\n   See Appendix C and [CRMF] for POPOSigningKey\
    \ syntax, but note that\n   POPOSigningKeyInput has the following semantic stipulations\
    \ in this\n   specification.\n        POPOSigningKeyInput ::= SEQUENCE {\n   \
    \         authInfo            CHOICE {\n                sender              [0]\
    \ GeneralName,\n                publicKeyMAC            PKMACValue\n         \
    \   },\n            publicKey           SubjectPublicKeyInfo\n        }\n   On\
    \ the other hand, if the certification request is for an encryption\n   key pair\
    \ (i.e., a request for an encryption certificate), then the\n   proof-of-possession\
    \ of the private decryption key may be demonstrated\n   in one of three ways.\n"
- title: 5.2.8.1.  Inclusion of the Private Key
  contents:
  - "5.2.8.1.  Inclusion of the Private Key\n   By the inclusion of the private key\
    \ (encrypted) in the CertRequest\n   (in the thisMessage field of POPOPrivKey\
    \ (see Appendix C) or in the\n   PKIArchiveOptions control structure, depending\
    \ upon whether or not\n   archival of the private key is also desired).\n"
- title: 5.2.8.2.  Indirect Method
  contents:
  - "5.2.8.2.  Indirect Method\n   By having the CA return not the certificate, but\
    \ an encrypted\n   certificate (i.e., the certificate encrypted under a randomly-\n\
    \   generated symmetric key, and the symmetric key encrypted under the\n   public\
    \ key for which the certification request is being made) -- this\n   is the \"\
    indirect\" method mentioned previously in Section 4.3.2. The\n   end entity proves\
    \ knowledge of the private decryption key to the CA\n   by providing the correct\
    \ CertHash for this certificate in the\n   certConf message.  This demonstrates\
    \ POP because the EE can only\n   compute the correct CertHash if it is able to\
    \ recover the\n   certificate, and it can only recover the certificate if it is\
    \ able to\n   decrypt the symmetric key using the required private key.  Clearly,\n\
    \   for this to work, the CA MUST NOT publish the certificate until the\n   certConf\
    \ message arrives (when certHash is to be used to demonstrate\n   POP).  See Section\
    \ 5.3.18 for further details.\n"
- title: 5.2.8.3.  Challenge-Response Protocol
  contents:
  - "5.2.8.3.  Challenge-Response Protocol\n   By having the end entity engage in\
    \ a challenge-response protocol\n   (using the messages POPODecKeyChall and POPODecKeyResp;\
    \ see below)\n   between CertReqMessages and CertRepMessage -- this is the \"\
    direct\"\n   method mentioned previously in Section 4.3.2.  (This method would\n\
    \   typically be used in an environment in which an RA verifies POP and\n   then\
    \ makes a certification request to the CA on behalf of the end\n   entity.  In\
    \ such a scenario, the CA trusts the RA to have done POP\n   correctly before\
    \ the RA requests a certificate for the end entity.)\n   The complete protocol\
    \ then looks as follows (note that req' does not\n   necessarily encapsulate req\
    \ as a nested message):\n                   EE            RA            CA\n \
    \                   ---- req ---->\n                    <--- chall ---\n     \
    \               ---- resp --->\n                                  ---- req' --->\n\
    \                                  <--- rep -----\n                          \
    \        ---- conf --->\n                                  <--- ack -----\n  \
    \                  <--- rep -----\n                    ---- conf --->\n      \
    \              <--- ack -----\n   This protocol is obviously much longer than\
    \ the 3-way exchange given\n   in choice (2) above, but allows a local Registration\
    \ Authority to be\n   involved and has the property that the certificate itself\
    \ is not\n   actually created until the proof-of-possession is complete.  In some\n\
    \   environments, a different order of the above messages may be\n   required,\
    \ such as the following (this may be determined by policy):\n                \
    \   EE            RA            CA\n                    ---- req ---->\n     \
    \               <--- chall ---\n                    ---- resp --->\n         \
    \                         ---- req' --->\n                                  <---\
    \ rep -----\n                    <--- rep -----\n                    ---- conf\
    \ --->\n                                  ---- conf --->\n                   \
    \               <--- ack -----\n                    <--- ack -----\n   If the\
    \ cert. request is for a key agreement key (KAK) pair, then the\n   POP can use\
    \ any of the 3 ways described above for enc. key pairs,\n   with the following\
    \ changes: (1) the parenthetical text of bullet 2)\n   is replaced with \"(i.e.,\
    \ the certificate encrypted under the\n   symmetric key derived from the CA's\
    \ private KAK and the public key\n   for which the certification request is being\
    \ made)\"; (2) the first\n   parenthetical text of the challenge field of \"Challenge\"\
    \ below is\n   replaced with \"(using PreferredSymmAlg (see Section 5.3.19.4 and\n\
    \   Appendix E.5) and a symmetric key derived from the CA's private KAK\n   and\
    \ the public key for which the certification request is being\n   made)\".  Alternatively,\
    \ the POP can use the POPOSigningKey structure\n   given in [CRMF] (where the\
    \ alg field is DHBasedMAC and the signature\n   field is the MAC) as a fourth\
    \ alternative for demonstrating POP if\n   the CA already has a D-H certificate\
    \ that is known to the EE.\n   The challenge-response messages for proof-of-possession\
    \ of a private\n   decryption key are specified as follows (see [MvOV97], p.404\
    \ for\n   details).  Note that this challenge-response exchange is associated\n\
    \   with the preceding cert. request message (and subsequent cert.\n   response\
    \ and confirmation messages) by the transactionID used in the\n   PKIHeader and\
    \ by the protection (MACing or signing) applied to the\n   PKIMessage.\n     \
    \   POPODecKeyChallContent ::= SEQUENCE OF Challenge\n        Challenge ::= SEQUENCE\
    \ {\n            owf                 AlgorithmIdentifier  OPTIONAL,\n        \
    \    witness             OCTET STRING,\n            challenge           OCTET\
    \ STRING\n        }\n   Note that the size of Rand needs to be appropriate for\
    \ encryption\n   under the public key of the requester.  Given that \"int\" will\n\
    \   typically not be longer than 64 bits, this leaves well over 100 bytes\n  \
    \ of room for the \"sender\" field when the modulus is 1024 bits.  If, in\n  \
    \ some environment, names are so long that they cannot fit (e.g., very\n   long\
    \ DNs), then whatever portion will fit should be used (as long as\n   it includes\
    \ at least the common name, and as long as the receiver is\n   able to deal meaningfully\
    \ with the abbreviation).\n        POPODecKeyRespContent ::= SEQUENCE OF INTEGER\n"
- title: 5.2.8.4.  Summary of PoP Options
  contents:
  - "5.2.8.4.  Summary of PoP Options\n   The text in this section provides several\
    \ options with respect to POP\n   techniques.  Using \"SK\" for \"signing key\"\
    , \"EK\" for \"encryption key\",\n   and \"KAK\" for \"key agreement key\", the\
    \ techniques may be summarized\n   as follows:\n         RAVerified;\n       \
    \  SKPOP;\n         EKPOPThisMessage;\n         KAKPOPThisMessage;\n         KAKPOPThisMessageDHMAC;\n\
    \         EKPOPEncryptedCert;\n         KAKPOPEncryptedCert;\n         EKPOPChallengeResp;\
    \ and\n         KAKPOPChallengeResp.\n   Given this array of options, it is natural\
    \ to ask how an end entity\n   can know what is supported by the CA/RA (i.e.,\
    \ which options it may\n   use when requesting certificates).  The following guidelines\
    \ should\n   clarify this situation for EE implementers.\n   RAVerified.  This\
    \ is not an EE decision; the RA uses this if and only\n   if it has verified POP\
    \ before forwarding the request on to the CA, so\n   it is not possible for the\
    \ EE to choose this technique.\n   SKPOP.  If the EE has a signing key pair, this\
    \ is the only POP method\n   specified for use in the request for a corresponding\
    \ certificate.\n   EKPOPThisMessage and KAKPOPThisMessage.  Whether or not to\
    \ give up\n   its private key to the CA/RA is an EE decision.  If the EE decides\
    \ to\n   reveal its key, then these are the only POP methods available in this\n\
    \   specification to achieve this (and the key pair type will determine\n   which\
    \ of these two methods to use).\n   KAKPOPThisMessageDHMAC.  The EE can only use\
    \ this method if (1) the\n   CA has a DH certificate available for this purpose,\
    \ and (2) the EE\n   already has a copy of this certificate.  If both these conditions\n\
    \   hold, then this technique is clearly supported and may be used by the\n  \
    \ EE, if desired.\n   EKPOPEncryptedCert, KAKPOPEncryptedCert, EKPOPChallengeResp,\n\
    \   KAKPOPChallengeResp.  The EE picks one of these (in the\n   subsequentMessage\
    \ field) in the request message, depending upon\n   preference and key pair type.\
    \  The EE is not doing POP at this point;\n   it is simply indicating which method\
    \ it wants to use.  Therefore, if\n   the CA/RA replies with a \"badPOP\" error,\
    \ the EE can re-request using\n   the other POP method chosen in subsequentMessage.\
    \  Note, however,\n   that this specification encourages the use of the EncryptedCert\n\
    \   choice and, furthermore, says that the challenge-response would\n   typically\
    \ be used when an RA is involved and doing POP verification.\n   Thus, the EE\
    \ should be able to make an intelligent decision regarding\n   which of these\
    \ POP methods to choose in the request message.\n"
- title: 5.3.  Operation-Specific Data Structures
  contents:
  - '5.3.  Operation-Specific Data Structures

    '
- title: 5.3.1.  Initialization Request
  contents:
  - "5.3.1.  Initialization Request\n   An Initialization request message contains\
    \ as the PKIBody a\n   CertReqMessages data structure, which specifies the requested\n\
    \   certificate(s).  Typically, SubjectPublicKeyInfo, KeyId, and Validity\n  \
    \ are the template fields which may be supplied for each certificate\n   requested\
    \ (see Appendix D profiles for further information).  This\n   message is intended\
    \ to be used for entities when first initializing\n   into the PKI.\n   See Appendix\
    \ C and [CRMF] for CertReqMessages syntax.\n"
- title: 5.3.2.  Initialization Response
  contents:
  - "5.3.2.  Initialization Response\n   An Initialization response message contains\
    \ as the PKIBody an\n   CertRepMessage data structure, which has for each certificate\n\
    \   requested a PKIStatusInfo field, a subject certificate, and possibly\n   a\
    \ private key (normally encrypted with a session key, which is itself\n   encrypted\
    \ with the protocolEncrKey).\n   See Section 5.3.4 for CertRepMessage syntax.\
    \  Note that if the PKI\n   Message Protection is \"shared secret information\"\
    \ (see Section\n   5.1.3), then any certificate transported in the caPubs field\
    \ may be\n   directly trusted as a root CA certificate by the initiator.\n"
- title: 5.3.3.  Certification Request
  contents:
  - "5.3.3.  Certification Request\n   A Certification request message contains as\
    \ the PKIBody a\n   CertReqMessages data structure, which specifies the requested\n\
    \   certificates.  This message is intended to be used for existing PKI\n   entities\
    \ who wish to obtain additional certificates.\n   See Appendix C and [CRMF] for\
    \ CertReqMessages syntax.\n   Alternatively, the PKIBody MAY be a CertificationRequest\
    \ (this\n   structure is fully specified by the ASN.1 structure\n   CertificationRequest\
    \ given in [PKCS10]).  This structure may be\n   required for certificate requests\
    \ for signing key pairs when\n   interoperation with legacy systems is desired,\
    \ but its use is\n   strongly discouraged whenever not absolutely necessary.\n"
- title: 5.3.4.  Certification Response
  contents:
  - "5.3.4.  Certification Response\n   A Certification response message contains\
    \ as the PKIBody a\n   CertRepMessage data structure, which has a status value\
    \ for each\n   certificate requested, and optionally has a CA public key, failure\n\
    \   information, a subject certificate, and an encrypted private key.\n     CertRepMessage\
    \ ::= SEQUENCE {\n         caPubs          [1] SEQUENCE SIZE (1..MAX) OF Certificate\n\
    \                             OPTIONAL,\n         response            SEQUENCE\
    \ OF CertResponse\n     }\n     CertResponse ::= SEQUENCE {\n         certReqId\
    \           INTEGER,\n         status              PKIStatusInfo,\n         certifiedKeyPair\
    \    CertifiedKeyPair    OPTIONAL,\n         rspInfo             OCTET STRING\
    \        OPTIONAL\n         -- analogous to the id-regInfo-utf8Pairs string defined\n\
    \         -- for regInfo in CertReqMsg [CRMF]\n     }\n     CertifiedKeyPair ::=\
    \ SEQUENCE {\n         certOrEncCert       CertOrEncCert,\n         privateKey\
    \      [0] EncryptedValue      OPTIONAL,\n         -- see [CRMF] for comment on\
    \ encoding\n         publicationInfo [1] PKIPublicationInfo  OPTIONAL\n     }\n\
    \     CertOrEncCert ::= CHOICE {\n         certificate     [0] Certificate,\n\
    \         encryptedCert   [1] EncryptedValue\n     }\n   Only one of the failInfo\
    \ (in PKIStatusInfo) and certificate (in\n   CertifiedKeyPair) fields can be present\
    \ in each CertResponse\n   (depending on the status).  For some status values\
    \ (e.g., waiting),\n   neither of the optional fields will be present.\n   Given\
    \ an EncryptedCert and the relevant decryption key, the\n   certificate may be\
    \ obtained.  The purpose of this is to allow a CA to\n   return the value of a\
    \ certificate, but with the constraint that only\n   the intended recipient can\
    \ obtain the actual certificate.  The\n   benefit of this approach is that a CA\
    \ may reply with a certificate\n   even in the absence of a proof that the requester\
    \ is the end entity\n   that can use the relevant private key (note that the proof\
    \ is not\n   obtained until the certConf message is received by the CA).  Thus,\n\
    \   the CA will not have to revoke that certificate in the event that\n   something\
    \ goes wrong with the proof-of-possession (but MAY do so\n   anyway, depending\
    \ upon policy).\n"
- title: 5.3.5.  Key Update Request Content
  contents:
  - "5.3.5.  Key Update Request Content\n   For key update requests the CertReqMessages\
    \ syntax is used.\n   Typically, SubjectPublicKeyInfo, KeyId, and Validity are\
    \ the template\n   fields that may be supplied for each key to be updated.  This\
    \ message\n   is intended to be used to request updates to existing (non-revoked\n\
    \   and non-expired) certificates (therefore, it is sometimes referred to\n  \
    \ as a \"Certificate Update\" operation).  An update is a replacement\n   certificate\
    \ containing either a new subject public key or the current\n   subject public\
    \ key (although the latter practice may not be\n   appropriate for some environments).\n\
    \   See Appendix C and [CRMF] for CertReqMessages syntax.\n"
- title: 5.3.6.  Key Update Response Content
  contents:
  - "5.3.6.  Key Update Response Content\n   For key update responses, the CertRepMessage\
    \ syntax is used.  The\n   response is identical to the initialization response.\n\
    \   See Section 5.3.4 for CertRepMessage syntax.\n"
- title: 5.3.7.  Key Recovery Request Content
  contents:
  - "5.3.7.  Key Recovery Request Content\n   For key recovery requests the syntax\
    \ used is identical to the\n   initialization request CertReqMessages.  Typically,\n\
    \   SubjectPublicKeyInfo and KeyId are the template fields that may be\n   used\
    \ to supply a signature public key for which a certificate is\n   required (see\
    \ Appendix D profiles for further information).\n   See Appendix C and [CRMF]\
    \ for CertReqMessages syntax.  Note that if a\n   key history is required, the\
    \ requester must supply a Protocol\n   Encryption Key control in the request message.\n"
- title: 5.3.8.  Key Recovery Response Content
  contents:
  - "5.3.8.  Key Recovery Response Content\n   For key recovery responses, the following\
    \ syntax is used.  For some\n   status values (e.g., waiting) none of the optional\
    \ fields will be\n   present.\n    KeyRecRepContent ::= SEQUENCE {\n        status\
    \          PKIStatusInfo,\n        newSigCert  [0] Certificate               \
    \    OPTIONAL,\n        caCerts     [1] SEQUENCE SIZE (1..MAX) OF\n          \
    \                           Certificate      OPTIONAL,\n        keyPairHist [2]\
    \ SEQUENCE SIZE (1..MAX) OF\n                                     CertifiedKeyPair\
    \ OPTIONAL\n    }\n"
- title: 5.3.9.  Revocation Request Content
  contents:
  - "5.3.9.  Revocation Request Content\n   When requesting revocation of a certificate\
    \ (or several\n   certificates), the following data structure is used.  The name\
    \ of the\n   requester is present in the PKIHeader structure.\n    RevReqContent\
    \ ::= SEQUENCE OF RevDetails\n    RevDetails ::= SEQUENCE {\n        certDetails\
    \         CertTemplate,\n        crlEntryDetails     Extensions       OPTIONAL\n\
    \    }\n"
- title: 5.3.10.  Revocation Response Content
  contents:
  - "5.3.10.  Revocation Response Content\n   The revocation response is the response\
    \ to the above message.  If\n   produced, this is sent to the requester of the\
    \ revocation.  (A\n   separate revocation announcement message MAY be sent to\
    \ the subject\n   of the certificate for which revocation was requested.)\n  \
    \   RevRepContent ::= SEQUENCE {\n         status        SEQUENCE SIZE (1..MAX)\
    \ OF PKIStatusInfo,\n         revCerts  [0] SEQUENCE SIZE (1..MAX) OF CertId OPTIONAL,\n\
    \         crls      [1] SEQUENCE SIZE (1..MAX) OF CertificateList\n          \
    \             OPTIONAL\n     }\n"
- title: 5.3.11.  Cross Certification Request Content
  contents:
  - "5.3.11.  Cross Certification Request Content\n   Cross certification requests\
    \ use the same syntax (CertReqMessages) as\n   normal certification requests,\
    \ with the restriction that the key pair\n   MUST have been generated by the requesting\
    \ CA and the private key\n   MUST NOT be sent to the responding CA.  This request\
    \ MAY also be used\n   by subordinate CAs to get their certificates signed by\
    \ the parent CA.\n   See Appendix C and [CRMF] for CertReqMessages syntax.\n"
- title: 5.3.12.  Cross Certification Response Content
  contents:
  - "5.3.12.  Cross Certification Response Content\n   Cross certification responses\
    \ use the same syntax (CertRepMessage) as\n   normal certification responses,\
    \ with the restriction that no\n   encrypted private key can be sent.\n   See\
    \ Section 5.3.4 for CertRepMessage syntax.\n"
- title: 5.3.13.  CA Key Update Announcement Content
  contents:
  - "5.3.13.  CA Key Update Announcement Content\n   When a CA updates its own key\
    \ pair, the following data structure MAY\n   be used to announce this event.\n\
    \    CAKeyUpdAnnContent ::= SEQUENCE {\n       oldWithNew         Certificate,\n\
    \       newWithOld         Certificate,\n       newWithNew         Certificate\n\
    \    }\n"
- title: 5.3.14.  Certificate Announcement
  contents:
  - "5.3.14.  Certificate Announcement\n   This structure MAY be used to announce\
    \ the existence of certificates.\n   Note that this message is intended to be\
    \ used for those cases (if\n   any) where there is no pre-existing method for\
    \ publication of\n   certificates; it is not intended to be used where, for example,\
    \ X.500\n   is the method for publication of certificates.\n        CertAnnContent\
    \ ::= Certificate\n"
- title: 5.3.15.  Revocation Announcement
  contents:
  - "5.3.15.  Revocation Announcement\n   When a CA has revoked, or is about to revoke,\
    \ a particular\n   certificate, it MAY issue an announcement of this (possibly\
    \ upcoming)\n   event.\n        RevAnnContent ::= SEQUENCE {\n            status\
    \              PKIStatus,\n            certId              CertId,\n         \
    \   willBeRevokedAt     GeneralizedTime,\n            badSinceDate        GeneralizedTime,\n\
    \            crlDetails          Extensions  OPTIONAL\n        }\n   A CA MAY\
    \ use such an announcement to warn (or notify) a subject that\n   its certificate\
    \ is about to be (or has been) revoked.  This would\n   typically be used where\
    \ the request for revocation did not come from\n   the subject concerned.\n  \
    \ The willBeRevokedAt field contains the time at which a new entry will\n   be\
    \ added to the relevant CRLs.\n"
- title: 5.3.16.  CRL Announcement
  contents:
  - "5.3.16.  CRL Announcement\n   When a CA issues a new CRL (or set of CRLs) the\
    \ following data\n   structure MAY be used to announce this event.\n        CRLAnnContent\
    \ ::= SEQUENCE OF CertificateList\n"
- title: 5.3.17.  PKI Confirmation Content
  contents:
  - "5.3.17.  PKI Confirmation Content\n   This data structure is used in the protocol\
    \ exchange as the final\n   PKIMessage.  Its content is the same in all cases\
    \ -- actually there\n   is no content since the PKIHeader carries all the required\n\
    \   information.\n        PKIConfirmContent ::= NULL\n   Use of this message for\
    \ certificate confirmation is NOT RECOMMENDED;\n   certConf SHOULD be used instead.\
    \  Upon receiving a PKIConfirm for a\n   certificate response, the recipient MAY\
    \ treat it as a certConf with\n   all certificates being accepted.\n"
- title: 5.3.18.  Certificate Confirmation Content
  contents:
  - "5.3.18.  Certificate Confirmation Content\n   This data structure is used by\
    \ the client to send a confirmation to\n   the CA/RA to accept or reject certificates.\n\
    \         CertConfirmContent ::= SEQUENCE OF CertStatus\n         CertStatus ::=\
    \ SEQUENCE {\n            certHash    OCTET STRING,\n            certReqId   INTEGER,\n\
    \            statusInfo  PKIStatusInfo OPTIONAL\n         }\n   For any particular\
    \ CertStatus, omission of the statusInfo field\n   indicates ACCEPTANCE of the\
    \ specified certificate.  Alternatively,\n   explicit status details (with respect\
    \ to acceptance or rejection) MAY\n   be provided in the statusInfo field, perhaps\
    \ for auditing purposes at\n   the CA/RA.\n   Within CertConfirmContent, omission\
    \ of a CertStatus structure\n   corresponding to a certificate supplied in the\
    \ previous response\n   message indicates REJECTION of the certificate.  Thus,\
    \ an empty\n   CertConfirmContent (a zero-length SEQUENCE) MAY be used to indicate\n\
    \   rejection of all supplied certificates.  See Section 5.2.8, item (2),\n  \
    \ for a discussion of the certHash field with respect to proof-of-\n   possession.\n"
- title: 5.3.19.  PKI General Message Content
  contents:
  - "5.3.19.  PKI General Message Content\n     InfoTypeAndValue ::= SEQUENCE {\n\
    \         infoType               OBJECT IDENTIFIER,\n         infoValue      \
    \        ANY DEFINED BY infoType  OPTIONAL\n     }\n     -- where {id-it} = {id-pkix\
    \ 4} = {1 3 6 1 5 5 7 4}\n     GenMsgContent ::= SEQUENCE OF InfoTypeAndValue\n"
- title: 5.3.19.1.  CA Protocol Encryption Certificate
  contents:
  - "5.3.19.1.  CA Protocol Encryption Certificate\n   This MAY be used by the EE\
    \ to get a certificate from the CA to use to\n   protect sensitive information\
    \ during the protocol.\n      GenMsg:    {id-it 1}, < absent >\n      GenRep:\
    \    {id-it 1}, Certificate | < absent >\n   EEs MUST ensure that the correct\
    \ certificate is used for this\n   purpose.\n"
- title: 5.3.19.2.  Signing Key Pair Types
  contents:
  - "5.3.19.2.  Signing Key Pair Types\n   This MAY be used by the EE to get the list\
    \ of signature algorithms\n   (e.g., RSA, DSA) whose subject public key values\
    \ the CA is willing to\n   certify.  Note that for the purposes of this exchange,\
    \ rsaEncryption\n   and rsaWithSHA1, for example, are considered to be equivalent;\
    \ the\n   question being asked is, \"Is the CA willing to certify an RSA public\n\
    \   key?\"\n      GenMsg:    {id-it 2}, < absent >\n      GenRep:    {id-it 2},\
    \ SEQUENCE SIZE (1..MAX) OF\n                            AlgorithmIdentifier\n"
- title: 5.3.19.3.  Encryption/Key Agreement Key Pair Types
  contents:
  - "5.3.19.3.  Encryption/Key Agreement Key Pair Types\n   This MAY be used by the\
    \ client to get the list of encryption/key\n   agreement algorithms whose subject\
    \ public key values the CA is\n   willing to certify.\n      GenMsg:    {id-it\
    \ 3}, < absent >\n      GenRep:    {id-it 3}, SEQUENCE SIZE (1..MAX) OF\n    \
    \                        AlgorithmIdentifier\n"
- title: 5.3.19.4.  Preferred Symmetric Algorithm
  contents:
  - "5.3.19.4.  Preferred Symmetric Algorithm\n   This MAY be used by the client to\
    \ get the CA-preferred symmetric\n   encryption algorithm for any confidential\
    \ information that needs to\n   be exchanged between the EE and the CA (for example,\
    \ if the EE wants\n   to send its private decryption key to the CA for archival\
    \ purposes).\n      GenMsg:    {id-it 4}, < absent >\n      GenRep:    {id-it\
    \ 4}, AlgorithmIdentifier\n"
- title: 5.3.19.5.  Updated CA Key Pair
  contents:
  - "5.3.19.5.  Updated CA Key Pair\n   This MAY be used by the CA to announce a CA\
    \ key update event.\n      GenMsg:    {id-it 5}, CAKeyUpdAnnContent\n"
- title: 5.3.19.6.  CRL
  contents:
  - "5.3.19.6.  CRL\n   This MAY be used by the client to get a copy of the latest\
    \ CRL.\n      GenMsg:    {id-it 6}, < absent >\n      GenRep:    {id-it 6}, CertificateList\n"
- title: 5.3.19.7.  Unsupported Object Identifiers
  contents:
  - "5.3.19.7.  Unsupported Object Identifiers\n   This is used by the server to return\
    \ a list of object identifiers\n   that it does not recognize or support from\
    \ the list submitted by the\n   client.\n      GenRep:    {id-it 7}, SEQUENCE\
    \ SIZE (1..MAX) OF OBJECT IDENTIFIER\n"
- title: 5.3.19.8.  Key Pair Parameters
  contents:
  - "5.3.19.8.  Key Pair Parameters\n   This MAY be used by the EE to request the\
    \ domain parameters to use\n   for generating the key pair for certain public-key\
    \ algorithms.  It\n   can be used, for example, to request the appropriate P,\
    \ Q, and G to\n   generate the DH/DSA key, or to request a set of well-known elliptic\n\
    \   curves.\n      GenMsg:    {id-it 10}, OBJECT IDENTIFIER -- (Algorithm object-id)\n\
    \      GenRep:    {id-it 11}, AlgorithmIdentifier | < absent >\n   An absent infoValue\
    \ in the GenRep indicates that the algorithm\n   specified in GenMsg is not supported.\n\
    \   EEs MUST ensure that the parameters are acceptable to it and that the\n  \
    \ GenRep message is authenticated (to avoid substitution attacks).\n"
- title: 5.3.19.9.  Revocation Passphrase
  contents:
  - "5.3.19.9.  Revocation Passphrase\n   This MAY be used by the EE to send a passphrase\
    \ to a CA/RA for the\n   purpose of authenticating a later revocation request\
    \ (in the case\n   that the appropriate signing private key is no longer available\
    \ to\n   authenticate the request).  See Appendix B for further details on the\n\
    \   use of this mechanism.\n      GenMsg:    {id-it 12}, EncryptedValue\n    \
    \  GenRep:    {id-it 12}, < absent >\n"
- title: 5.3.19.10.  ImplicitConfirm
  contents:
  - "5.3.19.10.  ImplicitConfirm\n   See Section 5.1.1.1 for the definition and use\
    \ of {id-it 13}.\n"
- title: 5.3.19.11.  ConfirmWaitTime
  contents:
  - "5.3.19.11.  ConfirmWaitTime\n   See Section 5.1.1.2 for the definition and use\
    \ of {id-it 14}.\n"
- title: 5.3.19.12 Original PKIMessage
  contents:
  - "5.3.19.12 Original PKIMessage\n   See Section 5.1.3 for the definition and use\
    \ of {id-it 15}.\n"
- title: 5.3.19.13.  Supported Language Tags
  contents:
  - "5.3.19.13.  Supported Language Tags\n   This MAY be used to determine the appropriate\
    \ language tag to use in\n   subsequent messages.  The sender sends its list of\
    \ supported\n   languages (in order, most preferred to least); the receiver returns\n\
    \   the one it wishes to use.  (Note: each UTF8String MUST include a\n   language\
    \ tag.)  If none of the offered tags are supported, an error\n   MUST be returned.\n\
    \      GenMsg:    {id-it 16}, SEQUENCE SIZE (1..MAX) OF UTF8String\n      GenRep:\
    \    {id-it 16}, SEQUENCE SIZE (1) OF UTF8String\n"
- title: 5.3.20.  PKI General Response Content
  contents:
  - "5.3.20.  PKI General Response Content\n      GenRepContent ::= SEQUENCE OF InfoTypeAndValue\n\
    \   Examples of GenReps that MAY be supported include those listed in the\n  \
    \ subsections of Section 5.3.19.\n"
- title: 5.3.21.  Error Message Content
  contents:
  - "5.3.21.  Error Message Content\n   This data structure MAY be used by EE, CA,\
    \ or RA to convey error\n   info.\n    ErrorMsgContent ::= SEQUENCE {\n      \
    \  pKIStatusInfo          PKIStatusInfo,\n        errorCode              INTEGER\
    \           OPTIONAL,\n        errorDetails           PKIFreeText       OPTIONAL\n\
    \    }\n   This message MAY be generated at any time during a PKI transaction.\n\
    \   If the client sends this request, the server MUST respond with a\n   PKIConfirm\
    \ response, or another ErrorMsg if any part of the header is\n   not valid.  Both\
    \ sides MUST treat this message as the end of the\n   transaction (if a transaction\
    \ is in progress).\n   If protection is desired on the message, the client MUST\
    \ protect it\n   using the same technique (i.e., signature or MAC) as the starting\n\
    \   message of the transaction.  The CA MUST always sign it with a\n   signature\
    \ key.\n"
- title: 5.3.22.  Polling Request and Response
  contents:
  - "5.3.22.  Polling Request and Response\n   This pair of messages is intended to\
    \ handle scenarios in which the\n   client needs to poll the server in order to\
    \ determine the status of\n   an outstanding ir, cr, or kur transaction (i.e.,\
    \ when the \"waiting\"\n   PKIStatus has been received).\n    PollReqContent ::=\
    \ SEQUENCE OF SEQUENCE {\n        certReqId    INTEGER }\n    PollRepContent ::=\
    \ SEQUENCE OF SEQUENCE {\n        certReqId    INTEGER,\n        checkAfter  \
    \ INTEGER,  -- time in seconds\n        reason       PKIFreeText OPTIONAL }\n\
    \   The following clauses describe when polling messages are used, and\n   how\
    \ they are used.  It is assumed that multiple certConf messages can\n   be sent\
    \ during transactions.  There will be one sent in response to\n   each ip, cp,\
    \ or kup that contains a CertStatus for an issued\n   certificate.\n   1.  In\
    \ response to an ip, cp, or kup message, an EE will send a\n       certConf for\
    \ all issued certificates and, following the ack, a\n       pollReq for all pending\
    \ certificates.\n   2.  In response to a pollReq, a CA/RA will return an ip, cp,\
    \ or kup\n       if one or more of the pending certificates is ready; otherwise,\n\
    \       it will return a pollRep.\n   3.  If the EE receives a pollRep, it will\
    \ wait for at least as long\n       as the checkAfter value before sending another\
    \ pollReq.\n   4.  If an ip, cp, or kup is received in response to a pollReq,\
    \ then\n       it will be treated in the same way as the initial response.\n \
    \                              START\n                                 |\n   \
    \                              v\n                              Send ir\n    \
    \                             | ip\n                                 v\n     \
    \                       Check status\n                            of returned\
    \ <------------------------+\n                               certs           \
    \                  |\n                                 |                     \
    \          |\n       +------------------------>|<------------------+         \
    \  |\n       |                         |                   |           |\n   \
    \    |        (issued)         v       (waiting)   |           |\n     Add to\
    \ <----------- Check CertResponse ------> Add to       |\n    conf list      \
    \     for each certificate      pending list   |\n                           \
    \      /                               |\n                                /  \
    \                              |\n                   (conf list) /     (empty\
    \ conf list)           |\n                              /                    \
    \ ip           |\n                             /                 +----------------+\n\
    \      (empty pending list)  /                  |    pRep\n        END <---- Send\
    \ certConf         Send pReq------------>Wait\n                         |    \
    \             ^   ^               |\n                         |              \
    \   |   |               |\n                         +-----------------+   +---------------+\n\
    \                            (pending list)\n   In the following exchange, the\
    \ end entity is enrolling for two\n   certificates in one request.\n    Step \
    \ End Entity                       PKI\n    --------------------------------------------------------------------\n\
    \    1   Format ir\n    2                    -> ir      ->\n    3            \
    \                        Handle ir\n    4                                    Manual\
    \ intervention is\n                                         required for both\
    \ certs.\n    5                    <- ip      <-\n    6   Process ip\n    7  \
    \ Format pReq\n    8                    -> pReq     ->\n    9                \
    \                    Check status of cert requests\n    10                   \
    \                Certificates not ready\n    11                              \
    \     Format pRep\n    12                   <- pRep     <-\n    13  Wait\n   \
    \ 14  Format pReq\n    15                   -> pReq     ->\n    16           \
    \                        Check status of cert requests\n    17               \
    \                    One certificate is ready\n    18                        \
    \           Format ip\n    19                   <- ip       <-\n    20  Handle\
    \ ip\n    21  Format certConf\n    22                   -> certConf ->\n    23\
    \                                   Handle certConf\n    24                  \
    \                 Format ack\n    25                   <- pkiConf   <-\n    26\
    \  Format pReq\n    27                   -> pReq     ->\n    28              \
    \                     Check status of certificate\n    29                    \
    \               Certificate is ready\n    30                                 \
    \  Format ip\n    31                   <- ip       <-\n    31  Handle ip\n   \
    \ 32  Format certConf\n    33                   -> certConf ->\n    34       \
    \                            Handle certConf\n    35                         \
    \          Format ack\n    36                   <- pkiConf  <-\n"
- title: 6.  Mandatory PKI Management Functions
  contents:
  - "6.  Mandatory PKI Management Functions\n   Some of the PKI management functions\
    \ outlined in Section 3.1 above\n   are described in this section.\n   This section\
    \ deals with functions that are \"mandatory\" in the sense\n   that all end entity\
    \ and CA/RA implementations MUST be able to provide\n   the functionality described.\
    \  This part is effectively the profile of\n   the PKI management functionality\
    \ that MUST be supported.  Note,\n   however, that the management functions described\
    \ in this section do\n   not need to be accomplished using the PKI messages defined\
    \ in Section\n   5 if alternate means are suitable for a given environment (see\n\
    \   Appendix D for profiles of the PKIMessages that MUST be supported).\n"
- title: 6.1.  Root CA Initialization
  contents:
  - "6.1.  Root CA Initialization\n   [See Section 3.1.1.2 for this document's definition\
    \ of \"root CA\".]\n   A newly created root CA must produce a \"self-certificate\"\
    , which is a\n   Certificate structure with the profile defined for the \"newWithNew\"\
    \n   certificate issued following a root CA key update.\n   In order to make the\
    \ CA's self certificate useful to end entities\n   that do not acquire the self\
    \ certificate via \"out-of-band\" means, the\n   CA must also produce a fingerprint\
    \ for its certificate.  End entities\n   that acquire this fingerprint securely\
    \ via some \"out-of-band\" means\n   can then verify the CA's self-certificate\
    \ and, hence, the other\n   attributes contained therein.\n   The data structure\
    \ used to carry the fingerprint is the OOBCertHash.\n"
- title: 6.2.  Root CA Key Update
  contents:
  - "6.2.  Root CA Key Update\n   CA keys (as all other keys) have a finite lifetime\
    \ and will have to\n   be updated on a periodic basis.  The certificates NewWithNew,\n\
    \   NewWithOld, and OldWithNew (see Section 4.4.1) MAY be issued by the\n   CA\
    \ to aid existing end entities who hold the current self-signed CA\n   certificate\
    \ (OldWithOld) to transition securely to the new self-\n   signed CA certificate\
    \ (NewWithNew), and to aid new end entities who\n   will hold NewWithNew to acquire\
    \ OldWithOld securely for verification\n   of existing data.\n"
- title: 6.3.  Subordinate CA Initialization
  contents:
  - "6.3.  Subordinate CA Initialization\n   [See Section 3.1.1.2 for this document's\
    \ definition of \"subordinate\n   CA\".]\n   From the perspective of PKI management\
    \ protocols, the initialization\n   of a subordinate CA is the same as the initialization\
    \ of an end\n   entity.  The only difference is that the subordinate CA must also\n\
    \   produce an initial revocation list.\n"
- title: 6.4.  CRL production
  contents:
  - "6.4.  CRL production\n   Before issuing any certificates, a newly established\
    \ CA (which issues\n   CRLs) must produce \"empty\" versions of each CRL which\
    \ are to be\n   periodically produced.\n"
- title: 6.5.  PKI Information Request
  contents:
  - "6.5.  PKI Information Request\n   When a PKI entity (CA, RA, or EE) wishes to\
    \ acquire information about\n   the current status of a CA, it MAY send that CA\
    \ a request for such\n   information.\n   The CA MUST respond to the request by\
    \ providing (at least) all of the\n   information requested by the requester.\
    \  If some of the information\n   cannot be provided, then an error must be conveyed\
    \ to the requester.\n   If PKIMessages are used to request and supply this PKI\
    \ information,\n   then the request MUST be the GenMsg message, the response MUST\
    \ be the\n   GenRep message, and the error MUST be the Error message.  These\n\
    \   messages are protected using a MAC based on shared secret information\n  \
    \ (i.e., PasswordBasedMAC) or using any other authenticated means (if\n   the\
    \ end entity has an existing certificate).\n"
- title: 6.6.  Cross Certification
  contents:
  - "6.6.  Cross Certification\n   The requester CA is the CA that will become the\
    \ subject of the\n   cross-certificate; the responder CA will become the issuer\
    \ of the\n   cross-certificate.\n   The requester CA must be \"up and running\"\
    \ before initiating the\n   cross-certification operation.\n"
- title: '6.6.1.  One-Way Request-Response Scheme:'
  contents:
  - "6.6.1.  One-Way Request-Response Scheme:\n   The cross-certification scheme is\
    \ essentially a one way operation;\n   that is, when successful, this operation\
    \ results in the creation of\n   one new cross-certificate.  If the requirement\
    \ is that cross-\n   certificates be created in \"both directions\", then each\
    \ CA, in turn,\n   must initiate a cross-certification operation (or use another\n\
    \   scheme).\n   This scheme is suitable where the two CAs in question can already\n\
    \   verify each other's signatures (they have some common points of\n   trust)\
    \ or where there is an out-of-band verification of the origin of\n   the certification\
    \ request.\n   Detailed Description:\n   Cross certification is initiated at one\
    \ CA known as the responder.\n   The CA administrator for the responder identifies\
    \ the CA it wants to\n   cross certify and the responder CA equipment generates\
    \ an\n   authorization code.  The responder CA administrator passes this\n   authorization\
    \ code by out-of-band means to the requester CA\n   administrator.  The requester\
    \ CA administrator enters the\n   authorization code at the requester CA in order\
    \ to initiate the on-\n   line exchange.\n   The authorization code is used for\
    \ authentication and integrity\n   purposes.  This is done by generating a symmetric\
    \ key based on the\n   authorization code and using the symmetric key for generating\
    \ Message\n   Authentication Codes (MACs) on all messages exchanged.\n   (Authentication\
    \ may alternatively be done using signatures instead of\n   MACs, if the CAs are\
    \ able to retrieve and validate the required\n   public keys by some means, such\
    \ as an out-of-band hash comparison.)\n   The requester CA initiates the exchange\
    \ by generating a cross-\n   certification request (ccr) with a fresh random number\
    \ (requester\n   random number).  The requester CA then sends the ccr message\
    \ to the\n   responder CA.  The fields in this message are protected from\n  \
    \ modification with a MAC based on the authorization code.\n   Upon receipt of\
    \ the ccr message, the responder CA validates the\n   message and the MAC, saves\
    \ the requester random number, and generates\n   its own random number (responder\
    \ random number).  It then generates\n   (and archives, if desired) a new requester\
    \ certificate that contains\n   the requester CA public key and is signed with\
    \ the responder CA\n   signature private key.  The responder CA responds with\
    \ the cross\n   certification response (ccp) message.  The fields in this message\
    \ are\n   protected from modification with a MAC based on the authorization\n\
    \   code.\n   Upon receipt of the ccp message, the requester CA validates the\n\
    \   message (including the received random numbers) and the MAC.  The\n   requester\
    \ CA responds with the certConf message.  The fields in this\n   message are protected\
    \ from modification with a MAC based on the\n   authorization code.  The requester\
    \ CA MAY write the requester\n   certificate to the Repository as an aid to later\
    \ certificate path\n   construction.\n   Upon receipt of the certConf message,\
    \ the responder CA validates the\n   message and the MAC, and sends back an acknowledgement\
    \ using the\n   PKIConfirm message.  It MAY also publish the requester certificate\
    \ as\n   an aid to later path construction.\n   Notes:\n   1.  The ccr message\
    \ must contain a \"complete\" certification request;\n       that is, all fields\
    \ except the serial number (including, e.g., a\n       BasicConstraints extension)\
    \ must be specified by the requester\n       CA.\n   2.  The ccp message SHOULD\
    \ contain the verification certificate of\n       the responder CA; if present,\
    \ the requester CA must then verify\n       this certificate (for example, via\
    \ the \"out-of-band\" mechanism).\n   (A simpler, non-interactive model of cross-certification\
    \ may also be\n   envisioned, in which the issuing CA acquires the subject CA's\
    \ public\n   key from some repository, verifies it via some out-of-band mechanism,\n\
    \   and creates and publishes the cross-certificate without the subject\n   CA's\
    \ explicit involvement.  This model may be perfectly legitimate\n   for many environments,\
    \ but since it does not require any protocol\n   message exchanges, its detailed\
    \ description is outside the scope of\n   this specification.)\n"
- title: 6.7.  End Entity Initialization
  contents:
  - "6.7.  End Entity Initialization\n   As with CAs, end entities must be initialized.\
    \  Initialization of end\n   entities requires at least two steps:\n   o  acquisition\
    \ of PKI information\n   o  out-of-band verification of one root-CA public key\n\
    \   (other possible steps include the retrieval of trust condition\n   information\
    \ and/or out-of-band verification of other CA public keys).\n"
- title: 6.7.1.  Acquisition of PKI Information
  contents:
  - "6.7.1.  Acquisition of PKI Information\n   The information REQUIRED is:\n   o\
    \  the current root-CA public key\n   o  (if the certifying CA is not a root-CA)\
    \ the certification path\n      from the root CA to the certifying CA together\
    \ with appropriate\n      revocation lists\n   o  the algorithms and algorithm\
    \ parameters that the certifying CA\n      supports for each relevant usage\n\
    \   Additional information could be required (e.g., supported extensions\n   or\
    \ CA policy information) in order to produce a certification request\n   that\
    \ will be successful.  However, for simplicity we do not mandate\n   that the\
    \ end entity acquires this information via the PKI messages.\n   The end result\
    \ is simply that some certification requests may fail\n   (e.g., if the end entity\
    \ wants to generate its own encryption key,\n   but the CA doesn't allow that).\n\
    \   The required information MAY be acquired as described in Section 6.5.\n"
- title: 6.7.2.  Out-of-Band Verification of Root-CA Key
  contents:
  - "6.7.2.  Out-of-Band Verification of Root-CA Key\n   An end entity must securely\
    \ possess the public key of its root CA.\n   One method to achieve this is to\
    \ provide the end entity with the CA's\n   self-certificate fingerprint via some\
    \ secure \"out-of-band\" means.\n   The end entity can then securely use the CA's\
    \ self-certificate.\n   See Section 6.1 for further details.\n"
- title: 6.8.  Certificate Request
  contents:
  - "6.8.  Certificate Request\n   An initialized end entity MAY request an additional\
    \ certificate at\n   any time (for any purpose).  This request will be made using\
    \ the\n   certification request (cr) message.  If the end entity already\n   possesses\
    \ a signing key pair (with a corresponding verification\n   certificate), then\
    \ this cr message will typically be protected by the\n   entity's digital signature.\
    \  The CA returns the new certificate (if\n   the request is successful) in a\
    \ CertRepMessage.\n"
- title: 6.9.  Key Update
  contents:
  - "6.9.  Key Update\n   When a key pair is due to expire, the relevant end entity\
    \ MAY request\n   a key update; that is, it MAY request that the CA issue a new\n\
    \   certificate for a new key pair (or, in certain circumstances, a new\n   certificate\
    \ for the same key pair).  The request is made using a key\n   update request\
    \ (kur) message (referred to, in some environments, as a\n   \"Certificate Update\"\
    \ operation).  If the end entity already possesses\n   a signing key pair (with\
    \ a corresponding verification certificate),\n   then this message will typically\
    \ be protected by the entity's digital\n   signature.  The CA returns the new\
    \ certificate (if the request is\n   successful) in a key update response (kup)\
    \ message, which is\n   syntactically identical to a CertRepMessage.\n"
- title: 7.  Version Negotiation
  contents:
  - "7.  Version Negotiation\n   This section defines the version negotiation used\
    \ to support older\n   protocols between client and servers.\n   If a client knows\
    \ the protocol version(s) supported by the server\n   (e.g., from a previous PKIMessage\
    \ exchange or via some out-of-band\n   means), then it MUST send a PKIMessage\
    \ with the highest version\n   supported by both it and the server.  If a client\
    \ does not know what\n   version(s) the server supports, then it MUST send a PKIMessage\
    \ using\n   the highest version it supports.\n   If a server receives a message\
    \ with a version that it supports, then\n   the version of the response message\
    \ MUST be the same as the received\n   version.  If a server receives a message\
    \ with a version higher or\n   lower than it supports, then it MUST send back\
    \ an ErrorMsg with the\n   unsupportedVersion bit set (in the failureInfo field\
    \ of the\n   pKIStatusInfo).  If the received version is higher than the highest\n\
    \   supported version, then the version in the error message MUST be the\n   highest\
    \ version the server supports; if the received version is lower\n   than the lowest\
    \ supported version then the version in the error\n   message MUST be the lowest\
    \ version the server supports.\n   If a client gets back an ErrorMsgContent with\
    \ the unsupportedVersion\n   bit set and a version it supports, then it MAY retry\
    \ the request with\n   that version.\n"
- title: 7.1.  Supporting RFC 2510 Implementations
  contents:
  - "7.1.  Supporting RFC 2510 Implementations\n   RFC 2510 did not specify the behaviour\
    \ of implementations receiving\n   versions they did not understand since there\
    \ was only one version in\n   existence.  With the introduction of the present\
    \ revision of the\n   specification, the following versioning behaviour is recommended.\n"
- title: 7.1.1.  Clients Talking to RFC 2510 Servers
  contents:
  - "7.1.1.  Clients Talking to RFC 2510 Servers\n   If, after sending a cmp2000 message,\
    \ a client receives an\n   ErrorMsgContent with a version of cmp1999, then it\
    \ MUST abort the\n   current transaction.  It MAY subsequently retry the transaction\
    \ using\n   version cmp1999 messages.\n   If a client receives a non-error PKIMessage\
    \ with a version of\n   cmp1999, then it MAY decide to continue the transaction\
    \ (if the\n   transaction hasn't finished) using RFC 2510 semantics.  If it does\n\
    \   not choose to do so and the transaction is not finished, then it MUST\n  \
    \ abort the transaction and send an ErrorMsgContent with a version of\n   cmp1999.\n"
- title: 7.1.2.  Servers Receiving Version cmp1999 PKIMessages
  contents:
  - "7.1.2.  Servers Receiving Version cmp1999 PKIMessages\n   If a server receives\
    \ a version cmp1999 message it MAY revert to RFC\n   2510 behaviour and respond\
    \ with version cmp1999 messages.  If it does\n   not choose to do so, then it\
    \ MUST send back an ErrorMsgContent as\n   described above in Section 7.\n"
- title: 8.  Security Considerations
  contents:
  - '8.  Security Considerations

    '
- title: 8.1.  Proof-Of-Possession with a Decryption Key
  contents:
  - "8.1.  Proof-Of-Possession with a Decryption Key\n   Some cryptographic considerations\
    \ are worth explicitly spelling out.\n   In the protocols specified above, when\
    \ an end entity is required to\n   prove possession of a decryption key, it is\
    \ effectively challenged to\n   decrypt something (its own certificate).  This\
    \ scheme (and many\n   others!) could be vulnerable to an attack if the possessor\
    \ of the\n   decryption key in question could be fooled into decrypting an\n \
    \  arbitrary challenge and returning the cleartext to an attacker.\n   Although\
    \ in this specification a number of other failures in security\n   are required\
    \ in order for this attack to succeed, it is conceivable\n   that some future\
    \ services (e.g., notary, trusted time) could\n   potentially be vulnerable to\
    \ such attacks.  For this reason, we re-\n   iterate the general rule that implementations\
    \ should be very careful\n   about decrypting arbitrary \"ciphertext\" and revealing\
    \ recovered\n   \"plaintext\" since such a practice can lead to serious security\n\
    \   vulnerabilities.\n"
- title: 8.2.  Proof-Of-Possession by Exposing the Private Key
  contents:
  - "8.2.  Proof-Of-Possession by Exposing the Private Key\n   Note also that exposing\
    \ a private key to the CA/RA as a proof-of-\n   possession technique can carry\
    \ some security risks (depending upon\n   whether or not the CA/RA can be trusted\
    \ to handle such material\n   appropriately).  Implementers are advised to:\n\
    \      Exercise caution in selecting and using this particular POP\n      mechanism\n\
    \      When appropriate, have the user of the application explicitly\n      state\
    \ that they are willing to trust the CA/RA to have a copy of\n      their private\
    \ key before proceeding to reveal the private key.\n"
- title: 8.3.  Attack Against Diffie-Hellman Key Exchange
  contents:
  - "8.3.  Attack Against Diffie-Hellman Key Exchange\n   A small subgroup attack\
    \ during a Diffie-Hellman key exchange may be\n   carried out as follows.  A malicious\
    \ end entity may deliberately\n   choose D-H parameters that enable him/her to\
    \ derive (a significant\n   number of bits of) the D-H private key of the CA during\
    \ a key\n   archival or key recovery operation.  Armed with this knowledge, the\n\
    \   EE would then be able to retrieve the decryption private key of\n   another\
    \ unsuspecting end entity, EE2, during EE2's legitimate key\n   archival or key\
    \ recovery operation with that CA.  In order to avoid\n   the possibility of such\
    \ an attack, two courses of action are\n   available.  (1) The CA may generate\
    \ a fresh D-H key pair to be used\n   as a protocol encryption key pair for each\
    \ EE with which it\n   interacts.  (2) The CA may enter into a key validation\
    \ protocol (not\n   specified in this document) with each requesting end entity\
    \ to ensure\n   that the EE's protocol encryption key pair will not facilitate\
    \ this\n   attack.  Option (1) is clearly simpler (requiring no extra protocol\n\
    \   exchanges from either party) and is therefore RECOMMENDED.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   The PKI General Message types are identified by object\
    \ identifiers\n   (OIDs).  The OIDs for the PKI General Message types defined\
    \ in this\n   document were assigned from an arc delegated by the IANA to the\
    \ PKIX\n   Working Group.\n   The cryptographic algorithms referred to in this\
    \ document are\n   identified by object identifiers (OIDs).  The OIDs for cryptographic\n\
    \   algorithms were assigned from several arcs owned by various\n   organizations,\
    \ including RSA Security, Entrust Technologies, IANA and\n   IETF.\n   Should\
    \ additional encryption algorithms be introduced, the advocates\n   for such algorithms\
    \ are expected to assign the necessary OIDs from\n   their own arcs.\n   No further\
    \ action by the IANA is necessary for this document or any\n   anticipated updates.\n"
- title: Normative References
  contents:
  - "Normative References\n   [X509]       International Organization for Standardization\
    \ and\n                International Telecommunications Union, \"Information\n\
    \                technology - Open Systems Interconnection - The\n           \
    \     Directory:  Public-key and attribute certificate\n                frameworks\"\
    , ISO Standard 9594-8:2001, ITU-T\n                Recommendation X.509, March\
    \ 2000.\n   [MvOV97]     Menezes, A., van Oorschot, P. and S. Vanstone, \"Handbook\n\
    \                of Applied Cryptography\", CRC Press ISBN 0-8493-8523-7,\n  \
    \              1996.\n   [RFC2104]    Krawczyk, H., Bellare, M., and R. Canetti,\
    \ \"HMAC:\n                Keyed-Hashing for Message Authentication\", RFC 2104,\n\
    \                February 1997.\n   [RFC2119]    Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2202]    Cheng, P. and R. Glenn, \"Test Cases for HMAC-MD5\
    \ and\n                HMAC-SHA-1\", RFC 2202, September 1997.\n   [RFC3629] \
    \   Yergeau, F., \"UTF-8, a transformation format of ISO\n                10646\"\
    , STD 63, RFC 3629, November 2003.\n   [RFC2482]    Whistler, K. and G. Adams,\
    \ \"Language Tagging in Unicode\n                Plain Text\", RFC 2482, January\
    \ 1999.\n   [CRMF]       Schaad, J., \"Internet X.509 Public Key Infrastructure\n\
    \                Certificate Request Message Format (CRMF)\", RFC 4211,\n    \
    \            September 2005.\n   [RFC3066]    Alvestrand, H., \"Tags for the Identification\
    \ of\n                Languages\", BCP 47, RFC 3066, January 2001.\n"
- title: Informative References
  contents:
  - "Informative References\n   [CMPtrans]   Kapoor, A., Tschalar, R. and T. Kause,\
    \ \"Internet X.509\n                Public Key Infrastructure -- Transport Protocols\
    \ for\n                CMP\", Work in Progress.  2004.\n   [PKCS7]      RSA Laboratories,\
    \ \"The Public-Key Cryptography Standards\n                - Cryptographic Message\
    \ Syntax Standard.  Version 1.5\",\n                PKCS 7, November 1993.\n \
    \  [PKCS10]     Nystrom, M., and B. Kaliski, \"The Public-Key\n              \
    \  Cryptography Standards - Certification Request Syntax\n                Standard,\
    \ Version 1.7\", RFC 2986, May 2000.\n   [PKCS11]     RSA Laboratories, \"The\
    \ Public-Key Cryptography Standards\n                - Cryptographic Token Interface\
    \ Standard.  Version\n                2.10\", PKCS 11, December 1999.\n   [RFC1847]\
    \    Galvin, J., Murphy, S., Crocker, S., and N. Freed,\n                \"Security\
    \ Multiparts for MIME: Multipart/Signed and\n                Multipart/Encrypted\"\
    , RFC 1847, October 1995.\n   [RFC2559]    Boeyen, S., Howes, T. and P. Richard,\
    \ \"Internet X.509\n                Public Key Infrastructure Operational Protocols\
    \ -\n                LDAPv2\", RFC 2559, April 1999.\n   [RFC2585]    Housley,\
    \ R. and P. Hoffman, \"Internet X.509 Public Key\n                Infrastructure\
    \ Operational Protocols: FTP and HTTP\", RFC\n                2585, May 1999.\n\
    \   [FIPS-180]   National Institute of Standards and Technology, \"Secure\n  \
    \              Hash Standard\", FIPS PUB 180-1, May 1994.\n   [FIPS-186]   National\
    \ Institute of Standards and Technology, \"Digital\n                Signature\
    \ Standard\", FIPS PUB 186, May 1994.\n   [ANSI-X9.42] American National Standards\
    \ Institute, \"Public Key\n                Cryptography for The Financial Services\
    \ Industry:\n                Agreement of Symmetric Keys Using Discrete Logarithm\n\
    \                Cryptography\", ANSI X9.42, February 2000.\n"
- title: Appendix A.  Reasons for the Presence of RAs
  contents:
  - "Appendix A.  Reasons for the Presence of RAs\n   The reasons that justify the\
    \ presence of an RA can be split into\n   those that are due to technical factors\
    \ and those which are\n   organizational in nature.  Technical reasons include\
    \ the following.\n   o  If hardware tokens are in use, then not all end entities\
    \ will have\n      the equipment needed to initialize these; the RA equipment\
    \ can\n      include the necessary functionality (this may also be a matter of\n\
    \      policy).\n   o  Some end entities may not have the capability to publish\n\
    \      certificates; again, the RA may be suitably placed for this.\n   o  The\
    \ RA will be able to issue signed revocation requests on behalf\n      of end\
    \ entities associated with it, whereas the end entity may not\n      be able to\
    \ do this (if the key pair is completely lost).\n   Some of the organizational\
    \ reasons that argue for the presence of an\n   RA are the following.\n   o  It\
    \ may be more cost effective to concentrate functionality in the\n      RA equipment\
    \ than to supply functionality to all end entities\n      (especially if special\
    \ token initialization equipment is to be\n      used).\n   o  Establishing RAs\
    \ within an organization can reduce the number of\n      CAs required, which is\
    \ sometimes desirable.\n   o  RAs may be better placed to identify people with\
    \ their\n      \"electronic\" names, especially if the CA is physically remote\
    \ from\n      the end entity.\n   o  For many applications, there will already\
    \ be in place some\n      administrative structure so that candidates for the\
    \ role of RA are\n      easy to find (which may not be true of the CA).\n"
- title: Appendix B.  The Use of Revocation Passphrase
  contents:
  - "Appendix B.  The Use of Revocation Passphrase\n   A revocation request must incorporate\
    \ suitable security mechanisms,\n   including proper authentication, in order\
    \ to reduce the probability\n   of successful denial-of-service attacks.  A digital\
    \ signature on the\n   request -- MANDATORY to support within this specification\
    \ if\n   revocation requests are supported -- can provide the authentication\n\
    \   required, but there are circumstances under which an alternative\n   mechanism\
    \ may be desirable (e.g., when the private key is no longer\n   accessible and\
    \ the entity wishes to request a revocation prior to\n   re-certification of another\
    \ key pair).  In order to accommodate such\n   circumstances, a PasswordBasedMAC\
    \ on the request is also MANDATORY to\n   support within this specification (subject\
    \ to local security policy\n   for a given environment) if revocation requests\
    \ are supported and if\n   shared secret information can be established between\
    \ the requester\n   and the responder prior to the need for revocation.\n   A\
    \ mechanism that has seen use in some environments is \"revocation\n   passphrase\"\
    , in which a value of sufficient entropy (i.e., a\n   relatively long passphrase\
    \ rather than a short password) is shared\n   between (only) the entity and the\
    \ CA/RA at some point prior to\n   revocation; this value is later used to authenticate\
    \ the revocation\n   request.\n   In this specification, the following technique\
    \ to establish shared\n   secret information (i.e., a revocation passphrase) is\
    \ OPTIONAL to\n   support.  Its precise use in CMP messages is as follows.\n \
    \  o  The OID and value specified in Section 5.3.19.9 MAY be sent in a\n     \
    \ GenMsg message at any time, or MAY be sent in the generalInfo\n      field of\
    \ the PKIHeader of any PKIMessage at any time.  (In\n      particular, the EncryptedValue\
    \ may be sent in the header of the\n      certConf message that confirms acceptance\
    \ of certificates\n      requested in an initialization request or certificate\
    \ request\n      message.)  This conveys a revocation passphrase chosen by the\n\
    \      entity (i.e., the decrypted bytes of the encValue field) to the\n     \
    \ relevant CA/RA; furthermore, the transfer is accomplished with\n      appropriate\
    \ confidentiality characteristics (because the\n      passphrase is encrypted\
    \ under the CA/RA's protocolEncryptionKey).\n   o  If a CA/RA receives the revocation\
    \ passphrase (OID and value\n      specified in Section 5.3.19.9) in a GenMsg,\
    \ it MUST construct and\n      send a GenRep message that includes the OID (with\
    \ absent value)\n      specified in Section 5.3.19.9. If the CA/RA receives the\n\
    \      revocation passphrase in the generalInfo field of a PKIHeader of\n    \
    \  any PKIMessage, it MUST include the OID (with absent value) in the\n      generalInfo\
    \ field of the PKIHeader of the corresponding response\n      PKIMessage.  If\
    \ the CA/RA is unable to return the appropriate\n      response message for any\
    \ reason, it MUST send an error message\n      with a status of \"rejection\"\
    \ and, optionally, a failInfo reason\n      set.\n   o  The valueHint field of\
    \ EncryptedValue MAY contain a key identifier\n      (chosen by the entity, along\
    \ with the passphrase itself) to assist\n      in later retrieval of the correct\
    \ passphrase (e.g., when the\n      revocation request is constructed by the entity\
    \ and received by\n      the CA/RA).\n   o  The revocation request message is\
    \ protected by a PasswordBasedMAC,\n      with the revocation passphrase as the\
    \ key.  If appropriate, the\n      senderKID field in the PKIHeader MAY contain\
    \ the value previously\n      transmitted in valueHint.\n   Using the technique\
    \ specified above, the revocation passphrase may be\n   initially established\
    \ and updated at any time without requiring extra\n   messages or out-of-band\
    \ exchanges.  For example, the revocation\n   request message itself (protected\
    \ and authenticated through a MAC\n   that uses the revocation passphrase as a\
    \ key) may contain, in the\n   PKIHeader, a new revocation passphrase to be used\
    \ for authenticating\n   future revocation requests for any of the entity's other\n\
    \   certificates.  In some environments this may be preferable to\n   mechanisms\
    \ that reveal the passphrase in the revocation request\n   message, since this\
    \ can allow a denial-of-service attack in which the\n   revealed passphrase is\
    \ used by an unauthorized third party to\n   authenticate revocation requests\
    \ on the entity's other certificates.\n   However, because the passphrase is not\
    \ revealed in the request\n   message, there is no requirement that the passphrase\
    \ must always be\n   updated when a revocation request is made (that is, the same\n\
    \   passphrase MAY be used by an entity to authenticate revocation\n   requests\
    \ for different certificates at different times).\n   Furthermore, the above technique\
    \ can provide strong cryptographic\n   protection over the entire revocation request\
    \ message even when a\n   digital signature is not used.  Techniques that do authentication\
    \ of\n   the revocation request by simply revealing the revocation passphrase\n\
    \   typically do not provide cryptographic protection over the fields of\n   the\
    \ request message (so that a request for revocation of one\n   certificate may\
    \ be modified by an unauthorized third party to a\n   request for revocation of\
    \ another certificate for that entity).\n"
- title: Appendix C.  Request Message Behavioral Clarifications
  contents:
  - "Appendix C.  Request Message Behavioral Clarifications\n   In the case of updates\
    \ to [CRMF], which cause interpretation or\n   interoperability issues, [CRMF]\
    \ SHALL be the normative document.\n   The following definitions are from [CRMF].\
    \  They are included here in\n   order to codify behavioral clarifications to\
    \ that request message;\n   otherwise, all syntax and semantics are identical\
    \ to [CRMF].\n   CertRequest ::= SEQUENCE {\n       certReqId     INTEGER,\n \
    \      certTemplate  CertTemplate,\n       controls      Controls OPTIONAL }\n\
    \   -- If certTemplate is an empty SEQUENCE (i.e., all fields\n   -- omitted),\
    \ then controls MAY contain the\n   -- id-regCtrl-altCertTemplate control, specifying\
    \ a template\n   -- for a certificate other than an X.509v3 public-key\n   --\
    \ certificate.  Conversely, if certTemplate is not empty\n   -- (i.e., at least\
    \ one field is present), then controls MUST\n   -- NOT contain id-regCtrl- altCertTemplate.\
    \  The new control is\n   -- defined as follows:\n   id-regCtrl-altCertTemplate\
    \ OBJECT IDENTIFIER ::= {id-regCtrl 7}\n   AltCertTemplate ::= AttributeTypeAndValue\n\
    \   POPOSigningKey ::= SEQUENCE {\n       poposkInput           [0] POPOSigningKeyInput\
    \ OPTIONAL,\n       algorithmIdentifier   AlgorithmIdentifier,\n       signature\
    \             BIT STRING }\n   -- **********\n   -- * For the purposes of this\
    \ specification, the ASN.1 comment\n   -- * given in [CRMF] pertains not only\
    \ to certTemplate, but\n   -- * also to the altCertTemplate control.  That is,\n\
    \   -- **********\n   -- * The signature (using \"algorithmIdentifier\") is on\
    \ the\n   -- * DER-encoded value of poposkInput (i.e., the \"value\" OCTETs\n\
    \   -- * of the POPOSigningKeyInput DER).  NOTE: If CertReqMsg\n   -- * certReq\
    \ certTemplate (or the altCertTemplate control)\n   -- * contains the subject\
    \ and publicKey values, then poposkInput\n   -- * MUST be omitted and the signature\
    \ MUST be computed on the\n   -- * DER-encoded value of CertReqMsg certReq (or\
    \ the DER-\n   -- * encoded value of AltCertTemplate).  If\n   -- * certTemplate/altCertTemplate\
    \ does not contain both the\n   -- * subject and public key values (i.e., if it\
    \ contains only\n   -- * one of these, or neither), then poposkInput MUST be present\n\
    \   -- * and MUST be signed.\n   -- **********\n   POPOPrivKey ::= CHOICE {\n\
    \       thisMessage       [0] BIT STRING,\n   -- **********\n   -- * the type\
    \ of \"thisMessage\" is given as BIT STRING in\n   -- * [CRMF]; it should be \"\
    EncryptedValue\" (in accordance\n   -- * with Section 5.2.2, \"Encrypted Values\"\
    , of this specification).\n   -- * Therefore, this document makes the behavioral\
    \ clarification\n   -- * of specifying that the contents of \"thisMessage\" MUST\
    \ be encoded\n   -- * as an EncryptedValue and then wrapped in a BIT STRING. \
    \ This\n   -- * allows the necessary conveyance and protection of the\n   -- *\
    \ private key while maintaining bits-on-the-wire compatibility\n   -- * with [CRMF].\n\
    \   -- **********\n       subsequentMessage [1] SubsequentMessage,\n       dhMAC\
    \             [2] BIT STRING }\n"
- title: Appendix D.  PKI Management Message Profiles (REQUIRED).
  contents:
  - "Appendix D.  PKI Management Message Profiles (REQUIRED).\n   This appendix contains\
    \ detailed profiles for those PKIMessages that\n   MUST be supported by conforming\
    \ implementations (see Section 6).\n   Profiles for the PKIMessages used in the\
    \ following PKI management\n   operations are provided:\n   o  initial registration/certification\n\
    \   o  basic authenticated scheme\n   o  certificate request\n   o  key update\n"
- title: D.1.  General Rules for Interpretation of These Profiles.
  contents:
  - "D.1.  General Rules for Interpretation of These Profiles.\n   1.  Where OPTIONAL\
    \ or DEFAULT fields are not mentioned in individual\n       profiles, they SHOULD\
    \ be absent from the relevant message (i.e.,\n       a receiver can validly reject\
    \ a message containing such fields as\n       being syntactically incorrect).\
    \  Mandatory fields are not\n       mentioned if they have an obvious value (e.g.,\
    \ in this version of\n       the specification, pvno is always 2).\n   2.  Where\
    \ structures occur in more than one message, they are\n       separately profiled\
    \ as appropriate.\n   3.  The algorithmIdentifiers from PKIMessage structures\
    \ are profiled\n       separately.\n   4.  A \"special\" X.500 DN is called the\
    \ \"NULL-DN\"; this means a DN\n       containing a zero-length SEQUENCE OF RelativeDistinguishedNames\n\
    \       (its DER encoding is then '3000'H).\n   5.  Where a GeneralName is required\
    \ for a field, but no suitable\n       value is available (e.g., an end entity\
    \ produces a request before\n       knowing its name), then the GeneralName is\
    \ to be an X.500 NULL-DN\n       (i.e., the Name field of the CHOICE is to contain\
    \ a NULL-DN).\n       This special value can be called a \"NULL-GeneralName\"\
    .\n   6.  Where a profile omits to specify the value for a GeneralName,\n    \
    \   then the NULL-GeneralName value is to be present in the relevant\n       PKIMessage\
    \ field.  This occurs with the sender field of the\n       PKIHeader for some\
    \ messages.\n   7.  Where any ambiguity arises due to naming of fields, the profile\n\
    \       names these using a \"dot\" notation (e.g., \"certTemplate.subject\"\n\
    \       means the subject field within a field called certTemplate).\n   8.  Where\
    \ a \"SEQUENCE OF types\" is part of a message, a zero-based\n       array notation\
    \ is used to describe fields within the SEQUENCE OF\n       (e.g., crm[0].certReq.certTemplate.subject\
    \ refers to a subfield\n       of the first CertReqMsg contained in a request\
    \ message).\n   9.  All PKI message exchanges in Appendix D.4 to D.6 require a\n\
    \       certConf message to be sent by the initiating entity and a\n       PKIConfirm\
    \ to be sent by the responding entity.  The PKIConfirm\n       is not included\
    \ in some of the profiles given since its body is\n       NULL and its header\
    \ contents are clear from the context.  Any\n       authenticated means can be\
    \ used for the protectionAlg (e.g.,\n       password-based MAC, if shared secret\
    \ information is known, or\n       signature).\n"
- title: D.2.  Algorithm Use Profile
  contents:
  - "D.2.  Algorithm Use Profile\n   The following table contains definitions of algorithm\
    \ uses within PKI\n   management protocols.  The columns in the table are:\n \
    \  Name: an identifier used for message profiles\n   Use: description of where\
    \ and for what the algorithm is used\n   Mandatory: an AlgorithmIdentifier which\
    \ MUST be supported by\n      conforming implementations\n   Others: alternatives\
    \ to the mandatory AlgorithmIdentifier\n    Name         Use                 \
    \     Mandatory        Others\n    MSG_SIG_ALG  Protection of PKI        DSA/SHA-1\
    \        RSA/MD5,\n                 messages using signature                 \
    \ ECDSA, ...\n    MSG_MAC_ALG  protection of PKI        PasswordBasedMac HMAC,\n\
    \                 messages using MACing                     X9.9...\n    SYM_PENC_ALG\
    \ symmetric encryption of  3-DES (3-key-    AES,RC5,\n                 an end\
    \ entity's private  EDE, CBC mode)   CAST-128...\n                 key where symmetric\n\
    \                 key is distributed\n                 out-of-band\n    PROT_ENC_ALG\
    \ asymmetric algorithm     D-H              RSA,\n                 used for encryption\
    \ of                    ECDH, ...\n                 (symmetric keys for\n    \
    \             encryption of) private\n                 keys transported in\n \
    \                PKIMessages\n    PROT_SYM_ALG symmetric encryption     3-DES\
    \ (3-key-    AES,RC5,\n                 algorithm used for       EDE, CBC mode)\
    \   CAST-128...\n                 encryption of private\n                 key\
    \ bits (a key of this\n                 type is encrypted using\n            \
    \     PROT_ENC_ALG)\n   Mandatory AlgorithmIdentifiers and Specifications:\n \
    \  DSA/SHA-1:\n     AlgId: {1 2 840 10040 4 3};\n   Digital Signature Standard\
    \ [FIPS-186]\n     Public Modulus size: 1024 bits.\n   PasswordBasedMac:\n   \
    \  AlgId: {1 2 840 113533 7 66 13}, with SHA-1 {1 3 14 3 2 26} as the\n      \
    \      owf parameter and HMAC-SHA1 {1 3 6 1 5 5 8 1 2} as the mac\n          \
    \  parameter;\n     (this specification), along with\n   Secure Hash Standard\
    \ [FIPS-180] and [RFC2104]\n     HMAC key size:  160 bits (i.e., \"K\" = \"H\"\
    \ in Section 5.1.3.1,\n                               \"Shared secret information\"\
    )\n   3-DES:\n     AlgId: {1 2 840 113549 3 7};\n     (used in RSA's BSAFE and\
    \ in S/MIME).\n   D-H:\n     AlgId:  {1 2 840 10046 2 1};\n   [ANSI-X9.42]\n \
    \    Public Modulus Size:  1024 bits.\n     DomainParameters ::= SEQUENCE {\n\
    \        p       INTEGER, -- odd prime, p=jq +1\n        g       INTEGER, -- generator,\
    \ g^q = 1 mod p\n        q       INTEGER, -- prime factor of p-1\n        j  \
    \     INTEGER OPTIONAL, -- cofactor, j>=2\n        validationParms  ValidationParms\
    \ OPTIONAL\n     }\n     ValidationParms ::= SEQUENCE {\n        seed        \
    \  BIT STRING, -- seed for prime generation\n        pGenCounter   INTEGER   \
    \  -- parameter verification\n     }\n"
- title: D.3.  Proof-of-Possession Profile
  contents:
  - "D.3.  Proof-of-Possession Profile\n   POP fields for use (in signature field\
    \ of pop field of\n   ProofOfPossession structure) when proving possession of\
    \ a private\n   signing key that corresponds to a public verification key for\
    \ which a\n   certificate has been requested.\n    Field               Value \
    \        Comment\n    algorithmIdentifier MSG_SIG_ALG   only signature protection\
    \ is\n                                      allowed for this proof\n    signature\
    \           present       bits calculated using MSG_SIG_ALG\n   Proof-of-possession\
    \ of a private decryption key that corresponds to a\n   public encryption key\
    \ for which a certificate has been requested does\n   not use this profile; the\
    \ CertHash field of the certConf message is\n   used instead.\n   Not every CA/RA\
    \ will do Proof-of-Possession (of signing key,\n   decryption key, or key agreement\
    \ key) in the PKIX-CMP in-band\n   certification request protocol (how POP is\
    \ done MAY ultimately be a\n   policy issue that is made explicit for any given\
    \ CA in its publicized\n   Policy OID and Certification Practice Statement). \
    \ However, this\n   specification MANDATES that CA/RA entities MUST do POP (by\
    \ some\n   means) as part of the certification process.  All end entities MUST\n\
    \   be prepared to provide POP (i.e., these components of the PKIX-CMP\n   protocol\
    \ MUST be supported).\n"
- title: D.4.  Initial Registration/Certification (Basic Authenticated Scheme)
  contents:
  - "D.4.  Initial Registration/Certification (Basic Authenticated Scheme)\n   An\
    \ (uninitialized) end entity requests a (first) certificate from a\n   CA.  When\
    \ the CA responds with a message containing a certificate,\n   the end entity\
    \ replies with a certificate confirmation.  The CA sends\n   a PKIConfirm back,\
    \ closing the transaction.  All messages are\n   authenticated.\n   This scheme\
    \ allows the end entity to request certification of a\n   locally-generated public\
    \ key (typically a signature key).  The end\n   entity MAY also choose to request\
    \ the centralized generation and\n   certification of another key pair (typically\
    \ an encryption key pair).\n   Certification may only be requested for one locally\
    \ generated public\n   key (for more, use separate PKIMessages).\n   The end entity\
    \ MUST support proof-of-possession of the private key\n   associated with the\
    \ locally-generated public key.\n   Preconditions:\n   1.  The end entity can\
    \ authenticate the CA's signature based on out-\n       of-band means\n   2. \
    \ The end entity and the CA share a symmetric MACing key\n   Message flow:\n \
    \   Step# End entity                           PKI\n      1   format ir\n    \
    \  2                      ->   ir      ->\n      3                           \
    \             handle ir\n      4                                        format\
    \ ip\n      5                      <-   ip      <-\n      6   handle ip\n    \
    \  7   format certConf\n      8                      ->   certConf ->\n      9\
    \                                        handle certConf\n     10            \
    \                            format PKIConf\n     11                      <- \
    \  PKIConf  <-\n     12   handle PKIConf\n   For this profile, we mandate that\
    \ the end entity MUST include all\n   (i.e., one or two) CertReqMsg in a single\
    \ PKIMessage, and that the\n   PKI (CA) MUST produce a single response PKIMessage\
    \ that contains the\n   complete response (i.e., including the OPTIONAL second\
    \ key pair, if\n   it was requested and if centralized key generation is supported).\n\
    \   For simplicity, we also mandate that this message MUST be the final\n   one\
    \ (i.e., no use of \"waiting\" status value).\n   The end entity has an out-of-band\
    \ interaction with the CA/RA.  This\n   transaction established the shared secret,\
    \ the referenceNumber and\n   OPTIONALLY the distinguished name used for both\
    \ sender and subject\n   name in the certificate template.  It is RECOMMENDED\
    \ that the shared\n   secret be at least 12 characters long.\n   Initialization\
    \ Request -- ir\n   Field                Value\n   recipient            CA name\n\
    \     -- the name of the CA who is being asked to produce a certificate\n   protectionAlg\
    \        MSG_MAC_ALG\n     -- only MAC protection is allowed for this request,\
    \ based\n     -- on initial authentication key\n   senderKID            referenceNum\n\
    \     -- the reference number which the CA has previously issued\n     -- to the\
    \ end entity (together with the MACing key)\n   transactionID        present\n\
    \     -- implementation-specific value, meaningful to end\n     -- entity.\n \
    \    -- [If already in use at the CA, then a rejection message MUST\n     -- be\
    \ produced by the CA]\n   senderNonce          present\n     -- 128 (pseudo-)random\
    \ bits\n   freeText             any valid value\n   body                 ir (CertReqMessages)\n\
    \                        only one or two CertReqMsg\n                        are\
    \ allowed\n     -- if more certificates are required, requests MUST be\n     --\
    \ packaged in separate PKIMessages\n   CertReqMsg           one or two present\n\
    \     -- see below for details, note: crm[0] means the first\n     -- (which MUST\
    \ be present), crm[1] means the second (which\n     -- is OPTIONAL, and used to\
    \ ask for a centrally-generated key)\n   crm[0].certReq.      fixed value of zero\n\
    \      certReqId\n     -- this is the index of the template within the message\n\
    \   crm[0].certReq       present\n      certTemplate\n     -- MUST include subject\
    \ public key value, otherwise unconstrained\n   crm[0].pop...        optionally\
    \ present if public key\n      POPOSigningKey    from crm[0].certReq.certTemplate\
    \ is\n                        a signing key\n     -- proof-of-possession MAY be\
    \ required in this exchange\n     -- (see Appendix D.3 for details)\n   crm[0].certReq.\
    \      optionally present\n      controls.archiveOptions\n     -- the end entity\
    \ MAY request that the locally-generated\n     -- private key be archived\n  \
    \ crm[0].certReq.      optionally present\n      controls.publicationInfo\n  \
    \   -- the end entity MAY ask for publication of resulting cert.\n   crm[1].certReq\
    \       fixed value of one\n      certReqId\n     -- the index of the template\
    \ within the message\n   crm[1].certReq       present\n      certTemplate\n  \
    \    -- MUST NOT include actual public key bits, otherwise\n      -- unconstrained\
    \ (e.g., the names need not be the same as in\n      -- crm[0]).  Note that subjectPublicKeyInfo\
    \ MAY be present\n      -- and contain an AlgorithmIdentifier followed by a\n\
    \      -- zero-length BIT STRING for the subjectPublicKey if it is\n      -- desired\
    \ to inform the CA/RA of algorithm and parameter\n      -- preferences regarding\
    \ the to-be-generated key pair.\n   crm[1].certReq.      present [object identifier\
    \ MUST be PROT_ENC_ALG]\n      controls.protocolEncrKey\n     -- if centralized\
    \ key generation is supported by this CA,\n     -- this short-term asymmetric\
    \ encryption key (generated by\n     -- the end entity) will be used by the CA\
    \ to encrypt (a\n     -- symmetric key used to encrypt) a private key generated\
    \ by\n     -- the CA on behalf of the end entity\n   crm[1].certReq.      optionally\
    \ present\n      controls.archiveOptions\n   crm[1].certReq.      optionally present\n\
    \      controls.publicationInfo\n   protection           present\n     -- bits\
    \ calculated using MSG_MAC_ALG\n   Initialization Response -- ip\n   Field   \
    \             Value\n   sender               CA name\n     -- the name of the\
    \ CA who produced the message\n   messageTime          present\n     -- time at\
    \ which CA produced message\n   protectionAlg        MS_MAC_ALG\n     -- only\
    \ MAC protection is allowed for this response\n   senderKID             referenceNum\n\
    \     -- the reference number that the CA has previously issued to the\n     --\
    \ end entity (together with the MACing key)\n   transactionID        present\n\
    \     -- value from corresponding ir message\n   senderNonce          present\n\
    \     -- 128 (pseudo-)random bits\n   recipNonce           present\n     -- value\
    \ from senderNonce in corresponding ir message\n   freeText             any valid\
    \ value\n   body                 ip (CertRepMessage)\n                       \
    \ contains exactly one response\n                        for each request\n  \
    \   -- The PKI (CA) responds to either one or two requests as\n     -- appropriate.\
    \  crc[0] denotes the first (always present);\n     -- crc[1] denotes the second\
    \ (only present if the ir message\n     -- contained two requests and if the CA\
    \ supports centralized\n     -- key generation).\n   crc[0].              fixed\
    \ value of zero\n      certReqId\n     -- MUST contain the response to the first\
    \ request in the\n     -- corresponding ir message\n   crc[0].status.       present,\
    \ positive values allowed:\n      status               \"accepted\", \"grantedWithMods\"\
    \n                        negative values allowed:\n                         \
    \  \"rejection\"\n   crc[0].status.       present if and only if\n      failInfo\
    \          crc[0].status.status is \"rejection\"\n   crc[0].              present\
    \ if and only if\n      certifiedKeyPair  crc[0].status.status is\n          \
    \                 \"accepted\" or \"grantedWithMods\"\n   certificate        \
    \  present unless end entity's public\n                        key is an encryption\
    \ key and POP\n                        is done in this in-band exchange\n   encryptedCert\
    \        present if and only if end entity's\n                        public key\
    \ is an encryption key and\n                        POP done in this in-band exchange\n\
    \   publicationInfo      optionally present\n     -- indicates where certificate\
    \ has been published (present\n     -- at discretion of CA)\n   crc[1].      \
    \        fixed value of one\n      certReqId\n     -- MUST contain the response\
    \ to the second request in the\n     -- corresponding ir message\n   crc[1].status.\
    \       present, positive values allowed:\n      status               \"accepted\"\
    , \"grantedWithMods\"\n                        negative values allowed:\n    \
    \                       \"rejection\"\n   crc[1].status.       present if and\
    \ only if\n      failInfo          crc[0].status.status is \"rejection\"\n   crc[1].\
    \              present if and only if\n      certifiedKeyPair  crc[0].status.status\
    \ is \"accepted\"\n                        or \"grantedWithMods\"\n   certificate\
    \          present\n   privateKey           present\n     -- see Appendix C, Request\
    \ Message Behavioral Clarifications\n   publicationInfo      optionally present\n\
    \     -- indicates where certificate has been published (present\n     -- at discretion\
    \ of CA)\n   protection           present\n     -- bits calculated using MSG_MAC_ALG\n\
    \   extraCerts           optionally present\n     -- the CA MAY provide additional\
    \ certificates to the end\n     -- entity\n   Certificate confirm; certConf\n\
    \   Field                Value\n   sender               present\n     -- same\
    \ as in ir\n   recipient            CA name\n     -- the name of the CA who was\
    \ asked to produce a certificate\n   transactionID        present\n     -- value\
    \ from corresponding ir and ip messages\n   senderNonce          present\n   \
    \  -- 128 (pseudo-) random bits\n   recipNonce           present\n     -- value\
    \ from senderNonce in corresponding ip message\n   protectionAlg        MSG_MAC_ALG\n\
    \     -- only MAC protection is allowed for this message.  The\n     -- MAC is\
    \ based on the initial authentication key shared\n     -- between the EE and the\
    \ CA.\n   senderKID            referenceNum\n     -- the reference number which\
    \ the CA has previously issued\n     -- to the end entity (together with the MACing\
    \ key)\n   body                 certConf\n     -- see Section 5.3.18, \"PKI Confirmation\
    \ Content\", for the\n     -- contents of the certConf fields.\n     -- Note:\
    \ two CertStatus structures are required if both an\n     -- encryption and a\
    \ signing certificate were sent.\n   protection           present\n     -- bits\
    \ calculated using MSG_MAC_ALG\n   Confirmation; PKIConf\n   Field           \
    \     Value\n   sender               present\n     -- same as in ip\n   recipient\
    \            present\n     -- sender name from certConf\n   transactionID    \
    \    present\n     -- value from certConf message\n   senderNonce          present\n\
    \     -- 128 (pseudo-) random bits\n   recipNonce           present\n     -- value\
    \ from senderNonce from certConf message\n   protectionAlg        MSG_MAC_ALG\n\
    \     -- only MAC protection is allowed for this message.\n   senderKID      \
    \      referenceNum\n   body                 PKIConf\n   protection          \
    \ present\n     -- bits calculated using MSG_MAC_ALG\n"
- title: D.5.  Certificate Request
  contents:
  - "D.5.  Certificate Request\n   An (initialized) end entity requests a certificate\
    \ from a CA (for any\n   reason).  When the CA responds with a message containing\
    \ a\n   certificate, the end entity replies with a certificate confirmation.\n\
    \   The CA replies with a PKIConfirm, to close the transaction.  All\n   messages\
    \ are authenticated.\n   The profile for this exchange is identical to that given\
    \ in Appendix\n   D.4, with the following exceptions:\n   o  sender name SHOULD\
    \ be present\n   o  protectionAlg of MSG_SIG_ALG MUST be supported (MSG_MAC_ALG\
    \ MAY\n      also be supported) in request, response, certConfirm, and\n     \
    \ PKIConfirm messages;\n   o  senderKID and recipKID are only present if required\
    \ for message\n      verification;\n   o  body is cr or cp;\n   o  body may contain\
    \ one or two CertReqMsg structures, but either\n      CertReqMsg may be used to\
    \ request certification of a locally-\n      generated public key or a centrally-generated\
    \ public key (i.e.,\n      the position-dependence requirement of Appendix D.4\
    \ is removed);\n   o  protection bits are calculated according to the protectionAlg\n\
    \      field.\n"
- title: D.6.  Key Update Request
  contents:
  - "D.6.  Key Update Request\n   An (initialized) end entity requests a certificate\
    \ from a CA (to\n   update the key pair and/or corresponding certificate that\
    \ it already\n   possesses).  When the CA responds with a message containing a\n\
    \   certificate, the end entity replies with a certificate confirmation.\n   The\
    \ CA replies with a PKIConfirm, to close the transaction.  All\n   messages are\
    \ authenticated.\n   The profile for this exchange is identical to that given\
    \ in Appendix\n   D.4, with the following exceptions:\n   1.  sender name SHOULD\
    \ be present\n   2.  protectionAlg of MSG_SIG_ALG MUST be supported (MSG_MAC_ALG\
    \ MAY\n       also be supported) in request, response, certConfirm, and\n    \
    \   PKIConfirm messages;\n   3.  senderKID and recipKID are only present if required\
    \ for message\n       verification;\n   4.  body is kur or kup;\n   5.  body may\
    \ contain one or two CertReqMsg structures, but either\n       CertReqMsg may\
    \ be used to request certification of a locally-\n       generated public key\
    \ or a centrally-generated public key (i.e.,\n       the position-dependence requirement\
    \ of Appendix D.4 is removed);\n   6.  protection bits are calculated according\
    \ to the protectionAlg\n       field;\n   7.  regCtrl OldCertId SHOULD be used\
    \ (unless it is clear to both\n       sender and receiver -- by means not specified\
    \ in this document --\n       that it is not needed).\n"
- title: Appendix E.  PKI Management Message Profiles (OPTIONAL).
  contents:
  - "Appendix E.  PKI Management Message Profiles (OPTIONAL).\n   This appendix contains\
    \ detailed profiles for those PKIMessages that\n   MAY be supported by implementations\
    \ (in addition to the messages\n   which MUST be supported; see Section 6 and\
    \ Appendix D).\n   Profiles for the PKIMessages used in the following PKI management\n\
    \   operations are provided:\n   o  root CA key update\n   o  information request/response\n\
    \   o  cross-certification request/response (1-way)\n   o  in-band initialization\
    \ using external identity certificate\n   Later versions of this document may\
    \ extend the above to include\n   profiles for the operations listed below (along\
    \ with other\n   operations, if desired).\n   o  revocation request\n   o  certificate\
    \ publication\n   o  CRL publication\n"
- title: E.1.  General Rules for Interpretation of These Profiles.
  contents:
  - "E.1.  General Rules for Interpretation of These Profiles.\n   Identical to Appendix\
    \ D.1.\n"
- title: E.2.  Algorithm Use Profile
  contents:
  - "E.2.  Algorithm Use Profile\n   Identical to Appendix D.2.\n"
- title: E.3.  Self-Signed Certificates
  contents:
  - "E.3.  Self-Signed Certificates\n   Profile of how a Certificate structure may\
    \ be \"self-signed\".  These\n   structures are used for distribution of CA public\
    \ keys.  This can\n   occur in one of three ways (see Section 4.4 above for a\
    \ description\n   of the use of these structures):\n   Type          Function\n\
    \   -----------------------------------------------------------------\n   newWithNew\
    \ a true \"self-signed\" certificate; the contained\n              public key\
    \ MUST be usable to verify the signature\n              (though this provides\
    \ only integrity and no\n              authentication whatsoever)\n   oldWithNew\
    \ previous root CA public key signed with new private key\n   newWithOld new root\
    \ CA public key signed with previous private key\n   Such certificates (including\
    \ relevant extensions) must contain\n   \"sensible\" values for all fields.  For\
    \ example, when present,\n   subjectAltName MUST be identical to issuerAltName,\
    \ and, when present,\n   keyIdentifiers must contain appropriate values, et cetera.\n"
- title: E.4.  Root CA Key Update
  contents:
  - "E.4.  Root CA Key Update\n   A root CA updates its key pair.  It then produces\
    \ a CA key update\n   announcement message that can be made available (via some\
    \ transport\n   mechanism) to the relevant end entities.  A confirmation message\
    \ is\n   NOT REQUIRED from the end entities.\n   ckuann message:\n    Field  \
    \      Value                        Comment\n   --------------------------------------------------------------\n\
    \    sender       CA name CA name\n    body         ckuann(CAKeyUpdAnnContent)\n\
    \    oldWithNew   present                  see Appendix E.3 above\n    newWithOld\
    \   present                  see Appendix E.3 above\n    newWithNew   present\
    \                  see Appendix E.3 above\n    extraCerts   optionally present\
    \       can be used to \"publish\"\n                                         \
    \ certificates (e.g.,\n                                          certificates\
    \ signed using\n                                          the new private key)\n"
- title: E.5.  PKI Information Request/Response
  contents:
  - "E.5.  PKI Information Request/Response\n   The end entity sends a general message\
    \ to the PKI requesting details\n   that will be required for later PKI management\
    \ operations.  RA/CA\n   responds with a general response.  If an RA generates\
    \ the response,\n   then it will simply forward the equivalent message that it\
    \ previously\n   received from the CA, with the possible addition of certificates\
    \ to\n   the extraCerts fields of the PKIMessage.  A confirmation message is\n\
    \   NOT REQUIRED from the end entity.\n   Message Flows:\n   Step# End entity\
    \                        PKI\n      1  format genm\n      2                ->\
    \   genm   ->\n      3                                    handle genm\n      4\
    \                                    produce genp\n      5                <- \
    \  genp   <-\n      6  handle genp\n   genM:\n   Field               Value\n \
    \  recipient           CA name\n     -- the name of the CA as contained in issuerAltName\n\
    \     -- extensions or issuer fields within certificates\n   protectionAlg   \
    \    MSG_MAC_ALG or MSG_SIG_ALG\n     -- any authenticated protection alg.\n \
    \  SenderKID           present if required\n     -- must be present if required\
    \ for verification of message\n     -- protection\n   freeText            any\
    \ valid value\n   body                genr (GenReqContent)\n   GenMsgContent \
    \      empty SEQUENCE\n     -- all relevant information requested\n   protection\
    \          present\n     -- bits calculated using MSG_MAC_ALG or MSG_SIG_ALG\n\
    \   genP:\n   Field                Value\n   sender               CA name\n  \
    \   -- name of the CA which produced the message\n   protectionAlg        MSG_MAC_ALG\
    \ or MSG_SIG_ALG\n     -- any authenticated protection alg.\n   senderKID    \
    \        present if required\n     -- must be present if required for verification\
    \ of message\n     -- protection\n   body                 genp (GenRepContent)\n\
    \   CAProtEncCert        present (object identifier one\n                    \
    \    of PROT_ENC_ALG), with relevant\n                        value\n     -- to\
    \ be used if end entity needs to encrypt information for\n     -- the CA (e.g.,\
    \ private key for recovery purposes)\n   SignKeyPairTypes     present, with relevant\
    \ value\n     -- the set of signature algorithm identifiers that this CA will\n\
    \     -- certify for subject public keys\n   EncKeyPairTypes      present, with\
    \ relevant value\n     -- the set of encryption/key agreement algorithm identifiers\
    \ that\n     -- this CA will certify for subject public keys\n   PreferredSymmAlg\
    \     present (object identifier one\n                        of PROT_SYM_ALG)\
    \ , with relevant\n                        value\n     -- the symmetric algorithm\
    \ that this CA expects to be used\n     -- in later PKI messages (for encryption)\n\
    \   CAKeyUpdateInfo      optionally present, with\n                        relevant\
    \ value\n     -- the CA MAY provide information about a relevant root CA\n   \
    \  -- key pair using this field (note that this does not imply\n     -- that the\
    \ responding CA is the root CA in question)\n   CurrentCRL           optionally\
    \ present, with relevant value\n     -- the CA MAY provide a copy of a complete\
    \ CRL (i.e.,\n     -- fullest possible one)\n   protection           present\n\
    \     -- bits calculated using MSG_MAC_ALG or MSG_SIG_ALG\n   extraCerts     \
    \      optionally present\n     -- can be used to send some certificates to the\
    \ end\n     -- entity. An RA MAY add its certificate here.\n"
- title: E.6.  Cross Certification Request/Response (1-way)
  contents:
  - "E.6.  Cross Certification Request/Response (1-way)\n   Creation of a single cross-certificate\
    \ (i.e., not two at once).  The\n   requesting CA MAY choose who is responsible\
    \ for publication of the\n   cross-certificate created by the responding CA through\
    \ use of the\n   PKIPublicationInfo control.\n   Preconditions:\n   1.  Responding\
    \ CA can verify the origin of the request (possibly\n       requiring out-of-band\
    \ means) before processing the request.\n   2.  Requesting CA can authenticate\
    \ the authenticity of the origin of\n       the response (possibly requiring out-of-band\
    \ means) before\n       processing the response\n   The use of certificate confirmation\
    \ and the corresponding server\n   confirmation is determined by the generalInfo\
    \ field in the PKIHeader\n   (see Section 5.1.1).  The following profile does\
    \ not mandate support\n   for either confirmation.\n   Message Flows:\n   Step#\
    \ Requesting CA                       Responding CA\n     1   format ccr\n   \
    \  2                   ->    ccr    ->\n     3                               \
    \        handle ccr\n     4                                       produce ccp\n\
    \     5                   <-    ccp    <-\n     6   handle ccp\n   ccr:\n   Field\
    \                 Value\n   sender                Requesting CA name\n     --\
    \ the name of the CA who produced the message\n   recipient             Responding\
    \ CA name\n     -- the name of the CA who is being asked to produce a certificate\n\
    \   messageTime           time of production of message\n     -- current time\
    \ at requesting CA\n   protectionAlg         MSG_SIG_ALG\n     -- only signature\
    \ protection is allowed for this request\n   senderKID             present if\
    \ required\n     -- must be present if required for verification of message\n\
    \     -- protection\n   recipKID             present if required\n     -- must\
    \ be present if required for verification of message\n     -- protection\n   transactionID\
    \         present\n     -- implementation-specific value, meaningful to requesting\
    \ CA.\n     -- [If already in use at responding CA then a rejection message\n\
    \     -- MUST be produced by responding CA]\n   senderNonce           present\n\
    \     -- 128 (pseudo-)random bits\n   freeText              any valid value\n\
    \   body                  ccr (CertReqMessages)\n                         only\
    \ one CertReqMsg\n                         allowed\n     -- if multiple cross\
    \ certificates are required, they MUST be\n     -- packaged in separate PKIMessages\n\
    \   certTemplate          present\n     -- details follow\n   version        \
    \       v1 or v3\n     -- v3 STRONGLY RECOMMENDED\n   signingAlg            present\n\
    \     -- the requesting CA must know in advance with which algorithm it\n    \
    \ -- wishes the certificate to be signed\n   subject               present\n \
    \    -- may be NULL-DN only if subjectAltNames extension value proposed\n   validity\
    \              present\n     -- MUST be completely specified (i.e., both fields\
    \ present)\n   issuer                present\n     -- may be NULL-DN only if issuerAltNames\
    \ extension value proposed\n   publicKey             present\n     -- the key\
    \ to be certified (which must be for a signing algorithm)\n   extensions     \
    \       optionally present\n     -- a requesting CA must propose values for all\
    \ extensions\n     -- that it requires to be in the cross-certificate\n   POPOSigningKey\
    \        present\n     -- see Section D3: Proof-of-possession profile\n   protection\
    \            present\n     -- bits calculated using MSG_SIG_ALG\n   extraCerts\
    \            optionally present\n     -- MAY contain any additional certificates\
    \ that requester wishes\n     -- to include\n   ccp:\n   Field               \
    \  Value\n   sender                Responding CA name\n     -- the name of the\
    \ CA who produced the message\n   recipient             Requesting CA name\n \
    \    -- the name of the CA who asked for production of a certificate\n   messageTime\
    \           time of production of message\n     -- current time at responding\
    \ CA\n   protectionAlg         MSG_SIG_ALG\n     -- only signature protection\
    \ is allowed for this message\n   senderKID             present if required\n\
    \     -- must be present if required for verification of message\n     -- protection\n\
    \   recipKID              present if required\n   transactionID         present\n\
    \     -- value from corresponding ccr message\n   senderNonce           present\n\
    \     -- 128 (pseudo-)random bits\n   recipNonce            present\n   -- senderNonce\
    \ from corresponding ccr message\n   freeText              any valid value\n \
    \  body                  ccp (CertRepMessage)\n                         only one\
    \ CertResponse allowed\n     -- if multiple cross certificates are required they\
    \ MUST be\n     -- packaged in separate PKIMessages\n   response             \
    \ present\n   status                present\n   PKIStatusInfo.status  present\n\
    \     -- if PKIStatusInfo.status is one of:\n     --   accepted, or\n     -- \
    \  grantedWithMods,\n     -- then certifiedKeyPair MUST be present and failInfo\
    \ MUST\n     -- be absent\n   failInfo              present depending on\n   \
    \                      PKIStatusInfo.status\n     -- if PKIStatusInfo.status is:\n\
    \     --   rejection\n     -- then certifiedKeyPair MUST be absent and failInfo\
    \ MUST be\n     -- present and contain appropriate bit settings\n   certifiedKeyPair\
    \      present depending on\n                         PKIStatusInfo.status\n \
    \  certificate           present depending on\n                         certifiedKeyPair\n\
    \     -- content of actual certificate must be examined by requesting CA\n   \
    \  -- before publication\n   protection            present\n     -- bits calculated\
    \ using MSG_SIG_ALG\n   extraCerts            optionally present\n     -- MAY\
    \ contain any additional certificates that responder wishes\n     -- to include\n"
- title: E.7.  In-Band Initialization Using External Identity Certificate
  contents:
  - "E.7.  In-Band Initialization Using External Identity Certificate\n   An (uninitialized)\
    \ end entity wishes to initialize into the PKI with\n   a CA, CA-1.  It uses,\
    \ for authentication purposes, a pre-existing\n   identity certificate issued\
    \ by another (external) CA, CA-X.  A trust\n   relationship must already have\
    \ been established between CA-1 and CA-X\n   so that CA-1 can validate the EE\
    \ identity certificate signed by CA-X.\n   Furthermore, some mechanism must already\
    \ have been established within\n   the Personal Security Environment (PSE) of\
    \ the EE that would allow it\n   to authenticate and verify PKIMessages signed\
    \ by CA-1 (as one\n   example, the PSE may contain a certificate issued for the\
    \ public key\n   of CA-1, signed by another CA that the EE trusts on the basis\
    \ of\n   out-of-band authentication techniques).\n   The EE sends an initialization\
    \ request to start the transaction.\n   When CA-1 responds with a message containing\
    \ the new certificate, the\n   end entity replies with a certificate confirmation.\
    \  CA-1 replies\n   with a PKIConfirm to close the transaction.  All messages\
    \ are signed\n   (the EE messages are signed using the private key that corresponds\
    \ to\n   the public key in its external identity certificate; the CA-1\n   messages\
    \ are signed using the private key that corresponds to the\n   public key in a\n\
    \   certificate that can be chained to a trust anchor in the EE's PSE).\n   The\
    \ profile for this exchange is identical to that given in Appendix\n   D.4, with\
    \ the following exceptions:\n   o  the EE and CA-1 do not share a symmetric MACing\
    \ key (i.e., there\n      is no out-of-band shared secret information between\
    \ these\n      entities);\n   o  sender name in ir MUST be present (and identical\
    \ to the subject\n      name present in the external identity certificate);\n\
    \   o  protectionAlg of MSG_SIG_ALG MUST be used in all messages;\n   o  external\
    \ identity cert.  MUST be carried in ir extraCerts field\n   o  senderKID and\
    \ recipKID are not used;\n   o  body is ir or ip;\n   o  protection bits are calculated\
    \ according to the protectionAlg\n      field.\n"
- title: Appendix F.  Compilable ASN.1 Definitions
  contents:
  - "Appendix F.  Compilable ASN.1 Definitions\n     PKIXCMP {iso(1) identified-organization(3)\n\
    \           dod(6) internet(1) security(5) mechanisms(5) pkix(7)\n           id-mod(0)\
    \ id-mod-cmp2000(16)}\n     DEFINITIONS EXPLICIT TAGS ::=\n     BEGIN\n     --\
    \ EXPORTS ALL --\n     IMPORTS\n         Certificate, CertificateList, Extensions,\
    \ AlgorithmIdentifier,\n         UTF8String -- if required; otherwise, comment\
    \ out\n                FROM PKIX1Explicit88 {iso(1) identified-organization(3)\n\
    \                dod(6) internet(1) security(5) mechanisms(5) pkix(7)\n      \
    \          id-mod(0) id-pkix1-explicit-88(1)}\n         GeneralName, KeyIdentifier\n\
    \                FROM PKIX1Implicit88 {iso(1) identified-organization(3)\n   \
    \             dod(6) internet(1) security(5) mechanisms(5) pkix(7)\n         \
    \       id-mod(0) id-pkix1-implicit-88(2)}\n         CertTemplate, PKIPublicationInfo,\
    \ EncryptedValue, CertId,\n         CertReqMessages\n                FROM PKIXCRMF-2005\
    \ {iso(1) identified-organization(3)\n                dod(6) internet(1) security(5)\
    \ mechanisms(5) pkix(7)\n                id-mod(0) id-mod-crmf2005(36)}\n    \
    \     -- see also the behavioral clarifications to CRMF codified in\n        \
    \ -- Appendix C of this specification\n         CertificationRequest\n       \
    \         FROM PKCS-10 {iso(1) member-body(2)\n                              us(840)\
    \ rsadsi(113549)\n                              pkcs(1) pkcs-10(10) modules(1)\
    \ pkcs-10(1)}\n         -- (specified in RFC 2986 with 1993 ASN.1 syntax and IMPLICIT\n\
    \         -- tags).  Alternatively, implementers may directly include\n      \
    \   -- the [PKCS10] syntax in this module\n         ;\n   -- the rest of the module\
    \ contains locally-defined OIDs and\n   -- constructs\n      CMPCertificate ::=\
    \ CHOICE {\n         x509v3PKCert        Certificate\n      }\n   -- This syntax,\
    \ while bits-on-the-wire compatible with the\n   -- standard X.509 definition\
    \ of \"Certificate\", allows the\n   -- possibility of future certificate types\
    \ (such as X.509\n   -- attribute certificates, WAP WTLS certificates, or other\
    \ kinds\n   -- of certificates) within this certificate management protocol,\n\
    \   -- should a need ever arise to support such generality.  Those\n   -- implementations\
    \ that do not foresee a need to ever support\n   -- other certificate types MAY,\
    \ if they wish, comment out the\n   -- above structure and \"un-comment\" the\
    \ following one prior to\n   -- compiling this ASN.1 module.  (Note that interoperability\n\
    \   -- with implementations that don't do this will be unaffected by\n   -- this\
    \ change.)\n   -- CMPCertificate ::= Certificate\n      PKIMessage ::= SEQUENCE\
    \ {\n         header           PKIHeader,\n         body             PKIBody,\n\
    \         protection   [0] PKIProtection OPTIONAL,\n         extraCerts   [1]\
    \ SEQUENCE SIZE (1..MAX) OF CMPCertificate\n                          OPTIONAL\n\
    \     }\n     PKIMessages ::= SEQUENCE SIZE (1..MAX) OF PKIMessage\n     PKIHeader\
    \ ::= SEQUENCE {\n         pvno                INTEGER     { cmp1999(1), cmp2000(2)\
    \ },\n         sender              GeneralName,\n         -- identifies the sender\n\
    \         recipient           GeneralName,\n         -- identifies the intended\
    \ recipient\n         messageTime     [0] GeneralizedTime         OPTIONAL,\n\
    \         -- time of production of this message (used when sender\n         --\
    \ believes that the transport will be \"suitable\"; i.e.,\n         -- that the\
    \ time will still be meaningful upon receipt)\n         protectionAlg   [1] AlgorithmIdentifier\
    \     OPTIONAL,\n         -- algorithm used for calculation of protection bits\n\
    \         senderKID       [2] KeyIdentifier           OPTIONAL,\n         recipKID\
    \        [3] KeyIdentifier           OPTIONAL,\n         -- to identify specific\
    \ keys used for protection\n         transactionID   [4] OCTET STRING        \
    \    OPTIONAL,\n         -- identifies the transaction; i.e., this will be the\
    \ same in\n         -- corresponding request, response, certConf, and PKIConf\n\
    \         -- messages\n         senderNonce     [5] OCTET STRING            OPTIONAL,\n\
    \         recipNonce      [6] OCTET STRING            OPTIONAL,\n         -- nonces\
    \ used to provide replay protection, senderNonce\n         -- is inserted by the\
    \ creator of this message; recipNonce\n         -- is a nonce previously inserted\
    \ in a related message by\n         -- the intended recipient of this message\n\
    \         freeText        [7] PKIFreeText             OPTIONAL,\n         -- this\
    \ may be used to indicate context-specific instructions\n         -- (this field\
    \ is intended for human consumption)\n         generalInfo     [8] SEQUENCE SIZE\
    \ (1..MAX) OF\n                                InfoTypeAndValue     OPTIONAL\n\
    \         -- this may be used to convey context-specific information\n       \
    \  -- (this field not primarily intended for human consumption)\n     }\n    \
    \ PKIFreeText ::= SEQUENCE SIZE (1..MAX) OF UTF8String\n         -- text encoded\
    \ as UTF-8 String [RFC3629] (note: each\n         -- UTF8String MAY include an\
    \ [RFC3066] language tag\n         -- to indicate the language of the contained\
    \ text\n         -- see [RFC2482] for details)\n     PKIBody ::= CHOICE {    \
    \   -- message-specific body elements\n         ir       [0]  CertReqMessages,\
    \        --Initialization Request\n         ip       [1]  CertRepMessage,    \
    \     --Initialization Response\n         cr       [2]  CertReqMessages,     \
    \   --Certification Request\n         cp       [3]  CertRepMessage,         --Certification\
    \ Response\n         p10cr    [4]  CertificationRequest,   --imported from [PKCS10]\n\
    \         popdecc  [5]  POPODecKeyChallContent, --pop Challenge\n         popdecr\
    \  [6]  POPODecKeyRespContent,  --pop Response\n         kur      [7]  CertReqMessages,\
    \        --Key Update Request\n         kup      [8]  CertRepMessage,        \
    \ --Key Update Response\n         krr      [9]  CertReqMessages,        --Key\
    \ Recovery Request\n         krp      [10] KeyRecRepContent,       --Key Recovery\
    \ Response\n         rr       [11] RevReqContent,          --Revocation Request\n\
    \         rp       [12] RevRepContent,          --Revocation Response\n      \
    \   ccr      [13] CertReqMessages,        --Cross-Cert. Request\n         ccp\
    \      [14] CertRepMessage,         --Cross-Cert. Response\n         ckuann  \
    \ [15] CAKeyUpdAnnContent,     --CA Key Update Ann.\n         cann     [16] CertAnnContent,\
    \         --Certificate Ann.\n         rann     [17] RevAnnContent,          --Revocation\
    \ Ann.\n         crlann   [18] CRLAnnContent,          --CRL Announcement\n  \
    \       pkiconf  [19] PKIConfirmContent,      --Confirmation\n         nested\
    \   [20] NestedMessageContent,   --Nested Message\n         genm     [21] GenMsgContent,\
    \          --General Message\n         genp     [22] GenRepContent,          --General\
    \ Response\n         error    [23] ErrorMsgContent,        --Error Message\n \
    \        certConf [24] CertConfirmContent,     --Certificate confirm\n       \
    \  pollReq  [25] PollReqContent,         --Polling request\n         pollRep \
    \ [26] PollRepContent          --Polling response\n     }\n     PKIProtection\
    \ ::= BIT STRING\n     ProtectedPart ::= SEQUENCE {\n         header    PKIHeader,\n\
    \         body      PKIBody\n     }\n     id-PasswordBasedMac OBJECT IDENTIFIER\
    \ ::= {1 2 840 113533 7 66 13}\n     PBMParameter ::= SEQUENCE {\n         salt\
    \                OCTET STRING,\n         -- note:  implementations MAY wish to\
    \ limit acceptable sizes\n         -- of this string to values appropriate for\
    \ their environment\n         -- in order to reduce the risk of denial-of-service\
    \ attacks\n         owf                 AlgorithmIdentifier,\n         -- AlgId\
    \ for a One-Way Function (SHA-1 recommended)\n         iterationCount      INTEGER,\n\
    \         -- number of times the OWF is applied\n         -- note:  implementations\
    \ MAY wish to limit acceptable sizes\n         -- of this integer to values appropriate\
    \ for their environment\n         -- in order to reduce the risk of denial-of-service\
    \ attacks\n         mac                 AlgorithmIdentifier\n         -- the MAC\
    \ AlgId (e.g., DES-MAC, Triple-DES-MAC [PKCS11],\n     }   -- or HMAC [RFC2104,\
    \ RFC2202])\n     id-DHBasedMac OBJECT IDENTIFIER ::= {1 2 840 113533 7 66 30}\n\
    \     DHBMParameter ::= SEQUENCE {\n         owf                 AlgorithmIdentifier,\n\
    \         -- AlgId for a One-Way Function (SHA-1 recommended)\n         mac  \
    \               AlgorithmIdentifier\n         -- the MAC AlgId (e.g., DES-MAC,\
    \ Triple-DES-MAC [PKCS11],\n     }   -- or HMAC [RFC2104, RFC2202])\n     NestedMessageContent\
    \ ::= PKIMessages\n     PKIStatus ::= INTEGER {\n         accepted           \
    \     (0),\n         -- you got exactly what you asked for\n         grantedWithMods\
    \        (1),\n         -- you got something like what you asked for; the\n  \
    \       -- requester is responsible for ascertaining the differences\n       \
    \  rejection              (2),\n         -- you don't get it, more information\
    \ elsewhere in the message\n         waiting                (3),\n         --\
    \ the request body part has not yet been processed; expect to\n         -- hear\
    \ more later (note: proper handling of this status\n         -- response MAY use\
    \ the polling req/rep PKIMessages specified\n         -- in Section 5.3.22; alternatively,\
    \ polling in the underlying\n         -- transport layer MAY have some utility\
    \ in this regard)\n         revocationWarning      (4),\n         -- this message\
    \ contains a warning that a revocation is\n         -- imminent\n         revocationNotification\
    \ (5),\n         -- notification that a revocation has occurred\n         keyUpdateWarning\
    \       (6)\n         -- update already done for the oldCertId specified in\n\
    \         -- CertReqMsg\n     }\n     PKIFailureInfo ::= BIT STRING {\n     --\
    \ since we can fail in more than one way!\n     -- More codes may be added in\
    \ the future if/when required.\n         badAlg              (0),\n         --\
    \ unrecognized or unsupported Algorithm Identifier\n         badMessageCheck \
    \    (1),\n         -- integrity check failed (e.g., signature did not verify)\n\
    \         badRequest          (2),\n         -- transaction not permitted or supported\n\
    \         badTime             (3),\n         -- messageTime was not sufficiently\
    \ close to the system time,\n         -- as defined by local policy\n        \
    \ badCertId           (4),\n         -- no certificate could be found matching\
    \ the provided criteria\n         badDataFormat       (5),\n         -- the data\
    \ submitted has the wrong format\n         wrongAuthority      (6),\n        \
    \ -- the authority indicated in the request is different from the\n         --\
    \ one creating the response token\n         incorrectData       (7),\n       \
    \  -- the requester's data is incorrect (for notary services)\n         missingTimeStamp\
    \    (8),\n         -- when the timestamp is missing but should be there\n   \
    \      -- (by policy)\n         badPOP              (9),\n         -- the proof-of-possession\
    \ failed\n         certRevoked         (10),\n            -- the certificate has\
    \ already been revoked\n         certConfirmed       (11),\n            -- the\
    \ certificate has already been confirmed\n         wrongIntegrity      (12),\n\
    \            -- invalid integrity, password based instead of signature or\n  \
    \          -- vice versa\n         badRecipientNonce   (13),\n            -- invalid\
    \ recipient nonce, either missing or wrong value\n         timeNotAvailable  \
    \  (14),\n            -- the TSA's time source is not available\n         unacceptedPolicy\
    \    (15),\n            -- the requested TSA policy is not supported by the TSA.\n\
    \         unacceptedExtension (16),\n            -- the requested extension is\
    \ not supported by the TSA.\n         addInfoNotAvailable (17),\n            --\
    \ the additional information requested could not be\n            -- understood\
    \ or is not available\n         badSenderNonce      (18),\n            -- invalid\
    \ sender nonce, either missing or wrong size\n         badCertTemplate     (19),\n\
    \            -- invalid cert. template or missing mandatory information\n    \
    \     signerNotTrusted    (20),\n            -- signer of the message unknown\
    \ or not trusted\n         transactionIdInUse  (21),\n            -- the transaction\
    \ identifier is already in use\n         unsupportedVersion  (22),\n         \
    \   -- the version of the message is not supported\n         notAuthorized   \
    \    (23),\n            -- the sender was not authorized to make the preceding\n\
    \            -- request or perform the preceding action\n         systemUnavail\
    \       (24),\n         -- the request cannot be handled due to system unavailability\n\
    \         systemFailure       (25),\n         -- the request cannot be handled\
    \ due to system failure\n         duplicateCertReq    (26)\n         -- certificate\
    \ cannot be issued because a duplicate\n         -- certificate already exists\n\
    \     }\n     PKIStatusInfo ::= SEQUENCE {\n         status        PKIStatus,\n\
    \         statusString  PKIFreeText     OPTIONAL,\n         failInfo      PKIFailureInfo\
    \  OPTIONAL\n     }\n     OOBCert ::= CMPCertificate\n     OOBCertHash ::= SEQUENCE\
    \ {\n         hashAlg     [0] AlgorithmIdentifier     OPTIONAL,\n         certId\
    \      [1] CertId                  OPTIONAL,\n         hashVal         BIT STRING\n\
    \         -- hashVal is calculated over the DER encoding of the\n         -- self-signed\
    \ certificate with the identifier certID.\n     }\n     POPODecKeyChallContent\
    \ ::= SEQUENCE OF Challenge\n     -- One Challenge per encryption key certification\
    \ request (in the\n     -- same order as these requests appear in CertReqMessages).\n\
    \     Challenge ::= SEQUENCE {\n         owf                 AlgorithmIdentifier\
    \  OPTIONAL,\n         -- MUST be present in the first Challenge; MAY be omitted\
    \ in\n         -- any subsequent Challenge in POPODecKeyChallContent (if\n   \
    \      -- omitted, then the owf used in the immediately preceding\n         --\
    \ Challenge is to be used).\n         witness             OCTET STRING,\n    \
    \     -- the result of applying the one-way function (owf) to a\n         -- randomly-generated\
    \ INTEGER, A.  [Note that a different\n         -- INTEGER MUST be used for each\
    \ Challenge.]\n         challenge           OCTET STRING\n         -- the encryption\
    \ (under the public key for which the cert.\n         -- request is being made)\
    \ of Rand, where Rand is specified as\n         --   Rand ::= SEQUENCE {\n   \
    \      --      int      INTEGER,\n         --       - the randomly-generated INTEGER\
    \ A (above)\n         --      sender   GeneralName\n         --       - the sender's\
    \ name (as included in PKIHeader)\n         --   }\n     }\n     POPODecKeyRespContent\
    \ ::= SEQUENCE OF INTEGER\n     -- One INTEGER per encryption key certification\
    \ request (in the\n     -- same order as these requests appear in CertReqMessages).\
    \  The\n     -- retrieved INTEGER A (above) is returned to the sender of the\n\
    \     -- corresponding Challenge.\n     CertRepMessage ::= SEQUENCE {\n      \
    \   caPubs       [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate\n              \
    \            OPTIONAL,\n         response         SEQUENCE OF CertResponse\n \
    \    }\n     CertResponse ::= SEQUENCE {\n         certReqId           INTEGER,\n\
    \         -- to match this response with corresponding request (a value\n    \
    \     -- of -1 is to be used if certReqId is not specified in the\n         --\
    \ corresponding request)\n         status              PKIStatusInfo,\n      \
    \   certifiedKeyPair    CertifiedKeyPair    OPTIONAL,\n         rspInfo      \
    \       OCTET STRING        OPTIONAL\n         -- analogous to the id-regInfo-utf8Pairs\
    \ string defined\n         -- for regInfo in CertReqMsg [CRMF]\n     }\n     CertifiedKeyPair\
    \ ::= SEQUENCE {\n         certOrEncCert       CertOrEncCert,\n         privateKey\
    \      [0] EncryptedValue      OPTIONAL,\n         -- see [CRMF] for comment on\
    \ encoding\n         publicationInfo [1] PKIPublicationInfo  OPTIONAL\n     }\n\
    \     CertOrEncCert ::= CHOICE {\n         certificate     [0] CMPCertificate,\n\
    \         encryptedCert   [1] EncryptedValue\n     }\n     KeyRecRepContent ::=\
    \ SEQUENCE {\n         status                  PKIStatusInfo,\n         newSigCert\
    \          [0] CMPCertificate OPTIONAL,\n         caCerts             [1] SEQUENCE\
    \ SIZE (1..MAX) OF\n                                             CMPCertificate\
    \ OPTIONAL,\n         keyPairHist         [2] SEQUENCE SIZE (1..MAX) OF\n    \
    \                                         CertifiedKeyPair OPTIONAL\n     }\n\
    \     RevReqContent ::= SEQUENCE OF RevDetails\n     RevDetails ::= SEQUENCE {\n\
    \         certDetails         CertTemplate,\n         -- allows requester to specify\
    \ as much as they can about\n         -- the cert. for which revocation is requested\n\
    \         -- (e.g., for cases in which serialNumber is not available)\n      \
    \   crlEntryDetails     Extensions       OPTIONAL\n         -- requested crlEntryExtensions\n\
    \     }\n     RevRepContent ::= SEQUENCE {\n         status       SEQUENCE SIZE\
    \ (1..MAX) OF PKIStatusInfo,\n         -- in same order as was sent in RevReqContent\n\
    \         revCerts [0] SEQUENCE SIZE (1..MAX) OF CertId\n                    \
    \                         OPTIONAL,\n         -- IDs for which revocation was\
    \ requested\n         -- (same order as status)\n         crls     [1] SEQUENCE\
    \ SIZE (1..MAX) OF CertificateList\n                                         \
    \    OPTIONAL\n         -- the resulting CRLs (there may be more than one)\n \
    \    }\n     CAKeyUpdAnnContent ::= SEQUENCE {\n         oldWithNew   CMPCertificate,\
    \ -- old pub signed with new priv\n         newWithOld   CMPCertificate, -- new\
    \ pub signed with old priv\n         newWithNew   CMPCertificate  -- new pub signed\
    \ with new priv\n     }\n     CertAnnContent ::= CMPCertificate\n     RevAnnContent\
    \ ::= SEQUENCE {\n         status              PKIStatus,\n         certId   \
    \           CertId,\n         willBeRevokedAt     GeneralizedTime,\n         badSinceDate\
    \        GeneralizedTime,\n         crlDetails          Extensions  OPTIONAL\n\
    \         -- extra CRL details (e.g., crl number, reason, location, etc.)\n  \
    \   }\n     CRLAnnContent ::= SEQUENCE OF CertificateList\n     CertConfirmContent\
    \ ::= SEQUENCE OF CertStatus\n     CertStatus ::= SEQUENCE {\n        certHash\
    \    OCTET STRING,\n        -- the hash of the certificate, using the same hash\
    \ algorithm\n        -- as is used to create and verify the certificate signature\n\
    \        certReqId   INTEGER,\n        -- to match this confirmation with the\
    \ corresponding req/rep\n        statusInfo  PKIStatusInfo OPTIONAL\n     }\n\
    \     PKIConfirmContent ::= NULL\n     InfoTypeAndValue ::= SEQUENCE {\n     \
    \    infoType               OBJECT IDENTIFIER,\n         infoValue           \
    \   ANY DEFINED BY infoType  OPTIONAL\n     }\n     -- Example InfoTypeAndValue\
    \ contents include, but are not limited\n     -- to, the following (un-comment\
    \ in this ASN.1 module and use as\n     -- appropriate for a given environment):\n\
    \     --\n     --   id-it-caProtEncCert    OBJECT IDENTIFIER ::= {id-it 1}\n \
    \    --      CAProtEncCertValue      ::= CMPCertificate\n     --   id-it-signKeyPairTypes\
    \ OBJECT IDENTIFIER ::= {id-it 2}\n     --      SignKeyPairTypesValue   ::= SEQUENCE\
    \ OF AlgorithmIdentifier\n     --   id-it-encKeyPairTypes  OBJECT IDENTIFIER ::=\
    \ {id-it 3}\n     --      EncKeyPairTypesValue    ::= SEQUENCE OF AlgorithmIdentifier\n\
    \     --   id-it-preferredSymmAlg OBJECT IDENTIFIER ::= {id-it 4}\n     --   \
    \   PreferredSymmAlgValue   ::= AlgorithmIdentifier\n     --   id-it-caKeyUpdateInfo\
    \  OBJECT IDENTIFIER ::= {id-it 5}\n     --      CAKeyUpdateInfoValue    ::= CAKeyUpdAnnContent\n\
    \     --   id-it-currentCRL       OBJECT IDENTIFIER ::= {id-it 6}\n     --   \
    \   CurrentCRLValue         ::= CertificateList\n     --   id-it-unsupportedOIDs\
    \  OBJECT IDENTIFIER ::= {id-it 7}\n     --      UnsupportedOIDsValue    ::= SEQUENCE\
    \ OF OBJECT IDENTIFIER\n     --   id-it-keyPairParamReq  OBJECT IDENTIFIER ::=\
    \ {id-it 10}\n     --      KeyPairParamReqValue    ::= OBJECT IDENTIFIER\n   \
    \  --   id-it-keyPairParamRep  OBJECT IDENTIFIER ::= {id-it 11}\n     --     \
    \ KeyPairParamRepValue    ::= AlgorithmIdentifer\n     --   id-it-revPassphrase\
    \    OBJECT IDENTIFIER ::= {id-it 12}\n     --      RevPassphraseValue      ::=\
    \ EncryptedValue\n     --   id-it-implicitConfirm  OBJECT IDENTIFIER ::= {id-it\
    \ 13}\n     --      ImplicitConfirmValue    ::= NULL\n     --   id-it-confirmWaitTime\
    \  OBJECT IDENTIFIER ::= {id-it 14}\n     --      ConfirmWaitTimeValue    ::=\
    \ GeneralizedTime\n     --   id-it-origPKIMessage   OBJECT IDENTIFIER ::= {id-it\
    \ 15}\n     --      OrigPKIMessageValue     ::= PKIMessages\n     --   id-it-suppLangTags\
    \     OBJECT IDENTIFIER ::= {id-it 16}\n     --      SuppLangTagsValue       ::=\
    \ SEQUENCE OF UTF8String\n     --\n     -- where\n     --\n     --   id-pkix OBJECT\
    \ IDENTIFIER ::= {\n     --      iso(1) identified-organization(3)\n     --  \
    \    dod(6) internet(1) security(5) mechanisms(5) pkix(7)}\n     -- and\n    \
    \ --   id-it   OBJECT IDENTIFIER ::= {id-pkix 4}\n     --\n     --\n     -- This\
    \ construct MAY also be used to define new PKIX Certificate\n     -- Management\
    \ Protocol request and response messages, or general-\n     -- purpose (e.g.,\
    \ announcement) messages for future needs or for\n     -- specific environments.\n\
    \     GenMsgContent ::= SEQUENCE OF InfoTypeAndValue\n     -- May be sent by EE,\
    \ RA, or CA (depending on message content).\n     -- The OPTIONAL infoValue parameter\
    \ of InfoTypeAndValue will\n     -- typically be omitted for some of the examples\
    \ given above.\n     -- The receiver is free to ignore any contained OBJ. IDs\
    \ that it\n     -- does not recognize. If sent from EE to CA, the empty set\n\
    \     -- indicates that the CA may send\n     -- any/all information that it wishes.\n\
    \     GenRepContent ::= SEQUENCE OF InfoTypeAndValue\n     -- Receiver MAY ignore\
    \ any contained OIDs that it does not\n     -- recognize.\n     ErrorMsgContent\
    \ ::= SEQUENCE {\n         pKIStatusInfo          PKIStatusInfo,\n         errorCode\
    \              INTEGER           OPTIONAL,\n         -- implementation-specific\
    \ error codes\n         errorDetails           PKIFreeText       OPTIONAL\n  \
    \       -- implementation-specific error details\n     }\n     PollReqContent\
    \ ::= SEQUENCE OF SEQUENCE {\n         certReqId              INTEGER\n     }\n\
    \     PollRepContent ::= SEQUENCE OF SEQUENCE {\n         certReqId          \
    \    INTEGER,\n         checkAfter             INTEGER,  -- time in seconds\n\
    \         reason                 PKIFreeText OPTIONAL\n     }\n     END -- of\
    \ CMP module\n"
- title: Appendix G.  Acknowledgements
  contents:
  - "Appendix G.  Acknowledgements\n   The authors gratefully acknowledge the contributions\
    \ of various\n   members of the IETF PKIX Working Group and the ICSA CA-talk mailing\n\
    \   list (a list solely devoted to discussing CMP interoperability\n   efforts).\
    \  Many of these contributions significantly clarified and\n   improved the utility\
    \ of this specification.  Tomi Kause thanks Vesa\n   Suontama and Toni Tammisalo\
    \ for review and comments.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Carlisle Adams\n   University of Ottawa\n   800 King Edward\
    \ Avenue\n   P.O.Box 450, Station A\n   Ottawa, Ontario  K1N 6N5\n   CA\n   Phone:\
    \ (613) 562-5800 ext. 2345\n   Fax:   (613) 562-5664\n   EMail: cadams@site.uottawa.ca\n\
    \   Stephen Farrell\n   Trinity College Dublin\n   Distributed Systems Group\n\
    \   Computer Science Department\n   Dublin\n   IE\n   Phone: +353-1-608-2945\n\
    \   EMail: stephen.farrell@cs.tcd.ie\n   Tomi Kause\n   SSH Communications Security\
    \ Corp\n   Valimotie 17\n   Helsinki  00380\n   FI\n   Phone: +358 20 500 7415\n\
    \   EMail: toka@ssh.com\n   Tero Mononen\n   SafeNet, Inc.\n   Fredrikinkatu 47\n\
    \   Helsinki  00100\n   FI\n   Phone: +358 20 500 7814\n   EMail: tmononen@safenet-inc.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
