- contents:
  - "        The Advanced Encryption Standard (AES) Cipher Algorithm\n                 in
    the SNMP User-based Security Model\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes a symmetric encryption protocol that\n   supplements
    the protocols described in the User-based Security Model\n   (USM), which is a
    Security Subsystem for version 3 of the Simple\n   Network Management Protocol
    for use in the SNMP Architecture.  The\n   symmetric encryption protocol described
    in this document is based on\n   the Advanced Encryption Standard (AES) cipher
    algorithm used in\n   Cipher FeedBack Mode (CFB), with a key size of 128 bits.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . .    2\n       1.1.  Goals and Constraints. . . . . . . . . . . . . .
    . . .    2\n       1.2.  Key Localization . . . . . . . . . . . . . . . . . .
    .    3\n       1.3.  Password Entropy and Storage . . . . . . . . . . . . .    3\n
    \  2.  Definitions. . . . . . . . . . . . . . . . . . . . . . . . .    4\n   3.
    \ CFB128-AES-128 Symmetric Encryption Protocol . . . . . . . .    5\n       3.1.
    \ Mechanisms . . . . . . . . . . . . . . . . . . . . . .    5\n             3.1.1.
    The AES-based Symmetric Encryption Protocol . .    6\n             3.1.2. Localized
    Key, AES Encryption Key and\n                    Initialization Vector . . . .
    . . . . . . . . .    7\n             3.1.3. Data Encryption . . . . . . . . .
    . . . . . . .    8\n             3.1.4. Data Decryption . . . . . . . . . . .
    . . . . .    8\n       3.2.  Elements of the AES Privacy Protocol . . . . . .
    . . .    9\n             3.2.1. Users . . . . . . . . . . . . . . . . . . . .
    .    9\n             3.2.2. msgAuthoritativeEngineID. . . . . . . . . . . .    9\n
    \            3.2.3. SNMP Messages Using this Privacy Protocol . . .   10\n             3.2.4.
    Services provided by the AES Privacy Modules. .   10\n       3.3.  Elements of
    Procedure. . . . . . . . . . . . . . . . .   11\n             3.3.1. Processing
    an Outgoing Message. . . . . . . . .   12\n             3.3.2. Processing an Incoming
    Message. . . . . . . . .   12\n   4.  Security Considerations. . . . . . . . .
    . . . . . . . . . .   13\n   5.  IANA Considerations. . . . . . . . . . . . .
    . . . . . . . .   13\n   6.  Acknowledgements . . . . . . . . . . . . . . . .
    . . . . . .   14\n   7.  References . . . . . . . . . . . . . . . . . . . . .
    . . . .   14\n       7.1.  Normative References . . . . . . . . . . . . . . .
    . .   14\n       7.2.  Informative References . . . . . . . . . . . . . . . .
    \  14\n   8.  Authors' Addresses . . . . . . . . . . . . . . . . . . . . .   15\n
    \  9.  Full Copyright Statement . . . . . . . . . . . . . . . . . .   16\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Within the Architecture for describing Internet Management
    Frameworks\n   [RFC3411], the User-based Security Model (USM) [RFC3414] for SNMPv3\n
    \  is defined as a Security Subsystem within an SNMP engine.  RFC 3414\n   describes
    the use of HMAC-MD5-96 and HMAC-SHA-96 as the initial\n   authentication protocols,
    and the use of CBC-DES as the initial\n   privacy protocol.  The User-based Security
    Model, however, allows for\n   other such protocols to be used instead of, or
    concurrently with,\n   these protocols.\n   This memo describes the use of CFB128-AES-128
    as an alternative\n   privacy protocol for the User-based Security Model.  The
    key words\n   \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",
    \"SHOULD\",\n   \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in
    this document\n   are to be interpreted as described in [RFC2119].\n"
  - contents:
    - "1.1.  Goals and Constraints\n   The main goal of this memo is to provide a
      new privacy protocol for\n   the USM based on the Advanced Encryption Standard
      (AES) [FIPS-AES].\n   The major constraint is to maintain a complete interchangeability
      of\n   the new protocol defined in this memo with existing authentication\n
      \  and privacy protocols already defined in USM.\n   For a given user, the AES-based
      privacy protocol MUST be used with\n   one of the authentication protocols defined
      in RFC 3414 or an\n   algorithm/protocol providing equivalent functionality.\n"
    title: 1.1.  Goals and Constraints
  - contents:
    - "1.2.  Key Localization\n   As defined in [RFC3414], a localized key is a secret
      key shared\n   between a user U and one authoritative SNMP engine E.  Even though
      a\n   user may have only one pair of authentication and privacy passwords\n
      \  (and consequently only one pair of keys) for the entire network, the\n   actual
      secrets shared between the user and each authoritative SNMP\n   engine will
      be different.  This is achieved by key localization.\n   If the authentication
      protocol defined for a user U at the\n   authoritative SNMP engine E is one
      of the authentication protocols\n   defined in [RFC3414], the key localization
      is performed according to\n   the two-step process described in section 2.6
      of [RFC3414].\n"
    title: 1.2.  Key Localization
  - contents:
    - "1.3.  Password Entropy and Storage\n   The security of various cryptographic
      functions lies both in the\n   strength of the functions themselves against
      various forms of attack,\n   and also, perhaps more importantly, in the keying
      material that is\n   used with them.  While theoretical attacks against cryptographic\n
      \  functions are possible, it is more probable that key guessing is the\n   main
      threat.\n   The following are recommended in regard to user passwords:\n   -
      \ Password length SHOULD be at least 12 octets.\n   -  Password sharing SHOULD
      be prohibited so that passwords are not\n      shared among multiple SNMP users.\n
      \  -  Implementations SHOULD support the use of randomly generated\n      passwords
      as a stronger form of security.\n   It is worth remembering that, as specified
      in [RFC3414], if a user's\n   password or a non-localized key is disclosed,
      then key localization\n   will not help and network security may be compromised.
      \ Therefore, a\n   user's password or non-localized key MUST NOT be stored on
      a managed\n   device/node.  Instead, the localized key SHALL be stored (if at
      all)\n   so that, in case a device does get compromised, no other managed or\n
      \  managing devices get compromised.\n"
    title: 1.3.  Password Entropy and Storage
  title: 1.  Introduction
- contents:
  - "2.  Definitions\n   This MIB is written in SMIv2 [RFC2578].\n"
  - "SNMP-USM-AES-MIB DEFINITIONS ::= BEGIN\n    IMPORTS\n        MODULE-IDENTITY,
    OBJECT-IDENTITY,\n        snmpModules             FROM SNMPv2-SMI          --
    [RFC2578]\n        snmpPrivProtocols       FROM SNMP-FRAMEWORK-MIB; -- [RFC3411]\n"
  - "snmpUsmAesMIB  MODULE-IDENTITY\n    LAST-UPDATED \"200406140000Z\"\n    ORGANIZATION
    \"IETF\"\n    CONTACT-INFO \"Uri Blumenthal\n                  Lucent Technologies
    / Bell Labs\n                  67 Whippany Rd.\n                  14D-318\n                  Whippany,
    NJ  07981, USA\n                  973-386-2163\n                  uri@bell-labs.com\n
    \                 Fabio Maino\n                  Andiamo Systems, Inc.\n                  375
    East Tasman Drive\n                  San Jose, CA  95134, USA\n                  408-853-7530\n
    \                 fmaino@andiamo.com\n                  Keith McCloghrie\n                  Cisco
    Systems, Inc.\n                  170 West Tasman Drive\n                  San
    Jose, CA  95134-1706, USA\n                  408-526-5260\n                  kzm@cisco.com\"\n
    \   DESCRIPTION  \"Definitions of Object Identities needed for\n                  the
    use of AES by SNMP's User-based Security\n                  Model.\n                  Copyright
    (C) The Internet Society (2004).\n            This version of this MIB module
    is part of RFC 3826;\n            see the RFC itself for full legal notices.\n
    \           Supplementary information may be available on\n            http://www.ietf.org/copyrights/ianamib.html.\"\n
    \   REVISION     \"200406140000Z\"\n    DESCRIPTION  \"Initial version, published
    as RFC3826\"\n    ::= { snmpModules 20 }\n"
  - "usmAesCfb128Protocol OBJECT-IDENTITY\n    STATUS        current\n    DESCRIPTION
    \ \"The CFB128-AES-128 Privacy Protocol.\"\n    REFERENCE    \"- Specification
    for the ADVANCED ENCRYPTION\n                    STANDARD. Federal Information
    Processing\n                    Standard (FIPS) Publication 197.\n                    (November
    2001).\n                  - Dworkin, M., NIST Recommendation for Block\n                    Cipher
    Modes of Operation, Methods and\n                    Techniques. NIST Special
    Publication 800-38A\n                    (December 2001).\n                 \"\n
    \   ::= { snmpPrivProtocols 4 }\n"
  - 'END

    '
  title: 2.  Definitions
- contents:
  - "3.  CFB128-AES-128 Symmetric Encryption Protocol\n   This section describes a
    Symmetric Encryption Protocol based on the\n   AES cipher algorithm [FIPS-AES],
    used in Cipher Feedback Mode as\n   described in [AES-MODE], using encryption
    keys with a size of 128\n   bits.\n   This protocol is identified by usmAesCfb128PrivProtocol.\n
    \  The protocol usmAesCfb128PrivProtocol is an alternative to the\n   privacy
    protocol defined in [RFC3414].\n"
  - contents:
    - "3.1.  Mechanisms\n   In support of data confidentiality, an encryption algorithm
      is\n   required.  An appropriate portion of the message is encrypted prior\n
      \  to being transmitted.  The User-based Security Model specifies that\n   the
      scopedPDU is the portion of the message that needs to be\n   encrypted.\n   A
      secret value is shared by all SNMP engines which can legitimately\n   originate
      messages on behalf of the appropriate user.  This secret\n   value, in combination
      with a timeliness value and a 64-bit integer,\n   is used to create the (localized)
      en/decryption key and the\n   initialization vector.\n"
    - contents:
      - "3.1.1.  The AES-based Symmetric Encryption Protocol\n   The Symmetric Encryption
        Protocol defined in this memo provides\n   support for data confidentiality.
        \ The designated portion of an SNMP\n   message is encrypted and included
        as part of the message sent to the\n   recipient.\n   The AES (Advanced Encryption
        Standard) is the symmetric cipher\n   algorithm that the NIST (National Institute
        of Standards and\n   Technology) has selected in a four-year competitive process
        as\n   Replacement for DES (Data Encryption Standard).\n   The AES homepage,
        http://www.nist.gov/aes, contains a wealth of\n   information on AES including
        the Federal Information Processing\n   Standard [FIPS-AES] that fully specifies
        the Advanced Encryption\n   Standard.\n   The following subsections contain
        descriptions of the relevant\n   characteristics of the AES ciphers used in
        the symmetric encryption\n   protocol described in this memo.\n"
      - contents:
        - "3.1.1.1.  Mode of operation\n   The NIST Special Publication 800-38A [AES-MODE]
          recommends five\n   confidentiality modes of operation for use with AES:
          Electronic\n   Codebook (ECB), Cipher Block Chaining (CBC), Cipher Feedback
          (CFB),\n   Output Feedback (OFB), and Counter (CTR).\n   The symmetric encryption
          protocol described in this memo uses AES in\n   CFB mode with the parameter
          S (number of bits fed back) set to 128\n   according to the definition of
          CFB mode given in [AES-MODE].  This\n   mode requires an Initialization
          Vector (IV) that is the same size as\n   the block size of the cipher algorithm.\n"
        title: 3.1.1.1.  Mode of operation
      - contents:
        - "3.1.1.2.  Key Size\n   In the encryption protocol described by this memo
          AES is used with a\n   key size of 128 bits, as recommended in [AES-MODE].\n"
        title: 3.1.1.2.  Key Size
      - contents:
        - "3.1.1.3.  Block Size and Padding\n   The block size of the AES cipher algorithms
          used in the encryption\n   protocol described by this memo is 128 bits,
          as recommended in [AES-\n   MODE].\n"
        title: 3.1.1.3.  Block Size and Padding
      - contents:
        - "3.1.1.4.  Rounds\n   This parameter determines how many times a block is
          encrypted.  The\n   encryption protocol described in this memo uses 10 rounds,
          as\n   recommended in [AES-MODE].\n"
        title: 3.1.1.4.  Rounds
      title: 3.1.1.  The AES-based Symmetric Encryption Protocol
    - contents:
      - "3.1.2.  Localized Key, AES Encryption Key, and Initialization Vector\n   The
        size of the Localized Key (Kul) of an SNMP user, as described in\n   [RFC3414],
        depends on the authentication protocol defined for that\n   user U at the
        authoritative SNMP engine E.\n   The encryption protocol defined in this memo
        MUST be used with an\n   authentication protocol that generates a localized
        key with at least\n   128 bits.  The authentication protocols described in
        [RFC3414]\n   satisfy this requirement.\n"
      - contents:
        - "3.1.2.1.  AES Encryption Key and IV\n   The first 128 bits of the localized
          key Kul are used as the AES\n   encryption key.  The 128-bit IV is obtained
          as the concatenation of\n   the authoritative SNMP engine's 32-bit snmpEngineBoots,
          the SNMP\n   engine's 32-bit snmpEngineTime, and a local 64-bit integer.
          \ The 64-\n   bit integer is initialized to a pseudo-random value at boot
          time.\n   The IV is concatenated as follows: the 32-bit snmpEngineBoots
          is\n   converted to the first 4 octets (Most Significant Byte first), the\n
          \  32-bit snmpEngineTime is converted to the subsequent 4 octets (Most\n
          \  Significant Byte first), and the 64-bit integer is then converted to\n
          \  the last 8 octets (Most Significant Byte first).  The 64-bit integer\n
          \  is then put into the msgPrivacyParameters field encoded as an OCTET\n
          \  STRING of length 8 octets.  The integer is then modified for the\n   subsequent
          message.  We recommend that it is incremented by one until\n   it reaches
          its maximum value, at which time it is wrapped.\n   An implementation can
          use any method to vary the value of the local\n   64-bit integer, providing
          the chosen method never generates a\n   duplicate IV for the same key.\n
          \  A duplicated IV can result in the very unlikely event that multiple\n
          \  managers, communicating with a single authoritative engine, both\n   accidentally
          select the same 64-bit integer within a second.  The\n   probability of
          such an event is very low, and does not significantly\n   affect the robustness
          of the mechanisms proposed.\n   The 64-bit integer must be placed in the
          privParameters field to\n   enable the receiving entity to compute the correct
          IV and to decrypt\n   the message.  This 64-bit value is called the \"salt\"
          in this\n   document.\n   Note that the sender and receiver must use the
          same IV value, i.e.,\n   they must both use the same values of the individual
          components used\n   to create the IV.  In particular, both sender and receiver
          must use\n   the values of snmpEngineBoots, snmpEngineTime, and the 64-bit
          integer\n   which are contained in the relevant message (in the\n   msgAuthoritativeEngineBoots,
          msgAuthoritativeEngineTime, and\n   privParameters fields respectively).\n"
        title: 3.1.2.1.  AES Encryption Key and IV
      title: 3.1.2.  Localized Key, AES Encryption Key, and Initialization Vector
    - contents:
      - "3.1.3.  Data Encryption\n   The data to be encrypted is treated as a sequence
        of octets.\n   The data is encrypted in Cipher Feedback mode with the parameter
        s\n   set to 128 according to the definition of CFB mode given in Section\n
        \  6.3 of [AES-MODE].  A clear diagram of the encryption and decryption\n
        \  process is given in Figure 3 of [AES-MODE].\n   The plaintext is divided
        into 128-bit blocks.  The last block may\n   have fewer than 128 bits, and
        no padding is required.\n   The first input block is the IV, and the forward
        cipher operation is\n   applied to the IV to produce the first output block.
        \ The first\n   ciphertext block is produced by exclusive-ORing the first
        plaintext\n   block with the first output block.  The ciphertext block is
        also used\n   as the input block for the subsequent forward cipher operation.\n
        \  The process is repeated with the successive input blocks until a\n   ciphertext
        segment is produced from every plaintext segment.\n   The last ciphertext
        block is produced by exclusive-ORing the last\n   plaintext segment of r bits
        (r is less than or equal to 128) with the\n   segment of the r most significant
        bits of the last output block.\n"
      title: 3.1.3.  Data Encryption
    - contents:
      - "3.1.4.  Data Decryption\n   In CFB decryption, the IV is the first input
        block, the first\n   ciphertext is used for the second input block, the second
        ciphertext\n   is used for the third input block, etc.  The forward cipher
        function\n   is applied to each input block to produce the output blocks.
        \ The\n   output blocks are exclusive-ORed with the corresponding ciphertext\n
        \  blocks to recover the plaintext blocks.\n   The last ciphertext block (whose
        size r is less than or equal to 128)\n   is exclusive-ORed with the segment
        of the r most significant bits of\n   the last output block to recover the
        last plaintext block of r bits.\n"
      title: 3.1.4.  Data Decryption
    title: 3.1.  Mechanisms
  - contents:
    - "3.2.  Elements of the AES Privacy Protocol\n   This section contains definitions
      required to realize the privacy\n   modules defined by this memo.\n"
    - contents:
      - "3.2.1.  Users\n   Data en/decryption using this Symmetric Encryption Protocol
        makes use\n   of a defined set of userNames.  For any user on whose behalf
        a\n   message must be en/decrypted at a particular SNMP engine, that SNMP\n
        \  engine must have knowledge of that user.  An SNMP engine that needs\n   to
        communicate with another SNMP engine must also have knowledge of a\n   user
        known to that SNMP engine, including knowledge of the applicable\n   attributes
        of that user.\n   A user and its attributes are defined as follows:\n   <userName>\n
        \     An octet string representing the name of the user.\n   <privAlg>\n      The
        algorithm used to protect messages generated on behalf of the\n      user
        from disclosure.\n   <privKey>\n      The user's secret key to be used as
        input to the generation of the\n      localized key for encrypting/decrypting
        messages generated on\n      behalf of the user.  The length of this key MUST
        be greater than\n      or equal to 128 bits (16 octets).\n   <authAlg>\n      The
        algorithm used to authenticate messages generated on behalf of\n      the
        user, which is also used to generate the localized version of\n      the secret
        key.\n"
      title: 3.2.1.  Users
    - contents:
      - "3.2.2.  msgAuthoritativeEngineID\n   The msgAuthoritativeEngineID value contained
        in an authenticated\n   message specifies the authoritative SNMP engine for
        that particular\n   message (see the definition of SnmpEngineID in the SNMP
        Architecture\n   document [RFC3411]).\n   The user's (private) privacy key
        is different at each authoritative\n   SNMP engine, and so the snmpEngineID
        is used to select the proper key\n   for the en/decryption process.\n"
      title: 3.2.2.  msgAuthoritativeEngineID
    - contents:
      - "3.2.3.  SNMP Messages Using this Privacy Protocol\n   Messages using this
        privacy protocol carry a msgPrivacyParameters\n   field as part of the msgSecurityParameters.
        \ For this protocol, the\n   privParameters field is the serialized OCTET
        STRING representing the\n   \"salt\" that was used to create the IV.\n"
      title: 3.2.3.  SNMP Messages Using this Privacy Protocol
    - contents:
      - "3.2.4.  Services provided by the AES Privacy Modules\n   This section describes
        the inputs and outputs that the AES Privacy\n   module expects and produces
        when the User-based Security module\n   invokes one of the AES Privacy modules
        for services.\n"
      - contents:
        - "3.2.4.1.  Services for Encrypting Outgoing Data\n   The AES privacy protocol
          assumes that the selection of the privKey is\n   done by the caller, and
          that the caller passes the localized secret\n   key to be used.\n   Upon
          completion, the privacy module returns statusInformation and, if\n   the
          encryption process was successful, the encryptedPDU and the\n   msgPrivacyParameters
          encoded as an OCTET STRING.  The abstract\n   service primitive is:\n      statusInformation
          =              -- success or failure\n        encryptData(\n        IN    encryptKey
          \              -- secret key for encryption\n        IN    dataToEncrypt
          \           -- data to encrypt (scopedPDU)\n        OUT   encryptedData
          \           -- encrypted data (encryptedPDU)\n        OUT   privParameters
          \          -- filled in by service provider\n              )\n   The abstract
          data elements are:\n   statusInformation\n      An indication of the success
          or failure of the encryption process.\n      In case of failure, it is an
          indication of the error.\n   encryptKey\n      The secret key to be used
          by the encryption algorithm.  The length\n      of this key MUST be 16 octets.\n
          \  dataToEncrypt\n      The data that must be encrypted.\n   encryptedData\n
          \     The encrypted data upon successful completion.\n   privParameters\n
          \     The privParameters encoded as an OCTET STRING.\n"
        title: 3.2.4.1.  Services for Encrypting Outgoing Data
      - contents:
        - "3.2.4.2.  Services for Decrypting Incoming Data\n   This AES privacy protocol
          assumes that the selection of the privKey\n   is done by the caller and
          that the caller passes the localized secret\n   key to be used.\n   Upon
          completion the privacy module returns statusInformation and, if\n   the
          decryption process was successful, the scopedPDU in plain text.\n   The
          abstract service primitive is:\n      statusInformation =\n        decryptData(\n
          \       IN    decryptKey               -- secret key for decryption\n        IN
          \   privParameters           -- as received on the wire\n        IN    encryptedData
          \           -- encrypted data (encryptedPDU)\n        OUT   decryptedData
          \           -- decrypted data (scopedPDU)\n              )\n   The abstract
          data elements are:\n   statusInformation\n      An indication of whether
          the data was successfully decrypted, and\n      if not, an indication of
          the error.\n   decryptKey\n      The secret key to be used by the decryption
          algorithm.  The length\n      of this key MUST be 16 octets.\n   privParameters\n
          \     The 64-bit integer to be used to calculate the IV.\n   encryptedData\n
          \     The data to be decrypted.\n   decryptedData\n      The decrypted data.\n"
        title: 3.2.4.2.  Services for Decrypting Incoming Data
      title: 3.2.4.  Services provided by the AES Privacy Modules
    title: 3.2.  Elements of the AES Privacy Protocol
  - contents:
    - "3.3.  Elements of Procedure\n   This section describes the procedures for the
      AES privacy protocol\n   for SNMP's User-based Security Model.\n"
    - contents:
      - "3.3.1.  Processing an Outgoing Message\n   This section describes the procedure
        followed by an SNMP engine\n   whenever it must encrypt part of an outgoing
        message using the\n   usmAesCfb128PrivProtocol.\n   1) The secret encryptKey
        is used to construct the AES encryption key,\n      as described in section
        3.1.2.1.\n   2) The privParameters field is set to the serialization according
        to\n      the rules in [RFC3417] of an OCTET STRING representing the 64-bit\n
        \     integer that will be used in the IV as described in section\n      3.1.2.1.\n
        \  3) The scopedPDU is encrypted (as described in section 3.1.3) and the\n
        \     encrypted data is serialized according to the rules in [RFC3417]\n      as
        an OCTET STRING.\n   4) The serialized OCTET STRING representing the encrypted
        scopedPDU\n      together with the privParameters and statusInformation indicating\n
        \     success is returned to the calling module.\n"
      title: 3.3.1.  Processing an Outgoing Message
    - contents:
      - "3.3.2.  Processing an Incoming Message\n   This section describes the procedure
        followed by an SNMP engine\n   whenever it must decrypt part of an incoming
        message using the\n   usmAesCfb128PrivProtocol.\n   1) If the privParameters
        field is not an 8-octet OCTET STRING, then\n      an error indication (decryptionError)
        is returned to the calling\n      module.\n   2) The 64-bit integer is extracted
        from the privParameters field.\n   3) The secret decryptKey and the 64-bit
        integer are then used to\n      construct the AES decryption key and the IV
        that is computed as\n      described in section 3.1.2.1.\n   4) The encryptedPDU
        is then decrypted (as described in section\n      3.1.4).\n   5) If the encryptedPDU
        cannot be decrypted, then an error indication\n      (decryptionError) is
        returned to the calling module.\n   6) The decrypted scopedPDU and statusInformation
        indicating success\n      are returned to the calling module.\n"
      title: 3.3.2.  Processing an Incoming Message
    title: 3.3.  Elements of Procedure
  title: 3.  CFB128-AES-128 Symmetric Encryption Protocol
- contents:
  - "4.  Security Considerations\n   The security of the cryptographic functions defined
    in this document\n   lies both in the strength of the functions themselves against
    various\n   forms of attack, and also, perhaps more importantly, in the keying\n
    \  material that is used with them.  The recommendations in Section 1.3\n   SHOULD
    be followed to ensure maximum entropy to the selected\n   passwords, and to protect
    the passwords while stored.\n   The security of the CFB mode relies upon the use
    of a unique IV for\n   each message encrypted with the same key [CRYPTO-B].  If
    the IV is\n   not unique, a cryptanalyst can recover the corresponding plaintext.\n
    \  Section 3.1.2.1 defines a procedure to derive the IV from a local\n   64-bit
    integer (the salt) initialized to a pseudo-random value at\n   boot time.  An
    implementation can use any method to vary the value of\n   the local 64-bit integer,
    providing the chosen method never generates\n   a duplicate IV for the same key.\n
    \  The procedure of section 3.1.2.1 suggests a method to vary the local\n   64-bit
    integer value that generates unique IVs for every message.\n   This method can
    result in a duplicated IV in the very unlikely event\n   that multiple managers,
    communicating with a single authoritative\n   engine, both accidentally select
    the same 64-bit integer within a\n   second.  The probability of such an event
    is very low, and does not\n   significantly affect the robustness of the mechanisms
    proposed.\n   This AES-based privacy protocol MUST be used with one of the\n   authentication
    protocols defined in RFC 3414 or with an\n   algorithm/protocol providing equivalent
    functionality (including\n   integrity), because CFB encryption mode does not
    detect ciphertext\n   modifications.\n   For further security considerations,
    the reader is encouraged to read\n   [RFC3414], and the documents that describe
    the actual cipher\n   algorithms.\n"
  title: 4.  Security Considerations
- contents:
  - "5.  IANA Considerations\n   IANA has assigned OID 20 for the snmpUsmAesMIB module
    under the\n   snmpModules subtree, maintained in the registry at\n   http://www.iana.org/assignments/smi-numbers.\n
    \  IANA has assigned OID 4 for the usmAesCfb128Protocol under the\n   snmpPrivProtocols
    registration point, as defined in RFC 3411\n   [RFC3411].\n"
  title: 5.  IANA Considerations
- contents:
  - "6.  Acknowledgements\n   Portions of this text, as well as its general structure,
    were\n   unabashedly lifted from [RFC3414].  The authors are grateful to many\n
    \  of the SNMPv3 WG members for their help, especially Wes Hardaker,\n   Steve
    Moulton, Randy Presuhn, David Town, and Bert Wijnen.  Security\n   discussions
    with Steve Bellovin helped to streamline this protocol.\n"
  title: 6.  Acknowledgements
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [AES-MODE] Dworkin, M., \"NIST Recommendation
      for Block Cipher Modes\n              of Operation, Methods and Techniques\",
      NIST Special\n              Publication 800-38A, December 2001.\n   [FIPS-AES]
      \"Specification for the ADVANCED ENCRYPTION STANDARD\n              (AES)\",
      Federal Information Processing Standard (FIPS)\n              Publication 197,
      November 2001.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n
      \             Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2578]
      \ McCloghrie, K., Perkins, D. and J. Schoenwaelder,\n              \"Structure
      of Management Information Version 2 (SMIv2)\",\n              STD 58, RFC 2578,
      April 1999.\n   [RFC3411]  Harrington, D., Presuhn, R. and B. Wijnen, \"An\n
      \             Architecture for Describing Simple Network Management\n              Protocol
      (SNMP) Management Frameworks\", STD 62, RFC 3411,\n              December 2002.\n
      \  [RFC3414]  Blumenthal, U. and B. Wijnen, \"User-based Security Model\n              (USM)
      for version 3 of the Simple Network Management\n              Protocol (SNMPv3)\",
      STD 62, RFC 3414, December 2002.\n   [RFC3417]  Presuhn, R., Ed., \"Transport
      Mappings for the Simple\n              Network Management Protocol (SNMP)\",
      STD 62, RFC 3417,\n              December 2002.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [CRYPTO-B] Bellovin, S., \"Probable Plaintext
      Cryptanalysis of the IP\n              Security Protocols\", Proceedings of
      the Symposium on\n              Network and Distributed System Security, San
      Diego, CA,\n              pp. 155-160, February 1997.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "8.  Authors' Addresses\n   Uri Blumenthal\n   Lucent Technologies / Bell Labs\n
    \  67 Whippany Rd.\n   14D-318\n   Whippany, NJ  07981, USA\n   Phone:  +1-973-386-2163\n
    \  EMail:  uri@bell-labs.com\n   Fabio Maino\n   Andiamo Systems, Inc.\n   375
    East Tasman Drive\n   San Jose, CA. 95134 USA\n   Phone:  +1-408-853-7530\n   EMail:
    \ fmaino@andiamo.com\n   Keith McCloghrie\n   Cisco Systems, Inc.\n   170 East
    Tasman Drive\n   San Jose, CA. 95134-1706 USA\n   Phone:  +1-408-526-5260\n   EMail:
    \ kzm@cisco.com\n"
  title: 8.  Authors' Addresses
- contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This
    document is subject\n   to the rights, licenses and restrictions contained in
    BCP 78, and\n   except as set forth therein, the authors retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: 9.  Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
