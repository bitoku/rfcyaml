- title: __initial_text__
  contents:
  - "                 Comments on the File Transfer Protocol\nThere are several aspects\
    \ of the File Transfer Protocol that constitute\nserious drawbacks. Some of these\
    \ are quite basic in nature, and imply\nsubstantial design changes; these will\
    \ be discussed in a later RFC.\nOthers could be remedied with very little effort,\
    \ and this should be done\nas soon as possible.\nFollowing is a list of those\
    \ problems that can be easily solved, together\nwith their proposed solutions:\n\
    1. Once a server has been told to be \"passive\" with regard to establishment\n\
    of data connections, there is no way for the user to make him \"active\"\nagain.\
    \ SOLUTION: define a new command, with a command verb of \"ACTV\", to\nmean that\
    \ the server is to issue a CONNECT rather than a LISTEN on the data\nsocket. If\
    \ the server is already \"active\", the command is a no op. \"ACTV\"\nis to have\
    \ the same reply codes as \"PASV\".\n2. Design of an FTP server would be simpler\
    \ if all command verbs were the\nsame length, and design of an FTP user would\
    \ be simpler if either all\ncommand verbs were the same length, or if multiple\
    \ blanks were allowed\nfollowing the verb. SOLUTION: replace the only three-letter\
    \ verb, \"BYE\",\nwith a four-letter one, such as \"QUIT\", and constrain future\
    \ command verbs\nto be four letters long.\n3. The order of the handshaking elements\
    \ following a file transfer command\nis left unspecified. After sending a STOR\
    \ command, for example, a user\nprocess has no way of knowing which to wait for\
    \ first, the \"250 FILE\nTRANSFER STARTED\" reply, or establishment of the data\
    \ connection. SOLUTION:\nspecify that the server is to send a \"250\" reply before\
    \ attempting to\nestablish the data connection. If it is desired to check if the\
    \ user is\nlogged in, if the file exists, or if the user is to be allowed access\
    \ to\nthe file, these checks must be made before any reply is sent. The text of\n\
    the \"250\" reply would perhaps be more appropriate as \"250 OPENING DATA\nCONNECTION\"\
    , since it comes before actual data transfer begins. If the\nserver wishes to\
    \ send an error reply in the event that the data connection\ncannot be opened,\
    \ it is to be sent in lieu of the \"252 TRANSFER COMPLETE\"\nreply.  \n4. Some\
    \ hosts currently send an error reply on receipt of a command\nthat is unimplemented\
    \ because it is not needed (e.g., \"ACCT\" or \"ALLO\").\nEven though the text\
    \ of the reply indicates that the command has been\nignored, it is obviously impossible\
    \ for a user process to know that there\nis no real \"error\". SOLUTION: require\
    \ that any server that does not support\na particular command because it is not\
    \ needed in that system must return a\nsuccess reply.\n5. There is no specified\
    \ maximum length of a TELNET line, user name,\npassword, account, or pathname.\
    \ It is true that every system implementing\nan FTP server likely has different\
    \ maxima for its own parameters, but it is\nnearly impossible for the writer of\
    \ an FTP user (which must converse with\nmany FTP servers) to construct an indefinite\
    \ length buffer. Typically some\narbitrary maximum must be chosen. SOLUTION: specify\
    \ a maximum length for\nTELNET lines, user names, passwords, account numbers,\
    \ and pathnames. This\nis to be done after conducting a poll of serving sites\
    \ concerning their\nindividual maxima.\n6. The notion of allowing continuation\
    \ lines to start with arbitrary text\nsolves a minor problem for a few server\
    \ FTP implementers at the expense of\ncreating a major problem for all user FTP\
    \ implementers. The logic needed to\ndecode a multi-line reply is unnecessarily\
    \ complex, and made an order of\nmagnitude more so by the fact that multi-line\
    \ replies are allowed to be\nnested. SOLUTION: assign a unique (numeric) reply\
    \ code, such as \"009\", to\nbe used on all lines of a multi-line reply after\
    \ the first.\n7. Given that multi-line replies are allowed to be nested, the fact\
    \ that\nthe maximum allowed level of nesting is left unspecified creates a hardship\n\
    for implementers of user FTPs. This hardship is somewhat easily solved on a\n\
    machine that has hardware stacks, but not so for other machines. SOLUTION:\nspecify\
    \ a maximum level of nesting of multi-line replies.\n8. In blocked mode, the protocol\
    \ states that \"all end-of-record markers\n(EOR) are explicit, including the final\
    \ one.\" This prohibits sending data\nbetween the final end of record and the\
    \ end of file, but does not specify\nwhat the receiver of data is to do if this\
    \ rule is broken. That is, should\nthe intervening data be discarded or treated\
    \ as a new (final) record?\nSOLUTION: specify that if an end-of-file marker is\
    \ not immediately preceded\nby an end-of-record marker, the intervening data is\
    \ to be discarded.\nA major complaint about the protocol concerns the fact that\
    \ the writer of\nan FTP user process must handle a considerable number of special\
    \ cases\nmerely to determine whether or not the last command sent was successful.\
    \ It\nis admitted that the protocol is well-defined in all the following areas,\n\
    but it is important to realize that the characteristic \"well-defined\" is\nnecessary,\
    \ but not sufficient; for many reasons, it is very desirable to\nemploy the simplest\
    \ mechanism that satisfies all the needs. Following is a\nlist of those drawbacks\
    \ that unduly complicate the flow chart of an FTP\nuser process:\n9. Different\
    \ commands have different success reply codes. A successful\n\"USER\" command,\
    \ for example, returns a \"230\" whereas a successful \"BYTE\"\ncommand returns\
    \ a \"200\". The concept that success replies should have an\neven first digit\
    \ and failure replies an odd first digit does not apply, as\n\"100, means success\
    \ for \"STAT\", and \"402\" means failure for \"BYTE\".\nSOLUTION: specify that\
    \ any command must return a reply code beginning with\nsome unique digit, such\
    \ as \"2\", if successful, and anything other than that\ndigit if not successful.\n\
    10. Some commands have multiple possible success reply codes, e.g., \"USER\",\n\
    \"REIN\", and \"BYE\". It is undesirable for an FTP user to be required to keep\n\
    a list of reply codes for each command, all of which mean \"command\naccepted,\
    \ continue\".  SOLUTION: same as for (9.) above. The desire to\ncommunicate more\
    \ specific information than simply \"yes\" or \"no\", such as\nthe difficulty\
    \ in the login procedure that some sites do not need all the\nparameters, may\
    \ be solved by having, for example, \"238\" mean \"PASSWORD\nACCEPTED, YOU ARE\
    \ NOW LOGGED IN\", and \"237\" mean \"PASSWORD ACCEPTED,\nACCOUNT NOW NEEDED\"\
    \ The important point is that the idea of \"command\naccepted\" is conveyed by\
    \ the initial \"2\", and that finer gradations of\nmeaning can be deduced by the\
    \ user process, if desired.\n11. There are several types of replies that are extraneous\
    \ from the point\nof view of a user FTP process, and their reply codes have no\
    \ characteristic\nthat makes them easily distinguishable.  For example, \"010\
    \ message from\noperator\" and \"050 FTP commentary\" are superfluous to a user\
    \ process, and\n\"000 announcing FTP\" (in place of \"300\" greeting) is not.\
    \ SOLUTION: specify\nthat any reply that has meaning only to a human user and\
    \ not to a user\nprocess must have a reply code beginning with a unique digit,\
    \ such as \"0\".\nThe continuation line reply code proposed in (8.) above falls\
    \ into this\ncategory, and therefore must start with the same unique digit.\n\
    12. The notion of a server sending a \"000 announcing FTP\" or a \"020\nexpected\
    \ delay\" immediately after completion of the ICP if input cannot be\naccepted\
    \ right away is another instance of multiple reply codes having the\nsame meaning\
    \ to a user process.  SOLUTION: require that the server send a\nreply with a \"\
    020\" reply code in the situation cited. If it is desired to\ncommunicate more\
    \ detailed information, the text of the reply may used for\nthis purpose.\nIn\
    \ addition to the above mentioned weaknesses in the protocol, the\nfollowing is\
    \ believed to be a typographical error:\n13. Reply code \"331\" is cited as a\
    \ possible success reply code for the\ncommands \"BYTE\", \"SOCK\", \"PASV\",\
    \ \"TYPE\", \"STRU\", \"MODE\", \"ALLO\", \"REST\",\n\"SITE\", AND \"STAT\". This\
    \ reply code means \"ENTER ACCOUNT\" (if required as\npart of login sequence),\
    \ and perhaps should be \"332 LOGIN FIRST, PLEASE\".\nThis is especially indicated\
    \ by the fact that \"332\" is not listed anywhere\nin the command-reply correspondence\
    \ table.\n"
