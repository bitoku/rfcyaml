- title: __initial_text__
  contents:
  - '               Network Configuration Access Control Model

    '
- title: Abstract
  contents:
  - "Abstract\n   The standardization of network configuration interfaces for use\
    \ with\n   the Network Configuration Protocol (NETCONF) or the RESTCONF protocol\n\
    \   requires a structured and secure operating environment that promotes\n   human\
    \ usability and multi-vendor interoperability.  There is a need\n   for standard\
    \ mechanisms to restrict NETCONF or RESTCONF protocol\n   access for particular\
    \ users to a preconfigured subset of all\n   available NETCONF or RESTCONF protocol\
    \ operations and content.  This\n   document defines such an access control model.\n\
    \   This document obsoletes RFC 6536.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8341.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Terminology ................................................4\n  \
    \    1.2. Changes since RFC 6536 .....................................6\n   2.\
    \ Access Control Design Objectives ................................7\n      2.1.\
    \ Access Control Points ......................................7\n      2.2. Simplicity\
    \ .................................................8\n      2.3. Procedural Interface\
    \ .......................................8\n      2.4. Datastore Access ...........................................8\n\
    \      2.5. Users and Groups ...........................................8\n  \
    \    2.6. Maintenance ................................................9\n    \
    \  2.7. Configuration Capabilities .................................9\n      2.8.\
    \ Identifying Security-Sensitive Content .....................9\n   3. NETCONF\
    \ Access Control Model (NACM) ............................10\n      3.1. Overview\
    \ ..................................................10\n           3.1.1. Features\
    \ ...........................................10\n           3.1.2. External Dependencies\
    \ ..............................11\n           3.1.3. Message Processing Model\
    \ ...........................11\n      3.2. Datastore Access ..........................................14\n\
    \           3.2.1. Mapping New Datastores to NACM .....................14\n  \
    \         3.2.2. Access Rights ......................................14\n    \
    \       3.2.3. RESTCONF Methods ...................................15\n      \
    \     3.2.4. <get> and <get-config> Operations ..................16\n        \
    \   3.2.5. <edit-config> Operation ............................16\n          \
    \ 3.2.6. <copy-config> Operation ............................18\n           3.2.7.\
    \ <delete-config> Operation ..........................18\n           3.2.8. <commit>\
    \ Operation .................................19\n           3.2.9. <discard-changes>\
    \ Operation ........................19\n           3.2.10. <kill-session> Operation\
    \ ..........................19\n      3.3. Model Components ..........................................19\n\
    \           3.3.1. Users ..............................................19\n  \
    \         3.3.2. Groups .............................................20\n    \
    \       3.3.3. Emergency Recovery Session .........................20\n      \
    \     3.3.4. Global Enforcement Controls ........................20\n        \
    \          3.3.4.1. enable-nacm Switch ........................20\n          \
    \        3.3.4.2. read-default Switch .......................20\n            \
    \      3.3.4.3. write-default Switch ......................21\n              \
    \    3.3.4.4. exec-default Switch .......................21\n                \
    \  3.3.4.5. enable-external-groups Switch .............22\n           3.3.5. Access\
    \ Control Rules ...............................22\n      3.4. Access Control Enforcement\
    \ Procedures .....................22\n           3.4.1. Initial Operation ..................................23\n\
    \           3.4.2. Session Establishment ..............................23\n  \
    \         3.4.3. \"access-denied\" Error Handling .....................23\n  \
    \         3.4.4. Incoming RPC Message Validation ....................24\n    \
    \       3.4.5. Data Node Access Validation ........................26\n      \
    \     3.4.6. Outgoing <notification> Authorization ..............29\n      3.5.\
    \ Data Model Definitions ....................................31\n           3.5.1.\
    \ Data Organization ..................................31\n           3.5.2. YANG\
    \ Module ........................................32\n   4. IANA Considerations\
    \ ............................................42\n   5. Security Considerations\
    \ ........................................42\n      5.1. NACM Configuration and\
    \ Monitoring Considerations ..........43\n      5.2. General Configuration Issues\
    \ ..............................45\n      5.3. Data Model Design Considerations\
    \ ..........................47\n   6. References .....................................................47\n\
    \      6.1. Normative References ......................................47\n  \
    \    6.2. Informative References ....................................49\n   Appendix\
    \ A. Usage Examples ........................................50\n     A.1. <groups>\
    \ Example ...........................................50\n     A.2. Module Rule\
    \ Example ........................................51\n     A.3. Protocol Operation\
    \ Rule Example ............................53\n     A.4. Data Node Rule Example\
    \ .....................................55\n     A.5. Notification Rule Example\
    \ ..................................57\n   Authors' Addresses ................................................58\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Network Configuration Protocol (NETCONF) and the RESTCONF\n\
    \   protocol do not provide any standard mechanisms to restrict the\n   protocol\
    \ operations and content that each user is authorized to\n   access.\n   There\
    \ is a need for interoperable management of the controlled access\n   to administrator-selected\
    \ portions of the available NETCONF or\n   RESTCONF content within a particular\
    \ server.\n   This document addresses access control mechanisms for the Operations\n\
    \   and Content layers of NETCONF, as defined in [RFC6241]; and RESTCONF,\n  \
    \ as defined in [RFC8040].  It contains three main sections:\n   1.  Access Control\
    \ Design Objectives\n   2.  NETCONF Access Control Model (NACM)\n   3.  YANG Data\
    \ Model (ietf-netconf-acm.yang)\n   YANG version 1.1 [RFC7950] adds two new constructs\
    \ that need special\n   access control handling.  The \"action\" statement is\
    \ similar to the\n   \"rpc\" statement, except that it is located within a data\
    \ node.  The\n   \"notification\" statement can also be located within a data\
    \ node.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n   The following terms are defined in [RFC8342]\
    \ and are not redefined\n   here:\n   o  datastore\n   o  configuration datastore\n\
    \   o  conventional configuration datastore\n   o  candidate configuration datastore\n\
    \   o  running configuration datastore\n   o  startup configuration datastore\n\
    \   o  operational state datastore\n   o  client\n   o  server\n   The following\
    \ terms are defined in [RFC6241] and are not redefined\n   here:\n   o  protocol\
    \ operation\n   o  session\n   o  user\n   The following terms are defined in\
    \ [RFC7950] and are not redefined\n   here:\n   o  action\n   o  data node\n \
    \  o  data definition statement\n   The following terms are defined in [RFC8040]\
    \ and are not redefined\n   here:\n   o  data resource\n   o  datastore resource\n\
    \   o  operation resource\n   o  target resource\n   The following term is defined\
    \ in [RFC7230] and is not redefined here:\n   o  request URI\n   The following\
    \ terms are used throughout this document:\n   access control:  A security feature\
    \ provided by the server that\n      allows an administrator to restrict access\
    \ to a subset of all\n      protocol operations and data, based on various criteria.\n\
    \   access control model (ACM):  A conceptual model used to configure and\n  \
    \    monitor the access control procedures desired by the administrator\n    \
    \  to enforce a particular access control policy.\n   access control rule:  The\
    \ criterion used to determine if a particular\n      access operation will be\
    \ permitted or denied.\n   access operation:  How a request attempts to access\
    \ a conceptual\n      object.  One of \"none\", \"read\", \"create\", \"delete\"\
    , \"update\", or\n      \"execute\".\n   data node hierarchy:  The hierarchy of\
    \ data nodes that identifies the\n      specific \"action\" or \"notification\"\
    \ node in the datastore.\n   recovery session:  A special administrative session\
    \ that is given\n      unlimited NETCONF access and is exempt from all access\
    \ control\n      enforcement.  The mechanism or mechanisms used by a server to\n\
    \      control and identify whether or not a session is a recovery\n      session\
    \ are implementation specific and are outside the scope of\n      this document.\n\
    \   write access:  A shorthand for the \"create\", \"delete\", and \"update\"\n\
    \      access operations.\n"
- title: 1.2.  Changes since RFC 6536
  contents:
  - "1.2.  Changes since RFC 6536\n   The NACM procedures and data model have been\
    \ updated to support new\n   data modeling capabilities in version 1.1 of the\
    \ YANG data modeling\n   language.  The \"action\" and \"notification\" statements\
    \ can be used\n   within data nodes to define data-model-specific operations and\n\
    \   notifications.\n   An important use case for these new YANG statements is\
    \ the increased\n   access control granularity that can be achieved over top-level\
    \ \"rpc\"\n   and \"notification\" statements.  The new \"action\" and \"notification\"\
    \n   statements are used within data nodes, and access to the action or\n   notification\
    \ can be restricted to specific instances of these data\n   nodes.\n   Support\
    \ for the RESTCONF protocol has been added.  The RESTCONF\n   operations are similar\
    \ to the NETCONF operations, so a simple mapping\n   to the existing NACM procedures\
    \ and data model is possible.\n   The data node access behavior for path matches\
    \ has been clarified to\n   also include matching descendant nodes of the specified\
    \ path.\n   The <edit-config> operation access rights behavior has been clarified\n\
    \   to indicate that write access is not required for data nodes that are\n  \
    \ implicitly modified through side effects (such as the evaluation of\n   YANG\
    \ when-stmts, or data nodes implicitly deleted when creating a\n   data node under\
    \ a different branch under a YANG choice-stmt).\n   The Security Considerations\
    \ section has been updated to comply with\n   the \"YANG module security guidelines\"\
    \ [YANG-SEC].  Note that the YANG\n   module in this document does not define\
    \ any RPC operations.\n"
- title: 2.  Access Control Design Objectives
  contents:
  - "2.  Access Control Design Objectives\n   This section documents the design objectives\
    \ for the NETCONF access\n   control model presented in Section 3.\n"
- title: 2.1.  Access Control Points
  contents:
  - "2.1.  Access Control Points\n   NETCONF allows server implementers to add new\
    \ custom protocol\n   operations, and the YANG data modeling language supports\
    \ this\n   feature.  These operations can be defined in standard or proprietary\n\
    \   YANG modules.\n   It is not possible to design an ACM for NETCONF that only\
    \ focuses on\n   a static set of standard protocol operations defined by NETCONF\n\
    \   itself, like some other protocols.  Since few assumptions can be made\n  \
    \ about an arbitrary protocol operation, the NETCONF architectural\n   server\
    \ components need to be protected at three conceptual control\n   points.\n  \
    \ These access control points, described in Figure 1, are as follows:\n   protocol\
    \ operation:  Permission to invoke specific protocol\n      operations.\n   datastore:\
    \  Permission to read and/or alter specific data nodes\n      within any datastore.\n\
    \   notification:  Permission to receive specific notification event\n      types.\n\
    \                 +-------------+                 +-------------+\n    client\
    \       |  protocol   |                 |  data node  |\n    request -->  |  operation\
    \  | ------------->  |   access    |\n                 |  allowed?   |   datastore\
    \     |  allowed?   |\n                 +-------------+   or state      +-------------+\n\
    \                                   data access\n                 +----------------+\n\
    \                 |  notification  |\n    event -->    |  allowed?      |\n  \
    \               +----------------+\n                                 Figure 1\n"
- title: 2.2.  Simplicity
  contents:
  - "2.2.  Simplicity\n   There is concern that a complicated ACM will not be widely\
    \ deployed\n   because it is too hard to use.  Configuration of the access control\n\
    \   system needs to be as simple as possible.  Simple and common tasks\n   need\
    \ to be easy to configure and require little expertise or\n   domain-specific\
    \ knowledge.  Complex tasks are possible using\n   additional mechanisms that\
    \ may require additional expertise.\n   A single set of access control rules ought\
    \ to be able to control all\n   types of NETCONF protocol operation invocation,\
    \ all datastore access,\n   and all notification events.\n   Access control ought\
    \ to be defined with a small and familiar set of\n   permissions, while still\
    \ allowing full control of datastore access.\n"
- title: 2.3.  Procedural Interface
  contents:
  - "2.3.  Procedural Interface\n   NETCONF uses a Remote Procedure Call (RPC) model\
    \ and an extensible\n   set of protocol operations.  Access control for any possible\
    \ protocol\n   operation is necessary.\n"
- title: 2.4.  Datastore Access
  contents:
  - "2.4.  Datastore Access\n   It is necessary to control access to specific nodes\
    \ and subtrees\n   within the datastore, regardless of which protocol operation\
    \ --\n   standard or proprietary -- was used to access the datastore.\n"
- title: 2.5.  Users and Groups
  contents:
  - "2.5.  Users and Groups\n   It is necessary that access control rules for a single\
    \ user or a\n   configurable group of users can be configured.\n   The ACM needs\
    \ to support the concept of administrative groups, to\n   support the well-established\
    \ distinction between a root account and\n   other types of less-privileged conceptual\
    \ user accounts.  These\n   groups need to be configurable by the administrator.\n\
    \   It is necessary that the user-to-group mapping can be delegated to a\n   central\
    \ server, such as a RADIUS server [RFC2865] [RFC5607].  Since\n   authentication\
    \ is performed by the transport layer and RADIUS\n   performs authentication and\
    \ service authorization at the same time,\n   the underlying transport protocol\
    \ needs to be able to report a set of\n   group names associated with the user\
    \ to the server.  It is necessary\n   that the administrator can disable the usage\
    \ of these group names\n   within the ACM.\n"
- title: 2.6.  Maintenance
  contents:
  - "2.6.  Maintenance\n   It ought to be possible to disable part or all of the access\
    \ control\n   model enforcement procedures without deleting any access control\n\
    \   rules.\n"
- title: 2.7.  Configuration Capabilities
  contents:
  - "2.7.  Configuration Capabilities\n   Suitable configuration and monitoring mechanisms\
    \ are needed to allow\n   an administrator to easily manage all aspects of the\
    \ ACM's behavior.\n   A standard data model, suitable for use with the <edit-config>\n\
    \   protocol operation, needs to be available for this purpose.\n   Access control\
    \ rules to restrict access operations on specific\n   subtrees within the configuration\
    \ datastore need to be supported.\n"
- title: 2.8.  Identifying Security-Sensitive Content
  contents:
  - "2.8.  Identifying Security-Sensitive Content\n   One of the most important aspects\
    \ of the data model documentation,\n   and one of the biggest concerns during\
    \ deployment, is the\n   identification of security-sensitive content.  This applies\
    \ to\n   protocol operations in NETCONF, not just data and notifications.\n  \
    \ It is mandatory for security-sensitive objects to be documented in\n   the Security\
    \ Considerations section of an RFC.  This is nice, but it\n   is not good enough,\
    \ for the following reasons:\n   o  This documentation-only approach forces administrators\
    \ to study\n      the RFC and determine if there are any potential security risks\n\
    \      introduced by a new data model.\n   o  If any security risks are identified,\
    \ then the administrator must\n      study some more RFC text and determine how\
    \ to mitigate the\n      security risk(s).\n   o  The ACM on each server must\
    \ be configured to mitigate the security\n      risks, e.g., require privileged\
    \ access to read or write the\n      specific data identified in the Security\
    \ Considerations section.\n   o  If the ACM is not preconfigured, then there will\
    \ be a time window\n      of vulnerability after the new data model is loaded\
    \ and before the\n      new access control rules for that data model are configured,\n\
    \      enabled, and debugged.\n   Often, the administrator just wants to disable\
    \ default access to the\n   secure content so that no inadvertent or malicious\
    \ changes can be\n   made to the server.  This allows the default rules to be\
    \ more\n   lenient, without significantly increasing the security risk.\n   A\
    \ data model designer needs to be able to use machine-readable\n   statements\
    \ to identify content that needs to be protected by default.\n   This will allow\
    \ client and server tools to automatically identify\n   data-model-specific security\
    \ risks, by denying access to sensitive\n   data unless the user is explicitly\
    \ authorized to perform the\n   requested access operation.\n"
- title: 3.  NETCONF Access Control Model (NACM)
  contents:
  - '3.  NETCONF Access Control Model (NACM)

    '
- title: 3.1.  Overview
  contents:
  - "3.1.  Overview\n   This section provides a high-level overview of the access\
    \ control\n   model structure.  It describes the NETCONF protocol message\n  \
    \ processing model and the conceptual access control requirements\n   within that\
    \ model.\n"
- title: 3.1.1.  Features
  contents:
  - "3.1.1.  Features\n   The NACM data model provides the following features:\n \
    \  o  Independent control of RPC, action, data, and notification access\n    \
    \  is provided.\n   o  The concept of an emergency recovery session is supported,\
    \ but\n      configuration of the server for this purpose is beyond the scope\n\
    \      of this document.  An emergency recovery session will bypass all\n    \
    \  access control enforcement, in order to allow it to initialize or\n      repair\
    \ the NACM configuration.\n   o  A simple and familiar set of datastore permissions\
    \ is used.\n   o  Support for YANG security tagging (e.g., a\n      \"nacm:default-deny-write\"\
    \ statement) allows default security modes\n      to automatically exclude sensitive\
    \ data.\n   o  Separate default access modes for read, write, and execute\n  \
    \    permissions are provided.\n   o  Access control rules are applied to configurable\
    \ groups of users.\n   o  The access control enforcement procedures can be disabled\
    \ during\n      operation, without deleting any access control rules, in order\
    \ to\n      debug operational problems.\n   o  The number of denied protocol operation\
    \ requests and denied\n      datastore write requests can be monitored by the\
    \ client.\n   o  Simple unconstrained YANG instance-identifiers are used to\n\
    \      configure access control rules for specific data nodes.\n"
- title: 3.1.2.  External Dependencies
  contents:
  - "3.1.2.  External Dependencies\n   NETCONF [RFC6241] and RESTCONF [RFC8040] are\
    \ used for network\n   management purposes within this document.\n   The YANG\
    \ data modeling language [RFC7950] is used to define the data\n   models for use\
    \ with NETCONF or RESTCONF.  YANG is also used to define\n   the data model in\
    \ this document.\n"
- title: 3.1.3.  Message Processing Model
  contents:
  - "3.1.3.  Message Processing Model\n   The following diagram shows the conceptual\
    \ message flow model,\n   including the points at which access control is applied\
    \ during\n   NETCONF message processing.\n   RESTCONF operations are mapped to\
    \ the access control model based on\n   the HTTP method and resource class used\
    \ in the operation.  For\n   example, a POST method on a data resource is considered\
    \ \"write data\n   node\" access, but a POST method on an operation resource is\n\
    \   considered \"operation\" access.\n   The new \"pre-read data node acc. ctl\"\
    \ boxes in the diagram below\n   refer to group read access as it relates to data\
    \ node ancestors of an\n   action or notification.  As an example, if an action\
    \ is defined as\n   /interfaces/interface/reset-interface, the group must be authorized\n\
    \   to (1) read /interfaces and /interfaces/interface and (2) execute on\n   /interfaces/interface/reset-interface.\n\
    \                    +-------------------------+\n                    |      \
    \ session           |\n                    |      (username)         |\n     \
    \               +-------------------------+\n                       |        \
    \         ^\n                       V                 |\n             +--------------+\
    \     +---------------+\n             |   message    |     |   message     |\n\
    \             | dispatcher   |     |   generator   |\n             +--------------+\
    \     +---------------+\n               |      |               ^         ^\n \
    \              |      V               |         |\n               |  +=============+\
    \     |         |\n               |  | pre-read    |     |         |\n       \
    \        |  | data node   |     |         |\n               |  | acc. ctl    |\
    \     |         |\n               |  +=============+     |         |\n       \
    \        |    |                 |         |\n               V    V           \
    \      |         |\n         +===========+     +-------------+   +----------------+\n\
    \         | operation |---> |    reply    |   | <notification> |\n         | acc.\
    \ ctl  |     |  generator  |   |  generator     |\n         +===========+    \
    \ +-------------+   +----------------+\n               |              ^    ^ \
    \               ^\n               V       +------+    |                |\n   \
    \      +-----------+ |   +=============+  +================+\n         | operation\
    \ | |   |    read     |  | <notification> |\n         | processor |-+   | data\
    \ node   |  |  access ctl    |\n         |           |     | acc. ctl    |  |\
    \                |\n         +-----------+     +=============+  +================+\n\
    \               |   |                  ^       ^     ^\n               V   +----------------+\
    \ |       |     |\n         +===========+              | |       | +============+\n\
    \         |  write    |              | |       | | pre-read   |\n         | data\
    \ node |              | |       | | data node  |\n         | acc. ctl  | -----------+\
    \ | |       | | acc. ctl   |\n         +===========+            | | |       |\
    \ +============+\n               |                  | | |       |   ^\n      \
    \         V                  V V |       |   |\n         +---------------+   \
    \   +-------------------+\n         | configuration | ---> |      server     \
    \  |\n         |   datastore   |      |  instrumentation  |\n         |      \
    \         | <--- |                   |\n         +---------------+      +-------------------+\n\
    \                                 Figure 2\n   The following high-level sequence\
    \ of conceptual processing steps is\n   executed for each received <rpc> message,\
    \ if access control\n   enforcement is enabled:\n   o  For each active session,\
    \ access control is applied individually to\n      all <rpc> messages (except\
    \ <close-session>) received by the\n      server, unless the session is identified\
    \ as a recovery session.\n   o  If the <action> operation defined in [RFC7950]\
    \ is invoked, then\n      read access is required for all instances in the hierarchy\
    \ of data\n      nodes that identifies the specific action in the datastore, and\n\
    \      execute access is required for the action node.  If the user is\n     \
    \ not authorized to read all the specified data nodes and execute\n      the action,\
    \ then the request is rejected with an \"access-denied\"\n      error.\n   o \
    \ Otherwise, if the user is not authorized to execute the specified\n      protocol\
    \ operation, then the request is rejected with an\n      \"access-denied\" error.\n\
    \   o  If a datastore is accessed by the protocol operation, then the\n      server\
    \ checks to see if the client is authorized to access the\n      nodes in the\
    \ datastore.  If the user is not authorized to perform\n      the requested access\
    \ operation on the requested data, then the\n      request is rejected with an\
    \ \"access-denied\" error.\n   The following sequence of conceptual processing\
    \ steps is executed for\n   each generated notification event, if access control\
    \ enforcement is\n   enabled:\n   o  Server instrumentation generates a notification\
    \ for a particular\n      subscription.\n   o  If the \"notification\" statement\
    \ is specified within a data\n      subtree, as specified in [RFC7950], then read\
    \ access is required\n      for all instances in the hierarchy of data nodes that\
    \ identifies\n      the specific notification in the datastore, and read access\
    \ is\n      required for the notification node.  If the user is not authorized\n\
    \      to read all the specified data nodes and the notification node,\n     \
    \ then the notification is dropped for that subscription.\n   o  If the \"notification\"\
    \ statement is a top-level statement, the\n      notification access control enforcer\
    \ checks the notification event\n      type, and if it is one that the user is\
    \ not authorized to read,\n      then the notification is dropped for that subscription.\n"
- title: 3.2.  Datastore Access
  contents:
  - "3.2.  Datastore Access\n   The same access control rules apply to all datastores\
    \ that support\n   the NACM -- for example, the candidate configuration datastore\
    \ or the\n   running configuration datastore.\n   All conventional configuration\
    \ datastores and the operational state\n   datastore are controlled by the NACM.\
    \  Local files, remote files, or\n   datastores accessed via the <url> parameter\
    \ are not controlled by\n   the NACM.\n"
- title: 3.2.1.  Mapping New Datastores to NACM
  contents:
  - "3.2.1.  Mapping New Datastores to NACM\n   It is possible that new datastores\
    \ will be defined over time for use\n   with NETCONF.  The NACM MAY be applied\
    \ to other datastores that have\n   similar access rights as defined in the NACM.\
    \  To apply the NACM to a\n   new datastore, the new datastore specification needs\
    \ to define how it\n   maps to the NACM CRUDX (Create, Read, Update, Delete, eXec)\
    \ access\n   rights.  It is possible that only a subset of the NACM access rights\n\
    \   would be applicable.  For example, only retrieval access control\n   would\
    \ be needed for a read-only datastore.  Operations and access\n   rights not supported\
    \ by the NACM CRUDX model are outside the scope of\n   this document.  A datastore\
    \ does not need to use the NACM, e.g., the\n   datastore specification defines\
    \ something else or does not use access\n   control.\n"
- title: 3.2.2.  Access Rights
  contents:
  - "3.2.2.  Access Rights\n   A small set of hard-wired datastore access rights is\
    \ needed to\n   control access to all possible protocol operations, including\
    \ vendor\n   extensions to the standard protocol operation set.\n   The CRUDX\
    \ model can support all protocol operations:\n   o  Create: allows the client\
    \ to add a new data node instance to a\n      datastore.\n   o  Read: allows the\
    \ client to read a data node instance from a\n      datastore or receive the notification\
    \ event type.\n   o  Update: allows the client to update an existing data node\
    \ instance\n      in a datastore.\n   o  Delete: allows the client to delete a\
    \ data node instance from a\n      datastore.\n   o  eXec: allows the client to\
    \ execute the operation.\n"
- title: 3.2.3.  RESTCONF Methods
  contents:
  - "3.2.3.  RESTCONF Methods\n   The RESTCONF protocol utilizes HTTP methods to perform\
    \ datastore\n   operations, similar to NETCONF.  The NACM procedures were originally\n\
    \   written for NETCONF protocol operations, so the RESTCONF methods are\n   mapped\
    \ to NETCONF operations for the purpose of access control\n   processing.  The\
    \ enforcement procedures described within this\n   document apply to both protocols\
    \ unless explicitly stated otherwise.\n   The request URI needs to be considered\
    \ when processing RESTCONF\n   requests on data resources:\n   o  For HEAD and\
    \ GET requests, any data nodes that are ancestor nodes\n      of the target resource\
    \ are considered to be part of the retrieval\n      request for access control\
    \ purposes.\n   o  For PUT, PATCH, and DELETE requests, any data nodes that are\n\
    \      ancestor nodes of the target resource are not considered to be\n      part\
    \ of the edit request for access control purposes.  The access\n      operation\
    \ for these nodes is considered to be \"none\".  The edit\n      begins at the\
    \ target resource.\n   o  For POST requests on data resources, any data nodes\
    \ that are\n      specified in the request URI, including the target resource,\
    \ are\n      not considered to be part of the edit request for access control\n\
    \      purposes.  The access operation for these nodes is considered to\n    \
    \  be \"none\".  The edit begins at a child node of the target\n      resource,\
    \ specified in the message body.\n   Not all RESTCONF methods are subject to access\
    \ control.  The\n   following table specifies how each method is mapped to NETCONF\n\
    \   protocol operations.  The value \"none\" indicates that the NACM is not\n\
    \   applied at all to the specific RESTCONF method.\n   +---------+-----------------+---------------------+-----------------+\n\
    \   | Method  | Resource class  | NETCONF operation   | Access          |\n  \
    \ |         |                 |                     | operation       |\n   +---------+-----------------+---------------------+-----------------+\n\
    \   | OPTIONS | all             | none                | none            |\n  \
    \ | HEAD    | all             | <get>, <get-config> | read            |\n   |\
    \ GET     | all             | <get>, <get-config> | read            |\n   | POST\
    \    | datastore, data | <edit-config>       | create          |\n   | POST  \
    \  | operation       | specified operation | execute         |\n   | PUT     |\
    \ data            | <edit-config>       | create, update  |\n   | PUT     | datastore\
    \       | <copy-config>       | update          |\n   | PATCH   | data, datastore\
    \ | <edit-config>       | update          |\n   | DELETE  | data            |\
    \ <edit-config>       | delete          |\n   +---------+-----------------+---------------------+-----------------+\n\
    \               Table 1: Mapping RESTCONF Methods to NETCONF\n"
- title: 3.2.4.  <get> and <get-config> Operations
  contents:
  - "3.2.4.  <get> and <get-config> Operations\n   The NACM access rights are not\
    \ directly coupled to the <get> and\n   <get-config> protocol operations but apply\
    \ to all <rpc> operations\n   that would result in a \"read\" access operation\
    \ to the target\n   datastore.  This section describes how these access rights\
    \ apply to\n   the specific access operations supported by the <get> and\n   <get-config>\
    \ protocol operations.\n   Data nodes to which the client does not have read access\
    \ are silently\n   omitted, along with any descendants, from the <rpc-reply> message.\n\
    \   This is done to allow NETCONF filters for <get> and <get-config> to\n   function\
    \ properly, instead of causing an \"access-denied\" error\n   because the filter\
    \ criteria would otherwise include unauthorized read\n   access to some data nodes.\
    \  For NETCONF filtering purposes, the\n   selection criteria are applied to the\
    \ subset of nodes that the user\n   is authorized to read, not the entire datastore.\n"
- title: 3.2.5.  <edit-config> Operation
  contents:
  - "3.2.5.  <edit-config> Operation\n   The NACM access rights are not directly coupled\
    \ to the <edit-config>\n   \"operation\" attribute, although they are similar.\
    \  Instead, a NACM\n   access right applies to all protocol operations that would\
    \ result in\n   a particular access operation to the target datastore.  This section\n\
    \   describes how these access rights apply to the specific access\n   operations\
    \ supported by the <edit-config> protocol operation.\n   If the effective access\
    \ operation is \"none\" (i.e.,\n   default-operation=\"none\") for a particular\
    \ data node, then no access\n   control is applied to that data node.  This is\
    \ required to allow\n   access to a subtree within a larger data structure.  For\
    \ example, a\n   user may be authorized to create a new \"/interfaces/interface\"\
    \ list\n   entry but not be authorized to create or delete its parent container\n\
    \   (\"/interfaces\").  If the \"/interfaces\" container already exists in\n \
    \  the target datastore, then the effective operation will be \"none\" for\n \
    \  the \"/interfaces\" node if an \"/interfaces/interface\" list entry is\n  \
    \ edited.\n   If the protocol operation would result in the creation of a datastore\n\
    \   node and the user does not have \"create\" access permission for that\n  \
    \ node, the protocol operation is rejected with an \"access-denied\"\n   error.\n\
    \   If the protocol operation would result in the deletion of a datastore\n  \
    \ node and the user does not have \"delete\" access permission for that\n   node,\
    \ the protocol operation is rejected with an \"access-denied\"\n   error.\n  \
    \ If the protocol operation would result in the modification of a\n   datastore\
    \ node and the user does not have \"update\" access permission\n   for that node,\
    \ the protocol operation is rejected with an\n   \"access-denied\" error.\n  \
    \ A \"merge\" or \"replace\" <edit-config> operation may include data nodes\n\
    \   that do not alter portions of the existing datastore.  For example, a\n  \
    \ container or list node may be present for naming purposes but does\n   not actually\
    \ alter the corresponding datastore node.  These unaltered\n   data nodes are\
    \ ignored by the server and do not require any access\n   rights by the client.\n\
    \   A \"merge\" <edit-config> operation may include data nodes but not\n   include\
    \ particular child data nodes that are present in the\n   datastore.  These missing\
    \ data nodes within the scope of a \"merge\"\n   <edit-config> operation are ignored\
    \ by the server and do not require\n   any access rights by the client.\n   The\
    \ contents of specific restricted datastore nodes MUST NOT be\n   exposed in any\
    \ <rpc-error> elements within the reply.\n   An <edit-config> operation may cause\
    \ data nodes to be implicitly\n   created or deleted as an implicit side effect\
    \ of a requested\n   operation.  For example, a YANG when-stmt expression may\
    \ evaluate to\n   a different result, causing data nodes to be deleted, or created\
    \ with\n   default values; or if a data node is created under one branch of a\n\
    \   YANG choice-stmt, then all data nodes under the other branches are\n   implicitly\
    \ removed.  No NACM access rights are required on any data\n   nodes that are\
    \ implicitly changed as a side effect of another allowed\n   operation.\n"
- title: 3.2.6.  <copy-config> Operation
  contents:
  - "3.2.6.  <copy-config> Operation\n   Access control for the <copy-config> protocol\
    \ operation requires\n   special consideration because the administrator may be\
    \ replacing the\n   entire target datastore.\n   If the source of the <copy-config>\
    \ protocol operation is the running\n   configuration datastore and the target\
    \ is the startup configuration\n   datastore, the client is only required to have\
    \ permission to execute\n   the <copy-config> protocol operation.\n   Otherwise:\n\
    \   o  If the source of the <copy-config> operation is a datastore, then\n   \
    \   data nodes to which the client does not have read access are\n      silently\
    \ omitted.\n   o  If the target of the <copy-config> operation is a datastore,\
    \ the\n      client needs access to the modified nodes.  Specifically:\n     \
    \ *  If the protocol operation would result in the creation of a\n         datastore\
    \ node and the user does not have \"create\" access\n         permission for that\
    \ node, the protocol operation is rejected\n         with an \"access-denied\"\
    \ error.\n      *  If the protocol operation would result in the deletion of a\n\
    \         datastore node and the user does not have \"delete\" access\n      \
    \   permission for that node, the protocol operation is rejected\n         with\
    \ an \"access-denied\" error.\n      *  If the protocol operation would result\
    \ in the modification of a\n         datastore node and the user does not have\
    \ \"update\" access\n         permission for that node, the protocol operation\
    \ is rejected\n         with an \"access-denied\" error.\n"
- title: 3.2.7.  <delete-config> Operation
  contents:
  - "3.2.7.  <delete-config> Operation\n   Access to the <delete-config> protocol\
    \ operation is denied by\n   default.  The \"exec-default\" leaf does not apply\
    \ to this protocol\n   operation.  Access control rules must be explicitly configured\
    \ to\n   allow invocation by a non-recovery session.\n"
- title: 3.2.8.  <commit> Operation
  contents:
  - "3.2.8.  <commit> Operation\n   The server MUST determine the exact nodes in the\
    \ running\n   configuration datastore that are actually different and only check\n\
    \   \"create\", \"update\", and \"delete\" access permissions for this set of\n\
    \   nodes, which could be empty.\n   For example, if a session can read the entire\
    \ datastore but only\n   change one leaf, that session needs to be able to edit\
    \ and commit\n   that one leaf.\n"
- title: 3.2.9.  <discard-changes> Operation
  contents:
  - "3.2.9.  <discard-changes> Operation\n   The client is only required to have permission\
    \ to execute the\n   <discard-changes> protocol operation.  No datastore permissions\
    \ are\n   needed.\n"
- title: 3.2.10.  <kill-session> Operation
  contents:
  - "3.2.10.  <kill-session> Operation\n   The <kill-session> operation does not directly\
    \ alter a datastore.\n   However, it allows one session to disrupt another session\
    \ that is\n   editing a datastore.\n   Access to the <kill-session> protocol operation\
    \ is denied by default.\n   The \"exec-default\" leaf does not apply to this protocol\
    \ operation.\n   Access control rules must be explicitly configured to allow\n\
    \   invocation by a non-recovery session.\n"
- title: 3.3.  Model Components
  contents:
  - "3.3.  Model Components\n   This section defines the conceptual components related\
    \ to the access\n   control model.\n"
- title: 3.3.1.  Users
  contents:
  - "3.3.1.  Users\n   A \"user\" is the conceptual entity that is associated with\
    \ the access\n   permissions granted to a particular session.  A user is identified\
    \ by\n   a string that is unique within the server.\n   As described in [RFC6241],\
    \ the username string is derived from the\n   transport layer during session establishment.\
    \  If the transport layer\n   cannot authenticate the user, the session is terminated.\n"
- title: 3.3.2.  Groups
  contents:
  - "3.3.2.  Groups\n   Access to a specific NETCONF protocol operation is granted\
    \ to a\n   session.  The session is associated with a group (i.e., not with\n\
    \   a user).\n   A group is identified by its name.  All group names are unique\
    \ within\n   the server.\n   Access control is applied at the level of groups.\
    \  A group contains\n   zero or more group members.\n   A group member is identified\
    \ by a username string.\n   The same user can be a member of multiple groups.\n"
- title: 3.3.3.  Emergency Recovery Session
  contents:
  - "3.3.3.  Emergency Recovery Session\n   The server MAY support a recovery session\
    \ mechanism, which will\n   bypass all access control enforcement.  This is useful\
    \ for\n   restricting initial access and repairing a broken access control\n \
    \  configuration.\n"
- title: 3.3.4.  Global Enforcement Controls
  contents:
  - "3.3.4.  Global Enforcement Controls\n   There are five global controls that are\
    \ used to help control how\n   access control is enforced.\n"
- title: 3.3.4.1.  enable-nacm Switch
  contents:
  - "3.3.4.1.  enable-nacm Switch\n   A global \"enable-nacm\" on/off switch is provided\
    \ to enable or disable\n   all access control enforcement.  When this global switch\
    \ is set to\n   \"true\", all requests are checked against the access control\
    \ rules and\n   only permitted if configured to allow the specific access request.\n\
    \   When this global switch is set to \"false\", all access requests are\n   permitted.\n"
- title: 3.3.4.2.  read-default Switch
  contents:
  - "3.3.4.2.  read-default Switch\n   An on/off \"read-default\" switch is provided\
    \ to enable or disable\n   default access to receive data in replies and notifications.\
    \  When\n   the \"enable-nacm\" global switch is set to \"true\", this global\
    \ switch\n   is relevant if no matching access control rule is found to explicitly\n\
    \   permit or deny read access to the requested datastore data or\n   notification\
    \ event type.\n   When this global switch is set to \"permit\" and no matching\
    \ access\n   control rule is found for the datastore read or notification event\n\
    \   requested, access is permitted.\n   When this global switch is set to \"deny\"\
    \ and no matching access\n   control rule is found for the datastore read or notification\
    \ event\n   requested, access is denied.  This means that the requested data is\n\
    \   not sent to the client.  See step 11 in Section 3.4.5 for details.\n"
- title: 3.3.4.3.  write-default Switch
  contents:
  - "3.3.4.3.  write-default Switch\n   An on/off \"write-default\" switch is provided\
    \ to enable or disable\n   default access to alter configuration data.  When the\
    \ \"enable-nacm\"\n   global switch is set to \"true\", this global switch is\
    \ relevant if no\n   matching access control rule is found to explicitly permit\
    \ or deny\n   write access to the requested datastore data.\n   When this global\
    \ switch is set to \"permit\" and no matching access\n   control rule is found\
    \ for the datastore write requested, access is\n   permitted.\n   When this global\
    \ switch is set to \"deny\" and no matching access\n   control rule is found for\
    \ the datastore write requested, access is\n   denied.  See step 12 in Section\
    \ 3.4.5 for details.\n"
- title: 3.3.4.4.  exec-default Switch
  contents:
  - "3.3.4.4.  exec-default Switch\n   An on/off \"exec-default\" switch is provided\
    \ to enable or disable\n   default access to execute protocol operations.  When\
    \ the\n   \"enable-nacm\" global switch is set to \"true\", this global switch\
    \ is\n   relevant if no matching access control rule is found to explicitly\n\
    \   permit or deny access to the requested NETCONF protocol operation.\n   When\
    \ this global switch is set to \"permit\" and no matching access\n   control rule\
    \ is found for the NETCONF protocol operation requested,\n   access is permitted.\n\
    \   When this global switch is set to \"deny\" and no matching access\n   control\
    \ rule is found for the NETCONF protocol operation requested,\n   access is denied.\
    \  See step 12 in Section 3.4.4 and step 13 in\n   Section 3.4.5 for details.\n"
- title: 3.3.4.5.  enable-external-groups Switch
  contents:
  - "3.3.4.5.  enable-external-groups Switch\n   When this global switch is set to\
    \ \"true\", the group names reported by\n   the transport layer for a session\
    \ are used together with the locally\n   configured group names to determine the\
    \ access control rules for the\n   session.\n   When this switch is set to \"\
    false\", the group names reported by the\n   transport layer are ignored by the\
    \ NACM.\n"
- title: 3.3.5.  Access Control Rules
  contents:
  - "3.3.5.  Access Control Rules\n   There are four types of rules available in the\
    \ NACM:\n   module rule:  controls access for definitions in a specific YANG\n\
    \      module, identified by its name.\n   protocol operation rule:  controls\
    \ access for a specific protocol\n      operation, identified by its YANG module\
    \ and name.\n   data node rule:  controls access for a specific data node and\
    \ its\n      descendants, identified by its path location within the conceptual\n\
    \      XML document for the data node.\n   notification rule:  controls access\
    \ for a specific notification event\n      type, identified by its YANG module\
    \ and name.\n"
- title: 3.4.  Access Control Enforcement Procedures
  contents:
  - "3.4.  Access Control Enforcement Procedures\n   There are six separate phases\
    \ that need to be addressed, four of\n   which are related to the NETCONF message\
    \ processing model\n   (Section 3.1.3):\n   1.  Initial operation\n   2.  Session\
    \ establishment\n   3.  \"access-denied\" error handling\n   4.  Incoming RPC\
    \ message validation\n   5.  Data node access validation\n   6.  Outgoing <notification>\
    \ authorization\n   In addition, the initial startup mode for a NETCONF server,\
    \ session\n   establishment, and \"access-denied\" error-handling procedures also\n\
    \   need to be considered.\n   The server MUST use the access control rules in\
    \ effect at the time it\n   starts processing the message.  The same access control\
    \ rules MUST\n   stay in effect for the processing of the entire message.\n"
- title: 3.4.1.  Initial Operation
  contents:
  - "3.4.1.  Initial Operation\n   Upon the very first startup of the NETCONF server,\
    \ the access control\n   configuration will probably not be present.  If it isn't,\
    \ a server\n   MUST NOT allow any write access to any session role except a recovery\n\
    \   session.\n   Access rules are enforced any time a request is initiated from\
    \ a user\n   session.  Access control is not enforced for server-initiated access\n\
    \   requests, such as the initial load of the running configuration\n   datastore,\
    \ during bootup.\n"
- title: 3.4.2.  Session Establishment
  contents:
  - "3.4.2.  Session Establishment\n   The access control model applies specifically\
    \ to the well-formed XML\n   content transferred between a client and a server\
    \ after session\n   establishment has been completed and after the <hello> exchange\
    \ has\n   been successfully completed.\n   Once session establishment is completed\
    \ and a user has been\n   authenticated, the transport layer reports the username\
    \ and a\n   possibly empty set of group names associated with the user to the\n\
    \   NETCONF server.  The NETCONF server will enforce the access control\n   rules,\
    \ based on the supplied username, group names, and the\n   configuration data\
    \ stored on the server.\n"
- title: 3.4.3.  "access-denied" Error Handling
  contents:
  - "3.4.3.  \"access-denied\" Error Handling\n   The \"access-denied\" error-tag\
    \ is generated when the access control\n   system denies access to either a request\
    \ to invoke a protocol\n   operation or a request to perform a particular access\
    \ operation on\n   the configuration datastore.\n   A server MUST NOT include\
    \ any information the client is not allowed\n   to read in any <error-info> elements\
    \ within the <rpc-error> response.\n"
- title: 3.4.4.  Incoming RPC Message Validation
  contents:
  - "3.4.4.  Incoming RPC Message Validation\n   The diagram below shows the basic\
    \ conceptual structure of the access\n   control processing model for incoming\
    \ NETCONF <rpc> messages within a\n   server.\n              NETCONF server\n\
    \              +------------+\n              |    XML     |\n              | \
    \  message  |\n              | dispatcher |\n              +------------+\n  \
    \                   |\n                     |\n                     V\n      \
    \       +---------------+\n             | <rpc> message |\n             +---------------+\n\
    \               |    |     |\n               |    |     +--------------------------------+\n\
    \               |    +---------------+                      |\n              \
    \ V                    V                      V\n     +------------------+ +--------------------+\
    \ +--------------------+\n     | vendor operation | | standard operation | | standard\
    \ operation |\n     |    <my-edit>     | |   <edit-config>    | |      <unlock>\
    \      |\n     +------------------+ +--------------------+ +--------------------+\n\
    \                 |                 |\n                 |                 |\n\
    \                 V                 V\n                +----------------------+\n\
    \                |    configuration     |\n                |      datastore  \
    \     |\n                +----------------------+\n                          \
    \       Figure 3\n   Access control begins with the message dispatcher.\n   After\
    \ the server validates the <rpc> element and determines the\n   namespace URI\
    \ and the element name of the protocol operation being\n   requested, the server\
    \ verifies that the user is authorized to invoke\n   the protocol operation.\n\
    \   The server MUST separately authorize every protocol operation by\n   following\
    \ these steps:\n   1.   If the \"enable-nacm\" leaf is set to \"false\", then\
    \ the protocol\n        operation is permitted.\n   2.   If the requesting session\
    \ is identified as a recovery session,\n        then the protocol operation is\
    \ permitted.\n   3.   If the requested operation is the NETCONF <close-session>\n\
    \        protocol operation, then the protocol operation is permitted.\n   4.\
    \   Check all the \"group\" entries to see if any of them contain a\n        \"\
    user-name\" entry that equals the username for the session\n        making the\
    \ request.  If the \"enable-external-groups\" leaf is\n        \"true\", add to\
    \ these groups the set of groups provided by the\n        transport layer.\n \
    \  5.   If no groups are found, continue with step 10.\n   6.   Process all rule-list\
    \ entries, in the order they appear in the\n        configuration.  If a rule-list's\
    \ \"group\" leaf-list does not\n        match any of the user's groups, proceed\
    \ to the next rule-list\n        entry.\n   7.   For each rule-list entry found,\
    \ process all rules, in order,\n        until a rule that matches the requested\
    \ access operation is\n        found.  A rule matches if all of the following\
    \ criteria are met:\n        *  The rule's \"module-name\" leaf is \"*\" or equals\
    \ the name of\n           the YANG module where the protocol operation is defined.\n\
    \        *  Either (1) the rule does not have a \"rule-type\" defined or\n   \
    \        (2) the \"rule-type\" is \"protocol-operation\" and the\n           \"\
    rpc-name\" is \"*\" or equals the name of the requested\n           protocol operation.\n\
    \        *  The rule's \"access-operations\" leaf has the \"exec\" bit set or\n\
    \           has the special value \"*\".\n   8.   If a matching rule is found,\
    \ then the \"action\" leaf is checked.\n        If it is equal to \"permit\",\
    \ then the protocol operation is\n        permitted; otherwise, it is denied.\n\
    \   9.   At this point, no matching rule was found in any rule-list\n        entry.\n\
    \   10.  If the requested protocol operation is defined in a YANG module\n   \
    \     advertised in the server capabilities and the \"rpc\" statement\n      \
    \  contains a \"nacm:default-deny-all\" statement, then the protocol\n       \
    \ operation is denied.\n   11.  If the requested protocol operation is the NETCONF\n\
    \        <kill-session> or <delete-config>, then the protocol operation\n    \
    \    is denied.\n   12.  If the \"exec-default\" leaf is set to \"permit\", then\
    \ permit the\n        protocol operation; otherwise, deny the request.\n   If\
    \ the user is not authorized to invoke the protocol operation, then\n   an <rpc-error>\
    \ is generated with the following information:\n   error-tag:  access-denied\n\
    \   error-path:  Identifies the requested protocol operation.  The\n      following\
    \ example represents the <edit-config> protocol operation\n      in the NETCONF\
    \ base namespace:\n         <error-path\n           xmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n             /nc:rpc/nc:edit-config\n         </error-path>\n   If a datastore\
    \ is accessed, either directly or as a side effect of\n   the protocol operation,\
    \ then the server MUST intercept the access\n   operation and make sure that the\
    \ user is authorized to perform the\n   requested access operation on the specified\
    \ data, as defined in\n   Section 3.4.5.\n"
- title: 3.4.5.  Data Node Access Validation
  contents:
  - "3.4.5.  Data Node Access Validation\n   If (1) a data node within a datastore\
    \ is accessed or (2) an action or\n   notification is tied to a data node, then\
    \ the server MUST ensure that\n   the user is authorized to perform the requested\
    \ \"read\", \"create\",\n   \"update\", \"delete\", or \"execute\" access operation\
    \ on the specified\n   data node.\n   If an action is requested to be executed,\
    \ the server MUST ensure that\n   the user is authorized to perform the \"execute\"\
    \ access operation on\n   the requested action.\n   If a notification tied to\
    \ a data node is generated, the server MUST\n   ensure that the user is authorized\
    \ to perform the \"read\" access\n   operation on the requested notification.\n\
    \   The data node access request is authorized by following these steps:\n   1.\
    \   If the \"enable-nacm\" leaf is set to \"false\", then the access\n       \
    \ operation is permitted.\n   2.   If the requesting session is identified as\
    \ a recovery session,\n        then the access operation is permitted.\n   3.\
    \   Check all the \"group\" entries to see if any of them contain a\n        \"\
    user-name\" entry that equals the username for the session\n        making the\
    \ request.  If the \"enable-external-groups\" leaf is\n        \"true\", add to\
    \ these groups the set of groups provided by the\n        transport layer.\n \
    \  4.   If no groups are found, continue with step 9.\n   5.   Process all rule-list\
    \ entries, in the order they appear in the\n        configuration.  If a rule-list's\
    \ \"group\" leaf-list does not\n        match any of the user's groups, proceed\
    \ to the next rule-list\n        entry.\n   6.   For each rule-list entry found,\
    \ process all rules, in order,\n        until a rule that matches the requested\
    \ access operation is\n        found.  A rule matches if all of the following\
    \ criteria are met:\n        *  The rule's \"module-name\" leaf is \"*\" or equals\
    \ the name of\n           the YANG module where the requested data node is defined.\n\
    \        *  Either (1) the rule does not have a \"rule-type\" defined or\n   \
    \        (2) the \"rule-type\" is \"data-node\" and the \"path\" matches the\n\
    \           requested data node, action node, or notification node.  A\n     \
    \      path is considered to match if the requested node is the node\n       \
    \    specified by the path or is a descendant node of the path.\n        *  For\
    \ a \"read\" access operation, the rule's \"access-operations\"\n           leaf\
    \ has the \"read\" bit set or has the special value \"*\".\n        *  For a \"\
    create\" access operation, the rule's\n           \"access-operations\" leaf has\
    \ the \"create\" bit set or has the\n           special value \"*\".\n       \
    \ *  For a \"delete\" access operation, the rule's\n           \"access-operations\"\
    \ leaf has the \"delete\" bit set or has the\n           special value \"*\".\n\
    \        *  For an \"update\" access operation, the rule's\n           \"access-operations\"\
    \ leaf has the \"update\" bit set or has the\n           special value \"*\".\n\
    \        *  For an \"execute\" access operation, the rule's\n           \"access-operations\"\
    \ leaf has the \"exec\" bit set or has the\n           special value \"*\".\n\
    \   7.   If a matching rule is found, then the \"action\" leaf is checked.\n \
    \       If it is equal to \"permit\", then the data node access is\n        permitted;\
    \ otherwise, it is denied.  For a \"read\" access\n        operation, \"denied\"\
    \ means that the requested data is not\n        returned in the reply.\n   8.\
    \   At this point, no matching rule was found in any rule-list\n        entry.\n\
    \   9.   For a \"read\" access operation, if the requested data node is\n    \
    \    defined in a YANG module advertised in the server capabilities\n        and\
    \ the data definition statement contains a\n        \"nacm:default-deny-all\"\
    \ statement, then the requested data node\n        and all its descendants are\
    \ not included in the reply.\n   10.  For a \"write\" access operation, if the\
    \ requested data node is\n        defined in a YANG module advertised in the server\
    \ capabilities\n        and the data definition statement contains a\n       \
    \ \"nacm:default-deny-write\" or a \"nacm:default-deny-all\"\n        statement,\
    \ then the access request is denied for the data node\n        and all its descendants.\n\
    \   11.  For a \"read\" access operation, if the \"read-default\" leaf is set\n\
    \        to \"permit\", then include the requested data node in the reply;\n \
    \       otherwise, do not include the requested data node or any of its\n    \
    \    descendants in the reply.\n   12.  For a \"write\" access operation, if the\
    \ \"write-default\" leaf is\n        set to \"permit\", then permit the data node\
    \ access request;\n        otherwise, deny the request.\n   13.  For an \"execute\"\
    \ access operation, if the \"exec-default\" leaf is\n        set to \"permit\"\
    , then permit the request; otherwise, deny the\n        request.\n"
- title: 3.4.6.  Outgoing <notification> Authorization
  contents:
  - "3.4.6.  Outgoing <notification> Authorization\n   Configuration of access control\
    \ rules specifically for descendant\n   nodes of the notification event type are\
    \ outside the scope of this\n   document.  If the user is authorized to receive\
    \ the notification\n   event type, then it is also authorized to receive any data\
    \ it\n   contains.\n   If the notification is specified within a data subtree,\
    \ as specified\n   in [RFC7950], then read access to the notification is required.\n\
    \   Processing continues as described in Section 3.4.5.\n   The following figure\
    \ shows the conceptual message processing model\n   for outgoing <notification>\
    \ messages.\n                               NETCONF server\n                 \
    \             +------------+\n                              |    XML     |\n \
    \                             |   message  |\n                              |\
    \ generator  |\n                              +------------+\n               \
    \                     ^\n                                    |\n             \
    \               +----------------+\n                            | <notification>\
    \ |\n                            |  generator     |\n                        \
    \    +----------------+\n                                    ^\n             \
    \                       |\n                           +=================+\n  \
    \                         | <notification>  |\n                           |  access\
    \ control |\n                           |  <eventType>    |\n                \
    \           +=================+\n                                    ^\n     \
    \                               |\n                        +------------------------+\n\
    \                        | server instrumentation |\n                        +------------------------+\n\
    \                                  |     ^\n                                 \
    \ V     |\n                         +----------------------+\n               \
    \          |    configuration     |\n                         |      datastore\
    \       |\n                         +----------------------+\n               \
    \                  Figure 4\n   The generation of a notification for a specific\
    \ subscription\n   [RFC5277] is authorized by following these steps:\n   1.  \
    \ If the \"enable-nacm\" leaf is set to \"false\", then the\n        notification\
    \ is permitted.\n   2.   If the session is identified as a recovery session, then\
    \ the\n        notification is permitted.\n   3.   If the notification is the\
    \ NETCONF <replayComplete> or\n        <notificationComplete> event type [RFC5277],\
    \ then the\n        notification is permitted.\n   4.   Check all the \"group\"\
    \ entries to see if any of them contain a\n        \"user-name\" entry that equals\
    \ the username for the session\n        making the request.  If the \"enable-external-groups\"\
    \ leaf is\n        \"true\", add to these groups the set of groups provided by\
    \ the\n        transport layer.\n   5.   If no groups are found, continue with\
    \ step 10.\n   6.   Process all rule-list entries, in the order they appear in\
    \ the\n        configuration.  If a rule-list's \"group\" leaf-list does not\n\
    \        match any of the user's groups, proceed to the next rule-list\n     \
    \   entry.\n   7.   For each rule-list entry found, process all rules, in order,\n\
    \        until a rule that matches the requested access operation is\n       \
    \ found.  A rule matches if all of the following criteria are met:\n        *\
    \  The rule's \"module-name\" leaf is \"*\" or equals the name of\n          \
    \ the YANG module where the notification is defined.\n        *  Either (1) the\
    \ rule does not have a \"rule-type\" defined or\n           (2) the \"rule-type\"\
    \ is \"notification\" and the\n           \"notification-name\" is \"*\" or equals\
    \ the name of the\n           notification.\n        *  The rule's \"access-operations\"\
    \ leaf has the \"read\" bit set or\n           has the special value \"*\".\n\
    \   8.   If a matching rule is found, then the \"action\" leaf is checked.\n \
    \       If it is equal to \"permit\", then permit the notification;\n        otherwise,\
    \ drop the notification for the associated\n        subscription.\n   9.   Otherwise,\
    \ no matching rule was found in any rule-list entry.\n   10.  If the requested\
    \ notification is defined in a YANG module\n        advertised in the server capabilities\
    \ and the \"notification\"\n        statement contains a \"nacm:default-deny-all\"\
    \ statement, then the\n        notification is dropped for the associated subscription.\n\
    \   11.  If the \"read-default\" leaf is set to \"permit\", then permit the\n\
    \        notification; otherwise, drop the notification for the\n        associated\
    \ subscription.\n"
- title: 3.5.  Data Model Definitions
  contents:
  - '3.5.  Data Model Definitions

    '
- title: 3.5.1.  Data Organization
  contents:
  - "3.5.1.  Data Organization\n   The following diagram highlights the contents and\
    \ structure of the\n   NACM YANG module.\n   module: ietf-netconf-acm\n     +--rw\
    \ nacm\n        +--rw enable-nacm?              boolean\n        +--rw read-default?\
    \             action-type\n        +--rw write-default?            action-type\n\
    \        +--rw exec-default?             action-type\n        +--rw enable-external-groups?\
    \   boolean\n        +--ro denied-operations         yang:zero-based-counter32\n\
    \        +--ro denied-data-writes        yang:zero-based-counter32\n        +--ro\
    \ denied-notifications      yang:zero-based-counter32\n        +--rw groups\n\
    \        |  +--rw group* [name]\n        |     +--rw name         group-name-type\n\
    \        |     +--rw user-name*   user-name-type\n        +--rw rule-list* [name]\n\
    \           +--rw name     string\n           +--rw group*   union\n         \
    \  +--rw rule* [name]\n              +--rw name                 string\n     \
    \         +--rw module-name?         union\n              +--rw (rule-type)?\n\
    \              |  +--:(protocol-operation)\n              |  |  +--rw rpc-name?\
    \            union\n              |  +--:(notification)\n              |  |  +--rw\
    \ notification-name?   union\n              |  +--:(data-node)\n             \
    \ |     +--rw path                 node-instance-identifier\n              +--rw\
    \ access-operations?   union\n              +--rw action               action-type\n\
    \              +--rw comment?             string\n"
- title: 3.5.2.  YANG Module
  contents:
  - "3.5.2.  YANG Module\n   The following YANG module specifies the normative NETCONF\
    \ content\n   that MUST be supported by the server.\n   The \"ietf-netconf-acm\"\
    \ YANG module imports typedefs from [RFC6991].\n   <CODE BEGINS> file \"ietf-netconf-acm@2018-02-14.yang\"\
    \n   module ietf-netconf-acm {\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\"\
    ;\n     prefix nacm;\n     import ietf-yang-types {\n       prefix yang;\n   \
    \  }\n     organization\n       \"IETF NETCONF (Network Configuration) Working\
    \ Group\";\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n\
    \        WG List:  <mailto:netconf@ietf.org>\n        Author:   Andy Bierman\n\
    \                  <mailto:andy@yumaworks.com>\n        Author:   Martin Bjorklund\n\
    \                  <mailto:mbj@tail-f.com>\";\n     description\n       \"Network\
    \ Configuration Access Control Model.\n        Copyright (c) 2012 - 2018 IETF\
    \ Trust and the persons\n        identified as authors of the code.  All rights\
    \ reserved.\n        Redistribution and use in source and binary forms, with or\n\
    \        without modification, is permitted pursuant to, and subject\n       \
    \ to the license terms contained in, the Simplified BSD\n        License set forth\
    \ in Section 4.c of the IETF Trust's\n        Legal Provisions Relating to IETF\
    \ Documents\n        (https://trustee.ietf.org/license-info).\n        This version\
    \ of this YANG module is part of RFC 8341; see\n        the RFC itself for full\
    \ legal notices.\";\n     revision \"2018-02-14\" {\n       description\n    \
    \     \"Added support for YANG 1.1 actions and notifications tied to\n       \
    \   data nodes.  Clarified how NACM extensions can be used by\n          other\
    \ data models.\";\n       reference\n         \"RFC 8341: Network Configuration\
    \ Access Control Model\";\n     }\n     revision \"2012-02-22\" {\n       description\n\
    \         \"Initial version.\";\n       reference\n         \"RFC 6536: Network\
    \ Configuration Protocol (NETCONF)\n                    Access Control Model\"\
    ;\n     }\n     /*\n      * Extension statements\n      */\n     extension default-deny-write\
    \ {\n       description\n         \"Used to indicate that the data model node\n\
    \          represents a sensitive security system parameter.\n          If present,\
    \ the NETCONF server will only allow the designated\n          'recovery session'\
    \ to have write access to the node.  An\n          explicit access control rule\
    \ is required for all other users.\n          If the NACM module is used, then\
    \ it must be enabled (i.e.,\n          /nacm/enable-nacm object equals 'true'),\
    \ or this extension\n          is ignored.\n          The 'default-deny-write'\
    \ extension MAY appear within a data\n          definition statement.  It is ignored\
    \ otherwise.\";\n     }\n     extension default-deny-all {\n       description\n\
    \         \"Used to indicate that the data model node\n          controls a very\
    \ sensitive security system parameter.\n          If present, the NETCONF server\
    \ will only allow the designated\n          'recovery session' to have read, write,\
    \ or execute access to\n          the node.  An explicit access control rule is\
    \ required for all\n          other users.\n          If the NACM module is used,\
    \ then it must be enabled (i.e.,\n          /nacm/enable-nacm object equals 'true'),\
    \ or this extension\n          is ignored.\n          The 'default-deny-all' extension\
    \ MAY appear within a data\n          definition statement, 'rpc' statement, or\
    \ 'notification'\n          statement.  It is ignored otherwise.\";\n     }\n\
    \     /*\n      * Derived types\n      */\n     typedef user-name-type {\n   \
    \    type string {\n         length \"1..max\";\n       }\n       description\n\
    \         \"General-purpose username string.\";\n     }\n     typedef matchall-string-type\
    \ {\n       type string {\n         pattern '\\*';\n       }\n       description\n\
    \         \"The string containing a single asterisk '*' is used\n          to\
    \ conceptually represent all possible values\n          for the particular leaf\
    \ using this data type.\";\n     }\n     typedef access-operations-type {\n  \
    \     type bits {\n         bit create {\n           description\n           \
    \  \"Any protocol operation that creates a\n              new data node.\";\n\
    \         }\n         bit read {\n           description\n             \"Any protocol\
    \ operation or notification that\n              returns the value of a data node.\"\
    ;\n         }\n         bit update {\n           description\n             \"\
    Any protocol operation that alters an existing\n              data node.\";\n\
    \         }\n         bit delete {\n           description\n             \"Any\
    \ protocol operation that removes a data node.\";\n         }\n         bit exec\
    \ {\n           description\n             \"Execution access to the specified\
    \ protocol operation.\";\n         }\n       }\n       description\n         \"\
    Access operation.\";\n     }\n     typedef group-name-type {\n       type string\
    \ {\n         length \"1..max\";\n         pattern '[^\\*].*';\n       }\n   \
    \    description\n         \"Name of administrative group to which\n         \
    \ users can be assigned.\";\n     }\n     typedef action-type {\n       type enumeration\
    \ {\n         enum permit {\n           description\n             \"Requested\
    \ action is permitted.\";\n         }\n         enum deny {\n           description\n\
    \             \"Requested action is denied.\";\n         }\n       }\n       description\n\
    \         \"Action taken by the server when a particular\n          rule matches.\"\
    ;\n     }\n     typedef node-instance-identifier {\n       type yang:xpath1.0;\n\
    \       description\n         \"Path expression used to represent a special\n\
    \          data node, action, or notification instance-identifier\n          string.\n\
    \          A node-instance-identifier value is an\n          unrestricted YANG\
    \ instance-identifier expression.\n          All the same rules as an instance-identifier\
    \ apply,\n          except that predicates for keys are optional.  If a key\n\
    \          predicate is missing, then the node-instance-identifier\n         \
    \ represents all possible server instances for that key.\n          This XML Path\
    \ Language (XPath) expression is evaluated in the\n          following context:\n\
    \             o  The set of namespace declarations are those in scope on\n   \
    \             the leaf element where this type is used.\n             o  The set\
    \ of variable bindings contains one variable,\n                'USER', which contains\
    \ the name of the user of the\n                current session.\n            \
    \ o  The function library is the core function library, but\n                note\
    \ that due to the syntax restrictions of an\n                instance-identifier,\
    \ no functions are allowed.\n             o  The context node is the root node\
    \ in the data tree.\n          The accessible tree includes actions and notifications\
    \ tied\n          to data nodes.\";\n     }\n     /*\n      * Data definition\
    \ statements\n      */\n     container nacm {\n       nacm:default-deny-all;\n\
    \       description\n         \"Parameters for NETCONF access control model.\"\
    ;\n       leaf enable-nacm {\n         type boolean;\n         default \"true\"\
    ;\n         description\n           \"Enables or disables all NETCONF access control\n\
    \            enforcement.  If 'true', then enforcement\n            is enabled.\
    \  If 'false', then enforcement\n            is disabled.\";\n       }\n     \
    \  leaf read-default {\n         type action-type;\n         default \"permit\"\
    ;\n         description\n           \"Controls whether read access is granted\
    \ if\n            no appropriate rule is found for a\n            particular read\
    \ request.\";\n       }\n       leaf write-default {\n         type action-type;\n\
    \         default \"deny\";\n         description\n           \"Controls whether\
    \ create, update, or delete access\n            is granted if no appropriate rule\
    \ is found for a\n            particular write request.\";\n       }\n       leaf\
    \ exec-default {\n         type action-type;\n         default \"permit\";\n \
    \        description\n           \"Controls whether exec access is granted if\
    \ no appropriate\n            rule is found for a particular protocol operation\
    \ request.\";\n       }\n       leaf enable-external-groups {\n         type boolean;\n\
    \         default \"true\";\n         description\n           \"Controls whether\
    \ the server uses the groups reported by the\n            NETCONF transport layer\
    \ when it assigns the user to a set of\n            NACM groups.  If this leaf\
    \ has the value 'false', any group\n            names reported by the transport\
    \ layer are ignored by the\n            server.\";\n       }\n       leaf denied-operations\
    \ {\n         type yang:zero-based-counter32;\n         config false;\n      \
    \   mandatory true;\n         description\n           \"Number of times since\
    \ the server last restarted that a\n            protocol operation request was\
    \ denied.\";\n       }\n       leaf denied-data-writes {\n         type yang:zero-based-counter32;\n\
    \         config false;\n         mandatory true;\n         description\n    \
    \       \"Number of times since the server last restarted that a\n           \
    \ protocol operation request to alter\n            a configuration datastore was\
    \ denied.\";\n       }\n       leaf denied-notifications {\n         type yang:zero-based-counter32;\n\
    \         config false;\n         mandatory true;\n         description\n    \
    \       \"Number of times since the server last restarted that\n            a\
    \ notification was dropped for a subscription because\n            access to the\
    \ event type was denied.\";\n       }\n       container groups {\n         description\n\
    \           \"NETCONF access control groups.\";\n         list group {\n     \
    \      key name;\n           description\n             \"One NACM group entry.\
    \  This list will only contain\n              configured entries, not any entries\
    \ learned from\n              any transport protocols.\";\n           leaf name\
    \ {\n             type group-name-type;\n             description\n          \
    \     \"Group name associated with this entry.\";\n           }\n           leaf-list\
    \ user-name {\n             type user-name-type;\n             description\n \
    \              \"Each entry identifies the username of\n                a member\
    \ of the group associated with\n                this entry.\";\n           }\n\
    \         }\n       }\n       list rule-list {\n         key name;\n         ordered-by\
    \ user;\n         description\n           \"An ordered collection of access control\
    \ rules.\";\n         leaf name {\n           type string {\n             length\
    \ \"1..max\";\n           }\n           description\n             \"Arbitrary\
    \ name assigned to the rule-list.\";\n         }\n         leaf-list group {\n\
    \           type union {\n             type matchall-string-type;\n          \
    \   type group-name-type;\n           }\n           description\n            \
    \ \"List of administrative groups that will be\n              assigned the associated\
    \ access rights\n              defined by the 'rule' list.\n              The\
    \ string '*' indicates that all groups apply to the\n              entry.\";\n\
    \         }\n         list rule {\n           key name;\n           ordered-by\
    \ user;\n           description\n             \"One access control rule.\n   \
    \           Rules are processed in user-defined order until a match is\n     \
    \         found.  A rule matches if 'module-name', 'rule-type', and\n        \
    \      'access-operations' match the request.  If a rule\n              matches,\
    \ the 'action' leaf determines whether or not\n              access is granted.\"\
    ;\n           leaf name {\n             type string {\n               length \"\
    1..max\";\n             }\n             description\n               \"Arbitrary\
    \ name assigned to the rule.\";\n           }\n           leaf module-name {\n\
    \             type union {\n               type matchall-string-type;\n      \
    \         type string;\n             }\n             default \"*\";\n        \
    \     description\n               \"Name of the module associated with this rule.\n\
    \                This leaf matches if it has the value '*' or if the\n       \
    \         object being accessed is defined in the module with the\n          \
    \      specified module name.\";\n           }\n           choice rule-type {\n\
    \             description\n               \"This choice matches if all leafs present\
    \ in the rule\n                match the request.  If no leafs are present, the\n\
    \                choice matches all requests.\";\n             case protocol-operation\
    \ {\n               leaf rpc-name {\n                 type union {\n         \
    \          type matchall-string-type;\n                   type string;\n     \
    \            }\n                 description\n                   \"This leaf matches\
    \ if it has the value '*' or if\n                    its value equals the requested\
    \ protocol operation\n                    name.\";\n               }\n       \
    \      }\n             case notification {\n               leaf notification-name\
    \ {\n                 type union {\n                   type matchall-string-type;\n\
    \                   type string;\n                 }\n                 description\n\
    \                   \"This leaf matches if it has the value '*' or if its\n  \
    \                  value equals the requested notification name.\";\n        \
    \       }\n             }\n             case data-node {\n               leaf\
    \ path {\n                 type node-instance-identifier;\n                 mandatory\
    \ true;\n                 description\n                   \"Data node instance-identifier\
    \ associated with the\n                    data node, action, or notification\
    \ controlled by\n                    this rule.\n                    Configuration\
    \ data or state data\n                    instance-identifiers start with a top-level\n\
    \                    data node.  A complete instance-identifier is\n         \
    \           required for this type of path value.\n                    The special\
    \ value '/' refers to all possible\n                    datastore contents.\"\
    ;\n               }\n             }\n           }\n           leaf access-operations\
    \ {\n             type union {\n               type matchall-string-type;\n  \
    \             type access-operations-type;\n             }\n             default\
    \ \"*\";\n             description\n               \"Access operations associated\
    \ with this rule.\n                This leaf matches if it has the value '*' or\
    \ if the\n                bit corresponding to the requested operation is set.\"\
    ;\n           }\n           leaf action {\n             type action-type;\n  \
    \           mandatory true;\n             description\n               \"The access\
    \ control action associated with the\n                rule.  If a rule has been\
    \ determined to match a\n                particular request, then this object\
    \ is used\n                to determine whether to permit or deny the\n      \
    \          request.\";\n           }\n           leaf comment {\n            \
    \ type string;\n             description\n               \"A textual description\
    \ of the access rule.\";\n           }\n         }\n       }\n     }\n   }\n \
    \  <CODE ENDS>\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   This document reuses the URI for \"ietf-netconf-acm\"\
    \ in the \"IETF XML\n   Registry\".\n   This document updates the module registration\
    \ in the \"YANG Module\n   Names\" registry to reference this RFC instead of RFC\
    \ 6536 for\n   \"ietf-netconf-acm\".  Following the format in [RFC6020], the following\n\
    \   has been registered.\n        Name: ietf-netconf-acm\n        Namespace: urn:ietf:params:xml:ns:yang:ietf-netconf-acm\n\
    \        Prefix: nacm\n        Reference: RFC 8341\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The YANG module specified in this document defines\
    \ a schema for data\n   that is designed to be accessed via network management\
    \ protocols such\n   as NETCONF [RFC6241] or RESTCONF [RFC8040].  The lowest NETCONF\
    \ layer\n   is the secure transport layer, and the mandatory-to-implement secure\n\
    \   transport is Secure Shell (SSH) [RFC6242].  The lowest RESTCONF layer\n  \
    \ is HTTPS, and the mandatory-to-implement secure transport is TLS\n   [RFC5246].\n\
    \   The NETCONF access control model [RFC8341] provides the means to\n   restrict\
    \ access for particular NETCONF or RESTCONF users to a\n   preconfigured subset\
    \ of all available NETCONF or RESTCONF protocol\n   operations and content.\n\
    \   There is a risk related to the lack of access control enforcement for\n  \
    \ the RESTCONF OPTIONS and PATCH methods.  The risk here is that the\n   response\
    \ to OPTIONS and PATCH may vary based on the presence or\n   absence of a resource\
    \ corresponding to the URL's path.  If this is\n   the case, then it can be used\
    \ to trivially probe for the presence or\n   absence of values within a tree.\
    \  Therefore, a server MUST NOT vary\n   its responses based on the existence\
    \ of the underlying resource,\n   which would indicate the presence or absence\
    \ of resource instances.\n   In particular, servers should not expose any instance\
    \ information\n   before ensuring that the client has the necessary access permissions\n\
    \   to obtain that information.  In such cases, servers are expected to\n   always\
    \ return the \"access-denied\" error response.\n   There are a number of data\
    \ nodes defined in this YANG module that are\n   writable/creatable/deletable\
    \ (i.e., config true, which is the\n   default).  These data nodes may be considered\
    \ sensitive or vulnerable\n   in some network environments.  Write operations\
    \ (e.g., edit-config)\n   to these data nodes without proper protection can have\
    \ a negative\n   effect on network operations.  These are the subtrees and data\
    \ nodes\n   and their sensitivity/vulnerability:\n   o  /nacm: The entire /nacm\
    \ subtree is related to security.  Refer to\n      the following sections for\
    \ more details.\n   This section highlights the issues for an administrator to\
    \ consider\n   when configuring a NETCONF server with the NACM.\n"
- title: 5.1.  NACM Configuration and Monitoring Considerations
  contents:
  - "5.1.  NACM Configuration and Monitoring Considerations\n   Configuration of the\
    \ access control system is highly sensitive to\n   system security.  A server\
    \ may choose not to allow any user\n   configuration to some portions of it, such\
    \ as the global security\n   level or the groups that allowed access to system\
    \ resources.\n   By default, NACM enforcement is enabled.  By default, \"read\"\
    \ access\n   to all datastore contents is enabled (unless \"nacm:default-deny-all\"\
    \n   is specified for the data definition), and \"exec\" access is enabled\n \
    \  for safe protocol operations.  An administrator needs to ensure that\n   the\
    \ NACM is enabled and also decide if the default access parameters\n   are set\
    \ appropriately.  Make sure that the following data nodes are\n   properly configured:\n\
    \   o  /nacm/enable-nacm (default \"true\")\n   o  /nacm/read-default (default\
    \ \"permit\")\n   o  /nacm/write-default (default \"deny\")\n   o  /nacm/exec-default\
    \ (default \"permit\")\n   An administrator needs to restrict write access to\
    \ all configurable\n   objects within this data model.\n   If write access is\
    \ allowed for configuration of access control rules,\n   then care needs to be\
    \ taken not to disrupt the access control\n   enforcement.  For example, if the\
    \ NACM access control rules are\n   edited directly within the running configuration\
    \ datastore (i.e.,\n   :writable-running capability is supported and used), then\
    \ care needs\n   to be taken not to allow unintended access while the edits are\
    \ being\n   done.\n   An administrator needs to make sure that the translation\
    \ from a\n   transport- or implementation-dependent user identity to a NACM\n\
    \   username is unique and correct.  This requirement is specified in\n   detail\
    \ in Section 2.2 of [RFC6241].\n   An administrator needs to be aware that the\
    \ YANG data structures\n   representing access control rules (/nacm/rule-list\
    \ and\n   /nacm/rule-list/rule) are ordered by the client.  The server will\n\
    \   evaluate the access control rules according to their relative\n   conceptual\
    \ order within the running configuration datastore.\n   Note that the /nacm/groups\
    \ data structure contains the administrative\n   group names used by the server.\
    \  These group names may be configured\n   locally and/or provided through an\
    \ external protocol, such as RADIUS\n   [RFC2865] [RFC5607].\n   An administrator\
    \ needs to be aware of the security properties of any\n   external protocol used\
    \ by the transport layer to determine group\n   names.  For example, if this protocol\
    \ does not protect against\n   man-in-the-middle attacks, an attacker might be\
    \ able to inject group\n   names that are configured in the NACM so that a user\
    \ gets more\n   permissions than it should.  In such cases, the administrator\
    \ may\n   wish to disable the usage of such group names by setting\n   /nacm/enable-external-groups\
    \ to \"false\".\n   Some of the readable data nodes in this YANG module may be\
    \ considered\n   sensitive or vulnerable in some network environments.  It is\
    \ thus\n   important to control read access (e.g., via get, get-config, or\n \
    \  notification) to these data nodes.  These are the subtrees and data\n   nodes\
    \ and their sensitivity/vulnerability:\n   o  /nacm/enable-nacm\n   o  /nacm/read-default\n\
    \   o  /nacm/write-default\n   o  /nacm/exec-default\n   o  /nacm/enable-external-groups\n\
    \   o  /nacm/groups\n   o  /nacm/rule-list\n   An administrator needs to restrict\
    \ read access to the above-listed\n   objects within this data model, as they\
    \ reveal access control\n   configuration that could be considered sensitive.\n"
- title: 5.2.  General Configuration Issues
  contents:
  - "5.2.  General Configuration Issues\n   There is a risk that invocation of non-standard\
    \ protocol operations\n   will have undocumented side effects.  An administrator\
    \ needs to\n   construct access control rules such that the configuration datastore\n\
    \   is protected from such side effects.\n   It is possible for a session with\
    \ some write access (e.g., allowed to\n   invoke <edit-config>), but without any\
    \ access to a particular\n   datastore subtree containing sensitive data, to determine\
    \ the\n   presence or non-presence of that data.  This can be done by\n   repeatedly\
    \ issuing some sort of edit request (create, update, or\n   delete) and possibly\
    \ receiving \"access-denied\" errors in response.\n   These \"fishing\" attacks\
    \ can identify the presence or non-presence of\n   specific sensitive data even\
    \ without the \"error-path\" field being\n   present within the <rpc-error> response.\n\
    \   It may be possible for the set of NETCONF capabilities on the server\n   to\
    \ change over time.  If so, then there is a risk that new protocol\n   operations,\
    \ notifications, and/or datastore content have been added\n   to the device. \
    \ An administrator needs to be sure that the access\n   control rules are correct\
    \ for the new content in this case.\n   Mechanisms to detect NETCONF capability\
    \ changes on a specific device\n   are outside the scope of this document.\n \
    \  It is possible that the data model definition itself (e.g., a YANG\n   when-stmt)\
    \ will help an unauthorized session determine the presence\n   or even value of\
    \ sensitive data nodes by examining the presence and\n   values of different data\
    \ nodes.\n   It is possible that the data model definition itself (e.g., a YANG\n\
    \   when-stmt or choice-stmt) will allow a session to implicitly create\n   or\
    \ delete nodes that the session does not have write access to as an\n   implicit\
    \ side effect from the processing of an allowed <edit-config>\n   operation.\n\
    \   There is a risk that non-standard protocol operations, or even the\n   standard\
    \ <get> protocol operation, may return data that \"aliases\" or\n   \"copies\"\
    \ sensitive data from a different data object.  There may\n   simply be multiple\
    \ data model definitions that expose or even\n   configure the same underlying\
    \ system instrumentation.\n   A data model may contain external keys (e.g., YANG\
    \ leafref), which\n   expose values from a different data structure.  An administrator\n\
    \   needs to be aware of sensitive data models that contain leafref\n   nodes.\
    \  This entails finding all the leafref objects that \"point\" at\n   the sensitive\
    \ data (i.e., \"path-stmt\" values) that implicitly or\n   explicitly includes\
    \ the sensitive data node.\n   It is beyond the scope of this document to define\
    \ access control\n   enforcement procedures for underlying device instrumentation\
    \ that may\n   exist to support the NETCONF server operation.  An administrator\
    \ can\n   identify each protocol operation that the server provides and decide\n\
    \   if it needs any access control applied to it.\n   This document incorporates\
    \ the optional use of a recovery session\n   mechanism, which can be used to bypass\
    \ access control enforcement in\n   emergencies such as NACM configuration errors\
    \ that disable all access\n   to the server.  The configuration and identification\
    \ of such a\n   recovery session mechanism are implementation specific and are\n\
    \   outside the scope of this document.  An administrator needs to be\n   aware\
    \ of any recovery session mechanisms available on the device and\n   make sure\
    \ that they are used appropriately.\n   It is possible for a session to disrupt\
    \ configuration management,\n   even without any write access to the configuration,\
    \ by locking the\n   datastore.  This may be done to ensure that all or part of\
    \ the\n   configuration remains stable while it is being retrieved, or it may\n\
    \   be done as a \"denial-of-service\" attack.  There is no way for the\n   server\
    \ to know the difference.  An administrator may wish to restrict\n   \"exec\"\
    \ access to the following protocol operations:\n   o  <lock>\n   o  <unlock>\n\
    \   o  <partial-lock>\n   o  <partial-unlock>\n"
- title: 5.3.  Data Model Design Considerations
  contents:
  - "5.3.  Data Model Design Considerations\n   Designers need to clearly identify\
    \ any sensitive data, notifications,\n   or protocol operations defined within\
    \ a YANG module.  For such\n   definitions, a \"nacm:default-deny-write\" or \"\
    nacm:default-deny-all\"\n   statement ought to be present, in addition to a clear\
    \ description of\n   the security risks.\n   Protocol operations need to be properly\
    \ documented by the data model\n   designer so that it is clear to administrators\
    \ what data nodes (if\n   any) are affected by the protocol operation and what\
    \ information (if\n   any) is returned in the <rpc-reply> message.\n   Data models\
    \ ought to be designed so that different access levels for\n   input parameters\
    \ to protocol operations are not required.  The use of\n   generic protocol operations\
    \ should be avoided, and if different\n   access levels are needed, separate protocol\
    \ operations should be\n   defined instead.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246,\
    \ August 2008,\n              <https://www.rfc-editor.org/info/rfc5246>.\n   [RFC5277]\
    \  Chisholm, S. and H. Trevino, \"NETCONF Event\n              Notifications\"\
    , RFC 5277, DOI 10.17487/RFC5277, July 2008,\n              <https://www.rfc-editor.org/info/rfc5277>.\n\
    \   [RFC6020]  Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n   \
    \           the Network Configuration Protocol (NETCONF)\", RFC 6020,\n      \
    \        DOI 10.17487/RFC6020, October 2010,\n              <https://www.rfc-editor.org/info/rfc6020>.\n\
    \   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n  \
    \            and A. Bierman, Ed., \"Network Configuration Protocol\n         \
    \     (NETCONF)\", RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC6242]  Wasserman, M., \"Using the NETCONF Protocol over Secure\n     \
    \         Shell (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011,\n        \
    \      <https://www.rfc-editor.org/info/rfc6242>.\n   [RFC6991]  Schoenwaelder,\
    \ J., Ed., \"Common YANG Data Types\",\n              RFC 6991, DOI 10.17487/RFC6991,\
    \ July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n   [RFC7230]\
    \  Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer\
    \ Protocol (HTTP/1.1): Message Syntax and Routing\",\n              RFC 7230,\
    \ DOI 10.17487/RFC7230, June 2014,\n              <https://www.rfc-editor.org/info/rfc7230>.\n\
    \   [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n\
    \              RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n\
    \   [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n       \
    \       Protocol\", RFC 8040, DOI 10.17487/RFC8040, January 2017,\n          \
    \    <https://www.rfc-editor.org/info/rfc8040>.\n   [RFC8174]  Leiba, B., \"Ambiguity\
    \ of Uppercase vs Lowercase in\n              RFC 2119 Key Words\", BCP 14, RFC\
    \ 8174,\n              DOI 10.17487/RFC8174, May 2017,\n              <https://www.rfc-editor.org/info/rfc8174>.\n\
    \   [RFC8342]  Bjorklund, M., Schoenwaelder, J., Shafer, P., Watsen, K.,\n   \
    \           and R. Wilton, \"Network Management Datastore Architecture\n     \
    \         (NMDA)\", RFC 8342, DOI 10.17487/RFC8342, March 2018,\n            \
    \  <https://www.rfc-editor.org/info/rfc8342>.\n   [W3C.REC-xml-20081126]\n   \
    \           Bray, T., Paoli, J., Sperberg-McQueen, M., Maler, E., and\n      \
    \        F. Yergeau, \"Extensible Markup Language (XML) 1.0\n              (Fifth\
    \ Edition)\", World Wide Web Consortium Recommendation\n              REC-xml-20081126,\
    \ November 2008,\n              <https://www.w3.org/TR/2008/REC-xml-20081126>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC2865]  Rigney, C., Willens, S., Rubens,\
    \ A., and W. Simpson,\n              \"Remote Authentication Dial In User Service\
    \ (RADIUS)\",\n              RFC 2865, DOI 10.17487/RFC2865, June 2000,\n    \
    \          <https://www.rfc-editor.org/info/rfc2865>.\n   [RFC5607]  Nelson, D.\
    \ and G. Weber, \"Remote Authentication Dial-In\n              User Service (RADIUS)\
    \ Authorization for Network Access\n              Server (NAS) Management\", RFC\
    \ 5607, DOI 10.17487/RFC5607,\n              July 2009, <https://www.rfc-editor.org/info/rfc5607>.\n\
    \   [YANG-SEC] IETF, \"YANG Security Guidelines\", <https://trac.ietf.org/\n \
    \             trac/ops/wiki/yang-security-guidelines>.\n"
- title: Appendix A.  Usage Examples
  contents:
  - "Appendix A.  Usage Examples\n   The following XML [W3C.REC-xml-20081126] snippets\
    \ are provided as\n   examples only, to demonstrate how the NACM can be configured\
    \ to\n   perform some access control tasks.\n"
- title: A.1.  <groups> Example
  contents:
  - "A.1.  <groups> Example\n   There needs to be at least one <group> entry in order\
    \ for any of the\n   access control rules to be useful.\n   The following XML\
    \ shows arbitrary groups and is not intended to\n   represent any particular use\
    \ case.\n   <nacm xmlns=\"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\">\n  \
    \   <groups>\n       <group>\n         <name>admin</name>\n         <user-name>admin</user-name>\n\
    \         <user-name>andy</user-name>\n       </group>\n       <group>\n     \
    \    <name>limited</name>\n         <user-name>wilma</user-name>\n         <user-name>bam-bam</user-name>\n\
    \       </group>\n       <group>\n         <name>guest</name>\n         <user-name>guest</user-name>\n\
    \         <user-name>guest@example.com</user-name>\n       </group>\n     </groups>\n\
    \   </nacm>\n   This example shows three groups:\n   admin:  The \"admin\" group\
    \ contains two users named \"admin\" and\n      \"andy\".\n   limited:  The \"\
    limited\" group contains two users named \"wilma\" and\n      \"bam-bam\".\n \
    \  guest:  The \"guest\" group contains two users named \"guest\" and\n      \"\
    guest@example.com\".\n"
- title: A.2.  Module Rule Example
  contents:
  - "A.2.  Module Rule Example\n   Module rules are used to control access to all\
    \ the content defined in\n   a specific module.  A module rule has the \"module-name\"\
    \ leaf set but\n   no nodes from the \"rule-type\" choice set.\n   <nacm xmlns=\"\
    urn:ietf:params:xml:ns:yang:ietf-netconf-acm\">\n     <rule-list>\n       <name>guest-acl</name>\n\
    \       <group>guest</group>\n       <rule>\n         <name>deny-ncm</name>\n\
    \         <module-name>ietf-netconf-monitoring</module-name>\n         <access-operations>*</access-operations>\n\
    \         <action>deny</action>\n         <comment>\n             Do not allow\
    \ guests any access to the NETCONF\n             monitoring information.\n   \
    \      </comment>\n       </rule>\n     </rule-list>\n     <rule-list>\n     \
    \  <name>limited-acl</name>\n       <group>limited</group>\n       <rule>\n  \
    \       <name>permit-ncm</name>\n         <module-name>ietf-netconf-monitoring</module-name>\n\
    \         <access-operations>read</access-operations>\n         <action>permit</action>\n\
    \         <comment>\n             Allow read access to the NETCONF\n         \
    \    monitoring information.\n         </comment>\n       </rule>\n       <rule>\n\
    \         <name>permit-exec</name>\n         <module-name>*</module-name>\n  \
    \       <access-operations>exec</access-operations>\n         <action>permit</action>\n\
    \         <comment>\n             Allow invocation of the\n             supported\
    \ server operations.\n         </comment>\n       </rule>\n     </rule-list>\n\
    \     <rule-list>\n       <name>admin-acl</name>\n       <group>admin</group>\n\
    \       <rule>\n         <name>permit-all</name>\n         <module-name>*</module-name>\n\
    \         <access-operations>*</access-operations>\n         <action>permit</action>\n\
    \         <comment>\n             Allow the 'admin' group complete access to all\n\
    \             operations and data.\n         </comment>\n       </rule>\n    \
    \ </rule-list>\n   </nacm>\n   This example shows four module rules:\n   deny-ncm:\
    \  This rule prevents the \"guest\" group from reading any\n      monitoring information\
    \ in the \"ietf-netconf-monitoring\" YANG\n      module.\n   permit-ncm:  This\
    \ rule allows the \"limited\" group to read the\n      \"ietf-netconf-monitoring\"\
    \ YANG module.\n   permit-exec:  This rule allows the \"limited\" group to invoke\
    \ any\n      protocol operation supported by the server.\n   permit-all:  This\
    \ rule allows the \"admin\" group complete access to\n      all content in the\
    \ server.  No subsequent rule will match for the\n      \"admin\" group because\
    \ of this module rule.\n"
- title: A.3.  Protocol Operation Rule Example
  contents:
  - "A.3.  Protocol Operation Rule Example\n   Protocol operation rules are used to\
    \ control access to a specific\n   protocol operation.\n   <nacm xmlns=\"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\"\
    >\n     <rule-list>\n       <name>guest-limited-acl</name>\n       <group>limited</group>\n\
    \       <group>guest</group>\n       <rule>\n         <name>deny-kill-session</name>\n\
    \         <module-name>ietf-netconf</module-name>\n         <rpc-name>kill-session</rpc-name>\n\
    \         <access-operations>exec</access-operations>\n         <action>deny</action>\n\
    \         <comment>\n           Do not allow the 'limited' group or the 'guest'\
    \ group\n           to kill another session.\n         </comment>\n       </rule>\n\
    \       <rule>\n         <name>deny-delete-config</name>\n         <module-name>ietf-netconf</module-name>\n\
    \         <rpc-name>delete-config</rpc-name>\n         <access-operations>exec</access-operations>\n\
    \         <action>deny</action>\n         <comment>\n           Do not allow the\
    \ 'limited' group or the 'guest' group\n           to delete any configurations.\n\
    \         </comment>\n       </rule>\n     </rule-list>\n     <rule-list>\n  \
    \     <name>limited-acl</name>\n       <group>limited</group>\n       <rule>\n\
    \         <name>permit-edit-config</name>\n         <module-name>ietf-netconf</module-name>\n\
    \         <rpc-name>edit-config</rpc-name>\n         <access-operations>exec</access-operations>\n\
    \         <action>permit</action>\n         <comment>\n           Allow the 'limited'\
    \ group to edit the configuration.\n         </comment>\n       </rule>\n    \
    \ </rule-list>\n   </nacm>\n   This example shows three protocol operation rules:\n\
    \   deny-kill-session:  This rule prevents the \"limited\" group or the\n    \
    \  \"guest\" group from invoking the NETCONF <kill-session> protocol\n      operation.\n\
    \   deny-delete-config:  This rule prevents the \"limited\" group or the\n   \
    \   \"guest\" group from invoking the NETCONF <delete-config> protocol\n     \
    \ operation.\n   permit-edit-config:  This rule allows the \"limited\" group to\
    \ invoke\n      the NETCONF <edit-config> protocol operation.  This rule will\
    \ have\n      no real effect unless the \"exec-default\" leaf is set to \"deny\"\
    .\n"
- title: A.4.  Data Node Rule Example
  contents:
  - "A.4.  Data Node Rule Example\n   Data node rules are used to control access to\
    \ specific (config and\n   non-config) data nodes within the NETCONF content provided\
    \ by the\n   server.\n   <nacm xmlns=\"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\"\
    >\n     <rule-list>\n       <name>guest-acl</name>\n       <group>guest</group>\n\
    \       <rule>\n         <name>deny-nacm</name>\n         <path xmlns:n=\"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\"\
    >\n           /n:nacm\n         </path>\n         <access-operations>*</access-operations>\n\
    \         <action>deny</action>\n         <comment>\n           Deny the 'guest'\
    \ group any access to the /nacm data.\n         </comment>\n       </rule>\n \
    \    </rule-list>\n     <rule-list>\n       <name>limited-acl</name>\n       <group>limited</group>\n\
    \       <rule>\n         <name>permit-acme-config</name>\n         <path xmlns:acme=\"\
    http://example.com/ns/netconf\">\n           /acme:acme-netconf/acme:config-parameters\n\
    \         </path>\n         <access-operations>\n           read create update\
    \ delete\n         </access-operations>\n         <action>permit</action>\n  \
    \       <comment>\n           Allow the 'limited' group complete access to the\
    \ acme\n           NETCONF configuration parameters.  Showing long form\n    \
    \       of 'access-operations' instead of shorthand.\n         </comment>\n  \
    \     </rule>\n     </rule-list>\n     <rule-list>\n       <name>guest-limited-acl</name>\n\
    \       <group>guest</group>\n       <group>limited</group>\n       <rule>\n \
    \        <name>permit-dummy-interface</name>\n         <path xmlns:acme=\"http://example.com/ns/itf\"\
    >\n           /acme:interfaces/acme:interface[acme:name='dummy']\n         </path>\n\
    \         <access-operations>read update</access-operations>\n         <action>permit</action>\n\
    \         <comment>\n           Allow the 'limited' and 'guest' groups read\n\
    \           and update access to the dummy interface.\n         </comment>\n \
    \      </rule>\n     </rule-list>\n     <rule-list>\n       <name>admin-acl</name>\n\
    \       <group>admin</group>\n       <rule>\n         <name>permit-interface</name>\n\
    \         <path xmlns:acme=\"http://example.com/ns/itf\">\n           /acme:interfaces/acme:interface\n\
    \         </path>\n         <access-operations>*</access-operations>\n       \
    \  <action>permit</action>\n         <comment>\n           Allow the 'admin' group\
    \ full access to all acme interfaces.\n         </comment>\n       </rule>\n \
    \    </rule-list>\n   </nacm>\n   This example shows four data node rules:\n \
    \  deny-nacm:  This rule denies the \"guest\" group any access to the\n      /nacm\
    \ subtree.\n   permit-acme-config:  This rule gives the \"limited\" group read-write\n\
    \      access to the acme <config-parameters>.\n   permit-dummy-interface:  This\
    \ rule gives the \"limited\" and \"guest\"\n      groups read-update access to\
    \ the acme <interface> entry named\n      \"dummy\".  This entry cannot be created\
    \ or deleted by these groups;\n      it can only be altered.\n   permit-interface:\
    \  This rule gives the \"admin\" group read-write\n      access to all acme <interface>\
    \ entries.\n"
- title: A.5.  Notification Rule Example
  contents:
  - "A.5.  Notification Rule Example\n   Notification rules are used to control access\
    \ to a specific\n   notification event type.\n   <nacm xmlns=\"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\"\
    >\n     <rule-list>\n       <name>sys-acl</name>\n       <group>limited</group>\n\
    \       <group>guest</group>\n       <rule>\n         <name>deny-config-change</name>\n\
    \         <module-name>acme-system</module-name>\n         <notification-name>sys-config-change</notification-name>\n\
    \         <access-operations>read</access-operations>\n         <action>deny</action>\n\
    \         <comment>\n           Do not allow the 'guest' group or the 'limited'\
    \ group\n           to receive config change events.\n         </comment>\n  \
    \     </rule>\n     </rule-list>\n   </nacm>\n   This example shows one notification\
    \ rule:\n   deny-config-change:  This rule prevents the \"limited\" group or the\n\
    \      \"guest\" group from receiving the acme <sys-config-change>\n      event\
    \ type.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Andy Bierman\n   YumaWorks\n   685 Cochran St.\n   Suite\
    \ #160\n   Simi Valley, CA  93065\n   United States of America\n   Email: andy@yumaworks.com\n\
    \   Martin Bjorklund\n   Tail-f Systems\n   Email: mbj@tail-f.com\n"
