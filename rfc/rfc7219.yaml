- title: __initial_text__
  contents:
  - "                    SEcure Neighbor Discovery (SEND)\n              Source Address\
    \ Validation Improvement (SAVI)\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo specifies SEcure Neighbor Discovery (SEND) Source Address\n\
    \   Validation Improvement (SAVI), a mechanism to provide source address\n   validation\
    \ using the SEND protocol.  The proposed mechanism\n   complements ingress filtering\
    \ techniques to provide a finer\n   granularity on the control of IPv6 source\
    \ addresses.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7219.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Requirements Language . . . . . . . . . . . . . .\
    \ . . . .   4\n   2.  Background on SEND SAVI . . . . . . . . . . . . . . . .\
    \ . . .   4\n     2.1.  Address Validation Scope  . . . . . . . . . . . . . .\
    \ . .   4\n     2.2.  Binding Creation for SEND SAVI  . . . . . . . . . . . .\
    \ .   4\n     2.3.  SEND SAVI Protection Perimeter  . . . . . . . . . . . . .\
    \   7\n     2.4.  Special Cases . . . . . . . . . . . . . . . . . . . . . .  \
    \ 9\n   3.  SEND SAVI Specification . . . . . . . . . . . . . . . . . . .  11\n\
    \     3.1.  SEND SAVI Data Structures . . . . . . . . . . . . . . . .  11\n  \
    \   3.2.  SEND SAVI Device Configuration  . . . . . . . . . . . . .  12\n    \
    \ 3.3.  Traffic Processing  . . . . . . . . . . . . . . . . . . .  13\n      \
    \ 3.3.1.  Transit Traffic Processing  . . . . . . . . . . . . .  13\n       3.3.2.\
    \  Local Traffic Processing  . . . . . . . . . . . . . .  13\n     3.4.  SEND\
    \ SAVI Port Configuration Guidelines . . . . . . . . .  27\n     3.5.  VLAN Support\
    \  . . . . . . . . . . . . . . . . . . . . . .  28\n     3.6.  Protocol Constants\
    \  . . . . . . . . . . . . . . . . . . .  28\n   4.  Protocol Walk-Through . .\
    \ . . . . . . . . . . . . . . . . . .  29\n     4.1.  Change of the Attachment\
    \ Point of a Host  . . . . . . . .  29\n       4.1.1.  Moving to a Port of the\
    \ Same Switch . . . . . . . . .  29\n       4.1.2.  Moving to a Port of a Different\
    \ Switch  . . . . . . .  30\n     4.2.  Attack of a Malicious Host  . . . . .\
    \ . . . . . . . . . .  31\n       4.2.1.  M Attaches to the Same Switch as the\
    \ Victim's Switch   31\n       4.2.2.  M Attaches to a Different Switch to the\
    \ Victim's\n               Switch  . . . . . . . . . . . . . . . . . . . . . .\
    \ .  32\n   5.  Security Considerations . . . . . . . . . . . . . . . . . . .\
    \  33\n     5.1.  Protection against Replay Attacks . . . . . . . . . . . .  33\n\
    \     5.2.  Protection against Denial-of-Service Attacks  . . . . . .  34\n  \
    \   5.3.  Considerations on the Deployment Model for Trust Anchors   36\n    \
    \ 5.4.  Residual Threats  . . . . . . . . . . . . . . . . . . . .  36\n     5.5.\
    \  Privacy Considerations  . . . . . . . . . . . . . . . . .  37\n   6.  Acknowledgments\
    \ . . . . . . . . . . . . . . . . . . . . . . .  37\n   7.  References  . . .\
    \ . . . . . . . . . . . . . . . . . . . . . .  37\n     7.1.  Normative References\
    \  . . . . . . . . . . . . . . . . . .  37\n     7.2.  Informative References\
    \  . . . . . . . . . . . . . . . . .  38\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo specifies SEND SAVI, a mechanism to provide source\
    \ address\n   validation for IPv6 networks using the SEND protocol [RFC3971].\
    \  The\n   proposed mechanism complements ingress filtering techniques to\n  \
    \ provide a finer granularity on the control of the source addresses\n   used.\n\
    \   SEND SAVI uses the DAD_NSOL (Duplicate Address Detection Neighbor\n   SOLicitation)\
    \ and the DAD_NADV (DAD Neighbor ADVertisement) messages\n   defined in [RFC4862]\
    \ and the NUD_NSOL (Neighbor Unreachability\n   Detection Neighbor SOLicitation)\
    \ and NUD_NADV (NUD Neighbor\n   ADVertisement) messages defined in [RFC4861]\
    \ to validate the address\n   ownership claim of a node.  Using the information\
    \ contained in these\n   messages, host IPv6 addresses are associated to switch\
    \ ports, so that\n   data packets will be validated by checking for consistency\
    \ in this\n   binding, as described in [RFC7039].  In addition, SEND SAVI prevents\n\
    \   hosts from generating packets containing off-link IPv6 source\n   addresses.\n\
    \   Scalability of a distributed SAVI system comprising multiple SEND\n   SAVI\
    \ devices is preserved by means of a deployment scenario in which\n   SEND SAVI\
    \ devices form a \"protection perimeter\".  In this deployment\n   scenario, the\
    \ distributed SAVI system only validates the packets when\n   they ingress to\
    \ the protection perimeter, not in every SEND SAVI\n   device traversed.\n   The\
    \ SEND SAVI specification, as defined in this document, is limited\n   to links\
    \ and prefixes in which every IPv6 host and every IPv6 router\n   uses the SEND\
    \ protocol [RFC3971] to protect the exchange of Neighbor\n   Discovery information.\
    \  If the SEND protocol is not used, we can\n   deploy other SAVI solutions relying\
    \ on monitoring different address\n   configuration mechanisms to prove address\
    \ ownership.  For example,\n   FCFS (First-Come, First-Served) SAVI [RFC6620]\
    \ can be used by nodes\n   locally configuring IPv6 addresses by means of the\
    \ Stateless Address\n   Autoconfiguration mechanism [RFC4862].\n   SEND SAVI is\
    \ designed to be deployed in SEND networks with as few\n   changes to the deployed\
    \ implementations as possible.  In particular,\n   SEND SAVI does not require\
    \ any changes in the nodes whose source\n   address is to be verified.  This is\
    \ because verification solely\n   relies in the usage of already available protocols.\
    \  Therefore, SEND\n   SAVI neither defines a new protocol nor defines any new\
    \ message on\n   existing protocols, nor does it require that a host or router\
    \ use an\n   existing protocol message in a different way.\n   An overview of\
    \ the general framework about Source Address Validation\n   Improvement is presented\
    \ in [RFC7039].\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Background on SEND SAVI
  contents:
  - '2.  Background on SEND SAVI

    '
- title: 2.1.  Address Validation Scope
  contents:
  - "2.1.  Address Validation Scope\n   The application scenario of SEND SAVI is limited\
    \ to the local link.\n   This means that the goal of SEND SAVI is to verify that\
    \ the source\n   addresses of the packets generated by the nodes attached to the\
    \ local\n   link have not been spoofed and that only legitimate routers generate\n\
    \   packets with off-link IPv6 source addresses.\n   In a link, there usually\
    \ are hosts and routers attached.  Hosts\n   generate packets with their own addresses\
    \ as the source address.\n   This is called \"local traffic\".  Routers may send\
    \ packets containing\n   a source address other than their own, since they can\
    \ forward packets\n   generated by other hosts (usually located in a different\
    \ link).  This\n   is the so-called transit traffic.\n   SEND SAVI allows the\
    \ validation of the source address of the local\n   traffic, i.e., it allows verification\
    \ that the source addresses of\n   the packets generated by the nodes attached\
    \ to the local link have\n   not been spoofed.  SEND SAVI also provides means\
    \ to prevent hosts\n   from generating packets with source addresses derived from\
    \ off-link\n   prefixes.  However, SEND SAVI does not provide the means to verify\
    \ if\n   a given router is actually authorized to forward packets containing a\n\
    \   particular off-link source address.  Other techniques, like ingress\n   filtering\
    \ [RFC2827], are recommended to validate transit traffic.\n"
- title: 2.2.  Binding Creation for SEND SAVI
  contents:
  - "2.2.  Binding Creation for SEND SAVI\n   SEND SAVI devices filter packets according\
    \ to bindings between a\n   layer-2 anchor (the binding anchor) and an IPv6 address.\
    \  These\n   bindings should allow legitimate nodes to use the bounded IPv6\n\
    \   address as source address and prevent illegitimate nodes from doing\n   so.\n\
    \   Any SAVI solution is not stronger than the binding anchor it uses.\n   If\
    \ the binding anchor is easily spoofable (e.g., a Media Access\n   Control (MAC)\
    \ address), then the resulting solution will be weak.\n   The treatment of non-compliant\
    \ packets needs to be tuned accordingly.\n   In particular, if the binding anchor\
    \ is easily spoofable and the SEND\n   SAVI device is configured to drop non-compliant\
    \ packets, then the\n   usage of SEND SAVI may open a new vector of Denial-of-Service\
    \ (DoS)\n   attacks, based on spoofed binding anchors.  For that reason,\n   implementations\
    \ of this specification use switch ports as their\n   binding anchors.  Other\
    \ forms of binding anchors are out of the scope\n   of this specification, and\
    \ proper analysis of the implications of\n   using them should be performed before\
    \ their usage.\n   SEND [RFC3971] provides tools to assure that a Neighbor Discovery\n\
    \   (ND) message containing a Cryptographically Generated Address (CGA)\n   [RFC3972]\
    \ option and signed by an RSA option has been generated by\n   the legitimate\
    \ owner of the CGA IPv6 address.\n   SEND SAVI uses SEND-validated messages to\
    \ create bindings between the\n   CGA and the port of the SEND SAVI device from\
    \ which it is reasonable\n   to receive packets with the CGA as the source address.\
    \  The events\n   that trigger the binding creation process in a SEND SAVI device\
    \ are:\n   o  The reception of a DAD_NSOL message, indicating the attempt of a\n\
    \      node to configure an address.  This may occur when a node\n      configures\
    \ an address for the first time or after being idle for\n      some time or when\
    \ the node has changed the physical attachment\n      point to the layer-2 infrastructure.\n\
    \   o  The reception of any other packet (including data packets) with a\n   \
    \   source address for which no binding exists.  This may occur if\n      DAD_NSOL\
    \ messages were lost, a node has changed the physical\n      attachment point\
    \ to the layer-2 infrastructure without issuing a\n      DAD_NSOL message, a SAVI\
    \ device loses a binding (for example, due\n      to a restart), or the link topology\
    \ changed.\n   When the binding creation process is triggered, the SEND SAVI device\n\
    \   has to assure that the node for which the binding is to be created is\n  \
    \ the legitimate owner of the address.  For the case in which the\n   binding\
    \ creation process is initiated by a DAD_NSOL exchange, the\n   SEND SAVI device\
    \ waits for the reception of a validated DAD_NADV\n   message, indicating that\
    \ the other node has configured the address\n   before, or validated DAD_NSOL\
    \ messages arriving from other locations,\n   indicating that another node is\
    \ trying to configure the same address\n   at the same time.  For the case in\
    \ which packets other than a\n   DAD_NSOL initiate the creation of the binding,\
    \ the SEND SAVI device\n   explicitly requires the node sending those packets\
    \ to prove address\n   ownership by issuing a secured NUD_NSOL, which has to be\
    \ answered\n   with a secured NUD_NADV by the probed node.\n   SEND SAVI devices\
    \ issue secured NUD_NSOL messages periodically in\n   order to refresh bindings,\
    \ which have to be answered with a valid\n   NUD_NADV message by the node for\
    \ which the binding exists.\n   SEND SAVI devices only forward packets with off-link\
    \ source addresses\n   if they are received from a port manually configured to\
    \ connect to a\n   router.\n   SEND SAVI needs to be protected against replay\
    \ attacks, i.e., attacks\n   in which a secured SEND message is replayed by another\
    \ node.  As\n   discussed before, the SEND SAVI specification uses SEND messages\
    \ to\n   create a binding between the address contained in the message (that\n\
    \   must be signed by a node possessing the private key associated to the\n  \
    \ address) and the port through which the message is received.  If an\n   attacker\
    \ manages to obtain such a message from another node, for\n   example, because\
    \ the message was sent to the all-nodes multicast\n   address or because the attacker\
    \ has subscribed to the Solicited Node\n   multicast address associated to a remote\
    \ node, it could replay it\n   preserving the original signature.  This may create\
    \ an illegitimate\n   binding in the SEND SAVI device or could be used to abort\
    \ address\n   configuration at the other node.  While SEND provides some means\
    \ to\n   limit the impact of the replay of ND messages, the emphasis for SEND\n\
    \   anti-replay protection is to limit to a short period of time the\n   validity\
    \ of the ND information transmitted in the message, for\n   example, the relationship\
    \ between an IPv6 address and a layer-2\n   address.  Note that the period must\
    \ be long enough to assure that the\n   information sent by the legitimate sender\
    \ is considered valid despite\n   the possible differences in clock synchronization\
    \ between the sender\n   and receiver(s).  For example, with the values recommended\
    \ by\n   [RFC3971] for TIMESTAMP_FUZZ and TIMESTAMP_DRIFT, a node receiving a\n\
    \   DAD_NSOL message would not discard replays of this message being\n   received\
    \ within a period of approximately 2 seconds (more precisely,\n   2/0.99 seconds).\
    \  The underlying assumption for SEND security is that\n   even if the message\
    \ is replayed by another node during this period of\n   time, the information\
    \ disseminated by ND is still the same.  However,\n   allowing a node to replay\
    \ a SEND message does have an impact on the\n   SEND SAVI operation, regardless\
    \ of the time elapsed since it was\n   generated, since the node can create a\
    \ new binding in a SEND SAVI\n   device for the port to which an illegitimate\
    \ node attaches.  As can\n   be concluded, the protection provided by SEND is\
    \ not enough in all\n   cases for SEND SAVI.\n   SEND SAVI increases the protection\
    \ against the replay attacks\n   compared to SEND.  First, each node is required\
    \ to connect to the\n   SEND SAVI topology through a different port to prevent\
    \ eavesdropping\n   before entering the SAVI protection perimeter.  Then, SEND\
    \ SAVI\n   bindings are updated only according to messages whose dissemination\n\
    \   can be restricted in the SEND SAVI topology without interfering with\n   the\
    \ normal SEND operation.  The messages used by SEND SAVI to create\n   bindings\
    \ are DAD_NSOL messages, for which SEND SAVI limits its\n   propagation to the\
    \ ports through which a previous binding for the\n   same IPv6 address existed\
    \ (see Section 3.3.2), and NUD_NADV messages\n   in response to a secured NUD_NSOL\
    \ sent by the SEND SAVI device only\n   through the tested port.  Finally, SEND\
    \ SAVI filtering rules prevent\n   nodes from replaying messages generated by\
    \ the SEND SAVI devices\n   themselves.  Section 5.1 discusses in more detail\
    \ the protection\n   provided by SEND SAVI against replay attacks.\n"
- title: 2.3.  SEND SAVI Protection Perimeter
  contents:
  - "2.3.  SEND SAVI Protection Perimeter\n   In order to reduce computing and state\
    \ requirements in SEND SAVI\n   devices, SEND SAVI devices can be deployed to\
    \ form a \"protection\n   perimeter\" [RFC7039].  With this deployment strategy,\
    \ SEND SAVI\n   devices perform source-address validation only when packets enter\
    \ in\n   the protected realm defined through the protection perimeter.  The\n\
    \   perimeter is defined by appropriate configuration of the roles of\n   each\
    \ port, which can be 'Validating' or 'Trusted':\n   o  Validating ports (VPs)\
    \ are ports in which SEND SAVI filtering and\n      binding creation are performed.\n\
    \   o  Trusted ports (TPs) are ports in which limited processing is\n      performed.\
    \  Only SEND messages related with certificates, prefix\n      information, and\
    \ DAD operation are processed in order to update\n      the state of the SEND\
    \ SAVI device or the state related with any of\n      the Validating ports of\
    \ the switch.\n   Figure 1 shows a typical topology involving trusted and untrusted\n\
    \   infrastructure.\n         +--+   +--+                          +--+   +--+\n\
    \         |H1|   |H2|                          |H3|   |R1|\n         +--+   +--+\
    \                          +--+   +--+\n           |     |                   \
    \           |     |\n      +------------SEND SAVI PROTECTION PERIMETER-----------+\n\
    \      |    |     |                              |     |     |\n      |  +-1-----2-+\
    \                          +-1-----2-+   |\n      |  |  SEND-  |             \
    \             |  SEND-  |   |\n      |  |  SAVI1  |                          |\
    \  SAVI2  |   |\n      |  +-3--4----+                          +--3--4---+   |\n\
    \      |    |  |          +--------------+        |  |       |\n      |    | \
    \ +----------|              |--------+  |       |\n      |    |             |\
    \   SWITCH-A   |           |       |\n      |    |  +----------|             \
    \ |           |       |\n      |    |  |          +--------------+           |\
    \       |\n      |  +-1--2----+                          +-----1---+   |\n   \
    \   |  |  SEND-  |                          |  SEND-  |   |\n      |  |  SAVI3\
    \  |                          |  SAVI4  |   |\n      |  +-3-----4-+          \
    \                +----4----+   |\n      |    |     |                         \
    \        |        |\n      +------------SEND SAVI PROTECTION PERIMETER-----------+\n\
    \           |     |                                 |\n         +--+   +--+  \
    \                           +--+\n         |R2|   |H4|                       \
    \      |H5|\n         +--+   +--+                             +--+\n         \
    \           Figure 1: SAVI Protection Perimeter\n   Trusted ports are used for\
    \ connections with trusted infrastructures,\n   such as routers and other SEND\
    \ SAVI devices.  Port 2 of SEND-SAVI2\n   and port 3 of SEND-SAVI3 are Validating\
    \ ports because they connect to\n   routers.  Port 3 of SEND-SAVI1 and port 1\
    \ of SEND-SAVI3 as well as\n   port 4 of SEND-SAVI2 and port 1 of SEND-SAVI4 are\
    \ trusted because\n   they connect two SAVI devices.  Finally, port 4 of SEND-SAVI1,\
    \ port 3\n   of SEND-SAVI2, and port 2 of SEND-SAVI3 are trusted because they\n\
    \   connect to SWITCH-A to which only trusted nodes are connected.\n   Validating\
    \ ports are used for connection with non-trusted\n   infrastructures; therefore,\
    \ hosts connect normally to Validating\n   ports.  So, in Figure 1 above, ports\
    \ 1 and 2 of SEND-SAVI1, port 1 of\n   SEND-SAVI2, and port 4 of SEND-SAVI3 are\
    \ Validating ports because\n   they connect to hosts.  Port 4 of SEND-SAVI4 is\
    \ also a Validating\n   port because it is connected to host H5.\n   For a more\
    \ detailed discussion on this, see Section 3.4.\n"
- title: 2.4.  Special Cases
  contents:
  - "2.4.  Special Cases\n   Multi-subnet links:  In some cases, a given subnet may\
    \ have several\n      prefixes.  This is supported by SEND SAVI as any port can\
    \ support\n      multiple prefixes.\n   Multihomed hosts:  A multihomed host is\
    \ a host with multiple\n      interfaces.  The interaction between SEND SAVI and\
    \ multihomed\n      hosts is as follows.  If the different interfaces of the host\
    \ are\n      assigned different IP addresses and packets sent from each\n    \
    \  interface and always carry the address assigned to that interface\n      as\
    \ the source address, then from the perspective of a SEND SAVI\n      device,\
    \ this is equivalent to two hosts with a single interface,\n      each with an\
    \ IP address.  SEND SAVI supports this without\n      additional considerations.\
    \  If the different interfaces share the\n      same IP address or if the interfaces\
    \ have different addresses but\n      the host sends packets using the address\
    \ of one of the interfaces\n      through any of the interfaces, then SEND SAVI\
    \ does not directly\n      support it.  It would require either connecting at\
    \ least one\n      interface of the multihomed host to a Trusted port or manually\n\
    \      configuring the SEND SAVI bindings to allow binding the address of\n  \
    \    the multihomed host to multiple anchors simultaneously.\n   Virtual switches:\
    \  A hypervisor or a host operating system may\n      perform bridging functions\
    \ between virtual hosts running on the\n      same machine.  The hypervisor or\
    \ host OS may in turn connect to a\n      SEND SAVI system.  This scenario is\
    \ depicted in Figure 2, with two\n      virtual machines, VM1 and VM2, connected\
    \ through a virtual switch,\n      VS1, to SEND SAVI device SEND-SAVI1.  The attachment\
    \ points of VS1\n      to VM1 and VM2 are configured as Validating.\n       Host1\n\
    \       +----------------+\n       | +---+   +---+  |\n       | |VM1|   |VM2|\
    \  |\n       | +---+   +---+  |\n       |   |     |      |\n       | +-1-----2--+\
    \   |\n       | |   VS1    |   |\n       | +--3-------+   |\n       |    |   \
    \        |\n       +----|-----------+\n            |\n            |\n        \
    \ +--1-----2--+\n         |   SEND-   |\n         |   SAVI1   |\n         +--3---4----+\n\
    \            |   |\n       Figure 2: Virtual Switches Connected to the SEND SAVI\
    \ Device\n   In order to provide proper security against replay attacks,\n   performing\
    \ SEND SAVI filtering as close to untrusted hosts as\n   possible (see Sections\
    \ 3.4 and 5.1) is recommended.  In this\n   scenario, this objective can be achieved\
    \ by enabling SEND SAVI\n   validation in VS1.  Ideally, VS1 could be integrated\
    \ into the SEND\n   SAVI protection perimeter if the hypervisor or host OS at\
    \ Host1 can\n   be trusted (even though VM1 and VM2 could not be trusted).  To\
    \ do so,\n   both the attachment to SEND-SAVI1 at VS1, and port 1 at SEND-SAVI1,\n\
    \   are configured as Trusted.\n   If the administrator of the network does not\
    \ trust VS1, port 1 of\n   SEND-SAVI1 is configured as Validating, so that every\
    \ address being\n   used at Host1 is validated at SEND-SAVI1 by SEND SAVI.  The\n\
    \   attachment point to the physical network at VS1 should be configured\n   as\
    \ Trusted if the host administrator knows that it is connected to a\n   SEND SAVI\
    \ device; in this case, VS1 relies on the infrastructure\n   comprised by the\
    \ physical SEND SAVI devices but not vice versa.\n   Packets egressing from VM1\
    \ are validated twice: first at VS1 and then\n   at SEND-SAVI1.  Packets going\
    \ in the reverse direction (from an\n   external host to VM1) are validated once:\
    \ when they first reach a\n   SEND SAVI device.  If the administrator of VS1 does\
    \ not trust the\n   physical switch to which it attaches, it can configure the\
    \ attachment\n   to SEND-SAVI1 as Validating.  In Figure 2 above, this means that\
    \ a\n   packet going from another host to VM1 would be validated twice: once\n\
    \   when entering the SEND SAVI perimeter formed by the physical devices\n   and\
    \ again when entering at VS1.\n   Untrusted routers: One can envision scenarios\
    \ where routers are\n   dynamically attached to a SEND SAVI network.  A typical\
    \ example would\n   be a mobile phone connecting to a SEND SAVI switch where the\
    \ mobile\n   phone is acting as a router for other personal devices that are\n\
    \   accessing the network through it.  Regarding the validation of the\n   source\
    \ address performed in a SEND SAVI device, such an untrusted\n   router does not\
    \ seem to directly fall in the category of trusted\n   infrastructure (if this\
    \ was the case, it is likely that all devices\n   would be trusted); hence, it\
    \ cannot be connected to a Trusted port,\n   and if it is connected to a Validating\
    \ port, the SEND SAVI switch\n   would discard all the packets containing an off-link\
    \ source address\n   coming from that device.  Although the SEND SAVI device to\
    \ which this\n   router attaches could be configured to permit the transit of\
    \ packets\n   with source addresses belonging to the set of prefixes reachable\n\
    \   through the untrusted router, such a mechanism is out of the scope of\n  \
    \ this document.  As a result, the default mechanism described in this\n   specification\
    \ cannot be applied in such a scenario.\n"
- title: 3.  SEND SAVI Specification
  contents:
  - '3.  SEND SAVI Specification

    '
- title: 3.1.  SEND SAVI Data Structures
  contents:
  - "3.1.  SEND SAVI Data Structures\n   The following three data structures are defined\
    \ for SEND SAVI\n   operations.\n   SEND SAVI Database: The SEND SAVI function\
    \ relies on state\n   information binding the source IPv6 address used in data\
    \ packets to\n   the port through which the legitimate node connects.  Such\n\
    \   information is stored in the SEND SAVI Database.  The SEND SAVI\n   Database\
    \ is populated with the contents of validated SEND messages.\n   Each entry contains\
    \ the following information:\n   o  IPv6 source address\n   o  Binding anchor:\
    \ the port through which the packet was received\n   o  Lifetime\n   o  Status:\
    \ TENTATIVE_DAD, TENTATIVE_NUD, VALID, TESTING_VP,\n      TESTING_VP'\n   o  Alternative\
    \ binding anchor: the port from which a DAD_NSOL message\n      or any data packet\
    \ has been received while a different port was\n      stored in the binding anchor\
    \ for the address.\n   o  Creation time: the value of the local clock when the\
    \ entry was\n      first created\n   SEND SAVI Prefix List: SEND SAVI devices\
    \ need to know which ones are\n   the link prefixes in order to identify local\
    \ and off-link traffic.  A\n   SEND SAVI device MUST support discovering this\
    \ information from the\n   Prefix Information option [RFC4861] with the L bit\
    \ set of Router\n   Advertisement (RADV) messages coming from Trusted ports, as\
    \ described\n   in Section 3.3.2.  The list of prefixes MAY also be configured\n\
    \   manually.  This information is not specific to a given port.  The\n   SEND\
    \ SAVI Prefix List contains one entry per prefix in use, as\n   follows:\n   o\
    \  Prefix: the prefix included in a Prefix Information option.\n   o  Prefix lifetime:\
    \ time in seconds that the prefix is valid.\n      Initially set to the Valid\
    \ Lifetime value of the Prefix\n      Information option of a valid RADV message\
    \ or set to a value of\n      all 1 bits (0xffffffff), which represents infinity,\
    \ if configured\n      manually.\n   When the SEND SAVI device boots, it MUST\
    \ send a Router Solicitation\n   (RSOL) message, which does not need to be secured\
    \ if the unspecified\n   address is used (see [RFC3971], Sections 5.1.1 and 5.2.1).\
    \  The SAVI\n   device SHOULD issue a RSOL message in case the prefix entry is\
    \ about\n   to expire.\n"
- title: 3.2.  SEND SAVI Device Configuration
  contents:
  - "3.2.  SEND SAVI Device Configuration\n   In order to perform the SEND SAVI operation,\
    \ some basic parameters of\n   the SEND SAVI device have to be configured.  Since\
    \ a SEND SAVI device\n   operates as a SEND node to generate NUD_NSOL, RSOL, or\
    \ Certification\n   Path Solicitation (CPS) messages:\n   o  The SEND SAVI device\
    \ MUST be configured with a valid CGA address.\n      When the SEND SAVI device\
    \ configures this address, it MUST behave\n      as a regular SEND node, i.e.,\
    \ using secured NSOL messages to\n      perform DAD, etc., in addition to fulfilling\
    \ the requirements\n      stated for regular IPv6 nodes [RFC6434].\n   o  The\
    \ SEND SAVI device MAY be configured with at least one trust\n      anchor if\
    \ it is configured to validate RADV messages (see\n      Section 3.3.2).  In this\
    \ case, the SEND SAVI device MAY be\n      configured with certification paths.\
    \  The alternative is obtaining\n      them by means of issuing Certification\
    \ Path Solicitation messages,\n      as detailed in the SEND specification [RFC3971].\n\
    \   In addition, the port role for each port of the SEND SAVI device MUST\n  \
    \ be configured.  The guidelines for this configuration are specified\n   in Section\
    \ 3.4.\n"
- title: 3.3.  Traffic Processing
  contents:
  - "3.3.  Traffic Processing\n   In this section, we describe how packets are processed\
    \ by a SEND SAVI\n   device.  Behavior varies depending on if the packet belongs\
    \ to local\n   or transit traffic.  This is determined by checking if the prefix\
    \ of\n   the source address is included in the SEND SAVI Prefix List or in the\n\
    \   unspecified address (local traffic) or not included in the SEND SAVI\n   Prefix\
    \ List (transit traffic).\n"
- title: 3.3.1.  Transit Traffic Processing
  contents:
  - "3.3.1.  Transit Traffic Processing\n   Transit traffic processing occurs as follows:\n\
    \   o  If the SEND SAVI device receives a transit traffic packet through\n   \
    \   a Trusted port, it forwards it without any SAVI processing.\n   o  If the\
    \ SEND SAVI device receives a transit traffic packet through\n      a Validating\
    \ port, it discards the packet.\n"
- title: 3.3.2.  Local Traffic Processing
  contents:
  - "3.3.2.  Local Traffic Processing\n   If the verification of the source address\
    \ of a packet shows that it\n   belongs to local traffic, this packet is processed\
    \ using the state\n   machine described in this section.\n   For the rest of the\
    \ section, the following assumptions hold:\n   o  When it is stated that a secured\
    \ NUD_NSOL message is issued by a\n      SEND SAVI device through a port P, it\
    \ means that the SEND SAVI\n      device generates a NUD_NSOL message, according\
    \ to the Neighbor\n      Unreachability Detection procedure described in [RFC4861],\n\
    \      addressed to the IPv6 target address, which is the source address\n   \
    \   of the packet triggering the procedure.  This message is secured\n      by\
    \ SEND as defined in [RFC3971].  The source address used for\n      issuing the\
    \ NUD_NSOL message is the source address of the SEND\n      SAVI device.  The\
    \ message is sent only through port P.\n   o  When it is stated that a validated\
    \ NUD_NADV message is received by\n      a SEND SAVI device, it means that a SEND\
    \ secured NUD_NADV message\n      has been received by the same port P through\
    \ which the\n      corresponding NUD_NSOL message was issued, and the NUD_NADV\n\
    \      message has been validated according to [RFC3971] to prove\n      ownership\
    \ for the IPv6 address under consideration and to prove\n      that it is a response\
    \ for the previous NUD_NSOL message issued by\n      the SEND SAVI device (containing\
    \ the same nonce value as the\n      NUD_NSOL message to which it answers).\n\
    \   We use VP to refer to a Validating port and TP to refer to a Trusted\n   port.\n\
    \   The state machine is defined for a binding of a given source IPv6\n   address\
    \ in a given SEND SAVI device.  In the transitions considered,\n   packets described\
    \ as inputs refer to the IPaddr IPv6 address\n   associated to the state machine.\n\
    \   The possible states for a given IPaddr are NO_BIND, TENTATIVE_DAD,\n   TENTATIVE_NUD,\
    \ VALID, TESTING_VP, and TESTING_VP'.  The NO_BIND state\n   represents that no\
    \ binding exists for IPaddr; this is the state for\n   all addresses unless a\
    \ binding is explicitly created.\n   The states can be classified into 'forwarding'\
    \ states, i.e., states\n   in which packets received from the port associated\
    \ to the IPv6\n   address are forwarded, and 'non-forwarding' states, i.e., states\
    \ in\n   which packets different to the ones used for signaling are not\n   forwarded.\
    \  VALID, TENTATIVE_DAD, TESTING_VP, and TESTING_VP' are\n   forwarding states,\
    \ and NO_BIND and TENTATIVE_NUD are non-forwarding\n   states.\n   The SEND SAVI\
    \ device MUST join the Solicited Node Multicast group for\n   all the addresses\
    \ whose state is other than NO_BIND.  This is needed\n   to make sure that the\
    \ SEND SAVI device receives DAD_NSOL messages\n   issued for those addresses.\
    \  Note that it may not be enough to relay\n   on the Multicast Listener Discovery\
    \ (MLD) messages being sent by the\n   node attached to a Validating port for\
    \ which a binding for the\n   corresponding address exists, since the node may\
    \ move and packets\n   sent to that particular Solicited Node Multicast group\
    \ may no longer\n   be forwarded to the SEND SAVI device.\n   In order to determine\
    \ which traffic is on-link and off-link, the SEND\n   SAVI device MUST support\
    \ discovery of this information from the\n   Prefix Information option with the\
    \ L bit set of RADV messages.  In\n   this case, at least one router SHOULD be\
    \ configured to advertise RADV\n   messages containing a Prefix Information option\
    \ with the prefixes\n   that the untrusted nodes can use as source addresses,\
    \ and the bit L\n   set.  An alternative to this is to manually configure the\
    \ SEND SAVI\n   Prefix List or restrict the use of link-local addresses.\n   SEND\
    \ SAVI devices MUST discard RADV messages received from Validating\n   ports.\
    \  RADV messages are only accepted and processed when received\n   through Trusted\
    \ ports.\n   SEND SAVI devices SHOULD NOT validate RADV messages to update the\n\
    \   SEND SAVI Prefix List and forward them to other nodes.  These\n   messages\
    \ can only be received from Trusted ports, and we assume that\n   routers are\
    \ trusted.  Validating RADV messages would be required in\n   any SEND SAVI device\
    \ the node is traversing.  Besides, hosts will\n   validate this message before\
    \ using the information it contains.\n   In case SEND SAVI devices are configured\
    \ to validate RADV messages,\n   SEND SAVI devices SHOULD support the processing\
    \ of validated\n   Certification Path Advertisement (CPA) messages, sent in reply\
    \ to CPS\n   messages, to acquire certificates used to validate router messages;\n\
    \   alternatively, it SHOULD be configured with a certification path.\n   The\
    \ state machine defined for the SEND SAVI operation adheres to the\n   following\
    \ design guidelines:\n   o  The only events that trigger state changes from forwarding\
    \ to non-\n      forwarding states, and vice versa, are the reception of DAD_NSOL,\n\
    \      DAD_NADV, and NUD_NADV or the expiration of a timer.  The other\n     \
    \ possible input to consider is 'any other packet', which could\n      generate\
    \ changes to states belonging to the same forwarding or\n      non-forwarding\
    \ class as the original state.  In other words, when\n      'any other packet'\
    \ is received, the state cannot move from\n      forwarding to non-forwarding,\
    \ and vice versa.  The reduced set of\n      messages being able to trigger a\
    \ change simplifies the processing\n      at SEND SAVI devices.\n   o  DAD_NADV\
    \ and NUD_NADV are only processed when they are a response\n      to a DAD_NSOL\
    \ or a NUD_NSOL message.\n   o  SEND SAVI devices MUST only use ND messages received\
    \ through\n      Validating ports if they are valid; otherwise, they discard them.\n\
    \      SEND SAVI devices SHOULD assume that such messages received from\n    \
    \  Trusted ports have been validated by other SEND SAVI devices, or\n      come\
    \ from a trusted device such a router, so they SHOULD NOT\n      attempt to validate\
    \ them in order to reduce the processing load at\n      the SEND SAVI device.\n\
    \   o  The only messages the SEND SAVI device is required to generate\n      specifically\
    \ per each source IP address are MLD and NUD_NSOL\n      messages.  This also\
    \ keeps the state machine simple.\n   o  Well-behaved nodes are expected to initiate\
    \ communication by\n      sending secured DAD_NSOL messages.  The SEND SAVI state\
    \ machine is\n      tailored to efficiently process these events.  The reception\
    \ of\n      other packet types without receiving previously validated DAD_NSOL\n\
    \      messages is assumed to be a consequence of bad-behaving nodes or\n    \
    \  infrequent events (such as packet loss, a change in the topology\n      connecting\
    \ the switches, etc.).  While a binding will ultimately\n      be created for\
    \ nodes affected by such events, simplicity of the\n      state machine is prioritized\
    \ over any possible optimization for\n      these cases.\n   o  If a node has\
    \ a configured address, and it can prove that it owns\n      this address, the\
    \ binding is preserved regardless of any\n      indication that a binding for\
    \ the same source address could be\n      configured in other SEND SAVI devices.\
    \  Bindings for the same\n      source address in two or more SEND SAVI devices\
    \ may occur due to\n      several reasons, for example, when a host moves (the\
    \ two bindings\n      exist just for a short period of time) or when many nodes\
    \ generate\n      the same address and the DAD procedure has failed.  In these\n\
    \      infrequent cases, SEND SAVI preserves connectivity for the\n      resulting\
    \ bindings.\n   Next, we describe how different inputs are processed, depending\
    \ on\n   the state of the binding of the IP address 'IPaddr'.  Note that every\n\
    \   ND message is assumed to be validated according to the SEND\n   specification.\n\
    \   To facilitate the reader's understanding of the most relevant\n   transitions\
    \ of the SEND SAVI state machine, a simplified version,\n   which does not contain\
    \ every possible transition, is depicted in\n   Figure 3:\n                  \
    \        +-------------+\n                          |             |\n        \
    \                  | TESTING_VP' |\n                          |             |\n\
    \                          +-------------+\n             Timeout/VP=VP'  |   \
    \ ^\n                             |    |\n             VP_NUD_NADV/-   |    |\
    \  VP'_DAD_NSOL/\n                             |    |    VP_NUD_NSOL\n       \
    \                      |    |\n                             v    |\n         VP_DAD_NSOL/-\
    \     +--------+\n            +------------- |        |\n            |       \
    \       | VALID  |< -------------------+\n            |   +-------- >|       \
    \ |                     |\n            |   |          +--------+             \
    \        |\n            |   |            ^   |                        |\n    \
    \        |   |    VP_NUD_ |   | Timeout,               |\n            |   |  \
    \   NADV/- |   | TP_DAD_NSOL/VP_NUD_NSOL|\n            |   |            |   v\
    \                        |\n            |   |         +------------+         \
    \         |\n            |   |         |            |                  |\n   \
    \         |   |         | TESTING_VP |                  |\n            |   | \
    \        |            |                  |\n            |   |         +------------+\
    \                  |\n            |   |              |                       \
    \   |\n            |   |              | Timeout/-                |\n         \
    \   |   | VP*,         |                          |\n            |   | Timeout/-\
    \    |            VP_NUD_NADV/- |\n            v   |              |          \
    \                |\n         +---------------+     |           +---------------+\n\
    \         |               |     |           |               |\n         | TENTATIVE_DAD\
    \ |     |           | TENTATIVE_NUD |\n         |               |     |      \
    \     |               |\n         +---------------+     |           +---------------+\n\
    \            ^  |               |             |         ^\n            |  |  \
    \             |   Timeout/- |         |\n            |  | TP_DAD_NSOL,  |    \
    \         |         |\n            |  | TP_DAD_NADV/- |             |        \
    \ |\n            |  |               v             |         |\n            | \
    \ |           +---------+       |         |\n            |  +--------- >|    \
    \     |< -----+         |\n            |              | NO_BIND |            \
    \     |\n            +--------------|         |-----------------+\n          \
    \  VP_DAD_NSOL/-  +---------+    VP*/VP_NUD_NSOL\n               Figure 3: Simplified\
    \ SEND SAVI State Machine\n   Each state transition is characterized by any of\
    \ the events that may\n   trigger the change and the message(s) generated as a\
    \ result of this\n   change.  The meaning of some terms are referred next:\n \
    \  o  VP_DAD_NSOL as a triggering event means that a validated DAD_NSOL\n    \
    \  message has been received from the current BINDING_ANCHOR port VP.\n   o  VP*\
    \ means any packet (data packet) received from the current\n      BINDING_ANCHOR\
    \ port VP.\n   o  TP_DAD_NSOL as a triggering event means that a DAD_NSOL message\n\
    \      was received from a Trusted port.\n   o  - means that no message is sent.\
    \  VP=VP' means that the\n      BINDING_ANCHOR is set to VP'.\n   The notation\n\
    \      Timeout, TP_DAD_NSOL/VP_NUD_NSOL\n   means that the transition is triggered\
    \ by either a timeout expiration\n   or the reception of a DAD_NSOL message from\
    \ a Trusted port, and in\n   addition to the transition, a NUD_NSOL message is\
    \ sent through port\n   VP.\n   For the rest of the description, we assume the\
    \ following:\n   o  When a validated message is required (i.e., a 'validated\n\
    \      DAD_NSOL'), messages are check for validity in the considered\n      switch\
    \ according to [RFC3971], and messages not fulfilling these\n      conditions\
    \ are discarded.\n   o  When any SEND message is received from a validated port,\
    \ the SEND\n      SAVI SHOULD assume that the message has been validated by the\
    \ SEND\n      SAVI device through which the message accessed the SEND SAVI\n \
    \     protection perimeter (unless the SEND SAVI perimeter has been\n      breached),\
    \ or the device generating it is trusted.  In this case,\n      the SAVI device\
    \ does not perform any further validation.\n      Performing validation for SEND\
    \ messages received through a Trusted\n      port may affect performance negatively.\n\
    \   NO_BIND\n   When the node is in this state, there are no unresolved NUD_NSOL\n\
    \   messages generated by SEND SAVI or DAD_NSOL propagated to any\n   Validating\
    \ port, so the only relevant inputs are DAD_NSOL messages\n   coming either from\
    \ a Validating port (VP) or Trusted port (TP), or\n   any packet other than DAD_NSOL\
    \ coming from a VP or TP.  There are no\n   timers configured for this state.\n\
    \   Messages received from a Validating port:\n   o  If a validated DAD_NSOL message\
    \ is received from a Validating port\n      VP, the SEND SAVI device forwards\
    \ this message to all appropriate\n      Trusted ports (the subset of Trusted\
    \ ports that belong to the\n      forwarding layer-2 topology, with the restrictions\
    \ imposed by the\n      MLD snooping mechanism, if applied).  DAD_NSOL messages\
    \ are not\n      sent through any of the ports configured as Validating ports.\
    \  The\n      SEND SAVI device sets the LIFETIME to TENT_LT, stores all the\n\
    \      information required for future validation of the corresponding\n     \
    \ DAD_NADV message (such as the nonce of the message), creates a new\n      entry\
    \ in the SEND SAVI Database for IPaddr, sets BINDING_ANCHOR to\n      VP, and\
    \ changes the state to TENTATIVE_DAD.  Creation time is set\n      to the current\
    \ value of the local clock.\n      Note that in this case, it is not possible\
    \ to check address\n      ownership by sending a NUD_NSOL because while the node\
    \ is waiting\n      for a possible DAD_NADV, its address is in tentative state\
    \ and the\n      node cannot respond to NSOL messages [RFC4862].\n   o  If any\
    \ packet other than a DAD_NSOL is received through a\n      Validating port VP,\
    \ the SEND SAVI device issues a secured NUD_NSOL\n      through port VP.  The\
    \ SEND SAVI device sets the LIFETIME to\n      TENT_LT.  The SEND SAVI device\
    \ creates a new entry in the SEND\n      SAVI Database for IPaddr, sets BINDING_ANCHOR\
    \ to VP, and the state\n      is changed to TENTATIVE_NUD.  Creation time is set\
    \ to the current\n      value of the local clock.  The SAVI device MAY discard\
    \ the packet\n      while the NUD procedure is being executed or MAY store it\
    \ in order\n      to send it if the next transitions are (strictly) TENTATIVE_NUD\n\
    \      and then VALID.\n   Messages received from a Trusted port:\n   o  If a\
    \ DAD_NSOL message containing IPaddr as the target address is\n      received\
    \ through a Trusted port, it MUST NOT be forwarded through\n      any of the Validating\
    \ ports: it is sent through the proper Trusted\n      ports.  The state is not\
    \ changed.\n   o  Any packet other than a DAD_NSOL received from a Trusted port\
    \ is\n      forwarded to its destination.  This packet is assumed to come from\n\
    \      a SEND SAVI device that has securely validated the binding,\n      according\
    \ to the SEND SAVI rules (unless the SEND SAVI perimeter\n      has been breached).\
    \  The state is not changed.\n   TENTATIVE_DAD\n   To arrive at this state, the\
    \ SEND SAVI device has received a\n   validated DAD_NSOL coming from the BINDING_ANCHOR\
    \ port, and it has\n   forwarded it to the appropriate TPs.  The relevant events\
    \ occurring\n   in this state are the reception of a DAD_NADV message from a TP,\
    \ a\n   DAD_NSOL message from the BINDING_ANCHOR port, other Validating port\n\
    \   or TP, a data packet from the BINDING_ANCHOR port, and the expiration\n  \
    \ of the LIFETIME timer initiated when the DAD_NSOL was received at the\n   BINDING_ANCHOR\
    \ port.\n   Messages received from a Trusted port:\n   o  The reception of a valid\
    \ DAD_NADV message from a Trusted port\n      indicates that the binding cannot\
    \ be configured for the\n      BINDING_ANCHOR port.  The state is changed to NO_BIND,\
    \ and the\n      LIFETIME is cleared.\n   o  The reception of a valid DAD_NSOL\
    \ from a Trusted port indicates\n      that a node connected to another SEND SAVI\
    \ device may be trying to\n      configure the same address at the same time.\
    \  The DAD_NSOL message\n      is forwarded to the BINDING_ANCHOR port, so that\
    \ the node at this\n      port will not configure the address, as stated in [RFC4862].\
    \  The\n      DAD_NSOL message is also forwarded to all appropriate Trusted\n\
    \      ports.  Then, the LIFETIME is cleared, and the state is changed to\n  \
    \    NO_BIND.\n   o  Any packet other than a validated DAD_NSOL or DAD_NADV received\n\
    \      from a Trusted port is forwarded to its destination.  This packet\n   \
    \   is assumed to come from a SEND SAVI device that has securely\n      validated\
    \ the binding, according to the SEND SAVI rules (unless\n      the SEND SAVI perimeter\
    \ has been breached).  The state is not\n      changed.\n   Messages received\
    \ from a Validating port different from the\n   BINDING_ANCHOR:\n   o  A validated\
    \ DAD_NSOL is received from a Validating port VP'\n      different from the BINDING_ANCHOR\
    \ port.  The reception of a valid\n      DAD_NSOL from port VP' indicates that\
    \ a node connected to VP' may\n      be trying to configure the same address at\
    \ the same time.  The\n      DAD_NSOL message is forwarded to the BINDING_ANCHOR\
    \ port, so that\n      the node at this port will not configure the address, as\
    \ stated in\n      [RFC4862].  The DAD_NSOL message is also forwarded to all\n\
    \      appropriate Trusted ports.  Then, the BINDING_ANCHOR is set to VP'\n  \
    \    (through which the DAD_NSOL message was received), the LIFETIME is\n    \
    \  set to TENT_LT, and the state remains in TENTATIVE_DAD.\n   o  Any packet other\
    \ than a validated DAD_NSOL received from a\n      Validating port VP' different\
    \ from the BINDING_ANCHOR port is\n      discarded.  The state is not changed.\n\
    \   Messages received from the BINDING_ANCHOR port:\n   o  If a validated DAD_NSOL\
    \ is received from the BINDING_ANCHOR port,\n      the LIFETIME is set to TENT_LT,\
    \ and the state remains in\n      TENTATIVE_DAD.\n   o  If any packet other than\
    \ a DAD_NSOL is received from the\n      BINDING_ANCHOR port, it is assumed that\
    \ the node has configured\n      its address, although it has done it in less\
    \ time than expected by\n      the SEND SAVI device (less than TENT_LT).  Since\
    \ the node proved\n      address ownership by means of the validated DAD_NSOL\
    \ message, the\n      LIFETIME is set to DEFAULT_LT, and the state is changed\
    \ to VALID.\n   LIFETIME expires:\n   o  If LIFETIME expires, it is assumed that\
    \ no other node has\n      configured this address.  Therefore, the Validating\
    \ port VP\n      (currently stored in the BINDING_ANCHOR) could be bound to this\n\
    \      IPv6 address.  The LIFETIME is set to DEFAULT_LT, and the state is\n  \
    \    changed to VALID.\n   VALID\n   To arrive at this state, the SEND SAVI device\
    \ has successfully\n   validated address ownership and has created a binding for\
    \ IPaddr.\n   Relevant transitions for this state are triggered by the reception\
    \ of\n   DAD_NSOL from the BINDING_ANCHOR port, other Validating port or a TP,\n\
    \   and any packet other than DAD_NSOL from a Validating port other than\n   the\
    \ BINDING_ANCHOR or a TP.  The expiration of LIFETIME is also\n   relevant to\
    \ trigger a check for address ownership for the node at the\n   BINDING_ANCHOR\
    \ port.\n   Messages received from the BINDING_ANCHOR port:\n   o  If a validated\
    \ DAD_NSOL with IPaddr as a source address is\n      received through the BINDING_ANCHOR\
    \ port, it is forwarded to the\n      appropriate Trusted ports.  The LIFETIME\
    \ is set to TENT_LT, and\n      the state is changed to TENTATIVE_DAD.\n   o \
    \ Any packet other than a DAD_NSOL containing IPaddr as a source\n      address\
    \ arriving from the BINDING_ANCHOR port is forwarded\n      appropriately.  The\
    \ state is not changed.\n   Messages received from a Trusted port:\n   o  If a\
    \ DAD_NSOL with IPaddr as a source address is received through\n      a Trusted\
    \ port, the message is forwarded to VP.  The LIFETIME is\n      set to TENT_LT,\
    \ a secured NUD_NSOL message is sent to IPaddr\n      through VP, and the state\
    \ is changed to TESTING_VP.\n   o  If any packet other than a DAD_NSOL with IPaddr\
    \ as a source\n      address is received through a Trusted port, the packet is\n\
    \      forwarded to VP and to other appropriate Trusted ports.  A secured\n  \
    \    NUD_NSOL is sent to the BINDING_ANCHOR port, the LIFETIME is set\n      to\
    \ TENT_LT, and the state is changed to TESTING_VP.\n   Messages received from\
    \ a Validating port different from the\n   BINDING_ANCHOR:\n   o  If a validated\
    \ DAD_NSOL packet with IPaddr as a source address is\n      received through a\
    \ Validating port VP' (a VP' different from the\n      current BINDING ANCHOR),\
    \ the message is forwarded to the\n      BINDING_ANCHOR port.  In addition, a\
    \ secured NUD_NSOL is sent to\n      the BINDING_ANCHOR port, the ALTERNATIVE\
    \ BINDING ANCHOR is set to\n      port VP' (for future use if the node at VP'\
    \ is finally selected),\n      the LIFETIME is set to TENT_LT, and the state is\
    \ changed to\n      TESTING_VP'.\n   o  If any packet other than a DAD_NSOL with\
    \ IPaddr as a source\n      address is received from a Validating port VP', different\
    \ from the\n      current BINDING_ANCHOR for this binding, VP, the packet is\n\
    \      discarded.  The SEND SAVI device MAY issue a secured NUD_NSOL\n      through\
    \ the BINDING_ANCHOR port, store VP' in the ALTERNATIVE\n      BINDING ANCHOR\
    \ for possible future use, set the LIFETIME to\n      TENT_LT, and change the\
    \ state to TESTING_VP'.  An alternative to\n      this behavior is that the SEND\
    \ SAVI device MAY not do anything (in\n      this case, the state would eventually\
    \ change after a maximum\n      DEFAULT_LT time; if the node at VP does not respond\
    \ to a NUD_NSOL\n      at TESTING_VP, the state is moved to NO_BIND).  Then, a\
    \ packet\n      arriving from VP' would trigger a process that may end up with\n\
    \      binding for the node connecting to VP'.\n   LIFETIME expires:\n   o  If\
    \ LIFETIME expires, a secured NUD_NSOL message is sent through\n      the BINDING_ANCHOR\
    \ port to IPaddr, the LIFETIME is set to TENT_LT,\n      and the state is changed\
    \ to TESTING_VP.  In the TESTING_VP state,\n      packets are still being forwarded\
    \ until the timer expires without\n      receiving a NUD_NADV.\n   TESTING_VP\n\
    \   When the SEND SAVI device enters the TESTING_VP state, the current\n   Validating\
    \ port is under check through a secured NUD_NSOL message\n   generated by the\
    \ SEND SAVI device.  While testing, packets from the\n   current Validating port\
    \ are forwarded.  Packets coming from Trusted\n   ports are also forwarded.  The\
    \ relevant events for this state are the\n   reception of a NUD_NADV message from\
    \ VP; the reception of a DAD_NSOL\n   message from VP, VP', or TP; the reception\
    \ of any packet other than\n   the previous cases from VP, VP', or TP; and the\
    \ expiration of the\n   timer associated to the reception of NUD_NADV.\n   Messages\
    \ received from the BINDING_ANCHOR port:\n   o  If a validated NUD_NADV is received\
    \ from VP, the LIFETIME is\n      changed to DEFAULT_LT, and the state is changed\
    \ to VALID.  The\n      message is not forwarded to any other port.\n   o  If\
    \ a validated DAD_NSOL message is received from VP, it is\n      forwarded to\
    \ the appropriate Trusted ports, the LIFETIME is set to\n      DEFAULT_LT, and\
    \ the state is changed to TENTATIVE_DAD.\n   o  Any packet other than DAD_NSOL\
    \ or NUD_NADV containing IPaddr as a\n      source address arriving from the BINDING_ANCHOR\
    \ port is forwarded.\n      Neither the LIFETIME nor the state are changed.\n\
    \   Messages received from a Trusted port:\n   o  If a DAD_NSOL packet is received\
    \ from a Trusted port, the message\n      is forwarded to VP and the appropriate\
    \ Trusted ports.  Neither the\n      LIFETIME nor the state are changed.  The\
    \ node at the\n      BINDING_ANCHOR port is under check; if it still is at this\
    \ port,\n      it should answer with a NUD_NADV and also with a DAD_NADV.  If\
    \ it\n      is not there, neither the NUD_NADV nor the DAD_NADV will be\n    \
    \  received, the timer will expire, and the local state will move to\n      NO_BIND.\n\
    \   o  If a packet other than a DAD_NSOL arrives from a Trusted port, the\n  \
    \    packet is forwarded.  Neither the LIFETIME nor the state are\n      changed.\n\
    \   Messages received from a Validating port different from the\n   BINDING_ANCHOR:\n\
    \   o  If a valid DAD_NSOL is received from a Validating port VP' other\n    \
    \  than the current BINDING_ANCHOR port, the message is forwarded to\n      the\
    \ BINDING_ANCHOR port and to the appropriate Trusted ports.  In\n      addition,\
    \ a secured NUD_NSOL is sent to the BINDING_ANCHOR port,\n      the ALTERNATIVE\
    \ BINDING ANCHOR is set to VP' (for future use if\n      the node at VP' is finally\
    \ selected), the LIFETIME is set to\n      TENT_LT, and the state is changed to\
    \ TESTING_VP'.\n   o  Any other packet received from a Validating port VP' other\
    \ than\n      the BINDING_ANCHOR port is discarded.  This may occur because the\n\
    \      node has moved but has not issued a DAD_NSOL or the DAD_NSOL\n      message\
    \ has been lost.  The state will eventually move to NO_BIND,\n      and then the\
    \ packets sent from VP' will trigger the creation of\n      the binding for VP'.\n\
    \   LIFETIME expires:\n   o  If the LIFETIME expires, the LIFETIME is cleared\
    \ and the state is\n      changed to NO_BIND.\n   TESTING_VP'\n   To arrive at\
    \ this state, the SEND SAVI device has received an\n   indication that a node\
    \ at VP' different from the BINDING_ANCHOR port\n   wants to send data with IPaddr\
    \ as a source address and has occurred\n   while a binding existed for VP.  The\
    \ port VP' that triggered the\n   change of the state to TESTING_VP' was stored\
    \ at the\n   ALTERNATIVE_BINDING_ANCHOR, so that it can be retrieved if the node\n\
    \   at VP' is determined as the legitimate owner of IPaddr.  The SEND\n   SAVI\
    \ device has issued a NUD_NSOL to IPaddr through the\n   BINDING_ANCHOR port.\
    \  The relevant events that may occur in this case\n   are the reception of a\
    \ NUD_NADV from port VP (the BINDING_ANCHOR\n   port); the reception of a DAD_NSOL\
    \ from VP, VP', TP, and VP\" (VP\"\n   different from VP and VP'); the reception\
    \ of any other packet from\n   VP, VP', TP, or VP\"; and the expiration of the\
    \ timer.\n   Messages received from the BINDING_ANCHOR port:\n   o  A validated\
    \ NUD_NADV is received from the BINDING_ANCHOR port.\n      The reception of a\
    \ valid NUD_NADV indicates that the node at VP is\n      defending its address.\
    \  The BINDING_ANCHOR in use is kept, the\n      LIFETIME is set to DEFAULT_LT,\
    \ and the state is changed to VALID.\n   o  If a valid DAD_NSOL is received from\
    \ the BINDING_ANCHOR port, it\n      is forwarded to VP' (the port stored in the\n\
    \      ALTERNATIVE_BINDING_ANCHOR).  The BINDING_ANCHOR in use is kept,\n    \
    \  the LIFETIME is set to TENT_LT, and the state is changed to\n      TENTATIVE_DAD.\
    \  When the DAD_NSOL message is received by the node\n      at VP', the address\
    \ will not be configured.\n   o  Any packet other than a validated DAD_NSOL, or\
    \ a validated\n      NUD_NADV coming from the BINDING_ANCHOR port, is forwarded,\
    \ and\n      the state is not changed.\n   Messages received from the ALTERNATIVE_BINDING_ANCHOR\
    \ Validating\n   port:\n   o  If a valid DAD_NSOL is received from the port stored\
    \ in the\n      ALTERNATIVE_BINDING_ANCHOR, it is forwarded to the BINDING_ANCHOR\n\
    \      port.  The BINDING_ANCHOR and the ALTERNATIVE BINDING ANCHOR are\n    \
    \  kept, the LIFETIME is set to DEFAULT_LT, and the state is not\n      changed.\n\
    \   o  Any packet other than a validated DAD_NSOL coming from the\n      ALTERNATIVE_BINDING_ANCHOR\
    \ port is discarded, and the state is not\n      changed.\n   Messages received\
    \ from a Validating port different from the\n   BINDING_ANCHOR and the ALTERNATIVE_BINDING_ANCHOR\
    \ ports:\n   o  If a validated DAD_NSOL is received from port VP\", different\
    \ from\n      BINDING_ANCHOR and the ALTERNATIVE_BINDING_ANCHOR ports, it is\n\
    \      forwarded to the BINDING_ANCHOR and the ALTERNATIVE_BINDING_ANCHOR\n  \
    \    ports.  The node at the ALTERNATIVE BINDING ANCHOR port is\n      expected\
    \ to unconfigure its address if the message triggering the\n      transition to\
    \ this state was a DAD_NSOL message received from the\n      ALTERNATIVE_BINDING_ANCHOR\
    \ port (and not any other packet).  The\n      state remains in TESTING_VP', although\
    \ VP\" is stored in the\n      ALTERNATIVE_BINDING_ANCHOR for future use if the\
    \ node at VP\" is\n      finally selected.  The LIFETIME is not changed.\n   o\
    \  Any packet other than a validated DAD_NSOL received from port VP\"\n      is\
    \ discarded and does not affect the state.\n   Messages received from a Trusted\
    \ port:\n   o  If a DAD_NSOL is received from a Trusted port, the message is\n\
    \      forwarded to the BINDING_ANCHOR, ALTERNATIVE_BINDING_ANCHOR ports,\n  \
    \    and other appropriate Trusted ports.  The LIFETIME is left\n      unchanged,\
    \ and the state is changed to TESTING_VP.  The node at\n      the ALTERNATIVE_BINDING_ANCHOR\
    \ port is expected to unconfigure its\n      address if the packet triggering\
    \ the transition to this state was\n      a DAD_NSOL message received from the\
    \ ALTERNATIVE_BINDING_ANCHOR\n      port.\n   o  Any packet other than a DAD_NSOL\
    \ coming from a Trusted port is\n      forwarded appropriately, but the state\
    \ is not changed.\n   LIFETIME expires:\n   o  If LIFETIME expires, it is assumed\
    \ that the node for which the\n      binding existed is no longer connected through\
    \ the BINDING_ANCHOR\n      port.  Therefore, the BINDING_ANCHOR is set to the\n\
    \      ALTERNATIVE_BINDING_ANCHOR port value.  The LIFETIME is set to\n      DEFAULT_LT,\
    \ and the state is changed to VALID.\n   TENTATIVE_NUD\n   To arrive at this state,\
    \ a data packet has been received through the\n   BINDING_ANCHOR port without\
    \ any existing binding in the SEND SAVI\n   device.  The SEND SAVI device has\
    \ sent a NUD_NSOL message to the\n   BINDING_ANCHOR port.  The relevant events\
    \ for this case are the\n   reception of a NUD_NADV from the BINDING_ANCHOR port;\
    \ the reception\n   of a DAD_NSOL from the BINDING_ANCHOR port, other VP different\
    \ from\n   the BINDING_ANCHOR port, or a TP; and the reception of any packet\n\
    \   other than a DAD_NSOL and a NUD_NADV from the BINDING_ANCHOR port and\n  \
    \ a DAD_NSOL for other VP different from the BINDING_ANCHOR port, or\n   TP. \
    \ In addition, the LIFETIME may expire.\n   Messages received from the BINDING_ANCHOR\
    \ port:\n   o  If a validated NUD_NADV message is received through the\n     \
    \ BINDING_ANCHOR port, the LIFETIME is set to TENT_LT, and the state\n      is\
    \ changed to VALID.  The message is not forwarded to any port.\n   o  If a validated\
    \ DAD_NSOL message is received through the\n      BINDING_ANCHOR port, it is forwarded\
    \ to the appropriate Trusted\n      ports, the LIFETIME is set to TENT_LT, and\
    \ the state is changed to\n      TENTATIVE_DAD.\n   o  Any packet other than NUD_NADV\
    \ or DAD_NSOL received through the\n      BINDING_ANCHOR port is discarded.\n\
    \   Messages received from a Validating port different from the\n   BINDING_ANCHOR:\n\
    \   o  If a validated DAD_NSOL message is received through port VP'\n      different\
    \ from the BINDING_ANCHOR port, it is forwarded to the\n      appropriate Trusted\
    \ ports, the LIFETIME is set to TENT_LT, the\n      BINDING_ANCHOR is set to VP',\
    \ and the state is changed to\n      TENTATIVE_DAD.\n   o  Any packet other than\
    \ validated DAD_NSOL received through port VP'\n      MUST NOT be forwarded unless\
    \ the next state for the binding is\n      VALID.  The packets received MAY be\
    \ discarded or MAY be stored to\n      be sent if the state changes later to VALID.\
    \  The state is left\n      unchanged.\n   Messages received from a Trusted port:\n\
    \   o  If a DAD_NSOL message is received through a Trusted port, it is\n     \
    \ forwarded to the BINDING_ANCHOR port, and the state is left\n      unchanged.\n\
    \   o  Any other packet received from a Trusted port is forwarded\n      appropriately.\
    \  This packet may come from a SEND SAVI device that\n      has securely validated\
    \ the attachment of the node to its\n      Validating port, according to SEND\
    \ SAVI rules.  The state is left\n      unchanged.\n   LIFETIME expires:\n   o\
    \  If LIFETIME expires, the LIFETIME is cleared and the state is\n      changed\
    \ to NO_BIND.\n"
- title: 3.4.  SEND SAVI Port Configuration Guidelines
  contents:
  - "3.4.  SEND SAVI Port Configuration Guidelines\n   The detailed guidelines for\
    \ port configuration in SEND SAVI devices\n   are:\n   o  Ports connected to another\
    \ SEND SAVI device MUST be configured as\n      Trusted ports.  Not doing so will\
    \ prevent off-link traffic from\n      being forwarded, along with the following\
    \ effects for on-link\n      traffic: significantly increase the CPU time, memory\
    \ consumption,\n      and signaling traffic due to SEND SAVI validation, in both\
    \ the\n      SEND SAVI devices and the node whose address is being validated.\n\
    \   o  Ports connected to hosts SHOULD be configured as Validating ports.\n  \
    \    Not doing so will allow the host connected to that port to send\n      packets\
    \ with a spoofed source address.\n   o  No more than one host SHOULD be connected\
    \ to each port.\n      Connecting more than one host to a port will allow hosts\
    \ to\n      generate packets with the same source address as the other hosts\n\
    \      connected to the same port, and will allow replaying attacks to be\n  \
    \    performed as described in Section 5.1.\n   o  Ports connected to routers\
    \ MUST be configured as Trusted ports.\n      Not doing so results in SEND SAVI\
    \ devices discarding off-link\n      traffic.  Note that this means that since\
    \ routers are connected\n      through Trusted ports, they can generate traffic\
    \ with any source\n      address, even those belonging to the link.\n   o  Ports\
    \ connected to a chain of one or more legacy switches that\n      have other SEND\
    \ SAVI devices but have no routers or hosts attached\n      to them SHOULD be\
    \ configured as Trusted ports.  Not doing so will\n      significantly increase\
    \ the memory consumption in the SEND SAVI\n      devices and increase the signaling\
    \ traffic due to SEND SAVI\n      validation.\n"
- title: 3.5.  VLAN Support
  contents:
  - "3.5.  VLAN Support\n   In the case where the SEND SAVI device is a switch that\
    \ supports\n   customer VLANs [IEEE.802-1Q.2005], the SEND SAVI specification\
    \ MUST\n   behave as if there was one SEND SAVI process per customer VLAN.  The\n\
    \   SEND SAVI process of each customer VLAN will store the binding\n   information\
    \ corresponding to the nodes attached to that particular\n   customer VLAN.\n"
- title: 3.6.  Protocol Constants
  contents:
  - "3.6.  Protocol Constants\n   TENT_LT is 500 milliseconds.\n   DEFAULT_LT is 5\
    \ minutes.\n"
- title: 4.  Protocol Walk-Through
  contents:
  - "4.  Protocol Walk-Through\n   In this section, we include two cases that illustrate\
    \ the behavior of\n   SEND SAVI, the change of the attachment port of a host,\
    \ and the\n   attack of a malicious host.  We use the topology depicted in\n \
    \  Figure 4.\n               +---+\n               | H |\n               +---+\n\
    \                 |\n                 |\n               +-1-----2-+       +-1-----2-+\n\
    \               |         |       |         |\n               |  SAVI1  |    \
    \   |  SAVI2  |\n               |         |       |         |\n              \
    \ +-3-----4-+       +-3-----4-+\n                 |                 |\n      \
    \           -------------------\n     Figure 4: Reference SEND SAVI Topology for\
    \ Protocol Walk-Through\n"
- title: 4.1.  Change of the Attachment Point of a Host
  contents:
  - "4.1.  Change of the Attachment Point of a Host\n   There are two cases, depending\
    \ on whether the host H moves to a\n   different port on the same switch or to\
    \ a different switch.\n"
- title: 4.1.1.  Moving to a Port of the Same Switch
  contents:
  - "4.1.1.  Moving to a Port of the Same Switch\n   Host H is connected to port 1\
    \ of SAVI1 and moves to port 2 of the\n   same switch.  Before moving, the SEND\
    \ SAVI state associated to IPH,\n   the IP address of H, is:\n   SAVI1=VALID,\
    \ BINDING_ANCHOR=1 / SAVI2=NO_BIND\n   In the general case, H issues a DAD_NSOL\
    \ message for IPH when it is\n   connected to a different port.  When SAVI1 receives\
    \ this message, it\n   validates it and changes its state to:\n   SAVI1=TESTING_VP',\
    \ BINDING_ANCHOR=1, ALTERNATIVE_BINDING_ANCHOR=2,\n   TIMER=TENT_LT / SAVI2=NO_BIND\n\
    \   The DAD_NSOL message is propagated to port 1, because it is the\n   current\
    \ BINDING_ANCHOR, and the Trusted port 3; it is not propagated\n   to Validating\
    \ port 4.  SAVI1 configures a timer for TENT_LT seconds.\n   In addition, SAVI1\
    \ generates a NUD_NSOL and sends it through port 1.\n   When SAVI2 receives this\
    \ message through its Trusted port, it\n   discards it and remains in the NO_BIND\
    \ state.\n   SAVI1 waits for a NUD_NADV message to be received from port 1.  Since\n\
    \   there is no node attached to 1, there is no response for either of\n   these\
    \ messages.  When TENT_LT expires at SAVI1, the state changes to:\n   SAVI1=VALID,\
    \ BINDING_ANCHOR=2 / SAVI2=NO_BIND\n   If the node moving does not issue a DAD_NSOL\
    \ when it attaches to port\n   2, then SAVI1 will receive a data packet through\
    \ this port.  The data\n   packet is discarded, SAVI1 issues a secured NUD_NSOL\
    \ through port 1,\n   and the state changes to TESTING_VP'.\n   SAVI1=TESTING_VP',\
    \ BINDING_ANCHOR=1, ALTERNATIVE_BINDING_ANCHOR=2\n   TIMER=TENT_LT / SAVI2=NO_BIND\n\
    \   SAVI1 waits for a NUD_NADV message to be received from port 1.  Since\n  \
    \ there is no node attached to 1, there is no response for neither of\n   these\
    \ messages.  When TENT_LT expires at SAVI1, the state changes to:\n   SAVI1=VALID,\
    \ BINDING_ANCHOR=2 / SAVI2=NO_BIND\n   An alternative behavior allowed by the\
    \ specification for the case in\n   which the host does not issue a DAD_NSOL is\
    \ that SAVI1 does nothing.\n   In this case, after some time (bounded by DEFAULT_LT),\
    \ the switch\n   will change the state for IPH to TESTING_VP, check if H is still\
    \ at\n   port 1 (which it is not), and move the state to NO_BIND.  Then, a\n \
    \  packet arriving from port 2 would trigger a process that finishes\n   with\
    \ a VALID stated with BINDING_ANCHOR=2.\n"
- title: 4.1.2.  Moving to a Port of a Different Switch
  contents:
  - "4.1.2.  Moving to a Port of a Different Switch\n   Host H, connected to port\
    \ 1 of SAVI1, moves to port 4 of SAVI2.\n   Before moving, the SEND SAVI state\
    \ associated to IPH, the IP address\n   of H, is:\n   SAVI1=VALID, BINDING_ANCHOR=1\
    \ / SAVI2=NO_BIND\n   If H issues a DAD_NSOL message for IPH when it connects\
    \ to port 4 of\n   SAVI2, the state is changed to:\n   SAVI1=VALID, BINDING_ANCHOR=1\
    \ / SAVI2=TENTATIVE_DAD,\n   BINDING_ANCHOR=4, TIMER=TENT_LT\n   The DAD_NSOL\
    \ message is propagated only through the Trusted port of\n   SAVI2.  Then, SAVI1\
    \ changes its state as follows:\n   SAVI1=TESTING_VP, BINDING_ANCHOR=1, TIMER=TENT_LT\
    \ /\n   SAVI2=TENTATIVE_DAD, BINDING_ANCHOR=4, TIMER=TENT_LT\n   SAVI1 propagates\
    \ the DAD_NSOL message to port 1.  Since the only node\n   that can answer with\
    \ a secured DAD_NUD has moved, the timer at SAVI2\n   expires, and SAVI2 changes\
    \ its state to VALID:\n   SAVI1=TESTING_VP, BINDING_ANCHOR=1, TIMER=TENT_LT /\
    \ SAVI2=VALID,\n   BINDING_ANCHOR=4\n   Just a very short time after, the timer\
    \ at SAVI1 expires, and the\n   state changes to NO_BIND:\n   SAVI1=NO_BIND /\
    \ SAVI2=VALID, BINDING_ANCHOR=4\n   If host H does not send a DAD_NSOL when it\
    \ moves to SAVI2 but instead\n   sends a data packet, SAVI2 changes its state\
    \ to TENTATIVE_NUD:\n   SAVI1=VALID, BINDING_ANCHOR=1 / SAVI2=TENTATIVE_NUD,\n\
    \   BINDING_ANCHOR=4, TIMER=TENT_LT\n   SAVI2 issues a secured NUD_NSOL through\
    \ port 4.  H is assumed to have\n   the address configured (otherwise, it should\
    \ not have generated a\n   data packet), so it can respond with a NUD_NADV.  When\
    \ SAVI1 receives\n   the NUD_NADV and validates it, the state is changed to VALID:\n\
    \   SAVI1=VALID, BINDING_ANCHOR=1 / SAVI2=VALID, BINDING_ANCHOR=4\n   After some\
    \ time (bounded by DEFAULT_LT), the state in SAVI1 will\n   expire, and SAVI1\
    \ will perform a check for host H:\n   SAVI1=TESTING_VP, BINDING_ANCHOR=1, TIMER=TENT_LT\
    \ / SAVI2=VALID,\n   BINDING_ANCHOR=4\n   SAVI1 issues a NUD_NSOL through port\
    \ 1 for IPH.  No response is\n   received in this case, so SAVI1 changes its state\
    \ to NO_BIND:\n   SAVI1=NO_BIND / SAVI2=VALID, BINDING_ANCHOR=4\n"
- title: 4.2.  Attack of a Malicious Host
  contents:
  - "4.2.  Attack of a Malicious Host\n   Host H is attached to the SEND SAVI infrastructure\
    \ through port 1 of\n   SAVI1.  We consider that host M starts sending data packets\
    \ using IPH\n   (the IP address of H) as the source address, without issuing a\n\
    \   DAD_NSOL (a similar analysis can be done for this case).\n"
- title: 4.2.1.  M Attaches to the Same Switch as the Victim's Switch
  contents:
  - "4.2.1.  M Attaches to the Same Switch as the Victim's Switch\n   The initial\
    \ state before the attack of M is:\n   SAVI1=VALID, BINDING_ANCHOR=1 / SAVI2=NO_BIND\n\
    \   M attaches to port 2 of SAVI1 and starts sending data packets.  When\n   SAVI1\
    \ receives the data packet, the packet is discarded.  SEND SAVI\n   may issue\
    \ a secured NUD_NSOL through port 1 and changes the state to:\n   SAVI1=TESTING_VP',\
    \ BINDING_ANCHOR=1, ALTERNATIVE_BINDING_ANCHOR=2,\n   TIMER=TENT_LT / SAVI2=NO_BIND\n\
    \   Host H is still attached to port 1, so it receives the NUD_NSOL and\n   responds\
    \ with a secured NUD_NADV.  SAVI1 receives this message,\n   validates it, and\
    \ changes its state again to:\n   SAVI1=VALID, BINDING_ANCHOR=1 / SAVI2=NO_BIND\n\
    \   To prevent the drain of CPU resources in SAVI1, the processing of\n   further\
    \ packets received from port 2 may be rate-limited, as\n   discussed in Section\
    \ 5.2.\n   An alternative to the previous behavior is that SAVI1 does nothing\n\
    \   when node M starts sending packets from port 2.  In this case, when\n   the\
    \ timer to renew the state triggers (this time it's bounded by\n   DEFAULT_LT),\
    \ SAVI1 moves the state to TESTING_VP, sends a NUD_NSOL\n   through port 1, host\
    \ H responds, and the state remains in VALID for\n   BINDING_ANCHOR=1.  In this\
    \ way, communication of host H is also\n   defended.\n"
- title: 4.2.2.  M Attaches to a Different Switch to the Victim's Switch
  contents:
  - "4.2.2.  M Attaches to a Different Switch to the Victim's Switch\n   The initial\
    \ state before the attack of M is:\n   SAVI1=VALID, BINDING_ANCHOR=1 / SAVI2=NO_BIND\n\
    \   M attaches to port 2 of SAVI2 and starts sending data packets.  When\n   SAVI2\
    \ receives the data packet, it changes the state to:\n   SAVI1=VALID, BINDING_ANCHOR=1\
    \ / SAVI2=TENTATIVE_DAD,\n   BINDING_ANCHOR=2, TIMER=TENT_LT\n   SAVI2 issues\
    \ a secured NUD_NSOL through port 2.  Since M does not own\n   the IPH CGA, it\
    \ cannot respond to the message.  When the timer\n   expires, the state is moved\
    \ back to:\n   SAVI1=VALID, BINDING_ANCHOR=1 / SAVI2=NO_BIND\n   To prevent the\
    \ drain of CPU resources in SAVI2, the processing of\n   further packets received\
    \ from port 2 may be rate-limited, as\n   discussed in Section 5.2.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   SEND SAVI operates only with validated SEND messages\
    \ to create\n   bindings.  Note that IPv6 packets generated by non-SEND nodes\
    \ will be\n   discarded by the first SEND SAVI device receiving it.  Therefore,\n\
    \   attackers cannot obtain any benefit by not using SEND.  In order to\n   perform\
    \ address validation in a mixed scenario comprising SEND and\n   non-SEND devices,\
    \ a different solution is required, which should be\n   addressed in another document.\n\
    \   Nodes MUST NOT assume that all SEND messages received from a SEND\n   SAVI\
    \ device are validated, since these devices only validate the\n   messages strictly\
    \ required for SEND SAVI operation.  Among the number\n   of messages that are\
    \ not validated by SEND SAVI, we can name NUD_NSOL\n   messages generated by other\
    \ nodes and its corresponding NUD_NADV\n   responses, or RSOL messages.\n   SEND\
    \ SAVI improves protection compared to conventional SAVI as a\n   result of the\
    \ increased ability of SEND nodes to prove address\n   ownership.\n   A critical\
    \ security consideration regarding SEND SAVI deals with the\n   need of proper\
    \ configuration of the roles of the ports in a SEND SAVI\n   deployment scenario.\
    \  Regarding security, the main requirement is\n   that ports defining the protected\
    \ perimeter SHOULD be configured as\n   Validating ports.  Not doing so will allow\
    \ an attacker to send\n   packets using any source address, regardless of the\
    \ bindings\n   established in other SEND SAVI devices.\n"
- title: 5.1.  Protection against Replay Attacks
  contents:
  - "5.1.  Protection against Replay Attacks\n   One possible concern about SEND SAVI\
    \ is its behavior when an attacker\n   tries to forge the identity of a legitimate\
    \ node by replaying SEND\n   messages used by the SEND SAVI specification.  An\
    \ attacker could\n   replay any of these messages to interfere with the SEND SAVI\n\
    \   operation.  For example, it could replay a DAD_NSOL message to abort\n   the\
    \ configuration of an address for a legitimate node and to gain the\n   right\
    \ to use the address for DEFAULT_LT seconds.\n   We can analyze two different\
    \ cases when considering SEND SAVI replay\n   attacks:\n   o  When the SEND message\
    \ replayed is used to create or update binding\n      information for SEND SAVI,\
    \ since the port through which this\n      message is received is key to the SEND\
    \ SAVI operation.  SEND SAVI\n      creates and maintains bindings as a result\
    \ of the reception of\n      DAD_NSOL messages and of the exchange of NUD_NSOL/NUD_NADV\n\
    \      messages.\n   o  When the SEND message replayed does not result in the\
    \ update of\n      binding information for SEND SAVI and, thus, is not related\
    \ to the\n      specific port through which it was received.  Such situations\
    \ are\n      the reception of CPA messages containing certificates, and the\n\
    \      processing of an RADV message coming from a Trusted port, which\n     \
    \ can be used in SEND SAVI to populate the SEND SAVI Prefix List.\n      In these\
    \ two cases, the security risks are equivalent to those of\n      the SEND operation,\
    \ i.e., we can consider that the information\n      will not be changed by its\
    \ legitimate sender for the time during\n      which the SEND specification allows\
    \ replaying (which depends on\n      the values of TIMESTAMP_FUZZ and TIMESTAMP_DRIFT\
    \ [RFC3971]).\n   For replay of messages belonging to the second case, i.e., messages\n\
    \   that do not result in changes in the SEND SAVI binding information,\n   the\
    \ security provided by SEND is sufficient.  For the replay of\n   messages belonging\
    \ to the first case, DAD_NSOL and NUD_NSOL/NUD_NADV\n   messages, protection results\
    \ from the behavior of SEND SAVI, as\n   specified in Section 3.3.2, which restricts\
    \ the ports to which the\n   messages involved in SEND SAVI binding updates are\
    \ disseminated.\n   SEND SAVI devices only forward these messages to ports for\
    \ which a\n   binding to the address being tested by the DAD_NSOL message existed.\n\
    \   Therefore, it is not enough for an attacker to subscribe to a\n   Solicited\
    \ Node address to receive DAD_NSOL messages sent to that\n   address, but the\
    \ attacker needs to generate a valid DAD_NSOL message\n   associated to the address\
    \ for which the binding is being tested,\n   which is deemed unfeasible [RFC3971].\n"
- title: 5.2.  Protection against Denial-of-Service Attacks
  contents:
  - "5.2.  Protection against Denial-of-Service Attacks\n   The attacks against the\
    \ SEND SAVI device basically consist of making\n   the SEND SAVI device consume\
    \ its resources until it runs out of them.\n   For instance, a possible attack\
    \ would be to send packets with\n   different source addresses, making the SEND\
    \ SAVI device create state\n   for each of the addresses and waste memory.  At\
    \ some point, the SEND\n   SAVI device runs out of memory and needs to decide\
    \ how to react.  The\n   result is that some form of garbage collection is needed\
    \ to prune the\n   entries.  When the SEND SAVI device runs out of the memory\
    \ allocated\n   for the SEND SAVI Database, it is RECOMMENDED that it creates\
    \ new\n   entries by deleting the entries with a higher Creation time.  This\n\
    \   implies that older entries are preserved and newer entries overwrite\n   each\
    \ other.  In an attack scenario where the attacker sends a batch\n   of data packets\
    \ with different source addresses, each new source\n   address is likely to rewrite\
    \ another source address created by the\n   attack itself.  It should be noted\
    \ that entries are also garbage\n   collected using the DEFAULT_LT, which is updated\
    \ by NUD_NSOL/NUD_NADV\n   exchanges.  The result is that in order for an attacker\
    \ to actually\n   fill the SEND SAVI Database with false source addresses, it\
    \ needs to\n   continuously answer to NUD_NSOL for all the different source\n\
    \   addresses, so that the entries grow old and compete with the\n   legitimate\
    \ entries.  The result is that the cost of the attack is\n   highly increased\
    \ for the attacker.\n   In addition, it is also RECOMMENDED that a SEND SAVI device\
    \ reserves\n   a minimum amount of memory for each available port (in the case\
    \ where\n   the port is used as part of the L2 anchor).  The REQUIRED minimum\
    \ is\n   the memory needed to store four bindings associated to the port,\n  \
    \ although it SHOULD be raised if the ratio between the maximum number\n   of\
    \ bindings allowed in the device and the number of ports is high.\n   The motivation\
    \ for setting a minimum number of bindings per port is\n   as follows.  An attacker\
    \ attached to a given port of a SEND SAVI\n   device may attempt to launch a DoS\
    \ attack towards the SEND SAVI\n   device by creating many bindings for different\
    \ addresses.  It can do\n   so by sending DAD_NSOL for different addresses.  The\
    \ result is that\n   the attack will consume all the memory available in the SEND\
    \ SAVI\n   device.  The above recommendation aims to reserve a minimum amount\
    \ of\n   memory per port, so that nodes located in different ports can make\n\
    \   use of the reserved memory for their port even if a DoS attack is\n   occurring\
    \ in a different port.\n   The SEND SAVI device may store data packets while the\
    \ address is\n   being verified, for example, when a DAD_NSOL is lost before arriving\n\
    \   to the SEND SAVI device to which the host attaches; when the host\n   sends\
    \ data packets, these data packets may be stored until the SEND\n   SAVI device\
    \ verifies the binding by means of a NUD packet exchange.\n   In this case, the\
    \ memory for data packet storage may also be a target\n   of DoS attacks.  A SEND\
    \ SAVI device MUST limit the amount of memory\n   used to store data packets,\
    \ allowing the other functions (such as\n   being able to store new bindings)\
    \ to have available memory even in\n   the case of an attack, such as those described\
    \ above.\n   It is worth noting that the potential of DoS attacks against the\
    \ SEND\n   SAVI network is increased due to the use of costly cryptographic\n\
    \   operations in order to validate the address of the nodes.  An\n   attacker\
    \ could generate packets using new source addresses in order\n   to make the closest\
    \ SEND SAVI device spend CPU time to validate\n   DAD_NSOL messages or to generate\
    \ a secure NUD_NSOL.  This attack can\n   be used to drain CPU resources of SEND\
    \ SAVI devices with a very low\n   cost for the attacker.  In order to solve this\
    \ problem, rate-limiting\n   the processing of packets that trigger SEND SAVI\
    \ events SHOULD be\n   enforced on a per-port basis.\n"
- title: 5.3.  Considerations on the Deployment Model for Trust Anchors
  contents:
  - "5.3.  Considerations on the Deployment Model for Trust Anchors\n   The SEND specification\
    \ [RFC3971] proposes two deployment models for\n   trust anchors: either a centralized\
    \ model relaying on a globally\n   rooted public key infrastructure or a more\
    \ local, decentralized\n   deployment model in which end hosts are configured\
    \ with a collection\n   of public keys that are trusted only on a domain.\n  \
    \ The appeal of a centralized model is the possibility for hosts to use\n   SEND\
    \ to validate routers as they move through links belonging to\n   different organizations\
    \ without additional configuration.  However,\n   without any further protection,\
    \ it also enables routers authorized\n   with a certificate path rooted on a global\
    \ trust anchor to appear as\n   legitimate routers in a link in which they were\
    \ not intended to act\n   as such.  This threat already existed for SEND deployments,\
    \ for which\n   links configured to accept centralized trust anchors may send\n\
    \   outgoing traffic and use prefix information from alien routers.  In a\n  \
    \ SEND SAVI deployment, such routers may be able to deliver off-link\n   traffic\
    \ to any node of the link.\n   In order to cope with this threat, SEND SAVI specifies\
    \ that nodes are\n   only allowed to behave as routers if they connect through\
    \ Trusted\n   ports.  In particular, RADV messages and traffic with off-link source\n\
    \   addresses are discarded when received through Validating ports, which\n  \
    \ are the ports intended for non-trusted infrastructure, as moving\n   nodes.\
    \  The protection provided by filtering RADV messages prevents\n   SEND nodes\
    \ from identifying alien routers as legitimate routers, even\n   though the trust\
    \ anchor of these routers is valid.\n   Besides, it is worth to say that SEND\
    \ SAVI supports a decentralized\n   deployment model.\n"
- title: 5.4.  Residual Threats
  contents:
  - "5.4.  Residual Threats\n   SEND SAVI assumes that a host will be able to defend\
    \ its address when\n   the DAD procedure is executed for its addresses, and that\
    \ it will\n   answer to a NUD_NSOL with a NUD_NADV when required.  This is needed,\n\
    \   among other things, to support mobility within a link (i.e., to allow\n  \
    \ a host to detach and reconnect to a different layer-2 anchor of the\n   same\
    \ IP subnetwork, without changing its IP address).  If the SEND\n   SAVI device\
    \ does not see the DAD_NADV or the NUD_NADV, it may grant\n   the binding to a\
    \ different binding anchor.  This means that if an\n   attacker manages to prevent\
    \ a host from defending its source address,\n   it will be able to destroy the\
    \ existing binding and create a new one,\n   with a different binding anchor.\
    \  An attacker may do so, for example,\n   by launching a DoS attack to the host\
    \ that will prevent it to issue\n   proper replies.\n"
- title: 5.5.  Privacy Considerations
  contents:
  - "5.5.  Privacy Considerations\n   A SEND SAVI device MUST delete binding anchor\
    \ information as soon as\n   possible (i.e., as soon as the state for a given\
    \ address is back to\n   NO_BIND), except where there is an identified reason\
    \ why that\n   information is likely to be involved in the detection, prevention,\
    \ or\n   tracing of actual source address spoofing.  Information about the\n \
    \  majority of hosts that never spoof SHOULD NOT be logged.\n"
- title: 6.  Acknowledgments
  contents:
  - "6.  Acknowledgments\n   Thanks to Jean-Michel Combes, Ana Kukec, Ted Lemon, Adrian\
    \ Farrel,\n   Barry Leiba, Brian Haberman, Vicent Roca, and Benoit Claise for\
    \ their\n   reviews and comments on this document.  The text has also benefited\n\
    \   from feedback provided by Tony Cheneau and Greg Daley.\n   Marcelo Bagnulo\
    \ is partly funded by Trilogy 2, a research project\n   supported by the European\
    \ Commission under its Seventh Framework\n   Program.  Alberto Garcia-Martinez\
    \ was supported, in part, by project\n   TEC2012-38362-C03-01, granted by the\
    \ Spanish Economy and\n   Competitiveness Ministry.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3971]  Arkko, J., Kempf, J., Zill, B., and P. Nikander, \"SEcure\n\
    \              Neighbor Discovery (SEND)\", RFC 3971, March 2005.\n   [RFC3972]\
    \  Aura, T., \"Cryptographically Generated Addresses (CGA)\",\n              RFC\
    \ 3972, March 2005.\n   [RFC4861]  Narten, T., Nordmark, E., Simpson, W., and\
    \ H. Soliman,\n              \"Neighbor Discovery for IP version 6 (IPv6)\", RFC\
    \ 4861,\n              September 2007.\n   [RFC4862]  Thomson, S., Narten, T.,\
    \ and T. Jinmei, \"IPv6 Stateless\n              Address Autoconfiguration\",\
    \ RFC 4862, September 2007.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [IEEE.802-1Q.2005]\n              Institute\
    \ of Electrical and Electronics Engineers, \"IEEE\n              Standard for\
    \ Local and Metropolitan Area Networks /\n              Virtual Bridged Local\
    \ Area Networks\", IEEE Standard\n              802.1Q, May 2005.\n   [RFC2827]\
    \  Ferguson, P. and D. Senie, \"Network Ingress Filtering:\n              Defeating\
    \ Denial of Service Attacks which employ IP Source\n              Address Spoofing\"\
    , BCP 38, RFC 2827, May 2000.\n   [RFC6434]  Jankiewicz, E., Loughney, J., and\
    \ T. Narten, \"IPv6 Node\n              Requirements\", RFC 6434, December 2011.\n\
    \   [RFC6620]  Nordmark, E., Bagnulo, M., and E. Levy-Abegnoli, \"FCFS\n     \
    \         SAVI: First-Come, First-Served Source Address Validation\n         \
    \     Improvement for Locally Assigned IPv6 Addresses\", RFC\n              6620,\
    \ May 2012.\n   [RFC7039]  Wu, J., Bi, J., Bagnulo, M., Baker, F., and C. Vogt,\n\
    \              \"Source Address Validation Improvement (SAVI) Framework\",\n \
    \             RFC 7039, October 2013.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Marcelo Bagnulo\n   Universidad Carlos III de Madrid\n\
    \   Av. Universidad 30\n   Leganes, Madrid  28911\n   Spain\n   Phone: 34 91 6248814\n\
    \   EMail: marcelo@it.uc3m.es\n   URI:   http://www.it.uc3m.es\n   Alberto Garcia-Martinez\n\
    \   Universidad Carlos III de Madrid\n   Av. Universidad 30\n   Leganes, Madrid\
    \  28911\n   Spain\n   Phone: 34 91 6248782\n   EMail: alberto@it.uc3m.es\n  \
    \ URI:   http://www.it.uc3m.es\n"
