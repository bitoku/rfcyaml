- title: __initial_text__
  contents:
  - '        Extending ICMP for Interface and Next-Hop Identification

    '
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a data structure that can be appended to selected\n\
    \   ICMP messages.  The ICMP extension defined herein can be used to\n   identify\
    \ any combination of the following: the IP interface upon\n   which a datagram\
    \ arrived, the sub-IP component of an IP interface\n   upon which a datagram arrived,\
    \ the IP interface through which the\n   datagram would have been forwarded had\
    \ it been forwardable, and the\n   IP next hop to which the datagram would have\
    \ been forwarded.\n   Devices can use this ICMP extension to identify interfaces\
    \ and their\n   components by any combination of the following: ifIndex, IPv4\n\
    \   address, IPv6 address, name, and MTU.  ICMP-aware devices can use\n   these\
    \ extensions to identify both numbered and unnumbered interfaces.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5837.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Conventions Used In This Document  . . . . . . . . .\
    \ . . . . .  5\n   3.  Applications . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  5\n     3.1.  Application to Traceroute  . . . . . . . . . . . . .\
    \ . . .  5\n     3.2.  Policy and MTU Detection . . . . . . . . . . . . . . .\
    \ . .  6\n   4.  Interface Information Object . . . . . . . . . . . . . . . .\
    \ .  6\n     4.1.  C-Type Meaning in an Interface Information Object  . . . .\
    \  7\n     4.2.  Interface IP Address Sub-Object  . . . . . . . . . . . . .  9\n\
    \     4.3.  Interface Name Sub-Object  . . . . . . . . . . . . . . . . 10\n  \
    \   4.4.  Interface Information Object Examples  . . . . . . . . . . 10\n    \
    \ 4.5.  Usage  . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n   5. \
    \ Network Address Translation Considerations . . . . . . . . . . 14\n   6.  Security\
    \ Considerations  . . . . . . . . . . . . . . . . . . . 14\n   7.  IANA Considerations\
    \  . . . . . . . . . . . . . . . . . . . . . 15\n   8.  Acknowledgments  . . .\
    \ . . . . . . . . . . . . . . . . . . . . 16\n   9.  References . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . 16\n     9.1.  Normative References .\
    \ . . . . . . . . . . . . . . . . . . 16\n     9.2.  Informative References .\
    \ . . . . . . . . . . . . . . . . . 16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   IP devices use the Internet Control Message Protocol (ICMPv4\n\
    \   [RFC0792] and ICMPv6 [RFC4443]) to convey control information.  In\n   particular,\
    \ when an IP device receives a datagram that it cannot\n   process, it may send\
    \ an ICMP message to the datagram's originator.\n   Network operators and higher-level\
    \ protocols use these ICMP messages\n   to detect and diagnose network issues.\n\
    \   In the simplest case, the source address of the ICMP message\n   identifies\
    \ the interface upon which the datagram arrived.  However,\n   in many cases,\
    \ the incoming interface is not identified by the ICMP\n   message at all.  Details\
    \ follow:\n   According to [RFC1812], when a router generates an ICMPv4 message,\n\
    \   the source address of that message MUST be one of the following:\n   o  one\
    \ of the IP addresses associated with the physical interface\n      over which\
    \ the ICMPv4 message is transmitted\n   o  if that interface has no IP addresses\
    \ associated with it, the\n      device's router-id or host-id is used instead.\n\
    \   If all of the following conditions are true, the source address of\n   the\
    \ ICMPv4 message identifies the interface upon which the original\n   datagram\
    \ arrived:\n   o  the device sends an ICMPv4 message through the same interface\
    \ upon\n      which the original datagram was received\n   o  that interface is\
    \ numbered\n   However, the incoming and outgoing interfaces may be different\
    \ due to\n   an asymmetric return path, which can occur due to asymmetric link\n\
    \   costs, parallel links, or Equal Cost Multipath (ECMP).\n   Similarly, [RFC1122]\
    \ provides guidance for source address selection\n   for multihomed IPv4 hosts.\
    \  These recommendations, like those stated\n   above, do not always cause the\
    \ source address of an ICMPv4 message to\n   identify the incoming interface.\n\
    \   ICMPv6 is somewhat more flexible.  [RFC4443] states that for\n   responses\
    \ to messages sent to a non-local interface, the source\n   address must be chosen\
    \ as follows:\n   o  the Source Address of the ICMPv6 packet MUST be a unicast\
    \ address\n      belonging to the node.  The address SHOULD be chosen according\
    \ to\n      the rules that would be used to select the source address for any\n\
    \      other packet originated by the node, given the destination address\n  \
    \    of the packet.  However, it MAY be selected in an alternative way\n     \
    \ if this would lead to a more informative choice of address\n      reachable\
    \ from the destination of the ICMPv6 packet.\n   When a datagram that cannot be\
    \ processed arrives on an unnumbered\n   interface, neither ICMPv4 nor ICMPv6\
    \ is currently capable of\n   identifying the incoming interface.  Even when an\
    \ ICMP message is\n   generated such that the ICMP source address identifies the\
    \ incoming\n   interface, the receiver of that ICMP message has no way of knowing\
    \ if\n   this is the case.  ICMP extensions are required to explicitly\n   identify\
    \ the incoming interface.\n   Using the extension defined herein, a device can\
    \ explicitly identify\n   the incoming IP interface or its sub-IP components by\
    \ any combination\n   of the following:\n   o  ifIndex\n   o  IPv4 address\n \
    \  o  IPv6 address\n   o  name\n   o  MTU\n   The interface name SHOULD be identical\
    \ to the first 63 octets of the\n   ifName, as defined in [RFC2863].  The ifIndex\
    \ is also defined in\n   [RFC2863].\n   Using the same extension, an IP device\
    \ can explicitly identify by the\n   above the outgoing interface over which a\
    \ datagram would have been\n   forwarded if that datagram had been deliverable.\n\
    \   The next-hop IP address, to which the datagram would have been\n   forwarded,\
    \ can also be identified using this same extension.  This\n   information can\
    \ be used for creating a downstream map.  The next-hop\n   information may not\
    \ always be available.  There are corner-cases\n   where it doesn't exist and\
    \ there may be implementations where it is\n   not practical to provide this information.\
    \  This specification\n   provides an encoding for providing the next-hop IP address\
    \ when it is\n   available.\n   The extension defined herein uses the ICMP multi-part\
    \ message\n   framework defined in [RFC4884].  The same backward compatibility\n\
    \   issues that apply to [RFC4884] apply to this extension.\n"
- title: 2.   Conventions Used In This Document
  contents:
  - "2.   Conventions Used In This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 3.  Applications
  contents:
  - '3.  Applications

    '
- title: 3.1.  Application to Traceroute
  contents:
  - "3.1.  Application to Traceroute\n   ICMP extensions defined in this memo provide\
    \ additional capability to\n   traceroute.  An enhanced traceroute application,\
    \ like older\n   implementations, identifies nodes that a datagram visited en\
    \ route to\n   its destination.  It differs from older implementations in that\
    \ it\n   can explicitly identify the following at each node:\n   o  the IP interface\
    \ upon which a datagram arrived\n   o  the sub-IP component of an IP interface\
    \ upon which a datagram\n      arrived\n   o  the IP interface through which the\
    \ datagram would have been\n      forwarded had it been forwardable\n   o  the\
    \ IP next hop to which the datagram would have been forwarded\n   Enhanced traceroute\
    \ applications can identify the above listed\n   entities by:\n   o  ifIndex\n\
    \   o  IPv4 address\n   o  IPv6 address\n   o  name\n   o  MTU\n   The ifIndex\
    \ can be utilized within a management domain to map to an\n   actual interface,\
    \ but it is also valuable in public applications.\n   The ifIndex can be used\
    \ as an opaque token to discern whether or not\n   two ICMP messages generated\
    \ from the same router involve the same\n   interface.\n"
- title: 3.2.  Policy and MTU Detection
  contents:
  - "3.2.  Policy and MTU Detection\n   A general application would be to identify\
    \ which outgoing interface\n   triggered a given function for the original packet.\
    \  For example, if\n   an access control list (ACL) drops the packet and Dest\
    \ Unreachable/\n   Admin Prohibited denies the packet, being able to identify\
    \ the\n   outgoing interface might be useful.  Another example would be to\n \
    \  support Path MTU Discovery (PMTUD), since this would allow\n   identification\
    \ of which outgoing interface can't support a given MTU\n   size.  For example,\
    \ knowledge of the problematic interface would\n   allow an informed request for\
    \ reconfiguration of the MTU of that\n   interface.\n"
- title: 4.  Interface Information Object
  contents:
  - "4.  Interface Information Object\n   This section defines the Interface Information\
    \ Object, an ICMP\n   extension object with a Class-Num (Object Class Value) of\
    \ 2 that can\n   be appended to the following messages:\n   o  ICMPv4 Time Exceeded\n\
    \   o  ICMPv4 Destination Unreachable\n   o  ICMPv4 Parameter Problem\n   o  ICMPv6\
    \ Time Exceeded\n   o  ICMPv6 Destination Unreachable\n   For reasons described\
    \ in [RFC4884], this extension cannot be appended\n   to any of the currently\
    \ defined ICMPv4 or ICMPv6 messages other than\n   those listed above.\n   The\
    \ extension defined herein MAY be appended to any of the above\n   listed messages\
    \ and SHOULD be appended whenever required to identify\n   an unnumbered interface\
    \ and when local policy or security\n   considerations do not supersede this requirement.\n\
    \   A single ICMP message can contain as few as zero and as many as four\n   instances\
    \ of the Interface Information Object.  It is illegal if it\n   contains more\
    \ than four instances, because that means that an\n   interface role is used more\
    \ than once (see Section 4.5).\n   A single instance of the Interface Information\
    \ Object can provide\n   information regarding any one of the following interface\
    \ roles:\n   o  the IP interface upon which a datagram arrived\n   o  the sub-IP\
    \ component of an IP interface upon which a datagram\n      arrived\n   o  the\
    \ IP interface through which the datagram would have been\n      forwarded had\
    \ it been forwardable\n   o  the IP next hop to which the datagram would have\
    \ been forwarded\n   The following are examples of sub-IP components of IP interfaces\
    \ upon\n   which a datagram might arrive:\n   o  Ethernet Link Aggregation Group\
    \ Member\n   o  Multilink PPP bundle member\n   o  Multilink frame relay bundle\
    \ member\n   To minimize the number of octets required for this extension, there\n\
    \   are four different pieces of information that can appear in an\n   Interface\
    \ Information Object.\n   1.  The ifIndex of the interface of interest MAY be\
    \ included.  This\n       is the 32-bit ifIndex assigned to the interface by the\
    \ device as\n       specified by the Interfaces Group MIB [RFC2863].\n   2.  An\
    \ IP Address Sub-Object MAY be included if either of the\n       following conditions\
    \ is true: a) the eliciting datagram is IPv4\n       and the identified interface\
    \ has at least one IPv4 address\n       associated with it, or b) the eliciting\
    \ datagram is IPv6 and the\n       identified interface has at least one IPv6\
    \ address associated\n       with it.  The IP Address Sub-Object is described\
    \ in Section 4.2\n       of this memo.\n   3.  An Interface Name Sub-Object, containing\
    \ a string of no more than\n       63 octets, MAY be included.  That string, as\
    \ specified in\n       Section 4.3, is the interface name and SHOULD be the MIB-II\n\
    \       ifName [RFC2863], but MAY be some other human-meaningful name of\n   \
    \    the interface.\n   4.  A 32-bit unsigned integer reflecting the MTU MAY be\
    \ included.\n"
- title: 4.1.  C-Type Meaning in an Interface Information Object
  contents:
  - "4.1.  C-Type Meaning in an Interface Information Object\n   For this object,\
    \ the C-Type [RFC4884] is used to indicate both the\n   role of the interface\
    \ and the information that is included.  This is\n   illustrated in Figure 1.\n\
    \   Bit     0       1       2       3       4       5       6       7\n      \
    \ +-------+-------+-------+-------+-------+-------+-------+-------+\n       |\
    \ Interface Role| Rsvd1 | Rsvd2 |ifIndex| IPAddr|  name |  MTU  |\n       +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \           Figure 1: C-Type for the Interface Information Object\n   The following\
    \ are bit-field definitions for C-Type:\n   Interface Role (bits 0-1): These bits\
    \ indicates the role of the\n   interface being identified.  The enumerated values\
    \ are given below:\n      Value 0:  This object describes the IP interface upon\
    \ which a\n                datagram arrived\n      Value 1:  This object describes\
    \ the sub-IP component of an IP\n                interface upon which a datagram\
    \ arrived\n      Value 2:  This object describes the IP interface through which\
    \ the\n                datagram would have been forwarded had it been\n      \
    \          forwardable\n      Value 3:  This object describes the IP next hop\
    \ to which the\n                datagram would have been forwarded\n   Reserved\
    \ 1 (bit 2): This bit is reserved for future use and MUST be\n   set to 0 and\
    \ MUST be ignored on receipt.\n   Reserved 2 (bit 3): This bit is reserved for\
    \ future use and MUST be\n   set to 0 and MUST be ignored on receipt.\n   ifIndex\
    \ (bit 4) : When set, the 32-bit ifIndex of the interface is\n   included.  When\
    \ clear, the ifIndex is not included.\n   IP Addr (bit 5) : When set, an IP Address\
    \ Sub-Object is present.\n   When clear, an IP Address Sub-Object is not present.\
    \  The IP Address\n   Sub-Object is described in Section 4.2 of this memo.\n \
    \  Interface Name (bit 6): When set, an Interface Name Sub-Object is\n   included.\
    \  When clear, it is not included.  The Name Sub-Object is\n   described in Section\
    \ 4.3 of this memo.\n   MTU (bit 7): When set, a 32-bit integer representing the\
    \ MTU is\n   present.  When clear, this 32-bit integer is not present.\n   The\
    \ information included does not self-identify, so this\n   specification defines\
    \ a specific ordering for sending the information\n   that must be followed.\n\
    \   If bit 4 (ifIndex) is set, then the 32-bit ifIndex MUST be sent\n   first.\
    \  If bit 5 (IP Address) is set, an IP Address Sub-Object MUST\n   be sent next.\
    \  If bit 6 (Name) is set, an Interface Name Sub-Object\n   MUST be sent next.\
    \  If bit 7 is set, an MTU MUST be sent next.  The\n   information order is thus:\
    \ ifIndex, IP Address Sub-Object, Interface\n   Name Sub-Object, and MTU.  Any\
    \ or all pieces of information may be\n   present or absent, as indicated by the\
    \ C-Type.  Any data that follows\n   these optional pieces of information MUST\
    \ be ignored.\n   It is valid (though pointless until additional bits are assigned\
    \ by\n   IANA) to receive an Interface Information Object where bits 4, 5, 6,\n\
    \   and 7 are all 0; this MUST NOT generate a warning or error.\n"
- title: 4.2.  Interface IP Address Sub-Object
  contents:
  - "4.2.  Interface IP Address Sub-Object\n   Figure 2 depicts the Interface Address\
    \ Sub-Object:\n                      0                            31\n       \
    \              +-------+-------+-------+-------+\n                     |     \
    \ AFI      |    Reserved   |\n                     +-------+-------+-------+-------+\n\
    \                     |         IP Address   ....\n                  Figure 2:\
    \ Interface Address Sub-Object\n   The IP Address Sub-Object contains the following\
    \ fields:\n   o  Address Family Identifier (AFI): This 16-bit bit field identifies\n\
    \      the type of address represented by the IP Address field.  It also\n   \
    \   determines the length of that field and the length of the entire\n      sub-object.\
    \  Values for this field represent a subset of values\n      found in the IANA\
    \ registry of Address Family Numbers (available\n      from <http://www.iana.org>).\
    \  Valid values are 1 (representing a\n      32-bit IPv4 address) and 2 (representing\
    \ a 128-bit IPv6 address).\n   o  Reserved: This 16-bit field MUST be set to zero\
    \ and ignored upon\n      receipt.\n   o  IP Address: This variable-length field\
    \ represents an IP address\n      associated with the identified interface.\n\
    \   If the eliciting datagram was IPv4, the IP Interface Sub-Object MUST\n   represent\
    \ an IPv4 address.  Likewise, if the eliciting datagram was\n   IPv6, the IP Interface\
    \ Sub-Object MUST represent an IPv6 address.\n"
- title: 4.3.  Interface Name Sub-Object
  contents:
  - "4.3.  Interface Name Sub-Object\n   Figure 3 depicts the Interface Name Sub-Object:\n\
    \        octet    0        1                                   63\n          \
    \   +--------+-----------................-----------------+\n             | length\
    \ |   interface name octets 1-63               |\n             +--------+-----------................-----------------+\n\
    \                    Figure 3: Interface Name Sub-Object\n   The Interface Name\
    \ Sub-Object MUST have a length that is a multiple\n   of 4 octets and MUST NOT\
    \ exceed 64 octets.\n   The Length field represents the length of the Interface\
    \ Name Sub-\n   Object, including the length and the interface name in octets.\
    \  The\n   maximum valid length is 64 octets.  The length is constrained to\n\
    \   ensure there is space for the start of the original packet and\n   additional\
    \ information.\n   The second field contains the human-readable interface name.\
    \  The\n   interface name SHOULD be the full MIB-II ifName [RFC2863], if less\n\
    \   than 64 octets, or the first 63 octets of the ifName, if the ifName\n   is\
    \ longer.  The interface name MAY be some other human-meaningful\n   name of the\
    \ interface.  It is useful to provide the ifName for cross-\n   correlation with\
    \ other MIB information and for human-reader\n   familiarity.  The interface name\
    \ MUST be padded with ASCII NULL\n   characters if the object would not otherwise\
    \ terminate on a 4-octet\n   boundary.\n   The interface name MUST be represented\
    \ in the UTF-8 charset [RFC3629]\n   using the Default Language [RFC2277].\n"
- title: 4.4.  Interface Information Object Examples
  contents:
  - "4.4.  Interface Information Object Examples\n   Figure 4 shows a full ICMPv4\
    \ Time Exceeded message, including the\n   Interface Information Object, which\
    \ must be preceded by an ICMP\n   Extension Structure Header and an ICMP Object\
    \ Header.  Both are\n   defined in [RFC4884].\n   Although examples show an Interface\
    \ Name Sub-Object of length 64,\n   this is only for illustration and depicts\
    \ the maximum allowable\n   length.\n      0                   1             \
    \      2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Type      |     Code      |          Checksum             |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \   unused    |    Length     |          unused               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |      Internet Header + leading octets of original datagram    |\n    \
    \ |                                                               |\n     |  \
    \                         //                                  |\n     |      \
    \                                                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Ver=2 |      (Reserved)       |           Checksum            |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \           Length            |Class-Num=2 | C-Type=00001010b |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                    Interface ifIndex                          |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \              Interface Name Sub-Object, 32-bit word 1       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...                                                             ...\n   \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | \
    \               Interface Name Sub-Object, 32-bit word 16      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     Figure 4: ICMPv4 Time Exceeded Message with Interface Information\n    \
    \                              Object\n   Figure 5 depicts an Interface Information\
    \ Object representing an\n   incoming interface identified by ifIndex and Name.\n\
    \            Class-Num = 2\n            C-Type = 00001010b   // Indicates incoming\
    \ interface\n            Length = 72 (4 + 4 + 64)\n               0          \
    \    1              2              3\n       +--------------+--------------+--------------+--------------+\n\
    \       |                    Interface ifIndex                      |\n      \
    \ +--------------+--------------+--------------+--------------+\n       |    Length\
    \    |      Name, word 1                          |\n       +--------------+--------------+--------------+--------------+\n\
    \      ...                                                         ...\n     \
    \  +--------------+--------------+--------------+--------------+\n       |   \
    \                  Name, word 16                         |\n       +--------------+--------------+--------------+--------------+\n\
    \             Figure 5: Incoming Interface: By ifIndex and Name\n   Figure 6 depicts\
    \ an Interface Information Object representing an\n   incoming interface identified\
    \ by ifIndex, IPv4 Address, and Name.\n            Class-Num = 2\n           \
    \ C-Type = 00001110b   // Indicates incoming interface\n            Length = 80\
    \ (4 + 4 + 8 + 64)\n               0              1              2           \
    \   3\n       +--------------+--------------+--------------+--------------+\n\
    \       |                    Interface ifIndex                      |\n      \
    \ +--------------+--------------+--------------+--------------+\n       |    \
    \         AFI             |          Reserved           |\n       +--------------+--------------+--------------+--------------+\n\
    \       |                    IPv4 address                           |\n      \
    \ +--------------+--------------+--------------+--------------+\n       |    Length\
    \    |      Name, word 1                          |\n       +--------------+--------------+--------------+--------------+\n\
    \      ...                                                         ...\n     \
    \  +--------------+--------------+--------------+--------------+\n       |   \
    \                  Name, word 16                         |\n       +--------------+--------------+--------------+--------------+\n\
    \     Figure 6: Incoming Interface: by ifIndex, IPv4 Address, and Name\n   Figure\
    \ 7 depicts an Interface Information Object representing an\n   incoming interface\
    \ identified by ifIndex and IPv6 Address.\n           Class-Num = 2\n        \
    \   C-Type = 00001100b   // Indicates incoming interface\n           Length =\
    \ 28 (4 + 4 + 20)\n              0              1              2             \
    \ 3\n       +--------------+--------------+--------------+--------------+\n  \
    \     |                    Interface ifIndex                      |\n       +--------------+--------------+--------------+--------------+\n\
    \       |             AFI             |          Reserved           |\n      \
    \ +--------------+--------------+--------------+--------------+\n       |    \
    \                IPv6 address, 32-bit word 1            |\n       +--------------+--------------+--------------+--------------+\n\
    \       |                    IPv6 address, 32-bit word 2            |\n      \
    \ +--------------+--------------+--------------+--------------+\n       |    \
    \                IPv6 address, 32-bit word 3            |\n       +--------------+--------------+--------------+--------------+\n\
    \       |                    IPv6 address, 32-bit word 4            |\n      \
    \ +--------------+--------------+--------------+--------------+\n         Figure\
    \ 7: Incoming Interface: By ifIndex and IPv6 Address\n   Figure 8 depicts an Interface\
    \ Information Object representing an\n   outgoing interface identified by ifIndex\
    \ and Name.\n          Class-Num = 2\n          C-Type = 10001010b   // Indicates\
    \ outgoing interface\n          Length = 72 (4 + 4 + 64)\n               0   \
    \           1              2              3\n       +--------------+--------------+--------------+--------------+\n\
    \       |                    Interface ifIndex                      |\n      \
    \ +--------------+--------------+--------------+--------------+\n       |    Length\
    \    |      Name, word 1                          |\n       +--------------+--------------+--------------+--------------+\n\
    \      ...                                                         ...\n     \
    \  +--------------+--------------+--------------+--------------+\n       |   \
    \                  Name, word 16                         |\n       +--------------+--------------+--------------+--------------+\n\
    \             Figure 8: Outgoing Interface: By ifIndex and Name\n"
- title: 4.5.  Usage
  contents:
  - "4.5.  Usage\n   Multiple Interface Information Objects MAY be included within\
    \ a\n   single ICMP message, provided that each Interface Information Object\n\
    \   specifies a unique role.  A single ICMP message MUST NOT contain two\n   Interface\
    \ Information Objects that specify the same role.\n   ifIndex, MTU, and name information\
    \ MAY be included whenever it is\n   available; more than one instance of each\
    \ of these three information\n   elements MUST NOT be included per Interface Information\
    \ Object.\n   A single instance of IP Address information MAY be included in an\n\
    \   Interface Information Object under the following circumstances:\n   o  if\
    \ the eliciting datagram is IPv4 and an IPv4 address is\n      associated with\
    \ the identified interface.  In this case, if an IP\n      Address Sub-Object\
    \ is included, it must specify an IPv4 address.\n   o  if the eliciting datagram\
    \ is IPv6 and an IPv6 address is\n      associated with the identified interface.\
    \  In this case, if an IP\n      Address Sub-Object is included, it must specify\
    \ an IPv6 address.\n   In all other circumstances, IP address information MUST\
    \ NOT be\n   included.\n   An ICMP message that does not conform to these rules\
    \ and contains\n   multiple instances of the same information is considered illegal;\n\
    \   specifically, an ICMP message containing more than one Interface\n   Information\
    \ Object with the same role, as well as an ICMP message\n   containing a duplicate\
    \ information element in a given role are\n   considered illegal.  If such an\
    \ illegal ICMP message is received, it\n   MUST be silently discarded.\n"
- title: 5.  Network Address Translation Considerations
  contents:
  - "5.  Network Address Translation Considerations\n   [RFC5508] encourages Traditional\
    \ IP Network Address Translators\n   (Traditional NATs; see [RFC3022]) to support\
    \ ICMP extension objects.\n   This document defines an ICMP extension that includes\
    \ IP addresses\n   and therefore contains realm-specific information, and consequently\n\
    \   describes possible NAT behaviors in the presence of these extensions.\n  \
    \ NAT devices MUST NOT translate or overwrite the ICMP extensions\n   described\
    \ herein.  That is, they MUST either remove the extension\n   entirely or pass\
    \ it unchanged.\n   It is conceivable that a NAT device might translate an ICMP\
    \ header\n   without translating the extension defined herein.  In this case,\
    \ the\n   ICMP message might contain two instances of the same address, one\n\
    \   translated and the other untranslated.  Therefore, application\n   developers\
    \ should not assume addresses in the extension are of the\n   same realm as the\
    \ addresses in the datagram's header.\n   It also is conceivable that a NAT device\
    \ might translate an ICMPv4\n   message into ICMPv6 or vice versa.  If that were\
    \ to occur,\n   applications might receive ICMPv6 messages that contain IP Address\n\
    \   Sub-Objects that specify IPv4 addresses.  Likewise, applications\n   might\
    \ receive ICMPv4 messages that contain IP Address Sub-Objects\n   that specify\
    \ IPv6 addresses.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This extension can provide the user of traceroute\
    \ with additional\n   network information that is not currently available.  Implementations\n\
    \   SHOULD provide configuration switches that suppress the generation of\n  \
    \ this extension based upon role (i.e., incoming interface, outgoing\n   interface,\
    \ sub-IP data).  Implementations SHOULD also provide\n   configuration switches\
    \ that conceal various types of information\n   (e.g., ifIndex, interface name).\n\
    \   It may be desirable to provide this information to a particular\n   network's\
    \ operators and not to others.  If such policy controls are\n   desirable, then\
    \ an implementation could determine what sub-objects to\n   include based upon\
    \ the destination IP address of the ICMP message\n   that will contain the sub-objects.\
    \  The implementation of policy\n   controls could also be based upon the mechanisms\
    \ described in\n   [TRACEROUTE-EXT] for those limited cases supported.\n   For\
    \ instance, the IP address may be included for all potential\n   recipients. \
    \ The ifIndex and interface name could be included as well\n   if the destination\
    \ IP address is a management address of the network\n   that has administrative\
    \ control of the router.\n   Another example use case would be where the detailed\
    \ information in\n   these extensions may be provided to ICMP destinations within\
    \ the\n   local administrative domain, but only traditional information is\n \
    \  provided to 'external' or untrusted ICMP destinations.\n   The intended field\
    \ of use for the extensions defined in this document\n   is administrative debugging\
    \ and troubleshooting.  The extensions\n   herein defined supply additional information\
    \ in ICMP responses.\n   These mechanisms are not intended to be used in non-debugging\n\
    \   applications.\n   This document does not specify an authentication mechanism\
    \ for the\n   extension that it defines.  Application developers should be aware\n\
    \   that ICMP messages and their contents are easily spoofed.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   IANA has reserved 2 for the Interface Information\
    \ Object from the\n   ICMP Extension Object Classes registry available from\n\
    \   <http://www.iana.org>.\n   From the Interface Information Object's C-Type,\
    \ IANA has reserved\n   values as follows:\n   o  Bit 0-1: Interface Role field\n\
    \   o  Bit 2: Unallocated - allocatable with Standards Action\n   o  Bit 3: Unallocated\
    \ - allocatable with Standards Action\n   o  Bit 4: ifIndex included\n   o  Bit\
    \ 5: IP Address Sub-Object included\n   o  Bit 6: Name Sub-Object included\n \
    \  o  Bit 7: MTU included\n   IANA has reserved the following values for Interface\
    \ Role:\n   o  Value 0: Incoming IP Interface\n   o  Value 1: Sub-IP Component\
    \ of Incoming IP Interface\n   o  Value 2: Outgoing IP Interface\n   o  Value\
    \ 3: IP Next Hop\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The authors would like to thank Sasha Vainshtein, Enke\
    \ Chen, and Joe\n   Touch for their comments and suggestions.  They would also\
    \ like to\n   thank Dr. Ali Assefi.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC0792]         Postel, J., \"Internet Control\
    \ Message Protocol\",\n                     STD 5, RFC 792, September 1981.\n\
    \   [RFC2119]         Bradner, S., \"Key words for use in RFCs to Indicate\n \
    \                    Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2863]\
    \         McCloghrie, K. and F. Kastenholz, \"The Interfaces\n               \
    \      Group MIB\", RFC 2863, June 2000.\n   [RFC3629]         Yergeau, F., \"\
    UTF-8, a transformation format of ISO\n                     10646\", STD 63, RFC\
    \ 3629, November 2003.\n   [RFC4443]         Conta, A., Deering, S., and M. Gupta,\
    \ \"Internet\n                     Control Message Protocol (ICMPv6) for the Internet\n\
    \                     Protocol Version 6 (IPv6) Specification\", RFC 4443,\n \
    \                    March 2006.\n   [RFC4884]         Bonica, R., Gan, D., Tappan,\
    \ D., and C. Pignataro,\n                     \"Extended ICMP to Support Multi-Part\
    \ Messages\",\n                     RFC 4884, April 2007.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC1122]         Braden, R., \"Requirements\
    \ for Internet Hosts -\n                     Communication Layers\", STD 3, RFC\
    \ 1122,\n                     October 1989.\n   [RFC1812]         Baker, F., \"\
    Requirements for IP Version 4 Routers\",\n                     RFC 1812, June\
    \ 1995.\n   [RFC2277]         Alvestrand, H., \"IETF Policy on Character Sets\
    \ and\n                     Languages\", BCP 18, RFC 2277, January 1998.\n   [RFC3022]\
    \         Srisuresh, P. and K. Egevang, \"Traditional IP\n                   \
    \  Network Address Translator (Traditional NAT)\",\n                     RFC 3022,\
    \ January 2001.\n   [RFC5508]         Srisuresh, P., Ford, B., Sivakumar, S.,\
    \ and S.\n                     Guha, \"NAT Behavioral Requirements for ICMP\"\
    ,\n                     BCP 148, RFC 5508, April 2009.\n   [TRACEROUTE-EXT]  Shen,\
    \ N., Pignataro, C., Asati, R., and E. Chen,\n                     \"UDP Traceroute\
    \ Message Extension\", Work in\n                     Progress, June 2008.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Alia K. Atlas (editor)\n   BT\n   EMail: alia.atlas@bt.com\n\
    \   Ronald P. Bonica (editor)\n   Juniper Networks\n   2251 Corporate Park Drive\n\
    \   Herndon, VA  20171\n   USA\n   EMail: rbonica@juniper.net\n   Carlos Pignataro\
    \ (editor)\n   Cisco Systems\n   7200-12 Kit Creek Road\n   PO Box 14987\n   Research\
    \ Triangle Park, NC  27709\n   USA\n   EMail: cpignata@cisco.com\n   Naiming Shen\n\
    \   Cisco Systems\n   225 West Tasman Drive\n   San Jose, CA  95134\n   USA\n\
    \   EMail: naiming@cisco.com\n   JR. Rivers\n   Consultant\n   EMail: jrrivers@yahoo.com\n"
