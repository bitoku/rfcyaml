- contents:
  - "                 Network News Transfer Protocol (NNTP)\n                       Extension
    for Compression\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines an extension to the Network News Transport\n
    \  Protocol (NNTP) that allows a connection to be effectively and\n   efficiently
    compressed between an NNTP client and server.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8054.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n     1.1.  About TLS-Level Compression . . . . . . . . . . . .
    . . .   3\n     1.2.  Conventions Used in This Document . . . . . . . . . . .
    .   4\n   2.  The COMPRESS Extension  . . . . . . . . . . . . . . . . . . .   4\n
    \    2.1.  Advertising the COMPRESS Extension  . . . . . . . . . . .   4\n     2.2.
    \ COMPRESS Command  . . . . . . . . . . . . . . . . . . . .   5\n       2.2.1.
    \ Usage . . . . . . . . . . . . . . . . . . . . . . . .   5\n       2.2.2.  Description
    . . . . . . . . . . . . . . . . . . . . .   6\n       2.2.3.  Examples  . . .
    . . . . . . . . . . . . . . . . . . .   8\n   3.  Compression Efficiency  . .
    . . . . . . . . . . . . . . . . .  11\n   4.  DEFLATE Specificities . . . . .
    . . . . . . . . . . . . . . .  12\n   5.  Augmented BNF Syntax for the COMPRESS
    Extension . . . . . . .  13\n     5.1.  Commands  . . . . . . . . . . . . . .
    . . . . . . . . . .  13\n     5.2.  Capability Entries  . . . . . . . . . . .
    . . . . . . . .  13\n     5.3.  General Non-terminals . . . . . . . . . . . .
    . . . . . .  13\n   6.  Summary of Response Codes . . . . . . . . . . . . . .
    . . . .  13\n   7.  Security Considerations . . . . . . . . . . . . . . . . .
    . .  14\n   8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .
    \ 15\n     8.1.  \"NNTP Compression Algorithms\" Registry  . . . . . . . . .  15\n
    \      8.1.1.  Algorithm Name Registration Procedure . . . . . . . .  16\n       8.1.2.
    \ Comments on Algorithm Registrations . . . . . . . . .  17\n       8.1.3.  Change
    Control  . . . . . . . . . . . . . . . . . . .  17\n     8.2.  Registration of
    the DEFLATE Compression Algorithm . . . .  18\n     8.3.  Registration of the
    NNTP COMPRESS Extension . . . . . . .  18\n   9.  References  . . . . . . . .
    . . . . . . . . . . . . . . . . .  20\n     9.1.  Normative References  . . .
    . . . . . . . . . . . . . . .  20\n     9.2.  Informative References  . . . .
    . . . . . . . . . . . . .  20\n   Acknowledgments . . . . . . . . . . . . . .
    . . . . . . . . . . .  22\n   Authors' Addresses  . . . . . . . . . . . . . .
    . . . . . . . . .  23\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The goal of COMPRESS is to reduce the bandwidth usage of
    NNTP.\n   Compared to PPP compression [RFC1962] and modem-based compression\n
    \  ([MNP] and [V42bis]), COMPRESS offers greater compression efficiency.\n   COMPRESS
    can be used together with Transport Layer Security (TLS)\n   [RFC5246], Simple
    Authentication and Security Layer (SASL) encryption\n   [RFC4422], Virtual Private
    Networks (VPNs), etc.\n   The point of COMPRESS as an NNTP extension is to act
    as a compression\n   layer, similar to a security layer like the one negotiated
    by\n   STARTTLS [RFC4642].  Therefore, compression can be beneficial to all\n
    \  NNTP commands sent or received after the use of COMPRESS.  This\n   facility
    responds to a long-standing need for NNTP to compress data.\n   It is currently
    addressed only partially by unstandardized commands\n   like XZVER, XZHDR, XFEATURE
    COMPRESS, or MODE COMPRESS.  Yet, these\n   commands are not wholly satisfactory
    because they enable compression\n   only for the responses sent by the news server.
    \ In comparison, the\n   COMPRESS command permits the compression of data sent
    by both the\n   client and the server, and removes the constraint of having to\n
    \  implement compression separately in each NNTP command.  Besides, the\n   compression
    level can be dynamically adjusted and optimized at any\n   time during the connection,
    which even allows disabling compression\n   for certain commands, if needed.  If
    the news client wants to stop\n   compression on a particular connection, it can
    simply use QUIT\n   ([RFC3977], Section 5.4) and establish a new connection.  For
    these\n   reasons, using other NNTP commands than COMPRESS to enable\n   compression
    is discouraged once COMPRESS is supported.\n   In order to increase interoperability,
    it is desirable to have as few\n   different compression algorithms as possible,
    so this document\n   specifies only one.  The DEFLATE algorithm (defined in [RFC1951])\n
    \  MUST be implemented as part of this extension.  This compression\n   algorithm
    is standard, widely available, and fairly efficient.\n   This specification should
    be read in conjunction with the NNTP base\n   specification [RFC3977].  In the
    case of a conflict between these two\n   documents, [RFC3977] takes precedence.\n"
  - contents:
    - "1.1.  About TLS-Level Compression\n   Though lossless data compression is already
      possible via the use of\n   TLS with NNTP [RFC4642], the best current practice
      is to disable TLS-\n   level compression as explained in Section 3.3 of [RFC7525].
      \ The\n   COMPRESS command will permit keeping the compression facility in\n
      \  NNTP, and control when it is available during a connection.\n   Compared
      to TLS-level compression [RFC3749], NNTP COMPRESS has the\n   following advantages:\n
      \  o  COMPRESS can be implemented easily both by NNTP servers and\n      clients.\n
      \  o  COMPRESS benefits from an intimate knowledge of the NNTP\n      protocol's
      state machine, allowing for dynamic and aggressive\n      optimization of the
      underlying compression algorithm's parameters.\n   o  COMPRESS can be activated
      after authentication has completed, thus\n      reducing the chances that authentication
      credentials can be leaked\n      via, for instance, a CRIME attack ([RFC7457],
      Section 2.6).\n"
    title: 1.1.  About TLS-Level Compression
  - contents:
    - "1.2.  Conventions Used in This Document\n   The notational conventions used
      in this document are the same as\n   those in [RFC3977], and any term not defined
      in this document has the\n   same meaning as it does in that one.\n   The key
      words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",
      \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\"
      in this document are to be interpreted as described in\n   [RFC2119].\n   In
      the examples, commands from the client are indicated with [C], and\n   responses
      from the server are indicated with [S].  The client is the\n   initiator of
      the NNTP connection; the server is the other endpoint.\n"
    title: 1.2.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  The COMPRESS Extension\n   The COMPRESS extension is used to enable lossless
    data compression on\n   an NNTP connection.\n   This extension provides a new
    COMPRESS command and has the capability\n   label COMPRESS.\n"
  - contents:
    - "2.1.  Advertising the COMPRESS Extension\n   A server supporting the COMPRESS
      command as defined in this document\n   will advertise the \"COMPRESS\" capability
      label in response to the\n   CAPABILITIES command ([RFC3977], Section 5.2).
      \ However, this\n   capability MUST NOT be advertised once a compression layer
      is active\n   (see Section 2.2.2).  This capability MAY be advertised both before\n
      \  and after any use of the MODE READER command ([RFC3977],\n   Section 5.3),
      with the same semantics.\n   The COMPRESS capability label contains a whitespace-separated
      list of\n   available compression algorithms.  This document defines one\n   compression
      algorithm: DEFLATE.  This algorithm is mandatory to\n   implement; it MUST be
      supported and listed in the advertisement of\n   the COMPRESS extension.\n   Future
      extensions may add additional compression algorithms to this\n   capability.
      \ Unrecognized algorithms MUST be ignored by the client.\n   Example:\n      [C]
      CAPABILITIES\n      [S] 101 Capability list:\n      [S] VERSION 2\n      [S]
      READER\n      [S] IHAVE\n      [S] COMPRESS DEFLATE SHRINK\n      [S] LIST ACTIVE
      NEWSGROUPS\n      [S] .\n   As the COMPRESS command is related to security because
      it can weaken\n   encryption, cached results of CAPABILITIES from a previous
      session\n   MUST NOT be relied on, as per Section 12.6 of [RFC3977].\n"
    title: 2.1.  Advertising the COMPRESS Extension
  - contents:
    - '2.2.  COMPRESS Command

      '
    - contents:
      - "2.2.1.  Usage\n   This command MUST NOT be pipelined.\n   Syntax\n     COMPRESS
        algorithm\n   Responses\n     206 Compression active\n     403 Unable to activate
        compression\n     502 Command unavailable [1]\n   [1] If a compression layer
        is already active, COMPRESS is not a valid\n       command (see Section 2.2.2).\n
        \  Parameters\n     algorithm = Name of compression algorithm (e.g., \"DEFLATE\")\n"
      title: 2.2.1.  Usage
    - contents:
      - "2.2.2.  Description\n   The COMPRESS command instructs the server to use
        the named\n   compression algorithm (\"DEFLATE\" is the only one defined in
        this\n   document) for all commands and responses after COMPRESS.\n   The
        client MUST NOT send any further commands until it has seen the\n   result
        of COMPRESS.\n   If the requested compression algorithm is syntactically incorrect,\n
        \  the server MUST reject the COMPRESS command with a 501 response code\n
        \  ([RFC3977], Section 3.2.1).  If the requested compression algorithm\n   is
        invalid (e.g., is not supported), the server MUST reject the\n   COMPRESS
        command with a 503 response code ([RFC3977], Section 3.2.1).\n   If the server
        is unable to activate compression for any reason (e.g.,\n   a server configuration
        or resource problem), the server MUST reject\n   the COMPRESS command with
        a 403 response code ([RFC3977],\n   Section 3.2.1).  Otherwise, in case no
        other generic response code\n   representing the situation applies, the server
        issues a 206 response\n   code and the compression layer takes effect for
        both client and\n   server immediately following the CRLF of the success reply.\n
        \  Additionally, the client MUST NOT issue a MODE READER command after\n   activating
        a compression layer, and a server MUST NOT advertise the\n   MODE-READER capability.\n
        \  Both the client and the server MUST know if there is a compression\n   layer
        active (for instance, via the previous use of the COMPRESS\n   command or
        the negotiation of a TLS-level compression method\n   [RFC3749]).  A client
        MUST NOT attempt to activate compression (for\n   instance, via the COMPRESS
        command) or negotiate a TLS security layer\n   (because STARTTLS [RFC4642]
        may activate TLS-level compression) if a\n   compression layer is already
        active.  A server MUST NOT return the\n   COMPRESS or STARTTLS capability
        labels in response to a CAPABILITIES\n   command received after a compression
        layer is active, and a server\n   MUST reply with a 502 response code if a
        syntactically valid COMPRESS\n   or STARTTLS command is received while a compression
        layer is already\n   active.\n   In order to help mitigate leaking authentication
        credentials via, for\n   instance, a CRIME attack [CRIME], authentication
        MUST NOT be\n   attempted after a successful use of the COMPRESS command.\n
        \  Consequently, a server MUST either list the AUTHINFO capability with\n
        \  no arguments or not advertise it at all, in response to a\n   CAPABILITIES
        command received from an unauthenticated client after a\n   successful use
        of the COMPRESS command, and such a client MUST NOT\n   attempt to utilize
        any AUTHINFO [RFC4643] commands.  This implies\n   that a server MUST reply
        with a 502 response code if a syntactically\n   valid AUTHINFO command is
        received after a successful use of the\n   COMPRESS command.  (Note that this
        specification does not change the\n   behavior of AUTHINFO as described in
        [RFC4643] independently of TLS-\n   level compression.  Authentication is
        therefore still allowed, even\n   though TLS-level compression is active.)\n
        \  For DEFLATE [RFC1951] (as for many other compression algorithms), the\n
        \  sending compressor can trade speed against compression ratio.  The\n   receiving
        decompressor MUST automatically adjust to the parameters\n   selected by the
        sender.  Consequently, the client and server are both\n   free to pick the
        best reasonable rate of compression for the data\n   they send.  Besides,
        all data that was submitted for compression MUST\n   be included in the compressed
        output, and appropriately flushed so as\n   to ensure that the receiving decompressor
        can completely decompress\n   it.\n   When COMPRESS is combined with TLS [RFC5246]
        or SASL [RFC4422]\n   security layers, the processing order of the three layers
        MUST be\n   first COMPRESS, then SASL, and finally TLS.  That is, before data
        is\n   transmitted, it is first compressed.  Second, if a SASL security\n
        \  layer has been negotiated, the compressed data is then signed and/or\n
        \  encrypted accordingly.  Third, if a TLS security layer has been\n   negotiated,
        the data from the previous step is signed and/or\n   encrypted accordingly
        (with a possible additional TLS-level\n   compression).  When receiving data,
        the processing order MUST be\n   reversed.  This ensures that before sending,
        data is compressed\n   before it is encrypted.\n   When compression is active
        and either the client or the server\n   receives invalid or corrupted compressed
        data, the receiving end\n   immediately closes the connection, in response
        to which the sending\n   end will do the same.\n"
      title: 2.2.2.  Description
    - contents:
      - "2.2.3.  Examples\n   Example of layering a TLS security layer and NNTP compression:\n
        \     [C] CAPABILITIES\n      [S] 101 Capability list:\n      [S] VERSION
        2\n      [S] READER\n      [S] STARTTLS\n      [S] AUTHINFO\n      [S] COMPRESS
        DEFLATE\n      [S] LIST ACTIVE NEWSGROUPS\n      [S] .\n      [C] STARTTLS\n
        \     [S] 382 Continue with TLS negotiation\n      [TLS negotiation without
        compression occurs here]\n      [Following successful negotiation, all traffic
        is encrypted]\n      [C] CAPABILITIES\n      [S] 101 Capability list:\n      [S]
        VERSION 2\n      [S] READER\n      [S] AUTHINFO USER\n      [S] COMPRESS DEFLATE\n
        \     [S] LIST ACTIVE NEWSGROUPS\n      [S] .\n      [C] AUTHINFO USER fred\n
        \     [S] 381 Enter passphrase\n      [C] AUTHINFO PASS flintstone\n      [S]
        281 Authentication accepted\n      [C] CAPABILITIES\n      [S] 101 Capability
        list:\n      [S] VERSION 2\n      [S] READER\n      [S] POST\n      [S] COMPRESS
        DEFLATE\n      [S] LIST ACTIVE NEWSGROUPS\n      [S] .\n      [C] COMPRESS
        DEFLATE\n      [S] 206 Compression active\n      [Henceforth, all traffic
        is compressed before being encrypted]\n      [C] CAPABILITIES\n      [S] 101
        Capability list:\n      [S] VERSION 2\n      [S] READER\n      [S] POST\n
        \     [S] LIST ACTIVE NEWSGROUPS\n      [S] .\n   Example of a server failing
        to activate compression:\n      [C] CAPABILITIES\n      [S] 101 Capability
        list:\n      [S] VERSION 2\n      [S] IHAVE\n      [S] COMPRESS DEFLATE\n
        \     [S] .\n      [C] COMPRESS DEFLATE\n      [S] 403 Unable to activate
        compression\n   Example of attempting to use an unsupported compression algorithm:\n
        \     [C] CAPABILITIES\n      [S] 101 Capability list:\n      [S] VERSION
        2\n      [S] IHAVE\n      [S] COMPRESS DEFLATE\n      [S] .\n      [C] COMPRESS
        SHRINK\n      [S] 503 Compression algorithm not supported\n   Example of a
        server refusing to compress twice:\n      [C] CAPABILITIES\n      [S] 101
        Capability list:\n      [S] VERSION 2\n      [S] IHAVE\n      [S] STARTTLS\n
        \     [S] COMPRESS DEFLATE\n      [S] .\n      [C] STARTTLS\n      [S] 382
        Continue with TLS negotiation\n      [TLS negotiation with compression occurs
        here]\n      [Following successful negotiation, all traffic is encrypted]\n
        \     [C] CAPABILITIES\n      [S] 101 Capability list:\n      [S] VERSION
        2\n      [S] IHAVE\n      [S] .\n      [C] COMPRESS DEFLATE\n      [S] 502
        Compression already active via TLS\n   Example of a server refusing to negotiate
        a TLS security layer after\n   compression has been activated:\n      [C]
        CAPABILITIES\n      [S] 101 Capability list:\n      [S] VERSION 2\n      [S]
        IHAVE\n      [S] STARTTLS\n      [S] COMPRESS DEFLATE\n      [S] .\n      [C]
        COMPRESS DEFLATE\n      [S] 206 Compression active\n      [Henceforth, all
        traffic is compressed]\n      [C] CAPABILITIES\n      [S] 101 Capability list:\n
        \     [S] VERSION 2\n      [S] IHAVE\n      [S] .\n      [C] STARTTLS\n      [S]
        502 DEFLATE compression already active\n   Example of a server not advertising
        AUTHINFO arguments after\n   compression has been activated:\n      [C] CAPABILITIES\n
        \     [S] 101 Capability list:\n      [S] VERSION 2\n      [S] READER\n      [S]
        AUTHINFO USER\n      [S] COMPRESS DEFLATE\n      [S] LIST ACTIVE NEWSGROUPS\n
        \     [S] .\n      [C] COMPRESS DEFLATE\n      [S] 206 Compression active\n
        \     [Henceforth, all traffic is compressed]\n      [C] CAPABILITIES\n      [S]
        101 Capability list:\n      [S] VERSION 2\n      [S] READER\n      [S] AUTHINFO\n
        \     [S] LIST ACTIVE NEWSGROUPS\n      [S] .\n      [C] AUTHINFO USER fred\n
        \     [S] 502 DEFLATE compression already active\n"
      title: 2.2.3.  Examples
    title: 2.2.  COMPRESS Command
  title: 2.  The COMPRESS Extension
- contents:
  - "3.  Compression Efficiency\n   This section is informative, not normative.\n
    \  NNTP poses some unusual problems for a compression layer.\n   Upstream traffic
    is fairly simple.  Most NNTP clients send the same\n   few commands again and
    again, so any compression algorithm that can\n   exploit repetition works efficiently.
    \ The article posting and\n   transfer commands (e.g., POST, IHAVE, and TAKETHIS
    [RFC4644]) are\n   exceptions; clients that send many article posting or transfer\n
    \  commands may want to surround large multi-line data blocks with a\n   dictionary
    flush and/or, depending on the compression algorithm, a\n   change of compression
    level in the same way as is recommended for\n   servers later in this document
    (Section 4).\n   Downstream traffic has the unusual property that several kinds
    of\n   data are sent, possibly confusing a dictionary-based compression\n   algorithm.\n
    \  NNTP responses that are not related to article header/body retrieval\n   are
    one type.  Compressing NNTP simple responses (e.g., in answer to\n   CHECK [RFC4644],
    DATE, GROUP, LAST, NEXT, STAT, etc.) generally does\n   not save many bytes, unless
    repeated several times in the same NNTP\n   session.  On the contrary, most of
    the NNTP multi-line responses\n   (e.g., in answer to LIST, LISTGROUP, NEWGROUPS,
    NEWNEWS, etc.) are\n   highly compressible; using its least CPU-intensive setting,
    zlib\n   compresses typical responses to 25-40% of their original size.\n   Article
    headers (as retrieved, for instance, via the HEAD, HDR, OVER,\n   or ARTICLE commands)
    are another type.  These are equally\n   compressible, and benefit from using
    the same dictionary as the NNTP\n   responses.\n   A third type is article body
    text (as retrieved, for instance, via\n   the BODY or ARTICLE commands).  Text
    is usually fairly short and\n   includes much ASCII, so the same compression dictionary
    will do a\n   good job here, too.  When multiple messages in the same thread are\n
    \  read at the same time, quoted lines, etc., can often be compressed\n   almost
    to zero.\n   Finally, non-text article bodies or attachments (as retrieved, for\n
    \  instance, via the BODY or ARTICLE commands) are transmitted in\n   encoded
    form, usually Base64 [RFC4648], UUencode [IEEE.1003.1-2008],\n   or yEnc [yEnc].\n
    \  When such non-text article bodies or attachments are retrieved, a\n   compression
    algorithm may be able to compress them, but the format of\n   their encoding is
    usually not NNTP-like, so the dictionary built\n   while compressing NNTP does
    not help much.  The compressor has to\n   adapt its dictionary from NNTP to the
    attachment's encoding format,\n   and then back.\n   When attachments are retrieved
    in Base64 or UUencode form, the\n   Huffman coding usually compresses those to
    approximately only 75% of\n   their encoding size.  8-bit compression algorithms
    such as DEFLATE\n   work well on 8-bit file formats; however, both Base64 and
    UUencode\n   transform a file into something resembling 6-bit bytes, hiding most\n
    \  of the 8-bit file format from the compressor.\n   On the other end, attachments
    encoded using a compression algorithm\n   that retains the full 8-bit spectrum,
    like yEnc, are much more likely\n   to be incompressible.\n"
  title: 3.  Compression Efficiency
- contents:
  - "4.  DEFLATE Specificities\n   When using the zlib library (see [RFC1951]), the
    functions\n   deflateInit2(), deflate(), inflateInit2(), and inflate() suffice
    to\n   implement this extension.\n   The windowBits value MUST be in the range
    -8 to -15 for\n   deflateInit2(), or else it will use the wrong format.  The windowBits\n
    \  value SHOULD be -15 for inflateInit2(), or else it will not be able\n   to
    decompress a stream with a larger window size, thus reducing\n   interoperability.
    \ deflateParams() can be used to improve compression\n   rate and resource use.
    \ Regarding flush operations, the Z_FULL_FLUSH\n   argument to deflate() permits
    to clear the dictionary, which\n   generally results in compression that is less
    effective than\n   performing a Z_PARTIAL_FLUSH.  As a matter of fact, keeping
    the 32 KB\n   dictionary from previous data, no matter how unrelated, can be of\n
    \  help (if there are no matching strings in there, then it is simply\n   not
    referenced).\n   A server can improve downstream compression and the CPU efficiency
    of\n   both the server and the client if it adjusts the compression level\n   (e.g.,
    using the deflateParams() function in zlib) at the start and\n   end of large
    non-text multi-line data blocks (before and after\n   'content-lines' in the definition
    of 'multi-line-data-block' in\n   [RFC3977], Section 9.8).  This mechanism prevents
    the server from\n   trying to compress incompressible attachments.\n   A very
    simple strategy is to change the compression level to 0 at the\n   start of an
    incompressible multi-line data block, for instance when\n   encoded using yEnc
    [yEnc], and to keep it at 1-5 the rest of the\n   time.  More complex strategies
    are, of course, possible and\n   encouraged.\n"
  title: 4.  DEFLATE Specificities
- contents:
  - "5.  Augmented BNF Syntax for the COMPRESS Extension\n   This section describes
    the formal syntax of the COMPRESS extension\n   using ABNF [RFC7405] and [RFC5234].
    \ It extends the syntax in\n   Section 9 of [RFC3977], and non-terminals not defined
    in this\n   document are defined there.  The NNTP ABNF [RFC3977] should be\n   imported
    first, before attempting to validate these rules.\n"
  - contents:
    - "5.1.  Commands\n   This syntax extends the non-terminal <command>, which represents
      an\n   NNTP command.\n     command =/ compress-command\n     compress-command
      = \"COMPRESS\" WS algorithm\n"
    title: 5.1.  Commands
  - contents:
    - "5.2.  Capability Entries\n   This syntax extends the non-terminal <capability-entry>,
      which\n   represents a capability that may be advertised by the server.\n     capability-entry
      =/ compress-capability\n     compress-capability = \"COMPRESS\" 1*(WS algorithm)\n"
    title: 5.2.  Capability Entries
  - contents:
    - "5.3.  General Non-terminals\n     algorithm = %s\"DEFLATE\" / 1*20alg-char
      \ ; case-sensitive\n     alg-char = UPPER / DIGIT / \"-\" / \"_\"\n"
    title: 5.3.  General Non-terminals
  title: 5.  Augmented BNF Syntax for the COMPRESS Extension
- contents:
  - "6.  Summary of Response Codes\n   This section defines the following new response
    code.  It is not\n   multi-line and has no arguments.\n   Response code 206\n
    \     Generated by: COMPRESS\n      Meaning: compression layer activated\n"
  title: 6.  Summary of Response Codes
- contents:
  - "7.  Security Considerations\n   Security issues are discussed throughout this
    document.\n   In general, the security considerations of the NNTP core\n   specification
    ([RFC3977], Section 12) and the DEFLATE compressed data\n   format specification
    ([RFC1951], Section 6) are applicable here.\n   Implementers should be aware that
    combining compression with\n   encryption like TLS can sometimes reveal information
    that would not\n   have been revealed without compression, as explained in Section
    6 of\n   [RFC3749].  As a matter of fact, adversaries that observe the length\n
    \  of the compressed data might be able to derive information about the\n   corresponding
    uncompressed data.  The CRIME and the BREACH attacks\n   ([RFC7457], Section 2.6)
    are examples of such case.\n   In order to help mitigate leaking authentication
    credentials, this\n   document states in Section 2.2.2 that authentication MUST
    NOT be\n   attempted after a successful use of COMPRESS.  Therefore, when a\n
    \  client wants to authenticate, compress data, and negotiate a TLS\n   security
    layer (without TLS-level compression) in the same NNTP\n   connection, it MUST
    use the STARTTLS, AUTHINFO, and COMPRESS commands\n   in that order.  Of course,
    instead of using the STARTTLS command, a\n   client can also use implicit TLS,
    that is to say it begins the TLS\n   negotiation immediately upon connection on
    a separate port dedicated\n   to NNTP over TLS.\n   NNTP commands other than AUTHINFO
    are not believed to divulge\n   confidential information as long as only public
    Netnews newsgroups\n   and articles are accessed.  That is why this specification
    only\n   prohibits the use of AUTHINFO after COMPRESS.  In case confidential\n
    \  articles are accessed in private newsgroups, special care is needed:\n   implementations
    SHOULD NOT compress confidential data together with\n   public data when a TLS
    [RFC5246] or SASL [RFC4422] security layer is\n   active.  As a matter of fact,
    adversaries that observe the length of\n   the compressed data might be able to
    derive information about it,\n   when public data (that adversaries know is read)
    and confidential\n   data are compressed in the same compression session.\n   Additionally,
    it is preferable not to compress the contents of two\n   distinct confidential
    articles together if it can be avoided, as\n   adversaries might be able to derive
    information about them (for\n   instance, if they have a few header fields or
    body lines in common).\n   This can be achieved, for instance, with DEFLATE by
    clearing the\n   compression dictionary each time a confidential article is sent.\n
    \  More complex implementations are, of course, possible and encouraged.\n   Implementations
    are encouraged to unconditionally allow compression\n   when no security layer
    is active, and to support an option to enable\n   or disable compression when
    a security layer is active.  Such an\n   option could, for instance, have global
    scope or be server/\n   connection-based.  Besides, as compression may in general
    weaken the\n   confidentiality of a security layer, implementations SHOULD NOT\n
    \  automatically enable compression when a security layer is active\n   unless
    the user explicitly enabled it with this knowledge.\n   Future extensions to NNTP
    that define commands conveying confidential\n   data SHOULD be sure to state that
    these confidential data SHOULD NOT\n   be compressed together with public data
    when a security layer is\n   active.\n   Last but not least, careful consideration
    should be given to\n   protections against implementation errors that introduce
    security\n   risks with regards to compression algorithms.  See, for instance,
    the\n   part of Section 6 of [RFC3749] about compression algorithms that can\n
    \  occasionally expand, rather than compress, input data.\n"
  title: 7.  Security Considerations
- contents:
  - '8.  IANA Considerations

    '
  - contents:
    - "8.1.  \"NNTP Compression Algorithms\" Registry\n   The \"NNTP Compression Algorithms\"
      registry is maintained by IANA.\n   The registry is available at\n   <http://www.iana.org/assignments/nntp-parameters>.\n
      \  The purpose of this registry is not only to ensure uniqueness of\n   values
      used to name NNTP compression algorithms, but also to provide\n   a definitive
      reference to technical specifications detailing each\n   NNTP compression algorithm
      available for use on the Internet.\n   An NNTP compression algorithm is either
      a private algorithm, or its\n   name is included in the IANA \"NNTP Compression
      Algorithms\" registry\n   (in which case it is a \"registered NNTP compression
      algorithm\").\n   Different entries in the registry MUST use different names.\n
      \  Private algorithms with unregistered names are allowed, but SHOULD\n   NOT
      be used because it is difficult to achieve interoperability with\n   them.\n
      \  The 206, 403, and 502 response codes that a news server answers to\n   the
      COMPRESS command using a private compression algorithm MUST have\n   the same
      meaning as the one documented in Section 2.2 of this\n   document.\n   The procedure
      detailed in Section 8.1.1 is to be used for\n   registration of a value naming
      a specific individual compression\n   algorithm.\n   Any name that conforms
      to the syntax of an NNTP compression algorithm\n   name (Section 5.3) can be
      used.  Especially, NNTP compression\n   algorithms are named by strings, from
      1 to 20 characters in length,\n   consisting of uppercase letters, digits, hyphens,
      and/or underscores.\n   Comments may be included in the registry as discussed
      in\n   Section 8.1.2 and may be changed as discussed in Section 8.1.3.\n"
    - contents:
      - "8.1.1.  Algorithm Name Registration Procedure\n   IANA will register new
        NNTP compression algorithm names on a First\n   Come First Served basis, as
        defined in BCP 26 [RFC5226].  IANA has\n   the right to reject obviously bogus
        registration requests, but will\n   not perform a review of claims made in
        the registration form.\n   Registration of an NNTP compression algorithm is
        requested by filling\n   in the following template and sending it via electronic
        mail to IANA\n   at <iana@iana.org>:\n      Subject: Registration of NNTP
        compression algorithm Z\n      NNTP compression algorithm name:\n      Security
        considerations:\n      Published specification (recommended):\n      Contact
        for further information:\n      Intended usage: (One of COMMON, LIMITED USE,
        or OBSOLETE)\n      Owner/Change controller:\n      Note: (Any other information
        that the author deems relevant may be\n             added here.)\n   While
        this registration procedure does not require expert review,\n   authors of
        NNTP compression algorithms are encouraged to seek\n   community review and
        comment whenever that is feasible.  Authors may\n   seek community review
        by posting a specification of their proposed\n   algorithm as an Internet-Draft.
        \ NNTP compression algorithms intended\n   for widespread use should be standardized
        through the normal IETF\n   process, when appropriate.\n"
      title: 8.1.1.  Algorithm Name Registration Procedure
    - contents:
      - "8.1.2.  Comments on Algorithm Registrations\n   Comments on a registered
        NNTP compression algorithm should first be\n   sent to the \"owner\" of the
        algorithm and/or to the mailing list for\n   the now concluded NNTPEXT working
        group (<ietf-nntp@lists.eyrie.org>)\n   of the IETF.\n   Submitters of comments
        may, after a reasonable attempt to contact the\n   owner and/or the above
        mailing list, request IANA to attach their\n   comment to the NNTP compression
        algorithm registration itself by\n   sending mail to <iana@iana.org>.  At
        IANA's sole discretion, IANA may\n   attach the comment to the NNTP compression
        algorithm's registration.\n"
      title: 8.1.2.  Comments on Algorithm Registrations
    - contents:
      - "8.1.3.  Change Control\n   Once an NNTP compression algorithm registration
        has been published by\n   IANA, the owner may request a change to its definition.
        \ The change\n   request follows the same procedure as the initial registration\n
        \  request.\n   The owner of an NNTP compression algorithm may pass responsibility\n
        \  for the algorithm to another person or agency by informing IANA; this\n
        \  can be done without discussion or review.\n   The IESG may reassign responsibility
        for an NNTP compression\n   algorithm.  The most common case of this will
        be to enable changes to\n   be made to algorithms where the owner of the registration
        has died,\n   has moved out of contact, or is otherwise unable to make changes
        that\n   are important to the community.\n   NNTP compression algorithm registrations
        MUST NOT be deleted;\n   algorithms that are no longer believed appropriate
        for use can be\n   declared OBSOLETE by a change to their \"intended usage\"
        field; such\n   algorithms will be clearly marked in the registry published
        by IANA.\n   The IESG is considered to be the owner of all NNTP compression\n
        \  algorithms that are on the IETF Standards Track.\n"
      title: 8.1.3.  Change Control
    title: 8.1.  "NNTP Compression Algorithms" Registry
  - contents:
    - "8.2.  Registration of the DEFLATE Compression Algorithm\n   This section gives
      a formal definition of the DEFLATE compression\n   algorithm as required by
      Section 8.1.1 for the IANA registry.\n      NNTP compression algorithm name:
      DEFLATE\n      Security considerations: See Section 7 of this document\n      Published
      specification: This document\n      Contact for further information: Authors
      of this document\n      Intended usage: COMMON\n      Owner/Change controller:
      IESG <iesg@ietf.org>\n      Note: This algorithm is mandatory to implement\n
      \  This registration appears as follows in the \"NNTP Compression\n   Algorithms\"
      registry:\n   +------------+------------+--------------+--------------+-----------+\n
      \  | Algorithm  | Intended   | Comment      | Change       | Reference |\n   |
      Name       | Usage      |              | Controller   |           |\n   +------------+------------+--------------+--------------+-----------+\n
      \  | DEFLATE    | COMMON     | Mandatory to | IESG         | RFC 8054  |\n   |
      \           |            | implement    |              |           |\n   +------------+------------+--------------+--------------+-----------+\n"
    title: 8.2.  Registration of the DEFLATE Compression Algorithm
  - contents:
    - "8.3.  Registration of the NNTP COMPRESS Extension\n   This section gives a
      formal definition of the COMPRESS extension as\n   required by Section 3.3.3
      of [RFC3977] for the IANA registry.\n   o  The COMPRESS extension allows an
      NNTP connection to be effectively\n      and efficiently compressed.\n   o  The
      capability label for this extension is \"COMPRESS\", whose\n      arguments
      list the available compression algorithms.\n   o  This extension defines one
      new command, COMPRESS, whose behavior,\n      arguments, and responses are defined
      in Section 2.2.\n   o  This extension does not associate any new responses with\n
      \     pre-existing NNTP commands.\n   o  This extension does affect the overall
      behavior of both server and\n      client, in that after successful use of the
      COMPRESS command, all\n      communication is transmitted in a compressed format.\n
      \  o  This extension does not affect the maximum length of commands or\n      initial
      response lines.\n   o  This extension does not alter pipelining, but the COMPRESS
      command\n      cannot be pipelined.\n   o  Use of this extension does alter
      the capabilities list; once the\n      COMPRESS command has been used successfully,
      the COMPRESS\n      capability can no longer be advertised by CAPABILITIES.\n
      \     Additionally, the STARTTLS and MODE-READER capabilities MUST NOT\n      be
      advertised, and the AUTHINFO capability label MUST either be\n      listed with
      no arguments or not advertised at all after a\n      successful execution of
      the COMPRESS command.\n   o  This extension does not cause any pre-existing
      command to produce\n      a 401, 480, or 483 response code.\n   o  This extension
      is unaffected by any use of the MODE READER\n      command; however, the MODE
      READER command MUST NOT be used in the\n      same session following a successful
      execution of the COMPRESS\n      command.\n   o  The STARTTLS and AUTHINFO commands
      MUST NOT be used in the same\n      session following a successful execution
      of the COMPRESS command.\n   o  Published Specification: This document.\n   o
      \ Contact for Further Information: Authors of this document.\n   o  Change Controller:
      IESG <iesg@ietf.org>\n   This registration will appear as follows in the \"NNTP
      Capability\n   Labels\" registry contained in the \"Network News Transfer Protocol\n
      \  (NNTP) Parameters\" registry:\n        +----------+----------------------------------+-----------+\n
      \       | Label    | Meaning                          | Reference |\n        +----------+----------------------------------+-----------+\n
      \       | COMPRESS | Supported compression algorithms | RFC 8054  |\n        +----------+----------------------------------+-----------+\n"
    title: 8.3.  Registration of the NNTP COMPRESS Extension
  title: 8.  IANA Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC1951]  Deutsch, P., \"DEFLATE Compressed
      Data Format Specification\n              version 1.3\", RFC 1951, DOI 10.17487/RFC1951,
      May 1996,\n              <http://www.rfc-editor.org/info/rfc1951>.\n   [RFC2119]
      \ Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3977]  Feather,
      C., \"Network News Transfer Protocol (NNTP)\",\n              RFC 3977, DOI
      10.17487/RFC3977, October 2006,\n              <http://www.rfc-editor.org/info/rfc3977>.\n
      \  [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226,
      May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC5234]
      \ Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:
      ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234, January 2008,\n
      \             <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC7405]  Kyzivat,
      P., \"Case-Sensitive String Support in ABNF\",\n              RFC 7405, DOI
      10.17487/RFC7405, December 2014,\n              <http://www.rfc-editor.org/info/rfc7405>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [CRIME]    Rizzo, J. and T. Duong, \"The CRIME
      Attack\", Ekoparty\n              Security Conference, 2012.\n   [IEEE.1003.1-2008]\n
      \             IEEE, \"Information Technology - Portable Operating System\n              Interface
      (POSIX(R))\", IEEE Standard 1003.1-2008,\n              DOI 10.1109/IEEESTD.2016.7582338,
      2008,\n              <https://standards.ieee.org/findstds/\n              standard/1003.1-2008.html>.\n
      \  [MNP]      Held, G., \"The Complete Modem Reference\", Second\n              Edition,
      John Wiley & Sons, Inc., May 1994.\n   [RFC1962]  Rand, D., \"The PPP Compression
      Control Protocol (CCP)\",\n              RFC 1962, DOI 10.17487/RFC1962, June
      1996,\n              <http://www.rfc-editor.org/info/rfc1962>.\n   [RFC3749]
      \ Hollenbeck, S., \"Transport Layer Security Protocol\n              Compression
      Methods\", RFC 3749, DOI 10.17487/RFC3749, May\n              2004, <http://www.rfc-editor.org/info/rfc3749>.\n
      \  [RFC4422]  Melnikov, A., Ed. and K. Zeilenga, Ed., \"Simple\n              Authentication
      and Security Layer (SASL)\", RFC 4422,\n              DOI 10.17487/RFC4422,
      June 2006,\n              <http://www.rfc-editor.org/info/rfc4422>.\n   [RFC4642]
      \ Murchison, K., Vinocur, J., and C. Newman, \"Using\n              Transport
      Layer Security (TLS) with Network News Transfer\n              Protocol (NNTP)\",
      RFC 4642, DOI 10.17487/RFC4642, October\n              2006, <http://www.rfc-editor.org/info/rfc4642>.\n
      \  [RFC4643]  Vinocur, J. and K. Murchison, \"Network News Transfer\n              Protocol
      (NNTP) Extension for Authentication\", RFC 4643,\n              DOI 10.17487/RFC4643,
      October 2006,\n              <http://www.rfc-editor.org/info/rfc4643>.\n   [RFC4644]
      \ Vinocur, J. and K. Murchison, \"Network News Transfer\n              Protocol
      (NNTP) Extension for Streaming Feeds\", RFC 4644,\n              DOI 10.17487/RFC4644,
      October 2006,\n              <http://www.rfc-editor.org/info/rfc4644>.\n   [RFC4648]
      \ Josefsson, S., \"The Base16, Base32, and Base64 Data\n              Encodings\",
      RFC 4648, DOI 10.17487/RFC4648, October 2006,\n              <http://www.rfc-editor.org/info/rfc4648>.\n
      \  [RFC4978]  Gulbrandsen, A., \"The IMAP COMPRESS Extension\", RFC 4978,\n
      \             DOI 10.17487/RFC4978, August 2007,\n              <http://www.rfc-editor.org/info/rfc4978>.\n
      \  [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC7457]
      \ Sheffer, Y., Holz, R., and P. Saint-Andre, \"Summarizing\n              Known
      Attacks on Transport Layer Security (TLS) and\n              Datagram TLS (DTLS)\",
      RFC 7457, DOI 10.17487/RFC7457,\n              February 2015, <http://www.rfc-editor.org/info/rfc7457>.\n
      \  [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations
      for Secure Use of Transport Layer\n              Security (TLS) and Datagram
      Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,
      May\n              2015, <http://www.rfc-editor.org/info/rfc7525>.\n   [V42bis]
      \  International Telecommunications Union, \"Data compression\n              procedures
      for data circuit-terminating equipment (DCE)\n              using error correction
      procedures\", ITU-T\n              Recommendation V.42bis, January 1990,\n              <http://www.itu.int/rec/T-REC-V.42bis>.\n
      \  [yEnc]     Helbing, J., \"yEnc - Efficient encoding for Usenet and\n              eMail\",
      March 2002, <http://www.yenc.org/>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Acknowledgments\n   This document draws heavily on ideas in [RFC4978] by Arnt\n
    \  Gulbrandsen; a large portion of this text was borrowed from that\n   specification.\n
    \  The authors would like to thank the following individuals for\n   contributing
    their ideas and reviewing this specification: Mark\n   Adler, Russ Allbery, Stephane
    Bortzmeyer, Francis Dupont, Angel\n   Gonzalez, Barry Leiba, John Levine, and
    Brian Peterson.\n   Special thanks to our Document Shepherd, Michael Baeuerle,
    who\n   significantly helped to increase the quality of this specification,\n
    \  and to Stephen Farrell for his encouragement to pursue the efforts in\n   standardizing
    this NNTP extension.\n   Many thanks to the Responsible Area Director, Alexey
    Melnikov, for\n   reviewing and sponsoring this document.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Kenneth Murchison\n   Carnegie Mellon University\n   5000
    Forbes Avenue\n   Pittsburgh, PA  15213\n   United States of America\n   Phone:
    +1 412 268 1982\n   Email: murch@andrew.cmu.edu\n   Julien Elie\n   10 allee Clovis\n
    \  Noisy-le-Grand  93160\n   France\n   Email: julien@trigofacile.com\n   URI:
    \  http://www.trigofacile.com/\n"
  title: Authors' Addresses
