- title: __initial_text__
  contents:
  - '  Secure Shell (SSH) Key Exchange Method Using Curve25519 and Curve448

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes the specification for using Curve25519 and\n\
    \   Curve448 key exchange methods in the Secure Shell (SSH) protocol.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8731.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Requirements Language\n   3. \
    \ Key Exchange Methods\n     3.1.  Shared Secret Encoding\n   4.  Security Considerations\n\
    \   5.  IANA Considerations\n   6.  References\n     6.1.  Normative References\n\
    \     6.2.  Informative References\n   Acknowledgements\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Secure Shell (SSH) [RFC4251] is a secure remote login protocol.\
    \  The\n   key exchange protocol described in [RFC4253] supports an extensible\n\
    \   set of methods.  [RFC5656] defines how elliptic curves are integrated\n  \
    \ into this extensible SSH framework, and this document reuses the\n   Elliptic\
    \ Curve Diffie-Hellman (ECDH) key exchange protocol messages\n   defined in Section\
    \ 7.1 (ECDH Message Numbers) of [RFC5656].  Other\n   parts of [RFC5656], such\
    \ as Elliptic Curve Menezes-Qu-Vanstone\n   (ECMQV) key agreement and Elliptic\
    \ Curve Digital Signature Algorithm\n   (ECDSA), are not considered in this document.\n\
    \   This document describes how to implement key exchange based on\n   Curve25519\
    \ and Curve448 [RFC7748] in SSH.  For Curve25519 with\n   SHA-256 [RFC6234][SHS],\
    \ the algorithm described is equivalent to the\n   privately defined algorithm\
    \ \"curve25519-sha256@libssh.org\", which at\n   the time of publication was implemented\
    \ and widely deployed in libssh\n   [libssh] and OpenSSH [OpenSSH].  The Curve448\
    \ key exchange method is\n   similar but uses SHA-512 [RFC6234][SHS].\n"
- title: 2.  Requirements Language
  contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 3.  Key Exchange Methods
  contents:
  - "3.  Key Exchange Methods\n   The key exchange procedure is similar to the ECDH\
    \ method described in\n   Section 4 of [RFC5656], though with a different wire\
    \ encoding used\n   for public values and the final shared secret.  Public ephemeral\
    \ keys\n   are encoded for transmission as standard SSH strings.\n   The protocol\
    \ flow, the SSH_MSG_KEX_ECDH_INIT and\n   SSH_MSG_KEX_ECDH_REPLY messages, and\
    \ the structure of the exchange\n   hash are identical to Section 4 of [RFC5656].\n\
    \   The method names registered by this document are \"curve25519-sha256\"\n \
    \  and \"curve448-sha512\".\n   The methods are based on Curve25519 and Curve448\
    \ scalar\n   multiplication, as described in [RFC7748].  Private and public keys\n\
    \   are generated as described therein.  Public keys are defined as\n   strings\
    \ of 32 bytes for Curve25519 and 56 bytes for Curve448.\n   The key-agreement\
    \ schemes \"curve25519-sha256\" and \"curve448-sha512\"\n   perform the Diffie-Hellman\
    \ protocol using the functions X25519 and\n   X448, respectively.  Implementations\
    \ SHOULD compute these functions\n   using the algorithms described in [RFC7748].\
    \  When they do so,\n   implementations MUST check whether the computed Diffie-Hellman\
    \ shared\n   secret is the all-zero value and abort if so, as described in\n \
    \  Section 6 of [RFC7748].  Alternative implementations of these\n   functions\
    \ SHOULD abort when either the client or the server input\n   forces the shared\
    \ secret to one of a small set of values, as\n   described in Sections 6 and 7\
    \ of [RFC7748].  Clients and servers MUST\n   also abort if the length of the\
    \ received public keys are not the\n   expected lengths.  An abort for these purposes\
    \ is defined as a\n   disconnect (SSH_MSG_DISCONNECT) of the session and SHOULD\
    \ use the\n   SSH_DISCONNECT_KEY_EXCHANGE_FAILED reason for the message\n   [IANA-REASON].\
    \  No further validation is required beyond what is\n   described in [RFC7748].\
    \  The derived shared secret is 32 bytes when\n   \"curve25519-sha256\" is used\
    \ and 56 bytes when \"curve448-sha512\" is\n   used.  The encodings of all values\
    \ are defined in [RFC7748].  The\n   hash used is SHA-256 for \"curve25519-sha256\"\
    \ and SHA-512 for\n   \"curve448-sha512\".\n"
- title: 3.1.  Shared Secret Encoding
  contents:
  - "3.1.  Shared Secret Encoding\n   The following step differs from [RFC5656], which\
    \ uses a different\n   conversion.  This is not intended to modify that text generally,\
    \ but\n   only to be applicable to the scope of the mechanism described in this\n\
    \   document.\n   The shared secret, K, is defined in [RFC4253] and [RFC5656]\
    \ as an\n   integer encoded as a multiple precision integer (mpint).\n   Curve25519/448\
    \ outputs a binary string X, which is the 32- or 56-byte\n   point obtained by\
    \ scalar multiplication of the other side's public\n   key and the local private\
    \ key scalar.  The 32 or 56 bytes of X are\n   converted into K by interpreting\
    \ the octets as an unsigned fixed-\n   length integer encoded in network byte\
    \ order.\n   The mpint K is then encoded using the process described in Section\
    \ 5\n   of [RFC4251], and the resulting bytes are fed as described in\n   [RFC4253]\
    \ to the key exchange method's hash function to generate\n   encryption keys.\n\
    \   When performing the X25519 or X448 operations, the integer values\n   there\
    \ will be encoded into byte strings by doing a fixed-length\n   unsigned little-endian\
    \ conversion, per [RFC7748].  It is only later\n   when these byte strings are\
    \ then passed to the ECDH function in SSH\n   that the bytes are reinterpreted\
    \ as a fixed-length unsigned big-\n   endian integer value K, and then later that\
    \ K value is encoded as a\n   variable-length signed \"mpint\" before being fed\
    \ to the hash algorithm\n   used for key generation.  The mpint K is then fed\
    \ along with other\n   data to the key exchange method's hash function to generate\n\
    \   encryption keys.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   The security considerations of [RFC4251], [RFC5656],\
    \ and [RFC7748]\n   are inherited.\n   Curve25519 with SHA-256 provides strong\
    \ (~128 bits) security, is\n   efficient on a wide range of architectures, and\
    \ has characteristics\n   that allow for better implementation properties compared\
    \ to\n   traditional elliptic curves.  Curve448 with SHA-512 provides stronger\n\
    \   (~224 bits) security with similar implementation properties; however,\n  \
    \ it has not received the same cryptographic review as Curve25519.  It\n   is\
    \ also slower (larger key material and larger secure hash\n   algorithm), but\
    \ it is provided as a hedge to combat unforeseen\n   analytical advances against\
    \ Curve25519 and SHA-256 due to the larger\n   number of security bits.\n   The\
    \ way the derived mpint binary secret string is encoded before it\n   is hashed\
    \ (i.e., adding or removing zero bytes for encoding) raises\n   the potential\
    \ for a side-channel attack, which could determine the\n   length of what is hashed.\
    \  This would leak the most significant bit\n   of the derived secret and/or allow\
    \ detection of when the most\n   significant bytes are zero.  For backwards-compatibility\
    \ reasons, it\n   was decided not to address this potential problem.\n   This\
    \ document provides \"curve25519-sha256\" as the preferred choice\n   but suggests\
    \ that the \"curve448-sha512\" be implemented to provide\n   more than 128 bits\
    \ of security strength should that become a\n   requirement.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   IANA has added \"curve25519-sha256\" and \"curve448-sha512\"\
    \ to the \"Key\n   Exchange Method Names\" registry for SSH [IANA-KEX] that was\
    \ created\n   in Section 4.10 of [RFC4250].\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC4250]  Lehtinen, S. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n  \
    \            Protocol Assigned Numbers\", RFC 4250,\n              DOI 10.17487/RFC4250,\
    \ January 2006,\n              <https://www.rfc-editor.org/info/rfc4250>.\n  \
    \ [RFC4251]  Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n      \
    \        Protocol Architecture\", RFC 4251, DOI 10.17487/RFC4251,\n          \
    \    January 2006, <https://www.rfc-editor.org/info/rfc4251>.\n   [RFC4253]  Ylonen,\
    \ T. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n              Transport Layer\
    \ Protocol\", RFC 4253, DOI 10.17487/RFC4253,\n              January 2006, <https://www.rfc-editor.org/info/rfc4253>.\n\
    \   [RFC5656]  Stebila, D. and J. Green, \"Elliptic Curve Algorithm\n        \
    \      Integration in the Secure Shell Transport Layer\",\n              RFC 5656,\
    \ DOI 10.17487/RFC5656, December 2009,\n              <https://www.rfc-editor.org/info/rfc5656>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [SHS]      National\
    \ Institute of Standards and Technology, \"Secure\n              Hash Standard\
    \ (SHS)\", FIPS PUB 180-4,\n              DOI 10.6028/NIST.FIPS.180-4, August\
    \ 2015,\n              <https://nvlpubs.nist.gov/nistpubs/FIPS/\n            \
    \  NIST.FIPS.180-4.pdf>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [IANA-KEX] IANA, \"Secure Shell (SSH) Protocol\
    \ Parameters: Key\n              Exchange Method Names\",\n              <https://www.iana.org/assignments/ssh-parameters/>.\n\
    \   [IANA-REASON]\n              IANA, \"Secure Shell (SSH) Protocol Parameters:\n\
    \              Disconnection Messages Reason Codes and Descriptions\",\n     \
    \         <https://www.iana.org/assignments/ssh-parameters/>.\n   [libssh]   libssh,\
    \ \"The SSH Library\", <https://www.libssh.org/>.\n   [OpenSSH]  OpenSSH group\
    \ of OpenBSD, \"The OpenSSH Project\",\n              <https://www.openssh.com/>.\n\
    \   [RFC6234]  Eastlake 3rd, D. and T. Hansen, \"US Secure Hash Algorithms\n \
    \             (SHA and SHA-based HMAC and HKDF)\", RFC 6234,\n              DOI\
    \ 10.17487/RFC6234, May 2011,\n              <https://www.rfc-editor.org/info/rfc6234>.\n\
    \   [RFC7748]  Langley, A., Hamburg, M., and S. Turner, \"Elliptic Curves\n  \
    \            for Security\", RFC 7748, DOI 10.17487/RFC7748, January\n       \
    \       2016, <https://www.rfc-editor.org/info/rfc7748>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The \"curve25519-sha256\" key exchange method is identical\
    \ to the\n   \"curve25519-sha256@libssh.org\" key exchange method created by Aris\n\
    \   Adamantiadis and implemented in libssh and OpenSSH.\n   Thanks to the following\
    \ people for review and comments: Denis Bider,\n   Damien Miller, Niels Moeller,\
    \ Matt Johnston, Eric Rescorla, Ron\n   Frederick, and Stefan Buehler.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Aris Adamantiadis\n   libssh\n   Email: aris@badcode.be\n\
    \   Simon Josefsson\n   SJD AB\n   Email: simon@josefsson.org\n   Mark D. Baushke\n"
