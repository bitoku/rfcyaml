- contents:
  - '                       Session Recording Protocol

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies the use of the Session Initiation Protocol\n
    \  (SIP), the Session Description Protocol (SDP), and the Real-time\n   Transport
    Protocol (RTP) for delivering real-time media and metadata\n   from a Communication
    Session (CS) to a recording device.  The Session\n   Recording Protocol specifies
    the use of SIP, SDP, and RTP to\n   establish a Recording Session (RS) between
    the Session Recording\n   Client (SRC), which is on the path of the CS, and a
    Session Recording\n   Server (SRS) at the recording device.  This document considers
    only\n   active recording, where the SRC purposefully streams media to an SRS\n
    \  and all participating user agents (UAs) are notified of the\n   recording.
    \ Passive recording, where a recording device detects media\n   directly from
    the network (e.g., using port-mirroring techniques), is\n   outside the scope
    of this document.  In addition, lawful intercept is\n   outside the scope of this
    document.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7866.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \  2. Terminology .....................................................4\n   3.
    Definitions .....................................................4\n   4. Scope
    ...........................................................4\n   5. Overview of
    Operations ..........................................5\n      5.1. Delivering
    Recorded Media ..................................5\n      5.2. Delivering Recording
    Metadata ..............................8\n      5.3. Receiving Recording Indications
    and Providing Recording\n           Preferences ................................................9\n
    \  6. SIP Handling ...................................................11\n      6.1.
    Procedures at the SRC .....................................11\n           6.1.1.
    Initiating a Recording Session .....................11\n           6.1.2. SIP
    Extensions for Recording Indications\n                  and Preferences ....................................12\n
    \     6.2. Procedures at the SRS .....................................12\n      6.3.
    Procedures for Recording-Aware User Agents ................12\n   7. SDP Handling
    ...................................................13\n      7.1. Procedures at
    the SRC .....................................13\n           7.1.1. SDP Handling
    in the RS .............................13\n                  7.1.1.1. Handling
    Media Stream Updates .............14\n           7.1.2. Recording Indication in
    the CS .....................15\n           7.1.3. Recording Preference in the
    CS .....................16\n      7.2. Procedures at the SRS .....................................16\n
    \     7.3. Procedures for Recording-Aware User Agents ................18\n           7.3.1.
    Recording Indication ...............................18\n           7.3.2. Recording
    Preference ...............................19\n   8. RTP Handling ...................................................20\n
    \     8.1. RTP Mechanisms ............................................20\n           8.1.1.
    RTCP ...............................................20\n           8.1.2. RTP
    Profile ........................................21\n           8.1.3. SSRC ...............................................21\n
    \          8.1.4. CSRC ...............................................22\n           8.1.5.
    SDES ...............................................22\n                  8.1.5.1.
    CNAME .....................................22\n           8.1.6. Keepalive ..........................................22\n
    \          8.1.7. RTCP Feedback Messages .............................23\n                  8.1.7.1.
    Full Intra Request ........................23\n                  8.1.7.2. Picture
    Loss Indication ...................23\n                  8.1.7.3. Temporary Maximum
    Media Stream Bit\n                           Rate Request ..............................24\n
    \          8.1.8. Symmetric RTP/RTCP for Sending and Receiving .......24\n      8.2.
    Roles .....................................................25\n           8.2.1.
    SRC Acting as an RTP Translator ....................26\n                  8.2.1.1.
    Forwarding Translator .....................26\n                  8.2.1.2. Transcoding
    Translator ....................26\n           8.2.2. SRC Acting as an RTP Mixer
    .........................27\n           8.2.3. SRC Acting as an RTP Endpoint ......................28\n
    \     8.3. RTP Session Usage by SRC ..................................28\n           8.3.1.
    SRC Using Multiple m-lines .........................28\n           8.3.2. SRC
    Using Mixing ...................................29\n      8.4. RTP Session Usage
    by SRS ..................................30\n   9. Metadata .......................................................31\n
    \     9.1. Procedures at the SRC .....................................31\n      9.2.
    Procedures at the SRS .....................................33\n   10. Persistent
    Recording ..........................................35\n   11. IANA Considerations
    ...........................................36\n      11.1. Registration of Option
    Tags ..............................36\n           11.1.1. \"siprec\" Option Tag
    ...............................36\n           11.1.2. \"record-aware\" Option
    Tag .........................36\n      11.2. Registration of Media Feature Tags
    .......................36\n           11.2.1. Feature Tag for the SRC ...........................36\n
    \          11.2.2. Feature Tag for the SRS ...........................37\n      11.3.
    New Content-Disposition Parameter Registrations ..........37\n      11.4. SDP
    Attributes ...........................................38\n           11.4.1. \"record\"
    SDP Attribute ............................38\n           11.4.2. \"recordpref\"
    SDP Attribute ........................38\n   12. Security Considerations .......................................39\n
    \     12.1. Authentication and Authorization .........................39\n      12.2.
    RTP Handling .............................................40\n      12.3. Metadata
    .................................................41\n      12.4. Storage and Playback
    .....................................41\n   13. References ....................................................41\n
    \     13.1. Normative References .....................................41\n      13.2.
    Informative References ...................................42\n   Acknowledgements
    ..................................................44\n   Authors' Addresses ................................................45\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies the mechanism to record a Communication\n
    \  Session (CS) by delivering real-time media and metadata from the CS\n   to
    a recording device.  In accordance with the architecture\n   [RFC7245], the Session
    Recording Protocol specifies the use of SIP,\n   the Session Description Protocol
    (SDP), and RTP to establish a\n   Recording Session (RS) between the Session Recording
    Client (SRC),\n   which is on the path of the CS, and a Session Recording Server
    (SRS)\n   at the recording device.  SIP is also used to deliver metadata to the\n
    \  recording device, as specified in [RFC7865].  Metadata is information\n   that
    describes recorded media and the CS to which they relate.  The\n   Session Recording
    Protocol intends to satisfy the SIP-based Media\n   Recording (SIPREC) requirements
    listed in [RFC6341].  In addition to\n   the Session Recording Protocol, this
    document specifies extensions\n   for user agents (UAs) that are participants
    in a CS to receive\n   recording indications and to provide preferences for recording.\n
    \  This document considers only active recording, where the SRC\n   purposefully
    streams media to an SRS and all participating UAs are\n   notified of the recording.
    \ Passive recording, where a recording\n   device detects media directly from
    the network (e.g., using\n   port-mirroring techniques), is outside the scope
    of this document.\n   In addition, lawful intercept is outside the scope of this
    document,\n   in accordance with [RFC2804].\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Terminology
- contents:
  - "3.  Definitions\n   This document refers to the core definitions provided in
    the\n   architecture document [RFC7245].\n   Section 8 uses the definitions provided
    in \"RTP: A Transport Protocol\n   for Real-Time Applications\" [RFC3550].\n"
  title: 3.  Definitions
- contents:
  - "4.  Scope\n   The scope of the Session Recording Protocol includes the\n   establishment
    of the RSs and the reporting of the metadata.  The\n   scope also includes extensions
    supported by UAs participating in the\n   CS, such as an indication of recording.
    \ The UAs need not be\n   recording aware in order to participate in a CS being
    recorded.\n   The items in the following list, which is not exhaustive, do not\n
    \  represent the protocol itself and are considered out of scope for the\n   Session
    Recording Protocol:\n   o  Delivering recorded media in real time as the CS media\n
    \  o  Specifications of criteria to select a specific CS to be recorded\n      or
    triggers to record a certain CS in the future\n   o  Recording policies that determine
    whether the CS should be\n      recorded and whether parts of the CS are to be
    recorded\n   o  Retention policies that determine how long a recording is stored\n
    \  o  Searching and accessing the recorded media and metadata\n   o  Policies
    governing how CS users are made aware of recording\n   o  Delivering additional
    RS metadata through a non-SIP mechanism\n"
  title: 4.  Scope
- contents:
  - "5.  Overview of Operations\n   This section is informative and provides a description
    of recording\n   operations.\n   Section 6 describes the SIP communication in
    an RS between an SRC and\n   an SRS, as well as the procedures for recording-aware
    UAs\n   participating in a CS.  Section 7 describes SDP handling in an RS,\n   and
    the procedures for recording indications and recording\n   preferences.  Section
    8 describes RTP handling in an RS.  Section 9\n   describes the mechanism to deliver
    recording metadata from the SRC to\n   the SRS.\n   As mentioned in the architecture
    document [RFC7245], there are a\n   number of types of call flows based on the
    location of the SRC.  The\n   sample call flows discussed in Section 5.1 provide
    a quick overview\n   of the operations between the SRC and the SRS.\n"
  - contents:
    - "5.1.  Delivering Recorded Media\n   When a SIP Back-to-Back User Agent (B2BUA)
      with SRC functionality\n   routes a call from UA A to UA B, the SRC has access
      to the media path\n   between the UAs.  When the SRC is aware that it should
      be recording\n   the conversation, the SRC can cause the B2BUA to relay the
      media\n   between UA A and UA B.  The SRC then establishes the RS with the SRS\n
      \  and sends replicated media towards the SRS.\n   An endpoint may also have
      SRC functionality, where the endpoint\n   itself establishes the RS to the SRS.
      \ Since the endpoint has access\n   to the media in the CS, the endpoint can
      send replicated media\n   towards the SRS.\n   The example call flows in Figures
      1 and 2 show an SRC establishing an\n   RS towards an SRS.  Figure 1 illustrates
      UA A acting as the SRC.\n   Figure 2 illustrates a B2BUA acting as the SRC.
      \ Note that the SRC\n   can choose when to establish the RS independent of the
      CS, even\n   though the example call flows suggest that the SRC is establishing\n
      \  the RS (message (5) in Figure 2) after the CS is established.\n            UA
      A/SRC               UA B                    SRS\n             |(1) CS INVITE
      \         |                      |\n             |---------------------->|                      |\n
      \            |           (2) 200 OK  |                      |\n             |<----------------------|
      \                     |\n             |                       |                      |\n
      \            |(3) RS INVITE with SDP |                      |\n             |--------------------------------------------->|\n
      \            |                       |  (4) 200 OK with SDP |\n             |<---------------------------------------------|\n
      \            |(5) CS RTP             |                      |\n             |======================>|
      \                     |\n             |<======================|                      |\n
      \            |(6) RS RTP             |                      |\n             |=============================================>|\n
      \            |=============================================>|\n             |
      \                      |                      |\n             |(7) CS BYE             |
      \                     |\n             |---------------------->|                      |\n
      \            |(8) RS BYE             |                      |\n             |--------------------------------------------->|\n
      \            |                       |                      |\n            Figure
      1: Basic Recording Call Flow with UA as SRC\n     UA A           SRC                    UA
      B                    SRS\n      |(1) CS INVITE |                       |                      |\n
      \     |------------->|                       |                      |\n      |
      \             |(2) CS INVITE          |                      |\n      |              |---------------------->|
      \                     |\n      |              |           (3) 200 OK  |                      |\n
      \     |              |<----------------------|                      |\n      |
      \  (4) 200 OK |                       |                      |\n      |<-------------|
      \                      |                      |\n      |              |(5) RS
      INVITE with SDP |                      |\n      |              |--------------------------------------------->|\n
      \     |              |                       |  (6) 200 OK with SDP |\n      |
      \             |<---------------------------------------------|\n      |(7) CS
      RTP    |                       |                      |\n      |=============>|======================>|
      \                     |\n      |<=============|<======================|                      |\n
      \     |              |(8) RS RTP             |                      |\n      |
      \             |=============================================>|\n      |              |=============================================>|\n
      \     |(9) CS BYE    |                       |                      |\n      |------------->|
      \                      |                      |\n      |              |(10)
      CS BYE            |                      |\n      |              |---------------------->|
      \                     |\n      |              |(11) RS BYE            |                      |\n
      \     |              |--------------------------------------------->|\n      |
      \             |                       |                      |\n           Figure
      2: Basic Recording Call Flow with B2BUA as SRC\n   The call flow shown in Figure
      2 can also apply to the case of a\n   centralized conference with a mixer.  For
      clarity, ACKs to INVITEs\n   and 200 OKs to BYEs are not shown.  The conference
      focus can provide\n   the SRC functionality, since the conference focus has
      access to all\n   the media from each conference participant.  When a recording
      is\n   requested, the SRC delivers the metadata and the media streams to the\n
      \  SRS.  Since the conference focus has access to a mixer, the SRC may\n   choose
      to mix the media streams from all participants as a single\n   mixed media stream
      towards the SRS.\n   An SRC can use a single RS to record multiple CSs.  Every
      time the\n   SRC wants to record a new call, the SRC updates the RS with a new
      SDP\n   offer to add new recorded streams to the RS and to correspondingly\n
      \  also update the metadata for the new call.\n   An SRS can also establish
      an RS to an SRC, although it is beyond the\n   scope of this document to define
      how an SRS would specify which calls\n   to record.\n"
    title: 5.1.  Delivering Recorded Media
  - contents:
    - "5.2.  Delivering Recording Metadata\n   The SRC is responsible for the delivery
      of metadata to the SRS.  The\n   SRC may provide an initial metadata snapshot
      about recorded media\n   streams in the initial INVITE content in the RS.  Subsequent
      metadata\n   updates can be represented as a stream of events in UPDATE [RFC3311]\n
      \  or re-INVITE requests sent by the SRC.  These metadata updates are\n   normally
      incremental updates to the initial metadata snapshot to\n   optimize on the
      size of updates.  However, the SRC may also decide to\n   send a new metadata
      snapshot at any time.\n   Metadata is transported in the body of INVITE or UPDATE
      messages.\n   Certain metadata, such as the attributes of the recorded media\n
      \  stream, is located in the SDP of the RS.\n   The SRS has the ability to send
      a request to the SRC to ask for a new\n   metadata snapshot update from the
      SRC.  This can happen when the SRS\n   fails to understand the current stream
      of incremental updates for\n   whatever reason -- for example, when the SRS
      loses the current state\n   due to internal failure.  The SRS may optionally
      attach a reason\n   along with the snapshot request.  This request allows both
      the SRC\n   and the SRS to synchronize the states with a new metadata snapshot
      so\n   that further incremental metadata updates will be based on the latest\n
      \  metadata snapshot.  Similar to the metadata content, the metadata\n   snapshot
      request is transported as content in UPDATE or INVITE\n   messages sent by the
      SRS in the RS.\n          SRC                                                   SRS\n
      \          |                                                     |\n           |(1)
      INVITE (metadata snapshot 1)                     |\n           |---------------------------------------------------->|\n
      \          |                                          (2) 200 OK |\n           |<----------------------------------------------------|\n
      \          |(3) ACK                                              |\n           |---------------------------------------------------->|\n
      \          |(4) RTP                                              |\n           |====================================================>|\n
      \          |====================================================>|\n           |(5)
      UPDATE (metadata update 1)                       |\n           |---------------------------------------------------->|\n
      \          |                                          (6) 200 OK |\n           |<----------------------------------------------------|\n
      \          |(7) UPDATE (metadata update 2)                       |\n           |---------------------------------------------------->|\n
      \          |                                          (8) 200 OK |\n           |<----------------------------------------------------|\n
      \          |              (9) UPDATE (metadata snapshot request) |\n           |<----------------------------------------------------|\n
      \          |                                        (10) 200 OK  |\n           |---------------------------------------------------->|\n
      \          |      (11) INVITE (metadata snapshot 2 + SDP offer)  |\n           |---------------------------------------------------->|\n
      \          |                            (12) 200 OK (SDP answer) |\n           |<----------------------------------------------------|\n
      \          | (13) UPDATE (metadata update 1 based on snapshot 2) |\n           |---------------------------------------------------->|\n
      \          |                                         (14) 200 OK |\n           |<----------------------------------------------------|\n
      \              Figure 3: Delivering Metadata via SIP UPDATE\n"
    title: 5.2.  Delivering Recording Metadata
  - contents:
    - "5.3.  Receiving Recording Indications and Providing Recording\n      Preferences\n
      \  The SRC is responsible for providing recording indications to the\n   participants
      in the CS.  A recording-aware UA supports receiving\n   recording indications
      via the SDP \"a=record\" attribute, and it can\n   specify a recording preference
      in the CS by including the SDP\n   \"a=recordpref\" attribute.  The recording
      attribute is a declaration\n   by the SRC in the CS to indicate whether recording
      is taking place.\n   The recording preference attribute is a declaration by
      the recording-\n   aware UA in the CS to indicate its recording preference.
      \ A UA that\n   does not want to be recorded may still be notified that recording
      is\n   occurring, for a number of reasons (e.g., it was not capable of\n   indicating
      its preference, its preference was ignored).  If this\n   occurs, the UA's only
      mechanism to avoid being recorded is to\n   terminate its participation in the
      session.\n   To illustrate how the attributes are used, if UA A is initiating
      a\n   call to UA B and UA A is also an SRC that is performing the\n   recording,
      then UA A provides the recording indication in the SDP\n   offer with a=record:on.
      \ Since UA A is the SRC, UA A receives the\n   recording indication from the
      SRC directly.  When UA B receives the\n   SDP offer, UA B will see that recording
      is happening on the other\n   endpoint of this session.  Since UA B is not an
      SRC and does not\n   provide any recording preference, the SDP answer does not
      contain\n   a=record or a=recordpref.\n        UA A                                                   UA
      B\n        (SRC)                                                   |\n          |
      \                                                    |\n          |                [SRC
      recording starts]               |\n          |(1) INVITE (SDP offer + a=record:on)
      \                |\n          |---------------------------------------------------->|\n
      \         |                             (2) 200 OK (SDP answer) |\n          |<----------------------------------------------------|\n
      \         |(3) ACK                                              |\n          |---------------------------------------------------->|\n
      \         |(4) RTP                                              |\n          |<===================================================>|\n
      \         |                                                     |\n          |
      \  [UA B wants to set preference to no recording]    |\n          |           (5)
      INVITE (SDP offer + a=recordpref:off) |\n          |<----------------------------------------------------|\n
      \         |   [SRC honors the preference and stops recording]   |\n          |(6)
      200 OK (SDP answer + a=record:off)               |\n          |---------------------------------------------------->|\n
      \         |                                             (7) ACK |\n          |<----------------------------------------------------|\n
      \         Figure 4: Recording Indication and Recording Preference\n   After
      the call is established and recording is in progress, UA B\n   later decides
      to change the recording preference to no recording and\n   sends a re-INVITE
      with the \"a=recordpref\" attribute.  It is up to the\n   SRC to honor the preference,
      and in this case the SRC decides to stop\n   the recording and updates the recording
      indication in the SDP answer.\n   Note that UA B could have explicitly indicated
      a recording preference\n   in (2), the 200 OK for the original INVITE.  Indicating
      a preference\n   of no recording in an initial INVITE or an initial response
      to an\n   INVITE may reduce the chance of a user being recorded in the\n   first
      place.\n"
    title: 5.3.  Receiving Recording Indications and Providing Recording
  title: 5.  Overview of Operations
- contents:
  - '6.  SIP Handling

    '
  - contents:
    - '6.1.  Procedures at the SRC

      '
    - contents:
      - "6.1.1.  Initiating a Recording Session\n   An RS is a SIP session with specific
        extensions applied, and these\n   extensions are listed in the procedures
        below for the SRC and the\n   SRS.  When an SRC or an SRS receives a SIP session
        that is not an RS,\n   it is up to the SRC or the SRS to determine what to
        do with the SIP\n   session.\n   The SRC can initiate an RS by sending a SIP
        INVITE request to the\n   SRS.  The SRC and the SRS are identified in the
        From and To headers,\n   respectively.\n   The SRC MUST include the \"+sip.src\"
        feature tag in the Contact URI,\n   defined in this specification as an extension
        to [RFC3840], for all\n   RSs.  An SRS uses the presence of the \"+sip.src\"
        feature tag in\n   dialog creating and modifying requests and responses to
        confirm that\n   the dialog being created is for the purpose of an RS.  In
        addition,\n   when an SRC sends a REGISTER request to a registrar, the SRC
        MAY\n   include the \"+sip.src\" feature tag to indicate that it is an SRC.\n
        \  Since SIP Caller Preferences extensions are optional to implement for\n
        \  routing proxies, there is no guarantee that an RS will be routed to\n   an
        SRC or SRS.  A new option tag, \"siprec\", is introduced.  As per\n   [RFC3261],
        only an SRC or an SRS can accept this option tag in an RS.\n   An SRC MUST
        include the \"siprec\" option tag in the Require header\n   when initiating
        an RS so that UAs that do not support the Session\n   Recording Protocol extensions
        will simply reject the INVITE request\n   with a 420 (Bad Extension) response.\n
        \  When an SRC receives a new INVITE, the SRC MUST only consider the SIP\n
        \  session as an RS when both the \"+sip.srs\" feature tag and the\n   \"siprec\"
        option tag are included in the INVITE request.\n"
      title: 6.1.1.  Initiating a Recording Session
    - contents:
      - "6.1.2.  SIP Extensions for Recording Indications and Preferences\n   For
        the CS, the SRC MUST provide recording indications to all\n   participants
        in the CS.  A participant UA in a CS can indicate that\n   it is recording
        aware by providing the \"record-aware\" option tag, and\n   the SRC MUST provide
        recording indications in the new SDP \"a=record\"\n   attribute described
        in Section 7 below.  In the absence of the\n   \"record-aware\" option tag
        -- meaning that the participant UA is not\n   recording aware -- an SRC MUST
        provide recording indications through\n   other means, such as playing a tone
        in-band or having a signed\n   participant contract in place.\n   An SRC in
        the CS may also indicate itself as a session recording\n   client by including
        the \"+sip.src\" feature tag.  A recording-aware\n   participant can learn
        that an SRC is in the CS and can set the\n   recording preference for the
        CS with the new SDP \"a=recordpref\"\n   attribute described in Section 7.\n"
      title: 6.1.2.  SIP Extensions for Recording Indications and Preferences
    title: 6.1.  Procedures at the SRC
  - contents:
    - "6.2.  Procedures at the SRS\n   When an SRS receives a new INVITE, the SRS
      MUST only consider the SIP\n   session as an RS when both the \"+sip.src\" feature
      tag and the\n   \"siprec\" option tag are included in the INVITE request.\n
      \  The SRS can initiate an RS by sending a SIP INVITE request to the\n   SRC.
      \ The SRS and the SRC are identified in the From and To headers,\n   respectively.\n
      \  The SRS MUST include the \"+sip.srs\" feature tag in the Contact URI,\n   as
      per [RFC3840], for all RSs.  An SRC uses the presence of this\n   feature tag
      in dialog creation and modification requests and\n   responses to confirm that
      the dialog being created is for the purpose\n   of an RS (REQ-030 in [RFC6341]).
      \ In addition, when an SRS sends a\n   REGISTER request to a registrar, the
      SRS SHOULD include the\n   \"+sip.srs\" feature tag to indicate that it is an
      SRS.\n   An SRS MUST include the \"siprec\" option tag in the Require header
      as\n   per [RFC3261] when initiating an RS so that UAs that do not support\n
      \  the Session Recording Protocol extensions will simply reject the\n   INVITE
      request with a 420 (Bad Extension) response.\n"
    title: 6.2.  Procedures at the SRS
  - contents:
    - "6.3.  Procedures for Recording-Aware User Agents\n   A recording-aware UA is
      a participant in the CS that supports the SIP\n   and SDP extensions for receiving
      recording indications and for\n   requesting recording preferences for the call.
      \ A recording-aware UA\n   MUST indicate that it can accept the reporting of
      recording\n   indications provided by the SRC with a new \"record-aware\" option
      tag\n   when initiating or establishing a CS; this means including the\n   \"record-aware\"
      option tag in the Supported header in the initial\n   INVITE request or response.\n
      \  A recording-aware UA MUST provide a recording indication to the end\n   user
      through an appropriate user interface, indicating whether\n   recording is on,
      off, or paused for each medium.  Appropriate user\n   interfaces may include
      real-time notification or previously\n   established agreements that use of
      the device is subject to\n   recording.  Some UAs that are automatons (e.g.,
      Interactive Voice\n   Response (IVR), media server, Public Switched Telephone
      Network\n   (PSTN) gateway) may not have a user interface to render a recording\n
      \  indication.  When such a UA indicates recording awareness, the UA\n   SHOULD
      render the recording indication through other means, such as\n   passing an
      in-band tone on the PSTN gateway, putting the recording\n   indication in a
      log file, or raising an application event in a\n   VoiceXML dialog.  These UAs
      MAY also choose not to indicate recording\n   awareness, thereby relying on
      whatever mechanism an SRC chooses to\n   indicate recording, such as playing
      a tone in-band.\n"
    title: 6.3.  Procedures for Recording-Aware User Agents
  title: 6.  SIP Handling
- contents:
  - '7.  SDP Handling

    '
  - contents:
    - "7.1.  Procedures at the SRC\n   The SRC and SRS follow the SDP offer/answer
      model described in\n   [RFC3264].  The procedures for the SRC and SRS describe
      the\n   conventions used in an RS.\n"
    - contents:
      - "7.1.1.  SDP Handling in the RS\n   Since the SRC does not expect to receive
        media from the SRS, the SRC\n   typically sets each media stream of the SDP
        offer to only send media,\n   by qualifying them with the \"a=sendonly\" attribute,
        according to the\n   procedures in [RFC3264].\n   The SRC sends recorded streams
        of participants to the SRS, and the\n   SRC MUST provide a \"label\" attribute
        (\"a=label\"), as per [RFC4574],\n   on each media stream in order to identify
        the recorded stream with\n   the rest of the metadata.  The \"a=label\" attribute
        identifies each\n   recorded media stream, and the label name is mapped to
        the Media\n   Stream Reference in the metadata as per [RFC7865].  The scope
        of the\n   \"a=label\" attribute only applies to the SDP and metadata conveyed
        in\n   the bodies of the SIP request or response that the label appeared in.\n
        \  Note that a recorded stream is distinct from a CS stream; the\n   metadata
        provides a list of participants that contribute to each\n   recorded stream.\n
        \  Figure 5 shows an example SDP offer from an SRC with both audio and\n   video
        recorded streams.  Note that this example contains unfolded\n   lines longer
        than 72 characters; these lines are captured between\n   <allOneLine> tags.\n
        \      v=0\n       o=SRC 2890844526 2890844526 IN IP4 198.51.100.1\n       s=-\n
        \      c=IN IP4 198.51.100.1\n       t=0 0\n       m=audio 12240 RTP/AVP 0
        4 8\n       a=sendonly\n       a=label:1\n       m=video 22456 RTP/AVP 98\n
        \      a=rtpmap:98 H264/90000\n       <allOneLine>\n       a=fmtp:98 profile-level-id=42A01E;\n
        \                sprop-parameter-sets=Z0IACpZTBYmI,aMljiA==\n       </allOneLine>\n
        \      a=sendonly\n       a=label:2\n       m=audio 12242 RTP/AVP 0 4 8\n
        \      a=sendonly\n       a=label:3\n       m=video 22458 RTP/AVP 98\n       a=rtpmap:98
        H264/90000\n       <allOneLine>\n       a=fmtp:98 profile-level-id=42A01E;\n
        \                sprop-parameter-sets=Z0IACpZTBYmI,aMljiA==\n       </allOneLine>\n
        \      a=sendonly\n       a=label:4\n     Figure 5: Sample SDP Offer from
        SRC with Audio and Video Streams\n"
      - contents:
        - "7.1.1.1.  Handling Media Stream Updates\n   Over the lifetime of an RS,
          the SRC can add and remove recorded\n   streams to and from the RS for various
          reasons -- for example, when a\n   CS stream is added to or removed from
          the CS, or when a CS is created\n   or terminated if an RS handles multiple
          CSs.  To remove a recorded\n   stream from the RS, the SRC sends a new SDP
          offer where the port of\n   the media stream to be removed is set to zero,
          according to the\n   procedures in [RFC3264].  To add a recorded stream
          to the RS, the SRC\n   sends a new SDP offer by adding a new media stream
          description or by\n   reusing an old media stream that had been previously
          disabled,\n   according to the procedures in [RFC3264].\n   The SRC can
          temporarily discontinue streaming and collection of\n   recorded media from
          the SRC to the SRS for reasons such as masking\n   the recording.  In this
          case, the SRC sends a new SDP offer and sets\n   the media stream to inactive
          (a=inactive) for each recorded stream to\n   be paused, as per the procedures
          in [RFC3264].  To resume streaming\n   and collection of recorded media,
          the SRC sends a new SDP offer and\n   sets the media stream to sendonly
          (a=sendonly).  Note that a CS may\n   itself change the media stream direction
          by updating the SDP -- for\n   example, by setting a=inactive for SDP hold.
          \ Media stream direction\n   changes in the CS are conveyed in the metadata
          by the SRC.  When a CS\n   media stream is changed to or from inactive,
          the effect on the\n   corresponding RS media stream is governed by SRC policy.
          \ The SRC MAY\n   have a local policy to pause an RS media stream when the\n
          \  corresponding CS media stream is inactive, or it MAY leave the RS\n   media
          stream as sendonly.\n"
        title: 7.1.1.1.  Handling Media Stream Updates
      title: 7.1.1.  SDP Handling in the RS
    - contents:
      - "7.1.2.  Recording Indication in the CS\n   While there are existing mechanisms
        for providing an indication that\n   a CS is being recorded, these mechanisms
        are usually delivered on the\n   CS media streams, such as playing an in-band
        tone or an announcement\n   to the participants.  A new \"record\" SDP attribute
        is introduced to\n   allow the SRC to indicate recording state to a recording-aware
        UA in\n   a CS.\n   The \"record\" SDP attribute appears at the media level
        or\n   session level in either an SDP offer or answer.  When the attribute\n
        \  is applied at the session level, the indication applies to all media\n
        \  streams in the SDP.  When the attribute is applied at the\n   media level,
        the indication applies to that one media stream only,\n   and that overrides
        the indication if also set at the session level.\n   Whenever the recording
        indication needs to change, such as\n   termination of recording, the SRC
        MUST initiate a re-INVITE or UPDATE\n   to update the SDP \"a=record\" attribute.\n
        \  The following is the ABNF [RFC5234] of the \"record\" attribute:\n       attribute
        =/ record-attr\n       ; attribute defined in RFC 4566\n       record-attr
        = \"record:\" indication\n       indication = \"on\" / \"off\" / \"paused\"\n
        \  on:      Recording is in progress.\n   off:     No recording is in progress.\n
        \  paused:  Recording is in progress but media is paused.\n"
      title: 7.1.2.  Recording Indication in the CS
    - contents:
      - "7.1.3.  Recording Preference in the CS\n   When the SRC receives the \"a=recordpref\"
        SDP in an SDP offer or\n   answer, the SRC chooses to honor the preference
        to record based on\n   local policy at the SRC.  If the SRC makes a change
        in recording\n   state, the SRC MUST report the new recording state in the
        \"a=record\"\n   attribute in the SDP answer or in a subsequent SDP offer.\n"
      title: 7.1.3.  Recording Preference in the CS
    title: 7.1.  Procedures at the SRC
  - contents:
    - "7.2.  Procedures at the SRS\n   Typically, the SRS only receives RTP streams
      from the SRC; therefore,\n   the SDP offer/answer from the SRS normally sets
      each media stream to\n   receive media, by setting them with the \"a=recvonly\"
      attribute,\n   according to the procedures of [RFC3264].  When the SRS is not
      ready\n   to receive a recorded stream, the SRS sets the media stream as\n   inactive
      in the SDP offer or answer by setting it with an\n   \"a=inactive\" attribute,
      according to the procedures of [RFC3264].\n   When the SRS is ready to receive
      recorded streams, the SRS sends a\n   new SDP offer and sets the media streams
      with an \"a=recvonly\"\n   attribute.\n   Figure 6 shows an example of an SDP
      answer from the SRS for the SDP\n   offer from Figure 5.  Note that this example
      contains unfolded lines\n   longer than 72 characters; these lines are captured
      between\n   <allOneLine> tags.\n       v=0\n       o=SRS 0 0 IN IP4 198.51.100.20\n
      \      s=-\n       c=IN IP4 198.51.100.20\n       t=0 0\n       m=audio 10000
      RTP/AVP 0\n       a=recvonly\n       a=label:1\n       m=video 10002 RTP/AVP
      98\n       a=rtpmap:98 H264/90000\n       <allOneLine>\n       a=fmtp:98 profile-level-id=42A01E;\n
      \                sprop-parameter-sets=Z0IACpZTBYmI,aMljiA==\n       </allOneLine>\n
      \      a=recvonly\n       a=label:2\n       m=audio 10004 RTP/AVP 0\n       a=recvonly\n
      \      a=label:3\n       m=video 10006 RTP/AVP 98\n       a=rtpmap:98 H264/90000\n
      \      <allOneLine>\n       a=fmtp:98 profile-level-id=42A01E;\n                 sprop-parameter-sets=Z0IACpZTBYmI,aMljiA==\n
      \      </allOneLine>\n       a=recvonly\n       a=label:4\n     Figure 6: Sample
      SDP Answer from SRS with Audio and Video Streams\n   Over the lifetime of an
      RS, the SRS can remove recorded streams from\n   the RS for various reasons.
      \ To remove a recorded stream from the RS,\n   the SRS sends a new SDP offer
      where the port of the media stream to\n   be removed is set to zero, according
      to the procedures in [RFC3264].\n   The SRS MUST NOT add recorded streams in
      the RS when the SRS sends a\n   new SDP offer.  Similarly, when the SRS starts
      an RS, the SRS MUST\n   initiate the INVITE without an SDP offer to let the
      SRC generate the\n   SDP offer with the streams to be recorded.\n   The sequence
      diagram in Figure 7 shows an example where the SRS is\n   initially not ready
      to receive recorded streams and later updates the\n   RS when the SRS is ready
      to record.\n     SRC                                                   SRS\n
      \     |                                                     |\n      |(1) INVITE
      (SDP offer)                               |\n      |---------------------------------------------------->|\n
      \     |                                           [not ready to record]\n      |
      \                       (2) 200 OK with SDP inactive |\n      |<----------------------------------------------------|\n
      \     |(3) ACK                                              |\n      |---------------------------------------------------->|\n
      \     |                      ...                            |\n      |                                             [ready
      to record]\n      |                     (4) re-INVITE with SDP recvonly |\n
      \     |<----------------------------------------------------|\n      |(5) 200
      OK with SDP sendonly                         |\n      |---------------------------------------------------->|\n
      \     |                                             (6) ACK |\n      |<----------------------------------------------------|\n
      \     |(7) RTP                                              |\n      |====================================================>|\n
      \     |                      ...                            |\n      |(8) BYE
      \                                             |\n      |---------------------------------------------------->|\n
      \     |                                             (9) OK  |\n      |<----------------------------------------------------|\n
      \            Figure 7: SRS Responding to Offer with a=inactive\n"
    title: 7.2.  Procedures at the SRS
  - contents:
    - '7.3.  Procedures for Recording-Aware User Agents

      '
    - contents:
      - "7.3.1.  Recording Indication\n   When a recording-aware UA receives an SDP
        offer or answer that\n   includes the \"a=record\" attribute, the UA provides
        to the end user an\n   indication as to whether the recording is on, off,
        or paused for each\n   medium, based on the most recently received \"a=record\"
        SDP attribute\n   for that medium.\n   When a CS is traversed through multiple
        UAs such as a B2BUA or a\n   conference focus, each UA involved in the CS
        that is aware that the\n   CS is being recorded MUST provide the recording
        indication through\n   the \"a=record\" attribute to all other parties in
        the CS.\n   It is possible that more than one SRC is in the call path of the
        same\n   CS, but the recording indication attribute does not provide any hint\n
        \  as to which SRC or how many SRCs are recording.  An endpoint knows\n   only
        that the call is being recorded.  Furthermore, this attribute is\n   not used
        as a request for a specific SRC to start or stop recording.\n"
      title: 7.3.1.  Recording Indication
    - contents:
      - "7.3.2.  Recording Preference\n   A participant in a CS MAY set the recording
        preference in the CS to\n   be recorded or not recorded at session establishment
        or during the\n   session.  A new \"recordpref\" SDP attribute is introduced,
        and the\n   participant in the CS may set this recording preference attribute
        in\n   any SDP offer/answer at session establishment time or during the\n
        \  session.  The SRC is not required to honor the recording preference\n   from
        a participant, based on local policies at the SRC, and the\n   participant
        can learn the recording indication through the \"a=record\"\n   SDP attribute
        as described in Section 7.3.1.\n   The SDP \"a=recordpref\" attribute can
        appear at the media level or\n   session level and can appear in an SDP offer
        or answer.  When the\n   attribute is applied at the session level, the recording
        preference\n   applies to all media streams in the SDP.  When the attribute
        is\n   applied at the media level, the recording preference applies to that\n
        \  one media stream only, and that overrides the recording preference if\n
        \  also set at the session level.  The UA can change the recording\n   preference
        by changing the \"a=recordpref\" attribute in a subsequent\n   SDP offer or
        answer.  The absence of the \"a=recordpref\" attribute in\n   the SDP indicates
        that the UA has no recording preference.\n   The following is the ABNF of
        the \"recordpref\" attribute:\n       attribute =/ recordpref-attr\n       ;
        attribute defined in RFC 4566\n       recordpref-attr = \"a=recordpref:\"
        pref\n       pref = \"on\" / \"off\" / \"pause\" / \"nopreference\"\n   on:
        \    Sets the preference to record if it has not already been\n           started.
        \ If the recording is currently paused, the\n           preference is to resume
        recording.\n   off:    Sets the preference for no recording.  If recording
        has\n           already been started, then the preference is to stop the\n
        \          recording.\n   pause:  If the recording is currently in progress,
        sets the\n           preference to pause the recording.\n   nopreference:\n
        \          Indicates that the UA has no preference regarding recording.\n"
      title: 7.3.2.  Recording Preference
    title: 7.3.  Procedures for Recording-Aware User Agents
  title: 7.  SDP Handling
- contents:
  - "8.  RTP Handling\n   This section provides recommendations and guidelines for
    RTP and the\n   Real-time Transport Control Protocol (RTCP) in the context of
    SIPREC\n   [RFC6341].  In order to communicate most effectively, the SRC, the\n
    \  SRS, and any recording-aware UAs should utilize the mechanisms\n   provided
    by RTP in a well-defined and predictable manner.  It is the\n   goal of this document
    to make the reader aware of these mechanisms\n   and to provide recommendations
    and guidelines.\n"
  - contents:
    - "8.1.  RTP Mechanisms\n   This section briefly describes important RTP/RTCP
      constructs and\n   mechanisms that are particularly useful within the context
      of SIPREC.\n"
    - contents:
      - "8.1.1.  RTCP\n   The RTP data transport is augmented by a control protocol
        (RTCP) to\n   allow monitoring of the data delivery.  RTCP, as defined in\n
        \  [RFC3550], is based on the periodic transmission of control packets\n   to
        all participants in the RTP session, using the same distribution\n   mechanism
        as the data packets.  Support for RTCP is REQUIRED, per\n   [RFC3550], and
        it provides, among other things, the following\n   important functionality
        in relation to SIPREC:\n   1) Feedback on the quality of the data distribution\n
        \     This feedback from the receivers may be used to diagnose faults in\n
        \     the distribution.  As such, RTCP is a well-defined and efficient\n      mechanism
        for the SRS to inform the SRC, and for the SRC to inform\n      recording-aware
        UAs, of issues that arise with respect to the\n      reception of media that
        is to be recorded.\n   2) Including a persistent transport-level identifier
        -- the CNAME, or\n      canonical name -- for an RTP source\n      The synchronization
        source (SSRC) [RFC3550] identifier may change\n      if a conflict is discovered
        or a program is restarted, in which\n      case receivers can use the CNAME
        to keep track of each\n      participant.  Receivers may also use the CNAME
        to associate\n      multiple data streams from a given participant in a set
        of related\n      RTP sessions -- for example, to synchronize audio and video.\n
        \     Synchronization of media streams is also facilitated by the NTP\n      and
        RTP timestamps included in RTCP packets by data senders.\n"
      title: 8.1.1.  RTCP
    - contents:
      - "8.1.2.  RTP Profile\n   The RECOMMENDED RTP profiles for the SRC, SRS, and
        recording-aware\n   UAs are \"Extended Secure RTP Profile for Real-time Transport
        Control\n   Protocol (RTCP)-Based Feedback (RTP/SAVPF)\" [RFC5124] when using\n
        \  encrypted RTP streams, and \"Extended RTP Profile for Real-time\n   Transport
        Control Protocol (RTCP)-Based Feedback (RTP/AVPF)\"\n   [RFC4585] when using
        non-encrypted media streams.  However, as these\n   are not requirements,
        some implementations may use \"The Secure\n   Real-time Transport Protocol
        (SRTP)\" [RFC3711] and \"RTP Profile for\n   Audio and Video Conferences with
        Minimal Control\" [RFC3551].\n   Therefore, it is RECOMMENDED that the SRC,
        SRS, and recording-aware\n   UAs not rely entirely on RTP/SAVPF or RTP/AVPF
        for core functionality\n   that may be at least partially achievable using
        RTP/SAVP and RTP/AVP.\n   AVPF and SAVPF provide an improved RTCP timer model
        that allows more\n   flexible transmission of RTCP packets in response to
        events, rather\n   than strictly according to bandwidth.  AVPF-based codec
        control\n   messages provide efficient mechanisms for an SRC, an SRS, and\n
        \  recording-aware UAs to handle events such as scene changes, error\n   recovery,
        and dynamic bandwidth adjustments.  These messages are\n   discussed in more
        detail later in this document.\n   SAVP and SAVPF provide media encryption,
        integrity protection, replay\n   protection, and a limited form of source
        authentication.  They do not\n   contain or require a specific keying mechanism.\n"
      title: 8.1.2.  RTP Profile
    - contents:
      - "8.1.3.  SSRC\n   The SSRC, as defined in [RFC3550], is carried in the RTP
        header and\n   in various fields of RTCP packets.  It is a random 32-bit number
        that\n   is required to be globally unique within an RTP session.  It is\n
        \  crucial that the number be chosen with care, in order that\n   participants
        on the same network or starting at the same time are not\n   likely to choose
        the same number.  Guidelines regarding SSRC value\n   selection and conflict
        resolution are provided in [RFC3550].\n   The SSRC may also be used to separate
        different sources of media\n   within a single RTP session.  For this reason,
        as well as for\n   conflict resolution, it is important that the SRC, SRS,
        and\n   recording-aware UAs handle changes in SSRC values and properly\n   identify
        the reason for the change.  The CNAME values carried in RTCP\n   facilitate
        this identification.\n"
      title: 8.1.3.  SSRC
    - contents:
      - "8.1.4.  CSRC\n   The contributing source (CSRC), as defined in [RFC3550],
        identifies\n   the source of a stream of RTP packets that has contributed
        to the\n   combined stream produced by an RTP mixer.  The mixer inserts a
        list\n   of the SSRC identifiers of the sources that contributed to the\n
        \  generation of a particular packet into the RTP header of that packet.\n
        \  This list is called the CSRC list.  It is RECOMMENDED that an SRC or\n
        \  recording-aware UA, when acting as a mixer, set the CSRC list\n   accordingly,
        and that the SRC and SRS interpret the CSRC list per\n   [RFC3550] when received.\n"
      title: 8.1.4.  CSRC
    - contents:
      - "8.1.5.  SDES\n   The Source Description (SDES), as defined in [RFC3550],
        contains an\n   SSRC/CSRC identifier followed by a list of zero or more items
        that\n   carry information about the SSRC/CSRC.  End systems send one SDES\n
        \  packet containing their own source identifier (the same as the SSRC\n   in
        the fixed RTP header).  A mixer sends one SDES packet containing a\n   chunk
        for each CSRC from which it is receiving SDES information, or\n   multiple
        complete SDES packets if there are more than 31 such\n   sources.\n   The
        ability to identify individual CSRCs is important in the context\n   of SIPREC.
        \ Metadata [RFC7865] provides a mechanism to achieve this\n   at the signaling
        level.  SDES provides a mechanism at the RTP level.\n"
      - contents:
        - "8.1.5.1.  CNAME\n   The Canonical End-Point Identifier (CNAME), as defined
          in [RFC3550],\n   provides the binding from the SSRC identifier to an identifier
          for\n   the source (sender or receiver) that remains constant.  It is\n
          \  important that the SRC and recording-aware UAs generate CNAMEs\n   appropriately
          and that the SRC and SRS interpret and use them for\n   this purpose.  Guidelines
          for generating CNAME values are provided in\n   \"Guidelines for Choosing
          RTP Control Protocol (RTCP) Canonical Names\n   (CNAMEs)\" [RFC7022].\n"
        title: 8.1.5.1.  CNAME
      title: 8.1.5.  SDES
    - contents:
      - "8.1.6.  Keepalive\n   It is anticipated that media streams in SIPREC may
        exist in an\n   inactive state for extended periods of time for any of a number
        of\n   valid reasons.  In order for the bindings and any pinholes in\n   NATs/firewalls
        to remain active during such intervals, it is\n   RECOMMENDED that the SRC,
        SRS, and recording-aware UAs follow the\n   keepalive procedure recommended
        in \"Application Mechanism for Keeping\n   Alive the NAT Mappings Associated
        with RTP / RTP Control Protocol\n   (RTCP) Flows\" [RFC6263] for all RTP media
        streams.\n"
      title: 8.1.6.  Keepalive
    - contents:
      - "8.1.7.  RTCP Feedback Messages\n   \"Codec Control Messages in the RTP Audio-Visual
        Profile with Feedback\n   (AVPF)\" [RFC5104] specifies extensions to the messages
        defined in\n   AVPF [RFC4585].  Support for and proper usage of these messages
        are\n   important to SRC, SRS, and recording-aware UA implementations.  Note\n
        \  that these messages are applicable only when using the AVPF or SAVPF\n
        \  RTP profiles.\n"
      - contents:
        - "8.1.7.1.  Full Intra Request\n   A Full Intra Request (FIR) command, when
          received by the designated\n   media sender, requires that the media sender
          send a decoder refresh\n   point at the earliest opportunity.  Using a decoder
          refresh point\n   implies refraining from using any picture sent prior to
          that point as\n   a reference for the encoding process of any subsequent
          picture sent\n   in the stream.\n   Decoder refresh points, especially Intra
          or Instantaneous Decoding\n   Refresh (IDR) pictures for H.264 video codecs,
          are in general several\n   times larger in size than predicted pictures.
          \ Thus, in scenarios in\n   which the available bit rate is small, the use
          of a decoder refresh\n   point implies a delay that is significantly longer
          than the typical\n   picture duration.\n"
        - contents:
          - "8.1.7.1.1.  Deprecated Usage of SIP INFO Instead of FIR\n   \"XML Schema
            for Media Control\" [RFC5168] defines an Extensible Markup\n   Language
            (XML) Schema for video fast update.  Implementations are\n   discouraged
            from using the method described in [RFC5168], except for\n   purposes
            of backward compatibility.  Implementations SHOULD use FIR\n   messages
            instead.\n   To make sure that a common mechanism exists between the SRC
            and SRS,\n   the SRS MUST support both mechanisms (FIR and SIP INFO),
            using FIR\n   messages when negotiated successfully with the SRC and using
            SIP INFO\n   otherwise.\n"
          title: 8.1.7.1.1.  Deprecated Usage of SIP INFO Instead of FIR
        title: 8.1.7.1.  Full Intra Request
      - contents:
        - "8.1.7.2.  Picture Loss Indication\n   Picture Loss Indication (PLI), as
          defined in [RFC4585], informs the\n   encoder of the loss of an undefined
          amount of coded video data\n   belonging to one or more pictures.  [RFC4585]
          recommends using PLI\n   instead of FIR messages to recover from errors.
          \ FIR is appropriate\n   only in situations where not sending a decoder
          refresh point would\n   render the video unusable for the users.  Examples
          where sending FIR\n   messages is appropriate include a multipoint conference
          when a new\n   user joins the conference and no regular decoder refresh
          point\n   interval is established, and a video-switching Multipoint Control\n
          \  Unit (MCU) that changes streams.\n   Appropriate use of PLI and FIR is
          important to ensure, with minimum\n   overhead, that the recorded video
          is usable (e.g., the necessary\n   reference frames exist for a player to
          render the recorded video).\n"
        title: 8.1.7.2.  Picture Loss Indication
      - contents:
        - "8.1.7.3.  Temporary Maximum Media Stream Bit Rate Request\n   A receiver,
          translator, or mixer uses the Temporary Maximum Media\n   Stream Bit Rate
          Request (TMMBR) [RFC5104] to request a sender to\n   limit the maximum bit
          rate for a media stream to the provided value.\n   Appropriate use of TMMBR
          facilitates rapid adaptation to changes in\n   available bandwidth.\n"
        - contents:
          - "8.1.7.3.1.  Renegotiation of SDP Bandwidth Attribute\n   If it is likely
            that the new value indicated by TMMBR will be valid\n   for the remainder
            of the session, the TMMBR sender is expected to\n   perform a renegotiation
            of the session upper limit using the session\n   signaling protocol.  Therefore,
            for SIPREC, implementations are\n   RECOMMENDED to use TMMBR for temporary
            changes and renegotiation of\n   bandwidth via SDP offer/answer for more
            permanent changes.\n"
          title: 8.1.7.3.1.  Renegotiation of SDP Bandwidth Attribute
        title: 8.1.7.3.  Temporary Maximum Media Stream Bit Rate Request
      title: 8.1.7.  RTCP Feedback Messages
    - contents:
      - "8.1.8.  Symmetric RTP/RTCP for Sending and Receiving\n   Within an SDP offer/answer
        exchange, RTP entities choose the RTP and\n   RTCP transport addresses (i.e.,
        IP addresses and port numbers) on\n   which to receive packets.  When sending
        packets, the RTP entities may\n   use the same source port or a different
        source port than those\n   signaled for receiving packets.  When the transport
        address used to\n   send and receive RTP is the same, it is termed \"symmetric
        RTP\"\n   [RFC4961].  Likewise, when the transport address used to send and\n
        \  receive RTCP is the same, it is termed \"symmetric RTCP\" [RFC4961].\n
        \  When sending RTP, the use of symmetric RTP is REQUIRED.  When sending\n
        \  RTCP, the use of symmetric RTCP is REQUIRED.  Although an SRS will\n   not
        normally send RTP, it will send RTCP as well as receive RTP and\n   RTCP.
        \ Likewise, although an SRC will not normally receive RTP from\n   the SRS,
        it will receive RTCP as well as send RTP and RTCP.\n      Note: Symmetric
        RTP and symmetric RTCP are different from RTP/RTCP\n      multiplexing [RFC5761].\n"
      title: 8.1.8.  Symmetric RTP/RTCP for Sending and Receiving
    title: 8.1.  RTP Mechanisms
  - contents:
    - "8.2.  Roles\n   An SRC has the task of gathering media from the various UAs
      in one or\n   more CSs and forwarding the information to the SRS within the
      context\n   of a corresponding RS.  There are numerous ways in which an SRC
      may\n   do this, including, but not limited to, appearing as a UA within a\n
      \  CS, or as a B2BUA between UAs within a CS.\n                    (Recording
      Session)   +---------+\n                  +------------SIP------->|         |\n
      \                 |  +------RTP/RTCP----->|   SRS   |\n                  |  |
      \   +-- Metadata -->|         |\n                  |  |    |               +---------+\n
      \                 v  v    |\n                 +---------+\n                 |
      \  SRC   |\n                 |---------| (Communication Session) +---------+\n
      \                |         |<----------SIP---------->|         |\n                 |
      \ UA-A   |                         |  UA-B   |\n                 |         |<-------RTP/RTCP-------->|
      \        |\n                 +---------+                         +---------+\n
      \                           Figure 8: UA as SRC\n                                   (Recording
      Session)   +---------+\n                                 +------------SIP------->|
      \        |\n                                 |  +------RTP/RTCP----->|   SRS
      \  |\n                                 |  |    +-- Metadata -->|         |\n
      \                                |  |    |               +---------+\n                                 v
      \ v    |\n                                +---------+\n                                |
      \  SRC   |\n       +---------+              |---------|              +---------+\n
      \      |         |<----SIP----->|         |<----SIP----->|         |\n       |
      \ UA-A   |              |  B2BUA  |              |  UA-B   |\n       |         |<--RTP/RTCP-->|
      \        |<--RTP/RTCP-->|         |\n       +---------+              +---------+
      \             +---------+\n             |_______________________________________________|\n
      \                         (Communication Session)\n                          Figure
      9: B2BUA as SRC\n   The following subsections define a set of roles an SRC may
      choose to\n   play, based on its position with respect to a UA within a CS,
      and an\n   SRS within an RS.  A CS and a corresponding RS are independent\n
      \  sessions; therefore, an SRC may play a different role within a CS\n   than
      it does within the corresponding RS.\n"
    - contents:
      - "8.2.1.  SRC Acting as an RTP Translator\n   The SRC may act as a translator,
        as defined in [RFC3550].  A defining\n   characteristic of a translator is
        that it forwards RTP packets with\n   their SSRC identifier intact.  There
        are two types of translators:\n   one that simply forwards, and another that
        performs transcoding\n   (e.g., from one codec to another) in addition to
        forwarding.\n"
      - contents:
        - "8.2.1.1.  Forwarding Translator\n   When acting as a forwarding translator,
          RTP received as separate\n   streams from different sources (e.g., from
          different UAs with\n   different SSRCs) cannot be mixed by the SRC and MUST
          be sent\n   separately to the SRS.  All RTCP reports MUST be passed by the
          SRC\n   between the UAs and the SRS, such that the UAs and SRS are able
          to\n   detect any SSRC collisions.\n   RTCP Sender Reports generated by
          a UA sending a stream MUST be\n   forwarded to the SRS.  RTCP Receiver Reports
          generated by the SRS\n   MUST be forwarded to the relevant UA.\n   UAs may
          receive multiple sets of RTCP Receiver Reports -- one or more\n   from other
          UAs participating in the CS, and one from the SRS\n   participating in the
          RS.  A UA SHOULD process the RTCP Receiver\n   Reports from the SRS if it
          is recording aware.\n   If SRTP is used on both the CS and the RS, decryption
          and/or\n   re-encryption may occur.  For example, if different keys are
          used, it\n   will occur.  If the same keys are used, it need not occur.\n
          \  Section 12 provides additional information on SRTP and keying\n   mechanisms.\n
          \  If packet loss occurs, either from the UA to the SRC or from the SRC\n
          \  to the SRS, the SRS SHOULD detect and attempt to recover from the\n   loss.
          \ The SRC does not play a role in this, other than forwarding\n   the associated
          RTP and RTCP packets.\n"
        title: 8.2.1.1.  Forwarding Translator
      - contents:
        - "8.2.1.2.  Transcoding Translator\n   When acting as a transcoding translator,
          an SRC MAY perform\n   transcoding (e.g., from one codec to another), and
          this may result in\n   a different rate of packets between what the SRC
          receives on the CS\n   and what the SRC sends on the RS.  As when acting
          as a forwarding\n   translator, RTP received as separate streams from different
          sources\n   (e.g., from different UAs with different SSRCs) cannot be mixed
          by\n   the SRC and MUST be sent separately to the SRS.  All RTCP reports\n
          \  MUST be passed by the SRC between the UAs and the SRS, such that the\n
          \  UAs and SRS are able to detect any SSRC collisions.\n   RTCP Sender Reports
          generated by a UA sending a stream MUST be\n   forwarded to the SRS.  RTCP
          Receiver Reports generated by the SRS\n   MUST be forwarded to the relevant
          UA.  The SRC may need to manipulate\n   the RTCP Receiver Reports to take
          into account any transcoding that\n   has taken place.\n   UAs may receive
          multiple sets of RTCP Receiver Reports -- one or more\n   from other UAs
          participating in the CS, and one from the SRS\n   participating in the RS.
          \ A recording-aware UA SHOULD be prepared to\n   process the RTCP Receiver
          Reports from the SRS, whereas a recording-\n   unaware UA may discard such
          RTCP packets as irrelevant.\n   If SRTP is used on both the CS and the RS,
          decryption and/or\n   re-encryption may occur.  For example, if different
          keys are used, it\n   will occur.  If the same keys are used, it need not
          occur.\n   Section 12 provides additional information on SRTP and keying\n
          \  mechanisms.\n   If packet loss occurs, either from the UA to the SRC
          or from the SRC\n   to the SRS, the SRS SHOULD detect and attempt to recover
          from the\n   loss.  The SRC does not play a role in this, other than forwarding\n
          \  the associated RTP and RTCP packets.\n"
        title: 8.2.1.2.  Transcoding Translator
      title: 8.2.1.  SRC Acting as an RTP Translator
    - contents:
      - "8.2.2.  SRC Acting as an RTP Mixer\n   In the case of the SRC acting as an
        RTP mixer, as defined in\n   [RFC3550], the SRC combines RTP streams from
        different UAs and sends\n   them towards the SRS using its own SSRC.  The
        SSRCs from the\n   contributing UA SHOULD be conveyed as CSRC identifiers
        within this\n   stream.  The SRC may make timing adjustments among the received\n
        \  streams and generate its own timing on the stream sent to the SRS.\n   Optionally,
        an SRC acting as a mixer can perform transcoding and can\n   even cope with
        different codings received from different UAs.  RTCP\n   Sender Reports and
        Receiver Reports are not forwarded by an SRC\n   acting as a mixer, but there
        are requirements for forwarding RTCP\n   Source Description (SDES) packets.
        \ The SRC generates its own RTCP\n   Sender Reports and Receiver Reports toward
        the associated UAs\n   and SRS.\n   The use of SRTP between the SRC and the
        SRS for the RS is independent\n   of the use of SRTP between the UAs and the
        SRC for the CS.\n   Section 12 provides additional information on SRTP and
        keying\n   mechanisms.\n   If packet loss occurs from the UA to the SRC, the
        SRC SHOULD detect\n   and attempt to recover from the loss.  If packet loss
        occurs from\n   the SRC to the SRS, the SRS SHOULD detect and attempt to recover
        from\n   the loss.\n"
      title: 8.2.2.  SRC Acting as an RTP Mixer
    - contents:
      - "8.2.3.  SRC Acting as an RTP Endpoint\n   The case of the SRC acting as an
        RTP endpoint, as defined in\n   [RFC3550], is similar to the mixer case, except
        that the RTP session\n   between the SRC and the SRS is considered completely
        independent from\n   the RTP session that is part of the CS.  The SRC can,
        but need not,\n   mix RTP streams from different participants prior to sending
        to the\n   SRS.  RTCP between the SRC and the SRS is completely independent
        of\n   RTCP on the CS.\n   The use of SRTP between the SRC and the SRS for
        the RS is independent\n   of the use of SRTP between the UAs and SRC for the
        CS.  Section 12\n   provides additional information on SRTP and keying mechanisms.\n
        \  If packet loss occurs from the UA to the SRC, the SRC SHOULD detect\n   and
        attempt to recover from the loss.  If packet loss occurs from\n   the SRC
        to the SRS, the SRS SHOULD detect and attempt to recover from\n   the loss.\n"
      title: 8.2.3.  SRC Acting as an RTP Endpoint
    title: 8.2.  Roles
  - contents:
    - "8.3.  RTP Session Usage by SRC\n   There are multiple ways that an SRC may
      choose to deliver recorded\n   media to an SRS.  In some cases, it may use a
      single RTP session for\n   all media within the RS, whereas in others it may
      use multiple RTP\n   sessions.  The following subsections provide examples of
      basic RTP\n   session usage by the SRC, including a discussion of how the RTP\n
      \  constructs and mechanisms covered previously are used.  An SRC may\n   choose
      to use one or more of the RTP session usages within a single\n   RS.  For the
      purpose of base interoperability between SRC and SRS, an\n   SRC MUST support
      separate m-lines in SDP, one per CS media direction.\n   The set of RTP session
      usages described is not meant to be\n   exhaustive.\n"
    - contents:
      - "8.3.1.  SRC Using Multiple m-lines\n   When using multiple m-lines, an SRC
        includes each m-line in an SDP\n   offer to the SRS.  The SDP answer from
        the SRS MUST include all\n   m-lines, with any rejected m-lines indicated
        with a zero port, per\n   [RFC3264].  Having received the answer, the SRC
        starts sending media\n   to the SRS as indicated in the answer.  Alternatively,
        if the SRC\n   deems the level of support indicated in the answer to be\n
        \  unacceptable, it may initiate another SDP offer/answer exchange in\n   which
        an alternative RTP session usage is negotiated.\n   In order to preserve the
        mapping of media to participant within the\n   CSs in the RS, the SRC SHOULD
        map each unique CNAME within the CSs to\n   a unique CNAME within the RS.
        \ Additionally, the SRC SHOULD map each\n   unique combination of CNAME/SSRC
        within the CSs to a unique\n   CNAME/SSRC within the RS.  In doing so, the
        SRC may act as an\n   RTP translator or as an RTP endpoint.\n   Figure 10
        illustrates a case in which each UA represents a\n   participant contributing
        two RTP sessions (e.g., one for audio and\n   one for video), each with a
        single SSRC.  The SRC acts as an RTP\n   translator and delivers the media
        to the SRS using four RTP sessions,\n   each with a single SSRC.  The CNAME
        and SSRC values used by the UAs\n   within their media streams are preserved
        in the media streams from\n   the SRC to the SRS.\n                                                        +---------+\n
        \                               +------------SSRC Aa--->|         |\n                                |
        \ + --------SSRC Av--->|         |\n                                |  |  +------SSRC
        Ba--->|   SRS   |\n                                |  |  |  +---SSRC Bv--->|
        \        |\n                                |  |  |  |              +---------+\n
        \                               |  |  |  |\n                                |
        \ |  |  |\n       +---------+             +----------+             +---------+\n
        \      |         |---SSRC Aa-->|   SRC    |<--SSRC Ba---|         |\n       |
        \ UA-A   |             |(CNAME-A, |             |  UA-B   |\n       |(CNAME-A)|---SSRC
        Av-->| CNAME-B) |<--SSRC Bv---|(CNAME-B)|\n       +---------+             +----------+
        \            +---------+\n                   Figure 10: SRC Using Multiple
        m-lines\n"
      title: 8.3.1.  SRC Using Multiple m-lines
    - contents:
      - "8.3.2.  SRC Using Mixing\n   When using mixing, the SRC combines RTP streams
        from different\n   participants and sends them towards the SRS using its own
        SSRC.  The\n   SSRCs from the contributing participants SHOULD be conveyed
        as CSRC\n   identifiers.  The SRC includes one m-line for each RTP session
        in an\n   SDP offer to the SRS.  The SDP answer from the SRS MUST include
        all\n   m-lines, with any rejected m-lines indicated with a zero port, per\n
        \  [RFC3264].  Having received the answer, the SRC starts sending media\n
        \  to the SRS as indicated in the answer.\n   In order to preserve the mapping
        of media to participant within the\n   CSs in the RS, the SRC SHOULD map each
        unique CNAME within the CSs to\n   a unique CNAME within the RS.  Additionally,
        the SRC SHOULD map each\n   unique combination of CNAME/SSRC within the CSs
        to a unique\n   CNAME/SSRC within the RS.  The SRC MUST avoid SSRC collisions,\n
        \  rewriting SSRCs if necessary when used as CSRCs in the RS.  In\n   doing
        so, the SRC acts as an RTP mixer.\n   In the event that the SRS does not support
        this usage of CSRC values,\n   it relies entirely on the SIPREC metadata to
        determine the\n   participants included within each mixed stream.\n   Figure
        11 illustrates a case in which each UA represents a\n   participant contributing
        two RTP sessions (e.g., one for audio and\n   one for video), each with a
        single SSRC.  The SRC acts as an RTP\n   mixer and delivers the media to the
        SRS using two RTP sessions,\n   mixing media from each participant into a
        single RTP session\n   containing a single SSRC and two CSRCs.\n                                          SSRC
        Sa       +---------+\n                                  +-------CSRC Aa,Ba--->|
        \        |\n                                  |                     |         |\n
        \                                 |       SSRC Sv       |   SRS   |\n                                  |
        \  +---CSRC Av,Bv--->|         |\n                                  |   |
        \                +---------+\n                                  |   |\n                               +----------+\n
        \      +---------+             |   SRC    |             +---------+\n       |
        \        |---SSRC Aa-->|(CNAME-S, |<--SSRC Ba---|         |\n       |  UA-A
        \  |             | CNAME-A, |             |  UA-B   |\n       |(CNAME-A)|---SSRC
        Av-->| CNAME-B) |<--SSRC Bv---|(CNAME-B)|\n       +---------+             +----------+
        \            +---------+\n                        Figure 11: SRC Using Mixing\n"
      title: 8.3.2.  SRC Using Mixing
    title: 8.3.  RTP Session Usage by SRC
  - contents:
    - "8.4.  RTP Session Usage by SRS\n   An SRS that supports recording an audio
      CS MUST support SRC usage of\n   separate audio m-lines in SDP, one per CS media
      direction.  An SRS\n   that supports recording a video CS MUST support SRC usage
      of separate\n   video m-lines in SDP, one per CS media direction.  Therefore,
      for an\n   SRS supporting a typical audio call, the SRS has to support receiving\n
      \  at least two audio m-lines.  For an SRS supporting a typical audio\n   and
      video call, the SRS has to support receiving at least four total\n   m-lines
      in the SDP -- two audio m-lines and two video m-lines.\n   These requirements
      allow an SRS to be implemented that supports video\n   only, without requiring
      support for audio recording.  They also allow\n   an SRS to be implemented that
      supports recording only one direction\n   of one stream in a CS -- for example,
      an SRS designed to record\n   security monitoring cameras that only send (not
      receive) video\n   without any audio.  These requirements were not written to
      prevent\n   other modes from being implemented and used, such as using a single\n
      \  m-line and mixing the separate audio streams together.  Rather, the\n   requirements
      were written to provide a common base mode to implement\n   for the sake of
      interoperability.  It is important to note that an\n   SRS implementation supporting
      the common base mode may not record all\n   media streams in a CS if a participant
      supports more than one m-line\n   in a video call, such as one for camera and
      one for presentation.\n   SRS implementations may support other modes as well,
      but they have to\n   at least support the modes discussed above, such that they\n
      \  interoperate in the common base mode for basic interoperability.\n"
    title: 8.4.  RTP Session Usage by SRS
  title: 8.  RTP Handling
- contents:
  - "9.  Metadata\n   Some metadata attributes are contained in SDP, and others are\n
    \  contained in a new content type called \"application/rs-metadata\".\n   The
    format of the metadata is described as part of the mechanism in\n   [RFC7865].
    \ A new \"disposition-type\" of Content-Disposition is\n   defined for the purpose
    of carrying metadata.  The value is\n   \"recording-session\", which indicates
    that the\n   \"application/rs-metadata\" content contains metadata to be handled
    by\n   the SRS.\n"
  - contents:
    - "9.1.  Procedures at the SRC\n   The SRC MUST send metadata to the SRS in an
      RS.  The SRC SHOULD send\n   metadata as soon as it becomes available and whenever
      it changes.\n   Cases in which an SRC may be justified in waiting temporarily
      before\n   sending metadata include:\n   o  waiting for a previous metadata
      exchange to complete (i.e., the\n      SRC cannot send another SDP offer until
      the previous offer/answer\n      completes and may also prefer not to send an
      UPDATE during this\n      time).\n   o  constraining the signaling rate on the
      RS.\n   o  sending metadata when key events occur, rather than for every\n      event
      that has any impact on metadata.\n   The SRC may also be configured to suppress
      certain metadata out of\n   concern for privacy or perceived lack of need for
      it to be included\n   in the recording.\n   Metadata sent by the SRC is categorized
      as either a full metadata\n   snapshot or a partial update.  A full metadata
      snapshot describes all\n   metadata associated with the RS.  The SRC MAY send
      a full metadata\n   snapshot at any time.  The SRC MAY send a partial update
      only if a\n   full metadata snapshot has been sent previously.\n   The SRC MAY
      send metadata (either a full metadata snapshot or a\n   partial update) in an
      INVITE request, an UPDATE request [RFC3311], or\n   a 200 response to an offerless
      INVITE from the SRS.  If the metadata\n   contains a reference to any SDP labels,
      the request containing the\n   metadata MUST also contain an SDP offer that
      defines those labels.\n   When a SIP message contains both an SDP offer and
      metadata, the\n   request body MUST have content type \"multipart/mixed\", with
      one\n   subordinate body part containing the SDP offer and another containing\n
      \  the metadata.  When a SIP message contains only an SDP offer or\n   metadata,
      the \"multipart/mixed\" container is optional.\n   The SRC SHOULD include a
      full metadata snapshot in the initial INVITE\n   request establishing the RS.
      \ If metadata is not yet available (e.g.,\n   an RS established in the absence
      of a CS), the SRC SHOULD send a full\n   metadata snapshot as soon as metadata
      becomes available.\n   If the SRC receives a snapshot request from the SRS,
      it MUST\n   immediately send a full metadata snapshot.\n   Figure 12 illustrates
      an example of a full metadata snapshot sent by\n   the SRC in the initial INVITE
      request:\n       INVITE sip:recorder@example.com SIP/2.0\n       Via: SIP/2.0/TCP
      src.example.com;branch=z9hG4bKdf6b622b648d9\n       From: <sip:2000@example.com>;tag=35e195d2-947d-4585-946f-09839247\n
      \      To: <sip:recorder@example.com>\n       Call-ID: d253c800-b0d1ea39-4a7dd-3f0e20a\n
      \      CSeq: 101 INVITE\n       Max-Forwards: 70\n       Require: siprec\n       Accept:
      application/sdp, application/rs-metadata\n       Contact: <sip:2000@src.example.com>;+sip.src\n
      \      Content-Type: multipart/mixed;boundary=foobar\n       Content-Length:
      [length]\n       --foobar\n       Content-Type: application/sdp\n       v=0\n
      \      o=SRS 2890844526 2890844526 IN IP4 198.51.100.1\n       s=-\n       c=IN
      IP4 198.51.100.1\n       t=0 0\n       m=audio 12240 RTP/AVP 0 4 8\n       a=sendonly\n
      \      a=label:1\n       --foobar\n       Content-Type: application/rs-metadata\n
      \      Content-Disposition: recording-session\n       [metadata content]\n        Figure
      12: Sample INVITE Request for the Recording Session\n"
    title: 9.1.  Procedures at the SRC
  - contents:
    - "9.2.  Procedures at the SRS\n   The SRS receives metadata updates from the
      SRC in INVITE and UPDATE\n   requests.  Since the SRC can send partial updates
      based on the\n   previous update, the SRS needs to keep track of the sequence
      of\n   updates from the SRC.\n   In the case of an internal failure at the SRS,
      the SRS may fail to\n   recognize a partial update from the SRC.  The SRS may
      be able to\n   recover from the internal failure by requesting a full metadata\n
      \  snapshot from the SRC.  Certain errors, such as syntax errors or\n   semantic
      errors in the metadata information, are likely caused by an\n   error on the
      SRC side, and it is likely that the same error will\n   occur again even when
      a full metadata snapshot is requested.  In\n   order to avoid repeating the
      same error, the SRS can simply terminate\n   the RS when a syntax error or semantic
      error is detected in the\n   metadata.\n   The SRS MAY explicitly request a
      full metadata snapshot by sending an\n   UPDATE request.  This request MUST
      contain a body with\n   Content-Disposition type \"recording-session\" and MUST
      NOT contain an\n   SDP body.  The SRS MUST NOT request a full metadata snapshot
      in an\n   UPDATE response or in any other SIP transaction.  The format of the\n
      \  content is \"application/rs-metadata\", and the body is an XML\n   document,
      the format of which is defined in [RFC7865].  Figure 13\n   shows an example:\n
      \    UPDATE sip:2000@src.example.com SIP/2.0\n     Via: SIP/2.0/UDP srs.example.com;branch=z9hG4bKdf6b622b648d9\n
      \    To: <sip:2000@example.com>;tag=35e195d2-947d-4585-946f-098392474\n     From:
      <sip:recorder@example.com>;tag=1234567890\n     Call-ID: d253c800-b0d1ea39-4a7dd-3f0e20a\n
      \    CSeq: 1 UPDATE\n     Max-Forwards: 70\n     Require: siprec\n     Contact:
      <sip:recorder@srs.example.com>;+sip.srs\n     Accept: application/sdp, application/rs-metadata\n
      \    Content-Disposition: recording-session\n     Content-Type: application/rs-metadata\n
      \    Content-Length: [length]\n     <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
      \      <requestsnapshot xmlns='urn:ietf:params:xml:ns:recording:1'>\n         <requestreason
      xml:lang=\"it\">SRS internal error</requestreason>\n       </requestsnapshot>\n
      \                       Figure 13: Metadata Request\n   Note that UPDATE was
      chosen for the SRS to request a metadata\n   snapshot, because it can be sent
      regardless of the state of the\n   dialog.  This was seen as better than requiring
      support for both\n   UPDATE and re-INVITE messages for this operation.\n   When
      the SRC receives a request for a metadata snapshot, it MUST\n   immediately
      provide a full metadata snapshot in a separate INVITE or\n   UPDATE transaction.
      \ Any subsequent partial updates will not be\n   dependent on any metadata sent
      prior to this full metadata snapshot.\n   The metadata received by the SRS can
      contain ID elements used to\n   cross-reference one element to another.  An
      element containing the\n   definition of an ID and an element containing a reference
      to that ID\n   will often be received from the same SRC.  It is also valid for
      those\n   elements to be received from different SRCs -- for example, when each\n
      \  endpoint in the same CS acts as an SRC to record the call and a\n   common
      ID refers to the same CS.  The SRS MUST NOT consider this an\n   error.\n"
    title: 9.2.  Procedures at the SRS
  title: 9.  Metadata
- contents:
  - "10.  Persistent Recording\n   Persistent recording is a specific use case addressing
    REQ-005 in\n   [RFC6341], where an RS can be established in the absence of a CS.\n
    \  The SRC continuously records media in an RS to the SRS even in the\n   absence
    of a CS for all UAs that are part of persistent recording.\n   By allocating recorded
    streams and continuously sending recorded\n   media to the SRS, the SRC does not
    have to prepare new recorded\n   streams with a new SDP offer when a new CS is
    created and also does\n   not impact the timing of the CS.  The SRC only needs
    to update the\n   metadata when new CSs are created.\n   When there is no CS running
    on the devices with persistent recording,\n   there is no recorded media to stream
    from the SRC to the SRS.  In\n   certain environments where a Network Address
    Translator (NAT) is\n   used, a minimum amount of flow activity is typically required
    to\n   maintain the NAT binding for each port opened.  Agents that support\n   Interactive
    Connectivity Establishment (ICE) solve this problem.  For\n   non-ICE agents,
    in order not to lose the NAT bindings for the\n   RTP/RTCP ports opened for the
    recorded streams, the SRC and SRS\n   SHOULD follow the recommendations provided
    in [RFC6263] to maintain\n   the NAT bindings.\n"
  title: 10.  Persistent Recording
- contents:
  - '11.  IANA Considerations

    '
  - contents:
    - "11.1.  Registration of Option Tags\n   This specification registers two option
      tags.  The required\n   information for this registration, as specified in [RFC3261],
      is as\n   follows.\n"
    - contents:
      - "11.1.1.  \"siprec\" Option Tag\n   Name:  siprec\n   Description:  This option
        tag is for identifying that the SIP session\n      is for the purpose of an
        RS.  This is typically not used in a\n      Supported header.  When present
        in a Require header in a request,\n      it indicates that the UA is either
        an SRC or SRS capable of\n      handling an RS.\n"
      title: 11.1.1.  "siprec" Option Tag
    - contents:
      - "11.1.2.  \"record-aware\" Option Tag\n   Name:  record-aware\n   Description:
        \ This option tag is to indicate the ability of the UA to\n      receive recording
        indicators in media-level or session-level SDP.\n      When present in a Supported
        header, it indicates that the UA can\n      receive recording indicators in
        media-level or session-level SDP.\n"
      title: 11.1.2.  "record-aware" Option Tag
    title: 11.1.  Registration of Option Tags
  - contents:
    - "11.2.  Registration of Media Feature Tags\n   This document registers two new
      media feature tags in the SIP tree\n   per the process defined in [RFC2506]
      and [RFC3840].\n"
    - contents:
      - "11.2.1.  Feature Tag for the SRC\n   Media feature tag name:  sip.src\n   ASN.1
        Identifier:  1.3.6.1.8.4.27\n   Summary of the media feature indicated by
        this tag:  This feature tag\n      indicates that the UA is a Session Recording
        Client for the\n      purpose of an RS.\n   Values appropriate for use with
        this feature tag:  boolean\n   The feature tag is intended primarily for use
        in the following\n      applications, protocols, services, or negotiation
        mechanisms:\n      This feature tag is only useful for an RS.\n   Examples
        of typical use:  Routing the request to a Session Recording\n      Server.\n
        \  Security Considerations:  Security considerations for this media\n      feature
        tag are discussed in Section 11.1 of RFC 3840.\n"
      title: 11.2.1.  Feature Tag for the SRC
    - contents:
      - "11.2.2.  Feature Tag for the SRS\n   Media feature tag name:  sip.srs\n   ASN.1
        Identifier:  1.3.6.1.8.4.28\n   Summary of the media feature indicated by
        this tag:  This feature tag\n      indicates that the UA is a Session Recording
        Server for the\n      purpose of an RS.\n   Values appropriate for use with
        this feature tag:  boolean\n   The feature tag is intended primarily for use
        in the following\n      applications, protocols, services, or negotiation
        mechanisms:\n      This feature tag is only useful for an RS.\n   Examples
        of typical use:  Routing the request to a Session Recording\n      Client.\n
        \  Security Considerations:  Security considerations for this media\n      feature
        tag are discussed in Section 11.1 of RFC 3840.\n"
      title: 11.2.2.  Feature Tag for the SRS
    title: 11.2.  Registration of Media Feature Tags
  - contents:
    - "11.3.  New Content-Disposition Parameter Registrations\n   This document registers
      a new \"disposition-type\" value in the\n   Content-Disposition header: recording-session.\n
      \  recording-session:  The body describes either\n      *  metadata about the
      RS\n         or\n      *  the reason for the metadata snapshot request\n      as
      determined by the MIME value indicated in the Content-Type.\n"
    title: 11.3.  New Content-Disposition Parameter Registrations
  - contents:
    - "11.4.  SDP Attributes\n   This document registers the following new SDP attributes.\n"
    - contents:
      - "11.4.1.  \"record\" SDP Attribute\n   Contact names:\n      Leon Portman,
        leon.portman@nice.com;\n      Henry Lum, henry.lum@genesyslab.com\n   Attribute
        name: record\n   Long-form attribute name: Recording Indication\n   Type of
        attribute: session level or media level\n   Subject to charset: no\n   This
        attribute provides the recording indication for the session or\n   media stream.\n
        \  Allowed attribute values: on, off, paused\n"
      title: 11.4.1.  "record" SDP Attribute
    - contents:
      - "11.4.2.  \"recordpref\" SDP Attribute\n   Contact names:\n      Leon Portman,
        leon.portman@nice.com;\n      Henry Lum, henry.lum@genesyslab.com\n   Attribute
        name: recordpref\n   Long-form attribute name: Recording Preference\n   Type
        of attribute: session level or media level\n   Subject to charset: no\n   This
        attribute provides the recording preference for the session or\n   media stream.\n
        \  Allowed attribute values: on, off, pause, nopreference\n"
      title: 11.4.2.  "recordpref" SDP Attribute
    title: 11.4.  SDP Attributes
  title: 11.  IANA Considerations
- contents:
  - "12.  Security Considerations\n   The RS is fundamentally a standard SIP dialog
    [RFC3261]; therefore,\n   the RS can reuse any of the existing SIP security mechanisms\n
    \  available for securing the session signaling, the recorded media, and\n   the
    metadata.  The use cases and requirements document [RFC6341]\n   outlines the
    general security considerations, and this document\n   describes specific security
    recommendations.\n   The SRC and SRS MUST support SIP with Transport Layer Security
    (TLS)\n   version 1.2, SHOULD follow the best practices when using TLS as per\n
    \  [RFC7525], and MAY use Session Initiation Protocol Secure (SIPS) with\n   TLS
    as per [RFC5630].  The RS MUST be at least as secure as the CS;\n   this means
    using at least the same strength of cipher suite as the CS\n   if the CS is secured.
    \ For example, if the CS uses SIPS for signaling\n   and RTP/SAVP for media, then
    the RS may not use SIP or plain RTP\n   unless other equivalent security measures
    are in effect, since doing\n   so would mean an effective security downgrade.
    \ Examples of other\n   potentially equivalent security mechanisms include mutually\n
    \  authenticated TLS for the RS signaling channel or an appropriately\n   protected
    network path for the RS media component.\n"
  - contents:
    - "12.1.  Authentication and Authorization\n   At the transport level, the RS
      uses TLS authentication to validate\n   the authenticity of the SRC and SRS.
      \ The SRC and SRS MUST implement\n   TLS mutual authentication for establishing
      the RS.  Whether the\n   SRC/SRS chooses to use TLS mutual authentication is
      a deployment\n   decision.  In deployments where a UA acts as its own SRC, this\n
      \  requires that the UA have its own certificate as needed for TLS\n   mutual
      authentication.  In deployments where the SRC and the SRS are\n   in the same
      administrative domain and have some other means of\n   assuring authenticity,
      the SRC and SRS may choose not to authenticate\n   each other or to have the
      SRC authenticate the SRS only.  In\n   deployments where the SRS can be hosted
      on a different administrative\n   domain, it is important to perform mutual
      authentication to ensure\n   the authenticity of both the SRC and the SRS before
      transmitting any\n   recorded media.  The risk of not authenticating the SRS
      is that the\n   recording may be sent to an entity other than the intended SRS,\n
      \  allowing a sensitive call recording to be received by an attacker.\n   On
      the other hand, the risk of not authenticating the SRC is that an\n   SRS will
      accept calls from an unknown SRC and allow potential forgery\n   of call recordings.\n
      \  There may be scenarios in which the signaling between the SRC and SRS\n   is
      not direct, e.g., a SIP proxy exists between the SRC and the SRS.\n   In such
      scenarios, each hop is subject to the TLS mutual\n   authentication constraint,
      and transitive trust at each hop is\n   utilized.  Additionally, an SRC or SRS
      may use other existing SIP\n   mechanisms available, including, but not limited
      to, Digest\n   authentication [RFC3261], asserted identity [RFC3325], and connected\n
      \  identity [RFC4916].\n   The SRS may have its own set of recording policies
      to authorize\n   recording requests from the SRC.  The use of recording policies
      is\n   outside the scope of the Session Recording Protocol.\n"
    title: 12.1.  Authentication and Authorization
  - contents:
    - "12.2.  RTP Handling\n   In many scenarios, it will be critical for the media
      transported\n   between the SRC and the SRS to be protected.  Media encryption
      is an\n   important element in the overall SIPREC solution; therefore, the SRC\n
      \  and the SRS MUST support RTP/SAVP [RFC3711] and RTP/SAVPF [RFC5124].\n   RTP/SAVP
      and RTP/SAVPF provide media encryption, integrity\n   protection, replay protection,
      and a limited form of source\n   authentication.  They do not contain or require
      a specific keying\n   mechanism.  At a minimum, the SRC and SRS MUST support
      the SDP\n   security descriptions key negotiation mechanism [RFC4568].  For
      cases\n   in which Datagram Transport Layer Security for Secure RTP (DTLS-SRTP)\n
      \  is used to encrypt a CS media stream, an SRC may use SRTP Encrypted\n   Key
      Transport (EKT) [EKT-SRTP] in order to use SRTP-SDES in the RS\n   without needing
      to re-encrypt the media.\n      Note: When using EKT in this manner, it is possible
      for\n      participants in the CS to send traffic that appears to be from\n
      \     other participants and have this forwarded by the SRC to the SRS\n      within
      the RS.  If this is a concern (e.g., the RS is intended for\n      audit or
      compliance purposes), EKT is not an appropriate choice.\n   When RTP/SAVP or
      RTP/SAVPF is used, an SRC can choose to use the same\n   keys or different keys
      in the RS than those used in the CS.  Some\n   SRCs are designed to simply replicate
      RTP packets from a CS media\n   stream to the SRS, in which case the SRC will
      use the same key in the\n   RS as the key used in the CS.  In this case, the
      SRC MUST secure the\n   SDP containing the keying material in the RS with at
      least the same\n   level of security as in the CS.  The risk of lowering the
      level of\n   security in the RS is that it will effectively become a downgrade\n
      \  attack on the CS, since the same key is used for both the CS and\n   the
      RS.\n   SRCs that decrypt an encrypted CS media stream and re-encrypt it when\n
      \  sending it to the SRS MUST use a different key than what is used for\n   the
      CS media stream, to ensure that it is not possible for someone\n   who has the
      key for the CS media stream to access recorded data they\n   are not authorized
      to access.  In order to maintain a comparable\n   level of security, the key
      used in the RS SHOULD be of equivalent\n   strength to, or greater strength
      than, that used in the CS.\n"
    title: 12.2.  RTP Handling
  - contents:
    - "12.3.  Metadata\n   Metadata contains sensitive information, such as the address
      of\n   record of the participants and other extension data placed by the\n   SRC.
      \ It is essential to protect the content of the metadata in the\n   RS.  Since
      metadata is a content type transmitted in SIP signaling,\n   metadata SHOULD
      be protected at the transport level by SIPS/TLS.\n"
    title: 12.3.  Metadata
  - contents:
    - "12.4.  Storage and Playback\n   While storage and playback of the call recording
      are beyond the scope\n   of this document, it is worthwhile to mention here
      that it is also\n   important for the recording storage and playback to provide
      a level\n   of security that is comparable to the CS.  It would defeat the\n
      \  purpose of securing both the CS and the RS mentioned in the previous\n   sections
      if the recording can be easily played back with a simple,\n   unsecured HTTP
      interface without any form of authentication or\n   authorization.\n"
    title: 12.4.  Storage and Playback
  title: 12.  Security Considerations
- contents:
  - '13.  References

    '
  - contents:
    - "13.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC2506]  Holtman, K., Mutz, A., and T. Hardie, \"Media Feature Tag\n              Registration
      Procedure\", BCP 31, RFC 2506,\n              DOI 10.17487/RFC2506, March 1999,\n
      \             <http://www.rfc-editor.org/info/rfc2506>.\n   [RFC3261]  Rosenberg,
      J., Schulzrinne, H., Camarillo, G., Johnston,\n              A., Peterson, J.,
      Sparks, R., Handley, M., and E.\n              Schooler, \"SIP: Session Initiation
      Protocol\", RFC 3261,\n              DOI 10.17487/RFC3261, June 2002,\n              <http://www.rfc-editor.org/info/rfc3261>.\n
      \  [RFC3264]  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n              with
      Session Description Protocol (SDP)\", RFC 3264,\n              DOI 10.17487/RFC3264,
      June 2002,\n              <http://www.rfc-editor.org/info/rfc3264>.\n   [RFC3550]
      \ Schulzrinne, H., Casner, S., Frederick, R., and V.\n              Jacobson,
      \"RTP: A Transport Protocol for Real-Time\n              Applications\", STD
      64, RFC 3550, DOI 10.17487/RFC3550,\n              July 2003, <http://www.rfc-editor.org/info/rfc3550>.\n
      \  [RFC3840]  Rosenberg, J., Schulzrinne, H., and P. Kyzivat,\n              \"Indicating
      User Agent Capabilities in the Session\n              Initiation Protocol (SIP)\",
      RFC 3840,\n              DOI 10.17487/RFC3840, August 2004,\n              <http://www.rfc-editor.org/info/rfc3840>.\n
      \  [RFC4574]  Levin, O. and G. Camarillo, \"The Session Description\n              Protocol
      (SDP) Label Attribute\", RFC 4574,\n              DOI 10.17487/RFC4574, August
      2006,\n              <http://www.rfc-editor.org/info/rfc4574>.\n   [RFC5234]
      \ Crocker, D., Ed., and P. Overell, \"Augmented BNF for\n              Syntax
      Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,
      January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC7245]
      \ Hutton, A., Ed., Portman, L., Ed., Jain, R., and K. Rehor,\n              \"An
      Architecture for Media Recording Using the Session\n              Initiation
      Protocol\", RFC 7245, DOI 10.17487/RFC7245,\n              May 2014, <http://www.rfc-editor.org/info/rfc7245>.\n
      \  [RFC7865]  Ravindranath, R., Ravindran, P., and P. Kyzivat, \"Session\n              Initiation
      Protocol (SIP) Recording Metadata\", RFC 7865,\n              DOI 10.17487/RFC7865,
      May 2016,\n              <http://www.rfc-editor.org/info/rfc7865>.\n"
    title: 13.1.  Normative References
  - contents:
    - "13.2.  Informative References\n   [EKT-SRTP] Mattsson, J., Ed., McGrew, D.,
      Wing, D., and F. Andreasen,\n              \"Encrypted Key Transport for Secure
      RTP\", Work in\n              Progress, draft-ietf-avtcore-srtp-ekt-03, October
      2014.\n   [RFC2804]  IAB and IESG, \"IETF Policy on Wiretapping\", RFC 2804,\n
      \             DOI 10.17487/RFC2804, May 2000,\n              <http://www.rfc-editor.org/info/rfc2804>.\n
      \  [RFC3311]  Rosenberg, J., \"The Session Initiation Protocol (SIP)\n              UPDATE
      Method\", RFC 3311, DOI 10.17487/RFC3311,\n              October 2002, <http://www.rfc-editor.org/info/rfc3311>.\n
      \  [RFC3325]  Jennings, C., Peterson, J., and M. Watson, \"Private\n              Extensions
      to the Session Initiation Protocol (SIP) for\n              Asserted Identity
      within Trusted Networks\", RFC 3325,\n              DOI 10.17487/RFC3325, November
      2002,\n              <http://www.rfc-editor.org/info/rfc3325>.\n   [RFC3551]
      \ Schulzrinne, H. and S. Casner, \"RTP Profile for Audio and\n              Video
      Conferences with Minimal Control\", STD 65, RFC 3551,\n              DOI 10.17487/RFC3551,
      July 2003,\n              <http://www.rfc-editor.org/info/rfc3551>.\n   [RFC3711]
      \ Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.\n              Norrman,
      \"The Secure Real-time Transport Protocol (SRTP)\",\n              RFC 3711,
      DOI 10.17487/RFC3711, March 2004,\n              <http://www.rfc-editor.org/info/rfc3711>.\n
      \  [RFC4568]  Andreasen, F., Baugher, M., and D. Wing, \"Session\n              Description
      Protocol (SDP) Security Descriptions for Media\n              Streams\", RFC
      4568, DOI 10.17487/RFC4568, July 2006,\n              <http://www.rfc-editor.org/info/rfc4568>.\n
      \  [RFC4585]  Ott, J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,\n              \"Extended
      RTP Profile for Real-time Transport Control\n              Protocol (RTCP)-Based
      Feedback (RTP/AVPF)\", RFC 4585,\n              DOI 10.17487/RFC4585, July 2006,\n
      \             <http://www.rfc-editor.org/info/rfc4585>.\n   [RFC4916]  Elwell,
      J., \"Connected Identity in the Session Initiation\n              Protocol (SIP)\",
      RFC 4916, DOI 10.17487/RFC4916,\n              June 2007, <http://www.rfc-editor.org/info/rfc4916>.\n
      \  [RFC4961]  Wing, D., \"Symmetric RTP / RTP Control Protocol (RTCP)\",\n              BCP
      131, RFC 4961, DOI 10.17487/RFC4961, July 2007,\n              <http://www.rfc-editor.org/info/rfc4961>.\n
      \  [RFC5104]  Wenger, S., Chandra, U., Westerlund, M., and B. Burman,\n              \"Codec
      Control Messages in the RTP Audio-Visual Profile\n              with Feedback
      (AVPF)\", RFC 5104, DOI 10.17487/RFC5104,\n              February 2008, <http://www.rfc-editor.org/info/rfc5104>.\n
      \  [RFC5124]  Ott, J. and E. Carrara, \"Extended Secure RTP Profile for\n              Real-time
      Transport Control Protocol (RTCP)-Based Feedback\n              (RTP/SAVPF)\",
      RFC 5124, DOI 10.17487/RFC5124,\n              February 2008, <http://www.rfc-editor.org/info/rfc5124>.\n
      \  [RFC5168]  Levin, O., Even, R., and P. Hagendorf, \"XML Schema for\n              Media
      Control\", RFC 5168, DOI 10.17487/RFC5168,\n              March 2008, <http://www.rfc-editor.org/info/rfc5168>.\n
      \  [RFC5630]  Audet, F., \"The Use of the SIPS URI Scheme in the Session\n              Initiation
      Protocol (SIP)\", RFC 5630,\n              DOI 10.17487/RFC5630, October 2009,\n
      \             <http://www.rfc-editor.org/info/rfc5630>.\n   [RFC5761]  Perkins,
      C. and M. Westerlund, \"Multiplexing RTP Data and\n              Control Packets
      on a Single Port\", RFC 5761,\n              DOI 10.17487/RFC5761, April 2010,\n
      \             <http://www.rfc-editor.org/info/rfc5761>.\n   [RFC6263]  Marjou,
      X. and A. Sollaud, \"Application Mechanism for\n              Keeping Alive
      the NAT Mappings Associated with RTP / RTP\n              Control Protocol (RTCP)
      Flows\", RFC 6263,\n              DOI 10.17487/RFC6263, June 2011,\n              <http://www.rfc-editor.org/info/rfc6263>.\n
      \  [RFC6341]  Rehor, K., Ed., Portman, L., Ed., Hutton, A., and R. Jain,\n              \"Use
      Cases and Requirements for SIP-Based Media Recording\n              (SIPREC)\",
      RFC 6341, DOI 10.17487/RFC6341, August 2011,\n              <http://www.rfc-editor.org/info/rfc6341>.\n
      \  [RFC7022]  Begen, A., Perkins, C., Wing, D., and E. Rescorla,\n              \"Guidelines
      for Choosing RTP Control Protocol (RTCP)\n              Canonical Names (CNAMEs)\",
      RFC 7022, DOI 10.17487/RFC7022,\n              September 2013, <http://www.rfc-editor.org/info/rfc7022>.\n
      \  [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations
      for Secure Use of Transport Layer\n              Security (TLS) and Datagram
      Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,\n
      \             May 2015, <http://www.rfc-editor.org/info/rfc7525>.\n"
    title: 13.2.  Informative References
  title: 13.  References
- contents:
  - "Acknowledgements\n   We want to thank John Elwell, Paul Kyzivat, Partharsarathi
    R, Ram\n   Mohan R, Hadriel Kaplan, Adam Roach, Miguel Garcia, Thomas Stach,\n
    \  Muthu Perumal, Dan Wing, and Magnus Westerlund for their valuable\n   comments
    and inputs to this document.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Leon Portman\n   NICE Systems\n   22 Zarhin Street\n   P.O.
    Box 690\n   Ra'anana  4310602\n   Israel\n   Email: leon.portman@gmail.com\n   Henry
    Lum (editor)\n   Genesys\n   1380 Rodick Road, Suite 201\n   Markham, Ontario
    \ L3R4G5\n   Canada\n   Email: henry.lum@genesyslab.com\n   Charles Eckel\n   Cisco\n
    \  170 West Tasman Drive\n   San Jose, CA  95134\n   United States\n   Email:
    eckelcu@cisco.com\n   Alan Johnston\n   Illinois Institute of Technology\n   Bellevue,
    WA\n   United States\n   Email: alan.b.johnston@gmail.com\n   Andrew Hutton\n
    \  Unify\n   Brickhill Street\n   Milton Keynes  MK15 0DJ\n   United Kingdom\n
    \  Email: andrew.hutton@unify.com\n"
  title: Authors' Addresses
