Abstract This document provides a specification for a type of response to an OTP [RFC 1938] challenge that carries explicit indication of the response's encoding.
Codings for the two mandatory OTP data formats using this new type of response are presented.
This document also provides a specification for a response that allows an OTP generator to request that a server re initialize a sequence and change parameters such as the secret pass phrase.
This document specifies the data formats and software behaviors needed to use OTP extended responses.
The data formats are described three ways: using an ad hoc UNIX manual page style syntax, using augmented BNF described in sections two and three of RFC 822, and by examples.
Should there be any conflict between these descriptions, the augmented BNF takes precedence.
The software behaviors are described in words, and specific behavior compliance requirements are itemized using the requirements terminology (specifically, the words MUST, SHOULD, and MAY) defined in RFC 2119.
Extended Challenges and Extended Responses
This document builds on the protocol and terminology specified in RFC 1938 and assumes that you have already read this document and understand its contents.
An extended challenge is a single line of printable text terminated by either a new line sequence appropriate for the context of its use (e.g., ASCII CR followed by ASCII LF) or a whitespace character.
It contains a standard OTP challenge, a whitespace character, and a list that generators use to determine which extended responses are supported by a server.
An extended response is a single line of printable text terminated by a new line sequence appropriate for the context of its use.
The first token contains a type specifier that indicates the format of the rest of the response.
The tokens that follow are argument data for the OTP extended response.
At least one token of data MUST be present.
Syntax In UNIX manual page like syntax, the general form of an extended challenge could be described as: <standard OTP challenge>
In augmented BNF syntax, the syntax of the general form of an extended challenge and an extended response is: extended challenge   otp challenge 1 LWSP char capability list (NL /  LWSP char)
An example of an extended challenge indicating support for OTP extended responses and for a mythical response set "foo" is: otp md5
123 mi1234 ext,foo An example of an extended response using a mythical type named "foo" is: foo:
some data:some more data:12345 2.2.
Requirements A server compliant with this specification: 1. MUST be able to receive and parse the general form of an extended response 2.
MUST be able to receive, parse, and correctly process all extended responses specified in this document 3.
MUST process the type field in a case insensitive manner 4.
MUST reject any authentication attempt using an extended response if it does not support that type of response 5.
SHOULD provide an appropriate indication to the generator if the response was rejected because of (4) 6.
MUST limit the length of the input reasonably 7.
MUST accept otherwise arbitrary amounts of whitespace wherever a response allows it 8.
MUST be able to receive and correctly process standard OTP responses A generator compliant with this specification: 1. MUST be able to generate standard OTP responses 2.
MUST use standard responses unless an extended challenge has been received for the particular server AND seed 3.
MUST generate the type field in lower case 4.
MUST NOT send a response type for which the server has not indicated support through an extended challenge Extension set identifiers and extension type identifiers named with the prefix "
x " are reserved for private use among mutually consenting implementations.
Implementations that do not recognise a particular "x " extension MUST ignore that extension.
This means that all "x " extensions are likely to be non interoperable with other extensions.
Careful consideration should be given to the possibility of a server interacting with with a generator implementation which, although it recognizes a given "x " extension, uses it for a different purpose.
All of the remaining extension namespace is reserved to IANA, which will only officially assign the extension into this namespace after the IESG approves of such an assignment.
During the lifetime of the OTP WG, it is recommended that the IESG consult with the OTP WG prior to approving such an assignment.
The "hex" and "word" Responses There exists a very rare case in which a standard OTP response could be a valid coding in both the hexadecimal and six word formats.
An example of this is the response "ABE ACE ADA ADD BAD A.
The solution to this problem mandated by the OTP specification is that compliant servers MUST attempt to parse and verify a standard response in both hexadecimal and six word formats and must consider the authentication successful if either succeeds.
This problem can be solved easily using extended responses.
The "hex" response and the "word" response are two response types that encode an OTP in an extended response that explicitly describes the encoding.
These responses start with a type label of "hex" for a hexadecimal OTP and "word" for a six word coded OTP.
These responses contain one argument field that contains a standard OTP response coded in the indicated format.
Syntax In UNIX manual page like syntax, the format of these responses could be described as: hex:<hexadecimal number
In augmented BNF syntax and with the definitions already provided, the syntax of these responses is: hex response
"word:" word 64bit NL word 64bit
6(otp word 1 LWSP char)
<any valid word in the standard OTP coding dictionary>
Examples of these responses are: hex:8720 33d4
SAUL TAKE SODA SUCH BOLT 3.2.
Requirements A server compliant with this specification: 1. MUST process all arguments in a case insensitive manner
A generator compliant with this specification: 1.
SHOULD generate otp word tokens in upper case with single spaces separating them 2.
SHOULD generate hexadecimal numbers using only lower case for letters 4.
The "init hex" and "init word" Responses
The OTP specification requires that implementations provide a means for a client to re initialize or change its OTP information with a server but does not require any specific protocol for doing it.
Implementations that support the OTP extended responses described in this document MUST support the response with the "init hex" and "init word" type specifiers, which provide a standard way for a client to re initialize its OTP information with a server.
This response is intended to be used only by automated clients.
Because of this, the recommended form of this response uses the hexadecimal encoding for binary data.
It is possible for a user to type an "init  hex" or "init word" response.
Syntax In UNIX manual page like syntax
, the format of these responses could be described as: init hex:<current
OTP>:<new params>:<new OTP> init word:<current
In augmented BNF syntax and with the definitions already provided, the syntax of the "init hex" response is: init hex response
In augmented BNF syntax and with the definitions already provided, the syntax of the "init word" response is: init word response
Note that all appropriate fields for the "init hex" response MUST be hexadecimally coded and that all appropriate fields for the "init  word" response MUST be six word coded.
Examples of these responses are: init hex:
c9b2 12bb 6425 5a0f:md5 499 ke0986:
init word:MOOD SOFT POP COMB BOLO LIFE:md5 499
TAD RUG HALO GIVE init word:
BABY FAIN OILY NIL TIDY DADE
(Note that all of these responses are one line.
Due to their length, they had to be split into multiple lines in order to be included here.
These responses MUST NOT span more than one line in actual use) 4.2.
The current OTP field contains the (RFC 1938) response to the OTP challenge.
The new params field contains the parameters for the client's new requested challenge and the new OTP field contains a response to that challenge.
If the re initialization is successful, a server MUST store the new OTP in its database as the last successful OTP received and the sequence number in the next challenge presented by the server MUST be one less than the sequence number specified in the new params field.
The new params field is hashed as a string the same way that a seed or secret pass phrase would be.
All other field values are hashed in their uncoded binary forms, in network byte order and without any padding.
Requirements A server compliant with this specification: 1.
SHOULD NOT allow a user to use the same value for their seed and secret pass phrase.
2. MUST disable all OTP access to any principal whose sequence number would be less than one 3.
MUST decrement the sequence number if a reinitialization response includes a valid current OTP, but the server is unable to successfully process the new params or new OTP for any reason.
A generator compliant with this specification: 1.
SHOULD NOT allow a user to use the same value for their seed and secret pass phrase 2.
MUST take specific steps to prevent infinite loops of re initialization attempts in case of failure 3.
SHOULD provide the user with some indication that the re initialization is taking place 4.
SHOULD NOT do a re initialization without the user's permission, either for that specific instance or as a configuration option 5.
SHOULD NOT retry a failed re initialization without a user's permission 6.
SHOULD warn the user if the sequence number falls below ten 7.
MUST refuse to generate OTPs with a sequence number below one 5.
All of the security considerations for the OTP system also apply to the OTP system with extended responses.
These extended responses, like OTP itself, do not protect the user against active attacks.
The IPsec Authentication Header (RFC 1826) (or another technique with at least as much strength as IPsec AH)
SHOULD be used to protect against such attacks.
The consequences of a successful active attack on the re  initialization response may be more severe than simply hijacking a single session.
An attacker could substitute his own response for that of a legitimate user.
The attacker may then be able to use the OTP system to authenticate himself as the user at will (at least until detected).
Failure to implement server requirement 3 in section 4.3 opens an implementation to an attack based on replay of the current OTP part of the response.
The following responses were generated by a development version of the One Time Passwords in Everything (OPIE) implementation of this specification.
All of these are responses to the challenge: otp md5 499
ext Note that the re initialization responses use the same secret pass phrase for new and current and a new seed of "ke1235".
Also, these responses have been split for formatting purposes into multiple lines; they MUST NOT be multiple lines in actual use.
The secret pass phrase for these responses is: This is a test.
The OTP standard hexadecimal response is: 5bf0 75d9 959d 036f
The OTP standard six word response is: BOND FOGY
The OTP extended "hex" response is:
"word" response is: word:BOND FOGY
The OTP extended "init hex" response is: init hex:5bf0 75d9 959d 036f:md5 499
"init word" response is: init word:BOND FOGY
RED HERD NOW BEAN PA BURG
