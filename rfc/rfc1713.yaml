- title: __initial_text__
  contents:
  - '                        Tools for DNS debugging

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   Although widely used (and most of the times unnoticed), DNS (Domain\n\
    \   Name System) is too much overlooked, in the sense that people,\n   especially\
    \ administrators, tend to ignore possible anomalies as long\n   as applications\
    \ that need name-to-address mapping continue to work.\n   This document presents\
    \ some tools available for domain administrators\n   to detect and correct those\
    \ anomalies.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Today more than 3,800,000 computers are inter-connected in\
    \ a global\n   Internet [1], comprising several millions of end-users, able to\
    \ reach\n   any of those machines just by naming it.  This facility is possible\n\
    \   thanks to the world widest distributed database, the Domain Name\n   System,\
    \ used to provide distributed applications various services,\n   the most notable\
    \ one being translating names into IP addresses and\n   vice-versa.  This happens\
    \ when you do an FTP or Telnet, when your\n   gopher client follows a link to\
    \ some remote server, when you click on\n   a hypertext item and have to reach\
    \ a server as defined by the URL,\n   when you talk to someuser@some.host, when\
    \ your mail has to be routed\n   through a set to gateways before it reaches the\
    \ final recipient, when\n   you post an article to Usenet and want it propagated\
    \ all over the\n   world.  While these may be the most visible uses of DNS, a\
    \ lot more\n   applications rely on this system to operate, e.g., network security,\n\
    \   monitoring and accounting tools, just to mention a few.\n   DNS owes much\
    \ of its success to its distributed administration.  Each\n   component (called\
    \ a zone, the same as a domain in most cases), is\n   seen as an independent entity,\
    \ being responsible for what happens\n   inside its domain of authority, how and\
    \ what information changes and\n   for letting the tree grow downwards, creating\
    \ new components.\n   On the other hand, many inconsistencies arise from this\
    \ distributed\n   nature: many administrators make mistakes in the way they configure\n\
    \   their domains and when they delegate authority to sub-domains; many\n   of\
    \ them don't even know how to do these things properly, letting\n   problems last\
    \ and propagate.  Also, many problems occur due to bad\n   implementations of\
    \ both DNS clients and servers, especially very old\n   ones, either by not following\
    \ the standards or by being error prone,\n   creating or allowing many of the\
    \ above problems to happen.\n   All these anomalies make DNS less efficient than\
    \ it could be, causing\n   trouble to network operations, thus affecting the overall\
    \ Internet.\n   This document tries to show how important it is to have DNS properly\n\
    \   managed, including what is already in place to help administrators\n   taking\
    \ better care of their domains.\n"
- title: 2. DNS debugging
  contents:
  - "2. DNS debugging\n   To help finding problems in DNS configurations and/or implementations\n\
    \   there is a set of tools developed specifically for this purpose.\n   There\
    \ is probably a lot of people in charge of domain administration\n   having no\
    \ idea of these tools (and, worse, not aware of the anomalies\n   that may exist\
    \ in their configurations).  What follows is a\n   description of some of these\
    \ programs, their scope, motivations and\n   availability, and is hoped to serve\
    \ as an introduction to the subject\n   of DNS debugging, as well as a guide to\
    \ those who are looking for\n   something to help them finding out how healthy\
    \ their domains and\n   servers are.\n   Some prior knowledge from the reader\
    \ is assumed, both on DNS basics\n   and some other tools (e.g., dig and nslookup),\
    \ which are not analyzed\n   in detail here; hopefully they are well-known enough\
    \ from daily\n   usage.\n"
- title: 2.1. Host
  contents:
  - "2.1. Host\n   Host is a program used to retrieve DNS information from name servers.\n\
    \   This information may be used simply to get simple things like\n   address-to-name\
    \ mapping, or some more advanced purposes, e.g.,\n   performing sanity checks\
    \ on the data.  It was created at Rutgers\n   University, but then Eric Wassenaar\
    \ from Nikhef did a major rewrite\n   and still seems to be actively working on\
    \ improving it.  The program\n   is available from ftp://ftp.nikhef.nl/pub/network/host_YYMMDD.tar.Z\n\
    \   (YYMMDD is the date of the latest release).\n   By default, host just maps\
    \ host names to Internet addresses, querying\n   the default servers or some specific\
    \ one.  It is possible, though, to\n   get any kind of data (resource records)\
    \ by specifying different query\n   types and classes and asking for verbose or\
    \ debugging output, from\n   any name server.  You can also control several parameters\
    \ like\n   recursion, retry times, timeouts, use of virtual circuits vs.\n   datagrams,\
    \ etc., when talking to name servers.  This way you can\n   simulate a resolver\
    \ behavior, in order to find any problems\n   associated with resolver operations\
    \ (which is to say, any application\n   using the resolver library).  As a query\
    \ program it may be as\n   powerful as others like nslookup or dig.\n   As a debugger,\
    \ host analyzes some set of the DNS space (e.g., an\n   entire zone) and produces\
    \ reports with the results of its operation.\n   To do this, host first performs\
    \ a zone transfer, which may be\n   recursive, getting information from a zone\
    \ and all its sub-zones.\n   This data is then analyzed as requested by the arguments\
    \ given on the\n   command line.  Note that zone transfers are done by contacting\n\
    \   authoritative name servers for that zone, so it must be possible to\n   make\
    \ this kind of request from such servers: some of them refuse zone\n   transfers\
    \ (except from secondaries) to avoid congestion.\n   With host you may look for\
    \ anomalies like those concerning authority\n   (e.g., lame delegations, described\
    \ below) or some more exotic cases\n   like extrazone hosts (a host of the form\
    \ host.some.dom.ain, where\n   some.dom.ain is not a delegated zone of dom.ain).\
    \  These errors are\n   produced upon explicit request on the command line, but\
    \ you may get a\n   variety of other error messages as a result of host's operations,\n\
    \   something like secondary effects.  These may be mere warnings (which\n   may\
    \ be suppressed) or serious errors - in fact, warning messages are\n   not that\
    \ simple, most of them are due to misconfigured zones, so it\n   might not be\
    \ a good idea to just ignore them.\n   Error messages have to do with serious\
    \ anomalies, either with the\n   packets exchanged with the queried servers (size\
    \ errors, invalid\n   ancounts, nscounts and the like), or others related to the\
    \ DNS\n   information itself (also called \"status messages\" in the program's\n\
    \   documentation): inconsistencies between SOA records as shown by\n   different\
    \ servers for a domain, unexpected address-to-name mappings,\n   name servers\
    \ not responding, not reachable, not running or not\n   existing at all, and so\
    \ on.\n   Host performs all its querying on-line, i.e., it only works with data\n\
    \   received from name servers, which means you have to query a name\n   server\
    \ more than once if you want to get different kinds of reports\n   on some particular\
    \ piece of data.  You can always arrange arguments\n   in such a way that you\
    \ get all information you want by running it\n   once, but if you forget something\
    \ or for any reason have to run it\n   again, this means extra zone transfers,\
    \ extra load on name servers,\n   extra DNS traffic.\n   Host is an excellent\
    \ tool, if used carefully.  Like most other\n   querying programs it may generate\
    \ lots of traffic, just by issuing a\n   simple command.  Apart from that, its\
    \ resolver simulation and debug\n   capabilities make it useful to find many common\
    \ and some not so\n   common DNS configuration errors, as well as generate useful\
    \ reports\n   and statistics about the DNS tree.  As an example, RIPE (Reseaux\
    \ IP\n   Europeens) NCC uses it to generate a monthly european hostcount,\n  \
    \ giving an overview of the Internet usage evolution in Europe.  Along\n   with\
    \ these counts, error reports are generated, one per country, and\n   the whole\
    \ information is made available in the RIPE archive.\n"
- title: 2.2. Dnswalk
  contents:
  - "2.2. Dnswalk\n   Dnswalk is a DNS debugger written in Perl by David Barr, from\n\
    \   Pennsylvania State University.  You'll find the latest version at\n   ftp://ftp.pop.psu.edu/pub/src/dnswalk.\
    \  With the software comes a\n   small document where the author points some useful\
    \ advice so it may\n   be worth reading it.\n   The program checks domain configurations\
    \ stored locally, with data\n   arranged hierarchically in directories, resembling\
    \ the DNS tree\n   organization of domains.  To set up this information dnswalk\
    \ may\n   first perform zone transfers from authoritative name servers. You can\n\
    \   have a recursive transfer of a domain and its sub-domains, though you\n  \
    \ should be careful when doing this, as it may generate a great amount\n   of\
    \ traffic.  If the data is already present, dnswalk may skip these\n   transfers,\
    \ provided that it is up to date.\n   Dnswalk looks for inconsistencies in resource\
    \ records, such as MX and\n   aliases pointing to aliases or to unknown hosts,\
    \ incoherent PTR, A\n   and CNAME records, invalid characters in names, missing\
    \ trailing\n   dots, unnecessary glue information, and so on.  It also does some\n\
    \   checking on authority information, namely lame delegations and\n   domains\
    \ with only one name server.  It is easy to use, you only have\n   to specify\
    \ the domain to analyze and some optional parameters and the\n   program does\
    \ the rest.  Only one domain (and its sub-domains, if\n   that's the case) can\
    \ be checked at a time, though.\n   While in the process of checking data, dnswalk\
    \ uses dig and resolver\n   routines (gethostbyXXXX from the Perl library) a lot,\
    \ to get such\n   data as authority information from the servers of the analyzed\n\
    \   domains, names from IP addresses so as to verify the existence of PTR\n  \
    \ records, aliases and so on.  So, besides the zone transfers you may\n   count\
    \ on some more extra traffic (maybe not negligible if you are\n   debugging a\
    \ relatively large amount of data and care about query\n   retries and timeouts),\
    \ just by running the program.\n"
- title: 2.3. Lamers
  contents:
  - "2.3. Lamers\n   A lame delegation is a serious error in DNS configurations, yet\
    \ a\n   (too) common one.  It happens when a name server is listed in the NS\n\
    \   records for some domain and in fact it is not a server for that\n   domain.\
    \  Queries are thus sent to the wrong servers, who don't know\n   nothing (at\
    \ least not as expected) about the queried domain.\n   Furthermore, sometimes\
    \ these hosts (if they exist!) don't even run\n   name servers.  As a result,\
    \ queries are timed out and resent, only to\n   fail, thus creating (more) unnecessary\
    \ traffic.\n   It's easy to create a lame delegation: the most common case happens\n\
    \   when an administrator changes the NS list for his domain, dropping\n   one\
    \ or more servers from that list, without informing his parent\n   domain administration,\
    \ who delegated him authority over the domain.\n   From now on the parent name\
    \ server announces one or more servers for\n   the domain, which will receive\
    \ queries for something they don't know\n   about.  (On the other hand, servers\
    \ may be added to the list without\n   the parent's servers knowing, thus hiding\
    \ valuable information from\n   them - this is not a lame delegation, but shouldn't\
    \ happen either.)\n   Other examples are the inclusion of a name in an NS list\
    \ without\n   telling the administrator of that host, or when a server suddenly\n\
    \   stops providing name service for a domain.\n   To detect and warn DNS administrators\
    \ all over the world about this\n   kind of problem, Bryan Beecher from University\
    \ of Michigan wrote\n   lamers, a program to analyze named (the well-known BIND\
    \ name server)\n   logging information [2].  To produce useful logs, named was\
    \ applied a\n   patch to detect and log lame delegations (this patch was originally\n\
    \   written by Don Lewis from Silicon Systems and is now part of the\n   latest\
    \ release of BIND thanks to Bryan Beecher, so it is expected to\n   be widely\
    \ available in the near future).  Lamers is a small shell\n   script that simply\
    \ scans these logs and reports the lame delegations\n   found.  This reporting\
    \ is done by sending mail to the hostmasters of\n   the affected domains, as stated\
    \ in the SOA record for each of them.\n   If this is not possible, the message\
    \ is sent to the affected name\n   servers' postmasters instead.  Manual processing\
    \ is needed in case of\n   bounces, caused by careless setup of those records\
    \ or invalid\n   postmaster addresses.  A report of the errors found by the U-M\n\
    \   servers is also posted twice a month on the USENET newsgroup\n   comp.protocols.tcp-ip.domains.\n\
    \   If you ever receive such a report, you should study it carefully in\n   order\
    \ to find and correct problems in your domain, or see if your\n   servers are\
    \ being affected by the spreading of erroneous information.\n   Better yet, lamers\
    \ could be run on your servers to detect more lame\n   delegations (U-M can't\
    \ see them all!).  Also, if you receive mail\n   reporting a lame delegation affecting\
    \ your domain or some of your\n   hosts, please don't just ignore it or flame\
    \ the senders.  They're\n   really trying to help!\n   You can get lamers from\
    \ ftp://terminator.cc.umich.edu/dns/lame-\n   delegations.\n"
- title: 2.4. DOC
  contents:
  - "2.4. DOC\n   Authority information is one of the most significant parts of the\
    \ DNS\n   data, as the whole mechanism depends on it to correctly traverse the\n\
    \   domain tree.  Incorrect authority information leads to problems such\n   as\
    \ lame delegations or even, in extreme cases, the inaccessibility of\n   a domain.\
    \  Take the case where the information given about all its\n   name servers is\
    \ incorrect: being unable to contact the real servers\n   you may end up being\
    \ unable to reach anything inside that domain.\n   This may be exaggerated, but\
    \ if you're on the DNS business long\n   enough you've probably have seen some\
    \ enlightened examples of this\n   scenario.\n   To look for this kind of problems\
    \ Paul Mockapetris and Steve Hotz,\n   from the Information Sciences Institute,\
    \ wrote a C-shell script\n   called DOC (Domain Obscenity Control), an automated\
    \ domain testing\n   tool that uses dig to query the appropriate name servers\
    \ about\n   authority for a domain and analyzes the responses.\n   DOC limits\
    \ its analysis to authority data since the authors\n   anticipated that people\
    \ would complain about such things as invasion\n   of privacy.  Also, at the time\
    \ it was written most domains were so\n   messy that they thought there wouldn't\
    \ be much point in checking\n   anything deeper until the basic problems weren't\
    \ fixed.\n   Only one domain is analyzed each time: the program checks if all\
    \ the\n   servers for the parent domain agree about the delegation information\n\
    \   for the domain.  DOC then picks a list of name servers for the domain\n  \
    \ (obtained from one of the parent's servers) and starts checking on\n   their\
    \ information, querying each of them: looks for the SOA record,\n   checks if\
    \ the response is authoritative, compares the various records\n   retrieved, gets\
    \ each one's list of NS, compares the lists (both among\n   these servers and\
    \ the parent's), and for those servers inside the\n   domain the program looks\
    \ for PTR records for them.\n   Due to several factors, DOC seems to have frozen\
    \ since its first\n   public release, back in 1990.  Within the distribution there\
    \ is an\n   RFC draft about automated domain testing, which was never published.\n\
    \   Nevertheless, it may provide useful reading.  The software can be\n   fetched\
    \ from ftp://ftp.uu.net/networking/ip/dns/doc.2.0.tar.Z.\n"
- title: 2.5. DDT
  contents:
  - "2.5. DDT\n   DDT (Domain Debug Tools) is a package of programs to scan DNS\n\
    \   information for error detection, developed originally by Jorge Frazao\n  \
    \ from PUUG - Portuguese UNIX Users Group and later rewritten by the\n   author,\
    \ at the time at the Faculty of Sciences of University of\n   Lisbon.  Each program\
    \ is specialized in a given set of anomalies: you\n   have a checker for authority\
    \ information, another for glue data, mail\n   exchangers, reverse-mappings and\
    \ miscellaneous errors found in all\n   kinds of resource records.  As a whole,\
    \ they do a rather extensive\n   checking on DNS configurations.\n   These tools\
    \ work on cached DNS data, i.e., data stored locally after\n   performing zone\
    \ transfers (presently done by a slightly modified\n   version of BIND's named-xfer,\
    \ called ddt-xfer, which allows recursive\n   transfers) from the appropriate\
    \ servers, rather than querying name\n   servers on-line each time they run. \
    \ This option was taken for\n   several reasons [3]: (1) efficiency, since it\
    \ reads data from disk,\n   avoiding network transit delays, (2) reduced network\
    \ traffic, data\n   has to be fetched only once and then run the programs over\
    \ it as many\n   times as you wish and (3) accessibility - in countries with limited\n\
    \   Internet access, as was the case in Portugal by the time DDT was in\n   its\
    \ first stages, this may be the only practical way to use the\n   tools.\n   Point\
    \ (2) above deserves some special considerations: first, it is\n   not entirely\
    \ true that there aren't additional queries while\n   processing the information,\
    \ one of the tools, the authority checker,\n   queries (via dig) each domain's\
    \ purported name servers in order to\n   test the consistency of the authority\
    \ information they provide about\n   the domain.  Second, it may be argued that\
    \ when the actual tests are\n   done the information used may be out of date.\
    \  While this is true,\n   you should note that this is the DNS nature, if you\
    \ obtain some piece\n   of information you can't be sure that one second later\
    \ it is still\n   valid.  Furthermore, if your source was not the primary for\
    \ the\n   domain then you can't even be sure of the validity in the exact\n  \
    \ moment you got it in the first place.  But experience shows that if\n   you\
    \ see an error, it is likely to be there in the next version of the\n   domain\
    \ information (and if it isn't, nothing was lost by having\n   detected it in\
    \ the past).  On the other side, of course there's\n   little point in checking\
    \ one month old data...\n   The list of errors looked for includes lame delegations,\
    \ version\n   number mismatches between servers (this may be a transient problem),\n\
    \   non-existing servers, domains with only one server, unnecessary glue\n   information,\
    \ MX records pointing to hosts not in the analyzed domain\n   (may not be an error,\
    \ it's just to point possibly strange or\n   expensive mail-routing policies),\
    \ MX records pointing to aliases, A\n   records without the respective PTR and\
    \ vice-versa, missing trailing\n   dots, hostnames with no data (A or CNAME records),\
    \ aliases pointing\n   to aliases, and some more.  Given the specialized nature\
    \ of each\n   tool, it is possible to look for a well defined set of errors,\n\
    \   instead of having the data analyzed in all possible ways.\n   Except for ddt-xfer,\
    \ all the programs are written in Perl.  A new\n   release may come into existence\
    \ in a near future, after a thorough\n   review of the methods used, the set of\
    \ errors checked for and some\n   bug fixing (in particular, a Perl version of\
    \ ddt-xfer is expected).\n   In the mean time, the latest version is available\
    \ from\n   ftp://ns.dns.pt/pub/dns/ddt-2.0.1.tar.gz.\n"
- title: 2.6. The Checker Project
  contents:
  - "2.6. The Checker Project\n   The problem of the huge amount of DNS traffic over\
    \ the Internet is\n   getting researchers close attention for quite some time,\
    \ mainly\n   because most of it is unnecessary.  Observations have shown that\
    \ DNS\n   consumes something like twenty times more bandwidth than it should\n\
    \   [4].  Some causes for this undoubtedly catastrophic scenario lie on\n   deficient\
    \ resolver and name server implementations spread all over\n   the world, from\
    \ personal to super-computers, running all sorts of\n   operating systems.\n \
    \  While the panacea is yet to be found (claims are made that the latest\n   official\
    \ version of BIND is a great step forward [5]), work has been\n   done in order\
    \ to identify sources of anomalies, as a first approach\n   in the search for\
    \ a solution.  The Checker Project is one such\n   effort, developed at the University\
    \ of Southern California [6].  It\n   consists of a set of C code patched into\
    \ BIND's named, for monitoring\n   server activity, building a database with the\
    \ history of that\n   operation (queries and responses).  It is then possible\
    \ to generate\n   reports from the database summarizing activity and identifying\n\
    \   behavioral patterns from client requests, looking for anomalies.  The\n  \
    \ named code alteration is small and simple unless you want do have PEC\n   checking\
    \ enabled (see below).  You may find sources and documentation\n   at ftp://catarina.usc.edu/pub/checker.\n\
    \   Checker only does this kind of collection and reporting, it does not\n   try\
    \ to enforce any rules on the administrators of the defective sites\n   by any\
    \ means whatsoever.  Authors hope that the simple exhibition of\n   the evidences\
    \ is a reason strong enough for those administrators to\n   have their problems\
    \ fixed.\n   An interesting feature is PEC (proactive error checking): the server\n\
    \   pretends to be unresponsive for some queries by randomly choosing\n   some\
    \ name and start refusing replies for queries on that name during\n   a pre-determined\
    \ period.  Those queries are recorded, though, to try\n   to reason about the\
    \ retry and timeout schemes used by name servers\n   and resolvers.  It is expected\
    \ that properly implemented clients will\n   choose another name server to query,\
    \ while defective ones will keep\n   on trying with the same server.  This feature\
    \ seems to be still under\n   testing as it is not completely clear yet how to\
    \ interpret the\n   results.  A PEC-only error checker is available from USC that\
    \ is much\n   simpler than the full error checker.  It examines another name server\n\
    \   client every 30 minutes to see if this client causes excessive load.\n   Presently\
    \ Checker has been running on a secondary for the US domain\n   for more than\
    \ a year with little trouble.  Authors feel confident it\n   should run on any\
    \ BSD platform (at least SunOS) without problems, and\n   is planned to be included\
    \ as part of the BIND name server.\n   Checker is part of a research project lead\
    \ by Peter Danzig from USC,\n   aimed to implement probabilistic error checking\
    \ mechanisms like PEC\n   on distributed systems [7].  DNS is one such system\
    \ and it was chosen\n   as the platform for testing the validity of these techniques\
    \ over the\n   NSFnet.  It is hoped to achieve enough knowledge to provide means\
    \ to\n   improve performance and reliability of distributed systems.\n   Anomalies\
    \ like undetected server failures, query loops, bad\n   retransmission backoff\
    \ algorithms, misconfigurations and resubmission\n   of requests after negative\
    \ replies are some of the targets for these\n   checkers to detect.\n"
- title: 2.7. Others
  contents:
  - "2.7. Others\n   All the tools described above are the result of systematic work\
    \ on\n   the issue of DNS debugging, some of them included in research\n   projects.\
    \  For the sake of completeness several other programs are\n   mentioned here.\
    \  These, though just as serious, seem to have been\n   developed in a somewhat\
    \ ad-hoc fashion, without an implicit intention\n   of being used outside the\
    \ environments where they were born.  This\n   impression is, of course, arguable,\
    \ nevertheless there was no\n   necessity of dedicating an entire section to any\
    \ of them.  This\n   doesn't mean they are not valuable contributions, in some\
    \ cases they\n   may be just what you are looking for, without having to install\
    \ a\n   complete package to do some testings on your domain.\n   The reference\
    \ taken was the contrib directory in the latest BIND\n   distribution (where some\
    \ of the above programs can also be found).\n   There you will find tools for\
    \ creating your DNS configuration files\n   and NIS maps from /etc/hosts and vice-versa\
    \ or generate PTR from A\n   records (these things may be important as a means\
    \ of avoiding common\n   typing errors and inconsistencies between those tables),\
    \ syntax\n   checkers for zone files, programs for querying and monitoring name\n\
    \   servers, all the small programs presented in [8], and more.  It is\n   worth\
    \ spending some time looking at them, maybe you'll find that\n   program you were\
    \ planning to write yourself.  The latest public\n   version of BIND can be found\
    \ at\n   ftp://gatekeeper.dec.com/pub/misc/vixie/4.9.2-940221.tar.gz.  As of\n\
    \   this writing BIND-4.9.3 is in its final beta stages and a public\n   release\
    \ is expected soon, also at gatekeeper.dec.com.\n   You may also want to consider\
    \ using a version control system like\n   SCCS or RCS to maintain your configuration\
    \ files consistent through\n   updates, or use tools like M4 macros to generate\
    \ those files.  As\n   stated above, it's important to avoid human-generated errors,\n\
    \   creating problems that are difficult to track down, since they're\n   often\
    \ hidden behind some mistyped name.  Errors like this may end up\n   in many queries\
    \ for a non-existing name, just to mention the less\n   serious kind.  See [9]\
    \ for a description of the most common errors\n   made while configuring domains.\n"
- title: 3. Why look after DNS?
  contents:
  - "3. Why look after DNS?\n   Several pieces of software were presented to help\
    \ people administer\n   and debug their name services.  They exhibit many differences\
    \ in\n   their way of doing things, scope and requirements and it may be\n   difficult\
    \ just to choose one of them to work with.  For one thing,\n   people's expectations\
    \ from these tools vary according to their kind\n   of involvement with DNS. \
    \ If you are responsible for a big domain,\n   e.g., a top-level one or a big\
    \ institution with many hosts and sub-\n   domains, you probably want to see how\
    \ well is the tree below your\n   node organized, since the consequences of errors\
    \ tend to propagate\n   upwards, thus affecting your own domain and servers. \
    \ For that you\n   need some program that recursively descends the domain tree\
    \ and\n   analyzes each domain per se and the interdependencies between them\n\
    \   all.  You will have to consider how deep you want your analysis to\n   be,\
    \ the effects it will have on the network infrastructure, i.e.,\n   will it generate\
    \ traffic only inside a campus network, no matter how\n   big it is, or will it\
    \ be spread over, say, a whole country (of\n   course, your kind of connectivity\
    \ plays an important role here).\n   You may simply want to perform some sanity\
    \ checks on your own domain,\n   without any further concerns.  Or you may want\
    \ to participate in some\n   kind of global effort to monitor name server traffic,\
    \ either for\n   research purposes or just to point out the \"trouble-queries\"\
    \ that\n   flow around.\n   Whatever your interest may be, you can almost surely\
    \ find a tool to\n   suit it.  Eliminating problems like those described in this\
    \ document\n   is a major contribution for the efficiency of an important piece\
    \ of\n   the Internet mechanism.  Just to have an idea of this importance,\n \
    \  think of all the applications that depend on it, not just to get\n   addresses\
    \ out of names.  Many systems rely on DNS to store, retrieve\n   and spread the\
    \ information they need: Internet electronic mail was\n   already mentioned (see\
    \ [10] for details) and work is in progress to\n   integrate X.400 operations\
    \ with DNS [11]; others include \"remote\n   printing\" services [12], distributed\
    \ file systems and network routing\n   purposes, among others.  These features\
    \ may be accomplished by some\n   standard, well-known resource records [13],\
    \ or by new, experimental\n   ones [14, 15].  Even if some of them won't succeed,\
    \ one may well\n   expect some more load on the DNS burden.\n   The ubiquitous\
    \ DNS thus deserves a great deal of attention, perhaps\n   much more than it generally\
    \ has.  One may say that it is a victim of\n   its own success: if a user triggers\
    \ an excessive amount of queries\n   only to have one request satisfied, he won't\
    \ worry about it (in fact,\n   he won't notice it), won't complain to his system\
    \ administrator, and\n   things will just go on like this.  Of course, DNS was\
    \ designed to\n   resist and provide its services despite all these anomalies.\
    \  But by\n   doing so it is frequently forgotten, as long as people can Telnet\
    \ or\n   ftp.  As DNS will be given new responsibilities, as pointed in the\n\
    \   above paragraph, the problems described in this text will grow more\n   serious\
    \ and new ones may appear (notably security ones [16], with a\n   lot of work\
    \ being presently in progress addressing security in DNS),\n   if nothing is done\
    \ to purge them.\n"
- title: References
  contents:
  - "References\n   [1] Lottor, M., \"Internet Domain Survey, October 1994\",\n  \
    \     http://www.nw.com/zone/WWW/report.html, October 1994.\n   [2] Beecher, B.,\
    \ \"Dealing With Lame Delegations\", Univ. Michigan,\n       LISA VI, October\
    \ 1992.\n   [3] Frazao, J. and J. L. Martins, \"Ddt - Domain Debug Tools, A\n\
    \       Package to Debug the DNS Tree\", Dept. Informatica Faculdade\n       Ciencias\
    \ Univ. Lisboa, DI-FCUL-1992-04, January 1992.\n   [4] Danzig, P., \"Probabilistic\
    \ Error Checkers: Fixing DNS\", Univ.\n       Southern California, Technical Report,\
    \ February 1992.\n   [5] Kumar, A., J. Postel, C. Neuman, P. Danzig and S. Miller,\
    \ \"Common\n       DNS Implementation Errors and Suggested Fixes\", RFC 1536,\n\
    \       USC/Information Sciences Institute, October 1993.\n   [6] Miller, S. and\
    \ P. Danzig, \"The Checker Project, Installation and\n       Operator's Manual\"\
    , Univ. Southern California, TR CS94-560, 1994.\n   [7] Danzig, P., K. Obraczka\
    \ and A. Kumar, \"An Analisys of Wide-Area\n       Name Server Traffic\", Univ.\
    \ Southern California, TR 92-504, 1992.\n   [8] Albitz, P. and C. Liu, \"DNS and\
    \ BIND\", O'Reilly and Associates\n       Inc., October 1992.\n   [9] Beertema,\
    \ P., \"Common DNS Data File Configuration Errors\", RFC\n       1537, CWI, October\
    \ 1993.\n  [10] Partridge, C., \"Mail Routing and the Domain System\", STD 14,\
    \ RFC\n       974, CSNET CIC BBN Laboratories Inc., January 1986.\n  [11] Allocchio,\
    \ C., A. Bonito, B. Cole, S. Giordano and R. Hagens,\n       \"Using the Internet\
    \ DNS to Distribute RFC1327 Mail Address\n       Mapping Tables\", RFC 1664, GARR,\
    \ Cisco Systems Inc., Centro\n       Svizzero Calcolo Scientifico, ANS, August\
    \ 1994.\n  [12] Malamud, C. and M. Rose, \"Principles of Operation for the TPC.INT\n\
    \       Subdomain: General Principles and Policy\", RFC 1530, Internet\n     \
    \  Multicasting Service, Dover Beach Consulting Inc., October 1993.\n  [13] Rosenbaum,\
    \ R., \"Using the Domain Name System to Store Arbitrary\n       String Attributes\"\
    , RFC 1464, Digital Equipment Corporation, May\n       1993.\n  [14] Everhart,\
    \ C., L. Mamakos, R. Ullmann and P. Mockapetris (Ed.),\n       \"New DNS RR Definitions\"\
    , RFC 1183, Transarc, Univ. Maryland,\n       Prime Computer, Information Sciences\
    \ Institute, October 1990.\n  [15] Manning, B., and R. Colella, \"DNS NSAP Resource\
    \ Records\", RFC\n       1706, USC/Information Sciences Institute, NIST, October\
    \ 1994.\n  [16] Gavron, E., \"A Security Problem and Proposed Correction With\n\
    \       Widely Deployed DNS Software\", RFC 1535, ACES Research Inc.,\n      \
    \ October 1993\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo (although\
    \ security is\n   briefly mentioned at the end of section 3).\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Artur Romao\n   DI - Faculdade de Ciencias e Tecnologia\n\
    \   Universidade Nova de Lisboa\n   Quinta da Torre\n   P-2825 Monte de Caparica\n\
    \   Portugal\n   Phone: +351 1 294 28 44\n   Fax:   +351 1 295 77 86\n   EMail:\
    \ artur@fct.unl.pt\n"
